package org . eclipse . debug . internal . ui . launchConfigurations ; import java . lang . reflect . InvocationTargetException ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . Iterator ; import java . util . Set ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . NullProgressMonitor ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . IStatusHandler ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . core . LaunchConfigurationWorkingCopy ; import org . eclipse . debug . internal . core . LaunchManager ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . IDebugView ; import org . eclipse . debug . ui . ILaunchConfigurationDialog ; import org . eclipse . debug . ui . ILaunchConfigurationTab ; import org . eclipse . debug . ui . ILaunchConfigurationTabGroup ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . Separator ; import org . eclipse . jface . action . ToolBarManager ; import org . eclipse . jface . dialogs . ErrorDialog ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . IDialogSettings ; import org . eclipse . jface . dialogs . IMessageProvider ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . dialogs . TitleAreaDialog ; import org . eclipse . jface . operation . IRunnableWithProgress ; import org . eclipse . jface . operation . ModalContext ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . jface . viewers . TreeViewer ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . viewers . ViewerFilter ; import org . eclipse . jface . wizard . ProgressMonitorPart ; import org . eclipse . swt . SWT ; import org . eclipse . swt . custom . SashForm ; import org . eclipse . swt . custom . ViewForm ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . graphics . Rectangle ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Text ; import org . eclipse . swt . widgets . ToolBar ; import org . eclipse . swt . widgets . TreeItem ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . progress . WorkbenchJob ; import com . ibm . icu . text . MessageFormat ; public class LaunchConfigurationsDialog extends TitleAreaDialog implements ILaunchConfigurationDialog , IPropertyChangeListener { private static ILaunchConfigurationDialog fgCurrentlyVisibleLaunchConfigurationDialog ; protected static final int ID_LAUNCH_BUTTON = IDialogConstants . CLIENT_ID + <int> ; protected static final int ID_CLOSE_BUTTON = IDialogConstants . CLIENT_ID + <int> ; protected static final int ID_CANCEL_BUTTON = IDialogConstants . CLIENT_ID + <int> ; protected static final int ID_DISCARD_BUTTON = IDialogConstants . CLIENT_ID + <int> ; protected static final float MAX_DIALOG_WIDTH_PERCENT = <float> ; protected static final float MAX_DIALOG_HEIGHT_PERCENT = <float> ; protected static final Point DEFAULT_INITIAL_DIALOG_SIZE = new Point ( <int> , <int> ) ; private static final int [ ] DEFAULT_SASH_WEIGHTS = new int [ ] { <int> , <int> } ; public static final int LAUNCH_CONFIGURATION_DIALOG_OPEN_ON_LAST_LAUNCHED = <int> ; public static final int LAUNCH_CONFIGURATION_DIALOG_OPEN_ON_SELECTION = <int> ; public static final int LAUNCH_CONFIGURATION_DIALOG_REUSE_OPEN = <int> ; private static final String DELIMITER = <str> ; private int fOpenMode = LAUNCH_CONFIGURATION_DIALOG_OPEN_ON_LAST_LAUNCHED ; private static final String DIALOG_SASH_WEIGHTS_1 = IDebugUIConstants . PLUGIN_ID + <str> ; private static final String DIALOG_SASH_WEIGHTS_2 = IDebugUIConstants . PLUGIN_ID + <str> ; private static final String DIALOG_EXPANDED_NODES = IDebugUIConstants . PLUGIN_ID + <str> ; public static ILaunchConfigurationDialog getCurrentlyVisibleLaunchConfigurationDialog ( ) { return fgCurrentlyVisibleLaunchConfigurationDialog ; } public static void setCurrentlyVisibleLaunchConfigurationDialog ( ILaunchConfigurationDialog dialog ) { fgCurrentlyVisibleLaunchConfigurationDialog = dialog ; } private Control fLastControl ; private Composite fButtonComp ; private SashForm fSashForm ; private LaunchConfigurationView fLaunchConfigurationView ; private LaunchConfigurationTabGroupViewer fTabViewer ; private ProgressMonitorPart fProgressMonitorPart ; private LaunchGroupExtension fGroup ; private Image fBannerImage ; private IStructuredSelection fInitialSelection ; private IStatus fInitialStatus ; private long fActiveRunningOperations = <int> ; private IAction fDoubleClickAction ; private ClosedProjectFilter fClosedProjectFilter ; private DeletedProjectFilter fDeletedProjectFilter ; private LaunchConfigurationTypeFilter fLCTFilter ; private WorkingSetsFilter fWorkingSetsFilter ; protected Set < String > fReservedNames = null ; private boolean fSetDefaultOnOpen = false ; private boolean fSettingInput = false ; public LaunchConfigurationsDialog ( Shell shell , LaunchGroupExtension group ) { super ( shell ) ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; setLaunchGroup ( group ) ; } protected void addContent ( Composite dialogComp ) { GridData gd ; Composite topComp = new Composite ( dialogComp , SWT . NONE ) ; gd = new GridData ( GridData . FILL_BOTH ) ; topComp . setLayoutData ( gd ) ; GridLayout topLayout = new GridLayout ( <int> , false ) ; topLayout . marginHeight = <int> ; topLayout . marginWidth = <int> ; topComp . setLayout ( topLayout ) ; setTitle ( LaunchConfigurationsMessages . LaunchConfigurationDialog_Create__manage__and_run_launch_configurations_8 ) ; setMessage ( LaunchConfigurationsMessages . LaunchConfigurationDialog_Ready_to_launch_2 ) ; setModeLabelState ( ) ; gd = new GridData ( GridData . FILL_BOTH ) ; gd . horizontalSpan = <int> ; SashForm sash = new SashForm ( topComp , SWT . SMOOTH ) ; sash . setOrientation ( SWT . HORIZONTAL ) ; sash . setLayoutData ( gd ) ; sash . setFont ( dialogComp . getFont ( ) ) ; sash . setVisible ( true ) ; fSashForm = sash ; Control launchConfigSelectionArea = createLaunchConfigurationSelectionArea ( fSashForm ) ; gd = new GridData ( GridData . FILL_VERTICAL ) ; launchConfigSelectionArea . setLayoutData ( gd ) ; Composite editAreaComp = createLaunchConfigurationEditArea ( fSashForm ) ; gd = new GridData ( GridData . FILL_BOTH ) ; editAreaComp . setLayoutData ( gd ) ; dialogComp . layout ( true ) ; applyDialogFont ( dialogComp ) ; } @Override protected void buttonPressed ( int buttonId ) { if ( buttonId = = ID_LAUNCH_BUTTON ) { handleLaunchPressed ( ) ; } else if ( buttonId = = ID_CLOSE_BUTTON ) { handleClosePressed ( ) ; } else { super . buttonPressed ( buttonId ) ; } } protected int shouldSaveCurrentConfig ( ) { if ( fTabViewer . isDirty ( ) ) { if ( fTabViewer . canSave ( ) ) { return showSaveChangesDialog ( ) ; } return showUnsavedChangesDialog ( ) ; } return IDialogConstants . NO_ID ; } @Override public boolean close ( ) { if ( ! isSafeToClose ( ) ) { return false ; } persistSashWeights ( ) ; persistExpansion ( ) ; setCurrentlyVisibleLaunchConfigurationDialog ( null ) ; fTabViewer . dispose ( ) ; if ( fLaunchConfigurationView ! = null ) { fLaunchConfigurationView . dispose ( ) ; } DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . removePropertyChangeListener ( this ) ; boolean result = super . close ( ) ; getBannerImage ( ) . dispose ( ) ; return result ; } @Override protected void configureShell ( Shell shell ) { super . configureShell ( shell ) ; shell . setText ( getShellTitle ( ) ) ; } @Override public void create ( ) { super . create ( ) ; if ( fTabViewer . getInput ( ) = = null ) { fTabViewer . inputChanged ( null ) ; } } @Override protected Control createButtonBar ( Composite parent ) { Font font = parent . getFont ( ) ; Composite composite = new Composite ( parent , SWT . NULL ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = <int> ; layout . marginHeight = <int> ; layout . marginWidth = <int> ; layout . marginLeft = convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_MARGIN ) ; composite . setLayout ( layout ) ; composite . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; composite . setFont ( font ) ; if ( isHelpAvailable ( ) ) { createHelpControl ( composite ) ; } Composite monitorComposite = new Composite ( composite , SWT . NULL ) ; layout = new GridLayout ( ) ; layout . marginHeight = <int> ; layout . marginWidth = <int> ; layout . numColumns = <int> ; monitorComposite . setLayout ( layout ) ; monitorComposite . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; GridLayout pmLayout = new GridLayout ( ) ; fProgressMonitorPart = new ProgressMonitorPart ( monitorComposite , pmLayout , true ) ; fProgressMonitorPart . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; fProgressMonitorPart . setFont ( font ) ; monitorComposite . setVisible ( false ) ; boolean helpAvailable = isHelpAvailable ( ) ; setHelpAvailable ( false ) ; fButtonComp = ( Composite ) super . createButtonBar ( composite ) ; setHelpAvailable ( helpAvailable ) ; return composite ; } @Override protected void createButtonsForButtonBar ( Composite parent ) { Button button = createButton ( parent , ID_LAUNCH_BUTTON , getLaunchButtonText ( ) , true ) ; button . setEnabled ( false ) ; createButton ( parent , ID_CLOSE_BUTTON , LaunchConfigurationsMessages . LaunchConfigurationDialog_Close_1 , false ) ; } @Override protected Control createContents ( Composite parent ) { Control contents = super . createContents ( parent ) ; initializeContent ( ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getShell ( ) , getHelpContextId ( ) ) ; return contents ; } @Override protected Control createDialogArea ( Composite parent ) { Composite dialogComp = ( Composite ) super . createDialogArea ( parent ) ; addContent ( dialogComp ) ; if ( fLaunchConfigurationView ! = null ) { fLaunchConfigurationView . updateFilterLabel ( ) ; } return dialogComp ; } protected Composite createLaunchConfigurationEditArea ( Composite parent ) { setTabViewer ( new LaunchConfigurationTabGroupViewer ( parent , this ) ) ; return ( Composite ) fTabViewer . getControl ( ) ; } protected void createToolbarActions ( ToolBarManager tmanager ) { tmanager . add ( getNewAction ( ) ) ; tmanager . add ( getDuplicateAction ( ) ) ; tmanager . add ( getDeleteAction ( ) ) ; tmanager . add ( new Separator ( ) ) ; tmanager . add ( getCollapseAllAction ( ) ) ; tmanager . add ( getFilterAction ( ) ) ; tmanager . update ( true ) ; DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . addPropertyChangeListener ( this ) ; } protected Control createLaunchConfigurationSelectionArea ( Composite parent ) { Composite comp = new Composite ( parent , SWT . FLAT ) ; GridLayout gridLayout = new GridLayout ( <int> , false ) ; gridLayout . marginHeight = <int> ; gridLayout . marginWidth = <int> ; comp . setLayout ( gridLayout ) ; comp . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; ViewForm viewForm = new ViewForm ( comp , SWT . FLAT | SWT . BORDER ) ; ToolBarManager toolBarManager = new ToolBarManager ( SWT . FLAT ) ; ToolBar toolBar = toolBarManager . createControl ( viewForm ) ; toolBar . setBackground ( parent . getBackground ( ) ) ; viewForm . setTopLeft ( toolBar ) ; viewForm . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; Composite viewFormContents = new Composite ( viewForm , SWT . FLAT ) ; gridLayout = new GridLayout ( ) ; gridLayout . marginHeight = <int> ; gridLayout . marginWidth = <int> ; viewFormContents . setLayout ( gridLayout ) ; viewFormContents . setBackground ( parent . getDisplay ( ) . getSystemColor ( SWT . COLOR_LIST_BACKGROUND ) ) ; fLaunchConfigurationView = new LaunchConfigurationView ( getLaunchGroup ( ) , createViewerFilters ( ) ) ; fLaunchConfigurationView . createLaunchDialogControl ( viewFormContents ) ; Text filterText = fLaunchConfigurationView . getFilteringTextControl ( ) ; if ( filterText ! = null ) { filterText . setFocus ( ) ; } createToolbarActions ( toolBarManager ) ; fDoubleClickAction = new Action ( ) { @Override public void run ( ) { IStructuredSelection selection = ( IStructuredSelection ) fLaunchConfigurationView . getViewer ( ) . getSelection ( ) ; Object target = selection . getFirstElement ( ) ; if ( target instanceof ILaunchConfiguration ) { if ( fTabViewer . canLaunch ( ) & fTabViewer . canLaunchWithModes ( ) & ! fTabViewer . hasDuplicateDelegates ( ) ) { handleLaunchPressed ( ) ; } } else { getNewAction ( ) . run ( ) ; } } } ; fLaunchConfigurationView . setAction ( IDebugView . DOUBLE_CLICK_ACTION , fDoubleClickAction ) ; Viewer viewer = fLaunchConfigurationView . getViewer ( ) ; Control control = viewer . getControl ( ) ; GridData gd = new GridData ( GridData . FILL_BOTH ) ; control . setLayoutData ( gd ) ; viewForm . setContent ( viewFormContents ) ; AbstractLaunchConfigurationAction . IConfirmationRequestor requestor = new AbstractLaunchConfigurationAction . IConfirmationRequestor ( ) { @Override public boolean getConfirmation ( ) { int status = shouldSaveCurrentConfig ( ) ; if ( status = = IDialogConstants . YES_ID ) { fTabViewer . handleApplyPressed ( ) ; return true ; } else if ( status = = IDialogConstants . NO_ID ) { fTabViewer . handleRevertPressed ( ) ; return true ; } return false ; } } ; getDuplicateAction ( ) . setConfirmationRequestor ( requestor ) ; getNewAction ( ) . setConfirmationRequestor ( requestor ) ; ( ( StructuredViewer ) viewer ) . addPostSelectionChangedListener ( new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { handleLaunchConfigurationSelectionChanged ( event ) ; getNewAction ( ) . setEnabled ( getNewAction ( ) . isEnabled ( ) ) ; getDeleteAction ( ) . setEnabled ( getDeleteAction ( ) . isEnabled ( ) ) ; getDuplicateAction ( ) . setEnabled ( getDuplicateAction ( ) . isEnabled ( ) ) ; } } ) ; return comp ; } private ViewerFilter [ ] createViewerFilters ( ) { ArrayList < ViewerFilter > filters = new ArrayList < ViewerFilter > ( ) ; fClosedProjectFilter = new ClosedProjectFilter ( ) ; if ( DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_CLOSED ) ) { filters . add ( fClosedProjectFilter ) ; } fDeletedProjectFilter = new DeletedProjectFilter ( ) ; if ( DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_DELETED ) ) { filters . add ( fDeletedProjectFilter ) ; } fLCTFilter = new LaunchConfigurationTypeFilter ( ) ; if ( DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_TYPES ) ) { filters . add ( fLCTFilter ) ; } fWorkingSetsFilter = new WorkingSetsFilter ( ) ; if ( DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_FILTER_WORKING_SETS ) ) { filters . add ( fWorkingSetsFilter ) ; } return filters . toArray ( new ViewerFilter [ filters . size ( ) ] ) ; } public void doInitialTreeSelection ( ) { fLaunchConfigurationView . getViewer ( ) . setSelection ( fInitialSelection ) ; } @Override public String generateName ( String name ) { if ( name = = null ) { return getLaunchManager ( ) . generateLaunchConfigurationName ( IInternalDebugCoreConstants . EMPTY_STRING ) ; } return getLaunchManager ( ) . generateLaunchConfigurationName ( name ) ; } public String generateName ( String name , Set < String > reservednames ) { if ( name = = null ) { return ( ( LaunchManager ) getLaunchManager ( ) ) . generateUniqueLaunchConfigurationNameFrom ( IInternalDebugCoreConstants . EMPTY_STRING , reservednames ) ; } return ( ( LaunchManager ) getLaunchManager ( ) ) . generateUniqueLaunchConfigurationNameFrom ( name , reservednames ) ; } @Override public ILaunchConfigurationTab getActiveTab ( ) { return fTabViewer . getActiveTab ( ) ; } protected Image getBannerImage ( ) { if ( fBannerImage = = null ) { ImageDescriptor descriptor = getLaunchGroup ( ) . getBannerImageDescriptor ( ) ; if ( descriptor ! = null ) { fBannerImage = descriptor . createImage ( ) ; } } return fBannerImage ; } protected AbstractLaunchConfigurationAction getDeleteAction ( ) { return ( AbstractLaunchConfigurationAction ) fLaunchConfigurationView . getAction ( DeleteLaunchConfigurationAction . ID_DELETE_ACTION ) ; } protected IAction getFilterAction ( ) { return fLaunchConfigurationView . getAction ( FilterLaunchConfigurationAction . ID_FILTER_ACTION ) ; } protected IAction getCollapseAllAction ( ) { return fLaunchConfigurationView . getAction ( CollapseAllLaunchConfigurationAction . ID_COLLAPSEALL_ACTION ) ; } @Override protected IDialogSettings getDialogBoundsSettings ( ) { return getDialogSettings ( ) ; } @Override protected int getDialogBoundsStrategy ( ) { return DIALOG_PERSISTSIZE ; } protected IDialogSettings getDialogSettings ( ) { IDialogSettings settings = DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) ; IDialogSettings section = settings . getSection ( getDialogSettingsSectionName ( ) ) ; if ( section = = null ) { section = settings . addNewSection ( getDialogSettingsSectionName ( ) ) ; } return section ; } protected String getDialogSettingsSectionName ( ) { return IDebugUIConstants . PLUGIN_ID + <str> ; } protected Display getDisplay ( ) { Shell shell = getShell ( ) ; if ( shell ! = null ) { return shell . getDisplay ( ) ; } return DebugUIPlugin . getStandardDisplay ( ) ; } protected AbstractLaunchConfigurationAction getDuplicateAction ( ) { return ( AbstractLaunchConfigurationAction ) fLaunchConfigurationView . getAction ( DuplicateLaunchConfigurationAction . ID_DUPLICATE_ACTION ) ; } protected String getHelpContextId ( ) { return IDebugHelpContextIds . LAUNCH_CONFIGURATION_DIALOG ; } protected IStatus getInitialStatus ( ) { return fInitialStatus ; } protected ILaunchConfiguration getLastLaunchedWorkbenchConfiguration ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . getLastLaunch ( getLaunchGroup ( ) . getIdentifier ( ) ) ; } protected String getLaunchButtonText ( ) { return DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchMode ( getMode ( ) ) . getLabel ( ) ; } public LaunchGroupExtension getLaunchGroup ( ) { return fGroup ; } @Override public String getMode ( ) { return getLaunchGroup ( ) . getMode ( ) ; } protected AbstractLaunchConfigurationAction getNewAction ( ) { return ( AbstractLaunchConfigurationAction ) fLaunchConfigurationView . getAction ( CreateLaunchConfigurationAction . ID_CREATE_ACTION ) ; } public Set < String > getReservedNameSet ( ) { return fReservedNames ; } protected int getOpenMode ( ) { return fOpenMode ; } public Object getSelectedPage ( ) { return getActiveTab ( ) ; } protected String getShellTitle ( ) { String title = null ; if ( getLaunchGroup ( ) ! = null ) { title = MessageFormat . format ( LaunchConfigurationsMessages . LaunchConfigurationsDialog_configurations , new Object [ ] { DebugUIPlugin . removeAccelerators ( getLaunchGroup ( ) . getLabel ( ) ) } ) ; } if ( title = = null ) { title = LaunchConfigurationsMessages . LaunchConfigurationDialog_Launch_Configurations_18 ; } return title ; } public ILaunchConfigurationTabGroup getTabGroup ( ) { if ( fTabViewer ! = null ) { return fTabViewer . getTabGroup ( ) ; } return null ; } @Override public ILaunchConfigurationTab [ ] getTabs ( ) { if ( getTabGroup ( ) = = null ) { return null ; } return getTabGroup ( ) . getTabs ( ) ; } protected LaunchConfigurationTabGroupViewer getTabViewer ( ) { return fTabViewer ; } protected void handleClosePressed ( ) { if ( fTabViewer . canSave ( ) ) { int status = shouldSaveCurrentConfig ( ) ; if ( status ! = IDialogConstants . CANCEL_ID ) { if ( status ! = ID_DISCARD_BUTTON ) { if ( status = = IDialogConstants . YES_ID ) { fTabViewer . handleApplyPressed ( ) ; } cancelPressed ( ) ; } } } else { cancelPressed ( ) ; } } protected void handleLaunchConfigurationSelectionChanged ( SelectionChangedEvent event ) { Object input = fTabViewer . getInput ( ) ; Object newInput = null ; IStructuredSelection selection = ( IStructuredSelection ) event . getSelection ( ) ; if ( selection . size ( ) = = <int> ) { newInput = selection . getFirstElement ( ) ; } if ( ! isEqual ( input , newInput ) ) { ILaunchConfiguration original = fTabViewer . getOriginal ( ) ; if ( original ! = null & & newInput = = null & & getLaunchManager ( ) . getMovedTo ( original ) ! = null ) { return ; } boolean deleted = false ; if ( original ! = null ) { deleted = ! original . exists ( ) ; } boolean renamed = false ; if ( newInput instanceof ILaunchConfiguration ) { renamed = getLaunchManager ( ) . getMovedFrom ( ( ILaunchConfiguration ) newInput ) ! = null ; } try { fSettingInput = true ; if ( fTabViewer . canSave ( ) & & fTabViewer . isDirty ( ) & & ! deleted & & ! renamed ) { if ( fLaunchConfigurationView ! = null ) { fLaunchConfigurationView . setAutoSelect ( false ) ; } int ret = showUnsavedChangesDialog ( ) ; if ( ret = = IDialogConstants . YES_ID ) { fTabViewer . handleApplyPressed ( ) ; fTabViewer . setInput ( newInput ) ; } else if ( ret = = IDialogConstants . NO_ID ) { fTabViewer . handleRevertPressed ( ) ; fTabViewer . setInput ( newInput ) ; } else { fLaunchConfigurationView . getViewer ( ) . setSelection ( new StructuredSelection ( input ) ) ; } fLaunchConfigurationView . setAutoSelect ( true ) ; } else { fTabViewer . setInput ( newInput ) ; if ( fTabViewer . isDirty ( ) ) { fTabViewer . handleApplyPressed ( ) ; } } } finally { fSettingInput = false ; updateButtons ( ) ; updateMessage ( ) ; } if ( getShell ( ) ! = null & & getShell ( ) . isVisible ( ) ) { resize ( ) ; } } } protected void handleLaunchPressed ( ) { ILaunchConfiguration config = fTabViewer . getOriginal ( ) ; if ( fTabViewer . isDirty ( ) & & fTabViewer . canSave ( ) ) { config = fTabViewer . handleApplyPressed ( ) ; } if ( config ! = null ) { close ( ) ; DebugUITools . launch ( config , getMode ( ) ) ; } } public void handleStatus ( IStatus status ) { IStatusHandler handler = DebugPlugin . getDefault ( ) . getStatusHandler ( status ) ; if ( handler ! = null ) { try { handler . handleStatus ( status , this ) ; return ; } catch ( CoreException e ) { status = e . getStatus ( ) ; } } String title = null ; switch ( status . getSeverity ( ) ) { case IStatus . ERROR : title = LaunchConfigurationsMessages . LaunchConfigurationsDialog_Error_1 ; break ; case IStatus . WARNING : title = LaunchConfigurationsMessages . LaunchConfigurationsDialog_Warning_2 ; break ; default : title = LaunchConfigurationsMessages . LaunchConfigurationsDialog_Information_3 ; break ; } ErrorDialog . openError ( getShell ( ) , title , null , status ) ; } @Override protected void initializeBounds ( ) { IDialogSettings settings = getDialogSettings ( ) ; if ( fSashForm ! = null ) { int w1 , w2 ; try { w1 = settings . getInt ( DIALOG_SASH_WEIGHTS_1 ) ; if ( w1 < <int> ) { w1 = DEFAULT_SASH_WEIGHTS [ <int> ] ; } w2 = settings . getInt ( DIALOG_SASH_WEIGHTS_2 ) ; if ( w2 < <int> ) { w2 = DEFAULT_SASH_WEIGHTS [ <int> ] ; } } catch ( NumberFormatException nfe ) { w1 = DEFAULT_SASH_WEIGHTS [ <int> ] ; w2 = DEFAULT_SASH_WEIGHTS [ <int> ] ; } fSashForm . setWeights ( new int [ ] { w1 , w2 } ) ; } super . initializeBounds ( ) ; } @Override protected Point getInitialSize ( ) { try { getDialogSettings ( ) . getInt ( <str> ) ; return super . getInitialSize ( ) ; } catch ( NumberFormatException nfe ) { return DEFAULT_INITIAL_DIALOG_SIZE ; } } protected void doSetDefaults ( ILaunchConfigurationWorkingCopy wc ) { try { ILaunchConfigurationTabGroup tabGroup = LaunchConfigurationPresentationManager . getDefault ( ) . getTabGroup ( wc , getMode ( ) ) ; ILaunchConfigurationDialog dialog = LaunchConfigurationsDialog . getCurrentlyVisibleLaunchConfigurationDialog ( ) ; tabGroup . createTabs ( dialog , dialog . getMode ( ) ) ; ILaunchConfigurationTab [ ] tabs = tabGroup . getTabs ( ) ; for ( int i = <int> ; i < tabs . length ; i + + ) { tabs [ i ] . setLaunchConfigurationDialog ( dialog ) ; } tabGroup . setDefaults ( wc ) ; tabGroup . dispose ( ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; } } protected void initializeContent ( ) { if ( fSetDefaultOnOpen ) { try { Object o = fInitialSelection . getFirstElement ( ) ; if ( o instanceof ILaunchConfigurationWorkingCopy ) { ILaunchConfigurationWorkingCopy wc = ( ILaunchConfigurationWorkingCopy ) o ; doSetDefaults ( wc ) ; setInitialSelection ( new StructuredSelection ( wc . doSave ( ) ) ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } doInitialTreeSelection ( ) ; IStatus status = getInitialStatus ( ) ; if ( status ! = null ) { handleStatus ( status ) ; } restoreExpansion ( ) ; } protected boolean isEqual ( Object o1 , Object o2 ) { if ( o1 = = o2 ) { return true ; } else if ( o1 = = null ) { return false ; } else { return o1 . equals ( o2 ) ; } } protected boolean isSafeToClose ( ) { return fActiveRunningOperations = = <int> ; } @Override public int open ( ) { int mode = getOpenMode ( ) ; setCurrentlyVisibleLaunchConfigurationDialog ( this ) ; if ( mode = = LAUNCH_CONFIGURATION_DIALOG_OPEN_ON_LAST_LAUNCHED ) { ILaunchConfiguration lastLaunchedConfig = getLastLaunchedWorkbenchConfiguration ( ) ; if ( lastLaunchedConfig ! = null ) { setInitialSelection ( new StructuredSelection ( lastLaunchedConfig ) ) ; } } return super . open ( ) ; } protected void persistExpansion ( ) { if ( fLaunchConfigurationView ! = null ) { IDialogSettings settings = getDialogSettings ( ) ; TreeItem [ ] items = fLaunchConfigurationView . getTreeViewer ( ) . getTree ( ) . getItems ( ) ; String value = settings . get ( DIALOG_EXPANDED_NODES ) ; if ( value = = null ) { value = IInternalDebugCoreConstants . EMPTY_STRING ; } ArrayList < String > list = new ArrayList < String > ( ) ; String [ ] persisted = value . split ( DELIMITER ) ; for ( int i = <int> ; i < persisted . length ; i + + ) { list . add ( persisted [ i ] ) ; } String type = IInternalDebugCoreConstants . EMPTY_STRING ; for ( int i = <int> ; i < items . length ; i + + ) { type = ( ( ILaunchConfigurationType ) items [ i ] . getData ( ) ) . getIdentifier ( ) ; if ( ! list . contains ( type ) & items [ i ] . getExpanded ( ) ) { list . add ( type ) ; } else if ( ! items [ i ] . getExpanded ( ) ) { list . remove ( type ) ; } } value = IInternalDebugCoreConstants . EMPTY_STRING ; for ( Iterator < String > iter = list . iterator ( ) ; iter . hasNext ( ) ; ) { value + = iter . next ( ) + DELIMITER ; } settings . put ( DIALOG_EXPANDED_NODES , value ) ; } } protected void restoreExpansion ( ) { if ( fLaunchConfigurationView ! = null ) { IDialogSettings settings = getDialogSettings ( ) ; String value = settings . get ( DIALOG_EXPANDED_NODES ) ; if ( value ! = null ) { String [ ] nodes = value . split ( DELIMITER ) ; TreeItem [ ] items = fLaunchConfigurationView . getTreeViewer ( ) . getTree ( ) . getItems ( ) ; HashSet < Object > toexpand = new HashSet < Object > ( ) ; if ( fInitialSelection ! = null & & ! fInitialSelection . isEmpty ( ) ) { Object obj = fInitialSelection . getFirstElement ( ) ; if ( obj instanceof ILaunchConfigurationType ) { toexpand . add ( obj ) ; } else if ( obj instanceof ILaunchConfiguration ) { try { toexpand . add ( ( ( ILaunchConfiguration ) obj ) . getType ( ) ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } } for ( int i = <int> ; i < nodes . length ; i + + ) { for ( int k = <int> ; k < items . length ; k + + ) { ILaunchConfigurationType type = ( ILaunchConfigurationType ) items [ k ] . getData ( ) ; if ( type . getIdentifier ( ) . equals ( nodes [ i ] ) ) { toexpand . add ( type ) ; } } } fLaunchConfigurationView . getTreeViewer ( ) . setExpandedElements ( toexpand . toArray ( ) ) ; } } } protected void persistSashWeights ( ) { IDialogSettings settings = getDialogSettings ( ) ; if ( fSashForm ! = null ) { int [ ] sashWeights = fSashForm . getWeights ( ) ; settings . put ( DIALOG_SASH_WEIGHTS_1 , ( sashWeights [ <int> ] < <int> ? DEFAULT_SASH_WEIGHTS [ <int> ] : sashWeights [ <int> ] ) ) ; settings . put ( DIALOG_SASH_WEIGHTS_2 , ( sashWeights [ <int> ] < <int> ? DEFAULT_SASH_WEIGHTS [ <int> ] : sashWeights [ <int> ] ) ) ; } } protected void refreshStatus ( ) { updateMessage ( ) ; updateButtons ( ) ; } protected void resize ( ) { if ( getTabGroup ( ) ! = null ) { Point shell = getShell ( ) . getSize ( ) ; int maxx = ( int ) ( getDisplay ( ) . getBounds ( ) . width * MAX_DIALOG_WIDTH_PERCENT ) , maxy = ( int ) ( getDisplay ( ) . getBounds ( ) . height * MAX_DIALOG_HEIGHT_PERCENT ) ; maxx = ( maxx < DEFAULT_INITIAL_DIALOG_SIZE . x ? DEFAULT_INITIAL_DIALOG_SIZE . x : maxx ) ; maxy = ( maxy < DEFAULT_INITIAL_DIALOG_SIZE . y ? DEFAULT_INITIAL_DIALOG_SIZE . y : maxy ) ; Point psize = getShell ( ) . computeSize ( SWT . DEFAULT , maxy ) ; if ( ( psize . x > maxx ? maxx : psize . x ) > shell . x | | ( psize . y > maxy ? maxy : psize . y ) > shell . y ) { setShellSize ( Math . min ( psize . x , maxx ) , Math . min ( psize . y , maxy ) ) ; constrainShellSize ( ) ; } } } @Override public void run ( boolean fork , boolean cancelable , IRunnableWithProgress runnable ) throws InvocationTargetException , InterruptedException { if ( getShell ( ) ! = null & & getShell ( ) . isVisible ( ) ) { fLastControl = getShell ( ) . getDisplay ( ) . getFocusControl ( ) ; if ( fLastControl ! = null & & fLastControl . getShell ( ) ! = getShell ( ) ) { fLastControl = null ; } fProgressMonitorPart . attachToCancelComponent ( null ) ; fProgressMonitorPart . getParent ( ) . setVisible ( true ) ; fActiveRunningOperations + + ; Control [ ] children = ( ( Composite ) fButtonComp . getChildren ( ) [ <int> ] ) . getChildren ( ) ; boolean [ ] prev = new boolean [ children . length + <int> ] ; prev [ <int> ] = fTabViewer . getApplyButton ( ) . isEnabled ( ) ; prev [ <int> ] = fTabViewer . getRevertButton ( ) . isEnabled ( ) ; for ( int i = <int> ; i < children . length ; i + + ) { prev [ i + <int> ] = children [ i ] . isEnabled ( ) ; } try { updateRunnnableControls ( false , prev ) ; ModalContext . run ( runnable , fork , fProgressMonitorPart , getShell ( ) . getDisplay ( ) ) ; } finally { fActiveRunningOperations - - ; updateRunnnableControls ( true , prev ) ; if ( getShell ( ) ! = null ) { fProgressMonitorPart . getParent ( ) . setVisible ( false ) ; fProgressMonitorPart . removeFromCancelComponent ( null ) ; if ( fLastControl ! = null ) { fLastControl . setFocus ( ) ; } } } } else { PlatformUI . getWorkbench ( ) . getProgressService ( ) . run ( fork , cancelable , runnable ) ; } } private void updateRunnnableControls ( boolean enabled , boolean [ ] prev ) { fTabViewer . getApplyButton ( ) . setEnabled ( enabled ? prev [ <int> ] : enabled ) ; fTabViewer . getRevertButton ( ) . setEnabled ( enabled ? prev [ <int> ] : enabled ) ; Control [ ] children = ( ( Composite ) fButtonComp . getChildren ( ) [ <int> ] ) . getChildren ( ) ; for ( int i = <int> ; i < children . length ; i + + ) { children [ i ] . setEnabled ( enabled ? prev [ i + <int> ] : enabled ) ; } getDialogArea ( ) . setEnabled ( enabled ) ; } @Override public void setActiveTab ( ILaunchConfigurationTab tab ) { fTabViewer . setActiveTab ( tab ) ; } @Override public void setActiveTab ( int index ) { fTabViewer . setActiveTab ( index ) ; } public void setInitialSelection ( IStructuredSelection selection ) { fInitialSelection = selection ; } public void setInitialStatus ( IStatus status ) { fInitialStatus = status ; } public void setDefaultsOnOpen ( boolean setDefaults ) { fSetDefaultOnOpen = setDefaults ; } public boolean shouldSetDefaultsOnOpen ( ) { return fSetDefaultOnOpen ; } protected void setLaunchGroup ( LaunchGroupExtension group ) { fGroup = group ; } protected void setModeLabelState ( ) { setTitleImage ( getBannerImage ( ) ) ; } @Override public void setName ( String name ) { fTabViewer . setName ( name ) ; } protected ILaunchManager getLaunchManager ( ) { return DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; } public void setOpenMode ( int mode ) { fOpenMode = mode ; } protected void setShellSize ( int width , int height ) { Rectangle bounds = getShell ( ) . getMonitor ( ) . getBounds ( ) ; getShell ( ) . setSize ( Math . min ( width , bounds . width ) , Math . min ( height , bounds . height ) ) ; } protected void setTabViewer ( LaunchConfigurationTabGroupViewer viewer ) { fTabViewer = viewer ; } private int showDiscardChangesDialog ( ) { StringBuffer buffer = new StringBuffer ( MessageFormat . format ( LaunchConfigurationsMessages . LaunchConfigurationDialog_The_configuration___35 , new Object [ ] { fTabViewer . getWorkingCopy ( ) . getName ( ) } ) ) ; buffer . append ( fTabViewer . getErrorMesssage ( ) ) ; buffer . append ( LaunchConfigurationsMessages . LaunchConfigurationDialog_Do_you_wish_to_discard_changes_37 ) ; MessageDialog dialog = new MessageDialog ( getShell ( ) , LaunchConfigurationsMessages . LaunchConfigurationDialog_Discard_changes__38 , null , buffer . toString ( ) , MessageDialog . QUESTION , new String [ ] { LaunchConfigurationsMessages . LaunchConfigurationDialog_Yes_32 , LaunchConfigurationsMessages . LaunchConfigurationDialog_No_33 } , <int> ) ; int val = IDialogConstants . NO_ID ; if ( dialog . open ( ) = = <int> ) { if ( fLaunchConfigurationView ! = null ) { fLaunchConfigurationView . setAutoSelect ( false ) ; } fTabViewer . handleRevertPressed ( ) ; val = IDialogConstants . YES_ID ; if ( fLaunchConfigurationView ! = null ) { fLaunchConfigurationView . setAutoSelect ( true ) ; } } if ( val = = IDialogConstants . NO_ID ) { val = ID_DISCARD_BUTTON ; } return val ; } private int showSaveChangesDialog ( ) { String message = MessageFormat . format ( LaunchConfigurationsMessages . LaunchConfigurationDialog_The_configuration___29 , new Object [ ] { fTabViewer . getWorkingCopy ( ) . getName ( ) } ) ; MessageDialog dialog = new MessageDialog ( getShell ( ) , LaunchConfigurationsMessages . LaunchConfigurationFilteredTree_save_changes , null , message , MessageDialog . QUESTION , new String [ ] { LaunchConfigurationsMessages . LaunchConfigurationDialog_Yes_32 , LaunchConfigurationsMessages . LaunchConfigurationDialog_No_33 , LaunchConfigurationsMessages . LaunchConfigurationsDialog_c_ancel } , <int> ) ; int ret = dialog . open ( ) ; int val = IDialogConstants . CANCEL_ID ; if ( ret = = <int> | | ret = = <int> ) { if ( ret = = <int> ) { val = IDialogConstants . YES_ID ; } else { val = IDialogConstants . NO_ID ; } } return val ; } private int showUnsavedChangesDialog ( ) { if ( fTabViewer . canSave ( ) ) { return showSaveChangesDialog ( ) ; } return showDiscardChangesDialog ( ) ; } @Override public void updateButtons ( ) { if ( ! fSettingInput ) { getNewAction ( ) . setEnabled ( getNewAction ( ) . isEnabled ( ) ) ; getDeleteAction ( ) . setEnabled ( getDeleteAction ( ) . isEnabled ( ) ) ; getDuplicateAction ( ) . setEnabled ( getDuplicateAction ( ) . isEnabled ( ) ) ; fTabViewer . refresh ( ) ; getButton ( ID_LAUNCH_BUTTON ) . setEnabled ( fTabViewer . canLaunch ( ) & fTabViewer . canLaunchWithModes ( ) & ! fTabViewer . hasDuplicateDelegates ( ) ) ; } else { fTabViewer . refresh ( ) ; } } @Override public void updateMessage ( ) { if ( ! fSettingInput ) { setErrorMessage ( fTabViewer . getErrorMesssage ( ) ) ; if ( fTabViewer . getWarningMessage ( ) ! = null ) { setMessage ( fTabViewer . getWarningMessage ( ) , IMessageProvider . WARNING ) ; } else { setMessage ( fTabViewer . getMessage ( ) ) ; } } } public boolean isTreeSelectionEmpty ( ) { return fLaunchConfigurationView . getTreeViewer ( ) . getSelection ( ) . isEmpty ( ) ; } @Override public void propertyChange ( final PropertyChangeEvent event ) { WorkbenchJob job = new WorkbenchJob ( IInternalDebugCoreConstants . EMPTY_STRING ) { @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { TreeViewer viewer = fLaunchConfigurationView . getTreeViewer ( ) ; boolean newvalue = Boolean . valueOf ( event . getNewValue ( ) . toString ( ) ) . booleanValue ( ) ; if ( event . getProperty ( ) . equals ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_CLOSED ) ) { updateFilter ( newvalue , fClosedProjectFilter ) ; } else if ( event . getProperty ( ) . equals ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_DELETED ) ) { updateFilter ( newvalue , fDeletedProjectFilter ) ; } else if ( event . getProperty ( ) . equals ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_TYPES ) ) { updateFilter ( newvalue , fLCTFilter ) ; } else if ( event . getProperty ( ) . equals ( IInternalDebugUIConstants . PREF_FILTER_WORKING_SETS ) ) { updateFilter ( newvalue , fWorkingSetsFilter ) ; } else if ( event . getProperty ( ) . equals ( IInternalDebugUIConstants . PREF_FILTER_TYPE_LIST ) ) { if ( DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_TYPES ) ) { viewer . refresh ( ) ; fLaunchConfigurationView . updateFilterLabel ( ) ; } } return Status . OK_STATUS ; } } ; job . runInUIThread ( new NullProgressMonitor ( ) ) ; } private void updateFilter ( boolean state , ViewerFilter filter ) { TreeViewer viewer = ( TreeViewer ) fLaunchConfigurationView . getViewer ( ) ; if ( state ) { viewer . addFilter ( filter ) ; } else { viewer . removeFilter ( filter ) ; } fLaunchConfigurationView . updateFilterLabel ( ) ; } } 

package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . FixtureDef ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; import com . badlogic . gdx . physics . box2d . joints . RevoluteJointDef ; public class Chain extends Box2DTest { @Override protected void createWorld ( World world ) { Body ground ; { BodyDef bd = new BodyDef ( ) ; ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( <int> , <int> ) ) ; ground . createFixture ( shape , <float> ) ; shape . dispose ( ) ; } { PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <float> , <float> ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; fd . friction = <float> ; RevoluteJointDef jd = new RevoluteJointDef ( ) ; jd . collideConnected = false ; float y = <float> ; Body prevBody = ground ; for ( int i = <int> ; i < <int> ; i + + ) { BodyDef bd = new BodyDef ( ) ; bd . type = BodyType . DynamicBody ; bd . position . set ( <float> + i , y ) ; Body body = world . createBody ( bd ) ; body . createFixture ( fd ) ; Vector2 anchor = new Vector2 ( i , y ) ; jd . initialize ( prevBody , body , anchor ) ; world . createJoint ( jd ) ; prevBody = body ; } shape . dispose ( ) ; } } }
package com . badlogic . gdx . utils ; import java . io . ByteArrayOutputStream ; import java . io . DataOutputStream ; import java . io . IOException ; import java . io . OutputStream ; public class DataOutput extends DataOutputStream { public DataOutput ( OutputStream out ) { super ( out ) ; } public int writeInt ( int value , boolean optimizePositive ) throws IOException { if ( ! optimizePositive ) value = ( value < < <int> ) ^ ( value > > <int> ) ; if ( value > > > <int> = = <int> ) { write ( ( byte ) value ) ; return <int> ; } write ( ( byte ) ( ( value & <hex> ) | <hex> ) ) ; if ( value > > > <int> = = <int> ) { write ( ( byte ) ( value > > > <int> ) ) ; return <int> ; } write ( ( byte ) ( value > > > <int> | <hex> ) ) ; if ( value > > > <int> = = <int> ) { write ( ( byte ) ( value > > > <int> ) ) ; return <int> ; } write ( ( byte ) ( value > > > <int> | <hex> ) ) ; if ( value > > > <int> = = <int> ) { write ( ( byte ) ( value > > > <int> ) ) ; return <int> ; } write ( ( byte ) ( value > > > <int> | <hex> ) ) ; write ( ( byte ) ( value > > > <int> ) ) ; return <int> ; } public void writeString ( String value ) throws IOException { if ( value = = null ) { write ( <int> ) ; return ; } int charCount = value . length ( ) ; if ( charCount = = <int> ) { writeByte ( <int> ) ; return ; } writeInt ( charCount + <int> , true ) ; int charIndex = <int> ; for ( ; charIndex < charCount ; charIndex + + ) { int c = value . charAt ( charIndex ) ; if ( c > <int> ) break ; write ( ( byte ) c ) ; } if ( charIndex < charCount ) writeString_slow ( value , charCount , charIndex ) ; } private void writeString_slow ( String value , int charCount , int charIndex ) throws IOException { for ( ; charIndex < charCount ; charIndex + + ) { int c = value . charAt ( charIndex ) ; if ( c < = <hex> ) { write ( ( byte ) c ) ; } else if ( c > <hex> ) { write ( ( byte ) ( <hex> | c > > <int> & <hex> ) ) ; write ( ( byte ) ( <hex> | c > > <int> & <hex> ) ) ; write ( ( byte ) ( <hex> | c & <hex> ) ) ; } else { write ( ( byte ) ( <hex> | c > > <int> & <hex> ) ) ; write ( ( byte ) ( <hex> | c & <hex> ) ) ; } } } }
package org . gradle . launcher . daemon . server . exec ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . initialization . * ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . launcher . daemon . logging . DaemonMessages ; import org . gradle . launcher . daemon . protocol . Build ; import org . gradle . launcher . daemon . server . api . DaemonCommandExecution ; import org . gradle . launcher . exec . BuildActionExecuter ; import org . gradle . launcher . exec . BuildActionParameters ; import org . gradle . initialization . ReportedException ; public class ExecuteBuild extends BuildCommandOnly { private static final Logger LOGGER = Logging . getLogger ( ExecuteBuild . class ) ; final private BuildActionExecuter < BuildActionParameters > actionExecuter ; final private ServiceRegistry contextServices ; public ExecuteBuild ( BuildActionExecuter < BuildActionParameters > actionExecuter , ServiceRegistry contextServices ) { this . actionExecuter = actionExecuter ; this . contextServices = contextServices ; } protected void doBuild ( final DaemonCommandExecution execution , Build build ) { LOGGER . debug ( DaemonMessages . STARTED_BUILD ) ; LOGGER . info ( <str> , execution . getDaemonContext ( ) ) ; try { BuildCancellationToken cancellationToken = execution . getDaemonStateControl ( ) . getCancellationToken ( ) ; BuildRequestContext buildRequestContext = new DefaultBuildRequestContext ( build . getBuildRequestMetaData ( ) , cancellationToken , new DaemonConnectionBackedEventConsumer ( execution ) ) ; Object result = actionExecuter . execute ( build . getAction ( ) , buildRequestContext , build . getParameters ( ) , contextServices ) ; execution . setResult ( result ) ; } catch ( ReportedException e ) { execution . setException ( e ) ; } finally { LOGGER . debug ( DaemonMessages . FINISHED_BUILD ) ; } execution . proceed ( ) ; } private static class DaemonConnectionBackedEventConsumer implements BuildEventConsumer { private final DaemonCommandExecution execution ; public DaemonConnectionBackedEventConsumer ( DaemonCommandExecution execution ) { this . execution = execution ; } @Override public void dispatch ( Object event ) { execution . getConnection ( ) . event ( event ) ; } } } 

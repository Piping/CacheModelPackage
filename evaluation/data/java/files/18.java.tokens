package rx ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import java . util . List ; import org . junit . Test ; import rx . CovarianceTest . HorrorMovie ; import rx . CovarianceTest . Media ; import rx . CovarianceTest . Movie ; import rx . Observable . OnSubscribe ; public class MergeTests { @Test public void testCovarianceOfMerge ( ) { Observable < HorrorMovie > horrors = Observable . just ( new HorrorMovie ( ) ) ; Observable < Observable < HorrorMovie > > metaHorrors = Observable . just ( horrors ) ; Observable . < Media > merge ( metaHorrors ) ; } @Test public void testMergeCovariance ( ) { Observable < Media > o1 = Observable . < Media > just ( new HorrorMovie ( ) , new Movie ( ) ) ; Observable < Media > o2 = Observable . just ( new Media ( ) , new HorrorMovie ( ) ) ; Observable < Observable < Media > > os = Observable . just ( o1 , o2 ) ; List < Media > values = Observable . merge ( os ) . toList ( ) . toBlocking ( ) . single ( ) ; assertEquals ( <int> , values . size ( ) ) ; } @Test public void testMergeCovariance2 ( ) { Observable < Media > o1 = Observable . just ( new HorrorMovie ( ) , new Movie ( ) , new Media ( ) ) ; Observable < Media > o2 = Observable . just ( new Media ( ) , new HorrorMovie ( ) ) ; Observable < Observable < Media > > os = Observable . just ( o1 , o2 ) ; List < Media > values = Observable . merge ( os ) . toList ( ) . toBlocking ( ) . single ( ) ; assertEquals ( <int> , values . size ( ) ) ; } @Test public void testMergeCovariance3 ( ) { Observable < Movie > o1 = Observable . just ( new HorrorMovie ( ) , new Movie ( ) ) ; Observable < Media > o2 = Observable . just ( new Media ( ) , new HorrorMovie ( ) ) ; List < Media > values = Observable . merge ( o1 , o2 ) . toList ( ) . toBlocking ( ) . single ( ) ; assertTrue ( values . get ( <int> ) instanceof HorrorMovie ) ; assertTrue ( values . get ( <int> ) instanceof Movie ) ; assertTrue ( values . get ( <int> ) instanceof Media ) ; assertTrue ( values . get ( <int> ) instanceof HorrorMovie ) ; } @Test public void testMergeCovariance4 ( ) { Observable < Movie > o1 = Observable . create ( new OnSubscribe < Movie > ( ) { @Override public void call ( Subscriber < ? super Movie > o ) { o . onNext ( new HorrorMovie ( ) ) ; o . onNext ( new Movie ( ) ) ; o . onCompleted ( ) ; } } ) ; Observable < Media > o2 = Observable . just ( new Media ( ) , new HorrorMovie ( ) ) ; List < Media > values = Observable . merge ( o1 , o2 ) . toList ( ) . toBlocking ( ) . single ( ) ; assertTrue ( values . get ( <int> ) instanceof HorrorMovie ) ; assertTrue ( values . get ( <int> ) instanceof Movie ) ; assertTrue ( values . get ( <int> ) instanceof Media ) ; assertTrue ( values . get ( <int> ) instanceof HorrorMovie ) ; } } 

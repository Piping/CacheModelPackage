package org . eclipse . debug . internal . ui . views . console ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchListener ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . model . IProcess ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . console . ConsoleColorProvider ; import org . eclipse . debug . ui . console . IConsoleColorProvider ; import org . eclipse . debug . ui . console . IConsoleLineTracker ; import org . eclipse . jface . text . IDocument ; import org . eclipse . ui . console . ConsolePlugin ; import org . eclipse . ui . console . IConsole ; import org . eclipse . ui . console . IConsoleManager ; import com . ibm . icu . text . MessageFormat ; public class ProcessConsoleManager implements ILaunchListener { private Map < String , IConfigurationElement > fColorProviders ; private IConsoleColorProvider fDefaultColorProvider ; private Map < String , List < IConfigurationElement > > fLineTrackers ; private Map < ILaunch , IProcess [ ] > fProcesses ; private Object fLineTrackersLock = new Object ( ) ; @Override public void launchRemoved ( ILaunch launch ) { removeLaunch ( launch ) ; } protected void removeLaunch ( ILaunch launch ) { IProcess [ ] processes = launch . getProcesses ( ) ; for ( int i = <int> ; i < processes . length ; i + + ) { IProcess iProcess = processes [ i ] ; removeProcess ( iProcess ) ; } if ( fProcesses ! = null ) { fProcesses . remove ( launch ) ; } } private void removeProcess ( IProcess iProcess ) { IConsole console = getConsole ( iProcess ) ; if ( console ! = null ) { IConsoleManager manager = ConsolePlugin . getDefault ( ) . getConsoleManager ( ) ; manager . removeConsoles ( new IConsole [ ] { console } ) ; } } public IConsole getConsole ( IProcess process ) { IConsoleManager manager = ConsolePlugin . getDefault ( ) . getConsoleManager ( ) ; IConsole [ ] consoles = manager . getConsoles ( ) ; for ( int i = <int> ; i < consoles . length ; i + + ) { IConsole console = consoles [ i ] ; if ( console instanceof ProcessConsole ) { ProcessConsole pc = ( ProcessConsole ) console ; if ( pc . getProcess ( ) . equals ( process ) ) { return pc ; } } } return null ; } @Override public void launchAdded ( ILaunch launch ) { launchChanged ( launch ) ; } @Override public void launchChanged ( final ILaunch launch ) { IProcess [ ] processes = launch . getProcesses ( ) ; for ( int i = <int> ; i < processes . length ; i + + ) { if ( getConsoleDocument ( processes [ i ] ) = = null ) { IProcess process = processes [ i ] ; if ( process . getStreamsProxy ( ) = = null ) { continue ; } IConsoleColorProvider colorProvider = getColorProvider ( process . getAttribute ( IProcess . ATTR_PROCESS_TYPE ) ) ; String encoding = launch . getAttribute ( DebugPlugin . ATTR_CONSOLE_ENCODING ) ; ProcessConsole pc = new ProcessConsole ( process , colorProvider , encoding ) ; pc . setAttribute ( IDebugUIConstants . ATTR_CONSOLE_PROCESS , process ) ; ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . addConsoles ( new IConsole [ ] { pc } ) ; } } List < IProcess > removed = getRemovedProcesses ( launch ) ; if ( removed ! = null ) { for ( IProcess p : removed ) { removeProcess ( p ) ; } } } public IDocument getConsoleDocument ( IProcess process ) { ProcessConsole console = ( ProcessConsole ) getConsole ( process ) ; return ( console ! = null ? console . getDocument ( ) : null ) ; } public void startup ( ) { ILaunchManager launchManager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; launchManager . addLaunchListener ( this ) ; ILaunch [ ] launches = launchManager . getLaunches ( ) ; for ( int i = <int> ; i < launches . length ; i + + ) { launchAdded ( launches [ i ] ) ; } } public void shutdown ( ) { ILaunchManager launchManager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; ILaunch [ ] launches = launchManager . getLaunches ( ) ; for ( int i = <int> ; i < launches . length ; i + + ) { ILaunch launch = launches [ i ] ; removeLaunch ( launch ) ; } launchManager . removeLaunchListener ( this ) ; if ( fProcesses ! = null ) { fProcesses . clear ( ) ; } } public IConsoleColorProvider getColorProvider ( String type ) { if ( fColorProviders = = null ) { fColorProviders = new HashMap < String , IConfigurationElement > ( ) ; IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . EXTENSION_POINT_CONSOLE_COLOR_PROVIDERS ) ; IConfigurationElement [ ] elements = extensionPoint . getConfigurationElements ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { IConfigurationElement extension = elements [ i ] ; fColorProviders . put ( extension . getAttribute ( <str> ) , extension ) ; } } IConfigurationElement extension = fColorProviders . get ( type ) ; if ( extension ! = null ) { try { Object colorProvider = extension . createExecutableExtension ( <str> ) ; if ( colorProvider instanceof IConsoleColorProvider ) { return ( IConsoleColorProvider ) colorProvider ; } DebugUIPlugin . logErrorMessage ( MessageFormat . format ( <str> , new Object [ ] { extension . getDeclaringExtension ( ) . getUniqueIdentifier ( ) } ) ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } if ( fDefaultColorProvider = = null ) { fDefaultColorProvider = new ConsoleColorProvider ( ) ; } return fDefaultColorProvider ; } public IConsoleLineTracker [ ] getLineTrackers ( IProcess process ) { String type = process . getAttribute ( IProcess . ATTR_PROCESS_TYPE ) ; if ( fLineTrackers = = null ) { synchronized ( fLineTrackersLock ) { fLineTrackers = new HashMap < String , List < IConfigurationElement > > ( ) ; IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . EXTENSION_POINT_CONSOLE_LINE_TRACKERS ) ; IConfigurationElement [ ] elements = extensionPoint . getConfigurationElements ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { IConfigurationElement extension = elements [ i ] ; String processType = extension . getAttribute ( <str> ) ; List < IConfigurationElement > list = fLineTrackers . get ( processType ) ; if ( list = = null ) { list = new ArrayList < IConfigurationElement > ( ) ; fLineTrackers . put ( processType , list ) ; } list . add ( extension ) ; } } } ArrayList < IConsoleLineTracker > trackers = new ArrayList < IConsoleLineTracker > ( ) ; if ( type ! = null ) { List < IConfigurationElement > lineTrackerExtensions ; synchronized ( fLineTrackers ) { lineTrackerExtensions = fLineTrackers . get ( type ) ; } if ( lineTrackerExtensions ! = null ) { for ( IConfigurationElement element : lineTrackerExtensions ) { try { trackers . add ( ( IConsoleLineTracker ) element . createExecutableExtension ( <str> ) ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } } } return trackers . toArray ( new IConsoleLineTracker [ <int> ] ) ; } private List < IProcess > getRemovedProcesses ( ILaunch launch ) { List < IProcess > removed = null ; if ( fProcesses = = null ) { fProcesses = new HashMap < ILaunch , IProcess [ ] > ( ) ; } IProcess [ ] old = fProcesses . get ( launch ) ; IProcess [ ] curr = launch . getProcesses ( ) ; if ( old ! = null ) { for ( int i = <int> ; i < old . length ; i + + ) { IProcess process = old [ i ] ; if ( ! contains ( curr , process ) ) { if ( removed = = null ) { removed = new ArrayList < IProcess > ( ) ; } removed . add ( process ) ; } } } fProcesses . put ( launch , curr ) ; return removed ; } private boolean contains ( Object [ ] list , Object object ) { for ( int i = <int> ; i < list . length ; i + + ) { Object object2 = list [ i ] ; if ( object2 . equals ( object ) ) { return true ; } } return false ; } } 

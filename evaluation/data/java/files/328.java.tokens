package com . netflix . hystrix . contrib . requests . stream ; import com . netflix . hystrix . ExecutionResult ; import com . netflix . hystrix . HystrixCollapserKey ; import com . netflix . hystrix . HystrixCommandGroupKey ; import com . netflix . hystrix . HystrixCommandKey ; import com . netflix . hystrix . HystrixCommandMetrics ; import com . netflix . hystrix . HystrixCommandProperties ; import com . netflix . hystrix . HystrixEventType ; import com . netflix . hystrix . HystrixInvokableInfo ; import com . netflix . hystrix . HystrixThreadPoolKey ; import com . netflix . hystrix . metric . HystrixRequestEvents ; import org . junit . Test ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class HystrixRequestEventsJsonStreamTest { private static final HystrixCommandGroupKey groupKey = HystrixCommandGroupKey . Factory . asKey ( <str> ) ; private static final HystrixThreadPoolKey threadPoolKey = HystrixThreadPoolKey . Factory . asKey ( <str> ) ; private static final HystrixCommandKey fooKey = HystrixCommandKey . Factory . asKey ( <str> ) ; private static final HystrixCommandKey barKey = HystrixCommandKey . Factory . asKey ( <str> ) ; private static final HystrixCollapserKey collapserKey = HystrixCollapserKey . Factory . asKey ( <str> ) ; @Test public void testEmpty ( ) throws IOException { HystrixRequestEvents request = new HystrixRequestEvents ( new ArrayList < HystrixInvokableInfo < ? > > ( ) ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleSuccess ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleFailureFallbackMissing ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . FAILURE , HystrixEventType . FALLBACK_MISSING ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleFailureFallbackSuccess ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . FAILURE , HystrixEventType . FALLBACK_SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleFailureFallbackRejected ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . FAILURE , HystrixEventType . FALLBACK_REJECTION ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleFailureFallbackFailure ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . FAILURE , HystrixEventType . FALLBACK_FAILURE ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleTimeoutFallbackSuccess ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . TIMEOUT , HystrixEventType . FALLBACK_SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleSemaphoreRejectedFallbackSuccess ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . SEMAPHORE_REJECTED , HystrixEventType . FALLBACK_SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleThreadPoolRejectedFallbackSuccess ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . THREAD_POOL_REJECTED , HystrixEventType . FALLBACK_SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleShortCircuitedFallbackSuccess ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . SHORT_CIRCUITED , HystrixEventType . FALLBACK_SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleBadRequest ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . BAD_REQUEST ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testTwoSuccessesSameKey ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; HystrixInvokableInfo < Integer > foo1 = new SimpleExecution ( fooKey , <int> , HystrixEventType . SUCCESS ) ; HystrixInvokableInfo < Integer > foo2 = new SimpleExecution ( fooKey , <int> , HystrixEventType . SUCCESS ) ; executions . add ( foo1 ) ; executions . add ( foo2 ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testTwoSuccessesDifferentKey ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; HystrixInvokableInfo < Integer > foo1 = new SimpleExecution ( fooKey , <int> , HystrixEventType . SUCCESS ) ; HystrixInvokableInfo < Integer > bar1 = new SimpleExecution ( barKey , <int> , HystrixEventType . SUCCESS ) ; executions . add ( foo1 ) ; executions . add ( bar1 ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertTrue ( actual . equals ( <str> ) | | actual . equals ( <str> ) ) ; } @Test public void testTwoFailuresSameKey ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; HystrixInvokableInfo < Integer > foo1 = new SimpleExecution ( fooKey , <int> , HystrixEventType . FAILURE , HystrixEventType . FALLBACK_SUCCESS ) ; HystrixInvokableInfo < Integer > foo2 = new SimpleExecution ( fooKey , <int> , HystrixEventType . FAILURE , HystrixEventType . FALLBACK_SUCCESS ) ; executions . add ( foo1 ) ; executions . add ( foo2 ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testTwoSuccessesOneFailureSameKey ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; HystrixInvokableInfo < Integer > foo1 = new SimpleExecution ( fooKey , <int> , HystrixEventType . SUCCESS ) ; HystrixInvokableInfo < Integer > foo2 = new SimpleExecution ( fooKey , <int> , HystrixEventType . FAILURE , HystrixEventType . FALLBACK_SUCCESS ) ; HystrixInvokableInfo < Integer > foo3 = new SimpleExecution ( fooKey , <int> , HystrixEventType . SUCCESS ) ; executions . add ( foo1 ) ; executions . add ( foo2 ) ; executions . add ( foo3 ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertTrue ( actual . equals ( <str> ) | | actual . equals ( <str> ) ) ; } @Test public void testSingleResponseFromCache ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; HystrixInvokableInfo < Integer > foo1 = new SimpleExecution ( fooKey , <int> , <str> , HystrixEventType . SUCCESS ) ; HystrixInvokableInfo < Integer > cachedFoo1 = new SimpleExecution ( fooKey , <str> ) ; executions . add ( foo1 ) ; executions . add ( cachedFoo1 ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testMultipleResponsesFromCache ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; HystrixInvokableInfo < Integer > foo1 = new SimpleExecution ( fooKey , <int> , <str> , HystrixEventType . SUCCESS ) ; HystrixInvokableInfo < Integer > cachedFoo1 = new SimpleExecution ( fooKey , <str> ) ; HystrixInvokableInfo < Integer > anotherCachedFoo1 = new SimpleExecution ( fooKey , <str> ) ; executions . add ( foo1 ) ; executions . add ( cachedFoo1 ) ; executions . add ( anotherCachedFoo1 ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testMultipleCacheKeys ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; HystrixInvokableInfo < Integer > foo1 = new SimpleExecution ( fooKey , <int> , <str> , HystrixEventType . SUCCESS ) ; HystrixInvokableInfo < Integer > cachedFoo1 = new SimpleExecution ( fooKey , <str> ) ; HystrixInvokableInfo < Integer > foo2 = new SimpleExecution ( fooKey , <int> , <str> , HystrixEventType . SUCCESS ) ; HystrixInvokableInfo < Integer > cachedFoo2 = new SimpleExecution ( fooKey , <str> ) ; executions . add ( foo1 ) ; executions . add ( cachedFoo1 ) ; executions . add ( foo2 ) ; executions . add ( cachedFoo2 ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertTrue ( actual . equals ( <str> ) | | actual . equals ( <str> ) ) ; } @Test public void testSingleSuccessMultipleEmits ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . EMIT , HystrixEventType . EMIT , HystrixEventType . EMIT , HystrixEventType . SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testSingleSuccessMultipleEmitsAndFallbackEmits ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , HystrixEventType . EMIT , HystrixEventType . EMIT , HystrixEventType . EMIT , HystrixEventType . FAILURE , HystrixEventType . FALLBACK_EMIT , HystrixEventType . FALLBACK_EMIT , HystrixEventType . FALLBACK_SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testCollapsedBatchOfOne ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , collapserKey , <int> , HystrixEventType . SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } @Test public void testCollapsedBatchOfSix ( ) throws IOException { List < HystrixInvokableInfo < ? > > executions = new ArrayList < HystrixInvokableInfo < ? > > ( ) ; executions . add ( new SimpleExecution ( fooKey , <int> , collapserKey , <int> , HystrixEventType . SUCCESS ) ) ; HystrixRequestEvents request = new HystrixRequestEvents ( executions ) ; String actual = HystrixRequestEventsJsonStream . convertRequestToJson ( request ) ; assertEquals ( <str> , actual ) ; } private class SimpleExecution implements HystrixInvokableInfo < Integer > { private final HystrixCommandKey commandKey ; private final ExecutionResult executionResult ; private final String cacheKey ; private final HystrixCollapserKey collapserKey ; public SimpleExecution ( HystrixCommandKey commandKey , int latency , HystrixEventType . . . events ) { this . commandKey = commandKey ; this . executionResult = ExecutionResult . from ( events ) . setExecutionLatency ( latency ) ; this . cacheKey = null ; this . collapserKey = null ; } public SimpleExecution ( HystrixCommandKey commandKey , int latency , String cacheKey , HystrixEventType . . . events ) { this . commandKey = commandKey ; this . executionResult = ExecutionResult . from ( events ) . setExecutionLatency ( latency ) ; this . cacheKey = cacheKey ; this . collapserKey = null ; } public SimpleExecution ( HystrixCommandKey commandKey , String cacheKey ) { this . commandKey = commandKey ; this . executionResult = ExecutionResult . from ( HystrixEventType . RESPONSE_FROM_CACHE ) ; this . cacheKey = cacheKey ; this . collapserKey = null ; } public SimpleExecution ( HystrixCommandKey commandKey , int latency , HystrixCollapserKey collapserKey , int batchSize , HystrixEventType . . . events ) { this . commandKey = commandKey ; ExecutionResult interimResult = ExecutionResult . from ( events ) . setExecutionLatency ( latency ) ; for ( int i = <int> ; i < batchSize ; i + + ) { interimResult = interimResult . addEvent ( HystrixEventType . COLLAPSED ) ; } this . executionResult = interimResult ; this . cacheKey = null ; this . collapserKey = collapserKey ; } @Override public HystrixCommandGroupKey getCommandGroup ( ) { return groupKey ; } @Override public HystrixCommandKey getCommandKey ( ) { return commandKey ; } @Override public HystrixThreadPoolKey getThreadPoolKey ( ) { return threadPoolKey ; } @Override public String getPublicCacheKey ( ) { return cacheKey ; } @Override public HystrixCollapserKey getOriginatingCollapserKey ( ) { return collapserKey ; } @Override public HystrixCommandMetrics getMetrics ( ) { return null ; } @Override public HystrixCommandProperties getProperties ( ) { return null ; } @Override public boolean isCircuitBreakerOpen ( ) { return false ; } @Override public boolean isExecutionComplete ( ) { return true ; } @Override public boolean isExecutedInThread ( ) { return false ; } @Override public boolean isSuccessfulExecution ( ) { return executionResult . getEventCounts ( ) . contains ( HystrixEventType . SUCCESS ) ; } @Override public boolean isFailedExecution ( ) { return executionResult . getEventCounts ( ) . contains ( HystrixEventType . FAILURE ) ; } @Override public Throwable getFailedExecutionException ( ) { return null ; } @Override public boolean isResponseFromFallback ( ) { return executionResult . getEventCounts ( ) . contains ( HystrixEventType . FALLBACK_SUCCESS ) ; } @Override public boolean isResponseTimedOut ( ) { return executionResult . getEventCounts ( ) . contains ( HystrixEventType . TIMEOUT ) ; } @Override public boolean isResponseShortCircuited ( ) { return executionResult . getEventCounts ( ) . contains ( HystrixEventType . SHORT_CIRCUITED ) ; } @Override public boolean isResponseFromCache ( ) { return executionResult . getEventCounts ( ) . contains ( HystrixEventType . RESPONSE_FROM_CACHE ) ; } @Override public boolean isResponseRejected ( ) { return executionResult . isResponseRejected ( ) ; } @Override public boolean isResponseSemaphoreRejected ( ) { return executionResult . getEventCounts ( ) . contains ( HystrixEventType . SEMAPHORE_REJECTED ) ; } @Override public boolean isResponseThreadPoolRejected ( ) { return executionResult . getEventCounts ( ) . contains ( HystrixEventType . THREAD_POOL_REJECTED ) ; } @Override public List < HystrixEventType > getExecutionEvents ( ) { return executionResult . getOrderedList ( ) ; } @Override public int getNumberEmissions ( ) { return executionResult . getEventCounts ( ) . getCount ( HystrixEventType . EMIT ) ; } @Override public int getNumberFallbackEmissions ( ) { return executionResult . getEventCounts ( ) . getCount ( HystrixEventType . FALLBACK_EMIT ) ; } @Override public int getNumberCollapsed ( ) { return executionResult . getEventCounts ( ) . getCount ( HystrixEventType . COLLAPSED ) ; } @Override public int getExecutionTimeInMilliseconds ( ) { return executionResult . getExecutionLatency ( ) ; } @Override public long getCommandRunStartTimeInNanos ( ) { return System . currentTimeMillis ( ) ; } @Override public ExecutionResult . EventCounts getEventCounts ( ) { return executionResult . getEventCounts ( ) ; } @Override public String toString ( ) { return <str> + <str> + commandKey . name ( ) + <str> + executionResult + <str> + cacheKey + <str> + <str> + collapserKey + <str> ; } } }
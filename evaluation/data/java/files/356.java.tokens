package com . netflix . hystrix . contrib . yammermetricspublisher ; import com . netflix . hystrix . HystrixThreadPoolKey ; import com . netflix . hystrix . HystrixThreadPoolMetrics ; import com . netflix . hystrix . HystrixThreadPoolProperties ; import com . netflix . hystrix . strategy . metrics . HystrixMetricsPublisherThreadPool ; import com . netflix . hystrix . util . HystrixRollingNumberEvent ; import com . yammer . metrics . core . Gauge ; import com . yammer . metrics . core . MetricName ; import com . yammer . metrics . core . MetricsRegistry ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class HystrixYammerMetricsPublisherThreadPool implements HystrixMetricsPublisherThreadPool { private final HystrixThreadPoolKey key ; private final HystrixThreadPoolMetrics metrics ; private final HystrixThreadPoolProperties properties ; private final MetricsRegistry metricsRegistry ; private final String metricGroup ; private final String metricType ; static final Logger logger = LoggerFactory . getLogger ( HystrixYammerMetricsPublisherThreadPool . class ) ; public HystrixYammerMetricsPublisherThreadPool ( HystrixThreadPoolKey threadPoolKey , HystrixThreadPoolMetrics metrics , HystrixThreadPoolProperties properties , MetricsRegistry metricsRegistry ) { this . key = threadPoolKey ; this . metrics = metrics ; this . properties = properties ; this . metricsRegistry = metricsRegistry ; this . metricGroup = <str> ; this . metricType = key . name ( ) ; } @Override public void initialize ( ) { metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < String > ( ) { @Override public String value ( ) { return key . name ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Long > ( ) { @Override public Long value ( ) { return System . currentTimeMillis ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return metrics . getCurrentActiveCount ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return metrics . getCurrentCompletedTaskCount ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return metrics . getCurrentLargestPoolSize ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return metrics . getCurrentTaskCount ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return metrics . getCurrentQueueSize ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return metrics . getRollingMaxActiveThreads ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return metrics . getCumulativeCountThreadsExecuted ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { try { return metrics . getRollingCount ( HystrixRollingNumberEvent . THREAD_POOL_REJECTED ) ; } catch ( NoSuchFieldError error ) { logger . error ( <str> ) ; return <int> ; } } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return metrics . getRollingCountThreadsExecuted ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return properties . coreSize ( ) . get ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return properties . keepAliveTimeMinutes ( ) . get ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return properties . queueSizeRejectionThreshold ( ) . get ( ) ; } } ) ; metricsRegistry . newGauge ( createMetricName ( <str> ) , new Gauge < Number > ( ) { @Override public Number value ( ) { return properties . maxQueueSize ( ) . get ( ) ; } } ) ; } protected MetricName createMetricName ( String name ) { return new MetricName ( metricGroup , metricType , name ) ; } }
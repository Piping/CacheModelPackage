package org . eclipse . debug . internal . ui . viewers . update ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Iterator ; import java . util . List ; import java . util . Set ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . ILaunchesListener2 ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ModelDelta ; import org . eclipse . debug . internal . ui . viewers . provisional . AbstractModelProxy ; import org . eclipse . jface . viewers . Viewer ; public class LaunchProxy extends AbstractModelProxy implements ILaunchesListener2 { private ILaunch fLaunch ; private Set < Object > fPrevChildren = new HashSet < Object > ( ) ; public LaunchProxy ( ILaunch launch ) { fLaunch = launch ; } @Override public void init ( IPresentationContext context ) { super . init ( context ) ; DebugPlugin . getDefault ( ) . getLaunchManager ( ) . addLaunchListener ( this ) ; } @Override public void installed ( Viewer viewer ) { installModelProxies ( ) ; } @Override public void dispose ( ) { super . dispose ( ) ; DebugPlugin . getDefault ( ) . getLaunchManager ( ) . removeLaunchListener ( this ) ; fPrevChildren . clear ( ) ; fLaunch = null ; } @Override public void launchesTerminated ( ILaunch [ ] launches ) { for ( int i = <int> ; i < launches . length ; i + + ) { if ( launches [ i ] = = fLaunch ) { fireDelta ( IModelDelta . STATE | IModelDelta . CONTENT | IModelDelta . UNINSTALL ) ; break ; } } } @Override public void launchesRemoved ( ILaunch [ ] launches ) { for ( int i = <int> ; i < launches . length ; i + + ) { if ( launches [ i ] = = fLaunch ) { fireDelta ( IModelDelta . UNINSTALL ) ; break ; } } } @Override public void launchesAdded ( ILaunch [ ] launches ) { } @Override public void launchesChanged ( ILaunch [ ] launches ) { for ( int i = <int> ; i < launches . length ; i + + ) { if ( launches [ i ] = = fLaunch ) { fireDelta ( IModelDelta . STATE | IModelDelta . CONTENT ) ; installModelProxies ( ) ; break ; } } } protected void installModelProxies ( ) { boolean changes = false ; ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; ILaunch [ ] allLaunches = manager . getLaunches ( ) ; ModelDelta root = new ModelDelta ( manager , <int> , IModelDelta . NO_CHANGE , allLaunches . length ) ; synchronized ( this ) { Object [ ] children = fLaunch . getChildren ( ) ; ModelDelta launchDelta = root . addNode ( fLaunch , indexOf ( fLaunch , allLaunches ) , IModelDelta . EXPAND , children . length ) ; for ( int j = <int> ; j < children . length ; j + + ) { Object child = children [ j ] ; if ( fPrevChildren . add ( child ) ) { changes = true ; launchDelta . addNode ( child , indexOf ( child , children ) , IModelDelta . INSTALL , - <int> ) ; } } List < Object > childrenList = Arrays . asList ( children ) ; for ( Iterator < Object > itr = fPrevChildren . iterator ( ) ; itr . hasNext ( ) ; ) { Object child = itr . next ( ) ; if ( ! childrenList . contains ( child ) ) { itr . remove ( ) ; changes = true ; launchDelta . addNode ( child , IModelDelta . UNINSTALL ) ; } } } if ( changes ) { fireModelChanged ( root ) ; } } protected int indexOf ( Object element , Object [ ] list ) { for ( int i = <int> ; i < list . length ; i + + ) { if ( element = = list [ i ] ) { return i ; } } return - <int> ; } protected void fireDelta ( int flags ) { ModelDelta delta = new ModelDelta ( DebugPlugin . getDefault ( ) . getLaunchManager ( ) , IModelDelta . NO_CHANGE ) ; delta . addNode ( fLaunch , flags ) ; fireModelChanged ( delta ) ; } }
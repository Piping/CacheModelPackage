package com . netflix . hystrix . contrib . javanica . utils ; import com . google . common . base . Throwables ; import org . aspectj . lang . JoinPoint ; import org . aspectj . lang . reflect . MethodSignature ; import java . io . IOException ; import java . lang . reflect . Method ; public final class AopUtils { private AopUtils ( ) { throw new UnsupportedOperationException ( <str> ) ; } public static Method getMethodFromTarget ( JoinPoint joinPoint ) { Method method = null ; if ( joinPoint . getSignature ( ) instanceof MethodSignature ) { MethodSignature signature = ( MethodSignature ) joinPoint . getSignature ( ) ; method = getDeclaredMethod ( joinPoint . getTarget ( ) . getClass ( ) , signature . getName ( ) , getParameterTypes ( joinPoint ) ) ; } return method ; } public static Method getMethodFromTarget ( JoinPoint joinPoint , String methodName ) { return getDeclaredMethod ( joinPoint . getTarget ( ) . getClass ( ) , methodName , getParameterTypes ( joinPoint ) ) ; } public static Class [ ] getParameterTypes ( JoinPoint joinPoint ) { MethodSignature signature = ( MethodSignature ) joinPoint . getSignature ( ) ; Method method = signature . getMethod ( ) ; return method . getParameterTypes ( ) ; } public static Method getDeclaredMethod ( Class < ? > type , String methodName , Class < ? > . . . parameterTypes ) { Method method = null ; try { method = type . getDeclaredMethod ( methodName , parameterTypes ) ; if ( method . isBridge ( ) ) { method = MethodProvider . getInstance ( ) . unbride ( method , type ) ; } } catch ( NoSuchMethodException e ) { Class < ? > superclass = type . getSuperclass ( ) ; if ( superclass ! = null ) { method = getDeclaredMethod ( superclass , methodName , parameterTypes ) ; } } catch ( ClassNotFoundException e ) { Throwables . propagate ( e ) ; } catch ( IOException e ) { Throwables . propagate ( e ) ; } return method ; } }
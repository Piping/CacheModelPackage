package org . eclipse . debug . internal . ui ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtension ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IStackFrame ; import org . eclipse . debug . core . model . IThread ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugEditorPresentation ; import org . eclipse . debug . ui . IDebugModelPresentation ; import org . eclipse . debug . ui . IDebugModelPresentationExtension ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . IInstructionPointerPresentation ; import org . eclipse . debug . ui . IValueDetailListener ; import org . eclipse . jface . text . source . Annotation ; import org . eclipse . jface . viewers . IBaseLabelProvider ; import org . eclipse . jface . viewers . IColorProvider ; import org . eclipse . jface . viewers . IFontProvider ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . ILabelProviderListener ; import org . eclipse . swt . graphics . Color ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . Image ; import org . eclipse . ui . IEditorInput ; import org . eclipse . ui . IEditorPart ; public class DelegatingModelPresentation implements IDebugModelPresentation , IDebugEditorPresentation , IColorProvider , IFontProvider , IInstructionPointerPresentation , IDebugModelPresentationExtension { private HashMap < String , Object > fAttributes = new HashMap < String , Object > ( <int> ) ; private HashMap < String , IDebugModelPresentation > fLabelProviders = new HashMap < String , IDebugModelPresentation > ( <int> ) ; @Override public void removeAnnotations ( IEditorPart editorPart , IThread thread ) { IDebugModelPresentation presentation = getConfiguredPresentation ( thread ) ; if ( presentation instanceof IDebugEditorPresentation ) { ( ( IDebugEditorPresentation ) presentation ) . removeAnnotations ( editorPart , thread ) ; } } @Override public boolean addAnnotations ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getConfiguredPresentation ( frame ) ; if ( presentation instanceof IDebugEditorPresentation ) { return ( ( IDebugEditorPresentation ) presentation ) . addAnnotations ( editorPart , frame ) ; } return false ; } public DelegatingModelPresentation ( ) { IExtensionPoint point = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . ID_DEBUG_MODEL_PRESENTATION ) ; if ( point ! = null ) { IExtension [ ] extensions = point . getExtensions ( ) ; for ( int i = <int> ; i < extensions . length ; i + + ) { IExtension extension = extensions [ i ] ; IConfigurationElement [ ] configElements = extension . getConfigurationElements ( ) ; for ( int j = <int> ; j < configElements . length ; j + + ) { IConfigurationElement elt = configElements [ j ] ; String id = elt . getAttribute ( <str> ) ; if ( id ! = null ) { IDebugModelPresentation lp = new LazyModelPresentation ( this , elt ) ; getLabelProviders ( ) . put ( id , lp ) ; } } } } } @Override public void addListener ( ILabelProviderListener listener ) { for ( ILabelProvider p : fLabelProviders . values ( ) ) { p . addListener ( listener ) ; } } @Override public void dispose ( ) { for ( ILabelProvider p : fLabelProviders . values ( ) ) { p . dispose ( ) ; } } @Override public Image getImage ( Object item ) { IDebugModelPresentation lp = getConfiguredPresentation ( item ) ; if ( lp ! = null ) { Image image = lp . getImage ( item ) ; if ( image ! = null ) { return image ; } } return getDefaultImage ( item ) ; } @Override public String getText ( Object item ) { IDebugModelPresentation lp = getConfiguredPresentation ( item ) ; if ( lp ! = null ) { return lp . getText ( item ) ; } return getDefaultText ( item ) ; } @Override public IEditorInput getEditorInput ( Object item ) { IDebugModelPresentation lp = getConfiguredPresentation ( item ) ; if ( lp ! = null ) { return lp . getEditorInput ( item ) ; } return null ; } @Override public String getEditorId ( IEditorInput input , Object objectInput ) { IDebugModelPresentation lp = getConfiguredPresentation ( objectInput ) ; if ( lp ! = null ) { return lp . getEditorId ( input , objectInput ) ; } return null ; } protected String getDefaultText ( Object element ) { return DebugUIPlugin . getDefaultLabelProvider ( ) . getText ( element ) ; } protected Image getDefaultImage ( Object element ) { return DebugUIPlugin . getDefaultLabelProvider ( ) . getImage ( element ) ; } @Override public void computeDetail ( IValue value , IValueDetailListener listener ) { IDebugModelPresentation lp = getConfiguredPresentation ( value ) ; if ( lp ! = null ) { lp . computeDetail ( value , listener ) ; } else { listener . detailComputed ( value , getText ( value ) ) ; } } @Override public void removeListener ( ILabelProviderListener listener ) { for ( ILabelProvider p : fLabelProviders . values ( ) ) { p . removeListener ( listener ) ; } } @Override public boolean isLabelProperty ( Object element , String property ) { if ( element instanceof IDebugElement ) { IDebugModelPresentation lp = getConfiguredPresentation ( element ) ; if ( lp ! = null ) { return lp . isLabelProperty ( element , property ) ; } } return true ; } protected IDebugModelPresentation getConfiguredPresentation ( Object element ) { String id = null ; if ( element instanceof IDebugElement ) { IDebugElement de = ( IDebugElement ) element ; id = de . getModelIdentifier ( ) ; } else if ( element instanceof IMarker ) { IMarker m = ( IMarker ) element ; IBreakpoint bp = DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . getBreakpoint ( m ) ; if ( bp ! = null ) { id = bp . getModelIdentifier ( ) ; } } else if ( element instanceof IBreakpoint ) { id = ( ( IBreakpoint ) element ) . getModelIdentifier ( ) ; } if ( id ! = null ) { return getPresentation ( id ) ; } return null ; } public IDebugModelPresentation getPresentation ( String id ) { return getLabelProviders ( ) . get ( id ) ; } @Override public void setAttribute ( String id , Object value ) { if ( value = = null ) { return ; } basicSetAttribute ( id , value ) ; for ( IDebugModelPresentation p : fLabelProviders . values ( ) ) { p . setAttribute ( id , value ) ; } } protected void basicSetAttribute ( String id , Object value ) { fAttributes . put ( id , value ) ; } protected boolean showVariableTypeNames ( ) { Boolean show = ( Boolean ) fAttributes . get ( DISPLAY_VARIABLE_TYPE_NAMES ) ; show = show = = null ? Boolean . FALSE : show ; return show . booleanValue ( ) ; } public HashMap < String , Object > getAttributes ( ) { return fAttributes ; } public Map < String , Object > getAttributeMap ( ) { return new HashMap < String , Object > ( fAttributes ) ; } protected HashMap < String , IDebugModelPresentation > getLabelProviders ( ) { return fLabelProviders ; } @Override public Color getForeground ( Object element ) { IDebugModelPresentation presentation = getConfiguredPresentation ( element ) ; if ( presentation instanceof IColorProvider ) { IColorProvider colorProvider = ( IColorProvider ) presentation ; return colorProvider . getForeground ( element ) ; } return null ; } @Override public Color getBackground ( Object element ) { IDebugModelPresentation presentation = getConfiguredPresentation ( element ) ; if ( presentation instanceof IColorProvider ) { IColorProvider colorProvider = ( IColorProvider ) presentation ; return colorProvider . getBackground ( element ) ; } return null ; } @Override public Font getFont ( Object element ) { IDebugModelPresentation presentation = getConfiguredPresentation ( element ) ; if ( presentation instanceof IFontProvider ) { IFontProvider fontProvider = ( IFontProvider ) presentation ; return fontProvider . getFont ( element ) ; } return null ; } @Override public Annotation getInstructionPointerAnnotation ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getConfiguredPresentation ( frame ) ; Annotation annotation = null ; String id = null ; Image image = null ; String text = null ; if ( presentation instanceof IInstructionPointerPresentation ) { IInstructionPointerPresentation pointerPresentation = ( IInstructionPointerPresentation ) presentation ; annotation = pointerPresentation . getInstructionPointerAnnotation ( editorPart , frame ) ; if ( annotation = = null ) { id = pointerPresentation . getInstructionPointerAnnotationType ( editorPart , frame ) ; if ( id = = null ) { image = pointerPresentation . getInstructionPointerImage ( editorPart , frame ) ; } text = pointerPresentation . getInstructionPointerText ( editorPart , frame ) ; } } if ( annotation = = null ) { boolean defaultAnnotation = id = = null ; if ( id = = null | | text = = null | | ( defaultAnnotation & & image = = null ) ) { IThread thread = frame . getThread ( ) ; IStackFrame tos = null ; boolean top = false ; try { tos = thread . getTopStackFrame ( ) ; top = frame . equals ( tos ) ; } catch ( DebugException de ) { } if ( id = = null ) { if ( top ) { id = IDebugUIConstants . ANNOTATION_TYPE_INSTRUCTION_POINTER_CURRENT ; } else { id = IDebugUIConstants . ANNOTATION_TYPE_INSTRUCTION_POINTER_SECONDARY ; } } if ( text = = null ) { if ( top ) { text = DebugUIMessages . InstructionPointerAnnotation_0 ; } else { text = DebugUIMessages . InstructionPointerAnnotation_1 ; } } if ( defaultAnnotation & & image = = null ) { if ( top ) { image = DebugUITools . getImage ( IDebugUIConstants . IMG_OBJS_INSTRUCTION_POINTER_TOP ) ; } else { image = DebugUITools . getImage ( IDebugUIConstants . IMG_OBJS_INSTRUCTION_POINTER ) ; } } } if ( defaultAnnotation ) { annotation = new InstructionPointerAnnotation ( frame , id , text , image ) ; } else { annotation = new DynamicInstructionPointerAnnotation ( frame , id , text ) ; } } return annotation ; } @Override public String getInstructionPointerAnnotationType ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getConfiguredPresentation ( frame ) ; if ( presentation instanceof IInstructionPointerPresentation ) { return ( ( IInstructionPointerPresentation ) presentation ) . getInstructionPointerAnnotationType ( editorPart , frame ) ; } return null ; } @Override public Image getInstructionPointerImage ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getConfiguredPresentation ( frame ) ; if ( presentation instanceof IInstructionPointerPresentation ) { return ( ( IInstructionPointerPresentation ) presentation ) . getInstructionPointerImage ( editorPart , frame ) ; } return null ; } @Override public String getInstructionPointerText ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getConfiguredPresentation ( frame ) ; if ( presentation instanceof IInstructionPointerPresentation ) { return ( ( IInstructionPointerPresentation ) presentation ) . getInstructionPointerText ( editorPart , frame ) ; } return null ; } @Override public boolean requiresUIThread ( Object element ) { IDebugModelPresentation presentation = getConfiguredPresentation ( element ) ; if ( presentation = = null ) { return ! DebugPluginImages . isInitialized ( ) ; } if ( presentation instanceof IDebugModelPresentationExtension ) { return ( ( IDebugModelPresentationExtension ) presentation ) . requiresUIThread ( element ) ; } return false ; } }
package org . gradle . scala . internal . reflect ; import org . gradle . internal . UncheckedException ; import java . lang . reflect . Field ; public class ScalaObject { private final Object instance ; private final Class < ? > type ; private final String className ; public ScalaObject ( ClassLoader classLoader , String className ) { this . className = className ; Class < ? > baseClass = getClass ( classLoader , className ) ; final Field scalaObject = getModule ( baseClass ) ; instance = getInstance ( scalaObject ) ; type = scalaObject . getType ( ) ; } private Object getInstance ( Field scalaObject ) { try { return scalaObject . get ( null ) ; } catch ( IllegalAccessException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } private Class < ? > getClass ( ClassLoader classLoader , String typeName ) { try { return classLoader . loadClass ( typeName + <str> ) ; } catch ( ClassNotFoundException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } private Field getModule ( Class < ? > baseClass ) { try { return baseClass . getField ( <str> ) ; } catch ( NoSuchFieldException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } public Object getInstance ( ) { return instance ; } public Class < ? > getType ( ) { return type ; } public String getClassName ( ) { return className ; } } 

package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . BitmapFontCache ; import com . badlogic . gdx . graphics . g2d . GlyphLayout ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . utils . Align ; import com . badlogic . gdx . utils . StringBuilder ; public class Label extends Widget { static private final Color tempColor = new Color ( ) ; static private final GlyphLayout prefSizeLayout = new GlyphLayout ( ) ; private LabelStyle style ; private final GlyphLayout layout = new GlyphLayout ( ) ; private final Vector2 prefSize = new Vector2 ( ) ; private final StringBuilder text = new StringBuilder ( ) ; private BitmapFontCache cache ; private int labelAlign = Align . left ; private int lineAlign = Align . left ; private boolean wrap ; private float lastPrefHeight ; private boolean prefSizeInvalid = true ; private float fontScaleX = <int> , fontScaleY = <int> ; private String ellipsis ; public Label ( CharSequence text , Skin skin ) { this ( text , skin . get ( LabelStyle . class ) ) ; } public Label ( CharSequence text , Skin skin , String styleName ) { this ( text , skin . get ( styleName , LabelStyle . class ) ) ; } public Label ( CharSequence text , Skin skin , String fontName , Color color ) { this ( text , new LabelStyle ( skin . getFont ( fontName ) , color ) ) ; } public Label ( CharSequence text , Skin skin , String fontName , String colorName ) { this ( text , new LabelStyle ( skin . getFont ( fontName ) , skin . getColor ( colorName ) ) ) ; } public Label ( CharSequence text , LabelStyle style ) { if ( text ! = null ) this . text . append ( text ) ; setStyle ( style ) ; if ( text ! = null & & text . length ( ) > <int> ) setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; } public void setStyle ( LabelStyle style ) { if ( style = = null ) throw new IllegalArgumentException ( <str> ) ; if ( style . font = = null ) throw new IllegalArgumentException ( <str> ) ; this . style = style ; cache = style . font . newFontCache ( ) ; invalidateHierarchy ( ) ; } public LabelStyle getStyle ( ) { return style ; } public void setText ( CharSequence newText ) { if ( newText = = null ) newText = <str> ; if ( newText instanceof StringBuilder ) { if ( text . equals ( newText ) ) return ; text . setLength ( <int> ) ; text . append ( ( StringBuilder ) newText ) ; } else { if ( textEquals ( newText ) ) return ; text . setLength ( <int> ) ; text . append ( newText ) ; } invalidateHierarchy ( ) ; } public boolean textEquals ( CharSequence other ) { int length = text . length ; char [ ] chars = text . chars ; if ( length ! = other . length ( ) ) return false ; for ( int i = <int> ; i < length ; i + + ) if ( chars [ i ] ! = other . charAt ( i ) ) return false ; return true ; } public StringBuilder getText ( ) { return text ; } public void invalidate ( ) { super . invalidate ( ) ; prefSizeInvalid = true ; } private void scaleAndComputePrefSize ( ) { BitmapFont font = cache . getFont ( ) ; float oldScaleX = font . getScaleX ( ) ; float oldScaleY = font . getScaleY ( ) ; if ( fontScaleX ! = <int> | | fontScaleY ! = <int> ) font . getData ( ) . setScale ( fontScaleX , fontScaleY ) ; computePrefSize ( ) ; if ( fontScaleX ! = <int> | | fontScaleY ! = <int> ) font . getData ( ) . setScale ( oldScaleX , oldScaleY ) ; } private void computePrefSize ( ) { prefSizeInvalid = false ; GlyphLayout prefSizeLayout = Label . prefSizeLayout ; if ( wrap & & ellipsis = = null ) { float width = getWidth ( ) ; if ( style . background ! = null ) width - = style . background . getLeftWidth ( ) + style . background . getRightWidth ( ) ; prefSizeLayout . setText ( cache . getFont ( ) , text , Color . WHITE , width , Align . left , true ) ; } else prefSizeLayout . setText ( cache . getFont ( ) , text ) ; prefSize . set ( prefSizeLayout . width , prefSizeLayout . height ) ; } public void layout ( ) { BitmapFont font = cache . getFont ( ) ; float oldScaleX = font . getScaleX ( ) ; float oldScaleY = font . getScaleY ( ) ; if ( fontScaleX ! = <int> | | fontScaleY ! = <int> ) font . getData ( ) . setScale ( fontScaleX , fontScaleY ) ; boolean wrap = this . wrap & & ellipsis = = null ; if ( wrap ) { float prefHeight = getPrefHeight ( ) ; if ( prefHeight ! = lastPrefHeight ) { lastPrefHeight = prefHeight ; invalidateHierarchy ( ) ; } } float width = getWidth ( ) , height = getHeight ( ) ; Drawable background = style . background ; float x = <int> , y = <int> ; if ( background ! = null ) { x = background . getLeftWidth ( ) ; y = background . getBottomHeight ( ) ; width - = background . getLeftWidth ( ) + background . getRightWidth ( ) ; height - = background . getBottomHeight ( ) + background . getTopHeight ( ) ; } GlyphLayout layout = this . layout ; float textWidth , textHeight ; if ( wrap | | text . indexOf ( <str> ) ! = - <int> ) { layout . setText ( font , text , <int> , text . length , Color . WHITE , width , lineAlign , wrap , ellipsis ) ; textWidth = layout . width ; textHeight = layout . height ; if ( ( labelAlign & Align . left ) = = <int> ) { if ( ( labelAlign & Align . right ) ! = <int> ) x + = width - textWidth ; else x + = ( width - textWidth ) / <int> ; } } else { textWidth = width ; textHeight = font . getData ( ) . capHeight ; } if ( ( labelAlign & Align . top ) ! = <int> ) { y + = cache . getFont ( ) . isFlipped ( ) ? <int> : height - textHeight ; y + = style . font . getDescent ( ) ; } else if ( ( labelAlign & Align . bottom ) ! = <int> ) { y + = cache . getFont ( ) . isFlipped ( ) ? height - textHeight : <int> ; y - = style . font . getDescent ( ) ; } else { y + = ( height - textHeight ) / <int> ; } if ( ! cache . getFont ( ) . isFlipped ( ) ) y + = textHeight ; layout . setText ( font , text , <int> , text . length , Color . WHITE , textWidth , lineAlign , wrap , ellipsis ) ; cache . setText ( layout , x , y ) ; if ( fontScaleX ! = <int> | | fontScaleY ! = <int> ) font . getData ( ) . setScale ( oldScaleX , oldScaleY ) ; } public void draw ( Batch batch , float parentAlpha ) { validate ( ) ; Color color = tempColor . set ( getColor ( ) ) ; color . a * = parentAlpha ; if ( style . background ! = null ) { batch . setColor ( color . r , color . g , color . b , color . a ) ; style . background . draw ( batch , getX ( ) , getY ( ) , getWidth ( ) , getHeight ( ) ) ; } if ( style . fontColor ! = null ) color . mul ( style . fontColor ) ; cache . tint ( color ) ; cache . setPosition ( getX ( ) , getY ( ) ) ; cache . draw ( batch ) ; } public float getPrefWidth ( ) { if ( wrap ) return <int> ; if ( prefSizeInvalid ) scaleAndComputePrefSize ( ) ; float width = prefSize . x ; Drawable background = style . background ; if ( background ! = null ) width + = background . getLeftWidth ( ) + background . getRightWidth ( ) ; return width ; } public float getPrefHeight ( ) { if ( prefSizeInvalid ) scaleAndComputePrefSize ( ) ; float height = prefSize . y - style . font . getDescent ( ) * fontScaleY * <int> ; Drawable background = style . background ; if ( background ! = null ) height + = background . getTopHeight ( ) + background . getBottomHeight ( ) ; return height ; } public GlyphLayout getGlyphLayout ( ) { return layout ; } public void setWrap ( boolean wrap ) { this . wrap = wrap ; invalidateHierarchy ( ) ; } public int getLabelAlign ( ) { return labelAlign ; } public int getLineAlign ( ) { return lineAlign ; } public void setAlignment ( int alignment ) { setAlignment ( alignment , alignment ) ; } public void setAlignment ( int labelAlign , int lineAlign ) { this . labelAlign = labelAlign ; if ( ( lineAlign & Align . left ) ! = <int> ) this . lineAlign = Align . left ; else if ( ( lineAlign & Align . right ) ! = <int> ) this . lineAlign = Align . right ; else this . lineAlign = Align . center ; invalidate ( ) ; } public void setFontScale ( float fontScale ) { this . fontScaleX = fontScale ; this . fontScaleY = fontScale ; invalidateHierarchy ( ) ; } public void setFontScale ( float fontScaleX , float fontScaleY ) { this . fontScaleX = fontScaleX ; this . fontScaleY = fontScaleY ; invalidateHierarchy ( ) ; } public float getFontScaleX ( ) { return fontScaleX ; } public void setFontScaleX ( float fontScaleX ) { this . fontScaleX = fontScaleX ; invalidateHierarchy ( ) ; } public float getFontScaleY ( ) { return fontScaleY ; } public void setFontScaleY ( float fontScaleY ) { this . fontScaleY = fontScaleY ; invalidateHierarchy ( ) ; } public void setEllipsis ( String ellipsis ) { this . ellipsis = ellipsis ; } public void setEllipsis ( boolean ellipsis ) { if ( ellipsis ) this . ellipsis = <str> ; else this . ellipsis = null ; } protected BitmapFontCache getBitmapFontCache ( ) { return cache ; } public String toString ( ) { return super . toString ( ) + <str> + text ; } static public class LabelStyle { public BitmapFont font ; public Color fontColor ; public Drawable background ; public LabelStyle ( ) { } public LabelStyle ( BitmapFont font , Color fontColor ) { this . font = font ; this . fontColor = fontColor ; } public LabelStyle ( LabelStyle style ) { this . font = style . font ; if ( style . fontColor ! = null ) fontColor = new Color ( style . fontColor ) ; background = style . background ; } } }
package org . gradle . foundation . queue ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import java . util . concurrent . LinkedBlockingQueue ; public class ExecutionQueue < R extends ExecutionQueue . Request > { private final Logger logger = Logging . getLogger ( ExecutionQueue . class ) ; private volatile LinkedBlockingQueue < R > requests = new LinkedBlockingQueue < R > ( ) ; private Thread executionThread ; public interface ExecutionInteraction < R > { void execute ( R request ) ; } public interface Request { public interface Type { } public Type getType ( ) ; } public interface RequestCancellation { void onCancel ( Request request ) ; } public ExecutionQueue ( ExecutionInteraction < R > executeInteraction ) { executionThread = new Thread ( new ExecutionThread ( executeInteraction ) ) ; executionThread . setContextClassLoader ( getClass ( ) . getClassLoader ( ) ) ; executionThread . start ( ) ; } public void addRequestToQueue ( R request ) { requests . offer ( request ) ; } public boolean removeRequestFromQueue ( Request request ) { return requests . remove ( request ) ; } private R getNextAvailableRequest ( ) { try { return requests . take ( ) ; } catch ( InterruptedException e ) { logger . error ( <str> , e ) ; return null ; } } private class ExecutionThread implements Runnable { private ExecutionInteraction < R > executeInteraction ; private ExecutionThread ( ExecutionInteraction < R > executeInteraction ) { this . executeInteraction = executeInteraction ; } public void run ( ) { while ( true ) { R request = getNextAvailableRequest ( ) ; if ( request = = null ) { return ; } executeInteraction . execute ( request ) ; } } } } 

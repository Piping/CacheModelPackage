package org . elasticsearch . action . support . replication ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . * ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . index . shard . ShardId ; import java . util . HashSet ; import java . util . Set ; import static org . elasticsearch . cluster . metadata . IndexMetaData . * ; import static org . elasticsearch . test . ESTestCase . randomFrom ; import static org . elasticsearch . test . ESTestCase . randomIntBetween ; public class ClusterStateCreationUtils { public static ClusterState state ( String index , boolean primaryLocal , ShardRoutingState primaryState , ShardRoutingState . . . replicaStates ) { final int numberOfReplicas = replicaStates . length ; int numberOfNodes = numberOfReplicas + <int> ; if ( primaryState = = ShardRoutingState . RELOCATING ) { numberOfNodes + + ; } for ( ShardRoutingState state : replicaStates ) { if ( state = = ShardRoutingState . RELOCATING ) { numberOfNodes + + ; } } numberOfNodes = Math . max ( <int> , numberOfNodes ) ; final ShardId shardId = new ShardId ( index , <int> ) ; DiscoveryNodes . Builder discoBuilder = DiscoveryNodes . builder ( ) ; Set < String > unassignedNodes = new HashSet < > ( ) ; for ( int i = <int> ; i < numberOfNodes + <int> ; i + + ) { final DiscoveryNode node = newNode ( i ) ; discoBuilder = discoBuilder . put ( node ) ; unassignedNodes . add ( node . id ( ) ) ; } discoBuilder . localNodeId ( newNode ( <int> ) . id ( ) ) ; discoBuilder . masterNodeId ( newNode ( <int> ) . id ( ) ) ; IndexMetaData indexMetaData = IndexMetaData . builder ( index ) . settings ( Settings . builder ( ) . put ( SETTING_VERSION_CREATED , Version . CURRENT ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( SETTING_NUMBER_OF_REPLICAS , numberOfReplicas ) . put ( SETTING_CREATION_DATE , System . currentTimeMillis ( ) ) ) . build ( ) ; RoutingTable . Builder routing = new RoutingTable . Builder ( ) ; routing . addAsNew ( indexMetaData ) ; IndexShardRoutingTable . Builder indexShardRoutingBuilder = new IndexShardRoutingTable . Builder ( shardId ) ; String primaryNode = null ; String relocatingNode = null ; UnassignedInfo unassignedInfo = null ; if ( primaryState ! = ShardRoutingState . UNASSIGNED ) { if ( primaryLocal ) { primaryNode = newNode ( <int> ) . id ( ) ; unassignedNodes . remove ( primaryNode ) ; } else { primaryNode = selectAndRemove ( unassignedNodes ) ; } if ( primaryState = = ShardRoutingState . RELOCATING ) { relocatingNode = selectAndRemove ( unassignedNodes ) ; } } else { unassignedInfo = new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , null ) ; } indexShardRoutingBuilder . addShard ( TestShardRouting . newShardRouting ( index , <int> , primaryNode , relocatingNode , null , true , primaryState , <int> , unassignedInfo ) ) ; for ( ShardRoutingState replicaState : replicaStates ) { String replicaNode = null ; relocatingNode = null ; unassignedInfo = null ; if ( replicaState ! = ShardRoutingState . UNASSIGNED ) { assert primaryNode ! = null : <str> ; replicaNode = selectAndRemove ( unassignedNodes ) ; if ( replicaState = = ShardRoutingState . RELOCATING ) { relocatingNode = selectAndRemove ( unassignedNodes ) ; } } else { unassignedInfo = new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , null ) ; } indexShardRoutingBuilder . addShard ( TestShardRouting . newShardRouting ( index , shardId . id ( ) , replicaNode , relocatingNode , null , false , replicaState , <int> , unassignedInfo ) ) ; } ClusterState . Builder state = ClusterState . builder ( new ClusterName ( <str> ) ) ; state . nodes ( discoBuilder ) ; state . metaData ( MetaData . builder ( ) . put ( indexMetaData , false ) . generateClusterUuidIfNeeded ( ) ) ; state . routingTable ( RoutingTable . builder ( ) . add ( IndexRoutingTable . builder ( index ) . addIndexShard ( indexShardRoutingBuilder . build ( ) ) ) . build ( ) ) ; return state . build ( ) ; } public static ClusterState stateWithAssignedPrimariesAndOneReplica ( String index , int numberOfShards ) { int numberOfNodes = <int> ; DiscoveryNodes . Builder discoBuilder = DiscoveryNodes . builder ( ) ; for ( int i = <int> ; i < numberOfNodes + <int> ; i + + ) { final DiscoveryNode node = newNode ( i ) ; discoBuilder = discoBuilder . put ( node ) ; } discoBuilder . localNodeId ( newNode ( <int> ) . id ( ) ) ; discoBuilder . masterNodeId ( newNode ( <int> ) . id ( ) ) ; IndexMetaData indexMetaData = IndexMetaData . builder ( index ) . settings ( Settings . builder ( ) . put ( SETTING_VERSION_CREATED , Version . CURRENT ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( SETTING_CREATION_DATE , System . currentTimeMillis ( ) ) ) . build ( ) ; ClusterState . Builder state = ClusterState . builder ( new ClusterName ( <str> ) ) ; state . nodes ( discoBuilder ) ; state . metaData ( MetaData . builder ( ) . put ( indexMetaData , false ) . generateClusterUuidIfNeeded ( ) ) ; IndexRoutingTable . Builder indexRoutingTableBuilder = IndexRoutingTable . builder ( index ) ; for ( int i = <int> ; i < numberOfShards ; i + + ) { RoutingTable . Builder routing = new RoutingTable . Builder ( ) ; routing . addAsNew ( indexMetaData ) ; final ShardId shardId = new ShardId ( index , i ) ; IndexShardRoutingTable . Builder indexShardRoutingBuilder = new IndexShardRoutingTable . Builder ( shardId ) ; indexShardRoutingBuilder . addShard ( TestShardRouting . newShardRouting ( index , i , newNode ( <int> ) . id ( ) , null , null , true , ShardRoutingState . STARTED , <int> , null ) ) ; indexShardRoutingBuilder . addShard ( TestShardRouting . newShardRouting ( index , i , newNode ( <int> ) . id ( ) , null , null , false , ShardRoutingState . STARTED , <int> , null ) ) ; indexRoutingTableBuilder . addIndexShard ( indexShardRoutingBuilder . build ( ) ) ; } state . routingTable ( RoutingTable . builder ( ) . add ( indexRoutingTableBuilder . build ( ) ) . build ( ) ) ; return state . build ( ) ; } public static ClusterState stateWithStartedPrimary ( String index , boolean primaryLocal , int numberOfReplicas ) { int assignedReplicas = randomIntBetween ( <int> , numberOfReplicas ) ; return stateWithStartedPrimary ( index , primaryLocal , assignedReplicas , numberOfReplicas - assignedReplicas ) ; } public static ClusterState stateWithStartedPrimary ( String index , boolean primaryLocal , int assignedReplicas , int unassignedReplicas ) { ShardRoutingState [ ] replicaStates = new ShardRoutingState [ assignedReplicas + unassignedReplicas ] ; for ( int i = <int> ; i < assignedReplicas ; i + + ) { replicaStates [ i ] = randomFrom ( ShardRoutingState . INITIALIZING , ShardRoutingState . STARTED , ShardRoutingState . RELOCATING ) ; } for ( int i = assignedReplicas ; i < replicaStates . length ; i + + ) { replicaStates [ i ] = ShardRoutingState . UNASSIGNED ; } return state ( index , primaryLocal , randomFrom ( ShardRoutingState . STARTED , ShardRoutingState . RELOCATING ) , replicaStates ) ; } public static ClusterState stateWithNoShard ( ) { int numberOfNodes = <int> ; DiscoveryNodes . Builder discoBuilder = DiscoveryNodes . builder ( ) ; Set < String > unassignedNodes = new HashSet < > ( ) ; for ( int i = <int> ; i < numberOfNodes + <int> ; i + + ) { final DiscoveryNode node = newNode ( i ) ; discoBuilder = discoBuilder . put ( node ) ; unassignedNodes . add ( node . id ( ) ) ; } discoBuilder . localNodeId ( newNode ( <int> ) . id ( ) ) ; discoBuilder . masterNodeId ( newNode ( <int> ) . id ( ) ) ; ClusterState . Builder state = ClusterState . builder ( new ClusterName ( <str> ) ) ; state . nodes ( discoBuilder ) ; state . metaData ( MetaData . builder ( ) . generateClusterUuidIfNeeded ( ) ) ; state . routingTable ( RoutingTable . builder ( ) . build ( ) ) ; return state . build ( ) ; } public static ClusterState state ( DiscoveryNode localNode , DiscoveryNode masterNode , DiscoveryNode . . . allNodes ) { DiscoveryNodes . Builder discoBuilder = DiscoveryNodes . builder ( ) ; for ( DiscoveryNode node : allNodes ) { discoBuilder . put ( node ) ; } if ( masterNode ! = null ) { discoBuilder . masterNodeId ( masterNode . id ( ) ) ; } discoBuilder . localNodeId ( localNode . id ( ) ) ; ClusterState . Builder state = ClusterState . builder ( new ClusterName ( <str> ) ) ; state . nodes ( discoBuilder ) ; state . metaData ( MetaData . builder ( ) . generateClusterUuidIfNeeded ( ) ) ; return state . build ( ) ; } private static DiscoveryNode newNode ( int nodeId ) { return new DiscoveryNode ( <str> + nodeId , DummyTransportAddress . INSTANCE , Version . CURRENT ) ; } static private String selectAndRemove ( Set < String > strings ) { String selection = randomFrom ( strings . toArray ( new String [ strings . size ( ) ] ) ) ; strings . remove ( selection ) ; return selection ; } } 

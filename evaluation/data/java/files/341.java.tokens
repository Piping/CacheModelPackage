package org . elasticsearch . action . admin . indices . alias . get ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeReadAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . AliasMetaData ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import java . util . List ; public class TransportGetAliasesAction extends TransportMasterNodeReadAction < GetAliasesRequest , GetAliasesResponse > { @Inject public TransportGetAliasesAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , GetAliasesAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , GetAliasesRequest : : new ) ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected ClusterBlockException checkBlock ( GetAliasesRequest request , ClusterState state ) { return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_READ , indexNameExpressionResolver . concreteIndices ( state , request ) ) ; } @Override protected GetAliasesResponse newResponse ( ) { return new GetAliasesResponse ( ) ; } @Override protected void masterOperation ( GetAliasesRequest request , ClusterState state , ActionListener < GetAliasesResponse > listener ) { String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( state , request ) ; @SuppressWarnings ( <str> ) ImmutableOpenMap < String , List < AliasMetaData > > result = ( ImmutableOpenMap ) state . metaData ( ) . findAliases ( request . aliases ( ) , concreteIndices ) ; listener . onResponse ( new GetAliasesResponse ( result ) ) ; } } 

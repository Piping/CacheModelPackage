package rx . internal . operators ; import static org . mockito . Matchers . any ; import static org . mockito . Matchers . anyString ; import static org . mockito . Mockito . inOrder ; import static org . mockito . Mockito . never ; import static org . mockito . Mockito . times ; import static org . mockito . Mockito . verify ; import static org . mockito . MockitoAnnotations . initMocks ; import org . junit . Before ; import org . junit . Test ; import org . mockito . InOrder ; import org . mockito . Mock ; import rx . Observable ; import rx . Observer ; import rx . functions . Func1 ; public class OperatorDistinctUntilChangedTest { @Mock Observer < String > w ; @Mock Observer < String > w2 ; final Func1 < String , String > TO_UPPER_WITH_EXCEPTION = new Func1 < String , String > ( ) { @Override public String call ( String s ) { if ( s . equals ( <str> ) ) { return <str> ; } return s . toUpperCase ( ) ; } } ; @Before public void before ( ) { initMocks ( this ) ; } @Test public void testDistinctUntilChangedOfNone ( ) { Observable < String > src = Observable . empty ( ) ; src . distinctUntilChanged ( ) . subscribe ( w ) ; verify ( w , never ( ) ) . onNext ( anyString ( ) ) ; verify ( w , never ( ) ) . onError ( any ( Throwable . class ) ) ; verify ( w , times ( <int> ) ) . onCompleted ( ) ; } @Test public void testDistinctUntilChangedOfNoneWithKeySelector ( ) { Observable < String > src = Observable . empty ( ) ; src . distinctUntilChanged ( TO_UPPER_WITH_EXCEPTION ) . subscribe ( w ) ; verify ( w , never ( ) ) . onNext ( anyString ( ) ) ; verify ( w , never ( ) ) . onError ( any ( Throwable . class ) ) ; verify ( w , times ( <int> ) ) . onCompleted ( ) ; } @Test public void testDistinctUntilChangedOfNormalSource ( ) { Observable < String > src = Observable . just ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; src . distinctUntilChanged ( ) . subscribe ( w ) ; InOrder inOrder = inOrder ( w ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onCompleted ( ) ; inOrder . verify ( w , never ( ) ) . onNext ( anyString ( ) ) ; verify ( w , never ( ) ) . onError ( any ( Throwable . class ) ) ; } @Test public void testDistinctUntilChangedOfNormalSourceWithKeySelector ( ) { Observable < String > src = Observable . just ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; src . distinctUntilChanged ( TO_UPPER_WITH_EXCEPTION ) . subscribe ( w ) ; InOrder inOrder = inOrder ( w ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onCompleted ( ) ; inOrder . verify ( w , never ( ) ) . onNext ( anyString ( ) ) ; verify ( w , never ( ) ) . onError ( any ( Throwable . class ) ) ; } @Test public void testDistinctUntilChangedOfSourceWithNulls ( ) { Observable < String > src = Observable . just ( null , <str> , <str> , null , null , <str> , null , null ) ; src . distinctUntilChanged ( ) . subscribe ( w ) ; InOrder inOrder = inOrder ( w ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( null ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( null ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( null ) ; inOrder . verify ( w , times ( <int> ) ) . onCompleted ( ) ; inOrder . verify ( w , never ( ) ) . onNext ( anyString ( ) ) ; verify ( w , never ( ) ) . onError ( any ( Throwable . class ) ) ; } @Test public void testDistinctUntilChangedOfSourceWithExceptionsFromKeySelector ( ) { Observable < String > src = Observable . just ( <str> , <str> , null , <str> ) ; src . distinctUntilChanged ( TO_UPPER_WITH_EXCEPTION ) . subscribe ( w ) ; InOrder inOrder = inOrder ( w ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; inOrder . verify ( w , times ( <int> ) ) . onNext ( <str> ) ; verify ( w , times ( <int> ) ) . onError ( any ( NullPointerException . class ) ) ; inOrder . verify ( w , never ( ) ) . onNext ( anyString ( ) ) ; inOrder . verify ( w , never ( ) ) . onCompleted ( ) ; } } 

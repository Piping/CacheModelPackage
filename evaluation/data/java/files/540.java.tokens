package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input . Keys ; import com . badlogic . gdx . InputAdapter ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . Animation ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . Sprite ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureAtlas ; import com . badlogic . gdx . graphics . g2d . TextureAtlas . AtlasRegion ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer . ShapeType ; import com . badlogic . gdx . tests . utils . GdxTest ; public class TextureAtlasTest extends GdxTest { SpriteBatch batch ; Sprite badlogic , badlogicSmall , star ; TextureAtlas atlas ; TextureAtlas jumpAtlas ; Animation jumpAnimation ; BitmapFont font ; float time = <int> ; ShapeRenderer renderer ; public void create ( ) { batch = new SpriteBatch ( ) ; renderer = new ShapeRenderer ( ) ; atlas = new TextureAtlas ( Gdx . files . internal ( <str> ) ) ; jumpAtlas = new TextureAtlas ( Gdx . files . internal ( <str> ) ) ; jumpAnimation = new Animation ( <float> , jumpAtlas . findRegions ( <str> ) ) ; badlogic = atlas . createSprite ( <str> ) ; badlogic . setPosition ( <int> , <int> ) ; badlogicSmall = atlas . createSprite ( <str> ) ; badlogicSmall . setPosition ( <int> , <int> ) ; AtlasRegion region = atlas . findRegion ( <str> ) ; System . out . println ( <str> + region . originalWidth + <str> + region . originalHeight ) ; System . out . println ( <str> + region . packedWidth + <str> + region . packedHeight ) ; star = atlas . createSprite ( <str> ) ; star . setPosition ( <int> , <int> ) ; font = new BitmapFont ( Gdx . files . internal ( <str> ) , atlas . findRegion ( <str> ) , false ) ; Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . input . setInputProcessor ( new InputAdapter ( ) { public boolean keyUp ( int keycode ) { if ( keycode = = Keys . UP ) { badlogicSmall . flip ( false , true ) ; } else if ( keycode = = Keys . RIGHT ) { badlogicSmall . flip ( true , false ) ; } else if ( keycode = = Keys . LEFT ) { badlogicSmall . setSize ( <int> , <int> ) ; } else if ( keycode = = Keys . DOWN ) { badlogicSmall . rotate90 ( true ) ; } return super . keyUp ( keycode ) ; } } ) ; } public void render ( ) { time + = Gdx . graphics . getDeltaTime ( ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; renderer . begin ( ShapeType . Line ) ; renderer . rect ( <int> , <int> , <int> , <int> ) ; renderer . end ( ) ; batch . begin ( ) ; badlogicSmall . draw ( batch ) ; batch . end ( ) ; } public void dispose ( ) { atlas . dispose ( ) ; jumpAtlas . dispose ( ) ; batch . dispose ( ) ; font . dispose ( ) ; } } 

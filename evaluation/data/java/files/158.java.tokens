package org . eclipse . debug . internal . ui . preferences ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . dialogs . MessageDialogWithToggle ; import org . eclipse . jface . preference . BooleanFieldEditor ; import org . eclipse . jface . preference . FieldEditor ; import org . eclipse . jface . preference . FieldEditorPreferencePage ; import org . eclipse . jface . preference . IntegerFieldEditor ; import org . eclipse . jface . preference . RadioGroupFieldEditor ; import org . eclipse . jface . preference . StringFieldEditor ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . events . SelectionListener ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Group ; import org . eclipse . ui . IWorkbench ; import org . eclipse . ui . IWorkbenchPreferencePage ; import org . eclipse . ui . PlatformUI ; import com . ibm . icu . text . MessageFormat ; public class LaunchingPreferencePage extends FieldEditorPreferencePage implements IWorkbenchPreferencePage { private Button fUseContextLaunching ; private Button fUseOldLaunching ; private Button fLaunchLastIfNotLaunchable ; private Button fCheckParent ; public LaunchingPreferencePage ( ) { super ( ) ; setPreferenceStore ( DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ) ; } @Override public void createControl ( Composite parent ) { super . createControl ( parent ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getControl ( ) , IDebugHelpContextIds . LAUNCHING_PREFERENCE_PAGE ) ; } @Override protected Control createContents ( Composite parent ) { Composite comp = SWTFactory . createComposite ( parent , <int> , <int> , GridData . FILL_HORIZONTAL ) ; FieldEditor edit = new RadioGroupFieldEditor ( IInternalDebugUIConstants . PREF_SAVE_DIRTY_EDITORS_BEFORE_LAUNCH , DebugPreferencesMessages . LaunchingPreferencePage_2 , <int> , new String [ ] [ ] { { DebugPreferencesMessages . LaunchingPreferencePage_3 , MessageDialogWithToggle . ALWAYS } , { DebugPreferencesMessages . LaunchingPreferencePage_4 , MessageDialogWithToggle . NEVER } , { DebugPreferencesMessages . LaunchingPreferencePage_5 , MessageDialogWithToggle . PROMPT } } , comp , true ) ; addField ( edit ) ; edit = new RadioGroupFieldEditor ( IInternalDebugUIConstants . PREF_WAIT_FOR_BUILD , DebugPreferencesMessages . LaunchingPreferencePage_6 , <int> , new String [ ] [ ] { { DebugPreferencesMessages . LaunchingPreferencePage_7 , MessageDialogWithToggle . ALWAYS } , { DebugPreferencesMessages . LaunchingPreferencePage_8 , MessageDialogWithToggle . NEVER } , { DebugPreferencesMessages . LaunchingPreferencePage_9 , MessageDialogWithToggle . PROMPT } } , comp , true ) ; addField ( edit ) ; edit = new RadioGroupFieldEditor ( IInternalDebugUIConstants . PREF_RELAUNCH_IN_DEBUG_MODE , DebugPreferencesMessages . LaunchingPreferencePage_15 , <int> , new String [ ] [ ] { { DebugPreferencesMessages . LaunchingPreferencePage_16 , MessageDialogWithToggle . ALWAYS } , { DebugPreferencesMessages . LaunchingPreferencePage_17 , MessageDialogWithToggle . NEVER } , { DebugPreferencesMessages . LaunchingPreferencePage_18 , MessageDialogWithToggle . PROMPT } } , comp , true ) ; addField ( edit ) ; edit = new RadioGroupFieldEditor ( IInternalDebugUIConstants . PREF_CONTINUE_WITH_COMPILE_ERROR , DebugPreferencesMessages . LaunchingPreferencePage_21 , <int> , new String [ ] [ ] { { DebugPreferencesMessages . LaunchingPreferencePage_22 , MessageDialogWithToggle . ALWAYS } , { DebugPreferencesMessages . LaunchingPreferencePage_23 , MessageDialogWithToggle . PROMPT } } , comp , true ) ; addField ( edit ) ; Group group = SWTFactory . createGroup ( comp , DebugPreferencesMessages . LaunchingPreferencePage_36 , <int> , <int> , GridData . FILL_HORIZONTAL ) ; Composite spacer = SWTFactory . createComposite ( group , <int> , <int> , GridData . FILL_HORIZONTAL ) ; edit = new BooleanFieldEditor ( IDebugUIConstants . PREF_BUILD_BEFORE_LAUNCH , DebugPreferencesMessages . LaunchingPreferencePage_1 , SWT . NONE , spacer ) ; edit . fillIntoGrid ( spacer , <int> ) ; addField ( edit ) ; edit = new BooleanFieldEditor ( IDebugUIConstants . PREF_AUTO_REMOVE_OLD_LAUNCHES , DebugPreferencesMessages . LaunchingPreferencePage_10 , SWT . NONE , spacer ) ; edit . fillIntoGrid ( spacer , <int> ) ; addField ( edit ) ; edit = new BooleanFieldEditor ( IInternalDebugUIConstants . PREF_REMOVE_FROM_LAUNCH_HISTORY , DebugPreferencesMessages . LaunchingPreferencePage_confirm_0 , spacer ) ; edit . fillIntoGrid ( spacer , <int> ) ; addField ( edit ) ; IntegerFieldEditor editor = new IntegerFieldEditor ( IDebugUIConstants . PREF_MAX_HISTORY_SIZE , DebugPreferencesMessages . DebugPreferencePage_10 , spacer ) ; editor . fillIntoGrid ( spacer , <int> ) ; addField ( editor ) ; int historyMax = IDebugPreferenceConstants . MAX_LAUNCH_HISTORY_SIZE ; editor . setTextLimit ( Integer . toString ( historyMax ) . length ( ) ) ; editor . setErrorMessage ( MessageFormat . format ( DebugPreferencesMessages . DebugPreferencePage_11 , new Object [ ] { Integer . valueOf ( <int> ) , Integer . valueOf ( historyMax ) } ) ) ; editor . setValidateStrategy ( StringFieldEditor . VALIDATE_ON_KEY_STROKE ) ; editor . setValidRange ( <int> , historyMax ) ; editor . setEmptyStringAllowed ( false ) ; createContextLaunchingControls ( comp ) ; initialize ( ) ; checkState ( ) ; return comp ; } private void createContextLaunchingControls ( Composite parent ) { Group group = SWTFactory . createGroup ( parent , DebugPreferencesMessages . LaunchingPreferencePage_40 , <int> , <int> , GridData . FILL_HORIZONTAL ) ; fUseOldLaunching = SWTFactory . createRadioButton ( group , DebugPreferencesMessages . LaunchingPreferencePage_37 ) ; fUseContextLaunching = SWTFactory . createRadioButton ( group , DebugPreferencesMessages . LaunchingPreferencePage_38 ) ; fUseContextLaunching . addSelectionListener ( new SelectionListener ( ) { @Override public void widgetDefaultSelected ( SelectionEvent e ) { } @Override public void widgetSelected ( SelectionEvent e ) { boolean enabled = ( ( Button ) e . widget ) . getSelection ( ) ; fCheckParent . setEnabled ( enabled ) ; fLaunchLastIfNotLaunchable . setEnabled ( enabled ) ; } } ) ; Composite space = SWTFactory . createComposite ( group , <int> , <int> , GridData . FILL_HORIZONTAL ) ; GridData gd = ( GridData ) space . getLayoutData ( ) ; gd . horizontalIndent = <int> ; GridLayout layout = ( GridLayout ) space . getLayout ( ) ; layout . marginHeight = <int> ; fCheckParent = SWTFactory . createRadioButton ( space , DebugPreferencesMessages . LaunchingPreferencePage_39 ) ; fLaunchLastIfNotLaunchable = SWTFactory . createRadioButton ( space , DebugPreferencesMessages . LaunchingPreferencePage_41 ) ; boolean value = getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_USE_CONTEXTUAL_LAUNCH ) ; fUseOldLaunching . setSelection ( ! value ) ; fUseContextLaunching . setSelection ( value ) ; boolean enable = getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_LAUNCH_PARENT_PROJECT ) ; fCheckParent . setSelection ( enable ) ; fCheckParent . setEnabled ( value ) ; fLaunchLastIfNotLaunchable . setSelection ( ! enable ) ; fLaunchLastIfNotLaunchable . setEnabled ( value ) ; } @Override public void init ( IWorkbench workbench ) { } @Override protected void performDefaults ( ) { boolean value = getPreferenceStore ( ) . getDefaultBoolean ( IInternalDebugUIConstants . PREF_USE_CONTEXTUAL_LAUNCH ) ; fUseOldLaunching . setSelection ( ! value ) ; fUseContextLaunching . setSelection ( value ) ; boolean parent = getPreferenceStore ( ) . getDefaultBoolean ( IInternalDebugUIConstants . PREF_LAUNCH_PARENT_PROJECT ) ; fCheckParent . setSelection ( parent ) ; fCheckParent . setEnabled ( value ) ; fLaunchLastIfNotLaunchable . setSelection ( ! parent ) ; fLaunchLastIfNotLaunchable . setEnabled ( value ) ; super . performDefaults ( ) ; } @Override public boolean performOk ( ) { getPreferenceStore ( ) . setValue ( IInternalDebugUIConstants . PREF_USE_CONTEXTUAL_LAUNCH , fUseContextLaunching . getSelection ( ) ) ; getPreferenceStore ( ) . setValue ( IInternalDebugUIConstants . PREF_LAUNCH_PARENT_PROJECT , fCheckParent . getSelection ( ) ) ; getPreferenceStore ( ) . setValue ( IInternalDebugUIConstants . PREF_LAUNCH_LAST_IF_NOT_LAUNCHABLE , fLaunchLastIfNotLaunchable . getSelection ( ) ) ; return super . performOk ( ) ; } @Override protected void createFieldEditors ( ) { } } 

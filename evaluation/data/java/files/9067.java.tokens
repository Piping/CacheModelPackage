package org . eclipse . debug . examples . ui . pda . editor ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . ITextHover ; import org . eclipse . jface . text . contentassist . IContentAssistant ; import org . eclipse . jface . text . presentation . IPresentationReconciler ; import org . eclipse . jface . text . presentation . PresentationReconciler ; import org . eclipse . jface . text . rules . DefaultDamagerRepairer ; import org . eclipse . jface . text . source . IAnnotationHover ; import org . eclipse . jface . text . source . ISourceViewer ; import org . eclipse . ui . editors . text . TextSourceViewerConfiguration ; public class PDASourceViewerConfiguration extends TextSourceViewerConfiguration { @Override public ITextHover getTextHover ( ISourceViewer sourceViewer , String contentType ) { return new TextHover ( ) ; } @Override public IAnnotationHover getAnnotationHover ( ISourceViewer sourceViewer ) { return new AnnotationHover ( ) ; } @Override public IPresentationReconciler getPresentationReconciler ( ISourceViewer sourceViewer ) { PresentationReconciler reconciler = new PresentationReconciler ( ) ; reconciler . setDocumentPartitioning ( getConfiguredDocumentPartitioning ( sourceViewer ) ) ; DefaultDamagerRepairer dr = new DefaultDamagerRepairer ( new PDAScanner ( ) ) ; reconciler . setDamager ( dr , IDocument . DEFAULT_CONTENT_TYPE ) ; reconciler . setRepairer ( dr , IDocument . DEFAULT_CONTENT_TYPE ) ; return reconciler ; } @Override public IContentAssistant getContentAssistant ( ISourceViewer sourceViewer ) { return new PDAContentAssistant ( ) ; } }
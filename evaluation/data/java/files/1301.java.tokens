package org . elasticsearch . action . indexedscripts . get ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . elasticsearch . test . VersionUtils . randomVersion ; import static org . hamcrest . CoreMatchers . equalTo ; public class GetIndexedScriptRequestTests extends ESTestCase { public void testGetIndexedScriptRequestSerialization ( ) throws IOException { GetIndexedScriptRequest request = new GetIndexedScriptRequest ( <str> , <str> ) ; if ( randomBoolean ( ) ) { request . version ( randomIntBetween ( <int> , Integer . MAX_VALUE ) ) ; request . versionType ( randomFrom ( VersionType . values ( ) ) ) ; } BytesStreamOutput out = new BytesStreamOutput ( ) ; out . setVersion ( randomVersion ( random ( ) ) ) ; request . writeTo ( out ) ; StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ; in . setVersion ( out . getVersion ( ) ) ; GetIndexedScriptRequest request2 = new GetIndexedScriptRequest ( ) ; request2 . readFrom ( in ) ; assertThat ( request2 . id ( ) , equalTo ( request . id ( ) ) ) ; assertThat ( request2 . scriptLang ( ) , equalTo ( request . scriptLang ( ) ) ) ; assertThat ( request2 . version ( ) , equalTo ( request . version ( ) ) ) ; assertThat ( request2 . versionType ( ) , equalTo ( request . versionType ( ) ) ) ; } } 

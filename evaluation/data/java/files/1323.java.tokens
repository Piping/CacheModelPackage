package org . elasticsearch . indices . flush ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . index . shard . ShardId ; import java . util . HashMap ; import java . util . Map ; import static java . util . Collections . emptyMap ; import static java . util . Collections . unmodifiableMap ; public class ShardsSyncedFlushResult { private String failureReason ; private Map < ShardRouting , SyncedFlushService . SyncedFlushResponse > shardResponses ; private String syncId ; private ShardId shardId ; private int totalShards ; public ShardsSyncedFlushResult ( ) { } public ShardId getShardId ( ) { return shardId ; } public ShardsSyncedFlushResult ( ShardId shardId , int totalShards , String failureReason ) { this . syncId = null ; this . failureReason = failureReason ; this . shardResponses = emptyMap ( ) ; this . shardId = shardId ; this . totalShards = totalShards ; } public ShardsSyncedFlushResult ( ShardId shardId , String syncId , int totalShards , Map < ShardRouting , SyncedFlushService . SyncedFlushResponse > shardResponses ) { this . failureReason = null ; this . shardResponses = unmodifiableMap ( new HashMap < > ( shardResponses ) ) ; this . syncId = syncId ; this . totalShards = totalShards ; this . shardId = shardId ; } public boolean failed ( ) { return failureReason ! = null ; } public String failureReason ( ) { return failureReason ; } public String syncId ( ) { return syncId ; } public int totalShards ( ) { return totalShards ; } public int successfulShards ( ) { int i = <int> ; for ( SyncedFlushService . SyncedFlushResponse result : shardResponses . values ( ) ) { if ( result . success ( ) ) { i + + ; } } return i ; } public Map < ShardRouting , SyncedFlushService . SyncedFlushResponse > failedShards ( ) { Map < ShardRouting , SyncedFlushService . SyncedFlushResponse > failures = new HashMap < > ( ) ; for ( Map . Entry < ShardRouting , SyncedFlushService . SyncedFlushResponse > result : shardResponses . entrySet ( ) ) { if ( result . getValue ( ) . success ( ) = = false ) { failures . put ( result . getKey ( ) , result . getValue ( ) ) ; } } return failures ; } public Map < ShardRouting , SyncedFlushService . SyncedFlushResponse > shardResponses ( ) { return shardResponses ; } public ShardId shardId ( ) { return shardId ; } } 

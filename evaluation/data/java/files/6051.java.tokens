package rx . internal . operators ; import java . util . concurrent . TimeUnit ; import rx . Observable ; import rx . Scheduler ; import rx . Subscription ; import rx . functions . Action0 ; public final class OperatorTimeout < T > extends OperatorTimeoutBase < T > { public OperatorTimeout ( final long timeout , final TimeUnit timeUnit , Observable < ? extends T > other , Scheduler scheduler ) { super ( new FirstTimeoutStub < T > ( ) { @Override public Subscription call ( final TimeoutSubscriber < T > timeoutSubscriber , final Long seqId , Scheduler . Worker inner ) { return inner . schedule ( new Action0 ( ) { @Override public void call ( ) { timeoutSubscriber . onTimeout ( seqId ) ; } } , timeout , timeUnit ) ; } } , new TimeoutStub < T > ( ) { @Override public Subscription call ( final TimeoutSubscriber < T > timeoutSubscriber , final Long seqId , T value , Scheduler . Worker inner ) { return inner . schedule ( new Action0 ( ) { @Override public void call ( ) { timeoutSubscriber . onTimeout ( seqId ) ; } } , timeout , timeUnit ) ; } } , other , scheduler ) ; } }
package org . eclipse . debug . ui . actions ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . internal . ui . actions . ToggleBreakpointsTargetManager ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . IRegion ; import org . eclipse . jface . text . ITextSelection ; import org . eclipse . jface . text . TextSelection ; import org . eclipse . jface . text . source . IVerticalRulerInfo ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ISelectionProvider ; import org . eclipse . swt . widgets . Event ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . texteditor . IDocumentProvider ; import org . eclipse . ui . texteditor . ITextEditor ; import org . eclipse . ui . texteditor . IUpdate ; public class ToggleBreakpointAction extends Action implements IUpdate { private IWorkbenchPart fPart ; private IDocument fDocument ; private IVerticalRulerInfo fRulerInfo ; private IToggleBreakpointsTargetManagerListener fListener = new IToggleBreakpointsTargetManagerListener ( ) { @Override public void preferredTargetsChanged ( ) { update ( ) ; } } ; public ToggleBreakpointAction ( IWorkbenchPart part , IDocument document , IVerticalRulerInfo rulerInfo ) { super ( ActionMessages . ToggleBreakpointAction_0 + <str> + ActionMessages . ToggleBreakpointAction_3 ) ; fPart = part ; fDocument = document ; fRulerInfo = rulerInfo ; DebugUITools . getToggleBreakpointsTargetManager ( ) . addChangedListener ( fListener ) ; } @Override public void run ( ) { doIt ( null ) ; } @Override public void runWithEvent ( Event event ) { doIt ( event ) ; } void doIt ( Event event ) { IDocument document = getDocument ( ) ; if ( document ! = null ) { int line = fRulerInfo . getLineOfLastMouseButtonActivity ( ) ; if ( line > - <int> ) { try { ITextSelection selection = getTextSelection ( document , line ) ; IToggleBreakpointsTarget target = DebugUITools . getToggleBreakpointsTargetManager ( ) . getToggleBreakpointsTarget ( fPart , selection ) ; if ( target ! = null ) { IToggleBreakpointsTargetExtension2 ext = ( IToggleBreakpointsTargetExtension2 ) DebugPlugin . getAdapter ( target , IToggleBreakpointsTargetExtension2 . class ) ; if ( ext ! = null ) { if ( ext . canToggleBreakpointsWithEvent ( fPart , selection , event ) ) { ext . toggleBreakpointsWithEvent ( fPart , selection , event ) ; return ; } } IToggleBreakpointsTargetExtension ext2 = ( IToggleBreakpointsTargetExtension ) DebugPlugin . getAdapter ( target , IToggleBreakpointsTargetExtension . class ) ; if ( ext2 ! = null ) { if ( ext2 . canToggleBreakpoints ( fPart , selection ) ) { ext2 . toggleBreakpoints ( fPart , selection ) ; return ; } } if ( target . canToggleLineBreakpoints ( fPart , selection ) ) { target . toggleLineBreakpoints ( fPart , selection ) ; } else if ( target . canToggleWatchpoints ( fPart , selection ) ) { target . toggleWatchpoints ( fPart , selection ) ; } else if ( target . canToggleMethodBreakpoints ( fPart , selection ) ) { target . toggleMethodBreakpoints ( fPart , selection ) ; } } } catch ( BadLocationException ble ) { reportException ( ble ) ; } catch ( CoreException ce ) { reportException ( ce ) ; } } } } private void reportException ( Exception e ) { DebugUIPlugin . errorDialog ( fPart . getSite ( ) . getShell ( ) , ActionMessages . ToggleBreakpointAction_1 , ActionMessages . ToggleBreakpointAction_2 , e ) ; } public void dispose ( ) { fDocument = null ; fPart = null ; fRulerInfo = null ; DebugUITools . getToggleBreakpointsTargetManager ( ) . removeChangedListener ( fListener ) ; } private IDocument getDocument ( ) { if ( fDocument ! = null ) return fDocument ; if ( fPart instanceof ITextEditor ) { ITextEditor editor = ( ITextEditor ) fPart ; IDocumentProvider provider = editor . getDocumentProvider ( ) ; if ( provider ! = null ) return provider . getDocument ( editor . getEditorInput ( ) ) ; } IDocument doc = fPart . getAdapter ( IDocument . class ) ; if ( doc ! = null ) { return doc ; } return null ; } @Override public void update ( ) { IDocument document = getDocument ( ) ; if ( document ! = null ) { int line = fRulerInfo . getLineOfLastMouseButtonActivity ( ) ; if ( line > - <int> ) { try { ITextSelection selection = getTextSelection ( document , line ) ; IToggleBreakpointsTarget adapter = ToggleBreakpointsTargetManager . getDefault ( ) . getToggleBreakpointsTarget ( fPart , selection ) ; if ( adapter = = null ) { setEnabled ( false ) ; return ; } if ( adapter instanceof IToggleBreakpointsTargetExtension ) { IToggleBreakpointsTargetExtension extension = ( IToggleBreakpointsTargetExtension ) adapter ; if ( extension . canToggleBreakpoints ( fPart , selection ) ) { setEnabled ( true ) ; return ; } } if ( adapter . canToggleLineBreakpoints ( fPart , selection ) | | adapter . canToggleWatchpoints ( fPart , selection ) | | adapter . canToggleMethodBreakpoints ( fPart , selection ) ) { setEnabled ( true ) ; return ; } } catch ( BadLocationException e ) { reportException ( e ) ; } } } setEnabled ( false ) ; } private ITextSelection getTextSelection ( IDocument document , int line ) throws BadLocationException { IRegion region = document . getLineInformation ( line ) ; ITextSelection textSelection = new TextSelection ( document , region . getOffset ( ) , <int> ) ; ISelectionProvider provider = fPart . getSite ( ) . getSelectionProvider ( ) ; if ( provider ! = null ) { ISelection selection = provider . getSelection ( ) ; if ( selection instanceof ITextSelection & & ( ( ITextSelection ) selection ) . getStartLine ( ) < = line & & ( ( ITextSelection ) selection ) . getEndLine ( ) > = line ) { textSelection = ( ITextSelection ) selection ; } } return textSelection ; } }
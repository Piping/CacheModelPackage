package com . badlogic . gdx . math ; public final class WindowedMean { float values [ ] ; int added_values = <int> ; int last_value ; float mean = <int> ; boolean dirty = true ; public WindowedMean ( int window_size ) { values = new float [ window_size ] ; } public boolean hasEnoughData ( ) { return added_values > = values . length ; } public void clear ( ) { added_values = <int> ; last_value = <int> ; for ( int i = <int> ; i < values . length ; i + + ) values [ i ] = <int> ; dirty = true ; } public void addValue ( float value ) { if ( added_values < values . length ) added_values + + ; values [ last_value + + ] = value ; if ( last_value > values . length - <int> ) last_value = <int> ; dirty = true ; } public float getMean ( ) { if ( hasEnoughData ( ) ) { if ( dirty = = true ) { float mean = <int> ; for ( int i = <int> ; i < values . length ; i + + ) mean + = values [ i ] ; this . mean = mean / values . length ; dirty = false ; } return this . mean ; } else return <int> ; } public float getOldest ( ) { return last_value = = values . length - <int> ? values [ <int> ] : values [ last_value + <int> ] ; } public float getLatest ( ) { return values [ last_value - <int> = = - <int> ? values . length - <int> : last_value - <int> ] ; } public float standardDeviation ( ) { if ( ! hasEnoughData ( ) ) return <int> ; float mean = getMean ( ) ; float sum = <int> ; for ( int i = <int> ; i < values . length ; i + + ) { sum + = ( values [ i ] - mean ) * ( values [ i ] - mean ) ; } return ( float ) Math . sqrt ( sum / values . length ) ; } public int getWindowSize ( ) { return values . length ; } }
package rx . internal . operators ; import static org . junit . Assert . assertEquals ; import static org . mockito . Matchers . isA ; import static org . mockito . Mockito . inOrder ; import static org . mockito . Mockito . mock ; import static org . mockito . Mockito . times ; import java . util . NoSuchElementException ; import org . junit . Test ; import org . mockito . InOrder ; import rx . Observable ; import rx . Observer ; import rx . functions . Func1 ; public class OperatorLastTest { @Test public void testLastWithElements ( ) { Observable < Integer > last = Observable . just ( <int> , <int> , <int> ) . last ( ) ; assertEquals ( <int> , last . toBlocking ( ) . single ( ) . intValue ( ) ) ; } @Test ( expected = NoSuchElementException . class ) public void testLastWithNoElements ( ) { Observable < ? > last = Observable . empty ( ) . last ( ) ; last . toBlocking ( ) . single ( ) ; } @Test public void testLastMultiSubscribe ( ) { Observable < Integer > last = Observable . just ( <int> , <int> , <int> ) . last ( ) ; assertEquals ( <int> , last . toBlocking ( ) . single ( ) . intValue ( ) ) ; assertEquals ( <int> , last . toBlocking ( ) . single ( ) . intValue ( ) ) ; } @Test public void testLastViaObservable ( ) { Observable . just ( <int> , <int> , <int> ) . last ( ) ; } @Test public void testLast ( ) { Observable < Integer > observable = Observable . just ( <int> , <int> , <int> ) . last ( ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastWithOneElement ( ) { Observable < Integer > observable = Observable . just ( <int> ) . last ( ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastWithEmpty ( ) { Observable < Integer > observable = Observable . < Integer > empty ( ) . last ( ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onError ( isA ( NoSuchElementException . class ) ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastWithPredicate ( ) { Observable < Integer > observable = Observable . just ( <int> , <int> , <int> , <int> , <int> , <int> ) . last ( new Func1 < Integer , Boolean > ( ) { @Override public Boolean call ( Integer t1 ) { return t1 % <int> = = <int> ; } } ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastWithPredicateAndOneElement ( ) { Observable < Integer > observable = Observable . just ( <int> , <int> ) . last ( new Func1 < Integer , Boolean > ( ) { @Override public Boolean call ( Integer t1 ) { return t1 % <int> = = <int> ; } } ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastWithPredicateAndEmpty ( ) { Observable < Integer > observable = Observable . just ( <int> ) . last ( new Func1 < Integer , Boolean > ( ) { @Override public Boolean call ( Integer t1 ) { return t1 % <int> = = <int> ; } } ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onError ( isA ( NoSuchElementException . class ) ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastOrDefault ( ) { Observable < Integer > observable = Observable . just ( <int> , <int> , <int> ) . lastOrDefault ( <int> ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastOrDefaultWithOneElement ( ) { Observable < Integer > observable = Observable . just ( <int> ) . lastOrDefault ( <int> ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastOrDefaultWithEmpty ( ) { Observable < Integer > observable = Observable . < Integer > empty ( ) . lastOrDefault ( <int> ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastOrDefaultWithPredicate ( ) { Observable < Integer > observable = Observable . just ( <int> , <int> , <int> , <int> , <int> , <int> ) . lastOrDefault ( <int> , new Func1 < Integer , Boolean > ( ) { @Override public Boolean call ( Integer t1 ) { return t1 % <int> = = <int> ; } } ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastOrDefaultWithPredicateAndOneElement ( ) { Observable < Integer > observable = Observable . just ( <int> , <int> ) . lastOrDefault ( <int> , new Func1 < Integer , Boolean > ( ) { @Override public Boolean call ( Integer t1 ) { return t1 % <int> = = <int> ; } } ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } @Test public void testLastOrDefaultWithPredicateAndEmpty ( ) { Observable < Integer > observable = Observable . just ( <int> ) . lastOrDefault ( <int> , new Func1 < Integer , Boolean > ( ) { @Override public Boolean call ( Integer t1 ) { return t1 % <int> = = <int> ; } } ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; observable . subscribe ( observer ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; inOrder . verify ( observer , times ( <int> ) ) . onCompleted ( ) ; inOrder . verifyNoMoreInteractions ( ) ; } } 

package org . apache . cassandra . utils . btree ; import java . util . Comparator ; import static org . apache . cassandra . utils . btree . BTree . EMPTY_LEAF ; import static org . apache . cassandra . utils . btree . BTree . FAN_SHIFT ; import static org . apache . cassandra . utils . btree . BTree . POSITIVE_INFINITY ; final class TreeBuilder { private final NodeBuilder rootBuilder = new NodeBuilder ( ) ; public < C , K extends C , V extends C > Object [ ] update ( Object [ ] btree , Comparator < C > comparator , Iterable < K > source , UpdateFunction < K , V > updateF ) { assert updateF ! = null ; NodeBuilder current = rootBuilder ; current . reset ( btree , POSITIVE_INFINITY , updateF , comparator ) ; for ( K key : source ) { while ( true ) { if ( updateF . abortEarly ( ) ) { rootBuilder . clear ( ) ; return null ; } NodeBuilder next = current . update ( key ) ; if ( next = = null ) break ; current = next ; } } while ( true ) { NodeBuilder next = current . finish ( ) ; if ( next = = null ) break ; current = next ; } assert current . isRoot ( ) ; Object [ ] r = current . toNode ( ) ; current . clear ( ) ; return r ; } public < C , K extends C , V extends C > Object [ ] build ( Iterable < K > source , UpdateFunction < K , V > updateF , int size ) { assert updateF ! = null ; NodeBuilder current = rootBuilder ; while ( ( size > > = FAN_SHIFT ) > <int> ) current = current . ensureChild ( ) ; current . reset ( EMPTY_LEAF , POSITIVE_INFINITY , updateF , null ) ; for ( K key : source ) current . addNewKey ( key ) ; current = current . ascendToRoot ( ) ; Object [ ] r = current . toNode ( ) ; current . clear ( ) ; return r ; } }
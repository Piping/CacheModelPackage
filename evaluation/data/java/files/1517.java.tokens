package com . google . common . collect ; import java . util . concurrent . BlockingDeque ; import java . util . concurrent . TimeUnit ; public class ForwardingBlockingDequeTest extends ForwardingTestCase { private BlockingDeque < String > forward ; @SuppressWarnings ( <str> ) @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; final BlockingDeque < String > deque = createProxyInstance ( BlockingDeque . class ) ; forward = new ForwardingBlockingDeque < String > ( ) { @Override protected BlockingDeque < String > delegate ( ) { return deque ; } } ; } public void testRemainingCapacity ( ) { forward . remainingCapacity ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPutFirst_T ( ) throws InterruptedException { forward . putFirst ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPutLast_T ( ) throws InterruptedException { forward . putFirst ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testOfferFirst_T ( ) throws InterruptedException { forward . offerFirst ( <str> , <int> , TimeUnit . SECONDS ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testOfferLast_T ( ) throws InterruptedException { forward . offerLast ( <str> , <int> , TimeUnit . SECONDS ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testTakeFirst ( ) throws InterruptedException { forward . takeFirst ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testTakeLast ( ) throws InterruptedException { forward . takeLast ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPollFirst ( ) throws InterruptedException { forward . pollFirst ( <int> , TimeUnit . SECONDS ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPollLast ( ) throws InterruptedException { forward . pollLast ( <int> , TimeUnit . SECONDS ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPut_T ( ) throws InterruptedException { forward . put ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testOffer_T ( ) throws InterruptedException { forward . offer ( <str> , <int> , TimeUnit . SECONDS ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testTake ( ) throws InterruptedException { forward . take ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPoll ( ) throws InterruptedException { forward . poll ( <int> , TimeUnit . SECONDS ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testDrainTo_T ( ) { forward . drainTo ( Lists . newArrayList ( ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testDrainTo_T_maxElements ( ) { forward . drainTo ( Lists . newArrayList ( ) , <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } }
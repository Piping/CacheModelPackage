package rx . internal . operators ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; import static rx . internal . operators . BlockingOperatorMostRecent . mostRecent ; import java . util . Iterator ; import java . util . concurrent . TimeUnit ; import org . junit . Assert ; import org . junit . Test ; import rx . Observable ; import rx . exceptions . TestException ; import rx . observables . BlockingObservable ; import rx . schedulers . TestScheduler ; import rx . subjects . PublishSubject ; import rx . subjects . Subject ; public class BlockingOperatorMostRecentTest { @Test public void testMostRecentNull ( ) { assertEquals ( null , Observable . < Void > never ( ) . toBlocking ( ) . mostRecent ( null ) . iterator ( ) . next ( ) ) ; } @Test public void testMostRecent ( ) { Subject < String , String > s = PublishSubject . create ( ) ; Iterator < String > it = mostRecent ( s , <str> ) . iterator ( ) ; assertTrue ( it . hasNext ( ) ) ; assertEquals ( <str> , it . next ( ) ) ; assertEquals ( <str> , it . next ( ) ) ; s . onNext ( <str> ) ; assertTrue ( it . hasNext ( ) ) ; assertEquals ( <str> , it . next ( ) ) ; assertEquals ( <str> , it . next ( ) ) ; s . onNext ( <str> ) ; assertTrue ( it . hasNext ( ) ) ; assertEquals ( <str> , it . next ( ) ) ; assertEquals ( <str> , it . next ( ) ) ; s . onCompleted ( ) ; assertFalse ( it . hasNext ( ) ) ; } @Test ( expected = TestException . class ) public void testMostRecentWithException ( ) { Subject < String , String > s = PublishSubject . create ( ) ; Iterator < String > it = mostRecent ( s , <str> ) . iterator ( ) ; assertTrue ( it . hasNext ( ) ) ; assertEquals ( <str> , it . next ( ) ) ; assertEquals ( <str> , it . next ( ) ) ; s . onError ( new TestException ( ) ) ; assertTrue ( it . hasNext ( ) ) ; it . next ( ) ; } @Test ( timeout = <int> ) public void testSingleSourceManyIterators ( ) { TestScheduler scheduler = new TestScheduler ( ) ; BlockingObservable < Long > source = Observable . interval ( <int> , TimeUnit . SECONDS , scheduler ) . take ( <int> ) . toBlocking ( ) ; Iterable < Long > iter = source . mostRecent ( - <int> ) ; for ( int j = <int> ; j < <int> ; j + + ) { Iterator < Long > it = iter . iterator ( ) ; Assert . assertEquals ( Long . valueOf ( - <int> ) , it . next ( ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { scheduler . advanceTimeBy ( <int> , TimeUnit . SECONDS ) ; Assert . assertEquals ( true , it . hasNext ( ) ) ; Assert . assertEquals ( Long . valueOf ( i ) , it . next ( ) ) ; } scheduler . advanceTimeBy ( <int> , TimeUnit . SECONDS ) ; Assert . assertEquals ( false , it . hasNext ( ) ) ; } } } 

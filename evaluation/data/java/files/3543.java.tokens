package org . nd4j . linalg . dataset ; import org . nd4j . linalg . dataset . api . DataSetPreProcessor ; import org . nd4j . linalg . dataset . api . iterator . DataSetIterator ; public class ViewIterator implements DataSetIterator { private int batchSize = - <int> ; private int cursor = <int> ; private DataSet data ; private DataSetPreProcessor preProcessor ; public ViewIterator ( DataSet data , int batchSize ) { this . batchSize = batchSize ; this . data = data ; } @Override public DataSet next ( int num ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public int totalExamples ( ) { return data . numExamples ( ) ; } @Override public int inputColumns ( ) { return data . numInputs ( ) ; } @Override public int totalOutcomes ( ) { return data . numOutcomes ( ) ; } @Override public void reset ( ) { cursor = <int> ; } @Override public int batch ( ) { return batchSize ; } @Override public int cursor ( ) { return cursor ; } @Override public int numExamples ( ) { return data . numExamples ( ) ; } @Override public void setPreProcessor ( DataSetPreProcessor preProcessor ) { this . preProcessor = preProcessor ; } @Override public boolean hasNext ( ) { return cursor < numExamples ( ) ; } @Override public void remove ( ) { } @Override public DataSet next ( ) { if ( cursor + batch ( ) > numExamples ( ) ) cursor = cursor ( ) + batch ( ) - numExamples ( ) ; DataSet next = ( DataSet ) data . getRange ( cursor , cursor + batch ( ) ) ; if ( preProcessor ! = null ) preProcessor . preProcess ( next ) ; cursor + = batch ( ) ; return next ; } }
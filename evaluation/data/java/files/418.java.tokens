public void setIreIsSet ( boolean value ) { if ( ! value ) { this . ire = null ; } } public UnavailableException getUe ( ) { return this . ue ; } public get_indexed_slices_result setUe ( UnavailableException ue ) { this . ue = ue ; return this ; } public void unsetUe ( ) { this . ue = null ; } public boolean isSetUe ( ) { return this . ue ! = null ; } public void setUeIsSet ( boolean value ) { if ( ! value ) { this . ue = null ; } } public TimedOutException getTe ( ) { return this . te ; } public get_indexed_slices_result setTe ( TimedOutException te ) { this . te = te ; return this ; } public void unsetTe ( ) { this . te = null ; } public boolean isSetTe ( ) { return this . te ! = null ; } public void setTeIsSet ( boolean value ) { if ( ! value ) { this . te = null ; } } public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case SUCCESS : if ( value = = null ) { unsetSuccess ( ) ; } else { setSuccess ( ( List < KeySlice > ) value ) ; } break ; case IRE : if ( value = = null ) { unsetIre ( ) ; } else { setIre ( ( InvalidRequestException ) value ) ; } break ; case UE : if ( value = = null ) { unsetUe ( ) ; } else { setUe ( ( UnavailableException ) value ) ; } break ; case TE : if ( value = = null ) { unsetTe ( ) ; } else { setTe ( ( TimedOutException ) value ) ; } break ; } } public Object getFieldValue ( _Fields field ) { switch ( field ) { case SUCCESS : return getSuccess ( ) ; case IRE : return getIre ( ) ; case UE : return getUe ( ) ; case TE : return getTe ( ) ; } throw new IllegalStateException ( ) ; } public boolean isSet ( _Fields field ) { if ( field = = null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case SUCCESS : return isSetSuccess ( ) ; case IRE : return isSetIre ( ) ; case UE : return isSetUe ( ) ; case TE : return isSetTe ( ) ; } throw new IllegalStateException ( ) ; } @Override public boolean equals ( Object that ) { if ( that = = null ) return false ; if ( that instanceof get_indexed_slices_result ) return this . equals ( ( get_indexed_slices_result ) that ) ; return false ; } public boolean equals ( get_indexed_slices_result that ) { if ( that = = null ) return false ; boolean this_present_success = true & & this . isSetSuccess ( ) ; boolean that_present_success = true & & that . isSetSuccess ( ) ; if ( this_present_success | | that_present_success ) { if ( ! ( this_present_success & & that_present_success ) ) return false ; if ( ! this . success . equals ( that . success ) ) return false ; } boolean this_present_ire = true & & this . isSetIre ( ) ; boolean that_present_ire = true & & that . isSetIre ( ) ; if ( this_present_ire | | that_present_ire ) { if ( ! ( this_present_ire & & that_present_ire ) ) return false ; if ( ! this . ire . equals ( that . ire ) ) return false ; } boolean this_present_ue = true & & this . isSetUe ( ) ; boolean that_present_ue = true & & that . isSetUe ( ) ; if ( this_present_ue | | that_present_ue ) { if ( ! ( this_present_ue & & that_present_ue ) ) return false ; if ( ! this . ue . equals ( that . ue ) ) return false ; } boolean this_present_te = true & & this . isSetTe ( ) ; boolean that_present_te = true & & that . isSetTe ( ) ; if ( this_present_te | | that_present_te ) { if ( ! ( this_present_te & & that_present_te ) ) return false ; if ( ! this . te . equals ( that . te ) ) return false ; } return true ; } @Override public int hashCode ( ) { HashCodeBuilder builder = new HashCodeBuilder ( ) ; boolean present_success = true & & ( isSetSuccess ( ) ) ; builder . append ( present_success ) ; if ( present_success ) builder . append ( success ) ; boolean present_ire = true & & ( isSetIre ( ) ) ; builder . append ( present_ire ) ; if ( present_ire ) builder . append ( ire ) ; boolean present_ue = true & & ( isSetUe ( ) ) ; builder . append ( present_ue ) ; if ( present_ue ) builder . append ( ue ) ; boolean present_te = true & & ( isSetTe ( ) ) ; builder . append ( present_te ) ; if ( present_te ) builder . append ( te ) ; return builder . toHashCode ( ) ; } @Override public int compareTo ( get_indexed_slices_result other ) { if ( ! getClass ( ) . equals ( other . getClass ( ) ) ) { return getClass ( ) . getName ( ) . compareTo ( other . getClass ( ) . getName ( ) ) ; } int lastComparison = <int> ; lastComparison = Boolean . valueOf ( isSetSuccess ( ) ) . compareTo ( other . isSetSuccess ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetSuccess ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . success , other . success ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetIre ( ) ) . compareTo ( other . isSetIre ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetIre ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . ire , other . ire ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetUe ( ) ) . compareTo ( other . isSetUe ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetUe ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . ue , other . ue ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetTe ( ) ) . compareTo ( other . isSetTe ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetTe ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . te , other . te ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } return <int> ; } public _Fields fieldForId ( int fieldId ) { return _Fields . findByThriftId ( fieldId ) ; } public void read ( org . apache . thrift . protocol . TProtocol iprot ) throws org . apache . thrift . TException { schemes . get ( iprot . getScheme ( ) ) . getScheme ( ) . read ( iprot , this ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot ) throws org . apache . thrift . TException { schemes . get ( oprot . getScheme ( ) ) . getScheme ( ) . write ( oprot , this ) ; } @Override public String toString ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; boolean first = true ; sb . append ( <str> ) ; if ( this . success = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . success ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . ire = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . ire ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . ue = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . ue ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . te = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . te ) ; } first = false ; sb . append ( <str> ) ; return sb . toString ( ) ; } public void validate ( ) throws org . apache . thrift . TException { } private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { try { write ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( out ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { try { read ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( in ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private static class get_indexed_slices_resultStandardSchemeFactory implements SchemeFactory { public get_indexed_slices_resultStandardScheme getScheme ( ) { return new get_indexed_slices_resultStandardScheme ( ) ; } } private static class get_indexed_slices_resultStandardScheme extends StandardScheme < get_indexed_slices_result > { public void read ( org . apache . thrift . protocol . TProtocol iprot , get_indexed_slices_result struct ) throws org . apache . thrift . TException { org . apache . thrift . protocol . TField schemeField ; iprot . readStructBegin ( ) ; while ( true ) { schemeField = iprot . readFieldBegin ( ) ; if ( schemeField . type = = org . apache . thrift . protocol . TType . STOP ) { break ; } switch ( schemeField . id ) { case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . LIST ) { { org . apache . thrift . protocol . TList _list292 = iprot . readListBegin ( ) ; struct . success = new ArrayList < KeySlice > ( _list292 . size ) ; for ( int _i293 = <int> ; _i293 < _list292 . size ; + + _i293 ) { KeySlice _elem294 ; _elem294 = new KeySlice ( ) ; _elem294 . read ( iprot ) ; struct . success . add ( _elem294 ) ; } iprot . readListEnd ( ) ; } struct . setSuccessIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRUCT ) { struct . ire = new InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRUCT ) { struct . ue = new UnavailableException ( ) ; struct . ue . read ( iprot ) ; struct . setUeIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRUCT ) { struct . te = new TimedOutException ( ) ; struct . te . read ( iprot ) ; struct . setTeIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; default : org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } iprot . readFieldEnd ( ) ; } iprot . readStructEnd ( ) ; struct . validate ( ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot , get_indexed_slices_result struct ) throws org . apache . thrift . TException { struct . validate ( ) ; oprot . writeStructBegin ( STRUCT_DESC ) ; if ( struct . success ! = null ) { oprot . writeFieldBegin ( SUCCESS_FIELD_DESC ) ; { oprot . writeListBegin ( new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , struct . success . size ( ) ) ) ; for ( KeySlice _iter295 : struct . success ) { _iter295 . write ( oprot ) ; } oprot . writeListEnd ( ) ; } oprot . writeFieldEnd ( ) ; } if ( struct . ire ! = null ) { oprot . writeFieldBegin ( IRE_FIELD_DESC ) ; struct . ire . write ( oprot ) ; oprot . writeFieldEnd ( ) ; } if ( struct . ue ! = null ) { oprot . writeFieldBegin ( UE_FIELD_DESC ) ; struct . ue . write ( oprot ) ; oprot . writeFieldEnd ( ) ; } if ( struct . te ! = null ) { oprot . writeFieldBegin ( TE_FIELD_DESC ) ; struct . te . write ( oprot ) ; oprot . writeFieldEnd ( ) ; } oprot . writeFieldStop ( ) ; oprot . writeStructEnd ( ) ; } } private static class get_indexed_slices_resultTupleSchemeFactory implements SchemeFactory { public get_indexed_slices_resultTupleScheme getScheme ( ) { return new get_indexed_slices_resultTupleScheme ( ) ; } } private static class get_indexed_slices_resultTupleScheme extends TupleScheme < get_indexed_slices_result > { @Override public void write ( org . apache . thrift . protocol . TProtocol prot , get_indexed_slices_result struct ) throws org . apache . thrift . TException { TTupleProtocol oprot = ( TTupleProtocol ) prot ; BitSet optionals = new BitSet ( ) ; if ( struct . isSetSuccess ( ) ) { optionals . set ( <int> ) ; } if ( struct . isSetIre ( ) ) { optionals . set ( <int> ) ; } if ( struct . isSetUe ( ) ) { optionals . set ( <int> ) ; } if ( struct . isSetTe ( ) ) { optionals . set ( <int> ) ; } oprot . writeBitSet ( optionals , <int> ) ; if ( struct . isSetSuccess ( ) ) { { oprot . writeI32 ( struct . success . size ( ) ) ; for ( KeySlice _iter296 : struct . success ) { _iter296 . write ( oprot ) ; } } } if ( struct . isSetIre ( ) ) { struct . ire . write ( oprot ) ; } if ( struct . isSetUe ( ) ) { struct . ue . write ( oprot ) ; } if ( struct . isSetTe ( ) ) { struct . te . write ( oprot ) ; } } @Override public void read ( org . apache . thrift . protocol . TProtocol prot , get_indexed_slices_result struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( <int> ) ; if ( incoming . get ( <int> ) ) { { org . apache . thrift . protocol . TList _list297 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRUCT , iprot . readI32 ( ) ) ; struct . success = new ArrayList < KeySlice > ( _list297 . size ) ; for ( int _i298 = <int> ; _i298 < _list297 . size ; + + _i298 ) { KeySlice _elem299 ; _elem299 = new KeySlice ( ) ; _elem299 . read ( iprot ) ; struct . success . add ( _elem299 ) ; } } struct . setSuccessIsSet ( true ) ; } if ( incoming . get ( <int> ) ) { struct . ire = new InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } if ( incoming . get ( <int> ) ) { struct . ue = new UnavailableException ( ) ; struct . ue . read ( iprot ) ; struct . setUeIsSet ( true ) ; } if ( incoming . get ( <int> ) ) { struct . te = new TimedOutException ( ) ; struct . te . read ( iprot ) ; struct . setTeIsSet ( true ) ; } } } } public static class insert_args implements org . apache . thrift . TBase < insert_args , insert_args . _Fields > , java . io . Serializable , Cloneable , Comparable < insert_args > { private static final org . apache . thrift . protocol . TStruct STRUCT_DESC = new org . apache . thrift . protocol . TStruct ( <str> ) ; private static final org . apache . thrift . protocol . TField KEY_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRING , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField COLUMN_PARENT_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRUCT , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField COLUMN_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRUCT , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField CONSISTENCY_LEVEL_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . I32 , ( short ) <int> ) ; private static final Map < Class < ? extends IScheme > , SchemeFactory > schemes = new HashMap < Class < ? extends IScheme > , SchemeFactory > ( ) ; static { schemes . put ( StandardScheme . class , new insert_argsStandardSchemeFactory ( ) ) ; schemes . put ( TupleScheme . class , new insert_argsTupleSchemeFactory ( ) ) ; } public ByteBuffer key ; public ColumnParent column_parent ; public Column column ; public ConsistencyLevel consistency_level ; public enum _Fields implements org . apache . thrift . TFieldIdEnum { KEY ( ( short ) <int> , <str> ) , COLUMN_PARENT ( ( short ) <int> , <str> ) , COLUMN ( ( short ) <int> , <str> ) , CONSISTENCY_LEVEL ( ( short ) <int> , <str> ) ; private static final Map < String , _Fields > byName = new HashMap < String , _Fields > ( ) ; static { for ( _Fields field : EnumSet . allOf ( _Fields . class ) ) { byName . put ( field . getFieldName ( ) , field ) ; } } public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case <int> : return KEY ; case <int> : return COLUMN_PARENT ; case <int> : return COLUMN ; case <int> : return CONSISTENCY_LEVEL ; default : return null ; } } public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields = = null ) throw new IllegalArgumentException ( <str> + fieldId + <str> ) ; return fields ; } public static _Fields findByName ( String name ) { return byName . get ( name ) ; } private final short _thriftId ; private final String _fieldName ; _Fields ( short thriftId , String fieldName ) { _thriftId = thriftId ; _fieldName = fieldName ; } public short getThriftFieldId ( ) { return _thriftId ; } public String getFieldName ( ) { return _fieldName ; } } public static final Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > metaDataMap ; static { Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > tmpMap = new EnumMap < _Fields , org . apache . thrift . meta_data . FieldMetaData > ( _Fields . class ) ; tmpMap . put ( _Fields . KEY , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING , true ) ) ) ; tmpMap . put ( _Fields . COLUMN_PARENT , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . StructMetaData ( org . apache . thrift . protocol . TType . STRUCT , ColumnParent . class ) ) ) ; tmpMap . put ( _Fields . COLUMN , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . StructMetaData ( org . apache . thrift . protocol . TType . STRUCT , Column . class ) ) ) ; tmpMap . put ( _Fields . CONSISTENCY_LEVEL , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . EnumMetaData ( org . apache . thrift . protocol . TType . ENUM , ConsistencyLevel . class ) ) ) ; metaDataMap = Collections . unmodifiableMap ( tmpMap ) ; org . apache . thrift . meta_data . FieldMetaData . addStructMetaDataMap ( insert_args . class , metaDataMap ) ; } public insert_args ( ) { this . consistency_level = org . apache . cassandra . thrift . ConsistencyLevel . ONE ; } public insert_args ( ByteBuffer key , ColumnParent column_parent , Column column , ConsistencyLevel consistency_level ) { this ( ) ; this . key = key ; this . column_parent = column_parent ; this . column = column ; this . consistency_level = consistency_level ; } public insert_args ( insert_args other ) { if ( other . isSetKey ( ) ) { this . key = org . apache . thrift . TBaseHelper . copyBinary ( other . key ) ; ; } if ( other . isSetColumn_parent ( ) ) { this . column_parent = new ColumnParent ( other . column_parent ) ; } if ( other . isSetColumn ( ) ) { this . column = new Column ( other . column ) ; } if ( other . isSetConsistency_level ( ) ) { this . consistency_level = other . consistency_level ; } } public insert_args deepCopy ( ) { return new insert_args ( this ) ; } @Override public void clear ( ) { this . key = null ; this . column_parent = null ; this . column = null ; this . consistency_level = org . apache . cassandra . thrift . ConsistencyLevel . ONE ; } public byte [ ] getKey ( ) { setKey ( org . apache . thrift . TBaseHelper . rightSize ( key ) ) ; return key = = null ? null : key . array ( ) ; } public ByteBuffer bufferForKey ( ) { return key ; } public insert_args setKey ( byte [ ] key ) { setKey ( key = = null ? ( ByteBuffer ) null : ByteBuffer . wrap ( key ) ) ; return this ; } public insert_args setKey ( ByteBuffer key ) { this . key = key ; return this ; } public void unsetKey ( ) { this . key = null ; } public boolean isSetKey ( ) { return this . key ! = null ; } public void setKeyIsSet ( boolean value ) { if ( ! value ) { this . key = null ; } } public ColumnParent getColumn_parent ( ) { return this . column_parent ; } public insert_args setColumn_parent ( ColumnParent column_parent ) { this . column_parent = column_parent ; return this ; } public void unsetColumn_parent ( ) { this . column_parent = null ; } public boolean isSetColumn_parent ( ) { return this . column_parent ! = null ; } public void setColumn_parentIsSet ( boolean value ) { if ( ! value ) { this . column_parent = null ; } } public Column getColumn ( ) { return this . column ; } public insert_args setColumn ( Column column ) { this . column = column ; return this ; } public void unsetColumn ( ) { this . column = null ; } public boolean isSetColumn ( ) { return this . column ! = null ; } public void setColumnIsSet ( boolean value ) { if ( ! value ) { this . column = null ; } } public ConsistencyLevel getConsistency_level ( ) { return this . consistency_level ; } public insert_args setConsistency_level ( ConsistencyLevel consistency_level ) { this . consistency_level = consistency_level ; return this ; } public void unsetConsistency_level ( ) { this . consistency_level = null ; } public boolean isSetConsistency_level ( ) { return this . consistency_level ! = null ; } public void setConsistency_levelIsSet ( boolean value ) { if ( ! value ) { this . consistency_level = null ; } } public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case KEY : if ( value = = null ) { unsetKey ( ) ; } else { setKey ( ( ByteBuffer ) value ) ; } break ; case COLUMN_PARENT : if ( value = = null ) { unsetColumn_parent ( ) ; } else { setColumn_parent ( ( ColumnParent ) value ) ; } break ; case COLUMN : if ( value = = null ) { unsetColumn ( ) ; } else { setColumn ( ( Column ) value ) ; } break ; case CONSISTENCY_LEVEL : if ( value = = null ) { unsetConsistency_level ( ) ; } else { setConsistency_level ( ( ConsistencyLevel ) value ) ; } break ; } } public Object getFieldValue ( _Fields field ) { switch ( field ) { case KEY : return getKey ( ) ; case COLUMN_PARENT : return getColumn_parent ( ) ; case COLUMN : return getColumn ( ) ; case CONSISTENCY_LEVEL : return getConsistency_level ( ) ; } throw new IllegalStateException ( ) ; } public boolean isSet ( _Fields field ) { if ( field = = null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case KEY : return isSetKey ( ) ; case COLUMN_PARENT : return isSetColumn_parent ( ) ; case COLUMN : return isSetColumn ( ) ; case CONSISTENCY_LEVEL : return isSetConsistency_level ( ) ; } throw new IllegalStateException ( ) ; } @Override public boolean equals ( Object that ) { if ( that = = null ) return false ; if ( that instanceof insert_args ) return this . equals ( ( insert_args ) that ) ; return false ; } public boolean equals ( insert_args that ) { if ( that = = null ) return false ; boolean this_present_key = true & & this . isSetKey ( ) ; boolean that_present_key = true & & that . isSetKey ( ) ; if ( this_present_key | | that_present_key ) { if ( ! ( this_present_key & & that_present_key ) ) return false ; if ( ! this . key . equals ( that . key ) ) return false ; } boolean this_present_column_parent = true & & this . isSetColumn_parent ( ) ; boolean that_present_column_parent = true & & that . isSetColumn_parent ( ) ; if ( this_present_column_parent | | that_present_column_parent ) { if ( ! ( this_present_column_parent & & that_present_column_parent ) ) return false ; if ( ! this . column_parent . equals ( that . column_parent ) ) return false ; } boolean this_present_column = true & & this . isSetColumn ( ) ; boolean that_present_column = true & & that . isSetColumn ( ) ; if ( this_present_column | | that_present_column ) { if ( ! ( this_present_column & & that_present_column ) ) return false ; if ( ! this . column . equals ( that . column ) ) return false ; } boolean this_present_consistency_level = true & & this . isSetConsistency_level ( ) ; boolean that_present_consistency_level = true & & that . isSetConsistency_level ( ) ; if ( this_present_consistency_level | | that_present_consistency_level ) { if ( ! ( this_present_consistency_level & & that_present_consistency_level ) ) return false ; if ( ! this . consistency_level . equals ( that . consistency_level ) ) return false ; } return true ; } @Override public int hashCode ( ) { HashCodeBuilder builder = new HashCodeBuilder ( ) ; boolean present_key = true & & ( isSetKey ( ) ) ; builder . append ( present_key ) ; if ( present_key ) builder . append ( key ) ; boolean present_column_parent = true & & ( isSetColumn_parent ( ) ) ; builder . append ( present_column_parent ) ; if ( present_column_parent ) builder . append ( column_parent ) ; boolean present_column = true & & ( isSetColumn ( ) ) ; builder . append ( present_column ) ; if ( present_column ) builder . append ( column ) ; boolean present_consistency_level = true & & ( isSetConsistency_level ( ) ) ; builder . append ( present_consistency_level ) ; if ( present_consistency_level ) builder . append ( consistency_level . getValue ( ) ) ; return builder . toHashCode ( ) ; } @Override public int compareTo ( insert_args other ) { if ( ! getClass ( ) . equals ( other . getClass ( ) ) ) { return getClass ( ) . getName ( ) . compareTo ( other . getClass ( ) . getName ( ) ) ; } int lastComparison = <int> ; lastComparison = Boolean . valueOf ( isSetKey ( ) ) . compareTo ( other . isSetKey ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetKey ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . key , other . key ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetColumn_parent ( ) ) . compareTo ( other . isSetColumn_parent ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetColumn_parent ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . column_parent , other . column_parent ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetColumn ( ) ) . compareTo ( other . isSetColumn ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetColumn ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . column , other . column ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetConsistency_level ( ) ) . compareTo ( other . isSetConsistency_level ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetConsistency_level ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . consistency_level , other . consistency_level ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } return <int> ; } public _Fields fieldForId ( int fieldId ) { return _Fields . findByThriftId ( fieldId ) ; } public void read ( org . apache . thrift . protocol . TProtocol iprot ) throws org . apache . thrift . TException { schemes . get ( iprot . getScheme ( ) ) . getScheme ( ) . read ( iprot , this ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot ) throws org . apache . thrift . TException { schemes . get ( oprot . getScheme ( ) ) . getScheme ( ) . write ( oprot , this ) ; } @Override public String toString ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; boolean first = true ; sb . append ( <str> ) ; if ( this . key = = null ) { sb . append ( <str> ) ; } else { org . apache . thrift . TBaseHelper . toString ( this . key , sb ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . column_parent = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . column_parent ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . column = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . column ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . consistency_level = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . consistency_level ) ; } first = false ; sb . append ( <str> ) ; return sb . toString ( ) ; } public void validate ( ) throws org . apache . thrift . TException { if ( key = = null ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } if ( column_parent = = null ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } if ( column = = null ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } if ( consistency_level = = null ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } if ( column_parent ! = null ) { column_parent . validate ( ) ; } if ( column ! = null ) { column . validate ( ) ; } } private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { try { write ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( out ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { try { read ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( in ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private static class insert_argsStandardSchemeFactory implements SchemeFactory { public insert_argsStandardScheme getScheme ( ) { return new insert_argsStandardScheme ( ) ; } } private static class insert_argsStandardScheme extends StandardScheme < insert_args > { public void read ( org . apache . thrift . protocol . TProtocol iprot , insert_args struct ) throws org . apache . thrift . TException { org . apache . thrift . protocol . TField schemeField ; iprot . readStructBegin ( ) ; while ( true ) { schemeField = iprot . readFieldBegin ( ) ; if ( schemeField . type = = org . apache . thrift . protocol . TType . STOP ) { break ; } switch ( schemeField . id ) { case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRING ) { struct . key = iprot . readBinary ( ) ; struct . setKeyIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRUCT ) { struct . column_parent = new ColumnParent ( ) ; struct . column_parent . read ( iprot ) ; struct . setColumn_parentIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRUCT ) { struct . column = new Column ( ) ; struct . column . read ( iprot ) ; struct . setColumnIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . I32 ) { struct . consistency_level = ConsistencyLevel . findByValue ( iprot . readI32 ( ) ) ; struct . setConsistency_levelIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; default : org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } iprot . readFieldEnd ( ) ; } iprot . readStructEnd ( ) ; struct . validate ( ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot , insert_args struct ) throws org . apache . thrift . TException { struct . validate ( ) ; oprot . writeStructBegin ( STRUCT_DESC ) ; if ( struct . key ! = null ) { oprot . writeFieldBegin ( KEY_FIELD_DESC ) ; oprot . writeBinary ( struct . key ) ; oprot . writeFieldEnd ( ) ; } if ( struct . column_parent ! = null ) { oprot . writeFieldBegin ( COLUMN_PARENT_FIELD_DESC ) ; struct . column_parent . write ( oprot ) ; oprot . writeFieldEnd ( ) ; } if ( struct . column ! = null ) { oprot . writeFieldBegin ( COLUMN_FIELD_DESC ) ; struct . column . write ( oprot ) ; oprot . writeFieldEnd ( ) ; } if ( struct . consistency_level ! = null ) { oprot . writeFieldBegin ( CONSISTENCY_LEVEL_FIELD_DESC ) ; oprot . writeI32 ( struct . consistency_level . getValue ( ) ) ; oprot . writeFieldEnd ( ) ; } oprot . writeFieldStop ( ) ; oprot . writeStructEnd ( ) ; } } private static class insert_argsTupleSchemeFactory implements SchemeFactory { public insert_argsTupleScheme getScheme ( ) { return new insert_argsTupleScheme ( ) ; } } private static class insert_argsTupleScheme extends TupleScheme < insert_args > { @Override public void write ( org . apache . thrift . protocol . TProtocol prot , insert_args struct ) throws org . apache . thrift . TException { TTupleProtocol oprot = ( TTupleProtocol ) prot ; oprot . writeBinary ( struct . key ) ; struct . column_parent . write ( oprot ) ; struct . column . write ( oprot ) ; oprot . writeI32 ( struct . consistency_level . getValue ( ) ) ; } @Override public void read ( org . apache . thrift . protocol . TProtocol prot , insert_args struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . key = iprot . readBinary ( ) ; struct . setKeyIsSet ( true ) ; struct . column_parent = new ColumnParent ( ) ; struct . column_parent . read ( iprot ) ; struct . setColumn_parentIsSet ( true ) ; struct . column = new Column ( ) ; struct . column . read ( iprot ) ; struct . setColumnIsSet ( true ) ; struct . consistency_level = ConsistencyLevel . findByValue ( iprot . readI32 ( ) ) ; struct . setConsistency_levelIsSet ( true ) ; } } } public static class insert_result implements org . apache . thrift . TBase < insert_result , insert_result . _Fields > , java . io . Serializable , Cloneable , Comparable < insert_result > { private static final org . apache . thrift . protocol . TStruct STRUCT_DESC = new org . apache . thrift . protocol . TStruct ( <str> ) ; private static final org . apache . thrift . protocol . TField IRE_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRUCT , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField UE_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRUCT , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField TE_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRUCT , ( short ) <int> ) ; private static final Map < Class < ? extends IScheme > , SchemeFactory > schemes = new HashMap < Class < ? extends IScheme > , SchemeFactory > ( ) ; static { schemes . put ( StandardScheme . class , new insert_resultStandardSchemeFactory ( ) ) ; schemes . put ( TupleScheme . class , new insert_resultTupleSchemeFactory ( ) ) ; } public InvalidRequestException ire ; public UnavailableException ue ; public TimedOutException te ; public enum _Fields implements org . apache . thrift . TFieldIdEnum { IRE ( ( short ) <int> , <str> ) , UE ( ( short ) <int> , <str> ) , TE ( ( short ) <int> , <str> ) ; private static final Map < String , _Fields > byName = new HashMap < String , _Fields > ( ) ; static { for ( _Fields field : EnumSet . allOf ( _Fields . class ) ) { byName . put ( field . getFieldName ( ) , field ) ; } } public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case <int> : return IRE ; case <int> : return UE ; case <int> : return TE ; default : return null ; } } public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields = = null ) throw new IllegalArgumentException ( <str> + fieldId + <str> ) ; return fields ; } public static _Fields findByName ( String name ) { return byName . get ( name ) ; } private final short _thriftId ; private final String _fieldName ; _Fields ( short thriftId , String fieldName ) { _thriftId = thriftId ; _fieldName = fieldName ; } public short getThriftFieldId ( ) { return _thriftId ; } public String getFieldName ( ) { return _fieldName ; } } public static final Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > metaDataMap ; static { Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > tmpMap = new EnumMap < _Fields , org . apache . thrift . meta_data . FieldMetaData > ( _Fields . class ) ; tmpMap . put ( _Fields . IRE , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . DEFAULT , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRUCT ) ) ) ; tmpMap . put ( _Fields . UE , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . DEFAULT , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRUCT ) ) ) ; tmpMap . put ( _Fields . TE , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . DEFAULT , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRUCT ) ) ) ; metaDataMap = Collections . unmodifiableMap ( tmpMap ) ; org . apache . thrift . meta_data . FieldMetaData . addStructMetaDataMap ( insert_result . class , metaDataMap ) ; } public insert_result ( ) { } public insert_result ( InvalidRequestException ire , UnavailableException ue , TimedOutException te ) { this ( ) ; this . ire = ire ; this . ue = ue ; this . te = te ; } public insert_result ( insert_result other ) { if ( other . isSetIre ( ) ) { this . ire = new InvalidRequestException ( other . ire ) ; } if ( other . isSetUe ( ) ) { this . ue = new UnavailableException ( other . ue ) ; } if ( other . isSetTe ( ) ) { this . te = new TimedOutException ( other . te ) ; } } public insert_result deepCopy ( ) { return new insert_result ( this ) ; } @Override public void clear ( ) { this . ire = null ; this . ue = null ; this . te = null ; } public InvalidRequestException getIre ( ) { return this . ire ; } public insert_result setIre ( InvalidRequestException ire ) { this . ire = ire ; return this ; } public void unsetIre ( ) { this . ire = null ; } public boolean isSetIre ( ) { return this . ire ! = null ; } public void setIreIsSet ( boolean value ) { if ( ! value ) { this . ire = null ; } } public UnavailableException getUe ( ) { return this . ue ; } public insert_result setUe ( UnavailableException ue ) { this . ue = ue ; return this ; } public void unsetUe ( ) { this . ue = null ; } public boolean isSetUe ( ) { return this . ue ! = null ; } public void setUeIsSet ( boolean value ) { if ( ! value ) { this . ue = null ; } } public TimedOutException getTe ( ) { return this . te ; } public insert_result setTe ( TimedOutException te ) { this . te = te ; return this ; } public void unsetTe ( ) { this . te = null ; } public boolean isSetTe ( ) { return this . te ! = null ; } public void setTeIsSet ( boolean value ) { if ( ! value ) { this . te = null ; } } public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case IRE : if ( value = = null ) { unsetIre ( ) ; } else { setIre ( ( InvalidRequestException ) value ) ; } break ; case UE : if ( value = = null ) { unsetUe ( ) ; } else { setUe ( ( UnavailableException ) value ) ; } break ; case TE : if ( value = = null ) { unsetTe ( ) ; } else { setTe ( ( TimedOutException ) value ) ; } break ; } } public Object getFieldValue ( _Fields field ) { switch ( field ) { case IRE : return getIre ( ) ; case UE : return getUe ( ) ; case TE : return getTe ( ) ; } throw new IllegalStateException ( ) ; } public boolean isSet ( _Fields field ) { if ( field = = null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case IRE : return isSetIre ( ) ; case UE : return isSetUe ( ) ; case TE : return isSetTe ( ) ; } throw new IllegalStateException ( ) ; } @Override public boolean equals ( Object that ) { if ( that = = null ) return false ; if ( that instanceof insert_result ) return this . equals ( ( insert_result ) that ) ; return false ; } public boolean equals ( insert_result that ) { if ( that = = null ) return false ; boolean this_present_ire = true & & this . isSetIre ( ) ; boolean that_present_ire = true & & that . isSetIre ( ) ; if ( this_present_ire | | that_present_ire ) { if ( ! ( this_present_ire & & that_present_ire ) ) return false ; if ( ! this . ire . equals ( that . ire ) ) return false ; } boolean this_present_ue = true & & this . isSetUe ( ) ; boolean that_present_ue = true & & that . isSetUe ( ) ; if ( this_present_ue | | that_present_ue ) { if ( ! ( this_present_ue & & that_present_ue ) ) return false ; if ( ! this . ue . equals ( that . ue ) ) return false ; } boolean this_present_te = true & & this . isSetTe ( ) ; boolean that_present_te = true & & that . isSetTe ( ) ; if ( this_present_te | | that_present_te ) { if ( ! ( this_present_te & & that_present_te ) ) return false ; if ( ! this . te . equals ( that . te ) ) return false ; } return true ; } @Override public int hashCode ( ) { HashCodeBuilder builder = new HashCodeBuilder ( ) ; boolean present_ire = true & & ( isSetIre ( ) ) ; builder . append ( present_ire ) ; if ( present_ire ) builder . append ( ire ) ; boolean present_ue = true & & ( isSetUe ( ) ) ; builder . append ( present_ue ) ; if ( present_ue ) builder . append ( ue ) ; boolean present_te = true & & ( isSetTe ( ) ) ; builder . append ( present_te ) ; if ( present_te ) builder . append ( te ) ; return builder . toHashCode ( ) ; } @Override public int compareTo ( insert_result other ) { if ( ! getClass ( ) . equals ( other . getClass ( ) ) ) { return getClass ( ) . getName ( ) . compareTo ( other . getClass ( ) . getName ( ) ) ; } int lastComparison = <int> ; lastComparison = Boolean . valueOf ( isSetIre ( ) ) . compareTo ( other . isSetIre ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetIre ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . ire , other . ire ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetUe ( ) ) . compareTo ( other . isSetUe ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetUe ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . ue , other . ue ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetTe ( ) ) . compareTo ( other . isSetTe ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetTe ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . te , other . te ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } return <int> ; } public _Fields fieldForId ( int fieldId ) { return _Fields . findByThriftId ( fieldId ) ; } public void read ( org . apache . thrift . protocol . TProtocol iprot ) throws org . apache . thrift . TException { schemes . get ( iprot . getScheme ( ) ) . getScheme ( ) . read ( iprot , this ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot ) throws org . apache . thrift . TException { schemes . get ( oprot . getScheme ( ) ) . getScheme ( ) . write ( oprot , this ) ; } @Override public String toString ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; boolean first = true ; sb . append ( <str> ) ; if ( this . ire = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . ire ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . ue = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . ue ) ; } first = false ; if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . te = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . te ) ; } first = false ; sb . append ( <str> ) ; return sb . toString ( ) ; } public void validate ( ) throws org . apache . thrift . TException { } private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { try { write ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( out ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { try { read ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( in ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private static class insert_resultStandardSchemeFactory implements SchemeFactory { public insert_resultStandardScheme getScheme ( ) { return new insert_resultStandardScheme ( ) ; } } private static class insert_resultStandardScheme extends StandardScheme < insert_result > { public void read ( org . apache . thrift . protocol . TProtocol iprot , insert_result struct ) throws org . apache . thrift . TException { org . apache . thrift . protocol . TField schemeField ; iprot . readStructBegin ( ) ; while ( true ) { schemeField = iprot . readFieldBegin ( ) ; if ( schemeField . type = = org . apache . thrift . protocol . TType . STOP ) { break ; } switch ( schemeField . id ) { case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRUCT ) { struct . ire = new InvalidRequestException ( ) ; struct . ire . read ( iprot ) ; struct . setIreIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRUCT ) { struct . ue = new UnavailableException ( ) ; struct . ue . read ( iprot ) ; struct . setUeIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRUCT ) { struct . te = new TimedOutException ( ) ; struct . te . read ( iprot ) ; struct . setTeIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; default : 

package org . elasticsearch . index . search . nested ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . StringField ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexableField ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . FieldDoc ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . Sort ; import org . apache . lucene . search . SortField ; import org . apache . lucene . search . TermQuery ; import org . apache . lucene . search . TopDocs ; import org . apache . lucene . search . TopFieldDocs ; import org . apache . lucene . search . join . QueryBitSetProducer ; import org . apache . lucene . search . join . ScoreMode ; import org . apache . lucene . search . join . ToParentBlockJoinQuery ; import org . elasticsearch . common . lucene . search . Queries ; import org . elasticsearch . index . fielddata . AbstractFieldDataTestCase ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource ; import org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource . Nested ; import org . elasticsearch . search . MultiValueMode ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import static org . hamcrest . Matchers . equalTo ; public abstract class AbstractNumberNestedSortingTestCase extends AbstractFieldDataTestCase { @Override protected boolean hasDocValues ( ) { return true ; } public void testNestedSorting ( ) throws Exception { List < Document > docs = new ArrayList < > ( ) ; Document document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( createField ( <str> , <int> ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; writer . commit ( ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( createField ( <str> , <int> ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( createField ( <str> , <int> ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( createField ( <str> , <int> ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; writer . commit ( ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( createField ( <str> , <int> ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; writer . commit ( ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( createField ( <str> , <int> ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; writer . commit ( ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( createField ( <str> , <int> ) ) ; writer . addDocument ( document ) ; writer . commit ( ) ; docs . clear ( ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( createField ( <str> , <int> ) ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; docs . add ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; document . add ( createField ( <str> , <int> ) ) ; docs . add ( document ) ; writer . addDocuments ( docs ) ; writer . commit ( ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( document ) ; document = new Document ( ) ; document . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( document ) ; MultiValueMode sortMode = MultiValueMode . SUM ; IndexSearcher searcher = new IndexSearcher ( DirectoryReader . open ( writer , false ) ) ; Query parentFilter = new TermQuery ( new Term ( <str> , <str> ) ) ; Query childFilter = Queries . not ( parentFilter ) ; XFieldComparatorSource nestedComparatorSource = createFieldComparator ( <str> , sortMode , null , createNested ( searcher , parentFilter , childFilter ) ) ; ToParentBlockJoinQuery query = new ToParentBlockJoinQuery ( new ConstantScoreQuery ( childFilter ) , new QueryBitSetProducer ( parentFilter ) , ScoreMode . None ) ; Sort sort = new Sort ( new SortField ( <str> , nestedComparatorSource ) ) ; TopFieldDocs topDocs = searcher . search ( query , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; sort = new Sort ( new SortField ( <str> , nestedComparatorSource , true ) ) ; topDocs = searcher . search ( query , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; childFilter = new TermQuery ( new Term ( <str> , <str> ) ) ; nestedComparatorSource = createFieldComparator ( <str> , sortMode , null , createNested ( searcher , parentFilter , childFilter ) ) ; query = new ToParentBlockJoinQuery ( new ConstantScoreQuery ( childFilter ) , new QueryBitSetProducer ( parentFilter ) , ScoreMode . None ) ; sort = new Sort ( new SortField ( <str> , nestedComparatorSource , true ) ) ; topDocs = searcher . search ( query , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; sort = new Sort ( new SortField ( <str> , nestedComparatorSource ) ) ; topDocs = searcher . search ( query , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; nestedComparatorSource = createFieldComparator ( <str> , sortMode , <int> , createNested ( searcher , parentFilter , childFilter ) ) ; sort = new Sort ( new SortField ( <str> , nestedComparatorSource , true ) ) ; topDocs = searcher . search ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; nestedComparatorSource = createFieldComparator ( <str> , sortMode , - <int> , createNested ( searcher , parentFilter , childFilter ) ) ; sort = new Sort ( new SortField ( <str> , nestedComparatorSource ) ) ; topDocs = searcher . search ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( - <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( - <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertAvgScoreMode ( parentFilter , searcher ) ; searcher . getIndexReader ( ) . close ( ) ; } protected void assertAvgScoreMode ( Query parentFilter , IndexSearcher searcher ) throws IOException { MultiValueMode sortMode = MultiValueMode . AVG ; Query childFilter = Queries . not ( parentFilter ) ; XFieldComparatorSource nestedComparatorSource = createFieldComparator ( <str> , sortMode , - <int> , createNested ( searcher , parentFilter , childFilter ) ) ; Query query = new ToParentBlockJoinQuery ( new ConstantScoreQuery ( childFilter ) , new QueryBitSetProducer ( parentFilter ) , ScoreMode . None ) ; Sort sort = new Sort ( new SortField ( <str> , nestedComparatorSource ) ) ; TopDocs topDocs = searcher . search ( query , <int> , sort ) ; assertThat ( topDocs . totalHits , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs . length , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( topDocs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( ( ( Number ) ( ( FieldDoc ) topDocs . scoreDocs [ <int> ] ) . fields [ <int> ] ) . intValue ( ) , equalTo ( <int> ) ) ; } protected abstract IndexableField createField ( String name , int value ) ; protected abstract IndexFieldData . XFieldComparatorSource createFieldComparator ( String fieldName , MultiValueMode sortMode , Object missingValue , Nested nested ) ; } 

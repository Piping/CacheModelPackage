package rx . internal . operators ; import java . util . Arrays ; import rx . * ; import rx . Observable . Operator ; import rx . exceptions . * ; public class OperatorDoOnEach < T > implements Operator < T , T > { private final Observer < ? super T > doOnEachObserver ; public OperatorDoOnEach ( Observer < ? super T > doOnEachObserver ) { this . doOnEachObserver = doOnEachObserver ; } @Override public Subscriber < ? super T > call ( final Subscriber < ? super T > observer ) { return new Subscriber < T > ( observer ) { private boolean done = false ; @Override public void onCompleted ( ) { if ( done ) { return ; } try { doOnEachObserver . onCompleted ( ) ; } catch ( Throwable e ) { Exceptions . throwOrReport ( e , this ) ; return ; } done = true ; observer . onCompleted ( ) ; } @Override public void onError ( Throwable e ) { Exceptions . throwIfFatal ( e ) ; if ( done ) { return ; } done = true ; try { doOnEachObserver . onError ( e ) ; } catch ( Throwable e2 ) { Exceptions . throwIfFatal ( e2 ) ; observer . onError ( new CompositeException ( Arrays . asList ( e , e2 ) ) ) ; return ; } observer . onError ( e ) ; } @Override public void onNext ( T value ) { if ( done ) { return ; } try { doOnEachObserver . onNext ( value ) ; } catch ( Throwable e ) { Exceptions . throwOrReport ( e , this , value ) ; return ; } observer . onNext ( value ) ; } } ; } } 

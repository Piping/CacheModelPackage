package org . apache . cassandra . metrics ; import java . io . IOException ; import java . util . Set ; import java . util . concurrent . ThreadPoolExecutor ; import com . codahale . metrics . Counter ; import com . codahale . metrics . Gauge ; import com . codahale . metrics . JmxReporter ; import javax . management . JMX ; import javax . management . MBeanServerConnection ; import javax . management . MalformedObjectNameException ; import javax . management . ObjectName ; import com . google . common . collect . HashMultimap ; import com . google . common . collect . Multimap ; import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; public class ThreadPoolMetrics { public final Gauge < Integer > activeTasks ; public final Counter totalBlocked ; public final Counter currentBlocked ; public final Gauge < Long > completedTasks ; public final Gauge < Long > pendingTasks ; public final Gauge < Integer > maxPoolSize ; private MetricNameFactory factory ; public ThreadPoolMetrics ( final ThreadPoolExecutor executor , String path , String poolName ) { this . factory = new ThreadPoolMetricNameFactory ( <str> , path , poolName ) ; activeTasks = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Integer > ( ) { public Integer getValue ( ) { return executor . getActiveCount ( ) ; } } ) ; totalBlocked = Metrics . counter ( factory . createMetricName ( <str> ) ) ; currentBlocked = Metrics . counter ( factory . createMetricName ( <str> ) ) ; completedTasks = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Long > ( ) { public Long getValue ( ) { return executor . getCompletedTaskCount ( ) ; } } ) ; pendingTasks = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Long > ( ) { public Long getValue ( ) { return executor . getTaskCount ( ) - executor . getCompletedTaskCount ( ) ; } } ) ; maxPoolSize = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Integer > ( ) { public Integer getValue ( ) { return executor . getMaximumPoolSize ( ) ; } } ) ; } public void release ( ) { Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; } public static Object getJmxMetric ( MBeanServerConnection mbeanServerConn , String jmxPath , String poolName , String metricName ) { String name = String . format ( <str> , jmxPath , poolName , metricName ) ; try { ObjectName oName = new ObjectName ( name ) ; if ( ! mbeanServerConn . isRegistered ( oName ) ) { return <str> ; } switch ( metricName ) { case <str> : case <str> : case <str> : return JMX . newMBeanProxy ( mbeanServerConn , oName , JmxReporter . JmxGaugeMBean . class ) . getValue ( ) ; case <str> : case <str> : return JMX . newMBeanProxy ( mbeanServerConn , oName , JmxReporter . JmxCounterMBean . class ) . getCount ( ) ; default : throw new AssertionError ( <str> + metricName ) ; } } catch ( Exception e ) { throw new RuntimeException ( <str> + name , e ) ; } } public static Multimap < String , String > getJmxThreadPools ( MBeanServerConnection mbeanServerConn ) { try { Multimap < String , String > threadPools = HashMultimap . create ( ) ; Set < ObjectName > threadPoolObjectNames = mbeanServerConn . queryNames ( new ObjectName ( <str> ) , null ) ; for ( ObjectName oName : threadPoolObjectNames ) { threadPools . put ( oName . getKeyProperty ( <str> ) , oName . getKeyProperty ( <str> ) ) ; } return threadPools ; } catch ( MalformedObjectNameException e ) { throw new RuntimeException ( <str> , e ) ; } catch ( IOException e ) { throw new RuntimeException ( <str> , e ) ; } } }
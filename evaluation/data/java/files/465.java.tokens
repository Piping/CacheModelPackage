package org . gradle . nativeplatform . toolchain . internal . gcc ; import org . gradle . api . GradleException ; import org . gradle . api . internal . tasks . SimpleWorkResult ; import org . gradle . api . tasks . WorkResult ; import org . gradle . internal . operations . BuildOperationProcessor ; import org . gradle . internal . operations . BuildOperationQueue ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . nativeplatform . internal . StaticLibraryArchiverSpec ; import org . gradle . nativeplatform . toolchain . internal . ArgsTransformer ; import org . gradle . nativeplatform . toolchain . internal . CommandLineToolContext ; import org . gradle . nativeplatform . toolchain . internal . CommandLineToolInvocation ; import org . gradle . nativeplatform . toolchain . internal . CommandLineToolInvocationWorker ; import java . io . File ; import java . util . ArrayList ; import java . util . List ; class ArStaticLibraryArchiver implements Compiler < StaticLibraryArchiverSpec > { private final CommandLineToolInvocationWorker commandLineToolInvocationWorker ; private final ArgsTransformer < StaticLibraryArchiverSpec > argsTransformer = new ArchiverSpecToArguments ( ) ; private final CommandLineToolContext invocationContext ; private final BuildOperationProcessor buildOperationProcessor ; ArStaticLibraryArchiver ( BuildOperationProcessor buildOperationProcessor , CommandLineToolInvocationWorker commandLineToolInvocationWorker , CommandLineToolContext invocationContext ) { this . buildOperationProcessor = buildOperationProcessor ; this . commandLineToolInvocationWorker = commandLineToolInvocationWorker ; this . invocationContext = invocationContext ; } public WorkResult execute ( StaticLibraryArchiverSpec spec ) { deletePreviousOutput ( spec ) ; BuildOperationQueue < CommandLineToolInvocation > queue = buildOperationProcessor . newQueue ( commandLineToolInvocationWorker , spec . getOperationLogger ( ) . getLogLocation ( ) ) ; List < String > args = argsTransformer . transform ( spec ) ; invocationContext . getArgAction ( ) . execute ( args ) ; CommandLineToolInvocation invocation = invocationContext . createInvocation ( String . format ( <str> , spec . getOutputFile ( ) . getName ( ) ) , args , spec . getOperationLogger ( ) ) ; queue . add ( invocation ) ; queue . waitForCompletion ( ) ; return new SimpleWorkResult ( true ) ; } private void deletePreviousOutput ( StaticLibraryArchiverSpec spec ) { if ( ! spec . getOutputFile ( ) . isFile ( ) ) { return ; } if ( ! ( spec . getOutputFile ( ) . delete ( ) ) ) { throw new GradleException ( <str> ) ; } } private static class ArchiverSpecToArguments implements ArgsTransformer < StaticLibraryArchiverSpec > { public List < String > transform ( StaticLibraryArchiverSpec spec ) { List < String > args = new ArrayList < String > ( ) ; args . add ( <str> ) ; args . addAll ( spec . getAllArgs ( ) ) ; args . add ( spec . getOutputFile ( ) . getAbsolutePath ( ) ) ; for ( File file : spec . getObjectFiles ( ) ) { args . add ( file . getAbsolutePath ( ) ) ; } return args ; } } } 

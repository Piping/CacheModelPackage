package com . google . common . collect ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Equivalence ; import com . google . common . base . Function ; import com . google . common . collect . MapMakerInternalMap . ReferenceEntry ; import java . util . concurrent . ConcurrentMap ; @Beta public final class Interners { private Interners ( ) { } public static < E > Interner < E > newStrongInterner ( ) { final ConcurrentMap < E , E > map = new MapMaker ( ) . makeMap ( ) ; return new Interner < E > ( ) { @Override public E intern ( E sample ) { E canonical = map . putIfAbsent ( checkNotNull ( sample ) , sample ) ; return ( canonical = = null ) ? sample : canonical ; } } ; } @GwtIncompatible ( <str> ) public static < E > Interner < E > newWeakInterner ( ) { return new WeakInterner < E > ( ) ; } private static class WeakInterner < E > implements Interner < E > { private final MapMakerInternalMap < E , Dummy > map = new MapMaker ( ) . weakKeys ( ) . keyEquivalence ( Equivalence . equals ( ) ) . makeCustomMap ( ) ; @Override public E intern ( E sample ) { while ( true ) { ReferenceEntry < E , Dummy > entry = map . getEntry ( sample ) ; if ( entry ! = null ) { E canonical = entry . getKey ( ) ; if ( canonical ! = null ) { return canonical ; } } Dummy sneaky = map . putIfAbsent ( sample , Dummy . VALUE ) ; if ( sneaky = = null ) { return sample ; } else { } } } private enum Dummy { VALUE } } public static < E > Function < E , E > asFunction ( Interner < E > interner ) { return new InternerFunction < E > ( checkNotNull ( interner ) ) ; } private static class InternerFunction < E > implements Function < E , E > { private final Interner < E > interner ; public InternerFunction ( Interner < E > interner ) { this . interner = interner ; } @Override public E apply ( E input ) { return interner . intern ( input ) ; } @Override public int hashCode ( ) { return interner . hashCode ( ) ; } @Override public boolean equals ( Object other ) { if ( other instanceof InternerFunction ) { InternerFunction < ? > that = ( InternerFunction < ? > ) other ; return interner . equals ( that . interner ) ; } return false ; } } } 

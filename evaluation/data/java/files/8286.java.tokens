package org . eclipse . debug . internal . ui . views . console ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . commands . ITerminateHandler ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IProcess ; import org . eclipse . debug . core . model . ITerminate ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . commands . actions . DebugCommandService ; import org . eclipse . jface . action . Action ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . texteditor . IUpdate ; public class ConsoleTerminateAction extends Action implements IUpdate { private ProcessConsole fConsole ; private IWorkbenchWindow fWindow ; public ConsoleTerminateAction ( IWorkbenchWindow window , ProcessConsole console ) { super ( ConsoleMessages . ConsoleTerminateAction_0 ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugHelpContextIds . CONSOLE_TERMINATE_ACTION ) ; fConsole = console ; fWindow = window ; setToolTipText ( ConsoleMessages . ConsoleTerminateAction_1 ) ; setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_LCL_TERMINATE ) ) ; setDisabledImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_TERMINATE ) ) ; setHoverImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_LCL_TERMINATE ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugHelpContextIds . CONSOLE_TERMINATE_ACTION ) ; update ( ) ; } @Override public void update ( ) { IProcess process = fConsole . getProcess ( ) ; setEnabled ( process . canTerminate ( ) ) ; } @Override public void run ( ) { IProcess process = fConsole . getProcess ( ) ; List < ITerminate > targets = collectTargets ( process ) ; targets . add ( process ) ; DebugCommandService service = DebugCommandService . getService ( fWindow ) ; service . executeCommand ( ITerminateHandler . class , targets . toArray ( ) , null ) ; } private List < ITerminate > collectTargets ( IProcess process ) { ILaunchManager launchManager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; ILaunch [ ] launches = launchManager . getLaunches ( ) ; List < ITerminate > targets = new ArrayList < ITerminate > ( ) ; for ( int i = <int> ; i < launches . length ; i + + ) { ILaunch launch = launches [ i ] ; IProcess [ ] processes = launch . getProcesses ( ) ; for ( int j = <int> ; j < processes . length ; j + + ) { IProcess process2 = processes [ j ] ; if ( process2 . equals ( process ) ) { IDebugTarget [ ] debugTargets = launch . getDebugTargets ( ) ; for ( int k = <int> ; k < debugTargets . length ; k + + ) { targets . add ( debugTargets [ k ] ) ; } return targets ; } } } return targets ; } public void dispose ( ) { fConsole = null ; } }
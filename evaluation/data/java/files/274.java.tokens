package org . gradle . integtests . fixtures . jvm ; import org . gradle . api . JavaVersion ; import java . io . BufferedReader ; import java . io . File ; import java . io . IOException ; import java . io . Reader ; import java . util . ArrayList ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; class OsXJavaHomeParser { private static final Pattern NEW_FORMAT_PATTERN = Pattern . compile ( <str> ) ; private static final Pattern OLD_FORMAT_PATTERN = Pattern . compile ( <str> ) ; public List < JvmInstallation > parse ( Reader output ) throws IOException { ArrayList < JvmInstallation > result = new ArrayList < JvmInstallation > ( ) ; BufferedReader reader = new BufferedReader ( output ) ; for ( String line = reader . readLine ( ) ; line ! = null ; line = reader . readLine ( ) ) { Matcher matcher = NEW_FORMAT_PATTERN . matcher ( line ) ; if ( matcher . matches ( ) ) { String version = matcher . group ( <int> ) ; String arch = matcher . group ( <int> ) ; String javaHome = matcher . group ( <int> ) ; result . add ( new JvmInstallation ( JavaVersion . toVersion ( version ) , version , new File ( javaHome ) , true , toArch ( arch ) ) ) ; } else { matcher = OLD_FORMAT_PATTERN . matcher ( line ) ; if ( matcher . matches ( ) ) { String version = matcher . group ( <int> ) ; String arch = matcher . group ( <int> ) ; String javaHome = matcher . group ( <int> ) ; result . add ( new JvmInstallation ( JavaVersion . toVersion ( version ) , version , new File ( javaHome ) , true , toArch ( arch ) ) ) ; } } } return result ; } private JvmInstallation . Arch toArch ( String arch ) { if ( arch . equals ( <str> ) ) { return JvmInstallation . Arch . i386 ; } else if ( arch . equals ( <str> ) ) { return JvmInstallation . Arch . x86_64 ; } return JvmInstallation . Arch . Unknown ; } } 

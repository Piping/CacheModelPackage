package com . badlogic . gdx . tests . bullet ; import javax . print . attribute . standard . DateTimeAtCompleted ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . physics . bullet . collision . ContactCache ; import com . badlogic . gdx . physics . bullet . collision . ContactListener ; import com . badlogic . gdx . physics . bullet . collision . btBvhTriangleMeshShape ; import com . badlogic . gdx . physics . bullet . collision . btCollisionObject ; import com . badlogic . gdx . physics . bullet . collision . btPersistentManifold ; import com . badlogic . gdx . physics . bullet . collision . btSphereShape ; import com . badlogic . gdx . tests . bullet . ContactCallbackTest2 . TestContactListener ; import com . badlogic . gdx . utils . Array ; public class ContactCacheTest extends BaseBulletTest { public static class TestContactListener extends ContactListener { public Array < BulletEntity > entities ; @Override public void onContactStarted ( int userValue0 , boolean match0 , int userValue1 , boolean match1 ) { if ( match0 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue0 ) ) ; e . setColor ( Color . RED ) ; Gdx . app . log ( Float . toString ( time ) , <str> + userValue0 ) ; } if ( match1 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue1 ) ) ; e . setColor ( Color . RED ) ; Gdx . app . log ( Float . toString ( time ) , <str> + userValue1 ) ; } } @Override public void onContactEnded ( int userValue0 , boolean match0 , int userValue1 , boolean match1 ) { if ( match0 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue0 ) ) ; e . setColor ( Color . BLUE ) ; Gdx . app . log ( Float . toString ( time ) , <str> + userValue0 ) ; } if ( match1 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue1 ) ) ; e . setColor ( Color . BLUE ) ; Gdx . app . log ( Float . toString ( time ) , <str> + userValue1 ) ; } } } public static class TestContactCache extends ContactCache { public Array < BulletEntity > entities ; @Override public void onContactStarted ( btPersistentManifold manifold , boolean match0 , boolean match1 ) { final int userValue0 = manifold . getBody0 ( ) . getUserValue ( ) ; final int userValue1 = manifold . getBody1 ( ) . getUserValue ( ) ; if ( match0 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue0 ) ) ; e . setColor ( Color . RED ) ; Gdx . app . log ( Float . toString ( time ) , <str> + userValue0 ) ; } if ( match1 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue1 ) ) ; e . setColor ( Color . RED ) ; Gdx . app . log ( Float . toString ( time ) , <str> + userValue1 ) ; } } @Override public void onContactEnded ( btCollisionObject colObj0 , boolean match0 , btCollisionObject colObj1 , boolean match1 ) { final int userValue0 = colObj0 . getUserValue ( ) ; final int userValue1 = colObj1 . getUserValue ( ) ; if ( match0 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue0 ) ) ; e . setColor ( Color . BLUE ) ; Gdx . app . log ( Float . toString ( time ) , <str> + userValue0 ) ; } if ( match1 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue1 ) ) ; e . setColor ( Color . BLUE ) ; Gdx . app . log ( Float . toString ( time ) , <str> + userValue1 ) ; } } } final int SPHERECOUNT_X = <int> ; final int SPHERECOUNT_Y = <int> ; final int SPHERECOUNT_Z = <int> ; final float SPHEREOFFSET_X = - <int> f ; final float SPHEREOFFSET_Y = <int> f ; final float SPHEREOFFSET_Z = - <int> f ; final boolean USE_CONTACT_CACHE = true ; TestContactListener contactListener ; TestContactCache contactCache ; public static float time ; @Override public void create ( ) { super . create ( ) ; final Model sphereModel = modelBuilder . createSphere ( <int> f , <int> f , <int> f , <int> , <int> , new Material ( ColorAttribute . createDiffuse ( Color . WHITE ) , ColorAttribute . createSpecular ( Color . WHITE ) ) , Usage . Position | Usage . Normal ) ; disposables . add ( sphereModel ) ; final BulletConstructor sphereConstructor = new BulletConstructor ( sphereModel , <float> , new btSphereShape ( <float> ) ) ; sphereConstructor . bodyInfo . setRestitution ( <int> f ) ; world . addConstructor ( <str> , sphereConstructor ) ; final Model sceneModel = objLoader . loadModel ( Gdx . files . internal ( <str> ) ) ; disposables . add ( sceneModel ) ; final BulletConstructor sceneConstructor = new BulletConstructor ( sceneModel , <int> f , new btBvhTriangleMeshShape ( sceneModel . meshParts ) ) ; sceneConstructor . bodyInfo . setRestitution ( <float> ) ; world . addConstructor ( <str> , sceneConstructor ) ; final BulletEntity scene = world . add ( <str> , ( new Matrix4 ( ) ) . setToTranslation ( <int> f , <int> f , <int> f ) . rotate ( Vector3 . Y , - <int> ) ) ; scene . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <int> f ) ; scene . body . setContactCallbackFlag ( <int> ) ; world . add ( <str> , <int> f , <int> f , <int> f ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <int> f ) ; for ( int x = <int> ; x < SPHERECOUNT_X ; x + + ) { for ( int y = <int> ; y < SPHERECOUNT_Y ; y + + ) { for ( int z = <int> ; z < SPHERECOUNT_Z ; z + + ) { final BulletEntity e = ( BulletEntity ) world . add ( <str> , SPHEREOFFSET_X + x * <int> f , SPHEREOFFSET_Y + y * <int> f , SPHEREOFFSET_Z + z * <int> f ) ; e . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <int> f ) ; e . body . setContactCallbackFilter ( <int> ) ; } } } if ( USE_CONTACT_CACHE ) { contactCache = new TestContactCache ( ) ; contactCache . entities = world . entities ; contactCache . setCacheTime ( <float> ) ; } else { contactListener = new TestContactListener ( ) ; contactListener . entities = world . entities ; } time = <int> ; } @Override public void update ( ) { float delta = Gdx . graphics . getRawDeltaTime ( ) ; time + = delta ; super . update ( ) ; if ( contactCache ! = null ) contactCache . update ( delta ) ; } @Override public boolean tap ( float x , float y , int count , int button ) { shoot ( x , y ) ; return true ; } @Override public void dispose ( ) { if ( contactListener ! = null ) contactListener . dispose ( ) ; contactListener = null ; super . dispose ( ) ; } } 

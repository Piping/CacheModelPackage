package org . gradle . api . artifacts ; import groovy . lang . Closure ; import org . gradle . api . Action ; import org . gradle . api . Incubating ; import org . gradle . api . file . FileCollection ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . TaskDependency ; import org . gradle . internal . HasInternalProtocol ; import java . io . File ; import java . util . Map ; import java . util . Set ; @HasInternalProtocol public interface Configuration extends FileCollection { ResolutionStrategy getResolutionStrategy ( ) ; Configuration resolutionStrategy ( Closure closure ) ; enum State { UNRESOLVED , RESOLVED , RESOLVED_WITH_FAILURES } State getState ( ) ; String getName ( ) ; static class Namer implements org . gradle . api . Namer < Configuration > { public String determineName ( Configuration c ) { return c . getName ( ) ; } } boolean isVisible ( ) ; Configuration setVisible ( boolean visible ) ; Set < Configuration > getExtendsFrom ( ) ; Configuration setExtendsFrom ( Iterable < Configuration > superConfigs ) ; Configuration extendsFrom ( Configuration . . . superConfigs ) ; boolean isTransitive ( ) ; Configuration setTransitive ( boolean t ) ; String getDescription ( ) ; Configuration setDescription ( String description ) ; Set < Configuration > getHierarchy ( ) ; Set < File > resolve ( ) ; Set < File > files ( Closure dependencySpecClosure ) ; Set < File > files ( Spec < ? super Dependency > dependencySpec ) ; Set < File > files ( Dependency . . . dependencies ) ; FileCollection fileCollection ( Spec < ? super Dependency > dependencySpec ) ; FileCollection fileCollection ( Closure dependencySpecClosure ) ; FileCollection fileCollection ( Dependency . . . dependencies ) ; ResolvedConfiguration getResolvedConfiguration ( ) ; String getUploadTaskName ( ) ; TaskDependency getBuildDependencies ( ) ; TaskDependency getTaskDependencyFromProjectDependency ( boolean useDependedOn , final String taskName ) ; DependencySet getDependencies ( ) ; DependencySet getAllDependencies ( ) ; PublishArtifactSet getArtifacts ( ) ; PublishArtifactSet getAllArtifacts ( ) ; Set < ExcludeRule > getExcludeRules ( ) ; Configuration exclude ( Map < String , String > excludeProperties ) ; @Incubating Configuration defaultDependencies ( Action < ? super DependencySet > action ) ; Set < Configuration > getAll ( ) ; ResolvableDependencies getIncoming ( ) ; Configuration copy ( ) ; Configuration copyRecursive ( ) ; Configuration copy ( Spec < ? super Dependency > dependencySpec ) ; Configuration copyRecursive ( Spec < ? super Dependency > dependencySpec ) ; Configuration copy ( Closure dependencySpec ) ; Configuration copyRecursive ( Closure dependencySpec ) ; } 

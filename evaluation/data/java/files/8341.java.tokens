package org . eclipse . debug . internal . ui . views . memory . renderings ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . memory . AbstractMemoryRendering ; import org . eclipse . jface . text . Document ; import org . eclipse . jface . text . TextViewer ; import org . eclipse . swt . SWT ; import org . eclipse . swt . custom . StyledText ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; public class ErrorRendering extends AbstractMemoryRendering { private TextViewer fTextViewer ; private String fRenderingId ; private Throwable fException ; public ErrorRendering ( String renderingId , Throwable exception ) { super ( <str> ) ; fRenderingId = renderingId ; fException = exception ; } @Override public Control createControl ( Composite parent ) { fTextViewer = new TextViewer ( parent , SWT . READ_ONLY ) ; fTextViewer . setDocument ( new Document ( ) ) ; StyledText styleText = fTextViewer . getTextWidget ( ) ; styleText . setText ( <str> + DebugUIMessages . EmptyViewTab_Unable_to_create + <str> + getRenderingName ( ) + <str> + DebugUIMessages . ErrorRendering_0 + fException . getMessage ( ) ) ; return fTextViewer . getControl ( ) ; } private String getRenderingName ( ) { if ( DebugUITools . getMemoryRenderingManager ( ) . getRenderingType ( fRenderingId ) ! = null ) { String name = DebugUITools . getMemoryRenderingManager ( ) . getRenderingType ( fRenderingId ) . getLabel ( ) ; return name ; } return <str> ; } @Override public Control getControl ( ) { return fTextViewer . getControl ( ) ; } public void refresh ( ) { } }
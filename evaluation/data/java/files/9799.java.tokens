package com . badlogic . gdx . graphics . glutils ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . Texture . TextureWrap ; import com . badlogic . gdx . graphics . g2d . Gdx2DPixmap ; public class FrameBuffer extends GLFrameBuffer < Texture > { public FrameBuffer ( Pixmap . Format format , int width , int height , boolean hasDepth ) { this ( format , width , height , hasDepth , false ) ; } public FrameBuffer ( Pixmap . Format format , int width , int height , boolean hasDepth , boolean hasStencil ) { super ( format , width , height , hasDepth , hasStencil ) ; } @Override protected Texture createColorTexture ( ) { int glFormat = Pixmap . Format . toGlFormat ( format ) ; int glType = Pixmap . Format . toGlType ( format ) ; GLOnlyTextureData data = new GLOnlyTextureData ( width , height , <int> , glFormat , glFormat , glType ) ; Texture result = new Texture ( data ) ; result . setFilter ( TextureFilter . Linear , TextureFilter . Linear ) ; result . setWrap ( TextureWrap . ClampToEdge , TextureWrap . ClampToEdge ) ; return result ; } @Override protected void disposeColorTexture ( Texture colorTexture ) { colorTexture . dispose ( ) ; } public static void unbind ( ) { GLFrameBuffer . unbind ( ) ; } }
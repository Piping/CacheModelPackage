package jcuda . runtime ; import jcuda . driver . CUcontext ; public class cudaError { public static final int cudaSuccess = <int> ; public static final int cudaErrorMissingConfiguration = <int> ; public static final int cudaErrorMemoryAllocation = <int> ; public static final int cudaErrorInitializationError = <int> ; public static final int cudaErrorLaunchFailure = <int> ; public static final int cudaErrorPriorLaunchFailure = <int> ; public static final int cudaErrorLaunchTimeout = <int> ; public static final int cudaErrorLaunchOutOfResources = <int> ; public static final int cudaErrorInvalidDeviceFunction = <int> ; public static final int cudaErrorInvalidConfiguration = <int> ; public static final int cudaErrorInvalidDevice = <int> ; public static final int cudaErrorInvalidValue = <int> ; public static final int cudaErrorInvalidPitchValue = <int> ; public static final int cudaErrorInvalidSymbol = <int> ; public static final int cudaErrorMapBufferObjectFailed = <int> ; public static final int cudaErrorUnmapBufferObjectFailed = <int> ; public static final int cudaErrorInvalidHostPointer = <int> ; public static final int cudaErrorInvalidDevicePointer = <int> ; public static final int cudaErrorInvalidTexture = <int> ; public static final int cudaErrorInvalidTextureBinding = <int> ; public static final int cudaErrorInvalidChannelDescriptor = <int> ; public static final int cudaErrorInvalidMemcpyDirection = <int> ; public static final int cudaErrorAddressOfConstant = <int> ; public static final int cudaErrorTextureFetchFailed = <int> ; public static final int cudaErrorTextureNotBound = <int> ; public static final int cudaErrorSynchronizationError = <int> ; public static final int cudaErrorInvalidFilterSetting = <int> ; public static final int cudaErrorInvalidNormSetting = <int> ; public static final int cudaErrorMixedDeviceExecution = <int> ; public static final int cudaErrorCudartUnloading = <int> ; public static final int cudaErrorUnknown = <int> ; public static final int cudaErrorNotYetImplemented = <int> ; public static final int cudaErrorMemoryValueTooLarge = <int> ; public static final int cudaErrorInvalidResourceHandle = <int> ; public static final int cudaErrorNotReady = <int> ; public static final int cudaErrorInsufficientDriver = <int> ; public static final int cudaErrorSetOnActiveProcess = <int> ; public static final int cudaErrorInvalidSurface = <int> ; public static final int cudaErrorNoDevice = <int> ; public static final int cudaErrorECCUncorrectable = <int> ; public static final int cudaErrorSharedObjectSymbolNotFound = <int> ; public static final int cudaErrorSharedObjectInitFailed = <int> ; public static final int cudaErrorUnsupportedLimit = <int> ; public static final int cudaErrorDuplicateVariableName = <int> ; public static final int cudaErrorDuplicateTextureName = <int> ; public static final int cudaErrorDuplicateSurfaceName = <int> ; public static final int cudaErrorDevicesUnavailable = <int> ; public static final int cudaErrorInvalidKernelImage = <int> ; public static final int cudaErrorNoKernelImageForDevice = <int> ; public static final int cudaErrorIncompatibleDriverContext = <int> ; public static final int cudaErrorPeerAccessAlreadyEnabled = <int> ; public static final int cudaErrorPeerAccessNotEnabled = <int> ; public static final int cudaErrorDeviceAlreadyInUse = <int> ; public static final int cudaErrorProfilerDisabled = <int> ; public static final int cudaErrorProfilerNotInitialized = <int> ; public static final int cudaErrorProfilerAlreadyStarted = <int> ; public static final int cudaErrorProfilerAlreadyStopped = <int> ; public static final int cudaErrorAssert = <int> ; public static final int cudaErrorTooManyPeers = <int> ; public static final int cudaErrorHostMemoryAlreadyRegistered = <int> ; public static final int cudaErrorHostMemoryNotRegistered = <int> ; public static final int cudaErrorOperatingSystem = <int> ; public static final int cudaErrorPeerAccessUnsupported = <int> ; public static final int cudaErrorLaunchMaxDepthExceeded = <int> ; public static final int cudaErrorLaunchFileScopedTex = <int> ; public static final int cudaErrorLaunchFileScopedSurf = <int> ; public static final int cudaErrorSyncDepthExceeded = <int> ; public static final int cudaErrorLaunchPendingCountExceeded = <int> ; public static final int cudaErrorNotPermitted = <int> ; public static final int cudaErrorNotSupported = <int> ; public static final int cudaErrorHardwareStackError = <int> ; public static final int cudaErrorIllegalInstruction = <int> ; public static final int cudaErrorMisalignedAddress = <int> ; public static final int cudaErrorInvalidAddressSpace = <int> ; public static final int cudaErrorInvalidPc = <int> ; public static final int cudaErrorIllegalAddress = <int> ; public static final int cudaErrorInvalidPtx = <int> ; public static final int cudaErrorInvalidGraphicsContext = <int> ; public static final int cudaErrorStartupFailure = <hex> ; public static final int cudaErrorApiFailureBase = <int> ; public static final int jcudaInternalError = <hex> ; public static String stringFor ( int error ) { switch ( error ) { case cudaSuccess : return <str> ; case cudaErrorMissingConfiguration : return <str> ; case cudaErrorMemoryAllocation : return <str> ; case cudaErrorInitializationError : return <str> ; case cudaErrorLaunchFailure : return <str> ; case cudaErrorPriorLaunchFailure : return <str> ; case cudaErrorLaunchTimeout : return <str> ; case cudaErrorLaunchOutOfResources : return <str> ; case cudaErrorInvalidDeviceFunction : return <str> ; case cudaErrorInvalidConfiguration : return <str> ; case cudaErrorInvalidDevice : return <str> ; case cudaErrorInvalidValue : return <str> ; case cudaErrorInvalidPitchValue : return <str> ; case cudaErrorInvalidSymbol : return <str> ; case cudaErrorMapBufferObjectFailed : return <str> ; case cudaErrorUnmapBufferObjectFailed : return <str> ; case cudaErrorInvalidHostPointer : return <str> ; case cudaErrorInvalidDevicePointer : return <str> ; case cudaErrorInvalidTexture : return <str> ; case cudaErrorInvalidTextureBinding : return <str> ; case cudaErrorInvalidChannelDescriptor : return <str> ; case cudaErrorInvalidMemcpyDirection : return <str> ; case cudaErrorAddressOfConstant : return <str> ; case cudaErrorTextureFetchFailed : return <str> ; case cudaErrorTextureNotBound : return <str> ; case cudaErrorSynchronizationError : return <str> ; case cudaErrorInvalidFilterSetting : return <str> ; case cudaErrorInvalidNormSetting : return <str> ; case cudaErrorMixedDeviceExecution : return <str> ; case cudaErrorCudartUnloading : return <str> ; case cudaErrorUnknown : return <str> ; case cudaErrorNotYetImplemented : return <str> ; case cudaErrorMemoryValueTooLarge : return <str> ; case cudaErrorInvalidResourceHandle : return <str> ; case cudaErrorNotReady : return <str> ; case cudaErrorInsufficientDriver : return <str> ; case cudaErrorSetOnActiveProcess : return <str> ; case cudaErrorInvalidSurface : return <str> ; case cudaErrorNoDevice : return <str> ; case cudaErrorECCUncorrectable : return <str> ; case cudaErrorSharedObjectSymbolNotFound : return <str> ; case cudaErrorSharedObjectInitFailed : return <str> ; case cudaErrorUnsupportedLimit : return <str> ; case cudaErrorDuplicateVariableName : return <str> ; case cudaErrorDuplicateTextureName : return <str> ; case cudaErrorDuplicateSurfaceName : return <str> ; case cudaErrorDevicesUnavailable : return <str> ; case cudaErrorInvalidKernelImage : return <str> ; case cudaErrorNoKernelImageForDevice : return <str> ; case cudaErrorIncompatibleDriverContext : return <str> ; case cudaErrorPeerAccessAlreadyEnabled : return <str> ; case cudaErrorPeerAccessNotEnabled : return <str> ; case cudaErrorDeviceAlreadyInUse : return <str> ; case cudaErrorProfilerDisabled : return <str> ; case cudaErrorProfilerNotInitialized : return <str> ; case cudaErrorProfilerAlreadyStarted : return <str> ; case cudaErrorProfilerAlreadyStopped : return <str> ; case cudaErrorAssert : return <str> ; case cudaErrorTooManyPeers : return <str> ; case cudaErrorHostMemoryAlreadyRegistered : return <str> ; case cudaErrorHostMemoryNotRegistered : return <str> ; case cudaErrorOperatingSystem : return <str> ; case cudaErrorPeerAccessUnsupported : return <str> ; case cudaErrorLaunchMaxDepthExceeded : return <str> ; case cudaErrorLaunchFileScopedTex : return <str> ; case cudaErrorLaunchFileScopedSurf : return <str> ; case cudaErrorSyncDepthExceeded : return <str> ; case cudaErrorLaunchPendingCountExceeded : return <str> ; case cudaErrorNotPermitted : return <str> ; case cudaErrorNotSupported : return <str> ; case cudaErrorHardwareStackError : return <str> ; case cudaErrorIllegalInstruction : return <str> ; case cudaErrorMisalignedAddress : return <str> ; case cudaErrorInvalidAddressSpace : return <str> ; case cudaErrorInvalidPc : return <str> ; case cudaErrorIllegalAddress : return <str> ; case cudaErrorInvalidPtx : return <str> ; case cudaErrorInvalidGraphicsContext : return <str> ; case cudaErrorStartupFailure : return <str> ; case jcudaInternalError : return <str> ; } if ( error > = cudaErrorApiFailureBase ) { return stringFor ( error - cudaErrorApiFailureBase ) ; } return <str> + error ; } private cudaError ( ) { } } ;
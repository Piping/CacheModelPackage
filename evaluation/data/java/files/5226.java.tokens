package io . netty . util ; import org . junit . Test ; import java . util . Arrays ; import java . util . Comparator ; import java . util . Set ; import java . util . TreeSet ; import static org . hamcrest . CoreMatchers . * ; import static org . junit . Assert . * ; public class ConstantPoolTest { static final class TestConstant extends AbstractConstant < TestConstant > { TestConstant ( int id , String name ) { super ( id , name ) ; } } private static final ConstantPool < TestConstant > pool = new ConstantPool < TestConstant > ( ) { @Override protected TestConstant newConstant ( int id , String name ) { return new TestConstant ( id , name ) ; } } ; @Test ( expected = NullPointerException . class ) public void testCannotProvideNullName ( ) { pool . valueOf ( null ) ; } @Test @SuppressWarnings ( <str> ) public void testUniqueness ( ) { TestConstant a = pool . valueOf ( new String ( <str> ) ) ; TestConstant b = pool . valueOf ( new String ( <str> ) ) ; assertThat ( a , is ( sameInstance ( b ) ) ) ; } @Test public void testIdUniqueness ( ) { TestConstant one = pool . valueOf ( <str> ) ; TestConstant two = pool . valueOf ( <str> ) ; assertThat ( one . id ( ) , is ( not ( two . id ( ) ) ) ) ; } @Test public void testCompare ( ) { TestConstant a = pool . valueOf ( <str> ) ; TestConstant b = pool . valueOf ( <str> ) ; TestConstant c = pool . valueOf ( <str> ) ; TestConstant d = pool . valueOf ( <str> ) ; TestConstant e = pool . valueOf ( <str> ) ; Set < TestConstant > set = new TreeSet < TestConstant > ( ) ; set . add ( b ) ; set . add ( c ) ; set . add ( e ) ; set . add ( d ) ; set . add ( a ) ; TestConstant [ ] array = set . toArray ( new TestConstant [ <int> ] ) ; assertThat ( array . length , is ( <int> ) ) ; Arrays . sort ( array , new Comparator < TestConstant > ( ) { @Override public int compare ( TestConstant o1 , TestConstant o2 ) { return o1 . name ( ) . compareTo ( o2 . name ( ) ) ; } } ) ; assertThat ( array [ <int> ] , is ( sameInstance ( a ) ) ) ; assertThat ( array [ <int> ] , is ( sameInstance ( b ) ) ) ; assertThat ( array [ <int> ] , is ( sameInstance ( c ) ) ) ; assertThat ( array [ <int> ] , is ( sameInstance ( d ) ) ) ; assertThat ( array [ <int> ] , is ( sameInstance ( e ) ) ) ; } @Test public void testComposedName ( ) { TestConstant a = pool . valueOf ( Object . class , <str> ) ; assertThat ( a . name ( ) , is ( <str> ) ) ; } }
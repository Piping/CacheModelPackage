package com . google . common . base ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import java . util . Collections ; import java . util . Set ; import javax . annotation . Nullable ; @GwtCompatible final class Absent < T > extends Optional < T > { static final Absent < Object > INSTANCE = new Absent < Object > ( ) ; @SuppressWarnings ( <str> ) static < T > Optional < T > withType ( ) { return ( Optional < T > ) INSTANCE ; } private Absent ( ) { } @Override public boolean isPresent ( ) { return false ; } @Override public T get ( ) { throw new IllegalStateException ( <str> ) ; } @Override public T or ( T defaultValue ) { return checkNotNull ( defaultValue , <str> ) ; } @SuppressWarnings ( <str> ) @Override public Optional < T > or ( Optional < ? extends T > secondChoice ) { return ( Optional < T > ) checkNotNull ( secondChoice ) ; } @Override public T or ( Supplier < ? extends T > supplier ) { return checkNotNull ( supplier . get ( ) , <str> ) ; } @Override @Nullable public T orNull ( ) { return null ; } @Override public Set < T > asSet ( ) { return Collections . emptySet ( ) ; } @Override public < V > Optional < V > transform ( Function < ? super T , V > function ) { checkNotNull ( function ) ; return Optional . absent ( ) ; } @Override public boolean equals ( @Nullable Object object ) { return object = = this ; } @Override public int hashCode ( ) { return <hex> ; } @Override public String toString ( ) { return <str> ; } private Object readResolve ( ) { return INSTANCE ; } private static final long serialVersionUID = <int> ; }
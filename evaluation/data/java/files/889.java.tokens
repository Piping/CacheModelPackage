package org . gradle . plugin . use . resolve . internal ; import org . gradle . api . internal . DocumentationRegistry ; import org . gradle . api . internal . plugins . DefaultPluginManager ; import org . gradle . api . internal . plugins . PluginRegistry ; import org . gradle . api . internal . plugins . PluginImplementation ; import org . gradle . plugin . internal . PluginId ; import org . gradle . plugin . use . internal . InvalidPluginRequestException ; import org . gradle . plugin . use . internal . PluginRequest ; public class CorePluginResolver implements PluginResolver { private final DocumentationRegistry documentationRegistry ; private final PluginRegistry pluginRegistry ; public CorePluginResolver ( DocumentationRegistry documentationRegistry , PluginRegistry pluginRegistry ) { this . documentationRegistry = documentationRegistry ; this . pluginRegistry = pluginRegistry ; } public void resolve ( PluginRequest pluginRequest , PluginResolutionResult result ) { PluginId id = pluginRequest . getId ( ) ; if ( ! id . isQualified ( ) | | id . inNamespace ( DefaultPluginManager . CORE_PLUGIN_NAMESPACE ) ) { PluginImplementation < ? > plugin = pluginRegistry . lookup ( id ) ; if ( plugin = = null ) { result . notFound ( getDescription ( ) , String . format ( <str> , documentationRegistry . getDocumentationFor ( <str> ) ) ) ; } else { if ( pluginRequest . getVersion ( ) ! = null ) { throw new InvalidPluginRequestException ( pluginRequest , <str> + id + <str> + <str> ) ; } result . found ( getDescription ( ) , new SimplePluginResolution ( plugin ) ) ; } } else { result . notFound ( getDescription ( ) , String . format ( <str> , DefaultPluginManager . CORE_PLUGIN_NAMESPACE ) ) ; } } public static String getDescription ( ) { return <str> ; } } 

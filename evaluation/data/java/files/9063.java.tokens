package org . eclipse . debug . examples . ui . pda . editor ; import org . eclipse . debug . examples . ui . pda . DebugUIPlugin ; import org . eclipse . jface . text . TextAttribute ; import org . eclipse . jface . text . rules . BufferedRuleBasedScanner ; import org . eclipse . jface . text . rules . IRule ; import org . eclipse . jface . text . rules . IWordDetector ; import org . eclipse . jface . text . rules . Token ; import org . eclipse . jface . text . rules . WordRule ; public class PDAScanner extends BufferedRuleBasedScanner { public static final String [ ] fgKeywords = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; class PDAWordDetector implements IWordDetector { @Override public boolean isWordStart ( char c ) { return Character . isLetter ( c ) ; } @Override public boolean isWordPart ( char c ) { return Character . isLetter ( c ) | | c = = <str> ; } } class PDALabelDetector extends PDAWordDetector { @Override public boolean isWordStart ( char c ) { return c = = <str> ; } @Override public boolean isWordPart ( char c ) { return super . isWordPart ( c ) | | Character . isDigit ( c ) ; } } public PDAScanner ( ) { Token token = new Token ( new TextAttribute ( DebugUIPlugin . getDefault ( ) . getColor ( DebugUIPlugin . KEYWORD ) ) ) ; WordRule keywords = new WordRule ( new PDAWordDetector ( ) ) ; for ( int i = <int> ; i < fgKeywords . length ; i + + ) { String keyword = fgKeywords [ i ] ; keywords . addWord ( keyword , token ) ; } token = new Token ( new TextAttribute ( DebugUIPlugin . getDefault ( ) . getColor ( DebugUIPlugin . LABEL ) ) ) ; WordRule labels = new WordRule ( new PDALabelDetector ( ) , token ) ; setRules ( new IRule [ ] { keywords , labels } ) ; } }
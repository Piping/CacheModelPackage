package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_QUERIES ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractCollectionTester ; import com . google . common . collect . testing . WrongType ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; @GwtCompatible public class CollectionContainsTester < E > extends AbstractCollectionTester < E > { @CollectionSize.Require ( absent = ZERO ) public void testContains_yes ( ) { assertTrue ( <str> , collection . contains ( e0 ( ) ) ) ; } public void testContains_no ( ) { assertFalse ( <str> , collection . contains ( e3 ( ) ) ) ; } @CollectionFeature.Require ( ALLOWS_NULL_QUERIES ) public void testContains_nullNotContainedButQueriesSupported ( ) { assertFalse ( <str> , collection . contains ( null ) ) ; } @CollectionFeature.Require ( absent = ALLOWS_NULL_QUERIES ) public void testContains_nullNotContainedAndUnsupported ( ) { expectNullMissingWhenNullUnsupported ( <str> ) ; } @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testContains_nonNullWhenNullContained ( ) { initCollectionWithNullElement ( ) ; assertFalse ( <str> , collection . contains ( e3 ( ) ) ) ; } @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testContains_nullContained ( ) { initCollectionWithNullElement ( ) ; assertTrue ( <str> , collection . contains ( null ) ) ; } public void testContains_wrongType ( ) { try { assertFalse ( <str> , collection . contains ( WrongType . VALUE ) ) ; } catch ( ClassCastException tolerated ) { } } }
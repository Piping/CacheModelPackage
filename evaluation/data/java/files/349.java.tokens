package com . netflix . hystrix . contrib . requestservlet ; import java . io . IOException ; import javax . servlet . Filter ; import javax . servlet . FilterChain ; import javax . servlet . FilterConfig ; import javax . servlet . ServletException ; import javax . servlet . ServletRequest ; import javax . servlet . ServletResponse ; import javax . servlet . http . HttpServletRequest ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import com . netflix . hystrix . HystrixRequestLog ; import com . netflix . hystrix . strategy . concurrency . HystrixRequestContext ; public class HystrixRequestLogViaLoggerServletFilter implements Filter { private static final Logger logger = LoggerFactory . getLogger ( HystrixRequestLogViaLoggerServletFilter . class ) ; public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { StringBuilder requestURL = new StringBuilder ( ) ; try { String uri = ( ( HttpServletRequest ) request ) . getRequestURI ( ) ; String queryString = ( ( HttpServletRequest ) request ) . getQueryString ( ) ; String method = ( ( HttpServletRequest ) request ) . getMethod ( ) ; requestURL . append ( method ) . append ( <str> ) . append ( uri ) ; if ( queryString ! = null ) { requestURL . append ( <str> ) . append ( queryString ) ; } chain . doFilter ( request , response ) ; } finally { try { if ( HystrixRequestContext . isCurrentThreadInitialized ( ) ) { HystrixRequestLog log = HystrixRequestLog . getCurrentRequest ( ) ; logger . info ( <str> + requestURL . toString ( ) + <str> + log . getExecutedCommandsAsString ( ) ) ; } } catch ( Exception e ) { logger . warn ( <str> , e ) ; } } } @Override public void init ( FilterConfig filterConfig ) throws ServletException { } @Override public void destroy ( ) { } }
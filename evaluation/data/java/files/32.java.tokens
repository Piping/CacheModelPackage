package org . elasticsearch . cluster ; import org . elasticsearch . action . ActionRequestBuilder ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . action . bulk . BulkRequestBuilder ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . action . percolate . PercolateSourceBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . discovery . DiscoverySettings ; import org . elasticsearch . discovery . MasterNotDiscoveredException ; import org . elasticsearch . discovery . zen . ZenDiscovery ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . HashMap ; import static org . elasticsearch . action . percolate . PercolateSourceBuilder . docBuilder ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertExists ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertThrows ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . lessThan ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) @ESIntegTestCase.SuppressLocalMode public class NoMasterNodeIT extends ESIntegTestCase { public void testNoMasterActions ( ) throws Exception { boolean autoCreateIndex = randomBoolean ( ) ; logger . info ( <str> , autoCreateIndex ) ; Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , autoCreateIndex ) . put ( <str> , <int> ) . put ( ZenDiscovery . SETTING_PING_TIMEOUT , <str> ) . put ( <str> , <str> ) . put ( DiscoverySettings . NO_MASTER_BLOCK , <str> ) . build ( ) ; TimeValue timeout = TimeValue . timeValueMillis ( <int> ) ; internalCluster ( ) . startNode ( settings ) ; internalCluster ( ) . startNode ( settings ) ; createIndex ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; internalCluster ( ) . stopRandomDataNode ( ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { ClusterState state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) ; assertTrue ( state . blocks ( ) . hasGlobalBlock ( DiscoverySettings . NO_MASTER_BLOCK_ID ) ) ; } } ) ; assertThrows ( client ( ) . prepareGet ( <str> , <str> , <str> ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; assertThrows ( client ( ) . prepareGet ( <str> , <str> , <str> ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; assertThrows ( client ( ) . prepareMultiGet ( ) . add ( <str> , <str> , <str> ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; assertThrows ( client ( ) . prepareMultiGet ( ) . add ( <str> , <str> , <str> ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; PercolateSourceBuilder percolateSource = new PercolateSourceBuilder ( ) ; percolateSource . setDoc ( docBuilder ( ) . setDoc ( new HashMap ( ) ) ) ; assertThrows ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setSource ( percolateSource ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; percolateSource = new PercolateSourceBuilder ( ) ; percolateSource . setDoc ( docBuilder ( ) . setDoc ( new HashMap ( ) ) ) ; assertThrows ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setSource ( percolateSource ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; assertThrows ( client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> , <str> ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; assertThrows ( client ( ) . admin ( ) . indices ( ) . prepareAnalyze ( <str> , <str> ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; assertThrows ( client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; assertThrows ( client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) , ClusterBlockException . class , RestStatus . SERVICE_UNAVAILABLE ) ; checkWriteAction ( false , timeout , client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) . setTimeout ( timeout ) ) ; checkWriteAction ( autoCreateIndex , timeout , client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) . setTimeout ( timeout ) ) ; checkWriteAction ( false , timeout , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) . setTimeout ( timeout ) ) ; checkWriteAction ( autoCreateIndex , timeout , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) . setTimeout ( timeout ) ) ; BulkRequestBuilder bulkRequestBuilder = client ( ) . prepareBulk ( ) ; bulkRequestBuilder . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) ) ; bulkRequestBuilder . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) ) ; checkBulkAction ( false , bulkRequestBuilder ) ; bulkRequestBuilder = client ( ) . prepareBulk ( ) ; bulkRequestBuilder . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) ) ; bulkRequestBuilder . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) ) ; checkBulkAction ( autoCreateIndex , bulkRequestBuilder ) ; internalCluster ( ) . startNode ( settings ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . setWaitForNodes ( <str> ) . execute ( ) . actionGet ( ) ; } void checkWriteAction ( boolean autoCreateIndex , TimeValue timeout , ActionRequestBuilder < ? , ? , ? > builder ) { long now = System . currentTimeMillis ( ) ; try { builder . get ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException | MasterNotDiscoveredException e ) { if ( e instanceof MasterNotDiscoveredException ) { assertTrue ( autoCreateIndex ) ; } else { assertFalse ( autoCreateIndex ) ; } assertThat ( e . status ( ) , equalTo ( RestStatus . SERVICE_UNAVAILABLE ) ) ; assertThat ( System . currentTimeMillis ( ) - now , greaterThan ( timeout . millis ( ) - <int> ) ) ; } } void checkBulkAction ( boolean indexShouldBeAutoCreated , BulkRequestBuilder builder ) { TimeValue timeout ; if ( indexShouldBeAutoCreated ) { timeout = new TimeValue ( <int> ) ; } else { timeout = new TimeValue ( <int> ) ; } builder . setTimeout ( timeout ) ; long now = System . currentTimeMillis ( ) ; try { builder . get ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException e ) { if ( indexShouldBeAutoCreated ) { assertThat ( System . currentTimeMillis ( ) - now , greaterThan ( timeout . millis ( ) - <int> ) ) ; assertThat ( e . status ( ) , equalTo ( RestStatus . SERVICE_UNAVAILABLE ) ) ; } else { assertThat ( System . currentTimeMillis ( ) - now , lessThan ( timeout . millis ( ) - <int> ) ) ; } } } public void testNoMasterActionsWriteMasterBlock ( ) throws Exception { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , <int> ) . put ( ZenDiscovery . SETTING_PING_TIMEOUT , <str> ) . put ( <str> , <str> ) . put ( DiscoverySettings . NO_MASTER_BLOCK , <str> ) . build ( ) ; internalCluster ( ) . startNode ( settings ) ; internalCluster ( ) . startNode ( settings ) ; prepareCreate ( <str> ) . setSettings ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . get ( ) ; prepareCreate ( <str> ) . setSettings ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> , IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . get ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> ) . setWaitForGreenStatus ( ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; ensureSearchable ( <str> , <str> ) ; ClusterStateResponse clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) ; logger . info ( <str> + clusterState . getState ( ) . prettyPrint ( ) ) ; internalCluster ( ) . stopRandomDataNode ( ) ; assertTrue ( awaitBusy ( ( ) - > { ClusterState state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . get ( ) . getState ( ) ; return state . blocks ( ) . hasGlobalBlock ( DiscoverySettings . NO_MASTER_BLOCK_ID ) ; } ) ) ; GetResponse getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . get ( ) ; assertExists ( getResponse ) ; SearchResponse countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) ; assertHitCount ( countResponse , <int> l ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . get ( ) ; assertHitCount ( searchResponse , <int> l ) ; countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) ; assertThat ( countResponse . getTotalShards ( ) , equalTo ( <int> ) ) ; assertThat ( countResponse . getSuccessfulShards ( ) , equalTo ( <int> ) ) ; TimeValue timeout = TimeValue . timeValueMillis ( <int> ) ; long now = System . currentTimeMillis ( ) ; try { client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> , <str> ) . setTimeout ( timeout ) . get ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException e ) { assertThat ( System . currentTimeMillis ( ) - now , greaterThan ( timeout . millis ( ) - <int> ) ) ; assertThat ( e . status ( ) , equalTo ( RestStatus . SERVICE_UNAVAILABLE ) ) ; } now = System . currentTimeMillis ( ) ; try { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) . setTimeout ( timeout ) . get ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException e ) { assertThat ( System . currentTimeMillis ( ) - now , greaterThan ( timeout . millis ( ) - <int> ) ) ; assertThat ( e . status ( ) , equalTo ( RestStatus . SERVICE_UNAVAILABLE ) ) ; } internalCluster ( ) . startNode ( settings ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . setWaitForNodes ( <str> ) . get ( ) ; } } 

package com . badlogic . gdx . setup ; import java . io . BufferedReader ; import java . io . File ; import java . io . IOException ; import java . io . InputStreamReader ; public class Executor { public interface CharCallback { public void character ( char c ) ; } public static boolean execute ( File workingDir , String windowsFile , String unixFile , String parameters , CharCallback callback ) { String exec = workingDir . getAbsolutePath ( ) + <str> + ( System . getProperty ( <str> ) . contains ( <str> ) ? windowsFile : unixFile ) ; String log = <str> + exec + <str> + parameters + <str> ; for ( int i = <int> ; i < log . length ( ) ; i + + ) { callback . character ( log . charAt ( i ) ) ; } callback . character ( <str> ) ; String [ ] params = parameters . split ( <str> ) ; String [ ] commands = new String [ params . length + <int> ] ; commands [ <int> ] = exec ; for ( int i = <int> ; i < params . length ; i + + ) { commands [ i + <int> ] = params [ i ] ; } return startProcess ( commands , workingDir , callback ) ; } private static boolean startProcess ( String [ ] commands , File directory , final CharCallback callback ) { try { final Process process = new ProcessBuilder ( commands ) . redirectErrorStream ( true ) . directory ( directory ) . start ( ) ; Thread t = new Thread ( new Runnable ( ) { @Override public void run ( ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( process . getInputStream ( ) ) , <int> ) ; try { int c = <int> ; while ( ( c = reader . read ( ) ) ! = - <int> ) { callback . character ( ( char ) c ) ; } } catch ( IOException e ) { } } } ) ; t . setDaemon ( true ) ; t . start ( ) ; process . waitFor ( ) ; t . interrupt ( ) ; return process . exitValue ( ) = = <int> ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } } }
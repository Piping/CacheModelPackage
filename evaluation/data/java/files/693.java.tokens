package org . eclipse . debug . internal . ui . sourcelookup . browsers ; import java . util . ArrayList ; import org . eclipse . core . resources . IFolder ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . containers . FolderSourceContainer ; import org . eclipse . debug . ui . sourcelookup . AbstractSourceContainerBrowser ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . dialogs . ElementTreeSelectionDialog ; import org . eclipse . ui . model . WorkbenchContentProvider ; import org . eclipse . ui . model . WorkbenchLabelProvider ; public class FolderSourceContainerBrowser extends AbstractSourceContainerBrowser { @Override public ISourceContainer [ ] addSourceContainers ( Shell shell , ISourceLookupDirector director ) { FolderSourceContainerDialog dialog = new FolderSourceContainerDialog ( shell , new WorkbenchLabelProvider ( ) , new WorkbenchContentProvider ( ) ) ; if ( dialog . open ( ) = = Window . OK ) { Object [ ] selection = ( ( ElementTreeSelectionDialog ) dialog ) . getResult ( ) ; ArrayList < ISourceContainer > containers = new ArrayList < ISourceContainer > ( ) ; for ( int i = <int> ; i < selection . length ; i + + ) { if ( selection [ i ] instanceof IFolder ) { containers . add ( new FolderSourceContainer ( ( IFolder ) selection [ i ] , dialog . isSearchSubfolders ( ) ) ) ; } } return containers . toArray ( new ISourceContainer [ containers . size ( ) ] ) ; } return new ISourceContainer [ <int> ] ; } @Override public boolean canEditSourceContainers ( ISourceLookupDirector director , ISourceContainer [ ] containers ) { return containers . length = = <int> & & containers [ <int> ] . getType ( ) . getId ( ) . equals ( FolderSourceContainer . TYPE_ID ) ; } @Override public ISourceContainer [ ] editSourceContainers ( Shell shell , ISourceLookupDirector director , ISourceContainer [ ] containers ) { FolderSourceContainerDialog dialog = new FolderSourceContainerDialog ( shell , new WorkbenchLabelProvider ( ) , new WorkbenchContentProvider ( ) ) ; FolderSourceContainer container = ( FolderSourceContainer ) containers [ <int> ] ; dialog . setSearchSubfolders ( container . isComposite ( ) ) ; dialog . setInitialSelection ( container . getContainer ( ) ) ; if ( dialog . open ( ) = = Window . OK ) { container . dispose ( ) ; Object [ ] selection = ( ( ElementTreeSelectionDialog ) dialog ) . getResult ( ) ; ArrayList < ISourceContainer > list = new ArrayList < ISourceContainer > ( ) ; for ( int i = <int> ; i < selection . length ; i + + ) { if ( selection [ i ] instanceof IFolder ) { list . add ( new FolderSourceContainer ( ( IFolder ) selection [ i ] , dialog . isSearchSubfolders ( ) ) ) ; } } return list . toArray ( new ISourceContainer [ list . size ( ) ] ) ; } return new ISourceContainer [ <int> ] ; } } 

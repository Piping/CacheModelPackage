package com . badlogic . gdx . tests ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . fadeIn ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . fadeOut ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . forever ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . sequence ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Image ; import com . badlogic . gdx . tests . utils . GdxTest ; public class GroupFadeTest extends GdxTest { Texture texture ; Stage stage ; @Override public void create ( ) { texture = new Texture ( Gdx . files . internal ( <str> ) ) ; stage = new Stage ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { Image img = new Image ( new TextureRegion ( texture ) ) ; img . setX ( ( float ) Math . random ( ) * <int> ) ; img . setY ( ( float ) Math . random ( ) * <int> ) ; img . getColor ( ) . a = ( float ) Math . random ( ) * <float> + <float> ; stage . addActor ( img ) ; } stage . getRoot ( ) . addAction ( forever ( sequence ( fadeOut ( <int> ) , fadeIn ( <int> ) ) ) ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; } @Override public void dispose ( ) { texture . dispose ( ) ; stage . dispose ( ) ; } }
package org . elasticsearch . cluster . metadata ; import org . elasticsearch . common . compress . CompressedXContent ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . mapper . internal . TimestampFieldMapper ; import org . elasticsearch . test . ESTestCase ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class MappingMetaDataParserTests extends ESTestCase { public void testParseIdAlone ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , <str> , <str> ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . idResolved ( ) , equalTo ( true ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routingResolved ( ) , equalTo ( true ) ) ; assertThat ( parseContext . timestamp ( ) , nullValue ( ) ) ; assertThat ( parseContext . timestampResolved ( ) , equalTo ( false ) ) ; } public void testFailIfIdIsNoValue ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startArray ( <str> ) . value ( <str> ) . endArray ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , <str> , <str> ) ; try { md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) . toBytes ( ) ; parseContext = md . createParseContext ( null , <str> , <str> ) ; try { md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } } public void testParseRoutingAlone ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( <str> , null , <str> ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , nullValue ( ) ) ; assertThat ( parseContext . idResolved ( ) , equalTo ( false ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routingResolved ( ) , equalTo ( true ) ) ; assertThat ( parseContext . timestamp ( ) , nullValue ( ) ) ; assertThat ( parseContext . timestampResolved ( ) , equalTo ( false ) ) ; } public void testParseTimestampAlone ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( <str> , <str> , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , nullValue ( ) ) ; assertThat ( parseContext . idResolved ( ) , equalTo ( false ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routingResolved ( ) , equalTo ( true ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . timestampResolved ( ) , equalTo ( true ) ) ; } public void testParseTimestampEquals ( ) throws Exception { MappingMetaData md1 = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; MappingMetaData md2 = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; assertThat ( md1 , equalTo ( md2 ) ) ; } public void testParseIdAndRoutingAndTimestamp ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , null , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; } public void testParseIdAndRoutingAndTimestampWithPath ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , null , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; } public void testParseIdWithPath ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , <str> , <str> ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . idResolved ( ) , equalTo ( true ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routingResolved ( ) , equalTo ( true ) ) ; assertThat ( parseContext . timestamp ( ) , nullValue ( ) ) ; assertThat ( parseContext . timestampResolved ( ) , equalTo ( false ) ) ; } public void testParseRoutingWithPath ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( <str> , null , <str> ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , nullValue ( ) ) ; assertThat ( parseContext . idResolved ( ) , equalTo ( false ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routingResolved ( ) , equalTo ( true ) ) ; assertThat ( parseContext . timestamp ( ) , nullValue ( ) ) ; assertThat ( parseContext . timestampResolved ( ) , equalTo ( false ) ) ; } public void testParseTimestampWithPath ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , <str> , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , nullValue ( ) ) ; assertThat ( parseContext . idResolved ( ) , equalTo ( false ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routingResolved ( ) , equalTo ( true ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . timestampResolved ( ) , equalTo ( true ) ) ; } public void testParseIdAndRoutingAndTimestampWithinSamePath ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , null , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; } public void testParseIdAndRoutingAndTimestampWithinSamePathAndMoreLevels ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , null , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; } public void testParseIdAndRoutingAndTimestampWithSameRepeatedObject ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , null , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; } public void testParseIdRoutingTimestampWithRepeatedField ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . array ( <str> , <str> , <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , null , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . routing ( ) , nullValue ( ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; } public void testParseNoIdRoutingWithRepeatedFieldAndObject ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( <str> ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . array ( <str> , <str> , <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , null , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , nullValue ( ) ) ; assertThat ( parseContext . routing ( ) , nullValue ( ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; } public void testParseRoutingWithRepeatedFieldAndValidRouting ( ) throws Exception { MappingMetaData md = new MappingMetaData ( <str> , new CompressedXContent ( <str> ) , new MappingMetaData . Id ( null ) , new MappingMetaData . Routing ( true , <str> ) , new MappingMetaData . Timestamp ( true , <str> , <str> , TimestampFieldMapper . Defaults . DEFAULT_TIMESTAMP , null ) , false ) ; byte [ ] bytes = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . array ( <str> , <str> , <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) . toBytes ( ) ; MappingMetaData . ParseContext parseContext = md . createParseContext ( null , null , null ) ; md . parse ( XContentFactory . xContent ( bytes ) . createParser ( bytes ) , parseContext ) ; assertThat ( parseContext . id ( ) , nullValue ( ) ) ; assertThat ( parseContext . routing ( ) , equalTo ( <str> ) ) ; assertThat ( parseContext . timestamp ( ) , equalTo ( <str> ) ) ; } } 

package io . netty . handler . codec . http2 . hpack ; import java . io . IOException ; import java . io . OutputStream ; final class HuffmanEncoder { private final int [ ] codes ; private final byte [ ] lengths ; HuffmanEncoder ( int [ ] codes , byte [ ] lengths ) { this . codes = codes ; this . lengths = lengths ; } public void encode ( OutputStream out , byte [ ] data ) throws IOException { encode ( out , data , <int> , data . length ) ; } public void encode ( OutputStream out , byte [ ] data , int off , int len ) throws IOException { if ( out = = null ) { throw new NullPointerException ( <str> ) ; } else if ( data = = null ) { throw new NullPointerException ( <str> ) ; } else if ( off < <int> | | len < <int> | | ( off + len ) < <int> | | off > data . length | | ( off + len ) > data . length ) { throw new IndexOutOfBoundsException ( ) ; } else if ( len = = <int> ) { return ; } long current = <int> ; int n = <int> ; for ( int i = <int> ; i < len ; i + + ) { int b = data [ off + i ] & <hex> ; int code = codes [ b ] ; int nbits = lengths [ b ] ; current < < = nbits ; current | = code ; n + = nbits ; while ( n > = <int> ) { n - = <int> ; out . write ( ( int ) ( current > > n ) ) ; } } if ( n > <int> ) { current < < = <int> - n ; current | = <hex> > > > n ; out . write ( ( int ) current ) ; } } public int getEncodedLength ( byte [ ] data ) { if ( data = = null ) { throw new NullPointerException ( <str> ) ; } long len = <int> ; for ( byte b : data ) { len + = lengths [ b & <hex> ] ; } return ( int ) ( ( len + <int> ) > > <int> ) ; } }
package org . elasticsearch . search . aggregations . pipeline . bucketmetrics ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . AggregationStreams ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . metrics . InternalNumericMetricsAggregation ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import org . elasticsearch . search . aggregations . support . format . ValueFormatterStreams ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class InternalBucketMetricValue extends InternalNumericMetricsAggregation . SingleValue { public final static Type TYPE = new Type ( <str> ) ; public final static AggregationStreams . Stream STREAM = new AggregationStreams . Stream ( ) { @Override public InternalBucketMetricValue readResult ( StreamInput in ) throws IOException { InternalBucketMetricValue result = new InternalBucketMetricValue ( ) ; result . readFrom ( in ) ; return result ; } } ; public static void registerStreams ( ) { AggregationStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } private double value ; private String [ ] keys ; protected InternalBucketMetricValue ( ) { super ( ) ; } public InternalBucketMetricValue ( String name , String [ ] keys , double value , ValueFormatter formatter , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , pipelineAggregators , metaData ) ; this . keys = keys ; this . value = value ; this . valueFormatter = formatter ; } @Override public Type type ( ) { return TYPE ; } @Override public double value ( ) { return value ; } public String [ ] keys ( ) { return keys ; } @Override public InternalAggregation doReduce ( List < InternalAggregation > aggregations , ReduceContext reduceContext ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public Object getProperty ( List < String > path ) { if ( path . isEmpty ( ) ) { return this ; } else if ( path . size ( ) = = <int> & & <str> . equals ( path . get ( <int> ) ) ) { return value ( ) ; } else if ( path . size ( ) = = <int> & & <str> . equals ( path . get ( <int> ) ) ) { return keys ( ) ; } else { throw new IllegalArgumentException ( <str> + getName ( ) + <str> + path ) ; } } @Override protected void doReadFrom ( StreamInput in ) throws IOException { valueFormatter = ValueFormatterStreams . readOptional ( in ) ; value = in . readDouble ( ) ; keys = in . readStringArray ( ) ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { ValueFormatterStreams . writeOptional ( valueFormatter , out ) ; out . writeDouble ( value ) ; out . writeStringArray ( keys ) ; } @Override public XContentBuilder doXContentBody ( XContentBuilder builder , Params params ) throws IOException { boolean hasValue = ! Double . isInfinite ( value ) ; builder . field ( CommonFields . VALUE , hasValue ? value : null ) ; if ( hasValue & & ! ( valueFormatter instanceof ValueFormatter . Raw ) ) { builder . field ( CommonFields . VALUE_AS_STRING , valueFormatter . format ( value ) ) ; } builder . startArray ( <str> ) ; for ( String key : keys ) { builder . value ( key ) ; } builder . endArray ( ) ; return builder ; } } 

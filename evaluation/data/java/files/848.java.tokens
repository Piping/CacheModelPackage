package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Json ; import com . badlogic . gdx . utils . reflect . ArrayReflection ; import com . badlogic . gdx . utils . reflect . ClassReflection ; import com . badlogic . gdx . utils . reflect . Constructor ; import com . badlogic . gdx . utils . reflect . Field ; import com . badlogic . gdx . utils . reflect . Method ; public class ReflectionTest extends GdxTest { String message = <str> ; BitmapFont font ; SpriteBatch batch ; @Override public void create ( ) { font = new BitmapFont ( ) ; batch = new SpriteBatch ( ) ; try { Vector2 fromDefaultConstructor = ClassReflection . newInstance ( Vector2 . class ) ; println ( <str> + fromDefaultConstructor ) ; Method mSet = ClassReflection . getMethod ( Vector2 . class , <str> , float . class , float . class ) ; mSet . invoke ( fromDefaultConstructor , <int> , <int> ) ; println ( <str> + fromDefaultConstructor ) ; Constructor copyConstroctor = ClassReflection . getConstructor ( Vector2 . class , Vector2 . class ) ; Vector2 fromCopyConstructor = ( Vector2 ) copyConstroctor . newInstance ( fromDefaultConstructor ) ; println ( <str> + fromCopyConstructor ) ; Method mMul = ClassReflection . getMethod ( Vector2 . class , <str> , float . class ) ; println ( <str> + mMul . invoke ( fromCopyConstructor , <int> ) ) ; Method mNor = ClassReflection . getMethod ( Vector2 . class , <str> ) ; println ( <str> + mNor . invoke ( fromCopyConstructor ) ) ; Vector2 fieldCopy = new Vector2 ( ) ; Field fx = ClassReflection . getField ( Vector2 . class , <str> ) ; Field fy = ClassReflection . getField ( Vector2 . class , <str> ) ; fx . set ( fieldCopy , fx . get ( fromCopyConstructor ) ) ; fy . set ( fieldCopy , fy . get ( fromCopyConstructor ) ) ; println ( <str> + fieldCopy ) ; Json json = new Json ( ) ; String jsonString = json . toJson ( fromCopyConstructor ) ; Vector2 fromJson = json . fromJson ( Vector2 . class , jsonString ) ; println ( <str> + jsonString ) ; println ( <str> + fromJson ) ; fromJson . x + = <int> ; fromJson . y + = <int> ; println ( <str> + fromJson ) ; Object array = ArrayReflection . newInstance ( int . class , <int> ) ; ArrayReflection . set ( array , <int> , <int> ) ; println ( <str> + ArrayReflection . getLength ( array ) + <str> + ArrayReflection . get ( array , <int> ) ) ; array = ArrayReflection . newInstance ( String . class , <int> ) ; ArrayReflection . set ( array , <int> , <str> ) ; println ( <str> + ArrayReflection . getLength ( array ) + <str> + ArrayReflection . get ( array , <int> ) ) ; } catch ( Exception e ) { message = <str> + e . getMessage ( ) + <str> ; message + = e . getClass ( ) ; } } private void println ( String line ) { message + = line + <str> ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; font . draw ( batch , message , <int> , Gdx . graphics . getHeight ( ) - <int> ) ; batch . end ( ) ; } @Override public void dispose ( ) { batch . dispose ( ) ; font . dispose ( ) ; } } 

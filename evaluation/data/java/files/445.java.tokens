package io . netty . channel . epoll ; import io . netty . channel . ChannelOption ; import io . netty . channel . unix . DomainSocketReadMode ; import java . net . InetAddress ; import java . util . Map ; public final class EpollChannelOption < T > extends ChannelOption < T > { @SuppressWarnings ( <str> ) private static final Class < EpollChannelOption > T = EpollChannelOption . class ; public static final ChannelOption < Boolean > TCP_CORK = ChannelOption . valueOf ( T , <str> ) ; public static final ChannelOption < Boolean > SO_REUSEPORT = ChannelOption . valueOf ( T , <str> ) ; public static final ChannelOption < Long > TCP_NOTSENT_LOWAT = ChannelOption . valueOf ( T , <str> ) ; public static final ChannelOption < Integer > TCP_KEEPIDLE = ChannelOption . valueOf ( T , <str> ) ; public static final ChannelOption < Integer > TCP_KEEPINTVL = ChannelOption . valueOf ( T , <str> ) ; public static final ChannelOption < Integer > TCP_KEEPCNT = ChannelOption . valueOf ( T , <str> ) ; public static final ChannelOption < Integer > TCP_USER_TIMEOUT = valueOf ( T , <str> ) ; public static final ChannelOption < Boolean > IP_FREEBIND = ChannelOption . valueOf ( <str> ) ; public static final ChannelOption < Integer > TCP_FASTOPEN = valueOf ( T , <str> ) ; public static final ChannelOption < DomainSocketReadMode > DOMAIN_SOCKET_READ_MODE = ChannelOption . valueOf ( T , <str> ) ; public static final ChannelOption < EpollMode > EPOLL_MODE = ChannelOption . valueOf ( T , <str> ) ; public static final ChannelOption < Map < InetAddress , byte [ ] > > TCP_MD5SIG = valueOf ( <str> ) ; @SuppressWarnings ( { <str> , <str> } ) private EpollChannelOption ( ) { super ( null ) ; } } 

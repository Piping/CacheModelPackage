package com . netflix . hystrix . strategy . concurrency ; import com . netflix . hystrix . HystrixCommand ; import com . netflix . hystrix . HystrixThreadPool ; import com . netflix . hystrix . HystrixThreadPoolKey ; import com . netflix . hystrix . strategy . HystrixPlugins ; import com . netflix . hystrix . strategy . properties . HystrixProperty ; import com . netflix . hystrix . util . PlatformSpecific ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . Callable ; import java . util . concurrent . LinkedBlockingQueue ; import java . util . concurrent . SynchronousQueue ; import java . util . concurrent . ThreadFactory ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicInteger ; public abstract class HystrixConcurrencyStrategy { public ThreadPoolExecutor getThreadPool ( final HystrixThreadPoolKey threadPoolKey , HystrixProperty < Integer > corePoolSize , HystrixProperty < Integer > maximumPoolSize , HystrixProperty < Integer > keepAliveTime , TimeUnit unit , BlockingQueue < Runnable > workQueue ) { ThreadFactory threadFactory = null ; if ( ! PlatformSpecific . isAppEngine ( ) ) { threadFactory = new ThreadFactory ( ) { protected final AtomicInteger threadNumber = new AtomicInteger ( <int> ) ; @Override public Thread newThread ( Runnable r ) { Thread thread = new Thread ( r , <str> + threadPoolKey . name ( ) + <str> + threadNumber . incrementAndGet ( ) ) ; thread . setDaemon ( true ) ; return thread ; } } ; } else { threadFactory = PlatformSpecific . getAppEngineThreadFactory ( ) ; } return new ThreadPoolExecutor ( corePoolSize . get ( ) , maximumPoolSize . get ( ) , keepAliveTime . get ( ) , unit , workQueue , threadFactory ) ; } public BlockingQueue < Runnable > getBlockingQueue ( int maxQueueSize ) { if ( maxQueueSize < = <int> ) { return new SynchronousQueue < Runnable > ( ) ; } else { return new LinkedBlockingQueue < Runnable > ( maxQueueSize ) ; } } public < T > Callable < T > wrapCallable ( Callable < T > callable ) { return callable ; } public < T > HystrixRequestVariable < T > getRequestVariable ( final HystrixRequestVariableLifecycle < T > rv ) { return new HystrixLifecycleForwardingRequestVariable < T > ( rv ) ; } }
package rx . internal . operators ; import static org . mockito . Matchers . any ; import static org . mockito . Mockito . never ; import static org . mockito . Mockito . times ; import static org . mockito . Mockito . verify ; import org . junit . Before ; import org . junit . Test ; import org . mockito . Mock ; import org . mockito . MockitoAnnotations ; import rx . Observable ; import rx . Observer ; import rx . functions . Func1 ; import rx . functions . Func2 ; import rx . subjects . PublishSubject ; public class OnSubscribeJoinTest { @Mock Observer < Object > observer ; Func2 < Integer , Integer , Integer > add = new Func2 < Integer , Integer , Integer > ( ) { @Override public Integer call ( Integer t1 , Integer t2 ) { return t1 + t2 ; } } ; < T > Func1 < Integer , Observable < T > > just ( final Observable < T > observable ) { return new Func1 < Integer , Observable < T > > ( ) { @Override public Observable < T > call ( Integer t1 ) { return observable ; } } ; } @Before public void before ( ) { MockitoAnnotations . initMocks ( this ) ; } @Test public void normal1 ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; Observable < Integer > m = source1 . join ( source2 , just ( Observable . never ( ) ) , just ( Observable . never ( ) ) , add ) ; m . subscribe ( observer ) ; source1 . onNext ( <int> ) ; source1 . onNext ( <int> ) ; source1 . onNext ( <int> ) ; source2 . onNext ( <int> ) ; source2 . onNext ( <int> ) ; source2 . onNext ( <int> ) ; source1 . onCompleted ( ) ; source2 . onCompleted ( ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onError ( any ( Throwable . class ) ) ; } @Test public void normal1WithDuration ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; PublishSubject < Integer > duration1 = PublishSubject . create ( ) ; Observable < Integer > m = source1 . join ( source2 , just ( duration1 ) , just ( Observable . never ( ) ) , add ) ; m . subscribe ( observer ) ; source1 . onNext ( <int> ) ; source1 . onNext ( <int> ) ; source2 . onNext ( <int> ) ; duration1 . onNext ( <int> ) ; source1 . onNext ( <int> ) ; source1 . onNext ( <int> ) ; source1 . onCompleted ( ) ; source2 . onCompleted ( ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onError ( any ( Throwable . class ) ) ; } @Test public void normal2 ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; Observable < Integer > m = source1 . join ( source2 , just ( Observable . never ( ) ) , just ( Observable . never ( ) ) , add ) ; m . subscribe ( observer ) ; source1 . onNext ( <int> ) ; source1 . onNext ( <int> ) ; source1 . onCompleted ( ) ; source2 . onNext ( <int> ) ; source2 . onNext ( <int> ) ; source2 . onNext ( <int> ) ; source2 . onCompleted ( ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onError ( any ( Throwable . class ) ) ; } @Test public void leftThrows ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; Observable < Integer > m = source1 . join ( source2 , just ( Observable . never ( ) ) , just ( Observable . never ( ) ) , add ) ; m . subscribe ( observer ) ; source2 . onNext ( <int> ) ; source1 . onError ( new RuntimeException ( <str> ) ) ; verify ( observer , times ( <int> ) ) . onError ( any ( Throwable . class ) ) ; verify ( observer , never ( ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onNext ( any ( ) ) ; } @Test public void rightThrows ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; Observable < Integer > m = source1 . join ( source2 , just ( Observable . never ( ) ) , just ( Observable . never ( ) ) , add ) ; m . subscribe ( observer ) ; source1 . onNext ( <int> ) ; source2 . onError ( new RuntimeException ( <str> ) ) ; verify ( observer , times ( <int> ) ) . onError ( any ( Throwable . class ) ) ; verify ( observer , never ( ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onNext ( any ( ) ) ; } @Test public void leftDurationThrows ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; Observable < Integer > duration1 = Observable . < Integer > error ( new RuntimeException ( <str> ) ) ; Observable < Integer > m = source1 . join ( source2 , just ( duration1 ) , just ( Observable . never ( ) ) , add ) ; m . subscribe ( observer ) ; source1 . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onError ( any ( Throwable . class ) ) ; verify ( observer , never ( ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onNext ( any ( ) ) ; } @Test public void rightDurationThrows ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; Observable < Integer > duration1 = Observable . < Integer > error ( new RuntimeException ( <str> ) ) ; Observable < Integer > m = source1 . join ( source2 , just ( Observable . never ( ) ) , just ( duration1 ) , add ) ; m . subscribe ( observer ) ; source2 . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onError ( any ( Throwable . class ) ) ; verify ( observer , never ( ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onNext ( any ( ) ) ; } @Test public void leftDurationSelectorThrows ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; Func1 < Integer , Observable < Integer > > fail = new Func1 < Integer , Observable < Integer > > ( ) { @Override public Observable < Integer > call ( Integer t1 ) { throw new RuntimeException ( <str> ) ; } } ; Observable < Integer > m = source1 . join ( source2 , fail , just ( Observable . never ( ) ) , add ) ; m . subscribe ( observer ) ; source1 . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onError ( any ( Throwable . class ) ) ; verify ( observer , never ( ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onNext ( any ( ) ) ; } @Test public void rightDurationSelectorThrows ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; Func1 < Integer , Observable < Integer > > fail = new Func1 < Integer , Observable < Integer > > ( ) { @Override public Observable < Integer > call ( Integer t1 ) { throw new RuntimeException ( <str> ) ; } } ; Observable < Integer > m = source1 . join ( source2 , just ( Observable . never ( ) ) , fail , add ) ; m . subscribe ( observer ) ; source2 . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onError ( any ( Throwable . class ) ) ; verify ( observer , never ( ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onNext ( any ( ) ) ; } @Test public void resultSelectorThrows ( ) { PublishSubject < Integer > source1 = PublishSubject . create ( ) ; PublishSubject < Integer > source2 = PublishSubject . create ( ) ; Func2 < Integer , Integer , Integer > fail = new Func2 < Integer , Integer , Integer > ( ) { @Override public Integer call ( Integer t1 , Integer t2 ) { throw new RuntimeException ( <str> ) ; } } ; Observable < Integer > m = source1 . join ( source2 , just ( Observable . never ( ) ) , just ( Observable . never ( ) ) , fail ) ; m . subscribe ( observer ) ; source1 . onNext ( <int> ) ; source2 . onNext ( <int> ) ; verify ( observer , times ( <int> ) ) . onError ( any ( Throwable . class ) ) ; verify ( observer , never ( ) ) . onCompleted ( ) ; verify ( observer , never ( ) ) . onNext ( any ( ) ) ; } } 

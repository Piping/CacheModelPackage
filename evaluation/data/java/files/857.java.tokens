package io . netty . buffer ; import org . junit . Test ; import java . io . EOFException ; import java . nio . charset . Charset ; import static io . netty . util . internal . EmptyArrays . * ; import static org . junit . Assert . * ; public class ByteBufStreamTest { @Test public void testAll ( ) throws Exception { ByteBuf buf = Unpooled . buffer ( <int> , <int> ) ; try { new ByteBufOutputStream ( null ) ; fail ( ) ; } catch ( NullPointerException e ) { } ByteBufOutputStream out = new ByteBufOutputStream ( buf ) ; assertSame ( buf , out . buffer ( ) ) ; out . writeBoolean ( true ) ; out . writeBoolean ( false ) ; out . writeByte ( <int> ) ; out . writeByte ( <int> ) ; out . writeBytes ( <str> ) ; out . writeChars ( <str> ) ; out . writeChar ( <str> ) ; out . writeDouble ( <float> ) ; out . writeFloat ( <float> ) ; out . writeInt ( <int> ) ; out . writeLong ( <int> ) ; out . writeShort ( <int> ) ; out . writeShort ( <int> ) ; out . writeUTF ( <str> ) ; out . writeBytes ( <str> ) ; out . write ( EMPTY_BYTES ) ; out . write ( new byte [ ] { <int> , <int> , <int> , <int> } ) ; out . write ( new byte [ ] { <int> , <int> , <int> , <int> } , <int> , <int> ) ; out . close ( ) ; try { new ByteBufInputStream ( null ) ; fail ( ) ; } catch ( NullPointerException e ) { } try { new ByteBufInputStream ( null , <int> ) ; fail ( ) ; } catch ( NullPointerException e ) { } try { new ByteBufInputStream ( buf , - <int> ) ; } catch ( IllegalArgumentException e ) { } try { new ByteBufInputStream ( buf , buf . capacity ( ) + <int> ) ; } catch ( IndexOutOfBoundsException e ) { } ByteBufInputStream in = new ByteBufInputStream ( buf ) ; assertTrue ( in . markSupported ( ) ) ; in . mark ( Integer . MAX_VALUE ) ; assertEquals ( buf . writerIndex ( ) , in . skip ( Long . MAX_VALUE ) ) ; assertFalse ( buf . isReadable ( ) ) ; in . reset ( ) ; assertEquals ( <int> , buf . readerIndex ( ) ) ; assertEquals ( <int> , in . skip ( <int> ) ) ; assertEquals ( <int> , buf . readerIndex ( ) ) ; in . reset ( ) ; assertTrue ( in . readBoolean ( ) ) ; assertFalse ( in . readBoolean ( ) ) ; assertEquals ( <int> , in . readByte ( ) ) ; assertEquals ( <int> , in . readUnsignedByte ( ) ) ; byte [ ] tmp = new byte [ <int> ] ; in . readFully ( tmp ) ; assertEquals ( <str> , new String ( tmp , <str> ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( <float> , in . readDouble ( ) , <float> ) ; assertEquals ( <float> , in . readFloat ( ) , <float> ) ; assertEquals ( <int> , in . readInt ( ) ) ; assertEquals ( <int> , in . readLong ( ) ) ; assertEquals ( <int> , in . readShort ( ) ) ; assertEquals ( <int> , in . readUnsignedShort ( ) ) ; assertEquals ( <str> , in . readUTF ( ) ) ; assertEquals ( <str> , in . readLine ( ) ) ; assertEquals ( <str> , in . readLine ( ) ) ; assertEquals ( <int> , in . read ( tmp ) ) ; assertEquals ( <int> , tmp [ <int> ] ) ; assertEquals ( <int> , tmp [ <int> ] ) ; assertEquals ( <int> , tmp [ <int> ] ) ; assertEquals ( <int> , tmp [ <int> ] ) ; assertEquals ( - <int> , in . read ( ) ) ; assertEquals ( - <int> , in . read ( tmp ) ) ; try { in . readByte ( ) ; fail ( ) ; } catch ( EOFException e ) { } try { in . readFully ( tmp , <int> , - <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException e ) { } try { in . readFully ( tmp ) ; fail ( ) ; } catch ( EOFException e ) { } in . close ( ) ; assertEquals ( buf . readerIndex ( ) , in . readBytes ( ) ) ; } @Test public void testReadLine ( ) throws Exception { Charset utf8 = Charset . forName ( <str> ) ; ByteBuf buf = Unpooled . buffer ( ) ; ByteBufInputStream in = new ByteBufInputStream ( buf ) ; String s = in . readLine ( ) ; assertNull ( s ) ; int charCount = <int> ; byte [ ] abc = <str> . getBytes ( utf8 ) ; buf . writeBytes ( abc ) ; in . mark ( charCount ) ; assertEquals ( <str> , in . readLine ( ) ) ; assertEquals ( <str> , in . readLine ( ) ) ; assertEquals ( <str> , in . readLine ( ) ) ; assertEquals ( <str> , in . readLine ( ) ) ; assertEquals ( <str> , in . readLine ( ) ) ; assertNull ( in . readLine ( ) ) ; in . reset ( ) ; int count = <int> ; while ( in . readLine ( ) ! = null ) { + + count ; if ( count > charCount ) { fail ( <str> ) ; } } assertEquals ( charCount , count ) ; in . close ( ) ; } } 

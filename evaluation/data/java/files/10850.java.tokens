package com . badlogic . gdx . physics . bullet . softbody ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . physics . bullet . dynamics . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class SoftBodyTetraData extends BulletBase { private long swigCPtr ; protected SoftBodyTetraData ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public SoftBodyTetraData ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( SoftBodyTetraData obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_SoftBodyTetraData ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setC0 ( btVector3FloatData value ) { SoftbodyJNI . SoftBodyTetraData_c0_set ( swigCPtr , this , btVector3FloatData . getCPtr ( value ) , value ) ; } public btVector3FloatData getC0 ( ) { long cPtr = SoftbodyJNI . SoftBodyTetraData_c0_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3FloatData ( cPtr , false ) ; } public void setMaterial ( SoftBodyMaterialData value ) { SoftbodyJNI . SoftBodyTetraData_material_set ( swigCPtr , this , SoftBodyMaterialData . getCPtr ( value ) , value ) ; } public SoftBodyMaterialData getMaterial ( ) { long cPtr = SoftbodyJNI . SoftBodyTetraData_material_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SoftBodyMaterialData ( cPtr , false ) ; } public void setNodeIndices ( int [ ] value ) { SoftbodyJNI . SoftBodyTetraData_nodeIndices_set ( swigCPtr , this , value ) ; } public int [ ] getNodeIndices ( ) { return SoftbodyJNI . SoftBodyTetraData_nodeIndices_get ( swigCPtr , this ) ; } public void setRestVolume ( float value ) { SoftbodyJNI . SoftBodyTetraData_restVolume_set ( swigCPtr , this , value ) ; } public float getRestVolume ( ) { return SoftbodyJNI . SoftBodyTetraData_restVolume_get ( swigCPtr , this ) ; } public void setC1 ( float value ) { SoftbodyJNI . SoftBodyTetraData_c1_set ( swigCPtr , this , value ) ; } public float getC1 ( ) { return SoftbodyJNI . SoftBodyTetraData_c1_get ( swigCPtr , this ) ; } public void setC2 ( float value ) { SoftbodyJNI . SoftBodyTetraData_c2_set ( swigCPtr , this , value ) ; } public float getC2 ( ) { return SoftbodyJNI . SoftBodyTetraData_c2_get ( swigCPtr , this ) ; } public void setPad ( int value ) { SoftbodyJNI . SoftBodyTetraData_pad_set ( swigCPtr , this , value ) ; } public int getPad ( ) { return SoftbodyJNI . SoftBodyTetraData_pad_get ( swigCPtr , this ) ; } public SoftBodyTetraData ( ) { this ( SoftbodyJNI . new_SoftBodyTetraData ( ) , true ) ; } }
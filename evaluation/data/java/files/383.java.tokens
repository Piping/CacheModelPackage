package org . elasticsearch . index . mapper ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . internal . UidFieldMapper ; import org . elasticsearch . test . ESSingleNodeTestCase ; public class DocumentParserTests extends ESSingleNodeTestCase { public void testTypeDisabled ( ) throws Exception { DocumentMapperParser mapperParser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = mapperParser . parse ( mapping ) ; BytesReference bytes = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) ; ParsedDocument doc = mapper . parse ( <str> , <str> , <str> , bytes ) ; assertNull ( doc . rootDoc ( ) . getField ( <str> ) ) ; assertNotNull ( doc . rootDoc ( ) . getField ( UidFieldMapper . NAME ) ) ; } public void testFieldDisabled ( ) throws Exception { DocumentMapperParser mapperParser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = mapperParser . parse ( mapping ) ; BytesReference bytes = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <int> ) . endObject ( ) . bytes ( ) ; ParsedDocument doc = mapper . parse ( <str> , <str> , <str> , bytes ) ; assertNull ( doc . rootDoc ( ) . getField ( <str> ) ) ; assertNotNull ( doc . rootDoc ( ) . getField ( <str> ) ) ; assertNotNull ( doc . rootDoc ( ) . getField ( UidFieldMapper . NAME ) ) ; } } 

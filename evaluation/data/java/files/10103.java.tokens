package com . badlogic . gdx . assets . loaders . resolvers ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . loaders . FileHandleResolver ; import com . badlogic . gdx . files . FileHandle ; public class ResolutionFileResolver implements FileHandleResolver { public static class Resolution { public final int portraitWidth ; public final int portraitHeight ; public final String folder ; public Resolution ( int portraitWidth , int portraitHeight , String folder ) { this . portraitWidth = portraitWidth ; this . portraitHeight = portraitHeight ; this . folder = folder ; } } protected final FileHandleResolver baseResolver ; protected final Resolution [ ] descriptors ; public ResolutionFileResolver ( FileHandleResolver baseResolver , Resolution . . . descriptors ) { if ( descriptors . length = = <int> ) throw new IllegalArgumentException ( <str> ) ; this . baseResolver = baseResolver ; this . descriptors = descriptors ; } @Override public FileHandle resolve ( String fileName ) { Resolution bestResolution = choose ( descriptors ) ; FileHandle originalHandle = new FileHandle ( fileName ) ; FileHandle handle = baseResolver . resolve ( resolve ( originalHandle , bestResolution . folder ) ) ; if ( ! handle . exists ( ) ) handle = baseResolver . resolve ( fileName ) ; return handle ; } protected String resolve ( FileHandle originalHandle , String suffix ) { String parentString = <str> ; FileHandle parent = originalHandle . parent ( ) ; if ( parent ! = null & & ! parent . name ( ) . equals ( <str> ) ) { parentString = parent + <str> ; } return parentString + suffix + <str> + originalHandle . name ( ) ; } static public Resolution choose ( Resolution . . . descriptors ) { int w = Gdx . graphics . getWidth ( ) , h = Gdx . graphics . getHeight ( ) ; Resolution best = descriptors [ <int> ] ; if ( w < h ) { for ( int i = <int> , n = descriptors . length ; i < n ; i + + ) { Resolution other = descriptors [ i ] ; if ( w > = other . portraitWidth & & other . portraitWidth > = best . portraitWidth & & h > = other . portraitHeight & & other . portraitHeight > = best . portraitHeight ) best = descriptors [ i ] ; } } else { for ( int i = <int> , n = descriptors . length ; i < n ; i + + ) { Resolution other = descriptors [ i ] ; if ( w > = other . portraitHeight & & other . portraitHeight > = best . portraitHeight & & h > = other . portraitWidth & & other . portraitWidth > = best . portraitWidth ) best = descriptors [ i ] ; } } return best ; } }
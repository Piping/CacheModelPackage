package org . apache . cassandra . db . marshal ; import static org . junit . Assert . * ; import java . math . BigDecimal ; import java . nio . ByteBuffer ; import java . util . Arrays ; import org . apache . cassandra . db . marshal . DecimalType ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . junit . Test ; public class DecimalTypeTest { private static final String LOW = <str> ; private static final String HIGH = <str> ; private static BigDecimal zero = new BigDecimal ( <str> ) ; private static BigDecimal minus = new BigDecimal ( <str> ) ; private static BigDecimal low = new BigDecimal ( LOW ) ; private static BigDecimal high = new BigDecimal ( HIGH ) ; @Test public void test1Decompose_compose ( ) { ByteBuffer bb = DecimalType . instance . decompose ( low ) ; String string = DecimalType . instance . compose ( bb ) . toPlainString ( ) ; assertEquals ( LOW , string ) ; bb = DecimalType . instance . decompose ( null ) ; assertEquals ( bb , ByteBufferUtil . EMPTY_BYTE_BUFFER ) ; } @Test public void test2Compare ( ) { ByteBuffer lowBB = DecimalType . instance . decompose ( low ) ; ByteBuffer low2BB = DecimalType . instance . decompose ( low ) ; ByteBuffer highBB = DecimalType . instance . decompose ( high ) ; assertEquals ( - <int> , DecimalType . instance . compare ( lowBB , highBB ) ) ; lowBB = DecimalType . instance . decompose ( low ) ; highBB = DecimalType . instance . decompose ( high ) ; assertEquals ( <int> , DecimalType . instance . compare ( highBB , lowBB ) ) ; lowBB = DecimalType . instance . decompose ( low ) ; assertEquals ( <int> , DecimalType . instance . compare ( low2BB , lowBB ) ) ; lowBB = DecimalType . instance . decompose ( low ) ; assertEquals ( - <int> , DecimalType . instance . compare ( ByteBufferUtil . EMPTY_BYTE_BUFFER , lowBB ) ) ; lowBB = DecimalType . instance . decompose ( low ) ; assertEquals ( <int> , DecimalType . instance . compare ( lowBB , ByteBufferUtil . EMPTY_BYTE_BUFFER ) ) ; assertEquals ( <int> , DecimalType . instance . compare ( ByteBufferUtil . EMPTY_BYTE_BUFFER , ByteBufferUtil . EMPTY_BYTE_BUFFER ) ) ; } @Test public void test3Sort ( ) { ByteBuffer zeroBB = DecimalType . instance . decompose ( zero ) ; ByteBuffer minusBB = DecimalType . instance . decompose ( minus ) ; ByteBuffer lowBB = DecimalType . instance . decompose ( low ) ; ByteBuffer highBB = DecimalType . instance . decompose ( high ) ; ByteBuffer [ ] array = { highBB , minusBB , lowBB , lowBB , zeroBB , minusBB } ; Arrays . sort ( array , DecimalType . instance ) ; for ( int i = <int> ; i < array . length ; i + + ) { BigDecimal i0 = DecimalType . instance . compose ( array [ i - <int> ] ) ; BigDecimal i1 = DecimalType . instance . compose ( array [ i ] ) ; assertTrue ( <str> + i , i0 . compareTo ( i1 ) < = <int> ) ; } } } 

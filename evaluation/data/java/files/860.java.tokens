package org . elasticsearch . common . transport ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . network . NetworkAddress ; import java . io . IOException ; import java . net . InetAddress ; import java . net . InetSocketAddress ; public final class InetSocketTransportAddress implements TransportAddress { public static final InetSocketTransportAddress PROTO = new InetSocketTransportAddress ( ) ; private final InetSocketAddress address ; public InetSocketTransportAddress ( StreamInput in ) throws IOException { final int len = in . readByte ( ) ; final byte [ ] a = new byte [ len ] ; in . readFully ( a ) ; InetAddress inetAddress = InetAddress . getByAddress ( a ) ; int port = in . readInt ( ) ; this . address = new InetSocketAddress ( inetAddress , port ) ; } private InetSocketTransportAddress ( ) { address = null ; } public InetSocketTransportAddress ( InetAddress address , int port ) { this ( new InetSocketAddress ( address , port ) ) ; } public InetSocketTransportAddress ( InetSocketAddress address ) { if ( address = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( address . getAddress ( ) = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . address = address ; } @Override public short uniqueAddressTypeId ( ) { return <int> ; } @Override public boolean sameHost ( TransportAddress other ) { return other instanceof InetSocketTransportAddress & & address . getAddress ( ) . equals ( ( ( InetSocketTransportAddress ) other ) . address . getAddress ( ) ) ; } @Override public String getHost ( ) { return getAddress ( ) ; } @Override public String getAddress ( ) { return NetworkAddress . formatAddress ( address . getAddress ( ) ) ; } @Override public int getPort ( ) { return address . getPort ( ) ; } public InetSocketAddress address ( ) { return this . address ; } @Override public TransportAddress readFrom ( StreamInput in ) throws IOException { return new InetSocketTransportAddress ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { byte [ ] bytes = address ( ) . getAddress ( ) . getAddress ( ) ; out . writeByte ( ( byte ) bytes . length ) ; out . write ( bytes , <int> , bytes . length ) ; out . writeInt ( address . getPort ( ) ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; InetSocketTransportAddress address1 = ( InetSocketTransportAddress ) o ; return address . equals ( address1 . address ) ; } @Override public int hashCode ( ) { return address ! = null ? address . hashCode ( ) : <int> ; } @Override public String toString ( ) { return NetworkAddress . format ( address ) ; } } 

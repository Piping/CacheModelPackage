package org . elasticsearch . http . netty ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . bytes . ChannelBufferBytesReference ; import org . elasticsearch . http . HttpRequest ; import org . elasticsearch . rest . support . RestUtils ; import org . jboss . netty . channel . Channel ; import org . jboss . netty . handler . codec . http . HttpMethod ; import java . net . SocketAddress ; import java . util . HashMap ; import java . util . Map ; public class NettyHttpRequest extends HttpRequest { private final org . jboss . netty . handler . codec . http . HttpRequest request ; private final Channel channel ; private final Map < String , String > params ; private final String rawPath ; private final BytesReference content ; public NettyHttpRequest ( org . jboss . netty . handler . codec . http . HttpRequest request , Channel channel ) { this . request = request ; this . channel = channel ; this . params = new HashMap < > ( ) ; if ( request . getContent ( ) . readable ( ) ) { this . content = new ChannelBufferBytesReference ( request . getContent ( ) ) ; } else { this . content = BytesArray . EMPTY ; } String uri = request . getUri ( ) ; int pathEndPos = uri . indexOf ( <str> ) ; if ( pathEndPos < <int> ) { this . rawPath = uri ; } else { this . rawPath = uri . substring ( <int> , pathEndPos ) ; RestUtils . decodeQueryString ( uri , pathEndPos + <int> , params ) ; } } public org . jboss . netty . handler . codec . http . HttpRequest request ( ) { return this . request ; } @Override public Method method ( ) { HttpMethod httpMethod = request . getMethod ( ) ; if ( httpMethod = = HttpMethod . GET ) return Method . GET ; if ( httpMethod = = HttpMethod . POST ) return Method . POST ; if ( httpMethod = = HttpMethod . PUT ) return Method . PUT ; if ( httpMethod = = HttpMethod . DELETE ) return Method . DELETE ; if ( httpMethod = = HttpMethod . HEAD ) { return Method . HEAD ; } if ( httpMethod = = HttpMethod . OPTIONS ) { return Method . OPTIONS ; } return Method . GET ; } @Override public String uri ( ) { return request . getUri ( ) ; } @Override public String rawPath ( ) { return rawPath ; } @Override public Map < String , String > params ( ) { return params ; } @Override public boolean hasContent ( ) { return content . length ( ) > <int> ; } @Override public BytesReference content ( ) { return content ; } @Override public SocketAddress getRemoteAddress ( ) { return channel . getRemoteAddress ( ) ; } @Override public SocketAddress getLocalAddress ( ) { return channel . getLocalAddress ( ) ; } public Channel getChannel ( ) { return channel ; } @Override public String header ( String name ) { return request . headers ( ) . get ( name ) ; } @Override public Iterable < Map . Entry < String , String > > headers ( ) { return request . headers ( ) . entries ( ) ; } @Override public boolean hasParam ( String key ) { return params . containsKey ( key ) ; } @Override public String param ( String key ) { return params . get ( key ) ; } @Override public String param ( String key , String defaultValue ) { String value = params . get ( key ) ; if ( value = = null ) { return defaultValue ; } return value ; } } 

package rx ; public final class Notification < T > { private final Kind kind ; private final Throwable throwable ; private final T value ; private static final Notification < Void > ON_COMPLETED = new Notification < Void > ( Kind . OnCompleted , null , null ) ; public static < T > Notification < T > createOnNext ( T t ) { return new Notification < T > ( Kind . OnNext , t , null ) ; } public static < T > Notification < T > createOnError ( Throwable e ) { return new Notification < T > ( Kind . OnError , null , e ) ; } @SuppressWarnings ( <str> ) public static < T > Notification < T > createOnCompleted ( ) { return ( Notification < T > ) ON_COMPLETED ; } @SuppressWarnings ( <str> ) public static < T > Notification < T > createOnCompleted ( Class < T > type ) { return ( Notification < T > ) ON_COMPLETED ; } private Notification ( Kind kind , T value , Throwable e ) { this . value = value ; this . throwable = e ; this . kind = kind ; } public Throwable getThrowable ( ) { return throwable ; } public T getValue ( ) { return value ; } public boolean hasValue ( ) { return isOnNext ( ) & & value ! = null ; } public boolean hasThrowable ( ) { return isOnError ( ) & & throwable ! = null ; } public Kind getKind ( ) { return kind ; } public boolean isOnError ( ) { return getKind ( ) = = Kind . OnError ; } public boolean isOnCompleted ( ) { return getKind ( ) = = Kind . OnCompleted ; } public boolean isOnNext ( ) { return getKind ( ) = = Kind . OnNext ; } public void accept ( Observer < ? super T > observer ) { if ( isOnNext ( ) ) { observer . onNext ( getValue ( ) ) ; } else if ( isOnCompleted ( ) ) { observer . onCompleted ( ) ; } else if ( isOnError ( ) ) { observer . onError ( getThrowable ( ) ) ; } } public enum Kind { OnNext , OnError , OnCompleted } @Override public String toString ( ) { StringBuilder str = new StringBuilder ( <str> ) . append ( super . toString ( ) ) . append ( <str> ) . append ( getKind ( ) ) ; if ( hasValue ( ) ) str . append ( <str> ) . append ( getValue ( ) ) ; if ( hasThrowable ( ) ) str . append ( <str> ) . append ( getThrowable ( ) . getMessage ( ) ) ; str . append ( <str> ) ; return str . toString ( ) ; } @Override public int hashCode ( ) { int hash = getKind ( ) . hashCode ( ) ; if ( hasValue ( ) ) hash = hash * <int> + getValue ( ) . hashCode ( ) ; if ( hasThrowable ( ) ) hash = hash * <int> + getThrowable ( ) . hashCode ( ) ; return hash ; } @Override public boolean equals ( Object obj ) { if ( obj = = null ) { return false ; } if ( this = = obj ) { return true ; } if ( obj . getClass ( ) ! = getClass ( ) ) { return false ; } Notification < ? > notification = ( Notification < ? > ) obj ; if ( notification . getKind ( ) ! = getKind ( ) ) { return false ; } if ( hasValue ( ) & & ! getValue ( ) . equals ( notification . getValue ( ) ) ) { return false ; } if ( hasThrowable ( ) & & ! getThrowable ( ) . equals ( notification . getThrowable ( ) ) ) { return false ; } if ( ! hasValue ( ) & & ! hasThrowable ( ) & & notification . hasValue ( ) ) { return false ; } if ( ! hasValue ( ) & & ! hasThrowable ( ) & & notification . hasThrowable ( ) ) { return false ; } return true ; } }
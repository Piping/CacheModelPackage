package org . apache . cassandra . io . sstable . metadata ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . util . Collections ; import java . util . EnumSet ; import java . util . Map ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . db . SerializationHeader ; import org . apache . cassandra . db . commitlog . ReplayPosition ; import org . apache . cassandra . dht . RandomPartitioner ; import org . apache . cassandra . io . sstable . Component ; import org . apache . cassandra . io . sstable . Descriptor ; import org . apache . cassandra . io . sstable . format . big . BigFormat ; import org . apache . cassandra . io . util . BufferedDataOutputStreamPlus ; import org . apache . cassandra . io . util . DataOutputStreamPlus ; import org . apache . cassandra . io . util . RandomAccessReader ; import static org . junit . Assert . assertEquals ; public class MetadataSerializerTest { @Test public void testSerialization ( ) throws IOException { CFMetaData cfm = SchemaLoader . standardCFMD ( <str> , <str> ) ; ReplayPosition rp = new ReplayPosition ( <int> , <int> ) ; MetadataCollector collector = new MetadataCollector ( cfm . comparator ) . replayPosition ( rp ) ; String partitioner = RandomPartitioner . class . getCanonicalName ( ) ; double bfFpChance = <float> ; Map < MetadataType , MetadataComponent > originalMetadata = collector . finalizeMetadata ( partitioner , bfFpChance , <int> , SerializationHeader . make ( cfm , Collections . EMPTY_LIST ) ) ; MetadataSerializer serializer = new MetadataSerializer ( ) ; File statsFile = File . createTempFile ( Component . STATS . name , null ) ; try ( DataOutputStreamPlus out = new BufferedDataOutputStreamPlus ( new FileOutputStream ( statsFile ) ) ) { serializer . serialize ( originalMetadata , out , BigFormat . latestVersion ) ; } Descriptor desc = new Descriptor ( statsFile . getParentFile ( ) , <str> , <str> , <int> ) ; try ( RandomAccessReader in = RandomAccessReader . open ( statsFile ) ) { Map < MetadataType , MetadataComponent > deserialized = serializer . deserialize ( desc , in , EnumSet . allOf ( MetadataType . class ) ) ; for ( MetadataType type : MetadataType . values ( ) ) { assertEquals ( originalMetadata . get ( type ) , deserialized . get ( type ) ) ; } } } }
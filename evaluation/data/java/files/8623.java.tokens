package org . eclipse . debug . internal . ui . model . elements ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . DefaultLabelProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . resource . JFaceResources ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . swt . graphics . FontData ; import org . eclipse . swt . graphics . RGB ; public class VariableLabelProvider extends DebugElementLabelProvider { @Override protected RGB getBackground ( TreePath elementPath , IPresentationContext presentationContext , String columnId ) throws CoreException { Object element = elementPath . getLastSegment ( ) ; if ( columnId ! = null ) { if ( element instanceof IVariable ) { IVariable variable = ( IVariable ) element ; if ( variable . hasValueChanged ( ) ) { return DebugUIPlugin . getPreferenceColor ( IDebugUIConstants . PREF_CHANGED_VALUE_BACKGROUND ) . getRGB ( ) ; } } } return super . getBackground ( elementPath , presentationContext , columnId ) ; } @Override protected RGB getForeground ( TreePath elementPath , IPresentationContext presentationContext , String columnId ) throws CoreException { Object element = elementPath . getLastSegment ( ) ; if ( columnId = = null ) { if ( element instanceof IVariable ) { IVariable variable = ( IVariable ) element ; if ( variable . hasValueChanged ( ) ) { return DebugUIPlugin . getPreferenceColor ( IDebugUIConstants . PREF_CHANGED_DEBUG_ELEMENT_COLOR ) . getRGB ( ) ; } } } return super . getForeground ( elementPath , presentationContext , columnId ) ; } @Override protected ImageDescriptor getImageDescriptor ( TreePath elementPath , IPresentationContext presentationContext , String columnId ) throws CoreException { if ( columnId = = null | | IDebugUIConstants . COLUMN_ID_VARIABLE_NAME . equals ( columnId ) ) { return super . getImageDescriptor ( elementPath , presentationContext , columnId ) ; } return null ; } @Override protected FontData getFontData ( TreePath elementPath , IPresentationContext presentationContext , String columnId ) throws CoreException { return JFaceResources . getFontDescriptor ( IDebugUIConstants . PREF_VARIABLE_TEXT_FONT ) . getFontData ( ) [ <int> ] ; } @Override protected String getLabel ( TreePath elementPath , IPresentationContext context , String columnId ) throws CoreException { if ( columnId = = null ) { return super . getLabel ( elementPath , context , columnId ) ; } else { IVariable variable = ( IVariable ) elementPath . getLastSegment ( ) ; IValue value = variable . getValue ( ) ; return getColumnText ( variable , value , context , columnId ) ; } } protected String getColumnText ( IVariable variable , IValue value , IPresentationContext context , String columnId ) throws CoreException { if ( IDebugUIConstants . COLUMN_ID_VARIABLE_NAME . equals ( columnId ) ) { return getVariableName ( variable , context ) ; } else if ( IDebugUIConstants . COLUMN_ID_VARIABLE_TYPE . equals ( columnId ) ) { return getVariableTypeName ( variable , context ) ; } else if ( IDebugUIConstants . COLUMN_ID_VARIABLE_VALUE . equals ( columnId ) ) { return getValueText ( variable , value , context ) ; } else if ( IDebugUIConstants . COLUMN_ID_VARIABLE_VALUE_TYPE . equals ( columnId ) ) { return getValueTypeName ( variable , value , context ) ; } return null ; } protected String getVariableName ( IVariable variable , IPresentationContext context ) throws CoreException { return variable . getName ( ) ; } protected String getVariableTypeName ( IVariable variable , IPresentationContext context ) throws CoreException { return variable . getReferenceTypeName ( ) ; } protected String getValueTypeName ( IVariable variable , IValue value , IPresentationContext context ) throws CoreException { return value . getReferenceTypeName ( ) ; } protected String getValueText ( IVariable variable , IValue value , IPresentationContext context ) throws CoreException { return escapeSpecialChars ( value . getValueString ( ) ) ; } protected String escapeSpecialChars ( String label ) { return DefaultLabelProvider . escapeSpecialChars ( label ) ; } }
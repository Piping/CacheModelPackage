package io . netty . channel ; import java . net . SocketAddress ; @Deprecated public class CombinedChannelDuplexHandler < I extends ChannelInboundHandler , O extends ChannelOutboundHandler > extends ChannelDuplexHandler { private I inboundHandler ; private O outboundHandler ; protected CombinedChannelDuplexHandler ( ) { } public CombinedChannelDuplexHandler ( I inboundHandler , O outboundHandler ) { init ( inboundHandler , outboundHandler ) ; } protected final void init ( I inboundHandler , O outboundHandler ) { validate ( inboundHandler , outboundHandler ) ; this . inboundHandler = inboundHandler ; this . outboundHandler = outboundHandler ; } private void validate ( I inboundHandler , O outboundHandler ) { if ( this . inboundHandler ! = null ) { throw new IllegalStateException ( <str> + CombinedChannelDuplexHandler . class . getSimpleName ( ) + <str> ) ; } if ( inboundHandler = = null ) { throw new NullPointerException ( <str> ) ; } if ( outboundHandler = = null ) { throw new NullPointerException ( <str> ) ; } if ( inboundHandler instanceof ChannelOutboundHandler ) { throw new IllegalArgumentException ( <str> + ChannelOutboundHandler . class . getSimpleName ( ) + <str> ) ; } if ( outboundHandler instanceof ChannelInboundHandler ) { throw new IllegalArgumentException ( <str> + ChannelInboundHandler . class . getSimpleName ( ) + <str> ) ; } } protected final I inboundHandler ( ) { return inboundHandler ; } protected final O outboundHandler ( ) { return outboundHandler ; } @Override public void handlerAdded ( ChannelHandlerContext ctx ) throws Exception { if ( inboundHandler = = null ) { throw new IllegalStateException ( <str> + ChannelPipeline . class . getSimpleName ( ) + <str> + CombinedChannelDuplexHandler . class . getSimpleName ( ) + <str> ) ; } try { inboundHandler . handlerAdded ( ctx ) ; } finally { outboundHandler . handlerAdded ( ctx ) ; } } @Override public void handlerRemoved ( ChannelHandlerContext ctx ) throws Exception { try { inboundHandler . handlerRemoved ( ctx ) ; } finally { outboundHandler . handlerRemoved ( ctx ) ; } } @Override public void channelRegistered ( ChannelHandlerContext ctx ) throws Exception { inboundHandler . channelRegistered ( ctx ) ; } @Override public void channelUnregistered ( ChannelHandlerContext ctx ) throws Exception { inboundHandler . channelUnregistered ( ctx ) ; } @Override public void channelActive ( ChannelHandlerContext ctx ) throws Exception { inboundHandler . channelActive ( ctx ) ; } @Override public void channelInactive ( ChannelHandlerContext ctx ) throws Exception { inboundHandler . channelInactive ( ctx ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { inboundHandler . exceptionCaught ( ctx , cause ) ; } @Override public void userEventTriggered ( ChannelHandlerContext ctx , Object evt ) throws Exception { inboundHandler . userEventTriggered ( ctx , evt ) ; } @Override public void channelRead ( ChannelHandlerContext ctx , Object msg ) throws Exception { inboundHandler . channelRead ( ctx , msg ) ; } @Override public void channelReadComplete ( ChannelHandlerContext ctx ) throws Exception { inboundHandler . channelReadComplete ( ctx ) ; } @Override public void bind ( ChannelHandlerContext ctx , SocketAddress localAddress , ChannelPromise promise ) throws Exception { outboundHandler . bind ( ctx , localAddress , promise ) ; } @Override public void connect ( ChannelHandlerContext ctx , SocketAddress remoteAddress , SocketAddress localAddress , ChannelPromise promise ) throws Exception { outboundHandler . connect ( ctx , remoteAddress , localAddress , promise ) ; } @Override public void disconnect ( ChannelHandlerContext ctx , ChannelPromise promise ) throws Exception { outboundHandler . disconnect ( ctx , promise ) ; } @Override public void close ( ChannelHandlerContext ctx , ChannelPromise promise ) throws Exception { outboundHandler . close ( ctx , promise ) ; } @Override public void deregister ( ChannelHandlerContext ctx , ChannelPromise promise ) throws Exception { outboundHandler . deregister ( ctx , promise ) ; } @Override public void read ( ChannelHandlerContext ctx ) throws Exception { outboundHandler . read ( ctx ) ; } @Override public void write ( ChannelHandlerContext ctx , Object msg , ChannelPromise promise ) throws Exception { outboundHandler . write ( ctx , msg , promise ) ; } @Override public void flush ( ChannelHandlerContext ctx ) throws Exception { outboundHandler . flush ( ctx ) ; } @Override public void channelWritabilityChanged ( ChannelHandlerContext ctx ) throws Exception { inboundHandler . channelWritabilityChanged ( ctx ) ; } }
package com . badlogic . gdx . graphics . g3d . model ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . VertexAttributes ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . collision . BoundingBox ; public class MeshPart { public String id ; public int primitiveType ; public int offset ; public int size ; public Mesh mesh ; public final Vector3 center = new Vector3 ( ) ; public final Vector3 halfExtents = new Vector3 ( ) ; public float radius = - <int> ; private final static BoundingBox bounds = new BoundingBox ( ) ; public MeshPart ( ) { } public MeshPart ( final String id , final Mesh mesh , final int offset , final int size , final int type ) { set ( id , mesh , offset , size , type ) ; } public MeshPart ( final MeshPart copyFrom ) { set ( copyFrom ) ; } public MeshPart set ( final MeshPart other ) { this . id = other . id ; this . mesh = other . mesh ; this . offset = other . offset ; this . size = other . size ; this . primitiveType = other . primitiveType ; this . center . set ( other . center ) ; this . halfExtents . set ( other . halfExtents ) ; this . radius = other . radius ; return this ; } public MeshPart set ( final String id , final Mesh mesh , final int offset , final int size , final int type ) { this . id = id ; this . mesh = mesh ; this . offset = offset ; this . size = size ; this . primitiveType = type ; this . center . set ( <int> , <int> , <int> ) ; this . halfExtents . set ( <int> , <int> , <int> ) ; this . radius = - <int> f ; return this ; } public void update ( ) { mesh . calculateBoundingBox ( bounds , offset , size ) ; bounds . getCenter ( center ) ; bounds . getDimensions ( halfExtents ) . scl ( <float> ) ; radius = halfExtents . len ( ) ; } public boolean equals ( final MeshPart other ) { return other = = this | | ( other ! = null & & other . mesh = = mesh & & other . primitiveType = = primitiveType & & other . offset = = offset & & other . size = = size ) ; } @Override public boolean equals ( final Object arg0 ) { if ( arg0 = = null ) return false ; if ( arg0 = = this ) return true ; if ( ! ( arg0 instanceof MeshPart ) ) return false ; return equals ( ( MeshPart ) arg0 ) ; } public void render ( ShaderProgram shader , boolean autoBind ) { mesh . render ( shader , primitiveType , offset , size , autoBind ) ; } public void render ( ShaderProgram shader ) { mesh . render ( shader , primitiveType , offset , size ) ; } }
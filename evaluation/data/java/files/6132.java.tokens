package rx . internal . producers ; import java . util . concurrent . atomic . AtomicBoolean ; import rx . * ; import rx . exceptions . * ; public final class SingleProducer < T > extends AtomicBoolean implements Producer { private static final long serialVersionUID = - <int> ; final Subscriber < ? super T > child ; final T value ; public SingleProducer ( Subscriber < ? super T > child , T value ) { this . child = child ; this . value = value ; } @Override public void request ( long n ) { if ( n < <int> ) { throw new IllegalArgumentException ( <str> ) ; } if ( n = = <int> ) { return ; } if ( compareAndSet ( false , true ) ) { final Subscriber < ? super T > c = child ; T v = value ; if ( c . isUnsubscribed ( ) ) { return ; } try { c . onNext ( v ) ; } catch ( Throwable e ) { Exceptions . throwOrReport ( e , c , v ) ; return ; } if ( c . isUnsubscribed ( ) ) { return ; } c . onCompleted ( ) ; } } }
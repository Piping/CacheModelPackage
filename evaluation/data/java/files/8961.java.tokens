package org . eclipse . ui . internal . console ; import org . eclipse . jface . text . ITypedRegion ; import org . eclipse . swt . custom . StyleRange ; import org . eclipse . swt . graphics . Color ; import org . eclipse . ui . console . ConsolePlugin ; import org . eclipse . ui . console . IOConsoleInputStream ; import org . eclipse . ui . console . IOConsoleOutputStream ; public class IOConsolePartition implements ITypedRegion { public static final String OUTPUT_PARTITION_TYPE = ConsolePlugin . getUniqueIdentifier ( ) + <str> ; public static final String INPUT_PARTITION_TYPE = ConsolePlugin . getUniqueIdentifier ( ) + <str> ; private StringBuffer buffer ; private String type ; private int offset ; private boolean readOnly ; private IOConsoleOutputStream outputStream ; private IOConsoleInputStream inputStream ; private int length ; public IOConsolePartition ( IOConsoleOutputStream outputStream , int length ) { this . outputStream = outputStream ; this . length = length ; this . type = OUTPUT_PARTITION_TYPE ; this . readOnly = true ; } public IOConsolePartition ( IOConsoleInputStream inputStream , String text ) { this . inputStream = inputStream ; buffer = new StringBuffer ( text ) ; length = text . length ( ) ; this . type = INPUT_PARTITION_TYPE ; this . readOnly = false ; } public void insert ( String s , int insertOffset ) { buffer . insert ( insertOffset , s ) ; length + = s . length ( ) ; } public void delete ( int delOffset , int delLength ) { buffer . delete ( delOffset , delOffset + delLength ) ; length - = delLength ; } @Override public String getType ( ) { return type ; } @Override public int getLength ( ) { return length ; } @Override public int getOffset ( ) { return offset ; } public void setOffset ( int offset ) { this . offset = offset ; } public void setLength ( int length ) { this . length = length ; } public String getString ( ) { return buffer . toString ( ) ; } public StyleRange getStyleRange ( int rangeOffset , int rangeLength ) { return new StyleRange ( rangeOffset , rangeLength , getColor ( ) , null , getFontStyle ( ) ) ; } private int getFontStyle ( ) { if ( type . equals ( INPUT_PARTITION_TYPE ) ) { return inputStream . getFontStyle ( ) ; } return outputStream . getFontStyle ( ) ; } public Color getColor ( ) { if ( type . equals ( INPUT_PARTITION_TYPE ) ) { return inputStream . getColor ( ) ; } return outputStream . getColor ( ) ; } public boolean isReadOnly ( ) { return readOnly ; } public void setReadOnly ( ) { readOnly = true ; } public void clearBuffer ( ) { buffer . setLength ( <int> ) ; } IOConsoleOutputStream getStream ( ) { return outputStream ; } }
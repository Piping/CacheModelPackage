package org . elasticsearch . action . admin . indices . get ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . admin . indices . get . GetIndexRequest . Feature ; import org . elasticsearch . cluster . metadata . AliasMetaData ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexNotFoundException ; import org . elasticsearch . search . warmer . IndexWarmersMetaData . Entry ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import static org . elasticsearch . cluster . metadata . IndexMetaData . INDEX_METADATA_BLOCK ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_METADATA ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; @ESIntegTestCase.SuiteScopeTestCase public class GetIndexIT extends ESIntegTestCase { @Override protected void setupSuiteScopeCluster ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . addMapping ( <str> , <str> ) . setSettings ( Settings . builder ( ) . put ( <str> , <int> ) ) . get ( ) ) ; ensureSearchable ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) ) . get ( ) ) ; createIndex ( <str> ) ; ensureSearchable ( <str> , <str> ) ; } public void testSimple ( ) { GetIndexResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) . get ( ) ; String [ ] indices = response . indices ( ) ; assertThat ( indices , notNullValue ( ) ) ; assertThat ( indices . length , equalTo ( <int> ) ) ; assertThat ( indices [ <int> ] , equalTo ( <str> ) ) ; assertAliases ( response , <str> ) ; assertMappings ( response , <str> ) ; assertSettings ( response , <str> ) ; assertWarmers ( response , <str> ) ; } public void testSimpleUnknownIndex ( ) { try { client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testEmpty ( ) { GetIndexResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) . get ( ) ; String [ ] indices = response . indices ( ) ; assertThat ( indices , notNullValue ( ) ) ; assertThat ( indices . length , equalTo ( <int> ) ) ; assertThat ( indices [ <int> ] , equalTo ( <str> ) ) ; assertEmptyAliases ( response ) ; assertEmptyOrOnlyDefaultMappings ( response , <str> ) ; assertNonEmptySettings ( response , <str> ) ; assertEmptyWarmers ( response ) ; } public void testSimpleMapping ( ) { GetIndexResponse response = runWithRandomFeatureMethod ( client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) , Feature . MAPPINGS ) ; String [ ] indices = response . indices ( ) ; assertThat ( indices , notNullValue ( ) ) ; assertThat ( indices . length , equalTo ( <int> ) ) ; assertThat ( indices [ <int> ] , equalTo ( <str> ) ) ; assertMappings ( response , <str> ) ; assertEmptyAliases ( response ) ; assertEmptySettings ( response ) ; assertEmptyWarmers ( response ) ; } public void testSimpleAlias ( ) { GetIndexResponse response = runWithRandomFeatureMethod ( client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) , Feature . ALIASES ) ; String [ ] indices = response . indices ( ) ; assertThat ( indices , notNullValue ( ) ) ; assertThat ( indices . length , equalTo ( <int> ) ) ; assertThat ( indices [ <int> ] , equalTo ( <str> ) ) ; assertAliases ( response , <str> ) ; assertEmptyMappings ( response ) ; assertEmptySettings ( response ) ; assertEmptyWarmers ( response ) ; } public void testSimpleSettings ( ) { GetIndexResponse response = runWithRandomFeatureMethod ( client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) , Feature . SETTINGS ) ; String [ ] indices = response . indices ( ) ; assertThat ( indices , notNullValue ( ) ) ; assertThat ( indices . length , equalTo ( <int> ) ) ; assertThat ( indices [ <int> ] , equalTo ( <str> ) ) ; assertSettings ( response , <str> ) ; assertEmptyAliases ( response ) ; assertEmptyMappings ( response ) ; assertEmptyWarmers ( response ) ; } public void testSimpleWarmer ( ) { GetIndexResponse response = runWithRandomFeatureMethod ( client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) , Feature . WARMERS ) ; String [ ] indices = response . indices ( ) ; assertThat ( indices , notNullValue ( ) ) ; assertThat ( indices . length , equalTo ( <int> ) ) ; assertThat ( indices [ <int> ] , equalTo ( <str> ) ) ; assertWarmers ( response , <str> ) ; assertEmptyAliases ( response ) ; assertEmptyMappings ( response ) ; assertEmptySettings ( response ) ; } public void testSimpleMixedFeatures ( ) { int numFeatures = randomIntBetween ( <int> , Feature . values ( ) . length ) ; List < Feature > features = new ArrayList < Feature > ( numFeatures ) ; for ( int i = <int> ; i < numFeatures ; i + + ) { features . add ( randomFrom ( Feature . values ( ) ) ) ; } GetIndexResponse response = runWithRandomFeatureMethod ( client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) , features . toArray ( new Feature [ features . size ( ) ] ) ) ; String [ ] indices = response . indices ( ) ; assertThat ( indices , notNullValue ( ) ) ; assertThat ( indices . length , equalTo ( <int> ) ) ; assertThat ( indices [ <int> ] , equalTo ( <str> ) ) ; if ( features . contains ( Feature . ALIASES ) ) { assertAliases ( response , <str> ) ; } else { assertEmptyAliases ( response ) ; } if ( features . contains ( Feature . MAPPINGS ) ) { assertMappings ( response , <str> ) ; } else { assertEmptyMappings ( response ) ; } if ( features . contains ( Feature . SETTINGS ) ) { assertSettings ( response , <str> ) ; } else { assertEmptySettings ( response ) ; } if ( features . contains ( Feature . WARMERS ) ) { assertWarmers ( response , <str> ) ; } else { assertEmptyWarmers ( response ) ; } } public void testEmptyMixedFeatures ( ) { int numFeatures = randomIntBetween ( <int> , Feature . values ( ) . length ) ; List < Feature > features = new ArrayList < Feature > ( numFeatures ) ; for ( int i = <int> ; i < numFeatures ; i + + ) { features . add ( randomFrom ( Feature . values ( ) ) ) ; } GetIndexResponse response = runWithRandomFeatureMethod ( client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) , features . toArray ( new Feature [ features . size ( ) ] ) ) ; String [ ] indices = response . indices ( ) ; assertThat ( indices , notNullValue ( ) ) ; assertThat ( indices . length , equalTo ( <int> ) ) ; assertThat ( indices [ <int> ] , equalTo ( <str> ) ) ; assertEmptyAliases ( response ) ; if ( features . contains ( Feature . MAPPINGS ) ) { assertEmptyOrOnlyDefaultMappings ( response , <str> ) ; } else { assertEmptyMappings ( response ) ; } if ( features . contains ( Feature . SETTINGS ) ) { assertNonEmptySettings ( response , <str> ) ; } else { assertEmptySettings ( response ) ; } assertEmptyWarmers ( response ) ; } public void testGetIndexWithBlocks ( ) { for ( String block : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE , SETTING_READ_ONLY ) ) { try { enableIndexBlock ( <str> , block ) ; GetIndexResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) . addFeatures ( Feature . MAPPINGS , Feature . ALIASES ) . get ( ) ; String [ ] indices = response . indices ( ) ; assertThat ( indices , notNullValue ( ) ) ; assertThat ( indices . length , equalTo ( <int> ) ) ; assertThat ( indices [ <int> ] , equalTo ( <str> ) ) ; assertMappings ( response , <str> ) ; assertAliases ( response , <str> ) ; } finally { disableIndexBlock ( <str> , block ) ; } } try { enableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . addIndices ( <str> ) . addFeatures ( Feature . MAPPINGS , Feature . ALIASES ) , INDEX_METADATA_BLOCK ) ; } finally { disableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; } } private GetIndexResponse runWithRandomFeatureMethod ( GetIndexRequestBuilder requestBuilder , Feature . . . features ) { if ( randomBoolean ( ) ) { return requestBuilder . addFeatures ( features ) . get ( ) ; } else { return requestBuilder . setFeatures ( features ) . get ( ) ; } } private void assertWarmers ( GetIndexResponse response , String indexName ) { ImmutableOpenMap < String , List < Entry > > warmers = response . warmers ( ) ; assertThat ( warmers , notNullValue ( ) ) ; assertThat ( warmers . size ( ) , equalTo ( <int> ) ) ; List < Entry > indexWarmers = warmers . get ( indexName ) ; assertThat ( indexWarmers , notNullValue ( ) ) ; assertThat ( indexWarmers . size ( ) , equalTo ( <int> ) ) ; Entry warmer = indexWarmers . get ( <int> ) ; assertThat ( warmer , notNullValue ( ) ) ; assertThat ( warmer . name ( ) , equalTo ( <str> ) ) ; } private void assertSettings ( GetIndexResponse response , String indexName ) { ImmutableOpenMap < String , Settings > settings = response . settings ( ) ; assertThat ( settings , notNullValue ( ) ) ; assertThat ( settings . size ( ) , equalTo ( <int> ) ) ; Settings indexSettings = settings . get ( indexName ) ; assertThat ( indexSettings , notNullValue ( ) ) ; assertThat ( indexSettings . get ( <str> ) , equalTo ( <str> ) ) ; } private void assertNonEmptySettings ( GetIndexResponse response , String indexName ) { ImmutableOpenMap < String , Settings > settings = response . settings ( ) ; assertThat ( settings , notNullValue ( ) ) ; assertThat ( settings . size ( ) , equalTo ( <int> ) ) ; Settings indexSettings = settings . get ( indexName ) ; assertThat ( indexSettings , notNullValue ( ) ) ; } private void assertMappings ( GetIndexResponse response , String indexName ) { ImmutableOpenMap < String , ImmutableOpenMap < String , MappingMetaData > > mappings = response . mappings ( ) ; assertThat ( mappings , notNullValue ( ) ) ; assertThat ( mappings . size ( ) , equalTo ( <int> ) ) ; ImmutableOpenMap < String , MappingMetaData > indexMappings = mappings . get ( indexName ) ; assertThat ( indexMappings , notNullValue ( ) ) ; assertThat ( indexMappings . size ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; if ( indexMappings . size ( ) = = <int> ) { MappingMetaData mapping = indexMappings . get ( <str> ) ; assertThat ( mapping , notNullValue ( ) ) ; } MappingMetaData mapping = indexMappings . get ( <str> ) ; assertThat ( mapping , notNullValue ( ) ) ; assertThat ( mapping . type ( ) , equalTo ( <str> ) ) ; } private void assertEmptyOrOnlyDefaultMappings ( GetIndexResponse response , String indexName ) { ImmutableOpenMap < String , ImmutableOpenMap < String , MappingMetaData > > mappings = response . mappings ( ) ; assertThat ( mappings , notNullValue ( ) ) ; assertThat ( mappings . size ( ) , equalTo ( <int> ) ) ; ImmutableOpenMap < String , MappingMetaData > indexMappings = mappings . get ( indexName ) ; assertThat ( indexMappings , notNullValue ( ) ) ; assertThat ( indexMappings . size ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; if ( indexMappings . size ( ) = = <int> ) { MappingMetaData mapping = indexMappings . get ( <str> ) ; assertThat ( mapping , notNullValue ( ) ) ; } } private void assertAliases ( GetIndexResponse response , String indexName ) { ImmutableOpenMap < String , List < AliasMetaData > > aliases = response . aliases ( ) ; assertThat ( aliases , notNullValue ( ) ) ; assertThat ( aliases . size ( ) , equalTo ( <int> ) ) ; List < AliasMetaData > indexAliases = aliases . get ( indexName ) ; assertThat ( indexAliases , notNullValue ( ) ) ; assertThat ( indexAliases . size ( ) , equalTo ( <int> ) ) ; AliasMetaData alias = indexAliases . get ( <int> ) ; assertThat ( alias , notNullValue ( ) ) ; assertThat ( alias . alias ( ) , equalTo ( <str> ) ) ; } private void assertEmptyWarmers ( GetIndexResponse response ) { assertThat ( response . warmers ( ) , notNullValue ( ) ) ; assertThat ( response . warmers ( ) . isEmpty ( ) , equalTo ( true ) ) ; } private void assertEmptySettings ( GetIndexResponse response ) { assertThat ( response . settings ( ) , notNullValue ( ) ) ; assertThat ( response . settings ( ) . isEmpty ( ) , equalTo ( true ) ) ; } private void assertEmptyMappings ( GetIndexResponse response ) { assertThat ( response . mappings ( ) , notNullValue ( ) ) ; assertThat ( response . mappings ( ) . isEmpty ( ) , equalTo ( true ) ) ; } private void assertEmptyAliases ( GetIndexResponse response ) { assertThat ( response . aliases ( ) , notNullValue ( ) ) ; assertThat ( response . aliases ( ) . isEmpty ( ) , equalTo ( true ) ) ; } } 

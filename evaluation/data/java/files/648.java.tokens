package org . elasticsearch . test . client ; import com . carrotsearch . randomizedtesting . generators . RandomPicks ; import org . apache . lucene . util . TestUtil ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . FilterClient ; import org . elasticsearch . cluster . routing . Preference ; import java . util . Arrays ; import java . util . EnumSet ; import java . util . Random ; public class RandomizingClient extends FilterClient { private final SearchType defaultSearchType ; private final String defaultPreference ; public RandomizingClient ( Client client , Random random ) { super ( client ) ; defaultSearchType = RandomPicks . randomFrom ( random , Arrays . asList ( SearchType . DFS_QUERY_THEN_FETCH , SearchType . QUERY_THEN_FETCH ) ) ; if ( random . nextInt ( <int> ) = = <int> ) { defaultPreference = RandomPicks . randomFrom ( random , EnumSet . of ( Preference . PRIMARY_FIRST , Preference . LOCAL ) ) . type ( ) ; } else if ( random . nextInt ( <int> ) = = <int> ) { String s = TestUtil . randomRealisticUnicodeString ( random , <int> , <int> ) ; defaultPreference = s . startsWith ( <str> ) ? null : s ; } else { defaultPreference = null ; } } @Override public SearchRequestBuilder prepareSearch ( String . . . indices ) { return in . prepareSearch ( indices ) . setSearchType ( defaultSearchType ) . setPreference ( defaultPreference ) ; } @Override public String toString ( ) { return <str> + super . toString ( ) + <str> ; } } 

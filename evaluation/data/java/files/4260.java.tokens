package io . netty . testsuite . transport . socket ; import io . netty . bootstrap . AbstractBootstrap ; import io . netty . bootstrap . Bootstrap ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . channel . Channel ; import io . netty . channel . ChannelFactory ; import io . netty . channel . ChannelOption ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . oio . OioEventLoopGroup ; import io . netty . channel . socket . InternetProtocolFamily ; import io . netty . channel . socket . nio . NioDatagramChannel ; import io . netty . channel . socket . nio . NioServerSocketChannel ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . channel . socket . oio . OioDatagramChannel ; import io . netty . channel . socket . oio . OioServerSocketChannel ; import io . netty . channel . socket . oio . OioSocketChannel ; import io . netty . testsuite . transport . TestsuitePermutation . BootstrapComboFactory ; import io . netty . testsuite . transport . TestsuitePermutation . BootstrapFactory ; import io . netty . util . concurrent . DefaultThreadFactory ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class SocketTestPermutation { static final SocketTestPermutation INSTANCE = new SocketTestPermutation ( ) ; protected static final int BOSSES = <int> ; protected static final int WORKERS = <int> ; protected static final int OIO_SO_TIMEOUT = <int> ; protected final EventLoopGroup nioBossGroup = new NioEventLoopGroup ( BOSSES , new DefaultThreadFactory ( <str> , true ) ) ; protected final EventLoopGroup nioWorkerGroup = new NioEventLoopGroup ( WORKERS , new DefaultThreadFactory ( <str> , true ) ) ; protected final EventLoopGroup oioBossGroup = new OioEventLoopGroup ( Integer . MAX_VALUE , new DefaultThreadFactory ( <str> , true ) ) ; protected final EventLoopGroup oioWorkerGroup = new OioEventLoopGroup ( Integer . MAX_VALUE , new DefaultThreadFactory ( <str> , true ) ) ; protected < A extends AbstractBootstrap < ? , ? > , B extends AbstractBootstrap < ? , ? > > List < BootstrapComboFactory < A , B > > combo ( List < BootstrapFactory < A > > sbfs , List < BootstrapFactory < B > > cbfs ) { List < BootstrapComboFactory < A , B > > list = new ArrayList < BootstrapComboFactory < A , B > > ( ) ; for ( BootstrapFactory < A > sbf : sbfs ) { for ( BootstrapFactory < B > cbf : cbfs ) { final BootstrapFactory < A > sbf0 = sbf ; final BootstrapFactory < B > cbf0 = cbf ; list . add ( new BootstrapComboFactory < A , B > ( ) { @Override public A newServerInstance ( ) { return sbf0 . newInstance ( ) ; } @Override public B newClientInstance ( ) { return cbf0 . newInstance ( ) ; } } ) ; } } return list ; } public List < BootstrapComboFactory < ServerBootstrap , Bootstrap > > socket ( ) { List < BootstrapFactory < ServerBootstrap > > sbfs = serverSocket ( ) ; List < BootstrapFactory < Bootstrap > > cbfs = clientSocket ( ) ; List < BootstrapComboFactory < ServerBootstrap , Bootstrap > > list = combo ( sbfs , cbfs ) ; list . remove ( list . size ( ) - <int> ) ; return list ; } public List < BootstrapComboFactory < Bootstrap , Bootstrap > > datagram ( ) { List < BootstrapFactory < Bootstrap > > bfs = Arrays . asList ( new BootstrapFactory < Bootstrap > ( ) { @Override public Bootstrap newInstance ( ) { return new Bootstrap ( ) . group ( nioWorkerGroup ) . channelFactory ( new ChannelFactory < Channel > ( ) { @Override public Channel newChannel ( ) { return new NioDatagramChannel ( InternetProtocolFamily . IPv4 ) ; } @Override public String toString ( ) { return NioDatagramChannel . class . getSimpleName ( ) + <str> ; } } ) ; } } , new BootstrapFactory < Bootstrap > ( ) { @Override public Bootstrap newInstance ( ) { return new Bootstrap ( ) . group ( oioWorkerGroup ) . channel ( OioDatagramChannel . class ) ; } } ) ; return combo ( bfs , bfs ) ; } public List < BootstrapFactory < ServerBootstrap > > serverSocket ( ) { return Arrays . asList ( new BootstrapFactory < ServerBootstrap > ( ) { @Override public ServerBootstrap newInstance ( ) { return new ServerBootstrap ( ) . group ( nioBossGroup , nioWorkerGroup ) . channel ( NioServerSocketChannel . class ) ; } } , new BootstrapFactory < ServerBootstrap > ( ) { @Override public ServerBootstrap newInstance ( ) { return new ServerBootstrap ( ) . group ( oioBossGroup , oioWorkerGroup ) . channel ( OioServerSocketChannel . class ) . option ( ChannelOption . SO_TIMEOUT , OIO_SO_TIMEOUT ) ; } } ) ; } public List < BootstrapFactory < Bootstrap > > clientSocket ( ) { return Arrays . asList ( new BootstrapFactory < Bootstrap > ( ) { @Override public Bootstrap newInstance ( ) { return new Bootstrap ( ) . group ( nioWorkerGroup ) . channel ( NioSocketChannel . class ) ; } } , new BootstrapFactory < Bootstrap > ( ) { @Override public Bootstrap newInstance ( ) { return new Bootstrap ( ) . group ( oioWorkerGroup ) . channel ( OioSocketChannel . class ) . option ( ChannelOption . SO_TIMEOUT , OIO_SO_TIMEOUT ) ; } } ) ; } }
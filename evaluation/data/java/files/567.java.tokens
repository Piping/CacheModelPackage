package org . elasticsearch . similarity ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchQuery ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . not ; public class SimilarityIT extends ESIntegTestCase { public void testCustomBM25Similarity ( ) throws Exception { try { client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . execute ( ) . actionGet ( ) ; } catch ( Exception e ) { } client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <str> ) . put ( <str> , <float> ) . put ( <str> , <float> ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; SearchResponse bm25SearchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( bm25SearchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> l ) ) ; float bm25Score = bm25SearchResponse . getHits ( ) . hits ( ) [ <int> ] . score ( ) ; SearchResponse defaultSearchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( defaultSearchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> l ) ) ; float defaultScore = defaultSearchResponse . getHits ( ) . hits ( ) [ <int> ] . score ( ) ; assertThat ( bm25Score , not ( equalTo ( defaultScore ) ) ) ; } } 

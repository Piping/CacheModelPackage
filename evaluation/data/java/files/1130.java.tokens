package com . netflix . hystrix . examples . basic ; import static org . junit . Assert . * ; import org . junit . Test ; import com . netflix . hystrix . HystrixCommand ; import com . netflix . hystrix . HystrixCommandGroupKey ; import com . netflix . hystrix . strategy . concurrency . HystrixRequestContext ; public class CommandUsingRequestCache extends HystrixCommand < Boolean > { private final int value ; protected CommandUsingRequestCache ( int value ) { super ( HystrixCommandGroupKey . Factory . asKey ( <str> ) ) ; this . value = value ; } @Override protected Boolean run ( ) { return value = = <int> | | value % <int> = = <int> ; } @Override protected String getCacheKey ( ) { return String . valueOf ( value ) ; } public static class UnitTest { @Test public void testWithoutCacheHits ( ) { HystrixRequestContext context = HystrixRequestContext . initializeContext ( ) ; try { assertTrue ( new CommandUsingRequestCache ( <int> ) . execute ( ) ) ; assertFalse ( new CommandUsingRequestCache ( <int> ) . execute ( ) ) ; assertTrue ( new CommandUsingRequestCache ( <int> ) . execute ( ) ) ; assertTrue ( new CommandUsingRequestCache ( <int> ) . execute ( ) ) ; } finally { context . shutdown ( ) ; } } @Test public void testWithCacheHits ( ) { HystrixRequestContext context = HystrixRequestContext . initializeContext ( ) ; try { CommandUsingRequestCache command2a = new CommandUsingRequestCache ( <int> ) ; CommandUsingRequestCache command2b = new CommandUsingRequestCache ( <int> ) ; assertTrue ( command2a . execute ( ) ) ; assertFalse ( command2a . isResponseFromCache ( ) ) ; assertTrue ( command2b . execute ( ) ) ; assertTrue ( command2b . isResponseFromCache ( ) ) ; } finally { context . shutdown ( ) ; } context = HystrixRequestContext . initializeContext ( ) ; try { CommandUsingRequestCache command3b = new CommandUsingRequestCache ( <int> ) ; assertTrue ( command3b . execute ( ) ) ; assertFalse ( command3b . isResponseFromCache ( ) ) ; } finally { context . shutdown ( ) ; } } } } 

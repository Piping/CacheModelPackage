package org . eclipse . debug . internal . ui . model . elements ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IMemoryBlockRetrieval ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerUpdate ; import org . eclipse . debug . ui . IDebugUIConstants ; public class MemoryRetrievalContentProvider extends ElementContentProvider { @Override protected int getChildCount ( Object element , IPresentationContext context , IViewerUpdate monitor ) throws CoreException { return getAllChildren ( element , context , monitor ) . length ; } @Override protected Object [ ] getChildren ( Object parent , int index , int length , IPresentationContext context , IViewerUpdate monitor ) throws CoreException { return getElements ( getAllChildren ( parent , context , monitor ) , index , length ) ; } protected Object [ ] getAllChildren ( Object parent , IPresentationContext context , IViewerUpdate monitor ) { String id = context . getId ( ) ; if ( id . equals ( IDebugUIConstants . ID_MEMORY_VIEW ) ) { if ( parent instanceof IMemoryBlockRetrieval ) { if ( ( ( IMemoryBlockRetrieval ) parent ) . supportsStorageRetrieval ( ) ) return DebugPlugin . getDefault ( ) . getMemoryBlockManager ( ) . getMemoryBlocks ( ( IMemoryBlockRetrieval ) parent ) ; } } return EMPTY ; } @Override protected boolean supportsContextId ( String id ) { return id . equals ( IDebugUIConstants . ID_MEMORY_VIEW ) ; } }
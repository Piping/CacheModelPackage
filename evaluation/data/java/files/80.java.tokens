package com . netflix . hystrix ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . fail ; import com . netflix . hystrix . exception . HystrixBadRequestException ; import org . junit . Before ; import org . junit . Test ; public class HystrixCommandMetricsTest { @Before public void init ( ) { HystrixCommandMetrics . reset ( ) ; Hystrix . reset ( ) ; } @Test public void testGetErrorPercentage ( ) { String key = <str> ; try { HystrixCommand < Boolean > cmd1 = new SuccessCommand ( key , <int> ) ; HystrixCommandMetrics metrics = cmd1 . metrics ; cmd1 . execute ( ) ; Thread . sleep ( <int> ) ; assertEquals ( <int> , metrics . getHealthCounts ( ) . getErrorPercentage ( ) ) ; HystrixCommand < Boolean > cmd2 = new FailureCommand ( key , <int> ) ; cmd2 . execute ( ) ; Thread . sleep ( <int> ) ; assertEquals ( <int> , metrics . getHealthCounts ( ) . getErrorPercentage ( ) ) ; HystrixCommand < Boolean > cmd3 = new SuccessCommand ( key , <int> ) ; HystrixCommand < Boolean > cmd4 = new SuccessCommand ( key , <int> ) ; cmd3 . execute ( ) ; cmd4 . execute ( ) ; Thread . sleep ( <int> ) ; assertEquals ( <int> , metrics . getHealthCounts ( ) . getErrorPercentage ( ) ) ; HystrixCommand < Boolean > cmd5 = new TimeoutCommand ( key ) ; HystrixCommand < Boolean > cmd6 = new TimeoutCommand ( key ) ; cmd5 . execute ( ) ; cmd6 . execute ( ) ; Thread . sleep ( <int> ) ; assertEquals ( <int> , metrics . getHealthCounts ( ) . getErrorPercentage ( ) ) ; HystrixCommand < Boolean > cmd7 = new SuccessCommand ( key , <int> ) ; HystrixCommand < Boolean > cmd8 = new SuccessCommand ( key , <int> ) ; HystrixCommand < Boolean > cmd9 = new SuccessCommand ( key , <int> ) ; cmd7 . execute ( ) ; cmd8 . execute ( ) ; cmd9 . execute ( ) ; HystrixCommand < Boolean > cmd10 = new SuccessCommand ( key , <int> ) ; cmd10 . execute ( ) ; Thread . sleep ( <int> ) ; assertEquals ( <int> , metrics . getHealthCounts ( ) . getErrorPercentage ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( <str> + e . getMessage ( ) ) ; } } @Test public void testBadRequestsDoNotAffectErrorPercentage ( ) { String key = <str> ; try { HystrixCommand < Boolean > cmd1 = new SuccessCommand ( key , <int> ) ; HystrixCommandMetrics metrics = cmd1 . metrics ; cmd1 . execute ( ) ; Thread . sleep ( <int> ) ; assertEquals ( <int> , metrics . getHealthCounts ( ) . getErrorPercentage ( ) ) ; HystrixCommand < Boolean > cmd2 = new FailureCommand ( key , <int> ) ; cmd2 . execute ( ) ; Thread . sleep ( <int> ) ; assertEquals ( <int> , metrics . getHealthCounts ( ) . getErrorPercentage ( ) ) ; HystrixCommand < Boolean > cmd3 = new BadRequestCommand ( key , <int> ) ; HystrixCommand < Boolean > cmd4 = new BadRequestCommand ( key , <int> ) ; try { cmd3 . execute ( ) ; } catch ( HystrixBadRequestException ex ) { System . out . println ( <str> ) ; } try { cmd4 . execute ( ) ; } catch ( HystrixBadRequestException ex ) { System . out . println ( <str> ) ; } Thread . sleep ( <int> ) ; assertEquals ( <int> , metrics . getHealthCounts ( ) . getErrorPercentage ( ) ) ; HystrixCommand < Boolean > cmd5 = new FailureCommand ( key , <int> ) ; HystrixCommand < Boolean > cmd6 = new FailureCommand ( key , <int> ) ; cmd5 . execute ( ) ; cmd6 . execute ( ) ; Thread . sleep ( <int> ) ; assertEquals ( <int> , metrics . getHealthCounts ( ) . getErrorPercentage ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; fail ( <str> + e . getMessage ( ) ) ; } } @Test public void testCurrentConcurrentExecutionCount ( ) { String key = <str> ; HystrixCommandMetrics metrics = null ; int NUM_CMDS = <int> ; for ( int i = <int> ; i < NUM_CMDS ; i + + ) { HystrixCommand < Boolean > cmd = new SuccessCommand ( key , <int> ) ; if ( metrics = = null ) { metrics = cmd . metrics ; } cmd . queue ( ) ; } try { Thread . sleep ( <int> ) ; } catch ( InterruptedException ie ) { fail ( ie . getMessage ( ) ) ; } assertEquals ( NUM_CMDS , metrics . getCurrentConcurrentExecutionCount ( ) ) ; } private class Command extends HystrixCommand < Boolean > { private final boolean shouldFail ; private final boolean shouldFailWithBadRequest ; private final long latencyToAdd ; public Command ( String commandKey , boolean shouldFail , boolean shouldFailWithBadRequest , long latencyToAdd ) { super ( Setter . withGroupKey ( HystrixCommandGroupKey . Factory . asKey ( <str> ) ) . andCommandKey ( HystrixCommandKey . Factory . asKey ( commandKey ) ) . andCommandPropertiesDefaults ( HystrixCommandPropertiesTest . getUnitTestPropertiesSetter ( ) . withExecutionTimeoutInMilliseconds ( <int> ) . withCircuitBreakerRequestVolumeThreshold ( <int> ) ) ) ; this . shouldFail = shouldFail ; this . shouldFailWithBadRequest = shouldFailWithBadRequest ; this . latencyToAdd = latencyToAdd ; } @Override protected Boolean run ( ) throws Exception { Thread . sleep ( latencyToAdd ) ; if ( shouldFail ) { throw new RuntimeException ( <str> ) ; } if ( shouldFailWithBadRequest ) { throw new HystrixBadRequestException ( <str> ) ; } return true ; } @Override protected Boolean getFallback ( ) { return false ; } } private class SuccessCommand extends Command { SuccessCommand ( String commandKey , long latencyToAdd ) { super ( commandKey , false , false , latencyToAdd ) ; } } private class FailureCommand extends Command { FailureCommand ( String commandKey , long latencyToAdd ) { super ( commandKey , true , false , latencyToAdd ) ; } } private class TimeoutCommand extends Command { TimeoutCommand ( String commandKey ) { super ( commandKey , false , false , <int> ) ; } } private class BadRequestCommand extends Command { BadRequestCommand ( String commandKey , long latencyToAdd ) { super ( commandKey , false , true , latencyToAdd ) ; } } } 

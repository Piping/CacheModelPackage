package org . junit . rules ; import static org . hamcrest . CoreMatchers . allOf ; import static org . junit . matchers . JUnitMatchers . isThrowable ; import java . util . ArrayList ; import java . util . List ; import org . hamcrest . Matcher ; class ExpectedExceptionMatcherBuilder { private final List < Matcher < ? > > matchers = new ArrayList < Matcher < ? > > ( ) ; void add ( Matcher < ? > matcher ) { matchers . add ( matcher ) ; } boolean expectsThrowable ( ) { return ! matchers . isEmpty ( ) ; } Matcher < Throwable > build ( ) { return isThrowable ( allOfTheMatchers ( ) ) ; } private Matcher < Throwable > allOfTheMatchers ( ) { if ( matchers . size ( ) = = <int> ) { return cast ( matchers . get ( <int> ) ) ; } return allOf ( castedMatchers ( ) ) ; } @SuppressWarnings ( { <str> , <str> } ) private List < Matcher < ? super Throwable > > castedMatchers ( ) { return new ArrayList < Matcher < ? super Throwable > > ( ( List ) matchers ) ; } @SuppressWarnings ( <str> ) private Matcher < Throwable > cast ( Matcher < ? > singleMatcher ) { return ( Matcher < Throwable > ) singleMatcher ; } }
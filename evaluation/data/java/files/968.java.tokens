package com . badlogic . gdx . tests . g3d . voxel ; import com . badlogic . gdx . math . Vector3 ; public class VoxelChunk { public static final int VERTEX_SIZE = <int> ; public final byte [ ] voxels ; public final int width ; public final int height ; public final int depth ; public final Vector3 offset = new Vector3 ( ) ; private final int widthTimesHeight ; private final int topOffset ; private final int bottomOffset ; private final int leftOffset ; private final int rightOffset ; private final int frontOffset ; private final int backOffset ; public VoxelChunk ( int width , int height , int depth ) { this . voxels = new byte [ width * height * depth ] ; this . width = width ; this . height = height ; this . depth = depth ; this . topOffset = width * depth ; this . bottomOffset = - width * depth ; this . leftOffset = - <int> ; this . rightOffset = <int> ; this . frontOffset = - width ; this . backOffset = width ; this . widthTimesHeight = width * height ; } public byte get ( int x , int y , int z ) { if ( x < <int> | | x > = width ) return <int> ; if ( y < <int> | | y > = height ) return <int> ; if ( z < <int> | | z > = depth ) return <int> ; return getFast ( x , y , z ) ; } public byte getFast ( int x , int y , int z ) { return voxels [ x + z * width + y * widthTimesHeight ] ; } public void set ( int x , int y , int z , byte voxel ) { if ( x < <int> | | x > = width ) return ; if ( y < <int> | | y > = height ) return ; if ( z < <int> | | z > = depth ) return ; setFast ( x , y , z , voxel ) ; } public void setFast ( int x , int y , int z , byte voxel ) { voxels [ x + z * width + y * widthTimesHeight ] = voxel ; } public int calculateVertices ( float [ ] vertices ) { int i = <int> ; int vertexOffset = <int> ; for ( int y = <int> ; y < height ; y + + ) { for ( int z = <int> ; z < depth ; z + + ) { for ( int x = <int> ; x < width ; x + + , i + + ) { byte voxel = voxels [ i ] ; if ( voxel = = <int> ) continue ; if ( y < height - <int> ) { if ( voxels [ i + topOffset ] = = <int> ) vertexOffset = createTop ( offset , x , y , z , vertices , vertexOffset ) ; } else { vertexOffset = createTop ( offset , x , y , z , vertices , vertexOffset ) ; } if ( y > <int> ) { if ( voxels [ i + bottomOffset ] = = <int> ) vertexOffset = createBottom ( offset , x , y , z , vertices , vertexOffset ) ; } else { vertexOffset = createBottom ( offset , x , y , z , vertices , vertexOffset ) ; } if ( x > <int> ) { if ( voxels [ i + leftOffset ] = = <int> ) vertexOffset = createLeft ( offset , x , y , z , vertices , vertexOffset ) ; } else { vertexOffset = createLeft ( offset , x , y , z , vertices , vertexOffset ) ; } if ( x < width - <int> ) { if ( voxels [ i + rightOffset ] = = <int> ) vertexOffset = createRight ( offset , x , y , z , vertices , vertexOffset ) ; } else { vertexOffset = createRight ( offset , x , y , z , vertices , vertexOffset ) ; } if ( z > <int> ) { if ( voxels [ i + frontOffset ] = = <int> ) vertexOffset = createFront ( offset , x , y , z , vertices , vertexOffset ) ; } else { vertexOffset = createFront ( offset , x , y , z , vertices , vertexOffset ) ; } if ( z < depth - <int> ) { if ( voxels [ i + backOffset ] = = <int> ) vertexOffset = createBack ( offset , x , y , z , vertices , vertexOffset ) ; } else { vertexOffset = createBack ( offset , x , y , z , vertices , vertexOffset ) ; } } } } return vertexOffset / VERTEX_SIZE ; } public static int createTop ( Vector3 offset , int x , int y , int z , float [ ] vertices , int vertexOffset ) { vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; return vertexOffset ; } public static int createBottom ( Vector3 offset , int x , int y , int z , float [ ] vertices , int vertexOffset ) { vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = <int> ; return vertexOffset ; } public static int createLeft ( Vector3 offset , int x , int y , int z , float [ ] vertices , int vertexOffset ) { vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; return vertexOffset ; } public static int createRight ( Vector3 offset , int x , int y , int z , float [ ] vertices , int vertexOffset ) { vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; return vertexOffset ; } public static int createFront ( Vector3 offset , int x , int y , int z , float [ ] vertices , int vertexOffset ) { vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; return vertexOffset ; } public static int createBack ( Vector3 offset , int x , int y , int z , float [ ] vertices , int vertexOffset ) { vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = offset . x + x ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y + <int> ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = - <int> ; vertices [ vertexOffset + + ] = offset . x + x + <int> ; vertices [ vertexOffset + + ] = offset . y + y ; vertices [ vertexOffset + + ] = offset . z + z + <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = <int> ; vertices [ vertexOffset + + ] = - <int> ; return vertexOffset ; } } 

package com . netflix . hystrix . metric ; import com . netflix . hystrix . ExecutionResult ; import com . netflix . hystrix . HystrixCommandKey ; import com . netflix . hystrix . HystrixEventType ; import com . netflix . hystrix . HystrixThreadPoolKey ; import org . junit . Test ; import rx . Subscriber ; import rx . functions . Action1 ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import static org . junit . Assert . * ; public class HystrixThreadEventStreamTest { HystrixCommandKey commandKey ; HystrixThreadPoolKey threadPoolKey ; HystrixThreadEventStream writeToStream ; HystrixCommandCompletionStream readCommandStream ; HystrixThreadPoolCompletionStream readThreadPoolStream ; public HystrixThreadEventStreamTest ( ) { commandKey = HystrixCommandKey . Factory . asKey ( <str> ) ; threadPoolKey = HystrixThreadPoolKey . Factory . asKey ( <str> ) ; writeToStream = HystrixThreadEventStream . getInstance ( ) ; readCommandStream = HystrixCommandCompletionStream . getInstance ( commandKey ) ; readThreadPoolStream = HystrixThreadPoolCompletionStream . getInstance ( threadPoolKey ) ; } private < T > Subscriber < T > getLatchedSubscriber ( final CountDownLatch latch ) { return new Subscriber < T > ( ) { @Override public void onCompleted ( ) { latch . countDown ( ) ; } @Override public void onError ( Throwable e ) { fail ( e . getMessage ( ) ) ; e . printStackTrace ( ) ; latch . countDown ( ) ; } @Override public void onNext ( T value ) { System . out . println ( <str> + value ) ; } } ; } @Test public void noEvents ( ) throws InterruptedException { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; assertFalse ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertFalse ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testThreadIsolatedSuccess ( ) throws InterruptedException { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . SUCCESS ) . setExecutedInThread ( ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertTrue ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testSemaphoreIsolatedSuccess ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . SUCCESS ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertFalse ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testThreadIsolatedFailure ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . FAILURE ) . setExecutedInThread ( ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertTrue ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testSemaphoreIsolatedFailure ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . FAILURE ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertFalse ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testThreadIsolatedTimeout ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . TIMEOUT ) . setExecutedInThread ( ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertTrue ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testSemaphoreIsolatedTimeout ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . TIMEOUT ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertFalse ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testThreadIsolatedBadRequest ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . BAD_REQUEST ) . setExecutedInThread ( ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertTrue ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testSemaphoreIsolatedBadRequest ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . BAD_REQUEST ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertFalse ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testThreadRejectedCommand ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . THREAD_POOL_REJECTED ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertTrue ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testSemaphoreRejectedCommand ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . SEMAPHORE_REJECTED ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertFalse ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testThreadIsolatedResponseFromCache ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < List < HystrixCommandCompletion > > commandListSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . buffer ( <int> , TimeUnit . MILLISECONDS ) . take ( <int> ) . doOnNext ( new Action1 < List < HystrixCommandCompletion > > ( ) { @Override public void call ( List < HystrixCommandCompletion > hystrixCommandCompletions ) { System . out . println ( <str> + hystrixCommandCompletions ) ; assertEquals ( <int> , hystrixCommandCompletions . size ( ) ) ; } } ) . subscribe ( commandListSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . SUCCESS ) . setExecutedInThread ( ) ; ExecutionResult cache1 = ExecutionResult . from ( HystrixEventType . RESPONSE_FROM_CACHE ) ; ExecutionResult cache2 = ExecutionResult . from ( HystrixEventType . RESPONSE_FROM_CACHE ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; writeToStream . executionDone ( cache1 , commandKey , threadPoolKey ) ; writeToStream . executionDone ( cache2 , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertTrue ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testSemaphoreIsolatedResponseFromCache ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < List < HystrixCommandCompletion > > commandListSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . buffer ( <int> , TimeUnit . MILLISECONDS ) . take ( <int> ) . doOnNext ( new Action1 < List < HystrixCommandCompletion > > ( ) { @Override public void call ( List < HystrixCommandCompletion > hystrixCommandCompletions ) { System . out . println ( <str> + hystrixCommandCompletions ) ; assertEquals ( <int> , hystrixCommandCompletions . size ( ) ) ; } } ) . subscribe ( commandListSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . SUCCESS ) ; ExecutionResult cache1 = ExecutionResult . from ( HystrixEventType . RESPONSE_FROM_CACHE ) ; ExecutionResult cache2 = ExecutionResult . from ( HystrixEventType . RESPONSE_FROM_CACHE ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; writeToStream . executionDone ( cache1 , commandKey , threadPoolKey ) ; writeToStream . executionDone ( cache2 , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertFalse ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } @Test public void testShortCircuit ( ) throws Exception { CountDownLatch commandLatch = new CountDownLatch ( <int> ) ; CountDownLatch threadPoolLatch = new CountDownLatch ( <int> ) ; Subscriber < HystrixCommandCompletion > commandSubscriber = getLatchedSubscriber ( commandLatch ) ; readCommandStream . observe ( ) . take ( <int> ) . subscribe ( commandSubscriber ) ; Subscriber < HystrixCommandCompletion > threadPoolSubscriber = getLatchedSubscriber ( threadPoolLatch ) ; readThreadPoolStream . observe ( ) . take ( <int> ) . subscribe ( threadPoolSubscriber ) ; ExecutionResult result = ExecutionResult . from ( HystrixEventType . SHORT_CIRCUITED ) ; writeToStream . executionDone ( result , commandKey , threadPoolKey ) ; assertTrue ( commandLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; assertFalse ( threadPoolLatch . await ( <int> , TimeUnit . MILLISECONDS ) ) ; } } 

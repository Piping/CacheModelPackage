package com . netflix . hystrix . strategy . concurrency ; import java . util . concurrent . Callable ; import rx . functions . Action0 ; import rx . functions . Func2 ; import com . netflix . hystrix . strategy . HystrixPlugins ; public class HystrixContexSchedulerAction implements Action0 { private final Action0 actual ; private final HystrixRequestContext parentThreadState ; private final Callable < Void > c ; public HystrixContexSchedulerAction ( Action0 action ) { this ( HystrixPlugins . getInstance ( ) . getConcurrencyStrategy ( ) , action ) ; } public HystrixContexSchedulerAction ( final HystrixConcurrencyStrategy concurrencyStrategy , Action0 action ) { this . actual = action ; this . parentThreadState = HystrixRequestContext . getContextForCurrentThread ( ) ; this . c = concurrencyStrategy . wrapCallable ( new Callable < Void > ( ) { @Override public Void call ( ) throws Exception { HystrixRequestContext existingState = HystrixRequestContext . getContextForCurrentThread ( ) ; try { HystrixRequestContext . setContextOnCurrentThread ( parentThreadState ) ; actual . call ( ) ; return null ; } finally { HystrixRequestContext . setContextOnCurrentThread ( existingState ) ; } } } ) ; } @Override public void call ( ) { try { c . call ( ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> , e ) ; } } }
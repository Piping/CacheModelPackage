package rx . subjects ; import java . util . * ; import rx . Observer ; import rx . annotations . Beta ; import rx . exceptions . Exceptions ; import rx . functions . Action1 ; import rx . internal . operators . NotificationLite ; import rx . subjects . SubjectSubscriptionManager . SubjectObserver ; public final class PublishSubject < T > extends Subject < T , T > { public static < T > PublishSubject < T > create ( ) { final SubjectSubscriptionManager < T > state = new SubjectSubscriptionManager < T > ( ) ; state . onTerminated = new Action1 < SubjectObserver < T > > ( ) { @Override public void call ( SubjectObserver < T > o ) { o . emitFirst ( state . getLatest ( ) , state . nl ) ; } } ; return new PublishSubject < T > ( state , state ) ; } final SubjectSubscriptionManager < T > state ; private final NotificationLite < T > nl = NotificationLite . instance ( ) ; protected PublishSubject ( OnSubscribe < T > onSubscribe , SubjectSubscriptionManager < T > state ) { super ( onSubscribe ) ; this . state = state ; } @Override public void onCompleted ( ) { if ( state . active ) { Object n = nl . completed ( ) ; for ( SubjectObserver < T > bo : state . terminate ( n ) ) { bo . emitNext ( n , state . nl ) ; } } } @Override public void onError ( final Throwable e ) { if ( state . active ) { Object n = nl . error ( e ) ; List < Throwable > errors = null ; for ( SubjectObserver < T > bo : state . terminate ( n ) ) { try { bo . emitNext ( n , state . nl ) ; } catch ( Throwable e2 ) { if ( errors = = null ) { errors = new ArrayList < Throwable > ( ) ; } errors . add ( e2 ) ; } } Exceptions . throwIfAny ( errors ) ; } } @Override public void onNext ( T v ) { for ( SubjectObserver < T > bo : state . observers ( ) ) { bo . onNext ( v ) ; } } @Override public boolean hasObservers ( ) { return state . observers ( ) . length > <int> ; } @Beta public boolean hasThrowable ( ) { Object o = state . getLatest ( ) ; return nl . isError ( o ) ; } @Beta public boolean hasCompleted ( ) { Object o = state . getLatest ( ) ; return o ! = null & & ! nl . isError ( o ) ; } @Beta public Throwable getThrowable ( ) { Object o = state . getLatest ( ) ; if ( nl . isError ( o ) ) { return nl . getError ( o ) ; } return null ; } } 

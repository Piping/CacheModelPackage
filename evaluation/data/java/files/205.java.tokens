package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . Errors ; import org . elasticsearch . common . inject . spi . InjectionListener ; import org . elasticsearch . common . inject . spi . Message ; import org . elasticsearch . common . inject . spi . TypeEncounter ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; final class EncounterImpl < T > implements TypeEncounter < T > { private final Errors errors ; private final Lookups lookups ; private List < MembersInjector < ? super T > > membersInjectors ; private List < InjectionListener < ? super T > > injectionListeners ; private boolean valid = true ; public EncounterImpl ( Errors errors , Lookups lookups ) { this . errors = errors ; this . lookups = lookups ; } public void invalidate ( ) { valid = false ; } public List < MembersInjector < ? super T > > getMembersInjectors ( ) { return membersInjectors = = null ? Collections . < MembersInjector < ? super T > > emptyList ( ) : Collections . unmodifiableList ( membersInjectors ) ; } public List < InjectionListener < ? super T > > getInjectionListeners ( ) { return injectionListeners = = null ? Collections . < InjectionListener < ? super T > > emptyList ( ) : Collections . unmodifiableList ( injectionListeners ) ; } @Override public void register ( MembersInjector < ? super T > membersInjector ) { if ( ! valid ) { throw new IllegalStateException ( <str> ) ; } if ( membersInjectors = = null ) { membersInjectors = new ArrayList < > ( ) ; } membersInjectors . add ( membersInjector ) ; } @Override public void register ( InjectionListener < ? super T > injectionListener ) { if ( ! valid ) { throw new IllegalStateException ( <str> ) ; } if ( injectionListeners = = null ) { injectionListeners = new ArrayList < > ( ) ; } injectionListeners . add ( injectionListener ) ; } @Override public void addError ( String message , Object . . . arguments ) { if ( ! valid ) { throw new IllegalStateException ( <str> ) ; } errors . addMessage ( message , arguments ) ; } @Override public void addError ( Throwable t ) { if ( ! valid ) { throw new IllegalStateException ( <str> ) ; } errors . errorInUserCode ( t , <str> , t . getMessage ( ) ) ; } @Override public void addError ( Message message ) { if ( ! valid ) { throw new IllegalStateException ( <str> ) ; } errors . addMessage ( message ) ; } @Override public < T > Provider < T > getProvider ( Key < T > key ) { if ( ! valid ) { throw new IllegalStateException ( <str> ) ; } return lookups . getProvider ( key ) ; } @Override public < T > Provider < T > getProvider ( Class < T > type ) { return getProvider ( Key . get ( type ) ) ; } @Override public < T > MembersInjector < T > getMembersInjector ( TypeLiteral < T > typeLiteral ) { if ( ! valid ) { throw new IllegalStateException ( <str> ) ; } return lookups . getMembersInjector ( typeLiteral ) ; } @Override public < T > MembersInjector < T > getMembersInjector ( Class < T > type ) { return getMembersInjector ( TypeLiteral . get ( type ) ) ; } } 

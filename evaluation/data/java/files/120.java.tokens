package org . gradle . internal . hash ; import com . google . common . base . Strings ; import java . math . BigInteger ; public class HashValue { private final BigInteger digest ; public HashValue ( byte [ ] digest ) { this . digest = new BigInteger ( <int> , digest ) ; } public HashValue ( String hexString ) { this . digest = new BigInteger ( hexString , <int> ) ; } public static HashValue parse ( String inputString ) { if ( inputString = = null | | inputString . length ( ) = = <int> ) { return null ; } return new HashValue ( parseInput ( inputString ) ) ; } private static String parseInput ( String inputString ) { if ( inputString = = null ) { return null ; } String cleaned = inputString . trim ( ) . toLowerCase ( ) ; int spaceIndex = cleaned . indexOf ( <str> ) ; if ( spaceIndex ! = - <int> ) { String firstPart = cleaned . substring ( <int> , spaceIndex ) ; if ( firstPart . startsWith ( <str> ) | | firstPart . startsWith ( <str> ) ) { cleaned = cleaned . substring ( cleaned . lastIndexOf ( <str> ) + <int> ) ; } else if ( firstPart . endsWith ( <str> ) ) { cleaned = cleaned . substring ( spaceIndex + <int> ) . replace ( <str> , <str> ) ; } else { cleaned = cleaned . substring ( <int> , spaceIndex ) ; } } return cleaned ; } public String asCompactString ( ) { return digest . toString ( <int> ) ; } public String asHexString ( ) { return digest . toString ( <int> ) ; } public byte [ ] asByteArray ( ) { return digest . toByteArray ( ) ; } public BigInteger asBigInteger ( ) { return digest ; } public String asZeroPaddedHexString ( int expectedLength ) { return Strings . padStart ( asHexString ( ) , expectedLength , <str> ) ; } @Override public boolean equals ( Object other ) { if ( this = = other ) { return true ; } if ( ! ( other instanceof HashValue ) ) { return false ; } HashValue otherHashValue = ( HashValue ) other ; return digest . equals ( otherHashValue . digest ) ; } @Override public int hashCode ( ) { return digest . hashCode ( ) ; } } 

package rx . internal . operators ; import java . util . concurrent . atomic . AtomicBoolean ; import rx . Observable ; import rx . Observable . Operator ; import rx . Subscriber ; import rx . observers . SerializedSubscriber ; public final class OperatorSkipUntil < T , U > implements Operator < T , T > { final Observable < U > other ; public OperatorSkipUntil ( Observable < U > other ) { this . other = other ; } @Override public Subscriber < ? super T > call ( Subscriber < ? super T > child ) { final SerializedSubscriber < T > s = new SerializedSubscriber < T > ( child ) ; final AtomicBoolean gate = new AtomicBoolean ( ) ; Subscriber < U > u = new Subscriber < U > ( ) { @Override public void onNext ( U t ) { gate . set ( true ) ; unsubscribe ( ) ; } @Override public void onError ( Throwable e ) { s . onError ( e ) ; s . unsubscribe ( ) ; } @Override public void onCompleted ( ) { unsubscribe ( ) ; } } ; child . add ( u ) ; other . unsafeSubscribe ( u ) ; return new Subscriber < T > ( child ) { @Override public void onNext ( T t ) { if ( gate . get ( ) ) { s . onNext ( t ) ; } else { request ( <int> ) ; } } @Override public void onError ( Throwable e ) { s . onError ( e ) ; unsubscribe ( ) ; } @Override public void onCompleted ( ) { s . onCompleted ( ) ; unsubscribe ( ) ; } } ; } }
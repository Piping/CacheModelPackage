package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . Collection ; import java . util . Map ; @GwtCompatible public class MapHashCodeTester < K , V > extends AbstractMapTester < K , V > { public void testHashCode ( ) { int expectedHashCode = <int> ; for ( Map . Entry < K , V > entry : getSampleEntries ( ) ) { expectedHashCode + = hash ( entry ) ; } assertEquals ( <str> , expectedHashCode , getMap ( ) . hashCode ( ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) @MapFeature.Require ( ALLOWS_NULL_KEYS ) public void testHashCode_containingNullKey ( ) { Map . Entry < K , V > entryWithNull = entry ( null , v3 ( ) ) ; runEntryWithNullTest ( entryWithNull ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) @MapFeature.Require ( ALLOWS_NULL_VALUES ) public void testHashCode_containingNullValue ( ) { Map . Entry < K , V > entryWithNull = entry ( k3 ( ) , null ) ; runEntryWithNullTest ( entryWithNull ) ; } private void runEntryWithNullTest ( Map . Entry < K , V > entryWithNull ) { Collection < Map . Entry < K , V > > entries = getSampleEntries ( getNumEntries ( ) - <int> ) ; entries . add ( entryWithNull ) ; int expectedHashCode = <int> ; for ( Map . Entry < K , V > entry : entries ) { expectedHashCode + = hash ( entry ) ; } resetContainer ( getSubjectGenerator ( ) . create ( entries . toArray ( ) ) ) ; assertEquals ( <str> + <str> , expectedHashCode , getMap ( ) . hashCode ( ) ) ; } private static int hash ( Map . Entry < ? , ? > e ) { return ( e . getKey ( ) = = null ? <int> : e . getKey ( ) . hashCode ( ) ) ^ ( e . getValue ( ) = = null ? <int> : e . getValue ( ) . hashCode ( ) ) ; } } 

package com . badlogic . gdx . physics . bullet . softbody ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . physics . bullet . dynamics . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . g3d . model . MeshPart ; public class btSoftBody extends btCollisionObject { private long swigCPtr ; protected btSoftBody ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btSoftBody_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btSoftBody ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btSoftBody_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btSoftBody obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setCollisionDisabledObjects ( btCollisionObjectConstArray value ) { SoftbodyJNI . btSoftBody_collisionDisabledObjects_set ( swigCPtr , this , btCollisionObjectConstArray . getCPtr ( value ) , value ) ; } public btCollisionObjectConstArray getCollisionDisabledObjects ( ) { long cPtr = SoftbodyJNI . btSoftBody_collisionDisabledObjects_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btCollisionObjectConstArray ( cPtr , false ) ; } public void setSoftBodySolver ( btSoftBodySolver value ) { SoftbodyJNI . btSoftBody_softBodySolver_set ( swigCPtr , this , btSoftBodySolver . getCPtr ( value ) , value ) ; } public btSoftBodySolver getSoftBodySolver ( ) { long cPtr = SoftbodyJNI . btSoftBody_softBodySolver_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btSoftBodySolver ( cPtr , false ) ; } static public class eAeroModel extends BulletBase { private long swigCPtr ; protected eAeroModel ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public eAeroModel ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( eAeroModel obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_eAeroModel ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public eAeroModel ( ) { this ( SoftbodyJNI . new_btSoftBody_eAeroModel ( ) , true ) ; } public final static class _ { public final static int V_Point = <int> ; public final static int V_TwoSided = V_Point + <int> ; public final static int V_TwoSidedLiftDrag = V_TwoSided + <int> ; public final static int V_OneSided = V_TwoSidedLiftDrag + <int> ; public final static int F_TwoSided = V_OneSided + <int> ; public final static int F_TwoSidedLiftDrag = F_TwoSided + <int> ; public final static int F_OneSided = F_TwoSidedLiftDrag + <int> ; public final static int END = F_OneSided + <int> ; } } static public class eVSolver extends BulletBase { private long swigCPtr ; protected eVSolver ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public eVSolver ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( eVSolver obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_eVSolver ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public eVSolver ( ) { this ( SoftbodyJNI . new_btSoftBody_eVSolver ( ) , true ) ; } public final static class _ { public final static int Linear = <int> ; public final static int END = Linear + <int> ; } } static public class ePSolver extends BulletBase { private long swigCPtr ; protected ePSolver ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public ePSolver ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( ePSolver obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_ePSolver ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public ePSolver ( ) { this ( SoftbodyJNI . new_btSoftBody_ePSolver ( ) , true ) ; } public final static class _ { public final static int Linear = <int> ; public final static int Anchors = Linear + <int> ; public final static int RContacts = Anchors + <int> ; public final static int SContacts = RContacts + <int> ; public final static int END = SContacts + <int> ; } } static public class eSolverPresets extends BulletBase { private long swigCPtr ; protected eSolverPresets ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public eSolverPresets ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( eSolverPresets obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_eSolverPresets ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public eSolverPresets ( ) { this ( SoftbodyJNI . new_btSoftBody_eSolverPresets ( ) , true ) ; } public final static class _ { public final static int Positions = <int> ; public final static int Velocities = Positions + <int> ; public final static int Default = Positions ; public final static int END = Default + <int> ; } } static public class eFeature extends BulletBase { private long swigCPtr ; protected eFeature ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public eFeature ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( eFeature obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_eFeature ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public eFeature ( ) { this ( SoftbodyJNI . new_btSoftBody_eFeature ( ) , true ) ; } public final static class _ { public final static int None = <int> ; public final static int Node = None + <int> ; public final static int Link = Node + <int> ; public final static int Face = Link + <int> ; public final static int Tetra = Face + <int> ; public final static int END = Tetra + <int> ; } } static public class fCollision extends BulletBase { private long swigCPtr ; protected fCollision ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public fCollision ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( fCollision obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_fCollision ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public fCollision ( ) { this ( SoftbodyJNI . new_btSoftBody_fCollision ( ) , true ) ; } public final static class _ { public final static int RVSmask = <hex> ; public final static int SDF_RS = <hex> ; public final static int CL_RS = <hex> ; public final static int SVSmask = <hex> ; public final static int VF_SS = <hex> ; public final static int CL_SS = <hex> ; public final static int CL_SELF = <hex> ; public final static int Default = SDF_RS ; public final static int END = Default + <int> ; } } static public class fMaterial extends BulletBase { private long swigCPtr ; protected fMaterial ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public fMaterial ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( fMaterial obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_fMaterial ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public fMaterial ( ) { this ( SoftbodyJNI . new_btSoftBody_fMaterial ( ) , true ) ; } public final static class _ { public final static int DebugDraw = <hex> ; public final static int Default = DebugDraw ; public final static int END = Default + <int> ; } } static public class sRayCast extends BulletBase { private long swigCPtr ; protected sRayCast ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public sRayCast ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( sRayCast obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_sRayCast ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setBody ( btSoftBody value ) { SoftbodyJNI . btSoftBody_sRayCast_body_set ( swigCPtr , this , btSoftBody . getCPtr ( value ) , value ) ; } public btSoftBody getBody ( ) { long cPtr = SoftbodyJNI . btSoftBody_sRayCast_body_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btSoftBody ( cPtr , false ) ; } public void setFeature ( int value ) { SoftbodyJNI . btSoftBody_sRayCast_feature_set ( swigCPtr , this , value ) ; } public int getFeature ( ) { return SoftbodyJNI . btSoftBody_sRayCast_feature_get ( swigCPtr , this ) ; } public void setIndex ( int value ) { SoftbodyJNI . btSoftBody_sRayCast_index_set ( swigCPtr , this , value ) ; } public int getIndex ( ) { return SoftbodyJNI . btSoftBody_sRayCast_index_get ( swigCPtr , this ) ; } public void setFraction ( float value ) { SoftbodyJNI . btSoftBody_sRayCast_fraction_set ( swigCPtr , this , value ) ; } public float getFraction ( ) { return SoftbodyJNI . btSoftBody_sRayCast_fraction_get ( swigCPtr , this ) ; } public sRayCast ( ) { this ( SoftbodyJNI . new_btSoftBody_sRayCast ( ) , true ) ; } } static public class ImplicitFn extends BulletBase { private long swigCPtr ; protected ImplicitFn ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public ImplicitFn ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( ImplicitFn obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_ImplicitFn ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public float Eval ( Vector3 x ) { return SoftbodyJNI . btSoftBody_ImplicitFn_Eval ( swigCPtr , this , x ) ; } } static public class sCti extends BulletBase { private long swigCPtr ; protected sCti ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public sCti ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( sCti obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_sCti ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setColObj ( btCollisionObject value ) { SoftbodyJNI . btSoftBody_sCti_colObj_set ( swigCPtr , this , btCollisionObject . getCPtr ( value ) , value ) ; } public btCollisionObject getColObj ( ) { return btCollisionObject . getInstance ( SoftbodyJNI . btSoftBody_sCti_colObj_get ( swigCPtr , this ) , false ) ; } public void setNormal ( btVector3 value ) { SoftbodyJNI . btSoftBody_sCti_normal_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getNormal ( ) { long cPtr = SoftbodyJNI . btSoftBody_sCti_normal_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setOffset ( float value ) { SoftbodyJNI . btSoftBody_sCti_offset_set ( swigCPtr , this , value ) ; } public float getOffset ( ) { return SoftbodyJNI . btSoftBody_sCti_offset_get ( swigCPtr , this ) ; } public sCti ( ) { this ( SoftbodyJNI . new_btSoftBody_sCti ( ) , true ) ; } } static public class sMedium extends BulletBase { private long swigCPtr ; protected sMedium ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public sMedium ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( sMedium obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_sMedium ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setVelocity ( btVector3 value ) { SoftbodyJNI . btSoftBody_sMedium_velocity_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getVelocity ( ) { long cPtr = SoftbodyJNI . btSoftBody_sMedium_velocity_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setPressure ( float value ) { SoftbodyJNI . btSoftBody_sMedium_pressure_set ( swigCPtr , this , value ) ; } public float getPressure ( ) { return SoftbodyJNI . btSoftBody_sMedium_pressure_get ( swigCPtr , this ) ; } public void setDensity ( float value ) { SoftbodyJNI . btSoftBody_sMedium_density_set ( swigCPtr , this , value ) ; } public float getDensity ( ) { return SoftbodyJNI . btSoftBody_sMedium_density_get ( swigCPtr , this ) ; } public sMedium ( ) { this ( SoftbodyJNI . new_btSoftBody_sMedium ( ) , true ) ; } } static public class Element extends BulletBase { private long swigCPtr ; protected Element ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public Element ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( Element obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Element ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setTag ( long value ) { SoftbodyJNI . btSoftBody_Element_tag_set ( swigCPtr , this , value ) ; } public long getTag ( ) { return SoftbodyJNI . btSoftBody_Element_tag_get ( swigCPtr , this ) ; } public Element ( ) { this ( SoftbodyJNI . new_btSoftBody_Element ( ) , true ) ; } } static public class Material extends btSoftBody . Element { private long swigCPtr ; protected Material ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btSoftBody_Material_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public Material ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btSoftBody_Material_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( Material obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Material ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setKLST ( float value ) { SoftbodyJNI . btSoftBody_Material_kLST_set ( swigCPtr , this , value ) ; } public float getKLST ( ) { return SoftbodyJNI . btSoftBody_Material_kLST_get ( swigCPtr , this ) ; } public void setKAST ( float value ) { SoftbodyJNI . btSoftBody_Material_kAST_set ( swigCPtr , this , value ) ; } public float getKAST ( ) { return SoftbodyJNI . btSoftBody_Material_kAST_get ( swigCPtr , this ) ; } public void setKVST ( float value ) { SoftbodyJNI . btSoftBody_Material_kVST_set ( swigCPtr , this , value ) ; } public float getKVST ( ) { return SoftbodyJNI . btSoftBody_Material_kVST_get ( swigCPtr , this ) ; } public void setFlags ( int value ) { SoftbodyJNI . btSoftBody_Material_flags_set ( swigCPtr , this , value ) ; } public int getFlags ( ) { return SoftbodyJNI . btSoftBody_Material_flags_get ( swigCPtr , this ) ; } public Material ( ) { this ( SoftbodyJNI . new_btSoftBody_Material ( ) , true ) ; } } static public class Feature extends btSoftBody . Element { private long swigCPtr ; protected Feature ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btSoftBody_Feature_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public Feature ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btSoftBody_Feature_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( Feature obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Feature ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setMaterial ( btSoftBody . Material value ) { SoftbodyJNI . btSoftBody_Feature_material_set ( swigCPtr , this , btSoftBody . Material . getCPtr ( value ) , value ) ; } public btSoftBody . Material getMaterial ( ) { long cPtr = SoftbodyJNI . btSoftBody_Feature_material_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btSoftBody . Material ( cPtr , false ) ; } public Feature ( ) { this ( SoftbodyJNI . new_btSoftBody_Feature ( ) , true ) ; } } static public class Node extends btSoftBody . Feature { private long swigCPtr ; protected Node ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btSoftBody_Node_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public Node ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btSoftBody_Node_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( Node obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Node ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setX ( btVector3 value ) { SoftbodyJNI . btSoftBody_Node_x_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getX ( ) { long cPtr = SoftbodyJNI . btSoftBody_Node_x_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setQ ( btVector3 value ) { SoftbodyJNI . btSoftBody_Node_q_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getQ ( ) { long cPtr = SoftbodyJNI . btSoftBody_Node_q_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setV ( btVector3 value ) { SoftbodyJNI . btSoftBody_Node_v_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getV ( ) { long cPtr = SoftbodyJNI . btSoftBody_Node_v_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setF ( btVector3 value ) { SoftbodyJNI . btSoftBody_Node_f_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getF ( ) { long cPtr = SoftbodyJNI . btSoftBody_Node_f_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setN ( btVector3 value ) { SoftbodyJNI . btSoftBody_Node_n_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getN ( ) { long cPtr = SoftbodyJNI . btSoftBody_Node_n_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setIm ( float value ) { SoftbodyJNI . btSoftBody_Node_im_set ( swigCPtr , this , value ) ; } public float getIm ( ) { return SoftbodyJNI . btSoftBody_Node_im_get ( swigCPtr , this ) ; } public void setArea ( float value ) { SoftbodyJNI . btSoftBody_Node_area_set ( swigCPtr , this , value ) ; } public float getArea ( ) { return SoftbodyJNI . btSoftBody_Node_area_get ( swigCPtr , this ) ; } public void setLeaf ( btDbvtNode value ) { SoftbodyJNI . btSoftBody_Node_leaf_set ( swigCPtr , this , btDbvtNode . getCPtr ( value ) , value ) ; } public btDbvtNode getLeaf ( ) { long cPtr = SoftbodyJNI . btSoftBody_Node_leaf_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btDbvtNode ( cPtr , false ) ; } public void setBattach ( int value ) { SoftbodyJNI . btSoftBody_Node_battach_set ( swigCPtr , this , value ) ; } public int getBattach ( ) { return SoftbodyJNI . btSoftBody_Node_battach_get ( swigCPtr , this ) ; } public Node ( ) { this ( SoftbodyJNI . new_btSoftBody_Node ( ) , true ) ; } } static public class Link extends btSoftBody . Feature { private long swigCPtr ; protected Link ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btSoftBody_Link_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public Link ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btSoftBody_Link_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( Link obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Link ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setN ( SWIGTYPE_p_p_btSoftBody__Node value ) { SoftbodyJNI . btSoftBody_Link_n_set ( swigCPtr , this , SWIGTYPE_p_p_btSoftBody__Node . getCPtr ( value ) ) ; } public SWIGTYPE_p_p_btSoftBody__Node getN ( ) { long cPtr = SoftbodyJNI . btSoftBody_Link_n_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_p_btSoftBody__Node ( cPtr , false ) ; } public void setRl ( float value ) { SoftbodyJNI . btSoftBody_Link_rl_set ( swigCPtr , this , value ) ; } public float getRl ( ) { return SoftbodyJNI . btSoftBody_Link_rl_get ( swigCPtr , this ) ; } public void setBbending ( int value ) { SoftbodyJNI . btSoftBody_Link_bbending_set ( swigCPtr , this , value ) ; } public int getBbending ( ) { return SoftbodyJNI . btSoftBody_Link_bbending_get ( swigCPtr , this ) ; } public void setC0 ( float value ) { SoftbodyJNI . btSoftBody_Link_c0_set ( swigCPtr , this , value ) ; } public float getC0 ( ) { return SoftbodyJNI . btSoftBody_Link_c0_get ( swigCPtr , this ) ; } public void setC1 ( float value ) { SoftbodyJNI . btSoftBody_Link_c1_set ( swigCPtr , this , value ) ; } public float getC1 ( ) { return SoftbodyJNI . btSoftBody_Link_c1_get ( swigCPtr , this ) ; } public void setC2 ( float value ) { SoftbodyJNI . btSoftBody_Link_c2_set ( swigCPtr , this , value ) ; } public float getC2 ( ) { return SoftbodyJNI . btSoftBody_Link_c2_get ( swigCPtr , this ) ; } public void setC3 ( btVector3 value ) { SoftbodyJNI . btSoftBody_Link_c3_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getC3 ( ) { long cPtr = SoftbodyJNI . btSoftBody_Link_c3_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public Link ( ) { this ( SoftbodyJNI . new_btSoftBody_Link ( ) , true ) ; } } static public class Face extends btSoftBody . Feature { private long swigCPtr ; protected Face ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btSoftBody_Face_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public Face ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btSoftBody_Face_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( Face obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Face ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setN ( SWIGTYPE_p_p_btSoftBody__Node value ) { SoftbodyJNI . btSoftBody_Face_n_set ( swigCPtr , this , SWIGTYPE_p_p_btSoftBody__Node . getCPtr ( value ) ) ; } public SWIGTYPE_p_p_btSoftBody__Node getN ( ) { long cPtr = SoftbodyJNI . btSoftBody_Face_n_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_p_btSoftBody__Node ( cPtr , false ) ; } public void setNormal ( btVector3 value ) { SoftbodyJNI . btSoftBody_Face_normal_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getNormal ( ) { long cPtr = SoftbodyJNI . btSoftBody_Face_normal_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setRa ( float value ) { SoftbodyJNI . btSoftBody_Face_ra_set ( swigCPtr , this , value ) ; } public float getRa ( ) { return SoftbodyJNI . btSoftBody_Face_ra_get ( swigCPtr , this ) ; } public void setLeaf ( btDbvtNode value ) { SoftbodyJNI . btSoftBody_Face_leaf_set ( swigCPtr , this , btDbvtNode . getCPtr ( value ) , value ) ; } public btDbvtNode getLeaf ( ) { long cPtr = SoftbodyJNI . btSoftBody_Face_leaf_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btDbvtNode ( cPtr , false ) ; } public Face ( ) { this ( SoftbodyJNI . new_btSoftBody_Face ( ) , true ) ; } } static public class Tetra extends btSoftBody . Feature { private long swigCPtr ; protected Tetra ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btSoftBody_Tetra_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public Tetra ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btSoftBody_Tetra_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( Tetra obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Tetra ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setN ( SWIGTYPE_p_p_btSoftBody__Node value ) { SoftbodyJNI . btSoftBody_Tetra_n_set ( swigCPtr , this , SWIGTYPE_p_p_btSoftBody__Node . getCPtr ( value ) ) ; } public SWIGTYPE_p_p_btSoftBody__Node getN ( ) { long cPtr = SoftbodyJNI . btSoftBody_Tetra_n_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_p_btSoftBody__Node ( cPtr , false ) ; } public void setRv ( float value ) { SoftbodyJNI . btSoftBody_Tetra_rv_set ( swigCPtr , this , value ) ; } public float getRv ( ) { return SoftbodyJNI . btSoftBody_Tetra_rv_get ( swigCPtr , this ) ; } public void setLeaf ( btDbvtNode value ) { SoftbodyJNI . btSoftBody_Tetra_leaf_set ( swigCPtr , this , btDbvtNode . getCPtr ( value ) , value ) ; } public btDbvtNode getLeaf ( ) { long cPtr = SoftbodyJNI . btSoftBody_Tetra_leaf_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btDbvtNode ( cPtr , false ) ; } public void setC0 ( btVector3 value ) { SoftbodyJNI . btSoftBody_Tetra_c0_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getC0 ( ) { long cPtr = SoftbodyJNI . btSoftBody_Tetra_c0_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setC1 ( float value ) { SoftbodyJNI . btSoftBody_Tetra_c1_set ( swigCPtr , this , value ) ; } public float getC1 ( ) { return SoftbodyJNI . btSoftBody_Tetra_c1_get ( swigCPtr , this ) ; } public void setC2 ( float value ) { SoftbodyJNI . btSoftBody_Tetra_c2_set ( swigCPtr , this , value ) ; } public float getC2 ( ) { return SoftbodyJNI . btSoftBody_Tetra_c2_get ( swigCPtr , this ) ; } public Tetra ( ) { this ( SoftbodyJNI . new_btSoftBody_Tetra ( ) , true ) ; } } static public class RContact extends BulletBase { private long swigCPtr ; protected RContact ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public RContact ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( RContact obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_RContact ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setCti ( btSoftBody . sCti value ) { SoftbodyJNI . btSoftBody_RContact_cti_set ( swigCPtr , this , btSoftBody . sCti . getCPtr ( value ) , value ) ; } public btSoftBody . sCti getCti ( ) { long cPtr = SoftbodyJNI . btSoftBody_RContact_cti_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btSoftBody . sCti ( cPtr , false ) ; } public void setNode ( btSoftBody . Node value ) { SoftbodyJNI . btSoftBody_RContact_node_set ( swigCPtr , this , btSoftBody . Node . getCPtr ( value ) , value ) ; } public btSoftBody . Node getNode ( ) { long cPtr = SoftbodyJNI . btSoftBody_RContact_node_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btSoftBody . Node ( cPtr , false ) ; } public void setC0 ( Matrix3 value ) { SoftbodyJNI . btSoftBody_RContact_c0_set ( swigCPtr , this , value ) ; } public Matrix3 getC0 ( ) { return SoftbodyJNI . btSoftBody_RContact_c0_get ( swigCPtr , this ) ; } public void setC1 ( btVector3 value ) { SoftbodyJNI . btSoftBody_RContact_c1_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getC1 ( ) { long cPtr = SoftbodyJNI . btSoftBody_RContact_c1_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setC2 ( float value ) { SoftbodyJNI . btSoftBody_RContact_c2_set ( swigCPtr , this , value ) ; } public float getC2 ( ) { return SoftbodyJNI . btSoftBody_RContact_c2_get ( swigCPtr , this ) ; } public void setC3 ( float value ) { SoftbodyJNI . btSoftBody_RContact_c3_set ( swigCPtr , this , value ) ; } public float getC3 ( ) { return SoftbodyJNI . btSoftBody_RContact_c3_get ( swigCPtr , this ) ; } public void setC4 ( float value ) { SoftbodyJNI . btSoftBody_RContact_c4_set ( swigCPtr , this , value ) ; } public float getC4 ( ) { return SoftbodyJNI . btSoftBody_RContact_c4_get ( swigCPtr , this ) ; } public RContact ( ) { this ( SoftbodyJNI . new_btSoftBody_RContact ( ) , true ) ; } } static public class SContact extends BulletBase { private long swigCPtr ; protected SContact ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public SContact ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( SContact obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_SContact ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setNode ( btSoftBody . Node value ) { SoftbodyJNI . btSoftBody_SContact_node_set ( swigCPtr , this , btSoftBody . Node . getCPtr ( value ) , value ) ; } public btSoftBody . Node getNode ( ) { long cPtr = SoftbodyJNI . btSoftBody_SContact_node_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btSoftBody . Node ( cPtr , false ) ; } public void setFace ( btSoftBody . Face value ) { SoftbodyJNI . btSoftBody_SContact_face_set ( swigCPtr , this , btSoftBody . Face . getCPtr ( value ) , value ) ; } public btSoftBody . Face getFace ( ) { long cPtr = SoftbodyJNI . btSoftBody_SContact_face_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btSoftBody . Face ( cPtr , false ) ; } public void setWeights ( btVector3 value ) { SoftbodyJNI . btSoftBody_SContact_weights_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getWeights ( ) { long cPtr = SoftbodyJNI . btSoftBody_SContact_weights_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setNormal ( btVector3 value ) { SoftbodyJNI . btSoftBody_SContact_normal_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getNormal ( ) { long cPtr = SoftbodyJNI . btSoftBody_SContact_normal_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setMargin ( float value ) { SoftbodyJNI . btSoftBody_SContact_margin_set ( swigCPtr , this , value ) ; } public float getMargin ( ) { return SoftbodyJNI . btSoftBody_SContact_margin_get ( swigCPtr , this ) ; } public void setFriction ( float value ) { SoftbodyJNI . btSoftBody_SContact_friction_set ( swigCPtr , this , value ) ; } public float getFriction ( ) { return SoftbodyJNI . btSoftBody_SContact_friction_get ( swigCPtr , this ) ; } public void setCfm ( float [ ] value ) { SoftbodyJNI . btSoftBody_SContact_cfm_set ( swigCPtr , this , value ) ; } public float [ ] getCfm ( ) { return SoftbodyJNI . btSoftBody_SContact_cfm_get ( swigCPtr , this ) ; } public SContact ( ) { this ( SoftbodyJNI . new_btSoftBody_SContact ( ) , true ) ; } } static public class Anchor extends BulletBase { private long swigCPtr ; protected Anchor ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public Anchor ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( Anchor obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Anchor ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setNode ( btSoftBody . Node value ) { SoftbodyJNI . btSoftBody_Anchor_node_set ( swigCPtr , this , btSoftBody . Node . getCPtr ( value ) , value ) ; } public btSoftBody . Node getNode ( ) { long cPtr = SoftbodyJNI . btSoftBody_Anchor_node_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btSoftBody . Node ( cPtr , false ) ; } public void setLocal ( btVector3 value ) { SoftbodyJNI . btSoftBody_Anchor_local_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getLocal ( ) { long cPtr = SoftbodyJNI . btSoftBody_Anchor_local_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setBody ( btRigidBody value ) { SoftbodyJNI . btSoftBody_Anchor_body_set ( swigCPtr , this , btRigidBody . getCPtr ( value ) , value ) ; } public btRigidBody getBody ( ) { return btRigidBody . getInstance ( SoftbodyJNI . btSoftBody_Anchor_body_get ( swigCPtr , this ) , false ) ; } public void setInfluence ( float value ) { SoftbodyJNI . btSoftBody_Anchor_influence_set ( swigCPtr , this , value ) ; } public float getInfluence ( ) { return SoftbodyJNI . btSoftBody_Anchor_influence_get ( swigCPtr , this ) ; } public void setC0 ( Matrix3 value ) { SoftbodyJNI . btSoftBody_Anchor_c0_set ( swigCPtr , this , value ) ; } public Matrix3 getC0 ( ) { return SoftbodyJNI . btSoftBody_Anchor_c0_get ( swigCPtr , this ) ; } public void setC1 ( btVector3 value ) { SoftbodyJNI . btSoftBody_Anchor_c1_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getC1 ( ) { long cPtr = SoftbodyJNI . btSoftBody_Anchor_c1_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setC2 ( float value ) { SoftbodyJNI . btSoftBody_Anchor_c2_set ( swigCPtr , this , value ) ; } public float getC2 ( ) { return SoftbodyJNI . btSoftBody_Anchor_c2_get ( swigCPtr , this ) ; } public Anchor ( ) { this ( SoftbodyJNI . new_btSoftBody_Anchor ( ) , true ) ; } } static public class Note extends btSoftBody . Element { private long swigCPtr ; protected Note ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btSoftBody_Note_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public Note ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btSoftBody_Note_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( Note obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Note ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setText ( String value ) { SoftbodyJNI . btSoftBody_Note_text_set ( swigCPtr , this , value ) ; } public String getText ( ) { return SoftbodyJNI . btSoftBody_Note_text_get ( swigCPtr , this ) ; } public void setOffset ( btVector3 value ) { SoftbodyJNI . btSoftBody_Note_offset_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getOffset ( ) { long cPtr = SoftbodyJNI . btSoftBody_Note_offset_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setRank ( int value ) { SoftbodyJNI . btSoftBody_Note_rank_set ( swigCPtr , this , value ) ; } public int getRank ( ) { return SoftbodyJNI . btSoftBody_Note_rank_get ( swigCPtr , this ) ; } public void setNodes ( SWIGTYPE_p_p_btSoftBody__Node value ) { SoftbodyJNI . btSoftBody_Note_nodes_set ( swigCPtr , this , SWIGTYPE_p_p_btSoftBody__Node . getCPtr ( value ) ) ; } public SWIGTYPE_p_p_btSoftBody__Node getNodes ( ) { long cPtr = SoftbodyJNI . btSoftBody_Note_nodes_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_p_btSoftBody__Node ( cPtr , false ) ; } public void setCoords ( float [ ] value ) { SoftbodyJNI . btSoftBody_Note_coords_set ( swigCPtr , this , value ) ; } public float [ ] getCoords ( ) { return SoftbodyJNI . btSoftBody_Note_coords_get ( swigCPtr , this ) ; } public Note ( ) { this ( SoftbodyJNI . new_btSoftBody_Note ( ) , true ) ; } } static public class Pose extends BulletBase { private long swigCPtr ; protected Pose ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public Pose ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( Pose obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Pose ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setBvolume ( boolean value ) { SoftbodyJNI . btSoftBody_Pose_bvolume_set ( swigCPtr , this , value ) ; } public boolean getBvolume ( ) { return SoftbodyJNI . btSoftBody_Pose_bvolume_get ( swigCPtr , this ) ; } public void setBframe ( boolean value ) { SoftbodyJNI . btSoftBody_Pose_bframe_set ( swigCPtr , this , value ) ; } public boolean getBframe ( ) { return SoftbodyJNI . btSoftBody_Pose_bframe_get ( swigCPtr , this ) ; } public void setVolume ( float value ) { SoftbodyJNI . btSoftBody_Pose_volume_set ( swigCPtr , this , value ) ; } public float getVolume ( ) { return SoftbodyJNI . btSoftBody_Pose_volume_get ( swigCPtr , this ) ; } public void setPos ( btVector3Array value ) { SoftbodyJNI . btSoftBody_Pose_pos_set ( swigCPtr , this , btVector3Array . getCPtr ( value ) , value ) ; } public btVector3Array getPos ( ) { long cPtr = SoftbodyJNI . btSoftBody_Pose_pos_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3Array ( cPtr , false ) ; } public void setWgh ( btScalarArray value ) { SoftbodyJNI . btSoftBody_Pose_wgh_set ( swigCPtr , this , btScalarArray . getCPtr ( value ) , value ) ; } public btScalarArray getWgh ( ) { long cPtr = SoftbodyJNI . btSoftBody_Pose_wgh_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btScalarArray ( cPtr , false ) ; } public void setCom ( btVector3 value ) { SoftbodyJNI . btSoftBody_Pose_com_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getCom ( ) { long cPtr = SoftbodyJNI . btSoftBody_Pose_com_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setRot ( Matrix3 value ) { SoftbodyJNI . btSoftBody_Pose_rot_set ( swigCPtr , this , value ) ; } public Matrix3 getRot ( ) { return SoftbodyJNI . btSoftBody_Pose_rot_get ( swigCPtr , this ) ; } public void setScl ( Matrix3 value ) { SoftbodyJNI . btSoftBody_Pose_scl_set ( swigCPtr , this , value ) ; } public Matrix3 getScl ( ) { return SoftbodyJNI . btSoftBody_Pose_scl_get ( swigCPtr , this ) ; } public void setAqq ( Matrix3 value ) { SoftbodyJNI . btSoftBody_Pose_aqq_set ( swigCPtr , this , value ) ; } public Matrix3 getAqq ( ) { return SoftbodyJNI . btSoftBody_Pose_aqq_get ( swigCPtr , this ) ; } public Pose ( ) { this ( SoftbodyJNI . new_btSoftBody_Pose ( ) , true ) ; } } static public class Cluster extends BulletBase { private long swigCPtr ; protected Cluster ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public Cluster ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( Cluster obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftBody_Cluster ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setMasses ( btScalarArray value ) { SoftbodyJNI . btSoftBody_Cluster_masses_set ( swigCPtr , this , btScalarArray . getCPtr ( value ) , value ) ; } public btScalarArray getMasses ( ) { long cPtr = SoftbodyJNI . btSoftBody_Cluster_masses_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btScalarArray ( cPtr , false ) ; } public void setNodes ( SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_p_t value ) { SoftbodyJNI . btSoftBody_Cluster_nodes_set ( swigCPtr , this , SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_p_t . getCPtr ( value ) ) ; } public SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_p_t getNodes ( ) { long cPtr = SoftbodyJNI . btSoftBody_Cluster_nodes_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_p_t ( cPtr , false ) ; } public void setFramerefs ( btVector3Array value ) { SoftbodyJNI . btSoftBody_Cluster_framerefs_set ( swigCPtr , this , btVector3Array . getCPtr ( value ) , value ) ; } public btVector3Array getFramerefs ( ) { long cPtr = SoftbodyJNI . btSoftBody_Cluster_framerefs_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3Array ( cPtr , false ) ; } public void setFramexform ( btTransform value ) { SoftbodyJNI . btSoftBody_Cluster_framexform_set ( swigCPtr , this , btTransform . getCPtr ( value ) , value ) ; } public btTransform getFramexform ( ) { long cPtr = SoftbodyJNI . btSoftBody_Cluster_framexform_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btTransform ( cPtr , false ) ; } public void setIdmass ( float value ) { 

package io . netty . handler . ssl ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufAllocator ; import io . netty . buffer . ByteBufInputStream ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . ChannelPipeline ; import io . netty . handler . ssl . ApplicationProtocolConfig . Protocol ; import io . netty . handler . ssl . ApplicationProtocolConfig . SelectedListenerFailureBehavior ; import io . netty . handler . ssl . ApplicationProtocolConfig . SelectorFailureBehavior ; import javax . net . ssl . KeyManager ; import javax . net . ssl . KeyManagerFactory ; import javax . crypto . Cipher ; import javax . crypto . EncryptedPrivateKeyInfo ; import javax . crypto . NoSuchPaddingException ; import javax . crypto . SecretKey ; import javax . crypto . SecretKeyFactory ; import javax . crypto . spec . PBEKeySpec ; import javax . net . ssl . SSLContext ; import javax . net . ssl . SSLEngine ; import javax . net . ssl . SSLException ; import javax . net . ssl . SSLSessionContext ; import javax . net . ssl . TrustManager ; import javax . net . ssl . TrustManagerFactory ; import javax . security . auth . x500 . X500Principal ; import java . io . File ; import java . io . IOException ; import java . security . InvalidAlgorithmParameterException ; import java . security . InvalidKeyException ; import java . security . KeyException ; import java . security . KeyFactory ; import java . security . KeyStore ; import java . security . KeyStoreException ; import java . security . NoSuchAlgorithmException ; import java . security . PrivateKey ; import java . security . cert . CertificateException ; import java . security . cert . CertificateFactory ; import java . security . cert . X509Certificate ; import java . security . spec . InvalidKeySpecException ; import java . security . spec . PKCS8EncodedKeySpec ; import java . util . List ; public abstract class SslContext { static final CertificateFactory X509_CERT_FACTORY ; static { try { X509_CERT_FACTORY = CertificateFactory . getInstance ( <str> ) ; } catch ( CertificateException e ) { throw new IllegalStateException ( <str> , e ) ; } } public static SslProvider defaultServerProvider ( ) { return defaultProvider ( ) ; } public static SslProvider defaultClientProvider ( ) { return defaultProvider ( ) ; } private static SslProvider defaultProvider ( ) { if ( OpenSsl . isAvailable ( ) ) { return SslProvider . OPENSSL ; } else { return SslProvider . JDK ; } } @Deprecated public static SslContext newServerContext ( File certChainFile , File keyFile ) throws SSLException { return newServerContext ( certChainFile , keyFile , null ) ; } @Deprecated public static SslContext newServerContext ( File certChainFile , File keyFile , String keyPassword ) throws SSLException { return newServerContext ( null , certChainFile , keyFile , keyPassword ) ; } @Deprecated public static SslContext newServerContext ( File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , Iterable < String > nextProtocols , long sessionCacheSize , long sessionTimeout ) throws SSLException { return newServerContext ( null , certChainFile , keyFile , keyPassword , ciphers , nextProtocols , sessionCacheSize , sessionTimeout ) ; } @Deprecated public static SslContext newServerContext ( File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { return newServerContext ( null , certChainFile , keyFile , keyPassword , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; } @Deprecated public static SslContext newServerContext ( SslProvider provider , File certChainFile , File keyFile ) throws SSLException { return newServerContext ( provider , certChainFile , keyFile , null ) ; } @Deprecated public static SslContext newServerContext ( SslProvider provider , File certChainFile , File keyFile , String keyPassword ) throws SSLException { return newServerContext ( provider , certChainFile , keyFile , keyPassword , null , IdentityCipherSuiteFilter . INSTANCE , null , <int> , <int> ) ; } @Deprecated public static SslContext newServerContext ( SslProvider provider , File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , Iterable < String > nextProtocols , long sessionCacheSize , long sessionTimeout ) throws SSLException { return newServerContext ( provider , certChainFile , keyFile , keyPassword , ciphers , IdentityCipherSuiteFilter . INSTANCE , toApplicationProtocolConfig ( nextProtocols ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public static SslContext newServerContext ( SslProvider provider , File certChainFile , File keyFile , String keyPassword , TrustManagerFactory trustManagerFactory , Iterable < String > ciphers , Iterable < String > nextProtocols , long sessionCacheSize , long sessionTimeout ) throws SSLException { return newServerContext ( provider , null , trustManagerFactory , certChainFile , keyFile , keyPassword , null , ciphers , IdentityCipherSuiteFilter . INSTANCE , toApplicationProtocolConfig ( nextProtocols ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public static SslContext newServerContext ( SslProvider provider , File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { return newServerContext ( provider , null , null , certChainFile , keyFile , keyPassword , null , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; } @Deprecated public static SslContext newServerContext ( SslProvider provider , File trustCertChainFile , TrustManagerFactory trustManagerFactory , File keyCertChainFile , File keyFile , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { try { return newServerContextInternal ( provider , toX509Certificates ( trustCertChainFile ) , trustManagerFactory , toX509Certificates ( keyCertChainFile ) , toPrivateKey ( keyFile , keyPassword ) , keyPassword , keyManagerFactory , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout , ClientAuth . NONE ) ; } catch ( Exception e ) { if ( e instanceof SSLException ) { throw ( SSLException ) e ; } throw new SSLException ( <str> , e ) ; } } static SslContext newServerContextInternal ( SslProvider provider , X509Certificate [ ] trustCertChain , TrustManagerFactory trustManagerFactory , X509Certificate [ ] keyCertChain , PrivateKey key , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout , ClientAuth clientAuth ) throws SSLException { if ( provider = = null ) { provider = defaultServerProvider ( ) ; } switch ( provider ) { case JDK : return new JdkSslServerContext ( trustCertChain , trustManagerFactory , keyCertChain , key , keyPassword , keyManagerFactory , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout , clientAuth ) ; case OPENSSL : return new OpenSslServerContext ( trustCertChain , trustManagerFactory , keyCertChain , key , keyPassword , keyManagerFactory , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout , clientAuth ) ; default : throw new Error ( provider . toString ( ) ) ; } } @Deprecated public static SslContext newClientContext ( ) throws SSLException { return newClientContext ( null , null , null ) ; } @Deprecated public static SslContext newClientContext ( File certChainFile ) throws SSLException { return newClientContext ( null , certChainFile ) ; } @Deprecated public static SslContext newClientContext ( TrustManagerFactory trustManagerFactory ) throws SSLException { return newClientContext ( null , null , trustManagerFactory ) ; } @Deprecated public static SslContext newClientContext ( File certChainFile , TrustManagerFactory trustManagerFactory ) throws SSLException { return newClientContext ( null , certChainFile , trustManagerFactory ) ; } @Deprecated public static SslContext newClientContext ( File certChainFile , TrustManagerFactory trustManagerFactory , Iterable < String > ciphers , Iterable < String > nextProtocols , long sessionCacheSize , long sessionTimeout ) throws SSLException { return newClientContext ( null , certChainFile , trustManagerFactory , ciphers , nextProtocols , sessionCacheSize , sessionTimeout ) ; } @Deprecated public static SslContext newClientContext ( File certChainFile , TrustManagerFactory trustManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { return newClientContext ( null , certChainFile , trustManagerFactory , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; } @Deprecated public static SslContext newClientContext ( SslProvider provider ) throws SSLException { return newClientContext ( provider , null , null ) ; } @Deprecated public static SslContext newClientContext ( SslProvider provider , File certChainFile ) throws SSLException { return newClientContext ( provider , certChainFile , null ) ; } @Deprecated public static SslContext newClientContext ( SslProvider provider , TrustManagerFactory trustManagerFactory ) throws SSLException { return newClientContext ( provider , null , trustManagerFactory ) ; } @Deprecated public static SslContext newClientContext ( SslProvider provider , File certChainFile , TrustManagerFactory trustManagerFactory ) throws SSLException { return newClientContext ( provider , certChainFile , trustManagerFactory , null , IdentityCipherSuiteFilter . INSTANCE , null , <int> , <int> ) ; } @Deprecated public static SslContext newClientContext ( SslProvider provider , File certChainFile , TrustManagerFactory trustManagerFactory , Iterable < String > ciphers , Iterable < String > nextProtocols , long sessionCacheSize , long sessionTimeout ) throws SSLException { return newClientContext ( provider , certChainFile , trustManagerFactory , null , null , null , null , ciphers , IdentityCipherSuiteFilter . INSTANCE , toApplicationProtocolConfig ( nextProtocols ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public static SslContext newClientContext ( SslProvider provider , File certChainFile , TrustManagerFactory trustManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { return newClientContext ( provider , certChainFile , trustManagerFactory , null , null , null , null , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; } @Deprecated public static SslContext newClientContext ( SslProvider provider , File trustCertChainFile , TrustManagerFactory trustManagerFactory , File keyCertChainFile , File keyFile , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { try { return newClientContextInternal ( provider , toX509Certificates ( trustCertChainFile ) , trustManagerFactory , toX509Certificates ( keyCertChainFile ) , toPrivateKey ( keyFile , keyPassword ) , keyPassword , keyManagerFactory , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; } catch ( Exception e ) { if ( e instanceof SSLException ) { throw ( SSLException ) e ; } throw new SSLException ( <str> , e ) ; } } static SslContext newClientContextInternal ( SslProvider provider , X509Certificate [ ] trustCert , TrustManagerFactory trustManagerFactory , X509Certificate [ ] keyCertChain , PrivateKey key , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { if ( provider = = null ) { provider = defaultClientProvider ( ) ; } switch ( provider ) { case JDK : return new JdkSslClientContext ( trustCert , trustManagerFactory , keyCertChain , key , keyPassword , keyManagerFactory , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; case OPENSSL : return new OpenSslClientContext ( trustCert , trustManagerFactory , keyCertChain , key , keyPassword , keyManagerFactory , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; } throw new Error ( ) ; } static ApplicationProtocolConfig toApplicationProtocolConfig ( Iterable < String > nextProtocols ) { ApplicationProtocolConfig apn ; if ( nextProtocols = = null ) { apn = ApplicationProtocolConfig . DISABLED ; } else { apn = new ApplicationProtocolConfig ( Protocol . NPN_AND_ALPN , SelectorFailureBehavior . CHOOSE_MY_LAST_PROTOCOL , SelectedListenerFailureBehavior . ACCEPT , nextProtocols ) ; } return apn ; } SslContext ( ) { } public final boolean isServer ( ) { return ! isClient ( ) ; } public abstract boolean isClient ( ) ; public abstract List < String > cipherSuites ( ) ; public abstract long sessionCacheSize ( ) ; public abstract long sessionTimeout ( ) ; @Deprecated public final List < String > nextProtocols ( ) { return applicationProtocolNegotiator ( ) . protocols ( ) ; } public abstract ApplicationProtocolNegotiator applicationProtocolNegotiator ( ) ; public abstract SSLEngine newEngine ( ByteBufAllocator alloc ) ; public abstract SSLEngine newEngine ( ByteBufAllocator alloc , String peerHost , int peerPort ) ; public abstract SSLSessionContext sessionContext ( ) ; public final SslHandler newHandler ( ByteBufAllocator alloc ) { return newHandler ( newEngine ( alloc ) ) ; } public final SslHandler newHandler ( ByteBufAllocator alloc , String peerHost , int peerPort ) { return newHandler ( newEngine ( alloc , peerHost , peerPort ) ) ; } private static SslHandler newHandler ( SSLEngine engine ) { return new SslHandler ( engine ) ; } protected static PKCS8EncodedKeySpec generateKeySpec ( char [ ] password , byte [ ] key ) throws IOException , NoSuchAlgorithmException , NoSuchPaddingException , InvalidKeySpecException , InvalidKeyException , InvalidAlgorithmParameterException { if ( password = = null | | password . length = = <int> ) { return new PKCS8EncodedKeySpec ( key ) ; } EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = new EncryptedPrivateKeyInfo ( key ) ; SecretKeyFactory keyFactory = SecretKeyFactory . getInstance ( encryptedPrivateKeyInfo . getAlgName ( ) ) ; PBEKeySpec pbeKeySpec = new PBEKeySpec ( password ) ; SecretKey pbeKey = keyFactory . generateSecret ( pbeKeySpec ) ; Cipher cipher = Cipher . getInstance ( encryptedPrivateKeyInfo . getAlgName ( ) ) ; cipher . init ( Cipher . DECRYPT_MODE , pbeKey , encryptedPrivateKeyInfo . getAlgParameters ( ) ) ; return encryptedPrivateKeyInfo . getKeySpec ( cipher ) ; } static KeyStore buildKeyStore ( X509Certificate [ ] certChain , PrivateKey key , char [ ] keyPasswordChars ) throws KeyStoreException , NoSuchAlgorithmException , CertificateException , IOException { KeyStore ks = KeyStore . getInstance ( <str> ) ; ks . load ( null , null ) ; ks . setKeyEntry ( <str> , key , keyPasswordChars , certChain ) ; return ks ; } static PrivateKey toPrivateKey ( File keyFile , String keyPassword ) throws NoSuchAlgorithmException , NoSuchPaddingException , InvalidKeySpecException , InvalidAlgorithmParameterException , KeyException , IOException { if ( keyFile = = null ) { return null ; } ByteBuf encodedKeyBuf = PemReader . readPrivateKey ( keyFile ) ; byte [ ] encodedKey = new byte [ encodedKeyBuf . readableBytes ( ) ] ; encodedKeyBuf . readBytes ( encodedKey ) . release ( ) ; PKCS8EncodedKeySpec encodedKeySpec = generateKeySpec ( keyPassword = = null ? null : keyPassword . toCharArray ( ) , encodedKey ) ; PrivateKey key ; try { key = KeyFactory . getInstance ( <str> ) . generatePrivate ( encodedKeySpec ) ; } catch ( InvalidKeySpecException ignore ) { try { key = KeyFactory . getInstance ( <str> ) . generatePrivate ( encodedKeySpec ) ; } catch ( InvalidKeySpecException ignore2 ) { try { key = KeyFactory . getInstance ( <str> ) . generatePrivate ( encodedKeySpec ) ; } catch ( InvalidKeySpecException e ) { throw new InvalidKeySpecException ( <str> , e ) ; } } } return key ; } @Deprecated protected static TrustManagerFactory buildTrustManagerFactory ( File certChainFile , TrustManagerFactory trustManagerFactory ) throws NoSuchAlgorithmException , CertificateException , KeyStoreException , IOException { X509Certificate [ ] x509Certs = toX509Certificates ( certChainFile ) ; return buildTrustManagerFactory ( x509Certs , trustManagerFactory ) ; } static X509Certificate [ ] toX509Certificates ( File file ) throws CertificateException { if ( file = = null ) { return null ; } CertificateFactory cf = CertificateFactory . getInstance ( <str> ) ; ByteBuf [ ] certs = PemReader . readCertificates ( file ) ; X509Certificate [ ] x509Certs = new X509Certificate [ certs . length ] ; try { for ( int i = <int> ; i < certs . length ; i + + ) { x509Certs [ i ] = ( X509Certificate ) cf . generateCertificate ( new ByteBufInputStream ( certs [ i ] ) ) ; } } finally { for ( ByteBuf buf : certs ) { buf . release ( ) ; } } return x509Certs ; } static TrustManagerFactory buildTrustManagerFactory ( X509Certificate [ ] certChain , TrustManagerFactory trustManagerFactory ) throws NoSuchAlgorithmException , CertificateException , KeyStoreException , IOException { KeyStore ks = KeyStore . getInstance ( <str> ) ; ks . load ( null , null ) ; for ( X509Certificate cert : certChain ) { X500Principal principal = cert . getSubjectX500Principal ( ) ; ks . setCertificateEntry ( principal . getName ( <str> ) , cert ) ; } if ( trustManagerFactory = = null ) { trustManagerFactory = TrustManagerFactory . getInstance ( TrustManagerFactory . getDefaultAlgorithm ( ) ) ; } trustManagerFactory . init ( ks ) ; return trustManagerFactory ; } }
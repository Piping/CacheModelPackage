package org . apache . cassandra . db . view ; import java . net . InetAddress ; import java . util . HashMap ; import java . util . Map ; import java . util . Optional ; import org . junit . BeforeClass ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . dht . OrderPreservingPartitioner . StringToken ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . locator . IEndpointSnitch ; import org . apache . cassandra . locator . NetworkTopologyStrategy ; import org . apache . cassandra . locator . PropertyFileSnitch ; import org . apache . cassandra . locator . TokenMetadata ; import org . apache . cassandra . schema . KeyspaceMetadata ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . schema . ReplicationParams ; import org . apache . cassandra . service . StorageService ; public class ViewUtilsTest { @BeforeClass public static void setUp ( ) throws ConfigurationException { IEndpointSnitch snitch = new PropertyFileSnitch ( ) ; DatabaseDescriptor . setEndpointSnitch ( snitch ) ; Keyspace . setInitialized ( ) ; } @Test public void testGetIndexNaturalEndpoint ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; Map < String , String > replicationMap = new HashMap < > ( ) ; replicationMap . put ( ReplicationParams . CLASS , NetworkTopologyStrategy . class . getName ( ) ) ; replicationMap . put ( <str> , <str> ) ; replicationMap . put ( <str> , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . create ( false , replicationMap ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Optional < InetAddress > naturalEndpoint = ViewUtils . getViewNaturalEndpoint ( <str> , new StringToken ( <str> ) , new StringToken ( <str> ) ) ; Assert . assertTrue ( naturalEndpoint . isPresent ( ) ) ; Assert . assertEquals ( InetAddress . getByName ( <str> ) , naturalEndpoint . get ( ) ) ; } @Test public void testLocalHostPreference ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; Map < String , String > replicationMap = new HashMap < > ( ) ; replicationMap . put ( ReplicationParams . CLASS , NetworkTopologyStrategy . class . getName ( ) ) ; replicationMap . put ( <str> , <str> ) ; replicationMap . put ( <str> , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . create ( false , replicationMap ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Optional < InetAddress > naturalEndpoint = ViewUtils . getViewNaturalEndpoint ( <str> , new StringToken ( <str> ) , new StringToken ( <str> ) ) ; Assert . assertTrue ( naturalEndpoint . isPresent ( ) ) ; Assert . assertEquals ( InetAddress . getByName ( <str> ) , naturalEndpoint . get ( ) ) ; } @Test public void testBaseTokenDoesNotBelongToLocalReplicaShouldReturnEmpty ( ) throws Exception { TokenMetadata metadata = StorageService . instance . getTokenMetadata ( ) ; metadata . clearUnsafe ( ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; metadata . updateNormalToken ( new StringToken ( <str> ) , InetAddress . getByName ( <str> ) ) ; Map < String , String > replicationMap = new HashMap < > ( ) ; replicationMap . put ( ReplicationParams . CLASS , NetworkTopologyStrategy . class . getName ( ) ) ; replicationMap . put ( <str> , <str> ) ; replicationMap . put ( <str> , <str> ) ; Keyspace . clear ( <str> ) ; KeyspaceMetadata meta = KeyspaceMetadata . create ( <str> , KeyspaceParams . create ( false , replicationMap ) ) ; Schema . instance . setKeyspaceMetadata ( meta ) ; Optional < InetAddress > naturalEndpoint = ViewUtils . getViewNaturalEndpoint ( <str> , new StringToken ( <str> ) , new StringToken ( <str> ) ) ; Assert . assertFalse ( naturalEndpoint . isPresent ( ) ) ; } }
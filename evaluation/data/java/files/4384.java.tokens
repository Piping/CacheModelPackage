package io . netty . handler . codec . http ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufUtil ; import io . netty . handler . codec . Headers ; import io . netty . util . AsciiString ; import java . text . ParseException ; import java . util . Calendar ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public abstract class HttpHeaders implements Iterable < Map . Entry < String , String > > { @Deprecated public static final HttpHeaders EMPTY_HEADERS = EmptyHttpHeaders . instance ( ) ; @Deprecated public static final class Names { public static final String ACCEPT = <str> ; public static final String ACCEPT_CHARSET = <str> ; public static final String ACCEPT_ENCODING = <str> ; public static final String ACCEPT_LANGUAGE = <str> ; public static final String ACCEPT_RANGES = <str> ; public static final String ACCEPT_PATCH = <str> ; public static final String ACCESS_CONTROL_ALLOW_CREDENTIALS = <str> ; public static final String ACCESS_CONTROL_ALLOW_HEADERS = <str> ; public static final String ACCESS_CONTROL_ALLOW_METHODS = <str> ; public static final String ACCESS_CONTROL_ALLOW_ORIGIN = <str> ; public static final String ACCESS_CONTROL_EXPOSE_HEADERS = <str> ; public static final String ACCESS_CONTROL_MAX_AGE = <str> ; public static final String ACCESS_CONTROL_REQUEST_HEADERS = <str> ; public static final String ACCESS_CONTROL_REQUEST_METHOD = <str> ; public static final String AGE = <str> ; public static final String ALLOW = <str> ; public static final String AUTHORIZATION = <str> ; public static final String CACHE_CONTROL = <str> ; public static final String CONNECTION = <str> ; public static final String CONTENT_BASE = <str> ; public static final String CONTENT_ENCODING = <str> ; public static final String CONTENT_LANGUAGE = <str> ; public static final String CONTENT_LENGTH = <str> ; public static final String CONTENT_LOCATION = <str> ; public static final String CONTENT_TRANSFER_ENCODING = <str> ; public static final String CONTENT_MD5 = <str> ; public static final String CONTENT_RANGE = <str> ; public static final String CONTENT_TYPE = <str> ; public static final String COOKIE = <str> ; public static final String DATE = <str> ; public static final String ETAG = <str> ; public static final String EXPECT = <str> ; public static final String EXPIRES = <str> ; public static final String FROM = <str> ; public static final String HOST = <str> ; public static final String IF_MATCH = <str> ; public static final String IF_MODIFIED_SINCE = <str> ; public static final String IF_NONE_MATCH = <str> ; public static final String IF_RANGE = <str> ; public static final String IF_UNMODIFIED_SINCE = <str> ; public static final String LAST_MODIFIED = <str> ; public static final String LOCATION = <str> ; public static final String MAX_FORWARDS = <str> ; public static final String ORIGIN = <str> ; public static final String PRAGMA = <str> ; public static final String PROXY_AUTHENTICATE = <str> ; public static final String PROXY_AUTHORIZATION = <str> ; public static final String RANGE = <str> ; public static final String REFERER = <str> ; public static final String RETRY_AFTER = <str> ; public static final String SEC_WEBSOCKET_KEY1 = <str> ; public static final String SEC_WEBSOCKET_KEY2 = <str> ; public static final String SEC_WEBSOCKET_LOCATION = <str> ; public static final String SEC_WEBSOCKET_ORIGIN = <str> ; public static final String SEC_WEBSOCKET_PROTOCOL = <str> ; public static final String SEC_WEBSOCKET_VERSION = <str> ; public static final String SEC_WEBSOCKET_KEY = <str> ; public static final String SEC_WEBSOCKET_ACCEPT = <str> ; public static final String SERVER = <str> ; public static final String SET_COOKIE = <str> ; public static final String SET_COOKIE2 = <str> ; public static final String TE = <str> ; public static final String TRAILER = <str> ; public static final String TRANSFER_ENCODING = <str> ; public static final String UPGRADE = <str> ; public static final String USER_AGENT = <str> ; public static final String VARY = <str> ; public static final String VIA = <str> ; public static final String WARNING = <str> ; public static final String WEBSOCKET_LOCATION = <str> ; public static final String WEBSOCKET_ORIGIN = <str> ; public static final String WEBSOCKET_PROTOCOL = <str> ; public static final String WWW_AUTHENTICATE = <str> ; private Names ( ) { } } @Deprecated public static final class Values { public static final String APPLICATION_X_WWW_FORM_URLENCODED = <str> ; public static final String BASE64 = <str> ; public static final String BINARY = <str> ; public static final String BOUNDARY = <str> ; public static final String BYTES = <str> ; public static final String CHARSET = <str> ; public static final String CHUNKED = <str> ; public static final String CLOSE = <str> ; public static final String COMPRESS = <str> ; public static final String CONTINUE = <str> ; public static final String DEFLATE = <str> ; public static final String GZIP = <str> ; public static final String IDENTITY = <str> ; public static final String KEEP_ALIVE = <str> ; public static final String MAX_AGE = <str> ; public static final String MAX_STALE = <str> ; public static final String MIN_FRESH = <str> ; public static final String MULTIPART_FORM_DATA = <str> ; public static final String MUST_REVALIDATE = <str> ; public static final String NO_CACHE = <str> ; public static final String NO_STORE = <str> ; public static final String NO_TRANSFORM = <str> ; public static final String NONE = <str> ; public static final String ONLY_IF_CACHED = <str> ; public static final String PRIVATE = <str> ; public static final String PROXY_REVALIDATE = <str> ; public static final String PUBLIC = <str> ; public static final String QUOTED_PRINTABLE = <str> ; public static final String S_MAXAGE = <str> ; public static final String TRAILERS = <str> ; public static final String UPGRADE = <str> ; public static final String WEBSOCKET = <str> ; private Values ( ) { } } @Deprecated public static boolean isKeepAlive ( HttpMessage message ) { return HttpUtil . isKeepAlive ( message ) ; } @Deprecated public static void setKeepAlive ( HttpMessage message , boolean keepAlive ) { HttpUtil . setKeepAlive ( message , keepAlive ) ; } @Deprecated public static String getHeader ( HttpMessage message , String name ) { return message . headers ( ) . get ( name ) ; } @Deprecated public static String getHeader ( HttpMessage message , CharSequence name ) { return message . headers ( ) . get ( name ) ; } @Deprecated public static String getHeader ( HttpMessage message , String name , String defaultValue ) { return message . headers ( ) . get ( name , defaultValue ) ; } @Deprecated public static String getHeader ( HttpMessage message , CharSequence name , String defaultValue ) { return message . headers ( ) . get ( name , defaultValue ) ; } @Deprecated public static void setHeader ( HttpMessage message , String name , Object value ) { message . headers ( ) . set ( name , value ) ; } @Deprecated public static void setHeader ( HttpMessage message , CharSequence name , Object value ) { message . headers ( ) . set ( name , value ) ; } @Deprecated public static void setHeader ( HttpMessage message , String name , Iterable < ? > values ) { message . headers ( ) . set ( name , values ) ; } @Deprecated public static void setHeader ( HttpMessage message , CharSequence name , Iterable < ? > values ) { message . headers ( ) . set ( name , values ) ; } @Deprecated public static void addHeader ( HttpMessage message , String name , Object value ) { message . headers ( ) . add ( name , value ) ; } @Deprecated public static void addHeader ( HttpMessage message , CharSequence name , Object value ) { message . headers ( ) . add ( name , value ) ; } @Deprecated public static void removeHeader ( HttpMessage message , String name ) { message . headers ( ) . remove ( name ) ; } @Deprecated public static void removeHeader ( HttpMessage message , CharSequence name ) { message . headers ( ) . remove ( name ) ; } @Deprecated public static void clearHeaders ( HttpMessage message ) { message . headers ( ) . clear ( ) ; } @Deprecated public static int getIntHeader ( HttpMessage message , String name ) { return getIntHeader ( message , ( CharSequence ) name ) ; } @Deprecated public static int getIntHeader ( HttpMessage message , CharSequence name ) { String value = message . headers ( ) . get ( name ) ; if ( value = = null ) { throw new NumberFormatException ( <str> + name ) ; } return Integer . parseInt ( value ) ; } @Deprecated public static int getIntHeader ( HttpMessage message , String name , int defaultValue ) { return message . headers ( ) . getInt ( name , defaultValue ) ; } @Deprecated public static int getIntHeader ( HttpMessage message , CharSequence name , int defaultValue ) { return message . headers ( ) . getInt ( name , defaultValue ) ; } @Deprecated public static void setIntHeader ( HttpMessage message , String name , int value ) { message . headers ( ) . setInt ( name , value ) ; } @Deprecated public static void setIntHeader ( HttpMessage message , CharSequence name , int value ) { message . headers ( ) . setInt ( name , value ) ; } @Deprecated public static void setIntHeader ( HttpMessage message , String name , Iterable < Integer > values ) { message . headers ( ) . set ( name , values ) ; } @Deprecated public static void setIntHeader ( HttpMessage message , CharSequence name , Iterable < Integer > values ) { message . headers ( ) . set ( name , values ) ; } @Deprecated public static void addIntHeader ( HttpMessage message , String name , int value ) { message . headers ( ) . add ( name , value ) ; } @Deprecated public static void addIntHeader ( HttpMessage message , CharSequence name , int value ) { message . headers ( ) . addInt ( name , value ) ; } @Deprecated public static Date getDateHeader ( HttpMessage message , String name ) throws ParseException { return getDateHeader ( message , ( CharSequence ) name ) ; } @Deprecated public static Date getDateHeader ( HttpMessage message , CharSequence name ) throws ParseException { String value = message . headers ( ) . get ( name ) ; if ( value = = null ) { throw new ParseException ( <str> + name , <int> ) ; } return HttpHeaderDateFormat . get ( ) . parse ( value ) ; } @Deprecated public static Date getDateHeader ( HttpMessage message , String name , Date defaultValue ) { return getDateHeader ( message , ( CharSequence ) name , defaultValue ) ; } @Deprecated public static Date getDateHeader ( HttpMessage message , CharSequence name , Date defaultValue ) { final String value = getHeader ( message , name ) ; if ( value = = null ) { return defaultValue ; } try { return HttpHeaderDateFormat . get ( ) . parse ( value ) ; } catch ( ParseException ignored ) { return defaultValue ; } } @Deprecated public static void setDateHeader ( HttpMessage message , String name , Date value ) { setDateHeader ( message , ( CharSequence ) name , value ) ; } @Deprecated public static void setDateHeader ( HttpMessage message , CharSequence name , Date value ) { if ( value ! = null ) { message . headers ( ) . set ( name , HttpHeaderDateFormat . get ( ) . format ( value ) ) ; } else { message . headers ( ) . set ( name , null ) ; } } @Deprecated public static void setDateHeader ( HttpMessage message , String name , Iterable < Date > values ) { message . headers ( ) . set ( name , values ) ; } @Deprecated public static void setDateHeader ( HttpMessage message , CharSequence name , Iterable < Date > values ) { message . headers ( ) . set ( name , values ) ; } @Deprecated public static void addDateHeader ( HttpMessage message , String name , Date value ) { message . headers ( ) . add ( name , value ) ; } @Deprecated public static void addDateHeader ( HttpMessage message , CharSequence name , Date value ) { message . headers ( ) . add ( name , value ) ; } @Deprecated public static long getContentLength ( HttpMessage message ) { return HttpUtil . getContentLength ( message ) ; } @Deprecated public static long getContentLength ( HttpMessage message , long defaultValue ) { return HttpUtil . getContentLength ( message , defaultValue ) ; } @Deprecated public static void setContentLength ( HttpMessage message , long length ) { HttpUtil . setContentLength ( message , length ) ; } @Deprecated public static String getHost ( HttpMessage message ) { return message . headers ( ) . get ( HttpHeaderNames . HOST ) ; } @Deprecated public static String getHost ( HttpMessage message , String defaultValue ) { return message . headers ( ) . get ( HttpHeaderNames . HOST , defaultValue ) ; } @Deprecated public static void setHost ( HttpMessage message , String value ) { message . headers ( ) . set ( HttpHeaderNames . HOST , value ) ; } @Deprecated public static void setHost ( HttpMessage message , CharSequence value ) { message . headers ( ) . set ( HttpHeaderNames . HOST , value ) ; } @Deprecated public static Date getDate ( HttpMessage message ) throws ParseException { return getDateHeader ( message , HttpHeaderNames . DATE ) ; } @Deprecated public static Date getDate ( HttpMessage message , Date defaultValue ) { return getDateHeader ( message , HttpHeaderNames . DATE , defaultValue ) ; } @Deprecated public static void setDate ( HttpMessage message , Date value ) { message . headers ( ) . set ( HttpHeaderNames . DATE , value ) ; } @Deprecated public static boolean is100ContinueExpected ( HttpMessage message ) { return HttpUtil . is100ContinueExpected ( message ) ; } @Deprecated public static void set100ContinueExpected ( HttpMessage message ) { HttpUtil . set100ContinueExpected ( message , true ) ; } @Deprecated public static void set100ContinueExpected ( HttpMessage message , boolean set ) { HttpUtil . set100ContinueExpected ( message , set ) ; } @Deprecated public static boolean isTransferEncodingChunked ( HttpMessage message ) { return HttpUtil . isTransferEncodingChunked ( message ) ; } @Deprecated public static void removeTransferEncodingChunked ( HttpMessage m ) { HttpUtil . setTransferEncodingChunked ( m , false ) ; } @Deprecated public static void setTransferEncodingChunked ( HttpMessage m ) { HttpUtil . setTransferEncodingChunked ( m , true ) ; } @Deprecated public static boolean isContentLengthSet ( HttpMessage m ) { return HttpUtil . isContentLengthSet ( m ) ; } @Deprecated public static boolean equalsIgnoreCase ( CharSequence name1 , CharSequence name2 ) { return AsciiString . contentEqualsIgnoreCase ( name1 , name2 ) ; } static void encode ( HttpHeaders headers , ByteBuf buf ) throws Exception { Iterator < Entry < CharSequence , CharSequence > > iter = headers . iteratorCharSequence ( ) ; while ( iter . hasNext ( ) ) { Entry < CharSequence , CharSequence > header = iter . next ( ) ; HttpHeadersEncoder . encoderHeader ( header . getKey ( ) , header . getValue ( ) , buf ) ; } } public static void encodeAscii ( CharSequence seq , ByteBuf buf ) { if ( seq instanceof AsciiString ) { ByteBufUtil . copy ( ( AsciiString ) seq , <int> , buf , seq . length ( ) ) ; } else { HttpUtil . encodeAscii0 ( seq , buf ) ; } } @Deprecated public static CharSequence newEntity ( String name ) { return new AsciiString ( name ) ; } protected HttpHeaders ( ) { } public abstract String get ( String name ) ; public String get ( CharSequence name ) { return get ( name . toString ( ) ) ; } public String get ( CharSequence name , String defaultValue ) { String value = get ( name ) ; if ( value = = null ) { return defaultValue ; } return value ; } public abstract Integer getInt ( CharSequence name ) ; public abstract int getInt ( CharSequence name , int defaultValue ) ; public abstract Short getShort ( CharSequence name ) ; public abstract short getShort ( CharSequence name , short defaultValue ) ; public abstract Long getTimeMillis ( CharSequence name ) ; public abstract long getTimeMillis ( CharSequence name , long defaultValue ) ; public abstract List < String > getAll ( String name ) ; public List < String > getAll ( CharSequence name ) { return getAll ( name . toString ( ) ) ; } public abstract List < Map . Entry < String , String > > entries ( ) ; public abstract boolean contains ( String name ) ; @Deprecated @Override public abstract Iterator < Entry < String , String > > iterator ( ) ; public abstract Iterator < Entry < CharSequence , CharSequence > > iteratorCharSequence ( ) ; public boolean contains ( CharSequence name ) { return contains ( name . toString ( ) ) ; } public abstract boolean isEmpty ( ) ; public abstract int size ( ) ; public abstract Set < String > names ( ) ; public abstract HttpHeaders add ( String name , Object value ) ; public HttpHeaders add ( CharSequence name , Object value ) { return add ( name . toString ( ) , value ) ; } public abstract HttpHeaders add ( String name , Iterable < ? > values ) ; public HttpHeaders add ( CharSequence name , Iterable < ? > values ) { return add ( name . toString ( ) , values ) ; } public HttpHeaders add ( HttpHeaders headers ) { if ( headers = = null ) { throw new NullPointerException ( <str> ) ; } for ( Map . Entry < String , String > e : headers ) { add ( e . getKey ( ) , e . getValue ( ) ) ; } return this ; } public abstract HttpHeaders addInt ( CharSequence name , int value ) ; public abstract HttpHeaders addShort ( CharSequence name , short value ) ; public abstract HttpHeaders set ( String name , Object value ) ; public HttpHeaders set ( CharSequence name , Object value ) { return set ( name . toString ( ) , value ) ; } public abstract HttpHeaders set ( String name , Iterable < ? > values ) ; public HttpHeaders set ( CharSequence name , Iterable < ? > values ) { return set ( name . toString ( ) , values ) ; } public HttpHeaders set ( HttpHeaders headers ) { checkNotNull ( headers , <str> ) ; clear ( ) ; if ( headers . isEmpty ( ) ) { return this ; } for ( Entry < String , String > entry : headers ) { add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; } public HttpHeaders setAll ( HttpHeaders headers ) { checkNotNull ( headers , <str> ) ; if ( headers . isEmpty ( ) ) { return this ; } for ( Entry < String , String > entry : headers ) { set ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; } public abstract HttpHeaders setInt ( CharSequence name , int value ) ; public abstract HttpHeaders setShort ( CharSequence name , short value ) ; public abstract HttpHeaders remove ( String name ) ; public HttpHeaders remove ( CharSequence name ) { return remove ( name . toString ( ) ) ; } public abstract HttpHeaders clear ( ) ; public boolean contains ( String name , String value , boolean ignoreCase ) { List < String > values = getAll ( name ) ; if ( values . isEmpty ( ) ) { return false ; } for ( String v : values ) { if ( ignoreCase ) { if ( v . equalsIgnoreCase ( value ) ) { return true ; } } else { if ( v . equals ( value ) ) { return true ; } } } return false ; } public final String getAsString ( CharSequence name ) { return get ( name ) ; } public final List < String > getAllAsString ( CharSequence name ) { return getAll ( name ) ; } public final Iterator < Entry < String , String > > iteratorAsString ( ) { return iterator ( ) ; } public boolean contains ( CharSequence name , CharSequence value , boolean ignoreCase ) { return contains ( name . toString ( ) , value . toString ( ) , ignoreCase ) ; } }
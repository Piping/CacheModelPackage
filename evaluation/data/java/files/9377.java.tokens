package org . eclipse . debug . examples . ant . tasks ; import java . io . BufferedReader ; import java . io . File ; import java . io . FileReader ; import java . io . FileWriter ; import java . io . IOException ; import java . util . HashSet ; import java . util . Set ; import java . util . Vector ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . DirectoryScanner ; import org . apache . tools . ant . Task ; import org . apache . tools . ant . types . FileSet ; import org . apache . tools . ant . util . FileUtils ; public class PreProcessor extends Task { private Vector < FileSet > fFileSets = new Vector < FileSet > ( ) ; private File fDestDir = null ; private Set < String > fSymbols = new HashSet < String > ( ) ; private FileUtils fUtils = FileUtils . getFileUtils ( ) ; private static final int STATE_OUTSIDE_CONDITION = <int> ; private static final int STATE_TRUE_CONDITION = <int> ; private static final int STATE_FALSE_CONDITION = <int> ; private static final int STATE_POST_TRUE_CONDITION = <int> ; private Matcher IF_DEF_MATCHER = Pattern . compile ( <str> ) . matcher ( <str> ) ; private Matcher ELSE_IF_MATCHER = Pattern . compile ( <str> ) . matcher ( <str> ) ; private Matcher ELSE_MATCHER = Pattern . compile ( <str> ) . matcher ( <str> ) ; private Matcher END_MATCHER = Pattern . compile ( <str> ) . matcher ( <str> ) ; public PreProcessor ( ) { } public void addFileset ( FileSet set ) { fFileSets . addElement ( set ) ; } public void setDestdir ( File destDir ) { fDestDir = destDir ; } public void setSymbols ( String symbols ) { String [ ] strings = symbols . split ( <str> ) ; for ( int i = <int> ; i < strings . length ; i + + ) { String string = strings [ i ] . trim ( ) ; if ( string . length ( ) > <int> ) { fSymbols . add ( string ) ; } } } @Override public void execute ( ) throws BuildException { if ( fSymbols . size ( ) = = <int> ) { throw new BuildException ( <str> ) ; } if ( fFileSets . isEmpty ( ) ) { throw new BuildException ( <str> ) ; } if ( ! fDestDir . exists ( ) ) { throw new BuildException ( <str> + fDestDir . getAbsolutePath ( ) ) ; } StringBuffer buf = new StringBuffer ( <str> ) ; String [ ] symbols = fSymbols . toArray ( new String [ fSymbols . size ( ) ] ) ; for ( int i = <int> ; i < symbols . length ; i + + ) { String symbol = symbols [ i ] ; buf . append ( symbol ) ; if ( i < ( symbols . length - <int> ) ) { buf . append ( <str> ) ; } } log ( buf . toString ( ) ) ; for ( FileSet fileSet : fFileSets ) { DirectoryScanner scanner = fileSet . getDirectoryScanner ( getProject ( ) ) ; String [ ] includedFiles = scanner . getIncludedFiles ( ) ; File baseDir = fileSet . getDir ( getProject ( ) ) ; for ( int i = <int> ; i < includedFiles . length ; i + + ) { String fileName = includedFiles [ i ] ; processFile ( baseDir , fileName , fDestDir ) ; } } } private void processFile ( File baseDir , String fileName , File destDir ) throws BuildException { File destFile = new File ( destDir , fileName ) ; File srcFile = new File ( baseDir , fileName ) ; File dir = destFile . getParentFile ( ) ; if ( ! dir . exists ( ) ) { dir . mkdirs ( ) ; } String contents = null ; if ( fileName . endsWith ( <str> ) ) { contents = preProcessFile ( srcFile , <str> ) ; } else if ( fileName . equals ( <str> ) ) { contents = preProcessFile ( srcFile , null ) ; } if ( contents = = null ) { try { fUtils . copyFile ( srcFile , destFile ) ; } catch ( IOException e ) { throw new BuildException ( e ) ; } } else { try ( FileWriter writer = new FileWriter ( destFile ) ) { writer . write ( contents ) ; } catch ( IOException e ) { throw new BuildException ( e ) ; } } } public String preProcessFile ( File srcFile , String strip ) { try { boolean changed = false ; StringBuffer buffer = new StringBuffer ( ) ; try ( FileReader fileReader = new FileReader ( srcFile ) ; BufferedReader reader = new BufferedReader ( fileReader ) ) { String line = reader . readLine ( ) ; String activeSymbol = null ; int state = STATE_OUTSIDE_CONDITION ; while ( line ! = null ) { boolean ifdef = IF_DEF_MATCHER . reset ( line ) . find ( ) ; boolean elseif = ELSE_IF_MATCHER . reset ( line ) . find ( ) ; boolean elze = ELSE_MATCHER . reset ( line ) . find ( ) ; boolean endif = END_MATCHER . reset ( line ) . find ( ) ; boolean commandLine = ifdef | | elseif | | elze | | endif ; boolean written = false ; switch ( state ) { case STATE_OUTSIDE_CONDITION : if ( ifdef ) { String condition = line . substring ( IF_DEF_MATCHER . start ( ) , IF_DEF_MATCHER . end ( ) ) ; String [ ] strings = condition . split ( <str> ) ; activeSymbol = strings [ <int> ] . trim ( ) ; if ( fSymbols . contains ( activeSymbol ) ) { state = STATE_TRUE_CONDITION ; } else { state = STATE_FALSE_CONDITION ; } } else if ( elseif ) { throw new BuildException ( <str> ) ; } else if ( elze ) { throw new BuildException ( <str> + srcFile . getPath ( ) + <str> ) ; } else if ( endif ) { throw new BuildException ( <str> ) ; } break ; case STATE_TRUE_CONDITION : if ( elze | | elseif ) { state = STATE_POST_TRUE_CONDITION ; break ; } else if ( endif ) { state = STATE_OUTSIDE_CONDITION ; break ; } else if ( ifdef ) { throw new BuildException ( <str> ) ; } break ; case STATE_FALSE_CONDITION : if ( elseif ) { String condition = line . substring ( ELSE_IF_MATCHER . start ( ) , ELSE_IF_MATCHER . end ( ) ) ; String [ ] strings = condition . split ( <str> ) ; activeSymbol = strings [ <int> ] . trim ( ) ; if ( fSymbols . contains ( activeSymbol ) ) { state = STATE_TRUE_CONDITION ; } else { state = STATE_FALSE_CONDITION ; } } else if ( elze ) { state = STATE_TRUE_CONDITION ; break ; } else if ( endif ) { state = STATE_OUTSIDE_CONDITION ; break ; } else if ( ifdef ) { throw new BuildException ( <str> ) ; } break ; case STATE_POST_TRUE_CONDITION : if ( endif ) { state = STATE_OUTSIDE_CONDITION ; break ; } else if ( ifdef ) { throw new BuildException ( <str> ) ; } break ; default : break ; } if ( ! commandLine ) { if ( state = = STATE_OUTSIDE_CONDITION | | state = = STATE_TRUE_CONDITION ) { if ( state = = STATE_TRUE_CONDITION & & strip ! = null ) { if ( line . startsWith ( strip ) ) { line = line . substring ( strip . length ( ) ) ; } } buffer . append ( line ) ; buffer . append ( <str> ) ; written = true ; } } changed = changed | | ! written ; line = reader . readLine ( ) ; } } if ( ! changed ) { return null ; } return buffer . toString ( ) ; } catch ( IOException e ) { throw new BuildException ( e ) ; } } public static void main ( String [ ] args ) { PreProcessor processor = new PreProcessor ( ) ; processor . setSymbols ( <str> ) ; String string = processor . preProcessFile ( new File ( <str> ) , <str> ) ; System . out . println ( string ) ; } }
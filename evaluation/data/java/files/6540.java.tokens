package org . apache . cassandra . db . partition ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . db . RowUpdateBuilder ; import org . apache . cassandra . db . partitions . PartitionUpdate ; import org . apache . cassandra . utils . FBUtilities ; import org . junit . Test ; import junit . framework . Assert ; public class PartitionUpdateTest extends CQLTester { @Test public void testOperationCount ( ) { createTable ( <str> ) ; CFMetaData cfm = currentTableMetadata ( ) ; long timestamp = FBUtilities . timestampMicros ( ) ; PartitionUpdate update = new RowUpdateBuilder ( cfm , timestamp , <str> ) . clustering ( <int> ) . add ( <str> , <int> ) . buildUpdate ( ) ; Assert . assertEquals ( <int> , update . operationCount ( ) ) ; update = new RowUpdateBuilder ( cfm , timestamp , <str> ) . buildUpdate ( ) ; Assert . assertEquals ( <int> , update . operationCount ( ) ) ; update = new RowUpdateBuilder ( cfm , timestamp , <str> ) . add ( <str> , <int> ) . buildUpdate ( ) ; Assert . assertEquals ( <int> , update . operationCount ( ) ) ; update = new RowUpdateBuilder ( cfm , timestamp , <str> ) . add ( <str> , <int> ) . buildUpdate ( ) ; update = new RowUpdateBuilder ( update , timestamp , cfm . params . defaultTimeToLive ) . clustering ( <int> ) . add ( <str> , <int> ) . buildUpdate ( ) ; Assert . assertEquals ( <int> , update . operationCount ( ) ) ; } @Test public void testOperationCountWithCompactTable ( ) { createTable ( <str> ) ; CFMetaData cfm = currentTableMetadata ( ) ; PartitionUpdate update = new RowUpdateBuilder ( cfm , FBUtilities . timestampMicros ( ) , <str> ) . add ( <str> , <int> ) . buildUpdate ( ) ; Assert . assertEquals ( <int> , update . operationCount ( ) ) ; update = new RowUpdateBuilder ( cfm , FBUtilities . timestampMicros ( ) , <str> ) . buildUpdate ( ) ; Assert . assertEquals ( <int> , update . operationCount ( ) ) ; } }
package com . google . common . testing ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import java . util . ArrayList ; import java . util . LinkedList ; import java . util . List ; import java . util . logging . Level ; import java . util . logging . Logger ; @Beta @GwtCompatible public class TearDownStack implements TearDownAccepter { private static final Logger logger = Logger . getLogger ( TearDownStack . class . getName ( ) ) ; final LinkedList < TearDown > stack = new LinkedList < TearDown > ( ) ; private final boolean suppressThrows ; public TearDownStack ( ) { this . suppressThrows = false ; } public TearDownStack ( boolean suppressThrows ) { this . suppressThrows = suppressThrows ; } @Override public final void addTearDown ( TearDown tearDown ) { stack . addFirst ( checkNotNull ( tearDown ) ) ; } public final void runTearDown ( ) { List < Throwable > exceptions = new ArrayList < Throwable > ( ) ; for ( TearDown tearDown : stack ) { try { tearDown . tearDown ( ) ; } catch ( Throwable t ) { if ( suppressThrows ) { logger . log ( Level . INFO , <str> , t ) ; } else { exceptions . add ( t ) ; } } } stack . clear ( ) ; if ( ( ! suppressThrows ) & & ( exceptions . size ( ) > <int> ) ) { throw ClusterException . create ( exceptions ) ; } } }
package io . netty . channel . nio ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelInboundHandlerAdapter ; import io . netty . channel . ChannelOption ; import io . netty . channel . group . DefaultChannelGroup ; import io . netty . channel . socket . DatagramChannel ; import io . netty . channel . socket . nio . NioDatagramChannel ; import io . netty . util . ReferenceCountUtil ; import io . netty . util . concurrent . GlobalEventExecutor ; import org . junit . Assert ; import org . junit . Test ; import java . net . InetSocketAddress ; public class NioDatagramChannelTest { @Test public void testBindMultiple ( ) throws Exception { DefaultChannelGroup channelGroup = new DefaultChannelGroup ( GlobalEventExecutor . INSTANCE ) ; NioEventLoopGroup group = new NioEventLoopGroup ( ) ; try { for ( int i = <int> ; i < <int> ; i + + ) { Bootstrap udpBootstrap = new Bootstrap ( ) ; udpBootstrap . group ( group ) . channel ( NioDatagramChannel . class ) . option ( ChannelOption . SO_BROADCAST , true ) . handler ( new ChannelInboundHandlerAdapter ( ) { @Override public void channelRead ( ChannelHandlerContext ctx , Object msg ) { ReferenceCountUtil . release ( msg ) ; } } ) ; DatagramChannel datagramChannel = ( DatagramChannel ) udpBootstrap . bind ( new InetSocketAddress ( <int> ) ) . syncUninterruptibly ( ) . channel ( ) ; channelGroup . add ( datagramChannel ) ; } Assert . assertEquals ( <int> , channelGroup . size ( ) ) ; } finally { channelGroup . close ( ) . sync ( ) ; group . shutdownGracefully ( ) . sync ( ) ; } } }
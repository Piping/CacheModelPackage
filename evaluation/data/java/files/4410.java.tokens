package io . netty . handler . codec . http ; import io . netty . buffer . ByteBuf ; import io . netty . util . CharsetUtil ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class HttpVersion implements Comparable < HttpVersion > { private static final Pattern VERSION_PATTERN = Pattern . compile ( <str> ) ; private static final String HTTP_1_0_STRING = <str> ; private static final String HTTP_1_1_STRING = <str> ; public static final HttpVersion HTTP_1_0 = new HttpVersion ( <str> , <int> , <int> , false , true ) ; public static final HttpVersion HTTP_1_1 = new HttpVersion ( <str> , <int> , <int> , true , true ) ; public static HttpVersion valueOf ( String text ) { if ( text = = null ) { throw new NullPointerException ( <str> ) ; } text = text . trim ( ) ; if ( text . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } HttpVersion version = version0 ( text ) ; if ( version = = null ) { version = new HttpVersion ( text , true ) ; } return version ; } private static HttpVersion version0 ( String text ) { if ( HTTP_1_1_STRING . equals ( text ) ) { return HTTP_1_1 ; } if ( HTTP_1_0_STRING . equals ( text ) ) { return HTTP_1_0 ; } return null ; } private final String protocolName ; private final int majorVersion ; private final int minorVersion ; private final String text ; private final boolean keepAliveDefault ; private final byte [ ] bytes ; public HttpVersion ( String text , boolean keepAliveDefault ) { if ( text = = null ) { throw new NullPointerException ( <str> ) ; } text = text . trim ( ) . toUpperCase ( ) ; if ( text . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } Matcher m = VERSION_PATTERN . matcher ( text ) ; if ( ! m . matches ( ) ) { throw new IllegalArgumentException ( <str> + text ) ; } protocolName = m . group ( <int> ) ; majorVersion = Integer . parseInt ( m . group ( <int> ) ) ; minorVersion = Integer . parseInt ( m . group ( <int> ) ) ; this . text = protocolName + <str> + majorVersion + <str> + minorVersion ; this . keepAliveDefault = keepAliveDefault ; bytes = null ; } public HttpVersion ( String protocolName , int majorVersion , int minorVersion , boolean keepAliveDefault ) { this ( protocolName , majorVersion , minorVersion , keepAliveDefault , false ) ; } private HttpVersion ( String protocolName , int majorVersion , int minorVersion , boolean keepAliveDefault , boolean bytes ) { if ( protocolName = = null ) { throw new NullPointerException ( <str> ) ; } protocolName = protocolName . trim ( ) . toUpperCase ( ) ; if ( protocolName . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } for ( int i = <int> ; i < protocolName . length ( ) ; i + + ) { if ( Character . isISOControl ( protocolName . charAt ( i ) ) | | Character . isWhitespace ( protocolName . charAt ( i ) ) ) { throw new IllegalArgumentException ( <str> ) ; } } if ( majorVersion < <int> ) { throw new IllegalArgumentException ( <str> ) ; } if ( minorVersion < <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . protocolName = protocolName ; this . majorVersion = majorVersion ; this . minorVersion = minorVersion ; text = protocolName + <str> + majorVersion + <str> + minorVersion ; this . keepAliveDefault = keepAliveDefault ; if ( bytes ) { this . bytes = text . getBytes ( CharsetUtil . US_ASCII ) ; } else { this . bytes = null ; } } public String protocolName ( ) { return protocolName ; } public int majorVersion ( ) { return majorVersion ; } public int minorVersion ( ) { return minorVersion ; } public String text ( ) { return text ; } public boolean isKeepAliveDefault ( ) { return keepAliveDefault ; } @Override public String toString ( ) { return text ( ) ; } @Override public int hashCode ( ) { return ( protocolName ( ) . hashCode ( ) * <int> + majorVersion ( ) ) * <int> + minorVersion ( ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof HttpVersion ) ) { return false ; } HttpVersion that = ( HttpVersion ) o ; return minorVersion ( ) = = that . minorVersion ( ) & & majorVersion ( ) = = that . majorVersion ( ) & & protocolName ( ) . equals ( that . protocolName ( ) ) ; } @Override public int compareTo ( HttpVersion o ) { int v = protocolName ( ) . compareTo ( o . protocolName ( ) ) ; if ( v ! = <int> ) { return v ; } v = majorVersion ( ) - o . majorVersion ( ) ; if ( v ! = <int> ) { return v ; } return minorVersion ( ) - o . minorVersion ( ) ; } void encode ( ByteBuf buf ) { if ( bytes = = null ) { HttpUtil . encodeAscii0 ( text , buf ) ; } else { buf . writeBytes ( bytes ) ; } } }
package io . netty . handler . codec . http . cookie ; import static io . netty . handler . codec . http . cookie . CookieUtil . add ; import static io . netty . handler . codec . http . cookie . CookieUtil . addQuoted ; import static io . netty . handler . codec . http . cookie . CookieUtil . stringBuilder ; import static io . netty . handler . codec . http . cookie . CookieUtil . stripTrailingSeparator ; import static io . netty . handler . codec . http . cookie . CookieUtil . stripTrailingSeparatorOrNull ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; import io . netty . handler . codec . http . HttpRequest ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Comparator ; import java . util . Iterator ; import java . util . List ; public final class ClientCookieEncoder extends CookieEncoder { public static final ClientCookieEncoder STRICT = new ClientCookieEncoder ( true ) ; public static final ClientCookieEncoder LAX = new ClientCookieEncoder ( false ) ; private ClientCookieEncoder ( boolean strict ) { super ( strict ) ; } public String encode ( String name , String value ) { return encode ( new DefaultCookie ( name , value ) ) ; } public String encode ( Cookie cookie ) { StringBuilder buf = stringBuilder ( ) ; encode ( buf , checkNotNull ( cookie , <str> ) ) ; return stripTrailingSeparator ( buf ) ; } private static final Comparator < Cookie > COOKIE_COMPARATOR = new Comparator < Cookie > ( ) { @Override public int compare ( Cookie c1 , Cookie c2 ) { String path1 = c1 . path ( ) ; String path2 = c2 . path ( ) ; int len1 = path1 = = null ? Integer . MAX_VALUE : path1 . length ( ) ; int len2 = path2 = = null ? Integer . MAX_VALUE : path2 . length ( ) ; int diff = len2 - len1 ; if ( diff ! = <int> ) { return diff ; } return - <int> ; } } ; public String encode ( Cookie . . . cookies ) { if ( checkNotNull ( cookies , <str> ) . length = = <int> ) { return null ; } StringBuilder buf = stringBuilder ( ) ; if ( strict ) { if ( cookies . length = = <int> ) { encode ( buf , cookies [ <int> ] ) ; } else { Cookie [ ] cookiesSorted = Arrays . copyOf ( cookies , cookies . length ) ; Arrays . sort ( cookiesSorted , COOKIE_COMPARATOR ) ; for ( Cookie c : cookiesSorted ) { encode ( buf , c ) ; } } } else { for ( Cookie c : cookies ) { encode ( buf , c ) ; } } return stripTrailingSeparatorOrNull ( buf ) ; } public String encode ( Collection < ? extends Cookie > cookies ) { if ( checkNotNull ( cookies , <str> ) . isEmpty ( ) ) { return null ; } StringBuilder buf = stringBuilder ( ) ; if ( strict ) { if ( cookies . size ( ) = = <int> ) { encode ( buf , cookies . iterator ( ) . next ( ) ) ; } else { Cookie [ ] cookiesSorted = cookies . toArray ( new Cookie [ cookies . size ( ) ] ) ; Arrays . sort ( cookiesSorted , COOKIE_COMPARATOR ) ; for ( Cookie c : cookiesSorted ) { encode ( buf , c ) ; } } } else { for ( Cookie c : cookies ) { encode ( buf , c ) ; } } return stripTrailingSeparatorOrNull ( buf ) ; } public String encode ( Iterable < ? extends Cookie > cookies ) { Iterator < ? extends Cookie > cookiesIt = checkNotNull ( cookies , <str> ) . iterator ( ) ; if ( ! cookiesIt . hasNext ( ) ) { return null ; } StringBuilder buf = stringBuilder ( ) ; if ( strict ) { Cookie firstCookie = cookiesIt . next ( ) ; if ( ! cookiesIt . hasNext ( ) ) { encode ( buf , firstCookie ) ; } else { List < Cookie > cookiesList = new ArrayList < Cookie > ( ) ; cookiesList . add ( firstCookie ) ; while ( cookiesIt . hasNext ( ) ) { cookiesList . add ( cookiesIt . next ( ) ) ; } Cookie [ ] cookiesSorted = cookiesList . toArray ( new Cookie [ cookiesList . size ( ) ] ) ; Arrays . sort ( cookiesSorted , COOKIE_COMPARATOR ) ; for ( Cookie c : cookiesSorted ) { encode ( buf , c ) ; } } } else { while ( cookiesIt . hasNext ( ) ) { encode ( buf , cookiesIt . next ( ) ) ; } } return stripTrailingSeparatorOrNull ( buf ) ; } private void encode ( StringBuilder buf , Cookie c ) { final String name = c . name ( ) ; final String value = c . value ( ) ! = null ? c . value ( ) : <str> ; validateCookie ( name , value ) ; if ( c . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } } }
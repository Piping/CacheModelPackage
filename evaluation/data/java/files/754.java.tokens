package com . google . common . net ; import com . google . common . annotations . Beta ; import com . google . common . base . Preconditions ; import java . net . InetAddress ; import java . text . ParseException ; import javax . annotation . Nullable ; @Beta public final class HostSpecifier { private final String canonicalForm ; private HostSpecifier ( String canonicalForm ) { this . canonicalForm = canonicalForm ; } public static HostSpecifier fromValid ( String specifier ) { final HostAndPort parsedHost = HostAndPort . fromString ( specifier ) ; Preconditions . checkArgument ( ! parsedHost . hasPort ( ) ) ; final String host = parsedHost . getHostText ( ) ; InetAddress addr = null ; try { addr = InetAddresses . forString ( host ) ; } catch ( IllegalArgumentException e ) { } if ( addr ! = null ) { return new HostSpecifier ( InetAddresses . toUriString ( addr ) ) ; } final InternetDomainName domain = InternetDomainName . from ( host ) ; if ( domain . hasPublicSuffix ( ) ) { return new HostSpecifier ( domain . toString ( ) ) ; } throw new IllegalArgumentException ( <str> + host ) ; } public static HostSpecifier from ( String specifier ) throws ParseException { try { return fromValid ( specifier ) ; } catch ( IllegalArgumentException e ) { ParseException parseException = new ParseException ( <str> + specifier , <int> ) ; parseException . initCause ( e ) ; throw parseException ; } } public static boolean isValid ( String specifier ) { try { fromValid ( specifier ) ; return true ; } catch ( IllegalArgumentException e ) { return false ; } } @Override public boolean equals ( @Nullable Object other ) { if ( this = = other ) { return true ; } if ( other instanceof HostSpecifier ) { final HostSpecifier that = ( HostSpecifier ) other ; return this . canonicalForm . equals ( that . canonicalForm ) ; } return false ; } @Override public int hashCode ( ) { return canonicalForm . hashCode ( ) ; } @Override public String toString ( ) { return canonicalForm ; } }
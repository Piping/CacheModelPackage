package org . nd4j . linalg . api . indexing . shape ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . INDArrayIndex ; import org . nd4j . linalg . indexing . Indices ; import org . nd4j . linalg . indexing . NDArrayIndex ; import static org . junit . Assert . assertArrayEquals ; public class IndexShapeTests2d extends BaseNd4jTest { public IndexShapeTests2d ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } private int [ ] shape = { <int> , <int> } ; @Test public void test2dCases ( ) { assertArrayEquals ( new int [ ] { <int> , <int> } , Indices . shape ( shape , new INDArrayIndex [ ] { NDArrayIndex . point ( <int> ) } ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , Indices . shape ( shape , new INDArrayIndex [ ] { NDArrayIndex . all ( ) , NDArrayIndex . point ( <int> ) } ) ) ; } @Test public void testNewAxis2d ( ) { assertArrayEquals ( new int [ ] { <int> , <int> , <int> } , Indices . shape ( shape , new INDArrayIndex [ ] { NDArrayIndex . newAxis ( ) , NDArrayIndex . all ( ) , NDArrayIndex . all ( ) } ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> , <int> } , Indices . shape ( shape , new INDArrayIndex [ ] { NDArrayIndex . all ( ) , NDArrayIndex . newAxis ( ) , NDArrayIndex . all ( ) } ) ) ; } @Override public char ordering ( ) { return <str> ; } }
package org . apache . cassandra . cache ; import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; import org . apache . cassandra . io . util . Memory ; public class RefCountedMemory extends Memory implements AutoCloseable { private volatile int references = <int> ; private static final AtomicIntegerFieldUpdater < RefCountedMemory > UPDATER = AtomicIntegerFieldUpdater . newUpdater ( RefCountedMemory . class , <str> ) ; public RefCountedMemory ( long size ) { super ( size ) ; } public boolean reference ( ) { while ( true ) { int n = UPDATER . get ( this ) ; if ( n < = <int> ) return false ; if ( UPDATER . compareAndSet ( this , n , n + <int> ) ) return true ; } } public void unreference ( ) { if ( UPDATER . decrementAndGet ( this ) = = <int> ) super . free ( ) ; } public RefCountedMemory copy ( long newSize ) { RefCountedMemory copy = new RefCountedMemory ( newSize ) ; copy . put ( <int> , this , <int> , Math . min ( size ( ) , newSize ) ) ; return copy ; } public void free ( ) { throw new AssertionError ( ) ; } public void close ( ) { unreference ( ) ; } }
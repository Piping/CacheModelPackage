package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer . ShapeType ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Group ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . tests . utils . GdxTest ; public class GroupTest extends GdxTest { Stage stage ; SpriteBatch batch ; BitmapFont font ; ShapeRenderer renderer ; TextureRegion region ; TestGroup group1 ; TestGroup group2 ; public void create ( ) { batch = new SpriteBatch ( ) ; font = new BitmapFont ( ) ; renderer = new ShapeRenderer ( ) ; stage = new Stage ( ) ; Gdx . input . setInputProcessor ( stage ) ; region = new TextureRegion ( new Texture ( Gdx . files . internal ( <str> ) ) ) ; group2 = new TestGroup ( <str> ) ; group2 . setTransform ( true ) ; stage . addActor ( group2 ) ; group1 = new TestGroup ( <str> ) ; group1 . setTransform ( true ) ; group2 . addActor ( group1 ) ; } public void render ( ) { group2 . setBounds ( <int> , <int> , <int> , <int> ) ; group2 . setRotation ( <int> ) ; group2 . setOrigin ( <int> , <int> ) ; group2 . setScale ( <float> ) ; group1 . setBounds ( <int> , <int> , <int> , <int> ) ; group1 . setRotation ( <int> ) ; group1 . setOrigin ( <int> , <int> ) ; group1 . setScale ( <float> ) ; Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . draw ( ) ; renderer . setProjectionMatrix ( batch . getProjectionMatrix ( ) ) ; renderer . begin ( ShapeType . Filled ) ; if ( MathUtils . randomBoolean ( ) ) { renderer . setColor ( Color . GREEN ) ; renderer . circle ( group1 . toScreenCoordinates . x , Gdx . graphics . getHeight ( ) - group1 . toScreenCoordinates . y , <int> ) ; renderer . setColor ( Color . RED ) ; renderer . circle ( group1 . localToParentCoordinates . x , Gdx . graphics . getHeight ( ) - group1 . localToParentCoordinates . y , <int> ) ; } else { renderer . setColor ( Color . RED ) ; renderer . circle ( group1 . localToParentCoordinates . x , Gdx . graphics . getHeight ( ) - group1 . localToParentCoordinates . y , <int> ) ; renderer . setColor ( Color . GREEN ) ; renderer . circle ( group1 . toScreenCoordinates . x , Gdx . graphics . getHeight ( ) - group1 . toScreenCoordinates . y , <int> ) ; } renderer . end ( ) ; } public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } public boolean needsGL20 ( ) { return false ; } class TestGroup extends Group { private String name ; Vector2 toScreenCoordinates = new Vector2 ( ) ; Vector2 localToParentCoordinates = new Vector2 ( ) ; float testX = <int> ; float testY = <int> ; public TestGroup ( String name ) { this . name = name ; addListener ( new InputListener ( ) { public boolean mouseMoved ( InputEvent event , float x , float y ) { testX = x ; testY = y ; return true ; } } ) ; } public void draw ( Batch batch , float parentAlpha ) { toScreenCoordinates . set ( testX , testY ) . sub ( getOriginX ( ) , getOriginY ( ) ) . scl ( getScaleX ( ) , getScaleY ( ) ) . rotate ( getRotation ( ) ) . add ( getOriginX ( ) , getOriginY ( ) ) . add ( getX ( ) , getY ( ) ) ; getStage ( ) . toScreenCoordinates ( toScreenCoordinates , batch . getTransformMatrix ( ) ) ; localToAscendantCoordinates ( null , localToParentCoordinates . set ( testX , testY ) ) ; getStage ( ) . stageToScreenCoordinates ( localToParentCoordinates ) ; batch . setColor ( getColor ( ) ) ; batch . draw ( region , getX ( ) , getY ( ) , getOriginX ( ) , getOriginY ( ) , getWidth ( ) , getHeight ( ) , getScaleX ( ) , getScaleY ( ) , getRotation ( ) ) ; super . draw ( batch , parentAlpha ) ; } } }
package rx . internal . operators ; import rx . * ; import rx . Observable . OnSubscribe ; import rx . exceptions . Exceptions ; import rx . functions . Func0 ; import rx . observers . Subscribers ; public final class OnSubscribeDelaySubscriptionWithSelector < T , U > implements OnSubscribe < T > { final Observable < ? extends T > source ; final Func0 < ? extends Observable < U > > subscriptionDelay ; public OnSubscribeDelaySubscriptionWithSelector ( Observable < ? extends T > source , Func0 < ? extends Observable < U > > subscriptionDelay ) { this . source = source ; this . subscriptionDelay = subscriptionDelay ; } @Override public void call ( final Subscriber < ? super T > child ) { try { subscriptionDelay . call ( ) . take ( <int> ) . unsafeSubscribe ( new Subscriber < U > ( ) { @Override public void onCompleted ( ) { source . unsafeSubscribe ( Subscribers . wrap ( child ) ) ; } @Override public void onError ( Throwable e ) { child . onError ( e ) ; } @Override public void onNext ( U t ) { } } ) ; } catch ( Throwable e ) { Exceptions . throwOrReport ( e , child ) ; } } }
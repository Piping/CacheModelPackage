package com . badlogic . gdx . tests . extensions ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . assets . loaders . FileHandleResolver ; import com . badlogic . gdx . assets . loaders . resolvers . InternalFileHandleResolver ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGenerator ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGeneratorLoader ; import com . badlogic . gdx . graphics . g2d . freetype . FreetypeFontLoader ; import com . badlogic . gdx . graphics . g2d . freetype . FreetypeFontLoader . FreeTypeFontLoaderParameter ; import com . badlogic . gdx . tests . utils . GdxTest ; public class FreeTypeFontLoaderTest extends GdxTest { AssetManager manager ; SpriteBatch batch ; @Override public void create ( ) { manager = new AssetManager ( ) ; FileHandleResolver resolver = new InternalFileHandleResolver ( ) ; manager . setLoader ( FreeTypeFontGenerator . class , new FreeTypeFontGeneratorLoader ( resolver ) ) ; manager . setLoader ( BitmapFont . class , <str> , new FreetypeFontLoader ( resolver ) ) ; FreeTypeFontLoaderParameter size1Params = new FreeTypeFontLoaderParameter ( ) ; size1Params . fontFileName = <str> ; size1Params . fontParameters . size = <int> ; manager . load ( <str> , BitmapFont . class , size1Params ) ; FreeTypeFontLoaderParameter size2Params = new FreeTypeFontLoaderParameter ( ) ; size2Params . fontFileName = <str> ; size2Params . fontParameters . size = <int> ; manager . load ( <str> , BitmapFont . class , size2Params ) ; manager . load ( <str> , BitmapFont . class ) ; batch = new SpriteBatch ( ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; if ( manager . update ( ) & & manager . isLoaded ( <str> ) ) { batch . begin ( ) ; manager . get ( <str> , BitmapFont . class ) . draw ( batch , <str> , <int> , <int> ) ; manager . get ( <str> , BitmapFont . class ) . draw ( batch , <str> , <int> , <int> ) ; manager . get ( <str> , BitmapFont . class ) . draw ( batch , <str> , <int> , <int> ) ; batch . end ( ) ; } if ( Gdx . input . justTouched ( ) & & manager . isLoaded ( <str> ) ) { manager . unload ( <str> ) ; manager . finishLoading ( ) ; if ( manager . isLoaded ( <str> ) ) throw new RuntimeException ( <str> ) ; if ( ! manager . isLoaded ( <str> ) ) throw new RuntimeException ( <str> ) ; manager . unload ( <str> ) ; manager . finishLoading ( ) ; if ( manager . isLoaded ( <str> ) ) throw new RuntimeException ( <str> ) ; if ( manager . isLoaded ( <str> ) ) throw new RuntimeException ( <str> ) ; } } @Override public void dispose ( ) { manager . dispose ( ) ; batch . dispose ( ) ; } }
package com . netflix . hystrix . strategy . concurrency ; import java . util . concurrent . Callable ; import com . netflix . hystrix . strategy . HystrixPlugins ; public class HystrixContextCallable < K > implements Callable < K > { private final Callable < K > actual ; private final HystrixRequestContext parentThreadState ; public HystrixContextCallable ( Callable < K > actual ) { this ( HystrixPlugins . getInstance ( ) . getConcurrencyStrategy ( ) , actual ) ; } public HystrixContextCallable ( HystrixConcurrencyStrategy concurrencyStrategy , Callable < K > actual ) { this . actual = concurrencyStrategy . wrapCallable ( actual ) ; this . parentThreadState = HystrixRequestContext . getContextForCurrentThread ( ) ; } @Override public K call ( ) throws Exception { HystrixRequestContext existingState = HystrixRequestContext . getContextForCurrentThread ( ) ; try { HystrixRequestContext . setContextOnCurrentThread ( parentThreadState ) ; return actual . call ( ) ; } finally { HystrixRequestContext . setContextOnCurrentThread ( existingState ) ; } } }
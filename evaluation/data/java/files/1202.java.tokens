package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . viewport . ScreenViewport ; public class ColorTest extends GdxTest { Stage stage ; @Override public void create ( ) { stage = new Stage ( new ScreenViewport ( ) ) ; Gdx . input . setInputProcessor ( stage ) ; Skin skin = new Skin ( Gdx . files . internal ( <str> ) ) ; skin . add ( <str> , new BitmapFont ( Gdx . files . internal ( <str> ) , false ) ) ; Table root = new Table ( ) ; stage . addActor ( root ) ; root . setFillParent ( true ) ; Table column1 = new Table ( skin ) ; column1 . add ( <str> , <str> , Color . WHITE ) . row ( ) ; column1 . add ( <str> , <str> , Color . LIGHT_GRAY ) . row ( ) ; column1 . add ( <str> , <str> , Color . GRAY ) . row ( ) ; column1 . add ( <str> , <str> , Color . DARK_GRAY ) . row ( ) ; column1 . add ( <str> , <str> , Color . BLUE ) . row ( ) ; column1 . add ( <str> , <str> , Color . NAVY ) . row ( ) ; column1 . add ( <str> , <str> , Color . ROYAL ) . row ( ) ; column1 . add ( <str> , <str> , Color . SLATE ) . row ( ) ; column1 . add ( <str> , <str> , Color . SKY ) . row ( ) ; column1 . add ( <str> , <str> , Color . CYAN ) . row ( ) ; column1 . add ( <str> , <str> , Color . TEAL ) . row ( ) ; Table column2 = new Table ( skin ) ; column2 . add ( <str> , <str> , Color . GREEN ) . row ( ) ; column2 . add ( <str> , <str> , Color . CHARTREUSE ) . row ( ) ; column2 . add ( <str> , <str> , Color . LIME ) . row ( ) ; column2 . add ( <str> , <str> , Color . FOREST ) . row ( ) ; column2 . add ( <str> , <str> , Color . OLIVE ) . row ( ) ; column2 . add ( <str> , <str> , Color . YELLOW ) . row ( ) ; column2 . add ( <str> , <str> , Color . GOLD ) . row ( ) ; column2 . add ( <str> , <str> , Color . GOLDENROD ) . row ( ) ; column2 . add ( <str> , <str> , Color . ORANGE ) . row ( ) ; column2 . add ( <str> , <str> , Color . BROWN ) . row ( ) ; column2 . add ( <str> , <str> , Color . TAN ) . row ( ) ; column2 . add ( <str> , <str> , Color . FIREBRICK ) . row ( ) ; Table column3 = new Table ( skin ) ; column3 . add ( <str> , <str> , Color . RED ) . row ( ) ; column3 . add ( <str> , <str> , Color . SCARLET ) . row ( ) ; column3 . add ( <str> , <str> , Color . CORAL ) . row ( ) ; column3 . add ( <str> , <str> , Color . SALMON ) . row ( ) ; column3 . add ( <str> , <str> , Color . PINK ) . row ( ) ; column3 . add ( <str> , <str> , Color . MAGENTA ) . row ( ) ; column3 . add ( <str> , <str> , Color . PURPLE ) . row ( ) ; column3 . add ( <str> , <str> , Color . VIOLET ) . row ( ) ; column3 . add ( <str> , <str> , Color . MAROON ) . row ( ) ; root . add ( column1 ) ; root . add ( column2 ) ; root . add ( column3 ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Math . min ( Gdx . graphics . getDeltaTime ( ) , <int> / <int> f ) ) ; stage . draw ( ) ; } @Override public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } } 

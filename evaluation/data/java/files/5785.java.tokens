package rx . exceptions ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertNotNull ; import java . io . ByteArrayOutputStream ; import java . io . PrintStream ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import org . junit . Test ; public class CompositeExceptionTest { private final Throwable ex1 = new Throwable ( <str> ) ; private final Throwable ex2 = new Throwable ( <str> , ex1 ) ; private final Throwable ex3 = new Throwable ( <str> , ex2 ) ; public CompositeExceptionTest ( ) { } private CompositeException getNewCompositeExceptionWithEx123 ( ) { List < Throwable > throwables = new ArrayList < Throwable > ( ) ; throwables . add ( ex1 ) ; throwables . add ( ex2 ) ; throwables . add ( ex3 ) ; return new CompositeException ( throwables ) ; } @Test ( timeout = <int> ) public void testMultipleWithSameCause ( ) { Throwable rootCause = new Throwable ( <str> ) ; Throwable e1 = new Throwable ( <str> , rootCause ) ; Throwable e2 = new Throwable ( <str> , rootCause ) ; Throwable e3 = new Throwable ( <str> , rootCause ) ; CompositeException ce = new CompositeException ( <str> , Arrays . asList ( e1 , e2 , e3 ) ) ; System . err . println ( <str> ) ; ce . printStackTrace ( ) ; assertEquals ( <int> , ce . getExceptions ( ) . size ( ) ) ; assertNoCircularReferences ( ce ) ; assertNotNull ( getRootCause ( ce ) ) ; System . err . println ( <str> ) ; ce . getCause ( ) . printStackTrace ( ) ; } @Test ( timeout = <int> ) public void testCompositeExceptionFromParentThenChild ( ) { CompositeException cex = new CompositeException ( Arrays . asList ( ex1 , ex2 ) ) ; System . err . println ( <str> ) ; cex . printStackTrace ( ) ; assertEquals ( <int> , cex . getExceptions ( ) . size ( ) ) ; assertNoCircularReferences ( cex ) ; assertNotNull ( getRootCause ( cex ) ) ; System . err . println ( <str> ) ; cex . getCause ( ) . printStackTrace ( ) ; } @Test ( timeout = <int> ) public void testCompositeExceptionFromChildThenParent ( ) { CompositeException cex = new CompositeException ( Arrays . asList ( ex2 , ex1 ) ) ; System . err . println ( <str> ) ; cex . printStackTrace ( ) ; assertEquals ( <int> , cex . getExceptions ( ) . size ( ) ) ; assertNoCircularReferences ( cex ) ; assertNotNull ( getRootCause ( cex ) ) ; System . err . println ( <str> ) ; cex . getCause ( ) . printStackTrace ( ) ; } @Test ( timeout = <int> ) public void testCompositeExceptionFromChildAndComposite ( ) { CompositeException cex = new CompositeException ( Arrays . asList ( ex1 , getNewCompositeExceptionWithEx123 ( ) ) ) ; System . err . println ( <str> ) ; cex . printStackTrace ( ) ; assertEquals ( <int> , cex . getExceptions ( ) . size ( ) ) ; assertNoCircularReferences ( cex ) ; assertNotNull ( getRootCause ( cex ) ) ; System . err . println ( <str> ) ; cex . getCause ( ) . printStackTrace ( ) ; } @Test ( timeout = <int> ) public void testCompositeExceptionFromCompositeAndChild ( ) { CompositeException cex = new CompositeException ( Arrays . asList ( getNewCompositeExceptionWithEx123 ( ) , ex1 ) ) ; System . err . println ( <str> ) ; cex . printStackTrace ( ) ; assertEquals ( <int> , cex . getExceptions ( ) . size ( ) ) ; assertNoCircularReferences ( cex ) ; assertNotNull ( getRootCause ( cex ) ) ; System . err . println ( <str> ) ; cex . getCause ( ) . printStackTrace ( ) ; } @Test ( timeout = <int> ) public void testCompositeExceptionFromTwoDuplicateComposites ( ) { List < Throwable > exs = new ArrayList < Throwable > ( ) ; exs . add ( getNewCompositeExceptionWithEx123 ( ) ) ; exs . add ( getNewCompositeExceptionWithEx123 ( ) ) ; CompositeException cex = new CompositeException ( exs ) ; System . err . println ( <str> ) ; cex . printStackTrace ( ) ; assertEquals ( <int> , cex . getExceptions ( ) . size ( ) ) ; assertNoCircularReferences ( cex ) ; assertNotNull ( getRootCause ( cex ) ) ; System . err . println ( <str> ) ; cex . getCause ( ) . printStackTrace ( ) ; } private static void assertNoCircularReferences ( Throwable ex ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; PrintStream printStream = new PrintStream ( baos ) ; ex . printStackTrace ( printStream ) ; assertFalse ( baos . toString ( ) . contains ( <str> ) ) ; } private static Throwable getRootCause ( Throwable ex ) { Throwable root = ex . getCause ( ) ; if ( root = = null ) { return null ; } else { while ( true ) { if ( root . getCause ( ) = = null ) { return root ; } else { root = root . getCause ( ) ; } } } } @Test public void testNullCollection ( ) { CompositeException composite = new CompositeException ( null ) ; composite . getCause ( ) ; composite . printStackTrace ( ) ; } @Test public void testNullElement ( ) { CompositeException composite = new CompositeException ( Arrays . asList ( ( Throwable ) null ) ) ; composite . getCause ( ) ; composite . printStackTrace ( ) ; } }
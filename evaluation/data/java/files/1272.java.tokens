package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . NinePatch ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . math . Interpolation ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; public class NinePatchTest extends GdxTest { private static class TestPatch { public final String name ; public final NinePatch ninePatch ; TestPatch ( String n ) { this . name = n ; this . ninePatch = NinePatchTest . newNinePatch ( ) ; } TestPatch ( String n , NinePatch np ) { this . name = n ; this . ninePatch = np ; } } private OrthographicCamera camera ; private SpriteBatch b ; private Array < TestPatch > ninePatches = new Array < TestPatch > ( <int> ) ; private final long start = System . currentTimeMillis ( ) ; @Override public void create ( ) { TestPatch tp ; ninePatches . add ( new TestPatch ( <str> ) ) ; tp = new TestPatch ( <str> ) ; int bWidth = <int> ; tp . ninePatch . setLeftWidth ( bWidth ) ; tp . ninePatch . setRightWidth ( bWidth ) ; tp . ninePatch . setTopHeight ( bWidth ) ; tp . ninePatch . setBottomHeight ( bWidth ) ; ninePatches . add ( tp ) ; tp = new TestPatch ( <str> ) ; tp . ninePatch . setLeftWidth ( <int> * tp . ninePatch . getRightWidth ( ) ) ; ninePatches . add ( tp ) ; tp = new TestPatch ( <str> ) ; tp . ninePatch . setTopHeight ( <int> * tp . ninePatch . getBottomHeight ( ) ) ; ninePatches . add ( tp ) ; tp = new TestPatch ( <str> , newDegenerateNinePatch ( ) ) ; ninePatches . add ( tp ) ; tp = new TestPatch ( <str> , newULQuadPatch ( ) ) ; ninePatches . add ( tp ) ; tp = new TestPatch ( <str> , newMidlessPatch ( ) ) ; ninePatches . add ( tp ) ; b = new SpriteBatch ( ) ; } static TextureRegion newPatchPix ( int patchSize , int pixmapSize ) { final int pixmapDim = MathUtils . nextPowerOfTwo ( pixmapSize ) ; Pixmap p = new Pixmap ( pixmapDim , pixmapDim , Pixmap . Format . RGBA8888 ) ; p . setColor ( <int> , <int> , <int> , <int> ) ; p . fill ( ) ; for ( int x = <int> ; x < pixmapSize ; x + = patchSize ) { for ( int y = <int> ; y < pixmapSize ; y + = patchSize ) { p . setColor ( x / ( float ) pixmapSize , y / ( float ) pixmapSize , <float> , <float> ) ; p . fillRectangle ( x , y , patchSize , patchSize ) ; } } return new TextureRegion ( new Texture ( p ) , pixmapSize , pixmapSize ) ; } static NinePatch newDegenerateNinePatch ( ) { final int patchSize = <int> ; final int pixmapSize = patchSize * <int> ; TextureRegion tr = newPatchPix ( patchSize , pixmapSize ) ; return new NinePatch ( tr ) ; } static NinePatch newNinePatch ( ) { final int patchSize = <int> ; final int pixmapSize = patchSize * <int> ; TextureRegion tr = newPatchPix ( patchSize , pixmapSize ) ; return new NinePatch ( tr , patchSize , patchSize , patchSize , patchSize ) ; } static NinePatch newULQuadPatch ( ) { final int patchSize = <int> ; final int pixmapSize = patchSize * <int> ; TextureRegion tr = newPatchPix ( patchSize , pixmapSize ) ; return new NinePatch ( tr , patchSize , <int> , patchSize , <int> ) ; } static NinePatch newMidlessPatch ( ) { final int patchSize = <int> ; final int fullPatchHeight = patchSize * <int> ; final int fullPatchWidth = patchSize * <int> ; final int pixmapDim = MathUtils . nextPowerOfTwo ( Math . max ( fullPatchWidth , fullPatchHeight ) ) ; Pixmap testPatch = new Pixmap ( pixmapDim , pixmapDim , Pixmap . Format . RGBA8888 ) ; testPatch . setColor ( <int> , <int> , <int> , <int> ) ; testPatch . fill ( ) ; for ( int x = <int> ; x < fullPatchWidth ; x + = patchSize ) { for ( int y = <int> ; y < fullPatchHeight ; y + = patchSize ) { testPatch . setColor ( x / ( float ) fullPatchWidth , y / ( float ) fullPatchHeight , <float> , <float> ) ; testPatch . fillRectangle ( x , y , patchSize , patchSize ) ; } } return new NinePatch ( new TextureRegion ( new Texture ( testPatch ) , fullPatchWidth , fullPatchHeight ) , patchSize , patchSize , patchSize , patchSize ) ; } private float timePassed = <int> ; private final Color filterColor = new Color ( ) ; private final Color oldColor = new Color ( ) ; @Override public void render ( ) { final int screenWidth = Gdx . graphics . getWidth ( ) ; final int screenHeight = Gdx . graphics . getHeight ( ) ; Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; timePassed + = Gdx . graphics . getDeltaTime ( ) ; b . begin ( ) ; final int sz = ninePatches . size ; final int XGAP = <int> ; final int pheight = ( int ) ( ( screenHeight * <float> ) / ( ( sz + <int> ) / <int> ) ) ; int x = XGAP ; int y = <int> ; if ( timePassed < <int> ) { b . setColor ( <int> , <int> , <int> , Interpolation . sine . apply ( timePassed / <int> f ) ) ; } for ( int i = <int> ; i < sz ; i + = <int> ) { int pwidth = ( int ) ( <float> * screenWidth ) ; final NinePatch np1 = ninePatches . get ( i ) . ninePatch ; np1 . draw ( b , x , y , pwidth , pheight ) ; if ( i + <int> < sz ) { final NinePatch np2 = ninePatches . get ( i + <int> ) . ninePatch ; final int x2 = x + pwidth + XGAP ; final int pwidth2 = screenWidth - XGAP - x2 ; np2 . draw ( b , x2 , y , pwidth2 , pheight ) ; } y + = pheight + <int> ; } NinePatch np = ninePatches . get ( <int> ) . ninePatch ; oldColor . set ( np . getColor ( ) ) ; filterColor . set ( <float> , <float> , <float> , <float> ) ; np . setColor ( filterColor ) ; np . draw ( b , x , y , <int> , <int> ) ; np . setColor ( oldColor ) ; b . end ( ) ; } @Override public void resize ( int width , int height ) { float ratio = ( ( float ) Gdx . graphics . getWidth ( ) / ( float ) Gdx . graphics . getHeight ( ) ) ; int h = <int> ; int w = ( int ) ( h * ratio ) ; camera = new OrthographicCamera ( w , h ) ; } } 

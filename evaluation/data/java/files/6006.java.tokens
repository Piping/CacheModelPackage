package rx . internal . operators ; import java . util . concurrent . TimeUnit ; import rx . Observable . OnSubscribe ; import rx . Scheduler ; import rx . Scheduler . Worker ; import rx . exceptions . Exceptions ; import rx . Subscriber ; import rx . functions . Action0 ; public final class OnSubscribeTimerPeriodically implements OnSubscribe < Long > { final long initialDelay ; final long period ; final TimeUnit unit ; final Scheduler scheduler ; public OnSubscribeTimerPeriodically ( long initialDelay , long period , TimeUnit unit , Scheduler scheduler ) { this . initialDelay = initialDelay ; this . period = period ; this . unit = unit ; this . scheduler = scheduler ; } @Override public void call ( final Subscriber < ? super Long > child ) { final Worker worker = scheduler . createWorker ( ) ; child . add ( worker ) ; worker . schedulePeriodically ( new Action0 ( ) { long counter ; @Override public void call ( ) { try { child . onNext ( counter + + ) ; } catch ( Throwable e ) { try { worker . unsubscribe ( ) ; } finally { Exceptions . throwOrReport ( e , child ) ; } } } } , initialDelay , period , unit ) ; } }
package org . apache . cassandra . service ; import java . util . Arrays ; import java . util . function . Consumer ; import java . util . function . Supplier ; import java . util . stream . Collectors ; import java . util . stream . IntStream ; import com . google . common . collect . Sets ; import org . junit . After ; import org . junit . Test ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . transport . Server ; import org . apache . cassandra . utils . Pair ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; public class NativeTransportServiceTest { @After public void resetConfig ( ) { DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = false ; DatabaseDescriptor . setNativeTransportPortSSL ( null ) ; } @Test public void testServiceCanBeStopped ( ) { withService ( ( NativeTransportService service ) - > { service . stop ( ) ; assertFalse ( service . isRunning ( ) ) ; } ) ; } @Test public void testIgnoresStartOnAlreadyStarted ( ) { withService ( ( NativeTransportService service ) - > { service . start ( ) ; service . start ( ) ; service . start ( ) ; } ) ; } @Test public void testIgnoresStoppedOnAlreadyStopped ( ) { withService ( ( NativeTransportService service ) - > { service . stop ( ) ; service . stop ( ) ; service . stop ( ) ; } ) ; } @Test public void testDestroy ( ) { withService ( ( NativeTransportService service ) - > { Supplier < Boolean > allTerminated = ( ) - > service . getWorkerGroup ( ) . isShutdown ( ) & & service . getWorkerGroup ( ) . isTerminated ( ) & & service . getEventExecutor ( ) . isShutdown ( ) & & service . getEventExecutor ( ) . isTerminated ( ) ; assertFalse ( allTerminated . get ( ) ) ; service . destroy ( ) ; assertTrue ( allTerminated . get ( ) ) ; } ) ; } @Test public void testConcurrentStarts ( ) { withService ( NativeTransportService : : start , false , <int> ) ; } @Test public void testConcurrentStops ( ) { withService ( NativeTransportService : : stop , true , <int> ) ; } @Test public void testConcurrentDestroys ( ) { withService ( NativeTransportService : : destroy , true , <int> ) ; } @Test public void testPlainDefaultPort ( ) { withService ( ( NativeTransportService service ) - > { assertEquals ( <int> , service . getServers ( ) . size ( ) ) ; Server server = service . getServers ( ) . iterator ( ) . next ( ) ; assertFalse ( server . useSSL ) ; assertEquals ( server . socket . getPort ( ) , DatabaseDescriptor . getNativeTransportPort ( ) ) ; } ) ; } @Test public void testSSLOnly ( ) { DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; DatabaseDescriptor . getClientEncryptionOptions ( ) . optional = false ; withService ( ( NativeTransportService service ) - > { service . initialize ( ) ; assertEquals ( <int> , service . getServers ( ) . size ( ) ) ; Server server = service . getServers ( ) . iterator ( ) . next ( ) ; assertTrue ( server . useSSL ) ; assertEquals ( server . socket . getPort ( ) , DatabaseDescriptor . getNativeTransportPort ( ) ) ; } , false , <int> ) ; } @Test public void testSSLOptional ( ) { DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; DatabaseDescriptor . getClientEncryptionOptions ( ) . optional = true ; withService ( ( NativeTransportService service ) - > { service . initialize ( ) ; assertEquals ( <int> , service . getServers ( ) . size ( ) ) ; Server server = service . getServers ( ) . iterator ( ) . next ( ) ; assertTrue ( server . useSSL ) ; assertEquals ( server . socket . getPort ( ) , DatabaseDescriptor . getNativeTransportPort ( ) ) ; } , false , <int> ) ; } @Test public void testSSLWithNonSSL ( ) { DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled = true ; DatabaseDescriptor . setNativeTransportPortSSL ( <int> ) ; withService ( ( NativeTransportService service ) - > { service . initialize ( ) ; assertEquals ( <int> , service . getServers ( ) . size ( ) ) ; assertEquals ( Sets . newHashSet ( Arrays . asList ( Pair . create ( true , DatabaseDescriptor . getNativeTransportPortSSL ( ) ) , Pair . create ( false , DatabaseDescriptor . getNativeTransportPort ( ) ) ) ) , service . getServers ( ) . stream ( ) . map ( ( Server s ) - > Pair . create ( s . useSSL , s . socket . getPort ( ) ) ) . collect ( Collectors . toSet ( ) ) ) ; } , false , <int> ) ; } private static void withService ( Consumer < NativeTransportService > f ) { withService ( f , true , <int> ) ; } private static void withService ( Consumer < NativeTransportService > f , boolean start , int concurrently ) { NativeTransportService service = new NativeTransportService ( ) ; assertFalse ( service . isRunning ( ) ) ; if ( start ) { service . start ( ) ; assertTrue ( service . isRunning ( ) ) ; } try { if ( concurrently = = <int> ) { f . accept ( service ) ; } else { IntStream . range ( <int> , concurrently ) . parallel ( ) . map ( ( int i ) - > { f . accept ( service ) ; return <int> ; } ) . sum ( ) ; } } finally { service . stop ( ) ; } } } 

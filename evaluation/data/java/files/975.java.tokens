package org . eclipse . debug . ui . memory ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockExtension ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . views . memory . PropertyChangeNotifier ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . jface . action . IMenuListener ; import org . eclipse . jface . action . IMenuManager ; import org . eclipse . jface . action . MenuManager ; import org . eclipse . jface . action . Separator ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . jface . viewers . ILabelDecorator ; import org . eclipse . jface . viewers . ISelectionProvider ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . ui . IWorkbenchActionConstants ; public abstract class AbstractMemoryRendering extends PlatformObject implements IMemoryRendering { private IMemoryBlock fMemoryBlock ; private IMemoryRenderingContainer fContainer ; private ListenerList fPropertyListeners ; private boolean fVisible = true ; private MenuManager fPopupMenuMgr ; private String fRenderingId ; private class ConnectionJob extends Job { Runnable fRunnable ; ConnectionJob ( Runnable runnable ) { super ( <str> ) ; fRunnable = runnable ; setSystem ( true ) ; } @Override protected IStatus run ( IProgressMonitor monitor ) { fRunnable . run ( ) ; return Status . OK_STATUS ; } } private ILabelDecorator fLabelDecorator ; private IMenuListener fMenuListener ; public AbstractMemoryRendering ( String renderingId ) { fRenderingId = renderingId ; } @Override public void init ( IMemoryRenderingContainer container , IMemoryBlock block ) { fContainer = container ; fMemoryBlock = block ; fLabelDecorator = fMemoryBlock . getAdapter ( ILabelDecorator . class ) ; } @Override public void dispose ( ) { if ( fMemoryBlock instanceof IMemoryBlockExtension ) { Runnable runnable = new Runnable ( ) { @Override public void run ( ) { ( ( IMemoryBlockExtension ) fMemoryBlock ) . disconnect ( AbstractMemoryRendering . this ) ; } } ; new ConnectionJob ( runnable ) . schedule ( ) ; } if ( fPopupMenuMgr ! = null ) { fPopupMenuMgr . removeMenuListener ( fMenuListener ) ; fPopupMenuMgr . removeAll ( ) ; fPopupMenuMgr . dispose ( ) ; fPopupMenuMgr = null ; } if ( fPropertyListeners ! = null ) fPropertyListeners = null ; } @Override public void activated ( ) { if ( fContainer . getMemoryRenderingSite ( ) . getSynchronizationService ( ) ! = null ) fContainer . getMemoryRenderingSite ( ) . getSynchronizationService ( ) . setSynchronizationProvider ( this ) ; } @Override public void deactivated ( ) { } @Override public void becomesVisible ( ) { fVisible = true ; if ( fMemoryBlock instanceof IMemoryBlockExtension ) { Runnable runnable = new Runnable ( ) { @Override public void run ( ) { ( ( IMemoryBlockExtension ) fMemoryBlock ) . connect ( AbstractMemoryRendering . this ) ; } } ; new ConnectionJob ( runnable ) . schedule ( ) ; } } @Override public void becomesHidden ( ) { fVisible = false ; if ( fMemoryBlock instanceof IMemoryBlockExtension ) { Runnable runnable = new Runnable ( ) { @Override public void run ( ) { ( ( IMemoryBlockExtension ) fMemoryBlock ) . disconnect ( AbstractMemoryRendering . this ) ; } } ; new ConnectionJob ( runnable ) . schedule ( ) ; } } @Override public IMemoryBlock getMemoryBlock ( ) { return fMemoryBlock ; } @Override public String getRenderingId ( ) { return fRenderingId ; } @Override public void addPropertyChangeListener ( IPropertyChangeListener listener ) { if ( fPropertyListeners = = null ) fPropertyListeners = new ListenerList ( ) ; fPropertyListeners . add ( listener ) ; } @Override public void removePropertyChangeListener ( IPropertyChangeListener listener ) { if ( fPropertyListeners = = null ) return ; fPropertyListeners . remove ( listener ) ; } @Override public Image getImage ( ) { return decorateImage ( null ) ; } protected Image decorateImage ( Image image ) { if ( fLabelDecorator ! = null ) return fLabelDecorator . decorateImage ( image , this ) ; return image ; } @Override public String getLabel ( ) { if ( fMemoryBlock = = null ) return IInternalDebugCoreConstants . EMPTY_STRING ; StringBuffer label = new StringBuffer ( IInternalDebugCoreConstants . EMPTY_STRING ) ; if ( fMemoryBlock instanceof IMemoryBlockExtension ) { String expression = ( ( IMemoryBlockExtension ) fMemoryBlock ) . getExpression ( ) ; if ( expression = = null ) expression = IInternalDebugCoreConstants . EMPTY_STRING ; label . append ( expression ) ; if ( expression . startsWith ( <str> ) ) label . insert ( <int> , <str> ) ; try { if ( fVisible & & ( ( IMemoryBlockExtension ) fMemoryBlock ) . getBigBaseAddress ( ) ! = null ) { label . append ( <str> ) ; label . append ( ( ( IMemoryBlockExtension ) fMemoryBlock ) . getBigBaseAddress ( ) . toString ( <int> ) . toUpperCase ( ) ) ; } } catch ( DebugException e ) { } } else { long address = fMemoryBlock . getStartAddress ( ) ; label . append ( Long . toHexString ( address ) . toUpperCase ( ) ) ; } IMemoryRenderingType type = DebugUITools . getMemoryRenderingManager ( ) . getRenderingType ( getRenderingId ( ) ) ; if ( type ! = null ) { String preName = type . getLabel ( ) ; if ( preName ! = null ) { label . append ( <str> ) ; label . append ( preName ) ; label . append ( <str> ) ; } } return decorateLabel ( label . toString ( ) ) ; } protected String decorateLabel ( String label ) { if ( fLabelDecorator ! = null ) return fLabelDecorator . decorateText ( label . toString ( ) , this ) ; return label . toString ( ) ; } protected void createPopupMenu ( Control control ) { if ( fPopupMenuMgr = = null ) { fPopupMenuMgr = new MenuManager ( <str> ) ; fPopupMenuMgr . setRemoveAllWhenShown ( true ) ; IMemoryRenderingSite site = fContainer . getMemoryRenderingSite ( ) ; String menuId = fContainer . getId ( ) ; ISelectionProvider selProvider = site . getSite ( ) . getSelectionProvider ( ) ; fMenuListener = new IMenuListener ( ) { @Override public void menuAboutToShow ( IMenuManager manager ) { manager . add ( new Separator ( IWorkbenchActionConstants . MB_ADDITIONS ) ) ; } } ; fPopupMenuMgr . addMenuListener ( fMenuListener ) ; site . getSite ( ) . registerContextMenu ( menuId , fPopupMenuMgr , selProvider ) ; } Menu popupMenu = fPopupMenuMgr . createContextMenu ( control ) ; control . setMenu ( popupMenu ) ; } protected MenuManager getPopupMenuManager ( ) { return fPopupMenuMgr ; } protected void firePropertyChangedEvent ( PropertyChangeEvent event ) { if ( fPropertyListeners = = null ) return ; Object [ ] listeners = fPropertyListeners . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { PropertyChangeNotifier notifier = new PropertyChangeNotifier ( ( IPropertyChangeListener ) listeners [ i ] , event ) ; SafeRunner . run ( notifier ) ; } } public IMemoryRenderingContainer getMemoryRenderingContainer ( ) { return fContainer ; } public boolean isVisible ( ) { return fVisible ; } } 

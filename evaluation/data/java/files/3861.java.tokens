package org . nd4j . linalg . util ; import org . apache . commons . io . FileUtils ; import java . io . * ; public class SerializationUtils { @SuppressWarnings ( <str> ) public static < T > T readObject ( File file ) { try { ObjectInputStream ois = new ObjectInputStream ( FileUtils . openInputStream ( file ) ) ; T ret = ( T ) ois . readObject ( ) ; ois . close ( ) ; return ret ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } @SuppressWarnings ( <str> ) public static < T > T readObject ( InputStream is ) { try { ObjectInputStream ois = new ObjectInputStream ( is ) ; T ret = ( T ) ois . readObject ( ) ; ois . close ( ) ; return ret ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } public static byte [ ] toByteArray ( Serializable toSave ) { try { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; ObjectOutputStream os = new ObjectOutputStream ( bos ) ; os . writeObject ( toSave ) ; byte [ ] ret = bos . toByteArray ( ) ; os . close ( ) ; return ret ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } public static void writeObject ( Serializable toSave , OutputStream writeTo ) { try { ObjectOutputStream os = new ObjectOutputStream ( writeTo ) ; os . writeObject ( toSave ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } public static void saveObject ( Object toSave , File saveTo ) { try { OutputStream os1 = FileUtils . openOutputStream ( saveTo ) ; ObjectOutputStream os = new ObjectOutputStream ( os1 ) ; os . writeObject ( toSave ) ; os . flush ( ) ; os . close ( ) ; os1 . close ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } }
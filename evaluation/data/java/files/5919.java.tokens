package rx . subjects ; import org . junit . Test ; import rx . Observer ; import rx . schedulers . TestScheduler ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; import static org . mockito . Mockito . * ; public class TestSubjectTest { @Test public void testObserverPropagateValueAfterTriggeringActions ( ) { final TestScheduler scheduler = new TestScheduler ( ) ; final TestSubject < Integer > subject = TestSubject . create ( scheduler ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; subject . subscribe ( observer ) ; subject . onNext ( <int> ) ; scheduler . triggerActions ( ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; } @Test public void testObserverPropagateValueInFutureTimeAfterTriggeringActions ( ) { final TestScheduler scheduler = new TestScheduler ( ) ; scheduler . advanceTimeTo ( <int> , TimeUnit . SECONDS ) ; final TestSubject < Integer > subject = TestSubject . create ( scheduler ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; subject . subscribe ( observer ) ; subject . onNext ( <int> ) ; scheduler . triggerActions ( ) ; verify ( observer , times ( <int> ) ) . onNext ( <int> ) ; } @Test public void testObserverPropagateErrorAfterTriggeringActions ( ) { final IOException e = new IOException ( ) ; final TestScheduler scheduler = new TestScheduler ( ) ; final TestSubject < Integer > subject = TestSubject . create ( scheduler ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; subject . subscribe ( observer ) ; subject . onError ( e ) ; scheduler . triggerActions ( ) ; verify ( observer , times ( <int> ) ) . onError ( e ) ; } @Test public void testObserverPropagateErrorInFutureTimeAfterTriggeringActions ( ) { final IOException e = new IOException ( ) ; final TestScheduler scheduler = new TestScheduler ( ) ; scheduler . advanceTimeTo ( <int> , TimeUnit . SECONDS ) ; final TestSubject < Integer > subject = TestSubject . create ( scheduler ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; subject . subscribe ( observer ) ; subject . onError ( e ) ; scheduler . triggerActions ( ) ; verify ( observer , times ( <int> ) ) . onError ( e ) ; } @Test public void testObserverPropagateCompletedAfterTriggeringActions ( ) { final TestScheduler scheduler = new TestScheduler ( ) ; final TestSubject < Integer > subject = TestSubject . create ( scheduler ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; subject . subscribe ( observer ) ; subject . onCompleted ( ) ; scheduler . triggerActions ( ) ; verify ( observer , times ( <int> ) ) . onCompleted ( ) ; } @Test public void testObserverPropagateCompletedInFutureTimeAfterTriggeringActions ( ) { final TestScheduler scheduler = new TestScheduler ( ) ; scheduler . advanceTimeTo ( <int> , TimeUnit . SECONDS ) ; final TestSubject < Integer > subject = TestSubject . create ( scheduler ) ; @SuppressWarnings ( <str> ) Observer < Integer > observer = mock ( Observer . class ) ; subject . subscribe ( observer ) ; subject . onCompleted ( ) ; scheduler . triggerActions ( ) ; verify ( observer , times ( <int> ) ) . onCompleted ( ) ; } }
package org . elasticsearch . common . settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . rest . FakeRestRequest ; import java . io . IOException ; import static org . hamcrest . CoreMatchers . equalTo ; public class SettingsFilterTests extends ESTestCase { public void testAddingAndRemovingFilters ( ) { SettingsFilter settingsFilter = new SettingsFilter ( Settings . EMPTY ) ; settingsFilter . addFilter ( <str> ) ; settingsFilter . addFilter ( <str> ) ; settingsFilter . addFilter ( <str> ) ; assertThat ( settingsFilter . getPatterns ( ) , equalTo ( <str> ) ) ; settingsFilter . removeFilter ( <str> ) ; assertThat ( settingsFilter . getPatterns ( ) , equalTo ( <str> ) ) ; settingsFilter . removeFilter ( <str> ) ; settingsFilter . removeFilter ( <str> ) ; settingsFilter . removeFilter ( <str> ) ; assertThat ( settingsFilter . getPatterns ( ) , equalTo ( <str> ) ) ; } public void testSettingsFiltering ( ) throws IOException { testFiltering ( Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) , Settings . builder ( ) . put ( <str> , <str> ) . build ( ) , <str> ) ; testFiltering ( Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) , Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) , <str> ) ; testFiltering ( Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) , Settings . builder ( ) . build ( ) , <str> ) ; testFiltering ( Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) , Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ) ; } private void testFiltering ( Settings source , Settings filtered , String . . . patterns ) throws IOException { SettingsFilter settingsFilter = new SettingsFilter ( Settings . EMPTY ) ; for ( String pattern : patterns ) { settingsFilter . addFilter ( pattern ) ; } Settings filteredSettings = SettingsFilter . filterSettings ( settingsFilter . getPatterns ( ) , source ) ; assertThat ( filteredSettings . getAsMap ( ) . entrySet ( ) , equalTo ( filtered . getAsMap ( ) . entrySet ( ) ) ) ; RestRequest request = new FakeRestRequest ( ) ; settingsFilter . addFilterSettingParams ( request ) ; XContentBuilder xContentBuilder = XContentBuilder . builder ( JsonXContent . jsonXContent ) ; xContentBuilder . startObject ( ) ; source . toXContent ( xContentBuilder , request ) ; xContentBuilder . endObject ( ) ; String filteredSettingsString = xContentBuilder . string ( ) ; filteredSettings = Settings . builder ( ) . loadFromSource ( filteredSettingsString ) . build ( ) ; assertThat ( filteredSettings . getAsMap ( ) . entrySet ( ) , equalTo ( filtered . getAsMap ( ) . entrySet ( ) ) ) ; } } 

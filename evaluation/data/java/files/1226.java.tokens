package org . elasticsearch . rest . action . admin . indices . warmer . get ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . action . admin . indices . warmer . get . GetWarmersRequest ; import org . elasticsearch . action . admin . indices . warmer . get . GetWarmersResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import org . elasticsearch . search . warmer . IndexWarmersMetaData ; import java . util . List ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestGetWarmerAction extends BaseRestHandler { @Inject public RestGetWarmerAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final String [ ] indices = Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ; final String [ ] types = Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ; final String [ ] names = request . paramAsStringArray ( <str> , Strings . EMPTY_ARRAY ) ; GetWarmersRequest getWarmersRequest = new GetWarmersRequest ( ) ; getWarmersRequest . indices ( indices ) . types ( types ) . warmers ( names ) ; getWarmersRequest . local ( request . paramAsBoolean ( <str> , getWarmersRequest . local ( ) ) ) ; getWarmersRequest . indicesOptions ( IndicesOptions . fromRequest ( request , getWarmersRequest . indicesOptions ( ) ) ) ; client . admin ( ) . indices ( ) . getWarmers ( getWarmersRequest , new RestBuilderListener < GetWarmersResponse > ( channel ) { @Override public RestResponse buildResponse ( GetWarmersResponse response , XContentBuilder builder ) throws Exception { if ( indices . length > <int> & & response . warmers ( ) . isEmpty ( ) ) { return new BytesRestResponse ( OK , builder . startObject ( ) . endObject ( ) ) ; } builder . startObject ( ) ; for ( ObjectObjectCursor < String , List < IndexWarmersMetaData . Entry > > entry : response . warmers ( ) ) { builder . startObject ( entry . key , XContentBuilder . FieldCaseConversion . NONE ) ; builder . startObject ( IndexWarmersMetaData . TYPE , XContentBuilder . FieldCaseConversion . NONE ) ; for ( IndexWarmersMetaData . Entry warmerEntry : entry . value ) { IndexWarmersMetaData . toXContent ( warmerEntry , builder , request ) ; } builder . endObject ( ) ; builder . endObject ( ) ; } builder . endObject ( ) ; return new BytesRestResponse ( OK , builder ) ; } } ) ; } } 

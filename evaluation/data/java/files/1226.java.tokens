package com . google . common . eventbus ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Iterators ; import junit . framework . TestCase ; import java . util . Iterator ; public class SubscriberRegistryTest extends TestCase { private final SubscriberRegistry registry = new SubscriberRegistry ( new EventBus ( ) ) ; public void testRegister ( ) { assertEquals ( <int> , registry . getSubscribersForTesting ( String . class ) . size ( ) ) ; registry . register ( new StringSubscriber ( ) ) ; assertEquals ( <int> , registry . getSubscribersForTesting ( String . class ) . size ( ) ) ; registry . register ( new StringSubscriber ( ) ) ; assertEquals ( <int> , registry . getSubscribersForTesting ( String . class ) . size ( ) ) ; registry . register ( new ObjectSubscriber ( ) ) ; assertEquals ( <int> , registry . getSubscribersForTesting ( String . class ) . size ( ) ) ; assertEquals ( <int> , registry . getSubscribersForTesting ( Object . class ) . size ( ) ) ; } public void testUnregister ( ) { StringSubscriber s1 = new StringSubscriber ( ) ; StringSubscriber s2 = new StringSubscriber ( ) ; registry . register ( s1 ) ; registry . register ( s2 ) ; registry . unregister ( s1 ) ; assertEquals ( <int> , registry . getSubscribersForTesting ( String . class ) . size ( ) ) ; registry . unregister ( s2 ) ; assertTrue ( registry . getSubscribersForTesting ( String . class ) . isEmpty ( ) ) ; } public void testUnregister_notRegistered ( ) { try { registry . unregister ( new StringSubscriber ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } StringSubscriber s1 = new StringSubscriber ( ) ; registry . register ( s1 ) ; try { registry . unregister ( new StringSubscriber ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } registry . unregister ( s1 ) ; try { registry . unregister ( s1 ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testGetSubscribers ( ) { assertEquals ( <int> , Iterators . size ( registry . getSubscribers ( <str> ) ) ) ; registry . register ( new StringSubscriber ( ) ) ; assertEquals ( <int> , Iterators . size ( registry . getSubscribers ( <str> ) ) ) ; registry . register ( new StringSubscriber ( ) ) ; assertEquals ( <int> , Iterators . size ( registry . getSubscribers ( <str> ) ) ) ; registry . register ( new ObjectSubscriber ( ) ) ; assertEquals ( <int> , Iterators . size ( registry . getSubscribers ( <str> ) ) ) ; assertEquals ( <int> , Iterators . size ( registry . getSubscribers ( new Object ( ) ) ) ) ; assertEquals ( <int> , Iterators . size ( registry . getSubscribers ( <int> ) ) ) ; registry . register ( new IntegerSubscriber ( ) ) ; assertEquals ( <int> , Iterators . size ( registry . getSubscribers ( <str> ) ) ) ; assertEquals ( <int> , Iterators . size ( registry . getSubscribers ( new Object ( ) ) ) ) ; assertEquals ( <int> , Iterators . size ( registry . getSubscribers ( <int> ) ) ) ; } public void testGetSubscribers_returnsImmutableSnapshot ( ) { StringSubscriber s1 = new StringSubscriber ( ) ; StringSubscriber s2 = new StringSubscriber ( ) ; ObjectSubscriber o1 = new ObjectSubscriber ( ) ; Iterator < Subscriber > empty = registry . getSubscribers ( <str> ) ; assertFalse ( empty . hasNext ( ) ) ; empty = registry . getSubscribers ( <str> ) ; registry . register ( s1 ) ; assertFalse ( empty . hasNext ( ) ) ; Iterator < Subscriber > one = registry . getSubscribers ( <str> ) ; assertEquals ( s1 , one . next ( ) . target ) ; assertFalse ( one . hasNext ( ) ) ; one = registry . getSubscribers ( <str> ) ; registry . register ( s2 ) ; registry . register ( o1 ) ; Iterator < Subscriber > three = registry . getSubscribers ( <str> ) ; assertEquals ( s1 , one . next ( ) . target ) ; assertFalse ( one . hasNext ( ) ) ; assertEquals ( s1 , three . next ( ) . target ) ; assertEquals ( s2 , three . next ( ) . target ) ; assertEquals ( o1 , three . next ( ) . target ) ; assertFalse ( three . hasNext ( ) ) ; three = registry . getSubscribers ( <str> ) ; registry . unregister ( s2 ) ; assertEquals ( s1 , three . next ( ) . target ) ; assertEquals ( s2 , three . next ( ) . target ) ; assertEquals ( o1 , three . next ( ) . target ) ; assertFalse ( three . hasNext ( ) ) ; Iterator < Subscriber > two = registry . getSubscribers ( <str> ) ; assertEquals ( s1 , two . next ( ) . target ) ; assertEquals ( o1 , two . next ( ) . target ) ; assertFalse ( two . hasNext ( ) ) ; } public static class StringSubscriber { @Subscribe public void handle ( String s ) { } } public static class IntegerSubscriber { @Subscribe public void handle ( Integer i ) { } } public static class ObjectSubscriber { @Subscribe public void handle ( Object o ) { } } public void testFlattenHierarchy ( ) { assertEquals ( ImmutableSet . of ( Object . class , HierarchyFixtureInterface . class , HierarchyFixtureSubinterface . class , HierarchyFixtureParent . class , HierarchyFixture . class ) , SubscriberRegistry . flattenHierarchy ( HierarchyFixture . class ) ) ; } private interface HierarchyFixtureInterface { } private interface HierarchyFixtureSubinterface extends HierarchyFixtureInterface { } private static class HierarchyFixtureParent implements HierarchyFixtureSubinterface { } private static class HierarchyFixture extends HierarchyFixtureParent { } }
package org . elasticsearch . cluster . routing ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . not ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class AllocationIdTests extends ESTestCase { public void testShardToStarted ( ) { logger . info ( <str> ) ; ShardRouting shard = ShardRouting . newUnassigned ( <str> , <int> , null , true , new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , null ) ) ; assertThat ( shard . allocationId ( ) , nullValue ( ) ) ; logger . info ( <str> ) ; shard . initialize ( <str> , - <int> ) ; AllocationId allocationId = shard . allocationId ( ) ; assertThat ( allocationId , notNullValue ( ) ) ; assertThat ( allocationId . getId ( ) , notNullValue ( ) ) ; assertThat ( allocationId . getRelocationId ( ) , nullValue ( ) ) ; logger . info ( <str> ) ; shard . moveToStarted ( ) ; assertThat ( shard . allocationId ( ) . getId ( ) , equalTo ( allocationId . getId ( ) ) ) ; allocationId = shard . allocationId ( ) ; assertThat ( allocationId . getId ( ) , notNullValue ( ) ) ; assertThat ( allocationId . getRelocationId ( ) , nullValue ( ) ) ; } public void testSuccessfulRelocation ( ) { logger . info ( <str> ) ; ShardRouting shard = ShardRouting . newUnassigned ( <str> , <int> , null , true , new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , null ) ) ; shard . initialize ( <str> , - <int> ) ; shard . moveToStarted ( ) ; AllocationId allocationId = shard . allocationId ( ) ; logger . info ( <str> ) ; shard . relocate ( <str> , - <int> ) ; assertThat ( shard . allocationId ( ) , not ( equalTo ( allocationId ) ) ) ; assertThat ( shard . allocationId ( ) . getId ( ) , equalTo ( allocationId . getId ( ) ) ) ; assertThat ( shard . allocationId ( ) . getRelocationId ( ) , notNullValue ( ) ) ; ShardRouting target = shard . buildTargetRelocatingShard ( ) ; assertThat ( target . allocationId ( ) . getId ( ) , equalTo ( shard . allocationId ( ) . getRelocationId ( ) ) ) ; assertThat ( target . allocationId ( ) . getRelocationId ( ) , equalTo ( shard . allocationId ( ) . getId ( ) ) ) ; logger . info ( <str> ) ; target . moveToStarted ( ) ; assertThat ( target . allocationId ( ) . getId ( ) , equalTo ( shard . allocationId ( ) . getRelocationId ( ) ) ) ; assertThat ( target . allocationId ( ) . getRelocationId ( ) , nullValue ( ) ) ; } public void testCancelRelocation ( ) { logger . info ( <str> ) ; ShardRouting shard = ShardRouting . newUnassigned ( <str> , <int> , null , true , new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , null ) ) ; shard . initialize ( <str> , - <int> ) ; shard . moveToStarted ( ) ; AllocationId allocationId = shard . allocationId ( ) ; logger . info ( <str> ) ; shard . relocate ( <str> , - <int> ) ; assertThat ( shard . allocationId ( ) , not ( equalTo ( allocationId ) ) ) ; assertThat ( shard . allocationId ( ) . getId ( ) , equalTo ( allocationId . getId ( ) ) ) ; assertThat ( shard . allocationId ( ) . getRelocationId ( ) , notNullValue ( ) ) ; allocationId = shard . allocationId ( ) ; logger . info ( <str> ) ; shard . cancelRelocation ( ) ; assertThat ( shard . allocationId ( ) . getId ( ) , equalTo ( allocationId . getId ( ) ) ) ; assertThat ( shard . allocationId ( ) . getRelocationId ( ) , nullValue ( ) ) ; } public void testMoveToUnassigned ( ) { logger . info ( <str> ) ; ShardRouting shard = ShardRouting . newUnassigned ( <str> , <int> , null , true , new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , null ) ) ; shard . initialize ( <str> , - <int> ) ; shard . moveToStarted ( ) ; logger . info ( <str> ) ; shard . moveToUnassigned ( new UnassignedInfo ( UnassignedInfo . Reason . NODE_LEFT , null ) ) ; assertThat ( shard . allocationId ( ) , nullValue ( ) ) ; } public void testReinitializing ( ) { logger . info ( <str> ) ; ShardRouting shard = ShardRouting . newUnassigned ( <str> , <int> , null , true , new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , null ) ) ; shard . initialize ( <str> , - <int> ) ; shard . moveToStarted ( ) ; AllocationId allocationId = shard . allocationId ( ) ; logger . info ( <str> ) ; shard . reinitializeShard ( ) ; assertThat ( shard . allocationId ( ) . getId ( ) , notNullValue ( ) ) ; assertThat ( shard . allocationId ( ) . getRelocationId ( ) , nullValue ( ) ) ; assertThat ( shard . allocationId ( ) . getId ( ) , not ( equalTo ( allocationId . getId ( ) ) ) ) ; } public void testSerialization ( ) throws IOException { AllocationId allocationId = AllocationId . newInitializing ( ) ; if ( randomBoolean ( ) ) { allocationId = AllocationId . newRelocation ( allocationId ) ; } BytesReference bytes = allocationId . toXContent ( XContentFactory . jsonBuilder ( ) , ToXContent . EMPTY_PARAMS ) . bytes ( ) ; AllocationId parsedAllocationId = AllocationId . fromXContent ( XContentFactory . xContent ( XContentType . JSON ) . createParser ( bytes ) ) ; assertEquals ( allocationId , parsedAllocationId ) ; } } 

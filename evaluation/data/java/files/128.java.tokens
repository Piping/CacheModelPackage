package org . eclipse . core . externaltools . internal . launchConfigurations ; import java . io . File ; import org . eclipse . core . externaltools . internal . ExternalToolsCore ; import org . eclipse . core . externaltools . internal . IExternalToolConstants ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . variables . IStringVariableManager ; import org . eclipse . core . variables . VariablesPlugin ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . RefreshUtil ; import org . eclipse . osgi . util . NLS ; public class ExternalToolsCoreUtil { protected static void abort ( String message , Throwable exception , int code ) throws CoreException { throw new CoreException ( new Status ( IStatus . ERROR , IExternalToolConstants . PLUGIN_ID , code , message , exception ) ) ; } public static IPath getLocation ( ILaunchConfiguration configuration ) throws CoreException { String location = configuration . getAttribute ( IExternalToolConstants . ATTR_LOCATION , ( String ) null ) ; if ( location = = null ) { abort ( NLS . bind ( ExternalToolsProgramMessages . ExternalToolsUtil_Location_not_specified_by__0__1 , new String [ ] { configuration . getName ( ) } ) , null , <int> ) ; } else { String expandedLocation = getStringVariableManager ( ) . performStringSubstitution ( location ) ; if ( expandedLocation = = null | | expandedLocation . length ( ) = = <int> ) { String msg = NLS . bind ( ExternalToolsProgramMessages . ExternalToolsUtil_invalidLocation__0_ , new Object [ ] { configuration . getName ( ) } ) ; abort ( msg , null , <int> ) ; } else { File file = new File ( expandedLocation ) ; if ( file . isFile ( ) ) { return new Path ( expandedLocation ) ; } String msg = NLS . bind ( ExternalToolsProgramMessages . ExternalToolsUtil_invalidLocation__0_ , new Object [ ] { configuration . getName ( ) } ) ; abort ( msg , null , <int> ) ; } } return null ; } public static boolean getCaptureOutput ( ILaunchConfiguration configuration ) throws CoreException { return configuration . getAttribute ( DebugPlugin . ATTR_CAPTURE_OUTPUT , true ) ; } public static IPath getWorkingDirectory ( ILaunchConfiguration configuration ) throws CoreException { String location = configuration . getAttribute ( IExternalToolConstants . ATTR_WORKING_DIRECTORY , ( String ) null ) ; if ( location ! = null ) { String expandedLocation = getStringVariableManager ( ) . performStringSubstitution ( location ) ; if ( expandedLocation . length ( ) > <int> ) { File path = new File ( expandedLocation ) ; if ( path . isDirectory ( ) ) { return new Path ( expandedLocation ) ; } String msg = NLS . bind ( ExternalToolsProgramMessages . ExternalToolsUtil_invalidDirectory__0_ , new Object [ ] { expandedLocation , configuration . getName ( ) } ) ; abort ( msg , null , <int> ) ; } } return null ; } public static String [ ] getArguments ( ILaunchConfiguration configuration ) throws CoreException { String args = configuration . getAttribute ( IExternalToolConstants . ATTR_TOOL_ARGUMENTS , ( String ) null ) ; if ( args ! = null ) { String expanded = getStringVariableManager ( ) . performStringSubstitution ( args ) ; return parseStringIntoList ( expanded ) ; } return null ; } private static IStringVariableManager getStringVariableManager ( ) { return VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) ; } public static boolean isBuilderEnabled ( ILaunchConfiguration configuration ) throws CoreException { return configuration . getAttribute ( IExternalToolConstants . ATTR_BUILDER_ENABLED , true ) ; } public static IResource [ ] getResourcesForBuildScope ( ILaunchConfiguration configuration ) throws CoreException { String scope = configuration . getAttribute ( IExternalToolConstants . ATTR_BUILDER_SCOPE , ( String ) null ) ; if ( scope = = null ) { return null ; } return RefreshUtil . toResources ( scope ) ; } public static String [ ] parseStringIntoList ( String arguments ) { if ( arguments = = null | | arguments . length ( ) = = <int> ) { return new String [ <int> ] ; } String [ ] res = DebugPlugin . parseArguments ( arguments ) ; return res ; } public static IProject [ ] getBuildProjects ( ILaunchConfiguration configuration , String buildScopeId ) { String scope = null ; String id = buildScopeId ; if ( id = = null ) { id = IExternalToolConstants . ATTR_BUILD_SCOPE ; } try { scope = configuration . getAttribute ( id , ( String ) null ) ; } catch ( CoreException e ) { return null ; } if ( scope = = null ) { return null ; } if ( scope . startsWith ( <str> ) ) { String pathString = scope . substring ( <int> , scope . length ( ) - <int> ) ; if ( pathString . length ( ) > <int> ) { String [ ] names = pathString . split ( <str> ) ; IProject [ ] projects = new IProject [ names . length ] ; IWorkspaceRoot root = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; for ( int i = <int> ; i < names . length ; i + + ) { projects [ i ] = root . getProject ( names [ i ] ) ; } return projects ; } } else if ( scope . equals ( <str> ) ) { IStringVariableManager manager = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) ; try { String pathString = manager . performStringSubstitution ( <str> ) ; IResource res = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . findMember ( new Path ( pathString ) ) ; if ( res ! = null & & res . getProject ( ) ! = null ) { return new IProject [ ] { res . getProject ( ) } ; } } catch ( CoreException e ) { } } return new IProject [ <int> ] ; } public static boolean isIncludeReferencedProjects ( ILaunchConfiguration configuration , String includeReferencedProjectsId ) throws CoreException { String id = includeReferencedProjectsId ; if ( id = = null ) { id = IExternalToolConstants . ATTR_INCLUDE_REFERENCED_PROJECTS ; } return configuration . getAttribute ( id , true ) ; } public static boolean isAsynchronousBuild ( ILaunchConfiguration configuration ) { boolean launchInBackground = false ; try { launchInBackground = configuration . getAttribute ( IExternalToolConstants . ATTR_LAUNCH_IN_BACKGROUND , false ) ; } catch ( CoreException ce ) { ExternalToolsCore . log ( ce ) ; } return launchInBackground ; } } 

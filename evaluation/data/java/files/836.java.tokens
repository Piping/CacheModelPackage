package org . eclipse . debug . internal . ui . actions ; import java . util . Iterator ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . widgets . Event ; import org . eclipse . ui . IActionDelegate2 ; import org . eclipse . ui . IViewActionDelegate ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . progress . IWorkbenchSiteProgressService ; public abstract class AbstractSelectionActionDelegate implements IViewActionDelegate , IActionDelegate2 { private IAction fAction ; private IViewPart fViewPart ; private IStructuredSelection fSelection = StructuredSelection . EMPTY ; private IWorkbenchSiteProgressService fProgressService = null ; public AbstractSelectionActionDelegate ( ) { } @Override public void dispose ( ) { fSelection = null ; } @Override public void selectionChanged ( IAction action , ISelection s ) { if ( s instanceof IStructuredSelection ) { IStructuredSelection ss = ( IStructuredSelection ) s ; action . setEnabled ( getEnableStateForSelection ( ss ) ) ; setSelection ( ss ) ; } else { action . setEnabled ( false ) ; setSelection ( StructuredSelection . EMPTY ) ; } } protected String getErrorDialogMessage ( ) { return null ; } protected String getStatusMessage ( ) { return IInternalDebugCoreConstants . EMPTY_STRING ; } @Override public void init ( IViewPart view ) { setView ( view ) ; fProgressService = view . getAdapter ( IWorkbenchSiteProgressService . class ) ; } protected IViewPart getView ( ) { return fViewPart ; } protected IStructuredSelection getSelection ( ) { return fSelection ; } private void setSelection ( IStructuredSelection context ) { fSelection = context ; } protected void setAction ( IAction action ) { fAction = action ; } protected IAction getAction ( ) { return fAction ; } protected void setView ( IViewPart viewPart ) { fViewPart = viewPart ; } protected boolean getEnableStateForSelection ( IStructuredSelection selection ) { if ( selection . size ( ) = = <int> ) { return false ; } Iterator < ? > itr = selection . iterator ( ) ; while ( itr . hasNext ( ) ) { Object element = itr . next ( ) ; if ( ! isEnabledFor ( element ) ) { return false ; } } return true ; } protected boolean isEnabledFor ( Object element ) { return true ; } @Override public void runWithEvent ( IAction action , Event event ) { run ( action ) ; } @Override public void init ( IAction action ) { setAction ( action ) ; } protected void schedule ( Job job ) { if ( fProgressService = = null ) { job . schedule ( ) ; } else { fProgressService . schedule ( job ) ; } } } 

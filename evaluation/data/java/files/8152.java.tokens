package org . eclipse . debug . ui . console ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . content . IContentDescription ; import org . eclipse . core . runtime . content . IContentType ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . IRegion ; import org . eclipse . ui . IEditorDescriptor ; import org . eclipse . ui . IEditorInput ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . IEditorRegistry ; import org . eclipse . ui . IWorkbench ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PartInitException ; import org . eclipse . ui . part . FileEditorInput ; import org . eclipse . ui . texteditor . IDocumentProvider ; import org . eclipse . ui . texteditor . ITextEditor ; @SuppressWarnings ( <str> ) public class FileLink implements IConsoleHyperlink { private IFile fFile ; private int fFileOffset ; private int fFileLength ; private int fFileLineNumber ; private String fEditorId ; public FileLink ( IFile file , String editorId , int fileOffset , int fileLength , int fileLineNumber ) { fFile = file ; fFileOffset = fileOffset ; fFileLength = fileLength ; fFileLineNumber = fileLineNumber ; fEditorId = editorId ; } @Override public void linkActivated ( ) { IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { IWorkbenchPage page = window . getActivePage ( ) ; if ( page ! = null ) { try { IEditorPart editorPart = page . openEditor ( new FileEditorInput ( fFile ) , getEditorId ( ) , true ) ; if ( fFileLineNumber > <int> ) { ITextEditor textEditor = null ; if ( editorPart instanceof ITextEditor ) { textEditor = ( ITextEditor ) editorPart ; } else { textEditor = editorPart . getAdapter ( ITextEditor . class ) ; } if ( textEditor ! = null ) { IEditorInput input = editorPart . getEditorInput ( ) ; if ( fFileOffset < <int> ) { IDocumentProvider provider = textEditor . getDocumentProvider ( ) ; try { provider . connect ( input ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; return ; } IDocument document = provider . getDocument ( input ) ; try { IRegion region = document . getLineInformation ( fFileLineNumber - <int> ) ; fFileOffset = region . getOffset ( ) ; fFileLength = region . getLength ( ) ; } catch ( BadLocationException e ) { DebugUIPlugin . log ( e ) ; } provider . disconnect ( input ) ; } if ( fFileOffset > = <int> & & fFileLength > = <int> ) { textEditor . selectAndReveal ( fFileOffset , fFileLength ) ; } } } } catch ( PartInitException e ) { DebugUIPlugin . log ( e ) ; } } } } @Override public void linkEntered ( ) { } @Override public void linkExited ( ) { } private String getEditorId ( ) { if ( fEditorId = = null ) { IWorkbench workbench = DebugUIPlugin . getDefault ( ) . getWorkbench ( ) ; IEditorDescriptor desc = workbench . getEditorRegistry ( ) . getDefaultEditor ( fFile . getName ( ) , getFileContentType ( ) ) ; if ( desc = = null ) { desc = workbench . getEditorRegistry ( ) . findEditor ( IEditorRegistry . SYSTEM_EXTERNAL_EDITOR_ID ) ; } fEditorId = desc . getId ( ) ; } return fEditorId ; } private IContentType getFileContentType ( ) { try { IContentDescription description = fFile . getContentDescription ( ) ; if ( description ! = null ) { return description . getContentType ( ) ; } } catch ( CoreException e ) { } return null ; } }
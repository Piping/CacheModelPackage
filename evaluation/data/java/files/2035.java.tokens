package org . junit . tests . experimental . theories ; import static org . junit . Assert . * ; import org . junit . Test ; import org . junit . experimental . theories . PotentialAssignment ; import org . junit . experimental . theories . PotentialAssignment . CouldNotGenerateValueException ; public class PotentialAssignmentTest { @Test public void shouldUseQuotedValueInDescription ( ) throws CouldNotGenerateValueException { String name = <str> ; Object value = new Object ( ) { @Override public String toString ( ) { return <str> ; } } ; PotentialAssignment assignment = PotentialAssignment . forValue ( name , value ) ; assertEquals ( <str> , assignment . getDescription ( ) ) ; } @Test public void shouldNotUseQuotesForNullValueDescriptions ( ) throws CouldNotGenerateValueException { String name = <str> ; Object value = null ; PotentialAssignment assignment = PotentialAssignment . forValue ( name , value ) ; assertEquals ( <str> , assignment . getDescription ( ) ) ; } @Test public void shouldIncludeFailureInDescriptionIfToStringFails ( ) throws CouldNotGenerateValueException { String name = <str> ; Object value = new Object ( ) { @Override public String toString ( ) { throw new RuntimeException ( <str> ) ; } } ; PotentialAssignment assignment = PotentialAssignment . forValue ( name , value ) ; assertEquals ( <str> , assignment . getDescription ( ) ) ; } @Test public void shouldReturnGivenValue ( ) throws CouldNotGenerateValueException { Object value = new Object ( ) ; PotentialAssignment assignment = PotentialAssignment . forValue ( <str> , value ) ; assertEquals ( value , assignment . getValue ( ) ) ; } }
package org . gradle . integtests . fixtures . versions ; import org . gradle . api . Transformer ; import org . gradle . api . specs . Spec ; import org . gradle . integtests . fixtures . executer . GradleDistribution ; import org . gradle . integtests . fixtures . executer . IntegrationTestBuildContext ; import org . gradle . internal . Factory ; import org . gradle . util . CollectionUtils ; import org . gradle . util . GradleVersion ; import java . util . List ; import java . util . Properties ; import static org . gradle . util . CollectionUtils . findFirst ; public class ReleasedVersionDistributions { private final IntegrationTestBuildContext buildContext = new IntegrationTestBuildContext ( ) ; private final Factory < Properties > versionsFactory ; private Properties properties ; private List < GradleDistribution > distributions ; public ReleasedVersionDistributions ( ) { this ( new ClasspathVersionSource ( ) ) ; } ReleasedVersionDistributions ( Factory < Properties > versionsFactory ) { this . versionsFactory = versionsFactory ; } private Properties getProperties ( ) { if ( properties = = null ) { properties = versionsFactory . create ( ) ; } return properties ; } public GradleDistribution getMostRecentFinalRelease ( ) { String mostRecentFinal = getProperties ( ) . getProperty ( <str> ) ; if ( mostRecentFinal = = null ) { throw new RuntimeException ( <str> ) ; } return buildContext . distribution ( mostRecentFinal ) ; } public GradleDistribution getMostRecentSnapshot ( ) { String mostRecentSnapshot = getProperties ( ) . getProperty ( <str> ) ; if ( mostRecentSnapshot = = null ) { throw new RuntimeException ( <str> ) ; } return buildContext . distribution ( mostRecentSnapshot ) ; } public List < GradleDistribution > getAll ( ) { if ( distributions = = null ) { distributions = CollectionUtils . collect ( getProperties ( ) . getProperty ( <str> ) . split ( <str> ) , new Transformer < GradleDistribution , String > ( ) { public GradleDistribution transform ( String version ) { return buildContext . distribution ( version ) ; } } ) ; } return distributions ; } public GradleDistribution getDistribution ( final GradleVersion gradleVersion ) { return findFirst ( getAll ( ) , new Spec < GradleDistribution > ( ) { public boolean isSatisfiedBy ( GradleDistribution element ) { return element . getVersion ( ) . equals ( gradleVersion ) ; } } ) ; } } 

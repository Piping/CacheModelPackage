package org . apache . cassandra . io . util ; import java . io . File ; import java . io . IOException ; import java . util . zip . CRC32 ; import org . apache . cassandra . io . compress . BufferType ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . Throwables ; public class ChecksummedRandomAccessReader extends RandomAccessReader { @SuppressWarnings ( <str> ) public static class CorruptFileException extends RuntimeException { public final String filePath ; public CorruptFileException ( Exception cause , String filePath ) { super ( cause ) ; this . filePath = filePath ; } } private final DataIntegrityMetadata . ChecksumValidator validator ; private ChecksummedRandomAccessReader ( Builder builder ) { super ( builder ) ; this . validator = builder . validator ; } @SuppressWarnings ( <str> ) @Override protected void reBufferStandard ( ) { long desiredPosition = current ( ) ; bufferOffset = ( desiredPosition / buffer . capacity ( ) ) * buffer . capacity ( ) ; buffer . clear ( ) ; long position = bufferOffset ; while ( buffer . hasRemaining ( ) ) { int n = channel . read ( buffer , position ) ; if ( n < <int> ) break ; position + = n ; } buffer . flip ( ) ; try { validator . validate ( ByteBufferUtil . getArray ( buffer ) , <int> , buffer . remaining ( ) ) ; } catch ( IOException e ) { throw new CorruptFileException ( e , channel . filePath ( ) ) ; } buffer . position ( ( int ) ( desiredPosition - bufferOffset ) ) ; } @Override protected void reBufferMmap ( ) { throw new AssertionError ( <str> ) ; } @Override public void seek ( long newPosition ) { validator . seek ( newPosition ) ; super . seek ( newPosition ) ; } @Override public void close ( ) { Throwables . perform ( channel . filePath ( ) , Throwables . FileOpType . READ , super : : close , validator : : close , channel : : close ) ; } public static final class Builder extends RandomAccessReader . Builder { private final DataIntegrityMetadata . ChecksumValidator validator ; @SuppressWarnings ( <str> ) public Builder ( File file , File crcFile ) throws IOException { super ( new ChannelProxy ( file ) ) ; this . validator = new DataIntegrityMetadata . ChecksumValidator ( new CRC32 ( ) , RandomAccessReader . open ( crcFile ) , file . getPath ( ) ) ; super . bufferSize ( validator . chunkSize ) . bufferType ( BufferType . ON_HEAP ) ; } @Override public RandomAccessReader build ( ) { return new ChecksummedRandomAccessReader ( this ) ; } } } 

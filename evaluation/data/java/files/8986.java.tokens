package org . eclipse . ui . externaltools . internal . ui ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . jface . viewers . DoubleClickEvent ; import org . eclipse . jface . viewers . IDoubleClickListener ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . ITreeContentProvider ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . TableViewer ; import org . eclipse . jface . viewers . TreeViewer ; import org . eclipse . jface . viewers . ViewerComparator ; import org . eclipse . swt . SWT ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Table ; import org . eclipse . swt . widgets . Tree ; import org . eclipse . ui . views . navigator . ResourceComparator ; public class TreeAndListGroup implements ISelectionChangedListener { private Object root ; private Object currentTreeSelection ; private List < ISelectionChangedListener > selectionChangedListeners = new ArrayList < ISelectionChangedListener > ( ) ; private List < IDoubleClickListener > doubleClickListeners = new ArrayList < IDoubleClickListener > ( ) ; private ITreeContentProvider treeContentProvider ; private IStructuredContentProvider listContentProvider ; private ILabelProvider treeLabelProvider ; private ILabelProvider listLabelProvider ; private TreeViewer treeViewer ; private TableViewer listViewer ; private boolean allowMultiselection = false ; public TreeAndListGroup ( Composite parent , Object rootObject , ITreeContentProvider treeContentProvider , ILabelProvider treeLabelProvider , IStructuredContentProvider listContentProvider , ILabelProvider listLabelProvider , int style , int width , int height , boolean allowMultiselection ) { root = rootObject ; this . treeContentProvider = treeContentProvider ; this . listContentProvider = listContentProvider ; this . treeLabelProvider = treeLabelProvider ; this . listLabelProvider = listLabelProvider ; this . allowMultiselection = allowMultiselection ; createContents ( parent , width , height , style ) ; } public void aboutToOpen ( ) { currentTreeSelection = null ; Object [ ] elements = treeContentProvider . getElements ( root ) ; Object primary = elements . length > <int> ? elements [ <int> ] : null ; if ( primary ! = null ) { treeViewer . setSelection ( new StructuredSelection ( primary ) ) ; } treeViewer . getControl ( ) . setFocus ( ) ; } public void addSelectionChangedListener ( ISelectionChangedListener listener ) { selectionChangedListeners . add ( listener ) ; } public void addDoubleClickListener ( IDoubleClickListener listener ) { doubleClickListeners . add ( listener ) ; } protected void notifySelectionListeners ( SelectionChangedEvent event ) { for ( ISelectionChangedListener listener : selectionChangedListeners ) { listener . selectionChanged ( event ) ; } } protected void notifyDoubleClickListeners ( DoubleClickEvent event ) { for ( IDoubleClickListener listener : doubleClickListeners ) { listener . doubleClick ( event ) ; } } protected void createContents ( Composite parent , int width , int height , int style ) { Composite composite = new Composite ( parent , style ) ; composite . setFont ( parent . getFont ( ) ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = <int> ; layout . makeColumnsEqualWidth = true ; layout . marginHeight = <int> ; layout . marginWidth = <int> ; composite . setLayout ( layout ) ; composite . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; createTreeViewer ( composite , width / <int> , height ) ; createListViewer ( composite , width / <int> , height ) ; initialize ( ) ; } protected void createListViewer ( Composite parent , int width , int height ) { int style ; if ( allowMultiselection ) { style = SWT . MULTI ; } else { style = SWT . SINGLE ; } listViewer = new TableViewer ( parent , SWT . BORDER | style ) ; GridData data = new GridData ( GridData . FILL_BOTH ) ; data . widthHint = width ; data . heightHint = height ; listViewer . getTable ( ) . setLayoutData ( data ) ; listViewer . getTable ( ) . setFont ( parent . getFont ( ) ) ; listViewer . setContentProvider ( listContentProvider ) ; listViewer . setLabelProvider ( listLabelProvider ) ; listViewer . setComparator ( new ResourceComparator ( ResourceComparator . NAME ) ) ; listViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { notifySelectionListeners ( event ) ; } } ) ; listViewer . addDoubleClickListener ( new IDoubleClickListener ( ) { @Override public void doubleClick ( DoubleClickEvent event ) { if ( ! event . getSelection ( ) . isEmpty ( ) ) { notifyDoubleClickListeners ( event ) ; } } } ) ; } protected void createTreeViewer ( Composite parent , int width , int height ) { Tree tree = new Tree ( parent , SWT . BORDER ) ; GridData data = new GridData ( GridData . FILL_BOTH ) ; data . widthHint = width ; data . heightHint = height ; tree . setLayoutData ( data ) ; tree . setFont ( parent . getFont ( ) ) ; treeViewer = new TreeViewer ( tree ) ; treeViewer . setContentProvider ( treeContentProvider ) ; treeViewer . setLabelProvider ( treeLabelProvider ) ; treeViewer . setComparator ( new ResourceComparator ( ResourceComparator . NAME ) ) ; treeViewer . addSelectionChangedListener ( this ) ; } public Table getListTable ( ) { return listViewer . getTable ( ) ; } public IStructuredSelection getListTableSelection ( ) { ISelection selection = this . listViewer . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { return ( IStructuredSelection ) selection ; } return StructuredSelection . EMPTY ; } protected void initialListItem ( Object element ) { Object parent = treeContentProvider . getParent ( element ) ; selectAndRevealFolder ( parent ) ; } public void selectAndRevealFolder ( Object treeElement ) { treeViewer . reveal ( treeElement ) ; IStructuredSelection selection = new StructuredSelection ( treeElement ) ; treeViewer . setSelection ( selection ) ; } public void selectAndRevealFile ( Object treeElement ) { listViewer . reveal ( treeElement ) ; IStructuredSelection selection = new StructuredSelection ( treeElement ) ; listViewer . setSelection ( selection ) ; } protected void initialize ( ) { treeViewer . setInput ( root ) ; } @Override public void selectionChanged ( SelectionChangedEvent event ) { IStructuredSelection selection = ( IStructuredSelection ) event . getSelection ( ) ; Object selectedElement = selection . getFirstElement ( ) ; if ( selectedElement = = null ) { currentTreeSelection = null ; listViewer . setInput ( currentTreeSelection ) ; return ; } if ( selectedElement ! = currentTreeSelection ) { listViewer . setInput ( selectedElement ) ; } currentTreeSelection = selectedElement ; } public void setListProviders ( IStructuredContentProvider contentProvider , ILabelProvider labelProvider ) { listViewer . setContentProvider ( contentProvider ) ; listViewer . setLabelProvider ( labelProvider ) ; } public void setListSorter ( ViewerComparator comparator ) { listViewer . setComparator ( comparator ) ; } public void setRoot ( Object newRoot ) { root = newRoot ; initialize ( ) ; } public void setTreeProviders ( ITreeContentProvider contentProvider , ILabelProvider labelProvider ) { treeViewer . setContentProvider ( contentProvider ) ; treeViewer . setLabelProvider ( labelProvider ) ; } public void setTreeComparator ( ViewerComparator comparator ) { treeViewer . setComparator ( comparator ) ; } public void setFocus ( ) { treeViewer . getTree ( ) . setFocus ( ) ; } }
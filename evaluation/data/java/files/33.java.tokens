package org . gradle . plugins . javascript . rhino . worker . internal ; import org . gradle . api . Action ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorker ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorkerSpec ; import org . gradle . process . internal . WorkerProcessContext ; import java . io . Serializable ; public class RhinoServer < R extends Serializable , P extends Serializable > implements Action < WorkerProcessContext > , Serializable { private final RhinoWorkerSpec < R , P > workerSpec ; public RhinoServer ( RhinoWorkerSpec < R , P > workerSpec ) { this . workerSpec = workerSpec ; } public void execute ( WorkerProcessContext context ) { RhinoWorkerClientProtocol clientHandle = context . getServerConnection ( ) . addOutgoing ( RhinoWorkerClientProtocol . class ) ; context . getServerConnection ( ) . connect ( ) ; RhinoWorker < R , P > action ; try { Class < ? > actionClass = getClass ( ) . getClassLoader ( ) . loadClass ( workerSpec . getWorkerType ( ) . getName ( ) ) ; Object actionObject = actionClass . newInstance ( ) ; if ( actionObject instanceof RhinoWorker ) { action = ( RhinoWorker < R , P > ) actionObject ; } else { throw new IllegalStateException ( String . format ( <str> , workerSpec . getWorkerType ( ) . getName ( ) ) ) ; } } catch ( Exception e ) { clientHandle . initialisationError ( e ) ; return ; } RhinoWorkerReceiver receiver = new RhinoWorkerReceiver < P > ( workerSpec . getPayloadType ( ) , clientHandle , action ) ; context . getServerConnection ( ) . addIncoming ( RhinoClientWorkerProtocol . class , receiver ) ; receiver . waitFor ( ) ; } } 

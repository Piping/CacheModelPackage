package org . eclipse . debug . internal . ui . views . memory ; import java . io . IOException ; import java . util . ArrayList ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . TransformerException ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . Platform ; import org . eclipse . core . runtime . preferences . DefaultScope ; import org . eclipse . core . runtime . preferences . IEclipsePreferences ; import org . eclipse . core . runtime . preferences . InstanceScope ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . IDebugEventSetListener ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . core . LaunchManager ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . memory . IMemoryRendering ; import org . eclipse . debug . ui . memory . IMemoryRenderingContainer ; import org . eclipse . debug . ui . memory . IMemoryRenderingSite ; import org . eclipse . debug . ui . memory . IMemoryRenderingType ; import org . eclipse . ui . IViewSite ; import org . eclipse . ui . IWorkbenchPartSite ; import org . osgi . service . prefs . BackingStoreException ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; public class ViewPaneRenderingMgr implements IDebugEventSetListener { private final ArrayList < IMemoryRendering > fRenderings = new ArrayList < IMemoryRendering > ( ) ; private final IMemoryRenderingContainer fViewPane ; private static final String RENDERINGS_TAG = <str> ; private static final String MEMORY_RENDERING_TAG = <str> ; private static final String MEMORY_BLOCK = <str> ; private static final String RENDERING_ID = <str> ; public ViewPaneRenderingMgr ( IMemoryRenderingContainer viewPane ) { fViewPane = viewPane ; loadPersistedRenderings ( getPrefId ( ) ) ; } public void removeMemoryBlockRendering ( IMemoryBlock mem , String renderingId ) { if ( fRenderings = = null ) { return ; } IMemoryRendering [ ] toRemove = getRenderings ( mem , renderingId ) ; for ( int i = <int> ; i < toRemove . length ; i + + ) { fRenderings . remove ( toRemove [ i ] ) ; if ( fRenderings . size ( ) = = <int> ) { DebugPlugin . getDefault ( ) . removeDebugEventListener ( this ) ; } } storeRenderings ( ) ; } public void addMemoryBlockRendering ( IMemoryRendering rendering ) { if ( fRenderings . contains ( rendering ) ) { return ; } fRenderings . add ( rendering ) ; if ( fRenderings . size ( ) = = <int> ) { DebugPlugin . getDefault ( ) . addDebugEventListener ( this ) ; } storeRenderings ( ) ; } public void removeMemoryBlockRendering ( IMemoryRendering rendering ) { if ( rendering = = null ) { return ; } if ( ! fRenderings . contains ( rendering ) ) { return ; } fRenderings . remove ( rendering ) ; if ( fRenderings . size ( ) = = <int> ) { DebugPlugin . getDefault ( ) . removeDebugEventListener ( this ) ; } storeRenderings ( ) ; } public IMemoryRendering [ ] getRenderings ( IMemoryBlock mem , String renderingId ) { if ( renderingId = = null ) { return getRenderingsFromMemoryBlock ( mem ) ; } ArrayList < IMemoryRendering > ret = new ArrayList < IMemoryRendering > ( ) ; for ( int i = <int> ; i < fRenderings . size ( ) ; i + + ) { if ( fRenderings . get ( i ) ! = null ) { IMemoryRendering rendering = fRenderings . get ( i ) ; if ( rendering . getMemoryBlock ( ) = = mem & & renderingId . equals ( rendering . getRenderingId ( ) ) ) { ret . add ( rendering ) ; } } } return ret . toArray ( new IMemoryRendering [ ret . size ( ) ] ) ; } public IMemoryRendering [ ] getRenderings ( ) { return fRenderings . toArray ( new IMemoryRendering [ fRenderings . size ( ) ] ) ; } public IMemoryRendering [ ] getRenderingsFromDebugTarget ( IDebugTarget target ) { ArrayList < IMemoryRendering > ret = new ArrayList < IMemoryRendering > ( ) ; for ( int i = <int> ; i < fRenderings . size ( ) ; i + + ) { if ( fRenderings . get ( i ) ! = null ) { IMemoryRendering rendering = fRenderings . get ( i ) ; if ( rendering . getMemoryBlock ( ) . getDebugTarget ( ) = = target ) { ret . add ( rendering ) ; } } } return ret . toArray ( new IMemoryRendering [ ret . size ( ) ] ) ; } public IMemoryRendering [ ] getRenderingsFromMemoryBlock ( IMemoryBlock block ) { ArrayList < IMemoryRendering > ret = new ArrayList < IMemoryRendering > ( ) ; for ( int i = <int> ; i < fRenderings . size ( ) ; i + + ) { if ( fRenderings . get ( i ) ! = null ) { IMemoryRendering rendering = fRenderings . get ( i ) ; if ( rendering . getMemoryBlock ( ) = = block ) { ret . add ( rendering ) ; } } } return ret . toArray ( new IMemoryRendering [ ret . size ( ) ] ) ; } @Override public void handleDebugEvents ( DebugEvent [ ] events ) { for ( int i = <int> ; i < events . length ; i + + ) { handleDebugEvent ( events [ i ] ) ; } } public void handleDebugEvent ( DebugEvent event ) { Object obj = event . getSource ( ) ; IDebugTarget dt = null ; if ( event . getKind ( ) = = DebugEvent . TERMINATE ) { if ( obj instanceof IDebugTarget ) { dt = ( ( IDebugTarget ) obj ) ; IMemoryRendering [ ] deletedrendering = getRenderingsFromDebugTarget ( dt ) ; for ( int i = <int> ; i < deletedrendering . length ; i + + ) { removeMemoryBlockRendering ( deletedrendering [ i ] . getMemoryBlock ( ) , deletedrendering [ i ] . getRenderingId ( ) ) ; fViewPane . removeMemoryRendering ( deletedrendering [ i ] ) ; } } } } public void dispose ( ) { fRenderings . clear ( ) ; String secondaryId = getViewSiteSecondaryId ( ) ; if ( secondaryId ! = null ) { String prefid = getPrefId ( ) ; IEclipsePreferences node = InstanceScope . INSTANCE . getNode ( DebugUIPlugin . getUniqueIdentifier ( ) ) ; if ( node ! = null ) { node . remove ( prefid ) ; try { node . flush ( ) ; } catch ( BackingStoreException e ) { DebugUIPlugin . log ( e ) ; } } } DebugPlugin . getDefault ( ) . removeDebugEventListener ( this ) ; } private void storeRenderings ( ) { String renderingsStr = IInternalDebugCoreConstants . EMPTY_STRING ; try { renderingsStr = getRenderingsAsXML ( ) ; } catch ( IOException e ) { DebugUIPlugin . log ( e ) ; } catch ( ParserConfigurationException e ) { DebugUIPlugin . log ( e ) ; } catch ( TransformerException e ) { DebugUIPlugin . log ( e ) ; } String prefid = getPrefId ( ) ; IEclipsePreferences node = InstanceScope . INSTANCE . getNode ( DebugUIPlugin . getUniqueIdentifier ( ) ) ; if ( node ! = null ) { if ( renderingsStr ! = null ) { node . put ( prefid , renderingsStr ) ; } else { IEclipsePreferences def = DefaultScope . INSTANCE . getNode ( DebugUIPlugin . getUniqueIdentifier ( ) ) ; if ( def ! = null ) { node . put ( prefid , def . get ( prefid , IInternalDebugCoreConstants . EMPTY_STRING ) ) ; } } try { node . flush ( ) ; } catch ( BackingStoreException e ) { DebugUIPlugin . log ( e ) ; } } } private String getPrefId ( ) { StringBuffer id = new StringBuffer ( ) ; IMemoryRenderingSite renderingSite = fViewPane . getMemoryRenderingSite ( ) ; IWorkbenchPartSite ps = renderingSite . getSite ( ) ; if ( ps instanceof IViewSite ) { IViewSite vs = ( IViewSite ) ps ; String secondaryId = vs . getSecondaryId ( ) ; if ( secondaryId ! = null ) { id . append ( secondaryId ) ; id . append ( <str> ) ; } } id . append ( fViewPane . getId ( ) ) ; String prefId = id . toString ( ) ; return prefId ; } private String getRenderingsAsXML ( ) throws IOException , ParserConfigurationException , TransformerException { IMemoryRendering [ ] renderings = fRenderings . toArray ( new IMemoryRendering [ fRenderings . size ( ) ] ) ; if ( renderings . length = = <int> ) { return null ; } Document document = LaunchManager . getDocument ( ) ; Element rootElement = document . createElement ( RENDERINGS_TAG ) ; document . appendChild ( rootElement ) ; for ( int i = <int> ; i < renderings . length ; i + + ) { IMemoryRendering rendering = renderings [ i ] ; Element element = document . createElement ( MEMORY_RENDERING_TAG ) ; element . setAttribute ( MEMORY_BLOCK , Integer . toString ( rendering . getMemoryBlock ( ) . hashCode ( ) ) ) ; element . setAttribute ( RENDERING_ID , rendering . getRenderingId ( ) ) ; rootElement . appendChild ( element ) ; } return LaunchManager . serializeDocument ( document ) ; } private void loadPersistedRenderings ( String prefId ) { String renderingsStr = Platform . getPreferencesService ( ) . getString ( DebugUIPlugin . getUniqueIdentifier ( ) , prefId , <str> , null ) ; if ( renderingsStr . length ( ) = = <int> ) { return ; } Element root ; try { root = DebugPlugin . parseDocument ( renderingsStr ) ; } catch ( CoreException e ) { DebugUIPlugin . logErrorMessage ( <str> ) ; return ; } if ( ! root . getNodeName ( ) . equals ( RENDERINGS_TAG ) ) { DebugUIPlugin . logErrorMessage ( <str> ) ; return ; } NodeList list = root . getChildNodes ( ) ; boolean renderingsAdded = false ; for ( int i = <int> , numItems = list . getLength ( ) ; i < numItems ; i + + ) { Node node = list . item ( i ) ; if ( node . getNodeType ( ) = = Node . ELEMENT_NODE ) { Element element = ( Element ) node ; if ( ! element . getNodeName ( ) . equals ( MEMORY_RENDERING_TAG ) ) { DebugUIPlugin . logErrorMessage ( <str> ) ; continue ; } String memoryBlockHashCode = element . getAttribute ( MEMORY_BLOCK ) ; String renderingId = element . getAttribute ( RENDERING_ID ) ; IMemoryBlock [ ] memoryBlocks = DebugPlugin . getDefault ( ) . getMemoryBlockManager ( ) . getMemoryBlocks ( ) ; IMemoryBlock memoryBlock = null ; for ( int j = <int> ; j < memoryBlocks . length ; j + + ) { if ( Integer . toString ( memoryBlocks [ j ] . hashCode ( ) ) . equals ( memoryBlockHashCode ) ) { memoryBlock = memoryBlocks [ j ] ; } } if ( memoryBlock ! = null ) { IMemoryRenderingType [ ] types = DebugUITools . getMemoryRenderingManager ( ) . getRenderingTypes ( memoryBlock ) ; IMemoryRenderingType type = null ; for ( int k = <int> ; k < types . length ; k + + ) { if ( types [ k ] . getId ( ) . equals ( renderingId ) ) { type = types [ k ] ; } } if ( type ! = null ) { try { IMemoryRendering rendering = type . createRendering ( ) ; if ( rendering ! = null ) { rendering . init ( fViewPane , memoryBlock ) ; if ( ! fRenderings . contains ( rendering ) ) { fRenderings . add ( rendering ) ; renderingsAdded = true ; } } } catch ( CoreException e1 ) { DebugUIPlugin . log ( e1 ) ; } } } } } if ( renderingsAdded ) { DebugPlugin . getDefault ( ) . addDebugEventListener ( this ) ; } } private String getViewSiteSecondaryId ( ) { IMemoryRenderingSite renderingSite = fViewPane . getMemoryRenderingSite ( ) ; IWorkbenchPartSite ps = renderingSite . getSite ( ) ; if ( ps instanceof IViewSite ) { IViewSite vs = ( IViewSite ) ps ; String secondaryId = vs . getSecondaryId ( ) ; return secondaryId ; } return null ; } }
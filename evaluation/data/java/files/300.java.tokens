package com . netflix . hystrix . contrib . javanica . command ; import com . google . common . base . Throwables ; import com . netflix . hystrix . HystrixCollapser ; import com . netflix . hystrix . contrib . javanica . cache . CacheInvocationContext ; import com . netflix . hystrix . contrib . javanica . cache . HystrixCacheKeyGenerator ; import com . netflix . hystrix . contrib . javanica . cache . HystrixGeneratedCacheKey ; import com . netflix . hystrix . contrib . javanica . cache . HystrixRequestCacheManager ; import com . netflix . hystrix . contrib . javanica . cache . annotation . CacheRemove ; import com . netflix . hystrix . contrib . javanica . cache . annotation . CacheResult ; import com . netflix . hystrix . contrib . javanica . exception . CommandActionExecutionException ; import com . netflix . hystrix . exception . HystrixBadRequestException ; import com . netflix . hystrix . exception . HystrixRuntimeException ; import javax . annotation . concurrent . ThreadSafe ; import java . util . Collection ; import java . util . List ; @ThreadSafe public abstract class AbstractHystrixCommand < T > extends com . netflix . hystrix . HystrixCommand < T > { private final CommandActions commandActions ; private final CacheInvocationContext < CacheResult > cacheResultInvocationContext ; private final CacheInvocationContext < CacheRemove > cacheRemoveInvocationContext ; private final Collection < HystrixCollapser . CollapsedRequest < Object , Object > > collapsedRequests ; private final List < Class < ? extends Throwable > > ignoreExceptions ; private final ExecutionType executionType ; private final HystrixCacheKeyGenerator defaultCacheKeyGenerator = HystrixCacheKeyGenerator . getInstance ( ) ; protected AbstractHystrixCommand ( HystrixCommandBuilder builder ) { super ( builder . getSetterBuilder ( ) . build ( ) ) ; this . commandActions = builder . getCommandActions ( ) ; this . collapsedRequests = builder . getCollapsedRequests ( ) ; this . cacheResultInvocationContext = builder . getCacheResultInvocationContext ( ) ; this . cacheRemoveInvocationContext = builder . getCacheRemoveInvocationContext ( ) ; this . ignoreExceptions = builder . getIgnoreExceptions ( ) ; this . executionType = builder . getExecutionType ( ) ; } protected CommandAction getCommandAction ( ) { return commandActions . getCommandAction ( ) ; } protected CommandAction getFallbackAction ( ) { return commandActions . getFallbackAction ( ) ; } protected Collection < HystrixCollapser . CollapsedRequest < Object , Object > > getCollapsedRequests ( ) { return collapsedRequests ; } protected List < Class < ? extends Throwable > > getIgnoreExceptions ( ) { return ignoreExceptions ; } protected ExecutionType getExecutionType ( ) { return executionType ; } @Override protected String getCacheKey ( ) { String key = null ; if ( cacheResultInvocationContext ! = null ) { HystrixGeneratedCacheKey hystrixGeneratedCacheKey = defaultCacheKeyGenerator . generateCacheKey ( cacheResultInvocationContext ) ; key = hystrixGeneratedCacheKey . getCacheKey ( ) ; } return key ; } boolean isIgnorable ( Throwable throwable ) { if ( ignoreExceptions = = null | | ignoreExceptions . isEmpty ( ) ) { return false ; } for ( Class < ? extends Throwable > ignoreException : ignoreExceptions ) { if ( ignoreException . isAssignableFrom ( throwable . getClass ( ) ) ) { return true ; } } return false ; } Object process ( Action action ) throws Exception { Object result ; try { result = action . execute ( ) ; flushCache ( ) ; } catch ( CommandActionExecutionException throwable ) { Throwable cause = throwable . getCause ( ) ; if ( isIgnorable ( cause ) ) { throw new HystrixBadRequestException ( cause . getMessage ( ) , cause ) ; } if ( cause instanceof Exception ) { throw ( Exception ) cause ; } else { throw Throwables . propagate ( cause ) ; } } return result ; } @Override protected abstract T run ( ) throws Exception ; @Override protected T getFallback ( ) { throw new RuntimeException ( <str> , getFailedExecutionException ( ) ) ; } protected void flushCache ( ) { if ( cacheRemoveInvocationContext ! = null ) { HystrixRequestCacheManager . getInstance ( ) . clearCache ( cacheRemoveInvocationContext ) ; } } abstract class Action { abstract Object execute ( ) throws CommandActionExecutionException ; } static class FallbackErrorMessageBuilder { private StringBuilder builder = new StringBuilder ( <str> ) ; static FallbackErrorMessageBuilder create ( ) { return new FallbackErrorMessageBuilder ( ) ; } public FallbackErrorMessageBuilder append ( CommandAction action , Throwable throwable ) { return commandAction ( action ) . exception ( throwable ) ; } private FallbackErrorMessageBuilder commandAction ( CommandAction action ) { if ( action instanceof CommandExecutionAction | | action instanceof LazyCommandExecutionAction ) { builder . append ( <str> ) . append ( action . getActionName ( ) ) . append ( <str> ) . append ( action . getActionName ( ) ) . append ( <str> ) ; } else if ( action instanceof MethodExecutionAction ) { builder . append ( <str> ) . append ( action . getActionName ( ) ) . append ( <str> ) ; } return this ; } private FallbackErrorMessageBuilder exception ( Throwable throwable ) { if ( throwable instanceof HystrixBadRequestException ) { builder . append ( <str> ) . append ( throwable . getCause ( ) . getClass ( ) ) . append ( <str> ) ; } else if ( throwable instanceof HystrixRuntimeException ) { builder . append ( <str> ) . append ( throwable . getCause ( ) . getClass ( ) ) . append ( <str> ) ; } return this ; } public String build ( ) { return builder . toString ( ) ; } } }
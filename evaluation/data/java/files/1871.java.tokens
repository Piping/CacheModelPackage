package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . MapFeature . REJECTS_DUPLICATES_AT_CREATION ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . List ; import java . util . Map . Entry ; @GwtCompatible ( emulated = true ) public class MapCreationTester < K , V > extends AbstractMapTester < K , V > { @MapFeature.Require ( ALLOWS_NULL_KEYS ) @CollectionSize.Require ( absent = ZERO ) public void testCreateWithNullKeySupported ( ) { initMapWithNullKey ( ) ; expectContents ( createArrayWithNullKey ( ) ) ; } @MapFeature.Require ( absent = ALLOWS_NULL_KEYS ) @CollectionSize.Require ( absent = ZERO ) public void testCreateWithNullKeyUnsupported ( ) { try { initMapWithNullKey ( ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } @MapFeature.Require ( ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testCreateWithNullValueSupported ( ) { initMapWithNullValue ( ) ; expectContents ( createArrayWithNullValue ( ) ) ; } @MapFeature.Require ( absent = ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testCreateWithNullValueUnsupported ( ) { try { initMapWithNullValue ( ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } @MapFeature.Require ( { ALLOWS_NULL_KEYS , ALLOWS_NULL_VALUES } ) @CollectionSize.Require ( absent = ZERO ) public void testCreateWithNullKeyAndValueSupported ( ) { Entry < K , V > [ ] entries = createSamplesArray ( ) ; entries [ getNullLocation ( ) ] = entry ( null , null ) ; resetMap ( entries ) ; expectContents ( entries ) ; } @MapFeature.Require ( value = ALLOWS_NULL_KEYS , absent = REJECTS_DUPLICATES_AT_CREATION ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testCreateWithDuplicates_nullDuplicatesNotRejected ( ) { expectFirstRemoved ( getEntriesMultipleNullKeys ( ) ) ; } @MapFeature.Require ( absent = REJECTS_DUPLICATES_AT_CREATION ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testCreateWithDuplicates_nonNullDuplicatesNotRejected ( ) { expectFirstRemoved ( getEntriesMultipleNonNullKeys ( ) ) ; } @MapFeature.Require ( { ALLOWS_NULL_KEYS , REJECTS_DUPLICATES_AT_CREATION } ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testCreateWithDuplicates_nullDuplicatesRejected ( ) { Entry < K , V > [ ] entries = getEntriesMultipleNullKeys ( ) ; try { resetMap ( entries ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } @MapFeature.Require ( REJECTS_DUPLICATES_AT_CREATION ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testCreateWithDuplicates_nonNullDuplicatesRejected ( ) { Entry < K , V > [ ] entries = getEntriesMultipleNonNullKeys ( ) ; try { resetMap ( entries ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } private Entry < K , V > [ ] getEntriesMultipleNullKeys ( ) { Entry < K , V > [ ] entries = createArrayWithNullKey ( ) ; entries [ <int> ] = entry ( null , entries [ <int> ] . getValue ( ) ) ; return entries ; } private Entry < K , V > [ ] getEntriesMultipleNonNullKeys ( ) { Entry < K , V > [ ] entries = createSamplesArray ( ) ; entries [ <int> ] = entry ( k1 ( ) , v0 ( ) ) ; return entries ; } private void expectFirstRemoved ( Entry < K , V > [ ] entries ) { resetMap ( entries ) ; List < Entry < K , V > > expectedWithDuplicateRemoved = Arrays . asList ( entries ) . subList ( <int> , getNumElements ( ) ) ; expectContents ( expectedWithDuplicateRemoved ) ; } @GwtIncompatible ( <str> ) public static Method getCreateWithNullKeyUnsupportedMethod ( ) { return Helpers . getMethod ( MapCreationTester . class , <str> ) ; } }
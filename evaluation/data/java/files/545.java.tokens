package org . elasticsearch . index . translog ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . translog . Translog . TranslogGeneration ; import org . elasticsearch . indices . memory . IndexingMemoryController ; import org . elasticsearch . threadpool . ThreadPool ; import java . nio . file . Path ; public final class TranslogConfig { public static final String INDEX_TRANSLOG_DURABILITY = <str> ; public static final String INDEX_TRANSLOG_FS_TYPE = <str> ; public static final String INDEX_TRANSLOG_BUFFER_SIZE = <str> ; public static final String INDEX_TRANSLOG_SYNC_INTERVAL = <str> ; private final TimeValue syncInterval ; private final BigArrays bigArrays ; private final ThreadPool threadPool ; private final boolean syncOnEachOperation ; private volatile int bufferSize ; private volatile TranslogGeneration translogGeneration ; private volatile Translog . Durabilty durabilty = Translog . Durabilty . REQUEST ; private volatile TranslogWriter . Type type ; private final IndexSettings indexSettings ; private final ShardId shardId ; private final Path translogPath ; public TranslogConfig ( ShardId shardId , Path translogPath , IndexSettings indexSettings , Translog . Durabilty durabilty , BigArrays bigArrays , @Nullable ThreadPool threadPool ) { this . indexSettings = indexSettings ; this . shardId = shardId ; this . translogPath = translogPath ; this . durabilty = durabilty ; this . threadPool = threadPool ; this . bigArrays = bigArrays ; this . type = TranslogWriter . Type . fromString ( indexSettings . getSettings ( ) . get ( INDEX_TRANSLOG_FS_TYPE , TranslogWriter . Type . BUFFERED . name ( ) ) ) ; this . bufferSize = ( int ) indexSettings . getSettings ( ) . getAsBytesSize ( INDEX_TRANSLOG_BUFFER_SIZE , IndexingMemoryController . INACTIVE_SHARD_TRANSLOG_BUFFER ) . bytes ( ) ; syncInterval = indexSettings . getSettings ( ) . getAsTime ( INDEX_TRANSLOG_SYNC_INTERVAL , TimeValue . timeValueSeconds ( <int> ) ) ; if ( syncInterval . millis ( ) > <int> & & threadPool ! = null ) { syncOnEachOperation = false ; } else if ( syncInterval . millis ( ) = = <int> ) { syncOnEachOperation = true ; } else { syncOnEachOperation = false ; } } public ThreadPool getThreadPool ( ) { return threadPool ; } public Translog . Durabilty getDurabilty ( ) { return durabilty ; } public void setDurabilty ( Translog . Durabilty durabilty ) { this . durabilty = durabilty ; } public TranslogWriter . Type getType ( ) { return type ; } public void setType ( TranslogWriter . Type type ) { this . type = type ; } public boolean isSyncOnEachOperation ( ) { return syncOnEachOperation ; } public int getBufferSize ( ) { return bufferSize ; } public void setBufferSize ( int bufferSize ) { this . bufferSize = bufferSize ; } public TimeValue getSyncInterval ( ) { return syncInterval ; } public IndexSettings getIndexSettings ( ) { return indexSettings ; } public ShardId getShardId ( ) { return shardId ; } public BigArrays getBigArrays ( ) { return bigArrays ; } public Path getTranslogPath ( ) { return translogPath ; } public TranslogGeneration getTranslogGeneration ( ) { return translogGeneration ; } public void setTranslogGeneration ( TranslogGeneration translogGeneration ) { this . translogGeneration = translogGeneration ; } } 

package org . apache . cassandra . exceptions ; import java . util . HashMap ; import java . util . Map ; import org . apache . cassandra . transport . ProtocolException ; public enum ExceptionCode { SERVER_ERROR ( <hex> ) , PROTOCOL_ERROR ( <hex> ) , BAD_CREDENTIALS ( <hex> ) , UNAVAILABLE ( <hex> ) , OVERLOADED ( <hex> ) , IS_BOOTSTRAPPING ( <hex> ) , TRUNCATE_ERROR ( <hex> ) , WRITE_TIMEOUT ( <hex> ) , READ_TIMEOUT ( <hex> ) , READ_FAILURE ( <hex> ) , FUNCTION_FAILURE ( <hex> ) , WRITE_FAILURE ( <hex> ) , SYNTAX_ERROR ( <hex> ) , UNAUTHORIZED ( <hex> ) , INVALID ( <hex> ) , CONFIG_ERROR ( <hex> ) , ALREADY_EXISTS ( <hex> ) , UNPREPARED ( <hex> ) ; public final int value ; private static final Map < Integer , ExceptionCode > valueToCode = new HashMap < > ( ExceptionCode . values ( ) . length ) ; static { for ( ExceptionCode code : ExceptionCode . values ( ) ) valueToCode . put ( code . value , code ) ; } private ExceptionCode ( int value ) { this . value = value ; } public static ExceptionCode fromValue ( int value ) { ExceptionCode code = valueToCode . get ( value ) ; if ( code = = null ) throw new ProtocolException ( String . format ( <str> , value ) ) ; return code ; } }
package org . elasticsearch . search ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . AbstractSearchScript ; import org . elasticsearch . script . ExecutableScript ; import org . elasticsearch . script . NativeScriptFactory ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptModule ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Collection ; import java . util . Collections ; import java . util . Map ; import java . util . concurrent . TimeUnit ; import static org . elasticsearch . index . query . QueryBuilders . scriptQuery ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . SUITE ) public class SearchTimeoutIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( ScriptedTimeoutPlugin . class ) ; } @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . build ( ) ; } public void testSimpleTimeout ( ) throws Exception { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTimeout ( new TimeValue ( <int> , TimeUnit . MILLISECONDS ) ) . setQuery ( scriptQuery ( new Script ( NativeTestScriptedTimeout . TEST_NATIVE_SCRIPT_TIMEOUT , ScriptType . INLINE , <str> , null ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . isTimedOut ( ) , equalTo ( true ) ) ; } public static class ScriptedTimeoutPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( ScriptModule module ) { module . registerScript ( NativeTestScriptedTimeout . TEST_NATIVE_SCRIPT_TIMEOUT , NativeTestScriptedTimeout . Factory . class ) ; } } public static class NativeTestScriptedTimeout extends AbstractSearchScript { public static final String TEST_NATIVE_SCRIPT_TIMEOUT = <str> ; public static class Factory implements NativeScriptFactory { @Override public ExecutableScript newScript ( Map < String , Object > params ) { return new NativeTestScriptedTimeout ( ) ; } @Override public boolean needsScores ( ) { return false ; } } @Override public Object run ( ) { try { Thread . sleep ( <int> ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( e ) ; } return true ; } } } 

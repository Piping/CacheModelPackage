package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class ConstantScoreQueryParser implements QueryParser < ConstantScoreQueryBuilder > { public static final ParseField INNER_QUERY_FIELD = new ParseField ( <str> , <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { ConstantScoreQueryBuilder . NAME , Strings . toCamelCase ( ConstantScoreQueryBuilder . NAME ) } ; } @Override public ConstantScoreQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; QueryBuilder query = null ; boolean queryFound = false ; String queryName = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( parseContext . isDeprecatedSetting ( currentFieldName ) ) { } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , INNER_QUERY_FIELD ) ) { query = parseContext . parseInnerQueryBuilder ( ) ; queryFound = true ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } if ( ! queryFound ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } ConstantScoreQueryBuilder constantScoreBuilder = new ConstantScoreQueryBuilder ( query ) ; constantScoreBuilder . boost ( boost ) ; constantScoreBuilder . queryName ( queryName ) ; return constantScoreBuilder ; } @Override public ConstantScoreQueryBuilder getBuilderPrototype ( ) { return ConstantScoreQueryBuilder . PROTOTYPE ; } } 

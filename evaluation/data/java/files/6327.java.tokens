package org . apache . cassandra . cql3 ; import java . util . * ; import org . junit . Test ; import static junit . framework . Assert . * ; public class SimpleQueryTest extends CQLTester { @Test public void testStaticCompactTables ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; } @Test public void testDynamicCompactTables ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; flush ( ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; } @Test public void testTableWithoutClustering ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; flush ( ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; } @Test public void testTableWithOneClustering ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; flush ( ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; } @Test public void testTableWithReverseClusteringOrder ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; flush ( ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; } @Test public void testTableWithTwoClustering ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <str> , <int> , <str> ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> , <int> , <str> ) , row ( <str> , <str> , <int> , <str> ) , row ( <str> , <str> , <int> , <str> ) , row ( <str> , <str> , <int> , <str> ) , row ( <str> , <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <int> , <str> ) , row ( <str> , <str> , <int> , <str> ) , row ( <str> , <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <str> , <int> , <str> ) , row ( <str> , <str> , <int> , <str> ) , row ( <str> , <str> , <int> , <str> ) ) ; } @Test public void testTableWithLargePartition ( ) throws Throwable { createTable ( <str> ) ; for ( int t1 = <int> ; t1 < <int> ; t1 + + ) for ( int t2 = <int> ; t2 < <int> ; t2 + + ) execute ( <str> , <str> , t1 , t2 , <str> + t1 + <str> + t2 ) ; flush ( ) ; Object [ ] [ ] expected = new Object [ <int> ] [ ] ; for ( int t2 = <int> ; t2 < <int> ; t2 + + ) expected [ t2 ] = row ( <str> , <int> , t2 ) ; assertRows ( execute ( <str> , <str> , <int> ) , expected ) ; Object [ ] [ ] expectedReverse = new Object [ <int> ] [ ] ; for ( int t2 = <int> ; t2 > = <int> ; t2 - - ) expectedReverse [ <int> - t2 ] = row ( <str> , <int> , t2 ) ; assertRows ( execute ( <str> , <str> , <int> ) , expectedReverse ) ; } @Test public void testRowDeletion ( ) throws Throwable { int N = <int> ; createTable ( <str> ) ; for ( int t = <int> ; t < N ; t + + ) execute ( <str> , <str> , t , <str> + t , t + <int> ) ; flush ( ) ; for ( int i = <int> ; i < N / <int> ; i + + ) execute ( <str> , <str> , i * <int> ) ; Object [ ] [ ] expected = new Object [ N / <int> ] [ ] ; for ( int i = <int> ; i < N / <int> ; i + + ) { int t = i * <int> + <int> ; expected [ i ] = row ( <str> , t , <str> + t , t + <int> ) ; } assertRows ( execute ( <str> ) , expected ) ; } @Test public void testRangeTombstones ( ) throws Throwable { int N = <int> ; createTable ( <str> ) ; for ( int t1 = <int> ; t1 < <int> ; t1 + + ) for ( int t2 = <int> ; t2 < N ; t2 + + ) execute ( <str> , <str> , t1 , t2 , <str> + t1 + <str> + t2 ) ; flush ( ) ; execute ( <str> , <str> , <int> ) ; flush ( ) ; Object [ ] [ ] expected = new Object [ <int> * N ] [ ] ; for ( int t2 = <int> ; t2 < N ; t2 + + ) { expected [ t2 ] = row ( <str> , <int> , t2 , <str> + t2 ) ; expected [ N + t2 ] = row ( <str> , <int> , t2 , <str> + t2 ) ; } assertRows ( execute ( <str> ) , expected ) ; } @Test public void test2ndaryIndexes ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; flush ( ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <int> , <str> ) , row ( <str> , <int> , <str> ) ) ; } @Test public void testStaticColumns ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; flush ( ) ; execute ( <str> , <str> , <int> , <str> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) , row ( <str> , <int> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> ) ) ; } @Test public void testDistinct ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; flush ( ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <str> , <int> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; } @Test public void collectionDeletionTest ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , set ( <int> ) ) ; flush ( ) ; execute ( <str> , <int> , set ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( set ( <int> ) ) ) ; } @Test public void limitWithMultigetTest ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> , list ( <int> , <int> , <int> , <int> ) , <int> ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void staticDistinctTest ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) , row ( <int> , null ) ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) ) ; assertRows ( execute ( <str> , <int> ) , row ( ( Object ) null ) ) ; assertEmpty ( execute ( <str> , <int> ) ) ; } @Test public void testCompactStorageUpdateWithNull ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> , null , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void test2ndaryIndexBug ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; flush ( ) ; execute ( <str> , <int> , <int> ) ; flush ( ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; } }
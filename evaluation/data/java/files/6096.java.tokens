package rx . internal . operators ; import java . util . ArrayDeque ; import java . util . Deque ; import rx . Observable . Operator ; import rx . Subscriber ; public final class OperatorTakeLast < T > implements Operator < T , T > { private final int count ; public OperatorTakeLast ( int count ) { if ( count < <int> ) { throw new IndexOutOfBoundsException ( <str> ) ; } this . count = count ; } @Override public Subscriber < ? super T > call ( final Subscriber < ? super T > subscriber ) { final Deque < Object > deque = new ArrayDeque < Object > ( ) ; final NotificationLite < T > notification = NotificationLite . instance ( ) ; final TakeLastQueueProducer < T > producer = new TakeLastQueueProducer < T > ( notification , deque , subscriber ) ; subscriber . setProducer ( producer ) ; return new Subscriber < T > ( subscriber ) { @Override public void onStart ( ) { request ( Long . MAX_VALUE ) ; } @Override public void onCompleted ( ) { deque . offer ( notification . completed ( ) ) ; producer . startEmitting ( ) ; } @Override public void onError ( Throwable e ) { deque . clear ( ) ; subscriber . onError ( e ) ; } @Override public void onNext ( T value ) { if ( count = = <int> ) { return ; } if ( deque . size ( ) = = count ) { deque . removeFirst ( ) ; } deque . offerLast ( notification . next ( value ) ) ; } } ; } }
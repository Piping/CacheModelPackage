package com . google . common . math ; import com . google . common . annotations . GwtCompatible ; import java . math . BigInteger ; import javax . annotation . Nullable ; @GwtCompatible final class MathPreconditions { static int checkPositive ( @Nullable String role , int x ) { if ( x < = <int> ) { throw new IllegalArgumentException ( role + <str> + x + <str> ) ; } return x ; } static long checkPositive ( @Nullable String role , long x ) { if ( x < = <int> ) { throw new IllegalArgumentException ( role + <str> + x + <str> ) ; } return x ; } static BigInteger checkPositive ( @Nullable String role , BigInteger x ) { if ( x . signum ( ) < = <int> ) { throw new IllegalArgumentException ( role + <str> + x + <str> ) ; } return x ; } static int checkNonNegative ( @Nullable String role , int x ) { if ( x < <int> ) { throw new IllegalArgumentException ( role + <str> + x + <str> ) ; } return x ; } static long checkNonNegative ( @Nullable String role , long x ) { if ( x < <int> ) { throw new IllegalArgumentException ( role + <str> + x + <str> ) ; } return x ; } static BigInteger checkNonNegative ( @Nullable String role , BigInteger x ) { if ( x . signum ( ) < <int> ) { throw new IllegalArgumentException ( role + <str> + x + <str> ) ; } return x ; } static double checkNonNegative ( @Nullable String role , double x ) { if ( ! ( x > = <int> ) ) { throw new IllegalArgumentException ( role + <str> + x + <str> ) ; } return x ; } static void checkRoundingUnnecessary ( boolean condition ) { if ( ! condition ) { throw new ArithmeticException ( <str> ) ; } } static void checkInRange ( boolean condition ) { if ( ! condition ) { throw new ArithmeticException ( <str> ) ; } } static void checkNoOverflow ( boolean condition ) { if ( ! condition ) { throw new ArithmeticException ( <str> ) ; } } private MathPreconditions ( ) { } }
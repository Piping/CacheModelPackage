package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . ShardRoutingState ; import org . elasticsearch . cluster . routing . allocation . command . AllocateAllocationCommand ; import org . elasticsearch . cluster . routing . allocation . command . AllocationCommands ; import org . elasticsearch . cluster . routing . allocation . command . CancelAllocationCommand ; import org . elasticsearch . cluster . routing . allocation . command . MoveAllocationCommand ; import org . elasticsearch . cluster . routing . allocation . decider . EnableAllocationDecider ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . test . ESAllocationTestCase ; import static java . util . Collections . singletonMap ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . RELOCATING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; public class AllocationCommandsTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( AllocationCommandsTests . class ) ; public void testMoveShardCommand ( ) { AllocationService allocation = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingAllocation . Result rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; logger . info ( <str> ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; logger . info ( <str> ) ; String existingNodeId = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . currentNodeId ( ) ; String toNodeId ; if ( <str> . equals ( existingNodeId ) ) { toNodeId = <str> ; } else { toNodeId = <str> ; } rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new MoveAllocationCommand ( new ShardId ( <str> , <int> ) , existingNodeId , toNodeId ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( existingNodeId ) . get ( <int> ) . state ( ) , equalTo ( ShardRoutingState . RELOCATING ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( toNodeId ) . get ( <int> ) . state ( ) , equalTo ( ShardRoutingState . INITIALIZING ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( existingNodeId ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( toNodeId ) . get ( <int> ) . state ( ) , equalTo ( ShardRoutingState . STARTED ) ) ; } public void testAllocateCommand ( ) { AllocationService allocation = createAllocationService ( settingsBuilder ( ) . put ( EnableAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ENABLE , <str> ) . put ( EnableAllocationDecider . CLUSTER_ROUTING_REBALANCE_ENABLE , <str> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> , singletonMap ( <str> , Boolean . FALSE . toString ( ) ) ) ) ) . build ( ) ; RoutingAllocation . Result rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; try { allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } logger . info ( <str> ) ; try { rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , true ) ) ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , true ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; try { allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; try { allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } } public void testCancelCommand ( ) { AllocationService allocation = createAllocationService ( settingsBuilder ( ) . put ( EnableAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ENABLE , <str> ) . put ( EnableAllocationDecider . CLUSTER_ROUTING_REBALANCE_ENABLE , <str> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingAllocation . Result rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , true ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; try { allocation . reroute ( clusterState , new AllocationCommands ( new CancelAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } logger . info ( <str> ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; try { allocation . reroute ( clusterState , new AllocationCommands ( new CancelAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new CancelAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; try { allocation . reroute ( clusterState , new AllocationCommands ( new CancelAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } logger . info ( <str> ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new CancelAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new MoveAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , <str> ) ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( RELOCATING ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new CancelAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , false ) ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new CancelAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , true ) ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . get ( <int> ) . primary ( ) , equalTo ( true ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; } public void testSerialization ( ) throws Exception { AllocationCommands commands = new AllocationCommands ( new AllocateAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , true ) , new MoveAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , <str> ) , new CancelAllocationCommand ( new ShardId ( <str> , <int> ) , <str> , true ) ) ; BytesStreamOutput bytes = new BytesStreamOutput ( ) ; AllocationCommands . writeTo ( commands , bytes ) ; AllocationCommands sCommands = AllocationCommands . readFrom ( StreamInput . wrap ( bytes . bytes ( ) ) ) ; assertThat ( sCommands . commands ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( AllocateAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . shardId ( ) , equalTo ( new ShardId ( <str> , <int> ) ) ) ; assertThat ( ( ( AllocateAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . node ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( AllocateAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . allowPrimary ( ) , equalTo ( true ) ) ; assertThat ( ( ( MoveAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . shardId ( ) , equalTo ( new ShardId ( <str> , <int> ) ) ) ; assertThat ( ( ( MoveAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . fromNode ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( MoveAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . toNode ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( CancelAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . shardId ( ) , equalTo ( new ShardId ( <str> , <int> ) ) ) ; assertThat ( ( ( CancelAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . node ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( CancelAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . allowPrimary ( ) , equalTo ( true ) ) ; } public void testXContent ( ) throws Exception { String commands = <str> + <str> + <str> + <str> + <str> + <str> + <str> ; XContentParser parser = XContentFactory . xContent ( XContentType . JSON ) . createParser ( commands ) ; parser . nextToken ( ) ; parser . nextToken ( ) ; AllocationCommands sCommands = AllocationCommands . fromXContent ( parser ) ; assertThat ( sCommands . commands ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( AllocateAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . shardId ( ) , equalTo ( new ShardId ( <str> , <int> ) ) ) ; assertThat ( ( ( AllocateAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . node ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( AllocateAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . allowPrimary ( ) , equalTo ( true ) ) ; assertThat ( ( ( MoveAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . shardId ( ) , equalTo ( new ShardId ( <str> , <int> ) ) ) ; assertThat ( ( ( MoveAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . fromNode ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( MoveAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . toNode ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( CancelAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . shardId ( ) , equalTo ( new ShardId ( <str> , <int> ) ) ) ; assertThat ( ( ( CancelAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . node ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( CancelAllocationCommand ) ( sCommands . commands ( ) . get ( <int> ) ) ) . allowPrimary ( ) , equalTo ( true ) ) ; } } 

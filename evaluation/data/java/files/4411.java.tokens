package io . netty . handler . codec . http ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . handler . codec . DefaultHeaders . NameValidator ; import io . netty . util . internal . StringUtil ; import java . util . Map . Entry ; public class DefaultLastHttpContent extends DefaultHttpContent implements LastHttpContent { private final HttpHeaders trailingHeaders ; private final boolean validateHeaders ; public DefaultLastHttpContent ( ) { this ( Unpooled . buffer ( <int> ) ) ; } public DefaultLastHttpContent ( ByteBuf content ) { this ( content , true ) ; } public DefaultLastHttpContent ( ByteBuf content , boolean validateHeaders ) { super ( content ) ; trailingHeaders = new TrailingHttpHeaders ( validateHeaders ) ; this . validateHeaders = validateHeaders ; } @Override public LastHttpContent copy ( ) { DefaultLastHttpContent copy = new DefaultLastHttpContent ( content ( ) . copy ( ) , validateHeaders ) ; copy . trailingHeaders ( ) . set ( trailingHeaders ( ) ) ; return copy ; } @Override public LastHttpContent duplicate ( ) { DefaultLastHttpContent copy = new DefaultLastHttpContent ( content ( ) . duplicate ( ) , validateHeaders ) ; copy . trailingHeaders ( ) . set ( trailingHeaders ( ) ) ; return copy ; } @Override public LastHttpContent retain ( int increment ) { super . retain ( increment ) ; return this ; } @Override public LastHttpContent retain ( ) { super . retain ( ) ; return this ; } @Override public LastHttpContent touch ( ) { super . touch ( ) ; return this ; } @Override public LastHttpContent touch ( Object hint ) { super . touch ( hint ) ; return this ; } @Override public HttpHeaders trailingHeaders ( ) { return trailingHeaders ; } @Override public String toString ( ) { StringBuilder buf = new StringBuilder ( super . toString ( ) ) ; buf . append ( StringUtil . NEWLINE ) ; appendHeaders ( buf ) ; buf . setLength ( buf . length ( ) - StringUtil . NEWLINE . length ( ) ) ; return buf . toString ( ) ; } private void appendHeaders ( StringBuilder buf ) { for ( Entry < String , String > e : trailingHeaders ( ) ) { buf . append ( e . getKey ( ) ) ; buf . append ( <str> ) ; buf . append ( e . getValue ( ) ) ; buf . append ( StringUtil . NEWLINE ) ; } } private static final class TrailingHttpHeaders extends DefaultHttpHeaders { private static final NameValidator < CharSequence > TrailerNameValidator = new NameValidator < CharSequence > ( ) { @Override public void validateName ( CharSequence name ) { DefaultHttpHeaders . HttpNameValidator . validateName ( name ) ; if ( HttpHeaderNames . CONTENT_LENGTH . contentEqualsIgnoreCase ( name ) | | HttpHeaderNames . TRANSFER_ENCODING . contentEqualsIgnoreCase ( name ) | | HttpHeaderNames . TRAILER . contentEqualsIgnoreCase ( name ) ) { throw new IllegalArgumentException ( <str> + name ) ; } } } ; @SuppressWarnings ( { <str> } ) TrailingHttpHeaders ( boolean validate ) { super ( validate , validate ? TrailerNameValidator : NameValidator . NOT_NULL ) ; } } }
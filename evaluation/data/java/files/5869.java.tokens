package rx . internal . operators ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . concurrent . atomic . AtomicBoolean ; import java . util . concurrent . atomic . AtomicInteger ; import org . junit . Test ; import rx . Observable ; import rx . Subscriber ; import rx . functions . Action0 ; import rx . functions . Action1 ; import rx . observers . TestSubscriber ; public class OperatorTakeLastOneTest { @Test public void testLastOfManyReturnsLast ( ) { TestSubscriber < Integer > s = new TestSubscriber < Integer > ( ) ; Observable . range ( <int> , <int> ) . takeLast ( <int> ) . subscribe ( s ) ; s . assertReceivedOnNext ( Arrays . asList ( <int> ) ) ; s . assertNoErrors ( ) ; s . assertTerminalEvent ( ) ; s . assertUnsubscribed ( ) ; } @Test public void testLastOfEmptyReturnsEmpty ( ) { TestSubscriber < Object > s = new TestSubscriber < Object > ( ) ; Observable . empty ( ) . takeLast ( <int> ) . subscribe ( s ) ; s . assertReceivedOnNext ( Collections . emptyList ( ) ) ; s . assertNoErrors ( ) ; s . assertTerminalEvent ( ) ; s . assertUnsubscribed ( ) ; } @Test public void testLastOfOneReturnsLast ( ) { TestSubscriber < Integer > s = new TestSubscriber < Integer > ( ) ; Observable . just ( <int> ) . takeLast ( <int> ) . subscribe ( s ) ; s . assertReceivedOnNext ( Arrays . asList ( <int> ) ) ; s . assertNoErrors ( ) ; s . assertTerminalEvent ( ) ; s . assertUnsubscribed ( ) ; } @Test public void testUnsubscribesFromUpstream ( ) { final AtomicBoolean unsubscribed = new AtomicBoolean ( false ) ; Action0 unsubscribeAction = new Action0 ( ) { @Override public void call ( ) { unsubscribed . set ( true ) ; } } ; Observable . just ( <int> ) . doOnUnsubscribe ( unsubscribeAction ) . takeLast ( <int> ) . subscribe ( ) ; assertTrue ( unsubscribed . get ( ) ) ; } @Test public void testLastWithBackpressure ( ) { MySubscriber < Integer > s = new MySubscriber < Integer > ( <int> ) ; Observable . just ( <int> ) . takeLast ( <int> ) . subscribe ( s ) ; assertEquals ( <int> , s . list . size ( ) ) ; s . requestMore ( <int> ) ; assertEquals ( <int> , s . list . size ( ) ) ; } @Test public void testTakeLastZeroProcessesAllItemsButIgnoresThem ( ) { final AtomicInteger upstreamCount = new AtomicInteger ( ) ; final int num = <int> ; int count = Observable . range ( <int> , num ) . doOnNext ( new Action1 < Integer > ( ) { @Override public void call ( Integer t ) { upstreamCount . incrementAndGet ( ) ; } } ) . takeLast ( <int> ) . count ( ) . toBlocking ( ) . single ( ) ; assertEquals ( num , upstreamCount . get ( ) ) ; assertEquals ( <int> , count ) ; } private static class MySubscriber < T > extends Subscriber < T > { private long initialRequest ; MySubscriber ( long initialRequest ) { this . initialRequest = initialRequest ; } final List < T > list = new ArrayList < T > ( ) ; public void requestMore ( long n ) { request ( n ) ; } @Override public void onStart ( ) { request ( initialRequest ) ; } @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { } @Override public void onNext ( T t ) { list . add ( t ) ; } } }
package com . netflix . hystrix ; import com . netflix . hystrix . strategy . HystrixPlugins ; import com . netflix . hystrix . strategy . concurrency . HystrixConcurrencyStrategy ; import com . netflix . hystrix . strategy . concurrency . HystrixRequestContext ; import com . netflix . hystrix . strategy . concurrency . HystrixRequestVariable ; import com . netflix . hystrix . strategy . concurrency . HystrixRequestVariableDefault ; import com . netflix . hystrix . strategy . concurrency . HystrixRequestVariableLifecycle ; import com . netflix . hystrix . strategy . properties . HystrixPropertiesFactory ; import org . junit . After ; import org . junit . Before ; import org . junit . Test ; import java . util . concurrent . Callable ; import static org . junit . Assert . * ; public class HystrixCommandTestWithCustomConcurrencyStrategy { @Before public void init ( ) { HystrixPlugins . reset ( ) ; } @After public void reset ( ) { HystrixRequestContext . setContextOnCurrentThread ( null ) ; HystrixPropertiesFactory . reset ( ) ; HystrixPlugins . reset ( ) ; } @Test public void testCommandRequiresContextConcurrencyStrategyProvidesItContextSetUpCorrectly ( ) { HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy ( true ) ; HystrixPlugins . getInstance ( ) . registerConcurrencyStrategy ( strategy ) ; HystrixRequestContext context = HystrixRequestContext . initializeContext ( ) ; HystrixCommand < Boolean > cmd = new TestCommand ( true , true ) ; assertTrue ( cmd . execute ( ) ) ; printRequestLog ( ) ; assertNotNull ( HystrixRequestLog . getCurrentRequest ( ) . getExecutedCommandsAsString ( ) ) ; assertNotNull ( cmd . currentRequestLog ) ; context . shutdown ( ) ; } @Test public void testCommandRequiresContextConcurrencyStrategyProvidesItContextLeftUninitialized ( ) { HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy ( true ) ; HystrixPlugins . getInstance ( ) . registerConcurrencyStrategy ( strategy ) ; HystrixRequestContext . setContextOnCurrentThread ( null ) ; HystrixCommand < Boolean > cmd = new TestCommand ( true , true ) ; assertTrue ( cmd . execute ( ) ) ; printRequestLog ( ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( ) ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( strategy ) ) ; assertNull ( cmd . currentRequestLog ) ; } @Test public void testCommandRequiresContextConcurrencyStrategyDoesNotProvideItContextSetUpCorrectly ( ) { HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy ( false ) ; HystrixPlugins . getInstance ( ) . registerConcurrencyStrategy ( strategy ) ; HystrixRequestContext context = HystrixRequestContext . initializeContext ( ) ; HystrixCommand < Boolean > cmd = new TestCommand ( true , true ) ; assertTrue ( cmd . execute ( ) ) ; printRequestLog ( ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( ) ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( strategy ) ) ; assertNull ( cmd . currentRequestLog ) ; context . shutdown ( ) ; } @Test public void testCommandRequiresContextConcurrencyStrategyDoesNotProvideItContextLeftUninitialized ( ) { HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy ( false ) ; HystrixPlugins . getInstance ( ) . registerConcurrencyStrategy ( strategy ) ; HystrixRequestContext . setContextOnCurrentThread ( null ) ; HystrixCommand < Boolean > cmd = new TestCommand ( true , true ) ; assertTrue ( cmd . execute ( ) ) ; printRequestLog ( ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( ) ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( strategy ) ) ; assertNull ( cmd . currentRequestLog ) ; } @Test public void testCommandDoesNotRequireContextConcurrencyStrategyProvidesItContextSetUpCorrectly ( ) { HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy ( true ) ; HystrixPlugins . getInstance ( ) . registerConcurrencyStrategy ( strategy ) ; HystrixRequestContext context = HystrixRequestContext . initializeContext ( ) ; HystrixCommand < Boolean > cmd = new TestCommand ( false , false ) ; assertTrue ( cmd . execute ( ) ) ; printRequestLog ( ) ; assertNotNull ( HystrixRequestLog . getCurrentRequest ( ) ) ; assertNotNull ( HystrixRequestLog . getCurrentRequest ( strategy ) ) ; assertNull ( cmd . currentRequestLog ) ; context . shutdown ( ) ; } @Test public void testCommandDoesNotRequireContextConcurrencyStrategyProvidesItContextLeftUninitialized ( ) { HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy ( true ) ; HystrixPlugins . getInstance ( ) . registerConcurrencyStrategy ( strategy ) ; HystrixRequestContext . setContextOnCurrentThread ( null ) ; HystrixCommand < Boolean > cmd = new TestCommand ( false , false ) ; assertTrue ( cmd . execute ( ) ) ; printRequestLog ( ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( ) ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( strategy ) ) ; assertNull ( cmd . currentRequestLog ) ; } @Test public void testCommandDoesNotRequireContextConcurrencyStrategyDoesNotProvideItContextSetUpCorrectly ( ) { HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy ( false ) ; HystrixPlugins . getInstance ( ) . registerConcurrencyStrategy ( strategy ) ; HystrixRequestContext context = HystrixRequestContext . initializeContext ( ) ; HystrixCommand < Boolean > cmd = new TestCommand ( true , true ) ; assertTrue ( cmd . execute ( ) ) ; printRequestLog ( ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( ) ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( strategy ) ) ; assertNull ( cmd . currentRequestLog ) ; context . shutdown ( ) ; } @Test public void testCommandDoesNotRequireContextConcurrencyStrategyDoesNotProvideItContextLeftUninitialized ( ) { HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy ( false ) ; HystrixPlugins . getInstance ( ) . registerConcurrencyStrategy ( strategy ) ; HystrixRequestContext . setContextOnCurrentThread ( null ) ; HystrixCommand < Boolean > cmd = new TestCommand ( true , true ) ; assertTrue ( cmd . execute ( ) ) ; printRequestLog ( ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( ) ) ; assertNull ( HystrixRequestLog . getCurrentRequest ( strategy ) ) ; assertNull ( cmd . currentRequestLog ) ; } public static class TestCommand extends HystrixCommand < Boolean > { public TestCommand ( boolean cacheEnabled , boolean logEnabled ) { super ( Setter . withGroupKey ( HystrixCommandGroupKey . Factory . asKey ( <str> ) ) . andCommandPropertiesDefaults ( new HystrixCommandProperties . Setter ( ) . withRequestCacheEnabled ( cacheEnabled ) . withRequestLogEnabled ( logEnabled ) ) ) ; } @Override protected Boolean run ( ) throws Exception { return true ; } } private static void printRequestLog ( ) { HystrixRequestLog currentLog = HystrixRequestLog . getCurrentRequest ( ) ; if ( currentLog ! = null ) { System . out . println ( <str> + currentLog . getExecutedCommandsAsString ( ) ) ; } else { System . out . println ( <str> ) ; } } public static class CustomConcurrencyStrategy extends HystrixConcurrencyStrategy { private final boolean useDefaultRequestContext ; public CustomConcurrencyStrategy ( boolean useDefaultRequestContext ) { this . useDefaultRequestContext = useDefaultRequestContext ; } @Override public < T > Callable < T > wrapCallable ( Callable < T > callable ) { return new LoggingCallable < T > ( callable ) ; } @Override public < T > HystrixRequestVariable < T > getRequestVariable ( HystrixRequestVariableLifecycle < T > rv ) { if ( useDefaultRequestContext ) { return super . getRequestVariable ( rv ) ; } else { return new HystrixRequestVariableDefault < T > ( ) { @Override public T initialValue ( ) { return null ; } @Override public T get ( ) { return null ; } @Override public void set ( T value ) { } @Override public void remove ( ) { } @Override public void shutdown ( T value ) { } } ; } } } public static class LoggingCallable < T > implements Callable < T > { private final Callable < T > callable ; public LoggingCallable ( Callable < T > callable ) { this . callable = callable ; } @Override public T call ( ) throws Exception { System . out . println ( <str> ) ; return callable . call ( ) ; } } }
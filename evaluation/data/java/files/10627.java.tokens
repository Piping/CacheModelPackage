package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class SphereTriangleDetector extends btDiscreteCollisionDetectorInterface { private long swigCPtr ; protected SphereTriangleDetector ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , CollisionJNI . SphereTriangleDetector_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public SphereTriangleDetector ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( CollisionJNI . SphereTriangleDetector_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( SphereTriangleDetector obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_SphereTriangleDetector ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void getClosestPoints ( btDiscreteCollisionDetectorInterface . ClosestPointInput input , btDiscreteCollisionDetectorInterface . Result output , btIDebugDraw debugDraw , boolean swapResults ) { CollisionJNI . SphereTriangleDetector_getClosestPoints__SWIG_0 ( swigCPtr , this , btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input ) , input , btDiscreteCollisionDetectorInterface . Result . getCPtr ( output ) , output , btIDebugDraw . getCPtr ( debugDraw ) , debugDraw , swapResults ) ; } public void getClosestPoints ( btDiscreteCollisionDetectorInterface . ClosestPointInput input , btDiscreteCollisionDetectorInterface . Result output , btIDebugDraw debugDraw ) { CollisionJNI . SphereTriangleDetector_getClosestPoints__SWIG_1 ( swigCPtr , this , btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input ) , input , btDiscreteCollisionDetectorInterface . Result . getCPtr ( output ) , output , btIDebugDraw . getCPtr ( debugDraw ) , debugDraw ) ; } public SphereTriangleDetector ( btSphereShape sphere , btTriangleShape triangle , float contactBreakingThreshold ) { this ( CollisionJNI . new_SphereTriangleDetector ( btSphereShape . getCPtr ( sphere ) , sphere , btTriangleShape . getCPtr ( triangle ) , triangle , contactBreakingThreshold ) , true ) ; } public boolean collide ( Vector3 sphereCenter , Vector3 point , Vector3 resultNormal , SWIGTYPE_p_float depth , SWIGTYPE_p_float timeOfImpact , float contactBreakingThreshold ) { return CollisionJNI . SphereTriangleDetector_collide ( swigCPtr , this , sphereCenter , point , resultNormal , SWIGTYPE_p_float . getCPtr ( depth ) , SWIGTYPE_p_float . getCPtr ( timeOfImpact ) , contactBreakingThreshold ) ; } }
package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import junit . framework . TestCase ; import java . util . EnumMap ; import java . util . Map ; import java . util . Set ; @GwtCompatible public class WellBehavedMapTest extends TestCase { enum Foo { X , Y , Z , T } public void testEntrySet_contain ( ) { WellBehavedMap < Foo , Integer > map = WellBehavedMap . wrap ( new EnumMap < Foo , Integer > ( Foo . class ) ) ; map . putAll ( ImmutableMap . of ( Foo . X , <int> , Foo . Y , <int> , Foo . Z , <int> ) ) ; assertTrue ( map . entrySet ( ) . contains ( Maps . immutableEntry ( Foo . X , <int> ) ) ) ; assertTrue ( map . entrySet ( ) . contains ( Maps . immutableEntry ( Foo . Y , new Integer ( <int> ) ) ) ) ; assertFalse ( map . entrySet ( ) . contains ( Maps . immutableEntry ( Foo . X , <int> ) ) ) ; assertFalse ( map . entrySet ( ) . contains ( Maps . immutableEntry ( Foo . T , <int> ) ) ) ; } public void testEntry_setValue ( ) { WellBehavedMap < Foo , Integer > map = WellBehavedMap . wrap ( new EnumMap < Foo , Integer > ( Foo . class ) ) ; map . putAll ( ImmutableMap . of ( Foo . X , <int> , Foo . Y , <int> , Foo . Z , <int> ) ) ; for ( Map . Entry < Foo , Integer > entry : map . entrySet ( ) ) { entry . setValue ( entry . getValue ( ) + <int> ) ; } assertEquals ( ImmutableMap . of ( Foo . X , <int> , Foo . Y , <int> , Foo . Z , <int> ) , map ) ; } public void testEntriesAreMutableAndConsistent ( ) { WellBehavedMap < Foo , Integer > map = WellBehavedMap . wrap ( new EnumMap < Foo , Integer > ( Foo . class ) ) ; map . putAll ( ImmutableMap . of ( Foo . X , <int> ) ) ; Map . Entry < Foo , Integer > entry1 = Iterables . getOnlyElement ( map . entrySet ( ) ) ; Map . Entry < Foo , Integer > entry2 = Iterables . getOnlyElement ( map . entrySet ( ) ) ; assertNotSame ( entry1 , entry2 ) ; Set < Map . Entry < Foo , Integer > > entrySet = map . entrySet ( ) ; assertTrue ( entrySet . contains ( entry1 ) ) ; assertTrue ( entrySet . contains ( entry2 ) ) ; entry1 . setValue ( <int> ) ; assertEquals ( entry1 . getValue ( ) , entry2 . getValue ( ) ) ; assertTrue ( entrySet . contains ( entry1 ) ) ; assertTrue ( entrySet . contains ( entry2 ) ) ; } public void testEntrySet_remove ( ) { WellBehavedMap < Foo , Integer > map = WellBehavedMap . wrap ( new EnumMap < Foo , Integer > ( Foo . class ) ) ; map . putAll ( ImmutableMap . of ( Foo . X , <int> , Foo . Y , <int> , Foo . Z , <int> ) ) ; Set < Map . Entry < Foo , Integer > > entrySet = map . entrySet ( ) ; Map . Entry < Foo , Integer > entry = Maps . immutableEntry ( Foo . Y , <int> ) ; assertTrue ( entrySet . remove ( entry ) ) ; assertFalse ( map . containsKey ( Foo . Y ) ) ; assertNull ( map . get ( Foo . Y ) ) ; assertFalse ( entrySet . contains ( entry ) ) ; assertFalse ( entrySet . remove ( Maps . immutableEntry ( Foo . T , <int> ) ) ) ; assertFalse ( entrySet . remove ( Maps . immutableEntry ( Foo . Z , <int> ) ) ) ; } } 

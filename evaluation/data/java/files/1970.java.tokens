package com . google . common . util . concurrent . testing ; import com . google . common . annotations . Beta ; import com . google . common . collect . ImmutableList ; import com . google . common . primitives . Longs ; import com . google . common . util . concurrent . AbstractFuture ; import com . google . common . util . concurrent . AbstractListeningExecutorService ; import com . google . common . util . concurrent . ListenableScheduledFuture ; import com . google . common . util . concurrent . ListeningScheduledExecutorService ; import com . google . common . util . concurrent . MoreExecutors ; import java . util . List ; import java . util . concurrent . Callable ; import java . util . concurrent . Delayed ; import java . util . concurrent . ScheduledFuture ; import java . util . concurrent . TimeUnit ; @Beta public final class TestingExecutors { private TestingExecutors ( ) { } public static ListeningScheduledExecutorService noOpScheduledExecutor ( ) { return new NoOpScheduledExecutorService ( ) ; } public static SameThreadScheduledExecutorService sameThreadScheduledExecutor ( ) { return new SameThreadScheduledExecutorService ( ) ; } private static final class NoOpScheduledExecutorService extends AbstractListeningExecutorService implements ListeningScheduledExecutorService { private volatile boolean shutdown ; @Override public void shutdown ( ) { shutdown = true ; } @Override public List < Runnable > shutdownNow ( ) { shutdown ( ) ; return ImmutableList . of ( ) ; } @Override public boolean isShutdown ( ) { return shutdown ; } @Override public boolean isTerminated ( ) { return shutdown ; } @Override public boolean awaitTermination ( long timeout , TimeUnit unit ) { return true ; } @Override public void execute ( Runnable runnable ) { } @Override public < V > ListenableScheduledFuture < V > schedule ( Callable < V > callable , long delay , TimeUnit unit ) { return NeverScheduledFuture . create ( ) ; } @Override public ListenableScheduledFuture < ? > schedule ( Runnable command , long delay , TimeUnit unit ) { return NeverScheduledFuture . create ( ) ; } @Override public ListenableScheduledFuture < ? > scheduleAtFixedRate ( Runnable command , long initialDelay , long period , TimeUnit unit ) { return NeverScheduledFuture . create ( ) ; } @Override public ListenableScheduledFuture < ? > scheduleWithFixedDelay ( Runnable command , long initialDelay , long delay , TimeUnit unit ) { return NeverScheduledFuture . create ( ) ; } private static class NeverScheduledFuture < V > extends AbstractFuture < V > implements ListenableScheduledFuture < V > { static < V > NeverScheduledFuture < V > create ( ) { return new NeverScheduledFuture < V > ( ) ; } @Override public long getDelay ( TimeUnit unit ) { return Long . MAX_VALUE ; } @Override public int compareTo ( Delayed other ) { return Longs . compare ( getDelay ( TimeUnit . NANOSECONDS ) , other . getDelay ( TimeUnit . NANOSECONDS ) ) ; } } } }
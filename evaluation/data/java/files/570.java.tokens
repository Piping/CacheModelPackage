package org . elasticsearch . cloud . aws . blobstore ; import com . amazonaws . services . s3 . model . AmazonS3Exception ; import com . amazonaws . services . s3 . model . PartETag ; import com . carrotsearch . randomizedtesting . RandomizedTest ; import org . elasticsearch . common . io . Streams ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . List ; public class MockDefaultS3OutputStream extends DefaultS3OutputStream { private ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; private boolean initialized = false ; private boolean completed = false ; private boolean aborted = false ; private int numberOfUploadRequests = <int> ; public MockDefaultS3OutputStream ( int bufferSizeInBytes ) { super ( null , <str> , <str> , bufferSizeInBytes , <int> , false ) ; } @Override protected void doUpload ( S3BlobStore blobStore , String bucketName , String blobName , InputStream is , int length , boolean serverSideEncryption ) throws AmazonS3Exception { try { long copied = Streams . copy ( is , out ) ; if ( copied ! = length ) { throw new AmazonS3Exception ( <str> ) ; } numberOfUploadRequests + + ; } catch ( IOException e ) { throw new AmazonS3Exception ( e . getMessage ( ) ) ; } } @Override protected String doInitialize ( S3BlobStore blobStore , String bucketName , String blobName , boolean serverSideEncryption ) { initialized = true ; return RandomizedTest . randomAsciiOfLength ( <int> ) ; } @Override protected PartETag doUploadMultipart ( S3BlobStore blobStore , String bucketName , String blobName , String uploadId , InputStream is , int length , boolean lastPart ) throws AmazonS3Exception { try { long copied = Streams . copy ( is , out ) ; if ( copied ! = length ) { throw new AmazonS3Exception ( <str> ) ; } return new PartETag ( numberOfUploadRequests + + , RandomizedTest . randomAsciiOfLength ( <int> ) ) ; } catch ( IOException e ) { throw new AmazonS3Exception ( e . getMessage ( ) ) ; } } @Override protected void doCompleteMultipart ( S3BlobStore blobStore , String bucketName , String blobName , String uploadId , List < PartETag > parts ) throws AmazonS3Exception { completed = true ; } @Override protected void doAbortMultipart ( S3BlobStore blobStore , String bucketName , String blobName , String uploadId ) throws AmazonS3Exception { aborted = true ; } public int getNumberOfUploadRequests ( ) { return numberOfUploadRequests ; } public boolean isMultipart ( ) { return ( numberOfUploadRequests > <int> ) & & initialized & & completed & & ! aborted ; } public byte [ ] toByteArray ( ) { return out . toByteArray ( ) ; } } 

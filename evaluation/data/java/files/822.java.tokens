package com . google . common . testing ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import junit . framework . TestCase ; @GwtCompatible public class TearDownStackTest extends TestCase { private TearDownStack tearDownStack = new TearDownStack ( ) ; public void testSingleTearDown ( ) throws Exception { final TearDownStack stack = buildTearDownStack ( ) ; final SimpleTearDown tearDown = new SimpleTearDown ( ) ; stack . addTearDown ( tearDown ) ; assertEquals ( false , tearDown . ran ) ; stack . runTearDown ( ) ; assertEquals ( <str> , true , tearDown . ran ) ; } public void testMultipleTearDownsHappenInOrder ( ) throws Exception { final TearDownStack stack = buildTearDownStack ( ) ; final SimpleTearDown tearDownOne = new SimpleTearDown ( ) ; stack . addTearDown ( tearDownOne ) ; final Callback callback = new Callback ( ) { @Override public void run ( ) { assertEquals ( <str> , false , tearDownOne . ran ) ; } } ; final SimpleTearDown tearDownTwo = new SimpleTearDown ( callback ) ; stack . addTearDown ( tearDownTwo ) ; assertEquals ( false , tearDownOne . ran ) ; assertEquals ( false , tearDownTwo . ran ) ; stack . runTearDown ( ) ; assertEquals ( <str> , true , tearDownOne . ran ) ; assertEquals ( <str> , true , tearDownTwo . ran ) ; } public void testThrowingTearDown ( ) throws Exception { final TearDownStack stack = buildTearDownStack ( ) ; final ThrowingTearDown tearDownOne = new ThrowingTearDown ( <str> ) ; stack . addTearDown ( tearDownOne ) ; final ThrowingTearDown tearDownTwo = new ThrowingTearDown ( <str> ) ; stack . addTearDown ( tearDownTwo ) ; assertEquals ( false , tearDownOne . ran ) ; assertEquals ( false , tearDownTwo . ran ) ; try { stack . runTearDown ( ) ; fail ( <str> ) ; } catch ( ClusterException expected ) { assertThat ( expected . getCause ( ) ) . hasMessage ( <str> ) ; } catch ( RuntimeException e ) { throw new RuntimeException ( <str> + e . getClass ( ) . getName ( ) , e ) ; } assertEquals ( true , tearDownOne . ran ) ; assertEquals ( true , tearDownTwo . ran ) ; } @Override public final void runBare ( ) throws Throwable { try { setUp ( ) ; runTest ( ) ; } finally { tearDown ( ) ; } } @Override protected void tearDown ( ) { tearDownStack . runTearDown ( ) ; } private TearDownStack buildTearDownStack ( ) { final TearDownStack result = new TearDownStack ( ) ; tearDownStack . addTearDown ( new TearDown ( ) { @Override public void tearDown ( ) throws Exception { assertEquals ( <str> , <int> , result . stack . size ( ) ) ; } } ) ; return result ; } private static final class ThrowingTearDown implements TearDown { private final String id ; boolean ran = false ; ThrowingTearDown ( String id ) { this . id = id ; } @Override public void tearDown ( ) throws Exception { ran = true ; throw new RuntimeException ( id ) ; } } private static final class SimpleTearDown implements TearDown { boolean ran = false ; Callback callback = null ; public SimpleTearDown ( ) { } public SimpleTearDown ( Callback callback ) { this . callback = callback ; } @Override public void tearDown ( ) throws Exception { if ( callback ! = null ) { callback . run ( ) ; } ran = true ; } } private interface Callback { void run ( ) ; } } 

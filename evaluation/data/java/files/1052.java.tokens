package rx . exceptions ; import java . io . PrintStream ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . LinkedHashSet ; import java . util . List ; import java . util . Set ; public final class CompositeException extends RuntimeException { private static final long serialVersionUID = <int> ; private final List < Throwable > exceptions ; private final String message ; public CompositeException ( String messagePrefix , Collection < ? extends Throwable > errors ) { Set < Throwable > deDupedExceptions = new LinkedHashSet < Throwable > ( ) ; List < Throwable > _exceptions = new ArrayList < Throwable > ( ) ; if ( errors ! = null ) { for ( Throwable ex : errors ) { if ( ex instanceof CompositeException ) { deDupedExceptions . addAll ( ( ( CompositeException ) ex ) . getExceptions ( ) ) ; } else if ( ex ! = null ) { deDupedExceptions . add ( ex ) ; } else { deDupedExceptions . add ( new NullPointerException ( ) ) ; } } } else { deDupedExceptions . add ( new NullPointerException ( ) ) ; } _exceptions . addAll ( deDupedExceptions ) ; this . exceptions = Collections . unmodifiableList ( _exceptions ) ; this . message = exceptions . size ( ) + <str> ; } public CompositeException ( Collection < ? extends Throwable > errors ) { this ( null , errors ) ; } public List < Throwable > getExceptions ( ) { return exceptions ; } @Override public String getMessage ( ) { return message ; } private Throwable cause = null ; @Override public synchronized Throwable getCause ( ) { if ( cause = = null ) { CompositeExceptionCausalChain _cause = new CompositeExceptionCausalChain ( ) ; Set < Throwable > seenCauses = new HashSet < Throwable > ( ) ; Throwable chain = _cause ; for ( Throwable e : exceptions ) { if ( seenCauses . contains ( e ) ) { continue ; } seenCauses . add ( e ) ; List < Throwable > listOfCauses = getListOfCauses ( e ) ; for ( Throwable child : listOfCauses ) { if ( seenCauses . contains ( child ) ) { e = new RuntimeException ( <str> ) ; continue ; } seenCauses . add ( child ) ; } try { chain . initCause ( e ) ; } catch ( Throwable t ) { } chain = chain . getCause ( ) ; } cause = _cause ; } return cause ; } @Override public void printStackTrace ( ) { printStackTrace ( System . err ) ; } @Override public void printStackTrace ( PrintStream s ) { printStackTrace ( new WrappedPrintStream ( s ) ) ; } @Override public void printStackTrace ( PrintWriter s ) { printStackTrace ( new WrappedPrintWriter ( s ) ) ; } private void printStackTrace ( PrintStreamOrWriter s ) { StringBuilder bldr = new StringBuilder ( ) ; bldr . append ( this ) . append ( <str> ) ; for ( StackTraceElement myStackElement : getStackTrace ( ) ) { bldr . append ( <str> ) . append ( myStackElement ) . append ( <str> ) ; } int i = <int> ; for ( Throwable ex : exceptions ) { bldr . append ( <str> ) . append ( i ) . append ( <str> ) . append ( <str> ) ; appendStackTrace ( bldr , ex , <str> ) ; i + + ; } synchronized ( s . lock ( ) ) { s . println ( bldr . toString ( ) ) ; } } private void appendStackTrace ( StringBuilder bldr , Throwable ex , String prefix ) { bldr . append ( prefix ) . append ( ex ) . append ( <str> ) ; for ( StackTraceElement stackElement : ex . getStackTrace ( ) ) { bldr . append ( <str> ) . append ( stackElement ) . append ( <str> ) ; } if ( ex . getCause ( ) ! = null ) { bldr . append ( <str> ) ; appendStackTrace ( bldr , ex . getCause ( ) , <str> ) ; } } private abstract static class PrintStreamOrWriter { abstract Object lock ( ) ; abstract void println ( Object o ) ; } private static class WrappedPrintStream extends PrintStreamOrWriter { private final PrintStream printStream ; WrappedPrintStream ( PrintStream printStream ) { this . printStream = printStream ; } @Override Object lock ( ) { return printStream ; } @Override void println ( Object o ) { printStream . println ( o ) ; } } private static class WrappedPrintWriter extends PrintStreamOrWriter { private final PrintWriter printWriter ; WrappedPrintWriter ( PrintWriter printWriter ) { this . printWriter = printWriter ; } @Override Object lock ( ) { return printWriter ; } @Override void println ( Object o ) { printWriter . println ( o ) ; } } final static class CompositeExceptionCausalChain extends RuntimeException { private static final long serialVersionUID = <int> ; static String MESSAGE = <str> ; @Override public String getMessage ( ) { return MESSAGE ; } } private final List < Throwable > getListOfCauses ( Throwable ex ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; Throwable root = ex . getCause ( ) ; if ( root = = null ) { return list ; } else { while ( true ) { list . add ( root ) ; if ( root . getCause ( ) = = null ) { return list ; } else { root = root . getCause ( ) ; } } } } } 

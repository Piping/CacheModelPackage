package org . gradle . util ; import net . jcip . annotations . ThreadSafe ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . Factory ; import org . gradle . internal . featurelifecycle . DeprecatedFeatureUsage ; import org . gradle . internal . featurelifecycle . LoggingDeprecatedFeatureHandler ; import org . gradle . internal . featurelifecycle . UsageLocationReporter ; import java . util . Collections ; import java . util . HashSet ; import java . util . Set ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; @ThreadSafe public class SingleMessageLogger { private static final Logger LOGGER = Logging . getLogger ( DeprecationLogger . class ) ; private static final Set < String > FEATURES = Collections . synchronizedSet ( new HashSet < String > ( ) ) ; private static final ThreadLocal < Boolean > ENABLED = new ThreadLocal < Boolean > ( ) { @Override protected Boolean initialValue ( ) { return true ; } } ; public static final String ORG_GRADLE_DEPRECATION_TRACE_PROPERTY_NAME = <str> ; public static final String INCUBATION_MESSAGE = <str> ; private static final Lock LOCK = new ReentrantLock ( ) ; private static LoggingDeprecatedFeatureHandler handler = new LoggingDeprecatedFeatureHandler ( ) ; private static String deprecationMessage ; public static String getDeprecationMessage ( ) { LOCK . lock ( ) ; try { if ( deprecationMessage = = null ) { String messageBase = <str> ; GradleVersion currentVersion = GradleVersion . current ( ) ; String when = String . format ( <str> , currentVersion . getNextMajor ( ) . getVersion ( ) ) ; deprecationMessage = String . format ( <str> , messageBase , when ) ; } return deprecationMessage ; } finally { LOCK . unlock ( ) ; } } public static void reset ( ) { FEATURES . clear ( ) ; LOCK . lock ( ) ; try { handler = new LoggingDeprecatedFeatureHandler ( ) ; } finally { LOCK . unlock ( ) ; } } public static void useLocationReporter ( UsageLocationReporter reporter ) { LOCK . lock ( ) ; try { handler . setLocationReporter ( reporter ) ; } finally { LOCK . unlock ( ) ; } } public static void nagUserOfReplacedPlugin ( String pluginName , String replacement ) { nagUserWith ( String . format ( <str> , pluginName , getDeprecationMessage ( ) , replacement ) ) ; } public static void nagUserOfReplacedTask ( String taskName , String replacement ) { nagUserWith ( String . format ( <str> , taskName , getDeprecationMessage ( ) , replacement ) ) ; } public static void nagUserOfReplacedTaskType ( String taskName , String replacement ) { nagUserWith ( String . format ( <str> , taskName , getDeprecationMessage ( ) , replacement ) ) ; } public static void nagUserOfReplacedMethod ( String methodName , String replacement ) { nagUserWith ( String . format ( <str> , methodName , getDeprecationMessage ( ) , replacement ) ) ; } public static void nagUserOfReplacedProperty ( String propertyName , String replacement ) { nagUserWith ( String . format ( <str> , propertyName , getDeprecationMessage ( ) , replacement ) ) ; } public static void nagUserOfDiscontinuedMethod ( String methodName ) { nagUserWith ( String . format ( <str> , methodName , getDeprecationMessage ( ) ) ) ; } public static void nagUserOfDiscontinuedProperty ( String propertyName , String advice ) { nagUserWith ( String . format ( <str> , propertyName , getDeprecationMessage ( ) , advice ) ) ; } public static void nagUserOfReplacedNamedParameter ( String parameterName , String replacement ) { nagUserWith ( String . format ( <str> , parameterName , getDeprecationMessage ( ) , replacement ) ) ; } public static void nagUserWith ( String message ) { if ( isEnabled ( ) ) { LOCK . lock ( ) ; try { handler . deprecatedFeatureUsed ( new DeprecatedFeatureUsage ( message , SingleMessageLogger . class ) ) ; } finally { LOCK . unlock ( ) ; } } } public static void nagUserOfDeprecated ( String thing ) { nagUserWith ( String . format ( <str> , thing , getDeprecationMessage ( ) ) ) ; } public static void nagUserOfDeprecated ( String thing , String explanation ) { nagUserWith ( String . format ( <str> , thing , getDeprecationMessage ( ) , explanation ) ) ; } public static void nagUserOfDeprecatedBehaviour ( String behaviour ) { nagUserOfDeprecated ( String . format ( <str> , behaviour ) ) ; } public static < T > T whileDisabled ( Factory < T > factory ) { ENABLED . set ( false ) ; try { return factory . create ( ) ; } finally { ENABLED . set ( true ) ; } } public static void whileDisabled ( Runnable action ) { ENABLED . set ( false ) ; try { action . run ( ) ; } finally { ENABLED . set ( true ) ; } } private static boolean isEnabled ( ) { return ENABLED . get ( ) ; } public static void incubatingFeatureUsed ( String incubatingFeature ) { if ( FEATURES . add ( incubatingFeature ) ) { LOGGER . lifecycle ( String . format ( INCUBATION_MESSAGE , incubatingFeature ) ) ; } } } 

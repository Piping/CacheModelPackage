package io . netty . microbench . util ; import static org . junit . Assert . assertNull ; import io . netty . channel . EventLoop ; import io . netty . util . concurrent . AbstractEventExecutor ; import io . netty . util . concurrent . Future ; import io . netty . util . concurrent . ProgressivePromise ; import io . netty . util . concurrent . Promise ; import java . util . concurrent . TimeUnit ; import org . openjdk . jmh . annotations . Fork ; @Fork ( AbstractSharedExecutorMicrobenchmark . DEFAULT_FORKS ) public class AbstractSharedExecutorMicrobenchmark extends AbstractMicrobenchmarkBase { protected static final int DEFAULT_FORKS = <int> ; protected static final String [ ] JVM_ARGS ; static { final String [ ] customArgs = { <str> , <str> , <str> , <str> , <str> } ; JVM_ARGS = new String [ BASE_JVM_ARGS . length + customArgs . length ] ; System . arraycopy ( BASE_JVM_ARGS , <int> , JVM_ARGS , <int> , BASE_JVM_ARGS . length ) ; System . arraycopy ( customArgs , <int> , JVM_ARGS , BASE_JVM_ARGS . length , customArgs . length ) ; } public static void executor ( EventLoop eventLoop ) { DelegateHarnessExecutor . executor ( eventLoop ) ; } public static final class DelegateHarnessExecutor extends AbstractEventExecutor { private static EventLoop executor ; public DelegateHarnessExecutor ( int maxThreads , String prefix ) { System . out . println ( <str> + this ) ; } public static void executor ( EventLoop service ) { executor = service ; } @Override public boolean inEventLoop ( ) { return executor . inEventLoop ( ) ; } @Override public boolean inEventLoop ( Thread thread ) { return executor . inEventLoop ( thread ) ; } @Override public Future < ? > shutdownGracefully ( long quietPeriod , long timeout , TimeUnit unit ) { return executor . shutdownGracefully ( quietPeriod , timeout , unit ) ; } @Override public Future < ? > terminationFuture ( ) { return executor . terminationFuture ( ) ; } @Override @Deprecated public void shutdown ( ) { executor . shutdown ( ) ; } @Override public boolean isShuttingDown ( ) { return executor . isShuttingDown ( ) ; } @Override public boolean isShutdown ( ) { return executor . isShutdown ( ) ; } @Override public boolean isTerminated ( ) { return executor . isTerminated ( ) ; } @Override public boolean awaitTermination ( long timeout , TimeUnit unit ) { try { return executor . awaitTermination ( timeout , unit ) ; } catch ( InterruptedException e ) { handleUnexpectedException ( e ) ; } return false ; } @Override public void execute ( Runnable command ) { executor . execute ( command ) ; } @Override public < V > Promise < V > newPromise ( ) { return executor . newPromise ( ) ; } @Override public < V > ProgressivePromise < V > newProgressivePromise ( ) { return executor . newProgressivePromise ( ) ; } } @Override protected String [ ] jvmArgs ( ) { return JVM_ARGS ; } public static void handleUnexpectedException ( Throwable t ) { assertNull ( t ) ; } } 

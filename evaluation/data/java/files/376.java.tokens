package org . gradle . launcher . daemon . client ; import org . gradle . api . internal . DocumentationRegistry ; import org . gradle . api . internal . specs . ExplainingSpec ; import org . gradle . api . internal . specs . ExplainingSpecs ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . invocation . BuildAction ; import org . gradle . initialization . BuildRequestContext ; import org . gradle . internal . concurrent . ExecutorFactory ; import org . gradle . internal . id . IdGenerator ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . launcher . daemon . context . DaemonContext ; import org . gradle . launcher . daemon . protocol . Build ; import org . gradle . launcher . daemon . protocol . BuildAndStop ; import org . gradle . launcher . exec . BuildActionParameters ; import org . gradle . logging . internal . OutputEventListener ; import java . io . InputStream ; public class SingleUseDaemonClient extends DaemonClient { public static final String MESSAGE = <str> ; private static final Logger LOGGER = Logging . getLogger ( SingleUseDaemonClient . class ) ; private final DocumentationRegistry documentationRegistry ; public SingleUseDaemonClient ( DaemonConnector connector , OutputEventListener outputEventListener , ExplainingSpec < DaemonContext > compatibilitySpec , InputStream buildStandardInput , ExecutorFactory executorFactory , IdGenerator < ? > idGenerator , DocumentationRegistry documentationRegistry ) { super ( connector , outputEventListener , compatibilitySpec , buildStandardInput , executorFactory , idGenerator ) ; this . documentationRegistry = documentationRegistry ; } @Override public Object execute ( BuildAction action , BuildRequestContext buildRequestContext , BuildActionParameters parameters , ServiceRegistry contextServices ) { LOGGER . lifecycle ( <str> , MESSAGE , documentationRegistry . getDocumentationFor ( <str> ) ) ; Build build = new BuildAndStop ( getIdGenerator ( ) . generateId ( ) , action , buildRequestContext . getClient ( ) , buildRequestContext . getBuildTimeClock ( ) . getStartTime ( ) , parameters ) ; DaemonClientConnection daemonConnection = getConnector ( ) . startDaemon ( ExplainingSpecs . < DaemonContext > satisfyAll ( ) ) ; return executeBuild ( build , daemonConnection , buildRequestContext . getCancellationToken ( ) , buildRequestContext . getEventConsumer ( ) ) ; } } 

package org . apache . cassandra . thrift ; import java . net . InetSocketAddress ; import java . util . concurrent . SynchronousQueue ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import com . thinkaurelius . thrift . Message ; import com . thinkaurelius . thrift . TDisruptorServer ; import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; import org . apache . cassandra . concurrent . NamedThreadFactory ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . thrift . server . TServer ; import org . apache . thrift . transport . TNonblockingServerTransport ; import org . apache . thrift . transport . TNonblockingSocket ; import org . apache . thrift . transport . TTransportException ; public class THsHaDisruptorServer extends TDisruptorServer { private static final Logger logger = LoggerFactory . getLogger ( THsHaDisruptorServer . class . getName ( ) ) ; public THsHaDisruptorServer ( Args args ) { super ( args ) ; logger . info ( <str> , this ) ; } @Override protected void beforeInvoke ( Message buffer ) { TNonblockingSocket socket = ( TNonblockingSocket ) buffer . transport ; ThriftSessionManager . instance . setCurrentSocket ( socket . getSocketChannel ( ) . socket ( ) . getRemoteSocketAddress ( ) ) ; } public void beforeClose ( Message buffer ) { TNonblockingSocket socket = ( TNonblockingSocket ) buffer . transport ; ThriftSessionManager . instance . connectionComplete ( socket . getSocketChannel ( ) . socket ( ) . getRemoteSocketAddress ( ) ) ; } public static class Factory implements TServerFactory { @SuppressWarnings ( <str> ) public TServer buildTServer ( Args args ) { if ( DatabaseDescriptor . getClientEncryptionOptions ( ) . enabled ) throw new RuntimeException ( <str> ) ; final InetSocketAddress addr = args . addr ; TNonblockingServerTransport serverTransport ; try { serverTransport = new TCustomNonblockingServerSocket ( addr , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; } catch ( TTransportException e ) { throw new RuntimeException ( String . format ( <str> , addr . getAddress ( ) , addr . getPort ( ) ) , e ) ; } ThreadPoolExecutor invoker = new JMXEnabledThreadPoolExecutor ( DatabaseDescriptor . getRpcMinThreads ( ) , DatabaseDescriptor . getRpcMaxThreads ( ) , <int> , TimeUnit . SECONDS , new SynchronousQueue < Runnable > ( ) , new NamedThreadFactory ( <str> ) , <str> ) ; com . thinkaurelius . thrift . util . TBinaryProtocol . Factory protocolFactory = new com . thinkaurelius . thrift . util . TBinaryProtocol . Factory ( true , true ) ; TDisruptorServer . Args serverArgs = new TDisruptorServer . Args ( serverTransport ) . useHeapBasedAllocation ( true ) . inputTransportFactory ( args . inTransportFactory ) . outputTransportFactory ( args . outTransportFactory ) . inputProtocolFactory ( protocolFactory ) . outputProtocolFactory ( protocolFactory ) . processor ( args . processor ) . maxFrameSizeInBytes ( DatabaseDescriptor . getThriftFramedTransportSize ( ) ) . invocationExecutor ( invoker ) . alwaysReallocateBuffers ( true ) ; return new THsHaDisruptorServer ( serverArgs ) ; } } }
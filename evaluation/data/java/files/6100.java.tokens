package rx . internal . operators ; import java . util . ArrayList ; import java . util . List ; import rx . Observable ; import rx . Observable . Operator ; import rx . exceptions . Exceptions ; import rx . Observer ; import rx . Subscriber ; import rx . functions . Func0 ; import rx . observers . SerializedSubscriber ; import rx . observers . Subscribers ; public final class OperatorBufferWithSingleObservable < T , TClosing > implements Operator < List < T > , T > { final Func0 < ? extends Observable < ? extends TClosing > > bufferClosingSelector ; final int initialCapacity ; public OperatorBufferWithSingleObservable ( Func0 < ? extends Observable < ? extends TClosing > > bufferClosingSelector , int initialCapacity ) { this . bufferClosingSelector = bufferClosingSelector ; this . initialCapacity = initialCapacity ; } public OperatorBufferWithSingleObservable ( final Observable < ? extends TClosing > bufferClosing , int initialCapacity ) { this . bufferClosingSelector = new Func0 < Observable < ? extends TClosing > > ( ) { @Override public Observable < ? extends TClosing > call ( ) { return bufferClosing ; } } ; this . initialCapacity = initialCapacity ; } @Override public Subscriber < ? super T > call ( final Subscriber < ? super List < T > > child ) { Observable < ? extends TClosing > closing ; try { closing = bufferClosingSelector . call ( ) ; } catch ( Throwable t ) { Exceptions . throwOrReport ( t , child ) ; return Subscribers . empty ( ) ; } final BufferingSubscriber bsub = new BufferingSubscriber ( new SerializedSubscriber < List < T > > ( child ) ) ; Subscriber < TClosing > closingSubscriber = new Subscriber < TClosing > ( ) { @Override public void onNext ( TClosing t ) { bsub . emit ( ) ; } @Override public void onError ( Throwable e ) { bsub . onError ( e ) ; } @Override public void onCompleted ( ) { bsub . onCompleted ( ) ; } } ; child . add ( closingSubscriber ) ; child . add ( bsub ) ; closing . unsafeSubscribe ( closingSubscriber ) ; return bsub ; } final class BufferingSubscriber extends Subscriber < T > { final Subscriber < ? super List < T > > child ; List < T > chunk ; boolean done ; public BufferingSubscriber ( Subscriber < ? super List < T > > child ) { this . child = child ; this . chunk = new ArrayList < T > ( initialCapacity ) ; } @Override public void onNext ( T t ) { synchronized ( this ) { if ( done ) { return ; } chunk . add ( t ) ; } } @Override public void onError ( Throwable e ) { synchronized ( this ) { if ( done ) { return ; } done = true ; chunk = null ; } child . onError ( e ) ; unsubscribe ( ) ; } @Override public void onCompleted ( ) { try { List < T > toEmit ; synchronized ( this ) { if ( done ) { return ; } done = true ; toEmit = chunk ; chunk = null ; } child . onNext ( toEmit ) ; } catch ( Throwable t ) { Exceptions . throwOrReport ( t , child ) ; return ; } child . onCompleted ( ) ; unsubscribe ( ) ; } void emit ( ) { List < T > toEmit ; synchronized ( this ) { if ( done ) { return ; } toEmit = chunk ; chunk = new ArrayList < T > ( initialCapacity ) ; } try { child . onNext ( toEmit ) ; } catch ( Throwable t ) { unsubscribe ( ) ; synchronized ( this ) { if ( done ) { return ; } done = true ; } Exceptions . throwOrReport ( t , child ) ; } } } }
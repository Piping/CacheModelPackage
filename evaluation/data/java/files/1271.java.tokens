package org . elasticsearch . script ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . script . ScriptService . ScriptType ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import java . util . TreeMap ; import static java . util . Collections . unmodifiableMap ; public class ScriptModes { static final String SCRIPT_SETTINGS_PREFIX = <str> ; static final String ENGINE_SETTINGS_PREFIX = <str> ; final Map < String , ScriptMode > scriptModes ; ScriptModes ( Map < String , ScriptEngineService > scriptEngines , ScriptContextRegistry scriptContextRegistry , Settings settings ) { Map < String , ScriptEngineService > filteredEngines = new HashMap < > ( scriptEngines ) ; filteredEngines . remove ( NativeScriptEngineService . NAME ) ; this . scriptModes = buildScriptModeSettingsMap ( settings , filteredEngines , scriptContextRegistry ) ; } private static Map < String , ScriptMode > buildScriptModeSettingsMap ( Settings settings , Map < String , ScriptEngineService > scriptEngines , ScriptContextRegistry scriptContextRegistry ) { HashMap < String , ScriptMode > scriptModesMap = new HashMap < > ( ) ; addGlobalScriptTypeModes ( scriptEngines . keySet ( ) , scriptContextRegistry , ScriptType . FILE , ScriptMode . ON , scriptModesMap ) ; addGlobalScriptTypeModes ( scriptEngines . keySet ( ) , scriptContextRegistry , ScriptType . INDEXED , ScriptMode . SANDBOX , scriptModesMap ) ; addGlobalScriptTypeModes ( scriptEngines . keySet ( ) , scriptContextRegistry , ScriptType . INLINE , ScriptMode . SANDBOX , scriptModesMap ) ; processSourceBasedGlobalSettings ( settings , scriptEngines , scriptContextRegistry , scriptModesMap ) ; processOperationBasedGlobalSettings ( settings , scriptEngines , scriptContextRegistry , scriptModesMap ) ; processEngineSpecificSettings ( settings , scriptEngines , scriptContextRegistry , scriptModesMap ) ; return unmodifiableMap ( scriptModesMap ) ; } private static void processSourceBasedGlobalSettings ( Settings settings , Map < String , ScriptEngineService > scriptEngines , ScriptContextRegistry scriptContextRegistry , Map < String , ScriptMode > scriptModes ) { for ( ScriptType scriptType : ScriptType . values ( ) ) { String scriptTypeSetting = settings . get ( SCRIPT_SETTINGS_PREFIX + scriptType ) ; if ( Strings . hasLength ( scriptTypeSetting ) ) { ScriptMode scriptTypeMode = ScriptMode . parse ( scriptTypeSetting ) ; addGlobalScriptTypeModes ( scriptEngines . keySet ( ) , scriptContextRegistry , scriptType , scriptTypeMode , scriptModes ) ; } } } private static void processOperationBasedGlobalSettings ( Settings settings , Map < String , ScriptEngineService > scriptEngines , ScriptContextRegistry scriptContextRegistry , Map < String , ScriptMode > scriptModes ) { for ( ScriptContext scriptContext : scriptContextRegistry . scriptContexts ( ) ) { ScriptMode scriptMode = getScriptContextMode ( settings , SCRIPT_SETTINGS_PREFIX , scriptContext ) ; if ( scriptMode ! = null ) { addGlobalScriptContextModes ( scriptEngines . keySet ( ) , scriptContext , scriptMode , scriptModes ) ; } } } private static void processEngineSpecificSettings ( Settings settings , Map < String , ScriptEngineService > scriptEngines , ScriptContextRegistry scriptContextRegistry , Map < String , ScriptMode > scriptModes ) { Map < String , Settings > langGroupedSettings = settings . getGroups ( ENGINE_SETTINGS_PREFIX , true ) ; for ( Map . Entry < String , Settings > langSettings : langGroupedSettings . entrySet ( ) ) { ScriptEngineService scriptEngineService = scriptEngines . get ( langSettings . getKey ( ) ) ; if ( scriptEngineService ! = null ) { for ( ScriptType scriptType : ScriptType . values ( ) ) { String scriptTypePrefix = scriptType + <str> ; for ( ScriptContext scriptContext : scriptContextRegistry . scriptContexts ( ) ) { ScriptMode scriptMode = getScriptContextMode ( langSettings . getValue ( ) , scriptTypePrefix , scriptContext ) ; if ( scriptMode ! = null ) { addScriptMode ( scriptEngineService , scriptType , scriptContext , scriptMode , scriptModes ) ; } } } } } } private static ScriptMode getScriptContextMode ( Settings settings , String prefix , ScriptContext scriptContext ) { String settingValue = settings . get ( prefix + scriptContext . getKey ( ) ) ; if ( Strings . hasLength ( settingValue ) ) { return ScriptMode . parse ( settingValue ) ; } return null ; } private static void addGlobalScriptTypeModes ( Set < String > langs , ScriptContextRegistry scriptContextRegistry , ScriptType scriptType , ScriptMode scriptMode , Map < String , ScriptMode > scriptModes ) { for ( String lang : langs ) { for ( ScriptContext scriptContext : scriptContextRegistry . scriptContexts ( ) ) { addScriptMode ( lang , scriptType , scriptContext , scriptMode , scriptModes ) ; } } } private static void addGlobalScriptContextModes ( Set < String > langs , ScriptContext scriptContext , ScriptMode scriptMode , Map < String , ScriptMode > scriptModes ) { for ( String lang : langs ) { for ( ScriptType scriptType : ScriptType . values ( ) ) { addScriptMode ( lang , scriptType , scriptContext , scriptMode , scriptModes ) ; } } } private static void addScriptMode ( ScriptEngineService scriptEngineService , ScriptType scriptType , ScriptContext scriptContext , ScriptMode scriptMode , Map < String , ScriptMode > scriptModes ) { for ( String scriptEngineName : scriptEngineService . types ( ) ) { addScriptMode ( scriptEngineName , scriptType , scriptContext , scriptMode , scriptModes ) ; } } private static void addScriptMode ( String lang , ScriptType scriptType , ScriptContext scriptContext , ScriptMode scriptMode , Map < String , ScriptMode > scriptModes ) { scriptModes . put ( ENGINE_SETTINGS_PREFIX + <str> + lang + <str> + scriptType + <str> + scriptContext . getKey ( ) , scriptMode ) ; } public ScriptMode getScriptMode ( String lang , ScriptType scriptType , ScriptContext scriptContext ) { if ( NativeScriptEngineService . NAME . equals ( lang ) ) { return ScriptMode . ON ; } ScriptMode scriptMode = scriptModes . get ( ENGINE_SETTINGS_PREFIX + <str> + lang + <str> + scriptType + <str> + scriptContext . getKey ( ) ) ; if ( scriptMode = = null ) { throw new IllegalArgumentException ( <str> + lang + <str> + scriptType + <str> + scriptContext . getKey ( ) + <str> ) ; } return scriptMode ; } @Override public String toString ( ) { TreeMap < String , ScriptMode > scriptModesTreeMap = new TreeMap < > ( ) ; scriptModesTreeMap . putAll ( scriptModes ) ; StringBuilder stringBuilder = new StringBuilder ( ) ; for ( Map . Entry < String , ScriptMode > stringScriptModeEntry : scriptModesTreeMap . entrySet ( ) ) { stringBuilder . append ( stringScriptModeEntry . getKey ( ) ) . append ( <str> ) . append ( stringScriptModeEntry . getValue ( ) ) . append ( <str> ) ; } return stringBuilder . toString ( ) ; } } 

package io . netty . example . spdy . client ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . SimpleChannelInboundHandler ; import io . netty . example . http . snoop . HttpSnoopClientHandler ; import io . netty . handler . codec . http . HttpContent ; import io . netty . handler . codec . http . HttpUtil ; import io . netty . handler . codec . http . HttpObject ; import io . netty . handler . codec . http . HttpResponse ; import io . netty . handler . codec . http . LastHttpContent ; import io . netty . util . CharsetUtil ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . LinkedBlockingQueue ; public class HttpResponseClientHandler extends SimpleChannelInboundHandler < HttpObject > { private final BlockingQueue < ChannelFuture > queue = new LinkedBlockingQueue < ChannelFuture > ( ) ; @Override public void channelRead0 ( ChannelHandlerContext ctx , HttpObject msg ) throws Exception { if ( msg instanceof HttpResponse ) { HttpResponse response = ( HttpResponse ) msg ; System . out . println ( <str> + response . status ( ) ) ; System . out . println ( <str> + response . protocolVersion ( ) ) ; System . out . println ( ) ; if ( ! response . headers ( ) . isEmpty ( ) ) { for ( CharSequence name : response . headers ( ) . names ( ) ) { for ( CharSequence value : response . headers ( ) . getAll ( name ) ) { System . out . println ( <str> + name + <str> + value ) ; } } System . out . println ( ) ; } if ( HttpUtil . isTransferEncodingChunked ( response ) ) { System . out . println ( <str> ) ; } else { System . out . println ( <str> ) ; } } if ( msg instanceof HttpContent ) { HttpContent content = ( HttpContent ) msg ; System . out . print ( content . content ( ) . toString ( CharsetUtil . UTF_8 ) ) ; System . out . flush ( ) ; if ( content instanceof LastHttpContent ) { System . out . println ( <str> ) ; queue . add ( ctx . channel ( ) . newSucceededFuture ( ) ) ; } } } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { queue . add ( ctx . channel ( ) . newFailedFuture ( cause ) ) ; cause . printStackTrace ( ) ; ctx . close ( ) ; } public BlockingQueue < ChannelFuture > queue ( ) { return queue ; } }
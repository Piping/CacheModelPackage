package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . TestListGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . List ; @GwtCompatible ( emulated = true ) public class LongArrayAsListTest extends TestCase { private static List < Long > asList ( Long [ ] values ) { long [ ] temp = new long [ values . length ] ; for ( int i = <int> ; i < values . length ; i + + ) { temp [ i ] = checkNotNull ( values [ i ] ) ; } return Longs . asList ( temp ) ; } @GwtIncompatible ( <str> ) public static Test suite ( ) { List < ListTestSuiteBuilder < Long > > builders = ImmutableList . of ( ListTestSuiteBuilder . using ( new LongsAsListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new LongsAsListHeadSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new LongsAsListTailSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new LongsAsListMiddleSubListGenerator ( ) ) . named ( <str> ) ) ; TestSuite suite = new TestSuite ( ) ; for ( ListTestSuiteBuilder < Long > builder : builders ) { suite . addTest ( builder . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . RESTRICTS_ELEMENTS , ListFeature . SUPPORTS_SET ) . createTestSuite ( ) ) ; } return suite ; } public static final class LongsAsListGenerator extends TestLongListGenerator { @Override protected List < Long > create ( Long [ ] elements ) { return asList ( elements ) ; } } public static final class LongsAsListHeadSubListGenerator extends TestLongListGenerator { @Override protected List < Long > create ( Long [ ] elements ) { Long [ ] suffix = { Long . MIN_VALUE , Long . MAX_VALUE } ; Long [ ] all = concat ( elements , suffix ) ; return asList ( all ) . subList ( <int> , elements . length ) ; } } public static final class LongsAsListTailSubListGenerator extends TestLongListGenerator { @Override protected List < Long > create ( Long [ ] elements ) { Long [ ] prefix = { ( long ) <int> , ( long ) <int> } ; Long [ ] all = concat ( prefix , elements ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } public static final class LongsAsListMiddleSubListGenerator extends TestLongListGenerator { @Override protected List < Long > create ( Long [ ] elements ) { Long [ ] prefix = { Long . MIN_VALUE , Long . MAX_VALUE } ; Long [ ] suffix = { ( long ) <int> , ( long ) <int> } ; Long [ ] all = concat ( concat ( prefix , elements ) , suffix ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } private static Long [ ] concat ( Long [ ] left , Long [ ] right ) { Long [ ] result = new Long [ left . length + right . length ] ; System . arraycopy ( left , <int> , result , <int> , left . length ) ; System . arraycopy ( right , <int> , result , left . length , right . length ) ; return result ; } public static abstract class TestLongListGenerator implements TestListGenerator < Long > { @Override public SampleElements < Long > samples ( ) { return new SampleLongs ( ) ; } @Override public List < Long > create ( Object . . . elements ) { Long [ ] array = new Long [ elements . length ] ; int i = <int> ; for ( Object e : elements ) { array [ i + + ] = ( Long ) e ; } return create ( array ) ; } protected abstract List < Long > create ( Long [ ] elements ) ; @Override public Long [ ] createArray ( int length ) { return new Long [ length ] ; } @Override public List < Long > order ( List < Long > insertionOrder ) { return insertionOrder ; } } public static class SampleLongs extends SampleElements < Long > { public SampleLongs ( ) { super ( ( long ) <int> , ( long ) <int> , ( long ) <int> , ( long ) <int> , ( long ) <int> ) ; } } } 

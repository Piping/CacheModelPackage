package org . eclipse . debug . ui . memory ; import java . io . UnsupportedEncodingException ; import java . math . BigInteger ; import org . eclipse . debug . core . model . MemoryByte ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; abstract public class AbstractTextRendering extends AbstractTableRendering { private String fCodePage ; public AbstractTextRendering ( String renderingId ) { super ( renderingId ) ; } public AbstractTextRendering ( String renderingId , String codePage ) { super ( renderingId ) ; fCodePage = codePage ; } public void setCodePage ( String codePage ) { fCodePage = codePage ; } public String getCodePage ( ) { return fCodePage ; } @Override public String getString ( String dataType , BigInteger address , MemoryByte [ ] data ) { try { String paddedStr = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( IDebugUIConstants . PREF_PADDED_STR ) ; if ( fCodePage = = null ) return IInternalDebugCoreConstants . EMPTY_STRING ; boolean [ ] invalid = new boolean [ data . length ] ; boolean hasInvalid = false ; byte byteArray [ ] = new byte [ data . length ] ; for ( int i = <int> ; i < data . length ; i + + ) { if ( ! data [ i ] . isReadable ( ) ) { invalid [ i ] = true ; hasInvalid = true ; } byteArray [ i ] = data [ i ] . getValue ( ) ; } if ( hasInvalid ) { StringBuffer strBuf = new StringBuffer ( ) ; for ( int i = <int> ; i < data . length ; i + + ) { if ( invalid [ i ] ) strBuf . append ( paddedStr ) ; else strBuf . append ( new String ( new byte [ ] { byteArray [ i ] } , fCodePage ) ) ; } return strBuf . toString ( ) ; } return new String ( byteArray , fCodePage ) ; } catch ( UnsupportedEncodingException e ) { return <str> ; } } @Override public byte [ ] getBytes ( String dataType , BigInteger address , MemoryByte [ ] currentValues , String data ) { try { if ( fCodePage = = null ) return new byte [ <int> ] ; byte [ ] bytes = data . getBytes ( fCodePage ) ; return bytes ; } catch ( UnsupportedEncodingException e ) { return new byte [ <int> ] ; } } }
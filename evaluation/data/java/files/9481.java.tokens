package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . math . Rectangle ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Image ; import com . badlogic . gdx . scenes . scene2d . utils . Cullable ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . tests . utils . OrthoCamController ; import com . badlogic . gdx . utils . Align ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Scaling ; public class SimpleStageCullingTest extends GdxTest { private class CullableActor extends Image { final OrthographicCamera camera ; boolean visible = false ; public CullableActor ( String name , Texture texture , OrthographicCamera camera ) { super ( new TextureRegion ( texture ) ) ; setAlign ( Align . center ) ; setScaling ( Scaling . none ) ; this . camera = camera ; } public void draw ( Batch batch , float parentAlpha ) { if ( isCulled ( ) ) return ; super . draw ( batch , parentAlpha ) ; } Rectangle actorRect = new Rectangle ( ) ; Rectangle camRect = new Rectangle ( ) ; private boolean isCulled ( ) { float stageX = getX ( ) ; float stageY = getY ( ) ; Actor parent = this . getParent ( ) ; while ( parent ! = null ) { stageX + = parent . getX ( ) ; stageY + = parent . getY ( ) ; parent = parent . getParent ( ) ; } actorRect . set ( stageX , stageY , getWidth ( ) , getHeight ( ) ) ; camRect . set ( camera . position . x - camera . viewportWidth / <float> , camera . position . y - camera . viewportHeight / <float> , camera . viewportWidth , camera . viewportHeight ) ; visible = camRect . overlaps ( actorRect ) ; return ! visible ; } } OrthoCamController camController ; Stage stage ; Texture texture ; SpriteBatch batch ; BitmapFont font ; @Override public void create ( ) { stage = new Stage ( ) ; ; camController = new OrthoCamController ( ( OrthographicCamera ) stage . getCamera ( ) ) ; Gdx . input . setInputProcessor ( camController ) ; texture = new Texture ( Gdx . files . internal ( <str> ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { Actor img = new CullableActor ( <str> + i , texture , ( OrthographicCamera ) stage . getCamera ( ) ) ; img . setX ( ( float ) Math . random ( ) * <int> * <int> ) ; img . setY ( ( float ) Math . random ( ) * <int> * <int> ) ; stage . addActor ( img ) ; } batch = new SpriteBatch ( ) ; font = new BitmapFont ( Gdx . files . internal ( <str> ) , false ) ; } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . draw ( ) ; Array < Actor > actors = stage . getActors ( ) ; int numVisible = <int> ; for ( int i = <int> ; i < actors . size ; i + + ) { numVisible + = ( ( CullableActor ) actors . get ( i ) ) . visible ? <int> : <int> ; } batch . begin ( ) ; font . draw ( batch , <str> + numVisible + <str> + Gdx . graphics . getFramesPerSecond ( ) , <int> , <int> ) ; batch . end ( ) ; } @Override public void dispose ( ) { stage . dispose ( ) ; texture . dispose ( ) ; batch . dispose ( ) ; font . dispose ( ) ; } }
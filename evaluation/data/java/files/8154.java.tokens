package org . eclipse . debug . ui . memory ; import org . eclipse . core . runtime . ISafeRunnable ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; public abstract class AbstractMemoryRenderingBindingsProvider implements IMemoryRenderingBindingsProvider { private ListenerList fListeners ; @Override public void addListener ( IMemoryRenderingBindingsListener listener ) { if ( fListeners = = null ) { fListeners = new ListenerList ( ) ; } fListeners . add ( listener ) ; } @Override public void removeListener ( IMemoryRenderingBindingsListener listener ) { if ( fListeners ! = null ) { fListeners . remove ( listener ) ; } } protected void fireBindingsChanged ( ) { if ( fListeners = = null ) { return ; } Object [ ] listeners = fListeners . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { if ( listeners [ i ] instanceof IMemoryRenderingBindingsListener ) { final IMemoryRenderingBindingsListener listener = ( IMemoryRenderingBindingsListener ) listeners [ i ] ; ISafeRunnable runnable = new ISafeRunnable ( ) { @Override public void handleException ( Throwable exception ) { DebugUIPlugin . log ( exception ) ; } @Override public void run ( ) throws Exception { listener . memoryRenderingBindingsChanged ( ) ; } } ; SafeRunner . run ( runnable ) ; } } } }
package io . netty . handler . codec . http2 ; import static io . netty . handler . codec . http2 . Http2CodecUtil . MAX_CONCURRENT_STREAMS ; import static io . netty . handler . codec . http2 . Http2CodecUtil . MAX_HEADER_LIST_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . MAX_HEADER_TABLE_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . MAX_INITIAL_WINDOW_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . MIN_CONCURRENT_STREAMS ; import static io . netty . handler . codec . http2 . Http2CodecUtil . MIN_HEADER_LIST_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . MIN_HEADER_TABLE_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . MIN_INITIAL_WINDOW_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . NUM_STANDARD_SETTINGS ; import static io . netty . handler . codec . http2 . Http2CodecUtil . SETTINGS_ENABLE_PUSH ; import static io . netty . handler . codec . http2 . Http2CodecUtil . SETTINGS_HEADER_TABLE_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . SETTINGS_INITIAL_WINDOW_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . SETTINGS_MAX_CONCURRENT_STREAMS ; import static io . netty . handler . codec . http2 . Http2CodecUtil . SETTINGS_MAX_FRAME_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . SETTINGS_MAX_HEADER_LIST_SIZE ; import static io . netty . handler . codec . http2 . Http2CodecUtil . isMaxFrameSizeValid ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; import io . netty . util . collection . CharObjectHashMap ; public final class Http2Settings extends CharObjectHashMap < Long > { private static final int DEFAULT_CAPACITY = ( int ) ( NUM_STANDARD_SETTINGS / DEFAULT_LOAD_FACTOR ) + <int> ; private static final Long FALSE = <int> ; private static final Long TRUE = <int> ; public Http2Settings ( ) { this ( DEFAULT_CAPACITY ) ; } public Http2Settings ( int initialCapacity , float loadFactor ) { super ( initialCapacity , loadFactor ) ; } public Http2Settings ( int initialCapacity ) { super ( initialCapacity ) ; } @Override public Long put ( char key , Long value ) { verifyStandardSetting ( key , value ) ; return super . put ( key , value ) ; } public Long headerTableSize ( ) { return get ( SETTINGS_HEADER_TABLE_SIZE ) ; } public Http2Settings headerTableSize ( int value ) { put ( SETTINGS_HEADER_TABLE_SIZE , Long . valueOf ( value ) ) ; return this ; } public Boolean pushEnabled ( ) { Long value = get ( SETTINGS_ENABLE_PUSH ) ; if ( value = = null ) { return null ; } return TRUE . equals ( value ) ; } public Http2Settings pushEnabled ( boolean enabled ) { put ( SETTINGS_ENABLE_PUSH , enabled ? TRUE : FALSE ) ; return this ; } public Long maxConcurrentStreams ( ) { return get ( SETTINGS_MAX_CONCURRENT_STREAMS ) ; } public Http2Settings maxConcurrentStreams ( long value ) { put ( SETTINGS_MAX_CONCURRENT_STREAMS , Long . valueOf ( value ) ) ; return this ; } public Integer initialWindowSize ( ) { return getIntValue ( SETTINGS_INITIAL_WINDOW_SIZE ) ; } public Http2Settings initialWindowSize ( int value ) { put ( SETTINGS_INITIAL_WINDOW_SIZE , Long . valueOf ( value ) ) ; return this ; } public Integer maxFrameSize ( ) { return getIntValue ( SETTINGS_MAX_FRAME_SIZE ) ; } public Http2Settings maxFrameSize ( int value ) { put ( SETTINGS_MAX_FRAME_SIZE , Long . valueOf ( value ) ) ; return this ; } public Integer maxHeaderListSize ( ) { Integer value = getIntValue ( SETTINGS_MAX_HEADER_LIST_SIZE ) ; if ( value ! = null & & value < <int> ) { value = Integer . MAX_VALUE ; } return value ; } public Http2Settings maxHeaderListSize ( int value ) { if ( value < <int> ) { value = Integer . MAX_VALUE ; } put ( SETTINGS_MAX_HEADER_LIST_SIZE , Long . valueOf ( value ) ) ; return this ; } public Http2Settings copyFrom ( Http2Settings settings ) { clear ( ) ; putAll ( settings ) ; return this ; } public Integer getIntValue ( char key ) { Long value = get ( key ) ; if ( value = = null ) { return null ; } return value . intValue ( ) ; } private static void verifyStandardSetting ( int key , Long value ) { checkNotNull ( value , <str> ) ; switch ( key ) { case SETTINGS_HEADER_TABLE_SIZE : if ( value < MIN_HEADER_TABLE_SIZE | | value > MAX_HEADER_TABLE_SIZE ) { throw new IllegalArgumentException ( <str> + value ) ; } break ; case SETTINGS_ENABLE_PUSH : if ( value ! = <int> & & value ! = <int> ) { throw new IllegalArgumentException ( <str> + value ) ; } break ; case SETTINGS_MAX_CONCURRENT_STREAMS : if ( value < MIN_CONCURRENT_STREAMS | | value > MAX_CONCURRENT_STREAMS ) { throw new IllegalArgumentException ( <str> + value ) ; } break ; case SETTINGS_INITIAL_WINDOW_SIZE : if ( value < MIN_INITIAL_WINDOW_SIZE | | value > MAX_INITIAL_WINDOW_SIZE ) { throw new IllegalArgumentException ( <str> + value ) ; } break ; case SETTINGS_MAX_FRAME_SIZE : if ( ! isMaxFrameSizeValid ( value . intValue ( ) ) ) { throw new IllegalArgumentException ( <str> + value ) ; } break ; case SETTINGS_MAX_HEADER_LIST_SIZE : if ( value < MIN_HEADER_LIST_SIZE | | value > MAX_HEADER_LIST_SIZE ) { throw new IllegalArgumentException ( <str> + value ) ; } break ; default : break ; } } @Override protected String keyToString ( char key ) { switch ( key ) { case SETTINGS_HEADER_TABLE_SIZE : return <str> ; case SETTINGS_ENABLE_PUSH : return <str> ; case SETTINGS_MAX_CONCURRENT_STREAMS : return <str> ; case SETTINGS_INITIAL_WINDOW_SIZE : return <str> ; case SETTINGS_MAX_FRAME_SIZE : return <str> ; case SETTINGS_MAX_HEADER_LIST_SIZE : return <str> ; default : return super . keyToString ( key ) ; } } } 

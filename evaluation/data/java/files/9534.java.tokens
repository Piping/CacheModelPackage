package com . badlogic . gdx . tests ; import java . util . Random ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . ArrayMap ; import com . badlogic . gdx . utils . BooleanArray ; import com . badlogic . gdx . utils . ByteArray ; import com . badlogic . gdx . utils . CharArray ; import com . badlogic . gdx . utils . FloatArray ; import com . badlogic . gdx . utils . GdxRuntimeException ; import com . badlogic . gdx . utils . IdentityMap ; import com . badlogic . gdx . utils . IntArray ; import com . badlogic . gdx . utils . IntFloatMap ; import com . badlogic . gdx . utils . IntIntMap ; import com . badlogic . gdx . utils . IntMap ; import com . badlogic . gdx . utils . IntSet ; import com . badlogic . gdx . utils . LongArray ; import com . badlogic . gdx . utils . LongMap ; import com . badlogic . gdx . utils . ObjectFloatMap ; import com . badlogic . gdx . utils . ObjectIntMap ; import com . badlogic . gdx . utils . ObjectMap ; import com . badlogic . gdx . utils . ObjectSet ; import com . badlogic . gdx . utils . OrderedMap ; import com . badlogic . gdx . utils . OrderedSet ; import com . badlogic . gdx . utils . ShortArray ; import com . badlogic . gdx . utils . SnapshotArray ; import com . badlogic . gdx . utils . reflect . ClassReflection ; import com . badlogic . gdx . utils . reflect . Constructor ; import com . badlogic . gdx . utils . reflect . Method ; public class CollectionsTest extends GdxTest { private Object [ ] values = { <str> , <str> , <str> , <str> , true , false , <int> , <str> , <str> , <int> } ; private Object [ ] valuesWithNulls = { <str> , <str> , null , <str> , true , false , <int> , <str> , <str> , <int> } ; private Integer [ ] intValues = { <int> , <int> , <int> , - <int> , <int> , <int> , <int> , - <int> , - <int> , <int> } ; private Float [ ] floatValues = { <int> f , <float> , <int> f , <int> f , <int> f , - <int> f , <int> f , <int> f , <int> f , <int> f } ; private Long [ ] longValues = { <int> , <int> , <int> , <int> , - <int> , - <int> , <int> , <int> , <int> } ; private Byte [ ] byteValues = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; private Short [ ] shortValues = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; private Character [ ] charValues = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; private void assertEquals ( Object a , Object b ) { if ( ! a . equals ( b ) ) throw new GdxRuntimeException ( <str> + a + <str> + b ) ; if ( ! b . equals ( a ) ) throw new GdxRuntimeException ( <str> + b + <str> + a ) ; if ( a . hashCode ( ) ! = b . hashCode ( ) ) throw new GdxRuntimeException ( <str> + a + <str> + b ) ; } private void assertNotEquals ( Object a , Object b ) { if ( a . equals ( b ) ) throw new GdxRuntimeException ( <str> + a + <str> + b ) ; if ( b . equals ( a ) ) throw new GdxRuntimeException ( <str> + b + <str> + a ) ; if ( a . hashCode ( ) = = b . hashCode ( ) ) System . out . println ( <str> + a + <str> + b ) ; } private Object newInstance ( Class < ? > clazz ) { try { return ClassReflection . newInstance ( clazz ) ; } catch ( Throwable ex ) { throw new GdxRuntimeException ( ex ) ; } } private void invoke ( String methodName , Object object , Object . . . args ) { try { Method theMethod = null ; for ( Method method : ClassReflection . getMethods ( object . getClass ( ) ) ) { if ( methodName . equals ( method . getName ( ) ) & & method . getParameterTypes ( ) . length = = args . length ) { theMethod = method ; break ; } } theMethod . invoke ( object , args ) ; } catch ( Throwable ex ) { throw new GdxRuntimeException ( ex ) ; } } private void set ( String fieldName , Object object , Object value ) { try { ClassReflection . getField ( object . getClass ( ) , fieldName ) . set ( object , value ) ; } catch ( Throwable ex ) { throw new GdxRuntimeException ( ex ) ; } } private Object copy ( Object object ) { try { Constructor theConstructor = null ; for ( Constructor constructor : ClassReflection . getConstructors ( object . getClass ( ) ) ) { if ( constructor . getParameterTypes ( ) . length = = <int> & & ClassReflection . isAssignableFrom ( constructor . getParameterTypes ( ) [ <int> ] , object . getClass ( ) ) ) { theConstructor = constructor ; break ; } } return theConstructor . newInstance ( object ) ; } catch ( Throwable ex ) { throw new GdxRuntimeException ( ex ) ; } } private void testMap ( Class < ? > mapClass , Object [ ] keys , Object [ ] values ) { System . out . println ( mapClass ) ; Object map = newInstance ( mapClass ) ; Object otherMap = newInstance ( mapClass ) ; assertEquals ( map , map ) ; for ( int i = <int> , n = keys . length ; i < n ; + + i ) { Object anotherMap = copy ( map ) ; invoke ( <str> , map , keys [ i ] , values [ i ] ) ; invoke ( <str> , otherMap , keys [ i ] , values [ i ] ) ; assertEquals ( map , otherMap ) ; assertNotEquals ( map , anotherMap ) ; invoke ( <str> , anotherMap , keys [ ( i + <int> ) % keys . length ] , values [ i ] ) ; assertNotEquals ( map , anotherMap ) ; } } private void testArray ( Class < ? > arrayClass , Object [ ] values ) { System . out . println ( arrayClass ) ; Object array = newInstance ( arrayClass ) ; for ( int i = <int> ; i < values . length ; i + + ) invoke ( <str> , array , values [ i ] ) ; Object otherArray = newInstance ( arrayClass ) ; for ( int i = <int> ; i < values . length ; i + + ) invoke ( <str> , otherArray , values [ i ] ) ; assertEquals ( array , otherArray ) ; Object unorderedArray = newInstance ( arrayClass ) ; set ( <str> , unorderedArray , false ) ; Object otherUnorderedArray = newInstance ( arrayClass ) ; set ( <str> , otherUnorderedArray , false ) ; assertEquals ( unorderedArray , unorderedArray ) ; assertNotEquals ( unorderedArray , otherUnorderedArray ) ; } private void testSet ( Class < ? > setClass , Object [ ] values ) { System . out . println ( setClass ) ; Object set = newInstance ( setClass ) ; for ( int i = <int> , n = values . length ; i < n ; + + i ) invoke ( <str> , set , values [ i ] ) ; Object otherSet = newInstance ( setClass ) ; for ( int i = <int> , n = values . length ; i < n ; + + i ) invoke ( <str> , otherSet , values [ i ] ) ; Object thirdSet = newInstance ( setClass ) ; for ( int i = <int> , n = values . length ; i < n ; i + + ) invoke ( <str> , thirdSet , values [ n - i - <int> ] ) ; assertEquals ( set , set ) ; assertEquals ( set , otherSet ) ; assertEquals ( set , thirdSet ) ; assertEquals ( otherSet , set ) ; assertEquals ( otherSet , otherSet ) ; assertEquals ( otherSet , thirdSet ) ; assertEquals ( thirdSet , set ) ; assertEquals ( thirdSet , otherSet ) ; assertEquals ( thirdSet , thirdSet ) ; } public void create ( ) { testMap ( ArrayMap . class , values , valuesWithNulls ) ; testMap ( IdentityMap . class , values , valuesWithNulls ) ; testMap ( IntFloatMap . class , intValues , floatValues ) ; testMap ( IntIntMap . class , intValues , intValues ) ; testMap ( IntMap . class , intValues , valuesWithNulls ) ; testMap ( LongMap . class , longValues , valuesWithNulls ) ; testMap ( ObjectFloatMap . class , values , floatValues ) ; testMap ( ObjectIntMap . class , values , intValues ) ; testMap ( ObjectMap . class , values , valuesWithNulls ) ; testMap ( OrderedMap . class , values , valuesWithNulls ) ; testArray ( Array . class , valuesWithNulls ) ; testArray ( BooleanArray . class , new Boolean [ ] { true , false } ) ; testArray ( ByteArray . class , byteValues ) ; testArray ( CharArray . class , charValues ) ; testArray ( FloatArray . class , floatValues ) ; testArray ( IntArray . class , intValues ) ; testArray ( LongArray . class , longValues ) ; testArray ( ShortArray . class , shortValues ) ; testArray ( SnapshotArray . class , values ) ; testSet ( IntSet . class , intValues ) ; testSet ( ObjectSet . class , values ) ; testSet ( OrderedSet . class , values ) ; System . out . println ( <str> ) ; } }
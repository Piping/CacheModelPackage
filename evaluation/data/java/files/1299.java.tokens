package io . netty . testsuite . transport . socket ; import io . netty . bootstrap . Bootstrap ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . Channel ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . ChannelOption ; import io . netty . channel . SimpleChannelInboundHandler ; import io . netty . handler . codec . FixedLengthFrameDecoder ; import org . junit . Test ; import java . io . IOException ; import java . util . Random ; import java . util . concurrent . atomic . AtomicReference ; import static org . junit . Assert . * ; public class SocketFixedLengthEchoTest extends AbstractSocketTest { private static final Random random = new Random ( ) ; static final byte [ ] data = new byte [ <int> ] ; static { random . nextBytes ( data ) ; } @Test public void testFixedLengthEcho ( ) throws Throwable { run ( ) ; } @Test public void testFixedLengthEchoNotAutoRead ( ) throws Throwable { run ( ) ; } public void testFixedLengthEcho ( ServerBootstrap sb , Bootstrap cb ) throws Throwable { testFixedLengthEcho ( sb , cb , true ) ; } public void testFixedLengthEchoNotAutoRead ( ServerBootstrap sb , Bootstrap cb ) throws Throwable { testFixedLengthEcho ( sb , cb , false ) ; } private static void testFixedLengthEcho ( ServerBootstrap sb , Bootstrap cb , boolean autoRead ) throws Throwable { final EchoHandler sh = new EchoHandler ( autoRead ) ; final EchoHandler ch = new EchoHandler ( autoRead ) ; sb . childOption ( ChannelOption . AUTO_READ , autoRead ) ; sb . childHandler ( new ChannelInitializer < Channel > ( ) { @Override public void initChannel ( Channel sch ) throws Exception { sch . pipeline ( ) . addLast ( <str> , new FixedLengthFrameDecoder ( <int> ) ) ; sch . pipeline ( ) . addAfter ( <str> , <str> , sh ) ; } } ) ; cb . option ( ChannelOption . AUTO_READ , autoRead ) ; cb . handler ( new ChannelInitializer < Channel > ( ) { @Override public void initChannel ( Channel sch ) throws Exception { sch . pipeline ( ) . addLast ( <str> , new FixedLengthFrameDecoder ( <int> ) ) ; sch . pipeline ( ) . addAfter ( <str> , <str> , ch ) ; } } ) ; Channel sc = sb . bind ( ) . sync ( ) . channel ( ) ; Channel cc = cb . connect ( ) . sync ( ) . channel ( ) ; for ( int i = <int> ; i < data . length ; ) { int length = Math . min ( random . nextInt ( <int> * <int> ) , data . length - i ) ; cc . writeAndFlush ( Unpooled . wrappedBuffer ( data , i , length ) ) ; i + = length ; } while ( ch . counter < data . length ) { if ( sh . exception . get ( ) ! = null ) { break ; } if ( ch . exception . get ( ) ! = null ) { break ; } try { Thread . sleep ( <int> ) ; } catch ( InterruptedException e ) { } } while ( sh . counter < data . length ) { if ( sh . exception . get ( ) ! = null ) { break ; } if ( ch . exception . get ( ) ! = null ) { break ; } try { Thread . sleep ( <int> ) ; } catch ( InterruptedException e ) { } } sh . channel . close ( ) . sync ( ) ; ch . channel . close ( ) . sync ( ) ; sc . close ( ) . sync ( ) ; if ( sh . exception . get ( ) ! = null & & ! ( sh . exception . get ( ) instanceof IOException ) ) { throw sh . exception . get ( ) ; } if ( ch . exception . get ( ) ! = null & & ! ( ch . exception . get ( ) instanceof IOException ) ) { throw ch . exception . get ( ) ; } if ( sh . exception . get ( ) ! = null ) { throw sh . exception . get ( ) ; } if ( ch . exception . get ( ) ! = null ) { throw ch . exception . get ( ) ; } } private static class EchoHandler extends SimpleChannelInboundHandler < ByteBuf > { private final boolean autoRead ; volatile Channel channel ; final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; volatile int counter ; EchoHandler ( boolean autoRead ) { this . autoRead = autoRead ; } @Override public void channelActive ( ChannelHandlerContext ctx ) throws Exception { channel = ctx . channel ( ) ; if ( ! autoRead ) { ctx . read ( ) ; } } @Override public void channelRead0 ( ChannelHandlerContext ctx , ByteBuf msg ) throws Exception { assertEquals ( <int> , msg . readableBytes ( ) ) ; byte [ ] actual = new byte [ msg . readableBytes ( ) ] ; msg . getBytes ( <int> , actual ) ; int lastIdx = counter ; for ( int i = <int> ; i < actual . length ; i + + ) { assertEquals ( data [ i + lastIdx ] , actual [ i ] ) ; } if ( channel . parent ( ) ! = null ) { channel . write ( msg . retain ( ) ) ; } counter + = actual . length ; } @Override public void channelReadComplete ( ChannelHandlerContext ctx ) throws Exception { try { ctx . flush ( ) ; } finally { if ( ! autoRead ) { ctx . read ( ) ; } } } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { if ( exception . compareAndSet ( null , cause ) ) { ctx . close ( ) ; } } } } 

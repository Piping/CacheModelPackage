package rx . internal . operators ; import static org . mockito . Matchers . any ; import static org . mockito . Mockito . inOrder ; import static org . mockito . Mockito . never ; import static org . mockito . Mockito . times ; import static org . mockito . Mockito . verify ; import java . util . concurrent . TimeUnit ; import org . junit . Before ; import org . junit . Test ; import org . mockito . InOrder ; import org . mockito . Mock ; import org . mockito . MockitoAnnotations ; import rx . Observable ; import rx . Observer ; import rx . schedulers . TestScheduler ; import rx . schedulers . Timestamped ; import rx . subjects . PublishSubject ; public class OperatorTimestampTest { @Mock Observer < Object > observer ; @Before public void before ( ) { MockitoAnnotations . initMocks ( this ) ; } @Test public void timestampWithScheduler ( ) { TestScheduler scheduler = new TestScheduler ( ) ; PublishSubject < Integer > source = PublishSubject . create ( ) ; Observable < Timestamped < Integer > > m = source . timestamp ( scheduler ) ; m . subscribe ( observer ) ; source . onNext ( <int> ) ; scheduler . advanceTimeBy ( <int> , TimeUnit . MILLISECONDS ) ; source . onNext ( <int> ) ; scheduler . advanceTimeBy ( <int> , TimeUnit . MILLISECONDS ) ; source . onNext ( <int> ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( new Timestamped < Integer > ( <int> , <int> ) ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( new Timestamped < Integer > ( <int> , <int> ) ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( new Timestamped < Integer > ( <int> , <int> ) ) ; verify ( observer , never ( ) ) . onError ( any ( Throwable . class ) ) ; verify ( observer , never ( ) ) . onCompleted ( ) ; } @Test public void timestampWithScheduler2 ( ) { TestScheduler scheduler = new TestScheduler ( ) ; PublishSubject < Integer > source = PublishSubject . create ( ) ; Observable < Timestamped < Integer > > m = source . timestamp ( scheduler ) ; m . subscribe ( observer ) ; source . onNext ( <int> ) ; source . onNext ( <int> ) ; scheduler . advanceTimeBy ( <int> , TimeUnit . MILLISECONDS ) ; scheduler . advanceTimeBy ( <int> , TimeUnit . MILLISECONDS ) ; source . onNext ( <int> ) ; InOrder inOrder = inOrder ( observer ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( new Timestamped < Integer > ( <int> , <int> ) ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( new Timestamped < Integer > ( <int> , <int> ) ) ; inOrder . verify ( observer , times ( <int> ) ) . onNext ( new Timestamped < Integer > ( <int> , <int> ) ) ; verify ( observer , never ( ) ) . onError ( any ( Throwable . class ) ) ; verify ( observer , never ( ) ) . onCompleted ( ) ; } } 

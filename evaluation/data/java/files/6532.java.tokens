package org . apache . cassandra . db . compaction ; import java . util . Collections ; import java . util . HashSet ; import java . util . Set ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . db . RowUpdateBuilder ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . schema . CompactionParams ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . utils . ByteBufferUtil ; import static org . junit . Assert . assertEquals ; public class OneCompactionTest { public static final String KEYSPACE1 = <str> ; private static final String CF_STANDARD1 = <str> ; private static final String CF_STANDARD2 = <str> ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD1 ) . compaction ( CompactionParams . lcs ( Collections . singletonMap ( <str> , <str> ) ) ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD2 ) ) ; } private void testCompaction ( String columnFamilyName , int insertsPerTable ) { CompactionManager . instance . disableAutoCompaction ( ) ; Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; ColumnFamilyStore store = keyspace . getColumnFamilyStore ( columnFamilyName ) ; Set < String > inserted = new HashSet < > ( ) ; for ( int j = <int> ; j < insertsPerTable ; j + + ) { String key = String . valueOf ( j ) ; new RowUpdateBuilder ( store . metadata , j , key ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . EMPTY_BYTE_BUFFER ) . build ( ) . applyUnsafe ( ) ; inserted . add ( key ) ; store . forceBlockingFlush ( ) ; assertEquals ( inserted . size ( ) , Util . getAll ( Util . cmd ( store ) . build ( ) ) . size ( ) ) ; } CompactionManager . instance . performMaximal ( store , false ) ; assertEquals ( <int> , store . getLiveSSTables ( ) . size ( ) ) ; } @Test public void testCompaction1 ( ) { testCompaction ( <str> , <int> ) ; } @Test public void testCompaction2 ( ) { testCompaction ( <str> , <int> ) ; } }
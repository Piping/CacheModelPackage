package com . netflix . hystrix . contrib . javanica . test . common . collapser ; import com . netflix . hystrix . HystrixEventType ; import com . netflix . hystrix . HystrixInvokableInfo ; import com . netflix . hystrix . HystrixRequestLog ; import com . netflix . hystrix . contrib . javanica . annotation . HystrixCollapser ; import com . netflix . hystrix . contrib . javanica . annotation . HystrixCommand ; import com . netflix . hystrix . contrib . javanica . annotation . HystrixProperty ; import com . netflix . hystrix . contrib . javanica . test . common . BasicHystrixTest ; import com . netflix . hystrix . contrib . javanica . test . common . domain . User ; import org . junit . Before ; import org . junit . Test ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . Future ; import static com . netflix . hystrix . contrib . javanica . test . common . CommonUtils . getHystrixCommandByKey ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public abstract class BasicCollapserTest extends BasicHystrixTest { protected abstract UserService createUserService ( ) ; private UserService userService ; @Before public void setUp ( ) throws Exception { super . setUp ( ) ; userService = createUserService ( ) ; } @Test public void testGetUserById ( ) throws ExecutionException , InterruptedException { Future < User > f1 = userService . getUserById ( <str> ) ; Future < User > f2 = userService . getUserById ( <str> ) ; Future < User > f3 = userService . getUserById ( <str> ) ; Future < User > f4 = userService . getUserById ( <str> ) ; Future < User > f5 = userService . getUserById ( <str> ) ; assertEquals ( <str> , f1 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f2 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f3 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f4 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f5 . get ( ) . getName ( ) ) ; assertEquals ( <int> , HystrixRequestLog . getCurrentRequest ( ) . getAllExecutedCommands ( ) . size ( ) ) ; HystrixInvokableInfo < ? > command = HystrixRequestLog . getCurrentRequest ( ) . getAllExecutedCommands ( ) . iterator ( ) . next ( ) ; assertEquals ( <str> , command . getCommandKey ( ) . name ( ) ) ; assertTrue ( command . getExecutionEvents ( ) . contains ( HystrixEventType . COLLAPSED ) ) ; assertTrue ( command . getExecutionEvents ( ) . contains ( HystrixEventType . SUCCESS ) ) ; } @Test public void testGetUserByIdWithFallback ( ) throws ExecutionException , InterruptedException { Future < User > f1 = userService . getUserByIdWithFallback ( <str> ) ; Future < User > f2 = userService . getUserByIdWithFallback ( <str> ) ; Future < User > f3 = userService . getUserByIdWithFallback ( <str> ) ; Future < User > f4 = userService . getUserByIdWithFallback ( <str> ) ; Future < User > f5 = userService . getUserByIdWithFallback ( <str> ) ; assertEquals ( <str> , f1 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f2 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f3 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f4 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f5 . get ( ) . getName ( ) ) ; assertEquals ( <int> , HystrixRequestLog . getCurrentRequest ( ) . getAllExecutedCommands ( ) . size ( ) ) ; HystrixInvokableInfo < ? > getUserByIdsWithFallback = getHystrixCommandByKey ( <str> ) ; com . netflix . hystrix . HystrixInvokableInfo getUserByIdsFallback = getHystrixCommandByKey ( <str> ) ; assertTrue ( getUserByIdsWithFallback . getExecutionEvents ( ) . contains ( HystrixEventType . FAILURE ) ) ; assertTrue ( getUserByIdsWithFallback . getExecutionEvents ( ) . contains ( HystrixEventType . FALLBACK_SUCCESS ) ) ; assertTrue ( getUserByIdsFallback . getExecutionEvents ( ) . contains ( HystrixEventType . SUCCESS ) ) ; } @Test public void testGetUserByIdWithFallbackWithThrowableParam ( ) throws ExecutionException , InterruptedException { Future < User > f1 = userService . getUserByIdWithFallbackWithThrowableParam ( <str> ) ; Future < User > f2 = userService . getUserByIdWithFallbackWithThrowableParam ( <str> ) ; Future < User > f3 = userService . getUserByIdWithFallbackWithThrowableParam ( <str> ) ; Future < User > f4 = userService . getUserByIdWithFallbackWithThrowableParam ( <str> ) ; Future < User > f5 = userService . getUserByIdWithFallbackWithThrowableParam ( <str> ) ; assertEquals ( <str> , f1 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f2 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f3 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f4 . get ( ) . getName ( ) ) ; assertEquals ( <str> , f5 . get ( ) . getName ( ) ) ; assertEquals ( <int> , HystrixRequestLog . getCurrentRequest ( ) . getAllExecutedCommands ( ) . size ( ) ) ; HystrixInvokableInfo < ? > batchCommand = getHystrixCommandByKey ( <str> ) ; com . netflix . hystrix . HystrixInvokableInfo fallback1 = getHystrixCommandByKey ( <str> ) ; com . netflix . hystrix . HystrixInvokableInfo fallback2 = getHystrixCommandByKey ( <str> ) ; com . netflix . hystrix . HystrixInvokableInfo fallback3 = getHystrixCommandByKey ( <str> ) ; assertTrue ( batchCommand . getExecutionEvents ( ) . contains ( HystrixEventType . FAILURE ) ) ; assertTrue ( fallback1 . getExecutionEvents ( ) . contains ( HystrixEventType . FAILURE ) ) ; assertTrue ( fallback2 . getExecutionEvents ( ) . contains ( HystrixEventType . FAILURE ) ) ; assertTrue ( fallback2 . getExecutionEvents ( ) . contains ( HystrixEventType . FALLBACK_SUCCESS ) ) ; assertTrue ( fallback3 . getExecutionEvents ( ) . contains ( HystrixEventType . SUCCESS ) ) ; } @Test ( expected = IllegalStateException . class ) public void testGetUserByIdWrongBatchMethodArgType ( ) { userService . getUserByIdWrongBatchMethodArgType ( <str> ) ; } @Test ( expected = IllegalStateException . class ) public void testGetUserByIdWrongBatchMethodReturnType ( ) { userService . getUserByIdWrongBatchMethodArgType ( <str> ) ; } @Test ( expected = IllegalStateException . class ) public void testGetUserByIdWrongCollapserMethodReturnType ( ) { userService . getUserByIdWrongCollapserMethodReturnType ( <str> ) ; } @Test ( expected = IllegalStateException . class ) public void testGetUserByIdWrongCollapserMultipleArgs ( ) { userService . getUserByIdWrongCollapserMultipleArgs ( <str> , <str> ) ; } @Test ( expected = IllegalStateException . class ) public void testGetUserByIdWrongCollapserNoArgs ( ) { userService . getUserByIdWrongCollapserNoArgs ( ) ; } public static class UserService { public static final User DEFAULT_USER = new User ( <str> , <str> ) ; @HystrixCollapser ( batchMethod = <str> , collapserProperties = { @HystrixProperty ( name = <str> , value = <str> ) } ) public Future < User > getUserById ( String id ) { return null ; } @HystrixCollapser ( batchMethod = <str> , collapserProperties = { @HystrixProperty ( name = <str> , value = <str> ) } ) public Future < User > getUserByIdWithFallback ( String id ) { return null ; } @HystrixCollapser ( batchMethod = <str> , collapserProperties = { @HystrixProperty ( name = <str> , value = <str> ) } ) public Future < User > getUserByIdWithFallbackWithThrowableParam ( String id ) { return null ; } @HystrixCommand ( fallbackMethod = <str> , commandProperties = { @HystrixProperty ( name = <str> , value = <str> ) } ) public List < User > getUserByIdsThrowsException ( List < String > ids ) { throw new RuntimeException ( <str> ) ; } @HystrixCommand ( fallbackMethod = <str> ) private List < User > getUserByIdsFallbackWithThrowableParam1 ( List < String > ids , Throwable e ) { if ( e . getMessage ( ) . equals ( <str> ) ) { throw new RuntimeException ( <str> ) ; } List < User > users = new ArrayList < User > ( ) ; for ( String id : ids ) { users . add ( new User ( id , <str> + id ) ) ; } return users ; } @HystrixCommand ( fallbackMethod = <str> ) private List < User > getUserByIdsFallbackWithThrowableParam2 ( List < String > ids ) { throw new RuntimeException ( <str> ) ; } @HystrixCommand private List < User > getUserByIdsFallbackWithThrowableParam3 ( List < String > ids , Throwable e ) { if ( ! e . getMessage ( ) . equals ( <str> ) ) { throw new RuntimeException ( <str> ) ; } List < User > users = new ArrayList < User > ( ) ; for ( String id : ids ) { users . add ( new User ( id , <str> + id ) ) ; } return users ; } @HystrixCommand ( commandProperties = { @HystrixProperty ( name = <str> , value = <str> ) } ) public List < User > getUserByIds ( List < String > ids ) { List < User > users = new ArrayList < User > ( ) ; for ( String id : ids ) { users . add ( new User ( id , <str> + id ) ) ; } return users ; } @HystrixCommand ( fallbackMethod = <str> , commandProperties = { @HystrixProperty ( name = <str> , value = <str> ) } ) public List < User > getUserByIdsWithFallback ( List < String > ids ) { throw new RuntimeException ( <str> ) ; } @HystrixCommand private List < User > getUserByIdsFallback ( List < String > ids ) { List < User > users = new ArrayList < User > ( ) ; for ( String id : ids ) { users . add ( new User ( id , <str> + id ) ) ; } return users ; } @HystrixCollapser ( batchMethod = <str> ) public Long getUserByIdWrongCollapserMethodReturnType ( String id ) { return null ; } @HystrixCollapser ( batchMethod = <str> ) public Future < User > getUserByIdWrongCollapserMultipleArgs ( String id , String name ) { return null ; } @HystrixCollapser ( batchMethod = <str> ) public Future < User > getUserByIdWrongCollapserNoArgs ( ) { return null ; } @HystrixCollapser ( batchMethod = <str> ) public Future < User > getUserByIdWrongBatchMethodArgType ( String id ) { return null ; } @HystrixCommand public List < User > getUserByIdsWrongBatchMethodArgType ( List < Integer > ids ) { return null ; } @HystrixCollapser ( batchMethod = <str> ) public Future < User > getUserByIdWrongBatchMethodReturnType ( String id ) { return null ; } @HystrixCommand public List < Integer > getUserByIdsWrongBatchMethodReturnType ( List < String > ids ) { return null ; } } } 

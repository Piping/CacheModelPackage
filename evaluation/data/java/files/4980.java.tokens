package io . netty . handler . codec . dns ; import io . netty . util . internal . StringUtil ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public abstract class AbstractDnsRecord implements DnsRecord { private final String name ; private final DnsRecordType type ; private final short dnsClass ; private final long timeToLive ; private int hashCode ; protected AbstractDnsRecord ( String name , DnsRecordType type , long timeToLive ) { this ( name , type , CLASS_IN , timeToLive ) ; } protected AbstractDnsRecord ( String name , DnsRecordType type , int dnsClass , long timeToLive ) { if ( timeToLive < <int> ) { throw new IllegalArgumentException ( <str> + timeToLive + <str> ) ; } this . name = checkNotNull ( name , <str> ) ; this . type = checkNotNull ( type , <str> ) ; this . dnsClass = ( short ) dnsClass ; this . timeToLive = timeToLive ; } @Override public String name ( ) { return name ; } @Override public DnsRecordType type ( ) { return type ; } @Override public int dnsClass ( ) { return dnsClass & <hex> ; } @Override public long timeToLive ( ) { return timeToLive ; } @Override public boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( ! ( obj instanceof DnsRecord ) ) { return false ; } final DnsRecord that = ( DnsRecord ) obj ; final int hashCode = this . hashCode ; if ( hashCode ! = <int> & & hashCode ! = that . hashCode ( ) ) { return false ; } return type ( ) . intValue ( ) = = that . type ( ) . intValue ( ) & & dnsClass ( ) = = that . dnsClass ( ) & & name ( ) . equals ( that . name ( ) ) ; } @Override public int hashCode ( ) { final int hashCode = this . hashCode ; if ( hashCode ! = <int> ) { return hashCode ; } return this . hashCode = name . hashCode ( ) * <int> + type ( ) . intValue ( ) * <int> + dnsClass ( ) ; } @Override public String toString ( ) { StringBuilder buf = new StringBuilder ( <int> ) ; buf . append ( StringUtil . simpleClassName ( this ) ) . append ( <str> ) . append ( name ( ) ) . append ( <str> ) . append ( timeToLive ( ) ) . append ( <str> ) ; DnsMessageUtil . appendRecordClass ( buf , dnsClass ( ) ) . append ( <str> ) . append ( type ( ) . name ( ) ) . append ( <str> ) ; return buf . toString ( ) ; } }
package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btTriangleRaycastCallback extends btTriangleCallback { private long swigCPtr ; protected btTriangleRaycastCallback ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , CollisionJNI . btTriangleRaycastCallback_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btTriangleRaycastCallback ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( CollisionJNI . btTriangleRaycastCallback_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btTriangleRaycastCallback obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_btTriangleRaycastCallback ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } protected void swigDirectorDisconnect ( ) { swigCMemOwn = false ; delete ( ) ; } public void swigReleaseOwnership ( ) { swigCMemOwn = false ; CollisionJNI . btTriangleRaycastCallback_change_ownership ( this , swigCPtr , false ) ; } public void swigTakeOwnership ( ) { swigCMemOwn = true ; CollisionJNI . btTriangleRaycastCallback_change_ownership ( this , swigCPtr , true ) ; } public void setFrom ( btVector3 value ) { CollisionJNI . btTriangleRaycastCallback_from_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getFrom ( ) { long cPtr = CollisionJNI . btTriangleRaycastCallback_from_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setTo ( btVector3 value ) { CollisionJNI . btTriangleRaycastCallback_to_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getTo ( ) { long cPtr = CollisionJNI . btTriangleRaycastCallback_to_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setFlags ( long value ) { CollisionJNI . btTriangleRaycastCallback_flags_set ( swigCPtr , this , value ) ; } public long getFlags ( ) { return CollisionJNI . btTriangleRaycastCallback_flags_get ( swigCPtr , this ) ; } public void setHitFraction ( float value ) { CollisionJNI . btTriangleRaycastCallback_hitFraction_set ( swigCPtr , this , value ) ; } public float getHitFraction ( ) { return CollisionJNI . btTriangleRaycastCallback_hitFraction_get ( swigCPtr , this ) ; } public btTriangleRaycastCallback ( Vector3 from , Vector3 to , long flags ) { this ( CollisionJNI . new_btTriangleRaycastCallback__SWIG_0 ( from , to , flags ) , true ) ; CollisionJNI . btTriangleRaycastCallback_director_connect ( this , swigCPtr , swigCMemOwn , true ) ; } public btTriangleRaycastCallback ( Vector3 from , Vector3 to ) { this ( CollisionJNI . new_btTriangleRaycastCallback__SWIG_1 ( from , to ) , true ) ; CollisionJNI . btTriangleRaycastCallback_director_connect ( this , swigCPtr , swigCMemOwn , true ) ; } public void processTriangle ( btVector3 triangle , int partId , int triangleIndex ) { if ( getClass ( ) = = btTriangleRaycastCallback . class ) CollisionJNI . btTriangleRaycastCallback_processTriangle ( swigCPtr , this , btVector3 . getCPtr ( triangle ) , triangle , partId , triangleIndex ) ; else CollisionJNI . btTriangleRaycastCallback_processTriangleSwigExplicitbtTriangleRaycastCallback ( swigCPtr , this , btVector3 . getCPtr ( triangle ) , triangle , partId , triangleIndex ) ; } public float reportHit ( Vector3 hitNormalLocal , float hitFraction , int partId , int triangleIndex ) { return CollisionJNI . btTriangleRaycastCallback_reportHit ( swigCPtr , this , hitNormalLocal , hitFraction , partId , triangleIndex ) ; } public final static class EFlags { public final static int kF_None = <int> ; public final static int kF_FilterBackfaces = <int> < < <int> ; public final static int kF_KeepUnflippedNormal = <int> < < <int> ; public final static int kF_UseSubSimplexConvexCastRaytest = <int> < < <int> ; public final static int kF_UseGjkConvexCastRaytest = <int> < < <int> ; public final static int kF_Terminator = <hex> ; } }
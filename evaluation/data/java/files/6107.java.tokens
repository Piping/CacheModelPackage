package rx . internal . operators ; import java . util . Iterator ; import java . util . NoSuchElementException ; import java . util . concurrent . Semaphore ; import java . util . concurrent . atomic . AtomicReference ; import rx . Notification ; import rx . Observable ; import rx . Subscriber ; import rx . exceptions . Exceptions ; public final class BlockingOperatorLatest { private BlockingOperatorLatest ( ) { throw new IllegalStateException ( <str> ) ; } public static < T > Iterable < T > latest ( final Observable < ? extends T > source ) { return new Iterable < T > ( ) { @Override public Iterator < T > iterator ( ) { LatestObserverIterator < T > lio = new LatestObserverIterator < T > ( ) ; source . materialize ( ) . subscribe ( lio ) ; return lio ; } } ; } static final class LatestObserverIterator < T > extends Subscriber < Notification < ? extends T > > implements Iterator < T > { final Semaphore notify = new Semaphore ( <int> ) ; final AtomicReference < Notification < ? extends T > > value = new AtomicReference < Notification < ? extends T > > ( ) ; @Override public void onNext ( Notification < ? extends T > args ) { boolean wasntAvailable = value . getAndSet ( args ) = = null ; if ( wasntAvailable ) { notify . release ( ) ; } } @Override public void onError ( Throwable e ) { } @Override public void onCompleted ( ) { } Notification < ? extends T > iNotif ; @Override public boolean hasNext ( ) { if ( iNotif ! = null & & iNotif . isOnError ( ) ) { throw Exceptions . propagate ( iNotif . getThrowable ( ) ) ; } if ( iNotif = = null | | ! iNotif . isOnCompleted ( ) ) { if ( iNotif = = null ) { try { notify . acquire ( ) ; } catch ( InterruptedException ex ) { unsubscribe ( ) ; Thread . currentThread ( ) . interrupt ( ) ; iNotif = Notification . createOnError ( ex ) ; throw Exceptions . propagate ( ex ) ; } @SuppressWarnings ( <str> ) Notification < ? extends T > n = value . getAndSet ( null ) ; iNotif = n ; if ( iNotif . isOnError ( ) ) { throw Exceptions . propagate ( iNotif . getThrowable ( ) ) ; } } } return ! iNotif . isOnCompleted ( ) ; } @Override public T next ( ) { if ( hasNext ( ) ) { if ( iNotif . isOnNext ( ) ) { T v = iNotif . getValue ( ) ; iNotif = null ; return v ; } } throw new NoSuchElementException ( ) ; } @Override public void remove ( ) { throw new UnsupportedOperationException ( <str> ) ; } } }
package org . junit . internal ; import java . io . PrintStream ; import java . text . NumberFormat ; import java . util . List ; import org . junit . runner . Description ; import org . junit . runner . Result ; import org . junit . runner . notification . Failure ; import org . junit . runner . notification . RunListener ; public class TextListener extends RunListener { private final PrintStream writer ; public TextListener ( JUnitSystem system ) { this ( system . out ( ) ) ; } public TextListener ( PrintStream writer ) { this . writer = writer ; } @Override public void testRunFinished ( Result result ) { printHeader ( result . getRunTime ( ) ) ; printFailures ( result ) ; printFooter ( result ) ; } @Override public void testStarted ( Description description ) { writer . append ( <str> ) ; } @Override public void testFailure ( Failure failure ) { writer . append ( <str> ) ; } @Override public void testIgnored ( Description description ) { writer . append ( <str> ) ; } private PrintStream getWriter ( ) { return writer ; } protected void printHeader ( long runTime ) { getWriter ( ) . println ( ) ; getWriter ( ) . println ( <str> + elapsedTimeAsString ( runTime ) ) ; } protected void printFailures ( Result result ) { List < Failure > failures = result . getFailures ( ) ; if ( failures . isEmpty ( ) ) { return ; } if ( failures . size ( ) = = <int> ) { getWriter ( ) . println ( <str> + failures . size ( ) + <str> ) ; } else { getWriter ( ) . println ( <str> + failures . size ( ) + <str> ) ; } int i = <int> ; for ( Failure each : failures ) { printFailure ( each , <str> + i + + ) ; } } protected void printFailure ( Failure each , String prefix ) { getWriter ( ) . println ( prefix + <str> + each . getTestHeader ( ) ) ; getWriter ( ) . print ( each . getTrace ( ) ) ; } protected void printFooter ( Result result ) { if ( result . wasSuccessful ( ) ) { getWriter ( ) . println ( ) ; getWriter ( ) . print ( <str> ) ; getWriter ( ) . println ( <str> + result . getRunCount ( ) + <str> + ( result . getRunCount ( ) = = <int> ? <str> : <str> ) + <str> ) ; } else { getWriter ( ) . println ( ) ; getWriter ( ) . println ( <str> ) ; getWriter ( ) . println ( <str> + result . getRunCount ( ) + <str> + result . getFailureCount ( ) ) ; } getWriter ( ) . println ( ) ; } protected String elapsedTimeAsString ( long runTime ) { return NumberFormat . getInstance ( ) . format ( ( double ) runTime / <int> ) ; } }
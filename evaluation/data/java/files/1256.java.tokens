package org . apache . cassandra . utils ; import java . io . DataInput ; import java . io . DataInputStream ; import java . io . IOException ; import org . apache . cassandra . io . util . DataInputPlus ; public class BytesReadTracker implements DataInputPlus { private long bytesRead ; final DataInput source ; public BytesReadTracker ( DataInput source ) { this . source = source ; } public long getBytesRead ( ) { return bytesRead ; } public void reset ( long count ) { bytesRead = count ; } public boolean readBoolean ( ) throws IOException { boolean bool = source . readBoolean ( ) ; bytesRead + = <int> ; return bool ; } public byte readByte ( ) throws IOException { byte b = source . readByte ( ) ; bytesRead + = <int> ; return b ; } public char readChar ( ) throws IOException { char c = source . readChar ( ) ; bytesRead + = <int> ; return c ; } public double readDouble ( ) throws IOException { double d = source . readDouble ( ) ; bytesRead + = <int> ; return d ; } public float readFloat ( ) throws IOException { float f = source . readFloat ( ) ; bytesRead + = <int> ; return f ; } public void readFully ( byte [ ] b , int off , int len ) throws IOException { source . readFully ( b , off , len ) ; bytesRead + = len ; } public void readFully ( byte [ ] b ) throws IOException { source . readFully ( b ) ; bytesRead + = b . length ; } public int readInt ( ) throws IOException { int i = source . readInt ( ) ; bytesRead + = <int> ; return i ; } public String readLine ( ) throws IOException { throw new UnsupportedOperationException ( ) ; } public long readLong ( ) throws IOException { long l = source . readLong ( ) ; bytesRead + = <int> ; return l ; } public short readShort ( ) throws IOException { short s = source . readShort ( ) ; bytesRead + = <int> ; return s ; } public String readUTF ( ) throws IOException { return DataInputStream . readUTF ( this ) ; } public int readUnsignedByte ( ) throws IOException { int i = source . readUnsignedByte ( ) ; bytesRead + = <int> ; return i ; } public int readUnsignedShort ( ) throws IOException { int i = source . readUnsignedShort ( ) ; bytesRead + = <int> ; return i ; } public int skipBytes ( int n ) throws IOException { int skipped = source . skipBytes ( n ) ; bytesRead + = skipped ; return skipped ; } } 

package org . gradle . groovy . scripts ; import org . codehaus . groovy . ast . ClassNode ; import org . gradle . api . Action ; import org . gradle . api . internal . initialization . ClassLoaderIds ; import org . gradle . api . internal . initialization . loadercache . ClassLoaderId ; import org . gradle . groovy . scripts . internal . CompiledScript ; import org . gradle . groovy . scripts . internal . CompileOperation ; import org . gradle . groovy . scripts . internal . ScriptClassCompiler ; import org . gradle . groovy . scripts . internal . ScriptRunnerFactory ; public class DefaultScriptCompilerFactory implements ScriptCompilerFactory { private final ScriptRunnerFactory scriptRunnerFactory ; private final ScriptClassCompiler scriptClassCompiler ; public DefaultScriptCompilerFactory ( ScriptClassCompiler scriptClassCompiler , ScriptRunnerFactory scriptRunnerFactory ) { this . scriptClassCompiler = scriptClassCompiler ; this . scriptRunnerFactory = scriptRunnerFactory ; } public ScriptCompiler createCompiler ( ScriptSource source ) { return new ScriptCompilerImpl ( source ) ; } private class ScriptCompilerImpl implements ScriptCompiler { private final ScriptSource source ; public ScriptCompilerImpl ( ScriptSource source ) { this . source = new CachingScriptSource ( source ) ; } @Override public < T extends Script , M > ScriptRunner < T , M > compile ( Class < T > scriptType , CompileOperation < M > extractingTransformer , ClassLoader classloader , Action < ? super ClassNode > verifier ) { ClassLoaderId classLoaderId = ClassLoaderIds . buildScript ( source . getFileName ( ) , extractingTransformer . getId ( ) ) ; CompiledScript < T , M > compiledScript = scriptClassCompiler . compile ( source , classloader , classLoaderId , extractingTransformer , scriptType , verifier ) ; return scriptRunnerFactory . create ( compiledScript , source , classloader ) ; } } } 

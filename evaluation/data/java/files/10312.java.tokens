package com . badlogic . gdx . tools . hiero . unicodefont ; import java . io . BufferedReader ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintStream ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . tools . hiero . unicodefont . effects . ConfigurableEffect ; import com . badlogic . gdx . tools . hiero . unicodefont . effects . ConfigurableEffect . Value ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class HieroSettings { private String fontName = <str> ; private int fontSize = <int> ; private boolean bold = false , italic = false ; private int paddingTop , paddingLeft , paddingBottom , paddingRight , paddingAdvanceX , paddingAdvanceY ; private int glyphPageWidth = <int> , glyphPageHeight = <int> ; private String glyphText = <str> ; private final List effects = new ArrayList ( ) ; private boolean nativeRendering ; private boolean font2Active = false ; private String font2File = <str> ; public HieroSettings ( ) { } public HieroSettings ( String hieroFileRef ) { try { BufferedReader reader = new BufferedReader ( new InputStreamReader ( Gdx . files . absolute ( hieroFileRef ) . read ( ) , <str> ) ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line = = null ) break ; line = line . trim ( ) ; if ( line . length ( ) = = <int> ) continue ; String [ ] pieces = line . split ( <str> , <int> ) ; String name = pieces [ <int> ] . trim ( ) ; String value = pieces [ <int> ] ; if ( name . equals ( <str> ) ) { fontName = value ; } else if ( name . equals ( <str> ) ) { fontSize = Integer . parseInt ( value ) ; } else if ( name . equals ( <str> ) ) { bold = Boolean . parseBoolean ( value ) ; } else if ( name . equals ( <str> ) ) { italic = Boolean . parseBoolean ( value ) ; } else if ( name . equals ( <str> ) ) { font2File = value ; } else if ( name . equals ( <str> ) ) { font2Active = Boolean . parseBoolean ( value ) ; } else if ( name . equals ( <str> ) ) { paddingTop = Integer . parseInt ( value ) ; } else if ( name . equals ( <str> ) ) { paddingRight = Integer . parseInt ( value ) ; } else if ( name . equals ( <str> ) ) { paddingBottom = Integer . parseInt ( value ) ; } else if ( name . equals ( <str> ) ) { paddingLeft = Integer . parseInt ( value ) ; } else if ( name . equals ( <str> ) ) { paddingAdvanceX = Integer . parseInt ( value ) ; } else if ( name . equals ( <str> ) ) { paddingAdvanceY = Integer . parseInt ( value ) ; } else if ( name . equals ( <str> ) ) { glyphPageWidth = Integer . parseInt ( value ) ; } else if ( name . equals ( <str> ) ) { glyphPageHeight = Integer . parseInt ( value ) ; } else if ( name . equals ( <str> ) ) { nativeRendering = Boolean . parseBoolean ( value ) ; } else if ( name . equals ( <str> ) ) { glyphText = value ; } else if ( name . equals ( <str> ) ) { try { effects . add ( Class . forName ( value ) . newInstance ( ) ) ; } catch ( Throwable ex ) { throw new GdxRuntimeException ( <str> + value , ex ) ; } } else if ( name . startsWith ( <str> ) ) { name = name . substring ( <int> ) ; ConfigurableEffect effect = ( ConfigurableEffect ) effects . get ( effects . size ( ) - <int> ) ; List values = effect . getValues ( ) ; for ( Iterator iter = values . iterator ( ) ; iter . hasNext ( ) ; ) { Value effectValue = ( Value ) iter . next ( ) ; if ( effectValue . getName ( ) . equals ( name ) ) { effectValue . setString ( value ) ; break ; } } effect . setValues ( values ) ; } } reader . close ( ) ; } catch ( Throwable ex ) { throw new GdxRuntimeException ( <str> + hieroFileRef , ex ) ; } } public int getPaddingTop ( ) { return paddingTop ; } public void setPaddingTop ( int paddingTop ) { this . paddingTop = paddingTop ; } public int getPaddingLeft ( ) { return paddingLeft ; } public void setPaddingLeft ( int paddingLeft ) { this . paddingLeft = paddingLeft ; } public int getPaddingBottom ( ) { return paddingBottom ; } public void setPaddingBottom ( int paddingBottom ) { this . paddingBottom = paddingBottom ; } public int getPaddingRight ( ) { return paddingRight ; } public void setPaddingRight ( int paddingRight ) { this . paddingRight = paddingRight ; } public int getPaddingAdvanceX ( ) { return paddingAdvanceX ; } public void setPaddingAdvanceX ( int paddingAdvanceX ) { this . paddingAdvanceX = paddingAdvanceX ; } public int getPaddingAdvanceY ( ) { return paddingAdvanceY ; } public void setPaddingAdvanceY ( int paddingAdvanceY ) { this . paddingAdvanceY = paddingAdvanceY ; } public int getGlyphPageWidth ( ) { return glyphPageWidth ; } public void setGlyphPageWidth ( int glyphPageWidth ) { this . glyphPageWidth = glyphPageWidth ; } public int getGlyphPageHeight ( ) { return glyphPageHeight ; } public void setGlyphPageHeight ( int glyphPageHeight ) { this . glyphPageHeight = glyphPageHeight ; } public String getFontName ( ) { return fontName ; } public void setFontName ( String fontName ) { this . fontName = fontName ; } public int getFontSize ( ) { return fontSize ; } public void setFontSize ( int fontSize ) { this . fontSize = fontSize ; } public boolean isBold ( ) { return bold ; } public void setBold ( boolean bold ) { this . bold = bold ; } public boolean isItalic ( ) { return italic ; } public void setItalic ( boolean italic ) { this . italic = italic ; } public List getEffects ( ) { return effects ; } public boolean getNativeRendering ( ) { return nativeRendering ; } public void setNativeRendering ( boolean nativeRendering ) { this . nativeRendering = nativeRendering ; } public String getGlyphText ( ) { return this . glyphText . replace ( <str> , <str> ) ; } public void setGlyphText ( String text ) { this . glyphText = text . replace ( <str> , <str> ) ; } public String getFont2File ( ) { return font2File ; } public void setFont2File ( String filename ) { this . font2File = filename ; } public boolean isFont2Active ( ) { return font2Active ; } public void setFont2Active ( boolean active ) { this . font2Active = active ; } public void save ( File file ) throws IOException { PrintStream out = new PrintStream ( file , <str> ) ; out . println ( <str> + fontName ) ; out . println ( <str> + fontSize ) ; out . println ( <str> + bold ) ; out . println ( <str> + italic ) ; out . println ( ) ; out . println ( <str> + font2File ) ; out . println ( <str> + font2Active ) ; out . println ( ) ; out . println ( <str> + paddingTop ) ; out . println ( <str> + paddingRight ) ; out . println ( <str> + paddingBottom ) ; out . println ( <str> + paddingLeft ) ; out . println ( <str> + paddingAdvanceX ) ; out . println ( <str> + paddingAdvanceY ) ; out . println ( ) ; out . println ( <str> + nativeRendering ) ; out . println ( <str> + glyphPageWidth ) ; out . println ( <str> + glyphPageHeight ) ; out . println ( <str> + glyphText ) ; out . println ( ) ; for ( Iterator iter = effects . iterator ( ) ; iter . hasNext ( ) ; ) { ConfigurableEffect effect = ( ConfigurableEffect ) iter . next ( ) ; out . println ( <str> + effect . getClass ( ) . getName ( ) ) ; for ( Iterator iter2 = effect . getValues ( ) . iterator ( ) ; iter2 . hasNext ( ) ; ) { Value value = ( Value ) iter2 . next ( ) ; out . println ( <str> + value . getName ( ) + <str> + value . getString ( ) ) ; } out . println ( ) ; } out . close ( ) ; } }
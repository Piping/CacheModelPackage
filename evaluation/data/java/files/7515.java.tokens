package org . apache . cassandra . utils . progress . jmx ; import java . util . Map ; import javax . management . Notification ; import javax . management . NotificationListener ; import javax . management . remote . JMXConnectionNotification ; import org . apache . cassandra . utils . progress . ProgressEvent ; import org . apache . cassandra . utils . progress . ProgressEventType ; import org . apache . cassandra . utils . progress . ProgressListener ; public abstract class JMXNotificationProgressListener implements ProgressListener , NotificationListener { public abstract boolean isInterestedIn ( String tag ) ; public void handleNotificationLost ( long timestamp , String message ) { } public void handleConnectionClosed ( long timestamp , String message ) { } public void handleConnectionFailed ( long timestamp , String message ) { } @SuppressWarnings ( <str> ) @Override public void handleNotification ( Notification notification , Object handback ) { switch ( notification . getType ( ) ) { case <str> : String tag = ( String ) notification . getSource ( ) ; if ( this . isInterestedIn ( tag ) ) { Map < String , Integer > progress = ( Map < String , Integer > ) notification . getUserData ( ) ; String message = notification . getMessage ( ) ; ProgressEvent event = new ProgressEvent ( ProgressEventType . values ( ) [ progress . get ( <str> ) ] , progress . get ( <str> ) , progress . get ( <str> ) , message ) ; this . progress ( tag , event ) ; } break ; case JMXConnectionNotification . NOTIFS_LOST : handleNotificationLost ( notification . getTimeStamp ( ) , notification . getMessage ( ) ) ; break ; case JMXConnectionNotification . FAILED : handleConnectionFailed ( notification . getTimeStamp ( ) , notification . getMessage ( ) ) ; break ; case JMXConnectionNotification . CLOSED : handleConnectionClosed ( notification . getTimeStamp ( ) , notification . getMessage ( ) ) ; break ; } } }
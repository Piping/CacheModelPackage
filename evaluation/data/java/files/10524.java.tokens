package com . badlogic . gdx . physics . box2d ; import com . badlogic . gdx . math . Vector2 ; public class Contact { protected long addr ; protected World world ; protected final WorldManifold worldManifold = new WorldManifold ( ) ; protected Contact ( World world , long addr ) { this . addr = addr ; this . world = world ; } private final float [ ] tmp = new float [ <int> ] ; public WorldManifold getWorldManifold ( ) { int numContactPoints = jniGetWorldManifold ( addr , tmp ) ; worldManifold . numContactPoints = numContactPoints ; worldManifold . normal . set ( tmp [ <int> ] , tmp [ <int> ] ) ; for ( int i = <int> ; i < numContactPoints ; i + + ) { Vector2 point = worldManifold . points [ i ] ; point . x = tmp [ <int> + i * <int> ] ; point . y = tmp [ <int> + i * <int> + <int> ] ; } worldManifold . separations [ <int> ] = tmp [ <int> ] ; worldManifold . separations [ <int> ] = tmp [ <int> ] ; return worldManifold ; } private native int jniGetWorldManifold ( long addr , float [ ] tmp ) ; public boolean isTouching ( ) { return jniIsTouching ( addr ) ; } private native boolean jniIsTouching ( long addr ) ; public void setEnabled ( boolean flag ) { jniSetEnabled ( addr , flag ) ; } private native void jniSetEnabled ( long addr , boolean flag ) ; public boolean isEnabled ( ) { return jniIsEnabled ( addr ) ; } private native boolean jniIsEnabled ( long addr ) ; public Fixture getFixtureA ( ) { return world . fixtures . get ( jniGetFixtureA ( addr ) ) ; } private native long jniGetFixtureA ( long addr ) ; public Fixture getFixtureB ( ) { return world . fixtures . get ( jniGetFixtureB ( addr ) ) ; } private native long jniGetFixtureB ( long addr ) ; public int getChildIndexA ( ) { return jniGetChildIndexA ( addr ) ; } private native int jniGetChildIndexA ( long addr ) ; public int getChildIndexB ( ) { return jniGetChildIndexB ( addr ) ; } private native int jniGetChildIndexB ( long addr ) ; public void setFriction ( float friction ) { jniSetFriction ( addr , friction ) ; } private native void jniSetFriction ( long addr , float friction ) ; public float getFriction ( ) { return jniGetFriction ( addr ) ; } private native float jniGetFriction ( long addr ) ; public void resetFriction ( ) { jniResetFriction ( addr ) ; } private native void jniResetFriction ( long addr ) ; public void setRestitution ( float restitution ) { jniSetRestitution ( addr , restitution ) ; } private native void jniSetRestitution ( long addr , float restitution ) ; public float getRestitution ( ) { return jniGetRestitution ( addr ) ; } private native float jniGetRestitution ( long addr ) ; public void ResetRestitution ( ) { jniResetRestitution ( addr ) ; } private native void jniResetRestitution ( long addr ) ; public float getTangentSpeed ( ) { return jniGetTangentSpeed ( addr ) ; } private native float jniGetTangentSpeed ( long addr ) ; public void setTangentSpeed ( float speed ) { jniSetTangentSpeed ( addr , speed ) ; } private native void jniSetTangentSpeed ( long addr , float speed ) ; }
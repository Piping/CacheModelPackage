package org . nd4j . linalg . inverse ; import org . apache . commons . math3 . linear . Array2DRowRealMatrix ; import org . apache . commons . math3 . linear . MatrixUtils ; import org . apache . commons . math3 . linear . RealMatrix ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; public class TestInvertMatrices extends BaseNd4jTest { public TestInvertMatrices ( ) { } public TestInvertMatrices ( Nd4jBackend backend ) { super ( backend ) ; } public TestInvertMatrices ( String name ) { super ( name ) ; } public TestInvertMatrices ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } @Test public void testInverse ( ) { RealMatrix matrix = new Array2DRowRealMatrix ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; RealMatrix inverse = MatrixUtils . inverse ( matrix ) ; INDArray arr = InvertMatrix . invert ( Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) , false ) ; for ( int i = <int> ; i < inverse . getRowDimension ( ) ; i + + ) { for ( int j = <int> ; j < inverse . getColumnDimension ( ) ; j + + ) { assertEquals ( arr . getDouble ( i , j ) , inverse . getEntry ( i , j ) , <int> e - <int> ) ; } } } @Override public char ordering ( ) { return <str> ; } } 

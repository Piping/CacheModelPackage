package io . netty . buffer ; import org . junit . Assert ; import org . junit . Test ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . nio . ReadOnlyBufferException ; import static io . netty . util . ReferenceCountUtil . releaseLater ; public class ReadOnlyDirectByteBufferBufTest { protected ByteBuf buffer ( ByteBuffer buffer ) { return new ReadOnlyByteBufferBuf ( UnpooledByteBufAllocator . DEFAULT , buffer ) ; } protected ByteBuffer allocate ( int size ) { return ByteBuffer . allocateDirect ( size ) ; } @Test ( expected = IllegalArgumentException . class ) public void testConstructWithWritable ( ) { releaseLater ( buffer ( allocate ( <int> ) ) ) ; } @Test ( expected = ReadOnlyBufferException . class ) public void testSetByte ( ) { ByteBuf buf = releaseLater ( buffer ( allocate ( <int> ) . asReadOnlyBuffer ( ) ) ) ; buf . setByte ( <int> , <int> ) ; } @Test ( expected = ReadOnlyBufferException . class ) public void testSetInt ( ) { ByteBuf buf = releaseLater ( buffer ( allocate ( <int> ) . asReadOnlyBuffer ( ) ) ) ; buf . setInt ( <int> , <int> ) ; } @Test ( expected = ReadOnlyBufferException . class ) public void testSetShort ( ) { ByteBuf buf = releaseLater ( buffer ( allocate ( <int> ) . asReadOnlyBuffer ( ) ) ) ; buf . setShort ( <int> , <int> ) ; } @Test ( expected = ReadOnlyBufferException . class ) public void testSetMedium ( ) { ByteBuf buf = releaseLater ( buffer ( allocate ( <int> ) . asReadOnlyBuffer ( ) ) ) ; buf . setMedium ( <int> , <int> ) ; } @Test ( expected = ReadOnlyBufferException . class ) public void testSetLong ( ) { ByteBuf buf = releaseLater ( buffer ( allocate ( <int> ) . asReadOnlyBuffer ( ) ) ) ; buf . setLong ( <int> , <int> ) ; } @Test ( expected = ReadOnlyBufferException . class ) public void testSetBytesViaArray ( ) { ByteBuf buf = releaseLater ( buffer ( allocate ( <int> ) . asReadOnlyBuffer ( ) ) ) ; buf . setBytes ( <int> , <str> . getBytes ( ) ) ; } @Test ( expected = ReadOnlyBufferException . class ) public void testSetBytesViaBuffer ( ) { ByteBuf buf = releaseLater ( buffer ( allocate ( <int> ) . asReadOnlyBuffer ( ) ) ) ; buf . setBytes ( <int> , Unpooled . copyInt ( <int> ) ) ; } @Test ( expected = ReadOnlyBufferException . class ) public void testSetBytesViaStream ( ) throws IOException { ByteBuf buf = releaseLater ( buffer ( ByteBuffer . allocateDirect ( <int> ) . asReadOnlyBuffer ( ) ) ) ; buf . setBytes ( <int> , new ByteArrayInputStream ( <str> . getBytes ( ) ) , <int> ) ; buf . release ( ) ; } @Test public void testGetReadByte ( ) { ByteBuf buf = releaseLater ( buffer ( ( ( ByteBuffer ) allocate ( <int> ) . put ( new byte [ ] { ( byte ) <int> , ( byte ) <int> } ) . flip ( ) ) . asReadOnlyBuffer ( ) ) ) ; Assert . assertEquals ( <int> , buf . getByte ( <int> ) ) ; Assert . assertEquals ( <int> , buf . getByte ( <int> ) ) ; Assert . assertEquals ( <int> , buf . readByte ( ) ) ; Assert . assertEquals ( <int> , buf . readByte ( ) ) ; Assert . assertFalse ( buf . isReadable ( ) ) ; } @Test public void testGetReadInt ( ) { ByteBuf buf = releaseLater ( buffer ( ( ( ByteBuffer ) allocate ( <int> ) . putInt ( <int> ) . putInt ( <int> ) . flip ( ) ) . asReadOnlyBuffer ( ) ) ) ; Assert . assertEquals ( <int> , buf . getInt ( <int> ) ) ; Assert . assertEquals ( <int> , buf . getInt ( <int> ) ) ; Assert . assertEquals ( <int> , buf . readInt ( ) ) ; Assert . assertEquals ( <int> , buf . readInt ( ) ) ; Assert . assertFalse ( buf . isReadable ( ) ) ; } @Test public void testGetReadShort ( ) { ByteBuf buf = releaseLater ( buffer ( ( ( ByteBuffer ) allocate ( <int> ) . putShort ( ( short ) <int> ) . putShort ( ( short ) <int> ) . flip ( ) ) . asReadOnlyBuffer ( ) ) ) ; Assert . assertEquals ( <int> , buf . getShort ( <int> ) ) ; Assert . assertEquals ( <int> , buf . getShort ( <int> ) ) ; Assert . assertEquals ( <int> , buf . readShort ( ) ) ; Assert . assertEquals ( <int> , buf . readShort ( ) ) ; Assert . assertFalse ( buf . isReadable ( ) ) ; } @Test public void testGetReadLong ( ) { ByteBuf buf = releaseLater ( buffer ( ( ( ByteBuffer ) allocate ( <int> ) . putLong ( <int> ) . putLong ( <int> ) . flip ( ) ) . asReadOnlyBuffer ( ) ) ) ; Assert . assertEquals ( <int> , buf . getLong ( <int> ) ) ; Assert . assertEquals ( <int> , buf . getLong ( <int> ) ) ; Assert . assertEquals ( <int> , buf . readLong ( ) ) ; Assert . assertEquals ( <int> , buf . readLong ( ) ) ; Assert . assertFalse ( buf . isReadable ( ) ) ; } @Test public void testCopy ( ) { ByteBuf buf = releaseLater ( buffer ( ( ( ByteBuffer ) allocate ( <int> ) . putLong ( <int> ) . putLong ( <int> ) . flip ( ) ) . asReadOnlyBuffer ( ) ) ) ; ByteBuf copy = releaseLater ( buf . copy ( ) ) ; Assert . assertEquals ( buf , copy ) ; } @Test public void testCopyWithOffset ( ) { ByteBuf buf = releaseLater ( buffer ( ( ( ByteBuffer ) allocate ( <int> ) . putLong ( <int> ) . putLong ( <int> ) . flip ( ) ) . asReadOnlyBuffer ( ) ) ) ; ByteBuf copy = releaseLater ( buf . copy ( <int> , <int> ) ) ; Assert . assertEquals ( buf . slice ( <int> , <int> ) , copy ) ; } @Test public void testWrapBufferWithNonZeroPosition ( ) { ByteBuf buf = releaseLater ( buffer ( ( ( ByteBuffer ) allocate ( <int> ) . putLong ( <int> ) . flip ( ) . position ( <int> ) ) . asReadOnlyBuffer ( ) ) ) ; ByteBuf slice = buf . slice ( ) ; Assert . assertEquals ( buf , slice ) ; } @Test public void testWrapBufferRoundTrip ( ) { ByteBuf buf = releaseLater ( buffer ( ( ( ByteBuffer ) allocate ( <int> ) . putInt ( <int> ) . putInt ( <int> ) . flip ( ) ) . asReadOnlyBuffer ( ) ) ) ; Assert . assertEquals ( <int> , buf . readInt ( ) ) ; ByteBuffer nioBuffer = buf . nioBuffer ( ) ; Assert . assertEquals ( <int> , nioBuffer . getInt ( ) ) ; } } 

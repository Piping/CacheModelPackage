package org . gradle . process . internal ; import org . gradle . api . Action ; import org . gradle . api . internal . ClassPathRegistry ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . logging . LogLevel ; import org . gradle . internal . Factory ; import org . gradle . internal . classloader . ClasspathUtil ; import org . gradle . internal . id . IdGenerator ; import org . gradle . messaging . remote . Address ; import org . gradle . messaging . remote . ConnectionAcceptor ; import org . gradle . messaging . remote . MessagingServer ; import org . gradle . messaging . remote . ObjectConnection ; import org . gradle . process . internal . child . ApplicationClassesInIsolatedClassLoaderWorkerFactory ; import org . gradle . process . internal . child . ApplicationClassesInSystemClassLoaderWorkerFactory ; import org . gradle . process . internal . child . WorkerFactory ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . net . URL ; import java . util . List ; import java . util . concurrent . TimeUnit ; public class DefaultWorkerProcessFactory implements Factory < WorkerProcessBuilder > { private static final Logger LOGGER = LoggerFactory . getLogger ( DefaultWorkerProcessFactory . class ) ; private final LogLevel workerLogLevel ; private final MessagingServer server ; private final ClassPathRegistry classPathRegistry ; private final FileResolver resolver ; private final IdGenerator < ? > idGenerator ; private final File gradleUserHomeDir ; public DefaultWorkerProcessFactory ( LogLevel workerLogLevel , MessagingServer server , ClassPathRegistry classPathRegistry , FileResolver resolver , IdGenerator < ? > idGenerator , File gradleUserHomeDir ) { this . workerLogLevel = workerLogLevel ; this . server = server ; this . classPathRegistry = classPathRegistry ; this . resolver = resolver ; this . idGenerator = idGenerator ; this . gradleUserHomeDir = gradleUserHomeDir ; } public WorkerProcessBuilder create ( ) { return new DefaultWorkerProcessBuilder ( ) ; } private class DefaultWorkerProcessBuilder extends WorkerProcessBuilder { public DefaultWorkerProcessBuilder ( ) { super ( resolver ) ; setLogLevel ( workerLogLevel ) ; setGradleUserHomeDir ( gradleUserHomeDir ) ; } @Override public WorkerProcess build ( ) { if ( getWorker ( ) = = null ) { throw new IllegalStateException ( <str> ) ; } final DefaultWorkerProcess workerProcess = new DefaultWorkerProcess ( <int> , TimeUnit . SECONDS ) ; ConnectionAcceptor acceptor = server . accept ( new Action < ObjectConnection > ( ) { public void execute ( ObjectConnection connection ) { workerProcess . onConnect ( connection ) ; } } ) ; workerProcess . startAccepting ( acceptor ) ; Address localAddress = acceptor . getAddress ( ) ; List < URL > implementationClassPath = ClasspathUtil . getClasspath ( getWorker ( ) . getClass ( ) . getClassLoader ( ) ) ; Object id = idGenerator . generateId ( ) ; String displayName = getBaseName ( ) + <str> + id ; WorkerFactory workerFactory ; if ( isLoadApplicationInSystemClassLoader ( ) ) { workerFactory = new ApplicationClassesInSystemClassLoaderWorkerFactory ( id , displayName , this , implementationClassPath , localAddress , classPathRegistry ) ; } else { workerFactory = new ApplicationClassesInIsolatedClassLoaderWorkerFactory ( id , displayName , this , implementationClassPath , localAddress , classPathRegistry ) ; } LOGGER . debug ( <str> , displayName ) ; LOGGER . debug ( <str> , getApplicationClasspath ( ) ) ; LOGGER . debug ( <str> , implementationClassPath ) ; JavaExecHandleBuilder javaCommand = getJavaCommand ( ) ; workerFactory . prepareJavaCommand ( javaCommand ) ; javaCommand . setDisplayName ( displayName ) ; javaCommand . args ( <str> + displayName + <str> ) ; ExecHandle execHandle = javaCommand . build ( ) ; workerProcess . setExecHandle ( execHandle ) ; return workerProcess ; } } } 

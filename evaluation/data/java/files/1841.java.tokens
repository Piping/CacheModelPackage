package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ITERATOR_REMOVE ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEY_QUERIES ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUE_QUERIES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . lang . reflect . Method ; import java . util . Iterator ; import java . util . Map . Entry ; import java . util . Set ; @GwtCompatible public class MapEntrySetTester < K , V > extends AbstractMapTester < K , V > { private enum IncomparableType { INSTANCE ; } @CollectionSize.Require ( ONE ) @CollectionFeature.Require ( SUPPORTS_ITERATOR_REMOVE ) public void testEntrySetIteratorRemove ( ) { Set < Entry < K , V > > entrySet = getMap ( ) . entrySet ( ) ; Iterator < Entry < K , V > > entryItr = entrySet . iterator ( ) ; assertEquals ( e0 ( ) , entryItr . next ( ) ) ; entryItr . remove ( ) ; assertTrue ( getMap ( ) . isEmpty ( ) ) ; assertFalse ( entrySet . contains ( e0 ( ) ) ) ; } public void testContainsEntryWithIncomparableKey ( ) { try { assertFalse ( getMap ( ) . entrySet ( ) . contains ( Helpers . mapEntry ( IncomparableType . INSTANCE , v0 ( ) ) ) ) ; } catch ( ClassCastException acceptable ) { } } public void testContainsEntryWithIncomparableValue ( ) { try { assertFalse ( getMap ( ) . entrySet ( ) . contains ( Helpers . mapEntry ( k0 ( ) , IncomparableType . INSTANCE ) ) ) ; } catch ( ClassCastException acceptable ) { } } @MapFeature.Require ( ALLOWS_NULL_KEY_QUERIES ) public void testContainsEntryWithNullKeyAbsent ( ) { assertFalse ( getMap ( ) . entrySet ( ) . contains ( Helpers . mapEntry ( null , v0 ( ) ) ) ) ; } @CollectionSize.Require ( absent = ZERO ) @MapFeature.Require ( ALLOWS_NULL_KEYS ) public void testContainsEntryWithNullKeyPresent ( ) { initMapWithNullKey ( ) ; assertTrue ( getMap ( ) . entrySet ( ) . contains ( Helpers . mapEntry ( null , getValueForNullKey ( ) ) ) ) ; } @MapFeature.Require ( ALLOWS_NULL_VALUE_QUERIES ) public void testContainsEntryWithNullValueAbsent ( ) { assertFalse ( getMap ( ) . entrySet ( ) . contains ( Helpers . mapEntry ( k0 ( ) , null ) ) ) ; } @CollectionSize.Require ( absent = ZERO ) @MapFeature.Require ( ALLOWS_NULL_VALUES ) public void testContainsEntryWithNullValuePresent ( ) { initMapWithNullValue ( ) ; assertTrue ( getMap ( ) . entrySet ( ) . contains ( Helpers . mapEntry ( getKeyForNullValue ( ) , null ) ) ) ; } @GwtIncompatible ( <str> ) public static Method getContainsEntryWithIncomparableKeyMethod ( ) { return Helpers . getMethod ( MapEntrySetTester . class , <str> ) ; } @GwtIncompatible ( <str> ) public static Method getContainsEntryWithIncomparableValueMethod ( ) { return Helpers . getMethod ( MapEntrySetTester . class , <str> ) ; } }
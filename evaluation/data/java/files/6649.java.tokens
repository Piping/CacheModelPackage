package org . apache . cassandra . triggers ; import java . io . File ; import java . io . FilenameFilter ; import java . io . IOError ; import java . io . IOException ; import java . net . URL ; import java . net . URLClassLoader ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import com . google . common . io . Files ; public class CustomClassLoader extends URLClassLoader { private static final Logger logger = LoggerFactory . getLogger ( CustomClassLoader . class ) ; private final Map < String , Class < ? > > cache = new ConcurrentHashMap < String , Class < ? > > ( ) ; private final ClassLoader parent ; public CustomClassLoader ( ClassLoader parent ) { super ( new URL [ ] { } , parent ) ; assert parent ! = null ; this . parent = getParent ( ) ; } public CustomClassLoader ( ClassLoader parent , File classPathDir ) { super ( new URL [ ] { } , parent ) ; assert parent ! = null ; this . parent = getParent ( ) ; addClassPath ( classPathDir ) ; } public void addClassPath ( File dir ) { if ( dir = = null | | ! dir . exists ( ) ) return ; FilenameFilter filter = new FilenameFilter ( ) { public boolean accept ( File dir , String name ) { return name . endsWith ( <str> ) ; } } ; for ( File inputJar : dir . listFiles ( filter ) ) { File lib = new File ( System . getProperty ( <str> ) , <str> ) ; if ( ! lib . exists ( ) ) { lib . mkdir ( ) ; lib . deleteOnExit ( ) ; } try { File out = File . createTempFile ( <str> , <str> , lib ) ; out . deleteOnExit ( ) ; logger . info ( <str> , inputJar . getAbsolutePath ( ) ) ; Files . copy ( inputJar , out ) ; addURL ( out . toURI ( ) . toURL ( ) ) ; } catch ( IOException ex ) { throw new IOError ( ex ) ; } } } @Override public Class < ? > loadClass ( String name ) throws ClassNotFoundException { Class < ? > clazz = cache . get ( name ) ; if ( clazz = = null ) return loadClassInternal ( name ) ; return clazz ; } public synchronized Class < ? > loadClassInternal ( String name ) throws ClassNotFoundException { try { return parent . loadClass ( name ) ; } catch ( ClassNotFoundException ex ) { logger . trace ( <str> , ex ) ; } Class < ? > clazz = this . findClass ( name ) ; cache . put ( name , clazz ) ; return clazz ; } }
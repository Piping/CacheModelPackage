package org . elasticsearch . rest . action . admin . indices . template . put ; import org . elasticsearch . action . admin . indices . template . put . PutIndexTemplateRequest ; import org . elasticsearch . action . admin . indices . template . put . PutIndexTemplateResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; public class RestPutIndexTemplateAction extends BaseRestHandler { @Inject public RestPutIndexTemplateAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( RestRequest . Method . PUT , <str> , this ) ; controller . registerHandler ( RestRequest . Method . POST , <str> , this ) ; } @SuppressWarnings ( { <str> } ) @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { PutIndexTemplateRequest putRequest = new PutIndexTemplateRequest ( request . param ( <str> ) ) ; putRequest . template ( request . param ( <str> , putRequest . template ( ) ) ) ; putRequest . order ( request . paramAsInt ( <str> , putRequest . order ( ) ) ) ; putRequest . masterNodeTimeout ( request . paramAsTime ( <str> , putRequest . masterNodeTimeout ( ) ) ) ; putRequest . create ( request . paramAsBoolean ( <str> , false ) ) ; putRequest . cause ( request . param ( <str> , <str> ) ) ; putRequest . source ( request . content ( ) ) ; client . admin ( ) . indices ( ) . putTemplate ( putRequest , new AcknowledgedRestListener < PutIndexTemplateResponse > ( channel ) ) ; } } 

package com . google . common . base ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import javax . annotation . CheckReturnValue ; @CheckReturnValue @GwtCompatible public final class Ascii { private Ascii ( ) { } public static final byte NUL = <int> ; public static final byte SOH = <int> ; public static final byte STX = <int> ; public static final byte ETX = <int> ; public static final byte EOT = <int> ; public static final byte ENQ = <int> ; public static final byte ACK = <int> ; public static final byte BEL = <int> ; public static final byte BS = <int> ; public static final byte HT = <int> ; public static final byte LF = <int> ; public static final byte NL = <int> ; public static final byte VT = <int> ; public static final byte FF = <int> ; public static final byte CR = <int> ; public static final byte SO = <int> ; public static final byte SI = <int> ; public static final byte DLE = <int> ; public static final byte DC1 = <int> ; public static final byte XON = <int> ; public static final byte DC2 = <int> ; public static final byte DC3 = <int> ; public static final byte XOFF = <int> ; public static final byte DC4 = <int> ; public static final byte NAK = <int> ; public static final byte SYN = <int> ; public static final byte ETB = <int> ; public static final byte CAN = <int> ; public static final byte EM = <int> ; public static final byte SUB = <int> ; public static final byte ESC = <int> ; public static final byte FS = <int> ; public static final byte GS = <int> ; public static final byte RS = <int> ; public static final byte US = <int> ; public static final byte SP = <int> ; public static final byte SPACE = <int> ; public static final byte DEL = <int> ; public static final char MIN = <int> ; public static final char MAX = <int> ; public static String toLowerCase ( String string ) { int length = string . length ( ) ; for ( int i = <int> ; i < length ; i + + ) { if ( isUpperCase ( string . charAt ( i ) ) ) { char [ ] chars = string . toCharArray ( ) ; for ( ; i < length ; i + + ) { char c = chars [ i ] ; if ( isUpperCase ( c ) ) { chars [ i ] = ( char ) ( c ^ <hex> ) ; } } return String . valueOf ( chars ) ; } } return string ; } public static String toLowerCase ( CharSequence chars ) { if ( chars instanceof String ) { return toLowerCase ( ( String ) chars ) ; } int length = chars . length ( ) ; StringBuilder builder = new StringBuilder ( length ) ; for ( int i = <int> ; i < length ; i + + ) { builder . append ( toLowerCase ( chars . charAt ( i ) ) ) ; } return builder . toString ( ) ; } public static char toLowerCase ( char c ) { return isUpperCase ( c ) ? ( char ) ( c ^ <hex> ) : c ; } public static String toUpperCase ( String string ) { int length = string . length ( ) ; for ( int i = <int> ; i < length ; i + + ) { if ( isLowerCase ( string . charAt ( i ) ) ) { char [ ] chars = string . toCharArray ( ) ; for ( ; i < length ; i + + ) { char c = chars [ i ] ; if ( isLowerCase ( c ) ) { chars [ i ] = ( char ) ( c & <hex> ) ; } } return String . valueOf ( chars ) ; } } return string ; } public static String toUpperCase ( CharSequence chars ) { if ( chars instanceof String ) { return toUpperCase ( ( String ) chars ) ; } int length = chars . length ( ) ; StringBuilder builder = new StringBuilder ( length ) ; for ( int i = <int> ; i < length ; i + + ) { builder . append ( toUpperCase ( chars . charAt ( i ) ) ) ; } return builder . toString ( ) ; } public static char toUpperCase ( char c ) { return isLowerCase ( c ) ? ( char ) ( c & <hex> ) : c ; } public static boolean isLowerCase ( char c ) { return ( c > = <str> ) & & ( c < = <str> ) ; } public static boolean isUpperCase ( char c ) { return ( c > = <str> ) & & ( c < = <str> ) ; } @Beta public static String truncate ( CharSequence seq , int maxLength , String truncationIndicator ) { checkNotNull ( seq ) ; int truncationLength = maxLength - truncationIndicator . length ( ) ; checkArgument ( truncationLength > = <int> , <str> , maxLength , truncationIndicator . length ( ) ) ; if ( seq . length ( ) < = maxLength ) { String string = seq . toString ( ) ; if ( string . length ( ) < = maxLength ) { return string ; } seq = string ; } return new StringBuilder ( maxLength ) . append ( seq , <int> , truncationLength ) . append ( truncationIndicator ) . toString ( ) ; } @Beta public static boolean equalsIgnoreCase ( CharSequence s1 , CharSequence s2 ) { int length = s1 . length ( ) ; if ( s1 = = s2 ) { return true ; } if ( length ! = s2 . length ( ) ) { return false ; } for ( int i = <int> ; i < length ; i + + ) { char c1 = s1 . charAt ( i ) ; char c2 = s2 . charAt ( i ) ; if ( c1 = = c2 ) { continue ; } int alphaIndex = getAlphaIndex ( c1 ) ; if ( alphaIndex < <int> & & alphaIndex = = getAlphaIndex ( c2 ) ) { continue ; } return false ; } return true ; } private static int getAlphaIndex ( char c ) { return ( char ) ( ( c | <hex> ) - <str> ) ; } }
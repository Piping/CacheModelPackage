package com . google . common . util . concurrent ; import com . google . common . annotations . Beta ; import java . util . concurrent . Executor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; @Beta public interface Service { Service startAsync ( ) ; boolean isRunning ( ) ; State state ( ) ; Service stopAsync ( ) ; void awaitRunning ( ) ; void awaitRunning ( long timeout , TimeUnit unit ) throws TimeoutException ; void awaitTerminated ( ) ; void awaitTerminated ( long timeout , TimeUnit unit ) throws TimeoutException ; Throwable failureCause ( ) ; void addListener ( Listener listener , Executor executor ) ; @Beta enum State { NEW { @Override boolean isTerminal ( ) { return false ; } } , STARTING { @Override boolean isTerminal ( ) { return false ; } } , RUNNING { @Override boolean isTerminal ( ) { return false ; } } , STOPPING { @Override boolean isTerminal ( ) { return false ; } } , TERMINATED { @Override boolean isTerminal ( ) { return true ; } } , FAILED { @Override boolean isTerminal ( ) { return true ; } } ; abstract boolean isTerminal ( ) ; } @Beta abstract class Listener { public void starting ( ) { } public void running ( ) { } public void stopping ( State from ) { } public void terminated ( State from ) { } public void failed ( State from , Throwable failure ) { } } } 

package rx . util ; import rx . Notification ; import rx . Observable ; import rx . functions . Func1 ; import rx . functions . Func2 ; public final class AssertObservable { private AssertObservable ( ) { throw new IllegalStateException ( <str> ) ; } public static < T > void assertObservableEqualsBlocking ( Observable < T > expected , Observable < T > actual ) { assertObservableEqualsBlocking ( null , expected , actual ) ; } public static < T > void assertObservableEqualsBlocking ( String message , Observable < T > expected , Observable < T > actual ) { assertObservableEquals ( expected , actual ) . toBlocking ( ) . lastOrDefault ( null ) ; } public static < T > Observable < Void > assertObservableEquals ( Observable < T > expected , Observable < T > actual ) { return assertObservableEquals ( null , expected , actual ) ; } public static < T > Observable < Void > assertObservableEquals ( final String message , Observable < T > expected , Observable < T > actual ) { if ( actual = = null & & expected ! = null ) { return Observable . error ( new AssertionError ( ( message ! = null ? message + <str> : <str> ) + <str> ) ) ; } if ( actual ! = null & & expected = = null ) { return Observable . error ( new AssertionError ( ( message ! = null ? message + <str> : <str> ) + <str> ) ) ; } if ( actual = = null & & expected = = null ) { return Observable . empty ( ) ; } Func2 < ? super Notification < T > , ? super Notification < T > , Notification < String > > zipFunction = new Func2 < Notification < T > , Notification < T > , Notification < String > > ( ) { @Override public Notification < String > call ( Notification < T > expectedNotfication , Notification < T > actualNotification ) { if ( expectedNotfication . equals ( actualNotification ) ) { StringBuilder message = new StringBuilder ( ) ; message . append ( expectedNotfication . getKind ( ) ) ; if ( expectedNotfication . hasValue ( ) ) message . append ( <str> ) . append ( expectedNotfication . getValue ( ) ) ; if ( expectedNotfication . hasThrowable ( ) ) message . append ( <str> ) . append ( expectedNotfication . getThrowable ( ) ) ; return Notification . createOnNext ( <str> + message . toString ( ) ) ; } else { StringBuilder error = new StringBuilder ( ) ; error . append ( <str> ) . append ( expectedNotfication . getKind ( ) ) ; if ( expectedNotfication . hasValue ( ) ) error . append ( <str> ) . append ( expectedNotfication . getValue ( ) ) ; if ( expectedNotfication . hasThrowable ( ) ) error . append ( <str> ) . append ( expectedNotfication . getThrowable ( ) ) ; error . append ( <str> ) . append ( actualNotification . getKind ( ) ) ; if ( actualNotification . hasValue ( ) ) error . append ( <str> ) . append ( actualNotification . getValue ( ) ) ; if ( actualNotification . hasThrowable ( ) ) error . append ( <str> ) . append ( actualNotification . getThrowable ( ) ) ; error . append ( <str> ) ; return Notification . createOnError ( new AssertionError ( error . toString ( ) ) ) ; } } } ; Func2 < Notification < String > , Notification < String > , Notification < String > > accumulator = new Func2 < Notification < String > , Notification < String > , Notification < String > > ( ) { @Override public Notification < String > call ( Notification < String > a , Notification < String > b ) { String message = a . isOnError ( ) ? a . getThrowable ( ) . getMessage ( ) : a . getValue ( ) ; boolean fail = a . isOnError ( ) ; message + = <str> + ( b . isOnError ( ) ? b . getThrowable ( ) . getMessage ( ) : b . getValue ( ) ) ; fail | = b . isOnError ( ) ; if ( fail ) return Notification . createOnError ( new AssertionError ( message ) ) ; else return Notification . createOnNext ( message ) ; } } ; Observable < Void > outcomeObservable = Observable . zip ( expected . materialize ( ) , actual . materialize ( ) , zipFunction ) . reduce ( accumulator ) . map ( new Func1 < Notification < String > , Notification < Void > > ( ) { @Override public Notification < Void > call ( Notification < String > outcome ) { if ( outcome . isOnError ( ) ) { String fullMessage = ( message ! = null ? message + <str> : <str> ) + <str> + outcome . getThrowable ( ) . getMessage ( ) ; return Notification . createOnError ( new AssertionError ( fullMessage ) ) ; } return Notification . createOnCompleted ( ) ; } } ) . dematerialize ( ) ; return outcomeObservable ; } } 

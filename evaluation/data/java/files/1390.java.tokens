package org . gradle . model . internal . manage . schema . extract ; import com . google . common . collect . ImmutableSet ; import org . gradle . internal . Cast ; import org . gradle . model . internal . core . FactoryBasedNodeInitializer ; import org . gradle . model . internal . core . InstanceFactory ; import org . gradle . model . internal . core . NodeInitializer ; import org . gradle . model . internal . manage . schema . ModelSchema ; import org . gradle . model . internal . manage . schema . StructSchema ; import org . gradle . model . internal . type . ModelType ; public class FactoryBasedNodeInitializerExtractionStrategy < T > implements NodeInitializerExtractionStrategy { protected final InstanceFactory < T > instanceFactory ; public FactoryBasedNodeInitializerExtractionStrategy ( InstanceFactory < T > instanceFactory ) { this . instanceFactory = instanceFactory ; } @Override public < S > NodeInitializer extractNodeInitializer ( ModelSchema < S > schema ) { if ( ! instanceFactory . getBaseInterface ( ) . isAssignableFrom ( schema . getType ( ) ) ) { return null ; } return getNodeInitializer ( Cast . < ModelSchema < ? extends T > > uncheckedCast ( schema ) ) ; } private < S extends T > NodeInitializer getNodeInitializer ( final ModelSchema < S > schema ) { StructSchema < S > managedSchema = Cast . uncheckedCast ( schema ) ; return new FactoryBasedNodeInitializer < T , S > ( instanceFactory , managedSchema ) ; } @Override public Iterable < ModelType < ? > > supportedTypes ( ) { return ImmutableSet . < ModelType < ? > > copyOf ( instanceFactory . getSupportedTypes ( ) ) ; } } 

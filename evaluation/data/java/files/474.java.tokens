package org . elasticsearch . plugin . discovery . gce ; import com . google . api . client . http . HttpHeaders ; import com . google . api . client . util . ClassInfo ; import org . elasticsearch . SpecialPermission ; import org . elasticsearch . cloud . gce . GceComputeService ; import org . elasticsearch . cloud . gce . GceModule ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . component . LifecycleComponent ; import org . elasticsearch . common . inject . Module ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . DiscoveryModule ; import org . elasticsearch . discovery . gce . GceDiscovery ; import org . elasticsearch . discovery . gce . GceUnicastHostsProvider ; import org . elasticsearch . plugins . Plugin ; import java . security . AccessController ; import java . security . PrivilegedAction ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; public class GceDiscoveryPlugin extends Plugin { static { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm ! = null ) { sm . checkPermission ( new SpecialPermission ( ) ) ; } AccessController . doPrivileged ( new PrivilegedAction < Void > ( ) { @Override public Void run ( ) { ClassInfo . of ( HttpHeaders . class , true ) ; return null ; } } ) ; } private final Settings settings ; protected final ESLogger logger = Loggers . getLogger ( GceDiscoveryPlugin . class ) ; public GceDiscoveryPlugin ( Settings settings ) { this . settings = settings ; } @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } @Override public Collection < Module > nodeModules ( ) { List < Module > modules = new ArrayList < > ( ) ; if ( isDiscoveryAlive ( settings , logger ) ) { modules . add ( new GceModule ( ) ) ; } return modules ; } @Override public Collection < Class < ? extends LifecycleComponent > > nodeServices ( ) { Collection < Class < ? extends LifecycleComponent > > services = new ArrayList < > ( ) ; if ( isDiscoveryAlive ( settings , logger ) ) { services . add ( GceModule . getComputeServiceImpl ( ) ) ; } return services ; } public void onModule ( DiscoveryModule discoveryModule ) { if ( isDiscoveryAlive ( settings , logger ) ) { discoveryModule . addDiscoveryType ( <str> , GceDiscovery . class ) ; discoveryModule . addUnicastHostProvider ( GceUnicastHostsProvider . class ) ; } } public static boolean isDiscoveryAlive ( Settings settings , ESLogger logger ) { if ( GceDiscovery . GCE . equalsIgnoreCase ( settings . get ( <str> ) ) = = false ) { logger . debug ( <str> , GceDiscovery . GCE ) ; return false ; } if ( checkProperty ( GceComputeService . Fields . PROJECT , settings . get ( GceComputeService . Fields . PROJECT ) , logger ) = = false | | checkProperty ( GceComputeService . Fields . ZONE , settings . getAsArray ( GceComputeService . Fields . ZONE ) , logger ) = = false ) { logger . debug ( <str> + <str> , GceComputeService . Fields . PROJECT , GceComputeService . Fields . ZONE ) ; return false ; } logger . trace ( <str> ) ; return true ; } private static boolean checkProperty ( String name , String value , ESLogger logger ) { if ( ! Strings . hasText ( value ) ) { logger . warn ( <str> , name ) ; return false ; } return true ; } private static boolean checkProperty ( String name , String [ ] values , ESLogger logger ) { if ( values = = null | | values . length = = <int> ) { logger . warn ( <str> , name ) ; return false ; } return true ; } } 

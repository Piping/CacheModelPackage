package org . gradle . gradleplugin . userinterface . swing . standalone ; import org . gradle . internal . UncheckedException ; import javax . swing . * ; import java . lang . reflect . InvocationTargetException ; import java . util . concurrent . CountDownLatch ; public class BlockingApplication { public static void launchAndBlock ( ) { if ( SwingUtilities . isEventDispatchThread ( ) ) { throw new RuntimeException ( <str> ) ; } final CountDownLatch completed = new CountDownLatch ( <int> ) ; try { SwingUtilities . invokeAndWait ( new Runnable ( ) { public void run ( ) { new Application ( new Application . LifecycleListener ( ) { public void hasShutDown ( ) { completed . countDown ( ) ; } } ) ; } } ) ; completed . await ( ) ; } catch ( InterruptedException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } catch ( InvocationTargetException e ) { throw UncheckedException . unwrapAndRethrow ( e ) ; } } } 

package org . apache . cassandra . net ; import java . net . InetAddress ; import java . util . UUID ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . MockSchema ; import org . apache . cassandra . db . BufferDecoratedKey ; import org . apache . cassandra . db . ConsistencyLevel ; import org . apache . cassandra . db . Mutation ; import org . apache . cassandra . db . PartitionColumns ; import org . apache . cassandra . db . partitions . PartitionUpdate ; import org . apache . cassandra . dht . Murmur3Partitioner ; import org . apache . cassandra . net . MessagingService . Verb ; import org . apache . cassandra . service . paxos . Commit ; import org . apache . cassandra . utils . ByteBufferUtil ; public class WriteCallbackInfoTest { @Test public void testShouldHint ( ) { testShouldHint ( Verb . COUNTER_MUTATION , ConsistencyLevel . ALL , true , false ) ; for ( Verb verb : new Verb [ ] { Verb . PAXOS_COMMIT , Verb . MUTATION } ) { testShouldHint ( verb , ConsistencyLevel . ALL , true , true ) ; testShouldHint ( verb , ConsistencyLevel . ANY , true , false ) ; testShouldHint ( verb , ConsistencyLevel . ALL , false , false ) ; } } private void testShouldHint ( Verb verb , ConsistencyLevel cl , boolean allowHints , boolean expectHint ) { Object payload = verb = = Verb . PAXOS_COMMIT ? new Commit ( UUID . randomUUID ( ) , new PartitionUpdate ( MockSchema . newCFMetaData ( <str> , <str> ) , ByteBufferUtil . EMPTY_BYTE_BUFFER , PartitionColumns . NONE , <int> ) ) : new Mutation ( <str> , new BufferDecoratedKey ( new Murmur3Partitioner . LongToken ( <int> ) , ByteBufferUtil . EMPTY_BYTE_BUFFER ) ) ; WriteCallbackInfo wcbi = new WriteCallbackInfo ( InetAddress . getLoopbackAddress ( ) , null , new MessageOut ( verb , payload , null ) , null , cl , allowHints ) ; Assert . assertEquals ( expectHint , wcbi . shouldHint ( ) ) ; if ( expectHint ) { Assert . assertNotNull ( wcbi . mutation ( ) ) ; } else { boolean fail = false ; try { wcbi . mutation ( ) ; } catch ( Throwable t ) { fail = true ; } Assert . assertTrue ( fail ) ; } } } 

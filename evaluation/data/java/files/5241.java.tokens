package io . netty . util . internal . logging ; import org . junit . Test ; import org . slf4j . Logger ; import static org . easymock . EasyMock . * ; import static org . junit . Assert . * ; public class Slf4JLoggerTest { private static final Exception e = new Exception ( ) ; @Test public void testIsTraceEnabled ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; expect ( mock . isTraceEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; assertTrue ( logger . isTraceEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsDebugEnabled ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; expect ( mock . isDebugEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; assertTrue ( logger . isDebugEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsInfoEnabled ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; expect ( mock . isInfoEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; assertTrue ( logger . isInfoEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsWarnEnabled ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; expect ( mock . isWarnEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; assertTrue ( logger . isWarnEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsErrorEnabled ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; expect ( mock . isErrorEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; assertTrue ( logger . isErrorEnabled ( ) ) ; verify ( mock ) ; } @Test public void testTrace ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . trace ( <str> ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . trace ( <str> ) ; verify ( mock ) ; } @Test public void testTraceWithException ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . trace ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . trace ( <str> , e ) ; verify ( mock ) ; } @Test public void testDebug ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . debug ( <str> ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . debug ( <str> ) ; verify ( mock ) ; } @Test public void testDebugWithException ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . debug ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . debug ( <str> , e ) ; verify ( mock ) ; } @Test public void testInfo ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . info ( <str> ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . info ( <str> ) ; verify ( mock ) ; } @Test public void testInfoWithException ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . info ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . info ( <str> , e ) ; verify ( mock ) ; } @Test public void testWarn ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . warn ( <str> ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . warn ( <str> ) ; verify ( mock ) ; } @Test public void testWarnWithException ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . warn ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . warn ( <str> , e ) ; verify ( mock ) ; } @Test public void testError ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . error ( <str> ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . error ( <str> ) ; verify ( mock ) ; } @Test public void testErrorWithException ( ) { Logger mock = createStrictMock ( Logger . class ) ; expect ( mock . getName ( ) ) . andReturn ( <str> ) ; mock . error ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = new Slf4JLogger ( mock ) ; logger . error ( <str> , e ) ; verify ( mock ) ; } }
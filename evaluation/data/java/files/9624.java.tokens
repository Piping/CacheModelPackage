package com . badlogic . gdx . tests . bullet ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttribute ; import com . badlogic . gdx . graphics . VertexAttributes ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . attributes . TextureAttribute ; import com . badlogic . gdx . graphics . g3d . utils . TextureDescriptor ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . math . Vector3 ; public class ShootTest extends BaseBulletTest { final int BOXCOUNT_X = <int> ; final int BOXCOUNT_Y = <int> ; final int BOXCOUNT_Z = <int> ; final float BOXOFFSET_X = - <float> ; final float BOXOFFSET_Y = <float> ; final float BOXOFFSET_Z = <int> f ; BulletEntity ground ; @Override public void create ( ) { super . create ( ) ; ( ground = world . add ( <str> , <int> f , <int> f , <int> f ) ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <int> f ) ; for ( int x = <int> ; x < BOXCOUNT_X ; x + + ) { for ( int y = <int> ; y < BOXCOUNT_Y ; y + + ) { for ( int z = <int> ; z < BOXCOUNT_Z ; z + + ) { world . add ( <str> , BOXOFFSET_X + x , BOXOFFSET_Y + y , BOXOFFSET_Z + z ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <int> f ) ; } } } } @Override public boolean tap ( float x , float y , int count , int button ) { shoot ( x , y ) ; return true ; } @Override public void dispose ( ) { super . dispose ( ) ; ground = null ; } }
package org . eclipse . debug . internal . ui . actions . breakpointGroups ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . ui . breakpoints . provisional . IBreakpointContainer ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointsView ; import org . eclipse . debug . internal . ui . views . breakpoints . WorkingSetCategory ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . ITreeSelection ; import org . eclipse . jface . viewers . TreePath ; public class RemoveFromWorkingSetAction extends BreakpointSelectionAction { private BreakpointSetElement [ ] fBreakpoints ; public RemoveFromWorkingSetAction ( BreakpointsView view ) { super ( BreakpointGroupMessages . RemoveFromWorkingSetAction_0 , view ) ; } @Override public void run ( ) { if ( fBreakpoints ! = null ) { for ( int i = <int> ; i < fBreakpoints . length ; i + + ) { fBreakpoints [ i ] . container . getOrganizer ( ) . removeBreakpoint ( fBreakpoints [ i ] . breakpoint , fBreakpoints [ i ] . container . getCategory ( ) ) ; } } } protected static class BreakpointSetElement { BreakpointSetElement ( IBreakpoint b , IBreakpointContainer c ) { breakpoint = b ; container = c ; } IBreakpoint breakpoint ; IBreakpointContainer container ; } protected BreakpointSetElement [ ] getRemovableBreakpoints ( IStructuredSelection selection ) { List < BreakpointSetElement > res = new ArrayList < BreakpointSetElement > ( ) ; if ( selection instanceof ITreeSelection ) { ITreeSelection tSel = ( ITreeSelection ) selection ; TreePath [ ] paths = tSel . getPaths ( ) ; for ( int i = <int> ; i < paths . length ; i + + ) { TreePath path = paths [ i ] ; IBreakpoint breakpoint = ( IBreakpoint ) DebugPlugin . getAdapter ( path . getLastSegment ( ) , IBreakpoint . class ) ; if ( breakpoint ! = null ) { TreePath parents = path . getParentPath ( ) ; for ( int j = <int> ; j < parents . getSegmentCount ( ) ; j + + ) { Object parent = parents . getSegment ( j ) ; if ( parent instanceof IBreakpointContainer ) { IBreakpointContainer container = ( IBreakpointContainer ) parent ; if ( container . getCategory ( ) instanceof WorkingSetCategory ) { if ( container . getOrganizer ( ) . canRemove ( breakpoint , container . getCategory ( ) ) ) { res . add ( new BreakpointSetElement ( breakpoint , container ) ) ; } } } } } } } return res . toArray ( new BreakpointSetElement [ res . size ( ) ] ) ; } @Override public boolean isEnabled ( ) { if ( fBreakpoints ! = null ) { return fBreakpoints . length > <int> ; } return false ; } @Override protected boolean updateSelection ( IStructuredSelection selection ) { fBreakpoints = getRemovableBreakpoints ( selection ) ; return fBreakpoints . length > <int> ; } }
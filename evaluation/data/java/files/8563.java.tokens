package org . eclipse . debug . internal . ui . viewers . breadcrumb ; import org . eclipse . core . runtime . Assert ; import org . eclipse . jface . viewers . DoubleClickEvent ; import org . eclipse . jface . viewers . IDoubleClickListener ; import org . eclipse . jface . viewers . IOpenListener ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ISelectionProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . OpenEvent ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . SWT ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Event ; import org . eclipse . swt . widgets . Listener ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Widget ; public abstract class AbstractBreadcrumb { private BreadcrumbViewer fBreadcrumbViewer ; private boolean fHasFocus ; private Composite fComposite ; private Listener fDisplayFocusListener ; private Listener fDisplayKeyListener ; public AbstractBreadcrumb ( ) { } protected abstract Object getCurrentInput ( ) ; protected abstract BreadcrumbViewer createViewer ( Composite parent ) ; protected abstract boolean open ( ISelection selection ) ; protected abstract void activateBreadcrumb ( ) ; protected abstract void deactivateBreadcrumb ( ) ; public ISelectionProvider getSelectionProvider ( ) { return fBreadcrumbViewer ; } public void setInput ( Object element ) { if ( element = = null | | fBreadcrumbViewer = = null | | fBreadcrumbViewer . getControl ( ) . isDisposed ( ) ) return ; Object input = fBreadcrumbViewer . getInput ( ) ; if ( input = = element | | element . equals ( input ) ) { refresh ( ) ; return ; } fBreadcrumbViewer . setInput ( element ) ; } protected void refresh ( ) { if ( ! fBreadcrumbViewer . getControl ( ) . isDisposed ( ) ) { fBreadcrumbViewer . refresh ( ) ; } } public void activate ( ) { if ( fBreadcrumbViewer . getSelection ( ) . isEmpty ( ) ) fBreadcrumbViewer . setSelection ( new StructuredSelection ( fBreadcrumbViewer . getInput ( ) ) ) ; fBreadcrumbViewer . setFocus ( ) ; } public boolean isActive ( ) { return true ; } public Control createContent ( Composite parent ) { Assert . isTrue ( fComposite = = null , <str> ) ; boolean rtl = ( parent . getShell ( ) . getStyle ( ) & SWT . RIGHT_TO_LEFT ) ! = <int> ; fComposite = new Composite ( parent , rtl ? SWT . RIGHT_TO_LEFT : SWT . NONE ) ; GridData data = new GridData ( SWT . FILL , SWT . TOP , true , false ) ; fComposite . setLayoutData ( data ) ; GridLayout gridLayout = new GridLayout ( <int> , false ) ; gridLayout . marginWidth = <int> ; gridLayout . marginHeight = <int> ; gridLayout . verticalSpacing = <int> ; gridLayout . horizontalSpacing = <int> ; fComposite . setLayout ( gridLayout ) ; fDisplayFocusListener = new Listener ( ) { @Override public void handleEvent ( Event event ) { if ( fComposite . isDisposed ( ) ) return ; if ( isBreadcrumbEvent ( event ) ) { if ( fHasFocus ) return ; focusGained ( ) ; } else { if ( ! fHasFocus ) return ; focusLost ( ) ; } } } ; Display . getCurrent ( ) . addFilter ( SWT . FocusIn , fDisplayFocusListener ) ; fBreadcrumbViewer = createViewer ( fComposite ) ; fBreadcrumbViewer . addDoubleClickListener ( new IDoubleClickListener ( ) { @Override public void doubleClick ( DoubleClickEvent event ) { Object element = ( ( IStructuredSelection ) event . getSelection ( ) ) . getFirstElement ( ) ; if ( element = = null ) return ; BreadcrumbItem item = ( BreadcrumbItem ) fBreadcrumbViewer . doFindItem ( element ) ; if ( item = = null ) return ; item . openDropDownMenu ( ) ; } } ) ; fBreadcrumbViewer . addOpenListener ( new IOpenListener ( ) { @Override public void open ( OpenEvent event ) { doOpen ( event . getSelection ( ) ) ; } } ) ; return fComposite ; } public void dispose ( ) { if ( fDisplayFocusListener ! = null ) { Display . getDefault ( ) . removeFilter ( SWT . FocusIn , fDisplayFocusListener ) ; } deinstallDisplayListeners ( ) ; } private void doOpen ( ISelection selection ) { if ( open ( selection ) ) { fBreadcrumbViewer . setInput ( getCurrentInput ( ) ) ; } } private void focusGained ( ) { if ( fHasFocus ) focusLost ( ) ; fHasFocus = true ; installDisplayListeners ( ) ; activateBreadcrumb ( ) ; } private void focusLost ( ) { fHasFocus = false ; deinstallDisplayListeners ( ) ; deactivateBreadcrumb ( ) ; } private void installDisplayListeners ( ) { deinstallDisplayListeners ( ) ; fDisplayKeyListener = new Listener ( ) { @Override public void handleEvent ( Event event ) { if ( event . keyCode ! = SWT . ESC ) return ; if ( ! isBreadcrumbEvent ( event ) ) return ; } } ; Display . getDefault ( ) . addFilter ( SWT . KeyDown , fDisplayKeyListener ) ; } private void deinstallDisplayListeners ( ) { if ( fDisplayKeyListener ! = null ) { Display . getDefault ( ) . removeFilter ( SWT . KeyDown , fDisplayKeyListener ) ; fDisplayKeyListener = null ; } } private boolean isBreadcrumbEvent ( Event event ) { if ( fBreadcrumbViewer = = null ) return false ; Widget item = event . widget ; if ( ! ( item instanceof Control ) ) return false ; Shell dropDownShell = fBreadcrumbViewer . getDropDownShell ( ) ; if ( dropDownShell ! = null & & isChild ( ( Control ) item , dropDownShell ) ) return true ; return isChild ( ( Control ) item , fBreadcrumbViewer . getControl ( ) ) ; } private boolean isChild ( Control child , Control parent ) { if ( child = = null ) return false ; if ( child = = parent ) return true ; return isChild ( child . getParent ( ) , parent ) ; } }
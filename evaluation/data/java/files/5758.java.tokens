package rx . observers ; import static org . junit . Assert . * ; import java . util . List ; import java . util . concurrent . atomic . AtomicReference ; import org . junit . Test ; import junit . framework . Assert ; import rx . Subscriber ; import rx . exceptions . * ; import rx . functions . Action0 ; import rx . subscriptions . Subscriptions ; public class SafeObserverTest { @Test public void onNextFailure ( ) { AtomicReference < Throwable > onError = new AtomicReference < Throwable > ( ) ; try { OBSERVER_ONNEXT_FAIL ( onError ) . onNext ( <str> ) ; fail ( <str> ) ; } catch ( Exception e ) { assertNull ( onError . get ( ) ) ; assertTrue ( e instanceof SafeObserverTestException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void onNextFailureSafe ( ) { AtomicReference < Throwable > onError = new AtomicReference < Throwable > ( ) ; try { new SafeSubscriber < String > ( OBSERVER_ONNEXT_FAIL ( onError ) ) . onNext ( <str> ) ; assertNotNull ( onError . get ( ) ) ; assertTrue ( onError . get ( ) instanceof SafeObserverTestException ) ; assertEquals ( <str> , onError . get ( ) . getMessage ( ) ) ; } catch ( Exception e ) { fail ( <str> ) ; } } @Test public void onCompletedFailure ( ) { AtomicReference < Throwable > onError = new AtomicReference < Throwable > ( ) ; try { OBSERVER_ONCOMPLETED_FAIL ( onError ) . onCompleted ( ) ; fail ( <str> ) ; } catch ( Exception e ) { assertNull ( onError . get ( ) ) ; assertTrue ( e instanceof SafeObserverTestException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void onErrorFailure ( ) { try { OBSERVER_ONERROR_FAIL ( ) . onError ( new SafeObserverTestException ( <str> ) ) ; fail ( <str> ) ; } catch ( Exception e ) { assertTrue ( e instanceof SafeObserverTestException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void onErrorFailureSafe ( ) { try { new SafeSubscriber < String > ( OBSERVER_ONERROR_FAIL ( ) ) . onError ( new SafeObserverTestException ( <str> ) ) ; fail ( <str> ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; assertTrue ( e instanceof RuntimeException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; Throwable e2 = e . getCause ( ) ; assertTrue ( e2 instanceof CompositeException ) ; List < Throwable > innerExceptions = ( ( CompositeException ) e2 ) . getExceptions ( ) ; assertEquals ( <int> , innerExceptions . size ( ) ) ; Throwable e3 = innerExceptions . get ( <int> ) ; assertTrue ( e3 instanceof SafeObserverTestException ) ; assertEquals ( <str> , e3 . getMessage ( ) ) ; Throwable e4 = innerExceptions . get ( <int> ) ; assertTrue ( e4 instanceof SafeObserverTestException ) ; assertEquals ( <str> , e4 . getMessage ( ) ) ; } } @Test public void onErrorNotImplementedFailureSafe ( ) { try { new SafeSubscriber < String > ( OBSERVER_ONERROR_NOTIMPLEMENTED ( ) ) . onError ( new SafeObserverTestException ( <str> ) ) ; fail ( <str> ) ; } catch ( Exception e ) { assertTrue ( e instanceof OnErrorNotImplementedException ) ; assertTrue ( e . getCause ( ) instanceof SafeObserverTestException ) ; assertEquals ( <str> , e . getCause ( ) . getMessage ( ) ) ; } } @Test public void onNextOnErrorFailure ( ) { try { OBSERVER_ONNEXT_ONERROR_FAIL ( ) . onNext ( <str> ) ; fail ( <str> ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; assertTrue ( e instanceof SafeObserverTestException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void onNextOnErrorFailureSafe ( ) { try { new SafeSubscriber < String > ( OBSERVER_ONNEXT_ONERROR_FAIL ( ) ) . onNext ( <str> ) ; fail ( <str> ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; assertTrue ( e instanceof RuntimeException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; Throwable e2 = e . getCause ( ) ; assertTrue ( e2 instanceof CompositeException ) ; List < Throwable > innerExceptions = ( ( CompositeException ) e2 ) . getExceptions ( ) ; assertEquals ( <int> , innerExceptions . size ( ) ) ; Throwable e3 = innerExceptions . get ( <int> ) ; assertTrue ( e3 instanceof SafeObserverTestException ) ; assertEquals ( <str> , e3 . getMessage ( ) ) ; Throwable e4 = innerExceptions . get ( <int> ) ; assertTrue ( e4 instanceof SafeObserverTestException ) ; assertEquals ( <str> , e4 . getMessage ( ) ) ; } } @Test public void onCompleteSuccessWithUnsubscribeFailure ( ) { Subscriber < String > o = OBSERVER_SUCCESS ( ) ; try { o . add ( Subscriptions . create ( new Action0 ( ) { @Override public void call ( ) { throw new SafeObserverTestException ( <str> ) ; } } ) ) ; new SafeSubscriber < String > ( o ) . onCompleted ( ) ; fail ( <str> ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; assertTrue ( o . isUnsubscribed ( ) ) ; assertTrue ( e instanceof UnsubscribeFailedException ) ; assertTrue ( e . getCause ( ) instanceof SafeObserverTestException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void onErrorSuccessWithUnsubscribeFailure ( ) { AtomicReference < Throwable > onError = new AtomicReference < Throwable > ( ) ; Subscriber < String > o = OBSERVER_SUCCESS ( onError ) ; try { o . add ( Subscriptions . create ( new Action0 ( ) { @Override public void call ( ) { throw new SafeObserverTestException ( <str> ) ; } } ) ) ; new SafeSubscriber < String > ( o ) . onError ( new SafeObserverTestException ( <str> ) ) ; fail ( <str> ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; assertTrue ( o . isUnsubscribed ( ) ) ; assertNotNull ( onError . get ( ) ) ; assertTrue ( onError . get ( ) instanceof SafeObserverTestException ) ; assertEquals ( <str> , onError . get ( ) . getMessage ( ) ) ; OnErrorFailedException onErrorFailedException = ( OnErrorFailedException ) e ; assertTrue ( onErrorFailedException . getCause ( ) instanceof SafeObserverTestException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void onErrorFailureWithUnsubscribeFailure ( ) { Subscriber < String > o = OBSERVER_ONERROR_FAIL ( ) ; try { o . add ( Subscriptions . create ( new Action0 ( ) { @Override public void call ( ) { throw new SafeObserverTestException ( <str> ) ; } } ) ) ; new SafeSubscriber < String > ( o ) . onError ( new SafeObserverTestException ( <str> ) ) ; fail ( <str> ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; assertTrue ( o . isUnsubscribed ( ) ) ; assertTrue ( e instanceof RuntimeException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; Throwable e2 = e . getCause ( ) ; assertTrue ( e2 instanceof CompositeException ) ; List < Throwable > innerExceptions = ( ( CompositeException ) e2 ) . getExceptions ( ) ; assertEquals ( <int> , innerExceptions . size ( ) ) ; Throwable e3 = innerExceptions . get ( <int> ) ; assertTrue ( e3 instanceof SafeObserverTestException ) ; assertEquals ( <str> , e3 . getMessage ( ) ) ; Throwable e4 = innerExceptions . get ( <int> ) ; assertTrue ( e4 instanceof SafeObserverTestException ) ; assertEquals ( <str> , e4 . getMessage ( ) ) ; Throwable e5 = innerExceptions . get ( <int> ) ; assertTrue ( e5 instanceof SafeObserverTestException ) ; assertEquals ( <str> , e5 . getMessage ( ) ) ; } } @Test public void onErrorNotImplementedFailureWithUnsubscribeFailure ( ) { Subscriber < String > o = OBSERVER_ONERROR_NOTIMPLEMENTED ( ) ; try { o . add ( Subscriptions . create ( new Action0 ( ) { @Override public void call ( ) { throw new SafeObserverTestException ( <str> ) ; } } ) ) ; new SafeSubscriber < String > ( o ) . onError ( new SafeObserverTestException ( <str> ) ) ; fail ( <str> ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; assertTrue ( o . isUnsubscribed ( ) ) ; assertTrue ( e instanceof RuntimeException ) ; assertEquals ( <str> , e . getMessage ( ) ) ; Throwable e2 = e . getCause ( ) ; assertTrue ( e2 instanceof CompositeException ) ; List < Throwable > innerExceptions = ( ( CompositeException ) e2 ) . getExceptions ( ) ; assertEquals ( <int> , innerExceptions . size ( ) ) ; Throwable e3 = innerExceptions . get ( <int> ) ; assertTrue ( e3 instanceof SafeObserverTestException ) ; assertEquals ( <str> , e3 . getMessage ( ) ) ; Throwable e4 = innerExceptions . get ( <int> ) ; assertTrue ( e4 instanceof SafeObserverTestException ) ; assertEquals ( <str> , e4 . getMessage ( ) ) ; } } private static Subscriber < String > OBSERVER_SUCCESS ( ) { return new Subscriber < String > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { } @Override public void onNext ( String args ) { } } ; } private static Subscriber < String > OBSERVER_SUCCESS ( final AtomicReference < Throwable > onError ) { return new Subscriber < String > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { onError . set ( e ) ; } @Override public void onNext ( String args ) { } } ; } private static Subscriber < String > OBSERVER_ONNEXT_FAIL ( final AtomicReference < Throwable > onError ) { return new Subscriber < String > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { onError . set ( e ) ; } @Override public void onNext ( String args ) { throw new SafeObserverTestException ( <str> ) ; } } ; } private static Subscriber < String > OBSERVER_ONNEXT_ONERROR_FAIL ( ) { return new Subscriber < String > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { throw new SafeObserverTestException ( <str> ) ; } @Override public void onNext ( String args ) { throw new SafeObserverTestException ( <str> ) ; } } ; } private static Subscriber < String > OBSERVER_ONERROR_FAIL ( ) { return new Subscriber < String > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { throw new SafeObserverTestException ( <str> ) ; } @Override public void onNext ( String args ) { } } ; } private static Subscriber < String > OBSERVER_ONERROR_NOTIMPLEMENTED ( ) { return new Subscriber < String > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { throw new OnErrorNotImplementedException ( e ) ; } @Override public void onNext ( String args ) { } } ; } private static Subscriber < String > OBSERVER_ONCOMPLETED_FAIL ( final AtomicReference < Throwable > onError ) { return new Subscriber < String > ( ) { @Override public void onCompleted ( ) { throw new SafeObserverTestException ( <str> ) ; } @Override public void onError ( Throwable e ) { onError . set ( e ) ; } @Override public void onNext ( String args ) { } } ; } @SuppressWarnings ( <str> ) private static class SafeObserverTestException extends RuntimeException { public SafeObserverTestException ( String message ) { super ( message ) ; } } @Test public void testOnCompletedThrows ( ) { final AtomicReference < Throwable > error = new AtomicReference < Throwable > ( ) ; SafeSubscriber < Integer > s = new SafeSubscriber < Integer > ( new Subscriber < Integer > ( ) { @Override public void onNext ( Integer t ) { } @Override public void onError ( Throwable e ) { error . set ( e ) ; } @Override public void onCompleted ( ) { throw new TestException ( ) ; } } ) ; try { s . onCompleted ( ) ; Assert . fail ( ) ; } catch ( OnCompletedFailedException e ) { assertNull ( error . get ( ) ) ; } } @Test public void testActual ( ) { Subscriber < Integer > actual = new Subscriber < Integer > ( ) { @Override public void onNext ( Integer t ) { } @Override public void onError ( Throwable e ) { } @Override public void onCompleted ( ) { } } ; SafeSubscriber < Integer > s = new SafeSubscriber < Integer > ( actual ) ; assertSame ( actual , s . getActual ( ) ) ; } }
package org . nd4j . linalg . api . indexing ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ndarray . LinearViewNDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . INDArrayIndex ; import org . nd4j . linalg . indexing . NDArrayIndex ; public class IndexingTests extends BaseNd4jTest { public IndexingTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public IndexingTests ( Nd4jBackend backend ) { super ( backend ) ; } public IndexingTests ( ) { } public IndexingTests ( String name ) { super ( name ) ; } @Test public void testGetScalar ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) ; INDArray d = arr . get ( NDArrayIndex . point ( <int> ) ) ; assertTrue ( d . isScalar ( ) ) ; assertEquals ( <float> , d . getDouble ( <int> ) ) ; } @Test public void testSlicing ( ) { INDArray arange = Nd4j . arange ( <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray slice1Assert = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> } ) ; INDArray slice1Test = arange . slice ( <int> ) ; assertEquals ( slice1Assert , slice1Test ) ; } @Test public void testArangeMul ( ) { INDArray arange = Nd4j . arange ( <int> , <int> ) . reshape ( <int> , <int> ) ; INDArrayIndex index = NDArrayIndex . interval ( <int> , <int> ) ; INDArray get = arange . get ( index , index ) ; INDArray zeroPointTwoFive = Nd4j . ones ( <int> , <int> ) . mul ( <float> ) ; INDArray mul = get . mul ( zeroPointTwoFive ) ; INDArray assertion = Nd4j . create ( new double [ ] [ ] { { <float> , <float> } , { <float> , <float> } } ) ; assertEquals ( assertion , mul ) ; } @Test public void testGetIndicesVector ( ) { INDArray line = Nd4j . linspace ( <int> , <int> , <int> ) ; INDArray test = Nd4j . create ( new float [ ] { <int> , <int> } ) ; INDArray result = line . get ( NDArrayIndex . point ( <int> ) , NDArrayIndex . interval ( <int> , <int> ) ) ; assertEquals ( test , result ) ; } @Override public char ordering ( ) { return <str> ; } }
package rx ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicInteger ; import java . util . concurrent . atomic . AtomicLong ; import java . util . concurrent . atomic . AtomicReference ; import org . junit . Test ; import rx . Observable . OnSubscribe ; import rx . Observable . Operator ; import rx . functions . Func1 ; import rx . observers . TestSubscriber ; public class SubscriberTest { @Test public void testRequestFromFinalSubscribeWithRequestValue ( ) { Subscriber < String > s = new TestSubscriber < String > ( ) ; s . request ( <int> ) ; final AtomicLong r = new AtomicLong ( ) ; s . setProducer ( new Producer ( ) { @Override public void request ( long n ) { r . set ( n ) ; } } ) ; assertEquals ( <int> , r . get ( ) ) ; } @Test public void testRequestFromFinalSubscribeWithoutRequestValue ( ) { Subscriber < String > s = new TestSubscriber < String > ( ) ; final AtomicLong r = new AtomicLong ( ) ; s . setProducer ( new Producer ( ) { @Override public void request ( long n ) { r . set ( n ) ; } } ) ; assertEquals ( Long . MAX_VALUE , r . get ( ) ) ; } @Test public void testRequestFromChainedOperator ( ) { Subscriber < String > s = new TestSubscriber < String > ( ) ; Operator < String , String > o = new Operator < String , String > ( ) { @Override public Subscriber < ? super String > call ( Subscriber < ? super String > s ) { return new Subscriber < String > ( s ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { } @Override public void onNext ( String t ) { } } ; } } ; s . request ( <int> ) ; Subscriber < ? super String > ns = o . call ( s ) ; final AtomicLong r = new AtomicLong ( ) ; ns . setProducer ( new Producer ( ) { @Override public void request ( long n ) { r . set ( n ) ; } } ) ; assertEquals ( <int> , r . get ( ) ) ; } @Test public void testRequestFromDecoupledOperator ( ) { Subscriber < String > s = new TestSubscriber < String > ( ) ; Operator < String , String > o = new Operator < String , String > ( ) { @Override public Subscriber < ? super String > call ( Subscriber < ? super String > s ) { return new Subscriber < String > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { } @Override public void onNext ( String t ) { } } ; } } ; s . request ( <int> ) ; Subscriber < ? super String > ns = o . call ( s ) ; final AtomicLong r = new AtomicLong ( ) ; ns . setProducer ( new Producer ( ) { @Override public void request ( long n ) { r . set ( n ) ; } } ) ; assertEquals ( Long . MAX_VALUE , r . get ( ) ) ; } @Test public void testRequestFromDecoupledOperatorThatRequestsN ( ) { Subscriber < String > s = new TestSubscriber < String > ( ) ; final AtomicLong innerR = new AtomicLong ( ) ; Operator < String , String > o = new Operator < String , String > ( ) { @Override public Subscriber < ? super String > call ( Subscriber < ? super String > child ) { child . setProducer ( new Producer ( ) { @Override public void request ( long n ) { innerR . set ( n ) ; } } ) ; Subscriber < String > as = new Subscriber < String > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { } @Override public void onNext ( String t ) { } } ; as . request ( <int> ) ; return as ; } } ; s . request ( <int> ) ; Subscriber < ? super String > ns = o . call ( s ) ; final AtomicLong r = new AtomicLong ( ) ; ns . setProducer ( new Producer ( ) { @Override public void request ( long n ) { r . set ( n ) ; } } ) ; assertEquals ( <int> , r . get ( ) ) ; assertEquals ( <int> , innerR . get ( ) ) ; } @Test public void testRequestToObservable ( ) { TestSubscriber < Integer > ts = new TestSubscriber < Integer > ( ) ; ts . request ( <int> ) ; final AtomicLong requested = new AtomicLong ( ) ; Observable . create ( new OnSubscribe < Integer > ( ) { @Override public void call ( Subscriber < ? super Integer > s ) { s . setProducer ( new Producer ( ) { @Override public void request ( long n ) { requested . set ( n ) ; } } ) ; } } ) . subscribe ( ts ) ; assertEquals ( <int> , requested . get ( ) ) ; } @Test public void testRequestThroughMap ( ) { TestSubscriber < Integer > ts = new TestSubscriber < Integer > ( ) ; ts . request ( <int> ) ; final AtomicLong requested = new AtomicLong ( ) ; Observable . create ( new OnSubscribe < Integer > ( ) { @Override public void call ( Subscriber < ? super Integer > s ) { s . setProducer ( new Producer ( ) { @Override public void request ( long n ) { requested . set ( n ) ; } } ) ; } } ) . map ( new Func1 < Integer , Integer > ( ) { @Override public Integer call ( Integer t1 ) { return t1 ; } } ) . subscribe ( ts ) ; assertEquals ( <int> , requested . get ( ) ) ; } @Test public void testRequestThroughTakeThatReducesRequest ( ) { TestSubscriber < Integer > ts = new TestSubscriber < Integer > ( ) ; ts . request ( <int> ) ; final AtomicLong requested = new AtomicLong ( ) ; Observable . create ( new OnSubscribe < Integer > ( ) { @Override public void call ( Subscriber < ? super Integer > s ) { s . setProducer ( new Producer ( ) { @Override public void request ( long n ) { requested . set ( n ) ; } } ) ; } } ) . take ( <int> ) . subscribe ( ts ) ; assertEquals ( <int> , requested . get ( ) ) ; } @Test public void testRequestThroughTakeWhereRequestIsSmallerThanTake ( ) { TestSubscriber < Integer > ts = new TestSubscriber < Integer > ( ) ; ts . request ( <int> ) ; final AtomicLong requested = new AtomicLong ( ) ; Observable . create ( new OnSubscribe < Integer > ( ) { @Override public void call ( Subscriber < ? super Integer > s ) { s . setProducer ( new Producer ( ) { @Override public void request ( long n ) { requested . set ( n ) ; } } ) ; } } ) . take ( <int> ) . subscribe ( ts ) ; assertEquals ( <int> , requested . get ( ) ) ; } @Test public void testOnStartCalledOnceViaSubscribe ( ) { final AtomicInteger c = new AtomicInteger ( ) ; Observable . just ( <int> , <int> , <int> , <int> ) . take ( <int> ) . subscribe ( new Subscriber < Integer > ( ) { @Override public void onStart ( ) { c . incrementAndGet ( ) ; request ( <int> ) ; } @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { } @Override public void onNext ( Integer t ) { request ( <int> ) ; } } ) ; assertEquals ( <int> , c . get ( ) ) ; } @Test public void testOnStartCalledOnceViaUnsafeSubscribe ( ) { final AtomicInteger c = new AtomicInteger ( ) ; Observable . just ( <int> , <int> , <int> , <int> ) . take ( <int> ) . unsafeSubscribe ( new Subscriber < Integer > ( ) { @Override public void onStart ( ) { c . incrementAndGet ( ) ; request ( <int> ) ; } @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { } @Override public void onNext ( Integer t ) { request ( <int> ) ; } } ) ; assertEquals ( <int> , c . get ( ) ) ; } @Test public void testOnStartCalledOnceViaLift ( ) { final AtomicInteger c = new AtomicInteger ( ) ; Observable . just ( <int> , <int> , <int> , <int> ) . lift ( new Operator < Integer , Integer > ( ) { @Override public Subscriber < ? super Integer > call ( final Subscriber < ? super Integer > child ) { return new Subscriber < Integer > ( ) { @Override public void onStart ( ) { c . incrementAndGet ( ) ; request ( <int> ) ; } @Override public void onCompleted ( ) { child . onCompleted ( ) ; } @Override public void onError ( Throwable e ) { child . onError ( e ) ; } @Override public void onNext ( Integer t ) { child . onNext ( t ) ; request ( <int> ) ; } } ; } } ) . subscribe ( ) ; assertEquals ( <int> , c . get ( ) ) ; } @Test public void testNegativeRequestThrowsIllegalArgumentException ( ) throws InterruptedException { final CountDownLatch latch = new CountDownLatch ( <int> ) ; final AtomicReference < Throwable > exception = new AtomicReference < Throwable > ( ) ; Observable . just ( <int> , <int> , <int> , <int> ) . subscribe ( new Subscriber < Integer > ( ) { @Override public void onStart ( ) { request ( <int> ) ; } @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { exception . set ( e ) ; latch . countDown ( ) ; } @Override public void onNext ( Integer t ) { request ( - <int> ) ; request ( <int> ) ; } } ) ; assertTrue ( latch . await ( <int> , TimeUnit . SECONDS ) ) ; assertTrue ( exception . get ( ) instanceof IllegalArgumentException ) ; } @Test public void testOnStartRequestsAreAdditive ( ) { final List < Integer > list = new ArrayList < Integer > ( ) ; Observable . just ( <int> , <int> , <int> , <int> , <int> ) . subscribe ( new Subscriber < Integer > ( ) { @Override public void onStart ( ) { request ( <int> ) ; request ( <int> ) ; } @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { } @Override public void onNext ( Integer t ) { list . add ( t ) ; } } ) ; assertEquals ( Arrays . asList ( <int> , <int> , <int> , <int> , <int> ) , list ) ; } @Test public void testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue ( ) { final List < Integer > list = new ArrayList < Integer > ( ) ; Observable . just ( <int> , <int> , <int> , <int> , <int> ) . subscribe ( new Subscriber < Integer > ( ) { @Override public void onStart ( ) { request ( <int> ) ; request ( Long . MAX_VALUE - <int> ) ; } @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { } @Override public void onNext ( Integer t ) { list . add ( t ) ; } } ) ; assertEquals ( Arrays . asList ( <int> , <int> , <int> , <int> , <int> ) , list ) ; } } 

package org . nd4j . linalg . shape . indexing ; import org . apache . commons . lang3 . ArrayUtils ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . NDArrayIndex ; import org . nd4j . linalg . indexing . SpecifiedIndex ; public class IndexingTests extends BaseNd4jTest { public IndexingTests ( ) { } public IndexingTests ( String name ) { super ( name ) ; } public IndexingTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public IndexingTests ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testTensorGet ( ) { INDArray threeTwoTwo = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray firstAssertion = Nd4j . create ( new double [ ] { <int> , <int> } ) ; INDArray firstTest = threeTwoTwo . get ( NDArrayIndex . point ( <int> ) , NDArrayIndex . point ( <int> ) , NDArrayIndex . all ( ) ) ; assertEquals ( firstAssertion , firstTest ) ; INDArray secondAssertion = Nd4j . create ( new double [ ] { <int> , <int> } ) ; INDArray secondTest = threeTwoTwo . get ( NDArrayIndex . point ( <int> ) , NDArrayIndex . point ( <int> ) , NDArrayIndex . all ( ) ) ; assertEquals ( secondAssertion , secondTest ) ; } @Test public void testShape ( ) { INDArray ndarray = Nd4j . create ( new float [ ] [ ] { { <int> f , <int> f } , { <int> f , <int> f } } ) ; INDArray subarray = ndarray . get ( NDArrayIndex . point ( <int> ) , NDArrayIndex . all ( ) ) ; assertTrue ( subarray . isRowVector ( ) ) ; int [ ] shape = subarray . shape ( ) ; assertEquals ( shape [ <int> ] , <int> ) ; assertEquals ( shape [ <int> ] , <int> ) ; } @Test public void testGetRows ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray testAssertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; INDArray test = arr . get ( new SpecifiedIndex ( <int> , <int> ) , new SpecifiedIndex ( <int> , <int> ) ) ; assertEquals ( testAssertion , test ) ; } @Test public void testFirstColumn ( ) { INDArray arr = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; INDArray assertion = Nd4j . create ( new double [ ] { <int> , <int> } ) ; INDArray test = arr . get ( NDArrayIndex . all ( ) , NDArrayIndex . point ( <int> ) ) ; assertEquals ( assertion , test ) ; } @Test public void testLinearIndex ( ) { INDArray linspace = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; for ( int i = <int> ; i < linspace . length ( ) ; i + + ) { assertEquals ( i + <int> , linspace . getDouble ( i ) , <int> e - <int> ) ; } } @Override public char ordering ( ) { return <str> ; } } 

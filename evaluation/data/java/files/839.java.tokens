package com . google . common . base . internal ; import java . lang . ref . PhantomReference ; import java . lang . ref . Reference ; import java . lang . ref . ReferenceQueue ; import java . lang . ref . WeakReference ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . logging . Level ; import java . util . logging . Logger ; public class Finalizer implements Runnable { private static final Logger logger = Logger . getLogger ( Finalizer . class . getName ( ) ) ; private static final String FINALIZABLE_REFERENCE = <str> ; public static void startFinalizer ( Class < ? > finalizableReferenceClass , ReferenceQueue < Object > queue , PhantomReference < Object > frqReference ) { if ( ! finalizableReferenceClass . getName ( ) . equals ( FINALIZABLE_REFERENCE ) ) { throw new IllegalArgumentException ( <str> + FINALIZABLE_REFERENCE + <str> ) ; } Finalizer finalizer = new Finalizer ( finalizableReferenceClass , queue , frqReference ) ; Thread thread = new Thread ( finalizer ) ; thread . setName ( Finalizer . class . getName ( ) ) ; thread . setDaemon ( true ) ; try { if ( inheritableThreadLocals ! = null ) { inheritableThreadLocals . set ( thread , null ) ; } } catch ( Throwable t ) { logger . log ( Level . INFO , <str> , t ) ; } thread . start ( ) ; } private final WeakReference < Class < ? > > finalizableReferenceClassReference ; private final PhantomReference < Object > frqReference ; private final ReferenceQueue < Object > queue ; private static final Field inheritableThreadLocals = getInheritableThreadLocalsField ( ) ; private Finalizer ( Class < ? > finalizableReferenceClass , ReferenceQueue < Object > queue , PhantomReference < Object > frqReference ) { this . queue = queue ; this . finalizableReferenceClassReference = new WeakReference < Class < ? > > ( finalizableReferenceClass ) ; this . frqReference = frqReference ; } @SuppressWarnings ( <str> ) @Override public void run ( ) { while ( true ) { try { if ( ! cleanUp ( queue . remove ( ) ) ) { break ; } } catch ( InterruptedException e ) { } } } private boolean cleanUp ( Reference < ? > reference ) { Method finalizeReferentMethod = getFinalizeReferentMethod ( ) ; if ( finalizeReferentMethod = = null ) { return false ; } do { reference . clear ( ) ; if ( reference = = frqReference ) { return false ; } try { finalizeReferentMethod . invoke ( reference ) ; } catch ( Throwable t ) { logger . log ( Level . SEVERE , <str> , t ) ; } } while ( ( reference = queue . poll ( ) ) ! = null ) ; return true ; } private Method getFinalizeReferentMethod ( ) { Class < ? > finalizableReferenceClass = finalizableReferenceClassReference . get ( ) ; if ( finalizableReferenceClass = = null ) { return null ; } try { return finalizableReferenceClass . getMethod ( <str> ) ; } catch ( NoSuchMethodException e ) { throw new AssertionError ( e ) ; } } public static Field getInheritableThreadLocalsField ( ) { try { Field inheritableThreadLocals = Thread . class . getDeclaredField ( <str> ) ; inheritableThreadLocals . setAccessible ( true ) ; return inheritableThreadLocals ; } catch ( Throwable t ) { logger . log ( Level . INFO , <str> + <str> ) ; return null ; } } }
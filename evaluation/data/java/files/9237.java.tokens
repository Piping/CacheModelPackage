package org . eclipse . debug . internal . core ; import java . io . IOException ; import java . io . InputStream ; import org . eclipse . debug . core . IStreamListener ; import org . eclipse . debug . core . model . IStreamMonitor ; import org . eclipse . debug . core . model . IStreamsProxy2 ; public class NullStreamsProxy implements IStreamsProxy2 { private NullStreamMonitor outputStreamMonitor ; private NullStreamMonitor errorStreamMonitor ; public NullStreamsProxy ( Process process ) { outputStreamMonitor = new NullStreamMonitor ( process . getInputStream ( ) ) ; errorStreamMonitor = new NullStreamMonitor ( process . getErrorStream ( ) ) ; } @Override public void closeInputStream ( ) throws IOException { } @Override public IStreamMonitor getErrorStreamMonitor ( ) { return errorStreamMonitor ; } @Override public IStreamMonitor getOutputStreamMonitor ( ) { return outputStreamMonitor ; } @Override public void write ( String input ) throws IOException { } private class NullStreamMonitor implements IStreamMonitor { private InputStream fStream ; public NullStreamMonitor ( InputStream stream ) { fStream = stream ; startReaderThread ( ) ; } private void startReaderThread ( ) { Thread thread = new Thread ( new Runnable ( ) { @Override public void run ( ) { byte [ ] bytes = new byte [ <int> ] ; try { while ( fStream . read ( bytes ) > = <int> ) { } } catch ( IOException e ) { } } } , DebugCoreMessages . NullStreamsProxy_0 ) ; thread . setDaemon ( true ) ; thread . start ( ) ; } @Override public void addListener ( IStreamListener listener ) { } @Override public String getContents ( ) { return <str> ; } @Override public void removeListener ( IStreamListener listener ) { } } }
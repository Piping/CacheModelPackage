package org . elasticsearch . index . fielddata ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . GeoPointField ; import org . apache . lucene . document . StringField ; import org . apache . lucene . util . GeoUtils ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . VersionUtils ; import static org . elasticsearch . test . geo . RandomShapeGenerator . randomPoint ; import static org . hamcrest . Matchers . * ; public abstract class AbstractGeoFieldDataTestCase extends AbstractFieldDataImplTestCase { @Override protected abstract FieldDataType getFieldDataType ( ) ; protected Field randomGeoPointField ( String fieldName , Field . Store store ) { GeoPoint point = randomPoint ( random ( ) ) ; if ( indexService . getIndexSettings ( ) . getIndexVersionCreated ( ) . before ( Version . V_2_2_0 ) ) { return new StringField ( fieldName , point . lat ( ) + <str> + point . lon ( ) , store ) ; } return new GeoPointField ( fieldName , point . lon ( ) , point . lat ( ) , store ) ; } @Override protected void fillAllMissing ( ) throws Exception { Document d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( d ) ; d = new Document ( ) ; d . add ( new StringField ( <str> , <str> , Field . Store . NO ) ) ; writer . addDocument ( d ) ; } @Override public void testSortMultiValuesFields ( ) { assumeFalse ( <str> , getFieldDataType ( ) . equals ( <str> ) ) ; } protected void assertValues ( MultiGeoPointValues values , int docId ) { assertValues ( values , docId , false ) ; } protected void assertMissing ( MultiGeoPointValues values , int docId ) { assertValues ( values , docId , true ) ; } private void assertValues ( MultiGeoPointValues values , int docId , boolean missing ) { values . setDocument ( docId ) ; int docCount = values . count ( ) ; if ( missing ) { assertThat ( docCount , equalTo ( <int> ) ) ; } else { assertThat ( docCount , greaterThan ( <int> ) ) ; for ( int i = <int> ; i < docCount ; + + i ) { final GeoPoint point = values . valueAt ( i ) ; assertThat ( point . lat ( ) , allOf ( greaterThanOrEqualTo ( GeoUtils . MIN_LAT_INCL ) , lessThanOrEqualTo ( GeoUtils . MAX_LAT_INCL ) ) ) ; assertThat ( point . lon ( ) , allOf ( greaterThanOrEqualTo ( GeoUtils . MIN_LON_INCL ) , lessThanOrEqualTo ( GeoUtils . MAX_LON_INCL ) ) ) ; } } } } 

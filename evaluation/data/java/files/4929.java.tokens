package io . netty . handler . codec . xml ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . CharsetUtil ; import org . junit . After ; import org . junit . Before ; import org . junit . Test ; import static org . hamcrest . CoreMatchers . * ; import static org . hamcrest . MatcherAssert . * ; import static org . hamcrest . core . IsNull . nullValue ; public class XmlDecoderTest { private static final String XML1 = <str> + <str> + <str> + <str> + <str> + <str> + <str> ; private static final String XML2 = <str> + <str> + <str> ; private static final String XML3 = <str> ; private static final String XML4 = <str> ; private EmbeddedChannel channel ; @Before public void setup ( ) throws Exception { channel = new EmbeddedChannel ( new XmlDecoder ( ) ) ; } @After public void teardown ( ) throws Exception { channel . finish ( ) ; } @Test public void shouldDecodeRequestWithSimpleXml ( ) { Object temp ; write ( XML1 ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlDocumentStart . class ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . version ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . encoding ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . standalone ( ) , is ( false ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . encodingScheme ( ) , is ( nullValue ( ) ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlDTD . class ) ) ; assertThat ( ( ( XmlDTD ) temp ) . text ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlProcessingInstruction . class ) ) ; assertThat ( ( ( XmlProcessingInstruction ) temp ) . target ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlProcessingInstruction ) temp ) . data ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlProcessingInstruction . class ) ) ; assertThat ( ( ( XmlProcessingInstruction ) temp ) . target ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlProcessingInstruction ) temp ) . data ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementStart . class ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . get ( <int> ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . get ( <int> ) . uri ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementStart . class ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlEntityReference . class ) ) ; assertThat ( ( ( XmlEntityReference ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlEntityReference ) temp ) . text ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlCharacters . class ) ) ; assertThat ( ( ( XmlCharacters ) temp ) . data ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementEnd . class ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespace ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlCharacters . class ) ) ; assertThat ( ( ( XmlCharacters ) temp ) . data ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , nullValue ( ) ) ; write ( XML2 ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementStart . class ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . get ( <int> ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . get ( <int> ) . value ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . get ( <int> ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . get ( <int> ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlCharacters . class ) ) ; assertThat ( ( ( XmlCharacters ) temp ) . data ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementEnd . class ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespace ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlCdata . class ) ) ; assertThat ( ( ( XmlCdata ) temp ) . data ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlCharacters . class ) ) ; assertThat ( ( ( XmlCharacters ) temp ) . data ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlComment . class ) ) ; assertThat ( ( ( XmlComment ) temp ) . data ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementStart . class ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . get ( <int> ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . get ( <int> ) . value ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . get ( <int> ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . get ( <int> ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . get ( <int> ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . get ( <int> ) . uri ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlCharacters . class ) ) ; assertThat ( ( ( XmlCharacters ) temp ) . data ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementEnd . class ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespaces ( ) . get ( <int> ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespaces ( ) . get ( <int> ) . uri ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementStart . class ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementEnd . class ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementEnd . class ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespaces ( ) . get ( <int> ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespaces ( ) . get ( <int> ) . uri ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , nullValue ( ) ) ; } @Test public void shouldDecodeXmlHeader ( ) { Object temp ; write ( XML3 ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlDocumentStart . class ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . version ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . encoding ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . standalone ( ) , is ( true ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . encodingScheme ( ) , is ( <str> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementStart . class ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementEnd . class ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , nullValue ( ) ) ; } @Test public void shouldDecodeWithoutHeader ( ) { Object temp ; write ( XML4 ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlDocumentStart . class ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . version ( ) , is ( nullValue ( ) ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . encoding ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . standalone ( ) , is ( false ) ) ; assertThat ( ( ( XmlDocumentStart ) temp ) . encodingScheme ( ) , is ( nullValue ( ) ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementStart . class ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . attributes ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( ( XmlElementStart ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , instanceOf ( XmlElementEnd . class ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . name ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . prefix ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespace ( ) , is ( <str> ) ) ; assertThat ( ( ( XmlElementEnd ) temp ) . namespaces ( ) . size ( ) , is ( <int> ) ) ; temp = channel . readInbound ( ) ; assertThat ( temp , nullValue ( ) ) ; } private void write ( String content ) { assertThat ( channel . writeInbound ( Unpooled . copiedBuffer ( content , CharsetUtil . UTF_8 ) ) , is ( true ) ) ; } }
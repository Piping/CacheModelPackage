package com . google . common . cache ; import static java . util . Arrays . asList ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . ImmutableMap ; import junit . framework . TestCase ; public class CacheManualTest extends TestCase { public void testGetIfPresent ( ) { Cache < Object , Object > cache = CacheBuilder . newBuilder ( ) . recordStats ( ) . build ( ) ; CacheStats stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; Object one = new Object ( ) ; Object two = new Object ( ) ; assertNull ( cache . getIfPresent ( one ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertNull ( cache . asMap ( ) . get ( one ) ) ; assertFalse ( cache . asMap ( ) . containsKey ( one ) ) ; assertFalse ( cache . asMap ( ) . containsValue ( two ) ) ; assertNull ( cache . getIfPresent ( two ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertNull ( cache . asMap ( ) . get ( two ) ) ; assertFalse ( cache . asMap ( ) . containsKey ( two ) ) ; assertFalse ( cache . asMap ( ) . containsValue ( one ) ) ; cache . put ( one , two ) ; assertSame ( two , cache . getIfPresent ( one ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertSame ( two , cache . asMap ( ) . get ( one ) ) ; assertTrue ( cache . asMap ( ) . containsKey ( one ) ) ; assertTrue ( cache . asMap ( ) . containsValue ( two ) ) ; assertNull ( cache . getIfPresent ( two ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertNull ( cache . asMap ( ) . get ( two ) ) ; assertFalse ( cache . asMap ( ) . containsKey ( two ) ) ; assertFalse ( cache . asMap ( ) . containsValue ( one ) ) ; cache . put ( two , one ) ; assertSame ( two , cache . getIfPresent ( one ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertSame ( two , cache . asMap ( ) . get ( one ) ) ; assertTrue ( cache . asMap ( ) . containsKey ( one ) ) ; assertTrue ( cache . asMap ( ) . containsValue ( two ) ) ; assertSame ( one , cache . getIfPresent ( two ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertSame ( one , cache . asMap ( ) . get ( two ) ) ; assertTrue ( cache . asMap ( ) . containsKey ( two ) ) ; assertTrue ( cache . asMap ( ) . containsValue ( one ) ) ; } public void testGetAllPresent ( ) { Cache < Integer , Integer > cache = CacheBuilder . newBuilder ( ) . recordStats ( ) . build ( ) ; CacheStats stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertEquals ( ImmutableMap . of ( ) , cache . getAllPresent ( ImmutableList . < Integer > of ( ) ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertEquals ( ImmutableMap . of ( ) , cache . getAllPresent ( asList ( <int> , <int> , <int> ) ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; cache . put ( <int> , <int> ) ; assertEquals ( ImmutableMap . of ( <int> , <int> ) , cache . getAllPresent ( asList ( <int> , <int> , <int> ) ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; cache . put ( <int> , <int> ) ; assertEquals ( ImmutableMap . of ( <int> , <int> , <int> , <int> ) , cache . getAllPresent ( asList ( <int> , <int> , <int> ) ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; cache . put ( <int> , <int> ) ; assertEquals ( ImmutableMap . of ( <int> , <int> , <int> , <int> , <int> , <int> ) , cache . getAllPresent ( asList ( <int> , <int> , <int> ) ) ) ; stats = cache . stats ( ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; } } 

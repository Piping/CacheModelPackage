package org . gradle . internal . concurrent ; import org . gradle . internal . UncheckedException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . util . concurrent . atomic . AtomicReference ; interface ExecutorPolicy { void onExecute ( Runnable command ) ; void onStop ( ) ; static class CatchAndRecordFailures implements ExecutorPolicy { private static final Logger LOGGER = LoggerFactory . getLogger ( DefaultExecutorFactory . class ) ; private final AtomicReference < Throwable > failure = new AtomicReference < Throwable > ( ) ; public void onExecute ( Runnable command ) { try { command . run ( ) ; } catch ( Throwable throwable ) { if ( ! failure . compareAndSet ( null , throwable ) ) { LOGGER . error ( String . format ( <str> , command ) , throwable ) ; } } } public void onStop ( ) { if ( failure . get ( ) ! = null ) { throw UncheckedException . throwAsUncheckedException ( failure . get ( ) ) ; } } } static class PropagateFailures implements ExecutorPolicy { public void onExecute ( Runnable command ) { command . run ( ) ; } public void onStop ( ) { } } } 

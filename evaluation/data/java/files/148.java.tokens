package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . maps . MapLayers ; import com . badlogic . gdx . maps . tiled . TiledMap ; import com . badlogic . gdx . maps . tiled . TiledMapTile ; import com . badlogic . gdx . maps . tiled . TiledMapTileLayer ; import com . badlogic . gdx . maps . tiled . TiledMapTileLayer . Cell ; import com . badlogic . gdx . maps . tiled . renderers . HexagonalTiledMapRenderer ; import com . badlogic . gdx . maps . tiled . tiles . StaticTiledMapTile ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . tests . utils . OrthoCamController ; public class HexagonalTiledMapTest extends GdxTest { TiledMap map ; OrthographicCamera camera ; OrthoCamController cameraController ; HexagonalTiledMapRenderer renderer ; Texture hexture ; @Override public void create ( ) { super . create ( ) ; float w = Gdx . graphics . getWidth ( ) ; float h = Gdx . graphics . getHeight ( ) ; camera = new OrthographicCamera ( ) ; camera . setToOrtho ( false , ( w / h ) * <int> , <int> ) ; camera . update ( ) ; cameraController = new OrthoCamController ( camera ) ; Gdx . input . setInputProcessor ( cameraController ) ; hexture = new Texture ( Gdx . files . internal ( <str> ) ) ; TextureRegion [ ] [ ] hexes = TextureRegion . split ( hexture , <int> , <int> ) ; map = new TiledMap ( ) ; MapLayers layers = map . getLayers ( ) ; TiledMapTile [ ] tiles = new TiledMapTile [ <int> ] ; tiles [ <int> ] = new StaticTiledMapTile ( new TextureRegion ( hexes [ <int> ] [ <int> ] ) ) ; tiles [ <int> ] = new StaticTiledMapTile ( new TextureRegion ( hexes [ <int> ] [ <int> ] ) ) ; tiles [ <int> ] = new StaticTiledMapTile ( new TextureRegion ( hexes [ <int> ] [ <int> ] ) ) ; for ( int l = <int> ; l < <int> ; l + + ) { TiledMapTileLayer layer = new TiledMapTileLayer ( <int> , <int> , <int> , <int> ) ; for ( int y = <int> ; y < <int> ; y + + ) { for ( int x = <int> ; x < <int> ; x + + ) { int id = ( int ) ( Math . random ( ) * <int> ) ; Cell cell = new Cell ( ) ; cell . setTile ( tiles [ id ] ) ; layer . setCell ( x , y , cell ) ; } } layers . add ( layer ) ; } renderer = new HexagonalTiledMapRenderer ( map ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> f ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; camera . update ( ) ; renderer . setView ( camera ) ; renderer . render ( ) ; } @Override public void dispose ( ) { renderer . dispose ( ) ; hexture . dispose ( ) ; map . dispose ( ) ; } } 

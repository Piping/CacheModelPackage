package org . gradle . external . javadoc . internal ; import org . gradle . internal . ErroringAction ; import org . gradle . internal . IoActions ; import org . gradle . external . javadoc . JavadocOptionFileOption ; import java . io . BufferedWriter ; import java . io . File ; import java . io . IOException ; import java . util . Map ; import java . util . TreeMap ; public class JavadocOptionFileWriter { private final JavadocOptionFile optionFile ; public JavadocOptionFileWriter ( JavadocOptionFile optionFile ) { if ( optionFile = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . optionFile = optionFile ; } void write ( File outputFile ) throws IOException { IoActions . writeTextFile ( outputFile , new ErroringAction < BufferedWriter > ( ) { @Override protected void doExecute ( BufferedWriter writer ) throws Exception { final Map < String , JavadocOptionFileOption < ? > > options = new TreeMap < String , JavadocOptionFileOption < ? > > ( optionFile . getOptions ( ) ) ; JavadocOptionFileWriterContext writerContext = new JavadocOptionFileWriterContext ( writer ) ; JavadocOptionFileOption < ? > localeOption = options . remove ( <str> ) ; if ( localeOption ! = null ) { localeOption . write ( writerContext ) ; } for ( final String option : options . keySet ( ) ) { options . get ( option ) . write ( writerContext ) ; } optionFile . getSourceNames ( ) . write ( writerContext ) ; } } ) ; } } 

package rx . exceptions ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; import java . util . concurrent . atomic . AtomicInteger ; import org . junit . Test ; import rx . Single ; import rx . SingleSubscriber ; import rx . Subscriber ; import rx . Observable ; import rx . Observer ; import rx . functions . Action1 ; import rx . functions . Func1 ; import rx . observables . GroupedObservable ; import rx . subjects . PublishSubject ; public class ExceptionsTest { @Test ( expected = OnErrorNotImplementedException . class ) public void testOnErrorNotImplementedIsThrown ( ) { Observable . just ( <int> , <int> , <int> ) . subscribe ( new Action1 < Integer > ( ) { @Override public void call ( Integer t1 ) { throw new RuntimeException ( <str> ) ; } } ) ; } @Test public void testStackOverflowWouldOccur ( ) { final PublishSubject < Integer > a = PublishSubject . create ( ) ; final PublishSubject < Integer > b = PublishSubject . create ( ) ; final int MAX_STACK_DEPTH = <int> ; final AtomicInteger depth = new AtomicInteger ( ) ; a . subscribe ( new Observer < Integer > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { e . printStackTrace ( ) ; } @Override public void onNext ( Integer n ) { b . onNext ( n + <int> ) ; } } ) ; b . subscribe ( new Observer < Integer > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { e . printStackTrace ( ) ; } @Override public void onNext ( Integer n ) { if ( depth . get ( ) < MAX_STACK_DEPTH ) { depth . set ( Thread . currentThread ( ) . getStackTrace ( ) . length ) ; a . onNext ( n + <int> ) ; } } } ) ; a . onNext ( <int> ) ; assertTrue ( depth . get ( ) > MAX_STACK_DEPTH ) ; } @Test ( expected = StackOverflowError . class ) public void testStackOverflowErrorIsThrown ( ) { Observable . just ( <int> ) . subscribe ( new Observer < Integer > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { e . printStackTrace ( ) ; } @Override public void onNext ( Integer t ) { throw new StackOverflowError ( ) ; } } ) ; } @Test ( expected = ThreadDeath . class ) public void testThreadDeathIsThrown ( ) { Observable . just ( <int> ) . subscribe ( new Observer < Integer > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { e . printStackTrace ( ) ; } @Override public void onNext ( Integer t ) { throw new ThreadDeath ( ) ; } } ) ; } @Test public void testOnErrorExceptionIsThrown ( ) { try { Observable . error ( new IllegalArgumentException ( <str> ) ) . subscribe ( new Observer < Object > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { throw new IllegalStateException ( <str> ) ; } @Override public void onNext ( Object o ) { } } ) ; fail ( <str> ) ; } catch ( OnErrorFailedException t ) { CompositeException cause = ( CompositeException ) t . getCause ( ) ; assertTrue ( cause . getExceptions ( ) . get ( <int> ) instanceof IllegalArgumentException ) ; assertTrue ( cause . getExceptions ( ) . get ( <int> ) instanceof IllegalStateException ) ; } } @Test ( expected = OnErrorFailedException . class ) public void testOnErrorExceptionIsThrownFromGroupBy ( ) throws Exception { Observable . just ( <int> ) . groupBy ( new Func1 < Integer , Integer > ( ) { @Override public Integer call ( Integer integer ) { throw new RuntimeException ( ) ; } } ) . subscribe ( new Observer < GroupedObservable < Integer , Integer > > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { throw new RuntimeException ( ) ; } @Override public void onNext ( GroupedObservable < Integer , Integer > integerIntegerGroupedObservable ) { } } ) ; } @Test ( expected = OnErrorFailedException . class ) public void testOnErrorExceptionIsThrownFromOnNext ( ) throws Exception { Observable . just ( <int> ) . doOnNext ( new Action1 < Integer > ( ) { @Override public void call ( Integer integer ) { throw new RuntimeException ( ) ; } } ) . subscribe ( new Observer < Integer > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { throw new RuntimeException ( ) ; } @Override public void onNext ( Integer integer ) { } } ) ; } @Test ( expected = OnErrorFailedException . class ) public void testOnErrorExceptionIsThrownFromSubscribe ( ) { Observable . create ( new Observable . OnSubscribe < Integer > ( ) { @Override public void call ( Subscriber < ? super Integer > s1 ) { Observable . create ( new Observable . OnSubscribe < Integer > ( ) { @Override public void call ( Subscriber < ? super Integer > s2 ) { throw new IllegalArgumentException ( <str> ) ; } } ) . subscribe ( s1 ) ; } } ) . subscribe ( new OnErrorFailedSubscriber ( ) ) ; } @Test ( expected = OnErrorFailedException . class ) public void testOnErrorExceptionIsThrownFromUnsafeSubscribe ( ) { Observable . create ( new Observable . OnSubscribe < Integer > ( ) { @Override public void call ( Subscriber < ? super Integer > s1 ) { Observable . create ( new Observable . OnSubscribe < Integer > ( ) { @Override public void call ( Subscriber < ? super Integer > s2 ) { throw new IllegalArgumentException ( <str> ) ; } } ) . unsafeSubscribe ( s1 ) ; } } ) . subscribe ( new OnErrorFailedSubscriber ( ) ) ; } @Test ( expected = OnErrorFailedException . class ) public void testOnErrorExceptionIsThrownFromSingleDoOnSuccess ( ) throws Exception { Single . just ( <int> ) . doOnSuccess ( new Action1 < Integer > ( ) { @Override public void call ( Integer integer ) { throw new RuntimeException ( ) ; } } ) . subscribe ( new OnErrorFailedSubscriber ( ) ) ; } @Test ( expected = OnErrorFailedException . class ) public void testOnErrorExceptionIsThrownFromSingleSubscribe ( ) { Single . create ( new Single . OnSubscribe < Integer > ( ) { @Override public void call ( SingleSubscriber < ? super Integer > s1 ) { Single . create ( new Single . OnSubscribe < Integer > ( ) { @Override public void call ( SingleSubscriber < ? super Integer > s2 ) { throw new IllegalArgumentException ( <str> ) ; } } ) . subscribe ( s1 ) ; } } ) . subscribe ( new OnErrorFailedSubscriber ( ) ) ; } @Test ( expected = OnErrorFailedException . class ) public void testOnErrorExceptionIsThrownFromSingleUnsafeSubscribe ( ) { Single . create ( new Single . OnSubscribe < Integer > ( ) { @Override public void call ( final SingleSubscriber < ? super Integer > s1 ) { Single . create ( new Single . OnSubscribe < Integer > ( ) { @Override public void call ( SingleSubscriber < ? super Integer > s2 ) { throw new IllegalArgumentException ( <str> ) ; } } ) . unsafeSubscribe ( new Subscriber < Integer > ( ) { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { s1 . onError ( e ) ; } @Override public void onNext ( Integer v ) { s1 . onSuccess ( v ) ; } } ) ; } } ) . subscribe ( new OnErrorFailedSubscriber ( ) ) ; } private class OnErrorFailedSubscriber extends Subscriber < Integer > { @Override public void onCompleted ( ) { } @Override public void onError ( Throwable e ) { throw new RuntimeException ( ) ; } @Override public void onNext ( Integer value ) { } } } 

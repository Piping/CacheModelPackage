package org . gradle . api . plugins . buildcomparison . gradle . internal ; import com . google . common . collect . Lists ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . plugins . buildcomparison . gradle . GradleBuildInvocationSpec ; import org . gradle . util . CollectionUtils ; import org . gradle . util . GradleVersion ; import java . io . File ; import java . util . LinkedList ; import java . util . List ; public class DefaultGradleBuildInvocationSpec implements GradleBuildInvocationSpec { private FileResolver fileResolver ; private Object projectDir ; private String gradleVersion = GradleVersion . current ( ) . getVersion ( ) ; private List < String > tasks = new LinkedList < String > ( ) ; private List < String > arguments = new LinkedList < String > ( ) ; public DefaultGradleBuildInvocationSpec ( FileResolver fileResolver , Object projectDir ) { this . fileResolver = fileResolver ; this . projectDir = projectDir ; } public File getProjectDir ( ) { return fileResolver . resolve ( projectDir ) ; } public void setProjectDir ( Object projectDir ) { if ( projectDir = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . projectDir = projectDir ; } public String getGradleVersion ( ) { return gradleVersion ; } public void setGradleVersion ( String gradleVersion ) { if ( gradleVersion = = null ) { throw new IllegalArgumentException ( <str> ) ; } GradleVersion version = GradleVersion . version ( gradleVersion ) ; this . gradleVersion = version . getVersion ( ) ; } public List < String > getTasks ( ) { return tasks ; } public void setTasks ( Iterable < String > tasks ) { this . tasks = tasks = = null ? new LinkedList < String > ( ) : Lists . newLinkedList ( tasks ) ; } public List < String > getArguments ( ) { return arguments ; } public void setArguments ( Iterable < String > arguments ) { this . arguments = arguments = = null ? new LinkedList < String > ( ) : Lists . newLinkedList ( arguments ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } DefaultGradleBuildInvocationSpec that = ( DefaultGradleBuildInvocationSpec ) o ; if ( ! getArguments ( ) . equals ( that . getArguments ( ) ) ) { return false ; } if ( ! getGradleVersion ( ) . equals ( that . getGradleVersion ( ) ) ) { return false ; } if ( ! getProjectDir ( ) . equals ( that . getProjectDir ( ) ) ) { return false ; } if ( ! getTasks ( ) . equals ( that . getTasks ( ) ) ) { return false ; } return true ; } @Override public int hashCode ( ) { int result = getProjectDir ( ) . hashCode ( ) ; result = <int> * result + getGradleVersion ( ) . hashCode ( ) ; result = <int> * result + getTasks ( ) . hashCode ( ) ; result = <int> * result + getArguments ( ) . hashCode ( ) ; return result ; } @Override public String toString ( ) { return <str> + <str> + getProjectDir ( ) . getAbsolutePath ( ) + <str> + <str> + CollectionUtils . join ( <str> , getTasks ( ) ) + <str> + <str> + CollectionUtils . join ( <str> , getArguments ( ) ) + <str> + <str> + getGradleVersion ( ) + <str> ; } } 

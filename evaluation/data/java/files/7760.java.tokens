package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import org . apache . cassandra . cql3 . CQL3Type ; import org . apache . cassandra . cql3 . Constants ; import org . apache . cassandra . cql3 . Term ; import org . apache . cassandra . serializers . TypeSerializer ; import org . apache . cassandra . serializers . EmptySerializer ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . utils . ByteBufferUtil ; public class EmptyType extends AbstractType < Void > { public static final EmptyType instance = new EmptyType ( ) ; private EmptyType ( ) { super ( ComparisonType . CUSTOM ) ; } public int compareCustom ( ByteBuffer o1 , ByteBuffer o2 ) { return <int> ; } public String getString ( ByteBuffer bytes ) { return <str> ; } public ByteBuffer fromString ( String source ) throws MarshalException { if ( ! source . isEmpty ( ) ) throw new MarshalException ( String . format ( <str> , source ) ) ; return ByteBufferUtil . EMPTY_BYTE_BUFFER ; } @Override public Term fromJSONObject ( Object parsed ) throws MarshalException { if ( ! ( parsed instanceof String ) ) throw new MarshalException ( String . format ( <str> , parsed ) ) ; if ( ! ( ( String ) parsed ) . isEmpty ( ) ) throw new MarshalException ( String . format ( <str> , parsed ) ) ; return new Constants . Value ( ByteBufferUtil . EMPTY_BYTE_BUFFER ) ; } @Override public CQL3Type asCQL3Type ( ) { return CQL3Type . Native . EMPTY ; } public TypeSerializer < Void > getSerializer ( ) { return EmptySerializer . instance ; } @Override protected int valueLengthIfFixed ( ) { return <int> ; } }
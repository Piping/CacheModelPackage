package com . google . common . net ; import com . google . common . annotations . GwtCompatible ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; @GwtCompatible public class HostAndPortTest extends TestCase { public void testFromStringWellFormed ( ) { checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; } public void testFromStringBadDefaultPort ( ) { checkFromStringCase ( <str> , - <int> , <str> , <int> , true ) ; checkFromStringCase ( <str> , - <int> , <str> , <int> , true ) ; checkFromStringCase ( <str> , - <int> , <str> , <int> , true ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , true ) ; checkFromStringCase ( <str> , - <int> , <str> , - <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , - <int> , false ) ; checkFromStringCase ( <str> , - <int> , <str> , - <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , - <int> , false ) ; } public void testFromStringUnusedDefaultPort ( ) { checkFromStringCase ( <str> , <int> , <str> , <int> , true ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , true ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , true ) ; } public void testFromStringBadPort ( ) { checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; } public void testFromStringUnparseableNonsense ( ) { checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; checkFromStringCase ( <str> , <int> , null , <int> , false ) ; } public void testFromStringParseableNonsense ( ) { checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; checkFromStringCase ( <str> , - <int> , <str> , <int> , true ) ; checkFromStringCase ( <str> , <int> , <str> , <int> , false ) ; } private static void checkFromStringCase ( String hpString , int defaultPort , String expectHost , int expectPort , boolean expectHasExplicitPort ) { HostAndPort hp ; try { hp = HostAndPort . fromString ( hpString ) ; } catch ( IllegalArgumentException e ) { assertNull ( expectHost ) ; return ; } assertNotNull ( expectHost ) ; final boolean badDefaultPort = ( defaultPort < <int> | | defaultPort > <int> ) ; HostAndPort hp2 = null ; try { hp2 = hp . withDefaultPort ( defaultPort ) ; assertFalse ( badDefaultPort ) ; } catch ( IllegalArgumentException e ) { assertTrue ( badDefaultPort ) ; } if ( expectHasExplicitPort ) { assertTrue ( hp . hasPort ( ) ) ; assertEquals ( expectPort , hp . getPort ( ) ) ; } else { assertFalse ( hp . hasPort ( ) ) ; try { hp . getPort ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } } assertEquals ( expectHost , hp . getHostText ( ) ) ; if ( ! badDefaultPort ) { try { int port = hp2 . getPort ( ) ; assertTrue ( expectPort ! = - <int> ) ; assertEquals ( expectPort , port ) ; } catch ( IllegalStateException e ) { assertEquals ( - <int> , expectPort ) ; } assertEquals ( expectHost , hp2 . getHostText ( ) ) ; } } public void testFromParts ( ) { HostAndPort hp = HostAndPort . fromParts ( <str> , <int> ) ; assertEquals ( <str> , hp . getHostText ( ) ) ; assertTrue ( hp . hasPort ( ) ) ; assertEquals ( <int> , hp . getPort ( ) ) ; try { HostAndPort . fromParts ( <str> , <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } try { HostAndPort . fromParts ( <str> , - <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testFromHost ( ) { HostAndPort hp = HostAndPort . fromHost ( <str> ) ; assertEquals ( <str> , hp . getHostText ( ) ) ; assertFalse ( hp . hasPort ( ) ) ; hp = HostAndPort . fromHost ( <str> ) ; assertEquals ( <str> , hp . getHostText ( ) ) ; assertFalse ( hp . hasPort ( ) ) ; try { HostAndPort . fromHost ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } try { HostAndPort . fromHost ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testGetPortOrDefault ( ) { assertEquals ( <int> , HostAndPort . fromString ( <str> ) . getPortOrDefault ( <int> ) ) ; assertEquals ( <int> , HostAndPort . fromString ( <str> ) . getPortOrDefault ( <int> ) ) ; } public void testHashCodeAndEquals ( ) { HostAndPort hp1 = HostAndPort . fromString ( <str> ) ; HostAndPort hp2 = HostAndPort . fromString ( <str> ) ; HostAndPort hp3 = HostAndPort . fromString ( <str> ) ; HostAndPort hp4 = HostAndPort . fromParts ( <str> , <int> ) ; HostAndPort hp5 = HostAndPort . fromString ( <str> ) ; assertEquals ( hp1 . hashCode ( ) , hp1 . hashCode ( ) ) ; assertEquals ( hp1 . hashCode ( ) , hp2 . hashCode ( ) ) ; assertFalse ( hp1 . hashCode ( ) = = hp3 . hashCode ( ) ) ; assertFalse ( hp3 . hashCode ( ) = = hp4 . hashCode ( ) ) ; assertEquals ( hp4 . hashCode ( ) , hp5 . hashCode ( ) ) ; assertTrue ( hp1 . equals ( hp1 ) ) ; assertTrue ( hp1 . equals ( hp2 ) ) ; assertFalse ( hp1 . equals ( hp3 ) ) ; assertFalse ( hp3 . equals ( hp4 ) ) ; assertTrue ( hp4 . equals ( hp5 ) ) ; assertFalse ( hp1 . equals ( null ) ) ; } public void testRequireBracketsForIPv6 ( ) { assertEquals ( <str> , HostAndPort . fromString ( <str> ) . requireBracketsForIPv6 ( ) . getHostText ( ) ) ; assertEquals ( <str> , HostAndPort . fromString ( <str> ) . requireBracketsForIPv6 ( ) . getHostText ( ) ) ; assertEquals ( <str> , HostAndPort . fromString ( <str> ) . requireBracketsForIPv6 ( ) . getHostText ( ) ) ; assertEquals ( <str> , HostAndPort . fromString ( <str> ) . requireBracketsForIPv6 ( ) . getHostText ( ) ) ; try { HostAndPort . fromString ( <str> ) . requireBracketsForIPv6 ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testToString ( ) { assertEquals ( <str> , <str> + HostAndPort . fromString ( <str> ) ) ; assertEquals ( <str> , HostAndPort . fromString ( <str> ) . toString ( ) ) ; assertEquals ( <str> , HostAndPort . fromParts ( <str> , <int> ) . toString ( ) ) ; assertEquals ( <str> , HostAndPort . fromString ( <str> ) . toString ( ) ) ; assertEquals ( <str> , <str> + HostAndPort . fromString ( <str> ) ) ; assertEquals ( <str> , HostAndPort . fromString ( <str> ) . toString ( ) ) ; assertEquals ( <str> , HostAndPort . fromString ( <str> ) . toString ( ) ) ; assertEquals ( <str> , HostAndPort . fromString ( <str> ) . toString ( ) ) ; assertEquals ( <str> , HostAndPort . fromParts ( <str> , <int> ) . toString ( ) ) ; assertEquals ( <str> , HostAndPort . fromString ( <str> ) . toString ( ) ) ; } public void testSerialization ( ) { SerializableTester . reserializeAndAssert ( HostAndPort . fromParts ( <str> , <int> ) ) ; SerializableTester . reserializeAndAssert ( HostAndPort . fromString ( <str> ) ) ; SerializableTester . reserializeAndAssert ( HostAndPort . fromString ( <str> ) ) ; SerializableTester . reserializeAndAssert ( HostAndPort . fromString ( <str> ) ) ; SerializableTester . reserializeAndAssert ( HostAndPort . fromParts ( <str> , <int> ) ) ; } }
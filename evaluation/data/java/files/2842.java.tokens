package jcuda . jcublas . kernel ; import org . junit . Test ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . jcublas . kernel . KernelFunctionLoader ; import org . nd4j . linalg . io . ClassPathResource ; import java . util . Properties ; public class KernelFunctionLoaderTests { @Test public void testLoader ( ) throws Exception { Nd4j . dtype = DataBuffer . Type . DOUBLE ; KernelFunctionLoader loader = KernelFunctionLoader . getInstance ( ) ; loader . load ( ) ; ClassPathResource res = new ClassPathResource ( <str> , KernelFunctionLoader . class . getClassLoader ( ) ) ; if ( ! res . exists ( ) ) throw new IllegalStateException ( <str> ) ; Properties props = new Properties ( ) ; props . load ( res . getInputStream ( ) ) ; loader . unload ( ) ; } @Test public void testKernelElementWise ( ) { } }
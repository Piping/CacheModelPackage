package rx . schedulers ; import java . util . concurrent . TimeUnit ; import org . openjdk . jmh . annotations . BenchmarkMode ; import org . openjdk . jmh . annotations . Benchmark ; import org . openjdk . jmh . annotations . Mode ; import org . openjdk . jmh . annotations . OutputTimeUnit ; import org . openjdk . jmh . annotations . Param ; import org . openjdk . jmh . annotations . Scope ; import org . openjdk . jmh . annotations . State ; import rx . jmh . InputWithIncrementingInteger ; import rx . jmh . LatchedObserver ; @BenchmarkMode ( Mode . Throughput ) @OutputTimeUnit ( TimeUnit . SECONDS ) @State ( Scope . Thread ) public class IOSchedulerPerf { @State ( Scope . Thread ) public static class Input extends InputWithIncrementingInteger { @Param ( { <str> , <str> , <str> } ) public int size ; @Override public int getSize ( ) { return size ; } } @Benchmark public void subscribeOn ( Input input ) throws InterruptedException { LatchedObserver < Integer > o = input . newLatchedObserver ( ) ; input . observable . subscribeOn ( Schedulers . io ( ) ) . subscribe ( o ) ; o . latch . await ( ) ; } @Benchmark public void observeOn ( Input input ) throws InterruptedException { LatchedObserver < Integer > o = input . newLatchedObserver ( ) ; input . observable . observeOn ( Schedulers . io ( ) ) . subscribe ( o ) ; o . latch . await ( ) ; } }
package org . eclipse . ui . externaltools . internal . variables ; import java . util . LinkedHashSet ; import java . util . Set ; import org . eclipse . core . externaltools . internal . model . ExternalToolBuilder ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IResourceDelta ; import org . eclipse . core . resources . IResourceDeltaVisitor ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . variables . IDynamicVariable ; import org . eclipse . core . variables . IDynamicVariableResolver ; public class BuildFilesResolver implements IDynamicVariableResolver { private static final char ARG_REMOVED = <str> ; private static final char ARG_CHANGED = <str> ; private static final char ARG_ADDED = <str> ; private static final char ARG_DIRS = <str> ; private static final char ARG_FILES = <str> ; private static final String FILE_LIST_SEPARATOR = <str> ; @Override public String resolveValue ( IDynamicVariable variable , String argument ) throws CoreException { String result = null ; IResourceDelta buildDelta = ExternalToolBuilder . getBuildDelta ( ) ; if ( buildDelta ! = null ) { final StringBuffer fileList = new StringBuffer ( ) ; final Set < String > changedResources = new LinkedHashSet < String > ( ) ; int deltas = <int> ; boolean dirs = false , files = false ; if ( argument ! = null ) { if ( argument . indexOf ( ARG_ADDED ) > - <int> ) { deltas | = IResourceDelta . ADDED ; } if ( argument . indexOf ( ARG_CHANGED ) > - <int> ) { deltas | = IResourceDelta . CHANGED ; } if ( argument . indexOf ( ARG_REMOVED ) > - <int> ) { deltas | = IResourceDelta . REMOVED ; } if ( argument . indexOf ( ARG_DIRS ) > - <int> ) { dirs = true ; } if ( argument . indexOf ( ARG_FILES ) > - <int> ) { files = true ; } } if ( deltas = = <int> ) { deltas = IResourceDelta . ADDED | IResourceDelta . CHANGED | IResourceDelta . REMOVED ; } if ( ! dirs & & ! files ) { dirs = true ; files = true ; } final int trackDeltas = deltas ; final boolean trackDirs = dirs ; final boolean trackFiles = files ; buildDelta . accept ( new IResourceDeltaVisitor ( ) { @Override public boolean visit ( IResourceDelta delta ) throws CoreException { IResource resource = delta . getResource ( ) ; boolean isTracked = ( delta . getKind ( ) & trackDeltas ) > <int> ; if ( isTracked ) { isTracked = trackDirs & & resource . getType ( ) ! = IResource . FILE ; isTracked | = trackFiles & & resource . getType ( ) = = IResource . FILE ; } if ( isTracked ) { String osPath = resource . getLocation ( ) . toOSString ( ) ; if ( changedResources . add ( osPath ) ) { if ( fileList . length ( ) > <int> ) { fileList . append ( FILE_LIST_SEPARATOR ) ; } osPath = osPath . replaceAll ( <str> , <str> ) ; fileList . append ( <str> + osPath + <str> ) ; } } return true ; } } , deltas ) ; result = fileList . toString ( ) ; } return result ; } }
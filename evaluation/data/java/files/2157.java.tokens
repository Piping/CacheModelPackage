package junit . tests . runner ; import java . io . ByteArrayOutputStream ; import java . io . OutputStream ; import java . io . PrintStream ; import junit . framework . AssertionFailedError ; import junit . framework . TestCase ; import junit . framework . TestResult ; import junit . framework . TestSuite ; import junit . textui . ResultPrinter ; import junit . textui . TestRunner ; public class TextFeedbackTest extends TestCase { OutputStream output ; TestRunner runner ; static class TestResultPrinter extends ResultPrinter { TestResultPrinter ( PrintStream writer ) { super ( writer ) ; } @Override protected String elapsedTimeAsString ( long runTime ) { return <str> ; } } public static void main ( String [ ] args ) { TestRunner . run ( TextFeedbackTest . class ) ; } @Override public void setUp ( ) { output = new ByteArrayOutputStream ( ) ; runner = new TestRunner ( new TestResultPrinter ( new PrintStream ( output ) ) ) ; } public void testEmptySuite ( ) { String expected = expected ( new String [ ] { <str> , <str> , <str> , <str> , <str> } ) ; runner . doRun ( new TestSuite ( ) ) ; assertEquals ( expected , output . toString ( ) ) ; } public void testOneTest ( ) { String expected = expected ( new String [ ] { <str> , <str> , <str> , <str> , <str> } ) ; TestSuite suite = new TestSuite ( ) ; suite . addTest ( new TestCase ( ) { @Override public void runTest ( ) { } } ) ; runner . doRun ( suite ) ; assertEquals ( expected , output . toString ( ) ) ; } public void testTwoTests ( ) { String expected = expected ( new String [ ] { <str> , <str> , <str> , <str> , <str> } ) ; TestSuite suite = new TestSuite ( ) ; suite . addTest ( new TestCase ( ) { @Override public void runTest ( ) { } } ) ; suite . addTest ( new TestCase ( ) { @Override public void runTest ( ) { } } ) ; runner . doRun ( suite ) ; assertEquals ( expected , output . toString ( ) ) ; } public void testFailure ( ) { String expected = expected ( new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ) ; ResultPrinter printer = new TestResultPrinter ( new PrintStream ( output ) ) { @Override public void printFailures ( TestResult result ) { getWriter ( ) . println ( <str> ) ; } } ; runner . setPrinter ( printer ) ; TestSuite suite = new TestSuite ( ) ; suite . addTest ( new TestCase ( ) { @Override public void runTest ( ) { throw new AssertionFailedError ( ) ; } } ) ; runner . doRun ( suite ) ; assertEquals ( expected , output . toString ( ) ) ; } public void testError ( ) { String expected = expected ( new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ) ; ResultPrinter printer = new TestResultPrinter ( new PrintStream ( output ) ) { @Override public void printErrors ( TestResult result ) { getWriter ( ) . println ( <str> ) ; } } ; runner . setPrinter ( printer ) ; TestSuite suite = new TestSuite ( ) ; suite . addTest ( new TestCase ( ) { @Override public void runTest ( ) throws Exception { throw new Exception ( ) ; } } ) ; runner . doRun ( suite ) ; assertEquals ( expected , output . toString ( ) ) ; } private String expected ( String [ ] lines ) { OutputStream expected = new ByteArrayOutputStream ( ) ; PrintStream expectedWriter = new PrintStream ( expected ) ; for ( int i = <int> ; i < lines . length ; i + + ) { expectedWriter . println ( lines [ i ] ) ; } return expected . toString ( ) ; } }
package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . math . BigInteger ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . swt . SWT ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Combo ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . PlatformUI ; public class GoToAddressComposite { private Text fExpression ; private Button fOKButton ; private Button fCancelButton ; private Composite fComposite ; private Combo fGoToCombo ; private Button fHexButton ; public Control createControl ( Composite parent ) { fComposite = new Composite ( parent , SWT . NONE ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( fComposite , DebugUIPlugin . getUniqueIdentifier ( ) + <str> ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = <int> ; layout . makeColumnsEqualWidth = false ; layout . marginHeight = <int> ; layout . marginLeft = <int> ; fComposite . setLayout ( layout ) ; fGoToCombo = new Combo ( fComposite , SWT . READ_ONLY ) ; fGoToCombo . add ( DebugUIMessages . GoToAddressComposite_0 ) ; fGoToCombo . add ( DebugUIMessages . GoToAddressComposite_4 ) ; fGoToCombo . add ( DebugUIMessages . GoToAddressComposite_5 ) ; fGoToCombo . select ( <int> ) ; fExpression = new Text ( fComposite , SWT . SINGLE | SWT . BORDER ) ; fExpression . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; fHexButton = new Button ( fComposite , SWT . CHECK ) ; fHexButton . setText ( DebugUIMessages . GoToAddressComposite_6 ) ; fHexButton . setSelection ( true ) ; fOKButton = new Button ( fComposite , SWT . NONE ) ; fOKButton . setText ( DebugUIMessages . GoToAddressComposite_1 ) ; fCancelButton = new Button ( fComposite , SWT . NONE ) ; fCancelButton . setText ( DebugUIMessages . GoToAddressComposite_2 ) ; return fComposite ; } public int getHeight ( ) { int height = fComposite . computeSize ( SWT . DEFAULT , SWT . DEFAULT ) . y ; return height ; } public Button getButton ( int id ) { if ( id = = IDialogConstants . OK_ID ) return fOKButton ; else if ( id = = IDialogConstants . CANCEL_ID ) return fCancelButton ; return null ; } public String getExpressionText ( ) { return fExpression . getText ( ) ; } public Text getExpressionWidget ( ) { return fExpression ; } public boolean isGoToAddress ( ) { return fGoToCombo . getSelectionIndex ( ) = = <int> ; } public boolean isOffset ( ) { return fGoToCombo . getSelectionIndex ( ) = = <int> ; } public boolean isJump ( ) { return fGoToCombo . getSelectionIndex ( ) = = <int> ; } public boolean isHex ( ) { return fHexButton . getSelection ( ) ; } public BigInteger getGoToAddress ( BigInteger baseAddress , BigInteger selectedAddress ) throws NumberFormatException { boolean add = true ; String expression = getExpressionText ( ) ; boolean hex = isHex ( ) ; int radix = hex ? <int> : <int> ; expression = expression . trim ( ) ; if ( isGoToAddress ( ) ) { expression = expression . toUpperCase ( ) ; if ( expression . startsWith ( <str> ) ) { expression = expression . substring ( <int> ) ; radix = <int> ; } return new BigInteger ( expression , radix ) ; } if ( expression . startsWith ( <str> ) ) { expression = expression . substring ( <int> ) ; } else if ( expression . startsWith ( <str> ) ) { expression = expression . substring ( <int> ) ; add = false ; } expression = expression . toUpperCase ( ) ; if ( expression . startsWith ( <str> ) ) { expression = expression . substring ( <int> ) ; radix = <int> ; } BigInteger gotoAddress = new BigInteger ( expression , radix ) ; BigInteger address = baseAddress ; if ( isJump ( ) ) address = selectedAddress ; if ( address = = null ) throw new NumberFormatException ( DebugUIMessages . GoToAddressComposite_7 ) ; if ( add ) gotoAddress = address . add ( gotoAddress ) ; else gotoAddress = address . subtract ( gotoAddress ) ; return gotoAddress ; } }
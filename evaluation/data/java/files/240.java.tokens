package com . google . common . escape ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . ImmutableMap ; import junit . framework . TestCase ; import java . util . Map ; @GwtCompatible public class ArrayBasedEscaperMapTest extends TestCase { public void testNullMap ( ) { try { ArrayBasedEscaperMap . create ( null ) ; fail ( <str> ) ; } catch ( NullPointerException e ) { } } public void testEmptyMap ( ) { Map < Character , String > map = ImmutableMap . of ( ) ; ArrayBasedEscaperMap fem = ArrayBasedEscaperMap . create ( map ) ; assertEquals ( <int> , fem . getReplacementArray ( ) . length ) ; } public void testMapLength ( ) { Map < Character , String > map = ImmutableMap . of ( <str> , <str> , <str> , <str> ) ; ArrayBasedEscaperMap fem = ArrayBasedEscaperMap . create ( map ) ; assertEquals ( <str> + <int> , fem . getReplacementArray ( ) . length ) ; } public void testMapping ( ) { Map < Character , String > map = ImmutableMap . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; ArrayBasedEscaperMap fem = ArrayBasedEscaperMap . create ( map ) ; char [ ] [ ] replacementArray = fem . getReplacementArray ( ) ; assertEquals ( <int> , replacementArray . length ) ; assertNotNull ( replacementArray [ replacementArray . length - <int> ] ) ; for ( int n = <int> ; n < replacementArray . length ; + + n ) { char c = ( char ) n ; if ( replacementArray [ n ] ! = null ) { assertEquals ( map . get ( c ) , new String ( replacementArray [ n ] ) ) ; } else { assertFalse ( map . containsKey ( c ) ) ; } } } } 

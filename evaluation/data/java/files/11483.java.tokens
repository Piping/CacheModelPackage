package com . nostra13 . universalimageloader . core . display ; import android . graphics . * ; import android . graphics . drawable . Drawable ; import com . nostra13 . universalimageloader . core . assist . LoadedFrom ; import com . nostra13 . universalimageloader . core . imageaware . ImageAware ; import com . nostra13 . universalimageloader . core . imageaware . ImageViewAware ; public class RoundedBitmapDisplayer implements BitmapDisplayer { protected final int cornerRadius ; protected final int margin ; public RoundedBitmapDisplayer ( int cornerRadiusPixels ) { this ( cornerRadiusPixels , <int> ) ; } public RoundedBitmapDisplayer ( int cornerRadiusPixels , int marginPixels ) { this . cornerRadius = cornerRadiusPixels ; this . margin = marginPixels ; } @Override public void display ( Bitmap bitmap , ImageAware imageAware , LoadedFrom loadedFrom ) { if ( ! ( imageAware instanceof ImageViewAware ) ) { throw new IllegalArgumentException ( <str> ) ; } imageAware . setImageDrawable ( new RoundedDrawable ( bitmap , cornerRadius , margin ) ) ; } public static class RoundedDrawable extends Drawable { protected final float cornerRadius ; protected final int margin ; protected final RectF mRect = new RectF ( ) , mBitmapRect ; protected final BitmapShader bitmapShader ; protected final Paint paint ; public RoundedDrawable ( Bitmap bitmap , int cornerRadius , int margin ) { this . cornerRadius = cornerRadius ; this . margin = margin ; bitmapShader = new BitmapShader ( bitmap , Shader . TileMode . CLAMP , Shader . TileMode . CLAMP ) ; mBitmapRect = new RectF ( margin , margin , bitmap . getWidth ( ) - margin , bitmap . getHeight ( ) - margin ) ; paint = new Paint ( ) ; paint . setAntiAlias ( true ) ; paint . setShader ( bitmapShader ) ; paint . setFilterBitmap ( true ) ; paint . setDither ( true ) ; } @Override protected void onBoundsChange ( Rect bounds ) { super . onBoundsChange ( bounds ) ; mRect . set ( margin , margin , bounds . width ( ) - margin , bounds . height ( ) - margin ) ; Matrix shaderMatrix = new Matrix ( ) ; shaderMatrix . setRectToRect ( mBitmapRect , mRect , Matrix . ScaleToFit . FILL ) ; bitmapShader . setLocalMatrix ( shaderMatrix ) ; } @Override public void draw ( Canvas canvas ) { canvas . drawRoundRect ( mRect , cornerRadius , cornerRadius , paint ) ; } @Override public int getOpacity ( ) { return PixelFormat . TRANSLUCENT ; } @Override public void setAlpha ( int alpha ) { paint . setAlpha ( alpha ) ; } @Override public void setColorFilter ( ColorFilter cf ) { paint . setColorFilter ( cf ) ; } } }
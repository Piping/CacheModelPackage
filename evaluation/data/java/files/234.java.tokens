package com . badlogic . gdx . graphics . g2d ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttribute ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . math . Affine2 ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . utils . NumberUtils ; public class SpriteBatch implements Batch { private Mesh mesh ; final float [ ] vertices ; int idx = <int> ; Texture lastTexture = null ; float invTexWidth = <int> , invTexHeight = <int> ; boolean drawing = false ; private final Matrix4 transformMatrix = new Matrix4 ( ) ; private final Matrix4 projectionMatrix = new Matrix4 ( ) ; private final Matrix4 combinedMatrix = new Matrix4 ( ) ; private boolean blendingDisabled = false ; private int blendSrcFunc = GL20 . GL_SRC_ALPHA ; private int blendDstFunc = GL20 . GL_ONE_MINUS_SRC_ALPHA ; private final ShaderProgram shader ; private ShaderProgram customShader = null ; private boolean ownsShader ; float color = Color . WHITE . toFloatBits ( ) ; private Color tempColor = new Color ( <int> , <int> , <int> , <int> ) ; public int renderCalls = <int> ; public int totalRenderCalls = <int> ; public int maxSpritesInBatch = <int> ; public SpriteBatch ( ) { this ( <int> , null ) ; } public SpriteBatch ( int size ) { this ( size , null ) ; } public SpriteBatch ( int size , ShaderProgram defaultShader ) { if ( size > <int> ) throw new IllegalArgumentException ( <str> + size ) ; Mesh . VertexDataType vertexDataType = Mesh . VertexDataType . VertexArray ; if ( Gdx . gl30 ! = null ) { vertexDataType = Mesh . VertexDataType . VertexBufferObjectWithVAO ; } mesh = new Mesh ( vertexDataType , false , size * <int> , size * <int> , new VertexAttribute ( Usage . Position , <int> , ShaderProgram . POSITION_ATTRIBUTE ) , new VertexAttribute ( Usage . ColorPacked , <int> , ShaderProgram . COLOR_ATTRIBUTE ) , new VertexAttribute ( Usage . TextureCoordinates , <int> , ShaderProgram . TEXCOORD_ATTRIBUTE + <str> ) ) ; projectionMatrix . setToOrtho2D ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; vertices = new float [ size * Sprite . SPRITE_SIZE ] ; int len = size * <int> ; short [ ] indices = new short [ len ] ; short j = <int> ; for ( int i = <int> ; i < len ; i + = <int> , j + = <int> ) { indices [ i ] = j ; indices [ i + <int> ] = ( short ) ( j + <int> ) ; indices [ i + <int> ] = ( short ) ( j + <int> ) ; indices [ i + <int> ] = ( short ) ( j + <int> ) ; indices [ i + <int> ] = ( short ) ( j + <int> ) ; indices [ i + <int> ] = j ; } mesh . setIndices ( indices ) ; if ( defaultShader = = null ) { shader = createDefaultShader ( ) ; ownsShader = true ; } else shader = defaultShader ; } static public ShaderProgram createDefaultShader ( ) { String vertexShader = <str> + ShaderProgram . POSITION_ATTRIBUTE + <str> + <str> + ShaderProgram . COLOR_ATTRIBUTE + <str> + <str> + ShaderProgram . TEXCOORD_ATTRIBUTE + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + ShaderProgram . COLOR_ATTRIBUTE + <str> + <str> + <str> + ShaderProgram . TEXCOORD_ATTRIBUTE + <str> + <str> + ShaderProgram . POSITION_ATTRIBUTE + <str> + <str> ; String fragmentShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; ShaderProgram shader = new ShaderProgram ( vertexShader , fragmentShader ) ; if ( shader . isCompiled ( ) = = false ) throw new IllegalArgumentException ( <str> + shader . getLog ( ) ) ; return shader ; } @Override public void begin ( ) { if ( drawing ) throw new IllegalStateException ( <str> ) ; renderCalls = <int> ; Gdx . gl . glDepthMask ( false ) ; if ( customShader ! = null ) customShader . begin ( ) ; else shader . begin ( ) ; setupMatrices ( ) ; drawing = true ; } @Override public void end ( ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; if ( idx > <int> ) flush ( ) ; lastTexture = null ; drawing = false ; GL20 gl = Gdx . gl ; gl . glDepthMask ( true ) ; if ( isBlendingEnabled ( ) ) gl . glDisable ( GL20 . GL_BLEND ) ; if ( customShader ! = null ) customShader . end ( ) ; else shader . end ( ) ; } @Override public void setColor ( Color tint ) { color = tint . toFloatBits ( ) ; } @Override public void setColor ( float r , float g , float b , float a ) { int intBits = ( int ) ( <int> * a ) < < <int> | ( int ) ( <int> * b ) < < <int> | ( int ) ( <int> * g ) < < <int> | ( int ) ( <int> * r ) ; color = NumberUtils . intToFloatColor ( intBits ) ; } @Override public void setColor ( float color ) { this . color = color ; } @Override public Color getColor ( ) { int intBits = NumberUtils . floatToIntColor ( color ) ; Color color = tempColor ; color . r = ( intBits & <hex> ) / <int> f ; color . g = ( ( intBits > > > <int> ) & <hex> ) / <int> f ; color . b = ( ( intBits > > > <int> ) & <hex> ) / <int> f ; color . a = ( ( intBits > > > <int> ) & <hex> ) / <int> f ; return color ; } @Override public float getPackedColor ( ) { return color ; } @Override public void draw ( Texture texture , float x , float y , float originX , float originY , float width , float height , float scaleX , float scaleY , float rotation , int srcX , int srcY , int srcWidth , int srcHeight , boolean flipX , boolean flipY ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; float [ ] vertices = this . vertices ; if ( texture ! = lastTexture ) switchTexture ( texture ) ; else if ( idx = = vertices . length ) flush ( ) ; final float worldOriginX = x + originX ; final float worldOriginY = y + originY ; float fx = - originX ; float fy = - originY ; float fx2 = width - originX ; float fy2 = height - originY ; if ( scaleX ! = <int> | | scaleY ! = <int> ) { fx * = scaleX ; fy * = scaleY ; fx2 * = scaleX ; fy2 * = scaleY ; } final float p1x = fx ; final float p1y = fy ; final float p2x = fx ; final float p2y = fy2 ; final float p3x = fx2 ; final float p3y = fy2 ; final float p4x = fx2 ; final float p4y = fy ; float x1 ; float y1 ; float x2 ; float y2 ; float x3 ; float y3 ; float x4 ; float y4 ; if ( rotation ! = <int> ) { final float cos = MathUtils . cosDeg ( rotation ) ; final float sin = MathUtils . sinDeg ( rotation ) ; x1 = cos * p1x - sin * p1y ; y1 = sin * p1x + cos * p1y ; x2 = cos * p2x - sin * p2y ; y2 = sin * p2x + cos * p2y ; x3 = cos * p3x - sin * p3y ; y3 = sin * p3x + cos * p3y ; x4 = x1 + ( x3 - x2 ) ; y4 = y3 - ( y2 - y1 ) ; } else { x1 = p1x ; y1 = p1y ; x2 = p2x ; y2 = p2y ; x3 = p3x ; y3 = p3y ; x4 = p4x ; y4 = p4y ; } x1 + = worldOriginX ; y1 + = worldOriginY ; x2 + = worldOriginX ; y2 + = worldOriginY ; x3 + = worldOriginX ; y3 + = worldOriginY ; x4 + = worldOriginX ; y4 + = worldOriginY ; float u = srcX * invTexWidth ; float v = ( srcY + srcHeight ) * invTexHeight ; float u2 = ( srcX + srcWidth ) * invTexWidth ; float v2 = srcY * invTexHeight ; if ( flipX ) { float tmp = u ; u = u2 ; u2 = tmp ; } if ( flipY ) { float tmp = v ; v = v2 ; v2 = tmp ; } float color = this . color ; int idx = this . idx ; vertices [ idx + + ] = x1 ; vertices [ idx + + ] = y1 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v ; vertices [ idx + + ] = x2 ; vertices [ idx + + ] = y2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = x3 ; vertices [ idx + + ] = y3 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = x4 ; vertices [ idx + + ] = y4 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v ; this . idx = idx ; } @Override public void draw ( Texture texture , float x , float y , float width , float height , int srcX , int srcY , int srcWidth , int srcHeight , boolean flipX , boolean flipY ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; float [ ] vertices = this . vertices ; if ( texture ! = lastTexture ) switchTexture ( texture ) ; else if ( idx = = vertices . length ) flush ( ) ; float u = srcX * invTexWidth ; float v = ( srcY + srcHeight ) * invTexHeight ; float u2 = ( srcX + srcWidth ) * invTexWidth ; float v2 = srcY * invTexHeight ; final float fx2 = x + width ; final float fy2 = y + height ; if ( flipX ) { float tmp = u ; u = u2 ; u2 = tmp ; } if ( flipY ) { float tmp = v ; v = v2 ; v2 = tmp ; } float color = this . color ; int idx = this . idx ; vertices [ idx + + ] = x ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v ; vertices [ idx + + ] = x ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v ; this . idx = idx ; } @Override public void draw ( Texture texture , float x , float y , int srcX , int srcY , int srcWidth , int srcHeight ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; float [ ] vertices = this . vertices ; if ( texture ! = lastTexture ) switchTexture ( texture ) ; else if ( idx = = vertices . length ) flush ( ) ; final float u = srcX * invTexWidth ; final float v = ( srcY + srcHeight ) * invTexHeight ; final float u2 = ( srcX + srcWidth ) * invTexWidth ; final float v2 = srcY * invTexHeight ; final float fx2 = x + srcWidth ; final float fy2 = y + srcHeight ; float color = this . color ; int idx = this . idx ; vertices [ idx + + ] = x ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v ; vertices [ idx + + ] = x ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v ; this . idx = idx ; } @Override public void draw ( Texture texture , float x , float y , float width , float height , float u , float v , float u2 , float v2 ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; float [ ] vertices = this . vertices ; if ( texture ! = lastTexture ) switchTexture ( texture ) ; else if ( idx = = vertices . length ) flush ( ) ; final float fx2 = x + width ; final float fy2 = y + height ; float color = this . color ; int idx = this . idx ; vertices [ idx + + ] = x ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v ; vertices [ idx + + ] = x ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v ; this . idx = idx ; } @Override public void draw ( Texture texture , float x , float y ) { draw ( texture , x , y , texture . getWidth ( ) , texture . getHeight ( ) ) ; } @Override public void draw ( Texture texture , float x , float y , float width , float height ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; float [ ] vertices = this . vertices ; if ( texture ! = lastTexture ) switchTexture ( texture ) ; else if ( idx = = vertices . length ) flush ( ) ; final float fx2 = x + width ; final float fy2 = y + height ; final float u = <int> ; final float v = <int> ; final float u2 = <int> ; final float v2 = <int> ; float color = this . color ; int idx = this . idx ; vertices [ idx + + ] = x ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v ; vertices [ idx + + ] = x ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v ; this . idx = idx ; } @Override public void draw ( Texture texture , float [ ] spriteVertices , int offset , int count ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; int verticesLength = vertices . length ; int remainingVertices = verticesLength ; if ( texture ! = lastTexture ) switchTexture ( texture ) ; else { remainingVertices - = idx ; if ( remainingVertices = = <int> ) { flush ( ) ; remainingVertices = verticesLength ; } } int copyCount = Math . min ( remainingVertices , count ) ; System . arraycopy ( spriteVertices , offset , vertices , idx , copyCount ) ; idx + = copyCount ; count - = copyCount ; while ( count > <int> ) { offset + = copyCount ; flush ( ) ; copyCount = Math . min ( verticesLength , count ) ; System . arraycopy ( spriteVertices , offset , vertices , <int> , copyCount ) ; idx + = copyCount ; count - = copyCount ; } } @Override public void draw ( TextureRegion region , float x , float y ) { draw ( region , x , y , region . getRegionWidth ( ) , region . getRegionHeight ( ) ) ; } @Override public void draw ( TextureRegion region , float x , float y , float width , float height ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; float [ ] vertices = this . vertices ; Texture texture = region . texture ; if ( texture ! = lastTexture ) { switchTexture ( texture ) ; } else if ( idx = = vertices . length ) flush ( ) ; final float fx2 = x + width ; final float fy2 = y + height ; final float u = region . u ; final float v = region . v2 ; final float u2 = region . u2 ; final float v2 = region . v ; float color = this . color ; int idx = this . idx ; vertices [ idx + + ] = x ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v ; vertices [ idx + + ] = x ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = fy2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = y ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v ; this . idx = idx ; } @Override public void draw ( TextureRegion region , float x , float y , float originX , float originY , float width , float height , float scaleX , float scaleY , float rotation ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; float [ ] vertices = this . vertices ; Texture texture = region . texture ; if ( texture ! = lastTexture ) { switchTexture ( texture ) ; } else if ( idx = = vertices . length ) flush ( ) ; final float worldOriginX = x + originX ; final float worldOriginY = y + originY ; float fx = - originX ; float fy = - originY ; float fx2 = width - originX ; float fy2 = height - originY ; if ( scaleX ! = <int> | | scaleY ! = <int> ) { fx * = scaleX ; fy * = scaleY ; fx2 * = scaleX ; fy2 * = scaleY ; } final float p1x = fx ; final float p1y = fy ; final float p2x = fx ; final float p2y = fy2 ; final float p3x = fx2 ; final float p3y = fy2 ; final float p4x = fx2 ; final float p4y = fy ; float x1 ; float y1 ; float x2 ; float y2 ; float x3 ; float y3 ; float x4 ; float y4 ; if ( rotation ! = <int> ) { final float cos = MathUtils . cosDeg ( rotation ) ; final float sin = MathUtils . sinDeg ( rotation ) ; x1 = cos * p1x - sin * p1y ; y1 = sin * p1x + cos * p1y ; x2 = cos * p2x - sin * p2y ; y2 = sin * p2x + cos * p2y ; x3 = cos * p3x - sin * p3y ; y3 = sin * p3x + cos * p3y ; x4 = x1 + ( x3 - x2 ) ; y4 = y3 - ( y2 - y1 ) ; } else { x1 = p1x ; y1 = p1y ; x2 = p2x ; y2 = p2y ; x3 = p3x ; y3 = p3y ; x4 = p4x ; y4 = p4y ; } x1 + = worldOriginX ; y1 + = worldOriginY ; x2 + = worldOriginX ; y2 + = worldOriginY ; x3 + = worldOriginX ; y3 + = worldOriginY ; x4 + = worldOriginX ; y4 + = worldOriginY ; final float u = region . u ; final float v = region . v2 ; final float u2 = region . u2 ; final float v2 = region . v ; float color = this . color ; int idx = this . idx ; vertices [ idx + + ] = x1 ; vertices [ idx + + ] = y1 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v ; vertices [ idx + + ] = x2 ; vertices [ idx + + ] = y2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = x3 ; vertices [ idx + + ] = y3 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = x4 ; vertices [ idx + + ] = y4 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v ; this . idx = idx ; } @Override public void draw ( TextureRegion region , float x , float y , float originX , float originY , float width , float height , float scaleX , float scaleY , float rotation , boolean clockwise ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; float [ ] vertices = this . vertices ; Texture texture = region . texture ; if ( texture ! = lastTexture ) { switchTexture ( texture ) ; } else if ( idx = = vertices . length ) flush ( ) ; final float worldOriginX = x + originX ; final float worldOriginY = y + originY ; float fx = - originX ; float fy = - originY ; float fx2 = width - originX ; float fy2 = height - originY ; if ( scaleX ! = <int> | | scaleY ! = <int> ) { fx * = scaleX ; fy * = scaleY ; fx2 * = scaleX ; fy2 * = scaleY ; } final float p1x = fx ; final float p1y = fy ; final float p2x = fx ; final float p2y = fy2 ; final float p3x = fx2 ; final float p3y = fy2 ; final float p4x = fx2 ; final float p4y = fy ; float x1 ; float y1 ; float x2 ; float y2 ; float x3 ; float y3 ; float x4 ; float y4 ; if ( rotation ! = <int> ) { final float cos = MathUtils . cosDeg ( rotation ) ; final float sin = MathUtils . sinDeg ( rotation ) ; x1 = cos * p1x - sin * p1y ; y1 = sin * p1x + cos * p1y ; x2 = cos * p2x - sin * p2y ; y2 = sin * p2x + cos * p2y ; x3 = cos * p3x - sin * p3y ; y3 = sin * p3x + cos * p3y ; x4 = x1 + ( x3 - x2 ) ; y4 = y3 - ( y2 - y1 ) ; } else { x1 = p1x ; y1 = p1y ; x2 = p2x ; y2 = p2y ; x3 = p3x ; y3 = p3y ; x4 = p4x ; y4 = p4y ; } x1 + = worldOriginX ; y1 + = worldOriginY ; x2 + = worldOriginX ; y2 + = worldOriginY ; x3 + = worldOriginX ; y3 + = worldOriginY ; x4 + = worldOriginX ; y4 + = worldOriginY ; float u1 , v1 , u2 , v2 , u3 , v3 , u4 , v4 ; if ( clockwise ) { u1 = region . u2 ; v1 = region . v2 ; u2 = region . u ; v2 = region . v2 ; u3 = region . u ; v3 = region . v ; u4 = region . u2 ; v4 = region . v ; } else { u1 = region . u ; v1 = region . v ; u2 = region . u2 ; v2 = region . v ; u3 = region . u2 ; v3 = region . v2 ; u4 = region . u ; v4 = region . v2 ; } float color = this . color ; int idx = this . idx ; vertices [ idx + + ] = x1 ; vertices [ idx + + ] = y1 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u1 ; vertices [ idx + + ] = v1 ; vertices [ idx + + ] = x2 ; vertices [ idx + + ] = y2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = x3 ; vertices [ idx + + ] = y3 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u3 ; vertices [ idx + + ] = v3 ; vertices [ idx + + ] = x4 ; vertices [ idx + + ] = y4 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u4 ; vertices [ idx + + ] = v4 ; this . idx = idx ; } @Override public void draw ( TextureRegion region , float width , float height , Affine2 transform ) { if ( ! drawing ) throw new IllegalStateException ( <str> ) ; float [ ] vertices = this . vertices ; Texture texture = region . texture ; if ( texture ! = lastTexture ) { switchTexture ( texture ) ; } else if ( idx = = vertices . length ) { flush ( ) ; } float x1 = transform . m02 ; float y1 = transform . m12 ; float x2 = transform . m01 * height + transform . m02 ; float y2 = transform . m11 * height + transform . m12 ; float x3 = transform . m00 * width + transform . m01 * height + transform . m02 ; float y3 = transform . m10 * width + transform . m11 * height + transform . m12 ; float x4 = transform . m00 * width + transform . m02 ; float y4 = transform . m10 * width + transform . m12 ; float u = region . u ; float v = region . v2 ; float u2 = region . u2 ; float v2 = region . v ; float color = this . color ; int idx = this . idx ; vertices [ idx + + ] = x1 ; vertices [ idx + + ] = y1 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v ; vertices [ idx + + ] = x2 ; vertices [ idx + + ] = y2 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = x3 ; vertices [ idx + + ] = y3 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v2 ; vertices [ idx + + ] = x4 ; vertices [ idx + + ] = y4 ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v ; this . idx = idx ; } @Override public void flush ( ) { if ( idx = = <int> ) return ; renderCalls + + ; totalRenderCalls + + ; int spritesInBatch = idx / <int> ; if ( spritesInBatch > maxSpritesInBatch ) maxSpritesInBatch = spritesInBatch ; int count = spritesInBatch * <int> ; lastTexture . bind ( ) ; Mesh mesh = this . mesh ; mesh . setVertices ( vertices , <int> , idx ) ; mesh . getIndicesBuffer ( ) . position ( <int> ) ; mesh . getIndicesBuffer ( ) . limit ( count ) ; if ( blendingDisabled ) { Gdx . gl . glDisable ( GL20 . GL_BLEND ) ; } else { Gdx . gl . glEnable ( GL20 . GL_BLEND ) ; if ( blendSrcFunc ! = - <int> ) Gdx . gl . glBlendFunc ( blendSrcFunc , blendDstFunc ) ; } mesh . render ( customShader ! = null ? customShader : shader , GL20 . GL_TRIANGLES , <int> , count ) ; idx = <int> ; } @Override public void disableBlending ( ) { if ( blendingDisabled ) return ; flush ( ) ; blendingDisabled = true ; } @Override public void enableBlending ( ) { if ( ! blendingDisabled ) return ; flush ( ) ; blendingDisabled = false ; } @Override public void setBlendFunction ( int srcFunc , int dstFunc ) { if ( blendSrcFunc = = srcFunc & & blendDstFunc = = dstFunc ) return ; flush ( ) ; blendSrcFunc = srcFunc ; blendDstFunc = dstFunc ; } @Override public int getBlendSrcFunc ( ) { return blendSrcFunc ; } @Override public int getBlendDstFunc ( ) { return blendDstFunc ; } @Override public void dispose ( ) { mesh . dispose ( ) ; if ( ownsShader & & shader ! = null ) shader . dispose ( ) ; } @Override public Matrix4 getProjectionMatrix ( ) { return projectionMatrix ; } @Override public Matrix4 getTransformMatrix ( ) { return transformMatrix ; } @Override public void setProjectionMatrix ( Matrix4 projection ) { if ( drawing ) flush ( ) ; projectionMatrix . set ( projection ) ; if ( drawing ) setupMatrices ( ) ; } @Override public void setTransformMatrix ( Matrix4 transform ) { if ( drawing ) flush ( ) ; transformMatrix . set ( transform ) ; if ( drawing ) setupMatrices ( ) ; } private void setupMatrices ( ) { combinedMatrix . set ( projectionMatrix ) . mul ( transformMatrix ) ; if ( customShader ! = null ) { customShader . setUniformMatrix ( <str> , combinedMatrix ) ; customShader . setUniformi ( <str> , <int> ) ; } else { shader . setUniformMatrix ( <str> , combinedMatrix ) ; shader . setUniformi ( <str> , <int> ) ; } } protected void switchTexture ( Texture texture ) { flush ( ) ; lastTexture = texture ; invTexWidth = <float> / texture . getWidth ( ) ; invTexHeight = <float> / texture . getHeight ( ) ; } @Override public void setShader ( ShaderProgram shader ) { if ( drawing ) { flush ( ) ; if ( customShader ! = null ) customShader . end ( ) ; else this . shader . end ( ) ; } customShader = shader ; if ( drawing ) { if ( customShader ! = null ) customShader . begin ( ) ; else this . shader . begin ( ) ; setupMatrices ( ) ; } } @Override public ShaderProgram getShader ( ) { if ( customShader = = null ) { return shader ; } return customShader ; } @Override public boolean isBlendingEnabled ( ) { return ! blendingDisabled ; } public boolean isDrawing ( ) { return drawing ; } } 

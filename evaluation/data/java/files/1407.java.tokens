package org . eclipse . debug . internal . ui . viewers . update ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IStackFrame ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelSelectionPolicy ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . ITreeSelection ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . jface . viewers . TreeSelection ; public class DefaultSelectionPolicy implements IModelSelectionPolicy { private IDebugElement fDebugElement ; public DefaultSelectionPolicy ( IDebugElement element ) { fDebugElement = element ; } @Override public boolean contains ( ISelection selection , IPresentationContext context ) { if ( IDebugUIConstants . ID_DEBUG_VIEW . equals ( context . getId ( ) ) ) { if ( selection instanceof IStructuredSelection ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; Object element = ss . getFirstElement ( ) ; if ( element instanceof IDebugElement ) { IDebugElement debugElement = ( IDebugElement ) element ; return fDebugElement . getDebugTarget ( ) . equals ( debugElement . getDebugTarget ( ) ) ; } } } return false ; } @Override public boolean overrides ( ISelection existing , ISelection candidate , IPresentationContext context ) { if ( IDebugUIConstants . ID_DEBUG_VIEW . equals ( context . getId ( ) ) ) { if ( existing instanceof IStructuredSelection & & candidate instanceof IStructuredSelection ) { IStructuredSelection ssExisting = ( IStructuredSelection ) existing ; IStructuredSelection ssCandidate = ( IStructuredSelection ) candidate ; return overrides ( ssExisting . getFirstElement ( ) , ssCandidate . getFirstElement ( ) ) ; } } return true ; } protected boolean overrides ( Object existing , Object candidate ) { if ( existing = = null ) { return true ; } if ( existing . equals ( candidate ) ) { return true ; } if ( existing instanceof IStackFrame & & candidate instanceof IStackFrame ) { IStackFrame curr = ( IStackFrame ) existing ; IStackFrame next = ( IStackFrame ) candidate ; return curr . getThread ( ) . equals ( next . getThread ( ) ) | | ! isSticky ( existing ) ; } return ! isSticky ( existing ) ; } @Override public boolean isSticky ( ISelection selection , IPresentationContext context ) { if ( IDebugUIConstants . ID_DEBUG_VIEW . equals ( context . getId ( ) ) ) { if ( selection instanceof IStructuredSelection ) { return isSticky ( ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ) ; } } return false ; } protected boolean isSticky ( Object element ) { if ( element instanceof IStackFrame ) { IStackFrame frame = ( IStackFrame ) element ; return frame . isSuspended ( ) | | frame . isStepping ( ) ; } return false ; } @Override public ISelection replaceInvalidSelection ( ISelection selection , ISelection newSelection ) { if ( selection instanceof ITreeSelection ) { TreePath [ ] paths = ( ( ITreeSelection ) selection ) . getPaths ( ) ; if ( paths . length > <int> & & paths [ <int> ] . getSegmentCount ( ) > <int> ) { return new TreeSelection ( paths [ <int> ] . getParentPath ( ) ) ; } } return newSelection ; } } 

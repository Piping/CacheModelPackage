package org . elasticsearch . index . analysis ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . test . ESTokenStreamTestCase ; import org . elasticsearch . test . IndexSettingsModule ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; public class CharFilterTests extends ESTokenStreamTestCase { public void testMappingCharFilter ( ) throws Exception { Index index = new Index ( <str> ) ; Settings settings = settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( index , settings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings ) ; NamedAnalyzer analyzer1 = analysisService . analyzer ( <str> ) ; assertTokenStreamContents ( analyzer1 . tokenStream ( <str> , <str> ) , new String [ ] { <str> , <str> , <str> } ) ; assertTokenStreamContents ( analyzer1 . tokenStream ( <str> , <str> ) , new String [ ] { <str> , <str> , <str> } ) ; } public void testHtmlStripCharFilter ( ) throws Exception { Index index = new Index ( <str> ) ; Settings settings = settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( index , settings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings ) ; NamedAnalyzer analyzer1 = analysisService . analyzer ( <str> ) ; assertTokenStreamContents ( analyzer1 . tokenStream ( <str> , <str> ) , new String [ ] { <str> } ) ; assertTokenStreamContents ( analyzer1 . tokenStream ( <str> , <str> ) , new String [ ] { <str> } ) ; } } 

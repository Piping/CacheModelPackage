package org . nd4j . bytebuddy . arrays ; import net . bytebuddy . ByteBuddy ; import net . bytebuddy . dynamic . loading . ClassLoadingStrategy ; import net . bytebuddy . implementation . bytecode . StackManipulation ; import net . bytebuddy . matcher . ElementMatchers ; import org . junit . Test ; import org . nd4j . bytebuddy . arrays . create . CreateArrayByteCodeAppender ; import org . nd4j . bytebuddy . arrays . create . IntArrayCreation ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class IntArrayCreationTest { @Test public void testStackManipulationForLength ( ) { assertTrue ( IntArrayCreation . intCreationOfLength ( <int> ) . isValid ( ) ) ; } @Test public void testArrayCreationByteCode ( ) { CreateArrayByteCodeAppender append = new CreateArrayByteCodeAppender ( <int> ) ; StackManipulation manipulation = append . stackManipulationForLength ( ) ; assertTrue ( manipulation . isValid ( ) ) ; } @Test public void testCreateArrayOfLength2 ( ) throws Exception { Class < ? > dynamicType = new ByteBuddy ( ) . subclass ( CreateArray . class ) . method ( ElementMatchers . isDeclaredBy ( CreateArray . class ) ) . intercept ( new IntArrayCreation ( <int> ) ) . make ( ) . load ( CreateArray . class . getClassLoader ( ) , ClassLoadingStrategy . Default . WRAPPER ) . getLoaded ( ) ; CreateArray addition = ( CreateArray ) dynamicType . newInstance ( ) ; int [ ] arr2 = addition . create ( ) ; assertEquals ( <int> , arr2 . length ) ; } public interface CreateArray { int [ ] create ( ) ; } }
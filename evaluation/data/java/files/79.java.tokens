package com . netflix . hystrix ; import static com . netflix . hystrix . strategy . properties . HystrixPropertiesChainedProperty . forInteger ; import com . netflix . hystrix . strategy . properties . HystrixPropertiesStrategy ; import com . netflix . hystrix . strategy . properties . HystrixProperty ; public abstract class HystrixTimerThreadPoolProperties { private final HystrixProperty < Integer > corePoolSize ; protected HystrixTimerThreadPoolProperties ( ) { this ( new Setter ( ) . withCoreSize ( Runtime . getRuntime ( ) . availableProcessors ( ) ) ) ; } protected HystrixTimerThreadPoolProperties ( Setter setter ) { this . corePoolSize = getProperty ( <str> , <str> , setter . getCoreSize ( ) ) ; } private static HystrixProperty < Integer > getProperty ( String propertyPrefix , String instanceProperty , Integer defaultValue ) { return forInteger ( ) . add ( propertyPrefix + <str> + instanceProperty , defaultValue ) . build ( ) ; } public HystrixProperty < Integer > getCorePoolSize ( ) { return corePoolSize ; } public static Setter Setter ( ) { return new Setter ( ) ; } public static class Setter { private Integer coreSize = null ; private Setter ( ) { } public Integer getCoreSize ( ) { return coreSize ; } public Setter withCoreSize ( int value ) { this . coreSize = value ; return this ; } } }
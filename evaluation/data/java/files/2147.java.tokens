package junit . tests . framework ; import junit . framework . AssertionFailedError ; import junit . framework . ComparisonFailure ; import junit . framework . TestCase ; public class AssertTest extends TestCase { public void testFail ( ) { try { fail ( ) ; } catch ( AssertionFailedError e ) { return ; } throw new AssertionFailedError ( ) ; } public void testAssertionFailedErrorToStringWithNoMessage ( ) { try { fail ( ) ; } catch ( AssertionFailedError e ) { assertEquals ( <str> , e . toString ( ) ) ; return ; } throw new AssertionFailedError ( ) ; } public void testAssertionFailedErrorToStringWithMessage ( ) { try { fail ( <str> ) ; } catch ( AssertionFailedError e ) { assertEquals ( <str> , e . toString ( ) ) ; return ; } throw new AssertionFailedError ( ) ; } public void testAssertEquals ( ) { Object o = new Object ( ) ; assertEquals ( o , o ) ; try { assertEquals ( new Object ( ) , new Object ( ) ) ; } catch ( AssertionFailedError e ) { return ; } fail ( ) ; } public void testAssertEqualsNull ( ) { assertEquals ( ( Object ) null , ( Object ) null ) ; } public void testAssertStringEquals ( ) { assertEquals ( <str> , <str> ) ; } public void testAssertNullNotEqualsString ( ) { try { assertEquals ( null , <str> ) ; fail ( ) ; } catch ( ComparisonFailure e ) { } } public void testAssertStringNotEqualsNull ( ) { try { assertEquals ( <str> , null ) ; fail ( ) ; } catch ( ComparisonFailure e ) { e . getMessage ( ) ; } } public void testAssertNullNotEqualsNull ( ) { try { assertEquals ( null , new Object ( ) ) ; } catch ( AssertionFailedError e ) { e . getMessage ( ) ; return ; } fail ( ) ; } public void testAssertNull ( ) { assertNull ( null ) ; try { assertNull ( new Object ( ) ) ; } catch ( AssertionFailedError e ) { return ; } fail ( ) ; } public void testAssertNotNull ( ) { assertNotNull ( new Object ( ) ) ; try { assertNotNull ( null ) ; } catch ( AssertionFailedError e ) { return ; } fail ( ) ; } public void testAssertTrue ( ) { assertTrue ( true ) ; try { assertTrue ( false ) ; } catch ( AssertionFailedError e ) { return ; } fail ( ) ; } public void testAssertFalse ( ) { assertFalse ( false ) ; try { assertFalse ( true ) ; } catch ( AssertionFailedError e ) { return ; } fail ( ) ; } public void testAssertSame ( ) { Object o = new Object ( ) ; assertSame ( o , o ) ; try { assertSame ( new Integer ( <int> ) , new Integer ( <int> ) ) ; } catch ( AssertionFailedError e ) { return ; } fail ( ) ; } public void testAssertNotSame ( ) { assertNotSame ( new Integer ( <int> ) , null ) ; assertNotSame ( null , new Integer ( <int> ) ) ; assertNotSame ( new Integer ( <int> ) , new Integer ( <int> ) ) ; try { Integer obj = new Integer ( <int> ) ; assertNotSame ( obj , obj ) ; } catch ( AssertionFailedError e ) { return ; } fail ( ) ; } public void testAssertNotSameFailsNull ( ) { try { assertNotSame ( null , null ) ; } catch ( AssertionFailedError e ) { return ; } fail ( ) ; } }
package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . ListFeature . SUPPORTS_ADD_WITH_INDEX ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import java . lang . reflect . Method ; import java . util . ConcurrentModificationException ; import java . util . Iterator ; @SuppressWarnings ( <str> ) @GwtCompatible ( emulated = true ) public class ListAddAtIndexTester < E > extends AbstractListTester < E > { @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testAddAtIndex_supportedPresent ( ) { getList ( ) . add ( <int> , e0 ( ) ) ; expectAdded ( <int> , e0 ( ) ) ; } @ListFeature.Require ( absent = SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testAddAtIndex_unsupportedPresent ( ) { try { getList ( ) . add ( <int> , e0 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testAddAtIndex_supportedNotPresent ( ) { getList ( ) . add ( <int> , e3 ( ) ) ; expectAdded ( <int> , e3 ( ) ) ; } @CollectionFeature.Require ( FAILS_FAST_ON_CONCURRENT_MODIFICATION ) @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testAddAtIndexConcurrentWithIteration ( ) { try { Iterator < E > iterator = collection . iterator ( ) ; getList ( ) . add ( <int> , e3 ( ) ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @ListFeature.Require ( absent = SUPPORTS_ADD_WITH_INDEX ) public void testAddAtIndex_unsupportedNotPresent ( ) { try { getList ( ) . add ( <int> , e3 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testAddAtIndex_middle ( ) { getList ( ) . add ( getNumElements ( ) / <int> , e3 ( ) ) ; expectAdded ( getNumElements ( ) / <int> , e3 ( ) ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testAddAtIndex_end ( ) { getList ( ) . add ( getNumElements ( ) , e3 ( ) ) ; expectAdded ( getNumElements ( ) , e3 ( ) ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) public void testAddAtIndex_nullSupported ( ) { getList ( ) . add ( <int> , null ) ; expectAdded ( <int> , ( E ) null ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionFeature.Require ( absent = ALLOWS_NULL_VALUES ) public void testAddAtIndex_nullUnsupported ( ) { try { getList ( ) . add ( <int> , null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } expectUnchanged ( ) ; expectNullMissingWhenNullUnsupported ( <str> ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testAddAtIndex_negative ( ) { try { getList ( ) . add ( - <int> , e3 ( ) ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testAddAtIndex_tooLarge ( ) { try { getList ( ) . add ( getNumElements ( ) + <int> , e3 ( ) ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } @GwtIncompatible ( <str> ) public static Method getAddNullSupportedMethod ( ) { return Helpers . getMethod ( ListAddAtIndexTester . class , <str> ) ; } }
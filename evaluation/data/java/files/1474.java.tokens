package jcuda . driver ; public class CUDA_TEXTURE_DESC { public int addressMode [ ] = new int [ <int> ] ; public int filterMode ; public int flags ; public int maxAnisotropy ; public int mipmapFilterMode ; public float mipmapLevelBias ; public float minMipmapLevelClamp ; public float maxMipmapLevelClamp ; public CUDA_TEXTURE_DESC ( ) { } @Override public String toString ( ) { return <str> + createString ( <str> ) + <str> ; } public String toFormattedString ( ) { return <str> + createString ( <str> ) ; } private String createString ( String f ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> + <str> + CUaddress_mode . stringFor ( addressMode [ <int> ] ) + <str> + CUaddress_mode . stringFor ( addressMode [ <int> ] ) + <str> + CUaddress_mode . stringFor ( addressMode [ <int> ] ) + <str> + f ) ; sb . append ( <str> + CUfilter_mode . stringFor ( filterMode ) + f ) ; String flagsString = <str> ; if ( ( flags & JCudaDriver . CU_TRSF_READ_AS_INTEGER ) ! = <int> ) { flagsString + = <str> ; } if ( ( flags & JCudaDriver . CU_TRSF_NORMALIZED_COORDINATES ) ! = <int> ) { flagsString + = <str> ; } sb . append ( <str> + flags + <str> + flagsString + <str> ) ; sb . append ( <str> + maxAnisotropy ) ; sb . append ( <str> + CUfilter_mode . stringFor ( mipmapFilterMode ) + f ) ; sb . append ( <str> + mipmapLevelBias + f ) ; sb . append ( <str> + minMipmapLevelClamp + f ) ; sb . append ( <str> + maxMipmapLevelClamp + f ) ; return sb . toString ( ) ; } } 

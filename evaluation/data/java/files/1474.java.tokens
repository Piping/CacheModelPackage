package com . google . common . collect ; import static com . google . common . collect . BoundType . CLOSED ; import static com . google . common . truth . Truth . assertThat ; import static java . util . Collections . sort ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers . NullsBeforeB ; import com . google . common . collect . testing . NavigableSetTestSuiteBuilder ; import com . google . common . collect . testing . TestStringSetGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . MultisetFeature ; import com . google . common . collect . testing . google . SortedMultisetTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringMultisetGenerator ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import java . util . Set ; import java . util . SortedSet ; @GwtCompatible ( emulated = true ) public class TreeMultisetTest extends TestCase { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( SortedMultisetTestSuiteBuilder . using ( new TestStringMultisetGenerator ( ) { @Override protected Multiset < String > create ( String [ ] elements ) { return TreeMultiset . create ( Arrays . asList ( elements ) ) ; } @Override public List < String > order ( List < String > insertionOrder ) { return Ordering . natural ( ) . sortedCopy ( insertionOrder ) ; } } ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . GENERAL_PURPOSE , CollectionFeature . SERIALIZABLE , CollectionFeature . ALLOWS_NULL_QUERIES , MultisetFeature . ENTRIES_ARE_VIEWS ) . named ( <str> ) . createTestSuite ( ) ) ; suite . addTest ( SortedMultisetTestSuiteBuilder . using ( new TestStringMultisetGenerator ( ) { @Override protected Multiset < String > create ( String [ ] elements ) { Multiset < String > result = TreeMultiset . create ( NullsBeforeB . INSTANCE ) ; Collections . addAll ( result , elements ) ; return result ; } @Override public List < String > order ( List < String > insertionOrder ) { sort ( insertionOrder , NullsBeforeB . INSTANCE ) ; return insertionOrder ; } } ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . GENERAL_PURPOSE , CollectionFeature . SERIALIZABLE , CollectionFeature . ALLOWS_NULL_VALUES , MultisetFeature . ENTRIES_ARE_VIEWS ) . named ( <str> ) . createTestSuite ( ) ) ; suite . addTest ( NavigableSetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return TreeMultiset . create ( Arrays . asList ( elements ) ) . elementSet ( ) ; } @Override public List < String > order ( List < String > insertionOrder ) { return Lists . newArrayList ( Sets . newTreeSet ( insertionOrder ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . REMOVE_OPERATIONS , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTestSuite ( TreeMultisetTest . class ) ; return suite ; } public void testCreate ( ) { TreeMultiset < String > multiset = TreeMultiset . create ( ) ; multiset . add ( <str> , <int> ) ; multiset . add ( <str> ) ; assertEquals ( <int> , multiset . size ( ) ) ; assertEquals ( <int> , multiset . count ( <str> ) ) ; assertEquals ( Ordering . natural ( ) , multiset . comparator ( ) ) ; assertEquals ( <str> , multiset . toString ( ) ) ; } public void testCreateWithComparator ( ) { Multiset < String > multiset = TreeMultiset . create ( Collections . reverseOrder ( ) ) ; multiset . add ( <str> , <int> ) ; multiset . add ( <str> ) ; assertEquals ( <int> , multiset . size ( ) ) ; assertEquals ( <int> , multiset . count ( <str> ) ) ; assertEquals ( <str> , multiset . toString ( ) ) ; } public void testCreateFromIterable ( ) { Multiset < String > multiset = TreeMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertEquals ( <int> , multiset . size ( ) ) ; assertEquals ( <int> , multiset . count ( <str> ) ) ; assertEquals ( <str> , multiset . toString ( ) ) ; } public void testToString ( ) { Multiset < String > ms = TreeMultiset . create ( ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; assertEquals ( <str> , ms . toString ( ) ) ; } public void testElementSetSortedSetMethods ( ) { TreeMultiset < String > ms = TreeMultiset . create ( ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; SortedSet < String > elementSet = ms . elementSet ( ) ; assertEquals ( <str> , elementSet . first ( ) ) ; assertEquals ( <str> , elementSet . last ( ) ) ; assertEquals ( Ordering . natural ( ) , elementSet . comparator ( ) ) ; assertThat ( elementSet . headSet ( <str> ) ) . containsExactly ( <str> ) ; assertThat ( elementSet . tailSet ( <str> ) ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; assertThat ( elementSet . subSet ( <str> , <str> ) ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; } public void testElementSetSubsetRemove ( ) { TreeMultiset < String > ms = TreeMultiset . create ( ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; SortedSet < String > elementSet = ms . elementSet ( ) ; assertThat ( elementSet ) . containsExactly ( <str> , <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; SortedSet < String > subset = elementSet . subSet ( <str> , <str> ) ; assertThat ( subset ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertTrue ( subset . remove ( <str> ) ) ; assertThat ( elementSet ) . containsExactly ( <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( subset ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; assertEquals ( <int> , ms . size ( ) ) ; assertFalse ( subset . remove ( <str> ) ) ; assertThat ( elementSet ) . containsExactly ( <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( subset ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; assertEquals ( <int> , ms . size ( ) ) ; } public void testElementSetSubsetRemoveAll ( ) { TreeMultiset < String > ms = TreeMultiset . create ( ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; SortedSet < String > elementSet = ms . elementSet ( ) ; assertThat ( elementSet ) . containsExactly ( <str> , <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; SortedSet < String > subset = elementSet . subSet ( <str> , <str> ) ; assertThat ( subset ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertTrue ( subset . removeAll ( Arrays . asList ( <str> , <str> ) ) ) ; assertThat ( elementSet ) . containsExactly ( <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( subset ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; assertEquals ( <int> , ms . size ( ) ) ; } public void testElementSetSubsetRetainAll ( ) { TreeMultiset < String > ms = TreeMultiset . create ( ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; SortedSet < String > elementSet = ms . elementSet ( ) ; assertThat ( elementSet ) . containsExactly ( <str> , <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; SortedSet < String > subset = elementSet . subSet ( <str> , <str> ) ; assertThat ( subset ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertTrue ( subset . retainAll ( Arrays . asList ( <str> , <str> ) ) ) ; assertThat ( elementSet ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( subset ) . containsExactly ( <str> ) ; assertEquals ( <int> , ms . size ( ) ) ; } public void testElementSetSubsetClear ( ) { TreeMultiset < String > ms = TreeMultiset . create ( ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; SortedSet < String > elementSet = ms . elementSet ( ) ; assertThat ( elementSet ) . containsExactly ( <str> , <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; SortedSet < String > subset = elementSet . subSet ( <str> , <str> ) ; assertThat ( subset ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; subset . clear ( ) ; assertThat ( elementSet ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; assertThat ( subset ) . isEmpty ( ) ; assertEquals ( <int> , ms . size ( ) ) ; } public void testCustomComparator ( ) throws Exception { Comparator < String > comparator = new Comparator < String > ( ) { @Override public int compare ( String o1 , String o2 ) { return o2 . compareTo ( o1 ) ; } } ; TreeMultiset < String > ms = TreeMultiset . create ( comparator ) ; ms . add ( <str> ) ; ms . add ( <str> ) ; ms . add ( <str> ) ; ms . add ( <str> ) ; ms . add ( <str> ) ; assertThat ( ms ) . containsExactly ( <str> , <str> , <str> , <str> , <str> ) . inOrder ( ) ; SortedSet < String > elementSet = ms . elementSet ( ) ; assertEquals ( <str> , elementSet . first ( ) ) ; assertEquals ( <str> , elementSet . last ( ) ) ; assertEquals ( comparator , elementSet . comparator ( ) ) ; } public void testNullAcceptingComparator ( ) throws Exception { Comparator < String > comparator = Ordering . < String > natural ( ) . nullsFirst ( ) ; TreeMultiset < String > ms = TreeMultiset . create ( comparator ) ; ms . add ( <str> ) ; ms . add ( null ) ; ms . add ( <str> ) ; ms . add ( <str> ) ; ms . add ( null , <int> ) ; assertThat ( ms ) . containsExactly ( null , null , null , <str> , <str> , <str> ) . inOrder ( ) ; assertEquals ( <int> , ms . count ( null ) ) ; SortedSet < String > elementSet = ms . elementSet ( ) ; assertEquals ( null , elementSet . first ( ) ) ; assertEquals ( <str> , elementSet . last ( ) ) ; assertEquals ( comparator , elementSet . comparator ( ) ) ; } private static final Comparator < String > DEGENERATE_COMPARATOR = new Comparator < String > ( ) { @Override public int compare ( String o1 , String o2 ) { return o1 . length ( ) - o2 . length ( ) ; } } ; public void testDegenerateComparator ( ) throws Exception { TreeMultiset < String > ms = TreeMultiset . create ( DEGENERATE_COMPARATOR ) ; ms . add ( <str> ) ; ms . add ( <str> ) ; ms . add ( <str> ) ; ms . add ( <str> ) ; ms . add ( <str> ) ; assertEquals ( <int> , ms . count ( <str> ) ) ; assertEquals ( <int> , ms . count ( <str> ) ) ; Multiset < String > ms2 = TreeMultiset . create ( DEGENERATE_COMPARATOR ) ; ms2 . add ( <str> , <int> ) ; ms2 . add ( <str> , <int> ) ; assertEquals ( ms , ms2 ) ; assertEquals ( ms2 , ms ) ; SortedSet < String > elementSet = ms . elementSet ( ) ; assertEquals ( <str> , elementSet . first ( ) ) ; assertEquals ( <str> , elementSet . last ( ) ) ; assertEquals ( DEGENERATE_COMPARATOR , elementSet . comparator ( ) ) ; } public void testSubMultisetSize ( ) { TreeMultiset < String > ms = TreeMultiset . create ( ) ; ms . add ( <str> , Integer . MAX_VALUE ) ; ms . add ( <str> , Integer . MAX_VALUE ) ; ms . add ( <str> , <int> ) ; assertEquals ( Integer . MAX_VALUE , ms . count ( <str> ) ) ; assertEquals ( Integer . MAX_VALUE , ms . count ( <str> ) ) ; assertEquals ( <int> , ms . count ( <str> ) ) ; assertEquals ( Integer . MAX_VALUE , ms . headMultiset ( <str> , CLOSED ) . size ( ) ) ; assertEquals ( Integer . MAX_VALUE , ms . headMultiset ( <str> , CLOSED ) . size ( ) ) ; assertEquals ( Integer . MAX_VALUE , ms . headMultiset ( <str> , CLOSED ) . size ( ) ) ; assertEquals ( <int> , ms . tailMultiset ( <str> , CLOSED ) . size ( ) ) ; assertEquals ( Integer . MAX_VALUE , ms . tailMultiset ( <str> , CLOSED ) . size ( ) ) ; assertEquals ( Integer . MAX_VALUE , ms . tailMultiset ( <str> , CLOSED ) . size ( ) ) ; } @GwtIncompatible ( <str> ) @AndroidIncompatible public void testElementSetBridgeMethods ( ) { for ( Method m : TreeMultiset . class . getMethods ( ) ) { if ( m . getName ( ) . equals ( <str> ) & & m . getReturnType ( ) . equals ( SortedSet . class ) ) { return ; } } fail ( <str> ) ; } }
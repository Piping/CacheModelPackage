package org . gradle . model ; import org . gradle . api . Action ; import org . gradle . api . Incubating ; import org . gradle . api . Nullable ; import org . gradle . model . collection . CollectionBuilder ; import java . util . Collection ; import java . util . Set ; @SuppressWarnings ( <str> ) @Incubating public interface ModelMap < T > extends CollectionBuilder < T > , Iterable < T > { @Override < S > ModelMap < S > withType ( Class < S > type ) ; @Override int size ( ) ; @Override boolean isEmpty ( ) ; @Nullable @Override T get ( Object name ) ; @Nullable @Override T get ( String name ) ; @Override boolean containsKey ( Object name ) ; @Override boolean containsValue ( Object item ) ; @Override Set < String > keySet ( ) ; @Override void create ( String name ) ; @Override void create ( String name , Action < ? super T > configAction ) ; @Override < S extends T > void create ( String name , Class < S > type ) ; @Override < S extends T > void create ( String name , Class < S > type , Action < ? super S > configAction ) ; void put ( String name , T instance ) ; @Override void named ( String name , Action < ? super T > configAction ) ; @Override void named ( String name , Class < ? extends RuleSource > ruleSource ) ; @Override void beforeEach ( Action < ? super T > configAction ) ; @Override < S > void beforeEach ( Class < S > type , Action < ? super S > configAction ) ; @Override void all ( Action < ? super T > configAction ) ; @Override < S > void withType ( Class < S > type , Action < ? super S > configAction ) ; @Override < S > void withType ( Class < S > type , Class < ? extends RuleSource > rules ) ; @Override void afterEach ( Action < ? super T > configAction ) ; @Override < S > void afterEach ( Class < S > type , Action < ? super S > configAction ) ; @Override Collection < T > values ( ) ; } 

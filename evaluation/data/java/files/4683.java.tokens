package io . netty . channel ; import io . netty . util . concurrent . SingleThreadEventExecutor ; import java . util . concurrent . Executor ; import java . util . concurrent . ThreadFactory ; public abstract class SingleThreadEventLoop extends SingleThreadEventExecutor implements EventLoop { private final ChannelHandlerInvoker invoker = new DefaultChannelHandlerInvoker ( this ) ; protected SingleThreadEventLoop ( EventLoopGroup parent , ThreadFactory threadFactory , boolean addTaskWakesUp ) { super ( parent , threadFactory , addTaskWakesUp ) ; } protected SingleThreadEventLoop ( EventLoopGroup parent , Executor executor , boolean addTaskWakesUp ) { super ( parent , executor , addTaskWakesUp ) ; } @Override public EventLoopGroup parent ( ) { return ( EventLoopGroup ) super . parent ( ) ; } @Override public EventLoop next ( ) { return ( EventLoop ) super . next ( ) ; } @Override public ChannelHandlerInvoker asInvoker ( ) { return invoker ; } @Override public ChannelFuture register ( Channel channel ) { return register ( channel , new DefaultChannelPromise ( channel , this ) ) ; } @Override public ChannelFuture register ( final Channel channel , final ChannelPromise promise ) { if ( channel = = null ) { throw new NullPointerException ( <str> ) ; } if ( promise = = null ) { throw new NullPointerException ( <str> ) ; } channel . unsafe ( ) . register ( this , promise ) ; return promise ; } @Override protected boolean wakesUpForTask ( Runnable task ) { return ! ( task instanceof NonWakeupRunnable ) ; } interface NonWakeupRunnable extends Runnable { } }
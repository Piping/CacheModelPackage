package com . google . common . base ; import static com . google . common . base . Preconditions . checkNotNull ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @CheckReturnValue public final class Defaults { private Defaults ( ) { } private static final Map < Class < ? > , Object > DEFAULTS ; static { Map < Class < ? > , Object > map = new HashMap < Class < ? > , Object > ( ) ; put ( map , boolean . class , false ) ; put ( map , char . class , <str> ) ; put ( map , byte . class , ( byte ) <int> ) ; put ( map , short . class , ( short ) <int> ) ; put ( map , int . class , <int> ) ; put ( map , long . class , <int> ) ; put ( map , float . class , <int> f ) ; put ( map , double . class , <int> d ) ; DEFAULTS = Collections . unmodifiableMap ( map ) ; } private static < T > void put ( Map < Class < ? > , Object > map , Class < T > type , T value ) { map . put ( type , value ) ; } @Nullable public static < T > T defaultValue ( Class < T > type ) { @SuppressWarnings ( <str> ) T t = ( T ) DEFAULTS . get ( checkNotNull ( type ) ) ; return t ; } }
package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableSet . Builder ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . SetTestSuiteBuilder ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . SetGenerators . DegeneratedImmutableSetGenerator ; import com . google . common . collect . testing . google . SetGenerators . ImmutableSetAsListGenerator ; import com . google . common . collect . testing . google . SetGenerators . ImmutableSetCopyOfGenerator ; import com . google . common . collect . testing . google . SetGenerators . ImmutableSetWithBadHashesGenerator ; import com . google . common . testing . EqualsTester ; import junit . framework . Test ; import junit . framework . TestSuite ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . Set ; @GwtCompatible ( emulated = true ) public class ImmutableSetTest extends AbstractImmutableSetTest { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( SetTestSuiteBuilder . using ( new ImmutableSetCopyOfGenerator ( ) ) . named ( ImmutableSetTest . class . getName ( ) ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . SERIALIZABLE , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new ImmutableSetWithBadHashesGenerator ( ) ) . named ( ImmutableSetTest . class . getName ( ) + <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new DegeneratedImmutableSetGenerator ( ) ) . named ( ImmutableSetTest . class . getName ( ) + <str> ) . withFeatures ( CollectionSize . ONE , CollectionFeature . KNOWN_ORDER , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new ImmutableSetAsListGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . REJECTS_DUPLICATES_AT_CREATION , CollectionFeature . SERIALIZABLE , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTestSuite ( ImmutableSetTest . class ) ; return suite ; } @Override protected Set < String > of ( ) { return ImmutableSet . of ( ) ; } @Override protected Set < String > of ( String e ) { return ImmutableSet . of ( e ) ; } @Override protected Set < String > of ( String e1 , String e2 ) { return ImmutableSet . of ( e1 , e2 ) ; } @Override protected Set < String > of ( String e1 , String e2 , String e3 ) { return ImmutableSet . of ( e1 , e2 , e3 ) ; } @Override protected Set < String > of ( String e1 , String e2 , String e3 , String e4 ) { return ImmutableSet . of ( e1 , e2 , e3 , e4 ) ; } @Override protected Set < String > of ( String e1 , String e2 , String e3 , String e4 , String e5 ) { return ImmutableSet . of ( e1 , e2 , e3 , e4 , e5 ) ; } @Override protected Set < String > of ( String e1 , String e2 , String e3 , String e4 , String e5 , String e6 , String . . . rest ) { return ImmutableSet . of ( e1 , e2 , e3 , e4 , e5 , e6 , rest ) ; } @Override protected Set < String > copyOf ( String [ ] elements ) { return ImmutableSet . copyOf ( elements ) ; } @Override protected Set < String > copyOf ( Collection < String > elements ) { return ImmutableSet . copyOf ( elements ) ; } @Override protected Set < String > copyOf ( Iterable < String > elements ) { return ImmutableSet . copyOf ( elements ) ; } @Override protected Set < String > copyOf ( Iterator < String > elements ) { return ImmutableSet . copyOf ( elements ) ; } public void testCreation_allDuplicates ( ) { ImmutableSet < String > set = ImmutableSet . copyOf ( Lists . newArrayList ( <str> , <str> ) ) ; assertTrue ( set instanceof SingletonImmutableSet ) ; assertEquals ( Lists . newArrayList ( <str> ) , Lists . newArrayList ( set ) ) ; } public void testCreation_oneDuplicate ( ) { ImmutableSet < String > set = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , Lists . newArrayList ( set ) ) ; } public void testCreation_manyDuplicates ( ) { ImmutableSet < String > set = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertThat ( set ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } public void testCreation_arrayOfArray ( ) { String [ ] array = new String [ ] { <str> } ; Set < String [ ] > set = ImmutableSet . < String [ ] > of ( array ) ; assertEquals ( Collections . singleton ( array ) , set ) ; } @GwtIncompatible ( <str> ) public void testChooseTableSize ( ) { assertEquals ( <int> , ImmutableSet . chooseTableSize ( <int> ) ) ; assertEquals ( <int> , ImmutableSet . chooseTableSize ( <int> ) ) ; assertEquals ( <int> < < <int> , ImmutableSet . chooseTableSize ( <int> < < <int> ) ) ; assertEquals ( <int> < < <int> , ImmutableSet . chooseTableSize ( <int> < < <int> - <int> ) ) ; assertEquals ( <int> < < <int> , ImmutableSet . chooseTableSize ( <int> < < <int> ) ) ; assertEquals ( <int> < < <int> , ImmutableSet . chooseTableSize ( <int> < < <int> - <int> ) ) ; try { ImmutableSet . chooseTableSize ( <int> < < <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } @GwtIncompatible ( <str> ) public void testResizeTable ( ) { verifyTableSize ( <int> , <int> , <int> ) ; verifyTableSize ( <int> , <int> , <int> ) ; verifyTableSize ( <int> , <int> , <int> ) ; verifyTableSize ( <int> , <int> , <int> ) ; verifyTableSize ( <int> , <int> , <int> ) ; verifyTableSize ( <int> , <int> , <int> ) ; } @GwtIncompatible ( <str> ) private void verifyTableSize ( int inputSize , int setSize , int tableSize ) { Builder < Integer > builder = ImmutableSet . builder ( ) ; for ( int i = <int> ; i < inputSize ; i + + ) { builder . add ( i % setSize ) ; } ImmutableSet < Integer > set = builder . build ( ) ; assertTrue ( set instanceof RegularImmutableSet ) ; assertEquals ( <str> + inputSize + <str> + setSize , tableSize , ( ( RegularImmutableSet < Integer > ) set ) . table . length ) ; } public void testCopyOf_copiesImmutableSortedSet ( ) { ImmutableSortedSet < String > sortedSet = ImmutableSortedSet . of ( <str> ) ; ImmutableSet < String > copy = ImmutableSet . copyOf ( sortedSet ) ; assertNotSame ( sortedSet , copy ) ; } @GwtIncompatible ( <str> ) public void testCopyOf_threadSafe ( ) { verifyThreadSafe ( ) ; } @Override < E extends Comparable < E > > Builder < E > builder ( ) { return ImmutableSet . builder ( ) ; } @Override int getComplexBuilderSetLastElement ( ) { return LAST_COLOR_ADDED ; } public void testEquals ( ) { new EqualsTester ( ) . addEqualityGroup ( ImmutableSet . of ( ) , ImmutableSet . of ( ) ) . addEqualityGroup ( ImmutableSet . of ( <int> ) , ImmutableSet . of ( <int> ) , ImmutableSet . of ( <int> , <int> ) ) . addEqualityGroup ( ImmutableSet . of ( <int> , <int> , <int> ) , ImmutableSet . of ( <int> , <int> , <int> ) ) . testEquals ( ) ; } } 

package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import java . util . Comparator ; import javax . annotation . Nullable ; @GwtCompatible ( emulated = true ) @SuppressWarnings ( <str> ) final class ImmutableSortedAsList < E > extends RegularImmutableAsList < E > implements SortedIterable < E > { ImmutableSortedAsList ( ImmutableSortedSet < E > backingSet , ImmutableList < E > backingList ) { super ( backingSet , backingList ) ; } @Override ImmutableSortedSet < E > delegateCollection ( ) { return ( ImmutableSortedSet < E > ) super . delegateCollection ( ) ; } @Override public Comparator < ? super E > comparator ( ) { return delegateCollection ( ) . comparator ( ) ; } @GwtIncompatible ( <str> ) @Override public int indexOf ( @Nullable Object target ) { int index = delegateCollection ( ) . indexOf ( target ) ; return ( index > = <int> & & get ( index ) . equals ( target ) ) ? index : - <int> ; } @GwtIncompatible ( <str> ) @Override public int lastIndexOf ( @Nullable Object target ) { return indexOf ( target ) ; } @Override public boolean contains ( Object target ) { return indexOf ( target ) > = <int> ; } @GwtIncompatible ( <str> ) @Override ImmutableList < E > subListUnchecked ( int fromIndex , int toIndex ) { ImmutableList < E > parentSubList = super . subListUnchecked ( fromIndex , toIndex ) ; return new RegularImmutableSortedSet < E > ( parentSubList , comparator ( ) ) . asList ( ) ; } }
package io . netty . handler . codec . http ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static io . netty . util . internal . StringUtil . COMMA ; import static io . netty . util . internal . StringUtil . DOUBLE_QUOTE ; public final class HttpHeadersTestUtils { enum HeaderValue { UNKNOWN ( <str> , <int> ) , ONE ( <str> , <int> ) , TWO ( <str> , <int> ) , THREE ( <str> , <int> ) , FOUR ( <str> , <int> ) , FIVE ( <str> , <int> ) , SIX_QUOTED ( <str> , <int> ) , SEVEN_QUOTED ( <str> , <int> ) , EIGHT ( <str> , <int> ) ; private final int nr ; private final String value ; private List < CharSequence > array ; HeaderValue ( final String value , final int nr ) { this . nr = nr ; this . value = value ; } @Override public String toString ( ) { return value ; } public List < CharSequence > asList ( ) { if ( array = = null ) { List < CharSequence > list = new ArrayList < CharSequence > ( nr ) ; for ( int i = <int> ; i < = nr ; i + + ) { list . add ( of ( i ) . toString ( ) ) ; } array = list ; } return array ; } public List < CharSequence > subset ( int from ) { assert from > <int> ; - - from ; final int size = nr - from ; final int end = from + size ; List < CharSequence > list = new ArrayList < CharSequence > ( size ) ; List < CharSequence > fullList = asList ( ) ; for ( int i = from ; i < end ; + + i ) { list . add ( fullList . get ( i ) ) ; } return list ; } public String subsetAsCsvString ( final int from ) { final List < CharSequence > subset = subset ( from ) ; return asCsv ( subset ) ; } public String asCsv ( final List < CharSequence > arr ) { if ( arr = = null | | arr . isEmpty ( ) ) { return <str> ; } final StringBuilder sb = new StringBuilder ( arr . size ( ) * <int> ) ; final int end = arr . size ( ) - <int> ; for ( int i = <int> ; i < end ; + + i ) { quoted ( sb , arr . get ( i ) ) . append ( COMMA ) ; } quoted ( sb , arr . get ( end ) ) ; return sb . toString ( ) ; } public CharSequence asCsv ( ) { return asCsv ( asList ( ) ) ; } private static StringBuilder quoted ( final StringBuilder sb , final CharSequence value ) { if ( contains ( value , COMMA ) & & ! contains ( value , DOUBLE_QUOTE ) ) { return sb . append ( DOUBLE_QUOTE ) . append ( value ) . append ( DOUBLE_QUOTE ) ; } return sb . append ( value ) ; } private static boolean contains ( CharSequence value , char c ) { for ( int i = <int> ; i < value . length ( ) ; + + i ) { if ( value . charAt ( i ) = = c ) { return true ; } } return false ; } private static final Map < Integer , HeaderValue > MAP ; static { final Map < Integer , HeaderValue > map = new HashMap < Integer , HeaderValue > ( ) ; for ( HeaderValue v : values ( ) ) { final int nr = v . nr ; map . put ( Integer . valueOf ( nr ) , v ) ; } MAP = map ; } public static HeaderValue of ( final int nr ) { final HeaderValue v = MAP . get ( Integer . valueOf ( nr ) ) ; return v = = null ? UNKNOWN : v ; } } public static CharSequence of ( String s ) { return s ; } private HttpHeadersTestUtils ( ) { } } 

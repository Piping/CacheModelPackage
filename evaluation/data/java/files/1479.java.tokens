package org . gradle . api . internal . artifacts . ivyservice . resolveengine . artifact ; import com . google . common . collect . Maps ; import org . gradle . api . artifacts . ResolvedArtifact ; import org . gradle . api . artifacts . component . ComponentArtifactIdentifier ; import org . gradle . api . internal . artifacts . ResolvedConfigurationIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . DefaultModuleResolutionFilter ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . DependencyGraphEdge ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . DependencyGraphNode ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . DependencyGraphVisitor ; import org . gradle . internal . component . model . ComponentArtifactMetaData ; import org . gradle . internal . component . model . ComponentResolveMetaData ; import org . gradle . internal . component . model . ConfigurationMetaData ; import org . gradle . internal . component . model . DefaultComponentUsage ; import org . gradle . internal . id . IdGenerator ; import org . gradle . internal . id . LongIdGenerator ; import org . gradle . internal . resolve . resolver . ArtifactResolver ; import org . gradle . internal . resolve . result . BuildableArtifactSetResolveResult ; import org . gradle . internal . resolve . result . DefaultBuildableArtifactSetResolveResult ; import java . util . Map ; import java . util . Set ; public class ResolvedArtifactsGraphVisitor implements DependencyGraphVisitor { private final IdGenerator < Long > idGenerator = new LongIdGenerator ( ) ; private final Map < ResolvedConfigurationIdentifier , ArtifactSet > artifactSetsByConfiguration = Maps . newHashMap ( ) ; private final Map < ComponentArtifactIdentifier , ResolvedArtifact > allResolvedArtifacts = Maps . newHashMap ( ) ; private final ArtifactResolver artifactResolver ; private final DependencyArtifactsVisitor artifactResults ; public ResolvedArtifactsGraphVisitor ( DependencyArtifactsVisitor artifactsBuilder , ArtifactResolver artifactResolver ) { this . artifactResults = artifactsBuilder ; this . artifactResolver = artifactResolver ; } @Override public void start ( DependencyGraphNode root ) { } @Override public void visitNode ( DependencyGraphNode resolvedConfiguration ) { } public void visitEdge ( DependencyGraphNode resolvedConfiguration ) { for ( DependencyGraphEdge dependency : resolvedConfiguration . getIncomingEdges ( ) ) { ResolvedConfigurationIdentifier parent = dependency . getFrom ( ) . getNodeId ( ) ; ResolvedConfigurationIdentifier child = resolvedConfiguration . getNodeId ( ) ; ArtifactSet artifacts = getArtifacts ( dependency , resolvedConfiguration ) ; artifactResults . visitArtifacts ( parent , child , artifacts ) ; } } public void finish ( DependencyGraphNode root ) { artifactResults . finishArtifacts ( ) ; allResolvedArtifacts . clear ( ) ; artifactSetsByConfiguration . clear ( ) ; } private ArtifactSet getArtifacts ( DependencyGraphEdge dependency , DependencyGraphNode childConfiguration ) { long id = idGenerator . generateId ( ) ; ResolvedConfigurationIdentifier configurationIdentifier = childConfiguration . getNodeId ( ) ; ConfigurationMetaData metaData = childConfiguration . getMetaData ( ) ; ComponentResolveMetaData component = metaData . getComponent ( ) ; Set < ComponentArtifactMetaData > artifacts = dependency . getArtifacts ( metaData ) ; if ( ! artifacts . isEmpty ( ) ) { return new DefaultArtifactSet ( component . getId ( ) , component . getSource ( ) , DefaultModuleResolutionFilter . all ( ) , artifacts , artifactResolver , allResolvedArtifacts , id ) ; } ArtifactSet configurationArtifactSet = artifactSetsByConfiguration . get ( configurationIdentifier ) ; if ( configurationArtifactSet = = null ) { artifacts = doResolve ( component , configurationIdentifier ) ; configurationArtifactSet = new DefaultArtifactSet ( component . getId ( ) , component . getSource ( ) , dependency . getSelector ( ) , artifacts , artifactResolver , allResolvedArtifacts , id ) ; if ( dependency . getSelector ( ) . acceptsAllArtifacts ( ) ) { artifactSetsByConfiguration . put ( configurationIdentifier , configurationArtifactSet ) ; } } return configurationArtifactSet ; } private Set < ComponentArtifactMetaData > doResolve ( ComponentResolveMetaData component , ResolvedConfigurationIdentifier configurationId ) { BuildableArtifactSetResolveResult result = new DefaultBuildableArtifactSetResolveResult ( ) ; artifactResolver . resolveModuleArtifacts ( component , new DefaultComponentUsage ( configurationId . getConfiguration ( ) ) , result ) ; return result . getArtifacts ( ) ; } } 

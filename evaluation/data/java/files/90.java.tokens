package org . eclipse . debug . internal . ui . viewers ; import java . util . ArrayList ; import java . util . List ; public class AsynchronousTableModel extends AsynchronousModel { public AsynchronousTableModel ( AsynchronousViewer viewer ) { super ( viewer ) ; } @Override protected void add ( ModelNode parent , Object element ) { } public void add ( Object [ ] elements ) { TableAddRequestMonitor update = new TableAddRequestMonitor ( getRootNode ( ) , elements , this ) ; requestScheduled ( update ) ; update . done ( ) ; } protected void added ( Object [ ] elements ) { List < Object > kids = null ; boolean changed = false ; synchronized ( this ) { ModelNode [ ] childrenNodes = getRootNode ( ) . getChildrenNodes ( ) ; if ( childrenNodes = = null ) { kids = new ArrayList < Object > ( elements . length ) ; } else { kids = new ArrayList < Object > ( elements . length + childrenNodes . length ) ; for ( int i = <int> ; i < childrenNodes . length ; i + + ) { kids . add ( childrenNodes [ i ] . getElement ( ) ) ; } } for ( int i = <int> ; i < elements . length ; i + + ) { if ( ! kids . contains ( elements [ i ] ) ) { kids . add ( elements [ i ] ) ; changed = true ; } } } if ( changed ) { setChildren ( getRootNode ( ) , kids ) ; } } public void insert ( Object [ ] elements , int index ) { TableAddRequestMonitor update = new TableInsertRequestMonitor ( getRootNode ( ) , elements , index , this ) ; requestScheduled ( update ) ; update . done ( ) ; } protected void inserted ( Object [ ] elements , int index ) { List < Object > kids = null ; boolean changed = false ; synchronized ( this ) { ModelNode [ ] childrenNodes = getRootNode ( ) . getChildrenNodes ( ) ; if ( childrenNodes = = null ) { kids = new ArrayList < Object > ( elements . length ) ; } else { kids = new ArrayList < Object > ( elements . length + childrenNodes . length ) ; for ( int i = <int> ; i < childrenNodes . length ; i + + ) { kids . add ( childrenNodes [ i ] . getElement ( ) ) ; } } for ( int i = <int> ; i < elements . length ; i + + ) { if ( ! kids . contains ( elements [ i ] ) ) { kids . add ( index , elements [ i ] ) ; index + + ; changed = true ; } } } if ( changed ) { setChildren ( getRootNode ( ) , kids ) ; } } public void remove ( Object [ ] elements ) { TableRemoveRequestMonitor update = new TableRemoveRequestMonitor ( getRootNode ( ) , elements , this ) ; requestScheduled ( update ) ; update . done ( ) ; } protected void removed ( Object [ ] elements ) { List < Object > kids = null ; boolean changed = false ; synchronized ( this ) { ModelNode [ ] childrenNodes = getRootNode ( ) . getChildrenNodes ( ) ; if ( childrenNodes ! = null ) { kids = new ArrayList < Object > ( childrenNodes . length ) ; for ( int i = <int> ; i < childrenNodes . length ; i + + ) { kids . add ( childrenNodes [ i ] . getElement ( ) ) ; } for ( int i = <int> ; i < elements . length ; i + + ) { if ( kids . remove ( elements [ i ] ) ) { changed = true ; } } } } if ( changed ) { setChildren ( getRootNode ( ) , kids ) ; } } public void replace ( Object element , Object replacement ) { TableReplaceRequestMonitor update = new TableReplaceRequestMonitor ( getRootNode ( ) , element , replacement , this ) ; requestScheduled ( update ) ; update . done ( ) ; } protected void replaced ( Object element , Object replacement ) { Object [ ] filtered = filter ( getRootNode ( ) . getElement ( ) , new Object [ ] { replacement } ) ; if ( filtered . length = = <int> ) { remove ( new Object [ ] { element } ) ; return ; } List < ModelNode > list = new ArrayList < ModelNode > ( ) ; synchronized ( this ) { ModelNode [ ] nodes = getNodes ( element ) ; for ( int i = <int> ; i < nodes . length ; i + + ) { ModelNode node = nodes [ i ] ; node . remap ( replacement ) ; list . add ( node ) ; } } if ( ! list . isEmpty ( ) ) { for ( ModelNode node : list ) { getViewer ( ) . nodeChanged ( node ) ; } } } } 

package com . badlogic . gdx . utils . compression . lzma ; public class Base { public static final int kNumRepDistances = <int> ; public static final int kNumStates = <int> ; public static final int StateInit ( ) { return <int> ; } public static final int StateUpdateChar ( int index ) { if ( index < <int> ) return <int> ; if ( index < <int> ) return index - <int> ; return index - <int> ; } public static final int StateUpdateMatch ( int index ) { return ( index < <int> ? <int> : <int> ) ; } public static final int StateUpdateRep ( int index ) { return ( index < <int> ? <int> : <int> ) ; } public static final int StateUpdateShortRep ( int index ) { return ( index < <int> ? <int> : <int> ) ; } public static final boolean StateIsCharState ( int index ) { return index < <int> ; } public static final int kNumPosSlotBits = <int> ; public static final int kDicLogSizeMin = <int> ; public static final int kNumLenToPosStatesBits = <int> ; public static final int kNumLenToPosStates = <int> < < kNumLenToPosStatesBits ; public static final int kMatchMinLen = <int> ; public static final int GetLenToPosState ( int len ) { len - = kMatchMinLen ; if ( len < kNumLenToPosStates ) return len ; return ( int ) ( kNumLenToPosStates - <int> ) ; } public static final int kNumAlignBits = <int> ; public static final int kAlignTableSize = <int> < < kNumAlignBits ; public static final int kAlignMask = ( kAlignTableSize - <int> ) ; public static final int kStartPosModelIndex = <int> ; public static final int kEndPosModelIndex = <int> ; public static final int kNumPosModels = kEndPosModelIndex - kStartPosModelIndex ; public static final int kNumFullDistances = <int> < < ( kEndPosModelIndex / <int> ) ; public static final int kNumLitPosStatesBitsEncodingMax = <int> ; public static final int kNumLitContextBitsMax = <int> ; public static final int kNumPosStatesBitsMax = <int> ; public static final int kNumPosStatesMax = ( <int> < < kNumPosStatesBitsMax ) ; public static final int kNumPosStatesBitsEncodingMax = <int> ; public static final int kNumPosStatesEncodingMax = ( <int> < < kNumPosStatesBitsEncodingMax ) ; public static final int kNumLowLenBits = <int> ; public static final int kNumMidLenBits = <int> ; public static final int kNumHighLenBits = <int> ; public static final int kNumLowLenSymbols = <int> < < kNumLowLenBits ; public static final int kNumMidLenSymbols = <int> < < kNumMidLenBits ; public static final int kNumLenSymbols = kNumLowLenSymbols + kNumMidLenSymbols + ( <int> < < kNumHighLenBits ) ; public static final int kMatchMaxLen = kMatchMinLen + kNumLenSymbols - <int> ; }
package io . netty . example . uptime ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . ChannelHandler . Sharable ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . EventLoop ; import io . netty . channel . SimpleChannelInboundHandler ; import io . netty . handler . timeout . IdleState ; import io . netty . handler . timeout . IdleStateEvent ; import java . util . concurrent . TimeUnit ; @Sharable public class UptimeClientHandler extends SimpleChannelInboundHandler < Object > { long startTime = - <int> ; @Override public void channelActive ( ChannelHandlerContext ctx ) { if ( startTime < <int> ) { startTime = System . currentTimeMillis ( ) ; } println ( <str> + ctx . channel ( ) . remoteAddress ( ) ) ; } @Override public void channelRead0 ( ChannelHandlerContext ctx , Object msg ) throws Exception { } @Override public void userEventTriggered ( ChannelHandlerContext ctx , Object evt ) { if ( ! ( evt instanceof IdleStateEvent ) ) { return ; } IdleStateEvent e = ( IdleStateEvent ) evt ; if ( e . state ( ) = = IdleState . READER_IDLE ) { println ( <str> ) ; ctx . close ( ) ; } } @Override public void channelInactive ( final ChannelHandlerContext ctx ) { println ( <str> + ctx . channel ( ) . remoteAddress ( ) ) ; } @Override public void channelUnregistered ( final ChannelHandlerContext ctx ) throws Exception { println ( <str> + UptimeClient . RECONNECT_DELAY + <str> ) ; final EventLoop loop = ctx . channel ( ) . eventLoop ( ) ; loop . schedule ( new Runnable ( ) { @Override public void run ( ) { println ( <str> + UptimeClient . HOST + <str> + UptimeClient . PORT ) ; UptimeClient . connect ( UptimeClient . configureBootstrap ( new Bootstrap ( ) , loop ) ) ; } } , UptimeClient . RECONNECT_DELAY , TimeUnit . SECONDS ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { cause . printStackTrace ( ) ; ctx . close ( ) ; } void println ( String msg ) { if ( startTime < <int> ) { System . err . format ( <str> , msg ) ; } else { System . err . format ( <str> , ( System . currentTimeMillis ( ) - startTime ) / <int> , msg ) ; } } }
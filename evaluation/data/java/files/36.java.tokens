package org . elasticsearch . indices . memory ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . util . concurrent . EsExecutors ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . node . internal . InternalSettingsPreparer ; import org . elasticsearch . test . ESIntegTestCase ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . TEST , numDataNodes = <int> ) public class IndexingMemoryControllerIT extends ESIntegTestCase { private long getIWBufferSize ( String indexName ) { return client ( ) . admin ( ) . indices ( ) . prepareStats ( indexName ) . get ( ) . getTotal ( ) . getSegments ( ) . getIndexWriterMaxMemoryInBytes ( ) ; } public void testIndexBufferPushedToEngine ( ) throws InterruptedException { createNode ( Settings . builder ( ) . put ( IndexShard . INDEX_SHARD_INACTIVE_TIME_SETTING , <str> , IndexingMemoryController . INDEX_BUFFER_SIZE_SETTING , <str> , IndexShard . INDEX_REFRESH_INTERVAL , <str> ) . build ( ) ) ; prepareCreate ( <str> ) . setSettings ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> , IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . get ( ) ; prepareCreate ( <str> ) . setSettings ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> , IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . get ( ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <int> ) ; index ( <str> , <str> , <str> , <str> , <int> ) ; if ( awaitBusy ( ( ) - > getIWBufferSize ( <str> ) = = <int> * <int> * <int> ) = = false ) { fail ( <str> + getIWBufferSize ( <str> ) ) ; } if ( awaitBusy ( ( ) - > getIWBufferSize ( <str> ) = = <int> * <int> * <int> ) = = false ) { fail ( <str> + getIWBufferSize ( <str> ) ) ; } client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ; if ( awaitBusy ( ( ) - > getIWBufferSize ( <str> ) = = <int> * <int> * <int> ) = = false ) { fail ( <str> + getIWBufferSize ( <str> ) ) ; } } public void testInactivePushedToShard ( ) throws InterruptedException { createNode ( Settings . builder ( ) . put ( IndexShard . INDEX_SHARD_INACTIVE_TIME_SETTING , <str> , IndexingMemoryController . SHARD_INACTIVE_INTERVAL_TIME_SETTING , <str> , IndexShard . INDEX_REFRESH_INTERVAL , <str> ) . build ( ) ) ; prepareCreate ( <str> ) . setSettings ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> , IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . get ( ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <int> ) ; final ByteSizeValue inactiveBuffer = IndexingMemoryController . INACTIVE_SHARD_INDEXING_BUFFER ; if ( awaitBusy ( ( ) - > getIWBufferSize ( <str> ) = = inactiveBuffer . bytes ( ) ) = = false ) { fail ( <str> + inactiveBuffer + <str> + getIWBufferSize ( <str> ) ) ; } } private void createNode ( Settings settings ) { internalCluster ( ) . startNode ( Settings . builder ( ) . put ( ClusterName . SETTING , <str> ) . put ( <str> , <str> ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( EsExecutors . PROCESSORS , <int> ) . put ( <str> , false ) . put ( InternalSettingsPreparer . IGNORE_SYSTEM_PROPERTIES_SETTING , true ) . put ( IndexingMemoryController . SHARD_INACTIVE_INTERVAL_TIME_SETTING , <str> ) . put ( settings ) ) ; } } 

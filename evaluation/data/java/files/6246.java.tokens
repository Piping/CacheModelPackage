package org . apache . cassandra . triggers ; import java . util . * ; import org . junit . Test ; import org . apache . cassandra . Util ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . db . * ; import org . apache . cassandra . db . rows . * ; import org . apache . cassandra . db . marshal . UTF8Type ; import org . apache . cassandra . db . partitions . Partition ; import org . apache . cassandra . db . partitions . PartitionUpdate ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . schema . TriggerMetadata ; import org . apache . cassandra . utils . FBUtilities ; import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertTrue ; public class TriggerExecutorTest { @Test public void sameKeySameCfColumnFamilies ( ) throws ConfigurationException , InvalidRequestException { CFMetaData metadata = makeCfMetaData ( <str> , <str> , TriggerMetadata . create ( <str> , SameKeySameCfTrigger . class . getName ( ) ) ) ; PartitionUpdate mutated = TriggerExecutor . instance . execute ( makeCf ( metadata , <str> , <str> , null ) ) ; RowIterator rowIterator = UnfilteredRowIterators . filter ( mutated . unfilteredIterator ( ) , FBUtilities . nowInSeconds ( ) ) ; Iterator < Cell > cells = rowIterator . next ( ) . cells ( ) . iterator ( ) ; assertEquals ( bytes ( <str> ) , cells . next ( ) . value ( ) ) ; assertTrue ( ! rowIterator . hasNext ( ) ) ; } @Test ( expected = InvalidRequestException . class ) public void sameKeyDifferentCfColumnFamilies ( ) throws ConfigurationException , InvalidRequestException { CFMetaData metadata = makeCfMetaData ( <str> , <str> , TriggerMetadata . create ( <str> , SameKeyDifferentCfTrigger . class . getName ( ) ) ) ; TriggerExecutor . instance . execute ( makeCf ( metadata , <str> , <str> , null ) ) ; } @Test ( expected = InvalidRequestException . class ) public void differentKeyColumnFamilies ( ) throws ConfigurationException , InvalidRequestException { CFMetaData metadata = makeCfMetaData ( <str> , <str> , TriggerMetadata . create ( <str> , DifferentKeyTrigger . class . getName ( ) ) ) ; TriggerExecutor . instance . execute ( makeCf ( metadata , <str> , <str> , null ) ) ; } @Test public void noTriggerMutations ( ) throws ConfigurationException , InvalidRequestException { CFMetaData metadata = makeCfMetaData ( <str> , <str> , TriggerMetadata . create ( <str> , NoOpTrigger . class . getName ( ) ) ) ; Mutation rm = new Mutation ( makeCf ( metadata , <str> , <str> , null ) ) ; assertNull ( TriggerExecutor . instance . execute ( Collections . singletonList ( rm ) ) ) ; } @Test public void sameKeySameCfRowMutations ( ) throws ConfigurationException , InvalidRequestException { CFMetaData metadata = makeCfMetaData ( <str> , <str> , TriggerMetadata . create ( <str> , SameKeySameCfTrigger . class . getName ( ) ) ) ; PartitionUpdate cf1 = makeCf ( metadata , <str> , <str> , null ) ; PartitionUpdate cf2 = makeCf ( metadata , <str> , <str> , null ) ; Mutation rm1 = new Mutation ( <str> , cf1 . partitionKey ( ) ) . add ( cf1 ) ; Mutation rm2 = new Mutation ( <str> , cf2 . partitionKey ( ) ) . add ( cf2 ) ; List < ? extends IMutation > tmutations = new ArrayList < > ( TriggerExecutor . instance . execute ( Arrays . asList ( rm1 , rm2 ) ) ) ; assertEquals ( <int> , tmutations . size ( ) ) ; Collections . sort ( tmutations , new RmComparator ( ) ) ; List < PartitionUpdate > mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; Row row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; } @Test public void sameKeySameCfPartialRowMutations ( ) throws ConfigurationException , InvalidRequestException { CFMetaData metadata = makeCfMetaData ( <str> , <str> , TriggerMetadata . create ( <str> , SameKeySameCfPartialTrigger . class . getName ( ) ) ) ; PartitionUpdate cf1 = makeCf ( metadata , <str> , <str> , null ) ; PartitionUpdate cf2 = makeCf ( metadata , <str> , <str> , null ) ; Mutation rm1 = new Mutation ( <str> , cf1 . partitionKey ( ) ) . add ( cf1 ) ; Mutation rm2 = new Mutation ( <str> , cf2 . partitionKey ( ) ) . add ( cf2 ) ; List < ? extends IMutation > tmutations = new ArrayList < > ( TriggerExecutor . instance . execute ( Arrays . asList ( rm1 , rm2 ) ) ) ; assertEquals ( <int> , tmutations . size ( ) ) ; Collections . sort ( tmutations , new RmComparator ( ) ) ; List < PartitionUpdate > mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; Row row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; } @Test public void sameKeyDifferentCfRowMutations ( ) throws ConfigurationException , InvalidRequestException { CFMetaData metadata = makeCfMetaData ( <str> , <str> , TriggerMetadata . create ( <str> , SameKeyDifferentCfTrigger . class . getName ( ) ) ) ; PartitionUpdate cf1 = makeCf ( metadata , <str> , <str> , null ) ; PartitionUpdate cf2 = makeCf ( metadata , <str> , <str> , null ) ; Mutation rm1 = new Mutation ( <str> , cf1 . partitionKey ( ) ) . add ( cf1 ) ; Mutation rm2 = new Mutation ( <str> , cf2 . partitionKey ( ) ) . add ( cf2 ) ; List < ? extends IMutation > tmutations = new ArrayList < > ( TriggerExecutor . instance . execute ( Arrays . asList ( rm1 , rm2 ) ) ) ; assertEquals ( <int> , tmutations . size ( ) ) ; Collections . sort ( tmutations , new RmComparator ( ) ) ; List < PartitionUpdate > mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; for ( PartitionUpdate update : mutatedCFs ) { if ( update . metadata ( ) . cfName . equals ( <str> ) ) { Row row = update . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; } else { Row row = update . iterator ( ) . next ( ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; } } mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; for ( PartitionUpdate update : mutatedCFs ) { if ( update . metadata ( ) . cfName . equals ( <str> ) ) { Row row = update . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; } else { Row row = update . iterator ( ) . next ( ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; } } } @Test public void sameKeyDifferentKsRowMutations ( ) throws ConfigurationException , InvalidRequestException { CFMetaData metadata = makeCfMetaData ( <str> , <str> , TriggerMetadata . create ( <str> , SameKeyDifferentKsTrigger . class . getName ( ) ) ) ; PartitionUpdate cf1 = makeCf ( metadata , <str> , <str> , null ) ; PartitionUpdate cf2 = makeCf ( metadata , <str> , <str> , null ) ; Mutation rm1 = new Mutation ( <str> , cf1 . partitionKey ( ) ) . add ( cf1 ) ; Mutation rm2 = new Mutation ( <str> , cf2 . partitionKey ( ) ) . add ( cf2 ) ; List < ? extends IMutation > tmutations = new ArrayList < > ( TriggerExecutor . instance . execute ( Arrays . asList ( rm1 , rm2 ) ) ) ; assertEquals ( <int> , tmutations . size ( ) ) ; Collections . sort ( tmutations , new RmComparator ( ) ) ; List < PartitionUpdate > mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; Row row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; } @Test public void differentKeyRowMutations ( ) throws ConfigurationException , InvalidRequestException { CFMetaData metadata = makeCfMetaData ( <str> , <str> , TriggerMetadata . create ( <str> , DifferentKeyTrigger . class . getName ( ) ) ) ; PartitionUpdate cf1 = makeCf ( metadata , <str> , <str> , null ) ; Mutation rm = new Mutation ( <str> , cf1 . partitionKey ( ) ) . add ( cf1 ) ; List < ? extends IMutation > tmutations = new ArrayList < > ( TriggerExecutor . instance . execute ( Arrays . asList ( rm ) ) ) ; assertEquals ( <int> , tmutations . size ( ) ) ; Collections . sort ( tmutations , new RmComparator ( ) ) ; assertEquals ( bytes ( <str> ) , tmutations . get ( <int> ) . key ( ) . getKey ( ) ) ; assertEquals ( bytes ( <str> ) , tmutations . get ( <int> ) . key ( ) . getKey ( ) ) ; List < PartitionUpdate > mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; Row row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; mutatedCFs = new ArrayList < > ( tmutations . get ( <int> ) . getPartitionUpdates ( ) ) ; assertEquals ( <int> , mutatedCFs . size ( ) ) ; row = mutatedCFs . get ( <int> ) . iterator ( ) . next ( ) ; assertEquals ( bytes ( <str> ) , row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) . value ( ) ) ; assertNull ( row . getCell ( metadata . getColumnDefinition ( bytes ( <str> ) ) ) ) ; } private static CFMetaData makeCfMetaData ( String ks , String cf , TriggerMetadata trigger ) { CFMetaData metadata = CFMetaData . Builder . create ( ks , cf ) . addPartitionKey ( <str> , UTF8Type . instance ) . addRegularColumn ( <str> , UTF8Type . instance ) . addRegularColumn ( <str> , UTF8Type . instance ) . build ( ) ; try { if ( trigger ! = null ) metadata . triggers ( metadata . getTriggers ( ) . with ( trigger ) ) ; } catch ( InvalidRequestException e ) { throw new AssertionError ( e ) ; } return metadata ; } private static PartitionUpdate makeCf ( CFMetaData metadata , String key , String columnValue1 , String columnValue2 ) { Row . Builder builder = BTreeRow . unsortedBuilder ( FBUtilities . nowInSeconds ( ) ) ; builder . newRow ( Clustering . EMPTY ) ; long ts = FBUtilities . timestampMicros ( ) ; if ( columnValue1 ! = null ) builder . addCell ( BufferCell . live ( metadata , metadata . getColumnDefinition ( bytes ( <str> ) ) , ts , bytes ( columnValue1 ) ) ) ; if ( columnValue2 ! = null ) builder . addCell ( BufferCell . live ( metadata , metadata . getColumnDefinition ( bytes ( <str> ) ) , ts , bytes ( columnValue2 ) ) ) ; return PartitionUpdate . singleRowUpdate ( metadata , Util . dk ( key ) , builder . build ( ) ) ; } public static class NoOpTrigger implements ITrigger { public Collection < Mutation > augment ( Partition partition ) { return null ; } } public static class SameKeySameCfTrigger implements ITrigger { public Collection < Mutation > augment ( Partition partition ) { RowUpdateBuilder builder = new RowUpdateBuilder ( partition . metadata ( ) , FBUtilities . timestampMicros ( ) , partition . partitionKey ( ) . getKey ( ) ) ; builder . add ( <str> , bytes ( <str> ) ) ; return Collections . singletonList ( builder . build ( ) ) ; } } public static class SameKeySameCfPartialTrigger implements ITrigger { public Collection < Mutation > augment ( Partition partition ) { if ( ! partition . partitionKey ( ) . getKey ( ) . equals ( bytes ( <str> ) ) ) return null ; RowUpdateBuilder builder = new RowUpdateBuilder ( partition . metadata ( ) , FBUtilities . timestampMicros ( ) , partition . partitionKey ( ) . getKey ( ) ) ; builder . add ( <str> , bytes ( <str> ) ) ; return Collections . singletonList ( builder . build ( ) ) ; } } public static class SameKeyDifferentCfTrigger implements ITrigger { public Collection < Mutation > augment ( Partition partition ) { RowUpdateBuilder builder = new RowUpdateBuilder ( makeCfMetaData ( partition . metadata ( ) . ksName , <str> , null ) , FBUtilities . timestampMicros ( ) , partition . partitionKey ( ) . getKey ( ) ) ; builder . add ( <str> , bytes ( <str> ) ) ; return Collections . singletonList ( builder . build ( ) ) ; } } public static class SameKeyDifferentKsTrigger implements ITrigger { public Collection < Mutation > augment ( Partition partition ) { RowUpdateBuilder builder = new RowUpdateBuilder ( makeCfMetaData ( <str> , <str> , null ) , FBUtilities . timestampMicros ( ) , partition . partitionKey ( ) . getKey ( ) ) ; builder . add ( <str> , bytes ( <str> ) ) ; return Collections . singletonList ( builder . build ( ) ) ; } } public static class DifferentKeyTrigger implements ITrigger { public Collection < Mutation > augment ( Partition partition ) { RowUpdateBuilder builder = new RowUpdateBuilder ( makeCfMetaData ( <str> , <str> , null ) , FBUtilities . timestampMicros ( ) , <str> ) ; builder . add ( <str> , bytes ( <str> ) ) ; return Collections . singletonList ( builder . build ( ) ) ; } } private static class RmComparator implements Comparator < IMutation > { public int compare ( IMutation m1 , IMutation m2 ) { int cmp = m1 . getKeyspaceName ( ) . compareTo ( m2 . getKeyspaceName ( ) ) ; return cmp ! = <int> ? cmp : m1 . key ( ) . compareTo ( m2 . key ( ) ) ; } } private static class CfComparator implements Comparator < Partition > { public int compare ( Partition cf1 , Partition cf2 ) { return cf1 . metadata ( ) . cfName . compareTo ( cf2 . metadata ( ) . cfName ) ; } } }
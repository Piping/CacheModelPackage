package jcuda ; public class cuComplex { public float x ; public float y ; private cuComplex ( ) { } public static float cuCreal ( cuComplex x ) { return x . x ; } public static float cuCimag ( cuComplex x ) { return x . y ; } public static cuComplex cuCmplx ( float r , float i ) { cuComplex res = new cuComplex ( ) ; res . x = r ; res . y = i ; return res ; } public static cuComplex cuConj ( cuComplex x ) { return cuCmplx ( cuCreal ( x ) , - cuCimag ( x ) ) ; } public static cuComplex cuCadd ( cuComplex x , cuComplex y ) { return cuCmplx ( cuCreal ( x ) + cuCreal ( y ) , cuCimag ( x ) + cuCimag ( y ) ) ; } public static cuComplex cuCmul ( cuComplex x , cuComplex y ) { cuComplex prod ; prod = cuCmplx ( ( cuCreal ( x ) * cuCreal ( y ) ) - ( cuCimag ( x ) * cuCimag ( y ) ) , ( cuCreal ( x ) * cuCimag ( y ) ) + ( cuCimag ( x ) * cuCreal ( y ) ) ) ; return prod ; } public static cuComplex cuCdiv ( cuComplex x , cuComplex y ) { cuComplex quot ; float s = ( ( float ) Math . abs ( cuCreal ( y ) ) ) + ( ( float ) Math . abs ( cuCimag ( y ) ) ) ; float oos = <float> / s ; float ars = cuCreal ( x ) * oos ; float ais = cuCimag ( x ) * oos ; float brs = cuCreal ( y ) * oos ; float bis = cuCimag ( y ) * oos ; s = ( brs * brs ) + ( bis * bis ) ; oos = <float> / s ; quot = cuCmplx ( ( ( ars * brs ) + ( ais * bis ) ) * oos , ( ( ais * brs ) - ( ars * bis ) ) * oos ) ; return quot ; } public static float cuCabs ( cuComplex x ) { float p = cuCreal ( x ) ; float q = cuCimag ( x ) ; float r ; if ( p = = <int> ) return q ; if ( q = = <int> ) return p ; p = ( float ) Math . sqrt ( p ) ; q = ( float ) Math . sqrt ( q ) ; if ( p < q ) { r = p ; p = q ; q = r ; } r = q / p ; return p * ( float ) Math . sqrt ( <float> + r * r ) ; } public String toString ( ) { return <str> + x + <str> + y + <str> ; } }
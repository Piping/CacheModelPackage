package org . elasticsearch . action . admin . indices . settings . put ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . ack . ClusterStateUpdateResponse ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MetaDataUpdateSettingsService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import java . util . Arrays ; public class TransportUpdateSettingsAction extends TransportMasterNodeAction < UpdateSettingsRequest , UpdateSettingsResponse > { private final MetaDataUpdateSettingsService updateSettingsService ; @Inject public TransportUpdateSettingsAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , MetaDataUpdateSettingsService updateSettingsService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , UpdateSettingsAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , UpdateSettingsRequest : : new ) ; this . updateSettingsService = updateSettingsService ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected ClusterBlockException checkBlock ( UpdateSettingsRequest request , ClusterState state ) { ClusterBlockException globalBlock = state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . METADATA_WRITE ) ; if ( globalBlock ! = null ) { return globalBlock ; } if ( request . settings ( ) . getAsMap ( ) . size ( ) = = <int> & & ( request . settings ( ) . get ( IndexMetaData . SETTING_BLOCKS_METADATA ) ! = null | | request . settings ( ) . get ( IndexMetaData . SETTING_READ_ONLY ) ! = null ) ) { return null ; } return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_WRITE , indexNameExpressionResolver . concreteIndices ( state , request ) ) ; } @Override protected UpdateSettingsResponse newResponse ( ) { return new UpdateSettingsResponse ( ) ; } @Override protected void masterOperation ( final UpdateSettingsRequest request , final ClusterState state , final ActionListener < UpdateSettingsResponse > listener ) { final String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( state , request ) ; UpdateSettingsClusterStateUpdateRequest clusterStateUpdateRequest = new UpdateSettingsClusterStateUpdateRequest ( ) . indices ( concreteIndices ) . settings ( request . settings ( ) ) . ackTimeout ( request . timeout ( ) ) . masterNodeTimeout ( request . masterNodeTimeout ( ) ) ; updateSettingsService . updateSettings ( clusterStateUpdateRequest , new ActionListener < ClusterStateUpdateResponse > ( ) { @Override public void onResponse ( ClusterStateUpdateResponse response ) { listener . onResponse ( new UpdateSettingsResponse ( response . isAcknowledged ( ) ) ) ; } @Override public void onFailure ( Throwable t ) { logger . debug ( <str> , t , ( Object ) concreteIndices ) ; listener . onFailure ( t ) ; } } ) ; } } 

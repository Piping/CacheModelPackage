package org . gradle . tooling . internal . provider . connection ; import org . gradle . api . logging . LogLevel ; import org . gradle . cli . CommandLineParser ; import org . gradle . cli . ParsedCommandLine ; import org . gradle . logging . LoggingConfiguration ; import org . gradle . logging . internal . LoggingCommandLineConverter ; import java . util . Collections ; import java . util . List ; public class BuildLogLevelMixIn { private final ProviderOperationParameters parameters ; public BuildLogLevelMixIn ( ProviderOperationParameters parameters ) { this . parameters = parameters ; } public LogLevel getBuildLogLevel ( ) { LoggingCommandLineConverter converter = new LoggingCommandLineConverter ( ) ; CommandLineParser parser = new CommandLineParser ( ) . allowUnknownOptions ( ) . allowMixedSubcommandsAndOptions ( ) ; converter . configure ( parser ) ; List < String > arguments = parameters . getArguments ( ) ; ParsedCommandLine parsedCommandLine = parser . parse ( arguments = = null ? Collections . < String > emptyList ( ) : arguments ) ; if ( parameters . getVerboseLogging ( ) & & ! parsedCommandLine . hasAnyOption ( converter . getLogLevelOptions ( ) ) ) { return LogLevel . DEBUG ; } LoggingConfiguration loggingConfiguration = converter . convert ( parsedCommandLine , new LoggingConfiguration ( ) ) ; return loggingConfiguration . getLogLevel ( ) ; } } 

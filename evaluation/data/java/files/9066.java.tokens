package org . eclipse . debug . examples . ui . pda . editor ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IThread ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . examples . core . pda . model . PDADebugTarget ; import org . eclipse . debug . examples . core . pda . model . PDAStackFrame ; import org . eclipse . debug . examples . core . pda . model . PDAThread ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IRegion ; import org . eclipse . jface . text . ITextHover ; import org . eclipse . jface . text . ITextViewer ; public class TextHover implements ITextHover { @Override public String getHoverInfo ( ITextViewer textViewer , IRegion hoverRegion ) { String varName = null ; try { varName = textViewer . getDocument ( ) . get ( hoverRegion . getOffset ( ) , hoverRegion . getLength ( ) ) ; } catch ( BadLocationException e ) { return null ; } if ( varName . startsWith ( <str> ) & & varName . length ( ) > <int> ) { varName = varName . substring ( <int> ) ; } PDAStackFrame frame = null ; IAdaptable debugContext = DebugUITools . getDebugContext ( ) ; if ( debugContext instanceof PDAStackFrame ) { frame = ( PDAStackFrame ) debugContext ; } else if ( debugContext instanceof PDAThread ) { PDAThread thread = ( PDAThread ) debugContext ; try { frame = ( PDAStackFrame ) thread . getTopStackFrame ( ) ; } catch ( DebugException e ) { return null ; } } else if ( debugContext instanceof PDADebugTarget ) { PDADebugTarget target = ( PDADebugTarget ) debugContext ; try { IThread [ ] threads = target . getThreads ( ) ; if ( threads . length > <int> ) { frame = ( PDAStackFrame ) threads [ <int> ] . getTopStackFrame ( ) ; } } catch ( DebugException e ) { return null ; } } if ( frame ! = null ) { try { IVariable [ ] variables = frame . getVariables ( ) ; for ( int i = <int> ; i < variables . length ; i + + ) { IVariable variable = variables [ i ] ; if ( variable . getName ( ) . equals ( varName ) ) { return varName + <str> + variable . getValue ( ) . getValueString ( ) ; } } } catch ( DebugException e ) { } } return null ; } @Override public IRegion getHoverRegion ( ITextViewer textViewer , int offset ) { return WordFinder . findWord ( textViewer . getDocument ( ) , offset ) ; } }
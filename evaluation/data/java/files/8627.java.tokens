package org . eclipse . debug . internal . ui . model . elements ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . IExpressionManager ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IWatchExpression ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . DefaultLabelProvider ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementEditor ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementLabelProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ILabelUpdate ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerUpdate ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . resource . JFaceResources ; import org . eclipse . jface . viewers . CellEditor ; import org . eclipse . jface . viewers . ICellModifier ; import org . eclipse . jface . viewers . TextCellEditor ; import org . eclipse . swt . SWT ; import org . eclipse . swt . graphics . FontData ; import org . eclipse . swt . widgets . Composite ; public class ExpressionManagerContentProvider extends ElementContentProvider { private static class AddNewExpressionElement implements IElementLabelProvider , IElementEditor , ICellModifier { @Override public void update ( ILabelUpdate [ ] updates ) { for ( int i = <int> ; i < updates . length ; i + + ) { String [ ] columnIds = updates [ i ] . getColumnIds ( ) ; if ( columnIds = = null ) { updateLabel ( updates [ i ] , <int> ) ; } else { for ( int j = <int> ; j < columnIds . length ; j + + ) { if ( IDebugUIConstants . COLUMN_ID_VARIABLE_NAME . equals ( columnIds [ j ] ) ) { updateLabel ( updates [ i ] , j ) ; } else { updates [ i ] . setLabel ( IInternalDebugCoreConstants . EMPTY_STRING , j ) ; } } } updates [ i ] . done ( ) ; } } @SuppressWarnings ( <str> ) private void updateLabel ( ILabelUpdate update , int columnIndex ) { update . setLabel ( DebugUIMessages . ExpressionManagerContentProvider_1 , columnIndex ) ; update . setImageDescriptor ( DebugUITools . getImageDescriptor ( IInternalDebugUIConstants . IMG_LCL_MONITOR_EXPRESSION ) , columnIndex ) ; FontData fontData = JFaceResources . getFontDescriptor ( IDebugUIConstants . PREF_VARIABLE_TEXT_FONT ) . getFontData ( ) [ <int> ] ; fontData . setStyle ( SWT . ITALIC ) ; update . setFontData ( fontData , columnIndex ) ; } @Override public CellEditor getCellEditor ( IPresentationContext context , String columnId , Object element , Composite parent ) { return new TextCellEditor ( parent ) ; } @Override public ICellModifier getCellModifier ( IPresentationContext context , Object element ) { return this ; } @Override public boolean canModify ( Object element , String property ) { return ( IDebugUIConstants . COLUMN_ID_VARIABLE_NAME . equals ( property ) ) ; } @Override public Object getValue ( Object element , String property ) { return IInternalDebugCoreConstants . EMPTY_STRING ; } @Override public void modify ( Object element , String property , Object value ) { if ( value instanceof String & & ! IInternalDebugCoreConstants . EMPTY_STRING . equals ( ( ( String ) value ) . trim ( ) ) ) { String expressionText = DefaultLabelProvider . encodeEsacpedChars ( ( String ) value ) ; IWatchExpression newExpression = DebugPlugin . getDefault ( ) . getExpressionManager ( ) . newWatchExpression ( expressionText ) ; DebugPlugin . getDefault ( ) . getExpressionManager ( ) . addExpression ( newExpression ) ; newExpression . setExpressionContext ( getContext ( ) ) ; } } private IDebugElement getContext ( ) { IAdaptable object = DebugUITools . getDebugContext ( ) ; IDebugElement context = null ; if ( object instanceof IDebugElement ) { context = ( IDebugElement ) object ; } else if ( object instanceof ILaunch ) { context = ( ( ILaunch ) object ) . getDebugTarget ( ) ; } return context ; } } private static final AddNewExpressionElement ADD_NEW_EXPRESSION_ELEMENT = new AddNewExpressionElement ( ) ; @Override protected int getChildCount ( Object element , IPresentationContext context , IViewerUpdate monitor ) throws CoreException { return ( ( IExpressionManager ) element ) . getExpressions ( ) . length + ( context . getColumns ( ) ! = null ? <int> : <int> ) ; } @Override protected Object [ ] getChildren ( Object parent , int index , int length , IPresentationContext context , IViewerUpdate monitor ) throws CoreException { if ( context . getColumns ( ) ! = null ) { return getElements ( ( ( IExpressionManager ) parent ) . getExpressions ( ) , ADD_NEW_EXPRESSION_ELEMENT , index , length ) ; } else { return getElements ( ( ( IExpressionManager ) parent ) . getExpressions ( ) , index , length ) ; } } private Object [ ] getElements ( Object [ ] elements , Object lastElement , int index , int length ) { int max = elements . length + <int> ; if ( index < max & & ( ( index + length ) > max ) ) { length = max - index ; } if ( ( index + length ) < = max ) { Object [ ] sub = new Object [ length ] ; System . arraycopy ( elements , index , sub , <int> , Math . min ( elements . length - index , length ) ) ; if ( index + length > elements . length ) { sub [ length - <int> ] = lastElement ; } return sub ; } return null ; } @Override protected boolean supportsContextId ( String id ) { return id . equals ( IDebugUIConstants . ID_EXPRESSION_VIEW ) ; } @Override protected boolean hasChildren ( Object element , IPresentationContext context , IViewerUpdate monitor ) throws CoreException { return true ; } }
package org . eclipse . debug . internal . ui . viewers . update ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . ILaunchesListener2 ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ModelDelta ; import org . eclipse . debug . internal . ui . viewers . provisional . AbstractModelProxy ; import org . eclipse . jface . viewers . Viewer ; public class LaunchManagerProxy extends AbstractModelProxy implements ILaunchesListener2 { private ILaunchManager fLaunchManager ; @Override public synchronized void init ( IPresentationContext context ) { super . init ( context ) ; fLaunchManager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; fLaunchManager . addLaunchListener ( this ) ; } @Override public void installed ( Viewer viewer ) { ILaunch [ ] launches = fLaunchManager . getLaunches ( ) ; if ( launches . length > <int> ) { launchesAdded ( launches ) ; } } @Override public synchronized void dispose ( ) { super . dispose ( ) ; if ( fLaunchManager ! = null ) { fLaunchManager . removeLaunchListener ( this ) ; fLaunchManager = null ; } } @Override public void launchesTerminated ( ILaunch [ ] launches ) { } @Override public void launchesRemoved ( ILaunch [ ] launches ) { fireDelta ( launches , IModelDelta . REMOVED ) ; } @Override public void launchesAdded ( ILaunch [ ] launches ) { fireDelta ( launches , IModelDelta . ADDED | IModelDelta . INSTALL ) ; } @Override public void launchesChanged ( ILaunch [ ] launches ) { } protected void fireDelta ( ILaunch [ ] launches , int launchFlags ) { ModelDelta delta = new ModelDelta ( fLaunchManager , IModelDelta . NO_CHANGE ) ; for ( int i = <int> ; i < launches . length ; i + + ) { delta . addNode ( launches [ i ] , launchFlags ) ; } fireModelChanged ( delta ) ; } }
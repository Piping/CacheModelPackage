package io . netty . example . portunification ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelPipeline ; import io . netty . example . factorial . BigIntegerDecoder ; import io . netty . example . factorial . FactorialServerHandler ; import io . netty . example . factorial . NumberEncoder ; import io . netty . example . http . snoop . HttpSnoopServerHandler ; import io . netty . handler . codec . ByteToMessageDecoder ; import io . netty . handler . codec . compression . ZlibCodecFactory ; import io . netty . handler . codec . compression . ZlibWrapper ; import io . netty . handler . codec . http . HttpContentCompressor ; import io . netty . handler . codec . http . HttpRequestDecoder ; import io . netty . handler . codec . http . HttpResponseEncoder ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslHandler ; import java . util . List ; public class PortUnificationServerHandler extends ByteToMessageDecoder { private final SslContext sslCtx ; private final boolean detectSsl ; private final boolean detectGzip ; public PortUnificationServerHandler ( SslContext sslCtx ) { this ( sslCtx , true , true ) ; } private PortUnificationServerHandler ( SslContext sslCtx , boolean detectSsl , boolean detectGzip ) { this . sslCtx = sslCtx ; this . detectSsl = detectSsl ; this . detectGzip = detectGzip ; } @Override protected void decode ( ChannelHandlerContext ctx , ByteBuf in , List < Object > out ) throws Exception { if ( in . readableBytes ( ) < <int> ) { return ; } if ( isSsl ( in ) ) { enableSsl ( ctx ) ; } else { final int magic1 = in . getUnsignedByte ( in . readerIndex ( ) ) ; final int magic2 = in . getUnsignedByte ( in . readerIndex ( ) + <int> ) ; if ( isGzip ( magic1 , magic2 ) ) { enableGzip ( ctx ) ; } else if ( isHttp ( magic1 , magic2 ) ) { switchToHttp ( ctx ) ; } else if ( isFactorial ( magic1 ) ) { switchToFactorial ( ctx ) ; } else { in . clear ( ) ; ctx . close ( ) ; } } } private boolean isSsl ( ByteBuf buf ) { if ( detectSsl ) { return SslHandler . isEncrypted ( buf ) ; } return false ; } private boolean isGzip ( int magic1 , int magic2 ) { if ( detectGzip ) { return magic1 = = <int> & & magic2 = = <int> ; } return false ; } private static boolean isHttp ( int magic1 , int magic2 ) { return magic1 = = <str> & & magic2 = = <str> | | magic1 = = <str> & & magic2 = = <str> | | magic1 = = <str> & & magic2 = = <str> | | magic1 = = <str> & & magic2 = = <str> | | magic1 = = <str> & & magic2 = = <str> | | magic1 = = <str> & & magic2 = = <str> | | magic1 = = <str> & & magic2 = = <str> | | magic1 = = <str> & & magic2 = = <str> | | magic1 = = <str> & & magic2 = = <str> ; } private static boolean isFactorial ( int magic1 ) { return magic1 = = <str> ; } private void enableSsl ( ChannelHandlerContext ctx ) { ChannelPipeline p = ctx . pipeline ( ) ; p . addLast ( <str> , sslCtx . newHandler ( ctx . alloc ( ) ) ) ; p . addLast ( <str> , new PortUnificationServerHandler ( sslCtx , false , detectGzip ) ) ; p . remove ( this ) ; } private void enableGzip ( ChannelHandlerContext ctx ) { ChannelPipeline p = ctx . pipeline ( ) ; p . addLast ( <str> , ZlibCodecFactory . newZlibEncoder ( ZlibWrapper . GZIP ) ) ; p . addLast ( <str> , ZlibCodecFactory . newZlibDecoder ( ZlibWrapper . GZIP ) ) ; p . addLast ( <str> , new PortUnificationServerHandler ( sslCtx , detectSsl , false ) ) ; p . remove ( this ) ; } private void switchToHttp ( ChannelHandlerContext ctx ) { ChannelPipeline p = ctx . pipeline ( ) ; p . addLast ( <str> , new HttpRequestDecoder ( ) ) ; p . addLast ( <str> , new HttpResponseEncoder ( ) ) ; p . addLast ( <str> , new HttpContentCompressor ( ) ) ; p . addLast ( <str> , new HttpSnoopServerHandler ( ) ) ; p . remove ( this ) ; } private void switchToFactorial ( ChannelHandlerContext ctx ) { ChannelPipeline p = ctx . pipeline ( ) ; p . addLast ( <str> , new BigIntegerDecoder ( ) ) ; p . addLast ( <str> , new NumberEncoder ( ) ) ; p . addLast ( <str> , new FactorialServerHandler ( ) ) ; p . remove ( this ) ; } }
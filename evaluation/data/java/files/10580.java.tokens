package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class GIM_BVH_DATA extends BulletBase { private long swigCPtr ; protected GIM_BVH_DATA ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public GIM_BVH_DATA ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( GIM_BVH_DATA obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_GIM_BVH_DATA ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setBound ( btAABB value ) { CollisionJNI . GIM_BVH_DATA_bound_set ( swigCPtr , this , btAABB . getCPtr ( value ) , value ) ; } public btAABB getBound ( ) { long cPtr = CollisionJNI . GIM_BVH_DATA_bound_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btAABB ( cPtr , false ) ; } public void setData ( int value ) { CollisionJNI . GIM_BVH_DATA_data_set ( swigCPtr , this , value ) ; } public int getData ( ) { return CollisionJNI . GIM_BVH_DATA_data_get ( swigCPtr , this ) ; } public GIM_BVH_DATA ( ) { this ( CollisionJNI . new_GIM_BVH_DATA ( ) , true ) ; } }
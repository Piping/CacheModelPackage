package com . badlogic . gdx . tools . flame ; import java . awt . GridBagConstraints ; import java . awt . GridBagLayout ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import javax . swing . DefaultComboBoxModel ; import javax . swing . JCheckBox ; import javax . swing . JComboBox ; import javax . swing . JLabel ; import javax . swing . JPanel ; import javax . swing . SwingConstants ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . particles . influencers . SpawnInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . values . CylinderSpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . EllipseSpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . LineSpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . PointSpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . PrimitiveSpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . PrimitiveSpawnShapeValue . SpawnSide ; import com . badlogic . gdx . graphics . g3d . particles . values . RectangleSpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . SpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . UnweightedMeshSpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . WeightMeshSpawnShapeValue ; import com . badlogic . gdx . utils . Array ; class SpawnInfluencerPanel extends InfluencerPanel < SpawnInfluencer > implements TemplatePickerPanel . Listener < Model > { private static final String SPAWN_SHAPE_POINT = <str> , SPAWN_SHAPE_LINE = <str> , SPAWN_SHAPE_RECTANGLE = <str> , SPAWN_SHAPE_CYLINDER = <str> , SPAWN_SHAPE_ELLIPSE = <str> , SPAWN_SHAPE_MESH = <str> , SPAWN_SHAPE_WEIGHT_MESH = <str> ; private static String [ ] spawnShapes = new String [ ] { SPAWN_SHAPE_POINT , SPAWN_SHAPE_LINE , SPAWN_SHAPE_RECTANGLE , SPAWN_SHAPE_ELLIPSE , SPAWN_SHAPE_CYLINDER , SPAWN_SHAPE_MESH , SPAWN_SHAPE_WEIGHT_MESH } ; JComboBox shapeCombo ; JCheckBox edgesCheckbox ; JLabel edgesLabel ; JComboBox sideCombo ; JLabel sideLabel ; TemplatePickerPanel < Model > meshPanel ; ScaledNumericPanel widthPanel , heightPanel , depthPanel ; RangedNumericPanel xPanel , yPanel , zPanel ; PointSpawnShapeValue pointSpawnShapeValue ; LineSpawnShapeValue lineSpawnShapeValue ; RectangleSpawnShapeValue rectangleSpawnShapeValue ; EllipseSpawnShapeValue ellipseSpawnShapeValue ; CylinderSpawnShapeValue cylinderSpawnShapeValue ; UnweightedMeshSpawnShapeValue meshSpawnShapeValue ; WeightMeshSpawnShapeValue weightMeshSpawnShapeValue ; public SpawnInfluencerPanel ( final FlameMain editor , SpawnInfluencer influencer ) { super ( editor , influencer , <str> , <str> , true , false ) ; setValue ( influencer ) ; setCurrentSpawnData ( influencer . spawnShapeValue ) ; shapeCombo . setSelectedItem ( spawnShapeToString ( influencer . spawnShapeValue ) ) ; } private void setCurrentSpawnData ( SpawnShapeValue spawnShapeValue ) { SpawnShapeValue local = null ; if ( spawnShapeValue instanceof PointSpawnShapeValue ) local = pointSpawnShapeValue ; else if ( spawnShapeValue instanceof LineSpawnShapeValue ) local = lineSpawnShapeValue ; else if ( spawnShapeValue instanceof RectangleSpawnShapeValue ) local = rectangleSpawnShapeValue ; else if ( spawnShapeValue instanceof EllipseSpawnShapeValue ) local = ellipseSpawnShapeValue ; else if ( spawnShapeValue instanceof CylinderSpawnShapeValue ) local = cylinderSpawnShapeValue ; if ( spawnShapeValue instanceof UnweightedMeshSpawnShapeValue ) local = meshSpawnShapeValue ; else if ( spawnShapeValue instanceof WeightMeshSpawnShapeValue ) local = weightMeshSpawnShapeValue ; local . load ( spawnShapeValue ) ; } protected void setSpawnShapeValue ( SpawnShapeValue spawnShapeValue ) { xPanel . setValue ( spawnShapeValue . xOffsetValue ) ; yPanel . setValue ( spawnShapeValue . yOffsetValue ) ; zPanel . setValue ( spawnShapeValue . zOffsetValue ) ; } protected void setPrimitiveSpawnShape ( PrimitiveSpawnShapeValue shape , boolean showEdges , SpawnSide side ) { setSpawnShapeValue ( shape ) ; SpawnInfluencer influencer = ( SpawnInfluencer ) editor . getEmitter ( ) . findInfluencer ( SpawnInfluencer . class ) ; influencer . spawnShapeValue = shape ; widthPanel . setValue ( shape . getSpawnWidth ( ) ) ; heightPanel . setValue ( shape . getSpawnHeight ( ) ) ; depthPanel . setValue ( shape . getSpawnDepth ( ) ) ; setEdgesVisible ( showEdges ) ; if ( showEdges ) edgesCheckbox . setSelected ( shape . isEdges ( ) ) ; if ( side ! = null ) { setSidesVisible ( true ) ; sideCombo . setSelectedItem ( side ) ; } else { setSidesVisible ( false ) ; } widthPanel . setVisible ( true ) ; heightPanel . setVisible ( true ) ; depthPanel . setVisible ( true ) ; meshPanel . setVisible ( false ) ; } protected void setMeshSpawnShape ( SpawnShapeValue shape ) { setSpawnShapeValue ( shape ) ; value . spawnShapeValue = shape ; setEdgesVisible ( false ) ; setSidesVisible ( false ) ; widthPanel . setVisible ( false ) ; heightPanel . setVisible ( false ) ; depthPanel . setVisible ( false ) ; meshPanel . setVisible ( true ) ; } private Object spawnShapeToString ( SpawnShapeValue spawnShapeValue ) { if ( spawnShapeValue instanceof PrimitiveSpawnShapeValue ) { if ( spawnShapeValue instanceof PointSpawnShapeValue ) return SPAWN_SHAPE_POINT ; else if ( spawnShapeValue instanceof LineSpawnShapeValue ) return SPAWN_SHAPE_LINE ; else if ( spawnShapeValue instanceof RectangleSpawnShapeValue ) return SPAWN_SHAPE_RECTANGLE ; else if ( spawnShapeValue instanceof EllipseSpawnShapeValue ) return SPAWN_SHAPE_ELLIPSE ; else if ( spawnShapeValue instanceof CylinderSpawnShapeValue ) return SPAWN_SHAPE_CYLINDER ; } if ( spawnShapeValue instanceof WeightMeshSpawnShapeValue ) { return SPAWN_SHAPE_WEIGHT_MESH ; } if ( spawnShapeValue instanceof UnweightedMeshSpawnShapeValue ) { return SPAWN_SHAPE_MESH ; } return null ; } public void update ( FlameMain editor ) { SpawnInfluencer influencer = ( SpawnInfluencer ) editor . getEmitter ( ) . findInfluencer ( SpawnInfluencer . class ) ; shapeCombo . setSelectedItem ( spawnShapeToString ( influencer . spawnShapeValue ) ) ; } void setEdgesVisible ( boolean visible ) { edgesCheckbox . setVisible ( visible ) ; edgesLabel . setVisible ( visible ) ; } void setSidesVisible ( boolean visible ) { sideCombo . setVisible ( visible ) ; sideLabel . setVisible ( visible ) ; } protected void initializeComponents ( ) { super . initializeComponents ( ) ; pointSpawnShapeValue = new PointSpawnShapeValue ( ) ; lineSpawnShapeValue = new LineSpawnShapeValue ( ) ; rectangleSpawnShapeValue = new RectangleSpawnShapeValue ( ) ; ellipseSpawnShapeValue = new EllipseSpawnShapeValue ( ) ; cylinderSpawnShapeValue = new CylinderSpawnShapeValue ( ) ; meshSpawnShapeValue = new UnweightedMeshSpawnShapeValue ( ) ; weightMeshSpawnShapeValue = new WeightMeshSpawnShapeValue ( ) ; lineSpawnShapeValue . setDimensions ( <int> , <int> , <int> ) ; rectangleSpawnShapeValue . setDimensions ( <int> , <int> , <int> ) ; ellipseSpawnShapeValue . setDimensions ( <int> , <int> , <int> ) ; cylinderSpawnShapeValue . setDimensions ( <int> , <int> , <int> ) ; pointSpawnShapeValue . setActive ( true ) ; lineSpawnShapeValue . setActive ( true ) ; rectangleSpawnShapeValue . setActive ( true ) ; ellipseSpawnShapeValue . setActive ( true ) ; cylinderSpawnShapeValue . setActive ( true ) ; meshSpawnShapeValue . setActive ( true ) ; weightMeshSpawnShapeValue . setActive ( true ) ; Model defaultModel = editor . assetManager . get ( FlameMain . DEFAULT_MODEL_PARTICLE ) ; Array < Model > models = new Array < Model > ( ) ; models . add ( defaultModel ) ; int i = <int> ; JPanel panel = new JPanel ( new GridBagLayout ( ) ) ; EditorPanel . addContent ( panel , i , <int> , new JLabel ( <str> ) , false , GridBagConstraints . WEST , GridBagConstraints . NONE , <int> , <int> ) ; EditorPanel . addContent ( panel , i + + , <int> , shapeCombo = new JComboBox ( new DefaultComboBoxModel ( spawnShapes ) ) , false , GridBagConstraints . WEST , GridBagConstraints . NONE , <int> , <int> ) ; EditorPanel . addContent ( panel , i , <int> , edgesLabel = new JLabel ( <str> ) , false , GridBagConstraints . WEST , GridBagConstraints . NONE , <int> , <int> ) ; EditorPanel . addContent ( panel , i + + , <int> , edgesCheckbox = new JCheckBox ( ) , false , GridBagConstraints . WEST , GridBagConstraints . NONE , <int> , <int> ) ; EditorPanel . addContent ( panel , i , <int> , sideLabel = new JLabel ( <str> ) , false , GridBagConstraints . WEST , GridBagConstraints . NONE , <int> , <int> ) ; EditorPanel . addContent ( panel , i + + , <int> , sideCombo = new JComboBox ( new DefaultComboBoxModel ( SpawnSide . values ( ) ) ) , false , GridBagConstraints . WEST , GridBagConstraints . NONE , <int> , <int> ) ; edgesCheckbox . setHorizontalTextPosition ( SwingConstants . LEFT ) ; i = <int> ; addContent ( i + + , <int> , panel , GridBagConstraints . WEST , GridBagConstraints . HORIZONTAL ) ; addContent ( i + + , <int> , meshPanel = new TemplatePickerPanel < Model > ( editor , models , this , Model . class , new LoaderButton . ModelLoaderButton ( editor ) , true , false ) , false , GridBagConstraints . WEST , GridBagConstraints . NONE ) ; addContent ( i + + , <int> , xPanel = new RangedNumericPanel ( editor , pointSpawnShapeValue . xOffsetValue , <str> , <str> , false ) ) ; addContent ( i + + , <int> , yPanel = new RangedNumericPanel ( editor , pointSpawnShapeValue . yOffsetValue , <str> , <str> , false ) ) ; addContent ( i + + , <int> , zPanel = new RangedNumericPanel ( editor , pointSpawnShapeValue . zOffsetValue , <str> , <str> , false ) ) ; addContent ( i + + , <int> , widthPanel = new ScaledNumericPanel ( editor , pointSpawnShapeValue . getSpawnWidth ( ) , <str> , <str> , <str> , true ) ) ; addContent ( i + + , <int> , heightPanel = new ScaledNumericPanel ( editor , pointSpawnShapeValue . getSpawnWidth ( ) , <str> , <str> , <str> , true ) ) ; addContent ( i + + , <int> , depthPanel = new ScaledNumericPanel ( editor , pointSpawnShapeValue . getSpawnWidth ( ) , <str> , <str> , <str> , true ) , false ) ; meshPanel . setIsAlwayShown ( true ) ; onTemplateChecked ( defaultModel , true ) ; shapeCombo . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { String shape = ( String ) shapeCombo . getSelectedItem ( ) ; if ( shape = = SPAWN_SHAPE_POINT ) { setPrimitiveSpawnShape ( pointSpawnShapeValue , false , null ) ; } else if ( shape = = SPAWN_SHAPE_LINE ) { setPrimitiveSpawnShape ( lineSpawnShapeValue , false , null ) ; } else if ( shape = = SPAWN_SHAPE_RECTANGLE ) { setPrimitiveSpawnShape ( rectangleSpawnShapeValue , true , null ) ; } else if ( shape = = SPAWN_SHAPE_ELLIPSE ) { setPrimitiveSpawnShape ( ellipseSpawnShapeValue , true , ellipseSpawnShapeValue . getSide ( ) ) ; } else if ( shape = = SPAWN_SHAPE_CYLINDER ) { setPrimitiveSpawnShape ( cylinderSpawnShapeValue , true , null ) ; } else if ( shape = = SPAWN_SHAPE_MESH ) { setMeshSpawnShape ( meshSpawnShapeValue ) ; } else if ( shape = = SPAWN_SHAPE_WEIGHT_MESH ) { setMeshSpawnShape ( weightMeshSpawnShapeValue ) ; } editor . restart ( ) ; } } ) ; edgesCheckbox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { SpawnInfluencer influencer = ( SpawnInfluencer ) editor . getEmitter ( ) . findInfluencer ( SpawnInfluencer . class ) ; PrimitiveSpawnShapeValue shapeValue = ( PrimitiveSpawnShapeValue ) influencer . spawnShapeValue ; shapeValue . setEdges ( edgesCheckbox . isSelected ( ) ) ; setEdgesVisible ( true ) ; } } ) ; sideCombo . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { SpawnSide side = ( SpawnSide ) sideCombo . getSelectedItem ( ) ; SpawnInfluencer influencer = ( SpawnInfluencer ) editor . getEmitter ( ) . findInfluencer ( SpawnInfluencer . class ) ; EllipseSpawnShapeValue shapeValue = ( EllipseSpawnShapeValue ) influencer . spawnShapeValue ; shapeValue . setSide ( side ) ; } } ) ; } @Override public void onTemplateChecked ( Model model , boolean isChecked ) { SpawnShapeValue shapeValue = null ; Mesh mesh = model . meshes . get ( <int> ) ; weightMeshSpawnShapeValue . setMesh ( mesh , model ) ; meshSpawnShapeValue . setMesh ( mesh , model ) ; if ( shapeCombo . getSelectedItem ( ) = = SPAWN_SHAPE_WEIGHT_MESH ) { SpawnInfluencer influencer = ( SpawnInfluencer ) editor . getEmitter ( ) . findInfluencer ( SpawnInfluencer . class ) ; influencer . spawnShapeValue = weightMeshSpawnShapeValue ; } else if ( shapeCombo . getSelectedItem ( ) = = SPAWN_SHAPE_MESH ) { SpawnInfluencer influencer = ( SpawnInfluencer ) editor . getEmitter ( ) . findInfluencer ( SpawnInfluencer . class ) ; influencer . spawnShapeValue = meshSpawnShapeValue ; } editor . restart ( ) ; } }
package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . tests . utils . GdxTest ; public class PixmapTest extends GdxTest { Pixmap pixmap ; Texture texture ; SpriteBatch batch ; TextureRegion region ; public void create ( ) { pixmap = new Pixmap ( <int> , <int> , Pixmap . Format . RGBA8888 ) ; texture = new Texture ( <int> , <int> , Pixmap . Format . RGBA8888 ) ; texture . setFilter ( Texture . TextureFilter . Nearest , Texture . TextureFilter . Linear ) ; texture . setWrap ( Texture . TextureWrap . ClampToEdge , Texture . TextureWrap . ClampToEdge ) ; pixmap . setColor ( <float> , <float> , <float> , <float> ) ; pixmap . drawLine ( <int> , <int> , <int> , <int> ) ; pixmap . setColor ( <float> , <float> , <float> , <float> ) ; pixmap . drawLine ( <int> , <int> , <int> , <int> ) ; pixmap . setColor ( <float> , <float> , <float> , <float> ) ; pixmap . drawLine ( <int> , <int> , <int> , <int> ) ; pixmap . setColor ( <float> , <float> , <float> , <float> ) ; pixmap . drawCircle ( <int> , <int> , <int> ) ; texture . draw ( pixmap , <int> , <int> ) ; region = new TextureRegion ( texture , <int> , <int> , <int> , <int> ) ; batch = new SpriteBatch ( ) ; Pixmap pixmap = new Pixmap ( <int> , <int> , Pixmap . Format . RGBA8888 ) ; for ( int y = <int> ; y < pixmap . getHeight ( ) ; y + + ) { for ( int x = <int> ; x < pixmap . getWidth ( ) ; x + + ) { pixmap . getPixel ( x , y ) ; } } pixmap . dispose ( ) ; } public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; batch . draw ( region , <int> , <int> ) ; batch . end ( ) ; } }
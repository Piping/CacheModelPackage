package org . apache . cassandra . locator ; import java . io . DataInputStream ; import java . io . BufferedInputStream ; import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . File ; import java . net . HttpURLConnection ; import java . net . InetAddress ; import java . net . URL ; import java . net . URI ; import java . nio . charset . StandardCharsets ; import java . util . Map ; import java . util . regex . Pattern ; import java . util . regex . Matcher ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . db . SystemKeyspace ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . gms . ApplicationState ; import org . apache . cassandra . gms . EndpointState ; import org . apache . cassandra . gms . Gossiper ; import org . apache . cassandra . io . util . FileUtils ; import org . apache . cassandra . utils . FBUtilities ; import org . apache . cassandra . utils . JVMStabilityInspector ; public class CloudstackSnitch extends AbstractNetworkTopologySnitch { protected static final Logger logger = LoggerFactory . getLogger ( CloudstackSnitch . class ) ; protected static final String ZONE_NAME_QUERY_URI = <str> ; private Map < InetAddress , Map < String , String > > savedEndpoints ; private static final String DEFAULT_DC = <str> ; private static final String DEFAULT_RACK = <str> ; private static final String [ ] LEASE_FILES = { <str> , <str> } ; protected String csZoneDc ; protected String csZoneRack ; public CloudstackSnitch ( ) throws IOException , ConfigurationException { String endpoint = csMetadataEndpoint ( ) ; String zone = csQueryMetadata ( endpoint + ZONE_NAME_QUERY_URI ) ; String zone_parts [ ] = zone . split ( <str> ) ; if ( zone_parts . length ! = <int> ) { throw new ConfigurationException ( <str> + zone ) ; } csZoneDc = zone_parts [ <int> ] + <str> + zone_parts [ <int> ] ; csZoneRack = zone_parts [ <int> ] ; } public String getRack ( InetAddress endpoint ) { if ( endpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) ) return csZoneRack ; EndpointState state = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; if ( state = = null | | state . getApplicationState ( ApplicationState . RACK ) = = null ) { if ( savedEndpoints = = null ) savedEndpoints = SystemKeyspace . loadDcRackInfo ( ) ; if ( savedEndpoints . containsKey ( endpoint ) ) return savedEndpoints . get ( endpoint ) . get ( <str> ) ; return DEFAULT_RACK ; } return state . getApplicationState ( ApplicationState . RACK ) . value ; } public String getDatacenter ( InetAddress endpoint ) { if ( endpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) ) return csZoneDc ; EndpointState state = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; if ( state = = null | | state . getApplicationState ( ApplicationState . DC ) = = null ) { if ( savedEndpoints = = null ) savedEndpoints = SystemKeyspace . loadDcRackInfo ( ) ; if ( savedEndpoints . containsKey ( endpoint ) ) return savedEndpoints . get ( endpoint ) . get ( <str> ) ; return DEFAULT_DC ; } return state . getApplicationState ( ApplicationState . DC ) . value ; } String csQueryMetadata ( String url ) throws ConfigurationException , IOException { HttpURLConnection conn = null ; DataInputStream is = null ; try { conn = ( HttpURLConnection ) new URL ( url ) . openConnection ( ) ; } catch ( Exception e ) { throw new ConfigurationException ( <str> + url ) ; } try { conn . setRequestMethod ( <str> ) ; if ( conn . getResponseCode ( ) ! = <int> ) { throw new ConfigurationException ( <str> ) ; } int cl = conn . getContentLength ( ) ; byte [ ] b = new byte [ cl ] ; is = new DataInputStream ( new BufferedInputStream ( conn . getInputStream ( ) ) ) ; is . readFully ( b ) ; return new String ( b , StandardCharsets . UTF_8 ) ; } finally { FileUtils . close ( is ) ; conn . disconnect ( ) ; } } String csMetadataEndpoint ( ) throws ConfigurationException { for ( String lease_uri : LEASE_FILES ) { try { File lease_file = new File ( new URI ( lease_uri ) ) ; if ( lease_file . exists ( ) ) { return csEndpointFromLease ( lease_file ) ; } } catch ( Exception e ) { JVMStabilityInspector . inspectThrowable ( e ) ; continue ; } } throw new ConfigurationException ( <str> ) ; } String csEndpointFromLease ( File lease ) throws ConfigurationException { String line ; String endpoint = null ; Pattern identifierPattern = Pattern . compile ( <str> ) ; try ( BufferedReader reader = new BufferedReader ( new FileReader ( lease ) ) ) { while ( ( line = reader . readLine ( ) ) ! = null ) { Matcher matcher = identifierPattern . matcher ( line ) ; if ( matcher . find ( ) ) { endpoint = matcher . group ( <int> ) ; break ; } } } catch ( Exception e ) { throw new ConfigurationException ( <str> ) ; } if ( endpoint = = null ) { throw new ConfigurationException ( <str> ) ; } return <str> + endpoint ; } }
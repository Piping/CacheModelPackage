package io . netty . handler . traffic ; import io . netty . buffer . ByteBuf ; import io . netty . channel . Channel ; import io . netty . channel . ChannelHandler . Sharable ; import io . netty . channel . ChannelConfig ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelPromise ; import io . netty . util . Attribute ; import io . netty . util . concurrent . EventExecutor ; import io . netty . util . internal . PlatformDependent ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import java . util . AbstractCollection ; import java . util . ArrayDeque ; import java . util . Collection ; import java . util . Iterator ; import java . util . concurrent . ConcurrentMap ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicLong ; @Sharable public class GlobalChannelTrafficShapingHandler extends AbstractTrafficShapingHandler { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( GlobalChannelTrafficShapingHandler . class ) ; final ConcurrentMap < Integer , PerChannel > channelQueues = PlatformDependent . newConcurrentHashMap ( ) ; private final AtomicLong queuesSize = new AtomicLong ( ) ; private final AtomicLong cumulativeWrittenBytes = new AtomicLong ( ) ; private final AtomicLong cumulativeReadBytes = new AtomicLong ( ) ; volatile long maxGlobalWriteSize = DEFAULT_MAX_SIZE * <int> ; private volatile long writeChannelLimit ; private volatile long readChannelLimit ; private static final float DEFAULT_DEVIATION = <float> F ; private static final float MAX_DEVIATION = <float> F ; private static final float DEFAULT_SLOWDOWN = <float> F ; private static final float DEFAULT_ACCELERATION = - <float> F ; private volatile float maxDeviation ; private volatile float accelerationFactor ; private volatile float slowDownFactor ; private volatile boolean readDeviationActive ; private volatile boolean writeDeviationActive ; static final class PerChannel { ArrayDeque < ToSend > messagesQueue ; TrafficCounter channelTrafficCounter ; long queueSize ; long lastWriteTimestamp ; long lastReadTimestamp ; } void createGlobalTrafficCounter ( ScheduledExecutorService executor ) { setMaxDeviation ( DEFAULT_DEVIATION , DEFAULT_SLOWDOWN , DEFAULT_ACCELERATION ) ; if ( executor = = null ) { throw new IllegalArgumentException ( <str> ) ; } TrafficCounter tc = new GlobalChannelTrafficCounter ( this , executor , <str> , checkInterval ) ; setTrafficCounter ( tc ) ; tc . start ( ) ; } @Override int userDefinedWritabilityIndex ( ) { return AbstractTrafficShapingHandler . GLOBALCHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX ; } public GlobalChannelTrafficShapingHandler ( ScheduledExecutorService executor , long writeGlobalLimit , long readGlobalLimit , long writeChannelLimit , long readChannelLimit , long checkInterval , long maxTime ) { super ( writeGlobalLimit , readGlobalLimit , checkInterval , maxTime ) ; createGlobalTrafficCounter ( executor ) ; this . writeChannelLimit = writeChannelLimit ; this . readChannelLimit = readChannelLimit ; } public GlobalChannelTrafficShapingHandler ( ScheduledExecutorService executor , long writeGlobalLimit , long readGlobalLimit , long writeChannelLimit , long readChannelLimit , long checkInterval ) { super ( writeGlobalLimit , readGlobalLimit , checkInterval ) ; this . writeChannelLimit = writeChannelLimit ; this . readChannelLimit = readChannelLimit ; createGlobalTrafficCounter ( executor ) ; } public GlobalChannelTrafficShapingHandler ( ScheduledExecutorService executor , long writeGlobalLimit , long readGlobalLimit , long writeChannelLimit , long readChannelLimit ) { super ( writeGlobalLimit , readGlobalLimit ) ; this . writeChannelLimit = writeChannelLimit ; this . readChannelLimit = readChannelLimit ; createGlobalTrafficCounter ( executor ) ; } public GlobalChannelTrafficShapingHandler ( ScheduledExecutorService executor , long checkInterval ) { super ( checkInterval ) ; createGlobalTrafficCounter ( executor ) ; } public GlobalChannelTrafficShapingHandler ( ScheduledExecutorService executor ) { createGlobalTrafficCounter ( executor ) ; } public float maxDeviation ( ) { return maxDeviation ; } public float accelerationFactor ( ) { return accelerationFactor ; } public float slowDownFactor ( ) { return slowDownFactor ; } public void setMaxDeviation ( float maxDeviation , float slowDownFactor , float accelerationFactor ) { if ( maxDeviation > MAX_DEVIATION ) { throw new IllegalArgumentException ( <str> + MAX_DEVIATION ) ; } if ( slowDownFactor < <int> ) { throw new IllegalArgumentException ( <str> ) ; } if ( accelerationFactor > <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . maxDeviation = maxDeviation ; this . accelerationFactor = <int> + accelerationFactor ; this . slowDownFactor = <int> + slowDownFactor ; } private void computeDeviationCumulativeBytes ( ) { long maxWrittenBytes = <int> ; long maxReadBytes = <int> ; long minWrittenBytes = Long . MAX_VALUE ; long minReadBytes = Long . MAX_VALUE ; for ( PerChannel perChannel : channelQueues . values ( ) ) { long value = perChannel . channelTrafficCounter . cumulativeWrittenBytes ( ) ; if ( maxWrittenBytes < value ) { maxWrittenBytes = value ; } if ( minWrittenBytes > value ) { minWrittenBytes = value ; } value = perChannel . channelTrafficCounter . cumulativeReadBytes ( ) ; if ( maxReadBytes < value ) { maxReadBytes = value ; } if ( minReadBytes > value ) { minReadBytes = value ; } } boolean multiple = channelQueues . size ( ) > <int> ; readDeviationActive = multiple & & minReadBytes < maxReadBytes / <int> ; writeDeviationActive = multiple & & minWrittenBytes < maxWrittenBytes / <int> ; cumulativeWrittenBytes . set ( maxWrittenBytes ) ; cumulativeReadBytes . set ( maxReadBytes ) ; } @Override protected void doAccounting ( TrafficCounter counter ) { computeDeviationCumulativeBytes ( ) ; super . doAccounting ( counter ) ; } private long computeBalancedWait ( float maxLocal , float maxGlobal , long wait ) { if ( maxGlobal = = <int> ) { return wait ; } float ratio = maxLocal / maxGlobal ; if ( ratio > maxDeviation ) { if ( ratio < <int> - maxDeviation ) { return wait ; } else { ratio = slowDownFactor ; if ( wait < MINIMAL_WAIT ) { wait = MINIMAL_WAIT ; } } } else { ratio = accelerationFactor ; } return ( long ) ( wait * ratio ) ; } public long getMaxGlobalWriteSize ( ) { return maxGlobalWriteSize ; } public void setMaxGlobalWriteSize ( long maxGlobalWriteSize ) { if ( maxGlobalWriteSize < = <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . maxGlobalWriteSize = maxGlobalWriteSize ; } public long queuesSize ( ) { return queuesSize . get ( ) ; } public void configureChannel ( long newWriteLimit , long newReadLimit ) { writeChannelLimit = newWriteLimit ; readChannelLimit = newReadLimit ; long now = TrafficCounter . milliSecondFromNano ( ) ; for ( PerChannel perChannel : channelQueues . values ( ) ) { perChannel . channelTrafficCounter . resetAccounting ( now ) ; } } public long getWriteChannelLimit ( ) { return writeChannelLimit ; } public void setWriteChannelLimit ( long writeLimit ) { writeChannelLimit = writeLimit ; long now = TrafficCounter . milliSecondFromNano ( ) ; for ( PerChannel perChannel : channelQueues . values ( ) ) { perChannel . channelTrafficCounter . resetAccounting ( now ) ; } } public long getReadChannelLimit ( ) { return readChannelLimit ; } public void setReadChannelLimit ( long readLimit ) { readChannelLimit = readLimit ; long now = TrafficCounter . milliSecondFromNano ( ) ; for ( PerChannel perChannel : channelQueues . values ( ) ) { perChannel . channelTrafficCounter . resetAccounting ( now ) ; } } public final void release ( ) { trafficCounter . stop ( ) ; } private PerChannel getOrSetPerChannel ( ChannelHandlerContext ctx ) { Channel channel = ctx . channel ( ) ; Integer key = channel . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; if ( perChannel = = null ) { perChannel = new PerChannel ( ) ; perChannel . messagesQueue = new ArrayDeque < ToSend > ( ) ; perChannel . channelTrafficCounter = new TrafficCounter ( this , null , <str> + ctx . channel ( ) . hashCode ( ) , checkInterval ) ; perChannel . queueSize = <int> ; perChannel . lastReadTimestamp = TrafficCounter . milliSecondFromNano ( ) ; perChannel . lastWriteTimestamp = perChannel . lastReadTimestamp ; channelQueues . put ( key , perChannel ) ; } return perChannel ; } @Override public void handlerAdded ( ChannelHandlerContext ctx ) throws Exception { getOrSetPerChannel ( ctx ) ; trafficCounter . resetCumulativeTime ( ) ; super . handlerAdded ( ctx ) ; } @Override public void handlerRemoved ( ChannelHandlerContext ctx ) throws Exception { trafficCounter . resetCumulativeTime ( ) ; Channel channel = ctx . channel ( ) ; Integer key = channel . hashCode ( ) ; PerChannel perChannel = channelQueues . remove ( key ) ; if ( perChannel ! = null ) { synchronized ( perChannel ) { if ( channel . isActive ( ) ) { for ( ToSend toSend : perChannel . messagesQueue ) { long size = calculateSize ( toSend . toSend ) ; trafficCounter . bytesRealWriteFlowControl ( size ) ; perChannel . channelTrafficCounter . bytesRealWriteFlowControl ( size ) ; perChannel . queueSize - = size ; queuesSize . addAndGet ( - size ) ; ctx . write ( toSend . toSend , toSend . promise ) ; } } else { queuesSize . addAndGet ( - perChannel . queueSize ) ; for ( ToSend toSend : perChannel . messagesQueue ) { if ( toSend . toSend instanceof ByteBuf ) { ( ( ByteBuf ) toSend . toSend ) . release ( ) ; } } } perChannel . messagesQueue . clear ( ) ; } } releaseWriteSuspended ( ctx ) ; releaseReadSuspended ( ctx ) ; super . handlerRemoved ( ctx ) ; } @Override public void channelRead ( final ChannelHandlerContext ctx , final Object msg ) throws Exception { long size = calculateSize ( msg ) ; long now = TrafficCounter . milliSecondFromNano ( ) ; if ( size > <int> ) { long waitGlobal = trafficCounter . readTimeToWait ( size , getReadLimit ( ) , maxTime , now ) ; Integer key = ctx . channel ( ) . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; long wait = <int> ; if ( perChannel ! = null ) { wait = perChannel . channelTrafficCounter . readTimeToWait ( size , readChannelLimit , maxTime , now ) ; if ( readDeviationActive ) { long maxLocalRead ; maxLocalRead = perChannel . channelTrafficCounter . cumulativeReadBytes ( ) ; long maxGlobalRead = cumulativeReadBytes . get ( ) ; if ( maxLocalRead < = <int> ) { maxLocalRead = <int> ; } if ( maxGlobalRead < maxLocalRead ) { maxGlobalRead = maxLocalRead ; } wait = computeBalancedWait ( maxLocalRead , maxGlobalRead , wait ) ; } } if ( wait < waitGlobal ) { wait = waitGlobal ; } wait = checkWaitReadTime ( ctx , wait , now ) ; if ( wait > = MINIMAL_WAIT ) { ChannelConfig config = ctx . channel ( ) . config ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( <str> + wait + <str> + config . isAutoRead ( ) + <str> + isHandlerActive ( ctx ) ) ; } if ( config . isAutoRead ( ) & & isHandlerActive ( ctx ) ) { config . setAutoRead ( false ) ; ctx . attr ( READ_SUSPENDED ) . set ( true ) ; Attribute < Runnable > attr = ctx . attr ( REOPEN_TASK ) ; Runnable reopenTask = attr . get ( ) ; if ( reopenTask = = null ) { reopenTask = new ReopenReadTimerTask ( ctx ) ; attr . set ( reopenTask ) ; } ctx . executor ( ) . schedule ( reopenTask , wait , TimeUnit . MILLISECONDS ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( <str> + config . isAutoRead ( ) + <str> + isHandlerActive ( ctx ) + <str> + wait ) ; } } } } informReadOperation ( ctx , now ) ; ctx . fireChannelRead ( msg ) ; } @Override protected long checkWaitReadTime ( final ChannelHandlerContext ctx , long wait , final long now ) { Integer key = ctx . channel ( ) . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; if ( perChannel ! = null ) { if ( wait > maxTime & & now + wait - perChannel . lastReadTimestamp > maxTime ) { wait = maxTime ; } } return wait ; } @Override protected void informReadOperation ( final ChannelHandlerContext ctx , final long now ) { Integer key = ctx . channel ( ) . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; if ( perChannel ! = null ) { perChannel . lastReadTimestamp = now ; } } private static final class ToSend { final long relativeTimeAction ; final Object toSend ; final ChannelPromise promise ; final long size ; private ToSend ( final long delay , final Object toSend , final long size , final ChannelPromise promise ) { relativeTimeAction = delay ; this . toSend = toSend ; this . size = size ; this . promise = promise ; } } protected long maximumCumulativeWrittenBytes ( ) { return cumulativeWrittenBytes . get ( ) ; } protected long maximumCumulativeReadBytes ( ) { return cumulativeReadBytes . get ( ) ; } public Collection < TrafficCounter > channelTrafficCounters ( ) { return new AbstractCollection < TrafficCounter > ( ) { @Override public Iterator < TrafficCounter > iterator ( ) { return new Iterator < TrafficCounter > ( ) { final Iterator < PerChannel > iter = channelQueues . values ( ) . iterator ( ) ; @Override public boolean hasNext ( ) { return iter . hasNext ( ) ; } @Override public TrafficCounter next ( ) { return iter . next ( ) . channelTrafficCounter ; } @Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; } @Override public int size ( ) { return channelQueues . size ( ) ; } } ; } @Override public void write ( final ChannelHandlerContext ctx , final Object msg , final ChannelPromise promise ) throws Exception { long size = calculateSize ( msg ) ; long now = TrafficCounter . milliSecondFromNano ( ) ; if ( size > <int> ) { long waitGlobal = trafficCounter . writeTimeToWait ( size , getWriteLimit ( ) , maxTime , now ) ; Integer key = ctx . channel ( ) . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; long wait = <int> ; if ( perChannel ! = null ) { wait = perChannel . channelTrafficCounter . writeTimeToWait ( size , writeChannelLimit , maxTime , now ) ; if ( writeDeviationActive ) { long maxLocalWrite ; maxLocalWrite = perChannel . channelTrafficCounter . cumulativeWrittenBytes ( ) ; long maxGlobalWrite = cumulativeWrittenBytes . get ( ) ; if ( maxLocalWrite < = <int> ) { maxLocalWrite = <int> ; } if ( maxGlobalWrite < maxLocalWrite ) { maxGlobalWrite = maxLocalWrite ; } wait = computeBalancedWait ( maxLocalWrite , maxGlobalWrite , wait ) ; } } if ( wait < waitGlobal ) { wait = waitGlobal ; } if ( wait > = MINIMAL_WAIT ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( <str> + wait + <str> + ctx . channel ( ) . config ( ) . isAutoRead ( ) + <str> + isHandlerActive ( ctx ) ) ; } submitWrite ( ctx , msg , size , wait , now , promise ) ; return ; } } submitWrite ( ctx , msg , size , <int> , now , promise ) ; } @Override protected void submitWrite ( final ChannelHandlerContext ctx , final Object msg , final long size , final long writedelay , final long now , final ChannelPromise promise ) { Channel channel = ctx . channel ( ) ; Integer key = channel . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; if ( perChannel = = null ) { perChannel = getOrSetPerChannel ( ctx ) ; } final ToSend newToSend ; long delay = writedelay ; boolean globalSizeExceeded = false ; synchronized ( perChannel ) { if ( writedelay = = <int> & & perChannel . messagesQueue . isEmpty ( ) ) { trafficCounter . bytesRealWriteFlowControl ( size ) ; perChannel . channelTrafficCounter . bytesRealWriteFlowControl ( size ) ; ctx . write ( msg , promise ) ; perChannel . lastWriteTimestamp = now ; return ; } if ( delay > maxTime & & now + delay - perChannel . lastWriteTimestamp > maxTime ) { delay = maxTime ; } newToSend = new ToSend ( delay + now , msg , size , promise ) ; perChannel . messagesQueue . addLast ( newToSend ) ; perChannel . queueSize + = size ; queuesSize . addAndGet ( size ) ; checkWriteSuspend ( ctx , delay , perChannel . queueSize ) ; if ( queuesSize . get ( ) > maxGlobalWriteSize ) { globalSizeExceeded = true ; } } if ( globalSizeExceeded ) { setUserDefinedWritability ( ctx , false ) ; } final long futureNow = newToSend . relativeTimeAction ; final PerChannel forSchedule = perChannel ; ctx . executor ( ) . schedule ( new Runnable ( ) { @Override public void run ( ) { sendAllValid ( ctx , forSchedule , futureNow ) ; } } , delay , TimeUnit . MILLISECONDS ) ; } private void sendAllValid ( final ChannelHandlerContext ctx , final PerChannel perChannel , final long now ) { synchronized ( perChannel ) { ToSend newToSend = perChannel . messagesQueue . pollFirst ( ) ; for ( ; newToSend ! = null ; newToSend = perChannel . messagesQueue . pollFirst ( ) ) { if ( newToSend . relativeTimeAction < = now ) { long size = newToSend . size ; trafficCounter . bytesRealWriteFlowControl ( size ) ; perChannel . channelTrafficCounter . bytesRealWriteFlowControl ( size ) ; perChannel . queueSize - = size ; queuesSize . addAndGet ( - size ) ; ctx . write ( newToSend . toSend , newToSend . promise ) ; perChannel . lastWriteTimestamp = now ; } else { perChannel . messagesQueue . addFirst ( newToSend ) ; break ; } } if ( perChannel . messagesQueue . isEmpty ( ) ) { releaseWriteSuspended ( ctx ) ; } } ctx . flush ( ) ; } @Override public String toString ( ) { return new StringBuilder ( <int> ) . append ( super . toString ( ) ) . append ( <str> ) . append ( writeChannelLimit ) . append ( <str> ) . append ( readChannelLimit ) . toString ( ) ; } } 

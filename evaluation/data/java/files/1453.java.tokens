package org . eclipse . debug . internal . core . sourcelookup ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourcePathComputer ; import org . eclipse . debug . core . sourcelookup . ISourcePathComputerDelegate ; import org . eclipse . debug . internal . core . IConfigurationElementConstants ; public class SourcePathComputer implements ISourcePathComputer { private ISourcePathComputerDelegate fDelegate = null ; private IConfigurationElement fElement = null ; public SourcePathComputer ( IConfigurationElement element ) { fElement = element ; } @Override public String getId ( ) { return fElement . getAttribute ( IConfigurationElementConstants . ID ) ; } private ISourcePathComputerDelegate getDelegate ( ) throws CoreException { if ( fDelegate = = null ) { fDelegate = ( ISourcePathComputerDelegate ) fElement . createExecutableExtension ( IConfigurationElementConstants . CLASS ) ; } return fDelegate ; } @Override public ISourceContainer [ ] computeSourceContainers ( ILaunchConfiguration configuration , IProgressMonitor monitor ) { try { return getDelegate ( ) . computeSourceContainers ( configuration , monitor ) ; } catch ( CoreException e ) { DebugPlugin . log ( e ) ; } return new ISourceContainer [ <int> ] ; } } 

package com . google . common . graph ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . base . Joiner ; import com . google . common . base . Objects ; import com . google . common . base . Optional ; import com . google . common . collect . Lists ; import java . util . List ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @Beta @CheckReturnValue public final class GraphConfig { private final boolean multigraph ; private final boolean selfLoopsAllowed ; private final Optional < Integer > expectedNodeCount ; private final Optional < Integer > expectedEdgeCount ; GraphConfig ( ) { multigraph = false ; selfLoopsAllowed = true ; expectedNodeCount = Optional . absent ( ) ; expectedEdgeCount = Optional . absent ( ) ; } private GraphConfig ( boolean multigraph , boolean selfLoopsAllowed , Optional < Integer > expectedNodeCount , Optional < Integer > expectedEdgeCount ) { this . multigraph = multigraph ; this . selfLoopsAllowed = selfLoopsAllowed ; this . expectedNodeCount = expectedNodeCount ; this . expectedEdgeCount = expectedEdgeCount ; } public boolean isMultigraph ( ) { return multigraph ; } public boolean isSelfLoopsAllowed ( ) { return selfLoopsAllowed ; } public Optional < Integer > getExpectedNodeCount ( ) { return expectedNodeCount ; } public Optional < Integer > getExpectedEdgeCount ( ) { return expectedEdgeCount ; } public GraphConfig expectedNodeCount ( int expectedNodeCount ) { checkArgument ( expectedNodeCount > = <int> , <str> ) ; return new GraphConfig ( multigraph , selfLoopsAllowed , Optional . of ( expectedNodeCount ) , expectedEdgeCount ) ; } public GraphConfig expectedEdgeCount ( int expectedEdgeCount ) { checkArgument ( expectedEdgeCount > = <int> , <str> ) ; return new GraphConfig ( multigraph , selfLoopsAllowed , expectedNodeCount , Optional . of ( expectedEdgeCount ) ) ; } public GraphConfig multigraph ( ) { return new GraphConfig ( true , selfLoopsAllowed , expectedNodeCount , expectedEdgeCount ) ; } public GraphConfig noSelfLoops ( ) { return new GraphConfig ( multigraph , false , expectedNodeCount , expectedEdgeCount ) ; } public boolean compatibleWith ( GraphConfig that ) { checkNotNull ( that , <str> ) ; return this . multigraph = = that . multigraph & & this . selfLoopsAllowed = = that . selfLoopsAllowed ; } @Override public boolean equals ( @Nullable Object object ) { if ( object instanceof GraphConfig ) { GraphConfig that = ( GraphConfig ) object ; return this . multigraph = = that . multigraph & & this . selfLoopsAllowed = = that . selfLoopsAllowed & & this . expectedNodeCount . equals ( that . expectedNodeCount ) & & this . expectedEdgeCount . equals ( that . expectedEdgeCount ) ; } return false ; } @Override public int hashCode ( ) { return Objects . hashCode ( expectedNodeCount , expectedEdgeCount , multigraph , selfLoopsAllowed ) ; } @Override public String toString ( ) { List < String > properties = Lists . newArrayList ( ) ; if ( multigraph ) { properties . add ( <str> ) ; } if ( selfLoopsAllowed ) { properties . add ( <str> ) ; } else { properties . add ( <str> ) ; } return Joiner . on ( <str> ) . join ( properties ) ; } } 

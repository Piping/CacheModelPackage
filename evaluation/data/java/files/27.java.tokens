package org . nd4j . linalg . dataset . api . iterator ; import org . nd4j . linalg . dataset . DataSet ; import org . nd4j . linalg . dataset . api . DataSetPreProcessor ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; @Deprecated public class MultipleEpochsIterator implements DataSetIterator { private static final Logger log = LoggerFactory . getLogger ( MultipleEpochsIterator . class ) ; private int numPasses ; private int batch = <int> ; private DataSetIterator iter ; private int passes = <int> ; private DataSetPreProcessor preProcessor ; public MultipleEpochsIterator ( int numPasses , DataSetIterator iter ) { this . numPasses = numPasses ; this . iter = iter ; } @Override public DataSet next ( int num ) { if ( ! iter . hasNext ( ) ) { if ( passes < numPasses ) { passes + + ; batch = <int> ; log . info ( <str> + passes + <str> + batch ) ; iter . reset ( ) ; } } batch + + ; DataSet next = iter . next ( num ) ; if ( preProcessor ! = null ) preProcessor . preProcess ( next ) ; return next ; } @Override public int totalExamples ( ) { return iter . totalExamples ( ) ; } @Override public int inputColumns ( ) { return iter . inputColumns ( ) ; } @Override public int totalOutcomes ( ) { return iter . totalOutcomes ( ) ; } @Override public void reset ( ) { passes = <int> ; batch = <int> ; iter . reset ( ) ; } @Override public int batch ( ) { return iter . batch ( ) ; } @Override public int cursor ( ) { return iter . cursor ( ) ; } @Override public int numExamples ( ) { return iter . numExamples ( ) ; } @Override public void setPreProcessor ( DataSetPreProcessor preProcessor ) { this . preProcessor = preProcessor ; } @Override public boolean hasNext ( ) { return iter . hasNext ( ) | | passes < numPasses ; } @Override public DataSet next ( ) { if ( ! iter . hasNext ( ) ) { if ( passes < numPasses ) { passes + + ; batch = <int> ; log . info ( <str> + passes + <str> + batch ) ; iter . reset ( ) ; } } batch + + ; DataSet next = iter . next ( ) ; if ( preProcessor ! = null ) preProcessor . preProcess ( next ) ; return next ; } @Override public void remove ( ) { iter . remove ( ) ; } } 

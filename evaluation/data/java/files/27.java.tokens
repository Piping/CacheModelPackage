package com . netflix . hystrix . strategy . metrics ; import static junit . framework . Assert . assertNotSame ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertSame ; import java . util . ArrayList ; import java . util . concurrent . atomic . AtomicInteger ; import com . netflix . hystrix . strategy . HystrixPlugins ; import org . junit . Before ; import org . junit . Test ; import com . netflix . hystrix . HystrixCircuitBreaker ; import com . netflix . hystrix . HystrixCommandGroupKey ; import com . netflix . hystrix . HystrixCommandKey ; import com . netflix . hystrix . HystrixCommandMetrics ; import com . netflix . hystrix . HystrixCommandProperties ; import com . netflix . hystrix . HystrixThreadPoolKey ; import com . netflix . hystrix . HystrixThreadPoolMetrics ; import com . netflix . hystrix . HystrixThreadPoolProperties ; public class HystrixMetricsPublisherFactoryTest { @Before public void reset ( ) { HystrixPlugins . reset ( ) ; } @Test public void testSingleInitializePerKey ( ) { final TestHystrixMetricsPublisher publisher = new TestHystrixMetricsPublisher ( ) ; HystrixPlugins . getInstance ( ) . registerMetricsPublisher ( publisher ) ; final HystrixMetricsPublisherFactory factory = new HystrixMetricsPublisherFactory ( ) ; ArrayList < Thread > threads = new ArrayList < Thread > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { threads . add ( new Thread ( new Runnable ( ) { @Override public void run ( ) { factory . getPublisherForCommand ( TestCommandKey . TEST_A , null , null , null , null ) ; factory . getPublisherForCommand ( TestCommandKey . TEST_B , null , null , null , null ) ; factory . getPublisherForThreadPool ( TestThreadPoolKey . TEST_A , null , null ) ; } } ) ) ; } for ( Thread t : threads ) { t . start ( ) ; } for ( Thread t : threads ) { try { t . join ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } assertEquals ( <int> , publisher . commandCounter . get ( ) ) ; assertEquals ( <int> , publisher . threadCounter . get ( ) ) ; } @Test public void testMetricsPublisherReset ( ) { HystrixCommandKey key = HystrixCommandKey . Factory . asKey ( <str> ) ; HystrixMetricsPublisherCommand firstCommand = new HystrixMetricsPublisherCommandDefault ( key , null , null , null , null ) ; HystrixMetricsPublisher firstPublisher = new CustomPublisher ( firstCommand ) ; HystrixPlugins . getInstance ( ) . registerMetricsPublisher ( firstPublisher ) ; HystrixMetricsPublisherCommand cmd = HystrixMetricsPublisherFactory . createOrRetrievePublisherForCommand ( key , null , null , null , null ) ; assertSame ( firstCommand , cmd ) ; HystrixPlugins . reset ( ) ; HystrixMetricsPublisherCommand secondCommand = new HystrixMetricsPublisherCommandDefault ( key , null , null , null , null ) ; HystrixMetricsPublisher secondPublisher = new CustomPublisher ( secondCommand ) ; HystrixPlugins . getInstance ( ) . registerMetricsPublisher ( secondPublisher ) ; cmd = HystrixMetricsPublisherFactory . createOrRetrievePublisherForCommand ( key , null , null , null , null ) ; assertNotSame ( firstCommand , cmd ) ; assertSame ( secondCommand , cmd ) ; } private static class TestHystrixMetricsPublisher extends HystrixMetricsPublisher { AtomicInteger commandCounter = new AtomicInteger ( ) ; AtomicInteger threadCounter = new AtomicInteger ( ) ; @Override public HystrixMetricsPublisherCommand getMetricsPublisherForCommand ( HystrixCommandKey commandKey , HystrixCommandGroupKey commandOwner , HystrixCommandMetrics metrics , HystrixCircuitBreaker circuitBreaker , HystrixCommandProperties properties ) { return new HystrixMetricsPublisherCommand ( ) { @Override public void initialize ( ) { commandCounter . incrementAndGet ( ) ; } } ; } @Override public HystrixMetricsPublisherThreadPool getMetricsPublisherForThreadPool ( HystrixThreadPoolKey threadPoolKey , HystrixThreadPoolMetrics metrics , HystrixThreadPoolProperties properties ) { return new HystrixMetricsPublisherThreadPool ( ) { @Override public void initialize ( ) { threadCounter . incrementAndGet ( ) ; } } ; } } private static enum TestCommandKey implements HystrixCommandKey { TEST_A , TEST_B } private static enum TestThreadPoolKey implements HystrixThreadPoolKey { TEST_A , TEST_B } static class CustomPublisher extends HystrixMetricsPublisher { private HystrixMetricsPublisherCommand commandToReturn ; public CustomPublisher ( HystrixMetricsPublisherCommand commandToReturn ) { this . commandToReturn = commandToReturn ; } @Override public HystrixMetricsPublisherCommand getMetricsPublisherForCommand ( HystrixCommandKey commandKey , HystrixCommandGroupKey commandGroupKey , HystrixCommandMetrics metrics , HystrixCircuitBreaker circuitBreaker , HystrixCommandProperties properties ) { return commandToReturn ; } } }
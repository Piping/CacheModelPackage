package com . netflix . hystrix . examples . demo ; import java . net . HttpCookie ; import com . netflix . hystrix . HystrixCommand ; import com . netflix . hystrix . HystrixCommandGroupKey ; public class GetUserAccountCommand extends HystrixCommand < UserAccount > { private final HttpCookie httpCookie ; private final UserCookie userCookie ; public GetUserAccountCommand ( HttpCookie cookie ) { super ( Setter . withGroupKey ( HystrixCommandGroupKey . Factory . asKey ( <str> ) ) ) ; this . httpCookie = cookie ; this . userCookie = UserCookie . parseCookie ( httpCookie ) ; } @Override protected UserAccount run ( ) { try { Thread . sleep ( ( int ) ( Math . random ( ) * <int> ) + <int> ) ; } catch ( InterruptedException e ) { } if ( Math . random ( ) > <float> ) { throw new RuntimeException ( <str> ) ; } if ( Math . random ( ) > <float> ) { try { Thread . sleep ( ( int ) ( Math . random ( ) * <int> ) + <int> ) ; } catch ( InterruptedException e ) { } } return new UserAccount ( <int> , <str> , <int> , true , false , true ) ; } @Override protected String getCacheKey ( ) { return httpCookie . getValue ( ) ; } @Override protected UserAccount getFallback ( ) { return new UserAccount ( userCookie . userId , userCookie . name , userCookie . accountType , true , true , true ) ; } private static class UserCookie { private static UserCookie parseCookie ( HttpCookie cookie ) { if ( Math . random ( ) < <float> ) { return new UserCookie ( <int> , <str> , <int> ) ; } else { throw new IllegalArgumentException ( ) ; } } public UserCookie ( int userId , String name , int accountType ) { this . userId = userId ; this . name = name ; this . accountType = accountType ; } private final int userId ; private final String name ; private final int accountType ; } } 

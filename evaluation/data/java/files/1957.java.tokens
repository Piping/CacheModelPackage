package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . features . CollectionFeature . KNOWN_ORDER ; import static com . google . common . collect . testing . features . CollectionFeature . RESTRICTS_ELEMENTS ; import static com . google . common . collect . testing . features . CollectionFeature . SERIALIZABLE ; import static com . google . common . collect . testing . features . CollectionFeature . SERIALIZABLE_INCLUDING_VIEWS ; import com . google . common . collect . BoundType ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Lists ; import com . google . common . collect . Multiset ; import com . google . common . collect . SortedMultiset ; import com . google . common . collect . testing . AbstractTester ; import com . google . common . collect . testing . FeatureSpecificTestSuiteBuilder ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . OneSizeTestContainerGenerator ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . SetTestSuiteBuilder ; import com . google . common . collect . testing . features . Feature ; import com . google . common . testing . SerializableTester ; import junit . framework . TestSuite ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; public class SortedMultisetTestSuiteBuilder < E > extends MultisetTestSuiteBuilder < E > { public static < E > SortedMultisetTestSuiteBuilder < E > using ( TestMultisetGenerator < E > generator ) { SortedMultisetTestSuiteBuilder < E > result = new SortedMultisetTestSuiteBuilder < E > ( ) ; result . usingGenerator ( generator ) ; return result ; } @Override public TestSuite createTestSuite ( ) { withFeatures ( KNOWN_ORDER ) ; TestSuite suite = super . createTestSuite ( ) ; for ( TestSuite subSuite : createDerivedSuites ( this ) ) { suite . addTest ( subSuite ) ; } return suite ; } @Override protected List < Class < ? extends AbstractTester > > getTesters ( ) { List < Class < ? extends AbstractTester > > testers = Helpers . copyToList ( super . getTesters ( ) ) ; testers . add ( MultisetNavigationTester . class ) ; return testers ; } @Override TestSuite createElementSetTestSuite ( FeatureSpecificTestSuiteBuilder < ? , ? extends OneSizeTestContainerGenerator < Collection < E > , E > > parentBuilder ) { return SetTestSuiteBuilder . using ( new ElementSetGenerator < E > ( parentBuilder . getSubjectGenerator ( ) ) ) . named ( getName ( ) + <str> ) . withFeatures ( computeElementSetFeatures ( parentBuilder . getFeatures ( ) ) ) . suppressing ( parentBuilder . getSuppressedTests ( ) ) . createTestSuite ( ) ; } enum NoRecurse implements Feature < Void > { SUBMULTISET , DESCENDING ; @Override public Set < Feature < ? super Void > > getImpliedFeatures ( ) { return Collections . emptySet ( ) ; } } enum Bound { INCLUSIVE , EXCLUSIVE , NO_BOUND ; } List < TestSuite > createDerivedSuites ( SortedMultisetTestSuiteBuilder < E > parentBuilder ) { List < TestSuite > derivedSuites = Lists . newArrayList ( ) ; if ( ! parentBuilder . getFeatures ( ) . contains ( NoRecurse . DESCENDING ) ) { derivedSuites . add ( createDescendingSuite ( parentBuilder ) ) ; } if ( parentBuilder . getFeatures ( ) . contains ( SERIALIZABLE ) ) { derivedSuites . add ( createReserializedSuite ( parentBuilder ) ) ; } if ( ! parentBuilder . getFeatures ( ) . contains ( NoRecurse . SUBMULTISET ) ) { derivedSuites . add ( createSubMultisetSuite ( parentBuilder , Bound . NO_BOUND , Bound . EXCLUSIVE ) ) ; derivedSuites . add ( createSubMultisetSuite ( parentBuilder , Bound . NO_BOUND , Bound . INCLUSIVE ) ) ; derivedSuites . add ( createSubMultisetSuite ( parentBuilder , Bound . EXCLUSIVE , Bound . NO_BOUND ) ) ; derivedSuites . add ( createSubMultisetSuite ( parentBuilder , Bound . EXCLUSIVE , Bound . EXCLUSIVE ) ) ; derivedSuites . add ( createSubMultisetSuite ( parentBuilder , Bound . EXCLUSIVE , Bound . INCLUSIVE ) ) ; derivedSuites . add ( createSubMultisetSuite ( parentBuilder , Bound . INCLUSIVE , Bound . NO_BOUND ) ) ; derivedSuites . add ( createSubMultisetSuite ( parentBuilder , Bound . INCLUSIVE , Bound . EXCLUSIVE ) ) ; derivedSuites . add ( createSubMultisetSuite ( parentBuilder , Bound . INCLUSIVE , Bound . INCLUSIVE ) ) ; } return derivedSuites ; } private TestSuite createSubMultisetSuite ( SortedMultisetTestSuiteBuilder < E > parentBuilder , final Bound from , final Bound to ) { final TestMultisetGenerator < E > delegate = ( TestMultisetGenerator < E > ) parentBuilder . getSubjectGenerator ( ) ; Set < Feature < ? > > features = new HashSet < Feature < ? > > ( ) ; features . add ( NoRecurse . SUBMULTISET ) ; features . add ( RESTRICTS_ELEMENTS ) ; features . addAll ( parentBuilder . getFeatures ( ) ) ; if ( ! features . remove ( SERIALIZABLE_INCLUDING_VIEWS ) ) { features . remove ( SERIALIZABLE ) ; } SortedMultiset < E > emptyMultiset = ( SortedMultiset < E > ) delegate . create ( ) ; final Comparator < ? super E > comparator = emptyMultiset . comparator ( ) ; SampleElements < E > samples = delegate . samples ( ) ; @SuppressWarnings ( <str> ) List < E > samplesList = Arrays . asList ( samples . e0 ( ) , samples . e1 ( ) , samples . e2 ( ) , samples . e3 ( ) , samples . e4 ( ) ) ; Collections . sort ( samplesList , comparator ) ; final E firstInclusive = samplesList . get ( <int> ) ; final E lastInclusive = samplesList . get ( samplesList . size ( ) - <int> ) ; return SortedMultisetTestSuiteBuilder . using ( new ForwardingTestMultisetGenerator < E > ( delegate ) { @Override public SortedMultiset < E > create ( Object . . . entries ) { @SuppressWarnings ( <str> ) List < E > extremeValues = ( List ) getExtremeValues ( ) ; @SuppressWarnings ( <str> ) List < E > normalValues = ( List ) Arrays . asList ( entries ) ; Collections . sort ( extremeValues , comparator ) ; E firstExclusive = extremeValues . get ( <int> ) ; E lastExclusive = extremeValues . get ( <int> ) ; if ( from = = Bound . NO_BOUND ) { extremeValues . remove ( <int> ) ; extremeValues . remove ( <int> ) ; } if ( to = = Bound . NO_BOUND ) { extremeValues . remove ( extremeValues . size ( ) - <int> ) ; extremeValues . remove ( extremeValues . size ( ) - <int> ) ; } List < E > allEntries = new ArrayList < E > ( ) ; allEntries . addAll ( extremeValues ) ; allEntries . addAll ( normalValues ) ; SortedMultiset < E > multiset = ( SortedMultiset < E > ) delegate . create ( allEntries . toArray ( ) ) ; if ( from = = Bound . INCLUSIVE ) { multiset = multiset . tailMultiset ( firstInclusive , BoundType . CLOSED ) ; } else if ( from = = Bound . EXCLUSIVE ) { multiset = multiset . tailMultiset ( firstExclusive , BoundType . OPEN ) ; } if ( to = = Bound . INCLUSIVE ) { multiset = multiset . headMultiset ( lastInclusive , BoundType . CLOSED ) ; } else if ( to = = Bound . EXCLUSIVE ) { multiset = multiset . headMultiset ( lastExclusive , BoundType . OPEN ) ; } return multiset ; } } ) . named ( parentBuilder . getName ( ) + <str> + from + <str> + to ) . withFeatures ( features ) . suppressing ( parentBuilder . getSuppressedTests ( ) ) . createTestSuite ( ) ; } private List < String > getExtremeValues ( ) { List < String > result = new ArrayList < String > ( ) ; result . add ( <str> ) ; result . add ( <str> ) ; result . add ( <str> ) ; result . add ( <str> ) ; return result ; } private TestSuite createDescendingSuite ( SortedMultisetTestSuiteBuilder < E > parentBuilder ) { final TestMultisetGenerator < E > delegate = ( TestMultisetGenerator < E > ) parentBuilder . getSubjectGenerator ( ) ; Set < Feature < ? > > features = new HashSet < Feature < ? > > ( ) ; features . add ( NoRecurse . DESCENDING ) ; features . addAll ( parentBuilder . getFeatures ( ) ) ; if ( ! features . remove ( SERIALIZABLE_INCLUDING_VIEWS ) ) { features . remove ( SERIALIZABLE ) ; } return SortedMultisetTestSuiteBuilder . using ( new ForwardingTestMultisetGenerator < E > ( delegate ) { @Override public SortedMultiset < E > create ( Object . . . entries ) { return ( ( SortedMultiset < E > ) super . create ( entries ) ) . descendingMultiset ( ) ; } @Override public Iterable < E > order ( List < E > insertionOrder ) { return ImmutableList . copyOf ( super . order ( insertionOrder ) ) . reverse ( ) ; } } ) . named ( parentBuilder . getName ( ) + <str> ) . withFeatures ( features ) . suppressing ( parentBuilder . getSuppressedTests ( ) ) . createTestSuite ( ) ; } private TestSuite createReserializedSuite ( SortedMultisetTestSuiteBuilder < E > parentBuilder ) { final TestMultisetGenerator < E > delegate = ( TestMultisetGenerator < E > ) parentBuilder . getSubjectGenerator ( ) ; Set < Feature < ? > > features = new HashSet < Feature < ? > > ( ) ; features . addAll ( parentBuilder . getFeatures ( ) ) ; features . remove ( SERIALIZABLE ) ; features . remove ( SERIALIZABLE_INCLUDING_VIEWS ) ; return SortedMultisetTestSuiteBuilder . using ( new ForwardingTestMultisetGenerator < E > ( delegate ) { @Override public SortedMultiset < E > create ( Object . . . entries ) { return SerializableTester . reserialize ( ( ( SortedMultiset < E > ) super . create ( entries ) ) ) ; } } ) . named ( parentBuilder . getName ( ) + <str> ) . withFeatures ( features ) . suppressing ( parentBuilder . getSuppressedTests ( ) ) . createTestSuite ( ) ; } private static class ForwardingTestMultisetGenerator < E > implements TestMultisetGenerator < E > { private final TestMultisetGenerator < E > delegate ; ForwardingTestMultisetGenerator ( TestMultisetGenerator < E > delegate ) { this . delegate = delegate ; } @Override public SampleElements < E > samples ( ) { return delegate . samples ( ) ; } @Override public E [ ] createArray ( int length ) { return delegate . createArray ( length ) ; } @Override public Iterable < E > order ( List < E > insertionOrder ) { return delegate . order ( insertionOrder ) ; } @Override public Multiset < E > create ( Object . . . elements ) { return delegate . create ( elements ) ; } } }
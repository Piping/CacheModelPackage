package org . apache . cassandra . hints ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . cassandra . gms . ApplicationState ; import org . apache . cassandra . gms . FailureDetector ; import org . apache . cassandra . gms . Gossiper ; import static org . apache . cassandra . utils . FBUtilities . getBroadcastAddress ; final class HintsDispatchTrigger implements Runnable { private final HintsCatalog catalog ; private final HintsWriteExecutor writeExecutor ; private final HintsDispatchExecutor dispatchExecutor ; private final AtomicBoolean isPaused ; HintsDispatchTrigger ( HintsCatalog catalog , HintsWriteExecutor writeExecutor , HintsDispatchExecutor dispatchExecutor , AtomicBoolean isPaused ) { this . catalog = catalog ; this . writeExecutor = writeExecutor ; this . dispatchExecutor = dispatchExecutor ; this . isPaused = isPaused ; } public void run ( ) { if ( isPaused . get ( ) ) return ; catalog . stores ( ) . filter ( store - > ! isScheduled ( store ) ) . filter ( HintsStore : : isLive ) . filter ( store - > store . isWriting ( ) | | store . hasFiles ( ) ) . filter ( store - > Gossiper . instance . valuesEqual ( getBroadcastAddress ( ) , store . address ( ) , ApplicationState . SCHEMA ) ) . forEach ( this : : schedule ) ; } private void schedule ( HintsStore store ) { if ( store . hasFiles ( ) ) dispatchExecutor . dispatch ( store ) ; if ( store . isWriting ( ) ) writeExecutor . closeWriter ( store ) ; } private boolean isScheduled ( HintsStore store ) { return dispatchExecutor . isScheduled ( store ) ; } }
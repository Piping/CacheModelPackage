package com . google . common . base ; import static com . google . common . base . CaseFormat . LOWER_CAMEL ; import static com . google . common . base . CaseFormat . LOWER_HYPHEN ; import static com . google . common . base . CaseFormat . LOWER_UNDERSCORE ; import static com . google . common . base . CaseFormat . UPPER_CAMEL ; import static com . google . common . base . CaseFormat . UPPER_UNDERSCORE ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; @GwtCompatible ( emulated = true ) public class CaseFormatTest extends TestCase { public void testIdentity ( ) { for ( CaseFormat from : CaseFormat . values ( ) ) { assertSame ( from + <str> + from , <str> , from . to ( from , <str> ) ) ; for ( CaseFormat to : CaseFormat . values ( ) ) { assertEquals ( from + <str> + to , <str> , from . to ( to , <str> ) ) ; assertEquals ( from + <str> + to , <str> , from . to ( to , <str> ) ) ; } } } @GwtIncompatible ( <str> ) public void testNullArguments ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( CaseFormat . class ) ; for ( CaseFormat format : CaseFormat . values ( ) ) { tester . testAllPublicInstanceMethods ( format ) ; } } public void testLowerHyphenToLowerHyphen ( ) { assertEquals ( <str> , LOWER_HYPHEN . to ( LOWER_HYPHEN , <str> ) ) ; assertEquals ( <str> , LOWER_HYPHEN . to ( LOWER_HYPHEN , <str> ) ) ; } public void testLowerHyphenToLowerUnderscore ( ) { assertEquals ( <str> , LOWER_HYPHEN . to ( LOWER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , LOWER_HYPHEN . to ( LOWER_UNDERSCORE , <str> ) ) ; } public void testLowerHyphenToLowerCamel ( ) { assertEquals ( <str> , LOWER_HYPHEN . to ( LOWER_CAMEL , <str> ) ) ; assertEquals ( <str> , LOWER_HYPHEN . to ( LOWER_CAMEL , <str> ) ) ; } public void testLowerHyphenToUpperCamel ( ) { assertEquals ( <str> , LOWER_HYPHEN . to ( UPPER_CAMEL , <str> ) ) ; assertEquals ( <str> , LOWER_HYPHEN . to ( UPPER_CAMEL , <str> ) ) ; } public void testLowerHyphenToUpperUnderscore ( ) { assertEquals ( <str> , LOWER_HYPHEN . to ( UPPER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , LOWER_HYPHEN . to ( UPPER_UNDERSCORE , <str> ) ) ; } public void testLowerUnderscoreToLowerHyphen ( ) { assertEquals ( <str> , LOWER_UNDERSCORE . to ( LOWER_HYPHEN , <str> ) ) ; assertEquals ( <str> , LOWER_UNDERSCORE . to ( LOWER_HYPHEN , <str> ) ) ; } public void testLowerUnderscoreToLowerUnderscore ( ) { assertEquals ( <str> , LOWER_UNDERSCORE . to ( LOWER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , LOWER_UNDERSCORE . to ( LOWER_UNDERSCORE , <str> ) ) ; } public void testLowerUnderscoreToLowerCamel ( ) { assertEquals ( <str> , LOWER_UNDERSCORE . to ( LOWER_CAMEL , <str> ) ) ; assertEquals ( <str> , LOWER_UNDERSCORE . to ( LOWER_CAMEL , <str> ) ) ; } public void testLowerUnderscoreToUpperCamel ( ) { assertEquals ( <str> , LOWER_UNDERSCORE . to ( UPPER_CAMEL , <str> ) ) ; assertEquals ( <str> , LOWER_UNDERSCORE . to ( UPPER_CAMEL , <str> ) ) ; } public void testLowerUnderscoreToUpperUnderscore ( ) { assertEquals ( <str> , LOWER_UNDERSCORE . to ( UPPER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , LOWER_UNDERSCORE . to ( UPPER_UNDERSCORE , <str> ) ) ; } public void testLowerCamelToLowerHyphen ( ) { assertEquals ( <str> , LOWER_CAMEL . to ( LOWER_HYPHEN , <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . to ( LOWER_HYPHEN , <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . to ( LOWER_HYPHEN , <str> ) ) ; } public void testLowerCamelToLowerUnderscore ( ) { assertEquals ( <str> , LOWER_CAMEL . to ( LOWER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . to ( LOWER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . to ( LOWER_UNDERSCORE , <str> ) ) ; } public void testLowerCamelToLowerCamel ( ) { assertEquals ( <str> , LOWER_CAMEL . to ( LOWER_CAMEL , <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . to ( LOWER_CAMEL , <str> ) ) ; } public void testLowerCamelToUpperCamel ( ) { assertEquals ( <str> , LOWER_CAMEL . to ( UPPER_CAMEL , <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . to ( UPPER_CAMEL , <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . to ( UPPER_CAMEL , <str> ) ) ; } public void testLowerCamelToUpperUnderscore ( ) { assertEquals ( <str> , LOWER_CAMEL . to ( UPPER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . to ( UPPER_UNDERSCORE , <str> ) ) ; } public void testUpperCamelToLowerHyphen ( ) { assertEquals ( <str> , UPPER_CAMEL . to ( LOWER_HYPHEN , <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . to ( LOWER_HYPHEN , <str> ) ) ; } public void testUpperCamelToLowerUnderscore ( ) { assertEquals ( <str> , UPPER_CAMEL . to ( LOWER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . to ( LOWER_UNDERSCORE , <str> ) ) ; } public void testUpperCamelToLowerCamel ( ) { assertEquals ( <str> , UPPER_CAMEL . to ( LOWER_CAMEL , <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . to ( LOWER_CAMEL , <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . to ( LOWER_CAMEL , <str> ) ) ; } public void testUpperCamelToUpperCamel ( ) { assertEquals ( <str> , UPPER_CAMEL . to ( UPPER_CAMEL , <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . to ( UPPER_CAMEL , <str> ) ) ; } public void testUpperCamelToUpperUnderscore ( ) { assertEquals ( <str> , UPPER_CAMEL . to ( UPPER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . to ( UPPER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . to ( UPPER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . to ( UPPER_UNDERSCORE , <str> ) ) ; } public void testUpperUnderscoreToLowerHyphen ( ) { assertEquals ( <str> , UPPER_UNDERSCORE . to ( LOWER_HYPHEN , <str> ) ) ; assertEquals ( <str> , UPPER_UNDERSCORE . to ( LOWER_HYPHEN , <str> ) ) ; } public void testUpperUnderscoreToLowerUnderscore ( ) { assertEquals ( <str> , UPPER_UNDERSCORE . to ( LOWER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , UPPER_UNDERSCORE . to ( LOWER_UNDERSCORE , <str> ) ) ; } public void testUpperUnderscoreToLowerCamel ( ) { assertEquals ( <str> , UPPER_UNDERSCORE . to ( LOWER_CAMEL , <str> ) ) ; assertEquals ( <str> , UPPER_UNDERSCORE . to ( LOWER_CAMEL , <str> ) ) ; } public void testUpperUnderscoreToUpperCamel ( ) { assertEquals ( <str> , UPPER_UNDERSCORE . to ( UPPER_CAMEL , <str> ) ) ; assertEquals ( <str> , UPPER_UNDERSCORE . to ( UPPER_CAMEL , <str> ) ) ; assertEquals ( <str> , UPPER_UNDERSCORE . to ( UPPER_CAMEL , <str> ) ) ; } public void testUpperUnderscoreToUpperUnderscore ( ) { assertEquals ( <str> , UPPER_UNDERSCORE . to ( UPPER_UNDERSCORE , <str> ) ) ; assertEquals ( <str> , UPPER_UNDERSCORE . to ( UPPER_UNDERSCORE , <str> ) ) ; } public void testConverterToForward ( ) { assertEquals ( <str> , UPPER_UNDERSCORE . converterTo ( UPPER_CAMEL ) . convert ( <str> ) ) ; assertEquals ( <str> , UPPER_UNDERSCORE . converterTo ( LOWER_CAMEL ) . convert ( <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . converterTo ( UPPER_UNDERSCORE ) . convert ( <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . converterTo ( UPPER_UNDERSCORE ) . convert ( <str> ) ) ; } public void testConverterToBackward ( ) { assertEquals ( <str> , UPPER_UNDERSCORE . converterTo ( UPPER_CAMEL ) . reverse ( ) . convert ( <str> ) ) ; assertEquals ( <str> , UPPER_UNDERSCORE . converterTo ( LOWER_CAMEL ) . reverse ( ) . convert ( <str> ) ) ; assertEquals ( <str> , UPPER_CAMEL . converterTo ( UPPER_UNDERSCORE ) . reverse ( ) . convert ( <str> ) ) ; assertEquals ( <str> , LOWER_CAMEL . converterTo ( UPPER_UNDERSCORE ) . reverse ( ) . convert ( <str> ) ) ; } public void testConverter_nullConversions ( ) { for ( CaseFormat outer : CaseFormat . values ( ) ) { for ( CaseFormat inner : CaseFormat . values ( ) ) { assertNull ( outer . converterTo ( inner ) . convert ( null ) ) ; assertNull ( outer . converterTo ( inner ) . reverse ( ) . convert ( null ) ) ; } } } public void testConverter_toString ( ) { assertEquals ( <str> , LOWER_HYPHEN . converterTo ( UPPER_CAMEL ) . toString ( ) ) ; } public void testConverter_serialization ( ) { for ( CaseFormat outer : CaseFormat . values ( ) ) { for ( CaseFormat inner : CaseFormat . values ( ) ) { SerializableTester . reserializeAndAssert ( outer . converterTo ( inner ) ) ; } } } } 

package io . netty . util . internal ; import java . util . concurrent . atomic . AtomicReferenceFieldUpdater ; abstract class MpscLinkedQueueTailRef < E > extends MpscLinkedQueuePad1 < E > { private static final long serialVersionUID = <int> ; @SuppressWarnings ( <str> ) private static final AtomicReferenceFieldUpdater < MpscLinkedQueueTailRef , MpscLinkedQueueNode > UPDATER ; static { @SuppressWarnings ( <str> ) AtomicReferenceFieldUpdater < MpscLinkedQueueTailRef , MpscLinkedQueueNode > updater ; updater = PlatformDependent . newAtomicReferenceFieldUpdater ( MpscLinkedQueueTailRef . class , <str> ) ; if ( updater = = null ) { updater = AtomicReferenceFieldUpdater . newUpdater ( MpscLinkedQueueTailRef . class , MpscLinkedQueueNode . class , <str> ) ; } UPDATER = updater ; } private transient volatile MpscLinkedQueueNode < E > tailRef ; protected final MpscLinkedQueueNode < E > tailRef ( ) { return tailRef ; } protected final void setTailRef ( MpscLinkedQueueNode < E > tailRef ) { this . tailRef = tailRef ; } @SuppressWarnings ( <str> ) protected final MpscLinkedQueueNode < E > getAndSetTailRef ( MpscLinkedQueueNode < E > tailRef ) { return ( MpscLinkedQueueNode < E > ) UPDATER . getAndSet ( this , tailRef ) ; } }
package org . elasticsearch . search . aggregations . metrics . percentiles ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . search . aggregations . AggregatorFactory ; import org . elasticsearch . search . aggregations . metrics . percentiles . hdr . HDRPercentilesAggregator ; import org . elasticsearch . search . aggregations . metrics . percentiles . tdigest . InternalTDigestPercentiles ; import org . elasticsearch . search . aggregations . metrics . percentiles . tdigest . TDigestPercentilesAggregator ; import org . elasticsearch . search . aggregations . support . ValuesSource . Numeric ; import org . elasticsearch . search . aggregations . support . ValuesSourceConfig ; import org . elasticsearch . search . internal . SearchContext ; public class PercentilesParser extends AbstractPercentilesParser { public static final ParseField PERCENTS_FIELD = new ParseField ( <str> ) ; public PercentilesParser ( ) { super ( true ) ; } private final static double [ ] DEFAULT_PERCENTS = new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; @Override public String type ( ) { return InternalTDigestPercentiles . TYPE . name ( ) ; } @Override protected ParseField keysField ( ) { return PERCENTS_FIELD ; } @Override protected AggregatorFactory buildFactory ( SearchContext context , String aggregationName , ValuesSourceConfig < Numeric > valuesSourceConfig , double [ ] keys , PercentilesMethod method , Double compression , Integer numberOfSignificantValueDigits , boolean keyed ) { if ( keys = = null ) { keys = DEFAULT_PERCENTS ; } if ( method = = PercentilesMethod . TDIGEST ) { return new TDigestPercentilesAggregator . Factory ( aggregationName , valuesSourceConfig , keys , compression , keyed ) ; } else if ( method = = PercentilesMethod . HDR ) { return new HDRPercentilesAggregator . Factory ( aggregationName , valuesSourceConfig , keys , numberOfSignificantValueDigits , keyed ) ; } else { throw new AssertionError ( ) ; } } } 

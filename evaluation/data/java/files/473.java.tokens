package com . google . common . io ; import static com . google . common . base . CharMatcher . WHITESPACE ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . base . Charsets ; import com . google . common . collect . ImmutableList ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestSuite ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . DataInputStream ; import java . io . File ; import java . io . IOException ; import java . io . PrintWriter ; import java . net . URL ; import java . net . URLClassLoader ; import java . util . ArrayList ; import java . util . List ; public class ResourcesTest extends IoTestCase { public static TestSuite suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( ByteSourceTester . tests ( <str> , SourceSinkFactories . urlByteSourceFactory ( ) , true ) ) ; suite . addTest ( CharSourceTester . tests ( <str> , SourceSinkFactories . urlCharSourceFactory ( ) , false ) ) ; suite . addTestSuite ( ResourcesTest . class ) ; return suite ; } public void testToString ( ) throws IOException { URL resource = getClass ( ) . getResource ( <str> ) ; assertEquals ( I18N , Resources . toString ( resource , Charsets . UTF_8 ) ) ; assertThat ( Resources . toString ( resource , Charsets . US_ASCII ) ) . isNotEqualTo ( I18N ) ; } public void testToToByteArray ( ) throws IOException { byte [ ] data = Resources . toByteArray ( classfile ( Resources . class ) ) ; assertEquals ( <hex> , new DataInputStream ( new ByteArrayInputStream ( data ) ) . readInt ( ) ) ; } public void testReadLines ( ) throws IOException { URL resource = getClass ( ) . getResource ( <str> ) ; assertEquals ( ImmutableList . of ( I18N ) , Resources . readLines ( resource , Charsets . UTF_8 ) ) ; } public void testReadLines_withLineProcessor ( ) throws IOException { URL resource = getClass ( ) . getResource ( <str> ) ; LineProcessor < List < String > > collectAndLowercaseAndTrim = new LineProcessor < List < String > > ( ) { List < String > collector = new ArrayList < String > ( ) ; @Override public boolean processLine ( String line ) { collector . add ( WHITESPACE . trimFrom ( line ) ) ; return true ; } @Override public List < String > getResult ( ) { return collector ; } } ; List < String > result = Resources . readLines ( resource , Charsets . US_ASCII , collectAndLowercaseAndTrim ) ; assertEquals ( <int> , result . size ( ) ) ; assertEquals ( <str> , result . get ( <int> ) ) ; assertEquals ( <str> , result . get ( result . size ( ) - <int> ) ) ; } public void testCopyToOutputStream ( ) throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; URL resource = getClass ( ) . getResource ( <str> ) ; Resources . copy ( resource , out ) ; assertEquals ( I18N , out . toString ( <str> ) ) ; } public void testGetResource_notFound ( ) { try { Resources . getResource ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { assertThat ( e ) . hasMessage ( <str> ) ; } } public void testGetResource ( ) { assertNotNull ( Resources . getResource ( <str> ) ) ; } public void testGetResource_relativePath_notFound ( ) { try { Resources . getResource ( getClass ( ) , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { assertThat ( e ) . hasMessage ( <str> + <str> ) ; } } public void testGetResource_relativePath ( ) { assertNotNull ( Resources . getResource ( getClass ( ) , <str> ) ) ; } public void testGetResource_contextClassLoader ( ) throws IOException { File tempFile = createTempFile ( ) ; PrintWriter writer = new PrintWriter ( tempFile , <str> ) ; writer . println ( <str> ) ; writer . close ( ) ; try { Resources . getResource ( tempFile . getName ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } URL baseUrl = tempFile . getParentFile ( ) . toURI ( ) . toURL ( ) ; URLClassLoader loader = new URLClassLoader ( new URL [ ] { baseUrl } ) ; ClassLoader oldContextLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; try { Thread . currentThread ( ) . setContextClassLoader ( loader ) ; URL url = Resources . getResource ( tempFile . getName ( ) ) ; String text = Resources . toString ( url , Charsets . UTF_8 ) ; assertEquals ( <str> , text ) ; } finally { Thread . currentThread ( ) . setContextClassLoader ( oldContextLoader ) ; } } public void testGetResource_contextClassLoaderNull ( ) { ClassLoader oldContextLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; try { Thread . currentThread ( ) . setContextClassLoader ( null ) ; assertNotNull ( Resources . getResource ( <str> ) ) ; try { Resources . getResource ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } finally { Thread . currentThread ( ) . setContextClassLoader ( oldContextLoader ) ; } } public void testNulls ( ) { new NullPointerTester ( ) . setDefault ( URL . class , classfile ( ResourcesTest . class ) ) . testAllPublicStaticMethods ( Resources . class ) ; } private static URL classfile ( Class < ? > c ) { return c . getResource ( c . getSimpleName ( ) + <str> ) ; } } 

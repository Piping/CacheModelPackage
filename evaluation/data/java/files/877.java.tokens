package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . Colors ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . BitmapFontCache ; import com . badlogic . gdx . graphics . g2d . GlyphLayout ; import com . badlogic . gdx . graphics . g2d . GlyphLayout . GlyphRun ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer . ShapeType ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Window ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Align ; import com . badlogic . gdx . utils . viewport . ScreenViewport ; public class BitmapFontTest extends GdxTest { private Stage stage ; private SpriteBatch spriteBatch ; private BitmapFont font ; private ShapeRenderer renderer ; private BitmapFont multiPageFont ; private GlyphLayout layout ; private Label label ; @Override public void create ( ) { spriteBatch = new SpriteBatch ( ) ; font = new BitmapFont ( Gdx . files . internal ( <str> ) , false ) ; font . getData ( ) . markupEnabled = true ; font . getData ( ) . breakChars = new char [ ] { <str> } ; multiPageFont = new BitmapFont ( Gdx . files . internal ( <str> ) ) ; Colors . put ( <str> , Color . valueOf ( <str> ) ) ; renderer = new ShapeRenderer ( ) ; renderer . setProjectionMatrix ( spriteBatch . getProjectionMatrix ( ) ) ; stage = new Stage ( new ScreenViewport ( ) ) ; Skin skin = new Skin ( Gdx . files . internal ( <str> ) ) ; BitmapFont labelFont = skin . get ( <str> , BitmapFont . class ) ; labelFont . getData ( ) . markupEnabled = true ; label = new Label ( <str> , skin ) ; label . setPosition ( <int> , <int> ) ; stage . addActor ( label ) ; Window window = new Window ( <str> , skin ) ; window . setPosition ( <int> , <int> ) ; window . pack ( ) ; stage . addActor ( window ) ; layout = new GlyphLayout ( ) ; } @Override public void render ( ) { int viewHeight = Gdx . graphics . getHeight ( ) ; Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; if ( ! true ) { BitmapFont font = this . font ; font . getRegion ( ) . getTexture ( ) . setFilter ( TextureFilter . Nearest , TextureFilter . Nearest ) ; font . getData ( ) . setScale ( <int> f ) ; renderer . begin ( ShapeRenderer . ShapeType . Line ) ; renderer . setColor ( <int> , <int> , <int> , <int> ) ; float w = Gdx . input . getX ( ) ; renderer . rect ( <int> , <int> , w , <int> ) ; renderer . end ( ) ; spriteBatch . begin ( ) ; String text = <str> ; text = <str> ; text = <str> ; if ( true ) { layout . setText ( font , text , <int> , text . length ( ) , font . getColor ( ) , w , Align . center , true , null ) ; } else { layout . setText ( font , text , <int> , text . length ( ) , font . getColor ( ) , w , Align . center , false , <str> ) ; } float meowy = ( <int> / <int> + layout . height / <int> + <int> ) ; font . draw ( spriteBatch , layout , <int> , <int> + meowy ) ; spriteBatch . end ( ) ; renderer . begin ( ShapeRenderer . ShapeType . Line ) ; renderer . setColor ( <int> , <int> , <int> , <int> ) ; for ( int i = <int> , n = layout . runs . size ; i < n ; i + + ) { GlyphRun r = layout . runs . get ( i ) ; renderer . rect ( <int> + r . x , <int> + meowy + r . y , r . width , - font . getLineHeight ( ) ) ; } renderer . end ( ) ; font . getData ( ) . setScale ( <int> f ) ; return ; } if ( true ) { label . debug ( ) ; label . getStyle ( ) . font = font ; label . setStyle ( label . getStyle ( ) ) ; label . setText ( <str> ) ; label . setWrap ( true ) ; label . setAlignment ( Align . center , Align . right ) ; label . setWidth ( Gdx . input . getX ( ) - label . getX ( ) ) ; label . setHeight ( label . getPrefHeight ( ) ) ; } else { spriteBatch . begin ( ) ; String text = <str> ; font . setColor ( Color . RED ) ; float x = <int> , y = <int> ; float alignmentWidth ; if ( false ) { alignmentWidth = <int> ; font . draw ( spriteBatch , text , x , viewHeight - y , alignmentWidth , Align . right , false ) ; } if ( true ) { alignmentWidth = <int> ; font . draw ( spriteBatch , text , x , viewHeight - y , alignmentWidth , Align . right , true ) ; } font . draw ( spriteBatch , <str> , <int> , <int> , <int> , Align . left , true ) ; font . getData ( ) . markupEnabled = true ; font . draw ( spriteBatch , <str> , <int> , <int> , <int> , Align . left , true ) ; font . getData ( ) . markupEnabled = false ; String txt2 = <str> + multiPageFont . getRegions ( ) . size + <str> ; spriteBatch . renderCalls = <int> ; multiPageFont . setColor ( Color . BLUE ) ; multiPageFont . draw ( spriteBatch , txt2 , <int> , <int> ) ; BitmapFontCache cache = multiPageFont . getCache ( ) ; cache . clear ( ) ; cache . setColor ( Color . BLACK ) ; cache . setText ( txt2 , <int> , <int> ) ; cache . setColors ( Color . PINK , <int> , <int> ) ; cache . setColors ( Color . ORANGE , <int> , <int> ) ; cache . setColors ( Color . GREEN , <int> , txt2 . length ( ) ) ; cache . draw ( spriteBatch , <int> , txt2 . length ( ) - <int> ) ; cache . clear ( ) ; cache . setColor ( Color . BLACK ) ; float textX = <int> ; textX + = cache . setText ( <str> , textX , <int> ) . width ; multiPageFont . getData ( ) . markupEnabled = true ; textX + = cache . addText ( <str> , textX , <int> ) . width ; textX + = cache . addText ( <str> , textX , <int> ) . width ; cache . setColor ( Color . GREEN ) ; textX + = cache . addText ( <str> , textX , <int> ) . width ; textX + = cache . addText ( <str> , textX , <int> ) . width ; multiPageFont . getData ( ) . markupEnabled = false ; cache . draw ( spriteBatch ) ; cache . tint ( new Color ( <int> f , <int> f , <int> f , <float> ) ) ; cache . translate ( <int> f , <int> f ) ; cache . draw ( spriteBatch ) ; spriteBatch . end ( ) ; renderer . begin ( ShapeType . Line ) ; renderer . setColor ( Color . BLACK ) ; renderer . rect ( x , viewHeight - y - <int> , alignmentWidth , <int> ) ; renderer . end ( ) ; } stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; } public void resize ( int width , int height ) { spriteBatch . getProjectionMatrix ( ) . setToOrtho2D ( <int> , <int> , width , height ) ; renderer . setProjectionMatrix ( spriteBatch . getProjectionMatrix ( ) ) ; stage . getViewport ( ) . update ( width , height , true ) ; } @Override public void dispose ( ) { spriteBatch . dispose ( ) ; renderer . dispose ( ) ; font . dispose ( ) ; Colors . reset ( ) ; } } 

package io . netty . testsuite . transport . socket ; import io . netty . bootstrap . Bootstrap ; import io . netty . buffer . ByteBufAllocator ; import io . netty . channel . ChannelOption ; import io . netty . testsuite . transport . AbstractTestsuiteTest ; import io . netty . testsuite . transport . TestsuitePermutation ; import io . netty . testsuite . util . TestUtils ; import io . netty . util . NetUtil ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; import java . util . List ; public abstract class AbstractClientSocketTest extends AbstractTestsuiteTest < Bootstrap > { protected volatile SocketAddress addr ; protected AbstractClientSocketTest ( ) { super ( Bootstrap . class ) ; } @Override protected List < TestsuitePermutation . BootstrapFactory < Bootstrap > > newFactories ( ) { return SocketTestPermutation . INSTANCE . clientSocket ( ) ; } @Override protected void configure ( Bootstrap bootstrap , ByteBufAllocator allocator ) { addr = newSocketAddress ( ) ; bootstrap . remoteAddress ( addr ) ; bootstrap . option ( ChannelOption . ALLOCATOR , allocator ) ; } protected SocketAddress newSocketAddress ( ) { return new InetSocketAddress ( NetUtil . LOCALHOST , TestUtils . getFreePort ( ) ) ; } }
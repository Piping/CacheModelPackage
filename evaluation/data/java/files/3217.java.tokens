package jcuda . utils ; import java . io . * ; import java . util . * ; import java . util . regex . Pattern ; import jcuda . CudaException ; public class FileIO { private FileIO ( ) { } public static float [ ] readFileFloat ( String filename ) { if ( filename = = null ) { throw new CudaException ( <str> ) ; } List < Float > values = new ArrayList < Float > ( ) ; try { Scanner scanner = new Scanner ( new File ( filename ) ) ; scanner . useDelimiter ( Pattern . compile ( <str> ) ) ; while ( scanner . hasNext ( ) ) { try { values . add ( Float . parseFloat ( scanner . next ( ) ) ) ; } catch ( NumberFormatException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } } scanner . close ( ) ; } catch ( FileNotFoundException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } float data [ ] = new float [ values . size ( ) ] ; for ( int i = <int> ; i < values . size ( ) ; i + + ) { data [ i ] = values . get ( i ) ; } return data ; } public static double [ ] readFileDouble ( String filename ) { if ( filename = = null ) { throw new CudaException ( <str> ) ; } List < Double > values = new ArrayList < Double > ( ) ; try { Scanner scanner = new Scanner ( new File ( filename ) ) ; scanner . useDelimiter ( Pattern . compile ( <str> ) ) ; while ( scanner . hasNext ( ) ) { try { values . add ( Double . parseDouble ( scanner . next ( ) ) ) ; } catch ( NumberFormatException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } } scanner . close ( ) ; } catch ( FileNotFoundException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } double data [ ] = new double [ values . size ( ) ] ; for ( int i = <int> ; i < values . size ( ) ; i + + ) { data [ i ] = values . get ( i ) ; } return data ; } public static int [ ] readFileInt ( String filename ) { if ( filename = = null ) { throw new CudaException ( <str> ) ; } List < Integer > values = new ArrayList < Integer > ( ) ; try { Scanner scanner = new Scanner ( new File ( filename ) ) ; scanner . useDelimiter ( Pattern . compile ( <str> ) ) ; while ( scanner . hasNext ( ) ) { try { values . add ( Integer . parseInt ( scanner . next ( ) ) ) ; } catch ( NumberFormatException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } } scanner . close ( ) ; } catch ( FileNotFoundException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } int data [ ] = new int [ values . size ( ) ] ; for ( int i = <int> ; i < values . size ( ) ; i + + ) { data [ i ] = values . get ( i ) ; } return data ; } public static byte [ ] readFileByte ( String filename ) { if ( filename = = null ) { throw new CudaException ( <str> ) ; } List < Byte > values = new ArrayList < Byte > ( ) ; try { Scanner scanner = new Scanner ( new File ( filename ) ) ; scanner . useDelimiter ( Pattern . compile ( <str> ) ) ; while ( scanner . hasNext ( ) ) { try { values . add ( Byte . parseByte ( scanner . next ( ) ) ) ; } catch ( InputMismatchException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } } scanner . close ( ) ; } catch ( FileNotFoundException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } byte data [ ] = new byte [ values . size ( ) ] ; for ( int i = <int> ; i < values . size ( ) ; i + + ) { data [ i ] = values . get ( i ) ; } return data ; } private static String arrayString ( Object array ) { StringBuffer sb = new StringBuffer ( ) ; if ( array instanceof float [ ] ) { float a [ ] = ( float [ ] ) array ; for ( int i = <int> ; i < a . length ; i + + ) { sb . append ( String . valueOf ( a [ i ] ) + <str> ) ; } } else if ( array instanceof double [ ] ) { double a [ ] = ( double [ ] ) array ; for ( int i = <int> ; i < a . length ; i + + ) { sb . append ( String . valueOf ( a [ i ] ) + <str> ) ; } } else if ( array instanceof int [ ] ) { int a [ ] = ( int [ ] ) array ; for ( int i = <int> ; i < a . length ; i + + ) { sb . append ( String . valueOf ( a [ i ] ) + <str> ) ; } } else if ( array instanceof byte [ ] ) { byte a [ ] = ( byte [ ] ) array ; for ( int i = <int> ; i < a . length ; i + + ) { sb . append ( String . valueOf ( a [ i ] ) + <str> ) ; } } return sb . toString ( ) ; } private static void writeFile ( String filename , Object data , String epsilonString ) { if ( filename = = null ) { throw new CudaException ( <str> ) ; } if ( data = = null ) { throw new CudaException ( <str> ) ; } BufferedWriter bw = null ; try { bw = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( filename ) ) ) ; bw . write ( <str> + epsilonString + <str> ) ; bw . write ( arrayString ( data ) ) ; bw . write ( <str> ) ; } catch ( FileNotFoundException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } catch ( IOException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } finally { if ( bw ! = null ) { try { bw . close ( ) ; } catch ( IOException e ) { throw new CudaException ( <str> + filename + <str> , e ) ; } } } } public static void writeFile ( String filename , float data [ ] , float epsilon ) { writeFile ( filename , data , String . valueOf ( epsilon ) ) ; } public static void writeFile ( String filename , double data [ ] , double epsilon ) { writeFile ( filename , data , String . valueOf ( epsilon ) ) ; } public static void writeFile ( String filename , int data [ ] ) { writeFile ( filename , data , <str> ) ; } public static void writeFile ( String filename , byte data [ ] ) { writeFile ( filename , data , <str> ) ; } public static String readFileAsString ( String filename ) { BufferedReader br = null ; try { br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( filename ) ) ) ; StringBuilder sb = new StringBuilder ( ) ; String line = null ; while ( true ) { line = br . readLine ( ) ; if ( line = = null ) { break ; } sb . append ( line + <str> ) ; } return sb . toString ( ) ; } catch ( FileNotFoundException e ) { throw new CudaException ( <str> + filename , e ) ; } catch ( IOException e ) { throw new CudaException ( <str> + filename , e ) ; } finally { if ( br ! = null ) { try { br . close ( ) ; } catch ( IOException ex ) { } } } } }
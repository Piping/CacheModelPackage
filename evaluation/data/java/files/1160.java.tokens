package com . netflix . hystrix . strategy . concurrency ; import java . util . concurrent . ConcurrentHashMap ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class HystrixRequestVariableHolder < T > { static final Logger logger = LoggerFactory . getLogger ( HystrixRequestVariableHolder . class ) ; private static ConcurrentHashMap < RVCacheKey , HystrixRequestVariable < ? > > requestVariableInstance = new ConcurrentHashMap < RVCacheKey , HystrixRequestVariable < ? > > ( ) ; private final HystrixRequestVariableLifecycle < T > lifeCycleMethods ; public HystrixRequestVariableHolder ( HystrixRequestVariableLifecycle < T > lifeCycleMethods ) { this . lifeCycleMethods = lifeCycleMethods ; } @SuppressWarnings ( <str> ) public T get ( HystrixConcurrencyStrategy concurrencyStrategy ) { RVCacheKey key = new RVCacheKey ( this , concurrencyStrategy ) ; HystrixRequestVariable < ? > rvInstance = requestVariableInstance . get ( key ) ; if ( rvInstance = = null ) { requestVariableInstance . putIfAbsent ( key , concurrencyStrategy . getRequestVariable ( lifeCycleMethods ) ) ; if ( requestVariableInstance . size ( ) > <int> ) { logger . warn ( <str> ) ; } } return ( T ) requestVariableInstance . get ( key ) . get ( ) ; } private static class RVCacheKey { private final HystrixRequestVariableHolder < ? > rvHolder ; private final HystrixConcurrencyStrategy concurrencyStrategy ; private RVCacheKey ( HystrixRequestVariableHolder < ? > rvHolder , HystrixConcurrencyStrategy concurrencyStrategy ) { this . rvHolder = rvHolder ; this . concurrencyStrategy = concurrencyStrategy ; } @Override public int hashCode ( ) { final int prime = <int> ; int result = <int> ; result = prime * result + ( ( concurrencyStrategy = = null ) ? <int> : concurrencyStrategy . hashCode ( ) ) ; result = prime * result + ( ( rvHolder = = null ) ? <int> : rvHolder . hashCode ( ) ) ; return result ; } @Override public boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; RVCacheKey other = ( RVCacheKey ) obj ; if ( concurrencyStrategy = = null ) { if ( other . concurrencyStrategy ! = null ) return false ; } else if ( ! concurrencyStrategy . equals ( other . concurrencyStrategy ) ) return false ; if ( rvHolder = = null ) { if ( other . rvHolder ! = null ) return false ; } else if ( ! rvHolder . equals ( other . rvHolder ) ) return false ; return true ; } } } 

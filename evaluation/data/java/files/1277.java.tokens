package org . gradle . build . docs . dsl . docbook ; import org . gradle . build . docs . dsl . docbook . model . ExtraAttributeDoc ; import org . gradle . build . docs . dsl . docbook . model . PropertyDoc ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; public class PropertyDetailRenderer { private final GenerationListener listener ; private final LinkRenderer linkRenderer ; private final ElementWarningsRenderer warningsRenderer = new ElementWarningsRenderer ( ) ; public PropertyDetailRenderer ( LinkRenderer linkRenderer , GenerationListener listener ) { this . linkRenderer = linkRenderer ; this . listener = listener ; } public void renderTo ( PropertyDoc propertyDoc , Element parent ) { Document document = parent . getOwnerDocument ( ) ; Element section = document . createElement ( <str> ) ; parent . appendChild ( section ) ; section . setAttribute ( <str> , propertyDoc . getId ( ) ) ; section . setAttribute ( <str> , <str> ) ; Element title = document . createElement ( <str> ) ; section . appendChild ( title ) ; title . appendChild ( linkRenderer . link ( propertyDoc . getMetaData ( ) . getType ( ) , listener ) ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; Element literal = document . createElement ( <str> ) ; title . appendChild ( literal ) ; literal . appendChild ( document . createTextNode ( propertyDoc . getName ( ) ) ) ; if ( ! propertyDoc . getMetaData ( ) . isWriteable ( ) ) { title . appendChild ( document . createTextNode ( <str> ) ) ; } warningsRenderer . renderTo ( propertyDoc , <str> , section ) ; for ( Element element : propertyDoc . getComment ( ) ) { section . appendChild ( document . importNode ( element , true ) ) ; } if ( ! propertyDoc . getAdditionalValues ( ) . isEmpty ( ) ) { Element segmentedlist = document . createElement ( <str> ) ; section . appendChild ( segmentedlist ) ; for ( ExtraAttributeDoc attributeDoc : propertyDoc . getAdditionalValues ( ) ) { Element segtitle = document . createElement ( <str> ) ; segmentedlist . appendChild ( segtitle ) ; for ( Node node : attributeDoc . getTitle ( ) ) { segtitle . appendChild ( document . importNode ( node , true ) ) ; } } Element seglistitem = document . createElement ( <str> ) ; segmentedlist . appendChild ( seglistitem ) ; for ( ExtraAttributeDoc attributeDoc : propertyDoc . getAdditionalValues ( ) ) { Element seg = document . createElement ( <str> ) ; seglistitem . appendChild ( seg ) ; for ( Node node : attributeDoc . getValue ( ) ) { seg . appendChild ( document . importNode ( node , true ) ) ; } } } } } 

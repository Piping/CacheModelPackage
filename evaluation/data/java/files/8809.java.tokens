package org . eclipse . debug . internal . ui . importexport . breakpoints ; import java . util . List ; import org . eclipse . core . resources . IMarker ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . dialogs . IDialogSettings ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . wizard . Wizard ; import org . eclipse . ui . IImportWizard ; import org . eclipse . ui . IWorkbench ; public class WizardImportBreakpoints extends Wizard implements IImportWizard { private WizardImportBreakpointsPage fMainPage ; private WizardImportBreakpointsSelectionPage fSelectionPage ; private static final String IMPORT_DIALOG_SETTINGS = <str> ; public WizardImportBreakpoints ( ) { super ( ) ; DebugUIPlugin plugin = DebugUIPlugin . getDefault ( ) ; IDialogSettings workbenchSettings = plugin . getDialogSettings ( ) ; IDialogSettings section = workbenchSettings . getSection ( IMPORT_DIALOG_SETTINGS ) ; if ( section = = null ) { section = workbenchSettings . addNewSection ( IMPORT_DIALOG_SETTINGS ) ; } setDialogSettings ( section ) ; } @Override public void addPages ( ) { super . addPages ( ) ; fMainPage = new WizardImportBreakpointsPage ( ImportExportMessages . WizardImportBreakpoints_0 ) ; addPage ( fMainPage ) ; fSelectionPage = new WizardImportBreakpointsSelectionPage ( ImportExportMessages . WizardImportBreakpointsSelectionPage_0 ) ; addPage ( fSelectionPage ) ; } @Override public void dispose ( ) { super . dispose ( ) ; fMainPage = null ; } @Override public boolean performFinish ( ) { List < IMarker > selectedBreakpoints = fSelectionPage . getSelectedMarkers ( ) ; return fMainPage . finish ( selectedBreakpoints ) ; } @Override public void init ( IWorkbench workbench , IStructuredSelection selection ) { setWindowTitle ( ImportExportMessages . WizardImportBreakpoints_0 ) ; setNeedsProgressMonitor ( true ) ; } @Override public boolean needsProgressMonitor ( ) { return true ; } }
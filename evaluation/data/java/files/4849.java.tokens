package io . netty . handler . codec . socksx . v4 ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import org . junit . Test ; import java . util . Arrays ; import static org . junit . Assert . * ; public class Socks4ServerDecoderTest { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( Socks4ServerDecoderTest . class ) ; private static void test ( String userId , Socks4CommandType type , String dstAddr , int dstPort ) { logger . debug ( <str> + type + <str> + dstAddr + <str> + dstPort + <str> + userId ) ; Socks4CommandRequest msg = new DefaultSocks4CommandRequest ( type , dstAddr , dstPort , userId ) ; EmbeddedChannel embedder = new EmbeddedChannel ( new Socks4ServerDecoder ( ) ) ; Socks4CommonTestUtils . writeMessageIntoEmbedder ( embedder , msg ) ; msg = embedder . readInbound ( ) ; assertSame ( msg . type ( ) , type ) ; assertEquals ( msg . dstAddr ( ) , dstAddr ) ; assertEquals ( msg . dstPort ( ) , dstPort ) ; assertEquals ( msg . userId ( ) , userId ) ; assertNull ( embedder . readInbound ( ) ) ; } @Test public void testCmdRequestDecoder ( ) { String [ ] hosts = { <str> , } ; String [ ] userIds = { <str> , } ; int [ ] ports = { <int> , <int> , <int> } ; for ( Socks4CommandType cmdType : Arrays . asList ( Socks4CommandType . BIND , Socks4CommandType . CONNECT ) ) { for ( String userId : userIds ) { for ( String host : hosts ) { for ( int port : ports ) { test ( userId , cmdType , host , port ) ; } } } } } }
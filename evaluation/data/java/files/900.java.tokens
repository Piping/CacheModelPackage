package org . eclipse . debug . internal . ui . launchConfigurations ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . help . HelpSystem ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . viewers . DecoratingLabelProvider ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . TreeViewer ; import org . eclipse . jface . viewers . ViewerFilter ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . HelpEvent ; import org . eclipse . swt . events . HelpListener ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . FilteredTree ; import org . eclipse . ui . dialogs . PatternFilter ; import org . eclipse . ui . model . WorkbenchViewerComparator ; public final class LaunchConfigurationFilteredTree extends FilteredTree { private ILaunchGroup fLaunchGroup = null ; private ViewerFilter [ ] fFilters = null ; private int fTreeStyle = - <int> ; private PatternFilter fPatternFilter = null ; public LaunchConfigurationFilteredTree ( Composite parent , int treeStyle , PatternFilter filter , ILaunchGroup group , ViewerFilter [ ] filters ) { super ( parent , treeStyle , filter , true ) ; fLaunchGroup = group ; fFilters = filters ; fPatternFilter = filter ; fTreeStyle = treeStyle ; } @Override protected TreeViewer doCreateTreeViewer ( Composite cparent , int style ) { treeViewer = new LaunchConfigurationViewer ( cparent , style ) ; treeViewer . setLabelProvider ( new DecoratingLabelProvider ( DebugUITools . newDebugModelPresentation ( ) , PlatformUI . getWorkbench ( ) . getDecoratorManager ( ) . getLabelDecorator ( ) ) ) ; treeViewer . setComparator ( new WorkbenchViewerComparator ( ) ) ; treeViewer . setContentProvider ( new LaunchConfigurationTreeContentProvider ( fLaunchGroup . getMode ( ) , cparent . getShell ( ) ) ) ; treeViewer . addFilter ( new LaunchGroupFilter ( fLaunchGroup ) ) ; treeViewer . setUseHashlookup ( true ) ; treeViewer . setInput ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ) ; if ( fFilters ! = null ) { for ( int i = <int> ; i < fFilters . length ; i + + ) { treeViewer . addFilter ( fFilters [ i ] ) ; } } treeViewer . getControl ( ) . addHelpListener ( new HelpListener ( ) { @Override public void helpRequested ( HelpEvent evt ) { handleHelpRequest ( evt ) ; } } ) ; return treeViewer ; } @Override protected void createControl ( Composite cparent , int treeStyle ) { super . createControl ( cparent , treeStyle ) ; setBackground ( cparent . getDisplay ( ) . getSystemColor ( SWT . COLOR_LIST_BACKGROUND ) ) ; } @Override protected void init ( int treeStyle , PatternFilter filter ) { } public void createViewControl ( ) { super . init ( fTreeStyle , fPatternFilter ) ; } protected void handleHelpRequest ( HelpEvent evt ) { if ( getViewer ( ) . getTree ( ) ! = evt . getSource ( ) ) { return ; } String id = computeContextId ( ) ; if ( id = = null | | HelpSystem . getContext ( id ) = = null ) { id = IDebugHelpContextIds . LAUNCH_CONFIGURATION_VIEW ; } PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . displayHelp ( id ) ; } @Override protected void textChanged ( ) { LaunchConfigurationsDialog dialog = ( LaunchConfigurationsDialog ) LaunchConfigurationsDialog . getCurrentlyVisibleLaunchConfigurationDialog ( ) ; if ( dialog = = null ) { return ; } LaunchConfigurationTabGroupViewer viewer = dialog . getTabViewer ( ) ; if ( viewer = = null ) { return ; } if ( viewer . isDirty ( ) ) { String text = getFilterString ( ) ; if ( text . equals ( IInternalDebugCoreConstants . EMPTY_STRING ) ) { getPatternFilter ( ) . setPattern ( null ) ; getViewer ( ) . refresh ( ) ; return ; } else if ( text . equals ( getInitialText ( ) ) ) { return ; } String message = LaunchConfigurationsMessages . LaunchConfigurationFilteredTree_search_with_errors ; String title = LaunchConfigurationsMessages . LaunchConfigurationFilteredTree_discard_changes ; boolean cansave = viewer . canSave ( ) ; if ( cansave ) { message = LaunchConfigurationsMessages . LaunchConfigurationFilteredTree_search_with_changes ; title = LaunchConfigurationsMessages . LaunchConfigurationFilteredTree_save_changes ; } if ( MessageDialog . openQuestion ( getShell ( ) , title , message ) ) { if ( cansave ) { viewer . handleApplyPressed ( ) ; } else { viewer . handleRevertPressed ( ) ; } super . textChanged ( ) ; } else { clearText ( ) ; } } else { super . textChanged ( ) ; } } public String computeContextId ( ) { try { ISelection selection = getViewer ( ) . getSelection ( ) ; if ( ! selection . isEmpty ( ) & & selection instanceof IStructuredSelection ) { IStructuredSelection structuredSelection = ( IStructuredSelection ) selection ; Object firstSelected = structuredSelection . getFirstElement ( ) ; ILaunchConfigurationType configType = null ; if ( firstSelected instanceof ILaunchConfigurationType ) { configType = ( ILaunchConfigurationType ) firstSelected ; } else if ( firstSelected instanceof ILaunchConfiguration ) { configType = ( ( ILaunchConfiguration ) firstSelected ) . getType ( ) ; } if ( configType ! = null ) { String helpContextId = LaunchConfigurationPresentationManager . getDefault ( ) . getHelpContext ( configType , fLaunchGroup . getMode ( ) ) ; if ( helpContextId ! = null ) { return helpContextId ; } } } } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } return null ; } public LaunchConfigurationViewer getLaunchConfigurationViewer ( ) { return ( LaunchConfigurationViewer ) getViewer ( ) ; } @Override protected void updateToolbar ( boolean visible ) { super . updateToolbar ( visible ) ; getLaunchConfigurationViewer ( ) . filterChanged ( ) ; } } 

package com . badlogic . gdx . scenes . scene2d . utils ; import com . badlogic . gdx . Input . Buttons ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . Touchable ; import com . badlogic . gdx . scenes . scene2d . ui . ScrollPane ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . ObjectMap ; import com . badlogic . gdx . utils . ObjectMap . Entry ; public class DragAndDrop { static final Vector2 tmpVector = new Vector2 ( ) ; Payload payload ; Actor dragActor ; Target target ; boolean isValidTarget ; Array < Target > targets = new Array ( ) ; ObjectMap < Source , DragListener > sourceListeners = new ObjectMap ( ) ; private float tapSquareSize = <int> ; private int button ; float dragActorX = <int> , dragActorY = - <int> ; float touchOffsetX , touchOffsetY ; long dragStartTime ; int dragTime = <int> ; int activePointer = - <int> ; boolean cancelTouchFocus = true ; boolean keepWithinStage = true ; public void addSource ( final Source source ) { DragListener listener = new DragListener ( ) { public void dragStart ( InputEvent event , float x , float y , int pointer ) { if ( activePointer ! = - <int> ) { event . stop ( ) ; return ; } activePointer = pointer ; dragStartTime = System . currentTimeMillis ( ) ; payload = source . dragStart ( event , getTouchDownX ( ) , getTouchDownY ( ) , pointer ) ; event . stop ( ) ; if ( cancelTouchFocus & & payload ! = null ) source . getActor ( ) . getStage ( ) . cancelTouchFocusExcept ( this , source . getActor ( ) ) ; } public void drag ( InputEvent event , float x , float y , int pointer ) { if ( payload = = null ) return ; if ( pointer ! = activePointer ) return ; Stage stage = event . getStage ( ) ; Touchable dragActorTouchable = null ; if ( dragActor ! = null ) { dragActorTouchable = dragActor . getTouchable ( ) ; dragActor . setTouchable ( Touchable . disabled ) ; } Target newTarget = null ; isValidTarget = false ; float stageX = event . getStageX ( ) + touchOffsetX , stageY = event . getStageY ( ) + touchOffsetY ; Actor hit = event . getStage ( ) . hit ( stageX , stageY , true ) ; if ( hit = = null ) hit = event . getStage ( ) . hit ( stageX , stageY , false ) ; if ( hit ! = null ) { for ( int i = <int> , n = targets . size ; i < n ; i + + ) { Target target = targets . get ( i ) ; if ( ! target . actor . isAscendantOf ( hit ) ) continue ; newTarget = target ; target . actor . stageToLocalCoordinates ( tmpVector . set ( stageX , stageY ) ) ; break ; } } if ( newTarget ! = target ) { if ( target ! = null ) target . reset ( source , payload ) ; target = newTarget ; } if ( newTarget ! = null ) { isValidTarget = newTarget . drag ( source , payload , tmpVector . x , tmpVector . y , pointer ) ; } if ( dragActor ! = null ) dragActor . setTouchable ( dragActorTouchable ) ; Actor actor = null ; if ( target ! = null ) actor = isValidTarget ? payload . validDragActor : payload . invalidDragActor ; if ( actor = = null ) actor = payload . dragActor ; if ( actor = = null ) return ; if ( dragActor ! = actor ) { if ( dragActor ! = null ) dragActor . remove ( ) ; dragActor = actor ; stage . addActor ( actor ) ; } float actorX = event . getStageX ( ) + dragActorX ; float actorY = event . getStageY ( ) + dragActorY - actor . getHeight ( ) ; if ( keepWithinStage ) { if ( actorX < <int> ) actorX = <int> ; if ( actorY < <int> ) actorY = <int> ; if ( actorX + actor . getWidth ( ) > stage . getWidth ( ) ) actorX = stage . getWidth ( ) - actor . getWidth ( ) ; if ( actorY + actor . getHeight ( ) > stage . getHeight ( ) ) actorY = stage . getHeight ( ) - actor . getHeight ( ) ; } actor . setPosition ( actorX , actorY ) ; } public void dragStop ( InputEvent event , float x , float y , int pointer ) { if ( pointer ! = activePointer ) return ; activePointer = - <int> ; if ( payload = = null ) return ; if ( System . currentTimeMillis ( ) - dragStartTime < dragTime ) isValidTarget = false ; if ( dragActor ! = null ) dragActor . remove ( ) ; if ( isValidTarget ) { float stageX = event . getStageX ( ) + touchOffsetX , stageY = event . getStageY ( ) + touchOffsetY ; target . actor . stageToLocalCoordinates ( tmpVector . set ( stageX , stageY ) ) ; target . drop ( source , payload , tmpVector . x , tmpVector . y , pointer ) ; } source . dragStop ( event , x , y , pointer , payload , isValidTarget ? target : null ) ; if ( target ! = null ) target . reset ( source , payload ) ; payload = null ; target = null ; isValidTarget = false ; dragActor = null ; } } ; listener . setTapSquareSize ( tapSquareSize ) ; listener . setButton ( button ) ; source . actor . addCaptureListener ( listener ) ; sourceListeners . put ( source , listener ) ; } public void removeSource ( Source source ) { DragListener dragListener = sourceListeners . remove ( source ) ; source . actor . removeCaptureListener ( dragListener ) ; } public void addTarget ( Target target ) { targets . add ( target ) ; } public void removeTarget ( Target target ) { targets . removeValue ( target , true ) ; } public void clear ( ) { targets . clear ( ) ; for ( Entry < Source , DragListener > entry : sourceListeners . entries ( ) ) entry . key . actor . removeCaptureListener ( entry . value ) ; sourceListeners . clear ( ) ; } public void setTapSquareSize ( float halfTapSquareSize ) { tapSquareSize = halfTapSquareSize ; } public void setButton ( int button ) { this . button = button ; } public void setDragActorPosition ( float dragActorX , float dragActorY ) { this . dragActorX = dragActorX ; this . dragActorY = dragActorY ; } public void setTouchOffset ( float touchOffsetX , float touchOffsetY ) { this . touchOffsetX = touchOffsetX ; this . touchOffsetY = touchOffsetY ; } public boolean isDragging ( ) { return payload ! = null ; } public Actor getDragActor ( ) { return dragActor ; } public void setDragTime ( int dragMillis ) { this . dragTime = dragMillis ; } public void setCancelTouchFocus ( boolean cancelTouchFocus ) { this . cancelTouchFocus = cancelTouchFocus ; } public void setKeepWithinStage ( boolean keepWithinStage ) { this . keepWithinStage = keepWithinStage ; } static abstract public class Source { final Actor actor ; public Source ( Actor actor ) { if ( actor = = null ) throw new IllegalArgumentException ( <str> ) ; this . actor = actor ; } abstract public Payload dragStart ( InputEvent event , float x , float y , int pointer ) ; public void dragStop ( InputEvent event , float x , float y , int pointer , Payload payload , Target target ) { } public Actor getActor ( ) { return actor ; } } static abstract public class Target { final Actor actor ; public Target ( Actor actor ) { if ( actor = = null ) throw new IllegalArgumentException ( <str> ) ; this . actor = actor ; Stage stage = actor . getStage ( ) ; if ( stage ! = null & & actor = = stage . getRoot ( ) ) throw new IllegalArgumentException ( <str> ) ; } abstract public boolean drag ( Source source , Payload payload , float x , float y , int pointer ) ; public void reset ( Source source , Payload payload ) { } abstract public void drop ( Source source , Payload payload , float x , float y , int pointer ) ; public Actor getActor ( ) { return actor ; } } static public class Payload { Actor dragActor , validDragActor , invalidDragActor ; Object object ; public void setDragActor ( Actor dragActor ) { this . dragActor = dragActor ; } public Actor getDragActor ( ) { return dragActor ; } public void setValidDragActor ( Actor validDragActor ) { this . validDragActor = validDragActor ; } public Actor getValidDragActor ( ) { return validDragActor ; } public void setInvalidDragActor ( Actor invalidDragActor ) { this . invalidDragActor = invalidDragActor ; } public Actor getInvalidDragActor ( ) { return invalidDragActor ; } public Object getObject ( ) { return object ; } public void setObject ( Object object ) { this . object = object ; } } }
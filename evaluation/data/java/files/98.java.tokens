package io . netty . handler . codec . http2 ; import io . netty . buffer . ByteBuf ; public interface Http2Connection { interface Listener { void onStreamAdded ( Http2Stream stream ) ; void onStreamActive ( Http2Stream stream ) ; void onStreamHalfClosed ( Http2Stream stream ) ; void onStreamClosed ( Http2Stream stream ) ; void onStreamRemoved ( Http2Stream stream ) ; void onPriorityTreeParentChanged ( Http2Stream stream , Http2Stream oldParent ) ; void onPriorityTreeParentChanging ( Http2Stream stream , Http2Stream newParent ) ; void onWeightChanged ( Http2Stream stream , short oldWeight ) ; void onGoAwaySent ( int lastStreamId , long errorCode , ByteBuf debugData ) ; void onGoAwayReceived ( int lastStreamId , long errorCode , ByteBuf debugData ) ; } interface Endpoint < F extends Http2FlowController > { int nextStreamId ( ) ; boolean isValidStreamId ( int streamId ) ; boolean mayHaveCreatedStream ( int streamId ) ; boolean created ( Http2Stream stream ) ; boolean isExhausted ( ) ; boolean canOpenStream ( ) ; Http2Stream createIdleStream ( int streamId ) throws Http2Exception ; Http2Stream createStream ( int streamId , boolean halfClosed ) throws Http2Exception ; Http2Stream reservePushStream ( int streamId , Http2Stream parent ) throws Http2Exception ; boolean isServer ( ) ; void allowPushTo ( boolean allow ) ; boolean allowPushTo ( ) ; int numActiveStreams ( ) ; int maxActiveStreams ( ) ; void maxActiveStreams ( int maxActiveStreams ) ; int lastStreamCreated ( ) ; int lastStreamKnownByPeer ( ) ; F flowController ( ) ; void flowController ( F flowController ) ; Endpoint < ? extends Http2FlowController > opposite ( ) ; } interface PropertyKey { } PropertyKey newKey ( ) ; void addListener ( Listener listener ) ; void removeListener ( Listener listener ) ; Http2Stream stream ( int streamId ) ; boolean streamMayHaveExisted ( int streamId ) ; Http2Stream connectionStream ( ) ; int numActiveStreams ( ) ; Http2Stream forEachActiveStream ( Http2StreamVisitor visitor ) throws Http2Exception ; boolean isServer ( ) ; Endpoint < Http2LocalFlowController > local ( ) ; Endpoint < Http2RemoteFlowController > remote ( ) ; boolean goAwayReceived ( ) ; void goAwayReceived ( int lastKnownStream , long errorCode , ByteBuf message ) ; boolean goAwaySent ( ) ; void goAwaySent ( int lastKnownStream , long errorCode , ByteBuf message ) ; } 

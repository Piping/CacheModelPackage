package org . junit . tests . assertion ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . instanceOf ; import static org . hamcrest . CoreMatchers . is ; import static org . junit . Assert . assertArrayEquals ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertNotEquals ; import static org . junit . Assert . assertNotSame ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertSame ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . expectThrows ; import static org . junit . Assert . fail ; import java . io . IOException ; import java . math . BigDecimal ; import org . junit . Assert ; import org . junit . Assert . ThrowingRunnable ; import org . junit . ComparisonFailure ; import org . junit . Test ; import org . junit . internal . ArrayComparisonFailure ; public class AssertionTest { @Test ( expected = AssertionError . class ) public void fails ( ) { Assert . fail ( ) ; } @Test public void failWithNoMessageToString ( ) { try { Assert . fail ( ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . toString ( ) ) ; } } @Test public void failWithMessageToString ( ) { try { Assert . fail ( <str> ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . toString ( ) ) ; } } @Test ( expected = AssertionError . class ) public void arraysNotEqual ( ) { assertArrayEquals ( ( new Object [ ] { new Object ( ) } ) , ( new Object [ ] { new Object ( ) } ) ) ; } @Test ( expected = AssertionError . class ) public void arraysNotEqualWithMessage ( ) { assertArrayEquals ( <str> , ( new Object [ ] { new Object ( ) } ) , ( new Object [ ] { new Object ( ) } ) ) ; } @Test public void arraysExpectedNullMessage ( ) { try { assertArrayEquals ( <str> , null , ( new Object [ ] { new Object ( ) } ) ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void arraysActualNullMessage ( ) { try { assertArrayEquals ( <str> , ( new Object [ ] { new Object ( ) } ) , null ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void arraysDifferentLengthMessage ( ) { try { assertArrayEquals ( <str> , ( new Object [ <int> ] ) , ( new Object [ <int> ] ) ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test ( expected = ArrayComparisonFailure . class ) public void arraysElementsDiffer ( ) { assertArrayEquals ( <str> , ( new Object [ ] { <str> } ) , ( new Object [ ] { <str> } ) ) ; } @Test public void arraysDifferAtElement0nullMessage ( ) { try { assertArrayEquals ( ( new Object [ ] { true } ) , ( new Object [ ] { false } ) ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void arraysDifferAtElement1nullMessage ( ) { try { assertArrayEquals ( ( new Object [ ] { true , true } ) , ( new Object [ ] { true , false } ) ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void arraysDifferAtElement0withMessage ( ) { try { assertArrayEquals ( <str> , ( new Object [ ] { true } ) , ( new Object [ ] { false } ) ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void arraysDifferAtElement1withMessage ( ) { try { assertArrayEquals ( <str> , ( new Object [ ] { true , true } ) , ( new Object [ ] { true , false } ) ) ; fail ( ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void multiDimensionalArraysAreEqual ( ) { assertArrayEquals ( ( new Object [ ] [ ] { { true , true } , { false , false } } ) , ( new Object [ ] [ ] { { true , true } , { false , false } } ) ) ; } @Test public void multiDimensionalIntArraysAreEqual ( ) { int [ ] [ ] int1 = { { <int> , <int> , <int> } , { <int> , <int> , <int> } } ; int [ ] [ ] int2 = { { <int> , <int> , <int> } , { <int> , <int> , <int> } } ; assertArrayEquals ( int1 , int2 ) ; } @Test public void oneDimensionalPrimitiveArraysAreEqual ( ) { assertArrayEquals ( new boolean [ ] { true } , new boolean [ ] { true } ) ; assertArrayEquals ( new byte [ ] { <int> } , new byte [ ] { <int> } ) ; assertArrayEquals ( new char [ ] { <int> } , new char [ ] { <int> } ) ; assertArrayEquals ( new short [ ] { <int> } , new short [ ] { <int> } ) ; assertArrayEquals ( new int [ ] { <int> } , new int [ ] { <int> } ) ; assertArrayEquals ( new long [ ] { <int> } , new long [ ] { <int> } ) ; assertArrayEquals ( new double [ ] { <float> } , new double [ ] { <float> } , <float> ) ; assertArrayEquals ( new float [ ] { <float> } , new float [ ] { <float> } , <float> ) ; } @Test ( expected = AssertionError . class ) public void oneDimensionalDoubleArraysAreNotEqual ( ) { assertArrayEquals ( new double [ ] { <float> } , new double [ ] { <float> } , <float> ) ; } @Test ( expected = AssertionError . class ) public void oneDimensionalFloatArraysAreNotEqual ( ) { assertArrayEquals ( new float [ ] { <float> } , new float [ ] { <float> } , <float> ) ; } @Test ( expected = AssertionError . class ) public void oneDimensionalBooleanArraysAreNotEqual ( ) { assertArrayEquals ( new boolean [ ] { true } , new boolean [ ] { false } ) ; } @Test ( expected = AssertionError . class ) public void IntegerDoesNotEqualLong ( ) { assertEquals ( new Integer ( <int> ) , new Long ( <int> ) ) ; } @Test public void intsEqualLongs ( ) { assertEquals ( <int> , <int> ) ; } @Test public void multiDimensionalArraysDeclaredAsOneDimensionalAreEqual ( ) { assertArrayEquals ( ( new Object [ ] { new Object [ ] { true , true } , new Object [ ] { false , false } } ) , ( new Object [ ] { new Object [ ] { true , true } , new Object [ ] { false , false } } ) ) ; } @Test public void multiDimensionalArraysAreNotEqual ( ) { try { assertArrayEquals ( <str> , ( new Object [ ] [ ] { { true , true } , { false , false } } ) , ( new Object [ ] [ ] { { true , true } , { true , false } } ) ) ; fail ( ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void multiDimensionalArraysAreNotEqualNoMessage ( ) { try { assertArrayEquals ( ( new Object [ ] [ ] { { true , true } , { false , false } } ) , ( new Object [ ] [ ] { { true , true } , { true , false } } ) ) ; fail ( ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void multiDimensionalArraysDifferentLengthMessage ( ) { try { assertArrayEquals ( <str> , new Object [ ] [ ] { { true , true } , { false , false } } , new Object [ ] [ ] { { true , true } , { false } } ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; return ; } fail ( <str> ) ; } @Test public void multiDimensionalArraysDifferentLengthNoMessage ( ) { try { assertArrayEquals ( new Object [ ] [ ] { { true , true } , { false , false } } , new Object [ ] [ ] { { true , true } , { false } } ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; return ; } fail ( <str> ) ; } @Test public void arraysWithNullElementEqual ( ) { Object [ ] objects1 = new Object [ ] { null } ; Object [ ] objects2 = new Object [ ] { null } ; assertArrayEquals ( objects1 , objects2 ) ; } @Test public void stringsDifferWithUserMessage ( ) { try { assertEquals ( <str> , <str> , <str> ) ; } catch ( Throwable exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void arraysEqual ( ) { Object element = new Object ( ) ; Object [ ] objects1 = new Object [ ] { element } ; Object [ ] objects2 = new Object [ ] { element } ; assertArrayEquals ( objects1 , objects2 ) ; } @Test public void arraysEqualWithMessage ( ) { Object element = new Object ( ) ; Object [ ] objects1 = new Object [ ] { element } ; Object [ ] objects2 = new Object [ ] { element } ; assertArrayEquals ( <str> , objects1 , objects2 ) ; } @Test public void equals ( ) { Object o = new Object ( ) ; assertEquals ( o , o ) ; assertEquals ( <str> , <str> ) ; assertEquals ( true , true ) ; assertEquals ( ( byte ) <int> , ( byte ) <int> ) ; assertEquals ( <str> , <str> ) ; assertEquals ( ( short ) <int> , ( short ) <int> ) ; assertEquals ( <int> , <int> ) ; assertEquals ( <int> l , <int> l ) ; assertEquals ( <float> , <float> , <float> ) ; assertEquals ( <float> , <float> , <float> ) ; } @Test ( expected = AssertionError . class ) public void notEqualsObjectWithNull ( ) { assertEquals ( new Object ( ) , null ) ; } @Test ( expected = AssertionError . class ) public void notEqualsNullWithObject ( ) { assertEquals ( null , new Object ( ) ) ; } @Test public void notEqualsObjectWithNullWithMessage ( ) { Object o = new Object ( ) ; try { assertEquals ( <str> , null , o ) ; fail ( ) ; } catch ( AssertionError e ) { assertEquals ( <str> + o . toString ( ) + <str> , e . getMessage ( ) ) ; } } @Test public void notEqualsNullWithObjectWithMessage ( ) { Object o = new Object ( ) ; try { assertEquals ( <str> , o , null ) ; fail ( ) ; } catch ( AssertionError e ) { assertEquals ( <str> + o . toString ( ) + <str> , e . getMessage ( ) ) ; } } @Test ( expected = AssertionError . class ) public void objectsNotEquals ( ) { assertEquals ( new Object ( ) , new Object ( ) ) ; } @Test ( expected = ComparisonFailure . class ) public void stringsNotEqual ( ) { assertEquals ( <str> , <str> ) ; } @Test ( expected = AssertionError . class ) public void booleansNotEqual ( ) { assertEquals ( true , false ) ; } @Test ( expected = AssertionError . class ) public void bytesNotEqual ( ) { assertEquals ( ( byte ) <int> , ( byte ) <int> ) ; } @Test ( expected = AssertionError . class ) public void charsNotEqual ( ) { assertEquals ( <str> , <str> ) ; } @Test ( expected = AssertionError . class ) public void shortsNotEqual ( ) { assertEquals ( ( short ) <int> , ( short ) <int> ) ; } @Test ( expected = AssertionError . class ) public void intsNotEqual ( ) { assertEquals ( <int> , <int> ) ; } @Test ( expected = AssertionError . class ) public void longsNotEqual ( ) { assertEquals ( <int> l , <int> l ) ; } @Test ( expected = AssertionError . class ) public void floatsNotEqual ( ) { assertEquals ( <float> , <float> , <float> ) ; } @SuppressWarnings ( <str> ) @Test ( expected = AssertionError . class ) public void floatsNotEqualWithoutDelta ( ) { assertEquals ( <float> , <float> ) ; } @Test public void floatsNotDoublesInArrays ( ) { float delta = <float> ; float [ ] f1 = new float [ ] { <float> } ; float [ ] f2 = new float [ ] { <float> } ; Assert . assertArrayEquals ( f1 , f2 , delta ) ; } @Test ( expected = AssertionError . class ) public void bigDecimalsNotEqual ( ) { assertEquals ( new BigDecimal ( <str> ) , new BigDecimal ( <str> ) ) ; } @Test ( expected = AssertionError . class ) public void doublesNotEqual ( ) { assertEquals ( <float> , <float> , <float> ) ; } @Test public void naNsAreEqual ( ) { assertEquals ( Float . NaN , Float . NaN , Float . POSITIVE_INFINITY ) ; assertEquals ( Double . NaN , Double . NaN , Double . POSITIVE_INFINITY ) ; } @SuppressWarnings ( <str> ) @Test public void nullNullmessage ( ) { try { assertNull ( <str> ) ; fail ( ) ; } catch ( AssertionError e ) { assertEquals ( <str> , e . getMessage ( ) ) ; } } @SuppressWarnings ( <str> ) @Test public void nullWithMessage ( ) { try { assertNull ( <str> , <str> ) ; fail ( ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void same ( ) { Object o1 = new Object ( ) ; assertSame ( o1 , o1 ) ; } @Test public void notSame ( ) { Object o1 = new Object ( ) ; Object o2 = new Object ( ) ; assertNotSame ( o1 , o2 ) ; } @Test ( expected = AssertionError . class ) public void objectsNotSame ( ) { assertSame ( new Object ( ) , new Object ( ) ) ; } @Test ( expected = AssertionError . class ) public void objectsAreSame ( ) { Object o = new Object ( ) ; assertNotSame ( o , o ) ; } @Test public void sameWithMessage ( ) { try { assertSame ( <str> , <str> , <str> ) ; fail ( ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void sameNullMessage ( ) { try { assertSame ( <str> , <str> ) ; fail ( ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void notSameWithMessage ( ) { Object o = new Object ( ) ; try { assertNotSame ( <str> , o , o ) ; fail ( ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void notSameNullMessage ( ) { Object o = new Object ( ) ; try { assertNotSame ( o , o ) ; fail ( ) ; } catch ( AssertionError exception ) { assertEquals ( <str> , exception . getMessage ( ) ) ; } } @Test public void nullMessage ( ) { try { fail ( null ) ; } catch ( AssertionError exception ) { assertNull ( exception . getMessage ( ) ) ; } } @Test public void nullMessageDisappearsWithStringAssertEquals ( ) { try { assertEquals ( null , <str> , <str> ) ; fail ( ) ; } catch ( ComparisonFailure e ) { assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void nullMessageDisappearsWithAssertEquals ( ) { try { assertEquals ( null , <int> , <int> ) ; fail ( ) ; } catch ( AssertionError e ) { assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test ( expected = AssertionError . class ) public void arraysDeclaredAsObjectAreComparedAsObjects ( ) { Object a1 = new Object [ ] { <str> } ; Object a2 = new Object [ ] { <str> } ; assertEquals ( a1 , a2 ) ; } @Test public void implicitTypecastEquality ( ) { byte b = <int> ; short s = <int> ; int i = <int> ; long l = <int> ; float f = <float> ; double d = <float> ; assertEquals ( b , s ) ; assertEquals ( b , i ) ; assertEquals ( b , l ) ; assertEquals ( s , i ) ; assertEquals ( s , l ) ; assertEquals ( i , l ) ; assertEquals ( f , d , <int> ) ; } @Test public void errorMessageDistinguishesDifferentValuesWithSameToString ( ) { try { assertEquals ( <str> , new Integer ( <int> ) ) ; } catch ( AssertionError e ) { assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void assertThatIncludesDescriptionOfTestedValueInErrorMessage ( ) { String expected = <str> ; String actual = <str> ; String expectedMessage = <str> ; try { assertThat ( <str> , actual , equalTo ( expected ) ) ; } catch ( AssertionError e ) { assertEquals ( expectedMessage , e . getMessage ( ) ) ; } } @Test public void assertThatIncludesAdvancedMismatch ( ) { String expectedMessage = <str> ; try { assertThat ( <str> , <str> , is ( instanceOf ( Integer . class ) ) ) ; } catch ( AssertionError e ) { assertEquals ( expectedMessage , e . getMessage ( ) ) ; } } @Test public void assertThatDescriptionCanBeElided ( ) { String expected = <str> ; String actual = <str> ; String expectedMessage = <str> ; try { assertThat ( actual , equalTo ( expected ) ) ; } catch ( AssertionError e ) { assertEquals ( expectedMessage , e . getMessage ( ) ) ; } } @Test public void nullAndStringNullPrintCorrectError ( ) { try { assertEquals ( null , <str> ) ; } catch ( AssertionError e ) { assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test ( expected = AssertionError . class ) public void stringNullAndNullWorksToo ( ) { assertEquals ( <str> , null ) ; } @Test ( expected = AssertionError . class ) public void compareBigDecimalAndInteger ( ) { final BigDecimal bigDecimal = new BigDecimal ( <str> ) ; final Integer integer = Integer . valueOf ( <str> ) ; assertEquals ( bigDecimal , integer ) ; } @Test ( expected = AssertionError . class ) public void sameObjectIsNotEqual ( ) { Object o = new Object ( ) ; assertNotEquals ( o , o ) ; } @Test public void objectsWithDiferentReferencesAreNotEqual ( ) { assertNotEquals ( new Object ( ) , new Object ( ) ) ; } @Test public void assertNotEqualsIncludesCorrectMessage ( ) { Integer value1 = new Integer ( <int> ) ; Integer value2 = new Integer ( <int> ) ; String message = <str> ; try { assertNotEquals ( message , value1 , value2 ) ; } catch ( AssertionError e ) { assertEquals ( message + <str> + value1 , e . getMessage ( ) ) ; return ; } fail ( <str> ) ; } @Test public void assertNotEqualsIncludesTheValueBeingTested ( ) { Integer value1 = new Integer ( <int> ) ; Integer value2 = new Integer ( <int> ) ; try { assertNotEquals ( value1 , value2 ) ; } catch ( AssertionError e ) { assertTrue ( e . getMessage ( ) . contains ( value1 . toString ( ) ) ) ; return ; } fail ( <str> ) ; } @Test public void assertNotEqualsWorksWithPrimitiveTypes ( ) { assertNotEquals ( <int> , <int> ) ; assertNotEquals ( <str> , <int> , <int> ) ; assertNotEquals ( <float> , <float> , <int> ) ; assertNotEquals ( <str> , <float> , <float> , <int> ) ; assertNotEquals ( <float> , <float> , <int> f ) ; assertNotEquals ( <str> , <float> , <float> , <int> f ) ; } @Test ( expected = AssertionError . class ) public void assertNotEqualsConsidersDeltaCorrectly ( ) { assertNotEquals ( <float> , <float> , <float> ) ; } @Test ( expected = AssertionError . class ) public void assertNotEqualsConsidersFloatDeltaCorrectly ( ) { assertNotEquals ( <float> , <float> , <float> ) ; } @Test ( expected = AssertionError . class ) public void assertNotEqualsIgnoresDeltaOnNaN ( ) { assertNotEquals ( Double . NaN , Double . NaN , <int> ) ; } @Test ( expected = AssertionError . class ) public void assertNotEqualsIgnoresFloatDeltaOnNaN ( ) { assertNotEquals ( Float . NaN , Float . NaN , <int> f ) ; } @Test ( expected = AssertionError . class ) public void expectThrowsRequiresAnExceptionToBeThrown ( ) { expectThrows ( Throwable . class , nonThrowingRunnable ( ) ) ; } @Test public void expectThrowsIncludesAnInformativeDefaultMessage ( ) { try { expectThrows ( Throwable . class , nonThrowingRunnable ( ) ) ; } catch ( AssertionError ex ) { assertEquals ( <str> , ex . getMessage ( ) ) ; return ; } fail ( ) ; } @Test public void expectThrowsReturnsTheSameObjectThrown ( ) { NullPointerException npe = new NullPointerException ( ) ; Throwable throwable = expectThrows ( Throwable . class , throwingRunnable ( npe ) ) ; assertSame ( npe , throwable ) ; } @Test ( expected = AssertionError . class ) public void expectThrowsDetectsTypeMismatchesViaExplicitTypeHint ( ) { NullPointerException npe = new NullPointerException ( ) ; expectThrows ( IOException . class , throwingRunnable ( npe ) ) ; } @Test public void expectThrowsWrapsAndPropagatesUnexpectedExceptions ( ) { NullPointerException npe = new NullPointerException ( <str> ) ; try { expectThrows ( IOException . class , throwingRunnable ( npe ) ) ; } catch ( AssertionError ex ) { assertSame ( npe , ex . getCause ( ) ) ; assertEquals ( <str> , ex . getCause ( ) . getMessage ( ) ) ; return ; } fail ( ) ; } @Test public void expectThrowsSuppliesACoherentErrorMessageUponTypeMismatch ( ) { NullPointerException npe = new NullPointerException ( ) ; try { expectThrows ( IOException . class , throwingRunnable ( npe ) ) ; } catch ( AssertionError error ) { assertEquals ( <str> , error . getMessage ( ) ) ; assertSame ( npe , error . getCause ( ) ) ; return ; } fail ( ) ; } private static ThrowingRunnable nonThrowingRunnable ( ) { return new ThrowingRunnable ( ) { public void run ( ) throws Throwable { } } ; } private static ThrowingRunnable throwingRunnable ( final Throwable t ) { return new ThrowingRunnable ( ) { public void run ( ) throws Throwable { throw t ; } } ; } }
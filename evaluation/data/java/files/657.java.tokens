package com . netflix . hystrix ; import com . netflix . hystrix . metric . consumer . RollingThreadPoolEventCounterStream ; import org . junit . Before ; import org . junit . Test ; import java . util . Collection ; import static org . junit . Assert . assertEquals ; public class HystrixThreadPoolMetricsTest { private static final HystrixCommandGroupKey groupKey = HystrixCommandGroupKey . Factory . asKey ( <str> ) ; private static final HystrixThreadPoolKey tpKey = HystrixThreadPoolKey . Factory . asKey ( <str> ) ; @Before public void resetAll ( ) { HystrixThreadPoolMetrics . reset ( ) ; } @Test public void shouldYieldNoExecutedTasksOnStartup ( ) throws Exception { final Collection < HystrixThreadPoolMetrics > instances = HystrixThreadPoolMetrics . getInstances ( ) ; assertEquals ( <int> , instances . size ( ) ) ; } @Test public void shouldReturnOneExecutedTask ( ) throws Exception { final Collection < HystrixThreadPoolMetrics > instances = HystrixThreadPoolMetrics . getInstances ( ) ; RollingThreadPoolEventCounterStream . getInstance ( tpKey , <int> , <int> ) . startCachingStreamValuesIfUnstarted ( ) ; new NoOpHystrixCommand ( ) . execute ( ) ; Thread . sleep ( <int> ) ; assertEquals ( <int> , instances . size ( ) ) ; assertEquals ( <int> , instances . iterator ( ) . next ( ) . getRollingCountThreadsExecuted ( ) ) ; } private static class NoOpHystrixCommand extends HystrixCommand < Void > { public NoOpHystrixCommand ( ) { super ( Setter . withGroupKey ( groupKey ) . andThreadPoolKey ( tpKey ) . andThreadPoolPropertiesDefaults ( HystrixThreadPoolProperties . Setter ( ) . withMetricsRollingStatisticalWindowInMilliseconds ( <int> ) ) ) ; } @Override protected Void run ( ) throws Exception { System . out . println ( <str> + Thread . currentThread ( ) . getName ( ) ) ; return null ; } } } 

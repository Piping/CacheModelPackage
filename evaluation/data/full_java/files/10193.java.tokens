package com . google . common . collect ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import java . util . List ; public class ImmutableListCreationBenchmark { @Param ( { <str> , <str> , <str> } ) int size ; private static final Object OBJECT = new Object ( ) ; @Benchmark int builderAdd ( int reps ) { int size = this . size ; int dummy = <int> ; for ( int rep = <int> ; rep < reps ; rep + + ) { ImmutableList . Builder < Object > builder = ImmutableList . builder ( ) ; for ( int i = <int> ; i < size ; i + + ) { builder . add ( OBJECT ) ; } dummy + = builder . build ( ) . size ( ) ; } return dummy ; } @Benchmark int preSizedBuilderAdd ( int reps ) { int size = this . size ; int dummy = <int> ; for ( int rep = <int> ; rep < reps ; rep + + ) { ImmutableList . Builder < Object > builder = new ImmutableList . Builder < Object > ( size ) ; for ( int i = <int> ; i < size ; i + + ) { builder . add ( OBJECT ) ; } dummy + = builder . build ( ) . size ( ) ; } return dummy ; } @Benchmark int copyArrayList ( int reps ) { int size = this . size ; int dummy = <int> ; for ( int rep = <int> ; rep < reps ; rep + + ) { List < Object > builder = Lists . newArrayList ( ) ; for ( int i = <int> ; i < size ; i + + ) { builder . add ( OBJECT ) ; } dummy + = ImmutableList . copyOf ( builder ) . size ( ) ; } return dummy ; } @Benchmark int copyPreSizedArrayList ( int reps ) { int size = this . size ; int tmp = <int> ; for ( int rep = <int> ; rep < reps ; rep + + ) { List < Object > builder = Lists . newArrayListWithCapacity ( size ) ; for ( int i = <int> ; i < size ; i + + ) { builder . add ( OBJECT ) ; } tmp + = ImmutableList . copyOf ( builder ) . size ( ) ; } return tmp ; } } 

package org . elasticsearch . common . metrics ; import java . util . concurrent . atomic . LongAdder ; import java . util . concurrent . TimeUnit ; public class EWMA { private static final double M1_ALPHA = <int> - Math . exp ( - <int> / <float> ) ; private static final double M5_ALPHA = <int> - Math . exp ( - <int> / <float> / <int> ) ; private static final double M15_ALPHA = <int> - Math . exp ( - <int> / <float> / <int> ) ; private volatile boolean initialized = false ; private volatile double rate = <float> ; private final LongAdder uncounted = new LongAdder ( ) ; private final double alpha , interval ; public static EWMA oneMinuteEWMA ( ) { return new EWMA ( M1_ALPHA , <int> , TimeUnit . SECONDS ) ; } public static EWMA fiveMinuteEWMA ( ) { return new EWMA ( M5_ALPHA , <int> , TimeUnit . SECONDS ) ; } public static EWMA fifteenMinuteEWMA ( ) { return new EWMA ( M15_ALPHA , <int> , TimeUnit . SECONDS ) ; } public EWMA ( double alpha , long interval , TimeUnit intervalUnit ) { this . interval = intervalUnit . toNanos ( interval ) ; this . alpha = alpha ; } public void update ( long n ) { uncounted . add ( n ) ; } public void tick ( ) { final long count = uncounted . sumThenReset ( ) ; double instantRate = count / interval ; if ( initialized ) { rate + = ( alpha * ( instantRate - rate ) ) ; } else { rate = instantRate ; initialized = true ; } } public double rate ( TimeUnit rateUnit ) { return rate * ( double ) rateUnit . toNanos ( <int> ) ; } } 

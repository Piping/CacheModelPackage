package com . badlogic . gdx . tools . flame ; import java . awt . Dimension ; import java . awt . GridBagConstraints ; import java . awt . GridBagLayout ; import java . awt . Insets ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import java . io . File ; import javax . swing . DefaultComboBoxModel ; import javax . swing . JButton ; import javax . swing . JComboBox ; import javax . swing . JPanel ; import javax . swing . JScrollPane ; import javax . swing . JSeparator ; import javax . swing . JTable ; import javax . swing . ListSelectionModel ; import javax . swing . event . ListSelectionEvent ; import javax . swing . event . ListSelectionListener ; import javax . swing . event . TableModelEvent ; import javax . swing . event . TableModelListener ; import javax . swing . table . DefaultTableModel ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . particles . ParticleController ; import com . badlogic . gdx . graphics . g3d . particles . ParticleEffect ; import com . badlogic . gdx . graphics . g3d . particles . emitters . RegularEmitter ; import com . badlogic . gdx . graphics . g3d . particles . influencers . ColorInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier ; import com . badlogic . gdx . graphics . g3d . particles . influencers . ModelInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . ParticleControllerFinalizerInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . ParticleControllerInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . RegionInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . ScaleInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . SpawnInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . renderers . BillboardRenderer ; import com . badlogic . gdx . graphics . g3d . particles . renderers . ModelInstanceRenderer ; import com . badlogic . gdx . graphics . g3d . particles . renderers . ParticleControllerControllerRenderer ; import com . badlogic . gdx . graphics . g3d . particles . renderers . PointSpriteRenderer ; import com . badlogic . gdx . graphics . g3d . particles . values . EllipseSpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . PointSpawnShapeValue ; import com . badlogic . gdx . graphics . g3d . particles . values . PrimitiveSpawnShapeValue . SpawnSide ; import com . badlogic . gdx . tools . flame . FlameMain . ControllerData ; import com . badlogic . gdx . tools . flame . FlameMain . ControllerType ; class EffectPanel extends JPanel { FlameMain editor ; JTable emitterTable ; DefaultTableModel emitterTableModel ; int editIndex = - <int> ; String lastDir ; JComboBox controllerTypeCombo ; public EffectPanel ( FlameMain editor ) { this . editor = editor ; initializeComponents ( ) ; } public < T extends ParticleController > T createDefaultEmitter ( ControllerType type , boolean select , boolean add ) { T controller = null ; if ( type = = ControllerType . Billboard ) { controller = ( T ) createDefaultBillboardController ( ) ; } else if ( type = = ControllerType . ModelInstance ) { controller = ( T ) createDefaultModelInstanceController ( ) ; } else if ( type = = ControllerType . PointSprite ) { controller = ( T ) createDefaultPointController ( ) ; } else if ( type = = ControllerType . ParticleController ) { controller = ( T ) createDefaultParticleController ( ) ; } if ( add ) { controller . init ( ) ; addEmitter ( controller , select ) ; } return controller ; } private ParticleController createDefaultModelInstanceController ( ) { RegularEmitter emitter = new RegularEmitter ( ) ; emitter . getDuration ( ) . setLow ( <int> ) ; emitter . getEmission ( ) . setHigh ( <int> ) ; emitter . getLife ( ) . setHigh ( <int> , <int> ) ; emitter . getLife ( ) . setTimeline ( new float [ ] { <int> , <float> , <int> } ) ; emitter . getLife ( ) . setScaling ( new float [ ] { <int> , <int> , <float> } ) ; emitter . setMaxParticleCount ( <int> ) ; ColorInfluencer . Random colorInfluencer = new ColorInfluencer . Random ( ) ; EllipseSpawnShapeValue spawnShapeValue = new EllipseSpawnShapeValue ( ) ; spawnShapeValue . setDimensions ( <int> , <int> , <int> ) ; SpawnInfluencer spawnSource = new SpawnInfluencer ( spawnShapeValue ) ; DynamicsInfluencer velocityInfluencer = new DynamicsInfluencer ( ) ; DynamicsModifier . CentripetalAcceleration velocityValue = new DynamicsModifier . CentripetalAcceleration ( ) ; velocityValue . strengthValue . setHigh ( <int> , <int> ) ; velocityValue . strengthValue . setActive ( true ) ; velocityInfluencer . velocities . add ( velocityValue ) ; return new ParticleController ( <str> , emitter , new ModelInstanceRenderer ( editor . getModelInstanceParticleBatch ( ) ) , new ModelInfluencer . Single ( ( Model ) editor . assetManager . get ( FlameMain . DEFAULT_MODEL_PARTICLE ) ) , spawnSource , colorInfluencer , velocityInfluencer ) ; } private ParticleController createDefaultBillboardController ( ) { RegularEmitter emitter = new RegularEmitter ( ) ; emitter . getDuration ( ) . setLow ( <int> ) ; emitter . getEmission ( ) . setHigh ( <int> ) ; emitter . getLife ( ) . setHigh ( <int> , <int> ) ; emitter . getLife ( ) . setTimeline ( new float [ ] { <int> , <float> , <int> } ) ; emitter . getLife ( ) . setScaling ( new float [ ] { <int> , <int> , <float> } ) ; emitter . setMaxParticleCount ( <int> ) ; PointSpawnShapeValue pointSpawnShapeValue = new PointSpawnShapeValue ( ) ; SpawnInfluencer spawnSource = new SpawnInfluencer ( pointSpawnShapeValue ) ; ColorInfluencer . Single colorInfluencer = new ColorInfluencer . Single ( ) ; colorInfluencer . colorValue . setColors ( new float [ ] { <int> , <float> , <float> , <int> , <int> , <int> } ) ; colorInfluencer . colorValue . setTimeline ( new float [ ] { <int> , <int> } ) ; colorInfluencer . alphaValue . setHigh ( <int> ) ; colorInfluencer . alphaValue . setTimeline ( new float [ ] { <int> , <float> , <float> , <int> } ) ; colorInfluencer . alphaValue . setScaling ( new float [ ] { <int> , <float> , <float> , <int> } ) ; DynamicsInfluencer velocityInfluencer = new DynamicsInfluencer ( ) ; DynamicsModifier . PolarAcceleration velocityValue = new DynamicsModifier . PolarAcceleration ( ) ; velocityValue . phiValue . setHigh ( - <int> , <int> ) ; velocityValue . phiValue . setActive ( true ) ; velocityValue . phiValue . setTimeline ( new float [ ] { <int> , <float> , <int> } ) ; velocityValue . phiValue . setScaling ( new float [ ] { <int> , <int> , <int> } ) ; velocityValue . thetaValue . setHigh ( <int> , <int> ) ; velocityValue . strengthValue . setHigh ( <int> , <int> ) ; velocityInfluencer . velocities . add ( velocityValue ) ; return new ParticleController ( <str> , emitter , new BillboardRenderer ( editor . getBillboardBatch ( ) ) , new RegionInfluencer . Single ( editor . getTexture ( ) ) , spawnSource , colorInfluencer , velocityInfluencer ) ; } private ParticleController createDefaultPointController ( ) { RegularEmitter emitter = new RegularEmitter ( ) ; emitter . getDuration ( ) . setLow ( <int> ) ; emitter . getEmission ( ) . setHigh ( <int> ) ; emitter . getLife ( ) . setHigh ( <int> , <int> ) ; emitter . getLife ( ) . setTimeline ( new float [ ] { <int> , <float> , <int> } ) ; emitter . getLife ( ) . setScaling ( new float [ ] { <int> , <int> , <float> } ) ; emitter . setMaxParticleCount ( <int> ) ; ScaleInfluencer scaleInfluencer = new ScaleInfluencer ( ) ; scaleInfluencer . value . setHigh ( <int> ) ; ColorInfluencer . Single colorInfluencer = new ColorInfluencer . Single ( ) ; colorInfluencer . colorValue . setColors ( new float [ ] { <float> , <float> , <int> , <int> , <int> , <int> } ) ; colorInfluencer . colorValue . setTimeline ( new float [ ] { <int> , <int> } ) ; colorInfluencer . alphaValue . setHigh ( <int> ) ; colorInfluencer . alphaValue . setTimeline ( new float [ ] { <int> , <float> , <float> , <int> } ) ; colorInfluencer . alphaValue . setScaling ( new float [ ] { <int> , <float> , <float> , <int> } ) ; PointSpawnShapeValue pointSpawnShapeValue = new PointSpawnShapeValue ( ) ; SpawnInfluencer spawnSource = new SpawnInfluencer ( pointSpawnShapeValue ) ; DynamicsInfluencer velocityInfluencer = new DynamicsInfluencer ( ) ; DynamicsModifier . PolarAcceleration velocityValue = new DynamicsModifier . PolarAcceleration ( ) ; velocityValue . phiValue . setHigh ( - <int> , <int> ) ; velocityValue . phiValue . setActive ( true ) ; velocityValue . phiValue . setTimeline ( new float [ ] { <int> , <float> , <int> } ) ; velocityValue . phiValue . setScaling ( new float [ ] { <int> , <int> , <int> } ) ; velocityValue . thetaValue . setHigh ( <int> , <int> ) ; velocityValue . strengthValue . setHigh ( <int> , <int> ) ; return new ParticleController ( <str> , emitter , new PointSpriteRenderer ( editor . getPointSpriteBatch ( ) ) , new RegionInfluencer . Single ( ( Texture ) editor . assetManager . get ( FlameMain . DEFAULT_BILLBOARD_PARTICLE ) ) , spawnSource , scaleInfluencer , colorInfluencer , velocityInfluencer ) ; } private ParticleController createDefaultParticleController ( ) { RegularEmitter emitter = new RegularEmitter ( ) ; emitter . getDuration ( ) . setLow ( <int> ) ; emitter . getEmission ( ) . setHigh ( <int> ) ; emitter . getLife ( ) . setHigh ( <int> ) ; emitter . setMaxParticleCount ( <int> ) ; EllipseSpawnShapeValue pointSpawnShapeValue = new EllipseSpawnShapeValue ( ) ; pointSpawnShapeValue . setDimensions ( <int> , <int> , <int> ) ; pointSpawnShapeValue . setSide ( SpawnSide . top ) ; SpawnInfluencer spawnSource = new SpawnInfluencer ( pointSpawnShapeValue ) ; ScaleInfluencer scaleInfluencer = new ScaleInfluencer ( ) ; scaleInfluencer . value . setHigh ( <int> ) ; scaleInfluencer . value . setLow ( <int> ) ; scaleInfluencer . value . setTimeline ( new float [ ] { <int> , <int> } ) ; scaleInfluencer . value . setScaling ( new float [ ] { <int> , <int> } ) ; DynamicsInfluencer velocityInfluencer = new DynamicsInfluencer ( ) ; DynamicsModifier . CentripetalAcceleration velocityValue = new DynamicsModifier . CentripetalAcceleration ( ) ; velocityValue . strengthValue . setHigh ( <int> , <int> ) ; velocityValue . strengthValue . setActive ( true ) ; velocityInfluencer . velocities . add ( velocityValue ) ; return new ParticleController ( <str> , emitter , new ParticleControllerControllerRenderer ( ) , new ParticleControllerInfluencer . Single ( editor . assetManager . get ( FlameMain . DEFAULT_TEMPLATE_PFX , ParticleEffect . class ) . getControllers ( ) . get ( <int> ) ) , spawnSource , scaleInfluencer , velocityInfluencer , new ParticleControllerFinalizerInfluencer ( ) ) ; } public ParticleController createDefaultTemplateController ( ) { RegularEmitter emitter = new RegularEmitter ( ) ; emitter . getDuration ( ) . setLow ( <int> ) ; emitter . getEmission ( ) . setHigh ( <int> ) ; emitter . getLife ( ) . setHigh ( <int> ) ; emitter . getLife ( ) . setTimeline ( new float [ ] { <int> , <float> , <int> } ) ; emitter . getLife ( ) . setScaling ( new float [ ] { <int> , <int> , <float> } ) ; emitter . setMaxParticleCount ( <int> ) ; PointSpawnShapeValue pointSpawnShapeValue = new PointSpawnShapeValue ( ) ; pointSpawnShapeValue . xOffsetValue . setLow ( <int> , <float> ) ; pointSpawnShapeValue . xOffsetValue . setActive ( true ) ; pointSpawnShapeValue . yOffsetValue . setLow ( <int> , <float> ) ; pointSpawnShapeValue . yOffsetValue . setActive ( true ) ; pointSpawnShapeValue . zOffsetValue . setLow ( <int> , <float> ) ; pointSpawnShapeValue . zOffsetValue . setActive ( true ) ; SpawnInfluencer spawnSource = new SpawnInfluencer ( pointSpawnShapeValue ) ; ScaleInfluencer scaleInfluencer = new ScaleInfluencer ( ) ; scaleInfluencer . value . setHigh ( <float> ) ; ColorInfluencer . Single colorInfluencer = new ColorInfluencer . Single ( ) ; colorInfluencer . colorValue . setColors ( new float [ ] { <int> , <float> , <float> , <int> , <int> , <int> } ) ; colorInfluencer . colorValue . setTimeline ( new float [ ] { <int> , <int> } ) ; colorInfluencer . alphaValue . setHigh ( <int> ) ; colorInfluencer . alphaValue . setTimeline ( new float [ ] { <int> , <float> , <float> , <int> } ) ; colorInfluencer . alphaValue . setScaling ( new float [ ] { <int> , <float> , <float> , <int> } ) ; return new ParticleController ( <str> , emitter , new BillboardRenderer ( editor . getBillboardBatch ( ) ) , new RegionInfluencer . Single ( editor . getTexture ( ) ) , spawnSource , scaleInfluencer , colorInfluencer ) ; } private void addEmitter ( final ParticleController emitter , boolean select ) { editor . addEmitter ( emitter ) ; emitterTableModel . addRow ( new Object [ ] { emitter . name , true } ) ; int row = emitterTableModel . getRowCount ( ) - <int> ; emitterChecked ( row , true ) ; if ( select ) { emitterTable . getSelectionModel ( ) . setSelectionInterval ( row , row ) ; } } void emitterSelected ( ) { int row = emitterTable . getSelectedRow ( ) ; if ( row = = editIndex ) return ; editIndex = row ; editor . reloadRows ( ) ; } void emitterChecked ( int index , boolean checked ) { editor . setEnabled ( index , checked ) ; } void openEffect ( ) { File file = editor . showFileLoadDialog ( ) ; if ( file ! = null ) { if ( editor . openEffect ( file , true ) ! = null ) { emitterTableModel . getDataVector ( ) . removeAllElements ( ) ; for ( ControllerData data : editor . controllersData ) { emitterTableModel . addRow ( new Object [ ] { data . controller . name , true } ) ; } editIndex = <int> ; emitterTable . getSelectionModel ( ) . setSelectionInterval ( editIndex , editIndex ) ; } } } protected void importEffect ( ) { File file = editor . showFileLoadDialog ( ) ; if ( file ! = null ) { ParticleEffect effect ; if ( ( effect = editor . openEffect ( file , false ) ) ! = null ) { for ( ParticleController controller : effect . getControllers ( ) ) addEmitter ( controller , false ) ; editIndex = <int> ; emitterTable . getSelectionModel ( ) . setSelectionInterval ( editIndex , editIndex ) ; } } } void saveEffect ( ) { File file = editor . showFileSaveDialog ( ) ; if ( file ! = null ) { int index = <int> ; for ( ControllerData data : editor . controllersData ) data . controller . name = ( ( String ) emitterTableModel . getValueAt ( index + + , <int> ) ) ; editor . saveEffect ( file ) ; } } void deleteEmitter ( ) { int row = emitterTable . getSelectedRow ( ) ; if ( row = = - <int> ) return ; int newIndex = Math . min ( editIndex , emitterTableModel . getRowCount ( ) - <int> ) ; editor . removeEmitter ( row ) ; emitterTableModel . removeRow ( row ) ; emitterTable . getSelectionModel ( ) . setSelectionInterval ( newIndex , newIndex ) ; } protected void cloneEmitter ( ) { int row = emitterTable . getSelectedRow ( ) ; if ( row = = - <int> ) return ; ParticleController controller = editor . controllersData . get ( row ) . controller . copy ( ) ; controller . init ( ) ; controller . name + = <str> ; addEmitter ( controller , true ) ; } void move ( int direction ) { } private void initializeComponents ( ) { setLayout ( new GridBagLayout ( ) ) ; { JScrollPane scroll = new JScrollPane ( ) ; add ( scroll , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { emitterTable = new JTable ( ) { public Class getColumnClass ( int column ) { return column = = <int> ? Boolean . class : super . getColumnClass ( column ) ; } @Override public Dimension getPreferredScrollableViewportSize ( ) { Dimension dim = super . getPreferredScrollableViewportSize ( ) ; dim . height = getPreferredSize ( ) . height ; return dim ; } } ; emitterTable . getTableHeader ( ) . setReorderingAllowed ( false ) ; emitterTable . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; scroll . setViewportView ( emitterTable ) ; emitterTableModel = new DefaultTableModel ( new String [ <int> ] [ <int> ] , new String [ ] { <str> , <str> } ) ; emitterTable . setModel ( emitterTableModel ) ; emitterTable . getSelectionModel ( ) . addListSelectionListener ( new ListSelectionListener ( ) { public void valueChanged ( ListSelectionEvent event ) { if ( event . getValueIsAdjusting ( ) ) return ; emitterSelected ( ) ; } } ) ; emitterTableModel . addTableModelListener ( new TableModelListener ( ) { public void tableChanged ( TableModelEvent event ) { if ( event . getColumn ( ) ! = <int> ) return ; emitterChecked ( event . getFirstRow ( ) , ( Boolean ) emitterTable . getValueAt ( event . getFirstRow ( ) , <int> ) ) ; } } ) ; } } { JPanel sideButtons = new JPanel ( new GridBagLayout ( ) ) ; add ( sideButtons , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . NORTHWEST , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { controllerTypeCombo = new JComboBox ( ) ; controllerTypeCombo . setModel ( new DefaultComboBoxModel ( ControllerType . values ( ) ) ) ; sideButtons . add ( controllerTypeCombo , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { JButton newButton = new JButton ( <str> ) ; sideButtons . add ( newButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; newButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { ControllerType item = ( ControllerType ) controllerTypeCombo . getSelectedItem ( ) ; createDefaultEmitter ( item , true , true ) ; } } ) ; } { JButton deleteButton = new JButton ( <str> ) ; sideButtons . add ( deleteButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; deleteButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { deleteEmitter ( ) ; } } ) ; } { JButton cloneButton = new JButton ( <str> ) ; sideButtons . add ( cloneButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; cloneButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { cloneEmitter ( ) ; } } ) ; } { sideButtons . add ( new JSeparator ( JSeparator . HORIZONTAL ) , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { JButton saveButton = new JButton ( <str> ) ; sideButtons . add ( saveButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; saveButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { saveEffect ( ) ; } } ) ; } { JButton openButton = new JButton ( <str> ) ; sideButtons . add ( openButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; openButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { openEffect ( ) ; } } ) ; } { JButton importButton = new JButton ( <str> ) ; sideButtons . add ( importButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; importButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { importEffect ( ) ; } } ) ; } } } } 

package io . netty . util . internal ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . net . URL ; import java . util . Locale ; public final class NativeLibraryLoader { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( NativeLibraryLoader . class ) ; private static final String NATIVE_RESOURCE_HOME = <str> ; private static final String OSNAME ; private static final File WORKDIR ; static { OSNAME = SystemPropertyUtil . get ( <str> , <str> ) . toLowerCase ( Locale . US ) . replaceAll ( <str> , <str> ) ; String workdir = SystemPropertyUtil . get ( <str> ) ; if ( workdir ! = null ) { File f = new File ( workdir ) ; f . mkdirs ( ) ; try { f = f . getAbsoluteFile ( ) ; } catch ( Exception ignored ) { } WORKDIR = f ; logger . debug ( <str> + WORKDIR ) ; } else { WORKDIR = tmpdir ( ) ; logger . debug ( <str> + WORKDIR + <str> ) ; } } private static File tmpdir ( ) { File f ; try { f = toDirectory ( SystemPropertyUtil . get ( <str> ) ) ; if ( f ! = null ) { logger . debug ( <str> + f ) ; return f ; } f = toDirectory ( SystemPropertyUtil . get ( <str> ) ) ; if ( f ! = null ) { logger . debug ( <str> + f + <str> ) ; return f ; } if ( isWindows ( ) ) { f = toDirectory ( System . getenv ( <str> ) ) ; if ( f ! = null ) { logger . debug ( <str> + f + <str> ) ; return f ; } String userprofile = System . getenv ( <str> ) ; if ( userprofile ! = null ) { f = toDirectory ( userprofile + <str> ) ; if ( f ! = null ) { logger . debug ( <str> + f + <str> ) ; return f ; } f = toDirectory ( userprofile + <str> ) ; if ( f ! = null ) { logger . debug ( <str> + f + <str> ) ; return f ; } } } else { f = toDirectory ( System . getenv ( <str> ) ) ; if ( f ! = null ) { logger . debug ( <str> + f + <str> ) ; return f ; } } } catch ( Exception ignored ) { } if ( isWindows ( ) ) { f = new File ( <str> ) ; } else { f = new File ( <str> ) ; } logger . warn ( <str> + f ) ; return f ; } @SuppressWarnings ( <str> ) private static File toDirectory ( String path ) { if ( path = = null ) { return null ; } File f = new File ( path ) ; f . mkdirs ( ) ; if ( ! f . isDirectory ( ) ) { return null ; } try { return f . getAbsoluteFile ( ) ; } catch ( Exception ignored ) { return f ; } } private static boolean isWindows ( ) { return OSNAME . startsWith ( <str> ) ; } private static boolean isOSX ( ) { return OSNAME . startsWith ( <str> ) | | OSNAME . startsWith ( <str> ) ; } public static void load ( String name , ClassLoader loader ) { String libname = System . mapLibraryName ( name ) ; String path = NATIVE_RESOURCE_HOME + libname ; URL url = loader . getResource ( path ) ; if ( url = = null & & isOSX ( ) ) { if ( path . endsWith ( <str> ) ) { url = loader . getResource ( NATIVE_RESOURCE_HOME + <str> + name + <str> ) ; } else { url = loader . getResource ( NATIVE_RESOURCE_HOME + <str> + name + <str> ) ; } } if ( url = = null ) { System . loadLibrary ( name ) ; return ; } int index = libname . lastIndexOf ( <str> ) ; String prefix = libname . substring ( <int> , index ) ; String suffix = libname . substring ( index , libname . length ( ) ) ; InputStream in = null ; OutputStream out = null ; File tmpFile = null ; boolean loaded = false ; try { tmpFile = File . createTempFile ( prefix , suffix , WORKDIR ) ; in = url . openStream ( ) ; out = new FileOutputStream ( tmpFile ) ; byte [ ] buffer = new byte [ <int> ] ; int length ; while ( ( length = in . read ( buffer ) ) > <int> ) { out . write ( buffer , <int> , length ) ; } out . flush ( ) ; out . close ( ) ; out = null ; System . load ( tmpFile . getPath ( ) ) ; loaded = true ; } catch ( Exception e ) { throw ( UnsatisfiedLinkError ) new UnsatisfiedLinkError ( <str> + name ) . initCause ( e ) ; } finally { if ( in ! = null ) { try { in . close ( ) ; } catch ( IOException ignore ) { } } if ( out ! = null ) { try { out . close ( ) ; } catch ( IOException ignore ) { } } if ( tmpFile ! = null ) { if ( loaded ) { tmpFile . deleteOnExit ( ) ; } else { if ( ! tmpFile . delete ( ) ) { tmpFile . deleteOnExit ( ) ; } } } } } private NativeLibraryLoader ( ) { } } 

package org . gradle . internal . resource . transport . http ; import org . apache . http . HttpResponse ; import org . apache . http . client . methods . HttpPut ; import org . apache . http . entity . ContentType ; import org . apache . http . util . EntityUtils ; import org . gradle . internal . resource . local . LocalResource ; import org . gradle . internal . resource . transfer . ExternalResourceUploader ; import java . io . IOException ; import java . net . URI ; public class HttpResourceUploader implements ExternalResourceUploader { private final HttpClientHelper http ; public HttpResourceUploader ( HttpClientHelper http ) { this . http = http ; } public void upload ( LocalResource resource , URI destination ) throws IOException { HttpPut method = new HttpPut ( destination ) ; final RepeatableInputStreamEntity entity = new RepeatableInputStreamEntity ( resource , ContentType . APPLICATION_OCTET_STREAM ) ; method . setEntity ( entity ) ; HttpResponse response = http . performHttpRequest ( method ) ; EntityUtils . consume ( response . getEntity ( ) ) ; if ( ! http . wasSuccessful ( response ) ) { throw new IOException ( String . format ( <str> , destination , response . getStatusLine ( ) . getStatusCode ( ) , response . getStatusLine ( ) . getReasonPhrase ( ) ) ) ; } } } 

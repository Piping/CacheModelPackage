package org . elasticsearch . common . network ; import org . elasticsearch . test . ESTestCase ; import java . net . InetAddress ; import java . net . UnknownHostException ; public class InetAddressesTests extends ESTestCase { public void testForStringBogusInput ( ) { String [ ] bogusInputs = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; for ( int i = <int> ; i < bogusInputs . length ; i + + ) { try { InetAddresses . forString ( bogusInputs [ i ] ) ; fail ( <str> + bogusInputs [ i ] + <str> ) ; } catch ( IllegalArgumentException expected ) { } assertFalse ( InetAddresses . isInetAddress ( bogusInputs [ i ] ) ) ; } } public void test3ff31 ( ) { try { InetAddresses . forString ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } assertFalse ( InetAddresses . isInetAddress ( <str> ) ) ; } public void testForStringIPv4Input ( ) throws UnknownHostException { String ipStr = <str> ; InetAddress ipv4Addr = null ; ipv4Addr = InetAddress . getByName ( ipStr ) ; assertEquals ( ipv4Addr , InetAddresses . forString ( ipStr ) ) ; assertTrue ( InetAddresses . isInetAddress ( ipStr ) ) ; } public void testForStringIPv6Input ( ) throws UnknownHostException { String ipStr = <str> ; InetAddress ipv6Addr = null ; ipv6Addr = InetAddress . getByName ( ipStr ) ; assertEquals ( ipv6Addr , InetAddresses . forString ( ipStr ) ) ; assertTrue ( InetAddresses . isInetAddress ( ipStr ) ) ; } public void testForStringIPv6EightColons ( ) throws UnknownHostException { String [ ] eightColons = { <str> , <str> , <str> , <str> , } ; for ( int i = <int> ; i < eightColons . length ; i + + ) { InetAddress ipv6Addr = null ; ipv6Addr = InetAddress . getByName ( eightColons [ i ] ) ; assertEquals ( ipv6Addr , InetAddresses . forString ( eightColons [ i ] ) ) ; assertTrue ( InetAddresses . isInetAddress ( eightColons [ i ] ) ) ; } } public void testConvertDottedQuadToHex ( ) throws UnknownHostException { String [ ] ipStrings = { <str> , <str> , <str> , <str> } ; for ( String ipString : ipStrings ) { InetAddress ipv6Addr = InetAddress . getByName ( ipString ) ; assertEquals ( ipv6Addr , InetAddresses . forString ( ipString ) ) ; assertTrue ( InetAddresses . isInetAddress ( ipString ) ) ; } } public void testToAddrStringIPv4 ( ) { assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; } public void testToAddrStringIPv6 ( ) { assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; assertEquals ( <str> , InetAddresses . toAddrString ( InetAddresses . forString ( <str> ) ) ) ; } public void testToUriStringIPv4 ( ) { String ipStr = <str> ; InetAddress ip = InetAddresses . forString ( ipStr ) ; assertEquals ( <str> , InetAddresses . toUriString ( ip ) ) ; } public void testToUriStringIPv6 ( ) { String ipStr = <str> ; InetAddress ip = InetAddresses . forString ( ipStr ) ; assertEquals ( <str> , InetAddresses . toUriString ( ip ) ) ; } } 

package com . google . common . collect . testing ; import static com . google . common . collect . testing . Helpers . NullsBeforeB ; import static com . google . common . collect . testing . Helpers . testComparator ; import com . google . common . annotations . GwtCompatible ; import junit . framework . AssertionFailedError ; import junit . framework . TestCase ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; @GwtCompatible public class HelpersTest extends TestCase { public void testNullsBeforeB ( ) { testComparator ( NullsBeforeB . INSTANCE , <str> , <str> , null , <str> , <str> ) ; } public void testIsEmpty_iterable ( ) { List < Object > list = new ArrayList < Object > ( ) ; Helpers . assertEmpty ( list ) ; list . add ( <str> ) ; try { Helpers . assertEmpty ( list ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } } public void testIsEmpty_map ( ) { Map < Object , Object > map = new HashMap < Object , Object > ( ) ; Helpers . assertEmpty ( map ) ; map . put ( <str> , <str> ) ; try { Helpers . assertEmpty ( map ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } } public void testAssertEqualInOrder ( ) { List < ? > list = Arrays . asList ( <str> , <str> , <str> ) ; Helpers . assertEqualInOrder ( list , list ) ; List < ? > fewer = Arrays . asList ( <str> , <str> ) ; try { Helpers . assertEqualInOrder ( list , fewer ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } try { Helpers . assertEqualInOrder ( fewer , list ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } List < ? > differentOrder = Arrays . asList ( <str> , <str> , <str> ) ; try { Helpers . assertEqualInOrder ( list , differentOrder ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } List < ? > differentContents = Arrays . asList ( <str> , <str> , <str> ) ; try { Helpers . assertEqualInOrder ( list , differentContents ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } } public void testAssertContentsInOrder ( ) { List < ? > list = Arrays . asList ( <str> , <str> , <str> ) ; Helpers . assertContentsInOrder ( list , <str> , <str> , <str> ) ; try { Helpers . assertContentsInOrder ( list , <str> , <str> ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } try { Helpers . assertContentsInOrder ( list , <str> , <str> , <str> , <str> ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } try { Helpers . assertContentsInOrder ( list , <str> , <str> , <str> ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } try { Helpers . assertContentsInOrder ( list , <str> , <str> , <str> ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } } public void testAssertContains ( ) { List < ? > list = Arrays . asList ( <str> , <str> ) ; Helpers . assertContains ( list , <str> ) ; Helpers . assertContains ( list , <str> ) ; try { Helpers . assertContains ( list , <str> ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } } public void testAssertContainsAllOf ( ) { List < ? > list = Arrays . asList ( <str> , <str> , <str> , <str> ) ; Helpers . assertContainsAllOf ( list , <str> ) ; Helpers . assertContainsAllOf ( list , <str> , <str> ) ; Helpers . assertContainsAllOf ( list , <str> , <str> , <str> ) ; Helpers . assertContainsAllOf ( list , <str> , <str> , <str> , <str> ) ; try { Helpers . assertContainsAllOf ( list , <str> ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } try { Helpers . assertContainsAllOf ( list , <str> , <str> , <str> , <str> ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } try { Helpers . assertContainsAllOf ( list , <str> , <str> , <str> ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } } } 

package io . netty . handler . codec . socks ; import io . netty . buffer . ByteBuf ; import io . netty . util . CharsetUtil ; import io . netty . util . NetUtil ; import java . net . IDN ; public final class SocksCmdRequest extends SocksRequest { private final SocksCmdType cmdType ; private final SocksAddressType addressType ; private final String host ; private final int port ; public SocksCmdRequest ( SocksCmdType cmdType , SocksAddressType addressType , String host , int port ) { super ( SocksRequestType . CMD ) ; if ( cmdType = = null ) { throw new NullPointerException ( <str> ) ; } if ( addressType = = null ) { throw new NullPointerException ( <str> ) ; } if ( host = = null ) { throw new NullPointerException ( <str> ) ; } switch ( addressType ) { case IPv4 : if ( ! NetUtil . isValidIpV4Address ( host ) ) { throw new IllegalArgumentException ( host + <str> ) ; } break ; case DOMAIN : if ( IDN . toASCII ( host ) . length ( ) > <int> ) { throw new IllegalArgumentException ( host + <str> + IDN . toASCII ( host ) + <str> ) ; } break ; case IPv6 : if ( ! NetUtil . isValidIpV6Address ( host ) ) { throw new IllegalArgumentException ( host + <str> ) ; } break ; case UNKNOWN : break ; } if ( port < = <int> | | port > = <int> ) { throw new IllegalArgumentException ( port + <str> ) ; } this . cmdType = cmdType ; this . addressType = addressType ; this . host = IDN . toASCII ( host ) ; this . port = port ; } public SocksCmdType cmdType ( ) { return cmdType ; } public SocksAddressType addressType ( ) { return addressType ; } public String host ( ) { return IDN . toUnicode ( host ) ; } public int port ( ) { return port ; } @Override public void encodeAsByteBuf ( ByteBuf byteBuf ) { byteBuf . writeByte ( protocolVersion ( ) . byteValue ( ) ) ; byteBuf . writeByte ( cmdType . byteValue ( ) ) ; byteBuf . writeByte ( <hex> ) ; byteBuf . writeByte ( addressType . byteValue ( ) ) ; switch ( addressType ) { case IPv4 : { byteBuf . writeBytes ( NetUtil . createByteArrayFromIpAddressString ( host ) ) ; byteBuf . writeShort ( port ) ; break ; } case DOMAIN : { byteBuf . writeByte ( host . length ( ) ) ; byteBuf . writeBytes ( host . getBytes ( CharsetUtil . US_ASCII ) ) ; byteBuf . writeShort ( port ) ; break ; } case IPv6 : { byteBuf . writeBytes ( NetUtil . createByteArrayFromIpAddressString ( host ) ) ; byteBuf . writeShort ( port ) ; break ; } } } } 

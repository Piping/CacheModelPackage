package org . elasticsearch . search . fetch . fielddata ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . search . SearchParseElement ; import org . elasticsearch . search . fetch . FetchSubPhase ; import org . elasticsearch . search . fetch . FetchSubPhaseContext ; import org . elasticsearch . search . fetch . FetchSubPhaseParseElement ; import org . elasticsearch . search . internal . SearchContext ; public class FieldDataFieldsParseElement extends FetchSubPhaseParseElement < FieldDataFieldsContext > { @Override protected void innerParse ( XContentParser parser , FieldDataFieldsContext fieldDataFieldsContext , SearchContext searchContext ) throws Exception { XContentParser . Token token = parser . currentToken ( ) ; if ( token = = XContentParser . Token . START_ARRAY ) { while ( parser . nextToken ( ) ! = XContentParser . Token . END_ARRAY ) { String fieldName = parser . text ( ) ; fieldDataFieldsContext . add ( new FieldDataFieldsContext . FieldDataField ( fieldName ) ) ; } } else if ( token = = XContentParser . Token . VALUE_STRING ) { String fieldName = parser . text ( ) ; fieldDataFieldsContext . add ( new FieldDataFieldsContext . FieldDataField ( fieldName ) ) ; } else { throw new IllegalStateException ( <str> + token ) ; } } @Override protected FetchSubPhase . ContextFactory getContextFactory ( ) { return FieldDataFieldsFetchSubPhase . CONTEXT_FACTORY ; } } 

package org . elasticsearch . http . netty ; import org . elasticsearch . action . admin . cluster . node . info . NodeInfo ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . BoundTransportAddress ; import org . elasticsearch . common . transport . InetSocketTransportAddress ; import org . elasticsearch . node . Node ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import static org . hamcrest . CoreMatchers . is ; import static org . hamcrest . Matchers . arrayWithSize ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . instanceOf ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class HttpPublishPortIT extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( Node . HTTP_ENABLED , true ) . put ( <str> , <int> ) . build ( ) ; } public void testHttpPublishPort ( ) throws Exception { NodesInfoResponse response = client ( ) . admin ( ) . cluster ( ) . prepareNodesInfo ( ) . clear ( ) . setHttp ( true ) . get ( ) ; assertThat ( response . getNodes ( ) , arrayWithSize ( greaterThanOrEqualTo ( <int> ) ) ) ; NodeInfo nodeInfo = response . getNodes ( ) [ <int> ] ; BoundTransportAddress address = nodeInfo . getHttp ( ) . address ( ) ; assertThat ( address . publishAddress ( ) , instanceOf ( InetSocketTransportAddress . class ) ) ; InetSocketTransportAddress publishAddress = ( InetSocketTransportAddress ) address . publishAddress ( ) ; assertThat ( publishAddress . address ( ) . getPort ( ) , is ( <int> ) ) ; } } 

package org . elasticsearch . rest . action . admin . indices . create ; import org . elasticsearch . action . admin . indices . create . CreateIndexRequest ; import org . elasticsearch . action . admin . indices . create . CreateIndexResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; public class RestCreateIndexAction extends BaseRestHandler { @Inject public RestCreateIndexAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( RestRequest . Method . PUT , <str> , this ) ; controller . registerHandler ( RestRequest . Method . POST , <str> , this ) ; } @SuppressWarnings ( { <str> } ) @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { CreateIndexRequest createIndexRequest = new CreateIndexRequest ( request . param ( <str> ) ) ; if ( request . hasContent ( ) ) { createIndexRequest . source ( request . content ( ) ) ; } createIndexRequest . updateAllTypes ( request . paramAsBoolean ( <str> , false ) ) ; createIndexRequest . timeout ( request . paramAsTime ( <str> , createIndexRequest . timeout ( ) ) ) ; createIndexRequest . masterNodeTimeout ( request . paramAsTime ( <str> , createIndexRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . indices ( ) . create ( createIndexRequest , new AcknowledgedRestListener < CreateIndexResponse > ( channel ) ) ; } } 

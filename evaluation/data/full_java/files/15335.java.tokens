package org . gradle . api . publish . plugins ; import org . gradle . api . Incubating ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . artifacts . dsl . RepositoryHandler ; import org . gradle . api . internal . artifacts . ArtifactPublicationServices ; import org . gradle . api . internal . artifacts . ivyservice . projectmodule . DefaultProjectPublication ; import org . gradle . api . internal . artifacts . ivyservice . projectmodule . ProjectPublicationRegistry ; import org . gradle . api . internal . project . ProjectIdentifier ; import org . gradle . api . plugins . ExtensionContainer ; import org . gradle . api . publish . Publication ; import org . gradle . api . publish . PublicationContainer ; import org . gradle . api . publish . PublishingExtension ; import org . gradle . api . publish . internal . DefaultPublicationContainer ; import org . gradle . api . publish . internal . DefaultPublishingExtension ; import org . gradle . api . publish . internal . PublicationInternal ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . model . Model ; import org . gradle . model . ModelMap ; import org . gradle . model . Mutate ; import org . gradle . model . RuleSource ; import javax . inject . Inject ; @Incubating public class PublishingPlugin implements Plugin < Project > { public static final String PUBLISH_TASK_GROUP = <str> ; public static final String PUBLISH_LIFECYCLE_TASK_NAME = <str> ; private final Instantiator instantiator ; private final ArtifactPublicationServices publicationServices ; @Inject public PublishingPlugin ( ArtifactPublicationServices publicationServices , Instantiator instantiator ) { this . publicationServices = publicationServices ; this . instantiator = instantiator ; } public void apply ( final Project project ) { RepositoryHandler repositories = publicationServices . createRepositoryHandler ( ) ; PublicationContainer publications = instantiator . newInstance ( DefaultPublicationContainer . class , instantiator ) ; project . getExtensions ( ) . create ( PublishingExtension . NAME , DefaultPublishingExtension . class , repositories , publications ) ; Task publishLifecycleTask = project . getTasks ( ) . create ( PUBLISH_LIFECYCLE_TASK_NAME ) ; publishLifecycleTask . setDescription ( <str> ) ; publishLifecycleTask . setGroup ( PUBLISH_TASK_GROUP ) ; } static class Rules extends RuleSource { @Model PublishingExtension publishing ( ExtensionContainer extensions ) { return extensions . getByType ( PublishingExtension . class ) ; } @Model ProjectPublicationRegistry projectPublicationRegistry ( ServiceRegistry serviceRegistry ) { return serviceRegistry . get ( ProjectPublicationRegistry . class ) ; } @Mutate void addConfiguredPublicationsToProjectPublicationRegistry ( ProjectPublicationRegistry projectPublicationRegistry , PublishingExtension extension , ProjectIdentifier projectIdentifier ) { for ( Publication publication : extension . getPublications ( ) ) { PublicationInternal internalPublication = ( PublicationInternal ) publication ; projectPublicationRegistry . registerPublication ( projectIdentifier . getPath ( ) , new DefaultProjectPublication ( internalPublication . getCoordinates ( ) ) ) ; } } @Mutate void tasksDependOnProjectPublicationRegistry ( ModelMap < Task > tasks , ProjectPublicationRegistry publicationRegistry ) { } } } 

package com . badlogic . gdx . files ; import java . io . BufferedInputStream ; import java . io . BufferedReader ; import java . io . FileFilter ; import java . io . FilenameFilter ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . Reader ; import java . io . Writer ; import com . badlogic . gdx . Files . FileType ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class FileHandle { public String path ( ) { throw new GdxRuntimeException ( <str> ) ; } public String name ( ) { throw new GdxRuntimeException ( <str> ) ; } public String extension ( ) { throw new GdxRuntimeException ( <str> ) ; } public String nameWithoutExtension ( ) { throw new GdxRuntimeException ( <str> ) ; } public String pathWithoutExtension ( ) { throw new GdxRuntimeException ( <str> ) ; } public FileType type ( ) { throw new GdxRuntimeException ( <str> ) ; } public InputStream read ( ) { throw new GdxRuntimeException ( <str> ) ; } public BufferedInputStream read ( int bufferSize ) { throw new GdxRuntimeException ( <str> ) ; } public Reader reader ( ) { throw new GdxRuntimeException ( <str> ) ; } public Reader reader ( String charset ) { throw new GdxRuntimeException ( <str> ) ; } public BufferedReader reader ( int bufferSize ) { throw new GdxRuntimeException ( <str> ) ; } public BufferedReader reader ( int bufferSize , String charset ) { throw new GdxRuntimeException ( <str> ) ; } public String readString ( ) { throw new GdxRuntimeException ( <str> ) ; } public String readString ( String charset ) { throw new GdxRuntimeException ( <str> ) ; } public byte [ ] readBytes ( ) { throw new GdxRuntimeException ( <str> ) ; } public int readBytes ( byte [ ] bytes , int offset , int size ) { throw new GdxRuntimeException ( <str> ) ; } public OutputStream write ( boolean append ) { throw new GdxRuntimeException ( <str> ) ; } public OutputStream write ( boolean append , int bufferSize ) { throw new GdxRuntimeException ( <str> ) ; } public void write ( InputStream input , boolean append ) { throw new GdxRuntimeException ( <str> ) ; } public Writer writer ( boolean append ) { throw new GdxRuntimeException ( <str> ) ; } public Writer writer ( boolean append , String charset ) { throw new GdxRuntimeException ( <str> ) ; } public void writeString ( String string , boolean append ) { throw new GdxRuntimeException ( <str> ) ; } public void writeString ( String string , boolean append , String charset ) { throw new GdxRuntimeException ( <str> ) ; } public void writeBytes ( byte [ ] bytes , boolean append ) { throw new GdxRuntimeException ( <str> ) ; } public void writeBytes ( byte [ ] bytes , int offset , int length , boolean append ) { throw new GdxRuntimeException ( <str> ) ; } public FileHandle [ ] list ( FileFilter filter ) { throw new GdxRuntimeException ( <str> ) ; } public FileHandle [ ] list ( FilenameFilter filter ) { throw new GdxRuntimeException ( <str> ) ; } public FileHandle [ ] list ( ) { throw new GdxRuntimeException ( <str> ) ; } public FileHandle [ ] list ( String suffix ) { throw new GdxRuntimeException ( <str> ) ; } public boolean isDirectory ( ) { throw new GdxRuntimeException ( <str> ) ; } public FileHandle child ( String name ) { throw new GdxRuntimeException ( <str> ) ; } public FileHandle parent ( ) { throw new GdxRuntimeException ( <str> ) ; } public FileHandle sibling ( String name ) { throw new GdxRuntimeException ( <str> ) ; } public void mkdirs ( ) { throw new GdxRuntimeException ( <str> ) ; } public boolean exists ( ) { throw new GdxRuntimeException ( <str> ) ; } public boolean delete ( ) { throw new GdxRuntimeException ( <str> ) ; } public boolean deleteDirectory ( ) { throw new GdxRuntimeException ( <str> ) ; } public void copyTo ( FileHandle dest ) { throw new GdxRuntimeException ( <str> ) ; } public void moveTo ( FileHandle dest ) { throw new GdxRuntimeException ( <str> ) ; } public long length ( ) { throw new GdxRuntimeException ( <str> ) ; } public long lastModified ( ) { throw new GdxRuntimeException ( <str> ) ; } public String toString ( ) { throw new GdxRuntimeException ( <str> ) ; } } 

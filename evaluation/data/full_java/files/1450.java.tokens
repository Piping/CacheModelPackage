package org . apache . cassandra . db ; import static org . junit . Assert . * ; import java . io . * ; import com . google . common . base . Predicate ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . db . commitlog . CommitLogTestReplayer ; import org . apache . cassandra . db . partitions . PartitionUpdate ; import org . apache . cassandra . db . rows . Row ; import org . apache . cassandra . db . marshal . AsciiType ; import org . apache . cassandra . db . marshal . BytesType ; import org . apache . cassandra . db . partitions . FilteredPartition ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . io . IVersionedSerializer ; import org . apache . cassandra . io . util . DataInputBuffer ; import org . apache . cassandra . io . util . DataInputPlus ; import org . apache . cassandra . io . util . DataOutputBuffer ; import org . apache . cassandra . net . MessagingService ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . utils . ByteBufferUtil ; public class ReadMessageTest { private static final String KEYSPACE1 = <str> ; private static final String KEYSPACENOCOMMIT = <str> ; private static final String CF = <str> ; private static final String CF_FOR_READ_TEST = <str> ; private static final String CF_FOR_COMMIT_TEST = <str> ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { CFMetaData cfForReadMetadata = CFMetaData . Builder . create ( KEYSPACE1 , CF_FOR_READ_TEST ) . addPartitionKey ( <str> , BytesType . instance ) . addClusteringColumn ( <str> , AsciiType . instance ) . addClusteringColumn ( <str> , AsciiType . instance ) . addRegularColumn ( <str> , AsciiType . instance ) . addRegularColumn ( <str> , AsciiType . instance ) . build ( ) ; CFMetaData cfForCommitMetadata1 = CFMetaData . Builder . create ( KEYSPACE1 , CF_FOR_COMMIT_TEST ) . addPartitionKey ( <str> , BytesType . instance ) . addClusteringColumn ( <str> , AsciiType . instance ) . addRegularColumn ( <str> , AsciiType . instance ) . build ( ) ; CFMetaData cfForCommitMetadata2 = CFMetaData . Builder . create ( KEYSPACENOCOMMIT , CF_FOR_COMMIT_TEST ) . addPartitionKey ( <str> , BytesType . instance ) . addClusteringColumn ( <str> , AsciiType . instance ) . addRegularColumn ( <str> , AsciiType . instance ) . build ( ) ; SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF ) , cfForReadMetadata , cfForCommitMetadata1 ) ; SchemaLoader . createKeyspace ( KEYSPACENOCOMMIT , KeyspaceParams . simpleTransient ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACENOCOMMIT , CF ) , cfForCommitMetadata2 ) ; } @Test public void testMakeReadMessage ( ) throws IOException { ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF_FOR_READ_TEST ) ; ReadCommand rm , rm2 ; rm = Util . cmd ( cfs , Util . dk ( <str> ) ) . includeRow ( <str> , <str> ) . build ( ) ; rm2 = serializeAndDeserializeReadMessage ( rm ) ; assertEquals ( rm . toString ( ) , rm2 . toString ( ) ) ; rm = Util . cmd ( cfs , Util . dk ( <str> ) ) . includeRow ( <str> , <str> ) . reverse ( ) . build ( ) ; rm2 = serializeAndDeserializeReadMessage ( rm ) ; assertEquals ( rm . toString ( ) , rm2 . toString ( ) ) ; rm = Util . cmd ( cfs ) . build ( ) ; rm2 = serializeAndDeserializeReadMessage ( rm ) ; assertEquals ( rm . toString ( ) , rm2 . toString ( ) ) ; rm = Util . cmd ( cfs ) . fromKeyIncl ( ByteBufferUtil . bytes ( <str> ) ) . toKeyIncl ( ByteBufferUtil . bytes ( <str> ) ) . build ( ) ; rm2 = serializeAndDeserializeReadMessage ( rm ) ; assertEquals ( rm . toString ( ) , rm2 . toString ( ) ) ; rm = Util . cmd ( cfs ) . columns ( <str> ) . build ( ) ; rm2 = serializeAndDeserializeReadMessage ( rm ) ; assertEquals ( rm . toString ( ) , rm2 . toString ( ) ) ; rm = Util . cmd ( cfs ) . includeRow ( <str> , <str> ) . columns ( <str> ) . build ( ) ; rm2 = serializeAndDeserializeReadMessage ( rm ) ; assertEquals ( rm . toString ( ) , rm2 . toString ( ) ) ; rm = Util . cmd ( cfs ) . fromKeyIncl ( ByteBufferUtil . bytes ( <str> ) ) . includeRow ( <str> , <str> ) . columns ( <str> ) . build ( ) ; rm2 = serializeAndDeserializeReadMessage ( rm ) ; assertEquals ( rm . toString ( ) , rm2 . toString ( ) ) ; } private ReadCommand serializeAndDeserializeReadMessage ( ReadCommand rm ) throws IOException { IVersionedSerializer < ReadCommand > rms = ReadCommand . serializer ; DataOutputBuffer out = new DataOutputBuffer ( ) ; rms . serialize ( rm , out , MessagingService . current_version ) ; DataInputPlus dis = new DataInputBuffer ( out . getData ( ) ) ; return rms . deserialize ( dis , MessagingService . current_version ) ; } @Test public void testGetColumn ( ) { ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF ) ; new RowUpdateBuilder ( cfs . metadata , <int> , ByteBufferUtil . bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . bytes ( <str> ) ) . build ( ) . apply ( ) ; ColumnDefinition col = cfs . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; int found = <int> ; for ( FilteredPartition partition : Util . getAll ( Util . cmd ( cfs ) . build ( ) ) ) { for ( Row r : partition ) { if ( r . getCell ( col ) . value ( ) . equals ( ByteBufferUtil . bytes ( <str> ) ) ) + + found ; } } assertEquals ( <int> , found ) ; } @Test public void testNoCommitLog ( ) throws Exception { ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF_FOR_COMMIT_TEST ) ; ColumnFamilyStore cfsnocommit = Keyspace . open ( KEYSPACENOCOMMIT ) . getColumnFamilyStore ( CF_FOR_COMMIT_TEST ) ; new RowUpdateBuilder ( cfs . metadata , <int> , ByteBufferUtil . bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . bytes ( <str> ) ) . build ( ) . apply ( ) ; new RowUpdateBuilder ( cfsnocommit . metadata , <int> , ByteBufferUtil . bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . bytes ( <str> ) ) . build ( ) . apply ( ) ; Checker checker = new Checker ( cfs . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) , cfsnocommit . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ) ; CommitLogTestReplayer . examineCommitLog ( checker ) ; assertTrue ( checker . commitLogMessageFound ) ; assertFalse ( checker . noCommitLogMessageFound ) ; } static class Checker implements Predicate < Mutation > { private final ColumnDefinition withCommit ; private final ColumnDefinition withoutCommit ; boolean commitLogMessageFound = false ; boolean noCommitLogMessageFound = false ; public Checker ( ColumnDefinition withCommit , ColumnDefinition withoutCommit ) { this . withCommit = withCommit ; this . withoutCommit = withoutCommit ; } public boolean apply ( Mutation mutation ) { for ( PartitionUpdate upd : mutation . getPartitionUpdates ( ) ) { Row r = upd . getRow ( new Clustering ( ByteBufferUtil . bytes ( <str> ) ) ) ; if ( r ! = null ) { if ( r . getCell ( withCommit ) ! = null ) commitLogMessageFound = true ; if ( r . getCell ( withoutCommit ) ! = null ) noCommitLogMessageFound = true ; } } return true ; } } } 

package org . eclipse . debug . tests . launching ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationManager ; import junit . framework . TestCase ; public abstract class AbstractLaunchTest extends TestCase { public AbstractLaunchTest ( String name ) { super ( name ) ; } protected ILaunchManager getLaunchManager ( ) { return DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; } protected LaunchConfigurationManager getLaunchConfigurationManager ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; } protected ILaunchConfiguration getLaunchConfiguration ( String name ) throws CoreException { ILaunchManager manager = getLaunchManager ( ) ; ILaunchConfiguration [ ] configurations = manager . getLaunchConfigurations ( ) ; for ( int i = <int> ; i < configurations . length ; i + + ) { ILaunchConfiguration config = configurations [ i ] ; if ( config . getName ( ) . equals ( name ) ) { return config ; } } ILaunchConfigurationType type = getLaunchManager ( ) . getLaunchConfigurationType ( LaunchConfigurationTests . ID_TEST_LAUNCH_TYPE ) ; ILaunchConfigurationWorkingCopy wc = type . newInstance ( null , name ) ; ILaunchConfiguration saved = wc . doSave ( ) ; return saved ; } } 

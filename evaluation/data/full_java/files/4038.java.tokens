package org . eclipse . debug . internal . ui . actions ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . jface . viewers . ViewerFilter ; import org . eclipse . swt . custom . BusyIndicator ; public abstract class ToggleFilterAction extends Action { private StructuredViewer fViewer ; private ViewerFilter fViewerFilter ; @Override public void run ( ) { valueChanged ( isChecked ( ) ) ; } protected void valueChanged ( final boolean on ) { if ( getViewer ( ) . getControl ( ) . isDisposed ( ) ) { return ; } BusyIndicator . showWhile ( getViewer ( ) . getControl ( ) . getDisplay ( ) , new Runnable ( ) { @Override public void run ( ) { if ( on ) { ViewerFilter filter = getViewerFilter ( ) ; ViewerFilter [ ] filters = getViewer ( ) . getFilters ( ) ; boolean alreadyAdded = false ; for ( int i = <int> ; i < filters . length ; i + + ) { ViewerFilter addedFilter = filters [ i ] ; if ( addedFilter . equals ( filter ) ) { alreadyAdded = true ; break ; } } if ( ! alreadyAdded ) { getViewer ( ) . addFilter ( filter ) ; } } else { getViewer ( ) . removeFilter ( getViewerFilter ( ) ) ; } } } ) ; } protected ViewerFilter getViewerFilter ( ) { return fViewerFilter ; } protected void setViewerFilter ( ViewerFilter filter ) { fViewerFilter = filter ; } protected StructuredViewer getViewer ( ) { return fViewer ; } protected void setViewer ( StructuredViewer viewer ) { fViewer = viewer ; } } 

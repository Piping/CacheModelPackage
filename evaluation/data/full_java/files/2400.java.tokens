package jcuda . driver ; public class CUDA_RESOURCE_DESC { public int resType ; public int flags ; public CUarray array_hArray = new CUarray ( ) ; public CUmipmappedArray mipmap_hMipmappedArray ; public CUdeviceptr linear_devPtr = new CUdeviceptr ( ) ; public int linear_format ; public int linear_numChannels ; public long linear_sizeInBytes ; public CUdeviceptr pitch2D_devPtr = new CUdeviceptr ( ) ; public int pitch2D_format ; public int pitch2D_numChannels ; public long pitch2D_width ; public long pitch2D_height ; public long pitch2D_pitchInBytes ; public CUDA_RESOURCE_DESC ( ) { } @Override public String toString ( ) { return <str> + createString ( <str> ) + <str> ; } public String toFormattedString ( ) { return <str> + createString ( <str> ) ; } private String createString ( String f ) { StringBuilder sb = new StringBuilder ( ) ; switch ( resType ) { case CUresourcetype . CU_RESOURCE_TYPE_ARRAY : sb . append ( <str> + array_hArray + f ) ; break ; case CUresourcetype . CU_RESOURCE_TYPE_MIPMAPPED_ARRAY : sb . append ( <str> + mipmap_hMipmappedArray + f ) ; break ; case CUresourcetype . CU_RESOURCE_TYPE_LINEAR : sb . append ( <str> + linear_devPtr + f ) ; sb . append ( <str> + CUarray_format . stringFor ( linear_format ) + f ) ; sb . append ( <str> + linear_numChannels + f ) ; sb . append ( <str> + linear_sizeInBytes + f ) ; break ; case CUresourcetype . CU_RESOURCE_TYPE_PITCH2D : sb . append ( <str> + pitch2D_devPtr + f ) ; sb . append ( <str> + CUarray_format . stringFor ( pitch2D_format ) + f ) ; sb . append ( <str> + pitch2D_numChannels + f ) ; sb . append ( <str> + pitch2D_width + f ) ; sb . append ( <str> + pitch2D_height + f ) ; sb . append ( <str> + pitch2D_pitchInBytes + f ) ; break ; default : sb . append ( <str> ) ; } return sb . toString ( ) ; } } 

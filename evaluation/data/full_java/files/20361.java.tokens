package io . netty . channel . epoll ; import io . netty . channel . unix . FileDescriptor ; public final class Epoll { private static final Throwable UNAVAILABILITY_CAUSE ; static { Throwable cause = null ; FileDescriptor epollFd = null ; FileDescriptor eventFd = null ; try { epollFd = Native . newEpollCreate ( ) ; eventFd = Native . newEventFd ( ) ; } catch ( Throwable t ) { cause = t ; } finally { if ( epollFd ! = null ) { try { epollFd . close ( ) ; } catch ( Exception ignore ) { } } if ( eventFd ! = null ) { try { eventFd . close ( ) ; } catch ( Exception ignore ) { } } } if ( cause ! = null ) { UNAVAILABILITY_CAUSE = cause ; } else { UNAVAILABILITY_CAUSE = null ; } } public static boolean isAvailable ( ) { return UNAVAILABILITY_CAUSE = = null ; } public static void ensureAvailability ( ) { if ( UNAVAILABILITY_CAUSE ! = null ) { throw ( Error ) new UnsatisfiedLinkError ( <str> ) . initCause ( UNAVAILABILITY_CAUSE ) ; } } public static Throwable unavailabilityCause ( ) { return UNAVAILABILITY_CAUSE ; } private Epoll ( ) { } } 

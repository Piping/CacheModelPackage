package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . truth . Truth . assertThat ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . MinimalCollection ; import com . google . common . collect . testing . SetTestSuiteBuilder ; import com . google . common . collect . testing . TestStringListGenerator ; import com . google . common . collect . testing . TestStringSetGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . MultisetTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringMultisetGenerator ; import com . google . common . collect . testing . google . UnmodifiableCollectionTests ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashSet ; import java . util . Iterator ; import java . util . List ; import java . util . Set ; @GwtCompatible ( emulated = true ) public class ImmutableMultisetTest extends TestCase { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( ImmutableMultisetTest . class ) ; suite . addTest ( MultisetTestSuiteBuilder . using ( new TestStringMultisetGenerator ( ) { @Override protected Multiset < String > create ( String [ ] elements ) { return ImmutableMultiset . copyOf ( elements ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . SERIALIZABLE_INCLUDING_VIEWS , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return ImmutableMultiset . copyOf ( elements ) . elementSet ( ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . SERIALIZABLE , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new TestStringListGenerator ( ) { @Override protected List < String > create ( String [ ] elements ) { return ImmutableMultiset . copyOf ( elements ) . asList ( ) ; } @Override public List < String > order ( List < String > insertionOrder ) { List < String > order = new ArrayList < String > ( ) ; for ( String s : insertionOrder ) { int index = order . indexOf ( s ) ; if ( index = = - <int> ) { order . add ( s ) ; } else { order . add ( index , s ) ; } } return order ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . SERIALIZABLE , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( ListTestSuiteBuilder . using ( new TestStringListGenerator ( ) { @Override protected List < String > create ( String [ ] elements ) { Set < String > set = new HashSet < String > ( ) ; ImmutableMultiset . Builder < String > builder = ImmutableMultiset . builder ( ) ; for ( String s : elements ) { checkArgument ( set . add ( s ) ) ; builder . addCopies ( s , <int> ) ; } ImmutableSet < String > elementSet = ( ImmutableSet < String > ) builder . build ( ) . elementSet ( ) ; return elementSet . asList ( ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . REJECTS_DUPLICATES_AT_CREATION , CollectionFeature . SERIALIZABLE , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; return suite ; } public void testCreation_noArgs ( ) { Multiset < String > multiset = ImmutableMultiset . of ( ) ; assertTrue ( multiset . isEmpty ( ) ) ; } public void testCreation_oneElement ( ) { Multiset < String > multiset = ImmutableMultiset . of ( <str> ) ; assertEquals ( HashMultiset . create ( asList ( <str> ) ) , multiset ) ; } public void testCreation_twoElements ( ) { Multiset < String > multiset = ImmutableMultiset . of ( <str> , <str> ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> ) ) , multiset ) ; } public void testCreation_threeElements ( ) { Multiset < String > multiset = ImmutableMultiset . of ( <str> , <str> , <str> ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> ) ) , multiset ) ; } public void testCreation_fourElements ( ) { Multiset < String > multiset = ImmutableMultiset . of ( <str> , <str> , <str> , <str> ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testCreation_fiveElements ( ) { Multiset < String > multiset = ImmutableMultiset . of ( <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testCreation_sixElements ( ) { Multiset < String > multiset = ImmutableMultiset . of ( <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testCreation_sevenElements ( ) { Multiset < String > multiset = ImmutableMultiset . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testCreation_emptyArray ( ) { String [ ] array = new String [ <int> ] ; Multiset < String > multiset = ImmutableMultiset . copyOf ( array ) ; assertTrue ( multiset . isEmpty ( ) ) ; } public void testCreation_arrayOfOneElement ( ) { String [ ] array = new String [ ] { <str> } ; Multiset < String > multiset = ImmutableMultiset . copyOf ( array ) ; assertEquals ( HashMultiset . create ( asList ( <str> ) ) , multiset ) ; } public void testCreation_arrayOfArray ( ) { String [ ] array = new String [ ] { <str> } ; Multiset < String [ ] > multiset = ImmutableMultiset . < String [ ] > of ( array ) ; Multiset < String [ ] > expected = HashMultiset . create ( ) ; expected . add ( array ) ; assertEquals ( expected , multiset ) ; } public void testCreation_arrayContainingOnlyNull ( ) { String [ ] array = new String [ ] { null } ; try { ImmutableMultiset . copyOf ( array ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_collection_empty ( ) { Collection < String > c = MinimalCollection . < String > of ( ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( c ) ; assertTrue ( multiset . isEmpty ( ) ) ; } public void testCopyOf_collection_oneElement ( ) { Collection < String > c = MinimalCollection . of ( <str> ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( c ) ; assertEquals ( HashMultiset . create ( asList ( <str> ) ) , multiset ) ; } public void testCopyOf_collection_general ( ) { Collection < String > c = MinimalCollection . of ( <str> , <str> , <str> ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( c ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> ) ) , multiset ) ; } public void testCopyOf_collectionContainingNull ( ) { Collection < String > c = MinimalCollection . of ( <str> , null , <str> ) ; try { ImmutableMultiset . copyOf ( c ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_multiset_empty ( ) { Multiset < String > c = HashMultiset . create ( ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( c ) ; assertTrue ( multiset . isEmpty ( ) ) ; } public void testCopyOf_multiset_oneElement ( ) { Multiset < String > c = HashMultiset . create ( asList ( <str> ) ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( c ) ; assertEquals ( HashMultiset . create ( asList ( <str> ) ) , multiset ) ; } public void testCopyOf_multiset_general ( ) { Multiset < String > c = HashMultiset . create ( asList ( <str> , <str> , <str> ) ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( c ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> ) ) , multiset ) ; } public void testCopyOf_multisetContainingNull ( ) { Multiset < String > c = HashMultiset . create ( asList ( <str> , null , <str> ) ) ; try { ImmutableMultiset . copyOf ( c ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOf_iterator_empty ( ) { Iterator < String > iterator = Iterators . emptyIterator ( ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( iterator ) ; assertTrue ( multiset . isEmpty ( ) ) ; } public void testCopyOf_iterator_oneElement ( ) { Iterator < String > iterator = Iterators . singletonIterator ( <str> ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( iterator ) ; assertEquals ( HashMultiset . create ( asList ( <str> ) ) , multiset ) ; } public void testCopyOf_iterator_general ( ) { Iterator < String > iterator = asList ( <str> , <str> , <str> ) . iterator ( ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( iterator ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> ) ) , multiset ) ; } public void testCopyOf_iteratorContainingNull ( ) { Iterator < String > iterator = asList ( <str> , null , <str> ) . iterator ( ) ; try { ImmutableMultiset . copyOf ( iterator ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } private static class CountingIterable implements Iterable < String > { int count = <int> ; @Override public Iterator < String > iterator ( ) { count + + ; return asList ( <str> , <str> , <str> ) . iterator ( ) ; } } public void testCopyOf_plainIterable ( ) { CountingIterable iterable = new CountingIterable ( ) ; Multiset < String > multiset = ImmutableMultiset . copyOf ( iterable ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> ) ) , multiset ) ; assertEquals ( <int> , iterable . count ) ; } public void testCopyOf_shortcut_empty ( ) { Collection < String > c = ImmutableMultiset . of ( ) ; assertSame ( c , ImmutableMultiset . copyOf ( c ) ) ; } public void testCopyOf_shortcut_singleton ( ) { Collection < String > c = ImmutableMultiset . of ( <str> ) ; assertSame ( c , ImmutableMultiset . copyOf ( c ) ) ; } public void testCopyOf_shortcut_immutableMultiset ( ) { Collection < String > c = ImmutableMultiset . of ( <str> , <str> , <str> ) ; assertSame ( c , ImmutableMultiset . copyOf ( c ) ) ; } public void testBuilderAdd ( ) { ImmutableMultiset < String > multiset = new ImmutableMultiset . Builder < String > ( ) . add ( <str> ) . add ( <str> ) . add ( <str> ) . add ( <str> ) . build ( ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testBuilderAddAll ( ) { List < String > a = asList ( <str> , <str> ) ; List < String > b = asList ( <str> , <str> ) ; ImmutableMultiset < String > multiset = new ImmutableMultiset . Builder < String > ( ) . addAll ( a ) . addAll ( b ) . build ( ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testBuilderAddAllMultiset ( ) { Multiset < String > a = HashMultiset . create ( asList ( <str> , <str> , <str> ) ) ; Multiset < String > b = HashMultiset . create ( asList ( <str> , <str> ) ) ; ImmutableMultiset < String > multiset = new ImmutableMultiset . Builder < String > ( ) . addAll ( a ) . addAll ( b ) . build ( ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testBuilderAddAllIterator ( ) { Iterator < String > iterator = asList ( <str> , <str> , <str> , <str> ) . iterator ( ) ; ImmutableMultiset < String > multiset = new ImmutableMultiset . Builder < String > ( ) . addAll ( iterator ) . build ( ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testBuilderAddCopies ( ) { ImmutableMultiset < String > multiset = new ImmutableMultiset . Builder < String > ( ) . addCopies ( <str> , <int> ) . addCopies ( <str> , <int> ) . addCopies ( <str> , <int> ) . build ( ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testBuilderSetCount ( ) { ImmutableMultiset < String > multiset = new ImmutableMultiset . Builder < String > ( ) . add ( <str> ) . setCount ( <str> , <int> ) . setCount ( <str> , <int> ) . build ( ) ; assertEquals ( HashMultiset . create ( asList ( <str> , <str> , <str> , <str> , <str> ) ) , multiset ) ; } public void testBuilderAddHandlesNullsCorrectly ( ) { ImmutableMultiset . Builder < String > builder = ImmutableMultiset . builder ( ) ; try { builder . add ( ( String ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } public void testBuilderAddAllHandlesNullsCorrectly ( ) { ImmutableMultiset . Builder < String > builder = ImmutableMultiset . builder ( ) ; try { builder . addAll ( ( Collection < String > ) null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = ImmutableMultiset . builder ( ) ; List < String > listWithNulls = asList ( <str> , null , <str> ) ; try { builder . addAll ( listWithNulls ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } builder = ImmutableMultiset . builder ( ) ; Multiset < String > multisetWithNull = LinkedHashMultiset . create ( asList ( <str> , null , <str> ) ) ; try { builder . addAll ( multisetWithNull ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } public void testBuilderAddCopiesHandlesNullsCorrectly ( ) { ImmutableMultiset . Builder < String > builder = ImmutableMultiset . builder ( ) ; try { builder . addCopies ( null , <int> ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } public void testBuilderAddCopiesIllegal ( ) { ImmutableMultiset . Builder < String > builder = ImmutableMultiset . builder ( ) ; try { builder . addCopies ( <str> , - <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testBuilderSetCountHandlesNullsCorrectly ( ) { ImmutableMultiset . Builder < String > builder = ImmutableMultiset . builder ( ) ; try { builder . setCount ( null , <int> ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } public void testBuilderSetCountIllegal ( ) { ImmutableMultiset . Builder < String > builder = ImmutableMultiset . builder ( ) ; try { builder . setCount ( <str> , - <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } @GwtIncompatible ( <str> ) public void testNullPointers ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( ImmutableMultiset . class ) ; } @GwtIncompatible ( <str> ) public void testSerialization_empty ( ) { Collection < String > c = ImmutableMultiset . of ( ) ; assertSame ( c , SerializableTester . reserialize ( c ) ) ; } @GwtIncompatible ( <str> ) public void testSerialization_multiple ( ) { Collection < String > c = ImmutableMultiset . of ( <str> , <str> , <str> ) ; Collection < String > copy = SerializableTester . reserializeAndAssert ( c ) ; assertThat ( copy ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testSerialization_elementSet ( ) { Multiset < String > c = ImmutableMultiset . of ( <str> , <str> , <str> ) ; Collection < String > copy = LenientSerializableTester . reserializeAndAssertLenient ( c . elementSet ( ) ) ; assertThat ( copy ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testSerialization_entrySet ( ) { Multiset < String > c = ImmutableMultiset . of ( <str> , <str> , <str> ) ; SerializableTester . reserializeAndAssert ( c . entrySet ( ) ) ; } public void testEquals_immutableMultiset ( ) { Collection < String > c = ImmutableMultiset . of ( <str> , <str> , <str> ) ; assertEquals ( c , ImmutableMultiset . of ( <str> , <str> , <str> ) ) ; assertEquals ( c , ImmutableMultiset . of ( <str> , <str> , <str> ) ) ; assertThat ( c ) . isNotEqualTo ( ImmutableMultiset . of ( <str> , <str> ) ) ; assertThat ( c ) . isNotEqualTo ( ImmutableMultiset . of ( <str> , <str> , <str> , <str> ) ) ; } public void testIterationOrder ( ) { Collection < String > c = ImmutableMultiset . of ( <str> , <str> , <str> ) ; assertThat ( c ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } public void testMultisetWrites ( ) { Multiset < String > multiset = ImmutableMultiset . of ( <str> , <str> , <str> ) ; UnmodifiableCollectionTests . assertMultisetIsUnmodifiable ( multiset , <str> ) ; } public void testAsList ( ) { ImmutableMultiset < String > multiset = ImmutableMultiset . of ( <str> , <str> , <str> , <str> , <str> ) ; ImmutableList < String > list = multiset . asList ( ) ; assertEquals ( ImmutableList . of ( <str> , <str> , <str> , <str> , <str> ) , list ) ; assertEquals ( <int> , list . indexOf ( <str> ) ) ; assertEquals ( <int> , list . lastIndexOf ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testSerialization_asList ( ) { ImmutableMultiset < String > multiset = ImmutableMultiset . of ( <str> , <str> , <str> , <str> , <str> ) ; SerializableTester . reserializeAndAssert ( multiset . asList ( ) ) ; } public void testEquals ( ) { new EqualsTester ( ) . addEqualityGroup ( ImmutableMultiset . of ( ) , ImmutableMultiset . of ( ) ) . addEqualityGroup ( ImmutableMultiset . of ( <int> ) , ImmutableMultiset . of ( <int> ) ) . addEqualityGroup ( ImmutableMultiset . of ( <int> , <int> ) , ImmutableMultiset . of ( <int> , <int> ) ) . addEqualityGroup ( ImmutableMultiset . of ( <int> , <int> , <int> ) , ImmutableMultiset . of ( <int> , <int> , <int> ) ) . testEquals ( ) ; } } 

package org . elasticsearch . action . support ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . Booleans ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . regex . Regex ; import org . elasticsearch . common . settings . Settings ; public final class AutoCreateIndex { private final boolean needToCheck ; private final boolean globallyDisabled ; private final String [ ] matches ; private final String [ ] matches2 ; private final IndexNameExpressionResolver resolver ; @Inject public AutoCreateIndex ( Settings settings , IndexNameExpressionResolver resolver ) { this . resolver = resolver ; String value = settings . get ( <str> ) ; if ( value = = null | | Booleans . isExplicitTrue ( value ) ) { needToCheck = true ; globallyDisabled = false ; matches = null ; matches2 = null ; } else if ( Booleans . isExplicitFalse ( value ) ) { needToCheck = false ; globallyDisabled = true ; matches = null ; matches2 = null ; } else { needToCheck = true ; globallyDisabled = false ; matches = Strings . commaDelimitedListToStringArray ( value ) ; matches2 = new String [ matches . length ] ; for ( int i = <int> ; i < matches . length ; i + + ) { matches2 [ i ] = matches [ i ] . substring ( <int> ) ; } } } public boolean needToCheck ( ) { return this . needToCheck ; } public boolean shouldAutoCreate ( String index , ClusterState state ) { if ( ! needToCheck ) { return false ; } boolean exists = resolver . hasIndexOrAlias ( index , state ) ; if ( exists ) { return false ; } if ( globallyDisabled ) { return false ; } if ( matches = = null ) { return true ; } for ( int i = <int> ; i < matches . length ; i + + ) { char c = matches [ i ] . charAt ( <int> ) ; if ( c = = <str> ) { if ( Regex . simpleMatch ( matches2 [ i ] , index ) ) { return false ; } } else if ( c = = <str> ) { if ( Regex . simpleMatch ( matches2 [ i ] , index ) ) { return true ; } } else { if ( Regex . simpleMatch ( matches [ i ] , index ) ) { return true ; } } } return false ; } } 

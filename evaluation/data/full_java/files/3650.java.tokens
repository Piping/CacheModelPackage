package org . eclipse . debug . core . sourcelookup . containers ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . ISourcePathComputer ; import org . eclipse . debug . internal . core . sourcelookup . SourceLookupMessages ; public class DefaultSourceContainer extends CompositeSourceContainer { public static final String TYPE_ID = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public DefaultSourceContainer ( ) { } @Override public boolean equals ( Object obj ) { return obj instanceof DefaultSourceContainer ; } @Override public int hashCode ( ) { return getClass ( ) . hashCode ( ) ; } protected ILaunchConfiguration getLaunchConfiguration ( ) { ISourceLookupDirector director = getDirector ( ) ; if ( director ! = null ) { return director . getLaunchConfiguration ( ) ; } return null ; } @Override public ISourceContainerType getType ( ) { return getSourceContainerType ( TYPE_ID ) ; } private ISourcePathComputer getSourcePathComputer ( ) { ISourceLookupDirector director = getDirector ( ) ; if ( director ! = null ) { return director . getSourcePathComputer ( ) ; } return null ; } @Override public String getName ( ) { return SourceLookupMessages . DefaultSourceContainer_0 ; } @Override protected ISourceContainer [ ] createSourceContainers ( ) throws CoreException { ISourcePathComputer sourcePathComputer = getSourcePathComputer ( ) ; if ( sourcePathComputer ! = null ) { ILaunchConfiguration config = getLaunchConfiguration ( ) ; if ( config ! = null ) { return sourcePathComputer . computeSourceContainers ( config , null ) ; } } return new ISourceContainer [ <int> ] ; } } 

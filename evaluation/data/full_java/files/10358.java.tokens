package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import com . google . common . collect . testing . google . SetMultimapTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringSetMultimapGenerator ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Map . Entry ; @GwtCompatible ( emulated = true ) public class HashMultimapTest extends TestCase { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( SetMultimapTestSuiteBuilder . using ( new TestStringSetMultimapGenerator ( ) { @Override protected SetMultimap < String , String > create ( Entry < String , String > [ ] entries ) { SetMultimap < String , String > multimap = HashMultimap . create ( ) ; for ( Entry < String , String > entry : entries ) { multimap . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return multimap ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE , MapFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . SERIALIZABLE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTestSuite ( HashMultimapTest . class ) ; return suite ; } public void testCreate ( ) { HashMultimap < String , Integer > multimap = HashMultimap . create ( ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; assertEquals ( ImmutableSet . of ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . expectedValuesPerKey ) ; } public void testCreateFromMultimap ( ) { HashMultimap < String , Integer > multimap = HashMultimap . create ( ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; HashMultimap < String , Integer > copy = HashMultimap . create ( multimap ) ; assertEquals ( multimap , copy ) ; assertEquals ( <int> , copy . expectedValuesPerKey ) ; } public void testCreateFromSizes ( ) { HashMultimap < String , Integer > multimap = HashMultimap . create ( <int> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; assertEquals ( ImmutableSet . of ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . expectedValuesPerKey ) ; } public void testCreateFromIllegalSizes ( ) { try { HashMultimap . create ( - <int> , <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { HashMultimap . create ( <int> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testEmptyMultimapsEqual ( ) { Multimap < String , Integer > setMultimap = HashMultimap . create ( ) ; Multimap < String , Integer > listMultimap = ArrayListMultimap . create ( ) ; assertTrue ( setMultimap . equals ( listMultimap ) ) ; assertTrue ( listMultimap . equals ( setMultimap ) ) ; } } 

package org . elasticsearch . index . analysis ; import com . carrotsearch . randomizedtesting . generators . RandomPicks ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . en . EnglishAnalyzer ; import org . apache . lucene . analysis . standard . StandardAnalyzer ; import org . apache . lucene . analysis . tokenattributes . CharTermAttribute ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . indices . analysis . PreBuiltAnalyzers ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . IndexSettingsModule ; import org . elasticsearch . test . VersionUtils ; import java . io . IOException ; import java . util . * ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . instanceOf ; public class AnalysisServiceTests extends ESTestCase { private static AnalyzerProvider analyzerProvider ( final String name ) { return new PreBuiltAnalyzerProvider ( name , AnalyzerScope . INDEX , new EnglishAnalyzer ( ) ) ; } public void testDefaultAnalyzers ( ) throws IOException { Version version = VersionUtils . randomVersion ( getRandom ( ) ) ; Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , settings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings ) ; assertThat ( analysisService . defaultIndexAnalyzer ( ) . analyzer ( ) , instanceOf ( StandardAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchAnalyzer ( ) . analyzer ( ) , instanceOf ( StandardAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchQuoteAnalyzer ( ) . analyzer ( ) , instanceOf ( StandardAnalyzer . class ) ) ; } public void testOverrideDefaultAnalyzer ( ) throws IOException { Version version = VersionUtils . randomVersion ( getRandom ( ) ) ; Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; AnalysisService analysisService = new AnalysisService ( IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , settings ) , Collections . singletonMap ( <str> , analyzerProvider ( <str> ) ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) ) ; assertThat ( analysisService . defaultIndexAnalyzer ( ) . analyzer ( ) , instanceOf ( EnglishAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchAnalyzer ( ) . analyzer ( ) , instanceOf ( EnglishAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchQuoteAnalyzer ( ) . analyzer ( ) , instanceOf ( EnglishAnalyzer . class ) ) ; } public void testOverrideDefaultIndexAnalyzer ( ) { Version version = VersionUtils . randomVersionBetween ( getRandom ( ) , Version . V_3_0_0 , Version . CURRENT ) ; Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; try { AnalysisService analysisService = new AnalysisService ( IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , settings ) , Collections . singletonMap ( <str> , new PreBuiltAnalyzerProvider ( <str> , AnalyzerScope . INDEX , new EnglishAnalyzer ( ) ) ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testBackCompatOverrideDefaultIndexAnalyzer ( ) { Version version = VersionUtils . randomVersionBetween ( getRandom ( ) , VersionUtils . getFirstVersion ( ) , VersionUtils . getPreviousVersion ( Version . V_3_0_0 ) ) ; Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; AnalysisService analysisService = new AnalysisService ( IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , settings ) , Collections . singletonMap ( <str> , analyzerProvider ( <str> ) ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) ) ; assertThat ( analysisService . defaultIndexAnalyzer ( ) . analyzer ( ) , instanceOf ( EnglishAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchAnalyzer ( ) . analyzer ( ) , instanceOf ( StandardAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchQuoteAnalyzer ( ) . analyzer ( ) , instanceOf ( StandardAnalyzer . class ) ) ; } public void testOverrideDefaultSearchAnalyzer ( ) { Version version = VersionUtils . randomVersion ( getRandom ( ) ) ; Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; AnalysisService analysisService = new AnalysisService ( IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , settings ) , Collections . singletonMap ( <str> , analyzerProvider ( <str> ) ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) ) ; assertThat ( analysisService . defaultIndexAnalyzer ( ) . analyzer ( ) , instanceOf ( StandardAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchAnalyzer ( ) . analyzer ( ) , instanceOf ( EnglishAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchQuoteAnalyzer ( ) . analyzer ( ) , instanceOf ( EnglishAnalyzer . class ) ) ; } public void testBackCompatOverrideDefaultIndexAndSearchAnalyzer ( ) { Version version = VersionUtils . randomVersionBetween ( getRandom ( ) , VersionUtils . getFirstVersion ( ) , VersionUtils . getPreviousVersion ( Version . V_3_0_0 ) ) ; Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; Map < String , AnalyzerProvider > analyzers = new HashMap < > ( ) ; analyzers . put ( <str> , analyzerProvider ( <str> ) ) ; analyzers . put ( <str> , analyzerProvider ( <str> ) ) ; AnalysisService analysisService = new AnalysisService ( IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , settings ) , analyzers , Collections . emptyMap ( ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) ) ; assertThat ( analysisService . defaultIndexAnalyzer ( ) . analyzer ( ) , instanceOf ( EnglishAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchAnalyzer ( ) . analyzer ( ) , instanceOf ( EnglishAnalyzer . class ) ) ; assertThat ( analysisService . defaultSearchQuoteAnalyzer ( ) . analyzer ( ) , instanceOf ( EnglishAnalyzer . class ) ) ; } public void testConfigureCamelCaseTokenFilter ( ) throws IOException { Settings settings = Settings . builder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; Settings indexSettings = settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . build ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , indexSettings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings ) ; try ( NamedAnalyzer custom_analyser = analysisService . analyzer ( <str> ) ) { assertNotNull ( custom_analyser ) ; TokenStream tokenStream = custom_analyser . tokenStream ( <str> , <str> ) ; tokenStream . reset ( ) ; CharTermAttribute charTermAttribute = tokenStream . addAttribute ( CharTermAttribute . class ) ; List < String > token = new ArrayList < > ( ) ; while ( tokenStream . incrementToken ( ) ) { token . add ( charTermAttribute . toString ( ) ) ; } assertEquals ( token . toString ( ) , <int> , token . size ( ) ) ; assertEquals ( <str> , token . get ( <int> ) ) ; assertEquals ( <str> , token . get ( <int> ) ) ; } try ( NamedAnalyzer custom_analyser = analysisService . analyzer ( <str> ) ) { assertNotNull ( custom_analyser ) ; TokenStream tokenStream = custom_analyser . tokenStream ( <str> , <str> ) ; tokenStream . reset ( ) ; CharTermAttribute charTermAttribute = tokenStream . addAttribute ( CharTermAttribute . class ) ; List < String > token = new ArrayList < > ( ) ; while ( tokenStream . incrementToken ( ) ) { token . add ( charTermAttribute . toString ( ) ) ; } assertEquals ( token . toString ( ) , <int> , token . size ( ) ) ; assertEquals ( <str> , token . get ( <int> ) ) ; assertEquals ( <str> , token . get ( <int> ) ) ; assertEquals ( <str> , token . get ( <int> ) ) ; assertEquals ( <str> , token . get ( <int> ) ) ; assertEquals ( <str> , token . get ( <int> ) ) ; assertEquals ( <str> , token . get ( <int> ) ) ; } } public void testCameCaseOverride ( ) throws IOException { Settings settings = Settings . builder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; Settings indexSettings = settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . build ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , indexSettings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings ) ; TokenFilterFactory word_delimiter = analysisService . tokenFilter ( <str> ) ; TokenFilterFactory override = analysisService . tokenFilter ( <str> ) ; assertNotEquals ( word_delimiter . name ( ) , override . name ( ) ) ; assertNotSame ( analysisService . tokenFilter ( <str> ) , analysisService . tokenFilter ( <str> ) ) ; assertSame ( analysisService . tokenFilter ( <str> ) , analysisService . tokenFilter ( <str> ) ) ; IndexSettings idxSettings1 = IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ) ; AnalysisService analysisService1 = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings1 ) ; assertSame ( analysisService1 . tokenFilter ( <str> ) , analysisService1 . tokenFilter ( <str> ) ) ; assertSame ( analysisService1 . tokenFilter ( <str> ) , analysisService1 . tokenFilter ( <str> ) ) ; } public void testBuiltInAnalyzersAreCached ( ) throws IOException { Settings settings = Settings . builder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; Settings indexSettings = settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , indexSettings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings ) ; AnalysisService otherAnalysisSergice = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings ) ; final int numIters = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < numIters ; i + + ) { PreBuiltAnalyzers preBuiltAnalyzers = RandomPicks . randomFrom ( random ( ) , PreBuiltAnalyzers . values ( ) ) ; assertSame ( analysisService . analyzer ( preBuiltAnalyzers . name ( ) ) , otherAnalysisSergice . analyzer ( preBuiltAnalyzers . name ( ) ) ) ; } } } 

package io . netty . handler . codec . marshalling ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelHandlerContext ; import io . netty . handler . codec . LengthFieldBasedFrameDecoder ; import io . netty . handler . codec . TooLongFrameException ; import org . jboss . marshalling . ByteInput ; import org . jboss . marshalling . Unmarshaller ; import java . io . StreamCorruptedException ; public class MarshallingDecoder extends LengthFieldBasedFrameDecoder { private final UnmarshallerProvider provider ; public MarshallingDecoder ( UnmarshallerProvider provider ) { this ( provider , <int> ) ; } public MarshallingDecoder ( UnmarshallerProvider provider , int maxObjectSize ) { super ( maxObjectSize , <int> , <int> , <int> , <int> ) ; this . provider = provider ; } @Override protected Object decode ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { ByteBuf frame = ( ByteBuf ) super . decode ( ctx , in ) ; if ( frame = = null ) { return null ; } Unmarshaller unmarshaller = provider . getUnmarshaller ( ctx ) ; ByteInput input = new ChannelBufferByteInput ( frame ) ; try { unmarshaller . start ( input ) ; Object obj = unmarshaller . readObject ( ) ; unmarshaller . finish ( ) ; return obj ; } finally { unmarshaller . close ( ) ; } } @Override protected ByteBuf extractFrame ( ChannelHandlerContext ctx , ByteBuf buffer , int index , int length ) { return buffer . slice ( index , length ) ; } } 

package io . netty . example . http2 . tiles ; import static io . netty . handler . codec . http2 . Http2SecurityUtil . CIPHERS ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . channel . Channel ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . ChannelOption ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . socket . SocketChannel ; import io . netty . channel . socket . nio . NioServerSocketChannel ; import io . netty . handler . ssl . ApplicationProtocolConfig ; import io . netty . handler . ssl . ApplicationProtocolConfig . Protocol ; import io . netty . handler . ssl . ApplicationProtocolConfig . SelectedListenerFailureBehavior ; import io . netty . handler . ssl . ApplicationProtocolConfig . SelectorFailureBehavior ; import io . netty . handler . ssl . ApplicationProtocolNames ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . SupportedCipherSuiteFilter ; import io . netty . handler . ssl . util . SelfSignedCertificate ; import java . security . cert . CertificateException ; import javax . net . ssl . SSLException ; public class Http2Server { public static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; private final EventLoopGroup group ; public Http2Server ( EventLoopGroup eventLoopGroup ) { group = eventLoopGroup ; } public ChannelFuture start ( ) throws Exception { final SslContext sslCtx = configureTLS ( ) ; ServerBootstrap b = new ServerBootstrap ( ) ; b . option ( ChannelOption . SO_BACKLOG , <int> ) ; b . group ( group ) . channel ( NioServerSocketChannel . class ) . childHandler ( new ChannelInitializer < SocketChannel > ( ) { @Override protected void initChannel ( SocketChannel ch ) throws Exception { ch . pipeline ( ) . addLast ( sslCtx . newHandler ( ch . alloc ( ) ) , new Http2OrHttpHandler ( ) ) ; } } ) ; Channel ch = b . bind ( PORT ) . sync ( ) . channel ( ) ; return ch . closeFuture ( ) ; } private static SslContext configureTLS ( ) throws CertificateException , SSLException { SelfSignedCertificate ssc = new SelfSignedCertificate ( ) ; ApplicationProtocolConfig apn = new ApplicationProtocolConfig ( Protocol . ALPN , SelectorFailureBehavior . NO_ADVERTISE , SelectedListenerFailureBehavior . ACCEPT , ApplicationProtocolNames . HTTP_2 , ApplicationProtocolNames . HTTP_1_1 ) ; return SslContextBuilder . forServer ( ssc . certificate ( ) , ssc . privateKey ( ) , null ) . ciphers ( CIPHERS , SupportedCipherSuiteFilter . INSTANCE ) . applicationProtocolConfig ( apn ) . build ( ) ; } } 

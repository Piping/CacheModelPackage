package org . eclipse . debug . internal . ui . viewers . update ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . IExpressionManager ; import org . eclipse . debug . core . model . IExpression ; import org . eclipse . debug . internal . core . IExpressionsListener2 ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ModelDelta ; import org . eclipse . debug . internal . ui . viewers . provisional . AbstractModelProxy ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . jface . viewers . Viewer ; public class ExpressionManagerModelProxy extends AbstractModelProxy implements IExpressionsListener2 , IPropertyChangeListener { @Override public void init ( IPresentationContext context ) { super . init ( context ) ; getExpressionManager ( ) . addExpressionListener ( this ) ; context . addPropertyChangeListener ( this ) ; } @Override public void installed ( Viewer viewer ) { updateExpressions ( getExpressionManager ( ) . getExpressions ( ) , IModelDelta . INSTALL ) ; } protected IExpressionManager getExpressionManager ( ) { return DebugPlugin . getDefault ( ) . getExpressionManager ( ) ; } @Override public synchronized void dispose ( ) { getPresentationContext ( ) . removePropertyChangeListener ( this ) ; super . dispose ( ) ; getExpressionManager ( ) . removeExpressionListener ( this ) ; } @Override public void expressionsMoved ( IExpression [ ] expressions , int index ) { int count = getElementsCount ( ) ; ModelDelta delta = new ModelDelta ( getExpressionManager ( ) , - <int> , IModelDelta . NO_CHANGE , count ) ; for ( int i = <int> ; i < expressions . length ; i + + ) { IExpression expression = expressions [ i ] ; delta . addNode ( expression , IModelDelta . REMOVED ) ; } for ( int i = <int> ; i < expressions . length ; i + + ) { IExpression expression = expressions [ i ] ; delta . addNode ( expression , index + i , IModelDelta . ADDED , - <int> ) ; } fireModelChanged ( delta ) ; } @Override public void expressionsInserted ( IExpression [ ] expressions , int index ) { int count = getElementsCount ( ) ; ModelDelta delta = new ModelDelta ( getExpressionManager ( ) , - <int> , IModelDelta . NO_CHANGE , count ) ; for ( int i = <int> ; i < expressions . length ; i + + ) { IExpression expression = expressions [ i ] ; delta . addNode ( expression , index + i , IModelDelta . ADDED | IModelDelta . INSTALL , - <int> ) ; } fireModelChanged ( delta ) ; } @Override public void expressionsAdded ( IExpression [ ] expressions ) { int index = getExpressionManager ( ) . getExpressions ( ) . length - expressions . length ; int count = getElementsCount ( ) ; ModelDelta delta = new ModelDelta ( getExpressionManager ( ) , - <int> , IModelDelta . NO_CHANGE , count ) ; for ( int i = <int> ; i < expressions . length ; i + + ) { IExpression expression = expressions [ i ] ; delta . addNode ( expression , index + i , IModelDelta . ADDED | IModelDelta . INSTALL , - <int> ) ; } fireModelChanged ( delta ) ; } @Override public void expressionsRemoved ( IExpression [ ] expressions ) { updateExpressions ( expressions , IModelDelta . REMOVED | IModelDelta . UNINSTALL ) ; } @Override public void expressionsChanged ( IExpression [ ] expressions ) { updateExpressions ( expressions , IModelDelta . CONTENT | IModelDelta . STATE ) ; } private void updateExpressions ( IExpression [ ] expressions , int flags ) { ModelDelta delta = new ModelDelta ( getExpressionManager ( ) , IModelDelta . NO_CHANGE ) ; for ( int i = <int> ; i < expressions . length ; i + + ) { IExpression expression = expressions [ i ] ; delta . addNode ( expression , flags ) ; } fireModelChanged ( delta ) ; } private int getElementsCount ( ) { return getExpressionManager ( ) . getExpressions ( ) . length + ( getPresentationContext ( ) . getColumns ( ) ! = null ? <int> : <int> ) ; } @Override public void propertyChange ( PropertyChangeEvent event ) { if ( IPresentationContext . PROPERTY_COLUMNS . equals ( event . getProperty ( ) ) ) { fireModelChanged ( new ModelDelta ( getExpressionManager ( ) , IModelDelta . CONTENT ) ) ; } } } 

package com . google . common . collect ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import com . google . common . collect . BenchmarkHelpers . SetImpl ; import com . google . common . collect . CollectionBenchmarkSampleData . Element ; import java . util . Set ; public class SetContainsBenchmark { @Param ( { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ) private int size ; @Param ( { <str> , <str> } ) private double hitRate ; @Param ( <str> ) private boolean isUserTypeFast ; @Param ( <str> ) private SpecialRandom random ; @Param ( { <str> , <str> } ) private SetImpl impl ; private Element [ ] queries ; private Set < Element > setToTest ; @BeforeExperiment void setUp ( ) { CollectionBenchmarkSampleData sampleData = new CollectionBenchmarkSampleData ( isUserTypeFast , random , hitRate , size ) ; this . setToTest = impl . create ( sampleData . getValuesInSet ( ) ) ; this . queries = sampleData . getQueries ( ) ; } @Benchmark boolean contains ( int reps ) { Set < Element > set = setToTest ; Element [ ] queries = this . queries ; int mask = queries . length - <int> ; boolean dummy = false ; for ( int i = <int> ; i < reps ; i + + ) { dummy ^ = set . contains ( queries [ i & mask ] ) ; } return dummy ; } } 

package org . elasticsearch . messy . tests ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . util . CollectionUtils ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram . Order ; import org . elasticsearch . search . aggregations . metrics . AbstractNumericTestCase ; import org . elasticsearch . search . aggregations . metrics . percentiles . Percentile ; import org . elasticsearch . search . aggregations . metrics . percentiles . PercentileRanks ; import org . elasticsearch . search . aggregations . metrics . percentiles . PercentileRanksBuilder ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . percentileRanks ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . sameInstance ; public class TDigestPercentileRanksTests extends AbstractNumericTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } private static double [ ] randomPercents ( long minValue , long maxValue ) { final int length = randomIntBetween ( <int> , <int> ) ; final double [ ] percents = new double [ length ] ; for ( int i = <int> ; i < percents . length ; + + i ) { switch ( randomInt ( <int> ) ) { case <int> : percents [ i ] = minValue ; break ; case <int> : percents [ i ] = maxValue ; break ; default : percents [ i ] = ( randomDouble ( ) * ( maxValue - minValue ) ) + minValue ; break ; } } Arrays . sort ( percents ) ; Loggers . getLogger ( TDigestPercentileRanksTests . class ) . info ( <str> , Arrays . toString ( percents ) ) ; return percents ; } private static PercentileRanksBuilder randomCompression ( PercentileRanksBuilder builder ) { if ( randomBoolean ( ) ) { builder . compression ( randomIntBetween ( <int> , <int> ) + randomDouble ( ) ) ; } return builder ; } private void assertConsistent ( double [ ] pcts , PercentileRanks percentiles , long minValue , long maxValue ) { final List < Percentile > percentileList = CollectionUtils . iterableAsArrayList ( percentiles ) ; assertEquals ( pcts . length , percentileList . size ( ) ) ; for ( int i = <int> ; i < pcts . length ; + + i ) { final Percentile percentile = percentileList . get ( i ) ; assertThat ( percentile . getValue ( ) , equalTo ( pcts [ i ] ) ) ; assertThat ( percentile . getPercent ( ) , greaterThanOrEqualTo ( <float> ) ) ; assertThat ( percentile . getPercent ( ) , lessThanOrEqualTo ( <float> ) ) ; if ( percentile . getPercent ( ) = = <int> ) { assertThat ( percentile . getValue ( ) , lessThanOrEqualTo ( ( double ) minValue ) ) ; } if ( percentile . getPercent ( ) = = <int> ) { assertThat ( percentile . getValue ( ) , greaterThanOrEqualTo ( ( double ) maxValue ) ) ; } } for ( int i = <int> ; i < percentileList . size ( ) ; + + i ) { assertThat ( percentileList . get ( i ) . getValue ( ) , greaterThanOrEqualTo ( percentileList . get ( i - <int> ) . getValue ( ) ) ) ; } } @Override public void testEmptyAggregation ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . minDocCount ( <int> ) . subAggregation ( randomCompression ( percentileRanks ( <str> ) ) . percentiles ( <int> , <int> ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; Histogram histo = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; Histogram . Bucket bucket = histo . getBuckets ( ) . get ( <int> ) ; assertThat ( bucket , notNullValue ( ) ) ; PercentileRanks reversePercentiles = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( reversePercentiles , notNullValue ( ) ) ; assertThat ( reversePercentiles . getName ( ) , equalTo ( <str> ) ) ; assertThat ( reversePercentiles . percent ( <int> ) , equalTo ( Double . NaN ) ) ; assertThat ( reversePercentiles . percent ( <int> ) , equalTo ( Double . NaN ) ) ; } @Override public void testUnmapped ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . percentiles ( <int> , <int> , <int> , <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> l ) ) ; PercentileRanks reversePercentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( reversePercentiles , notNullValue ( ) ) ; assertThat ( reversePercentiles . getName ( ) , equalTo ( <str> ) ) ; assertThat ( reversePercentiles . percent ( <int> ) , equalTo ( Double . NaN ) ) ; assertThat ( reversePercentiles . percent ( <int> ) , equalTo ( Double . NaN ) ) ; assertThat ( reversePercentiles . percent ( <int> ) , equalTo ( Double . NaN ) ) ; assertThat ( reversePercentiles . percent ( <int> ) , equalTo ( Double . NaN ) ) ; } @Override public void testSingleValuedField ( ) throws Exception { final double [ ] pcts = randomPercents ( minValue , maxValue ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValue , maxValue ) ; } @Override public void testSingleValuedFieldGetProperty ( ) throws Exception { final double [ ] pcts = randomPercents ( minValue , maxValue ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . percentiles ( pcts ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Global global = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( global , notNullValue ( ) ) ; assertThat ( global . getName ( ) , equalTo ( <str> ) ) ; assertThat ( global . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( global . getAggregations ( ) , notNullValue ( ) ) ; assertThat ( global . getAggregations ( ) . asMap ( ) . size ( ) , equalTo ( <int> ) ) ; PercentileRanks percentiles = global . getAggregations ( ) . get ( <str> ) ; assertThat ( percentiles , notNullValue ( ) ) ; assertThat ( percentiles . getName ( ) , equalTo ( <str> ) ) ; assertThat ( ( PercentileRanks ) global . getProperty ( <str> ) , sameInstance ( percentiles ) ) ; } public void testSingleValuedFieldOutsideRange ( ) throws Exception { final double [ ] pcts = new double [ ] { minValue - <int> , maxValue + <int> } ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValue , maxValue ) ; } @Override public void testSingleValuedFieldPartiallyUnmapped ( ) throws Exception { final double [ ] pcts = randomPercents ( minValue , maxValue ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> , <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValue , maxValue ) ; } @Override public void testSingleValuedFieldWithValueScript ( ) throws Exception { final double [ ] pcts = randomPercents ( minValue - <int> , maxValue - <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . script ( new Script ( <str> ) ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValue - <int> , maxValue - <int> ) ; } @Override public void testSingleValuedFieldWithValueScriptWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; final double [ ] pcts = randomPercents ( minValue - <int> , maxValue - <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValue - <int> , maxValue - <int> ) ; } @Override public void testMultiValuedField ( ) throws Exception { final double [ ] pcts = randomPercents ( minValues , maxValues ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValues , maxValues ) ; } @Override public void testMultiValuedFieldWithValueScript ( ) throws Exception { final double [ ] pcts = randomPercents ( minValues - <int> , maxValues - <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . script ( new Script ( <str> ) ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValues - <int> , maxValues - <int> ) ; } public void testMultiValuedFieldWithValueScriptReverse ( ) throws Exception { final double [ ] pcts = randomPercents ( - maxValues , - minValues ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . script ( new Script ( <str> ) ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , - maxValues , - minValues ) ; } @Override public void testMultiValuedFieldWithValueScriptWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; final double [ ] pcts = randomPercents ( minValues - <int> , maxValues - <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValues - <int> , maxValues - <int> ) ; } @Override public void testScriptSingleValued ( ) throws Exception { final double [ ] pcts = randomPercents ( minValue , maxValue ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . script ( new Script ( <str> ) ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValue , maxValue ) ; } @Override public void testScriptSingleValuedWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; final double [ ] pcts = randomPercents ( minValue - <int> , maxValue - <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValue - <int> , maxValue - <int> ) ; } @Override public void testScriptMultiValued ( ) throws Exception { final double [ ] pcts = randomPercents ( minValues , maxValues ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . script ( new Script ( <str> ) ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValues , maxValues ) ; } @Override public void testScriptMultiValuedWithParams ( ) throws Exception { Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <int> ) ; final double [ ] pcts = randomPercents ( minValues - <int> , maxValues - <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( randomCompression ( percentileRanks ( <str> ) ) . script ( new Script ( <str> , ScriptType . INLINE , null , params ) ) . percentiles ( pcts ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; final PercentileRanks percentiles = searchResponse . getAggregations ( ) . get ( <str> ) ; assertConsistent ( pcts , percentiles , minValues - <int> , maxValues - <int> ) ; } public void testOrderBySubAggregation ( ) { boolean asc = randomBoolean ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . subAggregation ( randomCompression ( percentileRanks ( <str> ) . percentiles ( <int> ) ) ) . order ( Order . aggregation ( <str> , <str> , asc ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Histogram histo = searchResponse . getAggregations ( ) . get ( <str> ) ; double previous = asc ? Double . NEGATIVE_INFINITY : Double . POSITIVE_INFINITY ; for ( Histogram . Bucket bucket : histo . getBuckets ( ) ) { PercentileRanks percentiles = bucket . getAggregations ( ) . get ( <str> ) ; double p99 = percentiles . percent ( <int> ) ; if ( asc ) { assertThat ( p99 , greaterThanOrEqualTo ( previous ) ) ; } else { assertThat ( p99 , lessThanOrEqualTo ( previous ) ) ; } previous = p99 ; } } } 

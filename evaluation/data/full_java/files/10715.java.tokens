package org . gradle . build . docs . dsl . docbook ; import org . apache . commons . lang . StringUtils ; import org . gradle . build . docs . dsl . source . model . EnumConstantMetaData ; import org . gradle . build . docs . dsl . source . model . MethodMetaData ; import org . gradle . build . docs . dsl . source . model . TypeMetaData ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import java . util . HashSet ; import java . util . Set ; public class LinkRenderer { private final Document document ; private final DslDocModel model ; private final Set < String > primitiveTypes = new HashSet < String > ( ) ; public LinkRenderer ( Document document , DslDocModel model ) { this . document = document ; this . model = model ; primitiveTypes . add ( <str> ) ; primitiveTypes . add ( <str> ) ; primitiveTypes . add ( <str> ) ; primitiveTypes . add ( <str> ) ; primitiveTypes . add ( <str> ) ; primitiveTypes . add ( <str> ) ; primitiveTypes . add ( <str> ) ; primitiveTypes . add ( <str> ) ; primitiveTypes . add ( <str> ) ; } Node link ( TypeMetaData type , final GenerationListener listener ) { final Element linkElement = document . createElement ( <str> ) ; type . visitSignature ( new TypeMetaData . SignatureVisitor ( ) { public void visitText ( String text ) { linkElement . appendChild ( document . createTextNode ( text ) ) ; } public void visitType ( String name ) { linkElement . appendChild ( addType ( name , listener ) ) ; } } ) ; linkElement . normalize ( ) ; if ( linkElement . getChildNodes ( ) . getLength ( ) = = <int> & & linkElement . getFirstChild ( ) instanceof Element ) { return linkElement . getFirstChild ( ) ; } return linkElement ; } private Node addType ( String className , GenerationListener listener ) { if ( model . isKnownType ( className ) ) { Element linkElement = document . createElement ( <str> ) ; linkElement . setAttribute ( <str> , className ) ; return linkElement ; } if ( primitiveTypes . contains ( className ) ) { Element classNameElement = document . createElement ( <str> ) ; classNameElement . appendChild ( document . createTextNode ( className ) ) ; return classNameElement ; } if ( className . startsWith ( <str> ) ) { Element linkElement = document . createElement ( <str> ) ; linkElement . setAttribute ( <str> , String . format ( <str> , className . replace ( <str> , <str> ) ) ) ; Element classNameElement = document . createElement ( <str> ) ; classNameElement . appendChild ( document . createTextNode ( StringUtils . substringAfterLast ( className , <str> ) ) ) ; linkElement . appendChild ( classNameElement ) ; return linkElement ; } if ( className . startsWith ( <str> ) ) { Element linkElement = document . createElement ( <str> ) ; linkElement . setAttribute ( <str> , String . format ( <str> , className . replace ( <str> , <str> ) ) ) ; Element classNameElement = document . createElement ( <str> ) ; classNameElement . appendChild ( document . createTextNode ( StringUtils . substringAfterLast ( className , <str> ) ) ) ; linkElement . appendChild ( classNameElement ) ; return linkElement ; } if ( className . length ( ) > <int> ) { listener . warning ( String . format ( <str> , className ) ) ; } Element element = document . createElement ( <str> ) ; element . appendChild ( document . createTextNode ( className ) ) ; return element ; } public Node link ( MethodMetaData method , GenerationListener listener ) { if ( model . isKnownType ( method . getOwnerClass ( ) . getClassName ( ) ) ) { Element apilink = document . createElement ( <str> ) ; apilink . setAttribute ( <str> , method . getOwnerClass ( ) . getClassName ( ) ) ; apilink . setAttribute ( <str> , method . getOverrideSignature ( ) ) ; return apilink ; } else { listener . warning ( String . format ( <str> , method ) ) ; Element element = document . createElement ( <str> ) ; element . appendChild ( document . createTextNode ( String . format ( <str> , method . getOwnerClass ( ) . getClassName ( ) , method . getName ( ) ) ) ) ; return element ; } } public Node link ( EnumConstantMetaData enumConstant , GenerationListener listener ) { if ( model . isKnownType ( enumConstant . getOwnerClass ( ) . getClassName ( ) ) ) { Element apilink = document . createElement ( <str> ) ; apilink . setAttribute ( <str> , enumConstant . getOwnerClass ( ) . getClassName ( ) ) ; apilink . setAttribute ( <str> , enumConstant . getName ( ) ) ; return apilink ; } else { listener . warning ( String . format ( <str> , enumConstant ) ) ; Element element = document . createElement ( <str> ) ; element . appendChild ( document . createTextNode ( enumConstant . toString ( ) ) ) ; return element ; } } } 

package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import java . io . IOException ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import java . util . HashMap ; @GwtCompatible ( serializable = true , emulated = true ) public final class HashMultiset < E > extends AbstractMapBasedMultiset < E > { public static < E > HashMultiset < E > create ( ) { return new HashMultiset < E > ( ) ; } public static < E > HashMultiset < E > create ( int distinctElements ) { return new HashMultiset < E > ( distinctElements ) ; } public static < E > HashMultiset < E > create ( Iterable < ? extends E > elements ) { HashMultiset < E > multiset = create ( Multisets . inferDistinctElements ( elements ) ) ; Iterables . addAll ( multiset , elements ) ; return multiset ; } private HashMultiset ( ) { super ( new HashMap < E , Count > ( ) ) ; } private HashMultiset ( int distinctElements ) { super ( Maps . < E , Count > newHashMapWithExpectedSize ( distinctElements ) ) ; } @GwtIncompatible ( <str> ) private void writeObject ( ObjectOutputStream stream ) throws IOException { stream . defaultWriteObject ( ) ; Serialization . writeMultiset ( this , stream ) ; } @GwtIncompatible ( <str> ) private void readObject ( ObjectInputStream stream ) throws IOException , ClassNotFoundException { stream . defaultReadObject ( ) ; int distinctElements = Serialization . readCount ( stream ) ; setBackingMap ( Maps . < E , Count > newHashMap ( ) ) ; Serialization . populateMultiset ( this , stream , distinctElements ) ; } @GwtIncompatible ( <str> ) private static final long serialVersionUID = <int> ; } 

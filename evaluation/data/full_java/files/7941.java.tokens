package org . elasticsearch . common . lucene . search . morelikethis ; import org . apache . lucene . analysis . MockAnalyzer ; import org . apache . lucene . analysis . MockTokenizer ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . RandomIndexWriter ; import org . apache . lucene . index . Term ; import org . apache . lucene . queries . mlt . MoreLikeThis ; import org . apache . lucene . search . BooleanClause ; import org . apache . lucene . search . BooleanQuery ; import org . apache . lucene . search . TermQuery ; import org . apache . lucene . store . Directory ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . io . StringReader ; import java . util . Arrays ; import java . util . List ; public class XMoreLikeThisTests extends ESTestCase { private void addDoc ( RandomIndexWriter writer , String [ ] texts ) throws IOException { Document doc = new Document ( ) ; for ( String text : texts ) { doc . add ( newTextField ( <str> , text , Field . Store . YES ) ) ; } writer . addDocument ( doc ) ; } public void testTopN ( ) throws Exception { int numDocs = <int> ; int topN = <int> ; Directory dir = newDirectory ( ) ; RandomIndexWriter writer = new RandomIndexWriter ( random ( ) , dir ) ; for ( int i = <int> ; i < numDocs ; i + + ) { addDoc ( writer , generateStrSeq ( <int> , i + <int> ) ) ; } IndexReader reader = writer . getReader ( ) ; writer . close ( ) ; MoreLikeThis mlt = new MoreLikeThis ( reader ) ; mlt . setAnalyzer ( new MockAnalyzer ( random ( ) , MockTokenizer . WHITESPACE , false ) ) ; mlt . setMaxQueryTerms ( topN ) ; mlt . setMinDocFreq ( <int> ) ; mlt . setMinTermFreq ( <int> ) ; mlt . setMinWordLen ( <int> ) ; mlt . setFieldNames ( new String [ ] { <str> } ) ; String likeText = <str> ; for ( String text : generateStrSeq ( <int> , numDocs ) ) { likeText + = text + <str> ; } BooleanQuery query = ( BooleanQuery ) mlt . like ( <str> , new StringReader ( likeText ) ) ; List < BooleanClause > clauses = query . clauses ( ) ; assertEquals ( <str> + topN + <str> , topN , clauses . size ( ) ) ; Term [ ] expectedTerms = new Term [ topN ] ; int idx = <int> ; for ( String text : generateStrSeq ( numDocs - topN , topN ) ) { expectedTerms [ idx + + ] = new Term ( <str> , text ) ; } for ( BooleanClause clause : clauses ) { Term term = ( ( TermQuery ) clause . getQuery ( ) ) . getTerm ( ) ; assertTrue ( Arrays . asList ( expectedTerms ) . contains ( term ) ) ; } reader . close ( ) ; dir . close ( ) ; } private String [ ] generateStrSeq ( int from , int size ) { String [ ] generatedStrings = new String [ size ] ; for ( int i = <int> ; i < generatedStrings . length ; i + + ) { generatedStrings [ i ] = String . valueOf ( from + i ) ; } return generatedStrings ; } } 

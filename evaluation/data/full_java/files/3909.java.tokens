package org . eclipse . debug . tests . sourcelookup ; import junit . framework . TestCase ; import org . eclipse . debug . core . model . IStackFrame ; import org . eclipse . debug . internal . ui . sourcelookup . SourceLookupFacility ; import org . eclipse . debug . ui . sourcelookup . ISourceLookupResult ; public class SourceLookupFacilityTests extends TestCase { TestStackFrame fReusableFrame = new TestStackFrame ( new TestLaunch ( ) ) ; TestSourceDirector fTestDirector = new TestSourceDirector ( ) ; TestSourceLocator fTestLocator = new TestSourceLocator ( ) ; public SourceLookupFacilityTests ( String name ) { super ( name ) ; } public void testLookupStringNoLocatorNoForce ( ) throws Exception { try { String artifact = <str> ; ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( artifact , null , false ) ; assertNotNull ( <str> , result ) ; assertNull ( <str> , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStringNoForce ( ) throws Exception { try { String artifact = <str> ; ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( artifact , fTestDirector , false ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof String ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; String value = ( String ) result . getSourceElement ( ) ; result = SourceLookupFacility . getDefault ( ) . lookup ( artifact , fTestDirector , false ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof String ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; assertEquals ( <str> , value , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStringForce ( ) throws Exception { try { String artifact = <str> ; ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( artifact , fTestDirector , true ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof String ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; String value = ( String ) result . getSourceElement ( ) ; result = SourceLookupFacility . getDefault ( ) . lookup ( artifact , fTestDirector , true ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof String ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; assertNotSame ( <str> , value , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStringLocatorNoForce ( ) throws Exception { try { String artifact = <str> ; ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( artifact , fTestLocator , false ) ; assertNotNull ( <str> , result ) ; assertNull ( <str> , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStackframeNoForce ( ) throws Exception { try { ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , fTestDirector , false ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; String value = ( String ) result . getSourceElement ( ) ; result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , fTestDirector , false ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; assertEquals ( <str> , value , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStackframeForce ( ) throws Exception { try { ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , fTestDirector , true ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; String value = ( String ) result . getSourceElement ( ) ; result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , fTestDirector , true ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; assertNotSame ( <str> , value , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStackframeWithDebugElement1 ( ) throws Exception { try { ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( new TestStackFrame ( null ) , null , false ) ; assertNotNull ( <str> , result ) ; assertNull ( <str> , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStackframeWithDebugElement2 ( ) throws Exception { try { ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , null , false ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; String value = ( String ) result . getSourceElement ( ) ; result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , null , false ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; assertEquals ( <str> , value , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStackframeWithDebugElement3 ( ) throws Exception { try { ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , null , true ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; String value = ( String ) result . getSourceElement ( ) ; result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , null , true ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; assertNotSame ( <str> , value , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStackframeWithDebugElement4 ( ) throws Exception { try { ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , fTestLocator , false ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; String value = ( String ) result . getSourceElement ( ) ; result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , fTestLocator , false ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; assertEquals ( <str> , value , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } public void testLookupStackframeWithDebugElement5 ( ) throws Exception { try { ISourceLookupResult result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , fTestLocator , true ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; String value = ( String ) result . getSourceElement ( ) ; result = SourceLookupFacility . getDefault ( ) . lookup ( fReusableFrame , fTestLocator , true ) ; assertNotNull ( <str> , result ) ; assertTrue ( <str> , result . getArtifact ( ) instanceof IStackFrame ) ; assertTrue ( <str> , result . getSourceElement ( ) instanceof String ) ; assertNotSame ( <str> , value , result . getSourceElement ( ) ) ; } finally { SourceLookupFacility . shutdown ( ) ; } } } 

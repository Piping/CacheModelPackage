package org . eclipse . debug . internal . ui . viewers . model . provisional ; import java . util . HashMap ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . jface . util . SafeRunnable ; import org . eclipse . ui . IElementFactory ; import org . eclipse . ui . IMemento ; import org . eclipse . ui . IPersistableElement ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PlatformUI ; public class PresentationContext implements IPresentationContext { private static final String PRESENTATION_CONTEXT_PROPERTIES = <str> ; private static final String BOOLEAN = <str> ; private static final String STRING = <str> ; private static final String INTEGER = <str> ; private static final String PERSISTABLE = <str> ; final private String fId ; final private ListenerList fListeners = new ListenerList ( ) ; final private Map < String , Object > fProperties = new HashMap < String , Object > ( ) ; private IWorkbenchWindow fWindow ; private IWorkbenchPart fPart ; public PresentationContext ( String id ) { this ( id , null , null ) ; } public PresentationContext ( String id , IWorkbenchWindow window ) { this ( id , window , null ) ; } public PresentationContext ( String id , IWorkbenchPart part ) { this ( id , part = = null ? null : part . getSite ( ) . getWorkbenchWindow ( ) , part ) ; } public PresentationContext ( IWorkbenchPart part ) { this ( part . getSite ( ) . getId ( ) , part . getSite ( ) . getWorkbenchWindow ( ) , part ) ; } private PresentationContext ( String id , IWorkbenchWindow window , IWorkbenchPart part ) { fId = id ; fWindow = window ; fPart = part ; } @Override public String [ ] getColumns ( ) { return ( String [ ] ) getProperty ( IPresentationContext . PROPERTY_COLUMNS ) ; } protected void firePropertyChange ( String property , Object oldValue , Object newValue ) { if ( ! fListeners . isEmpty ( ) ) { final PropertyChangeEvent event = new PropertyChangeEvent ( this , property , oldValue , newValue ) ; Object [ ] listeners = fListeners . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { final IPropertyChangeListener listener = ( IPropertyChangeListener ) listeners [ i ] ; SafeRunner . run ( new SafeRunnable ( ) { @Override public void run ( ) throws Exception { listener . propertyChange ( event ) ; } } ) ; } } } public void setColumns ( String [ ] ids ) { setProperty ( IPresentationContext . PROPERTY_COLUMNS , ids ) ; } @Override public void dispose ( ) { fProperties . clear ( ) ; setProperty ( PROPERTY_DISPOSED , Boolean . TRUE ) ; fListeners . clear ( ) ; fWindow = null ; fPart = null ; } @Override public void addPropertyChangeListener ( IPropertyChangeListener listener ) { fListeners . add ( listener ) ; } @Override public void removePropertyChangeListener ( IPropertyChangeListener listener ) { fListeners . remove ( listener ) ; } @Override public String getId ( ) { return fId ; } @Override public Object getProperty ( String property ) { synchronized ( fProperties ) { return fProperties . get ( property ) ; } } @Override public void setProperty ( String property , Object value ) { Object oldValue = null ; boolean propertySet = false ; synchronized ( fProperties ) { oldValue = fProperties . get ( property ) ; if ( ! isEqual ( oldValue , value ) ) { propertySet = true ; fProperties . put ( property , value ) ; } } if ( propertySet ) { firePropertyChange ( property , oldValue , value ) ; } } public void initProperties ( IMemento memento ) { IMemento presentationMemento = null ; IMemento [ ] mementos = memento . getChildren ( PRESENTATION_CONTEXT_PROPERTIES ) ; for ( int i = <int> ; i < mementos . length ; i + + ) { if ( getId ( ) . equals ( mementos [ i ] . getID ( ) ) ) { presentationMemento = mementos [ i ] ; break ; } } if ( presentationMemento ! = null ) { IMemento [ ] stringProperties = presentationMemento . getChildren ( STRING ) ; for ( int i = <int> ; i < stringProperties . length ; i + + ) { fProperties . put ( stringProperties [ i ] . getID ( ) , stringProperties [ i ] . getString ( STRING ) ) ; } IMemento [ ] integerMementos = presentationMemento . getChildren ( INTEGER ) ; for ( int i = <int> ; i < integerMementos . length ; i + + ) { fProperties . put ( integerMementos [ i ] . getID ( ) , integerMementos [ i ] . getInteger ( INTEGER ) ) ; } IMemento [ ] booleanMementos = presentationMemento . getChildren ( BOOLEAN ) ; for ( int i = <int> ; i < booleanMementos . length ; i + + ) { fProperties . put ( booleanMementos [ i ] . getID ( ) , booleanMementos [ i ] . getBoolean ( BOOLEAN ) ) ; } IMemento [ ] persistableMementos = presentationMemento . getChildren ( PERSISTABLE ) ; for ( int i = <int> ; i < persistableMementos . length ; i + + ) { String factoryID = persistableMementos [ i ] . getString ( PERSISTABLE ) ; if ( factoryID ! = null ) { IElementFactory factory = PlatformUI . getWorkbench ( ) . getElementFactory ( factoryID ) ; if ( factory ! = null ) { Object element = factory . createElement ( persistableMementos [ i ] ) ; if ( element ! = null ) { fProperties . put ( persistableMementos [ i ] . getID ( ) , element ) ; } } } } } } public void saveProperites ( IMemento memento ) { if ( fProperties . size ( ) = = <int> ) { return ; } IMemento properties = memento . createChild ( PRESENTATION_CONTEXT_PROPERTIES , getId ( ) ) ; for ( Entry < String , Object > entry : fProperties . entrySet ( ) ) { if ( entry . getValue ( ) instanceof String ) { IMemento value = properties . createChild ( STRING , entry . getKey ( ) ) ; value . putString ( STRING , ( String ) entry . getValue ( ) ) ; } else if ( entry . getValue ( ) instanceof Integer ) { IMemento value = properties . createChild ( INTEGER , entry . getKey ( ) ) ; value . putInteger ( INTEGER , ( ( Integer ) entry . getValue ( ) ) . intValue ( ) ) ; } else if ( entry . getValue ( ) instanceof Boolean ) { IMemento value = properties . createChild ( BOOLEAN , entry . getKey ( ) ) ; value . putBoolean ( BOOLEAN , ( ( Boolean ) entry . getValue ( ) ) . booleanValue ( ) ) ; } else if ( entry . getValue ( ) instanceof IPersistableElement ) { IPersistableElement persistable = ( IPersistableElement ) entry . getValue ( ) ; IMemento value = properties . createChild ( PERSISTABLE , entry . getKey ( ) ) ; value . putString ( PERSISTABLE , persistable . getFactoryId ( ) ) ; persistable . saveState ( value ) ; } } } private boolean isEqual ( Object a , Object b ) { if ( a = = null ) { return b = = null ; } return a . equals ( b ) ; } @Override public String [ ] getProperties ( ) { synchronized ( fProperties ) { Set < String > keys = fProperties . keySet ( ) ; return keys . toArray ( new String [ keys . size ( ) ] ) ; } } @Override public IWorkbenchPart getPart ( ) { return fPart ; } @Override public IWorkbenchWindow getWindow ( ) { return fWindow ; } } 

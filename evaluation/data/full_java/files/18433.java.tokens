package com . badlogic . gdx . utils ; import static org . junit . Assert . * ; import org . junit . Test ; public class BitsTest { @Test public void testHashcodeAndEquals ( ) { Bits b1 = new Bits ( ) ; Bits b2 = new Bits ( ) ; b1 . set ( <int> ) ; b2 . set ( <int> ) ; assertEquals ( b1 . hashCode ( ) , b2 . hashCode ( ) ) ; assertTrue ( b1 . equals ( b2 ) ) ; b2 . set ( <int> ) ; b2 . clear ( <int> ) ; assertEquals ( b1 . hashCode ( ) , b2 . hashCode ( ) ) ; assertTrue ( b1 . equals ( b2 ) ) ; b1 . set ( <int> ) ; b1 . clear ( <int> ) ; assertEquals ( b1 . hashCode ( ) , b2 . hashCode ( ) ) ; assertTrue ( b1 . equals ( b2 ) ) ; } @Test public void testXor ( ) { Bits b1 = new Bits ( ) ; Bits b2 = new Bits ( ) ; b2 . set ( <int> ) ; b1 . xor ( b2 ) ; assertTrue ( b1 . get ( <int> ) ) ; b1 . set ( <int> ) ; b2 . xor ( b1 ) ; assertTrue ( b2 . get ( <int> ) ) ; } @Test public void testOr ( ) { Bits b1 = new Bits ( ) ; Bits b2 = new Bits ( ) ; b2 . set ( <int> ) ; b1 . or ( b2 ) ; assertTrue ( b1 . get ( <int> ) ) ; b1 . set ( <int> ) ; b2 . or ( b1 ) ; assertTrue ( b2 . get ( <int> ) ) ; } @Test public void testAnd ( ) { Bits b1 = new Bits ( ) ; Bits b2 = new Bits ( ) ; b2 . set ( <int> ) ; b2 . and ( b1 ) ; assertFalse ( b2 . get ( <int> ) ) ; b1 . set ( <int> ) ; b1 . and ( b2 ) ; assertFalse ( b1 . get ( <int> ) ) ; } } 

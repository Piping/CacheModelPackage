package org . gradle . performance . measure ; import java . math . BigDecimal ; import java . util . ArrayList ; public class DataSeries < Q > extends ArrayList < Amount < Q > > { private final Amount < Q > average ; private final Amount < Q > max ; private final Amount < Q > min ; private final Amount < Q > stddev ; public DataSeries ( Iterable < ? extends Amount < Q > > values ) { for ( Amount < Q > value : values ) { if ( value ! = null ) { add ( value ) ; } } if ( isEmpty ( ) ) { average = null ; max = null ; min = null ; stddev = null ; return ; } Amount < Q > total = get ( <int> ) ; Amount < Q > min = get ( <int> ) ; Amount < Q > max = get ( <int> ) ; for ( int i = <int> ; i < size ( ) ; i + + ) { Amount < Q > amount = get ( i ) ; total = total . plus ( amount ) ; min = min . compareTo ( amount ) < = <int> ? min : amount ; max = max . compareTo ( amount ) > = <int> ? max : amount ; } average = total . div ( size ( ) ) ; this . min = min ; this . max = max ; BigDecimal sumSquares = BigDecimal . ZERO ; Units < Q > baseUnits = average . getUnits ( ) . getBaseUnits ( ) ; BigDecimal averageValue = average . toUnits ( baseUnits ) . getValue ( ) ; for ( int i = <int> ; i < size ( ) ; i + + ) { Amount < Q > amount = get ( i ) ; BigDecimal diff = amount . toUnits ( baseUnits ) . getValue ( ) ; diff = diff . subtract ( averageValue ) ; diff = diff . multiply ( diff ) ; sumSquares = sumSquares . add ( diff ) ; } BigDecimal result = BigDecimal . valueOf ( Math . sqrt ( sumSquares . divide ( BigDecimal . valueOf ( size ( ) ) , BigDecimal . ROUND_HALF_UP ) . doubleValue ( ) ) ) . setScale ( <int> , BigDecimal . ROUND_HALF_UP ) ; stddev = Amount . valueOf ( result , baseUnits ) ; } public Amount < Q > getAverage ( ) { return average ; } public Amount < Q > getMin ( ) { return min ; } public Amount < Q > getMax ( ) { return max ; } public Amount < Q > getStddev ( ) { return stddev ; } } 

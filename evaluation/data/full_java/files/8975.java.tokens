package org . elasticsearch . test ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentHelper ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . common . xcontent . ToXContent . EMPTY_PARAMS ; public final class XContentTestUtils { private XContentTestUtils ( ) { } public static Map < String , Object > convertToMap ( ToXContent part ) throws IOException { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; part . toXContent ( builder , EMPTY_PARAMS ) ; builder . endObject ( ) ; return XContentHelper . convertToMap ( builder . bytes ( ) , false ) . v2 ( ) ; } public static String differenceBetweenMapsIgnoringArrayOrder ( Map < String , Object > first , Map < String , Object > second ) { return differenceBetweenMapsIgnoringArrayOrder ( <str> , first , second ) ; } private static String differenceBetweenMapsIgnoringArrayOrder ( String path , Map < String , Object > first , Map < String , Object > second ) { if ( first . size ( ) ! = second . size ( ) ) { return path + <str> + first . size ( ) + <str> + second . size ( ) ; } for ( String key : first . keySet ( ) ) { String reason = differenceBetweenObjectsIgnoringArrayOrder ( path + <str> + key , first . get ( key ) , second . get ( key ) ) ; if ( reason ! = null ) { return reason ; } } return null ; } @SuppressWarnings ( <str> ) private static String differenceBetweenObjectsIgnoringArrayOrder ( String path , Object first , Object second ) { if ( first = = null ) { if ( second = = null ) { return null ; } else { return path + <str> ; } } else if ( first instanceof List ) { if ( second instanceof List ) { List < Object > secondList = new ArrayList < > ( ( List < Object > ) second ) ; List < Object > firstList = ( List < Object > ) first ; if ( firstList . size ( ) = = secondList . size ( ) ) { String reason = path + <str> ; for ( Object firstObj : firstList ) { boolean found = false ; for ( Object secondObj : secondList ) { reason = differenceBetweenObjectsIgnoringArrayOrder ( path + <str> , firstObj , secondObj ) ; if ( reason = = null ) { secondList . remove ( secondObj ) ; found = true ; break ; } } if ( found = = false ) { return reason ; } } if ( secondList . isEmpty ( ) ) { return null ; } else { return path + <str> ; } } else { return path + <str> + firstList . size ( ) + <str> + secondList . size ( ) ; } } else { return path + <str> ; } } else if ( first instanceof Map ) { if ( second instanceof Map ) { return differenceBetweenMapsIgnoringArrayOrder ( path , ( Map < String , Object > ) first , ( Map < String , Object > ) second ) ; } else { return path + <str> ; } } else { if ( first . equals ( second ) ) { return null ; } else { return path + <str> + first + <str> + second + <str> ; } } } } 

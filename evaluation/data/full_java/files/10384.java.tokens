package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . MultisetFeature ; import com . google . common . collect . testing . google . MultisetTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringMultisetGenerator ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Arrays ; import java . util . List ; @GwtCompatible ( emulated = true ) public class LinkedHashMultisetTest extends TestCase { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( MultisetTestSuiteBuilder . using ( linkedHashMultisetGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . SERIALIZABLE , CollectionFeature . GENERAL_PURPOSE , MultisetFeature . ENTRIES_ARE_VIEWS ) . createTestSuite ( ) ) ; suite . addTestSuite ( LinkedHashMultisetTest . class ) ; return suite ; } private static TestStringMultisetGenerator linkedHashMultisetGenerator ( ) { return new TestStringMultisetGenerator ( ) { @Override protected Multiset < String > create ( String [ ] elements ) { return LinkedHashMultiset . create ( asList ( elements ) ) ; } @Override public List < String > order ( List < String > insertionOrder ) { List < String > order = Lists . newArrayList ( ) ; for ( String s : insertionOrder ) { int index = order . indexOf ( s ) ; if ( index = = - <int> ) { order . add ( s ) ; } else { order . add ( index , s ) ; } } return order ; } } ; } public void testCreate ( ) { Multiset < String > multiset = LinkedHashMultiset . create ( ) ; multiset . add ( <str> , <int> ) ; multiset . add ( <str> ) ; assertEquals ( <int> , multiset . size ( ) ) ; assertEquals ( <int> , multiset . count ( <str> ) ) ; assertEquals ( <str> , multiset . toString ( ) ) ; } public void testCreateWithSize ( ) { Multiset < String > multiset = LinkedHashMultiset . create ( <int> ) ; multiset . add ( <str> , <int> ) ; multiset . add ( <str> ) ; assertEquals ( <int> , multiset . size ( ) ) ; assertEquals ( <int> , multiset . count ( <str> ) ) ; assertEquals ( <str> , multiset . toString ( ) ) ; } public void testCreateFromIterable ( ) { Multiset < String > multiset = LinkedHashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertEquals ( <int> , multiset . size ( ) ) ; assertEquals ( <int> , multiset . count ( <str> ) ) ; assertEquals ( <str> , multiset . toString ( ) ) ; } public void testToString ( ) { Multiset < String > ms = LinkedHashMultiset . create ( ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> , <int> ) ; assertEquals ( <str> , ms . toString ( ) ) ; } public void testLosesPlaceInLine ( ) throws Exception { Multiset < String > ms = LinkedHashMultiset . create ( ) ; ms . add ( <str> ) ; ms . add ( <str> , <int> ) ; ms . add ( <str> ) ; assertThat ( ms . elementSet ( ) ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; ms . remove ( <str> ) ; assertThat ( ms . elementSet ( ) ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; ms . add ( <str> ) ; assertThat ( ms . elementSet ( ) ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; ms . remove ( <str> , <int> ) ; ms . add ( <str> ) ; assertThat ( ms . elementSet ( ) ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } } 

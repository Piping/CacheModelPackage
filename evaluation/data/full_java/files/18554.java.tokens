package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . InputProcessor ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Sprite ; import com . badlogic . gdx . graphics . g2d . SpriteCache ; import com . badlogic . gdx . tests . utils . GdxTest ; public class SpriteCacheOffsetTest extends GdxTest implements InputProcessor { private int tileMapWidth = <int> ; private int tileMapHeight = <int> ; private int tileSize = <int> ; private SpriteCache cache ; private Texture texture ; public void create ( ) { texture = new Texture ( Gdx . files . internal ( <str> ) ) ; Sprite sprite = new Sprite ( texture ) ; sprite . setSize ( tileSize , tileSize ) ; cache = new SpriteCache ( <int> , false ) ; for ( int y = <int> ; y < tileMapHeight ; y + + ) { cache . beginCache ( ) ; for ( int x = <int> ; x < tileMapWidth ; x + + ) { sprite . setPosition ( x * tileSize , y * tileSize ) ; cache . add ( sprite ) ; } cache . endCache ( ) ; sprite . rotate90 ( true ) ; } } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; cache . begin ( ) ; for ( int y = <int> ; y < tileMapHeight - <int> ; y + + ) cache . draw ( y , <int> , tileMapWidth - <int> ) ; cache . end ( ) ; } @Override public void dispose ( ) { cache . dispose ( ) ; texture . dispose ( ) ; } } 

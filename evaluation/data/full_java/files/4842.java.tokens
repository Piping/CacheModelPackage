package org . eclipse . ui . externaltools . internal . launchConfigurations ; import java . io . File ; import org . eclipse . core . externaltools . internal . IExternalToolConstants ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . variables . IStringVariableManager ; import org . eclipse . core . variables . VariablesPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . ui . AbstractLaunchConfigurationTab ; import org . eclipse . debug . ui . StringVariableSelectionDialog ; import org . eclipse . jface . dialogs . Dialog ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . swt . SWT ; import org . eclipse . swt . accessibility . AccessibleAdapter ; import org . eclipse . swt . accessibility . AccessibleEvent ; import org . eclipse . swt . events . ModifyEvent ; import org . eclipse . swt . events . ModifyListener ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . events . TraverseEvent ; import org . eclipse . swt . events . TraverseListener ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . DirectoryDialog ; import org . eclipse . swt . widgets . FileDialog ; import org . eclipse . swt . widgets . Group ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . dialogs . ContainerSelectionDialog ; import org . eclipse . ui . dialogs . ResourceSelectionDialog ; import org . eclipse . ui . externaltools . internal . model . ExternalToolsImages ; import org . eclipse . ui . externaltools . internal . model . ExternalToolsPlugin ; public abstract class ExternalToolsMainTab extends AbstractLaunchConfigurationTab { public final static String FIRST_EDIT = <str> ; protected Text locationField ; protected Text workDirectoryField ; protected Button fileLocationButton ; protected Button workspaceLocationButton ; protected Button variablesLocationButton ; protected Button fileWorkingDirectoryButton ; protected Button workspaceWorkingDirectoryButton ; protected Button variablesWorkingDirectoryButton ; protected Text argumentField ; protected Button argumentVariablesButton ; protected SelectionAdapter selectionAdapter ; protected boolean fInitializing = false ; private boolean userEdited = false ; protected WidgetListener fListener = new WidgetListener ( ) ; protected class WidgetListener extends SelectionAdapter implements ModifyListener { @Override public void modifyText ( ModifyEvent e ) { if ( ! fInitializing ) { setDirty ( true ) ; userEdited = true ; updateLaunchConfigurationDialog ( ) ; } } @Override public void widgetSelected ( SelectionEvent e ) { setDirty ( true ) ; Object source = e . getSource ( ) ; if ( source = = workspaceLocationButton ) { handleWorkspaceLocationButtonSelected ( ) ; } else if ( source = = fileLocationButton ) { handleFileLocationButtonSelected ( ) ; } else if ( source = = workspaceWorkingDirectoryButton ) { handleWorkspaceWorkingDirectoryButtonSelected ( ) ; } else if ( source = = fileWorkingDirectoryButton ) { handleFileWorkingDirectoryButtonSelected ( ) ; } else if ( source = = argumentVariablesButton ) { handleVariablesButtonSelected ( argumentField ) ; } else if ( source = = variablesLocationButton ) { handleVariablesButtonSelected ( locationField ) ; } else if ( source = = variablesWorkingDirectoryButton ) { handleVariablesButtonSelected ( workDirectoryField ) ; } } } @Override public void createControl ( Composite parent ) { Composite mainComposite = new Composite ( parent , SWT . NONE ) ; setControl ( mainComposite ) ; mainComposite . setFont ( parent . getFont ( ) ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = <int> ; GridData gridData = new GridData ( GridData . FILL_HORIZONTAL ) ; mainComposite . setLayout ( layout ) ; mainComposite . setLayoutData ( gridData ) ; createLocationComponent ( mainComposite ) ; createWorkDirectoryComponent ( mainComposite ) ; createArgumentComponent ( mainComposite ) ; createVerticalSpacer ( mainComposite , <int> ) ; Dialog . applyDialogFont ( parent ) ; } protected void createLocationComponent ( Composite parent ) { Group group = new Group ( parent , SWT . NONE ) ; String locationLabel = getLocationLabel ( ) ; group . setText ( locationLabel ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = <int> ; GridData gridData = new GridData ( GridData . FILL_HORIZONTAL ) ; group . setLayout ( layout ) ; group . setLayoutData ( gridData ) ; locationField = new Text ( group , SWT . BORDER ) ; gridData = new GridData ( GridData . FILL_HORIZONTAL ) ; gridData . widthHint = IDialogConstants . ENTRY_FIELD_WIDTH ; locationField . setLayoutData ( gridData ) ; locationField . addModifyListener ( fListener ) ; addControlAccessibleListener ( locationField , group . getText ( ) ) ; Composite buttonComposite = new Composite ( group , SWT . NONE ) ; layout = new GridLayout ( ) ; layout . marginHeight = <int> ; layout . marginWidth = <int> ; layout . numColumns = <int> ; gridData = new GridData ( GridData . HORIZONTAL_ALIGN_END ) ; buttonComposite . setLayout ( layout ) ; buttonComposite . setLayoutData ( gridData ) ; buttonComposite . setFont ( parent . getFont ( ) ) ; workspaceLocationButton = createPushButton ( buttonComposite , ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab__Browse_Workspace____3 , null ) ; workspaceLocationButton . addSelectionListener ( fListener ) ; addControlAccessibleListener ( workspaceLocationButton , group . getText ( ) + <str> + workspaceLocationButton . getText ( ) ) ; fileLocationButton = createPushButton ( buttonComposite , ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Brows_e_File_System____4 , null ) ; fileLocationButton . addSelectionListener ( fListener ) ; addControlAccessibleListener ( fileLocationButton , group . getText ( ) + <str> + fileLocationButton . getText ( ) ) ; variablesLocationButton = createPushButton ( buttonComposite , ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_31 , null ) ; variablesLocationButton . addSelectionListener ( fListener ) ; addControlAccessibleListener ( variablesLocationButton , group . getText ( ) + <str> + variablesLocationButton . getText ( ) ) ; } protected String getLocationLabel ( ) { return ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab__Location___2 ; } protected void createWorkDirectoryComponent ( Composite parent ) { Group group = new Group ( parent , SWT . NONE ) ; String groupName = getWorkingDirectoryLabel ( ) ; group . setText ( groupName ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = <int> ; GridData gridData = new GridData ( GridData . FILL_HORIZONTAL ) ; group . setLayout ( layout ) ; group . setLayoutData ( gridData ) ; workDirectoryField = new Text ( group , SWT . BORDER ) ; GridData data = new GridData ( GridData . FILL_HORIZONTAL ) ; data . widthHint = IDialogConstants . ENTRY_FIELD_WIDTH ; workDirectoryField . setLayoutData ( data ) ; workDirectoryField . addModifyListener ( fListener ) ; addControlAccessibleListener ( workDirectoryField , group . getText ( ) ) ; Composite buttonComposite = new Composite ( group , SWT . NONE ) ; layout = new GridLayout ( ) ; layout . marginWidth = <int> ; layout . marginHeight = <int> ; layout . numColumns = <int> ; gridData = new GridData ( GridData . HORIZONTAL_ALIGN_END ) ; buttonComposite . setLayout ( layout ) ; buttonComposite . setLayoutData ( gridData ) ; buttonComposite . setFont ( parent . getFont ( ) ) ; workspaceWorkingDirectoryButton = createPushButton ( buttonComposite , ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Browse_Wor_kspace____6 , null ) ; workspaceWorkingDirectoryButton . addSelectionListener ( fListener ) ; addControlAccessibleListener ( workspaceWorkingDirectoryButton , group . getText ( ) + <str> + workspaceWorkingDirectoryButton . getText ( ) ) ; fileWorkingDirectoryButton = createPushButton ( buttonComposite , ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Browse_F_ile_System____7 , null ) ; fileWorkingDirectoryButton . addSelectionListener ( fListener ) ; addControlAccessibleListener ( fileWorkingDirectoryButton , group . getText ( ) + <str> + fileLocationButton . getText ( ) ) ; variablesWorkingDirectoryButton = createPushButton ( buttonComposite , ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_32 , null ) ; variablesWorkingDirectoryButton . addSelectionListener ( fListener ) ; addControlAccessibleListener ( variablesWorkingDirectoryButton , group . getText ( ) + <str> + variablesWorkingDirectoryButton . getText ( ) ) ; } protected String getWorkingDirectoryLabel ( ) { return ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Working__Directory__5 ; } protected void createArgumentComponent ( Composite parent ) { Group group = new Group ( parent , SWT . NONE ) ; String groupName = ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab__Arguments___1 ; group . setText ( groupName ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = <int> ; GridData gridData = new GridData ( GridData . FILL_BOTH ) ; group . setLayout ( layout ) ; group . setLayoutData ( gridData ) ; group . setFont ( parent . getFont ( ) ) ; argumentField = new Text ( group , SWT . MULTI | SWT . WRAP | SWT . BORDER | SWT . V_SCROLL ) ; argumentField . addTraverseListener ( new TraverseListener ( ) { @Override public void keyTraversed ( TraverseEvent event ) { if ( event . detail = = SWT . TRAVERSE_RETURN & & ( event . stateMask & SWT . MODIFIER_MASK ) ! = <int> ) { event . doit = true ; } } } ) ; gridData = new GridData ( GridData . FILL_BOTH ) ; gridData . widthHint = IDialogConstants . ENTRY_FIELD_WIDTH ; gridData . heightHint = <int> ; argumentField . setLayoutData ( gridData ) ; argumentField . addModifyListener ( fListener ) ; addControlAccessibleListener ( argumentField , group . getText ( ) ) ; Composite composite = new Composite ( group , SWT . NONE ) ; layout = new GridLayout ( ) ; layout . numColumns = <int> ; layout . marginHeight = <int> ; layout . marginWidth = <int> ; gridData = new GridData ( GridData . HORIZONTAL_ALIGN_END ) ; composite . setLayout ( layout ) ; composite . setLayoutData ( gridData ) ; composite . setFont ( parent . getFont ( ) ) ; argumentVariablesButton = createPushButton ( composite , ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Varia_bles____2 , null ) ; argumentVariablesButton . addSelectionListener ( fListener ) ; addControlAccessibleListener ( argumentVariablesButton , argumentVariablesButton . getText ( ) ) ; Label instruction = new Label ( group , SWT . NONE ) ; instruction . setText ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_3 ) ; gridData = new GridData ( GridData . HORIZONTAL_ALIGN_FILL ) ; gridData . horizontalSpan = <int> ; instruction . setLayoutData ( gridData ) ; } @Override public void setDefaults ( ILaunchConfigurationWorkingCopy configuration ) { configuration . setAttribute ( FIRST_EDIT , true ) ; } @Override public void initializeFrom ( ILaunchConfiguration configuration ) { fInitializing = true ; updateLocation ( configuration ) ; updateWorkingDirectory ( configuration ) ; updateArgument ( configuration ) ; fInitializing = false ; setDirty ( false ) ; } protected void updateWorkingDirectory ( ILaunchConfiguration configuration ) { String workingDir = IExternalToolConstants . EMPTY_STRING ; try { workingDir = configuration . getAttribute ( IExternalToolConstants . ATTR_WORKING_DIRECTORY , IExternalToolConstants . EMPTY_STRING ) ; } catch ( CoreException ce ) { ExternalToolsPlugin . getDefault ( ) . log ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Error_reading_configuration_10 , ce ) ; } workDirectoryField . setText ( workingDir ) ; } protected void updateLocation ( ILaunchConfiguration configuration ) { String location = IExternalToolConstants . EMPTY_STRING ; try { location = configuration . getAttribute ( IExternalToolConstants . ATTR_LOCATION , IExternalToolConstants . EMPTY_STRING ) ; } catch ( CoreException ce ) { ExternalToolsPlugin . getDefault ( ) . log ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Error_reading_configuration_10 , ce ) ; } locationField . setText ( location ) ; } protected void updateArgument ( ILaunchConfiguration configuration ) { String arguments = IExternalToolConstants . EMPTY_STRING ; try { arguments = configuration . getAttribute ( IExternalToolConstants . ATTR_TOOL_ARGUMENTS , IExternalToolConstants . EMPTY_STRING ) ; } catch ( CoreException ce ) { ExternalToolsPlugin . getDefault ( ) . log ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Error_reading_configuration_7 , ce ) ; } argumentField . setText ( arguments ) ; } @Override public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { String location = locationField . getText ( ) . trim ( ) ; if ( location . length ( ) = = <int> ) { configuration . setAttribute ( IExternalToolConstants . ATTR_LOCATION , ( String ) null ) ; } else { configuration . setAttribute ( IExternalToolConstants . ATTR_LOCATION , location ) ; } String workingDirectory = workDirectoryField . getText ( ) . trim ( ) ; if ( workingDirectory . length ( ) = = <int> ) { configuration . setAttribute ( IExternalToolConstants . ATTR_WORKING_DIRECTORY , ( String ) null ) ; } else { configuration . setAttribute ( IExternalToolConstants . ATTR_WORKING_DIRECTORY , workingDirectory ) ; } String arguments = argumentField . getText ( ) . trim ( ) ; if ( arguments . length ( ) = = <int> ) { configuration . setAttribute ( IExternalToolConstants . ATTR_TOOL_ARGUMENTS , ( String ) null ) ; } else { configuration . setAttribute ( IExternalToolConstants . ATTR_TOOL_ARGUMENTS , arguments ) ; } if ( userEdited ) { configuration . setAttribute ( FIRST_EDIT , ( String ) null ) ; } } @Override public String getName ( ) { return ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab__Main_17 ; } @Override public boolean isValid ( ILaunchConfiguration launchConfig ) { setErrorMessage ( null ) ; setMessage ( null ) ; boolean newConfig = false ; try { newConfig = launchConfig . getAttribute ( FIRST_EDIT , false ) ; } catch ( CoreException e ) { } return validateLocation ( newConfig ) & & validateWorkDirectory ( ) ; } protected boolean validateLocation ( boolean newConfig ) { String location = locationField . getText ( ) . trim ( ) ; if ( location . length ( ) < <int> ) { if ( newConfig ) { setErrorMessage ( null ) ; setMessage ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_30 ) ; } else { setErrorMessage ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_External_tool_location_cannot_be_empty_18 ) ; setMessage ( null ) ; } return false ; } String expandedLocation = null ; try { expandedLocation = resolveValue ( location ) ; if ( expandedLocation = = null ) { return true ; } } catch ( CoreException e ) { setErrorMessage ( e . getStatus ( ) . getMessage ( ) ) ; return false ; } File file = new File ( expandedLocation ) ; if ( ! file . exists ( ) ) { if ( ! newConfig ) { setErrorMessage ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_External_tool_location_does_not_exist_19 ) ; } return false ; } if ( ! file . isFile ( ) ) { if ( ! newConfig ) { setErrorMessage ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_External_tool_location_specified_is_not_a_file_20 ) ; } return false ; } return true ; } private void validateVaribles ( String expression ) throws CoreException { IStringVariableManager manager = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) ; manager . validateStringVariables ( expression ) ; } private String resolveValue ( String expression ) throws CoreException { String expanded = null ; try { expanded = getValue ( expression ) ; } catch ( CoreException e ) { validateVaribles ( expression ) ; return null ; } return expanded ; } private String getValue ( String expression ) throws CoreException { IStringVariableManager manager = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) ; return manager . performStringSubstitution ( expression ) ; } protected boolean validateWorkDirectory ( ) { String dir = workDirectoryField . getText ( ) . trim ( ) ; if ( dir . length ( ) < = <int> ) { return true ; } String expandedDir = null ; try { expandedDir = resolveValue ( dir ) ; if ( expandedDir = = null ) { return true ; } } catch ( CoreException e ) { setErrorMessage ( e . getStatus ( ) . getMessage ( ) ) ; return false ; } File file = new File ( expandedDir ) ; if ( ! file . exists ( ) ) { setErrorMessage ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_External_tool_working_directory_does_not_exist_or_is_invalid_21 ) ; return false ; } if ( ! file . isDirectory ( ) ) { setErrorMessage ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Not_a_directory ) ; return false ; } return true ; } protected void handleFileLocationButtonSelected ( ) { FileDialog fileDialog = new FileDialog ( getShell ( ) , SWT . NONE ) ; fileDialog . setFileName ( locationField . getText ( ) ) ; String text = fileDialog . open ( ) ; if ( text ! = null ) { locationField . setText ( text ) ; } } protected void handleWorkspaceLocationButtonSelected ( ) { ResourceSelectionDialog dialog ; dialog = new ResourceSelectionDialog ( getShell ( ) , ResourcesPlugin . getWorkspace ( ) . getRoot ( ) , ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_Select_a_resource_22 ) ; dialog . open ( ) ; Object [ ] results = dialog . getResult ( ) ; if ( results = = null | | results . length < <int> ) { return ; } IResource resource = ( IResource ) results [ <int> ] ; locationField . setText ( newVariableExpression ( <str> , resource . getFullPath ( ) . toString ( ) ) ) ; } protected void handleWorkspaceWorkingDirectoryButtonSelected ( ) { ContainerSelectionDialog containerDialog ; containerDialog = new ContainerSelectionDialog ( getShell ( ) , ResourcesPlugin . getWorkspace ( ) . getRoot ( ) , false , ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_23 ) ; containerDialog . open ( ) ; Object [ ] resource = containerDialog . getResult ( ) ; String text = null ; if ( resource ! = null & & resource . length > <int> ) { text = newVariableExpression ( <str> , ( ( IPath ) resource [ <int> ] ) . toString ( ) ) ; } if ( text ! = null ) { workDirectoryField . setText ( text ) ; } } protected String newVariableExpression ( String varName , String arg ) { return VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) . generateVariableExpression ( varName , arg ) ; } protected void handleFileWorkingDirectoryButtonSelected ( ) { DirectoryDialog dialog = new DirectoryDialog ( getShell ( ) , SWT . SAVE ) ; dialog . setMessage ( ExternalToolsLaunchConfigurationMessages . ExternalToolsMainTab_23 ) ; dialog . setFilterPath ( workDirectoryField . getText ( ) ) ; String text = dialog . open ( ) ; if ( text ! = null ) { workDirectoryField . setText ( text ) ; } } private void handleVariablesButtonSelected ( Text textField ) { String variable = getVariable ( ) ; if ( variable ! = null ) { textField . insert ( variable ) ; } } private String getVariable ( ) { StringVariableSelectionDialog dialog = new StringVariableSelectionDialog ( getShell ( ) ) ; dialog . open ( ) ; return dialog . getVariableExpression ( ) ; } @Override public Image getImage ( ) { return ExternalToolsImages . getImage ( org . eclipse . ui . externaltools . internal . model . IExternalToolConstants . IMG_TAB_MAIN ) ; } @Override public void deactivated ( ILaunchConfigurationWorkingCopy workingCopy ) { } @Override public void activated ( ILaunchConfigurationWorkingCopy workingCopy ) { } public void addControlAccessibleListener ( Control control , String controlName ) { String [ ] strs = controlName . split ( <str> ) ; StringBuffer stripped = new StringBuffer ( ) ; for ( int i = <int> ; i < strs . length ; i + + ) { stripped . append ( strs [ i ] ) ; } control . getAccessible ( ) . addAccessibleListener ( new ControlAccessibleListener ( stripped . toString ( ) ) ) ; } private class ControlAccessibleListener extends AccessibleAdapter { private String controlName ; ControlAccessibleListener ( String name ) { controlName = name ; } @Override public void getName ( AccessibleEvent e ) { e . result = controlName ; } } } 

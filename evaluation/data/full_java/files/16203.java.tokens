package org . gradle . foundation . output ; import org . gradle . foundation . output . definitions . * ; import java . util . * ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class FileLinkDefinitionLord { private List < String > extensions = new ArrayList < String > ( ) ; private Map < Pattern , FileLinkDefinition > complexFileLinkDefinitions = new LinkedHashMap < Pattern , FileLinkDefinition > ( ) ; private Map < Pattern , FileLinkDefinition > extensionFileLinkDefinitions = new LinkedHashMap < Pattern , FileLinkDefinition > ( ) ; private Pattern combinedSearchPattern ; public FileLinkDefinitionLord ( ) { addFileExtension ( <str> , <str> ) ; addFileExtension ( <str> , <str> ) ; addFileExtension ( <str> , <str> ) ; addFileExtension ( <str> , <str> ) ; addFileExtension ( <str> , <str> ) ; addFileExtension ( <str> , <str> ) ; addPrefixedFileLink ( <str> , <str> , <str> , <str> ) ; addPrefixedFileLink ( <str> , <str> , <str> , null ) ; addCustomComplexFileLink ( new OptionalLineNumberFileLinkDefinition ( <str> , <str> , <str> , <str> ) ) ; addPrefixedFileLink ( <str> , <str> , <str> , <str> ) ; addPrefixedFileLink ( <str> , <str> , <str> , null ) ; addPrefixedFileLink ( <str> , <str> , <str> , null ) ; addCustomComplexFileLink ( new TestReportFileLinkDefinition ( ) ) ; } public void addFileExtension ( String extension , String lineNumberDelimiter ) { if ( ! extension . startsWith ( <str> ) ) { extension = <str> + extension ; } extension = extension . toLowerCase ( ) ; if ( extensions . contains ( extension ) ) { return ; } extensions . add ( extension ) ; String name = extension + <str> ; ExtensionFileLinkDefinition linkDefinition = new ExtensionFileLinkDefinition ( name , extension , lineNumberDelimiter ) ; addToMap ( extensionFileLinkDefinitions , linkDefinition ) ; } public void addPrefixedFileLink ( String name , String prefix , String extension , String lineNumberDelimiter ) { PrefixedFileLinkDefinition linkDefinition = new PrefixedFileLinkDefinition ( name , prefix , extension , lineNumberDelimiter ) ; addToMap ( complexFileLinkDefinitions , linkDefinition ) ; } private void addCustomComplexFileLink ( FileLinkDefinition fileLinkDefinition ) { addToMap ( complexFileLinkDefinitions , fileLinkDefinition ) ; } private void addToMap ( Map < Pattern , FileLinkDefinition > destinationMap , FileLinkDefinition fileLinkDefinition ) { combinedSearchPattern = null ; String searchExpression = fileLinkDefinition . getSearchExpression ( ) ; Pattern pattern = Pattern . compile ( searchExpression , getSearchPatternFlags ( ) ) ; destinationMap . put ( pattern , fileLinkDefinition ) ; } public List < String > getFileExtensions ( ) { return Collections . unmodifiableList ( extensions ) ; } public List < FileLinkDefinition > getFileLinkDefinitions ( ) { List < FileLinkDefinition > fileLinkDefinitions = new ArrayList < FileLinkDefinition > ( ) ; fileLinkDefinitions . addAll ( complexFileLinkDefinitions . values ( ) ) ; fileLinkDefinitions . addAll ( extensionFileLinkDefinitions . values ( ) ) ; return Collections . unmodifiableList ( fileLinkDefinitions ) ; } private int getSearchPatternFlags ( ) { return Pattern . CASE_INSENSITIVE ; } public FileLinkDefinition getMatchingFileLinkDefinition ( String text ) { FileLinkDefinition fileLinkDefinition = getMatchingFileLinkDefinition ( text , complexFileLinkDefinitions ) ; if ( fileLinkDefinition = = null ) { fileLinkDefinition = getMatchingFileLinkDefinition ( text , extensionFileLinkDefinitions ) ; } return fileLinkDefinition ; } private static FileLinkDefinition getMatchingFileLinkDefinition ( String text , Map < Pattern , FileLinkDefinition > map ) { Iterator < Pattern > iterator = map . keySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Pattern pattern = iterator . next ( ) ; Matcher matcher = pattern . matcher ( text ) ; if ( matcher . find ( <int> ) ) { return map . get ( pattern ) ; } } return null ; } public Pattern getSearchPattern ( ) { if ( combinedSearchPattern = = null ) { combinedSearchPattern = buildSearchPattern ( ) ; } return combinedSearchPattern ; } private Pattern buildSearchPattern ( ) { StringBuilder criteria = new StringBuilder ( ) ; Iterator < FileLinkDefinition > iterator = getFileLinkDefinitions ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { FileLinkDefinition fileLinkDefinition = iterator . next ( ) ; String searchExpression = fileLinkDefinition . getSearchExpression ( ) ; criteria . append ( <str> ) . append ( searchExpression ) . append ( <str> ) ; if ( iterator . hasNext ( ) ) { criteria . append ( <str> ) ; } } return Pattern . compile ( criteria . toString ( ) , getSearchPatternFlags ( ) ) ; } } 

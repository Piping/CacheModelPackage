package org . elasticsearch . bootstrap ; import com . sun . jna . * ; import com . sun . jna . win32 . StdCallLibrary ; import org . apache . lucene . util . Constants ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; final class JNAKernel32Library { private static final ESLogger logger = Loggers . getLogger ( JNAKernel32Library . class ) ; private List < NativeHandlerCallback > callbacks = new ArrayList < > ( ) ; private final static class Holder { private final static JNAKernel32Library instance = new JNAKernel32Library ( ) ; } private JNAKernel32Library ( ) { if ( Constants . WINDOWS ) { try { Native . register ( <str> ) ; logger . debug ( <str> ) ; } catch ( NoClassDefFoundError e ) { logger . warn ( <str> ) ; } catch ( UnsatisfiedLinkError e ) { logger . warn ( <str> ) ; } } } static JNAKernel32Library getInstance ( ) { return Holder . instance ; } boolean addConsoleCtrlHandler ( ConsoleCtrlHandler handler ) { boolean result = false ; if ( handler ! = null ) { NativeHandlerCallback callback = new NativeHandlerCallback ( handler ) ; result = SetConsoleCtrlHandler ( callback , true ) ; if ( result ) { callbacks . add ( callback ) ; } } return result ; } List < Object > getCallbacks ( ) { return Collections . < Object > unmodifiableList ( callbacks ) ; } native boolean SetConsoleCtrlHandler ( StdCallLibrary . StdCallCallback handler , boolean add ) ; class NativeHandlerCallback implements StdCallLibrary . StdCallCallback { private final ConsoleCtrlHandler handler ; public NativeHandlerCallback ( ConsoleCtrlHandler handler ) { this . handler = handler ; } public boolean callback ( long dwCtrlType ) { int event = ( int ) dwCtrlType ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( <str> , event , dwCtrlType ) ; } return handler . handle ( event ) ; } } public static final int PAGE_NOACCESS = <hex> ; public static final int PAGE_GUARD = <hex> ; public static final int MEM_COMMIT = <hex> ; public static class MemoryBasicInformation extends Structure { public Pointer BaseAddress ; public Pointer AllocationBase ; public NativeLong AllocationProtect ; public SizeT RegionSize ; public NativeLong State ; public NativeLong Protect ; public NativeLong Type ; @Override protected List < String > getFieldOrder ( ) { return Arrays . asList ( new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ) ; } } public static class SizeT extends IntegerType { public SizeT ( ) { this ( <int> ) ; } public SizeT ( long value ) { super ( Native . SIZE_T_SIZE , value ) ; } } native boolean VirtualLock ( Pointer address , SizeT size ) ; native int VirtualQueryEx ( Pointer handle , Pointer address , MemoryBasicInformation memoryInfo , int length ) ; native boolean SetProcessWorkingSetSize ( Pointer handle , SizeT minSize , SizeT maxSize ) ; native Pointer GetCurrentProcess ( ) ; native boolean CloseHandle ( Pointer handle ) ; native Pointer CreateJobObjectW ( Pointer jobAttributes , String name ) ; native boolean AssignProcessToJobObject ( Pointer job , Pointer process ) ; public static class JOBOBJECT_BASIC_LIMIT_INFORMATION extends Structure implements Structure . ByReference { public long PerProcessUserTimeLimit ; public long PerJobUserTimeLimit ; public int LimitFlags ; public SizeT MinimumWorkingSetSize ; public SizeT MaximumWorkingSetSize ; public int ActiveProcessLimit ; public Pointer Affinity ; public int PriorityClass ; public int SchedulingClass ; @Override protected List < String > getFieldOrder ( ) { return Arrays . asList ( new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ) ; } } static final int JOBOBJECT_BASIC_LIMIT_INFORMATION_CLASS = <int> ; static final int JOB_OBJECT_LIMIT_ACTIVE_PROCESS = <int> ; native boolean QueryInformationJobObject ( Pointer job , int infoClass , Pointer info , int infoLength , Pointer returnLength ) ; native boolean SetInformationJobObject ( Pointer job , int infoClass , Pointer info , int infoLength ) ; } 

package org . gradle . api . internal . plugins ; import org . gradle . api . Nullable ; import org . gradle . api . Plugin ; import static org . gradle . internal . Cast . uncheckedCast ; public class ImperativeOnlyPluginApplicator < T > implements PluginApplicator { private final T target ; public ImperativeOnlyPluginApplicator ( T target ) { this . target = target ; } public void applyImperative ( @Nullable String pluginId , Plugin < ? > plugin ) { Plugin < T > cast = uncheckedCast ( plugin ) ; cast . apply ( target ) ; } public void applyRules ( @Nullable String pluginId , Class < ? > clazz ) { String message = String . format ( <str> , clazz . getName ( ) , target . toString ( ) ) ; throw new UnsupportedOperationException ( message ) ; } public void applyImperativeRulesHybrid ( @Nullable String pluginId , Plugin < ? > plugin ) { applyRules ( pluginId , plugin . getClass ( ) ) ; } } 

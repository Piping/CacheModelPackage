package com . badlogic . gdx . jnigen . parsing ; import java . util . ArrayList ; public interface JavaMethodParser { public ArrayList < JavaSegment > parse ( String classFile ) throws Exception ; public interface JavaSegment { public int getStartIndex ( ) ; public int getEndIndex ( ) ; } public class JniSection implements JavaSegment { private String nativeCode ; private final int startIndex ; private final int endIndex ; public JniSection ( String nativeCode , int startIndex , int endIndex ) { this . nativeCode = nativeCode ; this . startIndex = startIndex ; this . endIndex = endIndex ; } public String getNativeCode ( ) { return nativeCode ; } public void setNativeCode ( String nativeCode ) { this . nativeCode = nativeCode ; } public int getStartIndex ( ) { return startIndex ; } public int getEndIndex ( ) { return endIndex ; } @Override public String toString ( ) { return <str> + nativeCode + <str> + startIndex + <str> + endIndex + <str> ; } } public enum ArgumentType { Boolean ( <str> ) , Byte ( <str> ) , Char ( <str> ) , Short ( <str> ) , Integer ( <str> ) , Long ( <str> ) , Float ( <str> ) , Double ( <str> ) , Buffer ( <str> ) , ByteBuffer ( <str> ) , CharBuffer ( <str> ) , ShortBuffer ( <str> ) , IntBuffer ( <str> ) , LongBuffer ( <str> ) , FloatBuffer ( <str> ) , DoubleBuffer ( <str> ) , BooleanArray ( <str> ) , ByteArray ( <str> ) , CharArray ( <str> ) , ShortArray ( <str> ) , IntegerArray ( <str> ) , LongArray ( <str> ) , FloatArray ( <str> ) , DoubleArray ( <str> ) , String ( <str> ) , Object ( <str> ) , ObjectArray ( <str> ) ; private final String jniType ; ArgumentType ( String jniType ) { this . jniType = jniType ; } public boolean isPrimitiveArray ( ) { return toString ( ) . endsWith ( <str> ) & & this ! = ObjectArray ; } public boolean isBuffer ( ) { return toString ( ) . endsWith ( <str> ) ; } public boolean isObject ( ) { return toString ( ) . equals ( <str> ) | | this = = ObjectArray ; } public boolean isString ( ) { return toString ( ) . equals ( <str> ) ; } public boolean isPlainOldDataType ( ) { return ! isString ( ) & & ! isPrimitiveArray ( ) & & ! isBuffer ( ) & & ! isObject ( ) ; } public String getBufferCType ( ) { if ( ! this . isBuffer ( ) ) throw new RuntimeException ( <str> + this + <str> ) ; if ( this = = Buffer ) return <str> ; if ( this = = ByteBuffer ) return <str> ; if ( this = = CharBuffer ) return <str> ; if ( this = = ShortBuffer ) return <str> ; if ( this = = IntBuffer ) return <str> ; if ( this = = LongBuffer ) return <str> ; if ( this = = FloatBuffer ) return <str> ; if ( this = = DoubleBuffer ) return <str> ; throw new RuntimeException ( <str> + this ) ; } public String getArrayCType ( ) { if ( ! this . isPrimitiveArray ( ) ) throw new RuntimeException ( <str> + this + <str> ) ; if ( this = = BooleanArray ) return <str> ; if ( this = = ByteArray ) return <str> ; if ( this = = CharArray ) return <str> ; if ( this = = ShortArray ) return <str> ; if ( this = = IntegerArray ) return <str> ; if ( this = = LongArray ) return <str> ; if ( this = = FloatArray ) return <str> ; if ( this = = DoubleArray ) return <str> ; throw new RuntimeException ( <str> + this ) ; } public String getJniType ( ) { return jniType ; } } public static class Argument { final ArgumentType type ; private final String name ; public Argument ( ArgumentType type , String name ) { this . type = type ; this . name = name ; } public ArgumentType getType ( ) { return type ; } public String getName ( ) { return name ; } @Override public String toString ( ) { return <str> + type + <str> + name + <str> ; } } public static class JavaMethod implements JavaSegment { private final String className ; private final String name ; private final boolean isStatic ; private boolean isManual ; private final String returnType ; private String nativeCode ; private final ArrayList < Argument > arguments ; private final boolean hasDisposableArgument ; private final int startIndex ; private final int endIndex ; public JavaMethod ( String className , String name , boolean isStatic , String returnType , String nativeCode , ArrayList < Argument > arguments , int startIndex , int endIndex ) { this . className = className ; this . name = name ; this . isStatic = isStatic ; this . returnType = returnType ; this . nativeCode = nativeCode ; this . arguments = arguments ; this . startIndex = startIndex ; this . endIndex = endIndex ; for ( Argument arg : arguments ) { if ( arg . type . isPrimitiveArray ( ) | | arg . type . isBuffer ( ) | | arg . type . isString ( ) ) { hasDisposableArgument = true ; return ; } } hasDisposableArgument = false ; } public String getName ( ) { return name ; } public boolean isStatic ( ) { return isStatic ; } public void setManual ( boolean isManual ) { this . isManual = isManual ; } public boolean isManual ( ) { return this . isManual ; } public String getReturnType ( ) { return returnType ; } public String getNativeCode ( ) { return nativeCode ; } public void setNativeCode ( String nativeCode ) { this . nativeCode = nativeCode ; } public ArrayList < Argument > getArguments ( ) { return arguments ; } public boolean hasDisposableArgument ( ) { return hasDisposableArgument ; } @Override public int getStartIndex ( ) { return startIndex ; } @Override public int getEndIndex ( ) { return endIndex ; } public CharSequence getClassName ( ) { return className ; } @Override public String toString ( ) { return <str> + className + <str> + name + <str> + isStatic + <str> + returnType + <str> + nativeCode + <str> + arguments + <str> + hasDisposableArgument + <str> + startIndex + <str> + endIndex + <str> ; } } } 

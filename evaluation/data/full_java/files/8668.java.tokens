package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . core . StopFilter ; import org . apache . lucene . analysis . ja . JapaneseAnalyzer ; import org . apache . lucene . analysis . util . CharArraySet ; import org . apache . lucene . search . suggest . analyzing . SuggestStopFilter ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import java . util . Map ; import java . util . Set ; import static java . util . Collections . singletonMap ; public class JapaneseStopTokenFilterFactory extends AbstractTokenFilterFactory { private static final Map < String , Set < ? > > NAMED_STOP_WORDS = singletonMap ( <str> , JapaneseAnalyzer . getDefaultStopSet ( ) ) ; private final CharArraySet stopWords ; private final boolean ignoreCase ; private final boolean removeTrailing ; public JapaneseStopTokenFilterFactory ( IndexSettings indexSettings , Environment env , String name , Settings settings ) { super ( indexSettings , name , settings ) ; this . ignoreCase = settings . getAsBoolean ( <str> , false ) ; this . removeTrailing = settings . getAsBoolean ( <str> , true ) ; this . stopWords = Analysis . parseWords ( env , settings , <str> , JapaneseAnalyzer . getDefaultStopSet ( ) , NAMED_STOP_WORDS , ignoreCase ) ; } @Override public TokenStream create ( TokenStream tokenStream ) { if ( removeTrailing ) { return new StopFilter ( tokenStream , stopWords ) ; } else { return new SuggestStopFilter ( tokenStream , stopWords ) ; } } public Set < ? > stopWords ( ) { return stopWords ; } public boolean ignoreCase ( ) { return ignoreCase ; } } 

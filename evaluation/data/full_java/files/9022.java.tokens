package org . elasticsearch . test . rest . client . http ; import org . apache . http . Header ; import org . apache . http . client . methods . CloseableHttpResponse ; import org . apache . http . client . methods . HttpHead ; import org . apache . http . client . methods . HttpUriRequest ; import org . apache . http . util . EntityUtils ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class HttpResponse { private static final ESLogger logger = Loggers . getLogger ( HttpResponse . class ) ; private final HttpUriRequest httpRequest ; private final int statusCode ; private final String reasonPhrase ; private final String body ; private final Map < String , String > headers = new HashMap < > ( ) ; HttpResponse ( HttpUriRequest httpRequest , CloseableHttpResponse httpResponse ) { this . httpRequest = httpRequest ; this . statusCode = httpResponse . getStatusLine ( ) . getStatusCode ( ) ; this . reasonPhrase = httpResponse . getStatusLine ( ) . getReasonPhrase ( ) ; for ( Header header : httpResponse . getAllHeaders ( ) ) { this . headers . put ( header . getName ( ) , header . getValue ( ) ) ; } if ( httpResponse . getEntity ( ) ! = null ) { try { this . body = EntityUtils . toString ( httpResponse . getEntity ( ) , HttpRequestBuilder . DEFAULT_CHARSET ) ; } catch ( IOException e ) { EntityUtils . consumeQuietly ( httpResponse . getEntity ( ) ) ; throw new RuntimeException ( e ) ; } finally { try { httpResponse . close ( ) ; } catch ( IOException e ) { logger . error ( e . getMessage ( ) , e ) ; } } } else { this . body = null ; } } public boolean isError ( ) { return statusCode > = <int> ; } public int getStatusCode ( ) { return statusCode ; } public String getReasonPhrase ( ) { return reasonPhrase ; } public String getBody ( ) { return body ; } public boolean hasBody ( ) { return body ! = null ; } public boolean supportsBody ( ) { return ! HttpHead . METHOD_NAME . equals ( httpRequest . getMethod ( ) ) ; } public Map < String , String > getHeaders ( ) { return headers ; } @Override public String toString ( ) { StringBuilder stringBuilder = new StringBuilder ( statusCode ) . append ( <str> ) . append ( reasonPhrase ) ; if ( hasBody ( ) ) { stringBuilder . append ( <str> ) . append ( body ) ; } return stringBuilder . toString ( ) ; } } 

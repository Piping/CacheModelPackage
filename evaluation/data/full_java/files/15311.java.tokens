package org . gradle . api . internal . plugins ; import com . google . common . base . Function ; import com . google . common . base . Joiner ; import com . google . common . collect . Iterables ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . Transformer ; import org . gradle . jvm . application . scripts . JavaAppStartScriptGenerationDetails ; import org . gradle . util . CollectionUtils ; import java . text . CharacterIterator ; import java . text . StringCharacterIterator ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class StartScriptTemplateBindingFactory implements Transformer < Map < String , String > , JavaAppStartScriptGenerationDetails > { private final boolean windows ; private StartScriptTemplateBindingFactory ( boolean windows ) { this . windows = windows ; } public static StartScriptTemplateBindingFactory windows ( ) { return new StartScriptTemplateBindingFactory ( true ) ; } public static StartScriptTemplateBindingFactory unix ( ) { return new StartScriptTemplateBindingFactory ( false ) ; } @Override public Map < String , String > transform ( JavaAppStartScriptGenerationDetails details ) { Map < String , String > binding = new HashMap < String , String > ( ) ; binding . put ( ScriptBindingParameter . APP_NAME . getKey ( ) , details . getApplicationName ( ) ) ; binding . put ( ScriptBindingParameter . OPTS_ENV_VAR . getKey ( ) , details . getOptsEnvironmentVar ( ) ) ; binding . put ( ScriptBindingParameter . EXIT_ENV_VAR . getKey ( ) , details . getExitEnvironmentVar ( ) ) ; binding . put ( ScriptBindingParameter . MAIN_CLASSNAME . getKey ( ) , details . getMainClassName ( ) ) ; binding . put ( ScriptBindingParameter . DEFAULT_JVM_OPTS . getKey ( ) , createJoinedDefaultJvmOpts ( details . getDefaultJvmOpts ( ) ) ) ; binding . put ( ScriptBindingParameter . APP_NAME_SYS_PROP . getKey ( ) , details . getAppNameSystemProperty ( ) ) ; binding . put ( ScriptBindingParameter . APP_HOME_REL_PATH . getKey ( ) , createJoinedAppHomeRelativePath ( details . getScriptRelPath ( ) ) ) ; binding . put ( ScriptBindingParameter . CLASSPATH . getKey ( ) , createJoinedClasspath ( details . getClasspath ( ) ) ) ; return binding ; } private String createJoinedClasspath ( Iterable < String > classpath ) { if ( windows ) { return Joiner . on ( <str> ) . join ( Iterables . transform ( classpath , new Function < String , String > ( ) { public String apply ( String input ) { return <str> + input . replace ( <str> , <str> ) ; } } ) ) ; } else { return Joiner . on ( <str> ) . join ( Iterables . transform ( classpath , new Function < String , String > ( ) { public String apply ( String input ) { return <str> + input . replace ( <str> , <str> ) ; } } ) ) ; } } private String createJoinedDefaultJvmOpts ( Iterable < String > defaultJvmOpts ) { if ( windows ) { if ( defaultJvmOpts = = null ) { return <str> ; } Iterable < String > quotedDefaultJvmOpts = Iterables . transform ( CollectionUtils . toStringList ( defaultJvmOpts ) , new Function < String , String > ( ) { public String apply ( String jvmOpt ) { return <str> + escapeWindowsJvmOpt ( jvmOpt ) + <str> ; } } ) ; Joiner spaceJoiner = Joiner . on ( <str> ) ; return spaceJoiner . join ( quotedDefaultJvmOpts ) ; } else { if ( defaultJvmOpts = = null ) { return <str> ; } Iterable < String > quotedDefaultJvmOpts = Iterables . transform ( CollectionUtils . toStringList ( defaultJvmOpts ) , new Function < String , String > ( ) { public String apply ( String jvmOpt ) { jvmOpt = jvmOpt . replace ( <str> , <str> ) ; jvmOpt = jvmOpt . replace ( <str> , <str> ) ; jvmOpt = jvmOpt . replace ( <str> , <str> ) ; jvmOpt = jvmOpt . replace ( <str> , <str> ) ; jvmOpt = jvmOpt . replace ( <str> , <str> ) ; return <str> + jvmOpt + <str> ; } } ) ; Joiner spaceJoiner = Joiner . on ( <str> ) ; if ( Iterables . size ( quotedDefaultJvmOpts ) > <int> ) { return <str> + spaceJoiner . join ( quotedDefaultJvmOpts ) + <str> ; } return <str> ; } } private String escapeWindowsJvmOpt ( String jvmOpts ) { boolean wasOnBackslash = false ; StringBuilder escapedJvmOpt = new StringBuilder ( ) ; CharacterIterator it = new StringCharacterIterator ( jvmOpts ) ; for ( char ch = it . first ( ) ; ch ! = CharacterIterator . DONE ; ch = it . next ( ) ) { String repl = Character . toString ( ch ) ; if ( ch = = <str> ) { repl = <str> ; } else if ( ch = = <str> ) { repl = ( wasOnBackslash ? <str> : <str> ) + <str> ; } wasOnBackslash = ch = = <str> ; escapedJvmOpt . append ( repl ) ; } return escapedJvmOpt . toString ( ) ; } private static enum ScriptBindingParameter { APP_NAME ( <str> ) , OPTS_ENV_VAR ( <str> ) , EXIT_ENV_VAR ( <str> ) , MAIN_CLASSNAME ( <str> ) , DEFAULT_JVM_OPTS ( <str> ) , APP_NAME_SYS_PROP ( <str> ) , APP_HOME_REL_PATH ( <str> ) , CLASSPATH ( <str> ) ; private final String key ; private ScriptBindingParameter ( String key ) { this . key = key ; } public String getKey ( ) { return key ; } } String createJoinedAppHomeRelativePath ( String scriptRelPath ) { int depth = StringUtils . countMatches ( scriptRelPath , <str> ) ; if ( depth = = <int> ) { return <str> ; } List < String > appHomeRelativePath = new ArrayList < String > ( depth ) ; for ( int i = <int> ; i < depth ; i + + ) { appHomeRelativePath . add ( <str> ) ; } return Joiner . on ( windows ? <str> : <str> ) . join ( appHomeRelativePath ) ; } } 

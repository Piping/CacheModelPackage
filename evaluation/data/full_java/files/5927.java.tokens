package org . elasticsearch . common . io ; import java . io . IOException ; import java . io . Reader ; public class FastStringReader extends CharSequenceReader { private String str ; private int length ; private int next = <int> ; private int mark = <int> ; public FastStringReader ( String s ) { this . str = s ; this . length = s . length ( ) ; } private void ensureOpen ( ) throws IOException { if ( length = = - <int> ) throw new IOException ( <str> ) ; } @Override public int length ( ) { return length ; } @Override public char charAt ( int index ) { return str . charAt ( index ) ; } @Override public CharSequence subSequence ( int start , int end ) { return str . subSequence ( start , end ) ; } @Override public int read ( ) throws IOException { ensureOpen ( ) ; if ( next > = length ) return - <int> ; return str . charAt ( next + + ) ; } @Override public int read ( char cbuf [ ] , int off , int len ) throws IOException { ensureOpen ( ) ; if ( len = = <int> ) { return <int> ; } if ( next > = length ) return - <int> ; int n = Math . min ( length - next , len ) ; str . getChars ( next , next + n , cbuf , off ) ; next + = n ; return n ; } @Override public long skip ( long ns ) throws IOException { ensureOpen ( ) ; if ( next > = length ) return <int> ; long n = Math . min ( length - next , ns ) ; n = Math . max ( - next , n ) ; next + = n ; return n ; } @Override public boolean ready ( ) throws IOException { ensureOpen ( ) ; return true ; } @Override public boolean markSupported ( ) { return true ; } @Override public void mark ( int readAheadLimit ) throws IOException { if ( readAheadLimit < <int> ) { throw new IllegalArgumentException ( <str> ) ; } ensureOpen ( ) ; mark = next ; } @Override public void reset ( ) throws IOException { ensureOpen ( ) ; next = mark ; } @Override public void close ( ) { length = - <int> ; } @Override public String toString ( ) { return str ; } } 

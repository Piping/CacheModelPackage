package org . apache . cassandra . transport ; import java . util . List ; import java . util . concurrent . TimeUnit ; import io . netty . util . concurrent . AbstractEventExecutor ; import io . netty . util . concurrent . EventExecutorGroup ; import io . netty . util . concurrent . Future ; import org . apache . cassandra . concurrent . TracingAwareExecutorService ; import org . apache . cassandra . config . DatabaseDescriptor ; import static org . apache . cassandra . concurrent . SharedExecutorPool . SHARED ; public class RequestThreadPoolExecutor extends AbstractEventExecutor { private final static int MAX_QUEUED_REQUESTS = <int> ; private final static String THREAD_FACTORY_ID = <str> ; private final TracingAwareExecutorService wrapped = SHARED . newExecutor ( DatabaseDescriptor . getNativeTransportMaxThreads ( ) , MAX_QUEUED_REQUESTS , <str> , THREAD_FACTORY_ID ) ; public boolean isShuttingDown ( ) { return wrapped . isShutdown ( ) ; } public Future < ? > shutdownGracefully ( long l , long l2 , TimeUnit timeUnit ) { throw new IllegalStateException ( ) ; } public Future < ? > terminationFuture ( ) { throw new IllegalStateException ( ) ; } @Override public void shutdown ( ) { wrapped . shutdown ( ) ; } @Override public List < Runnable > shutdownNow ( ) { return wrapped . shutdownNow ( ) ; } public boolean isShutdown ( ) { return wrapped . isShutdown ( ) ; } public boolean isTerminated ( ) { return wrapped . isTerminated ( ) ; } public boolean awaitTermination ( long timeout , TimeUnit unit ) throws InterruptedException { return wrapped . awaitTermination ( timeout , unit ) ; } public EventExecutorGroup parent ( ) { return null ; } public boolean inEventLoop ( Thread thread ) { return false ; } public void execute ( Runnable command ) { wrapped . execute ( command ) ; } } 

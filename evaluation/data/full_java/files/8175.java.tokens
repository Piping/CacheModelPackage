package org . elasticsearch . index . mapper . externalvalues ; import org . apache . lucene . util . GeoUtils ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . Mapper ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . index . mapper . core . StringFieldMapper ; import org . elasticsearch . indices . mapper . MapperRegistry ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . elasticsearch . test . VersionUtils ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; public class SimpleExternalMappingTests extends ESSingleNodeTestCase { public void testExternalValues ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_1_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; IndexService indexService = createIndex ( <str> , settings ) ; MapperRegistry mapperRegistry = new MapperRegistry ( Collections . singletonMap ( ExternalMapperPlugin . EXTERNAL , new ExternalMapper . TypeParser ( ExternalMapperPlugin . EXTERNAL , <str> ) ) , Collections . singletonMap ( ExternalMetadataMapper . CONTENT_TYPE , new ExternalMetadataMapper . TypeParser ( ) ) ) ; DocumentMapperParser parser = new DocumentMapperParser ( indexService . getIndexSettings ( ) , indexService . mapperService ( ) , indexService . analysisService ( ) , indexService . similarityService ( ) , mapperRegistry ) ; DocumentMapper documentMapper = parser . parse ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( ExternalMetadataMapper . CONTENT_TYPE ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ) ; ParsedDocument doc = documentMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; if ( version . before ( Version . V_2_2_0 ) ) { assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; } else { assertThat ( Long . parseLong ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) ) , is ( GeoUtils . mortonHash ( <float> , <float> ) ) ) ; } assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( ExternalMetadataMapper . FIELD_NAME ) . stringValue ( ) , is ( ExternalMetadataMapper . FIELD_VALUE ) ) ; } public void testExternalValuesWithMultifield ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_1_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; IndexService indexService = createIndex ( <str> , settings ) ; Map < String , Mapper . TypeParser > mapperParsers = new HashMap < > ( ) ; mapperParsers . put ( ExternalMapperPlugin . EXTERNAL , new ExternalMapper . TypeParser ( ExternalMapperPlugin . EXTERNAL , <str> ) ) ; mapperParsers . put ( StringFieldMapper . CONTENT_TYPE , new StringFieldMapper . TypeParser ( ) ) ; MapperRegistry mapperRegistry = new MapperRegistry ( mapperParsers , Collections . emptyMap ( ) ) ; DocumentMapperParser parser = new DocumentMapperParser ( indexService . getIndexSettings ( ) , indexService . mapperService ( ) , indexService . analysisService ( ) , indexService . similarityService ( ) , mapperRegistry ) ; DocumentMapper documentMapper = parser . parse ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , ExternalMapperPlugin . EXTERNAL ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ) ; ParsedDocument doc = documentMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; if ( version . before ( Version . V_2_2_0 ) ) { assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; } else { assertThat ( Long . parseLong ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) ) , is ( GeoUtils . mortonHash ( <float> , <float> ) ) ) ; } assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; } public void testExternalValuesWithMultifieldTwoLevels ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_1_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; IndexService indexService = createIndex ( <str> , settings ) ; Map < String , Mapper . TypeParser > mapperParsers = new HashMap < > ( ) ; mapperParsers . put ( ExternalMapperPlugin . EXTERNAL , new ExternalMapper . TypeParser ( ExternalMapperPlugin . EXTERNAL , <str> ) ) ; mapperParsers . put ( ExternalMapperPlugin . EXTERNAL_BIS , new ExternalMapper . TypeParser ( ExternalMapperPlugin . EXTERNAL , <str> ) ) ; mapperParsers . put ( StringFieldMapper . CONTENT_TYPE , new StringFieldMapper . TypeParser ( ) ) ; MapperRegistry mapperRegistry = new MapperRegistry ( mapperParsers , Collections . emptyMap ( ) ) ; DocumentMapperParser parser = new DocumentMapperParser ( indexService . getIndexSettings ( ) , indexService . mapperService ( ) , indexService . analysisService ( ) , indexService . similarityService ( ) , mapperRegistry ) ; DocumentMapper documentMapper = parser . parse ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , ExternalMapperPlugin . EXTERNAL ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , ExternalMapperPlugin . EXTERNAL_BIS ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ) ; ParsedDocument doc = documentMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; if ( version . before ( Version . V_2_2_0 ) ) { assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; } else { assertThat ( Long . parseLong ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) ) , is ( GeoUtils . mortonHash ( <float> , <float> ) ) ) ; } assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) , notNullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . getField ( <str> ) . stringValue ( ) , is ( <str> ) ) ; } } 

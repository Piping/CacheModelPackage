package org . eclipse . debug . internal . ui . views . memory . renderings ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockExtension ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . viewers . ITableLabelProvider ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . swt . graphics . GC ; import org . eclipse . swt . printing . PrintDialog ; import org . eclipse . swt . printing . Printer ; import org . eclipse . swt . printing . PrinterData ; import org . eclipse . swt . widgets . Table ; import org . eclipse . swt . widgets . TableColumn ; import org . eclipse . swt . widgets . TableItem ; import org . eclipse . ui . PlatformUI ; public class PrintTableRenderingAction extends Action { private AbstractBaseTableRendering fRendering ; private StructuredViewer fViewer ; private static final String COLUMN_SEPERATOR = <str> ; public PrintTableRenderingAction ( AbstractBaseTableRendering rendering , StructuredViewer viewer ) { super ( DebugUIMessages . PrintViewTabAction_title ) ; fRendering = rendering ; fViewer = viewer ; setToolTipText ( DebugUIMessages . PrintViewTabAction_tooltip ) ; setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_PRINT_TOP_VIEW_TAB ) ) ; setHoverImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_LCL_PRINT_TOP_VIEW_TAB ) ) ; setDisabledImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_PRINT_TOP_VIEW_TAB ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugUIConstants . PLUGIN_ID + <str> ) ; } protected void printTable ( TableItem [ ] itemList , GC printGC , Printer printer ) { int numColumns = ( ( Table ) fViewer . getControl ( ) ) . getColumnCount ( ) ; ITableLabelProvider labelProvider = ( ITableLabelProvider ) fViewer . getLabelProvider ( ) ; int lineNum = <int> ; int charsPerByte = fRendering . getNumCharsPerByte ( ) ; if ( charsPerByte < <int> ) charsPerByte = <int> ; lineNum = printColumnLabels ( printGC , lineNum ) ; for ( int i = <int> ; i < itemList . length ; i + + ) { StringBuffer tableContents = new StringBuffer ( ) ; for ( int j = <int> ; j < numColumns ; j + + ) { String columnText = labelProvider . getColumnText ( itemList [ i ] . getData ( ) , j ) ; while ( columnText . length ( ) < fRendering . getBytesPerColumn ( ) * charsPerByte ) { columnText + = <str> ; } tableContents . append ( COLUMN_SEPERATOR ) ; tableContents . append ( columnText ) ; } printGC . drawString ( tableContents . toString ( ) , <int> , <int> + ( lineNum * printGC . getFontMetrics ( ) . getHeight ( ) ) ) ; lineNum + + ; if ( <int> + lineNum * printGC . getFontMetrics ( ) . getHeight ( ) > printer . getClientArea ( ) . height ) { lineNum = <int> ; printer . endPage ( ) ; printer . startPage ( ) ; lineNum = printColumnLabels ( printGC , lineNum ) ; } } } private int printColumnLabels ( GC printGC , int lineNum ) { StringBuffer tableContents = new StringBuffer ( ) ; int numColumns = ( ( Table ) fViewer . getControl ( ) ) . getColumnCount ( ) ; TableColumn columns [ ] = ( ( Table ) fViewer . getControl ( ) ) . getColumns ( ) ; int charsPerByte = fRendering . getNumCharsPerByte ( ) ; if ( charsPerByte < <int> ) charsPerByte = <int> ; int addressSizeInBytes = <int> ; TableRenderingContentDescriptor descriptor = fRendering . getAdapter ( TableRenderingContentDescriptor . class ) ; if ( descriptor = = null ) { IMemoryBlock memBlock = fRendering . getMemoryBlock ( ) ; if ( memBlock instanceof IMemoryBlockExtension ) { try { addressSizeInBytes = ( ( IMemoryBlockExtension ) memBlock ) . getAddressSize ( ) ; } catch ( DebugException e ) { addressSizeInBytes = <int> ; } if ( addressSizeInBytes < = <int> ) addressSizeInBytes = <int> ; } else { addressSizeInBytes = <int> ; } } else { addressSizeInBytes = descriptor . getAddressSize ( ) ; } for ( int k = <int> ; k < numColumns ; k + + ) { StringBuffer columnLabel = new StringBuffer ( columns [ k ] . getText ( ) ) ; int numBytes = <int> ; if ( k > <int> ) { numBytes = fRendering . getBytesPerColumn ( ) ; } else { numBytes = addressSizeInBytes ; } while ( columnLabel . length ( ) < numBytes * charsPerByte ) { columnLabel . append ( <str> ) ; } tableContents . append ( COLUMN_SEPERATOR ) ; tableContents . append ( columnLabel ) ; } printGC . drawString ( tableContents . toString ( ) , <int> , <int> + ( lineNum * printGC . getFontMetrics ( ) . getHeight ( ) ) ) ; lineNum + + ; return lineNum ; } @Override public void run ( ) { if ( ! ( fViewer . getControl ( ) instanceof Table ) ) return ; PrintDialog printDialog = new PrintDialog ( DebugUIPlugin . getShell ( ) ) ; PrinterData printerData = printDialog . open ( ) ; if ( printerData = = null ) { setChecked ( false ) ; return ; } Printer printer = new Printer ( printerData ) ; GC gc = new GC ( printer ) ; TableItem [ ] tableItems = ( ( Table ) fViewer . getControl ( ) ) . getItems ( ) ; printer . startJob ( DebugUIMessages . PrintViewTabAction_jobtitle + fRendering . getLabel ( ) ) ; printer . startPage ( ) ; printTable ( tableItems , gc , printer ) ; printer . endPage ( ) ; printer . endJob ( ) ; gc . dispose ( ) ; printer . dispose ( ) ; setChecked ( false ) ; } } 

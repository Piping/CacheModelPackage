package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . SetTestSuiteBuilder ; import com . google . common . collect . testing . TestStringSetGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . HashSet ; import java . util . Set ; @GwtCompatible ( emulated = true ) public class SetOperationsTest extends TestCase { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . union ( Sets . < String > newHashSet ( ) , Sets . < String > newHashSet ( ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ZERO , CollectionFeature . NONE , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { checkArgument ( elements . length = = <int> ) ; return Sets . union ( Sets . < String > newHashSet ( elements ) , Sets . newHashSet ( elements ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ONE , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . union ( Sets . < String > newHashSet ( ) , Sets . newHashSet ( elements ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . union ( Sets . newHashSet ( elements ) , Sets . < String > newHashSet ( ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { checkArgument ( elements . length = = <int> ) ; return Sets . union ( Sets . newLinkedHashSet ( asList ( elements ) ) , Sets . newLinkedHashSet ( asList ( elements [ <int> ] , elements [ <int> ] , elements [ <int> ] ) ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . SEVERAL , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { checkArgument ( elements . length = = <int> ) ; return Sets . union ( Sets . newHashSet ( elements [ <int> ] ) , Sets . newHashSet ( elements [ <int> ] , elements [ <int> ] ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . SEVERAL , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . union ( Sets . < String > newHashSet ( elements [ <int> ] , elements [ <int> ] ) , Sets . newHashSet ( elements [ <int> ] , elements [ <int> ] ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . SEVERAL , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . intersection ( Sets . < String > newHashSet ( ) , Sets . < String > newHashSet ( ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ZERO , CollectionFeature . NONE , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . intersection ( Sets . < String > newHashSet ( ) , Sets . newHashSet ( ( String ) null ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ZERO , CollectionFeature . NONE , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . intersection ( Sets . newHashSet ( <str> , <str> ) , Sets . newHashSet ( <str> , <str> ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ZERO , CollectionFeature . NONE , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . intersection ( Sets . newHashSet ( elements ) , Sets . newHashSet ( elements ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . intersection ( Sets . newHashSet ( <str> , elements [ <int> ] , <str> ) , Sets . newHashSet ( <str> , elements [ <int> ] , <str> ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ONE , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . difference ( Sets . < String > newHashSet ( ) , Sets . < String > newHashSet ( ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ZERO , CollectionFeature . NONE , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . difference ( Sets . newHashSet ( <str> ) , Sets . newHashSet ( <str> ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ZERO , CollectionFeature . NONE , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { Set < String > set = Sets . newHashSet ( <str> , <str> ) ; Set < String > other = Sets . newHashSet ( <str> , <str> , <str> , <str> ) ; return Sets . difference ( set , other ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ZERO , CollectionFeature . NONE , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { Set < String > set = Sets . newHashSet ( elements ) ; Set < String > other = Sets . newHashSet ( <str> , <str> ) ; set . addAll ( other ) ; other . add ( <str> ) ; return Sets . difference ( set , other ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . difference ( Sets . newHashSet ( elements ) , Sets . newHashSet ( ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { return Sets . difference ( Sets . < String > newHashSet ( elements ) , Sets . newHashSet ( <str> , <str> ) ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_VALUES ) . createTestSuite ( ) ) ; suite . addTestSuite ( MoreTests . class ) ; return suite ; } public static class MoreTests extends TestCase { Set < String > friends ; Set < String > enemies ; @Override public void setUp ( ) { friends = Sets . newHashSet ( <str> , <str> , <str> ) ; enemies = Sets . newHashSet ( <str> , <str> , <str> ) ; } public void testUnion ( ) { Set < String > all = Sets . union ( friends , enemies ) ; assertEquals ( <int> , all . size ( ) ) ; ImmutableSet < String > immut = Sets . union ( friends , enemies ) . immutableCopy ( ) ; HashSet < String > mut = Sets . union ( friends , enemies ) . copyInto ( new HashSet < String > ( ) ) ; enemies . add ( <str> ) ; assertEquals ( <int> , all . size ( ) ) ; assertEquals ( <int> , immut . size ( ) ) ; assertEquals ( <int> , mut . size ( ) ) ; } public void testIntersection ( ) { Set < String > friends = Sets . newHashSet ( <str> , <str> , <str> ) ; Set < String > enemies = Sets . newHashSet ( <str> , <str> , <str> ) ; Set < String > frenemies = Sets . intersection ( friends , enemies ) ; assertEquals ( <int> , frenemies . size ( ) ) ; ImmutableSet < String > immut = Sets . intersection ( friends , enemies ) . immutableCopy ( ) ; HashSet < String > mut = Sets . intersection ( friends , enemies ) . copyInto ( new HashSet < String > ( ) ) ; enemies . add ( <str> ) ; assertEquals ( <int> , frenemies . size ( ) ) ; assertEquals ( <int> , immut . size ( ) ) ; assertEquals ( <int> , mut . size ( ) ) ; } public void testDifference ( ) { Set < String > friends = Sets . newHashSet ( <str> , <str> , <str> ) ; Set < String > enemies = Sets . newHashSet ( <str> , <str> , <str> ) ; Set < String > goodFriends = Sets . difference ( friends , enemies ) ; assertEquals ( <int> , goodFriends . size ( ) ) ; ImmutableSet < String > immut = Sets . difference ( friends , enemies ) . immutableCopy ( ) ; HashSet < String > mut = Sets . difference ( friends , enemies ) . copyInto ( new HashSet < String > ( ) ) ; enemies . add ( <str> ) ; assertEquals ( <int> , goodFriends . size ( ) ) ; assertEquals ( <int> , immut . size ( ) ) ; assertEquals ( <int> , mut . size ( ) ) ; } public void testSymmetricDifference ( ) { Set < String > friends = Sets . newHashSet ( <str> , <str> , <str> ) ; Set < String > enemies = Sets . newHashSet ( <str> , <str> , <str> ) ; Set < String > symmetricDifferenceFriendsFirst = Sets . symmetricDifference ( friends , enemies ) ; assertEquals ( <int> , symmetricDifferenceFriendsFirst . size ( ) ) ; Set < String > symmetricDifferenceEnemiesFirst = Sets . symmetricDifference ( enemies , friends ) ; assertEquals ( <int> , symmetricDifferenceEnemiesFirst . size ( ) ) ; assertEquals ( symmetricDifferenceFriendsFirst , symmetricDifferenceEnemiesFirst ) ; ImmutableSet < String > immut = Sets . symmetricDifference ( friends , enemies ) . immutableCopy ( ) ; HashSet < String > mut = Sets . symmetricDifference ( friends , enemies ) . copyInto ( new HashSet < String > ( ) ) ; enemies . add ( <str> ) ; assertEquals ( <int> , symmetricDifferenceFriendsFirst . size ( ) ) ; assertEquals ( <int> , immut . size ( ) ) ; assertEquals ( <int> , mut . size ( ) ) ; immut = Sets . symmetricDifference ( enemies , friends ) . immutableCopy ( ) ; mut = Sets . symmetricDifference ( enemies , friends ) . copyInto ( new HashSet < String > ( ) ) ; friends . add ( <str> ) ; assertEquals ( <int> , symmetricDifferenceEnemiesFirst . size ( ) ) ; assertEquals ( <int> , immut . size ( ) ) ; assertEquals ( <int> , mut . size ( ) ) ; } } } 

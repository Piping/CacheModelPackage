package org . elasticsearch . index . mapper . lucene ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . FieldType ; import org . apache . lucene . document . StoredField ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . store . RAMDirectory ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . Numbers ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . fieldvisitor . CustomFieldsVisitor ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import static org . hamcrest . Matchers . equalTo ; public class StoredNumericValuesTests extends ESSingleNodeTestCase { public void testBytesAndNumericRepresentation ( ) throws Exception { IndexWriter writer = new IndexWriter ( new RAMDirectory ( ) , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = mapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . field ( <str> , <float> ) . startArray ( <str> ) . value ( <int> ) . value ( <int> ) . value ( <int> ) . endArray ( ) . endObject ( ) . bytes ( ) ) ; writer . addDocument ( doc . rootDoc ( ) ) ; FieldType fieldType = new FieldType ( ) ; fieldType . setStored ( true ) ; fieldType . setNumericType ( FieldType . NumericType . INT ) ; Document doc2 = new Document ( ) ; doc2 . add ( new StoredField ( <str> , new BytesRef ( Numbers . intToBytes ( <int> ) ) ) ) ; doc2 . add ( new StoredField ( <str> , new BytesRef ( Numbers . floatToBytes ( <float> ) ) ) ) ; doc2 . add ( new StoredField ( <str> , new BytesRef ( Numbers . longToBytes ( <int> ) ) ) ) ; doc2 . add ( new StoredField ( <str> , new BytesRef ( Numbers . longToBytes ( <int> ) ) ) ) ; doc2 . add ( new StoredField ( <str> , new BytesRef ( Numbers . longToBytes ( <int> ) ) ) ) ; writer . addDocument ( doc2 ) ; DirectoryReader reader = DirectoryReader . open ( writer , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; Set < String > fields = new HashSet < > ( Arrays . asList ( <str> , <str> , <str> ) ) ; CustomFieldsVisitor fieldsVisitor = new CustomFieldsVisitor ( fields , false ) ; searcher . doc ( <int> , fieldsVisitor ) ; fieldsVisitor . postProcess ( mapper ) ; assertThat ( fieldsVisitor . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( fieldsVisitor . fields ( ) . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( Integer ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <int> ) ) ; assertThat ( fieldsVisitor . fields ( ) . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( Float ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( fieldsVisitor . fields ( ) . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( Long ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <int> ) ) ; assertThat ( ( Long ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <int> ) ) ; assertThat ( ( Long ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <int> ) ) ; fieldsVisitor . reset ( ) ; searcher . doc ( <int> , fieldsVisitor ) ; fieldsVisitor . postProcess ( mapper ) ; assertThat ( fieldsVisitor . fields ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( fieldsVisitor . fields ( ) . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( Integer ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <int> ) ) ; assertThat ( fieldsVisitor . fields ( ) . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( Float ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <float> ) ) ; assertThat ( fieldsVisitor . fields ( ) . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( Long ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <int> ) ) ; assertThat ( ( Long ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <int> ) ) ; assertThat ( ( Long ) fieldsVisitor . fields ( ) . get ( <str> ) . get ( <int> ) , equalTo ( <int> ) ) ; reader . close ( ) ; writer . close ( ) ; } } 

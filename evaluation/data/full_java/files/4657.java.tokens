package org . eclipse . debug . internal . ui . views . variables . details ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . LinkedHashSet ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; import java . util . StringTokenizer ; import org . eclipse . core . expressions . EvaluationResult ; import org . eclipse . core . expressions . Expression ; import org . eclipse . core . expressions . ExpressionConverter ; import org . eclipse . core . expressions . ExpressionTagNames ; import org . eclipse . core . expressions . IEvaluationContext ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Platform ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . preferences . IEclipsePreferences ; import org . eclipse . core . runtime . preferences . InstanceScope ; import org . eclipse . debug . internal . core . IConfigurationElementConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . IDetailPane ; import org . eclipse . debug . ui . IDetailPaneFactory ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . osgi . service . prefs . BackingStoreException ; public class DetailPaneManager { private class DetailPaneFactoryExtension implements IDetailPaneFactory { private IConfigurationElement fConfigElement ; private IDetailPaneFactory fFactory ; private Expression fEnablementExpression ; public DetailPaneFactoryExtension ( IConfigurationElement configElement ) { fConfigElement = configElement ; } @Override public IDetailPane createDetailPane ( String paneID ) { if ( getFactory ( ) ! = null ) { return getFactory ( ) . createDetailPane ( paneID ) ; } return null ; } @Override public Set < String > getDetailPaneTypes ( IStructuredSelection selection ) { if ( getFactory ( ) ! = null ) { return getFactory ( ) . getDetailPaneTypes ( selection ) ; } return Collections . EMPTY_SET ; } @Override public String getDefaultDetailPane ( IStructuredSelection selection ) { if ( getFactory ( ) ! = null ) { return getFactory ( ) . getDefaultDetailPane ( selection ) ; } return null ; } @Override public String getDetailPaneName ( String paneID ) { if ( getFactory ( ) ! = null ) { return getFactory ( ) . getDetailPaneName ( paneID ) ; } return null ; } @Override public String getDetailPaneDescription ( String paneID ) { if ( getFactory ( ) ! = null ) { return getFactory ( ) . getDetailPaneDescription ( paneID ) ; } return null ; } private IDetailPaneFactory getFactory ( ) { if ( fFactory ! = null ) { return fFactory ; } try { Object obj = fConfigElement . createExecutableExtension ( IConfigurationElementConstants . CLASS ) ; if ( obj instanceof IDetailPaneFactory ) { fFactory = ( IDetailPaneFactory ) obj ; } else { throw new CoreException ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . INTERNAL_ERROR , <str> + obj , null ) ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; fFactory = null ; } return fFactory ; } public boolean isEnabled ( IStructuredSelection selection ) { boolean enabled = false ; if ( selection = = null | | selection . isEmpty ( ) ) { return <str> . equals ( fConfigElement . getAttribute ( IConfigurationElementConstants . ID ) ) ; } Expression expression = getEnablementExpression ( ) ; if ( expression ! = null ) { List < ? > list = selection . toList ( ) ; IEvaluationContext context = DebugUIPlugin . createEvaluationContext ( list ) ; context . addVariable ( <str> , list ) ; enabled = evalEnablementExpression ( context , expression ) ; } else { enabled = true ; } return enabled ; } private boolean evalEnablementExpression ( IEvaluationContext context , Expression exp ) { try { if ( exp ! = null ) { EvaluationResult result = exp . evaluate ( context ) ; if ( result = = EvaluationResult . TRUE | | result = = EvaluationResult . NOT_LOADED ) { return true ; } } } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; } return false ; } private Expression getEnablementExpression ( ) { if ( fEnablementExpression = = null ) { try { IConfigurationElement [ ] elements = fConfigElement . getChildren ( ExpressionTagNames . ENABLEMENT ) ; IConfigurationElement enablement = elements . length > <int> ? elements [ <int> ] : null ; if ( enablement ! = null ) { fEnablementExpression = ExpressionConverter . getDefault ( ) . perform ( enablement ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; fEnablementExpression = null ; } } return fEnablementExpression ; } } private static DetailPaneManager fgSingleton ; private Map < String , IDetailPaneFactory > fFactoriesByPaneID ; private Map < Set < String > , String > fPreferredDetailPanes ; private List < DetailPaneFactoryExtension > fKnownFactories ; public static final String PREF_DETAIL_AREAS = <str> ; private DetailPaneManager ( ) { fFactoriesByPaneID = new HashMap < String , IDetailPaneFactory > ( ) ; fFactoriesByPaneID . put ( MessageDetailPane . ID , new DefaultDetailPaneFactory ( ) ) ; } public static DetailPaneManager getDefault ( ) { if ( fgSingleton = = null ) { fgSingleton = new DetailPaneManager ( ) ; } return fgSingleton ; } public String getPreferredPaneFromSelection ( IStructuredSelection selection ) { List < IDetailPaneFactory > possibleFactories = getEnabledFactories ( selection ) ; Set < String > possiblePaneIDs = getPossiblePaneIDs ( possibleFactories , selection ) ; return chooseDetailsAreaIDInSet ( possiblePaneIDs , possibleFactories , selection ) ; } public Set < String > getAvailablePaneIDs ( IStructuredSelection selection ) { List < IDetailPaneFactory > possibleFactories = getEnabledFactories ( selection ) ; return getPossiblePaneIDs ( possibleFactories , selection ) ; } public IDetailPane getDetailPaneFromID ( String ID ) { IDetailPaneFactory factory = fFactoriesByPaneID . get ( ID ) ; if ( factory ! = null ) { return factory . createDetailPane ( ID ) ; } return null ; } public String getNameFromID ( String ID ) { IDetailPaneFactory factory = fFactoriesByPaneID . get ( ID ) ; if ( factory ! = null ) { return factory . getDetailPaneName ( ID ) ; } return null ; } public String getDescriptionFromID ( String ID ) { IDetailPaneFactory factory = fFactoriesByPaneID . get ( ID ) ; if ( factory ! = null ) { return factory . getDetailPaneDescription ( ID ) ; } return null ; } private List < IDetailPaneFactory > getEnabledFactories ( IStructuredSelection selection ) { List < IDetailPaneFactory > factoriesForSelection = new ArrayList < IDetailPaneFactory > ( ) ; if ( fKnownFactories = = null ) { initializeDetailFactories ( ) ; } for ( IDetailPaneFactory currentFactory : fKnownFactories ) { if ( currentFactory instanceof DetailPaneFactoryExtension ) { if ( ( ( DetailPaneFactoryExtension ) currentFactory ) . isEnabled ( selection ) ) { factoriesForSelection . add ( currentFactory ) ; } } } return factoriesForSelection ; } private Set < String > getPossiblePaneIDs ( List < IDetailPaneFactory > factoriesToQuery , IStructuredSelection selection ) { Set < String > idsForSelection = new LinkedHashSet < String > ( ) ; for ( IDetailPaneFactory currentFactory : factoriesToQuery ) { for ( String currentAreaTypeID : currentFactory . getDetailPaneTypes ( selection ) ) { fFactoriesByPaneID . put ( currentAreaTypeID , currentFactory ) ; idsForSelection . add ( currentAreaTypeID ) ; } } return idsForSelection ; } private String chooseDetailsAreaIDInSet ( Set < String > possiblePaneIDs , List < IDetailPaneFactory > enabledFactories , IStructuredSelection selection ) { if ( possiblePaneIDs = = null | | possiblePaneIDs . isEmpty ( ) ) { return null ; } String preferredID = getUserPreferredDetailPane ( possiblePaneIDs ) ; if ( preferredID = = null ) { for ( IDetailPaneFactory currentFactory : enabledFactories ) { preferredID = currentFactory . getDefaultDetailPane ( selection ) ; if ( preferredID ! = null ) { break ; } } if ( preferredID = = null ) { Iterator < String > paneIterator = possiblePaneIDs . iterator ( ) ; preferredID = paneIterator . next ( ) ; while ( paneIterator . hasNext ( ) & & preferredID ! = DefaultDetailPaneFactory . DEFAULT_DETAIL_PANE_ID ) { String currentID = paneIterator . next ( ) ; if ( currentID . equals ( DefaultDetailPaneFactory . DEFAULT_DETAIL_PANE_ID ) ) { preferredID = currentID ; } } } setPreferredDetailPane ( possiblePaneIDs , preferredID ) ; } return preferredID ; } private synchronized void initializeDetailFactories ( ) { if ( fKnownFactories = = null ) { fKnownFactories = new ArrayList < DetailPaneFactoryExtension > ( ) ; IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . EXTENSION_POINT_DETAIL_FACTORIES ) ; IConfigurationElement [ ] infos = extensionPoint . getConfigurationElements ( ) ; DetailPaneFactoryExtension delegate = null ; for ( int i = <int> ; i < infos . length ; i + + ) { delegate = new DetailPaneFactoryExtension ( infos [ i ] ) ; fKnownFactories . add ( delegate ) ; } } } public String getUserPreferredDetailPane ( Set < String > possibleDetailsAreaIDs ) { if ( fPreferredDetailPanes = = null ) { loadPreferredDetailsAreas ( ) ; } return fPreferredDetailPanes . get ( possibleDetailsAreaIDs ) ; } public void setPreferredDetailPane ( Set < String > possibleDetailsAreaIDs , String preferredDetailsAreaID ) { if ( possibleDetailsAreaIDs = = null ) { return ; } if ( fPreferredDetailPanes = = null ) { loadPreferredDetailsAreas ( ) ; } String currentKey = fPreferredDetailPanes . get ( possibleDetailsAreaIDs ) ; if ( currentKey = = null | | ! currentKey . equals ( preferredDetailsAreaID ) ) { fPreferredDetailPanes . put ( possibleDetailsAreaIDs , preferredDetailsAreaID ) ; storePreferredDetailsAreas ( ) ; } } private void storePreferredDetailsAreas ( ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Entry < Set < String > , String > entry : fPreferredDetailPanes . entrySet ( ) ) { for ( String currentID : entry . getKey ( ) ) { buffer . append ( currentID ) ; buffer . append ( <str> ) ; } buffer . deleteCharAt ( buffer . length ( ) - <int> ) ; buffer . append ( <str> ) ; buffer . append ( entry . getValue ( ) ) ; buffer . append ( <str> ) ; } IEclipsePreferences node = InstanceScope . INSTANCE . getNode ( DebugUIPlugin . getUniqueIdentifier ( ) ) ; if ( node ! = null ) { node . put ( PREF_DETAIL_AREAS , buffer . toString ( ) ) ; try { node . flush ( ) ; } catch ( BackingStoreException e ) { DebugUIPlugin . log ( e ) ; } } } private void loadPreferredDetailsAreas ( ) { fPreferredDetailPanes = new HashMap < Set < String > , String > ( ) ; String preferenceValue = Platform . getPreferencesService ( ) . getString ( DebugUIPlugin . getUniqueIdentifier ( ) , PREF_DETAIL_AREAS , <str> , null ) ; StringTokenizer entryTokenizer = new StringTokenizer ( preferenceValue , <str> ) ; while ( entryTokenizer . hasMoreTokens ( ) ) { String token = entryTokenizer . nextToken ( ) ; int valueStart = token . indexOf ( <str> ) ; StringTokenizer keyTokenizer = new StringTokenizer ( token . substring ( <int> , valueStart ) , <str> ) ; Set < String > keys = new LinkedHashSet < String > ( ) ; while ( keyTokenizer . hasMoreTokens ( ) ) { keys . add ( keyTokenizer . nextToken ( ) ) ; } fPreferredDetailPanes . put ( keys , token . substring ( valueStart + <int> ) ) ; } } } 

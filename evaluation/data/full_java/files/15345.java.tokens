package org . gradle . api . reporting ; import org . gradle . api . Project ; import org . gradle . api . internal . file . FileLookup ; import org . gradle . api . internal . project . ProjectInternal ; import java . io . File ; import java . util . concurrent . Callable ; public class ReportingExtension { public static final String NAME = <str> ; public static final String DEFAULT_REPORTS_DIR_NAME = <str> ; private final ProjectInternal project ; private Object baseDir ; public ReportingExtension ( Project project ) { this . project = ( ProjectInternal ) project ; this . baseDir = new Callable < File > ( ) { public File call ( ) throws Exception { return ReportingExtension . this . project . getServices ( ) . get ( FileLookup . class ) . getFileResolver ( ReportingExtension . this . project . getBuildDir ( ) ) . resolve ( DEFAULT_REPORTS_DIR_NAME ) ; } } ; } public File getBaseDir ( ) { return project . file ( baseDir ) ; } public void setBaseDir ( Object baseDir ) { this . baseDir = baseDir ; } public File file ( String path ) { return this . project . getServices ( ) . get ( FileLookup . class ) . getFileResolver ( getBaseDir ( ) ) . resolve ( path ) ; } public String getApiDocTitle ( ) { Object version = project . getVersion ( ) ; if ( Project . DEFAULT_VERSION . equals ( version ) ) { return String . format ( <str> , project . getName ( ) ) ; } else { return String . format ( <str> , project . getName ( ) , version ) ; } } } 

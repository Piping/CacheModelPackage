package org . apache . cassandra . cql3 . statements ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import com . google . common . base . Joiner ; import org . apache . cassandra . auth . FunctionResource ; import org . apache . cassandra . auth . Permission ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . cql3 . CQL3Type ; import org . apache . cassandra . cql3 . functions . * ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . exceptions . RequestValidationException ; import org . apache . cassandra . exceptions . UnauthorizedException ; import org . apache . cassandra . schema . KeyspaceMetadata ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . MigrationManager ; import org . apache . cassandra . thrift . ThriftValidation ; import org . apache . cassandra . transport . Event ; public final class DropFunctionStatement extends SchemaAlteringStatement { private FunctionName functionName ; private final boolean ifExists ; private final List < CQL3Type . Raw > argRawTypes ; private final boolean argsPresent ; private List < AbstractType < ? > > argTypes ; public DropFunctionStatement ( FunctionName functionName , List < CQL3Type . Raw > argRawTypes , boolean argsPresent , boolean ifExists ) { this . functionName = functionName ; this . argRawTypes = argRawTypes ; this . argsPresent = argsPresent ; this . ifExists = ifExists ; } @Override public Prepared prepare ( ) throws InvalidRequestException { if ( Schema . instance . getKSMetaData ( functionName . keyspace ) ! = null ) { argTypes = new ArrayList < > ( argRawTypes . size ( ) ) ; for ( CQL3Type . Raw rawType : argRawTypes ) { if ( rawType . isFrozen ( ) ) throw new InvalidRequestException ( <str> ) ; if ( ! rawType . canBeNonFrozen ( ) ) rawType . freeze ( ) ; argTypes . add ( rawType . prepare ( functionName . keyspace ) . getType ( ) ) ; } } return super . prepare ( ) ; } @Override public void prepareKeyspace ( ClientState state ) throws InvalidRequestException { if ( ! functionName . hasKeyspace ( ) & & state . getRawKeyspace ( ) ! = null ) functionName = new FunctionName ( state . getKeyspace ( ) , functionName . name ) ; if ( ! functionName . hasKeyspace ( ) ) throw new InvalidRequestException ( <str> ) ; ThriftValidation . validateKeyspaceNotSystem ( functionName . keyspace ) ; } public void checkAccess ( ClientState state ) throws UnauthorizedException , InvalidRequestException { Function function = findFunction ( ) ; if ( function = = null ) { if ( ! ifExists ) throw new InvalidRequestException ( String . format ( <str> , functionName . keyspace , functionName . name , Joiner . on ( <str> ) . join ( argRawTypes ) ) ) ; } else { state . ensureHasPermission ( Permission . DROP , FunctionResource . function ( function . name ( ) . keyspace , function . name ( ) . name , function . argTypes ( ) ) ) ; } } public void validate ( ClientState state ) { Collection < Function > olds = Schema . instance . getFunctions ( functionName ) ; if ( ! argsPresent & & olds ! = null & & olds . size ( ) > <int> ) throw new InvalidRequestException ( String . format ( <str> + <str> + <str> + <str> , functionName , functionName , functionName ) ) ; } public Event . SchemaChange announceMigration ( boolean isLocalOnly ) throws RequestValidationException { Function old = findFunction ( ) ; if ( old = = null ) { if ( ifExists ) return null ; else throw new InvalidRequestException ( getMissingFunctionError ( ) ) ; } KeyspaceMetadata ksm = Schema . instance . getKSMetaData ( old . name ( ) . keyspace ) ; Collection < UDAggregate > referrers = ksm . functions . aggregatesUsingFunction ( old ) ; if ( ! referrers . isEmpty ( ) ) throw new InvalidRequestException ( String . format ( <str> , old , referrers ) ) ; MigrationManager . announceFunctionDrop ( ( UDFunction ) old , isLocalOnly ) ; return new Event . SchemaChange ( Event . SchemaChange . Change . DROPPED , Event . SchemaChange . Target . FUNCTION , old . name ( ) . keyspace , old . name ( ) . name , AbstractType . asCQLTypeStringList ( old . argTypes ( ) ) ) ; } private String getMissingFunctionError ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; sb . append ( functionName ) ; if ( argsPresent ) sb . append ( Joiner . on ( <str> ) . join ( argRawTypes ) ) ; sb . append ( <str> ) ; return sb . toString ( ) ; } private Function findFunction ( ) { Function old ; if ( argsPresent ) { if ( argTypes = = null ) { return null ; } old = Schema . instance . findFunction ( functionName , argTypes ) . orElse ( null ) ; if ( old = = null | | ! ( old instanceof ScalarFunction ) ) { return null ; } } else { Collection < Function > olds = Schema . instance . getFunctions ( functionName ) ; if ( olds = = null | | olds . isEmpty ( ) | | ! ( olds . iterator ( ) . next ( ) instanceof ScalarFunction ) ) return null ; old = olds . iterator ( ) . next ( ) ; } return old ; } } 

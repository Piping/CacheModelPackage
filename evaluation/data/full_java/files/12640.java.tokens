package org . gradle . api . internal . artifacts . ivyservice . moduleconverter . dependencies ; import org . apache . ivy . core . module . descriptor . DefaultDependencyDescriptor ; import org . apache . ivy . core . module . descriptor . DependencyDescriptor ; import org . apache . ivy . core . module . descriptor . ModuleDescriptor ; import org . apache . ivy . core . module . id . ModuleRevisionId ; import java . lang . reflect . Field ; import java . util . LinkedHashMap ; import java . util . Map ; import static org . gradle . internal . UncheckedException . throwAsUncheckedException ; public class ReflectiveDependencyDescriptorFactory { public DependencyDescriptor create ( DependencyDescriptor source , ModuleRevisionId targetId ) { if ( ! ( source instanceof DefaultDependencyDescriptor ) ) { throw new IllegalArgumentException ( <str> ) ; } DefaultDependencyDescriptor out = new DefaultDependencyDescriptor ( moduleDescriptor ( source ) , targetId , source . getDynamicConstraintDependencyRevisionId ( ) , source . isForce ( ) , source . isChanging ( ) , source . isTransitive ( ) ) ; setProperty ( out , <str> , getProperty ( source , <str> ) ) ; setProperty ( out , <str> , source . getNamespace ( ) ) ; ( ( Map ) getProperty ( out , <str> ) ) . putAll ( ( Map ) getProperty ( source , <str> ) ) ; Map sourceExcludeRules = ( Map ) getProperty ( source , <str> ) ; setProperty ( out , <str> , sourceExcludeRules = = null ? null : new LinkedHashMap ( sourceExcludeRules ) ) ; Map sourceIncludeRules = ( Map ) getProperty ( source , <str> ) ; setProperty ( out , <str> , sourceIncludeRules = = null ? null : new LinkedHashMap ( sourceIncludeRules ) ) ; Map dependencyArtifacts = ( Map ) getProperty ( source , <str> ) ; setProperty ( out , <str> , dependencyArtifacts = = null ? null : new LinkedHashMap ( dependencyArtifacts ) ) ; setProperty ( out , <str> , source . getSourceModule ( ) ) ; return out ; } private static ModuleDescriptor moduleDescriptor ( DependencyDescriptor source ) { return ( ModuleDescriptor ) getProperty ( source , <str> ) ; } private static Object getProperty ( Object object , String property ) { try { Field field = DefaultDependencyDescriptor . class . getDeclaredField ( property ) ; field . setAccessible ( true ) ; return field . get ( object ) ; } catch ( Exception e ) { throw throwAsUncheckedException ( e ) ; } } private static void setProperty ( Object object , String property , Object value ) { try { Field field = DefaultDependencyDescriptor . class . getDeclaredField ( property ) ; field . setAccessible ( true ) ; field . set ( object , value ) ; } catch ( Exception e ) { throw throwAsUncheckedException ( e ) ; } } } 

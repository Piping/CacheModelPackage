package org . gradle . internal . classloader ; import com . google . common . io . ByteStreams ; import org . gradle . api . GradleException ; import org . gradle . internal . classpath . ClassPath ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . util . Collection ; public abstract class TransformingClassLoader extends MutableURLClassLoader { public TransformingClassLoader ( ClassLoader parent , ClassPath classPath ) { super ( parent , classPath ) ; } public TransformingClassLoader ( ClassLoader parent , Collection < URL > urls ) { super ( parent , urls ) ; } @Override protected Class < ? > findClass ( String name ) throws ClassNotFoundException { URL resource = findResource ( name . replace ( <str> , <str> ) + <str> ) ; if ( resource = = null ) { throw new ClassNotFoundException ( name ) ; } byte [ ] bytes ; try { bytes = loadBytecode ( resource ) ; bytes = transform ( bytes ) ; } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , name , resource ) , e ) ; } return defineClass ( name , bytes , <int> , bytes . length ) ; } private byte [ ] loadBytecode ( URL resource ) throws IOException { InputStream inputStream = resource . openStream ( ) ; try { return ByteStreams . toByteArray ( inputStream ) ; } finally { inputStream . close ( ) ; } } protected abstract byte [ ] transform ( byte [ ] bytes ) ; } 

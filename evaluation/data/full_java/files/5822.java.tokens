package org . elasticsearch . common . inject . assistedinject ; import org . elasticsearch . common . inject . * ; import java . lang . annotation . Annotation ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; class Parameter { private final Type type ; private final boolean isAssisted ; private final Annotation bindingAnnotation ; private final boolean isProvider ; public Parameter ( Type type , Annotation [ ] annotations ) { this . type = type ; this . bindingAnnotation = getBindingAnnotation ( annotations ) ; this . isAssisted = hasAssistedAnnotation ( annotations ) ; this . isProvider = isProvider ( type ) ; } public boolean isProvidedByFactory ( ) { return isAssisted ; } public Type getType ( ) { return type ; } @Override public String toString ( ) { StringBuilder result = new StringBuilder ( ) ; if ( isAssisted ) { result . append ( <str> ) ; result . append ( <str> ) ; } if ( bindingAnnotation ! = null ) { result . append ( bindingAnnotation . toString ( ) ) ; result . append ( <str> ) ; } result . append ( type . toString ( ) ) ; return result . toString ( ) ; } private boolean hasAssistedAnnotation ( Annotation [ ] annotations ) { for ( Annotation annotation : annotations ) { if ( annotation . annotationType ( ) . equals ( Assisted . class ) ) { return true ; } } return false ; } public Object getValue ( Injector injector ) { return isProvider ? injector . getProvider ( getBindingForType ( getProvidedType ( type ) ) ) : injector . getInstance ( getPrimaryBindingKey ( ) ) ; } public boolean isBound ( Injector injector ) { return isBound ( injector , getPrimaryBindingKey ( ) ) | | isBound ( injector , fixAnnotations ( getPrimaryBindingKey ( ) ) ) ; } private boolean isBound ( Injector injector , Key < ? > key ) { try { return injector . getBinding ( key ) ! = null ; } catch ( ConfigurationException e ) { return false ; } } public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) = = null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; } Key < ? > getPrimaryBindingKey ( ) { return isProvider ? getBindingForType ( getProvidedType ( type ) ) : getBindingForType ( type ) ; } private Type getProvidedType ( Type type ) { return ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ <int> ] ; } private boolean isProvider ( Type type ) { return type instanceof ParameterizedType & & ( ( ParameterizedType ) type ) . getRawType ( ) = = Provider . class ; } private Key < ? > getBindingForType ( Type type ) { return bindingAnnotation ! = null ? Key . get ( type , bindingAnnotation ) : Key . get ( type ) ; } private Annotation getBindingAnnotation ( Annotation [ ] annotations ) { Annotation bindingAnnotation = null ; for ( Annotation a : annotations ) { if ( a . annotationType ( ) . getAnnotation ( BindingAnnotation . class ) ! = null ) { if ( bindingAnnotation ! = null ) { throw new IllegalArgumentException ( <str> + bindingAnnotation + <str> + a ) ; } bindingAnnotation = a ; } } return bindingAnnotation ; } } 

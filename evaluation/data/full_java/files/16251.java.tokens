package org . gradle . gradleplugin . userinterface . swing . generic ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . userinterface . AlternateUIInteraction ; import org . gradle . gradleplugin . userinterface . swing . common . PreferencesAssistant ; import javax . swing . * ; import java . awt . * ; import java . awt . event . HierarchyEvent ; import java . awt . event . HierarchyListener ; import java . beans . PropertyChangeEvent ; import java . beans . PropertyChangeListener ; public class SinglePaneUIInstance extends AbstractGradleUIInstance { private static final String SPLITTER_PREFERENCES_ID = <str> ; private JSplitPane splitter ; private OutputPanelLord outputPanelLord ; public SinglePaneUIInstance ( ) { } public void initialize ( SettingsNode settings , AlternateUIInteraction alternateUIInteraction ) { outputPanelLord = new OutputPanelLord ( gradlePluginLord , alternateUIInteraction ) ; super . initialize ( settings , alternateUIInteraction ) ; } @Override protected void setupUI ( ) { mainPanel = new JPanel ( new BorderLayout ( ) ) ; mainPanel . add ( createCenterPanel ( ) , BorderLayout . CENTER ) ; } public OutputUILord getOutputUILord ( ) { return outputPanelLord ; } private Component createCenterPanel ( ) { splitter = new JSplitPane ( JSplitPane . VERTICAL_SPLIT ) ; splitter . setTopComponent ( createMainGradlePanel ( ) ) ; splitter . setBottomComponent ( outputPanelLord . getMainPanel ( ) ) ; splitter . setContinuousLayout ( true ) ; splitter . addHierarchyListener ( new HierarchyListener ( ) { public void hierarchyChanged ( HierarchyEvent e ) { if ( HierarchyEvent . SHOWING_CHANGED = = ( e . getChangeFlags ( ) & HierarchyEvent . SHOWING_CHANGED ) ) { splitter . removeHierarchyListener ( this ) ; Window window = SwingUtilities . getWindowAncestor ( splitter ) ; if ( window ! = null ) { Dimension dimension = window . getSize ( ) ; int halfHeight = dimension . height / <int> ; splitter . setDividerLocation ( halfHeight ) ; } PreferencesAssistant . restoreSettings ( settings , splitter , SPLITTER_PREFERENCES_ID , SinglePaneUIInstance . class ) ; splitter . addPropertyChangeListener ( new PropertyChangeListener ( ) { public void propertyChange ( PropertyChangeEvent evt ) { if ( JSplitPane . DIVIDER_LOCATION_PROPERTY . equals ( evt . getPropertyName ( ) ) ) { PreferencesAssistant . saveSettings ( settings , splitter , SPLITTER_PREFERENCES_ID , SinglePaneUIInstance . class ) ; } } } ) ; } } } ) ; splitter . setResizeWeight ( <int> ) ; return splitter ; } } 

package clojure . lang ; public abstract class AFn implements IFn { public Object call ( ) { return invoke ( ) ; } public void run ( ) { invoke ( ) ; } public Object invoke ( ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 , Object arg14 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 , Object arg14 , Object arg15 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 , Object arg14 , Object arg15 , Object arg16 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 , Object arg14 , Object arg15 , Object arg16 , Object arg17 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 , Object arg14 , Object arg15 , Object arg16 , Object arg17 , Object arg18 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 , Object arg14 , Object arg15 , Object arg16 , Object arg17 , Object arg18 , Object arg19 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 , Object arg14 , Object arg15 , Object arg16 , Object arg17 , Object arg18 , Object arg19 , Object arg20 ) { return throwArity ( <int> ) ; } public Object invoke ( Object arg1 , Object arg2 , Object arg3 , Object arg4 , Object arg5 , Object arg6 , Object arg7 , Object arg8 , Object arg9 , Object arg10 , Object arg11 , Object arg12 , Object arg13 , Object arg14 , Object arg15 , Object arg16 , Object arg17 , Object arg18 , Object arg19 , Object arg20 , Object . . . args ) { return throwArity ( <int> ) ; } public Object applyTo ( ISeq arglist ) { return applyToHelper ( this , Util . ret1 ( arglist , arglist = null ) ) ; } static public Object applyToHelper ( IFn ifn , ISeq arglist ) { switch ( RT . boundedLength ( arglist , <int> ) ) { case <int> : arglist = null ; return ifn . invoke ( ) ; case <int> : return ifn . invoke ( Util . ret1 ( arglist . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; case <int> : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , Util . ret1 ( ( arglist = arglist . next ( ) ) . first ( ) , arglist = null ) ) ; default : return ifn . invoke ( arglist . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , ( arglist = arglist . next ( ) ) . first ( ) , RT . seqToArray ( Util . ret1 ( arglist . next ( ) , arglist = null ) ) ) ; } } public Object throwArity ( int n ) { String name = getClass ( ) . getSimpleName ( ) ; throw new ArityException ( n , Compiler . demunge ( name ) ) ; } } 

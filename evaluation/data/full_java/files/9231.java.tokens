package com . google . common . collect ; import static com . google . common . collect . CollectPreconditions . checkRemove ; import static com . google . common . collect . Maps . keyOrNull ; import com . google . common . annotations . Beta ; import java . util . Iterator ; import java . util . NavigableMap ; import java . util . NavigableSet ; import java . util . NoSuchElementException ; import java . util . SortedMap ; public abstract class ForwardingNavigableMap < K , V > extends ForwardingSortedMap < K , V > implements NavigableMap < K , V > { protected ForwardingNavigableMap ( ) { } @Override protected abstract NavigableMap < K , V > delegate ( ) ; @Override public Entry < K , V > lowerEntry ( K key ) { return delegate ( ) . lowerEntry ( key ) ; } protected Entry < K , V > standardLowerEntry ( K key ) { return headMap ( key , false ) . lastEntry ( ) ; } @Override public K lowerKey ( K key ) { return delegate ( ) . lowerKey ( key ) ; } protected K standardLowerKey ( K key ) { return keyOrNull ( lowerEntry ( key ) ) ; } @Override public Entry < K , V > floorEntry ( K key ) { return delegate ( ) . floorEntry ( key ) ; } protected Entry < K , V > standardFloorEntry ( K key ) { return headMap ( key , true ) . lastEntry ( ) ; } @Override public K floorKey ( K key ) { return delegate ( ) . floorKey ( key ) ; } protected K standardFloorKey ( K key ) { return keyOrNull ( floorEntry ( key ) ) ; } @Override public Entry < K , V > ceilingEntry ( K key ) { return delegate ( ) . ceilingEntry ( key ) ; } protected Entry < K , V > standardCeilingEntry ( K key ) { return tailMap ( key , true ) . firstEntry ( ) ; } @Override public K ceilingKey ( K key ) { return delegate ( ) . ceilingKey ( key ) ; } protected K standardCeilingKey ( K key ) { return keyOrNull ( ceilingEntry ( key ) ) ; } @Override public Entry < K , V > higherEntry ( K key ) { return delegate ( ) . higherEntry ( key ) ; } protected Entry < K , V > standardHigherEntry ( K key ) { return tailMap ( key , false ) . firstEntry ( ) ; } @Override public K higherKey ( K key ) { return delegate ( ) . higherKey ( key ) ; } protected K standardHigherKey ( K key ) { return keyOrNull ( higherEntry ( key ) ) ; } @Override public Entry < K , V > firstEntry ( ) { return delegate ( ) . firstEntry ( ) ; } protected Entry < K , V > standardFirstEntry ( ) { return Iterables . getFirst ( entrySet ( ) , null ) ; } protected K standardFirstKey ( ) { Entry < K , V > entry = firstEntry ( ) ; if ( entry = = null ) { throw new NoSuchElementException ( ) ; } else { return entry . getKey ( ) ; } } @Override public Entry < K , V > lastEntry ( ) { return delegate ( ) . lastEntry ( ) ; } protected Entry < K , V > standardLastEntry ( ) { return Iterables . getFirst ( descendingMap ( ) . entrySet ( ) , null ) ; } protected K standardLastKey ( ) { Entry < K , V > entry = lastEntry ( ) ; if ( entry = = null ) { throw new NoSuchElementException ( ) ; } else { return entry . getKey ( ) ; } } @Override public Entry < K , V > pollFirstEntry ( ) { return delegate ( ) . pollFirstEntry ( ) ; } protected Entry < K , V > standardPollFirstEntry ( ) { return Iterators . pollNext ( entrySet ( ) . iterator ( ) ) ; } @Override public Entry < K , V > pollLastEntry ( ) { return delegate ( ) . pollLastEntry ( ) ; } protected Entry < K , V > standardPollLastEntry ( ) { return Iterators . pollNext ( descendingMap ( ) . entrySet ( ) . iterator ( ) ) ; } @Override public NavigableMap < K , V > descendingMap ( ) { return delegate ( ) . descendingMap ( ) ; } @Beta protected class StandardDescendingMap extends Maps . DescendingMap < K , V > { public StandardDescendingMap ( ) { } @Override NavigableMap < K , V > forward ( ) { return ForwardingNavigableMap . this ; } @Override protected Iterator < Entry < K , V > > entryIterator ( ) { return new Iterator < Entry < K , V > > ( ) { private Entry < K , V > toRemove = null ; private Entry < K , V > nextOrNull = forward ( ) . lastEntry ( ) ; @Override public boolean hasNext ( ) { return nextOrNull ! = null ; } @Override public java . util . Map . Entry < K , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } try { return nextOrNull ; } finally { toRemove = nextOrNull ; nextOrNull = forward ( ) . lowerEntry ( nextOrNull . getKey ( ) ) ; } } @Override public void remove ( ) { checkRemove ( toRemove ! = null ) ; forward ( ) . remove ( toRemove . getKey ( ) ) ; toRemove = null ; } } ; } } @Override public NavigableSet < K > navigableKeySet ( ) { return delegate ( ) . navigableKeySet ( ) ; } @Beta protected class StandardNavigableKeySet extends Maps . NavigableKeySet < K , V > { public StandardNavigableKeySet ( ) { super ( ForwardingNavigableMap . this ) ; } } @Override public NavigableSet < K > descendingKeySet ( ) { return delegate ( ) . descendingKeySet ( ) ; } @Beta protected NavigableSet < K > standardDescendingKeySet ( ) { return descendingMap ( ) . navigableKeySet ( ) ; } @Override protected SortedMap < K , V > standardSubMap ( K fromKey , K toKey ) { return subMap ( fromKey , true , toKey , false ) ; } @Override public NavigableMap < K , V > subMap ( K fromKey , boolean fromInclusive , K toKey , boolean toInclusive ) { return delegate ( ) . subMap ( fromKey , fromInclusive , toKey , toInclusive ) ; } @Override public NavigableMap < K , V > headMap ( K toKey , boolean inclusive ) { return delegate ( ) . headMap ( toKey , inclusive ) ; } @Override public NavigableMap < K , V > tailMap ( K fromKey , boolean inclusive ) { return delegate ( ) . tailMap ( fromKey , inclusive ) ; } protected SortedMap < K , V > standardHeadMap ( K toKey ) { return headMap ( toKey , false ) ; } protected SortedMap < K , V > standardTailMap ( K fromKey ) { return tailMap ( fromKey , true ) ; } } 

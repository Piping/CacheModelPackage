package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class TermQueryParser implements QueryParser < TermQueryBuilder > { public static final ParseField TERM_FIELD = new ParseField ( <str> ) ; public static final ParseField VALUE_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { TermQueryBuilder . NAME } ; } @Override public TermQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; String queryName = null ; String fieldName = null ; Object value = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( parseContext . isDeprecatedSetting ( currentFieldName ) ) { } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( fieldName ! = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } fieldName = currentFieldName ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , TERM_FIELD ) ) { value = parser . objectBytes ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , VALUE_FIELD ) ) { value = parser . objectBytes ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } } else if ( token . isValue ( ) ) { if ( fieldName ! = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } fieldName = currentFieldName ; value = parser . objectBytes ( ) ; } else if ( token = = XContentParser . Token . START_ARRAY ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } } TermQueryBuilder termQuery = new TermQueryBuilder ( fieldName , value ) ; termQuery . boost ( boost ) ; if ( queryName ! = null ) { termQuery . queryName ( queryName ) ; } return termQuery ; } @Override public TermQueryBuilder getBuilderPrototype ( ) { return TermQueryBuilder . PROTOTYPE ; } } 

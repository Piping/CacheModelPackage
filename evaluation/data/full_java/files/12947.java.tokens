package org . gradle . api . tasks . diagnostics ; import com . google . common . annotations . VisibleForTesting ; import org . gradle . api . DefaultTask ; import org . gradle . api . Incubating ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . initialization . dsl . ScriptHandler ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . TaskAction ; import org . gradle . api . tasks . diagnostics . internal . DependencyReportRenderer ; import org . gradle . api . tasks . diagnostics . internal . ProjectReportGenerator ; import org . gradle . api . tasks . diagnostics . internal . ReportGenerator ; import org . gradle . api . tasks . diagnostics . internal . dependencies . AsciiDependencyReportRenderer ; import org . gradle . initialization . BuildClientMetaData ; import org . gradle . logging . StyledTextOutputFactory ; import javax . inject . Inject ; import java . io . IOException ; import java . util . Collections ; @Incubating public class BuildEnvironmentReportTask extends DefaultTask { public static final String TASK_NAME = <str> ; private DependencyReportRenderer renderer = new AsciiDependencyReportRenderer ( ) ; public BuildEnvironmentReportTask ( ) { getOutputs ( ) . upToDateWhen ( new Spec < Task > ( ) { public boolean isSatisfiedBy ( Task element ) { return false ; } } ) ; } @Inject protected BuildClientMetaData getClientMetaData ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected StyledTextOutputFactory getTextOutputFactory ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction public void generate ( ) { ProjectReportGenerator projectReportGenerator = new ProjectReportGenerator ( ) { @Override public void generateReport ( Project project ) throws IOException { Configuration configuration = getProject ( ) . getBuildscript ( ) . getConfigurations ( ) . getByName ( ScriptHandler . CLASSPATH_CONFIGURATION ) ; renderer . startConfiguration ( configuration ) ; renderer . render ( configuration ) ; renderer . completeConfiguration ( configuration ) ; } } ; ReportGenerator reportGenerator = new ReportGenerator ( renderer , getClientMetaData ( ) , null , getTextOutputFactory ( ) , projectReportGenerator ) ; reportGenerator . generateReport ( Collections . singleton ( getProject ( ) ) ) ; } @VisibleForTesting protected void setRenderer ( DependencyReportRenderer dependencyReportRenderer ) { this . renderer = dependencyReportRenderer ; } } 

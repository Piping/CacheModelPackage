package org . eclipse . debug . internal . ui . viewers ; import org . eclipse . jface . viewers . CellEditor ; import org . eclipse . jface . viewers . ICellEditorListener ; import org . eclipse . jface . viewers . ICellModifier ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . swt . events . FocusAdapter ; import org . eclipse . swt . events . FocusEvent ; import org . eclipse . swt . events . FocusListener ; import org . eclipse . swt . events . MouseAdapter ; import org . eclipse . swt . events . MouseEvent ; import org . eclipse . swt . events . MouseListener ; import org . eclipse . swt . graphics . Rectangle ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Item ; public abstract class TableEditorImpl { private CellEditor fCellEditor ; private CellEditor [ ] fCellEditors ; private ICellModifier fCellModifier ; private String [ ] fColumnProperties ; private Item fTableItem ; private int fColumnNumber ; private ICellEditorListener fCellEditorListener ; private FocusListener fFocusListener ; private MouseListener fMouseListener ; private int fDoubleClickExpirationTime ; private StructuredViewer fViewer ; TableEditorImpl ( StructuredViewer viewer ) { fViewer = viewer ; initCellEditorListener ( ) ; } public StructuredViewer getViewer ( ) { return fViewer ; } private void activateCellEditor ( ) { if ( fCellEditors ! = null ) { if ( fCellEditors [ fColumnNumber ] ! = null & & fCellModifier ! = null ) { Object element = fTableItem . getData ( ) ; String property = fColumnProperties [ fColumnNumber ] ; if ( fCellModifier . canModify ( element , property ) ) { fCellEditor = fCellEditors [ fColumnNumber ] ; fCellEditor . addListener ( fCellEditorListener ) ; Object value = fCellModifier . getValue ( element , property ) ; fCellEditor . setValue ( value ) ; final Control control = fCellEditor . getControl ( ) ; fCellEditor . activate ( ) ; if ( control = = null ) return ; setLayoutData ( fCellEditor . getLayoutData ( ) ) ; setEditor ( control , fTableItem , fColumnNumber ) ; fCellEditor . setFocus ( ) ; if ( fFocusListener = = null ) { fFocusListener = new FocusAdapter ( ) { @Override public void focusLost ( FocusEvent e ) { applyEditorValue ( ) ; } } ; } control . addFocusListener ( fFocusListener ) ; fMouseListener = new MouseAdapter ( ) { @Override public void mouseDown ( MouseEvent e ) { if ( e . time < = fDoubleClickExpirationTime ) { control . removeMouseListener ( fMouseListener ) ; cancelEditing ( ) ; handleDoubleClickEvent ( ) ; } else if ( fMouseListener ! = null ) { control . removeMouseListener ( fMouseListener ) ; } } } ; control . addMouseListener ( fMouseListener ) ; } } } } private void activateCellEditor ( MouseEvent event ) { if ( fTableItem = = null | | fTableItem . isDisposed ( ) ) { return ; } int columnToEdit ; int columns = getColumnCount ( ) ; if ( columns = = <int> ) { columnToEdit = <int> ; } else { columnToEdit = - <int> ; for ( int i = <int> ; i < columns ; i + + ) { Rectangle bounds = getBounds ( fTableItem , i ) ; if ( bounds . contains ( event . x , event . y ) ) { columnToEdit = i ; break ; } } if ( columnToEdit = = - <int> ) { return ; } } fColumnNumber = columnToEdit ; activateCellEditor ( ) ; } public void applyEditorValue ( ) { CellEditor c = fCellEditor ; if ( c ! = null ) { fCellEditor = null ; Item t = fTableItem ; if ( t ! = null & & ! t . isDisposed ( ) ) { saveEditorValue ( c , t ) ; } setEditor ( null , null , <int> ) ; c . removeListener ( fCellEditorListener ) ; Control control = c . getControl ( ) ; if ( control ! = null ) { if ( fMouseListener ! = null ) { control . removeMouseListener ( fMouseListener ) ; } if ( fFocusListener ! = null ) { control . removeFocusListener ( fFocusListener ) ; } } c . deactivate ( ) ; } } public void cancelEditing ( ) { if ( fCellEditor ! = null ) { setEditor ( null , null , <int> ) ; fCellEditor . removeListener ( fCellEditorListener ) ; CellEditor oldEditor = fCellEditor ; fCellEditor = null ; oldEditor . deactivate ( ) ; } } public void editElement ( Object element , int column ) { if ( fCellEditor ! = null ) applyEditorValue ( ) ; setSelection ( new StructuredSelection ( element ) , true ) ; Item [ ] selection = getSelection ( ) ; if ( selection . length ! = <int> ) return ; fTableItem = selection [ <int> ] ; showSelection ( ) ; fColumnNumber = column ; activateCellEditor ( ) ; } abstract Rectangle getBounds ( Item item , int columnNumber ) ; public CellEditor [ ] getCellEditors ( ) { return fCellEditors ; } public ICellModifier getCellModifier ( ) { return fCellModifier ; } abstract int getColumnCount ( ) ; public Object [ ] getColumnProperties ( ) { return fColumnProperties ; } abstract Item [ ] getSelection ( ) ; public void handleMouseDown ( MouseEvent event ) { if ( event . button ! = <int> ) return ; if ( fCellEditor ! = null ) applyEditorValue ( ) ; fDoubleClickExpirationTime = event . time + Display . getCurrent ( ) . getDoubleClickTime ( ) ; Item [ ] items = getSelection ( ) ; if ( items . length ! = <int> ) { fTableItem = null ; return ; } fTableItem = items [ <int> ] ; activateCellEditor ( event ) ; } private void initCellEditorListener ( ) { fCellEditorListener = new ICellEditorListener ( ) { @Override public void editorValueChanged ( boolean oldValidState , boolean newValidState ) { } @Override public void cancelEditor ( ) { TableEditorImpl . this . cancelEditing ( ) ; } @Override public void applyEditorValue ( ) { TableEditorImpl . this . applyEditorValue ( ) ; } } ; } public boolean isCellEditorActive ( ) { return fCellEditor ! = null ; } private void saveEditorValue ( CellEditor cellEditor , Item tableItem ) { if ( fCellModifier ! = null ) { if ( ! cellEditor . isValueValid ( ) ) { } String property = null ; if ( fColumnProperties ! = null & & fColumnNumber < fColumnProperties . length ) property = fColumnProperties [ fColumnNumber ] ; fCellModifier . modify ( tableItem , property , cellEditor . getValue ( ) ) ; } } public void setCellEditors ( CellEditor [ ] editors ) { fCellEditors = editors ; } public void setCellModifier ( ICellModifier modifier ) { fCellModifier = modifier ; } public void setColumnProperties ( String [ ] columnProperties ) { fColumnProperties = columnProperties ; } abstract void setEditor ( Control w , Item item , int fColumnNumber ) ; abstract void setLayoutData ( CellEditor . LayoutData layoutData ) ; abstract void setSelection ( StructuredSelection selection , boolean b ) ; abstract void showSelection ( ) ; abstract void handleDoubleClickEvent ( ) ; } 

package org . gradle . model . internal . manage . schema . extract ; import com . google . common . collect . ImmutableSet ; import org . gradle . internal . Cast ; import org . gradle . model . Managed ; import org . gradle . model . internal . core . NodeInitializer ; import org . gradle . model . internal . inspect . ManagedModelInitializer ; import org . gradle . model . internal . manage . schema . ManagedImplStructSchema ; import org . gradle . model . internal . manage . schema . ModelSchema ; import org . gradle . model . internal . type . ModelType ; public class ManagedImplStructNodeInitializerExtractionStrategy implements NodeInitializerExtractionStrategy { protected boolean isTarget ( ModelType < ? > type ) { return type . isAnnotationPresent ( Managed . class ) ; } @Override public < T > NodeInitializer extractNodeInitializer ( ModelSchema < T > schema ) { if ( ! ( schema instanceof ManagedImplStructSchema ) ) { return null ; } if ( ! isTarget ( schema . getType ( ) ) ) { return null ; } ManagedImplStructSchema < T > managedSchema = Cast . < ManagedImplStructSchema < T > > uncheckedCast ( schema ) ; return new ManagedModelInitializer < T > ( managedSchema ) ; } @Override public Iterable < ModelType < ? > > supportedTypes ( ) { return ImmutableSet . of ( ) ; } } 

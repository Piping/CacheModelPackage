package org . elasticsearch . index . cache . query ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . apache . lucene . search . DocIdSet ; import java . io . IOException ; public class QueryCacheStats implements Streamable , ToXContent { long ramBytesUsed ; long hitCount ; long missCount ; long cacheCount ; long cacheSize ; public QueryCacheStats ( ) { } public QueryCacheStats ( long ramBytesUsed , long hitCount , long missCount , long cacheCount , long cacheSize ) { this . ramBytesUsed = ramBytesUsed ; this . hitCount = hitCount ; this . missCount = missCount ; this . cacheCount = cacheCount ; this . cacheSize = cacheSize ; } public void add ( QueryCacheStats stats ) { ramBytesUsed + = stats . ramBytesUsed ; hitCount + = stats . hitCount ; missCount + = stats . missCount ; cacheCount + = stats . cacheCount ; cacheSize + = stats . cacheSize ; } public long getMemorySizeInBytes ( ) { return ramBytesUsed ; } public ByteSizeValue getMemorySize ( ) { return new ByteSizeValue ( ramBytesUsed ) ; } public long getTotalCount ( ) { return hitCount + missCount ; } public long getHitCount ( ) { return hitCount ; } public long getMissCount ( ) { return missCount ; } public long getCacheCount ( ) { return cacheCount ; } public long getCacheSize ( ) { return cacheSize ; } public long getEvictions ( ) { return cacheCount - cacheSize ; } public static QueryCacheStats readQueryCacheStats ( StreamInput in ) throws IOException { QueryCacheStats stats = new QueryCacheStats ( ) ; stats . readFrom ( in ) ; return stats ; } @Override public void readFrom ( StreamInput in ) throws IOException { ramBytesUsed = in . readLong ( ) ; hitCount = in . readLong ( ) ; missCount = in . readLong ( ) ; cacheCount = in . readLong ( ) ; cacheSize = in . readLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeLong ( ramBytesUsed ) ; out . writeLong ( hitCount ) ; out . writeLong ( missCount ) ; out . writeLong ( cacheCount ) ; out . writeLong ( cacheSize ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , ToXContent . Params params ) throws IOException { builder . startObject ( Fields . QUERY_CACHE ) ; builder . byteSizeField ( Fields . MEMORY_SIZE_IN_BYTES , Fields . MEMORY_SIZE , ramBytesUsed ) ; builder . field ( Fields . TOTAL_COUNT , getTotalCount ( ) ) ; builder . field ( Fields . HIT_COUNT , getHitCount ( ) ) ; builder . field ( Fields . MISS_COUNT , getMissCount ( ) ) ; builder . field ( Fields . CACHE_SIZE , getCacheSize ( ) ) ; builder . field ( Fields . CACHE_COUNT , getCacheCount ( ) ) ; builder . field ( Fields . EVICTIONS , getEvictions ( ) ) ; builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString QUERY_CACHE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MEMORY_SIZE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MEMORY_SIZE_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_COUNT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString HIT_COUNT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MISS_COUNT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CACHE_SIZE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CACHE_COUNT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString EVICTIONS = new XContentBuilderString ( <str> ) ; } } 

package org . jbox2d . callbacks ; import org . jbox2d . common . Color3f ; import org . jbox2d . common . IViewportTransform ; import org . jbox2d . common . Transform ; import org . jbox2d . common . Vec2 ; import org . jbox2d . particle . ParticleColor ; public abstract class DebugDraw { public static final int e_shapeBit = <int> < < <int> ; public static final int e_jointBit = <int> < < <int> ; public static final int e_aabbBit = <int> < < <int> ; public static final int e_pairBit = <int> < < <int> ; public static final int e_centerOfMassBit = <int> < < <int> ; public static final int e_dynamicTreeBit = <int> < < <int> ; public static final int e_wireframeDrawingBit = <int> < < <int> ; protected int m_drawFlags ; protected IViewportTransform viewportTransform ; public DebugDraw ( ) { this ( null ) ; } public DebugDraw ( IViewportTransform viewport ) { m_drawFlags = <int> ; viewportTransform = viewport ; } public void setViewportTransform ( IViewportTransform viewportTransform ) { this . viewportTransform = viewportTransform ; } public void setFlags ( int flags ) { m_drawFlags = flags ; } public int getFlags ( ) { return m_drawFlags ; } public void appendFlags ( int flags ) { m_drawFlags | = flags ; } public void clearFlags ( int flags ) { m_drawFlags & = ~ flags ; } public void drawPolygon ( Vec2 [ ] vertices , int vertexCount , Color3f color ) { if ( vertexCount = = <int> ) { drawSegment ( vertices [ <int> ] , vertices [ <int> ] , color ) ; return ; } for ( int i = <int> ; i < vertexCount - <int> ; i + = <int> ) { drawSegment ( vertices [ i ] , vertices [ i + <int> ] , color ) ; } if ( vertexCount > <int> ) { drawSegment ( vertices [ vertexCount - <int> ] , vertices [ <int> ] , color ) ; } } public abstract void drawPoint ( Vec2 argPoint , float argRadiusOnScreen , Color3f argColor ) ; public abstract void drawSolidPolygon ( Vec2 [ ] vertices , int vertexCount , Color3f color ) ; public abstract void drawCircle ( Vec2 center , float radius , Color3f color ) ; public void drawCircle ( Vec2 center , float radius , Vec2 axis , Color3f color ) { drawCircle ( center , radius , color ) ; } public abstract void drawSolidCircle ( Vec2 center , float radius , Vec2 axis , Color3f color ) ; public abstract void drawSegment ( Vec2 p1 , Vec2 p2 , Color3f color ) ; public abstract void drawTransform ( Transform xf ) ; public abstract void drawString ( float x , float y , String s , Color3f color ) ; public abstract void drawParticles ( Vec2 [ ] centers , float radius , ParticleColor [ ] colors , int count ) ; public abstract void drawParticlesWireframe ( Vec2 [ ] centers , float radius , ParticleColor [ ] colors , int count ) ; public void flush ( ) { } public void drawString ( Vec2 pos , String s , Color3f color ) { drawString ( pos . x , pos . y , s , color ) ; } public IViewportTransform getViewportTranform ( ) { return viewportTransform ; } public void setCamera ( float x , float y , float scale ) { viewportTransform . setCamera ( x , y , scale ) ; } public void getScreenToWorldToOut ( Vec2 argScreen , Vec2 argWorld ) { viewportTransform . getScreenToWorld ( argScreen , argWorld ) ; } public void getWorldToScreenToOut ( Vec2 argWorld , Vec2 argScreen ) { viewportTransform . getWorldToScreen ( argWorld , argScreen ) ; } public void getWorldToScreenToOut ( float worldX , float worldY , Vec2 argScreen ) { argScreen . set ( worldX , worldY ) ; viewportTransform . getWorldToScreen ( argScreen , argScreen ) ; } public Vec2 getWorldToScreen ( Vec2 argWorld ) { Vec2 screen = new Vec2 ( ) ; viewportTransform . getWorldToScreen ( argWorld , screen ) ; return screen ; } public Vec2 getWorldToScreen ( float worldX , float worldY ) { Vec2 argScreen = new Vec2 ( worldX , worldY ) ; viewportTransform . getWorldToScreen ( argScreen , argScreen ) ; return argScreen ; } public void getScreenToWorldToOut ( float screenX , float screenY , Vec2 argWorld ) { argWorld . set ( screenX , screenY ) ; viewportTransform . getScreenToWorld ( argWorld , argWorld ) ; } public Vec2 getScreenToWorld ( Vec2 argScreen ) { Vec2 world = new Vec2 ( ) ; viewportTransform . getScreenToWorld ( argScreen , world ) ; return world ; } public Vec2 getScreenToWorld ( float screenX , float screenY ) { Vec2 screen = new Vec2 ( screenX , screenY ) ; viewportTransform . getScreenToWorld ( screen , screen ) ; return screen ; } } 

package org . elasticsearch . search . aggregations . bucket . geogrid ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . AggregationBuilder ; import java . io . IOException ; public class GeoHashGridBuilder extends AggregationBuilder < GeoHashGridBuilder > { private String field ; private int precision = GeoHashGridParams . DEFAULT_PRECISION ; private int requiredSize = GeoHashGridParams . DEFAULT_MAX_NUM_CELLS ; private int shardSize = <int> ; public GeoHashGridBuilder ( String name ) { super ( name , InternalGeoHashGrid . TYPE . name ( ) ) ; } public GeoHashGridBuilder field ( String field ) { this . field = field ; return this ; } public GeoHashGridBuilder precision ( int precision ) { this . precision = GeoHashGridParams . checkPrecision ( precision ) ; return this ; } public GeoHashGridBuilder size ( int requiredSize ) { this . requiredSize = requiredSize ; return this ; } public GeoHashGridBuilder shardSize ( int shardSize ) { this . shardSize = shardSize ; return this ; } @Override protected XContentBuilder internalXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; if ( field ! = null ) { builder . field ( <str> , field ) ; } if ( precision ! = GeoHashGridParams . DEFAULT_PRECISION ) { builder . field ( GeoHashGridParams . FIELD_PRECISION . getPreferredName ( ) , precision ) ; } if ( requiredSize ! = GeoHashGridParams . DEFAULT_MAX_NUM_CELLS ) { builder . field ( GeoHashGridParams . FIELD_SIZE . getPreferredName ( ) , requiredSize ) ; } if ( shardSize ! = <int> ) { builder . field ( GeoHashGridParams . FIELD_SHARD_SIZE . getPreferredName ( ) , shardSize ) ; } return builder . endObject ( ) ; } } 

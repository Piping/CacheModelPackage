package org . elasticsearch . ttl ; import org . elasticsearch . action . admin . indices . mapping . get . GetMappingsResponse ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingResponse ; import org . elasticsearch . action . admin . indices . stats . IndicesStatsResponse ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . action . update . UpdateRequestBuilder ; import org . elasticsearch . action . update . UpdateResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . io . IOException ; import java . util . Locale ; import java . util . Map ; import java . util . concurrent . TimeUnit ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . both ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . hasKey ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class SimpleTTLIT extends ESIntegTestCase { static private final long PURGE_INTERVAL = <int> ; @Override protected int numberOfShards ( ) { return <int> ; } @Override protected Settings nodeSettings ( int nodeOrdinal ) { return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , PURGE_INTERVAL , TimeUnit . MILLISECONDS ) . put ( <str> , false ) . put ( <str> , <str> ) . build ( ) ; } public void testSimpleTTL ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . startObject ( <str> ) . field ( <str> , true ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; ensureYellow ( <str> ) ; final NumShards test = getNumShards ( <str> ) ; long providedTTLValue = <int> ; logger . info ( <str> ) ; long now = System . currentTimeMillis ( ) ; IndexResponse indexResponse = client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setTimestamp ( String . valueOf ( now ) ) . setTTL ( providedTTLValue ) . setRefresh ( true ) . get ( ) ; assertThat ( indexResponse . isCreated ( ) , is ( true ) ) ; indexResponse = client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setTimestamp ( String . valueOf ( now ) ) . setTTL ( providedTTLValue ) . setRouting ( <str> ) . setRefresh ( true ) . get ( ) ; assertThat ( indexResponse . isCreated ( ) , is ( true ) ) ; indexResponse = client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; assertThat ( indexResponse . isCreated ( ) , is ( true ) ) ; indexResponse = client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; assertThat ( indexResponse . isCreated ( ) , is ( true ) ) ; long currentTime = System . currentTimeMillis ( ) ; GetResponse getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . get ( ) ; long ttl0 ; if ( getResponse . isExists ( ) ) { ttl0 = ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; assertThat ( ttl0 , lessThanOrEqualTo ( providedTTLValue - ( currentTime - now ) ) ) ; } else { assertThat ( providedTTLValue - ( currentTime - now ) , lessThanOrEqualTo ( <int> l ) ) ; } currentTime = System . currentTimeMillis ( ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . get ( ) ; if ( getResponse . isExists ( ) ) { ttl0 = ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; assertThat ( ttl0 , lessThanOrEqualTo ( providedTTLValue - ( currentTime - now ) ) ) ; } else { assertThat ( providedTTLValue - ( currentTime - now ) , lessThanOrEqualTo ( <int> l ) ) ; } currentTime = System . currentTimeMillis ( ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . get ( ) ; if ( getResponse . isExists ( ) ) { ttl0 = ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; assertThat ( ttl0 , lessThanOrEqualTo ( providedTTLValue - ( currentTime - now ) ) ) ; } else { assertThat ( providedTTLValue - ( currentTime - now ) , lessThanOrEqualTo ( <int> l ) ) ; } currentTime = System . currentTimeMillis ( ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . get ( ) ; if ( getResponse . isExists ( ) ) { ttl0 = ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; assertThat ( ttl0 , lessThanOrEqualTo ( providedTTLValue - ( currentTime - now ) ) ) ; } else { assertThat ( providedTTLValue - ( currentTime - now ) , lessThanOrEqualTo ( <int> l ) ) ; } getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( true ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . getField ( <str> ) , nullValue ( ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( true ) . execute ( ) . actionGet ( ) ; ttl0 = ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; assertThat ( ttl0 , greaterThan ( <int> L ) ) ; IndicesStatsResponse response = client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . clear ( ) . setIndexing ( true ) . get ( ) ; assertThat ( response . getIndices ( ) . get ( <str> ) . getTotal ( ) . getIndexing ( ) . getTotal ( ) . getDeleteCount ( ) , equalTo ( <int> L ) ) ; long shouldBeExpiredDate = now + providedTTLValue + PURGE_INTERVAL + <int> ; currentTime = System . currentTimeMillis ( ) ; if ( shouldBeExpiredDate - currentTime > <int> ) { Thread . sleep ( shouldBeExpiredDate - currentTime ) ; } logger . info ( <str> ) ; assertTrue ( awaitBusy ( ( ) - > { if ( rarely ( ) ) { client ( ) . admin ( ) . indices ( ) . prepareFlush ( <str> ) . get ( ) ; } else if ( rarely ( ) ) { client ( ) . admin ( ) . indices ( ) . prepareForceMerge ( <str> ) . setMaxNumSegments ( <int> ) . get ( ) ; } IndicesStatsResponse indicesStatsResponse = client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . clear ( ) . setIndexing ( true ) . get ( ) ; return indicesStatsResponse . getIndices ( ) . get ( <str> ) . getTotal ( ) . getIndexing ( ) . getTotal ( ) . getDeleteCount ( ) = = <int> * test . dataCopies ; } , <int> , TimeUnit . SECONDS ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( true ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . setFields ( <str> ) . setRealtime ( true ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( true ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . setFields ( <str> ) . setRealtime ( true ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; } public void testThatUpdatingMappingShouldNotRemoveTTLConfiguration ( ) throws Exception { String index = <str> ; String type = <str> ; XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( index ) . addMapping ( type , builder ) ) ; assertTTLMappingEnabled ( index , type ) ; XContentBuilder updateMappingBuilder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( index ) . setType ( type ) . setSource ( updateMappingBuilder ) . get ( ) ; assertAcked ( putMappingResponse ) ; assertTTLMappingEnabled ( index , type ) ; } public void testNoopUpdate ( ) throws IOException { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; ensureYellow ( <str> ) ; long aLongTime = <int> ; long firstTtl = aLongTime * <int> ; long secondTtl = aLongTime * <int> ; long thirdTtl = aLongTime * <int> ; IndexResponse indexResponse = client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setTTL ( firstTtl ) . setRefresh ( true ) . get ( ) ; assertTrue ( indexResponse . isCreated ( ) ) ; assertThat ( getTtl ( <str> , <int> ) , both ( lessThanOrEqualTo ( firstTtl ) ) . and ( greaterThan ( secondTtl ) ) ) ; UpdateRequestBuilder update = client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> , <str> ) . setTtl ( secondTtl ) ; assertThat ( updateAndGetTtl ( update ) , both ( lessThanOrEqualTo ( firstTtl ) ) . and ( greaterThan ( secondTtl ) ) ) ; update = client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> , <str> ) . setTtl ( secondTtl ) ; assertThat ( updateAndGetTtl ( update ) , both ( lessThanOrEqualTo ( secondTtl ) ) . and ( greaterThan ( thirdTtl ) ) ) ; update = client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> , <str> ) . setTtl ( secondTtl ) . setDetectNoop ( true ) ; assertThat ( updateAndGetTtl ( update ) , both ( lessThanOrEqualTo ( secondTtl ) ) . and ( greaterThan ( thirdTtl ) ) ) ; update = client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> , <str> ) . setTtl ( thirdTtl ) . setDetectNoop ( false ) ; assertThat ( updateAndGetTtl ( update ) , lessThanOrEqualTo ( thirdTtl ) ) ; } private long updateAndGetTtl ( UpdateRequestBuilder update ) { UpdateResponse updateResponse = update . setFields ( <str> ) . get ( ) ; assertThat ( updateResponse . getShardInfo ( ) . getFailed ( ) , equalTo ( <int> ) ) ; return getTtl ( updateResponse . getType ( ) , updateResponse . getId ( ) ) ; } private long getTtl ( String type , Object id ) { GetResponse getResponse = client ( ) . prepareGet ( <str> , type , id . toString ( ) ) . setFields ( <str> ) . setRealtime ( true ) . execute ( ) . actionGet ( ) ; return ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; } private void assertTTLMappingEnabled ( String index , String type ) throws IOException { String errMsg = String . format ( Locale . ROOT , <str> , index , type ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( index ) . addTypes ( type ) . get ( ) ; Map < String , Object > mappingSource = getMappingsResponse . getMappings ( ) . get ( index ) . get ( type ) . getSourceAsMap ( ) ; assertThat ( errMsg , mappingSource , hasKey ( <str> ) ) ; String ttlAsString = mappingSource . get ( <str> ) . toString ( ) ; assertThat ( ttlAsString , is ( notNullValue ( ) ) ) ; assertThat ( errMsg , ttlAsString , is ( <str> ) ) ; } } 

package org . gradle . api . internal . plugins ; import org . gradle . plugin . internal . PluginId ; public class DefaultPotentialPluginWithId < T > implements PluginImplementation < T > { private final PluginId pluginId ; private final PotentialPlugin < ? extends T > potentialPlugin ; public static < T > DefaultPotentialPluginWithId < T > of ( PluginId pluginId , PotentialPlugin < T > potentialPlugin ) { return new DefaultPotentialPluginWithId < T > ( pluginId , potentialPlugin ) ; } protected DefaultPotentialPluginWithId ( PluginId pluginId , PotentialPlugin < ? extends T > potentialPlugin ) { this . pluginId = pluginId ; this . potentialPlugin = potentialPlugin ; } @Override public String getDisplayName ( ) { if ( pluginId = = null ) { return String . format ( <str> , asClass ( ) . getName ( ) ) ; } return String . format ( <str> , pluginId ) ; } public PluginId getPluginId ( ) { return pluginId ; } public Class < ? extends T > asClass ( ) { return potentialPlugin . asClass ( ) ; } public boolean isImperative ( ) { return potentialPlugin . isImperative ( ) ; } public boolean isHasRules ( ) { return potentialPlugin . isHasRules ( ) ; } public Type getType ( ) { return potentialPlugin . getType ( ) ; } @Override public boolean isAlsoKnownAs ( PluginId id ) { return false ; } } 

package junit . tests . framework ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestFailure ; import junit . framework . TestResult ; import junit . framework . TestSuite ; import junit . tests . WasRun ; public class TestCaseTest extends TestCase { static class TornDown extends TestCase { boolean fTornDown = false ; @Override protected void tearDown ( ) { fTornDown = true ; } @Override protected void runTest ( ) { throw new Error ( <str> ) ; } } public void testCaseToString ( ) { assertEquals ( <str> , toString ( ) ) ; } public void testError ( ) { TestCase error = new TestCase ( <str> ) { @Override protected void runTest ( ) { throw new Error ( ) ; } } ; verifyError ( error ) ; } public void testRunAndTearDownFails ( ) { TornDown fails = new TornDown ( ) { @Override protected void tearDown ( ) { super . tearDown ( ) ; throw new Error ( ) ; } @Override protected void runTest ( ) { throw new Error ( ) ; } } ; verifyError ( fails ) ; assertTrue ( fails . fTornDown ) ; } public void testSetupFails ( ) { TestCase fails = new TestCase ( <str> ) { @Override protected void setUp ( ) { throw new Error ( ) ; } @Override protected void runTest ( ) { } } ; verifyError ( fails ) ; } public void testSuccess ( ) { TestCase success = new TestCase ( <str> ) { @Override protected void runTest ( ) { } } ; verifySuccess ( success ) ; } public void testFailure ( ) { TestCase failure = new TestCase ( <str> ) { @Override protected void runTest ( ) { fail ( ) ; } } ; verifyFailure ( failure ) ; } public void testTearDownAfterError ( ) { TornDown fails = new TornDown ( ) ; verifyError ( fails ) ; assertTrue ( fails . fTornDown ) ; } public void testTearDownFails ( ) { TestCase fails = new TestCase ( <str> ) { @Override protected void tearDown ( ) { throw new Error ( ) ; } @Override protected void runTest ( ) { } } ; verifyError ( fails ) ; } public void testTearDownSetupFails ( ) { TornDown fails = new TornDown ( ) { @Override protected void setUp ( ) { throw new Error ( ) ; } } ; verifyError ( fails ) ; assertTrue ( ! fails . fTornDown ) ; } public void testWasRun ( ) { WasRun test = new WasRun ( ) ; test . run ( ) ; assertTrue ( test . fWasRun ) ; } public void testExceptionRunningAndTearDown ( ) { Test t = new TornDown ( ) { @Override public void tearDown ( ) { throw new Error ( <str> ) ; } } ; TestResult result = new TestResult ( ) ; t . run ( result ) ; TestFailure failure = result . errors ( ) . nextElement ( ) ; assertEquals ( <str> , failure . thrownException ( ) . getMessage ( ) ) ; } public void testErrorTearingDownDoesntMaskErrorRunning ( ) { final Exception running = new Exception ( <str> ) ; TestCase t = new TestCase ( ) { @Override protected void runTest ( ) throws Throwable { throw running ; } @Override protected void tearDown ( ) throws Exception { throw new Error ( <str> ) ; } } ; try { t . runBare ( ) ; } catch ( Throwable thrown ) { assertSame ( running , thrown ) ; } } public void testNoArgTestCasePasses ( ) { Test t = new TestSuite ( NoArgTestCaseTest . class ) ; TestResult result = new TestResult ( ) ; t . run ( result ) ; assertTrue ( result . runCount ( ) = = <int> ) ; assertTrue ( result . failureCount ( ) = = <int> ) ; assertTrue ( result . errorCount ( ) = = <int> ) ; } public void testNamelessTestCase ( ) { TestCase t = new TestCase ( ) { } ; TestResult result = t . run ( ) ; assertEquals ( <int> , result . failureCount ( ) ) ; } void verifyError ( TestCase test ) { TestResult result = test . run ( ) ; assertTrue ( result . runCount ( ) = = <int> ) ; assertTrue ( result . failureCount ( ) = = <int> ) ; assertTrue ( result . errorCount ( ) = = <int> ) ; } void verifyFailure ( TestCase test ) { TestResult result = test . run ( ) ; assertTrue ( result . runCount ( ) = = <int> ) ; assertTrue ( result . failureCount ( ) = = <int> ) ; assertTrue ( result . errorCount ( ) = = <int> ) ; } void verifySuccess ( TestCase test ) { TestResult result = test . run ( ) ; assertTrue ( result . runCount ( ) = = <int> ) ; assertTrue ( result . failureCount ( ) = = <int> ) ; assertTrue ( result . errorCount ( ) = = <int> ) ; } } 

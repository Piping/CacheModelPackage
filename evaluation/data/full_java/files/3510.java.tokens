package org . eclipse . core . externaltools . internal ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Plugin ; import org . eclipse . core . runtime . Status ; import org . osgi . framework . BundleContext ; public class ExternalToolsCore extends Plugin { public static final String PLUGIN_ID = <str> ; public static final int INTERNAL_ERROR = <int> ; private static ExternalToolsCore plugin ; public ExternalToolsCore ( ) { } @Override public void start ( BundleContext context ) throws Exception { super . start ( context ) ; plugin = this ; } @Override public void stop ( BundleContext context ) throws Exception { plugin = null ; super . stop ( context ) ; } public static ExternalToolsCore getDefault ( ) { return plugin ; } public static void log ( Throwable t ) { IStatus status = new Status ( IStatus . ERROR , PLUGIN_ID , INTERNAL_ERROR , <str> , t ) ; log ( status ) ; } public static void log ( IStatus status ) { getDefault ( ) . getLog ( ) . log ( status ) ; } public static void log ( String message , Throwable exception ) { IStatus status = newErrorStatus ( message , exception ) ; log ( status ) ; } public static IStatus newErrorStatus ( String message , Throwable exception ) { if ( message = = null ) { return new Status ( IStatus . ERROR , PLUGIN_ID , <int> , IExternalToolConstants . EMPTY_STRING , exception ) ; } return new Status ( IStatus . ERROR , PLUGIN_ID , <int> , message , exception ) ; } public static CoreException newError ( String message , Throwable exception ) { return new CoreException ( new Status ( IStatus . ERROR , IExternalToolConstants . PLUGIN_ID , <int> , message , exception ) ) ; } } 

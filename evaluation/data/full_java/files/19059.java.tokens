package io . netty . handler . codec . haproxy ; import static io . netty . handler . codec . haproxy . HAProxyConstants . * ; public enum HAProxyProxiedProtocol { UNKNOWN ( TPAF_UNKNOWN_BYTE , AddressFamily . AF_UNSPEC , TransportProtocol . UNSPEC ) , TCP4 ( TPAF_TCP4_BYTE , AddressFamily . AF_IPv4 , TransportProtocol . STREAM ) , TCP6 ( TPAF_TCP6_BYTE , AddressFamily . AF_IPv6 , TransportProtocol . STREAM ) , UDP4 ( TPAF_UDP4_BYTE , AddressFamily . AF_IPv4 , TransportProtocol . DGRAM ) , UDP6 ( TPAF_UDP6_BYTE , AddressFamily . AF_IPv6 , TransportProtocol . DGRAM ) , UNIX_STREAM ( TPAF_UNIX_STREAM_BYTE , AddressFamily . AF_UNIX , TransportProtocol . STREAM ) , UNIX_DGRAM ( TPAF_UNIX_DGRAM_BYTE , AddressFamily . AF_UNIX , TransportProtocol . DGRAM ) ; private final byte byteValue ; private final AddressFamily addressFamily ; private final TransportProtocol transportProtocol ; HAProxyProxiedProtocol ( byte byteValue , AddressFamily addressFamily , TransportProtocol transportProtocol ) { this . byteValue = byteValue ; this . addressFamily = addressFamily ; this . transportProtocol = transportProtocol ; } public static HAProxyProxiedProtocol valueOf ( byte tpafByte ) { switch ( tpafByte ) { case TPAF_TCP4_BYTE : return TCP4 ; case TPAF_TCP6_BYTE : return TCP6 ; case TPAF_UNKNOWN_BYTE : return UNKNOWN ; case TPAF_UDP4_BYTE : return UDP4 ; case TPAF_UDP6_BYTE : return UDP6 ; case TPAF_UNIX_STREAM_BYTE : return UNIX_STREAM ; case TPAF_UNIX_DGRAM_BYTE : return UNIX_DGRAM ; default : throw new IllegalArgumentException ( <str> + ( tpafByte & <hex> ) ) ; } } public byte byteValue ( ) { return byteValue ; } public AddressFamily addressFamily ( ) { return addressFamily ; } public TransportProtocol transportProtocol ( ) { return transportProtocol ; } public enum AddressFamily { AF_UNSPEC ( AF_UNSPEC_BYTE ) , AF_IPv4 ( AF_IPV4_BYTE ) , AF_IPv6 ( AF_IPV6_BYTE ) , AF_UNIX ( AF_UNIX_BYTE ) ; private static final byte FAMILY_MASK = ( byte ) <hex> ; private final byte byteValue ; AddressFamily ( byte byteValue ) { this . byteValue = byteValue ; } public static AddressFamily valueOf ( byte tpafByte ) { int addressFamily = tpafByte & FAMILY_MASK ; switch ( ( byte ) addressFamily ) { case AF_IPV4_BYTE : return AF_IPv4 ; case AF_IPV6_BYTE : return AF_IPv6 ; case AF_UNSPEC_BYTE : return AF_UNSPEC ; case AF_UNIX_BYTE : return AF_UNIX ; default : throw new IllegalArgumentException ( <str> + addressFamily ) ; } } public byte byteValue ( ) { return byteValue ; } } public enum TransportProtocol { UNSPEC ( TRANSPORT_UNSPEC_BYTE ) , STREAM ( TRANSPORT_STREAM_BYTE ) , DGRAM ( TRANSPORT_DGRAM_BYTE ) ; private static final byte TRANSPORT_MASK = <hex> ; private final byte transportByte ; TransportProtocol ( byte transportByte ) { this . transportByte = transportByte ; } public static TransportProtocol valueOf ( byte tpafByte ) { int transportProtocol = tpafByte & TRANSPORT_MASK ; switch ( ( byte ) transportProtocol ) { case TRANSPORT_STREAM_BYTE : return STREAM ; case TRANSPORT_UNSPEC_BYTE : return UNSPEC ; case TRANSPORT_DGRAM_BYTE : return DGRAM ; default : throw new IllegalArgumentException ( <str> + transportProtocol ) ; } } public byte byteValue ( ) { return transportByte ; } } } 

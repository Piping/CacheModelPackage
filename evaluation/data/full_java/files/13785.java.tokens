package org . gradle . launcher . daemon . client ; import org . gradle . api . Nullable ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . concurrent . ExecutorFactory ; import org . gradle . internal . concurrent . Stoppable ; import org . gradle . internal . io . TextStream ; import org . gradle . launcher . daemon . protocol . CloseInput ; import org . gradle . launcher . daemon . protocol . ForwardInput ; import org . gradle . launcher . daemon . protocol . InputMessage ; import org . gradle . messaging . dispatch . Dispatch ; import java . io . InputStream ; public class DaemonClientInputForwarder implements Stoppable { private static final Logger LOGGER = Logging . getLogger ( DaemonClientInputForwarder . class ) ; public static final int DEFAULT_BUFFER_SIZE = <int> ; private final InputForwarder forwarder ; public DaemonClientInputForwarder ( InputStream inputStream , Dispatch < ? super InputMessage > dispatch , ExecutorFactory executorFactory ) { this ( inputStream , dispatch , executorFactory , DEFAULT_BUFFER_SIZE ) ; } public DaemonClientInputForwarder ( InputStream inputStream , Dispatch < ? super InputMessage > dispatch , ExecutorFactory executorFactory , int bufferSize ) { TextStream handler = new ForwardTextStreamToConnection ( dispatch ) ; forwarder = new InputForwarder ( inputStream , handler , executorFactory , bufferSize ) ; } public void start ( ) { forwarder . start ( ) ; } public void stop ( ) { forwarder . stop ( ) ; } private static class ForwardTextStreamToConnection implements TextStream { private final Dispatch < ? super InputMessage > dispatch ; public ForwardTextStreamToConnection ( Dispatch < ? super InputMessage > dispatch ) { this . dispatch = dispatch ; } public void text ( String input ) { if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( <str> , input . replace ( <str> , <str> ) ) ; } dispatch . dispatch ( new ForwardInput ( input . getBytes ( ) ) ) ; } public void endOfStream ( @Nullable Throwable failure ) { CloseInput message = new CloseInput ( ) ; LOGGER . debug ( <str> , message ) ; dispatch . dispatch ( message ) ; } } } 

package org . gradle . api . internal . tasks . compile . incremental ; import org . gradle . api . internal . tasks . compile . CleaningJavaCompiler ; import org . gradle . api . internal . tasks . compile . JavaCompileSpec ; import org . gradle . api . internal . tasks . compile . incremental . cache . CompileCaches ; import org . gradle . api . internal . tasks . compile . incremental . deps . ClassSetAnalysis ; import org . gradle . api . internal . tasks . compile . incremental . deps . ClassSetAnalysisData ; import org . gradle . api . internal . tasks . compile . incremental . jar . JarClasspathSnapshotMaker ; import org . gradle . api . internal . tasks . compile . incremental . jar . PreviousCompilation ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . api . tasks . incremental . IncrementalTaskInputs ; import org . gradle . language . base . internal . compile . Compiler ; public class IncrementalCompilerDecorator { private static final Logger LOG = Logging . getLogger ( IncrementalCompilerDecorator . class ) ; private final JarClasspathSnapshotMaker jarClasspathSnapshotMaker ; private final CompileCaches compileCaches ; private final CleaningJavaCompiler cleaningCompiler ; private final String displayName ; private final RecompilationSpecProvider staleClassDetecter ; private final ClassSetAnalysisUpdater classSetAnalysisUpdater ; private final CompilationSourceDirs sourceDirs ; private final IncrementalCompilationInitializer compilationInitializer ; public IncrementalCompilerDecorator ( JarClasspathSnapshotMaker jarClasspathSnapshotMaker , CompileCaches compileCaches , IncrementalCompilationInitializer compilationInitializer , CleaningJavaCompiler cleaningCompiler , String displayName , RecompilationSpecProvider staleClassDetecter , ClassSetAnalysisUpdater classSetAnalysisUpdater , CompilationSourceDirs sourceDirs ) { this . jarClasspathSnapshotMaker = jarClasspathSnapshotMaker ; this . compileCaches = compileCaches ; this . compilationInitializer = compilationInitializer ; this . cleaningCompiler = cleaningCompiler ; this . displayName = displayName ; this . staleClassDetecter = staleClassDetecter ; this . classSetAnalysisUpdater = classSetAnalysisUpdater ; this . sourceDirs = sourceDirs ; } public Compiler < JavaCompileSpec > prepareCompiler ( final IncrementalTaskInputs inputs ) { final Compiler < JavaCompileSpec > compiler = getCompiler ( inputs , sourceDirs ) ; return new IncrementalCompilationFinalizer ( compiler , jarClasspathSnapshotMaker , classSetAnalysisUpdater ) ; } private Compiler < JavaCompileSpec > getCompiler ( IncrementalTaskInputs inputs , CompilationSourceDirs sourceDirs ) { if ( ! inputs . isIncremental ( ) ) { LOG . lifecycle ( <str> , displayName ) ; return cleaningCompiler ; } if ( ! sourceDirs . canInferSourceRoots ( ) ) { LOG . lifecycle ( <str> , displayName ) ; return cleaningCompiler ; } ClassSetAnalysisData data = compileCaches . getLocalClassSetAnalysisStore ( ) . get ( ) ; if ( data = = null ) { LOG . lifecycle ( <str> , displayName ) ; return cleaningCompiler ; } PreviousCompilation previousCompilation = new PreviousCompilation ( new ClassSetAnalysis ( data ) , compileCaches . getLocalJarClasspathSnapshotStore ( ) , compileCaches . getJarSnapshotCache ( ) ) ; return new SelectiveCompiler ( inputs , previousCompilation , cleaningCompiler , staleClassDetecter , compilationInitializer , jarClasspathSnapshotMaker ) ; } } 

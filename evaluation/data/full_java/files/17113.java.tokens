package com . badlogic . gdx . physics . box2d . joints ; import org . jbox2d . common . Vec2 ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Joint ; import com . badlogic . gdx . physics . box2d . World ; public class PrismaticJoint extends Joint { org . jbox2d . dynamics . joints . PrismaticJoint joint ; Vector2 localAnchorA = new Vector2 ( ) ; Vector2 localAnchorB = new Vector2 ( ) ; Vector2 localAxisA = new Vector2 ( ) ; public PrismaticJoint ( World world , org . jbox2d . dynamics . joints . PrismaticJoint joint ) { super ( world , joint ) ; this . joint = joint ; } public Vector2 getLocalAnchorA ( ) { Vec2 localAnchor = joint . getLocalAnchorA ( ) ; localAnchorA . set ( localAnchor . x , localAnchor . y ) ; return localAnchorA ; } public Vector2 getLocalAnchorB ( ) { Vec2 localAnchor = joint . getLocalAnchorB ( ) ; localAnchorB . set ( localAnchor . x , localAnchor . y ) ; return localAnchorB ; } public Vector2 getLocalAxisA ( ) { Vec2 localAxis = joint . getLocalAxisA ( ) ; localAxisA . set ( localAxis . x , localAxis . y ) ; return localAxisA ; } public float getJointTranslation ( ) { return joint . getJointTranslation ( ) ; } public float getJointSpeed ( ) { return joint . getJointSpeed ( ) ; } public boolean isLimitEnabled ( ) { return joint . isLimitEnabled ( ) ; } public void enableLimit ( boolean flag ) { joint . enableLimit ( flag ) ; } public float getLowerLimit ( ) { return joint . getLowerLimit ( ) ; } public float getUpperLimit ( ) { return joint . getUpperLimit ( ) ; } public void setLimits ( float lower , float upper ) { joint . setLimits ( lower , upper ) ; } public boolean isMotorEnabled ( ) { return joint . isMotorEnabled ( ) ; } public void enableMotor ( boolean flag ) { joint . enableMotor ( flag ) ; } public void setMotorSpeed ( float speed ) { joint . setMotorSpeed ( speed ) ; } public float getMotorSpeed ( ) { return joint . getMotorSpeed ( ) ; } public void setMaxMotorForce ( float force ) { joint . setMaxMotorForce ( force ) ; } public float getMotorForce ( float invDt ) { return joint . getMotorForce ( invDt ) ; } public float getMaxMotorForce ( ) { return joint . getMaxMotorForce ( ) ; } public float getReferenceAngle ( ) { return joint . getReferenceAngle ( ) ; } } 

package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashSet ; import java . util . Hashtable ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Platform ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchDelegate ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . core . ILaunchMode ; import org . eclipse . debug . internal . core . IConfigurationElementConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . LaunchConfigurationTabExtension ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . ILaunchConfigurationTabGroup ; import org . eclipse . osgi . util . NLS ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . activities . IWorkbenchActivitySupport ; import org . eclipse . ui . activities . WorkbenchActivityHelper ; public class LaunchConfigurationPresentationManager { private static LaunchConfigurationPresentationManager fgDefault ; private Hashtable < String , Map < Set < String > , LaunchConfigurationTabGroupExtension > > fTabGroupExtensions ; private Hashtable < String , Hashtable < String , LaunchConfigurationTabExtension > > fContributedTabs ; private static Set < String > ALL_MODES = new HashSet < String > ( <int> ) ; static { ALL_MODES . add ( <str> ) ; } private LaunchConfigurationPresentationManager ( ) { fgDefault = this ; } public static LaunchConfigurationPresentationManager getDefault ( ) { if ( fgDefault = = null ) { fgDefault = new LaunchConfigurationPresentationManager ( ) ; } return fgDefault ; } private void initializeTabGroupExtensions ( ) { if ( fTabGroupExtensions = = null ) { fTabGroupExtensions = new Hashtable < String , Map < Set < String > , LaunchConfigurationTabGroupExtension > > ( ) ; IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . EXTENSION_POINT_LAUNCH_CONFIGURATION_TAB_GROUPS ) ; IConfigurationElement [ ] groups = extensionPoint . getConfigurationElements ( ) ; LaunchConfigurationTabGroupExtension group = null ; String typeId = null ; Map < Set < String > , LaunchConfigurationTabGroupExtension > map = null ; List < Set < String > > modes = null ; for ( int i = <int> ; i < groups . length ; i + + ) { group = new LaunchConfigurationTabGroupExtension ( groups [ i ] ) ; typeId = group . getTypeIdentifier ( ) ; map = fTabGroupExtensions . get ( typeId ) ; if ( map = = null ) { map = new Hashtable < Set < String > , LaunchConfigurationTabGroupExtension > ( ) ; fTabGroupExtensions . put ( typeId , map ) ; } modes = group . getModes ( ) ; if ( modes . isEmpty ( ) ) { reportReplacement ( map . put ( ALL_MODES , group ) , group , ALL_MODES ) ; } for ( Set < String > ms : modes ) { reportReplacement ( map . put ( ms , group ) , group , ms ) ; } } } } void reportReplacement ( LaunchConfigurationTabGroupExtension oldext , LaunchConfigurationTabGroupExtension newext , Object mode ) { if ( oldext ! = null ) { Status status = new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , NLS . bind ( LaunchConfigurationsMessages . LaunchConfigurationPresentationManager_0 , new String [ ] { oldext . getIdentifier ( ) , oldext . getTypeIdentifier ( ) , mode . toString ( ) , newext . getIdentifier ( ) } ) ) ; DebugUIPlugin . log ( status ) ; } } private void initializeContributedTabExtensions ( ) { fContributedTabs = new Hashtable < String , Hashtable < String , LaunchConfigurationTabExtension > > ( ) ; IExtensionPoint epoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . EXTENSION_POINT_LAUNCH_TABS ) ; IConfigurationElement [ ] elements = epoint . getConfigurationElements ( ) ; LaunchConfigurationTabExtension tab = null ; Hashtable < String , LaunchConfigurationTabExtension > element = null ; for ( int i = <int> ; i < elements . length ; i + + ) { tab = new LaunchConfigurationTabExtension ( elements [ i ] ) ; element = fContributedTabs . get ( tab . getTabGroupId ( ) ) ; if ( element = = null ) { element = new Hashtable < String , LaunchConfigurationTabExtension > ( ) ; element . put ( tab . getIdentifier ( ) , tab ) ; fContributedTabs . put ( tab . getTabGroupId ( ) , element ) ; } element . put ( tab . getIdentifier ( ) , tab ) ; } } public ILaunchConfigurationTabGroup getTabGroup ( ILaunchConfigurationType type , String mode ) throws CoreException { HashSet < String > modes = new HashSet < String > ( ) ; modes . add ( mode ) ; LaunchConfigurationTabGroupExtension ext = getExtension ( type . getIdentifier ( ) , modes ) ; if ( ext = = null ) { IStatus status = new Status ( IStatus . ERROR , IDebugUIConstants . PLUGIN_ID , IDebugUIConstants . INTERNAL_ERROR , <str> + type . getIdentifier ( ) , null ) ; throw new CoreException ( status ) ; } return new LaunchConfigurationTabGroupWrapper ( ext . newTabGroup ( ) , ext . getIdentifier ( ) , null ) ; } public ILaunchConfigurationTabGroup getTabGroup ( ILaunchConfiguration config , String mode ) throws CoreException { HashSet < String > modes = new HashSet < String > ( ) ; modes . add ( mode ) ; LaunchConfigurationTabGroupExtension ext = getExtension ( config . getType ( ) . getIdentifier ( ) , modes ) ; if ( ext = = null ) { IStatus status = new Status ( IStatus . ERROR , IDebugUIConstants . PLUGIN_ID , IDebugUIConstants . INTERNAL_ERROR , <str> + config . getType ( ) . getIdentifier ( ) , null ) ; throw new CoreException ( status ) ; } return new LaunchConfigurationTabGroupWrapper ( ext . newTabGroup ( ) , ext . getIdentifier ( ) , config ) ; } protected LaunchConfigurationTabExtension [ ] getTabExtensions ( String groupid , ILaunchConfiguration config , String mode ) throws CoreException { initializeContributedTabExtensions ( ) ; Hashtable < String , LaunchConfigurationTabExtension > tabs = fContributedTabs . get ( groupid ) ; if ( tabs ! = null ) { return filterLaunchTabExtensions ( tabs . values ( ) . toArray ( new LaunchConfigurationTabExtension [ tabs . size ( ) ] ) , config , mode ) ; } return new LaunchConfigurationTabExtension [ <int> ] ; } protected LaunchConfigurationTabExtension [ ] filterLaunchTabExtensions ( LaunchConfigurationTabExtension [ ] tabs , ILaunchConfiguration config , String mode ) throws CoreException { IWorkbenchActivitySupport as = PlatformUI . getWorkbench ( ) . getActivitySupport ( ) ; if ( as = = null | | config = = null ) { return tabs ; } HashSet < LaunchConfigurationTabExtension > set = new HashSet < LaunchConfigurationTabExtension > ( ) ; for ( int i = <int> ; i < tabs . length ; i + + ) { if ( ! WorkbenchActivityHelper . filterItem ( new LaunchTabContribution ( tabs [ i ] ) ) ) { Set < String > modes = config . getModes ( ) ; modes . add ( mode ) ; ILaunchDelegate delegate = config . getPreferredDelegate ( modes ) ; if ( delegate = = null ) { delegate = config . getType ( ) . getPreferredDelegate ( modes ) ; } Set < String > delegateSet = tabs [ i ] . getDelegateSet ( ) ; if ( delegate ! = null ) { if ( delegateSet . isEmpty ( ) | | delegateSet . contains ( delegate . getId ( ) ) ) { set . add ( tabs [ i ] ) ; } } else { ILaunchDelegate [ ] delegates = config . getType ( ) . getDelegates ( modes ) ; for ( int j = <int> ; j < delegates . length ; j + + ) { if ( delegateSet . size ( ) = = <int> | | delegateSet . contains ( delegates [ j ] . getId ( ) ) ) { set . add ( tabs [ i ] ) ; } } } } } return set . toArray ( new LaunchConfigurationTabExtension [ set . size ( ) ] ) ; } protected LaunchConfigurationTabGroupExtension getExtension ( String type , Set < String > modes ) { initializeTabGroupExtensions ( ) ; Map < Set < String > , LaunchConfigurationTabGroupExtension > map = fTabGroupExtensions . get ( type ) ; if ( map ! = null ) { LaunchConfigurationTabGroupExtension extension = map . get ( modes ) ; if ( extension = = null ) { extension = map . get ( ALL_MODES ) ; } return extension ; } return null ; } public String getHelpContext ( ILaunchConfigurationType type , String mode ) throws CoreException { HashSet < String > modes = new HashSet < String > ( ) ; modes . add ( mode ) ; LaunchConfigurationTabGroupExtension ext = getExtension ( type . getIdentifier ( ) , modes ) ; if ( ext = = null ) { IStatus status = new Status ( IStatus . ERROR , IDebugUIConstants . PLUGIN_ID , IDebugUIConstants . INTERNAL_ERROR , <str> + type . getIdentifier ( ) , null ) ; throw new CoreException ( status ) ; } return ext . getHelpContextId ( ) ; } public String getDescription ( ILaunchConfigurationType configType , String mode ) { HashSet < String > modes = new HashSet < String > ( ) ; modes . add ( mode ) ; LaunchConfigurationTabGroupExtension extension = getExtension ( configType . getAttribute ( IConfigurationElementConstants . ID ) , modes ) ; return ( extension ! = null ? extension . getDescription ( modes ) : null ) ; } public List < String > getLaunchModeNames ( Set < String > modes ) { List < String > names = new ArrayList < String > ( ) ; ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; for ( String id : modes ) { ILaunchMode mode = manager . getLaunchMode ( id ) ; if ( mode = = null ) { names . add ( id ) ; } else { names . add ( DebugUIPlugin . removeAccelerators ( mode . getLabel ( ) ) ) ; } } Collections . sort ( names ) ; return names ; } public String getLaunchModeLabel ( String modeid ) { String mode = null ; ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; ILaunchMode lmode = manager . getLaunchMode ( modeid ) ; if ( lmode ! = null ) { return lmode . getLabel ( ) ; } return mode ; } } 

package org . elasticsearch . index . similarity ; import org . apache . lucene . search . similarities . AfterEffectL ; import org . apache . lucene . search . similarities . BM25Similarity ; import org . apache . lucene . search . similarities . BasicModelG ; import org . apache . lucene . search . similarities . DFRSimilarity ; import org . apache . lucene . search . similarities . DefaultSimilarity ; import org . apache . lucene . search . similarities . DistributionSPL ; import org . apache . lucene . search . similarities . IBSimilarity ; import org . apache . lucene . search . similarities . LMDirichletSimilarity ; import org . apache . lucene . search . similarities . LMJelinekMercerSimilarity ; import org . apache . lucene . search . similarities . LambdaTTF ; import org . apache . lucene . search . similarities . NormalizationH2 ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . io . IOException ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . instanceOf ; public class SimilarityTests extends ESSingleNodeTestCase { public void testResolveDefaultSimilarities ( ) { SimilarityService similarityService = createIndex ( <str> ) . similarityService ( ) ; assertThat ( similarityService . getSimilarity ( <str> ) . get ( ) , instanceOf ( DefaultSimilarity . class ) ) ; assertThat ( similarityService . getSimilarity ( <str> ) . get ( ) , instanceOf ( BM25Similarity . class ) ) ; } public void testResolveSimilaritiesFromMapping_default ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings indexSettings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , false ) . build ( ) ; IndexService indexService = createIndex ( <str> , indexSettings ) ; DocumentMapper documentMapper = indexService . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) , instanceOf ( DefaultSimilarityProvider . class ) ) ; DefaultSimilarity similarity = ( DefaultSimilarity ) documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) . get ( ) ; assertThat ( similarity . getDiscountOverlaps ( ) , equalTo ( false ) ) ; } public void testResolveSimilaritiesFromMapping_bm25 ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings indexSettings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <float> ) . put ( <str> , <float> ) . put ( <str> , false ) . build ( ) ; IndexService indexService = createIndex ( <str> , indexSettings ) ; DocumentMapper documentMapper = indexService . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) , instanceOf ( BM25SimilarityProvider . class ) ) ; BM25Similarity similarity = ( BM25Similarity ) documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) . get ( ) ; assertThat ( similarity . getK1 ( ) , equalTo ( <float> ) ) ; assertThat ( similarity . getB ( ) , equalTo ( <float> ) ) ; assertThat ( similarity . getDiscountOverlaps ( ) , equalTo ( false ) ) ; } public void testResolveSimilaritiesFromMapping_DFR ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings indexSettings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <float> ) . build ( ) ; IndexService indexService = createIndex ( <str> , indexSettings ) ; DocumentMapper documentMapper = indexService . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) , instanceOf ( DFRSimilarityProvider . class ) ) ; DFRSimilarity similarity = ( DFRSimilarity ) documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) . get ( ) ; assertThat ( similarity . getBasicModel ( ) , instanceOf ( BasicModelG . class ) ) ; assertThat ( similarity . getAfterEffect ( ) , instanceOf ( AfterEffectL . class ) ) ; assertThat ( similarity . getNormalization ( ) , instanceOf ( NormalizationH2 . class ) ) ; assertThat ( ( ( NormalizationH2 ) similarity . getNormalization ( ) ) . getC ( ) , equalTo ( <float> ) ) ; } public void testResolveSimilaritiesFromMapping_IB ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings indexSettings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <float> ) . build ( ) ; IndexService indexService = createIndex ( <str> , indexSettings ) ; DocumentMapper documentMapper = indexService . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) , instanceOf ( IBSimilarityProvider . class ) ) ; IBSimilarity similarity = ( IBSimilarity ) documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) . get ( ) ; assertThat ( similarity . getDistribution ( ) , instanceOf ( DistributionSPL . class ) ) ; assertThat ( similarity . getLambda ( ) , instanceOf ( LambdaTTF . class ) ) ; assertThat ( similarity . getNormalization ( ) , instanceOf ( NormalizationH2 . class ) ) ; assertThat ( ( ( NormalizationH2 ) similarity . getNormalization ( ) ) . getC ( ) , equalTo ( <float> ) ) ; } public void testResolveSimilaritiesFromMapping_LMDirichlet ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings indexSettings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <int> f ) . build ( ) ; IndexService indexService = createIndex ( <str> , indexSettings ) ; DocumentMapper documentMapper = indexService . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) , instanceOf ( LMDirichletSimilarityProvider . class ) ) ; LMDirichletSimilarity similarity = ( LMDirichletSimilarity ) documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) . get ( ) ; assertThat ( similarity . getMu ( ) , equalTo ( <int> f ) ) ; } public void testResolveSimilaritiesFromMapping_LMJelinekMercer ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings indexSettings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <float> ) . build ( ) ; IndexService indexService = createIndex ( <str> , indexSettings ) ; DocumentMapper documentMapper = indexService . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) , instanceOf ( LMJelinekMercerSimilarityProvider . class ) ) ; LMJelinekMercerSimilarity similarity = ( LMJelinekMercerSimilarity ) documentMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . similarity ( ) . get ( ) ; assertThat ( similarity . getLambda ( ) , equalTo ( <float> ) ) ; } } 

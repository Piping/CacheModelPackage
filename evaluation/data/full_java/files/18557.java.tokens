package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . Sprite ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Group ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Image ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Scaling ; import com . badlogic . gdx . utils . viewport . ScalingViewport ; import java . util . Random ; public class StagePerformanceTest extends GdxTest { Texture texture ; TextureRegion [ ] regions ; Stage stage ; SpriteBatch batch ; BitmapFont font ; Sprite [ ] sprites ; boolean useStage = true ; @Override public void create ( ) { batch = new SpriteBatch ( ) ; font = new BitmapFont ( ) ; stage = new Stage ( new ScalingViewport ( Scaling . fit , <int> , <int> ) ) ; regions = new TextureRegion [ <int> * <int> ] ; sprites = new Sprite [ <int> * <int> ] ; texture = new Texture ( Gdx . files . internal ( <str> ) ) ; for ( int y = <int> ; y < <int> ; y + + ) { for ( int x = <int> ; x < <int> ; x + + ) { regions [ x + y * <int> ] = new TextureRegion ( texture , x * <int> , y * <int> , <int> , <int> ) ; } } Random rand = new Random ( ) ; for ( int y = <int> , i = <int> ; y < <int> ; y + + ) { for ( int x = <int> ; x < <int> ; x + + ) { Image img = new Image ( regions [ rand . nextInt ( <int> * <int> ) ] ) ; img . setBounds ( x , y , <int> , <int> ) ; stage . addActor ( img ) ; sprites [ i ] = new Sprite ( regions [ rand . nextInt ( <int> * <int> ) ] ) ; sprites [ i ] . setPosition ( x , y ) ; sprites [ i ] . setSize ( <int> , <int> ) ; i + + ; } } } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; if ( useStage ) { stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . getBatch ( ) . disableBlending ( ) ; Group root = stage . getRoot ( ) ; Array < Actor > actors = root . getChildren ( ) ; stage . draw ( ) ; } else { batch . getProjectionMatrix ( ) . setToOrtho2D ( <int> , <int> , <int> , <int> ) ; batch . getTransformMatrix ( ) . idt ( ) ; batch . disableBlending ( ) ; batch . begin ( ) ; for ( int i = <int> ; i < sprites . length ; i + + ) { sprites [ i ] . draw ( batch ) ; } batch . end ( ) ; } batch . getProjectionMatrix ( ) . setToOrtho2D ( <int> , <int> , <int> , <int> ) ; batch . enableBlending ( ) ; batch . begin ( ) ; font . setColor ( <int> , <int> , <int> , <int> ) ; font . getData ( ) . setScale ( <int> ) ; font . draw ( batch , <str> + Gdx . graphics . getFramesPerSecond ( ) + ( useStage ? <str> : <str> ) , <int> , <int> ) ; batch . end ( ) ; if ( Gdx . input . justTouched ( ) ) { useStage = ! useStage ; } } @Override public void dispose ( ) { stage . dispose ( ) ; batch . dispose ( ) ; font . dispose ( ) ; texture . dispose ( ) ; } } 

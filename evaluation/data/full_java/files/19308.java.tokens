package io . netty . handler . codec . rtsp ; import static org . junit . Assert . assertNotNull ; import static org . junit . Assert . assertTrue ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . http . FullHttpRequest ; import io . netty . handler . codec . http . FullHttpResponse ; import io . netty . handler . codec . http . HttpObject ; import io . netty . handler . codec . http . HttpObjectAggregator ; import org . junit . Test ; public class RtspDecoderTest { @Test public void testReceiveAnnounce ( ) { byte [ ] data1 = ( <str> + <str> + <str> + <str> + <str> + <str> + <str> ) . getBytes ( ) ; byte [ ] data2 = ( <str> + <str> + <str> + <str> + <str> ) . getBytes ( ) ; EmbeddedChannel ch = new EmbeddedChannel ( new RtspDecoder ( ) , new HttpObjectAggregator ( <int> ) ) ; ch . writeInbound ( Unpooled . wrappedBuffer ( data1 ) , Unpooled . wrappedBuffer ( data2 ) ) ; HttpObject res1 = ch . readInbound ( ) ; System . out . println ( res1 ) ; assertNotNull ( res1 ) ; assertTrue ( res1 instanceof FullHttpRequest ) ; ( ( FullHttpRequest ) res1 ) . release ( ) ; HttpObject res2 = ch . readInbound ( ) ; System . out . println ( res2 ) ; assertNotNull ( res2 ) ; assertTrue ( res2 instanceof FullHttpResponse ) ; ( ( FullHttpResponse ) res2 ) . release ( ) ; } } 

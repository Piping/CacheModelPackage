package com . google . common . collect . testing . google ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Lists ; import com . google . common . collect . testing . TestCharacterListGenerator ; import com . google . common . collect . testing . TestListGenerator ; import com . google . common . collect . testing . TestStringListGenerator ; import com . google . common . collect . testing . TestUnhashableCollectionGenerator ; import com . google . common . collect . testing . UnhashableObject ; import com . google . common . primitives . Chars ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; @GwtCompatible public final class ListGenerators { private ListGenerators ( ) { } public static class ImmutableListOfGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { return ImmutableList . copyOf ( elements ) ; } } public static class BuilderAddListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { ImmutableList . Builder < String > builder = ImmutableList . < String > builder ( ) ; for ( String element : elements ) { builder . add ( element ) ; } return builder . build ( ) ; } } public static class BuilderAddAllListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { return ImmutableList . < String > builder ( ) . addAll ( asList ( elements ) ) . build ( ) ; } } public static class BuilderReversedListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { List < String > list = asList ( elements ) ; Collections . reverse ( list ) ; return ImmutableList . copyOf ( list ) . reverse ( ) ; } } public static class ImmutableListHeadSubListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { String [ ] suffix = { <str> , <str> } ; String [ ] all = new String [ elements . length + suffix . length ] ; System . arraycopy ( elements , <int> , all , <int> , elements . length ) ; System . arraycopy ( suffix , <int> , all , elements . length , suffix . length ) ; return ImmutableList . copyOf ( all ) . subList ( <int> , elements . length ) ; } } public static class ImmutableListTailSubListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { String [ ] prefix = { <str> , <str> } ; String [ ] all = new String [ elements . length + prefix . length ] ; System . arraycopy ( prefix , <int> , all , <int> , <int> ) ; System . arraycopy ( elements , <int> , all , <int> , elements . length ) ; return ImmutableList . copyOf ( all ) . subList ( <int> , elements . length + <int> ) ; } } public static class ImmutableListMiddleSubListGenerator extends TestStringListGenerator { @Override protected List < String > create ( String [ ] elements ) { String [ ] prefix = { <str> , <str> } ; String [ ] suffix = { <str> , <str> } ; String [ ] all = new String [ <int> + elements . length + <int> ] ; System . arraycopy ( prefix , <int> , all , <int> , <int> ) ; System . arraycopy ( elements , <int> , all , <int> , elements . length ) ; System . arraycopy ( suffix , <int> , all , <int> + elements . length , <int> ) ; return ImmutableList . copyOf ( all ) . subList ( <int> , elements . length + <int> ) ; } } public static class CharactersOfStringGenerator extends TestCharacterListGenerator { @Override public List < Character > create ( Character [ ] elements ) { char [ ] chars = Chars . toArray ( Arrays . asList ( elements ) ) ; return Lists . charactersOf ( String . copyValueOf ( chars ) ) ; } } public static class CharactersOfCharSequenceGenerator extends TestCharacterListGenerator { @Override public List < Character > create ( Character [ ] elements ) { char [ ] chars = Chars . toArray ( Arrays . asList ( elements ) ) ; StringBuilder str = new StringBuilder ( ) ; str . append ( chars ) ; return Lists . charactersOf ( str ) ; } } private abstract static class TestUnhashableListGenerator extends TestUnhashableCollectionGenerator < List < UnhashableObject > > implements TestListGenerator < UnhashableObject > { } public static class UnhashableElementsImmutableListGenerator extends TestUnhashableListGenerator { @Override public List < UnhashableObject > create ( UnhashableObject [ ] elements ) { return ImmutableList . copyOf ( elements ) ; } } } 

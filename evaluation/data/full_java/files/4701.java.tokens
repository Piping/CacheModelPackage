package org . eclipse . debug . ui . actions ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . debug . core . model . IMemoryBlockRetrieval ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . internal . ui . views . memory . MemoryViewUtil ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . contexts . DebugContextEvent ; import org . eclipse . debug . ui . contexts . IDebugContextListener ; import org . eclipse . debug . ui . memory . IMemoryRenderingType ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IMenuCreator ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . events . MenuAdapter ; import org . eclipse . swt . events . MenuEvent ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Event ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . MenuItem ; import org . eclipse . ui . IActionDelegate2 ; import org . eclipse . ui . IEditorActionDelegate ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . IObjectActionDelegate ; import org . eclipse . ui . IViewActionDelegate ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchWindow ; public class AddMemoryRenderingActionDelegate extends Action implements IViewActionDelegate , IEditorActionDelegate , IObjectActionDelegate , IActionDelegate2 { private IAction fAction ; private IWorkbenchPart fPart ; private ISelection fCurrentSelection ; private IAddMemoryRenderingsTarget fActionDelegate ; private IMenuCreator fMenuCreator ; private IAdaptable fDebugContext ; private IWorkbenchWindow fWindow ; private DebugContextListener fDebugContextListener = new DebugContextListener ( ) ; private class AddMemoryRenderingAction extends Action { private IMemoryRenderingType fRenderingType ; AddMemoryRenderingAction ( IMemoryRenderingType renderingType ) { super ( renderingType . getLabel ( ) ) ; fRenderingType = renderingType ; } @Override public void runWithEvent ( Event event ) { if ( fActionDelegate ! = null ) { try { fActionDelegate . addMemoryRenderings ( fPart , fCurrentSelection , new IMemoryRenderingType [ ] { fRenderingType } ) ; } catch ( CoreException e ) { DebugUIPlugin . errorDialog ( DebugUIPlugin . getShell ( ) , ActionMessages . AddMemoryRenderingActionDelegate_0 , ActionMessages . AddMemoryRenderingActionDelegate_1 , e ) ; } } } } private class AddMemoryRenderingMenuCreator implements IMenuCreator { @Override public void dispose ( ) { } @Override public Menu getMenu ( Control parent ) { return null ; } @Override public Menu getMenu ( Menu parent ) { Menu menu = new Menu ( parent ) ; menu . addMenuListener ( new MenuAdapter ( ) { @Override public void menuShown ( MenuEvent e ) { Menu m = ( Menu ) e . widget ; MenuItem [ ] items = m . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { items [ i ] . dispose ( ) ; } fillMenu ( m ) ; } } ) ; return menu ; } private void fillMenu ( Menu parent ) { if ( fActionDelegate ! = null ) { IMemoryRenderingType [ ] types = fActionDelegate . getMemoryRenderingTypes ( fPart , fCurrentSelection ) ; for ( int i = <int> ; i < types . length ; i + + ) { AddMemoryRenderingAction action = new AddMemoryRenderingAction ( types [ i ] ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( parent , - <int> ) ; } } } } private class DebugContextListener implements IDebugContextListener { private void contextActivated ( ISelection selection ) { setupActionDelegate ( selection ) ; if ( fAction ! = null ) updateAction ( fAction , fCurrentSelection ) ; } @Override public void debugContextChanged ( DebugContextEvent event ) { contextActivated ( event . getContext ( ) ) ; } } private void setupActionDelegate ( ISelection context ) { IAdaptable debugContext = null ; if ( context instanceof IStructuredSelection ) { if ( ( ( IStructuredSelection ) context ) . getFirstElement ( ) instanceof IAdaptable ) debugContext = ( IAdaptable ) ( ( IStructuredSelection ) context ) . getFirstElement ( ) ; } if ( debugContext = = null ) fActionDelegate = null ; if ( debugContext = = fDebugContext ) return ; fDebugContext = debugContext ; if ( fDebugContext = = null ) return ; IMemoryBlockRetrieval retrieval = MemoryViewUtil . getMemoryBlockRetrieval ( fDebugContext ) ; if ( retrieval = = null ) return ; IAddMemoryRenderingsTarget target = null ; if ( fCurrentSelection instanceof IStructuredSelection ) { IStructuredSelection strucSel = ( IStructuredSelection ) fCurrentSelection ; Object obj = strucSel . getFirstElement ( ) ; target = getAddMemoryRenderingTarget ( obj ) ; } if ( target = = null ) { target = getAddMemoryRenderingTarget ( fDebugContext ) ; } if ( target = = null ) { target = getAddMemoryRenderingTarget ( retrieval ) ; } fActionDelegate = target ; } @Override public void init ( IViewPart view ) { bindPart ( view ) ; } @Override public void run ( IAction action ) { } @Override public void selectionChanged ( IAction action , ISelection selection ) { fCurrentSelection = selection ; if ( action ! = null ) { bindAction ( action ) ; updateAction ( action , selection ) ; } } private void updateAction ( IAction action , ISelection selection ) { if ( fActionDelegate ! = null ) { action . setEnabled ( fActionDelegate . canAddMemoryRenderings ( fPart , selection ) ) ; bindAction ( action ) ; } else { action . setEnabled ( false ) ; } } private void bindAction ( IAction action ) { if ( action ! = fAction ) { if ( fMenuCreator = = null ) fMenuCreator = new AddMemoryRenderingMenuCreator ( ) ; action . setMenuCreator ( fMenuCreator ) ; fAction = action ; } } private IAddMemoryRenderingsTarget getAddMemoryRenderingTarget ( Object elmt ) { IAddMemoryRenderingsTarget target = null ; if ( elmt instanceof IAddMemoryRenderingsTarget ) { target = ( IAddMemoryRenderingsTarget ) elmt ; } else if ( elmt instanceof IAdaptable ) { target = ( ( IAdaptable ) elmt ) . getAdapter ( IAddMemoryRenderingsTarget . class ) ; } return target ; } @Override public void setActiveEditor ( IAction action , IEditorPart targetEditor ) { bindPart ( targetEditor ) ; if ( action ! = null ) { bindAction ( action ) ; updateAction ( action , fCurrentSelection ) ; } } @Override public void setActivePart ( IAction action , IWorkbenchPart targetPart ) { bindPart ( targetPart ) ; if ( action ! = null ) { bindAction ( action ) ; updateAction ( action , fCurrentSelection ) ; } } @Override public void init ( IAction action ) { if ( action ! = null ) { bindAction ( action ) ; action . setText ( ActionMessages . AddMemoryRenderingActionDelegate_2 ) ; action . setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_MONITOR_EXPRESSION ) ) ; action . setHoverImageDescriptor ( DebugPluginImages . getImageDescriptor ( IDebugUIConstants . IMG_LCL_ADD ) ) ; action . setDisabledImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_MONITOR_EXPRESSION ) ) ; } } @Override public void dispose ( ) { fAction = null ; fPart = null ; fCurrentSelection = null ; fActionDelegate = null ; bindPart ( null ) ; } @Override public void runWithEvent ( IAction action , Event event ) { } private void bindPart ( IWorkbenchPart part ) { IWorkbenchWindow window = null ; if ( part ! = null ) { window = part . getSite ( ) . getWorkbenchWindow ( ) ; } if ( window ! = fWindow ) { if ( fWindow ! = null ) { DebugUITools . getDebugContextManager ( ) . getContextService ( fWindow ) . removeDebugContextListener ( fDebugContextListener ) ; } if ( window ! = null ) { DebugUITools . getDebugContextManager ( ) . getContextService ( window ) . addDebugContextListener ( fDebugContextListener ) ; } fWindow = window ; } if ( part ! = fPart ) fPart = part ; if ( fWindow ! = null ) setupActionDelegate ( DebugUITools . getDebugContextManager ( ) . getContextService ( fWindow ) . getActiveContext ( ) ) ; } } 

package com . badlogic . gdx . physics . bullet . softbody ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . physics . bullet . dynamics . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btSoftClusterCollisionShape extends btConvexInternalShape { private long swigCPtr ; protected btSoftClusterCollisionShape ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , SoftbodyJNI . btSoftClusterCollisionShape_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btSoftClusterCollisionShape ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( SoftbodyJNI . btSoftClusterCollisionShape_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btSoftClusterCollisionShape obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_btSoftClusterCollisionShape ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setCluster ( btSoftBody . Cluster value ) { SoftbodyJNI . btSoftClusterCollisionShape_cluster_set ( swigCPtr , this , btSoftBody . Cluster . getCPtr ( value ) , value ) ; } public btSoftBody . Cluster getCluster ( ) { long cPtr = SoftbodyJNI . btSoftClusterCollisionShape_cluster_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btSoftBody . Cluster ( cPtr , false ) ; } public btSoftClusterCollisionShape ( btSoftBody . Cluster cluster ) { this ( SoftbodyJNI . new_btSoftClusterCollisionShape ( btSoftBody . Cluster . getCPtr ( cluster ) , cluster ) , true ) ; } public int getShapeType ( ) { return SoftbodyJNI . btSoftClusterCollisionShape_getShapeType ( swigCPtr , this ) ; } } 

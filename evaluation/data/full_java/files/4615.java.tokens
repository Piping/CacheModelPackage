package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . math . BigInteger ; import java . util . ArrayList ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . debug . core . model . MemoryByte ; public class MemorySegment extends PlatformObject { private BigInteger fAddress ; private BigInteger fEndAddress ; private MemoryByte [ ] fBytes ; private int fNumAddressableUnits ; public MemorySegment ( BigInteger address , MemoryByte [ ] bytes , int numAddressableUnits ) { fAddress = address ; fBytes = bytes ; fNumAddressableUnits = numAddressableUnits ; } public BigInteger getAddress ( ) { return fAddress ; } public MemoryByte [ ] getBytes ( ) { return fBytes ; } public int getNumAddressableUnits ( ) { return fNumAddressableUnits ; } public boolean containsAddress ( BigInteger address ) { if ( getAddress ( ) . compareTo ( address ) < = <int> & & getEndAddress ( ) . compareTo ( address ) > = <int> ) return true ; return false ; } public BigInteger getEndAddress ( ) { if ( fEndAddress = = null ) { fEndAddress = fAddress . add ( BigInteger . valueOf ( fNumAddressableUnits ) . subtract ( BigInteger . ONE ) ) ; } return fEndAddress ; } public MemoryByte [ ] getBytes ( int start , int length ) { if ( start < <int> ) return new MemoryByte [ <int> ] ; if ( start + length > fBytes . length ) return new MemoryByte [ <int> ] ; ArrayList < MemoryByte > ret = new ArrayList < MemoryByte > ( ) ; for ( int i = start ; i < start + length ; i + + ) { ret . add ( fBytes [ i ] ) ; } return ret . toArray ( new MemoryByte [ ret . size ( ) ] ) ; } } 

package org . elasticsearch . rest . action . suggest ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestRequest . Method . POST ; import static org . elasticsearch . rest . action . support . RestActions . buildBroadcastShardsHeader ; import org . elasticsearch . action . suggest . SuggestRequest ; import org . elasticsearch . action . suggest . SuggestResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . BaseRestHandler ; import org . elasticsearch . rest . BytesRestResponse ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . RestResponse ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import org . elasticsearch . search . suggest . Suggest ; public class RestSuggestAction extends BaseRestHandler { @Inject public RestSuggestAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { SuggestRequest suggestRequest = new SuggestRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; suggestRequest . indicesOptions ( IndicesOptions . fromRequest ( request , suggestRequest . indicesOptions ( ) ) ) ; if ( RestActions . hasBodyContent ( request ) ) { suggestRequest . suggest ( RestActions . getRestContent ( request ) ) ; } else { throw new IllegalArgumentException ( <str> ) ; } suggestRequest . routing ( request . param ( <str> ) ) ; suggestRequest . preference ( request . param ( <str> ) ) ; client . suggest ( suggestRequest , new RestBuilderListener < SuggestResponse > ( channel ) { @Override public RestResponse buildResponse ( SuggestResponse response , XContentBuilder builder ) throws Exception { RestStatus restStatus = RestStatus . status ( response . getSuccessfulShards ( ) , response . getTotalShards ( ) , response . getShardFailures ( ) ) ; builder . startObject ( ) ; buildBroadcastShardsHeader ( builder , request , response ) ; Suggest suggest = response . getSuggest ( ) ; if ( suggest ! = null ) { suggest . toXContent ( builder , request ) ; } builder . endObject ( ) ; return new BytesRestResponse ( restStatus , builder ) ; } } ) ; } } 

package org . gradle . model . internal . type ; import com . google . common . collect . ImmutableList ; import java . lang . reflect . Type ; import java . lang . reflect . WildcardType ; import java . util . Arrays ; class WildcardTypeWrapper implements WildcardType , TypeWrapper { private final TypeWrapper [ ] upperBounds ; private final TypeWrapper [ ] lowerBounds ; private final int hashCode ; public WildcardTypeWrapper ( TypeWrapper [ ] upperBounds , TypeWrapper [ ] lowerBounds , int hashCode ) { this . upperBounds = upperBounds ; this . lowerBounds = lowerBounds ; this . hashCode = hashCode ; } @Override public Type [ ] getUpperBounds ( ) { return ModelType . unwrap ( upperBounds ) ; } @Override public Type [ ] getLowerBounds ( ) { return ModelType . unwrap ( lowerBounds ) ; } @Override public Type unwrap ( ) { return this ; } @Override public void collectClasses ( ImmutableList . Builder < Class < ? > > builder ) { for ( TypeWrapper upperBound : upperBounds ) { upperBound . collectClasses ( builder ) ; } for ( TypeWrapper lowerBound : lowerBounds ) { lowerBound . collectClasses ( builder ) ; } } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof WildcardType ) ) { return false ; } else { WildcardType var2 = ( WildcardType ) o ; return Arrays . equals ( this . getLowerBounds ( ) , var2 . getLowerBounds ( ) ) & & Arrays . equals ( this . getUpperBounds ( ) , var2 . getUpperBounds ( ) ) ; } } @Override public int hashCode ( ) { return hashCode ; } @Override public String toString ( ) { return getRepresentation ( true ) ; } @Override public String getRepresentation ( boolean full ) { TypeWrapper [ ] bounds = lowerBounds ; StringBuilder sb = new StringBuilder ( ) ; if ( lowerBounds . length > <int> ) { sb . append ( <str> ) ; } else { Type [ ] upperBounds = getUpperBounds ( ) ; if ( upperBounds . length > <int> & & ! upperBounds [ <int> ] . equals ( Object . class ) ) { bounds = this . upperBounds ; sb . append ( <str> ) ; } else { return <str> ; } } assert bounds . length > <int> ; boolean first = true ; for ( TypeWrapper bound : bounds ) { if ( ! first ) { sb . append ( <str> ) ; } first = false ; sb . append ( bound . getRepresentation ( full ) ) ; } return sb . toString ( ) ; } } 

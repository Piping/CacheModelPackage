package org . gradle . initialization ; import org . gradle . api . internal . ClassPathRegistry ; import org . gradle . internal . classloader . * ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . internal . classpath . DefaultClassPath ; import org . gradle . internal . jvm . Jvm ; import java . io . File ; import java . net . URLClassLoader ; public class DefaultClassLoaderRegistry implements ClassLoaderRegistry , JdkToolsInitializer { private final ClassLoader apiOnlyClassLoader ; private final ClassLoader apiAndPluginsClassLoader ; private final ClassLoader extensionsClassLoader ; private final ClassLoaderFactory classLoaderFactory ; public DefaultClassLoaderRegistry ( ClassPathRegistry classPathRegistry , ClassLoaderFactory classLoaderFactory ) { this . classLoaderFactory = classLoaderFactory ; ClassLoader runtimeClassLoader = getClass ( ) . getClassLoader ( ) ; apiOnlyClassLoader = restrictToGradleApi ( runtimeClassLoader ) ; ClassPath pluginsClassPath = classPathRegistry . getClassPath ( <str> ) ; extensionsClassLoader = new MutableURLClassLoader ( runtimeClassLoader , pluginsClassPath ) ; this . apiAndPluginsClassLoader = restrictToGradleApi ( extensionsClassLoader ) ; } private ClassLoader restrictToGradleApi ( ClassLoader classLoader ) { FilteringClassLoader rootClassLoader = classLoaderFactory . createFilteringClassLoader ( classLoader ) ; rootClassLoader . allowPackage ( <str> ) ; rootClassLoader . allowResources ( <str> ) ; rootClassLoader . allowPackage ( <str> ) ; rootClassLoader . allowPackage ( <str> ) ; rootClassLoader . allowPackage ( <str> ) ; rootClassLoader . allowPackage ( <str> ) ; rootClassLoader . allowPackage ( <str> ) ; rootClassLoader . allowPackage ( <str> ) ; rootClassLoader . allowPackage ( <str> ) ; rootClassLoader . allowPackage ( <str> ) ; return new CachingClassLoader ( rootClassLoader ) ; } public void initializeJdkTools ( ) { File toolsJar = Jvm . current ( ) . getToolsJar ( ) ; if ( toolsJar ! = null ) { final ClassLoader systemClassLoaderParent = classLoaderFactory . getIsolatedSystemClassLoader ( ) ; ClasspathUtil . addUrl ( ( URLClassLoader ) systemClassLoaderParent , new DefaultClassPath ( toolsJar ) . getAsURLs ( ) ) ; } } public ClassLoader getRuntimeClassLoader ( ) { return getClass ( ) . getClassLoader ( ) ; } public ClassLoader getGradleApiClassLoader ( ) { return apiAndPluginsClassLoader ; } public ClassLoader getPluginsClassLoader ( ) { return extensionsClassLoader ; } public ClassLoader getGradleCoreApiClassLoader ( ) { return apiOnlyClassLoader ; } } 

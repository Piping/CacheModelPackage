package org . gradle . cache . internal . filelock ; import org . gradle . api . Nullable ; import org . gradle . internal . io . RandomAccessFileInputStream ; import org . gradle . internal . io . RandomAccessFileOutputStream ; import java . io . * ; import java . nio . channels . FileLock ; public class LockInfoAccess { public static final int INFORMATION_REGION_SIZE = <int> ; private final LockInfoSerializer lockInfoSerializer = new LockInfoSerializer ( ) ; private final long infoRegionPos ; public LockInfoAccess ( long infoRegionPos ) { this . infoRegionPos = infoRegionPos ; } public LockInfo readLockInfo ( RandomAccessFile lockFileAccess ) throws IOException { if ( lockFileAccess . length ( ) < = infoRegionPos ) { return new LockInfo ( ) ; } else { lockFileAccess . seek ( infoRegionPos ) ; DataInputStream inputStream = new DataInputStream ( new BufferedInputStream ( new RandomAccessFileInputStream ( lockFileAccess ) ) ) ; byte protocolVersion = inputStream . readByte ( ) ; if ( protocolVersion ! = lockInfoSerializer . getVersion ( ) ) { throw new IllegalStateException ( String . format ( <str> , lockInfoSerializer . getVersion ( ) , protocolVersion ) ) ; } return lockInfoSerializer . read ( inputStream ) ; } } public void writeLockInfo ( RandomAccessFile lockFileAccess , LockInfo lockInfo ) throws IOException { lockFileAccess . seek ( infoRegionPos ) ; DataOutputStream outstr = new DataOutputStream ( new BufferedOutputStream ( new RandomAccessFileOutputStream ( lockFileAccess ) ) ) ; outstr . writeByte ( lockInfoSerializer . getVersion ( ) ) ; lockInfoSerializer . write ( outstr , lockInfo ) ; outstr . flush ( ) ; lockFileAccess . setLength ( lockFileAccess . getFilePointer ( ) ) ; } public void clearLockInfo ( RandomAccessFile lockFileAccess ) throws IOException { lockFileAccess . setLength ( Math . min ( lockFileAccess . length ( ) , infoRegionPos ) ) ; } @Nullable public FileLock tryLock ( RandomAccessFile lockFileAccess , boolean shared ) throws IOException { return lockFileAccess . getChannel ( ) . tryLock ( infoRegionPos , INFORMATION_REGION_SIZE - infoRegionPos , shared ) ; } } 

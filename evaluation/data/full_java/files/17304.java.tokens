package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btCollisionObjectWrapper extends BulletBase { private long swigCPtr ; protected btCollisionObjectWrapper ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btCollisionObjectWrapper ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btCollisionObjectWrapper obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; throw new UnsupportedOperationException ( <str> ) ; } swigCPtr = <int> ; } super . delete ( ) ; } protected final static btCollisionObjectWrapper temp = new btCollisionObjectWrapper ( <int> , false ) ; public static btCollisionObjectWrapper internalTemp ( long cPtr , boolean own ) { temp . reset ( cPtr , own ) ; return temp ; } private static btCollisionObjectWrapper [ ] argumentInstances = new btCollisionObjectWrapper [ ] { new btCollisionObjectWrapper ( <int> , false ) , new btCollisionObjectWrapper ( <int> , false ) , new btCollisionObjectWrapper ( <int> , false ) , new btCollisionObjectWrapper ( <int> , false ) } ; private static int argumentIndex = - <int> ; protected static btCollisionObjectWrapper obtainForArgument ( final long swigCPtr , boolean owner ) { btCollisionObjectWrapper instance = argumentInstances [ argumentIndex = ( argumentIndex + <int> ) & <int> ] ; instance . reset ( swigCPtr , owner ) ; return instance ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } public void setParent ( btCollisionObjectWrapper value ) { CollisionJNI . btCollisionObjectWrapper_parent_set ( swigCPtr , this , btCollisionObjectWrapper . getCPtr ( value ) , value ) ; } public btCollisionObjectWrapper getParent ( ) { return btCollisionObjectWrapper . internalTemp ( CollisionJNI . btCollisionObjectWrapper_parent_get ( swigCPtr , this ) , false ) ; } public void setShape ( btCollisionShape value ) { CollisionJNI . btCollisionObjectWrapper_shape_set ( swigCPtr , this , btCollisionShape . getCPtr ( value ) , value ) ; } public btCollisionShape getShape ( ) { long cPtr = CollisionJNI . btCollisionObjectWrapper_shape_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : btCollisionShape . newDerivedObject ( cPtr , false ) ; } public void setCollisionObject ( btCollisionObject value ) { CollisionJNI . btCollisionObjectWrapper_collisionObject_set ( swigCPtr , this , btCollisionObject . getCPtr ( value ) , value ) ; } public btCollisionObject getCollisionObject ( ) { return btCollisionObject . getInstance ( CollisionJNI . btCollisionObjectWrapper_collisionObject_get ( swigCPtr , this ) , false ) ; } public Matrix4 getWorldTransform ( ) { return CollisionJNI . btCollisionObjectWrapper_worldTransform_get ( swigCPtr , this ) ; } public void setPartId ( int value ) { CollisionJNI . btCollisionObjectWrapper_partId_set ( swigCPtr , this , value ) ; } public int getPartId ( ) { return CollisionJNI . btCollisionObjectWrapper_partId_get ( swigCPtr , this ) ; } public void setIndex ( int value ) { CollisionJNI . btCollisionObjectWrapper_index_set ( swigCPtr , this , value ) ; } public int getIndex ( ) { return CollisionJNI . btCollisionObjectWrapper_index_get ( swigCPtr , this ) ; } public btCollisionShape getCollisionShape ( ) { long cPtr = CollisionJNI . btCollisionObjectWrapper_getCollisionShape ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : btCollisionShape . newDerivedObject ( cPtr , false ) ; } } 

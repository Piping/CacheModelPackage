package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . core . StopAnalyzer ; import org . apache . lucene . analysis . util . CharArraySet ; import org . elasticsearch . Version ; import org . elasticsearch . common . regex . Regex ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import java . util . regex . Pattern ; public class PatternAnalyzerProvider extends AbstractIndexAnalyzerProvider < Analyzer > { private final PatternAnalyzer analyzer ; public PatternAnalyzerProvider ( IndexSettings indexSettings , Environment env , String name , Settings settings ) { super ( indexSettings , name , settings ) ; Version esVersion = indexSettings . getIndexVersionCreated ( ) ; final CharArraySet defaultStopwords ; if ( esVersion . onOrAfter ( Version . V_1_0_0_RC1 ) ) { defaultStopwords = CharArraySet . EMPTY_SET ; } else { defaultStopwords = StopAnalyzer . ENGLISH_STOP_WORDS_SET ; } boolean lowercase = settings . getAsBoolean ( <str> , true ) ; CharArraySet stopWords = Analysis . parseStopWords ( env , settings , defaultStopwords ) ; String sPattern = settings . get ( <str> , <str> ) ; if ( sPattern = = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } Pattern pattern = Regex . compile ( sPattern , settings . get ( <str> ) ) ; analyzer = new PatternAnalyzer ( pattern , lowercase , stopWords ) ; } @Override public PatternAnalyzer get ( ) { return analyzer ; } } 

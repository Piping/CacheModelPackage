package org . elasticsearch . rest . action . admin . cluster . settings ; import org . elasticsearch . action . admin . cluster . settings . ClusterUpdateSettingsRequest ; import org . elasticsearch . action . admin . cluster . settings . ClusterUpdateSettingsResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . Requests ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; import java . io . IOException ; import java . util . Map ; public class RestClusterUpdateSettingsAction extends BaseRestHandler { @Inject public RestClusterUpdateSettingsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( RestRequest . Method . PUT , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws Exception { final ClusterUpdateSettingsRequest clusterUpdateSettingsRequest = Requests . clusterUpdateSettingsRequest ( ) ; clusterUpdateSettingsRequest . timeout ( request . paramAsTime ( <str> , clusterUpdateSettingsRequest . timeout ( ) ) ) ; clusterUpdateSettingsRequest . masterNodeTimeout ( request . paramAsTime ( <str> , clusterUpdateSettingsRequest . masterNodeTimeout ( ) ) ) ; Map < String , Object > source ; try ( XContentParser parser = XContentFactory . xContent ( request . content ( ) ) . createParser ( request . content ( ) ) ) { source = parser . map ( ) ; } if ( source . containsKey ( <str> ) ) { clusterUpdateSettingsRequest . transientSettings ( ( Map ) source . get ( <str> ) ) ; } if ( source . containsKey ( <str> ) ) { clusterUpdateSettingsRequest . persistentSettings ( ( Map ) source . get ( <str> ) ) ; } client . admin ( ) . cluster ( ) . updateSettings ( clusterUpdateSettingsRequest , new AcknowledgedRestListener < ClusterUpdateSettingsResponse > ( channel ) { @Override protected void addCustomFields ( XContentBuilder builder , ClusterUpdateSettingsResponse response ) throws IOException { builder . startObject ( <str> ) ; response . getPersistentSettings ( ) . toXContent ( builder , request ) ; builder . endObject ( ) ; builder . startObject ( <str> ) ; response . getTransientSettings ( ) . toXContent ( builder , request ) ; builder . endObject ( ) ; } } ) ; } } 

package org . gradle . play . internal . run ; import org . gradle . BuildAdapter ; import org . gradle . BuildResult ; import org . gradle . api . invocation . Gradle ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . deployment . internal . DeploymentHandle ; public class PlayApplicationDeploymentHandle implements DeploymentHandle { private static final Logger LOGGER = Logging . getLogger ( PlayApplicationDeploymentHandle . class ) ; private PlayApplicationRunnerToken runnerToken ; private final String id ; public PlayApplicationDeploymentHandle ( String id ) { this . id = id ; } public void start ( PlayApplicationRunnerToken runnerToken ) { this . runnerToken = runnerToken ; } @Override public boolean isRunning ( ) { return runnerToken ! = null & & runnerToken . isRunning ( ) ; } @Override public void onNewBuild ( Gradle gradle ) { gradle . addBuildListener ( new BuildAdapter ( ) { @Override public void buildFinished ( BuildResult result ) { reloadFromResult ( result ) ; } } ) ; } void reloadFromResult ( BuildResult result ) { if ( isRunning ( ) ) { Throwable failure = result . getFailure ( ) ; if ( failure ! = null ) { runnerToken . rebuildFailure ( failure ) ; } else { runnerToken . rebuildSuccess ( ) ; } } } @Override public void stop ( ) { if ( isRunning ( ) ) { LOGGER . info ( <str> , id ) ; runnerToken . stop ( ) ; } } } 

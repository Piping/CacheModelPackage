package org . gradle . api . publish . ivy . tasks ; import org . gradle . api . DefaultTask ; import org . gradle . api . Incubating ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . repositories . IvyArtifactRepository ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . artifacts . repositories . PublicationAwareRepository ; import org . gradle . api . publish . internal . PublishOperation ; import org . gradle . api . publish . ivy . IvyPublication ; import org . gradle . api . publish . ivy . internal . publication . IvyPublicationInternal ; import org . gradle . api . publish . ivy . internal . publisher . IvyNormalizedPublication ; import org . gradle . api . publish . ivy . internal . publisher . IvyPublisher ; import org . gradle . api . tasks . TaskAction ; import org . gradle . internal . Cast ; import javax . inject . Inject ; import java . util . concurrent . Callable ; @Incubating public class PublishToIvyRepository extends DefaultTask { private IvyPublicationInternal publication ; private IvyArtifactRepository repository ; public PublishToIvyRepository ( ) { getInputs ( ) . files ( new Callable < FileCollection > ( ) { public FileCollection call ( ) throws Exception { IvyPublicationInternal publicationInternal = getPublicationInternal ( ) ; return publicationInternal = = null ? null : publicationInternal . getPublishableFiles ( ) ; } } ) ; } public IvyPublication getPublication ( ) { return publication ; } public void setPublication ( IvyPublication publication ) { this . publication = toPublicationInternal ( publication ) ; } private IvyPublicationInternal getPublicationInternal ( ) { return toPublicationInternal ( getPublication ( ) ) ; } private static IvyPublicationInternal toPublicationInternal ( IvyPublication publication ) { if ( publication = = null ) { return null ; } else if ( publication instanceof IvyPublicationInternal ) { return ( IvyPublicationInternal ) publication ; } else { throw new InvalidUserDataException ( String . format ( <str> , IvyPublicationInternal . class . getName ( ) , publication . getClass ( ) . getName ( ) ) ) ; } } public IvyArtifactRepository getRepository ( ) { return repository ; } public void setRepository ( IvyArtifactRepository repository ) { this . repository = repository ; } @TaskAction public void publish ( ) { IvyPublicationInternal publicationInternal = getPublicationInternal ( ) ; if ( publicationInternal = = null ) { throw new InvalidUserDataException ( <str> ) ; } IvyArtifactRepository repository = getRepository ( ) ; if ( repository = = null ) { throw new InvalidUserDataException ( <str> ) ; } doPublish ( publicationInternal , repository ) ; } @Inject protected IvyPublisher getIvyPublisher ( ) { throw new UnsupportedOperationException ( ) ; } private void doPublish ( final IvyPublicationInternal publication , final IvyArtifactRepository repository ) { new PublishOperation ( publication , repository . getName ( ) ) { @Override protected void publish ( ) throws Exception { IvyNormalizedPublication normalizedPublication = publication . asNormalisedPublication ( ) ; IvyPublisher publisher = getIvyPublisher ( ) ; publisher . publish ( normalizedPublication , Cast . cast ( PublicationAwareRepository . class , repository ) ) ; } } . run ( ) ; } } 

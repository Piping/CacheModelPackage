package org . nd4j . linalg . shape . concat ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import java . util . Arrays ; public class ConcatTestsC extends BaseNd4jTest { public ConcatTestsC ( ) { } public ConcatTestsC ( String name ) { super ( name ) ; } public ConcatTestsC ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public ConcatTestsC ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testConcatVertically ( ) { INDArray rowVector = Nd4j . ones ( <int> ) ; INDArray other = Nd4j . ones ( <int> ) ; INDArray concat = Nd4j . vstack ( other , rowVector ) ; assertEquals ( rowVector . rows ( ) * <int> , concat . rows ( ) ) ; assertEquals ( rowVector . columns ( ) , concat . columns ( ) ) ; INDArray arr2 = Nd4j . create ( <int> , <int> ) ; INDArray slice1 = arr2 . slice ( <int> ) ; INDArray slice2 = arr2 . slice ( <int> ) ; INDArray arr3 = Nd4j . create ( <int> , <int> ) ; INDArray vstack = Nd4j . vstack ( slice1 , slice2 ) ; assertEquals ( arr3 , vstack ) ; INDArray col1 = arr2 . getColumn ( <int> ) ; INDArray col2 = arr2 . getColumn ( <int> ) ; INDArray vstacked = Nd4j . vstack ( col1 , col2 ) ; assertEquals ( Nd4j . create ( <int> , <int> ) , vstacked ) ; } @Test public void testConcatScalars ( ) { INDArray first = Nd4j . arange ( <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray second = Nd4j . arange ( <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray firstRet = Nd4j . concat ( <int> , first , second ) ; assertTrue ( firstRet . isColumnVector ( ) ) ; INDArray secondRet = Nd4j . concat ( <int> , first , second ) ; assertTrue ( secondRet . isRowVector ( ) ) ; } @Test public void testConcatMatrices ( ) { INDArray a = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray b = a . dup ( ) ; INDArray concat1 = Nd4j . concat ( <int> , a , b ) ; INDArray oneAssertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> , <int> , <int> } , { <int> , <int> , <int> , <int> } } ) ; assertEquals ( oneAssertion , concat1 ) ; INDArray concat = Nd4j . concat ( <int> , a , b ) ; INDArray zeroAssertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } , { <int> , <int> } , { <int> , <int> } } ) ; assertEquals ( zeroAssertion , concat ) ; } @Test public void testAssign ( ) { INDArray vector = Nd4j . linspace ( <int> , <int> , <int> ) ; vector . assign ( <int> ) ; assertEquals ( Nd4j . ones ( <int> ) , vector ) ; INDArray twos = Nd4j . ones ( <int> , <int> ) ; INDArray rand = Nd4j . rand ( <int> , <int> ) ; twos . assign ( rand ) ; assertEquals ( rand , twos ) ; INDArray tensor = Nd4j . rand ( ( long ) <int> , <int> , <int> , <int> ) ; INDArray ones = Nd4j . ones ( <int> , <int> , <int> ) ; assertTrue ( Arrays . equals ( tensor . shape ( ) , ones . shape ( ) ) ) ; ones . assign ( tensor ) ; assertEquals ( tensor , ones ) ; } @Test public void testConcatColVectorAndMatrix ( ) { INDArray colVector = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray matrix = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray assertion = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray concat = Nd4j . vstack ( colVector , matrix ) ; assertEquals ( assertion , concat ) ; } @Test public void testConcatRowVectorAndMatrix ( ) { INDArray rowVector = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray matrix = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray assertion = Nd4j . create ( new double [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , new int [ ] { <int> , <int> } ) ; INDArray concat = Nd4j . hstack ( rowVector , matrix ) ; assertEquals ( assertion , concat ) ; } @Override public char ordering ( ) { return <str> ; } } 

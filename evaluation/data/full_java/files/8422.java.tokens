package org . elasticsearch . script ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . Collection ; import java . util . Map ; import java . util . concurrent . ExecutionException ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class ScriptFieldIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( CustomScriptPlugin . class ) ; } static int [ ] intArray = { Integer . MAX_VALUE , Integer . MIN_VALUE , <int> } ; static long [ ] longArray = { Long . MAX_VALUE , Long . MIN_VALUE , <int> } ; static float [ ] floatArray = { Float . MAX_VALUE , Float . MIN_VALUE , <float> } ; static double [ ] doubleArray = { Double . MAX_VALUE , Double . MIN_VALUE , <float> } ; public void testNativeScript ( ) throws InterruptedException , ExecutionException { indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; client ( ) . admin ( ) . indices ( ) . prepareFlush ( <str> ) . execute ( ) . actionGet ( ) ; SearchResponse sr = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addScriptField ( <str> , new Script ( <str> , ScriptType . INLINE , <str> , null ) ) . addScriptField ( <str> , new Script ( <str> , ScriptType . INLINE , <str> , null ) ) . addScriptField ( <str> , new Script ( <str> , ScriptType . INLINE , <str> , null ) ) . addScriptField ( <str> , new Script ( <str> , ScriptType . INLINE , <str> , null ) ) . execute ( ) . actionGet ( ) ; assertThat ( sr . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : sr . getHits ( ) . getHits ( ) ) { Object result = hit . getFields ( ) . get ( <str> ) . getValues ( ) . get ( <int> ) ; assertThat ( result , equalTo ( ( Object ) intArray ) ) ; result = hit . getFields ( ) . get ( <str> ) . getValues ( ) . get ( <int> ) ; assertThat ( result , equalTo ( ( Object ) longArray ) ) ; result = hit . getFields ( ) . get ( <str> ) . getValues ( ) . get ( <int> ) ; assertThat ( result , equalTo ( ( Object ) floatArray ) ) ; result = hit . getFields ( ) . get ( <str> ) . getValues ( ) . get ( <int> ) ; assertThat ( result , equalTo ( ( Object ) doubleArray ) ) ; } } public static class IntArrayScriptFactory implements NativeScriptFactory { @Override public ExecutableScript newScript ( @Nullable Map < String , Object > params ) { return new IntScript ( ) ; } @Override public boolean needsScores ( ) { return false ; } } static class IntScript extends AbstractSearchScript { @Override public Object run ( ) { return intArray ; } } public static class LongArrayScriptFactory implements NativeScriptFactory { @Override public ExecutableScript newScript ( @Nullable Map < String , Object > params ) { return new LongScript ( ) ; } @Override public boolean needsScores ( ) { return false ; } } static class LongScript extends AbstractSearchScript { @Override public Object run ( ) { return longArray ; } } public static class FloatArrayScriptFactory implements NativeScriptFactory { @Override public ExecutableScript newScript ( @Nullable Map < String , Object > params ) { return new FloatScript ( ) ; } @Override public boolean needsScores ( ) { return false ; } } static class FloatScript extends AbstractSearchScript { @Override public Object run ( ) { return floatArray ; } } public static class DoubleArrayScriptFactory implements NativeScriptFactory { @Override public ExecutableScript newScript ( @Nullable Map < String , Object > params ) { return new DoubleScript ( ) ; } @Override public boolean needsScores ( ) { return false ; } } static class DoubleScript extends AbstractSearchScript { @Override public Object run ( ) { return doubleArray ; } } public static class CustomScriptPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( ScriptModule scriptModule ) { scriptModule . registerScript ( <str> , IntArrayScriptFactory . class ) ; scriptModule . registerScript ( <str> , LongArrayScriptFactory . class ) ; scriptModule . registerScript ( <str> , FloatArrayScriptFactory . class ) ; scriptModule . registerScript ( <str> , DoubleArrayScriptFactory . class ) ; } } } 

package org . gradle . plugins . javascript . coffeescript ; import groovy . lang . Closure ; import org . gradle . api . Action ; import org . gradle . api . file . FileCollection ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . tasks . InputFiles ; import org . gradle . api . tasks . OutputDirectory ; import org . gradle . api . tasks . SourceTask ; import org . gradle . api . tasks . TaskAction ; import org . gradle . internal . Factory ; import org . gradle . plugins . javascript . coffeescript . compile . internal . DefaultCoffeeScriptCompileSpec ; import org . gradle . plugins . javascript . coffeescript . compile . internal . rhino . RhinoCoffeeScriptCompiler ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorkerHandleFactory ; import org . gradle . plugins . javascript . rhino . worker . internal . DefaultRhinoWorkerHandleFactory ; import org . gradle . process . internal . WorkerProcessBuilder ; import javax . inject . Inject ; import java . io . File ; public class CoffeeScriptCompile extends SourceTask { private Object coffeeScriptJs ; private Object destinationDir ; private Object rhinoClasspath ; private CoffeeScriptCompileOptions options = new CoffeeScriptCompileOptions ( ) ; @Inject protected Factory < WorkerProcessBuilder > getWorkerProcessBuilderFactory ( ) { throw new UnsupportedOperationException ( ) ; } @InputFiles public FileCollection getCoffeeScriptJs ( ) { return getProject ( ) . files ( coffeeScriptJs ) ; } public void setCoffeeScriptJs ( Object coffeeScriptJs ) { this . coffeeScriptJs = coffeeScriptJs ; } @InputFiles public FileCollection getRhinoClasspath ( ) { return getProject ( ) . files ( rhinoClasspath ) ; } public void setRhinoClasspath ( Object rhinoClasspath ) { this . rhinoClasspath = rhinoClasspath ; } @OutputDirectory public File getDestinationDir ( ) { return getProject ( ) . file ( destinationDir ) ; } public void setDestinationDir ( Object destinationDir ) { this . destinationDir = destinationDir ; } public CoffeeScriptCompileOptions getOptions ( ) { return options ; } public void options ( Action < CoffeeScriptCompileOptions > action ) { action . execute ( getOptions ( ) ) ; } public void options ( Closure < ? > closure ) { getProject ( ) . configure ( getOptions ( ) , closure ) ; } @TaskAction public void doCompile ( ) { RhinoWorkerHandleFactory handleFactory = new DefaultRhinoWorkerHandleFactory ( getWorkerProcessBuilderFactory ( ) ) ; CoffeeScriptCompileSpec spec = new DefaultCoffeeScriptCompileSpec ( ) ; spec . setCoffeeScriptJs ( getCoffeeScriptJs ( ) . getSingleFile ( ) ) ; spec . setDestinationDir ( getDestinationDir ( ) ) ; spec . setSource ( getSource ( ) ) ; spec . setOptions ( getOptions ( ) ) ; LogLevel logLevel = getProject ( ) . getGradle ( ) . getStartParameter ( ) . getLogLevel ( ) ; CoffeeScriptCompiler compiler = new RhinoCoffeeScriptCompiler ( handleFactory , getRhinoClasspath ( ) , logLevel , getProject ( ) . getProjectDir ( ) ) ; setDidWork ( compiler . compile ( spec ) . getDidWork ( ) ) ; } } 

package org . elasticsearch . common . settings ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . regex . Regex ; import org . elasticsearch . common . xcontent . ToXContent . Params ; import org . elasticsearch . rest . RestRequest ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . concurrent . CopyOnWriteArrayList ; public final class SettingsFilter extends AbstractComponent { public static String SETTINGS_FILTER_PARAM = <str> ; private final CopyOnWriteArrayList < String > patterns = new CopyOnWriteArrayList < > ( ) ; public SettingsFilter ( Settings settings ) { super ( settings ) ; } public void addFilter ( String pattern ) { patterns . add ( pattern ) ; } public void removeFilter ( String pattern ) { patterns . remove ( pattern ) ; } public String getPatterns ( ) { return Strings . collectionToDelimitedString ( patterns , <str> ) ; } public void addFilterSettingParams ( RestRequest request ) { if ( patterns . isEmpty ( ) = = false ) { request . params ( ) . put ( SETTINGS_FILTER_PARAM , getPatterns ( ) ) ; } } public static Settings filterSettings ( Params params , Settings settings ) { String patterns = params . param ( SETTINGS_FILTER_PARAM ) ; Settings filteredSettings = settings ; if ( patterns ! = null & & patterns . isEmpty ( ) = = false ) { filteredSettings = SettingsFilter . filterSettings ( patterns , filteredSettings ) ; } return filteredSettings ; } public static Settings filterSettings ( String patterns , Settings settings ) { String [ ] patternArray = Strings . delimitedListToStringArray ( patterns , <str> ) ; Settings . Builder builder = Settings . settingsBuilder ( ) . put ( settings ) ; List < String > simpleMatchPatternList = new ArrayList < > ( ) ; for ( String pattern : patternArray ) { if ( Regex . isSimpleMatchPattern ( pattern ) ) { simpleMatchPatternList . add ( pattern ) ; } else { builder . remove ( pattern ) ; } } if ( ! simpleMatchPatternList . isEmpty ( ) ) { String [ ] simpleMatchPatterns = simpleMatchPatternList . toArray ( new String [ simpleMatchPatternList . size ( ) ] ) ; Iterator < Entry < String , String > > iterator = builder . internalMap ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , String > current = iterator . next ( ) ; if ( Regex . simpleMatch ( simpleMatchPatterns , current . getKey ( ) ) ) { iterator . remove ( ) ; } } } return builder . build ( ) ; } } 

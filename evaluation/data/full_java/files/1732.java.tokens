package org . apache . cassandra . stress . operations . predefined ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . util . List ; import org . apache . cassandra . stress . generate . PartitionGenerator ; import org . apache . cassandra . stress . generate . SeedManager ; import org . apache . cassandra . stress . settings . Command ; import org . apache . cassandra . stress . settings . StressSettings ; import org . apache . cassandra . stress . util . ThriftClient ; import org . apache . cassandra . stress . util . Timer ; import org . apache . cassandra . thrift . ColumnParent ; import org . apache . cassandra . thrift . SlicePredicate ; public class ThriftCounterGetter extends PredefinedOperation { public ThriftCounterGetter ( Timer timer , PartitionGenerator generator , SeedManager seedManager , StressSettings settings ) { super ( Command . COUNTER_READ , timer , generator , seedManager , settings ) ; } public void run ( final ThriftClient client ) throws IOException { final SlicePredicate predicate = select ( ) . predicate ( ) ; final ByteBuffer key = getKey ( ) ; timeWithRetry ( new RunOp ( ) { @Override public boolean run ( ) throws Exception { List < ? > r = client . get_slice ( key , new ColumnParent ( type . table ) , predicate , settings . command . consistencyLevel ) ; return r ! = null & & r . size ( ) > <int> ; } @Override public int partitionCount ( ) { return <int> ; } @Override public int rowCount ( ) { return <int> ; } } ) ; } } 

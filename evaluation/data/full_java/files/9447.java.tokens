package com . google . common . io ; import com . google . common . annotations . Beta ; import com . google . common . base . Preconditions ; import com . google . common . primitives . Longs ; import java . io . DataOutput ; import java . io . DataOutputStream ; import java . io . FilterOutputStream ; import java . io . IOException ; import java . io . OutputStream ; @Beta public class LittleEndianDataOutputStream extends FilterOutputStream implements DataOutput { public LittleEndianDataOutputStream ( OutputStream out ) { super ( new DataOutputStream ( Preconditions . checkNotNull ( out ) ) ) ; } @Override public void write ( byte [ ] b , int off , int len ) throws IOException { out . write ( b , off , len ) ; } @Override public void writeBoolean ( boolean v ) throws IOException { ( ( DataOutputStream ) out ) . writeBoolean ( v ) ; } @Override public void writeByte ( int v ) throws IOException { ( ( DataOutputStream ) out ) . writeByte ( v ) ; } @Deprecated @Override public void writeBytes ( String s ) throws IOException { ( ( DataOutputStream ) out ) . writeBytes ( s ) ; } @Override public void writeChar ( int v ) throws IOException { writeShort ( v ) ; } @Override public void writeChars ( String s ) throws IOException { for ( int i = <int> ; i < s . length ( ) ; i + + ) { writeChar ( s . charAt ( i ) ) ; } } @Override public void writeDouble ( double v ) throws IOException { writeLong ( Double . doubleToLongBits ( v ) ) ; } @Override public void writeFloat ( float v ) throws IOException { writeInt ( Float . floatToIntBits ( v ) ) ; } @Override public void writeInt ( int v ) throws IOException { out . write ( <hex> & v ) ; out . write ( <hex> & ( v > > <int> ) ) ; out . write ( <hex> & ( v > > <int> ) ) ; out . write ( <hex> & ( v > > <int> ) ) ; } @Override public void writeLong ( long v ) throws IOException { byte [ ] bytes = Longs . toByteArray ( Long . reverseBytes ( v ) ) ; write ( bytes , <int> , bytes . length ) ; } @Override public void writeShort ( int v ) throws IOException { out . write ( <hex> & v ) ; out . write ( <hex> & ( v > > <int> ) ) ; } @Override public void writeUTF ( String str ) throws IOException { ( ( DataOutputStream ) out ) . writeUTF ( str ) ; } @Override public void close ( ) throws IOException { out . close ( ) ; } } 

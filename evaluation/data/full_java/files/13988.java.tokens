package org . gradle . api . publication . maven . internal ; import com . google . common . collect . Sets ; import org . apache . commons . lang . ObjectUtils ; import org . apache . ivy . core . module . descriptor . Artifact ; import org . apache . maven . project . MavenProject ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . PublishArtifact ; import org . gradle . api . artifacts . maven . MavenPom ; import org . gradle . api . internal . artifacts . publish . AbstractPublishArtifact ; import java . io . File ; import java . util . * ; public class DefaultArtifactPom implements ArtifactPom { private static final Set < String > PACKAGING_TYPES = Sets . newHashSet ( <str> , <str> , <str> ) ; private final MavenPom pom ; private final Map < ArtifactKey , PublishArtifact > artifacts = new HashMap < ArtifactKey , PublishArtifact > ( ) ; private PublishArtifact artifact ; private final Set < PublishArtifact > classifiers = new HashSet < PublishArtifact > ( ) ; public DefaultArtifactPom ( MavenPom pom ) { this . pom = pom ; } public MavenPom getPom ( ) { return pom ; } public PublishArtifact getArtifact ( ) { return artifact ; } public Set < PublishArtifact > getAttachedArtifacts ( ) { return Collections . unmodifiableSet ( classifiers ) ; } public PublishArtifact writePom ( final File pomFile ) { getPom ( ) . writeTo ( pomFile ) ; return new PomArtifact ( pomFile ) ; } public void addArtifact ( Artifact artifact , File src ) { throwExceptionIfArtifactOrSrcIsNull ( artifact , src ) ; PublishArtifact publishArtifact = new MavenArtifact ( artifact , src ) ; ArtifactKey artifactKey = new ArtifactKey ( publishArtifact ) ; if ( this . artifacts . containsKey ( artifactKey ) ) { throw new InvalidUserDataException ( String . format ( <str> , this . artifacts . get ( artifactKey ) , publishArtifact ) ) ; } if ( publishArtifact . getClassifier ( ) ! = null ) { addArtifact ( publishArtifact ) ; assignArtifactValuesToPom ( artifact , pom , false ) ; return ; } if ( this . artifact ! = null ) { if ( ! PACKAGING_TYPES . contains ( artifact . getType ( ) ) ) { addArtifact ( publishArtifact ) ; return ; } if ( PACKAGING_TYPES . contains ( this . artifact . getType ( ) ) ) { throw new InvalidUserDataException ( <str> + <str> + this . artifact + <str> + publishArtifact ) ; } addArtifact ( this . artifact ) ; } this . artifact = publishArtifact ; this . artifacts . put ( artifactKey , publishArtifact ) ; assignArtifactValuesToPom ( artifact , pom , true ) ; } private void addArtifact ( PublishArtifact artifact ) { classifiers . add ( artifact ) ; artifacts . put ( new ArtifactKey ( artifact ) , artifact ) ; } private String getClassifier ( Artifact artifact ) { return artifact . getExtraAttribute ( <str> ) ; } private void assignArtifactValuesToPom ( Artifact artifact , MavenPom pom , boolean setType ) { if ( pom . getGroupId ( ) . equals ( MavenProject . EMPTY_PROJECT_GROUP_ID ) ) { pom . setGroupId ( artifact . getModuleRevisionId ( ) . getOrganisation ( ) ) ; } if ( pom . getArtifactId ( ) . equals ( MavenProject . EMPTY_PROJECT_ARTIFACT_ID ) ) { pom . setArtifactId ( artifact . getName ( ) ) ; } if ( pom . getVersion ( ) . equals ( MavenProject . EMPTY_PROJECT_VERSION ) ) { pom . setVersion ( artifact . getModuleRevisionId ( ) . getRevision ( ) ) ; } if ( setType ) { pom . setPackaging ( artifact . getType ( ) ) ; } } private void throwExceptionIfArtifactOrSrcIsNull ( Artifact artifact , File src ) { if ( artifact = = null ) { throw new InvalidUserDataException ( <str> ) ; } if ( src = = null ) { throw new InvalidUserDataException ( <str> ) ; } } private static class ArtifactKey { private final String type ; private final String classifier ; private ArtifactKey ( PublishArtifact artifact ) { this . type = artifact . getType ( ) ; this . classifier = artifact . getClassifier ( ) ; } @Override public boolean equals ( Object o ) { ArtifactKey other = ( ArtifactKey ) o ; return ObjectUtils . equals ( type , other . type ) & & ObjectUtils . equals ( classifier , other . classifier ) ; } @Override public int hashCode ( ) { return ObjectUtils . hashCode ( type ) ^ ObjectUtils . hashCode ( classifier ) ; } } private abstract class AbstractMavenArtifact extends AbstractPublishArtifact { private final File file ; protected AbstractMavenArtifact ( File file ) { this . file = file ; } public File getFile ( ) { return file ; } public String getName ( ) { return pom . getArtifactId ( ) ; } public Date getDate ( ) { return null ; } } private class MavenArtifact extends AbstractMavenArtifact { private final Artifact artifact ; private MavenArtifact ( Artifact artifact , File file ) { super ( file ) ; this . artifact = artifact ; } public String getClassifier ( ) { return DefaultArtifactPom . this . getClassifier ( artifact ) ; } public String getExtension ( ) { return artifact . getExt ( ) ; } public String getType ( ) { return artifact . getType ( ) ; } } private class PomArtifact extends AbstractMavenArtifact { public PomArtifact ( File pomFile ) { super ( pomFile ) ; } public String getExtension ( ) { return <str> ; } public String getType ( ) { return <str> ; } public String getClassifier ( ) { return null ; } public Date getDate ( ) { return null ; } } } 

package org . gradle . api . publish . internal ; import org . gradle . api . InvalidUserDataException ; public abstract class PublicationFieldValidator < T extends PublicationFieldValidator > { private final Class < T > type ; protected final String publicationName ; protected final String name ; protected final String value ; public PublicationFieldValidator ( Class < T > type , String publicationName , String name , String value ) { this . type = type ; this . publicationName = publicationName ; this . name = name ; this . value = value ; } public T notNull ( ) { if ( value = = null ) { String message = String . format ( <str> , name ) ; throw failure ( message ) ; } return type . cast ( this ) ; } public T notEmpty ( ) { notNull ( ) ; if ( value . length ( ) = = <int> ) { throw failure ( String . format ( <str> , name ) ) ; } return type . cast ( this ) ; } public T validInFileName ( ) { if ( value = = null | | value . length ( ) = = <int> ) { return type . cast ( this ) ; } doesNotContainSpecialCharacters ( false ) ; return type . cast ( this ) ; } public T doesNotContainSpecialCharacters ( boolean allowSlash ) { if ( value = = null | | value . length ( ) = = <int> ) { return type . cast ( this ) ; } int offset = <int> ; while ( offset < value . length ( ) ) { final int unicodeChar = value . codePointAt ( offset ) ; if ( Character . isISOControl ( unicodeChar ) ) { throw failure ( String . format ( <str> , name , unicodeChar ) ) ; } if ( <str> = = unicodeChar | | ( <str> = = unicodeChar & & ! allowSlash ) ) { throw failure ( String . format ( <str> , name , ( char ) unicodeChar ) ) ; } offset + = Character . charCount ( unicodeChar ) ; } return type . cast ( this ) ; } public T optionalNotEmpty ( ) { if ( value ! = null & & value . length ( ) = = <int> ) { throw failure ( String . format ( <str> , name ) ) ; } return type . cast ( this ) ; } protected abstract InvalidUserDataException failure ( String message ) ; } 

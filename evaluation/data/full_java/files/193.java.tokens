package org . apache . cassandra . cql3 . functions ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . db . marshal . UTF8Type ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . utils . ByteBufferUtil ; import java . nio . ByteBuffer ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; public class ToJsonFct extends NativeScalarFunction { public static final FunctionName NAME = FunctionName . nativeFunction ( <str> ) ; private static final Map < AbstractType < ? > , ToJsonFct > instances = new ConcurrentHashMap < > ( ) ; public static ToJsonFct getInstance ( List < AbstractType < ? > > argTypes ) throws InvalidRequestException { if ( argTypes . size ( ) ! = <int> ) throw new InvalidRequestException ( String . format ( <str> , argTypes . size ( ) ) ) ; AbstractType < ? > fromType = argTypes . get ( <int> ) ; ToJsonFct func = instances . get ( fromType ) ; if ( func = = null ) { func = new ToJsonFct ( fromType ) ; instances . put ( fromType , func ) ; } return func ; } private ToJsonFct ( AbstractType < ? > argType ) { super ( <str> , UTF8Type . instance , argType ) ; } public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) throws InvalidRequestException { assert parameters . size ( ) = = <int> : <str> + parameters . size ( ) ; ByteBuffer parameter = parameters . get ( <int> ) ; if ( parameter = = null ) return ByteBufferUtil . bytes ( <str> ) ; return ByteBufferUtil . bytes ( argTypes . get ( <int> ) . toJSONString ( parameter , protocolVersion ) ) ; } } 

package io . netty . handler . codec . dns ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public class DnsOpCode implements Comparable < DnsOpCode > { public static final DnsOpCode QUERY = new DnsOpCode ( <hex> , <str> ) ; public static final DnsOpCode IQUERY = new DnsOpCode ( <hex> , <str> ) ; public static final DnsOpCode STATUS = new DnsOpCode ( <hex> , <str> ) ; public static final DnsOpCode NOTIFY = new DnsOpCode ( <hex> , <str> ) ; public static final DnsOpCode UPDATE = new DnsOpCode ( <hex> , <str> ) ; public static DnsOpCode valueOf ( int b ) { switch ( b ) { case <hex> : return QUERY ; case <hex> : return IQUERY ; case <hex> : return STATUS ; case <hex> : return NOTIFY ; case <hex> : return UPDATE ; } return new DnsOpCode ( b ) ; } private final byte byteValue ; private final String name ; private String text ; private DnsOpCode ( int byteValue ) { this ( byteValue , <str> ) ; } public DnsOpCode ( int byteValue , String name ) { this . byteValue = ( byte ) byteValue ; this . name = checkNotNull ( name , <str> ) ; } public byte byteValue ( ) { return byteValue ; } @Override public int hashCode ( ) { return byteValue ; } @Override public boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( ! ( obj instanceof DnsOpCode ) ) { return false ; } return byteValue = = ( ( DnsOpCode ) obj ) . byteValue ; } @Override public int compareTo ( DnsOpCode o ) { return byteValue - o . byteValue ; } @Override public String toString ( ) { String text = this . text ; if ( text = = null ) { this . text = text = name + <str> + ( byteValue & <hex> ) + <str> ; } return text ; } } 

package org . gradle . api . file ; import org . gradle . api . internal . file . CompositeFileCollection ; import org . gradle . api . internal . file . UnionFileCollection ; import org . gradle . api . internal . file . collections . DefaultConfigurableFileCollection ; import org . gradle . api . internal . file . collections . DefaultFileCollectionResolveContext ; import org . hamcrest . BaseMatcher ; import org . hamcrest . Description ; import org . hamcrest . Factory ; import org . hamcrest . Matcher ; import java . util . ArrayList ; import java . util . List ; import java . util . Set ; public class FileCollectionMatchers { @Factory public static < T extends FileCollection > Matcher < T > sameCollection ( final FileCollection expected ) { return new BaseMatcher < T > ( ) { public boolean matches ( Object o ) { FileCollection actual = ( FileCollection ) o ; List < ? extends FileCollection > actualCollections = unpack ( actual ) ; List < ? extends FileCollection > expectedCollections = unpack ( expected ) ; boolean equals = actualCollections . equals ( expectedCollections ) ; if ( ! equals ) { System . out . println ( <str> + expectedCollections ) ; System . out . println ( <str> + actualCollections ) ; } return equals ; } private List < ? extends FileCollection > unpack ( FileCollection expected ) { if ( expected instanceof UnionFileCollection ) { UnionFileCollection collection = ( UnionFileCollection ) expected ; return new ArrayList < FileCollection > ( collection . getSources ( ) ) ; } if ( expected instanceof DefaultConfigurableFileCollection ) { DefaultConfigurableFileCollection collection = ( DefaultConfigurableFileCollection ) expected ; return new ArrayList < FileCollection > ( ( Set ) collection . getFrom ( ) ) ; } if ( expected instanceof CompositeFileCollection ) { CompositeFileCollection collection = ( CompositeFileCollection ) expected ; DefaultFileCollectionResolveContext context = new DefaultFileCollectionResolveContext ( ) ; collection . visitContents ( context ) ; return context . resolveAsFileCollections ( ) ; } throw new RuntimeException ( <str> + expected ) ; } public void describeTo ( Description description ) { description . appendText ( <str> ) . appendValue ( expected ) ; } } ; } } 

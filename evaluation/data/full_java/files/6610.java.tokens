package org . elasticsearch . index . query ; import org . apache . lucene . search . GeoPointDistanceQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . Version ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . geo . GeoDistance ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . geo . GeoUtils ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . fielddata . IndexGeoPointFieldData ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . mapper . geo . BaseGeoPointFieldMapper ; import org . elasticsearch . index . mapper . geo . GeoPointFieldMapperLegacy ; import org . elasticsearch . index . search . geo . GeoDistanceRangeQuery ; import java . io . IOException ; import java . util . Locale ; import java . util . Objects ; public class GeoDistanceQueryBuilder extends AbstractQueryBuilder < GeoDistanceQueryBuilder > { public static final String NAME = <str> ; public static final boolean DEFAULT_NORMALIZE_LAT = true ; public static final boolean DEFAULT_NORMALIZE_LON = true ; public static final DistanceUnit DEFAULT_DISTANCE_UNIT = DistanceUnit . DEFAULT ; public static final GeoDistance DEFAULT_GEO_DISTANCE = GeoDistance . DEFAULT ; public static final String DEFAULT_OPTIMIZE_BBOX = <str> ; private final String fieldName ; private double distance ; private GeoPoint center = new GeoPoint ( Double . NaN , Double . NaN ) ; private GeoDistance geoDistance = DEFAULT_GEO_DISTANCE ; private String optimizeBbox = DEFAULT_OPTIMIZE_BBOX ; private GeoValidationMethod validationMethod = GeoValidationMethod . DEFAULT ; static final GeoDistanceQueryBuilder PROTOTYPE = new GeoDistanceQueryBuilder ( <str> ) ; public GeoDistanceQueryBuilder ( String fieldName ) { if ( Strings . isEmpty ( fieldName ) ) { throw new IllegalArgumentException ( <str> ) ; } this . fieldName = fieldName ; } public String fieldName ( ) { return this . fieldName ; } public GeoDistanceQueryBuilder point ( GeoPoint point ) { if ( point = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . center = point ; return this ; } public GeoDistanceQueryBuilder point ( double lat , double lon ) { this . center = new GeoPoint ( lat , lon ) ; return this ; } public GeoPoint point ( ) { return this . center ; } public GeoDistanceQueryBuilder distance ( String distance ) { return distance ( distance , DistanceUnit . DEFAULT ) ; } public GeoDistanceQueryBuilder distance ( String distance , DistanceUnit unit ) { if ( Strings . isEmpty ( distance ) ) { throw new IllegalArgumentException ( <str> ) ; } if ( unit = = null ) { throw new IllegalArgumentException ( <str> ) ; } double newDistance = DistanceUnit . parse ( distance , unit , DistanceUnit . DEFAULT ) ; if ( newDistance < = <float> ) { throw new IllegalArgumentException ( <str> ) ; } this . distance = newDistance ; return this ; } public GeoDistanceQueryBuilder distance ( double distance , DistanceUnit unit ) { return distance ( Double . toString ( distance ) , unit ) ; } public double distance ( ) { return distance ; } public GeoDistanceQueryBuilder geohash ( String geohash ) { if ( Strings . isEmpty ( geohash ) ) { throw new IllegalArgumentException ( <str> ) ; } this . center . resetFromGeoHash ( geohash ) ; return this ; } public GeoDistanceQueryBuilder geoDistance ( GeoDistance geoDistance ) { if ( geoDistance = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . geoDistance = geoDistance ; return this ; } public GeoDistance geoDistance ( ) { return this . geoDistance ; } public GeoDistanceQueryBuilder optimizeBbox ( String optimizeBbox ) { if ( optimizeBbox = = null ) { throw new IllegalArgumentException ( <str> ) ; } switch ( optimizeBbox ) { case <str> : case <str> : case <str> : break ; default : throw new IllegalArgumentException ( <str> ) ; } this . optimizeBbox = optimizeBbox ; return this ; } public String optimizeBbox ( ) { return this . optimizeBbox ; } public void setValidationMethod ( GeoValidationMethod method ) { this . validationMethod = method ; } public GeoValidationMethod getValidationMethod ( ) { return this . validationMethod ; } @Override protected Query doToQuery ( QueryShardContext shardContext ) throws IOException { MappedFieldType fieldType = shardContext . fieldMapper ( fieldName ) ; if ( fieldType = = null ) { throw new QueryShardException ( shardContext , <str> + fieldName + <str> ) ; } if ( ! ( fieldType instanceof BaseGeoPointFieldMapper . GeoPointFieldType ) ) { throw new QueryShardException ( shardContext , <str> + fieldName + <str> ) ; } QueryValidationException exception = checkLatLon ( shardContext . indexVersionCreated ( ) . before ( Version . V_2_0_0 ) ) ; if ( exception ! = null ) { throw new QueryShardException ( shardContext , <str> , exception ) ; } if ( GeoValidationMethod . isCoerce ( validationMethod ) ) { GeoUtils . normalizePoint ( center , true , true ) ; } double normDistance = geoDistance . normalize ( this . distance , DistanceUnit . DEFAULT ) ; if ( shardContext . indexVersionCreated ( ) . before ( Version . V_2_2_0 ) ) { GeoPointFieldMapperLegacy . GeoPointFieldType geoFieldType = ( ( GeoPointFieldMapperLegacy . GeoPointFieldType ) fieldType ) ; IndexGeoPointFieldData indexFieldData = shardContext . getForField ( fieldType ) ; return new GeoDistanceRangeQuery ( center , null , normDistance , true , false , geoDistance , geoFieldType , indexFieldData , optimizeBbox ) ; } normDistance = GeoUtils . maxRadialDistance ( center , normDistance ) ; return new GeoPointDistanceQuery ( fieldType . names ( ) . fullName ( ) , center . lon ( ) , center . lat ( ) , normDistance ) ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . startArray ( fieldName ) . value ( center . lon ( ) ) . value ( center . lat ( ) ) . endArray ( ) ; builder . field ( GeoDistanceQueryParser . DISTANCE_FIELD . getPreferredName ( ) , distance ) ; builder . field ( GeoDistanceQueryParser . DISTANCE_TYPE_FIELD . getPreferredName ( ) , geoDistance . name ( ) . toLowerCase ( Locale . ROOT ) ) ; builder . field ( GeoDistanceQueryParser . OPTIMIZE_BBOX_FIELD . getPreferredName ( ) , optimizeBbox ) ; builder . field ( GeoDistanceQueryParser . VALIDATION_METHOD_FIELD . getPreferredName ( ) , validationMethod ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( center , geoDistance , optimizeBbox , distance , validationMethod ) ; } @Override protected boolean doEquals ( GeoDistanceQueryBuilder other ) { return Objects . equals ( fieldName , other . fieldName ) & & ( distance = = other . distance ) & & Objects . equals ( validationMethod , other . validationMethod ) & & Objects . equals ( center , other . center ) & & Objects . equals ( optimizeBbox , other . optimizeBbox ) & & Objects . equals ( geoDistance , other . geoDistance ) ; } @Override protected GeoDistanceQueryBuilder doReadFrom ( StreamInput in ) throws IOException { String fieldName = in . readString ( ) ; GeoDistanceQueryBuilder result = new GeoDistanceQueryBuilder ( fieldName ) ; result . distance = in . readDouble ( ) ; result . validationMethod = GeoValidationMethod . readGeoValidationMethodFrom ( in ) ; result . center = in . readGeoPoint ( ) ; result . optimizeBbox = in . readString ( ) ; result . geoDistance = GeoDistance . readGeoDistanceFrom ( in ) ; return result ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeString ( fieldName ) ; out . writeDouble ( distance ) ; validationMethod . writeTo ( out ) ; out . writeGeoPoint ( center ) ; out . writeString ( optimizeBbox ) ; geoDistance . writeTo ( out ) ; } private QueryValidationException checkLatLon ( boolean indexCreatedBeforeV2_0 ) { if ( GeoValidationMethod . isIgnoreMalformed ( validationMethod ) | | indexCreatedBeforeV2_0 ) { return null ; } QueryValidationException validationException = null ; if ( GeoUtils . isValidLatitude ( center . getLat ( ) ) = = false ) { validationException = addValidationError ( <str> + center . getLat ( ) , validationException ) ; } if ( GeoUtils . isValidLongitude ( center . getLon ( ) ) = = false ) { validationException = addValidationError ( <str> + center . getLon ( ) , validationException ) ; } return validationException ; } @Override public String getWriteableName ( ) { return NAME ; } } 

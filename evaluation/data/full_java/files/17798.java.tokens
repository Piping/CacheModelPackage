package com . badlogic . gdx . tiledmappacker ; import java . io . File ; public class TiledMapPackerTest { public enum TestType { NoArgs , DefaultUsage , Verbose , StripUnused , CombineTilesets , UnusedAndCombine , BadOption } public static void main ( String [ ] args ) throws Exception { String path = <str> ; String input = path + <str> ; String output = path + <str> ; String verboseOpt = <str> ; String unused = <str> ; String combine = <str> ; String badOpt = <str> ; File outputDir = new File ( output ) ; if ( outputDir . exists ( ) ) { System . out . println ( <str> ) ; System . out . println ( <str> ) ; return ; } TestType testType = TestType . DefaultUsage ; String [ ] noArgs = { } ; String [ ] defaultUsage = { input , output } ; String [ ] verbose = { input , output , verboseOpt } ; String [ ] stripUnused = { input , output , unused } ; String [ ] combineTilesets = { input , output , combine } ; String [ ] unusedAndCombine = { input , output , unused , combine } ; String [ ] badOption = { input , output , unused , verboseOpt , combine , badOpt } ; switch ( testType ) { case NoArgs : TiledMapPacker . main ( noArgs ) ; break ; case DefaultUsage : TiledMapPacker . main ( defaultUsage ) ; break ; case Verbose : TiledMapPacker . main ( verbose ) ; break ; case StripUnused : TiledMapPacker . main ( stripUnused ) ; break ; case CombineTilesets : TiledMapPacker . main ( combineTilesets ) ; break ; case UnusedAndCombine : TiledMapPacker . main ( unusedAndCombine ) ; break ; case BadOption : TiledMapPacker . main ( badOption ) ; break ; default : break ; } } } 

package org . elasticsearch . indices . memory . breaker ; import org . elasticsearch . common . breaker . CircuitBreaker ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . indices . breaker . BreakerSettings ; import org . elasticsearch . indices . breaker . CircuitBreakerService ; import org . elasticsearch . indices . breaker . HierarchyCircuitBreakerService ; import org . elasticsearch . node . settings . NodeSettingsService ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; public class CircuitBreakerUnitTests extends ESTestCase { public static long pctBytes ( String percentString ) { return Settings . EMPTY . getAsMemory ( <str> , percentString ) . bytes ( ) ; } public void testBreakerSettingsValidationWithValidSettings ( ) { BreakerSettings fd = new BreakerSettings ( CircuitBreaker . FIELDDATA , pctBytes ( <str> ) , <float> ) ; BreakerSettings request = new BreakerSettings ( CircuitBreaker . REQUEST , pctBytes ( <str> ) , <float> ) ; HierarchyCircuitBreakerService . validateSettings ( new BreakerSettings [ ] { fd , request } ) ; fd = new BreakerSettings ( CircuitBreaker . FIELDDATA , pctBytes ( <str> ) , <float> ) ; request = new BreakerSettings ( CircuitBreaker . REQUEST , pctBytes ( <str> ) , <float> ) ; HierarchyCircuitBreakerService . validateSettings ( new BreakerSettings [ ] { fd , request } ) ; } public void testBreakerSettingsValidationNegativeOverhead ( ) { BreakerSettings fd = new BreakerSettings ( CircuitBreaker . FIELDDATA , pctBytes ( <str> ) , - <float> ) ; BreakerSettings request = new BreakerSettings ( CircuitBreaker . REQUEST , pctBytes ( <str> ) , <float> ) ; try { HierarchyCircuitBreakerService . validateSettings ( new BreakerSettings [ ] { fd , request } ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testRegisterCustomBreaker ( ) throws Exception { CircuitBreakerService service = new HierarchyCircuitBreakerService ( Settings . EMPTY , new NodeSettingsService ( Settings . EMPTY ) ) ; String customName = <str> ; BreakerSettings settings = new BreakerSettings ( customName , <int> , <float> ) ; service . registerBreaker ( settings ) ; CircuitBreaker breaker = service . getBreaker ( customName ) ; assertThat ( breaker , notNullValue ( ) ) ; assertThat ( breaker , instanceOf ( CircuitBreaker . class ) ) ; assertThat ( breaker . getName ( ) , is ( customName ) ) ; } } 

package org . gradle . gradleplugin . userinterface . swing . generic ; import org . gradle . BuildResult ; import org . gradle . foundation . ipc . gradle . ExecuteGradleCommandServerProtocol ; import org . gradle . foundation . output . FileLink ; import org . gradle . foundation . output . FileLinkDefinitionLord ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . favorites . FavoriteTask ; import org . gradle . gradleplugin . foundation . request . RefreshTaskListRequest ; import org . gradle . gradleplugin . foundation . request . Request ; import org . gradle . gradleplugin . userinterface . AlternateUIInteraction ; import org . gradle . gradleplugin . userinterface . swing . common . SearchPanel ; import org . gradle . gradleplugin . userinterface . swing . common . TextPaneSearchInteraction ; import org . gradle . logging . ShowStacktrace ; import javax . swing . * ; import javax . swing . text . AttributeSet ; import javax . swing . text . StyleConstants ; import javax . swing . text . StyleContext ; import java . awt . * ; import java . awt . event . ActionEvent ; import java . awt . event . MouseAdapter ; import java . awt . event . MouseEvent ; import java . io . File ; import java . text . SimpleDateFormat ; import java . util . Calendar ; public class OutputPanel extends JPanel implements ExecuteGradleCommandServerProtocol . ExecutionInteraction { private GradlePluginLord gradlePluginLord ; private OutputPanelParent parent ; private AlternateUIInteraction alternateUIInteraction ; private JPanel gradleOutputTextPanel ; private OutputTextPane gradleOutputTextPane ; private JPanel progressPanel ; private JLabel progressLabel ; private JProgressBar progressBar ; private JPanel statusPanel ; private JLabel statusLabel ; private JButton executeAgainButton ; private JButton stopButton ; private JButton findButton ; private JToggleButton pinButton ; private JButton addToFavoritesButton ; private JPanel linkNavigationPanel ; private JLabel forceShowOutputButtonLabel ; private SearchPanel searchPanel ; private boolean isBusy ; private boolean isPending ; private boolean isPinned ; private boolean showProgress = true ; private boolean onlyShowOutputOnErrors ; private boolean wasStopped ; private Request request ; private JButton nextLinkButton ; private JButton previousLinkButton ; public interface OutputPanelParent { public void removeOutputPanel ( OutputPanel outputPanel ) ; void reportExecuteFinished ( Request request , boolean wasSuccessful ) ; void executeAgain ( Request request , OutputPanel outputPanel ) ; public FileLinkDefinitionLord getFileLinkDefinitionLord ( ) ; } public OutputPanel ( GradlePluginLord gradlePluginLord , OutputPanelParent parent , AlternateUIInteraction alternateUIInteraction ) { this . gradlePluginLord = gradlePluginLord ; this . parent = parent ; this . alternateUIInteraction = alternateUIInteraction ; } public void initialize ( ) { setupUI ( ) ; } public void setRequest ( Request request , boolean onlyShowOutputOnErrors ) { this . request = request ; if ( request . forceOutputToBeShown ( ) ) { setOnlyShowOutputOnErrors ( false ) ; } else { setOnlyShowOutputOnErrors ( onlyShowOutputOnErrors ) ; } enableAddToFavoritesAppropriately ( ) ; progressBar . setIndeterminate ( true ) ; progressBar . setStringPainted ( false ) ; setPending ( true ) ; showProgress ( true ) ; appendGradleOutput ( getPrefixText ( ) ) ; } private String getPrefixText ( ) { return <str> + request . getFullCommandLine ( ) + <str> ; } public boolean isPinned ( ) { return isPinned ; } public void setPinned ( boolean pinned ) { isPinned = pinned ; pinButton . setSelected ( isPinned ) ; } public boolean isBusy ( ) { return isBusy ; } protected void setBusy ( boolean busy ) { isBusy = busy ; } public boolean isPending ( ) { return isPending ; } private void setPending ( boolean pending ) { isPending = pending ; if ( isPending ) { statusLabel . setText ( <str> ) ; } progressBar . setVisible ( ! isPending ) ; } public Request getRequest ( ) { return request ; } private void setupUI ( ) { setLayout ( new BorderLayout ( ) ) ; add ( createSideOptionsPanel ( ) , BorderLayout . WEST ) ; JPanel centerPanel = new JPanel ( new BorderLayout ( ) ) ; add ( centerPanel , BorderLayout . CENTER ) ; centerPanel . add ( createGradleOutputPanel ( ) , BorderLayout . CENTER ) ; centerPanel . add ( createInfoPanel ( ) , BorderLayout . NORTH ) ; centerPanel . add ( createSearchPanel ( ) , BorderLayout . SOUTH ) ; } private Component createGradleOutputPanel ( ) { gradleOutputTextPanel = new JPanel ( new BorderLayout ( ) ) ; gradleOutputTextPane = new OutputTextPane ( new OutputTextPane . Interaction ( ) { public void fileClicked ( File file , int line ) { alternateUIInteraction . openFile ( file , line ) ; } } , alternateUIInteraction . doesSupportEditingOpeningFiles ( ) , getFont ( ) , parent . getFileLinkDefinitionLord ( ) ) ; gradleOutputTextPanel . add ( gradleOutputTextPane . asComponent ( ) , BorderLayout . CENTER ) ; return gradleOutputTextPanel ; } private Component createInfoPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; panel . add ( createStatusPanel ( ) ) ; panel . add ( createProgressPanel ( ) ) ; return panel ; } private Component createProgressPanel ( ) { progressPanel = new JPanel ( new BorderLayout ( ) ) ; progressLabel = new JLabel ( <str> ) ; progressBar = new JProgressBar ( ) ; progressBar . setStringPainted ( true ) ; progressPanel . add ( progressBar , BorderLayout . NORTH ) ; progressPanel . add ( progressLabel , BorderLayout . SOUTH ) ; progressPanel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; progressPanel . setVisible ( false ) ; return progressPanel ; } private Component createStatusPanel ( ) { statusPanel = new JPanel ( ) ; statusPanel . setLayout ( new BoxLayout ( statusPanel , BoxLayout . X_AXIS ) ) ; statusLabel = new JLabel ( ) ; forceShowOutputButtonLabel = new JLabel ( <str> ) ; forceShowOutputButtonLabel . addMouseListener ( new MouseAdapter ( ) { public void mouseClicked ( MouseEvent e ) { forciblyShowOutput ( ) ; } public void mouseEntered ( MouseEvent e ) { forceShowOutputButtonLabel . setForeground ( UIManager . getColor ( <str> ) ) ; } public void mouseExited ( MouseEvent e ) { forceShowOutputButtonLabel . setForeground ( UIManager . getColor ( <str> ) ) ; } } ) ; statusPanel . add ( statusLabel ) ; statusPanel . add ( Box . createHorizontalGlue ( ) ) ; statusPanel . add ( forceShowOutputButtonLabel ) ; statusPanel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; return statusPanel ; } private Component createSideOptionsPanel ( ) { executeAgainButton = Utility . createButton ( OutputPanel . class , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { parent . executeAgain ( request , OutputPanel . this ) ; } } ) ; executeAgainButton . setEnabled ( false ) ; stopButton = Utility . createButton ( OutputPanel . class , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { stop ( ) ; } } ) ; stopButton . setEnabled ( true ) ; findButton = Utility . createButton ( OutputPanel . class , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { searchPanel . show ( ) ; } } ) ; pinButton = Utility . createToggleButton ( OutputPanel . class , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { setPinned ( ! isPinned ) ; } } ) ; addToFavoritesButton = Utility . createButton ( OutputPanel . class , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { addToFavorites ( ) ; } } ) ; JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; panel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; panel . add ( executeAgainButton ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( stopButton ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( pinButton ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( findButton ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( createLinkNavigationOptions ( ) ) ; panel . add ( addToFavoritesButton ) ; panel . add ( Box . createVerticalGlue ( ) ) ; return panel ; } private Component createLinkNavigationOptions ( ) { linkNavigationPanel = new JPanel ( ) ; linkNavigationPanel . setLayout ( new BoxLayout ( linkNavigationPanel , BoxLayout . Y_AXIS ) ) ; nextLinkButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { goToNextLink ( ) ; } } ) ; previousLinkButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { goToPreviousLink ( ) ; } } ) ; linkNavigationPanel . add ( previousLinkButton ) ; linkNavigationPanel . add ( Box . createVerticalStrut ( <int> ) ) ; linkNavigationPanel . add ( nextLinkButton ) ; linkNavigationPanel . add ( Box . createVerticalStrut ( <int> ) ) ; if ( ! alternateUIInteraction . doesSupportEditingOpeningFiles ( ) ) { linkNavigationPanel . setVisible ( false ) ; } return linkNavigationPanel ; } private Component createSearchPanel ( ) { StyleContext styleContent = StyleContext . getDefaultStyleContext ( ) ; AttributeSet highlightStyle = gradleOutputTextPane . getDefaultStyle ( ) . copyAttributes ( ) ; highlightStyle = styleContent . addAttribute ( highlightStyle , StyleConstants . Foreground , Color . white ) ; highlightStyle = styleContent . addAttribute ( highlightStyle , StyleConstants . Background , Color . orange ) ; highlightStyle = styleContent . addAttribute ( highlightStyle , StyleConstants . Underline , true ) ; AttributeSet emphasizedHighlightStyle = highlightStyle . copyAttributes ( ) ; emphasizedHighlightStyle = styleContent . addAttribute ( emphasizedHighlightStyle , StyleConstants . Foreground , Color . black ) ; emphasizedHighlightStyle = styleContent . addAttribute ( emphasizedHighlightStyle , StyleConstants . Background , Color . yellow ) ; searchPanel = new SearchPanel ( new OutputPanelSearchInteraction ( gradleOutputTextPane . getTextComponent ( ) , gradleOutputTextPane . getDefaultStyle ( ) , highlightStyle , emphasizedHighlightStyle ) ) ; searchPanel . hide ( ) ; return searchPanel . getComponent ( ) ; } private class OutputPanelSearchInteraction extends TextPaneSearchInteraction { private OutputPanelSearchInteraction ( JTextPane textComponentToSearch , AttributeSet defaultStyle , AttributeSet highlightStyle , AttributeSet emphasizedHighlightStyle ) { super ( textComponentToSearch , defaultStyle , highlightStyle , emphasizedHighlightStyle ) ; } @Override public void removeResultHighlights ( ) { gradleOutputTextPane . resetHighlights ( ) ; } } private void goToNextLink ( ) { FileLink fileLink = gradleOutputTextPane . getNextFileLink ( ) ; gradleOutputTextPane . selectFileLink ( fileLink ) ; } private void goToPreviousLink ( ) { FileLink fileLink = gradleOutputTextPane . getPreviousFileLink ( ) ; gradleOutputTextPane . selectFileLink ( fileLink ) ; } public void reset ( ) { executeAgainButton . setEnabled ( false ) ; stopButton . setEnabled ( true ) ; statusLabel . setText ( <str> ) ; statusLabel . setForeground ( UIManager . getColor ( <str> ) ) ; gradleOutputTextPane . setText ( <str> ) ; progressLabel . setText ( <str> ) ; wasStopped = false ; searchPanel . hide ( ) ; previousLinkButton . setEnabled ( false ) ; nextLinkButton . setEnabled ( false ) ; } private void appendGradleOutput ( final String text ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { gradleOutputTextPane . appendText ( text ) ; updateLinkNavigationOptions ( ) ; } } ) ; } private void setProgress ( final String text , final float percentComplete ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { progressBar . setValue ( ( int ) percentComplete ) ; progressLabel . setText ( text ) ; } } ) ; } public void reportExecutionStarted ( ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { setPending ( false ) ; setBusy ( true ) ; setProgress ( <str> , <int> ) ; if ( showProgress ) { progressPanel . setVisible ( true ) ; } statusLabel . setText ( <str> ) ; forceShowOutputButtonLabel . setVisible ( onlyShowOutputOnErrors ) ; } } ) ; } public void reportNumberOfTasksToExecute ( final int size ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { boolean isIndeterminate = size = = <int> ; progressBar . setIndeterminate ( isIndeterminate ) ; progressBar . setStringPainted ( ! isIndeterminate ) ; } } ) ; } public void reportExecutionFinished ( boolean wasSuccessful , BuildResult buildResult , String output ) { reportExecutionFinished ( wasSuccessful , output , buildResult . getFailure ( ) ) ; } public void reportExecutionFinished ( final boolean wasSuccessful , final String output , final Throwable throwable ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { setPending ( false ) ; setBusy ( false ) ; progressPanel . setVisible ( false ) ; String newText = getPrefixText ( ) + output ; gradleOutputTextPane . setText ( newText ) ; SimpleDateFormat formatter = new SimpleDateFormat ( <str> ) ; String formattedTime = formatter . format ( Calendar . getInstance ( ) . getTime ( ) ) ; if ( wasSuccessful ) { statusLabel . setText ( <str> + formattedTime ) ; appendGradleOutput ( <str> ) ; } else { if ( wasStopped ) { statusLabel . setText ( <str> + formattedTime ) ; } else { statusLabel . setText ( <str> + formattedTime ) ; } statusLabel . setForeground ( Color . red . darker ( ) ) ; gradleOutputTextPanel . setVisible ( true ) ; } executeAgainButton . setEnabled ( true ) ; stopButton . setEnabled ( false ) ; appendThrowable ( throwable ) ; forceShowOutputButtonLabel . setVisible ( ! gradleOutputTextPanel . isVisible ( ) ) ; updateLinkNavigationOptions ( ) ; searchPanel . performSearchAgain ( ) ; parent . reportExecuteFinished ( request , wasSuccessful ) ; } } ) ; } private void appendThrowable ( Throwable throwable ) { if ( throwable ! = null ) { String output = GradlePluginLord . getGradleExceptionMessage ( throwable , ShowStacktrace . ALWAYS_FULL ) ; appendGradleOutput ( output ) ; } } public void reportTaskStarted ( String currentTaskName , float percentComplete ) { setProgress ( currentTaskName , percentComplete ) ; } public void reportTaskComplete ( String currentTaskName , float percentComplete ) { setProgress ( currentTaskName , percentComplete ) ; } public void reportFatalError ( String message ) { appendGradleOutput ( <str> + message + <str> ) ; } public void reportLiveOutput ( String output ) { appendGradleOutput ( output ) ; } public boolean canBeReusedNow ( ) { return ! isPending & & ! isBusy & & ! isPinned ; } private void showProgress ( boolean showProgress ) { this . showProgress = showProgress ; progressPanel . setVisible ( showProgress ) ; } private void forciblyShowOutput ( ) { gradleOutputTextPanel . setVisible ( true ) ; forceShowOutputButtonLabel . setVisible ( false ) ; } public void setOnlyShowOutputOnErrors ( boolean value ) { this . onlyShowOutputOnErrors = value ; gradleOutputTextPanel . setVisible ( ! value ) ; } public boolean getOnlyShowOutputOnErrors ( ) { return onlyShowOutputOnErrors ; } public boolean close ( ) { if ( ! stop ( ) ) { return false ; } parent . removeOutputPanel ( this ) ; setPinned ( false ) ; return true ; } public boolean stop ( ) { if ( request ! = null ) { if ( ! request . cancel ( ) ) { return false ; } } wasStopped = true ; return true ; } @Override public void setFont ( Font font ) { super . setFont ( font ) ; if ( gradleOutputTextPane ! = null ) { gradleOutputTextPane . setFont ( font ) ; } } private void updateLinkNavigationOptions ( ) { if ( gradleOutputTextPane . hasClickableLinks ( ) ) { nextLinkButton . setEnabled ( true ) ; previousLinkButton . setEnabled ( true ) ; } else { nextLinkButton . setEnabled ( false ) ; previousLinkButton . setEnabled ( false ) ; } } private void addToFavorites ( ) { if ( request = = null ) { return ; } String fullCommandLine = request . getFullCommandLine ( ) ; String displayName = request . getDisplayName ( ) ; FavoriteTask favoriteTask = gradlePluginLord . getFavoritesEditor ( ) . addFavorite ( fullCommandLine , displayName , false ) ; if ( favoriteTask ! = null ) { gradlePluginLord . getFavoritesEditor ( ) . editFavorite ( favoriteTask , new SwingEditFavoriteInteraction ( SwingUtilities . getWindowAncestor ( this ) , <str> , SwingEditFavoriteInteraction . SynchronizeType . OnlyIfAlreadySynchronized ) ) ; enableAddToFavoritesAppropriately ( ) ; } } private void enableAddToFavoritesAppropriately ( ) { boolean isVisible = true ; if ( request = = null ) { isVisible = false ; } else { if ( request . getType ( ) = = RefreshTaskListRequest . TYPE ) { isVisible = false ; } else if ( gradlePluginLord . getFavoritesEditor ( ) . getFavorite ( request . getFullCommandLine ( ) ) ! = null ) { isVisible = false ; } } addToFavoritesButton . setVisible ( isVisible ) ; } } 

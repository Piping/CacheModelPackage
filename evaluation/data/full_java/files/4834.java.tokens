package org . eclipse . ui . internal . console ; import java . lang . reflect . Field ; import org . eclipse . core . expressions . EvaluationContext ; import org . eclipse . core . expressions . EvaluationResult ; import org . eclipse . core . expressions . Expression ; import org . eclipse . core . expressions . ExpressionConverter ; import org . eclipse . core . expressions . ExpressionTagNames ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . variables . VariablesPlugin ; import org . eclipse . ui . IPluginContribution ; import org . eclipse . ui . console . ConsolePlugin ; import org . eclipse . ui . console . IConsole ; import org . eclipse . ui . console . IPatternMatchListenerDelegate ; import com . ibm . icu . text . MessageFormat ; public class PatternMatchListenerExtension implements IPluginContribution { private IConfigurationElement fConfig ; private Expression fEnablementExpression ; private String fPattern ; private String fQualifier ; private int fFlags = - <int> ; public PatternMatchListenerExtension ( IConfigurationElement extension ) { fConfig = extension ; } public int parseFlags ( String flagsElement ) { int val = <int> ; if ( flagsElement = = null ) { return val ; } try { String flags = flagsElement . replaceAll ( <str> , <str> ) ; String [ ] tokens = flags . split ( <str> ) ; Class < ? > clazz = Class . forName ( <str> ) ; for ( int i = <int> ; i < tokens . length ; i + + ) { Field field = clazz . getDeclaredField ( tokens [ i ] ) ; val | = field . getInt ( null ) ; } } catch ( ClassNotFoundException e ) { ConsolePlugin . log ( e ) ; } catch ( NoSuchFieldException e ) { ConsolePlugin . log ( e ) ; } catch ( IllegalAccessException e ) { ConsolePlugin . log ( e ) ; } return val ; } public boolean isEnabledFor ( IConsole console ) throws CoreException { EvaluationContext context = new EvaluationContext ( null , console ) ; EvaluationResult evaluationResult = getEnablementExpression ( ) . evaluate ( context ) ; return evaluationResult = = EvaluationResult . TRUE ; } public IPatternMatchListenerDelegate createDelegate ( ) throws CoreException { return ( IPatternMatchListenerDelegate ) fConfig . createExecutableExtension ( <str> ) ; } public Expression getEnablementExpression ( ) throws CoreException { if ( fEnablementExpression = = null ) { IConfigurationElement [ ] elements = fConfig . getChildren ( ExpressionTagNames . ENABLEMENT ) ; if ( elements . length = = <int> ) { String message = MessageFormat . format ( <str> + getLocalId ( ) + <str> + getPluginId ( ) + <str> , new Object [ ] { ConsoleMessages . PatternMatchListenerExtension_3 , ConsoleMessages . PatternMatchListenerExtension_4 , ConsoleMessages . PatternMatchListenerExtension_5 } ) ; ConsolePlugin . log ( new Status ( IStatus . WARNING , ConsolePlugin . getUniqueIdentifier ( ) , IStatus . OK , message , null ) ) ; } IConfigurationElement enablement = elements . length > <int> ? elements [ <int> ] : null ; if ( enablement ! = null ) { fEnablementExpression = ExpressionConverter . getDefault ( ) . perform ( enablement ) ; } } return fEnablementExpression ; } public String getPattern ( ) { if ( fPattern = = null ) { fPattern = fConfig . getAttribute ( <str> ) ; try { fPattern = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) . performStringSubstitution ( fPattern , false ) ; } catch ( CoreException e ) { ConsolePlugin . log ( e ) ; } } return fPattern ; } public int getCompilerFlags ( ) { if ( fFlags < <int> ) { String flagsAttribute = fConfig . getAttribute ( <str> ) ; fFlags = parseFlags ( flagsAttribute ) ; } return fFlags ; } @Override public String getLocalId ( ) { return fConfig . getAttribute ( <str> ) ; } @Override public String getPluginId ( ) { return fConfig . getContributor ( ) . getName ( ) ; } public String getQuickPattern ( ) { if ( fQualifier = = null ) { fQualifier = fConfig . getAttribute ( <str> ) ; try { if ( fQualifier ! = null ) { fQualifier = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) . performStringSubstitution ( fQualifier , false ) ; } } catch ( CoreException e ) { ConsolePlugin . log ( e ) ; } } return fQualifier ; } } 

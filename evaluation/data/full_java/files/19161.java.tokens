package io . netty . handler . codec . http . websocketx ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . util . CharsetUtil ; import io . netty . util . internal . EmptyArrays ; public class CloseWebSocketFrame extends WebSocketFrame { public CloseWebSocketFrame ( ) { super ( Unpooled . buffer ( <int> ) ) ; } public CloseWebSocketFrame ( int statusCode , String reasonText ) { this ( true , <int> , statusCode , reasonText ) ; } public CloseWebSocketFrame ( boolean finalFragment , int rsv ) { this ( finalFragment , rsv , Unpooled . buffer ( <int> ) ) ; } public CloseWebSocketFrame ( boolean finalFragment , int rsv , int statusCode , String reasonText ) { super ( finalFragment , rsv , newBinaryData ( statusCode , reasonText ) ) ; } private static ByteBuf newBinaryData ( int statusCode , String reasonText ) { byte [ ] reasonBytes = EmptyArrays . EMPTY_BYTES ; if ( reasonText ! = null ) { reasonBytes = reasonText . getBytes ( CharsetUtil . UTF_8 ) ; } ByteBuf binaryData = Unpooled . buffer ( <int> + reasonBytes . length ) ; binaryData . writeShort ( statusCode ) ; if ( reasonBytes . length > <int> ) { binaryData . writeBytes ( reasonBytes ) ; } binaryData . readerIndex ( <int> ) ; return binaryData ; } public CloseWebSocketFrame ( boolean finalFragment , int rsv , ByteBuf binaryData ) { super ( finalFragment , rsv , binaryData ) ; } public int statusCode ( ) { ByteBuf binaryData = content ( ) ; if ( binaryData = = null | | binaryData . capacity ( ) = = <int> ) { return - <int> ; } binaryData . readerIndex ( <int> ) ; int statusCode = binaryData . readShort ( ) ; binaryData . readerIndex ( <int> ) ; return statusCode ; } public String reasonText ( ) { ByteBuf binaryData = content ( ) ; if ( binaryData = = null | | binaryData . capacity ( ) < = <int> ) { return <str> ; } binaryData . readerIndex ( <int> ) ; String reasonText = binaryData . toString ( CharsetUtil . UTF_8 ) ; binaryData . readerIndex ( <int> ) ; return reasonText ; } @Override public CloseWebSocketFrame copy ( ) { return new CloseWebSocketFrame ( isFinalFragment ( ) , rsv ( ) , content ( ) . copy ( ) ) ; } @Override public CloseWebSocketFrame duplicate ( ) { return new CloseWebSocketFrame ( isFinalFragment ( ) , rsv ( ) , content ( ) . duplicate ( ) ) ; } @Override public CloseWebSocketFrame retain ( ) { super . retain ( ) ; return this ; } @Override public CloseWebSocketFrame retain ( int increment ) { super . retain ( increment ) ; return this ; } @Override public CloseWebSocketFrame touch ( ) { super . touch ( ) ; return this ; } @Override public CloseWebSocketFrame touch ( Object hint ) { super . touch ( hint ) ; return this ; } } 

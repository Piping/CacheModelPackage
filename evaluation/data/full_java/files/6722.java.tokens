package org . elasticsearch . index . recovery ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; import java . util . concurrent . atomic . AtomicInteger ; import java . util . concurrent . atomic . AtomicLong ; public class RecoveryStats implements ToXContent , Streamable { private final AtomicInteger currentAsSource = new AtomicInteger ( ) ; private final AtomicInteger currentAsTarget = new AtomicInteger ( ) ; private final AtomicLong throttleTimeInNanos = new AtomicLong ( ) ; public RecoveryStats ( ) { } public void add ( RecoveryStats recoveryStats ) { if ( recoveryStats ! = null ) { this . currentAsSource . addAndGet ( recoveryStats . currentAsSource ( ) ) ; this . currentAsTarget . addAndGet ( recoveryStats . currentAsTarget ( ) ) ; } addTotals ( recoveryStats ) ; } public void addTotals ( RecoveryStats recoveryStats ) { if ( recoveryStats ! = null ) { this . throttleTimeInNanos . addAndGet ( recoveryStats . throttleTime ( ) . nanos ( ) ) ; } } public int currentAsSource ( ) { return currentAsSource . get ( ) ; } public int currentAsTarget ( ) { return currentAsTarget . get ( ) ; } public TimeValue throttleTime ( ) { return TimeValue . timeValueNanos ( throttleTimeInNanos . get ( ) ) ; } public void incCurrentAsTarget ( ) { currentAsTarget . incrementAndGet ( ) ; } public void decCurrentAsTarget ( ) { currentAsTarget . decrementAndGet ( ) ; } public void incCurrentAsSource ( ) { currentAsSource . incrementAndGet ( ) ; } public void decCurrentAsSource ( ) { currentAsSource . decrementAndGet ( ) ; } public void addThrottleTime ( long nanos ) { throttleTimeInNanos . addAndGet ( nanos ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . RECOVERY ) ; builder . field ( Fields . CURRENT_AS_SOURCE , currentAsSource ( ) ) ; builder . field ( Fields . CURRENT_AS_TARGET , currentAsTarget ( ) ) ; builder . timeValueField ( Fields . THROTTLE_TIME_IN_MILLIS , Fields . THROTTLE_TIME , throttleTime ( ) ) ; builder . endObject ( ) ; return builder ; } public static RecoveryStats readRecoveryStats ( StreamInput in ) throws IOException { RecoveryStats stats = new RecoveryStats ( ) ; stats . readFrom ( in ) ; return stats ; } static final class Fields { static final XContentBuilderString RECOVERY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CURRENT_AS_SOURCE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CURRENT_AS_TARGET = new XContentBuilderString ( <str> ) ; static final XContentBuilderString THROTTLE_TIME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString THROTTLE_TIME_IN_MILLIS = new XContentBuilderString ( <str> ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { currentAsSource . set ( in . readVInt ( ) ) ; currentAsTarget . set ( in . readVInt ( ) ) ; throttleTimeInNanos . set ( in . readLong ( ) ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVInt ( currentAsSource . get ( ) ) ; out . writeVInt ( currentAsTarget . get ( ) ) ; out . writeLong ( throttleTimeInNanos . get ( ) ) ; } @Override public String toString ( ) { return <str> + currentAsSource ( ) + <str> + currentAsTarget ( ) + <str> + throttleTime ( ) + <str> ; } } 

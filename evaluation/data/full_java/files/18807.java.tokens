package io . netty . buffer ; import org . junit . Test ; import static org . junit . Assert . assertEquals ; public class DuplicateByteBufTest extends AbstractByteBufTest { @Override protected ByteBuf newBuffer ( int length ) { ByteBuf wrapped = Unpooled . buffer ( length ) ; ByteBuf buffer = new DuplicatedByteBuf ( wrapped ) ; assertEquals ( wrapped . writerIndex ( ) , buffer . writerIndex ( ) ) ; assertEquals ( wrapped . readerIndex ( ) , buffer . readerIndex ( ) ) ; return buffer ; } @Test ( expected = NullPointerException . class ) public void shouldNotAllowNullInConstructor ( ) { new DuplicatedByteBuf ( null ) ; } @Test public void testIncreaseCapacityWrapped ( ) { ByteBuf buffer = newBuffer ( <int> ) ; ByteBuf wrapped = buffer . unwrap ( ) ; wrapped . writeByte ( <int> ) ; wrapped . readerIndex ( wrapped . readerIndex ( ) + <int> ) ; buffer . writerIndex ( buffer . writerIndex ( ) + <int> ) ; wrapped . capacity ( wrapped . capacity ( ) * <int> ) ; assertEquals ( ( byte ) <int> , buffer . readByte ( ) ) ; } @Test public void testMarksInitialized ( ) { ByteBuf wrapped = Unpooled . buffer ( <int> ) ; try { wrapped . writerIndex ( <int> ) ; wrapped . readerIndex ( <int> ) ; ByteBuf duplicate = new DuplicatedByteBuf ( wrapped ) ; duplicate . writerIndex ( duplicate . writerIndex ( ) + <int> ) ; duplicate . resetWriterIndex ( ) ; assertEquals ( wrapped . writerIndex ( ) , duplicate . writerIndex ( ) ) ; duplicate . readerIndex ( duplicate . readerIndex ( ) + <int> ) ; duplicate . resetReaderIndex ( ) ; assertEquals ( wrapped . readerIndex ( ) , duplicate . readerIndex ( ) ) ; } finally { wrapped . release ( ) ; } } } 

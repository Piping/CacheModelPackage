package org . gradle . api . internal . notations ; import com . google . common . collect . Maps ; import org . gradle . api . artifacts . SelfResolvingDependency ; import org . gradle . api . internal . ClassPathRegistry ; import org . gradle . api . internal . artifacts . dependencies . DefaultSelfResolvingDependency ; import org . gradle . api . internal . artifacts . dsl . dependencies . DependencyFactory ; import org . gradle . api . internal . file . FileCollectionInternal ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . typeconversion . NotationConvertResult ; import org . gradle . internal . typeconversion . NotationConverter ; import org . gradle . internal . typeconversion . TypeConversionException ; import java . io . File ; import java . util . Collection ; import java . util . Map ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; public class DependencyClassPathNotationConverter implements NotationConverter < DependencyFactory . ClassPathNotation , SelfResolvingDependency > { private final ClassPathRegistry classPathRegistry ; private final Instantiator instantiator ; private final FileResolver fileResolver ; private final Map < DependencyFactory . ClassPathNotation , SelfResolvingDependency > internCache = Maps . newEnumMap ( DependencyFactory . ClassPathNotation . class ) ; private final Lock internCacheWriteLock = new ReentrantLock ( ) ; public DependencyClassPathNotationConverter ( Instantiator instantiator , ClassPathRegistry classPathRegistry , FileResolver fileResolver ) { this . instantiator = instantiator ; this . classPathRegistry = classPathRegistry ; this . fileResolver = fileResolver ; } @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( <str> ) . example ( <str> ) ; } public void convert ( DependencyFactory . ClassPathNotation notation , NotationConvertResult < ? super SelfResolvingDependency > result ) throws TypeConversionException { SelfResolvingDependency dependency = internCache . get ( notation ) ; if ( dependency = = null ) { internCacheWriteLock . lock ( ) ; try { dependency = maybeCreateUnderLock ( notation ) ; } finally { internCacheWriteLock . unlock ( ) ; } } result . converted ( dependency ) ; } private SelfResolvingDependency maybeCreateUnderLock ( DependencyFactory . ClassPathNotation notation ) { SelfResolvingDependency dependency = internCache . get ( notation ) ; if ( dependency = = null ) { Collection < File > classpath = classPathRegistry . getClassPath ( notation . name ( ) ) . getAsFiles ( ) ; FileCollectionInternal files = fileResolver . resolveFiles ( classpath ) ; dependency = instantiator . newInstance ( DefaultSelfResolvingDependency . class , files ) ; internCache . put ( notation , dependency ) ; } return dependency ; } } 

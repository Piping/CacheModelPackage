package clojure . java . api ; import clojure . lang . IFn ; import clojure . lang . Symbol ; import clojure . lang . Var ; public class Clojure { private Clojure ( ) { } private static Symbol asSym ( Object o ) { Symbol s ; if ( o instanceof String ) { s = Symbol . intern ( ( String ) o ) ; } else { s = ( Symbol ) o ; } return s ; } public static IFn var ( Object qualifiedName ) { Symbol s = asSym ( qualifiedName ) ; return var ( s . getNamespace ( ) , s . getName ( ) ) ; } public static IFn var ( Object ns , Object name ) { return Var . intern ( asSym ( ns ) , asSym ( name ) ) ; } public static Object read ( String s ) { return EDN_READ_STRING . invoke ( s ) ; } static { Symbol edn = ( Symbol ) var ( <str> , <str> ) . invoke ( <str> ) ; var ( <str> , <str> ) . invoke ( edn ) ; } private static final IFn EDN_READ_STRING = var ( <str> , <str> ) ; } 

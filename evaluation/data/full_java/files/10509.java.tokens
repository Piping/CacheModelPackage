package com . google . common . io ; import static com . google . common . io . TestOption . CLOSE_THROWS ; import static com . google . common . io . TestOption . OPEN_THROWS ; import static com . google . common . io . TestOption . READ_THROWS ; import static com . google . common . io . TestOption . WRITE_THROWS ; import static org . junit . Assert . assertArrayEquals ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . OutputStream ; import java . util . EnumSet ; public class ByteSinkTest extends IoTestCase { private final byte [ ] bytes = newPreFilledByteArray ( <int> ) ; private TestByteSink sink ; @Override protected void setUp ( ) throws Exception { sink = new TestByteSink ( ) ; } public void testOpenBufferedStream ( ) throws IOException { OutputStream out = sink . openBufferedStream ( ) ; assertTrue ( sink . wasStreamOpened ( ) ) ; assertFalse ( sink . wasStreamClosed ( ) ) ; out . write ( new byte [ ] { <int> , <int> , <int> , <int> } ) ; out . close ( ) ; assertTrue ( sink . wasStreamClosed ( ) ) ; assertArrayEquals ( new byte [ ] { <int> , <int> , <int> , <int> } , sink . getBytes ( ) ) ; } public void testWrite_bytes ( ) throws IOException { assertArrayEquals ( new byte [ <int> ] , sink . getBytes ( ) ) ; sink . write ( bytes ) ; assertTrue ( sink . wasStreamOpened ( ) & & sink . wasStreamClosed ( ) ) ; assertArrayEquals ( bytes , sink . getBytes ( ) ) ; } public void testWriteFrom_inputStream ( ) throws IOException { ByteArrayInputStream in = new ByteArrayInputStream ( bytes ) ; sink . writeFrom ( in ) ; assertTrue ( sink . wasStreamOpened ( ) & & sink . wasStreamClosed ( ) ) ; assertArrayEquals ( bytes , sink . getBytes ( ) ) ; } public void testWriteFromStream_doesNotCloseThatStream ( ) throws IOException { TestInputStream in = new TestInputStream ( new ByteArrayInputStream ( new byte [ <int> ] ) ) ; assertFalse ( in . closed ( ) ) ; sink . writeFrom ( in ) ; assertFalse ( in . closed ( ) ) ; } public void testClosesOnErrors_copyingFromByteSourceThatThrows ( ) { for ( TestOption option : EnumSet . of ( OPEN_THROWS , READ_THROWS , CLOSE_THROWS ) ) { TestByteSource failSource = new TestByteSource ( new byte [ <int> ] , option ) ; TestByteSink okSink = new TestByteSink ( ) ; try { failSource . copyTo ( okSink ) ; fail ( ) ; } catch ( IOException expected ) { } assertTrue ( <str> + option , ! okSink . wasStreamOpened ( ) | | okSink . wasStreamClosed ( ) ) ; } } public void testClosesOnErrors_whenWriteThrows ( ) { TestByteSink failSink = new TestByteSink ( WRITE_THROWS ) ; try { new TestByteSource ( new byte [ <int> ] ) . copyTo ( failSink ) ; fail ( ) ; } catch ( IOException expected ) { } assertTrue ( failSink . wasStreamClosed ( ) ) ; } public void testClosesOnErrors_writingFromInputStreamThatThrows ( ) { TestByteSink okSink = new TestByteSink ( ) ; try { TestInputStream in = new TestInputStream ( new ByteArrayInputStream ( new byte [ <int> ] ) , READ_THROWS ) ; okSink . writeFrom ( in ) ; fail ( ) ; } catch ( IOException expected ) { } assertTrue ( okSink . wasStreamClosed ( ) ) ; } } 

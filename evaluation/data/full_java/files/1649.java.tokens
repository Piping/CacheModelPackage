package org . apache . cassandra . utils ; import org . junit . Test ; import static org . junit . Assert . assertEquals ; public class EstimatedHistogramTest { @Test public void testSimple ( ) { { EstimatedHistogram histogram = new EstimatedHistogram ( ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . get ( <int> ) ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . get ( <int> ) ) ; } { EstimatedHistogram histogram = new EstimatedHistogram ( <int> , true ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . get ( <int> ) ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . get ( <int> ) ) ; assertEquals ( <int> , histogram . get ( <int> ) ) ; } } @Test public void testOverflow ( ) { EstimatedHistogram histogram = new EstimatedHistogram ( <int> ) ; histogram . add ( <int> ) ; assert histogram . isOverflowed ( ) ; assertEquals ( Long . MAX_VALUE , histogram . max ( ) ) ; } @Test public void testMinMax ( ) { EstimatedHistogram histogram = new EstimatedHistogram ( ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . min ( ) ) ; assertEquals ( <int> , histogram . max ( ) ) ; } @Test public void testMean ( ) { { EstimatedHistogram histogram = new EstimatedHistogram ( ) ; for ( int i = <int> ; i < <int> ; i + + ) histogram . add ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) histogram . add ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) histogram . add ( <int> ) ; assertEquals ( <int> , histogram . count ( ) ) ; assertEquals ( <int> , histogram . mean ( ) ) ; } { EstimatedHistogram histogram = new EstimatedHistogram ( <int> , true ) ; for ( int i = <int> ; i < <int> ; i + + ) histogram . add ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) histogram . add ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) histogram . add ( <int> ) ; assertEquals ( <int> , histogram . count ( ) ) ; assertEquals ( <int> , histogram . mean ( ) ) ; } } @Test public void testFindingCorrectBuckets ( ) { EstimatedHistogram histogram = new EstimatedHistogram ( ) ; histogram . add ( <int> ) ; assert ! histogram . isOverflowed ( ) ; assertEquals ( <int> , histogram . getBuckets ( false ) [ histogram . buckets . length ( ) - <int> ] ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . getBuckets ( false ) [ <int> ] ) ; histogram . add ( <int> ) ; histogram . add ( <int> ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . getBuckets ( false ) [ <int> ] ) ; assertEquals ( <int> , histogram . mean ( ) ) ; } @Test public void testPercentile ( ) { { EstimatedHistogram histogram = new EstimatedHistogram ( ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; } { EstimatedHistogram histogram = new EstimatedHistogram ( ) ; histogram . add ( <int> ) ; histogram . add ( <int> ) ; histogram . add ( <int> ) ; histogram . add ( <int> ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; } { EstimatedHistogram histogram = new EstimatedHistogram ( ) ; for ( int i = <int> ; i < = <int> ; i + + ) histogram . add ( i ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; } { EstimatedHistogram histogram = new EstimatedHistogram ( <int> , true ) ; histogram . add ( <int> ) ; histogram . add ( <int> ) ; histogram . add ( <int> ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; assertEquals ( <int> , histogram . percentile ( <float> ) ) ; } } } 

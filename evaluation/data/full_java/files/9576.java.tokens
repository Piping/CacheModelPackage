package com . google . common . xml ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . escape . Escaper ; import com . google . common . escape . Escapers ; @Beta @GwtCompatible public class XmlEscapers { private XmlEscapers ( ) { } private static final char MIN_ASCII_CONTROL_CHAR = <hex> ; private static final char MAX_ASCII_CONTROL_CHAR = <hex> ; public static Escaper xmlContentEscaper ( ) { return XML_CONTENT_ESCAPER ; } public static Escaper xmlAttributeEscaper ( ) { return XML_ATTRIBUTE_ESCAPER ; } private static final Escaper XML_ESCAPER ; private static final Escaper XML_CONTENT_ESCAPER ; private static final Escaper XML_ATTRIBUTE_ESCAPER ; static { Escapers . Builder builder = Escapers . builder ( ) ; builder . setSafeRange ( Character . MIN_VALUE , <str> ) ; builder . setUnsafeReplacement ( <str> ) ; for ( char c = MIN_ASCII_CONTROL_CHAR ; c < = MAX_ASCII_CONTROL_CHAR ; c + + ) { if ( c ! = <str> & & c ! = <str> & & c ! = <str> ) { builder . addEscape ( c , <str> ) ; } } builder . addEscape ( <str> , <str> ) ; builder . addEscape ( <str> , <str> ) ; builder . addEscape ( <str> , <str> ) ; XML_CONTENT_ESCAPER = builder . build ( ) ; builder . addEscape ( <str> , <str> ) ; builder . addEscape ( <str> , <str> ) ; XML_ESCAPER = builder . build ( ) ; builder . addEscape ( <str> , <str> ) ; builder . addEscape ( <str> , <str> ) ; builder . addEscape ( <str> , <str> ) ; XML_ATTRIBUTE_ESCAPER = builder . build ( ) ; } } 

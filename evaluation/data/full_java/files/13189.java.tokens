package org . gradle . plugins . ide . internal . tooling . idea ; import java . io . File ; import java . io . Serializable ; import java . util . LinkedHashSet ; import java . util . Set ; public class DefaultIdeaContentRoot implements Serializable { File rootDirectory ; Set < DefaultIdeaSourceDirectory > sourceDirectories = new LinkedHashSet < DefaultIdeaSourceDirectory > ( ) ; Set < DefaultIdeaSourceDirectory > testDirectories = new LinkedHashSet < DefaultIdeaSourceDirectory > ( ) ; Set < File > excludeDirectories = new LinkedHashSet < File > ( ) ; public File getRootDirectory ( ) { return rootDirectory ; } public DefaultIdeaContentRoot setRootDirectory ( File rootDirectory ) { this . rootDirectory = rootDirectory ; return this ; } public Set < DefaultIdeaSourceDirectory > getSourceDirectories ( ) { return sourceDirectories ; } public DefaultIdeaContentRoot setSourceDirectories ( Set < DefaultIdeaSourceDirectory > sourceDirectories ) { this . sourceDirectories = sourceDirectories ; return this ; } public Set < DefaultIdeaSourceDirectory > getGeneratedSourceDirectories ( ) { return generated ( sourceDirectories ) ; } private Set < DefaultIdeaSourceDirectory > generated ( Set < DefaultIdeaSourceDirectory > directories ) { Set < DefaultIdeaSourceDirectory > generated = new LinkedHashSet < DefaultIdeaSourceDirectory > ( ) ; for ( DefaultIdeaSourceDirectory sourceDirectory : directories ) { if ( sourceDirectory . isGenerated ( ) ) { generated . add ( sourceDirectory ) ; } } return generated ; } public Set < DefaultIdeaSourceDirectory > getTestDirectories ( ) { return testDirectories ; } public DefaultIdeaContentRoot setTestDirectories ( Set < DefaultIdeaSourceDirectory > testDirectories ) { this . testDirectories = testDirectories ; return this ; } public Set < DefaultIdeaSourceDirectory > getGeneratedTestDirectories ( ) { return generated ( testDirectories ) ; } public Set < File > getExcludeDirectories ( ) { return excludeDirectories ; } public DefaultIdeaContentRoot setExcludeDirectories ( Set < File > excludeDirectories ) { this . excludeDirectories = excludeDirectories ; return this ; } public String toString ( ) { return <str> + <str> + rootDirectory + <str> + sourceDirectories . size ( ) + <str> + testDirectories . size ( ) + <str> + excludeDirectories . size ( ) + <str> ; } } 

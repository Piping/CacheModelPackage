package org . eclipse . debug . ui ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . ISafeRunnable ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . breakpoints . provisional . OtherBreakpointCategory ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; public abstract class AbstractBreakpointOrganizerDelegate implements IBreakpointOrganizerDelegate { private ListenerList fListeners = new ListenerList ( ) ; @Override public void addBreakpoint ( IBreakpoint breakpoint , IAdaptable category ) { } @Override public void addPropertyChangeListener ( IPropertyChangeListener listener ) { fListeners . add ( listener ) ; } @Override public boolean canAdd ( IBreakpoint breakpoint , IAdaptable category ) { return category instanceof OtherBreakpointCategory ; } @Override public boolean canRemove ( IBreakpoint breakpoint , IAdaptable category ) { return category instanceof OtherBreakpointCategory ; } @Override public void dispose ( ) { fListeners = new ListenerList ( ) ; } @Override public void removeBreakpoint ( IBreakpoint breakpoint , IAdaptable category ) { } @Override public void removePropertyChangeListener ( IPropertyChangeListener listener ) { fListeners . remove ( listener ) ; } protected void fireCategoryChanged ( IAdaptable category ) { if ( fListeners . isEmpty ( ) ) { return ; } final PropertyChangeEvent event = new PropertyChangeEvent ( this , P_CATEGORY_CHANGED , category , null ) ; Object [ ] listeners = fListeners . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { final IPropertyChangeListener listener = ( IPropertyChangeListener ) listeners [ i ] ; ISafeRunnable runnable = new ISafeRunnable ( ) { @Override public void handleException ( Throwable exception ) { DebugUIPlugin . log ( exception ) ; } @Override public void run ( ) throws Exception { listener . propertyChange ( event ) ; } } ; SafeRunner . run ( runnable ) ; } } @Override public IAdaptable [ ] getCategories ( ) { return null ; } } 

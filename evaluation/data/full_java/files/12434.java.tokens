package org . gradle . util ; import org . gradle . internal . TimeProvider ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JMock ; import org . jmock . integration . junit4 . JUnit4Mockery ; import static org . junit . Assert . assertEquals ; import org . junit . Before ; import org . junit . Test ; import org . junit . runner . RunWith ; @RunWith ( JMock . class ) public class ClockTest { private static final long TEST_BASE_TIME = <int> ; private JUnit4Mockery context = new JUnit4Mockery ( ) ; private TimeProvider timeProvider ; private Clock clock ; @Before public void setUp ( ) { timeProvider = context . mock ( TimeProvider . class ) ; setBaseTime ( ) ; clock = new Clock ( timeProvider ) ; } @Test public void testOnlySecondsTwoDigits ( ) throws Exception { setDtMs ( <int> ) ; assertEquals ( <str> , clock . getTime ( ) ) ; } @Test public void testOnlySecondsEvenMs ( ) { setDtMs ( <int> ) ; assertEquals ( <str> , clock . getTime ( ) ) ; } @Test public void testMinutesAndSeconds ( ) { setDtHrsMinsSecsMillis ( <int> , <int> , <int> , <int> ) ; assertEquals ( <str> , clock . getTime ( ) ) ; } @Test public void testHoursMinutesAndSeconds ( ) { setDtHrsMinsSecsMillis ( <int> , <int> , <int> , <int> ) ; assertEquals ( <str> , clock . getTime ( ) ) ; } @Test public void testHoursZeroMinutes ( ) { setDtHrsMinsSecsMillis ( <int> , <int> , <int> , <int> ) ; assertEquals ( <str> , clock . getTime ( ) ) ; } private void setBaseTime ( ) { returnFromTimeProvider ( TEST_BASE_TIME ) ; } private void setDtMs ( final long deltaT ) { returnFromTimeProvider ( TEST_BASE_TIME + deltaT ) ; } private void setDtHrsMinsSecsMillis ( int hours , int minutes , int seconds , int millis ) { long dt = ( hours * <int> * <int> ) + ( minutes * <int> * <int> ) + ( seconds * <int> ) + millis ; returnFromTimeProvider ( TEST_BASE_TIME + dt ) ; } private void returnFromTimeProvider ( final long time ) { context . checking ( new Expectations ( ) { { one ( timeProvider ) . getCurrentTime ( ) ; will ( returnValue ( time ) ) ; } } ) ; } } 

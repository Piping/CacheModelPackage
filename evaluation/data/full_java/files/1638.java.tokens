package org . apache . cassandra . triggers ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . schema . KeyspaceMetadata ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . schema . Tables ; import org . apache . cassandra . schema . TriggerMetadata ; import org . apache . cassandra . service . MigrationManager ; import static org . junit . Assert . * ; public class TriggersSchemaTest { String ksName = <str> + System . nanoTime ( ) ; String cfName = <str> + System . nanoTime ( ) ; String triggerName = <str> + System . nanoTime ( ) ; String triggerClass = <str> ; @BeforeClass public static void beforeTest ( ) throws ConfigurationException { SchemaLoader . loadSchema ( ) ; } @Test public void newKsContainsCfWithTrigger ( ) throws Exception { TriggerMetadata td = TriggerMetadata . create ( triggerName , triggerClass ) ; CFMetaData cfm1 = CFMetaData . compile ( String . format ( <str> , cfName ) , ksName ) ; cfm1 . triggers ( cfm1 . getTriggers ( ) . with ( td ) ) ; KeyspaceMetadata ksm = KeyspaceMetadata . create ( ksName , KeyspaceParams . simple ( <int> ) , Tables . of ( cfm1 ) ) ; MigrationManager . announceNewKeyspace ( ksm ) ; CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) ; assertFalse ( cfm2 . getTriggers ( ) . isEmpty ( ) ) ; assertEquals ( <int> , cfm2 . getTriggers ( ) . size ( ) ) ; assertEquals ( td , cfm2 . getTriggers ( ) . get ( triggerName ) . get ( ) ) ; } @Test public void addNewCfWithTriggerToKs ( ) throws Exception { KeyspaceMetadata ksm = KeyspaceMetadata . create ( ksName , KeyspaceParams . simple ( <int> ) ) ; MigrationManager . announceNewKeyspace ( ksm ) ; CFMetaData cfm1 = CFMetaData . compile ( String . format ( <str> , cfName ) , ksName ) ; TriggerMetadata td = TriggerMetadata . create ( triggerName , triggerClass ) ; cfm1 . triggers ( cfm1 . getTriggers ( ) . with ( td ) ) ; MigrationManager . announceNewColumnFamily ( cfm1 ) ; CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) ; assertFalse ( cfm2 . getTriggers ( ) . isEmpty ( ) ) ; assertEquals ( <int> , cfm2 . getTriggers ( ) . size ( ) ) ; assertEquals ( td , cfm2 . getTriggers ( ) . get ( triggerName ) . get ( ) ) ; } @Test public void addTriggerToCf ( ) throws Exception { CFMetaData cfm1 = CFMetaData . compile ( String . format ( <str> , cfName ) , ksName ) ; KeyspaceMetadata ksm = KeyspaceMetadata . create ( ksName , KeyspaceParams . simple ( <int> ) , Tables . of ( cfm1 ) ) ; MigrationManager . announceNewKeyspace ( ksm ) ; CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; TriggerMetadata td = TriggerMetadata . create ( triggerName , triggerClass ) ; cfm2 . triggers ( cfm2 . getTriggers ( ) . with ( td ) ) ; MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) ; assertFalse ( cfm3 . getTriggers ( ) . isEmpty ( ) ) ; assertEquals ( <int> , cfm3 . getTriggers ( ) . size ( ) ) ; assertEquals ( td , cfm3 . getTriggers ( ) . get ( triggerName ) . get ( ) ) ; } @Test public void removeTriggerFromCf ( ) throws Exception { TriggerMetadata td = TriggerMetadata . create ( triggerName , triggerClass ) ; CFMetaData cfm1 = CFMetaData . compile ( String . format ( <str> , cfName ) , ksName ) ; cfm1 . triggers ( cfm1 . getTriggers ( ) . with ( td ) ) ; KeyspaceMetadata ksm = KeyspaceMetadata . create ( ksName , KeyspaceParams . simple ( <int> ) , Tables . of ( cfm1 ) ) ; MigrationManager . announceNewKeyspace ( ksm ) ; CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; cfm2 . triggers ( cfm2 . getTriggers ( ) . without ( triggerName ) ) ; MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; assertTrue ( cfm3 . getTriggers ( ) . isEmpty ( ) ) ; } } 

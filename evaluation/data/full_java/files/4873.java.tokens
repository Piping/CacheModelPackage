package org . apache . lucene . analysis ; import org . apache . lucene . analysis . tokenattributes . CharTermAttribute ; import org . apache . lucene . analysis . tokenattributes . PositionIncrementAttribute ; import java . io . IOException ; import java . util . Collections ; import java . util . Iterator ; public class PrefixAnalyzer extends Analyzer { private final char separator ; private final Iterable < ? extends CharSequence > prefix ; private final Analyzer analyzer ; public PrefixAnalyzer ( Analyzer analyzer , char separator , CharSequence prefix ) { this ( analyzer , separator , Collections . singleton ( prefix ) ) ; } public PrefixAnalyzer ( Analyzer analyzer , char separator , Iterable < ? extends CharSequence > prefix ) { super ( ) ; this . analyzer = analyzer ; this . prefix = prefix ; this . separator = separator ; } @Override protected TokenStreamComponents createComponents ( String fieldName ) { TokenStreamComponents createComponents = analyzer . createComponents ( fieldName ) ; TokenStream stream = new PrefixTokenFilter ( createComponents . getTokenStream ( ) , separator , prefix ) ; TokenStreamComponents tsc = new TokenStreamComponents ( createComponents . getTokenizer ( ) , stream ) ; return tsc ; } public static final class PrefixTokenFilter extends TokenFilter { private final char separator ; private final CharTermAttribute termAttr = addAttribute ( CharTermAttribute . class ) ; private final PositionIncrementAttribute posAttr = addAttribute ( PositionIncrementAttribute . class ) ; private final Iterable < ? extends CharSequence > prefixes ; private Iterator < ? extends CharSequence > currentPrefix ; public PrefixTokenFilter ( TokenStream input , char separator , Iterable < ? extends CharSequence > prefixes ) { super ( input ) ; this . prefixes = prefixes ; this . currentPrefix = null ; this . separator = separator ; if ( prefixes = = null | | ! prefixes . iterator ( ) . hasNext ( ) ) { throw new IllegalArgumentException ( <str> ) ; } } @Override public boolean incrementToken ( ) throws IOException { if ( currentPrefix ! = null ) { if ( ! currentPrefix . hasNext ( ) ) { return input . incrementToken ( ) ; } else { posAttr . setPositionIncrement ( <int> ) ; } } else { currentPrefix = prefixes . iterator ( ) ; termAttr . setEmpty ( ) ; posAttr . setPositionIncrement ( <int> ) ; assert ( currentPrefix . hasNext ( ) ) : <str> ; } termAttr . setEmpty ( ) ; termAttr . append ( currentPrefix . next ( ) ) ; termAttr . append ( separator ) ; return true ; } @Override public void reset ( ) throws IOException { super . reset ( ) ; currentPrefix = null ; } } } 

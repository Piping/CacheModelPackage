package org . elasticsearch . index . query ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . Objects ; public abstract class BaseTermQueryBuilder < QB extends BaseTermQueryBuilder < QB > > extends AbstractQueryBuilder < QB > { public static final ParseField VALUE_FIELD = new ParseField ( <str> ) ; protected final String fieldName ; protected final Object value ; public BaseTermQueryBuilder ( String fieldName , String value ) { this ( fieldName , ( Object ) value ) ; } public BaseTermQueryBuilder ( String fieldName , int value ) { this ( fieldName , ( Object ) value ) ; } public BaseTermQueryBuilder ( String fieldName , long value ) { this ( fieldName , ( Object ) value ) ; } public BaseTermQueryBuilder ( String fieldName , float value ) { this ( fieldName , ( Object ) value ) ; } public BaseTermQueryBuilder ( String fieldName , double value ) { this ( fieldName , ( Object ) value ) ; } public BaseTermQueryBuilder ( String fieldName , boolean value ) { this ( fieldName , ( Object ) value ) ; } public BaseTermQueryBuilder ( String fieldName , Object value ) { if ( Strings . isEmpty ( fieldName ) ) { throw new IllegalArgumentException ( <str> ) ; } if ( value = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . fieldName = fieldName ; this . value = convertToBytesRefIfString ( value ) ; } public String fieldName ( ) { return this . fieldName ; } public Object value ( ) { return convertToStringIfBytesRef ( this . value ) ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( getName ( ) ) ; builder . startObject ( fieldName ) ; builder . field ( VALUE_FIELD . getPreferredName ( ) , convertToStringIfBytesRef ( this . value ) ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; builder . endObject ( ) ; } @Override protected final int doHashCode ( ) { return Objects . hash ( fieldName , value ) ; } @Override protected final boolean doEquals ( BaseTermQueryBuilder other ) { return Objects . equals ( fieldName , other . fieldName ) & & Objects . equals ( value , other . value ) ; } @Override protected final QB doReadFrom ( StreamInput in ) throws IOException { return createBuilder ( in . readString ( ) , in . readGenericValue ( ) ) ; } protected abstract QB createBuilder ( String fieldName , Object value ) ; @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeString ( fieldName ) ; out . writeGenericValue ( value ) ; } } 

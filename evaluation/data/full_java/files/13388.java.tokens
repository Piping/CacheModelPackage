package org . gradle . plugins . javascript . envjs . internal ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorker ; import org . mozilla . javascript . Context ; import org . mozilla . javascript . RhinoException ; import org . mozilla . javascript . Scriptable ; import static org . gradle . plugins . javascript . rhino . worker . RhinoWorkerUtils . DefaultScopeOperation ; import static org . gradle . plugins . javascript . rhino . worker . RhinoWorkerUtils . parseRhino ; public class EnvJsEvaluateWorker implements RhinoWorker < String , EnvJsEvaluateSpec > { private static final Logger LOGGER = Logging . getLogger ( EnvJsEvaluateWorker . class ) ; public String process ( EnvJsEvaluateSpec spec ) { final String targetUrl = spec . getUrl ( ) ; return parseRhino ( spec . getEnvJs ( ) , new DefaultScopeOperation < String > ( ) { @Override public void initContext ( Context context ) { context . setOptimizationLevel ( - <int> ) ; } @Override public String action ( Scriptable scope , Context context ) { scope . put ( <str> , scope , targetUrl ) ; context . evaluateString ( scope , <str> , targetUrl , <int> , null ) ; Object html = context . evaluateString ( scope , <str> , targetUrl , <int> , null ) ; return ( String ) html ; } } ) ; } public Exception convertException ( RhinoException rhinoException ) { return rhinoException ; } } 

package io . netty . handler . codec . bytes ; import io . netty . buffer . ByteBuf ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . internal . EmptyArrays ; import org . junit . After ; import org . junit . Before ; import org . junit . Test ; import java . util . Random ; import static io . netty . buffer . Unpooled . * ; import static org . hamcrest . CoreMatchers . * ; import static org . junit . Assert . * ; public class ByteArrayEncoderTest { private EmbeddedChannel ch ; @Before public void setUp ( ) { ch = new EmbeddedChannel ( new ByteArrayEncoder ( ) ) ; } @After public void tearDown ( ) { assertThat ( ch . finish ( ) , is ( false ) ) ; } @Test public void testEncode ( ) { byte [ ] b = new byte [ <int> ] ; new Random ( ) . nextBytes ( b ) ; ch . writeOutbound ( b ) ; ByteBuf encoded = ch . readOutbound ( ) ; assertThat ( encoded , is ( wrappedBuffer ( b ) ) ) ; encoded . release ( ) ; } @Test public void testEncodeEmpty ( ) { ch . writeOutbound ( EmptyArrays . EMPTY_BYTES ) ; assertThat ( ( ByteBuf ) ch . readOutbound ( ) , is ( sameInstance ( EMPTY_BUFFER ) ) ) ; } @Test public void testEncodeOtherType ( ) { String str = <str> ; ch . writeOutbound ( str ) ; assertThat ( ch . readOutbound ( ) , is ( ( Object ) str ) ) ; } } 

package org . elasticsearch . test . rest . test ; import org . elasticsearch . common . xcontent . yaml . YamlXContent ; import org . elasticsearch . test . rest . parser . GreaterThanParser ; import org . elasticsearch . test . rest . parser . IsFalseParser ; import org . elasticsearch . test . rest . parser . IsTrueParser ; import org . elasticsearch . test . rest . parser . LengthParser ; import org . elasticsearch . test . rest . parser . LessThanParser ; import org . elasticsearch . test . rest . parser . MatchParser ; import org . elasticsearch . test . rest . parser . RestTestSuiteParseContext ; import org . elasticsearch . test . rest . section . GreaterThanAssertion ; import org . elasticsearch . test . rest . section . IsFalseAssertion ; import org . elasticsearch . test . rest . section . IsTrueAssertion ; import org . elasticsearch . test . rest . section . LengthAssertion ; import org . elasticsearch . test . rest . section . LessThanAssertion ; import org . elasticsearch . test . rest . section . MatchAssertion ; import java . util . List ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . notNullValue ; public class AssertionParsersTests extends AbstractParserTestCase { public void testParseIsTrue ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; IsTrueParser isTrueParser = new IsTrueParser ( ) ; IsTrueAssertion trueAssertion = isTrueParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( trueAssertion , notNullValue ( ) ) ; assertThat ( trueAssertion . getField ( ) , equalTo ( <str> ) ) ; } public void testParseIsFalse ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; IsFalseParser isFalseParser = new IsFalseParser ( ) ; IsFalseAssertion falseAssertion = isFalseParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( falseAssertion , notNullValue ( ) ) ; assertThat ( falseAssertion . getField ( ) , equalTo ( <str> ) ) ; } public void testParseGreaterThan ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; GreaterThanParser greaterThanParser = new GreaterThanParser ( ) ; GreaterThanAssertion greaterThanAssertion = greaterThanParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( greaterThanAssertion , notNullValue ( ) ) ; assertThat ( greaterThanAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( greaterThanAssertion . getExpectedValue ( ) , instanceOf ( Integer . class ) ) ; assertThat ( ( Integer ) greaterThanAssertion . getExpectedValue ( ) , equalTo ( <int> ) ) ; } public void testParseLessThan ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; LessThanParser lessThanParser = new LessThanParser ( ) ; LessThanAssertion lessThanAssertion = lessThanParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( lessThanAssertion , notNullValue ( ) ) ; assertThat ( lessThanAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( lessThanAssertion . getExpectedValue ( ) , instanceOf ( Integer . class ) ) ; assertThat ( ( Integer ) lessThanAssertion . getExpectedValue ( ) , equalTo ( <int> ) ) ; } public void testParseLength ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; LengthParser lengthParser = new LengthParser ( ) ; LengthAssertion lengthAssertion = lengthParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( lengthAssertion , notNullValue ( ) ) ; assertThat ( lengthAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( lengthAssertion . getExpectedValue ( ) , instanceOf ( Integer . class ) ) ; assertThat ( ( Integer ) lengthAssertion . getExpectedValue ( ) , equalTo ( <int> ) ) ; } public void testParseMatchSimpleIntegerValue ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; MatchParser matchParser = new MatchParser ( ) ; MatchAssertion matchAssertion = matchParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( matchAssertion , notNullValue ( ) ) ; assertThat ( matchAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( matchAssertion . getExpectedValue ( ) , instanceOf ( Integer . class ) ) ; assertThat ( ( Integer ) matchAssertion . getExpectedValue ( ) , equalTo ( <int> ) ) ; } public void testParseMatchSimpleStringValue ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; MatchParser matchParser = new MatchParser ( ) ; MatchAssertion matchAssertion = matchParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( matchAssertion , notNullValue ( ) ) ; assertThat ( matchAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( matchAssertion . getExpectedValue ( ) , instanceOf ( String . class ) ) ; assertThat ( matchAssertion . getExpectedValue ( ) . toString ( ) , equalTo ( <str> ) ) ; } public void testParseMatchArray ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; MatchParser matchParser = new MatchParser ( ) ; MatchAssertion matchAssertion = matchParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( matchAssertion , notNullValue ( ) ) ; assertThat ( matchAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( matchAssertion . getExpectedValue ( ) , instanceOf ( List . class ) ) ; List strings = ( List ) matchAssertion . getExpectedValue ( ) ; assertThat ( strings . size ( ) , equalTo ( <int> ) ) ; assertThat ( strings . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( strings . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; } @SuppressWarnings ( <str> ) public void testParseMatchSourceValues ( ) throws Exception { parser = YamlXContent . yamlXContent . createParser ( <str> ) ; MatchParser matchParser = new MatchParser ( ) ; MatchAssertion matchAssertion = matchParser . parse ( new RestTestSuiteParseContext ( <str> , <str> , parser ) ) ; assertThat ( matchAssertion , notNullValue ( ) ) ; assertThat ( matchAssertion . getField ( ) , equalTo ( <str> ) ) ; assertThat ( matchAssertion . getExpectedValue ( ) , instanceOf ( Map . class ) ) ; Map < String , Object > expectedValue = ( Map < String , Object > ) matchAssertion . getExpectedValue ( ) ; assertThat ( expectedValue . size ( ) , equalTo ( <int> ) ) ; Object o = expectedValue . get ( <str> ) ; assertThat ( o , instanceOf ( Integer . class ) ) ; assertThat ( ( Integer ) o , equalTo ( <int> ) ) ; o = expectedValue . get ( <str> ) ; assertThat ( o , instanceOf ( String . class ) ) ; assertThat ( o . toString ( ) , equalTo ( <str> ) ) ; } } 

package com . badlogic . gdx . tools . texturepacker ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . g2d . TextureAtlas . TextureAtlasData ; import com . badlogic . gdx . graphics . g2d . TextureAtlas . TextureAtlasData . Page ; import com . badlogic . gdx . graphics . g2d . TextureAtlas . TextureAtlasData . Region ; import java . awt . Color ; import java . awt . Graphics2D ; import java . awt . geom . AffineTransform ; import java . awt . image . AffineTransformOp ; import java . awt . image . BufferedImage ; import java . io . File ; import java . io . IOException ; import javax . imageio . ImageIO ; public class TextureUnpacker { private static final String DEFAULT_OUTPUT_PATH = <str> ; private static final int NINEPATCH_PADDING = <int> ; private static final String OUTPUT_TYPE = <str> ; private static final String HELP = <str> ; private static final String ATLAS_FILE_EXTENSION = <str> ; private int parseArguments ( String [ ] args ) { int numArgs = args . length ; if ( numArgs < <int> ) return <int> ; boolean extension = args [ <int> ] . substring ( args [ <int> ] . length ( ) - ATLAS_FILE_EXTENSION . length ( ) ) . equals ( ATLAS_FILE_EXTENSION ) ; boolean directory = true ; if ( numArgs > = <int> ) directory & = checkDirectoryValidity ( args [ <int> ] ) ; if ( numArgs = = <int> ) directory & = checkDirectoryValidity ( args [ <int> ] ) ; return extension & & directory ? numArgs : <int> ; } private boolean checkDirectoryValidity ( String directory ) { File checkFile = new File ( directory ) ; boolean path = true ; try { checkFile . getCanonicalPath ( ) ; } catch ( Exception e ) { path = false ; } return path ; } public void splitAtlas ( TextureAtlasData atlas , String outputDir ) { File outputDirFile = new File ( outputDir ) ; if ( ! outputDirFile . exists ( ) ) { outputDirFile . mkdirs ( ) ; System . out . println ( String . format ( <str> , outputDirFile . getPath ( ) ) ) ; } for ( Page page : atlas . getPages ( ) ) { BufferedImage img = null ; try { img = ImageIO . read ( page . textureFile . file ( ) ) ; } catch ( IOException e ) { printExceptionAndExit ( e ) ; } for ( Region region : atlas . getRegions ( ) ) { System . out . println ( String . format ( <str> , region . name , region . left , region . top , region . width , region . height , region . rotate ) ) ; if ( region . page = = page ) { BufferedImage splitImage = null ; String extension = null ; if ( region . splits = = null ) { splitImage = extractImage ( img , region , outputDirFile , <int> ) ; extension = OUTPUT_TYPE ; } else { splitImage = extractNinePatch ( img , region , outputDirFile ) ; extension = String . format ( <str> , OUTPUT_TYPE ) ; } File imgOutput = new File ( outputDirFile , String . format ( <str> , region . index = = - <int> ? region . name : region . name + <str> + region . index , extension ) ) ; File imgDir = imgOutput . getParentFile ( ) ; if ( ! imgDir . exists ( ) ) { System . out . println ( String . format ( <str> , imgDir . getPath ( ) ) ) ; imgDir . mkdirs ( ) ; } try { ImageIO . write ( splitImage , OUTPUT_TYPE , imgOutput ) ; } catch ( IOException e ) { printExceptionAndExit ( e ) ; } } } } } private BufferedImage extractImage ( BufferedImage page , Region region , File outputDirFile , int padding ) { BufferedImage splitImage = null ; if ( region . rotate ) { BufferedImage srcImage = page . getSubimage ( region . left , region . top , region . height , region . width ) ; splitImage = new BufferedImage ( region . width , region . height , page . getType ( ) ) ; AffineTransform transform = new AffineTransform ( ) ; transform . rotate ( Math . toRadians ( <float> ) ) ; transform . translate ( <int> , - region . width ) ; AffineTransformOp op = new AffineTransformOp ( transform , AffineTransformOp . TYPE_BILINEAR ) ; op . filter ( srcImage , splitImage ) ; } else { splitImage = page . getSubimage ( region . left , region . top , region . width , region . height ) ; } if ( padding > <int> ) { BufferedImage paddedImage = new BufferedImage ( splitImage . getWidth ( ) + padding * <int> , splitImage . getHeight ( ) + padding * <int> , page . getType ( ) ) ; Graphics2D g2 = paddedImage . createGraphics ( ) ; g2 . drawImage ( splitImage , padding , padding , null ) ; g2 . dispose ( ) ; return paddedImage ; } else { return splitImage ; } } private BufferedImage extractNinePatch ( BufferedImage page , Region region , File outputDirFile ) { BufferedImage splitImage = extractImage ( page , region , outputDirFile , NINEPATCH_PADDING ) ; Graphics2D g2 = splitImage . createGraphics ( ) ; g2 . setColor ( Color . BLACK ) ; int startX = region . splits [ <int> ] + NINEPATCH_PADDING ; int endX = region . width - region . splits [ <int> ] + NINEPATCH_PADDING - <int> ; int startY = region . splits [ <int> ] + NINEPATCH_PADDING ; int endY = region . height - region . splits [ <int> ] + NINEPATCH_PADDING - <int> ; if ( endX > = startX ) g2 . drawLine ( startX , <int> , endX , <int> ) ; if ( endY > = startY ) g2 . drawLine ( <int> , startY , <int> , endY ) ; if ( region . pads ! = null ) { int padStartX = region . pads [ <int> ] + NINEPATCH_PADDING ; int padEndX = region . width - region . pads [ <int> ] + NINEPATCH_PADDING - <int> ; int padStartY = region . pads [ <int> ] + NINEPATCH_PADDING ; int padEndY = region . height - region . pads [ <int> ] + NINEPATCH_PADDING - <int> ; g2 . drawLine ( padStartX , splitImage . getHeight ( ) - <int> , padEndX , splitImage . getHeight ( ) - <int> ) ; g2 . drawLine ( splitImage . getWidth ( ) - <int> , padStartY , splitImage . getWidth ( ) - <int> , padEndY ) ; } g2 . dispose ( ) ; return splitImage ; } private void printExceptionAndExit ( Exception e ) { e . printStackTrace ( ) ; System . exit ( <int> ) ; } public static void main ( String [ ] args ) { TextureUnpacker unpacker = new TextureUnpacker ( ) ; String atlasFile = null , imageDir = null , outputDir = null ; switch ( unpacker . parseArguments ( args ) ) { case <int> : System . out . println ( HELP ) ; return ; case <int> : outputDir = args [ <int> ] ; case <int> : imageDir = args [ <int> ] ; case <int> : atlasFile = args [ <int> ] ; } File atlasFileHandle = new File ( atlasFile ) ; String atlasParentPath = atlasFileHandle . getParentFile ( ) . getAbsolutePath ( ) ; if ( imageDir = = null ) imageDir = atlasParentPath ; if ( outputDir = = null ) outputDir = ( new File ( atlasParentPath , DEFAULT_OUTPUT_PATH ) ) . getAbsolutePath ( ) ; TextureAtlasData atlas = new TextureAtlasData ( new FileHandle ( atlasFile ) , new FileHandle ( imageDir ) , false ) ; unpacker . splitAtlas ( atlas , outputDir ) ; } } 

package org . elasticsearch . search ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . TimeValue ; import java . io . IOException ; import static org . elasticsearch . common . unit . TimeValue . readTimeValue ; public class Scroll implements Streamable { private TimeValue keepAlive ; private Scroll ( ) { } public Scroll ( TimeValue keepAlive ) { this . keepAlive = keepAlive ; } public TimeValue keepAlive ( ) { return keepAlive ; } public static Scroll readScroll ( StreamInput in ) throws IOException { Scroll scroll = new Scroll ( ) ; scroll . readFrom ( in ) ; return scroll ; } @Override public void readFrom ( StreamInput in ) throws IOException { if ( in . readBoolean ( ) ) { keepAlive = readTimeValue ( in ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { if ( keepAlive = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; keepAlive . writeTo ( out ) ; } } } 

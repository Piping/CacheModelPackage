package org . gradle . gradleplugin . userinterface . swing . generic ; import org . gradle . foundation . TaskView ; import org . gradle . gradleplugin . foundation . favorites . FavoritesEditor ; import javax . swing . * ; import java . awt . * ; import java . awt . event . * ; import java . util . List ; public class SwingAddMultipleFavoritesInteraction implements FavoritesEditor . AddMultipleFavoritesInteraction { private Window parent ; public SwingAddMultipleFavoritesInteraction ( Window parent ) { this . parent = parent ; } public FavoritesEditor . AddMultipleResult promptUserToCombineTasks ( List < TaskView > tasksSample , String singleCommandSample ) { PromptToCombineTasksDialog dialog = new PromptToCombineTasksDialog ( ) ; return dialog . show ( parent , tasksSample , singleCommandSample ) ; } public class PromptToCombineTasksDialog { private JDialog dialog ; private FavoritesEditor . AddMultipleResult addMultipleResult ; private JRadioButton separatelyRadioButton ; private JRadioButton combinedRadioButton ; private ButtonGroup buttonGroup ; private JLabel separateLine1 ; private JLabel separateLine2 ; private JLabel separateLine3 ; private JLabel combinedLine1 ; public FavoritesEditor . AddMultipleResult show ( Window parent , List < TaskView > tasksSample , String singleCommandSample ) { setupUI ( parent ) ; populateValues ( tasksSample , singleCommandSample ) ; dialog . setVisible ( true ) ; return this . addMultipleResult ; } private void populateValues ( List < TaskView > tasksSample , String singleCommandSample ) { separatelyRadioButton . setText ( <str> + tasksSample . size ( ) + <str> ) ; separateLine1 . setText ( <str> + tasksSample . get ( <int> ) . getFullTaskName ( ) + <str> ) ; String secondTask = <str> + tasksSample . get ( <int> ) . getFullTaskName ( ) + <str> ; String thirdTask = <str> ; if ( tasksSample . size ( ) > <int> ) { secondTask + = <str> ; thirdTask = <str> + tasksSample . get ( <int> ) . getFullTaskName ( ) + <str> ; if ( tasksSample . size ( ) > <int> ) { thirdTask + = <str> ; } } separateLine2 . setText ( secondTask ) ; separateLine3 . setText ( thirdTask ) ; separateLine3 . setVisible ( tasksSample . size ( ) > <int> ) ; combinedLine1 . setText ( <str> + singleCommandSample + <str> ) ; } private void setupUI ( Window parent ) { dialog = Utility . createDialog ( parent , <str> , true ) ; dialog . setSize ( <int> , <int> ) ; dialog . setDefaultCloseOperation ( JDialog . DO_NOTHING_ON_CLOSE ) ; dialog . addWindowListener ( new WindowAdapter ( ) { public void windowClosing ( WindowEvent e ) { close ( FavoritesEditor . AddMultipleResult . Cancel ) ; } } ) ; JPanel panel = new JPanel ( new BorderLayout ( ) ) ; dialog . getContentPane ( ) . add ( panel ) ; panel . add ( createMainPanel ( ) , BorderLayout . CENTER ) ; panel . add ( createButtonPanel ( ) , BorderLayout . SOUTH ) ; panel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; dialog . setLocationRelativeTo ( dialog . getParent ( ) ) ; } private Component createMainPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; separatelyRadioButton = new JRadioButton ( ) ; combinedRadioButton = new JRadioButton ( <str> ) ; buttonGroup = new ButtonGroup ( ) ; buttonGroup . add ( separatelyRadioButton ) ; buttonGroup . add ( combinedRadioButton ) ; separatelyRadioButton . setSelected ( true ) ; panel . add ( Utility . addLeftJustifiedComponent ( new JLabel ( <str> ) ) ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( separatelyRadioButton ) ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( createSeparateSamplePanel ( ) ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( Utility . addLeftJustifiedComponent ( combinedRadioButton ) ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( createCombinedSamplePanel ( ) ) ; panel . add ( Box . createVerticalGlue ( ) ) ; return panel ; } private JPanel createSeparateSamplePanel ( ) { separateLine1 = new JLabel ( ) ; separateLine2 = new JLabel ( ) ; separateLine3 = new JLabel ( ) ; JPanel separateSamplePanel = new JPanel ( ) ; separateSamplePanel . setLayout ( new BoxLayout ( separateSamplePanel , BoxLayout . Y_AXIS ) ) ; separateSamplePanel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; separateSamplePanel . add ( Utility . addLeftJustifiedComponent ( separateLine1 ) ) ; separateSamplePanel . add ( Utility . addLeftJustifiedComponent ( separateLine2 ) ) ; separateSamplePanel . add ( Utility . addLeftJustifiedComponent ( separateLine3 ) ) ; return separateSamplePanel ; } private JPanel createCombinedSamplePanel ( ) { combinedLine1 = new JLabel ( ) ; JPanel combinedSamplePanel = new JPanel ( ) ; combinedSamplePanel . setLayout ( new BoxLayout ( combinedSamplePanel , BoxLayout . Y_AXIS ) ) ; combinedSamplePanel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; combinedSamplePanel . add ( Utility . addLeftJustifiedComponent ( combinedLine1 ) ) ; return combinedSamplePanel ; } private FavoritesEditor . AddMultipleResult getCurrentSelection ( ) { if ( separatelyRadioButton . isSelected ( ) ) { return FavoritesEditor . AddMultipleResult . AddSeparately ; } return FavoritesEditor . AddMultipleResult . AddAsSingleCommand ; } private Component createButtonPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . X_AXIS ) ) ; JButton okButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { close ( getCurrentSelection ( ) ) ; } } ) ; dialog . getRootPane ( ) . setDefaultButton ( okButton ) ; JButton cancelButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { close ( FavoritesEditor . AddMultipleResult . Cancel ) ; } } ) ; dialog . getRootPane ( ) . registerKeyboardAction ( new ActionListener ( ) { public void actionPerformed ( ActionEvent actionEvent ) { close ( FavoritesEditor . AddMultipleResult . Cancel ) ; } } , KeyStroke . getKeyStroke ( KeyEvent . VK_ESCAPE , <int> ) , JComponent . WHEN_IN_FOCUSED_WINDOW ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . add ( okButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( cancelButton ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; return panel ; } private void close ( FavoritesEditor . AddMultipleResult addMultipleResult ) { this . addMultipleResult = addMultipleResult ; dialog . setVisible ( false ) ; } } } 

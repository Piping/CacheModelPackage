package io . netty . handler . codec ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . CharsetUtil ; import io . netty . util . ReferenceCountUtil ; import org . junit . Test ; import java . nio . charset . Charset ; import static io . netty . util . ReferenceCountUtil . releaseLater ; import static org . junit . Assert . * ; public class DelimiterBasedFrameDecoderTest { @Test public void testMultipleLinesStrippedDelimiters ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new DelimiterBasedFrameDecoder ( <int> , true , Delimiters . lineDelimiter ( ) ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , Charset . defaultCharset ( ) ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( Charset . defaultCharset ( ) ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( Charset . defaultCharset ( ) ) ) ; assertNull ( ch . readInbound ( ) ) ; ch . finish ( ) ; } @Test public void testIncompleteLinesStrippedDelimiters ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new DelimiterBasedFrameDecoder ( <int> , true , Delimiters . lineDelimiter ( ) ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , Charset . defaultCharset ( ) ) ) ; assertNull ( ch . readInbound ( ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , Charset . defaultCharset ( ) ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( Charset . defaultCharset ( ) ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( Charset . defaultCharset ( ) ) ) ; assertNull ( ch . readInbound ( ) ) ; ch . finish ( ) ; } @Test public void testMultipleLines ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new DelimiterBasedFrameDecoder ( <int> , false , Delimiters . lineDelimiter ( ) ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , Charset . defaultCharset ( ) ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( Charset . defaultCharset ( ) ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( Charset . defaultCharset ( ) ) ) ; assertNull ( ch . readInbound ( ) ) ; ch . finish ( ) ; } @Test public void testIncompleteLines ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new DelimiterBasedFrameDecoder ( <int> , false , Delimiters . lineDelimiter ( ) ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , Charset . defaultCharset ( ) ) ) ; assertNull ( ch . readInbound ( ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , Charset . defaultCharset ( ) ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( Charset . defaultCharset ( ) ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( Charset . defaultCharset ( ) ) ) ; assertNull ( ch . readInbound ( ) ) ; ch . finish ( ) ; } @Test public void testDecode ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new DelimiterBasedFrameDecoder ( <int> , true , Delimiters . lineDelimiter ( ) ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . US_ASCII ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( CharsetUtil . US_ASCII ) ) ; assertEquals ( <str> , releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) . toString ( CharsetUtil . US_ASCII ) ) ; assertNull ( ch . readInbound ( ) ) ; ch . finish ( ) ; ReferenceCountUtil . release ( ch . readInbound ( ) ) ; } } 

package com . badlogic . gdx . utils ; import java . io . DataInputStream ; import java . io . IOException ; import java . io . InputStream ; public class DataInput extends DataInputStream { private char [ ] chars = new char [ <int> ] ; public DataInput ( InputStream in ) { super ( in ) ; } public int readInt ( boolean optimizePositive ) throws IOException { int b = read ( ) ; int result = b & <hex> ; if ( ( b & <hex> ) ! = <int> ) { b = read ( ) ; result | = ( b & <hex> ) < < <int> ; if ( ( b & <hex> ) ! = <int> ) { b = read ( ) ; result | = ( b & <hex> ) < < <int> ; if ( ( b & <hex> ) ! = <int> ) { b = read ( ) ; result | = ( b & <hex> ) < < <int> ; if ( ( b & <hex> ) ! = <int> ) { b = read ( ) ; result | = ( b & <hex> ) < < <int> ; } } } } return optimizePositive ? result : ( ( result > > > <int> ) ^ - ( result & <int> ) ) ; } public String readString ( ) throws IOException { int charCount = readInt ( true ) ; switch ( charCount ) { case <int> : return null ; case <int> : return <str> ; } charCount - - ; if ( chars . length < charCount ) chars = new char [ charCount ] ; char [ ] chars = this . chars ; int charIndex = <int> ; int b = <int> ; while ( charIndex < charCount ) { b = read ( ) ; if ( b > <int> ) break ; chars [ charIndex + + ] = ( char ) b ; } if ( charIndex < charCount ) readUtf8_slow ( charCount , charIndex , b ) ; return new String ( chars , <int> , charCount ) ; } private void readUtf8_slow ( int charCount , int charIndex , int b ) throws IOException { char [ ] chars = this . chars ; while ( true ) { switch ( b > > <int> ) { case <int> : case <int> : case <int> : case <int> : case <int> : case <int> : case <int> : case <int> : chars [ charIndex ] = ( char ) b ; break ; case <int> : case <int> : chars [ charIndex ] = ( char ) ( ( b & <hex> ) < < <int> | read ( ) & <hex> ) ; break ; case <int> : chars [ charIndex ] = ( char ) ( ( b & <hex> ) < < <int> | ( read ( ) & <hex> ) < < <int> | read ( ) & <hex> ) ; break ; } if ( + + charIndex > = charCount ) break ; b = read ( ) & <hex> ; } } } 

package org . eclipse . debug . internal . ui . views . console ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . console . IConsoleLineTracker ; import org . eclipse . debug . ui . console . IConsoleLineTrackerExtension ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . IRegion ; import org . eclipse . jface . text . Region ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . ui . console . IConsoleConstants ; import org . eclipse . ui . console . IPatternMatchListener ; import org . eclipse . ui . console . PatternMatchEvent ; import org . eclipse . ui . console . TextConsole ; public class ConsoleLineNotifier implements IPatternMatchListener , IPropertyChangeListener { private List < IConsoleLineTracker > fListeners = new ArrayList < IConsoleLineTracker > ( <int> ) ; private ProcessConsole fConsole = null ; @Override public void connect ( TextConsole console ) { if ( console instanceof ProcessConsole ) { fConsole = ( ProcessConsole ) console ; IConsoleLineTracker [ ] lineTrackers = DebugUIPlugin . getDefault ( ) . getProcessConsoleManager ( ) . getLineTrackers ( fConsole . getProcess ( ) ) ; for ( int i = <int> ; i < lineTrackers . length ; i + + ) { lineTrackers [ i ] . init ( fConsole ) ; addConsoleListener ( lineTrackers [ i ] ) ; } fConsole . addPropertyChangeListener ( this ) ; } } @Override public synchronized void disconnect ( ) { try { IDocument document = fConsole . getDocument ( ) ; if ( document ! = null ) { int lastLine = document . getNumberOfLines ( ) - <int> ; if ( document . getLineDelimiter ( lastLine ) = = null ) { IRegion lineInformation = document . getLineInformation ( lastLine ) ; lineAppended ( lineInformation ) ; } } } catch ( BadLocationException e ) { } } public synchronized void consoleClosed ( ) { int size = fListeners . size ( ) ; for ( int i = <int> ; i < size ; i + + ) { IConsoleLineTracker tracker = fListeners . get ( i ) ; if ( tracker instanceof IConsoleLineTrackerExtension ) { ( ( IConsoleLineTrackerExtension ) tracker ) . consoleClosed ( ) ; } tracker . dispose ( ) ; } fConsole = null ; fListeners = null ; } public void addConsoleListener ( IConsoleLineTracker listener ) { if ( ! fListeners . contains ( listener ) ) { fListeners . add ( listener ) ; } } @Override public void matchFound ( PatternMatchEvent event ) { try { IDocument document = fConsole . getDocument ( ) ; int lineOfOffset = document . getLineOfOffset ( event . getOffset ( ) ) ; String delimiter = document . getLineDelimiter ( lineOfOffset ) ; int strip = delimiter = = null ? <int> : delimiter . length ( ) ; Region region = new Region ( event . getOffset ( ) , event . getLength ( ) - strip ) ; lineAppended ( region ) ; } catch ( BadLocationException e ) { } } public void lineAppended ( IRegion region ) { int size = fListeners . size ( ) ; for ( int i = <int> ; i < size ; i + + ) { IConsoleLineTracker tracker = fListeners . get ( i ) ; tracker . lineAppended ( region ) ; } } @Override public void propertyChange ( PropertyChangeEvent event ) { if ( event . getProperty ( ) . equals ( IConsoleConstants . P_CONSOLE_OUTPUT_COMPLETE ) ) { fConsole . removePropertyChangeListener ( this ) ; consoleClosed ( ) ; } } @Override public String getPattern ( ) { return <str> ; } @Override public int getCompilerFlags ( ) { return <int> ; } @Override public String getLineQualifier ( ) { return <str> ; } } 

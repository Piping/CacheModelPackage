package org . gradle . api . internal . cache ; public class HeapProportionalSizer { private static final int DEFAULT_SIZES_MAX_HEAP_MB = <int> ; private static final int ASSUMED_USED_HEAP = <int> ; private static final double MIN_RATIO = <float> ; private final int maxHeapMB ; private final double sizingRatio ; public HeapProportionalSizer ( int maxHeapMB ) { this . maxHeapMB = maxHeapMB ; this . sizingRatio = calculateRatio ( ) ; } public HeapProportionalSizer ( ) { this ( calculateMaxHeapMB ( ) ) ; } private static int calculateMaxHeapMB ( ) { return ( int ) ( Runtime . getRuntime ( ) . maxMemory ( ) / ( <int> * <int> ) ) ; } private double calculateRatio ( ) { return Math . max ( ( double ) ( maxHeapMB - ASSUMED_USED_HEAP ) / ( double ) ( DEFAULT_SIZES_MAX_HEAP_MB - ASSUMED_USED_HEAP ) , MIN_RATIO ) ; } public int scaleValue ( int referenceValue ) { return scaleValue ( referenceValue , <int> ) ; } public int scaleValue ( int referenceValue , int granularity ) { if ( referenceValue < granularity ) { throw new IllegalArgumentException ( <str> ) ; } return ( int ) ( ( double ) referenceValue * sizingRatio ) / granularity * granularity ; } } 

package org . elasticsearch . index . engine ; import org . apache . lucene . codecs . Codec ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . NumericDocValuesField ; import org . apache . lucene . document . TextField ; import org . apache . lucene . index . * ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . TermQuery ; import org . apache . lucene . store . Directory ; import org . apache . lucene . store . MockDirectoryWrapper ; import org . apache . lucene . util . IOUtils ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . codec . CodecService ; import org . elasticsearch . index . indexing . ShardIndexingService ; import org . elasticsearch . index . mapper . Mapping ; import org . elasticsearch . index . mapper . ParseContext ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . index . mapper . internal . SourceFieldMapper ; import org . elasticsearch . index . mapper . internal . UidFieldMapper ; import org . elasticsearch . index . shard . MergeSchedulerConfig ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . shard . ShardUtils ; import org . elasticsearch . index . store . DirectoryService ; import org . elasticsearch . index . store . DirectoryUtils ; import org . elasticsearch . index . store . Store ; import org . elasticsearch . index . translog . Translog ; import org . elasticsearch . index . translog . TranslogConfig ; import org . elasticsearch . test . DummyShardLock ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . IndexSettingsModule ; import org . elasticsearch . threadpool . ThreadPool ; import org . hamcrest . MatcherAssert ; import org . junit . After ; import org . junit . Before ; import java . io . IOException ; import java . nio . file . Path ; import java . util . Arrays ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . atomic . AtomicBoolean ; import static org . hamcrest . Matchers . * ; public class ShadowEngineTests extends ESTestCase { protected final ShardId shardId = new ShardId ( new Index ( <str> ) , <int> ) ; protected ThreadPool threadPool ; private Store store ; private Store storeReplica ; protected Engine primaryEngine ; protected Engine replicaEngine ; private IndexSettings defaultSettings ; private String codecName ; private Path dirPath ; @Override @Before public void setUp ( ) throws Exception { super . setUp ( ) ; CodecService codecService = new CodecService ( null , logger ) ; String name = Codec . getDefault ( ) . getName ( ) ; if ( Arrays . asList ( codecService . availableCodecs ( ) ) . contains ( name ) ) { codecName = name ; } else { codecName = <str> ; } defaultSettings = IndexSettingsModule . newIndexSettings ( <str> , Settings . builder ( ) . put ( EngineConfig . INDEX_COMPOUND_ON_FLUSH , randomBoolean ( ) ) . put ( EngineConfig . INDEX_GC_DELETES_SETTING , <str> ) . put ( EngineConfig . INDEX_CODEC_SETTING , codecName ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ) ; threadPool = new ThreadPool ( getClass ( ) . getName ( ) ) ; dirPath = createTempDir ( ) ; store = createStore ( dirPath ) ; storeReplica = createStore ( dirPath ) ; Lucene . cleanLuceneIndex ( store . directory ( ) ) ; Lucene . cleanLuceneIndex ( storeReplica . directory ( ) ) ; primaryEngine = createInternalEngine ( store , createTempDir ( <str> ) ) ; LiveIndexWriterConfig currentIndexWriterConfig = ( ( InternalEngine ) primaryEngine ) . getCurrentIndexWriterConfig ( ) ; assertEquals ( primaryEngine . config ( ) . getCodec ( ) . getName ( ) , codecService . codec ( codecName ) . getName ( ) ) ; assertEquals ( currentIndexWriterConfig . getCodec ( ) . getName ( ) , codecService . codec ( codecName ) . getName ( ) ) ; if ( randomBoolean ( ) ) { primaryEngine . config ( ) . setEnableGcDeletes ( false ) ; } replicaEngine = createShadowEngine ( storeReplica ) ; assertEquals ( replicaEngine . config ( ) . getCodec ( ) . getName ( ) , codecService . codec ( codecName ) . getName ( ) ) ; if ( randomBoolean ( ) ) { replicaEngine . config ( ) . setEnableGcDeletes ( false ) ; } } @Override @After public void tearDown ( ) throws Exception { super . tearDown ( ) ; replicaEngine . close ( ) ; storeReplica . close ( ) ; primaryEngine . close ( ) ; store . close ( ) ; terminate ( threadPool ) ; } private ParseContext . Document testDocumentWithTextField ( ) { ParseContext . Document document = testDocument ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; return document ; } private ParseContext . Document testDocument ( ) { return new ParseContext . Document ( ) ; } private ParsedDocument testParsedDocument ( String uid , String id , String type , String routing , long timestamp , long ttl , ParseContext . Document document , BytesReference source , Mapping mappingsUpdate ) { Field uidField = new Field ( <str> , uid , UidFieldMapper . Defaults . FIELD_TYPE ) ; Field versionField = new NumericDocValuesField ( <str> , <int> ) ; document . add ( uidField ) ; document . add ( versionField ) ; return new ParsedDocument ( uidField , versionField , id , type , routing , timestamp , ttl , Arrays . asList ( document ) , source , mappingsUpdate ) ; } protected Store createStore ( Path p ) throws IOException { return createStore ( newMockFSDirectory ( p ) ) ; } protected Store createStore ( final Directory directory ) throws IOException { IndexSettings indexSettings = IndexSettingsModule . newIndexSettings ( shardId . index ( ) , Settings . EMPTY ) ; final DirectoryService directoryService = new DirectoryService ( shardId , indexSettings ) { @Override public Directory newDirectory ( ) throws IOException { return directory ; } @Override public long throttleTimeInNanos ( ) { return <int> ; } } ; return new Store ( shardId , indexSettings , directoryService , new DummyShardLock ( shardId ) ) ; } protected SnapshotDeletionPolicy createSnapshotDeletionPolicy ( ) { return new SnapshotDeletionPolicy ( new KeepOnlyLastCommitDeletionPolicy ( ) ) ; } protected ShadowEngine createShadowEngine ( Store store ) { return createShadowEngine ( defaultSettings , store ) ; } protected InternalEngine createInternalEngine ( Store store , Path translogPath ) { return createInternalEngine ( defaultSettings , store , translogPath ) ; } protected ShadowEngine createShadowEngine ( IndexSettings indexSettings , Store store ) { return new ShadowEngine ( config ( indexSettings , store , null , new MergeSchedulerConfig ( indexSettings ) , null ) ) ; } protected InternalEngine createInternalEngine ( IndexSettings indexSettings , Store store , Path translogPath ) { return createInternalEngine ( indexSettings , store , translogPath , newMergePolicy ( ) ) ; } protected InternalEngine createInternalEngine ( IndexSettings indexSettings , Store store , Path translogPath , MergePolicy mergePolicy ) { return new InternalEngine ( config ( indexSettings , store , translogPath , new MergeSchedulerConfig ( indexSettings ) , mergePolicy ) , true ) ; } public EngineConfig config ( IndexSettings indexSettings , Store store , Path translogPath , MergeSchedulerConfig mergeSchedulerConfig , MergePolicy mergePolicy ) { IndexWriterConfig iwc = newIndexWriterConfig ( ) ; TranslogConfig translogConfig = new TranslogConfig ( shardId , translogPath , indexSettings , Translog . Durabilty . REQUEST , BigArrays . NON_RECYCLING_INSTANCE , threadPool ) ; EngineConfig config = new EngineConfig ( shardId , threadPool , new ShardIndexingService ( shardId , indexSettings ) , indexSettings , null , store , createSnapshotDeletionPolicy ( ) , mergePolicy , mergeSchedulerConfig , iwc . getAnalyzer ( ) , iwc . getSimilarity ( ) , new CodecService ( null , logger ) , new Engine . EventListener ( ) { @Override public void onFailedEngine ( String reason , @Nullable Throwable t ) { } } , null , IndexSearcher . getDefaultQueryCache ( ) , IndexSearcher . getDefaultQueryCachingPolicy ( ) , translogConfig , TimeValue . timeValueMinutes ( <int> ) ) ; try { config . setCreate ( Lucene . indexExists ( store . directory ( ) ) = = false ) ; } catch ( IOException e ) { throw new ElasticsearchException ( <str> , e ) ; } return config ; } protected Term newUid ( String id ) { return new Term ( <str> , id ) ; } protected static final BytesReference B_1 = new BytesArray ( new byte [ ] { <int> } ) ; protected static final BytesReference B_2 = new BytesArray ( new byte [ ] { <int> } ) ; protected static final BytesReference B_3 = new BytesArray ( new byte [ ] { <int> } ) ; public void testCommitStats ( ) { ParsedDocument doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; CommitStats stats1 = replicaEngine . commitStats ( ) ; assertThat ( stats1 . getGeneration ( ) , greaterThan ( <int> l ) ) ; assertThat ( stats1 . getId ( ) , notNullValue ( ) ) ; assertThat ( stats1 . getUserData ( ) , hasKey ( Translog . TRANSLOG_GENERATION_KEY ) ) ; primaryEngine . flush ( ) ; replicaEngine . flush ( ) ; CommitStats stats2 = replicaEngine . commitStats ( ) ; assertThat ( stats2 . getGeneration ( ) , greaterThan ( stats1 . getGeneration ( ) ) ) ; assertThat ( stats2 . getId ( ) , notNullValue ( ) ) ; assertThat ( stats2 . getId ( ) , not ( equalTo ( stats1 . getId ( ) ) ) ) ; assertThat ( stats2 . getUserData ( ) , hasKey ( Translog . TRANSLOG_GENERATION_KEY ) ) ; assertThat ( stats2 . getUserData ( ) , hasKey ( Translog . TRANSLOG_UUID_KEY ) ) ; assertThat ( stats2 . getUserData ( ) . get ( Translog . TRANSLOG_GENERATION_KEY ) , not ( equalTo ( stats1 . getUserData ( ) . get ( Translog . TRANSLOG_GENERATION_KEY ) ) ) ) ; assertThat ( stats2 . getUserData ( ) . get ( Translog . TRANSLOG_UUID_KEY ) , equalTo ( stats1 . getUserData ( ) . get ( Translog . TRANSLOG_UUID_KEY ) ) ) ; } public void testSegments ( ) throws Exception { primaryEngine . close ( ) ; primaryEngine = createInternalEngine ( defaultSettings , store , createTempDir ( ) , NoMergePolicy . INSTANCE ) ; List < Segment > segments = primaryEngine . segments ( false ) ; assertThat ( segments . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getCount ( ) , equalTo ( <int> l ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getMemoryInBytes ( ) , equalTo ( <int> l ) ) ; final boolean defaultCompound = defaultSettings . getSettings ( ) . getAsBoolean ( EngineConfig . INDEX_COMPOUND_ON_FLUSH , true ) ; ParsedDocument doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; ParsedDocument doc2 = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_2 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc2 ) ) ; primaryEngine . refresh ( <str> ) ; segments = primaryEngine . segments ( false ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; SegmentsStats stats = primaryEngine . segmentsStats ( ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( stats . getTermsMemoryInBytes ( ) , greaterThan ( <int> l ) ) ; assertThat ( stats . getStoredFieldsMemoryInBytes ( ) , greaterThan ( <int> l ) ) ; assertThat ( stats . getTermVectorsMemoryInBytes ( ) , equalTo ( <int> l ) ) ; assertThat ( stats . getNormsMemoryInBytes ( ) , greaterThan ( <int> l ) ) ; assertThat ( stats . getDocValuesMemoryInBytes ( ) , greaterThan ( <int> l ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( false ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( defaultCompound ) ) ; assertThat ( segments . get ( <int> ) . ramTree , nullValue ( ) ) ; segments = replicaEngine . segments ( false ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; stats = replicaEngine . segmentsStats ( ) ; assertThat ( stats . getCount ( ) , equalTo ( <int> l ) ) ; assertThat ( stats . getTermsMemoryInBytes ( ) , equalTo ( <int> l ) ) ; assertThat ( stats . getStoredFieldsMemoryInBytes ( ) , equalTo ( <int> l ) ) ; assertThat ( stats . getTermVectorsMemoryInBytes ( ) , equalTo ( <int> l ) ) ; assertThat ( stats . getNormsMemoryInBytes ( ) , equalTo ( <int> l ) ) ; assertThat ( stats . getDocValuesMemoryInBytes ( ) , equalTo ( <int> l ) ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; primaryEngine . flush ( ) ; replicaEngine . refresh ( <str> ) ; segments = primaryEngine . segments ( false ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( defaultCompound ) ) ; segments = replicaEngine . segments ( false ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; assertThat ( replicaEngine . segmentsStats ( ) . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( defaultCompound ) ) ; primaryEngine . config ( ) . setCompoundOnFlush ( false ) ; primaryEngine . onSettingsChanged ( ) ; ParsedDocument doc3 = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_3 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc3 ) ) ; primaryEngine . refresh ( <str> ) ; segments = primaryEngine . segments ( false ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getTermsMemoryInBytes ( ) , greaterThan ( stats . getTermsMemoryInBytes ( ) ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getStoredFieldsMemoryInBytes ( ) , greaterThan ( stats . getStoredFieldsMemoryInBytes ( ) ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getTermVectorsMemoryInBytes ( ) , equalTo ( <int> l ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getNormsMemoryInBytes ( ) , greaterThan ( stats . getNormsMemoryInBytes ( ) ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getDocValuesMemoryInBytes ( ) , greaterThan ( stats . getDocValuesMemoryInBytes ( ) ) ) ; assertThat ( segments . get ( <int> ) . getGeneration ( ) < segments . get ( <int> ) . getGeneration ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( defaultCompound ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( false ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( false ) ) ; primaryEngine . flush ( ) ; replicaEngine . refresh ( <str> ) ; segments = replicaEngine . segments ( false ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; assertThat ( replicaEngine . segmentsStats ( ) . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( replicaEngine . segmentsStats ( ) . getTermsMemoryInBytes ( ) , greaterThan ( stats . getTermsMemoryInBytes ( ) ) ) ; assertThat ( replicaEngine . segmentsStats ( ) . getStoredFieldsMemoryInBytes ( ) , greaterThan ( stats . getStoredFieldsMemoryInBytes ( ) ) ) ; assertThat ( replicaEngine . segmentsStats ( ) . getTermVectorsMemoryInBytes ( ) , equalTo ( <int> l ) ) ; assertThat ( replicaEngine . segmentsStats ( ) . getNormsMemoryInBytes ( ) , greaterThan ( stats . getNormsMemoryInBytes ( ) ) ) ; assertThat ( replicaEngine . segmentsStats ( ) . getDocValuesMemoryInBytes ( ) , greaterThan ( stats . getDocValuesMemoryInBytes ( ) ) ) ; assertThat ( segments . get ( <int> ) . getGeneration ( ) < segments . get ( <int> ) . getGeneration ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( defaultCompound ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( false ) ) ; primaryEngine . delete ( new Engine . Delete ( <str> , <str> , newUid ( <str> ) ) ) ; primaryEngine . refresh ( <str> ) ; segments = primaryEngine . segments ( false ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getGeneration ( ) < segments . get ( <int> ) . getGeneration ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( defaultCompound ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( false ) ) ; primaryEngine . flush ( ) ; replicaEngine . refresh ( <str> ) ; primaryEngine . config ( ) . setCompoundOnFlush ( true ) ; primaryEngine . onSettingsChanged ( ) ; ParsedDocument doc4 = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_3 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc4 ) ) ; primaryEngine . refresh ( <str> ) ; segments = primaryEngine . segments ( false ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; assertThat ( primaryEngine . segmentsStats ( ) . getCount ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getGeneration ( ) < segments . get ( <int> ) . getGeneration ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( defaultCompound ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( false ) ) ; assertThat ( segments . get ( <int> ) . isCommitted ( ) , equalTo ( false ) ) ; assertThat ( segments . get ( <int> ) . isSearch ( ) , equalTo ( true ) ) ; assertThat ( segments . get ( <int> ) . getNumDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . getDeletedDocs ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . isCompound ( ) , equalTo ( true ) ) ; } public void testVerboseSegments ( ) throws Exception { primaryEngine . close ( ) ; primaryEngine = createInternalEngine ( defaultSettings , store , createTempDir ( ) , NoMergePolicy . INSTANCE ) ; List < Segment > segments = primaryEngine . segments ( true ) ; assertThat ( segments . isEmpty ( ) , equalTo ( true ) ) ; ParsedDocument doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; primaryEngine . refresh ( <str> ) ; segments = primaryEngine . segments ( true ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . ramTree , notNullValue ( ) ) ; ParsedDocument doc2 = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_2 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc2 ) ) ; primaryEngine . refresh ( <str> ) ; ParsedDocument doc3 = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_3 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc3 ) ) ; primaryEngine . refresh ( <str> ) ; segments = primaryEngine . segments ( true ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . ramTree , notNullValue ( ) ) ; assertThat ( segments . get ( <int> ) . ramTree , notNullValue ( ) ) ; assertThat ( segments . get ( <int> ) . ramTree , notNullValue ( ) ) ; primaryEngine . flush ( ) ; replicaEngine . refresh ( <str> ) ; segments = replicaEngine . segments ( true ) ; assertThat ( segments . size ( ) , equalTo ( <int> ) ) ; assertThat ( segments . get ( <int> ) . ramTree , notNullValue ( ) ) ; assertThat ( segments . get ( <int> ) . ramTree , notNullValue ( ) ) ; assertThat ( segments . get ( <int> ) . ramTree , notNullValue ( ) ) ; } public void testShadowEngineIgnoresWriteOperations ( ) throws Exception { ParseContext . Document document = testDocumentWithTextField ( ) ; document . add ( new Field ( SourceFieldMapper . NAME , B_1 . toBytes ( ) , SourceFieldMapper . Defaults . FIELD_TYPE ) ) ; ParsedDocument doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , document , B_1 , null ) ; try { replicaEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException e ) { } replicaEngine . refresh ( <str> ) ; Engine . Searcher searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; Engine . GetResult getResult = replicaEngine . get ( new Engine . Get ( true , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( false ) ) ; getResult . release ( ) ; document = testDocument ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , document , B_1 , null ) ; try { replicaEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException e ) { } replicaEngine . refresh ( <str> ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; getResult = replicaEngine . get ( new Engine . Get ( true , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( false ) ) ; getResult . release ( ) ; document = testDocumentWithTextField ( ) ; document . add ( new Field ( SourceFieldMapper . NAME , B_1 . toBytes ( ) , SourceFieldMapper . Defaults . FIELD_TYPE ) ) ; doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , document , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; primaryEngine . flush ( ) ; replicaEngine . refresh ( <str> ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; getResult = replicaEngine . get ( new Engine . Get ( false , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( true ) ) ; assertThat ( getResult . docIdAndVersion ( ) , notNullValue ( ) ) ; getResult . release ( ) ; try { replicaEngine . delete ( new Engine . Delete ( <str> , <str> , newUid ( <str> ) ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException e ) { } replicaEngine . flush ( ) ; replicaEngine . refresh ( <str> ) ; primaryEngine . refresh ( <str> ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; getResult = replicaEngine . get ( new Engine . Get ( false , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( true ) ) ; assertThat ( getResult . docIdAndVersion ( ) , notNullValue ( ) ) ; getResult . release ( ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; getResult = primaryEngine . get ( new Engine . Get ( false , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( true ) ) ; assertThat ( getResult . docIdAndVersion ( ) , notNullValue ( ) ) ; getResult . release ( ) ; } public void testSimpleOperations ( ) throws Exception { Engine . Searcher searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; searchResult . close ( ) ; ParseContext . Document document = testDocumentWithTextField ( ) ; document . add ( new Field ( SourceFieldMapper . NAME , B_1 . toBytes ( ) , SourceFieldMapper . Defaults . FIELD_TYPE ) ) ; ParsedDocument doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , document , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; Engine . GetResult getResult = primaryEngine . get ( new Engine . Get ( true , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( true ) ) ; assertThat ( getResult . source ( ) . source . toBytesArray ( ) , equalTo ( B_1 . toBytesArray ( ) ) ) ; assertThat ( getResult . docIdAndVersion ( ) , nullValue ( ) ) ; getResult . release ( ) ; getResult = replicaEngine . get ( new Engine . Get ( true , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( false ) ) ; getResult . release ( ) ; getResult = primaryEngine . get ( new Engine . Get ( false , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( false ) ) ; getResult . release ( ) ; primaryEngine . refresh ( <str> ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; getResult = primaryEngine . get ( new Engine . Get ( false , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( true ) ) ; assertThat ( getResult . docIdAndVersion ( ) , notNullValue ( ) ) ; getResult . release ( ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; document = testDocument ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; document . add ( new Field ( SourceFieldMapper . NAME , B_2 . toBytes ( ) , SourceFieldMapper . Defaults . FIELD_TYPE ) ) ; doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , document , B_2 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; getResult = primaryEngine . get ( new Engine . Get ( true , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( true ) ) ; assertThat ( getResult . source ( ) . source . toBytesArray ( ) , equalTo ( B_2 . toBytesArray ( ) ) ) ; assertThat ( getResult . docIdAndVersion ( ) , nullValue ( ) ) ; getResult . release ( ) ; primaryEngine . refresh ( <str> ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; primaryEngine . flush ( ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; replicaEngine . refresh ( <str> ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; primaryEngine . delete ( new Engine . Delete ( <str> , <str> , newUid ( <str> ) ) ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; getResult = primaryEngine . get ( new Engine . Get ( true , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( false ) ) ; getResult . release ( ) ; primaryEngine . refresh ( <str> ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; document = testDocumentWithTextField ( ) ; document . add ( new Field ( SourceFieldMapper . NAME , B_1 . toBytes ( ) , SourceFieldMapper . Defaults . FIELD_TYPE ) ) ; doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , document , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; primaryEngine . refresh ( <str> ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; primaryEngine . flush ( ) ; getResult = primaryEngine . get ( new Engine . Get ( true , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( true ) ) ; assertThat ( getResult . source ( ) , nullValue ( ) ) ; assertThat ( getResult . docIdAndVersion ( ) , notNullValue ( ) ) ; getResult . release ( ) ; replicaEngine . refresh ( <str> ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; getResult = replicaEngine . get ( new Engine . Get ( true , newUid ( <str> ) ) ) ; assertThat ( getResult . exists ( ) , equalTo ( true ) ) ; assertThat ( getResult . source ( ) , nullValue ( ) ) ; assertThat ( getResult . docIdAndVersion ( ) , notNullValue ( ) ) ; getResult . release ( ) ; document = testDocument ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , document , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; primaryEngine . refresh ( <str> ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; primaryEngine . flush ( ) ; replicaEngine . refresh ( <str> ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; } public void testSearchResultRelease ( ) throws Exception { Engine . Searcher searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; searchResult . close ( ) ; ParsedDocument doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; primaryEngine . flush ( ) ; primaryEngine . refresh ( <str> ) ; replicaEngine . refresh ( <str> ) ; searchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; primaryEngine . delete ( new Engine . Delete ( <str> , <str> , newUid ( <str> ) ) ) ; primaryEngine . flush ( ) ; primaryEngine . refresh ( <str> ) ; replicaEngine . refresh ( <str> ) ; Engine . Searcher updateSearchResult = primaryEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( updateSearchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; updateSearchResult . close ( ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; } public void testFailEngineOnCorruption ( ) { ParsedDocument doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; primaryEngine . flush ( ) ; MockDirectoryWrapper leaf = DirectoryUtils . getLeaf ( replicaEngine . config ( ) . getStore ( ) . directory ( ) , MockDirectoryWrapper . class ) ; leaf . setRandomIOExceptionRate ( <float> ) ; leaf . setRandomIOExceptionRateOnOpen ( <float> ) ; try { replicaEngine . refresh ( <str> ) ; fail ( <str> ) ; } catch ( Exception ex ) { } try { Engine . Searcher searchResult = replicaEngine . acquireSearcher ( <str> ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( <int> ) ) ; MatcherAssert . assertThat ( searchResult , EngineSearcherTotalHitsMatcher . engineSearcherTotalHits ( new TermQuery ( new Term ( <str> , <str> ) ) , <int> ) ) ; searchResult . close ( ) ; fail ( <str> ) ; } catch ( EngineClosedException ex ) { } } public void testExtractShardId ( ) { try ( Engine . Searcher test = replicaEngine . acquireSearcher ( <str> ) ) { ShardId shardId = ShardUtils . extractShardId ( test . getDirectoryReader ( ) ) ; assertNotNull ( shardId ) ; assertEquals ( shardId , replicaEngine . config ( ) . getShardId ( ) ) ; } } public void testFailStart ( ) throws IOException { ParsedDocument doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , testDocumentWithTextField ( ) , B_1 , null ) ; primaryEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; primaryEngine . flush ( ) ; final int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { MockDirectoryWrapper wrapper = newMockFSDirectory ( dirPath ) ; wrapper . setFailOnOpenInput ( randomBoolean ( ) ) ; wrapper . setAllowRandomFileNotFoundException ( randomBoolean ( ) ) ; wrapper . setRandomIOExceptionRate ( randomDouble ( ) ) ; wrapper . setRandomIOExceptionRateOnOpen ( randomDouble ( ) ) ; try ( Store store = createStore ( wrapper ) ) { int refCount = store . refCount ( ) ; assertTrue ( <str> + store . refCount ( ) , store . refCount ( ) > <int> ) ; ShadowEngine holder ; try { holder = createShadowEngine ( store ) ; } catch ( EngineCreationFailureException ex ) { assertEquals ( store . refCount ( ) , refCount ) ; continue ; } assertEquals ( store . refCount ( ) , refCount + <int> ) ; final int numStarts = scaledRandomIntBetween ( <int> , <int> ) ; for ( int j = <int> ; j < numStarts ; j + + ) { try { assertEquals ( store . refCount ( ) , refCount + <int> ) ; holder . close ( ) ; holder = createShadowEngine ( store ) ; assertEquals ( store . refCount ( ) , refCount + <int> ) ; } catch ( EngineCreationFailureException ex ) { assertEquals ( store . refCount ( ) , refCount ) ; break ; } } holder . close ( ) ; assertEquals ( store . refCount ( ) , refCount ) ; } } } public void testSettings ( ) { CodecService codecService = new CodecService ( null , logger ) ; assertEquals ( replicaEngine . config ( ) . getCodec ( ) . getName ( ) , codecService . codec ( codecName ) . getName ( ) ) ; } public void testShadowEngineCreationRetry ( ) throws Exception { final Path srDir = createTempDir ( ) ; final Store srStore = createStore ( srDir ) ; Lucene . cleanLuceneIndex ( srStore . directory ( ) ) ; final AtomicBoolean succeeded = new AtomicBoolean ( false ) ; final CountDownLatch latch = new CountDownLatch ( <int> ) ; Thread t = new Thread ( new Runnable ( ) { @Override public void run ( ) { try { latch . await ( ) ; } catch ( InterruptedException e ) { } try ( ShadowEngine srEngine = createShadowEngine ( srStore ) ) { succeeded . set ( true ) ; } catch ( Exception e ) { fail ( <str> ) ; } } } ) ; t . start ( ) ; latch . countDown ( ) ; Store pStore = createStore ( srDir ) ; InternalEngine pEngine = createInternalEngine ( pStore , createTempDir ( <str> ) ) ; ParseContext . Document document = testDocumentWithTextField ( ) ; document . add ( new Field ( SourceFieldMapper . NAME , B_1 . toBytes ( ) , SourceFieldMapper . Defaults . FIELD_TYPE ) ) ; ParsedDocument doc = testParsedDocument ( <str> , <str> , <str> , null , - <int> , - <int> , document , B_1 , null ) ; pEngine . index ( new Engine . Index ( newUid ( <str> ) , doc ) ) ; pEngine . flush ( true , true ) ; t . join ( ) ; assertTrue ( <str> , succeeded . get ( ) ) ; IOUtils . close ( srStore , pEngine , pStore ) ; } public void testNoTranslog ( ) { try { replicaEngine . getTranslog ( ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException ex ) { } } } 

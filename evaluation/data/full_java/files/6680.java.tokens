package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class SpanTermQueryParser implements QueryParser < SpanTermQueryBuilder > { public static final ParseField TERM_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { SpanTermQueryBuilder . NAME , Strings . toCamelCase ( SpanTermQueryBuilder . NAME ) } ; } @Override public SpanTermQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException , ParsingException { XContentParser parser = parseContext . parser ( ) ; XContentParser . Token token = parser . currentToken ( ) ; if ( token = = XContentParser . Token . START_OBJECT ) { token = parser . nextToken ( ) ; } assert token = = XContentParser . Token . FIELD_NAME ; String fieldName = parser . currentName ( ) ; Object value = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String queryName = null ; token = parser . nextToken ( ) ; if ( token = = XContentParser . Token . START_OBJECT ) { String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , TERM_FIELD ) ) { value = parser . objectBytes ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , BaseTermQueryBuilder . VALUE_FIELD ) ) { value = parser . objectBytes ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } parser . nextToken ( ) ; } else { value = parser . objectBytes ( ) ; parser . nextToken ( ) ; } if ( value = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } SpanTermQueryBuilder result = new SpanTermQueryBuilder ( fieldName , value ) ; result . boost ( boost ) . queryName ( queryName ) ; return result ; } @Override public SpanTermQueryBuilder getBuilderPrototype ( ) { return SpanTermQueryBuilder . PROTOTYPE ; } } 

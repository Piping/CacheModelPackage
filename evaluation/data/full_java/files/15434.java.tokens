package org . gradle . internal . resource . transport . aws . s3 ; import com . amazonaws . regions . Region ; import com . amazonaws . regions . RegionUtils ; import com . amazonaws . regions . Regions ; import java . net . URI ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class S3RegionalResource { private static final Pattern REGIONAL_ENDPOINT_PATTERN = Pattern . compile ( <str> ) ; private static final Region DEFAULT_REGION = Region . getRegion ( Regions . US_EAST_1 ) ; private final URI uri ; private Region region ; private String bucketName ; private String key ; public S3RegionalResource ( URI uri ) { this . uri = uri ; configure ( ) ; } public Region getRegion ( ) { return region ; } public String getBucketName ( ) { return bucketName ; } public String getKey ( ) { return key ; } private void configure ( ) { Matcher matcher = REGIONAL_ENDPOINT_PATTERN . matcher ( uri . toString ( ) ) ; if ( matcher . find ( ) ) { String bucketName = matcher . group ( <int> ) ; String region = matcher . group ( <int> ) ; String key = matcher . group ( <int> ) ; Region derivedRegion ; if ( region . equals ( <str> ) ) { derivedRegion = Region . getRegion ( Regions . US_EAST_1 ) ; } else { derivedRegion = RegionUtils . getRegion ( region ) ; } this . region = derivedRegion ; this . bucketName = bucketName ; this . key = key ; } else { this . region = DEFAULT_REGION ; this . bucketName = getBucketName ( uri . getHost ( ) ) ; this . key = getS3BucketKey ( uri ) ; } } private String getS3BucketKey ( URI destination ) { String path = destination . getPath ( ) ; return path . startsWith ( <str> ) ? path . substring ( <int> ) : path ; } private String getBucketName ( String bucket ) { return bucket . replaceAll ( <str> , <str> ) . replaceAll ( <str> , <str> ) ; } } 

package org . gradle . model . internal . core ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . type . ModelType ; import java . util . Set ; public interface InstanceFactory < T > { ModelType < T > getBaseInterface ( ) ; Set < ModelType < ? extends T > > getSupportedTypes ( ) ; < S extends T > TypeRegistrationBuilder < S > register ( ModelType < S > publicType , ModelRuleDescriptor sourceRule ) ; < S extends T > Set < ModelType < ? > > getInternalViews ( ModelType < S > type ) ; < S extends T > ImplementationInfo < T > getImplementationInfo ( ModelType < S > publicType ) ; < S extends T > ImplementationInfo < T > getManagedSubtypeImplementationInfo ( ModelType < S > publicType ) ; void validateRegistrations ( ) ; interface ImplementationFactory < T > { T create ( ModelType < ? extends T > publicType , String name , MutableModelNode node ) ; } interface TypeRegistrationBuilder < T > { TypeRegistrationBuilder < T > withImplementation ( ModelType < ? extends T > implementationType , ImplementationFactory < T > factory ) ; TypeRegistrationBuilder < T > withInternalView ( ModelType < ? > internalView ) ; } interface ImplementationInfo < T > { T create ( MutableModelNode modelNode ) ; ModelType < ? extends T > getDelegateType ( ) ; } } 

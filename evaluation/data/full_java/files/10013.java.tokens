package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ADD ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static java . util . Collections . nCopies ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; @GwtCompatible public class MultisetSetCountConditionallyTester < E > extends AbstractMultisetSetCountTester < E > { @Override void setCountCheckReturnValue ( E element , int count ) { assertTrue ( <str> , setCount ( element , count ) ) ; } @Override void setCountNoCheckReturnValue ( E element , int count ) { setCount ( element , count ) ; } private boolean setCount ( E element , int count ) { return getMultiset ( ) . setCount ( element , getMultiset ( ) . count ( element ) , count ) ; } private void assertSetCountNegativeOldCount ( ) { try { getMultiset ( ) . setCount ( e3 ( ) , - <int> , <int> ) ; fail ( <str> + <str> ) ; } catch ( IllegalArgumentException expected ) { } } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCountConditional_negativeOldCount_addSupported ( ) { assertSetCountNegativeOldCount ( ) ; } @CollectionFeature.Require ( absent = SUPPORTS_ADD ) public void testSetCountConditional_negativeOldCount_addUnsupported ( ) { try { assertSetCountNegativeOldCount ( ) ; } catch ( UnsupportedOperationException tolerated ) { } } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCountConditional_oldCountTooLarge ( ) { assertFalse ( <str> , getMultiset ( ) . setCount ( e0 ( ) , <int> , <int> ) ) ; expectUnchanged ( ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCountConditional_oldCountTooSmallZero ( ) { assertFalse ( <str> , getMultiset ( ) . setCount ( e0 ( ) , <int> , <int> ) ) ; expectUnchanged ( ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCountConditional_oldCountTooSmallNonzero ( ) { initThreeCopies ( ) ; assertFalse ( <str> , getMultiset ( ) . setCount ( e0 ( ) , <int> , <int> ) ) ; expectContents ( nCopies ( <int> , e0 ( ) ) ) ; } } 

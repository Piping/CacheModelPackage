package org . gradle . tooling . internal . consumer . converters ; import org . gradle . tooling . internal . gradle . DefaultGradleBuild ; import org . gradle . tooling . internal . gradle . PartialBasicGradleProject ; import org . gradle . tooling . model . GradleProject ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; public class GradleBuildConverter { public DefaultGradleBuild convert ( GradleProject project ) { DefaultGradleBuild gradleBuild = new DefaultGradleBuild ( ) ; PartialBasicGradleProject rootProject = toPartialGradleProject ( project ) ; gradleBuild . setRootProject ( rootProject ) ; gradleBuild . addProject ( rootProject ) ; convertChildren ( gradleBuild , rootProject , project ) ; return gradleBuild ; } private void convertChildren ( DefaultGradleBuild gradleBuild , PartialBasicGradleProject rootProject , GradleProject project ) { final List < ? extends GradleProject > childProjects = new ArrayList < GradleProject > ( project . getChildren ( ) ) ; Collections . sort ( childProjects , new Comparator < GradleProject > ( ) { public int compare ( GradleProject gp1 , GradleProject gp2 ) { return gp1 . getName ( ) . compareTo ( gp2 . getName ( ) ) ; } } ) ; for ( GradleProject childProject : childProjects ) { PartialBasicGradleProject basicGradleProject = toPartialGradleProject ( childProject ) ; gradleBuild . addProject ( basicGradleProject ) ; basicGradleProject . setParent ( rootProject ) ; rootProject . addChild ( basicGradleProject ) ; convertChildren ( gradleBuild , basicGradleProject , childProject ) ; } } private PartialBasicGradleProject toPartialGradleProject ( GradleProject childProject ) { PartialBasicGradleProject basicGradleProject = new PartialBasicGradleProject ( ) ; basicGradleProject . setPath ( childProject . getPath ( ) ) ; basicGradleProject . setName ( childProject . getName ( ) ) ; return basicGradleProject ; } } 

package org . elasticsearch . transport . local ; import org . elasticsearch . Version ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . transport . * ; import org . elasticsearch . transport . support . TransportStatus ; import java . io . IOException ; public class LocalTransportChannel implements TransportChannel { private static final String LOCAL_TRANSPORT_PROFILE = <str> ; private final LocalTransport sourceTransport ; private final TransportServiceAdapter sourceTransportServiceAdapter ; private final LocalTransport targetTransport ; private final String action ; private final long requestId ; private final Version version ; public LocalTransportChannel ( LocalTransport sourceTransport , TransportServiceAdapter sourceTransportServiceAdapter , LocalTransport targetTransport , String action , long requestId , Version version ) { this . sourceTransport = sourceTransport ; this . sourceTransportServiceAdapter = sourceTransportServiceAdapter ; this . targetTransport = targetTransport ; this . action = action ; this . requestId = requestId ; this . version = version ; } @Override public String action ( ) { return action ; } @Override public String getProfileName ( ) { return LOCAL_TRANSPORT_PROFILE ; } @Override public void sendResponse ( TransportResponse response ) throws IOException { sendResponse ( response , TransportResponseOptions . EMPTY ) ; } @Override public void sendResponse ( TransportResponse response , TransportResponseOptions options ) throws IOException { try ( BytesStreamOutput stream = new BytesStreamOutput ( ) ) { stream . setVersion ( version ) ; stream . writeLong ( requestId ) ; byte status = <int> ; status = TransportStatus . setResponse ( status ) ; stream . writeByte ( status ) ; response . writeTo ( stream ) ; final byte [ ] data = stream . bytes ( ) . toBytes ( ) ; targetTransport . workers ( ) . execute ( new Runnable ( ) { @Override public void run ( ) { targetTransport . messageReceived ( data , action , sourceTransport , version , null ) ; } } ) ; sourceTransportServiceAdapter . onResponseSent ( requestId , action , response , options ) ; } } @Override public void sendResponse ( Throwable error ) throws IOException { BytesStreamOutput stream = new BytesStreamOutput ( ) ; writeResponseExceptionHeader ( stream ) ; RemoteTransportException tx = new RemoteTransportException ( targetTransport . nodeName ( ) , targetTransport . boundAddress ( ) . boundAddresses ( ) [ <int> ] , action , error ) ; stream . writeThrowable ( tx ) ; final byte [ ] data = stream . bytes ( ) . toBytes ( ) ; targetTransport . workers ( ) . execute ( new Runnable ( ) { @Override public void run ( ) { targetTransport . messageReceived ( data , action , sourceTransport , version , null ) ; } } ) ; sourceTransportServiceAdapter . onResponseSent ( requestId , action , error ) ; } private void writeResponseExceptionHeader ( BytesStreamOutput stream ) throws IOException { stream . writeLong ( requestId ) ; byte status = <int> ; status = TransportStatus . setResponse ( status ) ; status = TransportStatus . setError ( status ) ; stream . writeByte ( status ) ; } } 

package org . eclipse . debug . ui . sourcelookup ; import java . util . ArrayList ; import org . eclipse . core . resources . IFolder ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; import org . eclipse . debug . core . sourcelookup . containers . CompositeSourceContainer ; import org . eclipse . debug . core . sourcelookup . containers . FolderSourceContainer ; import org . eclipse . debug . core . sourcelookup . containers . ProjectSourceContainer ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . ui . IWorkingSet ; public class WorkingSetSourceContainer extends CompositeSourceContainer { private IWorkingSet fWorkingSet ; public static final String TYPE_ID = DebugUIPlugin . getUniqueIdentifier ( ) + <str> ; public WorkingSetSourceContainer ( IWorkingSet workingSet ) { fWorkingSet = workingSet ; } @Override public String getName ( ) { return fWorkingSet . getName ( ) ; } @Override public boolean equals ( Object obj ) { if ( obj ! = null & & obj instanceof WorkingSetSourceContainer ) { return ( ( WorkingSetSourceContainer ) obj ) . fWorkingSet . equals ( fWorkingSet ) ; } return false ; } @Override public int hashCode ( ) { return fWorkingSet . hashCode ( ) ; } @Override public ISourceContainerType getType ( ) { return getSourceContainerType ( TYPE_ID ) ; } @Override protected ISourceContainer [ ] createSourceContainers ( ) throws CoreException { IAdaptable [ ] elements = fWorkingSet . getElements ( ) ; if ( elements = = null ) { return new ISourceContainer [ <int> ] ; } ArrayList < ISourceContainer > locationList = new ArrayList < ISourceContainer > ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { IResource resource = elements [ i ] . getAdapter ( IResource . class ) ; if ( resource ! = null ) { switch ( resource . getType ( ) ) { case IResource . FOLDER : locationList . add ( new FolderSourceContainer ( ( IFolder ) resource , true ) ) ; break ; case IResource . PROJECT : locationList . add ( new ProjectSourceContainer ( ( IProject ) resource , true ) ) ; break ; default : break ; } } } return locationList . toArray ( new ISourceContainer [ locationList . size ( ) ] ) ; } } 

package com . badlogic . gdx . utils . reflect ; import com . badlogic . gwtref . client . Parameter ; public final class Constructor { private final com . badlogic . gwtref . client . Constructor constructor ; Constructor ( com . badlogic . gwtref . client . Constructor constructor ) { this . constructor = constructor ; } public Class [ ] getParameterTypes ( ) { Parameter [ ] parameters = constructor . getParameters ( ) ; Class [ ] parameterTypes = new Class [ parameters . length ] ; for ( int i = <int> , j = parameters . length ; i < j ; i + + ) { parameterTypes [ i ] = parameters [ i ] . getClazz ( ) ; } return parameterTypes ; } public Class getDeclaringClass ( ) { return constructor . getEnclosingType ( ) ; } public boolean isAccessible ( ) { return constructor . isPublic ( ) ; } public void setAccessible ( boolean accessible ) { } public Object newInstance ( Object . . . args ) throws ReflectionException { try { return constructor . newInstance ( args ) ; } catch ( IllegalArgumentException e ) { throw new ReflectionException ( <str> + getDeclaringClass ( ) . getName ( ) , e ) ; } } } 

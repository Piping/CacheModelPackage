package org . elasticsearch . action . get ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import java . io . IOException ; public class MultiGetItemResponse implements Streamable { private GetResponse response ; private MultiGetResponse . Failure failure ; MultiGetItemResponse ( ) { } public MultiGetItemResponse ( GetResponse response , MultiGetResponse . Failure failure ) { this . response = response ; this . failure = failure ; } public String getIndex ( ) { if ( failure ! = null ) { return failure . getIndex ( ) ; } return response . getIndex ( ) ; } public String getType ( ) { if ( failure ! = null ) { return failure . getType ( ) ; } return response . getType ( ) ; } public String getId ( ) { if ( failure ! = null ) { return failure . getId ( ) ; } return response . getId ( ) ; } public boolean isFailed ( ) { return failure ! = null ; } public GetResponse getResponse ( ) { return this . response ; } public MultiGetResponse . Failure getFailure ( ) { return this . failure ; } public static MultiGetItemResponse readItemResponse ( StreamInput in ) throws IOException { MultiGetItemResponse response = new MultiGetItemResponse ( ) ; response . readFrom ( in ) ; return response ; } @Override public void readFrom ( StreamInput in ) throws IOException { if ( in . readBoolean ( ) ) { failure = MultiGetResponse . Failure . readFailure ( in ) ; } else { response = new GetResponse ( ) ; response . readFrom ( in ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { if ( failure ! = null ) { out . writeBoolean ( true ) ; failure . writeTo ( out ) ; } else { out . writeBoolean ( false ) ; response . writeTo ( out ) ; } } } 

package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . Helpers . assertContainsAllOf ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ITERATOR_REMOVE ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEY_QUERIES ; import static com . google . common . collect . testing . features . MapFeature . SUPPORTS_REMOVE ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . Multimap ; import com . google . common . collect . Multiset ; import com . google . common . collect . Multisets ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . Iterator ; @GwtCompatible public class MultimapKeysTester < K , V > extends AbstractMultimapTester < K , V , Multimap < K , V > > { @CollectionSize.Require ( SEVERAL ) public void testKeys ( ) { resetContainer ( Helpers . mapEntry ( k0 ( ) , v0 ( ) ) , Helpers . mapEntry ( k0 ( ) , v1 ( ) ) , Helpers . mapEntry ( k1 ( ) , v0 ( ) ) ) ; Multiset < K > keys = multimap ( ) . keys ( ) ; assertEquals ( <int> , keys . count ( k0 ( ) ) ) ; assertEquals ( <int> , keys . count ( k1 ( ) ) ) ; assertEquals ( <int> , keys . size ( ) ) ; assertContainsAllOf ( keys , k0 ( ) , k1 ( ) ) ; assertContainsAllOf ( keys . entrySet ( ) , Multisets . immutableEntry ( k0 ( ) , <int> ) , Multisets . immutableEntry ( k1 ( ) , <int> ) ) ; } @MapFeature.Require ( ALLOWS_NULL_KEY_QUERIES ) public void testKeysCountAbsentNullKey ( ) { assertEquals ( <int> , multimap ( ) . keys ( ) . count ( null ) ) ; } @CollectionSize.Require ( SEVERAL ) @MapFeature.Require ( ALLOWS_NULL_KEYS ) public void testKeysWithNullKey ( ) { resetContainer ( Helpers . mapEntry ( ( K ) null , v0 ( ) ) , Helpers . mapEntry ( ( K ) null , v1 ( ) ) , Helpers . mapEntry ( k1 ( ) , v0 ( ) ) ) ; Multiset < K > keys = multimap ( ) . keys ( ) ; assertEquals ( <int> , keys . count ( null ) ) ; assertEquals ( <int> , keys . count ( k1 ( ) ) ) ; assertEquals ( <int> , keys . size ( ) ) ; assertContainsAllOf ( keys , null , k1 ( ) ) ; assertContainsAllOf ( keys . entrySet ( ) , Multisets . immutableEntry ( ( K ) null , <int> ) , Multisets . immutableEntry ( k1 ( ) , <int> ) ) ; } public void testKeysElementSet ( ) { assertEquals ( multimap ( ) . keySet ( ) , multimap ( ) . keys ( ) . elementSet ( ) ) ; } @MapFeature.Require ( SUPPORTS_REMOVE ) public void testKeysRemove ( ) { int original = multimap ( ) . keys ( ) . remove ( k0 ( ) , <int> ) ; assertEquals ( Math . max ( original - <int> , <int> ) , multimap ( ) . get ( k0 ( ) ) . size ( ) ) ; } @CollectionSize.Require ( ONE ) @CollectionFeature.Require ( SUPPORTS_ITERATOR_REMOVE ) public void testKeysEntrySetIteratorRemove ( ) { Multiset < K > keys = multimap ( ) . keys ( ) ; Iterator < Multiset . Entry < K > > itr = keys . entrySet ( ) . iterator ( ) ; assertEquals ( Multisets . immutableEntry ( k0 ( ) , <int> ) , itr . next ( ) ) ; itr . remove ( ) ; assertTrue ( multimap ( ) . isEmpty ( ) ) ; } @CollectionSize.Require ( SEVERAL ) @MapFeature.Require ( SUPPORTS_REMOVE ) public void testKeysEntrySetRemove ( ) { resetContainer ( Helpers . mapEntry ( k0 ( ) , v0 ( ) ) , Helpers . mapEntry ( k0 ( ) , v1 ( ) ) , Helpers . mapEntry ( k1 ( ) , v0 ( ) ) ) ; assertTrue ( multimap ( ) . keys ( ) . entrySet ( ) . remove ( Multisets . immutableEntry ( k0 ( ) , <int> ) ) ) ; assertEquals ( <int> , multimap ( ) . size ( ) ) ; assertTrue ( multimap ( ) . containsEntry ( k1 ( ) , v0 ( ) ) ) ; } } 

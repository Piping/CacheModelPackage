package org . gradle . internal . resource . transport . aws . s3 ; import com . amazonaws . services . s3 . model . ObjectMetadata ; import com . amazonaws . services . s3 . model . S3Object ; import org . gradle . internal . resource . metadata . DefaultExternalResourceMetaData ; import org . gradle . internal . resource . metadata . ExternalResourceMetaData ; import org . gradle . internal . resource . transfer . ExternalResourceReadResponse ; import java . io . IOException ; import java . io . InputStream ; import java . net . URI ; import java . util . Date ; public class S3Resource implements ExternalResourceReadResponse { private final S3Object s3Object ; private final URI uri ; public S3Resource ( S3Object s3Object , URI uri ) { this . s3Object = s3Object ; this . uri = uri ; } public InputStream openStream ( ) throws IOException { return s3Object . getObjectContent ( ) ; } public URI getURI ( ) { return uri ; } public long getContentLength ( ) { return s3Object . getObjectMetadata ( ) . getContentLength ( ) ; } public boolean isLocal ( ) { return false ; } public ExternalResourceMetaData getMetaData ( ) { ObjectMetadata objectMetadata = s3Object . getObjectMetadata ( ) ; Date lastModified = objectMetadata . getLastModified ( ) ; return new DefaultExternalResourceMetaData ( uri , lastModified . getTime ( ) , getContentLength ( ) , s3Object . getObjectMetadata ( ) . getContentType ( ) , s3Object . getObjectMetadata ( ) . getETag ( ) , null ) ; } @Override public void close ( ) throws IOException { s3Object . close ( ) ; } } 

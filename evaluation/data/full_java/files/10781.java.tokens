package org . gradle . api . plugins . antlr . internal . antlr2 ; import antlr . preprocessor . Hierarchy ; import java . util . HashMap ; import java . util . Iterator ; import java . util . LinkedHashMap ; public class XRef { private final Hierarchy antlrHierarchy ; private LinkedHashMap < String , GrammarFileMetadata > filesByPath = new LinkedHashMap < String , GrammarFileMetadata > ( ) ; private HashMap < String , GrammarFileMetadata > filesByExportVocab = new HashMap < String , GrammarFileMetadata > ( ) ; private HashMap < String , GrammarFileMetadata > filesByClassName = new HashMap < String , GrammarFileMetadata > ( ) ; public XRef ( Hierarchy antlrHierarchy ) { this . antlrHierarchy = antlrHierarchy ; } public Object getAntlrHierarchy ( ) { return antlrHierarchy ; } void addGrammarFile ( GrammarFileMetadata grammarFileMetadata ) { filesByPath . put ( grammarFileMetadata . getFilePath ( ) . getPath ( ) , grammarFileMetadata ) ; for ( GrammarMetadata grammarMetadata : grammarFileMetadata . getGrammars ( ) ) { filesByClassName . put ( grammarMetadata . getClassName ( ) , grammarFileMetadata ) ; String exportVocabName = grammarMetadata . getExportVocab ( ) ! = null ? grammarMetadata . getExportVocab ( ) : grammarMetadata . getClassName ( ) ; GrammarFileMetadata old = filesByExportVocab . put ( exportVocabName , grammarFileMetadata ) ; if ( old ! = null & & old ! = grammarFileMetadata ) { System . out . println ( <str> + exportVocabName ) ; } } } public Iterator < GrammarFileMetadata > iterateGrammarFiles ( ) { return filesByPath . values ( ) . iterator ( ) ; } public GrammarFileMetadata getGrammarFileByPath ( String path ) { return filesByPath . get ( path ) ; } public GrammarFileMetadata getGrammarFileByClassName ( String className ) { return filesByClassName . get ( className ) ; } public GrammarFileMetadata getGrammarFileByExportVocab ( String vocabName ) { return filesByExportVocab . get ( vocabName ) ; } } 

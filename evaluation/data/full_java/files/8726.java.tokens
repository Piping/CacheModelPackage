package org . elasticsearch . discovery . azure ; import org . elasticsearch . cloud . azure . AbstractAzureComputeServiceTestCase ; import org . elasticsearch . cloud . azure . AzureComputeServiceSimpleMock ; import org . elasticsearch . cloud . azure . management . AzureComputeService . Discovery ; import org . elasticsearch . cloud . azure . management . AzureComputeService . Management ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import static org . hamcrest . Matchers . notNullValue ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . TEST , numDataNodes = <int> , transportClientRatio = <float> , numClientNodes = <int> ) public class AzureSimpleTests extends AbstractAzureComputeServiceTestCase { public AzureSimpleTests ( ) { super ( AzureComputeServiceSimpleMock . TestPlugin . class ) ; } public void testOneNodeDhouldRunUsingPrivateIp ( ) { Settings . Builder settings = Settings . settingsBuilder ( ) . put ( Management . SERVICE_NAME , <str> ) . put ( Discovery . HOST_TYPE , <str> ) ; logger . info ( <str> ) ; internalCluster ( ) . startNode ( settings ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , notNullValue ( ) ) ; checkNumberOfNodes ( <int> ) ; } public void testOneNodeShouldRunUsingPublicIp ( ) { Settings . Builder settings = Settings . settingsBuilder ( ) . put ( Management . SERVICE_NAME , <str> ) . put ( Discovery . HOST_TYPE , <str> ) ; logger . info ( <str> ) ; internalCluster ( ) . startNode ( settings ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , notNullValue ( ) ) ; checkNumberOfNodes ( <int> ) ; } public void testOneNodeShouldRunUsingWrongSettings ( ) { Settings . Builder settings = Settings . settingsBuilder ( ) . put ( Management . SERVICE_NAME , <str> ) . put ( Discovery . HOST_TYPE , <str> ) ; logger . info ( <str> ) ; internalCluster ( ) . startNode ( settings ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , notNullValue ( ) ) ; checkNumberOfNodes ( <int> ) ; } } 

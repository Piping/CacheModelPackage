package org . eclipse . debug . internal . ui . viewers . breadcrumb ; import java . util . LinkedList ; import java . util . List ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . util . OpenStrategy ; import org . eclipse . jface . viewers . IOpenListener ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ITreeSelection ; import org . eclipse . jface . viewers . ITreeViewerListener ; import org . eclipse . jface . viewers . OpenEvent ; import org . eclipse . jface . viewers . TreeExpansionEvent ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . jface . viewers . TreeSelection ; import org . eclipse . jface . viewers . TreeViewer ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . KeyEvent ; import org . eclipse . swt . events . KeyListener ; import org . eclipse . swt . events . MouseEvent ; import org . eclipse . swt . events . MouseListener ; import org . eclipse . swt . events . MouseMoveListener ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Item ; import org . eclipse . swt . widgets . Tree ; import org . eclipse . swt . widgets . TreeItem ; import org . eclipse . ui . progress . UIJob ; public abstract class TreeViewerDropDown { private static long MOUSE_MOVE_SCROLL_DELAY = <int> ; private IBreadcrumbDropDownSite fDropDownSite ; private TreeViewer fDropDownViewer ; public Control createDropDown ( Composite composite , IBreadcrumbDropDownSite site , TreePath path ) { fDropDownSite = site ; fDropDownViewer = createTreeViewer ( composite , SWT . SINGLE | SWT . H_SCROLL | SWT . V_SCROLL , path ) ; fDropDownViewer . addOpenListener ( new IOpenListener ( ) { @Override public void open ( OpenEvent event ) { if ( DebugUIPlugin . DEBUG_TREE_VIEWER_DROPDOWN ) { DebugUIPlugin . trace ( <str> ) ; } openElement ( event . getSelection ( ) ) ; } } ) ; final Tree tree = fDropDownViewer . getTree ( ) ; tree . addMouseListener ( new MouseListener ( ) { @Override public void mouseUp ( MouseEvent e ) { if ( DebugUIPlugin . DEBUG_TREE_VIEWER_DROPDOWN ) { DebugUIPlugin . trace ( <str> ) ; } if ( e . button ! = <int> ) { return ; } if ( ( OpenStrategy . getOpenMethod ( ) & OpenStrategy . SINGLE_CLICK ) ! = <int> ) { return ; } TreeItem item = tree . getItem ( new Point ( e . x , e . y ) ) ; if ( item = = null ) { return ; } List < Object > pathElements = new LinkedList < Object > ( ) ; while ( item ! = null ) { Object data = item . getData ( ) ; if ( data = = null ) { return ; } pathElements . add ( <int> , data ) ; item = item . getParentItem ( ) ; } openElement ( new TreeSelection ( new TreePath ( pathElements . toArray ( ) ) ) ) ; } @Override public void mouseDown ( MouseEvent e ) { } @Override public void mouseDoubleClick ( MouseEvent e ) { } } ) ; tree . addMouseMoveListener ( new MouseMoveListener ( ) { TreeItem fLastItem = null ; long fLastScrollTime = <int> ; @Override public void mouseMove ( MouseEvent e ) { if ( tree . equals ( e . getSource ( ) ) ) { Object o = tree . getItem ( new Point ( e . x , e . y ) ) ; if ( fLastItem = = null ^ o = = null ) { tree . setCursor ( o = = null ? null : tree . getDisplay ( ) . getSystemCursor ( SWT . CURSOR_HAND ) ) ; } if ( o instanceof TreeItem ) { TreeItem currentItem = ( TreeItem ) o ; if ( ! o . equals ( fLastItem ) ) { fLastItem = ( TreeItem ) o ; tree . setSelection ( new TreeItem [ ] { fLastItem } ) ; } else if ( System . currentTimeMillis ( ) > ( fLastScrollTime + MOUSE_MOVE_SCROLL_DELAY ) ) { if ( e . y < tree . getItemHeight ( ) / <int> ) { if ( currentItem . getParentItem ( ) = = null ) { int index = tree . indexOf ( ( TreeItem ) o ) ; if ( index < <int> ) { return ; } fLastItem = tree . getItem ( index - <int> ) ; tree . setSelection ( new TreeItem [ ] { fLastItem } ) ; } else { Point p = tree . toDisplay ( e . x , e . y ) ; Item item = fDropDownViewer . scrollUp ( p . x , p . y ) ; fLastScrollTime = System . currentTimeMillis ( ) ; if ( item instanceof TreeItem ) { fLastItem = ( TreeItem ) item ; tree . setSelection ( new TreeItem [ ] { fLastItem } ) ; } } } else if ( e . y > tree . getBounds ( ) . height - tree . getItemHeight ( ) / <int> ) { if ( currentItem . getParentItem ( ) = = null ) { int index = tree . indexOf ( ( TreeItem ) o ) ; if ( index > = tree . getItemCount ( ) - <int> ) { return ; } fLastItem = tree . getItem ( index + <int> ) ; tree . setSelection ( new TreeItem [ ] { fLastItem } ) ; } else { Point p = tree . toDisplay ( e . x , e . y ) ; Item item = fDropDownViewer . scrollDown ( p . x , p . y ) ; fLastScrollTime = System . currentTimeMillis ( ) ; if ( item instanceof TreeItem ) { fLastItem = ( TreeItem ) item ; tree . setSelection ( new TreeItem [ ] { fLastItem } ) ; } } } } } else if ( o = = null ) { fLastItem = null ; } } } } ) ; tree . addKeyListener ( new KeyListener ( ) { @Override public void keyPressed ( KeyEvent e ) { if ( e . keyCode = = SWT . ARROW_UP ) { if ( tree . getItemCount ( ) = = <int> ) { fDropDownSite . close ( ) ; return ; } TreeItem [ ] selection = tree . getSelection ( ) ; if ( selection . length ! = <int> ) { return ; } int selectionIndex = tree . indexOf ( selection [ <int> ] ) ; if ( selectionIndex ! = <int> ) { return ; } fDropDownSite . close ( ) ; } } @Override public void keyReleased ( KeyEvent e ) { } } ) ; fDropDownViewer . addTreeListener ( new ITreeViewerListener ( ) { @Override public void treeCollapsed ( TreeExpansionEvent event ) { } @Override public void treeExpanded ( TreeExpansionEvent event ) { tree . setRedraw ( false ) ; new UIJob ( tree . getDisplay ( ) , IInternalDebugCoreConstants . EMPTY_STRING ) { { setSystem ( true ) ; } @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( ! tree . isDisposed ( ) ) { try { fDropDownSite . updateSize ( ) ; } finally { tree . setRedraw ( true ) ; } } return Status . OK_STATUS ; } } . schedule ( ) ; } } ) ; return tree ; } protected abstract TreeViewer createTreeViewer ( Composite composite , int style , TreePath path ) ; protected void openElement ( ISelection selection ) { if ( selection = = null | | ! ( selection instanceof ITreeSelection ) | | selection . isEmpty ( ) ) { return ; } fDropDownSite . notifySelection ( selection ) ; Tree tree = fDropDownViewer . getTree ( ) ; boolean treeHasFocus = ! tree . isDisposed ( ) & & tree . isFocusControl ( ) ; if ( DebugUIPlugin . DEBUG_TREE_VIEWER_DROPDOWN ) { DebugUIPlugin . trace ( <str> + tree . isDisposed ( ) ) ; DebugUIPlugin . trace ( <str> + ( ! tree . isDisposed ( ) & & tree . isFocusControl ( ) ) ) ; DebugUIPlugin . trace ( <str> + treeHasFocus ) ; } if ( tree . isDisposed ( ) ) { return ; } if ( ! treeHasFocus ) { fDropDownSite . close ( ) ; return ; } toggleExpansionState ( ( ( ITreeSelection ) selection ) . getPaths ( ) [ <int> ] ) ; } private void toggleExpansionState ( TreePath path ) { Tree tree = fDropDownViewer . getTree ( ) ; if ( fDropDownViewer . getExpandedState ( path ) ) { fDropDownViewer . collapseToLevel ( path , <int> ) ; } else { tree . setRedraw ( false ) ; try { fDropDownViewer . expandToLevel ( path , <int> ) ; fDropDownSite . updateSize ( ) ; } finally { tree . setRedraw ( true ) ; } } } } 

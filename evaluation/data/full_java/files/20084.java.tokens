package io . netty . microbench . internal ; import io . netty . microbench . util . AbstractMicrobenchmark ; import io . netty . util . internal . RecyclableArrayList ; import org . openjdk . jmh . annotations . Benchmark ; import org . openjdk . jmh . annotations . Measurement ; import org . openjdk . jmh . annotations . Param ; import org . openjdk . jmh . annotations . Scope ; import org . openjdk . jmh . annotations . State ; import org . openjdk . jmh . annotations . Threads ; @State ( Scope . Benchmark ) @Threads ( <int> ) @Measurement ( iterations = <int> , batchSize = <int> ) public class RecyclableArrayListBenchmark extends AbstractMicrobenchmark { @Param ( { <str> , <str> , <str> , <str> , <str> , <str> } ) public int size ; @Benchmark public void recycleSameThread ( ) { RecyclableArrayList list = RecyclableArrayList . newInstance ( size ) ; list . recycle ( ) ; } } 

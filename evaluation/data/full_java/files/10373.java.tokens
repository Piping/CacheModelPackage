package com . google . common . collect ; import static com . google . common . collect . testing . features . CollectionFeature . KNOWN_ORDER ; import static com . google . common . collect . testing . features . CollectionFeature . SERIALIZABLE ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_ANY_NULL_QUERIES ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableSetMultimap . Builder ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . SetMultimapTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringSetMultimapGenerator ; import com . google . common . collect . testing . google . UnmodifiableCollectionTests ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . SerializableTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Map . Entry ; @GwtCompatible ( emulated = true ) public class ImmutableSetMultimapTest extends TestCase { private static final class ImmutableSetMultimapGenerator extends TestStringSetMultimapGenerator { @Override protected SetMultimap < String , String > create ( Entry < String , String > [ ] entries ) { ImmutableSetMultimap . Builder < String , String > builder = ImmutableSetMultimap . builder ( ) ; for ( Entry < String , String > entry : entries ) { builder . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return builder . build ( ) ; } } private static final class ImmutableSetMultimapCopyOfEntriesGenerator extends TestStringSetMultimapGenerator { @Override protected SetMultimap < String , String > create ( Entry < String , String > [ ] entries ) { return ImmutableSetMultimap . copyOf ( Arrays . asList ( entries ) ) ; } } @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( ImmutableSetMultimapTest . class ) ; suite . addTest ( SetMultimapTestSuiteBuilder . using ( new ImmutableSetMultimapGenerator ( ) ) . named ( <str> ) . withFeatures ( ALLOWS_ANY_NULL_QUERIES , KNOWN_ORDER , SERIALIZABLE , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( SetMultimapTestSuiteBuilder . using ( new ImmutableSetMultimapCopyOfEntriesGenerator ( ) ) . named ( <str> ) . withFeatures ( ALLOWS_ANY_NULL_QUERIES , KNOWN_ORDER , SERIALIZABLE , CollectionSize . ANY ) . createTestSuite ( ) ) ; return suite ; } public void testBuilder_withImmutableEntry ( ) { ImmutableSetMultimap < String , Integer > multimap = new Builder < String , Integer > ( ) . put ( Maps . immutableEntry ( <str> , <int> ) ) . build ( ) ; assertEquals ( ImmutableSet . of ( <int> ) , multimap . get ( <str> ) ) ; } public void testBuilder_withImmutableEntryAndNullContents ( ) { Builder < String , Integer > builder = new Builder < String , Integer > ( ) ; try { builder . put ( Maps . immutableEntry ( <str> , ( Integer ) null ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . put ( Maps . immutableEntry ( ( String ) null , <int> ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } private static class StringHolder { String string ; } public void testBuilder_withMutableEntry ( ) { ImmutableSetMultimap . Builder < String , Integer > builder = new Builder < String , Integer > ( ) ; final StringHolder holder = new StringHolder ( ) ; holder . string = <str> ; Entry < String , Integer > entry = new AbstractMapEntry < String , Integer > ( ) { @Override public String getKey ( ) { return holder . string ; } @Override public Integer getValue ( ) { return <int> ; } } ; builder . put ( entry ) ; holder . string = <str> ; assertEquals ( ImmutableSet . of ( <int> ) , builder . build ( ) . get ( <str> ) ) ; } public void testBuilderPutAllIterable ( ) { ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . putAll ( <str> , Arrays . asList ( <int> , <int> , <int> ) ) ; builder . putAll ( <str> , Arrays . asList ( <int> , <int> ) ) ; builder . putAll ( <str> , Arrays . asList ( <int> , <int> ) ) ; Multimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( ImmutableSet . of ( <int> , <int> , <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( ImmutableSet . of ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutAllVarargs ( ) { ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . putAll ( <str> , <int> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> ) ; Multimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( ImmutableSet . of ( <int> , <int> , <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( ImmutableSet . of ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutAllMultimap ( ) { Multimap < String , Integer > toPut = LinkedListMultimap . create ( ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; Multimap < String , Integer > moreToPut = LinkedListMultimap . create ( ) ; moreToPut . put ( <str> , <int> ) ; moreToPut . put ( <str> , <int> ) ; moreToPut . put ( <str> , <int> ) ; ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . putAll ( toPut ) ; builder . putAll ( moreToPut ) ; Multimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( ImmutableSet . of ( <int> , <int> , <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( ImmutableSet . of ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutAllWithDuplicates ( ) { ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . putAll ( <str> , <int> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> , <int> ) ; ImmutableSetMultimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutWithDuplicates ( ) { ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . putAll ( <str> , <int> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableSetMultimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutAllMultimapWithDuplicates ( ) { Multimap < String , Integer > toPut = LinkedListMultimap . create ( ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . putAll ( toPut ) ; ImmutableSetMultimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutNullKey ( ) { Multimap < String , Integer > toPut = LinkedListMultimap . create ( ) ; toPut . put ( <str> , null ) ; ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; try { builder . put ( null , <int> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( null , Arrays . asList ( <int> , <int> , <int> ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( null , <int> , <int> , <int> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( toPut ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testBuilderPutNullValue ( ) { Multimap < String , Integer > toPut = LinkedListMultimap . create ( ) ; toPut . put ( null , <int> ) ; ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; try { builder . put ( <str> , null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( <str> , Arrays . asList ( <int> , null , <int> ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( <str> , <int> , null , <int> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( toPut ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testBuilderOrderKeysBy ( ) { ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . orderKeysBy ( Collections . reverseOrder ( ) ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableSetMultimap < String , Integer > multimap = builder . build ( ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( multimap . values ( ) ) . containsExactly ( <int> , <int> , <int> , <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . isNotInstanceOf ( ImmutableSortedSet . class ) ; assertThat ( multimap . get ( <str> ) ) . isNotInstanceOf ( ImmutableSortedSet . class ) ; assertThat ( multimap . asMap ( ) . get ( <str> ) ) . isNotInstanceOf ( ImmutableSortedSet . class ) ; } public void testBuilderOrderKeysByDuplicates ( ) { ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . orderKeysBy ( new Ordering < String > ( ) { @Override public int compare ( String left , String right ) { return left . length ( ) - right . length ( ) ; } } ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableSetMultimap < String , Integer > multimap = builder . build ( ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( multimap . values ( ) ) . containsExactly ( <int> , <int> , <int> , <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . isNotInstanceOf ( ImmutableSortedSet . class ) ; assertThat ( multimap . get ( <str> ) ) . isNotInstanceOf ( ImmutableSortedSet . class ) ; assertThat ( multimap . asMap ( ) . get ( <str> ) ) . isNotInstanceOf ( ImmutableSortedSet . class ) ; } public void testBuilderOrderValuesBy ( ) { ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . orderValuesBy ( Collections . reverseOrder ( ) ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableSetMultimap < String , Integer > multimap = builder . build ( ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( multimap . values ( ) ) . containsExactly ( <int> , <int> , <int> , <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertTrue ( multimap . get ( <str> ) instanceof ImmutableSortedSet ) ; assertEquals ( Collections . reverseOrder ( ) , ( ( ImmutableSortedSet < Integer > ) multimap . get ( <str> ) ) . comparator ( ) ) ; assertTrue ( multimap . get ( <str> ) instanceof ImmutableSortedSet ) ; assertEquals ( Collections . reverseOrder ( ) , ( ( ImmutableSortedSet < Integer > ) multimap . get ( <str> ) ) . comparator ( ) ) ; assertTrue ( multimap . asMap ( ) . get ( <str> ) instanceof ImmutableSortedSet ) ; assertEquals ( Collections . reverseOrder ( ) , ( ( ImmutableSortedSet < Integer > ) multimap . asMap ( ) . get ( <str> ) ) . comparator ( ) ) ; } public void testBuilderOrderKeysAndValuesBy ( ) { ImmutableSetMultimap . Builder < String , Integer > builder = ImmutableSetMultimap . builder ( ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . orderKeysBy ( Collections . reverseOrder ( ) ) ; builder . orderValuesBy ( Collections . reverseOrder ( ) ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableSetMultimap < String , Integer > multimap = builder . build ( ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( multimap . values ( ) ) . containsExactly ( <int> , <int> , <int> , <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertTrue ( multimap . get ( <str> ) instanceof ImmutableSortedSet ) ; assertEquals ( Collections . reverseOrder ( ) , ( ( ImmutableSortedSet < Integer > ) multimap . get ( <str> ) ) . comparator ( ) ) ; assertTrue ( multimap . get ( <str> ) instanceof ImmutableSortedSet ) ; assertEquals ( Collections . reverseOrder ( ) , ( ( ImmutableSortedSet < Integer > ) multimap . get ( <str> ) ) . comparator ( ) ) ; assertTrue ( multimap . asMap ( ) . get ( <str> ) instanceof ImmutableSortedSet ) ; assertEquals ( Collections . reverseOrder ( ) , ( ( ImmutableSortedSet < Integer > ) multimap . asMap ( ) . get ( <str> ) ) . comparator ( ) ) ; } public void testCopyOf ( ) { HashMultimap < String , Integer > input = HashMultimap . create ( ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; Multimap < String , Integer > multimap = ImmutableSetMultimap . copyOf ( input ) ; assertEquals ( multimap , input ) ; assertEquals ( input , multimap ) ; } public void testCopyOfWithDuplicates ( ) { ArrayListMultimap < Object , Object > input = ArrayListMultimap . create ( ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; ImmutableSetMultimap < Object , Object > copy = ImmutableSetMultimap . copyOf ( input ) ; assertEquals ( <int> , copy . size ( ) ) ; } public void testCopyOfEmpty ( ) { HashMultimap < String , Integer > input = HashMultimap . create ( ) ; Multimap < String , Integer > multimap = ImmutableSetMultimap . copyOf ( input ) ; assertEquals ( multimap , input ) ; assertEquals ( input , multimap ) ; } public void testCopyOfImmutableSetMultimap ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; assertSame ( multimap , ImmutableSetMultimap . copyOf ( multimap ) ) ; } public void testCopyOfNullKey ( ) { HashMultimap < String , Integer > input = HashMultimap . create ( ) ; input . put ( null , <int> ) ; try { ImmutableSetMultimap . copyOf ( input ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOfNullValue ( ) { HashMultimap < String , Integer > input = HashMultimap . create ( ) ; input . putAll ( <str> , Arrays . asList ( <int> , null , <int> ) ) ; try { ImmutableSetMultimap . copyOf ( input ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testEmptyMultimapReads ( ) { Multimap < String , Integer > multimap = ImmutableSetMultimap . of ( ) ; assertFalse ( multimap . containsKey ( <str> ) ) ; assertFalse ( multimap . containsValue ( <int> ) ) ; assertFalse ( multimap . containsEntry ( <str> , <int> ) ) ; assertTrue ( multimap . entries ( ) . isEmpty ( ) ) ; assertTrue ( multimap . equals ( HashMultimap . create ( ) ) ) ; assertEquals ( Collections . emptySet ( ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . hashCode ( ) ) ; assertTrue ( multimap . isEmpty ( ) ) ; assertEquals ( HashMultiset . create ( ) , multimap . keys ( ) ) ; assertEquals ( Collections . emptySet ( ) , multimap . keySet ( ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; assertTrue ( multimap . values ( ) . isEmpty ( ) ) ; assertEquals ( <str> , multimap . toString ( ) ) ; } public void testEmptyMultimapWrites ( ) { Multimap < String , Integer > multimap = ImmutableSetMultimap . of ( ) ; UnmodifiableCollectionTests . assertMultimapIsUnmodifiable ( multimap , <str> , <int> ) ; } public void testMultimapReads ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; assertTrue ( multimap . containsKey ( <str> ) ) ; assertFalse ( multimap . containsKey ( <str> ) ) ; assertTrue ( multimap . containsValue ( <int> ) ) ; assertFalse ( multimap . containsValue ( <int> ) ) ; assertTrue ( multimap . containsEntry ( <str> , <int> ) ) ; assertFalse ( multimap . containsEntry ( <str> , <int> ) ) ; assertFalse ( multimap . containsEntry ( <str> , <int> ) ) ; assertFalse ( multimap . entries ( ) . isEmpty ( ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; assertFalse ( multimap . isEmpty ( ) ) ; assertEquals ( <str> , multimap . toString ( ) ) ; } public void testMultimapWrites ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; UnmodifiableCollectionTests . assertMultimapIsUnmodifiable ( multimap , <str> , <int> ) ; } public void testMultimapEquals ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; Multimap < String , Integer > hashMultimap = HashMultimap . create ( ) ; hashMultimap . putAll ( <str> , Arrays . asList ( <int> , <int> ) ) ; hashMultimap . put ( <str> , <int> ) ; new EqualsTester ( ) . addEqualityGroup ( multimap , createMultimap ( ) , hashMultimap , ImmutableSetMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) , ImmutableSetMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) . addEqualityGroup ( ImmutableSetMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) . addEqualityGroup ( ImmutableSetMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) . testEquals ( ) ; } public void testOf ( ) { assertMultimapEquals ( ImmutableSetMultimap . of ( <str> , <int> ) , <str> , <int> ) ; assertMultimapEquals ( ImmutableSetMultimap . of ( <str> , <int> , <str> , <int> ) , <str> , <int> , <str> , <int> ) ; assertMultimapEquals ( ImmutableSetMultimap . of ( <str> , <int> , <str> , <int> , <str> , <int> ) , <str> , <int> , <str> , <int> , <str> , <int> ) ; assertMultimapEquals ( ImmutableSetMultimap . of ( <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> ) , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> ) ; assertMultimapEquals ( ImmutableSetMultimap . of ( <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> ) , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> ) ; } public void testInverse ( ) { assertEquals ( ImmutableSetMultimap . < Integer , String > of ( ) , ImmutableSetMultimap . < String , Integer > of ( ) . inverse ( ) ) ; assertEquals ( ImmutableSetMultimap . of ( <int> , <str> ) , ImmutableSetMultimap . of ( <str> , <int> ) . inverse ( ) ) ; assertEquals ( ImmutableSetMultimap . of ( <int> , <str> , <int> , <str> ) , ImmutableSetMultimap . of ( <str> , <int> , <str> , <int> ) . inverse ( ) ) ; assertEquals ( ImmutableSetMultimap . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , ImmutableSetMultimap . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . inverse ( ) ) ; } public void testInverseMinimizesWork ( ) { ImmutableSetMultimap < String , Character > multimap = ImmutableSetMultimap . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertSame ( multimap . inverse ( ) , multimap . inverse ( ) ) ; assertSame ( multimap , multimap . inverse ( ) . inverse ( ) ) ; } private static < K , V > void assertMultimapEquals ( Multimap < K , V > multimap , Object . . . alternatingKeysAndValues ) { assertEquals ( multimap . size ( ) , alternatingKeysAndValues . length / <int> ) ; int i = <int> ; for ( Entry < K , V > entry : multimap . entries ( ) ) { assertEquals ( alternatingKeysAndValues [ i + + ] , entry . getKey ( ) ) ; assertEquals ( alternatingKeysAndValues [ i + + ] , entry . getValue ( ) ) ; } } @GwtIncompatible ( <str> ) public void testSerialization ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; SerializableTester . reserializeAndAssert ( multimap ) ; assertEquals ( multimap . size ( ) , SerializableTester . reserialize ( multimap ) . size ( ) ) ; SerializableTester . reserializeAndAssert ( multimap . get ( <str> ) ) ; LenientSerializableTester . reserializeAndAssertLenient ( multimap . keySet ( ) ) ; LenientSerializableTester . reserializeAndAssertLenient ( multimap . keys ( ) ) ; SerializableTester . reserializeAndAssert ( multimap . asMap ( ) ) ; Collection < Integer > valuesCopy = SerializableTester . reserialize ( multimap . values ( ) ) ; assertEquals ( HashMultiset . create ( multimap . values ( ) ) , HashMultiset . create ( valuesCopy ) ) ; } @GwtIncompatible ( <str> ) public void testEmptySerialization ( ) { Multimap < String , Integer > multimap = ImmutableSetMultimap . of ( ) ; assertSame ( multimap , SerializableTester . reserialize ( multimap ) ) ; } @GwtIncompatible ( <str> ) public void testSortedSerialization ( ) { Multimap < String , Integer > multimap = new ImmutableSetMultimap . Builder < String , Integer > ( ) . orderKeysBy ( Ordering . natural ( ) . reverse ( ) ) . orderValuesBy ( Ordering . usingToString ( ) ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; multimap = SerializableTester . reserialize ( multimap ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertEquals ( Ordering . usingToString ( ) , ( ( ImmutableSortedSet < Integer > ) multimap . get ( <str> ) ) . comparator ( ) ) ; assertEquals ( Ordering . usingToString ( ) , ( ( ImmutableSortedSet < Integer > ) multimap . get ( <str> ) ) . comparator ( ) ) ; } private ImmutableSetMultimap < String , Integer > createMultimap ( ) { return ImmutableSetMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; } } 

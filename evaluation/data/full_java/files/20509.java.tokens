package io . netty . test . udt . util ; import com . yammer . metrics . Metrics ; import com . yammer . metrics . core . Clock ; import com . yammer . metrics . core . Counter ; import com . yammer . metrics . core . Gauge ; import com . yammer . metrics . core . Histogram ; import com . yammer . metrics . core . Metered ; import com . yammer . metrics . core . Metric ; import com . yammer . metrics . core . MetricName ; import com . yammer . metrics . core . MetricPredicate ; import com . yammer . metrics . core . MetricProcessor ; import com . yammer . metrics . core . MetricsRegistry ; import com . yammer . metrics . core . Timer ; import com . yammer . metrics . reporting . AbstractPollingReporter ; import com . yammer . metrics . stats . Snapshot ; import java . io . PrintStream ; import java . text . DateFormat ; import java . util . Date ; import java . util . Locale ; import java . util . Map . Entry ; import java . util . SortedMap ; import java . util . TimeZone ; import java . util . concurrent . TimeUnit ; public class CustomReporter extends AbstractPollingReporter implements MetricProcessor < PrintStream > { private static final int CONSOLE_WIDTH = <int> ; public static void enable ( final long period , final TimeUnit unit ) { enable ( Metrics . defaultRegistry ( ) , period , unit ) ; } public static void enable ( final MetricsRegistry metricsRegistry , final long period , final TimeUnit unit ) { final CustomReporter reporter = new CustomReporter ( metricsRegistry , System . out , MetricPredicate . ALL ) ; reporter . start ( period , unit ) ; } private final PrintStream out ; private final MetricPredicate predicate ; private final Clock clock ; private final TimeZone timeZone ; private final Locale locale ; public CustomReporter ( final PrintStream out ) { this ( Metrics . defaultRegistry ( ) , out , MetricPredicate . ALL ) ; } public CustomReporter ( final MetricsRegistry metricsRegistry , final PrintStream out , final MetricPredicate predicate ) { this ( metricsRegistry , out , predicate , Clock . defaultClock ( ) , TimeZone . getDefault ( ) ) ; } public CustomReporter ( final MetricsRegistry metricsRegistry , final PrintStream out , final MetricPredicate predicate , final Clock clock , final TimeZone timeZone ) { this ( metricsRegistry , out , predicate , clock , timeZone , Locale . getDefault ( ) ) ; } public CustomReporter ( final MetricsRegistry metricsRegistry , final PrintStream out , final MetricPredicate predicate , final Clock clock , final TimeZone timeZone , final Locale locale ) { super ( metricsRegistry , <str> ) ; this . out = out ; this . predicate = predicate ; this . clock = clock ; this . timeZone = timeZone ; this . locale = locale ; } @Override public void run ( ) { try { final DateFormat format = DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . MEDIUM , locale ) ; format . setTimeZone ( timeZone ) ; final String dateTime = format . format ( new Date ( clock . time ( ) ) ) ; out . print ( dateTime ) ; out . print ( <str> ) ; for ( int i = <int> ; i < CONSOLE_WIDTH - dateTime . length ( ) - <int> ; i + + ) { out . print ( <str> ) ; } out . println ( ) ; for ( final Entry < String , SortedMap < MetricName , Metric > > entry : getMetricsRegistry ( ) . groupedMetrics ( predicate ) . entrySet ( ) ) { out . print ( entry . getKey ( ) ) ; out . println ( <str> ) ; for ( final Entry < MetricName , Metric > subEntry : entry . getValue ( ) . entrySet ( ) ) { out . print ( <str> ) ; out . print ( subEntry . getKey ( ) . getName ( ) ) ; out . println ( <str> ) ; subEntry . getValue ( ) . processWith ( this , subEntry . getKey ( ) , out ) ; out . println ( ) ; } out . println ( ) ; } out . println ( ) ; out . flush ( ) ; } catch ( final Exception e ) { e . printStackTrace ( out ) ; } } @Override public void processGauge ( final MetricName name , final Gauge < ? > gauge , final PrintStream stream ) { stream . printf ( locale , <str> , gauge . value ( ) ) ; } @Override public void processCounter ( final MetricName name , final Counter counter , final PrintStream stream ) { stream . printf ( locale , <str> , counter . count ( ) ) ; } @Override public void processMeter ( final MetricName name , final Metered meter , final PrintStream stream ) { final String unit = abbrev ( meter . rateUnit ( ) ) ; stream . printf ( locale , <str> , meter . count ( ) ) ; stream . printf ( locale , <str> , meter . meanRate ( ) , meter . eventType ( ) , unit ) ; stream . printf ( locale , <str> , meter . oneMinuteRate ( ) , meter . eventType ( ) , unit ) ; stream . printf ( locale , <str> , meter . fiveMinuteRate ( ) , meter . eventType ( ) , unit ) ; stream . printf ( locale , <str> , meter . fifteenMinuteRate ( ) , meter . eventType ( ) , unit ) ; } @Override public void processHistogram ( final MetricName name , final Histogram histogram , final PrintStream stream ) { final Snapshot snapshot = histogram . getSnapshot ( ) ; stream . printf ( locale , <str> , histogram . min ( ) ) ; stream . printf ( locale , <str> , histogram . max ( ) ) ; stream . printf ( locale , <str> , histogram . mean ( ) ) ; stream . printf ( locale , <str> , histogram . stdDev ( ) ) ; stream . printf ( locale , <str> , snapshot . getMedian ( ) ) ; stream . printf ( locale , <str> , snapshot . get75thPercentile ( ) ) ; stream . printf ( locale , <str> , snapshot . get95thPercentile ( ) ) ; stream . printf ( locale , <str> , snapshot . get98thPercentile ( ) ) ; stream . printf ( locale , <str> , snapshot . get99thPercentile ( ) ) ; stream . printf ( locale , <str> , snapshot . get999thPercentile ( ) ) ; } @Override public void processTimer ( final MetricName name , final Timer timer , final PrintStream stream ) { processMeter ( name , timer , stream ) ; final String durationUnit = abbrev ( timer . durationUnit ( ) ) ; final Snapshot snapshot = timer . getSnapshot ( ) ; stream . printf ( locale , <str> , timer . min ( ) , durationUnit ) ; stream . printf ( locale , <str> , timer . max ( ) , durationUnit ) ; stream . printf ( locale , <str> , timer . mean ( ) , durationUnit ) ; stream . printf ( locale , <str> , timer . stdDev ( ) , durationUnit ) ; stream . printf ( locale , <str> , snapshot . getMedian ( ) , durationUnit ) ; stream . printf ( locale , <str> , snapshot . get75thPercentile ( ) , durationUnit ) ; stream . printf ( locale , <str> , snapshot . get95thPercentile ( ) , durationUnit ) ; stream . printf ( locale , <str> , snapshot . get98thPercentile ( ) , durationUnit ) ; stream . printf ( locale , <str> , snapshot . get99thPercentile ( ) , durationUnit ) ; stream . printf ( locale , <str> , snapshot . get999thPercentile ( ) , durationUnit ) ; } private static String abbrev ( final TimeUnit unit ) { switch ( unit ) { case NANOSECONDS : return <str> ; case MICROSECONDS : return <str> ; case MILLISECONDS : return <str> ; case SECONDS : return <str> ; case MINUTES : return <str> ; case HOURS : return <str> ; case DAYS : return <str> ; default : throw new IllegalArgumentException ( <str> + unit ) ; } } } 

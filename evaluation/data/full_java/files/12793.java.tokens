package org . gradle . api . internal . notations ; import org . gradle . api . artifacts . SelfResolvingDependency ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . artifacts . dependencies . DefaultSelfResolvingDependency ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . typeconversion . NotationConvertResult ; import org . gradle . internal . typeconversion . NotationConverter ; import org . gradle . internal . typeconversion . TypeConversionException ; public class DependencyFilesNotationConverter implements NotationConverter < FileCollection , SelfResolvingDependency > { private final Instantiator instantiator ; public DependencyFilesNotationConverter ( Instantiator instantiator ) { this . instantiator = instantiator ; } @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( <str> ) . example ( <str> ) ; } public void convert ( FileCollection notation , NotationConvertResult < ? super SelfResolvingDependency > result ) throws TypeConversionException { result . converted ( instantiator . newInstance ( DefaultSelfResolvingDependency . class , notation ) ) ; } } 

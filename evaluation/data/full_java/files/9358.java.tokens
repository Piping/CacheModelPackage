package com . google . common . escape ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import java . util . Map ; @Beta @GwtCompatible public abstract class ArrayBasedCharEscaper extends CharEscaper { private final char [ ] [ ] replacements ; private final int replacementsLength ; private final char safeMin ; private final char safeMax ; protected ArrayBasedCharEscaper ( Map < Character , String > replacementMap , char safeMin , char safeMax ) { this ( ArrayBasedEscaperMap . create ( replacementMap ) , safeMin , safeMax ) ; } protected ArrayBasedCharEscaper ( ArrayBasedEscaperMap escaperMap , char safeMin , char safeMax ) { checkNotNull ( escaperMap ) ; this . replacements = escaperMap . getReplacementArray ( ) ; this . replacementsLength = replacements . length ; if ( safeMax < safeMin ) { safeMax = Character . MIN_VALUE ; safeMin = Character . MAX_VALUE ; } this . safeMin = safeMin ; this . safeMax = safeMax ; } @Override public final String escape ( String s ) { checkNotNull ( s ) ; for ( int i = <int> ; i < s . length ( ) ; i + + ) { char c = s . charAt ( i ) ; if ( ( c < replacementsLength & & replacements [ c ] ! = null ) | | c > safeMax | | c < safeMin ) { return escapeSlow ( s , i ) ; } } return s ; } @Override protected final char [ ] escape ( char c ) { if ( c < replacementsLength ) { char [ ] chars = replacements [ c ] ; if ( chars ! = null ) { return chars ; } } if ( c > = safeMin & & c < = safeMax ) { return null ; } return escapeUnsafe ( c ) ; } protected abstract char [ ] escapeUnsafe ( char c ) ; } 

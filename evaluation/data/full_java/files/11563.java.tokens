package org . gradle . api . internal . file . copy ; import groovy . lang . Closure ; import org . gradle . internal . SystemProperties ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . Reader ; public class LineFilter extends Reader { private static enum State { NORMAL , SKIP_LINE , EOF } ; private final Closure closure ; private String transformedLine ; private int transformedIndex ; private final BufferedReader bufferedIn ; private final Reader in ; private State state = State . NORMAL ; public LineFilter ( Reader in , Closure closure ) { this . in = in ; this . bufferedIn = new BufferedReader ( in ) ; this . closure = closure ; } private void readTransformedLine ( ) throws IOException { StringBuilder line = new StringBuilder ( ) ; boolean eol = false ; int ch ; while ( ! eol & & ( ch = bufferedIn . read ( ) ) > = <int> ) { if ( ch = = <str> ) { eol = true ; } else if ( ch = = <str> ) { eol = true ; bufferedIn . mark ( <int> ) ; if ( bufferedIn . read ( ) ! = <str> ) { bufferedIn . reset ( ) ; } } else { line . append ( ( char ) ch ) ; } } if ( line . length ( ) = = <int> & & ! eol ) { state = State . EOF ; return ; } Object result = closure . call ( line . toString ( ) ) ; if ( result = = null ) { state = State . SKIP_LINE ; return ; } StringBuilder builder = new StringBuilder ( ) ; builder . append ( result . toString ( ) ) ; if ( eol ) { builder . append ( SystemProperties . getInstance ( ) . getLineSeparator ( ) ) ; } state = State . NORMAL ; transformedLine = builder . toString ( ) ; } private void ensureData ( ) throws IOException { while ( state = = State . SKIP_LINE | | state = = State . NORMAL & & ( transformedLine = = null | | transformedIndex > = transformedLine . length ( ) ) ) { readTransformedLine ( ) ; transformedIndex = <int> ; } } @Override public int read ( ) throws IOException { ensureData ( ) ; if ( state = = State . EOF ) { return - <int> ; } return transformedLine . charAt ( transformedIndex + + ) ; } @Override public int read ( char [ ] cbuf , int off , int len ) throws IOException { for ( int i = <int> ; i < len ; i + + ) { final int c = read ( ) ; if ( c = = - <int> ) { if ( i = = <int> ) { return - <int> ; } else { return i ; } } cbuf [ off + i ] = ( char ) c ; } return len ; } public void close ( ) throws IOException { in . close ( ) ; } } 

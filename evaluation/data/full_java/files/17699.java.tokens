package com . badlogic . gdx . physics . bullet . softbody ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . physics . bullet . dynamics . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class SoftBodyLinkData extends BulletBase { private long swigCPtr ; protected SoftBodyLinkData ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public SoftBodyLinkData ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( SoftBodyLinkData obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_SoftBodyLinkData ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setMaterial ( SoftBodyMaterialData value ) { SoftbodyJNI . SoftBodyLinkData_material_set ( swigCPtr , this , SoftBodyMaterialData . getCPtr ( value ) , value ) ; } public SoftBodyMaterialData getMaterial ( ) { long cPtr = SoftbodyJNI . SoftBodyLinkData_material_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SoftBodyMaterialData ( cPtr , false ) ; } public void setNodeIndices ( int [ ] value ) { SoftbodyJNI . SoftBodyLinkData_nodeIndices_set ( swigCPtr , this , value ) ; } public int [ ] getNodeIndices ( ) { return SoftbodyJNI . SoftBodyLinkData_nodeIndices_get ( swigCPtr , this ) ; } public void setRestLength ( float value ) { SoftbodyJNI . SoftBodyLinkData_restLength_set ( swigCPtr , this , value ) ; } public float getRestLength ( ) { return SoftbodyJNI . SoftBodyLinkData_restLength_get ( swigCPtr , this ) ; } public void setBbending ( int value ) { SoftbodyJNI . SoftBodyLinkData_bbending_set ( swigCPtr , this , value ) ; } public int getBbending ( ) { return SoftbodyJNI . SoftBodyLinkData_bbending_get ( swigCPtr , this ) ; } public SoftBodyLinkData ( ) { this ( SoftbodyJNI . new_SoftBodyLinkData ( ) , true ) ; } } 

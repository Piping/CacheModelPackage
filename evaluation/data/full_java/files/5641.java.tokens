package org . elasticsearch . cluster . settings ; import com . carrotsearch . hppc . cursors . ObjectCursor ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . regex . Regex ; public class DynamicSettings { private final ImmutableOpenMap < String , Validator > dynamicSettings ; public static class Builder { private ImmutableOpenMap . Builder < String , Validator > settings = ImmutableOpenMap . builder ( ) ; public void addSetting ( String setting , Validator validator ) { Validator old = settings . put ( setting , validator ) ; if ( old ! = null ) { throw new IllegalArgumentException ( <str> + setting + <str> ) ; } } public DynamicSettings build ( ) { return new DynamicSettings ( settings . build ( ) ) ; } } private DynamicSettings ( ImmutableOpenMap < String , Validator > settings ) { this . dynamicSettings = settings ; } public boolean isDynamicOrLoggingSetting ( String key ) { return hasDynamicSetting ( key ) | | key . startsWith ( <str> ) ; } public boolean hasDynamicSetting ( String key ) { for ( ObjectCursor < String > dynamicSetting : dynamicSettings . keys ( ) ) { if ( Regex . simpleMatch ( dynamicSetting . value , key ) ) { return true ; } } return false ; } public String validateDynamicSetting ( String dynamicSetting , String value , ClusterState clusterState ) { for ( ObjectObjectCursor < String , Validator > setting : dynamicSettings ) { if ( Regex . simpleMatch ( setting . key , dynamicSetting ) ) { return setting . value . validate ( dynamicSetting , value , clusterState ) ; } } return null ; } } 

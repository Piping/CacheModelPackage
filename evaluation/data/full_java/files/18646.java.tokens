package com . badlogic . gdx . tests . extensions ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . controllers . Controller ; import com . badlogic . gdx . controllers . ControllerListener ; import com . badlogic . gdx . controllers . Controllers ; import com . badlogic . gdx . controllers . PovDirection ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . List ; import com . badlogic . gdx . scenes . scene2d . ui . ScrollPane ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton ; import com . badlogic . gdx . scenes . scene2d . utils . ClickListener ; import com . badlogic . gdx . tests . utils . GdxTest ; public class ControllersTest extends GdxTest { String descriptor ; Skin skin ; Table ui ; Stage stage ; ScrollPane scrollPane ; List < String > console ; @Override public void create ( ) { setupUi ( ) ; } void print ( String message ) { String [ ] lines = console . getItems ( ) . toArray ( String . class ) ; String [ ] newLines = new String [ lines . length + <int> ] ; System . arraycopy ( lines , <int> , newLines , <int> , lines . length ) ; newLines [ newLines . length - <int> ] = message ; console . setItems ( newLines ) ; scrollPane . invalidate ( ) ; scrollPane . validate ( ) ; scrollPane . setScrollPercentY ( <float> ) ; } void clear ( ) { console . setItems ( new String [ <int> ] ) ; } private void setupUi ( ) { skin = new Skin ( Gdx . files . internal ( <str> ) ) ; stage = new Stage ( ) ; ui = new Table ( ) ; ui . setSize ( Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; console = new List ( skin ) ; scrollPane = new ScrollPane ( console ) ; scrollPane . setScrollbarsOnTop ( true ) ; TextButton clear = new TextButton ( <str> , skin ) ; ui . add ( scrollPane ) . expand ( true , true ) . fill ( ) ; ui . row ( ) ; ui . add ( clear ) . expand ( true , false ) . fill ( ) ; stage . addActor ( ui ) ; clear . addListener ( new ClickListener ( ) { @Override public void clicked ( InputEvent event , float x , float y ) { clear ( ) ; } } ) ; Gdx . input . setInputProcessor ( stage ) ; } @Override public void resize ( int width , int height ) { ui . setSize ( width , height ) ; ui . invalidate ( ) ; stage . getViewport ( ) . update ( width , height , true ) ; } boolean initialized = false ; private void initialize ( ) { if ( initialized ) return ; print ( <str> + Controllers . getControllers ( ) . size ) ; int i = <int> ; for ( Controller controller : Controllers . getControllers ( ) ) { print ( <str> + i + + + <str> + controller . getName ( ) ) ; } if ( Controllers . getControllers ( ) . size = = <int> ) print ( <str> ) ; Controllers . addListener ( new ControllerListener ( ) { public int indexOf ( Controller controller ) { return Controllers . getControllers ( ) . indexOf ( controller , true ) ; } @Override public void connected ( Controller controller ) { print ( <str> + controller . getName ( ) ) ; int i = <int> ; for ( Controller c : Controllers . getControllers ( ) ) { print ( <str> + i + + + <str> + c . getName ( ) ) ; } } @Override public void disconnected ( Controller controller ) { print ( <str> + controller . getName ( ) ) ; int i = <int> ; for ( Controller c : Controllers . getControllers ( ) ) { print ( <str> + i + + + <str> + c . getName ( ) ) ; } if ( Controllers . getControllers ( ) . size = = <int> ) print ( <str> ) ; } @Override public boolean buttonDown ( Controller controller , int buttonIndex ) { print ( <str> + indexOf ( controller ) + <str> + buttonIndex + <str> ) ; return false ; } @Override public boolean buttonUp ( Controller controller , int buttonIndex ) { print ( <str> + indexOf ( controller ) + <str> + buttonIndex + <str> ) ; return false ; } @Override public boolean axisMoved ( Controller controller , int axisIndex , float value ) { print ( <str> + indexOf ( controller ) + <str> + axisIndex + <str> + value ) ; return false ; } @Override public boolean povMoved ( Controller controller , int povIndex , PovDirection value ) { print ( <str> + indexOf ( controller ) + <str> + povIndex + <str> + value ) ; return false ; } @Override public boolean xSliderMoved ( Controller controller , int sliderIndex , boolean value ) { print ( <str> + indexOf ( controller ) + <str> + sliderIndex + <str> + value ) ; return false ; } @Override public boolean ySliderMoved ( Controller controller , int sliderIndex , boolean value ) { print ( <str> + indexOf ( controller ) + <str> + sliderIndex + <str> + value ) ; return false ; } @Override public boolean accelerometerMoved ( Controller controller , int accelerometerIndex , Vector3 value ) { return false ; } } ) ; initialized = true ; } @Override public void render ( ) { initialize ( ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; } } 

package org . nd4j . linalg . dataset ; import org . nd4j . linalg . dataset . api . DataSetPreProcessor ; import org . nd4j . linalg . dataset . api . iterator . DataSetIterator ; import org . nd4j . linalg . factory . Nd4j ; import java . io . * ; import java . util . * ; public class ExistingMiniBatchDataSetIterator implements DataSetIterator { private List < String [ ] > paths ; private int currIdx ; private File rootDir ; private int totalBatches = - <int> ; private DataSetPreProcessor dataSetPreProcessor ; public ExistingMiniBatchDataSetIterator ( File rootDir ) { this . rootDir = rootDir ; this . paths = new ArrayList < > ( ) ; Set < String > dataUUIDs = new HashSet < > ( ) ; if ( ! rootDir . exists ( ) ) throw new IllegalArgumentException ( <str> + rootDir . getAbsolutePath ( ) ) ; for ( File f : rootDir . listFiles ( ) ) { dataUUIDs . add ( f . getName ( ) . replace ( <str> , <str> ) . replace ( <str> , <str> ) ) ; } for ( String uuid : dataUUIDs ) { paths . add ( new String [ ] { new File ( rootDir , uuid + <str> ) . getAbsolutePath ( ) , new File ( rootDir , uuid + <str> ) . getAbsolutePath ( ) } ) ; } } @Override public DataSet next ( int num ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public int totalExamples ( ) { throw new UnsupportedOperationException ( ) ; } @Override public int inputColumns ( ) { throw new UnsupportedOperationException ( ) ; } @Override public int totalOutcomes ( ) { throw new UnsupportedOperationException ( ) ; } @Override public void reset ( ) { currIdx = <int> ; } @Override public int batch ( ) { throw new UnsupportedOperationException ( ) ; } @Override public int cursor ( ) { return currIdx ; } @Override public int numExamples ( ) { throw new UnsupportedOperationException ( ) ; } @Override public void setPreProcessor ( DataSetPreProcessor preProcessor ) { this . dataSetPreProcessor = preProcessor ; } @Override public boolean hasNext ( ) { return currIdx < totalBatches ; } @Override public void remove ( ) { } @Override public DataSet next ( ) { try { DataSet ret = read ( currIdx ) ; if ( dataSetPreProcessor ! = null ) dataSetPreProcessor . preProcess ( ret ) ; currIdx + + ; return ret ; } catch ( IOException e ) { throw new IllegalStateException ( <str> ) ; } } private DataSet read ( int idx ) throws IOException { BufferedInputStream bis = new BufferedInputStream ( new FileInputStream ( paths . get ( idx ) [ <int> ] ) ) ; DataInputStream dis = new DataInputStream ( bis ) ; BufferedInputStream labelInputStream = new BufferedInputStream ( new FileInputStream ( paths . get ( idx ) [ <int> ] ) ) ; DataInputStream labelDis = new DataInputStream ( labelInputStream ) ; DataSet d = new DataSet ( Nd4j . read ( dis ) , Nd4j . read ( labelDis ) ) ; dis . close ( ) ; labelDis . close ( ) ; return d ; } } 

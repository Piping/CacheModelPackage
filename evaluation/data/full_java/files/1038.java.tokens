package org . apache . cassandra . thrift ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class ThriftSessionManager { private static final Logger logger = LoggerFactory . getLogger ( ThriftSessionManager . class ) ; public final static ThriftSessionManager instance = new ThriftSessionManager ( ) ; private final ThreadLocal < SocketAddress > remoteSocket = new ThreadLocal < > ( ) ; private final ConcurrentHashMap < SocketAddress , ThriftClientState > activeSocketSessions = new ConcurrentHashMap < > ( ) ; public void setCurrentSocket ( SocketAddress socket ) { remoteSocket . set ( socket ) ; } public ThriftClientState currentSession ( ) { SocketAddress socket = remoteSocket . get ( ) ; assert socket ! = null ; ThriftClientState cState = activeSocketSessions . get ( socket ) ; if ( cState = = null ) { ThriftClientState newState = new ThriftClientState ( ( InetSocketAddress ) socket ) ; cState = activeSocketSessions . putIfAbsent ( socket , newState ) ; if ( cState = = null ) cState = newState ; } return cState ; } public void connectionComplete ( SocketAddress socket ) { assert socket ! = null ; activeSocketSessions . remove ( socket ) ; if ( logger . isTraceEnabled ( ) ) logger . trace ( <str> , socket ) ; } public int getConnectedClients ( ) { return activeSocketSessions . size ( ) ; } } 

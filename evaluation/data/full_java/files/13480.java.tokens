package org . gradle . api . internal . tasks . compile . incremental . analyzer ; import org . gradle . api . file . FileVisitDetails ; import org . gradle . api . file . FileVisitor ; import org . gradle . api . internal . tasks . compile . incremental . deps . ClassDependentsAccumulator ; import org . gradle . api . internal . tasks . compile . incremental . deps . ClassSetAnalysisData ; import java . io . File ; public class ClassFilesAnalyzer implements FileVisitor { private final ClassDependenciesAnalyzer analyzer ; private final String packagePrefix ; private final ClassDependentsAccumulator accumulator ; public ClassFilesAnalyzer ( ClassDependenciesAnalyzer analyzer ) { this ( analyzer , <str> , new ClassDependentsAccumulator ( <str> ) ) ; } ClassFilesAnalyzer ( ClassDependenciesAnalyzer analyzer , String packagePrefix , ClassDependentsAccumulator accumulator ) { this . analyzer = analyzer ; this . packagePrefix = packagePrefix ; this . accumulator = accumulator ; } public void visitDir ( FileVisitDetails dirDetails ) { } public void visitFile ( FileVisitDetails fileDetails ) { File file = fileDetails . getFile ( ) ; if ( ! file . getName ( ) . endsWith ( <str> ) ) { return ; } String className = fileDetails . getPath ( ) . replaceAll ( <str> , <str> ) . replaceAll ( <str> , <str> ) ; if ( ! className . startsWith ( packagePrefix ) ) { return ; } ClassAnalysis analysis = analyzer . getClassAnalysis ( className , file ) ; accumulator . addClass ( className , analysis . isDependencyToAll ( ) , analysis . getClassDependencies ( ) ) ; } public ClassSetAnalysisData getAnalysis ( ) { return new ClassSetAnalysisData ( accumulator . getDependentsMap ( ) ) ; } } 

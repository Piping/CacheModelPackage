package org . elasticsearch . discovery . gce ; import org . elasticsearch . cloud . gce . network . GceNameResolver ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . net . InetAddress ; import static org . hamcrest . Matchers . arrayContaining ; import static org . hamcrest . Matchers . containsString ; public class GceNetworkTests extends ESTestCase { public void testNetworkHostGceDefault ( ) throws IOException { resolveGce ( <str> , InetAddress . getByName ( <str> ) ) ; } public void testNetworkHostPrivateIp ( ) throws IOException { resolveGce ( <str> , InetAddress . getByName ( <str> ) ) ; } public void testNetworkHostPrivateDns ( ) throws IOException { resolveGce ( <str> , InetAddress . getByName ( <str> ) ) ; } public void testNetworkHostWrongSetting ( ) throws IOException { resolveGce ( <str> , ( InetAddress ) null ) ; } public void testNetworkHostPrivateIpInterface ( ) throws IOException { resolveGce ( <str> , InetAddress . getByName ( <str> ) ) ; resolveGce ( <str> , InetAddress . getByName ( <str> ) ) ; } public void networkHostCoreLocal ( ) throws IOException { resolveGce ( <str> , new NetworkService ( Settings . EMPTY ) . resolveBindHostAddresses ( new String [ ] { NetworkService . DEFAULT_NETWORK_HOST } ) ) ; } private void resolveGce ( String gceNetworkSetting , InetAddress expected ) throws IOException { resolveGce ( gceNetworkSetting , expected = = null ? null : new InetAddress [ ] { expected } ) ; } private void resolveGce ( String gceNetworkSetting , InetAddress [ ] expected ) throws IOException { Settings nodeSettings = Settings . builder ( ) . put ( <str> , gceNetworkSetting ) . build ( ) ; NetworkService networkService = new NetworkService ( nodeSettings ) ; GceComputeServiceMock mock = new GceComputeServiceMock ( nodeSettings , networkService ) ; networkService . addCustomNameResolver ( new GceNameResolver ( nodeSettings , mock ) ) ; try { InetAddress [ ] addresses = networkService . resolveBindHostAddresses ( null ) ; if ( expected = = null ) { fail ( <str> ) ; } assertThat ( addresses , arrayContaining ( expected ) ) ; } catch ( IllegalArgumentException e ) { if ( expected ! = null ) { throw e ; } assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

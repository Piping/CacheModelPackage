package org . gradle . api . internal . notations ; import com . google . common . collect . Lists ; import org . gradle . api . artifacts . ModuleIdentifier ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . typeconversion . TypedNotationConverter ; import org . gradle . internal . typeconversion . UnsupportedNotationException ; import org . gradle . util . GUtil ; import java . util . List ; import static org . gradle . api . internal . artifacts . DefaultModuleIdentifier . newId ; public class ModuleIdentifierNotationConverter extends TypedNotationConverter < String , ModuleIdentifier > { private final static List < Character > INVALID_SPEC_CHARS = Lists . newArrayList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; public ModuleIdentifierNotationConverter ( ) { super ( String . class ) ; } protected ModuleIdentifier parseType ( String notation ) { assert notation ! = null ; String [ ] split = notation . split ( <str> ) ; if ( split . length ! = <int> ) { throw new UnsupportedNotationException ( notation ) ; } String group = validate ( split [ <int> ] . trim ( ) , notation ) ; String name = validate ( split [ <int> ] . trim ( ) , notation ) ; return newId ( group , name ) ; } public static String validate ( String part , String notation ) { if ( ! GUtil . isTrue ( part ) ) { throw new UnsupportedNotationException ( notation ) ; } for ( char c : INVALID_SPEC_CHARS ) { if ( part . indexOf ( c ) ! = - <int> ) { throw new UnsupportedNotationException ( notation ) ; } } return part ; } @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( <str> ) . example ( <str> ) ; } } 

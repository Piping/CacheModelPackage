package com . badlogic . gdx . tests . box2d ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . CircleShape ; import com . badlogic . gdx . physics . box2d . Contact ; import com . badlogic . gdx . physics . box2d . ContactImpulse ; import com . badlogic . gdx . physics . box2d . ContactListener ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . Fixture ; import com . badlogic . gdx . physics . box2d . FixtureDef ; import com . badlogic . gdx . physics . box2d . Manifold ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; public class ContactListenerTest extends Box2DTest implements ContactListener { @Override protected void createWorld ( World world ) { world . setContactListener ( this ) ; { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . setRadius ( <int> ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( - <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( - <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( - <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <int> , <int> , new Vector2 ( <int> , <int> ) , <int> ) ; ground . createFixture ( shape , <int> ) ; shape . setAsBox ( <int> , <int> , new Vector2 ( <int> , <int> ) , <int> ) ; ground . createFixture ( shape , <int> ) ; shape . setAsBox ( <int> , <int> , new Vector2 ( <int> , <int> ) , <int> ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; float d = <int> * <int> * <float> ; shape . setRadius ( <int> ) ; shape . set ( new Vector2 ( - <int> + d , <int> ) , new Vector2 ( <int> - d , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( <int> , <int> + d ) , new Vector2 ( <int> , <int> - d ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( <int> - d , <int> ) , new Vector2 ( - <int> + d , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( - <int> , <int> - d ) , new Vector2 ( - <int> , <int> + d ) ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; bd . position . set ( - <int> , <int> ) ; bd . type = BodyType . DynamicBody ; bd . fixedRotation = true ; bd . allowSleep = false ; Body body = world . createBody ( bd ) ; PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <float> , <float> ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; body . createFixture ( fd ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; bd . position . set ( - <int> , <int> ) ; bd . type = BodyType . DynamicBody ; bd . fixedRotation = true ; bd . allowSleep = false ; Body body = world . createBody ( bd ) ; float angle = <int> ; float delta = ( float ) Math . PI / <int> ; Vector2 [ ] vertices = new Vector2 [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) { vertices [ i ] = new Vector2 ( <float> * ( float ) Math . cos ( angle ) , <float> * ( float ) Math . sin ( angle ) ) ; angle + = delta ; } PolygonShape shape = new PolygonShape ( ) ; shape . set ( vertices ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; body . createFixture ( fd ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; bd . position . set ( <int> , <int> ) ; bd . type = BodyType . DynamicBody ; bd . fixedRotation = true ; bd . allowSleep = false ; Body body = world . createBody ( bd ) ; CircleShape shape = new CircleShape ( ) ; shape . setRadius ( <float> ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; body . createFixture ( fd ) ; shape . dispose ( ) ; } } @Override public void beginContact ( Contact contact ) { System . out . println ( String . format ( <str> , getContactAddr ( contact ) ) ) ; System . out . println ( String . format ( <str> , getFixtureAddrA ( contact ) , getFixtureAddrB ( contact ) ) ) ; System . out . println ( String . format ( <str> , contact . getFixtureA ( ) , contact . getFixtureB ( ) ) ) ; final Body toRemove = contact . getFixtureA ( ) . getBody ( ) . getType ( ) = = BodyType . DynamicBody ? contact . getFixtureA ( ) . getBody ( ) : contact . getFixtureB ( ) . getBody ( ) ; Gdx . app . postRunnable ( new Runnable ( ) { @Override public void run ( ) { world . destroyBody ( toRemove ) ; } } ) ; } @Override public void endContact ( Contact contact ) { System . out . println ( String . format ( <str> , getContactAddr ( contact ) ) ) ; System . out . println ( String . format ( <str> , getFixtureAddrA ( contact ) , getFixtureAddrB ( contact ) ) ) ; System . out . println ( String . format ( <str> , contact . getFixtureA ( ) , contact . getFixtureB ( ) ) ) ; final Fixture fixtureA = contact . getFixtureA ( ) ; final Fixture fixtureB = contact . getFixtureB ( ) ; if ( fixtureA = = null | | fixtureB = = null ) { throw new RuntimeException ( <str> ) ; } } @Override public void preSolve ( Contact contact , Manifold oldManifold ) { } @Override public void postSolve ( Contact contact , ContactImpulse impulse ) { } public long getFixtureAddrA ( Contact contact ) { try { long addr = getContactAddr ( contact ) ; Method getFixtureA = contact . getClass ( ) . getDeclaredMethod ( <str> , long . class ) ; getFixtureA . setAccessible ( true ) ; return ( Long ) getFixtureA . invoke ( contact , addr ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return <int> ; } } public long getFixtureAddrB ( Contact contact ) { try { long addr = getContactAddr ( contact ) ; Method getFixtureB = contact . getClass ( ) . getDeclaredMethod ( <str> , long . class ) ; getFixtureB . setAccessible ( true ) ; return ( Long ) getFixtureB . invoke ( contact , addr ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return <int> ; } } public long getContactAddr ( Contact contact ) { try { Field addrField = contact . getClass ( ) . getDeclaredField ( <str> ) ; addrField . setAccessible ( true ) ; return addrField . getLong ( contact ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return <int> ; } } } 

package org . gradle . api . internal . tasks ; import groovy . lang . Closure ; import org . gradle . api . Action ; import org . gradle . api . Task ; import org . gradle . api . UnknownDomainObjectException ; import org . gradle . api . UnknownTaskException ; import org . gradle . api . internal . DefaultNamedDomainObjectSet ; import org . gradle . api . internal . collections . CollectionFilter ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . specs . Spec ; import org . gradle . api . specs . Specs ; import org . gradle . api . tasks . TaskCollection ; import org . gradle . internal . reflect . Instantiator ; public class DefaultTaskCollection < T extends Task > extends DefaultNamedDomainObjectSet < T > implements TaskCollection < T > { private static final Task . Namer NAMER = new Task . Namer ( ) ; protected final ProjectInternal project ; public DefaultTaskCollection ( Class < T > type , Instantiator instantiator , ProjectInternal project ) { super ( type , instantiator , NAMER ) ; this . project = project ; } public DefaultTaskCollection ( DefaultTaskCollection < ? super T > collection , CollectionFilter < T > filter , Instantiator instantiator , ProjectInternal project ) { super ( collection , filter , instantiator , NAMER ) ; this . project = project ; } protected < S extends T > DefaultTaskCollection < S > filtered ( CollectionFilter < S > filter ) { return getInstantiator ( ) . newInstance ( DefaultTaskCollection . class , this , filter , getInstantiator ( ) , project ) ; } @Override public < S extends T > TaskCollection < S > withType ( Class < S > type ) { return filtered ( createFilter ( type ) ) ; } @Override public TaskCollection < T > matching ( Spec < ? super T > spec ) { return filtered ( createFilter ( spec ) ) ; } @Override public TaskCollection < T > matching ( Closure spec ) { return matching ( Specs . < T > convertClosureToSpec ( spec ) ) ; } public Action < ? super T > whenTaskAdded ( Action < ? super T > action ) { return whenObjectAdded ( action ) ; } public void whenTaskAdded ( Closure closure ) { whenObjectAdded ( closure ) ; } @Override public String getTypeDisplayName ( ) { return <str> ; } @Override protected UnknownDomainObjectException createNotFoundException ( String name ) { return new UnknownTaskException ( String . format ( <str> , name , project ) ) ; } } 

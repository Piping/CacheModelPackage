package org . elasticsearch . cluster ; import org . elasticsearch . action . UnavailableShardsException ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . client . Requests ; import org . elasticsearch . common . Priority ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import static org . elasticsearch . client . Requests . createIndexRequest ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . common . unit . TimeValue . timeValueSeconds ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class SimpleDataNodesIT extends ESIntegTestCase { public void testDataNodes ( ) throws Exception { internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . build ( ) ) ; client ( ) . admin ( ) . indices ( ) . create ( createIndexRequest ( <str> ) ) . actionGet ( ) ; try { client ( ) . index ( Requests . indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( source ( <str> , <str> ) ) . timeout ( timeValueSeconds ( <int> ) ) ) . actionGet ( ) ; fail ( <str> ) ; } catch ( UnavailableShardsException e ) { } internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . build ( ) ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForNodes ( <str> ) . setLocal ( true ) . execute ( ) . actionGet ( ) . isTimedOut ( ) , equalTo ( false ) ) ; try { client ( ) . index ( Requests . indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( source ( <str> , <str> ) ) . timeout ( timeValueSeconds ( <int> ) ) ) . actionGet ( ) ; fail ( <str> ) ; } catch ( UnavailableShardsException e ) { } internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , true ) . build ( ) ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForNodes ( <str> ) . setLocal ( true ) . execute ( ) . actionGet ( ) . isTimedOut ( ) , equalTo ( false ) ) ; IndexResponse indexResponse = client ( ) . index ( Requests . indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( source ( <str> , <str> ) ) ) . actionGet ( ) ; assertThat ( indexResponse . getId ( ) , equalTo ( <str> ) ) ; assertThat ( indexResponse . getType ( ) , equalTo ( <str> ) ) ; } private String source ( String id , String nameValue ) { return <str> + id + <str> + nameValue + <str> ; } } 

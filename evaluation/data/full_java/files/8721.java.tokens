package org . elasticsearch . cloud . azure ; import com . microsoft . windowsazure . management . compute . models . DeploymentSlot ; import com . microsoft . windowsazure . management . compute . models . DeploymentStatus ; import com . microsoft . windowsazure . management . compute . models . HostedServiceGetDetailedResponse ; import com . microsoft . windowsazure . management . compute . models . InstanceEndpoint ; import com . microsoft . windowsazure . management . compute . models . RoleInstance ; import org . elasticsearch . cloud . azure . management . AzureComputeServiceAbstractMock ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . CollectionUtils ; import org . elasticsearch . plugins . Plugin ; import java . net . InetAddress ; public class AzureComputeServiceSimpleMock extends AzureComputeServiceAbstractMock { public static class TestPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( AzureDiscoveryModule azureDiscoveryModule ) { azureDiscoveryModule . computeServiceImpl = AzureComputeServiceSimpleMock . class ; } } @Inject public AzureComputeServiceSimpleMock ( Settings settings ) { super ( settings ) ; } @Override public HostedServiceGetDetailedResponse getServiceDetails ( ) { HostedServiceGetDetailedResponse response = new HostedServiceGetDetailedResponse ( ) ; HostedServiceGetDetailedResponse . Deployment deployment = new HostedServiceGetDetailedResponse . Deployment ( ) ; deployment . setName ( <str> ) ; deployment . setDeploymentSlot ( DeploymentSlot . Production ) ; deployment . setStatus ( DeploymentStatus . Running ) ; RoleInstance instance = new RoleInstance ( ) ; instance . setInstanceName ( <str> ) ; instance . setIPAddress ( InetAddress . getLoopbackAddress ( ) ) ; InstanceEndpoint endpoint = new InstanceEndpoint ( ) ; endpoint . setName ( <str> ) ; endpoint . setVirtualIPAddress ( InetAddress . getLoopbackAddress ( ) ) ; endpoint . setPort ( <int> ) ; instance . setInstanceEndpoints ( CollectionUtils . newSingletonArrayList ( endpoint ) ) ; deployment . setRoleInstances ( CollectionUtils . newSingletonArrayList ( instance ) ) ; response . setDeployments ( CollectionUtils . newSingletonArrayList ( deployment ) ) ; return response ; } } 

package com . badlogic . gdx . tests . bench ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . maps . MapLayers ; import com . badlogic . gdx . maps . tiled . TiledMap ; import com . badlogic . gdx . maps . tiled . TiledMapRenderer ; import com . badlogic . gdx . maps . tiled . TiledMapTileLayer ; import com . badlogic . gdx . maps . tiled . TiledMapTileLayer . Cell ; import com . badlogic . gdx . maps . tiled . renderers . OrthogonalTiledMapRenderer ; import com . badlogic . gdx . maps . tiled . tiles . StaticTiledMapTile ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . tests . utils . OrthoCamController ; public class TiledMapBench extends GdxTest { private TiledMap map ; private TiledMapRenderer renderer ; private OrthographicCamera camera ; private OrthoCamController cameraController ; private AssetManager assetManager ; private Texture tiles ; private Texture texture ; private BitmapFont font ; private SpriteBatch batch ; @Override public void create ( ) { float w = Gdx . graphics . getWidth ( ) ; float h = Gdx . graphics . getHeight ( ) ; camera = new OrthographicCamera ( ) ; camera . setToOrtho ( false , ( w / h ) * <int> , <int> ) ; camera . update ( ) ; cameraController = new OrthoCamController ( camera ) ; Gdx . input . setInputProcessor ( cameraController ) ; font = new BitmapFont ( ) ; batch = new SpriteBatch ( ) ; { tiles = new Texture ( Gdx . files . internal ( <str> ) ) ; TextureRegion [ ] [ ] splitTiles = TextureRegion . split ( tiles , <int> , <int> ) ; map = new TiledMap ( ) ; MapLayers layers = map . getLayers ( ) ; for ( int l = <int> ; l < <int> ; l + + ) { TiledMapTileLayer layer = new TiledMapTileLayer ( <int> , <int> , <int> , <int> ) ; for ( int x = <int> ; x < <int> ; x + + ) { for ( int y = <int> ; y < <int> ; y + + ) { int ty = ( int ) ( Math . random ( ) * splitTiles . length ) ; int tx = ( int ) ( Math . random ( ) * splitTiles [ ty ] . length ) ; Cell cell = new Cell ( ) ; cell . setTile ( new StaticTiledMapTile ( splitTiles [ ty ] [ tx ] ) ) ; layer . setCell ( x , y , cell ) ; } } layers . add ( layer ) ; } } renderer = new OrthogonalTiledMapRenderer ( map ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <int> f / <int> f , <int> f / <int> f , <int> f / <int> f , <float> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; camera . update ( ) ; renderer . setView ( camera ) ; renderer . render ( ) ; batch . begin ( ) ; font . draw ( batch , <str> + Gdx . graphics . getFramesPerSecond ( ) , <int> , <int> ) ; batch . end ( ) ; } } 

package org . elasticsearch . index . query . plugin ; import org . apache . lucene . search . BooleanClause ; import org . apache . lucene . search . BooleanQuery ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . index . query . BoolQueryBuilder ; import org . elasticsearch . index . query . QueryShardContext ; import org . elasticsearch . indices . IndicesService ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import org . junit . Before ; import java . util . Collection ; import static org . elasticsearch . index . query . QueryBuilders . boolQuery ; import static org . elasticsearch . index . query . QueryBuilders . constantScoreQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . instanceOf ; public class CustomQueryParserIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( DummyQueryParserPlugin . class ) ; } @Override @Before public void setUp ( ) throws Exception { super . setUp ( ) ; createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; } @Override protected int numberOfShards ( ) { return cluster ( ) . numDataNodes ( ) ; } public void testCustomDummyQuery ( ) { assertHitCount ( client ( ) . prepareSearch ( <str> ) . setQuery ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . get ( ) , <int> ) ; } public void testCustomDummyQueryWithinBooleanQuery ( ) { assertHitCount ( client ( ) . prepareSearch ( <str> ) . setQuery ( new BoolQueryBuilder ( ) . must ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) ) . get ( ) , <int> ) ; } private static QueryShardContext queryShardContext ( ) { IndicesService indicesService = internalCluster ( ) . getDataNodeInstance ( IndicesService . class ) ; return indicesService . indexServiceSafe ( <str> ) . getQueryShardContext ( ) ; } public void testConstantScoreParsesFilter ( ) throws Exception { Query q = constantScoreQuery ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . toQuery ( queryShardContext ( ) ) ; Query inner = ( ( ConstantScoreQuery ) q ) . getQuery ( ) ; assertThat ( inner , instanceOf ( DummyQueryParserPlugin . DummyQuery . class ) ) ; assertEquals ( true , ( ( DummyQueryParserPlugin . DummyQuery ) inner ) . isFilter ) ; } public void testBooleanParsesFilter ( ) throws Exception { Query q = boolQuery ( ) . should ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . must ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . filter ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . mustNot ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . toQuery ( queryShardContext ( ) ) ; assertThat ( q , instanceOf ( BooleanQuery . class ) ) ; BooleanQuery bq = ( BooleanQuery ) q ; assertEquals ( <int> , bq . clauses ( ) . size ( ) ) ; for ( BooleanClause clause : bq . clauses ( ) ) { DummyQueryParserPlugin . DummyQuery dummy = ( DummyQueryParserPlugin . DummyQuery ) clause . getQuery ( ) ; switch ( clause . getOccur ( ) ) { case FILTER : case MUST_NOT : assertEquals ( true , dummy . isFilter ) ; break ; case MUST : case SHOULD : assertEquals ( false , dummy . isFilter ) ; break ; default : throw new AssertionError ( ) ; } } q = boolQuery ( ) . should ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . should ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . must ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . must ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . filter ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . filter ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . mustNot ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . mustNot ( new DummyQueryParserPlugin . DummyQueryBuilder ( ) ) . toQuery ( queryShardContext ( ) ) ; assertThat ( q , instanceOf ( BooleanQuery . class ) ) ; bq = ( BooleanQuery ) q ; assertEquals ( <int> , bq . clauses ( ) . size ( ) ) ; for ( BooleanClause clause : bq . clauses ( ) ) { DummyQueryParserPlugin . DummyQuery dummy = ( DummyQueryParserPlugin . DummyQuery ) clause . getQuery ( ) ; switch ( clause . getOccur ( ) ) { case FILTER : case MUST_NOT : assertEquals ( true , dummy . isFilter ) ; break ; case MUST : case SHOULD : assertEquals ( false , dummy . isFilter ) ; break ; default : throw new AssertionError ( ) ; } } } } 

package org . apache . cassandra . utils . concurrent ; import org . junit . Ignore ; import org . junit . Test ; import junit . framework . Assert ; @Ignore public abstract class AbstractTransactionalTest { protected abstract TestableTransaction newTest ( ) throws Exception ; @Test public void testNoPrepare ( ) throws Exception { TestableTransaction txn ; txn = newTest ( ) ; txn . assertInProgress ( ) ; txn . testing . close ( ) ; txn . assertAborted ( ) ; txn = newTest ( ) ; txn . assertInProgress ( ) ; Assert . assertNull ( txn . testing . abort ( null ) ) ; txn . assertAborted ( ) ; } @Test public void testPrepare ( ) throws Exception { TestableTransaction txn ; txn = newTest ( ) ; txn . assertInProgress ( ) ; txn . testing . prepareToCommit ( ) ; txn . assertPrepared ( ) ; txn . testing . close ( ) ; txn . assertAborted ( ) ; txn = newTest ( ) ; txn . assertInProgress ( ) ; txn . testing . prepareToCommit ( ) ; txn . assertPrepared ( ) ; Assert . assertNull ( txn . testing . abort ( null ) ) ; txn . assertAborted ( ) ; } @Test public void testCommit ( ) throws Exception { TestableTransaction txn = newTest ( ) ; txn . assertInProgress ( ) ; txn . testing . prepareToCommit ( ) ; txn . assertPrepared ( ) ; Assert . assertNull ( txn . testing . commit ( null ) ) ; txn . assertCommitted ( ) ; txn . testing . close ( ) ; txn . assertCommitted ( ) ; Throwable t = txn . testing . abort ( null ) ; Assert . assertTrue ( t instanceof IllegalStateException ) ; txn . assertCommitted ( ) ; } @Test public void testThrowableReturn ( ) throws Exception { TestableTransaction txn ; txn = newTest ( ) ; Throwable t = new RuntimeException ( ) ; txn . testing . prepareToCommit ( ) ; if ( txn . commitCanThrow ( ) ) { try { txn . testing . commit ( t ) ; } catch ( Throwable tt ) { Assert . assertEquals ( t , tt ) ; } Assert . assertEquals ( t , txn . testing . abort ( t ) ) ; Assert . assertEquals ( <int> , t . getSuppressed ( ) . length ) ; } else { Assert . assertEquals ( t , txn . testing . commit ( t ) ) ; Assert . assertEquals ( t , txn . testing . abort ( t ) ) ; Assert . assertTrue ( t . getSuppressed ( ) [ <int> ] instanceof IllegalStateException ) ; } } @Test public void testBadCommit ( ) throws Exception { TestableTransaction txn ; txn = newTest ( ) ; try { txn . testing . commit ( null ) ; Assert . assertTrue ( false ) ; } catch ( IllegalStateException t ) { } txn . assertInProgress ( ) ; Assert . assertNull ( txn . testing . abort ( null ) ) ; txn . assertAborted ( ) ; try { txn . testing . commit ( null ) ; Assert . assertTrue ( false ) ; } catch ( IllegalStateException t ) { } txn . assertAborted ( ) ; } public static abstract class TestableTransaction { final Transactional testing ; public TestableTransaction ( Transactional transactional ) { this . testing = transactional ; } protected abstract void assertInProgress ( ) throws Exception ; protected abstract void assertPrepared ( ) throws Exception ; protected abstract void assertAborted ( ) throws Exception ; protected abstract void assertCommitted ( ) throws Exception ; protected boolean commitCanThrow ( ) { return false ; } } } 

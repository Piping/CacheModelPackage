package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEY_QUERIES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . WrongType ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; @GwtCompatible public class MapGetTester < K , V > extends AbstractMapTester < K , V > { @CollectionSize.Require ( absent = ZERO ) public void testGet_yes ( ) { assertEquals ( <str> , v0 ( ) , get ( k0 ( ) ) ) ; } public void testGet_no ( ) { assertNull ( <str> , get ( k3 ( ) ) ) ; } @MapFeature.Require ( ALLOWS_NULL_KEY_QUERIES ) public void testGet_nullNotContainedButAllowed ( ) { assertNull ( <str> , get ( null ) ) ; } @MapFeature.Require ( absent = ALLOWS_NULL_KEY_QUERIES ) public void testGet_nullNotContainedAndUnsupported ( ) { try { assertNull ( <str> , get ( null ) ) ; } catch ( NullPointerException tolerated ) { } } @MapFeature.Require ( ALLOWS_NULL_KEYS ) @CollectionSize.Require ( absent = ZERO ) public void testGet_nonNullWhenNullContained ( ) { initMapWithNullKey ( ) ; assertNull ( <str> , get ( k3 ( ) ) ) ; } @MapFeature.Require ( ALLOWS_NULL_KEYS ) @CollectionSize.Require ( absent = ZERO ) public void testGet_nullContained ( ) { initMapWithNullKey ( ) ; assertEquals ( <str> , getValueForNullKey ( ) , get ( null ) ) ; } public void testGet_wrongType ( ) { try { assertNull ( <str> , getMap ( ) . get ( WrongType . VALUE ) ) ; } catch ( ClassCastException tolerated ) { } } } 

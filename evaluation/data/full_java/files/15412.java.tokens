package org . gradle . internal . resource . transport . http ; import org . apache . http . HttpResponse ; import org . apache . http . client . methods . HttpGet ; import org . apache . http . client . methods . HttpHead ; import org . apache . http . client . methods . HttpRequestBase ; import org . apache . http . client . protocol . HttpClientContext ; import org . apache . http . impl . client . CloseableHttpClient ; import org . apache . http . impl . client . HttpClientBuilder ; import org . apache . http . protocol . BasicHttpContext ; import org . apache . http . util . EntityUtils ; import org . gradle . api . UncheckedIOException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . Closeable ; import java . io . IOException ; public class HttpClientHelper implements Closeable { private static final Logger LOGGER = LoggerFactory . getLogger ( HttpClientHelper . class ) ; private final CloseableHttpClient client ; private final BasicHttpContext httpContext = new BasicHttpContext ( ) ; public HttpClientHelper ( HttpSettings settings ) { HttpClientBuilder builder = HttpClientBuilder . create ( ) ; builder . setRedirectStrategy ( new AlwaysRedirectRedirectStrategy ( ) ) ; new HttpClientConfigurer ( settings ) . configure ( builder ) ; this . client = builder . build ( ) ; } public HttpResponse performRawHead ( String source ) { return performRequest ( new HttpHead ( source ) ) ; } public HttpResponse performHead ( String source ) { return processResponse ( source , <str> , performRawHead ( source ) ) ; } public HttpResponse performRawGet ( String source ) { return performRequest ( new HttpGet ( source ) ) ; } public HttpResponse performGet ( String source ) { return processResponse ( source , <str> , performRawGet ( source ) ) ; } public HttpResponse performRequest ( HttpRequestBase request ) { String method = request . getMethod ( ) ; HttpResponse response ; try { response = executeGetOrHead ( request ) ; } catch ( IOException e ) { throw new HttpRequestException ( String . format ( <str> , method , request . getURI ( ) ) , e ) ; } return response ; } protected HttpResponse executeGetOrHead ( HttpRequestBase method ) throws IOException { HttpResponse httpResponse = performHttpRequest ( method ) ; if ( ! wasSuccessful ( httpResponse ) ) { EntityUtils . consume ( httpResponse . getEntity ( ) ) ; return httpResponse ; } return httpResponse ; } public boolean wasMissing ( HttpResponse response ) { int statusCode = response . getStatusLine ( ) . getStatusCode ( ) ; return statusCode = = <int> ; } public boolean wasSuccessful ( HttpResponse response ) { int statusCode = response . getStatusLine ( ) . getStatusCode ( ) ; return statusCode > = <int> & & statusCode < <int> ; } public HttpResponse performHttpRequest ( HttpRequestBase request ) throws IOException { httpContext . removeAttribute ( HttpClientContext . REDIRECT_LOCATIONS ) ; LOGGER . debug ( <str> , request . getMethod ( ) , request . getURI ( ) ) ; return client . execute ( request , httpContext ) ; } private HttpResponse processResponse ( String source , String method , HttpResponse response ) { if ( wasMissing ( response ) ) { LOGGER . info ( <str> , method , source ) ; return null ; } if ( ! wasSuccessful ( response ) ) { LOGGER . info ( <str> , method , response . getStatusLine ( ) , source ) ; throw new UncheckedIOException ( String . format ( <str> , method , source , response . getStatusLine ( ) . getStatusCode ( ) , response . getStatusLine ( ) . getReasonPhrase ( ) ) ) ; } return response ; } @Override public void close ( ) throws IOException { if ( client ! = null ) { client . close ( ) ; } } } 

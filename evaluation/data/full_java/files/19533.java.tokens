package io . netty . handler . codec . socksx . v5 ; import io . netty . handler . codec . DecoderResult ; import io . netty . util . NetUtil ; import io . netty . util . internal . StringUtil ; import java . net . IDN ; public final class DefaultSocks5CommandRequest extends AbstractSocks5Message implements Socks5CommandRequest { private final Socks5CommandType type ; private final Socks5AddressType dstAddrType ; private final String dstAddr ; private final int dstPort ; public DefaultSocks5CommandRequest ( Socks5CommandType type , Socks5AddressType dstAddrType , String dstAddr , int dstPort ) { if ( type = = null ) { throw new NullPointerException ( <str> ) ; } if ( dstAddrType = = null ) { throw new NullPointerException ( <str> ) ; } if ( dstAddr = = null ) { throw new NullPointerException ( <str> ) ; } if ( dstAddrType = = Socks5AddressType . IPv4 ) { if ( ! NetUtil . isValidIpV4Address ( dstAddr ) ) { throw new IllegalArgumentException ( <str> + dstAddr + <str> ) ; } } else if ( dstAddrType = = Socks5AddressType . DOMAIN ) { dstAddr = IDN . toASCII ( dstAddr ) ; if ( dstAddr . length ( ) > <int> ) { throw new IllegalArgumentException ( <str> + dstAddr + <str> ) ; } } else if ( dstAddrType = = Socks5AddressType . IPv6 ) { if ( ! NetUtil . isValidIpV6Address ( dstAddr ) ) { throw new IllegalArgumentException ( <str> + dstAddr + <str> ) ; } } if ( dstPort < = <int> | | dstPort > = <int> ) { throw new IllegalArgumentException ( <str> + dstPort + <str> ) ; } this . type = type ; this . dstAddrType = dstAddrType ; this . dstAddr = dstAddr ; this . dstPort = dstPort ; } @Override public Socks5CommandType type ( ) { return type ; } @Override public Socks5AddressType dstAddrType ( ) { return dstAddrType ; } @Override public String dstAddr ( ) { return dstAddr ; } @Override public int dstPort ( ) { return dstPort ; } @Override public String toString ( ) { StringBuilder buf = new StringBuilder ( <int> ) ; buf . append ( StringUtil . simpleClassName ( this ) ) ; DecoderResult decoderResult = decoderResult ( ) ; if ( ! decoderResult . isSuccess ( ) ) { buf . append ( <str> ) ; buf . append ( decoderResult ) ; buf . append ( <str> ) ; } else { buf . append ( <str> ) ; } buf . append ( type ( ) ) ; buf . append ( <str> ) ; buf . append ( dstAddrType ( ) ) ; buf . append ( <str> ) ; buf . append ( dstAddr ( ) ) ; buf . append ( <str> ) ; buf . append ( dstPort ( ) ) ; buf . append ( <str> ) ; return buf . toString ( ) ; } } 

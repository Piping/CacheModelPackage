package org . elasticsearch . script . expression ; import java . io . IOException ; import java . util . Map ; import java . util . Objects ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . queries . function . FunctionValues ; import org . elasticsearch . index . fielddata . AtomicFieldData ; import org . elasticsearch . index . fielddata . AtomicNumericFieldData ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . search . MultiValueMode ; class DateMethodValueSource extends FieldDataValueSource { protected final String methodName ; protected final int calendarType ; DateMethodValueSource ( IndexFieldData < ? > indexFieldData , MultiValueMode multiValueMode , String methodName , int calendarType ) { super ( indexFieldData , multiValueMode ) ; Objects . requireNonNull ( methodName ) ; this . methodName = methodName ; this . calendarType = calendarType ; } @Override public FunctionValues getValues ( Map context , LeafReaderContext leaf ) throws IOException { AtomicFieldData leafData = fieldData . load ( leaf ) ; assert ( leafData instanceof AtomicNumericFieldData ) ; return new DateMethodFunctionValues ( this , multiValueMode , ( AtomicNumericFieldData ) leafData , calendarType ) ; } @Override public String description ( ) { return methodName + <str> + fieldData . getFieldNames ( ) . toString ( ) + <str> ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; if ( ! super . equals ( o ) ) return false ; DateMethodValueSource that = ( DateMethodValueSource ) o ; if ( calendarType ! = that . calendarType ) return false ; return methodName . equals ( that . methodName ) ; } @Override public int hashCode ( ) { int result = super . hashCode ( ) ; result = <int> * result + methodName . hashCode ( ) ; result = <int> * result + calendarType ; return result ; } } 

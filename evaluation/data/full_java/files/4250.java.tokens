package org . eclipse . debug . internal . ui . memory ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . expressions . EvaluationResult ; import org . eclipse . core . expressions . Expression ; import org . eclipse . core . expressions . ExpressionConverter ; import org . eclipse . core . expressions . ExpressionTagNames ; import org . eclipse . core . expressions . IEvaluationContext ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . memory . AbstractMemoryRenderingBindingsProvider ; import org . eclipse . debug . ui . memory . IMemoryRenderingBindingsListener ; import org . eclipse . debug . ui . memory . IMemoryRenderingBindingsProvider ; import org . eclipse . debug . ui . memory . IMemoryRenderingManager ; import org . eclipse . debug . ui . memory . IMemoryRenderingType ; class RenderingBindings extends AbstractMemoryRenderingBindingsProvider implements IMemoryRenderingBindingsProvider { protected IConfigurationElement fConfigurationElement ; private IMemoryRenderingType [ ] fAllTypes ; private IMemoryRenderingType [ ] fRenderingTypes ; private IMemoryRenderingType [ ] fDefaultTypes ; private IMemoryRenderingBindingsProvider fProvider ; private Expression fExpression ; public static final String ATTR_RENDERING_IDS = <str> ; public static final String ATTR_DEFAULT_IDS = <str> ; public static final String ATTR_PRIMARY = <str> ; public static final String ATTR_PROVIDER = <str> ; private static final IMemoryRenderingType [ ] EMPTY = new IMemoryRenderingType [ <int> ] ; RenderingBindings ( IConfigurationElement element ) { fConfigurationElement = element ; } private IMemoryRenderingType [ ] getBindings ( ) { if ( fRenderingTypes = = null ) { String ids = fConfigurationElement . getAttribute ( ATTR_RENDERING_IDS ) ; List < IMemoryRenderingType > list = new ArrayList < IMemoryRenderingType > ( ) ; IMemoryRenderingManager manager = getManager ( ) ; if ( ids ! = null ) { String [ ] strings = ids . split ( <str> ) ; for ( int i = <int> ; i < strings . length ; i + + ) { String id = strings [ i ] . trim ( ) ; IMemoryRenderingType type = manager . getRenderingType ( id ) ; if ( type ! = null ) { list . add ( type ) ; } } } IMemoryRenderingType [ ] defaultBindings = getDefaultBindings ( ) ; for ( int i = <int> ; i < defaultBindings . length ; i + + ) { list . remove ( defaultBindings [ i ] ) ; } fRenderingTypes = list . toArray ( new IMemoryRenderingType [ list . size ( ) ] ) ; } return fRenderingTypes ; } private IMemoryRenderingType [ ] getDefaultBindings ( ) { if ( fDefaultTypes = = null ) { String ids = fConfigurationElement . getAttribute ( ATTR_DEFAULT_IDS ) ; List < IMemoryRenderingType > list = new ArrayList < IMemoryRenderingType > ( ) ; IMemoryRenderingManager manager = getManager ( ) ; if ( ids ! = null ) { String [ ] strings = ids . split ( <str> ) ; for ( int i = <int> ; i < strings . length ; i + + ) { String id = strings [ i ] . trim ( ) ; IMemoryRenderingType type = manager . getRenderingType ( id ) ; if ( type ! = null ) { list . add ( type ) ; } } } String primaryId = getPrimaryId ( ) ; if ( primaryId ! = null ) { IMemoryRenderingType type = manager . getRenderingType ( primaryId ) ; if ( type ! = null ) { list . add ( type ) ; } } fDefaultTypes = list . toArray ( new IMemoryRenderingType [ list . size ( ) ] ) ; } return fDefaultTypes ; } private String getPrimaryId ( ) { return fConfigurationElement . getAttribute ( ATTR_PRIMARY ) ; } protected IMemoryRenderingBindingsProvider getProvider ( IMemoryBlock memoryBlock ) { if ( isBound ( memoryBlock ) ) { if ( fProvider = = null ) { String name = fConfigurationElement . getAttribute ( ATTR_PROVIDER ) ; if ( name ! = null ) { try { fProvider = ( IMemoryRenderingBindingsProvider ) fConfigurationElement . createExecutableExtension ( ATTR_PROVIDER ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } if ( fProvider ! = null ) { fProvider . addListener ( new IMemoryRenderingBindingsListener ( ) { @Override public void memoryRenderingBindingsChanged ( ) { fireBindingsChanged ( ) ; } } ) ; } } } return fProvider ; } private boolean isBound ( IMemoryBlock block ) { Expression expression = getExpression ( ) ; if ( expression ! = null ) { IEvaluationContext context = DebugUIPlugin . createEvaluationContext ( block ) ; try { return expression . evaluate ( context ) = = EvaluationResult . TRUE ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; return false ; } } return true ; } void validate ( ) throws CoreException { if ( fConfigurationElement . getAttribute ( ATTR_PROVIDER ) ! = null ) { if ( fConfigurationElement . getAttribute ( ATTR_RENDERING_IDS ) ! = null | | fConfigurationElement . getAttribute ( ATTR_DEFAULT_IDS ) ! = null | | fConfigurationElement . getAttribute ( ATTR_PRIMARY ) ! = null ) { Status status = new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . INTERNAL_ERROR , <str> + ATTR_PROVIDER + <str> , null ) ; throw new CoreException ( status ) ; } } } private Expression getExpression ( ) { if ( fExpression = = null ) { IConfigurationElement [ ] elements = fConfigurationElement . getChildren ( ExpressionTagNames . ENABLEMENT ) ; IConfigurationElement enablement = elements . length > <int> ? elements [ <int> ] : null ; if ( enablement ! = null ) { try { fExpression = ExpressionConverter . getDefault ( ) . perform ( enablement ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } } return fExpression ; } @Override public IMemoryRenderingType [ ] getRenderingTypes ( IMemoryBlock block ) { if ( isBound ( block ) ) { IMemoryRenderingBindingsProvider provider = getProvider ( block ) ; if ( provider = = null ) { if ( fAllTypes = = null ) { IMemoryRenderingType [ ] defaultBindings = getDefaultBindings ( ) ; IMemoryRenderingType [ ] bindings = getBindings ( ) ; fAllTypes = new IMemoryRenderingType [ defaultBindings . length + bindings . length ] ; for ( int i = <int> ; i < defaultBindings . length ; i + + ) { fAllTypes [ i ] = defaultBindings [ i ] ; } for ( int i = <int> , j = defaultBindings . length ; i < bindings . length ; i + + , j + + ) { fAllTypes [ j ] = bindings [ i ] ; } } return fAllTypes ; } return provider . getRenderingTypes ( block ) ; } return EMPTY ; } @Override public IMemoryRenderingType [ ] getDefaultRenderingTypes ( IMemoryBlock block ) { if ( isBound ( block ) ) { IMemoryRenderingBindingsProvider provider = getProvider ( block ) ; if ( provider = = null ) { return getDefaultBindings ( ) ; } return provider . getDefaultRenderingTypes ( block ) ; } return EMPTY ; } @Override public IMemoryRenderingType getPrimaryRenderingType ( IMemoryBlock block ) { if ( isBound ( block ) ) { IMemoryRenderingBindingsProvider provider = getProvider ( block ) ; if ( provider = = null ) { String primaryId = getPrimaryId ( ) ; if ( primaryId ! = null ) { return getManager ( ) . getRenderingType ( primaryId ) ; } } else { return provider . getPrimaryRenderingType ( block ) ; } } return null ; } private IMemoryRenderingManager getManager ( ) { return DebugUITools . getMemoryRenderingManager ( ) ; } } 

package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ADD ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ITERATOR_REMOVE ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_REMOVE ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . google . MultisetFeature . ENTRIES_ARE_VIEWS ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . Iterables ; import com . google . common . collect . Multiset ; import com . google . common . collect . Multisets ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . util . Collections ; import java . util . Iterator ; @GwtCompatible public class MultisetEntrySetTester < E > extends AbstractMultisetTester < E > { @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testEntrySet_clear ( ) { getMultiset ( ) . entrySet ( ) . clear ( ) ; assertTrue ( <str> , getMultiset ( ) . isEmpty ( ) ) ; } @CollectionSize.Require ( ONE ) @CollectionFeature.Require ( SUPPORTS_ITERATOR_REMOVE ) public void testEntrySet_iteratorRemovePropagates ( ) { Iterator < Multiset . Entry < E > > iterator = getMultiset ( ) . entrySet ( ) . iterator ( ) ; assertTrue ( <str> , iterator . hasNext ( ) ) ; assertEquals ( <str> , Multisets . immutableEntry ( e0 ( ) , <int> ) , iterator . next ( ) ) ; assertFalse ( <str> + <str> , iterator . hasNext ( ) ) ; iterator . remove ( ) ; assertTrue ( <str> , getMultiset ( ) . isEmpty ( ) ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testEntrySet_removePresent ( ) { assertTrue ( <str> , getMultiset ( ) . entrySet ( ) . remove ( Multisets . immutableEntry ( e0 ( ) , <int> ) ) ) ; assertFalse ( <str> , getMultiset ( ) . contains ( e0 ( ) ) ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testEntrySet_removeAbsent ( ) { assertFalse ( <str> , getMultiset ( ) . entrySet ( ) . remove ( Multisets . immutableEntry ( e0 ( ) , <int> ) ) ) ; assertTrue ( <str> , getMultiset ( ) . contains ( e0 ( ) ) ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testEntrySet_removeAllPresent ( ) { assertTrue ( <str> , getMultiset ( ) . entrySet ( ) . removeAll ( Collections . singleton ( Multisets . immutableEntry ( e0 ( ) , <int> ) ) ) ) ; assertFalse ( <str> , getMultiset ( ) . contains ( e0 ( ) ) ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testEntrySet_removeAllAbsent ( ) { assertFalse ( <str> , getMultiset ( ) . entrySet ( ) . removeAll ( Collections . singleton ( Multisets . immutableEntry ( e0 ( ) , <int> ) ) ) ) ; assertTrue ( <str> , getMultiset ( ) . contains ( e0 ( ) ) ) ; } @CollectionSize.Require ( ONE ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testEntrySet_retainAllPresent ( ) { assertFalse ( <str> , getMultiset ( ) . entrySet ( ) . retainAll ( Collections . singleton ( Multisets . immutableEntry ( e0 ( ) , <int> ) ) ) ) ; assertTrue ( <str> , getMultiset ( ) . contains ( e0 ( ) ) ) ; } @CollectionSize.Require ( ONE ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testEntrySet_retainAllAbsent ( ) { assertTrue ( <str> , getMultiset ( ) . entrySet ( ) . retainAll ( Collections . singleton ( Multisets . immutableEntry ( e0 ( ) , <int> ) ) ) ) ; assertFalse ( <str> , getMultiset ( ) . contains ( e0 ( ) ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) @MultisetFeature.Require ( ENTRIES_ARE_VIEWS ) public void testEntryViewReflectsRemove ( ) { initThreeCopies ( ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; Multiset . Entry < E > entry = Iterables . getOnlyElement ( getMultiset ( ) . entrySet ( ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; assertTrue ( getMultiset ( ) . remove ( e0 ( ) ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; assertTrue ( getMultiset ( ) . elementSet ( ) . remove ( e0 ( ) ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_ITERATOR_REMOVE ) @MultisetFeature.Require ( ENTRIES_ARE_VIEWS ) public void testEntryReflectsIteratorRemove ( ) { initThreeCopies ( ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; Multiset . Entry < E > entry = Iterables . getOnlyElement ( getMultiset ( ) . entrySet ( ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; Iterator < E > itr = getMultiset ( ) . iterator ( ) ; itr . next ( ) ; itr . remove ( ) ; assertEquals ( <int> , entry . getCount ( ) ) ; itr . next ( ) ; itr . remove ( ) ; itr . next ( ) ; itr . remove ( ) ; assertEquals ( <int> , entry . getCount ( ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) @MultisetFeature.Require ( ENTRIES_ARE_VIEWS ) public void testEntryReflectsClear ( ) { initThreeCopies ( ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; Multiset . Entry < E > entry = Iterables . getOnlyElement ( getMultiset ( ) . entrySet ( ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; getMultiset ( ) . clear ( ) ; assertEquals ( <int> , entry . getCount ( ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) @MultisetFeature.Require ( ENTRIES_ARE_VIEWS ) public void testEntryReflectsEntrySetClear ( ) { initThreeCopies ( ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; Multiset . Entry < E > entry = Iterables . getOnlyElement ( getMultiset ( ) . entrySet ( ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; getMultiset ( ) . entrySet ( ) . clear ( ) ; assertEquals ( <int> , entry . getCount ( ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_ITERATOR_REMOVE ) @MultisetFeature.Require ( ENTRIES_ARE_VIEWS ) public void testEntryReflectsEntrySetIteratorRemove ( ) { initThreeCopies ( ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; Iterator < Multiset . Entry < E > > entryItr = getMultiset ( ) . entrySet ( ) . iterator ( ) ; Multiset . Entry < E > entry = entryItr . next ( ) ; entryItr . remove ( ) ; assertEquals ( <int> , entry . getCount ( ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) @MultisetFeature.Require ( ENTRIES_ARE_VIEWS ) public void testEntryReflectsElementSetClear ( ) { initThreeCopies ( ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; Multiset . Entry < E > entry = Iterables . getOnlyElement ( getMultiset ( ) . entrySet ( ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; getMultiset ( ) . elementSet ( ) . clear ( ) ; assertEquals ( <int> , entry . getCount ( ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_ITERATOR_REMOVE ) @MultisetFeature.Require ( ENTRIES_ARE_VIEWS ) public void testEntryReflectsElementSetIteratorRemove ( ) { initThreeCopies ( ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; Multiset . Entry < E > entry = Iterables . getOnlyElement ( getMultiset ( ) . entrySet ( ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; Iterator < E > elementItr = getMultiset ( ) . elementSet ( ) . iterator ( ) ; elementItr . next ( ) ; elementItr . remove ( ) ; assertEquals ( <int> , entry . getCount ( ) ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( { SUPPORTS_REMOVE , SUPPORTS_ADD } ) @MultisetFeature.Require ( ENTRIES_ARE_VIEWS ) public void testEntryReflectsRemoveThenAdd ( ) { initThreeCopies ( ) ; assertEquals ( <int> , getMultiset ( ) . count ( e0 ( ) ) ) ; Multiset . Entry < E > entry = Iterables . getOnlyElement ( getMultiset ( ) . entrySet ( ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; assertTrue ( getMultiset ( ) . remove ( e0 ( ) ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; assertTrue ( getMultiset ( ) . elementSet ( ) . remove ( e0 ( ) ) ) ; assertEquals ( <int> , entry . getCount ( ) ) ; getMultiset ( ) . add ( e0 ( ) , <int> ) ; assertEquals ( <int> , entry . getCount ( ) ) ; } public void testToString ( ) { assertEquals ( getMultiset ( ) . entrySet ( ) . toString ( ) , getMultiset ( ) . toString ( ) ) ; } } 

package org . gradle . api . internal . artifacts . ivyservice . resolveengine . result ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . component . LibraryComponentSelector ; import org . gradle . api . artifacts . component . ModuleComponentSelector ; import org . gradle . api . artifacts . component . ProjectComponentSelector ; import org . gradle . internal . component . external . model . DefaultModuleComponentSelector ; import org . gradle . internal . component . local . model . DefaultLibraryComponentSelector ; import org . gradle . internal . component . local . model . DefaultProjectComponentSelector ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . Encoder ; import org . gradle . internal . serialize . Serializer ; import java . io . IOException ; public class ComponentSelectorSerializer implements Serializer < ComponentSelector > { public ComponentSelector read ( Decoder decoder ) throws IOException { byte id = decoder . readByte ( ) ; if ( Implementation . BUILD . getId ( ) = = id ) { return new DefaultProjectComponentSelector ( decoder . readString ( ) ) ; } else if ( Implementation . MODULE . getId ( ) = = id ) { return new DefaultModuleComponentSelector ( decoder . readString ( ) , decoder . readString ( ) , decoder . readString ( ) ) ; } else if ( Implementation . LIBRARY . getId ( ) = = id ) { return new DefaultLibraryComponentSelector ( decoder . readString ( ) , decoder . readNullableString ( ) ) ; } throw new IllegalArgumentException ( <str> + id ) ; } public void write ( Encoder encoder , ComponentSelector value ) throws IOException { if ( value = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( value instanceof DefaultModuleComponentSelector ) { ModuleComponentSelector moduleComponentSelector = ( ModuleComponentSelector ) value ; encoder . writeByte ( Implementation . MODULE . getId ( ) ) ; encoder . writeString ( moduleComponentSelector . getGroup ( ) ) ; encoder . writeString ( moduleComponentSelector . getModule ( ) ) ; encoder . writeString ( moduleComponentSelector . getVersion ( ) ) ; } else if ( value instanceof DefaultProjectComponentSelector ) { ProjectComponentSelector projectComponentSelector = ( ProjectComponentSelector ) value ; encoder . writeByte ( Implementation . BUILD . getId ( ) ) ; encoder . writeString ( projectComponentSelector . getProjectPath ( ) ) ; } else if ( value instanceof DefaultLibraryComponentSelector ) { LibraryComponentSelector libraryComponentSelector = ( LibraryComponentSelector ) value ; encoder . writeByte ( Implementation . LIBRARY . getId ( ) ) ; encoder . writeString ( libraryComponentSelector . getProjectPath ( ) ) ; encoder . writeNullableString ( libraryComponentSelector . getLibraryName ( ) ) ; } else { throw new IllegalArgumentException ( <str> + value . getClass ( ) ) ; } } private static enum Implementation { MODULE ( ( byte ) <int> ) , BUILD ( ( byte ) <int> ) , LIBRARY ( ( byte ) <int> ) ; private final byte id ; private Implementation ( byte id ) { this . id = id ; } private byte getId ( ) { return id ; } } } 

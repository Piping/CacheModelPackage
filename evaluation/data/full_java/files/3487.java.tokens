package org . nd4j . linalg . util ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . shape . Shape ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; public class ShapeTestC extends BaseNd4jTest { public ShapeTestC ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public ShapeTestC ( ) { } public ShapeTestC ( Nd4jBackend backend ) { super ( backend ) ; } public ShapeTestC ( String name ) { super ( name ) ; } @Test public void testToOffsetZero ( ) { INDArray matrix = Nd4j . rand ( <int> , <int> ) ; INDArray rowOne = matrix . getRow ( <int> ) ; INDArray row1Copy = Shape . toOffsetZero ( rowOne ) ; assertEquals ( rowOne , row1Copy ) ; INDArray rows = matrix . getRows ( <int> , <int> ) ; INDArray rowsOffsetZero = Shape . toOffsetZero ( rows ) ; assertEquals ( rows , rowsOffsetZero ) ; INDArray tensor = Nd4j . rand ( new int [ ] { <int> , <int> , <int> } ) ; INDArray getTensor = tensor . slice ( <int> ) . slice ( <int> ) ; INDArray getTensorZero = Shape . toOffsetZero ( getTensor ) ; assertEquals ( getTensor , getTensorZero ) ; } @Test public void testElementWiseCompareOnesInMiddle ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray onesInMiddle = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; for ( int i = <int> ; i < arr . length ( ) ; i + + ) assertEquals ( arr . getDouble ( i ) , onesInMiddle . getDouble ( i ) ) ; } @Override public char ordering ( ) { return <str> ; } } 

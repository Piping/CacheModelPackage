package org . apache . cassandra . db . compaction . writers ; import java . util . Set ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Directories ; import org . apache . cassandra . db . SerializationHeader ; import org . apache . cassandra . db . rows . UnfilteredRowIterator ; import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; import org . apache . cassandra . io . sstable . Descriptor ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . io . sstable . format . SSTableWriter ; import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; public class DefaultCompactionWriter extends CompactionAwareWriter { protected static final Logger logger = LoggerFactory . getLogger ( DefaultCompactionWriter . class ) ; public DefaultCompactionWriter ( ColumnFamilyStore cfs , Directories directories , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables ) { this ( cfs , directories , txn , nonExpiredSSTables , false , false ) ; } @SuppressWarnings ( <str> ) public DefaultCompactionWriter ( ColumnFamilyStore cfs , Directories directories , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , boolean offline , boolean keepOriginals ) { super ( cfs , directories , txn , nonExpiredSSTables , offline , keepOriginals ) ; } @Override public boolean realAppend ( UnfilteredRowIterator partition ) { return sstableWriter . append ( partition ) ! = null ; } @Override protected void switchCompactionLocation ( Directories . DataDirectory directory ) { @SuppressWarnings ( <str> ) SSTableWriter writer = SSTableWriter . create ( Descriptor . fromFilename ( cfs . getSSTablePath ( getDirectories ( ) . getLocationForDisk ( directory ) ) ) , estimatedTotalKeys , minRepairedAt , cfs . metadata , new MetadataCollector ( txn . originals ( ) , cfs . metadata . comparator , <int> ) , SerializationHeader . make ( cfs . metadata , nonExpiredSSTables ) , cfs . indexManager . listIndexes ( ) , txn ) ; sstableWriter . switchWriter ( writer ) ; } @Override public long estimatedKeys ( ) { return estimatedTotalKeys ; } } 

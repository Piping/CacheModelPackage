package org . gradle . model . internal . manage . schema . extract ; import net . jcip . annotations . NotThreadSafe ; import org . gradle . model . internal . manage . schema . ModelSchema ; import org . gradle . model . internal . manage . schema . ModelSchemaStore ; import org . gradle . model . internal . manage . schema . cache . ModelSchemaCache ; import org . gradle . model . internal . type . ModelType ; @NotThreadSafe public class DefaultModelSchemaStore implements ModelSchemaStore { private static final DefaultModelSchemaStore INSTANCE = new DefaultModelSchemaStore ( new ModelSchemaExtractor ( ) ) ; final ModelSchemaCache cache = new ModelSchemaCache ( ) ; final ModelSchemaExtractor schemaExtractor ; public static DefaultModelSchemaStore getInstance ( ) { return INSTANCE ; } public DefaultModelSchemaStore ( ModelSchemaExtractor schemaExtractor ) { this . schemaExtractor = schemaExtractor ; } public < T > ModelSchema < T > getSchema ( ModelType < T > type ) { return schemaExtractor . extract ( type , cache ) ; } @Override public < T > ModelSchema < T > getSchema ( Class < T > type ) { return getSchema ( ModelType . of ( type ) ) ; } @Override public void cleanUp ( ) { cache . cleanUp ( ) ; } public long size ( ) { return cache . size ( ) ; } } 

package com . badlogic . gdx . physics . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . JointDef . JointType ; public abstract class Joint { protected long addr ; private final World world ; private final float [ ] tmp = new float [ <int> ] ; private Object userData ; protected JointEdge jointEdgeA ; protected JointEdge jointEdgeB ; protected Joint ( World world , long addr ) { this . world = world ; this . addr = addr ; } public JointType getType ( ) { int type = jniGetType ( addr ) ; if ( type > <int> & & type < JointType . valueTypes . length ) return JointType . valueTypes [ type ] ; else return JointType . Unknown ; } private native int jniGetType ( long addr ) ; public Body getBodyA ( ) { return world . bodies . get ( jniGetBodyA ( addr ) ) ; } private native long jniGetBodyA ( long addr ) ; public Body getBodyB ( ) { return world . bodies . get ( jniGetBodyB ( addr ) ) ; } private native long jniGetBodyB ( long addr ) ; private final Vector2 anchorA = new Vector2 ( ) ; public Vector2 getAnchorA ( ) { jniGetAnchorA ( addr , tmp ) ; anchorA . x = tmp [ <int> ] ; anchorA . y = tmp [ <int> ] ; return anchorA ; } private native void jniGetAnchorA ( long addr , float [ ] anchorA ) ; private final Vector2 anchorB = new Vector2 ( ) ; public Vector2 getAnchorB ( ) { jniGetAnchorB ( addr , tmp ) ; anchorB . x = tmp [ <int> ] ; anchorB . y = tmp [ <int> ] ; return anchorB ; } private native void jniGetAnchorB ( long addr , float [ ] anchorB ) ; public boolean getCollideConnected ( ) { return jniGetCollideConnected ( addr ) ; } private native boolean jniGetCollideConnected ( long addr ) ; private final Vector2 reactionForce = new Vector2 ( ) ; public Vector2 getReactionForce ( float inv_dt ) { jniGetReactionForce ( addr , inv_dt , tmp ) ; reactionForce . x = tmp [ <int> ] ; reactionForce . y = tmp [ <int> ] ; return reactionForce ; } private native void jniGetReactionForce ( long addr , float inv_dt , float [ ] reactionForce ) ; public float getReactionTorque ( float inv_dt ) { return jniGetReactionTorque ( addr , inv_dt ) ; } private native float jniGetReactionTorque ( long addr , float inv_dt ) ; public Object getUserData ( ) { return userData ; } public void setUserData ( Object userData ) { this . userData = userData ; } public boolean isActive ( ) { return jniIsActive ( addr ) ; } private native boolean jniIsActive ( long addr ) ; } 

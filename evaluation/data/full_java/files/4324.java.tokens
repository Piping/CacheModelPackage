package org . eclipse . debug . internal . ui . sourcelookup ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . model . ISourceLocator ; import org . eclipse . debug . core . sourcelookup . AbstractSourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . containers . DefaultSourceContainer ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . ui . AbstractLaunchConfigurationTab ; import org . eclipse . debug . ui . sourcelookup . WorkingSetSourceContainer ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . ui . IWorkingSet ; import org . eclipse . ui . IWorkingSetManager ; public class SourceLookupPanel extends AbstractLaunchConfigurationTab implements IPropertyChangeListener { protected ILaunchConfiguration fConfig ; protected SourceContainerViewer fPathViewer ; protected Button fDuplicatesButton ; protected List < SourceContainerAction > fActions = new ArrayList < SourceContainerAction > ( <int> ) ; protected ISourceLookupDirector fLocator ; protected AddContainerAction fAddAction ; protected EditContainerAction fEditAction ; protected RestoreDefaultAction fRestoreDefaultAction ; @Override public void createControl ( Composite parent ) { Font font = parent . getFont ( ) ; Composite comp = SWTFactory . createComposite ( parent , <int> , <int> , GridData . FILL_BOTH ) ; SWTFactory . createLabel ( comp , SourceLookupUIMessages . sourceTab_lookupLabel , <int> ) ; fPathViewer = new SourceContainerViewer ( comp , this ) ; fPathViewer . getControl ( ) . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; fPathViewer . getControl ( ) . setFont ( font ) ; Composite pathButtonComp = SWTFactory . createComposite ( comp , comp . getFont ( ) , <int> , <int> , GridData . VERTICAL_ALIGN_BEGINNING | GridData . HORIZONTAL_ALIGN_FILL , <int> , <int> ) ; SWTFactory . createVerticalSpacer ( comp , <int> ) ; fDuplicatesButton = SWTFactory . createCheckButton ( comp , SourceLookupUIMessages . sourceTab_searchDuplicateLabel , null , false , <int> ) ; fDuplicatesButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent evt ) { setDirty ( true ) ; updateLaunchConfigurationDialog ( ) ; } } ) ; fAddAction = new AddContainerAction ( ) ; Button button = SWTFactory . createPushButton ( pathButtonComp , fAddAction . getText ( ) , null ) ; fAddAction . setButton ( button ) ; addAction ( fAddAction ) ; fEditAction = new EditContainerAction ( ) ; button = SWTFactory . createPushButton ( pathButtonComp , fEditAction . getText ( ) , null ) ; fEditAction . setButton ( button ) ; addAction ( fEditAction ) ; SourceContainerAction action = new RemoveAction ( ) ; button = SWTFactory . createPushButton ( pathButtonComp , action . getText ( ) , null ) ; action . setButton ( button ) ; addAction ( action ) ; action = new UpAction ( ) ; button = SWTFactory . createPushButton ( pathButtonComp , action . getText ( ) , null ) ; action . setButton ( button ) ; addAction ( action ) ; action = new DownAction ( ) ; button = SWTFactory . createPushButton ( pathButtonComp , action . getText ( ) , null ) ; action . setButton ( button ) ; addAction ( action ) ; fRestoreDefaultAction = new RestoreDefaultAction ( ) ; button = SWTFactory . createPushButton ( pathButtonComp , fRestoreDefaultAction . getText ( ) , null ) ; fRestoreDefaultAction . setButton ( button ) ; addAction ( fRestoreDefaultAction ) ; retargetActions ( fPathViewer ) ; IWorkingSetManager workingSetMgr = DebugUIPlugin . getDefault ( ) . getWorkbench ( ) . getWorkingSetManager ( ) ; workingSetMgr . addPropertyChangeListener ( this ) ; setControl ( comp ) ; } protected void addAction ( SourceContainerAction action ) { fActions . add ( action ) ; } protected void retargetActions ( SourceContainerViewer viewer ) { for ( SourceContainerAction action : fActions ) { action . setViewer ( viewer ) ; } } @Override public void initializeFrom ( ILaunchConfiguration configuration ) { if ( fLocator ! = null ) { fLocator . dispose ( ) ; fLocator = null ; } setErrorMessage ( null ) ; setMessage ( null ) ; String memento = null ; String type = null ; try { memento = configuration . getAttribute ( ILaunchConfiguration . ATTR_SOURCE_LOCATOR_MEMENTO , ( String ) null ) ; type = configuration . getAttribute ( ILaunchConfiguration . ATTR_SOURCE_LOCATOR_ID , ( String ) null ) ; if ( type = = null ) { type = configuration . getType ( ) . getSourceLocatorId ( ) ; } } catch ( CoreException e ) { setErrorMessage ( e . getMessage ( ) ) ; return ; } if ( type = = null ) { setErrorMessage ( SourceLookupUIMessages . sourceLookupPanel_2 ) ; return ; } boolean migration = false ; try { ISourceLocator locator = getLaunchManager ( ) . newSourceLocator ( type ) ; if ( ! ( locator instanceof AbstractSourceLookupDirector ) ) { memento = null ; type = configuration . getType ( ) . getSourceLocatorId ( ) ; if ( type = = null ) { setErrorMessage ( SourceLookupUIMessages . sourceLookupPanel_2 ) ; return ; } locator = getLaunchManager ( ) . newSourceLocator ( type ) ; if ( ! ( locator instanceof AbstractSourceLookupDirector ) ) { setErrorMessage ( SourceLookupUIMessages . sourceLookupPanel_2 ) ; return ; } migration = true ; } fLocator = ( AbstractSourceLookupDirector ) locator ; if ( memento = = null ) { fLocator . initializeDefaults ( configuration ) ; } else { fLocator . initializeFromMemento ( memento , configuration ) ; } } catch ( CoreException e ) { setErrorMessage ( e . getMessage ( ) ) ; return ; } initializeFrom ( fLocator ) ; if ( migration & & configuration . isWorkingCopy ( ) ) { setDirty ( true ) ; performApply ( ( ILaunchConfigurationWorkingCopy ) configuration ) ; } } public void initializeFrom ( ISourceLookupDirector locator ) { if ( fConfig = = null ) { fConfig = locator . getLaunchConfiguration ( ) ; } fPathViewer . setEntries ( locator . getSourceContainers ( ) ) ; fDuplicatesButton . setSelection ( locator . isFindDuplicates ( ) ) ; fLocator = locator ; fAddAction . setSourceLookupDirector ( locator ) ; fEditAction . setSourceLookupDirector ( locator ) ; fRestoreDefaultAction . setSourceLookupDirector ( locator ) ; setDirty ( false ) ; } @Override public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { if ( isDirty ( ) ) { if ( fLocator = = null ) { configuration . setAttribute ( ILaunchConfiguration . ATTR_SOURCE_LOCATOR_MEMENTO , ( String ) null ) ; configuration . setAttribute ( ILaunchConfiguration . ATTR_SOURCE_LOCATOR_ID , ( String ) null ) ; return ; } ILaunchConfigurationWorkingCopy workingCopy = configuration ; if ( configuration = = null ) { try { ILaunchConfiguration config = fLocator . getLaunchConfiguration ( ) ; if ( config ! = null ) { workingCopy = config . getWorkingCopy ( ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; setErrorMessage ( SourceLookupUIMessages . sourceLookupPanel_1 ) ; return ; } } if ( workingCopy = = null ) { DebugUIPlugin . logErrorMessage ( <str> ) ; return ; } fLocator . setSourceContainers ( fPathViewer . getEntries ( ) ) ; fLocator . setFindDuplicates ( fDuplicatesButton . getSelection ( ) ) ; try { if ( isDefault ( ) ) { workingCopy . setAttribute ( ILaunchConfiguration . ATTR_SOURCE_LOCATOR_MEMENTO , ( String ) null ) ; workingCopy . setAttribute ( ILaunchConfiguration . ATTR_SOURCE_LOCATOR_ID , ( String ) null ) ; } else { workingCopy . setAttribute ( ILaunchConfiguration . ATTR_SOURCE_LOCATOR_MEMENTO , fLocator . getMemento ( ) ) ; workingCopy . setAttribute ( ILaunchConfiguration . ATTR_SOURCE_LOCATOR_ID , fLocator . getId ( ) ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; setErrorMessage ( SourceLookupUIMessages . sourceLookupPanel_1 ) ; } } } protected boolean isDefault ( ) { ISourceContainer [ ] current = getEntries ( ) ; return ! fDuplicatesButton . getSelection ( ) & & current . length = = <int> & & current [ <int> ] instanceof DefaultSourceContainer ; } public ISourceContainer [ ] getEntries ( ) { return fPathViewer . getEntries ( ) ; } @Override public void setDirty ( boolean dirty ) { super . setDirty ( dirty ) ; } @Override public String getName ( ) { return SourceLookupUIMessages . sourceTab_tabTitle ; } @Override public void setDefaults ( ILaunchConfigurationWorkingCopy configuration ) { } @Override protected void updateLaunchConfigurationDialog ( ) { if ( getLaunchConfigurationDialog ( ) ! = null ) { super . updateLaunchConfigurationDialog ( ) ; } } private void validateWorkingSetSourceContainers ( IWorkingSet affectedWorkingSet ) { List < ? > sourceContainers = ( List < ? > ) fPathViewer . getInput ( ) ; if ( sourceContainers ! = null ) { for ( int i = <int> ; i < sourceContainers . size ( ) ; i + + ) { if ( sourceContainers . get ( i ) instanceof WorkingSetSourceContainer ) { WorkingSetSourceContainer wsSrcContainer = ( WorkingSetSourceContainer ) sourceContainers . get ( i ) ; if ( wsSrcContainer . getName ( ) . equals ( affectedWorkingSet . getName ( ) ) ) { sourceContainers . remove ( i ) ; } } } } } @Override public void propertyChange ( PropertyChangeEvent event ) { if ( event . getProperty ( ) . equals ( IWorkingSetManager . CHANGE_WORKING_SET_REMOVE ) ) { validateWorkingSetSourceContainers ( ( IWorkingSet ) event . getOldValue ( ) ) ; } } @Override public void activated ( ILaunchConfigurationWorkingCopy workingCopy ) { initializeFrom ( workingCopy ) ; } public ISourceLookupDirector getDirector ( ) { return fLocator ; } @Override public void dispose ( ) { super . dispose ( ) ; IWorkingSetManager workingSetMgr = DebugUIPlugin . getDefault ( ) . getWorkbench ( ) . getWorkingSetManager ( ) ; workingSetMgr . removePropertyChangeListener ( this ) ; } } 

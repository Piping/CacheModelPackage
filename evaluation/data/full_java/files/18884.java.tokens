package io . netty . handler . codec . compression ; final class Bzip2MoveToFrontTable { private final byte [ ] mtf = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } ; int valueToFront ( final byte value ) { int index = <int> ; byte temp = mtf [ <int> ] ; if ( value ! = temp ) { mtf [ <int> ] = value ; while ( value ! = temp ) { index + + ; final byte temp2 = temp ; temp = mtf [ index ] ; mtf [ index ] = temp2 ; } } return index ; } byte indexToFront ( final int index ) { final byte value = mtf [ index ] ; System . arraycopy ( mtf , <int> , mtf , <int> , index ) ; mtf [ <int> ] = value ; return value ; } } 

package org . gradle . integtests . fixtures . executer ; import org . gradle . api . Action ; import org . gradle . internal . Factory ; import org . gradle . process . internal . AbstractExecHandleBuilder ; import org . gradle . util . SingleMessageLogger ; import java . io . PipedOutputStream ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import static java . lang . String . format ; import static org . hamcrest . Matchers . equalTo ; import static org . junit . Assert . assertThat ; public class ParallelForkingGradleHandle extends ForkingGradleHandle { public ParallelForkingGradleHandle ( PipedOutputStream stdinPipe , boolean isDaemon , Action < ExecutionResult > resultAssertion , String outputEncoding , Factory < ? extends AbstractExecHandleBuilder > execHandleFactory ) { super ( stdinPipe , isDaemon , resultAssertion , outputEncoding , execHandleFactory ) ; } @Override protected ExecutionResult toExecutionResult ( String output , String error ) { return new ParallelExecutionResult ( output , error ) ; } @Override protected ExecutionResult toExecutionFailure ( String output , String error ) { return new ParallelExecutionResult ( output , error ) ; } private static class ParallelExecutionResult extends OutputScrapingExecutionFailure { public ParallelExecutionResult ( String output , String error ) { super ( output , error ) ; } @Override public ExecutionResult assertTasksExecuted ( String . . . taskPaths ) { Set < String > expectedTasks = new HashSet < String > ( Arrays . asList ( taskPaths ) ) ; assertThat ( String . format ( <str> , expectedTasks , getOutput ( ) ) , new HashSet < String > ( getExecutedTasks ( ) ) , equalTo ( expectedTasks ) ) ; return this ; } @Override public String getOutput ( ) { String output = super . getOutput ( ) ; String parallelWarningPrefix = String . format ( SingleMessageLogger . INCUBATION_MESSAGE , <str> ) ; return output . replaceFirst ( format ( <str> , parallelWarningPrefix ) , <str> ) ; } @Override public ExecutionResult assertOutputEquals ( String expectedOutput , boolean ignoreExtraLines , boolean ignoreLineOrder ) { new AnyOrderOutputMatcher ( ) . assertOutputMatches ( expectedOutput , getOutput ( ) , ignoreExtraLines ) ; return this ; } } } 

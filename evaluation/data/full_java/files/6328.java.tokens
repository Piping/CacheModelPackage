package org . elasticsearch . index . analysis ; import com . carrotsearch . hppc . IntObjectHashMap ; import java . io . IOException ; public class NumericFloatAnalyzer extends NumericAnalyzer < NumericFloatTokenizer > { private final static IntObjectHashMap < NamedAnalyzer > builtIn ; static { builtIn = new IntObjectHashMap < > ( ) ; builtIn . put ( Integer . MAX_VALUE , new NamedAnalyzer ( <str> , AnalyzerScope . GLOBAL , new NumericFloatAnalyzer ( Integer . MAX_VALUE ) ) ) ; for ( int i = <int> ; i < = <int> ; i + = <int> ) { builtIn . put ( i , new NamedAnalyzer ( <str> + i , AnalyzerScope . GLOBAL , new NumericFloatAnalyzer ( i ) ) ) ; } } public static NamedAnalyzer buildNamedAnalyzer ( int precisionStep ) { NamedAnalyzer namedAnalyzer = builtIn . get ( precisionStep ) ; if ( namedAnalyzer = = null ) { namedAnalyzer = new NamedAnalyzer ( <str> + precisionStep , AnalyzerScope . INDEX , new NumericFloatAnalyzer ( precisionStep ) ) ; } return namedAnalyzer ; } private final int precisionStep ; public NumericFloatAnalyzer ( int precisionStep ) { this . precisionStep = precisionStep ; } @Override protected NumericFloatTokenizer createNumericTokenizer ( char [ ] buffer ) throws IOException { return new NumericFloatTokenizer ( precisionStep , buffer ) ; } } 

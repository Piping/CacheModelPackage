package org . elasticsearch . search . aggregations . metrics ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . Scorer ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . * ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . metrics . valuecount . ValueCount ; import org . elasticsearch . search . lookup . LeafSearchLookup ; import org . elasticsearch . search . lookup . SearchLookup ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import java . util . * ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . count ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; @ESIntegTestCase.SuiteScopeTestCase public class ValueCountIT extends ESIntegTestCase { @Override public void setupSuiteScopeCluster ( ) throws Exception { createIndex ( <str> ) ; createIndex ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i + <int> ) . startArray ( <str> ) . value ( i + <int> ) . value ( i + <int> ) . endArray ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareFlush ( ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; ensureSearchable ( ) ; } @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singletonList ( FieldValueScriptPlugin . class ) ; } public void testUnmapped ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( count ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> l ) ) ; ValueCount valueCount = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( valueCount , notNullValue ( ) ) ; assertThat ( valueCount . getName ( ) , equalTo ( <str> ) ) ; assertThat ( valueCount . getValue ( ) , equalTo ( <int> l ) ) ; } public void testSingleValuedField ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( count ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ValueCount valueCount = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( valueCount , notNullValue ( ) ) ; assertThat ( valueCount . getName ( ) , equalTo ( <str> ) ) ; assertThat ( valueCount . getValue ( ) , equalTo ( <int> ) ) ; } public void testSingleValuedFieldGetProperty ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( count ( <str> ) . field ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; Global global = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( global , notNullValue ( ) ) ; assertThat ( global . getName ( ) , equalTo ( <str> ) ) ; assertThat ( global . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( global . getAggregations ( ) , notNullValue ( ) ) ; assertThat ( global . getAggregations ( ) . asMap ( ) . size ( ) , equalTo ( <int> ) ) ; ValueCount valueCount = global . getAggregations ( ) . get ( <str> ) ; assertThat ( valueCount , notNullValue ( ) ) ; assertThat ( valueCount . getName ( ) , equalTo ( <str> ) ) ; assertThat ( valueCount . getValue ( ) , equalTo ( <int> ) ) ; assertThat ( ( ValueCount ) global . getProperty ( <str> ) , equalTo ( valueCount ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( <int> d ) ) ; assertThat ( ( double ) valueCount . getProperty ( <str> ) , equalTo ( <int> d ) ) ; } public void testSingleValuedFieldPartiallyUnmapped ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> , <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( count ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ValueCount valueCount = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( valueCount , notNullValue ( ) ) ; assertThat ( valueCount . getName ( ) , equalTo ( <str> ) ) ; assertThat ( valueCount . getValue ( ) , equalTo ( <int> ) ) ; } public void testMultiValuedField ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( count ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ValueCount valueCount = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( valueCount , notNullValue ( ) ) ; assertThat ( valueCount . getName ( ) , equalTo ( <str> ) ) ; assertThat ( valueCount . getValue ( ) , equalTo ( <int> ) ) ; } public void testSingleValuedScript ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( count ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , FieldValueScriptEngine . NAME , null ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ValueCount valueCount = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( valueCount , notNullValue ( ) ) ; assertThat ( valueCount . getName ( ) , equalTo ( <str> ) ) ; assertThat ( valueCount . getValue ( ) , equalTo ( <int> ) ) ; } public void testMultiValuedScript ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( count ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , FieldValueScriptEngine . NAME , null ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ValueCount valueCount = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( valueCount , notNullValue ( ) ) ; assertThat ( valueCount . getName ( ) , equalTo ( <str> ) ) ; assertThat ( valueCount . getValue ( ) , equalTo ( <int> ) ) ; } public void testSingleValuedScriptWithParams ( ) throws Exception { Map < String , Object > params = Collections . singletonMap ( <str> , <str> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( count ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , FieldValueScriptEngine . NAME , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ValueCount valueCount = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( valueCount , notNullValue ( ) ) ; assertThat ( valueCount . getName ( ) , equalTo ( <str> ) ) ; assertThat ( valueCount . getValue ( ) , equalTo ( <int> ) ) ; } public void testMultiValuedScriptWithParams ( ) throws Exception { Map < String , Object > params = Collections . singletonMap ( <str> , <str> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( count ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , FieldValueScriptEngine . NAME , params ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; ValueCount valueCount = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( valueCount , notNullValue ( ) ) ; assertThat ( valueCount . getName ( ) , equalTo ( <str> ) ) ; assertThat ( valueCount . getValue ( ) , equalTo ( <int> ) ) ; } public static class FieldValueScriptPlugin extends Plugin { @Override public String name ( ) { return FieldValueScriptEngine . NAME ; } @Override public String description ( ) { return <str> + ValueCountIT . class ; } public void onModule ( ScriptModule module ) { module . addScriptEngine ( FieldValueScriptEngine . class ) ; } } public static class FieldValueScriptEngine implements ScriptEngineService { public static final String NAME = <str> ; @Override public void close ( ) throws IOException { } @Override public String [ ] types ( ) { return new String [ ] { NAME } ; } @Override public String [ ] extensions ( ) { return types ( ) ; } @Override public boolean sandboxed ( ) { return true ; } @Override public Object compile ( String script ) { return script ; } @Override public ExecutableScript executable ( CompiledScript compiledScript , Map < String , Object > params ) { throw new UnsupportedOperationException ( ) ; } @Override public SearchScript search ( CompiledScript compiledScript , SearchLookup lookup , Map < String , Object > vars ) { final String fieldNameParam ; if ( vars = = null | | vars . containsKey ( <str> ) = = false ) { fieldNameParam = null ; } else { fieldNameParam = ( String ) vars . get ( <str> ) ; } return new SearchScript ( ) { private Map < String , Object > vars = new HashMap < > ( <int> ) ; @Override public LeafSearchScript getLeafSearchScript ( LeafReaderContext context ) throws IOException { final LeafSearchLookup leafLookup = lookup . getLeafSearchLookup ( context ) ; return new LeafSearchScript ( ) { @Override public Object unwrap ( Object value ) { throw new UnsupportedOperationException ( ) ; } @Override public void setNextVar ( String name , Object value ) { vars . put ( name , value ) ; } @Override public Object run ( ) { String fieldName = ( fieldNameParam ! = null ) ? fieldNameParam : ( String ) compiledScript . compiled ( ) ; return leafLookup . doc ( ) . get ( fieldName ) ; } @Override public void setScorer ( Scorer scorer ) { } @Override public void setSource ( Map < String , Object > source ) { } @Override public void setDocument ( int doc ) { if ( leafLookup ! = null ) { leafLookup . setDocument ( doc ) ; } } @Override public long runAsLong ( ) { throw new UnsupportedOperationException ( ) ; } @Override public float runAsFloat ( ) { throw new UnsupportedOperationException ( ) ; } @Override public double runAsDouble ( ) { throw new UnsupportedOperationException ( ) ; } } ; } @Override public boolean needsScores ( ) { return false ; } } ; } @Override public void scriptRemoved ( CompiledScript script ) { } } } 

package com . badlogic . gdx . backends . android ; import java . lang . reflect . Method ; import android . opengl . GLSurfaceView ; import android . opengl . GLSurfaceView . EGLConfigChooser ; import android . util . Log ; import android . view . SurfaceHolder ; import android . view . View ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . backends . android . surfaceview . GLSurfaceView20 ; import com . badlogic . gdx . backends . android . surfaceview . GLSurfaceView20API18 ; import com . badlogic . gdx . backends . android . surfaceview . GLSurfaceViewAPI18 ; import com . badlogic . gdx . backends . android . surfaceview . ResolutionStrategy ; import com . badlogic . gdx . utils . GdxRuntimeException ; public final class AndroidGraphicsLiveWallpaper extends AndroidGraphics { public AndroidGraphicsLiveWallpaper ( AndroidLiveWallpaper lwp , AndroidApplicationConfiguration config , ResolutionStrategy resolutionStrategy ) { super ( lwp , config , resolutionStrategy , false ) ; } SurfaceHolder getSurfaceHolder ( ) { synchronized ( ( ( AndroidLiveWallpaper ) app ) . service . sync ) { return ( ( AndroidLiveWallpaper ) app ) . service . getSurfaceHolder ( ) ; } } @Override protected View createGLSurfaceView ( AndroidApplicationBase application , final ResolutionStrategy resolutionStrategy ) { if ( ! checkGL20 ( ) ) throw new GdxRuntimeException ( <str> ) ; EGLConfigChooser configChooser = getEglConfigChooser ( ) ; int sdkVersion = android . os . Build . VERSION . SDK_INT ; if ( sdkVersion < = <int> & & config . useGLSurfaceView20API18 ) { GLSurfaceView20API18 view = new GLSurfaceView20API18 ( application . getContext ( ) , resolutionStrategy ) { @Override public SurfaceHolder getHolder ( ) { return getSurfaceHolder ( ) ; } public void onDestroy ( ) { onDetachedFromWindow ( ) ; } } ; if ( configChooser ! = null ) view . setEGLConfigChooser ( configChooser ) ; else view . setEGLConfigChooser ( config . r , config . g , config . b , config . a , config . depth , config . stencil ) ; view . setRenderer ( this ) ; return view ; } else { GLSurfaceView20 view = new GLSurfaceView20 ( application . getContext ( ) , resolutionStrategy ) { @Override public SurfaceHolder getHolder ( ) { return getSurfaceHolder ( ) ; } public void onDestroy ( ) { onDetachedFromWindow ( ) ; } } ; if ( configChooser ! = null ) view . setEGLConfigChooser ( configChooser ) ; else view . setEGLConfigChooser ( config . r , config . g , config . b , config . a , config . depth , config . stencil ) ; view . setRenderer ( this ) ; return view ; } } public void onDestroyGLSurfaceView ( ) { if ( view ! = null ) { if ( view instanceof GLSurfaceView | | view instanceof GLSurfaceViewAPI18 ) { try { view . getClass ( ) . getMethod ( <str> ) . invoke ( view ) ; if ( AndroidLiveWallpaperService . DEBUG ) Log . d ( AndroidLiveWallpaperService . TAG , <str> ) ; } catch ( Throwable t ) { Log . e ( AndroidLiveWallpaperService . TAG , <str> ) ; t . printStackTrace ( ) ; } } } } @Override void resume ( ) { synchronized ( synch ) { running = true ; resume = true ; while ( resume ) { try { synch . wait ( ) ; } catch ( InterruptedException ignored ) { Gdx . app . log ( <str> , <str> ) ; } } } } @Override public void onDrawFrame ( javax . microedition . khronos . opengles . GL10 gl ) { long time = System . nanoTime ( ) ; deltaTime = ( time - lastFrameTime ) / <float> ; lastFrameTime = time ; if ( ! resume ) { mean . addValue ( deltaTime ) ; } else { deltaTime = <int> ; } boolean lrunning = false ; boolean lpause = false ; boolean ldestroy = false ; boolean lresume = false ; synchronized ( synch ) { lrunning = running ; lpause = pause ; ldestroy = destroy ; lresume = resume ; if ( resume ) { resume = false ; synch . notifyAll ( ) ; } if ( pause ) { pause = false ; synch . notifyAll ( ) ; } if ( destroy ) { destroy = false ; synch . notifyAll ( ) ; } } if ( lresume ) { app . getApplicationListener ( ) . resume ( ) ; Gdx . app . log ( <str> , <str> ) ; } if ( lrunning ) { synchronized ( app . getRunnables ( ) ) { app . getExecutedRunnables ( ) . clear ( ) ; app . getExecutedRunnables ( ) . addAll ( app . getRunnables ( ) ) ; app . getRunnables ( ) . clear ( ) ; for ( int i = <int> ; i < app . getExecutedRunnables ( ) . size ; i + + ) { try { app . getExecutedRunnables ( ) . get ( i ) . run ( ) ; } catch ( Throwable t ) { t . printStackTrace ( ) ; } } } app . getInput ( ) . processEvents ( ) ; frameId + + ; app . getApplicationListener ( ) . render ( ) ; } if ( lpause ) { app . getApplicationListener ( ) . pause ( ) ; Gdx . app . log ( <str> , <str> ) ; } if ( ldestroy ) { app . getApplicationListener ( ) . dispose ( ) ; Gdx . app . log ( <str> , <str> ) ; } if ( time - frameStart > <int> ) { fps = frames ; frames = <int> ; frameStart = time ; } frames + + ; } @Override protected void logManagedCachesStatus ( ) { if ( AndroidLiveWallpaperService . DEBUG ) { super . logManagedCachesStatus ( ) ; } } } 

package org . eclipse . debug . internal . ui . sourcelookup ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . ui . IWindowListener ; import org . eclipse . ui . IWorkbench ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PlatformUI ; public class SourceLookupManager implements IWindowListener { private static SourceLookupManager fgDefault ; private Map < IWorkbenchWindow , SourceLookupService > fServices = new HashMap < IWorkbenchWindow , SourceLookupService > ( ) ; private SourceLookupManager ( ) { IWorkbench workbench = PlatformUI . getWorkbench ( ) ; IWorkbenchWindow [ ] workbenchWindows = workbench . getWorkbenchWindows ( ) ; for ( int i = <int> ; i < workbenchWindows . length ; i + + ) { IWorkbenchWindow window = workbenchWindows [ i ] ; windowOpened ( window ) ; } workbench . addWindowListener ( this ) ; } public static SourceLookupManager getDefault ( ) { if ( fgDefault = = null ) { fgDefault = new SourceLookupManager ( ) ; } return fgDefault ; } @Override public void windowActivated ( IWorkbenchWindow window ) { } @Override public void windowDeactivated ( IWorkbenchWindow window ) { } @Override public void windowClosed ( IWorkbenchWindow window ) { SourceLookupService service = fServices . get ( window ) ; if ( service ! = null ) { fServices . remove ( window ) ; service . dispose ( ) ; } } @Override public void windowOpened ( IWorkbenchWindow window ) { SourceLookupService service = fServices . get ( window ) ; if ( service = = null ) { service = new SourceLookupService ( window ) ; fServices . put ( window , service ) ; } } public void displaySource ( Object context , IWorkbenchPage page , boolean forceSourceLookup ) { IWorkbenchWindow window = page . getWorkbenchWindow ( ) ; SourceLookupService service = fServices . get ( window ) ; if ( service ! = null ) { service . displaySource ( context , page , forceSourceLookup ) ; } } } 

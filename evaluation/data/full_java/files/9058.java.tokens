package org . elasticsearch . test . rest . spec ; import org . apache . http . client . methods . HttpPost ; import org . apache . http . client . methods . HttpPut ; import org . elasticsearch . test . rest . client . RestPath ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; import java . util . Set ; public class RestApi { private final String name ; private List < String > methods = new ArrayList < > ( ) ; private List < String > paths = new ArrayList < > ( ) ; private List < String > pathParts = new ArrayList < > ( ) ; private List < String > params = new ArrayList < > ( ) ; private BODY body = BODY . NOT_SUPPORTED ; public enum BODY { NOT_SUPPORTED , OPTIONAL , REQUIRED } RestApi ( String name ) { this . name = name ; } public String getName ( ) { return name ; } public List < String > getMethods ( ) { return methods ; } public List < String > getSupportedMethods ( Set < String > restParams ) { if ( <str> . equals ( name ) | | <str> . equals ( name ) ) { List < String > indexMethods = new ArrayList < > ( ) ; for ( String method : methods ) { if ( restParams . contains ( <str> ) ) { if ( HttpPut . METHOD_NAME . equals ( method ) ) { indexMethods . add ( method ) ; } } else { if ( HttpPost . METHOD_NAME . equals ( method ) ) { indexMethods . add ( method ) ; } } } return indexMethods ; } return methods ; } void addMethod ( String method ) { this . methods . add ( method ) ; } public List < String > getPaths ( ) { return paths ; } void addPath ( String path ) { this . paths . add ( path ) ; } public List < String > getPathParts ( ) { return pathParts ; } void addPathPart ( String pathPart ) { this . pathParts . add ( pathPart ) ; } public List < String > getParams ( ) { return params ; } void addParam ( String param ) { this . params . add ( param ) ; } void setBodyOptional ( ) { this . body = BODY . OPTIONAL ; } void setBodyRequired ( ) { this . body = BODY . REQUIRED ; } public boolean isBodySupported ( ) { return body ! = BODY . NOT_SUPPORTED ; } public boolean isBodyRequired ( ) { return body = = BODY . REQUIRED ; } public RestPath [ ] getFinalPaths ( Map < String , String > pathParams ) { List < RestPath > matchingRestPaths = findMatchingRestPaths ( pathParams . keySet ( ) ) ; if ( matchingRestPaths = = null | | matchingRestPaths . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> + name + <str> + pathParams ) ; } RestPath [ ] restPaths = new RestPath [ matchingRestPaths . size ( ) ] ; for ( int i = <int> ; i < matchingRestPaths . size ( ) ; i + + ) { RestPath restPath = matchingRestPaths . get ( i ) ; restPaths [ i ] = restPath . replacePlaceholders ( pathParams ) ; } return restPaths ; } private List < RestPath > findMatchingRestPaths ( Set < String > restParams ) { List < RestPath > matchingRestPaths = new ArrayList < > ( ) ; RestPath [ ] restPaths = buildRestPaths ( ) ; for ( RestPath restPath : restPaths ) { if ( restPath . matches ( restParams ) ) { matchingRestPaths . add ( restPath ) ; } } return matchingRestPaths ; } private RestPath [ ] buildRestPaths ( ) { RestPath [ ] restPaths = new RestPath [ paths . size ( ) ] ; for ( int i = <int> ; i < restPaths . length ; i + + ) { restPaths [ i ] = new RestPath ( paths . get ( i ) ) ; } return restPaths ; } } 

package com . badlogic . gdx . tests ; import java . io . InputStream ; import java . net . HttpURLConnection ; import java . net . URL ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . StreamUtils ; public class TextureDownloadTest extends GdxTest { TextureRegion image ; BitmapFont font ; SpriteBatch batch ; @Override public void create ( ) { new Thread ( new Runnable ( ) { private int download ( byte [ ] out , String url ) { InputStream in = null ; try { HttpURLConnection conn = null ; conn = ( HttpURLConnection ) new URL ( url ) . openConnection ( ) ; conn . setDoInput ( true ) ; conn . setDoOutput ( false ) ; conn . setUseCaches ( true ) ; conn . connect ( ) ; in = conn . getInputStream ( ) ; int readBytes = <int> ; while ( true ) { int length = in . read ( out , readBytes , out . length - readBytes ) ; if ( length = = - <int> ) break ; readBytes + = length ; } return readBytes ; } catch ( Exception ex ) { return <int> ; } finally { StreamUtils . closeQuietly ( in ) ; } } @Override public void run ( ) { byte [ ] bytes = new byte [ <int> * <int> ] ; int numBytes = download ( bytes , <str> ) ; if ( numBytes ! = <int> ) { Pixmap pixmap = new Pixmap ( bytes , <int> , numBytes ) ; final int originalWidth = pixmap . getWidth ( ) ; final int originalHeight = pixmap . getHeight ( ) ; int width = MathUtils . nextPowerOfTwo ( pixmap . getWidth ( ) ) ; int height = MathUtils . nextPowerOfTwo ( pixmap . getHeight ( ) ) ; final Pixmap potPixmap = new Pixmap ( width , height , pixmap . getFormat ( ) ) ; potPixmap . drawPixmap ( pixmap , <int> , <int> , <int> , <int> , pixmap . getWidth ( ) , pixmap . getHeight ( ) ) ; pixmap . dispose ( ) ; Gdx . app . postRunnable ( new Runnable ( ) { @Override public void run ( ) { image = new TextureRegion ( new Texture ( potPixmap ) , <int> , <int> , originalWidth , originalHeight ) ; } } ) ; } } } ) . start ( ) ; font = new BitmapFont ( ) ; batch = new SpriteBatch ( ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; if ( image ! = null ) { batch . begin ( ) ; batch . draw ( image , <int> , <int> ) ; batch . end ( ) ; } else { batch . begin ( ) ; font . draw ( batch , <str> , <int> , <int> ) ; batch . end ( ) ; } } } 

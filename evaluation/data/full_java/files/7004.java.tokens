package org . elasticsearch . rest . action . admin . indices . settings ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . action . admin . indices . settings . get . GetSettingsRequest ; import org . elasticsearch . action . admin . indices . settings . get . GetSettingsResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestGetSettingsAction extends BaseRestHandler { @Inject public RestGetSettingsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final String [ ] names = request . paramAsStringArrayOrEmptyIfAll ( <str> ) ; GetSettingsRequest getSettingsRequest = new GetSettingsRequest ( ) . indices ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) . indicesOptions ( IndicesOptions . fromRequest ( request , IndicesOptions . strictExpandOpen ( ) ) ) . humanReadable ( request . hasParam ( <str> ) ) . names ( names ) ; getSettingsRequest . local ( request . paramAsBoolean ( <str> , getSettingsRequest . local ( ) ) ) ; client . admin ( ) . indices ( ) . getSettings ( getSettingsRequest , new RestBuilderListener < GetSettingsResponse > ( channel ) { @Override public RestResponse buildResponse ( GetSettingsResponse getSettingsResponse , XContentBuilder builder ) throws Exception { builder . startObject ( ) ; for ( ObjectObjectCursor < String , Settings > cursor : getSettingsResponse . getIndexToSettings ( ) ) { if ( cursor . value . getAsMap ( ) . isEmpty ( ) ) { continue ; } builder . startObject ( cursor . key , XContentBuilder . FieldCaseConversion . NONE ) ; builder . startObject ( Fields . SETTINGS ) ; cursor . value . toXContent ( builder , request ) ; builder . endObject ( ) ; builder . endObject ( ) ; } builder . endObject ( ) ; return new BytesRestResponse ( OK , builder ) ; } } ) ; } static class Fields { static final XContentBuilderString SETTINGS = new XContentBuilderString ( <str> ) ; } } 

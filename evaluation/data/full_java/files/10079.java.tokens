package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . ListFeature . SUPPORTS_SET ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import java . lang . reflect . Method ; @GwtCompatible ( emulated = true ) public class ListSetTester < E > extends AbstractListTester < E > { @ListFeature.Require ( SUPPORTS_SET ) @CollectionSize.Require ( absent = ZERO ) public void testSet ( ) { doTestSet ( e3 ( ) ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) @ListFeature.Require ( SUPPORTS_SET ) public void testSet_null ( ) { doTestSet ( null ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) @ListFeature.Require ( SUPPORTS_SET ) public void testSet_replacingNull ( ) { E [ ] elements = createSamplesArray ( ) ; int i = aValidIndex ( ) ; elements [ i ] = null ; collection = getSubjectGenerator ( ) . create ( elements ) ; doTestSet ( e3 ( ) ) ; } private void doTestSet ( E newValue ) { int index = aValidIndex ( ) ; E initialValue = getList ( ) . get ( index ) ; assertEquals ( <str> , initialValue , getList ( ) . set ( index , newValue ) ) ; assertEquals ( <str> , newValue , getList ( ) . get ( index ) ) ; assertEquals ( <str> , getNumElements ( ) , getList ( ) . size ( ) ) ; } @ListFeature.Require ( SUPPORTS_SET ) public void testSet_indexTooLow ( ) { try { getList ( ) . set ( - <int> , e3 ( ) ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } expectUnchanged ( ) ; } @ListFeature.Require ( SUPPORTS_SET ) public void testSet_indexTooHigh ( ) { int index = getNumElements ( ) ; try { getList ( ) . set ( index , e3 ( ) ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } expectUnchanged ( ) ; } @CollectionSize.Require ( absent = ZERO ) @ListFeature.Require ( absent = SUPPORTS_SET ) public void testSet_unsupported ( ) { try { getList ( ) . set ( aValidIndex ( ) , e3 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; } @CollectionSize.Require ( ZERO ) @ListFeature.Require ( absent = SUPPORTS_SET ) public void testSet_unsupportedByEmptyList ( ) { try { getList ( ) . set ( <int> , e3 ( ) ) ; fail ( <str> + <str> ) ; } catch ( UnsupportedOperationException tolerated ) { } catch ( IndexOutOfBoundsException tolerated ) { } expectUnchanged ( ) ; } @CollectionSize.Require ( absent = ZERO ) @ListFeature.Require ( SUPPORTS_SET ) @CollectionFeature.Require ( absent = ALLOWS_NULL_VALUES ) public void testSet_nullUnsupported ( ) { try { getList ( ) . set ( aValidIndex ( ) , null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } expectUnchanged ( ) ; } private int aValidIndex ( ) { return getList ( ) . size ( ) / <int> ; } @GwtIncompatible ( <str> ) public static Method getSetNullSupportedMethod ( ) { return Helpers . getMethod ( ListSetTester . class , <str> ) ; } } 

package org . gradle . api . internal . notations ; import org . gradle . api . Project ; import org . gradle . api . artifacts . ProjectDependency ; import org . gradle . api . internal . artifacts . DefaultProjectDependencyFactory ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . typeconversion . NotationConvertResult ; import org . gradle . internal . typeconversion . NotationConverter ; import org . gradle . internal . typeconversion . TypeConversionException ; public class DependencyProjectNotationConverter implements NotationConverter < Project , ProjectDependency > { private final DefaultProjectDependencyFactory factory ; public DependencyProjectNotationConverter ( DefaultProjectDependencyFactory factory ) { this . factory = factory ; } @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( <str> ) . example ( <str> ) ; } public void convert ( Project notation , NotationConvertResult < ? super ProjectDependency > result ) throws TypeConversionException { result . converted ( factory . create ( notation ) ) ; } } 

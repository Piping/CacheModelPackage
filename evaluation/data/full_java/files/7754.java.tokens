package org . elasticsearch . action . search ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . MatchAllQueryParser ; import org . elasticsearch . indices . query . IndicesQueriesRegistry ; import org . elasticsearch . rest . action . search . RestMultiSearchAction ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . StreamsUtils ; import java . io . IOException ; import java . util . Collections ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class MultiSearchRequestTests extends ESTestCase { public void testSimpleAdd ( ) throws Exception { IndicesQueriesRegistry registry = new IndicesQueriesRegistry ( Settings . EMPTY , Collections . singleton ( new MatchAllQueryParser ( ) ) , new NamedWriteableRegistry ( ) ) ; byte [ ] data = StreamsUtils . copyToBytesFromClasspath ( <str> ) ; MultiSearchRequest request = RestMultiSearchAction . parseRequest ( new MultiSearchRequest ( ) , new BytesArray ( data ) , false , null , null , null , null , IndicesOptions . strictExpandOpenAndForbidClosed ( ) , true , registry , ParseFieldMatcher . EMPTY ) ; assertThat ( request . requests ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indicesOptions ( ) , equalTo ( IndicesOptions . fromOptions ( true , true , true , true , IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) . length , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indicesOptions ( ) , equalTo ( IndicesOptions . fromOptions ( false , true , true , true , IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indicesOptions ( ) , equalTo ( IndicesOptions . fromOptions ( false , true , true , false , IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indicesOptions ( ) , equalTo ( IndicesOptions . fromOptions ( true , true , true , true , IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indicesOptions ( ) , equalTo ( IndicesOptions . fromOptions ( true , false , false , true , IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) . length , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) . length , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . searchType ( ) , equalTo ( SearchType . DFS_QUERY_THEN_FETCH ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) . length , equalTo ( <int> ) ) ; } public void testSimpleAdd2 ( ) throws Exception { IndicesQueriesRegistry registry = new IndicesQueriesRegistry ( Settings . EMPTY , Collections . singleton ( new MatchAllQueryParser ( ) ) , new NamedWriteableRegistry ( ) ) ; byte [ ] data = StreamsUtils . copyToBytesFromClasspath ( <str> ) ; MultiSearchRequest request = RestMultiSearchAction . parseRequest ( new MultiSearchRequest ( ) , new BytesArray ( data ) , false , null , null , null , null , IndicesOptions . strictExpandOpenAndForbidClosed ( ) , true , registry , ParseFieldMatcher . EMPTY ) ; assertThat ( request . requests ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) . length , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) . length , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) . length , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . searchType ( ) , equalTo ( SearchType . DFS_QUERY_THEN_FETCH ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) . length , equalTo ( <int> ) ) ; } public void testSimpleAdd3 ( ) throws Exception { IndicesQueriesRegistry registry = new IndicesQueriesRegistry ( Settings . EMPTY , Collections . singleton ( new MatchAllQueryParser ( ) ) , new NamedWriteableRegistry ( ) ) ; byte [ ] data = StreamsUtils . copyToBytesFromClasspath ( <str> ) ; MultiSearchRequest request = RestMultiSearchAction . parseRequest ( new MultiSearchRequest ( ) , new BytesArray ( data ) , false , null , null , null , null , IndicesOptions . strictExpandOpenAndForbidClosed ( ) , true , registry , ParseFieldMatcher . EMPTY ) ; assertThat ( request . requests ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) . length , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . searchType ( ) , equalTo ( SearchType . DFS_QUERY_THEN_FETCH ) ) ; } public void testSimpleAdd4 ( ) throws Exception { IndicesQueriesRegistry registry = new IndicesQueriesRegistry ( Settings . EMPTY , Collections . singleton ( new MatchAllQueryParser ( ) ) , new NamedWriteableRegistry ( ) ) ; byte [ ] data = StreamsUtils . copyToBytesFromClasspath ( <str> ) ; MultiSearchRequest request = RestMultiSearchAction . parseRequest ( new MultiSearchRequest ( ) , new BytesArray ( data ) , false , null , null , null , null , IndicesOptions . strictExpandOpenAndForbidClosed ( ) , true , registry , ParseFieldMatcher . EMPTY ) ; assertThat ( request . requests ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . requestCache ( ) , equalTo ( true ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . preference ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . requestCache ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . preference ( ) , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . routing ( ) , equalTo ( <str> ) ) ; } public void testSimpleAdd5 ( ) throws Exception { IndicesQueriesRegistry registry = new IndicesQueriesRegistry ( Settings . EMPTY , Collections . singleton ( new MatchAllQueryParser ( ) ) , new NamedWriteableRegistry ( ) ) ; byte [ ] data = StreamsUtils . copyToBytesFromClasspath ( <str> ) ; MultiSearchRequest request = RestMultiSearchAction . parseRequest ( new MultiSearchRequest ( ) , new BytesArray ( data ) , true , null , null , null , null , IndicesOptions . strictExpandOpenAndForbidClosed ( ) , true , registry , ParseFieldMatcher . EMPTY ) ; assertThat ( request . requests ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . requestCache ( ) , equalTo ( true ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . preference ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . requestCache ( ) , nullValue ( ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . preference ( ) , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . types ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( request . requests ( ) . get ( <int> ) . routing ( ) , equalTo ( <str> ) ) ; assertNotNull ( request . requests ( ) . get ( <int> ) . template ( ) ) ; assertNotNull ( request . requests ( ) . get ( <int> ) . template ( ) ) ; assertNotNull ( request . requests ( ) . get ( <int> ) . template ( ) ) ; assertEquals ( ScriptService . ScriptType . INLINE , request . requests ( ) . get ( <int> ) . template ( ) . getType ( ) ) ; assertEquals ( ScriptService . ScriptType . INLINE , request . requests ( ) . get ( <int> ) . template ( ) . getType ( ) ) ; assertEquals ( ScriptService . ScriptType . INLINE , request . requests ( ) . get ( <int> ) . template ( ) . getType ( ) ) ; assertEquals ( <str> , request . requests ( ) . get ( <int> ) . template ( ) . getScript ( ) ) ; assertEquals ( <str> , request . requests ( ) . get ( <int> ) . template ( ) . getScript ( ) ) ; assertEquals ( <str> , request . requests ( ) . get ( <int> ) . template ( ) . getScript ( ) ) ; assertEquals ( <int> , request . requests ( ) . get ( <int> ) . template ( ) . getParams ( ) . size ( ) ) ; assertEquals ( <int> , request . requests ( ) . get ( <int> ) . template ( ) . getParams ( ) . size ( ) ) ; assertEquals ( <int> , request . requests ( ) . get ( <int> ) . template ( ) . getParams ( ) . size ( ) ) ; } public void testResponseErrorToXContent ( ) throws IOException { MultiSearchResponse response = new MultiSearchResponse ( new MultiSearchResponse . Item [ ] { new MultiSearchResponse . Item ( null , new IllegalStateException ( <str> ) ) , new MultiSearchResponse . Item ( null , new IllegalStateException ( <str> ) ) } ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; response . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; assertEquals ( <str> , builder . string ( ) ) ; } } 

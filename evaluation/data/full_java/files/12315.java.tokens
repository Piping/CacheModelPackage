package org . gradle . reporting ; import org . gradle . internal . html . SimpleHtmlWriter ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; public class TabsRenderer < T > extends ReportRenderer < T , SimpleHtmlWriter > { private final List < TabDefinition > tabs = new ArrayList < TabDefinition > ( ) ; public void add ( String title , ReportRenderer < T , SimpleHtmlWriter > contentRenderer ) { tabs . add ( new TabDefinition ( title , contentRenderer ) ) ; } public void clear ( ) { tabs . clear ( ) ; } @Override public void render ( T model , SimpleHtmlWriter htmlWriterWriter ) throws IOException { htmlWriterWriter . startElement ( <str> ) . attribute ( <str> , <str> ) ; htmlWriterWriter . startElement ( <str> ) . attribute ( <str> , <str> ) ; for ( int i = <int> ; i < this . tabs . size ( ) ; i + + ) { TabDefinition tab = this . tabs . get ( i ) ; String tabId = String . format ( <str> , i ) ; htmlWriterWriter . startElement ( <str> ) ; htmlWriterWriter . startElement ( <str> ) . attribute ( <str> , <str> + tabId ) . characters ( tab . title ) . endElement ( ) ; htmlWriterWriter . endElement ( ) ; } htmlWriterWriter . endElement ( ) ; for ( int i = <int> ; i < this . tabs . size ( ) ; i + + ) { TabDefinition tab = this . tabs . get ( i ) ; String tabId = String . format ( <str> , i ) ; htmlWriterWriter . startElement ( <str> ) . attribute ( <str> , tabId ) . attribute ( <str> , <str> ) ; htmlWriterWriter . startElement ( <str> ) . characters ( tab . title ) . endElement ( ) ; tab . renderer . render ( model , htmlWriterWriter ) ; htmlWriterWriter . endElement ( ) ; } htmlWriterWriter . endElement ( ) ; } private class TabDefinition { final String title ; final ReportRenderer < T , SimpleHtmlWriter > renderer ; private TabDefinition ( String title , ReportRenderer < T , SimpleHtmlWriter > renderer ) { this . title = title ; this . renderer = renderer ; } } } 

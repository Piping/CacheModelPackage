package com . badlogic . gdx . graphics . g2d ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . nio . ByteBuffer ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . utils . Disposable ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class Gdx2DPixmap implements Disposable { public static final int GDX2D_FORMAT_ALPHA = <int> ; public static final int GDX2D_FORMAT_LUMINANCE_ALPHA = <int> ; public static final int GDX2D_FORMAT_RGB888 = <int> ; public static final int GDX2D_FORMAT_RGBA8888 = <int> ; public static final int GDX2D_FORMAT_RGB565 = <int> ; public static final int GDX2D_FORMAT_RGBA4444 = <int> ; public static final int GDX2D_SCALE_NEAREST = <int> ; public static final int GDX2D_SCALE_LINEAR = <int> ; public static final int GDX2D_BLEND_NONE = <int> ; public static final int GDX2D_BLEND_SRC_OVER = <int> ; public static int toGlFormat ( int format ) { switch ( format ) { case GDX2D_FORMAT_ALPHA : return GL20 . GL_ALPHA ; case GDX2D_FORMAT_LUMINANCE_ALPHA : return GL20 . GL_LUMINANCE_ALPHA ; case GDX2D_FORMAT_RGB888 : case GDX2D_FORMAT_RGB565 : return GL20 . GL_RGB ; case GDX2D_FORMAT_RGBA8888 : case GDX2D_FORMAT_RGBA4444 : return GL20 . GL_RGBA ; default : throw new GdxRuntimeException ( <str> + format ) ; } } public static int toGlType ( int format ) { switch ( format ) { case GDX2D_FORMAT_ALPHA : case GDX2D_FORMAT_LUMINANCE_ALPHA : case GDX2D_FORMAT_RGB888 : case GDX2D_FORMAT_RGBA8888 : return GL20 . GL_UNSIGNED_BYTE ; case GDX2D_FORMAT_RGB565 : return GL20 . GL_UNSIGNED_SHORT_5_6_5 ; case GDX2D_FORMAT_RGBA4444 : return GL20 . GL_UNSIGNED_SHORT_4_4_4_4 ; default : throw new GdxRuntimeException ( <str> + format ) ; } } long basePtr ; int width ; int height ; int format ; ByteBuffer pixelPtr ; long [ ] nativeData = new long [ <int> ] ; static { setBlend ( GDX2D_BLEND_SRC_OVER ) ; setScale ( GDX2D_SCALE_LINEAR ) ; } public Gdx2DPixmap ( byte [ ] encodedData , int offset , int len , int requestedFormat ) throws IOException { pixelPtr = load ( nativeData , encodedData , offset , len ) ; if ( pixelPtr = = null ) throw new IOException ( <str> + getFailureReason ( ) ) ; basePtr = nativeData [ <int> ] ; width = ( int ) nativeData [ <int> ] ; height = ( int ) nativeData [ <int> ] ; format = ( int ) nativeData [ <int> ] ; if ( requestedFormat ! = <int> & & requestedFormat ! = format ) { convert ( requestedFormat ) ; } } public Gdx2DPixmap ( InputStream in , int requestedFormat ) throws IOException { ByteArrayOutputStream bytes = new ByteArrayOutputStream ( <int> ) ; byte [ ] buffer = new byte [ <int> ] ; int readBytes = <int> ; while ( ( readBytes = in . read ( buffer ) ) ! = - <int> ) { bytes . write ( buffer , <int> , readBytes ) ; } buffer = bytes . toByteArray ( ) ; pixelPtr = load ( nativeData , buffer , <int> , buffer . length ) ; if ( pixelPtr = = null ) throw new IOException ( <str> + getFailureReason ( ) ) ; basePtr = nativeData [ <int> ] ; width = ( int ) nativeData [ <int> ] ; height = ( int ) nativeData [ <int> ] ; format = ( int ) nativeData [ <int> ] ; if ( requestedFormat ! = <int> & & requestedFormat ! = format ) { convert ( requestedFormat ) ; } } public Gdx2DPixmap ( int width , int height , int format ) throws GdxRuntimeException { pixelPtr = newPixmap ( nativeData , width , height , format ) ; if ( pixelPtr = = null ) throw new GdxRuntimeException ( <str> ) ; this . basePtr = nativeData [ <int> ] ; this . width = ( int ) nativeData [ <int> ] ; this . height = ( int ) nativeData [ <int> ] ; this . format = ( int ) nativeData [ <int> ] ; } public Gdx2DPixmap ( ByteBuffer pixelPtr , long [ ] nativeData ) { this . pixelPtr = pixelPtr ; this . basePtr = nativeData [ <int> ] ; this . width = ( int ) nativeData [ <int> ] ; this . height = ( int ) nativeData [ <int> ] ; this . format = ( int ) nativeData [ <int> ] ; } private void convert ( int requestedFormat ) { Gdx2DPixmap pixmap = new Gdx2DPixmap ( width , height , requestedFormat ) ; pixmap . drawPixmap ( this , <int> , <int> , <int> , <int> , width , height ) ; dispose ( ) ; this . basePtr = pixmap . basePtr ; this . format = pixmap . format ; this . height = pixmap . height ; this . nativeData = pixmap . nativeData ; this . pixelPtr = pixmap . pixelPtr ; this . width = pixmap . width ; } @Override public void dispose ( ) { free ( basePtr ) ; } public void clear ( int color ) { clear ( basePtr , color ) ; } public void setPixel ( int x , int y , int color ) { setPixel ( basePtr , x , y , color ) ; } public int getPixel ( int x , int y ) { return getPixel ( basePtr , x , y ) ; } public void drawLine ( int x , int y , int x2 , int y2 , int color ) { drawLine ( basePtr , x , y , x2 , y2 , color ) ; } public void drawRect ( int x , int y , int width , int height , int color ) { drawRect ( basePtr , x , y , width , height , color ) ; } public void drawCircle ( int x , int y , int radius , int color ) { drawCircle ( basePtr , x , y , radius , color ) ; } public void fillRect ( int x , int y , int width , int height , int color ) { fillRect ( basePtr , x , y , width , height , color ) ; } public void fillCircle ( int x , int y , int radius , int color ) { fillCircle ( basePtr , x , y , radius , color ) ; } public void fillTriangle ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 , int color ) { fillTriangle ( basePtr , x1 , y1 , x2 , y2 , x3 , y3 , color ) ; } public void drawPixmap ( Gdx2DPixmap src , int srcX , int srcY , int dstX , int dstY , int width , int height ) { drawPixmap ( src . basePtr , basePtr , srcX , srcY , width , height , dstX , dstY , width , height ) ; } public void drawPixmap ( Gdx2DPixmap src , int srcX , int srcY , int srcWidth , int srcHeight , int dstX , int dstY , int dstWidth , int dstHeight ) { drawPixmap ( src . basePtr , basePtr , srcX , srcY , srcWidth , srcHeight , dstX , dstY , dstWidth , dstHeight ) ; } public static Gdx2DPixmap newPixmap ( InputStream in , int requestedFormat ) { try { return new Gdx2DPixmap ( in , requestedFormat ) ; } catch ( IOException e ) { return null ; } } public static Gdx2DPixmap newPixmap ( int width , int height , int format ) { try { return new Gdx2DPixmap ( width , height , format ) ; } catch ( IllegalArgumentException e ) { return null ; } } public ByteBuffer getPixels ( ) { return pixelPtr ; } public int getHeight ( ) { return height ; } public int getWidth ( ) { return width ; } public int getFormat ( ) { return format ; } public int getGLInternalFormat ( ) { return toGlFormat ( format ) ; } public int getGLFormat ( ) { return getGLInternalFormat ( ) ; } public int getGLType ( ) { return toGlType ( format ) ; } public String getFormatString ( ) { switch ( format ) { case GDX2D_FORMAT_ALPHA : return <str> ; case GDX2D_FORMAT_LUMINANCE_ALPHA : return <str> ; case GDX2D_FORMAT_RGB888 : return <str> ; case GDX2D_FORMAT_RGBA8888 : return <str> ; case GDX2D_FORMAT_RGB565 : return <str> ; case GDX2D_FORMAT_RGBA4444 : return <str> ; default : return <str> ; } } private static native ByteBuffer load ( long [ ] nativeData , byte [ ] buffer , int offset , int len ) ; private static native ByteBuffer newPixmap ( long [ ] nativeData , int width , int height , int format ) ; private static native void free ( long pixmap ) ; private static native void clear ( long pixmap , int color ) ; private static native void setPixel ( long pixmap , int x , int y , int color ) ; private static native int getPixel ( long pixmap , int x , int y ) ; private static native void drawLine ( long pixmap , int x , int y , int x2 , int y2 , int color ) ; private static native void drawRect ( long pixmap , int x , int y , int width , int height , int color ) ; private static native void drawCircle ( long pixmap , int x , int y , int radius , int color ) ; private static native void fillRect ( long pixmap , int x , int y , int width , int height , int color ) ; private static native void fillCircle ( long pixmap , int x , int y , int radius , int color ) ; private static native void fillTriangle ( long pixmap , int x1 , int y1 , int x2 , int y2 , int x3 , int y3 , int color ) ; private static native void drawPixmap ( long src , long dst , int srcX , int srcY , int srcWidth , int srcHeight , int dstX , int dstY , int dstWidth , int dstHeight ) ; public static native void setBlend ( int blend ) ; public static native void setScale ( int scale ) ; public static native String getFailureReason ( ) ; } 

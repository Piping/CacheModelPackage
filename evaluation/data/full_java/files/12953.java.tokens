package org . gradle . api . tasks . diagnostics . internal ; import com . google . common . collect . SetMultimap ; import com . google . common . collect . TreeMultimap ; import org . gradle . util . Path ; import java . util . ArrayList ; import java . util . Comparator ; import java . util . List ; import java . util . Set ; public class AggregateMultiProjectTaskReportModel implements TaskReportModel { private List < TaskReportModel > projects = new ArrayList < TaskReportModel > ( ) ; private SetMultimap < String , TaskDetails > groups ; private final boolean mergeTasksWithSameName ; public AggregateMultiProjectTaskReportModel ( boolean mergeTasksWithSameName ) { this . mergeTasksWithSameName = mergeTasksWithSameName ; } public void add ( TaskReportModel project ) { projects . add ( project ) ; } public void build ( ) { groups = TreeMultimap . create ( new Comparator < String > ( ) { public int compare ( String string1 , String string2 ) { return string1 . compareToIgnoreCase ( string2 ) ; } } , new Comparator < TaskDetails > ( ) { public int compare ( TaskDetails task1 , TaskDetails task2 ) { return task1 . getPath ( ) . compareTo ( task2 . getPath ( ) ) ; } } ) ; for ( TaskReportModel project : projects ) { for ( String group : project . getGroups ( ) ) { for ( final TaskDetails task : project . getTasksForGroup ( group ) ) { groups . put ( group , mergeTasksWithSameName ? new MergedTaskDetails ( task ) : task ) ; } } } } public Set < String > getGroups ( ) { return groups . keySet ( ) ; } public Set < TaskDetails > getTasksForGroup ( String group ) { return groups . get ( group ) ; } private static class MergedTaskDetails implements TaskDetails { private final TaskDetails task ; public MergedTaskDetails ( TaskDetails task ) { this . task = task ; } public Path getPath ( ) { return Path . path ( task . getPath ( ) . getName ( ) ) ; } public Set < TaskDetails > getChildren ( ) { return task . getChildren ( ) ; } public String getDescription ( ) { return task . getDescription ( ) ; } public Set < TaskDetails > getDependencies ( ) { return task . getDependencies ( ) ; } } } 

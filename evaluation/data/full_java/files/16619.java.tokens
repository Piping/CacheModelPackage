package org . junit . tests . experimental . rules ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . is ; import static org . hamcrest . CoreMatchers . notNullValue ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; import java . io . File ; import java . io . IOException ; import org . junit . After ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import org . junit . rules . ExpectedException ; import org . junit . rules . TemporaryFolder ; public class TemporaryFolderUsageTest { private TemporaryFolder tempFolder ; @Rule public final ExpectedException thrown = ExpectedException . none ( ) ; @Before public void setUp ( ) { tempFolder = new TemporaryFolder ( ) ; } @After public void tearDown ( ) { tempFolder . delete ( ) ; } @Test ( expected = IllegalStateException . class ) public void getRootShouldThrowIllegalStateExceptionIfCreateWasNotInvoked ( ) { new TemporaryFolder ( ) . getRoot ( ) ; } @Test ( expected = IllegalStateException . class ) public void newFileThrowsIllegalStateExceptionIfCreateWasNotInvoked ( ) throws IOException { new TemporaryFolder ( ) . newFile ( ) ; } @Test ( expected = IllegalStateException . class ) public void newFileWithGivenNameThrowsIllegalStateExceptionIfCreateWasNotInvoked ( ) throws IOException { new TemporaryFolder ( ) . newFile ( <str> ) ; } @Test public void newFileWithGivenFilenameThrowsIllegalArgumentExceptionIfFileExists ( ) throws IOException { tempFolder . create ( ) ; tempFolder . newFile ( <str> ) ; thrown . expect ( IOException . class ) ; thrown . expectMessage ( <str> ) ; tempFolder . newFile ( <str> ) ; } @Test ( expected = IllegalStateException . class ) public void newFolderThrowsIllegalStateExceptionIfCreateWasNotInvoked ( ) throws IOException { new TemporaryFolder ( ) . newFolder ( ) ; } @Test ( expected = IllegalStateException . class ) public void newFolderWithGivenPathThrowsIllegalStateExceptionIfCreateWasNotInvoked ( ) throws IOException { new TemporaryFolder ( ) . newFolder ( <str> , <str> , <str> ) ; } @Test public void newFolderWithGivenFolderThrowsIllegalArgumentExceptionIfFolderExists ( ) throws IOException { tempFolder . create ( ) ; tempFolder . newFolder ( <str> ) ; thrown . expect ( IOException . class ) ; thrown . expectMessage ( <str> ) ; tempFolder . newFolder ( <str> ) ; } @Test public void newFolderWithGivenFolderThrowsIOExceptionIfFolderNameConsistsOfMultiplePathComponents ( ) throws IOException { tempFolder . create ( ) ; thrown . expect ( IOException . class ) ; thrown . expectMessage ( <str> ) ; tempFolder . newFolder ( <str> ) ; } @Test public void newFolderWithGivenPathThrowsIllegalArgumentExceptionIfPathExists ( ) throws IOException { tempFolder . create ( ) ; tempFolder . newFolder ( <str> , <str> , <str> ) ; thrown . expect ( IOException . class ) ; thrown . expectMessage ( <str> ) ; tempFolder . newFolder ( <str> , <str> , <str> ) ; } @Test public void newFolderWithGivenPathThrowsIOExceptionIfFolderNamesConsistOfMultiplePathComponents ( ) throws IOException { tempFolder . create ( ) ; thrown . expect ( IOException . class ) ; thrown . expectMessage ( <str> ) ; tempFolder . newFolder ( <str> , <str> , <str> ) ; } @Test public void createInitializesRootFolder ( ) throws IOException { tempFolder . create ( ) ; assertFileExists ( tempFolder . getRoot ( ) ) ; } @Test public void deleteShouldDoNothingIfRootFolderWasNotInitialized ( ) { tempFolder . delete ( ) ; } @Test public void deleteRemovesRootFolder ( ) throws IOException { tempFolder . create ( ) ; tempFolder . delete ( ) ; assertFileDoesNotExist ( tempFolder . getRoot ( ) ) ; } @Test public void newRandomFileIsCreatedUnderRootFolder ( ) throws IOException { tempFolder . create ( ) ; File f = tempFolder . newFile ( ) ; assertFileExists ( f ) ; assertFileCreatedUnderRootFolder ( <str> , f ) ; } @Test public void newNamedFileIsCreatedUnderRootFolder ( ) throws IOException { final String fileName = <str> ; tempFolder . create ( ) ; File f = tempFolder . newFile ( fileName ) ; assertFileExists ( f ) ; assertFileCreatedUnderRootFolder ( <str> , f ) ; assertThat ( <str> , f . getName ( ) , equalTo ( fileName ) ) ; } @Test public void newRandomFolderIsCreatedUnderRootFolder ( ) throws IOException { tempFolder . create ( ) ; File f = tempFolder . newFolder ( ) ; assertFileExists ( f ) ; assertFileCreatedUnderRootFolder ( <str> , f ) ; } @Test public void newNestedFoldersCreatedUnderRootFolder ( ) throws IOException { tempFolder . create ( ) ; File f = tempFolder . newFolder ( <str> , <str> , <str> ) ; assertFileExists ( f ) ; assertParentFolderForFileIs ( f , new File ( tempFolder . getRoot ( ) , <str> ) ) ; assertParentFolderForFileIs ( f . getParentFile ( ) , new File ( tempFolder . getRoot ( ) , <str> ) ) ; assertFileCreatedUnderRootFolder ( <str> , f . getParentFile ( ) . getParentFile ( ) ) ; } @Test public void canSetTheBaseFileForATemporaryFolder ( ) throws IOException { File tempDir = createTemporaryFolder ( ) ; TemporaryFolder folder = new TemporaryFolder ( tempDir ) ; folder . create ( ) ; assertThat ( tempDir , is ( folder . getRoot ( ) . getParentFile ( ) ) ) ; } private File createTemporaryFolder ( ) throws IOException { File tempDir = File . createTempFile ( <str> , <str> ) ; assertTrue ( <str> , tempDir . delete ( ) ) ; assertTrue ( <str> , tempDir . mkdir ( ) ) ; return tempDir ; } private void assertFileDoesNotExist ( File file ) { checkFileExists ( <str> , file , false ) ; } private void checkFileExists ( String msg , File file , boolean exists ) { assertThat ( <str> , file , is ( notNullValue ( ) ) ) ; assertThat ( <str> + file . getAbsolutePath ( ) + <str> + msg , file . exists ( ) , is ( exists ) ) ; } private void assertFileExists ( File file ) { checkFileExists ( <str> , file , true ) ; } private void assertFileCreatedUnderRootFolder ( String msg , File f ) { assertParentFolderForFileIs ( f , tempFolder . getRoot ( ) ) ; } private void assertParentFolderForFileIs ( File f , File parentFolder ) { assertThat ( <str> + f . getAbsolutePath ( ) + <str> , f . getParentFile ( ) , is ( parentFolder ) ) ; } } 

package org . elasticsearch . script ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . script . ScriptService . ScriptType ; import java . io . IOException ; import java . util . Collections ; import java . util . Map ; public class Template extends Script { public static final String DEFAULT_LANG = <str> ; private XContentType contentType ; public Template ( ) { super ( ) ; } public Template ( String template ) { super ( template , DEFAULT_LANG ) ; } public Template ( String template , ScriptType type , @Nullable String lang , @Nullable XContentType xContentType , @Nullable Map < String , Object > params ) { super ( template , type , lang = = null ? DEFAULT_LANG : lang , params ) ; this . contentType = xContentType ; } public XContentType getContentType ( ) { return contentType ; } @Override protected void doReadFrom ( StreamInput in ) throws IOException { if ( in . readBoolean ( ) ) { this . contentType = XContentType . readFrom ( in ) ; } } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { boolean hasContentType = contentType ! = null ; out . writeBoolean ( hasContentType ) ; if ( hasContentType ) { XContentType . writeTo ( contentType , out ) ; } } @Override protected XContentBuilder scriptFieldToXContent ( String template , ScriptType type , XContentBuilder builder , Params builderParams ) throws IOException { if ( type = = ScriptType . INLINE & & contentType ! = null & & builder . contentType ( ) = = contentType ) { builder . rawField ( type . getParseField ( ) . getPreferredName ( ) , new BytesArray ( template ) ) ; } else { builder . field ( type . getParseField ( ) . getPreferredName ( ) , template ) ; } return builder ; } public static Template readTemplate ( StreamInput in ) throws IOException { Template template = new Template ( ) ; template . readFrom ( in ) ; return template ; } public static Script parse ( Map < String , Object > config , boolean removeMatchedEntries , ParseFieldMatcher parseFieldMatcher ) { return new TemplateParser ( Collections . emptyMap ( ) , DEFAULT_LANG ) . parse ( config , removeMatchedEntries , parseFieldMatcher ) ; } public static Template parse ( XContentParser parser , ParseFieldMatcher parseFieldMatcher ) throws IOException { return new TemplateParser ( Collections . emptyMap ( ) , DEFAULT_LANG ) . parse ( parser , parseFieldMatcher ) ; } @Deprecated public static Template parse ( XContentParser parser , Map < String , ScriptType > additionalTemplateFieldNames , ParseFieldMatcher parseFieldMatcher ) throws IOException { return new TemplateParser ( additionalTemplateFieldNames , DEFAULT_LANG ) . parse ( parser , parseFieldMatcher ) ; } @Deprecated public static Template parse ( XContentParser parser , Map < String , ScriptType > additionalTemplateFieldNames , String defaultLang , ParseFieldMatcher parseFieldMatcher ) throws IOException { return new TemplateParser ( additionalTemplateFieldNames , defaultLang ) . parse ( parser , parseFieldMatcher ) ; } @Override public int hashCode ( ) { final int prime = <int> ; int result = super . hashCode ( ) ; result = prime * result + ( ( contentType = = null ) ? <int> : contentType . hashCode ( ) ) ; return result ; } @Override public boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( ! super . equals ( obj ) ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; Template other = ( Template ) obj ; if ( contentType ! = other . contentType ) return false ; return true ; } private static class TemplateParser extends AbstractScriptParser < Template > { private XContentType contentType = null ; private final Map < String , ScriptType > additionalTemplateFieldNames ; private String defaultLang ; public TemplateParser ( Map < String , ScriptType > additionalTemplateFieldNames , String defaultLang ) { this . additionalTemplateFieldNames = additionalTemplateFieldNames ; this . defaultLang = defaultLang ; } @Override protected Template createSimpleScript ( XContentParser parser ) throws IOException { return new Template ( String . valueOf ( parser . objectText ( ) ) , ScriptType . INLINE , DEFAULT_LANG , contentType , null ) ; } @Override protected Template createScript ( String script , ScriptType type , String lang , Map < String , Object > params ) { return new Template ( script , type , lang , contentType , params ) ; } @Override protected String parseInlineScript ( XContentParser parser ) throws IOException { if ( parser . currentToken ( ) = = XContentParser . Token . START_OBJECT ) { contentType = parser . contentType ( ) ; XContentBuilder builder = XContentFactory . contentBuilder ( contentType ) ; return builder . copyCurrentStructure ( parser ) . bytes ( ) . toUtf8 ( ) ; } else { return parser . text ( ) ; } } @Override protected Map < String , ScriptType > getAdditionalScriptParameters ( ) { return additionalTemplateFieldNames ; } @Override protected String getDefaultScriptLang ( ) { return defaultLang ; } } } 

package org . elasticsearch . index . query . functionscore ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . index . query . QueryParseContext ; import org . elasticsearch . index . query . functionscore . gauss . GaussDecayFunctionBuilder ; import org . elasticsearch . index . query . functionscore . gauss . GaussDecayFunctionParser ; import org . elasticsearch . search . MultiValueMode ; import java . io . IOException ; public abstract class DecayFunctionParser < DFB extends DecayFunctionBuilder < DFB > > implements ScoreFunctionParser < DFB > { public static final ParseField MULTI_VALUE_MODE = new ParseField ( <str> ) ; @Override public DFB fromXContent ( QueryParseContext context , XContentParser parser ) throws IOException , ParsingException { String currentFieldName ; XContentParser . Token token ; MultiValueMode multiValueMode = DecayFunctionBuilder . DEFAULT_MULTI_VALUE_MODE ; String fieldName = null ; BytesReference functionBytes = null ; while ( ( token = parser . nextToken ( ) ) = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; token = parser . nextToken ( ) ; if ( token = = XContentParser . Token . START_OBJECT ) { fieldName = currentFieldName ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . copyCurrentStructure ( parser ) ; functionBytes = builder . bytes ( ) ; } else if ( context . parseFieldMatcher ( ) . match ( currentFieldName , MULTI_VALUE_MODE ) ) { multiValueMode = MultiValueMode . fromString ( parser . text ( ) ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } } if ( fieldName = = null | | functionBytes = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } DFB functionBuilder = getBuilderPrototype ( ) . createFunctionBuilder ( fieldName , functionBytes ) ; functionBuilder . setMultiValueMode ( multiValueMode ) ; return functionBuilder ; } } 

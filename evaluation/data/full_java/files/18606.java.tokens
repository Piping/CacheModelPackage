package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . Input . Keys ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; import com . badlogic . gdx . physics . box2d . joints . PrismaticJoint ; import com . badlogic . gdx . physics . box2d . joints . PrismaticJointDef ; public class Prismatic extends Box2DTest { PrismaticJoint m_joint ; @Override protected void createWorld ( World world ) { Body ground ; { BodyDef bd = new BodyDef ( ) ; ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } { PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <int> , <int> ) ; BodyDef bd = new BodyDef ( ) ; bd . type = BodyType . DynamicBody ; bd . position . set ( - <int> , <int> ) ; bd . angle = <float> * ( float ) Math . PI ; bd . allowSleep = false ; Body body = world . createBody ( bd ) ; body . createFixture ( shape , <float> ) ; PrismaticJointDef pjd = new PrismaticJointDef ( ) ; Vector2 axis = new Vector2 ( <int> , <int> ) ; axis . nor ( ) ; pjd . initialize ( ground , body , new Vector2 ( <int> , <int> ) , axis ) ; pjd . motorSpeed = <float> ; pjd . maxMotorForce = <float> ; pjd . enableMotor = true ; pjd . lowerTranslation = <int> ; pjd . upperTranslation = <float> ; pjd . enableLimit = true ; m_joint = ( PrismaticJoint ) world . createJoint ( pjd ) ; } } public boolean keyDown ( int keyCode ) { if ( keyCode = = Keys . L ) m_joint . enableLimit ( ! m_joint . isLimitEnabled ( ) ) ; if ( keyCode = = Keys . M ) m_joint . enableMotor ( ! m_joint . isMotorEnabled ( ) ) ; if ( keyCode = = Keys . S ) m_joint . setMotorSpeed ( - m_joint . getMotorSpeed ( ) ) ; return false ; } public void render ( ) { super . render ( ) ; } } 

package org . apache . cassandra . utils . concurrent ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . utils . ObjectSizes ; public class RefCountedTest { private static final class Tidier implements RefCounted . Tidy { boolean tidied ; public void tidy ( ) { tidied = true ; } public String name ( ) { return <str> ; } } @Test public void testLeak ( ) throws InterruptedException { Tidier tidier = new Tidier ( ) ; Ref < ? > obj = new Ref ( null , tidier ) ; obj . tryRef ( ) ; obj . release ( ) ; System . gc ( ) ; System . gc ( ) ; Thread . sleep ( <int> ) ; Assert . assertTrue ( tidier . tidied ) ; } @Test public void testSeriousLeak ( ) throws InterruptedException { Tidier tidier = new Tidier ( ) ; new Ref ( null , tidier ) ; System . gc ( ) ; System . gc ( ) ; System . gc ( ) ; System . gc ( ) ; Thread . sleep ( <int> ) ; Assert . assertTrue ( tidier . tidied ) ; } @Test public void testDoubleRelease ( ) throws InterruptedException { Tidier tidier = null ; try { tidier = new Tidier ( ) ; Ref < ? > obj = new Ref ( null , tidier ) ; obj . release ( ) ; obj . release ( ) ; Assert . assertTrue ( false ) ; } catch ( Exception e ) { } } @Test public void testMemoryLeak ( ) { Tidier tidier = new Tidier ( ) ; Ref < Object > ref = new Ref ( null , tidier ) ; long initialSize = ObjectSizes . measureDeep ( ref ) ; for ( int i = <int> ; i < <int> ; i + + ) ref . ref ( ) . release ( ) ; long finalSize = ObjectSizes . measureDeep ( ref ) ; if ( finalSize > initialSize * <int> ) throw new AssertionError ( ) ; ref . release ( ) ; } } 

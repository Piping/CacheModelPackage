package org . gradle . api . plugins ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . internal . plugins . DslObject ; import org . gradle . api . reporting . dependencies . HtmlDependencyReportTask ; import org . gradle . api . tasks . diagnostics . DependencyReportTask ; import org . gradle . api . tasks . diagnostics . PropertyReportTask ; import org . gradle . api . tasks . diagnostics . TaskReportTask ; import java . io . File ; import java . util . concurrent . Callable ; public class ProjectReportsPlugin implements Plugin < Project > { public static final String TASK_REPORT = <str> ; public static final String PROPERTY_REPORT = <str> ; public static final String DEPENDENCY_REPORT = <str> ; public static final String HTML_DEPENDENCY_REPORT = <str> ; public static final String PROJECT_REPORT = <str> ; public void apply ( Project project ) { project . getPluginManager ( ) . apply ( ReportingBasePlugin . class ) ; final ProjectReportsPluginConvention convention = new ProjectReportsPluginConvention ( project ) ; project . getConvention ( ) . getPlugins ( ) . put ( <str> , convention ) ; TaskReportTask taskReportTask = project . getTasks ( ) . create ( TASK_REPORT , TaskReportTask . class ) ; taskReportTask . setDescription ( <str> ) ; taskReportTask . conventionMapping ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return new File ( convention . getProjectReportDir ( ) , <str> ) ; } } ) ; taskReportTask . conventionMapping ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return convention . getProjects ( ) ; } } ) ; PropertyReportTask propertyReportTask = project . getTasks ( ) . create ( PROPERTY_REPORT , PropertyReportTask . class ) ; propertyReportTask . setDescription ( <str> ) ; propertyReportTask . conventionMapping ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return new File ( convention . getProjectReportDir ( ) , <str> ) ; } } ) ; propertyReportTask . conventionMapping ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return convention . getProjects ( ) ; } } ) ; DependencyReportTask dependencyReportTask = project . getTasks ( ) . create ( DEPENDENCY_REPORT , DependencyReportTask . class ) ; dependencyReportTask . setDescription ( <str> ) ; dependencyReportTask . conventionMapping ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return new File ( convention . getProjectReportDir ( ) , <str> ) ; } } ) ; dependencyReportTask . conventionMapping ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return convention . getProjects ( ) ; } } ) ; HtmlDependencyReportTask htmlDependencyReportTask = project . getTasks ( ) . create ( HTML_DEPENDENCY_REPORT , HtmlDependencyReportTask . class ) ; htmlDependencyReportTask . setDescription ( <str> ) ; new DslObject ( htmlDependencyReportTask . getReports ( ) . getHtml ( ) ) . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return new File ( convention . getProjectReportDir ( ) , <str> ) ; } } ) ; htmlDependencyReportTask . conventionMapping ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return convention . getProjects ( ) ; } } ) ; Task projectReportTask = project . getTasks ( ) . create ( PROJECT_REPORT ) ; projectReportTask . dependsOn ( TASK_REPORT , PROPERTY_REPORT , DEPENDENCY_REPORT , HTML_DEPENDENCY_REPORT ) ; projectReportTask . setDescription ( <str> ) ; projectReportTask . setGroup ( <str> ) ; } } 

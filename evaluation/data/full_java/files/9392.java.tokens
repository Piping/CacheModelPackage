package com . google . common . graph ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . base . Objects ; import com . google . common . collect . ImmutableSet ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @CheckReturnValue final class IncidentNodes < N > { private final N source ; private final N target ; private IncidentNodes ( N source , N target ) { this . source = checkNotNull ( source , <str> ) ; this . target = checkNotNull ( target , <str> ) ; } static < N > IncidentNodes < N > of ( N source , N target ) { return new IncidentNodes < N > ( source , target ) ; } N source ( ) { return source ; } N target ( ) { return target ; } ImmutableSet < N > asImmutableSet ( ) { return ImmutableSet . of ( source , target ) ; } @Override public int hashCode ( ) { return Objects . hashCode ( source , target ) ; } @Override public boolean equals ( @Nullable Object object ) { if ( object instanceof IncidentNodes < ? > ) { IncidentNodes < ? > that = ( IncidentNodes < ? > ) object ; return this . source . equals ( that . source ) & & this . target . equals ( that . target ) ; } return false ; } @Override public String toString ( ) { return String . format ( <str> , source , target ) ; } } 

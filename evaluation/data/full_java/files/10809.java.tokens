package org . gradle . internal ; import java . io . File ; import java . util . Map ; import java . util . Set ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; import static com . google . common . collect . ImmutableSet . of ; public class SystemProperties { private static final Set < String > STANDARD_PROPERTIES = of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; private static final Set < String > IMPORTANT_NON_STANDARD_PROPERTIES = of ( <str> ) ; private static final SystemProperties INSTANCE = new SystemProperties ( ) ; private final Lock lock = new ReentrantLock ( ) ; public static SystemProperties getInstance ( ) { return INSTANCE ; } @SuppressWarnings ( <str> ) public Map < String , String > asMap ( ) { return ( Map ) System . getProperties ( ) ; } public String getLineSeparator ( ) { return System . getProperty ( <str> ) ; } public String getJavaIoTmpDir ( ) { return System . getProperty ( <str> ) ; } public String getUserHome ( ) { return System . getProperty ( <str> ) ; } public String getUserName ( ) { return System . getProperty ( <str> ) ; } public String getJavaVersion ( ) { return System . getProperty ( <str> ) ; } public File getCurrentDir ( ) { return new File ( System . getProperty ( <str> ) ) ; } public File getJavaHomeDir ( ) { lock . lock ( ) ; File javaHomeDir ; try { javaHomeDir = new File ( System . getProperty ( <str> ) ) ; } finally { lock . unlock ( ) ; } return javaHomeDir ; } private void setJavaHomeDir ( File javaHomeDir ) { System . setProperty ( <str> , javaHomeDir . getAbsolutePath ( ) ) ; } public < T > T withJavaHome ( File javaHomeDir , Factory < T > factory ) { lock . lock ( ) ; File originalJavaHomeDir = getJavaHomeDir ( ) ; setJavaHomeDir ( javaHomeDir ) ; try { return factory . create ( ) ; } finally { setJavaHomeDir ( originalJavaHomeDir ) ; lock . unlock ( ) ; } } public Set < String > getStandardProperties ( ) { return STANDARD_PROPERTIES ; } public Set < String > getNonStandardImportantProperties ( ) { return IMPORTANT_NON_STANDARD_PROPERTIES ; } } 

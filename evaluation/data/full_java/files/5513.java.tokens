package org . elasticsearch . cluster ; import com . carrotsearch . hppc . cursors . ObjectCursor ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; public class ClusterChangedEvent { private final String source ; private final ClusterState previousState ; private final ClusterState state ; private final DiscoveryNodes . Delta nodesDelta ; public ClusterChangedEvent ( String source , ClusterState state , ClusterState previousState ) { this . source = source ; this . state = state ; this . previousState = previousState ; this . nodesDelta = state . nodes ( ) . delta ( previousState . nodes ( ) ) ; } public String source ( ) { return this . source ; } public ClusterState state ( ) { return this . state ; } public ClusterState previousState ( ) { return this . previousState ; } public boolean routingTableChanged ( ) { return state . routingTable ( ) ! = previousState . routingTable ( ) ; } public boolean indexRoutingTableChanged ( String index ) { if ( ! state . routingTable ( ) . hasIndex ( index ) & & ! previousState . routingTable ( ) . hasIndex ( index ) ) { return false ; } if ( state . routingTable ( ) . hasIndex ( index ) & & previousState . routingTable ( ) . hasIndex ( index ) ) { return state . routingTable ( ) . index ( index ) ! = previousState . routingTable ( ) . index ( index ) ; } return true ; } public List < String > indicesCreated ( ) { if ( previousState = = null ) { return Arrays . asList ( state . metaData ( ) . indices ( ) . keys ( ) . toArray ( String . class ) ) ; } if ( ! metaDataChanged ( ) ) { return Collections . emptyList ( ) ; } List < String > created = null ; for ( ObjectCursor < String > cursor : state . metaData ( ) . indices ( ) . keys ( ) ) { String index = cursor . value ; if ( ! previousState . metaData ( ) . hasIndex ( index ) ) { if ( created = = null ) { created = new ArrayList < > ( ) ; } created . add ( index ) ; } } return created = = null ? Collections . < String > emptyList ( ) : created ; } public List < String > indicesDeleted ( ) { if ( hasNewMaster ( ) | | previousState = = null ) { return Collections . emptyList ( ) ; } if ( ! metaDataChanged ( ) ) { return Collections . emptyList ( ) ; } List < String > deleted = null ; for ( ObjectCursor < String > cursor : previousState . metaData ( ) . indices ( ) . keys ( ) ) { String index = cursor . value ; if ( ! state . metaData ( ) . hasIndex ( index ) ) { if ( deleted = = null ) { deleted = new ArrayList < > ( ) ; } deleted . add ( index ) ; } } return deleted = = null ? Collections . < String > emptyList ( ) : deleted ; } public boolean metaDataChanged ( ) { return state . metaData ( ) ! = previousState . metaData ( ) ; } public boolean indexMetaDataChanged ( IndexMetaData current ) { MetaData previousMetaData = previousState . metaData ( ) ; if ( previousMetaData = = null ) { return true ; } IndexMetaData previousIndexMetaData = previousMetaData . index ( current . getIndex ( ) ) ; if ( previousIndexMetaData = = current ) { return false ; } return true ; } public boolean blocksChanged ( ) { return state . blocks ( ) ! = previousState . blocks ( ) ; } public boolean localNodeMaster ( ) { return state . nodes ( ) . localNodeMaster ( ) ; } public DiscoveryNodes . Delta nodesDelta ( ) { return this . nodesDelta ; } public boolean nodesRemoved ( ) { return nodesDelta . removed ( ) ; } public boolean nodesAdded ( ) { return nodesDelta . added ( ) ; } public boolean nodesChanged ( ) { return nodesRemoved ( ) | | nodesAdded ( ) ; } private boolean hasNewMaster ( ) { String oldMaster = previousState ( ) . getNodes ( ) . masterNodeId ( ) ; String newMaster = state ( ) . getNodes ( ) . masterNodeId ( ) ; if ( oldMaster = = null & & newMaster = = null ) { return false ; } if ( oldMaster = = null & & newMaster ! = null ) { return true ; } return oldMaster . equals ( newMaster ) = = false ; } } 

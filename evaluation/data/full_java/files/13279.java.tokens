package org . gradle . integtests . fixtures . executer ; import org . gradle . api . Action ; import org . gradle . execution . taskgraph . DefaultTaskExecutionPlan ; import org . gradle . internal . Factory ; import org . gradle . process . internal . ExecHandleBuilder ; import org . gradle . test . fixtures . file . TestDirectoryProvider ; import org . gradle . util . GradleVersion ; import java . util . ArrayList ; import java . util . List ; class ParallelForkingGradleExecuter extends ForkingGradleExecuter { public ParallelForkingGradleExecuter ( GradleDistribution distribution , TestDirectoryProvider testDirectoryProvider ) { super ( distribution , testDirectoryProvider ) ; } @Override protected List < String > getAllArgs ( ) { List < String > args = new ArrayList < String > ( ) ; args . addAll ( super . getAllArgs ( ) ) ; if ( getDistribution ( ) . getVersion ( ) . compareTo ( GradleVersion . version ( <str> ) ) < = <int> ) { args . add ( <str> ) ; } else { args . add ( <str> ) ; args . add ( <str> ) ; } args . add ( <str> + DefaultTaskExecutionPlan . INTRA_PROJECT_TOGGLE + <str> ) ; return args ; } @Override protected ForkingGradleHandle createGradleHandle ( Action < ExecutionResult > resultAssertion , String encoding , Factory < ExecHandleBuilder > execHandleFactory ) { return new ParallelForkingGradleHandle ( getStdinPipe ( ) , isUseDaemon ( ) , resultAssertion , encoding , execHandleFactory ) ; } } 

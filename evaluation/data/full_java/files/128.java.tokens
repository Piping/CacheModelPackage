package org . apache . cassandra . cql3 ; import java . nio . ByteBuffer ; import java . util . Collections ; import com . google . common . collect . Iterables ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . db . marshal . Int32Type ; import org . apache . cassandra . db . marshal . LongType ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . utils . ByteBufferUtil ; public class Attributes { public static final int MAX_TTL = <int> * <int> * <int> * <int> * <int> ; private final Term timestamp ; private final Term timeToLive ; public static Attributes none ( ) { return new Attributes ( null , null ) ; } private Attributes ( Term timestamp , Term timeToLive ) { this . timestamp = timestamp ; this . timeToLive = timeToLive ; } public Iterable < Function > getFunctions ( ) { if ( timestamp ! = null & & timeToLive ! = null ) return Iterables . concat ( timestamp . getFunctions ( ) , timeToLive . getFunctions ( ) ) ; else if ( timestamp ! = null ) return timestamp . getFunctions ( ) ; else if ( timeToLive ! = null ) return timeToLive . getFunctions ( ) ; else return Collections . emptySet ( ) ; } public boolean isTimestampSet ( ) { return timestamp ! = null ; } public boolean isTimeToLiveSet ( ) { return timeToLive ! = null ; } public long getTimestamp ( long now , QueryOptions options ) throws InvalidRequestException { if ( timestamp = = null ) return now ; ByteBuffer tval = timestamp . bindAndGet ( options ) ; if ( tval = = null ) throw new InvalidRequestException ( <str> ) ; if ( tval = = ByteBufferUtil . UNSET_BYTE_BUFFER ) return now ; try { LongType . instance . validate ( tval ) ; } catch ( MarshalException e ) { throw new InvalidRequestException ( <str> + tval ) ; } return LongType . instance . compose ( tval ) ; } public int getTimeToLive ( QueryOptions options ) throws InvalidRequestException { if ( timeToLive = = null ) return <int> ; ByteBuffer tval = timeToLive . bindAndGet ( options ) ; if ( tval = = null ) throw new InvalidRequestException ( <str> ) ; if ( tval = = ByteBufferUtil . UNSET_BYTE_BUFFER ) return <int> ; try { Int32Type . instance . validate ( tval ) ; } catch ( MarshalException e ) { throw new InvalidRequestException ( <str> + tval ) ; } int ttl = Int32Type . instance . compose ( tval ) ; if ( ttl < <int> ) throw new InvalidRequestException ( <str> + ttl ) ; if ( ttl > MAX_TTL ) throw new InvalidRequestException ( String . format ( <str> , ttl , MAX_TTL ) ) ; return ttl ; } public void collectMarkerSpecification ( VariableSpecifications boundNames ) { if ( timestamp ! = null ) timestamp . collectMarkerSpecification ( boundNames ) ; if ( timeToLive ! = null ) timeToLive . collectMarkerSpecification ( boundNames ) ; } public static class Raw { public Term . Raw timestamp ; public Term . Raw timeToLive ; public Attributes prepare ( String ksName , String cfName ) throws InvalidRequestException { Term ts = timestamp = = null ? null : timestamp . prepare ( ksName , timestampReceiver ( ksName , cfName ) ) ; Term ttl = timeToLive = = null ? null : timeToLive . prepare ( ksName , timeToLiveReceiver ( ksName , cfName ) ) ; return new Attributes ( ts , ttl ) ; } private ColumnSpecification timestampReceiver ( String ksName , String cfName ) { return new ColumnSpecification ( ksName , cfName , new ColumnIdentifier ( <str> , true ) , LongType . instance ) ; } private ColumnSpecification timeToLiveReceiver ( String ksName , String cfName ) { return new ColumnSpecification ( ksName , cfName , new ColumnIdentifier ( <str> , true ) , Int32Type . instance ) ; } } } 

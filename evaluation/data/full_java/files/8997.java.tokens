package org . elasticsearch . test . engine ; import org . apache . lucene . index . * ; import org . apache . lucene . util . Bits ; import org . apache . lucene . util . BytesRef ; import org . apache . lucene . util . automaton . CompiledAutomaton ; import java . io . IOException ; public class ThrowingLeafReaderWrapper extends FilterLeafReader { private final Thrower thrower ; public enum Flags { TermVectors , Terms , TermsEnum , Intersect , DocsEnum , DocsAndPositionsEnum , Fields , Norms , NumericDocValues , BinaryDocValues , SortedDocValues , SortedSetDocValues ; } public static interface Thrower { public void maybeThrow ( Flags flag ) throws IOException ; public boolean wrapTerms ( String field ) ; } public ThrowingLeafReaderWrapper ( LeafReader in , Thrower thrower ) { super ( in ) ; this . thrower = thrower ; } @Override public Fields fields ( ) throws IOException { Fields fields = super . fields ( ) ; thrower . maybeThrow ( Flags . Fields ) ; return fields = = null ? null : new ThrowingFields ( fields , thrower ) ; } @Override public Fields getTermVectors ( int docID ) throws IOException { Fields fields = super . getTermVectors ( docID ) ; thrower . maybeThrow ( Flags . TermVectors ) ; return fields = = null ? null : new ThrowingFields ( fields , thrower ) ; } public static class ThrowingFields extends FilterFields { private final Thrower thrower ; public ThrowingFields ( Fields in , Thrower thrower ) { super ( in ) ; this . thrower = thrower ; } @Override public Terms terms ( String field ) throws IOException { Terms terms = super . terms ( field ) ; if ( thrower . wrapTerms ( field ) ) { thrower . maybeThrow ( Flags . Terms ) ; return terms = = null ? null : new ThrowingTerms ( terms , thrower ) ; } return terms ; } } public static class ThrowingTerms extends FilterTerms { private final Thrower thrower ; public ThrowingTerms ( Terms in , Thrower thrower ) { super ( in ) ; this . thrower = thrower ; } @Override public TermsEnum intersect ( CompiledAutomaton automaton , BytesRef bytes ) throws IOException { TermsEnum termsEnum = in . intersect ( automaton , bytes ) ; thrower . maybeThrow ( Flags . Intersect ) ; return new ThrowingTermsEnum ( termsEnum , thrower ) ; } @Override public TermsEnum iterator ( ) throws IOException { TermsEnum termsEnum = super . iterator ( ) ; thrower . maybeThrow ( Flags . TermsEnum ) ; return new ThrowingTermsEnum ( termsEnum , thrower ) ; } } static class ThrowingTermsEnum extends FilterTermsEnum { private final Thrower thrower ; public ThrowingTermsEnum ( TermsEnum in , Thrower thrower ) { super ( in ) ; this . thrower = thrower ; } @Override public PostingsEnum postings ( PostingsEnum reuse , int flags ) throws IOException { if ( ( flags & PostingsEnum . POSITIONS ) ! = <int> ) { thrower . maybeThrow ( Flags . DocsAndPositionsEnum ) ; } else { thrower . maybeThrow ( Flags . DocsEnum ) ; } return super . postings ( reuse , flags ) ; } } @Override public NumericDocValues getNumericDocValues ( String field ) throws IOException { thrower . maybeThrow ( Flags . NumericDocValues ) ; return super . getNumericDocValues ( field ) ; } @Override public BinaryDocValues getBinaryDocValues ( String field ) throws IOException { thrower . maybeThrow ( Flags . BinaryDocValues ) ; return super . getBinaryDocValues ( field ) ; } @Override public SortedDocValues getSortedDocValues ( String field ) throws IOException { thrower . maybeThrow ( Flags . SortedDocValues ) ; return super . getSortedDocValues ( field ) ; } @Override public SortedSetDocValues getSortedSetDocValues ( String field ) throws IOException { thrower . maybeThrow ( Flags . SortedSetDocValues ) ; return super . getSortedSetDocValues ( field ) ; } @Override public NumericDocValues getNormValues ( String field ) throws IOException { thrower . maybeThrow ( Flags . Norms ) ; return super . getNormValues ( field ) ; } } 

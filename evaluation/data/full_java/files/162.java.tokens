package org . apache . cassandra . cql3 ; import java . nio . ByteBuffer ; import java . util . Collections ; import java . util . List ; import java . util . Set ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . exceptions . InvalidRequestException ; public interface Term { public void collectMarkerSpecification ( VariableSpecifications boundNames ) ; public Terminal bind ( QueryOptions options ) throws InvalidRequestException ; public ByteBuffer bindAndGet ( QueryOptions options ) throws InvalidRequestException ; public abstract boolean containsBindMarker ( ) ; Iterable < Function > getFunctions ( ) ; public abstract class Raw implements AssignmentTestable { public abstract Term prepare ( String keyspace , ColumnSpecification receiver ) throws InvalidRequestException ; public abstract String getText ( ) ; @Override public String toString ( ) { return getText ( ) ; } } public abstract class MultiColumnRaw extends Term . Raw { public abstract Term prepare ( String keyspace , List < ? extends ColumnSpecification > receiver ) throws InvalidRequestException ; } public abstract class Terminal implements Term { public void collectMarkerSpecification ( VariableSpecifications boundNames ) { } public Terminal bind ( QueryOptions options ) { return this ; } public Set < Function > getFunctions ( ) { return Collections . emptySet ( ) ; } public boolean containsBindMarker ( ) { return false ; } public abstract ByteBuffer get ( int protocolVersion ) throws InvalidRequestException ; public ByteBuffer bindAndGet ( QueryOptions options ) throws InvalidRequestException { return get ( options . getProtocolVersion ( ) ) ; } } public abstract class MultiItemTerminal extends Terminal { public abstract List < ByteBuffer > getElements ( ) ; } public abstract class NonTerminal implements Term { public ByteBuffer bindAndGet ( QueryOptions options ) throws InvalidRequestException { Terminal t = bind ( options ) ; return t = = null ? null : t . get ( options . getProtocolVersion ( ) ) ; } } } 

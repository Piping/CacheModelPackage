package org . gradle . model . internal . manage . schema . extract ; import net . jcip . annotations . ThreadSafe ; import org . gradle . api . Action ; import org . gradle . model . ModelMap ; import org . gradle . model . internal . manage . schema . ModelMapSchema ; import org . gradle . model . internal . manage . schema . ModelSchema ; import org . gradle . model . internal . type . ModelType ; import java . util . List ; @ThreadSafe public class ModelMapStrategy implements ModelSchemaExtractionStrategy { private static final ModelType < ModelMap < ? > > MODEL_MAP_MODEL_TYPE = new ModelType < ModelMap < ? > > ( ) { } ; public < T > void extract ( ModelSchemaExtractionContext < T > extractionContext ) { ModelType < T > type = extractionContext . getType ( ) ; if ( MODEL_MAP_MODEL_TYPE . isAssignableFrom ( type ) ) { if ( ! type . getRawClass ( ) . equals ( ModelMap . class ) ) { throw new InvalidManagedModelElementTypeException ( extractionContext , String . format ( <str> , ModelMap . class . getName ( ) ) ) ; } if ( type . isHasWildcardTypeVariables ( ) ) { throw new InvalidManagedModelElementTypeException ( extractionContext , String . format ( <str> , ModelMap . class . getName ( ) ) ) ; } List < ModelType < ? > > typeVariables = type . getTypeVariables ( ) ; if ( typeVariables . isEmpty ( ) ) { throw new InvalidManagedModelElementTypeException ( extractionContext , String . format ( <str> , ModelMap . class . getName ( ) ) ) ; } ModelType < ? > elementType = typeVariables . get ( <int> ) ; if ( ModelMap . class . equals ( elementType . getRawClass ( ) ) ) { throw new InvalidManagedModelElementTypeException ( extractionContext , String . format ( <str> , ModelMap . class . getName ( ) ) ) ; } extractionContext . found ( getModelSchema ( extractionContext , elementType ) ) ; } } private < T , E > ModelSchema < T > getModelSchema ( ModelSchemaExtractionContext < T > extractionContext , ModelType < E > elementType ) { final ModelMapSchema < T , E > schema = new ModelMapSchema < T , E > ( extractionContext . getType ( ) , elementType ) ; extractionContext . child ( elementType , <str> , new Action < ModelSchema < E > > ( ) { @Override public void execute ( ModelSchema < E > elementTypeSchema ) { schema . setElementTypeSchema ( elementTypeSchema ) ; } } ) ; return schema ; } } 

package org . gradle . api . plugins . buildcomparison . gradle ; import org . gradle . api . * ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . resource . local . PathNormalisingKeyFileStore ; import org . gradle . api . logging . Logger ; import org . gradle . api . plugins . buildcomparison . compare . internal . BuildComparisonResult ; import org . gradle . api . plugins . buildcomparison . gradle . internal . ComparableGradleBuildExecuter ; import org . gradle . api . plugins . buildcomparison . gradle . internal . DefaultGradleBuildInvocationSpec ; import org . gradle . api . plugins . buildcomparison . gradle . internal . GradleBuildComparison ; import org . gradle . api . plugins . buildcomparison . outcome . internal . archive . GeneratedArchiveBuildOutcome ; import org . gradle . api . plugins . buildcomparison . outcome . internal . archive . GeneratedArchiveBuildOutcomeComparator ; import org . gradle . api . plugins . buildcomparison . outcome . internal . archive . GeneratedArchiveBuildOutcomeComparisonResultHtmlRenderer ; import org . gradle . api . plugins . buildcomparison . outcome . internal . archive . GeneratedArchiveBuildOutcomeHtmlRenderer ; import org . gradle . api . plugins . buildcomparison . outcome . internal . unknown . UnknownBuildOutcome ; import org . gradle . api . plugins . buildcomparison . outcome . internal . unknown . UnknownBuildOutcomeComparator ; import org . gradle . api . plugins . buildcomparison . outcome . internal . unknown . UnknownBuildOutcomeComparisonResultHtmlRenderer ; import org . gradle . api . plugins . buildcomparison . outcome . internal . unknown . UnknownBuildOutcomeHtmlRenderer ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . OutputDirectory ; import org . gradle . api . tasks . TaskAction ; import org . gradle . api . tasks . VerificationTask ; import org . gradle . internal . resource . local . FileStore ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . logging . ConsoleRenderer ; import org . gradle . logging . ProgressLogger ; import org . gradle . logging . ProgressLoggerFactory ; import org . gradle . util . GradleVersion ; import javax . inject . Inject ; import java . io . File ; import java . text . SimpleDateFormat ; import java . util . * ; @Incubating public class CompareGradleBuilds extends DefaultTask implements VerificationTask { public static final List < String > DEFAULT_TASKS = Arrays . asList ( <str> , <str> ) ; private static final String TMP_FILESTORAGE_PREFIX = <str> ; private final GradleBuildInvocationSpec sourceBuild ; private final GradleBuildInvocationSpec targetBuild ; private boolean ignoreFailures ; private Object reportDir ; public CompareGradleBuilds ( ) { FileResolver fileResolver = getFileResolver ( ) ; Instantiator instantiator = getInstantiator ( ) ; sourceBuild = instantiator . newInstance ( DefaultGradleBuildInvocationSpec . class , fileResolver , getProject ( ) . getRootDir ( ) ) ; sourceBuild . setTasks ( DEFAULT_TASKS ) ; targetBuild = instantiator . newInstance ( DefaultGradleBuildInvocationSpec . class , fileResolver , getProject ( ) . getRootDir ( ) ) ; targetBuild . setTasks ( DEFAULT_TASKS ) ; getOutputs ( ) . upToDateWhen ( new Spec < Task > ( ) { public boolean isSatisfiedBy ( Task element ) { return false ; } } ) ; } @Inject protected FileResolver getFileResolver ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected ProgressLoggerFactory getProgressLoggerFactory ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected Instantiator getInstantiator ( ) { throw new UnsupportedOperationException ( ) ; } public GradleBuildInvocationSpec getSourceBuild ( ) { return sourceBuild ; } @SuppressWarnings ( <str> ) public void sourceBuild ( Action < GradleBuildInvocationSpec > config ) { config . execute ( getSourceBuild ( ) ) ; } public GradleBuildInvocationSpec getTargetBuild ( ) { return targetBuild ; } @SuppressWarnings ( <str> ) public void targetBuild ( Action < GradleBuildInvocationSpec > config ) { config . execute ( getTargetBuild ( ) ) ; } public boolean getIgnoreFailures ( ) { return ignoreFailures ; } public void setIgnoreFailures ( boolean ignoreFailures ) { this . ignoreFailures = ignoreFailures ; } @OutputDirectory public File getReportDir ( ) { return reportDir = = null ? null : getFileResolver ( ) . resolve ( reportDir ) ; } @SuppressWarnings ( <str> ) public void setReportDir ( Object reportDir ) { if ( reportDir = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . reportDir = reportDir ; } private File getReportFile ( ) { return new File ( getReportDir ( ) , GradleBuildComparison . HTML_REPORT_FILE_NAME ) ; } @SuppressWarnings ( <str> ) @TaskAction void compare ( ) { GradleBuildInvocationSpec sourceBuild = getSourceBuild ( ) ; GradleBuildInvocationSpec targetBuild = getTargetBuild ( ) ; if ( sourceBuild . equals ( targetBuild ) ) { getLogger ( ) . warn ( <str> , getName ( ) ) ; } ComparableGradleBuildExecuter sourceBuildExecuter = new ComparableGradleBuildExecuter ( sourceBuild ) ; ComparableGradleBuildExecuter targetBuildExecuter = new ComparableGradleBuildExecuter ( targetBuild ) ; Logger logger = getLogger ( ) ; ProgressLogger progressLogger = getProgressLoggerFactory ( ) . newOperation ( getClass ( ) ) ; progressLogger . setDescription ( <str> ) ; progressLogger . setShortDescription ( getName ( ) ) ; GradleBuildComparison comparison = new GradleBuildComparison ( sourceBuildExecuter , targetBuildExecuter , logger , progressLogger , getProject ( ) . getGradle ( ) ) ; comparison . registerType ( GeneratedArchiveBuildOutcome . class , new GeneratedArchiveBuildOutcomeComparator ( ) , new GeneratedArchiveBuildOutcomeComparisonResultHtmlRenderer ( ) , new GeneratedArchiveBuildOutcomeHtmlRenderer ( ) ) ; comparison . registerType ( UnknownBuildOutcome . class , new UnknownBuildOutcomeComparator ( ) , new UnknownBuildOutcomeComparisonResultHtmlRenderer ( ) , new UnknownBuildOutcomeHtmlRenderer ( ) ) ; File fileStoreTmpBase = getFileResolver ( ) . resolve ( String . format ( TMP_FILESTORAGE_PREFIX + <str> , getName ( ) , System . currentTimeMillis ( ) ) ) ; FileStore < String > fileStore = new PathNormalisingKeyFileStore ( fileStoreTmpBase ) ; Map < String , String > hostAttributes = new LinkedHashMap < String , String > ( <int> ) ; hostAttributes . put ( <str> , getProject ( ) . getRootDir ( ) . getAbsolutePath ( ) ) ; hostAttributes . put ( <str> , getPath ( ) ) ; hostAttributes . put ( <str> , GradleVersion . current ( ) . getVersion ( ) ) ; hostAttributes . put ( <str> , new SimpleDateFormat ( ) . format ( new Date ( ) ) ) ; BuildComparisonResult result = comparison . compare ( fileStore , getReportDir ( ) , hostAttributes ) ; communicateResult ( result ) ; } private void communicateResult ( BuildComparisonResult result ) { String reportUrl = new ConsoleRenderer ( ) . asClickableFileUrl ( getReportFile ( ) ) ; if ( result . isBuildsAreIdentical ( ) ) { getLogger ( ) . info ( <str> , reportUrl ) ; } else { String message = String . format ( <str> , reportUrl ) ; if ( getIgnoreFailures ( ) ) { getLogger ( ) . warn ( message ) ; } else { throw new GradleException ( message ) ; } } } } 

package com . google . common . io ; import junit . framework . TestCase ; import java . io . IOException ; import java . nio . CharBuffer ; public class CharSequenceReaderTest extends TestCase { public void testReadEmptyString ( ) throws IOException { assertReadsCorrectly ( <str> ) ; } public void testReadsStringsCorrectly ( ) throws IOException { assertReadsCorrectly ( <str> ) ; assertReadsCorrectly ( <str> ) ; assertReadsCorrectly ( <str> ) ; assertReadsCorrectly ( <str> + <str> + <str> + <str> + <str> ) ; } public void testMarkAndReset ( ) throws IOException { String string = <str> ; CharSequenceReader reader = new CharSequenceReader ( string ) ; assertTrue ( reader . markSupported ( ) ) ; assertEquals ( string , readFully ( reader ) ) ; assertFullyRead ( reader ) ; reader . reset ( ) ; assertEquals ( string , readFully ( reader ) ) ; assertFullyRead ( reader ) ; reader . reset ( ) ; assertEquals ( <int> , reader . skip ( <int> ) ) ; reader . mark ( Integer . MAX_VALUE ) ; assertEquals ( string . substring ( <int> ) , readFully ( reader ) ) ; assertFullyRead ( reader ) ; reader . reset ( ) ; assertEquals ( string . substring ( <int> ) , readFully ( reader ) ) ; assertFullyRead ( reader ) ; } public void testIllegalArguments ( ) throws IOException { CharSequenceReader reader = new CharSequenceReader ( <str> ) ; char [ ] buf = new char [ <int> ] ; try { reader . read ( buf , <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { reader . read ( buf , <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { reader . read ( buf , <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { reader . read ( buf , - <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { reader . read ( buf , <int> , - <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { reader . read ( buf , <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { reader . skip ( - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { reader . mark ( - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testMethodsThrowWhenClosed ( ) throws IOException { CharSequenceReader reader = new CharSequenceReader ( <str> ) ; reader . close ( ) ; try { reader . read ( ) ; fail ( ) ; } catch ( IOException expected ) { } try { reader . read ( new char [ <int> ] ) ; fail ( ) ; } catch ( IOException expected ) { } try { reader . read ( new char [ <int> ] , <int> , <int> ) ; fail ( ) ; } catch ( IOException expected ) { } try { reader . read ( CharBuffer . allocate ( <int> ) ) ; fail ( ) ; } catch ( IOException expected ) { } try { reader . skip ( <int> ) ; fail ( ) ; } catch ( IOException expected ) { } try { reader . ready ( ) ; fail ( ) ; } catch ( IOException expected ) { } try { reader . mark ( <int> ) ; fail ( ) ; } catch ( IOException expected ) { } try { reader . reset ( ) ; fail ( ) ; } catch ( IOException expected ) { } } private static void assertReadsCorrectly ( CharSequence charSequence ) throws IOException { String expected = charSequence . toString ( ) ; CharSequenceReader reader = new CharSequenceReader ( charSequence ) ; for ( int i = <int> ; i < expected . length ( ) ; i + + ) { assertEquals ( expected . charAt ( i ) , reader . read ( ) ) ; } assertFullyRead ( reader ) ; reader = new CharSequenceReader ( charSequence ) ; char [ ] buf = new char [ expected . length ( ) ] ; assertEquals ( expected . length ( ) = = <int> ? - <int> : expected . length ( ) , reader . read ( buf ) ) ; assertEquals ( expected , new String ( buf ) ) ; assertFullyRead ( reader ) ; reader = new CharSequenceReader ( charSequence ) ; buf = new char [ <int> ] ; StringBuilder builder = new StringBuilder ( ) ; int read ; while ( ( read = reader . read ( buf , <int> , buf . length ) ) ! = - <int> ) { builder . append ( buf , <int> , read ) ; } assertEquals ( expected , builder . toString ( ) ) ; assertFullyRead ( reader ) ; reader = new CharSequenceReader ( charSequence ) ; CharBuffer buf2 = CharBuffer . allocate ( expected . length ( ) ) ; assertEquals ( expected . length ( ) = = <int> ? - <int> : expected . length ( ) , reader . read ( buf2 ) ) ; buf2 . flip ( ) ; assertEquals ( expected , buf2 . toString ( ) ) ; assertFullyRead ( reader ) ; reader = new CharSequenceReader ( charSequence ) ; buf2 = CharBuffer . allocate ( <int> ) ; builder = new StringBuilder ( ) ; while ( reader . read ( buf2 ) ! = - <int> ) { buf2 . flip ( ) ; builder . append ( buf2 ) ; buf2 . clear ( ) ; } assertEquals ( expected , builder . toString ( ) ) ; assertFullyRead ( reader ) ; reader = new CharSequenceReader ( charSequence ) ; assertEquals ( expected . length ( ) , reader . skip ( Long . MAX_VALUE ) ) ; assertFullyRead ( reader ) ; if ( expected . length ( ) > <int> ) { reader = new CharSequenceReader ( charSequence ) ; assertEquals ( <int> , reader . skip ( <int> ) ) ; buf = new char [ expected . length ( ) - <int> ] ; assertEquals ( buf . length , reader . read ( buf , <int> , buf . length ) ) ; assertEquals ( expected . substring ( <int> ) , new String ( buf ) ) ; assertFullyRead ( reader ) ; } } private static void assertFullyRead ( CharSequenceReader reader ) throws IOException { assertEquals ( - <int> , reader . read ( ) ) ; assertEquals ( - <int> , reader . read ( new char [ <int> ] , <int> , <int> ) ) ; assertEquals ( - <int> , reader . read ( CharBuffer . allocate ( <int> ) ) ) ; assertEquals ( <int> , reader . skip ( <int> ) ) ; } private static String readFully ( CharSequenceReader reader ) throws IOException { StringBuilder builder = new StringBuilder ( ) ; int read ; while ( ( read = reader . read ( ) ) ! = - <int> ) { builder . append ( ( char ) read ) ; } return builder . toString ( ) ; } } 

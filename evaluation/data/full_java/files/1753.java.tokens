package org . apache . cassandra . stress . settings ; import java . util . Arrays ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import com . google . common . base . Function ; import org . apache . cassandra . stress . generate . DistributionFactory ; import org . apache . cassandra . stress . generate . RatioDistribution ; import org . apache . cassandra . stress . generate . RatioDistributionFactory ; public class OptionRatioDistribution extends Option { public static final Function < String , RatioDistributionFactory > BUILDER = new Function < String , RatioDistributionFactory > ( ) { public RatioDistributionFactory apply ( String s ) { return get ( s ) ; } } ; private static final Pattern FULL = Pattern . compile ( <str> , Pattern . CASE_INSENSITIVE ) ; final OptionDistribution delegate ; private double divisor ; final String defaultSpec ; public OptionRatioDistribution ( String prefix , String defaultSpec , String description ) { this ( prefix , defaultSpec , description , defaultSpec ! = null ) ; } public OptionRatioDistribution ( String prefix , String defaultSpec , String description , boolean required ) { delegate = new OptionDistribution ( prefix , null , description , required ) ; this . defaultSpec = defaultSpec ; } @Override public boolean accept ( String param ) { Matcher m = FULL . matcher ( param ) ; if ( ! m . matches ( ) | | ! delegate . accept ( m . group ( <int> ) ) ) return false ; divisor = OptionDistribution . parseLong ( m . group ( <int> ) ) ; return true ; } public static RatioDistributionFactory get ( String spec ) { OptionRatioDistribution opt = new OptionRatioDistribution ( <str> , <str> , <str> , true ) ; if ( ! opt . accept ( spec ) ) throw new IllegalArgumentException ( <str> + spec ) ; return opt . get ( ) ; } public RatioDistributionFactory get ( ) { if ( delegate . setByUser ( ) ) return new DelegateFactory ( delegate . get ( ) , divisor ) ; if ( defaultSpec = = null ) return null ; OptionRatioDistribution sub = new OptionRatioDistribution ( <str> , null , null , true ) ; if ( ! sub . accept ( defaultSpec ) ) throw new IllegalStateException ( <str> + defaultSpec ) ; return sub . get ( ) ; } @Override public boolean happy ( ) { return delegate . happy ( ) ; } public String longDisplay ( ) { return delegate . longDisplay ( ) ; } @Override public List < String > multiLineDisplay ( ) { return Arrays . asList ( GroupedOptions . formatMultiLine ( <str> , <str> ) , GroupedOptions . formatMultiLine ( <str> , <str> ) , GroupedOptions . formatMultiLine ( <str> , <str> ) , GroupedOptions . formatMultiLine ( <str> , <str> ) , GroupedOptions . formatMultiLine ( <str> , <str> ) , GroupedOptions . formatMultiLine ( <str> , <str> ) , <str> , <str> ) ; } boolean setByUser ( ) { return delegate . setByUser ( ) ; } boolean present ( ) { return delegate . present ( ) ; } @Override public String shortDisplay ( ) { return delegate . shortDisplay ( ) ; } private static final class DelegateFactory implements RatioDistributionFactory { final DistributionFactory delegate ; final double divisor ; private DelegateFactory ( DistributionFactory delegate , double divisor ) { this . delegate = delegate ; this . divisor = divisor ; } @Override public RatioDistribution get ( ) { return new RatioDistribution ( delegate . get ( ) , divisor ) ; } } @Override public int hashCode ( ) { return delegate . hashCode ( ) ; } @Override public boolean equals ( Object that ) { return super . equals ( that ) & & ( ( OptionRatioDistribution ) that ) . delegate . equals ( this . delegate ) ; } } 

package org . gradle . model . internal . manage . schema . extract ; import com . google . common . collect . ImmutableList ; import net . jcip . annotations . ThreadSafe ; import org . gradle . api . Action ; import org . gradle . model . internal . manage . schema . ModelSchema ; import org . gradle . model . internal . manage . schema . ScalarCollectionSchema ; import org . gradle . model . internal . type . ModelType ; import java . util . List ; import java . util . Set ; @ThreadSafe public class ScalarCollectionStrategy implements ModelSchemaExtractionStrategy { public final static List < ModelType < ? > > TYPES = ImmutableList . < ModelType < ? > > of ( ModelType . of ( List . class ) , ModelType . of ( Set . class ) ) ; public < T > void extract ( ModelSchemaExtractionContext < T > extractionContext ) { ModelType < T > type = extractionContext . getType ( ) ; Class < ? super T > rawClass = type . getRawClass ( ) ; ModelType < ? super T > rawCollectionType = ModelType . of ( rawClass ) ; List < ModelType < ? > > typeVariables = type . getTypeVariables ( ) ; if ( TYPES . contains ( rawCollectionType ) & & typeVariables . size ( ) > <int> ) { ModelType < ? > firstVariableType = typeVariables . get ( <int> ) ; if ( ScalarTypes . isScalarType ( firstVariableType ) ) { extractionContext . found ( createSchema ( extractionContext , type , firstVariableType ) ) ; } } } private < T , E > ScalarCollectionSchema < T , E > createSchema ( ModelSchemaExtractionContext < T > extractionContext , ModelType < T > type , ModelType < E > elementType ) { final ScalarCollectionSchema < T , E > schema = new ScalarCollectionSchema < T , E > ( type , elementType ) ; extractionContext . child ( elementType , <str> , new Action < ModelSchema < E > > ( ) { @Override public void execute ( ModelSchema < E > elementTypeSchema ) { schema . setElementTypeSchema ( elementTypeSchema ) ; } } ) ; return schema ; } } 

package org . eclipse . debug . internal . ui . views . breakpoints ; import java . util . HashMap ; import java . util . Vector ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . importexport . breakpoints . IImportExportConstants ; import org . eclipse . ui . IWorkingSet ; import org . eclipse . ui . IWorkingSetManager ; import org . eclipse . ui . PlatformUI ; public class BreakpointWorkingSetCache { HashMap < IMarker , Vector < Object > > fCache = null ; public BreakpointWorkingSetCache ( ) { fCache = new HashMap < IMarker , Vector < Object > > ( <int> ) ; } public void addEntry ( IMarker marker , Object entry ) { Vector < Object > list = fCache . get ( marker ) ; if ( list = = null ) { list = new Vector < Object > ( ) ; list . addElement ( entry ) ; fCache . put ( marker , list ) ; } else { if ( ! list . contains ( entry ) ) { list . addElement ( entry ) ; } } } public void removeMappedEntry ( IMarker marker , Object entry ) { Vector < Object > list = fCache . get ( marker ) ; if ( list ! = null ) { list . remove ( entry ) ; } } public void flushMarkerCache ( IMarker marker ) { IWorkingSetManager manager = PlatformUI . getWorkbench ( ) . getWorkingSetManager ( ) ; Vector < Object > list = fCache . get ( marker ) ; if ( list ! = null ) { String names = IImportExportConstants . DELIMITER ; String ids = IImportExportConstants . DELIMITER ; for ( int i = <int> ; i < list . size ( ) ; i + + ) { String name = ( String ) list . elementAt ( i ) ; IWorkingSet ws = manager . getWorkingSet ( name ) ; if ( ws ! = null ) { names + = name + IImportExportConstants . DELIMITER ; ids + = ws . getId ( ) + IImportExportConstants . DELIMITER ; } } try { marker . setAttribute ( IInternalDebugUIConstants . WORKING_SET_NAME , names ) ; marker . setAttribute ( IInternalDebugUIConstants . WORKING_SET_ID , ids ) ; } catch ( CoreException e ) { DebugPlugin . log ( e ) ; } } } } 

package org . gradle . logging . internal ; import org . fusesource . jansi . Ansi ; import org . gradle . logging . StyledTextOutput ; import java . util . HashMap ; import java . util . Map ; import static org . fusesource . jansi . Ansi . Attribute ; import static org . fusesource . jansi . Ansi . Attribute . * ; import static org . fusesource . jansi . Ansi . Color . DEFAULT ; import static org . gradle . logging . StyledTextOutput . Style . * ; import static org . gradle . logging . StyledTextOutput . Style . Error ; public class DefaultColorMap implements ColorMap { private static final String STATUSBAR = <str> ; private static final String BOLD = <str> ; private final Map < String , String > defaults = new HashMap < String , String > ( ) ; private final Map < String , Color > colors = new HashMap < String , Color > ( ) ; private final Color noDecoration = new Color ( ) { public void on ( Ansi ansi ) { } public void off ( Ansi ansi ) { } } ; public DefaultColorMap ( ) { addDefault ( Info , <str> ) ; addDefault ( Error , <str> ) ; addDefault ( Header , <str> ) ; addDefault ( Description , <str> ) ; addDefault ( ProgressStatus , <str> ) ; addDefault ( Identifier , <str> ) ; addDefault ( UserInput , <str> ) ; addDefault ( Success , <str> ) ; addDefault ( Failure , <str> ) ; addDefault ( STATUSBAR , <str> ) ; } private void addDefault ( StyledTextOutput . Style style , String color ) { addDefault ( style . name ( ) . toLowerCase ( ) , color ) ; } private void addDefault ( String style , String color ) { defaults . put ( style , color ) ; } public Color getStatusBarColor ( ) { return getColor ( STATUSBAR ) ; } public Color getColourFor ( StyledTextOutput . Style style ) { return getColor ( style . name ( ) . toLowerCase ( ) ) ; } private Color getColor ( String style ) { Color color = colors . get ( style ) ; if ( color = = null ) { color = createColor ( style ) ; colors . put ( style , color ) ; } return color ; } private Color createColor ( String style ) { String colorSpec = System . getProperty ( String . format ( <str> , style ) , defaults . get ( style ) ) ; if ( colorSpec ! = null ) { if ( colorSpec . equalsIgnoreCase ( BOLD ) ) { return new AttributeColor ( INTENSITY_BOLD , INTENSITY_BOLD_OFF ) ; } if ( colorSpec . equalsIgnoreCase ( <str> ) ) { return new AttributeColor ( NEGATIVE_ON , NEGATIVE_OFF ) ; } if ( colorSpec . equalsIgnoreCase ( <str> ) ) { return new AttributeColor ( ITALIC , ITALIC_OFF ) ; } Ansi . Color ansiColor = Ansi . Color . valueOf ( colorSpec . toUpperCase ( ) ) ; if ( ansiColor ! = DEFAULT ) { return new ForegroundColor ( ansiColor ) ; } } return noDecoration ; } private static class ForegroundColor implements Color { private final Ansi . Color ansiColor ; public ForegroundColor ( Ansi . Color ansiColor ) { this . ansiColor = ansiColor ; } public void on ( Ansi ansi ) { ansi . fg ( ansiColor ) ; } public void off ( Ansi ansi ) { ansi . fg ( DEFAULT ) ; } } private static class AttributeColor implements Color { private final Ansi . Attribute on ; private final Ansi . Attribute off ; public AttributeColor ( Attribute on , Attribute off ) { this . on = on ; this . off = off ; } public void on ( Ansi ansi ) { ansi . a ( on ) ; } public void off ( Ansi ansi ) { ansi . a ( off ) ; } } } 

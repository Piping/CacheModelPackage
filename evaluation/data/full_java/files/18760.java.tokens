package io . netty . buffer ; final class HeapByteBufUtil { static byte getByte ( byte [ ] memory , int index ) { return memory [ index ] ; } static short getShort ( byte [ ] memory , int index ) { return ( short ) ( memory [ index ] < < <int> | memory [ index + <int> ] & <hex> ) ; } static short getShortLE ( byte [ ] memory , int index ) { return ( short ) ( memory [ index ] & <hex> | memory [ index + <int> ] < < <int> ) ; } static int getUnsignedMedium ( byte [ ] memory , int index ) { return ( memory [ index ] & <hex> ) < < <int> | ( memory [ index + <int> ] & <hex> ) < < <int> | memory [ index + <int> ] & <hex> ; } static int getUnsignedMediumLE ( byte [ ] memory , int index ) { return memory [ index ] & <hex> | ( memory [ index + <int> ] & <hex> ) < < <int> | ( memory [ index + <int> ] & <hex> ) < < <int> ; } static int getInt ( byte [ ] memory , int index ) { return ( memory [ index ] & <hex> ) < < <int> | ( memory [ index + <int> ] & <hex> ) < < <int> | ( memory [ index + <int> ] & <hex> ) < < <int> | memory [ index + <int> ] & <hex> ; } static int getIntLE ( byte [ ] memory , int index ) { return memory [ index ] & <hex> | ( memory [ index + <int> ] & <hex> ) < < <int> | ( memory [ index + <int> ] & <hex> ) < < <int> | ( memory [ index + <int> ] & <hex> ) < < <int> ; } static long getLong ( byte [ ] memory , int index ) { return ( ( long ) memory [ index ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( long ) memory [ index + <int> ] & <hex> ; } static long getLongLE ( byte [ ] memory , int index ) { return ( long ) memory [ index ] & <hex> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> | ( ( long ) memory [ index + <int> ] & <hex> ) < < <int> ; } static void setByte ( byte [ ] memory , int index , int value ) { memory [ index ] = ( byte ) value ; } static void setShort ( byte [ ] memory , int index , int value ) { memory [ index ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) value ; } static void setShortLE ( byte [ ] memory , int index , int value ) { memory [ index ] = ( byte ) value ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; } static void setMedium ( byte [ ] memory , int index , int value ) { memory [ index ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) value ; } static void setMediumLE ( byte [ ] memory , int index , int value ) { memory [ index ] = ( byte ) value ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; } static void setInt ( byte [ ] memory , int index , int value ) { memory [ index ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) value ; } static void setIntLE ( byte [ ] memory , int index , int value ) { memory [ index ] = ( byte ) value ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; } static void setLong ( byte [ ] memory , int index , long value ) { memory [ index ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) value ; } static void setLongLE ( byte [ ] memory , int index , long value ) { memory [ index ] = ( byte ) value ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; memory [ index + <int> ] = ( byte ) ( value > > > <int> ) ; } private HeapByteBufUtil ( ) { } } 

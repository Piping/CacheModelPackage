package org . elasticsearch . indices . recovery ; import org . apache . lucene . store . IndexOutput ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . transport . LocalTransportAddress ; import org . elasticsearch . common . util . set . Sets ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . index . store . StoreFileMetaData ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . io . IOException ; import java . util . Set ; import java . util . regex . Pattern ; public class RecoveryStatusTests extends ESSingleNodeTestCase { public void testRenameTempFiles ( ) throws IOException { IndexService service = createIndex ( <str> ) ; IndexShard indexShard = service . getShardOrNull ( <int> ) ; DiscoveryNode node = new DiscoveryNode ( <str> , new LocalTransportAddress ( <str> ) , Version . CURRENT ) ; RecoveryStatus status = new RecoveryStatus ( indexShard , node , new RecoveryTarget . RecoveryListener ( ) { @Override public void onRecoveryDone ( RecoveryState state ) { } @Override public void onRecoveryFailure ( RecoveryState state , RecoveryFailedException e , boolean sendShardFailure ) { } } ) ; try ( IndexOutput indexOutput = status . openAndPutIndexOutput ( <str> , new StoreFileMetaData ( <str> , <int> ) , status . store ( ) ) ) { indexOutput . writeInt ( <int> ) ; IndexOutput openIndexOutput = status . getOpenIndexOutput ( <str> ) ; assertSame ( openIndexOutput , indexOutput ) ; openIndexOutput . writeInt ( <int> ) ; } try { status . openAndPutIndexOutput ( <str> , new StoreFileMetaData ( <str> , <int> ) , status . store ( ) ) ; fail ( <str> ) ; } catch ( IllegalStateException ex ) { assertEquals ( <str> , ex . getMessage ( ) ) ; } status . removeOpenIndexOutputs ( <str> ) ; Set < String > strings = Sets . newHashSet ( status . store ( ) . directory ( ) . listAll ( ) ) ; String expectedFile = null ; for ( String file : strings ) { if ( Pattern . compile ( <str> ) . matcher ( file ) . matches ( ) ) { expectedFile = file ; break ; } } assertNotNull ( expectedFile ) ; indexShard . close ( <str> , false ) ; status . renameAllTempFiles ( ) ; strings = Sets . newHashSet ( status . store ( ) . directory ( ) . listAll ( ) ) ; assertTrue ( strings . toString ( ) , strings . contains ( <str> ) ) ; assertFalse ( strings . toString ( ) , strings . contains ( expectedFile ) ) ; status . fail ( new RecoveryFailedException ( status . state ( ) , <str> , null ) , false ) ; } } 

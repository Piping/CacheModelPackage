package org . gradle . api . publication . maven . internal . action ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . sonatype . aether . transfer . AbstractTransferListener ; import org . sonatype . aether . transfer . TransferEvent ; import org . sonatype . aether . transfer . TransferEvent . RequestType ; class LoggingMavenTransferListener extends AbstractTransferListener { private static final Logger LOGGER = LoggerFactory . getLogger ( LoggingMavenTransferListener . class ) ; private static final int KILO = <int> ; public void transferFailed ( TransferEvent event ) { LOGGER . error ( event . getException ( ) . getMessage ( ) ) ; } public void transferInitiated ( TransferEvent event ) { String message = event . getRequestType ( ) = = RequestType . PUT ? <str> : <str> ; LOGGER . info ( message , event . getResource ( ) . getResourceName ( ) , <str> , event . getResource ( ) . getRepositoryUrl ( ) ) ; } public void transferStarted ( TransferEvent event ) { long contentLength = event . getResource ( ) . getContentLength ( ) ; if ( contentLength > <int> ) { LOGGER . info ( <str> , ( contentLength + KILO / <int> ) / KILO ) ; } } public void transferSucceeded ( TransferEvent event ) { long contentLength = event . getResource ( ) . getContentLength ( ) ; if ( contentLength > <int> & & event . getRequestType ( ) = = RequestType . PUT ) { LOGGER . info ( <str> , ( contentLength + KILO / <int> ) / KILO ) ; } } } 

package com . google . common . base ; import static com . google . common . base . CharMatcher . WHITESPACE ; import static com . google . common . collect . Lists . newArrayList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableSet ; import com . google . common . testing . ClassSanityTester ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . AssertionFailedError ; import junit . framework . TestCase ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . regex . Pattern ; @GwtCompatible ( emulated = true ) public class PredicatesTest extends TestCase { private static final Predicate < Integer > TRUE = Predicates . alwaysTrue ( ) ; private static final Predicate < Integer > FALSE = Predicates . alwaysFalse ( ) ; private static final Predicate < Integer > NEVER_REACHED = new Predicate < Integer > ( ) { @Override public boolean apply ( Integer i ) { throw new AssertionFailedError ( <str> ) ; } } ; static class IsOdd implements Predicate < Integer > , Serializable { private static final long serialVersionUID = <hex> ; @Override public boolean apply ( Integer i ) { return ( i . intValue ( ) & <int> ) = = <int> ; } @Override public int hashCode ( ) { return <hex> ; } @Override public boolean equals ( Object obj ) { return obj instanceof IsOdd ; } @Override public String toString ( ) { return <str> ; } } private static IsOdd isOdd ( ) { return new IsOdd ( ) ; } public void testAlwaysTrue_apply ( ) { assertEvalsToTrue ( Predicates . alwaysTrue ( ) ) ; } public void testAlwaysTrue_equality ( ) throws Exception { new EqualsTester ( ) . addEqualityGroup ( TRUE , Predicates . alwaysTrue ( ) ) . addEqualityGroup ( isOdd ( ) ) . addEqualityGroup ( Predicates . alwaysFalse ( ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testAlwaysTrue_serialization ( ) { checkSerialization ( Predicates . alwaysTrue ( ) ) ; } public void testAlwaysFalse_apply ( ) throws Exception { assertEvalsToFalse ( Predicates . alwaysFalse ( ) ) ; } public void testAlwaysFalse_equality ( ) throws Exception { new EqualsTester ( ) . addEqualityGroup ( FALSE , Predicates . alwaysFalse ( ) ) . addEqualityGroup ( isOdd ( ) ) . addEqualityGroup ( Predicates . alwaysTrue ( ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testAlwaysFalse_serialization ( ) { checkSerialization ( Predicates . alwaysFalse ( ) ) ; } public void testNot_apply ( ) { assertEvalsToTrue ( Predicates . not ( FALSE ) ) ; assertEvalsToFalse ( Predicates . not ( TRUE ) ) ; assertEvalsLikeOdd ( Predicates . not ( Predicates . not ( isOdd ( ) ) ) ) ; } public void testNot_equality ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . not ( isOdd ( ) ) , Predicates . not ( isOdd ( ) ) ) . addEqualityGroup ( Predicates . not ( TRUE ) ) . addEqualityGroup ( isOdd ( ) ) . testEquals ( ) ; } public void testNot_equalityForNotOfKnownValues ( ) { new EqualsTester ( ) . addEqualityGroup ( TRUE , Predicates . alwaysTrue ( ) ) . addEqualityGroup ( FALSE ) . addEqualityGroup ( Predicates . not ( TRUE ) ) . testEquals ( ) ; new EqualsTester ( ) . addEqualityGroup ( FALSE , Predicates . alwaysFalse ( ) ) . addEqualityGroup ( TRUE ) . addEqualityGroup ( Predicates . not ( FALSE ) ) . testEquals ( ) ; new EqualsTester ( ) . addEqualityGroup ( Predicates . isNull ( ) , Predicates . isNull ( ) ) . addEqualityGroup ( Predicates . notNull ( ) ) . addEqualityGroup ( Predicates . not ( Predicates . isNull ( ) ) ) . testEquals ( ) ; new EqualsTester ( ) . addEqualityGroup ( Predicates . notNull ( ) , Predicates . notNull ( ) ) . addEqualityGroup ( Predicates . isNull ( ) ) . addEqualityGroup ( Predicates . not ( Predicates . notNull ( ) ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testNot_serialization ( ) { checkSerialization ( Predicates . not ( isOdd ( ) ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_applyNoArgs ( ) { assertEvalsToTrue ( Predicates . and ( ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_equalityNoArgs ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . and ( ) , Predicates . and ( ) ) . addEqualityGroup ( Predicates . and ( FALSE ) ) . addEqualityGroup ( Predicates . or ( ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) @SuppressWarnings ( <str> ) public void testAnd_serializationNoArgs ( ) { checkSerialization ( Predicates . and ( ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_applyOneArg ( ) { assertEvalsLikeOdd ( Predicates . and ( isOdd ( ) ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_equalityOneArg ( ) { Object [ ] notEqualObjects = { Predicates . and ( NEVER_REACHED , FALSE ) } ; new EqualsTester ( ) . addEqualityGroup ( Predicates . and ( NEVER_REACHED ) , Predicates . and ( NEVER_REACHED ) ) . addEqualityGroup ( notEqualObjects ) . addEqualityGroup ( Predicates . and ( isOdd ( ) ) ) . addEqualityGroup ( Predicates . and ( ) ) . addEqualityGroup ( Predicates . or ( NEVER_REACHED ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) @SuppressWarnings ( <str> ) public void testAnd_serializationOneArg ( ) { checkSerialization ( Predicates . and ( isOdd ( ) ) ) ; } public void testAnd_applyBinary ( ) { assertEvalsLikeOdd ( Predicates . and ( isOdd ( ) , TRUE ) ) ; assertEvalsLikeOdd ( Predicates . and ( TRUE , isOdd ( ) ) ) ; assertEvalsToFalse ( Predicates . and ( FALSE , NEVER_REACHED ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_equalityBinary ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . and ( TRUE , NEVER_REACHED ) , Predicates . and ( TRUE , NEVER_REACHED ) ) . addEqualityGroup ( Predicates . and ( NEVER_REACHED , TRUE ) ) . addEqualityGroup ( Predicates . and ( TRUE ) ) . addEqualityGroup ( Predicates . or ( TRUE , NEVER_REACHED ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testAnd_serializationBinary ( ) { checkSerialization ( Predicates . and ( TRUE , isOdd ( ) ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_applyTernary ( ) { assertEvalsLikeOdd ( Predicates . and ( isOdd ( ) , TRUE , TRUE ) ) ; assertEvalsLikeOdd ( Predicates . and ( TRUE , isOdd ( ) , TRUE ) ) ; assertEvalsLikeOdd ( Predicates . and ( TRUE , TRUE , isOdd ( ) ) ) ; assertEvalsToFalse ( Predicates . and ( TRUE , FALSE , NEVER_REACHED ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_equalityTernary ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . and ( TRUE , isOdd ( ) , NEVER_REACHED ) , Predicates . and ( TRUE , isOdd ( ) , NEVER_REACHED ) ) . addEqualityGroup ( Predicates . and ( isOdd ( ) , NEVER_REACHED , TRUE ) ) . addEqualityGroup ( Predicates . and ( TRUE ) ) . addEqualityGroup ( Predicates . or ( TRUE , isOdd ( ) , NEVER_REACHED ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) @SuppressWarnings ( <str> ) public void testAnd_serializationTernary ( ) { checkSerialization ( Predicates . and ( TRUE , isOdd ( ) , FALSE ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_applyIterable ( ) { Collection < Predicate < Integer > > empty = Arrays . asList ( ) ; assertEvalsToTrue ( Predicates . and ( empty ) ) ; assertEvalsLikeOdd ( Predicates . and ( Arrays . asList ( isOdd ( ) ) ) ) ; assertEvalsLikeOdd ( Predicates . and ( Arrays . asList ( TRUE , isOdd ( ) ) ) ) ; assertEvalsToFalse ( Predicates . and ( Arrays . asList ( FALSE , NEVER_REACHED ) ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_equalityIterable ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . and ( Arrays . asList ( TRUE , NEVER_REACHED ) ) , Predicates . and ( Arrays . asList ( TRUE , NEVER_REACHED ) ) , Predicates . and ( TRUE , NEVER_REACHED ) ) . addEqualityGroup ( Predicates . and ( FALSE , NEVER_REACHED ) ) . addEqualityGroup ( Predicates . or ( TRUE , NEVER_REACHED ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) @SuppressWarnings ( <str> ) public void testAnd_serializationIterable ( ) { checkSerialization ( Predicates . and ( Arrays . asList ( TRUE , FALSE ) ) ) ; } @SuppressWarnings ( <str> ) public void testAnd_arrayDefensivelyCopied ( ) { Predicate [ ] array = { Predicates . alwaysFalse ( ) } ; Predicate < Object > predicate = Predicates . and ( array ) ; assertFalse ( predicate . apply ( <int> ) ) ; array [ <int> ] = Predicates . alwaysTrue ( ) ; assertFalse ( predicate . apply ( <int> ) ) ; } public void testAnd_listDefensivelyCopied ( ) { List < Predicate < Object > > list = newArrayList ( ) ; Predicate < Object > predicate = Predicates . and ( list ) ; assertTrue ( predicate . apply ( <int> ) ) ; list . add ( Predicates . alwaysFalse ( ) ) ; assertTrue ( predicate . apply ( <int> ) ) ; } public void testAnd_iterableDefensivelyCopied ( ) { final List < Predicate < Object > > list = newArrayList ( ) ; Iterable < Predicate < Object > > iterable = new Iterable < Predicate < Object > > ( ) { @Override public Iterator < Predicate < Object > > iterator ( ) { return list . iterator ( ) ; } } ; Predicate < Object > predicate = Predicates . and ( iterable ) ; assertTrue ( predicate . apply ( <int> ) ) ; list . add ( Predicates . alwaysFalse ( ) ) ; assertTrue ( predicate . apply ( <int> ) ) ; } @SuppressWarnings ( <str> ) public void testOr_applyNoArgs ( ) { assertEvalsToFalse ( Predicates . or ( ) ) ; } @SuppressWarnings ( <str> ) public void testOr_equalityNoArgs ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . or ( ) , Predicates . or ( ) ) . addEqualityGroup ( Predicates . or ( TRUE ) ) . addEqualityGroup ( Predicates . and ( ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) @SuppressWarnings ( <str> ) public void testOr_serializationNoArgs ( ) { checkSerialization ( Predicates . or ( ) ) ; } @SuppressWarnings ( <str> ) public void testOr_applyOneArg ( ) { assertEvalsToTrue ( Predicates . or ( TRUE ) ) ; assertEvalsToFalse ( Predicates . or ( FALSE ) ) ; } @SuppressWarnings ( <str> ) public void testOr_equalityOneArg ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . or ( NEVER_REACHED ) , Predicates . or ( NEVER_REACHED ) ) . addEqualityGroup ( Predicates . or ( NEVER_REACHED , TRUE ) ) . addEqualityGroup ( Predicates . or ( TRUE ) ) . addEqualityGroup ( Predicates . or ( ) ) . addEqualityGroup ( Predicates . and ( NEVER_REACHED ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) @SuppressWarnings ( <str> ) public void testOr_serializationOneArg ( ) { checkSerialization ( Predicates . or ( isOdd ( ) ) ) ; } public void testOr_applyBinary ( ) { Predicate < Integer > falseOrFalse = Predicates . or ( FALSE , FALSE ) ; Predicate < Integer > falseOrTrue = Predicates . or ( FALSE , TRUE ) ; Predicate < Integer > trueOrAnything = Predicates . or ( TRUE , NEVER_REACHED ) ; assertEvalsToFalse ( falseOrFalse ) ; assertEvalsToTrue ( falseOrTrue ) ; assertEvalsToTrue ( trueOrAnything ) ; } @SuppressWarnings ( <str> ) public void testOr_equalityBinary ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . or ( FALSE , NEVER_REACHED ) , Predicates . or ( FALSE , NEVER_REACHED ) ) . addEqualityGroup ( Predicates . or ( NEVER_REACHED , FALSE ) ) . addEqualityGroup ( Predicates . or ( TRUE ) ) . addEqualityGroup ( Predicates . and ( FALSE , NEVER_REACHED ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testOr_serializationBinary ( ) { checkSerialization ( Predicates . or ( isOdd ( ) , TRUE ) ) ; } @SuppressWarnings ( <str> ) public void testOr_applyTernary ( ) { assertEvalsLikeOdd ( Predicates . or ( isOdd ( ) , FALSE , FALSE ) ) ; assertEvalsLikeOdd ( Predicates . or ( FALSE , isOdd ( ) , FALSE ) ) ; assertEvalsLikeOdd ( Predicates . or ( FALSE , FALSE , isOdd ( ) ) ) ; assertEvalsToTrue ( Predicates . or ( FALSE , TRUE , NEVER_REACHED ) ) ; } @SuppressWarnings ( <str> ) public void testOr_equalityTernary ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . or ( FALSE , NEVER_REACHED , TRUE ) , Predicates . or ( FALSE , NEVER_REACHED , TRUE ) ) . addEqualityGroup ( Predicates . or ( TRUE , NEVER_REACHED , FALSE ) ) . addEqualityGroup ( Predicates . or ( TRUE ) ) . addEqualityGroup ( Predicates . and ( FALSE , NEVER_REACHED , TRUE ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) @SuppressWarnings ( <str> ) public void testOr_serializationTernary ( ) { checkSerialization ( Predicates . or ( FALSE , isOdd ( ) , TRUE ) ) ; } @SuppressWarnings ( <str> ) public void testOr_applyIterable ( ) { Predicate < Integer > vacuouslyFalse = Predicates . or ( Collections . < Predicate < Integer > > emptyList ( ) ) ; Predicate < Integer > troo = Predicates . or ( Collections . singletonList ( TRUE ) ) ; Predicate < Integer > trueAndFalse = Predicates . or ( Arrays . asList ( TRUE , FALSE ) ) ; assertEvalsToFalse ( vacuouslyFalse ) ; assertEvalsToTrue ( troo ) ; assertEvalsToTrue ( trueAndFalse ) ; } @SuppressWarnings ( <str> ) public void testOr_equalityIterable ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . or ( Arrays . asList ( FALSE , NEVER_REACHED ) ) , Predicates . or ( Arrays . asList ( FALSE , NEVER_REACHED ) ) , Predicates . or ( FALSE , NEVER_REACHED ) ) . addEqualityGroup ( Predicates . or ( TRUE , NEVER_REACHED ) ) . addEqualityGroup ( Predicates . and ( FALSE , NEVER_REACHED ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) @SuppressWarnings ( <str> ) public void testOr_serializationIterable ( ) { Predicate < Integer > pre = Predicates . or ( Arrays . asList ( TRUE , FALSE ) ) ; Predicate < Integer > post = SerializableTester . reserializeAndAssert ( pre ) ; assertEquals ( pre . apply ( <int> ) , post . apply ( <int> ) ) ; } @SuppressWarnings ( <str> ) public void testOr_arrayDefensivelyCopied ( ) { Predicate [ ] array = { Predicates . alwaysFalse ( ) } ; Predicate < Object > predicate = Predicates . or ( array ) ; assertFalse ( predicate . apply ( <int> ) ) ; array [ <int> ] = Predicates . alwaysTrue ( ) ; assertFalse ( predicate . apply ( <int> ) ) ; } public void testOr_listDefensivelyCopied ( ) { List < Predicate < Object > > list = newArrayList ( ) ; Predicate < Object > predicate = Predicates . or ( list ) ; assertFalse ( predicate . apply ( <int> ) ) ; list . add ( Predicates . alwaysTrue ( ) ) ; assertFalse ( predicate . apply ( <int> ) ) ; } public void testOr_iterableDefensivelyCopied ( ) { final List < Predicate < Object > > list = newArrayList ( ) ; Iterable < Predicate < Object > > iterable = new Iterable < Predicate < Object > > ( ) { @Override public Iterator < Predicate < Object > > iterator ( ) { return list . iterator ( ) ; } } ; Predicate < Object > predicate = Predicates . or ( iterable ) ; assertFalse ( predicate . apply ( <int> ) ) ; list . add ( Predicates . alwaysTrue ( ) ) ; assertFalse ( predicate . apply ( <int> ) ) ; } public void testIsEqualTo_apply ( ) { Predicate < Integer > isOne = Predicates . equalTo ( <int> ) ; assertTrue ( isOne . apply ( <int> ) ) ; assertFalse ( isOne . apply ( <int> ) ) ; assertFalse ( isOne . apply ( null ) ) ; } public void testIsEqualTo_equality ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . equalTo ( <int> ) , Predicates . equalTo ( <int> ) ) . addEqualityGroup ( Predicates . equalTo ( <int> ) ) . addEqualityGroup ( Predicates . equalTo ( null ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testIsEqualTo_serialization ( ) { checkSerialization ( Predicates . equalTo ( <int> ) ) ; } public void testIsEqualToNull_apply ( ) { Predicate < Integer > isNull = Predicates . equalTo ( null ) ; assertTrue ( isNull . apply ( null ) ) ; assertFalse ( isNull . apply ( <int> ) ) ; } public void testIsEqualToNull_equality ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . equalTo ( null ) , Predicates . equalTo ( null ) ) . addEqualityGroup ( Predicates . equalTo ( <int> ) ) . addEqualityGroup ( Predicates . equalTo ( <str> ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testIsEqualToNull_serialization ( ) { checkSerialization ( Predicates . equalTo ( null ) ) ; } @GwtIncompatible ( <str> ) public void testIsInstanceOf_apply ( ) { Predicate < Object > isInteger = Predicates . instanceOf ( Integer . class ) ; assertTrue ( isInteger . apply ( <int> ) ) ; assertFalse ( isInteger . apply ( <float> ) ) ; assertFalse ( isInteger . apply ( <str> ) ) ; assertFalse ( isInteger . apply ( null ) ) ; } @GwtIncompatible ( <str> ) public void testIsInstanceOf_subclass ( ) { Predicate < Object > isNumber = Predicates . instanceOf ( Number . class ) ; assertTrue ( isNumber . apply ( <int> ) ) ; assertTrue ( isNumber . apply ( <float> ) ) ; assertFalse ( isNumber . apply ( <str> ) ) ; assertFalse ( isNumber . apply ( null ) ) ; } @GwtIncompatible ( <str> ) public void testIsInstanceOf_interface ( ) { Predicate < Object > isComparable = Predicates . instanceOf ( Comparable . class ) ; assertTrue ( isComparable . apply ( <int> ) ) ; assertTrue ( isComparable . apply ( <float> ) ) ; assertTrue ( isComparable . apply ( <str> ) ) ; assertFalse ( isComparable . apply ( null ) ) ; } @GwtIncompatible ( <str> ) public void testIsInstanceOf_equality ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . instanceOf ( Integer . class ) , Predicates . instanceOf ( Integer . class ) ) . addEqualityGroup ( Predicates . instanceOf ( Number . class ) ) . addEqualityGroup ( Predicates . instanceOf ( Float . class ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testIsInstanceOf_serialization ( ) { checkSerialization ( Predicates . instanceOf ( Integer . class ) ) ; } @GwtIncompatible ( <str> ) public void testIsAssignableFrom_apply ( ) { Predicate < Class < ? > > isInteger = Predicates . assignableFrom ( Integer . class ) ; assertTrue ( isInteger . apply ( Integer . class ) ) ; assertFalse ( isInteger . apply ( Float . class ) ) ; try { isInteger . apply ( null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } @GwtIncompatible ( <str> ) public void testIsAssignableFrom_subclass ( ) { Predicate < Class < ? > > isNumber = Predicates . assignableFrom ( Number . class ) ; assertTrue ( isNumber . apply ( Integer . class ) ) ; assertTrue ( isNumber . apply ( Float . class ) ) ; } @GwtIncompatible ( <str> ) public void testIsAssignableFrom_interface ( ) { Predicate < Class < ? > > isComparable = Predicates . assignableFrom ( Comparable . class ) ; assertTrue ( isComparable . apply ( Integer . class ) ) ; assertTrue ( isComparable . apply ( Float . class ) ) ; } @GwtIncompatible ( <str> ) public void testIsAssignableFrom_equality ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . assignableFrom ( Integer . class ) , Predicates . assignableFrom ( Integer . class ) ) . addEqualityGroup ( Predicates . assignableFrom ( Number . class ) ) . addEqualityGroup ( Predicates . assignableFrom ( Float . class ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testIsAssignableFrom_serialization ( ) { Predicate < Class < ? > > predicate = Predicates . assignableFrom ( Integer . class ) ; Predicate < Class < ? > > reserialized = SerializableTester . reserializeAndAssert ( predicate ) ; assertEvalsLike ( predicate , reserialized , Integer . class ) ; assertEvalsLike ( predicate , reserialized , Float . class ) ; assertEvalsLike ( predicate , reserialized , null ) ; } public void testIsNull_apply ( ) { Predicate < Integer > isNull = Predicates . isNull ( ) ; assertTrue ( isNull . apply ( null ) ) ; assertFalse ( isNull . apply ( <int> ) ) ; } public void testIsNull_equality ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . isNull ( ) , Predicates . isNull ( ) ) . addEqualityGroup ( Predicates . notNull ( ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testIsNull_serialization ( ) { Predicate < String > pre = Predicates . isNull ( ) ; Predicate < String > post = SerializableTester . reserializeAndAssert ( pre ) ; assertEquals ( pre . apply ( <str> ) , post . apply ( <str> ) ) ; assertEquals ( pre . apply ( null ) , post . apply ( null ) ) ; } public void testNotNull_apply ( ) { Predicate < Integer > notNull = Predicates . notNull ( ) ; assertFalse ( notNull . apply ( null ) ) ; assertTrue ( notNull . apply ( <int> ) ) ; } public void testNotNull_equality ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . notNull ( ) , Predicates . notNull ( ) ) . addEqualityGroup ( Predicates . isNull ( ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testNotNull_serialization ( ) { checkSerialization ( Predicates . notNull ( ) ) ; } public void testIn_apply ( ) { Collection < Integer > nums = Arrays . asList ( <int> , <int> ) ; Predicate < Integer > isOneOrFive = Predicates . in ( nums ) ; assertTrue ( isOneOrFive . apply ( <int> ) ) ; assertTrue ( isOneOrFive . apply ( <int> ) ) ; assertFalse ( isOneOrFive . apply ( <int> ) ) ; assertFalse ( isOneOrFive . apply ( null ) ) ; } public void testIn_equality ( ) { Collection < Integer > nums = ImmutableSet . of ( <int> , <int> ) ; Collection < Integer > sameOrder = ImmutableSet . of ( <int> , <int> ) ; Collection < Integer > differentOrder = ImmutableSet . of ( <int> , <int> ) ; Collection < Integer > differentNums = ImmutableSet . of ( <int> , <int> , <int> ) ; new EqualsTester ( ) . addEqualityGroup ( Predicates . in ( nums ) , Predicates . in ( nums ) , Predicates . in ( sameOrder ) , Predicates . in ( differentOrder ) ) . addEqualityGroup ( Predicates . in ( differentNums ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testIn_serialization ( ) { checkSerialization ( Predicates . in ( Arrays . asList ( <int> , <int> , <int> , null ) ) ) ; } public void testIn_handlesNullPointerException ( ) { class CollectionThatThrowsNPE < T > extends ArrayList < T > { private static final long serialVersionUID = <int> ; @Override public boolean contains ( Object element ) { Preconditions . checkNotNull ( element ) ; return super . contains ( element ) ; } } Collection < Integer > nums = new CollectionThatThrowsNPE < Integer > ( ) ; Predicate < Integer > isFalse = Predicates . in ( nums ) ; assertFalse ( isFalse . apply ( null ) ) ; } public void testIn_handlesClassCastException ( ) { class CollectionThatThrowsCCE < T > extends ArrayList < T > { private static final long serialVersionUID = <int> ; @Override public boolean contains ( Object element ) { throw new ClassCastException ( <str> ) ; } } Collection < Integer > nums = new CollectionThatThrowsCCE < Integer > ( ) ; nums . add ( <int> ) ; Predicate < Integer > isThree = Predicates . in ( nums ) ; assertFalse ( isThree . apply ( <int> ) ) ; } @SuppressWarnings ( <str> ) public void testIn_compilesWithExplicitSupertype ( ) { Collection < Number > nums = ImmutableSet . of ( ) ; Predicate < Number > p1 = Predicates . in ( nums ) ; Predicate < Object > p2 = Predicates . < Object > in ( nums ) ; } @GwtIncompatible ( <str> ) public void testNullPointerExceptions ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( Predicates . class ) ; } @SuppressWarnings ( <str> ) @GwtIncompatible ( <str> ) public void testCascadingSerialization ( ) throws Exception { Predicate < ? super Integer > nasty = Predicates . not ( Predicates . and ( Predicates . or ( Predicates . equalTo ( ( Object ) <int> ) , Predicates . equalTo ( null ) , Predicates . alwaysFalse ( ) , Predicates . alwaysTrue ( ) , Predicates . isNull ( ) , Predicates . notNull ( ) , Predicates . in ( Arrays . asList ( <int> ) ) ) ) ) ; assertEvalsToFalse ( nasty ) ; Predicate < ? super Integer > stillNasty = SerializableTester . reserializeAndAssert ( nasty ) ; assertEvalsToFalse ( stillNasty ) ; } private enum TrimStringFunction implements Function < String , String > { INSTANCE ; @Override public String apply ( String string ) { return WHITESPACE . trimFrom ( string ) ; } } public void testCompose ( ) { Function < String , String > trim = TrimStringFunction . INSTANCE ; Predicate < String > equalsFoo = Predicates . equalTo ( <str> ) ; Predicate < String > equalsBar = Predicates . equalTo ( <str> ) ; Predicate < String > trimEqualsFoo = Predicates . compose ( equalsFoo , trim ) ; Function < String , String > identity = Functions . identity ( ) ; assertTrue ( trimEqualsFoo . apply ( <str> ) ) ; assertTrue ( trimEqualsFoo . apply ( <str> ) ) ; assertFalse ( trimEqualsFoo . apply ( <str> ) ) ; new EqualsTester ( ) . addEqualityGroup ( trimEqualsFoo , Predicates . compose ( equalsFoo , trim ) ) . addEqualityGroup ( equalsFoo ) . addEqualityGroup ( trim ) . addEqualityGroup ( Predicates . compose ( equalsFoo , identity ) ) . addEqualityGroup ( Predicates . compose ( equalsBar , trim ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testComposeSerialization ( ) { Function < String , String > trim = TrimStringFunction . INSTANCE ; Predicate < String > equalsFoo = Predicates . equalTo ( <str> ) ; Predicate < String > trimEqualsFoo = Predicates . compose ( equalsFoo , trim ) ; SerializableTester . reserializeAndAssert ( trimEqualsFoo ) ; } @GwtIncompatible ( <str> ) public void testContainsPattern_apply ( ) { Predicate < CharSequence > isFoobar = Predicates . containsPattern ( <str> ) ; assertTrue ( isFoobar . apply ( <str> ) ) ; assertFalse ( isFoobar . apply ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testContains_apply ( ) { Predicate < CharSequence > isFoobar = Predicates . contains ( Pattern . compile ( <str> ) ) ; assertTrue ( isFoobar . apply ( <str> ) ) ; assertFalse ( isFoobar . apply ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testContainsPattern_nulls ( ) throws Exception { NullPointerTester tester = new NullPointerTester ( ) ; Predicate < CharSequence > isWooString = Predicates . containsPattern ( <str> ) ; tester . testAllPublicInstanceMethods ( isWooString ) ; } @GwtIncompatible ( <str> ) public void testContains_nulls ( ) throws Exception { NullPointerTester tester = new NullPointerTester ( ) ; Predicate < CharSequence > isWooPattern = Predicates . contains ( Pattern . compile ( <str> ) ) ; tester . testAllPublicInstanceMethods ( isWooPattern ) ; } @GwtIncompatible ( <str> ) public void testContainsPattern_serialization ( ) { Predicate < CharSequence > pre = Predicates . containsPattern ( <str> ) ; Predicate < CharSequence > post = SerializableTester . reserializeAndAssert ( pre ) ; assertEquals ( pre . apply ( <str> ) , post . apply ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testContains_equals ( ) { new EqualsTester ( ) . addEqualityGroup ( Predicates . contains ( Pattern . compile ( <str> ) ) , Predicates . containsPattern ( <str> ) ) . addEqualityGroup ( Predicates . contains ( Pattern . compile ( <str> , Pattern . CASE_INSENSITIVE ) ) ) . addEqualityGroup ( Predicates . containsPattern ( <str> ) ) . testEquals ( ) ; } public void assertEqualHashCode ( Predicate < ? super Integer > expected , Predicate < ? super Integer > actual ) { assertEquals ( actual + <str> + expected , expected . hashCode ( ) , actual . hashCode ( ) ) ; } public void testHashCodeForBooleanOperations ( ) { Predicate < Integer > p1 = Predicates . isNull ( ) ; Predicate < Integer > p2 = isOdd ( ) ; assertEqualHashCode ( Predicates . not ( p1 ) , Predicates . not ( p1 ) ) ; assertEqualHashCode ( Predicates . and ( p1 , p2 ) , Predicates . and ( p1 , p2 ) ) ; assertEqualHashCode ( Predicates . or ( p1 , p2 ) , Predicates . or ( p1 , p2 ) ) ; assertTrue ( Predicates . and ( p1 , p2 ) . hashCode ( ) ! = Predicates . or ( p1 , p2 ) . hashCode ( ) ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) throws Exception { new ClassSanityTester ( ) . forAllPublicStaticMethods ( Predicates . class ) . testNulls ( ) ; } @GwtIncompatible ( <str> ) @AndroidIncompatible public void testEqualsAndSerializable ( ) throws Exception { new ClassSanityTester ( ) . forAllPublicStaticMethods ( Predicates . class ) . testEqualsAndSerializable ( ) ; } private static void assertEvalsToTrue ( Predicate < ? super Integer > predicate ) { assertTrue ( predicate . apply ( <int> ) ) ; assertTrue ( predicate . apply ( <int> ) ) ; assertTrue ( predicate . apply ( null ) ) ; } private static void assertEvalsToFalse ( Predicate < ? super Integer > predicate ) { assertFalse ( predicate . apply ( <int> ) ) ; assertFalse ( predicate . apply ( <int> ) ) ; assertFalse ( predicate . apply ( null ) ) ; } private static void assertEvalsLikeOdd ( Predicate < ? super Integer > predicate ) { assertEvalsLike ( isOdd ( ) , predicate ) ; } private static void assertEvalsLike ( Predicate < ? super Integer > expected , Predicate < ? super Integer > actual ) { assertEvalsLike ( expected , actual , <int> ) ; assertEvalsLike ( expected , actual , <int> ) ; assertEvalsLike ( expected , actual , null ) ; } private static < T > void assertEvalsLike ( Predicate < ? super T > expected , Predicate < ? super T > actual , T input ) { Boolean expectedResult = null ; RuntimeException expectedRuntimeException = null ; try { expectedResult = expected . apply ( input ) ; } catch ( RuntimeException e ) { expectedRuntimeException = e ; } Boolean actualResult = null ; RuntimeException actualRuntimeException = null ; try { actualResult = actual . apply ( input ) ; } catch ( RuntimeException e ) { actualRuntimeException = e ; } assertEquals ( expectedResult , actualResult ) ; if ( expectedRuntimeException ! = null ) { assertNotNull ( actualRuntimeException ) ; assertEquals ( expectedRuntimeException . getClass ( ) , actualRuntimeException . getClass ( ) ) ; } } @GwtIncompatible ( <str> ) private static void checkSerialization ( Predicate < ? super Integer > predicate ) { Predicate < ? super Integer > reserialized = SerializableTester . reserializeAndAssert ( predicate ) ; assertEvalsLike ( predicate , reserialized ) ; } } 

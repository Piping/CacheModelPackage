package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . NinePatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . scenes . scene2d . utils . NinePatchDrawable ; import com . badlogic . gdx . scenes . scene2d . utils . TextureRegionDrawable ; import com . badlogic . gdx . scenes . scene2d . utils . TransformDrawable ; import com . badlogic . gdx . utils . Align ; import com . badlogic . gdx . utils . Scaling ; public class Image extends Widget { private Scaling scaling ; private int align = Align . center ; private float imageX , imageY , imageWidth , imageHeight ; private Drawable drawable ; public Image ( ) { this ( ( Drawable ) null ) ; } public Image ( NinePatch patch ) { this ( new NinePatchDrawable ( patch ) , Scaling . stretch , Align . center ) ; } public Image ( TextureRegion region ) { this ( new TextureRegionDrawable ( region ) , Scaling . stretch , Align . center ) ; } public Image ( Texture texture ) { this ( new TextureRegionDrawable ( new TextureRegion ( texture ) ) ) ; } public Image ( Skin skin , String drawableName ) { this ( skin . getDrawable ( drawableName ) , Scaling . stretch , Align . center ) ; } public Image ( Drawable drawable ) { this ( drawable , Scaling . stretch , Align . center ) ; } public Image ( Drawable drawable , Scaling scaling ) { this ( drawable , scaling , Align . center ) ; } public Image ( Drawable drawable , Scaling scaling , int align ) { setDrawable ( drawable ) ; this . scaling = scaling ; this . align = align ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; } public void layout ( ) { if ( drawable = = null ) return ; float regionWidth = drawable . getMinWidth ( ) ; float regionHeight = drawable . getMinHeight ( ) ; float width = getWidth ( ) ; float height = getHeight ( ) ; Vector2 size = scaling . apply ( regionWidth , regionHeight , width , height ) ; imageWidth = size . x ; imageHeight = size . y ; if ( ( align & Align . left ) ! = <int> ) imageX = <int> ; else if ( ( align & Align . right ) ! = <int> ) imageX = ( int ) ( width - imageWidth ) ; else imageX = ( int ) ( width / <int> - imageWidth / <int> ) ; if ( ( align & Align . top ) ! = <int> ) imageY = ( int ) ( height - imageHeight ) ; else if ( ( align & Align . bottom ) ! = <int> ) imageY = <int> ; else imageY = ( int ) ( height / <int> - imageHeight / <int> ) ; } public void draw ( Batch batch , float parentAlpha ) { validate ( ) ; Color color = getColor ( ) ; batch . setColor ( color . r , color . g , color . b , color . a * parentAlpha ) ; float x = getX ( ) ; float y = getY ( ) ; float scaleX = getScaleX ( ) ; float scaleY = getScaleY ( ) ; if ( drawable instanceof TransformDrawable ) { float rotation = getRotation ( ) ; if ( scaleX ! = <int> | | scaleY ! = <int> | | rotation ! = <int> ) { ( ( TransformDrawable ) drawable ) . draw ( batch , x + imageX , y + imageY , getOriginX ( ) - imageX , getOriginY ( ) - imageY , imageWidth , imageHeight , scaleX , scaleY , rotation ) ; return ; } } if ( drawable ! = null ) drawable . draw ( batch , x + imageX , y + imageY , imageWidth * scaleX , imageHeight * scaleY ) ; } public void setDrawable ( Skin skin , String drawableName ) { setDrawable ( skin . getDrawable ( drawableName ) ) ; } public void setDrawable ( Drawable drawable ) { if ( this . drawable = = drawable ) return ; if ( drawable ! = null ) { if ( getPrefWidth ( ) ! = drawable . getMinWidth ( ) | | getPrefHeight ( ) ! = drawable . getMinHeight ( ) ) invalidateHierarchy ( ) ; } else invalidateHierarchy ( ) ; this . drawable = drawable ; } public Drawable getDrawable ( ) { return drawable ; } public void setScaling ( Scaling scaling ) { if ( scaling = = null ) throw new IllegalArgumentException ( <str> ) ; this . scaling = scaling ; } public void setAlign ( int align ) { this . align = align ; } public float getMinWidth ( ) { return <int> ; } public float getMinHeight ( ) { return <int> ; } public float getPrefWidth ( ) { if ( drawable ! = null ) return drawable . getMinWidth ( ) ; return <int> ; } public float getPrefHeight ( ) { if ( drawable ! = null ) return drawable . getMinHeight ( ) ; return <int> ; } public float getImageX ( ) { return imageX ; } public float getImageY ( ) { return imageY ; } public float getImageWidth ( ) { return imageWidth ; } public float getImageHeight ( ) { return imageHeight ; } } 

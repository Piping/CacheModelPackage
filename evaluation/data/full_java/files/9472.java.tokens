package com . google . common . net ; import static com . google . common . base . CharMatcher . ASCII ; import static com . google . common . base . CharMatcher . JAVA_ISO_CONTROL ; import static com . google . common . base . Charsets . UTF_8 ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . base . Preconditions . checkState ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Ascii ; import com . google . common . base . CharMatcher ; import com . google . common . base . Function ; import com . google . common . base . Joiner ; import com . google . common . base . Joiner . MapJoiner ; import com . google . common . base . MoreObjects ; import com . google . common . base . Objects ; import com . google . common . base . Optional ; import com . google . common . collect . ImmutableListMultimap ; import com . google . common . collect . ImmutableMultiset ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Iterables ; import com . google . common . collect . Maps ; import com . google . common . collect . Multimap ; import com . google . common . collect . Multimaps ; import java . nio . charset . Charset ; import java . nio . charset . IllegalCharsetNameException ; import java . nio . charset . UnsupportedCharsetException ; import java . util . Collection ; import java . util . Map ; import java . util . Map . Entry ; import javax . annotation . Nullable ; import javax . annotation . concurrent . Immutable ; @Beta @GwtCompatible @Immutable public final class MediaType { private static final String CHARSET_ATTRIBUTE = <str> ; private static final ImmutableListMultimap < String , String > UTF_8_CONSTANT_PARAMETERS = ImmutableListMultimap . of ( CHARSET_ATTRIBUTE , Ascii . toLowerCase ( UTF_8 . name ( ) ) ) ; private static final CharMatcher TOKEN_MATCHER = ASCII . and ( JAVA_ISO_CONTROL . negate ( ) ) . and ( CharMatcher . isNot ( <str> ) ) . and ( CharMatcher . noneOf ( <str> ) ) ; private static final CharMatcher QUOTED_TEXT_MATCHER = ASCII . and ( CharMatcher . noneOf ( <str> ) ) ; private static final CharMatcher LINEAR_WHITE_SPACE = CharMatcher . anyOf ( <str> ) ; private static final String APPLICATION_TYPE = <str> ; private static final String AUDIO_TYPE = <str> ; private static final String IMAGE_TYPE = <str> ; private static final String TEXT_TYPE = <str> ; private static final String VIDEO_TYPE = <str> ; private static final String WILDCARD = <str> ; private static final Map < MediaType , MediaType > KNOWN_TYPES = Maps . newHashMap ( ) ; private static MediaType createConstant ( String type , String subtype ) { return addKnownType ( new MediaType ( type , subtype , ImmutableListMultimap . < String , String > of ( ) ) ) ; } private static MediaType createConstantUtf8 ( String type , String subtype ) { return addKnownType ( new MediaType ( type , subtype , UTF_8_CONSTANT_PARAMETERS ) ) ; } private static MediaType addKnownType ( MediaType mediaType ) { KNOWN_TYPES . put ( mediaType , mediaType ) ; return mediaType ; } public static final MediaType ANY_TYPE = createConstant ( WILDCARD , WILDCARD ) ; public static final MediaType ANY_TEXT_TYPE = createConstant ( TEXT_TYPE , WILDCARD ) ; public static final MediaType ANY_IMAGE_TYPE = createConstant ( IMAGE_TYPE , WILDCARD ) ; public static final MediaType ANY_AUDIO_TYPE = createConstant ( AUDIO_TYPE , WILDCARD ) ; public static final MediaType ANY_VIDEO_TYPE = createConstant ( VIDEO_TYPE , WILDCARD ) ; public static final MediaType ANY_APPLICATION_TYPE = createConstant ( APPLICATION_TYPE , WILDCARD ) ; public static final MediaType CACHE_MANIFEST_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType CSS_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType CSV_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType HTML_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType I_CALENDAR_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType PLAIN_TEXT_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType TEXT_JAVASCRIPT_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType TSV_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType VCARD_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType WML_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType XML_UTF_8 = createConstantUtf8 ( TEXT_TYPE , <str> ) ; public static final MediaType BMP = createConstant ( IMAGE_TYPE , <str> ) ; public static final MediaType CRW = createConstant ( IMAGE_TYPE , <str> ) ; public static final MediaType GIF = createConstant ( IMAGE_TYPE , <str> ) ; public static final MediaType ICO = createConstant ( IMAGE_TYPE , <str> ) ; public static final MediaType JPEG = createConstant ( IMAGE_TYPE , <str> ) ; public static final MediaType PNG = createConstant ( IMAGE_TYPE , <str> ) ; public static final MediaType PSD = createConstant ( IMAGE_TYPE , <str> ) ; public static final MediaType SVG_UTF_8 = createConstantUtf8 ( IMAGE_TYPE , <str> ) ; public static final MediaType TIFF = createConstant ( IMAGE_TYPE , <str> ) ; public static final MediaType WEBP = createConstant ( IMAGE_TYPE , <str> ) ; public static final MediaType MP4_AUDIO = createConstant ( AUDIO_TYPE , <str> ) ; public static final MediaType MPEG_AUDIO = createConstant ( AUDIO_TYPE , <str> ) ; public static final MediaType OGG_AUDIO = createConstant ( AUDIO_TYPE , <str> ) ; public static final MediaType WEBM_AUDIO = createConstant ( AUDIO_TYPE , <str> ) ; public static final MediaType MP4_VIDEO = createConstant ( VIDEO_TYPE , <str> ) ; public static final MediaType MPEG_VIDEO = createConstant ( VIDEO_TYPE , <str> ) ; public static final MediaType OGG_VIDEO = createConstant ( VIDEO_TYPE , <str> ) ; public static final MediaType QUICKTIME = createConstant ( VIDEO_TYPE , <str> ) ; public static final MediaType WEBM_VIDEO = createConstant ( VIDEO_TYPE , <str> ) ; public static final MediaType WMV = createConstant ( VIDEO_TYPE , <str> ) ; public static final MediaType APPLICATION_XML_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType ATOM_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType BZIP2 = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType DART_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType APPLE_PASSBOOK = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType EOT = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType EPUB = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType FORM_DATA = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType KEY_ARCHIVE = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType APPLICATION_BINARY = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType GZIP = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType JAVASCRIPT_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType JSON_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType MANIFEST_JSON_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType KML = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType KMZ = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType MBOX = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType APPLE_MOBILE_CONFIG = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType MICROSOFT_EXCEL = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType MICROSOFT_POWERPOINT = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType MICROSOFT_WORD = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType OCTET_STREAM = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType OGG_CONTAINER = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType OOXML_DOCUMENT = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType OOXML_PRESENTATION = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType OOXML_SHEET = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType OPENDOCUMENT_GRAPHICS = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType OPENDOCUMENT_PRESENTATION = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType OPENDOCUMENT_SPREADSHEET = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType OPENDOCUMENT_TEXT = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType PDF = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType POSTSCRIPT = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType PROTOBUF = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType RDF_XML_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType RTF_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType SFNT = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType SHOCKWAVE_FLASH = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType SKETCHUP = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType SOAP_XML_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType TAR = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType WOFF = createConstant ( APPLICATION_TYPE , <str> ) ; public static final MediaType XHTML_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType XRD_UTF_8 = createConstantUtf8 ( APPLICATION_TYPE , <str> ) ; public static final MediaType ZIP = createConstant ( APPLICATION_TYPE , <str> ) ; private final String type ; private final String subtype ; private final ImmutableListMultimap < String , String > parameters ; private String toString ; private int hashCode ; private MediaType ( String type , String subtype , ImmutableListMultimap < String , String > parameters ) { this . type = type ; this . subtype = subtype ; this . parameters = parameters ; } public String type ( ) { return type ; } public String subtype ( ) { return subtype ; } public ImmutableListMultimap < String , String > parameters ( ) { return parameters ; } private Map < String , ImmutableMultiset < String > > parametersAsMap ( ) { return Maps . transformValues ( parameters . asMap ( ) , new Function < Collection < String > , ImmutableMultiset < String > > ( ) { @Override public ImmutableMultiset < String > apply ( Collection < String > input ) { return ImmutableMultiset . copyOf ( input ) ; } } ) ; } public Optional < Charset > charset ( ) { ImmutableSet < String > charsetValues = ImmutableSet . copyOf ( parameters . get ( CHARSET_ATTRIBUTE ) ) ; switch ( charsetValues . size ( ) ) { case <int> : return Optional . absent ( ) ; case <int> : return Optional . of ( Charset . forName ( Iterables . getOnlyElement ( charsetValues ) ) ) ; default : throw new IllegalStateException ( <str> + charsetValues ) ; } } public MediaType withoutParameters ( ) { return parameters . isEmpty ( ) ? this : create ( type , subtype ) ; } public MediaType withParameters ( Multimap < String , String > parameters ) { return create ( type , subtype , parameters ) ; } public MediaType withParameter ( String attribute , String value ) { checkNotNull ( attribute ) ; checkNotNull ( value ) ; String normalizedAttribute = normalizeToken ( attribute ) ; ImmutableListMultimap . Builder < String , String > builder = ImmutableListMultimap . builder ( ) ; for ( Entry < String , String > entry : parameters . entries ( ) ) { String key = entry . getKey ( ) ; if ( ! normalizedAttribute . equals ( key ) ) { builder . put ( key , entry . getValue ( ) ) ; } } builder . put ( normalizedAttribute , normalizeParameterValue ( normalizedAttribute , value ) ) ; MediaType mediaType = new MediaType ( type , subtype , builder . build ( ) ) ; return MoreObjects . firstNonNull ( KNOWN_TYPES . get ( mediaType ) , mediaType ) ; } public MediaType withCharset ( Charset charset ) { checkNotNull ( charset ) ; return withParameter ( CHARSET_ATTRIBUTE , charset . name ( ) ) ; } public boolean hasWildcard ( ) { return WILDCARD . equals ( type ) | | WILDCARD . equals ( subtype ) ; } public boolean is ( MediaType mediaTypeRange ) { return ( mediaTypeRange . type . equals ( WILDCARD ) | | mediaTypeRange . type . equals ( this . type ) ) & & ( mediaTypeRange . subtype . equals ( WILDCARD ) | | mediaTypeRange . subtype . equals ( this . subtype ) ) & & this . parameters . entries ( ) . containsAll ( mediaTypeRange . parameters . entries ( ) ) ; } public static MediaType create ( String type , String subtype ) { return create ( type , subtype , ImmutableListMultimap . < String , String > of ( ) ) ; } static MediaType createApplicationType ( String subtype ) { return create ( APPLICATION_TYPE , subtype ) ; } static MediaType createAudioType ( String subtype ) { return create ( AUDIO_TYPE , subtype ) ; } static MediaType createImageType ( String subtype ) { return create ( IMAGE_TYPE , subtype ) ; } static MediaType createTextType ( String subtype ) { return create ( TEXT_TYPE , subtype ) ; } static MediaType createVideoType ( String subtype ) { return create ( VIDEO_TYPE , subtype ) ; } private static MediaType create ( String type , String subtype , Multimap < String , String > parameters ) { checkNotNull ( type ) ; checkNotNull ( subtype ) ; checkNotNull ( parameters ) ; String normalizedType = normalizeToken ( type ) ; String normalizedSubtype = normalizeToken ( subtype ) ; checkArgument ( ! WILDCARD . equals ( normalizedType ) | | WILDCARD . equals ( normalizedSubtype ) , <str> ) ; ImmutableListMultimap . Builder < String , String > builder = ImmutableListMultimap . builder ( ) ; for ( Entry < String , String > entry : parameters . entries ( ) ) { String attribute = normalizeToken ( entry . getKey ( ) ) ; builder . put ( attribute , normalizeParameterValue ( attribute , entry . getValue ( ) ) ) ; } MediaType mediaType = new MediaType ( normalizedType , normalizedSubtype , builder . build ( ) ) ; return MoreObjects . firstNonNull ( KNOWN_TYPES . get ( mediaType ) , mediaType ) ; } private static String normalizeToken ( String token ) { checkArgument ( TOKEN_MATCHER . matchesAllOf ( token ) ) ; return Ascii . toLowerCase ( token ) ; } private static String normalizeParameterValue ( String attribute , String value ) { return CHARSET_ATTRIBUTE . equals ( attribute ) ? Ascii . toLowerCase ( value ) : value ; } public static MediaType parse ( String input ) { checkNotNull ( input ) ; Tokenizer tokenizer = new Tokenizer ( input ) ; try { String type = tokenizer . consumeToken ( TOKEN_MATCHER ) ; tokenizer . consumeCharacter ( <str> ) ; String subtype = tokenizer . consumeToken ( TOKEN_MATCHER ) ; ImmutableListMultimap . Builder < String , String > parameters = ImmutableListMultimap . builder ( ) ; while ( tokenizer . hasMore ( ) ) { tokenizer . consumeCharacter ( <str> ) ; tokenizer . consumeTokenIfPresent ( LINEAR_WHITE_SPACE ) ; String attribute = tokenizer . consumeToken ( TOKEN_MATCHER ) ; tokenizer . consumeCharacter ( <str> ) ; final String value ; if ( <str> = = tokenizer . previewChar ( ) ) { tokenizer . consumeCharacter ( <str> ) ; StringBuilder valueBuilder = new StringBuilder ( ) ; while ( <str> ! = tokenizer . previewChar ( ) ) { if ( <str> = = tokenizer . previewChar ( ) ) { tokenizer . consumeCharacter ( <str> ) ; valueBuilder . append ( tokenizer . consumeCharacter ( ASCII ) ) ; } else { valueBuilder . append ( tokenizer . consumeToken ( QUOTED_TEXT_MATCHER ) ) ; } } value = valueBuilder . toString ( ) ; tokenizer . consumeCharacter ( <str> ) ; } else { value = tokenizer . consumeToken ( TOKEN_MATCHER ) ; } parameters . put ( attribute , value ) ; } return create ( type , subtype , parameters . build ( ) ) ; } catch ( IllegalStateException e ) { throw new IllegalArgumentException ( <str> + input + <str> , e ) ; } } private static final class Tokenizer { final String input ; int position = <int> ; Tokenizer ( String input ) { this . input = input ; } String consumeTokenIfPresent ( CharMatcher matcher ) { checkState ( hasMore ( ) ) ; int startPosition = position ; position = matcher . negate ( ) . indexIn ( input , startPosition ) ; return hasMore ( ) ? input . substring ( startPosition , position ) : input . substring ( startPosition ) ; } String consumeToken ( CharMatcher matcher ) { int startPosition = position ; String token = consumeTokenIfPresent ( matcher ) ; checkState ( position ! = startPosition ) ; return token ; } char consumeCharacter ( CharMatcher matcher ) { checkState ( hasMore ( ) ) ; char c = previewChar ( ) ; checkState ( matcher . matches ( c ) ) ; position + + ; return c ; } char consumeCharacter ( char c ) { checkState ( hasMore ( ) ) ; checkState ( previewChar ( ) = = c ) ; position + + ; return c ; } char previewChar ( ) { checkState ( hasMore ( ) ) ; return input . charAt ( position ) ; } boolean hasMore ( ) { return ( position > = <int> ) & & ( position < input . length ( ) ) ; } } @Override public boolean equals ( @Nullable Object obj ) { if ( obj = = this ) { return true ; } else if ( obj instanceof MediaType ) { MediaType that = ( MediaType ) obj ; return this . type . equals ( that . type ) & & this . subtype . equals ( that . subtype ) & & this . parametersAsMap ( ) . equals ( that . parametersAsMap ( ) ) ; } else { return false ; } } @Override public int hashCode ( ) { int h = hashCode ; if ( h = = <int> ) { h = Objects . hashCode ( type , subtype , parametersAsMap ( ) ) ; hashCode = h ; } return h ; } private static final MapJoiner PARAMETER_JOINER = Joiner . on ( <str> ) . withKeyValueSeparator ( <str> ) ; @Override public String toString ( ) { String result = toString ; if ( result = = null ) { result = computeToString ( ) ; toString = result ; } return result ; } private String computeToString ( ) { StringBuilder builder = new StringBuilder ( ) . append ( type ) . append ( <str> ) . append ( subtype ) ; if ( ! parameters . isEmpty ( ) ) { builder . append ( <str> ) ; Multimap < String , String > quotedParameters = Multimaps . transformValues ( parameters , new Function < String , String > ( ) { @Override public String apply ( String value ) { return TOKEN_MATCHER . matchesAllOf ( value ) ? value : escapeAndQuote ( value ) ; } } ) ; PARAMETER_JOINER . appendTo ( builder , quotedParameters . entries ( ) ) ; } return builder . toString ( ) ; } private static String escapeAndQuote ( String value ) { StringBuilder escaped = new StringBuilder ( value . length ( ) + <int> ) . append ( <str> ) ; for ( int i = <int> ; i < value . length ( ) ; i + + ) { char ch = value . charAt ( i ) ; if ( ch = = <str> | | ch = = <str> | | ch = = <str> ) { escaped . append ( <str> ) ; } escaped . append ( ch ) ; } return escaped . append ( <str> ) . toString ( ) ; } } 

package org . elasticsearch . rest ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentType ; import java . io . IOException ; public abstract class RestChannel { protected final RestRequest request ; protected final boolean detailedErrorsEnabled ; private BytesStreamOutput bytesOut ; protected RestChannel ( RestRequest request , boolean detailedErrorsEnabled ) { this . request = request ; this . detailedErrorsEnabled = detailedErrorsEnabled ; } public XContentBuilder newBuilder ( ) throws IOException { return newBuilder ( request . hasContent ( ) ? request . content ( ) : null , request . hasParam ( <str> ) ) ; } public XContentBuilder newErrorBuilder ( ) throws IOException { return newBuilder ( request . hasContent ( ) ? request . content ( ) : null , false ) ; } public XContentBuilder newBuilder ( @Nullable BytesReference autoDetectSource , boolean useFiltering ) throws IOException { XContentType contentType = XContentType . fromRestContentType ( request . param ( <str> , request . header ( <str> ) ) ) ; if ( contentType = = null ) { if ( autoDetectSource ! = null ) { contentType = XContentFactory . xContentType ( autoDetectSource ) ; } } if ( contentType = = null ) { contentType = XContentType . JSON ; } String [ ] filters = useFiltering ? request . paramAsStringArrayOrEmptyIfAll ( <str> ) : null ; XContentBuilder builder = new XContentBuilder ( XContentFactory . xContent ( contentType ) , bytesOutput ( ) , filters ) ; if ( request . paramAsBoolean ( <str> , false ) ) { builder . prettyPrint ( ) . lfAtEnd ( ) ; } builder . humanReadable ( request . paramAsBoolean ( <str> , builder . humanReadable ( ) ) ) ; String casing = request . param ( <str> ) ; if ( casing ! = null & & <str> . equals ( casing ) ) { builder . fieldCaseConversion ( XContentBuilder . FieldCaseConversion . CAMELCASE ) ; } else { builder . fieldCaseConversion ( XContentBuilder . FieldCaseConversion . NONE ) ; } return builder ; } public final BytesStreamOutput bytesOutput ( ) { if ( bytesOut = = null ) { bytesOut = newBytesOutput ( ) ; } else { bytesOut . reset ( ) ; } return bytesOut ; } protected BytesStreamOutput newBytesOutput ( ) { return new BytesStreamOutput ( ) ; } public RestRequest request ( ) { return this . request ; } public boolean detailedErrorsEnabled ( ) { return detailedErrorsEnabled ; } public abstract void sendResponse ( RestResponse response ) ; } 

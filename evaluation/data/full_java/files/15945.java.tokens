package org . gradle . tooling . internal . consumer ; import org . gradle . tooling . GradleConnectionException ; import org . gradle . tooling . GradleConnector ; import org . gradle . tooling . ProjectConnection ; import org . gradle . util . GradleVersion ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . net . URI ; import java . util . concurrent . TimeUnit ; public class DefaultGradleConnector extends GradleConnector { private static final Logger LOGGER = LoggerFactory . getLogger ( GradleConnector . class ) ; private final ConnectionFactory connectionFactory ; private final DistributionFactory distributionFactory ; private Distribution distribution ; private final DefaultConnectionParameters . Builder connectionParamsBuilder = DefaultConnectionParameters . builder ( ) ; public DefaultGradleConnector ( ConnectionFactory connectionFactory , DistributionFactory distributionFactory ) { this . connectionFactory = connectionFactory ; this . distributionFactory = distributionFactory ; } public static void close ( ) { ConnectorServices . close ( ) ; } public GradleConnector useInstallation ( File gradleHome ) { distribution = distributionFactory . getDistribution ( gradleHome ) ; return this ; } public GradleConnector useGradleVersion ( String gradleVersion ) { distribution = distributionFactory . getDistribution ( gradleVersion ) ; return this ; } public GradleConnector useDistribution ( URI gradleDistribution ) { distribution = distributionFactory . getDistribution ( gradleDistribution ) ; return this ; } public GradleConnector useClasspathDistribution ( ) { distribution = distributionFactory . getClasspathDistribution ( ) ; return this ; } public GradleConnector useBuildDistribution ( ) { distribution = null ; return this ; } public GradleConnector useDistributionBaseDir ( File distributionBaseDir ) { distributionFactory . setDistributionBaseDir ( distributionBaseDir ) ; return this ; } public GradleConnector forProjectDirectory ( File projectDir ) { connectionParamsBuilder . setProjectDir ( projectDir ) ; return this ; } public GradleConnector useGradleUserHomeDir ( File gradleUserHomeDir ) { connectionParamsBuilder . setGradleUserHomeDir ( gradleUserHomeDir ) ; return this ; } public GradleConnector searchUpwards ( boolean searchUpwards ) { connectionParamsBuilder . setSearchUpwards ( searchUpwards ) ; return this ; } public GradleConnector embedded ( boolean embedded ) { connectionParamsBuilder . setEmbedded ( embedded ) ; return this ; } public GradleConnector daemonMaxIdleTime ( int timeoutValue , TimeUnit timeoutUnits ) { connectionParamsBuilder . setDaemonMaxIdleTimeValue ( timeoutValue ) ; connectionParamsBuilder . setDaemonMaxIdleTimeUnits ( timeoutUnits ) ; return this ; } public GradleConnector daemonBaseDir ( File daemonBaseDir ) { connectionParamsBuilder . setDaemonBaseDir ( daemonBaseDir ) ; return this ; } public DefaultGradleConnector setVerboseLogging ( boolean verboseLogging ) { connectionParamsBuilder . setVerboseLogging ( verboseLogging ) ; return this ; } public ProjectConnection connect ( ) throws GradleConnectionException { LOGGER . debug ( <str> , GradleVersion . current ( ) . getVersion ( ) ) ; ConnectionParameters connectionParameters = connectionParamsBuilder . build ( ) ; if ( connectionParameters . getProjectDir ( ) = = null ) { throw new IllegalStateException ( <str> ) ; } if ( distribution = = null ) { distribution = distributionFactory . getDefaultDistribution ( connectionParameters . getProjectDir ( ) , connectionParameters . isSearchUpwards ( ) ! = null ? connectionParameters . isSearchUpwards ( ) : true ) ; } return connectionFactory . create ( distribution , connectionParameters ) ; } ConnectionFactory getConnectionFactory ( ) { return connectionFactory ; } } 

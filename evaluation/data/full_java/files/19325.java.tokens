package io . netty . handler . codec . http2 ; import static io . netty . handler . codec . http2 . Http2Error . PROTOCOL_ERROR ; import static io . netty . handler . codec . http2 . Http2Exception . connectionError ; import static io . netty . util . AsciiString . CASE_SENSITIVE_HASHER ; import static io . netty . util . AsciiString . isUpperCase ; import io . netty . handler . codec . CharSequenceValueConverter ; import io . netty . handler . codec . DefaultHeaders ; import io . netty . util . AsciiString ; import io . netty . util . ByteProcessor ; import io . netty . util . internal . PlatformDependent ; public class DefaultHttp2Headers extends DefaultHeaders < CharSequence , CharSequence , Http2Headers > implements Http2Headers { private static final ByteProcessor HTTP2_NAME_VALIDATOR_PROCESSOR = new ByteProcessor ( ) { @Override public boolean process ( byte value ) throws Exception { return ! isUpperCase ( value ) ; } } ; private static final NameValidator < CharSequence > HTTP2_NAME_VALIDATOR = new NameValidator < CharSequence > ( ) { @Override public void validateName ( CharSequence name ) { if ( name instanceof AsciiString ) { final int index ; try { index = ( ( AsciiString ) name ) . forEachByte ( HTTP2_NAME_VALIDATOR_PROCESSOR ) ; } catch ( Http2Exception e ) { PlatformDependent . throwException ( e ) ; return ; } catch ( Throwable t ) { PlatformDependent . throwException ( connectionError ( PROTOCOL_ERROR , t , <str> , name ) ) ; return ; } if ( index ! = - <int> ) { PlatformDependent . throwException ( connectionError ( PROTOCOL_ERROR , <str> , name ) ) ; } } else { for ( int i = <int> ; i < name . length ( ) ; + + i ) { if ( isUpperCase ( name . charAt ( i ) ) ) { PlatformDependent . throwException ( connectionError ( PROTOCOL_ERROR , <str> , name ) ) ; } } } } } ; private HeaderEntry < CharSequence , CharSequence > firstNonPseudo = head ; public DefaultHttp2Headers ( ) { this ( true ) ; } @SuppressWarnings ( <str> ) public DefaultHttp2Headers ( boolean validate ) { super ( CASE_SENSITIVE_HASHER , CharSequenceValueConverter . INSTANCE , validate ? HTTP2_NAME_VALIDATOR : NameValidator . NOT_NULL ) ; } @SuppressWarnings ( <str> ) public DefaultHttp2Headers ( boolean validate , int arraySizeHint ) { super ( CASE_SENSITIVE_HASHER , CharSequenceValueConverter . INSTANCE , validate ? HTTP2_NAME_VALIDATOR : NameValidator . NOT_NULL , arraySizeHint ) ; } @Override public Http2Headers clear ( ) { this . firstNonPseudo = head ; return super . clear ( ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof Http2Headers ) ) { return false ; } return equals ( ( Http2Headers ) o , CASE_SENSITIVE_HASHER ) ; } @Override public int hashCode ( ) { return hashCode ( CASE_SENSITIVE_HASHER ) ; } @Override public Http2Headers method ( CharSequence value ) { set ( PseudoHeaderName . METHOD . value ( ) , value ) ; return this ; } @Override public Http2Headers scheme ( CharSequence value ) { set ( PseudoHeaderName . SCHEME . value ( ) , value ) ; return this ; } @Override public Http2Headers authority ( CharSequence value ) { set ( PseudoHeaderName . AUTHORITY . value ( ) , value ) ; return this ; } @Override public Http2Headers path ( CharSequence value ) { set ( PseudoHeaderName . PATH . value ( ) , value ) ; return this ; } @Override public Http2Headers status ( CharSequence value ) { set ( PseudoHeaderName . STATUS . value ( ) , value ) ; return this ; } @Override public CharSequence method ( ) { return get ( PseudoHeaderName . METHOD . value ( ) ) ; } @Override public CharSequence scheme ( ) { return get ( PseudoHeaderName . SCHEME . value ( ) ) ; } @Override public CharSequence authority ( ) { return get ( PseudoHeaderName . AUTHORITY . value ( ) ) ; } @Override public CharSequence path ( ) { return get ( PseudoHeaderName . PATH . value ( ) ) ; } @Override public CharSequence status ( ) { return get ( PseudoHeaderName . STATUS . value ( ) ) ; } @Override protected final HeaderEntry < CharSequence , CharSequence > newHeaderEntry ( int h , CharSequence name , CharSequence value , HeaderEntry < CharSequence , CharSequence > next ) { return new Http2HeaderEntry ( h , name , value , next ) ; } private final class Http2HeaderEntry extends HeaderEntry < CharSequence , CharSequence > { protected Http2HeaderEntry ( int hash , CharSequence key , CharSequence value , HeaderEntry < CharSequence , CharSequence > next ) { super ( hash , key ) ; this . value = value ; this . next = next ; if ( key . length ( ) ! = <int> & & key . charAt ( <int> ) = = <str> ) { after = firstNonPseudo ; before = firstNonPseudo . before ( ) ; } else { after = head ; before = head . before ( ) ; if ( firstNonPseudo = = head ) { firstNonPseudo = this ; } } pointNeighborsToThis ( ) ; } @Override protected void remove ( ) { if ( this = = firstNonPseudo ) { firstNonPseudo = firstNonPseudo . after ( ) ; } super . remove ( ) ; } } } 

package org . eclipse . ui . console . actions ; import org . eclipse . jface . dialogs . IInputValidator ; import org . eclipse . jface . dialogs . InputDialog ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . ITextViewer ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . console . ConsolePlugin ; import org . eclipse . ui . internal . console . ConsoleMessages ; import com . ibm . icu . text . MessageFormat ; public class TextViewerGotoLineAction extends TextViewerAction { class NumberValidator implements IInputValidator { @Override public String isValid ( String input ) { try { int i = Integer . parseInt ( input ) ; if ( i < = <int> | | fLastLine < i ) { return ConsoleMessages . TextViewerGotoLineAction_Line_number_out_of_range_1 ; } } catch ( NumberFormatException x ) { return ConsoleMessages . TextViewerGotoLineAction_Not_a_number_2 ; } return null ; } } protected int fLastLine ; protected ITextViewer fTextViewer ; public TextViewerGotoLineAction ( ITextViewer viewer ) { super ( viewer , - <int> ) ; fTextViewer = viewer ; setText ( ConsoleMessages . TextViewerGotoLineAction_Go_to__Line____Ctrl_L_4 ) ; setToolTipText ( ConsoleMessages . TextViewerGotoLineAction_Go_To_Line_1 ) ; setDescription ( ConsoleMessages . TextViewerGotoLineAction_Go_To_Line_1 ) ; } @Override public void update ( ) { } protected void gotoLine ( int line ) { IDocument document = fTextViewer . getDocument ( ) ; try { int start = document . getLineOffset ( line ) ; int length = document . getLineLength ( line ) ; fTextViewer . getTextWidget ( ) . setSelection ( start , start + length ) ; fTextViewer . revealRange ( start , length ) ; } catch ( BadLocationException x ) { ConsolePlugin . errorDialog ( fTextViewer . getTextWidget ( ) . getShell ( ) , ConsoleMessages . TextViewerGotoLineAction_Go_To_Line_1 , ConsoleMessages . TextViewerGotoLineAction_Exceptions_occurred_attempt_to_go_to_line_2 , x ) ; } } @Override public void run ( ) { try { Point selection = fTextViewer . getTextWidget ( ) . getSelection ( ) ; IDocument document = fTextViewer . getDocument ( ) ; fLastLine = document . getLineOfOffset ( document . getLength ( ) ) + <int> ; int startLine = selection = = null ? <int> : fTextViewer . getTextWidget ( ) . getLineAtOffset ( selection . x ) + <int> ; String title = ConsoleMessages . TextViewerGotoLineAction_Go_To_Line_1 ; String message = MessageFormat . format ( ConsoleMessages . TextViewerGotoLineAction_Enter_line_number__8 , new Object [ ] { Integer . valueOf ( fLastLine ) } ) ; String value = Integer . toString ( startLine ) ; Shell activeShell = fTextViewer . getTextWidget ( ) . getShell ( ) ; InputDialog d = new InputDialog ( activeShell , title , message , value , new NumberValidator ( ) ) ; if ( d . open ( ) = = Window . OK ) { try { int line = Integer . parseInt ( d . getValue ( ) ) ; gotoLine ( line - <int> ) ; } catch ( NumberFormatException x ) { ConsolePlugin . errorDialog ( activeShell , ConsoleMessages . TextViewerGotoLineAction_Go_To_Line_1 , ConsoleMessages . TextViewerGotoLineAction_Exceptions_occurred_attempt_to_go_to_line_2 , x ) ; } } } catch ( BadLocationException x ) { ConsolePlugin . errorDialog ( fTextViewer . getTextWidget ( ) . getShell ( ) , ConsoleMessages . TextViewerGotoLineAction_Go_To_Line_1 , ConsoleMessages . TextViewerGotoLineAction_Exceptions_occurred_attempt_to_go_to_line_2 , x ) ; return ; } } } 

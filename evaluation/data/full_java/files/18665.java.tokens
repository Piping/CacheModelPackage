package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Environment ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . Renderable ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . attributes . TextureAttribute ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . graphics . g3d . shaders . DefaultShader ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . math . collision . BoundingBox ; import com . badlogic . gdx . utils . Array ; public class HeightMapTest extends BaseG3dTest { HeightField field ; Renderable ground ; Environment environment ; boolean morph = true ; Texture texture ; @Override public void create ( ) { super . create ( ) ; environment = new Environment ( ) ; environment . set ( new ColorAttribute ( ColorAttribute . AmbientLight , <float> , <float> , <float> , <float> ) ) ; environment . add ( new DirectionalLight ( ) . set ( <float> , <float> , <float> , - <float> , - <float> , - <float> ) ) ; texture = new Texture ( Gdx . files . internal ( <str> ) ) ; int w = <int> , h = <int> ; Pixmap data = new Pixmap ( Gdx . files . internal ( <str> ) ) ; field = new HeightField ( true , data , true , Usage . Position | Usage . Normal | Usage . ColorUnpacked | Usage . TextureCoordinates ) ; data . dispose ( ) ; field . corner00 . set ( - <int> f , <int> , - <int> f ) ; field . corner10 . set ( <int> f , <int> , - <int> f ) ; field . corner01 . set ( - <int> f , <int> , <int> f ) ; field . corner11 . set ( <int> f , <int> , <int> f ) ; field . color00 . set ( <int> , <int> , <int> , <int> ) ; field . color01 . set ( <int> , <int> , <int> , <int> ) ; field . color10 . set ( <int> , <int> , <int> , <int> ) ; field . color11 . set ( <int> , <int> , <int> , <int> ) ; field . magnitude . set ( <float> , <float> , <float> ) ; field . update ( ) ; ground = new Renderable ( ) ; ground . environment = environment ; ground . meshPart . mesh = field . mesh ; ground . meshPart . primitiveType = GL20 . GL_TRIANGLES ; ground . meshPart . offset = <int> ; ground . meshPart . size = field . mesh . getNumIndices ( ) ; ground . meshPart . update ( ) ; ground . material = new Material ( TextureAttribute . createDiffuse ( texture ) ) ; } @Override protected void render ( ModelBatch batch , Array < ModelInstance > instances ) { batch . render ( instances ) ; batch . render ( ground ) ; } @Override public void dispose ( ) { super . dispose ( ) ; texture . dispose ( ) ; field . dispose ( ) ; } } 

package org . elasticsearch . cluster . node ; import org . elasticsearch . Version ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . common . transport . InetSocketTransportAddress ; import org . elasticsearch . test . ESTestCase ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . * ; import static java . util . Collections . emptyMap ; import static java . util . Collections . singletonMap ; import static org . elasticsearch . cluster . node . DiscoveryNodeFilters . OpType . AND ; import static org . elasticsearch . cluster . node . DiscoveryNodeFilters . OpType . OR ; import static org . hamcrest . Matchers . equalTo ; public class DiscoveryNodeFiltersTests extends ESTestCase { private static InetSocketTransportAddress localAddress ; @BeforeClass public static void createLocalAddress ( ) throws UnknownHostException { localAddress = new InetSocketTransportAddress ( InetAddress . getByName ( <str> ) , <int> ) ; } @AfterClass public static void releaseLocalAddress ( ) { localAddress = null ; } public void testNameMatch ( ) { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( OR , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( false ) ) ; } public void testIdMatch ( ) { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( OR , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( false ) ) ; } public void testIdOrNameMatch ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( OR , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( false ) ) ; } public void testTagAndGroupMatch ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( AND , <str> , settings ) ; Map < String , String > attributes = new HashMap < > ( ) ; attributes . put ( <str> , <str> ) ; attributes . put ( <str> , <str> ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , attributes , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; attributes = new HashMap < > ( ) ; attributes . put ( <str> , <str> ) ; attributes . put ( <str> , <str> ) ; attributes . put ( <str> , <str> ) ; node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , attributes , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; attributes = new HashMap < > ( ) ; attributes . put ( <str> , <str> ) ; attributes . put ( <str> , <str> ) ; attributes . put ( <str> , <str> ) ; node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , attributes , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( false ) ) ; node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( false ) ) ; } public void testStarMatch ( ) { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( OR , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; } public void testIpBindFilteringMatchingAnd ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> + randomFrom ( <str> , <str> , <str> ) , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( AND , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , <str> , <str> , localAddress , singletonMap ( <str> , <str> ) , null ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; } public void testIpBindFilteringNotMatching ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> + randomFrom ( <str> , <str> , <str> ) , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( AND , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , <str> , <str> , localAddress , singletonMap ( <str> , <str> ) , null ) ; assertThat ( filters . match ( node ) , equalTo ( false ) ) ; } public void testIpBindFilteringNotMatchingAnd ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> + randomFrom ( <str> , <str> , <str> ) , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( AND , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , <str> , <str> , localAddress , singletonMap ( <str> , <str> ) , null ) ; assertThat ( filters . match ( node ) , equalTo ( false ) ) ; } public void testIpBindFilteringMatchingOr ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> + randomFrom ( <str> , <str> , <str> ) , <str> ) . put ( <str> , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( OR , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , <str> , <str> , localAddress , singletonMap ( <str> , <str> ) , null ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; } public void testIpBindFilteringNotMatchingOr ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> + randomFrom ( <str> , <str> , <str> ) , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( OR , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , <str> , <str> , localAddress , singletonMap ( <str> , <str> ) , null ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; } public void testIpPublishFilteringMatchingAnd ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( AND , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , <str> , <str> , localAddress , singletonMap ( <str> , <str> ) , null ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; } public void testIpPublishFilteringNotMatchingAnd ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( AND , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , <str> , <str> , localAddress , singletonMap ( <str> , <str> ) , null ) ; assertThat ( filters . match ( node ) , equalTo ( false ) ) ; } public void testIpPublishFilteringMatchingOr ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( OR , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , <str> , <str> , localAddress , singletonMap ( <str> , <str> ) , null ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; } public void testIpPublishFilteringNotMatchingOr ( ) { Settings settings = shuffleSettings ( Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ) ; DiscoveryNodeFilters filters = DiscoveryNodeFilters . buildFromSettings ( OR , <str> , settings ) ; DiscoveryNode node = new DiscoveryNode ( <str> , <str> , <str> , <str> , localAddress , singletonMap ( <str> , <str> ) , null ) ; assertThat ( filters . match ( node ) , equalTo ( true ) ) ; } private Settings shuffleSettings ( Settings source ) { Settings . Builder settings = Settings . settingsBuilder ( ) ; List < String > keys = new ArrayList < > ( source . getAsMap ( ) . keySet ( ) ) ; Collections . shuffle ( keys , random ( ) ) ; for ( String o : keys ) { settings . put ( o , source . getAsMap ( ) . get ( o ) ) ; } return settings . build ( ) ; } } 

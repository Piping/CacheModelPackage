package org . apache . cassandra . db ; import java . io . DataInput ; import java . io . IOException ; import java . nio . ByteBuffer ; import org . apache . cassandra . dht . * ; import org . apache . cassandra . io . util . DataOutputPlus ; import org . apache . cassandra . service . StorageService ; import org . apache . cassandra . utils . ByteBufferUtil ; public interface PartitionPosition extends RingPosition < PartitionPosition > { public static enum Kind { ROW_KEY , MIN_BOUND , MAX_BOUND ; private static final Kind [ ] allKinds = Kind . values ( ) ; static Kind fromOrdinal ( int ordinal ) { return allKinds [ ordinal ] ; } } public static final class ForKey { public static PartitionPosition get ( ByteBuffer key , IPartitioner p ) { return key = = null | | key . remaining ( ) = = <int> ? p . getMinimumToken ( ) . minKeyBound ( ) : p . decorateKey ( key ) ; } } public static final RowPositionSerializer serializer = new RowPositionSerializer ( ) ; public Kind kind ( ) ; public boolean isMinimum ( ) ; public static class RowPositionSerializer implements IPartitionerDependentSerializer < PartitionPosition > { public void serialize ( PartitionPosition pos , DataOutputPlus out , int version ) throws IOException { Kind kind = pos . kind ( ) ; out . writeByte ( kind . ordinal ( ) ) ; if ( kind = = Kind . ROW_KEY ) ByteBufferUtil . writeWithShortLength ( ( ( DecoratedKey ) pos ) . getKey ( ) , out ) ; else Token . serializer . serialize ( pos . getToken ( ) , out , version ) ; } public PartitionPosition deserialize ( DataInput in , IPartitioner p , int version ) throws IOException { Kind kind = Kind . fromOrdinal ( in . readByte ( ) ) ; if ( kind = = Kind . ROW_KEY ) { ByteBuffer k = ByteBufferUtil . readWithShortLength ( in ) ; return p . decorateKey ( k ) ; } else { Token t = Token . serializer . deserialize ( in , p , version ) ; return kind = = Kind . MIN_BOUND ? t . minKeyBound ( ) : t . maxKeyBound ( ) ; } } public long serializedSize ( PartitionPosition pos , int version ) { Kind kind = pos . kind ( ) ; int size = <int> ; if ( kind = = Kind . ROW_KEY ) { int keySize = ( ( DecoratedKey ) pos ) . getKey ( ) . remaining ( ) ; size + = TypeSizes . sizeof ( ( short ) keySize ) + keySize ; } else { size + = Token . serializer . serializedSize ( pos . getToken ( ) , version ) ; } return size ; } } } 

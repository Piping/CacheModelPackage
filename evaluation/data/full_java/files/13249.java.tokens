package org . gradle . integtests . fixtures ; import org . gradle . integtests . fixtures . executer . IntegrationTestBuildContext ; import org . gradle . test . fixtures . file . TestDirectoryProvider ; import org . gradle . test . fixtures . file . TestFile ; import org . junit . rules . MethodRule ; import org . junit . runners . model . FrameworkMethod ; import org . junit . runners . model . Statement ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class Sample implements MethodRule { private final Logger logger = LoggerFactory . getLogger ( Sample . class ) ; private final String defaultSampleName ; private final String testSampleDirName ; private TestFile sampleDir ; private TestDirectoryProvider testDirectoryProvider ; public Sample ( TestDirectoryProvider testDirectoryProvider ) { this ( testDirectoryProvider , null ) ; } public Sample ( TestDirectoryProvider testDirectoryProvider , String defaultSampleName ) { this ( testDirectoryProvider , defaultSampleName , null ) ; } public Sample ( TestDirectoryProvider testDirectoryProvider , String defaultSampleName , String testSampleDirName ) { this . testDirectoryProvider = testDirectoryProvider ; this . defaultSampleName = defaultSampleName ; this . testSampleDirName = testSampleDirName ; } public Statement apply ( final Statement base , FrameworkMethod method , Object target ) { final String sampleName = getSampleName ( method ) ; if ( testSampleDirName ! = null ) { sampleDir = testDirectoryProvider . getTestDirectory ( ) . file ( testSampleDirName ) ; } else { sampleDir = sampleName = = null ? null : testDirectoryProvider . getTestDirectory ( ) . file ( sampleName ) ; } return new Statement ( ) { @Override public void evaluate ( ) throws Throwable { if ( sampleName ! = null ) { TestFile srcDir = new IntegrationTestBuildContext ( ) . getSamplesDir ( ) . file ( sampleName ) . assertIsDir ( ) ; logger . debug ( <str> , sampleName ) ; srcDir . copyTo ( sampleDir ) ; } else { logger . debug ( <str> ) ; } base . evaluate ( ) ; } } ; } private String getSampleName ( FrameworkMethod method ) { String sampleName ; UsesSample annotation = method . getAnnotation ( UsesSample . class ) ; if ( annotation = = null ) { sampleName = defaultSampleName ; } else { sampleName = annotation . value ( ) ; } return sampleName ; } public TestFile getDir ( ) { return sampleDir ; } } 

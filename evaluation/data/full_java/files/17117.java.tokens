package com . badlogic . gdx . physics . box2d . joints ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Joint ; import com . badlogic . gdx . physics . box2d . World ; public class RevoluteJoint extends Joint { org . jbox2d . dynamics . joints . RevoluteJoint joint ; private final Vector2 localAnchorA = new Vector2 ( ) ; private final Vector2 localAnchorB = new Vector2 ( ) ; public RevoluteJoint ( World world , org . jbox2d . dynamics . joints . RevoluteJoint joint ) { super ( world , joint ) ; this . joint = joint ; } public float getJointAngle ( ) { return joint . getJointAngle ( ) ; } public float getJointSpeed ( ) { return joint . getJointSpeed ( ) ; } public boolean isLimitEnabled ( ) { return joint . isLimitEnabled ( ) ; } public void enableLimit ( boolean flag ) { joint . enableLimit ( flag ) ; } public float getLowerLimit ( ) { return joint . getLowerLimit ( ) ; } public float getUpperLimit ( ) { return joint . getUpperLimit ( ) ; } public void setLimits ( float lower , float upper ) { joint . setLimits ( lower , upper ) ; } public boolean isMotorEnabled ( ) { return joint . isMotorEnabled ( ) ; } public void enableMotor ( boolean flag ) { joint . enableMotor ( flag ) ; } float motorSpeed = <int> ; public void setMotorSpeed ( float speed ) { motorSpeed = speed ; joint . setMotorSpeed ( speed ) ; } public float getMotorSpeed ( ) { return motorSpeed ; } public void setMaxMotorTorque ( float torque ) { joint . setMaxMotorTorque ( torque ) ; } public float getMotorTorque ( float invDt ) { return joint . getMotorTorque ( invDt ) ; } public Vector2 getLocalAnchorA ( ) { return localAnchorA . set ( joint . getLocalAnchorA ( ) . x , joint . getLocalAnchorA ( ) . y ) ; } public Vector2 getLocalAnchorB ( ) { return localAnchorB . set ( joint . getLocalAnchorB ( ) . x , joint . getLocalAnchorB ( ) . y ) ; } public float getReferenceAngle ( ) { return joint . getReferenceAngle ( ) ; } public float getMaxMotorTorque ( ) { return joint . getMaxMotorTorque ( ) ; } } 

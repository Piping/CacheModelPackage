package org . elasticsearch . cluster . action . index ; import org . apache . lucene . store . LockObtainFailedException ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . concurrent . AbstractRunnable ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . indices . IndicesService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . * ; import java . io . IOException ; import java . util . List ; import java . util . concurrent . CopyOnWriteArrayList ; import java . util . concurrent . TimeUnit ; public class NodeIndexDeletedAction extends AbstractComponent { public static final String INDEX_DELETED_ACTION_NAME = <str> ; public static final String INDEX_STORE_DELETED_ACTION_NAME = <str> ; private final ThreadPool threadPool ; private final TransportService transportService ; private final List < Listener > listeners = new CopyOnWriteArrayList < > ( ) ; private final IndicesService indicesService ; @Inject public NodeIndexDeletedAction ( Settings settings , ThreadPool threadPool , TransportService transportService , IndicesService indicesService ) { super ( settings ) ; this . threadPool = threadPool ; this . transportService = transportService ; transportService . registerRequestHandler ( INDEX_DELETED_ACTION_NAME , NodeIndexDeletedMessage : : new , ThreadPool . Names . SAME , new NodeIndexDeletedTransportHandler ( ) ) ; transportService . registerRequestHandler ( INDEX_STORE_DELETED_ACTION_NAME , NodeIndexStoreDeletedMessage : : new , ThreadPool . Names . SAME , new NodeIndexStoreDeletedTransportHandler ( ) ) ; this . indicesService = indicesService ; } public void add ( Listener listener ) { listeners . add ( listener ) ; } public void remove ( Listener listener ) { listeners . remove ( listener ) ; } public void nodeIndexDeleted ( final ClusterState clusterState , final String index , final IndexSettings indexSettings , final String nodeId ) { final DiscoveryNodes nodes = clusterState . nodes ( ) ; transportService . sendRequest ( clusterState . nodes ( ) . masterNode ( ) , INDEX_DELETED_ACTION_NAME , new NodeIndexDeletedMessage ( index , nodeId ) , EmptyTransportResponseHandler . INSTANCE_SAME ) ; if ( nodes . localNode ( ) . isDataNode ( ) = = false ) { logger . trace ( <str> ) ; return ; } threadPool . generic ( ) . execute ( new AbstractRunnable ( ) { @Override public void onFailure ( Throwable t ) { logger . warn ( <str> , t , index ) ; } @Override protected void doRun ( ) throws Exception { lockIndexAndAck ( index , nodes , nodeId , clusterState , indexSettings ) ; } } ) ; } private void lockIndexAndAck ( String index , DiscoveryNodes nodes , String nodeId , ClusterState clusterState , IndexSettings indexSettings ) throws IOException { try { indicesService . processPendingDeletes ( new Index ( index ) , indexSettings , new TimeValue ( <int> , TimeUnit . MINUTES ) ) ; transportService . sendRequest ( clusterState . nodes ( ) . masterNode ( ) , INDEX_STORE_DELETED_ACTION_NAME , new NodeIndexStoreDeletedMessage ( index , nodeId ) , EmptyTransportResponseHandler . INSTANCE_SAME ) ; } catch ( LockObtainFailedException exc ) { logger . warn ( <str> , index ) ; } catch ( InterruptedException e ) { logger . warn ( <str> , index ) ; } } public interface Listener { void onNodeIndexDeleted ( String index , String nodeId ) ; void onNodeIndexStoreDeleted ( String index , String nodeId ) ; } private class NodeIndexDeletedTransportHandler implements TransportRequestHandler < NodeIndexDeletedMessage > { @Override public void messageReceived ( NodeIndexDeletedMessage message , TransportChannel channel ) throws Exception { for ( Listener listener : listeners ) { listener . onNodeIndexDeleted ( message . index , message . nodeId ) ; } channel . sendResponse ( TransportResponse . Empty . INSTANCE ) ; } } private class NodeIndexStoreDeletedTransportHandler implements TransportRequestHandler < NodeIndexStoreDeletedMessage > { @Override public void messageReceived ( NodeIndexStoreDeletedMessage message , TransportChannel channel ) throws Exception { for ( Listener listener : listeners ) { listener . onNodeIndexStoreDeleted ( message . index , message . nodeId ) ; } channel . sendResponse ( TransportResponse . Empty . INSTANCE ) ; } } public static class NodeIndexDeletedMessage extends TransportRequest { String index ; String nodeId ; public NodeIndexDeletedMessage ( ) { } NodeIndexDeletedMessage ( String index , String nodeId ) { this . index = index ; this . nodeId = nodeId ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( index ) ; out . writeString ( nodeId ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; index = in . readString ( ) ; nodeId = in . readString ( ) ; } } public static class NodeIndexStoreDeletedMessage extends TransportRequest { String index ; String nodeId ; public NodeIndexStoreDeletedMessage ( ) { } NodeIndexStoreDeletedMessage ( String index , String nodeId ) { this . index = index ; this . nodeId = nodeId ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( index ) ; out . writeString ( nodeId ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; index = in . readString ( ) ; nodeId = in . readString ( ) ; } } } 

package org . elasticsearch . common . transport ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import java . io . IOException ; public class BoundTransportAddress implements Streamable { private TransportAddress [ ] boundAddresses ; private TransportAddress publishAddress ; BoundTransportAddress ( ) { } public BoundTransportAddress ( TransportAddress [ ] boundAddresses , TransportAddress publishAddress ) { if ( boundAddresses = = null | | boundAddresses . length < <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . boundAddresses = boundAddresses ; this . publishAddress = publishAddress ; } public TransportAddress [ ] boundAddresses ( ) { return boundAddresses ; } public TransportAddress publishAddress ( ) { return publishAddress ; } public static BoundTransportAddress readBoundTransportAddress ( StreamInput in ) throws IOException { BoundTransportAddress addr = new BoundTransportAddress ( ) ; addr . readFrom ( in ) ; return addr ; } @Override public void readFrom ( StreamInput in ) throws IOException { int boundAddressLength = in . readInt ( ) ; boundAddresses = new TransportAddress [ boundAddressLength ] ; for ( int i = <int> ; i < boundAddressLength ; i + + ) { boundAddresses [ i ] = TransportAddressSerializers . addressFromStream ( in ) ; } publishAddress = TransportAddressSerializers . addressFromStream ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeInt ( boundAddresses . length ) ; for ( TransportAddress address : boundAddresses ) { TransportAddressSerializers . addressToStream ( out , address ) ; } TransportAddressSerializers . addressToStream ( out , publishAddress ) ; } @Override public String toString ( ) { StringBuilder builder = new StringBuilder ( <str> ) ; builder . append ( publishAddress ) ; builder . append ( <str> ) ; boolean firstAdded = false ; for ( TransportAddress address : boundAddresses ) { if ( firstAdded ) { builder . append ( <str> ) ; } else { firstAdded = true ; } builder . append ( <str> ) . append ( address ) . append ( <str> ) ; } return builder . toString ( ) ; } } 

package org . junit . internal ; import java . lang . reflect . Array ; import java . util . Arrays ; import org . junit . Assert ; public abstract class ComparisonCriteria { public void arrayEquals ( String message , Object expecteds , Object actuals ) throws ArrayComparisonFailure { arrayEquals ( message , expecteds , actuals , true ) ; } private void arrayEquals ( String message , Object expecteds , Object actuals , boolean outer ) throws ArrayComparisonFailure { if ( expecteds = = actuals | | Arrays . deepEquals ( new Object [ ] { expecteds } , new Object [ ] { actuals } ) ) { return ; } String header = message = = null ? <str> : message + <str> ; String exceptionMessage = outer ? header : <str> ; int expectedsLength = assertArraysAreSameLength ( expecteds , actuals , exceptionMessage ) ; for ( int i = <int> ; i < expectedsLength ; i + + ) { Object expected = Array . get ( expecteds , i ) ; Object actual = Array . get ( actuals , i ) ; if ( isArray ( expected ) & & isArray ( actual ) ) { try { arrayEquals ( message , expected , actual , false ) ; } catch ( ArrayComparisonFailure e ) { e . addDimension ( i ) ; throw e ; } catch ( AssertionError e ) { throw new ArrayComparisonFailure ( header , e , i ) ; } } else { try { assertElementsEqual ( expected , actual ) ; } catch ( AssertionError e ) { throw new ArrayComparisonFailure ( header , e , i ) ; } } } } private boolean isArray ( Object expected ) { return expected ! = null & & expected . getClass ( ) . isArray ( ) ; } private int assertArraysAreSameLength ( Object expecteds , Object actuals , String header ) { if ( expecteds = = null ) { Assert . fail ( header + <str> ) ; } if ( actuals = = null ) { Assert . fail ( header + <str> ) ; } int actualsLength = Array . getLength ( actuals ) ; int expectedsLength = Array . getLength ( expecteds ) ; if ( actualsLength ! = expectedsLength ) { Assert . fail ( header + <str> + expectedsLength + <str> + actualsLength ) ; } return expectedsLength ; } protected abstract void assertElementsEqual ( Object expected , Object actual ) ; } 

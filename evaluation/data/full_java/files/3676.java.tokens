package org . eclipse . debug . internal . core ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchDelegate ; import org . eclipse . debug . core . model . ILaunchConfigurationDelegate ; import com . ibm . icu . text . MessageFormat ; public final class LaunchDelegate implements ILaunchDelegate { private IConfigurationElement fElement = null ; private ILaunchConfigurationDelegate fDelegate = null ; private List < Set < String > > fLaunchModes = null ; private String fType = null ; private HashMap < Set < String > , String > fPerspectiveIds = null ; public LaunchDelegate ( IConfigurationElement element ) { fElement = element ; } @Override public ILaunchConfigurationDelegate getDelegate ( ) throws CoreException { if ( fDelegate = = null ) { Object obj = fElement . createExecutableExtension ( IConfigurationElementConstants . DELEGATE ) ; if ( obj instanceof ILaunchConfigurationDelegate ) { fDelegate = ( ILaunchConfigurationDelegate ) obj ; } else { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , MessageFormat . format ( DebugCoreMessages . LaunchDelegate_3 , new Object [ ] { getId ( ) } ) , null ) ) ; } } return fDelegate ; } @Override public String getId ( ) { return fElement . getAttribute ( IConfigurationElementConstants . ID ) ; } public String getLaunchConfigurationTypeId ( ) { if ( fType = = null ) { fType = fElement . getAttribute ( IConfigurationElementConstants . TYPE ) ; if ( fType = = null ) { fType = fElement . getAttribute ( IConfigurationElementConstants . ID ) ; } } return fType ; } private Set < String > parseModes ( IConfigurationElement element ) { HashSet < String > set = new HashSet < String > ( ) ; String modes = element . getAttribute ( IConfigurationElementConstants . MODES ) ; if ( modes ! = null ) { String [ ] strings = modes . split ( <str> ) ; for ( int i = <int> ; i < strings . length ; i + + ) { set . add ( strings [ i ] . trim ( ) ) ; } } return set ; } @Override public List < Set < String > > getModes ( ) { if ( fLaunchModes = = null ) { fLaunchModes = new ArrayList < Set < String > > ( ) ; fPerspectiveIds = new HashMap < Set < String > , String > ( ) ; IConfigurationElement [ ] children = fElement . getChildren ( IConfigurationElementConstants . MODE_COMBINATION ) ; Set < String > modeset = null ; for ( int i = <int> ; i < children . length ; i + + ) { modeset = parseModes ( children [ i ] ) ; fLaunchModes . add ( modeset ) ; fPerspectiveIds . put ( modeset , children [ i ] . getAttribute ( IConfigurationElementConstants . PERSPECTIVE ) ) ; } modeset = null ; String modes = fElement . getAttribute ( IConfigurationElementConstants . MODES ) ; if ( modes ! = null ) { String [ ] strings = modes . split ( <str> ) ; for ( int i = <int> ; i < strings . length ; i + + ) { modeset = new HashSet < String > ( ) ; modeset . add ( strings [ i ] . trim ( ) ) ; fLaunchModes . add ( modeset ) ; } } } return fLaunchModes ; } @Override public String getName ( ) { String name = fElement . getAttribute ( IConfigurationElementConstants . DELEGATE_NAME ) ; if ( name = = null ) { name = fElement . getAttribute ( IConfigurationElementConstants . NAME ) ; if ( name = = null ) { name = getContributorName ( ) ; } name = name . trim ( ) ; if ( Character . isUpperCase ( name . charAt ( <int> ) ) ) { name = MessageFormat . format ( DebugCoreMessages . LaunchDelegate_1 , new Object [ ] { name } ) ; } else { name = MessageFormat . format ( DebugCoreMessages . LaunchDelegate_2 , new Object [ ] { name } ) ; } } return name ; } @Override public String getContributorName ( ) { return fElement . getContributor ( ) . getName ( ) ; } public String getSourceLocatorId ( ) { return fElement . getAttribute ( IConfigurationElementConstants . SOURCE_LOCATOR ) ; } public String getSourcePathComputerId ( ) { return fElement . getAttribute ( IConfigurationElementConstants . SOURCE_PATH_COMPUTER ) ; } @Override public String getDescription ( ) { String desc = fElement . getAttribute ( IConfigurationElementConstants . DELEGATE_DESCRIPTION ) ; if ( desc = = null ) { return DebugCoreMessages . LaunchDelegate_0 ; } return desc ; } @Override public String getPluginIdentifier ( ) { return fElement . getContributor ( ) . getName ( ) ; } @Override public boolean equals ( Object obj ) { if ( obj = = null ) { return false ; } return obj instanceof ILaunchDelegate & & getId ( ) ! = null & & getId ( ) . equals ( ( ( ILaunchDelegate ) obj ) . getId ( ) ) ; } @Override public int hashCode ( ) { String id = getId ( ) ; return id = = null ? <int> : id . hashCode ( ) ; } @Override public String getPerspectiveId ( Set < String > modes ) { if ( fPerspectiveIds = = null ) { getModes ( ) ; } return fPerspectiveIds . get ( modes ) ; } } 

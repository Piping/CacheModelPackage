package org . elasticsearch . cluster . settings ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . common . Booleans ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . unit . TimeValue ; import static org . elasticsearch . common . unit . ByteSizeValue . parseBytesSizeValue ; import static org . elasticsearch . common . unit . MemorySizeValue . parseBytesSizeValueOrHeapRatio ; public interface Validator { String validate ( String setting , String value , ClusterState clusterState ) ; Validator EMPTY = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { return null ; } } ; Validator TIME = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { if ( value = = null ) { throw new NullPointerException ( <str> ) ; } try { TimeValue . parseTimeValue ( value , null , setting ) ; } catch ( ElasticsearchParseException ex ) { return ex . getMessage ( ) ; } return null ; } } ; Validator TIMEOUT = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { if ( value = = null ) { throw new NullPointerException ( <str> ) ; } TimeValue timeValue = TimeValue . parseTimeValue ( value , null , setting ) ; assert timeValue ! = null ; if ( timeValue . millis ( ) < <int> & & timeValue . millis ( ) ! = - <int> ) { return <str> + value + <str> ; } } catch ( ElasticsearchParseException ex ) { return ex . getMessage ( ) ; } return null ; } } ; Validator TIME_NON_NEGATIVE = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { if ( value = = null ) { throw new NullPointerException ( <str> ) ; } TimeValue timeValue = TimeValue . parseTimeValue ( value , null , setting ) ; assert timeValue ! = null ; if ( timeValue . millis ( ) < <int> ) { return <str> + value + <str> ; } } catch ( ElasticsearchParseException ex ) { return ex . getMessage ( ) ; } return null ; } } ; Validator FLOAT = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { Float . parseFloat ( value ) ; } catch ( NumberFormatException ex ) { return <str> + value + <str> ; } return null ; } } ; Validator NON_NEGATIVE_FLOAT = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { if ( Float . parseFloat ( value ) < <float> ) { return <str> + setting + <str> ; } } catch ( NumberFormatException ex ) { return <str> + value + <str> ; } return null ; } } ; Validator DOUBLE = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { Double . parseDouble ( value ) ; } catch ( NumberFormatException ex ) { return <str> + value + <str> ; } return null ; } } ; Validator NON_NEGATIVE_DOUBLE = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { if ( Double . parseDouble ( value ) < <float> ) { return <str> + setting + <str> ; } } catch ( NumberFormatException ex ) { return <str> + value + <str> ; } return null ; } } ; Validator DOUBLE_GTE_2 = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { if ( Double . parseDouble ( value ) < <float> ) { return <str> + setting + <str> ; } } catch ( NumberFormatException ex ) { return <str> + value + <str> ; } return null ; } } ; Validator INTEGER = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { Integer . parseInt ( value ) ; } catch ( NumberFormatException ex ) { return <str> + value + <str> ; } return null ; } } ; Validator POSITIVE_INTEGER = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { if ( Integer . parseInt ( value ) < = <int> ) { return <str> + setting + <str> ; } } catch ( NumberFormatException ex ) { return <str> + value + <str> ; } return null ; } } ; Validator NON_NEGATIVE_INTEGER = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { if ( Integer . parseInt ( value ) < <int> ) { return <str> + setting + <str> ; } } catch ( NumberFormatException ex ) { return <str> + value + <str> ; } return null ; } } ; Validator INTEGER_GTE_2 = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { if ( Integer . parseInt ( value ) < <int> ) { return <str> + setting + <str> ; } } catch ( NumberFormatException ex ) { return <str> + value + <str> ; } return null ; } } ; Validator BYTES_SIZE = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { parseBytesSizeValue ( value , setting ) ; } catch ( ElasticsearchParseException ex ) { return ex . getMessage ( ) ; } return null ; } } ; Validator POSITIVE_BYTES_SIZE = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState state ) { try { ByteSizeValue byteSizeValue = parseBytesSizeValue ( value , setting ) ; if ( byteSizeValue . getBytes ( ) < = <int> ) { return setting + <str> ; } } catch ( ElasticsearchParseException ex ) { return ex . getMessage ( ) ; } return null ; } } ; Validator PERCENTAGE = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { if ( value = = null ) { return <str> + setting + <str> ; } if ( ! value . endsWith ( <str> ) ) { return <str> + value + <str> + setting + <str> ; } final double asDouble = Double . parseDouble ( value . substring ( <int> , value . length ( ) - <int> ) ) ; if ( asDouble < <float> | | asDouble > <float> ) { return <str> + value + <str> + setting + <str> ; } } catch ( NumberFormatException ex ) { return ex . getMessage ( ) ; } return null ; } } ; Validator BYTES_SIZE_OR_PERCENTAGE = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { String byteSize = BYTES_SIZE . validate ( setting , value , clusterState ) ; if ( byteSize ! = null ) { String percentage = PERCENTAGE . validate ( setting , value , clusterState ) ; if ( percentage = = null ) { return null ; } return percentage + <str> ; } return null ; } } ; Validator MEMORY_SIZE = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { try { parseBytesSizeValueOrHeapRatio ( value , setting ) ; } catch ( ElasticsearchParseException ex ) { return ex . getMessage ( ) ; } return null ; } } ; public static final Validator BOOLEAN = new Validator ( ) { @Override public String validate ( String setting , String value , ClusterState clusterState ) { if ( value ! = null & & ( Booleans . isExplicitFalse ( value ) | | Booleans . isExplicitTrue ( value ) ) ) { return null ; } return <str> + value + <str> ; } } ; } 

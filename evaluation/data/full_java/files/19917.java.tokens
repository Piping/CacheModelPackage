package io . netty . example . udt . echo . message ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . ChannelOption ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . udt . UdtChannel ; import io . netty . channel . udt . nio . NioUdtProvider ; import io . netty . handler . logging . LogLevel ; import io . netty . handler . logging . LoggingHandler ; import io . netty . util . concurrent . DefaultThreadFactory ; import java . util . concurrent . ThreadFactory ; public final class MsgEchoServer { static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; public static void main ( String [ ] args ) throws Exception { final ThreadFactory acceptFactory = new DefaultThreadFactory ( <str> ) ; final ThreadFactory connectFactory = new DefaultThreadFactory ( <str> ) ; final NioEventLoopGroup acceptGroup = new NioEventLoopGroup ( <int> , acceptFactory , NioUdtProvider . MESSAGE_PROVIDER ) ; final NioEventLoopGroup connectGroup = new NioEventLoopGroup ( <int> , connectFactory , NioUdtProvider . MESSAGE_PROVIDER ) ; try { final ServerBootstrap boot = new ServerBootstrap ( ) ; boot . group ( acceptGroup , connectGroup ) . channelFactory ( NioUdtProvider . MESSAGE_ACCEPTOR ) . option ( ChannelOption . SO_BACKLOG , <int> ) . handler ( new LoggingHandler ( LogLevel . INFO ) ) . childHandler ( new ChannelInitializer < UdtChannel > ( ) { @Override public void initChannel ( final UdtChannel ch ) throws Exception { ch . pipeline ( ) . addLast ( new LoggingHandler ( LogLevel . INFO ) , new MsgEchoServerHandler ( ) ) ; } } ) ; final ChannelFuture future = boot . bind ( PORT ) . sync ( ) ; future . channel ( ) . closeFuture ( ) . sync ( ) ; } finally { acceptGroup . shutdownGracefully ( ) ; connectGroup . shutdownGracefully ( ) ; } } } 

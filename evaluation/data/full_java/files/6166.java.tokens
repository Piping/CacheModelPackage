package org . elasticsearch . discovery ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . concurrent . ConcurrentCollections ; import java . util . Set ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; public class BlockingClusterStatePublishResponseHandler { private final CountDownLatch latch ; private final Set < DiscoveryNode > pendingNodes ; public BlockingClusterStatePublishResponseHandler ( Set < DiscoveryNode > publishingToNodes ) { this . pendingNodes = ConcurrentCollections . newConcurrentSet ( ) ; this . pendingNodes . addAll ( publishingToNodes ) ; this . latch = new CountDownLatch ( pendingNodes . size ( ) ) ; } public void onResponse ( DiscoveryNode node ) { boolean found = pendingNodes . remove ( node ) ; assert found : <str> + node + <str> ; latch . countDown ( ) ; } public void onFailure ( DiscoveryNode node , Throwable t ) { boolean found = pendingNodes . remove ( node ) ; assert found : <str> + node + <str> ; latch . countDown ( ) ; } public boolean awaitAllNodes ( TimeValue timeout ) throws InterruptedException { boolean success = latch . await ( timeout . millis ( ) , TimeUnit . MILLISECONDS ) ; assert ! success | | pendingNodes . isEmpty ( ) : <str> ; return success ; } public DiscoveryNode [ ] pendingNodes ( ) { return pendingNodes . toArray ( new DiscoveryNode [ <int> ] ) ; } } 

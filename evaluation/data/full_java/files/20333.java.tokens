package io . netty . channel ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufInputStream ; import io . netty . buffer . ByteBufOutputStream ; import io . netty . buffer . Unpooled ; import org . junit . Test ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import static org . hamcrest . CoreMatchers . * ; import static org . junit . Assert . * ; @SuppressWarnings ( <str> ) public class DefaultChannelIdTest { @Test public void testShortText ( ) { String text = DefaultChannelId . newInstance ( ) . asShortText ( ) ; assertTrue ( text . matches ( <str> ) ) ; } @Test public void testLongText ( ) { String text = DefaultChannelId . newInstance ( ) . asLongText ( ) ; assertTrue ( text . matches ( <str> ) ) ; } @Test public void testIdempotentMachineId ( ) { String a = DefaultChannelId . newInstance ( ) . asLongText ( ) . substring ( <int> , <int> ) ; String b = DefaultChannelId . newInstance ( ) . asLongText ( ) . substring ( <int> , <int> ) ; assertThat ( a , is ( b ) ) ; } @Test public void testIdempotentProcessId ( ) { String a = DefaultChannelId . newInstance ( ) . asLongText ( ) . substring ( <int> , <int> ) ; String b = DefaultChannelId . newInstance ( ) . asLongText ( ) . substring ( <int> , <int> ) ; assertThat ( a , is ( b ) ) ; } @Test public void testSerialization ( ) throws Exception { ChannelId a = DefaultChannelId . newInstance ( ) ; ChannelId b ; ByteBuf buf = Unpooled . buffer ( ) ; ObjectOutputStream out = new ObjectOutputStream ( new ByteBufOutputStream ( buf ) ) ; out . writeObject ( a ) ; out . flush ( ) ; ObjectInputStream in = new ObjectInputStream ( new ByteBufInputStream ( buf ) ) ; b = ( ChannelId ) in . readObject ( ) ; assertThat ( a , is ( b ) ) ; assertThat ( a , is ( not ( sameInstance ( b ) ) ) ) ; assertThat ( a . asLongText ( ) , is ( b . asLongText ( ) ) ) ; } } 

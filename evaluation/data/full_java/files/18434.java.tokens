package com . badlogic . gdx . utils ; import static org . junit . Assert . * ; import org . junit . Before ; import org . junit . Test ; public class PooledLinkedListTest { private PooledLinkedList < Integer > list ; @Before public void setUp ( ) { list = new PooledLinkedList < Integer > ( <int> ) ; list . add ( <int> ) ; list . add ( <int> ) ; list . add ( <int> ) ; } @Test public void size ( ) { assertEquals ( <int> , list . size ( ) ) ; list . iter ( ) ; list . next ( ) ; list . remove ( ) ; assertEquals ( <int> , list . size ( ) ) ; } @Test public void iteration ( ) { list . iter ( ) ; assertEquals ( Integer . valueOf ( <int> ) , list . next ( ) ) ; assertEquals ( Integer . valueOf ( <int> ) , list . next ( ) ) ; assertEquals ( Integer . valueOf ( <int> ) , list . next ( ) ) ; assertNull ( list . next ( ) ) ; } @Test public void reverseIteration ( ) { list . iterReverse ( ) ; assertEquals ( Integer . valueOf ( <int> ) , list . previous ( ) ) ; assertEquals ( Integer . valueOf ( <int> ) , list . previous ( ) ) ; assertEquals ( Integer . valueOf ( <int> ) , list . previous ( ) ) ; assertNull ( list . previous ( ) ) ; } @Test public void remove ( ) { list . iter ( ) ; list . next ( ) ; list . remove ( ) ; list . next ( ) ; list . next ( ) ; list . remove ( ) ; list . iter ( ) ; assertEquals ( Integer . valueOf ( <int> ) , list . next ( ) ) ; assertNull ( list . next ( ) ) ; } @Test public void clear ( ) { list . clear ( ) ; assertEquals ( <int> , list . size ( ) ) ; list . iter ( ) ; assertNull ( list . next ( ) ) ; } } 

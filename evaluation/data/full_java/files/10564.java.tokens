package com . google . common . math ; import static com . google . common . math . StatsTesting . ALLOWED_ERROR ; import static com . google . common . math . StatsTesting . ALL_MANY_VALUES ; import static com . google . common . math . StatsTesting . CONSTANT_VALUES_PAIRED_STATS ; import static com . google . common . math . StatsTesting . DUPLICATE_MANY_VALUES_PAIRED_STATS ; import static com . google . common . math . StatsTesting . EMPTY_PAIRED_STATS ; import static com . google . common . math . StatsTesting . EMPTY_STATS_ITERABLE ; import static com . google . common . math . StatsTesting . HORIZONTAL_VALUES_PAIRED_STATS ; import static com . google . common . math . StatsTesting . MANY_VALUES ; import static com . google . common . math . StatsTesting . MANY_VALUES_COUNT ; import static com . google . common . math . StatsTesting . MANY_VALUES_PAIRED_STATS ; import static com . google . common . math . StatsTesting . MANY_VALUES_STATS_ITERABLE ; import static com . google . common . math . StatsTesting . MANY_VALUES_STATS_VARARGS ; import static com . google . common . math . StatsTesting . MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS ; import static com . google . common . math . StatsTesting . ONE_VALUE_PAIRED_STATS ; import static com . google . common . math . StatsTesting . ONE_VALUE_STATS ; import static com . google . common . math . StatsTesting . OTHER_MANY_VALUES ; import static com . google . common . math . StatsTesting . OTHER_MANY_VALUES_STATS ; import static com . google . common . math . StatsTesting . OTHER_ONE_VALUE_STATS ; import static com . google . common . math . StatsTesting . OTHER_TWO_VALUES_STATS ; import static com . google . common . math . StatsTesting . TWO_VALUES_PAIRED_STATS ; import static com . google . common . math . StatsTesting . TWO_VALUES_STATS ; import static com . google . common . math . StatsTesting . TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS ; import static com . google . common . math . StatsTesting . VERTICAL_VALUES_PAIRED_STATS ; import static com . google . common . math . StatsTesting . assertDiagonalLinearTransformation ; import static com . google . common . math . StatsTesting . assertHorizontalLinearTransformation ; import static com . google . common . math . StatsTesting . assertLinearTransformationNaN ; import static com . google . common . math . StatsTesting . assertStatsApproxEqual ; import static com . google . common . math . StatsTesting . assertVerticalLinearTransformation ; import static com . google . common . math . StatsTesting . createPairedStatsOf ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . collect . ImmutableList ; import com . google . common . math . StatsTesting . ManyValues ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; public class PairedStatsTest extends TestCase { public void testCount ( ) { assertThat ( EMPTY_PAIRED_STATS . count ( ) ) . isEqualTo ( <int> ) ; assertThat ( ONE_VALUE_PAIRED_STATS . count ( ) ) . isEqualTo ( <int> ) ; assertThat ( TWO_VALUES_PAIRED_STATS . count ( ) ) . isEqualTo ( <int> ) ; assertThat ( MANY_VALUES_PAIRED_STATS . count ( ) ) . isEqualTo ( MANY_VALUES_COUNT ) ; } public void testXStats ( ) { assertStatsApproxEqual ( EMPTY_STATS_ITERABLE , EMPTY_PAIRED_STATS . xStats ( ) ) ; assertStatsApproxEqual ( ONE_VALUE_STATS , ONE_VALUE_PAIRED_STATS . xStats ( ) ) ; assertStatsApproxEqual ( TWO_VALUES_STATS , TWO_VALUES_PAIRED_STATS . xStats ( ) ) ; assertStatsApproxEqual ( MANY_VALUES_STATS_ITERABLE , MANY_VALUES_PAIRED_STATS . xStats ( ) ) ; } public void testYStats ( ) { assertStatsApproxEqual ( EMPTY_STATS_ITERABLE , EMPTY_PAIRED_STATS . yStats ( ) ) ; assertStatsApproxEqual ( OTHER_ONE_VALUE_STATS , ONE_VALUE_PAIRED_STATS . yStats ( ) ) ; assertStatsApproxEqual ( OTHER_TWO_VALUES_STATS , TWO_VALUES_PAIRED_STATS . yStats ( ) ) ; assertStatsApproxEqual ( OTHER_MANY_VALUES_STATS , MANY_VALUES_PAIRED_STATS . yStats ( ) ) ; } public void testPopulationCovariance ( ) { try { EMPTY_PAIRED_STATS . populationCovariance ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } assertThat ( ONE_VALUE_PAIRED_STATS . populationCovariance ( ) ) . isWithin ( <float> ) . of ( <float> ) ; assertThat ( createSingleStats ( Double . POSITIVE_INFINITY , <float> ) . populationCovariance ( ) ) . isNaN ( ) ; assertThat ( createSingleStats ( Double . NEGATIVE_INFINITY , <float> ) . populationCovariance ( ) ) . isNaN ( ) ; assertThat ( createSingleStats ( Double . NaN , <float> ) . populationCovariance ( ) ) . isNaN ( ) ; assertThat ( TWO_VALUES_PAIRED_STATS . populationCovariance ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / <int> ) ; for ( ManyValues values : ALL_MANY_VALUES ) { PairedStats stats = createPairedStatsOf ( values . asIterable ( ) , OTHER_MANY_VALUES ) ; double populationCovariance = stats . populationCovariance ( ) ; if ( values . hasAnyNonFinite ( ) ) { assertThat ( populationCovariance ) . named ( <str> + values ) . isNaN ( ) ; } else { assertThat ( populationCovariance ) . named ( <str> + values ) . isWithin ( ALLOWED_ERROR ) . of ( MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT ) ; } } assertThat ( HORIZONTAL_VALUES_PAIRED_STATS . populationCovariance ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( <float> ) ; assertThat ( VERTICAL_VALUES_PAIRED_STATS . populationCovariance ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( <float> ) ; assertThat ( CONSTANT_VALUES_PAIRED_STATS . populationCovariance ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( <float> ) ; } public void testSampleCovariance ( ) { try { EMPTY_PAIRED_STATS . sampleCovariance ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } try { ONE_VALUE_PAIRED_STATS . sampleCovariance ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } assertThat ( TWO_VALUES_PAIRED_STATS . sampleCovariance ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS ) ; assertThat ( MANY_VALUES_PAIRED_STATS . sampleCovariance ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / ( MANY_VALUES_COUNT - <int> ) ) ; assertThat ( HORIZONTAL_VALUES_PAIRED_STATS . sampleCovariance ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( <float> ) ; assertThat ( VERTICAL_VALUES_PAIRED_STATS . sampleCovariance ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( <float> ) ; assertThat ( CONSTANT_VALUES_PAIRED_STATS . sampleCovariance ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( <float> ) ; } public void testPearsonsCorrelationCoefficient ( ) { try { EMPTY_PAIRED_STATS . pearsonsCorrelationCoefficient ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } try { ONE_VALUE_PAIRED_STATS . pearsonsCorrelationCoefficient ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } try { createSingleStats ( Double . POSITIVE_INFINITY , <float> ) . pearsonsCorrelationCoefficient ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } assertThat ( TWO_VALUES_PAIRED_STATS . pearsonsCorrelationCoefficient ( ) ) . isWithin ( ALLOWED_ERROR ) . of ( TWO_VALUES_PAIRED_STATS . populationCovariance ( ) / ( TWO_VALUES_PAIRED_STATS . xStats ( ) . populationStandardDeviation ( ) * TWO_VALUES_PAIRED_STATS . yStats ( ) . populationStandardDeviation ( ) ) ) ; for ( ManyValues values : ALL_MANY_VALUES ) { PairedStats stats = createPairedStatsOf ( MANY_VALUES , values . asIterable ( ) ) ; double pearsonsCorrelationCoefficient = stats . pearsonsCorrelationCoefficient ( ) ; if ( values . hasAnyNonFinite ( ) ) { assertThat ( pearsonsCorrelationCoefficient ) . named ( <str> + values ) . isNaN ( ) ; } else { assertThat ( pearsonsCorrelationCoefficient ) . named ( <str> + values ) . isWithin ( ALLOWED_ERROR ) . of ( stats . populationCovariance ( ) / ( stats . xStats ( ) . populationStandardDeviation ( ) * stats . yStats ( ) . populationStandardDeviation ( ) ) ) ; } } try { HORIZONTAL_VALUES_PAIRED_STATS . pearsonsCorrelationCoefficient ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } try { VERTICAL_VALUES_PAIRED_STATS . pearsonsCorrelationCoefficient ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } try { CONSTANT_VALUES_PAIRED_STATS . pearsonsCorrelationCoefficient ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } } public void testLeastSquaresFit ( ) { try { EMPTY_PAIRED_STATS . leastSquaresFit ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } try { ONE_VALUE_PAIRED_STATS . leastSquaresFit ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } try { createSingleStats ( Double . POSITIVE_INFINITY , <float> ) . leastSquaresFit ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } assertDiagonalLinearTransformation ( TWO_VALUES_PAIRED_STATS . leastSquaresFit ( ) , TWO_VALUES_PAIRED_STATS . xStats ( ) . mean ( ) , TWO_VALUES_PAIRED_STATS . yStats ( ) . mean ( ) , TWO_VALUES_PAIRED_STATS . xStats ( ) . populationVariance ( ) , TWO_VALUES_PAIRED_STATS . populationCovariance ( ) ) ; for ( ManyValues values : ALL_MANY_VALUES ) { PairedStats stats = createPairedStatsOf ( values . asIterable ( ) , OTHER_MANY_VALUES ) ; LinearTransformation fit = stats . leastSquaresFit ( ) ; if ( values . hasAnyNonFinite ( ) ) { assertLinearTransformationNaN ( fit ) ; } else { assertDiagonalLinearTransformation ( fit , stats . xStats ( ) . mean ( ) , stats . yStats ( ) . mean ( ) , stats . xStats ( ) . populationVariance ( ) , stats . populationCovariance ( ) ) ; } } assertHorizontalLinearTransformation ( HORIZONTAL_VALUES_PAIRED_STATS . leastSquaresFit ( ) , HORIZONTAL_VALUES_PAIRED_STATS . yStats ( ) . mean ( ) ) ; assertVerticalLinearTransformation ( VERTICAL_VALUES_PAIRED_STATS . leastSquaresFit ( ) , VERTICAL_VALUES_PAIRED_STATS . xStats ( ) . mean ( ) ) ; try { CONSTANT_VALUES_PAIRED_STATS . leastSquaresFit ( ) ; fail ( <str> ) ; } catch ( IllegalStateException expected ) { } } public void testEqualsAndHashCode ( ) { new EqualsTester ( ) . addEqualityGroup ( MANY_VALUES_PAIRED_STATS , DUPLICATE_MANY_VALUES_PAIRED_STATS , SerializableTester . reserialize ( MANY_VALUES_PAIRED_STATS ) ) . addEqualityGroup ( new PairedStats ( MANY_VALUES_STATS_ITERABLE , OTHER_MANY_VALUES_STATS , <float> ) , new PairedStats ( MANY_VALUES_STATS_VARARGS , OTHER_MANY_VALUES_STATS , <float> ) ) . addEqualityGroup ( new PairedStats ( OTHER_MANY_VALUES_STATS , MANY_VALUES_STATS_ITERABLE , <float> ) ) . addEqualityGroup ( new PairedStats ( MANY_VALUES_STATS_ITERABLE , MANY_VALUES_STATS_ITERABLE , <float> ) ) . addEqualityGroup ( new PairedStats ( TWO_VALUES_STATS , MANY_VALUES_STATS_ITERABLE , <float> ) ) . addEqualityGroup ( new PairedStats ( MANY_VALUES_STATS_ITERABLE , ONE_VALUE_STATS , <float> ) ) . addEqualityGroup ( new PairedStats ( MANY_VALUES_STATS_ITERABLE , MANY_VALUES_STATS_ITERABLE , <float> ) ) . testEquals ( ) ; } public void testSerializable ( ) { SerializableTester . reserializeAndAssert ( MANY_VALUES_PAIRED_STATS ) ; } private PairedStats createSingleStats ( double x , double y ) { return createPairedStatsOf ( ImmutableList . of ( x ) , ImmutableList . of ( y ) ) ; } } 

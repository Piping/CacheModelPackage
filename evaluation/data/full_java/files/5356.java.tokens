package org . elasticsearch . action . search ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . CompositeIndicesRequest ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import static org . elasticsearch . action . ValidateActions . addValidationError ; public class MultiSearchRequest extends ActionRequest < MultiSearchRequest > implements CompositeIndicesRequest { private List < SearchRequest > requests = new ArrayList < > ( ) ; private IndicesOptions indicesOptions = IndicesOptions . strictExpandOpenAndForbidClosed ( ) ; public MultiSearchRequest add ( SearchRequestBuilder request ) { requests . add ( request . request ( ) ) ; return this ; } public MultiSearchRequest add ( SearchRequest request ) { requests . add ( request ) ; return this ; } public List < SearchRequest > requests ( ) { return this . requests ; } @Override public List < ? extends IndicesRequest > subRequests ( ) { return this . requests ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( requests . isEmpty ( ) ) { validationException = addValidationError ( <str> , validationException ) ; } for ( int i = <int> ; i < requests . size ( ) ; i + + ) { ActionRequestValidationException ex = requests . get ( i ) . validate ( ) ; if ( ex ! = null ) { if ( validationException = = null ) { validationException = new ActionRequestValidationException ( ) ; } validationException . addValidationErrors ( ex . validationErrors ( ) ) ; } } return validationException ; } public IndicesOptions indicesOptions ( ) { return indicesOptions ; } public MultiSearchRequest indicesOptions ( IndicesOptions indicesOptions ) { this . indicesOptions = indicesOptions ; return this ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; int size = in . readVInt ( ) ; for ( int i = <int> ; i < size ; i + + ) { SearchRequest request = new SearchRequest ( ) ; request . readFrom ( in ) ; requests . add ( request ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( requests . size ( ) ) ; for ( SearchRequest request : requests ) { request . writeTo ( out ) ; } } } 

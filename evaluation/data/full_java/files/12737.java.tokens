package org . gradle . api . internal . artifacts . query ; import org . gradle . api . artifacts . dsl . RepositoryHandler ; import org . gradle . api . artifacts . query . ArtifactResolutionQuery ; import org . gradle . api . internal . artifacts . GlobalDependencyResolutionRules ; import org . gradle . api . internal . artifacts . configurations . ConfigurationContainerInternal ; import org . gradle . api . internal . artifacts . ivyservice . CacheLockingManager ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . ResolveIvyFactory ; import org . gradle . api . internal . component . ComponentTypeRegistry ; public class DefaultArtifactResolutionQueryFactory implements ArtifactResolutionQueryFactory { private final ConfigurationContainerInternal configurationContainer ; private final RepositoryHandler repositoryHandler ; private final ResolveIvyFactory ivyFactory ; private final GlobalDependencyResolutionRules metadataHandler ; private final CacheLockingManager cacheLockingManager ; private final ComponentTypeRegistry componentTypeRegistry ; public DefaultArtifactResolutionQueryFactory ( ConfigurationContainerInternal configurationContainer , RepositoryHandler repositoryHandler , ResolveIvyFactory ivyFactory , GlobalDependencyResolutionRules metadataHandler , CacheLockingManager cacheLockingManager , ComponentTypeRegistry componentTypeRegistry ) { this . configurationContainer = configurationContainer ; this . repositoryHandler = repositoryHandler ; this . ivyFactory = ivyFactory ; this . metadataHandler = metadataHandler ; this . cacheLockingManager = cacheLockingManager ; this . componentTypeRegistry = componentTypeRegistry ; } public ArtifactResolutionQuery createArtifactResolutionQuery ( ) { return new DefaultArtifactResolutionQuery ( configurationContainer , repositoryHandler , ivyFactory , metadataHandler , cacheLockingManager , componentTypeRegistry ) ; } } 

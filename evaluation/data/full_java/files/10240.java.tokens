package com . google . common . base ; class BenchmarkHelpers { private static final String WHITESPACE_CHARACTERS = <str> + <str> + <str> ; private static final String ASCII_CHARACTERS ; static { int spaceInAscii = <int> ; int sevenBitAsciiMax = <int> ; StringBuilder sb = new StringBuilder ( sevenBitAsciiMax - spaceInAscii ) ; for ( int ch = spaceInAscii ; ch < sevenBitAsciiMax ; ch + + ) { sb . append ( ( char ) ch ) ; } ASCII_CHARACTERS = sb . toString ( ) ; } private static final String ALL_DIGITS ; static { StringBuilder sb = new StringBuilder ( ) ; String zeros = <str> + <str> + <str> ; for ( char base : zeros . toCharArray ( ) ) { for ( int offset = <int> ; offset < <int> ; offset + + ) { sb . append ( ( char ) ( base + offset ) ) ; } } ALL_DIGITS = sb . toString ( ) ; } public enum SampleMatcherConfig { WHITESPACE ( CharMatcher . WHITESPACE , WHITESPACE_CHARACTERS ) , HASH ( CharMatcher . is ( <str> ) , <str> ) , ASCII ( CharMatcher . ASCII , ASCII_CHARACTERS ) , WESTERN_DIGIT ( <str> ) , ALL_DIGIT ( CharMatcher . DIGIT , ALL_DIGITS ) , OPS_5 ( <str> ) , HEX_16 ( CharMatcher . inRange ( <str> , <str> ) . or ( CharMatcher . inRange ( <str> , <str> ) ) , <str> ) , HEX_22 ( CharMatcher . inRange ( <str> , <str> ) . or ( CharMatcher . inRange ( <str> , <str> ) ) . or ( CharMatcher . inRange ( <str> , <str> ) ) , <str> ) , GERMAN_59 ( CharMatcher . inRange ( <str> , <str> ) . or ( CharMatcher . inRange ( <str> , <str> ) ) . or ( CharMatcher . anyOf ( <str> ) ) , <str> ) ; public final CharMatcher matcher ; public final String matchingChars ; SampleMatcherConfig ( String matchingChars ) { this ( CharMatcher . anyOf ( matchingChars ) , matchingChars ) ; } SampleMatcherConfig ( CharMatcher matcher , String matchingChars ) { this . matcher = matcher ; this . matchingChars = matchingChars ; } } } 

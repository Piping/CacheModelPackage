package org . gradle . model . internal . registry ; import org . gradle . api . Action ; import org . gradle . model . InvalidModelRuleException ; import org . gradle . model . ModelRuleBindingException ; import org . gradle . model . internal . core . ModelNode ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . report . IncompatibleTypeReferenceReporter ; class PathBinderCreationListener extends ModelBinding { private final Action < ModelBinding > bindAction ; public PathBinderCreationListener ( ModelRuleDescriptor descriptor , BindingPredicate predicate , boolean writable , Action < ModelBinding > bindAction ) { super ( descriptor , predicate , writable ) ; this . bindAction = bindAction ; } @Override public boolean canBindInState ( ModelNode . State state ) { return predicate . getReference ( ) . isUntyped ( ) | | state . isAtLeast ( ModelNode . State . Discovered ) ; } public void doOnBind ( ModelNodeInternal node ) { if ( predicate . matches ( node ) ) { boundTo = node ; bindAction . execute ( this ) ; } else { throw new InvalidModelRuleException ( referrer , new ModelRuleBindingException ( IncompatibleTypeReferenceReporter . of ( node , predicate . getReference ( ) . getType ( ) , predicate . getReference ( ) . getDescription ( ) , writable ) . asString ( ) ) ) ; } } } 

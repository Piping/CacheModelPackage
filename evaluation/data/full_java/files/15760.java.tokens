package org . gradle . api . internal . tasks . testing . junit . report ; import org . gradle . internal . ErroringAction ; import org . gradle . internal . html . SimpleHtmlWriter ; import java . io . IOException ; class OverviewPageRenderer extends PageRenderer < AllTestResults > { @Override protected void registerTabs ( ) { addFailuresTab ( ) ; addIgnoredTab ( ) ; if ( ! getResults ( ) . getPackages ( ) . isEmpty ( ) ) { addTab ( <str> , new ErroringAction < SimpleHtmlWriter > ( ) { @Override protected void doExecute ( SimpleHtmlWriter writer ) throws IOException { renderPackages ( writer ) ; } } ) ; } addTab ( <str> , new ErroringAction < SimpleHtmlWriter > ( ) { public void doExecute ( SimpleHtmlWriter htmlWriter ) throws IOException { renderClasses ( htmlWriter ) ; } } ) ; } @Override protected void renderBreadcrumbs ( SimpleHtmlWriter htmlWriter ) { } private void renderPackages ( SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; for ( PackageTestResults testPackage : getResults ( ) . getPackages ( ) ) { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , testPackage . getStatusClass ( ) ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , testPackage . getBaseUrl ( ) ) . characters ( testPackage . getName ( ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( Integer . toString ( testPackage . getTestCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( Integer . toString ( testPackage . getFailureCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( Integer . toString ( testPackage . getIgnoredCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( testPackage . getFormattedDuration ( ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , testPackage . getStatusClass ( ) ) . characters ( testPackage . getFormattedSuccessRate ( ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; } htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; } private void renderClasses ( SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; for ( PackageTestResults testPackage : getResults ( ) . getPackages ( ) ) { for ( ClassTestResults testClass : testPackage . getClasses ( ) ) { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , testClass . getStatusClass ( ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , asHtmlLinkEncoded ( testClass . getBaseUrl ( ) ) ) . characters ( testClass . getName ( ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( Integer . toString ( testClass . getTestCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( Integer . toString ( testClass . getFailureCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( Integer . toString ( testClass . getIgnoredCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( testClass . getFormattedDuration ( ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , testClass . getStatusClass ( ) ) . characters ( testClass . getFormattedSuccessRate ( ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; } } htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; } } 

package org . elasticsearch . rest . action . script ; import org . elasticsearch . action . indexedscripts . get . GetIndexedScriptRequest ; import org . elasticsearch . action . indexedscripts . get . GetIndexedScriptResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestGetIndexedScriptAction extends BaseRestHandler { @Inject public RestGetIndexedScriptAction ( Settings settings , RestController controller , Client client ) { this ( settings , controller , true , client ) ; } protected RestGetIndexedScriptAction ( Settings settings , RestController controller , boolean registerDefaultHandlers , Client client ) { super ( settings , controller , client ) ; if ( registerDefaultHandlers ) { controller . registerHandler ( GET , <str> , this ) ; } } protected XContentBuilderString getScriptFieldName ( ) { return Fields . SCRIPT ; } protected String getScriptLang ( RestRequest request ) { return request . param ( <str> ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , Client client ) { final GetIndexedScriptRequest getRequest = new GetIndexedScriptRequest ( getScriptLang ( request ) , request . param ( <str> ) ) ; getRequest . version ( request . paramAsLong ( <str> , getRequest . version ( ) ) ) ; getRequest . versionType ( VersionType . fromString ( request . param ( <str> ) , getRequest . versionType ( ) ) ) ; client . getIndexedScript ( getRequest , new RestBuilderListener < GetIndexedScriptResponse > ( channel ) { @Override public RestResponse buildResponse ( GetIndexedScriptResponse response , XContentBuilder builder ) throws Exception { builder . startObject ( ) ; builder . field ( Fields . LANG , response . getScriptLang ( ) ) ; builder . field ( Fields . _ID , response . getId ( ) ) ; builder . field ( Fields . FOUND , response . isExists ( ) ) ; RestStatus status = RestStatus . NOT_FOUND ; if ( response . isExists ( ) ) { builder . field ( Fields . _VERSION , response . getVersion ( ) ) ; builder . field ( getScriptFieldName ( ) , response . getScript ( ) ) ; status = RestStatus . OK ; } builder . endObject ( ) ; return new BytesRestResponse ( status , builder ) ; } } ) ; } private static final class Fields { private static final XContentBuilderString SCRIPT = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString LANG = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString _ID = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString _VERSION = new XContentBuilderString ( <str> ) ; private static final XContentBuilderString FOUND = new XContentBuilderString ( <str> ) ; } } 

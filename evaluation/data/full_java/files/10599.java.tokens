package com . google . common . primitives ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Comparator ; import java . util . List ; @GwtCompatible ( emulated = true ) @SuppressWarnings ( <str> ) public class SignedBytesTest extends TestCase { private static final byte [ ] EMPTY = { } ; private static final byte [ ] ARRAY1 = { ( byte ) <int> } ; private static final byte LEAST = Byte . MIN_VALUE ; private static final byte GREATEST = Byte . MAX_VALUE ; private static final byte [ ] VALUES = { LEAST , - <int> , <int> , <int> , GREATEST } ; public void testCheckedCast ( ) { for ( byte value : VALUES ) { assertEquals ( value , SignedBytes . checkedCast ( ( long ) value ) ) ; } assertCastFails ( GREATEST + <int> ) ; assertCastFails ( LEAST - <int> ) ; assertCastFails ( Long . MAX_VALUE ) ; assertCastFails ( Long . MIN_VALUE ) ; } public void testSaturatedCast ( ) { for ( byte value : VALUES ) { assertEquals ( value , SignedBytes . saturatedCast ( ( long ) value ) ) ; } assertEquals ( GREATEST , SignedBytes . saturatedCast ( GREATEST + <int> ) ) ; assertEquals ( LEAST , SignedBytes . saturatedCast ( LEAST - <int> ) ) ; assertEquals ( GREATEST , SignedBytes . saturatedCast ( Long . MAX_VALUE ) ) ; assertEquals ( LEAST , SignedBytes . saturatedCast ( Long . MIN_VALUE ) ) ; } @SuppressWarnings ( <str> ) private static void assertCastFails ( long value ) { try { SignedBytes . checkedCast ( value ) ; fail ( <str> + value ) ; } catch ( IllegalArgumentException ex ) { assertTrue ( value + <str> + ex . getMessage ( ) , ex . getMessage ( ) . contains ( String . valueOf ( value ) ) ) ; } } public void testCompare ( ) { for ( byte x : VALUES ) { for ( byte y : VALUES ) { int expected = Byte . valueOf ( x ) . compareTo ( y ) ; int actual = SignedBytes . compare ( x , y ) ; if ( expected = = <int> ) { assertEquals ( x + <str> + y , expected , actual ) ; } else if ( expected < <int> ) { assertTrue ( x + <str> + y + <str> + expected + <str> + actual + <str> , actual < <int> ) ; } else { assertTrue ( x + <str> + y + <str> + expected + <str> + actual + <str> , actual > <int> ) ; } } } } @SuppressWarnings ( <str> ) public void testMax_noArgs ( ) { try { SignedBytes . max ( ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testMax ( ) { assertEquals ( LEAST , SignedBytes . max ( LEAST ) ) ; assertEquals ( GREATEST , SignedBytes . max ( GREATEST ) ) ; assertEquals ( ( byte ) <int> , SignedBytes . max ( ( byte ) <int> , ( byte ) - <int> , ( byte ) - <int> , ( byte ) <int> , ( byte ) <int> ) ) ; } @SuppressWarnings ( <str> ) public void testMin_noArgs ( ) { try { SignedBytes . min ( ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testMin ( ) { assertEquals ( LEAST , SignedBytes . min ( LEAST ) ) ; assertEquals ( GREATEST , SignedBytes . min ( GREATEST ) ) ; assertEquals ( ( byte ) - <int> , SignedBytes . min ( ( byte ) <int> , ( byte ) - <int> , ( byte ) - <int> , ( byte ) <int> , ( byte ) <int> ) ) ; } public void testJoin ( ) { assertEquals ( <str> , SignedBytes . join ( <str> , EMPTY ) ) ; assertEquals ( <str> , SignedBytes . join ( <str> , ARRAY1 ) ) ; assertEquals ( <str> , SignedBytes . join ( <str> , ( byte ) <int> , ( byte ) <int> ) ) ; assertEquals ( <str> , SignedBytes . join ( <str> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> ) ) ; assertEquals ( <str> , SignedBytes . join ( <str> , ( byte ) - <int> , ( byte ) - <int> ) ) ; } public void testLexicographicalComparator ( ) { List < byte [ ] > ordered = Arrays . asList ( new byte [ ] { } , new byte [ ] { LEAST } , new byte [ ] { LEAST , LEAST } , new byte [ ] { LEAST , ( byte ) <int> } , new byte [ ] { ( byte ) <int> } , new byte [ ] { ( byte ) <int> , LEAST } , new byte [ ] { GREATEST , GREATEST - ( byte ) <int> } , new byte [ ] { GREATEST , GREATEST } , new byte [ ] { GREATEST , GREATEST , GREATEST } ) ; Comparator < byte [ ] > comparator = SignedBytes . lexicographicalComparator ( ) ; Helpers . testComparator ( comparator , ordered ) ; } @GwtIncompatible ( <str> ) public void testLexicographicalComparatorSerializable ( ) { Comparator < byte [ ] > comparator = SignedBytes . lexicographicalComparator ( ) ; assertSame ( comparator , SerializableTester . reserialize ( comparator ) ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( SignedBytes . class ) ; } } 

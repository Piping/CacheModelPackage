package org . elasticsearch . common . lucene . store ; import org . apache . lucene . store . IndexInput ; import java . io . IOException ; import java . io . InputStream ; public class InputStreamIndexInput extends InputStream { private final IndexInput indexInput ; private final long limit ; private final long actualSizeToRead ; private long counter = <int> ; private long markPointer ; private long markCounter ; public InputStreamIndexInput ( IndexInput indexInput , long limit ) { this . indexInput = indexInput ; this . limit = limit ; if ( ( indexInput . length ( ) - indexInput . getFilePointer ( ) ) > limit ) { actualSizeToRead = limit ; } else { actualSizeToRead = indexInput . length ( ) - indexInput . getFilePointer ( ) ; } } public long actualSizeToRead ( ) { return actualSizeToRead ; } @Override public int read ( byte [ ] b , int off , int len ) throws IOException { if ( b = = null ) { throw new NullPointerException ( ) ; } else if ( off < <int> | | len < <int> | | len > b . length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( indexInput . getFilePointer ( ) > = indexInput . length ( ) ) { return - <int> ; } if ( indexInput . getFilePointer ( ) + len > indexInput . length ( ) ) { len = ( int ) ( indexInput . length ( ) - indexInput . getFilePointer ( ) ) ; } if ( counter + len > limit ) { len = ( int ) ( limit - counter ) ; } if ( len < = <int> ) { return - <int> ; } indexInput . readBytes ( b , off , len , false ) ; counter + = len ; return len ; } @Override public int read ( ) throws IOException { if ( counter + + > = limit ) { return - <int> ; } return ( indexInput . getFilePointer ( ) < indexInput . length ( ) ) ? ( indexInput . readByte ( ) & <hex> ) : - <int> ; } @Override public boolean markSupported ( ) { return true ; } @Override public synchronized void mark ( int readlimit ) { markPointer = indexInput . getFilePointer ( ) ; markCounter = counter ; } @Override public synchronized void reset ( ) throws IOException { indexInput . seek ( markPointer ) ; counter = markCounter ; } } 

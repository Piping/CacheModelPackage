package org . eclipse . debug . tests . sourcelookup ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IRegisterGroup ; import org . eclipse . debug . core . model . IStackFrame ; import org . eclipse . debug . core . model . IThread ; import org . eclipse . debug . core . model . IVariable ; public class TestStackFrame implements IStackFrame { TestLaunch fLaunch = null ; public TestStackFrame ( TestLaunch launch ) { fLaunch = launch ; } @Override public String getModelIdentifier ( ) { return <str> ; } @Override public IDebugTarget getDebugTarget ( ) { return null ; } @Override public ILaunch getLaunch ( ) { return fLaunch ; } @Override public < T > T getAdapter ( Class < T > adapter ) { return null ; } @Override public boolean canStepInto ( ) { return false ; } @Override public boolean canStepOver ( ) { return false ; } @Override public boolean canStepReturn ( ) { return false ; } @Override public boolean isStepping ( ) { return false ; } @Override public void stepInto ( ) throws DebugException { } @Override public void stepOver ( ) throws DebugException { } @Override public void stepReturn ( ) throws DebugException { } @Override public boolean canResume ( ) { return false ; } @Override public boolean canSuspend ( ) { return false ; } @Override public boolean isSuspended ( ) { return false ; } @Override public void resume ( ) throws DebugException { } @Override public void suspend ( ) throws DebugException { } @Override public boolean canTerminate ( ) { return false ; } @Override public boolean isTerminated ( ) { return false ; } @Override public void terminate ( ) throws DebugException { } @Override public IThread getThread ( ) { return null ; } @Override public IVariable [ ] getVariables ( ) throws DebugException { return new IVariable [ <int> ] ; } @Override public boolean hasVariables ( ) throws DebugException { return false ; } @Override public int getLineNumber ( ) throws DebugException { return <int> ; } @Override public int getCharStart ( ) throws DebugException { return <int> ; } @Override public int getCharEnd ( ) throws DebugException { return <int> ; } @Override public String getName ( ) throws DebugException { return <str> ; } @Override public IRegisterGroup [ ] getRegisterGroups ( ) throws DebugException { return new IRegisterGroup [ <int> ] ; } @Override public boolean hasRegisterGroups ( ) throws DebugException { return false ; } } 

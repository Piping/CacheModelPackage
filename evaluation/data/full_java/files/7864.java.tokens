package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . ShardRoutingState ; import org . elasticsearch . cluster . routing . allocation . decider . SameShardAllocationDecider ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . test . ESAllocationTestCase ; import static java . util . Collections . emptyMap ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . allocation . RoutingNodesUtils . numberOfShardsOfType ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; public class SameShardRoutingTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( SameShardRoutingTests . class ) ; public void testSameHost ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( SameShardAllocationDecider . SAME_HOST_SETTING , true ) . build ( ) ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( new DiscoveryNode ( <str> , <str> , <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ) . put ( new DiscoveryNode ( <str> , <str> , <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( numberOfShardsOfType ( clusterState . getRoutingNodes ( ) , ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; routingTable = strategy . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( numberOfShardsOfType ( clusterState . getRoutingNodes ( ) , ShardRoutingState . STARTED ) , equalTo ( <int> ) ) ; assertThat ( numberOfShardsOfType ( clusterState . getRoutingNodes ( ) , ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( new DiscoveryNode ( <str> , <str> , <str> , <str> , DummyTransportAddress . INSTANCE , emptyMap ( ) , Version . CURRENT ) ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( numberOfShardsOfType ( clusterState . getRoutingNodes ( ) , ShardRoutingState . STARTED ) , equalTo ( <int> ) ) ; assertThat ( numberOfShardsOfType ( clusterState . getRoutingNodes ( ) , ShardRoutingState . INITIALIZING ) , equalTo ( <int> ) ) ; for ( ShardRouting shardRouting : clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) { assertThat ( shardRouting . currentNodeId ( ) , equalTo ( <str> ) ) ; } } } 

package org . gradle . api . internal . artifacts . ivyservice . dependencysubstitution ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . ModuleVersionSelector ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; import org . gradle . api . internal . artifacts . DependencySubstitutionInternal ; import org . gradle . api . internal . artifacts . dsl . ComponentSelectorParsers ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . result . VersionSelectionReasons ; public class DefaultDependencySubstitution implements DependencySubstitutionInternal { private final ComponentSelector requested ; private final ModuleVersionSelector oldRequested ; private ComponentSelectionReason selectionReason ; private ComponentSelector target ; public DefaultDependencySubstitution ( ComponentSelector requested , ModuleVersionSelector oldRequested ) { this . requested = requested ; this . target = requested ; this . oldRequested = oldRequested ; } @Override public ComponentSelector getRequested ( ) { return requested ; } @Override public ModuleVersionSelector getOldRequested ( ) { return oldRequested ; } @Override public void useTarget ( Object notation ) { useTarget ( notation , VersionSelectionReasons . SELECTED_BY_RULE ) ; } @Override public void useTarget ( Object notation , ComponentSelectionReason selectionReason ) { this . target = ComponentSelectorParsers . parser ( ) . parseNotation ( notation ) ; this . selectionReason = selectionReason ; validateTarget ( target ) ; } @Override public ComponentSelectionReason getSelectionReason ( ) { return selectionReason ; } @Override public ComponentSelector getTarget ( ) { return target ; } @Override public boolean isUpdated ( ) { return selectionReason ! = null ; } public static void validateTarget ( ComponentSelector componentSelector ) { if ( componentSelector instanceof UnversionedModuleComponentSelector ) { throw new InvalidUserDataException ( <str> ) ; } } } 

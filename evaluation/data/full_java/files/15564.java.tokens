package org . gradle . api . internal . tasks . testing ; import org . gradle . api . internal . tasks . testing . processors . CaptureTestOutputTestResultProcessor ; import org . gradle . api . internal . tasks . testing . results . AttachParentTestResultProcessor ; import org . gradle . internal . TimeProvider ; public class SuiteTestClassProcessor implements TestClassProcessor { private final TestClassProcessor processor ; private final TimeProvider timeProvider ; private final TestDescriptorInternal suiteDescriptor ; private TestResultProcessor resultProcessor ; public SuiteTestClassProcessor ( TestDescriptorInternal suiteDescriptor , TestClassProcessor processor , TimeProvider timeProvider ) { this . suiteDescriptor = suiteDescriptor ; this . processor = processor ; this . timeProvider = timeProvider ; } public void startProcessing ( TestResultProcessor testResultProcessor ) { try { resultProcessor = new AttachParentTestResultProcessor ( new CaptureTestOutputTestResultProcessor ( testResultProcessor , new JULRedirector ( ) ) ) ; resultProcessor . started ( suiteDescriptor , new TestStartEvent ( timeProvider . getCurrentTime ( ) ) ) ; processor . startProcessing ( resultProcessor ) ; } catch ( Throwable t ) { resultProcessor . failure ( suiteDescriptor . getId ( ) , new TestSuiteExecutionException ( String . format ( <str> , suiteDescriptor ) , t ) ) ; } } public void processTestClass ( TestClassRunInfo testClass ) { try { processor . processTestClass ( testClass ) ; } catch ( Throwable t ) { resultProcessor . failure ( suiteDescriptor . getId ( ) , new TestSuiteExecutionException ( String . format ( <str> , testClass . getTestClassName ( ) ) , t ) ) ; } } public void stop ( ) { try { processor . stop ( ) ; } catch ( Throwable t ) { resultProcessor . failure ( suiteDescriptor . getId ( ) , new TestSuiteExecutionException ( String . format ( <str> , suiteDescriptor ) , t ) ) ; } finally { resultProcessor . completed ( suiteDescriptor . getId ( ) , new TestCompleteEvent ( timeProvider . getCurrentTime ( ) ) ) ; } } } 

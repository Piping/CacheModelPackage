package org . gradle . internal . resolve . result ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . internal . artifacts . DefaultModuleVersionIdentifier ; import org . gradle . internal . component . model . ComponentResolveMetaData ; import org . gradle . internal . resolve . ModuleVersionNotFoundException ; import org . gradle . internal . resolve . ModuleVersionResolveException ; public class DefaultBuildableComponentResolveResult extends DefaultResourceAwareResolveResult implements BuildableComponentResolveResult { private ComponentResolveMetaData metaData ; private ModuleVersionResolveException failure ; public DefaultBuildableComponentResolveResult failed ( ModuleVersionResolveException failure ) { metaData = null ; this . failure = failure ; return this ; } @Override public void notFound ( ModuleComponentIdentifier versionIdentifier ) { failed ( new ModuleVersionNotFoundException ( DefaultModuleVersionIdentifier . newId ( versionIdentifier ) , getAttempted ( ) ) ) ; } public void resolved ( ComponentResolveMetaData metaData ) { this . metaData = metaData ; } public void setMetaData ( ComponentResolveMetaData metaData ) { assertResolved ( ) ; this . metaData = metaData ; } public ModuleVersionIdentifier getId ( ) throws ModuleVersionResolveException { assertResolved ( ) ; return metaData . getId ( ) ; } public ComponentResolveMetaData getMetaData ( ) throws ModuleVersionResolveException { assertResolved ( ) ; return metaData ; } public ModuleVersionResolveException getFailure ( ) { assertHasResult ( ) ; return failure ; } private void assertResolved ( ) { assertHasResult ( ) ; if ( failure ! = null ) { throw failure ; } } private void assertHasResult ( ) { if ( ! hasResult ( ) ) { throw new IllegalStateException ( <str> ) ; } } public boolean hasResult ( ) { return failure ! = null | | metaData ! = null ; } public void applyTo ( BuildableComponentIdResolveResult idResolve ) { super . applyTo ( idResolve ) ; if ( failure ! = null ) { idResolve . failed ( failure ) ; } if ( metaData ! = null ) { idResolve . resolved ( metaData ) ; } } } 

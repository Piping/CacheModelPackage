package org . elasticsearch . index . store ; import org . apache . lucene . index . CorruptIndexException ; import org . apache . lucene . store . BufferedChecksum ; import org . apache . lucene . store . IndexOutput ; import java . io . IOException ; import java . util . zip . Adler32 ; import java . util . zip . Checksum ; @Deprecated class LegacyVerification { static class Adler32VerifyingIndexOutput extends VerifyingIndexOutput { final String adler32 ; final long length ; final Checksum checksum = new BufferedChecksum ( new Adler32 ( ) ) ; long written ; public Adler32VerifyingIndexOutput ( IndexOutput out , String adler32 , long length ) { super ( out ) ; this . adler32 = adler32 ; this . length = length ; } @Override public void verify ( ) throws IOException { if ( written ! = length ) { throw new CorruptIndexException ( <str> + length + <str> + written + <str> , out . toString ( ) ) ; } final String actualChecksum = Store . digestToString ( checksum . getValue ( ) ) ; if ( ! adler32 . equals ( actualChecksum ) ) { throw new CorruptIndexException ( <str> + adler32 + <str> + actualChecksum , out . toString ( ) ) ; } } @Override public void writeByte ( byte b ) throws IOException { out . writeByte ( b ) ; checksum . update ( b ) ; written + + ; } @Override public void writeBytes ( byte [ ] bytes , int offset , int length ) throws IOException { out . writeBytes ( bytes , offset , length ) ; checksum . update ( bytes , offset , length ) ; written + = length ; } } static class LengthVerifyingIndexOutput extends VerifyingIndexOutput { final long length ; long written ; public LengthVerifyingIndexOutput ( IndexOutput out , long length ) { super ( out ) ; this . length = length ; } @Override public void verify ( ) throws IOException { if ( written ! = length ) { throw new CorruptIndexException ( <str> + length + <str> + written + <str> , out . toString ( ) ) ; } } @Override public void writeByte ( byte b ) throws IOException { out . writeByte ( b ) ; written + + ; } @Override public void writeBytes ( byte [ ] bytes , int offset , int length ) throws IOException { out . writeBytes ( bytes , offset , length ) ; written + = length ; } } } 

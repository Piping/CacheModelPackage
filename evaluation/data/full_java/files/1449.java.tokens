package org . apache . cassandra . db ; import java . util . List ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . db . marshal . AsciiType ; import org . apache . cassandra . db . marshal . BytesType ; import org . apache . cassandra . db . partitions . FilteredPartition ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . utils . ByteBufferUtil ; import static org . junit . Assert . assertEquals ; public class ReadCommandTest { private static final String KEYSPACE = <str> ; private static final String CF1 = <str> ; private static final String CF2 = <str> ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { CFMetaData metadata1 = SchemaLoader . standardCFMD ( KEYSPACE , CF1 ) ; CFMetaData metadata2 = CFMetaData . Builder . create ( KEYSPACE , CF2 ) . addPartitionKey ( <str> , BytesType . instance ) . addClusteringColumn ( <str> , AsciiType . instance ) . addRegularColumn ( <str> , AsciiType . instance ) . addRegularColumn ( <str> , AsciiType . instance ) . build ( ) ; SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE , KeyspaceParams . simple ( <int> ) , metadata1 , metadata2 ) ; } @Test public void testPartitionRangeAbort ( ) throws Exception { ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( CF1 ) ; new RowUpdateBuilder ( cfs . metadata , <int> , ByteBufferUtil . bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . bytes ( <str> ) ) . build ( ) . apply ( ) ; cfs . forceBlockingFlush ( ) ; new RowUpdateBuilder ( cfs . metadata , <int> , ByteBufferUtil . bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . bytes ( <str> ) ) . build ( ) . apply ( ) ; ReadCommand readCommand = Util . cmd ( cfs ) . build ( ) ; assertEquals ( <int> , Util . getAll ( readCommand ) . size ( ) ) ; readCommand . abort ( ) ; assertEquals ( <int> , Util . getAll ( readCommand ) . size ( ) ) ; } @Test public void testSinglePartitionSliceAbort ( ) throws Exception { ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( CF2 ) ; cfs . truncateBlocking ( ) ; new RowUpdateBuilder ( cfs . metadata , <int> , ByteBufferUtil . bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . bytes ( <str> ) ) . build ( ) . apply ( ) ; cfs . forceBlockingFlush ( ) ; new RowUpdateBuilder ( cfs . metadata , <int> , ByteBufferUtil . bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . bytes ( <str> ) ) . build ( ) . apply ( ) ; ReadCommand readCommand = Util . cmd ( cfs , Util . dk ( <str> ) ) . build ( ) ; List < FilteredPartition > partitions = Util . getAll ( readCommand ) ; assertEquals ( <int> , partitions . size ( ) ) ; assertEquals ( <int> , partitions . get ( <int> ) . rowCount ( ) ) ; readCommand . abort ( ) ; assertEquals ( <int> , Util . getAll ( readCommand ) . size ( ) ) ; } @Test public void testSinglePartitionNamesAbort ( ) throws Exception { ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( CF2 ) ; cfs . truncateBlocking ( ) ; new RowUpdateBuilder ( cfs . metadata , <int> , ByteBufferUtil . bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . bytes ( <str> ) ) . build ( ) . apply ( ) ; cfs . forceBlockingFlush ( ) ; new RowUpdateBuilder ( cfs . metadata , <int> , ByteBufferUtil . bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , ByteBufferUtil . bytes ( <str> ) ) . build ( ) . apply ( ) ; ReadCommand readCommand = Util . cmd ( cfs , Util . dk ( <str> ) ) . includeRow ( <str> ) . includeRow ( <str> ) . build ( ) ; List < FilteredPartition > partitions = Util . getAll ( readCommand ) ; assertEquals ( <int> , partitions . size ( ) ) ; assertEquals ( <int> , partitions . get ( <int> ) . rowCount ( ) ) ; readCommand . abort ( ) ; assertEquals ( <int> , Util . getAll ( readCommand ) . size ( ) ) ; } } 

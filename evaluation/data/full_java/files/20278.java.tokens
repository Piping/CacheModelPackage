package io . netty . channel . nio ; import io . netty . channel . Channel ; import io . netty . channel . EventLoop ; import io . netty . channel . MultithreadEventLoopGroup ; import io . netty . util . concurrent . EventExecutor ; import java . nio . channels . Selector ; import java . nio . channels . spi . SelectorProvider ; import java . util . concurrent . Executor ; import java . util . concurrent . ThreadFactory ; public class NioEventLoopGroup extends MultithreadEventLoopGroup { public NioEventLoopGroup ( ) { this ( <int> ) ; } public NioEventLoopGroup ( int nThreads ) { this ( nThreads , ( Executor ) null ) ; } public NioEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { this ( nThreads , threadFactory , SelectorProvider . provider ( ) ) ; } public NioEventLoopGroup ( int nThreads , Executor executor ) { this ( nThreads , executor , SelectorProvider . provider ( ) ) ; } public NioEventLoopGroup ( int nThreads , ThreadFactory threadFactory , final SelectorProvider selectorProvider ) { super ( nThreads , threadFactory , selectorProvider ) ; } public NioEventLoopGroup ( int nThreads , Executor executor , final SelectorProvider selectorProvider ) { super ( nThreads , executor , selectorProvider ) ; } public void setIoRatio ( int ioRatio ) { for ( EventExecutor e : children ( ) ) { ( ( NioEventLoop ) e ) . setIoRatio ( ioRatio ) ; } } public void rebuildSelectors ( ) { for ( EventExecutor e : children ( ) ) { ( ( NioEventLoop ) e ) . rebuildSelector ( ) ; } } @Override protected EventLoop newChild ( Executor executor , Object . . . args ) throws Exception { return new NioEventLoop ( this , executor , ( SelectorProvider ) args [ <int> ] ) ; } } 

package org . gradle . launcher . daemon . client ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . launcher . daemon . protocol . * ; import org . gradle . messaging . remote . internal . Connection ; public class StopDispatcher { private static final Logger LOGGER = Logging . getLogger ( StopDispatcher . class ) ; public void dispatch ( Connection < Message > connection , Command stopCommand ) { Throwable failure = null ; try { connection . dispatch ( stopCommand ) ; Result result = ( Result ) connection . receive ( ) ; if ( result instanceof Failure ) { failure = ( ( Failure ) result ) . getValue ( ) ; } connection . dispatch ( new Finished ( ) ) ; } catch ( Throwable e ) { failure = e ; } if ( failure ! = null ) { LOGGER . lifecycle ( <str> ) ; LOGGER . debug ( String . format ( <str> , connection ) , failure ) ; } } } 

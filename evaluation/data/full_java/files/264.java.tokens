package org . apache . cassandra . cql3 . statements ; import java . util . regex . Pattern ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . cql3 . ColumnIdentifier ; import org . apache . cassandra . exceptions . InvalidRequestException ; public class IndexTarget { public static final String TARGET_OPTION_NAME = <str> ; public static final String CUSTOM_INDEX_OPTION_NAME = <str> ; public static final String INDEX_KEYS_OPTION_NAME = <str> ; public static final String INDEX_ENTRIES_OPTION_NAME = <str> ; private static final Pattern COLUMN_IDENTIFIER_PATTERN = Pattern . compile ( <str> ) ; public final ColumnIdentifier column ; public final boolean quoteName ; public final Type type ; public IndexTarget ( ColumnIdentifier column , Type type ) { this . column = column ; this . type = type ; quoteName = ! COLUMN_IDENTIFIER_PATTERN . matcher ( column . toString ( ) ) . matches ( ) ; } public String asCqlString ( CFMetaData cfm ) { if ( ! cfm . getColumnDefinition ( column ) . type . isCollection ( ) ) return column . toCQLString ( ) ; return String . format ( <str> , type . toString ( ) , column . toCQLString ( ) ) ; } public static class Raw { private final ColumnIdentifier . Raw column ; private final Type type ; private Raw ( ColumnIdentifier . Raw column , Type type ) { this . column = column ; this . type = type ; } public static Raw simpleIndexOn ( ColumnIdentifier . Raw c ) { return new Raw ( c , Type . SIMPLE ) ; } public static Raw valuesOf ( ColumnIdentifier . Raw c ) { return new Raw ( c , Type . VALUES ) ; } public static Raw keysOf ( ColumnIdentifier . Raw c ) { return new Raw ( c , Type . KEYS ) ; } public static Raw keysAndValuesOf ( ColumnIdentifier . Raw c ) { return new Raw ( c , Type . KEYS_AND_VALUES ) ; } public static Raw fullCollection ( ColumnIdentifier . Raw c ) { return new Raw ( c , Type . FULL ) ; } public IndexTarget prepare ( CFMetaData cfm ) { ColumnIdentifier colId = column . prepare ( cfm ) ; ColumnDefinition columnDef = cfm . getColumnDefinition ( colId ) ; if ( columnDef = = null ) throw new InvalidRequestException ( <str> + colId ) ; Type actualType = ( type = = Type . SIMPLE & & columnDef . type . isCollection ( ) ) ? Type . VALUES : type ; return new IndexTarget ( colId , actualType ) ; } } public static enum Type { VALUES , KEYS , KEYS_AND_VALUES , FULL , SIMPLE ; public String toString ( ) { switch ( this ) { case KEYS : return <str> ; case KEYS_AND_VALUES : return <str> ; case FULL : return <str> ; case VALUES : return <str> ; case SIMPLE : return <str> ; default : return <str> ; } } public static Type fromString ( String s ) { if ( <str> . equals ( s ) ) return SIMPLE ; else if ( <str> . equals ( s ) ) return VALUES ; else if ( <str> . equals ( s ) ) return KEYS ; else if ( <str> . equals ( s ) ) return KEYS_AND_VALUES ; else if ( <str> . equals ( s ) ) return FULL ; throw new AssertionError ( <str> + s ) ; } } } 

package org . eclipse . debug . examples . core . pda . model ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . core . model . IVariable ; public class PDAStackValue extends PDADebugElement implements IValue { final private PDAThread fThread ; final private String fValue ; final private int fIndex ; public PDAStackValue ( PDAThread thread , String value , int index ) { super ( thread . getDebugTarget ( ) ) ; fThread = thread ; fValue = value ; fIndex = index ; } public PDAThread getThread ( ) { return fThread ; } @Override public String getValueString ( ) throws DebugException { return fValue ; } @Override public boolean isAllocated ( ) throws DebugException { return true ; } @Override public IVariable [ ] getVariables ( ) throws DebugException { return new IVariable [ <int> ] ; } @Override public boolean hasVariables ( ) throws DebugException { return false ; } @Override public String getReferenceTypeName ( ) throws DebugException { return null ; } @Override public boolean equals ( Object obj ) { return obj instanceof PDAStackValue & & ( ( PDAStackValue ) obj ) . fValue . equals ( fValue ) & & ( ( PDAStackValue ) obj ) . fIndex = = fIndex ; } @Override public int hashCode ( ) { return super . hashCode ( ) + fIndex ; } } 

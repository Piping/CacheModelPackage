package com . nostra13 . universalimageloader . utils ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; public final class IoUtils { public static final int DEFAULT_BUFFER_SIZE = <int> * <int> ; public static final int DEFAULT_IMAGE_TOTAL_SIZE = <int> * <int> ; public static final int CONTINUE_LOADING_PERCENTAGE = <int> ; private IoUtils ( ) { } public static boolean copyStream ( InputStream is , OutputStream os , CopyListener listener ) throws IOException { return copyStream ( is , os , listener , DEFAULT_BUFFER_SIZE ) ; } public static boolean copyStream ( InputStream is , OutputStream os , CopyListener listener , int bufferSize ) throws IOException { int current = <int> ; int total = is . available ( ) ; if ( total < = <int> ) { total = DEFAULT_IMAGE_TOTAL_SIZE ; } final byte [ ] bytes = new byte [ bufferSize ] ; int count ; if ( shouldStopLoading ( listener , current , total ) ) return false ; while ( ( count = is . read ( bytes , <int> , bufferSize ) ) ! = - <int> ) { os . write ( bytes , <int> , count ) ; current + = count ; if ( shouldStopLoading ( listener , current , total ) ) return false ; } os . flush ( ) ; return true ; } private static boolean shouldStopLoading ( CopyListener listener , int current , int total ) { if ( listener ! = null ) { boolean shouldContinue = listener . onBytesCopied ( current , total ) ; if ( ! shouldContinue ) { if ( <int> * current / total < CONTINUE_LOADING_PERCENTAGE ) { return true ; } } } return false ; } public static void readAndCloseStream ( InputStream is ) { final byte [ ] bytes = new byte [ DEFAULT_BUFFER_SIZE ] ; try { while ( is . read ( bytes , <int> , DEFAULT_BUFFER_SIZE ) ! = - <int> ) ; } catch ( IOException ignored ) { } finally { closeSilently ( is ) ; } } public static void closeSilently ( Closeable closeable ) { if ( closeable ! = null ) { try { closeable . close ( ) ; } catch ( Exception ignored ) { } } } public static interface CopyListener { boolean onBytesCopied ( int current , int total ) ; } } 

package org . apache . cassandra . io . sstable ; import java . io . File ; import java . util . ArrayList ; import java . util . List ; import java . util . Random ; import com . google . common . io . Files ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . Config ; import org . apache . cassandra . service . StorageService ; public class CQLSSTableWriterLongTest { @BeforeClass public static void setup ( ) throws Exception { SchemaLoader . prepareServer ( ) ; StorageService . instance . initServer ( ) ; } @AfterClass public static void tearDown ( ) { Config . setClientMode ( false ) ; } @Test public void testWideRow ( ) throws Exception { String KS = <str> ; String TABLE = <str> ; int size = <int> ; File tempdir = Files . createTempDir ( ) ; File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + KS + File . separator + TABLE ) ; assert dataDir . mkdirs ( ) ; StringBuilder schemaColumns = new StringBuilder ( ) ; StringBuilder queryColumns = new StringBuilder ( ) ; StringBuilder queryValues = new StringBuilder ( ) ; for ( int i = <int> ; i < size ; i + + ) { schemaColumns . append ( <str> ) ; schemaColumns . append ( i ) ; schemaColumns . append ( <str> ) ; queryColumns . append ( <str> ) ; queryColumns . append ( i ) ; queryValues . append ( <str> ) ; } String schema = <str> + <str> + <str> + schemaColumns . toString ( ) + <str> + <str> ; String insert = <str> + queryColumns . toString ( ) + <str> + queryValues . toString ( ) + <str> ; CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) . inDirectory ( dataDir ) . forTable ( schema ) . using ( insert ) . withBufferSizeInMB ( <int> ) . build ( ) ; long high = <int> ; Random r = new Random ( <int> ) ; for ( int i = <int> ; i < high ; i + + ) { List < Object > values = new ArrayList < > ( size + <int> ) ; values . add ( <int> ) ; values . add ( r . nextInt ( ) ) ; for ( int j = <int> ; j < size ; j + + ) { values . add ( i ) ; } writer . addRow ( values ) ; } writer . close ( ) ; } } 

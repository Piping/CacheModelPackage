package org . elasticsearch . search . functionscore ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . query . functionscore . FunctionScoreQueryBuilder ; import org . elasticsearch . script . Script ; import org . elasticsearch . test . ESBackcompatTestCase ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . client . Requests . searchRequest ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . functionScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders . gaussDecayFunction ; import static org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders . scriptFunction ; import static org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders . weightFactorFunction ; import static org . elasticsearch . search . builder . SearchSourceBuilder . searchSource ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertOrderedSearchHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; public class FunctionScoreBackwardCompatibilityIT extends ESBackcompatTestCase { public void testSimpleFunctionScoreParsingWorks ( ) throws IOException , ExecutionException , InterruptedException { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; ensureYellow ( ) ; int numDocs = <int> ; String [ ] ids = new String [ numDocs ] ; List < IndexRequestBuilder > indexBuilders = new ArrayList < > ( ) ; for ( int i = <int> ; i < numDocs ; i + + ) { String id = Integer . toString ( i ) ; indexBuilders . add ( client ( ) . prepareIndex ( ) . setType ( <str> ) . setId ( id ) . setIndex ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> + ( i < <int> ? <str> : <str> ) ) . startObject ( <str> ) . field ( <str> , <int> + i ) . field ( <str> , <int> ) . endObject ( ) . endObject ( ) ) ) ; ids [ i ] = id ; } indexRandom ( true , indexBuilders ) ; checkFunctionScoreStillWorks ( ids ) ; logClusterState ( ) ; disableAllocation ( <str> ) ; boolean upgraded ; int upgradedNodesCounter = <int> ; do { logger . debug ( <str> , upgradedNodesCounter + + ) ; upgraded = backwardsCluster ( ) . upgradeOneNode ( ) ; ensureYellow ( ) ; logClusterState ( ) ; checkFunctionScoreStillWorks ( ids ) ; } while ( upgraded ) ; enableAllocation ( <str> ) ; logger . debug ( <str> ) ; } @Override protected Settings commonNodeSettings ( int nodeOrdinal ) { return Settings . builder ( ) . put ( super . commonNodeSettings ( nodeOrdinal ) ) . put ( <str> , <str> ) . build ( ) ; } private void checkFunctionScoreStillWorks ( String . . . ids ) throws ExecutionException , InterruptedException , IOException { SearchResponse response = client ( ) . search ( searchRequest ( ) . source ( searchSource ( ) . query ( functionScoreQuery ( termQuery ( <str> , <str> ) , new FunctionScoreQueryBuilder . FilterFunctionBuilder [ ] { new FunctionScoreQueryBuilder . FilterFunctionBuilder ( gaussDecayFunction ( <str> , new GeoPoint ( <int> , <int> ) , <str> ) ) , new FunctionScoreQueryBuilder . FilterFunctionBuilder ( scriptFunction ( new Script ( <str> ) ) ) , new FunctionScoreQueryBuilder . FilterFunctionBuilder ( termQuery ( <str> , <str> ) , weightFactorFunction ( <int> ) ) } ) ) ) ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertOrderedSearchHits ( response , ids ) ; } } 

package org . apache . cassandra . cql3 . validation . entities ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; public class TupleTypeTest extends CQLTester { @Test public void testTuplePutAndGet ( ) throws Throwable { String [ ] valueTypes = { <str> , <str> } ; for ( String valueType : valueTypes ) { createTable ( <str> + valueType + <str> ) ; execute ( <str> , <int> , tuple ( <int> , <str> , <float> ) ) ; execute ( <str> , <int> , tuple ( <int> , <str> , <float> ) ) ; assertAllRows ( row ( <int> , tuple ( <int> , <str> , <float> ) ) , row ( <int> , tuple ( <int> , <str> , <float> ) ) ) ; execute ( <str> , <int> , tuple ( <int> , null , <float> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , tuple ( <int> , null , <float> ) ) ) ; execute ( <str> , <int> , tuple ( <int> , <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , tuple ( <int> , <str> ) ) ) ; } } @Test public void testNestedTuple ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , tuple ( <int> , tuple ( <str> , <float> ) ) ) ; execute ( <str> , <int> , tuple ( <int> , tuple ( <str> , <float> ) ) ) ; assertAllRows ( row ( <int> , tuple ( <int> , tuple ( <str> , <float> ) ) ) , row ( <int> , tuple ( <int> , tuple ( <str> , <float> ) ) ) ) ; } @Test public void testTupleInPartitionKey ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , tuple ( <int> , <str> ) ) ; assertAllRows ( row ( tuple ( <int> , <str> ) ) ) ; } @Test public void testTupleInClusteringKey ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , tuple ( <int> , <str> ) ) ; execute ( <str> , <int> , tuple ( <int> , <str> ) ) ; execute ( <str> , <int> , tuple ( <int> , <str> ) ) ; execute ( <str> , <int> , tuple ( <int> , <str> ) ) ; assertAllRows ( row ( <int> , tuple ( <int> , <str> ) ) , row ( <int> , tuple ( <int> , <str> ) ) , row ( <int> , tuple ( <int> , <str> ) ) , row ( <int> , tuple ( <int> , <str> ) ) ) ; } @Test public void testTupleFromString ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertAllRows ( row ( <int> , <int> , tuple ( <int> , <str> ) ) , row ( <int> , <int> , tuple ( <int> , <str> ) ) , row ( <int> , <int> , tuple ( <int> ) ) , row ( <int> , <int> , tuple ( <int> , <str> ) ) , row ( <int> , <int> , tuple ( null , <str> ) ) ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testInvalidQueries ( ) throws Throwable { createTable ( <str> ) ; assertInvalidSyntax ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testTupleWithUnsetValues ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; createIndex ( <str> ) ; assertInvalidMessage ( <str> , <str> , unset ( ) , unset ( ) , unset ( ) , unset ( ) ) ; } @Test public void testTupleNotation ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) for ( int k = <int> ; k < <int> ; k + + ) execute ( <str> , i , j , k ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertInvalid ( <str> ) ; } @Test public void testSelectInStatementWithTuples ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <str> ) , row ( <int> , <int> , <str> ) ) ; } } 

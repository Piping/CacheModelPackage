package com . badlogic . gdx . tools . texturepacker ; import java . util . Random ; import com . badlogic . gdx . ApplicationAdapter ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . backends . lwjgl . LwjglApplication ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer . ShapeType ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . tools . texturepacker . TexturePacker . Page ; import com . badlogic . gdx . tools . texturepacker . TexturePacker . Rect ; import com . badlogic . gdx . tools . texturepacker . TexturePacker . Settings ; import com . badlogic . gdx . utils . Array ; public class TexturePackerTest extends ApplicationAdapter { ShapeRenderer renderer ; Array < Page > pages ; public void create ( ) { renderer = new ShapeRenderer ( ) ; } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; Settings settings = new Settings ( ) ; settings . fast = false ; settings . pot = false ; settings . maxWidth = <int> ; settings . maxHeight = <int> ; settings . rotation = false ; settings . paddingX = <int> ; if ( pages = = null ) { Random random = new Random ( <int> ) ; Array < Rect > inputRects = new Array ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { Rect rect = new Rect ( ) ; rect . name = <str> + i ; rect . height = <int> + random . nextInt ( <int> ) ; rect . width = <int> + random . nextInt ( <int> ) ; inputRects . add ( rect ) ; } for ( int i = <int> ; i < <int> ; i + + ) { Rect rect = new Rect ( ) ; rect . name = <str> + ( <int> + i ) ; rect . height = <int> + random . nextInt ( <int> ) ; rect . width = <int> + random . nextInt ( <int> ) ; inputRects . add ( rect ) ; } long s = System . nanoTime ( ) ; pages = new MaxRectsPacker ( settings ) . pack ( inputRects ) ; long e = System . nanoTime ( ) ; System . out . println ( <str> + settings . fast ) ; System . out . println ( ( e - s ) / <float> + <str> ) ; System . out . println ( ) ; } int x = <int> , y = <int> ; for ( Page page : pages ) { renderer . setColor ( Color . GRAY ) ; renderer . begin ( ShapeType . Filled ) ; for ( int i = <int> ; i < page . outputRects . size ; i + + ) { Rect rect = page . outputRects . get ( i ) ; renderer . rect ( x + rect . x + settings . paddingX , y + rect . y + settings . paddingY , rect . width - settings . paddingX , rect . height - settings . paddingY ) ; } renderer . end ( ) ; renderer . setColor ( Color . RED ) ; renderer . begin ( ShapeType . Line ) ; for ( int i = <int> ; i < page . outputRects . size ; i + + ) { Rect rect = page . outputRects . get ( i ) ; renderer . rect ( x + rect . x + settings . paddingX , y + rect . y + settings . paddingY , rect . width - settings . paddingX , rect . height - settings . paddingY ) ; } renderer . setColor ( Color . GREEN ) ; renderer . rect ( x , y , page . width + settings . paddingX * <int> , page . height + settings . paddingY * <int> ) ; renderer . end ( ) ; x + = page . width + <int> ; } } public void resize ( int width , int height ) { renderer . setProjectionMatrix ( new Matrix4 ( ) . setToOrtho2D ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ) ; } public static void main ( String [ ] args ) throws Exception { new LwjglApplication ( new TexturePackerTest ( ) , <str> , <int> , <int> ) ; } } 

package org . elasticsearch . monitor . process ; import org . elasticsearch . bootstrap . BootstrapInfo ; import org . elasticsearch . monitor . Probes ; import java . lang . management . ManagementFactory ; import java . lang . management . OperatingSystemMXBean ; import java . lang . reflect . Method ; import static org . elasticsearch . monitor . jvm . JvmInfo . jvmInfo ; public class ProcessProbe { private static final OperatingSystemMXBean osMxBean = ManagementFactory . getOperatingSystemMXBean ( ) ; private static final Method getMaxFileDescriptorCountField ; private static final Method getOpenFileDescriptorCountField ; private static final Method getProcessCpuLoad ; private static final Method getProcessCpuTime ; private static final Method getCommittedVirtualMemorySize ; static { getMaxFileDescriptorCountField = getUnixMethod ( <str> ) ; getOpenFileDescriptorCountField = getUnixMethod ( <str> ) ; getProcessCpuLoad = getMethod ( <str> ) ; getProcessCpuTime = getMethod ( <str> ) ; getCommittedVirtualMemorySize = getMethod ( <str> ) ; } private static class ProcessProbeHolder { private final static ProcessProbe INSTANCE = new ProcessProbe ( ) ; } public static ProcessProbe getInstance ( ) { return ProcessProbeHolder . INSTANCE ; } private ProcessProbe ( ) { } public long getMaxFileDescriptorCount ( ) { if ( getMaxFileDescriptorCountField = = null ) { return - <int> ; } try { return ( Long ) getMaxFileDescriptorCountField . invoke ( osMxBean ) ; } catch ( Throwable t ) { return - <int> ; } } public long getOpenFileDescriptorCount ( ) { if ( getOpenFileDescriptorCountField = = null ) { return - <int> ; } try { return ( Long ) getOpenFileDescriptorCountField . invoke ( osMxBean ) ; } catch ( Throwable t ) { return - <int> ; } } public short getProcessCpuPercent ( ) { return Probes . getLoadAndScaleToPercent ( getProcessCpuLoad , osMxBean ) ; } public long getProcessCpuTotalTime ( ) { if ( getProcessCpuTime ! = null ) { try { long time = ( long ) getProcessCpuTime . invoke ( osMxBean ) ; if ( time > = <int> ) { return ( time / <int> ) ; } } catch ( Throwable t ) { return - <int> ; } } return - <int> ; } public long getTotalVirtualMemorySize ( ) { if ( getCommittedVirtualMemorySize ! = null ) { try { long virtual = ( long ) getCommittedVirtualMemorySize . invoke ( osMxBean ) ; if ( virtual > = <int> ) { return virtual ; } } catch ( Throwable t ) { return - <int> ; } } return - <int> ; } public ProcessInfo processInfo ( ) { return new ProcessInfo ( jvmInfo ( ) . pid ( ) , BootstrapInfo . isMemoryLocked ( ) ) ; } public ProcessStats processStats ( ) { ProcessStats stats = new ProcessStats ( ) ; stats . timestamp = System . currentTimeMillis ( ) ; stats . openFileDescriptors = getOpenFileDescriptorCount ( ) ; stats . maxFileDescriptors = getMaxFileDescriptorCount ( ) ; ProcessStats . Cpu cpu = new ProcessStats . Cpu ( ) ; cpu . percent = getProcessCpuPercent ( ) ; cpu . total = getProcessCpuTotalTime ( ) ; stats . cpu = cpu ; ProcessStats . Mem mem = new ProcessStats . Mem ( ) ; mem . totalVirtual = getTotalVirtualMemorySize ( ) ; stats . mem = mem ; return stats ; } private static Method getMethod ( String methodName ) { try { return Class . forName ( <str> ) . getMethod ( methodName ) ; } catch ( Throwable t ) { return null ; } } private static Method getUnixMethod ( String methodName ) { try { return Class . forName ( <str> ) . getMethod ( methodName ) ; } catch ( Throwable t ) { return null ; } } } 

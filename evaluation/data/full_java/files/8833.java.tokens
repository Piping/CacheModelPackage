package org . elasticsearch . mapper . attachments ; import java . io . ByteArrayInputStream ; import java . io . FilePermission ; import java . io . IOException ; import java . lang . reflect . ReflectPermission ; import java . net . URISyntaxException ; import java . net . URL ; import java . net . URLClassLoader ; import java . nio . file . Path ; import java . security . AccessControlContext ; import java . security . AccessController ; import java . security . PermissionCollection ; import java . security . Permissions ; import java . security . PrivilegedActionException ; import java . security . PrivilegedExceptionAction ; import java . security . ProtectionDomain ; import java . security . SecurityPermission ; import java . util . PropertyPermission ; import org . apache . tika . Tika ; import org . apache . tika . exception . TikaException ; import org . apache . tika . metadata . Metadata ; import org . apache . tika . parser . AutoDetectParser ; import org . apache . tika . parser . Parser ; import org . elasticsearch . SpecialPermission ; import org . elasticsearch . bootstrap . JarHell ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . common . io . PathUtils ; final class TikaImpl { private static final Parser PARSERS [ ] = new Parser [ ] { new org . apache . tika . parser . html . HtmlParser ( ) , new org . apache . tika . parser . rtf . RTFParser ( ) , new org . apache . tika . parser . pdf . PDFParser ( ) , new org . apache . tika . parser . txt . TXTParser ( ) , new org . apache . tika . parser . microsoft . OfficeParser ( ) , new org . apache . tika . parser . microsoft . OldExcelParser ( ) , new org . apache . tika . parser . microsoft . ooxml . OOXMLParser ( ) , new org . apache . tika . parser . odf . OpenDocumentParser ( ) , new org . apache . tika . parser . iwork . IWorkPackageParser ( ) , new org . apache . tika . parser . xml . DcXMLParser ( ) , new org . apache . tika . parser . epub . EpubParser ( ) , } ; private static final AutoDetectParser PARSER_INSTANCE = new AutoDetectParser ( PARSERS ) ; private static final Tika TIKA_INSTANCE = new Tika ( PARSER_INSTANCE . getDetector ( ) , PARSER_INSTANCE ) ; static String parse ( final byte content [ ] , final Metadata metadata , final int limit ) throws TikaException , IOException { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm ! = null ) { sm . checkPermission ( new SpecialPermission ( ) ) ; } try { return AccessController . doPrivileged ( new PrivilegedExceptionAction < String > ( ) { @Override public String run ( ) throws TikaException , IOException { return TIKA_INSTANCE . parseToString ( new ByteArrayInputStream ( content ) , metadata , limit ) ; } } , RESTRICTED_CONTEXT ) ; } catch ( PrivilegedActionException e ) { Throwable cause = e . getCause ( ) ; if ( cause instanceof TikaException ) { throw ( TikaException ) cause ; } else if ( cause instanceof IOException ) { throw ( IOException ) cause ; } else { throw new AssertionError ( cause ) ; } } } private static final AccessControlContext RESTRICTED_CONTEXT = new AccessControlContext ( new ProtectionDomain [ ] { new ProtectionDomain ( null , getRestrictedPermissions ( ) ) } ) ; static PermissionCollection getRestrictedPermissions ( ) { Permissions perms = new Permissions ( ) ; perms . add ( new PropertyPermission ( <str> , <str> ) ) ; perms . add ( new RuntimePermission ( <str> ) ) ; addReadPermissions ( perms , JarHell . parseClassPath ( ) ) ; if ( TikaImpl . class . getClassLoader ( ) instanceof URLClassLoader ) { addReadPermissions ( perms , ( ( URLClassLoader ) TikaImpl . class . getClassLoader ( ) ) . getURLs ( ) ) ; } perms . add ( new FilePermission ( System . getProperty ( <str> ) + System . getProperty ( <str> ) + <str> , <str> ) ) ; perms . add ( new SecurityPermission ( <str> ) ) ; perms . add ( new SecurityPermission ( <str> ) ) ; perms . add ( new ReflectPermission ( <str> ) ) ; perms . setReadOnly ( ) ; return perms ; } @SuppressForbidden ( reason = <str> ) static void addReadPermissions ( Permissions perms , URL resources [ ] ) { try { for ( URL url : resources ) { Path path = PathUtils . get ( url . toURI ( ) ) ; perms . add ( new FilePermission ( path . toString ( ) , <str> ) ) ; perms . add ( new FilePermission ( path . toString ( ) + System . getProperty ( <str> ) + <str> , <str> ) ) ; } } catch ( URISyntaxException bogus ) { throw new RuntimeException ( bogus ) ; } } } 

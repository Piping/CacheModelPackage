package org . apache . cassandra . io . util ; import java . io . DataOutputStream ; import java . io . File ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . concurrent . ThreadLocalRandom ; import com . google . common . io . Files ; import org . junit . After ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . io . compress . BufferType ; import org . apache . cassandra . utils . concurrent . AbstractTransactionalTest ; import static org . apache . commons . io . FileUtils . * ; public class SequentialWriterTest extends AbstractTransactionalTest { private final List < TestableSW > writers = new ArrayList < > ( ) ; @After public void cleanup ( ) { for ( TestableSW sw : writers ) sw . file . delete ( ) ; writers . clear ( ) ; } protected TestableTransaction newTest ( ) throws IOException { TestableSW sw = new TestableSW ( ) ; writers . add ( sw ) ; return sw ; } protected static class TestableSW extends TestableTransaction { protected static final int BUFFER_SIZE = <int> < < <int> ; protected final File file ; protected final SequentialWriter writer ; protected final byte [ ] fullContents , partialContents ; protected TestableSW ( ) throws IOException { this ( tempFile ( <str> ) ) ; } protected TestableSW ( File file ) throws IOException { this ( file , new SequentialWriter ( file , <int> < < <int> , BufferType . OFF_HEAP ) ) ; } protected TestableSW ( File file , SequentialWriter sw ) throws IOException { super ( sw ) ; this . file = file ; this . writer = sw ; fullContents = new byte [ BUFFER_SIZE + BUFFER_SIZE / <int> ] ; ThreadLocalRandom . current ( ) . nextBytes ( fullContents ) ; partialContents = Arrays . copyOf ( fullContents , BUFFER_SIZE ) ; sw . write ( fullContents ) ; } protected void assertInProgress ( ) throws Exception { Assert . assertTrue ( file . exists ( ) ) ; byte [ ] bytes = readFileToByteArray ( file ) ; Assert . assertTrue ( Arrays . equals ( partialContents , bytes ) ) ; } protected void assertPrepared ( ) throws Exception { Assert . assertTrue ( file . exists ( ) ) ; byte [ ] bytes = readFileToByteArray ( file ) ; Assert . assertTrue ( Arrays . equals ( fullContents , bytes ) ) ; } protected void assertAborted ( ) throws Exception { Assert . assertFalse ( writer . isOpen ( ) ) ; } protected void assertCommitted ( ) throws Exception { assertPrepared ( ) ; Assert . assertFalse ( writer . isOpen ( ) ) ; } protected static File tempFile ( String prefix ) { File file = FileUtils . createTempFile ( prefix , <str> ) ; file . delete ( ) ; return file ; } } @Test public void outputStream ( ) { File tempFile = new File ( Files . createTempDir ( ) , <str> ) ; Assert . assertFalse ( <str> , tempFile . exists ( ) ) ; try ( DataOutputStream os = new DataOutputStream ( SequentialWriter . open ( tempFile ) . finishOnClose ( ) ) ) { os . writeUTF ( <str> ) ; } catch ( IOException e ) { Assert . fail ( ) ; } Assert . assertTrue ( <str> , tempFile . exists ( ) ) ; } } 

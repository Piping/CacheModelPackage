package org . gradle . util ; import org . apache . commons . lang . StringEscapeUtils ; import org . gradle . internal . SystemProperties ; import java . io . File ; import java . util . regex . Pattern ; public class TextUtil { private static final Pattern WHITESPACE = Pattern . compile ( <str> ) ; public static String getWindowsLineSeparator ( ) { return <str> ; } public static String getUnixLineSeparator ( ) { return <str> ; } public static String getPlatformLineSeparator ( ) { return SystemProperties . getInstance ( ) . getLineSeparator ( ) ; } public static String convertLineSeparators ( String str , String sep ) { return str = = null ? null : str . replaceAll ( <str> , sep ) ; } public static String toPlatformLineSeparators ( String str ) { return str = = null ? null : convertLineSeparators ( str , getPlatformLineSeparator ( ) ) ; } public static String normaliseLineSeparators ( String str ) { return str = = null ? null : convertLineSeparators ( str , <str> ) ; } public static String normaliseFileSeparators ( String path ) { return path . replaceAll ( Pattern . quote ( File . separator ) , <str> ) ; } public static String escapeString ( Object obj ) { return obj = = null ? null : StringEscapeUtils . escapeJava ( obj . toString ( ) ) ; } public static boolean containsWhitespace ( String str ) { for ( int i = <int> ; i < str . length ( ) ; i + + ) { if ( Character . isWhitespace ( str . charAt ( i ) ) ) { return true ; } } return false ; } public static String indent ( String text , String indent ) { StringBuilder builder = new StringBuilder ( ) ; String [ ] lines = text . split ( <str> ) ; for ( int i = <int> ; i < lines . length ; i + + ) { String line = lines [ i ] ; if ( ! WHITESPACE . matcher ( line ) . matches ( ) ) { builder . append ( indent ) ; } builder . append ( line ) ; if ( i < lines . length - <int> ) { builder . append ( <str> ) ; } } return builder . toString ( ) ; } public static String shorterOf ( String s1 , String s2 ) { if ( s2 . length ( ) > = s1 . length ( ) ) { return s1 ; } else { return s2 ; } } public static String normaliseFileAndLineSeparators ( String in ) { return normaliseLineSeparators ( normaliseFileSeparators ( in ) ) ; } } 

package com . google . common . util . concurrent ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Supplier ; import com . google . common . base . Suppliers ; import junit . framework . TestCase ; import java . security . Permission ; import java . util . concurrent . Callable ; @GwtCompatible ( emulated = true ) public class CallablesTest extends TestCase { public void testReturning ( ) throws Exception { assertNull ( Callables . returning ( null ) . call ( ) ) ; Object value = new Object ( ) ; Callable < Object > callable = Callables . returning ( value ) ; assertSame ( value , callable . call ( ) ) ; assertSame ( value , callable . call ( ) ) ; } @GwtIncompatible ( <str> ) public void testRenaming ( ) throws Exception { String oldName = Thread . currentThread ( ) . getName ( ) ; final Supplier < String > newName = Suppliers . ofInstance ( <str> ) ; Callable < Void > callable = new Callable < Void > ( ) { @Override public Void call ( ) throws Exception { assertEquals ( Thread . currentThread ( ) . getName ( ) , newName . get ( ) ) ; return null ; } } ; Callables . threadRenaming ( callable , newName ) . call ( ) ; assertEquals ( oldName , Thread . currentThread ( ) . getName ( ) ) ; } @GwtIncompatible ( <str> ) public void testRenaming_exceptionalReturn ( ) throws Exception { String oldName = Thread . currentThread ( ) . getName ( ) ; final Supplier < String > newName = Suppliers . ofInstance ( <str> ) ; class MyException extends Exception { } Callable < Void > callable = new Callable < Void > ( ) { @Override public Void call ( ) throws Exception { assertEquals ( Thread . currentThread ( ) . getName ( ) , newName . get ( ) ) ; throw new MyException ( ) ; } } ; try { Callables . threadRenaming ( callable , newName ) . call ( ) ; fail ( ) ; } catch ( MyException expected ) { } assertEquals ( oldName , Thread . currentThread ( ) . getName ( ) ) ; } @GwtIncompatible ( <str> ) public void testRenaming_noPermissions ( ) throws Exception { System . setSecurityManager ( new SecurityManager ( ) { @Override public void checkAccess ( Thread t ) { throw new SecurityException ( ) ; } @Override public void checkPermission ( Permission perm ) { } } ) ; try { final String oldName = Thread . currentThread ( ) . getName ( ) ; Supplier < String > newName = Suppliers . ofInstance ( <str> ) ; Callable < Void > callable = new Callable < Void > ( ) { @Override public Void call ( ) throws Exception { assertEquals ( Thread . currentThread ( ) . getName ( ) , oldName ) ; return null ; } } ; Callables . threadRenaming ( callable , newName ) . call ( ) ; assertEquals ( oldName , Thread . currentThread ( ) . getName ( ) ) ; } finally { System . setSecurityManager ( null ) ; } } } 

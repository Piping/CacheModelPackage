package io . netty . handler . codec . base64 ; public enum Base64Dialect { STANDARD ( new byte [ ] { ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> } , new byte [ ] { - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , } , true ) , URL_SAFE ( new byte [ ] { ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> } , new byte [ ] { - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , } , false ) , ORDERED ( new byte [ ] { ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> , ( byte ) <str> } , new byte [ ] { - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , } , true ) ; final byte [ ] alphabet ; final byte [ ] decodabet ; final boolean breakLinesByDefault ; Base64Dialect ( byte [ ] alphabet , byte [ ] decodabet , boolean breakLinesByDefault ) { this . alphabet = alphabet ; this . decodabet = decodabet ; this . breakLinesByDefault = breakLinesByDefault ; } } 

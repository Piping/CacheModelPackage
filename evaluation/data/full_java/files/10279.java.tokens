package com . google . common . cache ; import junit . framework . TestCase ; public class CacheStatsTest extends TestCase { public void testEmpty ( ) { CacheStats stats = new CacheStats ( <int> , <int> , <int> , <int> , <int> , <int> ) ; assertEquals ( <int> , stats . requestCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertEquals ( <float> , stats . hitRate ( ) ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <float> , stats . missRate ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <float> , stats . loadExceptionRate ( ) ) ; assertEquals ( <int> , stats . loadCount ( ) ) ; assertEquals ( <int> , stats . totalLoadTime ( ) ) ; assertEquals ( <float> , stats . averageLoadPenalty ( ) ) ; assertEquals ( <int> , stats . evictionCount ( ) ) ; } public void testSingle ( ) { CacheStats stats = new CacheStats ( <int> , <int> , <int> , <int> , <int> , <int> ) ; assertEquals ( <int> , stats . requestCount ( ) ) ; assertEquals ( <int> , stats . hitCount ( ) ) ; assertEquals ( <float> / <int> , stats . hitRate ( ) ) ; assertEquals ( <int> , stats . missCount ( ) ) ; assertEquals ( <float> / <int> , stats . missRate ( ) ) ; assertEquals ( <int> , stats . loadSuccessCount ( ) ) ; assertEquals ( <int> , stats . loadExceptionCount ( ) ) ; assertEquals ( <float> / <int> , stats . loadExceptionRate ( ) ) ; assertEquals ( <int> + <int> , stats . loadCount ( ) ) ; assertEquals ( <int> , stats . totalLoadTime ( ) ) ; assertEquals ( <float> / ( <int> + <int> ) , stats . averageLoadPenalty ( ) ) ; assertEquals ( <int> , stats . evictionCount ( ) ) ; } public void testMinus ( ) { CacheStats one = new CacheStats ( <int> , <int> , <int> , <int> , <int> , <int> ) ; CacheStats two = new CacheStats ( <int> , <int> , <int> , <int> , <int> , <int> ) ; CacheStats diff = two . minus ( one ) ; assertEquals ( <int> , diff . requestCount ( ) ) ; assertEquals ( <int> , diff . hitCount ( ) ) ; assertEquals ( <float> / <int> , diff . hitRate ( ) ) ; assertEquals ( <int> , diff . missCount ( ) ) ; assertEquals ( <float> / <int> , diff . missRate ( ) ) ; assertEquals ( <int> , diff . loadSuccessCount ( ) ) ; assertEquals ( <int> , diff . loadExceptionCount ( ) ) ; assertEquals ( <float> / <int> , diff . loadExceptionRate ( ) ) ; assertEquals ( <int> + <int> , diff . loadCount ( ) ) ; assertEquals ( <int> , diff . totalLoadTime ( ) ) ; assertEquals ( <float> / ( <int> + <int> ) , diff . averageLoadPenalty ( ) ) ; assertEquals ( <int> , diff . evictionCount ( ) ) ; assertEquals ( new CacheStats ( <int> , <int> , <int> , <int> , <int> , <int> ) , one . minus ( two ) ) ; } public void testPlus ( ) { CacheStats one = new CacheStats ( <int> , <int> , <int> , <int> , <int> , <int> ) ; CacheStats two = new CacheStats ( <int> , <int> , <int> , <int> , <int> , <int> ) ; CacheStats sum = two . plus ( one ) ; assertEquals ( <int> , sum . requestCount ( ) ) ; assertEquals ( <int> , sum . hitCount ( ) ) ; assertEquals ( <float> / <int> , sum . hitRate ( ) ) ; assertEquals ( <int> , sum . missCount ( ) ) ; assertEquals ( <float> / <int> , sum . missRate ( ) ) ; assertEquals ( <int> , sum . loadSuccessCount ( ) ) ; assertEquals ( <int> , sum . loadExceptionCount ( ) ) ; assertEquals ( <float> / <int> , sum . loadExceptionRate ( ) ) ; assertEquals ( <int> + <int> , sum . loadCount ( ) ) ; assertEquals ( <int> , sum . totalLoadTime ( ) ) ; assertEquals ( <float> / ( <int> + <int> ) , sum . averageLoadPenalty ( ) ) ; assertEquals ( <int> , sum . evictionCount ( ) ) ; assertEquals ( sum , one . plus ( two ) ) ; } } 

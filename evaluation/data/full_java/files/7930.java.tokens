package org . elasticsearch . common . logging . log4j ; import org . apache . log4j . AppenderSkeleton ; import org . apache . log4j . Level ; import org . apache . log4j . Logger ; import org . apache . log4j . spi . LocationInfo ; import org . apache . log4j . spi . LoggingEvent ; import org . elasticsearch . common . logging . DeprecationLogger ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import org . junit . After ; import java . nio . file . Path ; import java . util . ArrayList ; import java . util . List ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class Log4jESLoggerTests extends ESTestCase { private ESLogger esTestLogger ; private TestAppender testAppender ; private String testLevel ; private DeprecationLogger deprecationLogger ; private TestAppender deprecationAppender ; @Override public void setUp ( ) throws Exception { super . setUp ( ) ; this . testLevel = Log4jESLoggerFactory . getLogger ( <str> ) . getLevel ( ) ; LogConfigurator . reset ( ) ; Path configDir = getDataPath ( <str> ) ; Settings settings = Settings . builder ( ) . put ( <str> , configDir . toAbsolutePath ( ) ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; LogConfigurator . configure ( settings , true ) ; esTestLogger = Log4jESLoggerFactory . getLogger ( <str> ) ; Logger testLogger = ( ( Log4jESLogger ) esTestLogger ) . logger ( ) ; assertThat ( testLogger . getLevel ( ) , equalTo ( Level . TRACE ) ) ; testAppender = new TestAppender ( ) ; testLogger . addAppender ( testAppender ) ; deprecationLogger = Log4jESLoggerFactory . getDeprecationLogger ( <str> ) ; deprecationAppender = new TestAppender ( ) ; ESLogger logger = Log4jESLoggerFactory . getLogger ( <str> ) ; logger . setLevel ( <str> ) ; ( ( ( Log4jESLogger ) logger ) . logger ( ) ) . addAppender ( deprecationAppender ) ; } @Override @After public void tearDown ( ) throws Exception { super . tearDown ( ) ; esTestLogger . setLevel ( testLevel ) ; Logger testLogger = ( ( Log4jESLogger ) esTestLogger ) . logger ( ) ; testLogger . removeAppender ( testAppender ) ; Logger deprecationLogger = ( ( Log4jESLogger ) Log4jESLoggerFactory . getLogger ( <str> ) ) . logger ( ) ; deprecationLogger . removeAppender ( deprecationAppender ) ; } public void testLocationInfoTest ( ) { esTestLogger . error ( <str> ) ; esTestLogger . warn ( <str> ) ; esTestLogger . info ( <str> ) ; esTestLogger . debug ( <str> ) ; esTestLogger . trace ( <str> ) ; List < LoggingEvent > events = testAppender . getEvents ( ) ; assertThat ( events , notNullValue ( ) ) ; assertThat ( events . size ( ) , equalTo ( <int> ) ) ; LoggingEvent event = events . get ( <int> ) ; assertThat ( event , notNullValue ( ) ) ; assertThat ( event . getLevel ( ) , equalTo ( Level . ERROR ) ) ; assertThat ( event . getRenderedMessage ( ) , equalTo ( <str> ) ) ; LocationInfo locationInfo = event . getLocationInformation ( ) ; assertThat ( locationInfo , notNullValue ( ) ) ; assertThat ( locationInfo . getClassName ( ) , equalTo ( Log4jESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( locationInfo . getMethodName ( ) , equalTo ( <str> ) ) ; event = events . get ( <int> ) ; assertThat ( event , notNullValue ( ) ) ; assertThat ( event . getLevel ( ) , equalTo ( Level . WARN ) ) ; assertThat ( event . getRenderedMessage ( ) , equalTo ( <str> ) ) ; locationInfo = event . getLocationInformation ( ) ; assertThat ( locationInfo , notNullValue ( ) ) ; assertThat ( locationInfo . getClassName ( ) , equalTo ( Log4jESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( locationInfo . getMethodName ( ) , equalTo ( <str> ) ) ; event = events . get ( <int> ) ; assertThat ( event , notNullValue ( ) ) ; assertThat ( event . getLevel ( ) , equalTo ( Level . INFO ) ) ; assertThat ( event . getRenderedMessage ( ) , equalTo ( <str> ) ) ; locationInfo = event . getLocationInformation ( ) ; assertThat ( locationInfo , notNullValue ( ) ) ; assertThat ( locationInfo . getClassName ( ) , equalTo ( Log4jESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( locationInfo . getMethodName ( ) , equalTo ( <str> ) ) ; event = events . get ( <int> ) ; assertThat ( event , notNullValue ( ) ) ; assertThat ( event . getLevel ( ) , equalTo ( Level . DEBUG ) ) ; assertThat ( event . getRenderedMessage ( ) , equalTo ( <str> ) ) ; locationInfo = event . getLocationInformation ( ) ; assertThat ( locationInfo , notNullValue ( ) ) ; assertThat ( locationInfo . getClassName ( ) , equalTo ( Log4jESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( locationInfo . getMethodName ( ) , equalTo ( <str> ) ) ; event = events . get ( <int> ) ; assertThat ( event , notNullValue ( ) ) ; assertThat ( event . getLevel ( ) , equalTo ( Level . TRACE ) ) ; assertThat ( event . getRenderedMessage ( ) , equalTo ( <str> ) ) ; locationInfo = event . getLocationInformation ( ) ; assertThat ( locationInfo , notNullValue ( ) ) ; assertThat ( locationInfo . getClassName ( ) , equalTo ( Log4jESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( locationInfo . getMethodName ( ) , equalTo ( <str> ) ) ; } public void testDeprecationLogger ( ) { deprecationLogger . deprecated ( <str> ) ; List < LoggingEvent > deprecationEvents = deprecationAppender . getEvents ( ) ; LoggingEvent event = deprecationEvents . get ( <int> ) ; assertThat ( event , notNullValue ( ) ) ; assertThat ( event . getLevel ( ) , equalTo ( Level . DEBUG ) ) ; assertThat ( event . getRenderedMessage ( ) , equalTo ( <str> ) ) ; } private static class TestAppender extends AppenderSkeleton { private List < LoggingEvent > events = new ArrayList < > ( ) ; @Override public void close ( ) { } @Override public boolean requiresLayout ( ) { return false ; } @Override protected void append ( LoggingEvent event ) { event . getLocationInformation ( ) ; events . add ( event ) ; } public List < LoggingEvent > getEvents ( ) { return events ; } } } 

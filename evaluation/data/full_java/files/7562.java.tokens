package org . elasticsearch . search . sort ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . query . QueryBuilder ; import java . io . IOException ; public class FieldSortBuilder extends SortBuilder { private final String fieldName ; private SortOrder order ; private Object missing ; private Boolean ignoreUnmapped ; private String unmappedType ; private String sortMode ; private QueryBuilder nestedFilter ; private String nestedPath ; public FieldSortBuilder ( String fieldName ) { if ( fieldName = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . fieldName = fieldName ; } @Override public FieldSortBuilder order ( SortOrder order ) { this . order = order ; return this ; } @Override public FieldSortBuilder missing ( Object missing ) { this . missing = missing ; return this ; } @Deprecated public FieldSortBuilder ignoreUnmapped ( boolean ignoreUnmapped ) { this . ignoreUnmapped = ignoreUnmapped ; return this ; } public FieldSortBuilder unmappedType ( String type ) { this . unmappedType = type ; return this ; } public FieldSortBuilder sortMode ( String sortMode ) { this . sortMode = sortMode ; return this ; } public FieldSortBuilder setNestedFilter ( QueryBuilder nestedFilter ) { this . nestedFilter = nestedFilter ; return this ; } public FieldSortBuilder setNestedPath ( String nestedPath ) { this . nestedPath = nestedPath ; return this ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( fieldName ) ; if ( order ! = null ) { builder . field ( <str> , order . toString ( ) ) ; } if ( missing ! = null ) { builder . field ( <str> , missing ) ; } if ( ignoreUnmapped ! = null ) { builder . field ( SortParseElement . IGNORE_UNMAPPED . getPreferredName ( ) , ignoreUnmapped ) ; } if ( unmappedType ! = null ) { builder . field ( SortParseElement . UNMAPPED_TYPE . getPreferredName ( ) , unmappedType ) ; } if ( sortMode ! = null ) { builder . field ( <str> , sortMode ) ; } if ( nestedFilter ! = null ) { builder . field ( <str> , nestedFilter , params ) ; } if ( nestedPath ! = null ) { builder . field ( <str> , nestedPath ) ; } builder . endObject ( ) ; return builder ; } } 

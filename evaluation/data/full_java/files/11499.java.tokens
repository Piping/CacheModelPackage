package org . gradle . api . internal . file . archive ; import org . apache . tools . tar . TarEntry ; import org . apache . tools . tar . TarOutputStream ; import org . apache . tools . zip . UnixStat ; import org . gradle . api . GradleException ; import org . gradle . api . file . FileCopyDetails ; import org . gradle . internal . ErroringAction ; import org . gradle . internal . IoActions ; import org . gradle . api . internal . file . CopyActionProcessingStreamAction ; import org . gradle . api . internal . file . archive . compression . ArchiveOutputStreamFactory ; import org . gradle . api . internal . file . copy . CopyAction ; import org . gradle . api . internal . file . copy . CopyActionProcessingStream ; import org . gradle . api . internal . file . copy . FileCopyDetailsInternal ; import org . gradle . api . internal . tasks . SimpleWorkResult ; import org . gradle . api . tasks . WorkResult ; import java . io . File ; import java . io . OutputStream ; public class TarCopyAction implements CopyAction { private final File tarFile ; private final ArchiveOutputStreamFactory compressor ; public TarCopyAction ( File tarFile , ArchiveOutputStreamFactory compressor ) { this . tarFile = tarFile ; this . compressor = compressor ; } public WorkResult execute ( final CopyActionProcessingStream stream ) { final OutputStream outStr ; try { outStr = compressor . createArchiveOutputStream ( tarFile ) ; } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , tarFile ) , e ) ; } IoActions . withResource ( outStr , new ErroringAction < OutputStream > ( ) { @Override protected void doExecute ( final OutputStream outStr ) throws Exception { TarOutputStream tarOutStr ; try { tarOutStr = new TarOutputStream ( outStr ) ; } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , tarFile ) , e ) ; } tarOutStr . setLongFileMode ( TarOutputStream . LONGFILE_GNU ) ; stream . process ( new StreamAction ( tarOutStr ) ) ; tarOutStr . close ( ) ; } } ) ; return new SimpleWorkResult ( true ) ; } private class StreamAction implements CopyActionProcessingStreamAction { private final TarOutputStream tarOutStr ; public StreamAction ( TarOutputStream tarOutStr ) { this . tarOutStr = tarOutStr ; } public void processFile ( FileCopyDetailsInternal details ) { if ( details . isDirectory ( ) ) { visitDir ( details ) ; } else { visitFile ( details ) ; } } private void visitFile ( FileCopyDetails fileDetails ) { try { TarEntry archiveEntry = new TarEntry ( fileDetails . getRelativePath ( ) . getPathString ( ) ) ; archiveEntry . setModTime ( fileDetails . getLastModified ( ) ) ; archiveEntry . setSize ( fileDetails . getSize ( ) ) ; archiveEntry . setMode ( UnixStat . FILE_FLAG | fileDetails . getMode ( ) ) ; tarOutStr . putNextEntry ( archiveEntry ) ; fileDetails . copyTo ( tarOutStr ) ; tarOutStr . closeEntry ( ) ; } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , fileDetails , tarFile ) , e ) ; } } private void visitDir ( FileCopyDetails dirDetails ) { try { TarEntry archiveEntry = new TarEntry ( dirDetails . getRelativePath ( ) . getPathString ( ) + <str> ) ; archiveEntry . setModTime ( dirDetails . getLastModified ( ) ) ; archiveEntry . setMode ( UnixStat . DIR_FLAG | dirDetails . getMode ( ) ) ; tarOutStr . putNextEntry ( archiveEntry ) ; tarOutStr . closeEntry ( ) ; } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , dirDetails , tarFile ) , e ) ; } } } } 

package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input ; import com . badlogic . gdx . InputProcessor ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . ParticleEffect ; import com . badlogic . gdx . graphics . g2d . ParticleEmitter ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; public class ParticleEmitterTest extends GdxTest { private SpriteBatch spriteBatch ; ParticleEffect effect ; int emitterIndex ; Array < ParticleEmitter > emitters ; int particleCount = <int> ; float fpsCounter ; InputProcessor inputProcessor ; @Override public void create ( ) { spriteBatch = new SpriteBatch ( ) ; effect = new ParticleEffect ( ) ; effect . load ( Gdx . files . internal ( <str> ) , Gdx . files . internal ( <str> ) ) ; effect . setPosition ( Gdx . graphics . getWidth ( ) / <int> , Gdx . graphics . getHeight ( ) / <int> ) ; emitters = new Array ( effect . getEmitters ( ) ) ; effect . getEmitters ( ) . clear ( ) ; effect . getEmitters ( ) . add ( emitters . get ( <int> ) ) ; inputProcessor = new InputProcessor ( ) { public boolean touchUp ( int x , int y , int pointer , int button ) { return false ; } public boolean touchDragged ( int x , int y , int pointer ) { effect . setPosition ( x , Gdx . graphics . getHeight ( ) - y ) ; return false ; } public boolean touchDown ( int x , int y , int pointer , int newParam ) { ParticleEmitter emitter = emitters . get ( emitterIndex ) ; particleCount + = <int> ; System . out . println ( particleCount ) ; particleCount = Math . max ( <int> , particleCount ) ; if ( particleCount > emitter . getMaxParticleCount ( ) ) emitter . setMaxParticleCount ( particleCount * <int> ) ; emitter . getEmission ( ) . setHigh ( particleCount / emitter . getLife ( ) . getHighMax ( ) * <int> ) ; effect . getEmitters ( ) . clear ( ) ; effect . getEmitters ( ) . add ( emitter ) ; return false ; } public boolean keyUp ( int keycode ) { return false ; } public boolean keyTyped ( char character ) { return false ; } public boolean keyDown ( int keycode ) { ParticleEmitter emitter = emitters . get ( emitterIndex ) ; if ( keycode = = Input . Keys . DPAD_UP ) particleCount + = <int> ; else if ( keycode = = Input . Keys . DPAD_DOWN ) particleCount - = <int> ; else if ( keycode = = Input . Keys . SPACE ) { emitterIndex = ( emitterIndex + <int> ) % emitters . size ; emitter = emitters . get ( emitterIndex ) ; if ( emitter . isComplete ( ) ) emitter . reset ( ) ; particleCount = ( int ) ( emitter . getEmission ( ) . getHighMax ( ) * emitter . getLife ( ) . getHighMax ( ) / <int> f ) ; } else if ( keycode = = Input . Keys . ENTER ) { emitter = emitters . get ( emitterIndex ) ; if ( emitter . isComplete ( ) ) emitter . reset ( ) ; else emitter . allowCompletion ( ) ; } else return false ; particleCount = Math . max ( <int> , particleCount ) ; if ( particleCount > emitter . getMaxParticleCount ( ) ) emitter . setMaxParticleCount ( particleCount * <int> ) ; emitter . getEmission ( ) . setHigh ( particleCount / emitter . getLife ( ) . getHighMax ( ) * <int> ) ; effect . getEmitters ( ) . clear ( ) ; effect . getEmitters ( ) . add ( emitter ) ; return false ; } @Override public boolean mouseMoved ( int x , int y ) { return false ; } @Override public boolean scrolled ( int amount ) { return false ; } } ; Gdx . input . setInputProcessor ( inputProcessor ) ; } @Override public void dispose ( ) { spriteBatch . dispose ( ) ; effect . dispose ( ) ; } public void render ( ) { spriteBatch . getProjectionMatrix ( ) . setToOrtho2D ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; float delta = Gdx . graphics . getDeltaTime ( ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; spriteBatch . begin ( ) ; effect . draw ( spriteBatch , delta ) ; spriteBatch . end ( ) ; fpsCounter + = delta ; if ( fpsCounter > <int> ) { fpsCounter = <int> ; int activeCount = emitters . get ( emitterIndex ) . getActiveCount ( ) ; Gdx . app . log ( <str> , activeCount + <str> + particleCount + <str> + Gdx . graphics . getFramesPerSecond ( ) ) ; } } public boolean needsGL20 ( ) { return false ; } } 

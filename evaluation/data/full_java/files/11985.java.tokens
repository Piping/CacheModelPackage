package org . gradle . groovy . scripts . internal ; import org . codehaus . groovy . ast . CodeVisitorSupport ; import org . codehaus . groovy . ast . DynamicVariable ; import org . codehaus . groovy . ast . expr . * ; import org . codehaus . groovy . control . CompilationFailedException ; import org . codehaus . groovy . control . Phases ; import org . codehaus . groovy . control . SourceUnit ; import java . util . Collections ; import java . util . List ; public class TaskDefinitionScriptTransformer extends AbstractScriptTransformer { protected int getPhase ( ) { return Phases . CANONICALIZATION ; } public void call ( SourceUnit source ) throws CompilationFailedException { AstUtils . visitScriptCode ( source , new TaskDefinitionTransformer ( ) ) ; } private class TaskDefinitionTransformer extends CodeVisitorSupport { @Override public void visitMethodCallExpression ( MethodCallExpression call ) { doVisitMethodCallExpression ( call ) ; super . visitMethodCallExpression ( call ) ; } private void doVisitMethodCallExpression ( MethodCallExpression call ) { if ( ! isInstanceMethod ( call , <str> ) ) { return ; } ArgumentListExpression args = ( ArgumentListExpression ) call . getArguments ( ) ; if ( args . getExpressions ( ) . size ( ) = = <int> | | args . getExpressions ( ) . size ( ) > <int> ) { return ; } if ( args . getExpressions ( ) . size ( ) > <int> ) { if ( args . getExpression ( <int> ) instanceof MapExpression & & args . getExpression ( <int> ) instanceof VariableExpression ) { transformVariableExpression ( call , <int> ) ; } else if ( args . getExpression ( <int> ) instanceof VariableExpression ) { transformVariableExpression ( call , <int> ) ; } return ; } Expression arg = args . getExpression ( <int> ) ; if ( arg instanceof VariableExpression ) { transformVariableExpression ( call , <int> ) ; } else if ( arg instanceof BinaryExpression ) { transformBinaryExpression ( call , ( BinaryExpression ) arg ) ; } else if ( arg instanceof MethodCallExpression ) { maybeTransformNestedMethodCall ( ( MethodCallExpression ) arg , call ) ; } } private void transformVariableExpression ( MethodCallExpression call , int index ) { ArgumentListExpression args = ( ArgumentListExpression ) call . getArguments ( ) ; VariableExpression arg = ( VariableExpression ) args . getExpression ( index ) ; if ( ! isDynamicVar ( arg ) ) { return ; } String taskName = arg . getText ( ) ; call . setMethod ( new ConstantExpression ( <str> ) ) ; args . getExpressions ( ) . set ( index , new ConstantExpression ( taskName ) ) ; } private void transformBinaryExpression ( MethodCallExpression call , BinaryExpression expression ) { if ( expression . getLeftExpression ( ) instanceof VariableExpression | | expression . getLeftExpression ( ) instanceof GStringExpression | | expression . getLeftExpression ( ) instanceof ConstantExpression ) { call . setMethod ( new ConstantExpression ( <str> ) ) ; Expression argument ; if ( expression . getLeftExpression ( ) instanceof VariableExpression ) { argument = new ConstantExpression ( expression . getLeftExpression ( ) . getText ( ) ) ; } else { argument = expression . getLeftExpression ( ) ; } expression . setLeftExpression ( new MethodCallExpression ( call . getObjectExpression ( ) , <str> , argument ) ) ; } else if ( expression . getLeftExpression ( ) instanceof MethodCallExpression ) { MethodCallExpression transformedCall = new MethodCallExpression ( call . getObjectExpression ( ) , <str> , new ArgumentListExpression ( ) ) ; boolean transformed = maybeTransformNestedMethodCall ( ( MethodCallExpression ) expression . getLeftExpression ( ) , transformedCall ) ; if ( transformed ) { call . setMethod ( new ConstantExpression ( <str> ) ) ; expression . setLeftExpression ( transformedCall ) ; } } } private boolean maybeTransformNestedMethodCall ( MethodCallExpression nestedMethod , MethodCallExpression target ) { if ( ! ( isTaskIdentifier ( nestedMethod . getMethod ( ) ) & & AstUtils . targetIsThis ( nestedMethod ) ) ) { return false ; } Expression taskName = nestedMethod . getMethod ( ) ; Expression mapArg = null ; List < Expression > extraArgs = Collections . emptyList ( ) ; if ( nestedMethod . getArguments ( ) instanceof TupleExpression ) { TupleExpression nestedArgs = ( TupleExpression ) nestedMethod . getArguments ( ) ; if ( nestedArgs . getExpressions ( ) . size ( ) = = <int> & & nestedArgs . getExpression ( <int> ) instanceof MapExpression & & nestedArgs . getExpression ( <int> ) instanceof ClosureExpression ) { mapArg = nestedArgs . getExpression ( <int> ) ; extraArgs = nestedArgs . getExpressions ( ) . subList ( <int> , nestedArgs . getExpressions ( ) . size ( ) ) ; } else if ( nestedArgs . getExpressions ( ) . size ( ) = = <int> & & nestedArgs . getExpression ( <int> ) instanceof ClosureExpression ) { extraArgs = nestedArgs . getExpressions ( ) ; } else if ( nestedArgs . getExpressions ( ) . size ( ) = = <int> & & nestedArgs . getExpression ( <int> ) instanceof NamedArgumentListExpression ) { mapArg = nestedArgs . getExpression ( <int> ) ; } else if ( nestedArgs . getExpressions ( ) . size ( ) ! = <int> ) { return false ; } } target . setMethod ( new ConstantExpression ( <str> ) ) ; ArgumentListExpression args = ( ArgumentListExpression ) target . getArguments ( ) ; args . getExpressions ( ) . clear ( ) ; if ( mapArg ! = null ) { args . addExpression ( mapArg ) ; } args . addExpression ( taskName ) ; for ( Expression extraArg : extraArgs ) { args . addExpression ( extraArg ) ; } return true ; } private boolean isInstanceMethod ( MethodCallExpression call , String name ) { boolean isTaskMethod = AstUtils . isMethodOnThis ( call , name ) ; if ( ! isTaskMethod ) { return false ; } return call . getArguments ( ) instanceof ArgumentListExpression ; } private boolean isTaskIdentifier ( Expression expression ) { return expression instanceof ConstantExpression | | expression instanceof GStringExpression ; } private boolean isDynamicVar ( Expression expression ) { if ( ! ( expression instanceof VariableExpression ) ) { return false ; } VariableExpression variableExpression = ( VariableExpression ) expression ; return variableExpression . getAccessedVariable ( ) instanceof DynamicVariable ; } } } 

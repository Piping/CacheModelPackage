package org . eclipse . debug . internal . ui . viewers . update ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . List ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . internal . ui . elements . adapters . DefaultBreakpointsViewInput ; import org . eclipse . debug . internal . ui . model . elements . BreakpointManagerContentProvider ; import org . eclipse . debug . internal . ui . viewers . model . ViewerAdapterService ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementContentProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . provisional . AbstractModelProxy ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . swt . widgets . Widget ; import org . eclipse . ui . progress . WorkbenchJob ; public class BreakpointManagerProxy extends AbstractModelProxy { final private BreakpointManagerContentProvider fProvider ; final private DefaultBreakpointsViewInput fInput ; private Job fFireModelChangedJob ; private static class DeltaInfo { final boolean fSelect ; final IModelDelta fDelta ; DeltaInfo ( boolean selectDelta , IModelDelta delta ) { fSelect = selectDelta ; fDelta = delta ; } } private List < DeltaInfo > fPendingDeltas = new LinkedList < DeltaInfo > ( ) ; public BreakpointManagerProxy ( Object input , IPresentationContext context ) { super ( ) ; DefaultBreakpointsViewInput bpmInput = null ; BreakpointManagerContentProvider bpmProvider = null ; if ( input instanceof DefaultBreakpointsViewInput ) { bpmInput = ( DefaultBreakpointsViewInput ) input ; IElementContentProvider provider = ViewerAdapterService . getContentProvider ( input ) ; if ( provider instanceof BreakpointManagerContentProvider ) { bpmProvider = ( BreakpointManagerContentProvider ) provider ; } } fInput = bpmInput ; fProvider = bpmProvider ; } @Override public void installed ( Viewer viewer ) { super . installed ( viewer ) ; if ( fProvider ! = null ) { fProvider . registerModelProxy ( fInput , this ) ; } } @Override public void dispose ( ) { fProvider . unregisterModelProxy ( fInput , this ) ; synchronized ( this ) { if ( fFireModelChangedJob ! = null ) { fFireModelChangedJob . cancel ( ) ; fFireModelChangedJob = null ; } fPendingDeltas . clear ( ) ; } super . dispose ( ) ; } public synchronized void postModelChanged ( IModelDelta delta , boolean select ) { if ( isDisposed ( ) ) { return ; } Widget viewerControl = getViewer ( ) . getControl ( ) ; if ( viewerControl = = null ) { return ; } if ( select ) { for ( Iterator < DeltaInfo > itr = fPendingDeltas . iterator ( ) ; itr . hasNext ( ) ; ) { if ( itr . next ( ) . fSelect ) { itr . remove ( ) ; } } } fPendingDeltas . add ( new DeltaInfo ( select , delta ) ) ; if ( fFireModelChangedJob = = null ) { fFireModelChangedJob = new WorkbenchJob ( viewerControl . getDisplay ( ) , <str> ) { { setSystem ( true ) ; } @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { Object [ ] deltas ; synchronized ( BreakpointManagerProxy . this ) { deltas = fPendingDeltas . toArray ( ) ; fPendingDeltas . clear ( ) ; fFireModelChangedJob = null ; } for ( int i = <int> ; i < deltas . length ; i + + ) { fireModelChanged ( ( ( DeltaInfo ) deltas [ i ] ) . fDelta ) ; } return Status . OK_STATUS ; } } ; fFireModelChangedJob . schedule ( ) ; } } } 

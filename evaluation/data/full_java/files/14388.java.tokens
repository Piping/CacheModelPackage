package org . gradle . model . internal . manage . schema . extract ; import com . google . common . collect . Lists ; import org . gradle . internal . exceptions . Contextual ; import org . gradle . model . internal . type . ModelType ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . util . Deque ; @Contextual public class InvalidManagedModelElementTypeException extends RuntimeException { private static String createPathString ( DefaultModelSchemaExtractionContext < ? > extractionContext ) { StringBuilder prefix = new StringBuilder ( <str> ) ; StringWriter out = new StringWriter ( ) ; PrintWriter writer = new PrintWriter ( out ) ; Deque < String > descriptions = Lists . newLinkedList ( ) ; DefaultModelSchemaExtractionContext < ? > current = extractionContext ; while ( current ! = null ) { descriptions . push ( current . getDescription ( ) ) ; current = current . getParent ( ) ; } writer . println ( descriptions . pop ( ) ) ; while ( ! descriptions . isEmpty ( ) ) { writer . print ( prefix ) ; writer . print ( <str> ) ; writer . print ( descriptions . pop ( ) ) ; if ( ! descriptions . isEmpty ( ) ) { writer . println ( ) ; prefix . append ( <str> ) ; } } return out . toString ( ) ; } private static String getMessage ( DefaultModelSchemaExtractionContext < ? > extractionContext , String message ) { ModelType < ? > type = extractionContext . getType ( ) ; StringWriter out = new StringWriter ( ) ; PrintWriter writer = new PrintWriter ( out ) ; writer . print ( <str> + type + <str> + message ) ; if ( extractionContext . getParent ( ) ! = null ) { writer . println ( ) ; writer . println ( <str> ) ; writer . print ( createPathString ( extractionContext ) ) ; } return out . toString ( ) ; } public InvalidManagedModelElementTypeException ( ModelSchemaExtractionContext < ? > extractionContext , String message ) { this ( extractionContext , message , null ) ; } public InvalidManagedModelElementTypeException ( ModelSchemaExtractionContext < ? > extractionContext , String message , Throwable throwable ) { super ( getMessage ( ( DefaultModelSchemaExtractionContext < ? > ) extractionContext , message ) , throwable ) ; } } 

package org . elasticsearch . action . admin . cluster . stats ; import org . elasticsearch . Version ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . client . Requests ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . concurrent . EsExecutors ; import org . elasticsearch . index . store . Store ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . hamcrest . Matchers ; import java . io . IOException ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> , numClientNodes = <int> ) public class ClusterStatsIT extends ESIntegTestCase { private void assertCounts ( ClusterStatsNodes . Counts counts , int total , int masterOnly , int dataOnly , int masterData , int client ) { assertThat ( counts . getTotal ( ) , Matchers . equalTo ( total ) ) ; assertThat ( counts . getMasterOnly ( ) , Matchers . equalTo ( masterOnly ) ) ; assertThat ( counts . getDataOnly ( ) , Matchers . equalTo ( dataOnly ) ) ; assertThat ( counts . getMasterData ( ) , Matchers . equalTo ( masterData ) ) ; assertThat ( counts . getClient ( ) , Matchers . equalTo ( client ) ) ; } private void waitForNodes ( int numNodes ) { ClusterHealthResponse actionGet = client ( ) . admin ( ) . cluster ( ) . health ( Requests . clusterHealthRequest ( ) . waitForEvents ( Priority . LANGUID ) . waitForNodes ( Integer . toString ( numNodes ) ) ) . actionGet ( ) ; assertThat ( actionGet . isTimedOut ( ) , is ( false ) ) ; } public void testNodeCounts ( ) { ClusterStatsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertCounts ( response . getNodesStats ( ) . getCounts ( ) , <int> , <int> , <int> , <int> , <int> ) ; internalCluster ( ) . startNode ( Settings . builder ( ) . put ( <str> , false ) ) ; waitForNodes ( <int> ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertCounts ( response . getNodesStats ( ) . getCounts ( ) , <int> , <int> , <int> , <int> , <int> ) ; internalCluster ( ) . startNode ( Settings . builder ( ) . put ( <str> , false ) ) ; waitForNodes ( <int> ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertCounts ( response . getNodesStats ( ) . getCounts ( ) , <int> , <int> , <int> , <int> , <int> ) ; internalCluster ( ) . startNode ( Settings . builder ( ) . put ( <str> , true ) ) ; waitForNodes ( <int> ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertCounts ( response . getNodesStats ( ) . getCounts ( ) , <int> , <int> , <int> , <int> , <int> ) ; } private void assertShardStats ( ClusterStatsIndices . ShardStats stats , int indices , int total , int primaries , double replicationFactor ) { assertThat ( stats . getIndices ( ) , Matchers . equalTo ( indices ) ) ; assertThat ( stats . getTotal ( ) , Matchers . equalTo ( total ) ) ; assertThat ( stats . getPrimaries ( ) , Matchers . equalTo ( primaries ) ) ; assertThat ( stats . getReplication ( ) , Matchers . equalTo ( replicationFactor ) ) ; } public void testIndicesShardStats ( ) { ClusterStatsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getStatus ( ) , Matchers . equalTo ( ClusterHealthStatus . GREEN ) ) ; prepareCreate ( <str> ) . setSettings ( <str> , <int> , <str> , <int> ) . get ( ) ; ensureYellow ( ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getStatus ( ) , Matchers . equalTo ( ClusterHealthStatus . YELLOW ) ) ; assertThat ( response . indicesStats . getDocs ( ) . getCount ( ) , Matchers . equalTo ( <int> l ) ) ; assertThat ( response . indicesStats . getIndexCount ( ) , Matchers . equalTo ( <int> ) ) ; assertShardStats ( response . getIndicesStats ( ) . getShards ( ) , <int> , <int> , <int> , <float> ) ; internalCluster ( ) . startNode ( ) ; ensureGreen ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; refresh ( ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getStatus ( ) , Matchers . equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( response . indicesStats . getDocs ( ) . getCount ( ) , Matchers . equalTo ( <int> ) ) ; assertShardStats ( response . getIndicesStats ( ) . getShards ( ) , <int> , <int> , <int> , <float> ) ; prepareCreate ( <str> ) . setSettings ( <str> , <int> , <str> , <int> ) . get ( ) ; ensureGreen ( ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getStatus ( ) , Matchers . equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( response . indicesStats . getIndexCount ( ) , Matchers . equalTo ( <int> ) ) ; assertShardStats ( response . getIndicesStats ( ) . getShards ( ) , <int> , <int> , <int> , <float> / <int> ) ; assertThat ( response . getIndicesStats ( ) . getShards ( ) . getAvgIndexPrimaryShards ( ) , Matchers . equalTo ( <float> ) ) ; assertThat ( response . getIndicesStats ( ) . getShards ( ) . getMinIndexPrimaryShards ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( response . getIndicesStats ( ) . getShards ( ) . getMaxIndexPrimaryShards ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( response . getIndicesStats ( ) . getShards ( ) . getAvgIndexShards ( ) , Matchers . equalTo ( <float> ) ) ; assertThat ( response . getIndicesStats ( ) . getShards ( ) . getMinIndexShards ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( response . getIndicesStats ( ) . getShards ( ) . getMaxIndexShards ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( response . getIndicesStats ( ) . getShards ( ) . getAvgIndexReplication ( ) , Matchers . equalTo ( <float> ) ) ; assertThat ( response . getIndicesStats ( ) . getShards ( ) . getMinIndexReplication ( ) , Matchers . equalTo ( <float> ) ) ; assertThat ( response . getIndicesStats ( ) . getShards ( ) . getMaxIndexReplication ( ) , Matchers . equalTo ( <float> ) ) ; } public void testValuesSmokeScreen ( ) throws IOException { internalCluster ( ) . ensureAtMostNumDataNodes ( <int> ) ; internalCluster ( ) . ensureAtLeastNumDataNodes ( <int> ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( Store . INDEX_STORE_STATS_REFRESH_INTERVAL , <int> ) . build ( ) ) ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; ensureYellow ( <str> ) ; ClusterStatsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; String msg = response . toString ( ) ; assertThat ( msg , response . getTimestamp ( ) , Matchers . greaterThan ( <int> ) ) ; assertThat ( msg , response . indicesStats . getStore ( ) . getSizeInBytes ( ) , Matchers . greaterThan ( <int> l ) ) ; assertThat ( msg , response . nodesStats . getFs ( ) . getTotal ( ) . bytes ( ) , Matchers . greaterThan ( <int> l ) ) ; assertThat ( msg , response . nodesStats . getJvm ( ) . getVersions ( ) . size ( ) , Matchers . greaterThan ( <int> ) ) ; assertThat ( msg , response . nodesStats . getVersions ( ) . size ( ) , Matchers . greaterThan ( <int> ) ) ; assertThat ( msg , response . nodesStats . getVersions ( ) . contains ( Version . CURRENT ) , Matchers . equalTo ( true ) ) ; assertThat ( msg , response . nodesStats . getPlugins ( ) . size ( ) , Matchers . greaterThanOrEqualTo ( <int> ) ) ; assertThat ( msg , response . nodesStats . getProcess ( ) . count , Matchers . greaterThan ( <int> ) ) ; assertThat ( msg , response . nodesStats . getProcess ( ) . getAvgOpenFileDescriptors ( ) , Matchers . greaterThanOrEqualTo ( <int> L ) ) ; assertThat ( msg , response . nodesStats . getProcess ( ) . getMinOpenFileDescriptors ( ) , Matchers . greaterThanOrEqualTo ( - <int> ) ) ; assertThat ( msg , response . nodesStats . getProcess ( ) . getMaxOpenFileDescriptors ( ) , Matchers . greaterThanOrEqualTo ( - <int> ) ) ; } public void testAllocatedProcessors ( ) throws Exception { internalCluster ( ) . ensureAtMostNumDataNodes ( <int> ) ; internalCluster ( ) . startNodesAsync ( Settings . builder ( ) . put ( EsExecutors . PROCESSORS , <int> ) . build ( ) ) . get ( ) ; waitForNodes ( <int> ) ; ClusterStatsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getNodesStats ( ) . getOs ( ) . getAllocatedProcessors ( ) , equalTo ( <int> ) ) ; } public void testClusterStatusWhenStateNotRecovered ( ) throws Exception { internalCluster ( ) . ensureAtMostNumDataNodes ( <int> ) ; internalCluster ( ) . startNode ( Settings . builder ( ) . put ( <str> , <int> ) . build ( ) ) ; ClusterStatsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getStatus ( ) , equalTo ( ClusterHealthStatus . RED ) ) ; internalCluster ( ) . ensureAtLeastNumDataNodes ( <int> ) ; ensureGreen ( ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; } } 

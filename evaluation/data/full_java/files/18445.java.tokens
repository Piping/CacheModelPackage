package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . audio . AudioDevice ; import com . badlogic . gdx . tests . utils . GdxTest ; public class AudioDeviceTest extends GdxTest { Thread thread ; boolean stop = false ; @Override public void create ( ) { if ( thread = = null ) { final AudioDevice device = Gdx . app . getAudio ( ) . newAudioDevice ( <int> , false ) ; thread = new Thread ( new Runnable ( ) { @Override public void run ( ) { final float frequency = <int> ; float increment = ( float ) ( <int> * Math . PI ) * frequency / <int> ; float angle = <int> ; float samples [ ] = new float [ <int> ] ; while ( ! stop ) { for ( int i = <int> ; i < samples . length ; i + = <int> ) { samples [ i ] = <float> * ( float ) Math . sin ( angle ) ; samples [ i + <int> ] = <int> * samples [ i ] ; angle + = increment ; } device . writeSamples ( samples , <int> , samples . length ) ; } device . dispose ( ) ; } } ) ; thread . start ( ) ; } } @Override public void dispose ( ) { stop = true ; try { thread . join ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } } 

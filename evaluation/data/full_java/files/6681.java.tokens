package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanQuery ; import org . apache . lucene . search . spans . SpanWithinQuery ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . Objects ; public class SpanWithinQueryBuilder extends AbstractQueryBuilder < SpanWithinQueryBuilder > implements SpanQueryBuilder < SpanWithinQueryBuilder > { public static final String NAME = <str> ; private final SpanQueryBuilder big ; private final SpanQueryBuilder little ; static final SpanWithinQueryBuilder PROTOTYPE = new SpanWithinQueryBuilder ( SpanTermQueryBuilder . PROTOTYPE , SpanTermQueryBuilder . PROTOTYPE ) ; public SpanWithinQueryBuilder ( SpanQueryBuilder big , SpanQueryBuilder little ) { if ( big = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( little = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . little = little ; this . big = big ; } public SpanQueryBuilder littleQuery ( ) { return this . little ; } public SpanQueryBuilder bigQuery ( ) { return this . big ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . field ( SpanWithinQueryParser . BIG_FIELD . getPreferredName ( ) ) ; big . toXContent ( builder , params ) ; builder . field ( SpanWithinQueryParser . LITTLE_FIELD . getPreferredName ( ) ) ; little . toXContent ( builder , params ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { Query innerBig = big . toQuery ( context ) ; assert innerBig instanceof SpanQuery ; Query innerLittle = little . toQuery ( context ) ; assert innerLittle instanceof SpanQuery ; return new SpanWithinQuery ( ( SpanQuery ) innerBig , ( SpanQuery ) innerLittle ) ; } @Override protected SpanWithinQueryBuilder doReadFrom ( StreamInput in ) throws IOException { SpanQueryBuilder big = ( SpanQueryBuilder ) in . readQuery ( ) ; SpanQueryBuilder little = ( SpanQueryBuilder ) in . readQuery ( ) ; return new SpanWithinQueryBuilder ( big , little ) ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeQuery ( big ) ; out . writeQuery ( little ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( big , little ) ; } @Override protected boolean doEquals ( SpanWithinQueryBuilder other ) { return Objects . equals ( big , other . big ) & & Objects . equals ( little , other . little ) ; } @Override public String getWriteableName ( ) { return NAME ; } } 

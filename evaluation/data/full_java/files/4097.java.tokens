package org . eclipse . debug . internal . ui . actions . variables ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . IDialogSettings ; import org . eclipse . jface . dialogs . IInputValidator ; import org . eclipse . jface . dialogs . TrayDialog ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . ModifyEvent ; import org . eclipse . swt . events . ModifyListener ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Text ; public class ChangeVariableValueInputDialog extends TrayDialog { private String title ; private String message ; private String value = IInternalDebugCoreConstants . EMPTY_STRING ; private IInputValidator validator ; private Button okButton ; private Text text ; private Label errorMessageLabel ; public ChangeVariableValueInputDialog ( Shell parentShell , String dialogTitle , String dialogMessage , String initialValue , IInputValidator validator ) { super ( parentShell ) ; this . title = dialogTitle ; message = dialogMessage ; if ( initialValue = = null ) value = IInternalDebugCoreConstants . EMPTY_STRING ; else value = initialValue ; this . validator = validator ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; } @Override protected void buttonPressed ( int buttonId ) { if ( buttonId = = IDialogConstants . OK_ID ) { value = text . getText ( ) ; } else { value = null ; } super . buttonPressed ( buttonId ) ; } @Override protected void configureShell ( Shell shell ) { super . configureShell ( shell ) ; if ( title ! = null ) shell . setText ( title ) ; } @Override protected void createButtonsForButtonBar ( Composite parent ) { okButton = createButton ( parent , IDialogConstants . OK_ID , IDialogConstants . OK_LABEL , true ) ; createButton ( parent , IDialogConstants . CANCEL_ID , IDialogConstants . CANCEL_LABEL , false ) ; text . setFocus ( ) ; if ( value ! = null ) { text . setText ( value ) ; text . selectAll ( ) ; } } @Override protected Control createDialogArea ( Composite parent ) { Font font = parent . getFont ( ) ; Composite composite = ( Composite ) super . createDialogArea ( parent ) ; if ( message ! = null ) { Label label = new Label ( composite , SWT . WRAP ) ; label . setText ( message ) ; GridData data = new GridData ( GridData . GRAB_HORIZONTAL | GridData . HORIZONTAL_ALIGN_FILL | GridData . VERTICAL_ALIGN_CENTER ) ; data . widthHint = convertHorizontalDLUsToPixels ( IDialogConstants . MINIMUM_MESSAGE_AREA_WIDTH ) ; label . setLayoutData ( data ) ; label . setFont ( font ) ; } text = new Text ( composite , SWT . MULTI | SWT . BORDER | SWT . V_SCROLL | SWT . H_SCROLL ) ; GridData gridData = new GridData ( GridData . GRAB_HORIZONTAL | GridData . HORIZONTAL_ALIGN_FILL | GridData . GRAB_VERTICAL | GridData . VERTICAL_ALIGN_FILL ) ; gridData . heightHint = <int> ; gridData . widthHint = <int> ; text . setLayoutData ( gridData ) ; text . setFont ( font ) ; text . addModifyListener ( new ModifyListener ( ) { @Override public void modifyText ( ModifyEvent e ) { if ( okButton . isEnabled ( ) ) { return ; } errorMessageLabel . setText ( IInternalDebugCoreConstants . EMPTY_STRING ) ; errorMessageLabel . getParent ( ) . update ( ) ; okButton . setEnabled ( true ) ; } } ) ; errorMessageLabel = new Label ( composite , SWT . NONE ) ; errorMessageLabel . setLayoutData ( new GridData ( GridData . GRAB_HORIZONTAL | GridData . HORIZONTAL_ALIGN_FILL ) ) ; errorMessageLabel . setFont ( font ) ; return composite ; } protected Label getErrorMessageLabel ( ) { return errorMessageLabel ; } protected Button getOkButton ( ) { return okButton ; } protected Text getText ( ) { return text ; } protected IInputValidator getValidator ( ) { return validator ; } public String getValue ( ) { return value ; } protected void validateInput ( ) { String errorMessage = null ; if ( validator ! = null ) { errorMessage = validator . isValid ( text . getText ( ) ) ; } errorMessageLabel . setText ( errorMessage = = null ? IInternalDebugCoreConstants . EMPTY_STRING : errorMessage ) ; okButton . setEnabled ( errorMessage = = null ) ; errorMessageLabel . getParent ( ) . update ( ) ; } @Override protected void okPressed ( ) { validateInput ( ) ; if ( okButton . isEnabled ( ) ) { super . okPressed ( ) ; } } protected String getDialogSettingsSectionName ( ) { return IDebugUIConstants . PLUGIN_ID + <str> ; } @Override protected IDialogSettings getDialogBoundsSettings ( ) { IDialogSettings settings = DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) ; IDialogSettings section = settings . getSection ( getDialogSettingsSectionName ( ) ) ; if ( section = = null ) { section = settings . addNewSection ( getDialogSettingsSectionName ( ) ) ; } return section ; } @Override protected void handleShellCloseEvent ( ) { value = null ; super . handleShellCloseEvent ( ) ; } } 

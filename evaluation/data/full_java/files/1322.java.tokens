package org . apache . cassandra ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . OutputStream ; import java . io . StringWriter ; import java . text . NumberFormat ; import junit . framework . AssertionFailedError ; import junit . framework . Test ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . taskdefs . optional . junit . IgnoredTestListener ; import org . apache . tools . ant . taskdefs . optional . junit . JUnitResultFormatter ; import org . apache . tools . ant . taskdefs . optional . junit . JUnitTest ; import org . apache . tools . ant . taskdefs . optional . junit . JUnitTestRunner ; import org . apache . tools . ant . taskdefs . optional . junit . JUnitVersionHelper ; import org . apache . tools . ant . util . FileUtils ; import org . apache . tools . ant . util . StringUtils ; public class CassandraBriefJUnitResultFormatter implements JUnitResultFormatter , IgnoredTestListener { private static final double ONE_SECOND = <float> ; private static final String tag = System . getProperty ( <str> , <str> ) ; private static final Boolean keepBriefBrief = Boolean . getBoolean ( <str> ) ; private OutputStream out ; private BufferedWriter output ; private StringWriter results ; private BufferedWriter resultWriter ; private NumberFormat numberFormat = NumberFormat . getInstance ( ) ; private String systemOutput = null ; private String systemError = null ; public CassandraBriefJUnitResultFormatter ( ) { results = new StringWriter ( ) ; resultWriter = new BufferedWriter ( results ) ; } public void setOutput ( OutputStream out ) { this . out = out ; output = new BufferedWriter ( new java . io . OutputStreamWriter ( out ) ) ; } public void setSystemOutput ( String out ) { systemOutput = out ; } public void setSystemError ( String err ) { systemError = err ; } public void startTestSuite ( JUnitTest suite ) { if ( output = = null ) { return ; } StringBuffer sb = new StringBuffer ( <str> ) ; String n = suite . getName ( ) ; if ( n ! = null & & ! tag . isEmpty ( ) ) n = n + <str> + tag ; sb . append ( n ) ; sb . append ( StringUtils . LINE_SEP ) ; try { output . write ( sb . toString ( ) ) ; output . flush ( ) ; } catch ( IOException ex ) { throw new BuildException ( ex ) ; } } public void endTestSuite ( JUnitTest suite ) { StringBuffer sb = new StringBuffer ( <str> ) ; String n = suite . getName ( ) ; if ( n ! = null & & ! tag . isEmpty ( ) ) n = n + <str> + tag ; sb . append ( n ) ; sb . append ( <str> ) ; sb . append ( suite . runCount ( ) ) ; sb . append ( <str> ) ; sb . append ( suite . failureCount ( ) ) ; sb . append ( <str> ) ; sb . append ( suite . errorCount ( ) ) ; sb . append ( <str> ) ; sb . append ( suite . skipCount ( ) ) ; sb . append ( <str> ) ; sb . append ( numberFormat . format ( suite . getRunTime ( ) / ONE_SECOND ) ) ; sb . append ( <str> ) ; sb . append ( StringUtils . LINE_SEP ) ; sb . append ( StringUtils . LINE_SEP ) ; if ( ! keepBriefBrief & & systemOutput ! = null & & systemOutput . length ( ) > <int> ) { sb . append ( <str> ) . append ( StringUtils . LINE_SEP ) . append ( systemOutput ) . append ( <str> ) . append ( StringUtils . LINE_SEP ) ; } if ( ! keepBriefBrief & & systemError ! = null & & systemError . length ( ) > <int> ) { sb . append ( <str> ) . append ( StringUtils . LINE_SEP ) . append ( systemError ) . append ( <str> ) . append ( StringUtils . LINE_SEP ) ; } if ( output ! = null ) { try { output . write ( sb . toString ( ) ) ; resultWriter . close ( ) ; output . write ( results . toString ( ) ) ; } catch ( IOException ex ) { throw new BuildException ( ex ) ; } finally { try { output . flush ( ) ; } catch ( IOException ex ) { } if ( out ! = System . out & & out ! = System . err ) { FileUtils . close ( out ) ; } } } } public void startTest ( Test test ) { } public void endTest ( Test test ) { } public void addFailure ( Test test , Throwable t ) { formatError ( <str> , test , t ) ; } public void addFailure ( Test test , AssertionFailedError t ) { addFailure ( test , ( Throwable ) t ) ; } public void addError ( Test test , Throwable error ) { formatError ( <str> , test , error ) ; } protected String formatTest ( Test test ) { if ( test = = null ) { return <str> ; } else { if ( ! tag . isEmpty ( ) ) return <str> + test . toString ( ) + <str> + tag + <str> ; return <str> + test . toString ( ) + <str> ; } } protected synchronized void formatError ( String type , Test test , Throwable error ) { if ( test ! = null ) { endTest ( test ) ; } try { resultWriter . write ( formatTest ( test ) + type ) ; resultWriter . newLine ( ) ; resultWriter . write ( String . valueOf ( error . getMessage ( ) ) ) ; resultWriter . newLine ( ) ; String strace = JUnitTestRunner . getFilteredTrace ( error ) ; resultWriter . write ( strace ) ; resultWriter . newLine ( ) ; resultWriter . newLine ( ) ; } catch ( IOException ex ) { throw new BuildException ( ex ) ; } } public void testIgnored ( Test test ) { formatSkip ( test , JUnitVersionHelper . getIgnoreMessage ( test ) ) ; } public void formatSkip ( Test test , String message ) { if ( test ! = null ) { endTest ( test ) ; } try { resultWriter . write ( formatTest ( test ) + <str> ) ; if ( message ! = null ) { resultWriter . write ( <str> ) ; resultWriter . write ( message ) ; } resultWriter . newLine ( ) ; } catch ( IOException ex ) { throw new BuildException ( ex ) ; } } public void testAssumptionFailure ( Test test , Throwable cause ) { formatSkip ( test , cause . getMessage ( ) ) ; } } 

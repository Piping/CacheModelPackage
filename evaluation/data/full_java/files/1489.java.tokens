package org . apache . cassandra . db . filter ; import java . awt . * ; import java . nio . ByteBuffer ; import java . util . * ; import java . util . List ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . db . * ; import org . junit . Test ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . db . marshal . Int32Type ; import org . apache . cassandra . utils . ByteBufferUtil ; import static org . junit . Assert . * ; public class SliceTest { @Test public void testIntersectsSingleSlice ( ) { List < AbstractType < ? > > types = new ArrayList < > ( ) ; types . add ( Int32Type . instance ) ; types . add ( Int32Type . instance ) ; types . add ( Int32Type . instance ) ; ClusteringComparator cc = new ClusteringComparator ( types ) ; ClusteringPrefix . Kind sk = ClusteringPrefix . Kind . INCL_START_BOUND ; ClusteringPrefix . Kind ek = ClusteringPrefix . Kind . INCL_END_BOUND ; Slice slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> ) , makeBound ( ek , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> ) , makeBound ( ek , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> ) , makeBound ( ek , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> ) , makeBound ( ek , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> , <int> , <int> ) , columnNames ( <int> , <int> , <int> ) ) ) ; } @Test public void testDifferentMinMaxLengths ( ) { List < AbstractType < ? > > types = new ArrayList < > ( ) ; types . add ( Int32Type . instance ) ; types . add ( Int32Type . instance ) ; types . add ( Int32Type . instance ) ; ClusteringComparator cc = new ClusteringComparator ( types ) ; ClusteringPrefix . Kind sk = ClusteringPrefix . Kind . INCL_START_BOUND ; ClusteringPrefix . Kind ek = ClusteringPrefix . Kind . INCL_END_BOUND ; Slice slice = Slice . make ( makeBound ( sk ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( <int> ) , columnNames ( <int> , <int> ) ) ) ; slice = Slice . make ( makeBound ( sk ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> , <int> , <int> ) , makeBound ( ek , <int> ) ) ; assertTrue ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( ) , columnNames ( <int> ) ) ) ; slice = Slice . make ( makeBound ( sk , <int> ) , makeBound ( ek , <int> , <int> , <int> ) ) ; assertFalse ( slice . intersects ( cc , columnNames ( <int> ) , columnNames ( <int> , <int> ) ) ) ; } @Test public void testSliceNormalization ( ) { List < AbstractType < ? > > types = new ArrayList < > ( ) ; types . add ( Int32Type . instance ) ; types . add ( Int32Type . instance ) ; types . add ( Int32Type . instance ) ; ClusteringComparator cc = new ClusteringComparator ( types ) ; assertSlicesNormalization ( cc , slices ( s ( <int> , <int> ) , s ( <int> , <int> ) ) , slices ( s ( <int> , <int> ) ) ) ; assertSlicesNormalization ( cc , slices ( s ( <int> , <int> ) , s ( <int> , <int> ) ) , slices ( s ( <int> , <int> ) ) ) ; assertSlicesNormalization ( cc , slices ( s ( <int> , <int> ) , s ( <int> , <int> ) , s ( <int> , <int> ) ) , slices ( s ( <int> , <int> ) , s ( <int> , <int> ) ) ) ; assertSlicesNormalization ( cc , slices ( s ( - <int> , <int> ) , s ( - <int> , <int> ) ) , slices ( s ( - <int> , <int> ) ) ) ; assertSlicesNormalization ( cc , slices ( s ( - <int> , <int> ) , s ( - <int> , <int> ) , s ( <int> , <int> ) ) , slices ( s ( - <int> , <int> ) , s ( <int> , <int> ) ) ) ; } private static Slice . Bound makeBound ( ClusteringPrefix . Kind kind , Integer . . . components ) { ByteBuffer [ ] values = new ByteBuffer [ components . length ] ; for ( int i = <int> ; i < components . length ; i + + ) { values [ i ] = ByteBufferUtil . bytes ( components [ i ] ) ; } return Slice . Bound . create ( kind , values ) ; } private static List < ByteBuffer > columnNames ( Integer . . . components ) { List < ByteBuffer > names = new ArrayList < > ( components . length ) ; for ( int component : components ) names . add ( ByteBufferUtil . bytes ( component ) ) ; return names ; } private static Slice s ( int start , int finish ) { return Slice . make ( makeBound ( ClusteringPrefix . Kind . INCL_START_BOUND , start ) , makeBound ( ClusteringPrefix . Kind . INCL_END_BOUND , finish ) ) ; } private Slice [ ] slices ( Slice . . . slices ) { return slices ; } private static void assertSlicesNormalization ( ClusteringComparator cc , Slice [ ] original , Slice [ ] expected ) { Slices . Builder builder = new Slices . Builder ( cc ) ; for ( Slice s : original ) builder . add ( s ) ; Slices slices = builder . build ( ) ; assertEquals ( expected . length , slices . size ( ) ) ; for ( int i = <int> ; i < expected . length ; i + + ) assertEquals ( expected [ i ] , slices . get ( i ) ) ; } } 

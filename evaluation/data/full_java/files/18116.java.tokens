package com . badlogic . gdx . graphics . glutils ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . TextureData ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class GLOnlyTextureData implements TextureData { int width = <int> ; int height = <int> ; boolean isPrepared = false ; int mipLevel = <int> ; int internalFormat ; int format ; int type ; public GLOnlyTextureData ( int width , int height , int mipMapLevel , int internalFormat , int format , int type ) { this . width = width ; this . height = height ; this . mipLevel = mipMapLevel ; this . internalFormat = internalFormat ; this . format = format ; this . type = type ; } @Override public TextureDataType getType ( ) { return TextureDataType . Custom ; } @Override public boolean isPrepared ( ) { return isPrepared ; } @Override public void prepare ( ) { if ( isPrepared ) throw new GdxRuntimeException ( <str> ) ; isPrepared = true ; } @Override public void consumeCustomData ( int target ) { Gdx . gl . glTexImage2D ( target , mipLevel , internalFormat , width , height , <int> , format , type , null ) ; } @Override public Pixmap consumePixmap ( ) { throw new GdxRuntimeException ( <str> ) ; } @Override public boolean disposePixmap ( ) { throw new GdxRuntimeException ( <str> ) ; } @Override public int getWidth ( ) { return width ; } @Override public int getHeight ( ) { return height ; } @Override public Format getFormat ( ) { return Format . RGBA8888 ; } @Override public boolean useMipMaps ( ) { return false ; } @Override public boolean isManaged ( ) { return false ; } } 

package org . gradle . process . internal . child ; import org . gradle . api . Action ; import org . gradle . internal . classloader . DefaultClassLoaderFactory ; import java . io . Serializable ; import java . net . URI ; import java . util . Collection ; import java . util . concurrent . Callable ; public class IsolatedApplicationClassLoaderWorker implements Callable < Void > , Serializable { private final Action < WorkerContext > worker ; private final Collection < URI > applicationClassPath ; public IsolatedApplicationClassLoaderWorker ( Collection < URI > applicationClassPath , Action < WorkerContext > worker ) { this . applicationClassPath = applicationClassPath ; this . worker = worker ; } public Void call ( ) throws Exception { final ClassLoader applicationClassLoader = createApplicationClassLoader ( ) ; WorkerContext context = new WorkerContext ( ) { public ClassLoader getApplicationClassLoader ( ) { return applicationClassLoader ; } } ; worker . execute ( context ) ; return null ; } private ClassLoader createApplicationClassLoader ( ) { return new DefaultClassLoaderFactory ( ) . createIsolatedClassLoader ( applicationClassPath ) ; } } 

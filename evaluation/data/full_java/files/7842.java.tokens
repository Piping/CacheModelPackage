package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . allocation . decider . ThrottlingAllocationDecider ; import org . elasticsearch . test . ESAllocationTestCase ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; public class AllocationPriorityTests extends ESAllocationTestCase { public void testPrioritizedIndicesAllocatedFirst ( ) { AllocationService allocation = createAllocationService ( settingsBuilder ( ) . put ( ThrottlingAllocationDecider . CLUSTER_ROUTING_ALLOCATION_CONCURRENT_RECOVERIES , <int> ) . put ( ThrottlingAllocationDecider . CLUSTER_ROUTING_ALLOCATION_NODE_INITIAL_PRIMARIES_RECOVERIES , <int> ) . put ( ThrottlingAllocationDecider . CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES , <int> ) . build ( ) ) ; final String highPriorityName ; final String lowPriorityName ; final int priorityFirst ; final int prioritySecond ; if ( randomBoolean ( ) ) { highPriorityName = <str> ; lowPriorityName = <str> ; prioritySecond = <int> ; priorityFirst = <int> ; } else { lowPriorityName = <str> ; highPriorityName = <str> ; prioritySecond = <int> ; priorityFirst = <int> ; } MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) . put ( IndexMetaData . SETTING_PRIORITY , priorityFirst ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) . put ( IndexMetaData . SETTING_PRIORITY , prioritySecond ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingAllocation . Result rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; routingTable = allocation . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertEquals ( <int> , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . size ( ) ) ; assertEquals ( highPriorityName , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . get ( <int> ) . index ( ) ) ; assertEquals ( highPriorityName , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . get ( <int> ) . index ( ) ) ; routingTable = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertEquals ( <int> , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . size ( ) ) ; assertEquals ( lowPriorityName , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . get ( <int> ) . index ( ) ) ; assertEquals ( lowPriorityName , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . get ( <int> ) . index ( ) ) ; routingTable = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertEquals ( <int> , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . size ( ) ) ; assertEquals ( highPriorityName , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . get ( <int> ) . index ( ) ) ; assertEquals ( highPriorityName , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . get ( <int> ) . index ( ) ) ; routingTable = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertEquals ( <int> , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . size ( ) ) ; assertEquals ( lowPriorityName , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . get ( <int> ) . index ( ) ) ; assertEquals ( lowPriorityName , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) . get ( <int> ) . index ( ) ) ; } } 

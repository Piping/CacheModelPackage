package org . gradle . api . plugins . buildcomparison . render . internal ; import org . gradle . api . plugins . buildcomparison . outcome . internal . BuildOutcome ; import java . util . HashMap ; import java . util . Map ; public class DefaultBuildOutcomeRendererFactory < C > implements BuildOutcomeRendererFactory < C > { private final Class < C > contextType ; private final Map < Class < ? extends BuildOutcome > , BuildOutcomeRenderer < ? , C > > renderers = new HashMap < Class < ? extends BuildOutcome > , BuildOutcomeRenderer < ? , C > > ( ) ; public DefaultBuildOutcomeRendererFactory ( Class < C > contextType ) { this . contextType = contextType ; } public < T extends BuildOutcome > void registerRenderer ( BuildOutcomeRenderer < T , C > renderer ) { if ( renderer . getContextType ( ) . isAssignableFrom ( contextType ) ) { renderers . put ( renderer . getOutcomeType ( ) , renderer ) ; } else { throw new IllegalArgumentException ( String . format ( <str> , renderer , renderer . getContextType ( ) , contextType ) ) ; } } public < T extends BuildOutcome > BuildOutcomeRenderer < T , C > getRenderer ( Class < ? extends T > resultType ) { return ( BuildOutcomeRenderer < T , C > ) renderers . get ( resultType ) ; } } 

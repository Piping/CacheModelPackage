package io . netty . bootstrap ; import io . netty . channel . ChannelHandlerAdapter ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelInboundHandlerAdapter ; import io . netty . channel . local . LocalEventLoopGroup ; import io . netty . channel . local . LocalServerChannel ; import org . junit . Test ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . atomic . AtomicReference ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertTrue ; public class ServerBootstrapTest { @Test ( timeout = <int> ) public void testHandlerRegister ( ) throws Exception { final CountDownLatch latch = new CountDownLatch ( <int> ) ; final AtomicReference < Throwable > error = new AtomicReference < Throwable > ( ) ; LocalEventLoopGroup group = new LocalEventLoopGroup ( <int> ) ; try { ServerBootstrap sb = new ServerBootstrap ( ) ; sb . channel ( LocalServerChannel . class ) . group ( group ) . childHandler ( new ChannelInboundHandlerAdapter ( ) ) . handler ( new ChannelHandlerAdapter ( ) { @Override public void handlerAdded ( ChannelHandlerContext ctx ) throws Exception { try { assertTrue ( ctx . executor ( ) . inEventLoop ( ) ) ; } catch ( Throwable cause ) { error . set ( cause ) ; } finally { latch . countDown ( ) ; } } } ) ; sb . register ( ) . syncUninterruptibly ( ) ; latch . await ( ) ; assertNull ( error . get ( ) ) ; } finally { group . shutdownGracefully ( ) ; } } } 

package jcuda . runtime ; import jcuda . Pointer ; public class cudaResourceDesc { public int resType ; public cudaArray array_array = new cudaArray ( ) ; public cudaMipmappedArray mipmap_mipmap = new cudaMipmappedArray ( ) ; public Pointer linear_devPtr = new Pointer ( ) ; public cudaChannelFormatDesc linear_desc = new cudaChannelFormatDesc ( ) ; public long linear_sizeInBytes ; public Pointer pitch2D_devPtr = new Pointer ( ) ; public cudaChannelFormatDesc pitch2D_desc = new cudaChannelFormatDesc ( ) ; public long pitch2D_width ; public long pitch2D_height ; public long pitch2D_pitchInBytes ; public cudaResourceDesc ( ) { } @Override public String toString ( ) { return <str> + createString ( <str> ) + <str> ; } public String toFormattedString ( ) { return <str> + createString ( <str> ) ; } private String createString ( String f ) { StringBuilder sb = new StringBuilder ( ) ; switch ( resType ) { case cudaResourceType . cudaResourceTypeArray : sb . append ( <str> + array_array + f ) ; break ; case cudaResourceType . cudaResourceTypeMipmappedArray : sb . append ( <str> + mipmap_mipmap + f ) ; break ; case cudaResourceType . cudaResourceTypeLinear : sb . append ( <str> + linear_devPtr + f ) ; sb . append ( <str> + linear_desc + f ) ; sb . append ( <str> + linear_sizeInBytes + f ) ; break ; case cudaResourceType . cudaResourceTypePitch2D : sb . append ( <str> + pitch2D_devPtr + f ) ; sb . append ( <str> + pitch2D_desc + f ) ; sb . append ( <str> + pitch2D_width + f ) ; sb . append ( <str> + pitch2D_height + f ) ; sb . append ( <str> + pitch2D_pitchInBytes + f ) ; break ; default: sb . append ( <str> ) ; } return sb . toString ( ) ; } } 

package com . badlogic . gdx . physics . bullet . linearmath ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btPlane extends BulletBase { private long swigCPtr ; protected btPlane ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btPlane ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btPlane obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; LinearMathJNI . delete_btPlane ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setNormal ( btVector3 value ) { LinearMathJNI . btPlane_normal_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getNormal ( ) { long cPtr = LinearMathJNI . btPlane_normal_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public void setDist ( float value ) { LinearMathJNI . btPlane_dist_set ( swigCPtr , this , value ) ; } public float getDist ( ) { return LinearMathJNI . btPlane_dist_get ( swigCPtr , this ) ; } public btPlane ( Vector3 n , float d ) { this ( LinearMathJNI . new_btPlane__SWIG_0 ( n , d ) , true ) ; } public btPlane ( ) { this ( LinearMathJNI . new_btPlane__SWIG_1 ( ) , true ) ; } } 

package org . apache . cassandra . cql3 ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . cql3 . statements . StatementType ; import com . google . common . collect . Iterables ; import com . google . common . collect . Iterators ; public final class Operations implements Iterable < Operation > { private final StatementType type ; private final List < Operation > regularOperations = new ArrayList < > ( ) ; private final List < Operation > staticOperations = new ArrayList < > ( ) ; public Operations ( StatementType type ) { this . type = type ; } public boolean appliesToStaticColumns ( ) { return ! staticOperations . isEmpty ( ) ; } public boolean appliesToRegularColumns ( ) { return ! regularOperations . isEmpty ( ) | | ( type . isDelete ( ) & & staticOperations . isEmpty ( ) ) ; } public List < Operation > regularOperations ( ) { return regularOperations ; } public List < Operation > staticOperations ( ) { return staticOperations ; } public void add ( Operation operation ) { if ( operation . column . isStatic ( ) ) staticOperations . add ( operation ) ; else regularOperations . add ( operation ) ; } public boolean requiresRead ( ) { for ( Operation operation : this ) if ( operation . requiresRead ( ) ) return true ; return false ; } public boolean isEmpty ( ) { return staticOperations . isEmpty ( ) & & regularOperations . isEmpty ( ) ; } @Override public Iterator < Operation > iterator ( ) { return Iterators . concat ( staticOperations . iterator ( ) , regularOperations . iterator ( ) ) ; } public Iterable < ? extends Function > getFunctions ( ) { List < Function > functions = new ArrayList < > ( ) ; for ( Operation operation : this ) Iterables . addAll ( functions , operation . getFunctions ( ) ) ; return functions ; } } 

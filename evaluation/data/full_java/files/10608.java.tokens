package com . google . common . reflect ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . reflect . Constructor ; public class ElementTest extends TestCase { public void testPrivateField ( ) throws Exception { Element element = A . field ( <str> ) ; assertTrue ( element . isPrivate ( ) ) ; assertFalse ( element . isAbstract ( ) ) ; assertFalse ( element . isPackagePrivate ( ) ) ; assertFalse ( element . isProtected ( ) ) ; assertFalse ( element . isPublic ( ) ) ; assertFalse ( element . isFinal ( ) ) ; assertFalse ( element . isStatic ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testPackagePrivateField ( ) throws Exception { Element element = A . field ( <str> ) ; assertFalse ( element . isPrivate ( ) ) ; assertTrue ( element . isPackagePrivate ( ) ) ; assertFalse ( element . isProtected ( ) ) ; assertFalse ( element . isPublic ( ) ) ; assertFalse ( element . isFinal ( ) ) ; assertFalse ( element . isStatic ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testProtectedField ( ) throws Exception { Element element = A . field ( <str> ) ; assertFalse ( element . isPrivate ( ) ) ; assertFalse ( element . isPackagePrivate ( ) ) ; assertTrue ( element . isProtected ( ) ) ; assertFalse ( element . isPublic ( ) ) ; assertFalse ( element . isFinal ( ) ) ; assertFalse ( element . isStatic ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testPublicField ( ) throws Exception { Element element = A . field ( <str> ) ; assertFalse ( element . isPrivate ( ) ) ; assertFalse ( element . isPackagePrivate ( ) ) ; assertFalse ( element . isProtected ( ) ) ; assertTrue ( element . isPublic ( ) ) ; assertFalse ( element . isFinal ( ) ) ; assertFalse ( element . isStatic ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testFinalField ( ) throws Exception { Element element = A . field ( <str> ) ; assertTrue ( element . isFinal ( ) ) ; assertFalse ( element . isStatic ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testStaticField ( ) throws Exception { Element element = A . field ( <str> ) ; assertTrue ( element . isStatic ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testVolatileField ( ) throws Exception { Element element = A . field ( <str> ) ; assertTrue ( element . isVolatile ( ) ) ; } public void testTransientField ( ) throws Exception { Element element = A . field ( <str> ) ; assertTrue ( element . isTransient ( ) ) ; } public void testConstructor ( ) throws Exception { Element element = A . constructor ( ) ; assertTrue ( element . isPublic ( ) ) ; assertFalse ( element . isPackagePrivate ( ) ) ; assertFalse ( element . isAbstract ( ) ) ; assertFalse ( element . isStatic ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testAbstractMethod ( ) throws Exception { Element element = A . method ( <str> ) ; assertTrue ( element . isPackagePrivate ( ) ) ; assertTrue ( element . isAbstract ( ) ) ; assertFalse ( element . isFinal ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testOverridableMethod ( ) throws Exception { Element element = A . method ( <str> ) ; assertTrue ( element . isPackagePrivate ( ) ) ; assertFalse ( element . isAbstract ( ) ) ; assertFalse ( element . isFinal ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testPrivateMethod ( ) throws Exception { Element element = A . method ( <str> ) ; assertFalse ( element . isAbstract ( ) ) ; assertTrue ( element . isPrivate ( ) ) ; assertFalse ( element . isPackagePrivate ( ) ) ; assertFalse ( element . isPublic ( ) ) ; assertFalse ( element . isProtected ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testProtectedMethod ( ) throws Exception { Element element = A . method ( <str> ) ; assertFalse ( element . isAbstract ( ) ) ; assertFalse ( element . isPrivate ( ) ) ; assertFalse ( element . isPackagePrivate ( ) ) ; assertFalse ( element . isFinal ( ) ) ; assertFalse ( element . isPublic ( ) ) ; assertTrue ( element . isProtected ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testFinalMethod ( ) throws Exception { Element element = A . method ( <str> ) ; assertFalse ( element . isAbstract ( ) ) ; assertFalse ( element . isPrivate ( ) ) ; assertTrue ( element . isFinal ( ) ) ; assertTrue ( element . isPublic ( ) ) ; assertTrue ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testNativeMethod ( ) throws Exception { Element element = A . method ( <str> ) ; assertTrue ( element . isNative ( ) ) ; assertTrue ( element . isPackagePrivate ( ) ) ; } public void testSynchronizedMethod ( ) throws Exception { Element element = A . method ( <str> ) ; assertTrue ( element . isSynchronized ( ) ) ; } public void testUnannotatedMethod ( ) throws Exception { Element element = A . method ( <str> ) ; assertFalse ( element . isAnnotationPresent ( Tested . class ) ) ; } public void testEquals ( ) throws Exception { new EqualsTester ( ) . addEqualityGroup ( A . field ( <str> ) , A . field ( <str> ) ) . addEqualityGroup ( A . field ( <str> ) ) . addEqualityGroup ( A . constructor ( ) , A . constructor ( ) ) . addEqualityGroup ( A . method ( <str> ) , A . method ( <str> ) ) . addEqualityGroup ( A . method ( <str> ) ) . testEquals ( ) ; } public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Element . class ) ; } @Retention ( RetentionPolicy . RUNTIME ) private @interface Tested { } private static abstract class A { @Tested private boolean privateField ; @Tested int packagePrivateField ; @Tested protected int protectedField ; @Tested public String publicField ; @Tested private static Iterable < String > staticField ; @Tested private final Object finalField ; private volatile char volatileField ; private transient long transientField ; @Tested public A ( Object finalField ) { this . finalField = finalField ; } @Tested abstract void abstractMethod ( ) ; @Tested void overridableMethod ( ) { } @Tested protected void protectedMethod ( ) { } @Tested private void privateMethod ( ) { } @Tested public final void publicFinalMethod ( ) { } void notAnnotatedMethod ( ) { } static Element field ( String name ) throws Exception { Element element = new Element ( A . class . getDeclaredField ( name ) ) ; assertEquals ( name , element . getName ( ) ) ; assertEquals ( A . class , element . getDeclaringClass ( ) ) ; return element ; } static Element constructor ( ) throws Exception { Constructor < ? > constructor = A . class . getDeclaredConstructor ( Object . class ) ; Element element = new Element ( constructor ) ; assertEquals ( constructor . getName ( ) , element . getName ( ) ) ; assertEquals ( A . class , element . getDeclaringClass ( ) ) ; return element ; } static Element method ( String name , Class < ? > . . . parameterTypes ) throws Exception { Element element = new Element ( A . class . getDeclaredMethod ( name , parameterTypes ) ) ; assertEquals ( name , element . getName ( ) ) ; assertEquals ( A . class , element . getDeclaringClass ( ) ) ; return element ; } native void nativeMethod ( ) ; synchronized void synchronizedMethod ( ) { } } } 

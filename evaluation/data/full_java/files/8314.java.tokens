package org . elasticsearch . indices ; import org . elasticsearch . action . admin . indices . stats . IndicesStatsResponse ; import org . elasticsearch . action . delete . DeleteResponse ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . hamcrest . ElasticsearchAssertions ; import org . joda . time . DateTime ; import org . joda . time . DateTimeZone ; import org . joda . time . format . DateTimeFormat ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . * ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; public class DateMathIndexExpressionsIntegrationIT extends ESIntegTestCase { public void testIndexNameDateMathExpressions ( ) { DateTime now = new DateTime ( DateTimeZone . UTC ) ; String index1 = <str> + DateTimeFormat . forPattern ( <str> ) . print ( now ) ; String index2 = <str> + DateTimeFormat . forPattern ( <str> ) . print ( now . minusDays ( <int> ) ) ; String index3 = <str> + DateTimeFormat . forPattern ( <str> ) . print ( now . minusDays ( <int> ) ) ; createIndex ( index1 , index2 , index3 ) ; String dateMathExp1 = <str> ; String dateMathExp2 = <str> ; String dateMathExp3 = <str> ; client ( ) . prepareIndex ( dateMathExp1 , <str> , <str> ) . setSource ( <str> ) . get ( ) ; client ( ) . prepareIndex ( dateMathExp2 , <str> , <str> ) . setSource ( <str> ) . get ( ) ; client ( ) . prepareIndex ( dateMathExp3 , <str> , <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( dateMathExp1 , dateMathExp2 , dateMathExp3 ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> , <str> ) ; GetResponse getResponse = client ( ) . prepareGet ( dateMathExp1 , <str> , <str> ) . get ( ) ; assertThat ( getResponse . isExists ( ) , is ( true ) ) ; assertThat ( getResponse . getId ( ) , equalTo ( <str> ) ) ; getResponse = client ( ) . prepareGet ( dateMathExp2 , <str> , <str> ) . get ( ) ; assertThat ( getResponse . isExists ( ) , is ( true ) ) ; assertThat ( getResponse . getId ( ) , equalTo ( <str> ) ) ; getResponse = client ( ) . prepareGet ( dateMathExp3 , <str> , <str> ) . get ( ) ; assertThat ( getResponse . isExists ( ) , is ( true ) ) ; assertThat ( getResponse . getId ( ) , equalTo ( <str> ) ) ; IndicesStatsResponse indicesStatsResponse = client ( ) . admin ( ) . indices ( ) . prepareStats ( dateMathExp1 , dateMathExp2 , dateMathExp3 ) . get ( ) ; assertThat ( indicesStatsResponse . getIndex ( index1 ) , notNullValue ( ) ) ; assertThat ( indicesStatsResponse . getIndex ( index2 ) , notNullValue ( ) ) ; assertThat ( indicesStatsResponse . getIndex ( index3 ) , notNullValue ( ) ) ; DeleteResponse deleteResponse = client ( ) . prepareDelete ( dateMathExp1 , <str> , <str> ) . get ( ) ; assertThat ( deleteResponse . isFound ( ) , equalTo ( true ) ) ; assertThat ( deleteResponse . getId ( ) , equalTo ( <str> ) ) ; deleteResponse = client ( ) . prepareDelete ( dateMathExp2 , <str> , <str> ) . get ( ) ; assertThat ( deleteResponse . isFound ( ) , equalTo ( true ) ) ; assertThat ( deleteResponse . getId ( ) , equalTo ( <str> ) ) ; deleteResponse = client ( ) . prepareDelete ( dateMathExp3 , <str> , <str> ) . get ( ) ; assertThat ( deleteResponse . isFound ( ) , equalTo ( true ) ) ; assertThat ( deleteResponse . getId ( ) , equalTo ( <str> ) ) ; } public void testAutoCreateIndexWithDateMathExpression ( ) throws Exception { DateTime now = new DateTime ( DateTimeZone . UTC ) ; String index1 = <str> + DateTimeFormat . forPattern ( <str> ) . print ( now ) ; String index2 = <str> + DateTimeFormat . forPattern ( <str> ) . print ( now . minusDays ( <int> ) ) ; String index3 = <str> + DateTimeFormat . forPattern ( <str> ) . print ( now . minusDays ( <int> ) ) ; String dateMathExp1 = <str> ; String dateMathExp2 = <str> ; String dateMathExp3 = <str> ; client ( ) . prepareIndex ( dateMathExp1 , <str> , <str> ) . setSource ( <str> ) . get ( ) ; client ( ) . prepareIndex ( dateMathExp2 , <str> , <str> ) . setSource ( <str> ) . get ( ) ; client ( ) . prepareIndex ( dateMathExp3 , <str> , <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( dateMathExp1 , dateMathExp2 , dateMathExp3 ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertSearchHits ( searchResponse , <str> , <str> , <str> ) ; IndicesStatsResponse indicesStatsResponse = client ( ) . admin ( ) . indices ( ) . prepareStats ( dateMathExp1 , dateMathExp2 , dateMathExp3 ) . get ( ) ; assertThat ( indicesStatsResponse . getIndex ( index1 ) , notNullValue ( ) ) ; assertThat ( indicesStatsResponse . getIndex ( index2 ) , notNullValue ( ) ) ; assertThat ( indicesStatsResponse . getIndex ( index3 ) , notNullValue ( ) ) ; } public void testCreateIndexWithDateMathExpression ( ) throws Exception { DateTime now = new DateTime ( DateTimeZone . UTC ) ; String index1 = <str> + DateTimeFormat . forPattern ( <str> ) . print ( now ) ; String index2 = <str> + DateTimeFormat . forPattern ( <str> ) . print ( now . minusDays ( <int> ) ) ; String index3 = <str> + DateTimeFormat . forPattern ( <str> ) . print ( now . minusDays ( <int> ) ) ; String dateMathExp1 = <str> ; String dateMathExp2 = <str> ; String dateMathExp3 = <str> ; createIndex ( dateMathExp1 , dateMathExp2 , dateMathExp3 ) ; ClusterState clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( clusterState . metaData ( ) . index ( index1 ) , notNullValue ( ) ) ; assertThat ( clusterState . metaData ( ) . index ( index2 ) , notNullValue ( ) ) ; assertThat ( clusterState . metaData ( ) . index ( index3 ) , notNullValue ( ) ) ; } } 

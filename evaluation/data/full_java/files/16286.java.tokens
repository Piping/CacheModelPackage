package org . gradle . foundation ; import org . gradle . api . Project ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . internal . project . ProjectTaskLister ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; public class BuildInformation { private List < ProjectView > projects ; public BuildInformation ( Project rootProject ) { ProjectTaskLister taskLister = ( ( ProjectInternal ) rootProject ) . getServices ( ) . get ( ProjectTaskLister . class ) ; ProjectConverter buildExecuter = new ProjectConverter ( taskLister ) ; projects = buildExecuter . convertProjects ( rootProject ) ; } public List < ProjectView > getProjects ( ) { return Collections . unmodifiableList ( projects ) ; } public ProjectView getRootLevelProject ( String name ) { if ( name = = null ) { return null ; } Iterator < ProjectView > iterator = projects . iterator ( ) ; while ( iterator . hasNext ( ) ) { ProjectView projectView = iterator . next ( ) ; if ( name . equals ( projectView . getName ( ) ) ) { return projectView ; } } return null ; } public ProjectView getProjectFromFullPath ( String fullProjectPath ) { if ( projects . isEmpty ( ) ) { return null ; } PathParserPortion pathParserPortion = new PathParserPortion ( fullProjectPath ) ; if ( pathParserPortion . getFirstPart ( ) = = null ) { return null ; } ProjectView rootProject = getRootLevelProject ( pathParserPortion . getFirstPart ( ) ) ; if ( rootProject = = null ) { if ( ! projects . isEmpty ( ) ) { rootProject = projects . get ( <int> ) ; } } if ( rootProject = = null ) { return null ; } if ( ! pathParserPortion . hasRemainder ( ) ) { return rootProject ; } return rootProject . getSubProjectFromFullPath ( pathParserPortion . getRemainder ( ) ) ; } public TaskView getTaskFromFullPath ( String fullTaskName ) { if ( projects . isEmpty ( ) ) { return null ; } PathParserPortion pathParserPortion = new PathParserPortion ( fullTaskName ) ; if ( pathParserPortion . getFirstPart ( ) = = null ) { return null ; } String remainder = pathParserPortion . getRemainder ( ) ; ProjectView rootProject = null ; if ( pathParserPortion . getFirstPart ( ) . equals ( <str> ) ) { if ( ! projects . isEmpty ( ) ) { rootProject = projects . get ( <int> ) ; } } else { rootProject = getRootLevelProject ( pathParserPortion . getFirstPart ( ) ) ; if ( rootProject = = null ) { if ( ! projects . isEmpty ( ) ) { rootProject = projects . get ( <int> ) ; remainder = fullTaskName ; } } } if ( rootProject ! = null ) { return rootProject . getTaskFromFullPath ( remainder ) ; } return null ; } } 

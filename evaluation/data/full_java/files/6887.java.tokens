package org . elasticsearch . monitor . fs ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . NodeEnvironment ; import org . elasticsearch . env . NodeEnvironment . NodePath ; import java . io . IOException ; public class FsProbe extends AbstractComponent { private final NodeEnvironment nodeEnv ; public FsProbe ( Settings settings , NodeEnvironment nodeEnv ) { super ( settings ) ; this . nodeEnv = nodeEnv ; } public FsInfo stats ( ) throws IOException { if ( ! nodeEnv . hasNodeFile ( ) ) { return new FsInfo ( System . currentTimeMillis ( ) , new FsInfo . Path [ <int> ] ) ; } NodePath [ ] dataLocations = nodeEnv . nodePaths ( ) ; FsInfo . Path [ ] paths = new FsInfo . Path [ dataLocations . length ] ; for ( int i = <int> ; i < dataLocations . length ; i + + ) { paths [ i ] = getFSInfo ( dataLocations [ i ] ) ; } return new FsInfo ( System . currentTimeMillis ( ) , paths ) ; } public static FsInfo . Path getFSInfo ( NodePath nodePath ) throws IOException { FsInfo . Path fsPath = new FsInfo . Path ( ) ; fsPath . path = nodePath . path . toAbsolutePath ( ) . toString ( ) ; fsPath . total = nodePath . fileStore . getTotalSpace ( ) ; fsPath . free = nodePath . fileStore . getUnallocatedSpace ( ) ; fsPath . available = nodePath . fileStore . getUsableSpace ( ) ; fsPath . type = nodePath . fileStore . type ( ) ; fsPath . mount = nodePath . fileStore . toString ( ) ; fsPath . spins = nodePath . spins ; return fsPath ; } } 

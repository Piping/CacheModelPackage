package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . Iterator ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . Viewer ; public class DeleteLaunchConfigurationAction extends AbstractLaunchConfigurationAction { public static final String ID_DELETE_ACTION = DebugUIPlugin . getUniqueIdentifier ( ) + <str> ; public DeleteLaunchConfigurationAction ( Viewer viewer , String mode ) { super ( LaunchConfigurationsMessages . DeleteLaunchConfigurationAction_Dele_te_1 , viewer , mode ) ; } protected boolean shouldDelete ( ) { IStructuredSelection selection = getStructuredSelection ( ) ; String dialogMessage = selection . size ( ) > <int> ? LaunchConfigurationsMessages . LaunchConfigurationDialog_Do_you_wish_to_delete_the_selected_launch_configurations__1 : LaunchConfigurationsMessages . LaunchConfigurationDialog_Do_you_wish_to_delete_the_selected_launch_configuration__2 ; return MessageDialog . openQuestion ( getShell ( ) , LaunchConfigurationsMessages . LaunchConfigurationDialog_Confirm_Launch_Configuration_Deletion_3 , dialogMessage ) ; } @Override protected void performAction ( ) { if ( ! shouldDelete ( ) ) { return ; } IStructuredSelection selection = getStructuredSelection ( ) ; getViewer ( ) . getControl ( ) . setRedraw ( false ) ; Iterator < ? > iterator = selection . iterator ( ) ; while ( iterator . hasNext ( ) ) { ILaunchConfiguration configuration = ( ILaunchConfiguration ) iterator . next ( ) ; try { configuration . delete ( ) ; } catch ( CoreException e ) { errorDialog ( e ) ; } } getViewer ( ) . getControl ( ) . setRedraw ( true ) ; } @Override protected boolean updateSelection ( IStructuredSelection selection ) { if ( selection . isEmpty ( ) ) { return false ; } Iterator < ? > items = selection . iterator ( ) ; while ( items . hasNext ( ) ) { if ( ! ( items . next ( ) instanceof ILaunchConfiguration ) ) { return false ; } } return true ; } @Override public ImageDescriptor getDisabledImageDescriptor ( ) { return DebugUITools . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_DELETE_CONFIG ) ; } @Override public ImageDescriptor getImageDescriptor ( ) { return DebugUITools . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_DELETE_CONFIG ) ; } @Override public String getToolTipText ( ) { return LaunchConfigurationsMessages . LaunchConfigurationsDialog_1 ; } } 

package org . elasticsearch . search . aggregations . pipeline . bucketmetrics ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentParser . Token ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . aggregations . pipeline . BucketHelpers . GapPolicy ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorFactory ; import org . elasticsearch . search . aggregations . support . format . ValueFormat ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; import java . text . ParseException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public abstract class BucketMetricsParser implements PipelineAggregator . Parser { public static final ParseField FORMAT = new ParseField ( <str> ) ; public BucketMetricsParser ( ) { super ( ) ; } @Override public final PipelineAggregatorFactory parse ( String pipelineAggregatorName , XContentParser parser , SearchContext context ) throws IOException { XContentParser . Token token ; String currentFieldName = null ; String [ ] bucketsPaths = null ; String format = null ; GapPolicy gapPolicy = GapPolicy . SKIP ; Map < String , Object > leftover = new HashMap < > ( <int> ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . VALUE_STRING ) { if ( context . parseFieldMatcher ( ) . match ( currentFieldName , FORMAT ) ) { format = parser . text ( ) ; } else if ( context . parseFieldMatcher ( ) . match ( currentFieldName , BUCKETS_PATH ) ) { bucketsPaths = new String [ ] { parser . text ( ) } ; } else if ( context . parseFieldMatcher ( ) . match ( currentFieldName , GAP_POLICY ) ) { gapPolicy = GapPolicy . parse ( context , parser . text ( ) , parser . getTokenLocation ( ) ) ; } else { leftover . put ( currentFieldName , parser . text ( ) ) ; } } else if ( token = = XContentParser . Token . START_ARRAY ) { if ( context . parseFieldMatcher ( ) . match ( currentFieldName , BUCKETS_PATH ) ) { List < String > paths = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { String path = parser . text ( ) ; paths . add ( path ) ; } bucketsPaths = paths . toArray ( new String [ paths . size ( ) ] ) ; } else { leftover . put ( currentFieldName , parser . list ( ) ) ; } } else { leftover . put ( currentFieldName , parser . objectText ( ) ) ; } } if ( bucketsPaths = = null ) { throw new SearchParseException ( context , <str> + BUCKETS_PATH . getPreferredName ( ) + <str> + pipelineAggregatorName + <str> , parser . getTokenLocation ( ) ) ; } ValueFormatter formatter = null ; if ( format ! = null ) { formatter = ValueFormat . Patternable . Number . format ( format ) . formatter ( ) ; } else { formatter = ValueFormatter . RAW ; } PipelineAggregatorFactory factory = null ; try { factory = buildFactory ( pipelineAggregatorName , bucketsPaths , gapPolicy , formatter , leftover ) ; } catch ( ParseException exception ) { throw new SearchParseException ( context , <str> + pipelineAggregatorName + <str> , null , exception ) ; } if ( leftover . size ( ) > <int> ) { throw new SearchParseException ( context , <str> + leftover . keySet ( ) + <str> + pipelineAggregatorName + <str> , null ) ; } assert ( factory ! = null ) ; return factory ; } protected abstract PipelineAggregatorFactory buildFactory ( String pipelineAggregatorName , String [ ] bucketsPaths , GapPolicy gapPolicy , ValueFormatter formatter , Map < String , Object > unparsedParams ) throws ParseException ; } 

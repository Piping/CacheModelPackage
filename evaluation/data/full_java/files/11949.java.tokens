package org . gradle . groovy . scripts ; import groovy . lang . MetaClass ; import org . gradle . api . internal . DynamicObject ; import org . gradle . api . internal . DynamicObjectUtil ; import org . gradle . api . internal . ProcessOperations ; import org . gradle . api . internal . file . FileOperations ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . logging . StandardOutputCapture ; import java . util . Map ; public abstract class BasicScript extends org . gradle . groovy . scripts . Script implements org . gradle . api . Script , FileOperations , ProcessOperations { private StandardOutputCapture standardOutputCapture ; private Object target ; private DynamicObject dynamicTarget ; public void init ( Object target , ServiceRegistry services ) { standardOutputCapture = services . get ( StandardOutputCapture . class ) ; setScriptTarget ( target ) ; } public Object getScriptTarget ( ) { return target ; } private void setScriptTarget ( Object target ) { this . target = target ; this . dynamicTarget = DynamicObjectUtil . asDynamicObject ( target ) ; } public StandardOutputCapture getStandardOutputCapture ( ) { return standardOutputCapture ; } public void setProperty ( String property , Object newValue ) { if ( <str> . equals ( property ) ) { setMetaClass ( ( MetaClass ) newValue ) ; } else if ( <str> . equals ( property ) ) { setScriptTarget ( newValue ) ; } else { dynamicTarget . setProperty ( property , newValue ) ; } } public Object propertyMissing ( String property ) { if ( <str> . equals ( property ) ) { return System . out ; } else { return dynamicTarget . getProperty ( property ) ; } } public Map < String , ? > getProperties ( ) { return dynamicTarget . getProperties ( ) ; } public boolean hasProperty ( String property ) { return dynamicTarget . hasProperty ( property ) ; } public Object methodMissing ( String name , Object params ) { return dynamicTarget . invokeMethod ( name , ( Object [ ] ) params ) ; } } 

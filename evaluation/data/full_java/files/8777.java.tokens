package org . elasticsearch . script . javascript ; import org . elasticsearch . common . collect . MapBuilder ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . script . CompiledScript ; import org . elasticsearch . script . ExecutableScript ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . test . ESTestCase ; import org . junit . After ; import org . junit . Before ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; public class JavaScriptScriptEngineTests extends ESTestCase { private JavaScriptScriptEngineService se ; @Before public void setup ( ) { se = new JavaScriptScriptEngineService ( Settings . Builder . EMPTY_SETTINGS ) ; } @After public void close ( ) { se . close ( ) ; } public void testSimpleEquation ( ) { Map < String , Object > vars = new HashMap < String , Object > ( ) ; Object o = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( <str> ) ) , vars ) . run ( ) ; assertThat ( ( ( Number ) o ) . intValue ( ) , equalTo ( <int> ) ) ; } public void testMapAccess ( ) { Map < String , Object > vars = new HashMap < String , Object > ( ) ; Map < String , Object > obj2 = MapBuilder . < String , Object > newMapBuilder ( ) . put ( <str> , <str> ) . map ( ) ; Map < String , Object > obj1 = MapBuilder . < String , Object > newMapBuilder ( ) . put ( <str> , <str> ) . put ( <str> , obj2 ) . put ( <str> , Arrays . asList ( <str> , <str> ) ) . map ( ) ; vars . put ( <str> , obj1 ) ; Object o = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( <str> ) ) , vars ) . run ( ) ; assertThat ( o , instanceOf ( Map . class ) ) ; obj1 = ( Map < String , Object > ) o ; assertThat ( ( String ) obj1 . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ( String ) ( ( Map < String , Object > ) obj1 . get ( <str> ) ) . get ( <str> ) , equalTo ( <str> ) ) ; o = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( <str> ) ) , vars ) . run ( ) ; assertThat ( ( ( String ) o ) , equalTo ( <str> ) ) ; } public void testJavaScriptObjectToMap ( ) { Map < String , Object > vars = new HashMap < String , Object > ( ) ; Object o = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( <str> ) ) , vars ) . run ( ) ; Map obj1 = ( Map ) o ; assertThat ( ( String ) obj1 . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ( String ) ( ( Map < String , Object > ) obj1 . get ( <str> ) ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testJavaScriptObjectMapInter ( ) { Map < String , Object > vars = new HashMap < String , Object > ( ) ; Map < String , Object > ctx = new HashMap < String , Object > ( ) ; Map < String , Object > obj1 = new HashMap < String , Object > ( ) ; obj1 . put ( <str> , <str> ) ; ctx . put ( <str> , obj1 ) ; vars . put ( <str> , ctx ) ; ExecutableScript executable = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( <str> ) ) , vars ) ; executable . run ( ) ; ctx = ( Map < String , Object > ) executable . unwrap ( vars . get ( <str> ) ) ; assertThat ( ctx . containsKey ( <str> ) , equalTo ( true ) ) ; assertThat ( ( String ) ( ( Map < String , Object > ) ctx . get ( <str> ) ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ctx . containsKey ( <str> ) , equalTo ( true ) ) ; assertThat ( ( String ) ( ( Map < String , Object > ) ctx . get ( <str> ) ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testJavaScriptInnerArrayCreation ( ) { Map < String , Object > ctx = new HashMap < String , Object > ( ) ; Map < String , Object > doc = new HashMap < String , Object > ( ) ; ctx . put ( <str> , doc ) ; Object compiled = se . compile ( <str> ) ; ExecutableScript script = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , compiled ) , new HashMap < String , Object > ( ) ) ; script . setNextVar ( <str> , ctx ) ; script . run ( ) ; Map < String , Object > unwrap = ( Map < String , Object > ) script . unwrap ( ctx ) ; assertThat ( ( ( Map ) unwrap . get ( <str> ) ) . get ( <str> ) , instanceOf ( List . class ) ) ; } public void testAccessListInScript ( ) { Map < String , Object > vars = new HashMap < String , Object > ( ) ; Map < String , Object > obj2 = MapBuilder . < String , Object > newMapBuilder ( ) . put ( <str> , <str> ) . map ( ) ; Map < String , Object > obj1 = MapBuilder . < String , Object > newMapBuilder ( ) . put ( <str> , <str> ) . put ( <str> , obj2 ) . map ( ) ; vars . put ( <str> , Arrays . asList ( <str> , <str> , <str> , obj1 ) ) ; Object o = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( <str> ) ) , vars ) . run ( ) ; assertThat ( ( ( Number ) o ) . intValue ( ) , equalTo ( <int> ) ) ; o = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( <str> ) ) , vars ) . run ( ) ; assertThat ( ( ( String ) o ) , equalTo ( <str> ) ) ; o = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( <str> ) ) , vars ) . run ( ) ; obj1 = ( Map < String , Object > ) o ; assertThat ( ( String ) obj1 . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ( String ) ( ( Map < String , Object > ) obj1 . get ( <str> ) ) . get ( <str> ) , equalTo ( <str> ) ) ; o = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( <str> ) ) , vars ) . run ( ) ; assertThat ( ( ( String ) o ) , equalTo ( <str> ) ) ; } public void testChangingVarsCrossExecution1 ( ) { Map < String , Object > vars = new HashMap < String , Object > ( ) ; Map < String , Object > ctx = new HashMap < String , Object > ( ) ; vars . put ( <str> , ctx ) ; Object compiledScript = se . compile ( <str> ) ; ExecutableScript script = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , compiledScript ) , vars ) ; ctx . put ( <str> , <int> ) ; Object o = script . run ( ) ; assertThat ( ( ( Number ) o ) . intValue ( ) , equalTo ( <int> ) ) ; ctx . put ( <str> , <int> ) ; o = script . run ( ) ; assertThat ( ( ( Number ) o ) . intValue ( ) , equalTo ( <int> ) ) ; } public void testChangingVarsCrossExecution2 ( ) { Map < String , Object > vars = new HashMap < String , Object > ( ) ; Object compiledScript = se . compile ( <str> ) ; ExecutableScript script = se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , compiledScript ) , vars ) ; script . setNextVar ( <str> , <int> ) ; Object o = script . run ( ) ; assertThat ( ( ( Number ) o ) . intValue ( ) , equalTo ( <int> ) ) ; script . setNextVar ( <str> , <int> ) ; o = script . run ( ) ; assertThat ( ( ( Number ) o ) . intValue ( ) , equalTo ( <int> ) ) ; } } 

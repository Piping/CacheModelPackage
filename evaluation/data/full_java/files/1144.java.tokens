package org . apache . cassandra . tools . nodetool ; import static com . google . common . base . Preconditions . checkArgument ; import static org . apache . commons . lang3 . StringUtils . join ; import io . airlift . command . Arguments ; import io . airlift . command . Command ; import io . airlift . command . Option ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import javax . management . openmbean . CompositeData ; import javax . management . openmbean . OpenDataException ; import javax . management . openmbean . TabularDataSupport ; import org . apache . cassandra . metrics . TableMetrics ; import org . apache . cassandra . metrics . TableMetrics . Sampler ; import org . apache . cassandra . tools . NodeProbe ; import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; import com . google . common . collect . Lists ; import com . google . common . collect . Ordering ; @Command ( name = <str> , description = <str> ) public class TopPartitions extends NodeToolCmd { @Arguments ( usage = <str> , description = <str> ) private List < String > args = new ArrayList < > ( ) ; @Option ( name = <str> , description = <str> ) private int size = <int> ; @Option ( name = <str> , description = <str> ) private int topCount = <int> ; @Option ( name = <str> , description = <str> ) private String samplers = join ( TableMetrics . Sampler . values ( ) , <str> ) ; @Override public void execute ( NodeProbe probe ) { checkArgument ( args . size ( ) = = <int> , <str> ) ; checkArgument ( topCount < size , <str> ) ; String keyspace = args . get ( <int> ) ; String cfname = args . get ( <int> ) ; Integer duration = Integer . parseInt ( args . get ( <int> ) ) ; List < Sampler > targets = Lists . newArrayList ( ) ; for ( String s : samplers . split ( <str> ) ) { try { targets . add ( Sampler . valueOf ( s . toUpperCase ( ) ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( s + <str> + join ( Sampler . values ( ) , <str> ) ) ; } } Map < Sampler , CompositeData > results ; try { results = probe . getPartitionSample ( keyspace , cfname , size , duration , topCount , targets ) ; } catch ( OpenDataException e ) { throw new RuntimeException ( e ) ; } boolean first = true ; for ( Entry < Sampler , CompositeData > result : results . entrySet ( ) ) { CompositeData sampling = result . getValue ( ) ; List < CompositeData > topk = ( List < CompositeData > ) ( Object ) Lists . newArrayList ( ( ( TabularDataSupport ) sampling . get ( <str> ) ) . values ( ) ) ; Collections . sort ( topk , new Ordering < CompositeData > ( ) { public int compare ( CompositeData left , CompositeData right ) { return Long . compare ( ( long ) right . get ( <str> ) , ( long ) left . get ( <str> ) ) ; } } ) ; if ( ! first ) System . out . println ( ) ; System . out . println ( result . getKey ( ) . toString ( ) + <str> ) ; System . out . printf ( <str> , ( long ) sampling . get ( <str> ) , size ) ; System . out . printf ( <str> , topCount ) ; if ( topk . size ( ) = = <int> ) { System . out . println ( <str> ) ; } else { int offset = <int> ; for ( CompositeData entry : topk ) offset = Math . max ( offset , entry . get ( <str> ) . toString ( ) . length ( ) ) ; System . out . printf ( <str> + offset + <str> , <str> , <str> , <str> ) ; for ( CompositeData entry : topk ) System . out . printf ( <str> + offset + <str> , entry . get ( <str> ) . toString ( ) , entry . get ( <str> ) , entry . get ( <str> ) ) ; } first = false ; } } } 

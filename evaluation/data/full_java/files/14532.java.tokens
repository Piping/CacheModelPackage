package org . gradle . internal . nativeintegration . filesystem . services ; import org . gradle . internal . nativeintegration . filesystem . FileModeAccessor ; import org . gradle . internal . nativeintegration . filesystem . FileModeMutator ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . io . IOException ; import java . util . concurrent . atomic . AtomicBoolean ; public class UnsupportedFilePermissions implements FileModeAccessor , FileModeMutator { private static final Logger LOGGER = LoggerFactory . getLogger ( UnsupportedFilePermissions . class ) ; private final AtomicBoolean warned = new AtomicBoolean ( ) ; private final FallbackStat stat = new FallbackStat ( ) ; private final EmptyChmod chmod = new EmptyChmod ( ) ; public int getUnixMode ( File f ) throws IOException { maybeWarn ( ) ; return stat . getUnixMode ( f ) ; } public void chmod ( File file , int mode ) throws Exception { maybeWarn ( ) ; chmod . chmod ( file , mode ) ; } private void maybeWarn ( ) { if ( warned . compareAndSet ( false , true ) ) { LOGGER . warn ( <str> ) ; } } } 

package io . netty . util . concurrent ; import java . util . Arrays ; final class DefaultFutureListeners { private GenericFutureListener < ? extends Future < ? > > [ ] listeners ; private int size ; private int progressiveSize ; @SuppressWarnings ( <str> ) DefaultFutureListeners ( GenericFutureListener < ? extends Future < ? > > first , GenericFutureListener < ? extends Future < ? > > second ) { listeners = new GenericFutureListener [ <int> ] ; listeners [ <int> ] = first ; listeners [ <int> ] = second ; size = <int> ; if ( first instanceof GenericProgressiveFutureListener ) { progressiveSize + + ; } if ( second instanceof GenericProgressiveFutureListener ) { progressiveSize + + ; } } public void add ( GenericFutureListener < ? extends Future < ? > > l ) { GenericFutureListener < ? extends Future < ? > > [ ] listeners = this . listeners ; final int size = this . size ; if ( size = = listeners . length ) { this . listeners = listeners = Arrays . copyOf ( listeners , size < < <int> ) ; } listeners [ size ] = l ; this . size = size + <int> ; if ( l instanceof GenericProgressiveFutureListener ) { progressiveSize + + ; } } public void remove ( GenericFutureListener < ? extends Future < ? > > l ) { final GenericFutureListener < ? extends Future < ? > > [ ] listeners = this . listeners ; int size = this . size ; for ( int i = <int> ; i < size ; i + + ) { if ( listeners [ i ] = = l ) { int listenersToMove = size - i - <int> ; if ( listenersToMove > <int> ) { System . arraycopy ( listeners , i + <int> , listeners , i , listenersToMove ) ; } listeners [ - - size ] = null ; this . size = size ; if ( l instanceof GenericProgressiveFutureListener ) { progressiveSize - - ; } return ; } } } public GenericFutureListener < ? extends Future < ? > > [ ] listeners ( ) { return listeners ; } public int size ( ) { return size ; } public int progressiveSize ( ) { return progressiveSize ; } } 

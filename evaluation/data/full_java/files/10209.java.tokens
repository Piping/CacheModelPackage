package com . google . common . hash ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import java . util . Random ; public class HashFunctionBenchmark { private static final Random random = new Random ( <int> ) ; @Param ( { <str> , <str> , <str> , <str> } ) private int size ; @Param HashFunctionEnum hashFunctionEnum ; private byte [ ] testBytes ; @BeforeExperiment void setUp ( ) { testBytes = new byte [ size ] ; random . nextBytes ( testBytes ) ; } @Benchmark int hashFunction ( int reps ) { HashFunction hashFunction = hashFunctionEnum . getHashFunction ( ) ; int result = <int> ; for ( int i = <int> ; i < reps ; i + + ) { result ^ = hashFunction . hashBytes ( testBytes ) . asBytes ( ) [ <int> ] ; } return result ; } @Benchmark int hashFunctionWithOffset ( int reps ) { HashFunction hashFunction = hashFunctionEnum . getHashFunction ( ) ; int result = <int> ; for ( int i = <int> ; i < reps ; i + + ) { result ^ = hashFunction . hashBytes ( testBytes , <int> , testBytes . length - <int> ) . asBytes ( ) [ <int> ] ; } return result ; } } 

package org . apache . cassandra . thrift ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . thrift . server . TServer ; public class TServerCustomFactory implements TServerFactory { private static Logger logger = LoggerFactory . getLogger ( TServerCustomFactory . class ) ; private final String serverType ; public TServerCustomFactory ( String serverType ) { assert serverType ! = null ; this . serverType = serverType ; } public TServer buildTServer ( TServerFactory . Args args ) { TServer server ; if ( ThriftServer . SYNC . equalsIgnoreCase ( serverType ) ) { server = new CustomTThreadPoolServer . Factory ( ) . buildTServer ( args ) ; } else if ( ThriftServer . ASYNC . equalsIgnoreCase ( serverType ) ) { server = new CustomTNonBlockingServer . Factory ( ) . buildTServer ( args ) ; logger . info ( String . format ( <str> , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; } else if ( ThriftServer . HSHA . equalsIgnoreCase ( serverType ) ) { server = new THsHaDisruptorServer . Factory ( ) . buildTServer ( args ) ; logger . info ( String . format ( <str> , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; } else { TServerFactory serverFactory ; try { serverFactory = ( TServerFactory ) Class . forName ( serverType ) . newInstance ( ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> + serverType , e ) ; } server = serverFactory . buildTServer ( args ) ; logger . info ( String . format ( <str> , server . getClass ( ) . getName ( ) , args . addr . getHostName ( ) , args . addr . getPort ( ) ) ) ; } return server ; } } 

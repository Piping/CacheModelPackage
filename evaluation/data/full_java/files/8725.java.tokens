package org . elasticsearch . discovery . azure ; import org . apache . lucene . util . LuceneTestCase . AwaitsFix ; import org . elasticsearch . cloud . azure . AbstractAzureComputeServiceTestCase ; import org . elasticsearch . cloud . azure . AzureComputeServiceTwoNodesMock ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . MasterNotDiscoveredException ; import org . elasticsearch . discovery . zen . ZenDiscovery ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . SUITE , numDataNodes = <int> , transportClientRatio = <float> , numClientNodes = <int> ) @AwaitsFix ( bugUrl = <str> ) public class AzureMinimumMasterNodesTests extends AbstractAzureComputeServiceTestCase { public AzureMinimumMasterNodesTests ( ) { super ( AzureComputeServiceTwoNodesMock . TestPlugin . class ) ; } @Override protected Settings nodeSettings ( int nodeOrdinal ) { Settings . Builder builder = Settings . settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , <int> ) . put ( ZenDiscovery . SETTING_JOIN_TIMEOUT , <str> ) . put ( ZenDiscovery . SETTING_PING_TIMEOUT , <str> ) . put ( <str> , <str> ) ; return builder . build ( ) ; } public void testSimpleOnlyMasterNodeElection ( ) throws IOException { logger . info ( <str> ) ; internalCluster ( ) . startNode ( ) ; try { assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , nullValue ( ) ) ; fail ( <str> ) ; } catch ( MasterNotDiscoveredException e ) { } logger . info ( <str> ) ; internalCluster ( ) . startNode ( ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , notNullValue ( ) ) ; logger . info ( <str> ) ; internalCluster ( ) . stopCurrentMasterNode ( ) ; try { assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , nullValue ( ) ) ; fail ( <str> ) ; } catch ( MasterNotDiscoveredException e ) { } logger . info ( <str> ) ; internalCluster ( ) . startNode ( ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . execute ( ) . actionGet ( ) . getState ( ) . nodes ( ) . masterNodeId ( ) , notNullValue ( ) ) ; } } 

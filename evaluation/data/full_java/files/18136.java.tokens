package com . badlogic . gdx . graphics . profiling ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . utils . GdxRuntimeException ; import static com . badlogic . gdx . graphics . profiling . GLProfiler . resolveErrorNumber ; public interface GLErrorListener { public void onError ( int error ) ; public static final GLErrorListener LOGGING_LISTENER = new GLErrorListener ( ) { @Override public void onError ( int error ) { String place = null ; try { final StackTraceElement [ ] stack = Thread . currentThread ( ) . getStackTrace ( ) ; for ( int i = <int> ; i < stack . length ; i + + ) { if ( <str> . equals ( stack [ i ] . getMethodName ( ) ) ) { if ( i + <int> < stack . length ) { final StackTraceElement glMethod = stack [ i + <int> ] ; place = glMethod . getMethodName ( ) ; } break ; } } } catch ( Exception ignored ) { } if ( place ! = null ) { Gdx . app . error ( <str> , <str> + resolveErrorNumber ( error ) + <str> + place ) ; } else { Gdx . app . error ( <str> , <str> + resolveErrorNumber ( error ) + <str> , new Exception ( ) ) ; } } } ; public static final GLErrorListener THROWING_LISTENER = new GLErrorListener ( ) { @Override public void onError ( int error ) { throw new GdxRuntimeException ( <str> + resolveErrorNumber ( error ) ) ; } } ; } 

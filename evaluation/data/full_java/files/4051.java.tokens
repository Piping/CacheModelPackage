package org . eclipse . debug . internal . ui . actions . breakpointGroups ; import java . util . List ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . breakpoints . provisional . IBreakpointContainer ; import org . eclipse . debug . internal . ui . breakpoints . provisional . OtherBreakpointCategory ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointsView ; import org . eclipse . jface . util . LocalSelectionTransfer ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . ui . PlatformUI ; public class PasteBreakpointsAction extends BreakpointSelectionAction { public PasteBreakpointsAction ( BreakpointsView view ) { super ( BreakpointGroupMessages . PasteBreakpointsAction_0 , view ) ; setToolTipText ( BreakpointGroupMessages . PasteBreakpointsAction_1 ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugHelpContextIds . PASTE_BREAKPOINTS_ACTION ) ; } private Object getTarget ( ) { List < ? > selectedNonResources = getSelectedNonResources ( ) ; if ( selectedNonResources . size ( ) = = <int> ) { Object target = selectedNonResources . get ( <int> ) ; if ( target instanceof IBreakpointContainer ) { return target ; } } return null ; } @Override public void run ( ) { if ( getBreakpointsView ( ) . canPaste ( getTarget ( ) , LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ) ) { getBreakpointsView ( ) . performPaste ( getTarget ( ) , LocalSelectionTransfer . getTransfer ( ) . getSelection ( ) ) ; } } @Override protected boolean updateSelection ( IStructuredSelection selection ) { Object target = getTarget ( ) ; if ( target instanceof IBreakpointContainer ) { IBreakpointContainer container = ( IBreakpointContainer ) target ; if ( container . getCategory ( ) instanceof OtherBreakpointCategory ) { return false ; } return true ; } return false ; } } 

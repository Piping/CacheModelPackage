package org . apache . cassandra . cql3 . validation . entities ; import java . util . Arrays ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import static junit . framework . Assert . assertNull ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class StaticColumnsTest extends CQLTester { @Test public void testStaticColumns ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , null , <int> , null ) ) ; Object [ ] [ ] row = getRows ( execute ( <str> ) ) ; assertEquals ( <int> , row [ <int> ] [ <int> ] ) ; assertTrue ( ( Long ) row [ <int> ] [ <int> ] > <int> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null , <int> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null , null , <int> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null , <int> , <int> ) , row ( <int> , <int> , null , <int> , <int> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null , <int> ) , row ( <int> , <int> , null , <int> ) ) ; } @Test public void testStaticColumnsWithSecondaryIndex ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertInvalid ( <str> ) ; } @Test public void testStaticColumnsWithDistinct ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) , row ( <int> , null ) ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) ) ; Object [ ] [ ] rows = getRows ( execute ( <str> ) ) ; assertNull ( rows [ <int> ] [ <int> ] ) ; assertEmpty ( execute ( <str> ) ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) , row ( <int> , null ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) , row ( <int> , <int> ) ) ; rows = getRows ( execute ( <str> ) ) ; assertNull ( rows [ <int> ] [ <int> ] ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertInvalid ( <str> ) ; execute ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) execute ( <str> , i , j , i ) ; rows = getRows ( execute ( <str> ) ) ; checkDistinctRows ( rows , true , <int> , <int> , <int> , <int> ) ; String keys = <str> ; rows = getRows ( execute ( <str> + keys + <str> ) ) ; checkDistinctRows ( rows , false , <int> , <int> , <int> , <int> ) ; createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) for ( int k = <int> ; k < <int> ; k + + ) execute ( <str> , i , j , k , i , i + <int> ) ; rows = getRows ( execute ( <str> ) ) ; checkDistinctRows ( rows , true , <int> , <int> , <int> , <int> ) ; rows = getRows ( execute ( <str> ) ) ; checkDistinctRows ( rows , true , <int> , <int> , <int> , <int> ) ; rows = getRows ( execute ( <str> ) ) ; checkDistinctRows ( rows , true , <int> , <int> , <int> , <int> ) ; rows = getRows ( execute ( <str> + keys + <str> ) ) ; checkDistinctRows ( rows , false , <int> , <int> , <int> , <int> ) ; rows = getRows ( execute ( <str> + keys + <str> ) ) ; checkDistinctRows ( rows , false , <int> , <int> , <int> , <int> ) ; rows = getRows ( execute ( <str> + keys + <str> ) ) ; checkDistinctRows ( rows , true , <int> , <int> , <int> , <int> ) ; } void checkDistinctRows ( Object [ ] [ ] rows , boolean sort , int . . . ranges ) { assertTrue ( ranges . length % <int> = = <int> ) ; int numdim = ranges . length / <int> ; int [ ] from = new int [ numdim ] ; int [ ] to = new int [ numdim ] ; for ( int i = <int> , j = <int> ; i < ranges . length & & j < numdim ; i + = <int> , j + + ) { from [ j ] = ranges [ i ] ; to [ j ] = ranges [ i + <int> ] ; } for ( int i = <int> ; i < numdim ; i + + ) { int [ ] vals = new int [ rows . length ] ; for ( int j = <int> ; j < rows . length ; j + + ) vals [ j ] = ( Integer ) rows [ j ] [ i ] ; if ( sort ) Arrays . sort ( vals ) ; for ( int j = from [ i ] ; j < to [ i ] ; j + + ) assertEquals ( j , vals [ j - from [ i ] ] ) ; } } @Test public void testStaticColumnsWithLimit ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testStaticColumnsWithEmptyClustering ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; } @Test public void testAlterClusteringAndStatic ( ) throws Throwable { createTable ( <str> ) ; assertInvalid ( <str> ) ; } } 

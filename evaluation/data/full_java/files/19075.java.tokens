package io . netty . handler . codec . http ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public class DefaultHttpRequest extends DefaultHttpMessage implements HttpRequest { private static final int HASH_CODE_PRIME = <int> ; private HttpMethod method ; private String uri ; public DefaultHttpRequest ( HttpVersion httpVersion , HttpMethod method , String uri ) { this ( httpVersion , method , uri , true ) ; } public DefaultHttpRequest ( HttpVersion httpVersion , HttpMethod method , String uri , boolean validateHeaders ) { super ( httpVersion , validateHeaders , false ) ; this . method = checkNotNull ( method , <str> ) ; this . uri = checkNotNull ( uri , <str> ) ; } @Override @Deprecated public HttpMethod getMethod ( ) { return method ( ) ; } @Override public HttpMethod method ( ) { return method ; } @Override @Deprecated public String getUri ( ) { return uri ( ) ; } @Override public String uri ( ) { return uri ; } @Override public HttpRequest setMethod ( HttpMethod method ) { if ( method = = null ) { throw new NullPointerException ( <str> ) ; } this . method = method ; return this ; } @Override public HttpRequest setUri ( String uri ) { if ( uri = = null ) { throw new NullPointerException ( <str> ) ; } this . uri = uri ; return this ; } @Override public HttpRequest setProtocolVersion ( HttpVersion version ) { super . setProtocolVersion ( version ) ; return this ; } @Override public int hashCode ( ) { int result = <int> ; result = HASH_CODE_PRIME * result + method . hashCode ( ) ; result = HASH_CODE_PRIME * result + uri . hashCode ( ) ; result = HASH_CODE_PRIME * result + super . hashCode ( ) ; return result ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof DefaultHttpRequest ) ) { return false ; } DefaultHttpRequest other = ( DefaultHttpRequest ) o ; return method ( ) . equals ( other . method ( ) ) & & uri ( ) . equalsIgnoreCase ( other . uri ( ) ) & & super . equals ( o ) ; } @Override public String toString ( ) { return HttpMessageUtil . appendRequest ( new StringBuilder ( <int> ) , this ) . toString ( ) ; } } 

package io . netty . handler . codec . protobuf ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelHandlerContext ; import io . netty . handler . codec . ByteToMessageDecoder ; import io . netty . handler . codec . CorruptedFrameException ; import java . util . List ; import com . google . protobuf . CodedInputStream ; public class ProtobufVarint32FrameDecoder extends ByteToMessageDecoder { @Override protected void decode ( ChannelHandlerContext ctx , ByteBuf in , List < Object > out ) throws Exception { in . markReaderIndex ( ) ; final byte [ ] buf = new byte [ <int> ] ; for ( int i = <int> ; i < buf . length ; i + + ) { if ( ! in . isReadable ( ) ) { in . resetReaderIndex ( ) ; return ; } buf [ i ] = in . readByte ( ) ; if ( buf [ i ] > = <int> ) { int length = CodedInputStream . newInstance ( buf , <int> , i + <int> ) . readRawVarint32 ( ) ; if ( length < <int> ) { throw new CorruptedFrameException ( <str> + length ) ; } if ( in . readableBytes ( ) < length ) { in . resetReaderIndex ( ) ; return ; } else { out . add ( in . readBytes ( length ) ) ; return ; } } } throw new CorruptedFrameException ( <str> ) ; } } 

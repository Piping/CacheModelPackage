package org . gradle . gradleplugin . foundation . favorites ; import org . gradle . foundation . CommandLineAssistant ; import org . gradle . foundation . TaskView ; import org . gradle . foundation . common . ObserverLord ; import org . gradle . foundation . common . ReorderableList ; import org . gradle . gradleplugin . foundation . DOM4JSerializer ; import org . gradle . gradleplugin . foundation . ExtensionFileFilter ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . foundation . settings . SettingsSerializable ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; public class FavoritesEditor implements SettingsSerializable { private ReorderableList < FavoriteTask > favoriteTasks = new ReorderableList < FavoriteTask > ( ) ; private ObserverLord < FavoriteTasksObserver > favoriteTasksObserverLord = new ObserverLord < FavoriteTasksObserver > ( ) ; public interface FavoriteTasksObserver { public void favoritesChanged ( ) ; public void favoritesReordered ( List < FavoriteTask > favoritesReordered ) ; } public FavoritesEditor ( ) { } public List < FavoriteTask > getFavoriteTasks ( ) { return Collections . unmodifiableList ( favoriteTasks ) ; } public void addFavoriteTasksObserver ( FavoritesEditor . FavoriteTasksObserver observer , boolean inEventQueue ) { favoriteTasksObserverLord . addObserver ( observer , inEventQueue ) ; } public void removeFavoriteTasksObserver ( FavoritesEditor . FavoriteTasksObserver observer ) { favoriteTasksObserverLord . removeObserver ( observer ) ; } public FavoriteTask getFavorite ( String fullCommandLine ) { Iterator < FavoriteTask > taskIterator = favoriteTasks . iterator ( ) ; while ( taskIterator . hasNext ( ) ) { FavoriteTask favoriteTask = taskIterator . next ( ) ; if ( fullCommandLine . equals ( favoriteTask . getFullCommandLine ( ) ) ) { return favoriteTask ; } } return null ; } public FavoriteTask getFavoriteByDisplayName ( String displayName ) { Iterator < FavoriteTask > taskIterator = favoriteTasks . iterator ( ) ; while ( taskIterator . hasNext ( ) ) { FavoriteTask favoriteTask = taskIterator . next ( ) ; if ( displayName . equals ( favoriteTask . getDisplayName ( ) ) ) { return favoriteTask ; } } return null ; } public FavoriteTask getFavorite ( TaskView task ) { return getFavorite ( task . getFullTaskName ( ) ) ; } private void notifyFavoritesChanged ( ) { favoriteTasksObserverLord . notifyObservers ( new ObserverLord . ObserverNotification < FavoriteTasksObserver > ( ) { public void notify ( FavoriteTasksObserver observer ) { observer . favoritesChanged ( ) ; } } ) ; } public enum AddMultipleResult { AddSeparately , AddAsSingleCommand , Cancel } public interface AddMultipleFavoritesInteraction { public AddMultipleResult promptUserToCombineTasks ( List < TaskView > tasksSample , String singleCommandSample ) ; } public void addMutlipleFavorites ( List < TaskView > tasks , boolean alwaysShowOutput , AddMultipleFavoritesInteraction interaction ) { if ( tasks . isEmpty ( ) ) { return ; } if ( tasks . size ( ) = = <int> ) { addFavorite ( tasks . get ( <int> ) , alwaysShowOutput ) ; return ; } String singleCommandLine = CommandLineAssistant . combineTasks ( tasks ) ; AddMultipleResult addMultipleResult = interaction . promptUserToCombineTasks ( tasks , singleCommandLine ) ; switch ( addMultipleResult ) { case Cancel : return ; case AddSeparately : Iterator < TaskView > iterator = tasks . iterator ( ) ; while ( iterator . hasNext ( ) ) { TaskView task = iterator . next ( ) ; addFavorite ( task , alwaysShowOutput ) ; } break ; case AddAsSingleCommand : addFavorite ( singleCommandLine , alwaysShowOutput ) ; break ; } } public FavoriteTask addFavorite ( TaskView task , boolean alwaysShowOutput ) { return addFavorite ( task . getFullTaskName ( ) , alwaysShowOutput ) ; } public FavoriteTask addFavorite ( String fullCommandLine , boolean alwaysShowOutput ) { FavoriteTask favorite = addFavorite ( fullCommandLine , fullCommandLine , alwaysShowOutput ) ; if ( favorite ! = null ) { notifyFavoritesChanged ( ) ; } return favorite ; } public FavoriteTask addFavorite ( String fullCommandLine , String displayName , boolean alwaysShowOutput ) { if ( ( fullCommandLine = = null | | fullCommandLine . trim ( ) . equals ( <str> ) ) & & ( displayName = = null | | displayName . trim ( ) . equals ( <str> ) ) ) { return null ; } FavoriteTask favoriteTask = new FavoriteTask ( fullCommandLine , displayName , alwaysShowOutput ) ; favoriteTasks . add ( favoriteTask ) ; return favoriteTask ; } public void addFavorites ( List < TaskView > tasks , boolean alwaysShowOutput ) { boolean addedFavorite = false ; Iterator < TaskView > iterator = tasks . iterator ( ) ; while ( iterator . hasNext ( ) ) { TaskView task = iterator . next ( ) ; String fullTaskName = task . getFullTaskName ( ) ; if ( this . addFavorite ( fullTaskName , alwaysShowOutput ) ! = null ) { addedFavorite = true ; } } if ( addedFavorite ) { favoriteTasksObserverLord . notifyObservers ( new ObserverLord . ObserverNotification < FavoritesEditor . FavoriteTasksObserver > ( ) { public void notify ( FavoritesEditor . FavoriteTasksObserver observer ) { observer . favoritesChanged ( ) ; } } ) ; } } public FavoriteTask addFavorite ( EditFavoriteInteraction addFavoriteInteraction ) { FavoriteTask newFavorite = new FavoriteTask ( <str> , <str> , false ) ; if ( ! editInternal ( newFavorite , addFavoriteInteraction ) ) { return null ; } favoriteTasks . add ( newFavorite ) ; notifyFavoritesChanged ( ) ; return newFavorite ; } public class EditibleFavoriteTask { public String fullCommandLine ; public String displayName ; public boolean alwaysShowOutput ; public EditibleFavoriteTask ( FavoriteTask favoriteTask ) { this ( favoriteTask . getFullCommandLine ( ) , favoriteTask . getDisplayName ( ) , favoriteTask . alwaysShowOutput ( ) ) ; } public EditibleFavoriteTask ( String fullCommandLine , String displayName , boolean alwaysShowOutput ) { this . fullCommandLine = fullCommandLine ; this . displayName = displayName ; this . alwaysShowOutput = alwaysShowOutput ; } public boolean isDisplayNameAndFullCommandSynchronized ( ) { if ( displayName = = null ) { return fullCommandLine = = null ; } return displayName . equals ( fullCommandLine ) ; } @Override public String toString ( ) { return displayName + <str> + fullCommandLine ; } } public interface EditFavoriteInteraction extends ValidationInteraction { public boolean editFavorite ( EditibleFavoriteTask favoriteTask ) ; } public boolean editFavorite ( FavoriteTask favoriteTask , EditFavoriteInteraction editFavoriteInteraction ) { if ( favoriteTask = = null ) { return false ; } if ( favoriteTasks . indexOf ( favoriteTask ) = = - <int> ) { return false ; } if ( ! editInternal ( favoriteTask , editFavoriteInteraction ) ) { return false ; } notifyFavoritesChanged ( ) ; return true ; } private boolean editInternal ( FavoriteTask favoriteTask , EditFavoriteInteraction editFavoriteInteraction ) { EditibleFavoriteTask workingCopy = new EditibleFavoriteTask ( favoriteTask ) ; boolean isValid = true ; do { if ( ! editFavoriteInteraction . editFavorite ( workingCopy ) ) { return false ; } isValid = validateEditableFavoriteTask ( workingCopy , favoriteTask , editFavoriteInteraction ) ; } while ( ! isValid ) ; favoriteTask . setFullCommandLine ( workingCopy . fullCommandLine ) ; favoriteTask . setDisplayName ( workingCopy . displayName ) ; favoriteTask . setAlwaysShowOutput ( workingCopy . alwaysShowOutput ) ; return true ; } public interface ValidationInteraction { public void reportError ( String error ) ; } private boolean validateEditableFavoriteTask ( EditibleFavoriteTask editibleFavoriteTask , FavoriteTask originalFavoriteTaskObject , ValidationInteraction validationInteraction ) { if ( editibleFavoriteTask . fullCommandLine = = null | | editibleFavoriteTask . fullCommandLine . trim ( ) . equals ( <str> ) ) { validationInteraction . reportError ( <str> ) ; return false ; } if ( editibleFavoriteTask . displayName = = null | | editibleFavoriteTask . displayName . trim ( ) . equals ( <str> ) ) { validationInteraction . reportError ( <str> ) ; return false ; } return true ; } public void removeFavorites ( List < FavoriteTask > favoritesToRemove ) { if ( favoriteTasks . removeAll ( favoritesToRemove ) ) { notifyFavoritesChanged ( ) ; } } public void moveFavoritesBefore ( List < FavoriteTask > favoritesToMove ) { moveFavorites ( favoritesToMove , true ) ; } public void moveFavoritesAfter ( List < FavoriteTask > favoritesToMove ) { moveFavorites ( favoritesToMove , false ) ; } private void moveFavorites ( final List < FavoriteTask > favoritesToMove , boolean moveBefore ) { if ( moveBefore ) { favoriteTasks . moveBefore ( favoritesToMove ) ; } else { favoriteTasks . moveAfter ( favoritesToMove ) ; } favoriteTasksObserverLord . notifyObservers ( new ObserverLord . ObserverNotification < FavoriteTasksObserver > ( ) { public void notify ( FavoriteTasksObserver observer ) { observer . favoritesReordered ( favoriteTasks ) ; } } ) ; } public void exportToFile ( DOM4JSerializer . ExportInteraction exportInteraction ) { DOM4JSerializer . exportToFile ( <str> , exportInteraction , createFileFilter ( ) , this ) ; } public boolean importFromFile ( DOM4JSerializer . ImportInteraction importInteraction ) { FavoritesSerializable serializable = new FavoritesSerializable ( ) ; if ( ! DOM4JSerializer . importFromFile ( importInteraction , createFileFilter ( ) , serializable ) ) { return false ; } favoriteTasks . clear ( ) ; favoriteTasks . addAll ( serializable . getFavorites ( ) ) ; notifyFavoritesChanged ( ) ; return true ; } private ExtensionFileFilter createFileFilter ( ) { return new ExtensionFileFilter ( <str> , <str> ) ; } public void serializeOut ( SettingsNode settings ) { FavoritesSerializable . serializeOut ( settings , favoriteTasks ) ; } public void serializeIn ( SettingsNode settings ) { FavoritesSerializable . serializeIn ( settings , favoriteTasks ) ; } public void duplicateFavorites ( List < FavoriteTask > tasksToCopy , EditFavoriteInteraction editFavoriteInteraction ) { if ( tasksToCopy = = null | | tasksToCopy . isEmpty ( ) ) { return ; } Iterator < FavoriteTask > iterator = tasksToCopy . iterator ( ) ; while ( iterator . hasNext ( ) ) { FavoriteTask taskToCopy = iterator . next ( ) ; FavoriteTask newFavoriteTask = new FavoriteTask ( taskToCopy . getFullCommandLine ( ) , taskToCopy . getDisplayName ( ) , taskToCopy . alwaysShowOutput ( ) ) ; if ( ! editInternal ( newFavoriteTask , editFavoriteInteraction ) ) { return ; } favoriteTasks . add ( newFavoriteTask ) ; } notifyFavoritesChanged ( ) ; } public FavoriteTask duplicateFavorite ( FavoriteTask taskToCopy , EditFavoriteInteraction editFavoriteInteraction ) { if ( taskToCopy = = null ) { return null ; } FavoriteTask newFavoriteTask = new FavoriteTask ( taskToCopy . getFullCommandLine ( ) , taskToCopy . getDisplayName ( ) , taskToCopy . alwaysShowOutput ( ) ) ; if ( ! editInternal ( newFavoriteTask , editFavoriteInteraction ) ) { return null ; } favoriteTasks . add ( newFavoriteTask ) ; notifyFavoritesChanged ( ) ; return newFavoriteTask ; } public static String combineFavoriteCommandLines ( List < FavoriteTask > favoriteTasks ) { StringBuilder builder = new StringBuilder ( ) ; Iterator < FavoriteTask > iterator = favoriteTasks . iterator ( ) ; while ( iterator . hasNext ( ) ) { FavoriteTask favoriteTask = iterator . next ( ) ; builder . append ( favoriteTask . getFullCommandLine ( ) ) ; if ( iterator . hasNext ( ) ) { builder . append ( <str> ) ; } } return builder . toString ( ) ; } } 

package com . badlogic . gdx . physics . bullet . softbody ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . physics . bullet . dynamics . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class fDrawFlags extends BulletBase { private long swigCPtr ; protected fDrawFlags ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public fDrawFlags ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( fDrawFlags obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; SoftbodyJNI . delete_fDrawFlags ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public fDrawFlags ( ) { this ( SoftbodyJNI . new_fDrawFlags ( ) , true ) ; } public final static class _ { public final static int Nodes = <hex> ; public final static int Links = <hex> ; public final static int Faces = <hex> ; public final static int Tetras = <hex> ; public final static int Normals = <hex> ; public final static int Contacts = <hex> ; public final static int Anchors = <hex> ; public final static int Notes = <hex> ; public final static int Clusters = <hex> ; public final static int NodeTree = <hex> ; public final static int FaceTree = <hex> ; public final static int ClusterTree = <hex> ; public final static int Joints = <hex> ; public final static int Std = Links + Faces + Tetras + Anchors + Notes + Joints ; public final static int StdTetra = Std - Faces + Tetras ; } } 

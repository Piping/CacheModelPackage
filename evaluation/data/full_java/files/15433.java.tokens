package org . gradle . internal . resource . transport . aws . s3 ; import org . gradle . api . credentials . AwsCredentials ; import org . gradle . authentication . Authentication ; import org . gradle . authentication . aws . AwsImAuthentication ; import org . gradle . internal . authentication . AllSchemesAuthentication ; import org . gradle . internal . authentication . DefaultAwsImAuthentication ; import org . gradle . internal . resource . connector . ResourceConnectorFactory ; import org . gradle . internal . resource . connector . ResourceConnectorSpecification ; import org . gradle . internal . resource . transfer . ExternalResourceConnector ; import java . util . Collections ; import java . util . HashSet ; import java . util . Set ; public class S3ConnectorFactory implements ResourceConnectorFactory { @Override public Set < String > getSupportedProtocols ( ) { return Collections . singleton ( <str> ) ; } @Override public Set < Class < ? extends Authentication > > getSupportedAuthentication ( ) { Set < Class < ? extends Authentication > > supported = new HashSet < Class < ? extends Authentication > > ( ) ; supported . add ( AllSchemesAuthentication . class ) ; supported . add ( AwsImAuthentication . class ) ; return supported ; } @Override public ExternalResourceConnector createResourceConnector ( ResourceConnectorSpecification connectionDetails ) { final S3Client s3Client ; for ( Authentication authentication : connectionDetails . getAuthentications ( ) ) { if ( authentication instanceof DefaultAwsImAuthentication ) { s3Client = S3Client . forInstanceMetaData ( ) ; return new S3ResourceConnector ( s3Client ) ; } } AwsCredentials awsCredentials = connectionDetails . getCredentials ( AwsCredentials . class ) ; if ( awsCredentials = = null ) { throw new IllegalArgumentException ( <str> ) ; } s3Client = S3Client . of ( awsCredentials , new S3ConnectionProperties ( ) ) ; return new S3ResourceConnector ( s3Client ) ; } } 

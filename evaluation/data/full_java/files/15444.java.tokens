package org . gradle . internal . resource . transport . sftp ; import com . jcraft . jsch . ChannelSftp ; import org . gradle . api . artifacts . repositories . PasswordCredentials ; import org . gradle . internal . resource . ResourceException ; import org . gradle . internal . resource . transfer . ExternalResourceLister ; import java . net . URI ; import java . util . ArrayList ; import java . util . List ; import java . util . Vector ; public class SftpResourceLister implements ExternalResourceLister { private final SftpClientFactory sftpClientFactory ; private final PasswordCredentials credentials ; public SftpResourceLister ( SftpClientFactory sftpClientFactory , PasswordCredentials credentials ) { this . sftpClientFactory = sftpClientFactory ; this . credentials = credentials ; } public List < String > list ( URI directory ) { LockableSftpClient client = sftpClientFactory . createSftpClient ( directory , credentials ) ; try { @SuppressWarnings ( <str> ) Vector < ChannelSftp . LsEntry > entries = client . getSftpClient ( ) . ls ( directory . getPath ( ) ) ; List < String > list = new ArrayList < String > ( ) ; for ( ChannelSftp . LsEntry entry : entries ) { list . add ( entry . getFilename ( ) ) ; } return list ; } catch ( com . jcraft . jsch . SftpException e ) { if ( e . id = = ChannelSftp . SSH_FX_NO_SUCH_FILE ) { return null ; } throw new ResourceException ( directory , String . format ( <str> , directory ) , e ) ; } finally { sftpClientFactory . releaseSftpClient ( client ) ; } } } 

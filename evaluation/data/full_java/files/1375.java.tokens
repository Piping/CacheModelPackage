package org . apache . cassandra . cql3 . validation . entities ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . Json ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . dht . ByteOrderedPartitioner ; import org . apache . cassandra . serializers . SimpleDateSerializer ; import org . apache . cassandra . serializers . TimeSerializer ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . junit . BeforeClass ; import org . junit . Test ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . net . InetAddress ; import java . text . SimpleDateFormat ; import java . util . Date ; import java . util . UUID ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; public class JsonTest extends CQLTester { @BeforeClass public static void setUp ( ) { DatabaseDescriptor . setPartitionerUnsafe ( ByteOrderedPartitioner . instance ) ; } @Test public void testFromJsonFct ( ) throws Throwable { String typeName = createType ( <str> ) ; createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + typeName + <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; String func1 = createFunction ( KEYSPACE , <str> , <str> ) ; createFunctionOverload ( func1 , <str> , <str> ) ; assertInvalidMessage ( <str> , <str> + func1 + <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , null ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> ) ) ; execute ( <str> , <str> , <str> ) ; execute ( <str> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , ByteBufferUtil . bytes ( <int> ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , true ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , false ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , false ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , SimpleDateSerializer . dateStringToDays ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigDecimal ( <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigDecimal ( <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigDecimal ( <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigDecimal ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , InetAddress . getByName ( <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , InetAddress . getByName ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , TimeSerializer . timeStringToLong ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new Date ( <int> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new SimpleDateFormat ( <str> ) . parse ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , UUID . fromString ( <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , UUID . fromString ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , UUID . fromString ( <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , UUID . fromString ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigInteger ( <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigInteger ( <str> ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , null ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , null ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , null ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , tuple ( <int> , <str> , UUID . fromString ( <str> ) ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , tuple ( <int> , null , UUID . fromString ( <str> ) ) ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , UUID . fromString ( <str> ) , set ( <str> , <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , UUID . fromString ( <str> ) , set ( <str> , <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , null , UUID . fromString ( <str> ) , set ( <str> , <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , UUID . fromString ( <str> ) , null ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; } @Test public void testToJsonFct ( ) throws Throwable { String typeName = createType ( <str> ) ; createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + typeName + <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <int> L ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , - <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , ByteBufferUtil . bytes ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , ByteBufferUtil . EMPTY_BYTE_BUFFER ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , true ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , false ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , SimpleDateSerializer . dateStringToDays ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , new BigDecimal ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , new BigDecimal ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <float> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <int> d ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <float> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <int> f ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , InetAddress . getByName ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , InetAddress . getByName ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , - <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , new SimpleDateFormat ( <str> ) . parse ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , UUID . fromString ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , UUID . fromString ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , new BigInteger ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , list ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , list ( ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , list ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , set ( ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , map ( <str> , <int> , <str> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , map ( ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , map ( <str> , <int> , <str> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , tuple ( <int> , <str> , UUID . fromString ( <str> ) ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , tuple ( <int> , <str> , null ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <int> , UUID . fromString ( <str> ) , set ( <str> , <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; execute ( <str> , <int> , <int> , UUID . fromString ( <str> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; } @Test public void testSelectJsonSyntax ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; } @Test public void testInsertJsonSyntax ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) ) ; if ( USE_PREPARED_VALUES ) assertInvalidMessage ( <str> , <str> , new Object [ ] { null } ) ; assertInvalidMessage ( <str> , <str> , <str> ) ; assertInvalidMessage ( <str> , <str> , <str> ) ; assertInvalidMessage ( <str> , <str> , <str> ) ; assertInvalidMessage ( <str> , <str> , <str> ) ; assertInvalidMessage ( <str> , <str> , <str> ) ; } @Test public void testCaseSensitivity ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> ) ; execute ( <str> , <str> ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; assertInvalid ( <str> , <str> ) ; assertInvalid ( <str> , <str> ) ; String typeName = createType ( <str> ) ; createTable ( <str> + typeName + <str> ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; } @Test public void testInsertJsonSyntaxWithCollections ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , true , <str> , false ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , true , <str> , false ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( <int> , <int> , <int> ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( <int> , <int> , <int> ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; } @Test public void testInsertJsonSyntaxWithNonNativeMapKeys ( ) throws Throwable { String typeName = createType ( <str> ) ; createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + typeName + <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; String innerKey1 = <str> ; String fullKey1 = String . format ( <str> , new String ( Json . JSON_STRING_ENCODER . quoteAsString ( innerKey1 ) ) , <str> ) ; String stringKey1 = new String ( Json . JSON_STRING_ENCODER . quoteAsString ( fullKey1 ) ) ; String innerKey2 = <str> ; String fullKey2 = String . format ( <str> , new String ( Json . JSON_STRING_ENCODER . quoteAsString ( innerKey2 ) ) , <str> ) ; String stringKey2 = new String ( Json . JSON_STRING_ENCODER . quoteAsString ( fullKey2 ) ) ; execute ( <str> , <str> + stringKey1 + <str> + stringKey2 + <str> ) ; assertRows ( execute ( <str> ) , row ( <str> + stringKey1 + <str> + stringKey2 + <str> ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; } @Test public void testInsertJsonSyntaxWithTuplesAndUDTs ( ) throws Throwable { String typeName = createType ( <str> ) ; createTable ( <str> + <str> + <str> + typeName + <str> + <str> ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , set ( <int> , <int> , <int> ) , tuple ( <int> , <int> ) , tuple ( <int> , true ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , set ( <int> , <int> , <int> ) , null , null ) ) ; } } 

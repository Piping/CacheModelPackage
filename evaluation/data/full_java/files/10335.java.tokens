package com . google . common . collect ; import java . util . Collections ; import java . util . Deque ; public class ForwardingDequeTest extends ForwardingTestCase { private Deque < String > forward ; @SuppressWarnings ( <str> ) @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; final Deque < String > deque = createProxyInstance ( Deque . class ) ; forward = new ForwardingDeque < String > ( ) { @Override protected Deque < String > delegate ( ) { return deque ; } } ; } public void testAdd_T ( ) { forward . add ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAddFirst_T ( ) { forward . addFirst ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAddLast_T ( ) { forward . addLast ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAddAll_Collection ( ) { forward . addAll ( Collections . singleton ( <str> ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testClear ( ) { forward . clear ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContains_T ( ) { forward . contains ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsAll_Collection ( ) { forward . containsAll ( Collections . singleton ( <str> ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testDescendingIterator ( ) { forward . descendingIterator ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testElement ( ) { forward . element ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testGetFirst ( ) { forward . getFirst ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testGetLast ( ) { forward . getLast ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIterator ( ) { forward . iterator ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIsEmpty ( ) { forward . isEmpty ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testOffer_T ( ) { forward . offer ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testOfferFirst_T ( ) { forward . offerFirst ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testOfferLast_T ( ) { forward . offerLast ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPeek ( ) { forward . peek ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPeekFirst ( ) { forward . peekFirst ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPeekLast ( ) { forward . peekLast ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPoll ( ) { forward . poll ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPollFirst ( ) { forward . pollFirst ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPollLast ( ) { forward . pollLast ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPop ( ) { forward . pop ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPush_Object ( ) { forward . push ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove ( ) { forward . remove ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveFirst ( ) { forward . removeFirst ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveLast ( ) { forward . removeLast ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove_Object ( ) { forward . remove ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveFirstOccurrence_Object ( ) { forward . removeFirstOccurrence ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveLastOccurrence_Object ( ) { forward . removeLastOccurrence ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveAll_Collection ( ) { forward . removeAll ( Collections . singleton ( <str> ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRetainAll_Collection ( ) { forward . retainAll ( Collections . singleton ( <str> ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSize ( ) { forward . size ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray ( ) { forward . toArray ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray_TArray ( ) { forward . toArray ( new String [ <int> ] ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToString ( ) { forward . toString ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } } 

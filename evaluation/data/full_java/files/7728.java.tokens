package org . elasticsearch . action . admin . indices . create ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . rest . NoOpClient ; import org . elasticsearch . test . ESTestCase ; import org . junit . After ; import org . junit . Before ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class CreateIndexRequestBuilderTests extends ESTestCase { private static final String KEY = <str> ; private static final String VALUE = <str> ; private NoOpClient testClient ; @Override @Before public void setUp ( ) throws Exception { super . setUp ( ) ; this . testClient = new NoOpClient ( getTestName ( ) ) ; } @Override @After public void tearDown ( ) throws Exception { this . testClient . close ( ) ; super . tearDown ( ) ; } public void testSetSource ( ) throws IOException { CreateIndexRequestBuilder builder = new CreateIndexRequestBuilder ( this . testClient , CreateIndexAction . INSTANCE ) ; builder . setSource ( <str> + KEY + <str> + VALUE + <str> ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; XContentBuilder xContent = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( KEY , VALUE ) . endObject ( ) ; xContent . close ( ) ; builder . setSource ( xContent ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; ByteArrayOutputStream docOut = new ByteArrayOutputStream ( ) ; XContentBuilder doc = XContentFactory . jsonBuilder ( docOut ) . startObject ( ) . field ( KEY , VALUE ) . endObject ( ) ; doc . close ( ) ; builder . setSource ( docOut . toByteArray ( ) ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; Map < String , String > settingsMap = new HashMap < > ( ) ; settingsMap . put ( KEY , VALUE ) ; builder . setSettings ( settingsMap ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; } public void testSetSettings ( ) throws IOException { CreateIndexRequestBuilder builder = new CreateIndexRequestBuilder ( this . testClient , CreateIndexAction . INSTANCE ) ; builder . setSettings ( KEY , VALUE ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; builder . setSettings ( <str> + KEY + <str> + VALUE + <str> ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; builder . setSettings ( Settings . builder ( ) . put ( KEY , VALUE ) ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; builder . setSettings ( Settings . builder ( ) . put ( KEY , VALUE ) . build ( ) ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; Map < String , String > settingsMap = new HashMap < > ( ) ; settingsMap . put ( KEY , VALUE ) ; builder . setSettings ( settingsMap ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; XContentBuilder xContent = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( KEY , VALUE ) . endObject ( ) ; xContent . close ( ) ; builder . setSettings ( xContent ) ; assertEquals ( VALUE , builder . request ( ) . settings ( ) . get ( KEY ) ) ; } } 

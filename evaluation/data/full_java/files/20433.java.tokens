package io . netty . channel . rxtx ; import gnu . io . SerialPort ; import io . netty . buffer . ByteBufAllocator ; import io . netty . channel . ChannelConfig ; import io . netty . channel . MessageSizeEstimator ; import io . netty . channel . RecvByteBufAllocator ; public interface RxtxChannelConfig extends ChannelConfig { enum Stopbits { STOPBITS_1 ( SerialPort . STOPBITS_1 ) , STOPBITS_2 ( SerialPort . STOPBITS_2 ) , STOPBITS_1_5 ( SerialPort . STOPBITS_1_5 ) ; private final int value ; Stopbits ( int value ) { this . value = value ; } public int value ( ) { return value ; } public static Stopbits valueOf ( int value ) { for ( Stopbits stopbit : Stopbits . values ( ) ) { if ( stopbit . value = = value ) { return stopbit ; } } throw new IllegalArgumentException ( <str> + Stopbits . class . getSimpleName ( ) + <str> + value ) ; } } enum Databits { DATABITS_5 ( SerialPort . DATABITS_5 ) , DATABITS_6 ( SerialPort . DATABITS_6 ) , DATABITS_7 ( SerialPort . DATABITS_7 ) , DATABITS_8 ( SerialPort . DATABITS_8 ) ; private final int value ; Databits ( int value ) { this . value = value ; } public int value ( ) { return value ; } public static Databits valueOf ( int value ) { for ( Databits databit : Databits . values ( ) ) { if ( databit . value = = value ) { return databit ; } } throw new IllegalArgumentException ( <str> + Databits . class . getSimpleName ( ) + <str> + value ) ; } } enum Paritybit { NONE ( SerialPort . PARITY_NONE ) , ODD ( SerialPort . PARITY_ODD ) , EVEN ( SerialPort . PARITY_EVEN ) , MARK ( SerialPort . PARITY_MARK ) , SPACE ( SerialPort . PARITY_SPACE ) ; private final int value ; Paritybit ( int value ) { this . value = value ; } public int value ( ) { return value ; } public static Paritybit valueOf ( int value ) { for ( Paritybit paritybit : Paritybit . values ( ) ) { if ( paritybit . value = = value ) { return paritybit ; } } throw new IllegalArgumentException ( <str> + Paritybit . class . getSimpleName ( ) + <str> + value ) ; } } RxtxChannelConfig setBaudrate ( int baudrate ) ; RxtxChannelConfig setStopbits ( Stopbits stopbits ) ; RxtxChannelConfig setDatabits ( Databits databits ) ; RxtxChannelConfig setParitybit ( Paritybit paritybit ) ; int getBaudrate ( ) ; Stopbits getStopbits ( ) ; Databits getDatabits ( ) ; Paritybit getParitybit ( ) ; boolean isDtr ( ) ; RxtxChannelConfig setDtr ( boolean dtr ) ; boolean isRts ( ) ; RxtxChannelConfig setRts ( boolean rts ) ; int getWaitTimeMillis ( ) ; RxtxChannelConfig setWaitTimeMillis ( int waitTimeMillis ) ; RxtxChannelConfig setReadTimeout ( int readTimout ) ; int getReadTimeout ( ) ; @Override RxtxChannelConfig setConnectTimeoutMillis ( int connectTimeoutMillis ) ; @Override @Deprecated RxtxChannelConfig setMaxMessagesPerRead ( int maxMessagesPerRead ) ; @Override RxtxChannelConfig setWriteSpinCount ( int writeSpinCount ) ; @Override RxtxChannelConfig setAllocator ( ByteBufAllocator allocator ) ; @Override RxtxChannelConfig setRecvByteBufAllocator ( RecvByteBufAllocator allocator ) ; @Override RxtxChannelConfig setAutoRead ( boolean autoRead ) ; @Override RxtxChannelConfig setAutoClose ( boolean autoClose ) ; @Override RxtxChannelConfig setWriteBufferHighWaterMark ( int writeBufferHighWaterMark ) ; @Override RxtxChannelConfig setWriteBufferLowWaterMark ( int writeBufferLowWaterMark ) ; @Override RxtxChannelConfig setMessageSizeEstimator ( MessageSizeEstimator estimator ) ; } 

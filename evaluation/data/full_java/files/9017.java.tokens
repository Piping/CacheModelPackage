package org . elasticsearch . test . rest . client ; import java . util . * ; public class RestPath { private final List < PathPart > parts ; private final List < String > placeholders ; public RestPath ( List < String > parts ) { List < PathPart > pathParts = new ArrayList < > ( parts . size ( ) ) ; for ( String part : parts ) { pathParts . add ( new PathPart ( part , false ) ) ; } this . parts = pathParts ; this . placeholders = Collections . emptyList ( ) ; } public RestPath ( String path ) { String [ ] pathParts = path . split ( <str> ) ; List < String > placeholders = new ArrayList < > ( ) ; List < PathPart > parts = new ArrayList < > ( ) ; for ( String pathPart : pathParts ) { if ( pathPart . length ( ) > <int> ) { if ( pathPart . startsWith ( <str> ) ) { if ( pathPart . indexOf ( <str> ) ! = pathPart . length ( ) - <int> ) { throw new IllegalArgumentException ( <str> + pathPart + <str> ) ; } String placeholder = pathPart . substring ( <int> , pathPart . length ( ) - <int> ) ; parts . add ( new PathPart ( placeholder , true ) ) ; placeholders . add ( placeholder ) ; } else { parts . add ( new PathPart ( pathPart , false ) ) ; } } } this . placeholders = placeholders ; this . parts = parts ; } public String [ ] getPathParts ( ) { String [ ] parts = new String [ this . parts . size ( ) ] ; int i = <int> ; for ( PathPart part : this . parts ) { parts [ i + + ] = part . pathPart ; } return parts ; } public boolean matches ( Set < String > params ) { return placeholders . size ( ) = = params . size ( ) & & placeholders . containsAll ( params ) ; } public RestPath replacePlaceholders ( Map < String , String > params ) { List < String > finalPathParts = new ArrayList < > ( parts . size ( ) ) ; for ( PathPart pathPart : parts ) { if ( pathPart . isPlaceholder ) { String value = params . get ( pathPart . pathPart ) ; if ( value = = null ) { throw new IllegalArgumentException ( <str> + pathPart . pathPart + <str> ) ; } finalPathParts . add ( value ) ; } else { finalPathParts . add ( pathPart . pathPart ) ; } } return new RestPath ( finalPathParts ) ; } private static class PathPart { private final boolean isPlaceholder ; private final String pathPart ; private PathPart ( String pathPart , boolean isPlaceholder ) { this . isPlaceholder = isPlaceholder ; this . pathPart = pathPart ; } } } 

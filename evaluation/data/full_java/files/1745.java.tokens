package org . apache . cassandra . stress . settings ; import java . io . PrintStream ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import com . google . common . collect . ImmutableList ; public abstract class GroupedOptions { int accepted = <int> ; public boolean accept ( String param ) { for ( Option option : options ( ) ) { if ( option . accept ( param ) ) { accepted + + ; return true ; } } return false ; } public boolean happy ( ) { for ( Option option : options ( ) ) if ( ! option . happy ( ) ) return false ; return true ; } public abstract List < ? extends Option > options ( ) ; public static < G extends GroupedOptions > G select ( String [ ] params , G . . . groupings ) { for ( String param : params ) { boolean accepted = false ; for ( GroupedOptions grouping : groupings ) accepted | = grouping . accept ( param ) ; if ( ! accepted ) throw new IllegalArgumentException ( <str> + param ) ; } for ( G grouping : groupings ) if ( grouping . happy ( ) & & grouping . accepted = = params . length ) return grouping ; return null ; } public static void printOptions ( PrintStream out , String command , GroupedOptions . . . groupings ) { out . println ( ) ; boolean firstRow = true ; for ( GroupedOptions grouping : groupings ) { if ( ! firstRow ) { out . println ( <str> ) ; } firstRow = false ; StringBuilder sb = new StringBuilder ( <str> ) . append ( command ) ; for ( Option option : grouping . options ( ) ) { sb . append ( <str> ) ; sb . append ( option . shortDisplay ( ) ) ; } out . println ( sb . toString ( ) ) ; } out . println ( ) ; final Set < Option > printed = new HashSet < > ( ) ; for ( GroupedOptions grouping : groupings ) { for ( Option option : grouping . options ( ) ) { if ( printed . add ( option ) ) { if ( option . longDisplay ( ) ! = null ) { out . println ( <str> + option . longDisplay ( ) ) ; for ( String row : option . multiLineDisplay ( ) ) out . println ( <str> + row ) ; } } } } } public static List < ? extends Option > merge ( List < ? extends Option > . . . optionss ) { ImmutableList . Builder < Option > builder = ImmutableList . builder ( ) ; for ( List < ? extends Option > options : optionss ) for ( Option option : options ) if ( option instanceof OptionSimple & & ( ( OptionSimple ) option ) . isRequired ( ) ) builder . add ( option ) ; for ( List < ? extends Option > options : optionss ) for ( Option option : options ) if ( ! ( option instanceof OptionSimple & & ( ( OptionSimple ) option ) . isRequired ( ) ) ) builder . add ( option ) ; return builder . build ( ) ; } public static String formatLong ( String longDisplay , String description ) { return String . format ( <str> , longDisplay , description ) ; } public static String formatMultiLine ( String longDisplay , String description ) { return String . format ( <str> , longDisplay , description ) ; } } 

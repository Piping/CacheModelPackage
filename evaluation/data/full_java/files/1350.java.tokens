package org . apache . cassandra . cql3 ; import java . nio . ByteBuffer ; import java . util . concurrent . ThreadLocalRandom ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . db . marshal . BytesType ; import org . apache . cassandra . utils . ByteBufferUtil ; public class ColumnIdentifierTest { @Test public void testComparisonMethod ( ) { ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; byte [ ] commonBytes = new byte [ <int> ] ; byte [ ] aBytes = new byte [ <int> ] ; byte [ ] bBytes = new byte [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) { int commonLength = random . nextInt ( <int> , <int> ) ; random . nextBytes ( commonBytes ) ; random . nextBytes ( aBytes ) ; random . nextBytes ( bBytes ) ; System . arraycopy ( commonBytes , <int> , aBytes , <int> , commonLength ) ; System . arraycopy ( commonBytes , <int> , bBytes , <int> , commonLength ) ; int aLength = random . nextInt ( commonLength , <int> ) ; int bLength = random . nextInt ( commonLength , <int> ) ; ColumnIdentifier a = new ColumnIdentifier ( ByteBuffer . wrap ( aBytes , <int> , aLength ) , BytesType . instance ) ; ColumnIdentifier b = new ColumnIdentifier ( ByteBuffer . wrap ( bBytes , <int> , bLength ) , BytesType . instance ) ; Assert . assertEquals ( <str> + i , compareResult ( a . compareTo ( b ) ) , compareResult ( ByteBufferUtil . compareUnsigned ( a . bytes , b . bytes ) ) ) ; } } private static int compareResult ( int v ) { return v < <int> ? - <int> : v > <int> ? <int> : <int> ; } } 

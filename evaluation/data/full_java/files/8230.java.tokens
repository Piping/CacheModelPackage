package org . elasticsearch . index . query ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . ParsingException ; import java . io . IOException ; import static org . hamcrest . CoreMatchers . instanceOf ; import static org . hamcrest . CoreMatchers . nullValue ; import static org . hamcrest . Matchers . containsString ; public class ConstantScoreQueryBuilderTests extends AbstractQueryTestCase < ConstantScoreQueryBuilder > { @Override protected ConstantScoreQueryBuilder doCreateTestQueryBuilder ( ) { return new ConstantScoreQueryBuilder ( RandomQueryBuilder . createQuery ( random ( ) ) ) ; } @Override protected void doAssertLuceneQuery ( ConstantScoreQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { Query innerQuery = queryBuilder . innerQuery ( ) . toQuery ( context ) ; if ( innerQuery = = null ) { assertThat ( query , nullValue ( ) ) ; } else { assertThat ( query , instanceOf ( ConstantScoreQuery . class ) ) ; ConstantScoreQuery constantScoreQuery = ( ConstantScoreQuery ) query ; assertThat ( constantScoreQuery . getQuery ( ) , instanceOf ( innerQuery . getClass ( ) ) ) ; } } public void testFilterElement ( ) throws IOException { String queryString = <str> + ConstantScoreQueryBuilder . NAME + <str> ; try { parseQuery ( queryString ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testIllegalArguments ( ) { try { new ConstantScoreQueryBuilder ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } @Override public void testUnknownField ( ) throws IOException { assumeTrue ( <str> , false ) ; } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; ConstantScoreQueryBuilder parsed = ( ConstantScoreQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <float> , parsed . boost ( ) , <float> ) ; assertEquals ( json , <float> , parsed . innerQuery ( ) . boost ( ) , <float> ) ; } } 

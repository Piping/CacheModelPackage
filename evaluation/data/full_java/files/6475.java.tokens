package org . elasticsearch . index . fielddata . ordinals ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . MultiDocValues . OrdinalMap ; import org . apache . lucene . index . RandomAccessOrds ; import org . apache . lucene . util . Accountable ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . fielddata . AtomicOrdinalsFieldData ; import org . elasticsearch . index . fielddata . FieldDataType ; import org . elasticsearch . index . fielddata . plain . AbstractAtomicOrdinalsFieldData ; import org . elasticsearch . index . mapper . MappedFieldType ; import java . util . Collection ; final class InternalGlobalOrdinalsIndexFieldData extends GlobalOrdinalsIndexFieldData { private final Atomic [ ] atomicReaders ; InternalGlobalOrdinalsIndexFieldData ( IndexSettings indexSettings , MappedFieldType . Names fieldNames , FieldDataType fieldDataType , AtomicOrdinalsFieldData [ ] segmentAfd , OrdinalMap ordinalMap , long memorySizeInBytes ) { super ( indexSettings , fieldNames , fieldDataType , memorySizeInBytes ) ; this . atomicReaders = new Atomic [ segmentAfd . length ] ; for ( int i = <int> ; i < segmentAfd . length ; i + + ) { atomicReaders [ i ] = new Atomic ( segmentAfd [ i ] , ordinalMap , i ) ; } } @Override public AtomicOrdinalsFieldData load ( LeafReaderContext context ) { return atomicReaders [ context . ord ] ; } private final class Atomic extends AbstractAtomicOrdinalsFieldData { private final AtomicOrdinalsFieldData afd ; private final OrdinalMap ordinalMap ; private final int segmentIndex ; private Atomic ( AtomicOrdinalsFieldData afd , OrdinalMap ordinalMap , int segmentIndex ) { this . afd = afd ; this . ordinalMap = ordinalMap ; this . segmentIndex = segmentIndex ; } @Override public RandomAccessOrds getOrdinalsValues ( ) { final RandomAccessOrds values = afd . getOrdinalsValues ( ) ; if ( values . getValueCount ( ) = = ordinalMap . getValueCount ( ) ) { return values ; } final RandomAccessOrds [ ] bytesValues = new RandomAccessOrds [ atomicReaders . length ] ; for ( int i = <int> ; i < bytesValues . length ; i + + ) { bytesValues [ i ] = atomicReaders [ i ] . afd . getOrdinalsValues ( ) ; } return new GlobalOrdinalMapping ( ordinalMap , bytesValues , segmentIndex ) ; } @Override public long ramBytesUsed ( ) { return afd . ramBytesUsed ( ) ; } @Override public Collection < Accountable > getChildResources ( ) { return afd . getChildResources ( ) ; } @Override public void close ( ) { } } } 

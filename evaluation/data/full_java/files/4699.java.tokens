package org . eclipse . debug . ui . actions ; import java . util . ArrayList ; import java . util . List ; import java . util . Set ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . ILaunchHistoryChangedListener ; import org . eclipse . debug . internal . ui . ILaunchLabelChangedListener ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . internal . ui . contextlaunching . LaunchingResourceManager ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationManager ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationSelectionDialog ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationsMessages ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchHistory ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchShortcutExtension ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchShortcutSelectionDialog ; import org . eclipse . debug . internal . ui . stringsubstitution . SelectedResourceManager ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . debug . ui . ILaunchShortcut ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . MenuAdapter ; import org . eclipse . swt . events . MenuEvent ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Event ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . MenuItem ; import org . eclipse . ui . IActionDelegate2 ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . IWorkbenchWindowPulldownDelegate2 ; import com . ibm . icu . text . MessageFormat ; public abstract class AbstractLaunchHistoryAction implements IActionDelegate2 , IWorkbenchWindowPulldownDelegate2 , ILaunchHistoryChangedListener { private Menu fMenu ; private IAction fAction ; private ILaunchGroup fLaunchGroup = null ; protected boolean fRecreateMenu = false ; public AbstractLaunchHistoryAction ( String launchGroupIdentifier ) { fLaunchGroup = getLaunchConfigurationManager ( ) . getLaunchGroup ( launchGroupIdentifier ) ; } private ILaunchLabelChangedListener fLabelListener = new ILaunchLabelChangedListener ( ) { @Override public ILaunchGroup getLaunchGroup ( ) { return fLaunchGroup ; } @Override public void labelChanged ( ) { updateTooltip ( ) ; } } ; private void setAction ( IAction action ) { fAction = action ; } protected IAction getAction ( ) { return fAction ; } protected void addToMenu ( Menu menu , IAction action , int accelerator ) { StringBuffer label = new StringBuffer ( ) ; if ( accelerator > = <int> & & accelerator < <int> ) { label . append ( <str> ) ; label . append ( accelerator ) ; label . append ( <str> ) ; } label . append ( action . getText ( ) ) ; action . setText ( label . toString ( ) ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( menu , - <int> ) ; } private void initialize ( IAction action ) { getLaunchConfigurationManager ( ) . addLaunchHistoryListener ( this ) ; setAction ( action ) ; updateTooltip ( ) ; action . setEnabled ( existsConfigTypesForMode ( ) ) ; } private boolean existsConfigTypesForMode ( ) { ILaunchConfigurationType [ ] configTypes = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfigurationTypes ( ) ; for ( int i = <int> ; i < configTypes . length ; i + + ) { if ( configTypes [ i ] . supportsMode ( getMode ( ) ) ) { return true ; } } return false ; } protected void updateTooltip ( ) { getAction ( ) . setToolTipText ( getToolTip ( ) ) ; } protected String getToolTip ( ILaunchConfiguration configuration ) { String launchName = configuration . getName ( ) ; String mode = getMode ( ) ; String label ; if ( mode . equals ( ILaunchManager . RUN_MODE ) ) { label = ActionMessages . AbstractLaunchHistoryAction_1 ; } else if ( mode . equals ( ILaunchManager . DEBUG_MODE ) ) { label = ActionMessages . AbstractLaunchHistoryAction_2 ; } else if ( mode . equals ( ILaunchManager . PROFILE_MODE ) ) { label = ActionMessages . AbstractLaunchHistoryAction_3 ; } else { label = ActionMessages . AbstractLaunchHistoryAction_4 ; } return MessageFormat . format ( ActionMessages . AbstractLaunchHistoryAction_0 , new Object [ ] { label , launchName } ) ; } private String getToolTip ( ) { String launchName = DebugUIPlugin . getDefault ( ) . getLaunchingResourceManager ( ) . getLaunchLabel ( fLaunchGroup ) ; if ( launchName = = null ) { return DebugUIPlugin . removeAccelerators ( internalGetHistory ( ) . getLaunchGroup ( ) . getLabel ( ) ) ; } String label = null ; String mode = getMode ( ) ; if ( mode . equals ( ILaunchManager . RUN_MODE ) ) { label = ActionMessages . AbstractLaunchHistoryAction_1 ; } else if ( mode . equals ( ILaunchManager . DEBUG_MODE ) ) { label = ActionMessages . AbstractLaunchHistoryAction_2 ; } else if ( mode . equals ( ILaunchManager . PROFILE_MODE ) ) { label = ActionMessages . AbstractLaunchHistoryAction_3 ; } else { label = ActionMessages . AbstractLaunchHistoryAction_4 ; } if ( IInternalDebugCoreConstants . EMPTY_STRING . equals ( launchName ) ) { return MessageFormat . format ( ActionMessages . AbstractLaunchHistoryAction_5 , new Object [ ] { label } ) ; } else { return MessageFormat . format ( ActionMessages . AbstractLaunchHistoryAction_0 , new Object [ ] { label , launchName } ) ; } } @Override public void launchHistoryChanged ( ) { fRecreateMenu = true ; } @Override public void dispose ( ) { setMenu ( null ) ; getLaunchConfigurationManager ( ) . removeLaunchHistoryListener ( this ) ; DebugUIPlugin . getDefault ( ) . getLaunchingResourceManager ( ) . removeLaunchLabelChangedListener ( fLabelListener ) ; } protected ILaunchConfiguration getLastLaunch ( ) { return getLaunchConfigurationManager ( ) . getFilteredLastLaunch ( getLaunchGroupIdentifier ( ) ) ; } @Override public Menu getMenu ( Control parent ) { setMenu ( new Menu ( parent ) ) ; fillMenu ( fMenu ) ; initMenu ( ) ; return fMenu ; } @Override public Menu getMenu ( Menu parent ) { setMenu ( new Menu ( parent ) ) ; fillMenu ( fMenu ) ; initMenu ( ) ; return fMenu ; } private void initMenu ( ) { fMenu . addMenuListener ( new MenuAdapter ( ) { @Override public void menuShown ( MenuEvent e ) { if ( fRecreateMenu ) { Menu m = ( Menu ) e . widget ; MenuItem [ ] items = m . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { items [ i ] . dispose ( ) ; } fillMenu ( m ) ; fRecreateMenu = false ; } } } ) ; } private void setMenu ( Menu menu ) { if ( fMenu ! = null ) { fMenu . dispose ( ) ; } fMenu = menu ; } protected void fillMenu ( Menu menu ) { ILaunchConfiguration [ ] historyList = getHistory ( ) ; ILaunchConfiguration [ ] favoriteList = getFavorites ( ) ; int accelerator = <int> ; for ( int i = <int> ; i < favoriteList . length ; i + + ) { ILaunchConfiguration launch = favoriteList [ i ] ; LaunchAction action = new LaunchAction ( launch , getMode ( ) ) ; addToMenu ( menu , action , accelerator ) ; accelerator + + ; } if ( favoriteList . length > <int> & & historyList . length > <int> ) { addSeparator ( menu ) ; } for ( int i = <int> ; i < historyList . length ; i + + ) { ILaunchConfiguration launch = historyList [ i ] ; LaunchAction action = new LaunchAction ( launch , getMode ( ) ) ; addToMenu ( menu , action , accelerator ) ; accelerator + + ; } if ( accelerator = = <int> ) { IAction action = new Action ( ActionMessages . AbstractLaunchHistoryAction_6 ) { } ; action . setEnabled ( false ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( menu , - <int> ) ; } } protected void addSeparator ( Menu menu ) { new MenuItem ( menu , SWT . SEPARATOR ) ; } @Override public void run ( IAction action ) { } @Override public void runWithEvent ( IAction action , Event event ) { if ( ( ( event . stateMask & SWT . MOD1 ) > <int> ) & & ( event . type ! = SWT . KeyDown ) ) { ILaunchConfiguration configuration = null ; String groupid = getLaunchGroupIdentifier ( ) ; if ( LaunchingResourceManager . isContextLaunchEnabled ( groupid ) ) { configuration = resolveContextConfiguration ( ) ; } else { configuration = getLaunchConfigurationManager ( ) . getFilteredLastLaunch ( groupid ) ; } ArrayList < ILaunchConfiguration > configs = new ArrayList < ILaunchConfiguration > ( <int> ) ; if ( configuration ! = null ) { configs . add ( configuration ) ; } DebugUIPlugin . openLaunchConfigurationsDialog ( DebugUIPlugin . getShell ( ) , new StructuredSelection ( configs ) , groupid , true ) ; return ; } run ( action ) ; } private ILaunchConfiguration resolveContextConfiguration ( ) { SelectedResourceManager srm = SelectedResourceManager . getDefault ( ) ; IStructuredSelection selection = srm . getCurrentSelection ( ) ; List < LaunchShortcutExtension > shortcuts = null ; IResource resource = srm . getSelectedResource ( ) ; LaunchingResourceManager lrm = DebugUIPlugin . getDefault ( ) . getLaunchingResourceManager ( ) ; shortcuts = lrm . getShortcutsForSelection ( selection , getMode ( ) ) ; if ( resource = = null ) { resource = lrm . getLaunchableResource ( shortcuts , selection ) ; } List < ILaunchConfiguration > configs = lrm . getParticipatingLaunchConfigurations ( selection , resource , shortcuts , getMode ( ) ) ; if ( configs . size ( ) = = <int> ) { return configs . get ( <int> ) ; } else if ( configs . size ( ) > <int> ) { ILaunchConfiguration config = getLaunchConfigurationManager ( ) . getMRUConfiguration ( configs , fLaunchGroup , resource ) ; if ( config ! = null ) { return config ; } else { LaunchConfigurationSelectionDialog dialog = new LaunchConfigurationSelectionDialog ( DebugUIPlugin . getShell ( ) , configs ) ; if ( dialog . open ( ) = = IDialogConstants . OK_ID ) { return ( ILaunchConfiguration ) dialog . getResult ( ) [ <int> ] ; } } return null ; } else if ( shortcuts . size ( ) > <int> ) { LaunchShortcutSelectionDialog dialog = new LaunchShortcutSelectionDialog ( shortcuts , resource , getMode ( ) ) ; if ( dialog . open ( ) = = IDialogConstants . OK_ID ) { LaunchShortcutExtension ext = ( LaunchShortcutExtension ) dialog . getResult ( ) [ <int> ] ; return createConfigurationFromTypes ( ext . getAssociatedConfigurationTypes ( ) ) ; } return null ; } else if ( shortcuts . size ( ) = = <int> ) { LaunchShortcutExtension ext = shortcuts . get ( <int> ) ; return createConfigurationFromTypes ( ext . getAssociatedConfigurationTypes ( ) ) ; } return getLaunchConfigurationManager ( ) . getFilteredLastLaunch ( getLaunchGroupIdentifier ( ) ) ; } private ILaunchConfiguration createConfigurationFromTypes ( Set < String > types ) { if ( types ! = null & & types . size ( ) > <int> ) { try { ILaunchConfigurationType type = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfigurationType ( ( String ) types . toArray ( ) [ <int> ] ) ; ILaunchConfigurationWorkingCopy copy = type . newInstance ( null , DebugPlugin . getDefault ( ) . getLaunchManager ( ) . generateLaunchConfigurationName ( LaunchConfigurationsMessages . CreateLaunchConfigurationAction_New_configuration_2 ) ) ; return copy ; } catch ( CoreException ce ) { } } return null ; } @Override public void init ( IAction action ) { } @Override public void selectionChanged ( IAction action , ISelection selection ) { if ( fAction = = null ) { initialize ( action ) ; } } @Override public void init ( IWorkbenchWindow window ) { if ( this instanceof AbstractLaunchToolbarAction ) { DebugUIPlugin . getDefault ( ) . getLaunchingResourceManager ( ) . addLaunchLabelUpdateListener ( fLabelListener ) ; } } @Deprecated protected LaunchHistory getLaunchHistory ( ) { return getLaunchConfigurationManager ( ) . getLaunchHistory ( getLaunchGroupIdentifier ( ) ) ; } private LaunchHistory internalGetHistory ( ) { return getLaunchConfigurationManager ( ) . getLaunchHistory ( getLaunchGroupIdentifier ( ) ) ; } protected ILaunchConfiguration [ ] getHistory ( ) { return LaunchConfigurationManager . filterConfigs ( internalGetHistory ( ) . getHistory ( ) ) ; } protected ILaunchConfiguration [ ] getFavorites ( ) { return LaunchConfigurationManager . filterConfigs ( internalGetHistory ( ) . getFavorites ( ) ) ; } protected String getMode ( ) { return internalGetHistory ( ) . getLaunchGroup ( ) . getMode ( ) ; } private LaunchConfigurationManager getLaunchConfigurationManager ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; } protected String getLaunchGroupIdentifier ( ) { return fLaunchGroup . getIdentifier ( ) ; } } 

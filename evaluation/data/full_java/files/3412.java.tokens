package org . nd4j . serde . jackson ; import com . fasterxml . jackson . core . JsonParser ; import com . fasterxml . jackson . databind . DeserializationContext ; import com . fasterxml . jackson . databind . JsonDeserializer ; import com . fasterxml . jackson . databind . JsonNode ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import java . io . IOException ; public class VectorDeSerializer extends JsonDeserializer < INDArray > { @Override public INDArray deserialize ( JsonParser jp , DeserializationContext deserializationContext ) throws IOException { JsonNode node = jp . getCodec ( ) . readTree ( jp ) ; JsonNode arr = node . get ( <str> ) ; int rank = node . get ( <str> ) . asInt ( ) ; int numElements = node . get ( <str> ) . asInt ( ) ; int offset = node . get ( <str> ) . asInt ( ) ; JsonNode shape = node . get ( <str> ) ; JsonNode stride = node . get ( <str> ) ; String type = node . get ( <str> ) . asText ( ) ; int [ ] realShape = new int [ rank ] ; int [ ] realStride = new int [ rank ] ; DataBuffer buff = Nd4j . createBuffer ( numElements ) ; for ( int i = <int> ; i < numElements ; i + + ) { buff . put ( i , arr . get ( i ) . asDouble ( ) ) ; } String ordering = node . get ( <str> ) . asText ( ) ; for ( int i = <int> ; i < rank ; i + + ) { realShape [ i ] = shape . get ( i ) . asInt ( ) ; realStride [ i ] = stride . get ( i ) . asInt ( ) ; } INDArray ret = type . equals ( <str> ) ? Nd4j . create ( buff , realShape , realStride , offset , ordering . charAt ( <int> ) ) : Nd4j . createComplex ( buff , realShape , realStride , offset , ordering . charAt ( <int> ) ) ; return ret ; } } 

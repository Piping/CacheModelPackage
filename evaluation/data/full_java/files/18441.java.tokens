package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . FPSLogger ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Animation ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . tests . utils . GdxTest ; public class AnimationTest extends GdxTest { class Caveman { static final float VELOCITY = <int> ; public final Vector2 pos ; public final boolean headsLeft ; public float stateTime ; public Caveman ( float x , float y , boolean headsLeft ) { pos = new Vector2 ( ) . set ( x , y ) ; this . headsLeft = headsLeft ; this . stateTime = ( float ) Math . random ( ) ; } public void update ( float deltaTime ) { stateTime + = deltaTime ; pos . x = pos . x + ( headsLeft ? - VELOCITY * deltaTime : VELOCITY * deltaTime ) ; if ( pos . x < - <int> ) pos . x = Gdx . graphics . getWidth ( ) ; if ( pos . x > Gdx . graphics . getWidth ( ) + <int> ) pos . x = - <int> ; } } Animation leftWalk ; Animation rightWalk ; Caveman [ ] cavemen ; Texture texture ; SpriteBatch batch ; FPSLogger fpsLog ; @Override public void create ( ) { texture = new Texture ( Gdx . files . internal ( <str> ) ) ; TextureRegion [ ] leftWalkFrames = TextureRegion . split ( texture , <int> , <int> ) [ <int> ] ; TextureRegion [ ] rightWalkFrames = new TextureRegion [ leftWalkFrames . length ] ; for ( int i = <int> ; i < rightWalkFrames . length ; i + + ) { TextureRegion frame = new TextureRegion ( leftWalkFrames [ i ] ) ; frame . flip ( true , false ) ; rightWalkFrames [ i ] = frame ; } leftWalk = new Animation ( <float> , leftWalkFrames ) ; rightWalk = new Animation ( <float> , rightWalkFrames ) ; cavemen = new Caveman [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) { cavemen [ i ] = new Caveman ( ( float ) Math . random ( ) * Gdx . graphics . getWidth ( ) , ( float ) Math . random ( ) * Gdx . graphics . getHeight ( ) , Math . random ( ) > <float> ? true : false ) ; } batch = new SpriteBatch ( ) ; fpsLog = new FPSLogger ( ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; for ( int i = <int> ; i < cavemen . length ; i + + ) { Caveman caveman = cavemen [ i ] ; TextureRegion frame = caveman . headsLeft ? leftWalk . getKeyFrame ( caveman . stateTime , true ) : rightWalk . getKeyFrame ( caveman . stateTime , true ) ; batch . draw ( frame , caveman . pos . x , caveman . pos . y ) ; } batch . end ( ) ; for ( int i = <int> ; i < cavemen . length ; i + + ) { cavemen [ i ] . update ( Gdx . graphics . getDeltaTime ( ) ) ; } fpsLog . log ( ) ; } @Override public void dispose ( ) { batch . dispose ( ) ; texture . dispose ( ) ; } } 

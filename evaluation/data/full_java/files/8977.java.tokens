package org . elasticsearch . test . cluster ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . * ; import org . elasticsearch . cluster . block . ClusterBlock ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . OperationRouting ; import org . elasticsearch . cluster . service . PendingClusterTask ; import org . elasticsearch . common . component . Lifecycle ; import org . elasticsearch . common . component . LifecycleListener ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . common . unit . TimeValue ; import java . util . List ; public class NoopClusterService implements ClusterService { final ClusterState state ; public NoopClusterService ( ) { this ( ClusterState . builder ( new ClusterName ( <str> ) ) . build ( ) ) ; } public NoopClusterService ( ClusterState state ) { if ( state . getNodes ( ) . size ( ) = = <int> ) { state = ClusterState . builder ( state ) . nodes ( DiscoveryNodes . builder ( ) . put ( new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) ) . localNodeId ( <str> ) ) . build ( ) ; } assert state . getNodes ( ) . localNode ( ) ! = null ; this . state = state ; } @Override public DiscoveryNode localNode ( ) { return state . getNodes ( ) . localNode ( ) ; } @Override public ClusterState state ( ) { return state ; } @Override public void addInitialStateBlock ( ClusterBlock block ) throws IllegalStateException { } @Override public void removeInitialStateBlock ( ClusterBlock block ) throws IllegalStateException { } @Override public OperationRouting operationRouting ( ) { return null ; } @Override public void addFirst ( ClusterStateListener listener ) { } @Override public void addLast ( ClusterStateListener listener ) { } @Override public void add ( ClusterStateListener listener ) { } @Override public void remove ( ClusterStateListener listener ) { } @Override public void add ( LocalNodeMasterListener listener ) { } @Override public void remove ( LocalNodeMasterListener listener ) { } @Override public void add ( TimeValue timeout , TimeoutClusterStateListener listener ) { } @Override public void submitStateUpdateTask ( String source , ClusterStateUpdateTask updateTask ) { } @Override public < T > void submitStateUpdateTask ( String source , T task , ClusterStateTaskConfig config , ClusterStateTaskExecutor < T > executor , ClusterStateTaskListener listener ) { } @Override public List < PendingClusterTask > pendingTasks ( ) { return null ; } @Override public int numberOfPendingTasks ( ) { return <int> ; } @Override public TimeValue getMaxTaskWaitTime ( ) { return TimeValue . timeValueMillis ( <int> ) ; } @Override public Lifecycle . State lifecycleState ( ) { return null ; } @Override public void addLifecycleListener ( LifecycleListener listener ) { } @Override public void removeLifecycleListener ( LifecycleListener listener ) { } @Override public ClusterService start ( ) { return null ; } @Override public ClusterService stop ( ) { return null ; } @Override public void close ( ) { } } 

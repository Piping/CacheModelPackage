package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ADD ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . MinimalCollection ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; @SuppressWarnings ( <str> ) @GwtCompatible public class SetAddAllTester < E > extends AbstractSetTester < E > { @CollectionFeature.Require ( SUPPORTS_ADD ) @CollectionSize.Require ( absent = ZERO ) public void testAddAll_supportedSomePresent ( ) { assertTrue ( <str> , getSet ( ) . addAll ( MinimalCollection . of ( e3 ( ) , e0 ( ) ) ) ) ; expectAdded ( e3 ( ) ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddAll_withDuplicates ( ) { MinimalCollection < E > elementsToAdd = MinimalCollection . of ( e3 ( ) , e4 ( ) , e3 ( ) , e4 ( ) ) ; assertTrue ( <str> , getSet ( ) . addAll ( elementsToAdd ) ) ; expectAdded ( e3 ( ) , e4 ( ) ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) @CollectionSize.Require ( absent = ZERO ) public void testAddAll_supportedAllPresent ( ) { assertFalse ( <str> , getSet ( ) . addAll ( MinimalCollection . of ( e0 ( ) ) ) ) ; expectUnchanged ( ) ; } } 

package org . gradle . initialization ; import org . gradle . test . fixtures . file . TestNameTestDirectoryProvider ; import org . jmock . integration . junit4 . JMock ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import org . junit . runner . RunWith ; import java . io . File ; import java . util . ArrayList ; import java . util . List ; import static org . hamcrest . Matchers . equalTo ; import static org . junit . Assert . assertThat ; @RunWith ( JMock . class ) public class UserHomeInitScriptFinderTest { @Rule public final TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider ( ) ; private final JUnit4Mockery context = new JUnit4Mockery ( ) ; private UserHomeInitScriptFinder finder ; @Before public void setUp ( ) throws Exception { finder = new UserHomeInitScriptFinder ( tmpDir . getTestDirectory ( ) ) ; } @Test public void addsUserInitScriptWhenItExists ( ) { File initScript = tmpDir . createFile ( <str> ) ; List < File > sourceList = new ArrayList < File > ( ) ; finder . findScripts ( sourceList ) ; assertThat ( sourceList . size ( ) , equalTo ( <int> ) ) ; assertThat ( sourceList . get ( <int> ) , equalTo ( initScript ) ) ; } @Test public void doesNotAddUserInitScriptsWhenTheyDoNotExist ( ) { List < File > sourceList = new ArrayList < File > ( ) ; finder . findScripts ( sourceList ) ; assertThat ( sourceList . size ( ) , equalTo ( <int> ) ) ; } @Test public void addsInitScriptsFromInitDirectoryWhenItExists ( ) { File initScript = tmpDir . createFile ( <str> ) ; List < File > sourceList = new ArrayList < File > ( ) ; finder . findScripts ( sourceList ) ; assertThat ( sourceList . size ( ) , equalTo ( <int> ) ) ; assertThat ( sourceList . get ( <int> ) , equalTo ( initScript ) ) ; } } 

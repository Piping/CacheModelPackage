package org . gradle . api . plugins ; import org . gradle . api . Action ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . ConfigurationContainer ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . artifacts . publish . ArchivePublishArtifact ; import org . gradle . api . internal . component . BuildableJavaComponent ; import org . gradle . api . internal . component . ComponentRegistry ; import org . gradle . api . internal . java . JavaLibrary ; import org . gradle . api . internal . plugins . DefaultArtifactPublicationSet ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . tasks . SourceSet ; import org . gradle . api . tasks . bundling . Jar ; import org . gradle . api . tasks . javadoc . Javadoc ; import org . gradle . api . tasks . testing . Test ; import java . io . File ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . concurrent . Callable ; public class JavaPlugin implements Plugin < ProjectInternal > { public static final String PROCESS_RESOURCES_TASK_NAME = <str> ; public static final String CLASSES_TASK_NAME = <str> ; public static final String COMPILE_JAVA_TASK_NAME = <str> ; public static final String PROCESS_TEST_RESOURCES_TASK_NAME = <str> ; public static final String TEST_CLASSES_TASK_NAME = <str> ; public static final String COMPILE_TEST_JAVA_TASK_NAME = <str> ; public static final String TEST_TASK_NAME = <str> ; public static final String JAR_TASK_NAME = <str> ; public static final String JAVADOC_TASK_NAME = <str> ; public static final String COMPILE_CONFIGURATION_NAME = <str> ; public static final String RUNTIME_CONFIGURATION_NAME = <str> ; public static final String TEST_RUNTIME_CONFIGURATION_NAME = <str> ; public static final String TEST_COMPILE_CONFIGURATION_NAME = <str> ; public void apply ( ProjectInternal project ) { project . getPluginManager ( ) . apply ( JavaBasePlugin . class ) ; JavaPluginConvention javaConvention = project . getConvention ( ) . getPlugin ( JavaPluginConvention . class ) ; project . getServices ( ) . get ( ComponentRegistry . class ) . setMainComponent ( new BuildableJavaComponentImpl ( javaConvention ) ) ; configureSourceSets ( javaConvention ) ; configureConfigurations ( project ) ; configureJavaDoc ( javaConvention ) ; configureTest ( project , javaConvention ) ; configureArchivesAndComponent ( project , javaConvention ) ; configureBuild ( project ) ; } private void configureSourceSets ( final JavaPluginConvention pluginConvention ) { final Project project = pluginConvention . getProject ( ) ; SourceSet main = pluginConvention . getSourceSets ( ) . create ( SourceSet . MAIN_SOURCE_SET_NAME ) ; SourceSet test = pluginConvention . getSourceSets ( ) . create ( SourceSet . TEST_SOURCE_SET_NAME ) ; test . setCompileClasspath ( project . files ( main . getOutput ( ) , project . getConfigurations ( ) . getByName ( TEST_COMPILE_CONFIGURATION_NAME ) ) ) ; test . setRuntimeClasspath ( project . files ( test . getOutput ( ) , main . getOutput ( ) , project . getConfigurations ( ) . getByName ( TEST_RUNTIME_CONFIGURATION_NAME ) ) ) ; } private void configureJavaDoc ( final JavaPluginConvention pluginConvention ) { Project project = pluginConvention . getProject ( ) ; SourceSet mainSourceSet = pluginConvention . getSourceSets ( ) . getByName ( SourceSet . MAIN_SOURCE_SET_NAME ) ; Javadoc javadoc = project . getTasks ( ) . create ( JAVADOC_TASK_NAME , Javadoc . class ) ; javadoc . setDescription ( <str> ) ; javadoc . setGroup ( JavaBasePlugin . DOCUMENTATION_GROUP ) ; javadoc . setClasspath ( mainSourceSet . getOutput ( ) . plus ( mainSourceSet . getCompileClasspath ( ) ) ) ; javadoc . setSource ( mainSourceSet . getAllJava ( ) ) ; addDependsOnTaskInOtherProjects ( javadoc , true , JAVADOC_TASK_NAME , COMPILE_CONFIGURATION_NAME ) ; } private void configureArchivesAndComponent ( final Project project , final JavaPluginConvention pluginConvention ) { Jar jar = project . getTasks ( ) . create ( JAR_TASK_NAME , Jar . class ) ; jar . setDescription ( <str> ) ; jar . setGroup ( BasePlugin . BUILD_GROUP ) ; jar . from ( pluginConvention . getSourceSets ( ) . getByName ( SourceSet . MAIN_SOURCE_SET_NAME ) . getOutput ( ) ) ; ArchivePublishArtifact jarArtifact = new ArchivePublishArtifact ( jar ) ; Configuration runtimeConfiguration = project . getConfigurations ( ) . getByName ( RUNTIME_CONFIGURATION_NAME ) ; runtimeConfiguration . getArtifacts ( ) . add ( jarArtifact ) ; project . getExtensions ( ) . getByType ( DefaultArtifactPublicationSet . class ) . addCandidate ( jarArtifact ) ; project . getComponents ( ) . add ( new JavaLibrary ( jarArtifact , runtimeConfiguration . getAllDependencies ( ) ) ) ; } private void configureBuild ( Project project ) { addDependsOnTaskInOtherProjects ( project . getTasks ( ) . getByName ( JavaBasePlugin . BUILD_NEEDED_TASK_NAME ) , true , JavaBasePlugin . BUILD_NEEDED_TASK_NAME , TEST_RUNTIME_CONFIGURATION_NAME ) ; addDependsOnTaskInOtherProjects ( project . getTasks ( ) . getByName ( JavaBasePlugin . BUILD_DEPENDENTS_TASK_NAME ) , false , JavaBasePlugin . BUILD_DEPENDENTS_TASK_NAME , TEST_RUNTIME_CONFIGURATION_NAME ) ; } private void configureTest ( final Project project , final JavaPluginConvention pluginConvention ) { project . getTasks ( ) . withType ( Test . class , new Action < Test > ( ) { public void execute ( final Test test ) { test . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return pluginConvention . getSourceSets ( ) . getByName ( SourceSet . TEST_SOURCE_SET_NAME ) . getOutput ( ) . getClassesDir ( ) ; } } ) ; test . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return pluginConvention . getSourceSets ( ) . getByName ( SourceSet . TEST_SOURCE_SET_NAME ) . getRuntimeClasspath ( ) ; } } ) ; test . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return new ArrayList < File > ( pluginConvention . getSourceSets ( ) . getByName ( SourceSet . TEST_SOURCE_SET_NAME ) . getJava ( ) . getSrcDirs ( ) ) ; } } ) ; } } ) ; Test test = project . getTasks ( ) . create ( TEST_TASK_NAME , Test . class ) ; project . getTasks ( ) . getByName ( JavaBasePlugin . CHECK_TASK_NAME ) . dependsOn ( test ) ; test . setDescription ( <str> ) ; test . setGroup ( JavaBasePlugin . VERIFICATION_GROUP ) ; } void configureConfigurations ( Project project ) { ConfigurationContainer configurations = project . getConfigurations ( ) ; Configuration compileConfiguration = configurations . getByName ( COMPILE_CONFIGURATION_NAME ) ; Configuration runtimeConfiguration = configurations . getByName ( RUNTIME_CONFIGURATION_NAME ) ; Configuration compileTestsConfiguration = configurations . getByName ( TEST_COMPILE_CONFIGURATION_NAME ) ; compileTestsConfiguration . extendsFrom ( compileConfiguration ) ; configurations . getByName ( TEST_RUNTIME_CONFIGURATION_NAME ) . extendsFrom ( runtimeConfiguration , compileTestsConfiguration ) ; configurations . getByName ( Dependency . DEFAULT_CONFIGURATION ) . extendsFrom ( runtimeConfiguration ) ; } private void addDependsOnTaskInOtherProjects ( final Task task , boolean useDependedOn , String otherProjectTaskName , String configurationName ) { Project project = task . getProject ( ) ; final Configuration configuration = project . getConfigurations ( ) . getByName ( configurationName ) ; task . dependsOn ( configuration . getTaskDependencyFromProjectDependency ( useDependedOn , otherProjectTaskName ) ) ; } private static class BuildableJavaComponentImpl implements BuildableJavaComponent { private final JavaPluginConvention convention ; public BuildableJavaComponentImpl ( JavaPluginConvention convention ) { this . convention = convention ; } public Collection < String > getRebuildTasks ( ) { return Arrays . asList ( BasePlugin . CLEAN_TASK_NAME , JavaBasePlugin . BUILD_TASK_NAME ) ; } public Collection < String > getBuildTasks ( ) { return Arrays . asList ( JavaBasePlugin . BUILD_TASK_NAME ) ; } public FileCollection getRuntimeClasspath ( ) { FileCollection runtimeClasspath = convention . getSourceSets ( ) . getByName ( SourceSet . MAIN_SOURCE_SET_NAME ) . getRuntimeClasspath ( ) ; ProjectInternal project = convention . getProject ( ) ; FileCollection gradleApi = project . getConfigurations ( ) . detachedConfiguration ( project . getDependencies ( ) . gradleApi ( ) , project . getDependencies ( ) . localGroovy ( ) ) ; return runtimeClasspath . minus ( gradleApi ) ; } public Configuration getCompileDependencies ( ) { return convention . getProject ( ) . getConfigurations ( ) . getByName ( JavaPlugin . COMPILE_CONFIGURATION_NAME ) ; } } } 

package org . apache . cassandra . db . marshal ; import static org . junit . Assert . assertArrayEquals ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import java . math . BigInteger ; import java . nio . ByteBuffer ; import java . util . Arrays ; import java . util . Random ; import org . junit . ComparisonFailure ; import org . junit . Test ; public class IntegerTypeTest { private static void assertSignum ( String message , int expected , double value ) { int signum = ( int ) Math . signum ( value ) ; if ( signum ! = expected ) throw new ComparisonFailure ( message , Integer . toString ( expected ) , Integer . toString ( signum ) ) ; } private final IntegerType comparator = IntegerType . instance ; @Test public void testTrimming ( ) { ByteBuffer n1 , n2 ; n1 = ByteBuffer . wrap ( new byte [ ] { <int> } ) ; n2 = ByteBuffer . wrap ( new byte [ ] { <int> , <int> , <int> , <int> } ) ; assertEquals ( <int> , comparator . compare ( n1 , n2 ) ) ; n1 = ByteBuffer . wrap ( new byte [ ] { <int> , <int> , <int> , <int> } ) ; n2 = ByteBuffer . wrap ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> } ) ; assertEquals ( <int> , comparator . compare ( n1 , n2 ) ) ; n1 = ByteBuffer . wrap ( new byte [ ] { - <int> , <int> , <int> , - <int> } ) ; n2 = ByteBuffer . wrap ( new byte [ ] { - <int> , - <int> , - <int> , - <int> , <int> , <int> , - <int> } ) ; assertEquals ( <int> , comparator . compare ( n1 , n2 ) ) ; n1 = ByteBuffer . wrap ( new byte [ ] { - <int> , <int> } ) ; n2 = ByteBuffer . wrap ( new byte [ ] { <int> , - <int> , <int> } ) ; assertSignum ( <str> , - <int> , comparator . compare ( n1 , n2 ) ) ; n1 = ByteBuffer . wrap ( new byte [ ] { <int> , <int> } ) ; n2 = ByteBuffer . wrap ( new byte [ ] { <int> , - <int> , <int> } ) ; assertSignum ( <str> , - <int> , comparator . compare ( n1 , n2 ) ) ; } @Test ( expected = NullPointerException . class ) public void testNullLeft ( ) { comparator . compare ( null , ByteBuffer . wrap ( new byte [ <int> ] ) ) ; } @Test ( expected = NullPointerException . class ) public void testNullRight ( ) { comparator . compare ( ByteBuffer . wrap ( new byte [ <int> ] ) , null ) ; } @Test ( expected = NullPointerException . class ) public void testNullBoth ( ) { comparator . compare ( null , null ) ; } @Test public void testZeroLengthArray ( ) { assertSignum ( <str> , - <int> , comparator . compare ( ByteBuffer . wrap ( new byte [ <int> ] ) , ByteBuffer . wrap ( new byte [ <int> ] ) ) ) ; assertSignum ( <str> , <int> , comparator . compare ( ByteBuffer . wrap ( new byte [ <int> ] ) , ByteBuffer . wrap ( new byte [ <int> ] ) ) ) ; assertSignum ( <str> , <int> , comparator . compare ( ByteBuffer . wrap ( new byte [ <int> ] ) , ByteBuffer . wrap ( new byte [ <int> ] ) ) ) ; } @Test public void testSanity ( ) { ByteBuffer nN = ByteBuffer . wrap ( new byte [ ] { - <int> } ) ; ByteBuffer nZ = ByteBuffer . wrap ( new byte [ ] { <int> } ) ; ByteBuffer nP = ByteBuffer . wrap ( new byte [ ] { <int> } ) ; assertSignum ( <str> , <int> , comparator . compare ( nZ , nN ) ) ; assertSignum ( <str> , - <int> , comparator . compare ( nN , nZ ) ) ; assertSignum ( <str> , - <int> , comparator . compare ( nZ , nP ) ) ; assertSignum ( <str> , <int> , comparator . compare ( nP , nZ ) ) ; assertSignum ( <str> , <int> , comparator . compare ( nP , nN ) ) ; assertSignum ( <str> , - <int> , comparator . compare ( nN , nP ) ) ; } @Test public void testSameLength ( ) { ByteBuffer n1 = ByteBuffer . wrap ( new byte [ ] { - <int> , <int> , - <int> , - <int> } ) ; ByteBuffer n2 = ByteBuffer . wrap ( new byte [ ] { - <int> , <int> , - <int> , - <int> } ) ; ByteBuffer p1 = ByteBuffer . wrap ( new byte [ ] { <int> , <int> , - <int> , - <int> } ) ; ByteBuffer p2 = ByteBuffer . wrap ( new byte [ ] { <int> , - <int> , - <int> , - <int> } ) ; assertSignum ( <str> , - <int> , comparator . compare ( n1 , n2 ) ) ; assertSignum ( <str> , <int> , comparator . compare ( n2 , n1 ) ) ; assertSignum ( <str> , - <int> , comparator . compare ( p1 , p2 ) ) ; assertSignum ( <str> , <int> , comparator . compare ( p2 , p1 ) ) ; assertSignum ( <str> , <int> , comparator . compare ( p1 , n1 ) ) ; assertSignum ( <str> , <int> , comparator . compare ( p1 , n2 ) ) ; assertSignum ( <str> , - <int> , comparator . compare ( n1 , p1 ) ) ; assertSignum ( <str> , - <int> , comparator . compare ( n2 , p1 ) ) ; } @Test public void testCommonPrefix ( ) { ByteBuffer [ ] data = { ByteBuffer . wrap ( new byte [ ] { <int> , <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { <int> , <int> , <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { <int> , <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { <int> , <int> , <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { - <int> , <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { - <int> , <int> , <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { - <int> , <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { - <int> , <int> , <int> , <int> , <int> } ) } ; Arrays . sort ( data , comparator ) ; assertArrayEquals ( new byte [ ] { - <int> , <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( new byte [ ] { - <int> , <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( new byte [ ] { - <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( new byte [ ] { - <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( new byte [ ] { <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( new byte [ ] { <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( new byte [ ] { <int> , <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( new byte [ ] { <int> , <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; } @Test public void testSorting ( ) { ByteBuffer [ ] data = { ByteBuffer . wrap ( new byte [ ] { <int> , <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { - <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { - <int> } ) , ByteBuffer . wrap ( new byte [ ] { <int> } ) , ByteBuffer . wrap ( new byte [ ] { - <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { <int> , <int> , <int> } ) , ByteBuffer . wrap ( new byte [ ] { - <int> , <int> , <int> , <int> } ) } ; Arrays . sort ( data , comparator ) ; assertArrayEquals ( <str> , new byte [ ] { - <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( <str> , new byte [ ] { - <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( <str> , new byte [ ] { - <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( <str> , new byte [ ] { - <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( <str> , new byte [ ] { <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( <str> , new byte [ ] { <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( <str> , new byte [ ] { <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; assertArrayEquals ( <str> , new byte [ ] { <int> , <int> , <int> , <int> } , data [ <int> ] . array ( ) ) ; } @Test public void testSortingSpecialExtendedVersion ( ) { Random rng = new Random ( - <int> ) ; ByteBuffer [ ] data = new ByteBuffer [ <int> ] ; for ( int i = <int> ; i < data . length ; i + + ) { data [ i ] = ByteBuffer . allocate ( rng . nextInt ( <int> ) + <int> ) ; rng . nextBytes ( data [ i ] . array ( ) ) ; } Arrays . sort ( data , comparator ) ; for ( int i = <int> ; i < data . length ; i + + ) { BigInteger i0 = new BigInteger ( data [ i - <int> ] . array ( ) ) ; BigInteger i1 = new BigInteger ( data [ i ] . array ( ) ) ; assertTrue ( <str> + i , i0 . compareTo ( i1 ) < = <int> ) ; } } } 

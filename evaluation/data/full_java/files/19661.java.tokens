package io . netty . util . concurrent ; import io . netty . util . internal . ObjectUtil ; import io . netty . util . internal . OneTimeTask ; import java . util . PriorityQueue ; import java . util . Queue ; import java . util . concurrent . Callable ; import java . util . concurrent . Executors ; import java . util . concurrent . TimeUnit ; public abstract class AbstractScheduledEventExecutor extends AbstractEventExecutor { Queue < ScheduledFutureTask < ? > > scheduledTaskQueue ; protected AbstractScheduledEventExecutor ( ) { } protected AbstractScheduledEventExecutor ( EventExecutorGroup parent ) { super ( parent ) ; } protected static long nanoTime ( ) { return ScheduledFutureTask . nanoTime ( ) ; } Queue < ScheduledFutureTask < ? > > scheduledTaskQueue ( ) { if ( scheduledTaskQueue = = null ) { scheduledTaskQueue = new PriorityQueue < ScheduledFutureTask < ? > > ( ) ; } return scheduledTaskQueue ; } private static boolean isNullOrEmpty ( Queue < ScheduledFutureTask < ? > > queue ) { return queue = = null | | queue . isEmpty ( ) ; } protected void cancelScheduledTasks ( ) { assert inEventLoop ( ) ; Queue < ScheduledFutureTask < ? > > scheduledTaskQueue = this . scheduledTaskQueue ; if ( isNullOrEmpty ( scheduledTaskQueue ) ) { return ; } final ScheduledFutureTask < ? > [ ] scheduledTasks = scheduledTaskQueue . toArray ( new ScheduledFutureTask < ? > [ scheduledTaskQueue . size ( ) ] ) ; for ( ScheduledFutureTask < ? > task : scheduledTasks ) { task . cancelWithoutRemove ( false ) ; } scheduledTaskQueue . clear ( ) ; } protected final Runnable pollScheduledTask ( ) { return pollScheduledTask ( nanoTime ( ) ) ; } protected final Runnable pollScheduledTask ( long nanoTime ) { assert inEventLoop ( ) ; Queue < ScheduledFutureTask < ? > > scheduledTaskQueue = this . scheduledTaskQueue ; ScheduledFutureTask < ? > scheduledTask = scheduledTaskQueue = = null ? null : scheduledTaskQueue . peek ( ) ; if ( scheduledTask = = null ) { return null ; } if ( scheduledTask . deadlineNanos ( ) < = nanoTime ) { scheduledTaskQueue . remove ( ) ; return scheduledTask ; } return null ; } protected final long nextScheduledTaskNano ( ) { Queue < ScheduledFutureTask < ? > > scheduledTaskQueue = this . scheduledTaskQueue ; ScheduledFutureTask < ? > scheduledTask = scheduledTaskQueue = = null ? null : scheduledTaskQueue . peek ( ) ; if ( scheduledTask = = null ) { return - <int> ; } return Math . max ( <int> , scheduledTask . deadlineNanos ( ) - nanoTime ( ) ) ; } final ScheduledFutureTask < ? > peekScheduledTask ( ) { Queue < ScheduledFutureTask < ? > > scheduledTaskQueue = this . scheduledTaskQueue ; if ( scheduledTaskQueue = = null ) { return null ; } return scheduledTaskQueue . peek ( ) ; } protected final boolean hasScheduledTasks ( ) { Queue < ScheduledFutureTask < ? > > scheduledTaskQueue = this . scheduledTaskQueue ; ScheduledFutureTask < ? > scheduledTask = scheduledTaskQueue = = null ? null : scheduledTaskQueue . peek ( ) ; return scheduledTask ! = null & & scheduledTask . deadlineNanos ( ) < = nanoTime ( ) ; } @Override public ScheduledFuture < ? > schedule ( Runnable command , long delay , TimeUnit unit ) { ObjectUtil . checkNotNull ( command , <str> ) ; ObjectUtil . checkNotNull ( unit , <str> ) ; if ( delay < <int> ) { throw new IllegalArgumentException ( String . format ( <str> , delay ) ) ; } return schedule ( new ScheduledFutureTask < Void > ( this , command , null , ScheduledFutureTask . deadlineNanos ( unit . toNanos ( delay ) ) ) ) ; } @Override public < V > ScheduledFuture < V > schedule ( Callable < V > callable , long delay , TimeUnit unit ) { ObjectUtil . checkNotNull ( callable , <str> ) ; ObjectUtil . checkNotNull ( unit , <str> ) ; if ( delay < <int> ) { throw new IllegalArgumentException ( String . format ( <str> , delay ) ) ; } return schedule ( new ScheduledFutureTask < V > ( this , callable , ScheduledFutureTask . deadlineNanos ( unit . toNanos ( delay ) ) ) ) ; } @Override public ScheduledFuture < ? > scheduleAtFixedRate ( Runnable command , long initialDelay , long period , TimeUnit unit ) { ObjectUtil . checkNotNull ( command , <str> ) ; ObjectUtil . checkNotNull ( unit , <str> ) ; if ( initialDelay < <int> ) { throw new IllegalArgumentException ( String . format ( <str> , initialDelay ) ) ; } if ( period < = <int> ) { throw new IllegalArgumentException ( String . format ( <str> , period ) ) ; } return schedule ( new ScheduledFutureTask < Void > ( this , Executors . < Void > callable ( command , null ) , ScheduledFutureTask . deadlineNanos ( unit . toNanos ( initialDelay ) ) , unit . toNanos ( period ) ) ) ; } @Override public ScheduledFuture < ? > scheduleWithFixedDelay ( Runnable command , long initialDelay , long delay , TimeUnit unit ) { ObjectUtil . checkNotNull ( command , <str> ) ; ObjectUtil . checkNotNull ( unit , <str> ) ; if ( initialDelay < <int> ) { throw new IllegalArgumentException ( String . format ( <str> , initialDelay ) ) ; } if ( delay < = <int> ) { throw new IllegalArgumentException ( String . format ( <str> , delay ) ) ; } return schedule ( new ScheduledFutureTask < Void > ( this , Executors . < Void > callable ( command , null ) , ScheduledFutureTask . deadlineNanos ( unit . toNanos ( initialDelay ) ) , - unit . toNanos ( delay ) ) ) ; } < V > ScheduledFuture < V > schedule ( final ScheduledFutureTask < V > task ) { if ( inEventLoop ( ) ) { scheduledTaskQueue ( ) . add ( task ) ; } else { execute ( new OneTimeTask ( ) { @Override public void run ( ) { scheduledTaskQueue ( ) . add ( task ) ; } } ) ; } return task ; } final void removeScheduled ( final ScheduledFutureTask < ? > task ) { if ( inEventLoop ( ) ) { scheduledTaskQueue ( ) . remove ( task ) ; } else { execute ( new OneTimeTask ( ) { @Override public void run ( ) { removeScheduled ( task ) ; } } ) ; } } } 

package org . elasticsearch . action . get ; import org . elasticsearch . action . support . single . shard . SingleShardOperationRequestBuilder ; import org . elasticsearch . client . ElasticsearchClient ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . Strings ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . search . fetch . source . FetchSourceContext ; public class GetRequestBuilder extends SingleShardOperationRequestBuilder < GetRequest , GetResponse , GetRequestBuilder > { public GetRequestBuilder ( ElasticsearchClient client , GetAction action ) { super ( client , action , new GetRequest ( ) ) ; } public GetRequestBuilder ( ElasticsearchClient client , GetAction action , @Nullable String index ) { super ( client , action , new GetRequest ( index ) ) ; } public GetRequestBuilder setType ( @Nullable String type ) { request . type ( type ) ; return this ; } public GetRequestBuilder setId ( String id ) { request . id ( id ) ; return this ; } public GetRequestBuilder setParent ( String parent ) { request . parent ( parent ) ; return this ; } public GetRequestBuilder setRouting ( String routing ) { request . routing ( routing ) ; return this ; } public GetRequestBuilder setPreference ( String preference ) { request . preference ( preference ) ; return this ; } public GetRequestBuilder setFields ( String . . . fields ) { request . fields ( fields ) ; return this ; } public GetRequestBuilder setFetchSource ( boolean fetch ) { FetchSourceContext context = request . fetchSourceContext ( ) ; if ( context = = null ) { request . fetchSourceContext ( new FetchSourceContext ( fetch ) ) ; } else { context . fetchSource ( fetch ) ; } return this ; } public GetRequestBuilder setFetchSource ( @Nullable String include , @Nullable String exclude ) { return setFetchSource ( include = = null ? Strings . EMPTY_ARRAY : new String [ ] { include } , exclude = = null ? Strings . EMPTY_ARRAY : new String [ ] { exclude } ) ; } public GetRequestBuilder setFetchSource ( @Nullable String [ ] includes , @Nullable String [ ] excludes ) { FetchSourceContext context = request . fetchSourceContext ( ) ; if ( context = = null ) { request . fetchSourceContext ( new FetchSourceContext ( includes , excludes ) ) ; } else { context . fetchSource ( true ) ; context . includes ( includes ) ; context . excludes ( excludes ) ; } return this ; } public GetRequestBuilder setRefresh ( boolean refresh ) { request . refresh ( refresh ) ; return this ; } public GetRequestBuilder setRealtime ( Boolean realtime ) { request . realtime ( realtime ) ; return this ; } public GetRequestBuilder setIgnoreErrorsOnGeneratedFields ( Boolean ignoreErrorsOnGeneratedFields ) { request . ignoreErrorsOnGeneratedFields ( ignoreErrorsOnGeneratedFields ) ; return this ; } public GetRequestBuilder setVersion ( long version ) { request . version ( version ) ; return this ; } public GetRequestBuilder setVersionType ( VersionType versionType ) { request . versionType ( versionType ) ; return this ; } } 

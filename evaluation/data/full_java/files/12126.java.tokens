package org . gradle . internal . service . scopes ; import org . gradle . api . internal . DependencyInjectingInstantiator ; import org . gradle . api . internal . SettingsInternal ; import org . gradle . api . internal . file . BaseDirFileResolver ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . plugins . * ; import org . gradle . initialization . DefaultProjectDescriptorRegistry ; import org . gradle . initialization . ProjectDescriptorRegistry ; import org . gradle . internal . nativeintegration . filesystem . FileSystem ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . service . DefaultServiceRegistry ; import org . gradle . internal . service . ServiceRegistry ; public class SettingsScopeServices extends DefaultServiceRegistry { private final SettingsInternal settings ; public SettingsScopeServices ( ServiceRegistry parent , final SettingsInternal settings ) { super ( parent ) ; this . settings = settings ; } protected FileResolver createFileResolver ( ) { return new BaseDirFileResolver ( get ( FileSystem . class ) , settings . getSettingsDir ( ) ) ; } protected PluginRegistry createPluginRegistry ( PluginRegistry parentRegistry ) { return parentRegistry . createChild ( settings . getClassLoaderScope ( ) ) ; } protected PluginManagerInternal createPluginManager ( Instantiator instantiator , PluginRegistry pluginRegistry ) { PluginApplicator applicator = new ImperativeOnlyPluginApplicator < SettingsInternal > ( settings ) ; return instantiator . newInstance ( DefaultPluginManager . class , pluginRegistry , new DependencyInjectingInstantiator ( this ) , applicator ) ; } protected ProjectDescriptorRegistry createProjectDescriptorRegistry ( ) { return new DefaultProjectDescriptorRegistry ( ) ; } } 

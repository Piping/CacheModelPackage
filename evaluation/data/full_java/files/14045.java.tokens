package org . gradle . api . publish . maven . internal . publisher ; import org . gradle . api . artifacts . repositories . MavenArtifactRepository ; import org . gradle . api . internal . artifacts . mvnsettings . LocalMavenRepositoryLocator ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . publication . maven . internal . action . MavenPublishAction ; import org . gradle . api . publish . maven . MavenArtifact ; import org . gradle . internal . Factory ; import org . gradle . logging . LoggingManagerInternal ; import org . gradle . util . GUtil ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; abstract public class AbstractMavenPublisher implements MavenPublisher { private final Factory < LoggingManagerInternal > loggingManagerFactory ; private static Logger logger = LoggerFactory . getLogger ( AbstractMavenPublisher . class ) ; private final LocalMavenRepositoryLocator mavenRepositoryLocator ; public AbstractMavenPublisher ( Factory < LoggingManagerInternal > loggingManagerFactory , LocalMavenRepositoryLocator mavenRepositoryLocator ) { this . loggingManagerFactory = loggingManagerFactory ; this . mavenRepositoryLocator = mavenRepositoryLocator ; } public void publish ( MavenNormalizedPublication publication , MavenArtifactRepository artifactRepository ) { logger . info ( <str> , artifactRepository ) ; MavenPublishAction deployTask = createDeployTask ( publication . getPomFile ( ) , mavenRepositoryLocator , artifactRepository ) ; addPomAndArtifacts ( deployTask , publication ) ; execute ( deployTask ) ; } abstract protected MavenPublishAction createDeployTask ( File pomFile , LocalMavenRepositoryLocator mavenRepositoryLocator , MavenArtifactRepository artifactRepository ) ; private void addPomAndArtifacts ( MavenPublishAction publishAction , MavenNormalizedPublication publication ) { MavenArtifact mainArtifact = publication . getMainArtifact ( ) ; if ( mainArtifact ! = null ) { publishAction . setMainArtifact ( mainArtifact . getFile ( ) ) ; } for ( MavenArtifact mavenArtifact : publication . getArtifacts ( ) ) { if ( mavenArtifact = = mainArtifact ) { continue ; } publishAction . addAdditionalArtifact ( mavenArtifact . getFile ( ) , GUtil . elvis ( mavenArtifact . getExtension ( ) , <str> ) , GUtil . elvis ( mavenArtifact . getClassifier ( ) , <str> ) ) ; } } private void execute ( MavenPublishAction publishAction ) { LoggingManagerInternal loggingManager = loggingManagerFactory . create ( ) ; loggingManager . captureStandardOutput ( LogLevel . INFO ) . start ( ) ; try { publishAction . publish ( ) ; } finally { loggingManager . stop ( ) ; } } } 

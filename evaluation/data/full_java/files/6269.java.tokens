package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . cjk . CJKBigramFilter ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; public final class CJKBigramFilterFactory extends AbstractTokenFilterFactory { private final int flags ; private final boolean outputUnigrams ; public CJKBigramFilterFactory ( IndexSettings indexSettings , Environment environment , String name , Settings settings ) { super ( indexSettings , name , settings ) ; outputUnigrams = settings . getAsBoolean ( <str> , false ) ; final String [ ] asArray = settings . getAsArray ( <str> ) ; Set < String > scripts = new HashSet < > ( Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; if ( asArray ! = null ) { scripts . removeAll ( Arrays . asList ( asArray ) ) ; } int flags = <int> ; for ( String script : scripts ) { if ( <str> . equals ( script ) ) { flags | = CJKBigramFilter . HAN ; } else if ( <str> . equals ( script ) ) { flags | = CJKBigramFilter . HIRAGANA ; } else if ( <str> . equals ( script ) ) { flags | = CJKBigramFilter . KATAKANA ; } else if ( <str> . equals ( script ) ) { flags | = CJKBigramFilter . HANGUL ; } } this . flags = flags ; } @Override public TokenStream create ( TokenStream tokenStream ) { return new CJKBigramFilter ( tokenStream , flags , outputUnigrams ) ; } } 

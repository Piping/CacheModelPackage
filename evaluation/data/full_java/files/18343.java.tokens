package com . badlogic . gdx . utils ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import java . util . ArrayList ; import java . util . List ; import java . util . Locale ; import java . util . MissingResourceException ; import com . badlogic . gdx . files . FileHandle ; public class I18NBundle { private static final String DEFAULT_ENCODING = <str> ; private static final Locale ROOT_LOCALE = new Locale ( <str> , <str> , <str> ) ; private static boolean simpleFormatter = false ; private static boolean exceptionOnMissingKey = true ; private I18NBundle parent ; private Locale locale ; private ObjectMap < String , String > properties ; private TextFormatter formatter ; public static boolean getSimpleFormatter ( ) { return simpleFormatter ; } public static void setSimpleFormatter ( boolean enabled ) { simpleFormatter = enabled ; } public static boolean getExceptionOnMissingKey ( ) { return exceptionOnMissingKey ; } public static void setExceptionOnMissingKey ( boolean enabled ) { exceptionOnMissingKey = enabled ; } public static I18NBundle createBundle ( FileHandle baseFileHandle ) { return createBundleImpl ( baseFileHandle , Locale . getDefault ( ) , DEFAULT_ENCODING ) ; } public static I18NBundle createBundle ( FileHandle baseFileHandle , Locale locale ) { return createBundleImpl ( baseFileHandle , locale , DEFAULT_ENCODING ) ; } public static I18NBundle createBundle ( FileHandle baseFileHandle , String encoding ) { return createBundleImpl ( baseFileHandle , Locale . getDefault ( ) , encoding ) ; } public static I18NBundle createBundle ( FileHandle baseFileHandle , Locale locale , String encoding ) { return createBundleImpl ( baseFileHandle , locale , encoding ) ; } private static I18NBundle createBundleImpl ( FileHandle baseFileHandle , Locale locale , String encoding ) { if ( baseFileHandle = = null | | locale = = null | | encoding = = null ) throw new NullPointerException ( ) ; I18NBundle bundle = null ; I18NBundle baseBundle = null ; Locale targetLocale = locale ; do { List < Locale > candidateLocales = getCandidateLocales ( targetLocale ) ; bundle = loadBundleChain ( baseFileHandle , encoding , candidateLocales , <int> , baseBundle ) ; if ( bundle ! = null ) { Locale bundleLocale = bundle . getLocale ( ) ; boolean isBaseBundle = bundleLocale . equals ( ROOT_LOCALE ) ; if ( ! isBaseBundle | | bundleLocale . equals ( locale ) ) { break ; } if ( candidateLocales . size ( ) = = <int> & & bundleLocale . equals ( candidateLocales . get ( <int> ) ) ) { break ; } if ( isBaseBundle & & baseBundle = = null ) { baseBundle = bundle ; } } targetLocale = getFallbackLocale ( targetLocale ) ; } while ( targetLocale ! = null ) ; if ( bundle = = null ) { if ( baseBundle = = null ) { throw new MissingResourceException ( <str> + baseFileHandle . path ( ) + <str> + locale , baseFileHandle + <str> + locale , <str> ) ; } bundle = baseBundle ; } return bundle ; } private static List < Locale > getCandidateLocales ( Locale locale ) { String language = locale . getLanguage ( ) ; String country = locale . getCountry ( ) ; String variant = locale . getVariant ( ) ; List < Locale > locales = new ArrayList < Locale > ( <int> ) ; if ( variant . length ( ) > <int> ) { locales . add ( locale ) ; } if ( country . length ( ) > <int> ) { locales . add ( ( locales . size ( ) = = <int> ) ? locale : new Locale ( language , country ) ) ; } if ( language . length ( ) > <int> ) { locales . add ( ( locales . size ( ) = = <int> ) ? locale : new Locale ( language ) ) ; } locales . add ( ROOT_LOCALE ) ; return locales ; } private static Locale getFallbackLocale ( Locale locale ) { Locale defaultLocale = Locale . getDefault ( ) ; return locale . equals ( defaultLocale ) ? null : defaultLocale ; } private static I18NBundle loadBundleChain ( FileHandle baseFileHandle , String encoding , List < Locale > candidateLocales , int candidateIndex , I18NBundle baseBundle ) { Locale targetLocale = candidateLocales . get ( candidateIndex ) ; I18NBundle parent = null ; if ( candidateIndex ! = candidateLocales . size ( ) - <int> ) { parent = loadBundleChain ( baseFileHandle , encoding , candidateLocales , candidateIndex + <int> , baseBundle ) ; } else if ( baseBundle ! = null & & targetLocale . equals ( ROOT_LOCALE ) ) { return baseBundle ; } I18NBundle bundle = loadBundle ( baseFileHandle , encoding , targetLocale ) ; if ( bundle ! = null ) { bundle . parent = parent ; return bundle ; } return parent ; } private static I18NBundle loadBundle ( FileHandle baseFileHandle , String encoding , Locale targetLocale ) { I18NBundle bundle = null ; Reader reader = null ; try { FileHandle fileHandle = toFileHandle ( baseFileHandle , targetLocale ) ; if ( checkFileExistence ( fileHandle ) ) { bundle = new I18NBundle ( ) ; reader = fileHandle . reader ( encoding ) ; bundle . load ( reader ) ; } } catch ( IOException e ) { throw new GdxRuntimeException ( e ) ; } finally { StreamUtils . closeQuietly ( reader ) ; } if ( bundle ! = null ) { bundle . setLocale ( targetLocale ) ; } return bundle ; } private static boolean checkFileExistence ( FileHandle fh ) { try { fh . read ( ) . close ( ) ; return true ; } catch ( Exception e ) { return false ; } } protected void load ( Reader reader ) throws IOException { properties = new ObjectMap < String , String > ( ) ; PropertiesUtils . load ( properties , reader ) ; } private static FileHandle toFileHandle ( FileHandle baseFileHandle , Locale locale ) { StringBuilder sb = new StringBuilder ( baseFileHandle . name ( ) ) ; if ( ! locale . equals ( ROOT_LOCALE ) ) { String language = locale . getLanguage ( ) ; String country = locale . getCountry ( ) ; String variant = locale . getVariant ( ) ; boolean emptyLanguage = <str> . equals ( language ) ; boolean emptyCountry = <str> . equals ( country ) ; boolean emptyVariant = <str> . equals ( variant ) ; if ( ! ( emptyLanguage & & emptyCountry & & emptyVariant ) ) { sb . append ( <str> ) ; if ( ! emptyVariant ) { sb . append ( language ) . append ( <str> ) . append ( country ) . append ( <str> ) . append ( variant ) ; } else if ( ! emptyCountry ) { sb . append ( language ) . append ( <str> ) . append ( country ) ; } else { sb . append ( language ) ; } } } return baseFileHandle . sibling ( sb . append ( <str> ) . toString ( ) ) ; } public Locale getLocale ( ) { return locale ; } private void setLocale ( Locale locale ) { this . locale = locale ; this . formatter = new TextFormatter ( locale , ! simpleFormatter ) ; } public final String get ( String key ) { String result = properties . get ( key ) ; if ( result = = null ) { if ( parent ! = null ) result = parent . get ( key ) ; if ( result = = null ) { if ( exceptionOnMissingKey ) throw new MissingResourceException ( <str> + key , this . getClass ( ) . getName ( ) , key ) ; else return <str> + key + <str> ; } } return result ; } public String format ( String key , Object . . . args ) { return formatter . format ( get ( key ) , args ) ; } } 

package org . elasticsearch . common . lucene . uid ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . NumericDocValuesField ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . store . Directory ; import org . apache . lucene . util . Bits ; import org . apache . lucene . util . BytesRef ; import org . apache . lucene . util . FixedBitSet ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . common . lucene . uid . Versions . DocIdAndVersion ; import org . elasticsearch . index . mapper . internal . UidFieldMapper ; import org . elasticsearch . index . mapper . internal . VersionFieldMapper ; import org . elasticsearch . test . ESTestCase ; public class VersionLookupTests extends ESTestCase { public void testSimple ( ) throws Exception { Directory dir = newDirectory ( ) ; IndexWriter writer = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document doc = new Document ( ) ; doc . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . FIELD_TYPE ) ) ; doc . add ( new NumericDocValuesField ( VersionFieldMapper . NAME , <int> ) ) ; writer . addDocument ( doc ) ; DirectoryReader reader = DirectoryReader . open ( writer , false ) ; LeafReaderContext segment = reader . leaves ( ) . get ( <int> ) ; PerThreadIDAndVersionLookup lookup = new PerThreadIDAndVersionLookup ( segment . reader ( ) ) ; DocIdAndVersion result = lookup . lookup ( new BytesRef ( <str> ) , null , segment ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . version ) ; assertEquals ( <int> , result . docId ) ; assertNull ( lookup . lookup ( new BytesRef ( <str> ) , null , segment ) ) ; assertNull ( lookup . lookup ( new BytesRef ( <str> ) , new Bits . MatchNoBits ( <int> ) , segment ) ) ; reader . close ( ) ; writer . close ( ) ; dir . close ( ) ; } public void testTwoDocuments ( ) throws Exception { Directory dir = newDirectory ( ) ; IndexWriter writer = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document doc = new Document ( ) ; doc . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . FIELD_TYPE ) ) ; doc . add ( new NumericDocValuesField ( VersionFieldMapper . NAME , <int> ) ) ; writer . addDocument ( doc ) ; writer . addDocument ( doc ) ; DirectoryReader reader = DirectoryReader . open ( writer , false ) ; LeafReaderContext segment = reader . leaves ( ) . get ( <int> ) ; PerThreadIDAndVersionLookup lookup = new PerThreadIDAndVersionLookup ( segment . reader ( ) ) ; DocIdAndVersion result = lookup . lookup ( new BytesRef ( <str> ) , null , segment ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . version ) ; assertEquals ( <int> , result . docId ) ; FixedBitSet live = new FixedBitSet ( <int> ) ; live . set ( <int> ) ; result = lookup . lookup ( new BytesRef ( <str> ) , live , segment ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . version ) ; assertEquals ( <int> , result . docId ) ; live . clear ( <int> ) ; live . set ( <int> ) ; result = lookup . lookup ( new BytesRef ( <str> ) , live , segment ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . version ) ; assertEquals ( <int> , result . docId ) ; assertNull ( lookup . lookup ( new BytesRef ( <str> ) , new Bits . MatchNoBits ( <int> ) , segment ) ) ; reader . close ( ) ; writer . close ( ) ; dir . close ( ) ; } } 

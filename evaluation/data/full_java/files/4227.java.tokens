package org . eclipse . debug . internal . ui . launchConfigurations ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationListener ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . ui . AbstractDebugView ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . IDebugView ; import org . eclipse . help . HelpSystem ; import org . eclipse . help . IContext ; import org . eclipse . help . IContextProvider ; import org . eclipse . jface . action . IMenuManager ; import org . eclipse . jface . action . IToolBarManager ; import org . eclipse . jface . action . Separator ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . jface . viewers . TreeViewer ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . viewers . ViewerFilter ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . KeyAdapter ; import org . eclipse . swt . events . KeyEvent ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . PatternFilter ; import com . ibm . icu . text . MessageFormat ; public class LaunchConfigurationView extends AbstractDebugView implements ILaunchConfigurationListener { private LaunchConfigurationFilteredTree fTree ; private ILaunchManager fLaunchManager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; private LaunchGroupExtension fLaunchGroup ; private CreateLaunchConfigurationAction fCreateAction ; private DeleteLaunchConfigurationAction fDeleteAction ; private DuplicateLaunchConfigurationAction fDuplicateAction ; private CollapseAllLaunchConfigurationAction fCollapseAllAction ; private FilterLaunchConfigurationAction fFilterAction ; private Label fFilteredNotice = null ; private boolean fAutoSelect = true ; private ViewerFilter [ ] fFilters = null ; public LaunchConfigurationView ( LaunchGroupExtension launchGroup ) { super ( ) ; fLaunchGroup = launchGroup ; } public LaunchConfigurationView ( LaunchGroupExtension launchGroup , ViewerFilter [ ] filters ) { super ( ) ; fLaunchGroup = launchGroup ; fFilters = filters ; } protected LaunchGroupExtension getLaunchGroup ( ) { return fLaunchGroup ; } @Override protected Viewer createViewer ( Composite parent ) { fTree = new LaunchConfigurationFilteredTree ( parent , SWT . MULTI | SWT . H_SCROLL | SWT . V_SCROLL , new PatternFilter ( ) , fLaunchGroup , fFilters ) ; fTree . createViewControl ( ) ; getLaunchManager ( ) . addLaunchConfigurationListener ( this ) ; LaunchConfigurationViewer viewer = fTree . getLaunchConfigurationViewer ( ) ; viewer . setLaunchConfigurationView ( this ) ; return viewer ; } @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Class < T > key ) { if ( key = = IContextProvider . class ) { return ( T ) new IContextProvider ( ) { @Override public int getContextChangeMask ( ) { return SELECTION ; } @Override public IContext getContext ( Object target ) { String id = fTree . computeContextId ( ) ; if ( id ! = null ) { return HelpSystem . getContext ( id ) ; } return null ; } @Override public String getSearchExpression ( Object target ) { return null ; } } ; } return super . getAdapter ( key ) ; } public Text getFilteringTextControl ( ) { return fTree . getFilterControl ( ) ; } @Override protected void createActions ( ) { fCreateAction = new CreateLaunchConfigurationAction ( getViewer ( ) , getLaunchGroup ( ) . getMode ( ) ) ; setAction ( CreateLaunchConfigurationAction . ID_CREATE_ACTION , fCreateAction ) ; fDeleteAction = new DeleteLaunchConfigurationAction ( getViewer ( ) , getLaunchGroup ( ) . getMode ( ) ) ; setAction ( DeleteLaunchConfigurationAction . ID_DELETE_ACTION , fDeleteAction ) ; setAction ( IDebugView . REMOVE_ACTION , fDeleteAction ) ; fDuplicateAction = new DuplicateLaunchConfigurationAction ( getViewer ( ) , getLaunchGroup ( ) . getMode ( ) ) ; setAction ( DuplicateLaunchConfigurationAction . ID_DUPLICATE_ACTION , fDuplicateAction ) ; fCollapseAllAction = new CollapseAllLaunchConfigurationAction ( ( TreeViewer ) getViewer ( ) ) ; setAction ( CollapseAllLaunchConfigurationAction . ID_COLLAPSEALL_ACTION , fCollapseAllAction ) ; fFilterAction = new FilterLaunchConfigurationAction ( ) ; setAction ( FilterLaunchConfigurationAction . ID_FILTER_ACTION , fFilterAction ) ; } @Override protected String getHelpContextId ( ) { return IDebugHelpContextIds . LAUNCH_CONFIGURATION_VIEW ; } @Override protected void fillContextMenu ( IMenuManager menu ) { menu . add ( fCreateAction ) ; menu . add ( fDuplicateAction ) ; menu . add ( fDeleteAction ) ; menu . add ( new Separator ( ) ) ; } @Override protected void configureToolBar ( IToolBarManager tbm ) { } protected TreeViewer getTreeViewer ( ) { return fTree . getLaunchConfigurationViewer ( ) ; } @Override public void dispose ( ) { fCreateAction . dispose ( ) ; fDeleteAction . dispose ( ) ; fDuplicateAction . dispose ( ) ; fFilterAction = null ; fCollapseAllAction = null ; getLaunchManager ( ) . removeLaunchConfigurationListener ( this ) ; } @Override public void launchConfigurationAdded ( final ILaunchConfiguration configuration ) { if ( isSupportedConfiguration ( configuration ) ) { final ILaunchConfiguration from = getLaunchManager ( ) . getMovedFrom ( configuration ) ; Display display = DebugUIPlugin . getStandardDisplay ( ) ; display . asyncExec ( new Runnable ( ) { @Override public void run ( ) { if ( ! fTree . isDisposed ( ) ) { handleConfigurationAdded ( configuration , from ) ; } } } ) ; } } private void handleConfigurationAdded ( ILaunchConfiguration configuration , ILaunchConfiguration from ) { TreeViewer viewer = getTreeViewer ( ) ; if ( viewer ! = null ) { try { viewer . getControl ( ) . setRedraw ( false ) ; viewer . add ( configuration . getType ( ) , configuration ) ; if ( from ! = null ) { viewer . remove ( from ) ; } if ( isAutoSelect ( ) ) { viewer . setSelection ( new StructuredSelection ( configuration ) , true ) ; } updateFilterLabel ( ) ; } catch ( CoreException e ) { } finally { viewer . getControl ( ) . setRedraw ( true ) ; } } } protected boolean isSupportedConfiguration ( ILaunchConfiguration configuration ) { try { ILaunchConfigurationType type = configuration . getType ( ) ; return ! configuration . getAttribute ( IDebugUIConstants . ATTR_PRIVATE , false ) & & type . supportsMode ( getLaunchGroup ( ) . getMode ( ) ) & & equalCategories ( type . getCategory ( ) , getLaunchGroup ( ) . getCategory ( ) ) ; } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } return false ; } private boolean equalCategories ( String c1 , String c2 ) { if ( c1 = = null | | c2 = = null ) { return c1 = = c2 ; } return c1 . equals ( c2 ) ; } @Override public void launchConfigurationChanged ( ILaunchConfiguration configuration ) { } @Override public void launchConfigurationRemoved ( final ILaunchConfiguration configuration ) { ILaunchConfiguration to = getLaunchManager ( ) . getMovedTo ( configuration ) ; if ( to ! = null ) { return ; } Display display = DebugUIPlugin . getStandardDisplay ( ) ; display . asyncExec ( new Runnable ( ) { @Override public void run ( ) { if ( ! fTree . isDisposed ( ) ) { handleConfigurationRemoved ( configuration ) ; } } } ) ; } private void handleConfigurationRemoved ( ILaunchConfiguration configuration ) { getTreeViewer ( ) . remove ( configuration ) ; updateFilterLabel ( ) ; } public void createLaunchDialogControl ( Composite parent ) { createViewer ( parent ) ; createActions ( ) ; createContextMenu ( getViewer ( ) . getControl ( ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( parent , getHelpContextId ( ) ) ; getViewer ( ) . getControl ( ) . addKeyListener ( new KeyAdapter ( ) { @Override public void keyPressed ( KeyEvent e ) { handleKeyPressed ( e ) ; } } ) ; if ( getViewer ( ) instanceof StructuredViewer ) { ( ( StructuredViewer ) getViewer ( ) ) . addDoubleClickListener ( this ) ; } fFilteredNotice = SWTFactory . createLabel ( parent , IInternalDebugCoreConstants . EMPTY_STRING , <int> ) ; fFilteredNotice . setBackground ( parent . getBackground ( ) ) ; } @Override public Viewer getViewer ( ) { return fTree . getLaunchConfigurationViewer ( ) ; } public void updateFilterLabel ( ) { LaunchConfigurationViewer viewer = ( LaunchConfigurationViewer ) getViewer ( ) ; fFilteredNotice . setText ( MessageFormat . format ( LaunchConfigurationsMessages . LaunchConfigurationView_0 , new Object [ ] { Integer . toString ( viewer . getNonFilteredChildCount ( ) ) , Integer . toString ( viewer . getTotalChildCount ( ) ) } ) ) ; } protected ILaunchManager getLaunchManager ( ) { return fLaunchManager ; } public void setAutoSelect ( boolean select ) { fAutoSelect = select ; } protected boolean isAutoSelect ( ) { return fAutoSelect ; } } 

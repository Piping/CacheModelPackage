package io . netty . handler . codec . http ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . compression . ZlibCodecFactory ; import io . netty . handler . codec . compression . ZlibDecoder ; import io . netty . handler . codec . compression . ZlibEncoder ; import io . netty . handler . codec . compression . ZlibWrapper ; import io . netty . util . CharsetUtil ; import io . netty . util . ReferenceCountUtil ; import org . junit . Test ; import java . util . ArrayList ; import java . util . List ; import java . util . Queue ; import static org . hamcrest . CoreMatchers . * ; import static org . junit . Assert . * ; public class HttpContentDecoderTest { private static final String HELLO_WORLD = <str> ; private static final byte [ ] GZ_HELLO_WORLD = { <int> , - <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , - <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , <int> } ; @Test public void testBinaryDecompression ( ) throws Exception { byte [ ] helloWorld = gzDecompress ( GZ_HELLO_WORLD ) ; assertEquals ( HELLO_WORLD . length ( ) , helloWorld . length ) ; assertEquals ( HELLO_WORLD , new String ( helloWorld , CharsetUtil . US_ASCII ) ) ; String fullCycleTest = <str> ; byte [ ] compressed = gzCompress ( fullCycleTest . getBytes ( CharsetUtil . US_ASCII ) ) ; byte [ ] decompressed = gzDecompress ( compressed ) ; assertEquals ( decompressed . length , fullCycleTest . length ( ) ) ; assertEquals ( fullCycleTest , new String ( decompressed , CharsetUtil . US_ASCII ) ) ; } @Test public void testRequestDecompression ( ) { HttpRequestDecoder decoder = new HttpRequestDecoder ( ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , decompressor , aggregator ) ; String headers = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; ByteBuf buf = Unpooled . copiedBuffer ( headers . getBytes ( CharsetUtil . US_ASCII ) , GZ_HELLO_WORLD ) ; assertTrue ( channel . writeInbound ( buf ) ) ; Object o = channel . readInbound ( ) ; assertThat ( o , is ( instanceOf ( FullHttpRequest . class ) ) ) ; FullHttpRequest req = ( FullHttpRequest ) o ; assertEquals ( HELLO_WORLD . length ( ) , req . headers ( ) . getInt ( HttpHeaderNames . CONTENT_LENGTH ) . intValue ( ) ) ; assertEquals ( HELLO_WORLD , req . content ( ) . toString ( CharsetUtil . US_ASCII ) ) ; req . release ( ) ; assertHasInboundMessages ( channel , false ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testResponseDecompression ( ) { HttpResponseDecoder decoder = new HttpResponseDecoder ( ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , decompressor , aggregator ) ; String headers = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; ByteBuf buf = Unpooled . copiedBuffer ( headers . getBytes ( CharsetUtil . US_ASCII ) , GZ_HELLO_WORLD ) ; assertTrue ( channel . writeInbound ( buf ) ) ; Object o = channel . readInbound ( ) ; assertThat ( o , is ( instanceOf ( FullHttpResponse . class ) ) ) ; FullHttpResponse resp = ( FullHttpResponse ) o ; assertEquals ( HELLO_WORLD . length ( ) , resp . headers ( ) . getInt ( HttpHeaderNames . CONTENT_LENGTH ) . intValue ( ) ) ; assertEquals ( HELLO_WORLD , resp . content ( ) . toString ( CharsetUtil . US_ASCII ) ) ; resp . release ( ) ; assertHasInboundMessages ( channel , false ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testExpectContinueResponse1 ( ) { HttpRequestDecoder decoder = new HttpRequestDecoder ( ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , aggregator ) ; String req = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; assertFalse ( channel . writeInbound ( Unpooled . wrappedBuffer ( req . getBytes ( ) ) ) ) ; Object o = channel . readOutbound ( ) ; assertThat ( o , is ( instanceOf ( FullHttpResponse . class ) ) ) ; FullHttpResponse r = ( FullHttpResponse ) o ; assertEquals ( <int> , r . status ( ) . code ( ) ) ; assertTrue ( channel . writeInbound ( Unpooled . wrappedBuffer ( GZ_HELLO_WORLD ) ) ) ; r . release ( ) ; assertHasInboundMessages ( channel , true ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testExpectContinueResponse2 ( ) { HttpRequestDecoder decoder = new HttpRequestDecoder ( ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , decompressor , aggregator ) ; String req = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; assertFalse ( channel . writeInbound ( Unpooled . wrappedBuffer ( req . getBytes ( ) ) ) ) ; Object o = channel . readOutbound ( ) ; assertThat ( o , is ( instanceOf ( FullHttpResponse . class ) ) ) ; FullHttpResponse r = ( FullHttpResponse ) o ; assertEquals ( <int> , r . status ( ) . code ( ) ) ; r . release ( ) ; assertTrue ( channel . writeInbound ( Unpooled . wrappedBuffer ( GZ_HELLO_WORLD ) ) ) ; assertHasInboundMessages ( channel , true ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testExpectContinueResponse3 ( ) { HttpRequestDecoder decoder = new HttpRequestDecoder ( ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , decompressor , aggregator ) ; String req = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> + <str> ; assertFalse ( channel . writeInbound ( Unpooled . wrappedBuffer ( req . getBytes ( ) ) ) ) ; Object o = channel . readOutbound ( ) ; assertThat ( o , is ( instanceOf ( FullHttpResponse . class ) ) ) ; FullHttpResponse r = ( FullHttpResponse ) o ; assertEquals ( <int> , r . status ( ) . code ( ) ) ; r . release ( ) ; assertTrue ( channel . writeInbound ( Unpooled . wrappedBuffer ( GZ_HELLO_WORLD ) ) ) ; assertHasInboundMessages ( channel , true ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testExpectContinueResponse4 ( ) { HttpRequestDecoder decoder = new HttpRequestDecoder ( ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , aggregator , decompressor ) ; String req = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> + <str> ; assertFalse ( channel . writeInbound ( Unpooled . wrappedBuffer ( req . getBytes ( ) ) ) ) ; Object o = channel . readOutbound ( ) ; assertThat ( o , is ( instanceOf ( FullHttpResponse . class ) ) ) ; FullHttpResponse r = ( FullHttpResponse ) o ; assertEquals ( <int> , r . status ( ) . code ( ) ) ; r . release ( ) ; assertTrue ( channel . writeInbound ( Unpooled . wrappedBuffer ( GZ_HELLO_WORLD ) ) ) ; assertHasInboundMessages ( channel , true ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testRequestContentLength1 ( ) { HttpRequestDecoder decoder = new HttpRequestDecoder ( <int> , <int> , <int> ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , decompressor ) ; String headers = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; ByteBuf buf = Unpooled . copiedBuffer ( headers . getBytes ( CharsetUtil . US_ASCII ) , GZ_HELLO_WORLD ) ; assertTrue ( channel . writeInbound ( buf ) ) ; Queue < Object > req = channel . inboundMessages ( ) ; assertTrue ( req . size ( ) > = <int> ) ; Object o = req . peek ( ) ; assertThat ( o , is ( instanceOf ( HttpRequest . class ) ) ) ; HttpRequest r = ( HttpRequest ) o ; String v = r . headers ( ) . get ( HttpHeaderNames . CONTENT_LENGTH ) ; Long value = v = = null ? null : Long . parseLong ( v ) ; assertTrue ( value = = null | | value . longValue ( ) = = HELLO_WORLD . length ( ) ) ; assertHasInboundMessages ( channel , true ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testRequestContentLength2 ( ) { HttpRequestDecoder decoder = new HttpRequestDecoder ( <int> , <int> , <int> ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , decompressor , aggregator ) ; String headers = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; ByteBuf buf = Unpooled . copiedBuffer ( headers . getBytes ( CharsetUtil . US_ASCII ) , GZ_HELLO_WORLD ) ; assertTrue ( channel . writeInbound ( buf ) ) ; Object o = channel . readInbound ( ) ; assertThat ( o , is ( instanceOf ( FullHttpRequest . class ) ) ) ; FullHttpRequest r = ( FullHttpRequest ) o ; String v = r . headers ( ) . get ( HttpHeaderNames . CONTENT_LENGTH ) ; Long value = v = = null ? null : Long . parseLong ( v ) ; r . release ( ) ; assertNotNull ( value ) ; assertEquals ( HELLO_WORLD . length ( ) , value . longValue ( ) ) ; assertHasInboundMessages ( channel , false ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testResponseContentLength1 ( ) { HttpResponseDecoder decoder = new HttpResponseDecoder ( <int> , <int> , <int> ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , decompressor ) ; String headers = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; ByteBuf buf = Unpooled . copiedBuffer ( headers . getBytes ( CharsetUtil . US_ASCII ) , GZ_HELLO_WORLD ) ; assertTrue ( channel . writeInbound ( buf ) ) ; Queue < Object > resp = channel . inboundMessages ( ) ; assertTrue ( resp . size ( ) > = <int> ) ; Object o = resp . peek ( ) ; assertThat ( o , is ( instanceOf ( HttpResponse . class ) ) ) ; HttpResponse r = ( HttpResponse ) o ; String v = r . headers ( ) . get ( HttpHeaderNames . CONTENT_LENGTH ) ; Long value = v = = null ? null : Long . parseLong ( v ) ; assertTrue ( value = = null | | value . longValue ( ) = = HELLO_WORLD . length ( ) ) ; assertHasInboundMessages ( channel , true ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testResponseContentLength2 ( ) { HttpResponseDecoder decoder = new HttpResponseDecoder ( <int> , <int> , <int> ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , decompressor , aggregator ) ; String headers = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; ByteBuf buf = Unpooled . copiedBuffer ( headers . getBytes ( CharsetUtil . US_ASCII ) , GZ_HELLO_WORLD ) ; assertTrue ( channel . writeInbound ( buf ) ) ; Object o = channel . readInbound ( ) ; assertThat ( o , is ( instanceOf ( FullHttpResponse . class ) ) ) ; FullHttpResponse r = ( FullHttpResponse ) o ; String v = r . headers ( ) . get ( HttpHeaderNames . CONTENT_LENGTH ) ; Long value = v = = null ? null : Long . parseLong ( v ) ; assertNotNull ( value ) ; assertEquals ( HELLO_WORLD . length ( ) , value . longValue ( ) ) ; r . release ( ) ; assertHasInboundMessages ( channel , false ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testFullHttpRequest ( ) { HttpRequestDecoder decoder = new HttpRequestDecoder ( <int> , <int> , <int> ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , aggregator , decompressor ) ; String headers = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; assertTrue ( channel . writeInbound ( Unpooled . copiedBuffer ( headers . getBytes ( ) , GZ_HELLO_WORLD ) ) ) ; Queue < Object > req = channel . inboundMessages ( ) ; assertTrue ( req . size ( ) > <int> ) ; int contentLength = <int> ; for ( Object o : req ) { if ( o instanceof HttpContent ) { assertTrue ( ( ( HttpContent ) o ) . refCnt ( ) > <int> ) ; ByteBuf b = ( ( HttpContent ) o ) . content ( ) ; contentLength + = b . readableBytes ( ) ; } } int readCount = <int> ; byte [ ] receivedContent = new byte [ contentLength ] ; for ( Object o : req ) { if ( o instanceof HttpContent ) { ByteBuf b = ( ( HttpContent ) o ) . content ( ) ; int readableBytes = b . readableBytes ( ) ; b . readBytes ( receivedContent , readCount , readableBytes ) ; readCount + = readableBytes ; } } assertEquals ( HELLO_WORLD , new String ( receivedContent , CharsetUtil . US_ASCII ) ) ; assertHasInboundMessages ( channel , true ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } @Test public void testFullHttpResponse ( ) { HttpResponseDecoder decoder = new HttpResponseDecoder ( <int> , <int> , <int> ) ; HttpObjectAggregator aggregator = new HttpObjectAggregator ( <int> ) ; HttpContentDecoder decompressor = new HttpContentDecompressor ( ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder , aggregator , decompressor ) ; String headers = <str> + <str> + GZ_HELLO_WORLD . length + <str> + <str> + <str> ; assertTrue ( channel . writeInbound ( Unpooled . copiedBuffer ( headers . getBytes ( ) , GZ_HELLO_WORLD ) ) ) ; Queue < Object > resp = channel . inboundMessages ( ) ; assertTrue ( resp . size ( ) > <int> ) ; int contentLength = <int> ; for ( Object o : resp ) { if ( o instanceof HttpContent ) { assertTrue ( ( ( HttpContent ) o ) . refCnt ( ) > <int> ) ; ByteBuf b = ( ( HttpContent ) o ) . content ( ) ; contentLength + = b . readableBytes ( ) ; } } int readCount = <int> ; byte [ ] receivedContent = new byte [ contentLength ] ; for ( Object o : resp ) { if ( o instanceof HttpContent ) { ByteBuf b = ( ( HttpContent ) o ) . content ( ) ; int readableBytes = b . readableBytes ( ) ; b . readBytes ( receivedContent , readCount , readableBytes ) ; readCount + = readableBytes ; } } assertEquals ( HELLO_WORLD , new String ( receivedContent , CharsetUtil . US_ASCII ) ) ; assertHasInboundMessages ( channel , true ) ; assertHasOutboundMessages ( channel , false ) ; assertFalse ( channel . finish ( ) ) ; } private byte [ ] gzDecompress ( byte [ ] input ) { ZlibDecoder decoder = ZlibCodecFactory . newZlibDecoder ( ZlibWrapper . GZIP ) ; EmbeddedChannel channel = new EmbeddedChannel ( decoder ) ; assertTrue ( channel . writeInbound ( Unpooled . wrappedBuffer ( input ) ) ) ; assertTrue ( channel . finish ( ) ) ; int outputSize = <int> ; ByteBuf o ; List < ByteBuf > inbound = new ArrayList < ByteBuf > ( ) ; while ( ( o = channel . readInbound ( ) ) ! = null ) { inbound . add ( o ) ; outputSize + = o . readableBytes ( ) ; } byte [ ] output = new byte [ outputSize ] ; int readCount = <int> ; for ( ByteBuf b : inbound ) { int readableBytes = b . readableBytes ( ) ; b . readBytes ( output , readCount , readableBytes ) ; b . release ( ) ; readCount + = readableBytes ; } assertTrue ( channel . inboundMessages ( ) . isEmpty ( ) & & channel . outboundMessages ( ) . isEmpty ( ) ) ; return output ; } private byte [ ] gzCompress ( byte [ ] input ) { ZlibEncoder encoder = ZlibCodecFactory . newZlibEncoder ( ZlibWrapper . GZIP ) ; EmbeddedChannel channel = new EmbeddedChannel ( encoder ) ; assertTrue ( channel . writeOutbound ( Unpooled . wrappedBuffer ( input ) ) ) ; assertTrue ( channel . finish ( ) ) ; int outputSize = <int> ; ByteBuf o ; List < ByteBuf > outbound = new ArrayList < ByteBuf > ( ) ; while ( ( o = channel . readOutbound ( ) ) ! = null ) { outbound . add ( o ) ; outputSize + = o . readableBytes ( ) ; } byte [ ] output = new byte [ outputSize ] ; int readCount = <int> ; for ( ByteBuf b : outbound ) { int readableBytes = b . readableBytes ( ) ; b . readBytes ( output , readCount , readableBytes ) ; b . release ( ) ; readCount + = readableBytes ; } assertTrue ( channel . inboundMessages ( ) . isEmpty ( ) & & channel . outboundMessages ( ) . isEmpty ( ) ) ; return output ; } private void assertHasInboundMessages ( EmbeddedChannel channel , boolean hasMessages ) { Object o ; if ( hasMessages ) { while ( true ) { o = channel . readInbound ( ) ; assertNotNull ( o ) ; ReferenceCountUtil . release ( o ) ; if ( o instanceof LastHttpContent ) { break ; } } } else { o = channel . readInbound ( ) ; assertNull ( o ) ; } } private void assertHasOutboundMessages ( EmbeddedChannel channel , boolean hasMessages ) { Object o ; if ( hasMessages ) { while ( true ) { o = channel . readOutbound ( ) ; assertNotNull ( o ) ; ReferenceCountUtil . release ( o ) ; if ( o instanceof LastHttpContent ) { break ; } } } else { o = channel . readOutbound ( ) ; assertNull ( o ) ; } } } 

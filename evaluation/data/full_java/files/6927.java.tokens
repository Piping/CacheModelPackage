package org . elasticsearch . repositories ; import org . elasticsearch . action . admin . cluster . snapshots . status . TransportNodesSnapshotsStatus ; import org . elasticsearch . common . inject . AbstractModule ; import org . elasticsearch . index . snapshots . IndexShardRepository ; import org . elasticsearch . index . snapshots . blobstore . BlobStoreIndexShardRepository ; import org . elasticsearch . repositories . fs . FsRepository ; import org . elasticsearch . repositories . uri . URLRepository ; import org . elasticsearch . snapshots . RestoreService ; import org . elasticsearch . snapshots . SnapshotShardsService ; import org . elasticsearch . snapshots . SnapshotsService ; public class RepositoriesModule extends AbstractModule { private final RepositoryTypesRegistry repositoryTypes = new RepositoryTypesRegistry ( ) ; public RepositoriesModule ( ) { registerRepository ( FsRepository . TYPE , FsRepository . class , BlobStoreIndexShardRepository . class ) ; registerRepository ( URLRepository . TYPE , URLRepository . class , BlobStoreIndexShardRepository . class ) ; } public void registerRepository ( String type , Class < ? extends Repository > repositoryType , Class < ? extends IndexShardRepository > shardRepositoryType ) { repositoryTypes . registerRepository ( type , repositoryType , shardRepositoryType ) ; } @Override protected void configure ( ) { bind ( RepositoriesService . class ) . asEagerSingleton ( ) ; bind ( SnapshotsService . class ) . asEagerSingleton ( ) ; bind ( SnapshotShardsService . class ) . asEagerSingleton ( ) ; bind ( TransportNodesSnapshotsStatus . class ) . asEagerSingleton ( ) ; bind ( RestoreService . class ) . asEagerSingleton ( ) ; bind ( RepositoryTypesRegistry . class ) . toInstance ( repositoryTypes ) ; } } 

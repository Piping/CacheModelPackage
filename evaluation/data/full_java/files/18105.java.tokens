package com . badlogic . gdx . graphics . g3d . utils ; import com . badlogic . gdx . graphics . GLTexture ; import com . badlogic . gdx . graphics . Texture ; public class TextureDescriptor < T extends GLTexture > implements Comparable < TextureDescriptor < T > > { public T texture = null ; public Texture . TextureFilter minFilter ; public Texture . TextureFilter magFilter ; public Texture . TextureWrap uWrap ; public Texture . TextureWrap vWrap ; public TextureDescriptor ( final T texture , final Texture . TextureFilter minFilter , final Texture . TextureFilter magFilter , final Texture . TextureWrap uWrap , final Texture . TextureWrap vWrap ) { set ( texture , minFilter , magFilter , uWrap , vWrap ) ; } public TextureDescriptor ( final T texture ) { this ( texture , null , null , null , null ) ; } public TextureDescriptor ( ) { } public void set ( final T texture , final Texture . TextureFilter minFilter , final Texture . TextureFilter magFilter , final Texture . TextureWrap uWrap , final Texture . TextureWrap vWrap ) { this . texture = texture ; this . minFilter = minFilter ; this . magFilter = magFilter ; this . uWrap = uWrap ; this . vWrap = vWrap ; } public < V extends T > void set ( final TextureDescriptor < V > other ) { texture = other . texture ; minFilter = other . minFilter ; magFilter = other . magFilter ; uWrap = other . uWrap ; vWrap = other . vWrap ; } @Override public boolean equals ( Object obj ) { if ( obj = = null ) return false ; if ( obj = = this ) return true ; if ( ! ( obj instanceof TextureDescriptor ) ) return false ; final TextureDescriptor < ? > other = ( TextureDescriptor < ? > ) obj ; return other . texture = = texture & & other . minFilter = = minFilter & & other . magFilter = = magFilter & & other . uWrap = = uWrap & & other . vWrap = = vWrap ; } @Override public int hashCode ( ) { long result = ( texture = = null ? <int> : texture . glTarget ) ; result = <int> * result + ( texture = = null ? <int> : texture . getTextureObjectHandle ( ) ) ; result = <int> * result + ( minFilter = = null ? <int> : minFilter . getGLEnum ( ) ) ; result = <int> * result + ( magFilter = = null ? <int> : magFilter . getGLEnum ( ) ) ; result = <int> * result + ( uWrap = = null ? <int> : uWrap . getGLEnum ( ) ) ; result = <int> * result + ( vWrap = = null ? <int> : vWrap . getGLEnum ( ) ) ; return ( int ) ( result ^ ( result > > <int> ) ) ; } @Override public int compareTo ( TextureDescriptor < T > o ) { if ( o = = this ) return <int> ; int t1 = texture = = null ? <int> : texture . glTarget ; int t2 = o . texture = = null ? <int> : o . texture . glTarget ; if ( t1 ! = t2 ) return t1 - t2 ; int h1 = texture = = null ? <int> : texture . getTextureObjectHandle ( ) ; int h2 = o . texture = = null ? <int> : o . texture . getTextureObjectHandle ( ) ; if ( h1 ! = h2 ) return h1 - h2 ; if ( minFilter ! = o . minFilter ) return ( minFilter = = null ? <int> : minFilter . getGLEnum ( ) ) - ( o . minFilter = = null ? <int> : o . minFilter . getGLEnum ( ) ) ; if ( magFilter ! = o . magFilter ) return ( magFilter = = null ? <int> : magFilter . getGLEnum ( ) ) - ( o . magFilter = = null ? <int> : o . magFilter . getGLEnum ( ) ) ; if ( uWrap ! = o . uWrap ) return ( uWrap = = null ? <int> : uWrap . getGLEnum ( ) ) - ( o . uWrap = = null ? <int> : o . uWrap . getGLEnum ( ) ) ; if ( vWrap ! = o . vWrap ) return ( vWrap = = null ? <int> : vWrap . getGLEnum ( ) ) - ( o . vWrap = = null ? <int> : o . vWrap . getGLEnum ( ) ) ; return <int> ; } } 

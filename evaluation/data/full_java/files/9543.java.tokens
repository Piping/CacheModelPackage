package com . google . common . util . concurrent ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import java . util . concurrent . CancellationException ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . Executor ; import java . util . concurrent . TimeUnit ; import java . util . logging . Level ; import java . util . logging . Logger ; import javax . annotation . Nullable ; @GwtCompatible ( emulated = true ) abstract class ImmediateFuture < V > implements ListenableFuture < V > { private static final Logger log = Logger . getLogger ( ImmediateFuture . class . getName ( ) ) ; @Override public void addListener ( Runnable listener , Executor executor ) { checkNotNull ( listener , <str> ) ; checkNotNull ( executor , <str> ) ; try { executor . execute ( listener ) ; } catch ( RuntimeException e ) { log . log ( Level . SEVERE , <str> + listener + <str> + executor , e ) ; } } @Override public boolean cancel ( boolean mayInterruptIfRunning ) { return false ; } @Override public abstract V get ( ) throws ExecutionException ; @Override public V get ( long timeout , TimeUnit unit ) throws ExecutionException { checkNotNull ( unit ) ; return get ( ) ; } @Override public boolean isCancelled ( ) { return false ; } @Override public boolean isDone ( ) { return true ; } static class ImmediateSuccessfulFuture < V > extends ImmediateFuture < V > { static final ImmediateSuccessfulFuture < Object > NULL = new ImmediateSuccessfulFuture < Object > ( null ) ; @Nullable private final V value ; ImmediateSuccessfulFuture ( @Nullable V value ) { this . value = value ; } @Override public V get ( ) { return value ; } } @GwtIncompatible ( <str> ) static class ImmediateSuccessfulCheckedFuture < V , X extends Exception > extends ImmediateFuture < V > implements CheckedFuture < V , X > { @Nullable private final V value ; ImmediateSuccessfulCheckedFuture ( @Nullable V value ) { this . value = value ; } @Override public V get ( ) { return value ; } @Override public V checkedGet ( ) { return value ; } @Override public V checkedGet ( long timeout , TimeUnit unit ) { checkNotNull ( unit ) ; return value ; } } static class ImmediateFailedFuture < V > extends ImmediateFuture < V > { private final Throwable thrown ; ImmediateFailedFuture ( Throwable thrown ) { this . thrown = thrown ; } @Override public V get ( ) throws ExecutionException { throw new ExecutionException ( thrown ) ; } } @GwtIncompatible ( <str> ) static class ImmediateCancelledFuture < V > extends ImmediateFuture < V > { private final CancellationException thrown ; ImmediateCancelledFuture ( ) { this . thrown = new CancellationException ( <str> ) ; } @Override public boolean isCancelled ( ) { return true ; } @Override public V get ( ) { throw AbstractFuture . cancellationExceptionWithCause ( <str> , thrown ) ; } } @GwtIncompatible ( <str> ) static class ImmediateFailedCheckedFuture < V , X extends Exception > extends ImmediateFuture < V > implements CheckedFuture < V , X > { private final X thrown ; ImmediateFailedCheckedFuture ( X thrown ) { this . thrown = thrown ; } @Override public V get ( ) throws ExecutionException { throw new ExecutionException ( thrown ) ; } @Override public V checkedGet ( ) throws X { throw thrown ; } @Override public V checkedGet ( long timeout , TimeUnit unit ) throws X { checkNotNull ( unit ) ; throw thrown ; } } } 

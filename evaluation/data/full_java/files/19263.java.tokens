package io . netty . handler . codec . http ; import io . netty . handler . codec . http . HttpHeadersTestUtils . HeaderValue ; import io . netty . util . AsciiString ; import org . junit . Test ; import java . util . Arrays ; import java . util . Iterator ; import java . util . List ; import static io . netty . handler . codec . http . HttpHeadersTestUtils . of ; import static io . netty . util . AsciiString . contentEquals ; import static java . util . Arrays . asList ; import static org . hamcrest . CoreMatchers . is ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertNotNull ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; public class DefaultHttpHeadersTest { private static final CharSequence HEADER_NAME = <str> ; @Test public void keysShouldBeCaseInsensitive ( ) { DefaultHttpHeaders headers = new DefaultHttpHeaders ( ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; assertEquals ( <int> , headers . size ( ) ) ; List < String > values = asList ( <str> , <str> , <str> ) ; assertEquals ( values , headers . getAll ( of ( <str> ) ) ) ; assertEquals ( values , headers . getAll ( of ( <str> ) ) ) ; assertEquals ( values , headers . getAll ( of ( <str> ) ) ) ; assertEquals ( values , headers . getAll ( of ( <str> ) ) ) ; } @Test public void keysShouldBeCaseInsensitiveInHeadersEquals ( ) { DefaultHttpHeaders headers1 = new DefaultHttpHeaders ( ) ; headers1 . add ( of ( <str> ) , Arrays . asList ( <str> , <str> , <str> ) ) ; headers1 . add ( of ( <str> ) , of ( <str> ) ) ; DefaultHttpHeaders headers2 = new DefaultHttpHeaders ( ) ; headers2 . add ( of ( <str> ) , Arrays . asList ( <str> , <str> , <str> ) ) ; headers2 . add ( of ( <str> ) , of ( <str> ) ) ; assertEquals ( headers1 , headers1 ) ; assertEquals ( headers2 , headers2 ) ; assertEquals ( headers1 , headers2 ) ; assertEquals ( headers2 , headers1 ) ; assertEquals ( headers1 . hashCode ( ) , headers2 . hashCode ( ) ) ; } @Test public void testStringKeyRetrievedAsAsciiString ( ) { final HttpHeaders headers = new DefaultHttpHeaders ( false ) ; final String connection = <str> ; headers . add ( of ( <str> ) , connection ) ; final String value = headers . getAsString ( HttpHeaderNames . CONNECTION . toString ( ) ) ; assertNotNull ( value ) ; assertEquals ( connection , value ) ; final String value2 = headers . getAsString ( HttpHeaderNames . CONNECTION ) ; assertNotNull ( value2 ) ; assertEquals ( connection , value2 ) ; } @Test public void testAsciiStringKeyRetrievedAsString ( ) { final HttpHeaders headers = new DefaultHttpHeaders ( false ) ; final String cacheControl = <str> ; headers . add ( HttpHeaderNames . CACHE_CONTROL , cacheControl ) ; final String value = headers . getAsString ( HttpHeaderNames . CACHE_CONTROL ) ; assertNotNull ( value ) ; assertEquals ( cacheControl , value ) ; final String value2 = headers . getAsString ( HttpHeaderNames . CACHE_CONTROL . toString ( ) ) ; assertNotNull ( value2 ) ; assertEquals ( cacheControl , value2 ) ; } @Test public void testRemoveTransferEncodingIgnoreCase ( ) { HttpMessage message = new DefaultHttpResponse ( HttpVersion . HTTP_1_1 , HttpResponseStatus . OK ) ; message . headers ( ) . set ( HttpHeaderNames . TRANSFER_ENCODING , <str> ) ; assertFalse ( message . headers ( ) . isEmpty ( ) ) ; HttpUtil . setTransferEncodingChunked ( message , false ) ; assertTrue ( message . headers ( ) . isEmpty ( ) ) ; } @Test public void testGetOperations ( ) { HttpHeaders headers = new DefaultHttpHeaders ( ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; assertEquals ( <str> , headers . get ( of ( <str> ) ) ) ; List < String > values = headers . getAll ( of ( <str> ) ) ; assertEquals ( <int> , values . size ( ) ) ; assertEquals ( <str> , values . get ( <int> ) ) ; assertEquals ( <str> , values . get ( <int> ) ) ; } @Test public void testEqualsIgnoreCase ( ) { assertThat ( AsciiString . contentEqualsIgnoreCase ( null , null ) , is ( true ) ) ; assertThat ( AsciiString . contentEqualsIgnoreCase ( null , <str> ) , is ( false ) ) ; assertThat ( AsciiString . contentEqualsIgnoreCase ( <str> , null ) , is ( false ) ) ; assertThat ( AsciiString . contentEqualsIgnoreCase ( <str> , <str> ) , is ( true ) ) ; } @Test ( expected = NullPointerException . class ) public void testSetNullHeaderValueValidate ( ) { HttpHeaders headers = new DefaultHttpHeaders ( true ) ; headers . set ( of ( <str> ) , ( CharSequence ) null ) ; } @Test ( expected = NullPointerException . class ) public void testSetNullHeaderValueNotValidate ( ) { HttpHeaders headers = new DefaultHttpHeaders ( false ) ; headers . set ( of ( <str> ) , ( CharSequence ) null ) ; } @Test public void addCharSequences ( ) { final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertDefaultValues ( headers , HeaderValue . THREE ) ; } @Test public void addIterable ( ) { final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertDefaultValues ( headers , HeaderValue . THREE ) ; } @Test public void addObjects ( ) { final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders ( ) ; headers . add ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertDefaultValues ( headers , HeaderValue . THREE ) ; } @Test public void setCharSequences ( ) { final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders ( ) ; headers . set ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertDefaultValues ( headers , HeaderValue . THREE ) ; } @Test public void setIterable ( ) { final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders ( ) ; headers . set ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertDefaultValues ( headers , HeaderValue . THREE ) ; } @Test public void setObjectObjects ( ) { final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders ( ) ; headers . set ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertDefaultValues ( headers , HeaderValue . THREE ) ; } @Test public void setObjectIterable ( ) { final DefaultHttpHeaders headers = newDefaultDefaultHttpHeaders ( ) ; headers . set ( HEADER_NAME , HeaderValue . THREE . asList ( ) ) ; assertDefaultValues ( headers , HeaderValue . THREE ) ; } private static void assertDefaultValues ( final DefaultHttpHeaders headers , final HeaderValue headerValue ) { assertTrue ( contentEquals ( headerValue . asList ( ) . get ( <int> ) , headers . get ( HEADER_NAME ) ) ) ; List < CharSequence > expected = headerValue . asList ( ) ; List < String > actual = headers . getAll ( HEADER_NAME ) ; assertEquals ( expected . size ( ) , actual . size ( ) ) ; Iterator < CharSequence > eItr = expected . iterator ( ) ; Iterator < String > aItr = actual . iterator ( ) ; while ( eItr . hasNext ( ) ) { assertTrue ( contentEquals ( eItr . next ( ) , aItr . next ( ) ) ) ; } } private static DefaultHttpHeaders newDefaultDefaultHttpHeaders ( ) { return new DefaultHttpHeaders ( true ) ; } } 

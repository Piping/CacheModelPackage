package org . elasticsearch . cluster . node ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . CopyOnWriteArrayList ; public class DiscoveryNodeService extends AbstractComponent { private final List < CustomAttributesProvider > customAttributesProviders = new CopyOnWriteArrayList < > ( ) ; @Inject public DiscoveryNodeService ( Settings settings ) { super ( settings ) ; } public DiscoveryNodeService addCustomAttributeProvider ( CustomAttributesProvider customAttributesProvider ) { customAttributesProviders . add ( customAttributesProvider ) ; return this ; } public Map < String , String > buildAttributes ( ) { Map < String , String > attributes = new HashMap < > ( settings . getByPrefix ( <str> ) . getAsMap ( ) ) ; attributes . remove ( <str> ) ; if ( attributes . containsKey ( <str> ) ) { if ( attributes . get ( <str> ) . equals ( <str> ) ) { attributes . remove ( <str> ) ; } else { attributes . put ( <str> , <str> ) ; } } if ( attributes . containsKey ( <str> ) ) { if ( attributes . get ( <str> ) . equals ( <str> ) ) { attributes . remove ( <str> ) ; } } for ( CustomAttributesProvider provider : customAttributesProviders ) { try { Map < String , String > customAttributes = provider . buildAttributes ( ) ; if ( customAttributes ! = null ) { for ( Map . Entry < String , String > entry : customAttributes . entrySet ( ) ) { if ( ! attributes . containsKey ( entry . getKey ( ) ) ) { attributes . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } } } catch ( Exception e ) { logger . warn ( <str> , e , provider ) ; } } return attributes ; } public static interface CustomAttributesProvider { Map < String , String > buildAttributes ( ) ; } } 

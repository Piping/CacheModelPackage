package io . netty . handler . codec . http2 . hpack ; import java . io . IOException ; final class Hex { private Hex ( ) { } private static final char [ ] DIGITS_LOWER = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; private static final char [ ] DIGITS_UPPER = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; public static byte [ ] decodeHex ( char [ ] data ) throws IOException { int len = data . length ; if ( ( len & <hex> ) ! = <int> ) { throw new IOException ( <str> ) ; } byte [ ] out = new byte [ len > > <int> ] ; for ( int i = <int> , j = <int> ; j < len ; i + + ) { int f = toDigit ( data [ j ] , j ) < < <int> ; j + + ; f = f | toDigit ( data [ j ] , j ) ; j + + ; out [ i ] = ( byte ) ( f & <hex> ) ; } return out ; } public static char [ ] encodeHex ( byte [ ] data ) { return encodeHex ( data , true ) ; } public static char [ ] encodeHex ( byte [ ] data , boolean toLowerCase ) { return encodeHex ( data , toLowerCase ? DIGITS_LOWER : DIGITS_UPPER ) ; } protected static char [ ] encodeHex ( byte [ ] data , char [ ] toDigits ) { int l = data . length ; char [ ] out = new char [ l < < <int> ] ; for ( int i = <int> , j = <int> ; i < l ; i + + ) { out [ j + + ] = toDigits [ ( <hex> & data [ i ] ) > > > <int> ] ; out [ j + + ] = toDigits [ <hex> & data [ i ] ] ; } return out ; } public static String encodeHexString ( byte [ ] data ) { return new String ( encodeHex ( data ) ) ; } protected static int toDigit ( char ch , int index ) throws IOException { int digit = Character . digit ( ch , <int> ) ; if ( digit = = - <int> ) { throw new IOException ( <str> + ch + <str> + index ) ; } return digit ; } } 

package org . eclipse . ui . externaltools . internal . model ; import java . net . MalformedURLException ; import java . net . URL ; import org . eclipse . core . externaltools . internal . IExternalToolConstants ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchListener ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . resource . ImageRegistry ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . IWindowListener ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . externaltools . internal . program . launchConfigurations . ExternalToolsProgramMessages ; import org . eclipse . ui . plugin . AbstractUIPlugin ; import org . osgi . framework . Bundle ; import org . osgi . framework . BundleContext ; public final class ExternalToolsPlugin extends AbstractUIPlugin implements ILaunchListener { public static final String PLUGIN_ID = <str> ; public static final IStatus OK_STATUS = new Status ( IStatus . OK , PLUGIN_ID , <int> , IExternalToolConstants . EMPTY_STRING , null ) ; private static ExternalToolsPlugin plugin ; private static IWindowListener fWindowListener ; private static ILaunchManager launchManager ; private class ProgramLaunchWindowListener implements IWindowListener { @Override public void windowActivated ( IWorkbenchWindow window ) { } @Override public void windowDeactivated ( IWorkbenchWindow window ) { } @Override public void windowClosed ( IWorkbenchWindow window ) { IWorkbenchWindow windows [ ] = PlatformUI . getWorkbench ( ) . getWorkbenchWindows ( ) ; if ( windows . length > <int> ) { return ; } ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; ILaunchConfigurationType programType = manager . getLaunchConfigurationType ( IExternalToolConstants . ID_PROGRAM_LAUNCH_CONFIGURATION_TYPE ) ; if ( programType = = null ) { return ; } ILaunch launches [ ] = manager . getLaunches ( ) ; ILaunchConfigurationType configType ; ILaunchConfiguration config ; for ( int i = <int> ; i < launches . length ; i + + ) { try { config = launches [ i ] . getLaunchConfiguration ( ) ; if ( config = = null ) { continue ; } configType = config . getType ( ) ; } catch ( CoreException e ) { continue ; } if ( configType . equals ( programType ) ) { if ( ! launches [ i ] . isTerminated ( ) ) { MessageDialog . openWarning ( window . getShell ( ) , ExternalToolsProgramMessages . ProgramLaunchDelegate_Workbench_Closing_1 , ExternalToolsProgramMessages . ProgramLaunchDelegate_The_workbench_is_exiting ) ; break ; } } } } @Override public void windowOpened ( IWorkbenchWindow window ) { } } public ExternalToolsPlugin ( ) { super ( ) ; plugin = this ; } public static ExternalToolsPlugin getDefault ( ) { return plugin ; } public static IStatus newErrorStatus ( String message , Throwable exception ) { if ( message = = null ) { return new Status ( IStatus . ERROR , PLUGIN_ID , <int> , IExternalToolConstants . EMPTY_STRING , exception ) ; } return new Status ( IStatus . ERROR , PLUGIN_ID , <int> , message , exception ) ; } public static CoreException newError ( String message , Throwable exception ) { return new CoreException ( new Status ( IStatus . ERROR , PLUGIN_ID , <int> , message , exception ) ) ; } public void log ( String message , Throwable exception ) { IStatus status = newErrorStatus ( message , exception ) ; getLog ( ) . log ( status ) ; } public void log ( Throwable exception ) { getLog ( ) . log ( newErrorStatus ( <str> , exception ) ) ; } public ImageDescriptor getImageDescriptor ( String path ) { try { Bundle bundle = getDefault ( ) . getBundle ( ) ; URL installURL = bundle . getEntry ( <str> ) ; URL url = new URL ( installURL , path ) ; return ImageDescriptor . createFromURL ( url ) ; } catch ( MalformedURLException e ) { return null ; } } public static IWorkbenchWindow getActiveWorkbenchWindow ( ) { return getDefault ( ) . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; } public static IWorkbenchPage getActivePage ( ) { IWorkbenchWindow window = getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { return window . getActivePage ( ) ; } return null ; } public static Shell getActiveWorkbenchShell ( ) { IWorkbenchWindow window = getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { return window . getShell ( ) ; } return null ; } public static Display getStandardDisplay ( ) { Display display = Display . getCurrent ( ) ; if ( display = = null ) { display = Display . getDefault ( ) ; } return display ; } @Override protected ImageRegistry createImageRegistry ( ) { return ExternalToolsImages . initializeImageRegistry ( ) ; } @Override public void stop ( BundleContext context ) throws Exception { try { ExternalToolsImages . disposeImageDescriptorRegistry ( ) ; } finally { super . stop ( context ) ; } } @Override public void start ( BundleContext context ) throws Exception { super . start ( context ) ; launchManager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; ILaunch [ ] launches = launchManager . getLaunches ( ) ; if ( launches . length > <int> ) { if ( fWindowListener = = null ) { fWindowListener = new ProgramLaunchWindowListener ( ) ; PlatformUI . getWorkbench ( ) . addWindowListener ( fWindowListener ) ; } } else { launchManager . addLaunchListener ( this ) ; } } @Override public void launchAdded ( ILaunch launch ) { ILaunchConfiguration launchConfiguration = launch . getLaunchConfiguration ( ) ; if ( launchConfiguration ! = null ) { try { ILaunchConfigurationType launchConfigurationType = launchConfiguration . getType ( ) ; if ( launchConfigurationType . getIdentifier ( ) . equals ( IExternalToolConstants . ID_PROGRAM_LAUNCH_CONFIGURATION_TYPE ) ) { if ( fWindowListener = = null ) { fWindowListener = new ProgramLaunchWindowListener ( ) ; PlatformUI . getWorkbench ( ) . addWindowListener ( fWindowListener ) ; launchManager . removeLaunchListener ( this ) ; } } } catch ( CoreException e ) { log ( e ) ; } } } @Override public void launchChanged ( ILaunch launch ) { } @Override public void launchRemoved ( ILaunch launch ) { } } 

package org . gradle . api . internal . changedetection . state ; import org . gradle . api . invocation . Gradle ; import org . gradle . cache . CacheRepository ; import org . gradle . cache . PersistentCache ; import org . gradle . cache . PersistentIndexedCache ; import org . gradle . cache . PersistentIndexedCacheParameters ; import org . gradle . cache . internal . CacheDecorator ; import org . gradle . cache . internal . FileLockManager ; import org . gradle . internal . Factory ; import org . gradle . internal . serialize . Serializer ; import java . io . Closeable ; import static org . gradle . cache . internal . filelock . LockOptionsBuilder . mode ; public class DefaultTaskArtifactStateCacheAccess implements TaskArtifactStateCacheAccess , Closeable { private final CacheDecorator inMemoryDecorator ; private final PersistentCache cache ; public DefaultTaskArtifactStateCacheAccess ( Gradle gradle , CacheRepository cacheRepository , CacheDecorator decorator ) { this . inMemoryDecorator = decorator ; cache = cacheRepository . cache ( gradle , <str> ) . withDisplayName ( <str> ) . withLockOptions ( mode ( FileLockManager . LockMode . None ) ) . open ( ) ; } public void close ( ) { cache . close ( ) ; } public < K , V > PersistentIndexedCache < K , V > createCache ( final String cacheName , final Class < K > keyType , final Serializer < V > valueSerializer ) { PersistentIndexedCacheParameters < K , V > parameters = new PersistentIndexedCacheParameters < K , V > ( cacheName , keyType , valueSerializer ) . cacheDecorator ( inMemoryDecorator ) ; return cache . createCache ( parameters ) ; } public < T > T useCache ( String operationDisplayName , Factory < ? extends T > action ) { return cache . useCache ( operationDisplayName , action ) ; } public void useCache ( String operationDisplayName , Runnable action ) { cache . useCache ( operationDisplayName , action ) ; } public < T > T longRunningOperation ( String operationDisplayName , Factory < ? extends T > action ) { return cache . longRunningOperation ( operationDisplayName , action ) ; } public void longRunningOperation ( String operationDisplayName , Runnable action ) { cache . longRunningOperation ( operationDisplayName , action ) ; } } 

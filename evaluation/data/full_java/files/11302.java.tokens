package org . gradle . api . internal ; import groovy . lang . Closure ; import org . gradle . api . Namer ; import org . gradle . api . Named ; import org . gradle . api . NamedDomainObjectFactory ; import org . gradle . internal . reflect . Instantiator ; public class FactoryNamedDomainObjectContainer < T > extends AbstractNamedDomainObjectContainer < T > { private final NamedDomainObjectFactory < T > factory ; public FactoryNamedDomainObjectContainer ( Class < T > type , Instantiator instantiator ) { this ( type , instantiator , Named . Namer . forType ( type ) ) ; } public FactoryNamedDomainObjectContainer ( Class < T > type , Instantiator instantiator , Namer < ? super T > namer ) { this ( type , instantiator , namer , new ReflectiveNamedDomainObjectFactory < T > ( type ) ) ; } public FactoryNamedDomainObjectContainer ( Class < T > type , Instantiator instantiator , NamedDomainObjectFactory < T > factory ) { this ( type , instantiator , Named . Namer . forType ( type ) , factory ) ; } public FactoryNamedDomainObjectContainer ( Class < T > type , Instantiator instantiator , Namer < ? super T > namer , NamedDomainObjectFactory < T > factory ) { super ( type , instantiator , namer ) ; this . factory = factory ; } public FactoryNamedDomainObjectContainer ( Class < T > type , Instantiator instantiator , final Closure factoryClosure ) { this ( type , instantiator , Named . Namer . forType ( type ) , factoryClosure ) ; } public FactoryNamedDomainObjectContainer ( Class < T > type , Instantiator instantiator , Namer < ? super T > namer , final Closure factoryClosure ) { this ( type , instantiator , namer , new ClosureObjectFactory < T > ( type , factoryClosure ) ) ; } @Override protected T doCreate ( String name ) { return factory . create ( name ) ; } private static class ClosureObjectFactory < T > implements NamedDomainObjectFactory < T > { private final Class < T > type ; private final Closure factoryClosure ; public ClosureObjectFactory ( Class < T > type , Closure factoryClosure ) { this . type = type ; this . factoryClosure = factoryClosure ; } public T create ( String name ) { return type . cast ( factoryClosure . call ( name ) ) ; } } } 

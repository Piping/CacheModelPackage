package org . elasticsearch . action . admin . cluster . snapshots . status ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; public class SnapshotsStatusResponse extends ActionResponse implements ToXContent { private List < SnapshotStatus > snapshots = Collections . emptyList ( ) ; SnapshotsStatusResponse ( ) { } SnapshotsStatusResponse ( List < SnapshotStatus > snapshots ) { this . snapshots = snapshots ; } public List < SnapshotStatus > getSnapshots ( ) { return snapshots ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; int size = in . readVInt ( ) ; List < SnapshotStatus > builder = new ArrayList < > ( ) ; for ( int i = <int> ; i < size ; i + + ) { builder . add ( SnapshotStatus . readSnapshotStatus ( in ) ) ; } snapshots = Collections . unmodifiableList ( builder ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( snapshots . size ( ) ) ; for ( SnapshotStatus snapshotInfo : snapshots ) { snapshotInfo . writeTo ( out ) ; } } static final class Fields { static final XContentBuilderString SNAPSHOTS = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startArray ( Fields . SNAPSHOTS ) ; for ( SnapshotStatus snapshot : snapshots ) { snapshot . toXContent ( builder , params ) ; } builder . endArray ( ) ; return builder ; } } 

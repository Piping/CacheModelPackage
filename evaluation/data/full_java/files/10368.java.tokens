package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . ImmutableMultimap . Builder ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . SampleElements . Unhashables ; import com . google . common . collect . testing . UnhashableObject ; import com . google . common . testing . EqualsTester ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Map . Entry ; @GwtCompatible ( emulated = true ) public class ImmutableMultimapTest extends TestCase { public void testBuilder_withImmutableEntry ( ) { ImmutableMultimap < String , Integer > multimap = new Builder < String , Integer > ( ) . put ( Maps . immutableEntry ( <str> , <int> ) ) . build ( ) ; assertEquals ( Arrays . asList ( <int> ) , multimap . get ( <str> ) ) ; } public void testBuilder_withImmutableEntryAndNullContents ( ) { Builder < String , Integer > builder = new Builder < String , Integer > ( ) ; try { builder . put ( Maps . immutableEntry ( <str> , ( Integer ) null ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . put ( Maps . immutableEntry ( ( String ) null , <int> ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } private static class StringHolder { String string ; } public void testBuilder_withMutableEntry ( ) { ImmutableMultimap . Builder < String , Integer > builder = new Builder < String , Integer > ( ) ; final StringHolder holder = new StringHolder ( ) ; holder . string = <str> ; Entry < String , Integer > entry = new AbstractMapEntry < String , Integer > ( ) { @Override public String getKey ( ) { return holder . string ; } @Override public Integer getValue ( ) { return <int> ; } } ; builder . put ( entry ) ; holder . string = <str> ; assertEquals ( Arrays . asList ( <int> ) , builder . build ( ) . get ( <str> ) ) ; } public void testCopyOf ( ) { ImmutableSetMultimap < String , String > setMultimap = ImmutableSetMultimap . of ( <str> , <str> ) ; ImmutableMultimap < String , String > setMultimapCopy = ImmutableMultimap . copyOf ( setMultimap ) ; assertSame ( <str> , setMultimap , setMultimapCopy ) ; ImmutableListMultimap < String , String > listMultimap = ImmutableListMultimap . of ( <str> , <str> ) ; ImmutableMultimap < String , String > listMultimapCopy = ImmutableMultimap . copyOf ( listMultimap ) ; assertSame ( <str> , listMultimap , listMultimapCopy ) ; } public void testUnhashableSingletonValue ( ) { SampleElements < UnhashableObject > unhashables = new Unhashables ( ) ; Multimap < Integer , UnhashableObject > multimap = ImmutableMultimap . of ( <int> , unhashables . e0 ( ) ) ; assertEquals ( <int> , multimap . get ( <int> ) . size ( ) ) ; assertTrue ( multimap . get ( <int> ) . contains ( unhashables . e0 ( ) ) ) ; } public void testUnhashableMixedValues ( ) { SampleElements < UnhashableObject > unhashables = new Unhashables ( ) ; Multimap < Integer , Object > multimap = ImmutableMultimap . < Integer , Object > of ( <int> , unhashables . e0 ( ) , <int> , <str> , <int> , unhashables . e1 ( ) ) ; assertEquals ( <int> , multimap . get ( <int> ) . size ( ) ) ; assertTrue ( multimap . get ( <int> ) . contains ( unhashables . e0 ( ) ) ) ; assertTrue ( multimap . get ( <int> ) . contains ( unhashables . e1 ( ) ) ) ; assertTrue ( multimap . get ( <int> ) . contains ( <str> ) ) ; } public void testEquals ( ) { new EqualsTester ( ) . addEqualityGroup ( ImmutableMultimap . of ( ) , ImmutableMultimap . of ( ) ) . addEqualityGroup ( ImmutableMultimap . of ( <int> , <str> ) , ImmutableMultimap . of ( <int> , <str> ) ) . addEqualityGroup ( ImmutableMultimap . of ( <int> , <str> , <int> , <str> ) , ImmutableMultimap . of ( <int> , <str> , <int> , <str> ) ) . testEquals ( ) ; } } 

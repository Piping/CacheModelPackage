package org . elasticsearch . action . admin . indices . mapping . get ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; public class GetFieldMappingsRequest extends ActionRequest < GetFieldMappingsRequest > implements IndicesRequest . Replaceable { protected boolean local = false ; private String [ ] fields = Strings . EMPTY_ARRAY ; private boolean includeDefaults = false ; private String [ ] indices = Strings . EMPTY_ARRAY ; private String [ ] types = Strings . EMPTY_ARRAY ; private IndicesOptions indicesOptions = IndicesOptions . strictExpandOpen ( ) ; public GetFieldMappingsRequest ( ) { } public GetFieldMappingsRequest local ( boolean local ) { this . local = local ; return this ; } public boolean local ( ) { return local ; } @Override public GetFieldMappingsRequest indices ( String . . . indices ) { this . indices = indices ; return this ; } public GetFieldMappingsRequest types ( String . . . types ) { this . types = types ; return this ; } public GetFieldMappingsRequest indicesOptions ( IndicesOptions indicesOptions ) { this . indicesOptions = indicesOptions ; return this ; } @Override public String [ ] indices ( ) { return indices ; } public String [ ] types ( ) { return types ; } @Override public IndicesOptions indicesOptions ( ) { return indicesOptions ; } public GetFieldMappingsRequest fields ( String . . . fields ) { this . fields = fields ; return this ; } public String [ ] fields ( ) { return fields ; } public boolean includeDefaults ( ) { return includeDefaults ; } public GetFieldMappingsRequest includeDefaults ( boolean includeDefaults ) { this . includeDefaults = includeDefaults ; return this ; } @Override public ActionRequestValidationException validate ( ) { return null ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeStringArray ( indices ) ; out . writeStringArray ( types ) ; indicesOptions . writeIndicesOptions ( out ) ; out . writeBoolean ( local ) ; out . writeStringArray ( fields ) ; out . writeBoolean ( includeDefaults ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; indices = in . readStringArray ( ) ; types = in . readStringArray ( ) ; indicesOptions = IndicesOptions . readIndicesOptions ( in ) ; local = in . readBoolean ( ) ; fields = in . readStringArray ( ) ; includeDefaults = in . readBoolean ( ) ; } } 

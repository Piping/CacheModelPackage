package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUE_QUERIES ; import static com . google . common . collect . testing . features . MapFeature . SUPPORTS_PUT ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . concurrent . ConcurrentMap ; @GwtCompatible public class ConcurrentMapReplaceEntryTester < K , V > extends AbstractMapTester < K , V > { @Override protected ConcurrentMap < K , V > getMap ( ) { return ( ConcurrentMap < K , V > ) super . getMap ( ) ; } @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( absent = ZERO ) public void testReplaceEntry_supportedPresent ( ) { assertTrue ( getMap ( ) . replace ( k0 ( ) , v0 ( ) , v3 ( ) ) ) ; expectReplacement ( entry ( k0 ( ) , v3 ( ) ) ) ; } @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( absent = ZERO ) public void testReplaceEntry_supportedPresentUnchanged ( ) { assertTrue ( getMap ( ) . replace ( k0 ( ) , v0 ( ) , v0 ( ) ) ) ; expectUnchanged ( ) ; } @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( absent = ZERO ) public void testReplaceEntry_supportedWrongValue ( ) { assertFalse ( getMap ( ) . replace ( k0 ( ) , v3 ( ) , v4 ( ) ) ) ; expectUnchanged ( ) ; } @MapFeature.Require ( SUPPORTS_PUT ) public void testReplaceEntry_supportedAbsentKey ( ) { assertFalse ( getMap ( ) . replace ( k3 ( ) , v3 ( ) , v4 ( ) ) ) ; expectUnchanged ( ) ; } @MapFeature.Require ( value = SUPPORTS_PUT , absent = ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testReplaceEntry_presentNullValueUnsupported ( ) { try { getMap ( ) . replace ( k0 ( ) , v0 ( ) , null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } expectUnchanged ( ) ; } @MapFeature.Require ( value = SUPPORTS_PUT , absent = ALLOWS_NULL_VALUE_QUERIES ) @CollectionSize.Require ( absent = ZERO ) public void testReplaceEntry_wrongValueNullValueUnsupported ( ) { try { assertFalse ( getMap ( ) . replace ( k0 ( ) , v3 ( ) , null ) ) ; } catch ( NullPointerException tolerated ) { } expectUnchanged ( ) ; } @MapFeature.Require ( value = SUPPORTS_PUT , absent = ALLOWS_NULL_VALUE_QUERIES ) public void testReplaceEntry_absentKeyNullValueUnsupported ( ) { try { assertFalse ( getMap ( ) . replace ( k3 ( ) , v3 ( ) , null ) ) ; } catch ( NullPointerException tolerated ) { } expectUnchanged ( ) ; } @MapFeature.Require ( { SUPPORTS_PUT , ALLOWS_NULL_VALUE_QUERIES } ) public void testReplaceEntry_nullDifferentFromAbsent ( ) { assertFalse ( getMap ( ) . replace ( k3 ( ) , null , v3 ( ) ) ) ; expectUnchanged ( ) ; } @MapFeature.Require ( value = SUPPORTS_PUT , absent = ALLOWS_NULL_VALUE_QUERIES ) public void testReplaceEntry_expectNullUnsupported ( ) { try { assertFalse ( getMap ( ) . replace ( k3 ( ) , null , v3 ( ) ) ) ; } catch ( NullPointerException tolerated ) { } expectUnchanged ( ) ; } @MapFeature.Require ( absent = SUPPORTS_PUT ) @CollectionSize.Require ( absent = ZERO ) public void testReplaceEntry_unsupportedPresent ( ) { try { getMap ( ) . replace ( k0 ( ) , v0 ( ) , v3 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; } @MapFeature.Require ( absent = SUPPORTS_PUT ) @CollectionSize.Require ( absent = ZERO ) public void testReplaceEntry_unsupportedWrongValue ( ) { try { getMap ( ) . replace ( k0 ( ) , v3 ( ) , v4 ( ) ) ; } catch ( UnsupportedOperationException tolerated ) { } expectUnchanged ( ) ; } @MapFeature.Require ( absent = SUPPORTS_PUT ) public void testReplaceEntry_unsupportedAbsentKey ( ) { try { getMap ( ) . replace ( k3 ( ) , v3 ( ) , v4 ( ) ) ; } catch ( UnsupportedOperationException tolerated ) { } expectUnchanged ( ) ; } } 

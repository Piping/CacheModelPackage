package com . google . common . reflect ; import static com . google . common . base . Preconditions . checkArgument ; import com . google . common . annotations . Beta ; import java . lang . reflect . Type ; import java . lang . reflect . TypeVariable ; import javax . annotation . Nullable ; @Beta public abstract class TypeParameter < T > extends TypeCapture < T > { final TypeVariable < ? > typeVariable ; protected TypeParameter ( ) { Type type = capture ( ) ; checkArgument ( type instanceof TypeVariable , <str> , type ) ; this . typeVariable = ( TypeVariable < ? > ) type ; } @Override public final int hashCode ( ) { return typeVariable . hashCode ( ) ; } @Override public final boolean equals ( @Nullable Object o ) { if ( o instanceof TypeParameter ) { TypeParameter < ? > that = ( TypeParameter < ? > ) o ; return typeVariable . equals ( that . typeVariable ) ; } return false ; } @Override public String toString ( ) { return typeVariable . toString ( ) ; } } 

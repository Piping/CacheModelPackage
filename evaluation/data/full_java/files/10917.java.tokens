package org . gradle . api . specs ; import groovy . lang . Closure ; import org . gradle . api . specs . internal . ClosureSpec ; import org . gradle . internal . Cast ; import java . util . Collection ; import java . util . List ; public class Specs { public static final Spec < Object > SATISFIES_ALL = new Spec < Object > ( ) { public boolean isSatisfiedBy ( Object element ) { return true ; } } ; public static < T > Spec < T > satisfyAll ( ) { return Cast . uncheckedCast ( SATISFIES_ALL ) ; } public static final Spec < Object > SATISFIES_NONE = new Spec < Object > ( ) { public boolean isSatisfiedBy ( Object element ) { return false ; } } ; public static < T > Spec < T > satisfyNone ( ) { return Cast . uncheckedCast ( SATISFIES_NONE ) ; } public static < T > Spec < T > convertClosureToSpec ( final Closure closure ) { return new ClosureSpec < T > ( closure ) ; } public static < T > AndSpec < T > and ( Spec < ? super T > . . . specs ) { return new AndSpec < T > ( specs ) ; } public static < T > AndSpec < T > and ( Collection < ? extends Spec < ? super T > > specs ) { return new AndSpec < T > ( specs ) ; } public static < T > OrSpec < T > or ( Spec < ? super T > . . . specs ) { return new OrSpec < T > ( specs ) ; } public static < T > OrSpec < T > or ( Collection < ? extends Spec < ? super T > > specs ) { return new OrSpec < T > ( specs ) ; } public static < T > NotSpec < T > not ( Spec < ? super T > spec ) { return new NotSpec < T > ( spec ) ; } public static < T > Spec < T > or ( boolean defaultWhenNoSpecs , List < ? extends Spec < ? super T > > specs ) { if ( specs . isEmpty ( ) ) { return defaultWhenNoSpecs ? Specs . < T > satisfyAll ( ) : Specs . < T > satisfyNone ( ) ; } return new OrSpec < T > ( specs ) ; } } 

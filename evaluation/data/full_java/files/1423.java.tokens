package org . apache . cassandra . cql3 . validation . operations ; import java . util . Arrays ; import org . junit . BeforeClass ; import org . junit . Test ; import static junit . framework . Assert . assertNull ; import static org . junit . Assert . assertEquals ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . dht . ByteOrderedPartitioner ; public class SelectOrderedPartitionerTest extends CQLTester { @BeforeClass public static void setUp ( ) { DatabaseDescriptor . setPartitionerUnsafe ( ByteOrderedPartitioner . instance ) ; } @Test public void testTokenFunctionWithSingleColumnPartitionKey ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <str> ) ) ; assertInvalid ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidSyntax ( <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; } @Test public void testTokenFunctionWithPartitionKeyAndClusteringKeyArguments ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testTokenFunctionWithMultiColumnPartitionKey ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> , <int> , <str> ) , row ( <int> , <str> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> , <int> , <str> , <int> , <str> ) , row ( <int> , <str> ) , row ( <int> , <str> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> , <int> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> , <int> , <str> ) ; assertInvalidMessage ( <str> , <str> , <int> , <str> , <int> , <str> ) ; } @Test public void testSingleColumnPartitionKeyWithTokenNonTokenRestrictionsMix ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , Arrays . asList ( <int> , <int> ) ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> , <int> ) ) ; } @Test public void testMultiColumnPartitionKeyWithTokenNonTokenRestrictionsMix ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; } @Test public void testMultiColumnPartitionKeyWithIndexAndTokenNonTokenRestrictionsMix ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testTokenFunctionWithCompoundPartitionAndClusteringCols ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; } @Test public void testUndefinedColumns ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; Object [ ] [ ] rows = getRows ( execute ( <str> ) ) ; assertEquals ( <int> , rows [ <int> ] [ <int> ] ) ; assertEquals ( null , rows [ <int> ] [ <int> ] ) ; assertEquals ( <int> , rows [ <int> ] [ <int> ] ) ; rows = getRows ( execute ( <str> ) ) ; assertEquals ( <int> , rows . length ) ; assertNull ( rows [ <int> ] [ <int> ] ) ; } @Test public void testPrimaryKeyOnly ( ) throws Throwable { createTable ( <str> ) ; for ( int k = <int> ; k < <int> ; k + + ) for ( int c = <int> ; c < <int> ; c + + ) execute ( <str> , k , c ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; createTable ( <str> ) ; for ( int k = <int> ; k < <int> ; k + + ) for ( int c = <int> ; c < <int> ; c + + ) execute ( <str> , k , c ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; } @Test public void testCompositeIndexWithPK ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> ) , row ( <int> , <str> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> ) ) ; assertEmpty ( execute ( <str> ) ) ; assertEmpty ( execute ( <str> ) ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testLimitBug ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testOrderByMultikey ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <str> , <int> ) , row ( <int> , <str> , <str> , <int> ) ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testIndexOnCompositeWithCollections ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( <str> , <str> ) ) , row ( <int> , set ( <str> , <str> ) ) , row ( <int> , set ( <str> ) ) ) ; } @Test public void testTruncateWithCaching ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i , i * <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; execute ( <str> ) ; assertEmpty ( execute ( <str> ) ) ; } @Test public void testRangeKey ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( - <int> ) ) ; assertInvalid ( <str> ) ; } @Test public void testTokenFunctionWithInvalidColumnNames ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } } 

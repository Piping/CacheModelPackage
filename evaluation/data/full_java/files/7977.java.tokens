package org . elasticsearch . common . util ; import org . elasticsearch . test . ESTestCase ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . BitSet ; import static org . hamcrest . Matchers . is ; public class ArrayUtilsTests extends ESTestCase { public void testBinarySearch ( ) throws Exception { for ( int j = <int> ; j < <int> ; j + + ) { int index = Math . min ( randomInt ( <int> , <int> ) , <int> ) ; double tolerance = Math . random ( ) * <float> ; double lookForValue = randomFreq ( <float> ) ? - <int> : Double . NaN ; double [ ] array = new double [ <int> ] ; for ( int i = <int> ; i < array . length ; i + + ) { double value ; if ( randomFreq ( <float> ) ) { value = Math . random ( ) * <int> ; array [ i ] = value + ( ( randomFreq ( <float> ) ? <int> : - <int> ) * Math . random ( ) * tolerance ) ; } else { value = Double . NaN ; array [ i ] = value ; } if ( i = = index & & lookForValue < <int> ) { lookForValue = value ; } } Arrays . sort ( array ) ; BitSet bitSet = new BitSet ( <int> ) ; for ( int i = <int> ; i < array . length ; i + + ) { if ( Double . isNaN ( lookForValue ) & & Double . isNaN ( array [ i ] ) ) { bitSet . set ( i ) ; } else if ( ( array [ i ] > = lookForValue - tolerance ) & & ( array [ i ] < = lookForValue + tolerance ) ) { bitSet . set ( i ) ; } } int foundIndex = ArrayUtils . binarySearch ( array , lookForValue , tolerance ) ; if ( bitSet . cardinality ( ) = = <int> ) { assertThat ( foundIndex , is ( - <int> ) ) ; } else { assertThat ( bitSet . get ( foundIndex ) , is ( true ) ) ; } } } private boolean randomFreq ( double freq ) { return Math . random ( ) < freq ; } private int randomInt ( int min , int max ) { int delta = ( int ) ( Math . random ( ) * ( max - min ) ) ; return min + delta ; } public void testConcat ( ) { assertArrayEquals ( new String [ ] { <str> , <str> , <str> , <str> } , ArrayUtils . concat ( new String [ ] { <str> , <str> } , new String [ ] { <str> , <str> } ) ) ; int firstSize = randomIntBetween ( <int> , <int> ) ; String [ ] first = new String [ firstSize ] ; ArrayList < String > sourceOfTruth = new ArrayList < > ( ) ; for ( int i = <int> ; i < firstSize ; i + + ) { first [ i ] = randomRealisticUnicodeOfCodepointLengthBetween ( <int> , <int> ) ; sourceOfTruth . add ( first [ i ] ) ; } int secondSize = randomIntBetween ( <int> , <int> ) ; String [ ] second = new String [ secondSize ] ; for ( int i = <int> ; i < secondSize ; i + + ) { second [ i ] = randomRealisticUnicodeOfCodepointLengthBetween ( <int> , <int> ) ; sourceOfTruth . add ( second [ i ] ) ; } assertArrayEquals ( sourceOfTruth . toArray ( new String [ <int> ] ) , ArrayUtils . concat ( first , second ) ) ; } } 

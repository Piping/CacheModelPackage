package org . eclipse . debug . internal . ui . views . launch ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . debug . internal . ui . DelegatingModelPresentation ; import org . eclipse . debug . ui . IDebugModelPresentation ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . IColorProvider ; import org . eclipse . jface . viewers . IFontProvider ; import org . eclipse . swt . graphics . Color ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . FontData ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . graphics . RGB ; public class DebugElementHelper { private static DelegatingModelPresentation fgPresenetation ; private static Map < Image , ImageDescriptor > fgImages = new HashMap < Image , ImageDescriptor > ( ) ; public static void dispose ( ) { fgImages . clear ( ) ; if ( fgPresenetation ! = null ) { fgPresenetation . dispose ( ) ; fgPresenetation = null ; } } public static ImageDescriptor getImageDescriptor ( Object object ) { Image image = getPresentation ( ) . getImage ( object ) ; return getImageDescriptor ( image ) ; } public static ImageDescriptor getImageDescriptor ( Object object , IDebugModelPresentation presentation ) { Image image = presentation . getImage ( object ) ; return getImageDescriptor ( image ) ; } public static ImageDescriptor getImageDescriptor ( Image image ) { if ( image ! = null ) { ImageDescriptor descriptor = fgImages . get ( image ) ; if ( descriptor = = null ) { descriptor = new ImageImageDescriptor ( image ) ; fgImages . put ( image , descriptor ) ; } return descriptor ; } return null ; } public static String getLabel ( Object o ) { return getPresentation ( ) . getText ( o ) ; } public static DelegatingModelPresentation getPresentation ( ) { if ( fgPresenetation = = null ) { fgPresenetation = new DelegatingModelPresentation ( ) ; } return fgPresenetation ; } public static RGB getForeground ( Object element ) { Color color = getPresentation ( ) . getForeground ( element ) ; if ( color ! = null ) { return color . getRGB ( ) ; } return null ; } public static RGB getForeground ( Object element , IDebugModelPresentation presentation ) { Color color = null ; if ( presentation instanceof IColorProvider ) { IColorProvider colorProvider = ( IColorProvider ) presentation ; color = colorProvider . getForeground ( element ) ; } else { color = getPresentation ( ) . getForeground ( element ) ; } if ( color ! = null ) { return color . getRGB ( ) ; } return null ; } public static RGB getBackground ( Object element ) { Color color = getPresentation ( ) . getBackground ( element ) ; if ( color ! = null ) { return color . getRGB ( ) ; } return null ; } public static RGB getBackground ( Object element , IDebugModelPresentation presentation ) { Color color = null ; if ( presentation instanceof IColorProvider ) { IColorProvider colorProvider = ( IColorProvider ) presentation ; color = colorProvider . getBackground ( element ) ; } else { color = getPresentation ( ) . getBackground ( element ) ; } if ( color ! = null ) { return color . getRGB ( ) ; } return null ; } public static FontData getFont ( Object element ) { Font font = getPresentation ( ) . getFont ( element ) ; if ( font ! = null ) { return font . getFontData ( ) [ <int> ] ; } return null ; } public static FontData getFont ( Object element , IDebugModelPresentation presentation ) { Font font = null ; if ( presentation instanceof IFontProvider ) { IFontProvider provider = ( IFontProvider ) presentation ; font = provider . getFont ( element ) ; } else { font = getPresentation ( ) . getFont ( element ) ; } if ( font ! = null ) { return font . getFontData ( ) [ <int> ] ; } return null ; } public static boolean requiresUIThread ( Object object ) { DelegatingModelPresentation presentation = getPresentation ( ) ; return presentation . requiresUIThread ( object ) ; } } 

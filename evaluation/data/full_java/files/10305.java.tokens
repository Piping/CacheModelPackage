package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Objects ; import com . google . common . collect . Table . Cell ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import java . util . Arrays ; import java . util . Map ; @GwtCompatible ( emulated = true ) public class ArrayTableTest extends AbstractTableTest { @Override protected ArrayTable < String , Integer , Character > create ( Object . . . data ) { ArrayTable < String , Integer , Character > table = ArrayTable . create ( asList ( <str> , <str> , <str> ) , asList ( <int> , <int> , <int> ) ) ; populate ( table , data ) ; return table ; } @Override protected void assertSize ( int expectedSize ) { assertEquals ( <int> , table . size ( ) ) ; } @Override protected boolean supportsRemove ( ) { return false ; } @Override protected boolean supportsNullValues ( ) { return true ; } @Override public void testContains ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; assertFalse ( table . contains ( <str> , - <int> ) ) ; assertFalse ( table . contains ( <str> , <int> ) ) ; assertFalse ( table . contains ( <str> , - <int> ) ) ; assertFalse ( table . contains ( <str> , null ) ) ; assertFalse ( table . contains ( null , <int> ) ) ; assertFalse ( table . contains ( null , null ) ) ; } @Override public void testContainsRow ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertTrue ( table . containsRow ( <str> ) ) ; assertTrue ( table . containsRow ( <str> ) ) ; assertTrue ( table . containsRow ( <str> ) ) ; assertFalse ( table . containsRow ( <str> ) ) ; assertFalse ( table . containsRow ( null ) ) ; } @Override public void testContainsColumn ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertTrue ( table . containsColumn ( <int> ) ) ; assertTrue ( table . containsColumn ( <int> ) ) ; assertTrue ( table . containsColumn ( <int> ) ) ; assertFalse ( table . containsColumn ( - <int> ) ) ; assertFalse ( table . containsColumn ( null ) ) ; } @Override public void testContainsValue ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertTrue ( table . containsValue ( <str> ) ) ; assertTrue ( table . containsValue ( <str> ) ) ; assertTrue ( table . containsValue ( <str> ) ) ; assertFalse ( table . containsValue ( <str> ) ) ; assertTrue ( table . containsValue ( null ) ) ; } @Override public void testIsEmpty ( ) { assertFalse ( table . isEmpty ( ) ) ; table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertFalse ( table . isEmpty ( ) ) ; } @Override public void testEquals ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > hashCopy = HashBasedTable . create ( ) ; hashCopy . put ( <str> , <int> , <str> ) ; hashCopy . put ( <str> , <int> , <str> ) ; hashCopy . put ( <str> , <int> , <str> ) ; Table < String , Integer , Character > reordered = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > smaller = create ( <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > swapOuter = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > swapValues = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; new EqualsTester ( ) . addEqualityGroup ( table , reordered ) . addEqualityGroup ( hashCopy ) . addEqualityGroup ( smaller ) . addEqualityGroup ( swapOuter ) . addEqualityGroup ( swapValues ) . testEquals ( ) ; } @Override public void testHashCode ( ) { table = ArrayTable . create ( asList ( <str> , <str> ) , asList ( <int> , <int> ) ) ; table . put ( <str> , <int> , <str> ) ; table . put ( <str> , <int> , <str> ) ; table . put ( <str> , <int> , <str> ) ; int expected = Objects . hashCode ( <str> , <int> , <str> ) + Objects . hashCode ( <str> , <int> , <str> ) + Objects . hashCode ( <str> , <int> , <str> ) + Objects . hashCode ( <str> , <int> , <int> ) ; assertEquals ( expected , table . hashCode ( ) ) ; } @Override public void testRow ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Map < Integer , Character > expected = Maps . newHashMap ( ) ; expected . put ( <int> , <str> ) ; expected . put ( <int> , <str> ) ; expected . put ( <int> , null ) ; assertEquals ( expected , table . row ( <str> ) ) ; } @Override public void testColumn ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Map < String , Character > expected = Maps . newHashMap ( ) ; expected . put ( <str> , <str> ) ; expected . put ( <str> , <str> ) ; expected . put ( <str> , null ) ; assertEquals ( expected , table . column ( <int> ) ) ; } @Override public void testToStringSize1 ( ) { table = ArrayTable . create ( ImmutableList . of ( <str> ) , ImmutableList . of ( <int> ) ) ; table . put ( <str> , <int> , <str> ) ; assertEquals ( <str> , table . toString ( ) ) ; } public void testCreateDuplicateRows ( ) { try { ArrayTable . create ( asList ( <str> , <str> , <str> ) , asList ( <int> , <int> , <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreateDuplicateColumns ( ) { try { ArrayTable . create ( asList ( <str> , <str> ) , asList ( <int> , <int> , <int> , <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreateEmptyRows ( ) { try { ArrayTable . create ( Arrays . < String > asList ( ) , asList ( <int> , <int> , <int> ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreateEmptyColumns ( ) { try { ArrayTable . create ( asList ( <str> , <str> ) , Arrays . < Integer > asList ( ) ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreateCopyArrayTable ( ) { Table < String , Integer , Character > original = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > copy = ArrayTable . create ( original ) ; assertEquals ( original , copy ) ; original . put ( <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , original . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , copy . get ( <str> , <int> ) ) ; assertEquals ( copy . rowKeySet ( ) , original . rowKeySet ( ) ) ; assertEquals ( copy . columnKeySet ( ) , original . columnKeySet ( ) ) ; } public void testCreateCopyHashBasedTable ( ) { Table < String , Integer , Character > original = HashBasedTable . create ( ) ; original . put ( <str> , <int> , <str> ) ; original . put ( <str> , <int> , <str> ) ; original . put ( <str> , <int> , <str> ) ; Table < String , Integer , Character > copy = ArrayTable . create ( original ) ; assertEquals ( <int> , copy . size ( ) ) ; assertEquals ( ( Character ) <str> , copy . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , copy . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , copy . get ( <str> , <int> ) ) ; assertNull ( copy . get ( <str> , <int> ) ) ; original . put ( <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , original . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , copy . get ( <str> , <int> ) ) ; assertEquals ( copy . rowKeySet ( ) , ImmutableSet . of ( <str> , <str> ) ) ; assertEquals ( copy . columnKeySet ( ) , ImmutableSet . of ( <int> , <int> ) ) ; } public void testCreateCopyEmptyTable ( ) { Table < String , Integer , Character > original = HashBasedTable . create ( ) ; try { ArrayTable . create ( original ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testSerialization ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; SerializableTester . reserializeAndAssert ( table ) ; } @GwtIncompatible ( <str> ) public void testNullPointerStatic ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( ArrayTable . class ) ; } public void testToString_ordered ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( <str> + <str> + <str> , table . toString ( ) ) ; assertEquals ( <str> + <str> + <str> , table . rowMap ( ) . toString ( ) ) ; } public void testCellSetToString_ordered ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( <str> + <str> + <str> , table . cellSet ( ) . toString ( ) ) ; } public void testRowKeySetToString_ordered ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( <str> , table . rowKeySet ( ) . toString ( ) ) ; } public void testColumnKeySetToString_ordered ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( <str> , table . columnKeySet ( ) . toString ( ) ) ; } public void testValuesToString_ordered ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( <str> , table . values ( ) . toString ( ) ) ; } public void testRowKeyList ( ) { ArrayTable < String , Integer , Character > table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertThat ( table . rowKeyList ( ) ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } public void testColumnKeyList ( ) { ArrayTable < String , Integer , Character > table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertThat ( table . columnKeyList ( ) ) . containsExactly ( <int> , <int> , <int> ) . inOrder ( ) ; } public void testGetMissingKeys ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertNull ( table . get ( <str> , <int> ) ) ; assertNull ( table . get ( <str> , <int> ) ) ; } public void testAt ( ) { ArrayTable < String , Integer , Character > table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , table . at ( <int> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . at ( <int> , <int> ) ) ; assertNull ( table . at ( <int> , <int> ) ) ; try { table . at ( <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { table . at ( <int> , - <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { table . at ( <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { table . at ( - <int> , <int> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } } public void testSet ( ) { ArrayTable < String , Integer , Character > table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , table . set ( <int> , <int> , <str> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertNull ( table . set ( <int> , <int> , <str> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . set ( <int> , <int> , null ) ) ; assertNull ( table . get ( <str> , <int> ) ) ; try { table . set ( <int> , <int> , <str> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { table . set ( <int> , - <int> , <str> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { table . set ( <int> , <int> , <str> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } try { table . set ( - <int> , <int> , <str> ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } assertFalse ( table . containsValue ( <str> ) ) ; } public void testEraseAll ( ) { ArrayTable < String , Integer , Character > table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; table . eraseAll ( ) ; assertEquals ( <int> , table . size ( ) ) ; assertNull ( table . get ( <str> , <int> ) ) ; assertTrue ( table . containsRow ( <str> ) ) ; assertFalse ( table . containsValue ( <str> ) ) ; } public void testPutIllegal ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; try { table . put ( <str> , <int> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } try { table . put ( <str> , <int> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } assertFalse ( table . containsValue ( <str> ) ) ; } public void testErase ( ) { ArrayTable < String , Integer , Character > table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , table . erase ( <str> , <int> ) ) ; assertNull ( table . get ( <str> , <int> ) ) ; assertEquals ( <int> , table . size ( ) ) ; assertNull ( table . erase ( <str> , <int> ) ) ; assertNull ( table . erase ( <str> , <int> ) ) ; assertNull ( table . erase ( <str> , <int> ) ) ; assertNull ( table . erase ( <str> , <int> ) ) ; assertNull ( table . erase ( null , <int> ) ) ; assertNull ( table . erase ( <str> , null ) ) ; } @GwtIncompatible ( <str> ) public void testToArray ( ) { ArrayTable < String , Integer , Character > table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Character [ ] [ ] array = table . toArray ( Character . class ) ; assertThat ( array ) . hasLength ( <int> ) ; assertThat ( array [ <int> ] ) . asList ( ) . containsExactly ( <str> , null , <str> ) . inOrder ( ) ; assertThat ( array [ <int> ] ) . asList ( ) . containsExactly ( <str> , null , null ) . inOrder ( ) ; assertThat ( array [ <int> ] ) . asList ( ) . containsExactly ( null , null , null ) . inOrder ( ) ; table . set ( <int> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , array [ <int> ] [ <int> ] ) ; array [ <int> ] [ <int> ] = <str> ; assertEquals ( ( Character ) <str> , table . at ( <int> , <int> ) ) ; } public void testCellReflectsChanges ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Cell < String , Integer , Character > cell = table . cellSet ( ) . iterator ( ) . next ( ) ; assertEquals ( Tables . immutableCell ( <str> , <int> , <str> ) , cell ) ; assertEquals ( ( Character ) <str> , table . put ( <str> , <int> , <str> ) ) ; assertEquals ( Tables . immutableCell ( <str> , <int> , <str> ) , cell ) ; } public void testRowMissing ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Map < Integer , Character > row = table . row ( <str> ) ; assertTrue ( row . isEmpty ( ) ) ; try { row . put ( <int> , <str> ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } } public void testColumnMissing ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Map < String , Character > column = table . column ( <int> ) ; assertTrue ( column . isEmpty ( ) ) ; try { column . put ( <str> , <str> ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } } public void testRowPutIllegal ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Map < Integer , Character > map = table . row ( <str> ) ; try { map . put ( <int> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } public void testColumnPutIllegal ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Map < String , Character > map = table . column ( <int> ) ; try { map . put ( <str> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { assertThat ( expected ) . hasMessage ( <str> ) ; } } @GwtIncompatible ( <str> ) public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicInstanceMethods ( create ( ) ) ; } @GwtIncompatible ( <str> ) public void testSerializable ( ) { SerializableTester . reserializeAndAssert ( create ( ) ) ; } } 

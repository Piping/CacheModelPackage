package org . gradle . api . internal . artifacts . dsl ; import org . gradle . api . IllegalDependencyNotation ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . Project ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . component . ModuleComponentSelector ; import org . gradle . internal . component . local . model . DefaultProjectComponentSelector ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . typeconversion . * ; import java . util . Set ; import static org . gradle . internal . component . external . model . DefaultModuleComponentSelector . newSelector ; public class ComponentSelectorParsers { private static final NotationParserBuilder < ComponentSelector > BUILDER = NotationParserBuilder . toType ( ComponentSelector . class ) . fromCharSequence ( new StringConverter ( ) ) . converter ( new MapConverter ( ) ) . fromType ( Project . class , new ProjectConverter ( ) ) ; public static NotationParser < Object , Set < ComponentSelector > > multiParser ( ) { return builder ( ) . toFlatteningComposite ( ) ; } public static NotationParser < Object , ComponentSelector > parser ( ) { return builder ( ) . toComposite ( ) ; } private static NotationParserBuilder < ComponentSelector > builder ( ) { return BUILDER ; } static class MapConverter extends MapNotationConverter < ComponentSelector > { @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . example ( <str> ) ; } protected ModuleComponentSelector parseMap ( @MapKey ( <str> ) String group , @MapKey ( <str> ) String name , @MapKey ( <str> ) String version ) { return newSelector ( group , name , version ) ; } } static class StringConverter implements NotationConverter < String , ComponentSelector > { public void describe ( DiagnosticsVisitor visitor ) { visitor . example ( <str> ) ; } public void convert ( String notation , NotationConvertResult < ? super ComponentSelector > result ) throws TypeConversionException { ParsedModuleStringNotation parsed ; try { parsed = new ParsedModuleStringNotation ( notation , null ) ; } catch ( IllegalDependencyNotation e ) { throw new InvalidUserDataException ( <str> + notation + <str> + <str> ) ; } if ( parsed . getGroup ( ) = = null | | parsed . getName ( ) = = null | | parsed . getVersion ( ) = = null ) { throw new InvalidUserDataException ( <str> + notation + <str> + <str> ) ; } result . converted ( newSelector ( parsed . getGroup ( ) , parsed . getName ( ) , parsed . getVersion ( ) ) ) ; } } static class ProjectConverter implements NotationConverter < Project , ComponentSelector > { @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . example ( <str> ) ; } @Override public void convert ( Project notation , NotationConvertResult < ? super ComponentSelector > result ) throws TypeConversionException { result . converted ( DefaultProjectComponentSelector . newSelector ( notation . getPath ( ) ) ) ; } } } 

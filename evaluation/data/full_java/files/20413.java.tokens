package io . netty . channel . epoll ; import static org . junit . Assert . * ; import static org . junit . Assume . * ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . ChannelInboundHandlerAdapter ; import io . netty . channel . EventLoopGroup ; import java . net . InetSocketAddress ; import java . util . Random ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import org . junit . Test ; public class EpollSocketChannelConfigTest { private static EventLoopGroup group ; private static EpollSocketChannel ch ; private static Random rand ; @BeforeClass public static void before ( ) { rand = new Random ( ) ; group = new EpollEventLoopGroup ( <int> ) ; Bootstrap bootstrap = new Bootstrap ( ) ; ch = ( EpollSocketChannel ) bootstrap . group ( group ) . channel ( EpollSocketChannel . class ) . handler ( new ChannelInboundHandlerAdapter ( ) ) . bind ( new InetSocketAddress ( <int> ) ) . syncUninterruptibly ( ) . channel ( ) ; } @AfterClass public static void after ( ) { group . shutdownGracefully ( ) ; } private long randLong ( long min , long max ) { return min + nextLong ( max - min + <int> ) ; } private long nextLong ( long n ) { long bits , val ; do { bits = ( rand . nextLong ( ) < < <int> ) > > > <int> ; val = bits % n ; } while ( bits - val + ( n - <int> ) < <int> L ) ; return val ; } @Test public void testRandomTcpNotSentLowAt ( ) { final long expected = randLong ( <int> , <hex> ) ; final long actual ; try { ch . config ( ) . setTcpNotSentLowAt ( expected ) ; actual = ch . config ( ) . getTcpNotSentLowAt ( ) ; } catch ( RuntimeException e ) { assumeNoException ( e ) ; return ; } assertEquals ( expected , actual ) ; } @Test public void testInvalidHighTcpNotSentLowAt ( ) { try { final long value = <hex> + <int> ; ch . config ( ) . setTcpNotSentLowAt ( value ) ; } catch ( IllegalArgumentException e ) { return ; } catch ( RuntimeException e ) { assumeNoException ( e ) ; } fail ( ) ; } @Test public void testInvalidLowTcpNotSentLowAt ( ) { try { final long value = - <int> ; ch . config ( ) . setTcpNotSentLowAt ( value ) ; } catch ( IllegalArgumentException e ) { return ; } catch ( RuntimeException e ) { assumeNoException ( e ) ; } fail ( ) ; } @Test public void testTcpCork ( ) { ch . config ( ) . setTcpCork ( false ) ; assertFalse ( ch . config ( ) . isTcpCork ( ) ) ; ch . config ( ) . setTcpCork ( true ) ; assertTrue ( ch . config ( ) . isTcpCork ( ) ) ; } } 

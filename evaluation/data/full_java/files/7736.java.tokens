package org . elasticsearch . action . admin . indices . segments ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . engine . Segment ; import org . elasticsearch . index . shard . MergePolicyConfig ; import org . elasticsearch . indices . IndexClosedException ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . junit . Before ; import java . util . List ; import static org . hamcrest . Matchers . is ; public class IndicesSegmentsRequestTests extends ESSingleNodeTestCase { @Before public void setupIndex ( ) { Settings settings = Settings . builder ( ) . put ( MergePolicyConfig . INDEX_MERGE_ENABLED , false ) . build ( ) ; createIndex ( <str> , settings ) ; int numDocs = scaledRandomIntBetween ( <int> , <int> ) ; for ( int j = <int> ; j < numDocs ; + + j ) { String id = Integer . toString ( j ) ; client ( ) . prepareIndex ( <str> , <str> , id ) . setSource ( <str> , <str> ) . get ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareFlush ( <str> ) . setWaitIfOngoing ( true ) . get ( ) ; } public void testBasic ( ) { IndicesSegmentResponse rsp = client ( ) . admin ( ) . indices ( ) . prepareSegments ( <str> ) . get ( ) ; List < Segment > segments = rsp . getIndices ( ) . get ( <str> ) . iterator ( ) . next ( ) . getShards ( ) [ <int> ] . getSegments ( ) ; assertNull ( segments . get ( <int> ) . toString ( ) , segments . get ( <int> ) . ramTree ) ; } public void testVerbose ( ) { IndicesSegmentResponse rsp = client ( ) . admin ( ) . indices ( ) . prepareSegments ( <str> ) . setVerbose ( true ) . get ( ) ; List < Segment > segments = rsp . getIndices ( ) . get ( <str> ) . iterator ( ) . next ( ) . getShards ( ) [ <int> ] . getSegments ( ) ; assertNotNull ( segments . get ( <int> ) . toString ( ) , segments . get ( <int> ) . ramTree ) ; } public void testRequestOnClosedIndex ( ) { client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . get ( ) ; try { client ( ) . admin ( ) . indices ( ) . prepareSegments ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( IndexClosedException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testRequestOnClosedIndexIgnoreUnavailable ( ) { client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . get ( ) ; IndicesOptions defaultOptions = new IndicesSegmentsRequest ( ) . indicesOptions ( ) ; IndicesOptions testOptions = IndicesOptions . fromOptions ( true , true , true , false , defaultOptions ) ; IndicesSegmentResponse rsp = client ( ) . admin ( ) . indices ( ) . prepareSegments ( <str> ) . setIndicesOptions ( testOptions ) . get ( ) ; assertEquals ( <int> , rsp . getIndices ( ) . size ( ) ) ; } public void testAllowNoIndex ( ) { client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ; IndicesSegmentResponse rsp = client ( ) . admin ( ) . indices ( ) . prepareSegments ( ) . get ( ) ; assertEquals ( <int> , rsp . getIndices ( ) . size ( ) ) ; } } 

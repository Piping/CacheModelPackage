package org . gradle . internal . serialize ; import java . util . LinkedHashMap ; import java . util . Map ; import static java . lang . String . format ; public class MapSerializer < U , V > implements Serializer < Map < U , V > > { private final Serializer < U > keySerializer ; private final Serializer < V > valueSerializer ; public MapSerializer ( Serializer < U > keySerializer , Serializer < V > valueSerializer ) { this . keySerializer = keySerializer ; this . valueSerializer = valueSerializer ; } public Map < U , V > read ( Decoder decoder ) throws Exception { int size = decoder . readInt ( ) ; Map < U , V > valueMap = new LinkedHashMap < U , V > ( size ) ; for ( int i = <int> ; i < size ; i + + ) { U key = keySerializer . read ( decoder ) ; V value = valueSerializer . read ( decoder ) ; valueMap . put ( key , value ) ; } return valueMap ; } public void write ( Encoder encoder , Map < U , V > value ) throws Exception { encoder . writeInt ( value . size ( ) ) ; for ( Map . Entry < U , V > entry : value . entrySet ( ) ) { try { keySerializer . write ( encoder , entry . getKey ( ) ) ; valueSerializer . write ( encoder , entry . getValue ( ) ) ; } catch ( Exception e ) { throw new EntrySerializationException ( entry . getKey ( ) , entry . getValue ( ) , e ) ; } } } public static class EntrySerializationException extends RuntimeException { private final Object key ; private final Object value ; EntrySerializationException ( Object key , Object value , Exception cause ) { super ( format ( <str> , key , value ) , cause ) ; this . key = key ; this . value = value ; } public Object getKey ( ) { return key ; } public Object getValue ( ) { return value ; } } } 

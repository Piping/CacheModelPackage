package org . eclipse . debug . internal . core ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchListener ; import org . eclipse . debug . core . commands . IStepFiltersHandler ; import org . eclipse . debug . core . model . IStepFilter ; import org . eclipse . debug . internal . core . commands . DebugCommandRequest ; public class StepFilterManager implements ILaunchListener { public static final String PREF_USE_STEP_FILTERS = DebugPlugin . getUniqueIdentifier ( ) + <str> ; protected StepFilterManager ( ) { DebugPlugin . getDefault ( ) . getLaunchManager ( ) . addLaunchListener ( this ) ; } public void shutdown ( ) { DebugPlugin . getDefault ( ) . getLaunchManager ( ) . removeLaunchListener ( this ) ; } @Override public void launchAdded ( ILaunch launch ) { launchChanged ( launch ) ; } @Override public void launchChanged ( ILaunch launch ) { IStepFiltersHandler command = launch . getAdapter ( IStepFiltersHandler . class ) ; if ( command ! = null ) { command . execute ( new DebugCommandRequest ( new Object [ ] { launch } ) ) ; } } public boolean isUseStepFilters ( ) { return Platform . getPreferencesService ( ) . getBoolean ( DebugPlugin . getUniqueIdentifier ( ) , PREF_USE_STEP_FILTERS , false , null ) ; } public void setUseStepFilters ( boolean useFilters ) { Preferences . setBoolean ( DebugPlugin . getUniqueIdentifier ( ) , PREF_USE_STEP_FILTERS , useFilters , null ) ; ILaunch [ ] launchs = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunches ( ) ; for ( int i = <int> ; i < launchs . length ; i + + ) { ILaunch launch = launchs [ i ] ; launchChanged ( launch ) ; } } @Override public void launchRemoved ( ILaunch launch ) { } public IStepFilter [ ] getStepFilters ( String modelIdentifier ) { initialize ( ) ; List < IStepFilter > select = new ArrayList < IStepFilter > ( ) ; for ( StepFilter extension : stepFilters ) { for ( IStepFilter stepFilter : extension . getStepFilters ( modelIdentifier ) ) { select . add ( stepFilter ) ; } } return select . toArray ( new IStepFilter [ select . size ( ) ] ) ; } private List < StepFilter > stepFilters = null ; private synchronized void initialize ( ) { if ( stepFilters = = null ) { IExtensionPoint point = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . EXTENSION_POINT_STEP_FILTERS ) ; IConfigurationElement [ ] extensions = point . getConfigurationElements ( ) ; stepFilters = new ArrayList < StepFilter > ( ) ; for ( IConfigurationElement extension : extensions ) { try { stepFilters . add ( new StepFilter ( extension ) ) ; } catch ( CoreException e ) { DebugPlugin . log ( e ) ; } } } } } 

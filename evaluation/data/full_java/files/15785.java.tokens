package org . gradle . api . internal . tasks . testing . testng ; import org . gradle . api . GradleException ; import org . gradle . api . internal . tasks . testing . TestClassProcessor ; import org . gradle . api . internal . tasks . testing . TestClassRunInfo ; import org . gradle . api . internal . tasks . testing . TestResultProcessor ; import org . gradle . api . internal . tasks . testing . filter . TestSelectionMatcher ; import org . gradle . api . tasks . testing . testng . TestNGOptions ; import org . gradle . internal . TimeProvider ; import org . gradle . internal . id . IdGenerator ; import org . gradle . internal . reflect . JavaReflectionUtil ; import org . gradle . internal . reflect . NoSuchMethodException ; import org . gradle . messaging . actor . Actor ; import org . gradle . messaging . actor . ActorFactory ; import org . gradle . util . CollectionUtils ; import org . gradle . util . GFileUtils ; import org . testng . * ; import java . io . File ; import java . util . ArrayList ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; public class TestNGTestClassProcessor implements TestClassProcessor { private final List < Class < ? > > testClasses = new ArrayList < Class < ? > > ( ) ; private final File testReportDir ; private final TestNGSpec options ; private final List < File > suiteFiles ; private final IdGenerator < ? > idGenerator ; private final TimeProvider timeProvider ; private final ActorFactory actorFactory ; private ClassLoader applicationClassLoader ; private Actor resultProcessorActor ; private TestResultProcessor resultProcessor ; public TestNGTestClassProcessor ( File testReportDir , TestNGSpec options , List < File > suiteFiles , IdGenerator < ? > idGenerator , TimeProvider timeProvider , ActorFactory actorFactory ) { this . testReportDir = testReportDir ; this . options = options ; this . suiteFiles = suiteFiles ; this . idGenerator = idGenerator ; this . timeProvider = timeProvider ; this . actorFactory = actorFactory ; } public void startProcessing ( TestResultProcessor resultProcessor ) { resultProcessorActor = actorFactory . createBlockingActor ( resultProcessor ) ; this . resultProcessor = resultProcessorActor . getProxy ( TestResultProcessor . class ) ; applicationClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; } public void processTestClass ( TestClassRunInfo testClass ) { try { testClasses . add ( applicationClassLoader . loadClass ( testClass . getTestClassName ( ) ) ) ; } catch ( Throwable e ) { throw new GradleException ( String . format ( <str> , testClass . getTestClassName ( ) ) , e ) ; } } public void stop ( ) { try { runTests ( ) ; } finally { resultProcessorActor . stop ( ) ; } } private void runTests ( ) { TestNG testNg = new TestNG ( ) ; testNg . setOutputDirectory ( testReportDir . getAbsolutePath ( ) ) ; testNg . setDefaultSuiteName ( options . getDefaultSuiteName ( ) ) ; testNg . setDefaultTestName ( options . getDefaultTestName ( ) ) ; testNg . setParallel ( options . getParallel ( ) ) ; testNg . setThreadCount ( options . getThreadCount ( ) ) ; String configFailurePolicy = options . getConfigFailurePolicy ( ) ; try { JavaReflectionUtil . method ( TestNG . class , Object . class , <str> , String . class ) . invoke ( testNg , configFailurePolicy ) ; } catch ( NoSuchMethodException e ) { if ( ! configFailurePolicy . equals ( TestNGOptions . DEFAULT_CONFIG_FAILURE_POLICY ) ) { throw e ; } } try { JavaReflectionUtil . method ( TestNG . class , Object . class , <str> ) . invoke ( testNg , options . getAnnotations ( ) ) ; } catch ( NoSuchMethodException e ) { } if ( options . getJavadocAnnotations ( ) ) { testNg . setSourcePath ( CollectionUtils . join ( File . pathSeparator , options . getTestResources ( ) ) ) ; } testNg . setUseDefaultListeners ( options . getUseDefaultListeners ( ) ) ; testNg . setVerbose ( <int> ) ; testNg . setGroups ( CollectionUtils . join ( <str> , options . getIncludeGroups ( ) ) ) ; testNg . setExcludedGroups ( CollectionUtils . join ( <str> , options . getExcludeGroups ( ) ) ) ; for ( String listenerClass : options . getListeners ( ) ) { try { testNg . addListener ( applicationClassLoader . loadClass ( listenerClass ) . newInstance ( ) ) ; } catch ( Throwable e ) { throw new GradleException ( String . format ( <str> , listenerClass ) , e ) ; } } if ( ! options . getIncludedTests ( ) . isEmpty ( ) ) { testNg . addListener ( new SelectedTestsFilter ( options . getIncludedTests ( ) ) ) ; } if ( ! suiteFiles . isEmpty ( ) ) { testNg . setTestSuites ( GFileUtils . toPaths ( suiteFiles ) ) ; } else { testNg . setTestClasses ( testClasses . toArray ( new Class [ testClasses . size ( ) ] ) ) ; } testNg . addListener ( ( Object ) adaptListener ( new TestNGTestResultProcessorAdapter ( resultProcessor , idGenerator , timeProvider ) ) ) ; try { JavaReflectionUtil . method ( TestNG . class , void . class , <str> , boolean . class ) . invoke ( testNg , options . getPreserveOrder ( ) ) ; } catch ( NoSuchMethodException e ) { if ( options . getPreserveOrder ( ) ) { throw new GradleException ( <str> , e ) ; } } try { JavaReflectionUtil . method ( TestNG . class , void . class , <str> , boolean . class ) . invoke ( testNg , options . getGroupByInstances ( ) ) ; } catch ( NoSuchMethodException e ) { if ( options . getGroupByInstances ( ) ) { throw new GradleException ( <str> , e ) ; } } testNg . run ( ) ; } private ITestListener adaptListener ( ITestListener listener ) { TestNGListenerAdapterFactory factory = new TestNGListenerAdapterFactory ( applicationClassLoader ) ; return factory . createAdapter ( listener ) ; } private static class SelectedTestsFilter implements IMethodInterceptor { private final TestSelectionMatcher matcher ; public SelectedTestsFilter ( Set < String > includedTests ) { matcher = new TestSelectionMatcher ( includedTests ) ; } public List < IMethodInstance > intercept ( List < IMethodInstance > methods , ITestContext context ) { List < IMethodInstance > filtered = new LinkedList < IMethodInstance > ( ) ; for ( IMethodInstance candidate : methods ) { if ( matcher . matchesTest ( candidate . getMethod ( ) . getTestClass ( ) . getName ( ) , candidate . getMethod ( ) . getMethodName ( ) ) ) { filtered . add ( candidate ) ; } } return filtered ; } } } 

package io . netty . handler . codec . http . multipart ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelException ; import io . netty . handler . codec . http . HttpHeaderNames ; import io . netty . handler . codec . http . HttpHeaderValues ; import java . io . File ; import java . io . IOException ; import java . nio . charset . Charset ; public class DiskFileUpload extends AbstractDiskHttpData implements FileUpload { public static String baseDirectory ; public static boolean deleteOnExitTemporaryFile = true ; public static final String prefix = <str> ; public static final String postfix = <str> ; private String filename ; private String contentType ; private String contentTransferEncoding ; public DiskFileUpload ( String name , String filename , String contentType , String contentTransferEncoding , Charset charset , long size ) { super ( name , charset , size ) ; setFilename ( filename ) ; setContentType ( contentType ) ; setContentTransferEncoding ( contentTransferEncoding ) ; } @Override public HttpDataType getHttpDataType ( ) { return HttpDataType . FileUpload ; } @Override public String getFilename ( ) { return filename ; } @Override public void setFilename ( String filename ) { if ( filename = = null ) { throw new NullPointerException ( <str> ) ; } this . filename = filename ; } @Override public int hashCode ( ) { return getName ( ) . hashCode ( ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof Attribute ) ) { return false ; } Attribute attribute = ( Attribute ) o ; return getName ( ) . equalsIgnoreCase ( attribute . getName ( ) ) ; } @Override public int compareTo ( InterfaceHttpData o ) { if ( ! ( o instanceof FileUpload ) ) { throw new ClassCastException ( <str> + getHttpDataType ( ) + <str> + o . getHttpDataType ( ) ) ; } return compareTo ( ( FileUpload ) o ) ; } public int compareTo ( FileUpload o ) { int v ; v = getName ( ) . compareToIgnoreCase ( o . getName ( ) ) ; if ( v ! = <int> ) { return v ; } return v ; } @Override public void setContentType ( String contentType ) { if ( contentType = = null ) { throw new NullPointerException ( <str> ) ; } this . contentType = contentType ; } @Override public String getContentType ( ) { return contentType ; } @Override public String getContentTransferEncoding ( ) { return contentTransferEncoding ; } @Override public void setContentTransferEncoding ( String contentTransferEncoding ) { this . contentTransferEncoding = contentTransferEncoding ; } @Override public String toString ( ) { File file = null ; try { file = getFile ( ) ; } catch ( IOException e ) { } return HttpHeaderNames . CONTENT_DISPOSITION + <str> + HttpHeaderValues . FORM_DATA + <str> + HttpHeaderValues . NAME + <str> + getName ( ) + <str> + HttpHeaderValues . FILENAME + <str> + filename + <str> + HttpHeaderNames . CONTENT_TYPE + <str> + contentType + ( getCharset ( ) ! = null ? <str> + HttpHeaderValues . CHARSET + <str> + getCharset ( ) . name ( ) + <str> : <str> ) + HttpHeaderNames . CONTENT_LENGTH + <str> + length ( ) + <str> + <str> + isCompleted ( ) + <str> + isInMemory ( ) + <str> + ( file ! = null ? file . getAbsolutePath ( ) : <str> ) + <str> + deleteOnExitTemporaryFile ; } @Override protected boolean deleteOnExit ( ) { return deleteOnExitTemporaryFile ; } @Override protected String getBaseDirectory ( ) { return baseDirectory ; } @Override protected String getDiskFilename ( ) { File file = new File ( filename ) ; return file . getName ( ) ; } @Override protected String getPostfix ( ) { return postfix ; } @Override protected String getPrefix ( ) { return prefix ; } @Override public FileUpload copy ( ) { DiskFileUpload upload = new DiskFileUpload ( getName ( ) , getFilename ( ) , getContentType ( ) , getContentTransferEncoding ( ) , getCharset ( ) , size ) ; ByteBuf buf = content ( ) ; if ( buf ! = null ) { try { upload . setContent ( buf . copy ( ) ) ; } catch ( IOException e ) { throw new ChannelException ( e ) ; } } return upload ; } @Override public FileUpload duplicate ( ) { DiskFileUpload upload = new DiskFileUpload ( getName ( ) , getFilename ( ) , getContentType ( ) , getContentTransferEncoding ( ) , getCharset ( ) , size ) ; ByteBuf buf = content ( ) ; if ( buf ! = null ) { try { upload . setContent ( buf . duplicate ( ) ) ; } catch ( IOException e ) { throw new ChannelException ( e ) ; } } return upload ; } @Override public FileUpload retain ( int increment ) { super . retain ( increment ) ; return this ; } @Override public FileUpload retain ( ) { super . retain ( ) ; return this ; } @Override public FileUpload touch ( ) { super . touch ( ) ; return this ; } @Override public FileUpload touch ( Object hint ) { super . touch ( hint ) ; return this ; } } 

package io . netty . handler . ipfilter ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelHandler ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . embedded . EmbeddedChannel ; import org . junit . Assert ; import org . junit . Test ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; public class IpSubnetFilterTest { @Test public void testIpv4DefaultRoute ( ) { IpSubnetFilterRule rule = new IpSubnetFilterRule ( <str> , <int> , IpFilterRuleType . ACCEPT ) ; Assert . assertTrue ( rule . matches ( newSockAddress ( <str> ) ) ) ; Assert . assertTrue ( rule . matches ( newSockAddress ( <str> ) ) ) ; Assert . assertTrue ( rule . matches ( newSockAddress ( <str> ) ) ) ; } @Test public void testIp4SubnetFilterRule ( ) throws Exception { IpSubnetFilterRule rule = new IpSubnetFilterRule ( <str> , <int> , IpFilterRuleType . ACCEPT ) ; for ( int i = <int> ; i < = <int> ; i + + ) { Assert . assertTrue ( rule . matches ( newSockAddress ( String . format ( <str> , i ) ) ) ) ; } Assert . assertFalse ( rule . matches ( newSockAddress ( <str> ) ) ) ; rule = new IpSubnetFilterRule ( <str> , <int> , IpFilterRuleType . ACCEPT ) ; Assert . assertTrue ( rule . matches ( newSockAddress ( <str> ) ) ) ; Assert . assertTrue ( rule . matches ( newSockAddress ( <str> ) ) ) ; Assert . assertTrue ( rule . matches ( newSockAddress ( <str> ) ) ) ; Assert . assertTrue ( rule . matches ( newSockAddress ( <str> ) ) ) ; Assert . assertFalse ( rule . matches ( newSockAddress ( <str> ) ) ) ; } @Test public void testIp6SubnetFilterRule ( ) { IpSubnetFilterRule rule ; rule = new IpSubnetFilterRule ( <str> , <int> , IpFilterRuleType . ACCEPT ) ; Assert . assertTrue ( rule . matches ( newSockAddress ( <str> ) ) ) ; Assert . assertTrue ( rule . matches ( newSockAddress ( <str> ) ) ) ; Assert . assertFalse ( rule . matches ( newSockAddress ( <str> ) ) ) ; } @Test public void testIpFilterRuleHandler ( ) throws Exception { IpFilterRule filter0 = new IpFilterRule ( ) { @Override public boolean matches ( InetSocketAddress remoteAddress ) { return <str> . equals ( remoteAddress . getHostName ( ) ) ; } @Override public IpFilterRuleType ruleType ( ) { return IpFilterRuleType . REJECT ; } } ; RuleBasedIpFilter denyHandler = new RuleBasedIpFilter ( filter0 ) { private final byte [ ] message = { <int> , <int> , <int> , <int> , <int> , <int> , <int> } ; @Override protected ChannelFuture channelRejected ( ChannelHandlerContext ctx , InetSocketAddress remoteAddress ) { Assert . assertTrue ( ctx . channel ( ) . isActive ( ) ) ; Assert . assertTrue ( ctx . channel ( ) . isWritable ( ) ) ; Assert . assertEquals ( <str> , remoteAddress . getHostName ( ) ) ; return ctx . writeAndFlush ( Unpooled . wrappedBuffer ( message ) ) ; } } ; EmbeddedChannel chDeny = newEmbeddedInetChannel ( <str> , denyHandler ) ; ByteBuf out = chDeny . readOutbound ( ) ; Assert . assertEquals ( <int> , out . readableBytes ( ) ) ; for ( byte i = <int> ; i < = <int> ; i + + ) { Assert . assertEquals ( i , out . readByte ( ) ) ; } Assert . assertFalse ( chDeny . isActive ( ) ) ; Assert . assertFalse ( chDeny . isOpen ( ) ) ; RuleBasedIpFilter allowHandler = new RuleBasedIpFilter ( filter0 ) { @Override protected ChannelFuture channelRejected ( ChannelHandlerContext ctx , InetSocketAddress remoteAddress ) { Assert . fail ( ) ; return null ; } } ; EmbeddedChannel chAllow = newEmbeddedInetChannel ( <str> , allowHandler ) ; Assert . assertTrue ( chAllow . isActive ( ) ) ; Assert . assertTrue ( chAllow . isOpen ( ) ) ; } @Test public void testUniqueIpFilterHandler ( ) { UniqueIpFilter handler = new UniqueIpFilter ( ) ; EmbeddedChannel ch1 = newEmbeddedInetChannel ( <str> , handler ) ; Assert . assertTrue ( ch1 . isActive ( ) ) ; EmbeddedChannel ch2 = newEmbeddedInetChannel ( <str> , handler ) ; Assert . assertTrue ( ch2 . isActive ( ) ) ; EmbeddedChannel ch3 = newEmbeddedInetChannel ( <str> , handler ) ; Assert . assertFalse ( ch3 . isActive ( ) ) ; Assert . assertFalse ( ch1 . finish ( ) ) ; EmbeddedChannel ch4 = newEmbeddedInetChannel ( <str> , handler ) ; Assert . assertTrue ( ch4 . isActive ( ) ) ; } private static EmbeddedChannel newEmbeddedInetChannel ( final String ipAddress , ChannelHandler . . . handlers ) { return new EmbeddedChannel ( handlers ) { @Override protected SocketAddress remoteAddress0 ( ) { return isActive ( ) ? new InetSocketAddress ( ipAddress , <int> ) : null ; } } ; } private static InetSocketAddress newSockAddress ( String ipAddress ) { return new InetSocketAddress ( ipAddress , <int> ) ; } } 

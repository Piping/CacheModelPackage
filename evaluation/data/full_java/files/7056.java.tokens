package org . elasticsearch . rest . action . search ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . SearchScrollRequest ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestStatusToXContentListener ; import org . elasticsearch . search . Scroll ; import java . io . IOException ; import static org . elasticsearch . common . unit . TimeValue . parseTimeValue ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestRequest . Method . POST ; public class RestSearchScrollAction extends BaseRestHandler { @Inject public RestSearchScrollAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { String scrollId = request . param ( <str> ) ; SearchScrollRequest searchScrollRequest = new SearchScrollRequest ( ) ; searchScrollRequest . scrollId ( scrollId ) ; String scroll = request . param ( <str> ) ; if ( scroll ! = null ) { searchScrollRequest . scroll ( new Scroll ( parseTimeValue ( scroll , null , <str> ) ) ) ; } if ( RestActions . hasBodyContent ( request ) ) { XContentType type = XContentFactory . xContentType ( RestActions . getRestContent ( request ) ) ; if ( type = = null ) { if ( scrollId = = null ) { scrollId = RestActions . getRestContent ( request ) . toUtf8 ( ) ; searchScrollRequest . scrollId ( scrollId ) ; } } else { buildFromContent ( RestActions . getRestContent ( request ) , searchScrollRequest ) ; } } client . searchScroll ( searchScrollRequest , new RestStatusToXContentListener < SearchResponse > ( channel ) ) ; } public static void buildFromContent ( BytesReference content , SearchScrollRequest searchScrollRequest ) { try ( XContentParser parser = XContentHelper . createParser ( content ) ) { if ( parser . nextToken ( ) ! = XContentParser . Token . START_OBJECT ) { throw new IllegalArgumentException ( <str> ) ; } else { XContentParser . Token token ; String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( <str> . equals ( currentFieldName ) & & token = = XContentParser . Token . VALUE_STRING ) { searchScrollRequest . scrollId ( parser . text ( ) ) ; } else if ( <str> . equals ( currentFieldName ) & & token = = XContentParser . Token . VALUE_STRING ) { searchScrollRequest . scroll ( new Scroll ( TimeValue . parseTimeValue ( parser . text ( ) , null , <str> ) ) ) ; } else { throw new IllegalArgumentException ( <str> + currentFieldName + <str> + token + <str> ) ; } } } } catch ( IOException e ) { throw new IllegalArgumentException ( <str> , e ) ; } } } 

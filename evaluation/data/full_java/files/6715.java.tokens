package org . elasticsearch . index . query . functionscore . script ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . query . QueryParseContext ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . index . query . functionscore . ScoreFunctionParser ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . Script . ScriptField ; import org . elasticsearch . script . ScriptParameterParser ; import org . elasticsearch . script . ScriptParameterParser . ScriptParameterValue ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class ScriptScoreFunctionParser implements ScoreFunctionParser < ScriptScoreFunctionBuilder > { public static String [ ] NAMES = { <str> , <str> } ; private static final ScriptScoreFunctionBuilder PROTOTYPE = new ScriptScoreFunctionBuilder ( new Script ( <str> ) ) ; @Override public String [ ] getNames ( ) { return NAMES ; } @Override public ScriptScoreFunctionBuilder fromXContent ( QueryParseContext parseContext , XContentParser parser ) throws IOException , ParsingException { ScriptParameterParser scriptParameterParser = new ScriptParameterParser ( ) ; Script script = null ; Map < String , Object > vars = null ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , ScriptField . SCRIPT ) ) { script = Script . parse ( parser , parseContext . parseFieldMatcher ( ) ) ; } else if ( <str> . equals ( currentFieldName ) ) { vars = parser . map ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , NAMES [ <int> ] + <str> + currentFieldName + <str> ) ; } } else if ( token . isValue ( ) ) { if ( ! scriptParameterParser . token ( currentFieldName , token , parser , parseContext . parseFieldMatcher ( ) ) ) { throw new ParsingException ( parser . getTokenLocation ( ) , NAMES [ <int> ] + <str> + currentFieldName + <str> ) ; } } } if ( script = = null ) { ScriptParameterValue scriptValue = scriptParameterParser . getDefaultScriptParameterValue ( ) ; if ( scriptValue ! = null ) { if ( vars = = null ) { vars = new HashMap < > ( ) ; } script = new Script ( scriptValue . script ( ) , scriptValue . scriptType ( ) , scriptParameterParser . lang ( ) , vars ) ; } } else if ( vars ! = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } if ( script = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , NAMES [ <int> ] + <str> ) ; } return new ScriptScoreFunctionBuilder ( script ) ; } @Override public ScriptScoreFunctionBuilder getBuilderPrototype ( ) { return PROTOTYPE ; } } 

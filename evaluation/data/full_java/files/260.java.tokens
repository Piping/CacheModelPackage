package org . apache . cassandra . cql3 . statements ; import org . apache . cassandra . auth . Permission ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . config . ViewDefinition ; import org . apache . cassandra . cql3 . CFName ; import org . apache . cassandra . db . view . View ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . exceptions . UnauthorizedException ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . MigrationManager ; import org . apache . cassandra . transport . Event ; public class DropViewStatement extends SchemaAlteringStatement { public final boolean ifExists ; public DropViewStatement ( CFName cf , boolean ifExists ) { super ( cf ) ; this . ifExists = ifExists ; } public void checkAccess ( ClientState state ) throws UnauthorizedException , InvalidRequestException { CFMetaData baseTable = View . findBaseTable ( keyspace ( ) , columnFamily ( ) ) ; if ( baseTable ! = null ) state . hasColumnFamilyAccess ( keyspace ( ) , baseTable . cfName , Permission . ALTER ) ; } public void validate ( ClientState state ) { } public Event . SchemaChange announceMigration ( boolean isLocalOnly ) throws InvalidRequestException , ConfigurationException { try { MigrationManager . announceViewDrop ( keyspace ( ) , columnFamily ( ) , isLocalOnly ) ; return new Event . SchemaChange ( Event . SchemaChange . Change . DROPPED , Event . SchemaChange . Target . TABLE , keyspace ( ) , columnFamily ( ) ) ; } catch ( ConfigurationException e ) { if ( ifExists ) return null ; throw e ; } } } 

package org . gradle . model . internal . manage . schema . extract ; import com . google . common . collect . ImmutableList ; import org . gradle . model . ModelMap ; import org . gradle . model . internal . core . * ; import org . gradle . model . internal . manage . schema . CollectionSchema ; import org . gradle . model . internal . manage . schema . ModelSchema ; import org . gradle . model . internal . manage . schema . SpecializedMapSchema ; import org . gradle . model . internal . type . ModelType ; public class SpecializedMapNodeInitializerExtractionStrategy extends ModelMapNodeInitializerExtractionStrategy { private static final ModelType < ModelMap < ? > > MODEL_MAP_MODEL_TYPE = new ModelType < ModelMap < ? > > ( ) { } ; @Override public < T > NodeInitializer extractNodeInitializer ( ModelSchema < T > schema ) { return super . extractNodeInitializer ( schema ) ; } @Override protected < T , E > NodeInitializer extractNodeInitializer ( CollectionSchema < T , E > schema ) { if ( schema instanceof SpecializedMapSchema ) { return new SpecializedMapNodeInitializer < T , E > ( ( SpecializedMapSchema < T , E > ) schema ) ; } return null ; } @Override public Iterable < ModelType < ? > > supportedTypes ( ) { return ImmutableList . < ModelType < ? > > of ( MODEL_MAP_MODEL_TYPE ) ; } } 

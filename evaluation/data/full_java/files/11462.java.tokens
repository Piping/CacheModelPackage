package org . gradle . api . internal . file ; import com . google . common . base . Predicate ; import com . google . common . collect . FluentIterable ; import com . google . common . collect . Lists ; import groovy . lang . Closure ; import org . gradle . api . internal . BeanDynamicObject ; import org . gradle . api . internal . DynamicObject ; import org . gradle . api . internal . file . collections . DirectoryFileTree ; import org . gradle . api . tasks . AntBuilderAware ; import java . util . Collections ; public class AntFileCollectionMatchingTaskBuilder implements AntBuilderAware { private final Iterable < DirectoryFileTree > fileTrees ; public AntFileCollectionMatchingTaskBuilder ( Iterable < DirectoryFileTree > fileTrees ) { this . fileTrees = fileTrees ; } public Object addToAntBuilder ( final Object node , final String childNodeName ) { final DynamicObject dynamicObject = new BeanDynamicObject ( node ) ; final Iterable < DirectoryFileTree > existing = Lists . newLinkedList ( FluentIterable . from ( fileTrees ) . filter ( new Predicate < DirectoryFileTree > ( ) { @Override public boolean apply ( DirectoryFileTree input ) { return input . getDir ( ) . exists ( ) ; } } ) ) ; for ( DirectoryFileTree fileTree : existing ) { dynamicObject . invokeMethod ( childNodeName , Collections . singletonMap ( <str> , fileTree . getDir ( ) ) ) ; } dynamicObject . invokeMethod ( <str> , new Closure < Void > ( this ) { public Object doCall ( Object ignore ) { for ( final DirectoryFileTree fileTree : existing ) { dynamicObject . invokeMethod ( <str> , new Closure < Void > ( this ) { public Object doCall ( Object ignore ) { dynamicObject . invokeMethod ( <str> , Collections . singletonMap ( <str> , fileTree . getDir ( ) ) ) ; fileTree . getPatterns ( ) . addToAntBuilder ( node , null ) ; return null ; } } ) ; } return null ; } } ) ; return node ; } } 

package org . gradle . api . internal . plugins ; import org . gradle . api . Project ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . plugins . BasePlugin ; import org . gradle . api . tasks . Upload ; import java . io . File ; import java . util . concurrent . Callable ; public class UploadRule extends AbstractRule { public static final String PREFIX = <str> ; private final Project project ; public UploadRule ( Project project ) { this . project = project ; } public String getDescription ( ) { return String . format ( <str> , PREFIX ) ; } public void apply ( String taskName ) { if ( taskName . startsWith ( PREFIX ) ) { for ( Configuration configuration : project . getConfigurations ( ) ) { if ( taskName . equals ( configuration . getUploadTaskName ( ) ) ) { createUploadTask ( configuration . getUploadTaskName ( ) , configuration , project ) ; } } } } private Upload createUploadTask ( String name , final Configuration configuration , final Project project ) { Upload upload = project . getTasks ( ) . create ( name , Upload . class ) ; upload . setDescription ( String . format ( <str> , configuration ) ) ; upload . setGroup ( BasePlugin . UPLOAD_GROUP ) ; upload . setConfiguration ( configuration ) ; upload . setUploadDescriptor ( true ) ; upload . getConventionMapping ( ) . map ( <str> , new Callable < File > ( ) { public File call ( ) throws Exception { return new File ( project . getBuildDir ( ) , <str> ) ; } } ) ; return upload ; } } 

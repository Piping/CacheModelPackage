package org . elasticsearch . test . rest . test ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . rest . Stash ; import org . elasticsearch . test . rest . json . JsonPath ; import java . util . List ; import java . util . Map ; import java . util . Set ; import static org . hamcrest . Matchers . contains ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class JsonPathTests extends ESTestCase { public void testEvaluateObjectPathEscape ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( String . class ) ) ; assertThat ( ( String ) object , equalTo ( <str> ) ) ; } public void testEvaluateObjectPathWithDoubleDot ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( String . class ) ) ; assertThat ( ( String ) object , equalTo ( <str> ) ) ; } public void testEvaluateObjectPathEndsWithDot ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( String . class ) ) ; assertThat ( ( String ) object , equalTo ( <str> ) ) ; } public void testEvaluateString ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( String . class ) ) ; assertThat ( ( String ) object , equalTo ( <str> ) ) ; } public void testEvaluateInteger ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( Integer . class ) ) ; assertThat ( ( Integer ) object , equalTo ( <int> ) ) ; } public void testEvaluateDouble ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( Double . class ) ) ; assertThat ( ( Double ) object , equalTo ( <float> ) ) ; } public void testEvaluateArray ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( List . class ) ) ; List list = ( List ) object ; assertThat ( list . size ( ) , equalTo ( <int> ) ) ; assertThat ( list . get ( <int> ) , instanceOf ( String . class ) ) ; assertThat ( ( String ) list . get ( <int> ) , equalTo ( <str> ) ) ; assertThat ( list . get ( <int> ) , instanceOf ( String . class ) ) ; assertThat ( ( String ) list . get ( <int> ) , equalTo ( <str> ) ) ; } public void testEvaluateArrayElement ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( String . class ) ) ; assertThat ( ( String ) object , equalTo ( <str> ) ) ; } public void testEvaluateArrayElementObject ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( String . class ) ) ; assertThat ( ( String ) object , equalTo ( <str> ) ) ; } public void testEvaluateArrayElementObjectWrongPath ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , nullValue ( ) ) ; } @SuppressWarnings ( <str> ) public void testEvaluateObjectKeys ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , instanceOf ( Map . class ) ) ; Map < String , Object > map = ( Map < String , Object > ) object ; assertThat ( map . size ( ) , equalTo ( <int> ) ) ; Set < String > strings = map . keySet ( ) ; assertThat ( strings , contains ( <str> , <str> ) ) ; } @SuppressWarnings ( <str> ) public void testEvaluateEmptyPath ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; Object object = jsonPath . evaluate ( <str> ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object , instanceOf ( Map . class ) ) ; assertThat ( ( ( Map < String , Object > ) object ) . containsKey ( <str> ) , equalTo ( true ) ) ; } public void testEvaluateStashInPropertyName ( ) throws Exception { String json = <str> ; JsonPath jsonPath = new JsonPath ( json ) ; try { jsonPath . evaluate ( <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } Stash stash = new Stash ( ) ; stash . stashValue ( <str> , <str> ) ; Object object = jsonPath . evaluate ( <str> , stash ) ; assertThat ( object , notNullValue ( ) ) ; assertThat ( object . toString ( ) , equalTo ( <str> ) ) ; } } 

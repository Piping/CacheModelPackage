package org . apache . cassandra . db . commitlog ; import java . io . DataInput ; import java . io . EOFException ; import java . io . File ; import java . io . IOException ; import java . io . RandomAccessFile ; import java . nio . ByteBuffer ; import java . nio . charset . StandardCharsets ; import java . util . Map ; import java . util . TreeMap ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import java . util . zip . CRC32 ; import com . google . common . annotations . VisibleForTesting ; import com . google . common . base . Objects ; import org . apache . cassandra . config . ParameterizedClass ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . io . FSReadError ; import org . apache . cassandra . net . MessagingService ; import org . json . simple . JSONValue ; import static org . apache . cassandra . utils . FBUtilities . updateChecksumInt ; public class CommitLogDescriptor { private static final String SEPARATOR = <str> ; private static final String FILENAME_PREFIX = <str> + SEPARATOR ; private static final String FILENAME_EXTENSION = <str> ; private static final Pattern COMMIT_LOG_FILE_PATTERN = Pattern . compile ( FILENAME_PREFIX + <str> + SEPARATOR + <str> + FILENAME_EXTENSION ) ; private static final String COMPRESSION_PARAMETERS_KEY = <str> ; private static final String COMPRESSION_CLASS_KEY = <str> ; public static final int VERSION_12 = <int> ; public static final int VERSION_20 = <int> ; public static final int VERSION_21 = <int> ; public static final int VERSION_22 = <int> ; public static final int VERSION_30 = <int> ; @VisibleForTesting public static final int current_version = VERSION_30 ; final int version ; public final long id ; public final ParameterizedClass compression ; public CommitLogDescriptor ( int version , long id , ParameterizedClass compression ) { this . version = version ; this . id = id ; this . compression = compression ; } public CommitLogDescriptor ( long id , ParameterizedClass compression ) { this ( current_version , id , compression ) ; } public static void writeHeader ( ByteBuffer out , CommitLogDescriptor descriptor ) { CRC32 crc = new CRC32 ( ) ; out . putInt ( descriptor . version ) ; updateChecksumInt ( crc , descriptor . version ) ; out . putLong ( descriptor . id ) ; updateChecksumInt ( crc , ( int ) ( descriptor . id & <hex> ) ) ; updateChecksumInt ( crc , ( int ) ( descriptor . id > > > <int> ) ) ; if ( descriptor . version > = VERSION_22 ) { String parametersString = constructParametersString ( descriptor ) ; byte [ ] parametersBytes = parametersString . getBytes ( StandardCharsets . UTF_8 ) ; if ( parametersBytes . length ! = ( ( ( short ) parametersBytes . length ) & <hex> ) ) throw new ConfigurationException ( String . format ( <str> , parametersBytes . length ) ) ; out . putShort ( ( short ) parametersBytes . length ) ; updateChecksumInt ( crc , parametersBytes . length ) ; out . put ( parametersBytes ) ; crc . update ( parametersBytes , <int> , parametersBytes . length ) ; } else assert descriptor . compression = = null ; out . putInt ( ( int ) crc . getValue ( ) ) ; } private static String constructParametersString ( CommitLogDescriptor descriptor ) { Map < String , Object > params = new TreeMap < String , Object > ( ) ; ParameterizedClass compression = descriptor . compression ; if ( compression ! = null ) { params . put ( COMPRESSION_PARAMETERS_KEY , compression . parameters ) ; params . put ( COMPRESSION_CLASS_KEY , compression . class_name ) ; } return JSONValue . toJSONString ( params ) ; } public static CommitLogDescriptor fromHeader ( File file ) { try ( RandomAccessFile raf = new RandomAccessFile ( file , <str> ) ) { assert raf . getFilePointer ( ) = = <int> ; return readHeader ( raf ) ; } catch ( EOFException e ) { throw new RuntimeException ( e ) ; } catch ( IOException e ) { throw new FSReadError ( e , file ) ; } } public static CommitLogDescriptor readHeader ( DataInput input ) throws IOException { CRC32 checkcrc = new CRC32 ( ) ; int version = input . readInt ( ) ; updateChecksumInt ( checkcrc , version ) ; long id = input . readLong ( ) ; updateChecksumInt ( checkcrc , ( int ) ( id & <hex> ) ) ; updateChecksumInt ( checkcrc , ( int ) ( id > > > <int> ) ) ; int parametersLength = <int> ; if ( version > = VERSION_22 ) { parametersLength = input . readShort ( ) & <hex> ; updateChecksumInt ( checkcrc , parametersLength ) ; } byte [ ] parametersBytes = new byte [ parametersLength ] ; input . readFully ( parametersBytes ) ; checkcrc . update ( parametersBytes , <int> , parametersBytes . length ) ; int crc = input . readInt ( ) ; if ( crc = = ( int ) checkcrc . getValue ( ) ) return new CommitLogDescriptor ( version , id , parseCompression ( ( Map < ? , ? > ) JSONValue . parse ( new String ( parametersBytes , StandardCharsets . UTF_8 ) ) ) ) ; return null ; } @SuppressWarnings ( <str> ) private static ParameterizedClass parseCompression ( Map < ? , ? > params ) { if ( params = = null ) return null ; String className = ( String ) params . get ( COMPRESSION_CLASS_KEY ) ; if ( className = = null ) return null ; Map < String , String > cparams = ( Map < String , String > ) params . get ( COMPRESSION_PARAMETERS_KEY ) ; return new ParameterizedClass ( className , cparams ) ; } public static CommitLogDescriptor fromFileName ( String name ) { Matcher matcher ; if ( ! ( matcher = COMMIT_LOG_FILE_PATTERN . matcher ( name ) ) . matches ( ) ) throw new RuntimeException ( <str> + name ) ; if ( matcher . group ( <int> ) = = null ) throw new UnsupportedOperationException ( <str> ) ; long id = Long . parseLong ( matcher . group ( <int> ) . split ( SEPARATOR ) [ <int> ] ) ; return new CommitLogDescriptor ( Integer . parseInt ( matcher . group ( <int> ) ) , id , null ) ; } public int getMessagingVersion ( ) { switch ( version ) { case VERSION_12 : return MessagingService . VERSION_12 ; case VERSION_20 : return MessagingService . VERSION_20 ; case VERSION_21 : return MessagingService . VERSION_21 ; case VERSION_22 : return MessagingService . VERSION_22 ; case VERSION_30 : return MessagingService . VERSION_30 ; default : throw new IllegalStateException ( <str> + version ) ; } } public String fileName ( ) { return FILENAME_PREFIX + version + SEPARATOR + id + FILENAME_EXTENSION ; } public static boolean isValid ( String filename ) { return COMMIT_LOG_FILE_PATTERN . matcher ( filename ) . matches ( ) ; } public String toString ( ) { return <str> + version + <str> + id + ( compression ! = null ? <str> + compression : <str> ) + <str> ; } public boolean equals ( Object that ) { return that instanceof CommitLogDescriptor & & equals ( ( CommitLogDescriptor ) that ) ; } public boolean equalsIgnoringCompression ( CommitLogDescriptor that ) { return this . version = = that . version & & this . id = = that . id ; } public boolean equals ( CommitLogDescriptor that ) { return equalsIgnoringCompression ( that ) & & Objects . equal ( this . compression , that . compression ) ; } } 

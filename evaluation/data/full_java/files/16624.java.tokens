package org . junit . tests . experimental . rules ; import static org . hamcrest . CoreMatchers . is ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertThat ; import static org . junit . experimental . results . PrintableResult . testResult ; import static org . junit . experimental . results . ResultMatchers . hasFailureContaining ; import static org . junit . experimental . results . ResultMatchers . isSuccessful ; import java . util . concurrent . Callable ; import org . junit . Rule ; import org . junit . Test ; import org . junit . experimental . results . PrintableResult ; import org . junit . rules . ErrorCollector ; import org . junit . rules . Verifier ; public class VerifierRuleTest { public static class UsesErrorCollector { @Rule public ErrorCollector collector = new ErrorCollector ( ) ; @Test public void example ( ) { collector . addError ( new Throwable ( <str> ) ) ; } } @Test public void usedErrorCollectorShouldFail ( ) { assertThat ( testResult ( UsesErrorCollector . class ) , hasFailureContaining ( <str> ) ) ; } public static class UsesErrorCollectorTwice { @Rule public ErrorCollector collector = new ErrorCollector ( ) ; @Test public void example ( ) { collector . addError ( new Throwable ( <str> ) ) ; collector . addError ( new Throwable ( <str> ) ) ; } } @Test public void usedErrorCollectorTwiceShouldFail ( ) { PrintableResult testResult = testResult ( UsesErrorCollectorTwice . class ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; } public static class UsesErrorCollectorCheckThat { @Rule public ErrorCollector collector = new ErrorCollector ( ) ; @Test public void example ( ) { collector . checkThat ( <int> , is ( <int> ) ) ; collector . checkThat ( <int> , is ( <int> ) ) ; collector . checkThat ( <str> , <int> , is ( <int> ) ) ; collector . checkThat ( <str> , <int> , is ( <int> ) ) ; } } @Test public void usedErrorCollectorCheckThatShouldFail ( ) { PrintableResult testResult = testResult ( UsesErrorCollectorCheckThat . class ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; } public static class UsesErrorCollectorCheckSucceeds { @Rule public ErrorCollector collector = new ErrorCollector ( ) ; @Test public void example ( ) { collector . checkSucceeds ( new Callable < Object > ( ) { public Object call ( ) throws Exception { throw new RuntimeException ( <str> ) ; } } ) ; collector . checkSucceeds ( new Callable < Integer > ( ) { public Integer call ( ) throws Exception { throw new RuntimeException ( <str> ) ; } } ) ; Integer result = collector . checkSucceeds ( new Callable < Integer > ( ) { public Integer call ( ) throws Exception { return <int> ; } } ) ; assertEquals ( Integer . valueOf ( <int> ) , result ) ; } } @Test public void usedErrorCollectorCheckSucceedsShouldFail ( ) { PrintableResult testResult = testResult ( UsesErrorCollectorCheckSucceeds . class ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; assertThat ( testResult , hasFailureContaining ( <str> ) ) ; } public static class UsesErrorCollectorCheckSucceedsPasses { @Rule public ErrorCollector collector = new ErrorCollector ( ) ; @Test public void example ( ) { assertEquals ( <int> , collector . checkSucceeds ( new Callable < Object > ( ) { public Object call ( ) throws Exception { return <int> ; } } ) ) ; } } @Test public void usedErrorCollectorCheckSucceedsShouldPass ( ) { PrintableResult testResult = testResult ( UsesErrorCollectorCheckSucceedsPasses . class ) ; assertThat ( testResult , isSuccessful ( ) ) ; } private static String sequence ; public static class UsesVerifier { @Rule public Verifier collector = new Verifier ( ) { @Override protected void verify ( ) { sequence + = <str> ; } } ; @Test public void example ( ) { sequence + = <str> ; } } @Test public void verifierRunsAfterTest ( ) { sequence = <str> ; assertThat ( testResult ( UsesVerifier . class ) , isSuccessful ( ) ) ; assertEquals ( <str> , sequence ) ; } } 

package org . junit . tests . experimental . rules ; import static org . hamcrest . CoreMatchers . containsString ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertThat ; import java . io . File ; import java . io . IOException ; import java . io . InterruptedIOException ; import java . io . RandomAccessFile ; import java . nio . ByteBuffer ; import java . nio . channels . FileChannel ; import java . util . Random ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . locks . ReentrantLock ; import org . junit . After ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import org . junit . rules . TemporaryFolder ; import org . junit . rules . TestRule ; import org . junit . rules . Timeout ; import org . junit . runner . JUnitCore ; import org . junit . runner . Result ; import org . junit . runner . notification . Failure ; public class TimeoutRuleTest { private static final ReentrantLock run1Lock = new ReentrantLock ( ) ; private static volatile boolean run4done = false ; public abstract static class AbstractTimeoutTest { public static final StringBuffer logger = new StringBuffer ( ) ; @Rule public final TemporaryFolder tmpFile = new TemporaryFolder ( ) ; @Test public void run1 ( ) throws InterruptedException { logger . append ( <str> ) ; TimeoutRuleTest . run1Lock . lockInterruptibly ( ) ; TimeoutRuleTest . run1Lock . unlock ( ) ; } @Test public void run2 ( ) throws InterruptedException { logger . append ( <str> ) ; Thread . currentThread ( ) . join ( ) ; } @Test public synchronized void run3 ( ) throws InterruptedException { logger . append ( <str> ) ; wait ( ) ; } @Test public void run4 ( ) { logger . append ( <str> ) ; while ( ! run4done ) { } } @Test public void run5 ( ) throws IOException { logger . append ( <str> ) ; Random rnd = new Random ( ) ; byte [ ] data = new byte [ <int> ] ; File tmp = tmpFile . newFile ( ) ; while ( true ) { RandomAccessFile randomAccessFile = new RandomAccessFile ( tmp , <str> ) ; try { FileChannel channel = randomAccessFile . getChannel ( ) ; rnd . nextBytes ( data ) ; ByteBuffer buffer = ByteBuffer . wrap ( data ) ; channel . write ( buffer ) ; } finally { randomAccessFile . close ( ) ; } tmp . delete ( ) ; } } @Test public void run6 ( ) throws InterruptedIOException { logger . append ( <str> ) ; throw new InterruptedIOException ( ) ; } } public static class HasGlobalLongTimeout extends AbstractTimeoutTest { @Rule public final TestRule globalTimeout = Timeout . millis ( <int> ) ; } public static class HasGlobalTimeUnitTimeout extends AbstractTimeoutTest { @Rule public final TestRule globalTimeout = new Timeout ( <int> , TimeUnit . MILLISECONDS ) ; } public static class HasNullTimeUnit { @Rule public final TestRule globalTimeout = new Timeout ( <int> , null ) ; @Test public void wouldPass ( ) { } } @Before public void before ( ) { run4done = false ; run1Lock . lock ( ) ; } @After public void after ( ) { run4done = true ; run1Lock . unlock ( ) ; } @Test public void timeUnitTimeout ( ) { HasGlobalTimeUnitTimeout . logger . setLength ( <int> ) ; Result result = JUnitCore . runClasses ( HasGlobalTimeUnitTimeout . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; assertThat ( HasGlobalTimeUnitTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalTimeUnitTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalTimeUnitTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalTimeUnitTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalTimeUnitTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalTimeUnitTimeout . logger . toString ( ) , containsString ( <str> ) ) ; } @Test public void longTimeout ( ) { HasGlobalLongTimeout . logger . setLength ( <int> ) ; Result result = JUnitCore . runClasses ( HasGlobalLongTimeout . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; assertThat ( HasGlobalLongTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalLongTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalLongTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalLongTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalLongTimeout . logger . toString ( ) , containsString ( <str> ) ) ; assertThat ( HasGlobalLongTimeout . logger . toString ( ) , containsString ( <str> ) ) ; } @Test public void nullTimeUnit ( ) { Result result = JUnitCore . runClasses ( HasNullTimeUnit . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; Failure failure = result . getFailures ( ) . get ( <int> ) ; assertThat ( failure . getException ( ) . getMessage ( ) , containsString ( <str> ) ) ; Throwable cause = failure . getException ( ) . getCause ( ) ; assertThat ( cause . getMessage ( ) , containsString ( <str> ) ) ; } } 

package com . google . common . collect ; import com . google . common . collect . MapConstraints . ConstrainedMap ; import com . google . common . primitives . Primitives ; import java . io . Serializable ; import java . util . HashMap ; import java . util . Map ; @SuppressWarnings ( <str> ) public final class MutableClassToInstanceMap < B > extends ConstrainedMap < Class < ? extends B > , B > implements ClassToInstanceMap < B > , Serializable { public static < B > MutableClassToInstanceMap < B > create ( ) { return new MutableClassToInstanceMap < B > ( new HashMap < Class < ? extends B > , B > ( ) ) ; } public static < B > MutableClassToInstanceMap < B > create ( Map < Class < ? extends B > , B > backingMap ) { return new MutableClassToInstanceMap < B > ( backingMap ) ; } private MutableClassToInstanceMap ( Map < Class < ? extends B > , B > delegate ) { super ( delegate , VALUE_CAN_BE_CAST_TO_KEY ) ; } private static final MapConstraint < Class < ? > , Object > VALUE_CAN_BE_CAST_TO_KEY = new MapConstraint < Class < ? > , Object > ( ) { @Override public void checkKeyValue ( Class < ? > key , Object value ) { cast ( key , value ) ; } } ; @Override public < T extends B > T putInstance ( Class < T > type , T value ) { return cast ( type , put ( type , value ) ) ; } @Override public < T extends B > T getInstance ( Class < T > type ) { return cast ( type , get ( type ) ) ; } private static < B , T extends B > T cast ( Class < T > type , B value ) { return Primitives . wrap ( type ) . cast ( value ) ; } private Object writeReplace ( ) { return new SerializedForm ( delegate ( ) ) ; } private static final class SerializedForm < B > implements Serializable { private final Map < Class < ? extends B > , B > backingMap ; SerializedForm ( Map < Class < ? extends B > , B > backingMap ) { this . backingMap = backingMap ; } Object readResolve ( ) { return create ( backingMap ) ; } private static final long serialVersionUID = <int> ; } } 

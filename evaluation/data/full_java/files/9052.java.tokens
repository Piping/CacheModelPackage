package org . elasticsearch . test . rest . section ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import java . util . regex . Pattern ; import static org . elasticsearch . test . hamcrest . RegexMatcher . matches ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . assertThat ; public class MatchAssertion extends Assertion { private static final ESLogger logger = Loggers . getLogger ( MatchAssertion . class ) ; public MatchAssertion ( String field , Object expectedValue ) { super ( field , expectedValue ) ; } @Override protected void doAssert ( Object actualValue , Object expectedValue ) { if ( expectedValue instanceof String ) { String expValue = ( ( String ) expectedValue ) . trim ( ) ; if ( expValue . length ( ) > <int> & & expValue . startsWith ( <str> ) & & expValue . endsWith ( <str> ) ) { assertThat ( <str> + getField ( ) + <str> + safeClass ( actualValue ) + <str> , actualValue , instanceOf ( String . class ) ) ; String stringValue = ( String ) actualValue ; String regex = expValue . substring ( <int> , expValue . length ( ) - <int> ) ; logger . trace ( <str> , stringValue , regex ) ; assertThat ( <str> + getField ( ) + <str> , stringValue , matches ( regex , Pattern . COMMENTS ) ) ; return ; } } assertThat ( errorMessage ( ) , actualValue , notNullValue ( ) ) ; logger . trace ( <str> , actualValue , expectedValue , getField ( ) ) ; if ( ! actualValue . getClass ( ) . equals ( safeClass ( expectedValue ) ) ) { if ( actualValue instanceof Number & & expectedValue instanceof Number ) { assertThat ( errorMessage ( ) , ( ( Number ) actualValue ) . doubleValue ( ) , equalTo ( ( ( Number ) expectedValue ) . doubleValue ( ) ) ) ; return ; } } assertThat ( errorMessage ( ) , actualValue , equalTo ( expectedValue ) ) ; } private String errorMessage ( ) { return <str> + getField ( ) + <str> ; } } 

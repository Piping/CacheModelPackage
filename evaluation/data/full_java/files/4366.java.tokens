package org . eclipse . debug . internal . ui . viewers ; import org . eclipse . debug . internal . ui . viewers . provisional . ILabelRequestMonitor ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . swt . graphics . FontData ; import org . eclipse . swt . graphics . RGB ; import org . eclipse . swt . widgets . Widget ; class LabelRequestMonitor extends AsynchronousRequestMonitor implements ILabelRequestMonitor { private String [ ] fLabels ; private ImageDescriptor [ ] fImageDescriptors ; private FontData [ ] fFontDatas ; private RGB [ ] fForegrounds ; private RGB [ ] fBackgrounds ; public LabelRequestMonitor ( ModelNode node , AsynchronousModel model ) { super ( node , model ) ; } @Override protected void performUpdate ( ) { AsynchronousViewer viewer = getModel ( ) . getViewer ( ) ; Widget widget = viewer . findItem ( getNode ( ) ) ; if ( widget ! = null & & ! widget . isDisposed ( ) ) { viewer . setLabels ( widget , fLabels , fImageDescriptors ) ; viewer . setColors ( widget , fForegrounds , fBackgrounds ) ; viewer . setFonts ( widget , fFontDatas ) ; } } @Override protected boolean contains ( AsynchronousRequestMonitor update ) { return update instanceof LabelRequestMonitor & & update . getNode ( ) = = getNode ( ) ; } @Override public void setLabels ( String [ ] text ) { fLabels = text ; } @Override public void setFontDatas ( FontData [ ] fontData ) { fFontDatas = fontData ; } @Override public void setImageDescriptors ( ImageDescriptor [ ] image ) { fImageDescriptors = image ; } @Override public void setForegrounds ( RGB [ ] foreground ) { fForegrounds = foreground ; } @Override public void setBackgrounds ( RGB [ ] background ) { fBackgrounds = background ; } protected RGB [ ] getBackgrounds ( ) { return fBackgrounds ; } protected RGB [ ] getForegrounds ( ) { return fForegrounds ; } protected FontData [ ] getFontDatas ( ) { return fFontDatas ; } protected String [ ] getLabels ( ) { return fLabels ; } protected ImageDescriptor [ ] getImageDescriptors ( ) { return fImageDescriptors ; } } 

package org . gradle . jvm . tasks . api . internal ; import org . objectweb . asm . ClassVisitor ; import org . objectweb . asm . ClassWriter ; import org . objectweb . asm . MethodVisitor ; import static org . objectweb . asm . Opcodes . * ; public class MethodStubbingApiMemberAdapter extends ClassVisitor { private static final String UOE_METHOD = <str> ; private String internalClassName ; public MethodStubbingApiMemberAdapter ( ClassWriter cv ) { super ( ASM5 , cv ) ; } @Override public void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) { super . visit ( version , access , name , signature , superName , interfaces ) ; internalClassName = name ; if ( ( access & ACC_INTERFACE ) = = <int> ) { generateUnsupportedOperationExceptionMethod ( ) ; } } @Override public MethodVisitor visitMethod ( int access , String name , String desc , String signature , String [ ] exceptions ) { MethodVisitor mv = cv . visitMethod ( access , name , desc , signature , exceptions ) ; if ( ( access & ACC_ABSTRACT ) = = <int> ) { mv . visitCode ( ) ; mv . visitMethodInsn ( INVOKESTATIC , internalClassName , UOE_METHOD , <str> , false ) ; mv . visitInsn ( ATHROW ) ; mv . visitMaxs ( <int> , <int> ) ; mv . visitEnd ( ) ; } return mv ; } private void generateUnsupportedOperationExceptionMethod ( ) { MethodVisitor mv = cv . visitMethod ( ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC , UOE_METHOD , <str> , null , null ) ; mv . visitCode ( ) ; mv . visitTypeInsn ( NEW , <str> ) ; mv . visitInsn ( DUP ) ; mv . visitLdcInsn ( <str> ) ; mv . visitMethodInsn ( INVOKESPECIAL , <str> , <str> , <str> , false ) ; mv . visitInsn ( ARETURN ) ; mv . visitMaxs ( <int> , <int> ) ; mv . visitEnd ( ) ; } } 

package org . elasticsearch . search . functionscore ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . lucene . search . function . FieldValueFactorFunction ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . functionScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . index . query . QueryBuilders . simpleQueryStringQuery ; import static org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders . fieldValueFactorFunction ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertOrderedSearchHits ; public class FunctionScoreFieldValueIT extends ESIntegTestCase { public void testFieldValueFactor ( ) throws IOException { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , randomFrom ( new String [ ] { <str> , <str> , <str> , <str> , <str> } ) ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . get ( ) ) ; ensureYellow ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> , <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> , <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setExplain ( randomBoolean ( ) ) . setQuery ( functionScoreQuery ( simpleQueryStringQuery ( <str> ) , fieldValueFactorFunction ( <str> ) ) ) . get ( ) ; assertOrderedSearchHits ( response , <str> , <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setExplain ( randomBoolean ( ) ) . setQuery ( functionScoreQuery ( simpleQueryStringQuery ( <str> ) , fieldValueFactorFunction ( <str> ) . modifier ( FieldValueFactorFunction . Modifier . NONE ) ) ) . get ( ) ; assertOrderedSearchHits ( response , <str> , <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setExplain ( randomBoolean ( ) ) . setQuery ( functionScoreQuery ( simpleQueryStringQuery ( <str> ) , fieldValueFactorFunction ( <str> ) . modifier ( FieldValueFactorFunction . Modifier . RECIPROCAL ) ) ) . get ( ) ; assertOrderedSearchHits ( response , <str> , <str> ) ; try { response = client ( ) . prepareSearch ( <str> ) . setExplain ( randomBoolean ( ) ) . setQuery ( functionScoreQuery ( matchAllQuery ( ) , fieldValueFactorFunction ( <str> ) ) ) . get ( ) ; assertFailures ( response ) ; } catch ( SearchPhaseExecutionException e ) { } response = client ( ) . prepareSearch ( <str> ) . setExplain ( randomBoolean ( ) ) . setQuery ( functionScoreQuery ( matchAllQuery ( ) , fieldValueFactorFunction ( <str> ) . modifier ( FieldValueFactorFunction . Modifier . RECIPROCAL ) . missing ( <int> ) ) ) . get ( ) ; assertOrderedSearchHits ( response , <str> , <str> , <str> ) ; response = client ( ) . prepareSearch ( <str> ) . setExplain ( randomBoolean ( ) ) . setQuery ( functionScoreQuery ( matchAllQuery ( ) , fieldValueFactorFunction ( <str> ) . modifier ( FieldValueFactorFunction . Modifier . RECIPROCAL ) . missing ( <int> ) ) ) . get ( ) ; assertEquals ( response . getHits ( ) . getAt ( <int> ) . score ( ) , response . getHits ( ) . getAt ( <int> ) . score ( ) , <int> ) ; try { response = client ( ) . prepareSearch ( <str> ) . setExplain ( randomBoolean ( ) ) . setQuery ( functionScoreQuery ( simpleQueryStringQuery ( <str> ) , fieldValueFactorFunction ( <str> ) . modifier ( FieldValueFactorFunction . Modifier . RECIPROCAL ) . factor ( <int> ) ) ) . get ( ) ; assertFailures ( response ) ; } catch ( SearchPhaseExecutionException e ) { } } } 

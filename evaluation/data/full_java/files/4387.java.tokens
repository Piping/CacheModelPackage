package org . eclipse . debug . internal . ui . viewers . model ; import org . eclipse . debug . internal . ui . viewers . model . ViewerStateTracker . IElementMementoCollector ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementMementoRequest ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ITreeModelViewer ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ModelDelta ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . ui . IMemento ; class ElementMementoRequest extends MementoUpdate implements IElementMementoRequest { private IElementMementoCollector fManager ; private ModelDelta fDelta ; public ElementMementoRequest ( TreeModelContentProvider provider , Object viewerInput , IElementMementoCollector collector , Object element , TreePath elementPath , IMemento memento , ModelDelta delta ) { super ( provider , viewerInput , provider . getPresentationContext ( ) , element , elementPath , memento ) ; fManager = collector ; fDelta = delta ; } @Override public void done ( ) { ITreeModelViewer viewer = getContentProvider ( ) . getViewer ( ) ; if ( viewer = = null ) return ; if ( viewer . getDisplay ( ) . getThread ( ) = = Thread . currentThread ( ) ) { doComplete ( ) ; } else { viewer . getDisplay ( ) . asyncExec ( new Runnable ( ) { @Override public void run ( ) { doComplete ( ) ; } } ) ; } } private void doComplete ( ) { if ( getContentProvider ( ) . isDisposed ( ) ) return ; if ( ! isCanceled ( ) & & ( getStatus ( ) = = null | | getStatus ( ) . isOK ( ) ) ) { fDelta . setElement ( getMemento ( ) ) ; } fManager . requestComplete ( ElementMementoRequest . this ) ; } @Override public String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( <str> ) ; buf . append ( getElement ( ) ) ; return buf . toString ( ) ; } } 

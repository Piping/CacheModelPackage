package org . nd4j . linalg . fft ; import org . junit . Ignore ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ops . impl . transforms . VectorFFT ; import org . nd4j . linalg . api . ops . impl . transforms . VectorIFFT ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . fft . FFT ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; @Ignore public class IFFTTests extends BaseNd4jTest { public IFFTTests ( Nd4jBackend backend ) { super ( backend ) ; } public IFFTTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public IFFTTests ( String name ) { super ( name ) ; } public IFFTTests ( ) { super ( ) ; } @Test public void testIfft ( ) { Nd4j . EPS_THRESHOLD = <float> ; double [ ] ffted = { <float> , <float> , - <float> , - <float> } ; double [ ] orig = { <float> , <int> , <float> , <int> } ; IComplexNDArray c = Nd4j . createComplex ( orig , new int [ ] { <int> , <int> } ) ; IComplexNDArray assertion = Nd4j . createComplex ( ffted , new int [ ] { <int> , <int> } ) ; assertEquals ( getFailureMessage ( ) , assertion , Nd4j . getFFt ( ) . fft ( c . dup ( ) , <int> ) ) ; IComplexNDArray iffted = Nd4j . getFFt ( ) . ifft ( Nd4j . getFFt ( ) . fft ( c . dup ( ) , <int> ) , <int> ) ; assertEquals ( getFailureMessage ( ) , iffted , c ) ; } @Override public char ordering ( ) { return <str> ; } } 

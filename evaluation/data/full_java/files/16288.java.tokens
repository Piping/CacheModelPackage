package org . gradle . foundation ; import junit . framework . TestCase ; import org . dom4j . Document ; import org . dom4j . DocumentHelper ; import org . dom4j . Element ; import org . gradle . gradleplugin . foundation . Dom4JUtility ; import org . gradle . gradleplugin . foundation . settings . DOM4JSettingsNode ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import java . util . List ; public class DOM4JSettingsNodeTest extends TestCase { private DOM4JSettingsNode rootNode ; private Element rootElement ; private static final String SAMPLE_NAME_1 = <str> ; private static final String SAMPLE_NAME_2 = <str> ; private static final String SAMPLE_NAME_3 = <str> ; @Override protected void setUp ( ) throws Exception { Document document = DocumentHelper . createDocument ( ) ; rootElement = document . addElement ( <str> ) ; rootNode = new DOM4JSettingsNode ( rootElement ) ; } public void testAddChild ( ) { assertNull ( rootElement . element ( SAMPLE_NAME_1 ) ) ; assertNull ( rootNode . getChildNode ( SAMPLE_NAME_1 ) ) ; SettingsNode settingsNode = rootNode . addChild ( SAMPLE_NAME_1 ) ; assertNotNull ( settingsNode ) ; assertNotNull ( Dom4JUtility . getChild ( rootElement , DOM4JSettingsNode . TAG_NAME , DOM4JSettingsNode . NAME_ATTRIBUTE , SAMPLE_NAME_1 ) ) ; assertNotNull ( rootNode . getChildNode ( SAMPLE_NAME_1 ) ) ; } public void testAddingChildrenIfNotPresent ( ) { assertNull ( rootElement . element ( SAMPLE_NAME_1 ) ) ; assertNull ( rootNode . getChildNode ( SAMPLE_NAME_1 ) ) ; SettingsNode settingsNode = rootNode . addChildIfNotPresent ( SAMPLE_NAME_1 ) ; assertNotNull ( settingsNode ) ; assertNotNull ( Dom4JUtility . getChild ( rootElement , DOM4JSettingsNode . TAG_NAME , DOM4JSettingsNode . NAME_ATTRIBUTE , SAMPLE_NAME_1 ) ) ; assertNotNull ( rootNode . getChildNode ( SAMPLE_NAME_1 ) ) ; } public void testAddingChildrenIfNotPresent2 ( ) { rootNode . addChild ( SAMPLE_NAME_1 ) ; assertNotNull ( Dom4JUtility . getChild ( rootElement , DOM4JSettingsNode . TAG_NAME , DOM4JSettingsNode . NAME_ATTRIBUTE , SAMPLE_NAME_1 ) ) ; assertNotNull ( rootNode . getChildNode ( SAMPLE_NAME_1 ) ) ; List list = Dom4JUtility . getChildren ( rootElement , DOM4JSettingsNode . TAG_NAME , DOM4JSettingsNode . NAME_ATTRIBUTE , SAMPLE_NAME_1 ) ; assertEquals ( <int> , list . size ( ) ) ; SettingsNode settingsNode = rootNode . addChildIfNotPresent ( SAMPLE_NAME_1 ) ; assertNotNull ( settingsNode ) ; assertNotNull ( Dom4JUtility . getChildren ( rootElement , DOM4JSettingsNode . TAG_NAME , DOM4JSettingsNode . NAME_ATTRIBUTE , SAMPLE_NAME_1 ) ) ; assertNotNull ( rootNode . getChildNode ( SAMPLE_NAME_1 ) ) ; list = Dom4JUtility . getChildren ( rootElement , DOM4JSettingsNode . TAG_NAME , DOM4JSettingsNode . NAME_ATTRIBUTE , SAMPLE_NAME_1 ) ; assertEquals ( <int> , list . size ( ) ) ; } public void testGetChildNode ( ) { SettingsNode childNode1 = rootNode . addChild ( SAMPLE_NAME_1 ) ; SettingsNode childNode2 = rootNode . addChild ( SAMPLE_NAME_2 ) ; SettingsNode childNode3 = rootNode . addChild ( SAMPLE_NAME_3 ) ; SettingsNode childNode4 = rootNode . addChild ( SAMPLE_NAME_2 ) ; assertNotNull ( Dom4JUtility . getChild ( rootElement , DOM4JSettingsNode . TAG_NAME , DOM4JSettingsNode . NAME_ATTRIBUTE , SAMPLE_NAME_1 ) ) ; assertNotNull ( Dom4JUtility . getChild ( rootElement , DOM4JSettingsNode . TAG_NAME , DOM4JSettingsNode . NAME_ATTRIBUTE , SAMPLE_NAME_2 ) ) ; assertNotNull ( Dom4JUtility . getChild ( rootElement , DOM4JSettingsNode . TAG_NAME , DOM4JSettingsNode . NAME_ATTRIBUTE , SAMPLE_NAME_3 ) ) ; assertNotNull ( rootNode . getChildNode ( SAMPLE_NAME_1 ) ) ; assertNotNull ( rootNode . getChildNode ( SAMPLE_NAME_2 ) ) ; assertNotNull ( rootNode . getChildNode ( SAMPLE_NAME_3 ) ) ; SettingsNode foundNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertEquals ( foundNode1 , childNode1 ) ; SettingsNode foundNode2 = rootNode . getChildNode ( SAMPLE_NAME_2 ) ; assertEquals ( foundNode2 , childNode2 ) ; SettingsNode foundNode3 = rootNode . getChildNode ( SAMPLE_NAME_3 ) ; assertEquals ( foundNode3 , childNode3 ) ; SettingsNode foundNode2B = rootNode . getChildNode ( SAMPLE_NAME_2 ) ; assertEquals ( foundNode2B , childNode2 ) ; SettingsNode foundNode4 = rootNode . getChildNode ( <str> ) ; assertNull ( foundNode4 ) ; } public void testGetChildNodes ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; SettingsNode childNode1 = rootNode . addChild ( SAMPLE_NAME_1 ) ; SettingsNode childNode2 = rootNode . addChild ( SAMPLE_NAME_2 ) ; SettingsNode childNode3 = rootNode . addChild ( SAMPLE_NAME_3 ) ; SettingsNode childNode4 = rootNode . addChild ( SAMPLE_NAME_2 ) ; children = rootNode . getChildNodes ( ) ; TestUtility . assertListContents ( children , childNode1 , childNode2 , childNode3 , childNode4 ) ; SettingsNode childNode5 = rootNode . addChild ( SAMPLE_NAME_1 ) ; SettingsNode childNode6 = rootNode . addChild ( SAMPLE_NAME_2 ) ; children = rootNode . getChildNodes ( ) ; TestUtility . assertListContents ( children , childNode1 , childNode2 , childNode3 , childNode4 , childNode5 , childNode6 ) ; } public void testGetChildNodesByName ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; SettingsNode childNode1 = rootNode . addChild ( SAMPLE_NAME_1 ) ; SettingsNode childNode2 = rootNode . addChild ( SAMPLE_NAME_2 ) ; SettingsNode childNode3 = rootNode . addChild ( SAMPLE_NAME_3 ) ; SettingsNode childNode4 = rootNode . addChild ( SAMPLE_NAME_2 ) ; children = rootNode . getChildNodes ( SAMPLE_NAME_2 ) ; TestUtility . assertListContents ( children , childNode2 , childNode4 ) ; SettingsNode childNode5 = rootNode . addChild ( SAMPLE_NAME_1 ) ; SettingsNode childNode6 = rootNode . addChild ( SAMPLE_NAME_2 ) ; children = rootNode . getChildNodes ( SAMPLE_NAME_2 ) ; TestUtility . assertListContents ( children , childNode2 , childNode4 , childNode6 ) ; } public void testName ( ) { SettingsNode childNode1 = rootNode . addChild ( SAMPLE_NAME_1 ) ; assertEquals ( SAMPLE_NAME_1 , childNode1 . getName ( ) ) ; childNode1 . setName ( SAMPLE_NAME_3 ) ; assertEquals ( SAMPLE_NAME_3 , childNode1 . getName ( ) ) ; } public void testValue ( ) { SettingsNode childNode1 = rootNode . addChild ( SAMPLE_NAME_1 ) ; assertNull ( childNode1 . getValue ( ) ) ; childNode1 . setValue ( <str> ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; childNode1 . setValue ( <str> ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; } public void testRemoveFromParent ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; SettingsNode childNode1 = rootNode . addChild ( SAMPLE_NAME_1 ) ; SettingsNode childNode2 = rootNode . addChild ( SAMPLE_NAME_2 ) ; SettingsNode childNode3 = rootNode . addChild ( SAMPLE_NAME_3 ) ; SettingsNode childNode4 = rootNode . addChild ( SAMPLE_NAME_2 ) ; children = rootNode . getChildNodes ( ) ; TestUtility . assertListContents ( children , childNode1 , childNode2 , childNode3 , childNode4 ) ; childNode2 . setValue ( <str> ) ; childNode4 . setValue ( <str> ) ; childNode2 . removeFromParent ( ) ; children = rootNode . getChildNodes ( ) ; TestUtility . assertListContents ( children , childNode1 , childNode3 , childNode4 ) ; SettingsNode foundNode = rootNode . getChildNode ( SAMPLE_NAME_2 ) ; assertEquals ( <str> , foundNode . getValue ( ) ) ; childNode3 . removeFromParent ( ) ; children = rootNode . getChildNodes ( ) ; TestUtility . assertListContents ( children , childNode1 , childNode4 ) ; childNode1 . removeFromParent ( ) ; children = rootNode . getChildNodes ( ) ; TestUtility . assertListContents ( children , childNode4 ) ; childNode4 . removeFromParent ( ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; childNode3 . removeFromParent ( ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; assertNull ( rootNode . getChildNode ( SAMPLE_NAME_1 ) ) ; assertNull ( rootNode . getChildNode ( SAMPLE_NAME_2 ) ) ; assertNull ( rootNode . getChildNode ( SAMPLE_NAME_3 ) ) ; assertEquals ( <int> , rootElement . elements ( ) . size ( ) ) ; } public void testRemoveAllChildren ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; SettingsNode childNode1 = rootNode . addChild ( SAMPLE_NAME_1 ) ; SettingsNode childNode2 = rootNode . addChild ( SAMPLE_NAME_2 ) ; SettingsNode childNode3 = rootNode . addChild ( SAMPLE_NAME_3 ) ; SettingsNode childNode4 = rootNode . addChild ( SAMPLE_NAME_2 ) ; children = rootNode . getChildNodes ( ) ; TestUtility . assertListContents ( children , childNode1 , childNode2 , childNode3 , childNode4 ) ; rootNode . removeAllChildren ( ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; assertNull ( rootNode . getChildNode ( SAMPLE_NAME_1 ) ) ; assertNull ( rootNode . getChildNode ( SAMPLE_NAME_2 ) ) ; assertNull ( rootNode . getChildNode ( SAMPLE_NAME_3 ) ) ; assertEquals ( <int> , rootElement . elements ( ) . size ( ) ) ; } public void testGetNodeAtPath ( ) { SettingsNode childNode1 = rootNode . addChild ( SAMPLE_NAME_1 ) ; SettingsNode grandChildNodeA1 = childNode1 . addChild ( <str> ) ; SettingsNode greatGrandChildNodeA11 = grandChildNodeA1 . addChild ( <str> ) ; SettingsNode greatGrandChildNodeA12 = grandChildNodeA1 . addChild ( <str> ) ; SettingsNode grandChildNodeA2 = childNode1 . addChild ( <str> ) ; SettingsNode greatGrandChildNodeA21 = grandChildNodeA2 . addChild ( <str> ) ; SettingsNode greatGrandChildNodeA22 = grandChildNodeA2 . addChild ( <str> ) ; SettingsNode childNode2 = rootNode . addChild ( SAMPLE_NAME_2 ) ; SettingsNode grandChildNodeB1 = childNode2 . addChild ( <str> ) ; SettingsNode greatGrandChildNodeB11 = grandChildNodeB1 . addChild ( <str> ) ; SettingsNode greatGrandChildNodeB12 = grandChildNodeB1 . addChild ( <str> ) ; SettingsNode grandChildNodeB2 = childNode2 . addChild ( <str> ) ; SettingsNode childNode3 = rootNode . addChild ( SAMPLE_NAME_3 ) ; SettingsNode foundNode1 = rootNode . getNodeAtPath ( SAMPLE_NAME_1 , <str> , <str> ) ; assertEquals ( greatGrandChildNodeA22 , foundNode1 ) ; SettingsNode foundNode2 = childNode2 . getNodeAtPath ( <str> , <str> ) ; assertEquals ( greatGrandChildNodeB11 , foundNode2 ) ; SettingsNode foundNode3 = rootNode . getNodeAtPath ( <str> , <str> , <str> ) ; assertNull ( foundNode3 ) ; SettingsNode foundNode4 = rootNode . getNodeAtPath ( SAMPLE_NAME_3 , <str> , <str> ) ; assertNull ( foundNode4 ) ; SettingsNode foundNode5 = rootNode . getNodeAtPath ( SAMPLE_NAME_2 , <str> , <str> ) ; assertNull ( foundNode5 ) ; SettingsNode foundNode6 = rootNode . getNodeAtPath ( SAMPLE_NAME_3 ) ; assertEquals ( childNode3 , foundNode6 ) ; } public void testSetValueOfChild ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChild ( SAMPLE_NAME_1 , <str> ) ; SettingsNode childNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertNotNull ( childNode1 ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChild ( SAMPLE_NAME_1 , <str> ) ; childNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertNotNull ( childNode1 ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; } public void testGetValueOfChild ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChild ( SAMPLE_NAME_1 , <str> ) ; rootNode . setValueOfChild ( SAMPLE_NAME_2 , <str> ) ; rootNode . setValueOfChild ( SAMPLE_NAME_3 , <str> ) ; assertEquals ( <str> , rootNode . getValueOfChild ( SAMPLE_NAME_2 , <str> ) ) ; assertEquals ( <str> , rootNode . getValueOfChild ( SAMPLE_NAME_1 , <str> ) ) ; assertEquals ( <str> , rootNode . getValueOfChild ( SAMPLE_NAME_3 , <str> ) ) ; assertEquals ( <str> , rootNode . getValueOfChild ( <str> , <str> ) ) ; SettingsNode lastNode = rootNode . addChild ( <str> ) ; assertNull ( lastNode . getValue ( ) ) ; assertEquals ( <str> , rootNode . getValueOfChild ( <str> , <str> ) ) ; } public void testSetValueOfChildAsInt ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChildAsInt ( SAMPLE_NAME_1 , <int> ) ; SettingsNode childNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertNotNull ( childNode1 ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChildAsInt ( SAMPLE_NAME_1 , <int> ) ; childNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertNotNull ( childNode1 ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; } public void testGetValueOfChildAsInt ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChild ( SAMPLE_NAME_1 , <str> ) ; rootNode . setValueOfChild ( SAMPLE_NAME_2 , <str> ) ; rootNode . setValueOfChild ( SAMPLE_NAME_3 , <str> ) ; assertEquals ( <int> , rootNode . getValueOfChildAsInt ( SAMPLE_NAME_2 , <int> ) ) ; assertEquals ( <int> , rootNode . getValueOfChildAsInt ( SAMPLE_NAME_1 , <int> ) ) ; assertEquals ( <int> , rootNode . getValueOfChildAsInt ( SAMPLE_NAME_3 , <int> ) ) ; assertEquals ( <int> , rootNode . getValueOfChildAsInt ( <str> , <int> ) ) ; SettingsNode valuelessNode = rootNode . addChild ( <str> ) ; assertNull ( valuelessNode . getValue ( ) ) ; assertEquals ( <int> , rootNode . getValueOfChildAsInt ( <str> , <int> ) ) ; SettingsNode illegalNode = rootNode . addChild ( <str> ) ; illegalNode . setValue ( <str> ) ; assertEquals ( <int> , rootNode . getValueOfChildAsInt ( <str> , <int> ) ) ; } public void testSetValueOfChildAsLong ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChildAsLong ( SAMPLE_NAME_1 , <int> ) ; SettingsNode childNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertNotNull ( childNode1 ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChildAsLong ( SAMPLE_NAME_1 , <int> ) ; childNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertNotNull ( childNode1 ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; } public void testGetValueOfChildAsLong ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChild ( SAMPLE_NAME_1 , <str> ) ; rootNode . setValueOfChild ( SAMPLE_NAME_2 , <str> ) ; rootNode . setValueOfChild ( SAMPLE_NAME_3 , <str> ) ; assertEquals ( <int> , rootNode . getValueOfChildAsLong ( SAMPLE_NAME_2 , <int> ) ) ; assertEquals ( <int> , rootNode . getValueOfChildAsLong ( SAMPLE_NAME_1 , <int> ) ) ; assertEquals ( <int> , rootNode . getValueOfChildAsLong ( SAMPLE_NAME_3 , <int> ) ) ; assertEquals ( <int> , rootNode . getValueOfChildAsLong ( <str> , <int> ) ) ; SettingsNode valuelessNode = rootNode . addChild ( <str> ) ; assertNull ( valuelessNode . getValue ( ) ) ; assertEquals ( <int> , rootNode . getValueOfChildAsLong ( <str> , <int> ) ) ; SettingsNode illegalNode = rootNode . addChild ( <str> ) ; illegalNode . setValue ( <str> ) ; assertEquals ( <int> , rootNode . getValueOfChildAsLong ( <str> , <int> ) ) ; } public void testSetValueOfChildAsBoolean ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChildAsBoolean ( SAMPLE_NAME_1 , true ) ; SettingsNode childNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertNotNull ( childNode1 ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChildAsBoolean ( SAMPLE_NAME_1 , false ) ; childNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertNotNull ( childNode1 ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChildAsBoolean ( SAMPLE_NAME_1 , false ) ; childNode1 = rootNode . getChildNode ( SAMPLE_NAME_1 ) ; assertNotNull ( childNode1 ) ; assertEquals ( <str> , childNode1 . getValue ( ) ) ; children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; } public void testGetValueOfChildAsBoolean ( ) { List < SettingsNode > children = rootNode . getChildNodes ( ) ; assertEquals ( <int> , children . size ( ) ) ; rootNode . setValueOfChild ( SAMPLE_NAME_1 , <str> ) ; rootNode . setValueOfChild ( SAMPLE_NAME_2 , <str> ) ; rootNode . setValueOfChild ( SAMPLE_NAME_3 , <str> ) ; assertEquals ( false , rootNode . getValueOfChildAsBoolean ( SAMPLE_NAME_2 , true ) ) ; assertEquals ( true , rootNode . getValueOfChildAsBoolean ( SAMPLE_NAME_1 , false ) ) ; assertEquals ( true , rootNode . getValueOfChildAsBoolean ( SAMPLE_NAME_3 , false ) ) ; assertEquals ( true , rootNode . getValueOfChildAsBoolean ( <str> , true ) ) ; assertEquals ( false , rootNode . getValueOfChildAsBoolean ( <str> , false ) ) ; SettingsNode valuelessNode = rootNode . addChild ( <str> ) ; assertNull ( valuelessNode . getValue ( ) ) ; assertEquals ( true , rootNode . getValueOfChildAsBoolean ( <str> , true ) ) ; assertEquals ( false , rootNode . getValueOfChildAsBoolean ( <str> , false ) ) ; SettingsNode illegalNode = rootNode . addChild ( <str> ) ; illegalNode . setValue ( <str> ) ; assertEquals ( true , rootNode . getValueOfChildAsBoolean ( <str> , true ) ) ; assertEquals ( false , rootNode . getValueOfChildAsBoolean ( <str> , false ) ) ; } } 

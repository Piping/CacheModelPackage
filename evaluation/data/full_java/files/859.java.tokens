package org . apache . cassandra . repair ; import java . net . InetAddress ; import java . util . Map ; import com . google . common . util . concurrent . AbstractFuture ; import org . apache . cassandra . dht . Range ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . exceptions . RepairException ; import org . apache . cassandra . net . MessagingService ; import org . apache . cassandra . repair . messages . ValidationRequest ; import org . apache . cassandra . utils . MerkleTree ; import org . apache . cassandra . utils . MerkleTrees ; public class ValidationTask extends AbstractFuture < TreeResponse > implements Runnable { private final RepairJobDesc desc ; private final InetAddress endpoint ; private final int gcBefore ; public ValidationTask ( RepairJobDesc desc , InetAddress endpoint , int gcBefore ) { this . desc = desc ; this . endpoint = endpoint ; this . gcBefore = gcBefore ; } public void run ( ) { ValidationRequest request = new ValidationRequest ( desc , gcBefore ) ; MessagingService . instance ( ) . sendOneWay ( request . createMessage ( ) , endpoint ) ; } public void treesReceived ( MerkleTrees trees ) { if ( trees = = null ) { setException ( new RepairException ( desc , <str> + endpoint ) ) ; } else { set ( new TreeResponse ( endpoint , trees ) ) ; } } } 

package org . eclipse . debug . ui ; import java . util . ArrayList ; import java . util . Arrays ; import org . eclipse . core . variables . IDynamicVariable ; import org . eclipse . core . variables . IStringVariable ; import org . eclipse . core . variables . VariablesPlugin ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . internal . ui . preferences . StringVariablePreferencePage ; import org . eclipse . debug . internal . ui . stringsubstitution . StringSubstitutionMessages ; import org . eclipse . debug . internal . ui . stringsubstitution . StringVariableLabelProvider ; import org . eclipse . debug . internal . ui . stringsubstitution . StringVariablePresentationManager ; import org . eclipse . debug . ui . stringsubstitution . IArgumentSelector ; import org . eclipse . jface . dialogs . IDialogSettings ; import org . eclipse . jface . preference . IPreferenceNode ; import org . eclipse . jface . preference . PreferenceDialog ; import org . eclipse . jface . preference . PreferenceManager ; import org . eclipse . jface . preference . PreferenceNode ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . SWT ; import org . eclipse . swt . custom . BusyIndicator ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . ElementListSelectionDialog ; public class StringVariableSelectionDialog extends ElementListSelectionDialog { private Button fArgumentButton ; private Text fDescriptionText ; private Text fArgumentText ; private String fArgumentValue ; private Button fShowAllButton ; private Label fShowAllDescription ; public static class VariableFilter { public boolean isFiltered ( IDynamicVariable var ) { return false ; } } private ArrayList < VariableFilter > fFilters = new ArrayList < VariableFilter > ( ) ; private boolean fShowAllSelected = false ; public StringVariableSelectionDialog ( Shell parent ) { super ( parent , new StringVariableLabelProvider ( ) ) ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; setTitle ( StringSubstitutionMessages . StringVariableSelectionDialog_2 ) ; setMessage ( StringSubstitutionMessages . StringVariableSelectionDialog_3 ) ; setMultipleSelection ( false ) ; setElements ( VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) . getVariables ( ) ) ; } public String getVariableExpression ( ) { Object [ ] selected = getResult ( ) ; if ( selected ! = null & & selected . length = = <int> ) { IStringVariable variable = ( IStringVariable ) selected [ <int> ] ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( <str> ) ; buffer . append ( variable . getName ( ) ) ; if ( fArgumentValue ! = null & & fArgumentValue . length ( ) > <int> ) { buffer . append ( <str> ) ; buffer . append ( fArgumentValue ) ; } buffer . append ( <str> ) ; return buffer . toString ( ) ; } return null ; } public void addVariableFilter ( VariableFilter filter ) { if ( ! fFilters . contains ( filter ) ) { fFilters . add ( filter ) ; } } public void setFilters ( VariableFilter [ ] filters ) { fFilters . clear ( ) ; if ( filters ! = null & & filters . length > <int> ) { fFilters . addAll ( Arrays . asList ( filters ) ) ; } } private void updateElements ( ) { final Display display = DebugUIPlugin . getStandardDisplay ( ) ; BusyIndicator . showWhile ( display , new Runnable ( ) { @Override public void run ( ) { final IStringVariable [ ] elements = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) . getVariables ( ) ; display . asyncExec ( new Runnable ( ) { @Override public void run ( ) { setListElements ( elements ) ; } } ) ; } } ) ; } private void updateDescription ( ) { if ( ( fShowAllDescription ! = null ) & & ! fShowAllDescription . isDisposed ( ) ) { if ( fShowAllSelected ) { fShowAllDescription . setText ( StringSubstitutionMessages . StringVariableSelectionDialog_11 ) ; } else { fShowAllDescription . setText ( StringSubstitutionMessages . StringVariableSelectionDialog_10 ) ; } } } @Override protected void setListElements ( Object [ ] elements ) { ArrayList < Object > filtered = new ArrayList < Object > ( ) ; filtered . addAll ( Arrays . asList ( elements ) ) ; if ( ! fFilters . isEmpty ( ) & & ! fShowAllSelected ) { for ( int i = <int> ; i < elements . length ; i + + ) { if ( elements [ i ] instanceof IDynamicVariable ) { boolean bFiltered = false ; for ( int j = <int> ; ( j < fFilters . size ( ) ) & & ! bFiltered ; j + + ) { VariableFilter filter = fFilters . get ( j ) ; if ( filter . isFiltered ( ( IDynamicVariable ) elements [ i ] ) ) { filtered . remove ( elements [ i ] ) ; bFiltered = true ; } } } } } super . setListElements ( filtered . toArray ( ) ) ; } @Override protected Control createContents ( Composite parent ) { Control ctrl = super . createContents ( parent ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( ctrl , IDebugHelpContextIds . VARIABLE_SELECTION_DIALOG ) ; return ctrl ; } @Override protected Control createDialogArea ( Composite parent ) { Control control = super . createDialogArea ( parent ) ; createArgumentArea ( ( Composite ) control ) ; return control ; } private void createArgumentArea ( Composite parent ) { Composite container = SWTFactory . createComposite ( parent , parent . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL , <int> , <int> ) ; Composite btnContainer = SWTFactory . createComposite ( container , parent . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL , <int> , <int> ) ; boolean bNeedShowAll = false ; if ( ! fFilters . isEmpty ( ) ) { Object [ ] elements = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) . getVariables ( ) ; for ( int i = <int> ; ( i < elements . length ) & & ! bNeedShowAll ; i + + ) { if ( elements [ i ] instanceof IDynamicVariable ) { for ( int j = <int> ; ( j < fFilters . size ( ) ) & & ! bNeedShowAll ; j + + ) { VariableFilter filter = fFilters . get ( j ) ; if ( filter . isFiltered ( ( IDynamicVariable ) elements [ i ] ) ) { bNeedShowAll = true ; } } } } } if ( bNeedShowAll ) { fShowAllDescription = SWTFactory . createLabel ( btnContainer , <str> , <int> ) ; updateDescription ( ) ; fShowAllButton = SWTFactory . createCheckButton ( btnContainer , StringSubstitutionMessages . StringVariableSelectionDialog_9 , null , fShowAllSelected , <int> ) ; fShowAllButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { fShowAllSelected = fShowAllButton . getSelection ( ) ; updateDescription ( ) ; updateElements ( ) ; } } ) ; SWTFactory . createHorizontalSpacer ( btnContainer , <int> ) ; } else { SWTFactory . createHorizontalSpacer ( btnContainer , <int> ) ; } Button editButton = SWTFactory . createPushButton ( btnContainer , StringSubstitutionMessages . StringVariableSelectionDialog_0 , null , GridData . HORIZONTAL_ALIGN_END ) ; editButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { editVariables ( ) ; } } ) ; SWTFactory . createWrapLabel ( container , StringSubstitutionMessages . StringVariableSelectionDialog_6 , <int> ) ; Composite args = SWTFactory . createComposite ( container , container . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL , <int> , <int> ) ; fArgumentText = new Text ( args , SWT . BORDER ) ; fArgumentText . setFont ( container . getFont ( ) ) ; fArgumentText . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; fArgumentButton = SWTFactory . createPushButton ( args , StringSubstitutionMessages . StringVariableSelectionDialog_7 , null ) ; fArgumentButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { configureArgument ( ) ; } } ) ; SWTFactory . createWrapLabel ( container , StringSubstitutionMessages . StringVariableSelectionDialog_8 , <int> ) ; fDescriptionText = new Text ( container , SWT . BORDER | SWT . WRAP | SWT . V_SCROLL ) ; fDescriptionText . setFont ( container . getFont ( ) ) ; fDescriptionText . setEditable ( false ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; gd . heightHint = <int> ; fDescriptionText . setLayoutData ( gd ) ; } protected void editVariables ( ) { final Display display = DebugUIPlugin . getStandardDisplay ( ) ; BusyIndicator . showWhile ( display , new Runnable ( ) { @Override public void run ( ) { if ( showVariablesPage ( ) ) { final IStringVariable [ ] elements = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) . getVariables ( ) ; display . asyncExec ( new Runnable ( ) { @Override public void run ( ) { setListElements ( elements ) ; } } ) ; } } } ) ; } private boolean showVariablesPage ( ) { StringVariablePreferencePage page = new StringVariablePreferencePage ( ) ; page . setTitle ( StringSubstitutionMessages . StringVariableSelectionDialog_1 ) ; final IPreferenceNode targetNode = new PreferenceNode ( <str> , page ) ; PreferenceManager manager = new PreferenceManager ( ) ; manager . addToRoot ( targetNode ) ; final PreferenceDialog dialog = new PreferenceDialog ( DebugUIPlugin . getShell ( ) , manager ) ; final boolean [ ] result = new boolean [ ] { false } ; BusyIndicator . showWhile ( DebugUIPlugin . getStandardDisplay ( ) , new Runnable ( ) { @Override public void run ( ) { dialog . create ( ) ; dialog . setMessage ( targetNode . getLabelText ( ) ) ; result [ <int> ] = ( dialog . open ( ) = = Window . OK ) ; } } ) ; return result [ <int> ] ; } protected void configureArgument ( ) { Object [ ] objects = getSelectedElements ( ) ; IStringVariable variable = ( IStringVariable ) objects [ <int> ] ; IArgumentSelector selector = StringVariablePresentationManager . getDefault ( ) . getArgumentSelector ( variable ) ; String value = selector . selectArgument ( variable , getShell ( ) ) ; if ( value ! = null ) { fArgumentText . setText ( value ) ; } } @Override protected void handleSelectionChanged ( ) { super . handleSelectionChanged ( ) ; Object [ ] objects = getSelectedElements ( ) ; boolean buttonEnabled = false ; boolean argEnabled = false ; String text = null ; if ( objects . length = = <int> ) { IStringVariable variable = ( IStringVariable ) objects [ <int> ] ; IArgumentSelector selector = StringVariablePresentationManager . getDefault ( ) . getArgumentSelector ( variable ) ; if ( variable instanceof IDynamicVariable ) { argEnabled = ( ( IDynamicVariable ) variable ) . supportsArgument ( ) ; } buttonEnabled = argEnabled & & selector ! = null ; text = variable . getDescription ( ) ; } if ( text = = null ) { text = IInternalDebugCoreConstants . EMPTY_STRING ; } fArgumentText . setEnabled ( argEnabled ) ; fArgumentButton . setEnabled ( buttonEnabled ) ; fDescriptionText . setText ( text ) ; } @Override protected void okPressed ( ) { fArgumentValue = fArgumentText . getText ( ) . trim ( ) ; super . okPressed ( ) ; } private String getDialogSettingsSectionName ( ) { return IDebugUIConstants . PLUGIN_ID + <str> ; } @Override protected IDialogSettings getDialogBoundsSettings ( ) { IDialogSettings settings = DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) ; IDialogSettings section = settings . getSection ( getDialogSettingsSectionName ( ) ) ; if ( section = = null ) { section = settings . addNewSection ( getDialogSettingsSectionName ( ) ) ; } return section ; } } 

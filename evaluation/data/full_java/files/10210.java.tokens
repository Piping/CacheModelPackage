package com . google . common . hash ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import com . google . common . hash . HashFunction ; import com . google . common . hash . Hashing ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . util . Random ; public class MessageDigestAlgorithmBenchmark { @Param ( { <str> , <str> , <str> , <str> } ) int size ; @Param Algorithm algorithm ; @Param HashMethod hashMethod ; private enum HashMethod { MESSAGE_DIGEST_API ( ) { @Override public byte [ ] hash ( Algorithm algorithm , byte [ ] input ) { MessageDigest md = algorithm . getMessageDigest ( ) ; md . update ( input ) ; return md . digest ( ) ; } } , HASH_FUNCTION_API ( ) { @Override public byte [ ] hash ( Algorithm algorithm , byte [ ] input ) { return algorithm . getHashFunction ( ) . hashBytes ( input ) . asBytes ( ) ; } } ; public abstract byte [ ] hash ( Algorithm algorithm , byte [ ] input ) ; } private enum Algorithm { MD5 ( <str> , Hashing . md5 ( ) ) , SHA_1 ( <str> , Hashing . sha1 ( ) ) , SHA_256 ( <str> , Hashing . sha256 ( ) ) , SHA_384 ( <str> , Hashing . sha384 ( ) ) , SHA_512 ( <str> , Hashing . sha512 ( ) ) ; private final String algorithmName ; private final HashFunction hashFn ; Algorithm ( String algorithmName , HashFunction hashFn ) { this . algorithmName = algorithmName ; this . hashFn = hashFn ; } public MessageDigest getMessageDigest ( ) { try { return MessageDigest . getInstance ( algorithmName ) ; } catch ( NoSuchAlgorithmException e ) { throw new AssertionError ( e ) ; } } public HashFunction getHashFunction ( ) { return hashFn ; } } private static final int RANDOM_SEED = new Random ( ) . nextInt ( ) ; private byte [ ] testBytes ; @BeforeExperiment void setUp ( ) { testBytes = new byte [ size ] ; new Random ( RANDOM_SEED ) . nextBytes ( testBytes ) ; } @Benchmark byte hashing ( int reps ) { byte result = <hex> ; HashMethod hashMethod = this . hashMethod ; Algorithm algorithm = this . algorithm ; for ( int i = <int> ; i < reps ; i + + ) { result ^ = hashMethod . hash ( algorithm , testBytes ) [ <int> ] ; } return result ; } } 

package org . gradle . api . internal . tasks . testing . junit ; import org . apache . commons . lang . StringUtils ; import org . junit . experimental . categories . Category ; import org . junit . runner . Description ; import org . junit . runner . manipulation . Filter ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; class CategoryFilter extends Filter { private final Set < Class < ? > > inclusions ; private final Set < Class < ? > > exclusions ; public CategoryFilter ( final Set < Class < ? > > inclusions , final Set < Class < ? > > exclusions ) { this . inclusions = inclusions ; this . exclusions = exclusions ; } @Override public boolean shouldRun ( final Description description ) { return shouldRun ( description , description . isSuite ( ) ? null : Description . createSuiteDescription ( description . getTestClass ( ) ) ) ; } private boolean shouldRun ( final Description description , final Description parent ) { final Set < Class < ? > > categories = new HashSet < Class < ? > > ( ) ; Category annotation = description . getAnnotation ( Category . class ) ; if ( annotation ! = null ) { categories . addAll ( Arrays . asList ( annotation . value ( ) ) ) ; } if ( parent ! = null ) { annotation = parent . getAnnotation ( Category . class ) ; if ( annotation ! = null ) { categories . addAll ( Arrays . asList ( annotation . value ( ) ) ) ; } } boolean result = inclusions . isEmpty ( ) ; for ( Class < ? > category : categories ) { if ( matches ( category , inclusions ) ) { result = true ; break ; } } if ( result ) { for ( Class < ? > category : categories ) { if ( matches ( category , exclusions ) ) { result = false ; break ; } } } return result ; } private boolean matches ( final Class < ? > category , final Set < Class < ? > > categories ) { for ( Class < ? > cls : categories ) { if ( cls . isAssignableFrom ( category ) ) { return true ; } } return false ; } @Override public final String describe ( ) { StringBuilder sb = new StringBuilder ( ) ; if ( ! inclusions . isEmpty ( ) ) { sb . append ( <str> ) ; sb . append ( StringUtils . join ( inclusions , <str> ) ) ; sb . append ( <str> ) ; if ( ! exclusions . isEmpty ( ) ) { sb . append ( <str> ) ; } } if ( ! exclusions . isEmpty ( ) ) { sb . append ( <str> ) ; sb . append ( StringUtils . join ( exclusions , <str> ) ) ; sb . append ( <str> ) ; } return sb . toString ( ) ; } } 

package io . netty . handler . codec . http2 ; import io . netty . handler . codec . Headers ; import io . netty . util . AsciiString ; import java . util . Iterator ; import java . util . Map . Entry ; public interface Http2Headers extends Headers < CharSequence , CharSequence , Http2Headers > { enum PseudoHeaderName { METHOD ( <str> ) , SCHEME ( <str> ) , AUTHORITY ( <str> ) , PATH ( <str> ) , STATUS ( <str> ) ; private final AsciiString value ; private static final CharSequenceMap < AsciiString > PSEUDO_HEADERS = new CharSequenceMap < AsciiString > ( ) ; static { for ( PseudoHeaderName pseudoHeader : PseudoHeaderName . values ( ) ) { PSEUDO_HEADERS . add ( pseudoHeader . value ( ) , AsciiString . EMPTY_STRING ) ; } } PseudoHeaderName ( String value ) { this . value = new AsciiString ( value ) ; } public AsciiString value ( ) { return value ; } public static boolean isPseudoHeader ( CharSequence header ) { return PSEUDO_HEADERS . contains ( header ) ; } } @Override Iterator < Entry < CharSequence , CharSequence > > iterator ( ) ; Http2Headers method ( CharSequence value ) ; Http2Headers scheme ( CharSequence value ) ; Http2Headers authority ( CharSequence value ) ; Http2Headers path ( CharSequence value ) ; Http2Headers status ( CharSequence value ) ; CharSequence method ( ) ; CharSequence scheme ( ) ; CharSequence authority ( ) ; CharSequence path ( ) ; CharSequence status ( ) ; } 

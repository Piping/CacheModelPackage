package org . elasticsearch . common ; import org . elasticsearch . test . ESTestCase ; import java . util . HashSet ; import java . util . Set ; public class UUIDTests extends ESTestCase { static UUIDGenerator timeUUIDGen = new TimeBasedUUIDGenerator ( ) ; static UUIDGenerator randomUUIDGen = new RandomBasedUUIDGenerator ( ) ; public void testRandomUUID ( ) { verifyUUIDSet ( <int> , randomUUIDGen ) ; } public void testTimeUUID ( ) { verifyUUIDSet ( <int> , timeUUIDGen ) ; } public void testThreadedTimeUUID ( ) { testUUIDThreaded ( timeUUIDGen ) ; } public void testThreadedRandomUUID ( ) { testUUIDThreaded ( randomUUIDGen ) ; } Set < String > verifyUUIDSet ( int count , UUIDGenerator uuidSource ) { HashSet < String > uuidSet = new HashSet < > ( ) ; for ( int i = <int> ; i < count ; + + i ) { uuidSet . add ( uuidSource . getBase64UUID ( ) ) ; } assertEquals ( count , uuidSet . size ( ) ) ; return uuidSet ; } class UUIDGenRunner implements Runnable { int count ; public Set < String > uuidSet = null ; UUIDGenerator uuidSource ; public UUIDGenRunner ( int count , UUIDGenerator uuidSource ) { this . count = count ; this . uuidSource = uuidSource ; } @Override public void run ( ) { uuidSet = verifyUUIDSet ( count , uuidSource ) ; } } public void testUUIDThreaded ( UUIDGenerator uuidSource ) { HashSet < UUIDGenRunner > runners = new HashSet < > ( ) ; HashSet < Thread > threads = new HashSet < > ( ) ; int count = <int> ; int uuids = <int> ; for ( int i = <int> ; i < count ; + + i ) { UUIDGenRunner runner = new UUIDGenRunner ( uuids , uuidSource ) ; Thread t = new Thread ( runner ) ; threads . add ( t ) ; runners . add ( runner ) ; } for ( Thread t : threads ) { t . start ( ) ; } boolean retry = false ; do { for ( Thread t : threads ) { try { t . join ( ) ; } catch ( InterruptedException ie ) { retry = true ; } } } while ( retry ) ; HashSet < String > globalSet = new HashSet < > ( ) ; for ( UUIDGenRunner runner : runners ) { globalSet . addAll ( runner . uuidSet ) ; } assertEquals ( count * uuids , globalSet . size ( ) ) ; } } 

package org . gradle . api . internal . tasks . testing ; import org . gradle . api . internal . initialization . ClassLoaderIds ; import org . gradle . api . internal . initialization . loadercache . ClassLoaderCache ; import org . gradle . api . tasks . testing . Test ; import org . gradle . internal . Factory ; import org . gradle . internal . classpath . DefaultClassPath ; public class TestClassLoaderFactory implements Factory < ClassLoader > { private final ClassLoaderCache classLoaderCache ; private final Test testTask ; private ClassLoader testClassLoader ; public TestClassLoaderFactory ( ClassLoaderCache classLoaderCache , Test testTask ) { this . classLoaderCache = classLoaderCache ; this . testTask = testTask ; } public ClassLoader create ( ) { if ( testClassLoader = = null ) { testClassLoader = classLoaderCache . get ( ClassLoaderIds . testTaskClasspath ( testTask . getPath ( ) ) , new DefaultClassPath ( testTask . getClasspath ( ) ) , null , null ) ; } return testClassLoader ; } } 

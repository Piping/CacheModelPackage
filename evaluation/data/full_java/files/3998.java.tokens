package org . eclipse . debug . internal . ui ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . actions . IVariableValueEditor ; public class VariableValueEditorManager { private Map < String , Object > fEditorMap = new HashMap < String , Object > ( ) ; private static VariableValueEditorManager fgManager ; private VariableValueEditorManager ( ) { loadVariableEditors ( ) ; } public static VariableValueEditorManager getDefault ( ) { if ( fgManager = = null ) { fgManager = new VariableValueEditorManager ( ) ; } return fgManager ; } public IVariableValueEditor getVariableValueEditor ( String modelIdentifier ) { Object object = fEditorMap . get ( modelIdentifier ) ; IVariableValueEditor editor = null ; if ( object instanceof IVariableValueEditor ) { editor = ( IVariableValueEditor ) object ; } else if ( object instanceof IConfigurationElement ) { try { editor = ( IVariableValueEditor ) ( ( IConfigurationElement ) object ) . createExecutableExtension ( <str> ) ; fEditorMap . put ( modelIdentifier , editor ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } return editor ; } private void loadVariableEditors ( ) { IExtensionPoint ep = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . EXTENSION_POINT_VARIABLE_VALUE_EDITORS ) ; IConfigurationElement [ ] elements = ep . getConfigurationElements ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { IConfigurationElement element = elements [ i ] ; String modelId = element . getAttribute ( <str> ) ; if ( modelId ! = null ) { fEditorMap . put ( modelId , element ) ; } } } } 

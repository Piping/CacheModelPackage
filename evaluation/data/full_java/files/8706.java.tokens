package org . elasticsearch . action . deletebyquery ; import org . elasticsearch . Version ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . VersionUtils ; import static org . hamcrest . Matchers . equalTo ; public class IndexDeleteByQueryResponseTests extends ESTestCase { public void testIncrements ( ) { String indexName = randomAsciiOfLength ( <int> ) ; long found = Math . abs ( randomInt ( ) ) ; long deleted = Math . abs ( randomInt ( ) ) ; long missing = Math . abs ( randomInt ( ) ) ; long failed = Math . abs ( randomInt ( ) ) ; IndexDeleteByQueryResponse response = new IndexDeleteByQueryResponse ( indexName , found , deleted , missing , failed ) ; assertThat ( response . getIndex ( ) , equalTo ( indexName ) ) ; assertThat ( response . getFound ( ) , equalTo ( found ) ) ; assertThat ( response . getDeleted ( ) , equalTo ( deleted ) ) ; assertThat ( response . getMissing ( ) , equalTo ( missing ) ) ; assertThat ( response . getFailed ( ) , equalTo ( failed ) ) ; response . incrementFound ( ) ; response . incrementDeleted ( ) ; response . incrementMissing ( ) ; response . incrementFailed ( ) ; assertThat ( response . getFound ( ) , equalTo ( found + <int> ) ) ; assertThat ( response . getDeleted ( ) , equalTo ( deleted + <int> ) ) ; assertThat ( response . getMissing ( ) , equalTo ( missing + <int> ) ) ; assertThat ( response . getFailed ( ) , equalTo ( failed + <int> ) ) ; long inc = randomIntBetween ( <int> , <int> ) ; response . incrementFound ( inc ) ; response . incrementDeleted ( inc ) ; response . incrementMissing ( inc ) ; response . incrementFailed ( inc ) ; assertThat ( response . getFound ( ) , equalTo ( found + <int> + inc ) ) ; assertThat ( response . getDeleted ( ) , equalTo ( deleted + <int> + inc ) ) ; assertThat ( response . getMissing ( ) , equalTo ( missing + <int> + inc ) ) ; assertThat ( response . getFailed ( ) , equalTo ( failed + <int> + inc ) ) ; } public void testNegativeCounters ( ) { assumeTrue ( <str> , assertionsEnabled ( ) ) ; try { new IndexDeleteByQueryResponse ( <str> , - <int> , <int> L , <int> L , <int> L ) ; fail ( <str> ) ; } catch ( AssertionError e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } try { new IndexDeleteByQueryResponse ( <str> , <int> L , - <int> , <int> L , <int> L ) ; fail ( <str> ) ; } catch ( AssertionError e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } try { new IndexDeleteByQueryResponse ( <str> , <int> L , <int> L , - <int> , <int> L ) ; fail ( <str> ) ; } catch ( AssertionError e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } try { new IndexDeleteByQueryResponse ( <str> , <int> L , <int> L , <int> L , - <int> ) ; fail ( <str> ) ; } catch ( AssertionError e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testNegativeIncrements ( ) { assumeTrue ( <str> , assertionsEnabled ( ) ) ; try { IndexDeleteByQueryResponse response = new IndexDeleteByQueryResponse ( ) ; response . incrementFound ( - <int> ) ; fail ( <str> ) ; } catch ( AssertionError e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } try { IndexDeleteByQueryResponse response = new IndexDeleteByQueryResponse ( ) ; response . incrementDeleted ( - <int> ) ; fail ( <str> ) ; } catch ( AssertionError e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } try { IndexDeleteByQueryResponse response = new IndexDeleteByQueryResponse ( ) ; response . incrementMissing ( - <int> ) ; fail ( <str> ) ; } catch ( AssertionError e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } try { IndexDeleteByQueryResponse response = new IndexDeleteByQueryResponse ( ) ; response . incrementFailed ( - <int> ) ; fail ( <str> ) ; } catch ( AssertionError e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testSerialization ( ) throws Exception { IndexDeleteByQueryResponse response = new IndexDeleteByQueryResponse ( randomAsciiOfLength ( <int> ) , Math . abs ( randomLong ( ) ) , Math . abs ( randomLong ( ) ) , Math . abs ( randomLong ( ) ) , Math . abs ( randomLong ( ) ) ) ; Version testVersion = VersionUtils . randomVersionBetween ( random ( ) , Version . CURRENT . minimumCompatibilityVersion ( ) , Version . CURRENT ) ; BytesStreamOutput output = new BytesStreamOutput ( ) ; output . setVersion ( testVersion ) ; response . writeTo ( output ) ; StreamInput streamInput = StreamInput . wrap ( output . bytes ( ) ) ; streamInput . setVersion ( testVersion ) ; IndexDeleteByQueryResponse deserializedResponse = new IndexDeleteByQueryResponse ( ) ; deserializedResponse . readFrom ( streamInput ) ; assertThat ( deserializedResponse . getIndex ( ) , equalTo ( response . getIndex ( ) ) ) ; assertThat ( deserializedResponse . getFound ( ) , equalTo ( response . getFound ( ) ) ) ; assertThat ( deserializedResponse . getDeleted ( ) , equalTo ( response . getDeleted ( ) ) ) ; assertThat ( deserializedResponse . getMissing ( ) , equalTo ( response . getMissing ( ) ) ) ; assertThat ( deserializedResponse . getFailed ( ) , equalTo ( response . getFailed ( ) ) ) ; } } 

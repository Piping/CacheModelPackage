package org . elasticsearch . common . component ; public class Lifecycle { public static enum State { INITIALIZED , STOPPED , STARTED , CLOSED } private volatile State state = State . INITIALIZED ; public State state ( ) { return this . state ; } public boolean initialized ( ) { return state = = State . INITIALIZED ; } public boolean started ( ) { return state = = State . STARTED ; } public boolean stopped ( ) { return state = = State . STOPPED ; } public boolean closed ( ) { return state = = State . CLOSED ; } public boolean stoppedOrClosed ( ) { Lifecycle . State state = this . state ; return state = = State . STOPPED | | state = = State . CLOSED ; } public boolean canMoveToStarted ( ) throws IllegalStateException { State localState = this . state ; if ( localState = = State . INITIALIZED | | localState = = State . STOPPED ) { return true ; } if ( localState = = State . STARTED ) { return false ; } if ( localState = = State . CLOSED ) { throw new IllegalStateException ( <str> ) ; } throw new IllegalStateException ( <str> ) ; } public boolean moveToStarted ( ) throws IllegalStateException { State localState = this . state ; if ( localState = = State . INITIALIZED | | localState = = State . STOPPED ) { state = State . STARTED ; return true ; } if ( localState = = State . STARTED ) { return false ; } if ( localState = = State . CLOSED ) { throw new IllegalStateException ( <str> ) ; } throw new IllegalStateException ( <str> ) ; } public boolean canMoveToStopped ( ) throws IllegalStateException { State localState = state ; if ( localState = = State . STARTED ) { return true ; } if ( localState = = State . INITIALIZED | | localState = = State . STOPPED ) { return false ; } if ( localState = = State . CLOSED ) { throw new IllegalStateException ( <str> ) ; } throw new IllegalStateException ( <str> ) ; } public boolean moveToStopped ( ) throws IllegalStateException { State localState = state ; if ( localState = = State . STARTED ) { state = State . STOPPED ; return true ; } if ( localState = = State . INITIALIZED | | localState = = State . STOPPED ) { return false ; } if ( localState = = State . CLOSED ) { throw new IllegalStateException ( <str> ) ; } throw new IllegalStateException ( <str> ) ; } public boolean canMoveToClosed ( ) throws IllegalStateException { State localState = state ; if ( localState = = State . CLOSED ) { return false ; } if ( localState = = State . STARTED ) { throw new IllegalStateException ( <str> ) ; } return true ; } public boolean moveToClosed ( ) throws IllegalStateException { State localState = state ; if ( localState = = State . CLOSED ) { return false ; } if ( localState = = State . STARTED ) { throw new IllegalStateException ( <str> ) ; } state = State . CLOSED ; return true ; } @Override public String toString ( ) { return state . toString ( ) ; } } 

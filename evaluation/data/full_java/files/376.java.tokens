package org . apache . cassandra . db . commitlog ; import java . io . IOException ; import java . util . Comparator ; import com . google . common . base . Function ; import com . google . common . collect . Iterables ; import com . google . common . collect . Ordering ; import org . apache . cassandra . db . TypeSizes ; import org . apache . cassandra . io . ISerializer ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . io . util . DataInputPlus ; import org . apache . cassandra . io . util . DataOutputPlus ; public class ReplayPosition implements Comparable < ReplayPosition > { public static final ReplayPositionSerializer serializer = new ReplayPositionSerializer ( ) ; public static final ReplayPosition NONE = new ReplayPosition ( - <int> , <int> ) ; public static ReplayPosition getReplayPosition ( Iterable < ? extends SSTableReader > sstables ) { if ( Iterables . isEmpty ( sstables ) ) return NONE ; Function < SSTableReader , ReplayPosition > f = new Function < SSTableReader , ReplayPosition > ( ) { public ReplayPosition apply ( SSTableReader sstable ) { return sstable . getReplayPosition ( ) ; } } ; Ordering < ReplayPosition > ordering = Ordering . from ( ReplayPosition . comparator ) ; return ordering . max ( Iterables . transform ( sstables , f ) ) ; } public final long segment ; public final int position ; public static final Comparator < ReplayPosition > comparator = new Comparator < ReplayPosition > ( ) { public int compare ( ReplayPosition o1 , ReplayPosition o2 ) { if ( o1 . segment ! = o2 . segment ) return Long . compare ( o1 . segment , o2 . segment ) ; return Integer . compare ( o1 . position , o2 . position ) ; } } ; public ReplayPosition ( long segment , int position ) { this . segment = segment ; assert position > = <int> ; this . position = position ; } public int compareTo ( ReplayPosition other ) { return comparator . compare ( this , other ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; ReplayPosition that = ( ReplayPosition ) o ; if ( position ! = that . position ) return false ; return segment = = that . segment ; } @Override public int hashCode ( ) { int result = ( int ) ( segment ^ ( segment > > > <int> ) ) ; result = <int> * result + position ; return result ; } @Override public String toString ( ) { return <str> + <str> + segment + <str> + position + <str> ; } public ReplayPosition clone ( ) { return new ReplayPosition ( segment , position ) ; } public static class ReplayPositionSerializer implements ISerializer < ReplayPosition > { public void serialize ( ReplayPosition rp , DataOutputPlus out ) throws IOException { out . writeLong ( rp . segment ) ; out . writeInt ( rp . position ) ; } public ReplayPosition deserialize ( DataInputPlus in ) throws IOException { return new ReplayPosition ( in . readLong ( ) , in . readInt ( ) ) ; } public long serializedSize ( ReplayPosition rp ) { return TypeSizes . sizeof ( rp . segment ) + TypeSizes . sizeof ( rp . position ) ; } } } 

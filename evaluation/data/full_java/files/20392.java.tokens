package io . netty . channel . unix ; import io . netty . util . internal . EmptyArrays ; import java . io . IOException ; import java . net . ConnectException ; import java . nio . channels . ClosedChannelException ; public final class Errors { public static final int ERRNO_ENOTCONN_NEGATIVE = - errnoENOTCONN ( ) ; public static final int ERRNO_EBADF_NEGATIVE = - errnoEBADF ( ) ; public static final int ERRNO_EPIPE_NEGATIVE = - errnoEPIPE ( ) ; public static final int ERRNO_ECONNRESET_NEGATIVE = - errnoECONNRESET ( ) ; public static final int ERRNO_EAGAIN_NEGATIVE = - errnoEAGAIN ( ) ; public static final int ERRNO_EWOULDBLOCK_NEGATIVE = - errnoEWOULDBLOCK ( ) ; public static final int ERRNO_EINPROGRESS_NEGATIVE = - errnoEINPROGRESS ( ) ; private static final String [ ] ERRORS = new String [ <int> ] ; static final ClosedChannelException CLOSED_CHANNEL_EXCEPTION ; static final NativeIoException CONNECTION_NOT_CONNECTED_SHUTDOWN_EXCEPTION ; static final NativeIoException CONNECTION_RESET_EXCEPTION_WRITE ; static final NativeIoException CONNECTION_RESET_EXCEPTION_WRITEV ; static final NativeIoException CONNECTION_RESET_EXCEPTION_READ ; static final NativeIoException CONNECTION_RESET_EXCEPTION_SENDTO ; static final NativeIoException CONNECTION_RESET_EXCEPTION_SENDMSG ; public static final class NativeIoException extends IOException { private static final long serialVersionUID = <int> ; private final int expectedErr ; public NativeIoException ( String method , int expectedErr ) { super ( method ) ; this . expectedErr = expectedErr ; } public int expectedErr ( ) { return expectedErr ; } } static { for ( int i = <int> ; i < ERRORS . length ; i + + ) { ERRORS [ i ] = strError ( i ) ; } CONNECTION_RESET_EXCEPTION_READ = newConnectionResetException ( <str> , ERRNO_ECONNRESET_NEGATIVE ) ; CONNECTION_RESET_EXCEPTION_WRITE = newConnectionResetException ( <str> , ERRNO_EPIPE_NEGATIVE ) ; CONNECTION_RESET_EXCEPTION_WRITEV = newConnectionResetException ( <str> , ERRNO_EPIPE_NEGATIVE ) ; CONNECTION_RESET_EXCEPTION_SENDTO = newConnectionResetException ( <str> , ERRNO_EPIPE_NEGATIVE ) ; CONNECTION_RESET_EXCEPTION_SENDMSG = newConnectionResetException ( <str> , ERRNO_EPIPE_NEGATIVE ) ; CONNECTION_NOT_CONNECTED_SHUTDOWN_EXCEPTION = newConnectionResetException ( <str> , ERRNO_ENOTCONN_NEGATIVE ) ; CLOSED_CHANNEL_EXCEPTION = new ClosedChannelException ( ) ; CLOSED_CHANNEL_EXCEPTION . setStackTrace ( EmptyArrays . EMPTY_STACK_TRACE ) ; } static ConnectException newConnectException ( String method , int err ) { return new ConnectException ( method + <str> + ERRORS [ - err ] ) ; } public static NativeIoException newConnectionResetException ( String method , int errnoNegative ) { NativeIoException exception = newIOException ( method , errnoNegative ) ; exception . setStackTrace ( EmptyArrays . EMPTY_STACK_TRACE ) ; return exception ; } public static NativeIoException newIOException ( String method , int err ) { return new NativeIoException ( method + <str> + ERRORS [ - err ] , err ) ; } public static int ioResult ( String method , int err , NativeIoException resetCause ) throws IOException { if ( err = = ERRNO_EAGAIN_NEGATIVE | | err = = ERRNO_EWOULDBLOCK_NEGATIVE ) { return <int> ; } if ( err = = resetCause . expectedErr ( ) ) { throw resetCause ; } if ( err = = ERRNO_EBADF_NEGATIVE | | err = = ERRNO_ENOTCONN_NEGATIVE ) { throw CLOSED_CHANNEL_EXCEPTION ; } throw newIOException ( method , err ) ; } private static native int errnoEBADF ( ) ; private static native int errnoEPIPE ( ) ; private static native int errnoECONNRESET ( ) ; private static native int errnoENOTCONN ( ) ; private static native int errnoEAGAIN ( ) ; private static native int errnoEWOULDBLOCK ( ) ; private static native int errnoEINPROGRESS ( ) ; private static native String strError ( int err ) ; private Errors ( ) { } } 

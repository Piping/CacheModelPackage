package org . elasticsearch . cluster . routing ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . SnapshotId ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; public class RestoreSource implements Streamable , ToXContent { private SnapshotId snapshotId ; private String index ; private Version version ; RestoreSource ( ) { } public RestoreSource ( SnapshotId snapshotId , Version version , String index ) { this . snapshotId = snapshotId ; this . version = version ; this . index = index ; } public SnapshotId snapshotId ( ) { return snapshotId ; } public String index ( ) { return index ; } public Version version ( ) { return version ; } public static RestoreSource readRestoreSource ( StreamInput in ) throws IOException { RestoreSource restoreSource = new RestoreSource ( ) ; restoreSource . readFrom ( in ) ; return restoreSource ; } public static RestoreSource readOptionalRestoreSource ( StreamInput in ) throws IOException { return in . readOptionalStreamable ( RestoreSource : : new ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { snapshotId = SnapshotId . readSnapshotId ( in ) ; version = Version . readVersion ( in ) ; index = in . readString ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { snapshotId . writeTo ( out ) ; Version . writeVersion ( version , out ) ; out . writeString ( index ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { return builder . startObject ( ) . field ( <str> , snapshotId . getRepository ( ) ) . field ( <str> , snapshotId . getSnapshot ( ) ) . field ( <str> , version . toString ( ) ) . field ( <str> , index ) . endObject ( ) ; } @Override public String toString ( ) { return snapshotId . toString ( ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; RestoreSource that = ( RestoreSource ) o ; if ( ! index . equals ( that . index ) ) return false ; if ( ! snapshotId . equals ( that . snapshotId ) ) return false ; return true ; } @Override public int hashCode ( ) { int result = snapshotId . hashCode ( ) ; result = <int> * result + index . hashCode ( ) ; return result ; } } 

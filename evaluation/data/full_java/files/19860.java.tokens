package io . netty . example . proxy ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . channel . ChannelOption ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioServerSocketChannel ; import io . netty . handler . logging . LogLevel ; import io . netty . handler . logging . LoggingHandler ; public final class HexDumpProxy { static final int LOCAL_PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; static final String REMOTE_HOST = System . getProperty ( <str> , <str> ) ; static final int REMOTE_PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; public static void main ( String [ ] args ) throws Exception { System . err . println ( <str> + LOCAL_PORT + <str> + REMOTE_HOST + <str> + REMOTE_PORT + <str> ) ; EventLoopGroup bossGroup = new NioEventLoopGroup ( <int> ) ; EventLoopGroup workerGroup = new NioEventLoopGroup ( ) ; try { ServerBootstrap b = new ServerBootstrap ( ) ; b . group ( bossGroup , workerGroup ) . channel ( NioServerSocketChannel . class ) . handler ( new LoggingHandler ( LogLevel . INFO ) ) . childHandler ( new HexDumpProxyInitializer ( REMOTE_HOST , REMOTE_PORT ) ) . childOption ( ChannelOption . AUTO_READ , false ) . bind ( LOCAL_PORT ) . sync ( ) . channel ( ) . closeFuture ( ) . sync ( ) ; } finally { bossGroup . shutdownGracefully ( ) ; workerGroup . shutdownGracefully ( ) ; } } } 

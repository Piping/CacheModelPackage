package org . elasticsearch . index . fielddata . ordinals ; import org . apache . lucene . index . DocValues ; import org . apache . lucene . index . RandomAccessOrds ; import org . apache . lucene . index . SortedDocValues ; import org . apache . lucene . util . Accountable ; import org . apache . lucene . util . Accountables ; import org . apache . lucene . util . BytesRef ; import org . apache . lucene . util . RamUsageEstimator ; import org . apache . lucene . util . packed . PackedInts ; import java . util . Collection ; import java . util . Collections ; public class SinglePackedOrdinals extends Ordinals { private final PackedInts . Reader reader ; private final int valueCount ; public SinglePackedOrdinals ( OrdinalsBuilder builder , float acceptableOverheadRatio ) { assert builder . getNumMultiValuesDocs ( ) = = <int> ; this . valueCount = ( int ) builder . getValueCount ( ) ; final PackedInts . Mutable reader = PackedInts . getMutable ( builder . maxDoc ( ) , PackedInts . bitsRequired ( valueCount ) , acceptableOverheadRatio ) ; PackedInts . copy ( builder . getFirstOrdinals ( ) , <int> , reader , <int> , builder . maxDoc ( ) , <int> * <int> ) ; this . reader = reader ; } @Override public long ramBytesUsed ( ) { return RamUsageEstimator . NUM_BYTES_OBJECT_REF + reader . ramBytesUsed ( ) ; } @Override public Collection < Accountable > getChildResources ( ) { return Collections . singleton ( Accountables . namedAccountable ( <str> , reader ) ) ; } @Override public RandomAccessOrds ordinals ( ValuesHolder values ) { return ( RandomAccessOrds ) DocValues . singleton ( new Docs ( this , values ) ) ; } private static class Docs extends SortedDocValues { private final int maxOrd ; private final PackedInts . Reader reader ; private final ValuesHolder values ; public Docs ( SinglePackedOrdinals parent , ValuesHolder values ) { this . maxOrd = parent . valueCount ; this . reader = parent . reader ; this . values = values ; } @Override public int getValueCount ( ) { return maxOrd ; } @Override public BytesRef lookupOrd ( int ord ) { return values . lookupOrd ( ord ) ; } @Override public int getOrd ( int docID ) { return ( int ) ( reader . get ( docID ) - <int> ) ; } } } 

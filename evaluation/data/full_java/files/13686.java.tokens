package org . gradle . language . nativeplatform . tasks ; import org . gradle . api . Incubating ; import org . gradle . api . tasks . Nested ; import org . gradle . api . tasks . Optional ; import org . gradle . language . nativeplatform . internal . incremental . sourceparser . DefaultInclude ; import org . gradle . nativeplatform . toolchain . internal . NativeCompileSpec ; import org . gradle . nativeplatform . toolchain . internal . PCHUtils ; import org . gradle . nativeplatform . toolchain . internal . PreCompiledHeader ; import java . io . File ; @Incubating abstract public class AbstractNativeSourceCompileTask extends AbstractNativeCompileTask { private PreCompiledHeader preCompiledHeader ; public AbstractNativeSourceCompileTask ( ) { super ( ) ; } @Override protected void configureSpec ( NativeCompileSpec spec ) { super . configureSpec ( spec ) ; if ( preCompiledHeader ! = null ) { File pchObjectFile = preCompiledHeader . getObjectFile ( ) ; File pchDir = PCHUtils . generatePCHObjectDirectory ( spec . getTempDir ( ) , preCompiledHeader . getPrefixHeaderFile ( ) , pchObjectFile ) ; spec . setPrefixHeaderFile ( new File ( pchDir , preCompiledHeader . getPrefixHeaderFile ( ) . getName ( ) ) ) ; spec . setPreCompiledHeaderObjectFile ( new File ( pchDir , pchObjectFile . getName ( ) ) ) ; spec . setPreCompiledHeader ( DefaultInclude . parse ( preCompiledHeader . getIncludeString ( ) , true ) . getValue ( ) ) ; } } @Nested @Optional public PreCompiledHeader getPreCompiledHeader ( ) { return preCompiledHeader ; } public void setPreCompiledHeader ( PreCompiledHeader preCompiledHeader ) { this . preCompiledHeader = preCompiledHeader ; } } 

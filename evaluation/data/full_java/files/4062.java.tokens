package org . eclipse . debug . internal . ui . actions . breakpoints ; import java . util . Iterator ; import org . eclipse . core . resources . IMarkerDelta ; import org . eclipse . core . resources . IWorkspaceRunnable ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . MultiStatus ; import org . eclipse . core . runtime . NullProgressMonitor ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . IBreakpointsListener ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . internal . ui . breakpoints . provisional . IBreakpointContainer ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . IPartListener ; import org . eclipse . ui . IViewActionDelegate ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchWindow ; public class EnableBreakpointsAction implements IViewActionDelegate , IPartListener , IBreakpointsListener { private IViewPart fView ; private IAction fAction ; public EnableBreakpointsAction ( ) { } protected IViewPart getView ( ) { return fView ; } protected void setView ( IViewPart view ) { fView = view ; } @Override public void init ( IViewPart view ) { setView ( view ) ; DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . addBreakpointListener ( this ) ; view . getViewSite ( ) . getPage ( ) . addPartListener ( this ) ; } protected void update ( ) { selectionChanged ( getAction ( ) , getView ( ) . getViewSite ( ) . getSelectionProvider ( ) . getSelection ( ) ) ; } protected boolean isEnableAction ( ) { return true ; } @Override public void run ( IAction action ) { IStructuredSelection selection = getSelection ( ) ; final int size = selection . size ( ) ; if ( size = = <int> ) { return ; } final Iterator < ? > itr = selection . iterator ( ) ; final MultiStatus ms = new MultiStatus ( DebugUIPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , ActionMessages . EnableBreakpointAction_Enable_breakpoint_s__failed_2 , null ) ; IWorkspaceRunnable runnable = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) { while ( itr . hasNext ( ) ) { Object element = itr . next ( ) ; try { IBreakpoint [ ] breakpoints = null ; IBreakpoint breakpoint = ( IBreakpoint ) DebugPlugin . getAdapter ( element , IBreakpoint . class ) ; if ( breakpoint ! = null ) { breakpoints = new IBreakpoint [ ] { breakpoint } ; } else if ( element instanceof IBreakpointContainer ) { breakpoints = ( ( IBreakpointContainer ) element ) . getBreakpoints ( ) ; } if ( breakpoints ! = null ) { setEnabled ( breakpoints ) ; } } catch ( CoreException e ) { ms . merge ( e . getStatus ( ) ) ; } } } public void setEnabled ( IBreakpoint [ ] breakpoints ) throws CoreException { boolean enable = isEnableAction ( ) ; for ( int i = <int> ; i < breakpoints . length ; i + + ) { breakpoints [ i ] . setEnabled ( enable ) ; } } } ; try { ResourcesPlugin . getWorkspace ( ) . run ( runnable , null , <int> , new NullProgressMonitor ( ) ) ; } catch ( CoreException e ) { } if ( ! ms . isOK ( ) ) { IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { DebugUIPlugin . errorDialog ( window . getShell ( ) , ActionMessages . EnableBreakpointAction_Enabling_breakpoints_3 , ActionMessages . EnableBreakpointAction_Exceptions_occurred_enabling_the_breakpoint_s___4 , ms ) ; } else { DebugUIPlugin . log ( ms ) ; } } } private IStructuredSelection getSelection ( ) { return ( IStructuredSelection ) getView ( ) . getViewSite ( ) . getSelectionProvider ( ) . getSelection ( ) ; } @Override public void selectionChanged ( IAction action , ISelection selection ) { setAction ( action ) ; if ( ! ( selection instanceof IStructuredSelection ) ) { return ; } IStructuredSelection sel = ( IStructuredSelection ) selection ; Iterator < ? > itr = sel . iterator ( ) ; boolean allEnabled = true ; boolean allDisabled = true ; while ( itr . hasNext ( ) ) { Object selected = itr . next ( ) ; IBreakpoint bp = ( IBreakpoint ) DebugPlugin . getAdapter ( selected , IBreakpoint . class ) ; if ( bp ! = null ) { try { if ( bp . isEnabled ( ) ) { allDisabled = false ; } else { allEnabled = false ; } } catch ( CoreException ce ) { handleException ( ce ) ; } } else if ( selected instanceof IBreakpointContainer ) { IBreakpoint [ ] breakpoints = ( ( IBreakpointContainer ) selected ) . getBreakpoints ( ) ; for ( int i = <int> ; i < breakpoints . length ; i + + ) { try { if ( breakpoints [ i ] . isEnabled ( ) ) { allDisabled = false ; } else { allEnabled = false ; } } catch ( CoreException ce ) { handleException ( ce ) ; } } } else { return ; } } if ( isEnableAction ( ) ) { action . setEnabled ( ! allEnabled ) ; } else { action . setEnabled ( ! allDisabled ) ; } } private void handleException ( CoreException ce ) { IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { DebugUIPlugin . errorDialog ( window . getShell ( ) , ActionMessages . EnableBreakpointAction_Enabling_breakpoints_3 , ActionMessages . EnableBreakpointAction_Exceptions_occurred_enabling_the_breakpoint_s___4 , ce ) ; } else { DebugUIPlugin . log ( ce ) ; } } public void dispose ( ) { DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . removeBreakpointListener ( this ) ; getView ( ) . getViewSite ( ) . getPage ( ) . removePartListener ( this ) ; } @Override public void breakpointsAdded ( IBreakpoint [ ] breakpoints ) { } @Override public void breakpointsRemoved ( IBreakpoint [ ] breakpoints , IMarkerDelta [ ] deltas ) { asynchUpdate ( ) ; } @Override public void breakpointsChanged ( IBreakpoint [ ] breakpoints , IMarkerDelta [ ] deltas ) { asynchUpdate ( ) ; } protected void asynchUpdate ( ) { if ( getAction ( ) = = null ) { return ; } IWorkbenchWindow window = getView ( ) . getViewSite ( ) . getPage ( ) . getWorkbenchWindow ( ) ; if ( window = = null ) { return ; } Shell shell = window . getShell ( ) ; if ( shell = = null | | shell . isDisposed ( ) ) { return ; } Runnable r = new Runnable ( ) { @Override public void run ( ) { IWorkbenchWindow ww = getView ( ) . getViewSite ( ) . getPage ( ) . getWorkbenchWindow ( ) ; if ( ww = = null ) { return ; } Shell s = ww . getShell ( ) ; if ( s = = null | | s . isDisposed ( ) ) { return ; } update ( ) ; } } ; shell . getDisplay ( ) . asyncExec ( r ) ; } protected IAction getAction ( ) { return fAction ; } protected void setAction ( IAction action ) { fAction = action ; } @Override public void partActivated ( IWorkbenchPart part ) { } @Override public void partBroughtToTop ( IWorkbenchPart part ) { } @Override public void partClosed ( IWorkbenchPart part ) { if ( part . equals ( getView ( ) ) ) { dispose ( ) ; } } @Override public void partDeactivated ( IWorkbenchPart part ) { } @Override public void partOpened ( IWorkbenchPart part ) { } } 

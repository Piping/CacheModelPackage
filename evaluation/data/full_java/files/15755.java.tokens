package org . gradle . api . internal . tasks . testing . junit . report ; import org . gradle . internal . ErroringAction ; import org . gradle . internal . html . SimpleHtmlWriter ; import org . gradle . api . internal . tasks . testing . junit . result . TestFailure ; import org . gradle . api . internal . tasks . testing . junit . result . TestResultsProvider ; import org . gradle . api . tasks . testing . TestOutputEvent ; import org . gradle . internal . SystemProperties ; import org . gradle . reporting . CodePanelRenderer ; import org . gradle . util . GUtil ; import java . io . IOException ; class ClassPageRenderer extends PageRenderer < ClassTestResults > { private final CodePanelRenderer codePanelRenderer = new CodePanelRenderer ( ) ; private final TestResultsProvider resultsProvider ; public ClassPageRenderer ( TestResultsProvider provider ) { this . resultsProvider = provider ; } @Override protected void renderBreadcrumbs ( SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . startElement ( <str> ) . attribute ( <str> , getResults ( ) . getUrlTo ( getResults ( ) . getParent ( ) . getParent ( ) ) ) . characters ( <str> ) . endElement ( ) . characters ( <str> ) . startElement ( <str> ) . attribute ( <str> , getResults ( ) . getUrlTo ( getResults ( ) . getPackageResults ( ) ) ) . characters ( getResults ( ) . getPackageResults ( ) . getName ( ) ) . endElement ( ) . characters ( String . format ( <str> , getResults ( ) . getSimpleName ( ) ) ) . endElement ( ) ; } private void renderTests ( SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) . startElement ( <str> ) . startElement ( <str> ) . startElement ( <str> ) . characters ( <str> ) . endElement ( ) . startElement ( <str> ) . characters ( <str> ) . endElement ( ) . startElement ( <str> ) . characters ( <str> ) . endElement ( ) . endElement ( ) . endElement ( ) ; for ( TestResult test : getResults ( ) . getTestResults ( ) ) { htmlWriter . startElement ( <str> ) . startElement ( <str> ) . attribute ( <str> , test . getStatusClass ( ) ) . characters ( test . getName ( ) ) . endElement ( ) . startElement ( <str> ) . characters ( test . getFormattedDuration ( ) ) . endElement ( ) . startElement ( <str> ) . attribute ( <str> , test . getStatusClass ( ) ) . characters ( test . getFormattedResultType ( ) ) . endElement ( ) . endElement ( ) ; } htmlWriter . endElement ( ) ; } @Override protected void renderFailures ( SimpleHtmlWriter htmlWriter ) throws IOException { for ( TestResult test : getResults ( ) . getFailures ( ) ) { htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . startElement ( <str> ) . attribute ( <str> , test . getId ( ) . toString ( ) ) . characters ( <str> ) . endElement ( ) . startElement ( <str> ) . attribute ( <str> , test . getStatusClass ( ) ) . characters ( test . getName ( ) ) . endElement ( ) ; for ( TestFailure failure : test . getFailures ( ) ) { String message ; if ( GUtil . isTrue ( failure . getMessage ( ) ) & & ! failure . getStackTrace ( ) . contains ( failure . getMessage ( ) ) ) { message = failure . getMessage ( ) + SystemProperties . getInstance ( ) . getLineSeparator ( ) + SystemProperties . getInstance ( ) . getLineSeparator ( ) + failure . getStackTrace ( ) ; } else { message = failure . getStackTrace ( ) ; } codePanelRenderer . render ( message , htmlWriter ) ; } htmlWriter . endElement ( ) ; } } @Override protected void registerTabs ( ) { addFailuresTab ( ) ; addTab ( <str> , new ErroringAction < SimpleHtmlWriter > ( ) { public void doExecute ( SimpleHtmlWriter writer ) throws IOException { renderTests ( writer ) ; } } ) ; final long classId = getModel ( ) . getId ( ) ; if ( resultsProvider . hasOutput ( classId , TestOutputEvent . Destination . StdOut ) ) { addTab ( <str> , new ErroringAction < SimpleHtmlWriter > ( ) { @Override protected void doExecute ( SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . startElement ( <str> ) . characters ( <str> ) ; resultsProvider . writeAllOutput ( classId , TestOutputEvent . Destination . StdOut , htmlWriter ) ; htmlWriter . endElement ( ) . endElement ( ) ; } } ) ; } if ( resultsProvider . hasOutput ( classId , TestOutputEvent . Destination . StdErr ) ) { addTab ( <str> , new ErroringAction < SimpleHtmlWriter > ( ) { @Override protected void doExecute ( SimpleHtmlWriter element ) throws Exception { element . startElement ( <str> ) . attribute ( <str> , <str> ) . startElement ( <str> ) . characters ( <str> ) ; resultsProvider . writeAllOutput ( classId , TestOutputEvent . Destination . StdErr , element ) ; element . endElement ( ) . endElement ( ) ; } } ) ; } } } 

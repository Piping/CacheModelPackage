package org . elasticsearch . search . fetch ; import com . carrotsearch . hppc . IntArrayList ; import org . apache . lucene . search . FieldDoc ; import org . apache . lucene . search . ScoreDoc ; import org . elasticsearch . Version ; import org . elasticsearch . action . search . SearchScrollRequest ; import org . elasticsearch . action . search . type . ParsedScrollId ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . transport . TransportRequest ; import java . io . IOException ; public class ShardFetchRequest extends TransportRequest { private long id ; private int [ ] docIds ; private int size ; private ScoreDoc lastEmittedDoc ; public ShardFetchRequest ( ) { } public ShardFetchRequest ( SearchScrollRequest request , long id , IntArrayList list , ScoreDoc lastEmittedDoc ) { super ( request ) ; this . id = id ; this . docIds = list . buffer ; this . size = list . size ( ) ; this . lastEmittedDoc = lastEmittedDoc ; } protected ShardFetchRequest ( TransportRequest originalRequest , long id , IntArrayList list , ScoreDoc lastEmittedDoc ) { super ( originalRequest ) ; this . id = id ; this . docIds = list . buffer ; this . size = list . size ( ) ; this . lastEmittedDoc = lastEmittedDoc ; } public long id ( ) { return id ; } public int [ ] docIds ( ) { return docIds ; } public int docIdsSize ( ) { return size ; } public ScoreDoc lastEmittedDoc ( ) { return lastEmittedDoc ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; id = in . readLong ( ) ; size = in . readVInt ( ) ; docIds = new int [ size ] ; for ( int i = <int> ; i < size ; i + + ) { docIds [ i ] = in . readVInt ( ) ; } byte flag = in . readByte ( ) ; if ( flag = = <int> ) { lastEmittedDoc = Lucene . readFieldDoc ( in ) ; } else if ( flag = = <int> ) { lastEmittedDoc = Lucene . readScoreDoc ( in ) ; } else if ( flag ! = <int> ) { throw new IOException ( <str> + flag ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeLong ( id ) ; out . writeVInt ( size ) ; for ( int i = <int> ; i < size ; i + + ) { out . writeVInt ( docIds [ i ] ) ; } if ( lastEmittedDoc = = null ) { out . writeByte ( ( byte ) <int> ) ; } else if ( lastEmittedDoc instanceof FieldDoc ) { out . writeByte ( ( byte ) <int> ) ; Lucene . writeFieldDoc ( out , ( FieldDoc ) lastEmittedDoc ) ; } else { out . writeByte ( ( byte ) <int> ) ; Lucene . writeScoreDoc ( out , lastEmittedDoc ) ; } } } 

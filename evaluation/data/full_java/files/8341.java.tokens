package org . elasticsearch . indices . mapping ; import org . elasticsearch . action . admin . indices . mapping . get . GetMappingsResponse ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingResponse ; import org . elasticsearch . action . admin . indices . refresh . RefreshResponse ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . hamcrest . Matchers ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; import java . util . concurrent . CyclicBarrier ; import java . util . concurrent . atomic . AtomicBoolean ; import static org . elasticsearch . cluster . metadata . IndexMetaData . * ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . * ; import static org . hamcrest . Matchers . * ; @ClusterScope ( randomDynamicTemplates = false ) public class UpdateMappingIntegrationIT extends ESIntegTestCase { public void testDynamicUpdates ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; int recCount = randomIntBetween ( <int> , <int> ) ; int numberOfTypes = randomIntBetween ( <int> , <int> ) ; List < IndexRequestBuilder > indexRequests = new ArrayList < > ( ) ; for ( int rec = <int> ; rec < recCount ; rec + + ) { String type = <str> + ( rec % numberOfTypes ) ; String fieldName = <str> + type + <str> + rec ; indexRequests . add ( client ( ) . prepareIndex ( <str> , type , Integer . toString ( rec ) ) . setSource ( fieldName , <str> ) ) ; } indexRandom ( true , indexRequests ) ; logger . info ( <str> ) ; RefreshResponse refreshResponse = client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; assertThat ( refreshResponse . getFailedShards ( ) , equalTo ( <int> ) ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . execute ( ) . actionGet ( ) ; assertThat ( response . getHits ( ) . totalHits ( ) , equalTo ( ( long ) recCount ) ) ; logger . info ( <str> ) ; for ( int rec = <int> ; rec < recCount ; rec + + ) { String type = <str> + ( rec % numberOfTypes ) ; String fieldName = <str> + type + <str> + rec ; assertConcreteMappingsOnAll ( <str> , type , fieldName ) ; } } public void testUpdateMappingWithoutType ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) . addMapping ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( putMappingResponse . isAcknowledged ( ) , equalTo ( true ) ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getMappingsResponse . mappings ( ) . get ( <str> ) . get ( <str> ) . source ( ) . toString ( ) , equalTo ( <str> ) ) ; } public void testUpdateMappingWithoutTypeMultiObjects ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( putMappingResponse . isAcknowledged ( ) , equalTo ( true ) ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getMappingsResponse . mappings ( ) . get ( <str> ) . get ( <str> ) . source ( ) . toString ( ) , equalTo ( <str> ) ) ; } public void testUpdateMappingWithConflicts ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) . addMapping ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; try { client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testUpdateMappingWithNormsConflicts ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , <str> ) . execute ( ) . actionGet ( ) ; try { client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testUpdateMappingNoChanges ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) ) . addMapping ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( putMappingResponse . isAcknowledged ( ) , equalTo ( true ) ) ; } @SuppressWarnings ( <str> ) public void testUpdateDefaultMappingSettings ( ) throws Exception { logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( MapperService . DEFAULT_MAPPING , JsonXContent . contentBuilder ( ) . startObject ( ) . startObject ( MapperService . DEFAULT_MAPPING ) . field ( <str> , false ) . endObject ( ) . endObject ( ) ) . get ( ) ; GetMappingsResponse getResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . addTypes ( MapperService . DEFAULT_MAPPING ) . get ( ) ; Map < String , Object > defaultMapping = getResponse . getMappings ( ) . get ( <str> ) . get ( MapperService . DEFAULT_MAPPING ) . sourceAsMap ( ) ; assertThat ( defaultMapping , hasKey ( <str> ) ) ; logger . info ( <str> ) ; PutMappingResponse putResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( MapperService . DEFAULT_MAPPING ) . setSource ( JsonXContent . contentBuilder ( ) . startObject ( ) . startObject ( MapperService . DEFAULT_MAPPING ) . endObject ( ) . endObject ( ) ) . get ( ) ; assertThat ( putResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; getResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . addTypes ( MapperService . DEFAULT_MAPPING ) . get ( ) ; defaultMapping = getResponse . getMappings ( ) . get ( <str> ) . get ( MapperService . DEFAULT_MAPPING ) . sourceAsMap ( ) ; assertThat ( defaultMapping , not ( hasKey ( <str> ) ) ) ; logger . info ( <str> ) ; putResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( MapperService . DEFAULT_MAPPING ) . setSource ( JsonXContent . contentBuilder ( ) . startObject ( ) . startObject ( MapperService . DEFAULT_MAPPING ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . get ( ) ; assertThat ( putResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; putResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( MapperService . DEFAULT_MAPPING ) . setSource ( JsonXContent . contentBuilder ( ) . startObject ( ) . startObject ( MapperService . DEFAULT_MAPPING ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . get ( ) ; assertThat ( putResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; getResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . addTypes ( MapperService . DEFAULT_MAPPING ) . get ( ) ; defaultMapping = getResponse . getMappings ( ) . get ( <str> ) . get ( MapperService . DEFAULT_MAPPING ) . sourceAsMap ( ) ; Map < String , Object > fieldSettings = ( Map < String , Object > ) ( ( Map ) defaultMapping . get ( <str> ) ) . get ( <str> ) ; assertThat ( fieldSettings , hasEntry ( <str> , ( Object ) <str> ) ) ; logger . info ( <str> ) ; assertThrows ( client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( MapperService . DEFAULT_MAPPING ) . setSource ( JsonXContent . contentBuilder ( ) . startObject ( ) . startObject ( MapperService . DEFAULT_MAPPING ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) , MapperParsingException . class ) ; } public void testUpdateMappingConcurrently ( ) throws Throwable { createIndex ( <str> , <str> ) ; ensureYellow ( ) ; final Throwable [ ] threadException = new Throwable [ <int> ] ; final AtomicBoolean stop = new AtomicBoolean ( false ) ; Thread [ ] threads = new Thread [ <int> ] ; final CyclicBarrier barrier = new CyclicBarrier ( threads . length ) ; final ArrayList < Client > clientArray = new ArrayList < > ( ) ; for ( Client c : clients ( ) ) { clientArray . add ( c ) ; } for ( int j = <int> ; j < threads . length ; j + + ) { threads [ j ] = new Thread ( new Runnable ( ) { @SuppressWarnings ( <str> ) @Override public void run ( ) { try { barrier . await ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { if ( stop . get ( ) ) { return ; } Client client1 = clientArray . get ( i % clientArray . size ( ) ) ; Client client2 = clientArray . get ( ( i + <int> ) % clientArray . size ( ) ) ; String indexName = i % <int> = = <int> ? <str> : <str> ; String typeName = <str> + ( i % <int> ) ; String fieldName = Thread . currentThread ( ) . getName ( ) + <str> + i ; PutMappingResponse response = client1 . admin ( ) . indices ( ) . preparePutMapping ( indexName ) . setType ( typeName ) . setSource ( JsonXContent . contentBuilder ( ) . startObject ( ) . startObject ( typeName ) . startObject ( <str> ) . startObject ( fieldName ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . get ( ) ; assertThat ( response . isAcknowledged ( ) , equalTo ( true ) ) ; GetMappingsResponse getMappingResponse = client2 . admin ( ) . indices ( ) . prepareGetMappings ( indexName ) . get ( ) ; ImmutableOpenMap < String , MappingMetaData > mappings = getMappingResponse . getMappings ( ) . get ( indexName ) ; assertThat ( mappings . containsKey ( typeName ) , equalTo ( true ) ) ; assertThat ( ( ( Map < String , Object > ) mappings . get ( typeName ) . getSourceAsMap ( ) . get ( <str> ) ) . keySet ( ) , Matchers . hasItem ( fieldName ) ) ; } } catch ( Throwable t ) { threadException [ <int> ] = t ; stop . set ( true ) ; } } } ) ; threads [ j ] . setName ( <str> + j ) ; threads [ j ] . start ( ) ; } for ( Thread t : threads ) t . join ( ) ; if ( threadException [ <int> ] ! = null ) { throw threadException [ <int> ] ; } } public void testPutMappingsWithBlocks ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; for ( String block : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE ) ) { try { enableIndexBlock ( <str> , block ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> ) ) ; } finally { disableIndexBlock ( <str> , block ) ; } } for ( String block : Arrays . asList ( SETTING_READ_ONLY , SETTING_BLOCKS_METADATA ) ) { try { enableIndexBlock ( <str> , block ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> ) ) ; } finally { disableIndexBlock ( <str> , block ) ; } } } } 

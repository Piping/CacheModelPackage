package org . gradle . api . internal . file . archive . compression ; import org . apache . tools . bzip2 . CBZip2InputStream ; import org . apache . tools . bzip2 . CBZip2OutputStream ; import org . gradle . api . resources . ResourceException ; import org . gradle . api . resources . internal . ReadableResourceInternal ; import java . io . File ; import java . io . FileOutputStream ; import java . io . InputStream ; import java . io . OutputStream ; public class Bzip2Archiver extends AbstractArchiver { public Bzip2Archiver ( ReadableResourceInternal resource ) { super ( resource ) ; } protected String getSchemePrefix ( ) { return <str> ; } public static ArchiveOutputStreamFactory getCompressor ( ) { return new ArchiveOutputStreamFactory ( ) { public OutputStream createArchiveOutputStream ( File destination ) { try { OutputStream outStr = new FileOutputStream ( destination ) ; outStr . write ( <str> ) ; outStr . write ( <str> ) ; return new CBZip2OutputStream ( outStr ) ; } catch ( Exception e ) { String message = String . format ( <str> , destination ) ; throw new RuntimeException ( message , e ) ; } } } ; } public InputStream read ( ) { InputStream is = resource . read ( ) ; try { byte [ ] skip = new byte [ <int> ] ; is . read ( skip ) ; return new CBZip2InputStream ( is ) ; } catch ( Exception e ) { String message = String . format ( <str> , resource . getDisplayName ( ) ) ; throw new ResourceException ( message , e ) ; } } } 

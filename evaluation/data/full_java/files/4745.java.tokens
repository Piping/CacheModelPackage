package org . eclipse . debug . ui . contexts ; import org . eclipse . core . runtime . ISafeRunnable ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . ui . IWorkbenchPart ; public abstract class AbstractDebugContextProvider implements IDebugContextProvider { private ListenerList fListeners = new ListenerList ( ) ; private IWorkbenchPart fPart ; public AbstractDebugContextProvider ( IWorkbenchPart part ) { fPart = part ; } @Override public void addDebugContextListener ( IDebugContextListener listener ) { fListeners . add ( listener ) ; } @Override public IWorkbenchPart getPart ( ) { return fPart ; } @Override public void removeDebugContextListener ( IDebugContextListener listener ) { fListeners . remove ( listener ) ; } protected void fire ( final DebugContextEvent event ) { Object [ ] listeners = fListeners . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { final IDebugContextListener listener = ( IDebugContextListener ) listeners [ i ] ; SafeRunner . run ( new ISafeRunnable ( ) { @Override public void run ( ) throws Exception { listener . debugContextChanged ( event ) ; } @Override public void handleException ( Throwable exception ) { DebugUIPlugin . log ( exception ) ; } } ) ; } } } 

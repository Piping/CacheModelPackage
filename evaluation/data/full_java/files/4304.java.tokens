package org . eclipse . debug . internal . ui . sourcelookup ; import java . util . ArrayList ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . sourcelookup . ISourceContainerBrowser ; import org . eclipse . jface . dialogs . Dialog ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . TitleAreaDialog ; import org . eclipse . jface . viewers . ArrayContentProvider ; import org . eclipse . jface . viewers . DoubleClickEvent ; import org . eclipse . jface . viewers . IDoubleClickListener ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . jface . viewers . TableViewer ; import org . eclipse . jface . viewers . ViewerComparator ; import org . eclipse . swt . SWT ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Table ; import org . eclipse . ui . PlatformUI ; public class AddSourceContainerDialog extends TitleAreaDialog { private TableViewer fViewer ; private SourceContainerViewer fSourceContainerViewer ; private ISourceLookupDirector fDirector ; public AddSourceContainerDialog ( Shell shell , SourceContainerViewer viewer , ISourceLookupDirector director ) { super ( shell ) ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; fSourceContainerViewer = viewer ; fDirector = director ; } @Override protected Control createDialogArea ( Composite parent ) { getShell ( ) . setText ( SourceLookupUIMessages . addSourceLocation_title ) ; setTitle ( SourceLookupUIMessages . addSourceLocation_description ) ; setTitleImage ( DebugPluginImages . getImage ( IInternalDebugUIConstants . IMG_ADD_SRC_LOC_WIZ ) ) ; setMessage ( SourceLookupUIMessages . AddSourceContainerDialog_select_source_container ) ; Composite comp = ( Composite ) super . createDialogArea ( parent ) ; GridData gd = new GridData ( GridData . FILL_BOTH ) ; GridLayout topLayout = new GridLayout ( ) ; topLayout . numColumns = <int> ; comp . setLayout ( topLayout ) ; comp . setLayoutData ( gd ) ; ISourceContainerType [ ] types = filterTypes ( DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getSourceContainerTypes ( ) ) ; fViewer = new TableViewer ( comp , SWT . H_SCROLL | SWT . V_SCROLL | SWT . BORDER | SWT . SINGLE ) ; final Table table = fViewer . getTable ( ) ; gd = new GridData ( GridData . FILL_BOTH ) ; table . setLayoutData ( gd ) ; fViewer . addDoubleClickListener ( new IDoubleClickListener ( ) { @Override public void doubleClick ( DoubleClickEvent event ) { okPressed ( ) ; } } ) ; fViewer . setLabelProvider ( new SourceContainerLabelProvider ( ) ) ; fViewer . setContentProvider ( new ArrayContentProvider ( ) ) ; fViewer . setComparator ( new ViewerComparator ( ) ) ; fViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { ISelection selection = event . getSelection ( ) ; if ( ! selection . isEmpty ( ) ) { ISourceContainerType type = ( ISourceContainerType ) ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; setMessage ( type . getDescription ( ) ) ; getButton ( IDialogConstants . OK_ID ) . setEnabled ( true ) ; } else { getButton ( IDialogConstants . OK_ID ) . setEnabled ( false ) ; setMessage ( SourceLookupUIMessages . AddSourceContainerDialog_select_source_container ) ; } } } ) ; if ( types . length ! = <int> ) { fViewer . setInput ( types ) ; } Dialog . applyDialogFont ( comp ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getShell ( ) , IDebugHelpContextIds . ADD_SOURCE_CONTAINER_DIALOG ) ; return comp ; } @Override protected void createButtonsForButtonBar ( Composite parent ) { super . createButtonsForButtonBar ( parent ) ; Table table = fViewer . getTable ( ) ; if ( table . getItemCount ( ) > <int> ) { fViewer . setSelection ( new StructuredSelection ( table . getItem ( <int> ) . getData ( ) ) ) ; } } @Override protected void okPressed ( ) { ISourceContainerType type = ( ISourceContainerType ) ( ( IStructuredSelection ) fViewer . getSelection ( ) ) . getFirstElement ( ) ; if ( type ! = null ) { ISourceContainerBrowser browser = DebugUITools . getSourceContainerBrowser ( type . getId ( ) ) ; if ( browser ! = null ) { ISourceContainer [ ] results = browser . addSourceContainers ( getShell ( ) , fDirector ) ; if ( results ! = null & & results . length > <int> ) { fSourceContainerViewer . addEntries ( results ) ; super . okPressed ( ) ; } else { return ; } } } super . okPressed ( ) ; } private ISourceContainerType [ ] filterTypes ( ISourceContainerType [ ] types ) { ArrayList < ISourceContainerType > validTypes = new ArrayList < ISourceContainerType > ( ) ; for ( int i = <int> ; i < types . length ; i + + ) { ISourceContainerType type = types [ i ] ; if ( fDirector . supportsSourceContainerType ( type ) ) { ISourceContainerBrowser sourceContainerBrowser = DebugUITools . getSourceContainerBrowser ( type . getId ( ) ) ; if ( sourceContainerBrowser ! = null & & sourceContainerBrowser . canAddSourceContainers ( fDirector ) ) { validTypes . add ( type ) ; } } } return validTypes . toArray ( new ISourceContainerType [ validTypes . size ( ) ] ) ; } } 

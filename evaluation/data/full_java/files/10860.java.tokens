package org . gradle . internal . jvm ; import org . gradle . api . JavaVersion ; import org . gradle . internal . classloader . DefaultClassLoaderFactory ; import org . gradle . internal . classloader . FilteringClassLoader ; import org . gradle . internal . classloader . MutableURLClassLoader ; import org . gradle . internal . classpath . DefaultClassPath ; import org . gradle . internal . reflect . DirectInstantiator ; import javax . tools . JavaCompiler ; import java . io . File ; import java . util . concurrent . atomic . AtomicReference ; public class JdkTools { private static final String DEFAULT_COMPILER_IMPL_NAME = <str> ; private static final AtomicReference < JdkTools > INSTANCE = new AtomicReference < JdkTools > ( ) ; private final ClassLoader isolatedToolsLoader ; public static JdkTools current ( ) { JdkTools jdkTools = INSTANCE . get ( ) ; if ( jdkTools = = null ) { INSTANCE . compareAndSet ( null , new JdkTools ( Jvm . current ( ) ) ) ; jdkTools = INSTANCE . get ( ) ; } return jdkTools ; } JdkTools ( JavaInfo javaInfo ) { DefaultClassLoaderFactory defaultClassLoaderFactory = new DefaultClassLoaderFactory ( ) ; JavaVersion javaVersion = Jvm . current ( ) . getJavaVersion ( ) ; FilteringClassLoader filteringClassLoader = defaultClassLoaderFactory . createSystemFilteringClassLoader ( ) ; if ( ! javaVersion . isJava9Compatible ( ) ) { File toolsJar = javaInfo . getToolsJar ( ) ; if ( toolsJar = = null ) { throw new IllegalStateException ( <str> ) ; } DefaultClassPath defaultClassPath = new DefaultClassPath ( toolsJar ) ; isolatedToolsLoader = new MutableURLClassLoader ( filteringClassLoader , defaultClassPath . getAsURLs ( ) ) ; } else { filteringClassLoader . allowPackage ( <str> ) ; isolatedToolsLoader = filteringClassLoader ; } } public JavaCompiler getSystemJavaCompiler ( ) { Class < ? > compilerImplClass ; try { compilerImplClass = isolatedToolsLoader . loadClass ( DEFAULT_COMPILER_IMPL_NAME ) ; } catch ( ClassNotFoundException e ) { throw new IllegalStateException ( <str> + DEFAULT_COMPILER_IMPL_NAME ) ; } return DirectInstantiator . instantiate ( compilerImplClass . asSubclass ( JavaCompiler . class ) ) ; } } 

package org . nd4j . linalg . api . complex ; public interface IComplexNumber { public IComplexNumber set ( Number real , Number imag ) ; public Number realComponent ( ) ; public Number imaginaryComponent ( ) ; public IComplexNumber dup ( ) ; public IComplexNumber copy ( IComplexNumber other ) ; public IComplexNumber addi ( IComplexNumber c , IComplexNumber result ) ; public IComplexNumber addi ( IComplexNumber c ) ; public IComplexNumber add ( IComplexNumber c ) ; public IComplexNumber addi ( Number a , IComplexNumber result ) ; public IComplexNumber addi ( Number c ) ; public IComplexNumber add ( Number c ) ; public IComplexNumber subi ( IComplexNumber c , IComplexNumber result ) ; public IComplexNumber subi ( IComplexNumber c ) ; public IComplexNumber sub ( IComplexNumber c ) ; public IComplexNumber subi ( Number a , IComplexNumber result ) ; public IComplexNumber subi ( Number a ) ; public IComplexNumber sub ( Number r ) ; public IComplexNumber rsub ( IComplexNumber c ) ; public IComplexNumber rsubi ( Number a , IComplexNumber result ) ; public IComplexNumber rsubi ( Number a ) ; public IComplexNumber rsub ( Number r ) ; public IComplexNumber muli ( IComplexNumber c , IComplexNumber result ) ; public IComplexNumber muli ( IComplexNumber c ) ; public IComplexNumber mul ( IComplexNumber c ) ; public IComplexNumber mul ( Number v ) ; public IComplexNumber muli ( Number v , IComplexNumber result ) ; public IComplexNumber muli ( Number v ) ; public IComplexNumber div ( IComplexNumber c ) ; public IComplexNumber divi ( IComplexNumber c , IComplexNumber result ) ; public IComplexNumber divi ( IComplexNumber c ) ; public IComplexNumber divi ( Number v , IComplexNumber result ) ; public IComplexNumber divi ( Number v ) ; public IComplexNumber div ( Number v ) ; public IComplexNumber rdiv ( IComplexNumber c ) ; public IComplexNumber rdivi ( IComplexNumber c , IComplexNumber result ) ; public IComplexNumber rdivi ( IComplexNumber c ) ; public IComplexNumber rdivi ( Number v , IComplexNumber result ) ; public IComplexNumber rdivi ( Number v ) ; public IComplexNumber rdiv ( Number v ) ; public Number absoluteValue ( ) ; public Number complexArgument ( ) ; public IComplexNumber invi ( ) ; public IComplexNumber inv ( ) ; public IComplexNumber neg ( ) ; public IComplexNumber negi ( ) ; public IComplexNumber conji ( ) ; public IComplexNumber conj ( ) ; public IComplexNumber sqrt ( ) ; public boolean eq ( IComplexNumber c ) ; public boolean ne ( IComplexNumber c ) ; public boolean isZero ( ) ; public boolean isReal ( ) ; public boolean isImag ( ) ; public IComplexFloat asFloat ( ) ; public IComplexDouble asDouble ( ) ; public IComplexNumber eqc ( IComplexNumber num ) ; public IComplexNumber neqc ( IComplexNumber num ) ; public IComplexNumber gt ( IComplexNumber num ) ; public IComplexNumber lt ( IComplexNumber num ) ; IComplexNumber rsubi ( IComplexNumber c ) ; IComplexNumber set ( IComplexNumber set ) ; IComplexNumber rsubi ( IComplexNumber a , IComplexNumber result ) ; } 

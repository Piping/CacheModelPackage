package org . eclipse . core . externaltools . internal . model ; import java . util . Map ; import org . eclipse . core . externaltools . internal . ExternalToolsCore ; import org . eclipse . core . externaltools . internal . IExternalToolConstants ; import org . eclipse . core . externaltools . internal . launchConfigurations . ExternalToolsCoreUtil ; import org . eclipse . core . externaltools . internal . registry . ExternalToolMigration ; import org . eclipse . core . resources . ICommand ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IProjectDescription ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IResourceDelta ; import org . eclipse . core . resources . IResourceDeltaVisitor ; import org . eclipse . core . resources . IncrementalProjectBuilder ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . osgi . util . NLS ; import org . osgi . framework . Bundle ; public final class ExternalToolBuilder extends IncrementalProjectBuilder { private final class IgnoreTeamPrivateChanges implements IResourceDeltaVisitor { private boolean [ ] fTrueChange ; private IgnoreTeamPrivateChanges ( boolean [ ] trueChange ) { super ( ) ; fTrueChange = trueChange ; } @Override public boolean visit ( IResourceDelta visitDelta ) throws CoreException { IResource resource = visitDelta . getResource ( ) ; if ( resource instanceof IFile ) { fTrueChange [ <int> ] = true ; return false ; } return true ; } } public static final String ID = <str> ; private static String buildType = IExternalToolConstants . BUILD_TYPE_NONE ; private static IProject buildProject = null ; private static IResourceDelta buildDelta = null ; @Override protected IProject [ ] build ( int kind , Map < String , String > args , IProgressMonitor monitor ) throws CoreException { if ( ExternalToolsCore . getDefault ( ) . getBundle ( ) . getState ( ) ! = Bundle . ACTIVE ) { return null ; } ILaunchConfiguration config = BuilderCoreUtils . configFromBuildCommandArgs ( getProject ( ) , args , new String [ <int> ] ) ; if ( config = = null ) { throw ExternalToolsCore . newError ( ExternalToolsModelMessages . ExternalToolBuilder_0 , null ) ; } IProject [ ] projectsWithinScope = null ; IResource [ ] resources = ExternalToolsCoreUtil . getResourcesForBuildScope ( config ) ; if ( resources ! = null ) { projectsWithinScope = new IProject [ resources . length ] ; for ( int i = <int> ; i < resources . length ; i + + ) { projectsWithinScope [ i ] = resources [ i ] . getProject ( ) ; } } boolean kindCompatible = commandConfiguredForKind ( config , kind ) ; if ( kindCompatible & & configEnabled ( config ) ) { doBuildBasedOnScope ( resources , kind , config , args , monitor ) ; } return projectsWithinScope ; } private boolean commandConfiguredForKind ( ILaunchConfiguration config , int kind ) { try { if ( ! ( config . getAttribute ( IExternalToolConstants . ATTR_TRIGGERS_CONFIGURED , false ) ) ) { ICommand command = getCommand ( ) ; BuilderCoreUtils . configureTriggers ( config , command ) ; IProjectDescription desc = getProject ( ) . getDescription ( ) ; ICommand [ ] commands = desc . getBuildSpec ( ) ; int index = getBuilderCommandIndex ( commands , command ) ; if ( index ! = - <int> ) { commands [ index ] = command ; desc . setBuildSpec ( commands ) ; getProject ( ) . setDescription ( desc , null ) ; ILaunchConfigurationWorkingCopy copy = config . getWorkingCopy ( ) ; copy . setAttribute ( IExternalToolConstants . ATTR_TRIGGERS_CONFIGURED , true ) ; copy . doSave ( ) ; } return command . isBuilding ( kind ) ; } } catch ( CoreException e ) { ExternalToolsCore . log ( e ) ; return true ; } return true ; } private int getBuilderCommandIndex ( ICommand [ ] buildSpec , ICommand command ) { Map < String , String > commandArgs = command . getArguments ( ) ; if ( commandArgs = = null ) { return - <int> ; } String handle = commandArgs . get ( BuilderCoreUtils . LAUNCH_CONFIG_HANDLE ) ; if ( handle = = null ) { return - <int> ; } for ( int i = <int> ; i < buildSpec . length ; + + i ) { ICommand buildSpecCommand = buildSpec [ i ] ; if ( ID . equals ( buildSpecCommand . getBuilderName ( ) ) ) { Map < String , String > buildSpecArgs = buildSpecCommand . getArguments ( ) ; if ( buildSpecArgs ! = null ) { String buildSpecHandle = buildSpecArgs . get ( BuilderCoreUtils . LAUNCH_CONFIG_HANDLE ) ; if ( handle . equals ( buildSpecHandle ) ) { return i ; } } } } return - <int> ; } private boolean configEnabled ( ILaunchConfiguration config ) { try { return ExternalToolsCoreUtil . isBuilderEnabled ( config ) ; } catch ( CoreException e ) { ExternalToolsCore . log ( e ) ; } return true ; } private void doBuildBasedOnScope ( IResource [ ] resources , int kind , ILaunchConfiguration config , Map < String , String > args , IProgressMonitor monitor ) throws CoreException { boolean buildForChange = true ; if ( kind ! = FULL_BUILD ) { if ( resources ! = null & & resources . length > <int> ) { buildForChange = buildScopeIndicatesBuild ( resources ) ; } } if ( buildForChange ) { launchBuild ( kind , config , args , monitor ) ; } } private void launchBuild ( int kind , ILaunchConfiguration config , Map < String , String > args , IProgressMonitor monitor ) throws CoreException { monitor . subTask ( NLS . bind ( ExternalToolsModelMessages . ExternalToolBuilder_Running__0_____1 , new String [ ] { config . getName ( ) } ) ) ; buildStarted ( kind , args ) ; ILaunchConfiguration newconfig = ExternalToolMigration . migrateRunInBackground ( config ) ; newconfig . launch ( ILaunchManager . RUN_MODE , monitor ) ; buildEnded ( ) ; } public static String getBuildType ( ) { return buildType ; } public static IProject getBuildProject ( ) { return buildProject ; } public static IResourceDelta getBuildDelta ( ) { return buildDelta ; } private void buildStarted ( int buildKind , Map < String , String > args ) { switch ( buildKind ) { case IncrementalProjectBuilder . INCREMENTAL_BUILD : buildType = IExternalToolConstants . BUILD_TYPE_INCREMENTAL ; buildDelta = getDelta ( getProject ( ) ) ; break ; case IncrementalProjectBuilder . FULL_BUILD : if ( args ! = null & & args . containsKey ( BuilderCoreUtils . INC_CLEAN ) ) { buildType = IExternalToolConstants . BUILD_TYPE_INCREMENTAL ; buildDelta = getDelta ( getProject ( ) ) ; } else { buildType = IExternalToolConstants . BUILD_TYPE_FULL ; } break ; case IncrementalProjectBuilder . AUTO_BUILD : buildType = IExternalToolConstants . BUILD_TYPE_AUTO ; buildDelta = getDelta ( getProject ( ) ) ; break ; case IncrementalProjectBuilder . CLEAN_BUILD : buildType = IExternalToolConstants . BUILD_TYPE_CLEAN ; break ; default : buildType = IExternalToolConstants . BUILD_TYPE_NONE ; break ; } buildProject = getProject ( ) ; } private void buildEnded ( ) { buildType = IExternalToolConstants . BUILD_TYPE_NONE ; buildProject = null ; buildDelta = null ; } private boolean buildScopeIndicatesBuild ( IResource [ ] resources ) { for ( int i = <int> ; i < resources . length ; i + + ) { IResourceDelta delta = getDelta ( resources [ i ] . getProject ( ) ) ; if ( delta = = null ) { return true ; } IPath path = resources [ i ] . getProjectRelativePath ( ) ; IResourceDelta change = delta . findMember ( path ) ; if ( change ! = null ) { final boolean [ ] trueChange = new boolean [ <int> ] ; trueChange [ <int> ] = false ; try { change . accept ( new IgnoreTeamPrivateChanges ( trueChange ) ) ; } catch ( CoreException e ) { ExternalToolsCore . log ( <str> , e ) ; } return trueChange [ <int> ] ; } } return false ; } @Override protected void clean ( IProgressMonitor monitor ) throws CoreException { ICommand command = getCommand ( ) ; ILaunchConfiguration config = BuilderCoreUtils . configFromBuildCommandArgs ( getProject ( ) , command . getArguments ( ) , new String [ <int> ] ) ; if ( ! configEnabled ( config ) ) { return ; } if ( ( ! config . getAttribute ( IExternalToolConstants . ATTR_TRIGGERS_CONFIGURED , false ) ) ) { super . clean ( monitor ) ; return ; } launchBuild ( IncrementalProjectBuilder . CLEAN_BUILD , config , null , monitor ) ; } } 

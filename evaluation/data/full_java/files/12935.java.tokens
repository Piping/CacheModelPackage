package org . gradle . api . reporting . dependencies ; import groovy . lang . Closure ; import org . gradle . api . Incubating ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . internal . ConventionTask ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . VersionComparator ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . VersionSelectorScheme ; import org . gradle . api . reporting . Reporting ; import org . gradle . api . reporting . dependencies . internal . DefaultDependencyReportContainer ; import org . gradle . api . reporting . dependencies . internal . HtmlDependencyReporter ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . TaskAction ; import org . gradle . internal . reflect . Instantiator ; import javax . inject . Inject ; import java . util . Set ; @Incubating public class HtmlDependencyReportTask extends ConventionTask implements Reporting < DependencyReportContainer > { private Set < Project > projects ; private final DefaultDependencyReportContainer reports ; public HtmlDependencyReportTask ( ) { reports = getInstantiator ( ) . newInstance ( DefaultDependencyReportContainer . class , this ) ; reports . getHtml ( ) . setEnabled ( true ) ; getOutputs ( ) . upToDateWhen ( new Spec < Task > ( ) { public boolean isSatisfiedBy ( Task element ) { return false ; } } ) ; } public DependencyReportContainer getReports ( ) { return reports ; } public DependencyReportContainer reports ( Closure closure ) { reports . configure ( closure ) ; return reports ; } @Inject protected Instantiator getInstantiator ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected VersionSelectorScheme getVersionSelectorScheme ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected VersionComparator getVersionComparator ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction public void generate ( ) { if ( ! reports . getHtml ( ) . isEnabled ( ) ) { setDidWork ( false ) ; return ; } HtmlDependencyReporter reporter = new HtmlDependencyReporter ( getVersionSelectorScheme ( ) , getVersionComparator ( ) ) ; reporter . render ( getProjects ( ) , reports . getHtml ( ) . getDestination ( ) ) ; } public Set < Project > getProjects ( ) { return projects ; } public void setProjects ( Set < Project > projects ) { this . projects = projects ; } } 

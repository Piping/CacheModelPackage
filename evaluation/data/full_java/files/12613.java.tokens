package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy ; import java . util . Comparator ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class VersionRangeSelector extends AbstractVersionSelector { private static final String OPEN_INC = <str> ; private static final String OPEN_EXC = <str> ; private static final String OPEN_EXC_MAVEN = <str> ; private static final String CLOSE_INC = <str> ; private static final String CLOSE_EXC = <str> ; private static final String CLOSE_EXC_MAVEN = <str> ; private static final String LOWER_INFINITE = <str> ; private static final String UPPER_INFINITE = <str> ; private static final String SEPARATOR = <str> ; private static final String OPEN_INC_PATTERN = <str> + OPEN_INC ; private static final String OPEN_EXC_PATTERN = <str> + OPEN_EXC + <str> + OPEN_EXC_MAVEN ; private static final String CLOSE_INC_PATTERN = <str> + CLOSE_INC ; private static final String CLOSE_EXC_PATTERN = <str> + CLOSE_EXC + <str> + CLOSE_EXC_MAVEN ; private static final String LI_PATTERN = <str> + LOWER_INFINITE ; private static final String UI_PATTERN = <str> + UPPER_INFINITE ; private static final String SEP_PATTERN = <str> + SEPARATOR + <str> ; private static final String OPEN_PATTERN = <str> + OPEN_INC_PATTERN + OPEN_EXC_PATTERN + <str> ; private static final String CLOSE_PATTERN = <str> + CLOSE_INC_PATTERN + CLOSE_EXC_PATTERN + <str> ; private static final String ANY_NON_SPECIAL_PATTERN = <str> + SEPARATOR + OPEN_INC_PATTERN + OPEN_EXC_PATTERN + CLOSE_INC_PATTERN + CLOSE_EXC_PATTERN + LI_PATTERN + UI_PATTERN + <str> ; private static final String FINITE_PATTERN = OPEN_PATTERN + <str> + ANY_NON_SPECIAL_PATTERN + <str> + SEP_PATTERN + <str> + ANY_NON_SPECIAL_PATTERN + <str> + CLOSE_PATTERN ; private static final String LOWER_INFINITE_PATTERN = LI_PATTERN + SEP_PATTERN + <str> + ANY_NON_SPECIAL_PATTERN + <str> + CLOSE_PATTERN ; private static final String UPPER_INFINITE_PATTERN = OPEN_PATTERN + <str> + ANY_NON_SPECIAL_PATTERN + <str> + SEP_PATTERN + UI_PATTERN ; private static final String SINGLE_VALUE_PATTERN = OPEN_INC_PATTERN + <str> + ANY_NON_SPECIAL_PATTERN + <str> + CLOSE_INC_PATTERN ; private static final Pattern FINITE_RANGE = Pattern . compile ( FINITE_PATTERN ) ; private static final Pattern LOWER_INFINITE_RANGE = Pattern . compile ( LOWER_INFINITE_PATTERN ) ; private static final Pattern UPPER_INFINITE_RANGE = Pattern . compile ( UPPER_INFINITE_PATTERN ) ; private static final Pattern SINGLE_VALUE_RANGE = Pattern . compile ( SINGLE_VALUE_PATTERN ) ; public static final Pattern ALL_RANGE = Pattern . compile ( FINITE_PATTERN + <str> + LOWER_INFINITE_PATTERN + <str> + UPPER_INFINITE_PATTERN + <str> + SINGLE_VALUE_RANGE ) ; private final String upperBound ; private final boolean upperInclusive ; private final String lowerBound ; private final boolean lowerInclusive ; private final Comparator < String > comparator ; public VersionRangeSelector ( String selector , Comparator < String > comparator ) { super ( selector ) ; this . comparator = comparator ; Matcher matcher ; matcher = FINITE_RANGE . matcher ( selector ) ; if ( matcher . matches ( ) ) { lowerBound = matcher . group ( <int> ) ; lowerInclusive = selector . startsWith ( OPEN_INC ) ; upperBound = matcher . group ( <int> ) ; upperInclusive = selector . endsWith ( CLOSE_INC ) ; } else { matcher = LOWER_INFINITE_RANGE . matcher ( selector ) ; if ( matcher . matches ( ) ) { lowerBound = null ; lowerInclusive = true ; upperBound = matcher . group ( <int> ) ; upperInclusive = selector . endsWith ( CLOSE_INC ) ; } else { matcher = UPPER_INFINITE_RANGE . matcher ( selector ) ; if ( matcher . matches ( ) ) { lowerBound = matcher . group ( <int> ) ; lowerInclusive = selector . startsWith ( OPEN_INC ) ; upperBound = null ; upperInclusive = true ; } else { matcher = SINGLE_VALUE_RANGE . matcher ( selector ) ; if ( matcher . matches ( ) ) { lowerBound = matcher . group ( <int> ) ; lowerInclusive = true ; upperBound = lowerBound ; upperInclusive = true ; } else { throw new IllegalArgumentException ( <str> + selector ) ; } } } } } public boolean isDynamic ( ) { return true ; } public boolean requiresMetadata ( ) { return false ; } public boolean matchesUniqueVersion ( ) { return false ; } public boolean accept ( String candidate ) { if ( lowerBound ! = null & & ! isHigher ( candidate , lowerBound , lowerInclusive ) ) { return false ; } if ( upperBound ! = null & & ! isLower ( candidate , upperBound , upperInclusive ) ) { return false ; } return true ; } private boolean isLower ( String version1 , String version2 , boolean inclusive ) { int result = comparator . compare ( version1 , version2 ) ; return result < = ( inclusive ? <int> : - <int> ) ; } private boolean isHigher ( String version1 , String version2 , boolean inclusive ) { int result = comparator . compare ( version1 , version2 ) ; return result > = ( inclusive ? <int> : <int> ) ; } } 

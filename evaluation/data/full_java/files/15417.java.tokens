package org . gradle . internal . resource . transport . http ; import org . gradle . internal . resource . ResourceException ; import org . gradle . internal . resource . transfer . ExternalResourceLister ; import org . gradle . internal . resource . transfer . ExternalResourceReadResponse ; import java . io . IOException ; import java . io . InputStream ; import java . net . URI ; import java . util . List ; public class HttpResourceLister implements ExternalResourceLister { private HttpResourceAccessor accessor ; public HttpResourceLister ( HttpResourceAccessor accessor ) { this . accessor = accessor ; } public List < String > list ( final URI directory ) { final ExternalResourceReadResponse response = accessor . openResource ( directory ) ; if ( response = = null ) { return null ; } try { try { String contentType = response . getMetaData ( ) . getContentType ( ) ; ApacheDirectoryListingParser directoryListingParser = new ApacheDirectoryListingParser ( ) ; InputStream inputStream = response . openStream ( ) ; try { return directoryListingParser . parse ( directory , inputStream , contentType ) ; } catch ( Exception e ) { throw new ResourceException ( directory , String . format ( <str> , directory ) , e ) ; } } finally { response . close ( ) ; } } catch ( IOException e ) { throw ResourceException . getFailed ( directory , e ) ; } } } 

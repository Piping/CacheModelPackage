package org . elasticsearch . indices . settings ; import org . elasticsearch . action . admin . indices . settings . get . GetSettingsResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Arrays ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_METADATA ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; public class GetSettingsBlocksIT extends ESIntegTestCase { public void testGetSettingsWithBlocks ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , - <int> ) . put ( <str> , <str> ) . put ( <str> , false ) ) ) ; for ( String block : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE , SETTING_READ_ONLY ) ) { try { enableIndexBlock ( <str> , block ) ; GetSettingsResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetSettings ( <str> ) . get ( ) ; assertThat ( response . getIndexToSettings ( ) . size ( ) , greaterThanOrEqualTo ( <int> ) ) ; assertThat ( response . getSetting ( <str> , <str> ) , equalTo ( <str> ) ) ; assertThat ( response . getSetting ( <str> , <str> ) , equalTo ( <str> ) ) ; assertThat ( response . getSetting ( <str> , <str> ) , equalTo ( <str> ) ) ; } finally { disableIndexBlock ( <str> , block ) ; } } try { enableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareGetSettings ( <str> ) ) ; } finally { disableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; } } } 

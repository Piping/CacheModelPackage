package org . apache . cassandra . cql3 . statements ; import org . apache . cassandra . auth . AuthenticatedUser ; import org . apache . cassandra . cql3 . CFName ; import org . apache . cassandra . cql3 . CQLStatement ; import org . apache . cassandra . cql3 . QueryOptions ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . exceptions . RequestValidationException ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . QueryState ; import org . apache . cassandra . transport . Event ; import org . apache . cassandra . transport . messages . ResultMessage ; public abstract class SchemaAlteringStatement extends CFStatement implements CQLStatement { private final boolean isColumnFamilyLevel ; protected SchemaAlteringStatement ( ) { super ( null ) ; this . isColumnFamilyLevel = false ; } protected SchemaAlteringStatement ( CFName name ) { super ( name ) ; this . isColumnFamilyLevel = true ; } public int getBoundTerms ( ) { return <int> ; } @Override public void prepareKeyspace ( ClientState state ) throws InvalidRequestException { if ( isColumnFamilyLevel ) super . prepareKeyspace ( state ) ; } @Override public Prepared prepare ( ) { return new Prepared ( this ) ; } protected void grantPermissionsToCreator ( QueryState state ) { } public abstract Event . SchemaChange announceMigration ( boolean isLocalOnly ) throws RequestValidationException ; public ResultMessage execute ( QueryState state , QueryOptions options ) throws RequestValidationException { Event . SchemaChange ce = announceMigration ( false ) ; if ( ce = = null ) return new ResultMessage . Void ( ) ; AuthenticatedUser user = state . getClientState ( ) . getUser ( ) ; if ( user ! = null & & ! user . isAnonymous ( ) & & ce . change = = Event . SchemaChange . Change . CREATED ) { try { grantPermissionsToCreator ( state ) ; } catch ( UnsupportedOperationException e ) { } } return new ResultMessage . SchemaChange ( ce ) ; } public ResultMessage executeInternal ( QueryState state , QueryOptions options ) { Event . SchemaChange ce = announceMigration ( true ) ; return ce = = null ? new ResultMessage . Void ( ) : new ResultMessage . SchemaChange ( ce ) ; } } 

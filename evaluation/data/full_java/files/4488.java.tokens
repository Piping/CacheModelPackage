package org . eclipse . debug . internal . ui . views ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . ui . IWindowListener ; import org . eclipse . ui . IWorkbench ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PlatformUI ; public class ViewContextManager implements IWindowListener { private Map < IWorkbenchWindow , ViewContextService > fWindowToService = new HashMap < IWorkbenchWindow , ViewContextService > ( ) ; private static ViewContextManager fgManager ; public static ViewContextManager getDefault ( ) { if ( fgManager = = null ) { fgManager = new ViewContextManager ( ) ; } return fgManager ; } private ViewContextManager ( ) { IWorkbench workbench = PlatformUI . getWorkbench ( ) ; IWorkbenchWindow [ ] workbenchWindows = workbench . getWorkbenchWindows ( ) ; for ( int i = <int> ; i < workbenchWindows . length ; i + + ) { IWorkbenchWindow window = workbenchWindows [ i ] ; windowOpened ( window ) ; } workbench . addWindowListener ( this ) ; } @Override public void windowActivated ( IWorkbenchWindow window ) { } @Override public void windowDeactivated ( IWorkbenchWindow window ) { } @Override public void windowClosed ( IWorkbenchWindow window ) { ViewContextService service = fWindowToService . get ( window ) ; if ( service ! = null ) { fWindowToService . remove ( window ) ; service . dispose ( ) ; } } @Override public void windowOpened ( IWorkbenchWindow window ) { ViewContextService service = fWindowToService . get ( window ) ; if ( service = = null ) { service = new ViewContextService ( window ) ; fWindowToService . put ( window , service ) ; } } public ViewContextService getService ( IWorkbenchWindow window ) { return fWindowToService . get ( window ) ; } } 

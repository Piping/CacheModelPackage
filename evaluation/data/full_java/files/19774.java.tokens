package io . netty . util . internal . logging ; import org . junit . After ; import org . junit . Before ; import org . junit . Test ; import static org . easymock . EasyMock . * ; import static org . junit . Assert . * ; public class InternalLoggerFactoryTest { private static final Exception e = new Exception ( ) ; private InternalLoggerFactory oldLoggerFactory ; private InternalLogger mock ; @Before public void init ( ) { oldLoggerFactory = InternalLoggerFactory . getDefaultFactory ( ) ; InternalLoggerFactory mockFactory = createMock ( InternalLoggerFactory . class ) ; mock = createStrictMock ( InternalLogger . class ) ; expect ( mockFactory . newInstance ( <str> ) ) . andReturn ( mock ) . anyTimes ( ) ; replay ( mockFactory ) ; InternalLoggerFactory . setDefaultFactory ( mockFactory ) ; } @After public void destroy ( ) { reset ( mock ) ; InternalLoggerFactory . setDefaultFactory ( oldLoggerFactory ) ; } @Test ( expected = NullPointerException . class ) public void shouldNotAllowNullDefaultFactory ( ) { InternalLoggerFactory . setDefaultFactory ( null ) ; } @Test public void shouldGetInstance ( ) { InternalLoggerFactory . setDefaultFactory ( oldLoggerFactory ) ; String helloWorld = <str> ; InternalLogger one = InternalLoggerFactory . getInstance ( <str> ) ; InternalLogger two = InternalLoggerFactory . getInstance ( helloWorld . getClass ( ) ) ; assertNotNull ( one ) ; assertNotNull ( two ) ; assertNotSame ( one , two ) ; } @Test public void testIsTraceEnabled ( ) { expect ( mock . isTraceEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; assertTrue ( logger . isTraceEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsDebugEnabled ( ) { expect ( mock . isDebugEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; assertTrue ( logger . isDebugEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsInfoEnabled ( ) { expect ( mock . isInfoEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; assertTrue ( logger . isInfoEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsWarnEnabled ( ) { expect ( mock . isWarnEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; assertTrue ( logger . isWarnEnabled ( ) ) ; verify ( mock ) ; } @Test public void testIsErrorEnabled ( ) { expect ( mock . isErrorEnabled ( ) ) . andReturn ( true ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; assertTrue ( logger . isErrorEnabled ( ) ) ; verify ( mock ) ; } @Test public void testTrace ( ) { mock . trace ( <str> ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . trace ( <str> ) ; verify ( mock ) ; } @Test public void testTraceWithException ( ) { mock . trace ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . trace ( <str> , e ) ; verify ( mock ) ; } @Test public void testDebug ( ) { mock . debug ( <str> ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . debug ( <str> ) ; verify ( mock ) ; } @Test public void testDebugWithException ( ) { mock . debug ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . debug ( <str> , e ) ; verify ( mock ) ; } @Test public void testInfo ( ) { mock . info ( <str> ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . info ( <str> ) ; verify ( mock ) ; } @Test public void testInfoWithException ( ) { mock . info ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . info ( <str> , e ) ; verify ( mock ) ; } @Test public void testWarn ( ) { mock . warn ( <str> ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . warn ( <str> ) ; verify ( mock ) ; } @Test public void testWarnWithException ( ) { mock . warn ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . warn ( <str> , e ) ; verify ( mock ) ; } @Test public void testError ( ) { mock . error ( <str> ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . error ( <str> ) ; verify ( mock ) ; } @Test public void testErrorWithException ( ) { mock . error ( <str> , e ) ; replay ( mock ) ; InternalLogger logger = InternalLoggerFactory . getInstance ( <str> ) ; logger . error ( <str> , e ) ; verify ( mock ) ; } } 

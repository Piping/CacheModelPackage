package org . eclipse . debug . internal . ui ; import org . eclipse . core . runtime . preferences . AbstractPreferenceInitializer ; import org . eclipse . debug . internal . ui . preferences . IDebugPreferenceConstants ; import org . eclipse . debug . internal . ui . views . memory . MemoryViewUtil ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . dialogs . MessageDialogWithToggle ; import org . eclipse . jface . preference . IPreferenceStore ; import org . eclipse . jface . preference . PreferenceConverter ; import org . eclipse . jface . resource . ColorRegistry ; import org . eclipse . swt . graphics . RGB ; import org . eclipse . swt . widgets . Display ; import org . eclipse . ui . PlatformUI ; public class DebugUIPreferenceInitializer extends AbstractPreferenceInitializer { public DebugUIPreferenceInitializer ( ) { super ( ) ; } @Override public void initializeDefaultPreferences ( ) { IPreferenceStore prefs = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) ; prefs . setDefault ( IDebugUIConstants . PREF_BUILD_BEFORE_LAUNCH , true ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_SAVE_DIRTY_EDITORS_BEFORE_LAUNCH , MessageDialogWithToggle . PROMPT ) ; prefs . setDefault ( IDebugUIConstants . PREF_SHOW_DEBUG_PERSPECTIVE_DEFAULT , IDebugUIConstants . ID_DEBUG_PERSPECTIVE ) ; prefs . setDefault ( IDebugUIConstants . PREF_SHOW_RUN_PERSPECTIVE_DEFAULT , IDebugUIConstants . PERSPECTIVE_NONE ) ; prefs . setDefault ( IDebugUIConstants . PREF_AUTO_REMOVE_OLD_LAUNCHES , true ) ; prefs . setDefault ( IDebugUIConstants . PREF_ACTIVATE_WORKBENCH , true ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_ACTIVATE_DEBUG_VIEW , true ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_SWITCH_TO_PERSPECTIVE , MessageDialogWithToggle . NEVER ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_SWITCH_PERSPECTIVE_ON_SUSPEND , MessageDialogWithToggle . PROMPT ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_WAIT_FOR_BUILD , MessageDialogWithToggle . ALWAYS ) ; prefs . setDefault ( IDebugUIConstants . PREF_REUSE_EDITOR , true ) ; prefs . setDefault ( IDebugUIConstants . PREF_SKIP_BREAKPOINTS_DURING_RUN_TO_LINE , false ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_RELAUNCH_IN_DEBUG_MODE , MessageDialogWithToggle . NEVER ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_CONTINUE_WITH_COMPILE_ERROR , MessageDialogWithToggle . PROMPT ) ; prefs . setDefault ( IDebugPreferenceConstants . PREF_PROMPT_REMOVE_ALL_BREAKPOINTS , true ) ; prefs . setDefault ( IDebugPreferenceConstants . PREF_PROMPT_REMOVE_BREAKPOINTS_FROM_CONTAINER , true ) ; prefs . setDefault ( IDebugPreferenceConstants . PREF_PROMPT_REMOVE_ALL_EXPRESSIONS , true ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_USE_CONTEXTUAL_LAUNCH , true ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_LAUNCH_PARENT_PROJECT , false ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_LAUNCH_LAST_IF_NOT_LAUNCHABLE , true ) ; prefs . setDefault ( IDebugUIConstants . PREF_MANAGE_VIEW_PERSPECTIVES , IDebugUIConstants . PREF_MANAGE_VIEW_PERSPECTIVES_DEFAULT ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_TRACK_VIEWS , true ) ; prefs . setDefault ( IDebugPreferenceConstants . CONSOLE_WRAP , false ) ; prefs . setDefault ( IDebugPreferenceConstants . CONSOLE_WIDTH , <int> ) ; prefs . setDefault ( IDebugPreferenceConstants . CONSOLE_OPEN_ON_OUT , true ) ; prefs . setDefault ( IDebugPreferenceConstants . CONSOLE_OPEN_ON_ERR , true ) ; prefs . setDefault ( IDebugPreferenceConstants . CONSOLE_LIMIT_CONSOLE_OUTPUT , true ) ; prefs . setDefault ( IDebugPreferenceConstants . CONSOLE_LOW_WATER_MARK , <int> ) ; prefs . setDefault ( IDebugPreferenceConstants . CONSOLE_HIGH_WATER_MARK , <int> ) ; prefs . setDefault ( IDebugPreferenceConstants . CONSOLE_TAB_WIDTH , <int> ) ; setThemeBasedPreferences ( prefs , false ) ; PreferenceConverter . setDefault ( prefs , IDebugUIConstants . PREF_CHANGED_VALUE_BACKGROUND , new RGB ( <int> , <int> , <int> ) ) ; PreferenceConverter . setDefault ( prefs , IDebugUIConstants . PREF_MEMORY_HISTORY_UNKNOWN_COLOR , new RGB ( <int> , <int> , <int> ) ) ; PreferenceConverter . setDefault ( prefs , IDebugUIConstants . PREF_MEMORY_HISTORY_KNOWN_COLOR , new RGB ( <int> , <int> , <int> ) ) ; prefs . setDefault ( IDebugUIConstants . PREF_MAX_HISTORY_SIZE , <int> ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_REMOVE_FROM_LAUNCH_HISTORY , true ) ; prefs . setDefault ( IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_ORIENTATION , IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_UNDERNEATH ) ; PreferenceConverter . setDefault ( prefs , IDebugUIConstants . PREF_CHANGED_DEBUG_ELEMENT_COLOR , new RGB ( <int> , <int> , <int> ) ) ; prefs . setDefault ( IDebugPreferenceConstants . PREF_DETAIL_PANE_WORD_WRAP , false ) ; prefs . setDefault ( IDebugUIConstants . PREF_MAX_DETAIL_LENGTH , <int> ) ; prefs . setDefault ( IDebugPreferenceConstants . REGISTERS_DETAIL_PANE_ORIENTATION , IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_UNDERNEATH ) ; prefs . setDefault ( IDebugPreferenceConstants . BREAKPOINTS_DETAIL_PANE_ORIENTATION , IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_UNDERNEATH ) ; prefs . setDefault ( IDebugPreferenceConstants . EXPRESSIONS_DETAIL_PANE_ORIENTATION , IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_UNDERNEATH ) ; prefs . setDefault ( IDebugPreferenceConstants . MODULES_DETAIL_PANE_ORIENTATION , IDebugPreferenceConstants . VARIABLES_DETAIL_PANE_UNDERNEATH ) ; prefs . setDefault ( IDebugUIConstants . ID_VARIABLE_VIEW + <str> + <str> , true ) ; prefs . setDefault ( IDebugUIConstants . ID_EXPRESSION_VIEW + <str> + <str> , true ) ; prefs . setDefault ( IDebugUIConstants . ID_VARIABLE_VIEW + <str> + <str> , false ) ; prefs . setDefault ( IDebugUIConstants . ID_EXPRESSION_VIEW + <str> + <str> , false ) ; prefs . setDefault ( IDebugPreferenceConstants . PREF_COLUMN_SIZE , IDebugPreferenceConstants . PREF_COLUMN_SIZE_DEFAULT ) ; prefs . setDefault ( IDebugPreferenceConstants . PREF_ROW_SIZE , IDebugPreferenceConstants . PREF_ROW_SIZE_DEFAULT ) ; prefs . setDefault ( IDebugUIConstants . PREF_PADDED_STR , IDebugPreferenceConstants . PREF_PADDED_STR_DEFAULT ) ; prefs . setDefault ( IDebugUIConstants . PREF_DEFAULT_ASCII_CODE_PAGE , IDebugPreferenceConstants . DEFAULT_ASCII_CP ) ; prefs . setDefault ( IDebugUIConstants . PREF_DEFAULT_EBCDIC_CODE_PAGE , IDebugPreferenceConstants . DEFAULT_EBCDIC_CP ) ; if ( MemoryViewUtil . isLinuxGTK ( ) ) { prefs . setDefault ( IDebugPreferenceConstants . PREF_DYNAMIC_LOAD_MEM , false ) ; } else { prefs . setDefault ( IDebugPreferenceConstants . PREF_DYNAMIC_LOAD_MEM , true ) ; } prefs . setDefault ( IDebugPreferenceConstants . PREF_TABLE_RENDERING_PAGE_SIZE , IDebugPreferenceConstants . DEFAULT_PAGE_SIZE ) ; prefs . setDefault ( IDebugPreferenceConstants . PREF_RESET_MEMORY_BLOCK , IDebugPreferenceConstants . RESET_VISIBLE ) ; prefs . setDefault ( IDebugPreferenceConstants . PREF_TABLE_RENDERING_PRE_BUFFER_SIZE , IDebugPreferenceConstants . DEFAULT_PAGE_SIZE ) ; prefs . setDefault ( IDebugPreferenceConstants . PREF_TABLE_RENDERING_POST_BUFFER_SIZE , IDebugPreferenceConstants . DEFAULT_PAGE_SIZE ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_CLOSED , true ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_DELETED , true ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_FILTER_WORKING_SETS , false ) ; prefs . setDefault ( IInternalDebugUIConstants . PREF_FILTER_LAUNCH_TYPES , false ) ; prefs . setDefault ( IDebugPreferenceConstants . DEBUG_VIEW_MODE , IDebugPreferenceConstants . DEBUG_VIEW_MODE_AUTO ) ; } private static RGB findRGB ( ColorRegistry registry , String key , RGB defaultRGB ) { if ( registry = = null ) return defaultRGB ; RGB rgb = registry . getRGB ( key ) ; if ( rgb ! = null ) return rgb ; return defaultRGB ; } private static void setDefault ( IPreferenceStore store , String key , RGB newValue , boolean fireEvent ) { if ( ! fireEvent ) { PreferenceConverter . setDefault ( store , key , newValue ) ; } else { RGB oldValue = null ; if ( store . isDefault ( key ) ) oldValue = PreferenceConverter . getDefaultColor ( store , key ) ; PreferenceConverter . setDefault ( store , key , newValue ) ; if ( oldValue ! = null & & ! oldValue . equals ( newValue ) ) store . firePropertyChangeEvent ( key , oldValue , newValue ) ; } } public static void setThemeBasedPreferences ( final IPreferenceStore store , final boolean fireEvent ) { Display display = PlatformUI . getWorkbench ( ) . getDisplay ( ) ; Runnable runnable = new Runnable ( ) { @Override public void run ( ) { ColorRegistry registry = null ; if ( PlatformUI . isWorkbenchRunning ( ) ) { registry = PlatformUI . getWorkbench ( ) . getThemeManager ( ) . getCurrentTheme ( ) . getColorRegistry ( ) ; } setDefault ( store , IDebugPreferenceConstants . CONSOLE_BAKGROUND_COLOR , findRGB ( registry , IInternalDebugUIConstants . THEME_CONSOLE_COLOR_BACKGROUND , new RGB ( <int> , <int> , <int> ) ) , fireEvent ) ; setDefault ( store , IDebugPreferenceConstants . CONSOLE_SYS_OUT_COLOR , findRGB ( registry , IInternalDebugUIConstants . THEME_CONSOLE_COLOR_STD_OUT , new RGB ( <int> , <int> , <int> ) ) , fireEvent ) ; setDefault ( store , IDebugPreferenceConstants . CONSOLE_SYS_IN_COLOR , findRGB ( registry , IInternalDebugUIConstants . THEME_CONSOLE_COLOR_STD_IN , new RGB ( <int> , <int> , <int> ) ) , fireEvent ) ; setDefault ( store , IDebugPreferenceConstants . CONSOLE_SYS_ERR_COLOR , findRGB ( registry , IInternalDebugUIConstants . THEME_CONSOLE_COLOR_STD_ERR , new RGB ( <int> , <int> , <int> ) ) , fireEvent ) ; } } ; if ( display . getThread ( ) = = Thread . currentThread ( ) ) { runnable . run ( ) ; } else { display . asyncExec ( runnable ) ; } } } 

package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . ngram . EdgeNGramTokenFilter ; import org . apache . lucene . analysis . ngram . Lucene43EdgeNGramTokenFilter ; import org . apache . lucene . analysis . ngram . NGramTokenFilter ; import org . apache . lucene . analysis . reverse . ReverseStringFilter ; import org . apache . lucene . util . Version ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; public class EdgeNGramTokenFilterFactory extends AbstractTokenFilterFactory { private final int minGram ; private final int maxGram ; public static final int SIDE_FRONT = <int> ; public static final int SIDE_BACK = <int> ; private final int side ; private org . elasticsearch . Version esVersion ; public EdgeNGramTokenFilterFactory ( IndexSettings indexSettings , Environment environment , String name , Settings settings ) { super ( indexSettings , name , settings ) ; this . minGram = settings . getAsInt ( <str> , NGramTokenFilter . DEFAULT_MIN_NGRAM_SIZE ) ; this . maxGram = settings . getAsInt ( <str> , NGramTokenFilter . DEFAULT_MAX_NGRAM_SIZE ) ; this . side = parseSide ( settings . get ( <str> , <str> ) ) ; this . esVersion = org . elasticsearch . Version . indexCreated ( indexSettings . getSettings ( ) ) ; } static int parseSide ( String side ) { switch ( side ) { case <str> : return SIDE_FRONT ; case <str> : return SIDE_BACK ; default : throw new IllegalArgumentException ( <str> + side ) ; } } @Override public TokenStream create ( TokenStream tokenStream ) { TokenStream result = tokenStream ; if ( side = = SIDE_BACK ) { result = new ReverseStringFilter ( result ) ; } if ( version . onOrAfter ( Version . LUCENE_4_3 ) & & esVersion . onOrAfter ( org . elasticsearch . Version . V_0_90_2 ) ) { result = new EdgeNGramTokenFilter ( result , minGram , maxGram ) ; } else { result = new Lucene43EdgeNGramTokenFilter ( result , minGram , maxGram ) ; } if ( side = = SIDE_BACK ) { result = new ReverseStringFilter ( result ) ; } return result ; } } 

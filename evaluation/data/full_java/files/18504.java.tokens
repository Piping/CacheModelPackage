package com . badlogic . gdx . tests ; import java . util . ArrayList ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Json ; import com . badlogic . gdx . utils . ObjectMap ; import com . badlogic . gdx . utils . reflect . ArrayReflection ; public class JsonTest extends GdxTest { Json json ; public void create ( ) { json = new Json ( ) ; Test1 test = new Test1 ( ) ; test . booleanField = true ; test . byteField = <int> ; test . charField = <str> ; test . shortField = <int> ; test . intField = <int> ; test . longField = <int> ; test . floatField = <float> ; test . doubleField = <float> ; test . BooleanField = true ; test . ByteField = - <int> ; test . CharacterField = <str> ; test . ShortField = - <int> ; test . IntegerField = - <int> ; test . LongField = - <int> ; test . FloatField = - <float> ; test . DoubleField = - <float> ; test . stringField = <str> ; test . byteArrayField = new byte [ ] { <int> , <int> , <int> , - <int> , - <int> } ; test . map = new ObjectMap ( ) ; test . map . put ( <str> , <int> ) ; test . map . put ( <str> , <int> ) ; test . map . put ( <str> , <int> ) ; test . array = new Array ( ) ; test . array . add ( <str> ) ; test . array . add ( <str> ) ; test . someEnum = SomeEnum . b ; roundTrip ( test ) ; test . someEnum = null ; roundTrip ( test ) ; test = new Test1 ( ) ; roundTrip ( test ) ; test . array = new Array ( ) ; roundTrip ( test ) ; test . array . add ( <str> ) ; roundTrip ( test ) ; test . array . add ( <str> ) ; roundTrip ( test ) ; test = new Test1 ( ) ; test . map = new ObjectMap ( ) ; roundTrip ( test ) ; test . map . put ( <str> , <int> ) ; roundTrip ( test ) ; test . map . put ( <str> , <int> ) ; test . map . put ( <str> , <int> ) ; roundTrip ( test ) ; test . map . put ( <str> , <int> ) ; test . map . put ( <str> , <int> ) ; roundTrip ( test ) ; equals ( json . toJson ( <str> ) , <str> ) ; equals ( json . toJson ( <str> ) , <str> ) ; equals ( json . toJson ( <str> ) , <str> ) ; equals ( json . toJson ( <str> ) , <str> ) ; equals ( json . toJson ( <str> ) , <str> ) ; equals ( json . toJson ( Array . with ( <int> , <int> , <int> ) , null , int . class ) , <str> ) ; equals ( json . toJson ( Array . with ( <str> , <str> , <str> ) , null , String . class ) , <str> ) ; equals ( json . toJson ( Array . with ( <str> , <str> , <str> ) , null , String . class ) , <str> ) ; equals ( json . toJson ( Array . with ( <str> , <str> , <str> ) , null , String . class ) , <str> ) ; System . out . println ( ) ; System . out . println ( <str> ) ; } private String roundTrip ( Object object ) { String text = json . toJson ( object ) ; System . out . println ( text ) ; test ( text , object ) ; text = json . prettyPrint ( object , <int> ) ; test ( text , object ) ; return text ; } private void test ( String text , Object object ) { check ( text , object ) ; text = text . replace ( <str> , <str> ) ; check ( text , object ) ; text = text . replace ( <str> , <str> ) ; text = text . replace ( <str> , <str> ) ; text = text . replace ( <str> , <str> ) ; text = text . replace ( <str> , <str> ) ; text = text . replace ( <str> , <str> ) ; check ( text , object ) ; text = text . replace ( <str> , <str> ) ; check ( text , object ) ; text = text . replace ( <str> , <str> ) ; check ( text , object ) ; text = text . replace ( <str> , <str> ) ; check ( text , object ) ; text = text . replace ( <str> , <str> ) ; check ( text , object ) ; text = text . replace ( <str> , <str> ) ; check ( text , object ) ; text = text . replace ( <str> , <str> ) ; check ( text , object ) ; } private void check ( String text , Object object ) { Object object2 = json . fromJson ( object . getClass ( ) , text ) ; equals ( object , object2 ) ; } private void equals ( Object a , Object b ) { if ( ! a . equals ( b ) ) throw new RuntimeException ( <str> + a + <str> + b ) ; } static public class Test1 { public boolean booleanField ; public byte byteField ; public char charField ; public short shortField ; public int intField ; public long longField ; public float floatField ; public double doubleField ; public Boolean BooleanField ; public Byte ByteField ; public Character CharacterField ; public Short ShortField ; public Integer IntegerField ; public Long LongField ; public Float FloatField ; public Double DoubleField ; public String stringField ; public byte [ ] byteArrayField ; public Object object ; public ObjectMap < String , Integer > map ; public Array < String > array ; public SomeEnum someEnum ; public boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; Test1 other = ( Test1 ) obj ; if ( BooleanField = = null ) { if ( other . BooleanField ! = null ) return false ; } else if ( ! BooleanField . equals ( other . BooleanField ) ) return false ; if ( ByteField = = null ) { if ( other . ByteField ! = null ) return false ; } else if ( ! ByteField . equals ( other . ByteField ) ) return false ; if ( CharacterField = = null ) { if ( other . CharacterField ! = null ) return false ; } else if ( ! CharacterField . equals ( other . CharacterField ) ) return false ; if ( DoubleField = = null ) { if ( other . DoubleField ! = null ) return false ; } else if ( ! DoubleField . equals ( other . DoubleField ) ) return false ; if ( FloatField = = null ) { if ( other . FloatField ! = null ) return false ; } else if ( ! FloatField . equals ( other . FloatField ) ) return false ; if ( IntegerField = = null ) { if ( other . IntegerField ! = null ) return false ; } else if ( ! IntegerField . equals ( other . IntegerField ) ) return false ; if ( LongField = = null ) { if ( other . LongField ! = null ) return false ; } else if ( ! LongField . equals ( other . LongField ) ) return false ; if ( ShortField = = null ) { if ( other . ShortField ! = null ) return false ; } else if ( ! ShortField . equals ( other . ShortField ) ) return false ; if ( stringField = = null ) { if ( other . stringField ! = null ) return false ; } else if ( ! stringField . equals ( other . stringField ) ) return false ; if ( booleanField ! = other . booleanField ) return false ; Object list1 = arrayToList ( byteArrayField ) ; Object list2 = arrayToList ( other . byteArrayField ) ; if ( list1 ! = list2 ) { if ( list1 = = null | | list2 = = null ) return false ; if ( ! list1 . equals ( list2 ) ) return false ; } if ( object ! = other . object ) { if ( object = = null | | other . object = = null ) return false ; if ( object ! = this & & ! object . equals ( other . object ) ) return false ; } if ( map ! = other . map ) { if ( map = = null | | other . map = = null ) return false ; if ( ! map . keys ( ) . toArray ( ) . equals ( other . map . keys ( ) . toArray ( ) ) ) return false ; if ( ! map . values ( ) . toArray ( ) . equals ( other . map . values ( ) . toArray ( ) ) ) return false ; } if ( array ! = other . array ) { if ( array = = null | | other . array = = null ) return false ; if ( ! array . equals ( other . array ) ) return false ; } if ( byteField ! = other . byteField ) return false ; if ( charField ! = other . charField ) return false ; if ( Double . doubleToLongBits ( doubleField ) ! = Double . doubleToLongBits ( other . doubleField ) ) return false ; if ( Float . floatToIntBits ( floatField ) ! = Float . floatToIntBits ( other . floatField ) ) return false ; if ( intField ! = other . intField ) return false ; if ( longField ! = other . longField ) return false ; if ( shortField ! = other . shortField ) return false ; return true ; } } public enum SomeEnum { a , b , c ; } static Object arrayToList ( Object array ) { if ( array = = null | | ! array . getClass ( ) . isArray ( ) ) return array ; ArrayList list = new ArrayList ( ArrayReflection . getLength ( array ) ) ; for ( int i = <int> , n = ArrayReflection . getLength ( array ) ; i < n ; i + + ) list . add ( arrayToList ( ArrayReflection . get ( array , i ) ) ) ; return list ; } } 

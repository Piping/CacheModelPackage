package org . apache . cassandra . transport ; import java . util . concurrent . ConcurrentMap ; import io . netty . channel . Channel ; import org . apache . cassandra . auth . IAuthenticator ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . QueryState ; import org . cliffc . high_scale_lib . NonBlockingHashMap ; public class ServerConnection extends Connection { private enum State { UNINITIALIZED , AUTHENTICATION , READY } private volatile IAuthenticator . SaslNegotiator saslNegotiator ; private final ClientState clientState ; private volatile State state ; private final ConcurrentMap < Integer , QueryState > queryStates = new NonBlockingHashMap < > ( ) ; public ServerConnection ( Channel channel , int version , Connection . Tracker tracker ) { super ( channel , version , tracker ) ; this . clientState = ClientState . forExternalCalls ( channel . remoteAddress ( ) ) ; this . state = State . UNINITIALIZED ; } private QueryState getQueryState ( int streamId ) { QueryState qState = queryStates . get ( streamId ) ; if ( qState = = null ) { QueryState newState = new QueryState ( clientState ) ; if ( ( qState = queryStates . putIfAbsent ( streamId , newState ) ) = = null ) qState = newState ; } return qState ; } public QueryState validateNewMessage ( Message . Type type , int version , int streamId ) { switch ( state ) { case UNINITIALIZED : if ( type ! = Message . Type . STARTUP & & type ! = Message . Type . OPTIONS ) throw new ProtocolException ( String . format ( <str> , type ) ) ; break ; case AUTHENTICATION : if ( type ! = Message . Type . AUTH_RESPONSE & & type ! = Message . Type . CREDENTIALS ) throw new ProtocolException ( String . format ( <str> , type , version = = <int> ? <str> : <str> ) ) ; break ; case READY : if ( type = = Message . Type . STARTUP ) throw new ProtocolException ( <str> ) ; break ; default : throw new AssertionError ( ) ; } return getQueryState ( streamId ) ; } public void applyStateTransition ( Message . Type requestType , Message . Type responseType ) { switch ( state ) { case UNINITIALIZED : if ( requestType = = Message . Type . STARTUP ) { if ( responseType = = Message . Type . AUTHENTICATE ) state = State . AUTHENTICATION ; else if ( responseType = = Message . Type . READY ) state = State . READY ; } break ; case AUTHENTICATION : assert requestType = = Message . Type . AUTH_RESPONSE | | requestType = = Message . Type . CREDENTIALS ; if ( responseType = = Message . Type . READY | | responseType = = Message . Type . AUTH_SUCCESS ) { state = State . READY ; saslNegotiator = null ; } break ; case READY : break ; default : throw new AssertionError ( ) ; } } public IAuthenticator . SaslNegotiator getSaslNegotiator ( QueryState queryState ) { if ( saslNegotiator = = null ) saslNegotiator = DatabaseDescriptor . getAuthenticator ( ) . newSaslNegotiator ( queryState . getClientAddress ( ) ) ; return saslNegotiator ; } } 

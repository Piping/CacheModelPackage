package org . elasticsearch . cluster . ack ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . action . admin . cluster . reroute . ClusterRerouteResponse ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . action . admin . indices . alias . IndicesAliasesResponse ; import org . elasticsearch . action . admin . indices . close . CloseIndexResponse ; import org . elasticsearch . action . admin . indices . create . CreateIndexResponse ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingResponse ; import org . elasticsearch . action . admin . indices . settings . put . UpdateSettingsResponse ; import org . elasticsearch . action . admin . indices . warmer . delete . DeleteWarmerResponse ; import org . elasticsearch . action . admin . indices . warmer . get . GetWarmersResponse ; import org . elasticsearch . action . admin . indices . warmer . put . PutWarmerResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . AliasMetaData ; import org . elasticsearch . cluster . metadata . AliasOrIndex ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . IndexMetaData . State ; import org . elasticsearch . cluster . routing . RoutingNode ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . ShardRoutingState ; import org . elasticsearch . cluster . routing . allocation . command . MoveAllocationCommand ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . DiscoverySettings ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . search . warmer . IndexWarmersMetaData ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import java . util . List ; import java . util . concurrent . TimeUnit ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_SHARDS ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; @ClusterScope ( minNumDataNodes = <int> ) public class AckIT extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . builder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( DiscoverySettings . PUBLISH_TIMEOUT , <int> ) . build ( ) ; } public void testUpdateSettingsAcknowledgement ( ) { createIndex ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( <str> , <int> , TimeUnit . MILLISECONDS ) ) ) ; for ( Client client : clients ( ) ) { String refreshInterval = getLocalClusterState ( client ) . metaData ( ) . index ( <str> ) . getSettings ( ) . get ( <str> ) ; assertThat ( refreshInterval , equalTo ( <str> ) ) ; } } public void testUpdateSettingsNoAcknowledgement ( ) { createIndex ( <str> ) ; UpdateSettingsResponse updateSettingsResponse = client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setTimeout ( <str> ) . setSettings ( Settings . builder ( ) . put ( <str> , <int> , TimeUnit . MILLISECONDS ) ) . get ( ) ; assertThat ( updateSettingsResponse . isAcknowledged ( ) , equalTo ( false ) ) ; } public void testPutWarmerAcknowledgement ( ) { createIndex ( <str> ) ; index ( <str> , <str> , <str> , <str> , <int> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) ) ; for ( Client client : clients ( ) ) { GetWarmersResponse getWarmersResponse = client . admin ( ) . indices ( ) . prepareGetWarmers ( ) . setLocal ( true ) . get ( ) ; assertThat ( getWarmersResponse . warmers ( ) . size ( ) , equalTo ( <int> ) ) ; ObjectObjectCursor < String , List < IndexWarmersMetaData . Entry > > entry = getWarmersResponse . warmers ( ) . iterator ( ) . next ( ) ; assertThat ( entry . key , equalTo ( <str> ) ) ; assertThat ( entry . value . size ( ) , equalTo ( <int> ) ) ; assertThat ( entry . value . get ( <int> ) . name ( ) , equalTo ( <str> ) ) ; } } public void testPutWarmerNoAcknowledgement ( ) throws InterruptedException { createIndex ( <str> ) ; index ( <str> , <str> , <str> , <str> , <int> ) ; PutWarmerResponse putWarmerResponse = client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setTimeout ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) . get ( ) ; assertThat ( putWarmerResponse . isAcknowledged ( ) , equalTo ( false ) ) ; assertTrue ( awaitBusy ( ( ) - > { for ( Client client : clients ( ) ) { GetWarmersResponse getWarmersResponse = client . admin ( ) . indices ( ) . prepareGetWarmers ( ) . setLocal ( true ) . get ( ) ; if ( getWarmersResponse . warmers ( ) . size ( ) ! = <int> ) { return false ; } } return true ; } ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDeleteWarmer ( ) . setIndices ( <str> ) . setNames ( <str> ) ) ; } public void testDeleteWarmerAcknowledgement ( ) { createIndex ( <str> ) ; index ( <str> , <str> , <str> , <str> , <int> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDeleteWarmer ( ) . setIndices ( <str> ) . setNames ( <str> ) ) ; for ( Client client : clients ( ) ) { GetWarmersResponse getWarmersResponse = client . admin ( ) . indices ( ) . prepareGetWarmers ( ) . setLocal ( true ) . get ( ) ; assertThat ( getWarmersResponse . warmers ( ) . size ( ) , equalTo ( <int> ) ) ; } } public void testDeleteWarmerNoAcknowledgement ( ) throws InterruptedException { createIndex ( <str> ) ; index ( <str> , <str> , <str> , <str> , <int> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) ) ) ; DeleteWarmerResponse deleteWarmerResponse = client ( ) . admin ( ) . indices ( ) . prepareDeleteWarmer ( ) . setIndices ( <str> ) . setNames ( <str> ) . setTimeout ( <str> ) . get ( ) ; assertFalse ( deleteWarmerResponse . isAcknowledged ( ) ) ; assertTrue ( awaitBusy ( ( ) - > { for ( Client client : clients ( ) ) { GetWarmersResponse getWarmersResponse = client . admin ( ) . indices ( ) . prepareGetWarmers ( ) . setLocal ( true ) . get ( ) ; if ( getWarmersResponse . warmers ( ) . size ( ) > <int> ) { return false ; } } return true ; } ) ) ; } public void testClusterRerouteAcknowledgement ( ) throws InterruptedException { assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( indexSettings ( ) ) . put ( SETTING_NUMBER_OF_SHARDS , between ( cluster ( ) . numDataNodes ( ) , DEFAULT_MAX_NUM_SHARDS ) ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) ) ; ensureGreen ( ) ; MoveAllocationCommand moveAllocationCommand = getAllocationCommand ( ) ; assertAcked ( client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . add ( moveAllocationCommand ) ) ; for ( Client client : clients ( ) ) { ClusterState clusterState = getLocalClusterState ( client ) ; for ( ShardRouting shardRouting : clusterState . getRoutingNodes ( ) . routingNodeIter ( moveAllocationCommand . fromNode ( ) ) ) { if ( shardRouting . shardId ( ) . equals ( moveAllocationCommand . shardId ( ) ) ) { assertThat ( shardRouting . relocating ( ) , equalTo ( true ) ) ; } } boolean found = false ; for ( ShardRouting shardRouting : clusterState . getRoutingNodes ( ) . routingNodeIter ( moveAllocationCommand . toNode ( ) ) ) { if ( shardRouting . shardId ( ) . equals ( moveAllocationCommand . shardId ( ) ) ) { assertThat ( shardRouting . state ( ) , anyOf ( equalTo ( ShardRoutingState . INITIALIZING ) , equalTo ( ShardRoutingState . STARTED ) ) ) ; found = true ; break ; } } assertThat ( found , equalTo ( true ) ) ; } } public void testClusterRerouteNoAcknowledgement ( ) throws InterruptedException { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( SETTING_NUMBER_OF_SHARDS , between ( cluster ( ) . numDataNodes ( ) , DEFAULT_MAX_NUM_SHARDS ) ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) . get ( ) ; ensureGreen ( ) ; MoveAllocationCommand moveAllocationCommand = getAllocationCommand ( ) ; ClusterRerouteResponse clusterRerouteResponse = client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . setTimeout ( <str> ) . add ( moveAllocationCommand ) . get ( ) ; assertThat ( clusterRerouteResponse . isAcknowledged ( ) , equalTo ( false ) ) ; } public void testClusterRerouteAcknowledgementDryRun ( ) throws InterruptedException { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( SETTING_NUMBER_OF_SHARDS , between ( cluster ( ) . numDataNodes ( ) , DEFAULT_MAX_NUM_SHARDS ) ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) . get ( ) ; ensureGreen ( ) ; MoveAllocationCommand moveAllocationCommand = getAllocationCommand ( ) ; assertAcked ( client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . setDryRun ( true ) . add ( moveAllocationCommand ) ) ; ClusterStateResponse clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) ; boolean found = false ; for ( ShardRouting shardRouting : clusterStateResponse . getState ( ) . getRoutingNodes ( ) . routingNodeIter ( moveAllocationCommand . fromNode ( ) ) ) { if ( shardRouting . shardId ( ) . equals ( moveAllocationCommand . shardId ( ) ) ) { assertThat ( shardRouting . started ( ) , equalTo ( true ) ) ; found = true ; break ; } } assertThat ( found , equalTo ( true ) ) ; for ( ShardRouting shardRouting : clusterStateResponse . getState ( ) . getRoutingNodes ( ) . routingNodeIter ( moveAllocationCommand . toNode ( ) ) ) { if ( shardRouting . shardId ( ) . equals ( moveAllocationCommand . shardId ( ) ) ) { fail ( <str> + shardRouting + <str> + moveAllocationCommand . toString ( ) + <str> ) ; } } } public void testClusterRerouteNoAcknowledgementDryRun ( ) throws InterruptedException { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( SETTING_NUMBER_OF_SHARDS , between ( cluster ( ) . numDataNodes ( ) , DEFAULT_MAX_NUM_SHARDS ) ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) . get ( ) ; ensureGreen ( ) ; MoveAllocationCommand moveAllocationCommand = getAllocationCommand ( ) ; ClusterRerouteResponse clusterRerouteResponse = client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . setTimeout ( <str> ) . setDryRun ( true ) . add ( moveAllocationCommand ) . get ( ) ; assertThat ( clusterRerouteResponse . isAcknowledged ( ) , equalTo ( true ) ) ; } private MoveAllocationCommand getAllocationCommand ( ) { String fromNodeId = null ; String toNodeId = null ; ShardRouting shardToBeMoved = null ; ClusterStateResponse clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) ; for ( RoutingNode routingNode : clusterStateResponse . getState ( ) . getRoutingNodes ( ) ) { if ( routingNode . node ( ) . isDataNode ( ) ) { if ( fromNodeId = = null & & routingNode . numberOfOwningShards ( ) > <int> ) { fromNodeId = routingNode . nodeId ( ) ; shardToBeMoved = routingNode . get ( randomInt ( routingNode . size ( ) - <int> ) ) ; } else { toNodeId = routingNode . nodeId ( ) ; } if ( toNodeId ! = null & & fromNodeId ! = null ) { break ; } } } assertNotNull ( fromNodeId ) ; assertNotNull ( toNodeId ) ; assertNotNull ( shardToBeMoved ) ; logger . info ( <str> , shardToBeMoved , fromNodeId , toNodeId ) ; return new MoveAllocationCommand ( shardToBeMoved . shardId ( ) , fromNodeId , toNodeId ) ; } public void testIndicesAliasesAcknowledgement ( ) { createIndex ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareAliases ( ) . addAlias ( <str> , <str> ) ) ; for ( Client client : clients ( ) ) { AliasMetaData aliasMetaData = ( ( AliasOrIndex . Alias ) getLocalClusterState ( client ) . metaData ( ) . getAliasAndIndexLookup ( ) . get ( <str> ) ) . getFirstAliasMetaData ( ) ; assertThat ( aliasMetaData . alias ( ) , equalTo ( <str> ) ) ; } } } public void testIndicesAliasesNoAcknowledgement ( ) { createIndex ( <str> ) ; IndicesAliasesResponse indicesAliasesResponse = client ( ) . admin ( ) . indices ( ) . prepareAliases ( ) . addAlias ( <str> , <str> ) . setTimeout ( <str> ) . get ( ) ; assertThat ( indicesAliasesResponse . isAcknowledged ( ) , equalTo ( false ) ) ; } public void testCloseIndexAcknowledgement ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) ) ; for ( Client client : clients ( ) ) { IndexMetaData indexMetaData = getLocalClusterState ( client ) . metaData ( ) . indices ( ) . get ( <str> ) ; assertThat ( indexMetaData . getState ( ) , equalTo ( State . CLOSE ) ) ; } } public void testCloseIndexNoAcknowledgement ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; CloseIndexResponse closeIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . setTimeout ( <str> ) . get ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( false ) ) ; } public void testOpenIndexAcknowledgement ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) ) ; for ( Client client : clients ( ) ) { IndexMetaData indexMetaData = getLocalClusterState ( client ) . metaData ( ) . indices ( ) . get ( <str> ) ; assertThat ( indexMetaData . getState ( ) , equalTo ( State . OPEN ) ) ; } } public void testPutMappingAcknowledgement ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> , <str> ) ) ; for ( Client client : clients ( ) ) { assertThat ( getLocalClusterState ( client ) . metaData ( ) . indices ( ) . get ( <str> ) . mapping ( <str> ) , notNullValue ( ) ) ; } } public void testPutMappingNoAcknowledgement ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( <str> , <str> ) . setTimeout ( <str> ) . get ( ) ; assertThat ( putMappingResponse . isAcknowledged ( ) , equalTo ( false ) ) ; } public void testCreateIndexAcknowledgement ( ) { createIndex ( <str> ) ; for ( Client client : clients ( ) ) { assertThat ( getLocalClusterState ( client ) . metaData ( ) . indices ( ) . containsKey ( <str> ) , equalTo ( true ) ) ; } ensureGreen ( ) ; } public void testCreateIndexNoAcknowledgement ( ) { CreateIndexResponse createIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setTimeout ( <str> ) . get ( ) ; assertThat ( createIndexResponse . isAcknowledged ( ) , equalTo ( false ) ) ; ensureGreen ( ) ; } private static ClusterState getLocalClusterState ( Client client ) { return client . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . get ( ) . getState ( ) ; } } 

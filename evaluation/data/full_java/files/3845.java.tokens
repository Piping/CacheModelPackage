package org . eclipse . debug . examples . ui . midi . adapters ; import javax . sound . midi . MidiEvent ; import javax . sound . midi . Track ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . examples . ui . pda . views . CheckboxView ; import org . eclipse . debug . internal . ui . model . elements . ElementContentProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerUpdate ; import org . eclipse . debug . ui . IDebugUIConstants ; public class TrackContentProvider extends ElementContentProvider { @Override protected int getChildCount ( Object element , IPresentationContext context , IViewerUpdate monitor ) throws CoreException { Track track = ( Track ) element ; if ( IDebugUIConstants . ID_VARIABLE_VIEW . equals ( context . getId ( ) ) | | CheckboxView . ID . equals ( context . getId ( ) ) ) { return track . size ( ) ; } return <int> ; } @Override protected Object [ ] getChildren ( Object parent , int index , int length , IPresentationContext context , IViewerUpdate monitor ) throws CoreException { if ( IDebugUIConstants . ID_VARIABLE_VIEW . equals ( context . getId ( ) ) | | CheckboxView . ID . equals ( context . getId ( ) ) ) { Track track = ( Track ) parent ; MidiEvent [ ] events = new MidiEvent [ length ] ; for ( int i = <int> ; i < length ; i + + ) { events [ i ] = track . get ( i + index ) ; } return events ; } return EMPTY ; } @Override protected boolean supportsContextId ( String id ) { return IDebugUIConstants . ID_VARIABLE_VIEW . equals ( id ) | | CheckboxView . ID . equals ( id ) ; } } 

package org . elasticsearch . action . admin . indices . settings . get ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . settings . Settings ; import java . io . IOException ; public class GetSettingsResponse extends ActionResponse { private ImmutableOpenMap < String , Settings > indexToSettings = ImmutableOpenMap . of ( ) ; public GetSettingsResponse ( ImmutableOpenMap < String , Settings > indexToSettings ) { this . indexToSettings = indexToSettings ; } GetSettingsResponse ( ) { } public ImmutableOpenMap < String , Settings > getIndexToSettings ( ) { return indexToSettings ; } public String getSetting ( String index , String setting ) { Settings settings = indexToSettings . get ( index ) ; if ( setting ! = null ) { return settings . get ( setting ) ; } else { return null ; } } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; int size = in . readVInt ( ) ; ImmutableOpenMap . Builder < String , Settings > builder = ImmutableOpenMap . builder ( ) ; for ( int i = <int> ; i < size ; i + + ) { builder . put ( in . readString ( ) , Settings . readSettingsFromStream ( in ) ) ; } indexToSettings = builder . build ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( indexToSettings . size ( ) ) ; for ( ObjectObjectCursor < String , Settings > cursor : indexToSettings ) { out . writeString ( cursor . key ) ; Settings . writeSettingsToStream ( cursor . value , out ) ; } } } 

package org . apache . cassandra . db ; import java . nio . ByteBuffer ; import java . util . Comparator ; import org . apache . cassandra . dht . IPartitioner ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . dht . Token . KeyBound ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . MurmurHash ; import org . apache . cassandra . utils . IFilter . FilterKey ; public abstract class DecoratedKey implements PartitionPosition , FilterKey { public static final Comparator < DecoratedKey > comparator = new Comparator < DecoratedKey > ( ) { public int compare ( DecoratedKey o1 , DecoratedKey o2 ) { return o1 . compareTo ( o2 ) ; } } ; private final Token token ; public DecoratedKey ( Token token ) { assert token ! = null ; this . token = token ; } @Override public int hashCode ( ) { return getKey ( ) . hashCode ( ) ; } @Override public boolean equals ( Object obj ) { if ( this = = obj ) return true ; if ( obj = = null | | ! ( obj instanceof DecoratedKey ) ) return false ; DecoratedKey other = ( DecoratedKey ) obj ; return ByteBufferUtil . compareUnsigned ( getKey ( ) , other . getKey ( ) ) = = <int> ; } public int compareTo ( PartitionPosition pos ) { if ( this = = pos ) return <int> ; if ( ! ( pos instanceof DecoratedKey ) ) return - pos . compareTo ( this ) ; DecoratedKey otherKey = ( DecoratedKey ) pos ; int cmp = getToken ( ) . compareTo ( otherKey . getToken ( ) ) ; return cmp = = <int> ? ByteBufferUtil . compareUnsigned ( getKey ( ) , otherKey . getKey ( ) ) : cmp ; } public static int compareTo ( IPartitioner partitioner , ByteBuffer key , PartitionPosition position ) { if ( ! ( position instanceof DecoratedKey ) ) return - position . compareTo ( partitioner . decorateKey ( key ) ) ; DecoratedKey otherKey = ( DecoratedKey ) position ; int cmp = partitioner . getToken ( key ) . compareTo ( otherKey . getToken ( ) ) ; return cmp = = <int> ? ByteBufferUtil . compareUnsigned ( key , otherKey . getKey ( ) ) : cmp ; } public IPartitioner getPartitioner ( ) { return getToken ( ) . getPartitioner ( ) ; } public KeyBound minValue ( ) { return getPartitioner ( ) . getMinimumToken ( ) . minKeyBound ( ) ; } public boolean isMinimum ( ) { return false ; } public PartitionPosition . Kind kind ( ) { return PartitionPosition . Kind . ROW_KEY ; } @Override public String toString ( ) { String keystring = getKey ( ) = = null ? <str> : ByteBufferUtil . bytesToHex ( getKey ( ) ) ; return <str> + getToken ( ) + <str> + keystring + <str> ; } public Token getToken ( ) { return token ; } public abstract ByteBuffer getKey ( ) ; public void filterHash ( long [ ] dest ) { ByteBuffer key = getKey ( ) ; MurmurHash . hash3_x64_128 ( key , key . position ( ) , key . remaining ( ) , <int> , dest ) ; } } 

package org . elasticsearch . search . aggregations . bucket . filter ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . search . aggregations . AggregationStreams ; import org . elasticsearch . search . aggregations . InternalAggregations ; import org . elasticsearch . search . aggregations . bucket . InternalSingleBucketAggregation ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class InternalFilter extends InternalSingleBucketAggregation implements Filter { public final static Type TYPE = new Type ( <str> ) ; public final static AggregationStreams . Stream STREAM = new AggregationStreams . Stream ( ) { @Override public InternalFilter readResult ( StreamInput in ) throws IOException { InternalFilter result = new InternalFilter ( ) ; result . readFrom ( in ) ; return result ; } } ; public static void registerStreams ( ) { AggregationStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } InternalFilter ( ) { } InternalFilter ( String name , long docCount , InternalAggregations subAggregations , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , docCount , subAggregations , pipelineAggregators , metaData ) ; } @Override public Type type ( ) { return TYPE ; } @Override protected InternalSingleBucketAggregation newAggregation ( String name , long docCount , InternalAggregations subAggregations ) { return new InternalFilter ( name , docCount , subAggregations , pipelineAggregators ( ) , getMetaData ( ) ) ; } } 

package io . netty . util . internal ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import sun . misc . Cleaner ; import java . lang . reflect . Field ; import java . nio . ByteBuffer ; final class Cleaner0 { private static final long CLEANER_FIELD_OFFSET ; private static final InternalLogger logger = InternalLoggerFactory . getInstance ( Cleaner0 . class ) ; static { ByteBuffer direct = ByteBuffer . allocateDirect ( <int> ) ; Field cleanerField ; long fieldOffset = - <int> ; if ( PlatformDependent0 . hasUnsafe ( ) ) { try { cleanerField = direct . getClass ( ) . getDeclaredField ( <str> ) ; cleanerField . setAccessible ( true ) ; Cleaner cleaner = ( Cleaner ) cleanerField . get ( direct ) ; cleaner . clean ( ) ; fieldOffset = PlatformDependent0 . objectFieldOffset ( cleanerField ) ; } catch ( Throwable t ) { fieldOffset = - <int> ; } } logger . debug ( <str> , fieldOffset ! = - <int> ? <str> : <str> ) ; CLEANER_FIELD_OFFSET = fieldOffset ; freeDirectBuffer ( direct ) ; } static void freeDirectBuffer ( ByteBuffer buffer ) { if ( CLEANER_FIELD_OFFSET = = - <int> | | ! buffer . isDirect ( ) ) { return ; } try { Cleaner cleaner = ( Cleaner ) PlatformDependent0 . getObject ( buffer , CLEANER_FIELD_OFFSET ) ; if ( cleaner ! = null ) { cleaner . clean ( ) ; } } catch ( Throwable t ) { } } private Cleaner0 ( ) { } } 

package org . gradle . internal . resolve ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . ModuleVersionSelector ; import org . gradle . api . artifacts . component . ComponentSelector ; import java . util . Collection ; import java . util . Iterator ; public class ModuleVersionNotFoundException extends ModuleVersionResolveException { @SuppressWarnings ( <str> ) public ModuleVersionNotFoundException ( ComponentSelector selector , String message ) { super ( selector , message ) ; } public ModuleVersionNotFoundException ( ModuleVersionSelector selector , String message ) { super ( selector , message ) ; } public ModuleVersionNotFoundException ( ModuleVersionSelector selector , Collection < String > attemptedLocations , Collection < String > unmatchedVersions , Collection < String > rejectedVersions ) { super ( selector , format ( selector , attemptedLocations , unmatchedVersions , rejectedVersions ) ) ; } public ModuleVersionNotFoundException ( ModuleVersionIdentifier id , Collection < String > attemptedLocations ) { super ( id , format ( id , attemptedLocations ) ) ; } private static String format ( ModuleVersionSelector selector , Collection < String > locations , Collection < String > unmatchedVersions , Collection < String > rejectedVersions ) { StringBuilder builder = new StringBuilder ( ) ; if ( unmatchedVersions . isEmpty ( ) & & rejectedVersions . isEmpty ( ) ) { builder . append ( String . format ( <str> , selector , selector . getGroup ( ) , selector . getName ( ) ) ) ; } else { builder . append ( String . format ( <str> , selector ) ) ; if ( ! unmatchedVersions . isEmpty ( ) ) { builder . append ( String . format ( <str> ) ) ; appendSizeLimited ( builder , unmatchedVersions ) ; } if ( ! rejectedVersions . isEmpty ( ) ) { builder . append ( String . format ( <str> ) ) ; appendSizeLimited ( builder , rejectedVersions ) ; } } addLocations ( builder , locations ) ; return builder . toString ( ) ; } private static String format ( ModuleVersionIdentifier id , Collection < String > locations ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( String . format ( <str> , id ) ) ; addLocations ( builder , locations ) ; return builder . toString ( ) ; } private static void appendSizeLimited ( StringBuilder builder , Collection < String > values ) { Iterator < String > iterator = values . iterator ( ) ; int count = Math . min ( <int> , values . size ( ) ) ; for ( int i = <int> ; i < count ; i + + ) { builder . append ( String . format ( <str> , iterator . next ( ) ) ) ; } if ( count < values . size ( ) ) { builder . append ( String . format ( <str> , values . size ( ) - count ) ) ; } } private static void addLocations ( StringBuilder builder , Collection < String > locations ) { if ( locations . isEmpty ( ) ) { return ; } builder . append ( String . format ( <str> ) ) ; for ( String location : locations ) { builder . append ( String . format ( <str> , location ) ) ; } } } 

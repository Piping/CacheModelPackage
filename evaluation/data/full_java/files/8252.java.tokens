package org . elasticsearch . index . query ; import org . apache . lucene . queryparser . classic . QueryParser ; import org . apache . lucene . search . BooleanClause ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; public class OperatorTests extends ESTestCase { public void testValidOrdinals ( ) { assertThat ( Operator . OR . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( Operator . AND . ordinal ( ) , equalTo ( <int> ) ) ; } public void testWriteTo ( ) throws Exception { try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { Operator . OR . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { Operator . AND . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } } public void testReadFrom ( ) throws Exception { try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( Operator . readOperatorFrom ( in ) , equalTo ( Operator . OR ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( Operator . readOperatorFrom ( in ) , equalTo ( Operator . AND ) ) ; } } } public void testToBooleanClauseOccur ( ) { assertThat ( Operator . AND . toBooleanClauseOccur ( ) , equalTo ( BooleanClause . Occur . MUST ) ) ; assertThat ( Operator . OR . toBooleanClauseOccur ( ) , equalTo ( BooleanClause . Occur . SHOULD ) ) ; } public void testToQueryParserOperator ( ) { assertThat ( Operator . AND . toQueryParserOperator ( ) , equalTo ( QueryParser . Operator . AND ) ) ; assertThat ( Operator . OR . toQueryParserOperator ( ) , equalTo ( QueryParser . Operator . OR ) ) ; } public void testFromString ( ) { assertThat ( Operator . fromString ( <str> ) , equalTo ( Operator . AND ) ) ; assertThat ( Operator . fromString ( <str> ) , equalTo ( Operator . AND ) ) ; assertThat ( Operator . fromString ( <str> ) , equalTo ( Operator . AND ) ) ; assertThat ( Operator . fromString ( <str> ) , equalTo ( Operator . OR ) ) ; assertThat ( Operator . fromString ( <str> ) , equalTo ( Operator . OR ) ) ; assertThat ( Operator . fromString ( <str> ) , equalTo ( Operator . OR ) ) ; } } 

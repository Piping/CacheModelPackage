package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanOrQuery ; import org . apache . lucene . search . spans . SpanQuery ; import java . io . IOException ; import java . util . Iterator ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . instanceOf ; public class SpanOrQueryBuilderTests extends AbstractQueryTestCase < SpanOrQueryBuilder > { @Override protected SpanOrQueryBuilder doCreateTestQueryBuilder ( ) { SpanTermQueryBuilder [ ] spanTermQueries = new SpanTermQueryBuilderTests ( ) . createSpanTermQueryBuilders ( randomIntBetween ( <int> , <int> ) ) ; SpanOrQueryBuilder queryBuilder = new SpanOrQueryBuilder ( spanTermQueries [ <int> ] ) ; for ( int i = <int> ; i < spanTermQueries . length ; i + + ) { queryBuilder . clause ( spanTermQueries [ i ] ) ; } return queryBuilder ; } @Override protected void doAssertLuceneQuery ( SpanOrQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( SpanOrQuery . class ) ) ; SpanOrQuery spanOrQuery = ( SpanOrQuery ) query ; assertThat ( spanOrQuery . getClauses ( ) . length , equalTo ( queryBuilder . clauses ( ) . size ( ) ) ) ; Iterator < SpanQueryBuilder > spanQueryBuilderIterator = queryBuilder . clauses ( ) . iterator ( ) ; for ( SpanQuery spanQuery : spanOrQuery . getClauses ( ) ) { assertThat ( spanQuery , equalTo ( spanQueryBuilderIterator . next ( ) . toQuery ( context ) ) ) ; } } public void testIllegalArguments ( ) { try { new SpanOrQueryBuilder ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { SpanOrQueryBuilder spanOrBuilder = new SpanOrQueryBuilder ( SpanTermQueryBuilder . PROTOTYPE ) ; spanOrBuilder . clause ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; SpanOrQueryBuilder parsed = ( SpanOrQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <int> , parsed . clauses ( ) . size ( ) ) ; } } 

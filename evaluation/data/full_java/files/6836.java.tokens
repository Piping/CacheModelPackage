package org . elasticsearch . indices . analysis ; import org . apache . lucene . analysis . hunspell . Dictionary ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . inject . AbstractModule ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . analysis . * ; import java . io . IOException ; import java . util . * ; public final class AnalysisModule extends AbstractModule { static { Settings build = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . build ( ) ; IndexMetaData metaData = IndexMetaData . builder ( <str> ) . settings ( build ) . build ( ) ; NA_INDEX_SETTINGS = new IndexSettings ( metaData , Settings . EMPTY , Collections . emptyList ( ) ) ; } private static final IndexSettings NA_INDEX_SETTINGS ; private final Environment environment ; private final Map < String , AnalysisProvider < CharFilterFactory > > charFilters = new HashMap < > ( ) ; private final Map < String , AnalysisProvider < TokenFilterFactory > > tokenFilters = new HashMap < > ( ) ; private final Map < String , AnalysisProvider < TokenizerFactory > > tokenizers = new HashMap < > ( ) ; private final Map < String , AnalysisProvider < AnalyzerProvider > > analyzers = new HashMap < > ( ) ; private final Map < String , org . apache . lucene . analysis . hunspell . Dictionary > knownDictionaries = new HashMap < > ( ) ; public AnalysisModule ( Environment environment ) { this . environment = environment ; } public void registerCharFilter ( String name , AnalysisProvider < CharFilterFactory > charFilter ) { if ( charFilter = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( charFilters . putIfAbsent ( name , charFilter ) ! = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } } public void registerTokenFilter ( String name , AnalysisProvider < TokenFilterFactory > tokenFilter ) { if ( tokenFilter = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( tokenFilters . putIfAbsent ( name , tokenFilter ) ! = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } } public void registerTokenizer ( String name , AnalysisProvider < TokenizerFactory > tokenizer ) { if ( tokenizer = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( tokenizers . putIfAbsent ( name , tokenizer ) ! = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } } public void registerAnalyzer ( String name , AnalysisProvider < AnalyzerProvider > analyzer ) { if ( analyzer = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( analyzers . putIfAbsent ( name , analyzer ) ! = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } } public void registerHunspellDictionary ( String name , Dictionary dictionary ) { if ( knownDictionaries . putIfAbsent ( name , dictionary ) ! = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } } @Override protected void configure ( ) { try { HunspellService service = new HunspellService ( environment . settings ( ) , environment , knownDictionaries ) ; AnalysisRegistry registry = new AnalysisRegistry ( service , environment , charFilters , tokenFilters , tokenizers , analyzers ) ; bind ( HunspellService . class ) . toInstance ( service ) ; bind ( AnalysisRegistry . class ) . toInstance ( registry ) ; } catch ( IOException e ) { throw new ElasticsearchException ( <str> , e ) ; } } public interface AnalysisProvider < T > { T get ( IndexSettings indexSettings , Environment environment , String name , Settings settings ) throws IOException ; default T get ( Environment environment , String name ) throws IOException { if ( requiresAnalysisSettings ( ) ) { throw new IllegalArgumentException ( <str> ) ; } return get ( NA_INDEX_SETTINGS , environment , name , NA_INDEX_SETTINGS . getSettings ( ) ) ; } default boolean requiresAnalysisSettings ( ) { return false ; } } } 

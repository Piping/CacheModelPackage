package org . apache . cassandra . service ; import java . net . InetAddress ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . net . MessageIn ; import org . apache . cassandra . db . ConsistencyLevel ; import org . apache . cassandra . db . WriteType ; public class WriteResponseHandler < T > extends AbstractWriteResponseHandler < T > { protected static final Logger logger = LoggerFactory . getLogger ( WriteResponseHandler . class ) ; protected volatile int responses ; private static final AtomicIntegerFieldUpdater < WriteResponseHandler > responsesUpdater = AtomicIntegerFieldUpdater . newUpdater ( WriteResponseHandler . class , <str> ) ; public WriteResponseHandler ( Collection < InetAddress > writeEndpoints , Collection < InetAddress > pendingEndpoints , ConsistencyLevel consistencyLevel , Keyspace keyspace , Runnable callback , WriteType writeType ) { super ( keyspace , writeEndpoints , pendingEndpoints , consistencyLevel , callback , writeType ) ; responses = totalBlockFor ( ) ; } public WriteResponseHandler ( InetAddress endpoint , WriteType writeType , Runnable callback ) { this ( Arrays . asList ( endpoint ) , Collections . < InetAddress > emptyList ( ) , ConsistencyLevel . ONE , null , callback , writeType ) ; } public WriteResponseHandler ( InetAddress endpoint , WriteType writeType ) { this ( endpoint , writeType , null ) ; } public void response ( MessageIn < T > m ) { if ( responsesUpdater . decrementAndGet ( this ) = = <int> ) signal ( ) ; } protected int ackCount ( ) { return totalBlockFor ( ) - responses ; } public boolean isLatencyForSnitch ( ) { return false ; } } 

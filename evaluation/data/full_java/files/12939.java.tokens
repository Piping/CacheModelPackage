package org . gradle . api . reporting . dependencies . internal ; import com . googlecode . jatl . Html ; import org . gradle . api . Project ; import org . gradle . api . Transformer ; import org . gradle . reporting . HtmlPageBuilder ; import org . gradle . reporting . ReportRenderer ; import org . gradle . util . GradleVersion ; import java . io . IOException ; import java . io . Writer ; import java . util . Date ; import java . util . Set ; public class ProjectsPageRenderer extends ReportRenderer < Set < Project > , HtmlPageBuilder < Writer > > { private final Transformer < String , Project > namingScheme ; public ProjectsPageRenderer ( Transformer < String , Project > namingScheme ) { this . namingScheme = namingScheme ; } @Override public void render ( final Set < Project > projects , final HtmlPageBuilder < Writer > builder ) throws IOException { final String baseCssLink = builder . requireResource ( getClass ( ) . getResource ( <str> ) ) ; final String cssLink = builder . requireResource ( getClass ( ) . getResource ( <str> ) ) ; new Html ( builder . getOutput ( ) ) { { html ( ) ; head ( ) ; meta ( ) . httpEquiv ( <str> ) . content ( <str> ) ; meta ( ) . httpEquiv ( <str> ) . content ( <str> ) ; link ( ) . rel ( <str> ) . type ( <str> ) . href ( baseCssLink ) . end ( ) ; link ( ) . rel ( <str> ) . type ( <str> ) . href ( cssLink ) . end ( ) ; title ( ) . text ( <str> ) . end ( ) ; end ( ) ; body ( ) ; div ( ) . id ( <str> ) ; h1 ( ) . text ( <str> ) . end ( ) ; div ( ) . classAttr ( <str> ) ; table ( ) ; thead ( ) ; tr ( ) ; th ( ) . text ( <str> ) . end ( ) ; th ( ) . text ( <str> ) . end ( ) ; end ( ) ; end ( ) ; tbody ( ) ; for ( Project project : projects ) { tr ( ) ; td ( ) . a ( ) . href ( namingScheme . transform ( project ) ) . text ( project . toString ( ) ) . end ( ) . end ( ) ; td ( ) . text ( project . getDescription ( ) ) . end ( ) ; end ( ) ; } end ( ) ; end ( ) ; end ( ) ; div ( ) . id ( <str> ) ; p ( ) ; text ( <str> ) ; a ( ) . href ( <str> ) . text ( GradleVersion . current ( ) . toString ( ) ) . end ( ) ; text ( String . format ( <str> , builder . formatDate ( new Date ( ) ) ) ) ; end ( ) ; end ( ) ; end ( ) ; end ( ) ; endAll ( ) ; } } ; } } 

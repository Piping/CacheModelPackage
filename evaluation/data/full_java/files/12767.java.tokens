package org . gradle . api . internal . artifacts . repositories . resolver ; import com . google . common . collect . ImmutableSet ; import org . gradle . api . Nullable ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . ModuleComponentRepositoryAccess ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . DescriptorParseContext ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . MetaDataParser ; import org . gradle . api . internal . artifacts . repositories . transport . RepositoryTransport ; import org . gradle . api . internal . component . ArtifactType ; import org . gradle . internal . Transformers ; import org . gradle . internal . component . external . model . * ; import org . gradle . internal . component . model . * ; import org . gradle . internal . resolve . result . BuildableArtifactSetResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import org . gradle . internal . resolve . result . DefaultResourceAwareResolveResult ; import org . gradle . internal . resolve . result . ResourceAwareResolveResult ; import org . gradle . internal . resource . ExternalResourceName ; import org . gradle . internal . resource . local . LocallyAvailableExternalResource ; import org . gradle . internal . resource . ResourceNotFoundException ; import org . gradle . internal . resource . local . FileStore ; import org . gradle . internal . resource . local . LocallyAvailableResourceFinder ; import java . net . URI ; import java . util . * ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class MavenResolver extends ExternalResourceResolver { private final URI root ; private final List < URI > artifactRoots = new ArrayList < URI > ( ) ; private final MavenMetadataLoader mavenMetaDataLoader ; private final MetaDataParser < DefaultMavenModuleResolveMetaData > metaDataParser ; private static final Pattern UNIQUE_SNAPSHOT = Pattern . compile ( <str> ) ; public MavenResolver ( String name , URI rootUri , RepositoryTransport transport , LocallyAvailableResourceFinder < ModuleComponentArtifactMetaData > locallyAvailableResourceFinder , FileStore < ModuleComponentArtifactMetaData > artifactFileStore , MetaDataParser < DefaultMavenModuleResolveMetaData > pomParser ) { super ( name , transport . isLocal ( ) , transport . getRepository ( ) , transport . getResourceAccessor ( ) , new ChainedVersionLister ( new MavenVersionLister ( transport . getRepository ( ) ) , new ResourceVersionLister ( transport . getRepository ( ) ) ) , locallyAvailableResourceFinder , artifactFileStore ) ; this . metaDataParser = pomParser ; this . mavenMetaDataLoader = new MavenMetadataLoader ( transport . getRepository ( ) ) ; this . root = rootUri ; updatePatterns ( ) ; } @Override public String toString ( ) { return String . format ( <str> , getName ( ) ) ; } public URI getRoot ( ) { return root ; } protected void doResolveComponentMetaData ( ModuleComponentIdentifier moduleComponentIdentifier , ComponentOverrideMetadata prescribedMetaData , BuildableModuleComponentMetaDataResolveResult result ) { if ( isNonUniqueSnapshot ( moduleComponentIdentifier ) ) { MavenUniqueSnapshotModuleSource uniqueSnapshotVersion = findUniqueSnapshotVersion ( moduleComponentIdentifier , result ) ; if ( uniqueSnapshotVersion ! = null ) { MavenUniqueSnapshotComponentIdentifier snapshotIdentifier = composeSnapshotIdentifier ( moduleComponentIdentifier , uniqueSnapshotVersion ) ; resolveUniqueSnapshotDependency ( snapshotIdentifier , prescribedMetaData , result , uniqueSnapshotVersion ) ; return ; } } else { MavenUniqueSnapshotModuleSource uniqueSnapshotVersion = composeUniqueSnapshotVersion ( moduleComponentIdentifier ) ; if ( uniqueSnapshotVersion ! = null ) { MavenUniqueSnapshotComponentIdentifier snapshotIdentifier = composeSnapshotIdentifier ( moduleComponentIdentifier , uniqueSnapshotVersion ) ; resolveUniqueSnapshotDependency ( snapshotIdentifier , prescribedMetaData , result , uniqueSnapshotVersion ) ; return ; } } resolveStaticDependency ( moduleComponentIdentifier , prescribedMetaData , result , super . createArtifactResolver ( ) ) ; } protected boolean isMetaDataArtifact ( ArtifactType artifactType ) { return artifactType = = ArtifactType . MAVEN_POM ; } private MutableModuleComponentResolveMetaData processMetaData ( MutableModuleComponentResolveMetaData metaData ) { if ( isNonUniqueSnapshot ( metaData . getComponentId ( ) ) ) { metaData . setChanging ( true ) ; } return metaData ; } private void resolveUniqueSnapshotDependency ( MavenUniqueSnapshotComponentIdentifier module , ComponentOverrideMetadata prescribedMetaData , BuildableModuleComponentMetaDataResolveResult result , MavenUniqueSnapshotModuleSource snapshotSource ) { resolveStaticDependency ( module , prescribedMetaData , result , createArtifactResolver ( snapshotSource ) ) ; if ( result . getState ( ) = = BuildableModuleComponentMetaDataResolveResult . State . Resolved ) { result . getMetaData ( ) . setSource ( snapshotSource ) ; } } @Override protected ExternalResourceArtifactResolver createArtifactResolver ( ModuleSource moduleSource ) { if ( moduleSource instanceof MavenUniqueSnapshotModuleSource ) { final String timestamp = ( ( MavenUniqueSnapshotModuleSource ) moduleSource ) . getTimestamp ( ) ; return new MavenUniqueSnapshotExternalResourceArtifactResolver ( super . createArtifactResolver ( moduleSource ) , timestamp ) ; } return super . createArtifactResolver ( moduleSource ) ; } public void addArtifactLocation ( URI baseUri ) { artifactRoots . add ( baseUri ) ; updatePatterns ( ) ; } private M2ResourcePattern getWholePattern ( ) { return new M2ResourcePattern ( root , MavenPattern . M2_PATTERN ) ; } private void updatePatterns ( ) { setIvyPatterns ( Collections . singletonList ( getWholePattern ( ) ) ) ; List < ResourcePattern > artifactPatterns = new ArrayList < ResourcePattern > ( ) ; artifactPatterns . add ( getWholePattern ( ) ) ; for ( URI artifactRoot : artifactRoots ) { artifactPatterns . add ( new M2ResourcePattern ( artifactRoot , MavenPattern . M2_PATTERN ) ) ; } setArtifactPatterns ( artifactPatterns ) ; } @Override protected IvyArtifactName getMetaDataArtifactName ( String moduleName ) { return new DefaultIvyArtifactName ( moduleName , <str> , <str> ) ; } private MavenUniqueSnapshotModuleSource findUniqueSnapshotVersion ( ModuleComponentIdentifier module , ResourceAwareResolveResult result ) { ExternalResourceName metadataLocation = getWholePattern ( ) . toModuleVersionPath ( module ) . resolve ( <str> ) ; result . attempted ( metadataLocation ) ; MavenMetadata mavenMetadata = parseMavenMetadata ( metadataLocation . getUri ( ) ) ; if ( mavenMetadata . timestamp ! = null ) { String timestamp = String . format ( <str> , mavenMetadata . timestamp , mavenMetadata . buildNumber ) ; return new MavenUniqueSnapshotModuleSource ( timestamp ) ; } return null ; } @Nullable private MavenUniqueSnapshotModuleSource composeUniqueSnapshotVersion ( ModuleComponentIdentifier moduleComponentIdentifier ) { Matcher matcher = UNIQUE_SNAPSHOT . matcher ( moduleComponentIdentifier . getVersion ( ) ) ; if ( ! matcher . matches ( ) ) { return null ; } return new MavenUniqueSnapshotModuleSource ( matcher . group ( <int> ) ) ; } private MavenMetadata parseMavenMetadata ( URI metadataLocation ) { try { return mavenMetaDataLoader . load ( metadataLocation ) ; } catch ( ResourceNotFoundException e ) { return new MavenMetadata ( ) ; } } @Override public boolean isM2compatible ( ) { return true ; } public ModuleComponentRepositoryAccess getLocalAccess ( ) { return new MavenLocalRepositoryAccess ( ) ; } public ModuleComponentRepositoryAccess getRemoteAccess ( ) { return new MavenRemoteRepositoryAccess ( ) ; } @Override protected MutableModuleComponentResolveMetaData createDefaultComponentResolveMetaData ( ModuleComponentIdentifier moduleComponentIdentifier , Set < IvyArtifactName > artifacts ) { return processMetaData ( new DefaultMavenModuleResolveMetaData ( moduleComponentIdentifier , artifacts ) ) ; } protected MutableModuleComponentResolveMetaData parseMetaDataFromResource ( ModuleComponentIdentifier moduleComponentIdentifier , LocallyAvailableExternalResource cachedResource , DescriptorParseContext context ) { DefaultMavenModuleResolveMetaData metaData = metaDataParser . parseMetaData ( context , cachedResource ) ; if ( moduleComponentIdentifier instanceof MavenUniqueSnapshotComponentIdentifier ) { MavenUniqueSnapshotComponentIdentifier snapshotComponentIdentifier = ( MavenUniqueSnapshotComponentIdentifier ) moduleComponentIdentifier ; checkMetadataConsistency ( snapshotComponentIdentifier . getSnapshotComponent ( ) , metaData ) ; ModuleComponentIdentifier lossyId = DefaultModuleComponentIdentifier . newId ( moduleComponentIdentifier . getGroup ( ) , moduleComponentIdentifier . getModule ( ) , moduleComponentIdentifier . getVersion ( ) ) ; metaData . setComponentId ( lossyId ) ; metaData . setSnapshotTimestamp ( snapshotComponentIdentifier . getTimestamp ( ) ) ; } else { checkMetadataConsistency ( moduleComponentIdentifier , metaData ) ; } return processMetaData ( metaData ) ; } protected static MavenModuleResolveMetaData mavenMetaData ( ModuleComponentResolveMetaData metaData ) { return Transformers . cast ( MavenModuleResolveMetaData . class ) . transform ( metaData ) ; } private class MavenLocalRepositoryAccess extends LocalRepositoryAccess { @Override protected void resolveConfigurationArtifacts ( ModuleComponentResolveMetaData module , ComponentUsage usage , BuildableArtifactSetResolveResult result ) { if ( mavenMetaData ( module ) . isKnownJarPackaging ( ) ) { ModuleComponentArtifactMetaData artifact = module . artifact ( <str> , <str> , null ) ; result . resolved ( ImmutableSet . of ( artifact ) ) ; } } @Override protected void resolveJavadocArtifacts ( ModuleComponentResolveMetaData module , BuildableArtifactSetResolveResult result ) { } @Override protected void resolveSourceArtifacts ( ModuleComponentResolveMetaData module , BuildableArtifactSetResolveResult result ) { } } private class MavenRemoteRepositoryAccess extends RemoteRepositoryAccess { @Override protected void resolveConfigurationArtifacts ( ModuleComponentResolveMetaData module , ComponentUsage usage , BuildableArtifactSetResolveResult result ) { MavenModuleResolveMetaData mavenMetaData = mavenMetaData ( module ) ; if ( mavenMetaData . isPomPackaging ( ) ) { Set < ComponentArtifactMetaData > artifacts = new LinkedHashSet < ComponentArtifactMetaData > ( ) ; artifacts . addAll ( findOptionalArtifacts ( module , <str> , null ) ) ; result . resolved ( artifacts ) ; } else { ModuleComponentArtifactMetaData artifactMetaData = module . artifact ( mavenMetaData . getPackaging ( ) , mavenMetaData . getPackaging ( ) , null ) ; if ( createArtifactResolver ( module . getSource ( ) ) . artifactExists ( artifactMetaData , new DefaultResourceAwareResolveResult ( ) ) ) { result . resolved ( ImmutableSet . of ( artifactMetaData ) ) ; } else { ModuleComponentArtifactMetaData artifact = module . artifact ( <str> , <str> , null ) ; result . resolved ( ImmutableSet . of ( artifact ) ) ; } } } @Override protected void resolveJavadocArtifacts ( ModuleComponentResolveMetaData module , BuildableArtifactSetResolveResult result ) { result . resolved ( findOptionalArtifacts ( module , <str> , <str> ) ) ; } @Override protected void resolveSourceArtifacts ( ModuleComponentResolveMetaData module , BuildableArtifactSetResolveResult result ) { result . resolved ( findOptionalArtifacts ( module , <str> , <str> ) ) ; } } private boolean isNonUniqueSnapshot ( ModuleComponentIdentifier moduleComponentIdentifier ) { return moduleComponentIdentifier . getVersion ( ) . endsWith ( <str> ) ; } private MavenUniqueSnapshotComponentIdentifier composeSnapshotIdentifier ( ModuleComponentIdentifier moduleComponentIdentifier , MavenUniqueSnapshotModuleSource uniqueSnapshotVersion ) { return new MavenUniqueSnapshotComponentIdentifier ( moduleComponentIdentifier . getGroup ( ) , moduleComponentIdentifier . getModule ( ) , moduleComponentIdentifier . getVersion ( ) , uniqueSnapshotVersion . getTimestamp ( ) ) ; } } 

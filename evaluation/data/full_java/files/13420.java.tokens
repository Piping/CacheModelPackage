package org . gradle . api . plugins . jetty . internal ; import org . mortbay . jetty . Server ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . LineNumberReader ; import java . net . InetAddress ; import java . net . ServerSocket ; import java . net . Socket ; public class Monitor extends Thread { private static final Logger LOGGER = LoggerFactory . getLogger ( Monitor . class ) ; private String key ; ServerSocket serverSocket ; private final Server server ; public Monitor ( int port , String key , Server server ) throws IOException { this . server = server ; if ( port < = <int> ) { throw new IllegalStateException ( <str> ) ; } if ( key = = null ) { throw new IllegalStateException ( <str> ) ; } this . key = key ; setDaemon ( true ) ; setName ( <str> ) ; serverSocket = new ServerSocket ( port , <int> , InetAddress . getByName ( <str> ) ) ; serverSocket . setReuseAddress ( true ) ; } public void run ( ) { while ( serverSocket ! = null ) { Socket socket = null ; try { socket = serverSocket . accept ( ) ; socket . setSoLinger ( false , <int> ) ; LineNumberReader lin = new LineNumberReader ( new InputStreamReader ( socket . getInputStream ( ) ) ) ; String key = lin . readLine ( ) ; if ( ! this . key . equals ( key ) ) { continue ; } String cmd = lin . readLine ( ) ; if ( <str> . equals ( cmd ) ) { try { socket . close ( ) ; } catch ( Exception e ) { LOGGER . debug ( <str> , e ) ; } try { socket . close ( ) ; } catch ( Exception e ) { LOGGER . debug ( <str> , e ) ; } try { serverSocket . close ( ) ; } catch ( Exception e ) { LOGGER . debug ( <str> , e ) ; } serverSocket = null ; try { LOGGER . info ( <str> , cmd ) ; server . stop ( ) ; } catch ( Exception e ) { LOGGER . error ( <str> , e ) ; } return ; } else { LOGGER . info ( <str> ) ; } } catch ( Exception e ) { LOGGER . error ( <str> , e ) ; } finally { if ( socket ! = null ) { try { socket . close ( ) ; } catch ( Exception e ) { LOGGER . debug ( <str> , e ) ; } } socket = null ; } } } } 

package org . elasticsearch . search . aggregations . metrics ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . util . List ; import java . util . Map ; public abstract class InternalNumericMetricsAggregation extends InternalMetricsAggregation { protected ValueFormatter valueFormatter ; public static abstract class SingleValue extends InternalNumericMetricsAggregation implements NumericMetricsAggregation . SingleValue { protected SingleValue ( ) { } protected SingleValue ( String name , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , pipelineAggregators , metaData ) ; } @Override public String getValueAsString ( ) { return valueFormatter . format ( value ( ) ) ; } @Override public Object getProperty ( List < String > path ) { if ( path . isEmpty ( ) ) { return this ; } else if ( path . size ( ) = = <int> & & <str> . equals ( path . get ( <int> ) ) ) { return value ( ) ; } else { throw new IllegalArgumentException ( <str> + getName ( ) + <str> + path ) ; } } } public static abstract class MultiValue extends InternalNumericMetricsAggregation implements NumericMetricsAggregation . MultiValue { protected MultiValue ( ) { } protected MultiValue ( String name , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , pipelineAggregators , metaData ) ; } public abstract double value ( String name ) ; public String valueAsString ( String name ) { return valueFormatter . format ( value ( name ) ) ; } @Override public Object getProperty ( List < String > path ) { if ( path . isEmpty ( ) ) { return this ; } else if ( path . size ( ) = = <int> ) { return value ( path . get ( <int> ) ) ; } else { throw new IllegalArgumentException ( <str> + getName ( ) + <str> + path ) ; } } } private InternalNumericMetricsAggregation ( ) { } private InternalNumericMetricsAggregation ( String name , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , pipelineAggregators , metaData ) ; } } 

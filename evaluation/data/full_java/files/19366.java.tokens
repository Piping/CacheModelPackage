package io . netty . handler . codec . http2 ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufUtil ; import io . netty . channel . ChannelHandlerContext ; import io . netty . handler . codec . base64 . Base64 ; import io . netty . handler . codec . http . FullHttpRequest ; import io . netty . handler . codec . http . FullHttpResponse ; import io . netty . handler . codec . http . HttpServerUpgradeHandler ; import io . netty . util . CharsetUtil ; import java . nio . CharBuffer ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import static io . netty . handler . codec . base64 . Base64Dialect . URL_SAFE ; import static io . netty . handler . codec . http . HttpResponseStatus . BAD_REQUEST ; import static io . netty . handler . codec . http2 . Http2CodecUtil . FRAME_HEADER_LENGTH ; import static io . netty . handler . codec . http2 . Http2CodecUtil . HTTP_UPGRADE_SETTINGS_HEADER ; import static io . netty . handler . codec . http2 . Http2CodecUtil . writeFrameHeader ; import static io . netty . handler . codec . http2 . Http2FrameTypes . SETTINGS ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public class Http2ServerUpgradeCodec implements HttpServerUpgradeHandler . UpgradeCodec { private static final List < CharSequence > REQUIRED_UPGRADE_HEADERS = Collections . singletonList ( HTTP_UPGRADE_SETTINGS_HEADER ) ; private final String handlerName ; private final Http2ConnectionHandler connectionHandler ; private final Http2FrameReader frameReader ; public Http2ServerUpgradeCodec ( Http2ConnectionHandler connectionHandler ) { this ( null , connectionHandler ) ; } public Http2ServerUpgradeCodec ( String handlerName , Http2ConnectionHandler connectionHandler ) { this . handlerName = handlerName ; this . connectionHandler = checkNotNull ( connectionHandler , <str> ) ; frameReader = new DefaultHttp2FrameReader ( ) ; } @Override public Collection < CharSequence > requiredUpgradeHeaders ( ) { return REQUIRED_UPGRADE_HEADERS ; } @Override public void prepareUpgradeResponse ( ChannelHandlerContext ctx , FullHttpRequest upgradeRequest , FullHttpResponse upgradeResponse ) { try { List < String > upgradeHeaders = upgradeRequest . headers ( ) . getAll ( HTTP_UPGRADE_SETTINGS_HEADER ) ; if ( upgradeHeaders . isEmpty ( ) | | upgradeHeaders . size ( ) > <int> ) { throw new IllegalArgumentException ( <str> + HTTP_UPGRADE_SETTINGS_HEADER + <str> ) ; } Http2Settings settings = decodeSettingsHeader ( ctx , upgradeHeaders . get ( <int> ) ) ; connectionHandler . onHttpServerUpgrade ( settings ) ; } catch ( Throwable e ) { upgradeResponse . setStatus ( BAD_REQUEST ) ; upgradeResponse . headers ( ) . clear ( ) ; } } @Override public void upgradeTo ( final ChannelHandlerContext ctx , FullHttpRequest upgradeRequest , FullHttpResponse upgradeResponse ) { ctx . pipeline ( ) . addAfter ( ctx . name ( ) , handlerName , connectionHandler ) ; } private Http2Settings decodeSettingsHeader ( ChannelHandlerContext ctx , CharSequence settingsHeader ) throws Http2Exception { ByteBuf header = ByteBufUtil . encodeString ( ctx . alloc ( ) , CharBuffer . wrap ( settingsHeader ) , CharsetUtil . UTF_8 ) ; try { ByteBuf payload = Base64 . decode ( header , URL_SAFE ) ; ByteBuf frame = createSettingsFrame ( ctx , payload ) ; return decodeSettings ( ctx , frame ) ; } finally { header . release ( ) ; } } private Http2Settings decodeSettings ( ChannelHandlerContext ctx , ByteBuf frame ) throws Http2Exception { try { final Http2Settings decodedSettings = new Http2Settings ( ) ; frameReader . readFrame ( ctx , frame , new Http2FrameAdapter ( ) { @Override public void onSettingsRead ( ChannelHandlerContext ctx , Http2Settings settings ) { decodedSettings . copyFrom ( settings ) ; } } ) ; return decodedSettings ; } finally { frame . release ( ) ; } } private static ByteBuf createSettingsFrame ( ChannelHandlerContext ctx , ByteBuf payload ) { ByteBuf frame = ctx . alloc ( ) . buffer ( FRAME_HEADER_LENGTH + payload . readableBytes ( ) ) ; writeFrameHeader ( frame , payload . readableBytes ( ) , SETTINGS , new Http2Flags ( ) , <int> ) ; frame . writeBytes ( payload ) ; payload . release ( ) ; return frame ; } } 

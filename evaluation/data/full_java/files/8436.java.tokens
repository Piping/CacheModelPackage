package org . elasticsearch . search . aggregations ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . search . aggregations . bucket . histogram . DateHistogramInterval ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . search . aggregations . metrics . cardinality . Cardinality ; import org . elasticsearch . search . aggregations . metrics . geobounds . GeoBounds ; import org . elasticsearch . search . aggregations . metrics . geocentroid . GeoCentroid ; import org . elasticsearch . search . aggregations . metrics . percentiles . Percentiles ; import org . elasticsearch . search . aggregations . metrics . stats . Stats ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . search . aggregations . AggregationBuilders . cardinality ; import static org . elasticsearch . search . aggregations . AggregationBuilders . dateHistogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . geoBounds ; import static org . elasticsearch . search . aggregations . AggregationBuilders . geoCentroid ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . percentiles ; import static org . elasticsearch . search . aggregations . AggregationBuilders . stats ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . closeTo ; @ESIntegTestCase.SuiteScopeTestCase public class MissingValueIT extends ESIntegTestCase { @Override protected int maximumNumberOfShards ( ) { return <int> ; } @Override protected void setupSuiteScopeCluster ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) . get ( ) ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> , <str> , <float> , <str> , <str> , <str> , <str> ) ) ; } public void testUnmappedTerms ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . missing ( <str> ) ) . get ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , terms . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; } public void testStringTerms ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . missing ( <str> ) ) . get ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , terms . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . missing ( <str> ) ) . get ( ) ; assertSearchResponse ( response ) ; terms = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , terms . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; } public void testLongTerms ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . missing ( <int> ) ) . get ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , terms . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . missing ( <int> ) ) . get ( ) ; assertSearchResponse ( response ) ; terms = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , terms . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; } public void testDoubleTerms ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . missing ( <float> ) ) . get ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , terms . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . missing ( <float> ) ) . get ( ) ; assertSearchResponse ( response ) ; terms = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , terms . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; } public void testUnmappedHistogram ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . missing ( <int> ) ) . get ( ) ; assertSearchResponse ( response ) ; Histogram histogram = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , histogram . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> , histogram . getBuckets ( ) . get ( <int> ) . getKey ( ) ) ; assertEquals ( <int> , histogram . getBuckets ( ) . get ( <int> ) . getDocCount ( ) ) ; } public void testHistogram ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . missing ( <int> ) ) . get ( ) ; assertSearchResponse ( response ) ; Histogram histogram = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , histogram . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> L , histogram . getBuckets ( ) . get ( <int> ) . getKey ( ) ) ; assertEquals ( <int> , histogram . getBuckets ( ) . get ( <int> ) . getDocCount ( ) ) ; assertEquals ( <int> , histogram . getBuckets ( ) . get ( <int> ) . getKey ( ) ) ; assertEquals ( <int> , histogram . getBuckets ( ) . get ( <int> ) . getDocCount ( ) ) ; response = client ( ) . prepareSearch ( <str> ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . missing ( <int> ) ) . get ( ) ; assertSearchResponse ( response ) ; histogram = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , histogram . getBuckets ( ) . size ( ) ) ; assertEquals ( <int> L , histogram . getBuckets ( ) . get ( <int> ) . getKey ( ) ) ; assertEquals ( <int> , histogram . getBuckets ( ) . get ( <int> ) . getDocCount ( ) ) ; } public void testDateHistogram ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . YEAR ) . missing ( <str> ) ) . get ( ) ; assertSearchResponse ( response ) ; Histogram histogram = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , histogram . getBuckets ( ) . size ( ) ) ; assertEquals ( <str> , histogram . getBuckets ( ) . get ( <int> ) . getKeyAsString ( ) ) ; assertEquals ( <int> , histogram . getBuckets ( ) . get ( <int> ) . getDocCount ( ) ) ; assertEquals ( <str> , histogram . getBuckets ( ) . get ( <int> ) . getKeyAsString ( ) ) ; assertEquals ( <int> , histogram . getBuckets ( ) . get ( <int> ) . getDocCount ( ) ) ; response = client ( ) . prepareSearch ( <str> ) . addAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . YEAR ) . missing ( <str> ) ) . get ( ) ; assertSearchResponse ( response ) ; histogram = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , histogram . getBuckets ( ) . size ( ) ) ; assertEquals ( <str> , histogram . getBuckets ( ) . get ( <int> ) . getKeyAsString ( ) ) ; assertEquals ( <int> , histogram . getBuckets ( ) . get ( <int> ) . getDocCount ( ) ) ; } public void testCardinality ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( cardinality ( <str> ) . field ( <str> ) . missing ( <int> ) ) . get ( ) ; assertSearchResponse ( response ) ; Cardinality cardinality = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , cardinality . getValue ( ) ) ; } public void testPercentiles ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( percentiles ( <str> ) . field ( <str> ) . missing ( <int> ) ) . get ( ) ; assertSearchResponse ( response ) ; Percentiles percentiles = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , percentiles . percentile ( <int> ) , <int> ) ; } public void testStats ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( stats ( <str> ) . field ( <str> ) . missing ( <int> ) ) . get ( ) ; assertSearchResponse ( response ) ; Stats stats = response . getAggregations ( ) . get ( <str> ) ; assertEquals ( <int> , stats . getCount ( ) ) ; assertEquals ( <int> , stats . getAvg ( ) , <int> ) ; } public void testUnmappedGeoBounds ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( geoBounds ( <str> ) . field ( <str> ) . missing ( <str> ) ) . get ( ) ; assertSearchResponse ( response ) ; GeoBounds bounds = response . getAggregations ( ) . get ( <str> ) ; assertThat ( bounds . bottomRight ( ) . lat ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( bounds . bottomRight ( ) . lon ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( bounds . topLeft ( ) . lat ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( bounds . topLeft ( ) . lon ( ) , closeTo ( <float> , <float> ) ) ; } public void testGeoBounds ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( geoBounds ( <str> ) . field ( <str> ) . missing ( <str> ) ) . get ( ) ; assertSearchResponse ( response ) ; GeoBounds bounds = response . getAggregations ( ) . get ( <str> ) ; assertThat ( bounds . bottomRight ( ) . lat ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( bounds . bottomRight ( ) . lon ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( bounds . topLeft ( ) . lat ( ) , closeTo ( <float> , <float> ) ) ; assertThat ( bounds . topLeft ( ) . lon ( ) , closeTo ( <float> , <float> ) ) ; } public void testGeoCentroid ( ) { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( geoCentroid ( <str> ) . field ( <str> ) . missing ( <str> ) ) . get ( ) ; assertSearchResponse ( response ) ; GeoCentroid centroid = response . getAggregations ( ) . get ( <str> ) ; GeoPoint point = new GeoPoint ( <float> , <float> ) ; assertThat ( point . lat ( ) , closeTo ( centroid . centroid ( ) . lat ( ) , <float> ) ) ; assertThat ( point . lon ( ) , closeTo ( centroid . centroid ( ) . lon ( ) , <float> ) ) ; } } 

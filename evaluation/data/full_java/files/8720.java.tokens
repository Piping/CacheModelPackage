package org . elasticsearch . cloud . azure ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . PathUtils ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsException ; import org . elasticsearch . plugin . discovery . azure . AzureDiscoveryPlugin ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ThirdParty ; import java . util . Collection ; @ThirdParty public abstract class AbstractAzureTestCase extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . builder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( readSettingsFromFile ( ) ) . build ( ) ; } @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( AzureDiscoveryPlugin . class ) ; } protected Settings readSettingsFromFile ( ) { Settings . Builder settings = Settings . builder ( ) ; settings . put ( <str> , createTempDir ( ) ) ; try { if ( Strings . hasText ( System . getProperty ( <str> ) ) ) { settings . loadFromPath ( PathUtils . get ( ( System . getProperty ( <str> ) ) ) ) ; } else { throw new IllegalStateException ( <str> ) ; } } catch ( SettingsException exception ) { throw new IllegalStateException ( <str> + System . getProperty ( <str> ) , exception ) ; } return settings . build ( ) ; } } 

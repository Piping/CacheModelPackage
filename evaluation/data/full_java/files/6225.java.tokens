package org . elasticsearch . http . netty ; import org . elasticsearch . common . netty . NettyUtils ; import org . jboss . netty . buffer . ChannelBuffer ; import org . jboss . netty . buffer . ChannelBuffers ; import org . jboss . netty . buffer . CompositeChannelBuffer ; import org . jboss . netty . channel . Channel ; import org . jboss . netty . channel . ChannelHandlerContext ; import org . jboss . netty . handler . codec . http . HttpResponseEncoder ; import java . util . List ; public class ESHttpResponseEncoder extends HttpResponseEncoder { @Override protected Object encode ( ChannelHandlerContext ctx , Channel channel , Object msg ) throws Exception { Object retVal = super . encode ( ctx , channel , msg ) ; if ( retVal instanceof CompositeChannelBuffer ) { CompositeChannelBuffer ccb = ( CompositeChannelBuffer ) retVal ; if ( ccb . useGathering ( ) ! = NettyUtils . DEFAULT_GATHERING ) { List < ChannelBuffer > decompose = ccb . decompose ( ccb . readerIndex ( ) , ccb . readableBytes ( ) ) ; return ChannelBuffers . wrappedBuffer ( NettyUtils . DEFAULT_GATHERING , decompose . toArray ( new ChannelBuffer [ decompose . size ( ) ] ) ) ; } } return retVal ; } } 

package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer . ShapeType ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Align ; import com . badlogic . gdx . utils . viewport . ScreenViewport ; public class LabelTest extends GdxTest { Skin skin ; Stage stage ; SpriteBatch batch ; Actor root ; ShapeRenderer renderer ; @Override public void create ( ) { batch = new SpriteBatch ( ) ; renderer = new ShapeRenderer ( ) ; skin = new Skin ( Gdx . files . internal ( <str> ) ) ; skin . getAtlas ( ) . getTextures ( ) . iterator ( ) . next ( ) . setFilter ( TextureFilter . Nearest , TextureFilter . Nearest ) ; skin . getFont ( <str> ) . getData ( ) . markupEnabled = true ; float scale = <int> ; skin . getFont ( <str> ) . getData ( ) . setScale ( scale ) ; stage = new Stage ( new ScreenViewport ( ) ) ; Gdx . input . setInputProcessor ( stage ) ; Table table = new Table ( ) ; stage . addActor ( table ) ; table . setPosition ( <int> , <int> ) ; table . debug ( ) ; table . add ( new Label ( <str> , skin ) ) ; table . row ( ) ; table . add ( new Label ( <str> , skin ) ) ; table . row ( ) ; Label label3 = new Label ( <str> , skin ) ; label3 . setColor ( Color . GREEN ) ; label3 . setAlignment ( Align . bottom | Align . right ) ; table . add ( label3 ) . minWidth ( <int> * scale ) . minHeight ( <int> * scale ) . fill ( ) ; table . row ( ) ; Label label4 = new Label ( <str> , skin ) ; label4 . setWrap ( true ) ; label4 . setAlignment ( Align . bottom | Align . right ) ; table . add ( label4 ) . minWidth ( <int> * scale ) . minHeight ( <int> * scale ) . fill ( ) ; table . row ( ) ; Label label5 = new Label ( <str> , skin ) ; label5 . setWrap ( true ) ; label5 . setAlignment ( Align . bottom | Align . right ) ; table . add ( label5 ) . minWidth ( <int> * scale ) . minHeight ( <int> * scale ) . fill ( ) ; table . pack ( ) ; } @Override public void dispose ( ) { stage . dispose ( ) ; skin . dispose ( ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Math . min ( Gdx . graphics . getDeltaTime ( ) , <int> / <int> f ) ) ; stage . draw ( ) ; float x = <int> , y = <int> ; BitmapFont font = skin . getFont ( <str> ) ; batch . begin ( ) ; font . draw ( batch , <str> , x , y ) ; batch . end ( ) ; drawLine ( x , y - font . getDescent ( ) , x + <int> , y - font . getDescent ( ) ) ; drawLine ( x , y - font . getCapHeight ( ) + font . getDescent ( ) , x + <int> , y - font . getCapHeight ( ) + font . getDescent ( ) ) ; } public void drawLine ( float x1 , float y1 , float x2 , float y2 ) { renderer . setProjectionMatrix ( batch . getProjectionMatrix ( ) ) ; renderer . begin ( ShapeType . Line ) ; renderer . line ( x1 , y1 , x2 , y2 ) ; renderer . end ( ) ; } @Override public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } } 

package junit . tests . framework ; import java . util . Collections ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestResult ; import junit . framework . TestSuite ; public class SuiteTest extends TestCase { protected TestResult fResult ; public SuiteTest ( String name ) { super ( name ) ; } @Override protected void setUp ( ) { fResult = new TestResult ( ) ; } public static Test suite ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; suite . addTest ( new SuiteTest ( <str> ) ) ; return suite ; } public void testInheritedTests ( ) { TestSuite suite = new TestSuite ( InheritedTestCase . class ) ; suite . run ( fResult ) ; assertTrue ( fResult . wasSuccessful ( ) ) ; assertEquals ( <int> , fResult . runCount ( ) ) ; } public void testNoTestCaseClass ( ) { Test t = new TestSuite ( NoTestCaseClass . class ) ; t . run ( fResult ) ; assertEquals ( <int> , fResult . runCount ( ) ) ; assertTrue ( ! fResult . wasSuccessful ( ) ) ; } public void testNoTestCases ( ) { Test t = new TestSuite ( NoTestCases . class ) ; t . run ( fResult ) ; assertTrue ( fResult . runCount ( ) = = <int> ) ; assertTrue ( fResult . failureCount ( ) = = <int> ) ; assertTrue ( ! fResult . wasSuccessful ( ) ) ; } public void testNotExistingTestCase ( ) { Test t = new SuiteTest ( <str> ) ; t . run ( fResult ) ; assertTrue ( fResult . runCount ( ) = = <int> ) ; assertTrue ( fResult . failureCount ( ) = = <int> ) ; assertTrue ( fResult . errorCount ( ) = = <int> ) ; } public void testNotPublicTestCase ( ) { TestSuite suite = new TestSuite ( NotPublicTestCase . class ) ; assertEquals ( <int> , suite . countTestCases ( ) ) ; } public void testNotVoidTestCase ( ) { TestSuite suite = new TestSuite ( NotVoidTestCase . class ) ; assertTrue ( suite . countTestCases ( ) = = <int> ) ; } public void testOneTestCase ( ) { TestSuite t = new TestSuite ( OneTestCase . class ) ; t . run ( fResult ) ; assertTrue ( fResult . runCount ( ) = = <int> ) ; assertTrue ( fResult . failureCount ( ) = = <int> ) ; assertTrue ( fResult . errorCount ( ) = = <int> ) ; assertTrue ( fResult . wasSuccessful ( ) ) ; } public void testOneTestCaseEclipseSeesSameStructureAs381 ( ) { TestSuite t = new TestSuite ( ThreeTestCases . class ) ; assertEquals ( <int> , Collections . list ( t . tests ( ) ) . size ( ) ) ; } public void testShadowedTests ( ) { TestSuite suite = new TestSuite ( OverrideTestCase . class ) ; suite . run ( fResult ) ; assertEquals ( <int> , fResult . runCount ( ) ) ; } public void testAddTestSuite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( OneTestCase . class ) ; suite . run ( fResult ) ; assertEquals ( <int> , fResult . runCount ( ) ) ; } public void testCreateSuiteFromArray ( ) { TestSuite suite = new TestSuite ( OneTestCase . class , DoublePrecisionAssertTest . class ) ; assertEquals ( <int> , suite . testCount ( ) ) ; assertEquals ( <str> , ( ( TestSuite ) suite . testAt ( <int> ) ) . getName ( ) ) ; assertEquals ( <str> , ( ( TestSuite ) suite . testAt ( <int> ) ) . getName ( ) ) ; } } 

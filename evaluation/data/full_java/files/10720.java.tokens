package org . gradle . build . docs . dsl . docbook ; import org . gradle . build . docs . dsl . docbook . model . ClassDoc ; import org . gradle . build . docs . dsl . docbook . model . ClassExtensionDoc ; import org . gradle . build . docs . dsl . docbook . model . PropertyDoc ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import java . util . Collection ; class PropertiesRenderer implements ClassDocMemberRenderer { private final PropertyTableRenderer propertyTableRenderer = new PropertyTableRenderer ( ) ; private final ExtensionPropertiesSummaryRenderer extensionPropertiesSummaryRenderer ; private final PropertyDetailRenderer propertiesDetailRenderer ; public PropertiesRenderer ( LinkRenderer linkRenderer , GenerationListener listener ) { propertiesDetailRenderer = new PropertyDetailRenderer ( linkRenderer , listener ) ; extensionPropertiesSummaryRenderer = new ExtensionPropertiesSummaryRenderer ( propertyTableRenderer ) ; } public void renderSummaryTo ( ClassDoc classDoc , Element parent ) { Document document = parent . getOwnerDocument ( ) ; Element summarySection = document . createElement ( <str> ) ; parent . appendChild ( summarySection ) ; Element title = document . createElement ( <str> ) ; summarySection . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; Collection < PropertyDoc > classProperties = classDoc . getClassProperties ( ) ; if ( ! classProperties . isEmpty ( ) ) { Element table = document . createElement ( <str> ) ; summarySection . appendChild ( table ) ; title = document . createElement ( <str> ) ; table . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> + classDoc . getSimpleName ( ) ) ) ; propertyTableRenderer . renderTo ( classProperties , table ) ; } for ( ClassExtensionDoc extensionDoc : classDoc . getClassExtensions ( ) ) { extensionPropertiesSummaryRenderer . renderTo ( extensionDoc , summarySection ) ; } if ( ! hasProperties ( classDoc ) ) { Element para = document . createElement ( <str> ) ; summarySection . appendChild ( para ) ; para . appendChild ( document . createTextNode ( <str> ) ) ; } } public void renderDetailsTo ( ClassDoc classDoc , Element parent ) { if ( hasProperties ( classDoc ) ) { Document document = parent . getOwnerDocument ( ) ; Element detailsSection = document . createElement ( <str> ) ; parent . appendChild ( detailsSection ) ; Element title = document . createElement ( <str> ) ; detailsSection . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; for ( PropertyDoc classProperty : classDoc . getClassProperties ( ) ) { propertiesDetailRenderer . renderTo ( classProperty , detailsSection ) ; } for ( ClassExtensionDoc extensionDoc : classDoc . getClassExtensions ( ) ) { for ( PropertyDoc propertyDoc : extensionDoc . getExtensionProperties ( ) ) { propertiesDetailRenderer . renderTo ( propertyDoc , detailsSection ) ; } } } } private boolean hasProperties ( ClassDoc classDoc ) { boolean hasProperties = false ; if ( ! classDoc . getClassProperties ( ) . isEmpty ( ) ) { hasProperties = true ; } for ( ClassExtensionDoc extensionDoc : classDoc . getClassExtensions ( ) ) { hasProperties | = ! extensionDoc . getExtensionProperties ( ) . isEmpty ( ) ; } return hasProperties ; } } 

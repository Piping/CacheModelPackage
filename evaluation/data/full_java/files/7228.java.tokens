package org . elasticsearch . search . aggregations . bucket . sampler ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . ValuesSourceAggregationBuilder ; import java . io . IOException ; public class SamplerAggregationBuilder extends ValuesSourceAggregationBuilder < SamplerAggregationBuilder > { private int shardSize = SamplerParser . DEFAULT_SHARD_SAMPLE_SIZE ; int maxDocsPerValue = SamplerParser . MAX_DOCS_PER_VALUE_DEFAULT ; String executionHint = null ; public SamplerAggregationBuilder ( String name ) { super ( name , InternalSampler . TYPE . name ( ) ) ; } public SamplerAggregationBuilder shardSize ( int shardSize ) { this . shardSize = shardSize ; return this ; } public SamplerAggregationBuilder maxDocsPerValue ( int maxDocsPerValue ) { this . maxDocsPerValue = maxDocsPerValue ; return this ; } public SamplerAggregationBuilder executionHint ( String executionHint ) { this . executionHint = executionHint ; return this ; } @Override protected XContentBuilder doInternalXContent ( XContentBuilder builder , Params params ) throws IOException { if ( shardSize ! = SamplerParser . DEFAULT_SHARD_SAMPLE_SIZE ) { builder . field ( SamplerParser . SHARD_SIZE_FIELD . getPreferredName ( ) , shardSize ) ; } if ( maxDocsPerValue ! = SamplerParser . MAX_DOCS_PER_VALUE_DEFAULT ) { builder . field ( SamplerParser . MAX_DOCS_PER_VALUE_FIELD . getPreferredName ( ) , maxDocsPerValue ) ; } if ( executionHint ! = null ) { builder . field ( SamplerParser . EXECUTION_HINT_FIELD . getPreferredName ( ) , executionHint ) ; } return builder ; } } 

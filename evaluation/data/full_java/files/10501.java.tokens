package com . google . common . hash ; import static com . google . common . hash . Hashing . murmur3_128 ; import com . google . common . base . Charsets ; import com . google . common . hash . HashTestUtils . HashFn ; import junit . framework . TestCase ; import java . nio . ByteBuffer ; import java . nio . ByteOrder ; public class Murmur3Hash128Test extends TestCase { public void testKnownValues ( ) { assertHash ( <int> , <hex> , <hex> , <str> ) ; assertHash ( <int> , <hex> , <hex> , <str> ) ; assertHash ( <int> , <hex> , <hex> , <str> ) ; assertHash ( <int> , <hex> , <hex> , <str> ) ; assertHash ( <int> , <hex> , <hex> , <str> ) ; assertHash ( <int> , <hex> , <hex> , <str> ) ; assertHash ( <int> , <hex> , <hex> , <str> ) ; assertHash ( <int> , <hex> , <hex> , <str> ) ; HashCode foxHash = murmur3_128 ( <int> ) . hashString ( <str> , Charsets . UTF_8 ) ; assertEquals ( <str> , foxHash . toString ( ) ) ; } private static void assertHash ( int seed , long expected1 , long expected2 , String stringInput ) { HashCode expected = toHashCode ( expected1 , expected2 ) ; byte [ ] input = HashTestUtils . ascii ( stringInput ) ; assertEquals ( expected , murmur3_128 ( seed ) . hashBytes ( input ) ) ; assertEquals ( expected , murmur3_128 ( seed ) . newHasher ( ) . putBytes ( input ) . hash ( ) ) ; } private static HashCode toHashCode ( long . . . longs ) { ByteBuffer bb = ByteBuffer . wrap ( new byte [ longs . length * <int> ] ) . order ( ByteOrder . LITTLE_ENDIAN ) ; for ( long x : longs ) { bb . putLong ( x ) ; } return HashCode . fromBytes ( bb . array ( ) ) ; } public void testParanoid ( ) { HashFn hf = new HashFn ( ) { @Override public byte [ ] hash ( byte [ ] input , int seed ) { Hasher hasher = murmur3_128 ( seed ) . newHasher ( ) ; Funnels . byteArrayFunnel ( ) . funnel ( input , hasher ) ; return hasher . hash ( ) . asBytes ( ) ; } } ; HashTestUtils . verifyHashFunction ( hf , <int> , <hex> ) ; } public void testInvariants ( ) { HashTestUtils . assertInvariants ( murmur3_128 ( ) ) ; } } 

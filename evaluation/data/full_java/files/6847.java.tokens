package org . elasticsearch . indices . breaker ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; import java . util . Locale ; public class CircuitBreakerStats implements Streamable , ToXContent { private String name ; private long limit ; private long estimated ; private long trippedCount ; private double overhead ; CircuitBreakerStats ( ) { } public CircuitBreakerStats ( String name , long limit , long estimated , double overhead , long trippedCount ) { this . name = name ; this . limit = limit ; this . estimated = estimated ; this . trippedCount = trippedCount ; this . overhead = overhead ; } public String getName ( ) { return this . name ; } public long getLimit ( ) { return this . limit ; } public long getEstimated ( ) { return this . estimated ; } public long getTrippedCount ( ) { return this . trippedCount ; } public double getOverhead ( ) { return this . overhead ; } public static CircuitBreakerStats readOptionalCircuitBreakerStats ( StreamInput in ) throws IOException { CircuitBreakerStats stats = in . readOptionalStreamable ( CircuitBreakerStats : : new ) ; return stats ; } @Override public void readFrom ( StreamInput in ) throws IOException { limit = in . readLong ( ) ; estimated = in . readLong ( ) ; overhead = in . readDouble ( ) ; this . trippedCount = in . readLong ( ) ; this . name = in . readString ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeLong ( limit ) ; out . writeLong ( estimated ) ; out . writeDouble ( overhead ) ; out . writeLong ( trippedCount ) ; out . writeString ( name ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( name . toLowerCase ( Locale . ROOT ) ) ; builder . field ( Fields . LIMIT , limit ) ; builder . field ( Fields . LIMIT_HUMAN , new ByteSizeValue ( limit ) ) ; builder . field ( Fields . ESTIMATED , estimated ) ; builder . field ( Fields . ESTIMATED_HUMAN , new ByteSizeValue ( estimated ) ) ; builder . field ( Fields . OVERHEAD , overhead ) ; builder . field ( Fields . TRIPPED_COUNT , trippedCount ) ; builder . endObject ( ) ; return builder ; } @Override public String toString ( ) { return <str> + this . name + <str> + this . limit + <str> + new ByteSizeValue ( this . limit ) + <str> + this . estimated + <str> + new ByteSizeValue ( this . estimated ) + <str> + this . overhead + <str> + this . trippedCount + <str> ; } static final class Fields { static final XContentBuilderString LIMIT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString LIMIT_HUMAN = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ESTIMATED = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ESTIMATED_HUMAN = new XContentBuilderString ( <str> ) ; static final XContentBuilderString OVERHEAD = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TRIPPED_COUNT = new XContentBuilderString ( <str> ) ; } } 

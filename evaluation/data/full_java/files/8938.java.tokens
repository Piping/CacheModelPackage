package org . elasticsearch . cluster . routing ; import org . elasticsearch . test . ESTestCase ; public class TestShardRouting { public static ShardRouting newShardRouting ( String index , int shardId , String currentNodeId , boolean primary , ShardRoutingState state , long version ) { return new ShardRouting ( index , shardId , currentNodeId , null , null , primary , state , version , buildUnassignedInfo ( state ) , buildAllocationId ( state ) , true , - <int> ) ; } public static ShardRouting newShardRouting ( String index , int shardId , String currentNodeId , String relocatingNodeId , boolean primary , ShardRoutingState state , long version ) { return new ShardRouting ( index , shardId , currentNodeId , relocatingNodeId , null , primary , state , version , buildUnassignedInfo ( state ) , buildAllocationId ( state ) , true , - <int> ) ; } public static ShardRouting newShardRouting ( String index , int shardId , String currentNodeId , String relocatingNodeId , boolean primary , ShardRoutingState state , AllocationId allocationId , long version ) { return new ShardRouting ( index , shardId , currentNodeId , relocatingNodeId , null , primary , state , version , buildUnassignedInfo ( state ) , allocationId , true , - <int> ) ; } public static ShardRouting newShardRouting ( String index , int shardId , String currentNodeId , String relocatingNodeId , RestoreSource restoreSource , boolean primary , ShardRoutingState state , long version ) { return new ShardRouting ( index , shardId , currentNodeId , relocatingNodeId , restoreSource , primary , state , version , buildUnassignedInfo ( state ) , buildAllocationId ( state ) , true , - <int> ) ; } public static ShardRouting newShardRouting ( String index , int shardId , String currentNodeId , String relocatingNodeId , RestoreSource restoreSource , boolean primary , ShardRoutingState state , long version , UnassignedInfo unassignedInfo ) { return new ShardRouting ( index , shardId , currentNodeId , relocatingNodeId , restoreSource , primary , state , version , unassignedInfo , buildAllocationId ( state ) , true , - <int> ) ; } private static AllocationId buildAllocationId ( ShardRoutingState state ) { switch ( state ) { case UNASSIGNED : return null ; case INITIALIZING : case STARTED : return AllocationId . newInitializing ( ) ; case RELOCATING : AllocationId allocationId = AllocationId . newInitializing ( ) ; return AllocationId . newRelocation ( allocationId ) ; default : throw new IllegalStateException ( <str> ) ; } } private static UnassignedInfo buildUnassignedInfo ( ShardRoutingState state ) { switch ( state ) { case UNASSIGNED : case INITIALIZING : return new UnassignedInfo ( ESTestCase . randomFrom ( UnassignedInfo . Reason . values ( ) ) , <str> ) ; case STARTED : case RELOCATING : return null ; default : throw new IllegalStateException ( <str> ) ; } } } 

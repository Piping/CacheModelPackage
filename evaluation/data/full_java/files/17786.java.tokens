package com . badlogic . gdx . setup ; import java . util . HashMap ; public class DependencyBank { static String libgdxVersion = <str> ; static String libgdxNightlyVersion = <str> ; static String roboVMVersion = <str> ; static String buildToolsVersion = <str> ; static String androidAPILevel = <str> ; static String gwtVersion = <str> ; static String mavenCentral = <str> ; static String jCenter = <str> ; static String libGDXSnapshotsUrl = <str> ; static String libGDXReleaseUrl = <str> ; static String gwtPluginImport = <str> ; static String androidPluginImport = <str> ; static String roboVMPluginImport = <str> + roboVMVersion ; static String box2DLightsVersion = <str> ; static String ashleyVersion = <str> ; static String aiVersion = <str> ; HashMap < ProjectDependency , Dependency > gdxDependencies = new HashMap < ProjectDependency , Dependency > ( ) ; public DependencyBank ( ) { for ( ProjectDependency projectDep : ProjectDependency . values ( ) ) { Dependency dependency = new Dependency ( projectDep . name ( ) , projectDep . getGwtInherits ( ) , projectDep . getDependencies ( ProjectType . CORE ) , projectDep . getDependencies ( ProjectType . DESKTOP ) , projectDep . getDependencies ( ProjectType . ANDROID ) , projectDep . getDependencies ( ProjectType . IOS ) , projectDep . getDependencies ( ProjectType . HTML ) ) ; gdxDependencies . put ( projectDep , dependency ) ; } } public Dependency getDependency ( ProjectDependency gdx ) { return gdxDependencies . get ( gdx ) ; } public enum ProjectDependency { GDX ( new String [ ] { <str> } , new String [ ] { <str> , <str> } , new String [ ] { <str> , <str> , <str> , <str> } , new String [ ] { <str> , <str> , <str> , <str> } , new String [ ] { <str> , <str> , <str> } , new String [ ] { <str> } , <str> ) , BULLET ( new String [ ] { <str> } , new String [ ] { <str> } , new String [ ] { <str> , <str> , <str> , <str> } , new String [ ] { <str> } , null , null , <str> ) , FREETYPE ( new String [ ] { <str> } , new String [ ] { <str> } , new String [ ] { <str> , <str> , <str> , <str> } , new String [ ] { <str> } , null , null , <str> ) , TOOLS ( new String [ ] { } , new String [ ] { <str> } , new String [ ] { } , new String [ ] { } , new String [ ] { } , new String [ ] { } , <str> ) , CONTROLLERS ( new String [ ] { <str> } , new String [ ] { <str> , <str> } , new String [ ] { <str> , <str> } , new String [ ] { } , new String [ ] { <str> , <str> , <str> } , new String [ ] { <str> } , <str> ) , BOX2D ( new String [ ] { <str> } , new String [ ] { <str> } , new String [ ] { <str> , <str> , <str> , <str> } , new String [ ] { <str> } , new String [ ] { <str> , <str> } , new String [ ] { <str> } , <str> ) , BOX2DLIGHTS ( new String [ ] { <str> } , new String [ ] { } , new String [ ] { <str> } , new String [ ] { } , new String [ ] { <str> } , new String [ ] { <str> } , <str> ) , ASHLEY ( new String [ ] { <str> } , new String [ ] { } , new String [ ] { <str> } , new String [ ] { } , new String [ ] { <str> } , new String [ ] { <str> } , <str> ) , AI ( new String [ ] { <str> } , new String [ ] { } , new String [ ] { <str> } , new String [ ] { } , new String [ ] { <str> } , new String [ ] { <str> } , <str> ) ; private String [ ] coreDependencies ; private String [ ] desktopDependencies ; private String [ ] androidDependencies ; private String [ ] iosDependencies ; private String [ ] gwtDependencies ; private String [ ] gwtInherits ; private String description ; ProjectDependency ( String [ ] coreDeps , String [ ] desktopDeps , String [ ] androidDeps , String [ ] iosDeps , String [ ] gwtDeps , String [ ] gwtInhertis , String description ) { this . coreDependencies = coreDeps ; this . desktopDependencies = desktopDeps ; this . androidDependencies = androidDeps ; this . iosDependencies = iosDeps ; this . gwtDependencies = gwtDeps ; this . gwtInherits = gwtInhertis ; this . description = description ; } public String [ ] getDependencies ( ProjectType type ) { switch ( type ) { case CORE : return coreDependencies ; case DESKTOP : return desktopDependencies ; case ANDROID : return androidDependencies ; case IOS : return iosDependencies ; case HTML : return gwtDependencies ; } return null ; } public String [ ] getGwtInherits ( ) { return gwtInherits ; } public String getDescription ( ) { return description ; } } public enum ProjectType { CORE ( <str> , new String [ ] { <str> } ) , DESKTOP ( <str> , new String [ ] { <str> } ) , ANDROID ( <str> , new String [ ] { <str> } ) , IOS ( <str> , new String [ ] { <str> , <str> } ) , HTML ( <str> , new String [ ] { <str> , <str> } ) ; private final String name ; private final String [ ] plugins ; ProjectType ( String name , String plugins [ ] ) { this . name = name ; this . plugins = plugins ; } public String getName ( ) { return name ; } public String [ ] getPlugins ( ) { return plugins ; } } } 

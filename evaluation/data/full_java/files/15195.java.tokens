package org . gradle . play . plugins ; import org . gradle . api . Action ; import org . gradle . api . Incubating ; import org . gradle . api . Task ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . language . base . internal . LanguageSourceSetInternal ; import org . gradle . language . javascript . JavaScriptSourceSet ; import org . gradle . language . javascript . internal . DefaultJavaScriptSourceSet ; import org . gradle . model . ModelMap ; import org . gradle . model . Mutate ; import org . gradle . model . Path ; import org . gradle . model . RuleSource ; import org . gradle . platform . base . BinaryTasks ; import org . gradle . platform . base . LanguageType ; import org . gradle . platform . base . LanguageTypeBuilder ; import org . gradle . play . PlayApplicationSpec ; import org . gradle . play . internal . PlayApplicationBinarySpecInternal ; import org . gradle . play . tasks . JavaScriptMinify ; import java . io . File ; @SuppressWarnings ( <str> ) @Incubating public class PlayJavaScriptPlugin extends RuleSource { @LanguageType void registerJavascript ( LanguageTypeBuilder < JavaScriptSourceSet > builder ) { builder . setLanguageName ( <str> ) ; builder . defaultImplementation ( DefaultJavaScriptSourceSet . class ) ; } @Mutate void createJavascriptSourceSets ( ModelMap < PlayApplicationSpec > components ) { components . afterEach ( new Action < PlayApplicationSpec > ( ) { @Override public void execute ( PlayApplicationSpec playComponent ) { playComponent . getSources ( ) . create ( <str> , JavaScriptSourceSet . class , new Action < JavaScriptSourceSet > ( ) { @Override public void execute ( JavaScriptSourceSet javaScriptSourceSet ) { javaScriptSourceSet . getSource ( ) . srcDir ( <str> ) ; javaScriptSourceSet . getSource ( ) . include ( <str> ) ; } } ) ; } } ) ; } @BinaryTasks void createJavaScriptTasks ( ModelMap < Task > tasks , final PlayApplicationBinarySpecInternal binary , ServiceRegistry serviceRegistry , @Path ( <str> ) final File buildDir ) { for ( JavaScriptSourceSet javaScriptSourceSet : binary . getInputs ( ) . withType ( JavaScriptSourceSet . class ) ) { if ( ( ( LanguageSourceSetInternal ) javaScriptSourceSet ) . getMayHaveSources ( ) ) { createJavaScriptMinifyTask ( tasks , javaScriptSourceSet , binary , buildDir ) ; } } for ( JavaScriptSourceSet javaScriptSourceSet : binary . getGeneratedJavaScript ( ) . values ( ) ) { createJavaScriptMinifyTask ( tasks , javaScriptSourceSet , binary , buildDir ) ; } } private void createJavaScriptMinifyTask ( ModelMap < Task > tasks , final JavaScriptSourceSet javaScriptSourceSet , final PlayApplicationBinarySpecInternal binary , @Path ( <str> ) final File buildDir ) { final String minifyTaskName = binary . getTasks ( ) . taskName ( <str> , javaScriptSourceSet . getName ( ) ) ; final File minifyOutputDirectory = new File ( buildDir , String . format ( <str> , binary . getProjectScopedName ( ) , minifyTaskName ) ) ; tasks . create ( minifyTaskName , JavaScriptMinify . class , new Action < JavaScriptMinify > ( ) { @Override public void execute ( JavaScriptMinify javaScriptMinify ) { javaScriptMinify . setDescription ( <str> + javaScriptSourceSet . getDisplayName ( ) + <str> ) ; javaScriptMinify . setSource ( javaScriptSourceSet . getSource ( ) ) ; javaScriptMinify . setDestinationDir ( minifyOutputDirectory ) ; javaScriptMinify . setPlayPlatform ( binary . getTargetPlatform ( ) ) ; binary . getAssets ( ) . builtBy ( javaScriptMinify ) ; binary . getAssets ( ) . addAssetDir ( minifyOutputDirectory ) ; javaScriptMinify . dependsOn ( javaScriptSourceSet . getBuildDependencies ( ) ) ; } } ) ; } } 

package org . gradle . launcher . daemon . configuration ; import com . google . common . collect . ImmutableList ; import org . gradle . api . JavaVersion ; import org . gradle . api . Nullable ; import org . gradle . api . internal . file . IdentityFileResolver ; import org . gradle . initialization . BuildLayoutParameters ; import org . gradle . internal . jvm . JavaInfo ; import org . gradle . internal . jvm . Jvm ; import org . gradle . process . internal . JvmOptions ; import org . gradle . util . GUtil ; import java . io . File ; import java . util . * ; public class DaemonParameters { static final int DEFAULT_IDLE_TIMEOUT = <int> * <int> * <int> * <int> ; public static final List < String > DEFAULT_JVM_ARGS = ImmutableList . of ( <str> , <str> , <str> ) ; public static final List < String > DEFAULT_JVM_9_ARGS = ImmutableList . of ( <str> , <str> ) ; public static final String INTERACTIVE_TOGGLE = <str> ; private final String uid ; private final File gradleUserHomeDir ; private File baseDir ; private int idleTimeout = DEFAULT_IDLE_TIMEOUT ; private final JvmOptions jvmOptions = new JvmOptions ( new IdentityFileResolver ( ) ) ; private DaemonUsage daemonUsage = DaemonUsage . IMPLICITLY_DISABLED ; private boolean hasJvmArgs ; private boolean foreground ; private boolean stop ; private boolean interactive = System . console ( ) ! = null | | Boolean . getBoolean ( INTERACTIVE_TOGGLE ) ; private JavaInfo jvm = Jvm . current ( ) ; public DaemonParameters ( BuildLayoutParameters layout ) { this ( layout , Collections . < String , String > emptyMap ( ) ) ; } public DaemonParameters ( BuildLayoutParameters layout , Map < String , String > extraSystemProperties ) { this . uid = UUID . randomUUID ( ) . toString ( ) ; jvmOptions . systemProperties ( extraSystemProperties ) ; baseDir = new File ( layout . getGradleUserHomeDir ( ) , <str> ) ; gradleUserHomeDir = layout . getGradleUserHomeDir ( ) ; } public boolean isInteractive ( ) { return interactive ; } public DaemonParameters setEnabled ( boolean enabled ) { daemonUsage = enabled ? DaemonUsage . EXPLICITLY_ENABLED : DaemonUsage . EXPLICITLY_DISABLED ; return this ; } public String getUid ( ) { return uid ; } public File getBaseDir ( ) { return baseDir ; } public File getGradleUserHomeDir ( ) { return gradleUserHomeDir ; } public int getIdleTimeout ( ) { return idleTimeout ; } public void setIdleTimeout ( int idleTimeout ) { this . idleTimeout = idleTimeout ; } public List < String > getEffectiveJvmArgs ( ) { return jvmOptions . getAllImmutableJvmArgs ( ) ; } public JavaInfo getEffectiveJvm ( ) { return jvm ; } @Nullable public DaemonParameters setJvm ( JavaInfo jvm ) { this . jvm = jvm = = null ? Jvm . current ( ) : jvm ; return this ; } public void applyDefaultsFor ( JavaVersion javaVersion ) { if ( hasJvmArgs ) { return ; } if ( javaVersion . compareTo ( JavaVersion . VERSION_1_9 ) > = <int> ) { jvmOptions . jvmArgs ( DEFAULT_JVM_9_ARGS ) ; } else { jvmOptions . jvmArgs ( DEFAULT_JVM_ARGS ) ; } } public Map < String , String > getSystemProperties ( ) { Map < String , String > systemProperties = new HashMap < String , String > ( ) ; GUtil . addToMap ( systemProperties , jvmOptions . getSystemProperties ( ) ) ; return systemProperties ; } public Map < String , String > getEffectiveSystemProperties ( ) { Map < String , String > systemProperties = new HashMap < String , String > ( ) ; GUtil . addToMap ( systemProperties , jvmOptions . getSystemProperties ( ) ) ; GUtil . addToMap ( systemProperties , System . getProperties ( ) ) ; return systemProperties ; } public void setJvmArgs ( Iterable < String > jvmArgs ) { hasJvmArgs = true ; jvmOptions . setAllJvmArgs ( jvmArgs ) ; } public void setDebug ( boolean debug ) { jvmOptions . setDebug ( debug ) ; } public DaemonParameters setBaseDir ( File baseDir ) { this . baseDir = baseDir ; return this ; } public boolean getDebug ( ) { return jvmOptions . getDebug ( ) ; } public DaemonUsage getDaemonUsage ( ) { return daemonUsage ; } public boolean isForeground ( ) { return foreground ; } public void setForeground ( boolean foreground ) { this . foreground = foreground ; } public boolean isStop ( ) { return stop ; } public void setStop ( boolean stop ) { this . stop = stop ; } } 

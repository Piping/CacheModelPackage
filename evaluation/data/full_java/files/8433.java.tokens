package org . elasticsearch . search . aggregations ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . List ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; @ESIntegTestCase.SuiteScopeTestCase public class AggregationsIntegrationIT extends ESIntegTestCase { static int numDocs ; @Override public void setupSuiteScopeCluster ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . get ( ) ) ; ensureYellow ( <str> ) ; numDocs = randomIntBetween ( <int> , <int> ) ; List < IndexRequestBuilder > docs = new ArrayList < > ( ) ; for ( int i = <int> ; i < numDocs ; + + i ) { docs . add ( client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , Integer . toString ( i / <int> ) ) ) ; } indexRandom ( true , docs ) ; } public void testScroll ( ) { final int size = randomIntBetween ( <int> , <int> ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setSize ( size ) . setScroll ( new TimeValue ( <int> ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) ) . get ( ) ; assertSearchResponse ( response ) ; Aggregations aggregations = response . getAggregations ( ) ; assertNotNull ( aggregations ) ; Terms terms = aggregations . get ( <str> ) ; assertEquals ( Math . min ( numDocs , <int> ) , terms . getBucketByKey ( <str> ) . getDocCount ( ) ) ; int total = response . getHits ( ) . getHits ( ) . length ; while ( response . getHits ( ) . hits ( ) . length > <int> ) { response = client ( ) . prepareSearchScroll ( response . getScrollId ( ) ) . setScroll ( new TimeValue ( <int> ) ) . execute ( ) . actionGet ( ) ; assertNull ( response . getAggregations ( ) ) ; total + = response . getHits ( ) . hits ( ) . length ; } clearScroll ( response . getScrollId ( ) ) ; assertEquals ( numDocs , total ) ; } } 

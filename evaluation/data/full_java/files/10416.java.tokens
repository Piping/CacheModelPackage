package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Objects ; import com . google . common . testing . EqualsTester ; @GwtCompatible ( emulated = true ) public class SingletonImmutableTableTest extends AbstractImmutableTableTest { private final ImmutableTable < Character , Integer , String > testTable = new SingletonImmutableTable < Character , Integer , String > ( <str> , <int> , <str> ) ; public void testHashCode ( ) { assertEquals ( Objects . hashCode ( <str> , <int> , <str> ) , testTable . hashCode ( ) ) ; } public void testCellSet ( ) { assertEquals ( ImmutableSet . of ( Tables . immutableCell ( <str> , <int> , <str> ) ) , testTable . cellSet ( ) ) ; } public void testColumn ( ) { assertEquals ( ImmutableMap . of ( ) , testTable . column ( <int> ) ) ; assertEquals ( ImmutableMap . of ( <str> , <str> ) , testTable . column ( <int> ) ) ; } public void testColumnKeySet ( ) { assertEquals ( ImmutableSet . of ( <int> ) , testTable . columnKeySet ( ) ) ; } public void testColumnMap ( ) { assertEquals ( ImmutableMap . of ( <int> , ImmutableMap . of ( <str> , <str> ) ) , testTable . columnMap ( ) ) ; } public void testRow ( ) { assertEquals ( ImmutableMap . of ( ) , testTable . row ( <str> ) ) ; assertEquals ( ImmutableMap . of ( <int> , <str> ) , testTable . row ( <str> ) ) ; } public void testRowKeySet ( ) { assertEquals ( ImmutableSet . of ( <str> ) , testTable . rowKeySet ( ) ) ; } public void testRowMap ( ) { assertEquals ( ImmutableMap . of ( <str> , ImmutableMap . of ( <int> , <str> ) ) , testTable . rowMap ( ) ) ; } public void testEqualsObject ( ) { new EqualsTester ( ) . addEqualityGroup ( testTable , HashBasedTable . create ( testTable ) ) . addEqualityGroup ( ImmutableTable . of ( ) , HashBasedTable . create ( ) ) . addEqualityGroup ( HashBasedTable . create ( ImmutableTable . of ( <str> , <int> , <str> ) ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testEqualsObjectNullValues ( ) { new EqualsTester ( ) . addEqualityGroup ( testTable ) . addEqualityGroup ( ArrayTable . create ( ImmutableSet . of ( <str> ) , ImmutableSet . of ( <int> ) ) ) . testEquals ( ) ; } public void testToString ( ) { assertEquals ( <str> , testTable . toString ( ) ) ; } public void testContains ( ) { assertTrue ( testTable . contains ( <str> , <int> ) ) ; assertFalse ( testTable . contains ( <str> , <int> ) ) ; assertFalse ( testTable . contains ( <str> , <int> ) ) ; assertFalse ( testTable . contains ( <str> , <int> ) ) ; } public void testContainsColumn ( ) { assertTrue ( testTable . containsColumn ( <int> ) ) ; assertFalse ( testTable . containsColumn ( <int> ) ) ; } public void testContainsRow ( ) { assertTrue ( testTable . containsRow ( <str> ) ) ; assertFalse ( testTable . containsRow ( <str> ) ) ; } public void testContainsValue ( ) { assertTrue ( testTable . containsValue ( <str> ) ) ; assertFalse ( testTable . containsValue ( <str> ) ) ; } public void testGet ( ) { assertEquals ( <str> , testTable . get ( <str> , <int> ) ) ; assertNull ( testTable . get ( <str> , <int> ) ) ; assertNull ( testTable . get ( <str> , <int> ) ) ; assertNull ( testTable . get ( <str> , <int> ) ) ; } public void testIsEmpty ( ) { assertFalse ( testTable . isEmpty ( ) ) ; } public void testSize ( ) { assertEquals ( <int> , testTable . size ( ) ) ; } public void testValues ( ) { assertThat ( testTable . values ( ) ) . contains ( <str> ) ; } @Override Iterable < ImmutableTable < Character , Integer , String > > getTestInstances ( ) { return ImmutableSet . of ( testTable ) ; } } 

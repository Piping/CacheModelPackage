package io . netty . handler . ssl ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import org . junit . Test ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . * ; public class CipherSuiteConverterTest { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( CipherSuiteConverterTest . class ) ; @Test public void testJ2OMappings ( ) throws Exception { testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; testJ2OMapping ( <str> , <str> ) ; } private static void testJ2OMapping ( String javaCipherSuite , String openSslCipherSuite ) { final String actual = CipherSuiteConverter . toOpenSslUncached ( javaCipherSuite ) ; logger . info ( <str> , javaCipherSuite , actual ) ; assertThat ( actual , is ( openSslCipherSuite ) ) ; } @Test public void testO2JMappings ( ) throws Exception { testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; testO2JMapping ( <str> , <str> ) ; } private static void testO2JMapping ( String javaCipherSuite , String openSslCipherSuite ) { final String actual = CipherSuiteConverter . toJavaUncached ( openSslCipherSuite ) ; logger . info ( <str> , openSslCipherSuite , actual ) ; assertThat ( actual , is ( javaCipherSuite ) ) ; } @Test public void testCachedJ2OMappings ( ) { testCachedJ2OMapping ( <str> , <str> ) ; } private static void testCachedJ2OMapping ( String javaCipherSuite , String openSslCipherSuite ) { CipherSuiteConverter . clearCache ( ) ; final String actual1 = CipherSuiteConverter . toOpenSsl ( javaCipherSuite ) ; assertThat ( actual1 , is ( openSslCipherSuite ) ) ; assertThat ( CipherSuiteConverter . isJ2OCached ( javaCipherSuite , actual1 ) , is ( true ) ) ; assertThat ( CipherSuiteConverter . isO2JCached ( actual1 , <str> , javaCipherSuite . substring ( <int> ) ) , is ( true ) ) ; assertThat ( CipherSuiteConverter . isO2JCached ( actual1 , <str> , <str> + javaCipherSuite . substring ( <int> ) ) , is ( true ) ) ; assertThat ( CipherSuiteConverter . isO2JCached ( actual1 , <str> , <str> + javaCipherSuite . substring ( <int> ) ) , is ( true ) ) ; final String actual2 = CipherSuiteConverter . toOpenSsl ( javaCipherSuite ) ; assertThat ( actual2 , is ( openSslCipherSuite ) ) ; assertThat ( actual1 , is ( sameInstance ( actual2 ) ) ) ; } @Test public void testCachedO2JMappings ( ) { testCachedO2JMapping ( <str> , <str> ) ; } private static void testCachedO2JMapping ( String javaCipherSuite , String openSslCipherSuite ) { CipherSuiteConverter . clearCache ( ) ; final String tlsExpected = <str> + javaCipherSuite ; final String sslExpected = <str> + javaCipherSuite ; final String tlsActual1 = CipherSuiteConverter . toJava ( openSslCipherSuite , <str> ) ; final String sslActual1 = CipherSuiteConverter . toJava ( openSslCipherSuite , <str> ) ; assertThat ( tlsActual1 , is ( tlsExpected ) ) ; assertThat ( sslActual1 , is ( sslExpected ) ) ; assertThat ( CipherSuiteConverter . isO2JCached ( openSslCipherSuite , <str> , javaCipherSuite ) , is ( true ) ) ; assertThat ( CipherSuiteConverter . isO2JCached ( openSslCipherSuite , <str> , sslExpected ) , is ( true ) ) ; assertThat ( CipherSuiteConverter . isO2JCached ( openSslCipherSuite , <str> , tlsExpected ) , is ( true ) ) ; assertThat ( CipherSuiteConverter . isJ2OCached ( tlsExpected , openSslCipherSuite ) , is ( true ) ) ; assertThat ( CipherSuiteConverter . isJ2OCached ( sslExpected , openSslCipherSuite ) , is ( true ) ) ; final String tlsActual2 = CipherSuiteConverter . toJava ( openSslCipherSuite , <str> ) ; final String sslActual2 = CipherSuiteConverter . toJava ( openSslCipherSuite , <str> ) ; assertThat ( tlsActual2 , is ( tlsExpected ) ) ; assertThat ( sslActual2 , is ( sslExpected ) ) ; assertThat ( tlsActual1 , is ( sameInstance ( tlsActual2 ) ) ) ; assertThat ( sslActual1 , is ( sameInstance ( sslActual2 ) ) ) ; } } 

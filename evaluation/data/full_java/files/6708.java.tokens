package org . elasticsearch . index . query . functionscore . gauss ; import org . apache . lucene . search . Explanation ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . index . query . functionscore . DecayFunction ; import org . elasticsearch . index . query . functionscore . DecayFunctionBuilder ; public class GaussDecayFunctionBuilder extends DecayFunctionBuilder < GaussDecayFunctionBuilder > { public static final DecayFunction GAUSS_DECAY_FUNCTION = new GaussScoreFunction ( ) ; public GaussDecayFunctionBuilder ( String fieldName , Object origin , Object scale , Object offset ) { super ( fieldName , origin , scale , offset ) ; } public GaussDecayFunctionBuilder ( String fieldName , Object origin , Object scale , Object offset , double decay ) { super ( fieldName , origin , scale , offset , decay ) ; } private GaussDecayFunctionBuilder ( String fieldName , BytesReference functionBytes ) { super ( fieldName , functionBytes ) ; } @Override protected GaussDecayFunctionBuilder createFunctionBuilder ( String fieldName , BytesReference functionBytes ) { return new GaussDecayFunctionBuilder ( fieldName , functionBytes ) ; } @Override public String getName ( ) { return GaussDecayFunctionParser . NAMES [ <int> ] ; } @Override public DecayFunction getDecayFunction ( ) { return GAUSS_DECAY_FUNCTION ; } private static final class GaussScoreFunction implements DecayFunction { @Override public double evaluate ( double value , double scale ) { return Math . exp ( <float> * Math . pow ( value , <float> ) / scale ) ; } @Override public Explanation explainFunction ( String valueExpl , double value , double scale ) { return Explanation . match ( ( float ) evaluate ( value , scale ) , <str> + valueExpl + <str> + - <int> * scale + <str> ) ; } @Override public double processScale ( double scale , double decay ) { return <float> * Math . pow ( scale , <float> ) / Math . log ( decay ) ; } @Override public int hashCode ( ) { return this . getClass ( ) . hashCode ( ) ; } @Override public boolean equals ( Object obj ) { if ( super . equals ( obj ) ) { return true ; } return obj ! = null & & getClass ( ) ! = obj . getClass ( ) ; } } } 

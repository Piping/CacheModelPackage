package org . gradle . api . plugins . jetty ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . tasks . TaskAction ; import org . gradle . api . internal . ConventionTask ; import org . gradle . logging . ProgressLogger ; import org . gradle . logging . ProgressLoggerFactory ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . OutputStream ; import java . net . ConnectException ; import java . net . InetAddress ; import java . net . Socket ; public class JettyStop extends ConventionTask { private static Logger logger = LoggerFactory . getLogger ( JettyStop . class ) ; private Integer stopPort ; private String stopKey ; @TaskAction public void stop ( ) { if ( getStopPort ( ) = = null ) { throw new InvalidUserDataException ( <str> ) ; } if ( getStopKey ( ) = = null ) { throw new InvalidUserDataException ( <str> ) ; } ProgressLogger progressLogger = getServices ( ) . get ( ProgressLoggerFactory . class ) . newOperation ( JettyStop . class ) . start ( <str> , <str> ) ; try { Socket s = new Socket ( InetAddress . getByName ( <str> ) , getStopPort ( ) ) ; s . setSoLinger ( false , <int> ) ; OutputStream out = s . getOutputStream ( ) ; out . write ( ( getStopKey ( ) + <str> ) . getBytes ( ) ) ; out . flush ( ) ; s . close ( ) ; } catch ( ConnectException e ) { logger . info ( <str> ) ; } catch ( Exception e ) { logger . error ( <str> , e ) ; } finally { progressLogger . completed ( ) ; } } public Integer getStopPort ( ) { return stopPort ; } public void setStopPort ( Integer stopPort ) { this . stopPort = stopPort ; } public String getStopKey ( ) { return stopKey ; } public void setStopKey ( String stopKey ) { this . stopKey = stopKey ; } } 

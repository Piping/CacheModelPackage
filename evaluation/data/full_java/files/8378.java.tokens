package org . elasticsearch . options . detailederrors ; import org . apache . http . impl . client . HttpClients ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . http . HttpServerTransport ; import org . elasticsearch . node . Node ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . rest . client . http . HttpDeleteWithEntity ; import org . elasticsearch . test . rest . client . http . HttpRequestBuilder ; import org . elasticsearch . test . rest . client . http . HttpResponse ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . not ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class DetailedErrorsEnabledIT extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( Node . HTTP_ENABLED , true ) . build ( ) ; } public void testThatErrorTraceWorksByDefault ( ) throws Exception { HttpResponse response = new HttpRequestBuilder ( HttpClients . createDefault ( ) ) . httpTransport ( internalCluster ( ) . getDataNodeInstance ( HttpServerTransport . class ) ) . path ( <str> ) . addParam ( <str> , <str> ) . method ( HttpDeleteWithEntity . METHOD_NAME ) . execute ( ) ; assertThat ( response . getHeaders ( ) . get ( <str> ) , containsString ( <str> ) ) ; assertThat ( response . getBody ( ) , containsString ( <str> ) ) ; response = new HttpRequestBuilder ( HttpClients . createDefault ( ) ) . httpTransport ( internalCluster ( ) . getDataNodeInstance ( HttpServerTransport . class ) ) . path ( <str> ) . method ( HttpDeleteWithEntity . METHOD_NAME ) . execute ( ) ; assertThat ( response . getHeaders ( ) . get ( <str> ) , containsString ( <str> ) ) ; assertThat ( response . getBody ( ) , not ( containsString ( <str> ) ) ) ; } } 

package org . elasticsearch . index . shard ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESTestCase ; import java . nio . charset . StandardCharsets ; import java . util . ArrayList ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class CommitPointsTests extends ESTestCase { private final ESLogger logger = Loggers . getLogger ( CommitPointsTests . class ) ; public void testCommitPointXContent ( ) throws Exception { ArrayList < CommitPoint . FileInfo > indexFiles = new ArrayList < > ( ) ; indexFiles . add ( new CommitPoint . FileInfo ( <str> , <str> , <int> , <str> ) ) ; indexFiles . add ( new CommitPoint . FileInfo ( <str> , <str> , <int> , <str> ) ) ; ArrayList < CommitPoint . FileInfo > translogFiles = new ArrayList < > ( ) ; translogFiles . add ( new CommitPoint . FileInfo ( <str> , <str> , <int> , null ) ) ; translogFiles . add ( new CommitPoint . FileInfo ( <str> , <str> , <int> , null ) ) ; CommitPoint commitPoint = new CommitPoint ( <int> , <str> , CommitPoint . Type . GENERATED , indexFiles , translogFiles ) ; byte [ ] serialized = CommitPoints . toXContent ( commitPoint ) ; logger . info ( <str> , new String ( serialized , StandardCharsets . UTF_8 ) ) ; CommitPoint desCp = CommitPoints . fromXContent ( serialized ) ; assertThat ( desCp . version ( ) , equalTo ( commitPoint . version ( ) ) ) ; assertThat ( desCp . name ( ) , equalTo ( commitPoint . name ( ) ) ) ; assertThat ( desCp . indexFiles ( ) . size ( ) , equalTo ( commitPoint . indexFiles ( ) . size ( ) ) ) ; for ( int i = <int> ; i < desCp . indexFiles ( ) . size ( ) ; i + + ) { assertThat ( desCp . indexFiles ( ) . get ( i ) . name ( ) , equalTo ( commitPoint . indexFiles ( ) . get ( i ) . name ( ) ) ) ; assertThat ( desCp . indexFiles ( ) . get ( i ) . physicalName ( ) , equalTo ( commitPoint . indexFiles ( ) . get ( i ) . physicalName ( ) ) ) ; assertThat ( desCp . indexFiles ( ) . get ( i ) . length ( ) , equalTo ( commitPoint . indexFiles ( ) . get ( i ) . length ( ) ) ) ; assertThat ( desCp . indexFiles ( ) . get ( i ) . checksum ( ) , equalTo ( commitPoint . indexFiles ( ) . get ( i ) . checksum ( ) ) ) ; } assertThat ( desCp . translogFiles ( ) . size ( ) , equalTo ( commitPoint . translogFiles ( ) . size ( ) ) ) ; for ( int i = <int> ; i < desCp . indexFiles ( ) . size ( ) ; i + + ) { assertThat ( desCp . translogFiles ( ) . get ( i ) . name ( ) , equalTo ( commitPoint . translogFiles ( ) . get ( i ) . name ( ) ) ) ; assertThat ( desCp . translogFiles ( ) . get ( i ) . physicalName ( ) , equalTo ( commitPoint . translogFiles ( ) . get ( i ) . physicalName ( ) ) ) ; assertThat ( desCp . translogFiles ( ) . get ( i ) . length ( ) , equalTo ( commitPoint . translogFiles ( ) . get ( i ) . length ( ) ) ) ; assertThat ( desCp . translogFiles ( ) . get ( i ) . checksum ( ) , nullValue ( ) ) ; } } } 

package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . CircleShape ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . FixtureDef ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; import com . badlogic . gdx . physics . box2d . joints . PrismaticJointDef ; public class CollisionFiltering extends Box2DTest { private final static short k_smallGroup = <int> ; private final static short k_largeGroup = - <int> ; private final static short k_defaultCategory = <hex> ; private final static short k_triangleCategory = <hex> ; private final static short k_boxCategory = <hex> ; private final static short k_circleCategory = <hex> ; private final static short k_triangleMask = - <int> ; private final static short k_boxMask = - <int> ^ k_triangleCategory ; private final static short k_circleMask = - <int> ; @Override protected void createWorld ( World world ) { { EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <float> , <int> ) , new Vector2 ( <int> , <int> ) ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . friction = <float> ; BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; ground . createFixture ( fd ) ; shape . dispose ( ) ; } Vector2 [ ] vertices = new Vector2 [ <int> ] ; vertices [ <int> ] = new Vector2 ( - <int> , <int> ) ; vertices [ <int> ] = new Vector2 ( <int> , <int> ) ; vertices [ <int> ] = new Vector2 ( <int> , <int> ) ; PolygonShape polygon = new PolygonShape ( ) ; polygon . set ( vertices ) ; FixtureDef triangleShapeDef = new FixtureDef ( ) ; triangleShapeDef . shape = polygon ; triangleShapeDef . density = <float> ; triangleShapeDef . filter . groupIndex = k_smallGroup ; triangleShapeDef . filter . categoryBits = k_triangleCategory ; triangleShapeDef . filter . maskBits = k_triangleMask ; BodyDef triangleBodyDef = new BodyDef ( ) ; triangleBodyDef . type = BodyType . DynamicBody ; triangleBodyDef . position . set ( - <int> , <int> ) ; Body body1 = world . createBody ( triangleBodyDef ) ; body1 . createFixture ( triangleShapeDef ) ; vertices [ <int> ] . scl ( <int> ) ; vertices [ <int> ] . scl ( <int> ) ; vertices [ <int> ] . scl ( <int> ) ; polygon . set ( vertices ) ; triangleShapeDef . filter . groupIndex = k_largeGroup ; triangleBodyDef . position . set ( - <int> , <int> ) ; triangleBodyDef . fixedRotation = true ; Body body2 = world . createBody ( triangleBodyDef ) ; body2 . createFixture ( triangleShapeDef ) ; { BodyDef bd = new BodyDef ( ) ; bd . type = BodyType . DynamicBody ; bd . position . set ( - <int> , <int> ) ; Body body = world . createBody ( bd ) ; PolygonShape p = new PolygonShape ( ) ; p . setAsBox ( <float> , <float> ) ; body . createFixture ( p , <int> ) ; PrismaticJointDef jd = new PrismaticJointDef ( ) ; jd . bodyA = body2 ; jd . bodyB = body ; jd . enableLimit = true ; jd . localAnchorA . set ( <int> , <int> ) ; jd . localAnchorB . set ( <int> , <int> ) ; jd . localAxisA . set ( <int> , <int> ) ; jd . lowerTranslation = - <int> ; jd . upperTranslation = <int> ; world . createJoint ( jd ) ; p . dispose ( ) ; } polygon . setAsBox ( <int> , <float> ) ; FixtureDef boxShapeDef = new FixtureDef ( ) ; boxShapeDef . shape = polygon ; boxShapeDef . density = <int> ; boxShapeDef . restitution = <float> ; boxShapeDef . filter . groupIndex = k_smallGroup ; boxShapeDef . filter . categoryBits = k_boxCategory ; boxShapeDef . filter . maskBits = k_boxMask ; BodyDef boxBodyDef = new BodyDef ( ) ; boxBodyDef . type = BodyType . DynamicBody ; boxBodyDef . position . set ( <int> , <int> ) ; Body body3 = world . createBody ( boxBodyDef ) ; body3 . createFixture ( boxShapeDef ) ; polygon . setAsBox ( <int> , <int> ) ; boxShapeDef . filter . groupIndex = k_largeGroup ; boxBodyDef . position . set ( <int> , <int> ) ; Body body4 = world . createBody ( boxBodyDef ) ; body4 . createFixture ( boxShapeDef ) ; CircleShape circle = new CircleShape ( ) ; circle . setRadius ( <int> ) ; FixtureDef circleShapeDef = new FixtureDef ( ) ; circleShapeDef . shape = circle ; circleShapeDef . density = <float> ; circleShapeDef . filter . groupIndex = k_smallGroup ; circleShapeDef . filter . categoryBits = k_circleCategory ; circleShapeDef . filter . maskBits = k_circleMask ; BodyDef circleBodyDef = new BodyDef ( ) ; circleBodyDef . type = BodyType . DynamicBody ; circleBodyDef . position . set ( <int> , <int> ) ; Body body5 = world . createBody ( circleBodyDef ) ; body5 . createFixture ( circleShapeDef ) ; circle . setRadius ( <int> ) ; circleShapeDef . filter . groupIndex = k_largeGroup ; circleBodyDef . position . set ( <int> , <int> ) ; Body body6 = world . createBody ( circleBodyDef ) ; body6 . createFixture ( circleShapeDef ) ; } } 

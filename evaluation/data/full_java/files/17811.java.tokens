package com . badlogic . gdx . tools . flame ; import java . awt . Dimension ; import java . awt . GridBagConstraints ; import java . awt . GridBagLayout ; import java . awt . Insets ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import javax . swing . DefaultComboBoxModel ; import javax . swing . JButton ; import javax . swing . JComboBox ; import javax . swing . JPanel ; import javax . swing . JScrollPane ; import javax . swing . JTable ; import javax . swing . ListSelectionModel ; import javax . swing . event . ListSelectionEvent ; import javax . swing . event . ListSelectionListener ; import javax . swing . event . TableModelEvent ; import javax . swing . event . TableModelListener ; import javax . swing . table . DefaultTableModel ; import com . badlogic . gdx . graphics . g3d . particles . ParticleController ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsInfluencer ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier . BrownianAcceleration ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier . CentripetalAcceleration ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier . FaceDirection ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier . PolarAcceleration ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier . Rotational3D ; import com . badlogic . gdx . graphics . g3d . particles . influencers . DynamicsModifier . TangentialAcceleration ; import com . badlogic . gdx . tools . flame . FlameMain . ControllerType ; import com . badlogic . gdx . utils . Array ; public class DynamicsInfluencerPanel extends InfluencerPanel < DynamicsInfluencer > { private static final String VEL_TYPE_ROTATIONAL_2D = <str> , VEL_TYPE_ROTATIONAL_3D = <str> , VEL_TYPE_CENTRIPETAL = <str> , VEL_TYPE_TANGENTIAL = <str> , VEL_TYPE_POLAR = <str> , VEL_TYPE_BROWNIAN = <str> , VEL_TYPE_FACE = <str> ; protected class VelocityWrapper { public DynamicsModifier velocityValue ; public boolean isActive ; public VelocityWrapper ( DynamicsModifier value , boolean isActive ) { this . velocityValue = value ; this . isActive = isActive ; } } JComboBox velocityBox ; JTable velocityTable ; DefaultTableModel velocityTableModel ; JPanel selectedVelocityPanel ; AngularVelocityPanel angularVelocityPanel ; StrengthVelocityPanel strengthVelocityPanel ; ParticleValuePanel emptyPanel ; Array < VelocityWrapper > velocities ; public DynamicsInfluencerPanel ( FlameMain editor , DynamicsInfluencer influencer ) { super ( editor , influencer , <str> , <str> ) ; velocities = new Array < VelocityWrapper > ( ) ; setValue ( value ) ; set ( influencer ) ; } private void set ( DynamicsInfluencer influencer ) { for ( int i = velocityTableModel . getRowCount ( ) - <int> ; i > = <int> ; i - - ) { velocityTableModel . removeRow ( i ) ; } velocities . clear ( ) ; for ( int i = <int> , c = influencer . velocities . size ; i < c ; + + i ) { velocities . add ( new VelocityWrapper ( ( DynamicsModifier ) influencer . velocities . items [ i ] , true ) ) ; velocityTableModel . addRow ( new Object [ ] { <str> + i , true } ) ; } DefaultComboBoxModel model = ( DefaultComboBoxModel ) velocityBox . getModel ( ) ; model . removeAllElements ( ) ; for ( Object velocityObject : getAvailableVelocities ( editor . getControllerType ( ) ) ) { model . addElement ( velocityObject ) ; } } private Object [ ] getAvailableVelocities ( ControllerType type ) { if ( type = = ControllerType . Billboard | | type = = ControllerType . PointSprite ) { return new String [ ] { VEL_TYPE_ROTATIONAL_2D , VEL_TYPE_CENTRIPETAL , VEL_TYPE_TANGENTIAL , VEL_TYPE_POLAR , VEL_TYPE_BROWNIAN } ; } else if ( type = = ControllerType . ModelInstance | | type = = ControllerType . ParticleController ) { return new String [ ] { VEL_TYPE_ROTATIONAL_3D , VEL_TYPE_CENTRIPETAL , VEL_TYPE_TANGENTIAL , VEL_TYPE_POLAR , VEL_TYPE_BROWNIAN , VEL_TYPE_FACE } ; } return null ; } protected void initializeComponents ( ) { super . initializeComponents ( ) ; JPanel velocitiesPanel = new JPanel ( ) ; velocitiesPanel . setLayout ( new GridBagLayout ( ) ) ; { JPanel sideButtons = new JPanel ( new GridBagLayout ( ) ) ; velocitiesPanel . add ( sideButtons , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . NORTHWEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { sideButtons . add ( velocityBox = new JComboBox ( new DefaultComboBoxModel ( ) ) , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { JButton newButton = new JButton ( <str> ) ; sideButtons . add ( newButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; newButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { createVelocity ( velocityBox . getSelectedItem ( ) ) ; } } ) ; } { JButton deleteButton = new JButton ( <str> ) ; sideButtons . add ( deleteButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; deleteButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { deleteVelocity ( ) ; } } ) ; } } JScrollPane scroll = new JScrollPane ( ) ; velocitiesPanel . add ( scroll , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; velocityTable = new JTable ( ) { public Class getColumnClass ( int column ) { return column = = <int> ? Boolean . class : super . getColumnClass ( column ) ; } @Override public Dimension getPreferredScrollableViewportSize ( ) { Dimension dim = super . getPreferredScrollableViewportSize ( ) ; dim . height = getPreferredSize ( ) . height ; return dim ; } } ; velocityTable . getTableHeader ( ) . setReorderingAllowed ( false ) ; velocityTable . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; scroll . setViewportView ( velocityTable ) ; velocityTableModel = new DefaultTableModel ( new String [ <int> ] [ <int> ] , new String [ ] { <str> , <str> } ) ; velocityTable . setModel ( velocityTableModel ) ; velocityTable . getSelectionModel ( ) . addListSelectionListener ( new ListSelectionListener ( ) { public void valueChanged ( ListSelectionEvent event ) { if ( event . getValueIsAdjusting ( ) ) return ; velocitySelected ( ) ; } } ) ; velocityTableModel . addTableModelListener ( new TableModelListener ( ) { public void tableChanged ( TableModelEvent event ) { if ( event . getColumn ( ) ! = <int> ) return ; velocityChecked ( event . getFirstRow ( ) , ( Boolean ) velocityTable . getValueAt ( event . getFirstRow ( ) , <int> ) ) ; } } ) ; emptyPanel = new ParticleValuePanel ( editor , <str> , <str> , true , false ) ; strengthVelocityPanel = new StrengthVelocityPanel ( editor , null , <str> , <str> , <str> ) ; angularVelocityPanel = new AngularVelocityPanel ( editor , null , <str> , <str> , <str> ) ; strengthVelocityPanel . setVisible ( false ) ; angularVelocityPanel . setVisible ( false ) ; emptyPanel . setVisible ( false ) ; strengthVelocityPanel . setIsAlwayShown ( true ) ; angularVelocityPanel . setIsAlwayShown ( true ) ; emptyPanel . setIsAlwayShown ( true ) ; emptyPanel . setValue ( null ) ; int i = <int> ; addContent ( i + + , <int> , velocitiesPanel ) ; addContent ( i + + , <int> , strengthVelocityPanel ) ; addContent ( i + + , <int> , angularVelocityPanel ) ; addContent ( i + + , <int> , emptyPanel ) ; } protected void velocityChecked ( int index , boolean isChecked ) { ParticleController controller = editor . getEmitter ( ) ; DynamicsInfluencer influencer = ( DynamicsInfluencer ) controller . findInfluencer ( DynamicsInfluencer . class ) ; influencer . velocities . clear ( ) ; velocities . get ( index ) . isActive = isChecked ; for ( VelocityWrapper wrapper : velocities ) { if ( wrapper . isActive ) influencer . velocities . add ( wrapper . velocityValue ) ; } editor . restart ( ) ; } protected void velocitySelected ( ) { int index = velocityTable . getSelectedRow ( ) ; if ( index = = - <int> ) return ; DynamicsModifier velocityValue = velocities . get ( index ) . velocityValue ; EditorPanel velocityPanel = getVelocityPanel ( velocityValue ) ; if ( selectedVelocityPanel ! = null & & selectedVelocityPanel ! = velocityPanel ) selectedVelocityPanel . setVisible ( false ) ; velocityPanel . setVisible ( true ) ; velocityPanel . showContent ( true ) ; selectedVelocityPanel = velocityPanel ; } private EditorPanel getVelocityPanel ( DynamicsModifier velocityValue ) { EditorPanel panel = null ; if ( velocityValue instanceof DynamicsModifier . Rotational2D ) { strengthVelocityPanel . setValue ( ( DynamicsModifier . Strength ) velocityValue ) ; strengthVelocityPanel . setName ( <str> ) ; strengthVelocityPanel . setDescription ( <str> ) ; panel = strengthVelocityPanel ; } else if ( velocityValue instanceof CentripetalAcceleration ) { strengthVelocityPanel . setValue ( ( DynamicsModifier . CentripetalAcceleration ) velocityValue ) ; strengthVelocityPanel . setName ( <str> ) ; strengthVelocityPanel . setDescription ( <str> ) ; panel = strengthVelocityPanel ; } else if ( velocityValue instanceof TangentialAcceleration ) { angularVelocityPanel . setValue ( ( DynamicsModifier . Angular ) velocityValue ) ; angularVelocityPanel . setName ( <str> ) ; angularVelocityPanel . setDescription ( <str> ) ; panel = angularVelocityPanel ; } else if ( velocityValue instanceof PolarAcceleration ) { angularVelocityPanel . setValue ( ( DynamicsModifier . Angular ) velocityValue ) ; angularVelocityPanel . setName ( <str> ) ; angularVelocityPanel . setDescription ( <str> ) ; panel = angularVelocityPanel ; } else if ( velocityValue instanceof BrownianAcceleration ) { strengthVelocityPanel . setValue ( ( DynamicsModifier . Strength ) velocityValue ) ; strengthVelocityPanel . setName ( <str> ) ; strengthVelocityPanel . setDescription ( <str> ) ; panel = strengthVelocityPanel ; } else if ( velocityValue instanceof Rotational3D ) { angularVelocityPanel . setValue ( ( DynamicsModifier . Angular ) velocityValue ) ; angularVelocityPanel . setName ( <str> ) ; angularVelocityPanel . setDescription ( <str> ) ; panel = angularVelocityPanel ; } else if ( velocityValue instanceof FaceDirection ) { emptyPanel . setName ( <str> ) ; emptyPanel . setDescription ( <str> ) ; panel = emptyPanel ; } return panel ; } private DynamicsModifier createVelocityValue ( Object selectedItem ) { DynamicsModifier velocityValue = null ; if ( selectedItem = = VEL_TYPE_ROTATIONAL_2D ) velocityValue = new DynamicsModifier . Rotational2D ( ) ; else if ( selectedItem = = VEL_TYPE_ROTATIONAL_3D ) velocityValue = new DynamicsModifier . Rotational3D ( ) ; else if ( selectedItem = = VEL_TYPE_CENTRIPETAL ) velocityValue = new DynamicsModifier . CentripetalAcceleration ( ) ; else if ( selectedItem = = VEL_TYPE_TANGENTIAL ) velocityValue = new DynamicsModifier . TangentialAcceleration ( ) ; else if ( selectedItem = = VEL_TYPE_POLAR ) velocityValue = new DynamicsModifier . PolarAcceleration ( ) ; else if ( selectedItem = = VEL_TYPE_BROWNIAN ) velocityValue = new DynamicsModifier . BrownianAcceleration ( ) ; else if ( selectedItem = = VEL_TYPE_FACE ) velocityValue = new DynamicsModifier . FaceDirection ( ) ; return velocityValue ; } protected void deleteVelocity ( ) { int row = velocityTable . getSelectedRow ( ) ; if ( row = = - <int> ) return ; ParticleController controller = editor . getEmitter ( ) ; DynamicsInfluencer influencer = ( DynamicsInfluencer ) controller . findInfluencer ( DynamicsInfluencer . class ) ; influencer . velocities . removeValue ( velocities . removeIndex ( row ) . velocityValue , true ) ; velocityTableModel . removeRow ( row ) ; editor . restart ( ) ; selectedVelocityPanel . setVisible ( false ) ; selectedVelocityPanel = null ; } protected void createVelocity ( Object selectedItem ) { ParticleController controller = editor . getEmitter ( ) ; DynamicsInfluencer influencer = ( DynamicsInfluencer ) controller . findInfluencer ( DynamicsInfluencer . class ) ; VelocityWrapper wrapper = new VelocityWrapper ( createVelocityValue ( selectedItem ) , true ) ; velocities . add ( wrapper ) ; influencer . velocities . add ( wrapper . velocityValue ) ; int index = velocities . size - <int> ; velocityTableModel . addRow ( new Object [ ] { <str> + index , true } ) ; editor . restart ( ) ; velocityTable . getSelectionModel ( ) . setSelectionInterval ( index , index ) ; revalidate ( ) ; repaint ( ) ; } } 

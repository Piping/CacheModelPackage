package org . apache . cassandra . locator ; import java . io . IOException ; import java . net . InetAddress ; import java . util . EnumMap ; import java . util . Map ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . gms . ApplicationState ; import org . apache . cassandra . gms . Gossiper ; import org . apache . cassandra . gms . VersionedValue ; import org . apache . cassandra . service . StorageService ; import static org . junit . Assert . assertEquals ; public class GoogleCloudSnitchTest { private static String az ; @BeforeClass public static void setup ( ) throws Exception { SchemaLoader . mkdirs ( ) ; SchemaLoader . cleanup ( ) ; Keyspace . setInitialized ( ) ; StorageService . instance . initServer ( <int> ) ; } private class TestGoogleCloudSnitch extends GoogleCloudSnitch { public TestGoogleCloudSnitch ( ) throws IOException , ConfigurationException { super ( ) ; } @Override String gceApiCall ( String url ) throws IOException , ConfigurationException { return az ; } } @Test public void testRac ( ) throws IOException , ConfigurationException { az = <str> ; GoogleCloudSnitch snitch = new TestGoogleCloudSnitch ( ) ; InetAddress local = InetAddress . getByName ( <str> ) ; InetAddress nonlocal = InetAddress . getByName ( <str> ) ; Gossiper . instance . addSavedEndpoint ( nonlocal ) ; Map < ApplicationState , VersionedValue > stateMap = new EnumMap < > ( ApplicationState . class ) ; stateMap . put ( ApplicationState . DC , StorageService . instance . valueFactory . datacenter ( <str> ) ) ; stateMap . put ( ApplicationState . RACK , StorageService . instance . valueFactory . datacenter ( <str> ) ) ; Gossiper . instance . getEndpointStateForEndpoint ( nonlocal ) . addApplicationStates ( stateMap ) ; assertEquals ( <str> , snitch . getDatacenter ( nonlocal ) ) ; assertEquals ( <str> , snitch . getRack ( nonlocal ) ) ; assertEquals ( <str> , snitch . getDatacenter ( local ) ) ; assertEquals ( <str> , snitch . getRack ( local ) ) ; } @Test public void testNewRegions ( ) throws IOException , ConfigurationException { az = <str> ; GoogleCloudSnitch snitch = new TestGoogleCloudSnitch ( ) ; InetAddress local = InetAddress . getByName ( <str> ) ; assertEquals ( <str> , snitch . getDatacenter ( local ) ) ; assertEquals ( <str> , snitch . getRack ( local ) ) ; } @AfterClass public static void tearDown ( ) { StorageService . instance . stopClient ( ) ; } } 

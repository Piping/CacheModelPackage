package org . gradle . util ; import org . gradle . api . DomainObjectSet ; import org . gradle . api . Named ; import org . gradle . api . NamedDomainObjectSet ; import org . gradle . api . internal . DefaultDomainObjectSet ; import org . gradle . api . internal . DefaultNamedDomainObjectSet ; import org . gradle . internal . reflect . DirectInstantiator ; import java . util . * ; public class WrapUtil { public static < T > Set < T > toSet ( T . . . items ) { Set < T > coll = new HashSet < T > ( ) ; Collections . addAll ( coll , items ) ; return coll ; } public static < T > DomainObjectSet < T > toDomainObjectSet ( Class < T > type , T . . . items ) { return new DefaultDomainObjectSet < T > ( type , toSet ( items ) ) ; } public static < T extends Named > NamedDomainObjectSet < T > toNamedDomainObjectSet ( Class < T > type , T . . . items ) { DefaultNamedDomainObjectSet < T > domainObjectSet = new DefaultNamedDomainObjectSet < T > ( type , DirectInstantiator . INSTANCE ) ; CollectionUtils . addAll ( domainObjectSet , items ) ; return domainObjectSet ; } public static < T > Set < T > toLinkedSet ( T . . . items ) { Set < T > coll = new LinkedHashSet < T > ( ) ; Collections . addAll ( coll , items ) ; return coll ; } public static < T > SortedSet < T > toSortedSet ( T . . . items ) { SortedSet < T > coll = new TreeSet < T > ( ) ; Collections . addAll ( coll , items ) ; return coll ; } public static < T > SortedSet < T > toSortedSet ( Comparator < T > comp , T . . . items ) { SortedSet < T > coll = new TreeSet < T > ( comp ) ; Collections . addAll ( coll , items ) ; return coll ; } public static < T > List < T > toList ( T . . . items ) { ArrayList < T > coll = new ArrayList < T > ( ) ; Collections . addAll ( coll , items ) ; return coll ; } public static < T > List < T > toList ( Iterable < ? extends T > items ) { ArrayList < T > coll = new ArrayList < T > ( ) ; for ( T item : items ) { coll . add ( item ) ; } return coll ; } public static < K , V > Map < K , V > toMap ( K key , V value ) { Map < K , V > map = new HashMap < K , V > ( ) ; map . put ( key , value ) ; return map ; } public static < K , V > SortedMap < K , V > toSortedMap ( K key , V value ) { SortedMap < K , V > map = new TreeMap < K , V > ( ) ; map . put ( key , value ) ; return map ; } public static < K , V > Map < K , V > toLinkedMap ( K key , V value ) { Map < K , V > map = new LinkedHashMap < K , V > ( ) ; map . put ( key , value ) ; return map ; } public static Properties toProperties ( String key , String value ) { Properties props = new Properties ( ) ; props . setProperty ( key , value ) ; return props ; } public static < T > T [ ] toArray ( T . . . items ) { return items ; } public static < T > Set < T > asSet ( Collection < T > c ) { return new LinkedHashSet < T > ( c ) ; } } 

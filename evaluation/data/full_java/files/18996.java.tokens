package io . netty . handler . codec . json ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . CorruptedFrameException ; import io . netty . handler . codec . TooLongFrameException ; import io . netty . util . CharsetUtil ; import org . junit . Test ; import static org . junit . Assert . * ; public class JsonObjectDecoderTest { @Test public void testJsonObjectOverMultipleWrites ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( ) ) ; String objectPart1 = <str> ; String objectPart2 = <str> ; String objectPart3 = <str> ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> + objectPart1 , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( objectPart2 , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( objectPart3 + <str> , CharsetUtil . UTF_8 ) ) ; ByteBuf res = ch . readInbound ( ) ; assertEquals ( objectPart1 + objectPart2 + objectPart3 , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testJsonArrayOverMultipleWrites ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( ) ) ; String arrayPart1 = <str> ; String arrayPart2 = <str> ; String arrayPart3 = <str> ; String arrayPart4 = <str> ; String arrayPart5 = <str> ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> + arrayPart1 , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( arrayPart2 , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( arrayPart3 , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( arrayPart4 , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( arrayPart5 + <str> , CharsetUtil . UTF_8 ) ) ; ByteBuf res = ch . readInbound ( ) ; assertEquals ( arrayPart1 + arrayPart2 + arrayPart3 + arrayPart4 + arrayPart5 , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testSingleByteStream ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( ) ) ; String json = <str> ; for ( byte c : json . getBytes ( CharsetUtil . UTF_8 ) ) { ch . writeInbound ( Unpooled . copiedBuffer ( new byte [ ] { c } ) ) ; } ByteBuf res = ch . readInbound ( ) ; assertEquals ( json , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testMultipleJsonObjectsInOneWrite ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( ) ) ; String object1 = <str> , object2 = <str> , object3 = <str> ; ch . writeInbound ( Unpooled . copiedBuffer ( object1 + object2 + object3 , CharsetUtil . UTF_8 ) ) ; ByteBuf res = ch . readInbound ( ) ; assertEquals ( object1 , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( object2 , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( object3 , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; assertFalse ( ch . finish ( ) ) ; } @Test ( expected = CorruptedFrameException . class ) public void testNonJsonContent1 ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( ) ) ; try { ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; } finally { assertFalse ( ch . finish ( ) ) ; } fail ( ) ; } @Test ( expected = CorruptedFrameException . class ) public void testNonJsonContent2 ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; ByteBuf res = ch . readInbound ( ) ; assertEquals ( <str> , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; try { ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; } finally { assertFalse ( ch . finish ( ) ) ; } fail ( ) ; } @Test ( expected = TooLongFrameException . class ) public void testMaxObjectLength ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( <int> ) ) ; try { ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; } finally { assertFalse ( ch . finish ( ) ) ; } fail ( ) ; } @Test public void testOneJsonObjectPerWrite ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( ) ) ; String object1 = <str> , object2 = <str> , object3 = <str> ; ch . writeInbound ( Unpooled . copiedBuffer ( object1 , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( object2 , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( object3 , CharsetUtil . UTF_8 ) ) ; ByteBuf res = ch . readInbound ( ) ; assertEquals ( object1 , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( object2 , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( object3 , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testSpecialJsonCharsInString ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( ) ) ; String object = <str> ; ch . writeInbound ( Unpooled . copiedBuffer ( object , CharsetUtil . UTF_8 ) ) ; ByteBuf res = ch . readInbound ( ) ; assertEquals ( object , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; assertFalse ( ch . finish ( ) ) ; } @Test public void testStreamArrayElementsSimple ( ) { EmbeddedChannel ch = new EmbeddedChannel ( new JsonObjectDecoder ( Integer . MAX_VALUE , true ) ) ; String array = <str> + <str> ; String object = <str> ; ch . writeInbound ( Unpooled . copiedBuffer ( array , CharsetUtil . UTF_8 ) ) ; ch . writeInbound ( Unpooled . copiedBuffer ( object , CharsetUtil . UTF_8 ) ) ; ByteBuf res = ch . readInbound ( ) ; assertEquals ( <str> , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( <str> , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( <str> , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( <str> , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( <str> , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( <str> , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( <str> , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( <str> , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; res = ch . readInbound ( ) ; assertEquals ( object , res . toString ( CharsetUtil . UTF_8 ) ) ; res . release ( ) ; assertFalse ( ch . finish ( ) ) ; } } 

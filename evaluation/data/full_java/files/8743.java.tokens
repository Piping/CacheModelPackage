package org . elasticsearch . discovery . ec2 ; import com . amazonaws . services . ec2 . model . Tag ; import org . elasticsearch . Version ; import org . elasticsearch . cloud . aws . AwsEc2Service ; import org . elasticsearch . cloud . aws . AwsEc2Service . DISCOVERY_EC2 ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . LocalTransportAddress ; import org . elasticsearch . common . transport . TransportAddress ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . transport . MockTransportService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import org . elasticsearch . transport . local . LocalTransport ; import org . junit . AfterClass ; import org . junit . Before ; import org . junit . BeforeClass ; import java . util . ArrayList ; import java . util . List ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . hasSize ; import static org . hamcrest . Matchers . is ; public class Ec2DiscoveryTests extends ESTestCase { protected static ThreadPool threadPool ; protected MockTransportService transportService ; @BeforeClass public static void createThreadPool ( ) { threadPool = new ThreadPool ( Ec2DiscoveryTests . class . getName ( ) ) ; } @AfterClass public static void stopThreadPool ( ) throws InterruptedException { if ( threadPool ! = null ) { terminate ( threadPool ) ; threadPool = null ; } } @Before public void createTransportService ( ) { transportService = new MockTransportService ( Settings . EMPTY , new LocalTransport ( Settings . EMPTY , threadPool , Version . CURRENT , new NamedWriteableRegistry ( ) ) , threadPool ) ; } protected List < DiscoveryNode > buildDynamicNodes ( Settings nodeSettings , int nodes ) { return buildDynamicNodes ( nodeSettings , nodes , null ) ; } protected List < DiscoveryNode > buildDynamicNodes ( Settings nodeSettings , int nodes , List < List < Tag > > tagsList ) { AwsEc2Service awsEc2Service = new AwsEc2ServiceMock ( nodeSettings , nodes , tagsList ) ; AwsEc2UnicastHostsProvider provider = new AwsEc2UnicastHostsProvider ( nodeSettings , transportService , awsEc2Service , Version . CURRENT ) ; List < DiscoveryNode > discoveryNodes = provider . buildDynamicNodes ( ) ; logger . debug ( <str> , discoveryNodes ) ; return discoveryNodes ; } public void testDefaultSettings ( ) throws InterruptedException { int nodes = randomInt ( <int> ) ; Settings nodeSettings = Settings . builder ( ) . build ( ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( nodeSettings , nodes ) ; assertThat ( discoveryNodes , hasSize ( nodes ) ) ; } public void testPrivateIp ( ) throws InterruptedException { int nodes = randomInt ( <int> ) ; Settings nodeSettings = Settings . builder ( ) . put ( DISCOVERY_EC2 . HOST_TYPE , <str> ) . build ( ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( nodeSettings , nodes ) ; assertThat ( discoveryNodes , hasSize ( nodes ) ) ; int node = <int> ; for ( DiscoveryNode discoveryNode : discoveryNodes ) { TransportAddress address = discoveryNode . getAddress ( ) ; TransportAddress expected = new LocalTransportAddress ( AmazonEC2Mock . PREFIX_PRIVATE_IP + node + + ) ; assertThat ( address . sameHost ( expected ) , is ( true ) ) ; } } public void testPublicIp ( ) throws InterruptedException { int nodes = randomInt ( <int> ) ; Settings nodeSettings = Settings . builder ( ) . put ( DISCOVERY_EC2 . HOST_TYPE , <str> ) . build ( ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( nodeSettings , nodes ) ; assertThat ( discoveryNodes , hasSize ( nodes ) ) ; int node = <int> ; for ( DiscoveryNode discoveryNode : discoveryNodes ) { TransportAddress address = discoveryNode . getAddress ( ) ; TransportAddress expected = new LocalTransportAddress ( AmazonEC2Mock . PREFIX_PUBLIC_IP + node + + ) ; assertThat ( address . sameHost ( expected ) , is ( true ) ) ; } } public void testPrivateDns ( ) throws InterruptedException { int nodes = randomInt ( <int> ) ; Settings nodeSettings = Settings . builder ( ) . put ( DISCOVERY_EC2 . HOST_TYPE , <str> ) . build ( ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( nodeSettings , nodes ) ; assertThat ( discoveryNodes , hasSize ( nodes ) ) ; int node = <int> ; for ( DiscoveryNode discoveryNode : discoveryNodes ) { String instanceId = <str> + node + + ; TransportAddress address = discoveryNode . getAddress ( ) ; TransportAddress expected = new LocalTransportAddress ( AmazonEC2Mock . PREFIX_PRIVATE_DNS + instanceId + AmazonEC2Mock . SUFFIX_PRIVATE_DNS ) ; assertThat ( address . sameHost ( expected ) , is ( true ) ) ; } } public void testPublicDns ( ) throws InterruptedException { int nodes = randomInt ( <int> ) ; Settings nodeSettings = Settings . builder ( ) . put ( DISCOVERY_EC2 . HOST_TYPE , <str> ) . build ( ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( nodeSettings , nodes ) ; assertThat ( discoveryNodes , hasSize ( nodes ) ) ; int node = <int> ; for ( DiscoveryNode discoveryNode : discoveryNodes ) { String instanceId = <str> + node + + ; TransportAddress address = discoveryNode . getAddress ( ) ; TransportAddress expected = new LocalTransportAddress ( AmazonEC2Mock . PREFIX_PUBLIC_DNS + instanceId + AmazonEC2Mock . SUFFIX_PUBLIC_DNS ) ; assertThat ( address . sameHost ( expected ) , is ( true ) ) ; } } public void testInvalidHostType ( ) throws InterruptedException { Settings nodeSettings = Settings . builder ( ) . put ( DISCOVERY_EC2 . HOST_TYPE , <str> ) . build ( ) ; try { buildDynamicNodes ( nodeSettings , <int> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testFilterByTags ( ) throws InterruptedException { int nodes = randomIntBetween ( <int> , <int> ) ; Settings nodeSettings = Settings . builder ( ) . put ( DISCOVERY_EC2 . TAG_PREFIX + <str> , <str> ) . build ( ) ; int prodInstances = <int> ; List < List < Tag > > tagsList = new ArrayList < > ( ) ; for ( int node = <int> ; node < nodes ; node + + ) { List < Tag > tags = new ArrayList < > ( ) ; if ( randomBoolean ( ) ) { tags . add ( new Tag ( <str> , <str> ) ) ; prodInstances + + ; } else { tags . add ( new Tag ( <str> , <str> ) ) ; } tagsList . add ( tags ) ; } logger . info ( <str> ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( nodeSettings , nodes , tagsList ) ; assertThat ( discoveryNodes , hasSize ( prodInstances ) ) ; } public void testFilterByMultipleTags ( ) throws InterruptedException { int nodes = randomIntBetween ( <int> , <int> ) ; Settings nodeSettings = Settings . builder ( ) . putArray ( DISCOVERY_EC2 . TAG_PREFIX + <str> , <str> , <str> ) . build ( ) ; int prodInstances = <int> ; List < List < Tag > > tagsList = new ArrayList < > ( ) ; for ( int node = <int> ; node < nodes ; node + + ) { List < Tag > tags = new ArrayList < > ( ) ; if ( randomBoolean ( ) ) { tags . add ( new Tag ( <str> , <str> ) ) ; if ( randomBoolean ( ) ) { tags . add ( new Tag ( <str> , <str> ) ) ; prodInstances + + ; } } else { tags . add ( new Tag ( <str> , <str> ) ) ; if ( randomBoolean ( ) ) { tags . add ( new Tag ( <str> , <str> ) ) ; } } tagsList . add ( tags ) ; } logger . info ( <str> ) ; List < DiscoveryNode > discoveryNodes = buildDynamicNodes ( nodeSettings , nodes , tagsList ) ; assertThat ( discoveryNodes , hasSize ( prodInstances ) ) ; } abstract class DummyEc2HostProvider extends AwsEc2UnicastHostsProvider { public int fetchCount = <int> ; public DummyEc2HostProvider ( Settings settings , TransportService transportService , AwsEc2Service service , Version version ) { super ( settings , transportService , service , version ) ; } } public void testGetNodeListEmptyCache ( ) throws Exception { AwsEc2Service awsEc2Service = new AwsEc2ServiceMock ( Settings . EMPTY , <int> , null ) ; DummyEc2HostProvider provider = new DummyEc2HostProvider ( Settings . EMPTY , transportService , awsEc2Service , Version . CURRENT ) { @Override protected List < DiscoveryNode > fetchDynamicNodes ( ) { fetchCount + + ; return new ArrayList < > ( ) ; } } ; for ( int i = <int> ; i < <int> ; i + + ) { provider . buildDynamicNodes ( ) ; } assertThat ( provider . fetchCount , is ( <int> ) ) ; } public void testGetNodeListCached ( ) throws Exception { Settings . Builder builder = Settings . settingsBuilder ( ) . put ( DISCOVERY_EC2 . NODE_CACHE_TIME , <str> ) ; AwsEc2Service awsEc2Service = new AwsEc2ServiceMock ( Settings . EMPTY , <int> , null ) ; DummyEc2HostProvider provider = new DummyEc2HostProvider ( builder . build ( ) , transportService , awsEc2Service , Version . CURRENT ) { @Override protected List < DiscoveryNode > fetchDynamicNodes ( ) { fetchCount + + ; return Ec2DiscoveryTests . this . buildDynamicNodes ( Settings . EMPTY , <int> ) ; } } ; for ( int i = <int> ; i < <int> ; i + + ) { provider . buildDynamicNodes ( ) ; } assertThat ( provider . fetchCount , is ( <int> ) ) ; Thread . sleep ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { provider . buildDynamicNodes ( ) ; } assertThat ( provider . fetchCount , is ( <int> ) ) ; } } 

package org . elasticsearch . common . util ; import org . apache . lucene . store . ByteArrayDataInput ; import org . apache . lucene . store . ByteArrayDataOutput ; public enum ByteUtils { ; public static final int MAX_BYTES_VLONG = <int> ; public static long zigZagDecode ( long n ) { return ( ( n > > > <int> ) ^ - ( n & <int> ) ) ; } public static long zigZagEncode ( long n ) { return ( n > > <int> ) ^ ( n < < <int> ) ; } public static void writeLongLE ( long l , byte [ ] arr , int offset ) { for ( int i = <int> ; i < <int> ; + + i ) { arr [ offset + + ] = ( byte ) l ; l > > > = <int> ; } assert l = = <int> ; } public static long readLongLE ( byte [ ] arr , int offset ) { long l = arr [ offset + + ] & <hex> ; for ( int i = <int> ; i < <int> ; + + i ) { l | = ( arr [ offset + + ] & <hex> ) < < ( <int> * i ) ; } return l ; } public static void writeIntLE ( int l , byte [ ] arr , int offset ) { for ( int i = <int> ; i < <int> ; + + i ) { arr [ offset + + ] = ( byte ) l ; l > > > = <int> ; } assert l = = <int> ; } public static int readIntLE ( byte [ ] arr , int offset ) { int l = arr [ offset + + ] & <hex> ; for ( int i = <int> ; i < <int> ; + + i ) { l | = ( arr [ offset + + ] & <hex> ) < < ( <int> * i ) ; } return l ; } public static void writeDoubleLE ( double d , byte [ ] arr , int offset ) { writeLongLE ( Double . doubleToRawLongBits ( d ) , arr , offset ) ; } public static double readDoubleLE ( byte [ ] arr , int offset ) { return Double . longBitsToDouble ( readLongLE ( arr , offset ) ) ; } public static void writeFloatLE ( float d , byte [ ] arr , int offset ) { writeIntLE ( Float . floatToRawIntBits ( d ) , arr , offset ) ; } public static float readFloatLE ( byte [ ] arr , int offset ) { return Float . intBitsToFloat ( readIntLE ( arr , offset ) ) ; } public static void writeVLong ( ByteArrayDataOutput out , long i ) { for ( int k = <int> ; k < <int> & & ( i & ~ <hex> ) ! = <int> L ; + + k ) { out . writeByte ( ( byte ) ( ( i & <hex> ) | <hex> ) ) ; i > > > = <int> ; } out . writeByte ( ( byte ) i ) ; } public static long readVLong ( ByteArrayDataInput in ) { byte b = in . readByte ( ) ; if ( b > = <int> ) return b ; long i = b & <hex> ; b = in . readByte ( ) ; i | = ( b & <hex> ) < < <int> ; if ( b > = <int> ) return i ; b = in . readByte ( ) ; i | = ( b & <hex> ) < < <int> ; if ( b > = <int> ) return i ; b = in . readByte ( ) ; i | = ( b & <hex> ) < < <int> ; if ( b > = <int> ) return i ; b = in . readByte ( ) ; i | = ( b & <hex> ) < < <int> ; if ( b > = <int> ) return i ; b = in . readByte ( ) ; i | = ( b & <hex> ) < < <int> ; if ( b > = <int> ) return i ; b = in . readByte ( ) ; i | = ( b & <hex> ) < < <int> ; if ( b > = <int> ) return i ; b = in . readByte ( ) ; i | = ( b & <hex> ) < < <int> ; if ( b > = <int> ) return i ; b = in . readByte ( ) ; i | = ( b & <hex> ) < < <int> ; return i ; } } 

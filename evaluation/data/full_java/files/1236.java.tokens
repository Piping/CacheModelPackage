package org . apache . cassandra . utils ; import java . nio . ByteBuffer ; import java . util . ArrayList ; import org . github . jamm . MemoryLayoutSpecification ; import org . github . jamm . MemoryMeter ; public class ObjectSizes { private static final MemoryMeter meter = new MemoryMeter ( ) . omitSharedBufferOverhead ( ) . withGuessing ( MemoryMeter . Guess . FALLBACK_UNSAFE ) . ignoreKnownSingletons ( ) ; private static final long BUFFER_EMPTY_SIZE = measure ( ByteBufferUtil . EMPTY_BYTE_BUFFER ) ; private static final long STRING_EMPTY_SIZE = measure ( <str> ) ; public static long sizeOfArray ( byte [ ] bytes ) { return sizeOfArray ( bytes . length , <int> ) ; } public static long sizeOfArray ( long [ ] longs ) { return sizeOfArray ( longs . length , <int> ) ; } public static long sizeOfArray ( int [ ] ints ) { return sizeOfArray ( ints . length , <int> ) ; } public static long sizeOfReferenceArray ( int length ) { return sizeOfArray ( length , MemoryLayoutSpecification . SPEC . getReferenceSize ( ) ) ; } public static long sizeOfArray ( Object [ ] objects ) { return sizeOfReferenceArray ( objects . length ) ; } private static long sizeOfArray ( int length , long elementSize ) { return MemoryLayoutSpecification . sizeOfArray ( length , elementSize ) ; } public static long sizeOnHeapOf ( ByteBuffer [ ] array ) { long allElementsSize = <int> ; for ( int i = <int> ; i < array . length ; i + + ) if ( array [ i ] ! = null ) allElementsSize + = sizeOnHeapOf ( array [ i ] ) ; return allElementsSize + sizeOfArray ( array ) ; } public static long sizeOnHeapExcludingData ( ByteBuffer [ ] array ) { return BUFFER_EMPTY_SIZE * array . length + sizeOfArray ( array ) ; } public static long sizeOnHeapOf ( ByteBuffer buffer ) { if ( buffer . isDirect ( ) ) return BUFFER_EMPTY_SIZE ; if ( buffer . capacity ( ) > buffer . remaining ( ) ) return buffer . remaining ( ) ; return BUFFER_EMPTY_SIZE + sizeOfArray ( buffer . capacity ( ) , <int> ) ; } public static long sizeOnHeapExcludingData ( ByteBuffer buffer ) { return BUFFER_EMPTY_SIZE ; } public static long sizeOf ( String str ) { return STRING_EMPTY_SIZE + sizeOfArray ( str . length ( ) , <int> ) ; } public static long measureDeep ( Object pojo ) { return meter . measureDeep ( pojo ) ; } public static long measure ( Object pojo ) { return meter . measure ( pojo ) ; } } 

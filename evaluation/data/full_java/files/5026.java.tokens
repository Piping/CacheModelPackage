package org . elasticsearch . action . admin . cluster . snapshots . status ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . support . master . MasterNodeRequest ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; import static org . elasticsearch . action . ValidateActions . addValidationError ; public class SnapshotsStatusRequest extends MasterNodeRequest < SnapshotsStatusRequest > { private String repository = <str> ; private String [ ] snapshots = Strings . EMPTY_ARRAY ; public SnapshotsStatusRequest ( ) { } public SnapshotsStatusRequest ( String repository , String [ ] snapshots ) { this . repository = repository ; this . snapshots = snapshots ; } public SnapshotsStatusRequest ( String repository ) { this . repository = repository ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( repository = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( snapshots = = null ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } public SnapshotsStatusRequest repository ( String repository ) { this . repository = repository ; return this ; } public String repository ( ) { return this . repository ; } public String [ ] snapshots ( ) { return this . snapshots ; } public SnapshotsStatusRequest snapshots ( String [ ] snapshots ) { this . snapshots = snapshots ; return this ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; repository = in . readString ( ) ; snapshots = in . readStringArray ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( repository ) ; out . writeStringArray ( snapshots ) ; } } 

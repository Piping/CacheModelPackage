package com . google . common . collect ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import java . util . Comparator ; import java . util . Iterator ; import java . util . NavigableSet ; @Beta @GwtCompatible ( emulated = true ) public abstract class ForwardingSortedMultiset < E > extends ForwardingMultiset < E > implements SortedMultiset < E > { protected ForwardingSortedMultiset ( ) { } @Override protected abstract SortedMultiset < E > delegate ( ) ; @Override public NavigableSet < E > elementSet ( ) { return ( NavigableSet < E > ) super . elementSet ( ) ; } protected class StandardElementSet extends SortedMultisets . NavigableElementSet < E > { public StandardElementSet ( ) { super ( ForwardingSortedMultiset . this ) ; } } @Override public Comparator < ? super E > comparator ( ) { return delegate ( ) . comparator ( ) ; } @Override public SortedMultiset < E > descendingMultiset ( ) { return delegate ( ) . descendingMultiset ( ) ; } protected abstract class StandardDescendingMultiset extends DescendingMultiset < E > { public StandardDescendingMultiset ( ) { } @Override SortedMultiset < E > forwardMultiset ( ) { return ForwardingSortedMultiset . this ; } } @Override public Entry < E > firstEntry ( ) { return delegate ( ) . firstEntry ( ) ; } protected Entry < E > standardFirstEntry ( ) { Iterator < Entry < E > > entryIterator = entrySet ( ) . iterator ( ) ; if ( ! entryIterator . hasNext ( ) ) { return null ; } Entry < E > entry = entryIterator . next ( ) ; return Multisets . immutableEntry ( entry . getElement ( ) , entry . getCount ( ) ) ; } @Override public Entry < E > lastEntry ( ) { return delegate ( ) . lastEntry ( ) ; } protected Entry < E > standardLastEntry ( ) { Iterator < Entry < E > > entryIterator = descendingMultiset ( ) . entrySet ( ) . iterator ( ) ; if ( ! entryIterator . hasNext ( ) ) { return null ; } Entry < E > entry = entryIterator . next ( ) ; return Multisets . immutableEntry ( entry . getElement ( ) , entry . getCount ( ) ) ; } @Override public Entry < E > pollFirstEntry ( ) { return delegate ( ) . pollFirstEntry ( ) ; } protected Entry < E > standardPollFirstEntry ( ) { Iterator < Entry < E > > entryIterator = entrySet ( ) . iterator ( ) ; if ( ! entryIterator . hasNext ( ) ) { return null ; } Entry < E > entry = entryIterator . next ( ) ; entry = Multisets . immutableEntry ( entry . getElement ( ) , entry . getCount ( ) ) ; entryIterator . remove ( ) ; return entry ; } @Override public Entry < E > pollLastEntry ( ) { return delegate ( ) . pollLastEntry ( ) ; } protected Entry < E > standardPollLastEntry ( ) { Iterator < Entry < E > > entryIterator = descendingMultiset ( ) . entrySet ( ) . iterator ( ) ; if ( ! entryIterator . hasNext ( ) ) { return null ; } Entry < E > entry = entryIterator . next ( ) ; entry = Multisets . immutableEntry ( entry . getElement ( ) , entry . getCount ( ) ) ; entryIterator . remove ( ) ; return entry ; } @Override public SortedMultiset < E > headMultiset ( E upperBound , BoundType boundType ) { return delegate ( ) . headMultiset ( upperBound , boundType ) ; } @Override public SortedMultiset < E > subMultiset ( E lowerBound , BoundType lowerBoundType , E upperBound , BoundType upperBoundType ) { return delegate ( ) . subMultiset ( lowerBound , lowerBoundType , upperBound , upperBoundType ) ; } protected SortedMultiset < E > standardSubMultiset ( E lowerBound , BoundType lowerBoundType , E upperBound , BoundType upperBoundType ) { return tailMultiset ( lowerBound , lowerBoundType ) . headMultiset ( upperBound , upperBoundType ) ; } @Override public SortedMultiset < E > tailMultiset ( E lowerBound , BoundType boundType ) { return delegate ( ) . tailMultiset ( lowerBound , boundType ) ; } } 

package org . elasticsearch . watcher ; import org . elasticsearch . common . component . AbstractLifecycleComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . concurrent . FutureUtils ; import org . elasticsearch . threadpool . ThreadPool ; import java . io . IOException ; import java . util . Set ; import java . util . concurrent . CopyOnWriteArraySet ; import java . util . concurrent . ScheduledFuture ; public class ResourceWatcherService extends AbstractLifecycleComponent < ResourceWatcherService > { public enum Frequency { HIGH ( TimeValue . timeValueSeconds ( <int> ) ) , MEDIUM ( TimeValue . timeValueSeconds ( <int> ) ) , LOW ( TimeValue . timeValueSeconds ( <int> ) ) ; final TimeValue interval ; Frequency ( TimeValue interval ) { this . interval = interval ; } } private final boolean enabled ; private final ThreadPool threadPool ; final ResourceMonitor lowMonitor ; final ResourceMonitor mediumMonitor ; final ResourceMonitor highMonitor ; private volatile ScheduledFuture lowFuture ; private volatile ScheduledFuture mediumFuture ; private volatile ScheduledFuture highFuture ; @Inject public ResourceWatcherService ( Settings settings , ThreadPool threadPool ) { super ( settings ) ; this . enabled = settings . getAsBoolean ( <str> , true ) ; this . threadPool = threadPool ; TimeValue interval = settings . getAsTime ( <str> , Frequency . LOW . interval ) ; lowMonitor = new ResourceMonitor ( interval , Frequency . LOW ) ; interval = settings . getAsTime ( <str> , settings . getAsTime ( <str> , Frequency . MEDIUM . interval ) ) ; mediumMonitor = new ResourceMonitor ( interval , Frequency . MEDIUM ) ; interval = settings . getAsTime ( <str> , Frequency . HIGH . interval ) ; highMonitor = new ResourceMonitor ( interval , Frequency . HIGH ) ; logRemovedSetting ( <str> , <str> ) ; logRemovedSetting ( <str> , <str> ) ; logRemovedSetting ( <str> , <str> ) ; logRemovedSetting ( <str> , <str> ) ; logRemovedSetting ( <str> , <str> ) ; } @Override protected void doStart ( ) { if ( ! enabled ) { return ; } lowFuture = threadPool . scheduleWithFixedDelay ( lowMonitor , lowMonitor . interval ) ; mediumFuture = threadPool . scheduleWithFixedDelay ( mediumMonitor , mediumMonitor . interval ) ; highFuture = threadPool . scheduleWithFixedDelay ( highMonitor , highMonitor . interval ) ; } @Override protected void doStop ( ) { if ( ! enabled ) { return ; } FutureUtils . cancel ( lowFuture ) ; FutureUtils . cancel ( mediumFuture ) ; FutureUtils . cancel ( highFuture ) ; } @Override protected void doClose ( ) { } public < W extends ResourceWatcher > WatcherHandle < W > add ( W watcher ) throws IOException { return add ( watcher , Frequency . MEDIUM ) ; } public < W extends ResourceWatcher > WatcherHandle < W > add ( W watcher , Frequency frequency ) throws IOException { watcher . init ( ) ; switch ( frequency ) { case LOW : return lowMonitor . add ( watcher ) ; case MEDIUM : return mediumMonitor . add ( watcher ) ; case HIGH : return highMonitor . add ( watcher ) ; default : throw new IllegalArgumentException ( <str> + frequency + <str> ) ; } } public void notifyNow ( ) { notifyNow ( Frequency . MEDIUM ) ; } public void notifyNow ( Frequency frequency ) { switch ( frequency ) { case LOW : lowMonitor . run ( ) ; break ; case MEDIUM : mediumMonitor . run ( ) ; break ; case HIGH : highMonitor . run ( ) ; break ; default : throw new IllegalArgumentException ( <str> + frequency + <str> ) ; } } class ResourceMonitor implements Runnable { final TimeValue interval ; final Frequency frequency ; final Set < ResourceWatcher > watchers = new CopyOnWriteArraySet < > ( ) ; private ResourceMonitor ( TimeValue interval , Frequency frequency ) { this . interval = interval ; this . frequency = frequency ; } private < W extends ResourceWatcher > WatcherHandle < W > add ( W watcher ) { watchers . add ( watcher ) ; return new WatcherHandle < > ( this , watcher ) ; } @Override public synchronized void run ( ) { for ( ResourceWatcher watcher : watchers ) { try { watcher . checkAndNotify ( ) ; } catch ( IOException e ) { logger . trace ( <str> , e ) ; } } } } } 

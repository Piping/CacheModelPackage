package org . gradle . api . internal . artifacts . ivyservice . resolveengine ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . Version ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . VersionComparator ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . VersionParser ; import org . gradle . internal . component . model . ComponentResolveMetaData ; import java . util . * ; class LatestModuleConflictResolver implements ModuleConflictResolver { private final Comparator < Version > versionComparator ; private final VersionParser versionParser = new VersionParser ( ) ; LatestModuleConflictResolver ( VersionComparator versionComparator ) { this . versionComparator = versionComparator . asVersionComparator ( ) ; } public < T extends ComponentResolutionState > T select ( Collection < ? extends T > candidates ) { Version baseVersion = null ; Map < Version , T > matches = new LinkedHashMap < Version , T > ( ) ; for ( T candidate : candidates ) { Version version = versionParser . transform ( candidate . getVersion ( ) ) ; if ( baseVersion = = null | | versionComparator . compare ( version . getBaseVersion ( ) , baseVersion ) > <int> ) { matches . clear ( ) ; baseVersion = version . getBaseVersion ( ) ; matches . put ( version , candidate ) ; } else if ( version . getBaseVersion ( ) . equals ( baseVersion ) ) { matches . put ( version , candidate ) ; } } if ( matches . size ( ) = = <int> ) { return matches . values ( ) . iterator ( ) . next ( ) ; } List < Version > sorted = new ArrayList < Version > ( matches . keySet ( ) ) ; Collections . sort ( sorted , Collections . reverseOrder ( versionComparator ) ) ; for ( Version version : sorted ) { T component = matches . get ( version ) ; if ( ! version . isQualified ( ) ) { return component ; } ComponentResolveMetaData metaData = component . getMetaData ( ) ; if ( metaData ! = null & & <str> . equals ( metaData . getStatus ( ) ) ) { return component ; } } return matches . get ( sorted . get ( <int> ) ) ; } } 

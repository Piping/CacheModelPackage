package org . elasticsearch . index . engine ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . common . lease . Releasable ; import org . elasticsearch . index . store . Store ; import java . util . concurrent . atomic . AtomicInteger ; public class RecoveryCounter implements Releasable { private final Store store ; RecoveryCounter ( Store store ) { this . store = store ; } private final AtomicInteger onGoingRecoveries = new AtomicInteger ( ) ; void startRecovery ( ) { store . incRef ( ) ; onGoingRecoveries . incrementAndGet ( ) ; } public int get ( ) { return onGoingRecoveries . get ( ) ; } int endRecovery ( ) { store . decRef ( ) ; int left = onGoingRecoveries . decrementAndGet ( ) ; assert onGoingRecoveries . get ( ) > = <int> : <str> + onGoingRecoveries . get ( ) ; return left ; } @Override public void close ( ) { endRecovery ( ) ; } } 

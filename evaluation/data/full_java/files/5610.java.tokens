package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . cluster . routing . allocation . command . AllocationCommand ; import org . elasticsearch . cluster . routing . allocation . command . AllocationCommands ; import org . elasticsearch . cluster . routing . allocation . decider . Decision ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; public class RerouteExplanation implements ToXContent { private AllocationCommand command ; private Decision decisions ; public RerouteExplanation ( AllocationCommand command , Decision decisions ) { this . command = command ; this . decisions = decisions ; } public AllocationCommand command ( ) { return this . command ; } public Decision decisions ( ) { return this . decisions ; } public static RerouteExplanation readFrom ( StreamInput in ) throws IOException { String commandName = in . readString ( ) ; AllocationCommand command = AllocationCommands . lookupFactorySafe ( commandName ) . readFrom ( in ) ; Decision decisions = Decision . readFrom ( in ) ; return new RerouteExplanation ( command , decisions ) ; } public static void writeTo ( RerouteExplanation explanation , StreamOutput out ) throws IOException { out . writeString ( explanation . command . name ( ) ) ; AllocationCommands . lookupFactorySafe ( explanation . command . name ( ) ) . writeTo ( explanation . command , out ) ; Decision . writeTo ( explanation . decisions , out ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; builder . field ( <str> , command . name ( ) ) ; AllocationCommands . lookupFactorySafe ( command . name ( ) ) . toXContent ( command , builder , params , <str> ) ; if ( decisions instanceof Decision . Multi ) { decisions . toXContent ( builder , params ) ; } else { builder . startArray ( <str> ) ; decisions . toXContent ( builder , params ) ; builder . endArray ( ) ; } builder . endObject ( ) ; return builder ; } } 

package org . eclipse . debug . internal . ui . actions ; import java . util . Iterator ; import org . eclipse . core . runtime . MultiStatus ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . custom . BusyIndicator ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Event ; import org . eclipse . ui . IActionDelegate2 ; import org . eclipse . ui . IViewActionDelegate ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . IWorkbenchWindow ; public abstract class AbstractDebugActionDelegate implements IViewActionDelegate , IActionDelegate2 { private IAction fAction ; private IViewPart fViewPart ; private IStructuredSelection fSelection = StructuredSelection . EMPTY ; private boolean fInitialized = false ; public AbstractDebugActionDelegate ( ) { } @Override public void dispose ( ) { fSelection = null ; } @Override public void run ( IAction action ) { if ( action . isEnabled ( ) ) { IStructuredSelection selection = getSelection ( ) ; action . setEnabled ( false ) ; runInForeground ( selection ) ; } } private void runInForeground ( final IStructuredSelection selection ) { final MultiStatus status = new MultiStatus ( DebugUIPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , getStatusMessage ( ) , null ) ; BusyIndicator . showWhile ( Display . getCurrent ( ) , new Runnable ( ) { @Override public void run ( ) { Iterator < ? > selectionIter = selection . iterator ( ) ; while ( selectionIter . hasNext ( ) ) { Object element = selectionIter . next ( ) ; try { if ( isEnabledFor ( element ) ) { doAction ( element ) ; } } catch ( DebugException e ) { status . merge ( e . getStatus ( ) ) ; } } } } ) ; reportErrors ( status ) ; } private void reportErrors ( final MultiStatus ms ) { if ( ! ms . isOK ( ) ) { IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { DebugUIPlugin . errorDialog ( window . getShell ( ) , ActionMessages . AbstractDebugActionDelegate_0 , getErrorDialogMessage ( ) , ms ) ; } else { DebugUIPlugin . log ( ms ) ; } } } @Override public void selectionChanged ( IAction action , ISelection s ) { boolean wasInitialized = initialize ( action , s ) ; if ( ! wasInitialized ) { if ( getView ( ) ! = null ) { update ( action , s ) ; } } } protected void update ( IAction action , ISelection s ) { if ( s instanceof IStructuredSelection ) { IStructuredSelection ss = getTargetSelection ( ( IStructuredSelection ) s ) ; action . setEnabled ( getEnableStateForSelection ( ss ) ) ; setSelection ( ss ) ; } else { action . setEnabled ( false ) ; setSelection ( StructuredSelection . EMPTY ) ; } } protected IStructuredSelection getTargetSelection ( IStructuredSelection s ) { return s ; } protected abstract void doAction ( Object element ) throws DebugException ; protected String getErrorDialogMessage ( ) { return null ; } protected String getStatusMessage ( ) { return IInternalDebugCoreConstants . EMPTY_STRING ; } @Override public void init ( IViewPart view ) { fViewPart = view ; } protected IViewPart getView ( ) { return fViewPart ; } protected boolean initialize ( IAction action , ISelection selection ) { if ( ! isInitialized ( ) ) { setAction ( action ) ; update ( action , selection ) ; setInitialized ( true ) ; return true ; } return false ; } protected IStructuredSelection getSelection ( ) { return fSelection ; } private void setSelection ( IStructuredSelection selection ) { fSelection = selection ; } protected void setAction ( IAction action ) { fAction = action ; } protected IAction getAction ( ) { return fAction ; } protected boolean isInitialized ( ) { return fInitialized ; } protected void setInitialized ( boolean initialized ) { fInitialized = initialized ; } protected boolean getEnableStateForSelection ( IStructuredSelection selection ) { if ( selection . size ( ) = = <int> ) { return false ; } Iterator < ? > itr = selection . iterator ( ) ; while ( itr . hasNext ( ) ) { Object element = itr . next ( ) ; if ( ! isEnabledFor ( element ) ) { return false ; } } return true ; } protected boolean isEnabledFor ( Object element ) { return true ; } @Override public void runWithEvent ( IAction action , Event event ) { run ( action ) ; } @Override public void init ( IAction action ) { fAction = action ; } } 

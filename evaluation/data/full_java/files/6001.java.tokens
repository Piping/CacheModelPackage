package org . elasticsearch . common . lucene . search . function ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . Explanation ; import java . io . IOException ; import java . util . Objects ; public class WeightFactorFunction extends ScoreFunction { private static final ScoreFunction SCORE_ONE = new ScoreOne ( CombineFunction . MULTIPLY ) ; private final ScoreFunction scoreFunction ; private float weight = <float> ; public WeightFactorFunction ( float weight , ScoreFunction scoreFunction ) { super ( CombineFunction . MULTIPLY ) ; if ( scoreFunction = = null ) { this . scoreFunction = SCORE_ONE ; } else { this . scoreFunction = scoreFunction ; } this . weight = weight ; } public WeightFactorFunction ( float weight ) { super ( CombineFunction . MULTIPLY ) ; this . scoreFunction = SCORE_ONE ; this . weight = weight ; } @Override public LeafScoreFunction getLeafScoreFunction ( LeafReaderContext ctx ) throws IOException { final LeafScoreFunction leafFunction = scoreFunction . getLeafScoreFunction ( ctx ) ; return new LeafScoreFunction ( ) { @Override public double score ( int docId , float subQueryScore ) { return leafFunction . score ( docId , subQueryScore ) * getWeight ( ) ; } @Override public Explanation explainScore ( int docId , Explanation subQueryScore ) throws IOException { Explanation functionExplanation = leafFunction . explainScore ( docId , subQueryScore ) ; return Explanation . match ( functionExplanation . getValue ( ) * ( float ) getWeight ( ) , <str> , functionExplanation , explainWeight ( ) ) ; } } ; } @Override public boolean needsScores ( ) { return false ; } public Explanation explainWeight ( ) { return Explanation . match ( getWeight ( ) , <str> ) ; } public float getWeight ( ) { return weight ; } public ScoreFunction getScoreFunction ( ) { return scoreFunction ; } @Override protected boolean doEquals ( ScoreFunction other ) { WeightFactorFunction weightFactorFunction = ( WeightFactorFunction ) other ; return this . weight = = weightFactorFunction . weight & & Objects . equals ( this . scoreFunction , weightFactorFunction . scoreFunction ) ; } private static class ScoreOne extends ScoreFunction { protected ScoreOne ( CombineFunction scoreCombiner ) { super ( scoreCombiner ) ; } @Override public LeafScoreFunction getLeafScoreFunction ( LeafReaderContext ctx ) { return new LeafScoreFunction ( ) { @Override public double score ( int docId , float subQueryScore ) { return <float> ; } @Override public Explanation explainScore ( int docId , Explanation subQueryScore ) { return Explanation . match ( <float> , <str> ) ; } } ; } @Override public boolean needsScores ( ) { return false ; } @Override protected boolean doEquals ( ScoreFunction other ) { return true ; } } } 

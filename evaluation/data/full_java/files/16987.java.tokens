package com . badlogic . gdx . backends . gwt . preloader ; import java . io . IOException ; import java . io . InputStream ; import com . google . gwt . typedarrays . shared . Int8Array ; public final class Blob { public Blob ( Int8Array data ) { this . data = data ; } public int length ( ) { return data . length ( ) ; } public byte get ( int i ) { return data . get ( i ) ; } public InputStream read ( ) { return new InputStream ( ) { @Override public int read ( ) throws IOException { if ( pos = = length ( ) ) return - <int> ; return get ( pos + + ) & <hex> ; } @Override public int available ( ) { return length ( ) - pos ; } int pos ; } ; } public String toBase64 ( ) { int length = data . length ( ) ; String base64code = <str> ; StringBuilder encoded = new StringBuilder ( length * <int> / <int> + <int> ) ; for ( int i = <int> ; i < length ; i + = <int> ) { if ( length - i > = <int> ) { int j = ( ( data . get ( i ) & <hex> ) < < <int> ) + ( ( data . get ( i + <int> ) & <hex> ) < < <int> ) + ( data . get ( i + <int> ) & <hex> ) ; encoded . append ( base64code . charAt ( ( j > > <int> ) & <hex> ) ) ; encoded . append ( base64code . charAt ( ( j > > <int> ) & <hex> ) ) ; encoded . append ( base64code . charAt ( ( j > > <int> ) & <hex> ) ) ; encoded . append ( base64code . charAt ( j & <hex> ) ) ; } else if ( length - i > = <int> ) { int j = ( ( data . get ( i ) & <hex> ) < < <int> ) + ( ( data . get ( i + <int> ) & <hex> ) < < <int> ) ; encoded . append ( base64code . charAt ( ( j > > <int> ) & <hex> ) ) ; encoded . append ( base64code . charAt ( ( j > > <int> ) & <hex> ) ) ; encoded . append ( base64code . charAt ( ( j > > <int> ) & <hex> ) ) ; encoded . append ( <str> ) ; } else { int j = ( ( data . get ( i ) & <hex> ) < < <int> ) ; encoded . append ( base64code . charAt ( ( j > > <int> ) & <hex> ) ) ; encoded . append ( base64code . charAt ( ( j > > <int> ) & <hex> ) ) ; encoded . append ( <str> ) ; } } return encoded . toString ( ) ; } private final Int8Array data ; } 

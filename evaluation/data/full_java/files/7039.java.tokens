package org . elasticsearch . rest . action . delete ; import org . elasticsearch . action . WriteConsistencyLevel ; import org . elasticsearch . action . delete . DeleteRequest ; import org . elasticsearch . action . delete . DeleteResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import org . elasticsearch . rest . action . support . RestStatusToXContentListener ; import static org . elasticsearch . rest . RestRequest . Method . DELETE ; public class RestDeleteAction extends BaseRestHandler { @Inject public RestDeleteAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( DELETE , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { DeleteRequest deleteRequest = new DeleteRequest ( request . param ( <str> ) , request . param ( <str> ) , request . param ( <str> ) ) ; deleteRequest . routing ( request . param ( <str> ) ) ; deleteRequest . parent ( request . param ( <str> ) ) ; deleteRequest . timeout ( request . paramAsTime ( <str> , DeleteRequest . DEFAULT_TIMEOUT ) ) ; deleteRequest . refresh ( request . paramAsBoolean ( <str> , deleteRequest . refresh ( ) ) ) ; deleteRequest . version ( RestActions . parseVersion ( request ) ) ; deleteRequest . versionType ( VersionType . fromString ( request . param ( <str> ) , deleteRequest . versionType ( ) ) ) ; String consistencyLevel = request . param ( <str> ) ; if ( consistencyLevel ! = null ) { deleteRequest . consistencyLevel ( WriteConsistencyLevel . fromString ( consistencyLevel ) ) ; } client . delete ( deleteRequest , new RestStatusToXContentListener < > ( channel ) ) ; } } 

package com . badlogic . gdx . tools . hiero ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . tools . hiero . unicodefont . Glyph ; import com . badlogic . gdx . tools . hiero . unicodefont . GlyphPage ; import com . badlogic . gdx . tools . hiero . unicodefont . UnicodeFont ; import com . badlogic . gdx . utils . IntIntMap ; import org . lwjgl . BufferUtils ; import org . lwjgl . opengl . GL11 ; import org . lwjgl . opengl . GL12 ; import javax . imageio . ImageIO ; import java . awt . * ; import java . awt . font . GlyphMetrics ; import java . awt . font . GlyphVector ; import java . awt . image . BufferedImage ; import java . awt . image . WritableRaster ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . PrintStream ; import java . nio . IntBuffer ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class BMFontUtil { private final UnicodeFont unicodeFont ; public BMFontUtil ( UnicodeFont unicodeFont ) { this . unicodeFont = unicodeFont ; } public void save ( File outputBMFontFile ) throws IOException { File outputDir = outputBMFontFile . getParentFile ( ) ; String outputName = outputBMFontFile . getName ( ) ; if ( outputName . endsWith ( <str> ) ) outputName = outputName . substring ( <int> , outputName . length ( ) - <int> ) ; unicodeFont . loadGlyphs ( ) ; PrintStream out = new PrintStream ( new FileOutputStream ( new File ( outputDir , outputName + <str> ) ) ) ; Font font = unicodeFont . getFont ( ) ; int pageWidth = unicodeFont . getGlyphPageWidth ( ) ; int pageHeight = unicodeFont . getGlyphPageHeight ( ) ; out . println ( <str> + font . getFontName ( ) + <str> + font . getSize ( ) + <str> + ( font . isBold ( ) ? <int> : <int> ) + <str> + ( font . isItalic ( ) ? <int> : <int> ) + <str> + unicodeFont . getPaddingTop ( ) + <str> + unicodeFont . getPaddingLeft ( ) + <str> + unicodeFont . getPaddingBottom ( ) + <str> + unicodeFont . getPaddingRight ( ) + <str> + unicodeFont . getPaddingAdvanceX ( ) + <str> + unicodeFont . getPaddingAdvanceY ( ) ) ; out . println ( <str> + unicodeFont . getLineHeight ( ) + <str> + unicodeFont . getAscent ( ) + <str> + pageWidth + <str> + pageHeight + <str> + unicodeFont . getGlyphPages ( ) . size ( ) + <str> ) ; int pageIndex = <int> , glyphCount = <int> ; for ( Iterator pageIter = unicodeFont . getGlyphPages ( ) . iterator ( ) ; pageIter . hasNext ( ) ; ) { GlyphPage page = ( GlyphPage ) pageIter . next ( ) ; String fileName ; if ( pageIndex = = <int> & & ! pageIter . hasNext ( ) ) fileName = outputName + <str> ; else fileName = outputName + ( pageIndex + <int> ) + <str> ; out . println ( <str> + pageIndex + <str> + fileName + <str> ) ; glyphCount + = page . getGlyphs ( ) . size ( ) ; pageIndex + + ; } out . println ( <str> + glyphCount ) ; int [ ] glyphMetrics = getGlyphMetrics ( font , <int> ) ; int xAdvance = glyphMetrics [ <int> ] ; out . println ( <str> + unicodeFont . getAscent ( ) + <str> + xAdvance + <str> ) ; pageIndex = <int> ; List allGlyphs = new ArrayList ( <int> ) ; for ( Iterator pageIter = unicodeFont . getGlyphPages ( ) . iterator ( ) ; pageIter . hasNext ( ) ; ) { GlyphPage page = ( GlyphPage ) pageIter . next ( ) ; for ( Iterator glyphIter = page . getGlyphs ( ) . iterator ( ) ; glyphIter . hasNext ( ) ; ) { Glyph glyph = ( Glyph ) glyphIter . next ( ) ; glyphMetrics = getGlyphMetrics ( font , glyph . getCodePoint ( ) ) ; int xOffset = glyphMetrics [ <int> ] ; xAdvance = glyphMetrics [ <int> ] ; out . println ( <str> + glyph . getCodePoint ( ) + <str> + <str> + ( int ) ( glyph . getU ( ) * pageWidth ) + <str> + ( int ) ( glyph . getV ( ) * pageHeight ) + <str> + glyph . getWidth ( ) + <str> + glyph . getHeight ( ) + <str> + xOffset + <str> + glyph . getYOffset ( ) + <str> + xAdvance + <str> + pageIndex + <str> ) ; } allGlyphs . addAll ( page . getGlyphs ( ) ) ; pageIndex + + ; } String ttfFileRef = unicodeFont . getFontFile ( ) ; if ( ttfFileRef = = null ) System . out . println ( <str> ) ; else { Kerning kerning = new Kerning ( ) ; try { kerning . load ( Gdx . files . internal ( ttfFileRef ) . read ( ) , font . getSize ( ) ) ; } catch ( IOException ex ) { System . out . println ( <str> + ttfFileRef ) ; ex . printStackTrace ( ) ; } IntIntMap glyphCodeToCodePoint = new IntIntMap ( ) ; for ( Iterator iter = allGlyphs . iterator ( ) ; iter . hasNext ( ) ; ) { Glyph glyph = ( Glyph ) iter . next ( ) ; glyphCodeToCodePoint . put ( new Integer ( getGlyphCode ( font , glyph . getCodePoint ( ) ) ) , new Integer ( glyph . getCodePoint ( ) ) ) ; } List kernings = new ArrayList ( <int> ) ; class KerningPair { public int firstCodePoint , secondCodePoint , offset ; } for ( IntIntMap . Entry entry : kerning . getKernings ( ) ) { int firstGlyphCode = entry . key > > <int> ; int secondGlyphCode = entry . key & <hex> ; int offset = entry . value ; int firstCodePoint = glyphCodeToCodePoint . get ( firstGlyphCode , - <int> ) ; int secondCodePoint = glyphCodeToCodePoint . get ( secondGlyphCode , - <int> ) ; if ( firstCodePoint = = - <int> | | secondCodePoint = = - <int> | | offset = = <int> ) { continue ; } KerningPair pair = new KerningPair ( ) ; pair . firstCodePoint = firstCodePoint ; pair . secondCodePoint = secondCodePoint ; pair . offset = offset ; kernings . add ( pair ) ; } out . println ( <str> + kernings . size ( ) ) ; for ( Iterator iter = kernings . iterator ( ) ; iter . hasNext ( ) ; ) { KerningPair pair = ( KerningPair ) iter . next ( ) ; out . println ( <str> + pair . firstCodePoint + <str> + pair . secondCodePoint + <str> + pair . offset ) ; } } out . close ( ) ; int width = unicodeFont . getGlyphPageWidth ( ) ; int height = unicodeFont . getGlyphPageHeight ( ) ; IntBuffer buffer = BufferUtils . createIntBuffer ( width * height ) ; BufferedImage pageImage = new BufferedImage ( width , height , BufferedImage . TYPE_INT_ARGB ) ; int [ ] row = new int [ width ] ; pageIndex = <int> ; for ( Iterator pageIter = unicodeFont . getGlyphPages ( ) . iterator ( ) ; pageIter . hasNext ( ) ; ) { GlyphPage page = ( GlyphPage ) pageIter . next ( ) ; String fileName ; if ( pageIndex = = <int> & & ! pageIter . hasNext ( ) ) fileName = outputName + <str> ; else fileName = outputName + ( pageIndex + <int> ) + <str> ; page . getTexture ( ) . bind ( ) ; buffer . clear ( ) ; GL11 . glGetTexImage ( GL11 . GL_TEXTURE_2D , <int> , GL12 . GL_BGRA , GL11 . GL_UNSIGNED_BYTE , buffer ) ; WritableRaster raster = pageImage . getRaster ( ) ; for ( int y = <int> ; y < height ; y + + ) { buffer . get ( row ) ; raster . setDataElements ( <int> , y , width , <int> , row ) ; } File imageOutputFile = new File ( outputDir , fileName ) ; ImageIO . write ( pageImage , <str> , imageOutputFile ) ; pageIndex + + ; } } private int getGlyphCode ( Font font , int codePoint ) { char [ ] chars = Character . toChars ( codePoint ) ; GlyphVector vector = font . layoutGlyphVector ( GlyphPage . renderContext , chars , <int> , chars . length , Font . LAYOUT_LEFT_TO_RIGHT ) ; return vector . getGlyphCode ( <int> ) ; } private int [ ] getGlyphMetrics ( Font font , int codePoint ) { char [ ] chars = Character . toChars ( codePoint ) ; GlyphVector vector = font . layoutGlyphVector ( GlyphPage . renderContext , chars , <int> , chars . length , Font . LAYOUT_LEFT_TO_RIGHT ) ; GlyphMetrics metrics = vector . getGlyphMetrics ( <int> ) ; int xOffset = vector . getGlyphPixelBounds ( <int> , GlyphPage . renderContext , <float> , <int> ) . x - unicodeFont . getPaddingLeft ( ) ; int xAdvance = ( int ) ( metrics . getAdvanceX ( ) + unicodeFont . getPaddingAdvanceX ( ) + unicodeFont . getPaddingLeft ( ) + unicodeFont . getPaddingRight ( ) ) ; return new int [ ] { xOffset , xAdvance } ; } } 

package com . google . common . collect . testing ; import com . google . common . collect . testing . DerivedCollectionGenerators . Bound ; import com . google . common . collect . testing . DerivedCollectionGenerators . SortedSetSubsetTestSetGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . Feature ; import com . google . common . collect . testing . testers . SortedSetNavigationTester ; import junit . framework . TestSuite ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; public class SortedSetTestSuiteBuilder < E > extends SetTestSuiteBuilder < E > { public static < E > SortedSetTestSuiteBuilder < E > using ( TestSortedSetGenerator < E > generator ) { SortedSetTestSuiteBuilder < E > builder = new SortedSetTestSuiteBuilder < E > ( ) ; builder . usingGenerator ( generator ) ; return builder ; } @Override protected List < Class < ? extends AbstractTester > > getTesters ( ) { List < Class < ? extends AbstractTester > > testers = Helpers . copyToList ( super . getTesters ( ) ) ; testers . add ( SortedSetNavigationTester . class ) ; return testers ; } @Override public TestSuite createTestSuite ( ) { if ( ! getFeatures ( ) . contains ( CollectionFeature . KNOWN_ORDER ) ) { List < Feature < ? > > features = Helpers . copyToList ( getFeatures ( ) ) ; features . add ( CollectionFeature . KNOWN_ORDER ) ; withFeatures ( features ) ; } return super . createTestSuite ( ) ; } @Override protected List < TestSuite > createDerivedSuites ( FeatureSpecificTestSuiteBuilder < ? , ? extends OneSizeTestContainerGenerator < Collection < E > , E > > parentBuilder ) { List < TestSuite > derivedSuites = super . createDerivedSuites ( parentBuilder ) ; if ( ! parentBuilder . getFeatures ( ) . contains ( CollectionFeature . SUBSET_VIEW ) ) { derivedSuites . add ( createSubsetSuite ( parentBuilder , Bound . NO_BOUND , Bound . EXCLUSIVE ) ) ; derivedSuites . add ( createSubsetSuite ( parentBuilder , Bound . INCLUSIVE , Bound . NO_BOUND ) ) ; derivedSuites . add ( createSubsetSuite ( parentBuilder , Bound . INCLUSIVE , Bound . EXCLUSIVE ) ) ; } return derivedSuites ; } final TestSuite createSubsetSuite ( final FeatureSpecificTestSuiteBuilder < ? , ? extends OneSizeTestContainerGenerator < Collection < E > , E > > parentBuilder , final Bound from , final Bound to ) { final TestSortedSetGenerator < E > delegate = ( TestSortedSetGenerator < E > ) parentBuilder . getSubjectGenerator ( ) . getInnerGenerator ( ) ; List < Feature < ? > > features = new ArrayList < Feature < ? > > ( ) ; features . addAll ( parentBuilder . getFeatures ( ) ) ; features . remove ( CollectionFeature . ALLOWS_NULL_VALUES ) ; features . add ( CollectionFeature . SUBSET_VIEW ) ; return newBuilderUsing ( delegate , to , from ) . named ( parentBuilder . getName ( ) + <str> + from + <str> + to ) . withFeatures ( features ) . suppressing ( parentBuilder . getSuppressedTests ( ) ) . createTestSuite ( ) ; } SortedSetTestSuiteBuilder < E > newBuilderUsing ( TestSortedSetGenerator < E > delegate , Bound to , Bound from ) { return using ( new SortedSetSubsetTestSetGenerator < E > ( delegate , to , from ) ) ; } } 

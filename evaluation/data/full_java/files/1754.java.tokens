package org . apache . cassandra . stress . settings ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; import com . google . common . base . Function ; import org . apache . cassandra . locator . AbstractReplicationStrategy ; class OptionReplication extends OptionMulti { private final OptionSimple strategy = new OptionSimple ( <str> , new StrategyAdapter ( ) , <str> , <str> , false ) ; private final OptionSimple factor = new OptionSimple ( <str> , <str> , <str> , <str> , false ) ; public OptionReplication ( ) { super ( <str> , <str> , true ) ; } public String getStrategy ( ) { return strategy . value ( ) ; } public Map < String , String > getOptions ( ) { Map < String , String > options = extraOptions ( ) ; if ( ! options . containsKey ( <str> ) & & ( strategy . value ( ) . equals ( <str> ) | | factor . setByUser ( ) ) ) options . put ( <str> , factor . value ( ) ) ; return options ; } protected List < ? extends Option > options ( ) { return Arrays . asList ( strategy , factor ) ; } @Override public boolean happy ( ) { return true ; } private static final class StrategyAdapter implements Function < String , String > { public String apply ( String name ) { String strategy = null ; for ( String fullname : new String [ ] { name , <str> + name } ) { try { Class < ? > clazz = Class . forName ( fullname ) ; if ( ! AbstractReplicationStrategy . class . isAssignableFrom ( clazz ) ) throw new IllegalArgumentException ( clazz + <str> ) ; strategy = fullname ; break ; } catch ( Exception ignore ) { } } if ( strategy = = null ) throw new IllegalArgumentException ( <str> + name ) ; return strategy ; } } } 

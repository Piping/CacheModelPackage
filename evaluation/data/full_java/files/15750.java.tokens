package org . gradle . api . internal . tasks . testing . junit ; import org . gradle . api . Action ; import org . gradle . api . GradleException ; import org . gradle . api . internal . initialization . loadercache . ClassLoaderCache ; import org . gradle . api . internal . tasks . testing . TestClassLoaderFactory ; import org . gradle . api . internal . tasks . testing . TestClassProcessor ; import org . gradle . api . internal . tasks . testing . TestFramework ; import org . gradle . api . internal . tasks . testing . WorkerTestClassProcessorFactory ; import org . gradle . api . internal . tasks . testing . detection . ClassFileExtractionManager ; import org . gradle . api . internal . tasks . testing . filter . DefaultTestFilter ; import org . gradle . api . tasks . testing . Test ; import org . gradle . api . tasks . testing . junit . JUnitOptions ; import org . gradle . internal . TimeProvider ; import org . gradle . internal . id . IdGenerator ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . messaging . actor . ActorFactory ; import org . gradle . process . internal . WorkerProcessBuilder ; import java . io . Serializable ; public class JUnitTestFramework implements TestFramework { private JUnitOptions options ; private final JUnitDetector detector ; private final DefaultTestFilter filter ; private final TestClassLoaderFactory classLoaderFactory ; public JUnitTestFramework ( Test testTask , DefaultTestFilter filter , ClassLoaderCache classLoaderCache ) { this . filter = filter ; options = new JUnitOptions ( ) ; detector = new JUnitDetector ( new ClassFileExtractionManager ( testTask . getTemporaryDirFactory ( ) ) ) ; classLoaderFactory = new TestClassLoaderFactory ( classLoaderCache , testTask ) ; } public WorkerTestClassProcessorFactory getProcessorFactory ( ) { verifyJUnitCategorySupport ( ) ; return new TestClassProcessorFactoryImpl ( new JUnitSpec ( options . getIncludeCategories ( ) , options . getExcludeCategories ( ) , filter . getIncludePatterns ( ) ) ) ; } private void verifyJUnitCategorySupport ( ) { if ( ! options . getExcludeCategories ( ) . isEmpty ( ) | | ! options . getIncludeCategories ( ) . isEmpty ( ) ) { try { getTestClassLoader ( ) . loadClass ( <str> ) ; } catch ( ClassNotFoundException e ) { throw new GradleException ( <str> ) ; } } } private ClassLoader getTestClassLoader ( ) { return classLoaderFactory . create ( ) ; } public Action < WorkerProcessBuilder > getWorkerConfigurationAction ( ) { return new Action < WorkerProcessBuilder > ( ) { public void execute ( WorkerProcessBuilder workerProcessBuilder ) { workerProcessBuilder . sharedPackages ( <str> ) ; workerProcessBuilder . sharedPackages ( <str> ) ; workerProcessBuilder . sharedPackages ( <str> ) ; } } ; } public JUnitOptions getOptions ( ) { return options ; } void setOptions ( JUnitOptions options ) { this . options = options ; } public JUnitDetector getDetector ( ) { return detector ; } private static class TestClassProcessorFactoryImpl implements WorkerTestClassProcessorFactory , Serializable { private final JUnitSpec spec ; public TestClassProcessorFactoryImpl ( JUnitSpec spec ) { this . spec = spec ; } public TestClassProcessor create ( ServiceRegistry serviceRegistry ) { return new JUnitTestClassProcessor ( spec , serviceRegistry . get ( IdGenerator . class ) , serviceRegistry . get ( ActorFactory . class ) , serviceRegistry . get ( TimeProvider . class ) ) ; } } } 

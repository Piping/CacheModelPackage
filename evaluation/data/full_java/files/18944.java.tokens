package io . netty . handler . codec . serialization ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufInputStream ; import io . netty . channel . ChannelHandlerContext ; import io . netty . handler . codec . LengthFieldBasedFrameDecoder ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import java . io . StreamCorruptedException ; public class ObjectDecoder extends LengthFieldBasedFrameDecoder { private final ClassResolver classResolver ; public ObjectDecoder ( ClassResolver classResolver ) { this ( <int> , classResolver ) ; } public ObjectDecoder ( int maxObjectSize , ClassResolver classResolver ) { super ( maxObjectSize , <int> , <int> , <int> , <int> ) ; this . classResolver = classResolver ; } @Override protected Object decode ( ChannelHandlerContext ctx , ByteBuf in ) throws Exception { ByteBuf frame = ( ByteBuf ) super . decode ( ctx , in ) ; if ( frame = = null ) { return null ; } ObjectInputStream is = new CompactObjectInputStream ( new ByteBufInputStream ( frame ) , classResolver ) ; Object result = is . readObject ( ) ; is . close ( ) ; return result ; } @Override protected ByteBuf extractFrame ( ChannelHandlerContext ctx , ByteBuf buffer , int index , int length ) { return buffer . slice ( index , length ) ; } } 

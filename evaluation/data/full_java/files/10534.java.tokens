package com . google . common . io ; import com . google . common . collect . ImmutableList ; import junit . framework . TestCase ; import java . io . FilterReader ; import java . io . IOException ; import java . io . Reader ; import java . io . StringReader ; public class MultiReaderTest extends TestCase { public void testOnlyOneOpen ( ) throws Exception { String testString = <str> ; final CharSource source = newCharSource ( testString ) ; final int [ ] counter = new int [ <int> ] ; CharSource reader = new CharSource ( ) { @Override public Reader openStream ( ) throws IOException { if ( counter [ <int> ] + + ! = <int> ) { throw new IllegalStateException ( <str> ) ; } return new FilterReader ( source . openStream ( ) ) { @Override public void close ( ) throws IOException { super . close ( ) ; counter [ <int> ] - - ; } } ; } } ; Reader joinedReader = CharSource . concat ( reader , reader , reader ) . openStream ( ) ; String result = CharStreams . toString ( joinedReader ) ; assertEquals ( testString . length ( ) * <int> , result . length ( ) ) ; } public void testReady ( ) throws Exception { CharSource source = newCharSource ( <str> ) ; Iterable < ? extends CharSource > list = ImmutableList . of ( source , source ) ; Reader joinedReader = CharSource . concat ( list ) . openStream ( ) ; assertTrue ( joinedReader . ready ( ) ) ; assertEquals ( <str> , joinedReader . read ( ) ) ; assertEquals ( <str> , joinedReader . read ( ) ) ; assertEquals ( - <int> , joinedReader . read ( ) ) ; assertFalse ( joinedReader . ready ( ) ) ; } public void testSimple ( ) throws Exception { String testString = <str> ; CharSource source = newCharSource ( testString ) ; Reader joinedReader = CharSource . concat ( source , source ) . openStream ( ) ; String expectedString = testString + testString ; assertEquals ( expectedString , CharStreams . toString ( joinedReader ) ) ; } private static CharSource newCharSource ( final String text ) { return new CharSource ( ) { @Override public Reader openStream ( ) { return new StringReader ( text ) ; } } ; } public void testSkip ( ) throws Exception { String begin = <str> ; String end = <str> ; Reader joinedReader = CharSource . concat ( newCharSource ( begin ) , newCharSource ( end ) ) . openStream ( ) ; String expected = begin + end ; assertEquals ( expected . charAt ( <int> ) , joinedReader . read ( ) ) ; CharStreams . skipFully ( joinedReader , <int> ) ; assertEquals ( expected . charAt ( <int> ) , joinedReader . read ( ) ) ; CharStreams . skipFully ( joinedReader , <int> ) ; assertEquals ( expected . charAt ( <int> ) , joinedReader . read ( ) ) ; CharStreams . skipFully ( joinedReader , <int> ) ; assertEquals ( expected . charAt ( <int> ) , joinedReader . read ( ) ) ; assertEquals ( - <int> , joinedReader . read ( ) ) ; } public void testSkipZero ( ) throws Exception { CharSource source = newCharSource ( <str> ) ; Iterable < CharSource > list = ImmutableList . of ( source , source ) ; Reader joinedReader = CharSource . concat ( list ) . openStream ( ) ; assertEquals ( <int> , joinedReader . skip ( <int> ) ) ; assertEquals ( <str> , joinedReader . read ( ) ) ; } } 

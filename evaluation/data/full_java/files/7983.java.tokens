package org . elasticsearch . common . util ; import org . elasticsearch . cluster . routing . allocation . decider . AllocationDecider ; import org . elasticsearch . cluster . routing . allocation . decider . AllocationDeciders ; import org . elasticsearch . common . inject . * ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . util . Set ; import java . util . concurrent . atomic . AtomicInteger ; public class ExtensionPointTests extends ESTestCase { public void testClassSet ( ) { final ExtensionPoint . ClassSet < AllocationDecider > allocationDeciders = new ExtensionPoint . ClassSet < > ( <str> , AllocationDecider . class , AllocationDeciders . class ) ; allocationDeciders . registerExtension ( TestAllocationDecider . class ) ; Injector injector = new ModulesBuilder ( ) . add ( new Module ( ) { @Override public void configure ( Binder binder ) { binder . bind ( Settings . class ) . toInstance ( Settings . EMPTY ) ; binder . bind ( Consumer . class ) . asEagerSingleton ( ) ; allocationDeciders . bind ( binder ) ; } } ) . createInjector ( ) ; assertEquals ( <int> , TestAllocationDecider . instances . get ( ) ) ; } public static class Consumer { @Inject public Consumer ( Set < AllocationDecider > deciders , TestAllocationDecider other ) { } } public static class TestAllocationDecider extends AllocationDecider { static final AtomicInteger instances = new AtomicInteger ( <int> ) ; @Inject public TestAllocationDecider ( Settings settings ) { super ( settings ) ; instances . incrementAndGet ( ) ; } } } 

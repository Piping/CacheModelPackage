package org . elasticsearch . plan . a ; import java . util . ArrayList ; import java . util . HashMap ; public class ConditionalTests extends ScriptTestCase { public void testBasic ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; } public void testPrecedence ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; } public void testAssignment ( ) { assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ArrayList . class , exec ( <str> ) . getClass ( ) ) ; } public void testNullArguments ( ) { assertEquals ( null , exec ( <str> ) ) ; assertEquals ( HashMap . class , exec ( <str> ) . getClass ( ) ) ; } public void testPromotion ( ) { assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; } public void testIncompatibleAssignment ( ) { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ClassCastException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ClassCastException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ClassCastException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ClassCastException expected ) { } } } 

package org . elasticsearch . action . index ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . rest . NoOpClient ; import org . elasticsearch . test . ESTestCase ; import org . junit . After ; import org . junit . Before ; import java . io . ByteArrayOutputStream ; import java . util . HashMap ; import java . util . Map ; public class IndexRequestBuilderTests extends ESTestCase { private static final String EXPECTED_SOURCE = <str> ; private NoOpClient testClient ; @Override @Before public void setUp ( ) throws Exception { super . setUp ( ) ; this . testClient = new NoOpClient ( getTestName ( ) ) ; } @Override @After public void tearDown ( ) throws Exception { this . testClient . close ( ) ; super . tearDown ( ) ; } public void testSetSource ( ) throws Exception { IndexRequestBuilder indexRequestBuilder = new IndexRequestBuilder ( this . testClient , IndexAction . INSTANCE ) ; Map < String , String > source = new HashMap < > ( ) ; source . put ( <str> , <str> ) ; indexRequestBuilder . setSource ( source ) ; assertEquals ( EXPECTED_SOURCE , XContentHelper . convertToJson ( indexRequestBuilder . request ( ) . source ( ) , true ) ) ; indexRequestBuilder . setSource ( source , XContentType . JSON ) ; assertEquals ( EXPECTED_SOURCE , XContentHelper . convertToJson ( indexRequestBuilder . request ( ) . source ( ) , true ) ) ; indexRequestBuilder . setSource ( <str> , <str> ) ; assertEquals ( EXPECTED_SOURCE , XContentHelper . convertToJson ( indexRequestBuilder . request ( ) . source ( ) , true ) ) ; indexRequestBuilder . setSource ( ( Object ) <str> , <str> ) ; assertEquals ( EXPECTED_SOURCE , XContentHelper . convertToJson ( indexRequestBuilder . request ( ) . source ( ) , true ) ) ; ByteArrayOutputStream docOut = new ByteArrayOutputStream ( ) ; XContentBuilder doc = XContentFactory . jsonBuilder ( docOut ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ; doc . close ( ) ; indexRequestBuilder . setSource ( docOut . toByteArray ( ) ) ; assertEquals ( EXPECTED_SOURCE , XContentHelper . convertToJson ( indexRequestBuilder . request ( ) . source ( ) , true ) ) ; doc = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ; doc . close ( ) ; indexRequestBuilder . setSource ( doc ) ; assertEquals ( EXPECTED_SOURCE , XContentHelper . convertToJson ( indexRequestBuilder . request ( ) . source ( ) , true ) ) ; } } 

package io . netty . handler . ssl ; import org . apache . tomcat . jni . SSL ; import org . apache . tomcat . jni . SSLContext ; import javax . net . ssl . KeyManager ; import javax . net . ssl . KeyManagerFactory ; import javax . net . ssl . SSLException ; import javax . net . ssl . TrustManager ; import javax . net . ssl . TrustManagerFactory ; import javax . net . ssl . X509ExtendedTrustManager ; import javax . net . ssl . X509TrustManager ; import java . io . File ; import java . security . KeyStore ; import java . security . PrivateKey ; import java . security . cert . X509Certificate ; import static io . netty . util . internal . ObjectUtil . * ; public final class OpenSslServerContext extends OpenSslContext { private final OpenSslServerSessionContext sessionContext ; @Deprecated public OpenSslServerContext ( File certChainFile , File keyFile ) throws SSLException { this ( certChainFile , keyFile , null ) ; } @Deprecated public OpenSslServerContext ( File certChainFile , File keyFile , String keyPassword ) throws SSLException { this ( certChainFile , keyFile , keyPassword , null , IdentityCipherSuiteFilter . INSTANCE , ApplicationProtocolConfig . DISABLED , <int> , <int> ) ; } @Deprecated public OpenSslServerContext ( File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( certChainFile , keyFile , keyPassword , ciphers , IdentityCipherSuiteFilter . INSTANCE , apn , sessionCacheSize , sessionTimeout ) ; } @Deprecated public OpenSslServerContext ( File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , Iterable < String > nextProtocols , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( certChainFile , keyFile , keyPassword , ciphers , toApplicationProtocolConfig ( nextProtocols ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public OpenSslServerContext ( File certChainFile , File keyFile , String keyPassword , TrustManagerFactory trustManagerFactory , Iterable < String > ciphers , ApplicationProtocolConfig config , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( certChainFile , keyFile , keyPassword , trustManagerFactory , ciphers , toNegotiator ( config ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public OpenSslServerContext ( File certChainFile , File keyFile , String keyPassword , TrustManagerFactory trustManagerFactory , Iterable < String > ciphers , OpenSslApplicationProtocolNegotiator apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( null , trustManagerFactory , certChainFile , keyFile , keyPassword , null , ciphers , null , apn , sessionCacheSize , sessionTimeout ) ; } @Deprecated public OpenSslServerContext ( File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( null , null , certChainFile , keyFile , keyPassword , null , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; } @Deprecated public OpenSslServerContext ( File trustCertChainFile , TrustManagerFactory trustManagerFactory , File keyCertChainFile , File keyFile , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig config , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( trustCertChainFile , trustManagerFactory , keyCertChainFile , keyFile , keyPassword , keyManagerFactory , ciphers , cipherFilter , toNegotiator ( config ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public OpenSslServerContext ( File certChainFile , File keyFile , String keyPassword , TrustManagerFactory trustManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig config , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( null , trustManagerFactory , certChainFile , keyFile , keyPassword , null , ciphers , cipherFilter , toNegotiator ( config ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public OpenSslServerContext ( File certChainFile , File keyFile , String keyPassword , TrustManagerFactory trustManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , OpenSslApplicationProtocolNegotiator apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( null , trustManagerFactory , certChainFile , keyFile , keyPassword , null , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; } @Deprecated public OpenSslServerContext ( File trustCertChainFile , TrustManagerFactory trustManagerFactory , File keyCertChainFile , File keyFile , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , OpenSslApplicationProtocolNegotiator apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { super ( ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout , SSL . SSL_MODE_SERVER , null , ClientAuth . NONE ) ; OpenSsl . ensureAvailability ( ) ; checkNotNull ( keyCertChainFile , <str> ) ; if ( ! keyCertChainFile . isFile ( ) ) { throw new IllegalArgumentException ( <str> + keyCertChainFile ) ; } checkNotNull ( keyFile , <str> ) ; if ( ! keyFile . isFile ( ) ) { throw new IllegalArgumentException ( <str> + keyFile ) ; } if ( keyPassword = = null ) { keyPassword = <str> ; } boolean success = false ; try { synchronized ( OpenSslContext . class ) { SSLContext . setVerify ( ctx , SSL . SSL_CVERIFY_NONE , VERIFY_DEPTH ) ; if ( ! SSLContext . setCertificateChainFile ( ctx , keyCertChainFile . getPath ( ) , true ) ) { long error = SSL . getLastErrorNumber ( ) ; if ( OpenSsl . isError ( error ) ) { String err = SSL . getErrorString ( error ) ; throw new SSLException ( <str> + keyCertChainFile + <str> + err + <str> ) ; } } try { if ( ! SSLContext . setCertificate ( ctx , keyCertChainFile . getPath ( ) , keyFile . getPath ( ) , keyPassword , SSL . SSL_AIDX_RSA ) ) { long error = SSL . getLastErrorNumber ( ) ; if ( OpenSsl . isError ( error ) ) { String err = SSL . getErrorString ( error ) ; throw new SSLException ( <str> + keyCertChainFile + <str> + keyFile + <str> + err + <str> ) ; } } } catch ( SSLException e ) { throw e ; } catch ( Exception e ) { throw new SSLException ( <str> + keyCertChainFile + <str> + keyFile , e ) ; } try { if ( trustCertChainFile ! = null ) { trustManagerFactory = buildTrustManagerFactory ( trustCertChainFile , trustManagerFactory ) ; } else if ( trustManagerFactory = = null ) { trustManagerFactory = TrustManagerFactory . getInstance ( TrustManagerFactory . getDefaultAlgorithm ( ) ) ; trustManagerFactory . init ( ( KeyStore ) null ) ; } final X509TrustManager manager = chooseTrustManager ( trustManagerFactory . getTrustManagers ( ) ) ; if ( useExtendedTrustManager ( manager ) ) { final X509ExtendedTrustManager extendedManager = ( X509ExtendedTrustManager ) manager ; SSLContext . setCertVerifyCallback ( ctx , new AbstractCertificateVerifier ( ) { @Override void verify ( OpenSslEngine engine , X509Certificate [ ] peerCerts , String auth ) throws Exception { extendedManager . checkClientTrusted ( peerCerts , auth , engine ) ; } } ) ; } else { SSLContext . setCertVerifyCallback ( ctx , new AbstractCertificateVerifier ( ) { @Override void verify ( OpenSslEngine engine , X509Certificate [ ] peerCerts , String auth ) throws Exception { manager . checkClientTrusted ( peerCerts , auth ) ; } } ) ; } } catch ( Exception e ) { throw new SSLException ( <str> , e ) ; } } sessionContext = new OpenSslServerSessionContext ( ctx ) ; success = true ; } finally { if ( ! success ) { destroy ( ) ; } } } @SuppressWarnings ( <str> ) OpenSslServerContext ( X509Certificate [ ] trustCertChain , TrustManagerFactory trustManagerFactory , X509Certificate [ ] keyCertChain , PrivateKey key , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout , ClientAuth clientAuth ) throws SSLException { super ( ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout , SSL . SSL_MODE_SERVER , keyCertChain , clientAuth ) ; OpenSsl . ensureAvailability ( ) ; checkNotNull ( keyCertChain , <str> ) ; checkNotNull ( key , <str> ) ; if ( keyPassword = = null ) { keyPassword = <str> ; } boolean success = false ; try { synchronized ( OpenSslContext . class ) { SSLContext . setVerify ( ctx , SSL . SSL_CVERIFY_NONE , VERIFY_DEPTH ) ; long keyCertChainBio = <int> ; try { keyCertChainBio = toBIO ( keyCertChain ) ; if ( ! SSLContext . setCertificateChainBio ( ctx , keyCertChainBio , true ) ) { long error = SSL . getLastErrorNumber ( ) ; if ( OpenSsl . isError ( error ) ) { String err = SSL . getErrorString ( error ) ; throw new SSLException ( <str> + err ) ; } } } catch ( Exception e ) { throw new SSLException ( <str> , e ) ; } finally { if ( keyCertChainBio ! = <int> ) { SSL . freeBIO ( keyCertChainBio ) ; } } long keyBio = <int> ; keyCertChainBio = <int> ; try { keyBio = toBIO ( key ) ; keyCertChainBio = toBIO ( keyCertChain ) ; if ( ! SSLContext . setCertificateBio ( ctx , keyCertChainBio , keyBio , keyPassword , SSL . SSL_AIDX_RSA ) ) { long error = SSL . getLastErrorNumber ( ) ; if ( OpenSsl . isError ( error ) ) { String err = SSL . getErrorString ( error ) ; throw new SSLException ( <str> + err ) ; } } } catch ( SSLException e ) { throw e ; } catch ( Exception e ) { throw new SSLException ( <str> , e ) ; } finally { if ( keyBio ! = <int> ) { SSL . freeBIO ( keyBio ) ; } if ( keyCertChainBio ! = <int> ) { SSL . freeBIO ( keyCertChainBio ) ; } } try { if ( trustCertChain ! = null ) { trustManagerFactory = buildTrustManagerFactory ( trustCertChain , trustManagerFactory ) ; } else if ( trustManagerFactory = = null ) { trustManagerFactory = TrustManagerFactory . getInstance ( TrustManagerFactory . getDefaultAlgorithm ( ) ) ; trustManagerFactory . init ( ( KeyStore ) null ) ; } final X509TrustManager manager = chooseTrustManager ( trustManagerFactory . getTrustManagers ( ) ) ; if ( useExtendedTrustManager ( manager ) ) { final X509ExtendedTrustManager extendedManager = ( X509ExtendedTrustManager ) manager ; SSLContext . setCertVerifyCallback ( ctx , new AbstractCertificateVerifier ( ) { @Override void verify ( OpenSslEngine engine , X509Certificate [ ] peerCerts , String auth ) throws Exception { extendedManager . checkClientTrusted ( peerCerts , auth , engine ) ; } } ) ; } else { SSLContext . setCertVerifyCallback ( ctx , new AbstractCertificateVerifier ( ) { @Override void verify ( OpenSslEngine engine , X509Certificate [ ] peerCerts , String auth ) throws Exception { manager . checkClientTrusted ( peerCerts , auth ) ; } } ) ; } } catch ( Exception e ) { throw new SSLException ( <str> , e ) ; } } sessionContext = new OpenSslServerSessionContext ( ctx ) ; success = true ; } finally { if ( ! success ) { destroy ( ) ; } } } @Override public OpenSslServerSessionContext sessionContext ( ) { return sessionContext ; } } 

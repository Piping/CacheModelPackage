package jcuda . jcufft ; import jcuda . * ; import jcuda . runtime . JCuda ; import jcuda . runtime . cudaError ; import jcuda . runtime . cudaMemcpyKind ; import jcuda . runtime . cudaStream_t ; public class JCufft { public static final int CUFFT_FORWARD = - <int> ; public static final int CUFFT_INVERSE = <int> ; private static boolean initialized = false ; private static boolean exceptionsEnabled = false ; private JCufft ( ) { } static { initialize ( ) ; } public static void initialize ( ) { if ( ! initialized ) { LibUtils . loadLibrary ( <str> ) ; initialized = true ; } } public static void setLogLevel ( LogLevel logLevel ) { setLogLevel ( logLevel . ordinal ( ) ) ; } private static native void setLogLevel ( int logLevel ) ; public static void setExceptionsEnabled ( boolean enabled ) { exceptionsEnabled = enabled ; } private static int checkResult ( int result ) { if ( exceptionsEnabled & & result ! = cufftResult . CUFFT_SUCCESS ) { throw new CudaException ( cufftResult . stringFor ( result ) ) ; } return result ; } public static int cufftGetVersion ( int version [ ] ) { return cufftGetVersionNative ( version ) ; } private static native int cufftGetVersionNative ( int version [ ] ) ; public static int cufftPlan1d ( cufftHandle plan , int nx , int type , int batch ) { plan . setDimension ( <int> ) ; plan . setType ( type ) ; plan . setSize ( nx , <int> , <int> ) ; plan . setBatchSize ( batch ) ; return checkResult ( cufftPlan1dNative ( plan , nx , type , batch ) ) ; } private static native int cufftPlan1dNative ( cufftHandle plan , int nx , int type , int batch ) ; public static int cufftPlan2d ( cufftHandle plan , int nx , int ny , int type ) { plan . setDimension ( <int> ) ; plan . setType ( type ) ; plan . setSize ( nx , ny , <int> ) ; return checkResult ( cufftPlan2dNative ( plan , nx , ny , type ) ) ; } private static native int cufftPlan2dNative ( cufftHandle plan , int nx , int ny , int type ) ; public static int cufftPlan3d ( cufftHandle plan , int nx , int ny , int nz , int type ) { plan . setDimension ( <int> ) ; plan . setType ( type ) ; plan . setSize ( nx , ny , nz ) ; return checkResult ( cufftPlan3dNative ( plan , nx , ny , nz , type ) ) ; } private static native int cufftPlan3dNative ( cufftHandle plan , int nx , int ny , int nz , int type ) ; public static int cufftPlanMany ( cufftHandle plan , int rank , int n [ ] , int inembed [ ] , int istride , int idist , int onembed [ ] , int ostride , int odist , int type , int batch ) { return checkResult ( cufftPlanManyNative ( plan , rank , n , inembed , istride , idist , onembed , ostride , odist , type , batch ) ) ; } private static native int cufftPlanManyNative ( cufftHandle plan , int rank , int n [ ] , int inembed [ ] , int istride , int idist , int onembed [ ] , int ostride , int odist , int type , int batch ) ; public static int cufftMakePlan1d ( cufftHandle plan , int nx , int type , int batch , long workSize [ ] ) { return checkResult ( cufftMakePlan1dNative ( plan , nx , type , batch , workSize ) ) ; } private static native int cufftMakePlan1dNative ( cufftHandle plan , int nx , int type , int batch , long workSize [ ] ) ; public static int cufftMakePlan2d ( cufftHandle plan , int nx , int ny , int type , long workSize [ ] ) { return checkResult ( cufftMakePlan2dNative ( plan , nx , ny , type , workSize ) ) ; } private static native int cufftMakePlan2dNative ( cufftHandle plan , int nx , int ny , int type , long workSize [ ] ) ; public static int cufftMakePlan3d ( cufftHandle plan , int nx , int ny , int nz , int type , long workSize [ ] ) { return checkResult ( cufftMakePlan3dNative ( plan , nx , ny , nz , type , workSize ) ) ; } private static native int cufftMakePlan3dNative ( cufftHandle plan , int nx , int ny , int nz , int type , long workSize [ ] ) ; public static int cufftMakePlanMany ( cufftHandle plan , int rank , int n [ ] , int inembed [ ] , int istride , int idist , int onembed [ ] , int ostride , int odist , int type , int batch , long workSize [ ] ) { return checkResult ( cufftMakePlanManyNative ( plan , rank , n , inembed , istride , idist , onembed , ostride , odist , type , batch , workSize ) ) ; } private static native int cufftMakePlanManyNative ( cufftHandle plan , int rank , int n [ ] , int inembed [ ] , int istride , int idist , int onembed [ ] , int ostride , int odist , int type , int batch , long workSize [ ] ) ; public static int cufftEstimate1d ( int nx , int type , int batch , long workSize [ ] ) { return checkResult ( cufftEstimate1dNative ( nx , type , batch , workSize ) ) ; } private static native int cufftEstimate1dNative ( int nx , int type , int batch , long workSize [ ] ) ; public static int cufftEstimate2d ( int nx , int ny , int type , long workSize [ ] ) { return checkResult ( cufftEstimate2dNative ( nx , ny , type , workSize ) ) ; } private static native int cufftEstimate2dNative ( int nx , int ny , int type , long workSize [ ] ) ; public static int cufftEstimate3d ( int nx , int ny , int nz , int type , long workSize [ ] ) { return checkResult ( cufftEstimate3dNative ( nx , ny , nz , type , workSize ) ) ; } private static native int cufftEstimate3dNative ( int nx , int ny , int nz , int type , long workSize [ ] ) ; public static int cufftEstimateMany ( int rank , int n [ ] , int inembed [ ] , int istride , int idist , int onembed [ ] , int ostride , int odist , int type , int batch , long workSize [ ] ) { return checkResult ( cufftEstimateManyNative ( rank , n , inembed , istride , idist , onembed , ostride , odist , type , batch , workSize ) ) ; } private static native int cufftEstimateManyNative ( int rank , int n [ ] , int inembed [ ] , int istride , int idist , int onembed [ ] , int ostride , int odist , int type , int batch , long workSize [ ] ) ; public static int cufftCreate ( cufftHandle cufftHandle ) { return checkResult ( cufftCreateNative ( cufftHandle ) ) ; } private static native int cufftCreateNative ( cufftHandle cufftHandle ) ; public static int cufftGetSize1d ( cufftHandle handle , int nx , int type , int batch , long workSize [ ] ) { return checkResult ( cufftGetSize1dNative ( handle , nx , type , batch , workSize ) ) ; } private static native int cufftGetSize1dNative ( cufftHandle handle , int nx , int type , int batch , long workSize [ ] ) ; public static int cufftGetSize2d ( cufftHandle handle , int nx , int ny , int type , long workSize [ ] ) { return checkResult ( cufftGetSize2dNative ( handle , nx , ny , type , workSize ) ) ; } private static native int cufftGetSize2dNative ( cufftHandle handle , int nx , int ny , int type , long workSize [ ] ) ; public static int cufftGetSize3d ( cufftHandle handle , int nx , int ny , int nz , int type , long workSize [ ] ) { return checkResult ( cufftGetSize3dNative ( handle , nx , ny , nz , type , workSize ) ) ; } private static native int cufftGetSize3dNative ( cufftHandle handle , int nx , int ny , int nz , int type , long workSize [ ] ) ; public static int cufftGetSizeMany ( cufftHandle handle , int rank , int n [ ] , int inembed [ ] , int istride , int idist , int onembed [ ] , int ostride , int odist , int type , int batch , long workArea [ ] ) { return checkResult ( cufftGetSizeManyNative ( handle , rank , n , inembed , istride , idist , onembed , ostride , odist , type , batch , workArea ) ) ; } private static native int cufftGetSizeManyNative ( cufftHandle handle , int rank , int n [ ] , int inembed [ ] , int istride , int idist , int onembed [ ] , int ostride , int odist , int type , int batch , long workArea [ ] ) ; public static int cufftGetSize ( cufftHandle handle , long workSize [ ] ) { return checkResult ( cufftGetSizeNative ( handle , workSize ) ) ; } private static native int cufftGetSizeNative ( cufftHandle handle , long workSize [ ] ) ; public static int cufftSetWorkArea ( cufftHandle plan , Pointer workArea ) { return checkResult ( cufftSetWorkAreaNative ( plan , workArea ) ) ; } private static native int cufftSetWorkAreaNative ( cufftHandle plan , Pointer workArea ) ; public static int cufftSetAutoAllocation ( cufftHandle plan , int autoAllocate ) { return checkResult ( cufftSetAutoAllocationNative ( plan , autoAllocate ) ) ; } private static native int cufftSetAutoAllocationNative ( cufftHandle plan , int autoAllocate ) ; public static int cufftDestroy ( cufftHandle plan ) { return checkResult ( cufftDestroyNative ( plan ) ) ; } private static native int cufftDestroyNative ( cufftHandle plan ) ; public static int cufftSetStream ( cufftHandle plan , cudaStream_t stream ) { return checkResult ( cufftSetStreamNative ( plan , stream ) ) ; } private static native int cufftSetStreamNative ( cufftHandle plan , cudaStream_t stream ) ; public static int cufftSetCompatibilityMode ( cufftHandle plan , int mode ) { return checkResult ( cufftSetCompatibilityModeNative ( plan , mode ) ) ; } private static native int cufftSetCompatibilityModeNative ( cufftHandle plan , int mode ) ; public static int cufftExecC2C ( cufftHandle plan , Pointer cIdata , Pointer cOdata , int direction ) { return checkResult ( cufftExecC2CNative ( plan , cIdata , cOdata , direction ) ) ; } private static native int cufftExecC2CNative ( cufftHandle plan , Pointer cIdata , Pointer cOdata , int direction ) ; public static int cufftExecC2C ( cufftHandle plan , float cIdata [ ] , float cOdata [ ] , int direction ) { int cudaResult = <int> ; boolean inPlace = ( cIdata = = cOdata ) ; Pointer hostCIdata = Pointer . to ( cIdata ) ; Pointer deviceCIdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceCIdata , cIdata . length * Sizeof . FLOAT ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } Pointer hostCOdata = null ; Pointer deviceCOdata = null ; if ( inPlace ) { hostCOdata = hostCIdata ; deviceCOdata = deviceCIdata ; } else { hostCOdata = Pointer . to ( cOdata ) ; deviceCOdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceCOdata , cOdata . length * Sizeof . FLOAT ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } cudaResult = JCuda . cudaMemcpy ( deviceCIdata , hostCIdata , cIdata . length * Sizeof . FLOAT , cudaMemcpyKind . cudaMemcpyHostToDevice ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } int result = cufftResult . CUFFT_SUCCESS ; try { result = JCufft . cufftExecC2C ( plan , deviceCIdata , deviceCOdata , direction ) ; } catch ( CudaException e ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } result = cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( result ! = cufftResult . CUFFT_SUCCESS ) { if ( exceptionsEnabled ) { throw new CudaException ( cufftResult . stringFor ( result ) ) ; } return result ; } cudaResult = JCuda . cudaMemcpy ( hostCOdata , deviceCOdata , cOdata . length * Sizeof . FLOAT , cudaMemcpyKind . cudaMemcpyDeviceToHost ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } cudaResult = JCuda . cudaFree ( deviceCIdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( ! inPlace ) { cudaResult = JCuda . cudaFree ( deviceCOdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } return result ; } public static int cufftExecR2C ( cufftHandle plan , Pointer rIdata , Pointer cOdata ) { return checkResult ( cufftExecR2CNative ( plan , rIdata , cOdata ) ) ; } private static native int cufftExecR2CNative ( cufftHandle plan , Pointer rIdata , Pointer cOdata ) ; public static int cufftExecR2C ( cufftHandle plan , float rIdata [ ] , float cOdata [ ] ) { int cudaResult = <int> ; boolean inPlace = ( rIdata = = cOdata ) ; Pointer hostRIdata = Pointer . to ( rIdata ) ; Pointer deviceRIdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceRIdata , rIdata . length * Sizeof . FLOAT ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } Pointer hostCOdata = null ; Pointer deviceCOdata = null ; if ( inPlace ) { hostCOdata = hostRIdata ; deviceCOdata = deviceRIdata ; } else { hostCOdata = Pointer . to ( cOdata ) ; deviceCOdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceCOdata , cOdata . length * Sizeof . FLOAT ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCOdata ) ; if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } cudaResult = JCuda . cudaMemcpy ( deviceRIdata , hostRIdata , rIdata . length * Sizeof . FLOAT , cudaMemcpyKind . cudaMemcpyHostToDevice ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceRIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } int result = cufftResult . CUFFT_SUCCESS ; try { result = JCufft . cufftExecR2C ( plan , deviceRIdata , deviceCOdata ) ; } catch ( CudaException e ) { JCuda . cudaFree ( deviceRIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } result = cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( result ! = cufftResult . CUFFT_SUCCESS ) { if ( exceptionsEnabled ) { throw new CudaException ( cufftResult . stringFor ( cudaResult ) ) ; } return result ; } cudaResult = JCuda . cudaMemcpy ( hostCOdata , deviceCOdata , cOdata . length * Sizeof . FLOAT , cudaMemcpyKind . cudaMemcpyDeviceToHost ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceRIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } cudaResult = JCuda . cudaFree ( deviceRIdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( ! inPlace ) { cudaResult = JCuda . cudaFree ( deviceCOdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } return result ; } public static int cufftExecC2R ( cufftHandle plan , Pointer cIdata , Pointer rOdata ) { return checkResult ( cufftExecC2RNative ( plan , cIdata , rOdata ) ) ; } private static native int cufftExecC2RNative ( cufftHandle plan , Pointer cIdata , Pointer rOdata ) ; public static int cufftExecC2R ( cufftHandle plan , float cIdata [ ] , float rOdata [ ] ) { int cudaResult = <int> ; boolean inPlace = ( cIdata = = rOdata ) ; Pointer hostCIdata = Pointer . to ( cIdata ) ; Pointer deviceCIdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceCIdata , cIdata . length * Sizeof . FLOAT ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } Pointer hostROdata = null ; Pointer deviceROdata = null ; if ( inPlace ) { hostROdata = hostCIdata ; deviceROdata = deviceCIdata ; } else { hostROdata = Pointer . to ( rOdata ) ; deviceROdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceROdata , rOdata . length * Sizeof . FLOAT ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } cudaResult = JCuda . cudaMemcpy ( deviceCIdata , hostCIdata , cIdata . length * Sizeof . FLOAT , cudaMemcpyKind . cudaMemcpyHostToDevice ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceROdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } int result = cufftResult . CUFFT_SUCCESS ; try { result = JCufft . cufftExecC2R ( plan , deviceCIdata , deviceROdata ) ; } catch ( CudaException e ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceROdata ) ; } result = cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( result ! = cufftResult . CUFFT_SUCCESS ) { if ( exceptionsEnabled ) { throw new CudaException ( cufftResult . stringFor ( cudaResult ) ) ; } return result ; } cudaResult = JCuda . cudaMemcpy ( hostROdata , deviceROdata , rOdata . length * Sizeof . FLOAT , cudaMemcpyKind . cudaMemcpyDeviceToHost ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceROdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } cudaResult = JCuda . cudaFree ( deviceCIdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( ! inPlace ) { cudaResult = JCuda . cudaFree ( deviceROdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } return result ; } public static int cufftExecZ2Z ( cufftHandle plan , Pointer cIdata , Pointer cOdata , int direction ) { return checkResult ( cufftExecZ2ZNative ( plan , cIdata , cOdata , direction ) ) ; } private static native int cufftExecZ2ZNative ( cufftHandle plan , Pointer cIdata , Pointer cOdata , int direction ) ; public static int cufftExecZ2Z ( cufftHandle plan , double cIdata [ ] , double cOdata [ ] , int direction ) { int cudaResult = <int> ; boolean inPlace = ( cIdata = = cOdata ) ; Pointer hostCIdata = Pointer . to ( cIdata ) ; Pointer deviceCIdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceCIdata , cIdata . length * Sizeof . DOUBLE ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } Pointer hostCOdata = null ; Pointer deviceCOdata = null ; if ( inPlace ) { hostCOdata = hostCIdata ; deviceCOdata = deviceCIdata ; } else { hostCOdata = Pointer . to ( cOdata ) ; deviceCOdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceCOdata , cOdata . length * Sizeof . DOUBLE ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } cudaResult = JCuda . cudaMemcpy ( deviceCIdata , hostCIdata , cIdata . length * Sizeof . DOUBLE , cudaMemcpyKind . cudaMemcpyHostToDevice ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } int result = cufftResult . CUFFT_SUCCESS ; try { result = JCufft . cufftExecZ2Z ( plan , deviceCIdata , deviceCOdata , direction ) ; } catch ( CudaException e ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } result = cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( result ! = cufftResult . CUFFT_SUCCESS ) { if ( exceptionsEnabled ) { throw new CudaException ( cufftResult . stringFor ( cudaResult ) ) ; } return result ; } cudaResult = JCuda . cudaMemcpy ( hostCOdata , deviceCOdata , cOdata . length * Sizeof . DOUBLE , cudaMemcpyKind . cudaMemcpyDeviceToHost ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } cudaResult = JCuda . cudaFree ( deviceCIdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( ! inPlace ) { cudaResult = JCuda . cudaFree ( deviceCOdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } return result ; } public static int cufftExecD2Z ( cufftHandle plan , Pointer rIdata , Pointer cOdata ) { return checkResult ( cufftExecD2ZNative ( plan , rIdata , cOdata ) ) ; } private static native int cufftExecD2ZNative ( cufftHandle plan , Pointer rIdata , Pointer cOdata ) ; public static int cufftExecD2Z ( cufftHandle plan , double rIdata [ ] , double cOdata [ ] ) { return cufftExecR2C ( plan , rIdata , cOdata ) ; } public static int cufftExecR2C ( cufftHandle plan , double rIdata [ ] , double cOdata [ ] ) { int cudaResult = <int> ; boolean inPlace = ( rIdata = = cOdata ) ; Pointer hostRIdata = Pointer . to ( rIdata ) ; Pointer deviceRIdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceRIdata , rIdata . length * Sizeof . DOUBLE ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } Pointer hostCOdata = null ; Pointer deviceCOdata = null ; if ( inPlace ) { hostCOdata = hostRIdata ; deviceCOdata = deviceRIdata ; } else { hostCOdata = Pointer . to ( cOdata ) ; deviceCOdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceCOdata , cOdata . length * Sizeof . DOUBLE ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCOdata ) ; if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } cudaResult = JCuda . cudaMemcpy ( deviceRIdata , hostRIdata , rIdata . length * Sizeof . DOUBLE , cudaMemcpyKind . cudaMemcpyHostToDevice ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceRIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } int result = cufftResult . CUFFT_SUCCESS ; try { result = JCufft . cufftExecD2Z ( plan , deviceRIdata , deviceCOdata ) ; } catch ( CudaException e ) { JCuda . cudaFree ( deviceRIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } result = cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( result ! = cufftResult . CUFFT_SUCCESS ) { if ( exceptionsEnabled ) { throw new CudaException ( cufftResult . stringFor ( cudaResult ) ) ; } return result ; } cudaResult = JCuda . cudaMemcpy ( hostCOdata , deviceCOdata , cOdata . length * Sizeof . DOUBLE , cudaMemcpyKind . cudaMemcpyDeviceToHost ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceRIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceCOdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } cudaResult = JCuda . cudaFree ( deviceRIdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( ! inPlace ) { cudaResult = JCuda . cudaFree ( deviceCOdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } return result ; } public static int cufftExecZ2D ( cufftHandle plan , Pointer cIdata , Pointer rOdata ) { return checkResult ( cufftExecZ2DNative ( plan , cIdata , rOdata ) ) ; } private static native int cufftExecZ2DNative ( cufftHandle plan , Pointer cIdata , Pointer rOdata ) ; public static int cufftExecZ2D ( cufftHandle plan , double cIdata [ ] , double rOdata [ ] ) { int cudaResult = <int> ; boolean inPlace = ( cIdata = = rOdata ) ; Pointer hostCIdata = Pointer . to ( cIdata ) ; Pointer deviceCIdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceCIdata , cIdata . length * Sizeof . DOUBLE ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } Pointer hostROdata = null ; Pointer deviceROdata = null ; if ( inPlace ) { hostROdata = hostCIdata ; deviceROdata = deviceCIdata ; } else { hostROdata = Pointer . to ( rOdata ) ; deviceROdata = new Pointer ( ) ; cudaResult = JCuda . cudaMalloc ( deviceROdata , rOdata . length * Sizeof . DOUBLE ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } cudaResult = JCuda . cudaMemcpy ( deviceCIdata , hostCIdata , cIdata . length * Sizeof . DOUBLE , cudaMemcpyKind . cudaMemcpyHostToDevice ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceROdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } int result = cufftResult . CUFFT_SUCCESS ; try { result = JCufft . cufftExecZ2D ( plan , deviceCIdata , deviceROdata ) ; } catch ( CudaException e ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceROdata ) ; } result = cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( result ! = cufftResult . CUFFT_SUCCESS ) { if ( exceptionsEnabled ) { throw new CudaException ( cufftResult . stringFor ( cudaResult ) ) ; } return result ; } cudaResult = JCuda . cudaMemcpy ( hostROdata , deviceROdata , rOdata . length * Sizeof . DOUBLE , cudaMemcpyKind . cudaMemcpyDeviceToHost ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { JCuda . cudaFree ( deviceCIdata ) ; if ( ! inPlace ) { JCuda . cudaFree ( deviceROdata ) ; } if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } cudaResult = JCuda . cudaFree ( deviceCIdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } if ( ! inPlace ) { cudaResult = JCuda . cudaFree ( deviceROdata ) ; if ( cudaResult ! = cudaError . cudaSuccess ) { if ( exceptionsEnabled ) { throw new CudaException ( <str> + cudaError . stringFor ( cudaResult ) ) ; } return cufftResult . JCUFFT_INTERNAL_ERROR ; } } return result ; } } 

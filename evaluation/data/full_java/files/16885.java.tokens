package java . io ; public class ByteArrayInputStream extends InputStream { byte buf [ ] ; int pos ; int count ; int mark = <int> ; public ByteArrayInputStream ( byte buf [ ] ) { this . buf = buf ; this . pos = <int> ; this . count = buf . length ; } public ByteArrayInputStream ( byte buf [ ] , int offset , int length ) { this . buf = buf ; this . pos = offset ; this . count = Math . min ( offset + length , buf . length ) ; this . mark = offset ; } public synchronized int read ( ) { return ( pos < count ) ? ( buf [ pos + + ] & <hex> ) : - <int> ; } public synchronized int read ( byte b [ ] , int off , int len ) { if ( b = = null ) { throw new NullPointerException ( ) ; } else if ( off < <int> | | len < <int> | | len > b . length - off ) { throw new IndexOutOfBoundsException ( ) ; } if ( pos > = count ) { return - <int> ; } int avail = count - pos ; if ( len > avail ) { len = avail ; } if ( len < = <int> ) { return <int> ; } System . arraycopy ( buf , pos , b , off , len ) ; pos + = len ; return len ; } public synchronized long skip ( long n ) { long k = count - pos ; if ( n < k ) { k = n < <int> ? <int> : n ; } pos + = k ; return k ; } public synchronized int available ( ) { return count - pos ; } public boolean markSupported ( ) { return true ; } public void mark ( int readAheadLimit ) { mark = pos ; } public synchronized void reset ( ) { pos = mark ; } public void close ( ) throws IOException { } } 

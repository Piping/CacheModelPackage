package io . netty . handler . codec . http . multipart ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelException ; import io . netty . handler . codec . http . HttpConstants ; import io . netty . util . AbstractReferenceCounted ; import java . io . IOException ; import java . nio . charset . Charset ; import java . util . regex . Pattern ; public abstract class AbstractHttpData extends AbstractReferenceCounted implements HttpData { private static final Pattern STRIP_PATTERN = Pattern . compile ( <str> ) ; private static final Pattern REPLACE_PATTERN = Pattern . compile ( <str> ) ; private final String name ; protected long definedSize ; protected long size ; private Charset charset = HttpConstants . DEFAULT_CHARSET ; private boolean completed ; private long maxSize = DefaultHttpDataFactory . MAXSIZE ; protected AbstractHttpData ( String name , Charset charset , long size ) { if ( name = = null ) { throw new NullPointerException ( <str> ) ; } name = REPLACE_PATTERN . matcher ( name ) . replaceAll ( <str> ) ; name = STRIP_PATTERN . matcher ( name ) . replaceAll ( <str> ) ; if ( name . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } this . name = name ; if ( charset ! = null ) { setCharset ( charset ) ; } definedSize = size ; } @Override public long getMaxSize ( ) { return maxSize ; } @Override public void setMaxSize ( long maxSize ) { this . maxSize = maxSize ; } @Override public void checkSize ( long newSize ) throws IOException { if ( maxSize > = <int> & & newSize > maxSize ) { throw new IOException ( <str> ) ; } } @Override public String getName ( ) { return name ; } @Override public boolean isCompleted ( ) { return completed ; } protected void setCompleted ( ) { completed = true ; } @Override public Charset getCharset ( ) { return charset ; } @Override public void setCharset ( Charset charset ) { if ( charset = = null ) { throw new NullPointerException ( <str> ) ; } this . charset = charset ; } @Override public long length ( ) { return size ; } @Override public long definedLength ( ) { return definedSize ; } @Override public ByteBuf content ( ) { try { return getByteBuf ( ) ; } catch ( IOException e ) { throw new ChannelException ( e ) ; } } @Override protected void deallocate ( ) { delete ( ) ; } @Override public HttpData retain ( ) { super . retain ( ) ; return this ; } @Override public HttpData retain ( int increment ) { super . retain ( increment ) ; return this ; } @Override public abstract HttpData touch ( ) ; @Override public abstract HttpData touch ( Object hint ) ; } 

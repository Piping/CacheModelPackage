package com . google . common . graph ; import static com . google . common . truth . Truth . assertThat ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; import org . junit . Test ; import org . junit . runner . RunWith ; import org . junit . runners . JUnit4 ; @RunWith ( JUnit4 . class ) public class ImmutableUndirectedGraphTest extends ImmutableSimpleUndirectedGraphTest { @Override public ImmutableUndirectedGraph < Integer , String > createGraph ( ) { builder = ImmutableUndirectedGraph . builder ( ) ; return builder . build ( ) ; } @Test public void edges_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( graph . edges ( ) ) . containsExactly ( E11 ) ; } @Test public void incidentEdges_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( graph . incidentEdges ( N1 ) ) . containsExactly ( E11 ) ; } @Test public void incidentNodes_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( graph . incidentNodes ( E11 ) ) . containsExactly ( N1 ) ; } @Test public void adjacentNodes_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; addEdge ( E12 , N1 , N2 ) ; assertThat ( graph . adjacentNodes ( N1 ) ) . containsExactly ( N1 , N2 ) . inOrder ( ) ; } @Test public void adjacentEdges_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( graph . adjacentEdges ( E11 ) ) . isEmpty ( ) ; addEdge ( E12 , N1 , N2 ) ; assertThat ( graph . adjacentEdges ( E11 ) ) . containsExactly ( E12 ) ; } @Test public void edgesConnecting_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( immutableGraph . edgesConnecting ( N1 , N1 ) ) . containsExactly ( E11 ) ; addEdge ( E12 , N1 , N2 ) ; assertThat ( immutableGraph . edgesConnecting ( N1 , N2 ) ) . containsExactly ( E12 ) ; assertThat ( immutableGraph . edgesConnecting ( N2 , N1 ) ) . containsExactly ( E12 ) ; } @Test public void inEdges_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( immutableGraph . inEdges ( N1 ) ) . containsExactly ( E11 ) ; addEdge ( E12 , N1 , N2 ) ; assertThat ( immutableGraph . inEdges ( N1 ) ) . containsExactly ( E11 , E12 ) . inOrder ( ) ; } @Test public void outEdges_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( immutableGraph . outEdges ( N1 ) ) . containsExactly ( E11 ) ; addEdge ( E12 , N2 , N1 ) ; assertThat ( immutableGraph . outEdges ( N1 ) ) . containsExactly ( E11 , E12 ) . inOrder ( ) ; } @Test public void predecessors_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( immutableGraph . predecessors ( N1 ) ) . containsExactly ( N1 ) ; addEdge ( E12 , N1 , N2 ) ; assertThat ( immutableGraph . predecessors ( N1 ) ) . containsExactly ( N1 , N2 ) . inOrder ( ) ; } @Test public void successors_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( immutableGraph . successors ( N1 ) ) . containsExactly ( N1 ) ; addEdge ( E12 , N2 , N1 ) ; assertThat ( immutableGraph . successors ( N1 ) ) . containsExactly ( N1 , N2 ) . inOrder ( ) ; } @Test public void degree_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertEquals ( <int> , graph . degree ( N1 ) ) ; addEdge ( E12 , N1 , N2 ) ; assertEquals ( <int> , graph . degree ( N1 ) ) ; } @Test public void inDegree_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertEquals ( <int> , immutableGraph . inDegree ( N1 ) ) ; addEdge ( E12 , N1 , N2 ) ; assertEquals ( <int> , immutableGraph . inDegree ( N1 ) ) ; } @Test public void outDegree_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertEquals ( <int> , immutableGraph . outDegree ( N1 ) ) ; addEdge ( E12 , N2 , N1 ) ; assertEquals ( <int> , immutableGraph . outDegree ( N1 ) ) ; } @Override public void addEdge_builder_selfLoop ( ) { assertTrue ( addEdge ( E11 , N1 , N1 ) ) ; assertThat ( graph . edges ( ) ) . contains ( E11 ) ; assertThat ( graph . edgesConnecting ( N1 , N1 ) ) . containsExactly ( E11 ) ; } @Test public void addEdge_builder_existingEdgeBetweenDifferentNodes_selfLoops ( ) { addEdge ( E11 , N1 , N1 ) ; try { addEdge ( E11 , N1 , N2 ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) ) . contains ( ERROR_REUSE_EDGE ) ; } try { addEdge ( E11 , N2 , N2 ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) ) . contains ( ERROR_REUSE_EDGE ) ; } addEdge ( E12 , N1 , N2 ) ; try { addEdge ( E12 , N1 , N1 ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) ) . contains ( ERROR_REUSE_EDGE ) ; } } @Test public void addEdge_builder_parallelSelfLoopEdge ( ) { addEdge ( E11 , N1 , N1 ) ; try { addEdge ( EDGE_NOT_IN_GRAPH , N1 , N1 ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) ) . contains ( ERROR_PARALLEL_EDGE ) ; } } @Test public void toString_selfLoop ( ) { addEdge ( E11 , N1 , N1 ) ; assertThat ( graph . toString ( ) ) . isEqualTo ( String . format ( <str> , graph . config ( ) , graph . nodes ( ) , E11 , N1 ) ) ; } @Override protected void populateInputGraph ( UndirectedGraph < Integer , String > graph ) { super . populateInputGraph ( graph ) ; graph . addEdge ( E11 , N1 , N1 ) ; } } 

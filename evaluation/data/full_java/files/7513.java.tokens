package org . elasticsearch . search . internal ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . Term ; import org . apache . lucene . index . TermContext ; import org . apache . lucene . search . * ; import org . elasticsearch . common . lease . Releasable ; import org . elasticsearch . index . engine . Engine ; import org . elasticsearch . search . dfs . AggregatedDfs ; import java . io . IOException ; public class ContextIndexSearcher extends IndexSearcher implements Releasable { private final IndexSearcher in ; private AggregatedDfs aggregatedDfs ; private final Engine . Searcher engineSearcher ; public ContextIndexSearcher ( SearchContext searchContext , Engine . Searcher searcher ) { super ( searcher . reader ( ) ) ; in = searcher . searcher ( ) ; engineSearcher = searcher ; setSimilarity ( searcher . searcher ( ) . getSimilarity ( true ) ) ; setQueryCache ( searchContext . getQueryCache ( ) ) ; setQueryCachingPolicy ( searchContext . indexShard ( ) . getQueryCachingPolicy ( ) ) ; } @Override public void close ( ) { } public void setAggregatedDfs ( AggregatedDfs aggregatedDfs ) { this . aggregatedDfs = aggregatedDfs ; } @Override public Query rewrite ( Query original ) throws IOException { return in . rewrite ( original ) ; } @Override public Weight createNormalizedWeight ( Query query , boolean needsScores ) throws IOException { if ( aggregatedDfs ! = null & & needsScores ) { return super . createNormalizedWeight ( query , needsScores ) ; } return in . createNormalizedWeight ( query , needsScores ) ; } @Override public Explanation explain ( Query query , int doc ) throws IOException { return in . explain ( query , doc ) ; } @Override public TermStatistics termStatistics ( Term term , TermContext context ) throws IOException { if ( aggregatedDfs = = null ) { return super . termStatistics ( term , context ) ; } TermStatistics termStatistics = aggregatedDfs . termStatistics ( ) . get ( term ) ; if ( termStatistics = = null ) { return super . termStatistics ( term , context ) ; } return termStatistics ; } @Override public CollectionStatistics collectionStatistics ( String field ) throws IOException { if ( aggregatedDfs = = null ) { return super . collectionStatistics ( field ) ; } CollectionStatistics collectionStatistics = aggregatedDfs . fieldStatistics ( ) . get ( field ) ; if ( collectionStatistics = = null ) { return super . collectionStatistics ( field ) ; } return collectionStatistics ; } public DirectoryReader getDirectoryReader ( ) { return engineSearcher . getDirectoryReader ( ) ; } } 

package org . gradle . api . internal . artifacts . publish ; import org . gradle . api . Task ; import org . jmock . integration . junit4 . JMock ; import org . junit . Test ; import org . junit . runner . RunWith ; import java . util . Set ; import static org . gradle . util . WrapUtil . toSet ; import static org . hamcrest . Matchers . equalTo ; import static org . junit . Assert . assertThat ; @RunWith ( JMock . class ) public class DefaultPublishArtifactTest extends AbstractPublishArtifactTest { @Test public void init ( ) { Task task1 = context . mock ( Task . class , <str> ) ; Task task2 = context . mock ( Task . class , <str> ) ; DefaultPublishArtifact publishArtifact = new DefaultPublishArtifact ( getTestName ( ) , getTestExt ( ) , getTestType ( ) , getTestClassifier ( ) , getDate ( ) , getTestFile ( ) , task1 , task2 ) ; assertThat ( ( Set < Task > ) publishArtifact . getBuildDependencies ( ) . getDependencies ( null ) , equalTo ( toSet ( task1 , task2 ) ) ) ; assertCommonPropertiesAreSet ( publishArtifact , true ) ; } @Test public void canSpecifyTheBuilderTasksOnConstruction ( ) { Task task = context . mock ( Task . class ) ; DefaultPublishArtifact publishArtifact = new DefaultPublishArtifact ( <str> , <str> , <str> , null , null , null , task ) ; assertThat ( ( Set < Task > ) publishArtifact . getBuildDependencies ( ) . getDependencies ( null ) , equalTo ( toSet ( task ) ) ) ; } @Test public void canSpecifyTheBuilderTasks ( ) { Task task = context . mock ( Task . class ) ; DefaultPublishArtifact publishArtifact = new DefaultPublishArtifact ( <str> , <str> , <str> , null , null , null ) ; publishArtifact . builtBy ( task ) ; assertThat ( ( Set < Task > ) publishArtifact . getBuildDependencies ( ) . getDependencies ( null ) , equalTo ( toSet ( task ) ) ) ; } } 

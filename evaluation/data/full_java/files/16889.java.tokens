package java . io ; import com . google . gwt . corp . compatibility . Numbers ; public class DataInputStream extends InputStream implements DataInput { private final InputStream is ; public DataInputStream ( final InputStream is ) { this . is = is ; } @Override public int read ( ) throws IOException { return is . read ( ) ; } public boolean readBoolean ( ) throws IOException { return readByte ( ) ! = <int> ; } public byte readByte ( ) throws IOException { int i = read ( ) ; if ( i = = - <int> ) { throw new EOFException ( ) ; } return ( byte ) i ; } public char readChar ( ) throws IOException { int a = is . read ( ) ; int b = readUnsignedByte ( ) ; return ( char ) ( ( a < < <int> ) | b ) ; } public double readDouble ( ) throws IOException { return Double . longBitsToDouble ( readLong ( ) ) ; } public float readFloat ( ) throws IOException { return Numbers . intBitsToFloat ( readInt ( ) ) ; } public void readFully ( byte [ ] b ) throws IOException { readFully ( b , <int> , b . length ) ; } public void readFully ( byte [ ] b , int off , int len ) throws IOException { while ( len > <int> ) { int count = is . read ( b , off , len ) ; if ( count < = <int> ) { throw new EOFException ( ) ; } off + = count ; len - = count ; } } public int readInt ( ) throws IOException { int a = is . read ( ) ; int b = is . read ( ) ; int c = is . read ( ) ; int d = readUnsignedByte ( ) ; return ( a < < <int> ) | ( b < < <int> ) | ( c < < <int> ) | d ; } public String readLine ( ) throws IOException { throw new RuntimeException ( <str> ) ; } public long readLong ( ) throws IOException { long a = readInt ( ) ; long b = readInt ( ) & <hex> ; return ( a < < <int> ) | b ; } public short readShort ( ) throws IOException { int a = is . read ( ) ; int b = readUnsignedByte ( ) ; return ( short ) ( ( a < < <int> ) | b ) ; } public String readUTF ( ) throws IOException { int bytes = readUnsignedShort ( ) ; StringBuilder sb = new StringBuilder ( ) ; while ( bytes > <int> ) { bytes - = readUtfChar ( sb ) ; } return sb . toString ( ) ; } private int readUtfChar ( StringBuilder sb ) throws IOException { int a = readUnsignedByte ( ) ; if ( ( a & <hex> ) = = <int> ) { sb . append ( ( char ) a ) ; return <int> ; } if ( ( a & <hex> ) = = <hex> ) { int b = readUnsignedByte ( ) ; sb . append ( ( char ) ( ( ( a & <hex> ) < < <int> ) | ( b & <hex> ) ) ) ; return <int> ; } if ( ( a & <hex> ) = = <hex> ) { int b = readUnsignedByte ( ) ; int c = readUnsignedByte ( ) ; sb . append ( ( char ) ( ( ( a & <hex> ) < < <int> ) | ( ( b & <hex> ) < < <int> ) | ( c & <hex> ) ) ) ; return <int> ; } throw new UTFDataFormatException ( ) ; } public int readUnsignedByte ( ) throws IOException { int i = read ( ) ; if ( i = = - <int> ) { throw new EOFException ( ) ; } return i ; } public int readUnsignedShort ( ) throws IOException { int a = is . read ( ) ; int b = readUnsignedByte ( ) ; return ( ( a < < <int> ) | b ) ; } public int skipBytes ( int n ) throws IOException { return <int> ; } @Override public int available ( ) { return is . available ( ) ; } @Override public void close ( ) throws IOException { is . close ( ) ; } } 

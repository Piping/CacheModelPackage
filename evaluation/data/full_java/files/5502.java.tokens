package org . elasticsearch . client . node ; import org . elasticsearch . action . * ; import org . elasticsearch . action . support . TransportAction ; import org . elasticsearch . client . support . AbstractClient ; import org . elasticsearch . client . support . Headers ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import java . util . Map ; import static java . util . Collections . unmodifiableMap ; public class NodeClient extends AbstractClient { private final Map < GenericAction , TransportAction > actions ; @Inject public NodeClient ( Settings settings , ThreadPool threadPool , Headers headers , Map < GenericAction , TransportAction > actions ) { super ( settings , threadPool , headers ) ; this . actions = unmodifiableMap ( actions ) ; } @Override public void close ( ) { } @SuppressWarnings ( <str> ) @Override public < Request extends ActionRequest , Response extends ActionResponse , RequestBuilder extends ActionRequestBuilder < Request , Response , RequestBuilder > > void doExecute ( Action < Request , Response , RequestBuilder > action , Request request , ActionListener < Response > listener ) { TransportAction < Request , Response > transportAction = actions . get ( action ) ; if ( transportAction = = null ) { throw new IllegalStateException ( <str> + action + <str> ) ; } transportAction . execute ( request , listener ) ; } } 

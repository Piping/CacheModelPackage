package com . google . common . graph ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . base . MoreObjects ; import com . google . common . base . Objects ; import com . google . common . collect . ImmutableSet ; import java . util . LinkedHashSet ; import java . util . Set ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @CheckReturnValue final class IncidentEdges < E > { private final Set < E > inEdges ; private final Set < E > outEdges ; private IncidentEdges ( Set < E > inEdges , Set < E > outEdges ) { this . inEdges = checkNotNull ( inEdges , <str> ) ; this . outEdges = checkNotNull ( outEdges , <str> ) ; } static < E > IncidentEdges < E > of ( ) { return new IncidentEdges < E > ( new LinkedHashSet < E > ( ) , new LinkedHashSet < E > ( ) ) ; } static < E > IncidentEdges < E > ofImmutable ( Set < E > inEdges , Set < E > outEdges ) { return new IncidentEdges < E > ( ImmutableSet . copyOf ( inEdges ) , ImmutableSet . copyOf ( outEdges ) ) ; } Set < E > inEdges ( ) { return inEdges ; } Set < E > outEdges ( ) { return outEdges ; } @Override public int hashCode ( ) { return Objects . hashCode ( inEdges , outEdges ) ; } @Override public boolean equals ( @Nullable Object object ) { if ( object instanceof IncidentEdges ) { IncidentEdges < ? > that = ( IncidentEdges < ? > ) object ; return this . inEdges . equals ( that . inEdges ) & & this . outEdges . equals ( that . outEdges ) ; } return false ; } @Override public String toString ( ) { return MoreObjects . toStringHelper ( this ) . add ( <str> , inEdges ) . add ( <str> , outEdges ) . toString ( ) ; } } 

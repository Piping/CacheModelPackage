package org . elasticsearch . indices . state ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . action . admin . indices . alias . IndicesAliasesResponse ; import org . elasticsearch . action . admin . indices . close . CloseIndexResponse ; import org . elasticsearch . action . admin . indices . open . OpenIndexResponse ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexNotFoundException ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import java . util . Arrays ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_METADATA ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; public class OpenCloseIndexIT extends ESIntegTestCase { public void testSimpleCloseOpen ( ) { Client client = client ( ) ; createIndex ( <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; CloseIndexResponse closeIndexResponse = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> ) ; OpenIndexResponse openIndexResponse = client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsOpened ( <str> ) ; } public void testSimpleCloseMissingIndex ( ) { Client client = client ( ) ; try { client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testSimpleOpenMissingIndex ( ) { Client client = client ( ) ; try { client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testCloseOneMissingIndex ( ) { Client client = client ( ) ; createIndex ( <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; try { client . admin ( ) . indices ( ) . prepareClose ( <str> , <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testCloseOneMissingIndexIgnoreMissing ( ) { Client client = client ( ) ; createIndex ( <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; CloseIndexResponse closeIndexResponse = client . admin ( ) . indices ( ) . prepareClose ( <str> , <str> ) . setIndicesOptions ( IndicesOptions . lenientExpandOpen ( ) ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> ) ; } public void testOpenOneMissingIndex ( ) { Client client = client ( ) ; createIndex ( <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; try { client . admin ( ) . indices ( ) . prepareOpen ( <str> , <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testOpenOneMissingIndexIgnoreMissing ( ) { Client client = client ( ) ; createIndex ( <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; OpenIndexResponse openIndexResponse = client . admin ( ) . indices ( ) . prepareOpen ( <str> , <str> ) . setIndicesOptions ( IndicesOptions . lenientExpandOpen ( ) ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsOpened ( <str> ) ; } public void testCloseOpenMultipleIndices ( ) { Client client = client ( ) ; createIndex ( <str> , <str> , <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; CloseIndexResponse closeIndexResponse1 = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse1 . isAcknowledged ( ) , equalTo ( true ) ) ; CloseIndexResponse closeIndexResponse2 = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse2 . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> , <str> ) ; assertIndexIsOpened ( <str> ) ; OpenIndexResponse openIndexResponse1 = client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse1 . isAcknowledged ( ) , equalTo ( true ) ) ; OpenIndexResponse openIndexResponse2 = client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse2 . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsOpened ( <str> , <str> , <str> ) ; } public void testCloseOpenWildcard ( ) { Client client = client ( ) ; createIndex ( <str> , <str> , <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; CloseIndexResponse closeIndexResponse = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> , <str> ) ; assertIndexIsOpened ( <str> ) ; OpenIndexResponse openIndexResponse = client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsOpened ( <str> , <str> , <str> ) ; } public void testCloseOpenAll ( ) { Client client = client ( ) ; createIndex ( <str> , <str> , <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; CloseIndexResponse closeIndexResponse = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> , <str> , <str> ) ; OpenIndexResponse openIndexResponse = client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsOpened ( <str> , <str> , <str> ) ; } public void testCloseOpenAllWildcard ( ) { Client client = client ( ) ; createIndex ( <str> , <str> , <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; CloseIndexResponse closeIndexResponse = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> , <str> , <str> ) ; OpenIndexResponse openIndexResponse = client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsOpened ( <str> , <str> , <str> ) ; } public void testCloseNoIndex ( ) { Client client = client ( ) ; try { client . admin ( ) . indices ( ) . prepareClose ( ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( ActionRequestValidationException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testCloseNullIndex ( ) { Client client = client ( ) ; try { client . admin ( ) . indices ( ) . prepareClose ( ( String [ ] ) null ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( ActionRequestValidationException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testOpenNoIndex ( ) { Client client = client ( ) ; try { client . admin ( ) . indices ( ) . prepareOpen ( ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( ActionRequestValidationException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testOpenNullIndex ( ) { Client client = client ( ) ; try { client . admin ( ) . indices ( ) . prepareOpen ( ( String [ ] ) null ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( ActionRequestValidationException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testOpenAlreadyOpenedIndex ( ) { Client client = client ( ) ; createIndex ( <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; OpenIndexResponse openIndexResponse1 = client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse1 . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsOpened ( <str> ) ; } public void testCloseAlreadyClosedIndex ( ) { Client client = client ( ) ; createIndex ( <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; CloseIndexResponse closeIndexResponse = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> ) ; closeIndexResponse = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> ) ; } public void testSimpleCloseOpenAlias ( ) { Client client = client ( ) ; createIndex ( <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; IndicesAliasesResponse aliasesResponse = client . admin ( ) . indices ( ) . prepareAliases ( ) . addAlias ( <str> , <str> ) . execute ( ) . actionGet ( ) ; assertThat ( aliasesResponse . isAcknowledged ( ) , equalTo ( true ) ) ; CloseIndexResponse closeIndexResponse = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> ) ; OpenIndexResponse openIndexResponse = client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsOpened ( <str> ) ; } public void testCloseOpenAliasMultipleIndices ( ) { Client client = client ( ) ; createIndex ( <str> , <str> ) ; ClusterHealthResponse healthResponse = client . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; IndicesAliasesResponse aliasesResponse1 = client . admin ( ) . indices ( ) . prepareAliases ( ) . addAlias ( <str> , <str> ) . execute ( ) . actionGet ( ) ; assertThat ( aliasesResponse1 . isAcknowledged ( ) , equalTo ( true ) ) ; IndicesAliasesResponse aliasesResponse2 = client . admin ( ) . indices ( ) . prepareAliases ( ) . addAlias ( <str> , <str> ) . execute ( ) . actionGet ( ) ; assertThat ( aliasesResponse2 . isAcknowledged ( ) , equalTo ( true ) ) ; CloseIndexResponse closeIndexResponse = client . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( closeIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsClosed ( <str> , <str> ) ; OpenIndexResponse openIndexResponse = client . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( openIndexResponse . isAcknowledged ( ) , equalTo ( true ) ) ; assertIndexIsOpened ( <str> , <str> ) ; } private void assertIndexIsOpened ( String . . . indices ) { checkIndexState ( IndexMetaData . State . OPEN , indices ) ; } private void assertIndexIsClosed ( String . . . indices ) { checkIndexState ( IndexMetaData . State . CLOSE , indices ) ; } private void checkIndexState ( IndexMetaData . State expectedState , String . . . indices ) { ClusterStateResponse clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) ; for ( String index : indices ) { IndexMetaData indexMetaData = clusterStateResponse . getState ( ) . metaData ( ) . indices ( ) . get ( index ) ; assertThat ( indexMetaData , notNullValue ( ) ) ; assertThat ( indexMetaData . getState ( ) , equalTo ( expectedState ) ) ; } } public void testOpenCloseWithDocs ( ) throws IOException , ExecutionException , InterruptedException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) ) ; ensureGreen ( ) ; int docs = between ( <int> , <int> ) ; IndexRequestBuilder [ ] builder = new IndexRequestBuilder [ docs ] ; for ( int i = <int> ; i < docs ; i + + ) { builder [ i ] = client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( <str> , <str> ) ; } indexRandom ( true , builder ) ; if ( randomBoolean ( ) ) { client ( ) . admin ( ) . indices ( ) . prepareFlush ( <str> ) . setWaitIfOngoing ( true ) . setForce ( true ) . execute ( ) . get ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . get ( ) ; ensureGreen ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) ) . get ( ) ; assertNoFailures ( searchResponse ) ; assertHitCount ( searchResponse , docs ) ; } public void testOpenCloseIndexWithBlocks ( ) { createIndex ( <str> ) ; ensureGreen ( <str> ) ; int docs = between ( <int> , <int> ) ; for ( int i = <int> ; i < docs ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; } for ( String blockSetting : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; CloseIndexResponse closeIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertAcked ( closeIndexResponse ) ; assertIndexIsClosed ( <str> ) ; OpenIndexResponse openIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; assertAcked ( openIndexResponse ) ; assertIndexIsOpened ( <str> ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } for ( String blockSetting : Arrays . asList ( SETTING_READ_ONLY , SETTING_BLOCKS_METADATA ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) ) ; assertIndexIsOpened ( <str> ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } CloseIndexResponse closeIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; assertAcked ( closeIndexResponse ) ; assertIndexIsClosed ( <str> ) ; for ( String blockSetting : Arrays . asList ( SETTING_READ_ONLY , SETTING_BLOCKS_METADATA ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) ) ; assertIndexIsClosed ( <str> ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } } } 

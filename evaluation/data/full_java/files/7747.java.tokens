package org . elasticsearch . action . bulk ; import org . apache . lucene . util . Constants ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . delete . DeleteRequest ; import org . elasticsearch . action . index . IndexRequest ; import org . elasticsearch . action . update . UpdateRequest ; import org . elasticsearch . client . Requests ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . script . Script ; import org . elasticsearch . test . ESTestCase ; import java . nio . charset . StandardCharsets ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . * ; public class BulkRequestTests extends ESTestCase { public void testSimpleBulk1 ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; if ( Constants . WINDOWS ) { bulkAction = Strings . replace ( bulkAction , <str> , <str> ) ; } BulkRequest bulkRequest = new BulkRequest ( ) ; bulkRequest . add ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) , <int> , bulkAction . length ( ) , null , null ) ; assertThat ( bulkRequest . numberOfActions ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( IndexRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . source ( ) . toBytes ( ) , equalTo ( new BytesArray ( <str> ) . toBytes ( ) ) ) ; assertThat ( bulkRequest . requests ( ) . get ( <int> ) , instanceOf ( DeleteRequest . class ) ) ; assertThat ( ( ( IndexRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . source ( ) . toBytes ( ) , equalTo ( new BytesArray ( <str> ) . toBytes ( ) ) ) ; } public void testSimpleBulk2 ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; bulkRequest . add ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) , <int> , bulkAction . length ( ) , null , null ) ; assertThat ( bulkRequest . numberOfActions ( ) , equalTo ( <int> ) ) ; } public void testSimpleBulk3 ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; bulkRequest . add ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) , <int> , bulkAction . length ( ) , null , null ) ; assertThat ( bulkRequest . numberOfActions ( ) , equalTo ( <int> ) ) ; } public void testSimpleBulk4 ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; bulkRequest . add ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) , <int> , bulkAction . length ( ) , null , null ) ; assertThat ( bulkRequest . numberOfActions ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( UpdateRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . retryOnConflict ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( UpdateRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . doc ( ) . source ( ) . toUtf8 ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . type ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . index ( ) , equalTo ( <str> ) ) ; Script script = ( ( UpdateRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . script ( ) ; assertThat ( script , notNullValue ( ) ) ; assertThat ( script . getScript ( ) , equalTo ( <str> ) ) ; assertThat ( script . getLang ( ) , equalTo ( <str> ) ) ; Map < String , Object > scriptParams = script . getParams ( ) ; assertThat ( scriptParams , notNullValue ( ) ) ; assertThat ( scriptParams . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Integer ) scriptParams . get ( <str> ) ) , equalTo ( <int> ) ) ; assertThat ( ( ( UpdateRequest ) bulkRequest . requests ( ) . get ( <int> ) ) . upsertRequest ( ) . source ( ) . toUtf8 ( ) , equalTo ( <str> ) ) ; } public void testBulkAllowExplicitIndex ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; try { new BulkRequest ( ) . add ( new BytesArray ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) ) , null , null , false ) ; fail ( ) ; } catch ( Exception e ) { } bulkAction = copyToStringFromClasspath ( <str> ) ; new BulkRequest ( ) . add ( new BytesArray ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) ) , <str> , null , false ) ; } public void testBulkAddIterable ( ) { BulkRequest bulkRequest = Requests . bulkRequest ( ) ; List < ActionRequest > requests = new ArrayList < > ( ) ; requests . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> , <str> ) ) ; requests . add ( new UpdateRequest ( <str> , <str> , <str> ) . doc ( <str> , <str> ) ) ; requests . add ( new DeleteRequest ( <str> , <str> , <str> ) ) ; bulkRequest . add ( requests ) ; assertThat ( bulkRequest . requests ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( bulkRequest . requests ( ) . get ( <int> ) , instanceOf ( IndexRequest . class ) ) ; assertThat ( bulkRequest . requests ( ) . get ( <int> ) , instanceOf ( UpdateRequest . class ) ) ; assertThat ( bulkRequest . requests ( ) . get ( <int> ) , instanceOf ( DeleteRequest . class ) ) ; } public void testSimpleBulk6 ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; try { bulkRequest . add ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) , <int> , bulkAction . length ( ) , null , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testSimpleBulk7 ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; try { bulkRequest . add ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) , <int> , bulkAction . length ( ) , null , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testSimpleBulk8 ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; try { bulkRequest . add ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) , <int> , bulkAction . length ( ) , null , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testSimpleBulk9 ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; try { bulkRequest . add ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) , <int> , bulkAction . length ( ) , null , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( <str> + e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testSimpleBulk10 ( ) throws Exception { String bulkAction = copyToStringFromClasspath ( <str> ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; bulkRequest . add ( bulkAction . getBytes ( StandardCharsets . UTF_8 ) , <int> , bulkAction . length ( ) , null , null ) ; assertThat ( bulkRequest . numberOfActions ( ) , equalTo ( <int> ) ) ; } public void testBulkRequestWithRefresh ( ) throws Exception { BulkRequest bulkRequest = new BulkRequest ( ) ; bulkRequest . add ( new DeleteRequest ( <str> , <str> , null ) . refresh ( true ) ) ; bulkRequest . add ( new DeleteRequest ( <str> , null , <str> ) ) ; bulkRequest . add ( new DeleteRequest ( <str> , <str> , <str> ) . refresh ( true ) ) ; bulkRequest . add ( new UpdateRequest ( <str> , <str> , <str> ) . doc ( <str> ) . refresh ( true ) ) ; bulkRequest . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> ) . refresh ( true ) ) ; ActionRequestValidationException validate = bulkRequest . validate ( ) ; assertThat ( validate , notNullValue ( ) ) ; assertThat ( validate . validationErrors ( ) , not ( empty ( ) ) ) ; assertThat ( validate . validationErrors ( ) , contains ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ; } public void testBulkNoSource ( ) throws Exception { BulkRequest bulkRequest = new BulkRequest ( ) ; bulkRequest . add ( new UpdateRequest ( <str> , <str> , <str> ) ) ; bulkRequest . add ( new IndexRequest ( <str> , <str> , <str> ) ) ; ActionRequestValidationException validate = bulkRequest . validate ( ) ; assertThat ( validate , notNullValue ( ) ) ; assertThat ( validate . validationErrors ( ) , not ( empty ( ) ) ) ; assertThat ( validate . validationErrors ( ) , contains ( <str> , <str> ) ) ; } } 

package org . gradle . build . docs . dsl . docbook ; import org . gradle . internal . UncheckedException ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . StringReader ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; class JavadocScanner { private final StringBuilder input = new StringBuilder ( ) ; private int pos ; private int markPos ; JavadocScanner ( String rawCommentText ) { pushText ( rawCommentText ) ; } @Override public String toString ( ) { return input . substring ( pos ) ; } public boolean isEmpty ( ) { return pos = = input . length ( ) ; } public void mark ( ) { markPos = pos ; } public void next ( ) { next ( <int> ) ; } public void next ( int n ) { pos + = n ; } public boolean lookingAt ( char c ) { return input . charAt ( pos ) = = c ; } public boolean lookingAt ( CharSequence prefix ) { int i = <int> ; int cpos = pos ; while ( i < prefix . length ( ) & & cpos < input . length ( ) ) { if ( prefix . charAt ( i ) ! = input . charAt ( cpos ) ) { return false ; } i + + ; cpos + + ; } return true ; } public boolean lookingAt ( Pattern pattern ) { Matcher m = pattern . matcher ( input ) ; m . region ( pos , input . length ( ) ) ; return m . lookingAt ( ) ; } public String region ( ) { return input . substring ( markPos , pos ) ; } public void find ( char c ) { int cpos = pos ; while ( cpos < input . length ( ) ) { if ( input . charAt ( cpos ) = = c ) { break ; } cpos + + ; } pos = cpos ; } public void find ( Pattern pattern ) { Matcher m = pattern . matcher ( input ) ; m . region ( pos , input . length ( ) ) ; if ( m . find ( ) ) { pos = m . start ( ) ; } else { pos = input . length ( ) ; } } public void skip ( Pattern pattern ) { Matcher m = pattern . matcher ( input ) ; m . region ( pos , input . length ( ) ) ; if ( m . lookingAt ( ) ) { pos = m . end ( ) ; } } public void pushText ( String rawCommentText ) { if ( rawCommentText = = null ) { return ; } StringBuilder builder = new StringBuilder ( ) ; try { BufferedReader reader = new BufferedReader ( new StringReader ( rawCommentText ) ) ; String line ; while ( ( line = reader . readLine ( ) ) ! = null ) { line = line . replaceFirst ( <str> , <str> ) ; if ( line . startsWith ( <str> ) ) { break ; } builder . append ( line ) ; builder . append ( <str> ) ; } } catch ( IOException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } input . insert ( pos , builder . toString ( ) . trim ( ) ) ; } public char getFirst ( ) { return input . charAt ( pos ) ; } } 

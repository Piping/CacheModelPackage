package org . gradle . internal . featurelifecycle ; import org . codehaus . groovy . runtime . StackTraceUtils ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; public class DeprecatedFeatureUsage { private final String message ; private final Class < ? > calledFrom ; private final List < StackTraceElement > stack ; public DeprecatedFeatureUsage ( String message , Class < ? > calledFrom ) { this . message = message ; this . calledFrom = calledFrom ; this . stack = Collections . emptyList ( ) ; } private DeprecatedFeatureUsage ( DeprecatedFeatureUsage usage , List < StackTraceElement > stack ) { this . message = usage . message ; this . calledFrom = usage . calledFrom ; this . stack = stack ; } public String getMessage ( ) { return message ; } public List < StackTraceElement > getStack ( ) { return stack ; } public DeprecatedFeatureUsage withStackTrace ( ) { if ( ! stack . isEmpty ( ) ) { return this ; } StackTraceElement [ ] originalStack = StackTraceUtils . sanitize ( new Exception ( ) ) . getStackTrace ( ) ; int caller = <int> ; while ( caller < originalStack . length & & ! originalStack [ caller ] . getClassName ( ) . startsWith ( calledFrom . getName ( ) ) ) { caller + + ; } while ( caller < originalStack . length & & originalStack [ caller ] . getClassName ( ) . startsWith ( calledFrom . getName ( ) ) ) { caller + + ; } caller + + ; List < StackTraceElement > stack = new ArrayList < StackTraceElement > ( ) ; for ( ; caller < originalStack . length ; caller + + ) { stack . add ( originalStack [ caller ] ) ; } return new DeprecatedFeatureUsage ( this , stack ) ; } } 

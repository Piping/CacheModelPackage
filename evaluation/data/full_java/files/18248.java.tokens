package com . badlogic . gdx . scenes . scene2d . actions ; import com . badlogic . gdx . scenes . scene2d . Action ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Pool ; public class ParallelAction extends Action { Array < Action > actions = new Array ( <int> ) ; private boolean complete ; public ParallelAction ( ) { } public ParallelAction ( Action action1 ) { addAction ( action1 ) ; } public ParallelAction ( Action action1 , Action action2 ) { addAction ( action1 ) ; addAction ( action2 ) ; } public ParallelAction ( Action action1 , Action action2 , Action action3 ) { addAction ( action1 ) ; addAction ( action2 ) ; addAction ( action3 ) ; } public ParallelAction ( Action action1 , Action action2 , Action action3 , Action action4 ) { addAction ( action1 ) ; addAction ( action2 ) ; addAction ( action3 ) ; addAction ( action4 ) ; } public ParallelAction ( Action action1 , Action action2 , Action action3 , Action action4 , Action action5 ) { addAction ( action1 ) ; addAction ( action2 ) ; addAction ( action3 ) ; addAction ( action4 ) ; addAction ( action5 ) ; } public boolean act ( float delta ) { if ( complete ) return true ; complete = true ; Pool pool = getPool ( ) ; setPool ( null ) ; try { Array < Action > actions = this . actions ; for ( int i = <int> , n = actions . size ; i < n & & actor ! = null ; i + + ) { Action currentAction = actions . get ( i ) ; if ( currentAction . getActor ( ) ! = null & & ! currentAction . act ( delta ) ) complete = false ; if ( actor = = null ) return true ; } return complete ; } finally { setPool ( pool ) ; } } public void restart ( ) { complete = false ; Array < Action > actions = this . actions ; for ( int i = <int> , n = actions . size ; i < n ; i + + ) actions . get ( i ) . restart ( ) ; } public void reset ( ) { super . reset ( ) ; actions . clear ( ) ; } public void addAction ( Action action ) { actions . add ( action ) ; if ( actor ! = null ) action . setActor ( actor ) ; } public void setActor ( Actor actor ) { Array < Action > actions = this . actions ; for ( int i = <int> , n = actions . size ; i < n ; i + + ) actions . get ( i ) . setActor ( actor ) ; super . setActor ( actor ) ; } public Array < Action > getActions ( ) { return actions ; } public String toString ( ) { StringBuilder buffer = new StringBuilder ( <int> ) ; buffer . append ( super . toString ( ) ) ; buffer . append ( <str> ) ; Array < Action > actions = this . actions ; for ( int i = <int> , n = actions . size ; i < n ; i + + ) { if ( i > <int> ) buffer . append ( <str> ) ; buffer . append ( actions . get ( i ) ) ; } buffer . append ( <str> ) ; return buffer . toString ( ) ; } } 

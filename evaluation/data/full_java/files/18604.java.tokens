package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . FixtureDef ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; public class DebugRendererTest extends Box2DTest { @Override protected void createWorld ( World world ) { { EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <float> , <int> ) , new Vector2 ( <int> , <int> ) ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . friction = <float> ; BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; ground . createFixture ( fd ) ; shape . dispose ( ) ; } { PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <int> , <float> ) ; BodyDef def = new BodyDef ( ) ; def . position . y = <int> ; def . angle = ( float ) Math . toRadians ( <int> ) ; def . type = BodyType . DynamicBody ; Body body = world . createBody ( def ) ; body . createFixture ( shape , <int> ) ; def = new BodyDef ( ) ; def . position . x = <int> ; def . position . y = <int> ; def . angle = <int> ; def . type = BodyType . DynamicBody ; body = world . createBody ( def ) ; body . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } } } 

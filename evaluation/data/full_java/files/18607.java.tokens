package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; public class Pyramid extends Box2DTest { @Override protected void createWorld ( World world ) { { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( <int> , <int> ) ) ; ground . createFixture ( shape , <float> ) ; shape . dispose ( ) ; } { float a = <float> ; PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( a , a ) ; Vector2 x = new Vector2 ( - <float> , <float> ) ; Vector2 y = new Vector2 ( ) ; Vector2 deltaX = new Vector2 ( <float> , <float> ) ; Vector2 deltaY = new Vector2 ( <float> , <float> ) ; for ( int i = <int> ; i < <int> ; i + + ) { y . set ( x ) ; for ( int j = i ; j < <int> ; j + + ) { BodyDef bd = new BodyDef ( ) ; bd . type = BodyType . DynamicBody ; bd . position . set ( y ) ; Body body = world . createBody ( bd ) ; body . createFixture ( shape , <float> ) ; y . add ( deltaY ) ; } x . add ( deltaX ) ; } } } } 

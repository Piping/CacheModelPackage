package org . elasticsearch . client . transport ; import org . elasticsearch . Version ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . TransportAddress ; import org . elasticsearch . node . Node ; import org . elasticsearch . node . internal . InternalSettingsPreparer ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . transport . TransportService ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . startsWith ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> , transportClientRatio = <float> ) public class TransportClientIT extends ESIntegTestCase { public void testPickingUpChangesInDiscoveryNode ( ) { String nodeName = internalCluster ( ) . startNode ( Settings . builder ( ) . put ( <str> , false ) ) ; TransportClient client = ( TransportClient ) internalCluster ( ) . client ( nodeName ) ; assertThat ( client . connectedNodes ( ) . get ( <int> ) . dataNode ( ) , equalTo ( false ) ) ; } public void testNodeVersionIsUpdated ( ) { TransportClient client = ( TransportClient ) internalCluster ( ) . client ( ) ; TransportClientNodesService nodeService = client . nodeService ( ) ; Node node = new Node ( Settings . builder ( ) . put ( internalCluster ( ) . getDefaultSettings ( ) ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , false ) . put ( <str> , <str> ) . put ( InternalSettingsPreparer . IGNORE_SYSTEM_PROPERTIES_SETTING , true ) . build ( ) ) ; node . start ( ) ; try { TransportAddress transportAddress = node . injector ( ) . getInstance ( TransportService . class ) . boundAddress ( ) . publishAddress ( ) ; client . addTransportAddress ( transportAddress ) ; assertThat ( nodeService . connectedNodes ( ) . size ( ) , greaterThanOrEqualTo ( <int> ) ) ; for ( DiscoveryNode discoveryNode : nodeService . connectedNodes ( ) ) { assertThat ( discoveryNode . getVersion ( ) , equalTo ( Version . CURRENT ) ) ; } for ( DiscoveryNode discoveryNode : nodeService . listedNodes ( ) ) { assertThat ( discoveryNode . id ( ) , startsWith ( <str> ) ) ; assertThat ( discoveryNode . getVersion ( ) , equalTo ( Version . CURRENT . minimumCompatibilityVersion ( ) ) ) ; } assertThat ( nodeService . filteredNodes ( ) . size ( ) , equalTo ( <int> ) ) ; for ( DiscoveryNode discoveryNode : nodeService . filteredNodes ( ) ) { assertThat ( discoveryNode . getVersion ( ) , equalTo ( Version . CURRENT . minimumCompatibilityVersion ( ) ) ) ; } } finally { node . close ( ) ; } } public void testThatTransportClientSettingIsSet ( ) { TransportClient client = ( TransportClient ) internalCluster ( ) . client ( ) ; Settings settings = client . injector . getInstance ( Settings . class ) ; assertThat ( settings . get ( Client . CLIENT_TYPE_SETTING ) , is ( <str> ) ) ; } public void testThatTransportClientSettingCannotBeChanged ( ) { Settings baseSettings = settingsBuilder ( ) . put ( Client . CLIENT_TYPE_SETTING , <str> ) . put ( <str> , createTempDir ( ) ) . build ( ) ; try ( TransportClient client = TransportClient . builder ( ) . settings ( baseSettings ) . build ( ) ) { Settings settings = client . injector . getInstance ( Settings . class ) ; assertThat ( settings . get ( Client . CLIENT_TYPE_SETTING ) , is ( <str> ) ) ; } } } 

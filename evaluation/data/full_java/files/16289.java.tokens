package org . gradle . foundation ; import junit . framework . TestCase ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . gradleplugin . foundation . favorites . FavoriteTask ; import org . gradle . gradleplugin . foundation . favorites . FavoritesEditor ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Assert ; import org . junit . Before ; import org . junit . Test ; import java . util . ArrayList ; import java . util . List ; public class FavoritesTest extends TestCase { private BuildInformation buildInformation ; private ProjectView myRootProject ; private ProjectView mySubProject1 ; private TaskView mySubProject1Comple ; private TaskView mySubProject1Lib ; private TaskView mySubProject1Doc ; private ProjectView mySubSubProject ; private TaskView mySubSubProjectCompile ; private TaskView mySubSubProjectLib ; private TaskView mySubSubProjectDoc ; private ProjectView mySubProject2 ; private TaskView mySubProject2Lib ; private TaskView mySubProject2doc ; private TaskView mySubProject2Compile ; private JUnit4Mockery context ; @Before public void setUp ( ) throws Exception { context = new JUnit4Mockery ( ) ; Task subsubCompileTask = TestUtility . createTask ( context , <str> , <str> ) ; Task subsubLibTask = TestUtility . createTask ( context , <str> , <str> ) ; Task subsubDocTask = TestUtility . createTask ( context , <str> , <str> ) ; Project subsubProject = TestUtility . createMockProject ( context , <str> , <str> , <int> , null , new Task [ ] { subsubCompileTask , subsubLibTask , subsubDocTask } , null ) ; Task subCompileTask1 = TestUtility . createTask ( context , <str> , <str> ) ; Task subLibTask1 = TestUtility . createTask ( context , <str> , <str> ) ; Task subDocTask1 = TestUtility . createTask ( context , <str> , <str> ) ; Project subProject1 = TestUtility . createMockProject ( context , <str> , <str> , <int> , new Project [ ] { subsubProject } , new Task [ ] { subCompileTask1 , subLibTask1 , subDocTask1 } , null ) ; Task subCompileTask2 = TestUtility . createTask ( context , <str> , <str> ) ; Task subLibTask2 = TestUtility . createTask ( context , <str> , <str> ) ; Task subDocTask2 = TestUtility . createTask ( context , <str> , <str> ) ; Project subProject2 = TestUtility . createMockProject ( context , <str> , <str> , <int> , null , new Task [ ] { subCompileTask2 , subLibTask2 , subDocTask2 } , null ) ; Project rootProject = TestUtility . createMockProject ( context , <str> , <str> , <int> , new Project [ ] { subProject1 , subProject2 } , null , null ) ; buildInformation = new BuildInformation ( rootProject ) ; myRootProject = buildInformation . getProjectFromFullPath ( <str> ) ; Assert . assertNotNull ( myRootProject ) ; mySubProject1 = buildInformation . getProjectFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject1 ) ; mySubProject1Comple = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject1Comple ) ; mySubProject1Lib = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject1Lib ) ; mySubProject1Doc = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject1Doc ) ; mySubSubProject = buildInformation . getProjectFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubSubProject ) ; mySubSubProjectCompile = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubSubProjectCompile ) ; mySubSubProjectLib = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubSubProjectLib ) ; mySubSubProjectDoc = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubSubProjectDoc ) ; mySubProject2 = buildInformation . getProjectFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject2 ) ; mySubProject2Compile = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject2Compile ) ; mySubProject2Lib = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject2Lib ) ; mySubProject2doc = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject2doc ) ; } @Test public void testAddingFavorites ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; final FavoritesEditor . FavoriteTasksObserver observer = context . mock ( FavoritesEditor . FavoriteTasksObserver . class ) ; context . checking ( new Expectations ( ) { { one ( observer ) . favoritesChanged ( ) ; } } ) ; editor . addFavoriteTasksObserver ( observer , false ) ; editor . addFavorite ( mySubProject1Comple , true ) ; context . assertIsSatisfied ( ) ; FavoriteTask favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertTrue ( favoriteTask . alwaysShowOutput ( ) ) ; context . checking ( new Expectations ( ) { { one ( observer ) . favoritesChanged ( ) ; } } ) ; editor . addFavorite ( mySubSubProjectDoc , false ) ; context . assertIsSatisfied ( ) ; favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertFalse ( favoriteTask . alwaysShowOutput ( ) ) ; } @Test public void testRemovingFavorites ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; editor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertTrue ( favoriteTask . alwaysShowOutput ( ) ) ; final FavoritesEditor . FavoriteTasksObserver observer = context . mock ( FavoritesEditor . FavoriteTasksObserver . class ) ; context . checking ( new Expectations ( ) { { one ( observer ) . favoritesChanged ( ) ; } } ) ; editor . addFavoriteTasksObserver ( observer , false ) ; List < FavoriteTask > tasks = new ArrayList < FavoriteTask > ( ) ; tasks . add ( favoriteTask ) ; editor . removeFavorites ( tasks ) ; context . assertIsSatisfied ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; } public void testRemovingNonExistantFavorite ( ) { FavoritesEditor otherEditor = new FavoritesEditor ( ) ; Assert . assertTrue ( otherEditor . getFavoriteTasks ( ) . isEmpty ( ) ) ; otherEditor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask = otherEditor . getFavoriteTasks ( ) . get ( <int> ) ; FavoritesEditor interestedEditor = new FavoritesEditor ( ) ; final FavoritesEditor . FavoriteTasksObserver observer = context . mock ( FavoritesEditor . FavoriteTasksObserver . class ) ; interestedEditor . addFavoriteTasksObserver ( observer , false ) ; List < FavoriteTask > tasks = new ArrayList < FavoriteTask > ( ) ; tasks . add ( favoriteTask ) ; interestedEditor . removeFavorites ( tasks ) ; Assert . assertEquals ( <int> , otherEditor . getFavoriteTasks ( ) . size ( ) ) ; Assert . assertTrue ( interestedEditor . getFavoriteTasks ( ) . isEmpty ( ) ) ; } @Test public void testEditingFavorite ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; editor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertTrue ( favoriteTask . alwaysShowOutput ( ) ) ; final FavoritesEditor . FavoriteTasksObserver observer = context . mock ( FavoritesEditor . FavoriteTasksObserver . class ) ; context . checking ( new Expectations ( ) { { one ( observer ) . favoritesChanged ( ) ; } } ) ; editor . addFavoriteTasksObserver ( observer , false ) ; editor . editFavorite ( favoriteTask , new FavoritesEditor . EditFavoriteInteraction ( ) { public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { favoriteTask . alwaysShowOutput = false ; favoriteTask . displayName = <str> ; favoriteTask . fullCommandLine = <str> ; return true ; } public void reportError ( String error ) { throw new AssertionError ( <str> + error ) ; } } ) ; context . assertIsSatisfied ( ) ; favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertTrue ( ! favoriteTask . alwaysShowOutput ( ) ) ; } @Test public void testChangingFullNameToNonExistantTask ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; editor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertTrue ( favoriteTask . alwaysShowOutput ( ) ) ; final FavoritesEditor . FavoriteTasksObserver observer = context . mock ( FavoritesEditor . FavoriteTasksObserver . class ) ; context . checking ( new Expectations ( ) { { one ( observer ) . favoritesChanged ( ) ; } } ) ; editor . addFavoriteTasksObserver ( observer , false ) ; editor . editFavorite ( favoriteTask , new FavoritesEditor . EditFavoriteInteraction ( ) { public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { favoriteTask . displayName = <str> ; favoriteTask . fullCommandLine = <str> ; return true ; } public void reportError ( String error ) { throw new AssertionError ( <str> + error ) ; } } ) ; context . assertIsSatisfied ( ) ; favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertFalse ( ! favoriteTask . alwaysShowOutput ( ) ) ; context . checking ( new Expectations ( ) { { one ( observer ) . favoritesChanged ( ) ; } } ) ; editor . editFavorite ( favoriteTask , new FavoritesEditor . EditFavoriteInteraction ( ) { public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { favoriteTask . displayName = <str> ; favoriteTask . fullCommandLine = <str> ; return true ; } public void reportError ( String error ) { throw new AssertionError ( <str> + error ) ; } } ) ; context . assertIsSatisfied ( ) ; favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertFalse ( ! favoriteTask . alwaysShowOutput ( ) ) ; } @Test public void testCancelingEditingFavorite ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; editor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertTrue ( favoriteTask . alwaysShowOutput ( ) ) ; final FavoritesEditor . FavoriteTasksObserver observer = context . mock ( FavoritesEditor . FavoriteTasksObserver . class ) ; editor . addFavoriteTasksObserver ( observer , false ) ; editor . editFavorite ( favoriteTask , new FavoritesEditor . EditFavoriteInteraction ( ) { public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { favoriteTask . displayName = <str> ; favoriteTask . fullCommandLine = <str> ; favoriteTask . alwaysShowOutput = ! favoriteTask . alwaysShowOutput ; return false ; } public void reportError ( String error ) { throw new AssertionError ( <str> + error ) ; } } ) ; favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getDisplayName ( ) ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; Assert . assertTrue ( favoriteTask . alwaysShowOutput ( ) ) ; } @Test public void testEditingFavoriteFullNameAlreadyExists ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; editor . addFavorite ( mySubProject1Comple , true ) ; editor . addFavorite ( mySubSubProjectLib , true ) ; FavoriteTask favoriteTask1 = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask1 . getFullCommandLine ( ) ) ; FavoriteTask favoriteTask2 = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask2 . getFullCommandLine ( ) ) ; editExpectingNoError ( editor , favoriteTask1 , <str> , favoriteTask2 . getFullCommandLine ( ) ) ; } private void editExpectingNoError ( FavoritesEditor editor , FavoriteTask favoriteTaskToEdit , String newName , String newFullName ) { String originalFullName = favoriteTaskToEdit . getFullCommandLine ( ) ; final FavoritesEditor . FavoriteTasksObserver observer = context . mock ( FavoritesEditor . FavoriteTasksObserver . class ) ; context . checking ( new Expectations ( ) { { one ( observer ) . favoritesChanged ( ) ; } } ) ; editor . addFavoriteTasksObserver ( observer , false ) ; ValidationErrorTestEditFavoriteInteraction interaction = new ValidationErrorTestEditFavoriteInteraction ( newName , newFullName ) ; editor . editFavorite ( favoriteTaskToEdit , interaction ) ; Assert . assertFalse ( interaction . receivedErrorMessage ) ; favoriteTaskToEdit = editor . getFavorite ( originalFullName ) ; Assert . assertNull ( favoriteTaskToEdit ) ; favoriteTaskToEdit = editor . getFavorite ( newFullName ) ; Assert . assertNotNull ( favoriteTaskToEdit ) ; Assert . assertEquals ( newName , favoriteTaskToEdit . getDisplayName ( ) ) ; Assert . assertEquals ( newFullName , favoriteTaskToEdit . getFullCommandLine ( ) ) ; } private void editExpectingError ( FavoritesEditor editor , FavoriteTask favoriteTaskToEdit , String newName , String newFullName ) { String originalDisplayName = favoriteTaskToEdit . getDisplayName ( ) ; String originalFullName = favoriteTaskToEdit . getFullCommandLine ( ) ; final FavoritesEditor . FavoriteTasksObserver observer = context . mock ( FavoritesEditor . FavoriteTasksObserver . class ) ; editor . addFavoriteTasksObserver ( observer , false ) ; ValidationErrorTestEditFavoriteInteraction interaction = new ValidationErrorTestEditFavoriteInteraction ( newName , newFullName ) ; editor . editFavorite ( favoriteTaskToEdit , interaction ) ; Assert . assertTrue ( interaction . receivedErrorMessage ) ; favoriteTaskToEdit = editor . getFavorite ( originalFullName ) ; Assert . assertNotNull ( favoriteTaskToEdit ) ; Assert . assertEquals ( originalDisplayName , favoriteTaskToEdit . getDisplayName ( ) ) ; Assert . assertEquals ( originalFullName , favoriteTaskToEdit . getFullCommandLine ( ) ) ; Assert . assertTrue ( favoriteTaskToEdit . alwaysShowOutput ( ) ) ; } private class ValidationErrorTestEditFavoriteInteraction implements FavoritesEditor . EditFavoriteInteraction { boolean receivedErrorMessage ; private String newDisplayName ; private String newFullCommandLine ; private ValidationErrorTestEditFavoriteInteraction ( String newDisplayName , String newFullCommandLine ) { this . newDisplayName = newDisplayName ; this . newFullCommandLine = newFullCommandLine ; } public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { if ( receivedErrorMessage ) { return false ; } favoriteTask . alwaysShowOutput = false ; favoriteTask . displayName = newDisplayName ; favoriteTask . fullCommandLine = newFullCommandLine ; return true ; } public void reportError ( String error ) { receivedErrorMessage = true ; } } @Test public void testEditingFavoriteDisplayNameAlreadyExists ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; editor . addFavorite ( mySubProject1Comple , true ) ; editor . addFavorite ( mySubSubProjectLib , true ) ; FavoriteTask favoriteTask1 = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask1 . getFullCommandLine ( ) ) ; FavoriteTask favoriteTask2 = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask2 . getFullCommandLine ( ) ) ; final FavoritesEditor . FavoriteTasksObserver observer = context . mock ( FavoritesEditor . FavoriteTasksObserver . class ) ; context . checking ( new Expectations ( ) { { one ( observer ) . favoritesChanged ( ) ; } } ) ; editor . addFavoriteTasksObserver ( observer , false ) ; FavoriteTask favoriteTaskToEdit = favoriteTask1 ; String newName = favoriteTask2 . getDisplayName ( ) ; String newFullName = favoriteTask1 . getFullCommandLine ( ) ; String originalFullName = favoriteTaskToEdit . getFullCommandLine ( ) ; ValidationErrorTestEditFavoriteInteraction interaction = new ValidationErrorTestEditFavoriteInteraction ( newName , newFullName ) ; editor . editFavorite ( favoriteTaskToEdit , interaction ) ; Assert . assertFalse ( interaction . receivedErrorMessage ) ; favoriteTaskToEdit = editor . getFavorite ( originalFullName ) ; Assert . assertNotNull ( favoriteTaskToEdit ) ; favoriteTaskToEdit = editor . getFavorite ( newFullName ) ; Assert . assertNotNull ( favoriteTaskToEdit ) ; Assert . assertEquals ( newName , favoriteTaskToEdit . getDisplayName ( ) ) ; Assert . assertEquals ( newFullName , favoriteTaskToEdit . getFullCommandLine ( ) ) ; } @Test public void testEditingFavoriteBlankFullName ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; editor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; editExpectingError ( editor , favoriteTask , favoriteTask . getDisplayName ( ) , <str> ) ; } @Test public void testEditingFavoriteBlankDisplayName ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; editor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertEquals ( <str> , favoriteTask . getFullCommandLine ( ) ) ; editExpectingError ( editor , favoriteTask , <str> , favoriteTask . getFullCommandLine ( ) ) ; } @Test public void testMoveUp ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; FavoriteTask mySubProject1CompleFavorite = editor . addFavorite ( mySubProject1Comple , false ) ; FavoriteTask mySubProject1LibFavorite = editor . addFavorite ( mySubProject1Lib , false ) ; FavoriteTask mySubProject1DocFavorite = editor . addFavorite ( mySubProject1Doc , false ) ; FavoriteTask mySubSubProjectCompileFavorite = editor . addFavorite ( mySubSubProjectCompile , false ) ; FavoriteTask mySubSubProjectLibFavorite = editor . addFavorite ( mySubSubProjectLib , false ) ; FavoriteTask mySubSubProjectDocFavorite = editor . addFavorite ( mySubSubProjectDoc , false ) ; List < FavoriteTask > favoritesToMove = new ArrayList < FavoriteTask > ( ) ; favoritesToMove . add ( mySubProject1LibFavorite ) ; favoritesToMove . add ( mySubSubProjectCompileFavorite ) ; favoritesToMove . add ( mySubSubProjectDocFavorite ) ; TestOrderFavoritesObserver observer = new TestOrderFavoritesObserver ( editor , mySubProject1LibFavorite , mySubProject1CompleFavorite , mySubSubProjectCompileFavorite , mySubProject1DocFavorite , mySubSubProjectDocFavorite , mySubSubProjectLibFavorite ) ; editor . addFavoriteTasksObserver ( observer , false ) ; editor . moveFavoritesBefore ( favoritesToMove ) ; observer . setExpectedOrder ( mySubProject1LibFavorite , mySubSubProjectCompileFavorite , mySubProject1CompleFavorite , mySubSubProjectDocFavorite , mySubProject1DocFavorite , mySubSubProjectLibFavorite ) ; editor . moveFavoritesBefore ( favoritesToMove ) ; observer . setExpectedOrder ( mySubProject1LibFavorite , mySubSubProjectCompileFavorite , mySubSubProjectDocFavorite , mySubProject1CompleFavorite , mySubProject1DocFavorite , mySubSubProjectLibFavorite ) ; editor . moveFavoritesBefore ( favoritesToMove ) ; observer . setExpectedOrder ( mySubProject1LibFavorite , mySubSubProjectCompileFavorite , mySubSubProjectDocFavorite , mySubProject1CompleFavorite , mySubProject1DocFavorite , mySubSubProjectLibFavorite ) ; editor . moveFavoritesBefore ( favoritesToMove ) ; } private class TestOrderFavoritesObserver implements FavoritesEditor . FavoriteTasksObserver { private FavoritesEditor editor ; private FavoriteTask [ ] expectedOrder ; private TestOrderFavoritesObserver ( FavoritesEditor editor , FavoriteTask . . . expectedOrder ) { this . editor = editor ; this . expectedOrder = expectedOrder ; } public void setExpectedOrder ( FavoriteTask . . . expectedOrder ) { this . expectedOrder = expectedOrder ; } public void favoritesChanged ( ) { throw new AssertionError ( <str> ) ; } public void favoritesReordered ( List < FavoriteTask > favoritesReordered ) { Object [ ] objects = editor . getFavoriteTasks ( ) . toArray ( ) ; Assert . assertArrayEquals ( expectedOrder , objects ) ; } } @Test public void testMoveDown ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; Assert . assertTrue ( editor . getFavoriteTasks ( ) . isEmpty ( ) ) ; FavoriteTask mySubProject1CompleFavorite = editor . addFavorite ( mySubProject1Comple , false ) ; FavoriteTask mySubProject1LibFavorite = editor . addFavorite ( mySubProject1Lib , false ) ; FavoriteTask mySubProject1DocFavorite = editor . addFavorite ( mySubProject1Doc , false ) ; FavoriteTask mySubSubProjectCompileFavorite = editor . addFavorite ( mySubSubProjectCompile , false ) ; FavoriteTask mySubSubProjectLibFavorite = editor . addFavorite ( mySubSubProjectLib , false ) ; FavoriteTask mySubSubProjectDocFavorite = editor . addFavorite ( mySubSubProjectDoc , false ) ; List < FavoriteTask > favoritesToMove = new ArrayList < FavoriteTask > ( ) ; favoritesToMove . add ( mySubProject1CompleFavorite ) ; favoritesToMove . add ( mySubProject1DocFavorite ) ; favoritesToMove . add ( mySubSubProjectLibFavorite ) ; TestOrderFavoritesObserver observer = new TestOrderFavoritesObserver ( editor , mySubProject1LibFavorite , mySubProject1CompleFavorite , mySubSubProjectCompileFavorite , mySubProject1DocFavorite , mySubSubProjectDocFavorite , mySubSubProjectLibFavorite ) ; editor . addFavoriteTasksObserver ( observer , false ) ; editor . moveFavoritesAfter ( favoritesToMove ) ; observer . setExpectedOrder ( mySubProject1LibFavorite , mySubSubProjectCompileFavorite , mySubProject1CompleFavorite , mySubSubProjectDocFavorite , mySubProject1DocFavorite , mySubSubProjectLibFavorite ) ; editor . moveFavoritesAfter ( favoritesToMove ) ; observer . setExpectedOrder ( mySubProject1LibFavorite , mySubSubProjectCompileFavorite , mySubSubProjectDocFavorite , mySubProject1CompleFavorite , mySubProject1DocFavorite , mySubSubProjectLibFavorite ) ; editor . moveFavoritesAfter ( favoritesToMove ) ; observer . setExpectedOrder ( mySubProject1LibFavorite , mySubSubProjectCompileFavorite , mySubSubProjectDocFavorite , mySubProject1CompleFavorite , mySubProject1DocFavorite , mySubSubProjectLibFavorite ) ; editor . moveFavoritesAfter ( favoritesToMove ) ; } } 

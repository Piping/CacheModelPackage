package org . eclipse . debug . internal . core ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . StringTokenizer ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILogicalStructureType ; import org . eclipse . debug . core . model . IValue ; public class LogicalStructureManager { private static LogicalStructureManager fgDefault ; private List < LogicalStructureType > fTypes = null ; private List < LogicalStructureProvider > fTypeProviders ; private Map < String , Integer > fStructureTypeSelections = null ; private List < String > fStructureTypeIds = null ; public static final String PREF_STRUCTURE_SELECTIONS = <str> ; public static final String PREF_STRUCTURE_IDS = <str> ; public static LogicalStructureManager getDefault ( ) { if ( fgDefault = = null ) { fgDefault = new LogicalStructureManager ( ) ; } return fgDefault ; } public ILogicalStructureType [ ] getLogicalStructureTypes ( IValue value ) { initialize ( ) ; List < ILogicalStructureType > select = new ArrayList < ILogicalStructureType > ( ) ; for ( ILogicalStructureType type : fTypes ) { if ( type . providesLogicalStructure ( value ) ) { select . add ( type ) ; } } for ( LogicalStructureProvider provider : fTypeProviders ) { ILogicalStructureType [ ] types = provider . getLogicalStructures ( value ) ; for ( int i = <int> ; i < types . length ; i + + ) { select . add ( types [ i ] ) ; } } return select . toArray ( new ILogicalStructureType [ select . size ( ) ] ) ; } private void loadStructureTypeSelections ( ) { fStructureTypeSelections = new HashMap < String , Integer > ( ) ; String selections = Platform . getPreferencesService ( ) . getString ( DebugPlugin . getUniqueIdentifier ( ) , PREF_STRUCTURE_SELECTIONS , IInternalDebugCoreConstants . EMPTY_STRING , null ) ; StringTokenizer tokenizer = new StringTokenizer ( selections , <str> ) ; while ( tokenizer . hasMoreTokens ( ) ) { String selection = tokenizer . nextToken ( ) ; int i = selection . lastIndexOf ( <str> ) ; if ( i > <int> & & i < selection . length ( ) - <int> ) { String comboKey = selection . substring ( <int> , i + <int> ) ; String selected = selection . substring ( i + <int> , selection . length ( ) ) ; fStructureTypeSelections . put ( comboKey , Integer . valueOf ( Integer . parseInt ( selected ) ) ) ; } } } private void storeStructureTypeSelections ( ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Entry < String , Integer > entry : fStructureTypeSelections . entrySet ( ) ) { buffer . append ( entry . getKey ( ) ) ; buffer . append ( entry . getValue ( ) ) ; buffer . append ( <str> ) ; } Preferences . setString ( DebugPlugin . getUniqueIdentifier ( ) , PREF_STRUCTURE_SELECTIONS , buffer . toString ( ) , null ) ; } private void loadStructureTypeIds ( ) { fStructureTypeIds = new ArrayList < String > ( ) ; String types = Platform . getPreferencesService ( ) . getString ( DebugPlugin . getUniqueIdentifier ( ) , PREF_STRUCTURE_IDS , IInternalDebugCoreConstants . EMPTY_STRING , null ) ; StringTokenizer tokenizer = new StringTokenizer ( types , <str> ) ; while ( tokenizer . hasMoreTokens ( ) ) { String id = tokenizer . nextToken ( ) ; if ( id . length ( ) > <int> ) { fStructureTypeIds . add ( id ) ; } } } private void storeStructureTypeIds ( ) { StringBuffer buffer = new StringBuffer ( ) ; for ( String id : fStructureTypeIds ) { buffer . append ( id ) . append ( <str> ) ; } Preferences . setString ( DebugPlugin . getUniqueIdentifier ( ) , PREF_STRUCTURE_IDS , buffer . toString ( ) , null ) ; } public ILogicalStructureType getSelectedStructureType ( ILogicalStructureType [ ] structureTypes ) { if ( structureTypes . length = = <int> ) { return null ; } String combo = getComboString ( structureTypes ) ; Integer index = fStructureTypeSelections . get ( combo ) ; if ( index = = null ) { return structureTypes [ <int> ] ; } else if ( index . intValue ( ) = = - <int> ) { return null ; } String id = fStructureTypeIds . get ( index . intValue ( ) ) ; for ( int i = <int> ; i < structureTypes . length ; i + + ) { ILogicalStructureType type = structureTypes [ i ] ; if ( type . getId ( ) . equals ( id ) ) { return type ; } } return structureTypes [ <int> ] ; } public void setEnabledType ( ILogicalStructureType [ ] types , ILogicalStructureType selected ) { String combo = getComboString ( types ) ; int index = - <int> ; if ( selected ! = null ) { index = fStructureTypeIds . indexOf ( selected . getId ( ) ) ; } Integer integer = Integer . valueOf ( index ) ; fStructureTypeSelections . put ( combo , integer ) ; storeStructureTypeSelections ( ) ; storeStructureTypeIds ( ) ; } protected String getComboString ( ILogicalStructureType [ ] types ) { StringBuffer comboKey = new StringBuffer ( ) ; for ( int i = <int> ; i < types . length ; i + + ) { ILogicalStructureType type = types [ i ] ; int typeIndex = fStructureTypeIds . indexOf ( type . getId ( ) ) ; if ( typeIndex = = - <int> ) { typeIndex = fStructureTypeIds . size ( ) ; fStructureTypeIds . add ( type . getId ( ) ) ; } comboKey . append ( typeIndex ) . append ( <str> ) ; } return comboKey . toString ( ) ; } private synchronized void initialize ( ) { if ( fTypes = = null ) { IExtensionPoint point = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . EXTENSION_POINT_LOGICAL_STRUCTURE_TYPES ) ; IConfigurationElement [ ] extensions = point . getConfigurationElements ( ) ; fTypes = new ArrayList < LogicalStructureType > ( extensions . length ) ; for ( int i = <int> ; i < extensions . length ; i + + ) { IConfigurationElement extension = extensions [ i ] ; LogicalStructureType type ; try { type = new LogicalStructureType ( extension ) ; fTypes . add ( type ) ; } catch ( CoreException e ) { DebugPlugin . log ( e ) ; } } point = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . EXTENSION_POINT_LOGICAL_STRUCTURE_PROVIDERS ) ; extensions = point . getConfigurationElements ( ) ; fTypeProviders = new ArrayList < LogicalStructureProvider > ( extensions . length ) ; for ( int i = <int> ; i < extensions . length ; i + + ) { try { fTypeProviders . add ( new LogicalStructureProvider ( extensions [ i ] ) ) ; } catch ( CoreException e ) { DebugPlugin . log ( e ) ; } } } if ( fStructureTypeSelections = = null ) { loadStructureTypeSelections ( ) ; } if ( fStructureTypeIds = = null ) { loadStructureTypeIds ( ) ; } } } 

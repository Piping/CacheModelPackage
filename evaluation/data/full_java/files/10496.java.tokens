package com . google . common . hash ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import org . easymock . EasyMock ; import java . io . ByteArrayOutputStream ; public class HashingOutputStreamTest extends TestCase { private Hasher hasher ; private HashFunction hashFunction ; private final ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; hasher = EasyMock . createMock ( Hasher . class ) ; hashFunction = EasyMock . createMock ( HashFunction . class ) ; EasyMock . expect ( hashFunction . newHasher ( ) ) . andReturn ( hasher ) . once ( ) ; EasyMock . replay ( hashFunction ) ; } public void testWrite_putSingleByte ( ) throws Exception { int b = <str> ; EasyMock . expect ( hasher . putByte ( ( byte ) b ) ) . andReturn ( hasher ) . once ( ) ; EasyMock . replay ( hasher ) ; HashingOutputStream out = new HashingOutputStream ( hashFunction , buffer ) ; out . write ( b ) ; EasyMock . verify ( hashFunction ) ; EasyMock . verify ( hasher ) ; } public void testWrite_putByteArray ( ) throws Exception { byte [ ] buf = new byte [ ] { <str> , <str> , <str> , <str> } ; EasyMock . expect ( hasher . putBytes ( buf , <int> , buf . length ) ) . andReturn ( hasher ) . once ( ) ; EasyMock . replay ( hasher ) ; HashingOutputStream out = new HashingOutputStream ( hashFunction , buffer ) ; out . write ( buf ) ; EasyMock . verify ( hashFunction ) ; EasyMock . verify ( hasher ) ; } public void testWrite_putByteArrayAtPos ( ) throws Exception { byte [ ] buf = new byte [ ] { <str> , <str> , <str> , <str> } ; EasyMock . expect ( hasher . putBytes ( buf , <int> , <int> ) ) . andReturn ( hasher ) . once ( ) ; EasyMock . replay ( hasher ) ; HashingOutputStream out = new HashingOutputStream ( hashFunction , buffer ) ; out . write ( buf , <int> , <int> ) ; EasyMock . verify ( hashFunction ) ; EasyMock . verify ( hasher ) ; } public void testHash_hashesCorrectly ( ) throws Exception { byte [ ] buf = new byte [ ] { <str> , <str> , <str> , <str> } ; HashCode expectedHash = Hashing . md5 ( ) . hashBytes ( buf ) ; HashingOutputStream out = new HashingOutputStream ( Hashing . md5 ( ) , buffer ) ; out . write ( buf ) ; assertEquals ( expectedHash , out . hash ( ) ) ; } public void testChecksForNull ( ) throws Exception { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicInstanceMethods ( new HashingOutputStream ( Hashing . md5 ( ) , new ByteArrayOutputStream ( ) ) ) ; tester . testAllPublicStaticMethods ( HashingOutputStream . class ) ; tester . testAllPublicConstructors ( HashingOutputStream . class ) ; } } 

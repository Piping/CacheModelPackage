package org . elasticsearch . routing ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . Version ; import org . elasticsearch . action . RoutingMissingException ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . explain . ExplainResponse ; import org . elasticsearch . action . get . MultiGetRequest ; import org . elasticsearch . action . get . MultiGetResponse ; import org . elasticsearch . action . termvectors . MultiTermVectorsResponse ; import org . elasticsearch . action . termvectors . TermVectorsRequest ; import org . elasticsearch . action . termvectors . TermVectorsResponse ; import org . elasticsearch . action . update . UpdateResponse ; import org . elasticsearch . client . Requests ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . test . ESIntegTestCase ; import static org . hamcrest . Matchers . * ; public class SimpleRoutingIT extends ESIntegTestCase { @Override protected int minimumNumberOfShards ( ) { return <int> ; } public void testSimpleCrudRouting ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( false ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } logger . info ( <str> ) ; client ( ) . prepareDelete ( <str> , <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( false ) ) ; assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } logger . info ( <str> ) ; client ( ) . prepareDelete ( <str> , <str> , <str> ) . setRouting ( <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( false ) ) ; assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( false ) ) ; } logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( false ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } } public void testSimpleSearchRouting ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( false ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareSearch ( ) . setRouting ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> l ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setRouting ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> l ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareSearch ( ) . setRouting ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setRouting ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareSearch ( ) . setRouting ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setRouting ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareSearch ( ) . setRouting ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setRouting ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareSearch ( ) . setRouting ( <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setRouting ( <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareSearch ( ) . setRouting ( <str> , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setRouting ( <str> , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } } public void testRequiredRoutingMapping ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; logger . info ( <str> ) ; try { client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( ElasticsearchException e ) { assertThat ( e . unwrapCause ( ) , instanceOf ( RoutingMissingException . class ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } logger . info ( <str> ) ; try { client ( ) . prepareDelete ( indexOrAlias ( ) , <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( ElasticsearchException e ) { assertThat ( e . unwrapCause ( ) , instanceOf ( RoutingMissingException . class ) ) ; } for ( int i = <int> ; i < <int> ; i + + ) { try { client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) ; fail ( <str> ) ; } catch ( RoutingMissingException e ) { assertThat ( e . status ( ) , equalTo ( RestStatus . BAD_REQUEST ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } assertThat ( client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } logger . info ( <str> ) ; client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; logger . info ( <str> ) ; client ( ) . prepareBulk ( ) . add ( Requests . deleteRequest ( indexOrAlias ( ) ) . type ( <str> ) . id ( <str> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { try { client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) ; fail ( ) ; } catch ( RoutingMissingException e ) { assertThat ( e . status ( ) , equalTo ( RestStatus . BAD_REQUEST ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } assertThat ( client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( false ) ) ; } } public void testRequiredRoutingWithPathMapping ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , randomBoolean ( ) ? <str> : <str> ) . field ( <str> , randomBoolean ( ) ? <str> : <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . setSettings ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2_ID ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; try { client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> , <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( ElasticsearchException e ) { assertThat ( e . unwrapCause ( ) , instanceOf ( MapperParsingException . class ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { try { client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) ; fail ( ) ; } catch ( RoutingMissingException e ) { assertThat ( e . status ( ) , equalTo ( RestStatus . BAD_REQUEST ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } } public void testRequiredRoutingWithPathMappingBulk ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) . setSettings ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2_ID ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareBulk ( ) . add ( client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { try { client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) ; fail ( ) ; } catch ( RoutingMissingException e ) { assertThat ( e . status ( ) , equalTo ( RestStatus . BAD_REQUEST ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } } public void testRequiredRoutingBulk ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareBulk ( ) . add ( client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { try { client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) ; fail ( ) ; } catch ( RoutingMissingException e ) { assertThat ( e . status ( ) , equalTo ( RestStatus . BAD_REQUEST ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } } public void testRequiredRoutingWithPathNumericType ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) . setSettings ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2_ID ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { try { client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) ; fail ( ) ; } catch ( RoutingMissingException e ) { assertThat ( e . status ( ) , equalTo ( RestStatus . BAD_REQUEST ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } } public void testRequiredRoutingMapping_variousAPIs ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) . get ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; logger . info ( <str> ) ; assertThat ( client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; try { client ( ) . prepareGet ( indexOrAlias ( ) , <str> , <str> ) . get ( ) ; fail ( ) ; } catch ( RoutingMissingException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } logger . info ( <str> ) ; ExplainResponse explainResponse = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setRouting ( <str> ) . get ( ) ; assertThat ( explainResponse . isExists ( ) , equalTo ( true ) ) ; assertThat ( explainResponse . isMatch ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; try { client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . get ( ) ; fail ( ) ; } catch ( RoutingMissingException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } logger . info ( <str> ) ; TermVectorsResponse termVectorsResponse = client ( ) . prepareTermVectors ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . get ( ) ; assertThat ( termVectorsResponse . isExists ( ) , equalTo ( true ) ) ; assertThat ( termVectorsResponse . getId ( ) , equalTo ( <str> ) ) ; try { client ( ) . prepareTermVectors ( indexOrAlias ( ) , <str> , <str> ) . get ( ) ; fail ( ) ; } catch ( RoutingMissingException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } UpdateResponse updateResponse = client ( ) . prepareUpdate ( indexOrAlias ( ) , <str> , <str> ) . setRouting ( <str> ) . setDoc ( <str> , <str> ) . get ( ) ; assertThat ( updateResponse . getId ( ) , equalTo ( <str> ) ) ; assertThat ( updateResponse . getVersion ( ) , equalTo ( <int> ) ) ; try { client ( ) . prepareUpdate ( indexOrAlias ( ) , <str> , <str> ) . setDoc ( <str> , <str> ) . get ( ) ; fail ( ) ; } catch ( RoutingMissingException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } logger . info ( <str> ) ; MultiGetResponse multiGetResponse = client ( ) . prepareMultiGet ( ) . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , <str> ) . routing ( <str> ) ) . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , <str> ) . routing ( <str> ) ) . get ( ) ; assertThat ( multiGetResponse . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . getResponse ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . getResponse ( ) . getId ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; multiGetResponse = client ( ) . prepareMultiGet ( ) . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , <str> ) ) . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , <str> ) ) . get ( ) ; assertThat ( multiGetResponse . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , equalTo ( true ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getMessage ( ) , equalTo ( <str> ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , equalTo ( true ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( multiGetResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getMessage ( ) , equalTo ( <str> ) ) ; MultiTermVectorsResponse multiTermVectorsResponse = client ( ) . prepareMultiTermVectors ( ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . routing ( <str> ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . routing ( <str> ) ) . get ( ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getResponse ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getResponse ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; multiTermVectorsResponse = client ( ) . prepareMultiTermVectors ( ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) ) . get ( ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . isFailed ( ) , equalTo ( true ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getCause ( ) . getMessage ( ) , equalTo ( <str> ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getResponse ( ) , nullValue ( ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . isFailed ( ) , equalTo ( true ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getResponse ( ) , nullValue ( ) ) ; assertThat ( multiTermVectorsResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getCause ( ) . getMessage ( ) , equalTo ( <str> ) ) ; } private static String indexOrAlias ( ) { return randomBoolean ( ) ? <str> : <str> ; } } 

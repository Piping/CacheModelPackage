package org . apache . cassandra . db ; import java . io . File ; import java . io . IOException ; import org . junit . Assert ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . db . rows . AbstractUnfilteredRowIterator ; import org . apache . cassandra . db . rows . UnfilteredRowIterator ; import org . apache . cassandra . db . commitlog . CommitLog ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . io . util . FileUtils ; import org . apache . cassandra . schema . KeyspaceParams ; public class RecoveryManagerMissingHeaderTest { private static final String KEYSPACE1 = <str> ; private static final String CF_STANDARD1 = <str> ; private static final String KEYSPACE2 = <str> ; private static final String CF_STANDARD3 = <str> ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD1 ) ) ; SchemaLoader . createKeyspace ( KEYSPACE2 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE2 , CF_STANDARD3 ) ) ; } @Test public void testMissingHeader ( ) throws IOException { Keyspace keyspace1 = Keyspace . open ( KEYSPACE1 ) ; Keyspace keyspace2 = Keyspace . open ( KEYSPACE2 ) ; DecoratedKey dk = Util . dk ( <str> ) ; UnfilteredRowIterator upd1 = Util . apply ( new RowUpdateBuilder ( keyspace1 . getColumnFamilyStore ( CF_STANDARD1 ) . metadata , <int> , <int> , <str> ) . clustering ( <str> ) . add ( <str> , <str> ) . build ( ) ) ; UnfilteredRowIterator upd2 = Util . apply ( new RowUpdateBuilder ( keyspace2 . getColumnFamilyStore ( CF_STANDARD3 ) . metadata , <int> , <int> , <str> ) . clustering ( <str> ) . add ( <str> , <str> ) . build ( ) ) ; keyspace1 . getColumnFamilyStore ( <str> ) . clearUnsafe ( ) ; keyspace2 . getColumnFamilyStore ( <str> ) . clearUnsafe ( ) ; for ( File file : new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) . listFiles ( ) ) { if ( file . getName ( ) . endsWith ( <str> ) ) FileUtils . deleteWithConfirm ( file ) ; } CommitLog . instance . resetUnsafe ( false ) ; Assert . assertTrue ( Util . equal ( upd1 , Util . getOnlyPartitionUnfiltered ( Util . cmd ( keyspace1 . getColumnFamilyStore ( CF_STANDARD1 ) , dk ) . build ( ) ) . unfilteredIterator ( ) ) ) ; Assert . assertTrue ( Util . equal ( upd2 , Util . getOnlyPartitionUnfiltered ( Util . cmd ( keyspace2 . getColumnFamilyStore ( CF_STANDARD3 ) , dk ) . build ( ) ) . unfilteredIterator ( ) ) ) ; } } 

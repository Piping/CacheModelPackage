package org . elasticsearch . common . geo . builders ; import org . elasticsearch . common . xcontent . XContentBuilder ; import com . spatial4j . core . shape . Shape ; import com . vividsolutions . jts . geom . Coordinate ; import com . vividsolutions . jts . geom . Geometry ; import com . vividsolutions . jts . geom . LineString ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Iterator ; public class MultiLineStringBuilder extends ShapeBuilder { public static final GeoShapeType TYPE = GeoShapeType . MULTILINESTRING ; private final ArrayList < LineStringBuilder > lines = new ArrayList < > ( ) ; public MultiLineStringBuilder linestring ( LineStringBuilder line ) { this . lines . add ( line ) ; return this ; } public Coordinate [ ] [ ] coordinates ( ) { Coordinate [ ] [ ] result = new Coordinate [ lines . size ( ) ] [ ] ; for ( int i = <int> ; i < result . length ; i + + ) { result [ i ] = lines . get ( i ) . coordinates ( false ) ; } return result ; } @Override public GeoShapeType type ( ) { return TYPE ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; builder . field ( FIELD_TYPE , TYPE . shapeName ( ) ) ; builder . field ( FIELD_COORDINATES ) ; builder . startArray ( ) ; for ( LineStringBuilder line : lines ) { line . coordinatesToXcontent ( builder , false ) ; } builder . endArray ( ) ; builder . endObject ( ) ; return builder ; } @Override public Shape build ( ) { final Geometry geometry ; if ( wrapdateline ) { ArrayList < LineString > parts = new ArrayList < > ( ) ; for ( LineStringBuilder line : lines ) { LineStringBuilder . decompose ( FACTORY , line . coordinates ( false ) , parts ) ; } if ( parts . size ( ) = = <int> ) { geometry = parts . get ( <int> ) ; } else { LineString [ ] lineStrings = parts . toArray ( new LineString [ parts . size ( ) ] ) ; geometry = FACTORY . createMultiLineString ( lineStrings ) ; } } else { LineString [ ] lineStrings = new LineString [ lines . size ( ) ] ; Iterator < LineStringBuilder > iterator = lines . iterator ( ) ; for ( int i = <int> ; iterator . hasNext ( ) ; i + + ) { lineStrings [ i ] = FACTORY . createLineString ( iterator . next ( ) . coordinates ( false ) ) ; } geometry = FACTORY . createMultiLineString ( lineStrings ) ; } return jtsGeometry ( geometry ) ; } } 

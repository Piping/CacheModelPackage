package org . eclipse . ui . externaltools . internal . variables ; import org . eclipse . core . externaltools . internal . IExternalToolConstants ; import org . eclipse . core . externaltools . internal . model . ExternalToolBuilder ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . variables . IDynamicVariable ; import org . eclipse . core . variables . IDynamicVariableResolver ; import org . eclipse . osgi . util . NLS ; import org . eclipse . ui . externaltools . internal . model . ExternalToolsPlugin ; public class BuildProjectResolver implements IDynamicVariableResolver { @Override public String resolveValue ( IDynamicVariable variable , String argument ) throws CoreException { IResource resource = ExternalToolBuilder . getBuildProject ( ) ; if ( argument ! = null & & resource ! = null ) { resource = ( ( IProject ) resource ) . findMember ( new Path ( argument ) ) ; } if ( resource ! = null & & resource . exists ( ) ) { return resource . getLocation ( ) . toOSString ( ) ; } abort ( NLS . bind ( VariableMessages . BuildProjectResolver_3 , new String [ ] { getReferenceExpression ( variable , argument ) } ) , null ) ; return null ; } protected void abort ( String message , Throwable exception ) throws CoreException { throw new CoreException ( new Status ( IStatus . ERROR , ExternalToolsPlugin . PLUGIN_ID , IExternalToolConstants . ERR_INTERNAL_ERROR , message , exception ) ) ; } protected String getReferenceExpression ( IDynamicVariable variable , String argument ) { StringBuffer reference = new StringBuffer ( ) ; reference . append ( <str> ) ; reference . append ( variable . getName ( ) ) ; if ( argument ! = null ) { reference . append ( <str> ) ; reference . append ( argument ) ; } reference . append ( <str> ) ; return reference . toString ( ) ; } } 

package org . eclipse . debug . examples . ui . pda . adapters ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . examples . core . pda . model . PDADebugTarget ; import org . eclipse . debug . examples . ui . pda . DebugUIPlugin ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . widgets . Event ; import org . eclipse . ui . IActionDelegate2 ; import org . eclipse . ui . ISelectionService ; import org . eclipse . ui . IWorkbenchWindow ; public class AddPDAMemoryBlockAction implements IActionDelegate2 { public AddPDAMemoryBlockAction ( ) { } @Override public void run ( IAction action ) { IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { ISelectionService service = window . getSelectionService ( ) ; ISelection selection = service . getSelection ( ) ; PDADebugTarget target = getTarget ( selection ) ; if ( target ! = null ) { try { IMemoryBlock block = target . getMemoryBlock ( <int> , <int> ) ; DebugPlugin . getDefault ( ) . getMemoryBlockManager ( ) . addMemoryBlocks ( new IMemoryBlock [ ] { block } ) ; } catch ( DebugException e ) { } } } } private PDADebugTarget getTarget ( ISelection selection ) { if ( selection instanceof IStructuredSelection ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; if ( ss . size ( ) = = <int> ) { Object element = ss . getFirstElement ( ) ; if ( element instanceof PDADebugTarget ) { return ( PDADebugTarget ) element ; } } } return null ; } @Override public void selectionChanged ( IAction action , ISelection selection ) { PDADebugTarget target = getTarget ( selection ) ; action . setEnabled ( target ! = null & & ! target . isTerminated ( ) ) ; } @Override public void init ( IAction action ) { } @Override public void dispose ( ) { } @Override public void runWithEvent ( IAction action , Event event ) { run ( action ) ; } } 

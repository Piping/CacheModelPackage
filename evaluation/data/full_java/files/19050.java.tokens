package io . netty . handler . codec . dns ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . channel . socket . DatagramPacket ; import org . junit . Assert ; import org . junit . Test ; import java . net . InetSocketAddress ; import java . util . ArrayList ; import java . util . List ; import static org . hamcrest . Matchers . is ; import static org . junit . Assert . assertThat ; public class DnsQueryTest { @Test public void writeQueryTest ( ) throws Exception { InetSocketAddress addr = new InetSocketAddress ( <str> , <int> ) ; EmbeddedChannel embedder = new EmbeddedChannel ( new DatagramDnsQueryEncoder ( ) ) ; List < DnsQuery > queries = new ArrayList < DnsQuery > ( <int> ) ; queries . add ( new DatagramDnsQuery ( null , addr , <int> ) . setRecord ( DnsSection . QUESTION , new DefaultDnsQuestion ( <str> , DnsRecordType . PTR ) ) ) ; queries . add ( new DatagramDnsQuery ( null , addr , <int> ) . setRecord ( DnsSection . QUESTION , new DefaultDnsQuestion ( <str> , DnsRecordType . A ) ) ) ; queries . add ( new DatagramDnsQuery ( null , addr , <int> ) . setRecord ( DnsSection . QUESTION , new DefaultDnsQuestion ( <str> , DnsRecordType . AAAA ) ) ) ; queries . add ( new DatagramDnsQuery ( null , addr , <int> ) . setRecord ( DnsSection . QUESTION , new DefaultDnsQuestion ( <str> , DnsRecordType . MX ) ) ) ; queries . add ( new DatagramDnsQuery ( null , addr , <int> ) . setRecord ( DnsSection . QUESTION , new DefaultDnsQuestion ( <str> , DnsRecordType . CNAME ) ) ) ; for ( DnsQuery query : queries ) { assertThat ( query . count ( DnsSection . QUESTION ) , is ( <int> ) ) ; assertThat ( query . count ( DnsSection . ANSWER ) , is ( <int> ) ) ; assertThat ( query . count ( DnsSection . AUTHORITY ) , is ( <int> ) ) ; assertThat ( query . count ( DnsSection . ADDITIONAL ) , is ( <int> ) ) ; embedder . writeOutbound ( query ) ; DatagramPacket packet = embedder . readOutbound ( ) ; Assert . assertTrue ( packet . content ( ) . isReadable ( ) ) ; packet . release ( ) ; Assert . assertNull ( embedder . readOutbound ( ) ) ; } } } 

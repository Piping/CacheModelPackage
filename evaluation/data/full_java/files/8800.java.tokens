package org . elasticsearch . plan . a ; public class CompoundAssignmentTests extends ScriptTestCase { public void testAddition ( ) { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> F , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; assertEquals ( <int> D , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; } public void testSubtraction ( ) { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> F , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; assertEquals ( <int> D , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; } public void testMultiplication ( ) { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> F , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; assertEquals ( <int> D , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; } public void testDivision ( ) { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> F , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; assertEquals ( <int> D , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; } public void testDivisionByZero ( ) { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testRemainder ( ) { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( - <float> , exec ( <str> ) ) ; } public void testLeftShift ( ) { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; } public void testRightShift ( ) { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; } public void testUnsignedRightShift ( ) { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( byte ) - <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) - <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> > > > <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> > > > <int> , exec ( <str> ) ) ; } public void testAnd ( ) { assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( ( byte ) ( <int> & <int> ) , exec ( <str> ) ) ; assertEquals ( ( short ) ( <int> & <int> ) , exec ( <str> ) ) ; assertEquals ( ( char ) ( <int> & <int> ) , exec ( <str> ) ) ; assertEquals ( <int> & <int> , exec ( <str> ) ) ; assertEquals ( ( long ) ( <int> & <int> ) , exec ( <str> ) ) ; } public void testOr ( ) { assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( ( byte ) ( <int> | <int> ) , exec ( <str> ) ) ; assertEquals ( ( short ) ( <int> | <int> ) , exec ( <str> ) ) ; assertEquals ( ( char ) ( <int> | <int> ) , exec ( <str> ) ) ; assertEquals ( <int> | <int> , exec ( <str> ) ) ; assertEquals ( ( long ) ( <int> | <int> ) , exec ( <str> ) ) ; } public void testXor ( ) { assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( true , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( ( byte ) ( <int> ^ <int> ) , exec ( <str> ) ) ; assertEquals ( ( short ) ( <int> ^ <int> ) , exec ( <str> ) ) ; assertEquals ( ( char ) ( <int> ^ <int> ) , exec ( <str> ) ) ; assertEquals ( <int> ^ <int> , exec ( <str> ) ) ; assertEquals ( ( long ) ( <int> ^ <int> ) , exec ( <str> ) ) ; } } 

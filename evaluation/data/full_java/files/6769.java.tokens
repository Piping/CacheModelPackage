package org . elasticsearch . index . similarity ; import org . apache . lucene . search . similarities . AfterEffect ; import org . apache . lucene . search . similarities . AfterEffectB ; import org . apache . lucene . search . similarities . AfterEffectL ; import org . apache . lucene . search . similarities . BasicModel ; import org . apache . lucene . search . similarities . BasicModelBE ; import org . apache . lucene . search . similarities . BasicModelD ; import org . apache . lucene . search . similarities . BasicModelG ; import org . apache . lucene . search . similarities . BasicModelIF ; import org . apache . lucene . search . similarities . BasicModelIn ; import org . apache . lucene . search . similarities . BasicModelIne ; import org . apache . lucene . search . similarities . BasicModelP ; import org . apache . lucene . search . similarities . DFRSimilarity ; import org . apache . lucene . search . similarities . Normalization ; import org . apache . lucene . search . similarities . Similarity ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . inject . assistedinject . Assisted ; import org . elasticsearch . common . settings . Settings ; import java . util . HashMap ; import java . util . Map ; import static java . util . Collections . unmodifiableMap ; public class DFRSimilarityProvider extends AbstractSimilarityProvider { private static final Map < String , BasicModel > MODEL_CACHE ; private static final Map < String , AfterEffect > EFFECT_CACHE ; static { Map < String , BasicModel > models = new HashMap < > ( ) ; models . put ( <str> , new BasicModelBE ( ) ) ; models . put ( <str> , new BasicModelD ( ) ) ; models . put ( <str> , new BasicModelG ( ) ) ; models . put ( <str> , new BasicModelIF ( ) ) ; models . put ( <str> , new BasicModelIn ( ) ) ; models . put ( <str> , new BasicModelIne ( ) ) ; models . put ( <str> , new BasicModelP ( ) ) ; MODEL_CACHE = unmodifiableMap ( models ) ; Map < String , AfterEffect > effects = new HashMap < > ( ) ; effects . put ( <str> , new AfterEffect . NoAfterEffect ( ) ) ; effects . put ( <str> , new AfterEffectB ( ) ) ; effects . put ( <str> , new AfterEffectL ( ) ) ; EFFECT_CACHE = unmodifiableMap ( effects ) ; } private final DFRSimilarity similarity ; public DFRSimilarityProvider ( String name , Settings settings ) { super ( name ) ; BasicModel basicModel = parseBasicModel ( settings ) ; AfterEffect afterEffect = parseAfterEffect ( settings ) ; Normalization normalization = parseNormalization ( settings ) ; this . similarity = new DFRSimilarity ( basicModel , afterEffect , normalization ) ; } protected BasicModel parseBasicModel ( Settings settings ) { String basicModel = settings . get ( <str> ) ; BasicModel model = MODEL_CACHE . get ( basicModel ) ; if ( model = = null ) { throw new IllegalArgumentException ( <str> + basicModel + <str> ) ; } return model ; } protected AfterEffect parseAfterEffect ( Settings settings ) { String afterEffect = settings . get ( <str> ) ; AfterEffect effect = EFFECT_CACHE . get ( afterEffect ) ; if ( effect = = null ) { throw new IllegalArgumentException ( <str> + afterEffect + <str> ) ; } return effect ; } @Override public Similarity get ( ) { return similarity ; } } 

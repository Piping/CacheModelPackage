package org . apache . cassandra ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . OutputStream ; import java . io . PrintStream ; import java . util . Locale ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import ch . qos . logback . core . status . Status ; import ch . qos . logback . core . status . StatusListener ; public class LogbackStatusListener implements StatusListener { public static final PrintStream originalOut = System . out ; public static final PrintStream originalErr = System . err ; private boolean hadError = false ; private PrintStream replacementOut ; private PrintStream replacementErr ; @Override public void addStatusEvent ( Status s ) { if ( s . getLevel ( ) ! = <int> | | s . getEffectiveLevel ( ) ! = <int> ) hadError = true ; if ( ! hadError & & s . getMessage ( ) . equals ( <str> ) ) { try { installReplacementStreams ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } if ( s . getMessage ( ) . equals ( <str> ) ) { if ( replacementOut ! = null ) replacementOut . flush ( ) ; if ( replacementErr ! = null ) replacementErr . flush ( ) ; System . setErr ( originalErr ) ; System . setOut ( originalOut ) ; } } private void installReplacementStreams ( ) throws Exception { Logger stdoutLogger = LoggerFactory . getLogger ( <str> ) ; Logger stderrLogger = LoggerFactory . getLogger ( <str> ) ; replacementOut = wrapLogger ( stdoutLogger , originalOut , <str> , false ) ; System . setOut ( replacementOut ) ; replacementErr = wrapLogger ( stderrLogger , originalErr , <str> , true ) ; System . setErr ( replacementErr ) ; } private static PrintStream wrapLogger ( final Logger logger , final PrintStream original , String encodingProperty , boolean error ) throws Exception { final String encoding = System . getProperty ( encodingProperty ) ; OutputStream os = new OutputStream ( ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; @Override public void write ( int b ) throws IOException { baos . write ( b ) ; } @Override public void write ( byte [ ] b , int offset , int length ) { baos . write ( b , offset , length ) ; } @Override public void write ( byte [ ] b ) { write ( b , <int> , b . length ) ; } @Override public void flush ( ) throws IOException { try { if ( baos . size ( ) = = <int> ) return ; if ( baos . size ( ) = = <int> ) { byte [ ] bytes = baos . toByteArray ( ) ; if ( bytes [ <int> ] = = <hex> ) return ; } if ( baos . size ( ) = = <int> ) { byte [ ] bytes = baos . toByteArray ( ) ; if ( bytes [ <int> ] = = <hex> & & bytes [ <int> ] = = <hex> ) return ; } String statement ; if ( encoding ! = null ) statement = new String ( baos . toByteArray ( ) , encoding ) ; else statement = new String ( baos . toByteArray ( ) ) ; if ( error ) logger . error ( statement ) ; else logger . info ( statement ) ; } finally { baos . reset ( ) ; } } } ; if ( encoding ! = null ) return new PrintStream ( os , true , encoding ) ; return new PrintStream ( os , true ) { private long asyncAppenderThreadId = Long . MIN_VALUE ; private boolean isAsyncAppender ( ) { if ( asyncAppenderThreadId = = Long . MIN_VALUE ) asyncAppenderThreadId = Thread . currentThread ( ) . getName ( ) . equals ( <str> ) ? Thread . currentThread ( ) . getId ( ) : asyncAppenderThreadId ; if ( Thread . currentThread ( ) . getId ( ) = = asyncAppenderThreadId ) original . println ( <str> ) ; return Thread . currentThread ( ) . getId ( ) = = asyncAppenderThreadId ; } @Override public void flush ( ) { if ( isAsyncAppender ( ) ) original . flush ( ) ; else super . flush ( ) ; } @Override public void close ( ) { if ( isAsyncAppender ( ) ) original . close ( ) ; else super . flush ( ) ; } @Override public void write ( int b ) { if ( isAsyncAppender ( ) ) original . write ( b ) ; else super . write ( b ) ; } @Override public void write ( byte [ ] buf , int off , int len ) { if ( isAsyncAppender ( ) ) original . write ( buf , off , len ) ; else super . write ( buf , off , len ) ; } @Override public void print ( boolean b ) { if ( isAsyncAppender ( ) ) original . print ( b ) ; else super . print ( b ) ; } @Override public void print ( char c ) { if ( isAsyncAppender ( ) ) original . print ( c ) ; else super . print ( c ) ; } @Override public void print ( int i ) { if ( isAsyncAppender ( ) ) original . print ( i ) ; else super . print ( i ) ; } @Override public void print ( long l ) { if ( isAsyncAppender ( ) ) original . print ( l ) ; else super . print ( l ) ; } @Override public void print ( float f ) { if ( isAsyncAppender ( ) ) original . print ( f ) ; else super . print ( f ) ; } @Override public void print ( double d ) { if ( isAsyncAppender ( ) ) original . print ( d ) ; else super . print ( d ) ; } @Override public void print ( char [ ] s ) { if ( isAsyncAppender ( ) ) original . println ( s ) ; else super . print ( s ) ; } @Override public void print ( String s ) { if ( isAsyncAppender ( ) ) original . print ( s ) ; else super . print ( s ) ; } @Override public void print ( Object obj ) { if ( isAsyncAppender ( ) ) original . print ( obj ) ; else super . print ( obj ) ; } @Override public void println ( ) { if ( isAsyncAppender ( ) ) original . println ( ) ; else super . println ( ) ; } @Override public void println ( boolean v ) { if ( isAsyncAppender ( ) ) original . println ( v ) ; else super . println ( v ) ; } @Override public void println ( char v ) { if ( isAsyncAppender ( ) ) original . println ( v ) ; else super . println ( v ) ; } @Override public void println ( int v ) { if ( isAsyncAppender ( ) ) original . println ( v ) ; else super . println ( v ) ; } @Override public void println ( long v ) { if ( isAsyncAppender ( ) ) original . println ( v ) ; else super . println ( v ) ; } @Override public void println ( float v ) { if ( isAsyncAppender ( ) ) original . println ( v ) ; else super . println ( v ) ; } @Override public void println ( double v ) { if ( isAsyncAppender ( ) ) original . println ( v ) ; else super . println ( v ) ; } @Override public void println ( char [ ] v ) { if ( isAsyncAppender ( ) ) original . println ( v ) ; else super . println ( v ) ; } @Override public void println ( String v ) { if ( isAsyncAppender ( ) ) original . println ( v ) ; else super . println ( v ) ; } @Override public void println ( Object v ) { if ( isAsyncAppender ( ) ) original . println ( v ) ; else super . println ( v ) ; } @Override public PrintStream printf ( String format , Object . . . args ) { if ( isAsyncAppender ( ) ) return original . printf ( format , args ) ; else return super . printf ( format , args ) ; } @Override public PrintStream printf ( Locale l , String format , Object . . . args ) { if ( isAsyncAppender ( ) ) return original . printf ( l , format , args ) ; else return super . printf ( l , format , args ) ; } @Override public PrintStream format ( String format , Object . . . args ) { if ( isAsyncAppender ( ) ) return original . format ( format , args ) ; else return super . format ( format , args ) ; } @Override public PrintStream format ( Locale l , String format , Object . . . args ) { if ( isAsyncAppender ( ) ) return original . format ( l , format , args ) ; else return super . format ( l , format , args ) ; } @Override public PrintStream append ( CharSequence csq ) { if ( isAsyncAppender ( ) ) return original . append ( csq ) ; else return super . append ( csq ) ; } @Override public PrintStream append ( CharSequence csq , int start , int end ) { if ( isAsyncAppender ( ) ) return original . append ( csq , start , end ) ; else return super . append ( csq , start , end ) ; } @Override public PrintStream append ( char c ) { if ( isAsyncAppender ( ) ) return original . append ( c ) ; else return super . append ( c ) ; } } ; } } 

package org . gradle . model . internal . registry ; import org . gradle . api . Nullable ; import org . gradle . model . internal . core . * ; import org . gradle . model . internal . type . ModelType ; public class BindingPredicate extends ModelPredicate { private final ModelReference < ? > reference ; public BindingPredicate ( ModelReference < ? > reference ) { this . reference = reference ; } public ModelReference < ? > getReference ( ) { return reference ; } @Override public String toString ( ) { return <str> + ModelType . getDisplayName ( reference . getType ( ) ) + <str> + getPath ( ) + <str> + getScope ( ) + <str> + getState ( ) + <str> ; } @Nullable @Override public ModelPath getPath ( ) { return reference . getPath ( ) ; } public ModelType < ? > getType ( ) { return reference . getType ( ) ; } @Override public boolean matches ( MutableModelNode node ) { return reference . isUntyped ( ) | | node . canBeViewedAs ( reference . getType ( ) ) ; } @Nullable public ModelPath getScope ( ) { return reference . getScope ( ) ; } public ModelNode . State getState ( ) { return reference . getState ( ) ; } } 

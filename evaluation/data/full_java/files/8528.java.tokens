package org . elasticsearch . search . scroll ; import org . elasticsearch . action . search . ClearScrollRequest ; import org . elasticsearch . action . search . ClearScrollResponse ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . SearchScrollRequest ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . concurrent . UncategorizedExecutionException ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . rest . action . search . RestClearScrollAction ; import org . elasticsearch . rest . action . search . RestSearchScrollAction ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . search . sort . FieldSortBuilder ; import org . elasticsearch . search . sort . SortOrder ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . hamcrest . ElasticsearchAssertions ; import java . io . IOException ; import java . util . Map ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . index . query . QueryBuilders . queryStringQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoSearchHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertThrows ; import static org . hamcrest . Matchers . contains ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . startsWith ; public class SearchScrollIT extends ESIntegTestCase { public void testSimpleScrollQueryThenFetch ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setSize ( <int> ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . addSort ( <str> , SortOrder . ASC ) . execute ( ) . actionGet ( ) ; try { long counter = <int> ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter + + ) ) ; } searchResponse = client ( ) . prepareSearchScroll ( searchResponse . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter + + ) ) ; } searchResponse = client ( ) . prepareSearchScroll ( searchResponse . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter + + ) ) ; } } finally { clearScroll ( searchResponse . getScrollId ( ) ) ; } } public void testSimpleScrollQueryThenFetchSmallSizeUnevenDistribution ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { String routing = <str> ; if ( i > <int> ) { routing = <str> ; } else if ( i > <int> ) { routing = <str> ; } client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , i ) . setRouting ( routing ) . execute ( ) . actionGet ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . setQuery ( matchAllQuery ( ) ) . setSize ( <int> ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . addSort ( <str> , SortOrder . ASC ) . execute ( ) . actionGet ( ) ; try { long counter = <int> ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter + + ) ) ; } for ( int i = <int> ; i < <int> ; i + + ) { searchResponse = client ( ) . prepareSearchScroll ( searchResponse . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter + + ) ) ; } } searchResponse = client ( ) . prepareSearchScroll ( searchResponse . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter + + ) ) ; } searchResponse = client ( ) . prepareSearchScroll ( searchResponse . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter + + ) ) ; } } finally { clearScroll ( searchResponse . getScrollId ( ) ) ; } } public void testScrollAndUpdateIndex ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , System . currentTimeMillis ( ) ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> l ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> l ) ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( queryStringQuery ( <str> ) ) . setSize ( <int> ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . addSort ( <str> , SortOrder . ASC ) . execute ( ) . actionGet ( ) ; try { do { for ( SearchHit searchHit : searchResponse . getHits ( ) . hits ( ) ) { Map < String , Object > map = searchHit . sourceAsMap ( ) ; map . put ( <str> , <str> ) ; client ( ) . prepareIndex ( <str> , <str> , searchHit . id ( ) ) . setSource ( map ) . execute ( ) . actionGet ( ) ; } searchResponse = client ( ) . prepareSearchScroll ( searchResponse . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; } while ( searchResponse . getHits ( ) . hits ( ) . length > <int> ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( matchAllQuery ( ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> l ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> l ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } finally { clearScroll ( searchResponse . getScrollId ( ) ) ; } } public void testSimpleScrollQueryThenFetch_clearScrollIds ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse1 = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setSize ( <int> ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . addSort ( <str> , SortOrder . ASC ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse2 = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setSize ( <int> ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . addSort ( <str> , SortOrder . ASC ) . execute ( ) . actionGet ( ) ; long counter1 = <int> ; long counter2 = <int> ; assertThat ( searchResponse1 . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse1 . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse1 . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter1 + + ) ) ; } assertThat ( searchResponse2 . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse2 . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse2 . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter2 + + ) ) ; } searchResponse1 = client ( ) . prepareSearchScroll ( searchResponse1 . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; searchResponse2 = client ( ) . prepareSearchScroll ( searchResponse2 . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse1 . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse1 . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse1 . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter1 + + ) ) ; } assertThat ( searchResponse2 . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse2 . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse2 . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter2 + + ) ) ; } ClearScrollResponse clearResponse = client ( ) . prepareClearScroll ( ) . addScrollId ( searchResponse1 . getScrollId ( ) ) . addScrollId ( searchResponse2 . getScrollId ( ) ) . execute ( ) . actionGet ( ) ; assertThat ( clearResponse . isSucceeded ( ) , is ( true ) ) ; assertThat ( clearResponse . getNumFreed ( ) , greaterThan ( <int> ) ) ; assertThat ( clearResponse . status ( ) , equalTo ( RestStatus . OK ) ) ; assertToXContentResponse ( clearResponse , true , clearResponse . getNumFreed ( ) ) ; assertThrows ( client ( ) . prepareSearchScroll ( searchResponse1 . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) , RestStatus . NOT_FOUND ) ; assertThrows ( client ( ) . prepareSearchScroll ( searchResponse2 . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) , RestStatus . NOT_FOUND ) ; } public void testClearNonExistentScrollId ( ) throws Exception { createIndex ( <str> ) ; ClearScrollResponse response = client ( ) . prepareClearScroll ( ) . addScrollId ( <str> ) . get ( ) ; assertThat ( response . isSucceeded ( ) , is ( true ) ) ; assertThat ( response . getNumFreed ( ) , equalTo ( <int> ) ) ; assertThat ( response . status ( ) , equalTo ( RestStatus . NOT_FOUND ) ) ; assertToXContentResponse ( response , true , response . getNumFreed ( ) ) ; } public void testClearIllegalScrollId ( ) throws Exception { createIndex ( <str> ) ; try { client ( ) . prepareClearScroll ( ) . addScrollId ( <str> ) . get ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } try { client ( ) . prepareClearScroll ( ) . addScrollId ( <str> ) . get ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } try { client ( ) . prepareClearScroll ( ) . addScrollId ( <str> ) . get ( ) ; fail ( ) ; } catch ( UncategorizedExecutionException e ) { assertThat ( e . getRootCause ( ) , instanceOf ( AssertionError . class ) ) ; } } public void testSimpleScrollQueryThenFetchClearAllScrollIds ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse1 = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setSize ( <int> ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . addSort ( <str> , SortOrder . ASC ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse2 = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setSize ( <int> ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . addSort ( <str> , SortOrder . ASC ) . execute ( ) . actionGet ( ) ; long counter1 = <int> ; long counter2 = <int> ; assertThat ( searchResponse1 . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse1 . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse1 . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter1 + + ) ) ; } assertThat ( searchResponse2 . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse2 . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse2 . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter2 + + ) ) ; } searchResponse1 = client ( ) . prepareSearchScroll ( searchResponse1 . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; searchResponse2 = client ( ) . prepareSearchScroll ( searchResponse2 . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse1 . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse1 . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse1 . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter1 + + ) ) ; } assertThat ( searchResponse2 . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse2 . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse2 . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter2 + + ) ) ; } ClearScrollResponse clearResponse = client ( ) . prepareClearScroll ( ) . addScrollId ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( clearResponse . isSucceeded ( ) , is ( true ) ) ; assertThat ( clearResponse . getNumFreed ( ) , greaterThan ( <int> ) ) ; assertThat ( clearResponse . status ( ) , equalTo ( RestStatus . OK ) ) ; assertToXContentResponse ( clearResponse , true , clearResponse . getNumFreed ( ) ) ; assertThrows ( internalCluster ( ) . transportClient ( ) . prepareSearchScroll ( searchResponse1 . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) , RestStatus . NOT_FOUND ) ; assertThrows ( internalCluster ( ) . transportClient ( ) . prepareSearchScroll ( searchResponse2 . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) , RestStatus . NOT_FOUND ) ; } public void testDeepScrollingDoesNotBlowUp ( ) throws Exception { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . get ( ) ; for ( SearchType searchType : SearchType . values ( ) ) { SearchRequestBuilder builder = client ( ) . prepareSearch ( <str> ) . setSearchType ( searchType ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setSize ( Integer . MAX_VALUE ) . setScroll ( <str> ) ; SearchResponse response = builder . execute ( ) . actionGet ( ) ; try { ElasticsearchAssertions . assertHitCount ( response , <int> ) ; } finally { String scrollId = response . getScrollId ( ) ; if ( scrollId ! = null ) { clearScroll ( scrollId ) ; } } } } public void testThatNonExistingScrollIdReturnsCorrectException ( ) throws Exception { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setScroll ( <str> ) . get ( ) ; assertThat ( searchResponse . getScrollId ( ) , is ( notNullValue ( ) ) ) ; ClearScrollResponse clearScrollResponse = client ( ) . prepareClearScroll ( ) . addScrollId ( searchResponse . getScrollId ( ) ) . get ( ) ; assertThat ( clearScrollResponse . isSucceeded ( ) , is ( true ) ) ; assertThrows ( internalCluster ( ) . transportClient ( ) . prepareSearchScroll ( searchResponse . getScrollId ( ) ) , RestStatus . NOT_FOUND ) ; } public void testStringSortMissingAscTerminates ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addSort ( new FieldSortBuilder ( <str> ) . order ( SortOrder . ASC ) . missing ( <str> ) ) . setScroll ( <str> ) . get ( ) ; assertHitCount ( response , <int> ) ; assertSearchHits ( response , <str> ) ; response = client ( ) . prepareSearchScroll ( response . getScrollId ( ) ) . get ( ) ; assertSearchResponse ( response ) ; assertHitCount ( response , <int> ) ; assertNoSearchHits ( response ) ; response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addSort ( new FieldSortBuilder ( <str> ) . order ( SortOrder . ASC ) . missing ( <str> ) ) . setScroll ( <str> ) . get ( ) ; assertHitCount ( response , <int> ) ; assertSearchHits ( response , <str> ) ; response = client ( ) . prepareSearchScroll ( response . getScrollId ( ) ) . get ( ) ; assertHitCount ( response , <int> ) ; assertThat ( response . getHits ( ) . getHits ( ) . length , equalTo ( <int> ) ) ; } public void testParseSearchScrollRequest ( ) throws Exception { BytesReference content = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; SearchScrollRequest searchScrollRequest = new SearchScrollRequest ( ) ; RestSearchScrollAction . buildFromContent ( content , searchScrollRequest ) ; assertThat ( searchScrollRequest . scrollId ( ) , equalTo ( <str> ) ) ; assertThat ( searchScrollRequest . scroll ( ) . keepAlive ( ) , equalTo ( TimeValue . parseTimeValue ( <str> , null , <str> ) ) ) ; } public void testParseSearchScrollRequestWithInvalidJsonThrowsException ( ) throws Exception { SearchScrollRequest searchScrollRequest = new SearchScrollRequest ( ) ; try { RestSearchScrollAction . buildFromContent ( new BytesArray ( <str> ) , searchScrollRequest ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( e , instanceOf ( IllegalArgumentException . class ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } public void testParseSearchScrollRequestWithUnknownParamThrowsException ( ) throws Exception { SearchScrollRequest searchScrollRequest = new SearchScrollRequest ( ) ; BytesReference invalidContent = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; try { RestSearchScrollAction . buildFromContent ( invalidContent , searchScrollRequest ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( e , instanceOf ( IllegalArgumentException . class ) ) ; assertThat ( e . getMessage ( ) , startsWith ( <str> ) ) ; } } public void testParseClearScrollRequest ( ) throws Exception { BytesReference content = XContentFactory . jsonBuilder ( ) . startObject ( ) . array ( <str> , <str> , <str> ) . endObject ( ) . bytes ( ) ; ClearScrollRequest clearScrollRequest = new ClearScrollRequest ( ) ; RestClearScrollAction . buildFromContent ( content , clearScrollRequest ) ; assertThat ( clearScrollRequest . scrollIds ( ) , contains ( <str> , <str> ) ) ; } public void testParseClearScrollRequestWithInvalidJsonThrowsException ( ) throws Exception { ClearScrollRequest clearScrollRequest = new ClearScrollRequest ( ) ; try { RestClearScrollAction . buildFromContent ( new BytesArray ( <str> ) , clearScrollRequest ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( e , instanceOf ( IllegalArgumentException . class ) ) ; assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } public void testParseClearScrollRequestWithUnknownParamThrowsException ( ) throws Exception { BytesReference invalidContent = XContentFactory . jsonBuilder ( ) . startObject ( ) . array ( <str> , <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; ClearScrollRequest clearScrollRequest = new ClearScrollRequest ( ) ; try { RestClearScrollAction . buildFromContent ( invalidContent , clearScrollRequest ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( e , instanceOf ( IllegalArgumentException . class ) ) ; assertThat ( e . getMessage ( ) , startsWith ( <str> ) ) ; } } public void testCloseAndReopenOrDeleteWithActiveScroll ( ) throws IOException { createIndex ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; } refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setSize ( <int> ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . addSort ( <str> , SortOrder . ASC ) . execute ( ) . actionGet ( ) ; long counter = <int> ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( ( ( Number ) hit . sortValues ( ) [ <int> ] ) . longValue ( ) , equalTo ( counter + + ) ) ; } if ( randomBoolean ( ) ) { client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) . get ( ) ; ensureGreen ( <str> ) ; } else { client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ; } } private void assertToXContentResponse ( ClearScrollResponse response , boolean succeed , int numFreed ) throws IOException { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; response . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; builder . endObject ( ) ; BytesReference bytesReference = builder . bytes ( ) ; Map < String , Object > map ; try ( XContentParser parser = XContentFactory . xContent ( bytesReference ) . createParser ( bytesReference ) ) { map = parser . map ( ) ; } assertThat ( map . get ( <str> ) , is ( succeed ) ) ; assertThat ( map . get ( <str> ) , equalTo ( numFreed ) ) ; } } 

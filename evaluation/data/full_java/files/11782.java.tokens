package org . gradle . api . tasks ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . copy . * ; import org . gradle . internal . reflect . Instantiator ; import java . io . File ; public class Sync extends AbstractCopyTask { @Override protected CopyAction createCopyAction ( ) { File destinationDir = getDestinationDir ( ) ; if ( destinationDir = = null ) { throw new InvalidUserDataException ( <str> ) ; } return new SyncCopyActionDecorator ( destinationDir , new FileCopyAction ( getFileLookup ( ) . getFileResolver ( destinationDir ) ) ) ; } @Override protected CopySpecInternal createRootSpec ( ) { Instantiator instantiator = getInstantiator ( ) ; FileResolver fileResolver = getFileResolver ( ) ; return instantiator . newInstance ( DestinationRootCopySpec . class , fileResolver , super . createRootSpec ( ) ) ; } @Override public DestinationRootCopySpec getRootSpec ( ) { return ( DestinationRootCopySpec ) super . getRootSpec ( ) ; } @OutputDirectory public File getDestinationDir ( ) { return getRootSpec ( ) . getDestinationDir ( ) ; } public void setDestinationDir ( File destinationDir ) { into ( destinationDir ) ; } } 

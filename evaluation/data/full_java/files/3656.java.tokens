package org . eclipse . debug . core . sourcelookup . containers ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; import org . eclipse . debug . internal . core . sourcelookup . SourceLookupMessages ; public class WorkspaceSourceContainer extends CompositeSourceContainer { public static final String TYPE_ID = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public WorkspaceSourceContainer ( ) { } @Override public String getName ( ) { return SourceLookupMessages . WorkspaceSourceContainer_0 ; } @Override public boolean equals ( Object obj ) { return obj instanceof WorkspaceSourceContainer ; } @Override public int hashCode ( ) { return ResourcesPlugin . getWorkspace ( ) . hashCode ( ) ; } @Override public ISourceContainerType getType ( ) { return getSourceContainerType ( TYPE_ID ) ; } @Override protected ISourceContainer [ ] createSourceContainers ( ) throws CoreException { IProject [ ] projects = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getProjects ( ) ; ISourceContainer [ ] containers = new ISourceContainer [ projects . length ] ; for ( int i = <int> ; i < projects . length ; i + + ) { ISourceContainer container = new ProjectSourceContainer ( projects [ i ] , false ) ; container . init ( getDirector ( ) ) ; containers [ i ] = container ; } return containers ; } } 

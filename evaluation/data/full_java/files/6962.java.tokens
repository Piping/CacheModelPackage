package org . elasticsearch . rest . action . admin . cluster . node . stats ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsRequest ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsResponse ; import org . elasticsearch . action . admin . indices . stats . CommonStatsFlags ; import org . elasticsearch . action . admin . indices . stats . CommonStatsFlags . Flag ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestToXContentListener ; import java . util . Set ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestNodesStatsAction extends BaseRestHandler { @Inject public RestNodesStatsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { String [ ] nodesIds = Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ; Set < String > metrics = Strings . splitStringByCommaToSet ( request . param ( <str> , <str> ) ) ; NodesStatsRequest nodesStatsRequest = new NodesStatsRequest ( nodesIds ) ; nodesStatsRequest . timeout ( request . param ( <str> ) ) ; if ( metrics . size ( ) = = <int> & & metrics . contains ( <str> ) ) { nodesStatsRequest . all ( ) ; nodesStatsRequest . indices ( CommonStatsFlags . ALL ) ; } else { nodesStatsRequest . clear ( ) ; nodesStatsRequest . os ( metrics . contains ( <str> ) ) ; nodesStatsRequest . jvm ( metrics . contains ( <str> ) ) ; nodesStatsRequest . threadPool ( metrics . contains ( <str> ) ) ; nodesStatsRequest . fs ( metrics . contains ( <str> ) ) ; nodesStatsRequest . transport ( metrics . contains ( <str> ) ) ; nodesStatsRequest . http ( metrics . contains ( <str> ) ) ; nodesStatsRequest . indices ( metrics . contains ( <str> ) ) ; nodesStatsRequest . process ( metrics . contains ( <str> ) ) ; nodesStatsRequest . breaker ( metrics . contains ( <str> ) ) ; nodesStatsRequest . script ( metrics . contains ( <str> ) ) ; nodesStatsRequest . discovery ( metrics . contains ( <str> ) ) ; if ( metrics . contains ( <str> ) ) { Set < String > indexMetrics = Strings . splitStringByCommaToSet ( request . param ( <str> , <str> ) ) ; if ( indexMetrics . size ( ) = = <int> & & indexMetrics . contains ( <str> ) ) { nodesStatsRequest . indices ( CommonStatsFlags . ALL ) ; } else { CommonStatsFlags flags = new CommonStatsFlags ( ) ; for ( Flag flag : CommonStatsFlags . Flag . values ( ) ) { flags . set ( flag , indexMetrics . contains ( flag . getRestName ( ) ) ) ; } nodesStatsRequest . indices ( flags ) ; } } } if ( nodesStatsRequest . indices ( ) . isSet ( Flag . FieldData ) & & ( request . hasParam ( <str> ) | | request . hasParam ( <str> ) ) ) { nodesStatsRequest . indices ( ) . fieldDataFields ( request . paramAsStringArray ( <str> , request . paramAsStringArray ( <str> , null ) ) ) ; } if ( nodesStatsRequest . indices ( ) . isSet ( Flag . Completion ) & & ( request . hasParam ( <str> ) | | request . hasParam ( <str> ) ) ) { nodesStatsRequest . indices ( ) . completionDataFields ( request . paramAsStringArray ( <str> , request . paramAsStringArray ( <str> , null ) ) ) ; } if ( nodesStatsRequest . indices ( ) . isSet ( Flag . Search ) & & ( request . hasParam ( <str> ) ) ) { nodesStatsRequest . indices ( ) . groups ( request . paramAsStringArray ( <str> , null ) ) ; } if ( nodesStatsRequest . indices ( ) . isSet ( Flag . Indexing ) & & ( request . hasParam ( <str> ) ) ) { nodesStatsRequest . indices ( ) . types ( request . paramAsStringArray ( <str> , null ) ) ; } client . admin ( ) . cluster ( ) . nodesStats ( nodesStatsRequest , new RestToXContentListener < NodesStatsResponse > ( channel ) ) ; } } 

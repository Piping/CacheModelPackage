package org . gradle . platform . base . internal . registry ; import com . google . common . collect . ImmutableList ; import org . gradle . api . Action ; import org . gradle . language . base . plugins . ComponentModelBasePlugin ; import org . gradle . model . internal . core . * ; import org . gradle . model . internal . inspect . MethodRuleDefinition ; import org . gradle . model . internal . manage . schema . ModelSchema ; import org . gradle . model . internal . manage . schema . ModelSchemaStore ; import org . gradle . model . internal . type . ModelType ; import org . gradle . platform . base . BinarySpec ; import org . gradle . platform . base . BinaryType ; import org . gradle . platform . base . BinaryTypeBuilder ; import org . gradle . platform . base . binary . BaseBinarySpec ; import org . gradle . platform . base . binary . internal . BinarySpecFactory ; import org . gradle . platform . base . internal . builder . TypeBuilderFactory ; import org . gradle . platform . base . internal . builder . TypeBuilderInternal ; public class BinaryTypeModelRuleExtractor extends TypeModelRuleExtractor < BinaryType , BinarySpec , BaseBinarySpec > { public BinaryTypeModelRuleExtractor ( ModelSchemaStore schemaStore ) { super ( <str> , BinarySpec . class , BaseBinarySpec . class , BinaryTypeBuilder . class , schemaStore , new TypeBuilderFactory < BinarySpec > ( ) { @Override public TypeBuilderInternal < BinarySpec > create ( ModelSchema < ? extends BinarySpec > schema ) { return new DefaultBinaryTypeBuilder ( schema ) ; } } ) ; } @Override protected < P extends BinarySpec , I extends BaseBinarySpec > ExtractedModelRule createRegistration ( final MethodRuleDefinition < ? , ? > ruleDefinition , final ModelType < P > publicModelType , final ModelType < I > implModelType , final TypeBuilderInternal < BinarySpec > builder ) { ModelAction < BinarySpecFactory > regAction = NoInputsModelAction . of ( ModelReference . of ( BinarySpecFactory . class ) , ruleDefinition . getDescriptor ( ) , new Action < BinarySpecFactory > ( ) { @Override public void execute ( BinarySpecFactory binaries ) { binaries . register ( publicModelType , implModelType , builder . getInternalViews ( ) , ruleDefinition . getDescriptor ( ) ) ; } } ) ; return new ExtractedModelAction ( ModelActionRole . Defaults , ImmutableList . < Class < ? > > of ( ComponentModelBasePlugin . class ) , regAction ) ; } private static class DefaultBinaryTypeBuilder extends AbstractTypeBuilder < BinarySpec > implements BinaryTypeBuilder < BinarySpec > { private DefaultBinaryTypeBuilder ( ModelSchema < ? extends BinarySpec > schema ) { super ( BinaryType . class , schema ) ; } } } 

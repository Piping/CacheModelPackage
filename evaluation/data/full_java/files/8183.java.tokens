package org . elasticsearch . index . mapper . index ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . index . mapper . internal . IndexFieldMapper ; import org . elasticsearch . test . ESSingleNodeTestCase ; import static org . hamcrest . Matchers . * ; public class IndexTypeMapperTests extends ESSingleNodeTestCase { private Settings bwcSettings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2 . id ) . build ( ) ; public void testSimpleIndexMapperEnabledBackcompat ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> , bwcSettings ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; IndexFieldMapper indexMapper = docMapper . indexMapper ( ) ; assertThat ( indexMapper . enabled ( ) , equalTo ( true ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testExplicitDisabledIndexMapperBackcompat ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> , bwcSettings ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; IndexFieldMapper indexMapper = docMapper . metadataMapper ( IndexFieldMapper . class ) ; assertThat ( indexMapper . enabled ( ) , equalTo ( false ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testDefaultDisabledIndexMapper ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; IndexFieldMapper indexMapper = docMapper . metadataMapper ( IndexFieldMapper . class ) ; assertThat ( indexMapper . enabled ( ) , equalTo ( false ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testThatMergingFieldMappingAllowsDisablingBackcompat ( ) throws Exception { String mappingWithIndexEnabled = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapperParser parser = createIndex ( <str> , bwcSettings ) . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper mapperEnabled = parser . parse ( mappingWithIndexEnabled ) ; String mappingWithIndexDisabled = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapperDisabled = parser . parse ( mappingWithIndexDisabled ) ; mapperEnabled . merge ( mapperDisabled . mapping ( ) , false , false ) ; assertThat ( mapperEnabled . IndexFieldMapper ( ) . enabled ( ) , is ( false ) ) ; } public void testThatDisablingWorksWhenMergingBackcompat ( ) throws Exception { String enabledMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapperParser parser = createIndex ( <str> , bwcSettings ) . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper enabledMapper = parser . parse ( enabledMapping ) ; String disabledMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper disabledMapper = parser . parse ( disabledMapping ) ; enabledMapper . merge ( disabledMapper . mapping ( ) , false , false ) ; assertThat ( enabledMapper . indexMapper ( ) . enabled ( ) , is ( false ) ) ; } public void testCustomSettingsBackcompat ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> , bwcSettings ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; IndexFieldMapper indexMapper = docMapper . metadataMapper ( IndexFieldMapper . class ) ; assertThat ( indexMapper . enabled ( ) , equalTo ( true ) ) ; assertThat ( indexMapper . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . rootDoc ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } } 

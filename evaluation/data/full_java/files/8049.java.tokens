package org . elasticsearch . gateway ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . env . NodeEnvironment ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class MetaStateServiceTests extends ESTestCase { private static Settings indexSettings = Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; public void testWriteLoadIndex ( ) throws Exception { try ( NodeEnvironment env = newNodeEnvironment ( ) ) { MetaStateService metaStateService = new MetaStateService ( randomSettings ( ) , env ) ; IndexMetaData index = IndexMetaData . builder ( <str> ) . settings ( indexSettings ) . build ( ) ; metaStateService . writeIndex ( <str> , index , null ) ; assertThat ( metaStateService . loadIndexState ( <str> ) , equalTo ( index ) ) ; } } public void testLoadMissingIndex ( ) throws Exception { try ( NodeEnvironment env = newNodeEnvironment ( ) ) { MetaStateService metaStateService = new MetaStateService ( randomSettings ( ) , env ) ; assertThat ( metaStateService . loadIndexState ( <str> ) , nullValue ( ) ) ; } } public void testWriteLoadGlobal ( ) throws Exception { try ( NodeEnvironment env = newNodeEnvironment ( ) ) { MetaStateService metaStateService = new MetaStateService ( randomSettings ( ) , env ) ; MetaData metaData = MetaData . builder ( ) . persistentSettings ( Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ) . build ( ) ; metaStateService . writeGlobalState ( <str> , metaData ) ; assertThat ( metaStateService . loadGlobalState ( ) . persistentSettings ( ) , equalTo ( metaData . persistentSettings ( ) ) ) ; } } public void testWriteGlobalStateWithIndexAndNoIndexIsLoaded ( ) throws Exception { try ( NodeEnvironment env = newNodeEnvironment ( ) ) { MetaStateService metaStateService = new MetaStateService ( randomSettings ( ) , env ) ; MetaData metaData = MetaData . builder ( ) . persistentSettings ( Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ) . build ( ) ; IndexMetaData index = IndexMetaData . builder ( <str> ) . settings ( indexSettings ) . build ( ) ; MetaData metaDataWithIndex = MetaData . builder ( metaData ) . put ( index , true ) . build ( ) ; metaStateService . writeGlobalState ( <str> , metaDataWithIndex ) ; assertThat ( metaStateService . loadGlobalState ( ) . persistentSettings ( ) , equalTo ( metaData . persistentSettings ( ) ) ) ; assertThat ( metaStateService . loadGlobalState ( ) . hasIndex ( <str> ) , equalTo ( false ) ) ; } } public void testLoadGlobal ( ) throws Exception { try ( NodeEnvironment env = newNodeEnvironment ( ) ) { MetaStateService metaStateService = new MetaStateService ( randomSettings ( ) , env ) ; IndexMetaData index = IndexMetaData . builder ( <str> ) . settings ( indexSettings ) . build ( ) ; MetaData metaData = MetaData . builder ( ) . persistentSettings ( Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ) . put ( index , true ) . build ( ) ; metaStateService . writeGlobalState ( <str> , metaData ) ; metaStateService . writeIndex ( <str> , index , null ) ; MetaData loadedState = metaStateService . loadFullState ( ) ; assertThat ( loadedState . persistentSettings ( ) , equalTo ( metaData . persistentSettings ( ) ) ) ; assertThat ( loadedState . hasIndex ( <str> ) , equalTo ( true ) ) ; assertThat ( loadedState . index ( <str> ) , equalTo ( index ) ) ; } } private Settings randomSettings ( ) { Settings . Builder builder = Settings . builder ( ) ; if ( randomBoolean ( ) ) { builder . put ( MetaStateService . FORMAT_SETTING , randomFrom ( XContentType . values ( ) ) . shortName ( ) ) ; } return builder . build ( ) ; } } 

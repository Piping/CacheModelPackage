package org . apache . cassandra . metrics ; import java . util . concurrent . atomic . AtomicLong ; import com . codahale . metrics . Gauge ; import com . codahale . metrics . Meter ; import com . codahale . metrics . RatioGauge ; import org . apache . cassandra . cache . ICache ; import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; public class CacheMetrics { public final Gauge < Long > capacity ; public final Meter hits ; public final Meter requests ; public final Gauge < Double > hitRate ; public final Gauge < Double > oneMinuteHitRate ; public final Gauge < Double > fiveMinuteHitRate ; public final Gauge < Double > fifteenMinuteHitRate ; public final Gauge < Long > size ; public final Gauge < Integer > entries ; public CacheMetrics ( String type , final ICache cache ) { MetricNameFactory factory = new DefaultNameFactory ( <str> , type ) ; capacity = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Long > ( ) { public Long getValue ( ) { return cache . capacity ( ) ; } } ) ; hits = Metrics . meter ( factory . createMetricName ( <str> ) ) ; requests = Metrics . meter ( factory . createMetricName ( <str> ) ) ; hitRate = Metrics . register ( factory . createMetricName ( <str> ) , new RatioGauge ( ) { @Override public Ratio getRatio ( ) { return Ratio . of ( hits . getCount ( ) , requests . getCount ( ) ) ; } } ) ; oneMinuteHitRate = Metrics . register ( factory . createMetricName ( <str> ) , new RatioGauge ( ) { protected Ratio getRatio ( ) { return Ratio . of ( hits . getOneMinuteRate ( ) , requests . getOneMinuteRate ( ) ) ; } } ) ; fiveMinuteHitRate = Metrics . register ( factory . createMetricName ( <str> ) , new RatioGauge ( ) { protected Ratio getRatio ( ) { return Ratio . of ( hits . getFiveMinuteRate ( ) , requests . getFiveMinuteRate ( ) ) ; } } ) ; fifteenMinuteHitRate = Metrics . register ( factory . createMetricName ( <str> ) , new RatioGauge ( ) { protected Ratio getRatio ( ) { return Ratio . of ( hits . getFifteenMinuteRate ( ) , requests . getFifteenMinuteRate ( ) ) ; } } ) ; size = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Long > ( ) { public Long getValue ( ) { return cache . weightedSize ( ) ; } } ) ; entries = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Integer > ( ) { public Integer getValue ( ) { return cache . size ( ) ; } } ) ; } } 

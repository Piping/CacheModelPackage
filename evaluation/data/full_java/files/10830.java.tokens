package org . gradle . internal . concurrent ; import java . util . Set ; import java . util . concurrent . CopyOnWriteArraySet ; import java . util . concurrent . ExecutorService ; import java . util . concurrent . Executors ; import java . util . concurrent . TimeUnit ; public class DefaultExecutorFactory implements ExecutorFactory , Stoppable { private final Set < StoppableExecutor > executors = new CopyOnWriteArraySet < StoppableExecutor > ( ) ; public void stop ( ) { try { CompositeStoppable . stoppable ( executors ) . stop ( ) ; } finally { executors . clear ( ) ; } } public StoppableExecutor create ( String displayName ) { StoppableExecutor executor = new TrackedStoppableExecutor ( createExecutor ( displayName ) , new ExecutorPolicy . CatchAndRecordFailures ( ) ) ; executors . add ( executor ) ; return executor ; } protected ExecutorService createExecutor ( String displayName ) { return Executors . newCachedThreadPool ( new ThreadFactoryImpl ( displayName ) ) ; } public StoppableExecutor create ( String displayName , int fixedSize ) { StoppableExecutor executor = new TrackedStoppableExecutor ( createExecutor ( displayName , fixedSize ) , new ExecutorPolicy . PropagateFailures ( ) ) ; executors . add ( executor ) ; return executor ; } protected ExecutorService createExecutor ( String displayName , int fixedSize ) { return Executors . newFixedThreadPool ( fixedSize , new ThreadFactoryImpl ( displayName ) ) ; } private class TrackedStoppableExecutor extends StoppableExecutorImpl { public TrackedStoppableExecutor ( ExecutorService executor , ExecutorPolicy executorPolicy ) { super ( executor , executorPolicy ) ; } public void stop ( int timeoutValue , TimeUnit timeoutUnits ) throws IllegalStateException { try { super . stop ( timeoutValue , timeoutUnits ) ; } finally { executors . remove ( this ) ; } } } } 

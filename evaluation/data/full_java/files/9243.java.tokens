package com . google . common . collect ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Equivalence ; import com . google . common . base . Function ; import com . google . common . base . MoreObjects ; import com . google . common . collect . MapMaker . RemovalListener ; import com . google . common . collect . MapMaker . RemovalNotification ; import java . util . concurrent . ConcurrentMap ; import java . util . concurrent . TimeUnit ; @Beta @Deprecated @GwtCompatible ( emulated = true ) abstract class GenericMapMaker < K0 , V0 > { @GwtIncompatible ( <str> ) enum NullListener implements RemovalListener < Object , Object > { INSTANCE ; @Override public void onRemoval ( RemovalNotification < Object , Object > notification ) { } } @GwtIncompatible ( <str> ) RemovalListener < K0 , V0 > removalListener ; GenericMapMaker ( ) { } @GwtIncompatible ( <str> ) abstract GenericMapMaker < K0 , V0 > keyEquivalence ( Equivalence < Object > equivalence ) ; public abstract GenericMapMaker < K0 , V0 > initialCapacity ( int initialCapacity ) ; abstract GenericMapMaker < K0 , V0 > maximumSize ( int maximumSize ) ; public abstract GenericMapMaker < K0 , V0 > concurrencyLevel ( int concurrencyLevel ) ; @GwtIncompatible ( <str> ) public abstract GenericMapMaker < K0 , V0 > weakKeys ( ) ; @GwtIncompatible ( <str> ) public abstract GenericMapMaker < K0 , V0 > weakValues ( ) ; @Deprecated @GwtIncompatible ( <str> ) abstract GenericMapMaker < K0 , V0 > softValues ( ) ; abstract GenericMapMaker < K0 , V0 > expireAfterWrite ( long duration , TimeUnit unit ) ; @GwtIncompatible ( <str> ) abstract GenericMapMaker < K0 , V0 > expireAfterAccess ( long duration , TimeUnit unit ) ; @SuppressWarnings ( <str> ) @GwtIncompatible ( <str> ) < K extends K0 , V extends V0 > RemovalListener < K , V > getRemovalListener ( ) { return ( RemovalListener < K , V > ) MoreObjects . firstNonNull ( removalListener , NullListener . INSTANCE ) ; } public abstract < K extends K0 , V extends V0 > ConcurrentMap < K , V > makeMap ( ) ; @GwtIncompatible ( <str> ) abstract < K , V > MapMakerInternalMap < K , V > makeCustomMap ( ) ; @Deprecated abstract < K extends K0 , V extends V0 > ConcurrentMap < K , V > makeComputingMap ( Function < ? super K , ? extends V > computingFunction ) ; } 

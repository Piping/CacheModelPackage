package com . google . common . collect ; import com . google . common . collect . testing . SetTestSuiteBuilder ; import com . google . common . collect . testing . TestStringSetGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . MultisetTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringMultisetGenerator ; import junit . framework . Test ; import junit . framework . TestSuite ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . Set ; public class ForwardingMultisetTest extends ForwardingTestCase { static final class StandardImplForwardingMultiset < T > extends ForwardingMultiset < T > { private final Multiset < T > backingCollection ; StandardImplForwardingMultiset ( Multiset < T > backingMultiset ) { this . backingCollection = backingMultiset ; } @Override protected Multiset < T > delegate ( ) { return backingCollection ; } @Override public boolean addAll ( Collection < ? extends T > collection ) { return standardAddAll ( collection ) ; } @Override public boolean add ( T element ) { return standardAdd ( element ) ; } @Override public void clear ( ) { standardClear ( ) ; } @Override public int count ( Object element ) { return standardCount ( element ) ; } @Override public boolean contains ( Object object ) { return standardContains ( object ) ; } @Override public boolean containsAll ( Collection < ? > collection ) { return standardContainsAll ( collection ) ; } @Override public boolean remove ( Object object ) { return standardRemove ( object ) ; } @Override public boolean removeAll ( Collection < ? > collection ) { return standardRemoveAll ( collection ) ; } @Override public boolean retainAll ( Collection < ? > collection ) { return standardRetainAll ( collection ) ; } @Override public Object [ ] toArray ( ) { return standardToArray ( ) ; } @Override public < T > T [ ] toArray ( T [ ] array ) { return standardToArray ( array ) ; } @Override public String toString ( ) { return standardToString ( ) ; } @Override public boolean equals ( Object object ) { return standardEquals ( object ) ; } @Override public int hashCode ( ) { return standardHashCode ( ) ; } @Override public boolean setCount ( T element , int oldCount , int newCount ) { return standardSetCount ( element , oldCount , newCount ) ; } @Override public int setCount ( T element , int count ) { return standardSetCount ( element , count ) ; } @Override public Set < T > elementSet ( ) { return new StandardElementSet ( ) ; } @Override public Iterator < T > iterator ( ) { return standardIterator ( ) ; } @Override public boolean isEmpty ( ) { return standardIsEmpty ( ) ; } @Override public int size ( ) { return standardSize ( ) ; } } private static final Collection < String > EMPTY_COLLECTION = Collections . emptyList ( ) ; protected Multiset < String > forward ; public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( ForwardingMultisetTest . class ) ; suite . addTest ( MultisetTestSuiteBuilder . using ( new TestStringMultisetGenerator ( ) { @Override protected Multiset < String > create ( String [ ] elements ) { return new StandardImplForwardingMultiset < String > ( LinkedHashMultiset . create ( Arrays . asList ( elements ) ) ) ; } } ) . named ( <str> + <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . GENERAL_PURPOSE ) . createTestSuite ( ) ) ; suite . addTest ( MultisetTestSuiteBuilder . using ( new TestStringMultisetGenerator ( ) { @Override protected Multiset < String > create ( String [ ] elements ) { return new StandardImplForwardingMultiset < String > ( ImmutableMultiset . copyOf ( elements ) ) ; } } ) . named ( <str> + <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTest ( SetTestSuiteBuilder . using ( new TestStringSetGenerator ( ) { @Override protected Set < String > create ( String [ ] elements ) { final Multiset < String > inner = LinkedHashMultiset . create ( Arrays . asList ( elements ) ) ; return new ForwardingMultiset < String > ( ) { @Override protected Multiset < String > delegate ( ) { return inner ; } @Override public Set < String > elementSet ( ) { return new StandardElementSet ( ) ; } @Override public int add ( String element , int occurrences ) { throw new UnsupportedOperationException ( ) ; } @Override public Set < Entry < String > > entrySet ( ) { final Set < Entry < String > > backingSet = super . entrySet ( ) ; return new ForwardingSet < Entry < String > > ( ) { @Override protected Set < Entry < String > > delegate ( ) { return backingSet ; } @Override public boolean add ( Entry < String > element ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean addAll ( Collection < ? extends Entry < String > > collection ) { throw new UnsupportedOperationException ( ) ; } @Override public void clear ( ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean contains ( Object object ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean containsAll ( Collection < ? > collection ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean isEmpty ( ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean remove ( Object object ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean removeAll ( Collection < ? > collection ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean retainAll ( Collection < ? > collection ) { throw new UnsupportedOperationException ( ) ; } } ; } @Override public boolean equals ( Object object ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean remove ( Object element ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean setCount ( String element , int oldCount , int newCount ) { throw new UnsupportedOperationException ( ) ; } @Override public int setCount ( String element , int count ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean add ( String element ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean addAll ( Collection < ? extends String > collection ) { throw new UnsupportedOperationException ( ) ; } @Override public Iterator < String > iterator ( ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean removeAll ( Collection < ? > collection ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean retainAll ( Collection < ? > collection ) { throw new UnsupportedOperationException ( ) ; } @Override public int size ( ) { throw new UnsupportedOperationException ( ) ; } } . elementSet ( ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . REMOVE_OPERATIONS ) . createTestSuite ( ) ) ; return suite ; } @Override public void setUp ( ) throws Exception { super . setUp ( ) ; @SuppressWarnings ( <str> ) final Multiset < String > multiset = createProxyInstance ( Multiset . class ) ; forward = new ForwardingMultiset < String > ( ) { @Override protected Multiset < String > delegate ( ) { return multiset ; } } ; } public void testAdd_T ( ) { forward ( ) . add ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAddAll_Collection ( ) { forward ( ) . addAll ( EMPTY_COLLECTION ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testClear ( ) { forward ( ) . clear ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContains_Object ( ) { forward ( ) . contains ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsAll_Collection ( ) { forward ( ) . containsAll ( EMPTY_COLLECTION ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIsEmpty ( ) { forward ( ) . isEmpty ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIterator ( ) { forward ( ) . iterator ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove_Object ( ) { forward ( ) . remove ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveAll_Collection ( ) { forward ( ) . removeAll ( EMPTY_COLLECTION ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRetainAll_Collection ( ) { forward ( ) . retainAll ( EMPTY_COLLECTION ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSize ( ) { forward ( ) . size ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray ( ) { forward ( ) . toArray ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToArray_TArray ( ) { forward ( ) . toArray ( new String [ <int> ] ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToString ( ) { forward ( ) . toString ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testEquals_Object ( ) { forward ( ) . equals ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testHashCode ( ) { forward ( ) . hashCode ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testCount_Object ( ) { forward ( ) . count ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAdd_Object_int ( ) { forward ( ) . add ( <str> , <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove_Object_int ( ) { forward ( ) . remove ( <str> , <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSetCount_Object_int ( ) { forward ( ) . setCount ( <str> , <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSetCount_Object_oldCount_newCount ( ) { forward ( ) . setCount ( <str> , <int> , <int> ) ; assertEquals ( <str> , getCalls ( ) ) ; } @AndroidIncompatible public void testElementSet ( ) { forward ( ) . elementSet ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testEntrySet ( ) { forward ( ) . entrySet ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } protected Multiset < String > forward ( ) { return forward ; } } 

package org . gradle ; import java . io . File ; import java . io . PrintStream ; import java . net . MalformedURLException ; import java . net . URL ; import java . net . URLClassLoader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . logging . Logger ; import java . util . regex . Pattern ; import static org . junit . Assert . * ; public class OkTest { @org.junit.Test public void ok ( ) throws Exception { assertEquals ( <str> , new org . junit . runner . JUnitCore ( ) . getVersion ( ) ) ; assertTrue ( org . apache . tools . ant . Main . getAntVersion ( ) . contains ( <str> ) ) ; assertEquals ( System . getProperty ( <str> ) , System . getProperty ( <str> ) ) ; assertEquals ( <str> , System . getProperty ( <str> ) ) ; assertEquals ( <str> , System . getenv ( <str> ) ) ; assertSame ( ClassLoader . getSystemClassLoader ( ) , getClass ( ) . getClassLoader ( ) ) ; assertSame ( getClass ( ) . getClassLoader ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; assertEquals ( System . getProperty ( <str> ) , System . getProperty ( <str> ) ) ; List < URL > expectedClassPath = buildExpectedClassPath ( System . getProperty ( <str> ) ) ; List < URL > actualClassPath = buildActualClassPath ( ) ; assertEquals ( expectedClassPath , actualClassPath ) ; try { getClass ( ) . getClassLoader ( ) . loadClass ( <str> ) ; fail ( ) ; } catch ( ClassNotFoundException e ) { } try { getClass ( ) . getClassLoader ( ) . loadClass ( <str> ) ; fail ( ) ; } catch ( ClassNotFoundException e ) { } assertEquals ( <str> , Thread . currentThread ( ) . getName ( ) ) ; assertNull ( System . getSecurityManager ( ) ) ; final PrintStream out = System . out ; Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { @Override public void run ( ) { out . println ( <str> ) ; Logger . getLogger ( <str> ) . info ( <str> ) ; } } ) ; } private List < URL > buildActualClassPath ( ) { List < URL > urls = Arrays . asList ( ( ( URLClassLoader ) ClassLoader . getSystemClassLoader ( ) ) . getURLs ( ) ) ; return urls . subList ( <int> , urls . size ( ) ) ; } private List < URL > buildExpectedClassPath ( String expectedClassPath ) throws MalformedURLException { String [ ] paths = expectedClassPath . split ( Pattern . quote ( File . pathSeparator ) ) ; List < URL > urls = new ArrayList < URL > ( ) ; for ( String path : paths ) { urls . add ( new File ( path ) . toURI ( ) . toURL ( ) ) ; } return urls ; } @org.junit.Test public void anotherOk ( ) { } } 

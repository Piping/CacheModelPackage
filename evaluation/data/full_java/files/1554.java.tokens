package org . apache . cassandra . io . sstable ; import java . io . File ; import java . io . FilenameFilter ; import java . io . IOException ; import com . google . common . io . Files ; import org . junit . After ; import org . junit . AfterClass ; import org . junit . Before ; import org . junit . Test ; import org . apache . cassandra . config . Config ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . db . Directories ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . io . util . FileUtils ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class CQLSSTableWriterClientTest { private File testDirectory ; @Before public void setUp ( ) { this . testDirectory = Files . createTempDir ( ) ; Config . setClientMode ( true ) ; } @After public void tearDown ( ) { FileUtils . deleteRecursive ( this . testDirectory ) ; } @AfterClass public static void cleanup ( ) throws Exception { Config . setClientMode ( false ) ; } @Test public void testWriterInClientMode ( ) throws IOException , InvalidRequestException { final String TABLE1 = <str> ; final String TABLE2 = <str> ; String schema = <str> + <str> + <str> + <str> + <str> ; String insert = <str> ; CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) . inDirectory ( this . testDirectory ) . forTable ( String . format ( schema , TABLE1 ) ) . using ( String . format ( insert , TABLE1 ) ) . build ( ) ; CQLSSTableWriter writer2 = CQLSSTableWriter . builder ( ) . inDirectory ( this . testDirectory ) . forTable ( String . format ( schema , TABLE2 ) ) . using ( String . format ( insert , TABLE2 ) ) . build ( ) ; writer . addRow ( <int> , <str> , <int> ) ; writer2 . addRow ( <int> , <str> , <int> ) ; writer . addRow ( <int> , <str> , <int> ) ; writer2 . addRow ( <int> , <str> , <int> ) ; writer . close ( ) ; writer2 . close ( ) ; FilenameFilter filter = new FilenameFilter ( ) { @Override public boolean accept ( File dir , String name ) { return name . endsWith ( <str> ) ; } } ; File [ ] dataFiles = this . testDirectory . listFiles ( filter ) ; assertEquals ( <int> , dataFiles . length ) ; } } 

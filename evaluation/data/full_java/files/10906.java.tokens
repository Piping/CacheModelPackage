package org . gradle . util ; import org . gradle . api . GradleException ; import org . gradle . api . UncheckedIOException ; import org . gradle . internal . UncheckedException ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . net . URLConnection ; import java . text . DateFormat ; import java . text . ParseException ; import java . text . SimpleDateFormat ; import java . util . Date ; import java . util . Properties ; import java . util . TimeZone ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class GradleVersion implements Comparable < GradleVersion > { public static final String URL = <str> ; private static final Pattern VERSION_PATTERN = Pattern . compile ( <str> ) ; private static final int STAGE_MILESTONE = <int> ; private final String version ; private final int majorPart ; private final String buildTime ; private final String commitId ; private final String buildNumber ; private final Long snapshot ; private final String versionPart ; private final Stage stage ; private static final GradleVersion CURRENT ; public static final String RESOURCE_NAME = <str> ; static { URL resource = GradleVersion . class . getResource ( RESOURCE_NAME ) ; InputStream inputStream = null ; try { URLConnection connection = resource . openConnection ( ) ; inputStream = connection . getInputStream ( ) ; Properties properties = new Properties ( ) ; properties . load ( inputStream ) ; String version = properties . get ( <str> ) . toString ( ) ; String buildTimestamp = properties . get ( <str> ) . toString ( ) ; String buildNumber = properties . get ( <str> ) . toString ( ) ; String commitId = properties . get ( <str> ) . toString ( ) ; Date buildTime = new SimpleDateFormat ( <str> ) . parse ( buildTimestamp ) ; CURRENT = new GradleVersion ( version , buildTime , buildNumber , commitId ) ; } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , resource ) , e ) ; } finally { if ( inputStream ! = null ) { try { inputStream . close ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } } public static GradleVersion current ( ) { return CURRENT ; } public static GradleVersion version ( String version ) throws IllegalArgumentException { return new GradleVersion ( version , null , null , null ) ; } private GradleVersion ( String version , Date buildTime , String buildNumber , String commitId ) { this . version = version ; this . buildNumber = buildNumber ; this . commitId = commitId ; this . buildTime = buildTime = = null ? null : formatBuildTime ( buildTime ) ; Matcher matcher = VERSION_PATTERN . matcher ( version ) ; if ( ! matcher . matches ( ) ) { throw new IllegalArgumentException ( String . format ( <str> , version ) ) ; } versionPart = matcher . group ( <int> ) ; majorPart = Integer . parseInt ( matcher . group ( <int> ) , <int> ) ; if ( matcher . group ( <int> ) ! = null ) { int stageNumber ; if ( matcher . group ( <int> ) . equals ( <str> ) ) { stageNumber = STAGE_MILESTONE ; } else if ( matcher . group ( <int> ) . equals ( <str> ) ) { stageNumber = <int> ; } else if ( matcher . group ( <int> ) . equals ( <str> ) ) { stageNumber = <int> ; } else { stageNumber = <int> ; } String stageString = matcher . group ( <int> ) ; stage = new Stage ( stageNumber , stageString ) ; } else { stage = null ; } if ( matcher . group ( <int> ) ! = null ) { try { if ( matcher . group ( <int> ) ! = null ) { snapshot = new SimpleDateFormat ( <str> ) . parse ( matcher . group ( <int> ) ) . getTime ( ) ; } else { SimpleDateFormat format = new SimpleDateFormat ( <str> ) ; format . setTimeZone ( TimeZone . getTimeZone ( <str> ) ) ; snapshot = format . parse ( matcher . group ( <int> ) ) . getTime ( ) ; } } catch ( ParseException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } else { snapshot = null ; } } private String formatBuildTime ( Date buildTime ) { DateFormat format = new SimpleDateFormat ( <str> ) ; format . setTimeZone ( TimeZone . getTimeZone ( <str> ) ) ; return format . format ( buildTime ) ; } @Override public String toString ( ) { return String . format ( <str> , version ) ; } public String getVersion ( ) { return version ; } public String getBuildTime ( ) { return buildTime ; } public String getBuildNumber ( ) { return buildNumber ; } public String getRevision ( ) { return commitId ; } public boolean isSnapshot ( ) { return snapshot ! = null ; } public GradleVersion getBaseVersion ( ) { if ( stage = = null & & snapshot = = null ) { return this ; } if ( stage ! = null & & stage . stage = = STAGE_MILESTONE ) { return version ( versionPart + <str> + stage . number ) ; } return version ( versionPart ) ; } public GradleVersion getNextMajor ( ) { if ( stage ! = null & & stage . stage = = STAGE_MILESTONE ) { return version ( majorPart + <str> ) ; } return version ( ( majorPart + <int> ) + <str> ) ; } public int compareTo ( GradleVersion gradleVersion ) { String [ ] majorVersionParts = versionPart . split ( <str> ) ; String [ ] otherMajorVersionParts = gradleVersion . versionPart . split ( <str> ) ; for ( int i = <int> ; i < majorVersionParts . length & & i < otherMajorVersionParts . length ; i + + ) { int part = Integer . parseInt ( majorVersionParts [ i ] ) ; int otherPart = Integer . parseInt ( otherMajorVersionParts [ i ] ) ; if ( part > otherPart ) { return <int> ; } if ( otherPart > part ) { return - <int> ; } } if ( majorVersionParts . length > otherMajorVersionParts . length ) { return <int> ; } if ( majorVersionParts . length < otherMajorVersionParts . length ) { return - <int> ; } if ( stage ! = null & & gradleVersion . stage ! = null ) { int diff = stage . compareTo ( gradleVersion . stage ) ; if ( diff ! = <int> ) { return diff ; } } if ( stage = = null & & gradleVersion . stage ! = null ) { return <int> ; } if ( stage ! = null & & gradleVersion . stage = = null ) { return - <int> ; } if ( snapshot ! = null & & gradleVersion . snapshot ! = null ) { return snapshot . compareTo ( gradleVersion . snapshot ) ; } if ( snapshot = = null & & gradleVersion . snapshot ! = null ) { return <int> ; } if ( snapshot ! = null & & gradleVersion . snapshot = = null ) { return - <int> ; } return <int> ; } @Override public boolean equals ( Object o ) { if ( o = = this ) { return true ; } if ( o = = null | | o . getClass ( ) ! = getClass ( ) ) { return false ; } GradleVersion other = ( GradleVersion ) o ; return version . equals ( other . version ) ; } @Override public int hashCode ( ) { return version . hashCode ( ) ; } public boolean isValid ( ) { return versionPart ! = null ; } static final class Stage implements Comparable < Stage > { final int stage ; final int number ; final Character patchNo ; Stage ( int stage , String number ) { this . stage = stage ; Matcher m = Pattern . compile ( <str> ) . matcher ( number ) ; try { m . matches ( ) ; this . number = Integer . parseInt ( m . group ( <int> ) ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> + number , e ) ; } if ( m . groupCount ( ) = = <int> & & m . group ( <int> ) ! = null ) { this . patchNo = m . group ( <int> ) . charAt ( <int> ) ; } else { this . patchNo = <str> ; } } public int compareTo ( Stage other ) { if ( stage > other . stage ) { return <int> ; } if ( stage < other . stage ) { return - <int> ; } if ( number > other . number ) { return <int> ; } if ( number < other . number ) { return - <int> ; } if ( patchNo > other . patchNo ) { return <int> ; } if ( patchNo < other . patchNo ) { return - <int> ; } return <int> ; } } } 

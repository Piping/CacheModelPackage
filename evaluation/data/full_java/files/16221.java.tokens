package org . gradle . gradleplugin . foundation . favorites ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . foundation . settings . SettingsSerializable ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; class FavoritesSerializable implements SettingsSerializable { private List < FavoriteTask > favorites ; private static final String FAVORITE_ELEMENT_TAG = <str> ; private static final String FULL_COMMAND_LINE = <str> ; private static final String DISPLAY_NAME = <str> ; private static final String SHOW_OUTPUT = <str> ; private static final String ROOT_TAG = <str> ; private static final String FAVORITES_SIZE = <str> ; private static final String FAVORITE_PREFIX = <str> ; public FavoritesSerializable ( List < FavoriteTask > favorites ) { this . favorites = favorites ; } public FavoritesSerializable ( ) { favorites = new ArrayList < FavoriteTask > ( ) ; } public List < FavoriteTask > getFavorites ( ) { return favorites ; } public void serializeOut ( SettingsNode settings ) { serializeOut ( settings , favorites ) ; } public static void serializeOut ( SettingsNode settings , List < FavoriteTask > favorites ) { SettingsNode rootNode = settings . addChildIfNotPresent ( ROOT_TAG ) ; rootNode . removeAllChildren ( ) ; Iterator < FavoriteTask > iterator = favorites . iterator ( ) ; while ( iterator . hasNext ( ) ) { FavoriteTask favoriteTask = iterator . next ( ) ; SettingsNode taskNode = rootNode . addChild ( FAVORITE_ELEMENT_TAG ) ; taskNode . setValueOfChild ( FULL_COMMAND_LINE , favoriteTask . getFullCommandLine ( ) ) ; taskNode . setValueOfChild ( DISPLAY_NAME , favoriteTask . getDisplayName ( ) ) ; taskNode . setValueOfChildAsBoolean ( SHOW_OUTPUT , favoriteTask . alwaysShowOutput ( ) ) ; } } public void serializeIn ( SettingsNode settings ) { serializeIn ( settings , favorites ) ; } public static void serializeIn ( SettingsNode settings , List < FavoriteTask > favorites ) { favorites . clear ( ) ; SettingsNode rootElement = settings . getChildNode ( ROOT_TAG ) ; if ( rootElement = = null ) { return ; } Iterator < SettingsNode > iterator = rootElement . getChildNodes ( FAVORITE_ELEMENT_TAG ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { SettingsNode taskNode = iterator . next ( ) ; String fullCommandLine = taskNode . getValueOfChild ( FULL_COMMAND_LINE , null ) ; if ( fullCommandLine ! = null ) { String displayName = taskNode . getValueOfChild ( DISPLAY_NAME , fullCommandLine ) ; boolean showOutput = taskNode . getValueOfChildAsBoolean ( SHOW_OUTPUT , false ) ; addFavoriteTask ( favorites , fullCommandLine , displayName , showOutput ) ; } } } private static void addFavoriteTask ( List < FavoriteTask > favorites , String fullCommandLine , String displayName , boolean alwaysShowOutput ) { if ( displayName = = null ) { displayName = fullCommandLine ; } favorites . add ( new FavoriteTask ( fullCommandLine , displayName , alwaysShowOutput ) ) ; } } 

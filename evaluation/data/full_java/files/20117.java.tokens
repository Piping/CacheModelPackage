package io . netty . resolver . dns ; import io . netty . util . internal . PlatformDependent ; import java . net . InetSocketAddress ; import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; final class RotationalDnsServerAddresses extends DefaultDnsServerAddresses { private static final AtomicIntegerFieldUpdater < RotationalDnsServerAddresses > startIdxUpdater ; static { AtomicIntegerFieldUpdater < RotationalDnsServerAddresses > updater = PlatformDependent . newAtomicIntegerFieldUpdater ( RotationalDnsServerAddresses . class , <str> ) ; if ( updater = = null ) { updater = AtomicIntegerFieldUpdater . newUpdater ( RotationalDnsServerAddresses . class , <str> ) ; } startIdxUpdater = updater ; } @SuppressWarnings ( <str> ) private volatile int startIdx ; RotationalDnsServerAddresses ( InetSocketAddress [ ] addresses ) { super ( <str> , addresses ) ; } @Override public DnsServerAddressStream stream ( ) { for ( ; ; ) { int curStartIdx = startIdx ; int nextStartIdx = curStartIdx + <int> ; if ( nextStartIdx > = addresses . length ) { nextStartIdx = <int> ; } if ( startIdxUpdater . compareAndSet ( this , curStartIdx , nextStartIdx ) ) { return new SequentialDnsServerAddressStream ( addresses , curStartIdx ) ; } } } } 

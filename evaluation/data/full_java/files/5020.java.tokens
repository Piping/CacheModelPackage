package org . elasticsearch . action . admin . cluster . snapshots . restore ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . SnapshotId ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . snapshots . RestoreInfo ; import org . elasticsearch . snapshots . RestoreService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportRestoreSnapshotAction extends TransportMasterNodeAction < RestoreSnapshotRequest , RestoreSnapshotResponse > { private final RestoreService restoreService ; @Inject public TransportRestoreSnapshotAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , RestoreService restoreService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , RestoreSnapshotAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , RestoreSnapshotRequest : : new ) ; this . restoreService = restoreService ; } @Override protected String executor ( ) { return ThreadPool . Names . SNAPSHOT ; } @Override protected RestoreSnapshotResponse newResponse ( ) { return new RestoreSnapshotResponse ( ) ; } @Override protected ClusterBlockException checkBlock ( RestoreSnapshotRequest request , ClusterState state ) { ClusterBlockException blockException = state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . METADATA_WRITE ) ; if ( blockException ! = null ) { return blockException ; } return state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . WRITE ) ; } @Override protected void masterOperation ( final RestoreSnapshotRequest request , ClusterState state , final ActionListener < RestoreSnapshotResponse > listener ) { RestoreService . RestoreRequest restoreRequest = new RestoreService . RestoreRequest ( <str> + request . snapshot ( ) + <str> , request . repository ( ) , request . snapshot ( ) , request . indices ( ) , request . indicesOptions ( ) , request . renamePattern ( ) , request . renameReplacement ( ) , request . settings ( ) , request . masterNodeTimeout ( ) , request . includeGlobalState ( ) , request . partial ( ) , request . includeAliases ( ) , request . indexSettings ( ) , request . ignoreIndexSettings ( ) ) ; restoreService . restoreSnapshot ( restoreRequest , new ActionListener < RestoreInfo > ( ) { @Override public void onResponse ( RestoreInfo restoreInfo ) { if ( restoreInfo = = null & & request . waitForCompletion ( ) ) { restoreService . addListener ( new ActionListener < RestoreService . RestoreCompletionResponse > ( ) { SnapshotId snapshotId = new SnapshotId ( request . repository ( ) , request . snapshot ( ) ) ; @Override public void onResponse ( RestoreService . RestoreCompletionResponse restoreCompletionResponse ) { if ( this . snapshotId . equals ( restoreCompletionResponse . getSnapshotId ( ) ) ) { listener . onResponse ( new RestoreSnapshotResponse ( restoreCompletionResponse . getRestoreInfo ( ) ) ) ; restoreService . removeListener ( this ) ; } } @Override public void onFailure ( Throwable e ) { listener . onFailure ( e ) ; } } ) ; } else { listener . onResponse ( new RestoreSnapshotResponse ( restoreInfo ) ) ; } } @Override public void onFailure ( Throwable t ) { listener . onFailure ( t ) ; } } ) ; } } 

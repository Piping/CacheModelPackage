package org . gradle . cache . internal ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . invocation . Gradle ; import org . gradle . cache . CacheBuilder ; import org . gradle . util . GradleVersion ; import java . io . File ; public class DefaultCacheScopeMapping implements CacheScopeMapping { private final File globalCacheDir ; private final File buildCacheDir ; private final GradleVersion version ; public DefaultCacheScopeMapping ( File userHomeDir , File buildCacheDir , GradleVersion version ) { this . version = version ; this . globalCacheDir = new File ( userHomeDir , <str> ) ; this . buildCacheDir = buildCacheDir ; } public File getBaseDirectory ( Object scope , String key , CacheBuilder . VersionStrategy versionStrategy ) { if ( key . equalsIgnoreCase ( <str> ) | | key . equalsIgnoreCase ( <str> ) | | ! key . matches ( <str> ) ) { throw new IllegalArgumentException ( String . format ( <str> , key ) ) ; } if ( scope = = null ) { return getCacheDir ( globalCacheDir , versionStrategy , key ) ; } if ( scope instanceof Gradle ) { Gradle gradle = ( Gradle ) scope ; return getCacheDir ( getBuildCacheDir ( gradle . getRootProject ( ) ) , versionStrategy , key ) ; } if ( scope instanceof Project ) { Project project = ( Project ) scope ; return getCacheDir ( getBuildCacheDir ( project . getRootProject ( ) ) , versionStrategy , String . format ( <str> , project . getPath ( ) . replace ( <str> , <str> ) , key ) ) ; } if ( scope instanceof Task ) { Task task = ( Task ) scope ; return getCacheDir ( getBuildCacheDir ( task . getProject ( ) . getRootProject ( ) ) , versionStrategy , String . format ( <str> , task . getPath ( ) . replace ( <str> , <str> ) , key ) ) ; } throw new IllegalArgumentException ( String . format ( <str> , scope . getClass ( ) . getSimpleName ( ) ) ) ; } private File getCacheDir ( File rootDir , CacheBuilder . VersionStrategy versionStrategy , String subDir ) { switch ( versionStrategy ) { case CachePerVersion : return new File ( rootDir , version . getVersion ( ) + <str> + subDir ) ; case SharedCache : return new File ( rootDir , subDir ) ; default : throw new IllegalArgumentException ( ) ; } } private File getBuildCacheDir ( Project rootProject ) { if ( buildCacheDir ! = null ) { return buildCacheDir ; } return new File ( rootProject . getProjectDir ( ) , <str> ) ; } } 

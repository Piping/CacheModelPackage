package com . badlogic . gdx . utils . compression . lz ; import java . io . IOException ; public class OutWindow { byte [ ] _buffer ; int _pos ; int _windowSize = <int> ; int _streamPos ; java . io . OutputStream _stream ; public void Create ( int windowSize ) { if ( _buffer = = null | | _windowSize ! = windowSize ) _buffer = new byte [ windowSize ] ; _windowSize = windowSize ; _pos = <int> ; _streamPos = <int> ; } public void SetStream ( java . io . OutputStream stream ) throws IOException { ReleaseStream ( ) ; _stream = stream ; } public void ReleaseStream ( ) throws IOException { Flush ( ) ; _stream = null ; } public void Init ( boolean solid ) { if ( ! solid ) { _streamPos = <int> ; _pos = <int> ; } } public void Flush ( ) throws IOException { int size = _pos - _streamPos ; if ( size = = <int> ) return ; _stream . write ( _buffer , _streamPos , size ) ; if ( _pos > = _windowSize ) _pos = <int> ; _streamPos = _pos ; } public void CopyBlock ( int distance , int len ) throws IOException { int pos = _pos - distance - <int> ; if ( pos < <int> ) pos + = _windowSize ; for ( ; len ! = <int> ; len - - ) { if ( pos > = _windowSize ) pos = <int> ; _buffer [ _pos + + ] = _buffer [ pos + + ] ; if ( _pos > = _windowSize ) Flush ( ) ; } } public void PutByte ( byte b ) throws IOException { _buffer [ _pos + + ] = b ; if ( _pos > = _windowSize ) Flush ( ) ; } public byte GetByte ( int distance ) { int pos = _pos - distance - <int> ; if ( pos < <int> ) pos + = _windowSize ; return _buffer [ pos ] ; } } 

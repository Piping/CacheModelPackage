package org . apache . cassandra . utils ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . nio . charset . CharacterCodingException ; import java . nio . charset . StandardCharsets ; import com . google . common . primitives . Ints ; import org . junit . Test ; import java . util . Map ; import java . util . TreeMap ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . fail ; public class FBUtilitiesTest { @Test public void testCompareByteSubArrays ( ) { ByteBuffer bytes = ByteBuffer . allocate ( <int> ) ; assert ByteBufferUtil . compareSubArrays ( null , <int> , null , <int> , <int> ) = = <int> ; assert ByteBufferUtil . compareSubArrays ( null , <int> , ByteBufferUtil . bytes ( <int> ) , <int> , <int> ) = = - <int> ; assert ByteBufferUtil . compareSubArrays ( ByteBufferUtil . bytes ( <int> ) , <int> , null , <int> , <int> ) = = <int> ; System . arraycopy ( Ints . toByteArray ( <int> ) , <int> , bytes . array ( ) , <int> , <int> ) ; assert ByteBufferUtil . compareSubArrays ( bytes , <int> , ByteBufferUtil . bytes ( <int> ) , <int> , <int> ) = = <int> ; assert ByteBufferUtil . compareSubArrays ( bytes , <int> , ByteBufferUtil . bytes ( <int> ) , <int> , <int> ) = = - <int> ; assert ByteBufferUtil . compareSubArrays ( bytes , <int> , ByteBufferUtil . bytes ( <int> ) , <int> , <int> ) = = <int> ; try { assert ByteBufferUtil . compareSubArrays ( bytes , <int> , ByteBufferUtil . bytes ( <int> ) , <int> , <int> ) = = <int> ; fail ( <str> ) ; } catch ( AssertionError ae ) { } try { assert ByteBufferUtil . compareSubArrays ( bytes , <int> , ByteBufferUtil . bytes ( <int> ) , <int> , <int> ) = = <int> ; fail ( <str> ) ; } catch ( AssertionError ae ) { } } @Test public void testToString ( ) { assertEquals ( <str> , FBUtilities . toString ( null ) ) ; Map < String , String > map = new TreeMap < > ( ) ; assertEquals ( <str> , FBUtilities . toString ( map ) ) ; map . put ( <str> , <str> ) ; assertEquals ( <str> , FBUtilities . toString ( map ) ) ; map . put ( <str> , <str> ) ; assertEquals ( <str> , FBUtilities . toString ( map ) ) ; } @Test ( expected = CharacterCodingException . class ) public void testDecode ( ) throws IOException { ByteBuffer bytes = ByteBuffer . wrap ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> } ) ; ByteBufferUtil . string ( bytes , StandardCharsets . UTF_8 ) ; } } 

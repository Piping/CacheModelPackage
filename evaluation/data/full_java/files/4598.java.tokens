package org . eclipse . debug . internal . ui . views . memory . renderings ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockExtension ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . viewers . ITableLabelProvider ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . swt . dnd . Clipboard ; import org . eclipse . swt . dnd . TextTransfer ; import org . eclipse . swt . dnd . Transfer ; import org . eclipse . swt . widgets . Table ; import org . eclipse . swt . widgets . TableColumn ; import org . eclipse . swt . widgets . TableItem ; import org . eclipse . ui . PlatformUI ; public class CopyTableRenderingToClipboardAction extends Action { private final String COLUMN_SEPERATOR = <str> ; protected AbstractBaseTableRendering fRendering ; protected StructuredViewer fViewer ; public CopyTableRenderingToClipboardAction ( AbstractBaseTableRendering rendering , StructuredViewer viewer ) { super ( ) ; fRendering = rendering ; fViewer = viewer ; setText ( DebugUIMessages . CopyViewToClipboardAction_title ) ; setToolTipText ( DebugUIMessages . CopyViewToClipboardAction_tooltip ) ; setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_COPY_VIEW_TO_CLIPBOARD ) ) ; setHoverImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_LCL_COPY_VIEW_TO_CLIPBOARD ) ) ; setDisabledImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_COPY_VIEW_TO_CLIPBOARD ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugUIConstants . PLUGIN_ID + <str> ) ; } protected String concatenateTableAsString ( TableItem [ ] itemList ) { if ( itemList . length = = <int> ) return null ; StringBuffer tableContents = new StringBuffer ( ) ; Table table = ( Table ) fViewer . getControl ( ) ; int numColumns = table . getColumnCount ( ) ; ITableLabelProvider labelProvider = ( ITableLabelProvider ) fViewer . getLabelProvider ( ) ; TableColumn columns [ ] = table . getColumns ( ) ; String label = fRendering . getLabel ( ) ; tableContents . append ( label ) ; tableContents . append ( System . getProperty ( <str> ) ) ; tableContents . append ( COLUMN_SEPERATOR ) ; int charsPerByte = fRendering . getNumCharsPerByte ( ) ; if ( charsPerByte < <int> ) charsPerByte = <int> ; for ( int k = <int> ; k < numColumns ; k + + ) { StringBuffer columnLabel = new StringBuffer ( columns [ k ] . getText ( ) ) ; int numBytes = <int> ; int numChars = <int> ; if ( k > <int> ) { numBytes = fRendering . getBytesPerColumn ( ) ; numChars = numBytes * charsPerByte ; } else { IMemoryBlock memBlock = fRendering . getMemoryBlock ( ) ; if ( memBlock instanceof IMemoryBlockExtension ) { TableRenderingContentDescriptor descriptor = fRendering . getAdapter ( TableRenderingContentDescriptor . class ) ; if ( descriptor = = null ) { try { numBytes = ( ( IMemoryBlockExtension ) memBlock ) . getAddressSize ( ) ; } catch ( DebugException e ) { numBytes = <int> ; } } else numBytes = descriptor . getAddressSize ( ) ; if ( numBytes < = <int> ) numBytes = <int> ; } else { numBytes = <int> ; } numChars = numBytes * <int> ; } while ( columnLabel . length ( ) < numChars ) { columnLabel . append ( <str> ) ; } tableContents . append ( columnLabel ) ; tableContents . append ( COLUMN_SEPERATOR ) ; } tableContents . append ( System . getProperty ( <str> ) ) ; StringBuffer temp ; for ( int i = <int> ; i < itemList . length ; i + + ) { for ( int j = <int> ; j < numColumns ; j + + ) { tableContents . append ( COLUMN_SEPERATOR ) ; temp = new StringBuffer ( labelProvider . getColumnText ( itemList [ i ] . getData ( ) , j ) ) ; if ( j > <int> ) { int numBytes = fRendering . getBytesPerColumn ( ) ; int numChars = numBytes * charsPerByte ; while ( temp . length ( ) < numChars ) { temp . append ( <str> ) ; } } tableContents . append ( temp ) ; } tableContents . append ( System . getProperty ( <str> ) ) ; } return tableContents . toString ( ) ; } @Override public void run ( ) { if ( fRendering = = null ) return ; if ( ! ( fViewer . getControl ( ) instanceof Table ) ) return ; Table table = ( Table ) fViewer . getControl ( ) ; if ( table = = null ) return ; Clipboard clip = null ; try { clip = new Clipboard ( table . getDisplay ( ) ) ; TableItem [ ] tableItems = table . getItems ( ) ; String tableAsString = new String ( ) ; tableAsString = concatenateTableAsString ( tableItems ) ; if ( ! tableAsString . equals ( IInternalDebugCoreConstants . EMPTY_STRING ) ) { TextTransfer plainTextTransfer = TextTransfer . getInstance ( ) ; clip . setContents ( new Object [ ] { tableAsString } , new Transfer [ ] { plainTextTransfer } ) ; } } finally { if ( clip ! = null ) { clip . dispose ( ) ; } } } } 

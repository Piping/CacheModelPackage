package org . gradle . api . internal . artifacts . ivyservice . moduleconverter . dependencies ; import org . apache . ivy . plugins . matcher . ExactPatternMatcher ; import org . apache . ivy . plugins . matcher . PatternMatcher ; import org . gradle . api . internal . artifacts . DefaultExcludeRule ; import org . gradle . util . WrapUtil ; import org . hamcrest . Matchers ; import org . junit . Test ; import static org . junit . Assert . assertThat ; public class DefaultExcludeRuleConverterTest { @Test public void testCreateExcludeRule ( ) { String configurationName = <str> ; final String someOrg = <str> ; final String someModule = <str> ; org . apache . ivy . core . module . descriptor . ExcludeRule ivyExcludeRule = new DefaultExcludeRuleConverter ( ) . createExcludeRule ( configurationName , new DefaultExcludeRule ( someOrg , someModule ) ) ; assertThat ( ivyExcludeRule . getId ( ) . getModuleId ( ) . getOrganisation ( ) , Matchers . equalTo ( someOrg ) ) ; assertThat ( ivyExcludeRule . getId ( ) . getName ( ) , Matchers . equalTo ( PatternMatcher . ANY_EXPRESSION ) ) ; assertThat ( ivyExcludeRule . getId ( ) . getExt ( ) , Matchers . equalTo ( PatternMatcher . ANY_EXPRESSION ) ) ; assertThat ( ivyExcludeRule . getId ( ) . getType ( ) , Matchers . equalTo ( PatternMatcher . ANY_EXPRESSION ) ) ; assertThat ( ( ExactPatternMatcher ) ivyExcludeRule . getMatcher ( ) , Matchers . equalTo ( ExactPatternMatcher . INSTANCE ) ) ; assertThat ( ivyExcludeRule . getConfigurations ( ) , Matchers . equalTo ( WrapUtil . toArray ( configurationName ) ) ) ; } } 

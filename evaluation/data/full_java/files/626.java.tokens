package org . apache . cassandra . hints ; import java . util . Queue ; import java . util . UUID ; import java . util . concurrent . ConcurrentLinkedQueue ; import org . apache . cassandra . net . MessagingService ; final class HintsBufferPool { interface FlushCallback { void flush ( HintsBuffer buffer , HintsBufferPool pool ) ; } private volatile HintsBuffer currentBuffer ; private final Queue < HintsBuffer > reserveBuffers ; private final int bufferSize ; private final FlushCallback flushCallback ; HintsBufferPool ( int bufferSize , FlushCallback flushCallback ) { reserveBuffers = new ConcurrentLinkedQueue < > ( ) ; this . bufferSize = bufferSize ; this . flushCallback = flushCallback ; } void write ( Iterable < UUID > hostIds , Hint hint ) { int hintSize = ( int ) Hint . serializer . serializedSize ( hint , MessagingService . current_version ) ; try ( HintsBuffer . Allocation allocation = allocate ( hintSize ) ) { allocation . write ( hostIds , hint ) ; } } private HintsBuffer . Allocation allocate ( int hintSize ) { HintsBuffer current = currentBuffer ( ) ; while ( true ) { HintsBuffer . Allocation allocation = current . allocate ( hintSize ) ; if ( allocation ! = null ) return allocation ; if ( switchCurrentBuffer ( current ) ) flushCallback . flush ( current , this ) ; current = currentBuffer ; } } boolean offer ( HintsBuffer buffer ) { if ( ! reserveBuffers . isEmpty ( ) ) return false ; reserveBuffers . offer ( buffer ) ; return true ; } HintsBuffer currentBuffer ( ) { if ( currentBuffer = = null ) initializeCurrentBuffer ( ) ; return currentBuffer ; } private synchronized void initializeCurrentBuffer ( ) { if ( currentBuffer = = null ) currentBuffer = createBuffer ( ) ; } private synchronized boolean switchCurrentBuffer ( HintsBuffer previous ) { if ( currentBuffer ! = previous ) return false ; HintsBuffer buffer = reserveBuffers . poll ( ) ; currentBuffer = buffer = = null ? createBuffer ( ) : buffer ; return true ; } private HintsBuffer createBuffer ( ) { return HintsBuffer . create ( bufferSize ) ; } } 

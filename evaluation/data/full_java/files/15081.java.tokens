package org . gradle . nativeplatform . toolchain . internal . msvcpp ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . operations . BuildOperationProcessor ; import org . gradle . internal . os . OperatingSystem ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . nativeplatform . platform . internal . NativePlatformInternal ; import org . gradle . nativeplatform . toolchain . VisualCpp ; import org . gradle . nativeplatform . toolchain . VisualCppPlatformToolChain ; import org . gradle . nativeplatform . toolchain . internal . ExtendableToolChain ; import org . gradle . nativeplatform . toolchain . internal . NativeToolChainInternal ; import org . gradle . nativeplatform . toolchain . internal . PlatformToolProvider ; import org . gradle . nativeplatform . toolchain . internal . UnavailablePlatformToolProvider ; import org . gradle . platform . base . internal . toolchain . ToolChainAvailability ; import org . gradle . process . internal . ExecActionFactory ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; public class VisualCppToolChain extends ExtendableToolChain < VisualCppPlatformToolChain > implements VisualCpp , NativeToolChainInternal { private final String name ; private final OperatingSystem operatingSystem ; private final FileResolver fileResolver ; protected static final Logger LOGGER = LoggerFactory . getLogger ( VisualCppToolChain . class ) ; public static final String DEFAULT_NAME = <str> ; private final ExecActionFactory execActionFactory ; private final VisualStudioLocator visualStudioLocator ; private final WindowsSdkLocator windowsSdkLocator ; private final Instantiator instantiator ; private File installDir ; private File windowsSdkDir ; private VisualCppInstall visualCpp ; private WindowsSdk windowsSdk ; private ToolChainAvailability availability ; public VisualCppToolChain ( String name , BuildOperationProcessor buildOperationProcessor , OperatingSystem operatingSystem , FileResolver fileResolver , ExecActionFactory execActionFactory , VisualStudioLocator visualStudioLocator , WindowsSdkLocator windowsSdkLocator , Instantiator instantiator ) { super ( name , buildOperationProcessor , operatingSystem , fileResolver ) ; this . name = name ; this . operatingSystem = operatingSystem ; this . fileResolver = fileResolver ; this . execActionFactory = execActionFactory ; this . visualStudioLocator = visualStudioLocator ; this . windowsSdkLocator = windowsSdkLocator ; this . instantiator = instantiator ; } protected String getTypeName ( ) { return <str> ; } public File getInstallDir ( ) { return installDir ; } public void setInstallDir ( Object installDirPath ) { this . installDir = resolve ( installDirPath ) ; } public File getWindowsSdkDir ( ) { return windowsSdkDir ; } public void setWindowsSdkDir ( Object windowsSdkDirPath ) { this . windowsSdkDir = resolve ( windowsSdkDirPath ) ; } public PlatformToolProvider select ( NativePlatformInternal targetPlatform ) { ToolChainAvailability result = new ToolChainAvailability ( ) ; result . mustBeAvailable ( getAvailability ( ) ) ; if ( visualCpp ! = null & & ! visualCpp . isSupportedPlatform ( targetPlatform ) ) { result . unavailable ( String . format ( <str> , targetPlatform . getName ( ) ) ) ; } if ( ! result . isAvailable ( ) ) { return new UnavailablePlatformToolProvider ( targetPlatform . getOperatingSystem ( ) , result ) ; } DefaultVisualCppPlatformToolChain configurableToolChain = instantiator . newInstance ( DefaultVisualCppPlatformToolChain . class , targetPlatform , instantiator ) ; configureActions . execute ( configurableToolChain ) ; return new VisualCppPlatformToolProvider ( buildOperationProcessor , targetPlatform . getOperatingSystem ( ) , configurableToolChain . tools , visualCpp , windowsSdk , targetPlatform , execActionFactory ) ; } private ToolChainAvailability getAvailability ( ) { if ( availability = = null ) { availability = new ToolChainAvailability ( ) ; checkAvailable ( availability ) ; } return availability ; } private void checkAvailable ( ToolChainAvailability availability ) { if ( ! operatingSystem . isWindows ( ) ) { availability . unavailable ( <str> ) ; return ; } VisualStudioLocator . SearchResult visualStudioSearchResult = visualStudioLocator . locateVisualStudioInstalls ( installDir ) ; availability . mustBeAvailable ( visualStudioSearchResult ) ; if ( visualStudioSearchResult . isAvailable ( ) ) { visualCpp = visualStudioSearchResult . getVisualStudio ( ) . getVisualCpp ( ) ; } WindowsSdkLocator . SearchResult windowsSdkSearchResult = windowsSdkLocator . locateWindowsSdks ( windowsSdkDir ) ; availability . mustBeAvailable ( windowsSdkSearchResult ) ; if ( windowsSdkSearchResult . isAvailable ( ) ) { windowsSdk = windowsSdkSearchResult . getSdk ( ) ; } } public String getName ( ) { return name ; } public String getDisplayName ( ) { return String . format ( <str> , getName ( ) , getTypeName ( ) ) ; } } 

package org . apache . cassandra . config ; import java . io . IOException ; import java . net . Inet4Address ; import java . net . Inet6Address ; import java . net . InetAddress ; import java . net . NetworkInterface ; import java . util . Enumeration ; import org . junit . BeforeClass ; import org . junit . Test ; import org . junit . runner . RunWith ; import org . apache . cassandra . OrderedJUnit4ClassRunner ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . gms . Gossiper ; import org . apache . cassandra . schema . KeyspaceMetadata ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . service . MigrationManager ; import org . apache . cassandra . thrift . ThriftConversion ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertNotNull ; import static org . junit . Assert . assertNull ; @RunWith ( OrderedJUnit4ClassRunner . class ) public class DatabaseDescriptorTest { @Test public void testCFMetaDataSerialization ( ) throws ConfigurationException , InvalidRequestException { for ( String keyspaceName : Schema . instance . getNonSystemKeyspaces ( ) ) { for ( CFMetaData cfm : Schema . instance . getTablesAndViews ( keyspaceName ) ) { CFMetaData cfmDupe = ThriftConversion . fromThrift ( ThriftConversion . toThrift ( cfm ) ) ; assertNotNull ( cfmDupe ) ; assertEquals ( cfm , cfmDupe ) ; } } } @Test public void testKSMetaDataSerialization ( ) throws ConfigurationException { for ( String ks : Schema . instance . getNonSystemKeyspaces ( ) ) { KeyspaceMetadata ksm = Schema . instance . getKSMetaData ( ks ) ; KeyspaceMetadata ksmDupe = ThriftConversion . fromThrift ( ThriftConversion . toThrift ( ksm ) ) ; assertNotNull ( ksmDupe ) ; assertEquals ( ksm , ksmDupe ) ; } } @Test public void testTransKsMigration ( ) throws ConfigurationException , IOException { SchemaLoader . cleanupAndLeaveDirs ( ) ; Schema . instance . loadFromDisk ( ) ; assertEquals ( <int> , Schema . instance . getNonSystemKeyspaces ( ) . size ( ) ) ; Gossiper . instance . start ( ( int ) ( System . currentTimeMillis ( ) / <int> ) ) ; Keyspace . setInitialized ( ) ; try { MigrationManager . announceNewKeyspace ( KeyspaceMetadata . create ( <str> , KeyspaceParams . simple ( <int> ) ) ) ; MigrationManager . announceNewKeyspace ( KeyspaceMetadata . create ( <str> , KeyspaceParams . simple ( <int> ) ) ) ; assertNotNull ( Schema . instance . getKSMetaData ( <str> ) ) ; assertNotNull ( Schema . instance . getKSMetaData ( <str> ) ) ; Schema . instance . clearKeyspaceMetadata ( Schema . instance . getKSMetaData ( <str> ) ) ; Schema . instance . clearKeyspaceMetadata ( Schema . instance . getKSMetaData ( <str> ) ) ; assertNull ( Schema . instance . getKSMetaData ( <str> ) ) ; assertNull ( Schema . instance . getKSMetaData ( <str> ) ) ; Schema . instance . loadFromDisk ( ) ; assertNotNull ( Schema . instance . getKSMetaData ( <str> ) ) ; assertNotNull ( Schema . instance . getKSMetaData ( <str> ) ) ; } finally { Gossiper . instance . stop ( ) ; } } @Test public void testConfigurationLoader ( ) throws Exception { Config config = DatabaseDescriptor . loadConfig ( ) ; assertEquals ( <str> , config . cluster_name ) ; Keyspace . setInitialized ( ) ; ConfigurationLoader testLoader = new TestLoader ( ) ; System . setProperty ( <str> , testLoader . getClass ( ) . getName ( ) ) ; config = DatabaseDescriptor . loadConfig ( ) ; assertEquals ( <str> , config . cluster_name ) ; } public static class TestLoader implements ConfigurationLoader { public Config loadConfig ( ) throws ConfigurationException { Config testConfig = new Config ( ) ; testConfig . cluster_name = <str> ; return testConfig ; } } static NetworkInterface suitableInterface = null ; static boolean hasIPv4andIPv6 = false ; @BeforeClass public static void selectSuitableInterface ( ) throws Exception { Enumeration < NetworkInterface > interfaces = NetworkInterface . getNetworkInterfaces ( ) ; while ( interfaces . hasMoreElements ( ) ) { NetworkInterface intf = interfaces . nextElement ( ) ; System . out . println ( <str> + intf . getName ( ) ) ; if ( intf . isLoopback ( ) ) { suitableInterface = intf ; boolean hasIPv4 = false ; boolean hasIPv6 = false ; Enumeration < InetAddress > addresses = suitableInterface . getInetAddresses ( ) ; while ( addresses . hasMoreElements ( ) ) { if ( addresses . nextElement ( ) instanceof Inet6Address ) hasIPv6 = true ; else hasIPv4 = true ; } hasIPv4andIPv6 = hasIPv4 & & hasIPv6 ; return ; } } } @Test public void testRpcInterface ( ) throws Exception { Config testConfig = DatabaseDescriptor . loadConfig ( ) ; testConfig . rpc_interface = suitableInterface . getName ( ) ; testConfig . rpc_address = null ; DatabaseDescriptor . applyAddressConfig ( testConfig ) ; if ( hasIPv4andIPv6 ) { testConfig = DatabaseDescriptor . loadConfig ( ) ; testConfig . rpc_interface = suitableInterface . getName ( ) ; testConfig . rpc_address = null ; testConfig . rpc_interface_prefer_ipv6 = true ; DatabaseDescriptor . applyAddressConfig ( testConfig ) ; assertEquals ( DatabaseDescriptor . getRpcAddress ( ) . getClass ( ) , Inet6Address . class ) ; testConfig = DatabaseDescriptor . loadConfig ( ) ; testConfig . rpc_interface = suitableInterface . getName ( ) ; testConfig . rpc_address = null ; testConfig . rpc_interface_prefer_ipv6 = false ; DatabaseDescriptor . applyAddressConfig ( testConfig ) ; assertEquals ( DatabaseDescriptor . getRpcAddress ( ) . getClass ( ) , Inet4Address . class ) ; } else { assertEquals ( DatabaseDescriptor . getRpcAddress ( ) , suitableInterface . getInetAddresses ( ) . nextElement ( ) ) ; } } @Test public void testListenInterface ( ) throws Exception { Config testConfig = DatabaseDescriptor . loadConfig ( ) ; testConfig . listen_interface = suitableInterface . getName ( ) ; testConfig . listen_address = null ; DatabaseDescriptor . applyAddressConfig ( testConfig ) ; if ( hasIPv4andIPv6 ) { testConfig = DatabaseDescriptor . loadConfig ( ) ; testConfig . listen_interface = suitableInterface . getName ( ) ; testConfig . listen_address = null ; testConfig . listen_interface_prefer_ipv6 = true ; DatabaseDescriptor . applyAddressConfig ( testConfig ) ; assertEquals ( DatabaseDescriptor . getListenAddress ( ) . getClass ( ) , Inet6Address . class ) ; testConfig = DatabaseDescriptor . loadConfig ( ) ; testConfig . listen_interface = suitableInterface . getName ( ) ; testConfig . listen_address = null ; testConfig . listen_interface_prefer_ipv6 = false ; DatabaseDescriptor . applyAddressConfig ( testConfig ) ; assertEquals ( DatabaseDescriptor . getListenAddress ( ) . getClass ( ) , Inet4Address . class ) ; } else { assertEquals ( DatabaseDescriptor . getRpcAddress ( ) , suitableInterface . getInetAddresses ( ) . nextElement ( ) ) ; } } @Test public void testListenAddress ( ) throws Exception { Config testConfig = DatabaseDescriptor . loadConfig ( ) ; testConfig . listen_address = suitableInterface . getInterfaceAddresses ( ) . get ( <int> ) . getAddress ( ) . getHostAddress ( ) ; testConfig . listen_interface = null ; DatabaseDescriptor . applyAddressConfig ( testConfig ) ; } @Test public void testRpcAddress ( ) throws Exception { Config testConfig = DatabaseDescriptor . loadConfig ( ) ; testConfig . rpc_address = suitableInterface . getInterfaceAddresses ( ) . get ( <int> ) . getAddress ( ) . getHostAddress ( ) ; testConfig . rpc_interface = null ; DatabaseDescriptor . applyAddressConfig ( testConfig ) ; } } 

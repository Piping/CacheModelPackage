package io . netty . handler . codec . http2 ; import static io . netty . handler . codec . http2 . Http2CodecUtil . MAX_FRAME_SIZE_UPPER_BOUND ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertTrue ; import org . junit . Before ; import org . junit . Test ; public class Http2SettingsTest { private Http2Settings settings ; @Before public void setup ( ) { settings = new Http2Settings ( ) ; } @Test public void standardSettingsShouldBeNotSet ( ) { assertEquals ( <int> , settings . size ( ) ) ; assertNull ( settings . headerTableSize ( ) ) ; assertNull ( settings . initialWindowSize ( ) ) ; assertNull ( settings . maxConcurrentStreams ( ) ) ; assertNull ( settings . pushEnabled ( ) ) ; assertNull ( settings . maxFrameSize ( ) ) ; assertNull ( settings . maxHeaderListSize ( ) ) ; } @Test public void standardSettingsShouldBeSet ( ) { settings . initialWindowSize ( <int> ) ; settings . maxConcurrentStreams ( <int> ) ; settings . pushEnabled ( true ) ; settings . headerTableSize ( <int> ) ; settings . maxFrameSize ( MAX_FRAME_SIZE_UPPER_BOUND ) ; settings . maxHeaderListSize ( <int> ) ; assertEquals ( <int> , ( int ) settings . initialWindowSize ( ) ) ; assertEquals ( <int> , ( long ) settings . maxConcurrentStreams ( ) ) ; assertTrue ( settings . pushEnabled ( ) ) ; assertEquals ( <int> , ( long ) settings . headerTableSize ( ) ) ; assertEquals ( MAX_FRAME_SIZE_UPPER_BOUND , ( int ) settings . maxFrameSize ( ) ) ; assertEquals ( <int> , ( long ) settings . maxHeaderListSize ( ) ) ; } @Test public void nonStandardSettingsShouldBeSet ( ) { char key = <int> ; settings . put ( key , ( Long ) <int> ) ; assertEquals ( <int> , ( long ) settings . get ( key ) ) ; } @Test public void settingsShouldSupportUnsignedShort ( ) { char key = ( char ) ( Short . MAX_VALUE + <int> ) ; settings . put ( key , ( Long ) <int> ) ; assertEquals ( <int> , ( long ) settings . get ( key ) ) ; } @Test public void boundarySettingsShouldBeSet ( ) { final long overIntegerMaxValue = <int> < < <int> ; settings . maxHeaderListSize ( ( int ) overIntegerMaxValue ) ; assertEquals ( Integer . MAX_VALUE , ( long ) settings . maxHeaderListSize ( ) ) ; final long settingsValueUpperBound = ( <int> < < <int> ) - <int> ; settings . maxHeaderListSize ( ( int ) settingsValueUpperBound ) ; assertEquals ( Integer . MAX_VALUE , ( long ) settings . maxHeaderListSize ( ) ) ; } } 

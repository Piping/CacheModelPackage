package org . elasticsearch . script . javascript . support ; import org . mozilla . javascript . NativeJavaObject ; import org . mozilla . javascript . Scriptable ; import org . mozilla . javascript . Undefined ; import org . mozilla . javascript . Wrapper ; import java . util . Arrays ; import java . util . List ; public class NativeList extends NativeJavaObject implements Scriptable , Wrapper { private static final long serialVersionUID = <int> ; private static final String LENGTH_PROPERTY = <str> ; private final List < Object > list ; public static NativeList wrap ( Scriptable scope , List < Object > list , Class < ? > staticType ) { return new NativeList ( scope , list , staticType ) ; } private NativeList ( Scriptable scope , List < Object > list , Class < ? > staticType ) { super ( scope , list , staticType ) ; this . list = list ; } public Object unwrap ( ) { return list ; } public String getClassName ( ) { return <str> ; } public Object get ( String name , Scriptable start ) { if ( LENGTH_PROPERTY . equals ( name ) ) { return list . size ( ) ; } else { return super . get ( name , start ) ; } } public Object get ( int index , Scriptable start ) { if ( has ( index , start ) = = false ) { return Undefined . instance ; } return list . get ( index ) ; } public boolean has ( String name , Scriptable start ) { return super . has ( name , start ) | | LENGTH_PROPERTY . equals ( name ) ; } public boolean has ( int index , Scriptable start ) { return index > = <int> & & index < list . size ( ) ; } public void put ( int index , Scriptable start , Object value ) { if ( index = = list . size ( ) ) { list . add ( value ) ; } else { list . set ( index , value ) ; } } public void delete ( int index ) { list . remove ( index ) ; } public Object [ ] getIds ( ) { final Object [ ] javaObjectIds = super . getIds ( ) ; final int size = list . size ( ) ; final Object [ ] ids = Arrays . copyOf ( javaObjectIds , javaObjectIds . length + size ) ; for ( int i = <int> ; i < size ; + + i ) { ids [ javaObjectIds . length + i ] = i ; } return ids ; } public boolean hasInstance ( Scriptable value ) { if ( ! ( value instanceof Wrapper ) ) return false ; Object instance = ( ( Wrapper ) value ) . unwrap ( ) ; return List . class . isInstance ( instance ) ; } } 

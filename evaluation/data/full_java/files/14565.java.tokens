package org . gradle . api . internal . plugins . osgi ; import org . gradle . api . GradleException ; import org . gradle . api . Project ; import org . gradle . api . plugins . BasePluginConvention ; import java . util . StringTokenizer ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class OsgiHelper { private static final Pattern OSGI_VERSION_PATTERN = Pattern . compile ( <str> ) ; private static final Pattern ONLY_NUMBERS = Pattern . compile ( <str> ) ; private static final Pattern QUALIFIER = Pattern . compile ( <str> ) ; public String getBundleSymbolicName ( Project project ) { String group = project . getGroup ( ) . toString ( ) ; String archiveBaseName = project . getConvention ( ) . getPlugin ( BasePluginConvention . class ) . getArchivesBaseName ( ) ; if ( archiveBaseName . startsWith ( group ) ) { return archiveBaseName ; } int i = group . lastIndexOf ( <str> ) ; String lastSection = group . substring ( + + i ) ; if ( archiveBaseName . equals ( lastSection ) ) { return group ; } if ( archiveBaseName . startsWith ( lastSection ) ) { String artifactId = archiveBaseName . substring ( lastSection . length ( ) ) ; if ( Character . isLetterOrDigit ( artifactId . charAt ( <int> ) ) ) { return getBundleSymbolicName ( group , artifactId ) ; } else { return getBundleSymbolicName ( group , artifactId . substring ( <int> ) ) ; } } return getBundleSymbolicName ( group , archiveBaseName ) ; } private String getBundleSymbolicName ( String groupId , String artifactId ) { return groupId + <str> + artifactId ; } public String getVersion ( String version ) { final Matcher m = OSGI_VERSION_PATTERN . matcher ( version ) ; if ( m . matches ( ) ) { return version ; } int group = <int> ; boolean groupToken = true ; String [ ] groups = new String [ <int> ] ; groups [ <int> ] = <str> ; groups [ <int> ] = <str> ; groups [ <int> ] = <str> ; groups [ <int> ] = <str> ; StringTokenizer st = new StringTokenizer ( version , <str> , true ) ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; if ( groupToken ) { if ( group < <int> ) { if ( ONLY_NUMBERS . matcher ( token ) . matches ( ) ) { groups [ group + + ] = token ; groupToken = false ; } else { groups [ <int> ] = token + fillQualifier ( st ) ; } } else { groups [ <int> ] = token + fillQualifier ( st ) ; } } else { if ( <str> . equals ( token ) ) { groupToken = true ; } else { groups [ <int> ] = fillQualifier ( st ) ; } } } String ver = groups [ <int> ] + <str> + groups [ <int> ] + <str> + groups [ <int> ] ; String result ; if ( groups [ <int> ] . length ( ) > <int> ) { result = ver + <str> + groups [ <int> ] ; } else { result = ver ; } if ( ! OSGI_VERSION_PATTERN . matcher ( result ) . matches ( ) ) { throw new GradleException ( <str> ) ; } return result ; } private String fillQualifier ( StringTokenizer st ) { StringBuilder buf = new StringBuilder ( ) ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; if ( QUALIFIER . matcher ( token ) . matches ( ) ) { buf . append ( token ) ; } else { buf . append ( <str> ) ; } } return buf . toString ( ) ; } } 

package org . elasticsearch . bootstrap ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . net . URL ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . StandardOpenOption ; import java . util . jar . Attributes ; import java . util . jar . JarOutputStream ; import java . util . jar . Manifest ; import java . util . zip . ZipEntry ; import java . util . zip . ZipOutputStream ; @SuppressForbidden ( reason = <str> ) public class EvilJarHellTests extends ESTestCase { URL makeJar ( Path dir , String name , Manifest manifest , String . . . files ) throws IOException { Path jarpath = dir . resolve ( name ) ; ZipOutputStream out ; if ( manifest = = null ) { out = new JarOutputStream ( Files . newOutputStream ( jarpath , StandardOpenOption . CREATE ) ) ; } else { out = new JarOutputStream ( Files . newOutputStream ( jarpath , StandardOpenOption . CREATE ) , manifest ) ; } for ( String file : files ) { out . putNextEntry ( new ZipEntry ( file ) ) ; } out . close ( ) ; return jarpath . toUri ( ) . toURL ( ) ; } public void testBootclasspathLeniency ( ) throws Exception { Path dir = createTempDir ( ) ; String previousJavaHome = System . getProperty ( <str> ) ; System . setProperty ( <str> , dir . toString ( ) ) ; URL [ ] jars = { makeJar ( dir , <str> , null , <str> ) , makeJar ( dir , <str> , null , <str> ) } ; try { JarHell . checkJarHell ( jars ) ; } finally { System . setProperty ( <str> , previousJavaHome ) ; } } public void testRequiredJDKVersionIsOK ( ) throws Exception { Path dir = createTempDir ( ) ; String previousJavaVersion = System . getProperty ( <str> ) ; System . setProperty ( <str> , <str> ) ; Manifest manifest = new Manifest ( ) ; Attributes attributes = manifest . getMainAttributes ( ) ; attributes . put ( Attributes . Name . MANIFEST_VERSION , <str> ) ; attributes . put ( new Attributes . Name ( <str> ) , <str> ) ; URL [ ] jars = { makeJar ( dir , <str> , manifest , <str> ) } ; try { JarHell . checkJarHell ( jars ) ; } finally { System . setProperty ( <str> , previousJavaVersion ) ; } } public void testBadJDKVersionProperty ( ) throws Exception { Path dir = createTempDir ( ) ; String previousJavaVersion = System . getProperty ( <str> ) ; System . setProperty ( <str> , <str> ) ; Manifest manifest = new Manifest ( ) ; Attributes attributes = manifest . getMainAttributes ( ) ; attributes . put ( Attributes . Name . MANIFEST_VERSION , <str> ) ; attributes . put ( new Attributes . Name ( <str> ) , <str> ) ; URL [ ] jars = { makeJar ( dir , <str> , manifest , <str> ) } ; try { JarHell . checkJarHell ( jars ) ; } finally { System . setProperty ( <str> , previousJavaVersion ) ; } } } 

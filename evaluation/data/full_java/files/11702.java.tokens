package org . gradle . api . internal . tasks ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . GradleException ; import org . gradle . api . tasks . TaskState ; public class TaskStateInternal implements TaskState { private boolean executing ; private boolean executed ; private boolean didWork ; private Throwable failure ; private String description ; private String skippedMessage ; private boolean skipped ; private boolean upToDate ; public TaskStateInternal ( String description ) { this . description = description ; } public boolean getDidWork ( ) { return didWork ; } public void setDidWork ( boolean didWork ) { this . didWork = didWork ; } public boolean getExecuted ( ) { return executed ; } public void executed ( ) { this . executed = true ; } public boolean isConfigurable ( ) { return ! executed & & ! executing ; } public void executed ( Throwable failure ) { assert this . failure = = null ; this . executed = true ; this . failure = failure ; } public void skipped ( String skipMessage ) { this . executed = true ; skipped = true ; this . skippedMessage = skipMessage ; } public void upToDate ( ) { skipped ( <str> ) ; upToDate = true ; } public boolean getExecuting ( ) { return executing ; } public void setExecuting ( boolean executing ) { this . executing = executing ; } public Throwable getFailure ( ) { return failure ; } public void rethrowFailure ( ) { if ( failure = = null ) { return ; } if ( failure instanceof RuntimeException ) { throw ( RuntimeException ) failure ; } if ( failure instanceof Error ) { throw ( Error ) failure ; } throw new GradleException ( String . format ( <str> , StringUtils . capitalize ( description ) ) , failure ) ; } public boolean getSkipped ( ) { return skipped ; } public String getSkipMessage ( ) { return skippedMessage ; } public boolean getUpToDate ( ) { return upToDate ; } } 

package org . gradle . api . internal . tasks . compile ; import com . google . common . collect . ImmutableMap ; import groovy . lang . Closure ; import org . gradle . api . AntBuilder ; import org . gradle . api . file . FileCollection ; import org . gradle . api . tasks . compile . CompileOptions ; import org . gradle . internal . Factory ; import org . gradle . language . base . internal . tasks . StaleClassCleaner ; import java . io . File ; public class AntDependsStaleClassCleaner extends StaleClassCleaner { private final Factory < AntBuilder > antBuilderFactory ; private final CompileOptions compileOptions ; private File dependencyCacheDir ; public AntDependsStaleClassCleaner ( Factory < AntBuilder > antBuilderFactory , CompileOptions compileOptions ) { this . antBuilderFactory = antBuilderFactory ; this . compileOptions = compileOptions ; } public void setDependencyCacheDir ( File dependencyCacheDir ) { this . dependencyCacheDir = dependencyCacheDir ; } public void execute ( ) { ImmutableMap . Builder < String , Object > options = ImmutableMap . builder ( ) ; options . put ( <str> , getDestinationDir ( ) ) ; options . putAll ( compileOptions . getDependOptions ( ) . optionMap ( ) ) ; if ( compileOptions . getDependOptions ( ) . isUseCache ( ) ) { options . put ( <str> , dependencyCacheDir ) ; } final AntBuilder ant = antBuilderFactory . create ( ) ; ant . getProject ( ) . addTaskDefinition ( <str> , AntDepend . class ) ; ant . invokeMethod ( <str> , new Object [ ] { options . build ( ) , new Closure < Object > ( this , this ) { @SuppressWarnings ( <str> ) public void doCall ( Object ignore ) { getSource ( ) . addToAntBuilder ( ant , <str> , FileCollection . AntType . MatchingTask ) ; } } } ) ; } } 

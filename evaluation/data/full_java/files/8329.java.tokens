package org . elasticsearch . indices . cache . query ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . indices . cache . request . IndicesRequestCache ; import org . elasticsearch . search . aggregations . bucket . histogram . DateHistogramInterval ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram . Bucket ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . List ; import static org . elasticsearch . search . aggregations . AggregationBuilders . dateHistogram ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . greaterThan ; public class IndicesRequestCacheIT extends ESIntegTestCase { public void testCacheAggs ( ) throws Exception { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . setSettings ( IndicesRequestCache . INDEX_CACHE_REQUEST_ENABLED , true ) . get ( ) ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) ) ; ensureSearchable ( <str> ) ; final SearchResponse r1 = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . addAggregation ( dateHistogram ( <str> ) . field ( <str> ) . timeZone ( <str> ) . minDocCount ( <int> ) . interval ( DateHistogramInterval . MONTH ) ) . get ( ) ; assertSearchResponse ( r1 ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . setRequestCache ( true ) . get ( ) . getTotal ( ) . getRequestCache ( ) . getMemorySizeInBytes ( ) , greaterThan ( <int> l ) ) ; for ( int i = <int> ; i < <int> ; + + i ) { final SearchResponse r2 = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . addAggregation ( dateHistogram ( <str> ) . field ( <str> ) . timeZone ( <str> ) . minDocCount ( <int> ) . interval ( DateHistogramInterval . MONTH ) ) . get ( ) ; assertSearchResponse ( r2 ) ; Histogram h1 = r1 . getAggregations ( ) . get ( <str> ) ; Histogram h2 = r2 . getAggregations ( ) . get ( <str> ) ; final List < ? extends Bucket > buckets1 = h1 . getBuckets ( ) ; final List < ? extends Bucket > buckets2 = h2 . getBuckets ( ) ; assertEquals ( buckets1 . size ( ) , buckets2 . size ( ) ) ; for ( int j = <int> ; j < buckets1 . size ( ) ; + + j ) { final Bucket b1 = buckets1 . get ( j ) ; final Bucket b2 = buckets2 . get ( j ) ; assertEquals ( b1 . getKey ( ) , b2 . getKey ( ) ) ; assertEquals ( b1 . getDocCount ( ) , b2 . getDocCount ( ) ) ; } } } } 

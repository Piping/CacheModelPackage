package org . elasticsearch . search . fetch . script ; import org . elasticsearch . script . LeafSearchScript ; import org . elasticsearch . search . SearchHitField ; import org . elasticsearch . search . SearchParseElement ; import org . elasticsearch . search . fetch . FetchSubPhase ; import org . elasticsearch . search . internal . InternalSearchHit ; import org . elasticsearch . search . internal . InternalSearchHitField ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static java . util . Collections . unmodifiableMap ; public class ScriptFieldsFetchSubPhase implements FetchSubPhase { private static final Map < String , SearchParseElement > PARSE_ELEMENTS ; static { Map < String , SearchParseElement > parseElements = new HashMap < > ( ) ; parseElements . put ( <str> , new ScriptFieldsParseElement ( ) ) ; parseElements . put ( <str> , new ScriptFieldsParseElement ( ) ) ; PARSE_ELEMENTS = unmodifiableMap ( parseElements ) ; } @Override public Map < String , ? extends SearchParseElement > parseElements ( ) { return PARSE_ELEMENTS ; } @Override public boolean hitsExecutionNeeded ( SearchContext context ) { return false ; } @Override public void hitsExecute ( SearchContext context , InternalSearchHit [ ] hits ) { } @Override public boolean hitExecutionNeeded ( SearchContext context ) { return context . hasScriptFields ( ) ; } @Override public void hitExecute ( SearchContext context , HitContext hitContext ) { for ( ScriptFieldsContext . ScriptField scriptField : context . scriptFields ( ) . fields ( ) ) { LeafSearchScript leafScript ; try { leafScript = scriptField . script ( ) . getLeafSearchScript ( hitContext . readerContext ( ) ) ; } catch ( IOException e1 ) { throw new IllegalStateException ( <str> , e1 ) ; } leafScript . setDocument ( hitContext . docId ( ) ) ; Object value ; try { value = leafScript . run ( ) ; value = leafScript . unwrap ( value ) ; } catch ( RuntimeException e ) { if ( scriptField . ignoreException ( ) ) { continue ; } throw e ; } if ( hitContext . hit ( ) . fieldsOrNull ( ) = = null ) { hitContext . hit ( ) . fields ( new HashMap < String , SearchHitField > ( <int> ) ) ; } SearchHitField hitField = hitContext . hit ( ) . fields ( ) . get ( scriptField . name ( ) ) ; if ( hitField = = null ) { final List < Object > values ; if ( value = = null ) { values = Collections . emptyList ( ) ; } else if ( value instanceof Collection ) { values = new ArrayList < Object > ( ( Collection < ? > ) value ) ; } else { values = Collections . singletonList ( value ) ; } hitField = new InternalSearchHitField ( scriptField . name ( ) , values ) ; hitContext . hit ( ) . fields ( ) . put ( scriptField . name ( ) , hitField ) ; } } } } 

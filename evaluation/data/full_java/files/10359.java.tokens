package com . google . common . collect ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . MultisetFeature ; import com . google . common . collect . testing . google . MultisetTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringMultisetGenerator ; import com . google . common . testing . SerializableTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . io . Serializable ; import java . util . Arrays ; @GwtCompatible ( emulated = true ) public class HashMultisetTest extends TestCase { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( MultisetTestSuiteBuilder . using ( hashMultisetGenerator ( ) ) . withFeatures ( CollectionSize . ANY , CollectionFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION , CollectionFeature . ALLOWS_NULL_VALUES , CollectionFeature . SERIALIZABLE , CollectionFeature . GENERAL_PURPOSE , MultisetFeature . ENTRIES_ARE_VIEWS ) . named ( <str> ) . createTestSuite ( ) ) ; suite . addTestSuite ( HashMultisetTest . class ) ; return suite ; } private static TestStringMultisetGenerator hashMultisetGenerator ( ) { return new TestStringMultisetGenerator ( ) { @Override protected Multiset < String > create ( String [ ] elements ) { return HashMultiset . create ( asList ( elements ) ) ; } } ; } public void testCreate ( ) { Multiset < String > multiset = HashMultiset . create ( ) ; multiset . add ( <str> , <int> ) ; multiset . add ( <str> ) ; assertEquals ( <int> , multiset . size ( ) ) ; assertEquals ( <int> , multiset . count ( <str> ) ) ; } public void testCreateWithSize ( ) { Multiset < String > multiset = HashMultiset . create ( <int> ) ; multiset . add ( <str> , <int> ) ; multiset . add ( <str> ) ; assertEquals ( <int> , multiset . size ( ) ) ; assertEquals ( <int> , multiset . count ( <str> ) ) ; } public void testCreateFromIterable ( ) { Multiset < String > multiset = HashMultiset . create ( Arrays . asList ( <str> , <str> , <str> ) ) ; assertEquals ( <int> , multiset . size ( ) ) ; assertEquals ( <int> , multiset . count ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testSerializationContainingSelf ( ) { Multiset < Multiset < ? > > multiset = HashMultiset . create ( ) ; multiset . add ( multiset , <int> ) ; Multiset < Multiset < ? > > copy = SerializableTester . reserialize ( multiset ) ; assertEquals ( <int> , copy . size ( ) ) ; assertSame ( copy , copy . iterator ( ) . next ( ) ) ; } @GwtIncompatible ( <str> ) private static class MultisetHolder implements Serializable { public Multiset < ? > member ; MultisetHolder ( Multiset < ? > multiset ) { this . member = multiset ; } private static final long serialVersionUID = <int> ; } @GwtIncompatible ( <str> ) public void testSerializationIndirectSelfReference ( ) { Multiset < MultisetHolder > multiset = HashMultiset . create ( ) ; MultisetHolder holder = new MultisetHolder ( multiset ) ; multiset . add ( holder , <int> ) ; Multiset < MultisetHolder > copy = SerializableTester . reserialize ( multiset ) ; assertEquals ( <int> , copy . size ( ) ) ; assertSame ( copy , copy . iterator ( ) . next ( ) . member ) ; } } 

package org . elasticsearch . example ; import org . apache . http . impl . client . CloseableHttpClient ; import org . apache . http . impl . client . HttpClients ; import org . apache . http . impl . conn . PoolingHttpClientConnectionManager ; import org . elasticsearch . common . network . NetworkAddress ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ExternalTestCluster ; import org . elasticsearch . test . TestCluster ; import org . elasticsearch . test . rest . client . RestResponse ; import org . elasticsearch . test . rest . client . http . HttpRequestBuilder ; import java . net . InetSocketAddress ; import java . util . concurrent . TimeUnit ; public class SiteContentsIT extends ESIntegTestCase { public void test ( ) throws Exception { TestCluster cluster = cluster ( ) ; assumeTrue ( <str> , cluster instanceof ExternalTestCluster ) ; ExternalTestCluster externalCluster = ( ExternalTestCluster ) cluster ; try ( CloseableHttpClient httpClient = HttpClients . createMinimal ( new PoolingHttpClientConnectionManager ( <int> , TimeUnit . SECONDS ) ) ) { for ( InetSocketAddress address : externalCluster . httpAddresses ( ) ) { RestResponse restResponse = new RestResponse ( new HttpRequestBuilder ( httpClient ) . host ( NetworkAddress . formatAddress ( address . getAddress ( ) ) ) . port ( address . getPort ( ) ) . path ( <str> ) . method ( <str> ) . execute ( ) ) ; assertEquals ( <int> , restResponse . getStatusCode ( ) ) ; String body = restResponse . getBodyAsString ( ) ; assertTrue ( <str> + body , body . contains ( <str> ) ) ; } } } } 

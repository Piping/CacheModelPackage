package org . gradle . testkit . runner . internal ; import org . gradle . api . Nullable ; import org . gradle . api . Transformer ; import org . gradle . api . specs . Spec ; import org . gradle . testkit . runner . BuildResult ; import org . gradle . testkit . runner . BuildTask ; import org . gradle . testkit . runner . TaskOutcome ; import org . gradle . util . CollectionUtils ; import java . util . Collections ; import java . util . List ; public class DefaultBuildResult implements BuildResult { private final String output ; private final List < BuildTask > tasks ; public DefaultBuildResult ( String output , List < BuildTask > tasks ) { this . output = output ; this . tasks = tasks ; } @Override public String getOutput ( ) { return output ; } @Override public List < BuildTask > getTasks ( ) { return Collections . unmodifiableList ( tasks ) ; } @Override public List < BuildTask > tasks ( final TaskOutcome outcome ) { return Collections . unmodifiableList ( CollectionUtils . filter ( tasks , new Spec < BuildTask > ( ) { public boolean isSatisfiedBy ( BuildTask element ) { return element . getOutcome ( ) = = outcome ; } } ) ) ; } @Override public List < String > taskPaths ( TaskOutcome outcome ) { return Collections . unmodifiableList ( CollectionUtils . collect ( tasks ( outcome ) , new Transformer < String , BuildTask > ( ) { public String transform ( BuildTask buildTask ) { return buildTask . getPath ( ) ; } } ) ) ; } @Nullable @Override public BuildTask task ( String taskPath ) { for ( BuildTask task : tasks ) { if ( task . getPath ( ) . equals ( taskPath ) ) { return task ; } } return null ; } } 

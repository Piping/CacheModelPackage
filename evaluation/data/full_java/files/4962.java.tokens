package org . elasticsearch . action . admin . cluster . node . stats ; import org . elasticsearch . action . support . nodes . BaseNodesResponse ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import java . io . IOException ; public class NodesStatsResponse extends BaseNodesResponse < NodeStats > implements ToXContent { NodesStatsResponse ( ) { } public NodesStatsResponse ( ClusterName clusterName , NodeStats [ ] nodes ) { super ( clusterName , nodes ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; nodes = new NodeStats [ in . readVInt ( ) ] ; for ( int i = <int> ; i < nodes . length ; i + + ) { nodes [ i ] = NodeStats . readNodeStats ( in ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( nodes . length ) ; for ( NodeStats node : nodes ) { node . writeTo ( out ) ; } } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . field ( <str> , getClusterName ( ) . value ( ) ) ; builder . startObject ( <str> ) ; for ( NodeStats nodeStats : this ) { builder . startObject ( nodeStats . getNode ( ) . id ( ) , XContentBuilder . FieldCaseConversion . NONE ) ; builder . field ( <str> , nodeStats . getTimestamp ( ) ) ; nodeStats . toXContent ( builder , params ) ; builder . endObject ( ) ; } builder . endObject ( ) ; return builder ; } @Override public String toString ( ) { try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) ; builder . startObject ( ) ; toXContent ( builder , EMPTY_PARAMS ) ; builder . endObject ( ) ; return builder . string ( ) ; } catch ( IOException e ) { return <str> + e . getMessage ( ) + <str> ; } } } 

package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import java . nio . charset . CharacterCodingException ; import java . nio . charset . Charset ; import org . apache . cassandra . cql3 . Constants ; import org . apache . cassandra . cql3 . Json ; import org . apache . cassandra . cql3 . CQL3Type ; import org . apache . cassandra . cql3 . Term ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . serializers . TypeSerializer ; import org . apache . cassandra . serializers . UTF8Serializer ; import org . apache . cassandra . utils . ByteBufferUtil ; public class UTF8Type extends AbstractType < String > { public static final UTF8Type instance = new UTF8Type ( ) ; UTF8Type ( ) { super ( ComparisonType . BYTE_ORDER ) ; } public ByteBuffer fromString ( String source ) { return decompose ( source ) ; } @Override public Term fromJSONObject ( Object parsed ) throws MarshalException { try { return new Constants . Value ( fromString ( ( String ) parsed ) ) ; } catch ( ClassCastException exc ) { throw new MarshalException ( String . format ( <str> , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; } } @Override public String toJSONString ( ByteBuffer buffer , int protocolVersion ) { try { return <str> + new String ( Json . JSON_STRING_ENCODER . quoteAsString ( ByteBufferUtil . string ( buffer , Charset . forName ( <str> ) ) ) ) + <str> ; } catch ( CharacterCodingException exc ) { throw new AssertionError ( <str> , exc ) ; } } @Override public boolean isCompatibleWith ( AbstractType < ? > previous ) { return this = = previous | | previous = = AsciiType . instance ; } public CQL3Type asCQL3Type ( ) { return CQL3Type . Native . TEXT ; } public TypeSerializer < String > getSerializer ( ) { return UTF8Serializer . instance ; } } 

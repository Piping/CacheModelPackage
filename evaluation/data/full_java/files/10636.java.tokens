package com . google . common . util . concurrent ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . util . concurrent . atomic . AtomicReferenceArray ; public class AtomicsTest extends TestCase { private static final Object OBJECT = new Object ( ) ; public void testNewReference ( ) throws Exception { assertEquals ( null , Atomics . newReference ( ) . get ( ) ) ; } public void testNewReference_withInitialValue ( ) throws Exception { assertEquals ( null , Atomics . newReference ( null ) . get ( ) ) ; assertEquals ( OBJECT , Atomics . newReference ( OBJECT ) . get ( ) ) ; } public void testNewReferenceArray_withLength ( ) throws Exception { int length = <int> ; AtomicReferenceArray < String > refArray = Atomics . newReferenceArray ( length ) ; for ( int i = <int> ; i < length ; + + i ) { assertEquals ( null , refArray . get ( i ) ) ; } try { refArray . get ( length ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } } public void testNewReferenceArray_withNegativeLength ( ) throws Exception { try { Atomics . newReferenceArray ( - <int> ) ; fail ( ) ; } catch ( NegativeArraySizeException expected ) { } } public void testNewReferenceArray_withStringArray ( ) throws Exception { String [ ] array = { <str> , <str> , <str> } ; AtomicReferenceArray < String > refArray = Atomics . newReferenceArray ( array ) ; for ( int i = <int> ; i < array . length ; + + i ) { assertEquals ( array [ i ] , refArray . get ( i ) ) ; } try { refArray . get ( array . length ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } } public void testNewReferenceArray_withNullArray ( ) throws Exception { try { Atomics . newReferenceArray ( null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testNullPointers ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicConstructors ( Atomics . class ) ; tester . testAllPublicStaticMethods ( Atomics . class ) ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanFirstQuery ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import java . io . IOException ; import static org . elasticsearch . index . query . QueryBuilders . spanTermQuery ; import static org . hamcrest . CoreMatchers . instanceOf ; public class SpanFirstQueryBuilderTests extends AbstractQueryTestCase < SpanFirstQueryBuilder > { @Override protected SpanFirstQueryBuilder doCreateTestQueryBuilder ( ) { SpanTermQueryBuilder [ ] spanTermQueries = new SpanTermQueryBuilderTests ( ) . createSpanTermQueryBuilders ( <int> ) ; return new SpanFirstQueryBuilder ( spanTermQueries [ <int> ] , randomIntBetween ( <int> , <int> ) ) ; } @Override protected void doAssertLuceneQuery ( SpanFirstQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( SpanFirstQuery . class ) ) ; } public void testParseEnd ( ) throws IOException { { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; builder . startObject ( SpanFirstQueryBuilder . NAME ) ; builder . field ( <str> ) ; spanTermQuery ( <str> , <str> ) . toXContent ( builder , null ) ; builder . endObject ( ) ; builder . endObject ( ) ; try { parseQuery ( builder . string ( ) ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; builder . startObject ( SpanFirstQueryBuilder . NAME ) ; builder . field ( <str> , <int> ) ; builder . endObject ( ) ; builder . endObject ( ) ; try { parseQuery ( builder . string ( ) ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; SpanFirstQueryBuilder parsed = ( SpanFirstQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <int> , parsed . end ( ) ) ; assertEquals ( json , <str> , ( ( SpanTermQueryBuilder ) parsed . innerQuery ( ) ) . value ( ) ) ; } } 

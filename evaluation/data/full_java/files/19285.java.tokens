package io . netty . handler . codec . http . cookie ; import org . junit . Test ; import io . netty . handler . codec . http . HttpHeaderDateFormat ; import java . util . Date ; import java . util . Iterator ; import java . util . Set ; import static org . junit . Assert . * ; public class ServerCookieDecoderTest { @Test public void testDecodingSingleCookie ( ) { String cookieString = <str> ; cookieString = cookieString . replace ( <str> , HttpHeaderDateFormat . get ( ) . format ( new Date ( System . currentTimeMillis ( ) + <int> ) ) ) ; Set < Cookie > cookies = ServerCookieDecoder . STRICT . decode ( cookieString ) ; assertEquals ( <int> , cookies . size ( ) ) ; Cookie cookie = cookies . iterator ( ) . next ( ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . value ( ) ) ; } @Test public void testDecodingMultipleCookies ( ) { String c1 = <str> ; String c2 = <str> ; String c3 = <str> ; Set < Cookie > cookies = ServerCookieDecoder . STRICT . decode ( c1 + c2 + c3 ) ; assertEquals ( <int> , cookies . size ( ) ) ; Iterator < Cookie > it = cookies . iterator ( ) ; Cookie cookie = it . next ( ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . value ( ) ) ; cookie = it . next ( ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . value ( ) ) ; cookie = it . next ( ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . value ( ) ) ; } @Test public void testDecodingGoogleAnalyticsCookie ( ) { String source = <str> + <str> + <str> + <str> + <str> + <str> ; Set < Cookie > cookies = ServerCookieDecoder . STRICT . decode ( source ) ; Iterator < Cookie > it = cookies . iterator ( ) ; Cookie c ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> , c . value ( ) ) ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> , c . value ( ) ) ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> , c . value ( ) ) ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> + <str> , c . value ( ) ) ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> , c . value ( ) ) ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> , c . value ( ) ) ; assertFalse ( it . hasNext ( ) ) ; } @Test public void testDecodingLongValue ( ) { String longValue = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; Set < Cookie > cookies = ServerCookieDecoder . STRICT . decode ( <str> + longValue + <str> ) ; assertEquals ( <int> , cookies . size ( ) ) ; Cookie c = cookies . iterator ( ) . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( longValue , c . value ( ) ) ; } @Test public void testDecodingOldRFC2965Cookies ( ) { String source = <str> + <str> + <str> ; Set < Cookie > cookies = ServerCookieDecoder . STRICT . decode ( source ) ; Iterator < Cookie > it = cookies . iterator ( ) ; Cookie c ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> , c . value ( ) ) ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> , c . value ( ) ) ; assertFalse ( it . hasNext ( ) ) ; } @Test public void testRejectCookieValueWithSemicolon ( ) { Set < Cookie > cookies = ServerCookieDecoder . STRICT . decode ( <str> ) ; assertTrue ( cookies . isEmpty ( ) ) ; } } 

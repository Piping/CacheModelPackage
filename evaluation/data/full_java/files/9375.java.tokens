package com . google . common . eventbus ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . VisibleForTesting ; import com . google . j2objc . annotations . Weak ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . concurrent . Executor ; import javax . annotation . Nullable ; class Subscriber { static Subscriber create ( EventBus bus , Object listener , Method method ) { return isDeclaredThreadSafe ( method ) ? new Subscriber ( bus , listener , method ) : new SynchronizedSubscriber ( bus , listener , method ) ; } @Weak private EventBus bus ; @VisibleForTesting final Object target ; private final Method method ; private final Executor executor ; private Subscriber ( EventBus bus , Object target , Method method ) { this . bus = bus ; this . target = checkNotNull ( target ) ; this . method = method ; method . setAccessible ( true ) ; this . executor = bus . executor ( ) ; } final void dispatchEvent ( final Object event ) { executor . execute ( new Runnable ( ) { @Override public void run ( ) { try { invokeSubscriberMethod ( event ) ; } catch ( InvocationTargetException e ) { bus . handleSubscriberException ( e . getCause ( ) , context ( event ) ) ; } } } ) ; } @VisibleForTesting void invokeSubscriberMethod ( Object event ) throws InvocationTargetException { try { method . invoke ( target , checkNotNull ( event ) ) ; } catch ( IllegalArgumentException e ) { throw new Error ( <str> + event , e ) ; } catch ( IllegalAccessException e ) { throw new Error ( <str> + event , e ) ; } catch ( InvocationTargetException e ) { if ( e . getCause ( ) instanceof Error ) { throw ( Error ) e . getCause ( ) ; } throw e ; } } private SubscriberExceptionContext context ( Object event ) { return new SubscriberExceptionContext ( bus , event , target , method ) ; } @Override public final int hashCode ( ) { return ( <int> + method . hashCode ( ) ) * <int> + System . identityHashCode ( target ) ; } @Override public final boolean equals ( @Nullable Object obj ) { if ( obj instanceof Subscriber ) { Subscriber that = ( Subscriber ) obj ; return target = = that . target & & method . equals ( that . method ) ; } return false ; } private static boolean isDeclaredThreadSafe ( Method method ) { return method . getAnnotation ( AllowConcurrentEvents . class ) ! = null ; } @VisibleForTesting static final class SynchronizedSubscriber extends Subscriber { private SynchronizedSubscriber ( EventBus bus , Object target , Method method ) { super ( bus , target , method ) ; } @Override void invokeSubscriberMethod ( Object event ) throws InvocationTargetException { synchronized ( this ) { super . invokeSubscriberMethod ( event ) ; } } } } 

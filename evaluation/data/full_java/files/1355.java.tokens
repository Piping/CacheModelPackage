package org . apache . cassandra . cql3 ; import org . antlr . runtime . CharStream ; import org . antlr . runtime . Token ; import org . junit . Test ; import static org . junit . Assert . assertEquals ; public class ErrorCollectorTest { @Test public void testAppendSnippetWithEmptyQuery ( ) { String query = <str> ; ErrorCollector collector = new ErrorCollector ( query ) ; StringBuilder builder = new StringBuilder ( ) ; Token from = new MockToken ( <int> , <int> , <str> ) ; Token to = new MockToken ( <int> , <int> , <str> ) ; Token offending = new MockToken ( <int> , <int> , <str> ) ; collector . appendSnippet ( builder , from , to , offending ) ; String expected = <str> ; assertEquals ( expected , builder . toString ( ) ) ; } @Test public void testAppendSnippetWithOneLines ( ) { String query = <str> ; ErrorCollector collector = new ErrorCollector ( query ) ; StringBuilder builder = new StringBuilder ( ) ; Token from = new MockToken ( <int> , <int> , <str> ) ; Token to = new MockToken ( <int> , <int> , <str> ) ; Token offending = new MockToken ( <int> , <int> , <str> ) ; collector . appendSnippet ( builder , from , to , offending ) ; String expected = <str> ; assertEquals ( expected , builder . toString ( ) ) ; } @Test public void testAppendSnippetOnSecondLine ( ) { String query = <str> + <str> ; ErrorCollector collector = new ErrorCollector ( query ) ; StringBuilder builder = new StringBuilder ( ) ; Token from = new MockToken ( <int> , <int> , <str> ) ; Token to = new MockToken ( <int> , <int> , <str> ) ; Token offending = new MockToken ( <int> , <int> , <str> ) ; collector . appendSnippet ( builder , from , to , offending ) ; String expected = <str> ; assertEquals ( expected , builder . toString ( ) ) ; } @Test public void testAppendSnippetWithSnippetOverTwoLines ( ) { String query = <str> + <str> ; ErrorCollector collector = new ErrorCollector ( query ) ; StringBuilder builder = new StringBuilder ( ) ; Token from = new MockToken ( <int> , <int> , <str> ) ; Token to = new MockToken ( <int> , <int> , <str> ) ; Token offending = new MockToken ( <int> , <int> , <str> ) ; collector . appendSnippet ( builder , from , to , offending ) ; String expected = <str> ; assertEquals ( expected , builder . toString ( ) ) ; } @Test public void testAppendSnippetWithInvalidToken ( ) { String query = <str> ; ErrorCollector collector = new ErrorCollector ( query ) ; StringBuilder builder = new StringBuilder ( ) ; Token from = new MockToken ( <int> , <int> , <str> ) ; Token to = new MockToken ( <int> , - <int> , <str> ) ; Token offending = new MockToken ( <int> , - <int> , <str> ) ; collector . appendSnippet ( builder , from , to , offending ) ; String expected = <str> ; assertEquals ( expected , builder . toString ( ) ) ; } @Test public void testAppendSnippetWithInvalidToToken ( ) { String query = <str> ; ErrorCollector collector = new ErrorCollector ( query ) ; StringBuilder builder = new StringBuilder ( ) ; Token from = new MockToken ( <int> , <int> , <str> ) ; Token to = new MockToken ( <int> , - <int> , <str> ) ; Token offending = new MockToken ( <int> , <int> , <str> ) ; collector . appendSnippet ( builder , from , to , offending ) ; assertEquals ( <str> , builder . toString ( ) ) ; } private final static class MockToken implements Token { private int line ; private int charPositionInLine ; private String text ; public MockToken ( int line , int charPositionInLine , String text ) { this . line = line ; this . charPositionInLine = charPositionInLine ; this . text = text ; } @Override public int getChannel ( ) { throw new UnsupportedOperationException ( ) ; } @Override public int getCharPositionInLine ( ) { return charPositionInLine ; } @Override public CharStream getInputStream ( ) { throw new UnsupportedOperationException ( ) ; } @Override public int getLine ( ) { return line ; } @Override public String getText ( ) { return text ; } @Override public int getTokenIndex ( ) { throw new UnsupportedOperationException ( ) ; } @Override public int getType ( ) { throw new UnsupportedOperationException ( ) ; } @Override public void setChannel ( int channel ) { throw new UnsupportedOperationException ( ) ; } @Override public void setCharPositionInLine ( int charPositionInLine ) { this . charPositionInLine = charPositionInLine ; } @Override public void setInputStream ( CharStream inputStream ) { throw new UnsupportedOperationException ( ) ; } @Override public void setLine ( int line ) { this . line = line ; } @Override public void setText ( String text ) { this . text = text ; } @Override public void setTokenIndex ( int tokenIndex ) { throw new UnsupportedOperationException ( ) ; } @Override public void setType ( int type ) { throw new UnsupportedOperationException ( ) ; } } } 

package jcuda ; import java . nio . * ; class BufferUtils { public static ByteBuffer createByteBuffer ( int elements ) { return ByteBuffer . allocateDirect ( elements ) ; } public static CharBuffer createCharBuffer ( int elements ) { ByteBuffer byteBuffer = ByteBuffer . allocateDirect ( elements * <int> ) ; byteBuffer . order ( ByteOrder . nativeOrder ( ) ) ; return byteBuffer . asCharBuffer ( ) ; } public static ShortBuffer createShortBuffer ( int elements ) { ByteBuffer byteBuffer = ByteBuffer . allocateDirect ( elements * <int> ) ; byteBuffer . order ( ByteOrder . nativeOrder ( ) ) ; return byteBuffer . asShortBuffer ( ) ; } public static IntBuffer createIntBuffer ( int elements ) { ByteBuffer byteBuffer = ByteBuffer . allocateDirect ( elements * <int> ) ; byteBuffer . order ( ByteOrder . nativeOrder ( ) ) ; return byteBuffer . asIntBuffer ( ) ; } public static FloatBuffer createFloatBuffer ( int elements ) { ByteBuffer byteBuffer = ByteBuffer . allocateDirect ( elements * <int> ) ; byteBuffer . order ( ByteOrder . nativeOrder ( ) ) ; return byteBuffer . asFloatBuffer ( ) ; } public static LongBuffer createLongBuffer ( int elements ) { ByteBuffer byteBuffer = ByteBuffer . allocateDirect ( elements * <int> ) ; byteBuffer . order ( ByteOrder . nativeOrder ( ) ) ; return byteBuffer . asLongBuffer ( ) ; } public static DoubleBuffer createDoubleBuffer ( int elements ) { ByteBuffer byteBuffer = ByteBuffer . allocateDirect ( elements * <int> ) ; byteBuffer . order ( ByteOrder . nativeOrder ( ) ) ; return byteBuffer . asDoubleBuffer ( ) ; } private BufferUtils ( ) { } } 

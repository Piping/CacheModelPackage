package org . elasticsearch . index . query ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . script . * ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class TemplateQueryParser implements QueryParser < TemplateQueryBuilder > { private final static Map < String , ScriptService . ScriptType > parametersToTypes = new HashMap < > ( ) ; static { parametersToTypes . put ( <str> , ScriptService . ScriptType . INLINE ) ; parametersToTypes . put ( <str> , ScriptService . ScriptType . FILE ) ; parametersToTypes . put ( <str> , ScriptService . ScriptType . INDEXED ) ; } @Override public String [ ] names ( ) { return new String [ ] { TemplateQueryBuilder . NAME } ; } @Override @Nullable public TemplateQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; Template template = parse ( parser , parseContext . parseFieldMatcher ( ) ) ; return new TemplateQueryBuilder ( template ) ; } public static Template parse ( XContentParser parser , ParseFieldMatcher parseFieldMatcher , String . . . parameters ) throws IOException { Map < String , ScriptService . ScriptType > parameterMap = new HashMap < > ( parametersToTypes ) ; for ( String parameter : parameters ) { parameterMap . put ( parameter , ScriptService . ScriptType . INLINE ) ; } return parse ( parser , parameterMap , parseFieldMatcher ) ; } public static Template parse ( String defaultLang , XContentParser parser , ParseFieldMatcher parseFieldMatcher , String . . . parameters ) throws IOException { Map < String , ScriptService . ScriptType > parameterMap = new HashMap < > ( parametersToTypes ) ; for ( String parameter : parameters ) { parameterMap . put ( parameter , ScriptService . ScriptType . INLINE ) ; } return Template . parse ( parser , parameterMap , defaultLang , parseFieldMatcher ) ; } public static Template parse ( XContentParser parser , ParseFieldMatcher parseFieldMatcher ) throws IOException { return parse ( parser , parametersToTypes , parseFieldMatcher ) ; } public static Template parse ( XContentParser parser , Map < String , ScriptService . ScriptType > parameterMap , ParseFieldMatcher parseFieldMatcher ) throws IOException { return Template . parse ( parser , parameterMap , parseFieldMatcher ) ; } @Override public TemplateQueryBuilder getBuilderPrototype ( ) { return TemplateQueryBuilder . PROTOTYPE ; } } 

package org . elasticsearch . plan . a ; public class DivisionTests extends ScriptTestCase { public void testInt ( ) throws Exception { assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> / <int> , exec ( <str> ) ) ; assertEquals ( ( <int> / <int> ) / <int> , exec ( <str> ) ) ; assertEquals ( <int> / ( <int> / <int> ) , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; } public void testIntConst ( ) throws Exception { assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> / <int> , exec ( <str> ) ) ; assertEquals ( ( <int> / <int> ) / <int> , exec ( <str> ) ) ; assertEquals ( <int> / ( <int> / <int> ) , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; } public void testLong ( ) throws Exception { assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> / <int> , exec ( <str> ) ) ; assertEquals ( ( <int> / <int> ) / <int> , exec ( <str> ) ) ; assertEquals ( <int> / ( <int> / <int> ) , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> L / <int> , exec ( <str> ) ) ; } public void testLongConst ( ) throws Exception { assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> / <int> / <int> , exec ( <str> ) ) ; assertEquals ( ( <int> / <int> ) / <int> , exec ( <str> ) ) ; assertEquals ( <int> / ( <int> / <int> ) , exec ( <str> ) ) ; assertEquals ( <int> / <int> , exec ( <str> ) ) ; assertEquals ( <int> L / <int> , exec ( <str> ) ) ; } public void testFloat ( ) throws Exception { assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <int> F , exec ( <str> ) ) ; assertEquals ( <int> F / <float> / <float> , exec ( <str> ) ) ; assertEquals ( ( <int> F / <float> ) / <float> , exec ( <str> ) ) ; assertEquals ( <int> F / ( <float> / <float> ) , exec ( <str> ) ) ; assertEquals ( <int> F / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; } public void testFloatConst ( ) throws Exception { assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <int> F , exec ( <str> ) ) ; assertEquals ( <int> F / <float> / <float> , exec ( <str> ) ) ; assertEquals ( ( <int> F / <float> ) / <float> , exec ( <str> ) ) ; assertEquals ( <int> F / ( <float> / <float> ) , exec ( <str> ) ) ; assertEquals ( <int> F / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; } public void testDouble ( ) throws Exception { assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> / <float> , exec ( <str> ) ) ; assertEquals ( ( <float> / <float> ) / <float> , exec ( <str> ) ) ; assertEquals ( <float> / ( <float> / <float> ) , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; } public void testDoubleConst ( ) throws Exception { assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> / <float> , exec ( <str> ) ) ; assertEquals ( ( <float> / <float> ) / <float> , exec ( <str> ) ) ; assertEquals ( <float> / ( <float> / <float> ) , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; assertEquals ( <float> / <float> , exec ( <str> ) ) ; } public void testDivideByZero ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testDivideByZeroConst ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } } 

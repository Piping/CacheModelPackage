package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . CircleShape ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . FixtureDef ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; public class CharacterCollision extends Box2DTest { @Override protected void createWorld ( World world ) { { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . setRadius ( <int> ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( - <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( - <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( - <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <int> , <int> , new Vector2 ( <int> , <int> ) , <int> ) ; ground . createFixture ( shape , <int> ) ; shape . setAsBox ( <int> , <int> , new Vector2 ( <int> , <int> ) , <int> ) ; ground . createFixture ( shape , <int> ) ; shape . setAsBox ( <int> , <int> , new Vector2 ( <int> , <int> ) , <int> ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; float d = <int> * <int> * <float> ; shape . setRadius ( <int> ) ; shape . set ( new Vector2 ( - <int> + d , <int> ) , new Vector2 ( <int> - d , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( <int> , <int> + d ) , new Vector2 ( <int> , <int> - d ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( <int> - d , <int> ) , new Vector2 ( - <int> + d , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . set ( new Vector2 ( - <int> , <int> - d ) , new Vector2 ( - <int> , <int> + d ) ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; bd . position . set ( - <int> , <int> ) ; bd . type = BodyType . DynamicBody ; bd . fixedRotation = true ; bd . allowSleep = false ; Body body = world . createBody ( bd ) ; PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <float> , <float> ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; body . createFixture ( fd ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; bd . position . set ( - <int> , <int> ) ; bd . type = BodyType . DynamicBody ; bd . fixedRotation = true ; bd . allowSleep = false ; Body body = world . createBody ( bd ) ; float angle = <int> ; float delta = ( float ) Math . PI / <int> ; Vector2 [ ] vertices = new Vector2 [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) { vertices [ i ] = new Vector2 ( <float> * ( float ) Math . cos ( angle ) , <float> * ( float ) Math . sin ( angle ) ) ; angle + = delta ; } PolygonShape shape = new PolygonShape ( ) ; shape . set ( vertices ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; body . createFixture ( fd ) ; shape . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; bd . position . set ( <int> , <int> ) ; bd . type = BodyType . DynamicBody ; bd . fixedRotation = true ; bd . allowSleep = false ; Body body = world . createBody ( bd ) ; CircleShape shape = new CircleShape ( ) ; shape . setRadius ( <float> ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; body . createFixture ( fd ) ; shape . dispose ( ) ; } } } 

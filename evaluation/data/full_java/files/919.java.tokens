package org . apache . cassandra . serializers ; import java . nio . BufferUnderflowException ; import java . nio . ByteBuffer ; import java . util . * ; public class SetSerializer < T > extends CollectionSerializer < Set < T > > { private static final Map < TypeSerializer < ? > , SetSerializer > instances = new HashMap < TypeSerializer < ? > , SetSerializer > ( ) ; public final TypeSerializer < T > elements ; private final Comparator < ByteBuffer > comparator ; public static synchronized < T > SetSerializer < T > getInstance ( TypeSerializer < T > elements , Comparator < ByteBuffer > elementComparator ) { SetSerializer < T > t = instances . get ( elements ) ; if ( t = = null ) { t = new SetSerializer < T > ( elements , elementComparator ) ; instances . put ( elements , t ) ; } return t ; } private SetSerializer ( TypeSerializer < T > elements , Comparator < ByteBuffer > comparator ) { this . elements = elements ; this . comparator = comparator ; } public List < ByteBuffer > serializeValues ( Set < T > values ) { List < ByteBuffer > buffers = new ArrayList < > ( values . size ( ) ) ; for ( T value : values ) buffers . add ( elements . serialize ( value ) ) ; Collections . sort ( buffers , comparator ) ; return buffers ; } public int getElementCount ( Set < T > value ) { return value . size ( ) ; } public void validateForNativeProtocol ( ByteBuffer bytes , int version ) { try { ByteBuffer input = bytes . duplicate ( ) ; int n = readCollectionSize ( input , version ) ; for ( int i = <int> ; i < n ; i + + ) elements . validate ( readValue ( input , version ) ) ; if ( input . hasRemaining ( ) ) throw new MarshalException ( <str> ) ; } catch ( BufferUnderflowException e ) { throw new MarshalException ( <str> ) ; } } public Set < T > deserializeForNativeProtocol ( ByteBuffer bytes , int version ) { try { ByteBuffer input = bytes . duplicate ( ) ; int n = readCollectionSize ( input , version ) ; Set < T > l = new LinkedHashSet < T > ( n ) ; for ( int i = <int> ; i < n ; i + + ) { ByteBuffer databb = readValue ( input , version ) ; elements . validate ( databb ) ; l . add ( elements . deserialize ( databb ) ) ; } if ( input . hasRemaining ( ) ) throw new MarshalException ( <str> ) ; return l ; } catch ( BufferUnderflowException e ) { throw new MarshalException ( <str> ) ; } } public String toString ( Set < T > value ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( <str> ) ; boolean isFirst = true ; for ( T element : value ) { if ( isFirst ) { isFirst = false ; } else { sb . append ( <str> ) ; } sb . append ( elements . toString ( element ) ) ; } sb . append ( <str> ) ; return sb . toString ( ) ; } public Class < Set < T > > getType ( ) { return ( Class ) Set . class ; } } 

package org . gradle . cache . internal . cacheops ; import java . util . HashMap ; import java . util . Map ; import static java . lang . Thread . currentThread ; public class CacheAccessOperationsStack { private final Map < Thread , CacheOperationStack > perThreadStacks = new HashMap < Thread , CacheOperationStack > ( ) ; public void pushCacheAction ( String operationDisplayName ) { getStackForCurrentThread ( ) . pushCacheAction ( operationDisplayName ) ; } public void popCacheAction ( ) { CacheOperationStack stack = getStackForCurrentThread ( ) ; stack . popCacheAction ( ) ; if ( stack . isEmpty ( ) ) { perThreadStacks . remove ( currentThread ( ) ) ; } } public boolean isInCacheAction ( ) { CacheOperationStack stack = perThreadStacks . get ( currentThread ( ) ) ; return stack ! = null & & stack . isInCacheAction ( ) ; } public void pushLongRunningOperation ( String operationDisplayName ) { getStackForCurrentThread ( ) . pushLongRunningOperation ( operationDisplayName ) ; } public void popLongRunningOperation ( ) { CacheOperationStack stack = getStackForCurrentThread ( ) ; stack . popLongRunningOperation ( ) ; if ( stack . isEmpty ( ) ) { perThreadStacks . remove ( currentThread ( ) ) ; } } public String getDescription ( ) { return getStackForCurrentThread ( ) . getDescription ( ) ; } public CacheOperationStack getStackForCurrentThread ( ) { CacheOperationStack stack = perThreadStacks . get ( currentThread ( ) ) ; if ( stack = = null ) { stack = new CacheOperationStack ( ) ; perThreadStacks . put ( currentThread ( ) , stack ) ; } return stack ; } } 

package org . elasticsearch . action . admin . indices . stats ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . engine . CommitStats ; import org . elasticsearch . index . engine . SegmentsStats ; import org . elasticsearch . index . translog . Translog ; import org . elasticsearch . test . ESSingleNodeTestCase ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . * ; public class IndicesStatsTests extends ESSingleNodeTestCase { public void testSegmentStatsEmptyIndex ( ) { createIndex ( <str> ) ; IndicesStatsResponse rsp = client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . get ( ) ; SegmentsStats stats = rsp . getTotal ( ) . getSegments ( ) ; assertEquals ( <int> , stats . getTermsMemoryInBytes ( ) ) ; assertEquals ( <int> , stats . getStoredFieldsMemoryInBytes ( ) ) ; assertEquals ( <int> , stats . getTermVectorsMemoryInBytes ( ) ) ; assertEquals ( <int> , stats . getNormsMemoryInBytes ( ) ) ; assertEquals ( <int> , stats . getDocValuesMemoryInBytes ( ) ) ; } public void testSegmentStats ( ) throws Exception { XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . field ( <str> , true ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . get ( ) ; IndicesStatsResponse rsp = client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . get ( ) ; SegmentsStats stats = rsp . getIndex ( <str> ) . getTotal ( ) . getSegments ( ) ; assertThat ( stats . getTermsMemoryInBytes ( ) , greaterThan ( <int> l ) ) ; assertThat ( stats . getStoredFieldsMemoryInBytes ( ) , greaterThan ( <int> l ) ) ; assertThat ( stats . getTermVectorsMemoryInBytes ( ) , greaterThan ( <int> l ) ) ; assertThat ( stats . getNormsMemoryInBytes ( ) , greaterThan ( <int> l ) ) ; assertThat ( stats . getDocValuesMemoryInBytes ( ) , greaterThan ( <int> l ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . get ( ) ; rsp = client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . get ( ) ; SegmentsStats stats2 = rsp . getIndex ( <str> ) . getTotal ( ) . getSegments ( ) ; assertThat ( stats2 . getTermsMemoryInBytes ( ) , greaterThan ( stats . getTermsMemoryInBytes ( ) ) ) ; assertThat ( stats2 . getStoredFieldsMemoryInBytes ( ) , greaterThan ( stats . getStoredFieldsMemoryInBytes ( ) ) ) ; assertThat ( stats2 . getTermVectorsMemoryInBytes ( ) , greaterThan ( stats . getTermVectorsMemoryInBytes ( ) ) ) ; assertThat ( stats2 . getNormsMemoryInBytes ( ) , greaterThan ( stats . getNormsMemoryInBytes ( ) ) ) ; assertThat ( stats2 . getDocValuesMemoryInBytes ( ) , greaterThan ( stats . getDocValuesMemoryInBytes ( ) ) ) ; } public void testCommitStats ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; IndicesStatsResponse rsp = client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . get ( ) ; for ( ShardStats shardStats : rsp . getIndex ( <str> ) . getShards ( ) ) { final CommitStats commitStats = shardStats . getCommitStats ( ) ; assertNotNull ( commitStats ) ; assertThat ( commitStats . getGeneration ( ) , greaterThan ( <int> l ) ) ; assertThat ( commitStats . getId ( ) , notNullValue ( ) ) ; assertThat ( commitStats . getUserData ( ) , hasKey ( Translog . TRANSLOG_GENERATION_KEY ) ) ; assertThat ( commitStats . getUserData ( ) , hasKey ( Translog . TRANSLOG_UUID_KEY ) ) ; } } } 

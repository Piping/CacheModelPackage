package org . elasticsearch . rest ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . ShardSearchFailure ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . search . SearchShardTarget ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . rest . FakeRestRequest ; import org . elasticsearch . transport . RemoteTransportException ; import java . io . FileNotFoundException ; import java . io . IOException ; import static org . hamcrest . Matchers . contains ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . not ; import static org . hamcrest . Matchers . notNullValue ; public class BytesRestResponseTests extends ESTestCase { public void testWithHeaders ( ) throws Exception { RestRequest request = new FakeRestRequest ( ) ; RestChannel channel = randomBoolean ( ) ? new DetailedExceptionRestChannel ( request ) : new SimpleExceptionRestChannel ( request ) ; BytesRestResponse response = new BytesRestResponse ( channel , new WithHeadersException ( ) ) ; assertThat ( response . getHeaders ( ) . get ( <str> ) , notNullValue ( ) ) ; assertThat ( response . getHeaders ( ) . get ( <str> ) , contains ( <str> , <str> ) ) ; assertThat ( response . getHeaders ( ) . get ( <str> ) , notNullValue ( ) ) ; assertThat ( response . getHeaders ( ) . get ( <str> ) , contains ( <str> , <str> ) ) ; } public void testSimpleExceptionMessage ( ) throws Exception { RestRequest request = new FakeRestRequest ( ) ; RestChannel channel = new SimpleExceptionRestChannel ( request ) ; Throwable t = new ElasticsearchException ( <str> , new FileNotFoundException ( <str> ) ) ; BytesRestResponse response = new BytesRestResponse ( channel , t ) ; String text = response . content ( ) . toUtf8 ( ) ; assertThat ( text , containsString ( <str> ) ) ; assertThat ( text , not ( containsString ( <str> ) ) ) ; assertThat ( text , not ( containsString ( <str> ) ) ) ; assertThat ( text , not ( containsString ( <str> ) ) ) ; } public void testDetailedExceptionMessage ( ) throws Exception { RestRequest request = new FakeRestRequest ( ) ; RestChannel channel = new DetailedExceptionRestChannel ( request ) ; Throwable t = new ElasticsearchException ( <str> , new FileNotFoundException ( <str> ) ) ; BytesRestResponse response = new BytesRestResponse ( channel , t ) ; String text = response . content ( ) . toUtf8 ( ) ; assertThat ( text , containsString ( <str> ) ) ; assertThat ( text , containsString ( <str> ) ) ; } public void testNonElasticsearchExceptionIsNotShownAsSimpleMessage ( ) throws Exception { RestRequest request = new FakeRestRequest ( ) ; RestChannel channel = new SimpleExceptionRestChannel ( request ) ; Throwable t = new Throwable ( <str> , new FileNotFoundException ( <str> ) ) ; BytesRestResponse response = new BytesRestResponse ( channel , t ) ; String text = response . content ( ) . toUtf8 ( ) ; assertThat ( text , not ( containsString ( <str> ) ) ) ; assertThat ( text , not ( containsString ( <str> ) ) ) ; assertThat ( text , not ( containsString ( <str> ) ) ) ; assertThat ( text , containsString ( <str> ) ) ; } public void testErrorTrace ( ) throws Exception { RestRequest request = new FakeRestRequest ( ) ; request . params ( ) . put ( <str> , <str> ) ; RestChannel channel = new DetailedExceptionRestChannel ( request ) ; Throwable t = new Throwable ( <str> , new FileNotFoundException ( <str> ) ) ; BytesRestResponse response = new BytesRestResponse ( channel , t ) ; String text = response . content ( ) . toUtf8 ( ) ; assertThat ( text , containsString ( <str> ) ) ; assertThat ( text , containsString ( <str> ) ) ; assertThat ( text , containsString ( <str> ) ) ; } public void testGuessRootCause ( ) throws IOException { RestRequest request = new FakeRestRequest ( ) ; RestChannel channel = new DetailedExceptionRestChannel ( request ) ; { Throwable t = new ElasticsearchException ( <str> , new FileNotFoundException ( <str> ) ) ; BytesRestResponse response = new BytesRestResponse ( channel , t ) ; String text = response . content ( ) . toUtf8 ( ) ; assertThat ( text , containsString ( <str> ) ) ; } { Throwable t = new FileNotFoundException ( <str> ) ; BytesRestResponse response = new BytesRestResponse ( channel , t ) ; String text = response . content ( ) . toUtf8 ( ) ; assertThat ( text , containsString ( <str> ) ) ; } } public void testNullThrowable ( ) throws Exception { RestRequest request = new FakeRestRequest ( ) ; RestChannel channel = new SimpleExceptionRestChannel ( request ) ; BytesRestResponse response = new BytesRestResponse ( channel , null ) ; String text = response . content ( ) . toUtf8 ( ) ; assertThat ( text , containsString ( <str> ) ) ; assertThat ( text , not ( containsString ( <str> ) ) ) ; } public void testConvert ( ) throws IOException { RestRequest request = new FakeRestRequest ( ) ; RestChannel channel = new DetailedExceptionRestChannel ( request ) ; ShardSearchFailure failure = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; ShardSearchFailure failure1 = new ShardSearchFailure ( new ParsingException ( <int> , <int> , <str> , null ) , new SearchShardTarget ( <str> , <str> , <int> ) ) ; SearchPhaseExecutionException ex = new SearchPhaseExecutionException ( <str> , <str> , new ShardSearchFailure [ ] { failure , failure1 } ) ; BytesRestResponse response = new BytesRestResponse ( channel , new RemoteTransportException ( <str> , ex ) ) ; String text = response . content ( ) . toUtf8 ( ) ; String expected = <str> ; assertEquals ( expected . trim ( ) , text . trim ( ) ) ; String stackTrace = ExceptionsHelper . stackTrace ( ex ) ; assertTrue ( stackTrace . contains ( <str> ) ) ; } public static class WithHeadersException extends ElasticsearchException { WithHeadersException ( ) { super ( <str> ) ; this . addHeader ( <str> , <str> , <str> ) ; this . addHeader ( <str> , <str> , <str> ) ; } } private static class SimpleExceptionRestChannel extends RestChannel { SimpleExceptionRestChannel ( RestRequest request ) { super ( request , false ) ; } @Override public void sendResponse ( RestResponse response ) { } } private static class DetailedExceptionRestChannel extends RestChannel { DetailedExceptionRestChannel ( RestRequest request ) { super ( request , true ) ; } @Override public void sendResponse ( RestResponse response ) { } } } 

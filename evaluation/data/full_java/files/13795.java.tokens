package org . gradle . launcher . daemon . client ; import org . gradle . api . GradleException ; import org . gradle . api . internal . specs . ExplainingSpec ; import org . gradle . api . internal . specs . ExplainingSpecs ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . id . IdGenerator ; import org . gradle . launcher . daemon . context . DaemonContext ; import org . gradle . launcher . daemon . context . DaemonInstanceDetails ; import org . gradle . launcher . daemon . logging . DaemonMessages ; import org . gradle . launcher . daemon . protocol . Stop ; import org . gradle . launcher . daemon . protocol . StopWhenIdle ; import java . util . Collection ; import java . util . HashSet ; import java . util . Set ; public class DaemonStopClient { private static final Logger LOGGER = Logging . getLogger ( DaemonClient . class ) ; private static final int STOP_TIMEOUT_SECONDS = <int> ; private final DaemonConnector connector ; private final IdGenerator < ? > idGenerator ; private final ExplainingSpec < DaemonContext > compatibilitySpec = ExplainingSpecs . satisfyAll ( ) ; private final StopDispatcher stopDispatcher ; public DaemonStopClient ( DaemonConnector connector , IdGenerator < ? > idGenerator ) { this . connector = connector ; this . idGenerator = idGenerator ; this . stopDispatcher = new StopDispatcher ( ) ; } public void gracefulStop ( Collection < DaemonInstanceDetails > daemons ) { for ( DaemonInstanceDetails daemon : daemons ) { DaemonClientConnection connection = connector . maybeConnect ( daemon ) ; if ( connection = = null ) { continue ; } try { LOGGER . debug ( <str> , daemon ) ; stopDispatcher . dispatch ( connection , new StopWhenIdle ( idGenerator . generateId ( ) ) ) ; LOGGER . lifecycle ( <str> ) ; } finally { connection . stop ( ) ; } } } public void stop ( ) { long start = System . currentTimeMillis ( ) ; long expiry = start + STOP_TIMEOUT_SECONDS * <int> ; Set < String > stopped = new HashSet < String > ( ) ; DaemonClientConnection connection = connector . maybeConnect ( compatibilitySpec ) ; if ( connection = = null ) { LOGGER . lifecycle ( DaemonMessages . NO_DAEMONS_RUNNING ) ; return ; } LOGGER . lifecycle ( <str> ) ; while ( connection ! = null & & System . currentTimeMillis ( ) < expiry ) { try { if ( stopped . add ( connection . getDaemon ( ) . getUid ( ) ) ) { LOGGER . debug ( <str> , connection . getDaemon ( ) ) ; stopDispatcher . dispatch ( connection , new Stop ( idGenerator . generateId ( ) ) ) ; LOGGER . lifecycle ( <str> ) ; } } finally { connection . stop ( ) ; } connection = connector . maybeConnect ( compatibilitySpec ) ; } if ( connection ! = null ) { throw new GradleException ( String . format ( <str> , ( System . currentTimeMillis ( ) - start ) / <int> ) ) ; } } } 

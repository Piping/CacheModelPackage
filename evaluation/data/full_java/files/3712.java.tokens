package org . eclipse . debug . internal . core . sourcelookup ; import java . io . IOException ; import java . util . HashMap ; import java . util . zip . ZipFile ; import org . eclipse . core . resources . IResourceChangeEvent ; import org . eclipse . core . resources . IResourceChangeListener ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchesListener2 ; public class SourceLookupUtils { private static HashMap < String , ZipFile > fgZipFileCache = new HashMap < String , ZipFile > ( <int> ) ; private static ArchiveCleaner fgCleaner = null ; public static ZipFile getZipFile ( String name ) throws IOException { synchronized ( fgZipFileCache ) { if ( fgCleaner = = null ) { fgCleaner = new ArchiveCleaner ( ) ; DebugPlugin . getDefault ( ) . getLaunchManager ( ) . addLaunchListener ( fgCleaner ) ; ResourcesPlugin . getWorkspace ( ) . addResourceChangeListener ( fgCleaner , IResourceChangeEvent . PRE_DELETE | IResourceChangeEvent . PRE_CLOSE ) ; } ZipFile zip = fgZipFileCache . get ( name ) ; if ( zip = = null ) { zip = new ZipFile ( name ) ; fgZipFileCache . put ( name , zip ) ; } return zip ; } } public static void closeArchives ( ) { synchronized ( fgZipFileCache ) { for ( ZipFile file : fgZipFileCache . values ( ) ) { synchronized ( file ) { try { file . close ( ) ; } catch ( IOException e ) { DebugPlugin . log ( e ) ; } } } fgZipFileCache . clear ( ) ; } } public static void shutdown ( ) { closeArchives ( ) ; if ( fgCleaner ! = null ) { DebugPlugin . getDefault ( ) . getLaunchManager ( ) . removeLaunchListener ( fgCleaner ) ; ResourcesPlugin . getWorkspace ( ) . removeResourceChangeListener ( fgCleaner ) ; } } static class ArchiveCleaner implements IResourceChangeListener , ILaunchesListener2 { @Override public void launchesRemoved ( ILaunch [ ] launches ) { for ( int i = <int> ; i < launches . length ; i + + ) { ILaunch launch = launches [ i ] ; if ( ! launch . isTerminated ( ) ) { SourceLookupUtils . closeArchives ( ) ; return ; } } } @Override public void launchesAdded ( ILaunch [ ] launches ) { } @Override public void launchesChanged ( ILaunch [ ] launches ) { } @Override public void resourceChanged ( IResourceChangeEvent event ) { SourceLookupUtils . closeArchives ( ) ; } @Override public void launchesTerminated ( ILaunch [ ] launches ) { SourceLookupUtils . closeArchives ( ) ; } } } 

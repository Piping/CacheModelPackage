package com . google . common . collect ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Predicate ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Map ; import java . util . Map . Entry ; @GwtIncompatible ( <str> ) public class FilteredMultimapTest extends TestCase { private static final Predicate < Map . Entry < String , Integer > > ENTRY_PREDICATE = new Predicate < Map . Entry < String , Integer > > ( ) { @Override public boolean apply ( Entry < String , Integer > entry ) { return ! <str> . equals ( entry . getKey ( ) ) & & ! ( ( Integer ) <int> ) . equals ( entry . getValue ( ) ) ; } } ; protected Multimap < String , Integer > create ( ) { Multimap < String , Integer > unfiltered = HashMultimap . create ( ) ; unfiltered . put ( <str> , <int> ) ; unfiltered . put ( <str> , <int> ) ; return Multimaps . filterEntries ( unfiltered , ENTRY_PREDICATE ) ; } private static final Predicate < String > KEY_PREDICATE = new Predicate < String > ( ) { @Override public boolean apply ( String key ) { return ! <str> . equals ( key ) ; } } ; public void testFilterKeys ( ) { Multimap < String , Integer > unfiltered = HashMultimap . create ( ) ; unfiltered . put ( <str> , <int> ) ; unfiltered . put ( <str> , <int> ) ; Multimap < String , Integer > filtered = Multimaps . filterKeys ( unfiltered , KEY_PREDICATE ) ; assertEquals ( <int> , filtered . size ( ) ) ; assertTrue ( filtered . containsEntry ( <str> , <int> ) ) ; } private static final Predicate < Integer > VALUE_PREDICATE = new Predicate < Integer > ( ) { @Override public boolean apply ( Integer value ) { return ! ( ( Integer ) <int> ) . equals ( value ) ; } } ; public void testFilterValues ( ) { Multimap < String , Integer > unfiltered = HashMultimap . create ( ) ; unfiltered . put ( <str> , <int> ) ; unfiltered . put ( <str> , <int> ) ; Multimap < String , Integer > filtered = Multimaps . filterValues ( unfiltered , VALUE_PREDICATE ) ; assertEquals ( <int> , filtered . size ( ) ) ; assertFalse ( filtered . containsEntry ( <str> , <int> ) ) ; assertTrue ( filtered . containsEntry ( <str> , <int> ) ) ; } public void testFilterFiltered ( ) { Multimap < String , Integer > unfiltered = HashMultimap . create ( ) ; unfiltered . put ( <str> , <int> ) ; unfiltered . put ( <str> , <int> ) ; unfiltered . put ( <str> , <int> ) ; Multimap < String , Integer > keyFiltered = Multimaps . filterKeys ( unfiltered , KEY_PREDICATE ) ; Multimap < String , Integer > filtered = Multimaps . filterValues ( keyFiltered , VALUE_PREDICATE ) ; assertEquals ( <int> , filtered . size ( ) ) ; assertTrue ( filtered . containsEntry ( <str> , <int> ) ) ; assertTrue ( filtered . keySet ( ) . retainAll ( Arrays . asList ( <str> , <str> ) ) ) ; assertEquals ( <int> , filtered . size ( ) ) ; } } 

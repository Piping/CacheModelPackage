package org . gradle . cache . internal ; import org . gradle . api . GradleException ; import org . gradle . internal . Factory ; import org . gradle . cache . PersistentStateCache ; import org . gradle . internal . serialize . InputStreamBackedDecoder ; import org . gradle . internal . serialize . OutputStreamBackedEncoder ; import org . gradle . internal . serialize . Serializer ; import java . io . * ; public class SimpleStateCache < T > implements PersistentStateCache < T > { private final FileAccess fileAccess ; private final Serializer < T > serializer ; private final File cacheFile ; public SimpleStateCache ( File cacheFile , FileAccess fileAccess , Serializer < T > serializer ) { this . cacheFile = cacheFile ; this . fileAccess = fileAccess ; this . serializer = serializer ; } public T get ( ) { return fileAccess . readFile ( new Factory < T > ( ) { public T create ( ) { return deserialize ( ) ; } } ) ; } public void set ( final T newValue ) { fileAccess . writeFile ( new Runnable ( ) { public void run ( ) { serialize ( newValue ) ; } } ) ; } public void update ( final UpdateAction < T > updateAction ) { fileAccess . updateFile ( new Runnable ( ) { public void run ( ) { T oldValue = deserialize ( ) ; T newValue = updateAction . update ( oldValue ) ; serialize ( newValue ) ; } } ) ; } private void serialize ( T newValue ) { try { OutputStreamBackedEncoder encoder = new OutputStreamBackedEncoder ( new BufferedOutputStream ( new FileOutputStream ( cacheFile ) ) ) ; try { serializer . write ( encoder , newValue ) ; } finally { encoder . close ( ) ; } } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , cacheFile ) , e ) ; } } private T deserialize ( ) { if ( ! cacheFile . isFile ( ) ) { return null ; } try { InputStreamBackedDecoder decoder = new InputStreamBackedDecoder ( new BufferedInputStream ( new FileInputStream ( cacheFile ) ) ) ; try { return serializer . read ( decoder ) ; } finally { decoder . close ( ) ; } } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , cacheFile ) , e ) ; } } } 

package org . gradle . tooling . internal . consumer . async ; import org . gradle . internal . concurrent . CompositeStoppable ; import org . gradle . internal . concurrent . ExecutorFactory ; import org . gradle . internal . concurrent . ServiceLifecycle ; import org . gradle . internal . concurrent . StoppableExecutor ; import org . gradle . tooling . internal . consumer . connection . ConsumerAction ; import org . gradle . tooling . internal . consumer . connection . ConsumerActionExecutor ; import org . gradle . tooling . internal . protocol . ResultHandlerVersion1 ; public class DefaultAsyncConsumerActionExecutor implements AsyncConsumerActionExecutor { private final ConsumerActionExecutor actionExecutor ; private final StoppableExecutor executor ; private final ServiceLifecycle lifecycle ; public DefaultAsyncConsumerActionExecutor ( ConsumerActionExecutor actionExecutor , ExecutorFactory executorFactory ) { this . actionExecutor = actionExecutor ; executor = executorFactory . create ( <str> ) ; lifecycle = new ServiceLifecycle ( actionExecutor . getDisplayName ( ) ) ; } public String getDisplayName ( ) { return actionExecutor . getDisplayName ( ) ; } public void stop ( ) { CompositeStoppable . stoppable ( lifecycle , executor , actionExecutor ) . stop ( ) ; } public < T > void run ( final ConsumerAction < ? extends T > action , final ResultHandlerVersion1 < ? super T > handler ) { lifecycle . use ( new Runnable ( ) { public void run ( ) { executor . execute ( new Runnable ( ) { public void run ( ) { T result ; try { result = actionExecutor . run ( action ) ; } catch ( Throwable t ) { handler . onFailure ( t ) ; return ; } handler . onComplete ( result ) ; } } ) ; } } ) ; } } 

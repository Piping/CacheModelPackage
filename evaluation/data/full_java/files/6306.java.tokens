package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . miscellaneous . KeepWordFilter ; import org . apache . lucene . analysis . miscellaneous . Lucene43KeepWordFilter ; import org . apache . lucene . analysis . util . CharArraySet ; import org . apache . lucene . util . Version ; import org . elasticsearch . env . Environment ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexSettings ; public class KeepWordFilterFactory extends AbstractTokenFilterFactory { private final CharArraySet keepWords ; private final boolean enablePositionIncrements ; private static final String KEEP_WORDS_KEY = <str> ; private static final String KEEP_WORDS_PATH_KEY = KEEP_WORDS_KEY + <str> ; private static final String KEEP_WORDS_CASE_KEY = KEEP_WORDS_KEY + <str> ; private static final String ENABLE_POS_INC_KEY = <str> ; public KeepWordFilterFactory ( IndexSettings indexSettings , Environment env , String name , Settings settings ) { super ( indexSettings , name , settings ) ; final String [ ] arrayKeepWords = settings . getAsArray ( KEEP_WORDS_KEY , null ) ; final String keepWordsPath = settings . get ( KEEP_WORDS_PATH_KEY , null ) ; if ( ( arrayKeepWords = = null & & keepWordsPath = = null ) | | ( arrayKeepWords ! = null & & keepWordsPath ! = null ) ) { throw new IllegalArgumentException ( <str> + KEEP_WORDS_KEY + <str> + KEEP_WORDS_PATH_KEY + <str> ) ; } if ( version . onOrAfter ( Version . LUCENE_4_4 ) & & settings . get ( ENABLE_POS_INC_KEY ) ! = null ) { throw new IllegalArgumentException ( ENABLE_POS_INC_KEY + <str> + <str> ) ; } enablePositionIncrements = version . onOrAfter ( Version . LUCENE_4_4 ) ? true : settings . getAsBoolean ( ENABLE_POS_INC_KEY , true ) ; this . keepWords = Analysis . getWordSet ( env , settings , KEEP_WORDS_KEY ) ; } @Override public TokenStream create ( TokenStream tokenStream ) { if ( version . onOrAfter ( Version . LUCENE_4_4 ) ) { return new KeepWordFilter ( tokenStream , keepWords ) ; } else { @SuppressWarnings ( <str> ) final TokenStream filter = new Lucene43KeepWordFilter ( enablePositionIncrements , tokenStream , keepWords ) ; return filter ; } } } 

package org . gradle . gradleplugin . foundation . request ; import org . gradle . api . logging . LogLevel ; import org . gradle . foundation . ProjectView ; import org . gradle . foundation . ipc . basic . ProcessLauncherServer ; import org . gradle . foundation . ipc . gradle . ExecuteGradleCommandServerProtocol ; import org . gradle . foundation . ipc . gradle . TaskListServerProtocol ; import org . gradle . foundation . queue . ExecutionQueue ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . logging . ShowStacktrace ; import java . io . File ; import java . util . List ; public class RefreshTaskListRequest extends AbstractRequest { public static final Type TYPE = new Type ( ) { } ; private GradlePluginLord gradlePluginLord ; public RefreshTaskListRequest ( long requestID , String fullCommandLine , ExecutionQueue . RequestCancellation cancellation , GradlePluginLord gradlePluginLord ) { super ( requestID , fullCommandLine , <str> , false , cancellation ) ; this . gradlePluginLord = gradlePluginLord ; } public ProcessLauncherServer . Protocol createServerProtocol ( LogLevel logLevel , ShowStacktrace stackTraceLevel , File currentDirectory , File gradleHomeDirectory , File customGradleExecutor ) { executionInteraction . reportExecutionStarted ( ) ; ExecutionInteractionWrapper wrapper = new ExecutionInteractionWrapper ( executionInteraction ) ; return new TaskListServerProtocol ( currentDirectory , gradleHomeDirectory , customGradleExecutor , getFullCommandLine ( ) , logLevel , stackTraceLevel , wrapper ) ; } private class ExecutionInteractionWrapper implements TaskListServerProtocol . ExecutionInteraction { private ExecuteGradleCommandServerProtocol . ExecutionInteraction executionInteraction ; private ExecutionInteractionWrapper ( ExecuteGradleCommandServerProtocol . ExecutionInteraction executionInteraction ) { this . executionInteraction = executionInteraction ; } public void reportExecutionStarted ( ) { executionInteraction . reportExecutionStarted ( ) ; } public void reportExecutionFinished ( boolean wasSuccessful , String message , Throwable throwable ) { executionInteraction . reportExecutionFinished ( wasSuccessful , message , throwable ) ; } public void projectsPopulated ( List < ProjectView > projects ) { gradlePluginLord . setProjects ( projects ) ; } public void reportLiveOutput ( String message ) { executionInteraction . reportLiveOutput ( message ) ; } } public void executeAgain ( GradlePluginLord gradlePluginLord ) { gradlePluginLord . addRefreshRequestToQueue ( ) ; } public Type getType ( ) { return TYPE ; } } 

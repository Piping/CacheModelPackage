package com . badlogic . gdx . utils . compression ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; public class Lzma { static class CommandLine { public static final int kEncode = <int> ; public static final int kDecode = <int> ; public static final int kBenchmak = <int> ; public int Command = - <int> ; public int NumBenchmarkPasses = <int> ; public int DictionarySize = <int> < < <int> ; public boolean DictionarySizeIsDefined = false ; public int Lc = <int> ; public int Lp = <int> ; public int Pb = <int> ; public int Fb = <int> ; public boolean FbIsDefined = false ; public boolean Eos = false ; public int Algorithm = <int> ; public int MatchFinder = <int> ; public String InFile ; public String OutFile ; } static public void compress ( InputStream in , OutputStream out ) throws IOException { CommandLine params = new CommandLine ( ) ; boolean eos = false ; if ( params . Eos ) eos = true ; com . badlogic . gdx . utils . compression . lzma . Encoder encoder = new com . badlogic . gdx . utils . compression . lzma . Encoder ( ) ; if ( ! encoder . SetAlgorithm ( params . Algorithm ) ) throw new RuntimeException ( <str> ) ; if ( ! encoder . SetDictionarySize ( params . DictionarySize ) ) throw new RuntimeException ( <str> ) ; if ( ! encoder . SetNumFastBytes ( params . Fb ) ) throw new RuntimeException ( <str> ) ; if ( ! encoder . SetMatchFinder ( params . MatchFinder ) ) throw new RuntimeException ( <str> ) ; if ( ! encoder . SetLcLpPb ( params . Lc , params . Lp , params . Pb ) ) throw new RuntimeException ( <str> ) ; encoder . SetEndMarkerMode ( eos ) ; encoder . WriteCoderProperties ( out ) ; long fileSize ; if ( eos ) { fileSize = - <int> ; } else { if ( ( fileSize = in . available ( ) ) = = <int> ) { fileSize = - <int> ; } } for ( int i = <int> ; i < <int> ; i + + ) { out . write ( ( int ) ( fileSize > > > ( <int> * i ) ) & <hex> ) ; } encoder . Code ( in , out , - <int> , - <int> , null ) ; } static public void decompress ( InputStream in , OutputStream out ) throws IOException { int propertiesSize = <int> ; byte [ ] properties = new byte [ propertiesSize ] ; if ( in . read ( properties , <int> , propertiesSize ) ! = propertiesSize ) throw new RuntimeException ( <str> ) ; com . badlogic . gdx . utils . compression . lzma . Decoder decoder = new com . badlogic . gdx . utils . compression . lzma . Decoder ( ) ; if ( ! decoder . SetDecoderProperties ( properties ) ) throw new RuntimeException ( <str> ) ; long outSize = <int> ; for ( int i = <int> ; i < <int> ; i + + ) { int v = in . read ( ) ; if ( v < <int> ) { throw new RuntimeException ( <str> ) ; } outSize | = ( ( long ) v ) < < ( <int> * i ) ; } if ( ! decoder . Code ( in , out , outSize ) ) { throw new RuntimeException ( <str> ) ; } } } 

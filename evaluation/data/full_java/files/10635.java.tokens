package com . google . common . util . concurrent ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . Sets ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . util . Map ; import java . util . Random ; import java . util . Set ; import java . util . concurrent . ExecutorService ; import java . util . concurrent . Executors ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicLong ; @GwtCompatible ( emulated = true ) public class AtomicLongMapTest extends TestCase { private static final int ITERATIONS = <int> ; private static final int MAX_ADDEND = <int> ; private Random random = new Random ( <int> ) ; @GwtIncompatible ( <str> ) public void testNulls ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicConstructors ( AtomicLongMap . class ) ; tester . testAllPublicStaticMethods ( AtomicLongMap . class ) ; AtomicLongMap < Object > map = AtomicLongMap . create ( ) ; tester . testAllPublicInstanceMethods ( map ) ; } public void testCreate_map ( ) { Map < String , Long > in = ImmutableMap . of ( <str> , <int> , <str> , <int> , <str> , <int> ) ; AtomicLongMap < String > map = AtomicLongMap . create ( in ) ; assertFalse ( map . isEmpty ( ) ) ; assertSame ( <int> , map . size ( ) ) ; assertTrue ( map . containsKey ( <str> ) ) ; assertTrue ( map . containsKey ( <str> ) ) ; assertTrue ( map . containsKey ( <str> ) ) ; assertEquals ( <int> , map . get ( <str> ) ) ; assertEquals ( <int> , map . get ( <str> ) ) ; assertEquals ( <int> , map . get ( <str> ) ) ; } public void testIncrementAndGet ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { long before = map . get ( key ) ; long result = map . incrementAndGet ( key ) ; long after = map . get ( key ) ; assertEquals ( before + <int> , after ) ; assertEquals ( after , result ) ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( ! map . isEmpty ( ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( ITERATIONS , ( int ) map . get ( key ) ) ; } public void testIncrementAndGet_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> , map . incrementAndGet ( key ) ) ; assertEquals ( <int> , map . get ( key ) ) ; assertEquals ( <int> L , map . decrementAndGet ( key ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( <int> , map . incrementAndGet ( key ) ) ; assertEquals ( <int> , map . get ( key ) ) ; } public void testGetAndIncrement ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { long before = map . get ( key ) ; long result = map . getAndIncrement ( key ) ; long after = map . get ( key ) ; assertEquals ( before + <int> , after ) ; assertEquals ( before , result ) ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( ! map . isEmpty ( ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( ITERATIONS , ( int ) map . get ( key ) ) ; } public void testGetAndIncrement_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . getAndIncrement ( key ) ) ; assertEquals ( <int> , map . get ( key ) ) ; assertEquals ( <int> , map . getAndDecrement ( key ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . getAndIncrement ( key ) ) ; assertEquals ( <int> , map . get ( key ) ) ; } public void testDecrementAndGet ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { long before = map . get ( key ) ; long result = map . decrementAndGet ( key ) ; long after = map . get ( key ) ; assertEquals ( before - <int> , after ) ; assertEquals ( after , result ) ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( ! map . isEmpty ( ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( - <int> * ITERATIONS , ( int ) map . get ( key ) ) ; } public void testDecrementAndGet_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( - <int> , map . decrementAndGet ( key ) ) ; assertEquals ( - <int> , map . get ( key ) ) ; assertEquals ( <int> L , map . incrementAndGet ( key ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( - <int> , map . decrementAndGet ( key ) ) ; assertEquals ( - <int> , map . get ( key ) ) ; } public void testGetAndDecrement ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { long before = map . get ( key ) ; long result = map . getAndDecrement ( key ) ; long after = map . get ( key ) ; assertEquals ( before - <int> , after ) ; assertEquals ( before , result ) ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( ! map . isEmpty ( ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( - <int> * ITERATIONS , ( int ) map . get ( key ) ) ; } public void testGetAndDecrement_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . getAndDecrement ( key ) ) ; assertEquals ( - <int> , map . get ( key ) ) ; assertEquals ( - <int> , map . getAndIncrement ( key ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . getAndDecrement ( key ) ) ; assertEquals ( - <int> , map . get ( key ) ) ; } public void testAddAndGet ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long addend = random . nextInt ( MAX_ADDEND ) ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { long before = map . get ( key ) ; long result = map . addAndGet ( key , addend ) ; long after = map . get ( key ) ; assertEquals ( before + addend , after ) ; assertEquals ( after , result ) ; addend = after ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( ! map . isEmpty ( ) ) ; assertTrue ( map . containsKey ( key ) ) ; } public void testAddAndGet_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long value = random . nextInt ( MAX_ADDEND ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( value , map . addAndGet ( key , value ) ) ; assertEquals ( value , map . get ( key ) ) ; assertEquals ( <int> L , map . addAndGet ( key , - <int> * value ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( value , map . addAndGet ( key , value ) ) ; assertEquals ( value , map . get ( key ) ) ; } public void testGetAndAdd ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long addend = random . nextInt ( MAX_ADDEND ) ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { long before = map . get ( key ) ; long result = map . getAndAdd ( key , addend ) ; long after = map . get ( key ) ; assertEquals ( before + addend , after ) ; assertEquals ( before , result ) ; addend = after ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( ! map . isEmpty ( ) ) ; assertTrue ( map . containsKey ( key ) ) ; } public void testGetAndAdd_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long value = random . nextInt ( MAX_ADDEND ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . getAndAdd ( key , value ) ) ; assertEquals ( value , map . get ( key ) ) ; assertEquals ( value , map . getAndAdd ( key , - <int> * value ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . getAndAdd ( key , value ) ) ; assertEquals ( value , map . get ( key ) ) ; } public void testPut ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long newValue = random . nextInt ( MAX_ADDEND ) ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { long before = map . get ( key ) ; long result = map . put ( key , newValue ) ; long after = map . get ( key ) ; assertEquals ( newValue , after ) ; assertEquals ( before , result ) ; newValue + = newValue ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( ! map . isEmpty ( ) ) ; assertTrue ( map . containsKey ( key ) ) ; } public void testPut_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long value = random . nextInt ( MAX_ADDEND ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . put ( key , value ) ) ; assertEquals ( value , map . get ( key ) ) ; assertEquals ( value , map . put ( key , <int> L ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . put ( key , value ) ) ; assertEquals ( value , map . get ( key ) ) ; } public void testPutAll ( ) { Map < String , Long > in = ImmutableMap . of ( <str> , <int> , <str> , <int> , <str> , <int> ) ; AtomicLongMap < String > map = AtomicLongMap . create ( ) ; assertTrue ( map . isEmpty ( ) ) ; assertSame ( <int> , map . size ( ) ) ; assertFalse ( map . containsKey ( <str> ) ) ; assertFalse ( map . containsKey ( <str> ) ) ; assertFalse ( map . containsKey ( <str> ) ) ; assertEquals ( <int> L , map . get ( <str> ) ) ; assertEquals ( <int> L , map . get ( <str> ) ) ; assertEquals ( <int> L , map . get ( <str> ) ) ; map . putAll ( in ) ; assertFalse ( map . isEmpty ( ) ) ; assertSame ( <int> , map . size ( ) ) ; assertTrue ( map . containsKey ( <str> ) ) ; assertTrue ( map . containsKey ( <str> ) ) ; assertTrue ( map . containsKey ( <str> ) ) ; assertEquals ( <int> , map . get ( <str> ) ) ; assertEquals ( <int> , map . get ( <str> ) ) ; assertEquals ( <int> , map . get ( <str> ) ) ; } public void testPutIfAbsent ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long newValue = random . nextInt ( MAX_ADDEND ) ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { long before = map . get ( key ) ; long result = map . putIfAbsent ( key , newValue ) ; long after = map . get ( key ) ; assertEquals ( before , result ) ; assertEquals ( before = = <int> ? newValue : before , after ) ; map . remove ( key ) ; before = map . get ( key ) ; result = map . putIfAbsent ( key , newValue ) ; after = map . get ( key ) ; assertEquals ( <int> , before ) ; assertEquals ( before , result ) ; assertEquals ( newValue , after ) ; map . put ( key , <int> L ) ; before = map . get ( key ) ; result = map . putIfAbsent ( key , newValue ) ; after = map . get ( key ) ; assertEquals ( <int> , before ) ; assertEquals ( before , result ) ; assertEquals ( newValue , after ) ; newValue + = newValue ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( ! map . isEmpty ( ) ) ; assertTrue ( map . containsKey ( key ) ) ; } public void testPutIfAbsent_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long value = random . nextInt ( MAX_ADDEND ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . putIfAbsent ( key , value ) ) ; assertEquals ( value , map . get ( key ) ) ; assertEquals ( value , map . put ( key , <int> L ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . putIfAbsent ( key , value ) ) ; assertEquals ( value , map . get ( key ) ) ; } public void testReplace ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long newValue = random . nextInt ( MAX_ADDEND ) ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { long before = map . get ( key ) ; assertFalse ( map . replace ( key , before + <int> , newValue + <int> ) ) ; assertFalse ( map . replace ( key , before - <int> , newValue - <int> ) ) ; assertTrue ( map . replace ( key , before , newValue ) ) ; long after = map . get ( key ) ; assertEquals ( newValue , after ) ; newValue + = newValue ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( ! map . isEmpty ( ) ) ; assertTrue ( map . containsKey ( key ) ) ; } public void testReplace_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; long value = random . nextInt ( MAX_ADDEND ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertTrue ( map . replace ( key , <int> L , value ) ) ; assertEquals ( value , map . get ( key ) ) ; assertTrue ( map . replace ( key , value , <int> L ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertTrue ( map . replace ( key , <int> L , value ) ) ; assertEquals ( value , map . get ( key ) ) ; } public void testRemove ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; assertEquals ( <int> , map . size ( ) ) ; assertTrue ( map . isEmpty ( ) ) ; assertEquals ( <int> L , map . remove ( key ) ) ; long newValue = random . nextInt ( MAX_ADDEND ) ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { map . put ( key , newValue ) ; assertTrue ( map . containsKey ( key ) ) ; long before = map . get ( key ) ; long result = map . remove ( key ) ; long after = map . get ( key ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( before , result ) ; assertEquals ( <int> L , after ) ; newValue + = newValue ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( map . isEmpty ( ) ) ; } public void testRemove_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . remove ( key ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . put ( key , <int> L ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . remove ( key ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; } public void testRemoveValue ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; assertEquals ( <int> , map . size ( ) ) ; assertTrue ( map . isEmpty ( ) ) ; assertFalse ( map . remove ( key , <int> L ) ) ; long newValue = random . nextInt ( MAX_ADDEND ) ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { map . put ( key , newValue ) ; assertTrue ( map . containsKey ( key ) ) ; long before = map . get ( key ) ; assertFalse ( map . remove ( key , newValue + <int> ) ) ; assertFalse ( map . remove ( key , newValue - <int> ) ) ; assertTrue ( map . remove ( key , newValue ) ) ; long after = map . get ( key ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> L , after ) ; newValue + = newValue ; } assertEquals ( <int> , map . size ( ) ) ; assertTrue ( map . isEmpty ( ) ) ; } public void testRemoveValue_zero ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; String key = <str> ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertFalse ( map . remove ( key , <int> L ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( <int> L , map . put ( key , <int> L ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertTrue ( map . containsKey ( key ) ) ; assertTrue ( map . remove ( key , <int> L ) ) ; assertEquals ( <int> L , map . get ( key ) ) ; assertFalse ( map . containsKey ( key ) ) ; } public void testRemoveZeros ( ) { AtomicLongMap < Object > map = AtomicLongMap . create ( ) ; Set < Object > nonZeroKeys = Sets . newHashSet ( ) ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { Object key = new Object ( ) ; long value = i % <int> ; map . put ( key , value ) ; if ( value ! = <int> L ) { nonZeroKeys . add ( key ) ; } } assertEquals ( ITERATIONS , map . size ( ) ) ; assertTrue ( map . asMap ( ) . containsValue ( <int> L ) ) ; map . removeAllZeros ( ) ; assertFalse ( map . asMap ( ) . containsValue ( <int> L ) ) ; assertEquals ( ITERATIONS / <int> , map . size ( ) ) ; assertEquals ( nonZeroKeys , map . asMap ( ) . keySet ( ) ) ; } public void testClear ( ) { AtomicLongMap < Object > map = AtomicLongMap . create ( ) ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { map . put ( new Object ( ) , i ) ; } assertEquals ( ITERATIONS , map . size ( ) ) ; map . clear ( ) ; assertEquals ( <int> , map . size ( ) ) ; assertTrue ( map . isEmpty ( ) ) ; } public void testSum ( ) { AtomicLongMap < Object > map = AtomicLongMap . create ( ) ; long sum = <int> ; for ( int i = <int> ; i < ITERATIONS ; i + + ) { map . put ( new Object ( ) , i ) ; sum + = i ; } assertEquals ( ITERATIONS , map . size ( ) ) ; assertEquals ( sum , map . sum ( ) ) ; } public void testEmpty ( ) { AtomicLongMap < String > map = AtomicLongMap . create ( ) ; assertEquals ( <int> L , map . get ( <str> ) ) ; assertEquals ( <int> , map . size ( ) ) ; assertTrue ( map . isEmpty ( ) ) ; assertFalse ( map . remove ( <str> , <int> ) ) ; assertFalse ( map . remove ( <str> , <int> L ) ) ; assertFalse ( map . replace ( <str> , <int> , <int> L ) ) ; } @GwtIncompatible ( <str> ) public void testModify_basher ( ) throws InterruptedException { int nTasks = <int> ; int nThreads = <int> ; final int getsPerTask = <int> ; final int deltaRange = <int> ; final String key = <str> ; final AtomicLong sum = new AtomicLong ( ) ; final AtomicLongMap < String > map = AtomicLongMap . create ( ) ; ExecutorService threadPool = Executors . newFixedThreadPool ( nThreads ) ; for ( int i = <int> ; i < nTasks ; i + + ) { threadPool . submit ( new Runnable ( ) { @Override public void run ( ) { int threadSum = <int> ; for ( int j = <int> ; j < getsPerTask ; j + + ) { long delta = random . nextInt ( deltaRange ) ; int behavior = random . nextInt ( <int> ) ; switch ( behavior ) { case <int> : map . incrementAndGet ( key ) ; threadSum + + ; break ; case <int> : map . decrementAndGet ( key ) ; threadSum - - ; break ; case <int> : map . addAndGet ( key , delta ) ; threadSum + = delta ; break ; case <int> : map . getAndIncrement ( key ) ; threadSum + + ; break ; case <int> : map . getAndDecrement ( key ) ; threadSum - - ; break ; case <int> : map . getAndAdd ( key , delta ) ; threadSum + = delta ; break ; case <int> : long oldValue = map . put ( key , delta ) ; threadSum + = delta - oldValue ; break ; case <int> : oldValue = map . get ( key ) ; if ( map . replace ( key , oldValue , delta ) ) { threadSum + = delta - oldValue ; } break ; case <int> : oldValue = map . remove ( key ) ; threadSum - = oldValue ; break ; case <int> : oldValue = map . get ( key ) ; if ( map . remove ( key , oldValue ) ) { threadSum - = oldValue ; } break ; default : throw new AssertionError ( ) ; } } sum . addAndGet ( threadSum ) ; } } ) ; } threadPool . shutdown ( ) ; assertTrue ( threadPool . awaitTermination ( <int> , TimeUnit . SECONDS ) ) ; assertEquals ( sum . get ( ) , map . get ( key ) ) ; } } 

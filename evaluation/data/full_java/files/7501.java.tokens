package org . elasticsearch . search . highlight ; import org . elasticsearch . common . collect . Tuple ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . query . QueryShardContext ; import org . elasticsearch . search . SearchParseElement ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; public class HighlighterParseElement implements SearchParseElement { @Override public void parse ( XContentParser parser , SearchContext context ) throws Exception { try { context . highlight ( parse ( parser , context . indexShard ( ) . getQueryShardContext ( ) ) ) ; } catch ( IllegalArgumentException ex ) { throw new SearchParseException ( context , <str> , parser . getTokenLocation ( ) ) ; } } public SearchContextHighlight parse ( XContentParser parser , QueryShardContext queryShardContext ) throws IOException { XContentParser . Token token ; String topLevelFieldName = null ; final List < Tuple < String , SearchContextHighlight . FieldOptions . Builder > > fieldsOptions = new ArrayList < > ( ) ; final SearchContextHighlight . FieldOptions . Builder globalOptionsBuilder = HighlightBuilder . defaultFieldOptions ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { topLevelFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_ARRAY ) { if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { List < String > preTagsList = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { preTagsList . add ( parser . text ( ) ) ; } globalOptionsBuilder . preTags ( preTagsList . toArray ( new String [ preTagsList . size ( ) ] ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { List < String > postTagsList = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { postTagsList . add ( parser . text ( ) ) ; } globalOptionsBuilder . postTags ( postTagsList . toArray ( new String [ postTagsList . size ( ) ] ) ) ; } else if ( <str> . equals ( topLevelFieldName ) ) { while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { if ( token = = XContentParser . Token . START_OBJECT ) { String highlightFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { if ( highlightFieldName ! = null ) { throw new IllegalArgumentException ( <str> ) ; } highlightFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { fieldsOptions . add ( Tuple . tuple ( highlightFieldName , parseFields ( parser , queryShardContext ) ) ) ; } } } else { throw new IllegalArgumentException ( <str> ) ; } } } } else if ( token . isValue ( ) ) { if ( <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . scoreOrdered ( <str> . equals ( parser . text ( ) ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { String schema = parser . text ( ) ; if ( <str> . equals ( schema ) ) { globalOptionsBuilder . preTags ( HighlightBuilder . DEFAULT_STYLED_PRE_TAG ) ; globalOptionsBuilder . postTags ( HighlightBuilder . DEFAULT_STYLED_POST_TAGS ) ; } } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . highlightFilter ( parser . booleanValue ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . fragmentCharSize ( parser . intValue ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . numberOfFragments ( parser . intValue ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . encoder ( parser . text ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . requireFieldMatch ( parser . booleanValue ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . boundaryMaxScan ( parser . intValue ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { char [ ] charsArr = parser . text ( ) . toCharArray ( ) ; Character [ ] globalBoundaryChars = new Character [ charsArr . length ] ; for ( int i = <int> ; i < charsArr . length ; i + + ) { globalBoundaryChars [ i ] = charsArr [ i ] ; } globalOptionsBuilder . boundaryChars ( globalBoundaryChars ) ; } else if ( <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . highlighterType ( parser . text ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . fragmenter ( parser . text ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . noMatchSize ( parser . intValue ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . forceSource ( parser . booleanValue ( ) ) ; } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . phraseLimit ( parser . intValue ( ) ) ; } } else if ( token = = XContentParser . Token . START_OBJECT & & <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . options ( parser . map ( ) ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( <str> . equals ( topLevelFieldName ) ) { String highlightFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { highlightFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { fieldsOptions . add ( Tuple . tuple ( highlightFieldName , parseFields ( parser , queryShardContext ) ) ) ; } } } else if ( <str> . equals ( topLevelFieldName ) | | <str> . equals ( topLevelFieldName ) ) { globalOptionsBuilder . highlightQuery ( queryShardContext . parse ( parser ) . query ( ) ) ; } } } final SearchContextHighlight . FieldOptions globalOptions = globalOptionsBuilder . build ( ) ; if ( globalOptions . preTags ( ) ! = null & & globalOptions . postTags ( ) = = null ) { throw new IllegalArgumentException ( <str> ) ; } final List < SearchContextHighlight . Field > fields = new ArrayList < > ( ) ; for ( final Tuple < String , SearchContextHighlight . FieldOptions . Builder > tuple : fieldsOptions ) { fields . add ( new SearchContextHighlight . Field ( tuple . v1 ( ) , tuple . v2 ( ) . merge ( globalOptions ) . build ( ) ) ) ; } return new SearchContextHighlight ( fields ) ; } private static SearchContextHighlight . FieldOptions . Builder parseFields ( XContentParser parser , QueryShardContext queryShardContext ) throws IOException { XContentParser . Token token ; final SearchContextHighlight . FieldOptions . Builder fieldOptionsBuilder = new SearchContextHighlight . FieldOptions . Builder ( ) ; String fieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { fieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_ARRAY ) { if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { List < String > preTagsList = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { preTagsList . add ( parser . text ( ) ) ; } fieldOptionsBuilder . preTags ( preTagsList . toArray ( new String [ preTagsList . size ( ) ] ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { List < String > postTagsList = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { postTagsList . add ( parser . text ( ) ) ; } fieldOptionsBuilder . postTags ( postTagsList . toArray ( new String [ postTagsList . size ( ) ] ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { Set < String > matchedFields = new HashSet < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_ARRAY ) { matchedFields . add ( parser . text ( ) ) ; } fieldOptionsBuilder . matchedFields ( matchedFields ) ; } } else if ( token . isValue ( ) ) { if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . fragmentCharSize ( parser . intValue ( ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . numberOfFragments ( parser . intValue ( ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . fragmentOffset ( parser . intValue ( ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . highlightFilter ( parser . booleanValue ( ) ) ; } else if ( <str> . equals ( fieldName ) ) { fieldOptionsBuilder . scoreOrdered ( <str> . equals ( parser . text ( ) ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . requireFieldMatch ( parser . booleanValue ( ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . boundaryMaxScan ( parser . intValue ( ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { char [ ] charsArr = parser . text ( ) . toCharArray ( ) ; Character [ ] boundaryChars = new Character [ charsArr . length ] ; for ( int i = <int> ; i < charsArr . length ; i + + ) { boundaryChars [ i ] = charsArr [ i ] ; } fieldOptionsBuilder . boundaryChars ( boundaryChars ) ; } else if ( <str> . equals ( fieldName ) ) { fieldOptionsBuilder . highlighterType ( parser . text ( ) ) ; } else if ( <str> . equals ( fieldName ) ) { fieldOptionsBuilder . fragmenter ( parser . text ( ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . noMatchSize ( parser . intValue ( ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . forceSource ( parser . booleanValue ( ) ) ; } else if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . phraseLimit ( parser . intValue ( ) ) ; } } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( <str> . equals ( fieldName ) | | <str> . equals ( fieldName ) ) { fieldOptionsBuilder . highlightQuery ( queryShardContext . parse ( parser ) . query ( ) ) ; } else if ( <str> . equals ( fieldName ) ) { fieldOptionsBuilder . options ( parser . map ( ) ) ; } } } return fieldOptionsBuilder ; } } 

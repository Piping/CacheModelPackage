package org . elasticsearch . rest ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . node . Node ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . rest . client . http . HttpResponse ; import static org . elasticsearch . http . netty . NettyHttpServerTransport . SETTING_CORS_ALLOW_CREDENTIALS ; import static org . elasticsearch . http . netty . NettyHttpServerTransport . SETTING_CORS_ALLOW_ORIGIN ; import static org . elasticsearch . http . netty . NettyHttpServerTransport . SETTING_CORS_ENABLED ; import static org . hamcrest . Matchers . hasKey ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . not ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class CorsRegexIT extends ESIntegTestCase { protected static final ESLogger logger = Loggers . getLogger ( CorsRegexIT . class ) ; @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( SETTING_CORS_ALLOW_ORIGIN , <str> ) . put ( SETTING_CORS_ALLOW_CREDENTIALS , true ) . put ( SETTING_CORS_ENABLED , true ) . put ( Node . HTTP_ENABLED , true ) . build ( ) ; } public void testThatRegularExpressionWorksOnMatch ( ) throws Exception { String corsValue = <str> ; HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . addHeader ( <str> , <str> ) . addHeader ( <str> , corsValue ) . execute ( ) ; assertResponseWithOriginheader ( response , corsValue ) ; corsValue = <str> ; response = httpClient ( ) . method ( <str> ) . path ( <str> ) . addHeader ( <str> , <str> ) . addHeader ( <str> , corsValue ) . execute ( ) ; assertResponseWithOriginheader ( response , corsValue ) ; assertThat ( response . getHeaders ( ) , hasKey ( <str> ) ) ; assertThat ( response . getHeaders ( ) . get ( <str> ) , is ( <str> ) ) ; } public void testThatRegularExpressionReturnsNullOnNonMatch ( ) throws Exception { HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . addHeader ( <str> , <str> ) . addHeader ( <str> , <str> ) . execute ( ) ; assertResponseWithOriginheader ( response , <str> ) ; } public void testThatSendingNoOriginHeaderReturnsNoAccessControlHeader ( ) throws Exception { HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . addHeader ( <str> , <str> ) . execute ( ) ; assertThat ( response . getStatusCode ( ) , is ( <int> ) ) ; assertThat ( response . getHeaders ( ) , not ( hasKey ( <str> ) ) ) ; } public void testThatRegularExpressionIsNotAppliedWithoutCorrectBrowserOnMatch ( ) throws Exception { HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . execute ( ) ; assertThat ( response . getStatusCode ( ) , is ( <int> ) ) ; assertThat ( response . getHeaders ( ) , not ( hasKey ( <str> ) ) ) ; } public void testThatPreFlightRequestWorksOnMatch ( ) throws Exception { String corsValue = <str> ; HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . addHeader ( <str> , <str> ) . addHeader ( <str> , corsValue ) . execute ( ) ; assertResponseWithOriginheader ( response , corsValue ) ; } public void testThatPreFlightRequestReturnsNullOnNonMatch ( ) throws Exception { HttpResponse response = httpClient ( ) . method ( <str> ) . path ( <str> ) . addHeader ( <str> , <str> ) . addHeader ( <str> , <str> ) . execute ( ) ; assertResponseWithOriginheader ( response , <str> ) ; } public static void assertResponseWithOriginheader ( HttpResponse response , String expectedCorsHeader ) { assertThat ( response . getStatusCode ( ) , is ( <int> ) ) ; assertThat ( response . getHeaders ( ) , hasKey ( <str> ) ) ; assertThat ( response . getHeaders ( ) . get ( <str> ) , is ( expectedCorsHeader ) ) ; } } 

package org . eclipse . ui . internal . console ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IMenuCreator ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . console . ConsolePlugin ; import org . eclipse . ui . console . IConsole ; import org . eclipse . ui . console . IConsoleConstants ; import org . eclipse . ui . console . IConsoleListener ; import org . eclipse . ui . console . IConsoleView ; import org . eclipse . ui . progress . UIJob ; import org . eclipse . ui . texteditor . IUpdate ; class ConsoleDropDownAction extends Action implements IMenuCreator , IConsoleListener , IUpdate { private IConsoleView fView ; private Menu fMenu ; @Override public void update ( ) { IConsole [ ] consoles = ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . getConsoles ( ) ; setEnabled ( consoles . length > <int> ) ; } public ConsoleDropDownAction ( IConsoleView view ) { fView = view ; setText ( ConsoleMessages . ConsoleDropDownAction_0 ) ; setToolTipText ( ConsoleMessages . ConsoleDropDownAction_1 ) ; setImageDescriptor ( ConsolePluginImages . getImageDescriptor ( IConsoleConstants . IMG_VIEW_CONSOLE ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IConsoleHelpContextIds . CONSOLE_DISPLAY_CONSOLE_ACTION ) ; setMenuCreator ( this ) ; ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . addConsoleListener ( this ) ; update ( ) ; } @Override public void dispose ( ) { if ( fMenu ! = null ) { fMenu . dispose ( ) ; } fView = null ; ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . removeConsoleListener ( this ) ; } @Override public Menu getMenu ( Menu parent ) { return null ; } @Override public Menu getMenu ( Control parent ) { if ( fMenu ! = null ) { fMenu . dispose ( ) ; } fMenu = new Menu ( parent ) ; IConsole [ ] consoles = ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . getConsoles ( ) ; IConsole current = fView . getConsole ( ) ; for ( int i = <int> ; i < consoles . length ; i + + ) { IConsole console = consoles [ i ] ; Action action = new ShowConsoleAction ( fView , console ) ; action . setChecked ( console . equals ( current ) ) ; addActionToMenu ( fMenu , action , i + <int> ) ; } return fMenu ; } private void addActionToMenu ( Menu parent , Action action , int accelerator ) { if ( accelerator < <int> ) { StringBuffer label = new StringBuffer ( ) ; label . append ( <str> ) ; label . append ( accelerator ) ; label . append ( <str> ) ; label . append ( action . getText ( ) ) ; action . setText ( label . toString ( ) ) ; } ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( parent , - <int> ) ; } @Override public void run ( ) { ConsoleView consoleView = ( ConsoleView ) fView ; boolean pinned = consoleView . isPinned ( ) ; try { if ( pinned ) { consoleView . setPinned ( false ) ; } IConsole [ ] consoles = ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . getConsoles ( ) ; IConsole current = fView . getConsole ( ) ; int idx = <int> ; for ( int i = <int> ; i < consoles . length ; i + + ) { idx = i ; if ( consoles [ i ] = = current ) { break ; } } int next = idx + <int> ; if ( next > = consoles . length ) { next = <int> ; } fView . display ( consoles [ next ] ) ; } finally { if ( pinned ) { consoleView . setPinned ( true ) ; } } } @Override public void consolesAdded ( IConsole [ ] consoles ) { UIJob job = new UIJob ( <str> ) { @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { update ( ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . setPriority ( Job . INTERACTIVE ) ; job . schedule ( ) ; } @Override public void consolesRemoved ( IConsole [ ] consoles ) { UIJob job = new UIJob ( <str> ) { @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( fMenu ! = null ) { fMenu . dispose ( ) ; } update ( ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . setPriority ( Job . INTERACTIVE ) ; job . schedule ( ) ; } } 

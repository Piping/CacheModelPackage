package org . elasticsearch . index . query ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class TypeQueryParser implements QueryParser < TypeQueryBuilder > { public static final ParseField VALUE_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { TypeQueryBuilder . NAME } ; } @Override public TypeQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; BytesRef type = null ; String queryName = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , VALUE_FIELD ) ) { type = parser . utf8Bytes ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + TypeQueryBuilder . NAME + <str> + currentFieldName + <str> ) ; } } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + TypeQueryBuilder . NAME + <str> + currentFieldName + <str> ) ; } } if ( type = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + TypeQueryBuilder . NAME + <str> ) ; } return new TypeQueryBuilder ( type ) . boost ( boost ) . queryName ( queryName ) ; } @Override public TypeQueryBuilder getBuilderPrototype ( ) { return TypeQueryBuilder . PROTOTYPE ; } } 

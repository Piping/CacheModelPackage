package org . eclipse . debug . internal . ui . actions . breakpoints ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointsView ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . action . Action ; import org . eclipse . ui . PlatformUI ; public class ShowTargetBreakpointsAction extends Action { BreakpointsView fView ; public ShowTargetBreakpointsAction ( BreakpointsView view ) { super ( ) ; fView = view ; setText ( ActionMessages . ShowSupportedBreakpointsAction_Show_For_Selected ) ; setToolTipText ( ActionMessages . ShowSupportedBreakpointsAction_tooltip ) ; setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IDebugUIConstants . IMG_OBJS_DEBUG_TARGET ) ) ; setChecked ( false ) ; setId ( DebugUIPlugin . getUniqueIdentifier ( ) + <str> ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugHelpContextIds . SHOW_BREAKPOINTS_FOR_MODEL_ACTION ) ; } @Override public void run ( ) { if ( fView . getViewer ( ) . getControl ( ) . isDisposed ( ) ) { return ; } fView . setFilterSelection ( isChecked ( ) ) ; } } 

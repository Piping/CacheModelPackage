package com . google . common . hash ; import static org . mockito . Mockito . inOrder ; import static org . mockito . Mockito . mock ; import static org . mockito . Mockito . verify ; import com . google . common . base . Charsets ; import com . google . common . hash . AbstractStreamingHashFunction . AbstractStreamingHasher ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; import org . mockito . InOrder ; import java . io . OutputStream ; import java . nio . ByteBuffer ; import java . nio . charset . Charset ; import java . util . Arrays ; public class FunnelsTest extends TestCase { public void testForBytes ( ) { PrimitiveSink primitiveSink = mock ( PrimitiveSink . class ) ; Funnels . byteArrayFunnel ( ) . funnel ( new byte [ ] { <int> , <int> , <int> , <int> } , primitiveSink ) ; verify ( primitiveSink ) . putBytes ( new byte [ ] { <int> , <int> , <int> , <int> } ) ; } public void testForBytes_null ( ) { assertNullsThrowException ( Funnels . byteArrayFunnel ( ) ) ; } public void testForStrings ( ) { PrimitiveSink primitiveSink = mock ( PrimitiveSink . class ) ; Funnels . unencodedCharsFunnel ( ) . funnel ( <str> , primitiveSink ) ; verify ( primitiveSink ) . putUnencodedChars ( <str> ) ; } public void testForStrings_null ( ) { assertNullsThrowException ( Funnels . unencodedCharsFunnel ( ) ) ; } public void testForStringsCharset ( ) { for ( Charset charset : Charset . availableCharsets ( ) . values ( ) ) { PrimitiveSink primitiveSink = mock ( PrimitiveSink . class ) ; Funnels . stringFunnel ( charset ) . funnel ( <str> , primitiveSink ) ; verify ( primitiveSink ) . putString ( <str> , charset ) ; } } public void testForStringsCharset_null ( ) { for ( Charset charset : Charset . availableCharsets ( ) . values ( ) ) { assertNullsThrowException ( Funnels . stringFunnel ( charset ) ) ; } } public void testForInts ( ) { Integer value = <int> ; PrimitiveSink primitiveSink = mock ( PrimitiveSink . class ) ; Funnels . integerFunnel ( ) . funnel ( value , primitiveSink ) ; verify ( primitiveSink ) . putInt ( <int> ) ; } public void testForInts_null ( ) { assertNullsThrowException ( Funnels . integerFunnel ( ) ) ; } public void testForLongs ( ) { Long value = <int> ; PrimitiveSink primitiveSink = mock ( PrimitiveSink . class ) ; Funnels . longFunnel ( ) . funnel ( value , primitiveSink ) ; verify ( primitiveSink ) . putLong ( <int> ) ; } public void testForLongs_null ( ) { assertNullsThrowException ( Funnels . longFunnel ( ) ) ; } public void testSequential ( ) { @SuppressWarnings ( <str> ) Funnel < Object > elementFunnel = mock ( Funnel . class ) ; PrimitiveSink primitiveSink = mock ( PrimitiveSink . class ) ; Funnel < Iterable < ? extends Object > > sequential = Funnels . sequentialFunnel ( elementFunnel ) ; sequential . funnel ( Arrays . asList ( <str> , <str> , <str> , <str> ) , primitiveSink ) ; InOrder inOrder = inOrder ( elementFunnel ) ; inOrder . verify ( elementFunnel ) . funnel ( <str> , primitiveSink ) ; inOrder . verify ( elementFunnel ) . funnel ( <str> , primitiveSink ) ; inOrder . verify ( elementFunnel ) . funnel ( <str> , primitiveSink ) ; inOrder . verify ( elementFunnel ) . funnel ( <str> , primitiveSink ) ; } private static void assertNullsThrowException ( Funnel < ? > funnel ) { PrimitiveSink primitiveSink = new AbstractStreamingHasher ( <int> , <int> ) { @Override HashCode makeHash ( ) { throw new UnsupportedOperationException ( ) ; } @Override protected void process ( ByteBuffer bb ) { while ( bb . hasRemaining ( ) ) { bb . get ( ) ; } } } ; try { funnel . funnel ( null , primitiveSink ) ; fail ( ) ; } catch ( NullPointerException ok ) { } } public void testAsOutputStream ( ) throws Exception { PrimitiveSink sink = mock ( PrimitiveSink . class ) ; OutputStream out = Funnels . asOutputStream ( sink ) ; byte [ ] bytes = { <int> , <int> , <int> , <int> } ; out . write ( <int> ) ; out . write ( bytes ) ; out . write ( bytes , <int> , <int> ) ; verify ( sink ) . putByte ( ( byte ) <int> ) ; verify ( sink ) . putBytes ( bytes ) ; verify ( sink ) . putBytes ( bytes , <int> , <int> ) ; } public void testSerialization ( ) { assertSame ( Funnels . byteArrayFunnel ( ) , SerializableTester . reserialize ( Funnels . byteArrayFunnel ( ) ) ) ; assertSame ( Funnels . integerFunnel ( ) , SerializableTester . reserialize ( Funnels . integerFunnel ( ) ) ) ; assertSame ( Funnels . longFunnel ( ) , SerializableTester . reserialize ( Funnels . longFunnel ( ) ) ) ; assertSame ( Funnels . unencodedCharsFunnel ( ) , SerializableTester . reserialize ( Funnels . unencodedCharsFunnel ( ) ) ) ; assertEquals ( Funnels . sequentialFunnel ( Funnels . integerFunnel ( ) ) , SerializableTester . reserialize ( Funnels . sequentialFunnel ( Funnels . integerFunnel ( ) ) ) ) ; assertEquals ( Funnels . stringFunnel ( Charsets . US_ASCII ) , SerializableTester . reserialize ( Funnels . stringFunnel ( Charsets . US_ASCII ) ) ) ; } public void testEquals ( ) { new EqualsTester ( ) . addEqualityGroup ( Funnels . byteArrayFunnel ( ) ) . addEqualityGroup ( Funnels . integerFunnel ( ) ) . addEqualityGroup ( Funnels . longFunnel ( ) ) . addEqualityGroup ( Funnels . unencodedCharsFunnel ( ) ) . addEqualityGroup ( Funnels . stringFunnel ( Charsets . UTF_8 ) ) . addEqualityGroup ( Funnels . stringFunnel ( Charsets . US_ASCII ) ) . addEqualityGroup ( Funnels . sequentialFunnel ( Funnels . integerFunnel ( ) ) , SerializableTester . reserialize ( Funnels . sequentialFunnel ( Funnels . integerFunnel ( ) ) ) ) . addEqualityGroup ( Funnels . sequentialFunnel ( Funnels . longFunnel ( ) ) ) . testEquals ( ) ; } } 

package org . elasticsearch . search . aggregations . pipeline . derivative ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . search . aggregations . AggregationExecutionException ; import org . elasticsearch . search . aggregations . AggregatorFactory ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . InternalAggregation . ReduceContext ; import org . elasticsearch . search . aggregations . InternalAggregation . Type ; import org . elasticsearch . search . aggregations . InternalAggregations ; import org . elasticsearch . search . aggregations . bucket . histogram . HistogramAggregator ; import org . elasticsearch . search . aggregations . bucket . histogram . InternalHistogram ; import org . elasticsearch . search . aggregations . pipeline . BucketHelpers . GapPolicy ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorFactory ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorStreams ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import org . elasticsearch . search . aggregations . support . format . ValueFormatterStreams ; import org . joda . time . DateTime ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; import java . util . stream . Collectors ; import java . util . stream . StreamSupport ; import static org . elasticsearch . search . aggregations . pipeline . BucketHelpers . resolveBucketValue ; public class DerivativePipelineAggregator extends PipelineAggregator { public final static Type TYPE = new Type ( <str> ) ; public final static PipelineAggregatorStreams . Stream STREAM = new PipelineAggregatorStreams . Stream ( ) { @Override public DerivativePipelineAggregator readResult ( StreamInput in ) throws IOException { DerivativePipelineAggregator result = new DerivativePipelineAggregator ( ) ; result . readFrom ( in ) ; return result ; } } ; public static void registerStreams ( ) { PipelineAggregatorStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } private ValueFormatter formatter ; private GapPolicy gapPolicy ; private Double xAxisUnits ; public DerivativePipelineAggregator ( ) { } public DerivativePipelineAggregator ( String name , String [ ] bucketsPaths , ValueFormatter formatter , GapPolicy gapPolicy , Long xAxisUnits , Map < String , Object > metadata ) { super ( name , bucketsPaths , metadata ) ; this . formatter = formatter ; this . gapPolicy = gapPolicy ; this . xAxisUnits = xAxisUnits = = null ? null : ( double ) xAxisUnits ; } @Override public Type type ( ) { return TYPE ; } @Override public InternalAggregation reduce ( InternalAggregation aggregation , ReduceContext reduceContext ) { InternalHistogram histo = ( InternalHistogram ) aggregation ; List < ? extends InternalHistogram . Bucket > buckets = histo . getBuckets ( ) ; InternalHistogram . Factory < ? extends InternalHistogram . Bucket > factory = histo . getFactory ( ) ; List newBuckets = new ArrayList < > ( ) ; Long lastBucketKey = null ; Double lastBucketValue = null ; for ( InternalHistogram . Bucket bucket : buckets ) { Long thisBucketKey = resolveBucketKeyAsLong ( bucket ) ; Double thisBucketValue = resolveBucketValue ( histo , bucket , bucketsPaths ( ) [ <int> ] , gapPolicy ) ; if ( lastBucketValue ! = null ) { double gradient = thisBucketValue - lastBucketValue ; double xDiff = - <int> ; if ( xAxisUnits ! = null ) { xDiff = ( thisBucketKey - lastBucketKey ) / xAxisUnits ; } final List < InternalAggregation > aggs = StreamSupport . stream ( bucket . getAggregations ( ) . spliterator ( ) , false ) . map ( ( p ) - > { return ( InternalAggregation ) p ; } ) . collect ( Collectors . toList ( ) ) ; aggs . add ( new InternalDerivative ( name ( ) , gradient , xDiff , formatter , new ArrayList < PipelineAggregator > ( ) , metaData ( ) ) ) ; InternalHistogram . Bucket newBucket = factory . createBucket ( bucket . getKey ( ) , bucket . getDocCount ( ) , new InternalAggregations ( aggs ) , bucket . getKeyed ( ) , bucket . getFormatter ( ) ) ; newBuckets . add ( newBucket ) ; } else { newBuckets . add ( bucket ) ; } lastBucketKey = thisBucketKey ; lastBucketValue = thisBucketValue ; } return factory . create ( newBuckets , histo ) ; } private Long resolveBucketKeyAsLong ( InternalHistogram . Bucket bucket ) { Object key = bucket . getKey ( ) ; if ( key instanceof DateTime ) { return ( ( DateTime ) key ) . getMillis ( ) ; } else if ( key instanceof Number ) { return ( ( Number ) key ) . longValue ( ) ; } else { throw new AggregationExecutionException ( <str> + name ( ) + <str> + key ) ; } } @Override public void doReadFrom ( StreamInput in ) throws IOException { formatter = ValueFormatterStreams . readOptional ( in ) ; gapPolicy = GapPolicy . readFrom ( in ) ; if ( in . readBoolean ( ) ) { xAxisUnits = in . readDouble ( ) ; } else { xAxisUnits = null ; } } @Override public void doWriteTo ( StreamOutput out ) throws IOException { ValueFormatterStreams . writeOptional ( formatter , out ) ; gapPolicy . writeTo ( out ) ; boolean hasXAxisUnitsValue = xAxisUnits ! = null ; out . writeBoolean ( hasXAxisUnitsValue ) ; if ( hasXAxisUnitsValue ) { out . writeDouble ( xAxisUnits ) ; } } public static class Factory extends PipelineAggregatorFactory { private final ValueFormatter formatter ; private GapPolicy gapPolicy ; private Long xAxisUnits ; public Factory ( String name , String [ ] bucketsPaths , ValueFormatter formatter , GapPolicy gapPolicy , Long xAxisUnits ) { super ( name , TYPE . name ( ) , bucketsPaths ) ; this . formatter = formatter ; this . gapPolicy = gapPolicy ; this . xAxisUnits = xAxisUnits ; } @Override protected PipelineAggregator createInternal ( Map < String , Object > metaData ) throws IOException { return new DerivativePipelineAggregator ( name , bucketsPaths , formatter , gapPolicy , xAxisUnits , metaData ) ; } @Override public void doValidate ( AggregatorFactory parent , AggregatorFactory [ ] aggFactories , List < PipelineAggregatorFactory > pipelineAggregatorFactories ) { if ( bucketsPaths . length ! = <int> ) { throw new IllegalStateException ( PipelineAggregator . Parser . BUCKETS_PATH . getPreferredName ( ) + <str> + name + <str> ) ; } if ( ! ( parent instanceof HistogramAggregator . Factory ) ) { throw new IllegalStateException ( <str> + name + <str> ) ; } else { HistogramAggregator . Factory histoParent = ( HistogramAggregator . Factory ) parent ; if ( histoParent . minDocCount ( ) ! = <int> ) { throw new IllegalStateException ( <str> + name + <str> ) ; } } } } } 

package com . badlogic . gdx . graphics . g2d . freetype ; import com . badlogic . gdx . jnigen . AntScriptGenerator ; import com . badlogic . gdx . jnigen . BuildConfig ; import com . badlogic . gdx . jnigen . BuildExecutor ; import com . badlogic . gdx . jnigen . BuildTarget ; import com . badlogic . gdx . jnigen . BuildTarget . TargetOs ; import com . badlogic . gdx . jnigen . NativeCodeGenerator ; public class FreetypeBuild { public static void main ( String [ ] args ) throws Exception { String [ ] headers = { <str> } ; String [ ] sources = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , } ; BuildTarget win32home = BuildTarget . newDefaultTarget ( TargetOs . Windows , false ) ; win32home . compilerPrefix = <str> ; win32home . buildFileName = <str> ; win32home . excludeFromMasterBuildFile = true ; win32home . headerDirs = headers ; win32home . cIncludes = sources ; win32home . cFlags + = <str> ; win32home . cppFlags + = <str> ; BuildTarget win32 = BuildTarget . newDefaultTarget ( TargetOs . Windows , false ) ; win32 . headerDirs = headers ; win32 . cIncludes = sources ; win32 . cFlags + = <str> ; win32 . cppFlags + = <str> ; BuildTarget win64 = BuildTarget . newDefaultTarget ( TargetOs . Windows , true ) ; win64 . headerDirs = headers ; win64 . cIncludes = sources ; win64 . cFlags + = <str> ; win64 . cppFlags + = <str> ; BuildTarget lin32 = BuildTarget . newDefaultTarget ( TargetOs . Linux , false ) ; lin32 . headerDirs = headers ; lin32 . cIncludes = sources ; lin32 . cFlags + = <str> ; lin32 . cppFlags + = <str> ; BuildTarget lin64 = BuildTarget . newDefaultTarget ( TargetOs . Linux , true ) ; lin64 . headerDirs = headers ; lin64 . cIncludes = sources ; lin64 . cFlags + = <str> ; lin64 . cppFlags + = <str> ; BuildTarget mac = BuildTarget . newDefaultTarget ( TargetOs . MacOsX , false ) ; mac . headerDirs = headers ; mac . cIncludes = sources ; mac . cFlags + = <str> ; mac . cppFlags + = <str> ; mac . linkerFlags + = <str> ; BuildTarget mac64 = BuildTarget . newDefaultTarget ( TargetOs . MacOsX , true ) ; mac64 . headerDirs = headers ; mac64 . cIncludes = sources ; mac64 . cFlags + = <str> ; mac64 . cppFlags + = <str> ; mac64 . linkerFlags + = <str> ; BuildTarget android = BuildTarget . newDefaultTarget ( TargetOs . Android , false ) ; android . headerDirs = headers ; android . cIncludes = sources ; android . cFlags + = <str> ; android . cppFlags + = <str> ; BuildTarget ios = BuildTarget . newDefaultTarget ( TargetOs . IOS , false ) ; ios . headerDirs = headers ; ios . cIncludes = sources ; ios . cFlags + = <str> ; ios . cppFlags + = <str> ; new NativeCodeGenerator ( ) . generate ( ) ; new AntScriptGenerator ( ) . generate ( new BuildConfig ( <str> ) , win32home , win32 , win64 , lin32 , lin64 , mac , mac64 , android , ios ) ; } } 

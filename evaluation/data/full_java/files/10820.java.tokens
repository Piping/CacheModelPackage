package org . gradle . internal . classloader ; import org . gradle . api . GradleException ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . reflect . JavaMethod ; import org . gradle . internal . reflect . JavaReflectionUtil ; import java . io . File ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URL ; import java . net . URLClassLoader ; import java . security . CodeSource ; import java . util . * ; public class ClasspathUtil { public static void addUrl ( URLClassLoader classLoader , Iterable < URL > classpathElements ) { try { Set < URI > original = new HashSet < URI > ( ) ; for ( URL url : classLoader . getURLs ( ) ) { original . add ( url . toURI ( ) ) ; } JavaMethod < URLClassLoader , Object > method = JavaReflectionUtil . method ( URLClassLoader . class , Object . class , <str> , URL . class ) ; for ( URL classpathElement : classpathElements ) { if ( original . add ( classpathElement . toURI ( ) ) ) { method . invoke ( classLoader , classpathElement ) ; } } } catch ( Throwable t ) { throw new RuntimeException ( String . format ( <str> , classpathElements , classLoader ) , t ) ; } } public static List < URL > getClasspath ( ClassLoader classLoader ) { final List < URL > implementationClassPath = new ArrayList < URL > ( ) ; new ClassLoaderVisitor ( ) { @Override public void visitClassPath ( URL [ ] classPath ) { implementationClassPath . addAll ( Arrays . asList ( classPath ) ) ; } } . visit ( classLoader ) ; return implementationClassPath ; } public static File getClasspathForClass ( Class < ? > targetClass ) { URI location ; try { CodeSource codeSource = targetClass . getProtectionDomain ( ) . getCodeSource ( ) ; if ( codeSource ! = null & & codeSource . getLocation ( ) ! = null ) { location = codeSource . getLocation ( ) . toURI ( ) ; if ( location . getScheme ( ) . equals ( <str> ) ) { return new File ( location ) ; } } String resourceName = targetClass . getName ( ) . replace ( <str> , <str> ) + <str> ; URL resource = targetClass . getClassLoader ( ) . getResource ( resourceName ) ; if ( resource ! = null ) { return getClasspathForResource ( resource , resourceName ) ; } throw new GradleException ( String . format ( <str> , targetClass . getName ( ) ) ) ; } catch ( URISyntaxException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } public static File getClasspathForResource ( ClassLoader classLoader , String name ) { if ( classLoader = = null ) { return getClasspathForResource ( ClassLoader . getSystemResource ( name ) , name ) ; } else { return getClasspathForResource ( classLoader . getResource ( name ) , name ) ; } } public static File getClasspathForResource ( URL resource , String name ) { URI location ; try { location = resource . toURI ( ) ; String path = location . getPath ( ) ; if ( location . getScheme ( ) . equals ( <str> ) ) { assert path . endsWith ( <str> + name ) ; return new File ( path . substring ( <int> , path . length ( ) - ( name . length ( ) + <int> ) ) ) ; } else if ( location . getScheme ( ) . equals ( <str> ) ) { String schemeSpecificPart = location . getRawSchemeSpecificPart ( ) ; int pos = schemeSpecificPart . indexOf ( <str> ) ; if ( pos > <int> ) { assert schemeSpecificPart . substring ( pos + <int> ) . equals ( <str> + name ) ; URI jarFile = new URI ( schemeSpecificPart . substring ( <int> , pos ) ) ; if ( jarFile . getScheme ( ) . equals ( <str> ) ) { return new File ( jarFile . getPath ( ) ) ; } } } } catch ( URISyntaxException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } throw new GradleException ( String . format ( <str> , name , location ) ) ; } } 

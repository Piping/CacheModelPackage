package org . elasticsearch . test . rest . parser ; import org . elasticsearch . common . collect . Tuple ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . test . rest . section . DoSection ; import org . elasticsearch . test . rest . section . ExecutableSection ; import org . elasticsearch . test . rest . section . SetupSection ; import org . elasticsearch . test . rest . section . SkipSection ; import org . elasticsearch . test . rest . section . TestSection ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class RestTestSuiteParseContext { private static final SetupSectionParser SETUP_SECTION_PARSER = new SetupSectionParser ( ) ; private static final RestTestSectionParser TEST_SECTION_PARSER = new RestTestSectionParser ( ) ; private static final SkipSectionParser SKIP_SECTION_PARSER = new SkipSectionParser ( ) ; private static final DoSectionParser DO_SECTION_PARSER = new DoSectionParser ( ) ; private static final Map < String , RestTestFragmentParser < ? extends ExecutableSection > > EXECUTABLE_SECTIONS_PARSERS = new HashMap < > ( ) ; static { EXECUTABLE_SECTIONS_PARSERS . put ( <str> , DO_SECTION_PARSER ) ; EXECUTABLE_SECTIONS_PARSERS . put ( <str> , new SetSectionParser ( ) ) ; EXECUTABLE_SECTIONS_PARSERS . put ( <str> , new MatchParser ( ) ) ; EXECUTABLE_SECTIONS_PARSERS . put ( <str> , new IsTrueParser ( ) ) ; EXECUTABLE_SECTIONS_PARSERS . put ( <str> , new IsFalseParser ( ) ) ; EXECUTABLE_SECTIONS_PARSERS . put ( <str> , new GreaterThanParser ( ) ) ; EXECUTABLE_SECTIONS_PARSERS . put ( <str> , new GreaterThanEqualToParser ( ) ) ; EXECUTABLE_SECTIONS_PARSERS . put ( <str> , new LessThanParser ( ) ) ; EXECUTABLE_SECTIONS_PARSERS . put ( <str> , new LessThanOrEqualToParser ( ) ) ; EXECUTABLE_SECTIONS_PARSERS . put ( <str> , new LengthParser ( ) ) ; } private final String api ; private final String suiteName ; private final XContentParser parser ; public RestTestSuiteParseContext ( String api , String suiteName , XContentParser parser ) { this . api = api ; this . suiteName = suiteName ; this . parser = parser ; } public String getApi ( ) { return api ; } public String getSuiteName ( ) { return suiteName ; } public XContentParser parser ( ) { return parser ; } public SetupSection parseSetupSection ( ) throws IOException , RestTestParseException { advanceToFieldName ( ) ; if ( <str> . equals ( parser . currentName ( ) ) ) { parser . nextToken ( ) ; SetupSection setupSection = SETUP_SECTION_PARSER . parse ( this ) ; parser . nextToken ( ) ; return setupSection ; } return SetupSection . EMPTY ; } public TestSection parseTestSection ( ) throws IOException , RestTestParseException { return TEST_SECTION_PARSER . parse ( this ) ; } public SkipSection parseSkipSection ( ) throws IOException , RestTestParseException { advanceToFieldName ( ) ; if ( <str> . equals ( parser . currentName ( ) ) ) { SkipSection skipSection = SKIP_SECTION_PARSER . parse ( this ) ; parser . nextToken ( ) ; return skipSection ; } return SkipSection . EMPTY ; } public ExecutableSection parseExecutableSection ( ) throws IOException , RestTestParseException { advanceToFieldName ( ) ; String section = parser . currentName ( ) ; RestTestFragmentParser < ? extends ExecutableSection > execSectionParser = EXECUTABLE_SECTIONS_PARSERS . get ( section ) ; if ( execSectionParser = = null ) { throw new RestTestParseException ( <str> + section + <str> ) ; } ExecutableSection executableSection = execSectionParser . parse ( this ) ; parser . nextToken ( ) ; return executableSection ; } public DoSection parseDoSection ( ) throws IOException , RestTestParseException { return DO_SECTION_PARSER . parse ( this ) ; } public void advanceToFieldName ( ) throws IOException , RestTestParseException { XContentParser . Token token = parser . currentToken ( ) ; if ( token = = null ) { token = parser . nextToken ( ) ; } if ( token = = XContentParser . Token . START_ARRAY ) { token = parser . nextToken ( ) ; } if ( token = = XContentParser . Token . START_OBJECT ) { token = parser . nextToken ( ) ; } if ( token ! = XContentParser . Token . FIELD_NAME ) { throw new RestTestParseException ( <str> + token ) ; } } public String parseField ( ) throws IOException , RestTestParseException { parser . nextToken ( ) ; assert parser . currentToken ( ) . isValue ( ) ; String field = parser . text ( ) ; parser . nextToken ( ) ; return field ; } public Tuple < String , Object > parseTuple ( ) throws IOException , RestTestParseException { parser . nextToken ( ) ; advanceToFieldName ( ) ; Map < String , Object > map = parser . map ( ) ; assert parser . currentToken ( ) = = XContentParser . Token . END_OBJECT ; parser . nextToken ( ) ; if ( map . size ( ) ! = <int> ) { throw new RestTestParseException ( <str> + map . size ( ) + <str> ) ; } Map . Entry < String , Object > entry = map . entrySet ( ) . iterator ( ) . next ( ) ; return Tuple . tuple ( entry . getKey ( ) , entry . getValue ( ) ) ; } } 

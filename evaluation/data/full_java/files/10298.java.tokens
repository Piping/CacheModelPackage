package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . MapInterfaceTest ; import java . util . Collection ; import java . util . Map ; @GwtCompatible public abstract class AbstractMultimapAsMapImplementsMapTest extends MapInterfaceTest < String , Collection < Integer > > { public AbstractMultimapAsMapImplementsMapTest ( boolean modifiable , boolean allowsNulls , boolean supportsIteratorRemove ) { super ( allowsNulls , allowsNulls , false , modifiable , modifiable , supportsIteratorRemove ) ; } protected void populate ( Multimap < String , Integer > multimap ) { multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; } @Override protected String getKeyNotInPopulatedMap ( ) throws UnsupportedOperationException { return <str> ; } @Override protected Collection < Integer > getValueNotInPopulatedMap ( ) throws UnsupportedOperationException { return Lists . newArrayList ( <int> ) ; } @Override public void testRemove ( ) { final Map < String , Collection < Integer > > map ; final String keyToRemove ; try { map = makePopulatedMap ( ) ; } catch ( UnsupportedOperationException e ) { return ; } keyToRemove = map . keySet ( ) . iterator ( ) . next ( ) ; if ( supportsRemove ) { int initialSize = map . size ( ) ; map . get ( keyToRemove ) ; map . remove ( keyToRemove ) ; assertFalse ( map . containsKey ( keyToRemove ) ) ; assertEquals ( initialSize - <int> , map . size ( ) ) ; } else { try { map . remove ( keyToRemove ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException e ) { } } assertInvariants ( map ) ; } } 

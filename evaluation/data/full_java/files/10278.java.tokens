package com . google . common . cache ; import static com . google . common . cache . TestingCacheLoaders . incrementingLoader ; import static java . util . concurrent . TimeUnit . MILLISECONDS ; import com . google . common . cache . TestingCacheLoaders . IncrementingLoader ; import com . google . common . testing . FakeTicker ; import junit . framework . TestCase ; public class CacheRefreshTest extends TestCase { public void testAutoRefresh ( ) { FakeTicker ticker = new FakeTicker ( ) ; IncrementingLoader loader = incrementingLoader ( ) ; LoadingCache < Integer , Integer > cache = CacheBuilder . newBuilder ( ) . refreshAfterWrite ( <int> , MILLISECONDS ) . expireAfterWrite ( <int> , MILLISECONDS ) . lenientParsing ( ) . ticker ( ticker ) . build ( loader ) ; int expectedLoads = <int> ; int expectedReloads = <int> ; for ( int i = <int> ; i < <int> ; i + + ) { assertEquals ( Integer . valueOf ( i ) , cache . getUnchecked ( i ) ) ; expectedLoads + + ; assertEquals ( expectedLoads , loader . getLoadCount ( ) ) ; assertEquals ( expectedReloads , loader . getReloadCount ( ) ) ; ticker . advance ( <int> , MILLISECONDS ) ; } assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( expectedLoads , loader . getLoadCount ( ) ) ; assertEquals ( expectedReloads , loader . getReloadCount ( ) ) ; ticker . advance ( <int> , MILLISECONDS ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; expectedReloads + + ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( expectedLoads , loader . getLoadCount ( ) ) ; assertEquals ( expectedReloads , loader . getReloadCount ( ) ) ; cache . asMap ( ) . put ( <int> , - <int> ) ; ticker . advance ( <int> , MILLISECONDS ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( Integer . valueOf ( - <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( expectedLoads , loader . getLoadCount ( ) ) ; assertEquals ( expectedReloads , loader . getReloadCount ( ) ) ; ticker . advance ( <int> , MILLISECONDS ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( Integer . valueOf ( - <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; expectedReloads + + ; assertEquals ( expectedLoads , loader . getLoadCount ( ) ) ; assertEquals ( expectedReloads , loader . getReloadCount ( ) ) ; ticker . advance ( <int> , MILLISECONDS ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( Integer . valueOf ( - <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( expectedLoads , loader . getLoadCount ( ) ) ; assertEquals ( expectedReloads , loader . getReloadCount ( ) ) ; ticker . advance ( <int> , MILLISECONDS ) ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; expectedReloads + + ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; expectedReloads + + ; assertEquals ( Integer . valueOf ( <int> ) , cache . getUnchecked ( <int> ) ) ; assertEquals ( expectedLoads , loader . getLoadCount ( ) ) ; assertEquals ( expectedReloads , loader . getReloadCount ( ) ) ; } } 

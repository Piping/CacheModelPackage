package org . elasticsearch . index . fielddata ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource . Nested ; import org . elasticsearch . index . fielddata . fieldcomparator . BytesRefFieldComparatorSource ; import org . elasticsearch . index . mapper . MappedFieldType . Names ; import org . elasticsearch . search . MultiValueMode ; public class NoOrdinalsStringFieldDataTests extends PagedBytesStringFieldDataTests { public static IndexFieldData < AtomicFieldData > hideOrdinals ( final IndexFieldData < ? > in ) { return new IndexFieldData < AtomicFieldData > ( ) { @Override public Index index ( ) { return in . index ( ) ; } @Override public Names getFieldNames ( ) { return in . getFieldNames ( ) ; } @Override public FieldDataType getFieldDataType ( ) { return in . getFieldDataType ( ) ; } @Override public AtomicFieldData load ( LeafReaderContext context ) { return in . load ( context ) ; } @Override public AtomicFieldData loadDirect ( LeafReaderContext context ) throws Exception { return in . loadDirect ( context ) ; } @Override public XFieldComparatorSource comparatorSource ( Object missingValue , MultiValueMode sortMode , Nested nested ) { return new BytesRefFieldComparatorSource ( this , missingValue , sortMode , nested ) ; } @Override public void clear ( ) { in . clear ( ) ; } } ; } @SuppressWarnings ( <str> ) @Override public IndexFieldData < AtomicFieldData > getForField ( String fieldName ) { return hideOrdinals ( super . getForField ( fieldName ) ) ; } @Override public void testTermsEnum ( ) throws Exception { assumeTrue ( <str> , false ) ; } } 

package org . gradle . api . reporting . components ; import org . gradle . api . DefaultTask ; import org . gradle . api . Incubating ; import org . gradle . api . Project ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . reporting . components . internal . ComponentReportRenderer ; import org . gradle . api . reporting . components . internal . TypeAwareBinaryRenderer ; import org . gradle . api . tasks . TaskAction ; import org . gradle . language . base . ProjectSourceSet ; import org . gradle . logging . StyledTextOutput ; import org . gradle . logging . StyledTextOutputFactory ; import org . gradle . model . ModelMap ; import org . gradle . model . internal . registry . ModelRegistry ; import org . gradle . model . internal . type . ModelType ; import org . gradle . platform . base . BinarySpec ; import org . gradle . platform . base . ComponentSpec ; import org . gradle . platform . base . ComponentSpecContainer ; import org . gradle . platform . base . test . TestSuiteContainer ; import javax . inject . Inject ; import java . util . ArrayList ; import java . util . Collection ; import static org . gradle . model . internal . type . ModelTypes . modelMap ; @Incubating public class ComponentReport extends DefaultTask { @Inject protected StyledTextOutputFactory getTextOutputFactory ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected FileResolver getFileResolver ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected ModelRegistry getModelRegistry ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected TypeAwareBinaryRenderer getBinaryRenderer ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction public void report ( ) { Project project = getProject ( ) ; StyledTextOutput textOutput = getTextOutputFactory ( ) . create ( ComponentReport . class ) ; ComponentReportRenderer renderer = new ComponentReportRenderer ( getFileResolver ( ) , getBinaryRenderer ( ) ) ; renderer . setOutput ( textOutput ) ; renderer . startProject ( project ) ; Collection < ComponentSpec > components = new ArrayList < ComponentSpec > ( ) ; ComponentSpecContainer componentSpecs = modelElement ( <str> , ComponentSpecContainer . class ) ; if ( componentSpecs ! = null ) { components . addAll ( componentSpecs . values ( ) ) ; } TestSuiteContainer testSuites = modelElement ( <str> , TestSuiteContainer . class ) ; if ( testSuites ! = null ) { components . addAll ( testSuites . values ( ) ) ; } renderer . renderComponents ( components ) ; ProjectSourceSet sourceSets = modelElement ( <str> , ProjectSourceSet . class ) ; if ( sourceSets ! = null ) { renderer . renderSourceSets ( sourceSets ) ; } ModelMap < BinarySpec > binaries = modelElement ( <str> , modelMap ( BinarySpec . class ) ) ; if ( binaries ! = null ) { renderer . renderBinaries ( binaries ) ; } renderer . completeProject ( project ) ; renderer . complete ( ) ; } private < T > T modelElement ( String path , Class < T > clazz ) { return getModelRegistry ( ) . find ( path , clazz ) ; } private < T > T modelElement ( String path , ModelType < T > modelType ) { return getModelRegistry ( ) . find ( path , modelType ) ; } } 

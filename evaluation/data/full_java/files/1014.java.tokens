package org . apache . cassandra . streaming . management ; import java . util . * ; import javax . management . openmbean . * ; import com . google . common . base . Function ; import com . google . common . base . Throwables ; import com . google . common . collect . Iterables ; import com . google . common . collect . Lists ; import com . google . common . collect . Sets ; import org . apache . cassandra . streaming . SessionInfo ; import org . apache . cassandra . streaming . StreamState ; public class StreamStateCompositeData { private static final String [ ] ITEM_NAMES = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; private static final String [ ] ITEM_DESCS = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; private static final OpenType < ? > [ ] ITEM_TYPES ; public static final CompositeType COMPOSITE_TYPE ; static { try { ITEM_TYPES = new OpenType [ ] { SimpleType . STRING , SimpleType . STRING , ArrayType . getArrayType ( SessionInfoCompositeData . COMPOSITE_TYPE ) , SimpleType . LONG , SimpleType . LONG , SimpleType . DOUBLE , SimpleType . LONG , SimpleType . LONG , SimpleType . DOUBLE } ; COMPOSITE_TYPE = new CompositeType ( StreamState . class . getName ( ) , <str> , ITEM_NAMES , ITEM_DESCS , ITEM_TYPES ) ; } catch ( OpenDataException e ) { throw Throwables . propagate ( e ) ; } } public static CompositeData toCompositeData ( final StreamState streamState ) { Map < String , Object > valueMap = new HashMap < > ( ) ; valueMap . put ( ITEM_NAMES [ <int> ] , streamState . planId . toString ( ) ) ; valueMap . put ( ITEM_NAMES [ <int> ] , streamState . description ) ; CompositeData [ ] sessions = new CompositeData [ streamState . sessions . size ( ) ] ; Lists . newArrayList ( Iterables . transform ( streamState . sessions , new Function < SessionInfo , CompositeData > ( ) { public CompositeData apply ( SessionInfo input ) { return SessionInfoCompositeData . toCompositeData ( streamState . planId , input ) ; } } ) ) . toArray ( sessions ) ; valueMap . put ( ITEM_NAMES [ <int> ] , sessions ) ; long currentRxBytes = <int> ; long totalRxBytes = <int> ; long currentTxBytes = <int> ; long totalTxBytes = <int> ; for ( SessionInfo sessInfo : streamState . sessions ) { currentRxBytes + = sessInfo . getTotalSizeReceived ( ) ; totalRxBytes + = sessInfo . getTotalSizeToReceive ( ) ; currentTxBytes + = sessInfo . getTotalSizeSent ( ) ; totalTxBytes + = sessInfo . getTotalSizeToSend ( ) ; } double rxPercentage = ( totalRxBytes = = <int> ? <int> : currentRxBytes * <int> / totalRxBytes ) ; double txPercentage = ( totalTxBytes = = <int> ? <int> : currentTxBytes * <int> / totalTxBytes ) ; valueMap . put ( ITEM_NAMES [ <int> ] , currentRxBytes ) ; valueMap . put ( ITEM_NAMES [ <int> ] , totalRxBytes ) ; valueMap . put ( ITEM_NAMES [ <int> ] , rxPercentage ) ; valueMap . put ( ITEM_NAMES [ <int> ] , currentTxBytes ) ; valueMap . put ( ITEM_NAMES [ <int> ] , totalTxBytes ) ; valueMap . put ( ITEM_NAMES [ <int> ] , txPercentage ) ; try { return new CompositeDataSupport ( COMPOSITE_TYPE , valueMap ) ; } catch ( OpenDataException e ) { throw Throwables . propagate ( e ) ; } } public static StreamState fromCompositeData ( CompositeData cd ) { assert cd . getCompositeType ( ) . equals ( COMPOSITE_TYPE ) ; Object [ ] values = cd . getAll ( ITEM_NAMES ) ; UUID planId = UUID . fromString ( ( String ) values [ <int> ] ) ; String description = ( String ) values [ <int> ] ; Set < SessionInfo > sessions = Sets . newHashSet ( Iterables . transform ( Arrays . asList ( ( CompositeData [ ] ) values [ <int> ] ) , new Function < CompositeData , SessionInfo > ( ) { public SessionInfo apply ( CompositeData input ) { return SessionInfoCompositeData . fromCompositeData ( input ) ; } } ) ) ; return new StreamState ( planId , description , sessions ) ; } } 

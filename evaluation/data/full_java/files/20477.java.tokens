package io . netty . channel . udt ; import com . barchart . udt . OptionUDT ; import com . barchart . udt . TypeUDT ; import io . netty . buffer . ByteBufAllocator ; import io . netty . channel . ChannelConfig ; import io . netty . channel . ChannelException ; import io . netty . channel . ChannelOption ; import io . netty . channel . MessageSizeEstimator ; import io . netty . channel . RecvByteBufAllocator ; public interface UdtChannelConfig extends ChannelConfig { int getProtocolReceiveBufferSize ( ) ; int getProtocolSendBufferSize ( ) ; int getReceiveBufferSize ( ) ; int getSendBufferSize ( ) ; int getSoLinger ( ) ; int getSystemReceiveBufferSize ( ) ; int getSystemSendBufferSize ( ) ; boolean isReuseAddress ( ) ; @Override UdtChannelConfig setConnectTimeoutMillis ( int connectTimeoutMillis ) ; @Override @Deprecated UdtChannelConfig setMaxMessagesPerRead ( int maxMessagesPerRead ) ; @Override UdtChannelConfig setWriteSpinCount ( int writeSpinCount ) ; @Override UdtChannelConfig setAllocator ( ByteBufAllocator allocator ) ; @Override UdtChannelConfig setRecvByteBufAllocator ( RecvByteBufAllocator allocator ) ; @Override UdtChannelConfig setAutoRead ( boolean autoRead ) ; @Override UdtChannelConfig setAutoClose ( boolean autoClose ) ; @Override UdtChannelConfig setWriteBufferHighWaterMark ( int writeBufferHighWaterMark ) ; @Override UdtChannelConfig setWriteBufferLowWaterMark ( int writeBufferLowWaterMark ) ; @Override UdtChannelConfig setMessageSizeEstimator ( MessageSizeEstimator estimator ) ; UdtChannelConfig setProtocolReceiveBufferSize ( int size ) ; UdtChannelConfig setProtocolSendBufferSize ( int size ) ; UdtChannelConfig setReceiveBufferSize ( int receiveBufferSize ) ; UdtChannelConfig setReuseAddress ( boolean reuseAddress ) ; UdtChannelConfig setSendBufferSize ( int sendBufferSize ) ; UdtChannelConfig setSoLinger ( int soLinger ) ; UdtChannelConfig setSystemReceiveBufferSize ( int size ) ; UdtChannelConfig setSystemSendBufferSize ( int size ) ; } 

package io . netty . handler . codec . frame ; import io . netty . buffer . ByteBuf ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . EncoderException ; import io . netty . handler . codec . LengthFieldPrepender ; import io . netty . util . CharsetUtil ; import org . junit . Before ; import org . junit . Test ; import static io . netty . buffer . Unpooled . * ; import java . nio . ByteOrder ; import static org . junit . Assert . * ; public class LengthFieldPrependerTest { private ByteBuf msg ; @Before public void setUp ( ) throws Exception { msg = copiedBuffer ( <str> , CharsetUtil . ISO_8859_1 ) ; } @Test public void testPrependLength ( ) throws Exception { final EmbeddedChannel ch = new EmbeddedChannel ( new LengthFieldPrepender ( <int> ) ) ; ch . writeOutbound ( msg ) ; ByteBuf buf = ch . readOutbound ( ) ; assertEquals ( <int> , buf . readableBytes ( ) ) ; assertEquals ( msg . readableBytes ( ) , buf . readInt ( ) ) ; buf . release ( ) ; buf = ch . readOutbound ( ) ; assertSame ( buf , msg ) ; buf . release ( ) ; } @Test public void testPrependLengthIncludesLengthFieldLength ( ) throws Exception { final EmbeddedChannel ch = new EmbeddedChannel ( new LengthFieldPrepender ( <int> , true ) ) ; ch . writeOutbound ( msg ) ; ByteBuf buf = ch . readOutbound ( ) ; assertEquals ( <int> , buf . readableBytes ( ) ) ; assertEquals ( <int> , buf . readInt ( ) ) ; buf . release ( ) ; buf = ch . readOutbound ( ) ; assertSame ( buf , msg ) ; buf . release ( ) ; } @Test public void testPrependAdjustedLength ( ) throws Exception { final EmbeddedChannel ch = new EmbeddedChannel ( new LengthFieldPrepender ( <int> , - <int> ) ) ; ch . writeOutbound ( msg ) ; ByteBuf buf = ch . readOutbound ( ) ; assertEquals ( <int> , buf . readableBytes ( ) ) ; assertEquals ( msg . readableBytes ( ) - <int> , buf . readInt ( ) ) ; buf . release ( ) ; buf = ch . readOutbound ( ) ; assertSame ( buf , msg ) ; buf . release ( ) ; } @Test public void testAdjustedLengthLessThanZero ( ) throws Exception { final EmbeddedChannel ch = new EmbeddedChannel ( new LengthFieldPrepender ( <int> , - <int> ) ) ; try { ch . writeOutbound ( msg ) ; fail ( EncoderException . class . getSimpleName ( ) + <str> ) ; } catch ( EncoderException e ) { } } @Test public void testPrependLengthInLittleEndian ( ) throws Exception { final EmbeddedChannel ch = new EmbeddedChannel ( new LengthFieldPrepender ( ByteOrder . LITTLE_ENDIAN , <int> , <int> , false ) ) ; ch . writeOutbound ( msg ) ; ByteBuf buf = ch . readOutbound ( ) ; assertEquals ( <int> , buf . readableBytes ( ) ) ; byte [ ] writtenBytes = new byte [ buf . readableBytes ( ) ] ; buf . getBytes ( <int> , writtenBytes ) ; assertEquals ( <int> , writtenBytes [ <int> ] ) ; assertEquals ( <int> , writtenBytes [ <int> ] ) ; assertEquals ( <int> , writtenBytes [ <int> ] ) ; assertEquals ( <int> , writtenBytes [ <int> ] ) ; buf . release ( ) ; buf = ch . readOutbound ( ) ; assertSame ( buf , msg ) ; buf . release ( ) ; assertFalse ( <str> , ch . finish ( ) ) ; } } 

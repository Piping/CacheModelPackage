package org . elasticsearch . indices . recovery ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . store . Store ; import org . elasticsearch . transport . TransportRequest ; import java . io . IOException ; public class RecoveryCleanFilesRequest extends TransportRequest { private long recoveryId ; private ShardId shardId ; private Store . MetadataSnapshot snapshotFiles ; private int totalTranslogOps = RecoveryState . Translog . UNKNOWN ; public RecoveryCleanFilesRequest ( ) { } RecoveryCleanFilesRequest ( long recoveryId , ShardId shardId , Store . MetadataSnapshot snapshotFiles , int totalTranslogOps ) { this . recoveryId = recoveryId ; this . shardId = shardId ; this . snapshotFiles = snapshotFiles ; this . totalTranslogOps = totalTranslogOps ; } public long recoveryId ( ) { return this . recoveryId ; } public ShardId shardId ( ) { return shardId ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; recoveryId = in . readLong ( ) ; shardId = ShardId . readShardId ( in ) ; snapshotFiles = new Store . MetadataSnapshot ( in ) ; totalTranslogOps = in . readVInt ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeLong ( recoveryId ) ; shardId . writeTo ( out ) ; snapshotFiles . writeTo ( out ) ; out . writeVInt ( totalTranslogOps ) ; } public Store . MetadataSnapshot sourceMetaSnapshot ( ) { return snapshotFiles ; } public int totalTranslogOps ( ) { return totalTranslogOps ; } } 

package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class FieldMaskingSpanQueryParser implements QueryParser < FieldMaskingSpanQueryBuilder > { public static final ParseField FIELD_FIELD = new ParseField ( <str> ) ; public static final ParseField QUERY_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { FieldMaskingSpanQueryBuilder . NAME , Strings . toCamelCase ( FieldMaskingSpanQueryBuilder . NAME ) } ; } @Override public FieldMaskingSpanQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; SpanQueryBuilder inner = null ; String field = null ; String queryName = null ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , QUERY_FIELD ) ) { QueryBuilder query = parseContext . parseInnerQueryBuilder ( ) ; if ( ! ( query instanceof SpanQueryBuilder ) ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } inner = ( SpanQueryBuilder ) query ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , FIELD_FIELD ) ) { field = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } if ( inner = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } if ( field = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } FieldMaskingSpanQueryBuilder queryBuilder = new FieldMaskingSpanQueryBuilder ( inner , field ) ; queryBuilder . boost ( boost ) ; queryBuilder . queryName ( queryName ) ; return queryBuilder ; } @Override public FieldMaskingSpanQueryBuilder getBuilderPrototype ( ) { return FieldMaskingSpanQueryBuilder . PROTOTYPE ; } } 

package org . gradle . api . internal . project . taskfactory ; import org . gradle . api . Action ; import org . gradle . api . Task ; import org . gradle . api . Transformer ; import org . gradle . api . internal . TaskInternal ; import org . gradle . internal . UncheckedException ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . lang . annotation . Annotation ; import java . util . Collection ; import java . util . concurrent . Callable ; public class OutputDirectoryPropertyAnnotationHandler implements PropertyAnnotationHandler { private final Class < ? extends Annotation > annotationType ; private final Transformer < Iterable < File > , Object > valueTransformer ; public OutputDirectoryPropertyAnnotationHandler ( Class < ? extends Annotation > annotationType , Transformer < Iterable < File > , Object > valueTransformer ) { this . annotationType = annotationType ; this . valueTransformer = valueTransformer ; } public Class < ? extends Annotation > getAnnotationType ( ) { return annotationType ; } private final ValidationAction outputDirValidation = new ValidationAction ( ) { public void validate ( String propertyName , Object value , Collection < String > messages ) { for ( File file : valueTransformer . transform ( value ) ) { if ( file . exists ( ) & & ! file . isDirectory ( ) ) { messages . add ( String . format ( <str> , file , propertyName ) ) ; return ; } for ( File candidate = file ; candidate ! = null & & ! candidate . isDirectory ( ) ; candidate = candidate . getParentFile ( ) ) { if ( candidate . exists ( ) & & ! candidate . isDirectory ( ) ) { messages . add ( String . format ( <str> , file , propertyName , candidate ) ) ; break ; } } } } } ; public void attachActions ( final PropertyActionContext context ) { context . setValidationAction ( outputDirValidation ) ; context . setConfigureAction ( new UpdateAction ( ) { public void update ( TaskInternal task , final Callable < Object > futureValue ) { task . getOutputs ( ) . files ( futureValue ) ; task . prependParallelSafeAction ( new Action < Task > ( ) { public void execute ( Task task ) { Iterable < File > files ; try { files = valueTransformer . transform ( futureValue . call ( ) ) ; } catch ( Exception e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } for ( File file : files ) { file = GFileUtils . canonicalise ( file ) ; GFileUtils . mkdirs ( file ) ; } } } ) ; } } ) ; } } 

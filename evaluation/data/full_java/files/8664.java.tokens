package org . elasticsearch . index . analysis ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . index . analysis . AnalysisTestUtils . createAnalysisService ; import static org . hamcrest . Matchers . instanceOf ; public class SimpleIcuAnalysisTests extends ESTestCase { public void testDefaultsIcuAnalysis ( ) throws IOException { Settings settings = settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenizerFactory tokenizerFactory = analysisService . tokenizer ( <str> ) ; assertThat ( tokenizerFactory , instanceOf ( IcuTokenizerFactory . class ) ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertThat ( filterFactory , instanceOf ( IcuNormalizerTokenFilterFactory . class ) ) ; filterFactory = analysisService . tokenFilter ( <str> ) ; assertThat ( filterFactory , instanceOf ( IcuFoldingTokenFilterFactory . class ) ) ; filterFactory = analysisService . tokenFilter ( <str> ) ; assertThat ( filterFactory , instanceOf ( IcuCollationTokenFilterFactory . class ) ) ; filterFactory = analysisService . tokenFilter ( <str> ) ; assertThat ( filterFactory , instanceOf ( IcuTransformTokenFilterFactory . class ) ) ; CharFilterFactory charFilterFactory = analysisService . charFilter ( <str> ) ; assertThat ( charFilterFactory , instanceOf ( IcuNormalizerCharFilterFactory . class ) ) ; } } 

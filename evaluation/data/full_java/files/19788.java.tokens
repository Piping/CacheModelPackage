package io . netty . example . factorial ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . ChannelFuture ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . util . InsecureTrustManagerFactory ; public final class FactorialClient { static final boolean SSL = System . getProperty ( <str> ) ! = null ; static final String HOST = System . getProperty ( <str> , <str> ) ; static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; static final int COUNT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; public static void main ( String [ ] args ) throws Exception { final SslContext sslCtx ; if ( SSL ) { sslCtx = SslContextBuilder . forClient ( ) . trustManager ( InsecureTrustManagerFactory . INSTANCE ) . build ( ) ; } else { sslCtx = null ; } EventLoopGroup group = new NioEventLoopGroup ( ) ; try { Bootstrap b = new Bootstrap ( ) ; b . group ( group ) . channel ( NioSocketChannel . class ) . handler ( new FactorialClientInitializer ( sslCtx ) ) ; ChannelFuture f = b . connect ( HOST , PORT ) . sync ( ) ; FactorialClientHandler handler = ( FactorialClientHandler ) f . channel ( ) . pipeline ( ) . last ( ) ; System . err . format ( <str> , COUNT , handler . getFactorial ( ) ) ; } finally { group . shutdownGracefully ( ) ; } } } 

package org . eclipse . ui . externaltools . internal . model ; import java . util . Map ; import org . eclipse . core . externaltools . internal . model . BuilderCoreUtils ; import org . eclipse . core . resources . ICommand ; import org . eclipse . core . resources . IFolder ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . swt . widgets . Shell ; public class BuilderUtils { private static final String TAG_CONFIGURATION_MAP = <str> ; private static final String TAG_SOURCE_TYPE = <str> ; private static final String TAG_BUILDER_TYPE = <str> ; public static ILaunchConfiguration configFromBuildCommandArgs ( IProject project , Map < String , String > commandArgs , String [ ] version ) { return BuilderCoreUtils . configFromBuildCommandArgs ( project , commandArgs , version ) ; } public static ICommand commandFromLaunchConfig ( IProject project , ILaunchConfiguration config ) { ICommand newCommand = null ; try { newCommand = project . getDescription ( ) . newCommand ( ) ; newCommand = toBuildCommand ( project , config , newCommand ) ; configureTriggers ( config , newCommand ) ; } catch ( CoreException exception ) { Shell shell = ExternalToolsPlugin . getActiveWorkbenchShell ( ) ; if ( shell ! = null ) { MessageDialog . openError ( shell , ExternalToolsModelMessages . BuilderUtils_5 , ExternalToolsModelMessages . BuilderUtils_6 ) ; } return null ; } return newCommand ; } public static void configureTriggers ( ILaunchConfiguration config , ICommand newCommand ) throws CoreException { BuilderCoreUtils . configureTriggers ( config , newCommand ) ; } public static boolean isUnmigratedConfig ( ILaunchConfiguration config ) { return BuilderCoreUtils . isUnmigratedConfig ( config ) ; } public static ICommand toBuildCommand ( IProject project , ILaunchConfiguration config , ICommand command ) throws CoreException { return BuilderCoreUtils . toBuildCommand ( project , config , command ) ; } public static ILaunchConfigurationType getConfigurationDuplicationType ( ILaunchConfiguration config ) throws CoreException { IExtensionPoint ep = Platform . getExtensionRegistry ( ) . getExtensionPoint ( ExternalToolsPlugin . PLUGIN_ID , IExternalToolConstants . EXTENSION_POINT_CONFIGURATION_DUPLICATION_MAPS ) ; IConfigurationElement [ ] elements = ep . getConfigurationElements ( ) ; String sourceType = config . getType ( ) . getIdentifier ( ) ; String builderType = null ; for ( int i = <int> ; i < elements . length ; i + + ) { IConfigurationElement element = elements [ i ] ; if ( element . getName ( ) . equals ( TAG_CONFIGURATION_MAP ) & & sourceType . equals ( element . getAttribute ( TAG_SOURCE_TYPE ) ) ) { builderType = element . getAttribute ( TAG_BUILDER_TYPE ) ; break ; } } if ( builderType ! = null ) { ILaunchConfigurationType type = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfigurationType ( builderType ) ; if ( type ! = null ) { return type ; } } return config . getType ( ) ; } public static IFolder getBuilderFolder ( IProject project , boolean create ) { return BuilderCoreUtils . getBuilderFolder ( project , create ) ; } public static ILaunchConfiguration duplicateConfiguration ( IProject project , ILaunchConfiguration config ) throws CoreException { Map < String , Object > attributes = config . getAttributes ( ) ; String newName = new StringBuffer ( config . getName ( ) ) . append ( ExternalToolsModelMessages . BuilderUtils_7 ) . toString ( ) ; newName = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . generateLaunchConfigurationName ( newName ) ; ILaunchConfigurationType newType = getConfigurationDuplicationType ( config ) ; ILaunchConfigurationWorkingCopy newWorkingCopy = newType . newInstance ( getBuilderFolder ( project , true ) , newName ) ; newWorkingCopy . setAttributes ( attributes ) ; return newWorkingCopy . doSave ( ) ; } public static ILaunchConfiguration migrateBuilderConfiguration ( IProject project , ILaunchConfigurationWorkingCopy workingCopy ) throws CoreException { return BuilderCoreUtils . migrateBuilderConfiguration ( project , workingCopy ) ; } public static int [ ] buildTypesToArray ( String buildTypes ) { return BuilderCoreUtils . buildTypesToArray ( buildTypes ) ; } } 

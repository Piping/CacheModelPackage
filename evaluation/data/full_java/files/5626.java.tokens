package org . elasticsearch . cluster . routing . allocation . decider ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . allocation . RoutingAllocation ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . node . settings . NodeSettingsService ; public class ConcurrentRebalanceAllocationDecider extends AllocationDecider { public static final String NAME = <str> ; public static final String CLUSTER_ROUTING_ALLOCATION_CLUSTER_CONCURRENT_REBALANCE = <str> ; class ApplySettings implements NodeSettingsService . Listener { @Override public void onRefreshSettings ( Settings settings ) { int clusterConcurrentRebalance = settings . getAsInt ( CLUSTER_ROUTING_ALLOCATION_CLUSTER_CONCURRENT_REBALANCE , ConcurrentRebalanceAllocationDecider . this . clusterConcurrentRebalance ) ; if ( clusterConcurrentRebalance ! = ConcurrentRebalanceAllocationDecider . this . clusterConcurrentRebalance ) { logger . info ( <str> , ConcurrentRebalanceAllocationDecider . this . clusterConcurrentRebalance , clusterConcurrentRebalance ) ; ConcurrentRebalanceAllocationDecider . this . clusterConcurrentRebalance = clusterConcurrentRebalance ; } } } private volatile int clusterConcurrentRebalance ; @Inject public ConcurrentRebalanceAllocationDecider ( Settings settings , NodeSettingsService nodeSettingsService ) { super ( settings ) ; this . clusterConcurrentRebalance = settings . getAsInt ( CLUSTER_ROUTING_ALLOCATION_CLUSTER_CONCURRENT_REBALANCE , <int> ) ; logger . debug ( <str> , clusterConcurrentRebalance ) ; nodeSettingsService . addListener ( new ApplySettings ( ) ) ; } @Override public Decision canRebalance ( ShardRouting shardRouting , RoutingAllocation allocation ) { if ( clusterConcurrentRebalance = = - <int> ) { return allocation . decision ( Decision . YES , NAME , <str> ) ; } if ( allocation . routingNodes ( ) . getRelocatingShardCount ( ) > = clusterConcurrentRebalance ) { return allocation . decision ( Decision . NO , NAME , <str> , allocation . routingNodes ( ) . getRelocatingShardCount ( ) , clusterConcurrentRebalance ) ; } return allocation . decision ( Decision . YES , NAME , <str> , clusterConcurrentRebalance ) ; } } 

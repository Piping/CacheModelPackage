package io . netty . channel . unix ; import java . net . Inet6Address ; import java . net . InetAddress ; import java . net . InetSocketAddress ; import java . net . UnknownHostException ; public final class NativeInetAddress { private static final byte [ ] IPV4_MAPPED_IPV6_PREFIX = { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , ( byte ) <hex> , ( byte ) <hex> } ; final byte [ ] address ; final int scopeId ; public static NativeInetAddress newInstance ( InetAddress addr ) { byte [ ] bytes = addr . getAddress ( ) ; if ( addr instanceof Inet6Address ) { return new NativeInetAddress ( bytes , ( ( Inet6Address ) addr ) . getScopeId ( ) ) ; } else { return new NativeInetAddress ( ipv4MappedIpv6Address ( bytes ) ) ; } } public NativeInetAddress ( byte [ ] address , int scopeId ) { this . address = address ; this . scopeId = scopeId ; } public NativeInetAddress ( byte [ ] address ) { this ( address , <int> ) ; } public byte [ ] address ( ) { return address ; } public int scopeId ( ) { return scopeId ; } public static byte [ ] ipv4MappedIpv6Address ( byte [ ] ipv4 ) { byte [ ] address = new byte [ <int> ] ; System . arraycopy ( IPV4_MAPPED_IPV6_PREFIX , <int> , address , <int> , IPV4_MAPPED_IPV6_PREFIX . length ) ; System . arraycopy ( ipv4 , <int> , address , <int> , ipv4 . length ) ; return address ; } public static InetSocketAddress address ( byte [ ] addr , int offset , int len ) { final int port = decodeInt ( addr , offset + len - <int> ) ; final InetAddress address ; try { switch ( len ) { case <int> : byte [ ] ipv4 = new byte [ <int> ] ; System . arraycopy ( addr , offset , ipv4 , <int> , <int> ) ; address = InetAddress . getByAddress ( ipv4 ) ; break ; case <int> : byte [ ] ipv6 = new byte [ <int> ] ; System . arraycopy ( addr , offset , ipv6 , <int> , <int> ) ; int scopeId = decodeInt ( addr , offset + len - <int> ) ; address = Inet6Address . getByAddress ( null , ipv6 , scopeId ) ; break ; default : throw new Error ( ) ; } return new InetSocketAddress ( address , port ) ; } catch ( UnknownHostException e ) { throw new Error ( <str> , e ) ; } } static int decodeInt ( byte [ ] addr , int index ) { return ( addr [ index ] & <hex> ) < < <int> | ( addr [ index + <int> ] & <hex> ) < < <int> | ( addr [ index + <int> ] & <hex> ) < < <int> | addr [ index + <int> ] & <hex> ; } } 

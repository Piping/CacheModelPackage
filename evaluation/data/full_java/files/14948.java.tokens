package org . gradle . nativeplatform . internal . prebuilt ; import org . gradle . api . Action ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . nativeplatform . BuildType ; import org . gradle . nativeplatform . Flavor ; import org . gradle . nativeplatform . NativeLibraryBinary ; import org . gradle . nativeplatform . PrebuiltLibrary ; import org . gradle . nativeplatform . platform . NativePlatform ; import org . gradle . nativeplatform . platform . internal . NativePlatforms ; import org . gradle . platform . base . internal . BinaryNamingScheme ; import org . gradle . platform . base . internal . DefaultBinaryNamingScheme ; import java . util . Collection ; import java . util . LinkedHashSet ; import java . util . Set ; public class PrebuiltLibraryInitializer implements Action < PrebuiltLibrary > { private final Instantiator instantiator ; private final Set < NativePlatform > allPlatforms = new LinkedHashSet < NativePlatform > ( ) ; private final Set < BuildType > allBuildTypes = new LinkedHashSet < BuildType > ( ) ; private final Set < Flavor > allFlavors = new LinkedHashSet < Flavor > ( ) ; public PrebuiltLibraryInitializer ( Instantiator instantiator , NativePlatforms nativePlatforms , Collection < ? extends NativePlatform > allPlatforms , Collection < ? extends BuildType > allBuildTypes , Collection < ? extends Flavor > allFlavors ) { this . instantiator = instantiator ; this . allPlatforms . addAll ( allPlatforms ) ; this . allPlatforms . addAll ( nativePlatforms . defaultPlatformDefinitions ( ) ) ; this . allBuildTypes . addAll ( allBuildTypes ) ; this . allFlavors . addAll ( allFlavors ) ; } public void execute ( PrebuiltLibrary prebuiltLibrary ) { for ( NativePlatform platform : allPlatforms ) { for ( BuildType buildType : allBuildTypes ) { for ( Flavor flavor : allFlavors ) { createNativeBinaries ( prebuiltLibrary , platform , buildType , flavor ) ; } } } } public void createNativeBinaries ( PrebuiltLibrary library , NativePlatform platform , BuildType buildType , Flavor flavor ) { createNativeBinary ( DefaultPrebuiltSharedLibraryBinary . class , library , platform , buildType , flavor ) ; createNativeBinary ( DefaultPrebuiltStaticLibraryBinary . class , library , platform , buildType , flavor ) ; } public < T extends NativeLibraryBinary > void createNativeBinary ( Class < T > type , PrebuiltLibrary library , NativePlatform platform , BuildType buildType , Flavor flavor ) { String name = getName ( type , library , platform , buildType , flavor ) ; T nativeBinary = instantiator . newInstance ( type , name , library , buildType , platform , flavor ) ; library . getBinaries ( ) . add ( nativeBinary ) ; } private < T extends NativeLibraryBinary > String getName ( Class < T > type , PrebuiltLibrary library , NativePlatform platform , BuildType buildType , Flavor flavor ) { BinaryNamingScheme namingScheme = DefaultBinaryNamingScheme . component ( library . getName ( ) ) . withBinaryType ( type . getSimpleName ( ) ) . withVariantDimension ( platform . getName ( ) ) . withVariantDimension ( buildType . getName ( ) ) . withVariantDimension ( flavor . getName ( ) ) ; return namingScheme . getBinaryName ( ) ; } } 

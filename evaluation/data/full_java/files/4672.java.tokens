package org . eclipse . debug . ui ; import java . util . Comparator ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; import java . util . Map . Entry ; import java . util . TreeMap ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . ui . AbstractDebugCheckboxSelectionDialog ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . MultipleInputDialog ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . internal . ui . launchConfigurations . EnvironmentVariable ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationsMessages ; import org . eclipse . jface . dialogs . Dialog ; import org . eclipse . jface . dialogs . MessageDialog ; import org . eclipse . jface . viewers . DoubleClickEvent ; import org . eclipse . jface . viewers . IBaseLabelProvider ; import org . eclipse . jface . viewers . IContentProvider ; import org . eclipse . jface . viewers . IDoubleClickListener ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . ILabelProviderListener ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . ITableLabelProvider ; import org . eclipse . jface . viewers . LabelProvider ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . jface . viewers . TableViewer ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . viewers . ViewerComparator ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . ControlAdapter ; import org . eclipse . swt . events . ControlEvent ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . graphics . Rectangle ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . ScrollBar ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Table ; import org . eclipse . swt . widgets . TableColumn ; import org . eclipse . swt . widgets . TableItem ; import org . eclipse . ui . PlatformUI ; import com . ibm . icu . text . MessageFormat ; public class EnvironmentTab extends AbstractLaunchConfigurationTab { protected TableViewer environmentTable ; protected String [ ] envTableColumnHeaders = { LaunchConfigurationsMessages . EnvironmentTab_Variable_1 , LaunchConfigurationsMessages . EnvironmentTab_Value_2 , } ; private static final String NAME_LABEL = LaunchConfigurationsMessages . EnvironmentTab_8 ; private static final String VALUE_LABEL = LaunchConfigurationsMessages . EnvironmentTab_9 ; protected static final String P_VARIABLE = <str> ; protected static final String P_VALUE = <str> ; protected Button envAddButton ; protected Button envEditButton ; protected Button envRemoveButton ; protected Button appendEnvironment ; protected Button replaceEnvironment ; protected Button envSelectButton ; protected class EnvironmentVariableContentProvider implements IStructuredContentProvider { @Override public Object [ ] getElements ( Object inputElement ) { EnvironmentVariable [ ] elements = new EnvironmentVariable [ <int> ] ; ILaunchConfiguration config = ( ILaunchConfiguration ) inputElement ; Map < String , String > m ; try { m = config . getAttribute ( ILaunchManager . ATTR_ENVIRONMENT_VARIABLES , ( Map < String , String > ) null ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , IStatus . ERROR , <str> , e ) ) ; return elements ; } if ( m ! = null & & ! m . isEmpty ( ) ) { elements = new EnvironmentVariable [ m . size ( ) ] ; String [ ] varNames = new String [ m . size ( ) ] ; m . keySet ( ) . toArray ( varNames ) ; for ( int i = <int> ; i < m . size ( ) ; i + + ) { elements [ i ] = new EnvironmentVariable ( varNames [ i ] , m . get ( varNames [ i ] ) ) ; } } return elements ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { if ( newInput = = null ) { return ; } if ( viewer instanceof TableViewer ) { TableViewer tableViewer = ( TableViewer ) viewer ; if ( tableViewer . getTable ( ) . isDisposed ( ) ) { return ; } tableViewer . setComparator ( new ViewerComparator ( ) { @Override public int compare ( Viewer iviewer , Object e1 , Object e2 ) { if ( e1 = = null ) { return - <int> ; } else if ( e2 = = null ) { return <int> ; } else { return ( ( EnvironmentVariable ) e1 ) . getName ( ) . compareToIgnoreCase ( ( ( EnvironmentVariable ) e2 ) . getName ( ) ) ; } } } ) ; } } } public class EnvironmentVariableLabelProvider extends LabelProvider implements ITableLabelProvider { @Override public String getColumnText ( Object element , int columnIndex ) { String result = null ; if ( element ! = null ) { EnvironmentVariable var = ( EnvironmentVariable ) element ; switch ( columnIndex ) { case <int> : result = var . getName ( ) ; break ; case <int> : result = var . getValue ( ) ; break ; default : break ; } } return result ; } @Override public Image getColumnImage ( Object element , int columnIndex ) { if ( columnIndex = = <int> ) { return DebugPluginImages . getImage ( IDebugUIConstants . IMG_OBJS_ENV_VAR ) ; } return null ; } } public EnvironmentTab ( ) { setHelpContextId ( IDebugHelpContextIds . LAUNCH_CONFIGURATION_DIALOG_ENVIRONMENT_TAB ) ; } @Override public void createControl ( Composite parent ) { Composite mainComposite = SWTFactory . createComposite ( parent , <int> , <int> , GridData . FILL_HORIZONTAL ) ; setControl ( mainComposite ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getControl ( ) , getHelpContextId ( ) ) ; createEnvironmentTable ( mainComposite ) ; createTableButtons ( mainComposite ) ; createAppendReplace ( mainComposite ) ; Dialog . applyDialogFont ( mainComposite ) ; } protected void createAppendReplace ( Composite parent ) { Composite comp = SWTFactory . createComposite ( parent , <int> , <int> , GridData . FILL_HORIZONTAL ) ; appendEnvironment = createRadioButton ( comp , LaunchConfigurationsMessages . EnvironmentTab_16 ) ; appendEnvironment . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { updateLaunchConfigurationDialog ( ) ; } } ) ; replaceEnvironment = createRadioButton ( comp , LaunchConfigurationsMessages . EnvironmentTab_17 ) ; } protected void updateAppendReplace ( ) { boolean enable = environmentTable . getTable ( ) . getItemCount ( ) > <int> ; appendEnvironment . setEnabled ( enable ) ; replaceEnvironment . setEnabled ( enable ) ; } protected void createEnvironmentTable ( Composite parent ) { Font font = parent . getFont ( ) ; SWTFactory . createLabel ( parent , LaunchConfigurationsMessages . EnvironmentTab_Environment_variables_to_set__3 , <int> ) ; Composite tableComposite = SWTFactory . createComposite ( parent , font , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; environmentTable = new TableViewer ( tableComposite , SWT . BORDER | SWT . H_SCROLL | SWT . V_SCROLL | SWT . MULTI | SWT . FULL_SELECTION ) ; Table table = environmentTable . getTable ( ) ; table . setLayout ( new GridLayout ( ) ) ; table . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; table . setHeaderVisible ( true ) ; table . setLinesVisible ( true ) ; table . setFont ( font ) ; environmentTable . setContentProvider ( new EnvironmentVariableContentProvider ( ) ) ; environmentTable . setLabelProvider ( new EnvironmentVariableLabelProvider ( ) ) ; environmentTable . setColumnProperties ( new String [ ] { P_VARIABLE , P_VALUE } ) ; environmentTable . addSelectionChangedListener ( new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { handleTableSelectionChanged ( event ) ; } } ) ; environmentTable . addDoubleClickListener ( new IDoubleClickListener ( ) { @Override public void doubleClick ( DoubleClickEvent event ) { if ( ! environmentTable . getSelection ( ) . isEmpty ( ) ) { handleEnvEditButtonSelected ( ) ; } } } ) ; final TableColumn tc1 = new TableColumn ( table , SWT . NONE , <int> ) ; tc1 . setText ( envTableColumnHeaders [ <int> ] ) ; final TableColumn tc2 = new TableColumn ( table , SWT . NONE , <int> ) ; tc2 . setText ( envTableColumnHeaders [ <int> ] ) ; final Table tref = table ; final Composite comp = tableComposite ; tableComposite . addControlListener ( new ControlAdapter ( ) { @Override public void controlResized ( ControlEvent e ) { Rectangle area = comp . getClientArea ( ) ; Point size = tref . computeSize ( SWT . DEFAULT , SWT . DEFAULT ) ; ScrollBar vBar = tref . getVerticalBar ( ) ; int width = area . width - tref . computeTrim ( <int> , <int> , <int> , <int> ) . width - <int> ; if ( size . y > area . height + tref . getHeaderHeight ( ) ) { Point vBarSize = vBar . getSize ( ) ; width - = vBarSize . x ; } Point oldSize = tref . getSize ( ) ; if ( oldSize . x > area . width ) { tc1 . setWidth ( width / <int> - <int> ) ; tc2 . setWidth ( width - tc1 . getWidth ( ) ) ; tref . setSize ( area . width , area . height ) ; } else { tref . setSize ( area . width , area . height ) ; tc1 . setWidth ( width / <int> - <int> ) ; tc2 . setWidth ( width - tc1 . getWidth ( ) ) ; } } } ) ; } protected void handleTableSelectionChanged ( SelectionChangedEvent event ) { int size = ( ( IStructuredSelection ) event . getSelection ( ) ) . size ( ) ; envEditButton . setEnabled ( size = = <int> ) ; envRemoveButton . setEnabled ( size > <int> ) ; } protected void createTableButtons ( Composite parent ) { Composite buttonComposite = SWTFactory . createComposite ( parent , parent . getFont ( ) , <int> , <int> , GridData . VERTICAL_ALIGN_BEGINNING | GridData . HORIZONTAL_ALIGN_END , <int> , <int> ) ; envAddButton = createPushButton ( buttonComposite , LaunchConfigurationsMessages . EnvironmentTab_New_4 , null ) ; envAddButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent event ) { handleEnvAddButtonSelected ( ) ; } } ) ; envSelectButton = createPushButton ( buttonComposite , LaunchConfigurationsMessages . EnvironmentTab_18 , null ) ; envSelectButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent event ) { handleEnvSelectButtonSelected ( ) ; } } ) ; envEditButton = createPushButton ( buttonComposite , LaunchConfigurationsMessages . EnvironmentTab_Edit_5 , null ) ; envEditButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent event ) { handleEnvEditButtonSelected ( ) ; } } ) ; envEditButton . setEnabled ( false ) ; envRemoveButton = createPushButton ( buttonComposite , LaunchConfigurationsMessages . EnvironmentTab_Remove_6 , null ) ; envRemoveButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent event ) { handleEnvRemoveButtonSelected ( ) ; } } ) ; envRemoveButton . setEnabled ( false ) ; } protected void handleEnvAddButtonSelected ( ) { MultipleInputDialog dialog = new MultipleInputDialog ( getShell ( ) , LaunchConfigurationsMessages . EnvironmentTab_22 ) ; dialog . addTextField ( NAME_LABEL , null , false ) ; dialog . addVariablesField ( VALUE_LABEL , null , true ) ; if ( dialog . open ( ) ! = Window . OK ) { return ; } String name = dialog . getStringValue ( NAME_LABEL ) ; String value = dialog . getStringValue ( VALUE_LABEL ) ; if ( name ! = null & & value ! = null & & name . length ( ) > <int> & & value . length ( ) > <int> ) { addVariable ( new EnvironmentVariable ( name . trim ( ) , value . trim ( ) ) ) ; updateAppendReplace ( ) ; } } protected boolean addVariable ( EnvironmentVariable variable ) { String name = variable . getName ( ) ; TableItem [ ] items = environmentTable . getTable ( ) . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { EnvironmentVariable existingVariable = ( EnvironmentVariable ) items [ i ] . getData ( ) ; if ( existingVariable . getName ( ) . equals ( name ) ) { boolean overWrite = MessageDialog . openQuestion ( getShell ( ) , LaunchConfigurationsMessages . EnvironmentTab_12 , MessageFormat . format ( LaunchConfigurationsMessages . EnvironmentTab_13 , new Object [ ] { name } ) ) ; if ( ! overWrite ) { return false ; } environmentTable . remove ( existingVariable ) ; break ; } } environmentTable . add ( variable ) ; updateLaunchConfigurationDialog ( ) ; return true ; } private void handleEnvSelectButtonSelected ( ) { Map < String , EnvironmentVariable > envVariables = getNativeEnvironment ( ) ; TableItem [ ] items = environmentTable . getTable ( ) . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { EnvironmentVariable var = ( EnvironmentVariable ) items [ i ] . getData ( ) ; envVariables . remove ( var . getName ( ) ) ; } NativeEnvironmentSelectionDialog dialog = new NativeEnvironmentSelectionDialog ( getShell ( ) , envVariables ) ; dialog . setTitle ( LaunchConfigurationsMessages . EnvironmentTab_20 ) ; int button = dialog . open ( ) ; if ( button = = Window . OK ) { Object [ ] selected = dialog . getResult ( ) ; for ( int i = <int> ; i < selected . length ; i + + ) { environmentTable . add ( selected [ i ] ) ; } } updateAppendReplace ( ) ; updateLaunchConfigurationDialog ( ) ; } private Map < String , EnvironmentVariable > getNativeEnvironment ( ) { Map < String , String > stringVars = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getNativeEnvironmentCasePreserved ( ) ; HashMap < String , EnvironmentVariable > vars = new HashMap < String , EnvironmentVariable > ( ) ; for ( Entry < String , String > entry : stringVars . entrySet ( ) ) { vars . put ( entry . getKey ( ) , new EnvironmentVariable ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return vars ; } private void handleEnvEditButtonSelected ( ) { IStructuredSelection sel = ( IStructuredSelection ) environmentTable . getSelection ( ) ; EnvironmentVariable var = ( EnvironmentVariable ) sel . getFirstElement ( ) ; if ( var = = null ) { return ; } String originalName = var . getName ( ) ; String value = var . getValue ( ) ; MultipleInputDialog dialog = new MultipleInputDialog ( getShell ( ) , LaunchConfigurationsMessages . EnvironmentTab_11 ) ; dialog . addTextField ( NAME_LABEL , originalName , false ) ; if ( value ! = null & & value . indexOf ( System . getProperty ( <str> ) ) > - <int> ) { dialog . addMultilinedVariablesField ( VALUE_LABEL , value , true ) ; } else { dialog . addVariablesField ( VALUE_LABEL , value , true ) ; } if ( dialog . open ( ) ! = Window . OK ) { return ; } String name = dialog . getStringValue ( NAME_LABEL ) ; value = dialog . getStringValue ( VALUE_LABEL ) ; if ( ! originalName . equals ( name ) ) { if ( addVariable ( new EnvironmentVariable ( name , value ) ) ) { environmentTable . remove ( var ) ; } } else { var . setValue ( value ) ; environmentTable . update ( var , null ) ; updateLaunchConfigurationDialog ( ) ; } } private void handleEnvRemoveButtonSelected ( ) { IStructuredSelection sel = ( IStructuredSelection ) environmentTable . getSelection ( ) ; try { environmentTable . getControl ( ) . setRedraw ( false ) ; for ( Iterator < ? > i = sel . iterator ( ) ; i . hasNext ( ) ; ) { EnvironmentVariable var = ( EnvironmentVariable ) i . next ( ) ; environmentTable . remove ( var ) ; } } finally { environmentTable . getControl ( ) . setRedraw ( true ) ; } updateAppendReplace ( ) ; updateLaunchConfigurationDialog ( ) ; } protected void updateEnvironment ( ILaunchConfiguration configuration ) { environmentTable . setInput ( configuration ) ; } @Override public void setDefaults ( ILaunchConfigurationWorkingCopy configuration ) { configuration . removeAttribute ( ILaunchManager . ATTR_APPEND_ENVIRONMENT_VARIABLES ) ; } @Override public void initializeFrom ( ILaunchConfiguration configuration ) { boolean append = true ; try { append = configuration . getAttribute ( ILaunchManager . ATTR_APPEND_ENVIRONMENT_VARIABLES , true ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; } if ( append ) { appendEnvironment . setSelection ( true ) ; replaceEnvironment . setSelection ( false ) ; } else { replaceEnvironment . setSelection ( true ) ; appendEnvironment . setSelection ( false ) ; } updateEnvironment ( configuration ) ; updateAppendReplace ( ) ; } @Override public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { TableItem [ ] items = environmentTable . getTable ( ) . getItems ( ) ; Map < String , String > map = new HashMap < String , String > ( items . length ) ; for ( int i = <int> ; i < items . length ; i + + ) { EnvironmentVariable var = ( EnvironmentVariable ) items [ i ] . getData ( ) ; map . put ( var . getName ( ) , var . getValue ( ) ) ; } if ( map . size ( ) = = <int> ) { configuration . setAttribute ( ILaunchManager . ATTR_ENVIRONMENT_VARIABLES , ( Map < String , String > ) null ) ; } else { configuration . setAttribute ( ILaunchManager . ATTR_ENVIRONMENT_VARIABLES , map ) ; } if ( appendEnvironment . getSelection ( ) ) { ILaunchConfiguration orig = configuration . getOriginal ( ) ; boolean hasTrueValue = false ; if ( orig ! = null ) { try { hasTrueValue = orig . hasAttribute ( ILaunchManager . ATTR_APPEND_ENVIRONMENT_VARIABLES ) & & orig . getAttribute ( ILaunchManager . ATTR_APPEND_ENVIRONMENT_VARIABLES , true ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; } } if ( hasTrueValue ) { configuration . setAttribute ( ILaunchManager . ATTR_APPEND_ENVIRONMENT_VARIABLES , true ) ; } else { configuration . removeAttribute ( ILaunchManager . ATTR_APPEND_ENVIRONMENT_VARIABLES ) ; } } else { configuration . setAttribute ( ILaunchManager . ATTR_APPEND_ENVIRONMENT_VARIABLES , false ) ; } } @Override public String getName ( ) { return LaunchConfigurationsMessages . EnvironmentTab_Environment_7 ; } @Override public String getId ( ) { return <str> ; } @Override public Image getImage ( ) { return DebugPluginImages . getImage ( IDebugUIConstants . IMG_OBJS_ENVIRONMENT ) ; } @Override public void activated ( ILaunchConfigurationWorkingCopy workingCopy ) { } @Override public void deactivated ( ILaunchConfigurationWorkingCopy workingCopy ) { } private class NativeEnvironmentSelectionDialog extends AbstractDebugCheckboxSelectionDialog { private Object fInput ; public NativeEnvironmentSelectionDialog ( Shell parentShell , Object input ) { super ( parentShell ) ; fInput = input ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; setShowSelectAllButtons ( true ) ; } @Override protected String getDialogSettingsId ( ) { return IDebugUIConstants . PLUGIN_ID + <str> ; } @Override protected String getHelpContextId ( ) { return IDebugHelpContextIds . SELECT_NATIVE_ENVIRONMENT_DIALOG ; } @Override protected Object getViewerInput ( ) { return fInput ; } @Override protected String getViewerLabel ( ) { return LaunchConfigurationsMessages . EnvironmentTab_19 ; } @Override protected IBaseLabelProvider getLabelProvider ( ) { return new ILabelProvider ( ) { @Override public Image getImage ( Object element ) { return DebugPluginImages . getImage ( IDebugUIConstants . IMG_OBJS_ENVIRONMENT ) ; } @Override public String getText ( Object element ) { EnvironmentVariable var = ( EnvironmentVariable ) element ; return MessageFormat . format ( LaunchConfigurationsMessages . EnvironmentTab_7 , new Object [ ] { var . getName ( ) , var . getValue ( ) } ) ; } @Override public void addListener ( ILabelProviderListener listener ) { } @Override public void dispose ( ) { } @Override public boolean isLabelProperty ( Object element , String property ) { return false ; } @Override public void removeListener ( ILabelProviderListener listener ) { } } ; } @Override protected IContentProvider getContentProvider ( ) { return new IStructuredContentProvider ( ) { @Override public Object [ ] getElements ( Object inputElement ) { EnvironmentVariable [ ] elements = null ; if ( inputElement instanceof HashMap ) { Comparator < Object > comparator = new Comparator < Object > ( ) { @Override public int compare ( Object o1 , Object o2 ) { String s1 = ( String ) o1 ; String s2 = ( String ) o2 ; return s1 . compareTo ( s2 ) ; } } ; TreeMap < Object , Object > envVars = new TreeMap < Object , Object > ( comparator ) ; envVars . putAll ( ( Map < ? , ? > ) inputElement ) ; elements = new EnvironmentVariable [ envVars . size ( ) ] ; int index = <int> ; for ( Iterator < Object > iterator = envVars . keySet ( ) . iterator ( ) ; iterator . hasNext ( ) ; index + + ) { Object key = iterator . next ( ) ; elements [ index ] = ( EnvironmentVariable ) envVars . get ( key ) ; } } return elements ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } } ; } } } 

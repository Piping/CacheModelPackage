package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . utils . Align ; public class CheckBox extends TextButton { private Image image ; private Cell imageCell ; private CheckBoxStyle style ; public CheckBox ( String text , Skin skin ) { this ( text , skin . get ( CheckBoxStyle . class ) ) ; } public CheckBox ( String text , Skin skin , String styleName ) { this ( text , skin . get ( styleName , CheckBoxStyle . class ) ) ; } public CheckBox ( String text , CheckBoxStyle style ) { super ( text , style ) ; clearChildren ( ) ; Label label = getLabel ( ) ; imageCell = add ( image = new Image ( style . checkboxOff ) ) ; add ( label ) ; label . setAlignment ( Align . left ) ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; } public void setStyle ( ButtonStyle style ) { if ( ! ( style instanceof CheckBoxStyle ) ) throw new IllegalArgumentException ( <str> ) ; super . setStyle ( style ) ; this . style = ( CheckBoxStyle ) style ; } public CheckBoxStyle getStyle ( ) { return style ; } public void draw ( Batch batch , float parentAlpha ) { Drawable checkbox = null ; if ( isDisabled ( ) ) { if ( isChecked & & style . checkboxOnDisabled ! = null ) checkbox = style . checkboxOnDisabled ; else checkbox = style . checkboxOffDisabled ; } if ( checkbox = = null ) { if ( isChecked & & style . checkboxOn ! = null ) checkbox = style . checkboxOn ; else if ( isOver ( ) & & style . checkboxOver ! = null & & ! isDisabled ( ) ) checkbox = style . checkboxOver ; else checkbox = style . checkboxOff ; } image . setDrawable ( checkbox ) ; super . draw ( batch , parentAlpha ) ; } public Image getImage ( ) { return image ; } public Cell getImageCell ( ) { return imageCell ; } static public class CheckBoxStyle extends TextButtonStyle { public Drawable checkboxOn , checkboxOff ; public Drawable checkboxOver , checkboxOnDisabled , checkboxOffDisabled ; public CheckBoxStyle ( ) { } public CheckBoxStyle ( Drawable checkboxOff , Drawable checkboxOn , BitmapFont font , Color fontColor ) { this . checkboxOff = checkboxOff ; this . checkboxOn = checkboxOn ; this . font = font ; this . fontColor = fontColor ; } public CheckBoxStyle ( CheckBoxStyle style ) { this . checkboxOff = style . checkboxOff ; this . checkboxOn = style . checkboxOn ; this . checkboxOver = style . checkboxOver ; this . checkboxOffDisabled = style . checkboxOffDisabled ; this . checkboxOnDisabled = style . checkboxOnDisabled ; this . font = style . font ; this . fontColor = new Color ( style . fontColor ) ; } } } 

package org . gradle . api . internal . tasks . execution ; import org . gradle . api . Task ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . tasks . TaskExecuter ; import org . gradle . api . internal . tasks . TaskExecutionContext ; import org . gradle . api . internal . tasks . TaskStateInternal ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; public class SkipTaskWithNoActionsExecuter implements TaskExecuter { private static final Logger LOGGER = Logging . getLogger ( SkipTaskWithNoActionsExecuter . class ) ; private final TaskExecuter executer ; public SkipTaskWithNoActionsExecuter ( TaskExecuter executer ) { this . executer = executer ; } public void execute ( TaskInternal task , TaskStateInternal state , TaskExecutionContext context ) { if ( task . getActions ( ) . isEmpty ( ) ) { LOGGER . info ( <str> , task ) ; boolean upToDate = true ; for ( Task dependency : task . getTaskDependencies ( ) . getDependencies ( task ) ) { if ( ! dependency . getState ( ) . getSkipped ( ) ) { upToDate = false ; break ; } } if ( upToDate ) { state . upToDate ( ) ; } return ; } executer . execute ( task , state , context ) ; } } 

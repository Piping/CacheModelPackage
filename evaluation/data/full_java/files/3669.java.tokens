package org . eclipse . debug . internal . core ; import java . io . IOException ; import java . io . OutputStream ; import java . util . Vector ; import org . eclipse . debug . core . DebugPlugin ; public class InputStreamMonitor { private OutputStream fStream ; private Vector < String > fQueue ; private Thread fThread ; private Object fLock ; private boolean fClosed = false ; private String fEncoding ; public InputStreamMonitor ( OutputStream stream ) { this ( stream , null ) ; } public InputStreamMonitor ( OutputStream stream , String encoding ) { fStream = stream ; fQueue = new Vector < String > ( ) ; fLock = new Object ( ) ; fEncoding = encoding ; } public void write ( String text ) { synchronized ( fLock ) { fQueue . add ( text ) ; fLock . notifyAll ( ) ; } } public void startMonitoring ( ) { if ( fThread = = null ) { fThread = new Thread ( new Runnable ( ) { @Override public void run ( ) { write ( ) ; } } , DebugCoreMessages . InputStreamMonitor_label ) ; fThread . setDaemon ( true ) ; fThread . start ( ) ; } } public void close ( ) { if ( fThread ! = null ) { Thread thread = fThread ; fThread = null ; thread . interrupt ( ) ; } } protected void write ( ) { while ( fThread ! = null ) { writeNext ( ) ; } if ( ! fClosed ) { try { fStream . close ( ) ; } catch ( IOException e ) { DebugPlugin . log ( e ) ; } } } protected void writeNext ( ) { while ( ! fQueue . isEmpty ( ) & & ! fClosed ) { String text = fQueue . firstElement ( ) ; fQueue . removeElementAt ( <int> ) ; try { if ( fEncoding ! = null ) { fStream . write ( text . getBytes ( fEncoding ) ) ; } else { fStream . write ( text . getBytes ( ) ) ; } fStream . flush ( ) ; } catch ( IOException e ) { DebugPlugin . log ( e ) ; } } try { synchronized ( fLock ) { fLock . wait ( ) ; } } catch ( InterruptedException e ) { } } public void closeInputStream ( ) throws IOException { if ( ! fClosed ) { fClosed = true ; fStream . close ( ) ; } else { throw new IOException ( ) ; } } } 

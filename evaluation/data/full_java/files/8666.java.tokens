package org . elasticsearch . index . analysis ; import com . ibm . icu . text . Normalizer2 ; import org . apache . lucene . analysis . CharFilter ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . io . StringReader ; import static org . elasticsearch . index . analysis . AnalysisTestUtils . createAnalysisService ; public class SimpleIcuNormalizerCharFilterTests extends ESTestCase { public void testDefaultSetting ( ) throws Exception { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; CharFilterFactory charFilterFactory = analysisService . charFilter ( <str> ) ; String input = <str> ; Normalizer2 normalizer = Normalizer2 . getInstance ( null , <str> , Normalizer2 . Mode . COMPOSE ) ; String expectedOutput = normalizer . normalize ( input ) ; CharFilter inputReader = ( CharFilter ) charFilterFactory . create ( new StringReader ( input ) ) ; char [ ] tempBuff = new char [ <int> ] ; StringBuilder output = new StringBuilder ( ) ; while ( true ) { int length = inputReader . read ( tempBuff ) ; if ( length = = - <int> ) break ; output . append ( tempBuff , <int> , length ) ; assertEquals ( output . toString ( ) , normalizer . normalize ( input . substring ( <int> , inputReader . correctOffset ( output . length ( ) ) ) ) ) ; } assertEquals ( expectedOutput , output . toString ( ) ) ; } public void testNameAndModeSetting ( ) throws Exception { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; CharFilterFactory charFilterFactory = analysisService . charFilter ( <str> ) ; String input = <str> ; Normalizer2 normalizer = Normalizer2 . getInstance ( null , <str> , Normalizer2 . Mode . DECOMPOSE ) ; String expectedOutput = normalizer . normalize ( input ) ; CharFilter inputReader = ( CharFilter ) charFilterFactory . create ( new StringReader ( input ) ) ; char [ ] tempBuff = new char [ <int> ] ; StringBuilder output = new StringBuilder ( ) ; while ( true ) { int length = inputReader . read ( tempBuff ) ; if ( length = = - <int> ) break ; output . append ( tempBuff , <int> , length ) ; assertEquals ( output . toString ( ) , normalizer . normalize ( input . substring ( <int> , inputReader . correctOffset ( output . length ( ) ) ) ) ) ; } assertEquals ( expectedOutput , output . toString ( ) ) ; } } 

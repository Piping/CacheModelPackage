package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import com . google . common . collect . testing . google . BiMapTestSuiteBuilder ; import com . google . common . collect . testing . google . TestBiMapGenerator ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Collections ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; @GwtCompatible ( emulated = true ) public class EnumHashBiMapTest extends TestCase { private enum Currency { DOLLAR , FRANC , PESO , POUND , YEN } private enum Country { CANADA , CHILE , JAPAN , SWITZERLAND , UK } public static final class EnumHashBiMapGenerator implements TestBiMapGenerator < Country , String > { @SuppressWarnings ( <str> ) @Override public BiMap < Country , String > create ( Object . . . entries ) { BiMap < Country , String > result = EnumHashBiMap . create ( Country . class ) ; for ( Object o : entries ) { Entry < Country , String > entry = ( Entry < Country , String > ) o ; result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return result ; } @Override public SampleElements < Entry < Country , String > > samples ( ) { return new SampleElements < Entry < Country , String > > ( Maps . immutableEntry ( Country . CANADA , <str> ) , Maps . immutableEntry ( Country . CHILE , <str> ) , Maps . immutableEntry ( Country . UK , <str> ) , Maps . immutableEntry ( Country . JAPAN , <str> ) , Maps . immutableEntry ( Country . SWITZERLAND , <str> ) ) ; } @SuppressWarnings ( <str> ) @Override public Entry < Country , String > [ ] createArray ( int length ) { return new Entry [ length ] ; } @Override public Iterable < Entry < Country , String > > order ( List < Entry < Country , String > > insertionOrder ) { return insertionOrder ; } @Override public Country [ ] createKeyArray ( int length ) { return new Country [ length ] ; } @Override public String [ ] createValueArray ( int length ) { return new String [ length ] ; } } @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( BiMapTestSuiteBuilder . using ( new EnumHashBiMapGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . SERIALIZABLE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , MapFeature . ALLOWS_NULL_VALUES , MapFeature . GENERAL_PURPOSE , CollectionFeature . KNOWN_ORDER ) . createTestSuite ( ) ) ; suite . addTestSuite ( EnumHashBiMapTest . class ) ; return suite ; } public void testCreate ( ) { EnumHashBiMap < Currency , String > bimap = EnumHashBiMap . create ( Currency . class ) ; assertTrue ( bimap . isEmpty ( ) ) ; assertEquals ( <str> , bimap . toString ( ) ) ; assertEquals ( HashBiMap . create ( ) , bimap ) ; bimap . put ( Currency . DOLLAR , <str> ) ; assertEquals ( <str> , bimap . get ( Currency . DOLLAR ) ) ; assertEquals ( Currency . DOLLAR , bimap . inverse ( ) . get ( <str> ) ) ; } public void testCreateFromMap ( ) { Map < Currency , String > map = ImmutableMap . of ( Currency . DOLLAR , <str> , Currency . PESO , <str> , Currency . FRANC , <str> ) ; EnumHashBiMap < Currency , String > bimap = EnumHashBiMap . create ( map ) ; assertEquals ( <str> , bimap . get ( Currency . DOLLAR ) ) ; assertEquals ( Currency . DOLLAR , bimap . inverse ( ) . get ( <str> ) ) ; try { EnumHashBiMap . create ( Collections . < Currency , String > emptyMap ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } Map < Currency , String > emptyBimap = EnumHashBiMap . create ( Currency . class ) ; bimap = EnumHashBiMap . create ( emptyBimap ) ; assertTrue ( bimap . isEmpty ( ) ) ; Map < Currency , Country > emptyBimap2 = EnumBiMap . create ( Currency . class , Country . class ) ; EnumHashBiMap < Currency , Country > bimap2 = EnumHashBiMap . create ( emptyBimap2 ) ; assertTrue ( bimap2 . isEmpty ( ) ) ; } public void testEnumHashBiMapConstructor ( ) { EnumHashBiMap < Currency , String > bimap1 = EnumHashBiMap . create ( Currency . class ) ; bimap1 . put ( Currency . DOLLAR , <str> ) ; EnumHashBiMap < Currency , String > bimap2 = EnumHashBiMap . create ( bimap1 ) ; assertEquals ( <str> , bimap2 . get ( Currency . DOLLAR ) ) ; assertEquals ( bimap1 , bimap2 ) ; bimap2 . inverse ( ) . put ( <str> , Currency . FRANC ) ; assertEquals ( <str> , bimap2 . get ( Currency . FRANC ) ) ; assertNull ( bimap1 . get ( Currency . FRANC ) ) ; assertFalse ( bimap2 . equals ( bimap1 ) ) ; EnumHashBiMap < Currency , String > emptyBimap = EnumHashBiMap . create ( Currency . class ) ; EnumHashBiMap < Currency , String > bimap3 = EnumHashBiMap . create ( emptyBimap ) ; assertEquals ( bimap3 , emptyBimap ) ; } public void testEnumBiMapConstructor ( ) { EnumBiMap < Currency , Country > bimap1 = EnumBiMap . create ( Currency . class , Country . class ) ; bimap1 . put ( Currency . DOLLAR , Country . SWITZERLAND ) ; EnumHashBiMap < Currency , Object > bimap2 = EnumHashBiMap . < Currency , Object > create ( bimap1 ) ; assertEquals ( Country . SWITZERLAND , bimap2 . get ( Currency . DOLLAR ) ) ; assertEquals ( bimap1 , bimap2 ) ; bimap2 . inverse ( ) . put ( <str> , Currency . FRANC ) ; assertEquals ( <str> , bimap2 . get ( Currency . FRANC ) ) ; assertNull ( bimap1 . get ( Currency . FRANC ) ) ; assertFalse ( bimap2 . equals ( bimap1 ) ) ; EnumBiMap < Currency , Country > emptyBimap = EnumBiMap . create ( Currency . class , Country . class ) ; EnumHashBiMap < Currency , Country > bimap3 = EnumHashBiMap . create ( emptyBimap ) ; assertEquals ( bimap3 , emptyBimap ) ; } public void testKeyType ( ) { EnumHashBiMap < Currency , String > bimap = EnumHashBiMap . create ( Currency . class ) ; assertEquals ( Currency . class , bimap . keyType ( ) ) ; } public void testEntrySet ( ) { Map < Currency , String > map = ImmutableMap . of ( Currency . DOLLAR , <str> , Currency . PESO , <str> , Currency . FRANC , <str> ) ; EnumHashBiMap < Currency , String > bimap = EnumHashBiMap . create ( map ) ; Set < Object > uniqueEntries = Sets . newIdentityHashSet ( ) ; uniqueEntries . addAll ( bimap . entrySet ( ) ) ; assertEquals ( <int> , uniqueEntries . size ( ) ) ; } @GwtIncompatible ( <str> ) public void testSerializable ( ) { SerializableTester . reserializeAndAssert ( EnumHashBiMap . create ( Currency . class ) ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( EnumHashBiMap . class ) ; new NullPointerTester ( ) . testAllPublicInstanceMethods ( EnumHashBiMap . create ( Currency . class ) ) ; } } 

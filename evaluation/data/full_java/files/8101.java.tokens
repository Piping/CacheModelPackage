package org . elasticsearch . index . analysis . commongrams ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . analysis . core . WhitespaceTokenizer ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . analysis . AnalysisService ; import org . elasticsearch . index . analysis . AnalysisTestsHelper ; import org . elasticsearch . index . analysis . TokenFilterFactory ; import org . elasticsearch . test . ESTokenStreamTestCase ; import org . junit . Assert ; import java . io . IOException ; import java . io . InputStream ; import java . io . StringReader ; import java . nio . file . Files ; import java . nio . file . Path ; import static org . hamcrest . Matchers . instanceOf ; public class CommonGramsTokenFilterFactoryTests extends ESTokenStreamTestCase { public void testDefault ( ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; try { AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; Assert . fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } catch ( IOException e ) { fail ( <str> ) ; } } public void testWithoutCommonWordsMatch ( ) throws IOException { { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; { TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected ) ; } } { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , createTempDir ( ) . toString ( ) ) . putArray ( <str> , <str> , <str> ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; { TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected ) ; } } } public void testSettings ( ) throws IOException { { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , true ) . put ( <str> , createTempDir ( ) . toString ( ) ) . putArray ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected ) ; } { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , false ) . put ( <str> , createTempDir ( ) . toString ( ) ) . putArray ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected ) ; } { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected ) ; } } public void testCommonGramsAnalysis ( ) throws IOException { String json = <str> ; Settings settings = Settings . settingsBuilder ( ) . loadFromStream ( json , getClass ( ) . getResourceAsStream ( json ) ) . put ( <str> , createHome ( ) ) . build ( ) ; { AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; Analyzer analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; assertTokenStreamContents ( analyzer . tokenStream ( <str> , source ) , expected ) ; } { AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; Analyzer analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; assertTokenStreamContents ( analyzer . tokenStream ( <str> , source ) , expected ) ; } } public void testQueryModeSettings ( ) throws IOException { { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , true ) . putArray ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . put ( <str> , true ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected ) ; } { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , true ) . putArray ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . put ( <str> , false ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected ) ; } { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , true ) . putArray ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected ) ; } { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , true ) . putArray ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected ) ; } } public void testQueryModeCommonGramsAnalysis ( ) throws IOException { String json = <str> ; Settings settings = Settings . settingsBuilder ( ) . loadFromStream ( json , getClass ( ) . getResourceAsStream ( json ) ) . put ( <str> , createHome ( ) ) . build ( ) ; { AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; Analyzer analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; assertTokenStreamContents ( analyzer . tokenStream ( <str> , source ) , expected ) ; } { AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; Analyzer analyzer = analysisService . analyzer ( <str> ) . analyzer ( ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; assertTokenStreamContents ( analyzer . tokenStream ( <str> , source ) , expected ) ; } } private Path createHome ( ) throws IOException { InputStream words = getClass ( ) . getResourceAsStream ( <str> ) ; Path home = createTempDir ( ) ; Path config = home . resolve ( <str> ) ; Files . createDirectory ( config ) ; Files . copy ( words , config . resolve ( <str> ) ) ; return home ; } } 

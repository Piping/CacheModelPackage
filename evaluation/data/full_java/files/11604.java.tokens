package org . gradle . api . internal . initialization . loadercache ; import com . google . common . collect . Iterators ; import com . google . common . collect . Lists ; import com . google . common . collect . Sets ; import org . gradle . api . internal . changedetection . state . FileSnapshotter ; import org . gradle . cache . CacheAccess ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . util . Iterator ; import java . util . List ; import java . util . Set ; import java . util . zip . Adler32 ; public class HashClassPathSnapshotter implements ClassPathSnapshotter { private final FileSnapshotter fileSnapshotter ; private final CacheAccess cacheAccess ; public HashClassPathSnapshotter ( FileSnapshotter fileSnapshotter , CacheAccess cacheAccess ) { this . fileSnapshotter = fileSnapshotter ; this . cacheAccess = cacheAccess ; } public ClassPathSnapshot snapshot ( ClassPath classPath ) { final List < String > visitedFilePaths = Lists . newLinkedList ( ) ; final Set < File > visitedDirs = Sets . newLinkedHashSet ( ) ; final List < File > cpFiles = classPath . getAsFiles ( ) ; final Adler32 checksum = new Adler32 ( ) ; cacheAccess . useCache ( <str> , new Runnable ( ) { @Override public void run ( ) { hash ( checksum , visitedFilePaths , visitedDirs , cpFiles . iterator ( ) ) ; } } ) ; return new ClassPathSnapshotImpl ( visitedFilePaths , checksum . getValue ( ) ) ; } private void hash ( Adler32 combinedHash , List < String > visitedFilePaths , Set < File > visitedDirs , Iterator < File > toHash ) { while ( toHash . hasNext ( ) ) { File file = GFileUtils . canonicalise ( toHash . next ( ) ) ; if ( file . isDirectory ( ) ) { if ( visitedDirs . add ( file ) ) { hash ( combinedHash , visitedFilePaths , visitedDirs , Iterators . forArray ( file . listFiles ( ) ) ) ; } } else if ( file . isFile ( ) ) { visitedFilePaths . add ( file . getAbsolutePath ( ) ) ; combinedHash . update ( fileSnapshotter . snapshot ( file ) . getHash ( ) ) ; } } } private static class ClassPathSnapshotImpl implements ClassPathSnapshot { private final List < String > files ; private final long hash ; public ClassPathSnapshotImpl ( List < String > files , long hash ) { assert files ! = null ; this . files = files ; this . hash = hash ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } ClassPathSnapshotImpl that = ( ClassPathSnapshotImpl ) o ; return hash = = that . hash & & files . equals ( that . files ) ; } @Override public int hashCode ( ) { int result = files . hashCode ( ) ; result = <int> * result + ( int ) ( hash ^ ( hash > > > <int> ) ) ; return result ; } } } 

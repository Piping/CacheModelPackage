package org . eclipse . debug . internal . ui . elements . adapters ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IWatchExpression ; import org . eclipse . debug . internal . ui . DefaultLabelProvider ; import org . eclipse . jface . viewers . ICellModifier ; @SuppressWarnings ( <str> ) public class WatchExpressionCellModifier implements ICellModifier { @Override public boolean canModify ( Object element , String property ) { if ( VariableColumnPresentation . COLUMN_VARIABLE_NAME . equals ( property ) ) { return element instanceof IWatchExpression ; } return false ; } @Override public Object getValue ( Object element , String property ) { if ( VariableColumnPresentation . COLUMN_VARIABLE_NAME . equals ( property ) ) { return DefaultLabelProvider . escapeSpecialChars ( ( ( IWatchExpression ) element ) . getExpressionText ( ) ) ; } return null ; } @Override public void modify ( Object element , String property , Object value ) { Object oldValue = getValue ( element , property ) ; if ( ! value . equals ( oldValue ) ) { if ( VariableColumnPresentation . COLUMN_VARIABLE_NAME . equals ( property ) ) { if ( element instanceof IWatchExpression ) { if ( value instanceof String ) { String expressionText = DefaultLabelProvider . encodeEsacpedChars ( ( String ) value ) ; IWatchExpression expression = ( IWatchExpression ) element ; if ( expressionText . trim ( ) . length ( ) > <int> ) { expression . setExpressionText ( expressionText ) ; } else { DebugPlugin . getDefault ( ) . getExpressionManager ( ) . removeExpression ( expression ) ; } } } } } } } 

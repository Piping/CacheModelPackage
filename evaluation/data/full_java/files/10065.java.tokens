package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ADD ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . MinimalCollection ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; @SuppressWarnings ( <str> ) @GwtCompatible public class ListAddAllTester < E > extends AbstractListTester < E > { @CollectionFeature.Require ( SUPPORTS_ADD ) @CollectionSize.Require ( absent = ZERO ) public void testAddAll_supportedAllPresent ( ) { assertTrue ( <str> , getList ( ) . addAll ( MinimalCollection . of ( e0 ( ) ) ) ) ; expectAdded ( e0 ( ) ) ; } @CollectionFeature.Require ( absent = SUPPORTS_ADD ) @CollectionSize.Require ( absent = ZERO ) public void testAddAll_unsupportedAllPresent ( ) { try { getList ( ) . addAll ( MinimalCollection . of ( e0 ( ) ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testAddAll_withDuplicates ( ) { MinimalCollection < E > elementsToAdd = MinimalCollection . of ( e0 ( ) , e1 ( ) , e0 ( ) , e1 ( ) ) ; assertTrue ( <str> , getList ( ) . addAll ( elementsToAdd ) ) ; expectAdded ( e0 ( ) , e1 ( ) , e0 ( ) , e1 ( ) ) ; } } 

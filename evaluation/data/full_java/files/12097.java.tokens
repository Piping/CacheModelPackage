package org . gradle . internal . operations . logging ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . UncheckedException ; import org . gradle . util . GFileUtils ; import java . io . * ; public class DefaultBuildOperationLoggerFactory implements BuildOperationLoggerFactory { private static final int MAX_FAILURES = <int> ; private final Logger logger ; DefaultBuildOperationLoggerFactory ( Logger logger ) { this . logger = logger ; } public DefaultBuildOperationLoggerFactory ( ) { this ( Logging . getLogger ( DefaultBuildOperationLoggerFactory . class ) ) ; } @Override public BuildOperationLogger newOperationLogger ( String taskName , File outputDir ) { final File outputFile = createOutputFile ( outputDir ) ; final PrintWriter logWriter = createWriter ( outputFile ) ; final BuildOperationLogInfo configuration = createLogInfo ( taskName , outputFile , MAX_FAILURES ) ; return new DefaultBuildOperationLogger ( configuration , logger , logWriter ) ; } protected File createOutputFile ( File outputDir ) { GFileUtils . mkdirs ( outputDir ) ; return new File ( outputDir , <str> ) ; } protected PrintWriter createWriter ( File outputFile ) { PrintWriter logWriter = null ; try { logWriter = new PrintWriter ( new FileWriter ( outputFile ) , true ) ; } catch ( IOException e ) { UncheckedException . throwAsUncheckedException ( e ) ; } return logWriter ; } protected BuildOperationLogInfo createLogInfo ( String taskName , File outputFile , int maximumFailures ) { final BuildOperationLogInfo configuration ; if ( logger . isDebugEnabled ( ) ) { configuration = new BuildOperationLogInfo ( taskName , outputFile , Integer . MAX_VALUE ) ; } else { configuration = new BuildOperationLogInfo ( taskName , outputFile , maximumFailures ) ; } return configuration ; } } 

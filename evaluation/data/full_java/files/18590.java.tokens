package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input ; import com . badlogic . gdx . InputAdapter ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Environment ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . graphics . g3d . utils . ModelBuilder ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Scaling ; import com . badlogic . gdx . utils . viewport . ExtendViewport ; import com . badlogic . gdx . utils . viewport . ScalingViewport ; import com . badlogic . gdx . utils . viewport . ScreenViewport ; import com . badlogic . gdx . utils . viewport . Viewport ; public class ViewportTest3 extends GdxTest { Array < Viewport > viewports ; Viewport viewport ; Array < String > names ; String name ; private PerspectiveCamera camera ; public Environment environment ; public DirectionalLight shadowLight ; public ModelBuilder modelBuilder ; public ModelBatch modelBatch ; public ModelInstance boxInstance ; public void create ( ) { modelBatch = new ModelBatch ( ) ; modelBuilder = new ModelBuilder ( ) ; environment = new Environment ( ) ; environment . set ( new ColorAttribute ( ColorAttribute . AmbientLight , <float> , <float> , <float> , <float> ) ) ; shadowLight = new DirectionalLight ( ) ; shadowLight . set ( <float> , <float> , <float> , - <float> , - <float> , <float> ) ; environment . add ( shadowLight ) ; modelBatch = new ModelBatch ( ) ; camera = new PerspectiveCamera ( ) ; camera . fieldOfView = <int> ; camera . near = <float> ; camera . far = <int> f ; camera . position . set ( <int> , <int> , <int> ) ; camera . lookAt ( <int> , <int> , <int> ) ; viewports = ViewportTest1 . getViewports ( camera ) ; viewport = viewports . first ( ) ; names = ViewportTest1 . getViewportNames ( ) ; name = names . first ( ) ; ModelBuilder modelBuilder = new ModelBuilder ( ) ; Model boxModel = modelBuilder . createBox ( <int> f , <int> f , <int> f , new Material ( ColorAttribute . createDiffuse ( Color . GREEN ) ) , Usage . Position | Usage . Normal ) ; boxInstance = new ModelInstance ( boxModel ) ; boxInstance . transform . rotate ( <int> , <int> , <int> , <int> ) ; boxInstance . transform . rotate ( <int> , <int> , <int> , <int> ) ; Gdx . input . setInputProcessor ( new InputAdapter ( ) { public boolean keyDown ( int keycode ) { if ( keycode = = Input . Keys . SPACE ) { int index = ( viewports . indexOf ( viewport , true ) + <int> ) % viewports . size ; name = names . get ( index ) ; viewport = viewports . get ( index ) ; resize ( Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; } return false ; } } ) ; } public void render ( ) { Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; modelBatch . begin ( camera ) ; modelBatch . render ( boxInstance , environment ) ; modelBatch . end ( ) ; } public void resize ( int width , int height ) { System . out . println ( name ) ; viewport . update ( width , height ) ; } } 

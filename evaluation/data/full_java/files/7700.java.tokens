package org . joda . time . format ; import org . joda . time . DateTimeFieldType ; import java . util . Collection ; import java . util . HashSet ; import java . util . Set ; public class StrictISODateTimeFormat { protected StrictISODateTimeFormat ( ) { super ( ) ; } public static DateTimeFormatter forFields ( Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { if ( fields = = null | | fields . size ( ) = = <int> ) { throw new IllegalArgumentException ( <str> ) ; } Set < DateTimeFieldType > workingFields = new HashSet < DateTimeFieldType > ( fields ) ; int inputSize = workingFields . size ( ) ; boolean reducedPrec = false ; DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder ( ) ; if ( workingFields . contains ( DateTimeFieldType . monthOfYear ( ) ) ) { reducedPrec = dateByMonth ( bld , workingFields , extended , strictISO ) ; } else if ( workingFields . contains ( DateTimeFieldType . dayOfYear ( ) ) ) { reducedPrec = dateByOrdinal ( bld , workingFields , extended , strictISO ) ; } else if ( workingFields . contains ( DateTimeFieldType . weekOfWeekyear ( ) ) ) { reducedPrec = dateByWeek ( bld , workingFields , extended , strictISO ) ; } else if ( workingFields . contains ( DateTimeFieldType . dayOfMonth ( ) ) ) { reducedPrec = dateByMonth ( bld , workingFields , extended , strictISO ) ; } else if ( workingFields . contains ( DateTimeFieldType . dayOfWeek ( ) ) ) { reducedPrec = dateByWeek ( bld , workingFields , extended , strictISO ) ; } else if ( workingFields . remove ( DateTimeFieldType . year ( ) ) ) { bld . append ( Constants . ye ) ; reducedPrec = true ; } else if ( workingFields . remove ( DateTimeFieldType . weekyear ( ) ) ) { bld . append ( Constants . we ) ; reducedPrec = true ; } boolean datePresent = ( workingFields . size ( ) < inputSize ) ; time ( bld , workingFields , extended , strictISO , reducedPrec , datePresent ) ; if ( bld . canBuildFormatter ( ) = = false ) { throw new IllegalArgumentException ( <str> + fields ) ; } try { fields . retainAll ( workingFields ) ; } catch ( UnsupportedOperationException ex ) { } return bld . toFormatter ( ) ; } private static boolean dateByMonth ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { boolean reducedPrec = false ; if ( fields . remove ( DateTimeFieldType . year ( ) ) ) { bld . append ( Constants . ye ) ; if ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendMonthOfYear ( <int> ) ; appendSeparator ( bld , extended ) ; bld . appendDayOfMonth ( <int> ) ; } else { bld . appendLiteral ( <str> ) ; bld . appendMonthOfYear ( <int> ) ; reducedPrec = true ; } } else { if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { checkNotStrictISO ( fields , strictISO ) ; bld . appendLiteral ( <str> ) ; bld . appendLiteral ( <str> ) ; bld . appendDayOfMonth ( <int> ) ; } else { reducedPrec = true ; } } } else if ( fields . remove ( DateTimeFieldType . monthOfYear ( ) ) ) { bld . appendLiteral ( <str> ) ; bld . appendLiteral ( <str> ) ; bld . appendMonthOfYear ( <int> ) ; if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendDayOfMonth ( <int> ) ; } else { reducedPrec = true ; } } else if ( fields . remove ( DateTimeFieldType . dayOfMonth ( ) ) ) { bld . appendLiteral ( <str> ) ; bld . appendLiteral ( <str> ) ; bld . appendLiteral ( <str> ) ; bld . appendDayOfMonth ( <int> ) ; } return reducedPrec ; } private static boolean dateByOrdinal ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { boolean reducedPrec = false ; if ( fields . remove ( DateTimeFieldType . year ( ) ) ) { bld . append ( Constants . ye ) ; if ( fields . remove ( DateTimeFieldType . dayOfYear ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendDayOfYear ( <int> ) ; } else { reducedPrec = true ; } } else if ( fields . remove ( DateTimeFieldType . dayOfYear ( ) ) ) { bld . appendLiteral ( <str> ) ; bld . appendDayOfYear ( <int> ) ; } return reducedPrec ; } private static boolean dateByWeek ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO ) { boolean reducedPrec = false ; if ( fields . remove ( DateTimeFieldType . weekyear ( ) ) ) { bld . append ( Constants . we ) ; if ( fields . remove ( DateTimeFieldType . weekOfWeekyear ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendLiteral ( <str> ) ; bld . appendWeekOfWeekyear ( <int> ) ; if ( fields . remove ( DateTimeFieldType . dayOfWeek ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendDayOfWeek ( <int> ) ; } else { reducedPrec = true ; } } else { if ( fields . remove ( DateTimeFieldType . dayOfWeek ( ) ) ) { checkNotStrictISO ( fields , strictISO ) ; appendSeparator ( bld , extended ) ; bld . appendLiteral ( <str> ) ; bld . appendLiteral ( <str> ) ; bld . appendDayOfWeek ( <int> ) ; } else { reducedPrec = true ; } } } else if ( fields . remove ( DateTimeFieldType . weekOfWeekyear ( ) ) ) { bld . appendLiteral ( <str> ) ; bld . appendLiteral ( <str> ) ; bld . appendWeekOfWeekyear ( <int> ) ; if ( fields . remove ( DateTimeFieldType . dayOfWeek ( ) ) ) { appendSeparator ( bld , extended ) ; bld . appendDayOfWeek ( <int> ) ; } else { reducedPrec = true ; } } else if ( fields . remove ( DateTimeFieldType . dayOfWeek ( ) ) ) { bld . appendLiteral ( <str> ) ; bld . appendLiteral ( <str> ) ; bld . appendLiteral ( <str> ) ; bld . appendDayOfWeek ( <int> ) ; } return reducedPrec ; } private static void time ( DateTimeFormatterBuilder bld , Collection < DateTimeFieldType > fields , boolean extended , boolean strictISO , boolean reducedPrec , boolean datePresent ) { boolean hour = fields . remove ( DateTimeFieldType . hourOfDay ( ) ) ; boolean minute = fields . remove ( DateTimeFieldType . minuteOfHour ( ) ) ; boolean second = fields . remove ( DateTimeFieldType . secondOfMinute ( ) ) ; boolean milli = fields . remove ( DateTimeFieldType . millisOfSecond ( ) ) ; if ( ! hour & & ! minute & & ! second & & ! milli ) { return ; } if ( hour | | minute | | second | | milli ) { if ( strictISO & & reducedPrec ) { throw new IllegalArgumentException ( <str> + fields ) ; } if ( datePresent ) { bld . appendLiteral ( <str> ) ; } } if ( hour & & minute & & second | | ( hour & & ! second & & ! milli ) ) { } else { if ( strictISO & & datePresent ) { throw new IllegalArgumentException ( <str> + fields ) ; } if ( ! hour & & ( minute & & second | | ( minute & & ! milli ) | | second ) ) { } else { if ( strictISO ) { throw new IllegalArgumentException ( <str> + fields ) ; } } } if ( hour ) { bld . appendHourOfDay ( <int> ) ; } else if ( minute | | second | | milli ) { bld . appendLiteral ( <str> ) ; } if ( extended & & hour & & minute ) { bld . appendLiteral ( <str> ) ; } if ( minute ) { bld . appendMinuteOfHour ( <int> ) ; } else if ( second | | milli ) { bld . appendLiteral ( <str> ) ; } if ( extended & & minute & & second ) { bld . appendLiteral ( <str> ) ; } if ( second ) { bld . appendSecondOfMinute ( <int> ) ; } else if ( milli ) { bld . appendLiteral ( <str> ) ; } if ( milli ) { bld . appendLiteral ( <str> ) ; bld . appendMillisOfSecond ( <int> ) ; } } private static void checkNotStrictISO ( Collection < DateTimeFieldType > fields , boolean strictISO ) { if ( strictISO ) { throw new IllegalArgumentException ( <str> + fields ) ; } } private static void appendSeparator ( DateTimeFormatterBuilder bld , boolean extended ) { if ( extended ) { bld . appendLiteral ( <str> ) ; } } public static DateTimeFormatter dateParser ( ) { return Constants . dp ; } public static DateTimeFormatter localDateParser ( ) { return Constants . ldp ; } public static DateTimeFormatter dateElementParser ( ) { return Constants . dpe ; } public static DateTimeFormatter timeParser ( ) { return Constants . tp ; } public static DateTimeFormatter localTimeParser ( ) { return Constants . ltp ; } public static DateTimeFormatter timeElementParser ( ) { return Constants . tpe ; } public static DateTimeFormatter dateTimeParser ( ) { return Constants . dtp ; } public static DateTimeFormatter dateOptionalTimeParser ( ) { return Constants . dotp ; } public static DateTimeFormatter localDateOptionalTimeParser ( ) { return Constants . ldotp ; } public static DateTimeFormatter date ( ) { return yearMonthDay ( ) ; } public static DateTimeFormatter time ( ) { return Constants . t ; } public static DateTimeFormatter timeNoMillis ( ) { return Constants . tx ; } public static DateTimeFormatter tTime ( ) { return Constants . tt ; } public static DateTimeFormatter tTimeNoMillis ( ) { return Constants . ttx ; } public static DateTimeFormatter dateTime ( ) { return Constants . dt ; } public static DateTimeFormatter dateTimeNoMillis ( ) { return Constants . dtx ; } public static DateTimeFormatter ordinalDate ( ) { return Constants . od ; } public static DateTimeFormatter ordinalDateTime ( ) { return Constants . odt ; } public static DateTimeFormatter ordinalDateTimeNoMillis ( ) { return Constants . odtx ; } public static DateTimeFormatter weekDate ( ) { return Constants . wwd ; } public static DateTimeFormatter weekDateTime ( ) { return Constants . wdt ; } public static DateTimeFormatter weekDateTimeNoMillis ( ) { return Constants . wdtx ; } public static DateTimeFormatter basicDate ( ) { return Constants . bd ; } public static DateTimeFormatter basicTime ( ) { return Constants . bt ; } public static DateTimeFormatter basicTimeNoMillis ( ) { return Constants . btx ; } public static DateTimeFormatter basicTTime ( ) { return Constants . btt ; } public static DateTimeFormatter basicTTimeNoMillis ( ) { return Constants . bttx ; } public static DateTimeFormatter basicDateTime ( ) { return Constants . bdt ; } public static DateTimeFormatter basicDateTimeNoMillis ( ) { return Constants . bdtx ; } public static DateTimeFormatter basicOrdinalDate ( ) { return Constants . bod ; } public static DateTimeFormatter basicOrdinalDateTime ( ) { return Constants . bodt ; } public static DateTimeFormatter basicOrdinalDateTimeNoMillis ( ) { return Constants . bodtx ; } public static DateTimeFormatter basicWeekDate ( ) { return Constants . bwd ; } public static DateTimeFormatter basicWeekDateTime ( ) { return Constants . bwdt ; } public static DateTimeFormatter basicWeekDateTimeNoMillis ( ) { return Constants . bwdtx ; } public static DateTimeFormatter year ( ) { return Constants . ye ; } public static DateTimeFormatter yearMonth ( ) { return Constants . ym ; } public static DateTimeFormatter yearMonthDay ( ) { return Constants . ymd ; } public static DateTimeFormatter weekyear ( ) { return Constants . we ; } public static DateTimeFormatter weekyearWeek ( ) { return Constants . ww ; } public static DateTimeFormatter weekyearWeekDay ( ) { return Constants . wwd ; } public static DateTimeFormatter hour ( ) { return Constants . hde ; } public static DateTimeFormatter hourMinute ( ) { return Constants . hm ; } public static DateTimeFormatter hourMinuteSecond ( ) { return Constants . hms ; } public static DateTimeFormatter hourMinuteSecondMillis ( ) { return Constants . hmsl ; } public static DateTimeFormatter hourMinuteSecondFraction ( ) { return Constants . hmsf ; } public static DateTimeFormatter dateHour ( ) { return Constants . dh ; } public static DateTimeFormatter dateHourMinute ( ) { return Constants . dhm ; } public static DateTimeFormatter dateHourMinuteSecond ( ) { return Constants . dhms ; } public static DateTimeFormatter dateHourMinuteSecondMillis ( ) { return Constants . dhmsl ; } public static DateTimeFormatter dateHourMinuteSecondFraction ( ) { return Constants . dhmsf ; } static final class Constants { private static final DateTimeFormatter ye = yearElement ( ) , mye = monthElement ( ) , dme = dayOfMonthElement ( ) , we = weekyearElement ( ) , wwe = weekElement ( ) , dwe = dayOfWeekElement ( ) , dye = dayOfYearElement ( ) , hde = hourElement ( ) , mhe = minuteElement ( ) , sme = secondElement ( ) , fse = fractionElement ( ) , ze = offsetElement ( ) , lte = literalTElement ( ) , ym = yearMonth ( ) , ymd = yearMonthDay ( ) , ww = weekyearWeek ( ) , wwd = weekyearWeekDay ( ) , hm = hourMinute ( ) , hms = hourMinuteSecond ( ) , hmsl = hourMinuteSecondMillis ( ) , hmsf = hourMinuteSecondFraction ( ) , dh = dateHour ( ) , dhm = dateHourMinute ( ) , dhms = dateHourMinuteSecond ( ) , dhmsl = dateHourMinuteSecondMillis ( ) , dhmsf = dateHourMinuteSecondFraction ( ) , t = time ( ) , tx = timeNoMillis ( ) , tt = tTime ( ) , ttx = tTimeNoMillis ( ) , dt = dateTime ( ) , dtx = dateTimeNoMillis ( ) , wdt = weekDateTime ( ) , wdtx = weekDateTimeNoMillis ( ) , od = ordinalDate ( ) , odt = ordinalDateTime ( ) , odtx = ordinalDateTimeNoMillis ( ) , bd = basicDate ( ) , bt = basicTime ( ) , btx = basicTimeNoMillis ( ) , btt = basicTTime ( ) , bttx = basicTTimeNoMillis ( ) , bdt = basicDateTime ( ) , bdtx = basicDateTimeNoMillis ( ) , bod = basicOrdinalDate ( ) , bodt = basicOrdinalDateTime ( ) , bodtx = basicOrdinalDateTimeNoMillis ( ) , bwd = basicWeekDate ( ) , bwdt = basicWeekDateTime ( ) , bwdtx = basicWeekDateTimeNoMillis ( ) , dpe = dateElementParser ( ) , tpe = timeElementParser ( ) , dp = dateParser ( ) , ldp = localDateParser ( ) , tp = timeParser ( ) , ltp = localTimeParser ( ) , dtp = dateTimeParser ( ) , dotp = dateOptionalTimeParser ( ) , ldotp = localDateOptionalTimeParser ( ) ; private static DateTimeFormatter dateParser ( ) { if ( dp = = null ) { DateTimeParser tOffset = new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . append ( offsetElement ( ) ) . toParser ( ) ; return new DateTimeFormatterBuilder ( ) . append ( dateElementParser ( ) ) . appendOptional ( tOffset ) . toFormatter ( ) ; } return dp ; } private static DateTimeFormatter localDateParser ( ) { if ( ldp = = null ) { return dateElementParser ( ) . withZoneUTC ( ) ; } return ldp ; } private static DateTimeFormatter dateElementParser ( ) { if ( dpe = = null ) { return new DateTimeFormatterBuilder ( ) . append ( null , new DateTimeParser [ ] { new DateTimeFormatterBuilder ( ) . append ( yearElement ( ) ) . appendOptional ( new DateTimeFormatterBuilder ( ) . append ( monthElement ( ) ) . appendOptional ( dayOfMonthElement ( ) . getParser ( ) ) . toParser ( ) ) . toParser ( ) , new DateTimeFormatterBuilder ( ) . append ( weekyearElement ( ) ) . append ( weekElement ( ) ) . appendOptional ( dayOfWeekElement ( ) . getParser ( ) ) . toParser ( ) , new DateTimeFormatterBuilder ( ) . append ( yearElement ( ) ) . append ( dayOfYearElement ( ) ) . toParser ( ) } ) . toFormatter ( ) ; } return dpe ; } private static DateTimeFormatter timeParser ( ) { if ( tp = = null ) { return new DateTimeFormatterBuilder ( ) . appendOptional ( literalTElement ( ) . getParser ( ) ) . append ( timeElementParser ( ) ) . appendOptional ( offsetElement ( ) . getParser ( ) ) . toFormatter ( ) ; } return tp ; } private static DateTimeFormatter localTimeParser ( ) { if ( ltp = = null ) { return new DateTimeFormatterBuilder ( ) . appendOptional ( literalTElement ( ) . getParser ( ) ) . append ( timeElementParser ( ) ) . toFormatter ( ) . withZoneUTC ( ) ; } return ltp ; } private static DateTimeFormatter timeElementParser ( ) { if ( tpe = = null ) { DateTimeParser decimalPoint = new DateTimeFormatterBuilder ( ) . append ( null , new DateTimeParser [ ] { new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . toParser ( ) , new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . toParser ( ) } ) . toParser ( ) ; return new DateTimeFormatterBuilder ( ) . append ( hourElement ( ) ) . append ( null , new DateTimeParser [ ] { new DateTimeFormatterBuilder ( ) . append ( minuteElement ( ) ) . append ( null , new DateTimeParser [ ] { new DateTimeFormatterBuilder ( ) . append ( secondElement ( ) ) . appendOptional ( new DateTimeFormatterBuilder ( ) . append ( decimalPoint ) . appendFractionOfSecond ( <int> , <int> ) . toParser ( ) ) . toParser ( ) , new DateTimeFormatterBuilder ( ) . append ( decimalPoint ) . appendFractionOfMinute ( <int> , <int> ) . toParser ( ) , null } ) . toParser ( ) , new DateTimeFormatterBuilder ( ) . append ( decimalPoint ) . appendFractionOfHour ( <int> , <int> ) . toParser ( ) , null } ) . toFormatter ( ) ; } return tpe ; } private static DateTimeFormatter dateTimeParser ( ) { if ( dtp = = null ) { DateTimeParser time = new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . append ( timeElementParser ( ) ) . appendOptional ( offsetElement ( ) . getParser ( ) ) . toParser ( ) ; return new DateTimeFormatterBuilder ( ) . append ( null , new DateTimeParser [ ] { time , dateOptionalTimeParser ( ) . getParser ( ) } ) . toFormatter ( ) ; } return dtp ; } private static DateTimeFormatter dateOptionalTimeParser ( ) { if ( dotp = = null ) { DateTimeParser timeOrOffset = new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . appendOptional ( timeElementParser ( ) . getParser ( ) ) . appendOptional ( offsetElement ( ) . getParser ( ) ) . toParser ( ) ; return new DateTimeFormatterBuilder ( ) . append ( dateElementParser ( ) ) . appendOptional ( timeOrOffset ) . toFormatter ( ) ; } return dotp ; } private static DateTimeFormatter localDateOptionalTimeParser ( ) { if ( ldotp = = null ) { DateTimeParser time = new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . append ( timeElementParser ( ) ) . toParser ( ) ; return new DateTimeFormatterBuilder ( ) . append ( dateElementParser ( ) ) . appendOptional ( time ) . toFormatter ( ) . withZoneUTC ( ) ; } return ldotp ; } private static DateTimeFormatter time ( ) { if ( t = = null ) { return new DateTimeFormatterBuilder ( ) . append ( hourMinuteSecondFraction ( ) ) . append ( offsetElement ( ) ) . toFormatter ( ) ; } return t ; } private static DateTimeFormatter timeNoMillis ( ) { if ( tx = = null ) { return new DateTimeFormatterBuilder ( ) . append ( hourMinuteSecond ( ) ) . append ( offsetElement ( ) ) . toFormatter ( ) ; } return tx ; } private static DateTimeFormatter tTime ( ) { if ( tt = = null ) { return new DateTimeFormatterBuilder ( ) . append ( literalTElement ( ) ) . append ( time ( ) ) . toFormatter ( ) ; } return tt ; } private static DateTimeFormatter tTimeNoMillis ( ) { if ( ttx = = null ) { return new DateTimeFormatterBuilder ( ) . append ( literalTElement ( ) ) . append ( timeNoMillis ( ) ) . toFormatter ( ) ; } return ttx ; } private static DateTimeFormatter dateTime ( ) { if ( dt = = null ) { return new DateTimeFormatterBuilder ( ) . append ( date ( ) ) . append ( tTime ( ) ) . toFormatter ( ) ; } return dt ; } private static DateTimeFormatter dateTimeNoMillis ( ) { if ( dtx = = null ) { return new DateTimeFormatterBuilder ( ) . append ( date ( ) ) . append ( tTimeNoMillis ( ) ) . toFormatter ( ) ; } return dtx ; } private static DateTimeFormatter ordinalDate ( ) { if ( od = = null ) { return new DateTimeFormatterBuilder ( ) . append ( yearElement ( ) ) . append ( dayOfYearElement ( ) ) . toFormatter ( ) ; } return od ; } private static DateTimeFormatter ordinalDateTime ( ) { if ( odt = = null ) { return new DateTimeFormatterBuilder ( ) . append ( ordinalDate ( ) ) . append ( tTime ( ) ) . toFormatter ( ) ; } return odt ; } private static DateTimeFormatter ordinalDateTimeNoMillis ( ) { if ( odtx = = null ) { return new DateTimeFormatterBuilder ( ) . append ( ordinalDate ( ) ) . append ( tTimeNoMillis ( ) ) . toFormatter ( ) ; } return odtx ; } private static DateTimeFormatter weekDateTime ( ) { if ( wdt = = null ) { return new DateTimeFormatterBuilder ( ) . append ( weekDate ( ) ) . append ( tTime ( ) ) . toFormatter ( ) ; } return wdt ; } private static DateTimeFormatter weekDateTimeNoMillis ( ) { if ( wdtx = = null ) { return new DateTimeFormatterBuilder ( ) . append ( weekDate ( ) ) . append ( tTimeNoMillis ( ) ) . toFormatter ( ) ; } return wdtx ; } private static DateTimeFormatter basicDate ( ) { if ( bd = = null ) { return new DateTimeFormatterBuilder ( ) . appendYear ( <int> , <int> ) . appendFixedDecimal ( DateTimeFieldType . monthOfYear ( ) , <int> ) . appendFixedDecimal ( DateTimeFieldType . dayOfMonth ( ) , <int> ) . toFormatter ( ) ; } return bd ; } private static DateTimeFormatter basicTime ( ) { if ( bt = = null ) { return new DateTimeFormatterBuilder ( ) . appendFixedDecimal ( DateTimeFieldType . hourOfDay ( ) , <int> ) . appendFixedDecimal ( DateTimeFieldType . minuteOfHour ( ) , <int> ) . appendFixedDecimal ( DateTimeFieldType . secondOfMinute ( ) , <int> ) . appendLiteral ( <str> ) . appendFractionOfSecond ( <int> , <int> ) . appendTimeZoneOffset ( <str> , false , <int> , <int> ) . toFormatter ( ) ; } return bt ; } private static DateTimeFormatter basicTimeNoMillis ( ) { if ( btx = = null ) { return new DateTimeFormatterBuilder ( ) . appendFixedDecimal ( DateTimeFieldType . hourOfDay ( ) , <int> ) . appendFixedDecimal ( DateTimeFieldType . minuteOfHour ( ) , <int> ) . appendFixedDecimal ( DateTimeFieldType . secondOfMinute ( ) , <int> ) . appendTimeZoneOffset ( <str> , false , <int> , <int> ) . toFormatter ( ) ; } return btx ; } private static DateTimeFormatter basicTTime ( ) { if ( btt = = null ) { return new DateTimeFormatterBuilder ( ) . append ( literalTElement ( ) ) . append ( basicTime ( ) ) . toFormatter ( ) ; } return btt ; } private static DateTimeFormatter basicTTimeNoMillis ( ) { if ( bttx = = null ) { return new DateTimeFormatterBuilder ( ) . append ( literalTElement ( ) ) . append ( basicTimeNoMillis ( ) ) . toFormatter ( ) ; } return bttx ; } private static DateTimeFormatter basicDateTime ( ) { if ( bdt = = null ) { return new DateTimeFormatterBuilder ( ) . append ( basicDate ( ) ) . append ( basicTTime ( ) ) . toFormatter ( ) ; } return bdt ; } private static DateTimeFormatter basicDateTimeNoMillis ( ) { if ( bdtx = = null ) { return new DateTimeFormatterBuilder ( ) . append ( basicDate ( ) ) . append ( basicTTimeNoMillis ( ) ) . toFormatter ( ) ; } return bdtx ; } private static DateTimeFormatter basicOrdinalDate ( ) { if ( bod = = null ) { return new DateTimeFormatterBuilder ( ) . appendYear ( <int> , <int> ) . appendFixedDecimal ( DateTimeFieldType . dayOfYear ( ) , <int> ) . toFormatter ( ) ; } return bod ; } private static DateTimeFormatter basicOrdinalDateTime ( ) { if ( bodt = = null ) { return new DateTimeFormatterBuilder ( ) . append ( basicOrdinalDate ( ) ) . append ( basicTTime ( ) ) . toFormatter ( ) ; } return bodt ; } private static DateTimeFormatter basicOrdinalDateTimeNoMillis ( ) { if ( bodtx = = null ) { return new DateTimeFormatterBuilder ( ) . append ( basicOrdinalDate ( ) ) . append ( basicTTimeNoMillis ( ) ) . toFormatter ( ) ; } return bodtx ; } private static DateTimeFormatter basicWeekDate ( ) { if ( bwd = = null ) { return new DateTimeFormatterBuilder ( ) . appendFixedSignedDecimal ( DateTimeFieldType . weekyear ( ) , <int> ) . appendLiteral ( <str> ) . appendFixedDecimal ( DateTimeFieldType . weekOfWeekyear ( ) , <int> ) . appendFixedDecimal ( DateTimeFieldType . dayOfWeek ( ) , <int> ) . toFormatter ( ) ; } return bwd ; } private static DateTimeFormatter basicWeekDateTime ( ) { if ( bwdt = = null ) { return new DateTimeFormatterBuilder ( ) . append ( basicWeekDate ( ) ) . append ( basicTTime ( ) ) . toFormatter ( ) ; } return bwdt ; } private static DateTimeFormatter basicWeekDateTimeNoMillis ( ) { if ( bwdtx = = null ) { return new DateTimeFormatterBuilder ( ) . append ( basicWeekDate ( ) ) . append ( basicTTimeNoMillis ( ) ) . toFormatter ( ) ; } return bwdtx ; } private static DateTimeFormatter yearMonth ( ) { if ( ym = = null ) { return new DateTimeFormatterBuilder ( ) . append ( yearElement ( ) ) . append ( monthElement ( ) ) . toFormatter ( ) ; } return ym ; } private static DateTimeFormatter yearMonthDay ( ) { if ( ymd = = null ) { return new DateTimeFormatterBuilder ( ) . append ( yearElement ( ) ) . append ( monthElement ( ) ) . append ( dayOfMonthElement ( ) ) . toFormatter ( ) ; } return ymd ; } private static DateTimeFormatter weekyearWeek ( ) { if ( ww = = null ) { return new DateTimeFormatterBuilder ( ) . append ( weekyearElement ( ) ) . append ( weekElement ( ) ) . toFormatter ( ) ; } return ww ; } private static DateTimeFormatter weekyearWeekDay ( ) { if ( wwd = = null ) { return new DateTimeFormatterBuilder ( ) . append ( weekyearElement ( ) ) . append ( weekElement ( ) ) . append ( dayOfWeekElement ( ) ) . toFormatter ( ) ; } return wwd ; } private static DateTimeFormatter hourMinute ( ) { if ( hm = = null ) { return new DateTimeFormatterBuilder ( ) . append ( hourElement ( ) ) . append ( minuteElement ( ) ) . toFormatter ( ) ; } return hm ; } private static DateTimeFormatter hourMinuteSecond ( ) { if ( hms = = null ) { return new DateTimeFormatterBuilder ( ) . append ( hourElement ( ) ) . append ( minuteElement ( ) ) . append ( secondElement ( ) ) . toFormatter ( ) ; } return hms ; } private static DateTimeFormatter hourMinuteSecondMillis ( ) { if ( hmsl = = null ) { return new DateTimeFormatterBuilder ( ) . append ( hourElement ( ) ) . append ( minuteElement ( ) ) . append ( secondElement ( ) ) . appendLiteral ( <str> ) . appendFractionOfSecond ( <int> , <int> ) . toFormatter ( ) ; } return hmsl ; } private static DateTimeFormatter hourMinuteSecondFraction ( ) { if ( hmsf = = null ) { return new DateTimeFormatterBuilder ( ) . append ( hourElement ( ) ) . append ( minuteElement ( ) ) . append ( secondElement ( ) ) . append ( fractionElement ( ) ) . toFormatter ( ) ; } return hmsf ; } private static DateTimeFormatter dateHour ( ) { if ( dh = = null ) { return new DateTimeFormatterBuilder ( ) . append ( date ( ) ) . append ( literalTElement ( ) ) . append ( hour ( ) ) . toFormatter ( ) ; } return dh ; } private static DateTimeFormatter dateHourMinute ( ) { if ( dhm = = null ) { return new DateTimeFormatterBuilder ( ) . append ( date ( ) ) . append ( literalTElement ( ) ) . append ( hourMinute ( ) ) . toFormatter ( ) ; } return dhm ; } private static DateTimeFormatter dateHourMinuteSecond ( ) { if ( dhms = = null ) { return new DateTimeFormatterBuilder ( ) . append ( date ( ) ) . append ( literalTElement ( ) ) . append ( hourMinuteSecond ( ) ) . toFormatter ( ) ; } return dhms ; } private static DateTimeFormatter dateHourMinuteSecondMillis ( ) { if ( dhmsl = = null ) { return new DateTimeFormatterBuilder ( ) . append ( date ( ) ) . append ( literalTElement ( ) ) . append ( hourMinuteSecondMillis ( ) ) . toFormatter ( ) ; } return dhmsl ; } private static DateTimeFormatter dateHourMinuteSecondFraction ( ) { if ( dhmsf = = null ) { return new DateTimeFormatterBuilder ( ) . append ( date ( ) ) . append ( literalTElement ( ) ) . append ( hourMinuteSecondFraction ( ) ) . toFormatter ( ) ; } return dhmsf ; } private static DateTimeFormatter yearElement ( ) { if ( ye = = null ) { return new DateTimeFormatterBuilder ( ) . appendFixedSignedDecimal ( DateTimeFieldType . year ( ) , <int> ) . toFormatter ( ) ; } return ye ; } private static DateTimeFormatter monthElement ( ) { if ( mye = = null ) { return new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . appendFixedSignedDecimal ( DateTimeFieldType . monthOfYear ( ) , <int> ) . toFormatter ( ) ; } return mye ; } private static DateTimeFormatter dayOfMonthElement ( ) { if ( dme = = null ) { return new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . appendFixedSignedDecimal ( DateTimeFieldType . dayOfMonth ( ) , <int> ) . toFormatter ( ) ; } return dme ; } private static DateTimeFormatter weekyearElement ( ) { if ( we = = null ) { return new DateTimeFormatterBuilder ( ) . appendFixedSignedDecimal ( DateTimeFieldType . weekyear ( ) , <int> ) . toFormatter ( ) ; } return we ; } private static DateTimeFormatter weekElement ( ) { if ( wwe = = null ) { return new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . appendFixedSignedDecimal ( DateTimeFieldType . weekOfWeekyear ( ) , <int> ) . toFormatter ( ) ; } return wwe ; } private static DateTimeFormatter dayOfWeekElement ( ) { if ( dwe = = null ) { return new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . appendDayOfWeek ( <int> ) . toFormatter ( ) ; } return dwe ; } private static DateTimeFormatter dayOfYearElement ( ) { if ( dye = = null ) { return new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . appendFixedSignedDecimal ( DateTimeFieldType . dayOfYear ( ) , <int> ) . toFormatter ( ) ; } return dye ; } private static DateTimeFormatter literalTElement ( ) { if ( lte = = null ) { return new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . toFormatter ( ) ; } return lte ; } private static DateTimeFormatter hourElement ( ) { if ( hde = = null ) { return new DateTimeFormatterBuilder ( ) . appendFixedSignedDecimal ( DateTimeFieldType . hourOfDay ( ) , <int> ) . toFormatter ( ) ; } return hde ; } private static DateTimeFormatter minuteElement ( ) { if ( mhe = = null ) { return new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . appendFixedSignedDecimal ( DateTimeFieldType . minuteOfHour ( ) , <int> ) . toFormatter ( ) ; } return mhe ; } private static DateTimeFormatter secondElement ( ) { if ( sme = = null ) { return new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . appendFixedSignedDecimal ( DateTimeFieldType . secondOfMinute ( ) , <int> ) . toFormatter ( ) ; } return sme ; } private static DateTimeFormatter fractionElement ( ) { if ( fse = = null ) { return new DateTimeFormatterBuilder ( ) . appendLiteral ( <str> ) . appendFractionOfSecond ( <int> , <int> ) . toFormatter ( ) ; } return fse ; } private static DateTimeFormatter offsetElement ( ) { if ( ze = = null ) { return new DateTimeFormatterBuilder ( ) . appendTimeZoneOffset ( <str> , true , <int> , <int> ) . toFormatter ( ) ; } return ze ; } } } 

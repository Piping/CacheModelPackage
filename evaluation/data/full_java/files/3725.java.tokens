package org . eclipse . debug . internal . core . variables ; import java . io . File ; import java . net . URI ; import org . eclipse . core . filesystem . EFS ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . variables . IDynamicVariable ; import org . eclipse . core . variables . IDynamicVariableResolver ; import org . eclipse . core . variables . IStringVariableManager ; import org . eclipse . core . variables . VariablesPlugin ; import org . eclipse . debug . core . DebugPlugin ; import com . ibm . icu . text . MessageFormat ; public class ResourceResolver implements IDynamicVariableResolver { @Override public String resolveValue ( IDynamicVariable variable , String argument ) throws CoreException { IResource resource = null ; if ( argument = = null ) { resource = getSelectedResource ( variable ) ; } else { resource = getWorkspaceRoot ( ) . findMember ( new Path ( argument ) ) ; } if ( resource ! = null & & resource . exists ( ) ) { resource = translateSelectedResource ( resource ) ; if ( resource ! = null & & resource . exists ( ) ) { return translateToValue ( resource , variable ) ; } } abort ( MessageFormat . format ( Messages . ResourceResolver_0 , new Object [ ] { getReferenceExpression ( variable , argument ) } ) , null ) ; return null ; } protected IResource translateSelectedResource ( IResource resource ) { return resource ; } protected IWorkspaceRoot getWorkspaceRoot ( ) { return ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; } protected String getReferenceExpression ( IDynamicVariable variable , String argument ) { StringBuffer reference = new StringBuffer ( ) ; reference . append ( <str> ) ; reference . append ( variable . getName ( ) ) ; if ( argument ! = null ) { reference . append ( <str> ) ; reference . append ( argument ) ; } reference . append ( <str> ) ; return reference . toString ( ) ; } protected void abort ( String message , Throwable exception ) throws CoreException { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . INTERNAL_ERROR , message , exception ) ) ; } protected IResource getSelectedResource ( IDynamicVariable variable ) throws CoreException { IStringVariableManager manager = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) ; try { String pathString = manager . performStringSubstitution ( <str> ) ; return ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . findMember ( new Path ( pathString ) ) ; } catch ( CoreException e ) { } abort ( MessageFormat . format ( Messages . ResourceResolver_1 , new Object [ ] { getReferenceExpression ( variable , null ) } ) , null ) ; return null ; } protected String translateToValue ( IResource resource , IDynamicVariable variable ) throws CoreException { String name = variable . getName ( ) ; IPath path = null ; URI uri = null ; if ( name . endsWith ( <str> ) ) { uri = resource . getLocationURI ( ) ; if ( uri ! = null ) { File file = EFS . getStore ( uri ) . toLocalFile ( <int> , null ) ; if ( file ! = null ) { return file . getAbsolutePath ( ) ; } } } else if ( name . endsWith ( <str> ) ) { path = resource . getFullPath ( ) ; if ( path ! = null ) { return path . toOSString ( ) ; } } else if ( name . endsWith ( <str> ) ) { return resource . getName ( ) ; } abort ( MessageFormat . format ( Messages . ResourceResolver_2 , new Object [ ] { getReferenceExpression ( variable , null ) } ) , null ) ; return null ; } } 

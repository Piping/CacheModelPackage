package io . netty . util ; import io . netty . util . internal . ObjectUtil ; import java . util . HashMap ; import java . util . Map ; public abstract class ConstantPool < T extends Constant < T > > { private final Map < String , T > constants = new HashMap < String , T > ( ) ; private int nextId = <int> ; public T valueOf ( Class < ? > firstNameComponent , String secondNameComponent ) { if ( firstNameComponent = = null ) { throw new NullPointerException ( <str> ) ; } if ( secondNameComponent = = null ) { throw new NullPointerException ( <str> ) ; } return valueOf ( firstNameComponent . getName ( ) + <str> + secondNameComponent ) ; } public T valueOf ( String name ) { T c ; synchronized ( constants ) { if ( exists ( name ) ) { c = constants . get ( name ) ; } else { c = newInstance0 ( name ) ; } } return c ; } public boolean exists ( String name ) { checkNotNullAndNotEmpty ( name ) ; synchronized ( constants ) { return constants . containsKey ( name ) ; } } @SuppressWarnings ( <str> ) public T newInstance ( String name ) { if ( exists ( name ) ) { throw new IllegalArgumentException ( String . format ( <str> , name ) ) ; } T c = newInstance0 ( name ) ; return c ; } private T newInstance0 ( String name ) { synchronized ( constants ) { T c = newConstant ( nextId , name ) ; constants . put ( name , c ) ; nextId + + ; return c ; } } private String checkNotNullAndNotEmpty ( String name ) { ObjectUtil . checkNotNull ( name , <str> ) ; if ( name . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } return name ; } protected abstract T newConstant ( int id , String name ) ; @Deprecated public final int nextId ( ) { synchronized ( constants ) { int id = nextId ; nextId + + ; return id ; } } } 

package org . elasticsearch . plan . a ; import org . elasticsearch . common . settings . Settings ; public class IntegerOverflowDisabledTests extends ScriptTestCase { @Override protected Settings getSettings ( ) { Settings . Builder builder = Settings . builder ( ) ; builder . put ( super . getSettings ( ) ) ; builder . put ( PlanAScriptEngineService . NUMERIC_OVERFLOW , false ) ; return builder . build ( ) ; } public void testAssignmentAdditionOverflow ( ) { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testAssignmentSubtractionOverflow ( ) { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testAssignmentMultiplicationOverflow ( ) { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testAssignmentDivisionOverflow ( ) { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testIncrementOverFlow ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testAddition ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testAdditionConst ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testSubtraction ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testSubtractionConst ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testMultiplication ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testMultiplicationConst ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testDivision ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testDivisionConst ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testNegationOverflow ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } public void testNegationOverflowConst ( ) throws Exception { try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } try { exec ( <str> ) ; fail ( <str> ) ; } catch ( ArithmeticException expected ) { } } } 

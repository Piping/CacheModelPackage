package org . elasticsearch . cluster . settings ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class SettingsValidatorTests extends ESTestCase { public void testValidators ( ) throws Exception { assertThat ( Validator . EMPTY . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . TIME . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . TIME . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . TIME . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . FLOAT . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . FLOAT . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_FLOAT . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_FLOAT . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_FLOAT . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_FLOAT . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . DOUBLE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . DOUBLE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . DOUBLE_GTE_2 . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . DOUBLE_GTE_2 . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . DOUBLE_GTE_2 . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . DOUBLE_GTE_2 . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_DOUBLE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_DOUBLE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_DOUBLE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_DOUBLE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . INTEGER . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . INTEGER . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . INTEGER_GTE_2 . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . INTEGER_GTE_2 . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . INTEGER_GTE_2 . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . INTEGER_GTE_2 . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_INTEGER . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_INTEGER . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_INTEGER . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_INTEGER . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . NON_NEGATIVE_INTEGER . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . POSITIVE_INTEGER . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . POSITIVE_INTEGER . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . POSITIVE_INTEGER . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . POSITIVE_INTEGER . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . POSITIVE_INTEGER . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . PERCENTAGE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . PERCENTAGE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . PERCENTAGE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . PERCENTAGE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . PERCENTAGE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . PERCENTAGE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . PERCENTAGE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . PERCENTAGE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE_OR_PERCENTAGE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE_OR_PERCENTAGE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE_OR_PERCENTAGE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE_OR_PERCENTAGE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE_OR_PERCENTAGE . validate ( <str> , <str> , null ) , notNullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE_OR_PERCENTAGE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE_OR_PERCENTAGE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; assertThat ( Validator . BYTES_SIZE_OR_PERCENTAGE . validate ( <str> , <str> , null ) , nullValue ( ) ) ; } public void testDynamicValidators ( ) throws Exception { DynamicSettings . Builder ds = new DynamicSettings . Builder ( ) ; ds . addSetting ( <str> , Validator . POSITIVE_INTEGER ) ; String valid = ds . build ( ) . validateDynamicSetting ( <str> , <str> , null ) ; assertThat ( valid , equalTo ( <str> ) ) ; } } 

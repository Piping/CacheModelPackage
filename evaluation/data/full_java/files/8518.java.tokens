package org . elasticsearch . search . internal ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . InputStreamStreamInput ; import org . elasticsearch . common . text . StringText ; import org . elasticsearch . search . SearchShardTarget ; import org . elasticsearch . test . ESTestCase ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . util . HashMap ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class InternalSearchHitTests extends ESTestCase { public void testSerializeShardTarget ( ) throws Exception { SearchShardTarget target = new SearchShardTarget ( <str> , <str> , <int> ) ; Map < String , InternalSearchHits > innerHits = new HashMap < > ( ) ; InternalSearchHit innerHit1 = new InternalSearchHit ( <int> , <str> , new StringText ( <str> ) , null ) ; innerHit1 . shardTarget ( target ) ; InternalSearchHit innerInnerHit2 = new InternalSearchHit ( <int> , <str> , new StringText ( <str> ) , null ) ; innerInnerHit2 . shardTarget ( target ) ; innerHits . put ( <str> , new InternalSearchHits ( new InternalSearchHit [ ] { innerInnerHit2 } , <int> , <float> ) ) ; innerHit1 . setInnerHits ( innerHits ) ; InternalSearchHit innerHit2 = new InternalSearchHit ( <int> , <str> , new StringText ( <str> ) , null ) ; innerHit2 . shardTarget ( target ) ; InternalSearchHit innerHit3 = new InternalSearchHit ( <int> , <str> , new StringText ( <str> ) , null ) ; innerHit3 . shardTarget ( target ) ; innerHits = new HashMap < > ( ) ; InternalSearchHit hit1 = new InternalSearchHit ( <int> , <str> , new StringText ( <str> ) , null ) ; innerHits . put ( <str> , new InternalSearchHits ( new InternalSearchHit [ ] { innerHit1 , innerHit2 } , <int> , <float> ) ) ; innerHits . put ( <str> , new InternalSearchHits ( new InternalSearchHit [ ] { innerHit3 } , <int> , <float> ) ) ; hit1 . shardTarget ( target ) ; hit1 . setInnerHits ( innerHits ) ; InternalSearchHit hit2 = new InternalSearchHit ( <int> , <str> , new StringText ( <str> ) , null ) ; hit2 . shardTarget ( target ) ; InternalSearchHits hits = new InternalSearchHits ( new InternalSearchHit [ ] { hit1 , hit2 } , <int> , <float> ) ; InternalSearchHits . StreamContext context = new InternalSearchHits . StreamContext ( ) ; context . streamShardTarget ( InternalSearchHits . StreamContext . ShardTargetType . STREAM ) ; BytesStreamOutput output = new BytesStreamOutput ( ) ; hits . writeTo ( output , context ) ; InputStream input = new ByteArrayInputStream ( output . bytes ( ) . toBytes ( ) ) ; context = new InternalSearchHits . StreamContext ( ) ; context . streamShardTarget ( InternalSearchHits . StreamContext . ShardTargetType . STREAM ) ; InternalSearchHits results = InternalSearchHits . readSearchHits ( new InputStreamStreamInput ( input ) , context ) ; assertThat ( results . getAt ( <int> ) . shard ( ) , equalTo ( target ) ) ; assertThat ( results . getAt ( <int> ) . getInnerHits ( ) . get ( <str> ) . getAt ( <int> ) . shard ( ) , nullValue ( ) ) ; assertThat ( results . getAt ( <int> ) . getInnerHits ( ) . get ( <str> ) . getAt ( <int> ) . getInnerHits ( ) . get ( <str> ) . getAt ( <int> ) . shard ( ) , nullValue ( ) ) ; assertThat ( results . getAt ( <int> ) . getInnerHits ( ) . get ( <str> ) . getAt ( <int> ) . shard ( ) , nullValue ( ) ) ; assertThat ( results . getAt ( <int> ) . getInnerHits ( ) . get ( <str> ) . getAt ( <int> ) . shard ( ) , nullValue ( ) ) ; assertThat ( results . getAt ( <int> ) . shard ( ) , equalTo ( target ) ) ; } } 

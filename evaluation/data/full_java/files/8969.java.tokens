package org . elasticsearch . test ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . inject . Module ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexModule ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . shard . IndexEventListener ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . index . shard . IndexShardState ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . plugins . Plugin ; import java . util . Collection ; import java . util . Collections ; public final class MockIndexEventListener { public static class TestPlugin extends Plugin { private final TestEventListener listener = new TestEventListener ( ) ; @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } @Override public void onIndexModule ( IndexModule module ) { module . addIndexEventListener ( listener ) ; } @Override public Collection < Module > nodeModules ( ) { return Collections . singleton ( binder - > binder . bind ( TestEventListener . class ) . toInstance ( listener ) ) ; } } public static class TestEventListener implements IndexEventListener { private volatile IndexEventListener delegate = new IndexEventListener ( ) { } ; public void setNewDelegate ( IndexEventListener listener ) { delegate = listener = = null ? new IndexEventListener ( ) { } : listener ; } @Override public void shardRoutingChanged ( IndexShard indexShard , @Nullable ShardRouting oldRouting , ShardRouting newRouting ) { delegate . shardRoutingChanged ( indexShard , oldRouting , newRouting ) ; } @Override public void afterIndexShardCreated ( IndexShard indexShard ) { delegate . afterIndexShardCreated ( indexShard ) ; } @Override public void afterIndexShardStarted ( IndexShard indexShard ) { delegate . afterIndexShardStarted ( indexShard ) ; } @Override public void beforeIndexShardClosed ( ShardId shardId , @Nullable IndexShard indexShard , Settings indexSettings ) { delegate . beforeIndexShardClosed ( shardId , indexShard , indexSettings ) ; } @Override public void afterIndexShardClosed ( ShardId shardId , @Nullable IndexShard indexShard , Settings indexSettings ) { delegate . afterIndexShardClosed ( shardId , indexShard , indexSettings ) ; } @Override public void indexShardStateChanged ( IndexShard indexShard , @Nullable IndexShardState previousState , IndexShardState currentState , @Nullable String reason ) { delegate . indexShardStateChanged ( indexShard , previousState , currentState , reason ) ; } @Override public void onShardInactive ( IndexShard indexShard ) { delegate . onShardInactive ( indexShard ) ; } @Override public void beforeIndexCreated ( Index index , Settings indexSettings ) { delegate . beforeIndexCreated ( index , indexSettings ) ; } @Override public void afterIndexCreated ( IndexService indexService ) { delegate . afterIndexCreated ( indexService ) ; } @Override public void beforeIndexShardCreated ( ShardId shardId , Settings indexSettings ) { delegate . beforeIndexShardCreated ( shardId , indexSettings ) ; } @Override public void beforeIndexClosed ( IndexService indexService ) { delegate . beforeIndexClosed ( indexService ) ; } @Override public void afterIndexClosed ( Index index , Settings indexSettings ) { delegate . afterIndexClosed ( index , indexSettings ) ; } @Override public void beforeIndexShardDeleted ( ShardId shardId , Settings indexSettings ) { delegate . beforeIndexShardDeleted ( shardId , indexSettings ) ; } @Override public void afterIndexShardDeleted ( ShardId shardId , Settings indexSettings ) { delegate . afterIndexShardDeleted ( shardId , indexSettings ) ; } @Override public void afterIndexDeleted ( Index index , Settings indexSettings ) { delegate . afterIndexDeleted ( index , indexSettings ) ; } @Override public void beforeIndexDeleted ( IndexService indexService ) { delegate . beforeIndexDeleted ( indexService ) ; } @Override public void beforeIndexAddedToCluster ( Index index , Settings indexSettings ) { delegate . beforeIndexAddedToCluster ( index , indexSettings ) ; } } } 

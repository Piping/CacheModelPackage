package org . apache . cassandra . service . pager ; import org . apache . cassandra . db . * ; import org . apache . cassandra . db . rows . * ; import org . apache . cassandra . dht . * ; import org . apache . cassandra . exceptions . RequestExecutionException ; public class RangeNamesQueryPager extends AbstractQueryPager { private volatile DecoratedKey lastReturnedKey ; public RangeNamesQueryPager ( PartitionRangeReadCommand command , PagingState state , int protocolVersion ) { super ( command , protocolVersion ) ; assert command . isNamesQuery ( ) ; if ( state ! = null ) { lastReturnedKey = command . metadata ( ) . decorateKey ( state . partitionKey ) ; restoreState ( lastReturnedKey , state . remaining , state . remainingInPartition ) ; } } public PagingState state ( ) { return lastReturnedKey = = null ? null : new PagingState ( lastReturnedKey . getKey ( ) , null , maxRemaining ( ) , remainingInPartition ( ) ) ; } protected ReadCommand nextPageReadCommand ( int pageSize ) throws RequestExecutionException { PartitionRangeReadCommand pageCmd = ( ( PartitionRangeReadCommand ) command ) . withUpdatedLimit ( command . limits ( ) . forPaging ( pageSize ) ) ; if ( lastReturnedKey ! = null ) pageCmd = pageCmd . forSubRange ( makeExcludingKeyBounds ( lastReturnedKey ) ) ; return pageCmd ; } protected void recordLast ( DecoratedKey key , Row last ) { lastReturnedKey = key ; } protected boolean isPreviouslyReturnedPartition ( DecoratedKey key ) { return key . equals ( lastReturnedKey ) ; } private AbstractBounds < PartitionPosition > makeExcludingKeyBounds ( PartitionPosition lastReturnedKey ) { AbstractBounds < PartitionPosition > bounds = ( ( PartitionRangeReadCommand ) command ) . dataRange ( ) . keyRange ( ) ; if ( bounds instanceof Range | | bounds instanceof Bounds ) { return new Range < PartitionPosition > ( lastReturnedKey , bounds . right ) ; } else { return new ExcludingBounds < PartitionPosition > ( lastReturnedKey , bounds . right ) ; } } } 

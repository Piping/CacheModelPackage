package org . elasticsearch . cluster . health ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . routing . IndexRoutingTable ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . RoutingTableValidation ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; import java . util . * ; import static org . elasticsearch . cluster . health . ClusterIndexHealth . readClusterIndexHealth ; public final class ClusterStateHealth implements Iterable < ClusterIndexHealth > , Streamable { private int numberOfNodes = <int> ; private int numberOfDataNodes = <int> ; private int activeShards = <int> ; private int relocatingShards = <int> ; private int activePrimaryShards = <int> ; private int initializingShards = <int> ; private int unassignedShards = <int> ; private double activeShardsPercent = <int> ; private ClusterHealthStatus status = ClusterHealthStatus . RED ; private List < String > validationFailures ; private Map < String , ClusterIndexHealth > indices = new HashMap < > ( ) ; public static ClusterStateHealth readClusterHealth ( StreamInput in ) throws IOException { ClusterStateHealth clusterStateHealth = new ClusterStateHealth ( ) ; clusterStateHealth . readFrom ( in ) ; return clusterStateHealth ; } ClusterStateHealth ( ) { } public ClusterStateHealth ( MetaData clusterMetaData , RoutingTable routingTables ) { this ( ClusterState . builder ( ClusterName . DEFAULT ) . metaData ( clusterMetaData ) . routingTable ( routingTables ) . build ( ) ) ; } public ClusterStateHealth ( ClusterState clusterState ) { this ( clusterState , clusterState . metaData ( ) . concreteAllIndices ( ) ) ; } public ClusterStateHealth ( ClusterState clusterState , String [ ] concreteIndices ) { RoutingTableValidation validation = clusterState . routingTable ( ) . validate ( clusterState . metaData ( ) ) ; validationFailures = validation . failures ( ) ; numberOfNodes = clusterState . nodes ( ) . size ( ) ; numberOfDataNodes = clusterState . nodes ( ) . dataNodes ( ) . size ( ) ; for ( String index : concreteIndices ) { IndexRoutingTable indexRoutingTable = clusterState . routingTable ( ) . index ( index ) ; IndexMetaData indexMetaData = clusterState . metaData ( ) . index ( index ) ; if ( indexRoutingTable = = null ) { continue ; } ClusterIndexHealth indexHealth = new ClusterIndexHealth ( indexMetaData , indexRoutingTable ) ; indices . put ( indexHealth . getIndex ( ) , indexHealth ) ; } status = ClusterHealthStatus . GREEN ; for ( ClusterIndexHealth indexHealth : indices . values ( ) ) { activePrimaryShards + = indexHealth . getActivePrimaryShards ( ) ; activeShards + = indexHealth . getActiveShards ( ) ; relocatingShards + = indexHealth . getRelocatingShards ( ) ; initializingShards + = indexHealth . getInitializingShards ( ) ; unassignedShards + = indexHealth . getUnassignedShards ( ) ; if ( indexHealth . getStatus ( ) = = ClusterHealthStatus . RED ) { status = ClusterHealthStatus . RED ; } else if ( indexHealth . getStatus ( ) = = ClusterHealthStatus . YELLOW & & status ! = ClusterHealthStatus . RED ) { status = ClusterHealthStatus . YELLOW ; } } if ( ! validationFailures . isEmpty ( ) ) { status = ClusterHealthStatus . RED ; } else if ( clusterState . blocks ( ) . hasGlobalBlock ( RestStatus . SERVICE_UNAVAILABLE ) ) { status = ClusterHealthStatus . RED ; } if ( status . equals ( ClusterHealthStatus . GREEN ) ) { this . activeShardsPercent = <int> ; } else { List < ShardRouting > shardRoutings = clusterState . getRoutingTable ( ) . allShards ( ) ; int activeShardCount = <int> ; int totalShardCount = <int> ; for ( ShardRouting shardRouting : shardRoutings ) { if ( shardRouting . active ( ) ) activeShardCount + + ; totalShardCount + + ; } this . activeShardsPercent = ( ( ( double ) activeShardCount ) / totalShardCount ) * <int> ; } } public List < String > getValidationFailures ( ) { return Collections . unmodifiableList ( validationFailures ) ; } public int getActiveShards ( ) { return activeShards ; } public int getRelocatingShards ( ) { return relocatingShards ; } public int getActivePrimaryShards ( ) { return activePrimaryShards ; } public int getInitializingShards ( ) { return initializingShards ; } public int getUnassignedShards ( ) { return unassignedShards ; } public int getNumberOfNodes ( ) { return this . numberOfNodes ; } public int getNumberOfDataNodes ( ) { return this . numberOfDataNodes ; } public ClusterHealthStatus getStatus ( ) { return status ; } public Map < String , ClusterIndexHealth > getIndices ( ) { return Collections . unmodifiableMap ( indices ) ; } public double getActiveShardsPercent ( ) { return activeShardsPercent ; } @Override public Iterator < ClusterIndexHealth > iterator ( ) { return indices . values ( ) . iterator ( ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { activePrimaryShards = in . readVInt ( ) ; activeShards = in . readVInt ( ) ; relocatingShards = in . readVInt ( ) ; initializingShards = in . readVInt ( ) ; unassignedShards = in . readVInt ( ) ; numberOfNodes = in . readVInt ( ) ; numberOfDataNodes = in . readVInt ( ) ; status = ClusterHealthStatus . fromValue ( in . readByte ( ) ) ; int size = in . readVInt ( ) ; for ( int i = <int> ; i < size ; i + + ) { ClusterIndexHealth indexHealth = readClusterIndexHealth ( in ) ; indices . put ( indexHealth . getIndex ( ) , indexHealth ) ; } size = in . readVInt ( ) ; if ( size = = <int> ) { validationFailures = Collections . emptyList ( ) ; } else { for ( int i = <int> ; i < size ; i + + ) { validationFailures . add ( in . readString ( ) ) ; } } activeShardsPercent = in . readDouble ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVInt ( activePrimaryShards ) ; out . writeVInt ( activeShards ) ; out . writeVInt ( relocatingShards ) ; out . writeVInt ( initializingShards ) ; out . writeVInt ( unassignedShards ) ; out . writeVInt ( numberOfNodes ) ; out . writeVInt ( numberOfDataNodes ) ; out . writeByte ( status . value ( ) ) ; out . writeVInt ( indices . size ( ) ) ; for ( ClusterIndexHealth indexHealth : this ) { indexHealth . writeTo ( out ) ; } out . writeVInt ( validationFailures . size ( ) ) ; for ( String failure : validationFailures ) { out . writeString ( failure ) ; } out . writeDouble ( activeShardsPercent ) ; } } 

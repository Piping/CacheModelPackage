package org . elasticsearch . action . admin . indices . settings . get ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeReadAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . regex . Regex ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsFilter ; import org . elasticsearch . common . util . CollectionUtils ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import java . util . Map ; public class TransportGetSettingsAction extends TransportMasterNodeReadAction < GetSettingsRequest , GetSettingsResponse > { private final SettingsFilter settingsFilter ; @Inject public TransportGetSettingsAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , SettingsFilter settingsFilter , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , GetSettingsAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , GetSettingsRequest : : new ) ; this . settingsFilter = settingsFilter ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected ClusterBlockException checkBlock ( GetSettingsRequest request , ClusterState state ) { return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_READ , indexNameExpressionResolver . concreteIndices ( state , request ) ) ; } @Override protected GetSettingsResponse newResponse ( ) { return new GetSettingsResponse ( ) ; } @Override protected void masterOperation ( GetSettingsRequest request , ClusterState state , ActionListener < GetSettingsResponse > listener ) { String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( state , request ) ; ImmutableOpenMap . Builder < String , Settings > indexToSettingsBuilder = ImmutableOpenMap . builder ( ) ; for ( String concreteIndex : concreteIndices ) { IndexMetaData indexMetaData = state . getMetaData ( ) . index ( concreteIndex ) ; if ( indexMetaData = = null ) { continue ; } Settings settings = SettingsFilter . filterSettings ( settingsFilter . getPatterns ( ) , indexMetaData . getSettings ( ) ) ; if ( request . humanReadable ( ) ) { settings = IndexMetaData . addHumanReadableSettings ( settings ) ; } if ( ! CollectionUtils . isEmpty ( request . names ( ) ) ) { Settings . Builder settingsBuilder = Settings . builder ( ) ; for ( Map . Entry < String , String > entry : settings . getAsMap ( ) . entrySet ( ) ) { if ( Regex . simpleMatch ( request . names ( ) , entry . getKey ( ) ) ) { settingsBuilder . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } settings = settingsBuilder . build ( ) ; } indexToSettingsBuilder . put ( concreteIndex , settings ) ; } listener . onResponse ( new GetSettingsResponse ( indexToSettingsBuilder . build ( ) ) ) ; } } 

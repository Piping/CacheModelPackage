package com . badlogic . gdx . physics . bullet ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . utils . Disposable ; public class BulletBase implements Disposable { private long cPointer ; protected boolean swigCMemOwn ; private boolean disposed ; protected boolean destroyed ; public final String className ; private int refCount ; protected BulletBase ( final String className , long cPtr , boolean cMemoryOwn ) { this . className = className ; swigCMemOwn = cMemoryOwn ; cPointer = cPtr ; } public void obtain ( ) { refCount + + ; } public void release ( ) { if ( - - refCount < = <int> & & Bullet . useRefCounting ) dispose ( ) ; } public boolean isObtained ( ) { return refCount > <int> ; } protected void construct ( ) { destroyed = false ; } protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; swigCMemOwn = cMemoryOwn ; cPointer = cPtr ; construct ( ) ; } @Override public boolean equals ( Object obj ) { return ( obj instanceof BulletBase ) & & ( ( ( BulletBase ) obj ) . cPointer = = this . cPointer ) ; } @Override public int hashCode ( ) { return ( int ) cPointer ; } public long getCPointer ( ) { return cPointer ; } public void takeOwnership ( ) { swigCMemOwn = true ; } public void releaseOwnership ( ) { swigCMemOwn = false ; } public boolean hasOwnership ( ) { return swigCMemOwn ; } protected void delete ( ) { cPointer = <int> ; } @Override public void dispose ( ) { if ( refCount > <int> & & Bullet . useRefCounting & & Bullet . enableLogging ) Gdx . app . error ( <str> , <str> + toString ( ) + <str> + refCount + <str> ) ; disposed = true ; delete ( ) ; } public boolean isDisposed ( ) { return disposed ; } @Override public String toString ( ) { return className + <str> + cPointer + <str> + swigCMemOwn + <str> ; } protected void destroy ( ) { try { if ( destroyed & & Bullet . enableLogging ) Gdx . app . error ( <str> , <str> + toString ( ) ) ; destroyed = true ; if ( swigCMemOwn & & ! disposed ) { if ( Bullet . enableLogging ) Gdx . app . error ( <str> , <str> + toString ( ) + <str> ) ; dispose ( ) ; } } catch ( Throwable e ) { Gdx . app . error ( <str> , <str> + toString ( ) , e ) ; } } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed & & Bullet . enableLogging ) Gdx . app . error ( <str> , <str> + className + <str> ) ; super . finalize ( ) ; } } 

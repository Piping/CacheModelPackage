package org . elasticsearch . index . store ; import org . apache . lucene . store . BaseDirectoryWrapper ; import org . apache . lucene . store . FSDirectory ; import org . apache . lucene . store . FileSwitchDirectory ; import org . apache . lucene . store . FilterDirectory ; import org . apache . lucene . store . RAMDirectory ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . nio . file . Path ; import java . util . Collections ; import java . util . Set ; import static org . hamcrest . CoreMatchers . notNullValue ; import static org . hamcrest . CoreMatchers . nullValue ; import static org . hamcrest . CoreMatchers . sameInstance ; public class DirectoryUtilsTests extends ESTestCase { public void testGetLeave ( ) throws IOException { Path file = createTempDir ( ) ; final int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { { BaseDirectoryWrapper dir = newFSDirectory ( file ) ; FSDirectory directory = DirectoryUtils . getLeaf ( new FilterDirectory ( dir ) { } , FSDirectory . class , null ) ; assertThat ( directory , notNullValue ( ) ) ; assertThat ( directory , sameInstance ( DirectoryUtils . getLeafDirectory ( dir , null ) ) ) ; dir . close ( ) ; } { BaseDirectoryWrapper dir = newFSDirectory ( file ) ; FSDirectory directory = DirectoryUtils . getLeaf ( dir , FSDirectory . class , null ) ; assertThat ( directory , notNullValue ( ) ) ; assertThat ( directory , sameInstance ( DirectoryUtils . getLeafDirectory ( dir , null ) ) ) ; dir . close ( ) ; } { Set < String > stringSet = Collections . emptySet ( ) ; BaseDirectoryWrapper dir = newFSDirectory ( file ) ; FSDirectory directory = DirectoryUtils . getLeaf ( new FileSwitchDirectory ( stringSet , dir , dir , random ( ) . nextBoolean ( ) ) , FSDirectory . class , null ) ; assertThat ( directory , notNullValue ( ) ) ; assertThat ( directory , sameInstance ( DirectoryUtils . getLeafDirectory ( dir , null ) ) ) ; dir . close ( ) ; } { Set < String > stringSet = Collections . emptySet ( ) ; BaseDirectoryWrapper dir = newFSDirectory ( file ) ; FSDirectory directory = DirectoryUtils . getLeaf ( new FilterDirectory ( new FileSwitchDirectory ( stringSet , dir , dir , random ( ) . nextBoolean ( ) ) ) { } , FSDirectory . class , null ) ; assertThat ( directory , notNullValue ( ) ) ; assertThat ( directory , sameInstance ( DirectoryUtils . getLeafDirectory ( dir , null ) ) ) ; dir . close ( ) ; } { Set < String > stringSet = Collections . emptySet ( ) ; BaseDirectoryWrapper dir = newFSDirectory ( file ) ; RAMDirectory directory = DirectoryUtils . getLeaf ( new FilterDirectory ( new FileSwitchDirectory ( stringSet , dir , dir , random ( ) . nextBoolean ( ) ) ) { } , RAMDirectory . class , null ) ; assertThat ( directory , nullValue ( ) ) ; dir . close ( ) ; } } } } 

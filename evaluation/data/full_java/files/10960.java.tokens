package org . gradle . api . plugins . buildcomparison . gradle . internal ; import org . gradle . api . Transformer ; import org . gradle . internal . resource . local . FileStore ; import org . gradle . api . plugins . buildcomparison . outcome . internal . BuildOutcome ; import org . gradle . api . plugins . buildcomparison . outcome . internal . archive . GeneratedArchiveBuildOutcome ; import org . gradle . api . plugins . buildcomparison . outcome . internal . unknown . UnknownBuildOutcome ; import org . gradle . internal . resource . local . LocallyAvailableResource ; import org . gradle . util . CollectionUtils ; import java . io . File ; import java . util . HashSet ; import java . util . Set ; public class GradleBuildOutcomeSetInferrer implements Transformer < Set < BuildOutcome > , Set < BuildOutcome > > { private final FileStore < String > fileStore ; private final String fileStorePrefix ; private final File baseDir ; public GradleBuildOutcomeSetInferrer ( FileStore < String > fileStore , String fileStorePrefix , File baseDir ) { this . fileStore = fileStore ; this . fileStorePrefix = fileStorePrefix ; this . baseDir = baseDir ; } public Set < BuildOutcome > transform ( Set < BuildOutcome > sourceOutcomes ) { return CollectionUtils . collect ( sourceOutcomes , new HashSet < BuildOutcome > ( sourceOutcomes . size ( ) ) , new Transformer < BuildOutcome , BuildOutcome > ( ) { public BuildOutcome transform ( BuildOutcome original ) { return infer ( original ) ; } } ) ; } private BuildOutcome infer ( BuildOutcome outcome ) { if ( outcome instanceof UnknownBuildOutcome ) { return new UnknownBuildOutcome ( outcome . getName ( ) , outcome . getDescription ( ) ) ; } else if ( outcome instanceof GeneratedArchiveBuildOutcome ) { GeneratedArchiveBuildOutcome archiveBuildOutcome = ( GeneratedArchiveBuildOutcome ) outcome ; File file = new File ( baseDir , archiveBuildOutcome . getRootRelativePath ( ) ) ; String rootRelativePath = archiveBuildOutcome . getRootRelativePath ( ) ; String taskPath = outcome . getName ( ) ; LocallyAvailableResource resource = null ; if ( file . exists ( ) ) { String filestoreDestination = String . format ( <str> , fileStorePrefix , taskPath , file . getName ( ) ) ; resource = fileStore . move ( filestoreDestination , file ) ; } return new GeneratedArchiveBuildOutcome ( outcome . getName ( ) , outcome . getDescription ( ) , resource , rootRelativePath ) ; } else { throw new IllegalStateException ( String . format ( <str> , outcome . getClass ( ) . getName ( ) ) ) ; } } } 

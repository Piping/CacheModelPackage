package org . gradle . api . internal . tasks . testing . filter ; import com . google . common . base . Splitter ; import java . util . LinkedList ; import java . util . List ; import java . util . regex . Pattern ; public class TestSelectionMatcher { private List < Pattern > includePatterns = new LinkedList < Pattern > ( ) ; public TestSelectionMatcher ( Iterable < String > includedTests ) { for ( String includedTest : includedTests ) { includePatterns . add ( preparePattern ( includedTest ) ) ; } } private Pattern preparePattern ( String input ) { StringBuilder pattern = new StringBuilder ( ) ; Iterable < String > split = Splitter . on ( <str> ) . split ( input ) ; for ( String s : split ) { if ( s . equals ( <str> ) ) { pattern . append ( <str> ) ; } else { if ( pattern . length ( ) > <int> ) { pattern . append ( <str> ) ; } pattern . append ( Pattern . quote ( s ) ) ; } } return Pattern . compile ( pattern . toString ( ) ) ; } public boolean matchesTest ( String className , String methodName ) { String fullName = className + <str> + methodName ; for ( Pattern pattern : includePatterns ) { if ( methodName ! = null & & pattern . matcher ( fullName ) . matches ( ) ) { return true ; } if ( pattern . matcher ( className ) . matches ( ) ) { return true ; } } return false ; } } 

package org . apache . cassandra . dht ; import java . net . InetAddress ; import java . util . Collections ; import org . junit . Test ; import org . apache . cassandra . streaming . DefaultConnectionFactory ; import org . apache . cassandra . streaming . StreamEvent ; import org . apache . cassandra . streaming . StreamSession ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; public class StreamStateStoreTest { @Test public void testUpdateAndQueryAvailableRanges ( ) { IPartitioner p = new Murmur3Partitioner ( ) ; Token . TokenFactory factory = p . getTokenFactory ( ) ; Range < Token > range = new Range < > ( factory . fromString ( <str> ) , factory . fromString ( <str> ) ) ; InetAddress local = FBUtilities . getBroadcastAddress ( ) ; StreamSession session = new StreamSession ( local , local , new DefaultConnectionFactory ( ) , <int> , true , false ) ; session . addStreamRequest ( <str> , Collections . singleton ( range ) , Collections . singleton ( <str> ) , <int> ) ; StreamStateStore store = new StreamStateStore ( ) ; store . handleStreamEvent ( new StreamEvent . SessionCompleteEvent ( session ) ) ; assertFalse ( store . isDataAvailable ( <str> , factory . fromString ( <str> ) ) ) ; session . state ( StreamSession . State . COMPLETE ) ; store . handleStreamEvent ( new StreamEvent . SessionCompleteEvent ( session ) ) ; assertTrue ( store . isDataAvailable ( <str> , factory . fromString ( <str> ) ) ) ; assertFalse ( store . isDataAvailable ( <str> , factory . fromString ( <str> ) ) ) ; assertFalse ( store . isDataAvailable ( <str> , factory . fromString ( <str> ) ) ) ; assertFalse ( store . isDataAvailable ( <str> , factory . fromString ( <str> ) ) ) ; Range < Token > range2 = new Range < > ( factory . fromString ( <str> ) , factory . fromString ( <str> ) ) ; session = new StreamSession ( local , local , new DefaultConnectionFactory ( ) , <int> , true , false ) ; session . addStreamRequest ( <str> , Collections . singleton ( range2 ) , Collections . singleton ( <str> ) , <int> ) ; session . state ( StreamSession . State . COMPLETE ) ; store . handleStreamEvent ( new StreamEvent . SessionCompleteEvent ( session ) ) ; assertTrue ( store . isDataAvailable ( <str> , factory . fromString ( <str> ) ) ) ; assertTrue ( store . isDataAvailable ( <str> , factory . fromString ( <str> ) ) ) ; } } 

package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . ArrayList ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . viewers . ViewerFilter ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . IWorkingSet ; public class WorkingSetsFilter extends ViewerFilter { @Override public boolean select ( Viewer viewer , Object parentElement , Object element ) { if ( element instanceof ILaunchConfigurationType ) { return true ; } if ( element instanceof ILaunchConfiguration ) { ILaunchConfiguration config = ( ILaunchConfiguration ) element ; try { IResource [ ] resources = config . getMappedResources ( ) ; if ( resources = = null ) { return true ; } IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( window = = null ) { return true ; } IWorkbenchPage page = window . getActivePage ( ) ; if ( page = = null ) { return true ; } IWorkingSet [ ] wsets = page . getWorkingSets ( ) ; if ( wsets . length < <int> ) { return true ; } ArrayList < IWorkingSet > ws = new ArrayList < IWorkingSet > ( ) ; for ( int i = <int> ; i < wsets . length ; i + + ) { if ( ! IDebugUIConstants . BREAKPOINT_WORKINGSET_ID . equals ( wsets [ i ] . getId ( ) ) ) { ws . add ( wsets [ i ] ) ; } } if ( ws . isEmpty ( ) ) { return true ; } for ( int i = <int> ; i < resources . length ; i + + ) { if ( workingSetContains ( ws . toArray ( new IWorkingSet [ ws . size ( ) ] ) , resources [ i ] ) ) { return true ; } } } catch ( CoreException e ) { } } return false ; } public static boolean workingSetContains ( IWorkingSet [ ] wsets , IResource res ) { ArrayList < IResource > parents = new ArrayList < IResource > ( ) ; parents . add ( res ) ; while ( res ! = null ) { res = res . getParent ( ) ; if ( res ! = null ) { parents . add ( res ) ; } } IResource lres = null ; for ( int i = <int> ; i < wsets . length ; i + + ) { IAdaptable [ ] elements = wsets [ i ] . getElements ( ) ; for ( int j = <int> ; j < elements . length ; j + + ) { lres = elements [ j ] . getAdapter ( IResource . class ) ; if ( lres ! = null ) { if ( parents . contains ( lres ) ) { return true ; } } } } return false ; } } 

package org . gradle . execution ; import org . gradle . StartParameter ; import org . gradle . TaskExecutionRequest ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . util . GUtil ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . util . Collections ; import java . util . List ; public class DefaultTasksBuildExecutionAction implements BuildConfigurationAction { private static final Logger LOGGER = LoggerFactory . getLogger ( DefaultTasksBuildExecutionAction . class ) ; private final ProjectConfigurer projectConfigurer ; public DefaultTasksBuildExecutionAction ( ProjectConfigurer projectConfigurer ) { this . projectConfigurer = projectConfigurer ; } public void configure ( BuildExecutionContext context ) { StartParameter startParameter = context . getGradle ( ) . getStartParameter ( ) ; for ( TaskExecutionRequest request : startParameter . getTaskRequests ( ) ) { if ( ! request . getArgs ( ) . isEmpty ( ) ) { context . proceed ( ) ; return ; } } ProjectInternal project = context . getGradle ( ) . getDefaultProject ( ) ; projectConfigurer . configure ( project ) ; List < String > defaultTasks = project . getDefaultTasks ( ) ; if ( defaultTasks . size ( ) = = <int> ) { defaultTasks = Collections . singletonList ( ProjectInternal . HELP_TASK ) ; LOGGER . info ( <str> , GUtil . toString ( defaultTasks ) ) ; } else { LOGGER . info ( <str> , GUtil . toString ( defaultTasks ) ) ; } startParameter . setTaskNames ( defaultTasks ) ; context . proceed ( ) ; } } 

package org . elasticsearch . search . aggregations . metrics ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . List ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; @ESIntegTestCase.SuiteScopeTestCase public abstract class AbstractNumericTestCase extends ESIntegTestCase { protected static long minValue , maxValue , minValues , maxValues ; @Override public void setupSuiteScopeCluster ( ) throws Exception { createIndex ( <str> ) ; createIndex ( <str> ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; final int numDocs = <int> ; for ( int i = <int> ; i < numDocs ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i + <int> ) . startArray ( <str> ) . value ( i + <int> ) . value ( i + <int> ) . endArray ( ) . endObject ( ) ) ) ; } minValue = <int> ; minValues = <int> ; maxValue = numDocs ; maxValues = numDocs + <int> ; indexRandom ( true , builders ) ; prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; builders = new ArrayList < > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i * <int> ) . endObject ( ) ) ) ; } indexRandom ( true , builders ) ; ensureSearchable ( ) ; } public abstract void testEmptyAggregation ( ) throws Exception ; public abstract void testUnmapped ( ) throws Exception ; public abstract void testSingleValuedField ( ) throws Exception ; public abstract void testSingleValuedFieldGetProperty ( ) throws Exception ; public abstract void testSingleValuedFieldPartiallyUnmapped ( ) throws Exception ; public abstract void testSingleValuedFieldWithValueScript ( ) throws Exception ; public abstract void testSingleValuedFieldWithValueScriptWithParams ( ) throws Exception ; public abstract void testMultiValuedField ( ) throws Exception ; public abstract void testMultiValuedFieldWithValueScript ( ) throws Exception ; public abstract void testMultiValuedFieldWithValueScriptWithParams ( ) throws Exception ; public abstract void testScriptSingleValued ( ) throws Exception ; public abstract void testScriptSingleValuedWithParams ( ) throws Exception ; public abstract void testScriptMultiValued ( ) throws Exception ; public abstract void testScriptMultiValuedWithParams ( ) throws Exception ; } 

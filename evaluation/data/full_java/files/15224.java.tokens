package org . gradle . plugin . use . internal ; import org . gradle . StartParameter ; import org . gradle . api . UnknownProjectException ; import org . gradle . api . internal . DocumentationRegistry ; import org . gradle . api . internal . artifacts . DependencyManagementServices ; import org . gradle . api . internal . artifacts . DependencyResolutionServices ; import org . gradle . api . internal . artifacts . configurations . DependencyMetaDataProvider ; import org . gradle . api . internal . artifacts . dsl . dependencies . ProjectFinder ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . VersionSelectorScheme ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . initialization . BasicDomainObjectContext ; import org . gradle . api . internal . plugins . PluginInspector ; import org . gradle . api . internal . plugins . PluginRegistry ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . authentication . Authentication ; import org . gradle . cache . CacheRepository ; import org . gradle . cache . PersistentCache ; import org . gradle . cache . internal . FileLockManager ; import org . gradle . initialization . ClassLoaderScopeRegistry ; import org . gradle . internal . Factory ; import org . gradle . internal . resource . transport . http . DefaultHttpSettings ; import org . gradle . internal . resource . transport . http . HttpClientHelper ; import org . gradle . internal . resource . transport . http . HttpResourceAccessor ; import org . gradle . internal . service . ServiceRegistration ; import org . gradle . internal . service . scopes . PluginServiceRegistry ; import org . gradle . plugin . use . resolve . service . internal . * ; import java . util . Collections ; import static org . gradle . cache . internal . filelock . LockOptionsBuilder . mode ; public class PluginUsePluginServiceRegistry implements PluginServiceRegistry { public static final String CACHE_NAME = <str> ; public void registerGlobalServices ( ServiceRegistration registration ) { } public void registerBuildSessionServices ( ServiceRegistration registration ) { } public void registerBuildServices ( ServiceRegistration registration ) { registration . addProvider ( new BuildScopeServices ( ) ) ; } public void registerGradleServices ( ServiceRegistration registration ) { } public void registerProjectServices ( ServiceRegistration registration ) { } private static class BuildScopeServices { PluginResolutionServiceClient createPluginResolutionServiceClient ( CacheRepository cacheRepository , StartParameter startParameter ) { HttpClientHelper http = new HttpClientHelper ( new DefaultHttpSettings ( Collections . < Authentication > emptySet ( ) ) ) ; HttpResourceAccessor accessor = new HttpResourceAccessor ( http ) ; PluginResolutionServiceClient httpClient = startParameter . isOffline ( ) ? new OfflinePluginResolutionServiceClient ( ) : new HttpPluginResolutionServiceClient ( accessor ) ; PersistentCache cache = cacheRepository . cache ( CACHE_NAME ) . withDisplayName ( <str> ) . withLockOptions ( mode ( FileLockManager . LockMode . None ) ) . open ( ) ; PluginResolutionServiceClient persistentCachingClient = new PersistentCachingPluginResolutionServiceClient ( httpClient , cache ) ; PluginResolutionServiceClient inMemoryCachingClient = new InMemoryCachingPluginResolutionServiceClient ( persistentCachingClient ) ; return new DeprecationListeningPluginResolutionServiceClient ( inMemoryCachingClient ) ; } PluginResolutionServiceResolver createPluginResolutionServiceResolver ( PluginResolutionServiceClient pluginResolutionServiceClient , VersionSelectorScheme versionSelectorScheme , StartParameter startParameter , final DependencyManagementServices dependencyManagementServices , final FileResolver fileResolver , final DependencyMetaDataProvider dependencyMetaDataProvider , ClassLoaderScopeRegistry classLoaderScopeRegistry , PluginInspector pluginInspector ) { final ProjectFinder projectFinder = new ProjectFinder ( ) { public ProjectInternal getProject ( String path ) { throw new UnknownProjectException ( <str> ) ; } } ; return new PluginResolutionServiceResolver ( pluginResolutionServiceClient , versionSelectorScheme , startParameter , classLoaderScopeRegistry . getCoreScope ( ) , new Factory < DependencyResolutionServices > ( ) { public DependencyResolutionServices create ( ) { return dependencyManagementServices . create ( fileResolver , dependencyMetaDataProvider , projectFinder , new BasicDomainObjectContext ( ) ) ; } } , pluginInspector ) ; } PluginResolverFactory createPluginResolverFactory ( PluginRegistry pluginRegistry , DocumentationRegistry documentationRegistry , PluginResolutionServiceResolver pluginResolutionServiceResolver , InjectedClasspathPluginResolver injectedClasspathPluginResolver ) { return new PluginResolverFactory ( pluginRegistry , documentationRegistry , pluginResolutionServiceResolver , injectedClasspathPluginResolver ) ; } PluginRequestApplicator createPluginRequestApplicator ( PluginRegistry pluginRegistry , PluginResolverFactory pluginResolverFactory ) { return new DefaultPluginRequestApplicator ( pluginRegistry , pluginResolverFactory . create ( ) ) ; } InjectedClasspathPluginResolver createInjectedClassPathPluginResolver ( ClassLoaderScopeRegistry classLoaderScopeRegistry , PluginInspector pluginInspector , InjectedPluginClasspath injectedPluginClasspath ) { return new InjectedClasspathPluginResolver ( classLoaderScopeRegistry . getCoreAndPluginsScope ( ) , pluginInspector , injectedPluginClasspath . getClasspath ( ) ) ; } } } 

package org . gradle . tooling . internal . consumer . converters ; import org . gradle . api . Action ; import org . gradle . tooling . internal . adapter . SourceObjectMapping ; import org . gradle . tooling . internal . consumer . versioning . VersionDetails ; import org . gradle . tooling . model . idea . IdeaProject ; import org . gradle . util . GradleVersion ; import java . io . Serializable ; public class IdeaProjectCompatibilityMapper implements Action < SourceObjectMapping > , Serializable { private final VersionDetails versionDetails ; public IdeaProjectCompatibilityMapper ( VersionDetails versionDetails ) { this . versionDetails = versionDetails ; } @Override public void execute ( SourceObjectMapping mapping ) { Class < ? > targetType = mapping . getTargetType ( ) ; if ( IdeaProject . class . isAssignableFrom ( targetType ) & & ! versionSupportsIdeaJavaSourceSettings ( ) ) { mapping . mixIn ( CompatibilityIdeaProjectMapping . class ) ; } } private boolean versionSupportsIdeaJavaSourceSettings ( ) { GradleVersion targetGradleVersion = GradleVersion . version ( versionDetails . getVersion ( ) ) ; return targetGradleVersion . getBaseVersion ( ) . compareTo ( GradleVersion . version ( <str> ) ) > = <int> ; } } 

package org . gradle . integtests . fixtures ; import org . gradle . test . fixtures . file . TestDirectoryProvider ; import org . gradle . test . fixtures . file . TestFile ; import org . gradle . util . Resources ; import org . junit . rules . MethodRule ; import org . junit . runners . model . FrameworkMethod ; import org . junit . runners . model . Statement ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . util . Arrays ; import java . util . Collection ; public class TestResources implements MethodRule { private final Logger logger = LoggerFactory . getLogger ( TestResources . class ) ; private final TestDirectoryProvider testWorkDirProvider ; private final Collection < String > extraResources ; private final Resources resources = new Resources ( ) ; public TestResources ( TestDirectoryProvider testDirectoryProvider , String . . . extraResources ) { testWorkDirProvider = testDirectoryProvider ; this . extraResources = Arrays . asList ( extraResources ) ; } public TestFile getDir ( ) { return testWorkDirProvider . getTestDirectory ( ) ; } public Statement apply ( Statement base , final FrameworkMethod method , Object target ) { final Statement statement = resources . apply ( base , method , target ) ; return new Statement ( ) { @Override public void evaluate ( ) throws Throwable { String className = method . getMethod ( ) . getDeclaringClass ( ) . getSimpleName ( ) ; maybeCopy ( String . format ( <str> , className ) ) ; maybeCopy ( String . format ( <str> , className , method . getName ( ) ) ) ; for ( String extraResource : extraResources ) { maybeCopy ( extraResource ) ; } statement . evaluate ( ) ; } } ; } public void maybeCopy ( String resource ) { TestFile dir = resources . findResource ( resource ) ; if ( dir ! = null ) { logger . debug ( <str> , resource , dir ) ; dir . copyTo ( getDir ( ) ) ; } else { logger . debug ( <str> , resource ) ; } } } 

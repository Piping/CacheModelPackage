package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class BoostingQueryParser implements QueryParser < BoostingQueryBuilder > { public static final ParseField POSITIVE_FIELD = new ParseField ( <str> ) ; public static final ParseField NEGATIVE_FIELD = new ParseField ( <str> ) ; public static final ParseField NEGATIVE_BOOST_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { BoostingQueryBuilder . NAME } ; } @Override public BoostingQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; QueryBuilder positiveQuery = null ; boolean positiveQueryFound = false ; QueryBuilder negativeQuery = null ; boolean negativeQueryFound = false ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; float negativeBoost = - <int> ; String queryName = null ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , POSITIVE_FIELD ) ) { positiveQuery = parseContext . parseInnerQueryBuilder ( ) ; positiveQueryFound = true ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , NEGATIVE_FIELD ) ) { negativeQuery = parseContext . parseInnerQueryBuilder ( ) ; negativeQueryFound = true ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , NEGATIVE_BOOST_FIELD ) ) { negativeBoost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } if ( ! positiveQueryFound ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } if ( ! negativeQueryFound ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } if ( negativeBoost < <int> ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } BoostingQueryBuilder boostingQuery = new BoostingQueryBuilder ( positiveQuery , negativeQuery ) ; boostingQuery . negativeBoost ( negativeBoost ) ; boostingQuery . boost ( boost ) ; boostingQuery . queryName ( queryName ) ; return boostingQuery ; } @Override public BoostingQueryBuilder getBuilderPrototype ( ) { return BoostingQueryBuilder . PROTOTYPE ; } } 

package org . gradle . execution ; import org . gradle . TaskExecutionRequest ; import org . gradle . api . internal . GradleInternal ; import org . gradle . execution . commandline . CommandLineTaskParser ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . util . List ; public class TaskNameResolvingBuildConfigurationAction implements BuildConfigurationAction { private static final Logger LOGGER = LoggerFactory . getLogger ( TaskNameResolvingBuildConfigurationAction . class ) ; private final CommandLineTaskParser commandLineTaskParser ; public TaskNameResolvingBuildConfigurationAction ( CommandLineTaskParser commandLineTaskParser ) { this . commandLineTaskParser = commandLineTaskParser ; } public void configure ( BuildExecutionContext context ) { GradleInternal gradle = context . getGradle ( ) ; TaskGraphExecuter executer = gradle . getTaskGraph ( ) ; List < TaskExecutionRequest > taskParameters = gradle . getStartParameter ( ) . getTaskRequests ( ) ; for ( TaskExecutionRequest taskParameter : taskParameters ) { List < TaskSelector . TaskSelection > taskSelections = commandLineTaskParser . parseTasks ( taskParameter ) ; for ( TaskSelector . TaskSelection taskSelection : taskSelections ) { LOGGER . info ( <str> , taskSelection . getTaskName ( ) , taskSelection . getProjectPath ( ) ) ; executer . addTasks ( taskSelection . getTasks ( ) ) ; } } context . proceed ( ) ; } } 

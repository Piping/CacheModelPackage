package org . gradle . api . specs ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; abstract public class CompositeSpec < T > implements Spec < T > { private List < Spec < ? super T > > specs ; protected CompositeSpec ( Spec < ? super T > . . . specs ) { this . specs = Arrays . asList ( specs ) ; } protected CompositeSpec ( Iterable < ? extends Spec < ? super T > > specs ) { this . specs = new ArrayList < Spec < ? super T > > ( ) ; for ( Spec < ? super T > spec : specs ) { this . specs . add ( spec ) ; } } public List < Spec < ? super T > > getSpecs ( ) { return Collections . unmodifiableList ( specs ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( ! ( o instanceof CompositeSpec ) ) { return false ; } CompositeSpec that = ( CompositeSpec ) o ; if ( specs ! = null ? ! specs . equals ( that . specs ) : that . specs ! = null ) { return false ; } return true ; } @Override public int hashCode ( ) { return specs ! = null ? specs . hashCode ( ) : <int> ; } } 

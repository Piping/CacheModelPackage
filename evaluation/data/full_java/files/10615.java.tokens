package com . google . common . reflect ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . lang . reflect . Method ; import java . lang . reflect . TypeVariable ; public class TypeParameterTest extends TestCase { public < T > void testCaptureTypeParameter ( ) throws Exception { TypeVariable < ? > variable = new TypeParameter < T > ( ) { } . typeVariable ; TypeVariable < ? > expected = TypeParameterTest . class . getDeclaredMethod ( <str> ) . getTypeParameters ( ) [ <int> ] ; assertEquals ( expected , variable ) ; } public void testConcreteTypeRejected ( ) { try { new TypeParameter < String > ( ) { } ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public < A , B > void testEquals ( ) throws Exception { Method method = TypeParameterTest . class . getDeclaredMethod ( <str> ) ; new EqualsTester ( ) . addEqualityGroup ( new TypeParameter < A > ( ) { } , new TypeParameter < A > ( ) { } ) . addEqualityGroup ( new TypeParameter < B > ( ) { } ) . testEquals ( ) ; } public void testNullPointers ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( TypeParameter . class ) ; } } 

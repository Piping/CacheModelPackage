package org . gradle ; import org . gradle . api . logging . LogLevel ; import org . gradle . logging . StyledTextOutputFactory ; import org . gradle . logging . TestStyledTextOutput ; import org . gradle . util . Clock ; import org . gradle . util . JUnit4GroovyMockery ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Before ; import org . junit . Test ; import org . junit . runner . RunWith ; import static org . junit . Assert . assertEquals ; @RunWith ( org . jmock . integration . junit4 . JMock . class ) public class BuildResultLoggerTest { private final JUnit4Mockery context = new JUnit4GroovyMockery ( ) ; private StyledTextOutputFactory textOutputFactory ; private TestStyledTextOutput textOutput ; private BuildListener listener ; private Clock buildTimeClock ; @Before public void setup ( ) { textOutput = new TestStyledTextOutput ( ) ; buildTimeClock = context . mock ( Clock . class ) ; textOutputFactory = context . mock ( StyledTextOutputFactory . class ) ; listener = new BuildResultLogger ( textOutputFactory , buildTimeClock ) ; } @Test public void logsBuildSuccessAndTotalTime ( ) { context . checking ( new Expectations ( ) { { one ( buildTimeClock ) . getTime ( ) ; will ( returnValue ( <str> ) ) ; one ( textOutputFactory ) . create ( BuildResultLogger . class , LogLevel . LIFECYCLE ) ; will ( returnValue ( textOutput ) ) ; } } ) ; listener . buildFinished ( new BuildResult ( null , null ) ) ; assertEquals ( <str> , textOutput . getValue ( ) ) ; } @Test public void logsBuildFailedAndTotalTime ( ) { context . checking ( new Expectations ( ) { { one ( buildTimeClock ) . getTime ( ) ; will ( returnValue ( <str> ) ) ; one ( textOutputFactory ) . create ( BuildResultLogger . class , LogLevel . LIFECYCLE ) ; will ( returnValue ( textOutput ) ) ; } } ) ; listener . buildFinished ( new BuildResult ( null , new RuntimeException ( ) ) ) ; assertEquals ( <str> , textOutput . getValue ( ) ) ; } } 

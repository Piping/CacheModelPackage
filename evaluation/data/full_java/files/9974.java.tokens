package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . Helpers . copyToList ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . SUPPORTS_PUT ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . ListMultimap ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . List ; import java . util . Map . Entry ; @GwtCompatible public class ListMultimapPutTester < K , V > extends AbstractListMultimapTester < K , V > { @MapFeature.Require ( SUPPORTS_PUT ) public void testPutAddsValueAtEnd ( ) { for ( K key : sampleKeys ( ) ) { for ( V value : sampleValues ( ) ) { resetContainer ( ) ; List < V > values = multimap ( ) . get ( key ) ; List < V > expectedValues = Helpers . copyToList ( values ) ; assertTrue ( multimap ( ) . put ( key , value ) ) ; expectedValues . add ( value ) ; assertGet ( key , expectedValues ) ; assertEquals ( value , values . get ( values . size ( ) - <int> ) ) ; } } } @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( absent = ZERO ) public void testPutDuplicateValue ( ) { List < Entry < K , V > > entries = copyToList ( multimap ( ) . entries ( ) ) ; for ( Entry < K , V > entry : entries ) { resetContainer ( ) ; K k = entry . getKey ( ) ; V v = entry . getValue ( ) ; List < V > values = multimap ( ) . get ( k ) ; List < V > expectedValues = copyToList ( values ) ; assertTrue ( multimap ( ) . put ( k , v ) ) ; expectedValues . add ( v ) ; assertGet ( k , expectedValues ) ; assertEquals ( v , values . get ( values . size ( ) - <int> ) ) ; } } } 

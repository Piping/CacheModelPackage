package org . elasticsearch . messy . tests ; import org . elasticsearch . Version ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . bulk . BulkItemResponse ; import org . elasticsearch . action . bulk . BulkRequest ; import org . elasticsearch . action . bulk . BulkRequestBuilder ; import org . elasticsearch . action . bulk . BulkResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . delete . DeleteRequest ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . action . index . IndexRequest ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . update . UpdateRequest ; import org . elasticsearch . action . update . UpdateRequestBuilder ; import org . elasticsearch . action . update . UpdateResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . test . ESIntegTestCase ; import java . nio . charset . StandardCharsets ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . concurrent . CyclicBarrier ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertExists ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchHits ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . nullValue ; public class BulkTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } public void testBulkUpdateSimple ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) ) ; ensureGreen ( ) ; BulkResponse bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareIndex ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) ) . add ( client ( ) . prepareIndex ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) . setCreate ( true ) ) . add ( client ( ) . prepareIndex ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) ) . add ( client ( ) . prepareIndex ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) ) . add ( client ( ) . prepareIndex ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( bulkResponse . hasFailures ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) . length , equalTo ( <int> ) ) ; for ( BulkItemResponse bulkItemResponse : bulkResponse ) { assertThat ( bulkItemResponse . getIndex ( ) , equalTo ( <str> ) ) ; } bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) . setRetryOnConflict ( <int> ) ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setDoc ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( bulkResponse . hasFailures ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) . length , equalTo ( <int> ) ) ; for ( BulkItemResponse bulkItemResponse : bulkResponse ) { assertThat ( bulkItemResponse . getIndex ( ) , equalTo ( <str> ) ) ; } assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; GetResponse getResponse = client ( ) . prepareGet ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setFields ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( true ) ) ; assertThat ( getResponse . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Long ) getResponse . getField ( <str> ) . getValue ( ) ) , equalTo ( <int> ) ) ; getResponse = client ( ) . prepareGet ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setFields ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( true ) ) ; assertThat ( getResponse . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Long ) getResponse . getField ( <str> ) . getValue ( ) ) , equalTo ( <int> ) ) ; getResponse = client ( ) . prepareGet ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setFields ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( true ) ) ; assertThat ( getResponse . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( getResponse . getField ( <str> ) . getValue ( ) . toString ( ) , equalTo ( <str> ) ) ; bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) . setUpsert ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ) ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( indexOrAlias ( ) ) . setType ( <str> ) . setId ( <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( bulkResponse . hasFailures ( ) , equalTo ( true ) ) ; assertThat ( bulkResponse . getItems ( ) . length , equalTo ( <int> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) , nullValue ( ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailure ( ) . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailure ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailure ( ) . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; getResponse = client ( ) . prepareGet ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setFields ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( true ) ) ; assertThat ( getResponse . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Long ) getResponse . getField ( <str> ) . getValue ( ) ) , equalTo ( <int> l ) ) ; getResponse = client ( ) . prepareGet ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setFields ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; getResponse = client ( ) . prepareGet ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setFields ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( true ) ) ; assertThat ( getResponse . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Long ) getResponse . getField ( <str> ) . getValue ( ) ) , equalTo ( <int> ) ) ; } public void testBulkVersioning ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; BulkResponse bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setCreate ( true ) . setSource ( <str> , <str> ) ) . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setCreate ( true ) . setSource ( <str> , <str> ) ) . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) . get ( ) ; assertTrue ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . isCreated ( ) ) ; assertThat ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertTrue ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . isCreated ( ) ) ; assertThat ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertFalse ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . isCreated ( ) ) ; assertThat ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setVersion ( <int> ) . setDoc ( <str> , <str> ) ) . add ( client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> , <str> ) ) . add ( client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setVersion ( <int> ) . setDoc ( <str> , <str> ) ) . get ( ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailureMessage ( ) , containsString ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setVersion ( <int> ) . setVersionType ( VersionType . EXTERNAL ) ) . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setVersion ( <int> ) . setVersionType ( VersionType . EXTERNAL ) ) . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setVersion ( <int> ) . setVersionType ( VersionType . EXTERNAL ) ) . get ( ) ; assertTrue ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . isCreated ( ) ) ; assertThat ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertTrue ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . isCreated ( ) ) ; assertThat ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertFalse ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . isCreated ( ) ) ; assertThat ( ( ( IndexResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> , <str> ) . setVersion ( <int> ) ) . add ( client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> , <str> ) . setVersion ( <int> ) . setVersionType ( VersionType . FORCE ) ) . add ( client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( <str> , <str> ) . setVersion ( <int> ) . setVersionType ( VersionType . INTERNAL ) ) . get ( ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailureMessage ( ) , containsString ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; } public void testBulkUpdateMalformedScripts ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; BulkResponse bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) ) . add ( client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) ) . add ( client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; assertThat ( bulkResponse . hasFailures ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) . length , equalTo ( <int> ) ) ; bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) . setFields ( <str> ) ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) . setFields ( <str> ) ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) . setFields ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( bulkResponse . hasFailures ( ) , equalTo ( true ) ) ; assertThat ( bulkResponse . getItems ( ) . length , equalTo ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailure ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailure ( ) . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) , nullValue ( ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Integer ) ( ( UpdateResponse ) bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) ) . getGetResult ( ) . field ( <str> ) . getValue ( ) ) , equalTo ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailure ( ) , nullValue ( ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailure ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getFailure ( ) . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getResponse ( ) , nullValue ( ) ) ; } public void testBulkUpdateLargerVolume ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; int numDocs = scaledRandomIntBetween ( <int> , <int> ) ; if ( numDocs % <int> = = <int> ) { numDocs + + ; } logger . info ( <str> , numDocs ) ; BulkRequestBuilder builder = client ( ) . prepareBulk ( ) ; for ( int i = <int> ; i < numDocs ; i + + ) { builder . add ( client ( ) . prepareUpdate ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( Integer . toString ( i ) ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) . setFields ( <str> ) . setUpsert ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ) ) ; } BulkResponse response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . hasFailures ( ) , equalTo ( false ) ) ; assertThat ( response . getItems ( ) . length , equalTo ( numDocs ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { assertThat ( response . getItems ( ) [ i ] . getId ( ) , equalTo ( Integer . toString ( i ) ) ) ; assertThat ( response . getItems ( ) [ i ] . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( response . getItems ( ) [ i ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getOpType ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) response . getItems ( ) [ i ] . getResponse ( ) ) . getId ( ) , equalTo ( Integer . toString ( i ) ) ) ; assertThat ( ( ( UpdateResponse ) response . getItems ( ) [ i ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Integer ) ( ( UpdateResponse ) response . getItems ( ) [ i ] . getResponse ( ) ) . getGetResult ( ) . field ( <str> ) . getValue ( ) ) , equalTo ( <int> ) ) ; for ( int j = <int> ; j < <int> ; j + + ) { GetResponse getResponse = client ( ) . prepareGet ( <str> , <str> , Integer . toString ( i ) ) . setFields ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( true ) ) ; assertThat ( getResponse . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( Long ) getResponse . getField ( <str> ) . getValue ( ) , equalTo ( <int> ) ) ; } } builder = client ( ) . prepareBulk ( ) ; for ( int i = <int> ; i < numDocs ; i + + ) { UpdateRequestBuilder updateBuilder = client ( ) . prepareUpdate ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( Integer . toString ( i ) ) . setFields ( <str> ) ; if ( i % <int> = = <int> ) { updateBuilder . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) ; } else { updateBuilder . setDoc ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ) ; } if ( i % <int> = = <int> ) { updateBuilder . setRetryOnConflict ( <int> ) ; } builder . add ( updateBuilder ) ; } response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . hasFailures ( ) , equalTo ( false ) ) ; assertThat ( response . getItems ( ) . length , equalTo ( numDocs ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { assertThat ( response . getItems ( ) [ i ] . getId ( ) , equalTo ( Integer . toString ( i ) ) ) ; assertThat ( response . getItems ( ) [ i ] . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( response . getItems ( ) [ i ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getOpType ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( UpdateResponse ) response . getItems ( ) [ i ] . getResponse ( ) ) . getId ( ) , equalTo ( Integer . toString ( i ) ) ) ; assertThat ( ( ( UpdateResponse ) response . getItems ( ) [ i ] . getResponse ( ) ) . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Integer ) ( ( UpdateResponse ) response . getItems ( ) [ i ] . getResponse ( ) ) . getGetResult ( ) . field ( <str> ) . getValue ( ) ) , equalTo ( <int> ) ) ; } builder = client ( ) . prepareBulk ( ) ; int maxDocs = numDocs / <int> + numDocs ; for ( int i = ( numDocs / <int> ) ; i < maxDocs ; i + + ) { builder . add ( client ( ) . prepareUpdate ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( Integer . toString ( i ) ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) ) ; } response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . hasFailures ( ) , equalTo ( true ) ) ; assertThat ( response . getItems ( ) . length , equalTo ( numDocs ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { int id = i + ( numDocs / <int> ) ; if ( i > = ( numDocs / <int> ) ) { assertThat ( response . getItems ( ) [ i ] . getFailure ( ) . getId ( ) , equalTo ( Integer . toString ( id ) ) ) ; assertThat ( response . getItems ( ) [ i ] . getFailure ( ) . getMessage ( ) , containsString ( <str> ) ) ; } else { assertThat ( response . getItems ( ) [ i ] . getId ( ) , equalTo ( Integer . toString ( id ) ) ) ; assertThat ( response . getItems ( ) [ i ] . getVersion ( ) , equalTo ( <int> ) ) ; assertThat ( response . getItems ( ) [ i ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getOpType ( ) , equalTo ( <str> ) ) ; } } builder = client ( ) . prepareBulk ( ) ; for ( int i = <int> ; i < numDocs ; i + + ) { builder . add ( client ( ) . prepareUpdate ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( Integer . toString ( i ) ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) ) ; } response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . buildFailureMessage ( ) , response . hasFailures ( ) , equalTo ( false ) ) ; assertThat ( response . getItems ( ) . length , equalTo ( numDocs ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { assertThat ( response . getItems ( ) [ i ] . getItemId ( ) , equalTo ( i ) ) ; assertThat ( response . getItems ( ) [ i ] . getId ( ) , equalTo ( Integer . toString ( i ) ) ) ; assertThat ( response . getItems ( ) [ i ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getOpType ( ) , equalTo ( <str> ) ) ; } builder = client ( ) . prepareBulk ( ) ; for ( int i = <int> ; i < numDocs ; i + + ) { builder . add ( client ( ) . prepareUpdate ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( Integer . toString ( i ) ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , null , null ) ) ) ; } response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . hasFailures ( ) , equalTo ( false ) ) ; assertThat ( response . getItems ( ) . length , equalTo ( numDocs ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { assertThat ( response . getItems ( ) [ i ] . getItemId ( ) , equalTo ( i ) ) ; assertThat ( response . getItems ( ) [ i ] . getId ( ) , equalTo ( Integer . toString ( i ) ) ) ; assertThat ( response . getItems ( ) [ i ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getItems ( ) [ i ] . getOpType ( ) , equalTo ( <str> ) ) ; for ( int j = <int> ; j < <int> ; j + + ) { GetResponse getResponse = client ( ) . prepareGet ( <str> , <str> , Integer . toString ( i ) ) . setFields ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( false ) ) ; } } } public void testBulkIndexingWhileInitializing ( ) throws Exception { int replica = randomInt ( <int> ) ; internalCluster ( ) . ensureAtLeastNumDataNodes ( <int> + replica ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( indexSettings ( ) ) . put ( <str> , replica ) ) ) ; int numDocs = scaledRandomIntBetween ( <int> , <int> ) ; int bulk = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < numDocs ; ) { final BulkRequestBuilder builder = client ( ) . prepareBulk ( ) ; for ( int j = <int> ; j < bulk & & i < numDocs ; j + + , i + + ) { builder . add ( client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , i ) ) ; } logger . info ( <str> , i - bulk , i - <int> ) ; BulkResponse response = builder . get ( ) ; if ( response . hasFailures ( ) ) { fail ( response . buildFailureMessage ( ) ) ; } } refresh ( ) ; SearchResponse countResponse = client ( ) . prepareSearch ( ) . setSize ( <int> ) . get ( ) ; assertHitCount ( countResponse , numDocs ) ; } public void testBulkUpdateDocAsUpsertWithParent ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , <str> ) . addMapping ( <str> , <str> ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; BulkRequestBuilder builder = client ( ) . prepareBulk ( ) ; byte [ ] addParent = new BytesArray ( <str> + <str> ) . array ( ) ; byte [ ] addChild = new BytesArray ( <str> + <str> ) . array ( ) ; builder . add ( addParent , <int> , addParent . length ) ; builder . add ( addChild , <int> , addChild . length ) ; BulkResponse bulkResponse = builder . get ( ) ; assertThat ( bulkResponse . getItems ( ) . length , equalTo ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . get ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . hasParentQuery ( <str> , QueryBuilders . matchAllQuery ( ) ) ) . get ( ) ; assertNoFailures ( searchResponse ) ; assertSearchHits ( searchResponse , <str> ) ; } public void testBulkUpdateUpsertWithParent ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> ) . addMapping ( <str> , <str> ) ) ; ensureGreen ( ) ; BulkRequestBuilder builder = client ( ) . prepareBulk ( ) ; byte [ ] addParent = new BytesArray ( <str> + <str> ) . array ( ) ; byte [ ] addChild = new BytesArray ( <str> + <str> ) . array ( ) ; builder . add ( addParent , <int> , addParent . length ) ; builder . add ( addChild , <int> , addChild . length ) ; BulkResponse bulkResponse = builder . get ( ) ; assertThat ( bulkResponse . getItems ( ) . length , equalTo ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . get ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . hasParentQuery ( <str> , QueryBuilders . matchAllQuery ( ) ) ) . get ( ) ; assertSearchHits ( searchResponse , <str> ) ; } public void testBulkUpdateChildMissingParentRouting ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> ) . addMapping ( <str> , <str> ) ) ; ensureGreen ( ) ; BulkRequestBuilder builder = client ( ) . prepareBulk ( ) ; byte [ ] addParent = new BytesArray ( <str> + <str> ) . array ( ) ; byte [ ] addChildOK = new BytesArray ( <str> + <str> ) . array ( ) ; byte [ ] addChildMissingRouting = new BytesArray ( <str> + <str> ) . array ( ) ; builder . add ( addParent , <int> , addParent . length ) ; builder . add ( addChildOK , <int> , addChildOK . length ) ; builder . add ( addChildMissingRouting , <int> , addChildMissingRouting . length ) ; builder . add ( addChildOK , <int> , addChildOK . length ) ; BulkResponse bulkResponse = builder . get ( ) ; assertThat ( bulkResponse . getItems ( ) . length , equalTo ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( true ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; } public void testFailingVersionedUpdatedOnBulk ( ) throws Exception { createIndex ( <str> ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; final BulkResponse [ ] responses = new BulkResponse [ <int> ] ; final CyclicBarrier cyclicBarrier = new CyclicBarrier ( responses . length ) ; Thread [ ] threads = new Thread [ responses . length ] ; for ( int i = <int> ; i < responses . length ; i + + ) { final int threadID = i ; threads [ threadID ] = new Thread ( new Runnable ( ) { @Override public void run ( ) { try { cyclicBarrier . await ( ) ; } catch ( Exception e ) { return ; } BulkRequestBuilder requestBuilder = client ( ) . prepareBulk ( ) ; requestBuilder . add ( client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setVersion ( <int> ) . setDoc ( <str> , threadID ) ) ; responses [ threadID ] = requestBuilder . get ( ) ; } } ) ; threads [ threadID ] . start ( ) ; } for ( int i = <int> ; i < threads . length ; i + + ) { threads [ i ] . join ( ) ; } int successes = <int> ; for ( BulkResponse response : responses ) { if ( ! response . hasFailures ( ) ) { successes + + ; } } assertThat ( successes , equalTo ( <int> ) ) ; } public void testPreParsingSourceDueToMappingShouldNotBreakCompleteBulkRequest ( ) throws Exception { XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , builder ) . setSettings ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2_ID ) ) ; String brokenBuildRequestData = <str> + <str> + <str> + <str> ; BulkResponse bulkResponse = client ( ) . prepareBulk ( ) . add ( brokenBuildRequestData . getBytes ( StandardCharsets . UTF_8 ) , <int> , brokenBuildRequestData . length ( ) , <str> , <str> ) . setRefresh ( true ) . get ( ) ; assertThat ( bulkResponse . getItems ( ) . length , is ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , is ( true ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , is ( false ) ) ; assertExists ( get ( <str> , <str> , <str> ) ) ; } public void testPreParsingSourceDueToRoutingShouldNotBreakCompleteBulkRequest ( ) throws Exception { XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , builder ) . setSettings ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2_ID ) ) ; ensureYellow ( <str> ) ; String brokenBuildRequestData = <str> + <str> + <str> + <str> ; BulkResponse bulkResponse = client ( ) . prepareBulk ( ) . add ( brokenBuildRequestData . getBytes ( StandardCharsets . UTF_8 ) , <int> , brokenBuildRequestData . length ( ) , <str> , <str> ) . setRefresh ( true ) . get ( ) ; assertThat ( bulkResponse . getItems ( ) . length , is ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , is ( true ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , is ( false ) ) ; assertExists ( client ( ) . prepareGet ( <str> , <str> , <str> ) . setRouting ( <str> ) . get ( ) ) ; } public void testPreParsingSourceDueToIdShouldNotBreakCompleteBulkRequest ( ) throws Exception { XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , builder ) . setSettings ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_1_4_2_ID ) ) ; ensureYellow ( <str> ) ; String brokenBuildRequestData = <str> + <str> + <str> + <str> ; BulkResponse bulkResponse = client ( ) . prepareBulk ( ) . add ( brokenBuildRequestData . getBytes ( StandardCharsets . UTF_8 ) , <int> , brokenBuildRequestData . length ( ) , <str> , <str> ) . setRefresh ( true ) . get ( ) ; assertThat ( bulkResponse . getItems ( ) . length , is ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , is ( true ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , is ( false ) ) ; assertExists ( get ( <str> , <str> , <str> ) ) ; } public void testThatInvalidIndexNamesShouldNotBreakCompleteBulkRequest ( ) { int bulkEntryCount = randomIntBetween ( <int> , <int> ) ; BulkRequestBuilder builder = client ( ) . prepareBulk ( ) ; boolean [ ] expectedFailures = new boolean [ bulkEntryCount ] ; ArrayList < String > badIndexNames = new ArrayList < > ( ) ; for ( int i = randomIntBetween ( <int> , <int> ) ; i > <int> ; i - - ) { badIndexNames . add ( <str> + i ) ; } boolean expectFailure = false ; for ( int i = <int> ; i < bulkEntryCount ; i + + ) { expectFailure | = expectedFailures [ i ] = randomBoolean ( ) ; String name ; if ( expectedFailures [ i ] ) { name = randomFrom ( badIndexNames ) ; } else { name = <str> ; } builder . add ( client ( ) . prepareIndex ( ) . setIndex ( name ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) ) ; } BulkResponse bulkResponse = builder . get ( ) ; assertThat ( bulkResponse . hasFailures ( ) , is ( expectFailure ) ) ; assertThat ( bulkResponse . getItems ( ) . length , is ( bulkEntryCount ) ) ; for ( int i = <int> ; i < bulkEntryCount ; i + + ) { assertThat ( bulkResponse . getItems ( ) [ i ] . isFailed ( ) , is ( expectedFailures [ i ] ) ) ; } } public void testThatFailedUpdateRequestReturnsCorrectType ( ) throws Exception { BulkResponse indexBulkItemResponse = client ( ) . prepareBulk ( ) . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> ) ) . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> ) ) . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> ) ) . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> ) ) . setRefresh ( true ) . get ( ) ; assertNoFailures ( indexBulkItemResponse ) ; BulkResponse bulkItemResponse = client ( ) . prepareBulk ( ) . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> ) ) . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> ) ) . add ( new UpdateRequest ( <str> , <str> , <str> ) . doc ( <str> ) ) . add ( new UpdateRequest ( <str> , <str> , <str> ) . doc ( <str> ) ) . add ( new DeleteRequest ( <str> , <str> , <str> ) ) . add ( new DeleteRequest ( <str> , <str> , <str> ) ) . get ( ) ; assertNoFailures ( indexBulkItemResponse ) ; assertThat ( bulkItemResponse . getItems ( ) . length , is ( <int> ) ) ; assertThat ( bulkItemResponse . getItems ( ) [ <int> ] . getOpType ( ) , is ( <str> ) ) ; assertThat ( bulkItemResponse . getItems ( ) [ <int> ] . getOpType ( ) , is ( <str> ) ) ; assertThat ( bulkItemResponse . getItems ( ) [ <int> ] . getOpType ( ) , is ( <str> ) ) ; assertThat ( bulkItemResponse . getItems ( ) [ <int> ] . getOpType ( ) , is ( <str> ) ) ; assertThat ( bulkItemResponse . getItems ( ) [ <int> ] . getOpType ( ) , is ( <str> ) ) ; assertThat ( bulkItemResponse . getItems ( ) [ <int> ] . getOpType ( ) , is ( <str> ) ) ; } private static String indexOrAlias ( ) { return randomBoolean ( ) ? <str> : <str> ; } public void testThatMissingIndexDoesNotAbortFullBulkRequest ( ) throws Exception { createIndex ( <str> , <str> ) ; ensureYellow ( ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; bulkRequest . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> , <str> ) ) . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> , <str> ) ) . add ( new IndexRequest ( <str> , <str> ) . source ( <str> , <str> ) ) . add ( new UpdateRequest ( <str> , <str> , <str> ) . doc ( <str> , <str> ) ) . add ( new DeleteRequest ( <str> , <str> , <str> ) ) . refresh ( true ) ; client ( ) . bulk ( bulkRequest ) . get ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) ) ; BulkResponse bulkResponse = client ( ) . bulk ( bulkRequest ) . get ( ) ; assertThat ( bulkResponse . hasFailures ( ) , is ( true ) ) ; assertThat ( bulkResponse . getItems ( ) . length , is ( <int> ) ) ; } public void testFailedRequestsOnClosedIndex ( ) throws Exception { createIndex ( <str> ) ; ensureYellow ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) ) ; BulkRequest bulkRequest = new BulkRequest ( ) ; bulkRequest . add ( new IndexRequest ( <str> , <str> , <str> ) . source ( <str> , <str> ) ) . add ( new UpdateRequest ( <str> , <str> , <str> ) . doc ( <str> , <str> ) ) . add ( new DeleteRequest ( <str> , <str> , <str> ) ) . refresh ( true ) ; BulkResponse bulkResponse = client ( ) . bulk ( bulkRequest ) . get ( ) ; assertThat ( bulkResponse . hasFailures ( ) , is ( true ) ) ; BulkItemResponse [ ] responseItems = bulkResponse . getItems ( ) ; assertThat ( responseItems . length , is ( <int> ) ) ; assertThat ( responseItems [ <int> ] . getOpType ( ) , is ( <str> ) ) ; assertThat ( responseItems [ <int> ] . getOpType ( ) , is ( <str> ) ) ; assertThat ( responseItems [ <int> ] . getOpType ( ) , is ( <str> ) ) ; } public void testInvalidIndexNamesCorrectOpType ( ) { BulkResponse bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setSource ( <str> , <int> ) ) . add ( client ( ) . prepareUpdate ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setDoc ( <str> , randomInt ( ) ) ) . add ( client ( ) . prepareDelete ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) ) . get ( ) ; assertThat ( bulkResponse . getItems ( ) . length , is ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getOpType ( ) , is ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getOpType ( ) , is ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getOpType ( ) , is ( <str> ) ) ; } } 

package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; @GwtCompatible public class TransposedTableTest extends AbstractTableTest { @Override protected Table < String , Integer , Character > create ( Object . . . data ) { Table < Integer , String , Character > original = HashBasedTable . create ( ) ; Table < String , Integer , Character > table = Tables . transpose ( original ) ; table . clear ( ) ; populate ( table , data ) ; return table ; } public void testTransposeTransposed ( ) { Table < Integer , String , Character > original = HashBasedTable . create ( ) ; assertSame ( original , Tables . transpose ( Tables . transpose ( original ) ) ) ; } public void testPutOriginalModifiesTranspose ( ) { Table < Integer , String , Character > original = HashBasedTable . create ( ) ; Table < String , Integer , Character > transpose = Tables . transpose ( original ) ; original . put ( <int> , <str> , <str> ) ; assertEquals ( ( Character ) <str> , transpose . get ( <str> , <int> ) ) ; } public void testPutTransposeModifiesOriginal ( ) { Table < Integer , String , Character > original = HashBasedTable . create ( ) ; Table < String , Integer , Character > transpose = Tables . transpose ( original ) ; transpose . put ( <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , original . get ( <int> , <str> ) ) ; } public void testTransposedViews ( ) { Table < Integer , String , Character > original = HashBasedTable . create ( ) ; Table < String , Integer , Character > transpose = Tables . transpose ( original ) ; original . put ( <int> , <str> , <str> ) ; assertSame ( original . columnKeySet ( ) , transpose . rowKeySet ( ) ) ; assertSame ( original . rowKeySet ( ) , transpose . columnKeySet ( ) ) ; assertSame ( original . columnMap ( ) , transpose . rowMap ( ) ) ; assertSame ( original . rowMap ( ) , transpose . columnMap ( ) ) ; assertSame ( original . values ( ) , transpose . values ( ) ) ; assertEquals ( original . row ( <int> ) , transpose . column ( <int> ) ) ; assertEquals ( original . row ( <int> ) , transpose . column ( <int> ) ) ; assertEquals ( original . column ( <str> ) , transpose . row ( <str> ) ) ; assertEquals ( original . column ( <str> ) , transpose . row ( <str> ) ) ; } } 

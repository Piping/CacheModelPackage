package org . elasticsearch . rest . action . admin . indices . open ; import org . elasticsearch . action . admin . indices . open . OpenIndexRequest ; import org . elasticsearch . action . admin . indices . open . OpenIndexResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; public class RestOpenIndexAction extends BaseRestHandler { @Inject public RestOpenIndexAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( RestRequest . Method . POST , <str> , this ) ; controller . registerHandler ( RestRequest . Method . POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { OpenIndexRequest openIndexRequest = new OpenIndexRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; openIndexRequest . timeout ( request . paramAsTime ( <str> , openIndexRequest . timeout ( ) ) ) ; openIndexRequest . masterNodeTimeout ( request . paramAsTime ( <str> , openIndexRequest . masterNodeTimeout ( ) ) ) ; openIndexRequest . indicesOptions ( IndicesOptions . fromRequest ( request , openIndexRequest . indicesOptions ( ) ) ) ; client . admin ( ) . indices ( ) . open ( openIndexRequest , new AcknowledgedRestListener < OpenIndexResponse > ( channel ) ) ; } } 

package io . netty . handler . codec . http2 . hpack ; import org . junit . Assert ; import org . junit . Test ; import java . io . ByteArrayOutputStream ; import java . io . DataOutputStream ; import java . io . IOException ; import java . util . Arrays ; import java . util . Random ; public class HuffmanTest { @Test public void testHuffman ( ) throws IOException { String s = <str> ; for ( int i = <int> ; i < s . length ( ) ; i + + ) { roundTrip ( s . substring ( <int> , i ) ) ; } Random random = new Random ( <int> ) ; byte [ ] buf = new byte [ <int> ] ; random . nextBytes ( buf ) ; roundTrip ( buf ) ; } @Test ( expected = IOException . class ) public void testDecodeEOS ( ) throws IOException { byte [ ] buf = new byte [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) { buf [ i ] = ( byte ) <hex> ; } Huffman . DECODER . decode ( buf ) ; } @Test ( expected = IOException . class ) public void testDecodeIllegalPadding ( ) throws IOException { byte [ ] buf = new byte [ <int> ] ; buf [ <int> ] = <hex> ; Huffman . DECODER . decode ( buf ) ; } @Test public void testDecodeExtraPadding ( ) throws IOException { byte [ ] buf = new byte [ <int> ] ; buf [ <int> ] = <hex> ; buf [ <int> ] = ( byte ) <hex> ; Huffman . DECODER . decode ( buf ) ; } private void roundTrip ( String s ) throws IOException { roundTrip ( Huffman . ENCODER , Huffman . DECODER , s ) ; } private static void roundTrip ( HuffmanEncoder encoder , HuffmanDecoder decoder , String s ) throws IOException { roundTrip ( encoder , decoder , s . getBytes ( ) ) ; } private void roundTrip ( byte [ ] buf ) throws IOException { roundTrip ( Huffman . ENCODER , Huffman . DECODER , buf ) ; } private static void roundTrip ( HuffmanEncoder encoder , HuffmanDecoder decoder , byte [ ] buf ) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream dos = new DataOutputStream ( baos ) ; encoder . encode ( dos , buf ) ; byte [ ] actualBytes = decoder . decode ( baos . toByteArray ( ) ) ; Assert . assertTrue ( Arrays . equals ( buf , actualBytes ) ) ; } } 

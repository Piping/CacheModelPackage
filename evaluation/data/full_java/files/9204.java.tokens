package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . VisibleForTesting ; import java . io . Serializable ; import java . util . Collection ; import java . util . Queue ; @Beta @GwtCompatible public final class EvictingQueue < E > extends ForwardingQueue < E > implements Serializable { private final Queue < E > delegate ; @VisibleForTesting final int maxSize ; private EvictingQueue ( int maxSize ) { checkArgument ( maxSize > = <int> , <str> , maxSize ) ; this . delegate = Platform . newFastestDeque ( maxSize ) ; this . maxSize = maxSize ; } public static < E > EvictingQueue < E > create ( int maxSize ) { return new EvictingQueue < E > ( maxSize ) ; } public int remainingCapacity ( ) { return maxSize - size ( ) ; } @Override protected Queue < E > delegate ( ) { return delegate ; } @Override public boolean offer ( E e ) { return add ( e ) ; } @Override public boolean add ( E e ) { checkNotNull ( e ) ; if ( maxSize = = <int> ) { return true ; } if ( size ( ) = = maxSize ) { delegate . remove ( ) ; } delegate . add ( e ) ; return true ; } @Override public boolean addAll ( Collection < ? extends E > collection ) { return standardAddAll ( collection ) ; } @Override public boolean contains ( Object object ) { return delegate ( ) . contains ( checkNotNull ( object ) ) ; } @Override public boolean remove ( Object object ) { return delegate ( ) . remove ( checkNotNull ( object ) ) ; } private static final long serialVersionUID = <int> L ; } 

package com . google . common . primitives ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; @GwtCompatible ( emulated = true ) public class BytesTest extends TestCase { private static final byte [ ] EMPTY = { } ; private static final byte [ ] ARRAY1 = { ( byte ) <int> } ; private static final byte [ ] ARRAY234 = { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } ; private static final byte [ ] VALUES = { Byte . MIN_VALUE , - <int> , <int> , <int> , Byte . MAX_VALUE } ; public void testHashCode ( ) { for ( byte value : VALUES ) { assertEquals ( ( ( Byte ) value ) . hashCode ( ) , Bytes . hashCode ( value ) ) ; } } public void testContains ( ) { assertFalse ( Bytes . contains ( EMPTY , ( byte ) <int> ) ) ; assertFalse ( Bytes . contains ( ARRAY1 , ( byte ) <int> ) ) ; assertFalse ( Bytes . contains ( ARRAY234 , ( byte ) <int> ) ) ; assertTrue ( Bytes . contains ( new byte [ ] { ( byte ) - <int> } , ( byte ) - <int> ) ) ; assertTrue ( Bytes . contains ( ARRAY234 , ( byte ) <int> ) ) ; assertTrue ( Bytes . contains ( ARRAY234 , ( byte ) <int> ) ) ; assertTrue ( Bytes . contains ( ARRAY234 , ( byte ) <int> ) ) ; } public void testIndexOf ( ) { assertEquals ( - <int> , Bytes . indexOf ( EMPTY , ( byte ) <int> ) ) ; assertEquals ( - <int> , Bytes . indexOf ( ARRAY1 , ( byte ) <int> ) ) ; assertEquals ( - <int> , Bytes . indexOf ( ARRAY234 , ( byte ) <int> ) ) ; assertEquals ( <int> , Bytes . indexOf ( new byte [ ] { ( byte ) - <int> } , ( byte ) - <int> ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY234 , ( byte ) <int> ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY234 , ( byte ) <int> ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY234 , ( byte ) <int> ) ) ; assertEquals ( <int> , Bytes . indexOf ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , ( byte ) <int> ) ) ; } public void testIndexOf_arrayTarget ( ) { assertEquals ( <int> , Bytes . indexOf ( EMPTY , EMPTY ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY234 , EMPTY ) ) ; assertEquals ( - <int> , Bytes . indexOf ( EMPTY , ARRAY234 ) ) ; assertEquals ( - <int> , Bytes . indexOf ( ARRAY234 , ARRAY1 ) ) ; assertEquals ( - <int> , Bytes . indexOf ( ARRAY1 , ARRAY234 ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY1 , ARRAY1 ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY234 , ARRAY234 ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY234 , new byte [ ] { ( byte ) <int> , ( byte ) <int> } ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY234 , new byte [ ] { ( byte ) <int> , ( byte ) <int> } ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY234 , new byte [ ] { ( byte ) <int> } ) ) ; assertEquals ( <int> , Bytes . indexOf ( ARRAY234 , new byte [ ] { ( byte ) <int> } ) ) ; assertEquals ( <int> , Bytes . indexOf ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , new byte [ ] { ( byte ) <int> } ) ) ; assertEquals ( <int> , Bytes . indexOf ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } ) ) ; assertEquals ( <int> , Bytes . indexOf ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } ) ) ; assertEquals ( - <int> , Bytes . indexOf ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } ) ) ; } public void testLastIndexOf ( ) { assertEquals ( - <int> , Bytes . lastIndexOf ( EMPTY , ( byte ) <int> ) ) ; assertEquals ( - <int> , Bytes . lastIndexOf ( ARRAY1 , ( byte ) <int> ) ) ; assertEquals ( - <int> , Bytes . lastIndexOf ( ARRAY234 , ( byte ) <int> ) ) ; assertEquals ( <int> , Bytes . lastIndexOf ( new byte [ ] { ( byte ) - <int> } , ( byte ) - <int> ) ) ; assertEquals ( <int> , Bytes . lastIndexOf ( ARRAY234 , ( byte ) <int> ) ) ; assertEquals ( <int> , Bytes . lastIndexOf ( ARRAY234 , ( byte ) <int> ) ) ; assertEquals ( <int> , Bytes . lastIndexOf ( ARRAY234 , ( byte ) <int> ) ) ; assertEquals ( <int> , Bytes . lastIndexOf ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , ( byte ) <int> ) ) ; } public void testConcat ( ) { assertTrue ( Arrays . equals ( EMPTY , Bytes . concat ( ) ) ) ; assertTrue ( Arrays . equals ( EMPTY , Bytes . concat ( EMPTY ) ) ) ; assertTrue ( Arrays . equals ( EMPTY , Bytes . concat ( EMPTY , EMPTY , EMPTY ) ) ) ; assertTrue ( Arrays . equals ( ARRAY1 , Bytes . concat ( ARRAY1 ) ) ) ; assertNotSame ( ARRAY1 , Bytes . concat ( ARRAY1 ) ) ; assertTrue ( Arrays . equals ( ARRAY1 , Bytes . concat ( EMPTY , ARRAY1 , EMPTY ) ) ) ; assertTrue ( Arrays . equals ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , Bytes . concat ( ARRAY1 , ARRAY1 , ARRAY1 ) ) ) ; assertTrue ( Arrays . equals ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , Bytes . concat ( ARRAY1 , ARRAY234 ) ) ) ; } public void testEnsureCapacity ( ) { assertSame ( EMPTY , Bytes . ensureCapacity ( EMPTY , <int> , <int> ) ) ; assertSame ( ARRAY1 , Bytes . ensureCapacity ( ARRAY1 , <int> , <int> ) ) ; assertSame ( ARRAY1 , Bytes . ensureCapacity ( ARRAY1 , <int> , <int> ) ) ; assertTrue ( Arrays . equals ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , Bytes . ensureCapacity ( ARRAY1 , <int> , <int> ) ) ) ; } @SuppressWarnings ( <str> ) public void testEnsureCapacity_fail ( ) { try { Bytes . ensureCapacity ( ARRAY1 , - <int> , <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { Bytes . ensureCapacity ( ARRAY1 , <int> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testToArray ( ) { List < Byte > none = Arrays . < Byte > asList ( ) ; assertTrue ( Arrays . equals ( EMPTY , Bytes . toArray ( none ) ) ) ; List < Byte > one = Arrays . asList ( ( byte ) <int> ) ; assertTrue ( Arrays . equals ( ARRAY1 , Bytes . toArray ( one ) ) ) ; byte [ ] array = { ( byte ) <int> , ( byte ) <int> , ( byte ) <hex> } ; List < Byte > three = Arrays . asList ( ( byte ) <int> , ( byte ) <int> , ( byte ) <hex> ) ; assertTrue ( Arrays . equals ( array , Bytes . toArray ( three ) ) ) ; assertTrue ( Arrays . equals ( array , Bytes . toArray ( Bytes . asList ( array ) ) ) ) ; } public void testToArray_threadSafe ( ) { for ( int delta : new int [ ] { + <int> , <int> , - <int> } ) { for ( int i = <int> ; i < VALUES . length ; i + + ) { List < Byte > list = Bytes . asList ( VALUES ) . subList ( <int> , i ) ; Collection < Byte > misleadingSize = Helpers . misleadingSizeCollection ( delta ) ; misleadingSize . addAll ( list ) ; byte [ ] arr = Bytes . toArray ( misleadingSize ) ; assertEquals ( i , arr . length ) ; for ( int j = <int> ; j < i ; j + + ) { assertEquals ( VALUES [ j ] , arr [ j ] ) ; } } } } @SuppressWarnings ( <str> ) public void testToArray_withNull ( ) { List < Byte > list = Arrays . asList ( ( byte ) <int> , ( byte ) <int> , null ) ; try { Bytes . toArray ( list ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testToArray_withConversion ( ) { byte [ ] array = { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } ; List < Byte > bytes = Arrays . asList ( ( byte ) <int> , ( byte ) <int> , ( byte ) <int> ) ; List < Short > shorts = Arrays . asList ( ( short ) <int> , ( short ) <int> , ( short ) <int> ) ; List < Integer > ints = Arrays . asList ( <int> , <int> , <int> ) ; List < Float > floats = Arrays . asList ( ( float ) <int> , ( float ) <int> , ( float ) <int> ) ; List < Long > longs = Arrays . asList ( ( long ) <int> , ( long ) <int> , ( long ) <int> ) ; List < Double > doubles = Arrays . asList ( ( double ) <int> , ( double ) <int> , ( double ) <int> ) ; assertTrue ( Arrays . equals ( array , Bytes . toArray ( bytes ) ) ) ; assertTrue ( Arrays . equals ( array , Bytes . toArray ( shorts ) ) ) ; assertTrue ( Arrays . equals ( array , Bytes . toArray ( ints ) ) ) ; assertTrue ( Arrays . equals ( array , Bytes . toArray ( floats ) ) ) ; assertTrue ( Arrays . equals ( array , Bytes . toArray ( longs ) ) ) ; assertTrue ( Arrays . equals ( array , Bytes . toArray ( doubles ) ) ) ; } public void testAsList_isAView ( ) { byte [ ] array = { ( byte ) <int> , ( byte ) <int> } ; List < Byte > list = Bytes . asList ( array ) ; list . set ( <int> , ( byte ) <int> ) ; assertTrue ( Arrays . equals ( new byte [ ] { ( byte ) <int> , ( byte ) <int> } , array ) ) ; array [ <int> ] = ( byte ) <int> ; assertEquals ( Arrays . asList ( ( byte ) <int> , ( byte ) <int> ) , list ) ; } public void testAsList_toArray_roundTrip ( ) { byte [ ] array = { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } ; List < Byte > list = Bytes . asList ( array ) ; byte [ ] newArray = Bytes . toArray ( list ) ; list . set ( <int> , ( byte ) <int> ) ; assertTrue ( Arrays . equals ( new byte [ ] { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } , newArray ) ) ; newArray [ <int> ] = ( byte ) <int> ; assertEquals ( ( byte ) <int> , ( byte ) list . get ( <int> ) ) ; } public void testAsList_subList_toArray_roundTrip ( ) { byte [ ] array = { ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> } ; List < Byte > list = Bytes . asList ( array ) ; assertTrue ( Arrays . equals ( new byte [ ] { ( byte ) <int> , ( byte ) <int> } , Bytes . toArray ( list . subList ( <int> , <int> ) ) ) ) ; assertTrue ( Arrays . equals ( new byte [ ] { } , Bytes . toArray ( list . subList ( <int> , <int> ) ) ) ) ; } public void testAsListEmpty ( ) { assertSame ( Collections . emptyList ( ) , Bytes . asList ( EMPTY ) ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Bytes . class ) ; } } 

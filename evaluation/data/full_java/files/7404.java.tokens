package org . elasticsearch . search . aggregations . pipeline . bucketmetrics . stats . extended ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . search . aggregations . pipeline . BucketHelpers . GapPolicy ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorFactory ; import org . elasticsearch . search . aggregations . pipeline . bucketmetrics . BucketMetricsParser ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . text . ParseException ; import java . util . Map ; public class ExtendedStatsBucketParser extends BucketMetricsParser { static final ParseField SIGMA = new ParseField ( <str> ) ; @Override public String type ( ) { return ExtendedStatsBucketPipelineAggregator . TYPE . name ( ) ; } @Override protected PipelineAggregatorFactory buildFactory ( String pipelineAggregatorName , String [ ] bucketsPaths , GapPolicy gapPolicy , ValueFormatter formatter , Map < String , Object > unparsedParams ) throws ParseException { double sigma = <float> ; Object param = unparsedParams . get ( SIGMA . getPreferredName ( ) ) ; if ( param ! = null ) { if ( param instanceof Double ) { sigma = ( Double ) param ; unparsedParams . remove ( SIGMA . getPreferredName ( ) ) ; } else { throw new ParseException ( <str> + SIGMA . getPreferredName ( ) + <str> + param . getClass ( ) . getSimpleName ( ) + <str> , <int> ) ; } } return new ExtendedStatsBucketPipelineAggregator . Factory ( pipelineAggregatorName , bucketsPaths , sigma , gapPolicy , formatter ) ; } } 

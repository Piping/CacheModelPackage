package com . google . common . collect ; import java . util . HashMap ; import java . util . Map ; import javax . annotation . Nullable ; public final class HashBiMap < K , V > extends AbstractBiMap < K , V > { public static < K , V > HashBiMap < K , V > create ( ) { return new HashBiMap < K , V > ( ) ; } public static < K , V > HashBiMap < K , V > create ( int expectedSize ) { return new HashBiMap < K , V > ( expectedSize ) ; } public static < K , V > HashBiMap < K , V > create ( Map < ? extends K , ? extends V > map ) { HashBiMap < K , V > bimap = create ( map . size ( ) ) ; bimap . putAll ( map ) ; return bimap ; } private HashBiMap ( ) { super ( new HashMap < K , V > ( ) , new HashMap < V , K > ( ) ) ; } private HashBiMap ( int expectedSize ) { super ( Maps . < K , V > newHashMapWithExpectedSize ( expectedSize ) , Maps . < V , K > newHashMapWithExpectedSize ( expectedSize ) ) ; } @Override public V put ( @Nullable K key , @Nullable V value ) { return super . put ( key , value ) ; } @Override public V forcePut ( @Nullable K key , @Nullable V value ) { return super . forcePut ( key , value ) ; } } 

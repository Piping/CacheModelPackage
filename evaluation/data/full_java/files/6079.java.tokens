package org . elasticsearch . common . util ; import java . lang . reflect . Array ; import java . util . Arrays ; public class ArrayUtils { private ArrayUtils ( ) { } public static int binarySearch ( double [ ] array , double value , double tolerance ) { if ( array . length = = <int> ) { return - <int> ; } return binarySearch ( array , <int> , array . length , value , tolerance ) ; } private static int binarySearch ( double [ ] array , int fromIndex , int toIndex , double value , double tolerance ) { int index = Arrays . binarySearch ( array , fromIndex , toIndex , value ) ; if ( index < <int> ) { final int highIndex = - <int> - index ; final int lowIndex = highIndex - <int> ; double lowError = Double . POSITIVE_INFINITY ; double highError = Double . POSITIVE_INFINITY ; if ( lowIndex > = <int> ) { lowError = value - array [ lowIndex ] ; } if ( highIndex < array . length ) { highError = array [ highIndex ] - value ; } if ( highError < lowError ) { if ( highError < tolerance ) { index = highIndex ; } } else if ( lowError < tolerance ) { index = lowIndex ; } else { index = - <int> ; } } return index ; } public static String [ ] concat ( String [ ] one , String [ ] other ) { return concat ( one , other , String . class ) ; } public static < T > T [ ] concat ( T [ ] one , T [ ] other , Class < T > clazz ) { T [ ] target = ( T [ ] ) Array . newInstance ( clazz , one . length + other . length ) ; System . arraycopy ( one , <int> , target , <int> , one . length ) ; System . arraycopy ( other , <int> , target , one . length , other . length ) ; return target ; } } 

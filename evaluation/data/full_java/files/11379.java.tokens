package org . gradle . api . internal . changedetection . changes ; import org . gradle . api . Action ; import org . gradle . api . internal . changedetection . rules . TaskStateChange ; import org . gradle . api . internal . changedetection . rules . TaskStateChanges ; import org . gradle . api . internal . changedetection . state . FilesSnapshotSet ; import org . gradle . api . tasks . incremental . InputFileDetails ; import java . util . ArrayList ; import java . util . List ; public class ChangesOnlyIncrementalTaskInputs extends StatefulIncrementalTaskInputs { private final TaskStateChanges inputFilesState ; private List < InputFileDetails > removedFiles = new ArrayList < InputFileDetails > ( ) ; public ChangesOnlyIncrementalTaskInputs ( TaskStateChanges inputFilesState , FilesSnapshotSet inputFilesSnapshot ) { super ( inputFilesSnapshot ) ; this . inputFilesState = inputFilesState ; } public boolean isIncremental ( ) { return true ; } @Override protected void doOutOfDate ( final Action < ? super InputFileDetails > outOfDateAction ) { for ( TaskStateChange change : inputFilesState ) { InputFileDetails fileChange = ( InputFileDetails ) change ; if ( fileChange . isRemoved ( ) ) { removedFiles . add ( fileChange ) ; } else { outOfDateAction . execute ( fileChange ) ; } } } @Override protected void doRemoved ( Action < ? super InputFileDetails > removedAction ) { for ( InputFileDetails removedFile : removedFiles ) { removedAction . execute ( removedFile ) ; } } } 

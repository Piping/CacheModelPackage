package org . elasticsearch . common . util ; import org . apache . lucene . util . ArrayUtil ; import org . apache . lucene . util . RamUsageEstimator ; import java . util . Arrays ; import static org . elasticsearch . common . util . BigArrays . LONG_PAGE_SIZE ; final class BigDoubleArray extends AbstractBigArray implements DoubleArray { private long [ ] [ ] pages ; public BigDoubleArray ( long size , BigArrays bigArrays , boolean clearOnResize ) { super ( LONG_PAGE_SIZE , bigArrays , clearOnResize ) ; this . size = size ; pages = new long [ numPages ( size ) ] [ ] ; for ( int i = <int> ; i < pages . length ; + + i ) { pages [ i ] = newLongPage ( i ) ; } } @Override public double get ( long index ) { final int pageIndex = pageIndex ( index ) ; final int indexInPage = indexInPage ( index ) ; return Double . longBitsToDouble ( pages [ pageIndex ] [ indexInPage ] ) ; } @Override public double set ( long index , double value ) { final int pageIndex = pageIndex ( index ) ; final int indexInPage = indexInPage ( index ) ; final long [ ] page = pages [ pageIndex ] ; final double ret = Double . longBitsToDouble ( page [ indexInPage ] ) ; page [ indexInPage ] = Double . doubleToRawLongBits ( value ) ; return ret ; } @Override public double increment ( long index , double inc ) { final int pageIndex = pageIndex ( index ) ; final int indexInPage = indexInPage ( index ) ; final long [ ] page = pages [ pageIndex ] ; return page [ indexInPage ] = Double . doubleToRawLongBits ( Double . longBitsToDouble ( page [ indexInPage ] ) + inc ) ; } @Override protected int numBytesPerElement ( ) { return RamUsageEstimator . NUM_BYTES_INT ; } @Override public void resize ( long newSize ) { final int numPages = numPages ( newSize ) ; if ( numPages > pages . length ) { pages = Arrays . copyOf ( pages , ArrayUtil . oversize ( numPages , RamUsageEstimator . NUM_BYTES_OBJECT_REF ) ) ; } for ( int i = numPages - <int> ; i > = <int> & & pages [ i ] = = null ; - - i ) { pages [ i ] = newLongPage ( i ) ; } for ( int i = numPages ; i < pages . length & & pages [ i ] ! = null ; + + i ) { pages [ i ] = null ; releasePage ( i ) ; } this . size = newSize ; } @Override public void fill ( long fromIndex , long toIndex , double value ) { if ( fromIndex > toIndex ) { throw new IllegalArgumentException ( ) ; } final long longBits = Double . doubleToRawLongBits ( value ) ; final int fromPage = pageIndex ( fromIndex ) ; final int toPage = pageIndex ( toIndex - <int> ) ; if ( fromPage = = toPage ) { Arrays . fill ( pages [ fromPage ] , indexInPage ( fromIndex ) , indexInPage ( toIndex - <int> ) + <int> , longBits ) ; } else { Arrays . fill ( pages [ fromPage ] , indexInPage ( fromIndex ) , pages [ fromPage ] . length , longBits ) ; for ( int i = fromPage + <int> ; i < toPage ; + + i ) { Arrays . fill ( pages [ i ] , longBits ) ; } Arrays . fill ( pages [ toPage ] , <int> , indexInPage ( toIndex - <int> ) + <int> , longBits ) ; } } } 

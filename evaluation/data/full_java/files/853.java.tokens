package org . apache . cassandra . repair ; import java . net . InetAddress ; import java . util . concurrent . RunnableFuture ; import java . util . concurrent . TimeUnit ; import com . google . common . util . concurrent . AbstractFuture ; import org . apache . cassandra . net . IAsyncCallbackWithFailure ; import org . apache . cassandra . net . MessageIn ; import org . apache . cassandra . net . MessagingService ; import org . apache . cassandra . repair . messages . SnapshotMessage ; public class SnapshotTask extends AbstractFuture < InetAddress > implements RunnableFuture < InetAddress > { private final RepairJobDesc desc ; private final InetAddress endpoint ; public SnapshotTask ( RepairJobDesc desc , InetAddress endpoint ) { this . desc = desc ; this . endpoint = endpoint ; } public void run ( ) { MessagingService . instance ( ) . sendRR ( new SnapshotMessage ( desc ) . createMessage ( ) , endpoint , new SnapshotCallback ( this ) , TimeUnit . HOURS . toMillis ( <int> ) , true ) ; } static class SnapshotCallback implements IAsyncCallbackWithFailure { final SnapshotTask task ; SnapshotCallback ( SnapshotTask task ) { this . task = task ; } public void response ( MessageIn msg ) { task . set ( task . endpoint ) ; } public boolean isLatencyForSnitch ( ) { return false ; } public void onFailure ( InetAddress from ) { task . setException ( new RuntimeException ( <str> + from ) ) ; } } } 

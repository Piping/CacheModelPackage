package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttribute ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . glutils . FloatFrameBuffer ; import com . badlogic . gdx . graphics . glutils . FrameBuffer ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . tests . utils . GdxTest ; public class FloatTextureTest extends GdxTest { FrameBuffer fb ; FloatFrameBuffer ffb ; ShaderProgram fbshader , shader ; Texture texture ; Mesh quad , screenQuad ; OrthographicCamera screenCamera ; @Override public void create ( ) { fb = new FrameBuffer ( Format . RGBA8888 , <int> , <int> , false ) ; ffb = new FloatFrameBuffer ( <int> , <int> , false ) ; String vertexShader = <str> + <str> + <str> + <str> + <str> + <str> ; String fragmentShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; fbshader = new ShaderProgram ( vertexShader , fragmentShader ) ; vertexShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; fragmentShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; shader = new ShaderProgram ( vertexShader , fragmentShader ) ; createQuad ( ) ; screenCamera = new OrthographicCamera ( Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; createScreenQuad ( ) ; } public void render ( ) { Gdx . gl20 . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl20 . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; fb . begin ( ) ; fbshader . begin ( ) ; fbshader . setUniformf ( <str> , fb . getWidth ( ) , fb . getHeight ( ) ) ; fbshader . setUniformf ( <str> , <float> , <float> , <float> ) ; quad . render ( fbshader , GL20 . GL_TRIANGLES ) ; fbshader . end ( ) ; fb . end ( ) ; ffb . begin ( ) ; fbshader . begin ( ) ; fbshader . setUniformf ( <str> , ffb . getWidth ( ) , ffb . getHeight ( ) ) ; fbshader . setUniformf ( <str> , <float> , <float> , <float> ) ; quad . render ( fbshader , GL20 . GL_TRIANGLES ) ; fbshader . end ( ) ; ffb . end ( ) ; shader . begin ( ) ; fb . getColorBufferTexture ( ) . bind ( <int> ) ; ffb . getColorBufferTexture ( ) . bind ( <int> ) ; shader . setUniformMatrix ( <str> , screenCamera . combined ) ; shader . setUniformi ( <str> , <int> ) ; shader . setUniformi ( <str> , <int> ) ; screenQuad . render ( shader , GL20 . GL_TRIANGLES ) ; shader . end ( ) ; } private void createQuad ( ) { if ( quad ! = null ) return ; quad = new Mesh ( true , <int> , <int> , new VertexAttribute ( Usage . Position , <int> , <str> ) , new VertexAttribute ( Usage . ColorUnpacked , <int> , <str> ) , new VertexAttribute ( Usage . TextureCoordinates , <int> , <str> ) ) ; quad . setVertices ( new float [ ] { - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ) ; quad . setIndices ( new short [ ] { <int> , <int> , <int> , <int> , <int> , <int> } ) ; } private void createScreenQuad ( ) { if ( screenQuad ! = null ) return ; screenQuad = new Mesh ( true , <int> , <int> , new VertexAttribute ( Usage . Position , <int> , <str> ) , new VertexAttribute ( Usage . ColorUnpacked , <int> , <str> ) , new VertexAttribute ( Usage . TextureCoordinates , <int> , <str> ) ) ; Vector3 vec0 = new Vector3 ( <int> , <int> , <int> ) ; screenCamera . unproject ( vec0 ) ; Vector3 vec1 = new Vector3 ( Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) , <int> ) ; screenCamera . unproject ( vec1 ) ; screenQuad . setVertices ( new float [ ] { vec0 . x , vec0 . y , <int> , <int> , <int> , <int> , <int> , <int> , <int> , vec1 . x , vec0 . y , <int> , <int> , <int> , <int> , <int> , <int> , <int> , vec1 . x , vec1 . y , <int> , <int> , <int> , <int> , <int> , <int> , <int> , vec0 . x , vec1 . y , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ) ; screenQuad . setIndices ( new short [ ] { <int> , <int> , <int> , <int> , <int> , <int> } ) ; } } 

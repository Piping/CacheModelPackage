package org . eclipse . debug . ui . actions ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import org . eclipse . core . expressions . Expression ; import org . eclipse . core . expressions . IEvaluationContext ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . actions . LaunchConfigurationAction ; import org . eclipse . debug . internal . ui . actions . LaunchShortcutAction ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationManager ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchShortcutExtension ; import org . eclipse . debug . internal . ui . stringsubstitution . SelectedResourceManager ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IMenuCreator ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . MenuAdapter ; import org . eclipse . swt . events . MenuEvent ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . MenuItem ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . IObjectActionDelegate ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . activities . WorkbenchActivityHelper ; public abstract class ContextualLaunchAction implements IObjectActionDelegate , IMenuCreator { private IAction fDelegateAction ; private String fMode ; private ILaunchGroup fGroup = null ; private Map < String , ILaunchGroup > fGroupsByCategory = null ; private boolean fFillMenu = true ; public ContextualLaunchAction ( String mode ) { fMode = mode ; ILaunchGroup [ ] groups = DebugUITools . getLaunchGroups ( ) ; fGroupsByCategory = new HashMap < String , ILaunchGroup > ( <int> ) ; for ( int i = <int> ; i < groups . length ; i + + ) { ILaunchGroup group = groups [ i ] ; if ( group . getMode ( ) . equals ( mode ) ) { if ( group . getCategory ( ) = = null ) { fGroup = group ; } else { fGroupsByCategory . put ( group . getCategory ( ) , group ) ; } } } } @Override public void setActivePart ( IAction action , IWorkbenchPart targetPart ) { } @Override public void dispose ( ) { } @Override public Menu getMenu ( Control parent ) { return null ; } @Override public Menu getMenu ( Menu parent ) { Menu menu = new Menu ( parent ) ; menu . addMenuListener ( new MenuAdapter ( ) { @Override public void menuShown ( MenuEvent e ) { if ( fFillMenu ) { Menu m = ( Menu ) e . widget ; MenuItem [ ] items = m . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { items [ i ] . dispose ( ) ; } fillMenu ( m ) ; fFillMenu = false ; } } } ) ; return menu ; } @Override public void run ( IAction action ) { } @Override public void selectionChanged ( IAction action , ISelection selection ) { if ( selection instanceof IStructuredSelection ) { fFillMenu = true ; if ( fDelegateAction ! = action ) { fDelegateAction = action ; fDelegateAction . setMenuCreator ( this ) ; } action . setEnabled ( true ) ; return ; } action . setEnabled ( false ) ; } protected ILaunchManager getLaunchManager ( ) { return DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; } protected void fillMenu ( Menu menu ) { IStructuredSelection ss = SelectedResourceManager . getDefault ( ) . getCurrentSelection ( ) ; int accelerator = <int> ; if ( ! ss . isEmpty ( ) ) { try { ILaunchConfiguration config = getLaunchConfigurationManager ( ) . isSharedConfig ( ss . getFirstElement ( ) ) ; if ( config ! = null & & config . exists ( ) & & config . supportsMode ( fMode ) ) { IAction action = new LaunchConfigurationAction ( config , fMode , config . getName ( ) , DebugUITools . getDefaultImageDescriptor ( config ) , accelerator + + ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( menu , - <int> ) ; } } catch ( CoreException ce ) { } } List < Object > selection = ss . toList ( ) ; Object o = ss . getFirstElement ( ) ; if ( o instanceof IEditorPart ) { selection . set ( <int> , ( ( IEditorPart ) o ) . getEditorInput ( ) ) ; } IEvaluationContext context = DebugUIPlugin . createEvaluationContext ( selection ) ; context . setAllowPluginActivation ( true ) ; context . addVariable ( <str> , selection ) ; List < LaunchShortcutExtension > allShortCuts = getLaunchConfigurationManager ( ) . getLaunchShortcuts ( ) ; List < LaunchShortcutExtension > filteredShortCuts = new ArrayList < LaunchShortcutExtension > ( ) ; Iterator < LaunchShortcutExtension > iter = allShortCuts . iterator ( ) ; while ( iter . hasNext ( ) ) { LaunchShortcutExtension ext = iter . next ( ) ; try { if ( ! WorkbenchActivityHelper . filterItem ( ext ) & & isApplicable ( ext , context ) ) { filteredShortCuts . add ( ext ) ; } } catch ( CoreException e ) { IStatus status = new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <str> + ext . getId ( ) + <str> , e ) ; DebugUIPlugin . log ( status ) ; iter . remove ( ) ; } } if ( menu . getItemCount ( ) > <int> & & filteredShortCuts . size ( ) > <int> ) { new MenuItem ( menu , SWT . SEPARATOR ) ; } List < String > categories = new ArrayList < String > ( ) ; for ( LaunchShortcutExtension ext : filteredShortCuts ) { for ( String mode : ext . getModes ( ) ) { if ( mode . equals ( fMode ) ) { String category = ext . getCategory ( ) ; if ( category ! = null & & ! categories . contains ( category ) ) { categories . add ( category ) ; } populateMenuItem ( mode , ext , menu , accelerator + + ) ; } } } if ( categories . isEmpty ( ) ) { if ( accelerator > <int> ) { new MenuItem ( menu , SWT . SEPARATOR ) ; } IAction action = new OpenLaunchDialogAction ( fGroup . getIdentifier ( ) ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( menu , - <int> ) ; } else { boolean addedSep = false ; for ( String category : categories ) { ILaunchGroup group = fGroup ; if ( category ! = null ) { group = fGroupsByCategory . get ( category ) ; } if ( group ! = null ) { if ( accelerator > <int> & & ! addedSep ) { new MenuItem ( menu , SWT . SEPARATOR ) ; addedSep = true ; } IAction action = new OpenLaunchDialogAction ( group . getIdentifier ( ) ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( menu , - <int> ) ; } } } } private boolean isApplicable ( LaunchShortcutExtension ext , IEvaluationContext context ) throws CoreException { Expression expr = ext . getContextualLaunchEnablementExpression ( ) ; return ext . evalEnablementExpression ( context , expr ) ; } private void populateMenuItem ( String mode , LaunchShortcutExtension ext , Menu menu , int accelerator ) { LaunchShortcutAction action = new LaunchShortcutAction ( mode , ext ) ; action . setActionDefinitionId ( ext . getId ( ) + <str> + mode ) ; String helpContextId = ext . getHelpContextId ( ) ; if ( helpContextId ! = null ) { PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( action , helpContextId ) ; } StringBuffer label = new StringBuffer ( ) ; if ( accelerator > = <int> & & accelerator < <int> ) { label . append ( <str> ) ; label . append ( accelerator ) ; label . append ( <str> ) ; } String contextLabel = ext . getContextLabel ( mode ) ; label . append ( ( contextLabel ! = null ) ? contextLabel : action . getText ( ) ) ; action . setText ( label . toString ( ) ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( menu , - <int> ) ; } private LaunchConfigurationManager getLaunchConfigurationManager ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; } } 

package com . google . common . testing ; import static com . google . common . base . Preconditions . checkNotNull ; import static junit . framework . Assert . assertEquals ; import static junit . framework . Assert . assertTrue ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Equivalence ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Lists ; import com . google . common . testing . RelationshipTester . ItemReporter ; import java . util . List ; @Beta @GwtCompatible public final class EquivalenceTester < T > { private static final int REPETITIONS = <int> ; private final Equivalence < ? super T > equivalence ; private final RelationshipTester < T > delegate ; private final List < T > items = Lists . newArrayList ( ) ; private EquivalenceTester ( Equivalence < ? super T > equivalence ) { this . equivalence = checkNotNull ( equivalence ) ; this . delegate = new RelationshipTester < T > ( equivalence , <str> , <str> , new ItemReporter ( ) ) ; } public static < T > EquivalenceTester < T > of ( Equivalence < ? super T > equivalence ) { return new EquivalenceTester < T > ( equivalence ) ; } public EquivalenceTester < T > addEquivalenceGroup ( T first , T . . . rest ) { addEquivalenceGroup ( Lists . asList ( first , rest ) ) ; return this ; } public EquivalenceTester < T > addEquivalenceGroup ( Iterable < T > group ) { delegate . addRelatedGroup ( group ) ; items . addAll ( ImmutableList . copyOf ( group ) ) ; return this ; } public EquivalenceTester < T > test ( ) { for ( int run = <int> ; run < REPETITIONS ; run + + ) { testItems ( ) ; delegate . test ( ) ; } return this ; } private void testItems ( ) { for ( T item : items ) { assertTrue ( item + <str> , ! equivalence . equivalent ( item , null ) ) ; assertTrue ( <str> + item , ! equivalence . equivalent ( null , item ) ) ; assertTrue ( item + <str> , equivalence . equivalent ( item , item ) ) ; assertEquals ( <str> + item + <str> , equivalence . hash ( item ) , equivalence . hash ( item ) ) ; } } } 

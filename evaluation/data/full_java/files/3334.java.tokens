package org . nd4j . linalg . jcublas . buffer . allocation ; import org . nd4j . linalg . jcublas . context . ContextHolder ; import org . nd4j . linalg . jcublas . context . GpuInformation ; import java . util . ArrayList ; import java . util . List ; import static jcuda . driver . CUdevice_attribute . * ; public class MemoryStrategies { public enum MemoryMode { PINNED , PAGEABLE_ARRAY , PAGEABLE_DIRECT_BUFFER , } public static MemoryMode getMode ( int device ) { GpuInformation info = ContextHolder . getInstance ( ) . getInfoFor ( device ) ; if ( info . getCanMapHostMemory ( ) > <int> ) { return MemoryMode . PINNED ; } return MemoryMode . PAGEABLE_DIRECT_BUFFER ; } public static MemoryStrategy getStrategy ( MemoryMode mode ) { switch ( mode ) { case PINNED : return new PinnedMemoryStrategy ( ) ; case PAGEABLE_ARRAY : return new PageableArrayMemoryStrategy ( ) ; case PAGEABLE_DIRECT_BUFFER : return new PageableDirectBufferMemoryStrategy ( ) ; default : throw new IllegalStateException ( <str> + mode ) ; } } public static MemoryStrategy getStrategy ( int device ) { return getStrategy ( getMode ( device ) ) ; } private static String getAttributeDescription ( int attribute ) { switch ( attribute ) { case CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK : return <str> ; case CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY : return <str> ; case CU_DEVICE_ATTRIBUTE_WARP_SIZE : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_PITCH : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK : return <str> ; case CU_DEVICE_ATTRIBUTE_CLOCK_RATE : return <str> ; case CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT : return <str> ; case CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT : return <str> ; case CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT : return <str> ; case CU_DEVICE_ATTRIBUTE_INTEGRATED : return <str> ; case CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY : return <str> ; case CU_DEVICE_ATTRIBUTE_COMPUTE_MODE : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS : return <str> ; case CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT : return <str> ; case CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS : return <str> ; case CU_DEVICE_ATTRIBUTE_ECC_ENABLED : return <str> ; case CU_DEVICE_ATTRIBUTE_PCI_BUS_ID : return <str> ; case CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID : return <str> ; case CU_DEVICE_ATTRIBUTE_TCC_DRIVER : return <str> ; case CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE : return <str> ; case CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH : return <str> ; case CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE : return <str> ; case CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR : return <str> ; case CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT : return <str> ; case CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH : return <str> ; case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS : return <str> ; case CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID : return <str> ; } return <str> ; } private static List < Integer > getAttributes ( ) { List < Integer > list = new ArrayList < > ( ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK ) ; list . add ( CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY ) ; list . add ( CU_DEVICE_ATTRIBUTE_WARP_SIZE ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_PITCH ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK ) ; list . add ( CU_DEVICE_ATTRIBUTE_CLOCK_RATE ) ; list . add ( CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT ) ; list . add ( CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT ) ; list . add ( CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT ) ; list . add ( CU_DEVICE_ATTRIBUTE_INTEGRATED ) ; list . add ( CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY ) ; list . add ( CU_DEVICE_ATTRIBUTE_COMPUTE_MODE ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS ) ; list . add ( CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT ) ; list . add ( CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS ) ; list . add ( CU_DEVICE_ATTRIBUTE_ECC_ENABLED ) ; list . add ( CU_DEVICE_ATTRIBUTE_PCI_BUS_ID ) ; list . add ( CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID ) ; list . add ( CU_DEVICE_ATTRIBUTE_TCC_DRIVER ) ; list . add ( CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE ) ; list . add ( CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH ) ; list . add ( CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR ) ; list . add ( CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT ) ; list . add ( CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH ) ; list . add ( CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS ) ; list . add ( CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID ) ; return list ; } } 

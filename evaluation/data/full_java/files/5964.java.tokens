package org . elasticsearch . common . logging . log4j ; import org . apache . log4j . PropertyConfigurator ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . bootstrap . BootstrapInfo ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsException ; import org . elasticsearch . env . Environment ; import java . io . IOException ; import java . nio . file . FileVisitOption ; import java . nio . file . FileVisitResult ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . SimpleFileVisitor ; import java . nio . file . attribute . BasicFileAttributes ; import java . util . Arrays ; import java . util . EnumSet ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Properties ; import static java . util . Collections . unmodifiableMap ; import static org . elasticsearch . common . Strings . cleanPath ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; public class LogConfigurator { static final List < String > ALLOWED_SUFFIXES = Arrays . asList ( <str> , <str> , <str> , <str> ) ; private static final Map < String , String > REPLACEMENTS ; static { Map < String , String > replacements = new HashMap < > ( ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; replacements . put ( <str> , <str> ) ; REPLACEMENTS = unmodifiableMap ( replacements ) ; } private static boolean loaded ; public static void configure ( Settings settings , boolean resolveConfig ) { if ( loaded ) { return ; } loaded = true ; Environment environment = new Environment ( settings ) ; Settings . Builder settingsBuilder = settingsBuilder ( ) ; if ( resolveConfig ) { resolveConfig ( environment , settingsBuilder ) ; } settingsBuilder . putProperties ( <str> , BootstrapInfo . getSystemProperties ( ) ) . putProperties ( <str> , BootstrapInfo . getSystemProperties ( ) ) ; settingsBuilder . put ( settings ) ; settingsBuilder . replacePropertyPlaceholders ( ) ; Properties props = new Properties ( ) ; for ( Map . Entry < String , String > entry : settingsBuilder . build ( ) . getAsMap ( ) . entrySet ( ) ) { String key = <str> + entry . getKey ( ) ; String value = entry . getValue ( ) ; value = REPLACEMENTS . getOrDefault ( value , value ) ; if ( key . endsWith ( <str> ) ) { props . setProperty ( key . substring ( <int> , key . length ( ) - <str> . length ( ) ) , value ) ; } else if ( key . endsWith ( <str> ) ) { props . setProperty ( key . substring ( <int> , key . length ( ) - <str> . length ( ) ) , value ) ; } else { props . setProperty ( key , value ) ; } } props . setProperty ( <str> , cleanPath ( environment . logsFile ( ) . toAbsolutePath ( ) . toString ( ) ) ) ; PropertyConfigurator . configure ( props ) ; } static void reset ( ) { loaded = false ; } static void resolveConfig ( Environment env , final Settings . Builder settingsBuilder ) { try { Files . walkFileTree ( env . configFile ( ) , EnumSet . of ( FileVisitOption . FOLLOW_LINKS ) , Integer . MAX_VALUE , new SimpleFileVisitor < Path > ( ) { @Override public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { String fileName = file . getFileName ( ) . toString ( ) ; if ( fileName . startsWith ( <str> ) ) { for ( String allowedSuffix : ALLOWED_SUFFIXES ) { if ( fileName . endsWith ( allowedSuffix ) ) { loadConfig ( file , settingsBuilder ) ; break ; } } } return FileVisitResult . CONTINUE ; } } ) ; } catch ( IOException ioe ) { throw new ElasticsearchException ( <str> , ioe ) ; } } static void loadConfig ( Path file , Settings . Builder settingsBuilder ) { try { settingsBuilder . loadFromPath ( file ) ; } catch ( SettingsException | NoClassDefFoundError e ) { } } } 

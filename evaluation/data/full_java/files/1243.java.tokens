package org . apache . cassandra . utils ; import org . hyperic . sigar . * ; import org . slf4j . LoggerFactory ; import org . slf4j . Logger ; public class SigarLibrary { private Logger logger = LoggerFactory . getLogger ( SigarLibrary . class ) ; private Sigar sigar ; private FileSystemMap mounts = null ; private boolean initialized = false ; private long INFINITY = - <int> ; private long EXPECTED_MIN_NOFILE = <int> ; private long EXPECTED_NPROC = <int> ; private long EXPECTED_AS = INFINITY ; public SigarLibrary ( ) { logger . info ( <str> ) ; try { sigar = new Sigar ( ) ; mounts = sigar . getFileSystemMap ( ) ; initialized = true ; } catch ( SigarException e ) { logger . info ( <str> , e . getMessage ( ) ) ; } catch ( UnsatisfiedLinkError linkError ) { logger . info ( <str> , linkError . getMessage ( ) ) ; } } public boolean initialized ( ) { return initialized ; } private boolean hasAcceptableProcNumber ( ) { try { long fileMax = sigar . getResourceLimit ( ) . getProcessesMax ( ) ; if ( fileMax > = EXPECTED_NPROC | | fileMax = = INFINITY ) { return true ; } else { return false ; } } catch ( SigarException sigarException ) { logger . warn ( <str> , sigarException ) ; return false ; } } private boolean hasAcceptableFileLimits ( ) { try { long fileMax = sigar . getResourceLimit ( ) . getOpenFilesMax ( ) ; if ( fileMax > = EXPECTED_MIN_NOFILE | | fileMax = = INFINITY ) { return true ; } else { return false ; } } catch ( SigarException sigarException ) { logger . warn ( <str> , sigarException ) ; return false ; } } private boolean hasAcceptableAddressSpace ( ) { if ( FBUtilities . isWindows ( ) ) return true ; try { long fileMax = sigar . getResourceLimit ( ) . getVirtualMemoryMax ( ) ; if ( fileMax = = EXPECTED_AS ) { return true ; } else { return false ; } } catch ( SigarException sigarException ) { logger . warn ( <str> , sigarException ) ; return false ; } } private boolean isSwapEnabled ( ) { try { Swap swap = sigar . getSwap ( ) ; long swapSize = swap . getTotal ( ) ; if ( swapSize > <int> ) { return true ; } else { return false ; } } catch ( SigarException sigarException ) { logger . warn ( <str> , sigarException ) ; return false ; } } public void warnIfRunningInDegradedMode ( ) { if ( initialized ) { boolean swapEnabled = isSwapEnabled ( ) ; boolean goodAddressSpace = hasAcceptableAddressSpace ( ) ; boolean goodFileLimits = hasAcceptableFileLimits ( ) ; boolean goodProcNumber = hasAcceptableProcNumber ( ) ; if ( swapEnabled | | ! goodAddressSpace | | ! goodFileLimits | | ! goodProcNumber ) { logger . warn ( <str> + <str> , ! swapEnabled , goodAddressSpace , goodFileLimits , goodProcNumber ) ; } else { logger . info ( <str> ) ; } } else { logger . info ( <str> ) ; } } } 

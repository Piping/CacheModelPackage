package org . junit . tests . experimental . categories ; import static org . hamcrest . CoreMatchers . is ; import static org . junit . Assert . assertThat ; import java . util . List ; import org . junit . After ; import org . junit . AfterClass ; import org . junit . Before ; import org . junit . BeforeClass ; import org . junit . Test ; import org . junit . experimental . categories . Category ; import org . junit . experimental . categories . CategoryValidator ; import org . junit . runners . model . FrameworkMethod ; import org . junit . runners . model . TestClass ; public class CategoryValidatorTest { public static class SampleCategory { } public static class CategoryTest { @BeforeClass @Category ( value = SampleCategory . class ) public static void methodWithCategoryAndBeforeClass ( ) { } @AfterClass @Category ( value = SampleCategory . class ) public static void methodWithCategoryAndAfterClass ( ) { } @Before @Category ( value = SampleCategory . class ) public static void methodWithCategoryAndBefore ( ) { } @After @Category ( value = SampleCategory . class ) public static void methodWithCategoryAndAfter ( ) { } @Category ( value = SampleCategory . class ) public static void methodWithCategory ( ) { } } @Test public void errorIsAddedWhenCategoryIsUsedWithBeforeClass ( ) { FrameworkMethod method = new TestClass ( CategoryTest . class ) . getAnnotatedMethods ( BeforeClass . class ) . get ( <int> ) ; testAndAssertErrorMessage ( method , <str> ) ; } @Test public void errorIsAddedWhenCategoryIsUsedWithAfterClass ( ) { FrameworkMethod method = new TestClass ( CategoryTest . class ) . getAnnotatedMethods ( AfterClass . class ) . get ( <int> ) ; testAndAssertErrorMessage ( method , <str> ) ; } @Test public void errorIsAddedWhenCategoryIsUsedWithBefore ( ) { FrameworkMethod method = new TestClass ( CategoryTest . class ) . getAnnotatedMethods ( Before . class ) . get ( <int> ) ; testAndAssertErrorMessage ( method , <str> ) ; } @Test public void errorIsAddedWhenCategoryIsUsedWithAfter ( ) { FrameworkMethod method = new TestClass ( CategoryTest . class ) . getAnnotatedMethods ( After . class ) . get ( <int> ) ; testAndAssertErrorMessage ( method , <str> ) ; } private void testAndAssertErrorMessage ( FrameworkMethod method , String expectedErrorMessage ) { List < Exception > errors = new CategoryValidator ( ) . validateAnnotatedMethod ( method ) ; assertThat ( errors . size ( ) , is ( <int> ) ) ; Exception exception = errors . get ( <int> ) ; assertThat ( exception . getMessage ( ) , is ( expectedErrorMessage ) ) ; } @Test public void errorIsNotAddedWhenCategoryIsNotCombinedWithIllegalCombination ( ) throws NoSuchMethodException { FrameworkMethod method = new FrameworkMethod ( CategoryTest . class . getMethod ( <str> ) ) ; List < Exception > errors = new CategoryValidator ( ) . validateAnnotatedMethod ( method ) ; assertThat ( errors . size ( ) , is ( <int> ) ) ; } } 

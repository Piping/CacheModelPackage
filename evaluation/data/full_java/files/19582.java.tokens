package io . netty . handler . codec . socksx . v5 ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . NetUtil ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import org . junit . Test ; import sun . net . util . IPAddressUtil ; import java . net . IDN ; import java . util . Arrays ; import static org . junit . Assert . * ; public class Socks5CommandRequestDecoderTest { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( Socks5CommandRequestDecoderTest . class ) ; private static void test ( Socks5CommandType type , Socks5AddressType dstAddrType , String dstAddr , int dstPort ) { logger . debug ( <str> + type + <str> + dstAddrType + <str> + dstAddr + <str> + dstPort ) ; Socks5CommandRequest msg = new DefaultSocks5CommandRequest ( type , dstAddrType , dstAddr , dstPort ) ; EmbeddedChannel embedder = new EmbeddedChannel ( new Socks5CommandRequestDecoder ( ) ) ; Socks5CommonTestUtils . writeFromClientToServer ( embedder , msg ) ; msg = embedder . readInbound ( ) ; assertSame ( msg . type ( ) , type ) ; assertSame ( msg . dstAddrType ( ) , dstAddrType ) ; assertEquals ( msg . dstAddr ( ) , IDN . toASCII ( dstAddr ) ) ; assertEquals ( msg . dstPort ( ) , dstPort ) ; assertNull ( embedder . readInbound ( ) ) ; } @Test public void testCmdRequestDecoderIPv4 ( ) { String [ ] hosts = { <str> , } ; int [ ] ports = { <int> , <int> , <int> } ; for ( Socks5CommandType cmdType : Arrays . asList ( Socks5CommandType . BIND , Socks5CommandType . CONNECT , Socks5CommandType . UDP_ASSOCIATE ) ) { for ( String host : hosts ) { for ( int port : ports ) { test ( cmdType , Socks5AddressType . IPv4 , host , port ) ; } } } } @Test public void testCmdRequestDecoderIPv6 ( ) { String [ ] hosts = { NetUtil . bytesToIpAddress ( IPAddressUtil . textToNumericFormatV6 ( <str> ) , <int> , <int> ) } ; int [ ] ports = { <int> , <int> , <int> } ; for ( Socks5CommandType cmdType : Arrays . asList ( Socks5CommandType . BIND , Socks5CommandType . CONNECT , Socks5CommandType . UDP_ASSOCIATE ) ) { for ( String host : hosts ) { for ( int port : ports ) { test ( cmdType , Socks5AddressType . IPv6 , host , port ) ; } } } } @Test public void testCmdRequestDecoderDomain ( ) { String [ ] hosts = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; int [ ] ports = { <int> , <int> , <int> } ; for ( Socks5CommandType cmdType : Arrays . asList ( Socks5CommandType . BIND , Socks5CommandType . CONNECT , Socks5CommandType . UDP_ASSOCIATE ) ) { for ( String host : hosts ) { for ( int port : ports ) { test ( cmdType , Socks5AddressType . DOMAIN , host , port ) ; } } } } } 

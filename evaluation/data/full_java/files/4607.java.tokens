package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . math . BigInteger ; import org . eclipse . debug . core . model . MemoryByte ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; public class HexIntegerRendering extends AbstractIntegerRendering { public HexIntegerRendering ( String renderingId ) { super ( renderingId ) ; } @Override public String getString ( String dataType , BigInteger address , MemoryByte [ ] data ) { StringBuffer strBuffer = new StringBuffer ( ) ; int endianess = getEndianness ( data ) ; String paddedStr = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( IDebugUIConstants . PREF_PADDED_STR ) ; if ( endianess = = RenderingsUtil . LITTLE_ENDIAN ) { MemoryByte [ ] swapped = new MemoryByte [ data . length ] ; for ( int i = <int> ; i < data . length ; i + + ) { swapped [ data . length - i - <int> ] = data [ i ] ; } data = swapped ; } for ( int i = <int> ; i < data . length ; i + + ) { if ( data [ i ] . isReadable ( ) ) { strBuffer . append ( new String ( RenderingsUtil . convertByteToCharArray ( data [ i ] . getValue ( ) ) ) ) ; } else { strBuffer . append ( paddedStr ) ; } } return strBuffer . toString ( ) . toUpperCase ( ) ; } private int getEndianness ( MemoryByte [ ] data ) { int endianess = getDisplayEndianess ( ) ; if ( endianess = = RenderingsUtil . ENDIANESS_UNKNOWN ) endianess = getBytesEndianess ( data ) ; return endianess ; } @Override public byte [ ] getBytes ( String dataType , BigInteger address , MemoryByte [ ] currentValues , String data ) { int endianess = getEndianness ( currentValues ) ; byte [ ] bytes = RenderingsUtil . convertHexStringToByteArray ( data , currentValues . length , getNumCharsPerByte ( ) ) ; if ( endianess = = RenderingsUtil . LITTLE_ENDIAN ) { byte [ ] swapped = new byte [ bytes . length ] ; for ( int i = <int> ; i < bytes . length ; i + + ) { swapped [ bytes . length - i - <int> ] = bytes [ i ] ; } bytes = swapped ; } return bytes ; } @Override public int getNumCharsPerByte ( ) { return <int> ; } } 

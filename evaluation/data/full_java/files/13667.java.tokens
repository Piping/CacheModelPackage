package org . gradle . language . nativeplatform . internal . incremental ; import org . gradle . api . internal . changedetection . state . TaskArtifactStateCacheAccess ; import org . gradle . cache . PersistentIndexedCache ; import org . gradle . cache . PersistentStateCache ; public class DefaultCompilationStateCacheFactory implements CompilationStateCacheFactory { private final PersistentIndexedCache < String , CompilationState > compilationStateIndexedCache ; public DefaultCompilationStateCacheFactory ( TaskArtifactStateCacheAccess cacheAccess ) { compilationStateIndexedCache = cacheAccess . createCache ( <str> , String . class , new CompilationStateSerializer ( ) ) ; } public PersistentStateCache < CompilationState > create ( final String taskPath ) { return new PersistentCompilationStateCache ( taskPath , compilationStateIndexedCache ) ; } private static class PersistentCompilationStateCache implements PersistentStateCache < CompilationState > { private final String taskPath ; private final PersistentIndexedCache < String , CompilationState > compilationStateIndexedCache ; public PersistentCompilationStateCache ( String taskPath , PersistentIndexedCache < String , CompilationState > compilationStateIndexedCache ) { this . taskPath = taskPath ; this . compilationStateIndexedCache = compilationStateIndexedCache ; } public CompilationState get ( ) { return compilationStateIndexedCache . get ( taskPath ) ; } public void set ( CompilationState newValue ) { compilationStateIndexedCache . put ( taskPath , newValue ) ; } public void update ( UpdateAction < CompilationState > updateAction ) { throw new UnsupportedOperationException ( ) ; } } } 

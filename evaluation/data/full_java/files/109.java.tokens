package org . apache . cassandra . concurrent ; import java . util . Arrays ; import com . google . common . base . Predicate ; import com . google . common . collect . Iterables ; public enum Stage { READ , MUTATION , COUNTER_MUTATION , VIEW_MUTATION , GOSSIP , REQUEST_RESPONSE , ANTI_ENTROPY , MIGRATION , MISC , TRACING , INTERNAL_RESPONSE , READ_REPAIR ; public static Iterable < Stage > jmxEnabledStages ( ) { return Iterables . filter ( Arrays . asList ( values ( ) ) , new Predicate < Stage > ( ) { public boolean apply ( Stage stage ) { return stage ! = TRACING ; } } ) ; } public String getJmxType ( ) { switch ( this ) { case ANTI_ENTROPY : case GOSSIP : case MIGRATION : case MISC : case TRACING : case INTERNAL_RESPONSE : return <str> ; case MUTATION : case COUNTER_MUTATION : case VIEW_MUTATION : case READ : case REQUEST_RESPONSE : case READ_REPAIR : return <str> ; default : throw new AssertionError ( <str> + this ) ; } } public String getJmxName ( ) { String name = <str> ; for ( String word : toString ( ) . split ( <str> ) ) { name + = word . substring ( <int> , <int> ) + word . substring ( <int> ) . toLowerCase ( ) ; } return name + <str> ; } } 

package org . nd4j . linalg . learning ; import lombok . Data ; import lombok . NoArgsConstructor ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import java . io . Serializable ; @Data @NoArgsConstructor public class Nesterovs implements Serializable , GradientUpdater { private double momentum = <float> ; private INDArray v ; private double learningRate = <float> ; public Nesterovs ( double momentum , double learningRate ) { this . momentum = momentum ; this . learningRate = learningRate ; } public Nesterovs ( double momentum ) { this . momentum = momentum ; } @Override public void update ( Object . . . args ) { if ( args . length > <int> ) { learningRate = ( Double ) args [ <int> ] ; momentum = ( Double ) args [ <int> ] ; } } @Override public INDArray getGradient ( INDArray gradient , int iteration ) { if ( v = = null ) v = Nd4j . zeros ( gradient . shape ( ) ) ; INDArray vPrev = v ; v = vPrev . mul ( momentum ) . subi ( gradient . mul ( learningRate ) ) ; INDArray ret = vPrev . muli ( momentum ) . addi ( v . mul ( - momentum - <int> ) ) ; return ret ; } @Override public GradientUpdaterAggregator getAggregator ( boolean addThis ) { NesterovsAggregator ag = new NesterovsAggregator ( ) ; if ( addThis ) ag . aggregate ( this ) ; return ag ; } public static class NesterovsAggregator implements GradientUpdaterAggregator { private INDArray vSum ; private double lrSum ; private double momentumSum ; private int count = <int> ; @Override public GradientUpdater getUpdater ( ) { Nesterovs nesterovs = new Nesterovs ( momentumSum / count , lrSum / count ) ; nesterovs . setV ( vSum . div ( count ) ) ; return nesterovs ; } @Override public void aggregate ( GradientUpdater updater ) { if ( ! ( updater instanceof Nesterovs ) ) throw new UnsupportedOperationException ( <str> + updater ) ; Nesterovs nesterovs = ( Nesterovs ) updater ; if ( vSum = = null ) { vSum = nesterovs . v . dup ( ) ; lrSum = nesterovs . learningRate ; momentumSum = nesterovs . momentum ; } else { vSum . addi ( nesterovs . v ) ; lrSum + = nesterovs . learningRate ; momentumSum + = nesterovs . momentum ; } count + + ; } @Override public GradientUpdaterAggregator combine ( GradientUpdaterAggregator other ) { if ( ! ( other instanceof NesterovsAggregator ) ) throw new IllegalArgumentException ( <str> + other ) ; NesterovsAggregator aggregator = ( NesterovsAggregator ) other ; vSum . addi ( aggregator . vSum ) ; lrSum + = aggregator . lrSum ; momentumSum + = aggregator . momentumSum ; count + = aggregator . count ; return this ; } } } 

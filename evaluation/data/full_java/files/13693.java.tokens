package org . gradle . language . objectivec . plugins ; import com . google . common . collect . Maps ; import org . gradle . api . Incubating ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . language . base . internal . SourceTransformTaskConfig ; import org . gradle . language . base . internal . registry . LanguageTransformContainer ; import org . gradle . language . base . plugins . ComponentModelBasePlugin ; import org . gradle . nativeplatform . internal . DefaultPreprocessingTool ; import org . gradle . language . nativeplatform . internal . NativeLanguageTransform ; import org . gradle . language . nativeplatform . internal . PCHCompileTaskConfig ; import org . gradle . language . nativeplatform . internal . SourceCompileTaskConfig ; import org . gradle . language . objectivec . ObjectiveCSourceSet ; import org . gradle . language . objectivec . internal . DefaultObjectiveCSourceSet ; import org . gradle . language . objectivec . tasks . ObjectiveCCompile ; import org . gradle . language . objectivec . tasks . ObjectiveCPreCompiledHeaderCompile ; import org . gradle . model . Mutate ; import org . gradle . model . RuleSource ; import org . gradle . nativeplatform . internal . pch . PchEnabledLanguageTransform ; import org . gradle . platform . base . LanguageType ; import org . gradle . platform . base . LanguageTypeBuilder ; import java . util . Map ; @Incubating public class ObjectiveCLangPlugin implements Plugin < Project > { public void apply ( final Project project ) { project . getPluginManager ( ) . apply ( ComponentModelBasePlugin . class ) ; } @SuppressWarnings ( <str> ) static class Rules extends RuleSource { @LanguageType void registerLanguage ( LanguageTypeBuilder < ObjectiveCSourceSet > builder ) { builder . setLanguageName ( <str> ) ; builder . defaultImplementation ( DefaultObjectiveCSourceSet . class ) ; } @Mutate void registerLanguageTransform ( LanguageTransformContainer languages , ServiceRegistry serviceRegistry ) { languages . add ( new ObjectiveC ( ) ) ; } } private static class ObjectiveC extends NativeLanguageTransform < ObjectiveCSourceSet > implements PchEnabledLanguageTransform < ObjectiveCSourceSet > { public Class < ObjectiveCSourceSet > getSourceSetType ( ) { return ObjectiveCSourceSet . class ; } public Map < String , Class < ? > > getBinaryTools ( ) { Map < String , Class < ? > > tools = Maps . newLinkedHashMap ( ) ; tools . put ( <str> , DefaultPreprocessingTool . class ) ; return tools ; } public SourceTransformTaskConfig getTransformTask ( ) { return new SourceCompileTaskConfig ( this , ObjectiveCCompile . class ) ; } public SourceTransformTaskConfig getPchTransformTask ( ) { return new PCHCompileTaskConfig ( this , ObjectiveCPreCompiledHeaderCompile . class ) ; } } } 

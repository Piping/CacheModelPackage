package org . nd4j . linalg . slicing ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; public class SlicingTests extends BaseNd4jTest { public SlicingTests ( ) { } public SlicingTests ( String name ) { super ( name ) ; } public SlicingTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public SlicingTests ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testSlices ( ) { INDArray arr = Nd4j . create ( Nd4j . linspace ( <int> , <int> , <int> ) . data ( ) , new int [ ] { <int> , <int> , <int> } ) ; for ( int i = <int> ; i < arr . slices ( ) ; i + + ) { INDArray slice = arr . slice ( i ) . slice ( <int> ) ; int slices = slice . slices ( ) ; assertEquals ( <int> , slices ) ; } } @Test public void testSlice ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray assertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } , { <int> , <int> } } ) ; INDArray firstSlice = arr . slice ( <int> ) ; INDArray slice1Assertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } , { <int> , <int> } , } ) ; INDArray secondSlice = arr . slice ( <int> ) ; assertEquals ( assertion , firstSlice ) ; assertEquals ( slice1Assertion , secondSlice ) ; } @Override public char ordering ( ) { return <str> ; } } 

package io . netty . example . worldclock ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . Channel ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . util . InsecureTrustManagerFactory ; import java . util . Arrays ; import java . util . List ; public final class WorldClockClient { static final boolean SSL = System . getProperty ( <str> ) ! = null ; static final String HOST = System . getProperty ( <str> , <str> ) ; static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; static final List < String > CITIES = Arrays . asList ( System . getProperty ( <str> , <str> ) . split ( <str> ) ) ; public static void main ( String [ ] args ) throws Exception { final SslContext sslCtx ; if ( SSL ) { sslCtx = SslContextBuilder . forClient ( ) . trustManager ( InsecureTrustManagerFactory . INSTANCE ) . build ( ) ; } else { sslCtx = null ; } EventLoopGroup group = new NioEventLoopGroup ( ) ; try { Bootstrap b = new Bootstrap ( ) ; b . group ( group ) . channel ( NioSocketChannel . class ) . handler ( new WorldClockClientInitializer ( sslCtx ) ) ; Channel ch = b . connect ( HOST , PORT ) . sync ( ) . channel ( ) ; WorldClockClientHandler handler = ch . pipeline ( ) . get ( WorldClockClientHandler . class ) ; List < String > response = handler . getLocalTimes ( CITIES ) ; ch . close ( ) ; for ( int i = <int> ; i < CITIES . size ( ) ; i + + ) { System . out . format ( <str> , CITIES . get ( i ) , response . get ( i ) ) ; } } finally { group . shutdownGracefully ( ) ; } } } 

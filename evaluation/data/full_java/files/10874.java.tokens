package org . gradle . internal . reflect ; import com . google . common . collect . Lists ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . * ; public class ClassInspector { public static ClassDetails inspect ( Class < ? > type ) { MutableClassDetails classDetails = new MutableClassDetails ( type ) ; visitGraph ( type , classDetails ) ; return classDetails ; } private static void visitGraph ( Class < ? > type , MutableClassDetails classDetails ) { Set < Class < ? > > seen = new HashSet < Class < ? > > ( ) ; List < Class < ? > > queue = new ArrayList < Class < ? > > ( ) ; queue . add ( type ) ; Collections . addAll ( queue , superClasses ( type ) ) ; while ( ! queue . isEmpty ( ) ) { Class < ? > current = queue . remove ( <int> ) ; if ( ! seen . add ( current ) ) { continue ; } if ( ! current . equals ( type ) ) { classDetails . superType ( current ) ; } inspectClass ( current , classDetails ) ; Collections . addAll ( queue , current . getInterfaces ( ) ) ; } } private static Class < ? > [ ] superClasses ( Class < ? > current ) { List < Class < ? > > supers = Lists . newArrayList ( ) ; Class < ? > superclass = current . getSuperclass ( ) ; while ( superclass ! = null & & superclass ! = Object . class ) { supers . add ( superclass ) ; superclass = superclass . getSuperclass ( ) ; } return supers . toArray ( new Class < ? > [ supers . size ( ) ] ) ; } private static void inspectClass ( Class < ? > type , MutableClassDetails classDetails ) { for ( Method method : type . getDeclaredMethods ( ) ) { classDetails . method ( method ) ; if ( Modifier . isPrivate ( method . getModifiers ( ) ) | | Modifier . isStatic ( method . getModifiers ( ) ) | | method . isBridge ( ) ) { continue ; } Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; String methodName = method . getName ( ) ; if ( methodName . startsWith ( <str> ) & & methodName . length ( ) > <int> & & ! method . getReturnType ( ) . equals ( Void . TYPE ) & & parameterTypes . length = = <int> ) { String propertyName = propertyName ( methodName , <int> ) ; classDetails . property ( propertyName ) . addGetter ( method ) ; } else if ( methodName . startsWith ( <str> ) & & methodName . length ( ) > <int> & & ( method . getReturnType ( ) . equals ( Boolean . class ) | | method . getReturnType ( ) . equals ( Boolean . TYPE ) ) & & parameterTypes . length = = <int> ) { String propertyName = propertyName ( methodName , <int> ) ; classDetails . property ( propertyName ) . addGetter ( method ) ; } else if ( methodName . startsWith ( <str> ) & & methodName . length ( ) > <int> & & parameterTypes . length = = <int> ) { String propertyName = propertyName ( methodName , <int> ) ; classDetails . property ( propertyName ) . addSetter ( method ) ; } else { classDetails . instanceMethod ( method ) ; } } } private static String propertyName ( String methodName , int beginIndex ) { String propertyName = methodName . substring ( beginIndex ) ; if ( Character . isUpperCase ( propertyName . charAt ( <int> ) ) & & propertyName . length ( ) > <int> & & Character . isUpperCase ( propertyName . charAt ( <int> ) ) ) { return propertyName ; } return Character . toLowerCase ( propertyName . charAt ( <int> ) ) + propertyName . substring ( <int> ) ; } } 

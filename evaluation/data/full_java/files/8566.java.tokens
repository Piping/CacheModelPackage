package org . elasticsearch . transport ; import org . elasticsearch . Version ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; public class TransportMessageTests extends ESTestCase { public void testSerialization ( ) throws Exception { Message message = new Message ( ) ; message . putHeader ( <str> , <str> ) ; message . putHeader ( <str> , <str> ) ; message . putInContext ( <str> , <str> ) ; BytesStreamOutput out = new BytesStreamOutput ( ) ; out . setVersion ( Version . CURRENT ) ; message . writeTo ( out ) ; StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ; in . setVersion ( Version . CURRENT ) ; message = new Message ( ) ; message . readFrom ( in ) ; assertThat ( message . getHeaders ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( String ) message . getHeader ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ( String ) message . getHeader ( <str> ) , equalTo ( <str> ) ) ; assertThat ( message . isContextEmpty ( ) , is ( true ) ) ; String key1 = message . getHeader ( <str> ) ; assertThat ( key1 , is ( <str> ) ) ; } public void testCopyHeadersAndContext ( ) throws Exception { Message m1 = new Message ( ) ; m1 . putHeader ( <str> , <str> ) ; m1 . putHeader ( <str> , <str> ) ; m1 . putInContext ( <str> , <str> ) ; Message m2 = new Message ( m1 ) ; assertThat ( m2 . getHeaders ( ) . size ( ) , is ( <int> ) ) ; assertThat ( ( String ) m2 . getHeader ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ( String ) m2 . getHeader ( <str> ) , equalTo ( <str> ) ) ; assertThat ( ( String ) m2 . getFromContext ( <str> ) , equalTo ( <str> ) ) ; String key3 = m2 . getFromContext ( <str> ) ; assertThat ( key3 , is ( <str> ) ) ; testContext ( m2 , <str> , <str> ) ; } private void testContext ( TransportMessage transportMessage , String key , String expectedValue ) { String result = transportMessage . getFromContext ( key ) ; assertThat ( result , is ( expectedValue ) ) ; } private static class Message extends TransportMessage < Message > { private Message ( ) { } private Message ( Message message ) { super ( message ) ; } } } 

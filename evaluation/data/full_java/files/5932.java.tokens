package org . elasticsearch . common . io ; import java . io . CharConversionException ; import java . io . IOException ; import java . io . OutputStream ; import java . io . Writer ; public final class UTF8StreamWriter extends Writer { private OutputStream _outputStream ; private final byte [ ] _bytes ; private int _index ; public UTF8StreamWriter ( ) { _bytes = new byte [ <int> ] ; } public UTF8StreamWriter ( int capacity ) { _bytes = new byte [ capacity ] ; } public UTF8StreamWriter setOutput ( OutputStream out ) { if ( _outputStream ! = null ) throw new IllegalStateException ( <str> ) ; _outputStream = out ; return this ; } public void write ( char c ) throws IOException { if ( ( c < <hex> ) | | ( c > <hex> ) ) { write ( ( int ) c ) ; } else if ( c < <hex> ) { _highSurrogate = c ; } else { int code = ( ( _highSurrogate - <hex> ) < < <int> ) + ( c - <hex> ) + <hex> ; write ( code ) ; } } private char _highSurrogate ; @Override public void write ( int code ) throws IOException { if ( ( code & <hex> ) = = <int> ) { _bytes [ _index ] = ( byte ) code ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } } else { write2 ( code ) ; } } private void write2 ( int c ) throws IOException { if ( ( c & <hex> ) = = <int> ) { _bytes [ _index ] = ( byte ) ( <hex> | ( c > > <int> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( c & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } } else if ( ( c & <hex> ) = = <int> ) { _bytes [ _index ] = ( byte ) ( <hex> | ( c > > <int> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( c & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } } else if ( ( c & <hex> ) = = <int> ) { _bytes [ _index ] = ( byte ) ( <hex> | ( c > > <int> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( c & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } } else if ( ( c & <hex> ) = = <int> ) { _bytes [ _index ] = ( byte ) ( <hex> | ( c > > <int> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( c & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } } else if ( ( c & <hex> ) = = <int> ) { _bytes [ _index ] = ( byte ) ( <hex> | ( c > > <int> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( ( c > > <int> ) & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } _bytes [ _index ] = ( byte ) ( <hex> | ( c & <hex> ) ) ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } } else { throw new CharConversionException ( <str> + Integer . toHexString ( c ) ) ; } } @Override public void write ( char cbuf [ ] , int off , int len ) throws IOException { final int off_plus_len = off + len ; for ( int i = off ; i < off_plus_len ; ) { char c = cbuf [ i + + ] ; if ( c < <hex> ) { _bytes [ _index ] = ( byte ) c ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } } else { write ( c ) ; } } } @Override public void write ( String str , int off , int len ) throws IOException { final int off_plus_len = off + len ; for ( int i = off ; i < off_plus_len ; ) { char c = str . charAt ( i + + ) ; if ( c < <hex> ) { _bytes [ _index ] = ( byte ) c ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } } else { write ( c ) ; } } } public void write ( CharSequence csq ) throws IOException { final int length = csq . length ( ) ; for ( int i = <int> ; i < length ; ) { char c = csq . charAt ( i + + ) ; if ( c < <hex> ) { _bytes [ _index ] = ( byte ) c ; if ( + + _index > = _bytes . length ) { flushBuffer ( ) ; } } else { write ( c ) ; } } } @Override public void flush ( ) throws IOException { flushBuffer ( ) ; _outputStream . flush ( ) ; } @Override public void close ( ) throws IOException { if ( _outputStream ! = null ) { flushBuffer ( ) ; _outputStream . close ( ) ; reset ( ) ; } } private void flushBuffer ( ) throws IOException { if ( _outputStream = = null ) throw new IOException ( <str> ) ; _outputStream . write ( _bytes , <int> , _index ) ; _index = <int> ; } public void reset ( ) { _highSurrogate = <int> ; _index = <int> ; _outputStream = null ; } @Deprecated public UTF8StreamWriter setOutputStream ( OutputStream out ) { return this . setOutput ( out ) ; } } 

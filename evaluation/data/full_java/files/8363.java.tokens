package org . elasticsearch . indices . template ; import org . elasticsearch . action . admin . indices . create . CreateIndexClusterStateUpdateRequest ; import org . elasticsearch . action . admin . indices . mapping . get . GetMappingsResponse ; import org . elasticsearch . cluster . ClusterModule ; import org . elasticsearch . cluster . metadata . IndexTemplateFilter ; import org . elasticsearch . cluster . metadata . IndexTemplateMetaData ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . Collection ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . core . IsNull . notNullValue ; @ClusterScope ( scope = Scope . SUITE ) public class IndexTemplateFilteringIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( TestPlugin . class ) ; } public void testTemplateFiltering ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . preparePutTemplate ( <str> ) . setTemplate ( <str> ) . addMapping ( <str> , <str> , <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutTemplate ( <str> ) . setTemplate ( <str> ) . addMapping ( <str> , <str> , <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutTemplate ( <str> ) . setTemplate ( <str> ) . addMapping ( <str> , <str> , <str> ) . get ( ) ; assertAcked ( prepareCreate ( <str> ) . putHeader ( <str> , <str> ) ) ; GetMappingsResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . get ( ) ; assertThat ( response , notNullValue ( ) ) ; ImmutableOpenMap < String , MappingMetaData > metadata = response . getMappings ( ) . get ( <str> ) ; assertThat ( metadata . size ( ) , is ( <int> ) ) ; assertThat ( metadata . get ( <str> ) , notNullValue ( ) ) ; } public static class TestFilter implements IndexTemplateFilter { @Override public boolean apply ( CreateIndexClusterStateUpdateRequest request , IndexTemplateMetaData template ) { return ( template . name ( ) . equals ( <str> ) | | template . name ( ) . equals ( <str> ) ) & & request . originalMessage ( ) . getHeader ( <str> ) . equals ( <str> ) ; } } public static class TestPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( ClusterModule module ) { module . registerIndexTemplateFilter ( TestFilter . class ) ; } } } 

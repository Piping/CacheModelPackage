package com . badlogic . gdx . physics . bullet . dynamics ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btPoint2PointConstraintFloatData extends BulletBase { private long swigCPtr ; protected btPoint2PointConstraintFloatData ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btPoint2PointConstraintFloatData ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btPoint2PointConstraintFloatData obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; DynamicsJNI . delete_btPoint2PointConstraintFloatData ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setTypeConstraintData ( btTypedConstraintData value ) { DynamicsJNI . btPoint2PointConstraintFloatData_typeConstraintData_set ( swigCPtr , this , btTypedConstraintData . getCPtr ( value ) , value ) ; } public btTypedConstraintData getTypeConstraintData ( ) { long cPtr = DynamicsJNI . btPoint2PointConstraintFloatData_typeConstraintData_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btTypedConstraintData ( cPtr , false ) ; } public void setPivotInA ( btVector3FloatData value ) { DynamicsJNI . btPoint2PointConstraintFloatData_pivotInA_set ( swigCPtr , this , btVector3FloatData . getCPtr ( value ) , value ) ; } public btVector3FloatData getPivotInA ( ) { long cPtr = DynamicsJNI . btPoint2PointConstraintFloatData_pivotInA_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3FloatData ( cPtr , false ) ; } public void setPivotInB ( btVector3FloatData value ) { DynamicsJNI . btPoint2PointConstraintFloatData_pivotInB_set ( swigCPtr , this , btVector3FloatData . getCPtr ( value ) , value ) ; } public btVector3FloatData getPivotInB ( ) { long cPtr = DynamicsJNI . btPoint2PointConstraintFloatData_pivotInB_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3FloatData ( cPtr , false ) ; } public btPoint2PointConstraintFloatData ( ) { this ( DynamicsJNI . new_btPoint2PointConstraintFloatData ( ) , true ) ; } } 

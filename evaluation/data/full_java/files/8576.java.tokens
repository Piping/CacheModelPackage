package org . elasticsearch . tribe ; import org . apache . lucene . util . LuceneTestCase ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . action . admin . cluster . node . info . NodeInfo ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . Requests ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . TransportAddress ; import org . elasticsearch . discovery . MasterNotDiscoveredException ; import org . elasticsearch . discovery . zen . ping . unicast . UnicastZenPing ; import org . elasticsearch . node . Node ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . InternalTestCluster ; import org . elasticsearch . test . NodeConfigurationSource ; import org . elasticsearch . test . TestCluster ; import org . junit . After ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Map ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; @LuceneTestCase.SuppressFileSystems ( <str> ) public class TribeIT extends ESIntegTestCase { public static final String SECOND_CLUSTER_NODE_PREFIX = <str> ; private static InternalTestCluster cluster2 ; private Node tribeNode ; private Client tribeClient ; @BeforeClass public static void setupSecondCluster ( ) throws Exception { ESIntegTestCase . beforeClass ( ) ; NodeConfigurationSource nodeConfigurationSource = new NodeConfigurationSource ( ) { @Override public Settings nodeSettings ( int nodeOrdinal ) { return Settings . builder ( ) . put ( Node . HTTP_ENABLED , false ) . build ( ) ; } @Override public Settings transportClientSettings ( ) { return null ; } } ; cluster2 = new InternalTestCluster ( InternalTestCluster . configuredNodeMode ( ) , randomLong ( ) , createTempDir ( ) , <int> , <int> , Strings . randomBase64UUID ( getRandom ( ) ) , nodeConfigurationSource , <int> , false , SECOND_CLUSTER_NODE_PREFIX , true ) ; cluster2 . beforeTest ( getRandom ( ) , <float> ) ; cluster2 . ensureAtLeastNumDataNodes ( <int> ) ; } @AfterClass public static void tearDownSecondCluster ( ) { if ( cluster2 ! = null ) { try { cluster2 . close ( ) ; } finally { cluster2 = null ; } } } @After public void tearDownTribeNode ( ) throws IOException { if ( cluster2 ! = null ) { try { cluster2 . wipe ( Collections . < String > emptySet ( ) ) ; } finally { cluster2 . afterTest ( ) ; } } if ( tribeNode ! = null ) { tribeNode . close ( ) ; tribeNode = null ; } } private void setupTribeNode ( Settings settings ) { Map < String , String > asMap = internalCluster ( ) . getDefaultSettings ( ) . getAsMap ( ) ; Settings . Builder tribe1Defaults = Settings . builder ( ) ; Settings . Builder tribe2Defaults = Settings . builder ( ) ; for ( Map . Entry < String , String > entry : asMap . entrySet ( ) ) { tribe1Defaults . put ( <str> + entry . getKey ( ) , entry . getValue ( ) ) ; tribe2Defaults . put ( <str> + entry . getKey ( ) , entry . getValue ( ) ) ; } tribe1Defaults . putArray ( <str> + UnicastZenPing . DISCOVERY_ZEN_PING_UNICAST_HOSTS , getUnicastHosts ( internalCluster ( ) . client ( ) ) ) ; tribe1Defaults . putArray ( <str> + UnicastZenPing . DISCOVERY_ZEN_PING_UNICAST_HOSTS , getUnicastHosts ( cluster2 . client ( ) ) ) ; Settings merged = Settings . builder ( ) . put ( <str> , internalCluster ( ) . getClusterName ( ) ) . put ( <str> , cluster2 . getClusterName ( ) ) . put ( <str> , false ) . put ( <str> , false ) . put ( settings ) . put ( tribe1Defaults . build ( ) ) . put ( tribe2Defaults . build ( ) ) . put ( internalCluster ( ) . getDefaultSettings ( ) ) . put ( <str> , <str> ) . build ( ) ; tribeNode = new Node ( merged ) . start ( ) ; tribeClient = tribeNode . client ( ) ; } public void testGlobalReadWriteBlocks ( ) throws Exception { logger . info ( <str> ) ; internalCluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . get ( ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; setupTribeNode ( Settings . builder ( ) . put ( <str> , true ) . put ( <str> , true ) . build ( ) ) ; logger . info ( <str> ) ; awaitSameNodeCounts ( ) ; logger . info ( <str> ) ; awaitIndicesInClusterState ( <str> , <str> ) ; try { tribeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException e ) { } try { tribeClient . admin ( ) . indices ( ) . prepareForceMerge ( <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException e ) { } try { tribeClient . admin ( ) . indices ( ) . prepareForceMerge ( <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException e ) { } } public void testIndexWriteBlocks ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( internalCluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( internalCluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; setupTribeNode ( Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ) ; logger . info ( <str> ) ; awaitSameNodeCounts ( ) ; logger . info ( <str> ) ; awaitIndicesInClusterState ( <str> , <str> , <str> , <str> ) ; tribeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; try { tribeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException e ) { } tribeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; try { tribeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException e ) { } } public void testOnConflictDrop ( ) throws Exception { logger . info ( <str> ) ; assertAcked ( cluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( cluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; setupTribeNode ( Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ) ; logger . info ( <str> ) ; awaitSameNodeCounts ( ) ; logger . info ( <str> ) ; awaitIndicesInClusterState ( <str> , <str> ) ; assertThat ( tribeClient . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getMetaData ( ) . index ( <str> ) . getSettings ( ) . get ( TribeService . TRIBE_NAME ) , equalTo ( <str> ) ) ; assertThat ( tribeClient . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getMetaData ( ) . index ( <str> ) . getSettings ( ) . get ( TribeService . TRIBE_NAME ) , equalTo ( <str> ) ) ; assertThat ( tribeClient . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( false ) ) ; } public void testOnConflictPrefer ( ) throws Exception { testOnConflictPrefer ( randomBoolean ( ) ? <str> : <str> ) ; } private void testOnConflictPrefer ( String tribe ) throws Exception { logger . info ( <str> , tribe ) ; logger . info ( <str> ) ; assertAcked ( internalCluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( internalCluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; setupTribeNode ( Settings . builder ( ) . put ( <str> , <str> + tribe ) . build ( ) ) ; logger . info ( <str> ) ; awaitSameNodeCounts ( ) ; logger . info ( <str> ) ; awaitIndicesInClusterState ( <str> , <str> , <str> ) ; assertThat ( tribeClient . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getMetaData ( ) . index ( <str> ) . getSettings ( ) . get ( TribeService . TRIBE_NAME ) , equalTo ( <str> ) ) ; assertThat ( tribeClient . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getMetaData ( ) . index ( <str> ) . getSettings ( ) . get ( TribeService . TRIBE_NAME ) , equalTo ( <str> ) ) ; assertThat ( tribeClient . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getMetaData ( ) . index ( <str> ) . getSettings ( ) . get ( TribeService . TRIBE_NAME ) , equalTo ( tribe ) ) ; } public void testTribeOnOneCluster ( ) throws Exception { setupTribeNode ( Settings . EMPTY ) ; logger . info ( <str> ) ; assertAcked ( internalCluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; logger . info ( <str> ) ; awaitIndicesInClusterState ( <str> , <str> ) ; logger . info ( <str> ) ; awaitSameNodeCounts ( ) ; assertThat ( tribeClient . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . get ( ) . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; logger . info ( <str> ) ; tribeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; tribeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; tribeClient . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ; logger . info ( <str> ) ; assertHitCount ( tribeClient . prepareSearch ( ) . setSize ( <int> ) . get ( ) , <int> ) ; assertHitCount ( tribeClient . prepareSearch ( ) . get ( ) , <int> ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { ClusterState tribeState = tribeNode . client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( tribeState . getMetaData ( ) . index ( <str> ) . mapping ( <str> ) , notNullValue ( ) ) ; assertThat ( tribeState . getMetaData ( ) . index ( <str> ) . mapping ( <str> ) , notNullValue ( ) ) ; } } ) ; logger . info ( <str> ) ; tribeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; tribeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; assertNoFailures ( tribeClient . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ) ; logger . info ( <str> ) ; assertHitCount ( tribeClient . prepareSearch ( ) . setSize ( <int> ) . get ( ) , <int> ) ; assertHitCount ( tribeClient . prepareSearch ( ) . get ( ) , <int> ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { ClusterState tribeState = tribeNode . client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( tribeState . getMetaData ( ) . index ( <str> ) . mapping ( <str> ) , notNullValue ( ) ) ; assertThat ( tribeState . getMetaData ( ) . index ( <str> ) . mapping ( <str> ) , notNullValue ( ) ) ; assertThat ( tribeState . getMetaData ( ) . index ( <str> ) . mapping ( <str> ) , notNullValue ( ) ) ; assertThat ( tribeState . getMetaData ( ) . index ( <str> ) . mapping ( <str> ) , notNullValue ( ) ) ; } } ) ; logger . info ( <str> ) ; try { tribeClient . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setMasterNodeTimeout ( <str> ) . get ( ) ; fail ( ) ; } catch ( MasterNotDiscoveredException e ) { } logger . info ( <str> ) ; cluster2 . client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) . get ( ) ; awaitIndicesNotInClusterState ( <str> ) ; try { logger . info ( <str> ) ; cluster2 . stopRandomDataNode ( ) ; awaitSameNodeCounts ( ) ; } finally { cluster2 . startNode ( ) ; awaitSameNodeCounts ( ) ; } } public void testCloseAndOpenIndex ( ) throws Exception { assertAcked ( internalCluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; ensureGreen ( internalCluster ( ) ) ; assertAcked ( internalCluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) ) ; setupTribeNode ( Settings . EMPTY ) ; awaitSameNodeCounts ( ) ; ClusterState tribeState = tribeNode . client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( tribeState . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( false ) ) ; assertAcked ( internalCluster ( ) . client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) ) ; awaitIndicesInClusterState ( <str> ) ; ensureGreen ( internalCluster ( ) ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) ) ; awaitIndicesInClusterState ( <str> , <str> ) ; ensureGreen ( cluster2 ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) ) ; awaitIndicesNotInClusterState ( <str> ) ; assertAcked ( cluster2 . client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) ) ; awaitIndicesInClusterState ( <str> , <str> ) ; ensureGreen ( cluster2 ) ; } private void awaitIndicesInClusterState ( final String . . . indices ) throws Exception { assertBusy ( new Runnable ( ) { @Override public void run ( ) { ClusterState tribeState = tribeNode . client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; for ( String index : indices ) { assertTrue ( tribeState . getMetaData ( ) . hasIndex ( index ) ) ; assertTrue ( tribeState . getRoutingTable ( ) . hasIndex ( index ) ) ; } } } ) ; } private void awaitIndicesNotInClusterState ( final String . . . indices ) throws Exception { assertBusy ( new Runnable ( ) { @Override public void run ( ) { ClusterState tribeState = tribeNode . client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; for ( String index : indices ) { assertFalse ( tribeState . getMetaData ( ) . hasIndex ( index ) ) ; assertFalse ( tribeState . getRoutingTable ( ) . hasIndex ( index ) ) ; } } } ) ; } private void ensureGreen ( TestCluster testCluster ) { ClusterHealthResponse actionGet = testCluster . client ( ) . admin ( ) . cluster ( ) . health ( Requests . clusterHealthRequest ( ) . waitForGreenStatus ( ) . waitForEvents ( Priority . LANGUID ) . waitForRelocatingShards ( <int> ) ) . actionGet ( ) ; if ( actionGet . isTimedOut ( ) ) { logger . info ( <str> , testCluster . client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . prettyPrint ( ) , testCluster . client ( ) . admin ( ) . cluster ( ) . preparePendingClusterTasks ( ) . get ( ) . prettyPrint ( ) ) ; assertThat ( <str> , actionGet . isTimedOut ( ) , equalTo ( false ) ) ; } assertThat ( actionGet . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; } private void awaitSameNodeCounts ( ) throws Exception { assertBusy ( new Runnable ( ) { @Override public void run ( ) { DiscoveryNodes tribeNodes = tribeNode . client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getNodes ( ) ; assertThat ( countDataNodesForTribe ( <str> , tribeNodes ) , equalTo ( internalCluster ( ) . client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getNodes ( ) . dataNodes ( ) . size ( ) ) ) ; assertThat ( countDataNodesForTribe ( <str> , tribeNodes ) , equalTo ( cluster2 . client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) . getNodes ( ) . dataNodes ( ) . size ( ) ) ) ; } } ) ; } private int countDataNodesForTribe ( String tribeName , DiscoveryNodes nodes ) { int count = <int> ; for ( DiscoveryNode node : nodes ) { if ( ! node . dataNode ( ) ) { continue ; } if ( tribeName . equals ( node . getAttributes ( ) . get ( TribeService . TRIBE_NAME ) ) ) { count + + ; } } return count ; } public String [ ] getUnicastHosts ( Client client ) { ArrayList < String > unicastHosts = new ArrayList < > ( ) ; NodesInfoResponse nodeInfos = client . admin ( ) . cluster ( ) . prepareNodesInfo ( ) . clear ( ) . setTransport ( true ) . get ( ) ; for ( NodeInfo info : nodeInfos . getNodes ( ) ) { TransportAddress address = info . getTransport ( ) . getAddress ( ) . publishAddress ( ) ; unicastHosts . add ( address . getAddress ( ) + <str> + address . getPort ( ) ) ; } return unicastHosts . toArray ( new String [ unicastHosts . size ( ) ] ) ; } } 

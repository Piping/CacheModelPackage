package org . elasticsearch . script . python ; import org . elasticsearch . common . StopWatch ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . script . CompiledScript ; import org . elasticsearch . script . ExecutableScript ; import org . elasticsearch . script . ScriptService ; import java . util . HashMap ; import java . util . Map ; public class SimpleBench { public static void main ( String [ ] args ) { PythonScriptEngineService se = new PythonScriptEngineService ( Settings . Builder . EMPTY_SETTINGS ) ; Object compiled = se . compile ( <str> ) ; CompiledScript compiledScript = new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , compiled ) ; Map < String , Object > vars = new HashMap < String , Object > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { vars . put ( <str> , i ) ; vars . put ( <str> , i + <int> ) ; se . executable ( compiledScript , vars ) . run ( ) ; } final long ITER = <int> ; StopWatch stopWatch = new StopWatch ( ) . start ( ) ; for ( long i = <int> ; i < ITER ; i + + ) { se . executable ( compiledScript , vars ) . run ( ) ; } System . out . println ( <str> + stopWatch . stop ( ) . lastTaskTime ( ) ) ; stopWatch = new StopWatch ( ) . start ( ) ; ExecutableScript executableScript = se . executable ( compiledScript , vars ) ; for ( long i = <int> ; i < ITER ; i + + ) { executableScript . run ( ) ; } System . out . println ( <str> + stopWatch . stop ( ) . lastTaskTime ( ) ) ; stopWatch = new StopWatch ( ) . start ( ) ; executableScript = se . executable ( compiledScript , vars ) ; for ( long i = <int> ; i < ITER ; i + + ) { for ( Map . Entry < String , Object > entry : vars . entrySet ( ) ) { executableScript . setNextVar ( entry . getKey ( ) , entry . getValue ( ) ) ; } executableScript . run ( ) ; } System . out . println ( <str> + stopWatch . stop ( ) . lastTaskTime ( ) ) ; } } 

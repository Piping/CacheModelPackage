package org . elasticsearch . transport . netty ; import org . elasticsearch . common . transport . TransportAddress ; import org . elasticsearch . test . ESTestCase ; public class NettyTransportTests extends ESTestCase { public void testParseV4DefaultPort ( ) throws Exception { TransportAddress [ ] addresses = NettyTransport . parse ( <str> , <str> , Integer . MAX_VALUE ) ; assertEquals ( <int> , addresses . length ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; } public void testParseV4DefaultRange ( ) throws Exception { TransportAddress [ ] addresses = NettyTransport . parse ( <str> , <str> , Integer . MAX_VALUE ) ; assertEquals ( <int> , addresses . length ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; } public void testParseV4WithPort ( ) throws Exception { TransportAddress [ ] addresses = NettyTransport . parse ( <str> , <str> , Integer . MAX_VALUE ) ; assertEquals ( <int> , addresses . length ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; } public void testParseV4WithPortRange ( ) throws Exception { TransportAddress [ ] addresses = NettyTransport . parse ( <str> , <str> , Integer . MAX_VALUE ) ; assertEquals ( <int> , addresses . length ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; } public void testParseV6UnBracketed ( ) throws Exception { try { NettyTransport . parse ( <str> , <str> , Integer . MAX_VALUE ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { assertTrue ( expected . getMessage ( ) . contains ( <str> ) ) ; } } public void testParseV6DefaultPort ( ) throws Exception { TransportAddress [ ] addresses = NettyTransport . parse ( <str> , <str> , Integer . MAX_VALUE ) ; assertEquals ( <int> , addresses . length ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; } public void testParseV6DefaultRange ( ) throws Exception { TransportAddress [ ] addresses = NettyTransport . parse ( <str> , <str> , Integer . MAX_VALUE ) ; assertEquals ( <int> , addresses . length ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; } public void testParseV6WithPort ( ) throws Exception { TransportAddress [ ] addresses = NettyTransport . parse ( <str> , <str> , Integer . MAX_VALUE ) ; assertEquals ( <int> , addresses . length ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; } public void testParseV6WithPortRange ( ) throws Exception { TransportAddress [ ] addresses = NettyTransport . parse ( <str> , <str> , Integer . MAX_VALUE ) ; assertEquals ( <int> , addresses . length ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; assertEquals ( <str> , addresses [ <int> ] . getAddress ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; } public void testAddressLimit ( ) throws Exception { TransportAddress [ ] addresses = NettyTransport . parse ( <str> , <str> , <int> ) ; assertEquals ( <int> , addresses . length ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; assertEquals ( <int> , addresses [ <int> ] . getPort ( ) ) ; } } 

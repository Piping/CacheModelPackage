package org . gradle . plugins . javascript . coffeescript . compile . internal ; import org . gradle . api . file . FileCollection ; import org . gradle . api . file . FileTree ; import org . gradle . api . file . FileVisitDetails ; import org . gradle . api . file . FileVisitor ; import org . gradle . api . internal . file . RelativeFile ; import org . gradle . plugins . javascript . coffeescript . CoffeeScriptCompileOptions ; import org . gradle . plugins . javascript . coffeescript . CoffeeScriptCompileSpec ; import java . io . File ; import java . io . Serializable ; import java . util . LinkedList ; import java . util . List ; public class SerializableCoffeeScriptCompileSpec implements Serializable { private final File coffeeScriptJs ; private final File destinationDir ; private final List < RelativeFile > source ; private final CoffeeScriptCompileOptions options ; public SerializableCoffeeScriptCompileSpec ( CoffeeScriptCompileSpec spec ) { this ( spec . getCoffeeScriptJs ( ) , spec . getDestinationDir ( ) , spec . getSource ( ) , spec . getOptions ( ) ) ; } public SerializableCoffeeScriptCompileSpec ( File coffeeScriptJs , File destinationDir , FileCollection source , CoffeeScriptCompileOptions options ) { this . coffeeScriptJs = coffeeScriptJs ; this . destinationDir = destinationDir ; this . source = new LinkedList < RelativeFile > ( ) ; this . options = options ; toRelativeFiles ( source , this . source ) ; } public static void toRelativeFiles ( final FileCollection source , final List < RelativeFile > targets ) { FileTree fileTree = source . getAsFileTree ( ) ; fileTree . visit ( new FileVisitor ( ) { public void visitDir ( FileVisitDetails dirDetails ) { } public void visitFile ( FileVisitDetails fileDetails ) { targets . add ( new RelativeFile ( fileDetails . getFile ( ) , fileDetails . getRelativePath ( ) ) ) ; } } ) ; } public File getCoffeeScriptJs ( ) { return coffeeScriptJs ; } public File getDestinationDir ( ) { return destinationDir ; } public List < RelativeFile > getSource ( ) { return source ; } public CoffeeScriptCompileOptions getOptions ( ) { return options ; } } 

package org . elasticsearch . action . admin . cluster . stats ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . action . admin . cluster . node . info . NodeInfo ; import org . elasticsearch . action . admin . cluster . node . stats . NodeStats ; import org . elasticsearch . action . admin . indices . stats . ShardStats ; import org . elasticsearch . action . support . nodes . BaseNodeResponse ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; public class ClusterStatsNodeResponse extends BaseNodeResponse { private NodeInfo nodeInfo ; private NodeStats nodeStats ; private ShardStats [ ] shardsStats ; private ClusterHealthStatus clusterStatus ; ClusterStatsNodeResponse ( ) { } public ClusterStatsNodeResponse ( DiscoveryNode node , @Nullable ClusterHealthStatus clusterStatus , NodeInfo nodeInfo , NodeStats nodeStats , ShardStats [ ] shardsStats ) { super ( node ) ; this . nodeInfo = nodeInfo ; this . nodeStats = nodeStats ; this . shardsStats = shardsStats ; this . clusterStatus = clusterStatus ; } public NodeInfo nodeInfo ( ) { return this . nodeInfo ; } public NodeStats nodeStats ( ) { return this . nodeStats ; } @Nullable public ClusterHealthStatus clusterStatus ( ) { return clusterStatus ; } public ShardStats [ ] shardsStats ( ) { return this . shardsStats ; } public static ClusterStatsNodeResponse readNodeResponse ( StreamInput in ) throws IOException { ClusterStatsNodeResponse nodeResponse = new ClusterStatsNodeResponse ( ) ; nodeResponse . readFrom ( in ) ; return nodeResponse ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; clusterStatus = null ; if ( in . readBoolean ( ) ) { clusterStatus = ClusterHealthStatus . fromValue ( in . readByte ( ) ) ; } this . nodeInfo = NodeInfo . readNodeInfo ( in ) ; this . nodeStats = NodeStats . readNodeStats ( in ) ; int size = in . readVInt ( ) ; shardsStats = new ShardStats [ size ] ; for ( size - - ; size > = <int> ; size - - ) { shardsStats [ size ] = ShardStats . readShardStats ( in ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; if ( clusterStatus = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; out . writeByte ( clusterStatus . value ( ) ) ; } nodeInfo . writeTo ( out ) ; nodeStats . writeTo ( out ) ; out . writeVInt ( shardsStats . length ) ; for ( ShardStats ss : shardsStats ) { ss . writeTo ( out ) ; } } } 

package org . elasticsearch . bwcompat ; import org . apache . lucene . util . LuceneTestCase ; import org . elasticsearch . action . admin . indices . get . GetIndexResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; @LuceneTestCase.SuppressCodecs ( <str> ) @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . TEST , numDataNodes = <int> , minNumDataNodes = <int> , maxNumDataNodes = <int> ) public class StaticIndexBackwardCompatibilityIT extends ESIntegTestCase { public void loadIndex ( String index , Object . . . settings ) throws Exception { logger . info ( <str> + index ) ; Settings nodeSettings = prepareBackwardsDataDir ( getDataPath ( index + <str> ) , settings ) ; internalCluster ( ) . startNode ( nodeSettings ) ; ensureGreen ( index ) ; assertIndexSanity ( index ) ; } private void assertIndexSanity ( String index ) { GetIndexResponse getIndexResponse = client ( ) . admin ( ) . indices ( ) . prepareGetIndex ( ) . get ( ) ; assertEquals ( <int> , getIndexResponse . indices ( ) . length ) ; assertEquals ( index , getIndexResponse . indices ( ) [ <int> ] ) ; ensureYellow ( index ) ; SearchResponse test = client ( ) . prepareSearch ( index ) . get ( ) ; assertThat ( test . getHits ( ) . getTotalHits ( ) , greaterThanOrEqualTo ( <int> ) ) ; } } 

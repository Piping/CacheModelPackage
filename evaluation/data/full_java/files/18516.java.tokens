package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . InputProcessor ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; public class OnscreenKeyboardTest extends GdxTest implements InputProcessor { BitmapFont font ; String text ; SpriteBatch batch ; public void create ( ) { batch = new SpriteBatch ( ) ; font = new BitmapFont ( ) ; text = <str> ; Gdx . input . setInputProcessor ( this ) ; } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; font . draw ( batch , <str> + text , <int> , Gdx . graphics . getHeight ( ) ) ; batch . end ( ) ; if ( Gdx . input . justTouched ( ) ) Gdx . input . setOnscreenKeyboardVisible ( true ) ; } @Override public boolean keyDown ( int keycode ) { return false ; } @Override public boolean keyUp ( int keycode ) { return false ; } @Override public boolean keyTyped ( char character ) { if ( character = = <str> & & text . length ( ) > = <int> ) { text = text . substring ( <int> , text . length ( ) - <int> ) ; } else if ( character = = <str> ) { Gdx . input . setOnscreenKeyboardVisible ( false ) ; } else { text + = character ; } return false ; } @Override public boolean touchDown ( int x , int y , int pointer , int button ) { return false ; } @Override public boolean touchUp ( int x , int y , int pointer , int button ) { return false ; } @Override public boolean touchDragged ( int x , int y , int pointer ) { return false ; } @Override public boolean mouseMoved ( int x , int y ) { return false ; } @Override public boolean scrolled ( int amount ) { return false ; } } 

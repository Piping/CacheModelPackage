package org . elasticsearch . action . admin . cluster . snapshots ; import org . elasticsearch . action . admin . cluster . repositories . verify . VerifyRepositoryResponse ; import org . elasticsearch . action . admin . cluster . snapshots . create . CreateSnapshotResponse ; import org . elasticsearch . action . admin . cluster . snapshots . get . GetSnapshotsResponse ; import org . elasticsearch . action . admin . cluster . snapshots . restore . RestoreSnapshotResponse ; import org . elasticsearch . action . admin . cluster . snapshots . status . SnapshotsStatusResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . junit . Before ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . hasSize ; @ClusterScope ( scope = ESIntegTestCase . Scope . TEST ) public class SnapshotBlocksIT extends ESIntegTestCase { protected static final String INDEX_NAME = <str> ; protected static final String OTHER_INDEX_NAME = <str> ; protected static final String COMMON_INDEX_NAME_MASK = <str> ; protected static final String REPOSITORY_NAME = <str> + INDEX_NAME ; protected static final String SNAPSHOT_NAME = <str> ; @Before protected void setUpRepository ( ) throws Exception { createIndex ( INDEX_NAME , OTHER_INDEX_NAME ) ; int docs = between ( <int> , <int> ) ; for ( int i = <int> ; i < docs ; i + + ) { client ( ) . prepareIndex ( INDEX_NAME , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; } docs = between ( <int> , <int> ) ; for ( int i = <int> ; i < docs ; i + + ) { client ( ) . prepareIndex ( OTHER_INDEX_NAME , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; } logger . info ( <str> ) ; assertAcked ( client ( ) . admin ( ) . cluster ( ) . preparePutRepository ( REPOSITORY_NAME ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , randomRepoPath ( ) ) ) ) ; logger . info ( <str> ) ; VerifyRepositoryResponse verifyResponse = client ( ) . admin ( ) . cluster ( ) . prepareVerifyRepository ( REPOSITORY_NAME ) . get ( ) ; assertThat ( verifyResponse . getNodes ( ) . length , equalTo ( cluster ( ) . numDataAndMasterNodes ( ) ) ) ; logger . info ( <str> ) ; CreateSnapshotResponse snapshotResponse = client ( ) . admin ( ) . cluster ( ) . prepareCreateSnapshot ( REPOSITORY_NAME , SNAPSHOT_NAME ) . setIncludeGlobalState ( true ) . setWaitForCompletion ( true ) . execute ( ) . actionGet ( ) ; assertThat ( snapshotResponse . status ( ) , equalTo ( RestStatus . OK ) ) ; ensureSearchable ( ) ; } public void testCreateSnapshotWithBlocks ( ) { logger . info ( <str> ) ; try { setClusterReadOnly ( true ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareCreateSnapshot ( REPOSITORY_NAME , <str> ) . setWaitForCompletion ( true ) . get ( ) . status ( ) , equalTo ( RestStatus . OK ) ) ; } finally { setClusterReadOnly ( false ) ; } logger . info ( <str> ) ; CreateSnapshotResponse response = client ( ) . admin ( ) . cluster ( ) . prepareCreateSnapshot ( REPOSITORY_NAME , <str> ) . setWaitForCompletion ( true ) . execute ( ) . actionGet ( ) ; assertThat ( response . status ( ) , equalTo ( RestStatus . OK ) ) ; } public void testCreateSnapshotWithIndexBlocks ( ) { logger . info ( <str> ) ; try { enableIndexBlock ( INDEX_NAME , SETTING_READ_ONLY ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareCreateSnapshot ( REPOSITORY_NAME , <str> ) . setIndices ( COMMON_INDEX_NAME_MASK ) . setWaitForCompletion ( true ) . get ( ) . status ( ) , equalTo ( RestStatus . OK ) ) ; } finally { disableIndexBlock ( INDEX_NAME , SETTING_READ_ONLY ) ; } logger . info ( <str> ) ; try { enableIndexBlock ( INDEX_NAME , SETTING_BLOCKS_READ ) ; assertBlocked ( client ( ) . admin ( ) . cluster ( ) . prepareCreateSnapshot ( REPOSITORY_NAME , <str> ) . setIndices ( COMMON_INDEX_NAME_MASK ) , IndexMetaData . INDEX_READ_BLOCK ) ; logger . info ( <str> ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareCreateSnapshot ( REPOSITORY_NAME , <str> ) . setIndices ( OTHER_INDEX_NAME ) . setWaitForCompletion ( true ) . get ( ) . status ( ) , equalTo ( RestStatus . OK ) ) ; } finally { disableIndexBlock ( INDEX_NAME , SETTING_BLOCKS_READ ) ; } } public void testDeleteSnapshotWithBlocks ( ) { logger . info ( <str> ) ; try { setClusterReadOnly ( true ) ; assertTrue ( client ( ) . admin ( ) . cluster ( ) . prepareDeleteSnapshot ( REPOSITORY_NAME , SNAPSHOT_NAME ) . get ( ) . isAcknowledged ( ) ) ; } finally { setClusterReadOnly ( false ) ; } } public void testRestoreSnapshotWithBlocks ( ) { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDelete ( INDEX_NAME , OTHER_INDEX_NAME ) ) ; assertFalse ( client ( ) . admin ( ) . indices ( ) . prepareExists ( INDEX_NAME , OTHER_INDEX_NAME ) . get ( ) . isExists ( ) ) ; logger . info ( <str> ) ; try { setClusterReadOnly ( true ) ; assertBlocked ( client ( ) . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( REPOSITORY_NAME , SNAPSHOT_NAME ) , MetaData . CLUSTER_READ_ONLY_BLOCK ) ; } finally { setClusterReadOnly ( false ) ; } logger . info ( <str> ) ; RestoreSnapshotResponse response = client ( ) . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( REPOSITORY_NAME , SNAPSHOT_NAME ) . setWaitForCompletion ( true ) . execute ( ) . actionGet ( ) ; assertThat ( response . status ( ) , equalTo ( RestStatus . OK ) ) ; assertTrue ( client ( ) . admin ( ) . indices ( ) . prepareExists ( INDEX_NAME ) . get ( ) . isExists ( ) ) ; assertTrue ( client ( ) . admin ( ) . indices ( ) . prepareExists ( OTHER_INDEX_NAME ) . get ( ) . isExists ( ) ) ; } public void testGetSnapshotWithBlocks ( ) { try { setClusterReadOnly ( true ) ; GetSnapshotsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareGetSnapshots ( REPOSITORY_NAME ) . execute ( ) . actionGet ( ) ; assertThat ( response . getSnapshots ( ) , hasSize ( <int> ) ) ; assertThat ( response . getSnapshots ( ) . get ( <int> ) . name ( ) , equalTo ( SNAPSHOT_NAME ) ) ; } finally { setClusterReadOnly ( false ) ; } } public void testSnapshotStatusWithBlocks ( ) { try { setClusterReadOnly ( true ) ; SnapshotsStatusResponse response = client ( ) . admin ( ) . cluster ( ) . prepareSnapshotStatus ( REPOSITORY_NAME ) . setSnapshots ( SNAPSHOT_NAME ) . execute ( ) . actionGet ( ) ; assertThat ( response . getSnapshots ( ) , hasSize ( <int> ) ) ; assertThat ( response . getSnapshots ( ) . get ( <int> ) . getState ( ) . completed ( ) , equalTo ( true ) ) ; } finally { setClusterReadOnly ( false ) ; } } } 

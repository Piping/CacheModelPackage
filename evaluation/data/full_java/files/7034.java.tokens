package org . elasticsearch . rest . action . cat ; import org . elasticsearch . action . admin . cluster . state . ClusterStateRequest ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . action . admin . indices . segments . IndexSegments ; import org . elasticsearch . action . admin . indices . segments . IndexShardSegments ; import org . elasticsearch . action . admin . indices . segments . IndicesSegmentResponse ; import org . elasticsearch . action . admin . indices . segments . IndicesSegmentsRequest ; import org . elasticsearch . action . admin . indices . segments . ShardSegments ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . engine . Segment ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . RestResponse ; import org . elasticsearch . rest . action . support . RestActionListener ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestSegmentsAction extends AbstractCatAction { @Inject public RestSegmentsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final String [ ] indices = Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ; final ClusterStateRequest clusterStateRequest = new ClusterStateRequest ( ) ; clusterStateRequest . local ( request . paramAsBoolean ( <str> , clusterStateRequest . local ( ) ) ) ; clusterStateRequest . masterNodeTimeout ( request . paramAsTime ( <str> , clusterStateRequest . masterNodeTimeout ( ) ) ) ; clusterStateRequest . clear ( ) . nodes ( true ) . routingTable ( true ) . indices ( indices ) ; client . admin ( ) . cluster ( ) . state ( clusterStateRequest , new RestActionListener < ClusterStateResponse > ( channel ) { @Override public void processResponse ( final ClusterStateResponse clusterStateResponse ) { final IndicesSegmentsRequest indicesSegmentsRequest = new IndicesSegmentsRequest ( ) ; indicesSegmentsRequest . indices ( indices ) ; client . admin ( ) . indices ( ) . segments ( indicesSegmentsRequest , new RestResponseListener < IndicesSegmentResponse > ( channel ) { @Override public RestResponse buildResponse ( final IndicesSegmentResponse indicesSegmentResponse ) throws Exception { final Map < String , IndexSegments > indicesSegments = indicesSegmentResponse . getIndices ( ) ; Table tab = buildTable ( request , clusterStateResponse , indicesSegments ) ; return RestTable . buildResponse ( tab , channel ) ; } } ) ; } } ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; sb . append ( <str> ) ; } @Override protected Table getTableWithHeader ( RestRequest request ) { Table table = new Table ( ) ; table . startHeaders ( ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . endHeaders ( ) ; return table ; } private Table buildTable ( final RestRequest request , ClusterStateResponse state , Map < String , IndexSegments > indicesSegments ) { Table table = getTableWithHeader ( request ) ; DiscoveryNodes nodes = state . getState ( ) . nodes ( ) ; for ( IndexSegments indexSegments : indicesSegments . values ( ) ) { Map < Integer , IndexShardSegments > shards = indexSegments . getShards ( ) ; for ( IndexShardSegments indexShardSegments : shards . values ( ) ) { ShardSegments [ ] shardSegments = indexShardSegments . getShards ( ) ; for ( ShardSegments shardSegment : shardSegments ) { List < Segment > segments = shardSegment . getSegments ( ) ; for ( Segment segment : segments ) { table . startRow ( ) ; table . addCell ( shardSegment . getShardRouting ( ) . getIndex ( ) ) ; table . addCell ( shardSegment . getShardRouting ( ) . getId ( ) ) ; table . addCell ( shardSegment . getShardRouting ( ) . primary ( ) ? <str> : <str> ) ; table . addCell ( nodes . get ( shardSegment . getShardRouting ( ) . currentNodeId ( ) ) . getHostAddress ( ) ) ; table . addCell ( shardSegment . getShardRouting ( ) . currentNodeId ( ) ) ; table . addCell ( segment . getName ( ) ) ; table . addCell ( segment . getGeneration ( ) ) ; table . addCell ( segment . getNumDocs ( ) ) ; table . addCell ( segment . getDeletedDocs ( ) ) ; table . addCell ( segment . getSize ( ) ) ; table . addCell ( segment . getMemoryInBytes ( ) ) ; table . addCell ( segment . isCommitted ( ) ) ; table . addCell ( segment . isSearch ( ) ) ; table . addCell ( segment . getVersion ( ) ) ; table . addCell ( segment . isCompound ( ) ) ; table . endRow ( ) ; } } } } return table ; } } 

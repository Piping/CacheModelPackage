package org . apache . cassandra . config ; import org . junit . Assert ; import org . junit . Test ; import org . apache . cassandra . db . marshal . * ; import org . apache . cassandra . thrift . ThriftConversion ; import org . apache . cassandra . utils . ByteBufferUtil ; public class ColumnDefinitionTest { @Test public void testSerializeDeserialize ( ) throws Exception { CFMetaData cfm = CFMetaData . Builder . create ( <str> , <str> , true , false , false ) . addPartitionKey ( <str> , AsciiType . instance ) . addClusteringColumn ( <str> , AsciiType . instance ) . addRegularColumn ( <str> , AsciiType . instance ) . build ( ) ; ColumnDefinition cd0 = ColumnDefinition . staticDef ( cfm , ByteBufferUtil . bytes ( <str> ) , BytesType . instance ) ; ColumnDefinition cd1 = ColumnDefinition . staticDef ( cfm , ByteBufferUtil . bytes ( <str> ) , LongType . instance ) ; testSerializeDeserialize ( cfm , cd0 ) ; testSerializeDeserialize ( cfm , cd1 ) ; } protected void testSerializeDeserialize ( CFMetaData cfm , ColumnDefinition cd ) throws Exception { ColumnDefinition newCd = ThriftConversion . fromThrift ( cfm . ksName , cfm . cfName , cfm . comparator . subtype ( <int> ) , null , ThriftConversion . toThrift ( cfm , cd ) ) ; Assert . assertNotSame ( cd , newCd ) ; Assert . assertEquals ( cd . hashCode ( ) , newCd . hashCode ( ) ) ; Assert . assertEquals ( cd , newCd ) ; } } 

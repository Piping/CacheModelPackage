package org . eclipse . debug . internal . ui . memory ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . memory . IMemoryRendering ; import org . eclipse . debug . ui . memory . IMemoryRenderingType ; import org . eclipse . debug . ui . memory . IMemoryRenderingTypeDelegate ; class MemoryRenderingType implements IMemoryRenderingType { private IConfigurationElement fConfigurationElement ; private IMemoryRenderingTypeDelegate fDelegate ; static final String ATTR_MEM_RENDERING_TYPE_NAME = <str> ; static final String ATTR_MEM_RENDERING_TYPE_ID = <str> ; static final String ATTR_MEM_RENDERING_TYPE_DELEGATE = <str> ; MemoryRenderingType ( IConfigurationElement element ) { fConfigurationElement = element ; } @Override public String getLabel ( ) { return fConfigurationElement . getAttribute ( ATTR_MEM_RENDERING_TYPE_NAME ) ; } @Override public String getId ( ) { return fConfigurationElement . getAttribute ( ATTR_MEM_RENDERING_TYPE_ID ) ; } @Override public IMemoryRendering createRendering ( ) throws CoreException { if ( fDelegate = = null ) { fDelegate = ( IMemoryRenderingTypeDelegate ) fConfigurationElement . createExecutableExtension ( ATTR_MEM_RENDERING_TYPE_DELEGATE ) ; } return fDelegate . createRendering ( getId ( ) ) ; } void validate ( ) throws CoreException { verifyPresent ( ATTR_MEM_RENDERING_TYPE_ID ) ; verifyPresent ( ATTR_MEM_RENDERING_TYPE_NAME ) ; verifyPresent ( ATTR_MEM_RENDERING_TYPE_DELEGATE ) ; } private void verifyPresent ( String attrName ) throws CoreException { if ( fConfigurationElement . getAttribute ( attrName ) = = null ) { Status status = new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . INTERNAL_ERROR , <str> + attrName , null ) ; throw new CoreException ( status ) ; } } } 

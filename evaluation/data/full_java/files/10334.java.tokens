package com . google . common . collect ; import junit . framework . TestCase ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentMap ; public class ForwardingConcurrentMapTest extends TestCase { private static class TestMap extends ForwardingConcurrentMap < String , Integer > { final ConcurrentMap < String , Integer > delegate = new ConcurrentHashMap < String , Integer > ( ) ; @Override protected ConcurrentMap < String , Integer > delegate ( ) { return delegate ; } } public void testPutIfAbsent ( ) { TestMap map = new TestMap ( ) ; map . put ( <str> , <int> ) ; assertEquals ( Integer . valueOf ( <int> ) , map . putIfAbsent ( <str> , <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , map . get ( <str> ) ) ; assertNull ( map . putIfAbsent ( <str> , <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , map . get ( <str> ) ) ; } public void testRemove ( ) { TestMap map = new TestMap ( ) ; map . put ( <str> , <int> ) ; assertFalse ( map . remove ( <str> , <int> ) ) ; assertFalse ( map . remove ( <str> , <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , map . get ( <str> ) ) ; assertTrue ( map . remove ( <str> , <int> ) ) ; assertTrue ( map . isEmpty ( ) ) ; } public void testReplace ( ) { TestMap map = new TestMap ( ) ; map . put ( <str> , <int> ) ; assertEquals ( Integer . valueOf ( <int> ) , map . replace ( <str> , <int> ) ) ; assertNull ( map . replace ( <str> , <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , map . get ( <str> ) ) ; assertFalse ( map . containsKey ( <str> ) ) ; } public void testReplaceConditional ( ) { TestMap map = new TestMap ( ) ; map . put ( <str> , <int> ) ; assertFalse ( map . replace ( <str> , <int> , <int> ) ) ; assertFalse ( map . replace ( <str> , <int> , <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , map . get ( <str> ) ) ; assertFalse ( map . containsKey ( <str> ) ) ; assertTrue ( map . replace ( <str> , <int> , <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , map . get ( <str> ) ) ; } } 

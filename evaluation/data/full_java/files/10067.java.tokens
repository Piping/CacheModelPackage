package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ADD ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . lang . reflect . Method ; import java . util . List ; @SuppressWarnings ( <str> ) @GwtCompatible ( emulated = true ) public class ListAddTester < E > extends AbstractListTester < E > { @CollectionFeature.Require ( SUPPORTS_ADD ) @CollectionSize.Require ( absent = ZERO ) public void testAdd_supportedPresent ( ) { assertTrue ( <str> , getList ( ) . add ( e0 ( ) ) ) ; expectAdded ( e0 ( ) ) ; } @CollectionFeature.Require ( absent = SUPPORTS_ADD ) @CollectionSize.Require ( absent = ZERO ) public void testAdd_unsupportedPresent ( ) { try { getList ( ) . add ( e0 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } } @CollectionFeature.Require ( value = { SUPPORTS_ADD , ALLOWS_NULL_VALUES } ) @CollectionSize.Require ( absent = ZERO ) public void testAdd_supportedNullPresent ( ) { E [ ] array = createArrayWithNullElement ( ) ; collection = getSubjectGenerator ( ) . create ( array ) ; assertTrue ( <str> , getList ( ) . add ( null ) ) ; List < E > expected = Helpers . copyToList ( array ) ; expected . add ( null ) ; expectContents ( expected ) ; } @GwtIncompatible ( <str> ) public static Method getAddSupportedNullPresentMethod ( ) { return Helpers . getMethod ( ListAddTester . class , <str> ) ; } } 

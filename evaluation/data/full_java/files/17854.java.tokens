package com . badlogic . gdx . tools . hiero . unicodefont . effects ; import java . awt . Color ; import java . awt . GradientPaint ; import java . awt . Graphics2D ; import java . awt . image . BufferedImage ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import com . badlogic . gdx . tools . hiero . unicodefont . Glyph ; import com . badlogic . gdx . tools . hiero . unicodefont . UnicodeFont ; public class GradientEffect implements ConfigurableEffect { private Color topColor = Color . cyan , bottomColor = Color . blue ; private int offset = <int> ; private float scale = <int> ; private boolean cyclic ; public GradientEffect ( ) { } public GradientEffect ( Color topColor , Color bottomColor , float scale ) { this . topColor = topColor ; this . bottomColor = bottomColor ; this . scale = scale ; } public void draw ( BufferedImage image , Graphics2D g , UnicodeFont unicodeFont , Glyph glyph ) { int ascent = unicodeFont . getAscent ( ) ; float height = ( ascent ) * scale ; float top = - glyph . getYOffset ( ) + unicodeFont . getDescent ( ) + offset + ascent / <int> - height / <int> ; g . setPaint ( new GradientPaint ( <int> , top , topColor , <int> , top + height , bottomColor , cyclic ) ) ; g . fill ( glyph . getShape ( ) ) ; } public Color getTopColor ( ) { return topColor ; } public void setTopColor ( Color topColor ) { this . topColor = topColor ; } public Color getBottomColor ( ) { return bottomColor ; } public void setBottomColor ( Color bottomColor ) { this . bottomColor = bottomColor ; } public int getOffset ( ) { return offset ; } public void setOffset ( int offset ) { this . offset = offset ; } public float getScale ( ) { return scale ; } public void setScale ( float scale ) { this . scale = scale ; } public boolean isCyclic ( ) { return cyclic ; } public void setCyclic ( boolean cyclic ) { this . cyclic = cyclic ; } public String toString ( ) { return <str> ; } public List getValues ( ) { List values = new ArrayList ( ) ; values . add ( EffectUtil . colorValue ( <str> , topColor ) ) ; values . add ( EffectUtil . colorValue ( <str> , bottomColor ) ) ; values . add ( EffectUtil . intValue ( <str> , offset , <str> ) ) ; values . add ( EffectUtil . floatValue ( <str> , scale , <int> , <int> , <str> + <str> ) ) ; values . add ( EffectUtil . booleanValue ( <str> , cyclic , <str> ) ) ; return values ; } public void setValues ( List values ) { for ( Iterator iter = values . iterator ( ) ; iter . hasNext ( ) ; ) { Value value = ( Value ) iter . next ( ) ; if ( value . getName ( ) . equals ( <str> ) ) { topColor = ( Color ) value . getObject ( ) ; } else if ( value . getName ( ) . equals ( <str> ) ) { bottomColor = ( Color ) value . getObject ( ) ; } else if ( value . getName ( ) . equals ( <str> ) ) { offset = ( ( Integer ) value . getObject ( ) ) . intValue ( ) ; } else if ( value . getName ( ) . equals ( <str> ) ) { scale = ( ( Float ) value . getObject ( ) ) . floatValue ( ) ; } else if ( value . getName ( ) . equals ( <str> ) ) { cyclic = ( ( Boolean ) value . getObject ( ) ) . booleanValue ( ) ; } } } } 

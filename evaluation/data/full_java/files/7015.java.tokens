package org . elasticsearch . rest . action . admin . indices . warmer . delete ; import org . elasticsearch . action . admin . indices . warmer . delete . DeleteWarmerRequest ; import org . elasticsearch . action . admin . indices . warmer . delete . DeleteWarmerResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; import static org . elasticsearch . rest . RestRequest . Method . DELETE ; public class RestDeleteWarmerAction extends BaseRestHandler { @Inject public RestDeleteWarmerAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( DELETE , <str> , this ) ; controller . registerHandler ( DELETE , <str> , this ) ; controller . registerHandler ( DELETE , <str> , this ) ; controller . registerHandler ( DELETE , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { DeleteWarmerRequest deleteWarmerRequest = new DeleteWarmerRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) . indices ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; deleteWarmerRequest . timeout ( request . paramAsTime ( <str> , deleteWarmerRequest . timeout ( ) ) ) ; deleteWarmerRequest . masterNodeTimeout ( request . paramAsTime ( <str> , deleteWarmerRequest . masterNodeTimeout ( ) ) ) ; deleteWarmerRequest . indicesOptions ( IndicesOptions . fromRequest ( request , deleteWarmerRequest . indicesOptions ( ) ) ) ; client . admin ( ) . indices ( ) . deleteWarmer ( deleteWarmerRequest , new AcknowledgedRestListener < DeleteWarmerResponse > ( channel ) ) ; } } 

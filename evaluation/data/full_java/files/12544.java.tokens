package org . gradle . api . internal . artifacts . ivyservice . ivyresolve ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . * ; import org . gradle . internal . component . model . * ; import org . gradle . api . internal . component . ArtifactType ; import org . gradle . internal . resolve . result . BuildableArtifactResolveResult ; import org . gradle . internal . resolve . result . BuildableArtifactSetResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleVersionListingResolveResult ; public class CacheLockReleasingModuleComponentsRepository extends BaseModuleComponentRepository { private final ModuleComponentRepositoryAccess remoteAccess ; public CacheLockReleasingModuleComponentsRepository ( ModuleComponentRepository repository , CacheLockingManager cacheLockingManager ) { super ( repository ) ; this . remoteAccess = new LockReleasingRepositoryAccess ( repository . getName ( ) , repository . getRemoteAccess ( ) , cacheLockingManager ) ; } @Override public ModuleComponentRepositoryAccess getRemoteAccess ( ) { return remoteAccess ; } private static class LockReleasingRepositoryAccess implements ModuleComponentRepositoryAccess { private final String name ; private final ModuleComponentRepositoryAccess delegate ; private final CacheLockingManager cacheLockingManager ; @Override public String toString ( ) { return <str> + delegate . toString ( ) ; } private LockReleasingRepositoryAccess ( String name , ModuleComponentRepositoryAccess delegate , CacheLockingManager cacheLockingManager ) { this . name = name ; this . delegate = delegate ; this . cacheLockingManager = cacheLockingManager ; } public void listModuleVersions ( final DependencyMetaData dependency , final BuildableModuleVersionListingResolveResult result ) { cacheLockingManager . longRunningOperation ( String . format ( <str> , dependency , name ) , new Runnable ( ) { public void run ( ) { delegate . listModuleVersions ( dependency , result ) ; } } ) ; } public void resolveComponentMetaData ( final ModuleComponentIdentifier moduleComponentIdentifier , final ComponentOverrideMetadata requestMetaData , final BuildableModuleComponentMetaDataResolveResult result ) { cacheLockingManager . longRunningOperation ( String . format ( <str> , moduleComponentIdentifier , name ) , new Runnable ( ) { public void run ( ) { delegate . resolveComponentMetaData ( moduleComponentIdentifier , requestMetaData , result ) ; } } ) ; } public void resolveModuleArtifacts ( final ComponentResolveMetaData component , final ArtifactType artifactType , final BuildableArtifactSetResolveResult result ) { cacheLockingManager . longRunningOperation ( String . format ( <str> , artifactType , component , name ) , new Runnable ( ) { public void run ( ) { delegate . resolveModuleArtifacts ( component , artifactType , result ) ; } } ) ; } public void resolveModuleArtifacts ( final ComponentResolveMetaData component , final ComponentUsage componentUsage , final BuildableArtifactSetResolveResult result ) { cacheLockingManager . longRunningOperation ( String . format ( <str> , componentUsage , component , name ) , new Runnable ( ) { public void run ( ) { delegate . resolveModuleArtifacts ( component , componentUsage , result ) ; } } ) ; } public void resolveArtifact ( final ComponentArtifactMetaData artifact , final ModuleSource moduleSource , final BuildableArtifactResolveResult result ) { cacheLockingManager . longRunningOperation ( String . format ( <str> , artifact , name ) , new Runnable ( ) { public void run ( ) { delegate . resolveArtifact ( artifact , moduleSource , result ) ; } } ) ; } } } 

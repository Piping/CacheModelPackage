package io . netty . example . echo ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . ChannelOption ; import io . netty . channel . ChannelPipeline ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . SocketChannel ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . util . InsecureTrustManagerFactory ; public final class EchoClient { static final boolean SSL = System . getProperty ( <str> ) ! = null ; static final String HOST = System . getProperty ( <str> , <str> ) ; static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; static final int SIZE = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; public static void main ( String [ ] args ) throws Exception { final SslContext sslCtx ; if ( SSL ) { sslCtx = SslContextBuilder . forClient ( ) . trustManager ( InsecureTrustManagerFactory . INSTANCE ) . build ( ) ; } else { sslCtx = null ; } EventLoopGroup group = new NioEventLoopGroup ( ) ; try { Bootstrap b = new Bootstrap ( ) ; b . group ( group ) . channel ( NioSocketChannel . class ) . option ( ChannelOption . TCP_NODELAY , true ) . handler ( new ChannelInitializer < SocketChannel > ( ) { @Override public void initChannel ( SocketChannel ch ) throws Exception { ChannelPipeline p = ch . pipeline ( ) ; if ( sslCtx ! = null ) { p . addLast ( sslCtx . newHandler ( ch . alloc ( ) , HOST , PORT ) ) ; } p . addLast ( new EchoClientHandler ( ) ) ; } } ) ; ChannelFuture f = b . connect ( HOST , PORT ) . sync ( ) ; f . channel ( ) . closeFuture ( ) . sync ( ) ; } finally { group . shutdownGracefully ( ) ; } } } 

package org . elasticsearch . messy . tests ; import org . elasticsearch . action . admin . cluster . node . stats . NodeStats ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsResponse ; import org . elasticsearch . action . admin . indices . stats . IndicesStatsResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . routing . GroupShardsIterator ; import org . elasticsearch . cluster . routing . ShardIterator ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . index . search . stats . SearchStats . Stats ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . search . highlight . HighlightBuilder ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Collection ; import java . util . Collections ; import java . util . HashSet ; import java . util . Set ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_SHARDS ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAllSuccessful ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; @ESIntegTestCase.ClusterScope ( minNumDataNodes = <int> ) public class SearchStatsTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } @Override protected int numberOfReplicas ( ) { return <int> ; } public void testSimpleStats ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareStats ( ) . clear ( ) . execute ( ) . actionGet ( ) ; final int numNodes = cluster ( ) . numDataNodes ( ) ; assertThat ( numNodes , greaterThanOrEqualTo ( <int> ) ) ; final int shardsIdx1 = randomIntBetween ( <int> , <int> ) ; final int shardsIdx2 = Math . max ( numNodes - shardsIdx1 , randomIntBetween ( <int> , <int> ) ) ; assertThat ( numNodes , lessThanOrEqualTo ( shardsIdx1 + shardsIdx2 ) ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( SETTING_NUMBER_OF_SHARDS , shardsIdx1 ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) ) ; int docsTest1 = scaledRandomIntBetween ( <int> * shardsIdx1 , <int> * shardsIdx1 ) ; for ( int i = <int> ; i < docsTest1 ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; if ( rarely ( ) ) { refresh ( ) ; } } assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( SETTING_NUMBER_OF_SHARDS , shardsIdx2 ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) ) ; int docsTest2 = scaledRandomIntBetween ( <int> * shardsIdx2 , <int> * shardsIdx2 ) ; for ( int i = <int> ; i < docsTest2 ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; if ( rarely ( ) ) { refresh ( ) ; } } assertThat ( shardsIdx1 + shardsIdx2 , equalTo ( numAssignedShards ( <str> , <str> ) ) ) ; assertThat ( numAssignedShards ( <str> , <str> ) , greaterThanOrEqualTo ( <int> ) ) ; ensureGreen ( ) ; refresh ( ) ; int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { SearchResponse searchResponse = internalCluster ( ) . clientNodeClient ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . setStats ( <str> , <str> ) . highlighter ( new HighlightBuilder ( ) . field ( <str> ) ) . addScriptField ( <str> , new Script ( <str> ) ) . setSize ( <int> ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , docsTest1 + docsTest2 ) ; assertAllSuccessful ( searchResponse ) ; } IndicesStatsResponse indicesStats = client ( ) . admin ( ) . indices ( ) . prepareStats ( ) . execute ( ) . actionGet ( ) ; logger . debug ( <str> + indicesStats . getTotal ( ) . getSearch ( ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getTotal ( ) . getQueryCount ( ) , greaterThan ( <int> l ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getTotal ( ) . getQueryTimeInMillis ( ) , greaterThan ( <int> l ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getTotal ( ) . getFetchCount ( ) , greaterThan ( <int> l ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getTotal ( ) . getFetchTimeInMillis ( ) , greaterThan ( <int> l ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getGroupStats ( ) , nullValue ( ) ) ; indicesStats = client ( ) . admin ( ) . indices ( ) . prepareStats ( ) . setGroups ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getGroupStats ( ) , notNullValue ( ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getGroupStats ( ) . get ( <str> ) . getQueryCount ( ) , greaterThan ( <int> l ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getGroupStats ( ) . get ( <str> ) . getQueryTimeInMillis ( ) , greaterThan ( <int> l ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getGroupStats ( ) . get ( <str> ) . getFetchCount ( ) , greaterThan ( <int> l ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getGroupStats ( ) . get ( <str> ) . getFetchTimeInMillis ( ) , greaterThan ( <int> l ) ) ; NodesStatsResponse nodeStats = client ( ) . admin ( ) . cluster ( ) . prepareNodesStats ( ) . execute ( ) . actionGet ( ) ; NodeStats [ ] nodes = nodeStats . getNodes ( ) ; Set < String > nodeIdsWithIndex = nodeIdsWithIndex ( <str> , <str> ) ; int num = <int> ; for ( NodeStats stat : nodes ) { Stats total = stat . getIndices ( ) . getSearch ( ) . getTotal ( ) ; if ( nodeIdsWithIndex . contains ( stat . getNode ( ) . getId ( ) ) ) { assertThat ( total . getQueryCount ( ) , greaterThan ( <int> l ) ) ; assertThat ( total . getQueryTimeInMillis ( ) , greaterThan ( <int> l ) ) ; num + + ; } else { assertThat ( total . getQueryCount ( ) , equalTo ( <int> l ) ) ; assertThat ( total . getQueryTimeInMillis ( ) , equalTo ( <int> l ) ) ; } } assertThat ( num , greaterThan ( <int> ) ) ; } private Set < String > nodeIdsWithIndex ( String . . . indices ) { ClusterState state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; GroupShardsIterator allAssignedShardsGrouped = state . routingTable ( ) . allAssignedShardsGrouped ( indices , true ) ; Set < String > nodes = new HashSet < > ( ) ; for ( ShardIterator shardIterator : allAssignedShardsGrouped ) { for ( ShardRouting routing : shardIterator . asUnordered ( ) ) { if ( routing . active ( ) ) { nodes . add ( routing . currentNodeId ( ) ) ; } } } return nodes ; } public void testOpenContexts ( ) { String index = <str> ; createIndex ( index ) ; ensureGreen ( index ) ; final int docs = scaledRandomIntBetween ( <int> , <int> ) ; for ( int s = <int> ; s < numAssignedShards ( index ) ; s + + ) { for ( int i = <int> ; i < docs ; i + + ) { client ( ) . prepareIndex ( index , <str> , Integer . toString ( s * docs + i ) ) . setSource ( <str> , <str> ) . setRouting ( Integer . toString ( s ) ) . execute ( ) . actionGet ( ) ; } } client ( ) . admin ( ) . indices ( ) . prepareRefresh ( index ) . execute ( ) . actionGet ( ) ; IndicesStatsResponse indicesStats = client ( ) . admin ( ) . indices ( ) . prepareStats ( index ) . execute ( ) . actionGet ( ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getOpenContexts ( ) , equalTo ( <int> l ) ) ; int size = scaledRandomIntBetween ( <int> , docs ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setSize ( size ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; indicesStats = client ( ) . admin ( ) . indices ( ) . prepareStats ( index ) . execute ( ) . actionGet ( ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getOpenContexts ( ) , equalTo ( ( long ) numAssignedShards ( index ) ) ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getTotal ( ) . getScrollCurrent ( ) , equalTo ( ( long ) numAssignedShards ( index ) ) ) ; int hits = <int> ; while ( true ) { if ( searchResponse . getHits ( ) . getHits ( ) . length = = <int> ) { break ; } hits + = searchResponse . getHits ( ) . getHits ( ) . length ; searchResponse = client ( ) . prepareSearchScroll ( searchResponse . getScrollId ( ) ) . setScroll ( TimeValue . timeValueMinutes ( <int> ) ) . execute ( ) . actionGet ( ) ; } long expected = <int> ; IndicesStatsResponse r = client ( ) . admin ( ) . indices ( ) . prepareStats ( index ) . execute ( ) . actionGet ( ) ; for ( int s = <int> ; s < numAssignedShards ( index ) ; s + + ) { expected + = ( long ) Math . ceil ( r . getShards ( ) [ s ] . getStats ( ) . getDocs ( ) . getCount ( ) / size ) ; } indicesStats = client ( ) . admin ( ) . indices ( ) . prepareStats ( ) . execute ( ) . actionGet ( ) ; Stats stats = indicesStats . getTotal ( ) . getSearch ( ) . getTotal ( ) ; assertEquals ( hits , docs * numAssignedShards ( index ) ) ; assertThat ( stats . getQueryCount ( ) , greaterThanOrEqualTo ( expected ) ) ; clearScroll ( searchResponse . getScrollId ( ) ) ; indicesStats = client ( ) . admin ( ) . indices ( ) . prepareStats ( ) . execute ( ) . actionGet ( ) ; stats = indicesStats . getTotal ( ) . getSearch ( ) . getTotal ( ) ; assertThat ( indicesStats . getTotal ( ) . getSearch ( ) . getOpenContexts ( ) , equalTo ( <int> l ) ) ; assertThat ( stats . getScrollCount ( ) , equalTo ( ( long ) numAssignedShards ( index ) ) ) ; assertThat ( stats . getScrollTimeInMillis ( ) , greaterThan ( <int> l ) ) ; } protected int numAssignedShards ( String . . . indices ) { ClusterState state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; GroupShardsIterator allAssignedShardsGrouped = state . routingTable ( ) . allAssignedShardsGrouped ( indices , true ) ; return allAssignedShardsGrouped . size ( ) ; } } 

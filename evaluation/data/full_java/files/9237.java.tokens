package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import java . util . Comparator ; import java . util . NoSuchElementException ; import java . util . SortedMap ; import javax . annotation . Nullable ; @GwtCompatible public abstract class ForwardingSortedMap < K , V > extends ForwardingMap < K , V > implements SortedMap < K , V > { protected ForwardingSortedMap ( ) { } @Override protected abstract SortedMap < K , V > delegate ( ) ; @Override public Comparator < ? super K > comparator ( ) { return delegate ( ) . comparator ( ) ; } @Override public K firstKey ( ) { return delegate ( ) . firstKey ( ) ; } @Override public SortedMap < K , V > headMap ( K toKey ) { return delegate ( ) . headMap ( toKey ) ; } @Override public K lastKey ( ) { return delegate ( ) . lastKey ( ) ; } @Override public SortedMap < K , V > subMap ( K fromKey , K toKey ) { return delegate ( ) . subMap ( fromKey , toKey ) ; } @Override public SortedMap < K , V > tailMap ( K fromKey ) { return delegate ( ) . tailMap ( fromKey ) ; } @Beta protected class StandardKeySet extends Maps . SortedKeySet < K , V > { public StandardKeySet ( ) { super ( ForwardingSortedMap . this ) ; } } @SuppressWarnings ( <str> ) private int unsafeCompare ( Object k1 , Object k2 ) { Comparator < ? super K > comparator = comparator ( ) ; if ( comparator = = null ) { return ( ( Comparable < Object > ) k1 ) . compareTo ( k2 ) ; } else { return ( ( Comparator < Object > ) comparator ) . compare ( k1 , k2 ) ; } } @Override @Beta protected boolean standardContainsKey ( @Nullable Object key ) { try { @SuppressWarnings ( <str> ) SortedMap < Object , V > self = ( SortedMap < Object , V > ) this ; Object ceilingKey = self . tailMap ( key ) . firstKey ( ) ; return unsafeCompare ( ceilingKey , key ) = = <int> ; } catch ( ClassCastException e ) { return false ; } catch ( NoSuchElementException e ) { return false ; } catch ( NullPointerException e ) { return false ; } } @Beta protected SortedMap < K , V > standardSubMap ( K fromKey , K toKey ) { checkArgument ( unsafeCompare ( fromKey , toKey ) < = <int> , <str> ) ; return tailMap ( fromKey ) . headMap ( toKey ) ; } } 

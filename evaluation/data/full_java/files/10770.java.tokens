package org . gradle . api . plugins . antlr . internal ; import com . google . common . collect . Lists ; import org . gradle . api . file . SourceDirectorySet ; import org . gradle . api . plugins . antlr . AntlrTask ; import java . io . File ; import java . util . List ; import java . util . Set ; public class AntlrSpecFactory { public AntlrSpec create ( AntlrTask antlrTask , Set < File > grammarFiles , SourceDirectorySet sourceDirectorySet ) { List < String > arguments = Lists . newLinkedList ( antlrTask . getArguments ( ) ) ; if ( antlrTask . isTrace ( ) & & ! arguments . contains ( <str> ) ) { arguments . add ( <str> ) ; } if ( antlrTask . isTraceLexer ( ) & & ! arguments . contains ( <str> ) ) { arguments . add ( <str> ) ; } if ( antlrTask . isTraceParser ( ) & & ! arguments . contains ( <str> ) ) { arguments . add ( <str> ) ; } if ( antlrTask . isTraceTreeWalker ( ) & & ! arguments . contains ( <str> ) ) { arguments . add ( <str> ) ; } return new AntlrSpec ( arguments , grammarFiles , sourceDirectorySet . getSrcDirs ( ) , antlrTask . getOutputDirectory ( ) , antlrTask . getMaxHeapSize ( ) ) ; } } 

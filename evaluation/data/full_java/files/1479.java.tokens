package org . apache . cassandra . db . compaction ; import java . util . HashMap ; import java . util . Map ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . cql3 . UntypedResultSet ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; public class CompactionsCQLTest extends CQLTester { public static final int SLEEP_TIME = FBUtilities . isWindows ( ) ? <int> : <int> ; @Test public void testTriggerMinorCompactionSTCS ( ) throws Throwable { createTable ( <str> ) ; assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; flush ( ) ; Thread . sleep ( SLEEP_TIME ) ; assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; } @Test public void testTriggerMinorCompactionLCS ( ) throws Throwable { createTable ( <str> ) ; assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; flush ( ) ; Thread . sleep ( SLEEP_TIME ) ; assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; } @Test public void testTriggerMinorCompactionDTCS ( ) throws Throwable { createTable ( <str> ) ; assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; flush ( ) ; Thread . sleep ( SLEEP_TIME ) ; assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; } @Test public void testTriggerNoMinorCompactionSTCSDisabled ( ) throws Throwable { createTable ( <str> ) ; assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; flush ( ) ; Thread . sleep ( SLEEP_TIME ) ; assertFalse ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; } @Test public void testTriggerMinorCompactionSTCSNodetoolEnabled ( ) throws Throwable { createTable ( <str> ) ; assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; getCurrentColumnFamilyStore ( ) . enableAutoCompaction ( ) ; assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; flush ( ) ; Thread . sleep ( SLEEP_TIME ) ; assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; } @Test public void testTriggerNoMinorCompactionSTCSNodetoolDisabled ( ) throws Throwable { createTable ( <str> ) ; assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; getCurrentColumnFamilyStore ( ) . disableAutoCompaction ( ) ; assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; flush ( ) ; Thread . sleep ( SLEEP_TIME ) ; assertFalse ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; } @Test public void testTriggerNoMinorCompactionSTCSAlterTable ( ) throws Throwable { createTable ( <str> ) ; assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; flush ( ) ; Thread . sleep ( SLEEP_TIME ) ; assertFalse ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; } @Test public void testTriggerMinorCompactionSTCSAlterTable ( ) throws Throwable { createTable ( <str> ) ; assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; flush ( ) ; Thread . sleep ( SLEEP_TIME ) ; assertTrue ( minorWasTriggered ( KEYSPACE , currentTable ( ) ) ) ; } @Test public void testSetLocalCompactionStrategy ( ) throws Throwable { createTable ( <str> ) ; Map < String , String > localOptions = new HashMap < > ( ) ; localOptions . put ( <str> , <str> ) ; getCurrentColumnFamilyStore ( ) . setCompactionParameters ( localOptions ) ; assertTrue ( verifyStrategies ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) , DateTieredCompactionStrategy . class ) ) ; execute ( <str> ) ; assertTrue ( verifyStrategies ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) , DateTieredCompactionStrategy . class ) ) ; execute ( <str> ) ; assertTrue ( verifyStrategies ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) , SizeTieredCompactionStrategy . class ) ) ; } @Test public void testSetLocalCompactionStrategyDisable ( ) throws Throwable { createTable ( <str> ) ; Map < String , String > localOptions = new HashMap < > ( ) ; localOptions . put ( <str> , <str> ) ; localOptions . put ( <str> , <str> ) ; getCurrentColumnFamilyStore ( ) . setCompactionParameters ( localOptions ) ; assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; localOptions . clear ( ) ; localOptions . put ( <str> , <str> ) ; getCurrentColumnFamilyStore ( ) . setCompactionParameters ( localOptions ) ; assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; } @Test public void testSetLocalCompactionStrategyEnable ( ) throws Throwable { createTable ( <str> ) ; Map < String , String > localOptions = new HashMap < > ( ) ; localOptions . put ( <str> , <str> ) ; getCurrentColumnFamilyStore ( ) . disableAutoCompaction ( ) ; assertFalse ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; getCurrentColumnFamilyStore ( ) . setCompactionParameters ( localOptions ) ; assertTrue ( getCurrentColumnFamilyStore ( ) . getCompactionStrategyManager ( ) . isEnabled ( ) ) ; } @Test ( expected = IllegalArgumentException . class ) public void testBadLocalCompactionStrategyOptions ( ) { createTable ( <str> ) ; Map < String , String > localOptions = new HashMap < > ( ) ; localOptions . put ( <str> , <str> ) ; localOptions . put ( <str> , <str> ) ; getCurrentColumnFamilyStore ( ) . setCompactionParameters ( localOptions ) ; } public boolean verifyStrategies ( CompactionStrategyManager manager , Class < ? extends AbstractCompactionStrategy > expected ) { boolean found = false ; for ( AbstractCompactionStrategy actualStrategy : manager . getStrategies ( ) ) { if ( ! actualStrategy . getClass ( ) . equals ( expected ) ) return false ; found = true ; } return found ; } private boolean minorWasTriggered ( String keyspace , String cf ) throws Throwable { UntypedResultSet res = execute ( <str> ) ; boolean minorWasTriggered = false ; for ( UntypedResultSet . Row r : res ) { if ( r . getString ( <str> ) . equals ( keyspace ) & & r . getString ( <str> ) . equals ( cf ) ) minorWasTriggered = true ; } return minorWasTriggered ; } } 

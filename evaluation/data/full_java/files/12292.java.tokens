package org . gradle . process . internal . launcher ; import org . gradle . api . Action ; import org . gradle . process . internal . child . EncodedStream ; import org . gradle . process . internal . child . IsolatedApplicationClassLoaderWorker ; import org . gradle . process . internal . child . WorkerContext ; import java . io . DataInputStream ; import java . io . ObjectInputStream ; import java . net . URI ; import java . util . ArrayList ; import java . util . Collection ; public class IsolatedGradleWorkerMain { public void run ( ) throws Exception { DataInputStream instr = new DataInputStream ( new EncodedStream . EncodedInput ( System . in ) ) ; int applicationClassPathLength = instr . readInt ( ) ; Collection < URI > classpath = new ArrayList < URI > ( ) ; for ( int i = <int> ; i < applicationClassPathLength ; i + + ) { String uri = instr . readUTF ( ) ; classpath . add ( new URI ( uri ) ) ; } ObjectInputStream objectInputStream = new ObjectInputStream ( instr ) ; Action < WorkerContext > worker = ( Action < WorkerContext > ) objectInputStream . readObject ( ) ; new IsolatedApplicationClassLoaderWorker ( classpath , worker ) . call ( ) ; } public static void main ( String [ ] args ) { try { new IsolatedGradleWorkerMain ( ) . run ( ) ; System . exit ( <int> ) ; } catch ( Throwable throwable ) { throwable . printStackTrace ( System . err ) ; System . exit ( <int> ) ; } } } 

package org . gradle . gradleplugin . foundation ; import org . dom4j . Attribute ; import org . dom4j . Element ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class Dom4JUtility { public static Element getChild ( Element parent , String tagName , String attribute , String attributeValue ) { Element childElement = null ; Iterator iterator = parent . elements ( tagName ) . iterator ( ) ; while ( iterator . hasNext ( ) & & childElement = = null ) { childElement = ( Element ) iterator . next ( ) ; String actualValue = childElement . attributeValue ( attribute ) ; if ( ! attributeValue . equals ( actualValue ) ) { childElement = null ; } } return childElement ; } public static List < Element > getChildren ( Element parent , String tagName , String attribute , String attributeValue ) { List < Element > children = new ArrayList < Element > ( ) ; Iterator iterator = parent . elements ( tagName ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Element childElement = ( Element ) iterator . next ( ) ; String actualValue = childElement . attributeValue ( attribute ) ; if ( attributeValue . equals ( actualValue ) ) { children . add ( childElement ) ; } } return children ; } public static Element getChild ( Element parent , String attribute , String attributeValue ) { Element childElement = null ; Iterator iterator = parent . elements ( ) . iterator ( ) ; while ( iterator . hasNext ( ) & & childElement = = null ) { childElement = ( Element ) iterator . next ( ) ; String actualValue = childElement . attributeValue ( attribute ) ; if ( ! attributeValue . equals ( actualValue ) ) { childElement = null ; } } return childElement ; } public static List < Element > getChildren ( Element parent , String attribute , String attributeValue ) { List < Element > children = new ArrayList < Element > ( ) ; Iterator iterator = parent . elements ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Element childElement = ( Element ) iterator . next ( ) ; String actualValue = childElement . attributeValue ( attribute ) ; if ( attributeValue . equals ( actualValue ) ) { children . add ( childElement ) ; } } return children ; } public static void setAttributeAsBoolean ( Element element , String attribute , boolean value ) { if ( value ) { element . addAttribute ( attribute , <str> ) ; } else { element . addAttribute ( attribute , <str> ) ; } } public static boolean getAttributeAsBoolean ( Element element , String attributeName , boolean defaultValue ) { Attribute attribute = element . attribute ( attributeName ) ; if ( attribute = = null ) { return defaultValue ; } return <str> . equals ( attribute . getValue ( ) ) ; } } 

package org . gradle . api . plugins . quality . internal . findbugs ; import org . gradle . api . Action ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . process . internal . WorkerProcessContext ; import java . io . Serializable ; public class FindBugsWorkerServer implements Action < WorkerProcessContext > , Serializable { private static final Logger LOGGER = Logging . getLogger ( FindBugsWorkerServer . class ) ; private FindBugsSpec spec ; public FindBugsWorkerServer ( FindBugsSpec spec ) { this . spec = spec ; } public void execute ( WorkerProcessContext context ) { final FindBugsResult result = execute ( new FindBugsExecuter ( ) ) ; final FindBugsWorkerClientProtocol clientProtocol = context . getServerConnection ( ) . addOutgoing ( FindBugsWorkerClientProtocol . class ) ; context . getServerConnection ( ) . connect ( ) ; clientProtocol . executed ( result ) ; } FindBugsResult execute ( FindBugsExecuter executer ) { LOGGER . debug ( <str> ) ; try { return executer . runFindbugs ( spec ) ; } catch ( Throwable t ) { LOGGER . warn ( <str> , t ) ; return new FindBugsResult ( <int> , <int> , <int> , t ) ; } } } 

package org . eclipse . debug . internal . ui . sourcelookup . browsers ; import java . io . File ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . sourcelookup . SourceLookupUIMessages ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . dialogs . TitleAreaDialog ; import org . eclipse . jface . resource . JFaceResources ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . ModifyEvent ; import org . eclipse . swt . events . ModifyListener ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . DirectoryDialog ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . PlatformUI ; public class DirectorySourceContainerDialog extends TitleAreaDialog { private static final String LAST_PATH_SETTING = <str> ; private static final String LAST_SUBDIR_SETTING = <str> ; private String fDirectory ; private boolean fSearchSubfolders = true ; private Text fDirText ; private Button fSubfoldersButton ; private boolean fNewContainer = true ; public DirectorySourceContainerDialog ( Shell shell ) { this ( shell , IInternalDebugCoreConstants . EMPTY_STRING , DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) . getBoolean ( LAST_SUBDIR_SETTING ) ) ; fNewContainer = true ; } public DirectorySourceContainerDialog ( Shell shell , String directory , boolean searchSubfolders ) { super ( shell ) ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; fDirectory = directory ; fSearchSubfolders = searchSubfolders ; fNewContainer = false ; } public String getDirectory ( ) { return fDirectory ; } public boolean isSearchSubfolders ( ) { return fSearchSubfolders ; } @Override protected Control createDialogArea ( Composite parent ) { Image image = ( fNewContainer ) ? DebugPluginImages . getImage ( IInternalDebugUIConstants . IMG_ADD_SRC_DIR_WIZ ) : DebugPluginImages . getImage ( IInternalDebugUIConstants . IMG_EDIT_SRC_DIR_WIZ ) ; setTitle ( SourceLookupUIMessages . DirectorySourceContainerDialog_2 ) ; setMessage ( SourceLookupUIMessages . DirectorySourceContainerDialog_3 ) ; setTitleImage ( image ) ; Composite parentComposite = ( Composite ) super . createDialogArea ( parent ) ; Font font = parentComposite . getFont ( ) ; Composite composite = new Composite ( parentComposite , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . marginHeight = convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_MARGIN ) ; layout . marginWidth = convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_MARGIN ) ; layout . verticalSpacing = convertVerticalDLUsToPixels ( IDialogConstants . VERTICAL_SPACING ) ; layout . horizontalSpacing = convertHorizontalDLUsToPixels ( IDialogConstants . HORIZONTAL_SPACING ) ; composite . setLayout ( layout ) ; composite . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; composite . setFont ( font ) ; Composite dirComposite = new Composite ( composite , SWT . NONE ) ; layout = new GridLayout ( <int> , false ) ; dirComposite . setLayout ( layout ) ; dirComposite . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; dirComposite . setFont ( font ) ; Label label = new Label ( dirComposite , SWT . NONE ) ; label . setText ( SourceLookupUIMessages . DirectorySourceContainerDialog_4 ) ; GridData data = new GridData ( GridData . FILL_HORIZONTAL ) ; data . horizontalSpan = <int> ; label . setLayoutData ( data ) ; label . setFont ( font ) ; fDirText = new Text ( dirComposite , SWT . BORDER ) ; data = new GridData ( GridData . FILL_HORIZONTAL ) ; data . horizontalSpan = <int> ; fDirText . setLayoutData ( data ) ; fDirText . setFont ( font ) ; fDirText . addModifyListener ( new ModifyListener ( ) { @Override public void modifyText ( ModifyEvent e ) { validate ( ) ; } } ) ; Button button = new Button ( dirComposite , SWT . PUSH ) ; button . setText ( SourceLookupUIMessages . DirectorySourceContainerDialog_5 ) ; data = new GridData ( ) ; int widthHint = convertHorizontalDLUsToPixels ( IDialogConstants . BUTTON_WIDTH ) ; Point minSize = button . computeSize ( SWT . DEFAULT , SWT . DEFAULT , true ) ; data . widthHint = Math . max ( widthHint , minSize . x ) ; button . setLayoutData ( data ) ; button . setFont ( JFaceResources . getDialogFont ( ) ) ; button . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent event ) { browse ( ) ; } } ) ; fSubfoldersButton = new Button ( composite , SWT . CHECK ) ; fSubfoldersButton . setText ( SourceLookupUIMessages . DirectorySourceContainerDialog_6 ) ; return parentComposite ; } @Override protected void configureShell ( Shell newShell ) { String title = null ; if ( fNewContainer ) { title = SourceLookupUIMessages . DirectorySourceContainerDialog_7 ; } else { title = SourceLookupUIMessages . DirectorySourceContainerDialog_8 ; } newShell . setText ( title ) ; super . configureShell ( newShell ) ; } @Override protected Control createContents ( Composite parent ) { Control c = super . createContents ( parent ) ; fDirText . setText ( fDirectory ) ; fSubfoldersButton . setSelection ( fSearchSubfolders ) ; validate ( ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( c , IDebugHelpContextIds . SELECT_DIRECTORY_SOURCE_CONTAINER_DIALOG ) ; return c ; } @Override protected void okPressed ( ) { fDirectory = fDirText . getText ( ) . trim ( ) ; fSearchSubfolders = fSubfoldersButton . getSelection ( ) ; DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) . put ( LAST_PATH_SETTING , fDirectory ) ; DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) . put ( LAST_SUBDIR_SETTING , fSearchSubfolders ) ; super . okPressed ( ) ; } private void browse ( ) { String last = fDirText . getText ( ) . trim ( ) ; if ( last . length ( ) = = <int> ) { last = DebugUIPlugin . getDefault ( ) . getDialogSettings ( ) . get ( LAST_PATH_SETTING ) ; } if ( last = = null ) { last = IInternalDebugCoreConstants . EMPTY_STRING ; } DirectoryDialog dialog = new DirectoryDialog ( getShell ( ) , SWT . SINGLE ) ; dialog . setText ( SourceLookupUIMessages . DirectorySourceContainerDialog_0 ) ; dialog . setMessage ( SourceLookupUIMessages . DirectorySourceContainerDialog_1 ) ; dialog . setFilterPath ( last ) ; String result = dialog . open ( ) ; if ( result = = null ) { return ; } fDirText . setText ( result ) ; } private void validate ( ) { File file = new File ( fDirText . getText ( ) . trim ( ) ) ; getButton ( IDialogConstants . OK_ID ) . setEnabled ( file . isDirectory ( ) & & file . exists ( ) ) ; } } 

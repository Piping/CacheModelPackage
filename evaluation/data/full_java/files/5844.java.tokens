package org . elasticsearch . common . inject . internal ; import org . elasticsearch . common . inject . Binder ; import org . elasticsearch . common . inject . Key ; import org . elasticsearch . common . inject . binder . AnnotatedElementBuilder ; import java . lang . annotation . Annotation ; import java . util . Objects ; public class ExposureBuilder < T > implements AnnotatedElementBuilder { private final Binder binder ; private final Object source ; private Key < T > key ; public ExposureBuilder ( Binder binder , Object source , Key < T > key ) { this . binder = binder ; this . source = source ; this . key = key ; } protected void checkNotAnnotated ( ) { if ( key . getAnnotationType ( ) ! = null ) { binder . addError ( AbstractBindingBuilder . ANNOTATION_ALREADY_SPECIFIED ) ; } } @Override public void annotatedWith ( Class < ? extends Annotation > annotationType ) { Objects . requireNonNull ( annotationType , <str> ) ; checkNotAnnotated ( ) ; key = Key . get ( key . getTypeLiteral ( ) , annotationType ) ; } @Override public void annotatedWith ( Annotation annotation ) { Objects . requireNonNull ( annotation , <str> ) ; checkNotAnnotated ( ) ; key = Key . get ( key . getTypeLiteral ( ) , annotation ) ; } public Key < ? > getKey ( ) { return key ; } public Object getSource ( ) { return source ; } @Override public String toString ( ) { return <str> ; } } 

package org . nd4j . linalg . api . complex ; import org . nd4j . linalg . factory . Nd4j ; public abstract class BaseComplexFloat implements IComplexFloat { protected float real , imag ; public BaseComplexFloat ( ) { } public BaseComplexFloat ( Float real , Float imag ) { this . real = real ; this . imag = imag ; } public BaseComplexFloat ( float real , float imag ) { this . real = real ; this . imag = imag ; } public BaseComplexFloat ( float real ) { this ( real , <int> ) ; } @Override public IComplexNumber eqc ( IComplexNumber num ) { double val = num . realComponent ( ) . doubleValue ( ) ; double imag = num . imaginaryComponent ( ) . doubleValue ( ) ; double otherVal = num . realComponent ( ) . doubleValue ( ) ; double otherImag = num . imaginaryComponent ( ) . doubleValue ( ) ; if ( val = = otherVal ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else if ( val ! = otherVal ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else if ( imag = = otherImag ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else return Nd4j . createComplexNumber ( <int> , <int> ) ; } @Override public IComplexNumber neqc ( IComplexNumber num ) { double val = num . realComponent ( ) . doubleValue ( ) ; double imag = num . imaginaryComponent ( ) . doubleValue ( ) ; double otherVal = num . realComponent ( ) . doubleValue ( ) ; double otherImag = num . imaginaryComponent ( ) . doubleValue ( ) ; if ( val ! = otherVal ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else if ( val = = otherVal ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else if ( imag ! = otherImag ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else return Nd4j . createComplexNumber ( <int> , <int> ) ; } @Override public IComplexNumber gt ( IComplexNumber num ) { double val = num . realComponent ( ) . doubleValue ( ) ; double imag = num . imaginaryComponent ( ) . doubleValue ( ) ; double otherVal = num . realComponent ( ) . doubleValue ( ) ; double otherImag = num . imaginaryComponent ( ) . doubleValue ( ) ; if ( val > otherVal ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else if ( val < otherVal ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else if ( imag > otherImag ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else return Nd4j . createComplexNumber ( <int> , <int> ) ; } @Override public IComplexNumber lt ( IComplexNumber num ) { double val = num . realComponent ( ) . doubleValue ( ) ; double imag = num . imaginaryComponent ( ) . doubleValue ( ) ; double otherVal = num . realComponent ( ) . doubleValue ( ) ; double otherImag = num . imaginaryComponent ( ) . doubleValue ( ) ; if ( val < otherVal ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else if ( val > otherVal ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else if ( imag < otherImag ) return Nd4j . createComplexNumber ( <int> , <int> ) ; else return Nd4j . createComplexNumber ( <int> , <int> ) ; } @Override public IComplexNumber rsubi ( IComplexNumber c ) { return rsubi ( c , this ) ; } @Override public IComplexNumber set ( IComplexNumber set ) { return set ( realComponent ( ) . floatValue ( ) , imaginaryComponent ( ) . floatValue ( ) ) ; } @Override public IComplexNumber rsubi ( IComplexNumber a , IComplexNumber result ) { return result . set ( a . sub ( this ) ) ; } @Override public IComplexNumber rsub ( IComplexNumber c ) { return dup ( ) . rsubi ( c ) ; } @Override public IComplexNumber rsubi ( Number a , IComplexNumber result ) { return result . set ( a . doubleValue ( ) - realComponent ( ) . doubleValue ( ) , imaginaryComponent ( ) ) ; } @Override public IComplexNumber rsubi ( Number a ) { return rsubi ( a , this ) ; } @Override public IComplexNumber rsub ( Number r ) { return dup ( ) . rsubi ( r ) ; } @Override public IComplexNumber rdiv ( IComplexNumber c ) { return dup ( ) . rdivi ( c ) ; } @Override public IComplexNumber rdivi ( IComplexNumber c , IComplexNumber result ) { return result . set ( c . div ( this ) ) ; } @Override public IComplexNumber rdivi ( IComplexNumber c ) { return rdivi ( c , this ) ; } @Override public IComplexNumber rdivi ( Number v , IComplexNumber result ) { float d = realComponent ( ) . floatValue ( ) * realComponent ( ) . floatValue ( ) + imaginaryComponent ( ) . floatValue ( ) * imaginaryComponent ( ) . floatValue ( ) ; return result . set ( v . floatValue ( ) * realComponent ( ) . floatValue ( ) / d , - v . floatValue ( ) * imaginaryComponent ( ) . floatValue ( ) / d ) ; } @Override public IComplexNumber rdivi ( Number v ) { return rdivi ( v , this ) ; } @Override public IComplexNumber rdiv ( Number v ) { return dup ( ) . rdivi ( v ) ; } @Override public IComplexDouble asDouble ( ) { return Nd4j . createDouble ( realComponent ( ) , imaginaryComponent ( ) ) ; } @Override public IComplexFloat asFloat ( ) { return this ; } @Override public IComplexFloat conji ( ) { set ( realComponent ( ) , - imaginaryComponent ( ) ) ; return this ; } @Override public IComplexNumber conj ( ) { return dup ( ) . conji ( ) ; } @Override public IComplexNumber set ( Number real , Number imag ) { this . real = real . floatValue ( ) ; this . imag = imag . floatValue ( ) ; return this ; } @Override public IComplexNumber copy ( IComplexNumber other ) { return Nd4j . createFloat ( other . realComponent ( ) . floatValue ( ) , other . imaginaryComponent ( ) . floatValue ( ) ) ; } @Override public IComplexNumber addi ( IComplexNumber c , IComplexNumber result ) { return result . set ( result . realComponent ( ) . floatValue ( ) + c . realComponent ( ) . floatValue ( ) , result . imaginaryComponent ( ) . floatValue ( ) + c . imaginaryComponent ( ) . floatValue ( ) ) ; } @Override public IComplexNumber addi ( IComplexNumber c ) { return addi ( c , this ) ; } @Override public IComplexNumber add ( IComplexNumber c ) { return dup ( ) . addi ( c ) ; } @Override public IComplexNumber addi ( Number a , IComplexNumber result ) { return result . set ( realComponent ( ) . floatValue ( ) + a . floatValue ( ) , imaginaryComponent ( ) . floatValue ( ) ) ; } @Override public IComplexNumber addi ( Number c ) { return addi ( c , this ) ; } @Override public IComplexNumber add ( Number c ) { return dup ( ) . addi ( c ) ; } @Override public IComplexNumber subi ( IComplexNumber c , IComplexNumber result ) { return result . set ( realComponent ( ) . floatValue ( ) - c . realComponent ( ) . floatValue ( ) , imaginaryComponent ( ) . floatValue ( ) - c . imaginaryComponent ( ) . floatValue ( ) ) ; } @Override public IComplexNumber subi ( IComplexNumber c ) { return subi ( c , this ) ; } @Override public IComplexNumber sub ( IComplexNumber c ) { return dup ( ) . subi ( c ) ; } @Override public IComplexNumber subi ( Number a , IComplexNumber result ) { return result . set ( realComponent ( ) . floatValue ( ) - a . floatValue ( ) , imaginaryComponent ( ) ) ; } @Override public IComplexNumber subi ( Number a ) { return subi ( a , this ) ; } @Override public IComplexNumber sub ( Number r ) { return dup ( ) . subi ( r ) ; } @Override public IComplexNumber muli ( IComplexNumber c , IComplexNumber result ) { float newR = realComponent ( ) * c . realComponent ( ) . floatValue ( ) - imaginaryComponent ( ) * c . imaginaryComponent ( ) . floatValue ( ) ; float newI = realComponent ( ) * c . imaginaryComponent ( ) . floatValue ( ) + imaginaryComponent ( ) * c . realComponent ( ) . floatValue ( ) ; return result . set ( newR , newI ) ; } @Override public IComplexNumber muli ( IComplexNumber c ) { return muli ( c , this ) ; } @Override public IComplexNumber mul ( IComplexNumber c ) { return dup ( ) . muli ( c ) ; } @Override public IComplexNumber mul ( Number v ) { return dup ( ) . muli ( v ) ; } @Override public IComplexNumber muli ( Number v , IComplexNumber result ) { return result . set ( realComponent ( ) . floatValue ( ) * v . floatValue ( ) , imaginaryComponent ( ) . floatValue ( ) * v . floatValue ( ) ) ; } @Override public IComplexNumber muli ( Number v ) { return muli ( v , this ) ; } @Override public IComplexNumber div ( IComplexNumber c ) { return dup ( ) . divi ( c ) ; } @Override public IComplexNumber divi ( IComplexNumber c , IComplexNumber result ) { float d = c . realComponent ( ) . floatValue ( ) * c . realComponent ( ) . floatValue ( ) + c . imaginaryComponent ( ) . floatValue ( ) * c . imaginaryComponent ( ) . floatValue ( ) ; float newR = ( realComponent ( ) * c . realComponent ( ) . floatValue ( ) + imaginaryComponent ( ) * c . imaginaryComponent ( ) . floatValue ( ) ) / d ; float newI = ( imaginaryComponent ( ) * c . realComponent ( ) . floatValue ( ) - realComponent ( ) * c . imaginaryComponent ( ) . floatValue ( ) ) / d ; return result . set ( newR , newI ) ; } @Override public IComplexNumber divi ( IComplexNumber c ) { return divi ( c , this ) ; } @Override public IComplexNumber divi ( Number v , IComplexNumber result ) { return result . set ( realComponent ( ) . floatValue ( ) / v . floatValue ( ) , imaginaryComponent ( ) . floatValue ( ) / v . floatValue ( ) ) ; } @Override public IComplexNumber divi ( Number v ) { return divi ( v , this ) ; } @Override public IComplexNumber div ( Number v ) { return dup ( ) . divi ( v ) ; } @Override public boolean eq ( IComplexNumber c ) { return false ; } @Override public boolean ne ( IComplexNumber c ) { return false ; } @Override public Float realComponent ( ) { return real ; } @Override public Float imaginaryComponent ( ) { return imag ; } @Override public IComplexFloat divi ( float v ) { this . real = real / v ; this . imag = imag / v ; return this ; } @Override public IComplexNumber div ( float v ) { return dup ( ) . divi ( v ) ; } @Override public Float absoluteValue ( ) { return ( float ) Math . sqrt ( real * real + imag * imag ) ; } @Override public Float complexArgument ( ) { return ( float ) Math . acos ( realComponent ( ) / absoluteValue ( ) ) ; } @Override public IComplexFloat invi ( ) { float d = realComponent ( ) * realComponent ( ) + imaginaryComponent ( ) * imaginaryComponent ( ) ; set ( realComponent ( ) / d , - imaginaryComponent ( ) / d ) ; return this ; } @Override public IComplexNumber inv ( ) { return dup ( ) . invi ( ) ; } @Override public IComplexNumber neg ( ) { return dup ( ) . negi ( ) ; } @Override public IComplexFloat negi ( ) { set ( - realComponent ( ) , - imaginaryComponent ( ) ) ; return this ; } @Override public IComplexFloat sqrt ( ) { float a = absoluteValue ( ) ; float s2 = ( float ) Math . sqrt ( <int> ) ; float p = ( float ) Math . sqrt ( a + realComponent ( ) ) / s2 ; float q = ( float ) Math . sqrt ( a - realComponent ( ) ) / s2 * Math . signum ( imaginaryComponent ( ) ) ; return Nd4j . createFloat ( p , q ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( ! ( o instanceof BaseComplexFloat ) ) return false ; BaseComplexFloat that = ( BaseComplexFloat ) o ; if ( Float . compare ( that . real , real ) ! = <int> ) return false ; if ( Math . abs ( that . imag - imag ) > Nd4j . EPS_THRESHOLD ) return false ; return true ; } public boolean isZero ( ) { return real = = <int> ; } @Override public boolean isReal ( ) { return imaginaryComponent ( ) = = <int> ; } @Override public boolean isImag ( ) { return realComponent ( ) = = <int> ; } @Override public int hashCode ( ) { int result = ( real ! = + <float> ? Float . floatToIntBits ( real ) : <int> ) ; result = <int> * result + ( imag ! = + <float> ? Float . floatToIntBits ( imag ) : <int> ) ; return result ; } @Override public String toString ( ) { if ( imag > = <int> ) { return real + <str> + imag + <str> ; } else { return real + <str> + ( - imag ) + <str> ; } } } 

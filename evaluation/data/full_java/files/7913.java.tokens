package org . elasticsearch . common . geo ; import com . spatial4j . core . exception . InvalidShapeException ; import com . spatial4j . core . shape . Circle ; import com . spatial4j . core . shape . Point ; import com . spatial4j . core . shape . Rectangle ; import com . spatial4j . core . shape . Shape ; import com . spatial4j . core . shape . impl . PointImpl ; import com . vividsolutions . jts . geom . Coordinate ; import com . vividsolutions . jts . geom . LineString ; import com . vividsolutions . jts . geom . Polygon ; import org . elasticsearch . common . geo . builders . LineStringBuilder ; import org . elasticsearch . common . geo . builders . PolygonBuilder ; import org . elasticsearch . common . geo . builders . ShapeBuilder ; import org . elasticsearch . common . geo . builders . ShapeBuilders ; import org . elasticsearch . test . ESTestCase ; import static org . elasticsearch . test . hamcrest . ElasticsearchGeoAssertions . assertMultiLineString ; import static org . elasticsearch . test . hamcrest . ElasticsearchGeoAssertions . assertMultiPolygon ; import static org . elasticsearch . test . hamcrest . ElasticsearchGeoAssertions . assertPolygon ; import static org . hamcrest . Matchers . containsString ; public class ShapeBuilderTests extends ESTestCase { public void testNewPoint ( ) { Point point = ShapeBuilders . newPoint ( - <int> , <int> ) . build ( ) ; assertEquals ( - <int> D , point . getX ( ) , <float> ) ; assertEquals ( <int> D , point . getY ( ) , <float> ) ; } public void testNewRectangle ( ) { Rectangle rectangle = ShapeBuilders . newEnvelope ( ) . topLeft ( - <int> , <int> ) . bottomRight ( <int> , - <int> ) . build ( ) ; assertEquals ( - <int> D , rectangle . getMinX ( ) , <float> ) ; assertEquals ( - <int> D , rectangle . getMinY ( ) , <float> ) ; assertEquals ( <int> D , rectangle . getMaxX ( ) , <float> ) ; assertEquals ( <int> D , rectangle . getMaxY ( ) , <float> ) ; } public void testNewPolygon ( ) { Polygon polygon = ShapeBuilders . newPolygon ( ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) . toPolygon ( ) ; LineString exterior = polygon . getExteriorRing ( ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( - <int> , <int> ) ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( <int> , <int> ) ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( <int> , - <int> ) ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( - <int> , - <int> ) ) ; } public void testNewPolygon_coordinate ( ) { Polygon polygon = ShapeBuilders . newPolygon ( ) . point ( new Coordinate ( - <int> , <int> ) ) . point ( new Coordinate ( <int> , <int> ) ) . point ( new Coordinate ( <int> , - <int> ) ) . point ( new Coordinate ( - <int> , - <int> ) ) . point ( new Coordinate ( - <int> , <int> ) ) . toPolygon ( ) ; LineString exterior = polygon . getExteriorRing ( ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( - <int> , <int> ) ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( <int> , <int> ) ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( <int> , - <int> ) ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( - <int> , - <int> ) ) ; } public void testNewPolygon_coordinates ( ) { Polygon polygon = ShapeBuilders . newPolygon ( ) . points ( new Coordinate ( - <int> , <int> ) , new Coordinate ( <int> , <int> ) , new Coordinate ( <int> , - <int> ) , new Coordinate ( - <int> , - <int> ) , new Coordinate ( - <int> , <int> ) ) . toPolygon ( ) ; LineString exterior = polygon . getExteriorRing ( ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( - <int> , <int> ) ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( <int> , <int> ) ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( <int> , - <int> ) ) ; assertEquals ( exterior . getCoordinateN ( <int> ) , new Coordinate ( - <int> , - <int> ) ) ; } public void testLineStringBuilder ( ) { ShapeBuilders . newLineString ( ) . point ( - <float> , <float> ) . point ( - <float> , - <float> ) . point ( - <float> , - <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , - <float> ) . point ( - <float> , - <float> ) . point ( - <float> , <float> ) . build ( ) ; ShapeBuilders . newLineString ( ) . point ( <float> , <float> ) . point ( <float> , - <float> ) . point ( <float> , - <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , - <float> ) . point ( <float> , - <float> ) . point ( <float> , <float> ) . build ( ) ; ShapeBuilders . newLineString ( ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , - <float> ) . point ( - <float> , - <float> ) . build ( ) ; ShapeBuilders . newLineString ( ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , - <float> ) . point ( <float> , - <float> ) . build ( ) ; } public void testMultiLineString ( ) { ShapeBuilders . newMultiLinestring ( ) . linestring ( new LineStringBuilder ( ) . point ( - <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( - <float> , <float> ) ) . linestring ( new LineStringBuilder ( ) . point ( - <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( - <float> , <float> ) ) . build ( ) ; ShapeBuilders . newMultiLinestring ( ) . linestring ( new LineStringBuilder ( ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) ) . linestring ( new LineStringBuilder ( ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) ) . build ( ) ; } public void testPolygonSelfIntersection ( ) { try { ShapeBuilders . newPolygon ( ) . point ( - <float> , <float> ) . point ( <float> , <float> ) . point ( - <float> , - <float> ) . point ( <float> , - <float> ) . close ( ) . build ( ) ; fail ( <str> ) ; } catch ( InvalidShapeException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testGeoCircle ( ) { double earthCircumference = <float> ; Circle circle = ShapeBuilders . newCircleBuilder ( ) . center ( <int> , <int> ) . radius ( <str> ) . build ( ) ; assertEquals ( ( <int> * <int> ) / earthCircumference , circle . getRadius ( ) , <float> ) ; assertEquals ( new PointImpl ( <int> , <int> , ShapeBuilder . SPATIAL_CONTEXT ) , circle . getCenter ( ) ) ; circle = ShapeBuilders . newCircleBuilder ( ) . center ( + <int> , <int> ) . radius ( <str> ) . build ( ) ; assertEquals ( ( <int> * <int> ) / earthCircumference , circle . getRadius ( ) , <float> ) ; assertEquals ( new PointImpl ( <int> , <int> , ShapeBuilder . SPATIAL_CONTEXT ) , circle . getCenter ( ) ) ; circle = ShapeBuilders . newCircleBuilder ( ) . center ( - <int> , <int> ) . radius ( <str> ) . build ( ) ; assertEquals ( ( <int> * <int> ) / earthCircumference , circle . getRadius ( ) , <float> ) ; assertEquals ( new PointImpl ( - <int> , <int> , ShapeBuilder . SPATIAL_CONTEXT ) , circle . getCenter ( ) ) ; circle = ShapeBuilders . newCircleBuilder ( ) . center ( <int> , <int> ) . radius ( <str> ) . build ( ) ; assertEquals ( ( <int> * <int> ) / earthCircumference , circle . getRadius ( ) , <float> ) ; assertEquals ( new PointImpl ( <int> , <int> , ShapeBuilder . SPATIAL_CONTEXT ) , circle . getCenter ( ) ) ; circle = ShapeBuilders . newCircleBuilder ( ) . center ( <int> , - <int> ) . radius ( <str> ) . build ( ) ; assertEquals ( ( <int> * <int> ) / earthCircumference , circle . getRadius ( ) , <float> ) ; assertEquals ( new PointImpl ( <int> , - <int> , ShapeBuilder . SPATIAL_CONTEXT ) , circle . getCenter ( ) ) ; double randomLat = ( randomDouble ( ) * <int> ) - <int> ; double randomLon = ( randomDouble ( ) * <int> ) - <int> ; double randomRadius = randomIntBetween ( <int> , ( int ) earthCircumference / <int> ) ; circle = ShapeBuilders . newCircleBuilder ( ) . center ( randomLon , randomLat ) . radius ( randomRadius + <str> ) . build ( ) ; assertEquals ( ( <int> * randomRadius ) / earthCircumference , circle . getRadius ( ) , <float> ) ; assertEquals ( new PointImpl ( randomLon , randomLat , ShapeBuilder . SPATIAL_CONTEXT ) , circle . getCenter ( ) ) ; } public void testPolygonWrapping ( ) { Shape shape = ShapeBuilders . newPolygon ( ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , - <float> ) . point ( - <float> , - <float> ) . close ( ) . build ( ) ; assertMultiPolygon ( shape ) ; } public void testLineStringWrapping ( ) { Shape shape = ShapeBuilders . newLineString ( ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , - <float> ) . point ( - <float> , - <float> ) . build ( ) ; assertMultiLineString ( shape ) ; } public void testDatelineOGC ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) ; builder . hole ( new LineStringBuilder ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) ) ; builder . hole ( new LineStringBuilder ( ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) ) ; Shape shape = builder . close ( ) . build ( ) ; assertMultiPolygon ( shape ) ; } public void testDateline ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) ; builder . hole ( new LineStringBuilder ( ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) ) ; builder . hole ( new LineStringBuilder ( ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) ) ; Shape shape = builder . close ( ) . build ( ) ; assertMultiPolygon ( shape ) ; } public void testComplexShapeWithHole ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) ; builder . hole ( new LineStringBuilder ( ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) . point ( - <float> , <float> ) ) ; Shape shape = builder . close ( ) . build ( ) ; assertPolygon ( shape ) ; } public void testShapeWithHoleAtEdgeEndPoints ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) ; builder . hole ( new LineStringBuilder ( ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) . point ( <int> , <int> ) ) ; Shape shape = builder . close ( ) . build ( ) ; assertPolygon ( shape ) ; } public void testShapeWithPointOnDateline ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) ; Shape shape = builder . close ( ) . build ( ) ; assertPolygon ( shape ) ; } public void testShapeWithEdgeAlongDateline ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) ; Shape shape = builder . close ( ) . build ( ) ; assertPolygon ( shape ) ; builder = ShapeBuilders . newPolygon ( ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) ; shape = builder . close ( ) . build ( ) ; assertPolygon ( shape ) ; } public void testShapeWithBoundaryHoles ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) ; builder . hole ( new LineStringBuilder ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) ) ; Shape shape = builder . close ( ) . build ( ) ; assertMultiPolygon ( shape ) ; builder = ShapeBuilders . newPolygon ( ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) ; builder . hole ( new LineStringBuilder ( ) . point ( - <int> , <int> ) . point ( - <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) ) ; shape = builder . close ( ) . build ( ) ; assertMultiPolygon ( shape ) ; } public void testShapeWithTangentialHole ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) ; builder . hole ( new LineStringBuilder ( ) . point ( - <int> , <int> ) . point ( - <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) ) ; Shape shape = builder . close ( ) . build ( ) ; assertMultiPolygon ( shape ) ; } public void testShapeWithInvalidTangentialHole ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) ; builder . hole ( new LineStringBuilder ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) ) ; try { builder . close ( ) . build ( ) ; fail ( <str> ) ; } catch ( InvalidShapeException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testBoundaryShapeWithTangentialHole ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) ; builder . hole ( new LineStringBuilder ( ) . point ( - <int> , <int> ) . point ( - <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) . point ( - <int> , <int> ) ) ; builder . hole ( new LineStringBuilder ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) ) ; Shape shape = builder . close ( ) . build ( ) ; assertMultiPolygon ( shape ) ; } public void testBoundaryShapeWithInvalidTangentialHole ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( - <int> , - <int> ) . point ( - <int> , <int> ) ; builder . hole ( new LineStringBuilder ( ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( <int> , - <int> ) . point ( - <int> , <int> ) ) ; try { builder . close ( ) . build ( ) ; fail ( <str> ) ; } catch ( InvalidShapeException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testBoundaryShape ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , - <int> ) . point ( - <int> , - <int> ) ; Shape shape = builder . close ( ) . build ( ) ; assertPolygon ( shape ) ; } public void testShapeWithAlternateOrientation ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( - <int> , <int> ) . point ( <int> , <int> ) ; Shape shape = builder . close ( ) . build ( ) ; assertPolygon ( shape ) ; builder = ShapeBuilders . newPolygon ( ) . point ( <int> , <int> ) . point ( - <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) ; shape = builder . close ( ) . build ( ) ; assertMultiPolygon ( shape ) ; } public void testInvalidShapeWithConsecutiveDuplicatePoints ( ) { PolygonBuilder builder = ShapeBuilders . newPolygon ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( - <int> , <int> ) . point ( <int> , <int> ) ; try { builder . close ( ) . build ( ) ; fail ( <str> ) ; } catch ( InvalidShapeException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

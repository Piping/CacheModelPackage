package com . badlogic . gdx . graphics ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; public final class VertexAttribute { public final int usage ; public final int numComponents ; public final boolean normalized ; public final int type ; public int offset ; public String alias ; public int unit ; private final int usageIndex ; public VertexAttribute ( int usage , int numComponents , String alias ) { this ( usage , numComponents , alias , <int> ) ; } public VertexAttribute ( int usage , int numComponents , String alias , int index ) { this ( usage , numComponents , usage = = Usage . ColorPacked ? GL20 . GL_UNSIGNED_BYTE : GL20 . GL_FLOAT , usage = = Usage . ColorPacked , alias , index ) ; } private VertexAttribute ( int usage , int numComponents , int type , boolean normalized , String alias ) { this ( usage , numComponents , type , normalized , alias , <int> ) ; } private VertexAttribute ( int usage , int numComponents , int type , boolean normalized , String alias , int index ) { this . usage = usage ; this . numComponents = numComponents ; this . type = type ; this . normalized = normalized ; this . alias = alias ; this . unit = index ; this . usageIndex = Integer . numberOfTrailingZeros ( usage ) ; } public static VertexAttribute Position ( ) { return new VertexAttribute ( Usage . Position , <int> , ShaderProgram . POSITION_ATTRIBUTE ) ; } public static VertexAttribute TexCoords ( int unit ) { return new VertexAttribute ( Usage . TextureCoordinates , <int> , ShaderProgram . TEXCOORD_ATTRIBUTE + unit , unit ) ; } public static VertexAttribute Normal ( ) { return new VertexAttribute ( Usage . Normal , <int> , ShaderProgram . NORMAL_ATTRIBUTE ) ; } public static VertexAttribute ColorPacked ( ) { return new VertexAttribute ( Usage . ColorPacked , <int> , GL20 . GL_UNSIGNED_BYTE , true , ShaderProgram . COLOR_ATTRIBUTE ) ; } public static VertexAttribute ColorUnpacked ( ) { return new VertexAttribute ( Usage . ColorUnpacked , <int> , GL20 . GL_FLOAT , false , ShaderProgram . COLOR_ATTRIBUTE ) ; } public static VertexAttribute Tangent ( ) { return new VertexAttribute ( Usage . Tangent , <int> , ShaderProgram . TANGENT_ATTRIBUTE ) ; } public static VertexAttribute Binormal ( ) { return new VertexAttribute ( Usage . BiNormal , <int> , ShaderProgram . BINORMAL_ATTRIBUTE ) ; } public static VertexAttribute BoneWeight ( int unit ) { return new VertexAttribute ( Usage . BoneWeight , <int> , <str> + unit , unit ) ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof VertexAttribute ) ) { return false ; } return equals ( ( VertexAttribute ) obj ) ; } public boolean equals ( final VertexAttribute other ) { return other ! = null & & usage = = other . usage & & numComponents = = other . numComponents & & alias . equals ( other . alias ) & & unit = = other . unit ; } public int getKey ( ) { return ( usageIndex < < <int> ) + ( unit & <hex> ) ; } @Override public int hashCode ( ) { int result = getKey ( ) ; result = <int> * result + numComponents ; result = <int> * result + alias . hashCode ( ) ; return result ; } } 

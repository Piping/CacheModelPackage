package org . gradle . language . nativeplatform . internal . incremental . sourceparser ; import org . gradle . language . nativeplatform . internal . Include ; import org . gradle . language . nativeplatform . internal . IncludeType ; public class DefaultInclude implements Include { private final String value ; private final boolean isImport ; private final IncludeType type ; public DefaultInclude ( String value , boolean isImport , IncludeType type ) { if ( value = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( type = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . value = value ; this . isImport = isImport ; this . type = type ; } @Override public String getValue ( ) { return value ; } @Override public boolean isImport ( ) { return isImport ; } @Override public IncludeType getType ( ) { return type ; } public static Include parse ( String value , boolean isImport ) { if ( value . startsWith ( <str> ) & & value . endsWith ( <str> ) ) { return new DefaultInclude ( strip ( value ) , isImport , IncludeType . SYSTEM ) ; } else if ( value . startsWith ( <str> ) & & value . endsWith ( <str> ) ) { return new DefaultInclude ( strip ( value ) , isImport , IncludeType . QUOTED ) ; } else { return new DefaultInclude ( value , isImport , IncludeType . MACRO ) ; } } private static String strip ( String include ) { return include . substring ( <int> , include . length ( ) - <int> ) ; } @Override public String toString ( ) { return value . concat ( <str> ) . concat ( type . toString ( ) ) . concat ( <str> ) . concat ( String . valueOf ( isImport ) ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } DefaultInclude that = ( DefaultInclude ) o ; if ( isImport ! = that . isImport ) { return false ; } if ( type ! = that . type ) { return false ; } if ( value ! = null ? ! value . equals ( that . value ) : that . value ! = null ) { return false ; } return true ; } @Override public int hashCode ( ) { int result = value . hashCode ( ) ; result = <int> * result + ( isImport ? <int> : <int> ) ; result = <int> * result + type . hashCode ( ) ; return result ; } } 

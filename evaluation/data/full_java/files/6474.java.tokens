package org . elasticsearch . index . fielddata . ordinals ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . util . Accountable ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . index . AbstractIndexComponent ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . fielddata . AtomicOrdinalsFieldData ; import org . elasticsearch . index . fielddata . FieldDataType ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource . Nested ; import org . elasticsearch . index . fielddata . IndexOrdinalsFieldData ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . search . MultiValueMode ; import java . util . Collection ; import java . util . Collections ; public abstract class GlobalOrdinalsIndexFieldData extends AbstractIndexComponent implements IndexOrdinalsFieldData , Accountable { private final MappedFieldType . Names fieldNames ; private final FieldDataType fieldDataType ; private final long memorySizeInBytes ; protected GlobalOrdinalsIndexFieldData ( IndexSettings indexSettings , MappedFieldType . Names fieldNames , FieldDataType fieldDataType , long memorySizeInBytes ) { super ( indexSettings ) ; this . fieldNames = fieldNames ; this . fieldDataType = fieldDataType ; this . memorySizeInBytes = memorySizeInBytes ; } @Override public AtomicOrdinalsFieldData loadDirect ( LeafReaderContext context ) throws Exception { return load ( context ) ; } @Override public IndexOrdinalsFieldData loadGlobal ( DirectoryReader indexReader ) { return this ; } @Override public IndexOrdinalsFieldData localGlobalDirect ( DirectoryReader indexReader ) throws Exception { return this ; } @Override public MappedFieldType . Names getFieldNames ( ) { return fieldNames ; } @Override public FieldDataType getFieldDataType ( ) { return fieldDataType ; } @Override public XFieldComparatorSource comparatorSource ( @Nullable Object missingValue , MultiValueMode sortMode , Nested nested ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public void clear ( ) { } @Override public long ramBytesUsed ( ) { return memorySizeInBytes ; } @Override public Collection < Accountable > getChildResources ( ) { return Collections . emptyList ( ) ; } } 

package org . elasticsearch . common . logging . support ; import org . elasticsearch . common . logging . ESLogger ; public abstract class AbstractESLogger implements ESLogger { private final String prefix ; protected AbstractESLogger ( String prefix ) { this . prefix = prefix ; } @Override public String getPrefix ( ) { return this . prefix ; } @Override public void trace ( String msg , Object . . . params ) { if ( isTraceEnabled ( ) ) { internalTrace ( LoggerMessageFormat . format ( prefix , msg , params ) ) ; } } protected abstract void internalTrace ( String msg ) ; @Override public void trace ( String msg , Throwable cause , Object . . . params ) { if ( isTraceEnabled ( ) ) { internalTrace ( LoggerMessageFormat . format ( prefix , msg , params ) , cause ) ; } } protected abstract void internalTrace ( String msg , Throwable cause ) ; @Override public void debug ( String msg , Object . . . params ) { if ( isDebugEnabled ( ) ) { internalDebug ( LoggerMessageFormat . format ( prefix , msg , params ) ) ; } } protected abstract void internalDebug ( String msg ) ; @Override public void debug ( String msg , Throwable cause , Object . . . params ) { if ( isDebugEnabled ( ) ) { internalDebug ( LoggerMessageFormat . format ( prefix , msg , params ) , cause ) ; } } protected abstract void internalDebug ( String msg , Throwable cause ) ; @Override public void info ( String msg , Object . . . params ) { if ( isInfoEnabled ( ) ) { internalInfo ( LoggerMessageFormat . format ( prefix , msg , params ) ) ; } } protected abstract void internalInfo ( String msg ) ; @Override public void info ( String msg , Throwable cause , Object . . . params ) { if ( isInfoEnabled ( ) ) { internalInfo ( LoggerMessageFormat . format ( prefix , msg , params ) , cause ) ; } } protected abstract void internalInfo ( String msg , Throwable cause ) ; @Override public void warn ( String msg , Object . . . params ) { if ( isWarnEnabled ( ) ) { internalWarn ( LoggerMessageFormat . format ( prefix , msg , params ) ) ; } } protected abstract void internalWarn ( String msg ) ; @Override public void warn ( String msg , Throwable cause , Object . . . params ) { if ( isWarnEnabled ( ) ) { internalWarn ( LoggerMessageFormat . format ( prefix , msg , params ) , cause ) ; } } protected abstract void internalWarn ( String msg , Throwable cause ) ; @Override public void error ( String msg , Object . . . params ) { if ( isErrorEnabled ( ) ) { internalError ( LoggerMessageFormat . format ( prefix , msg , params ) ) ; } } protected abstract void internalError ( String msg ) ; @Override public void error ( String msg , Throwable cause , Object . . . params ) { if ( isErrorEnabled ( ) ) { internalError ( LoggerMessageFormat . format ( prefix , msg , params ) , cause ) ; } } protected abstract void internalError ( String msg , Throwable cause ) ; } 

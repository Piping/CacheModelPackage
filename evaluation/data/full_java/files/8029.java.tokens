package org . elasticsearch . discovery . zen . ping . unicast ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . network . NetworkAddress ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . InetSocketTransportAddress ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . discovery . zen . elect . ElectMasterService ; import org . elasticsearch . discovery . zen . ping . PingContextProvider ; import org . elasticsearch . discovery . zen . ping . ZenPing ; import org . elasticsearch . node . service . NodeService ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import org . elasticsearch . transport . netty . NettyTransport ; import java . net . InetSocketAddress ; import static org . hamcrest . Matchers . equalTo ; public class UnicastZenPingIT extends ESTestCase { public void testSimplePings ( ) throws InterruptedException { Settings settings = Settings . EMPTY ; int startPort = <int> + randomIntBetween ( <int> , <int> ) ; int endPort = startPort + <int> ; settings = Settings . builder ( ) . put ( settings ) . put ( <str> , startPort + <str> + endPort ) . build ( ) ; ThreadPool threadPool = new ThreadPool ( getClass ( ) . getName ( ) ) ; ClusterName clusterName = new ClusterName ( <str> ) ; NetworkService networkService = new NetworkService ( settings ) ; ElectMasterService electMasterService = new ElectMasterService ( settings , Version . CURRENT ) ; NettyTransport transportA = new NettyTransport ( settings , threadPool , networkService , BigArrays . NON_RECYCLING_INSTANCE , Version . CURRENT , new NamedWriteableRegistry ( ) ) ; final TransportService transportServiceA = new TransportService ( transportA , threadPool ) . start ( ) ; final DiscoveryNode nodeA = new DiscoveryNode ( <str> , transportServiceA . boundAddress ( ) . publishAddress ( ) , Version . CURRENT ) ; InetSocketTransportAddress addressA = ( InetSocketTransportAddress ) transportA . boundAddress ( ) . publishAddress ( ) ; NettyTransport transportB = new NettyTransport ( settings , threadPool , networkService , BigArrays . NON_RECYCLING_INSTANCE , Version . CURRENT , new NamedWriteableRegistry ( ) ) ; final TransportService transportServiceB = new TransportService ( transportB , threadPool ) . start ( ) ; final DiscoveryNode nodeB = new DiscoveryNode ( <str> , transportServiceA . boundAddress ( ) . publishAddress ( ) , Version . CURRENT ) ; InetSocketTransportAddress addressB = ( InetSocketTransportAddress ) transportB . boundAddress ( ) . publishAddress ( ) ; Settings hostsSettings = Settings . settingsBuilder ( ) . putArray ( <str> , NetworkAddress . formatAddress ( new InetSocketAddress ( addressA . address ( ) . getAddress ( ) , addressA . address ( ) . getPort ( ) ) ) , NetworkAddress . formatAddress ( new InetSocketAddress ( addressB . address ( ) . getAddress ( ) , addressB . address ( ) . getPort ( ) ) ) ) . build ( ) ; UnicastZenPing zenPingA = new UnicastZenPing ( hostsSettings , threadPool , transportServiceA , clusterName , Version . CURRENT , electMasterService , null ) ; zenPingA . setPingContextProvider ( new PingContextProvider ( ) { @Override public DiscoveryNodes nodes ( ) { return DiscoveryNodes . builder ( ) . put ( nodeA ) . localNodeId ( <str> ) . build ( ) ; } @Override public NodeService nodeService ( ) { return null ; } @Override public boolean nodeHasJoinedClusterOnce ( ) { return false ; } } ) ; zenPingA . start ( ) ; UnicastZenPing zenPingB = new UnicastZenPing ( hostsSettings , threadPool , transportServiceB , clusterName , Version . CURRENT , electMasterService , null ) ; zenPingB . setPingContextProvider ( new PingContextProvider ( ) { @Override public DiscoveryNodes nodes ( ) { return DiscoveryNodes . builder ( ) . put ( nodeB ) . localNodeId ( <str> ) . build ( ) ; } @Override public NodeService nodeService ( ) { return null ; } @Override public boolean nodeHasJoinedClusterOnce ( ) { return true ; } } ) ; zenPingB . start ( ) ; try { logger . info ( <str> ) ; ZenPing . PingResponse [ ] pingResponses = zenPingA . pingAndWait ( TimeValue . timeValueSeconds ( <int> ) ) ; assertThat ( pingResponses . length , equalTo ( <int> ) ) ; assertThat ( pingResponses [ <int> ] . node ( ) . id ( ) , equalTo ( <str> ) ) ; assertTrue ( pingResponses [ <int> ] . hasJoinedOnce ( ) ) ; logger . info ( <str> ) ; pingResponses = zenPingB . pingAndWait ( TimeValue . timeValueSeconds ( <int> ) ) ; assertThat ( pingResponses . length , equalTo ( <int> ) ) ; assertThat ( pingResponses [ <int> ] . node ( ) . id ( ) , equalTo ( <str> ) ) ; assertFalse ( pingResponses [ <int> ] . hasJoinedOnce ( ) ) ; } finally { zenPingA . close ( ) ; zenPingB . close ( ) ; transportServiceA . close ( ) ; transportServiceB . close ( ) ; terminate ( threadPool ) ; } } } 

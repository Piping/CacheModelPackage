package com . badlogic . gdx . backends . iosrobovm ; import com . badlogic . gdx . Audio ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . audio . AudioDevice ; import com . badlogic . gdx . audio . AudioRecorder ; import com . badlogic . gdx . audio . Music ; import com . badlogic . gdx . audio . Sound ; import com . badlogic . gdx . backends . iosrobovm . objectal . OALAudioTrack ; import com . badlogic . gdx . backends . iosrobovm . objectal . OALSimpleAudio ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class IOSAudio implements Audio { public IOSAudio ( IOSApplicationConfiguration config ) { OALSimpleAudio audio = OALSimpleAudio . sharedInstance ( ) ; if ( audio ! = null ) { audio . setAllowIpod ( config . allowIpod ) ; audio . setHonorSilentSwitch ( true ) ; } else Gdx . app . error ( <str> , <str> ) ; } @Override public AudioDevice newAudioDevice ( int samplingRate , boolean isMono ) { return null ; } @Override public AudioRecorder newAudioRecorder ( int samplingRate , boolean isMono ) { return null ; } @Override public Sound newSound ( FileHandle fileHandle ) { return new IOSSound ( fileHandle ) ; } @Override public Music newMusic ( FileHandle fileHandle ) { String path = fileHandle . file ( ) . getPath ( ) . replace ( <str> , <str> ) ; OALAudioTrack track = OALAudioTrack . create ( ) ; if ( track ! = null ) { if ( track . preloadFile ( path ) ) { return new IOSMusic ( track ) ; } } throw new GdxRuntimeException ( <str> + path ) ; } } 

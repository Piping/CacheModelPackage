package com . google . common . hash ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import java . io . FilterInputStream ; import java . io . IOException ; import java . io . InputStream ; import javax . annotation . CheckReturnValue ; @Beta public final class HashingInputStream extends FilterInputStream { private final Hasher hasher ; public HashingInputStream ( HashFunction hashFunction , InputStream in ) { super ( checkNotNull ( in ) ) ; this . hasher = checkNotNull ( hashFunction . newHasher ( ) ) ; } @Override public int read ( ) throws IOException { int b = in . read ( ) ; if ( b ! = - <int> ) { hasher . putByte ( ( byte ) b ) ; } return b ; } @Override public int read ( byte [ ] bytes , int off , int len ) throws IOException { int numOfBytesRead = in . read ( bytes , off , len ) ; if ( numOfBytesRead ! = - <int> ) { hasher . putBytes ( bytes , off , numOfBytesRead ) ; } return numOfBytesRead ; } @Override @CheckReturnValue public boolean markSupported ( ) { return false ; } @Override public void mark ( int readlimit ) { } @Override public void reset ( ) throws IOException { throw new IOException ( <str> ) ; } @CheckReturnValue public HashCode hash ( ) { return hasher . hash ( ) ; } } 

package org . elasticsearch . index . mapper ; import org . elasticsearch . common . Strings ; import org . elasticsearch . index . mapper . object . ObjectMapper ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; public class MergeResult { private final boolean simulate ; private final boolean updateAllTypes ; private final List < String > conflicts = new ArrayList < > ( ) ; private final List < FieldMapper > newFieldMappers = new ArrayList < > ( ) ; private final List < ObjectMapper > newObjectMappers = new ArrayList < > ( ) ; public MergeResult ( boolean simulate , boolean updateAllTypes ) { this . simulate = simulate ; this . updateAllTypes = updateAllTypes ; } public void addFieldMappers ( Collection < FieldMapper > fieldMappers ) { assert simulate ( ) = = false ; newFieldMappers . addAll ( fieldMappers ) ; } public void addObjectMappers ( Collection < ObjectMapper > objectMappers ) { assert simulate ( ) = = false ; newObjectMappers . addAll ( objectMappers ) ; } public Collection < FieldMapper > getNewFieldMappers ( ) { return newFieldMappers ; } public Collection < ObjectMapper > getNewObjectMappers ( ) { return newObjectMappers ; } public boolean simulate ( ) { return simulate ; } public boolean updateAllTypes ( ) { return updateAllTypes ; } public void addConflict ( String mergeFailure ) { conflicts . add ( mergeFailure ) ; } public boolean hasConflicts ( ) { return conflicts . isEmpty ( ) = = false ; } public String [ ] buildConflicts ( ) { return conflicts . toArray ( Strings . EMPTY_ARRAY ) ; } } 

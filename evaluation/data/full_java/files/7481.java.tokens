package org . elasticsearch . search . fetch . innerhits ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . script . Script ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . search . highlight . HighlightBuilder ; import org . elasticsearch . search . sort . SortBuilder ; import org . elasticsearch . search . sort . SortOrder ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class InnerHitsBuilder implements ToXContent { private final Map < String , InnerHitsHolder > innerHits = new HashMap < > ( ) ; @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( <str> ) ; innerXContent ( builder , params ) ; return builder . endObject ( ) ; } public void innerXContent ( XContentBuilder builder , Params params ) throws IOException { for ( Map . Entry < String , InnerHitsHolder > entry : innerHits . entrySet ( ) ) { builder . startObject ( entry . getKey ( ) ) ; entry . getValue ( ) . toXContent ( builder , params ) ; builder . endObject ( ) ; } } public void addNestedInnerHits ( String name , String path , InnerHit innerHit ) { if ( innerHits . containsKey ( name ) ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } innerHits . put ( name , new NestedInnerHitsHolder ( path , innerHit ) ) ; } public void addParentChildInnerHits ( String name , String type , InnerHit innerHit ) { innerHits . put ( name , new ParentChildInnerHitsHolder ( type , innerHit ) ) ; } private static class InnerHitsHolder implements ToXContent { private final InnerHit hits ; private InnerHitsHolder ( InnerHit hits ) { this . hits = hits ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { return hits . toXContent ( builder , params ) ; } } private static class ParentChildInnerHitsHolder extends InnerHitsHolder { private final String type ; private ParentChildInnerHitsHolder ( String type , InnerHit hits ) { super ( hits ) ; this . type = type ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( <str> ) . startObject ( type ) ; super . toXContent ( builder , params ) ; return builder . endObject ( ) . endObject ( ) ; } } private static class NestedInnerHitsHolder extends InnerHitsHolder { private final String path ; private NestedInnerHitsHolder ( String path , InnerHit hits ) { super ( hits ) ; this . path = path ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( <str> ) . startObject ( path ) ; super . toXContent ( builder , params ) ; return builder . endObject ( ) . endObject ( ) ; } } public static class InnerHit implements ToXContent { private SearchSourceBuilder sourceBuilder ; private String path ; private String type ; public InnerHit setFrom ( int from ) { sourceBuilder ( ) . from ( from ) ; return this ; } public InnerHit setSize ( int size ) { sourceBuilder ( ) . size ( size ) ; return this ; } public InnerHit setTrackScores ( boolean trackScores ) { sourceBuilder ( ) . trackScores ( trackScores ) ; return this ; } public InnerHit setExplain ( boolean explain ) { sourceBuilder ( ) . explain ( explain ) ; return this ; } public InnerHit setVersion ( boolean version ) { sourceBuilder ( ) . version ( version ) ; return this ; } public InnerHit field ( String name ) { sourceBuilder ( ) . field ( name ) ; return this ; } public InnerHit setNoFields ( ) { sourceBuilder ( ) . noFields ( ) ; return this ; } public InnerHit setFetchSource ( boolean fetch ) { sourceBuilder ( ) . fetchSource ( fetch ) ; return this ; } public InnerHit setFetchSource ( @Nullable String include , @Nullable String exclude ) { sourceBuilder ( ) . fetchSource ( include , exclude ) ; return this ; } public InnerHit setFetchSource ( @Nullable String [ ] includes , @Nullable String [ ] excludes ) { sourceBuilder ( ) . fetchSource ( includes , excludes ) ; return this ; } public InnerHit addFieldDataField ( String name ) { sourceBuilder ( ) . fieldDataField ( name ) ; return this ; } public InnerHit addScriptField ( String name , Script script ) { sourceBuilder ( ) . scriptField ( name , script ) ; return this ; } public InnerHit addSort ( String field , SortOrder order ) { sourceBuilder ( ) . sort ( field , order ) ; return this ; } public InnerHit addSort ( SortBuilder sort ) { sourceBuilder ( ) . sort ( sort ) ; return this ; } public BytesReference highlighter ( ) { return sourceBuilder ( ) . highlighter ( ) ; } public InnerHit highlighter ( HighlightBuilder highlightBuilder ) { sourceBuilder ( ) . highlighter ( highlightBuilder ) ; return this ; } protected SearchSourceBuilder sourceBuilder ( ) { if ( sourceBuilder = = null ) { sourceBuilder = new SearchSourceBuilder ( ) ; } return sourceBuilder ; } public InnerHit setQuery ( QueryBuilder query ) { sourceBuilder ( ) . query ( query ) ; return this ; } public InnerHit innerHits ( InnerHitsBuilder innerHitsBuilder ) { sourceBuilder ( ) . innerHits ( innerHitsBuilder ) ; return this ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { if ( sourceBuilder ! = null ) { sourceBuilder . innerToXContent ( builder , params ) ; } return builder ; } } } 

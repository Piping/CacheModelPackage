package com . badlogic . gdx . scenes . scene2d . actions ; import com . badlogic . gdx . math . Interpolation ; import com . badlogic . gdx . scenes . scene2d . Action ; import com . badlogic . gdx . utils . Pool ; abstract public class TemporalAction extends Action { private float duration , time ; private Interpolation interpolation ; private boolean reverse , began , complete ; public TemporalAction ( ) { } public TemporalAction ( float duration ) { this . duration = duration ; } public TemporalAction ( float duration , Interpolation interpolation ) { this . duration = duration ; this . interpolation = interpolation ; } public boolean act ( float delta ) { if ( complete ) return true ; Pool pool = getPool ( ) ; setPool ( null ) ; try { if ( ! began ) { begin ( ) ; began = true ; } time + = delta ; complete = time > = duration ; float percent ; if ( complete ) percent = <int> ; else { percent = time / duration ; if ( interpolation ! = null ) percent = interpolation . apply ( percent ) ; } update ( reverse ? <int> - percent : percent ) ; if ( complete ) end ( ) ; return complete ; } finally { setPool ( pool ) ; } } protected void begin ( ) { } protected void end ( ) { } abstract protected void update ( float percent ) ; public void finish ( ) { time = duration ; } public void restart ( ) { time = <int> ; began = false ; complete = false ; } public void reset ( ) { super . reset ( ) ; reverse = false ; interpolation = null ; } public float getTime ( ) { return time ; } public void setTime ( float time ) { this . time = time ; } public float getDuration ( ) { return duration ; } public void setDuration ( float duration ) { this . duration = duration ; } public Interpolation getInterpolation ( ) { return interpolation ; } public void setInterpolation ( Interpolation interpolation ) { this . interpolation = interpolation ; } public boolean isReverse ( ) { return reverse ; } public void setReverse ( boolean reverse ) { this . reverse = reverse ; } } 

package org . gradle . build . docs . dsl . source . model ; import org . gradle . api . Action ; import java . io . Serializable ; public class PropertyMetaData extends AbstractLanguageElement implements Serializable , TypeContainer { private TypeMetaData type ; private final String name ; private final ClassMetaData ownerClass ; private MethodMetaData setter ; private MethodMetaData getter ; public PropertyMetaData ( String name , ClassMetaData ownerClass ) { this . name = name ; this . ownerClass = ownerClass ; } public String getName ( ) { return name ; } @Override public String toString ( ) { return String . format ( <str> , ownerClass , name ) ; } public TypeMetaData getType ( ) { return type ; } public void setType ( TypeMetaData type ) { this . type = type ; } public boolean isWriteable ( ) { return setter ! = null ; } public ClassMetaData getOwnerClass ( ) { return ownerClass ; } public String getSignature ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( type . getSignature ( ) ) ; builder . append ( <str> ) ; builder . append ( name ) ; return builder . toString ( ) ; } public MethodMetaData getGetter ( ) { return getter ; } public void setGetter ( MethodMetaData getter ) { this . getter = getter ; } public MethodMetaData getSetter ( ) { return setter ; } public void setSetter ( MethodMetaData setter ) { this . setter = setter ; } public PropertyMetaData getOverriddenProperty ( ) { MethodMetaData overriddenMethod = null ; if ( getter ! = null ) { overriddenMethod = getter . getOverriddenMethod ( ) ; } if ( overriddenMethod = = null & & setter ! = null ) { overriddenMethod = setter . getOverriddenMethod ( ) ; } if ( overriddenMethod ! = null ) { return overriddenMethod . getOwnerClass ( ) . findDeclaredProperty ( name ) ; } return null ; } public void visitTypes ( Action < TypeMetaData > action ) { action . execute ( type ) ; } } 

package org . apache . cassandra . cql3 . validation . operations ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . exceptions . SyntaxException ; import org . apache . cassandra . schema . SchemaKeyspace ; import static java . lang . String . format ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class InsertUpdateIfConditionTest extends CQLTester { @Test public void testSimpleCas ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { execute ( <str> , i ) ; assertRows ( execute ( <str> , i ) , row ( true ) ) ; assertRows ( execute ( <str> , i ) , row ( false , true ) ) ; } } @Test public void testConditionalUpdate ( ) throws Throwable { createTable ( <str> ) ; assertRows ( execute ( <str> ) , row ( false ) ) ; assertRows ( execute ( <str> ) , row ( false ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> , <int> , <str> , null ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <str> , null ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <str> , null ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <str> , null ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <str> , null ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <str> , null ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <str> , null ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <str> , null ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null , null ) ) ; assertRows ( execute ( <str> ) , row ( false , null ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , null , null , null ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertEmpty ( execute ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( false ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testNonEqConditionalUpdate ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> ) ) ; } @Test public void testConditionalDelete ( ) throws Throwable { createTable ( <str> ) ; assertRows ( execute ( <str> ) , row ( false ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertEmpty ( execute ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( false ) ) ; execute ( <str> ) ; Thread . sleep ( <int> ) ; assertRows ( execute ( <str> ) , row ( false ) ) ; assertEmpty ( execute ( <str> ) ) ; execute ( <str> ) ; Thread . sleep ( <int> ) ; assertRows ( execute ( <str> ) , row ( false ) ) ; assertEmpty ( execute ( <str> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; execute ( <str> ) ; execute ( <str> ) ; Thread . sleep ( <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertEmpty ( execute ( <str> ) ) ; createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( false ) ) ; assertRows ( execute ( <str> ) , row ( false ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( false , <int> ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , null ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertEmpty ( execute ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , null , <int> , null ) ) ; } @Test public void testStaticColumnsCas ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( false , <int> , <str> , null , <str> ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> , <str> ) ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> , <str> ) , row ( <int> , <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> ) , row ( false , <int> , null , <int> ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> , <str> ) , row ( <int> , <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> ) , row ( false , <int> , <str> , <int> , <str> ) , row ( false , <int> , <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> , <str> ) , row ( <int> , <str> , <int> , <str> ) ) ; assertInvalid ( <str> + <str> + <str> + <str> + <str> ) ; assertRows ( execute ( <str> + <str> + <str> + <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , null , <str> ) , row ( <int> , <str> , null , <str> ) ) ; assertRows ( execute ( <str> ) , row ( false , <int> , <str> , null , <str> ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> ) , row ( false , <int> , <str> , null , <str> ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> ) , row ( false , <int> , <str> , null , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , null , <str> ) , row ( <int> , <str> , null , <str> ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> , <int> , <str> ) , row ( <int> , <str> , <int> , <str> ) , row ( <int> , <str> , <int> , <str> ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> ) , row ( false , <int> , <str> , <str> ) ) ; } @Test public void testInsertSetIfNotExists ( ) throws Throwable { createTable ( <str> ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( <int> , <int> , <int> ) ) ) ; } @Test public void testCasAndTTL ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; Thread . sleep ( <int> ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; } @Test public void testCompactStorage ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( false , <str> ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; } @Test public void testWholeList ( ) throws Throwable { for ( boolean frozen : new boolean [ ] { false , true } ) { createTable ( String . format ( <str> , frozen ? <str> : <str> ) ) ; execute ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , SyntaxException . class ) ; check_invalid_list ( <str> , SyntaxException . class ) ; check_invalid_list ( <str> , SyntaxException . class ) ; check_invalid_list ( <str> , SyntaxException . class ) ; } } void check_applies_list ( String condition ) throws Throwable { assertRows ( execute ( <str> + condition ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( <str> , <str> , <str> ) ) ) ; } void check_does_not_apply_list ( String condition ) throws Throwable { assertRows ( execute ( <str> + condition ) , row ( false , list ( <str> , <str> , <str> ) ) ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( <str> , <str> , <str> ) ) ) ; } void check_invalid_list ( String condition , Class < ? extends Throwable > expected ) throws Throwable { assertInvalidThrow ( expected , <str> + condition ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( <str> , <str> , <str> ) ) ) ; } @Test public void testListItem ( ) throws Throwable { for ( boolean frozen : new boolean [ ] { false , true } ) { createTable ( String . format ( <str> , frozen ? <str> : <str> ) ) ; execute ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertRows ( execute ( <str> ) , row ( false , list ( <str> , <str> , <str> ) ) ) ; assertRows ( execute ( <str> ) , row ( false , list ( <str> , <str> , <str> ) ) ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( <str> , <str> , <str> ) ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertEmpty ( execute ( <str> ) ) ; } } @Test public void testExpandedListItem ( ) throws Throwable { for ( boolean frozen : new boolean [ ] { false , true } ) { createTable ( String . format ( <str> , frozen ? <str> : <str> ) ) ; execute ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_applies_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_does_not_apply_list ( <str> ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , SyntaxException . class ) ; check_invalid_list ( <str> , SyntaxException . class ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; check_invalid_list ( <str> , SyntaxException . class ) ; check_invalid_list ( <str> , SyntaxException . class ) ; check_invalid_list ( <str> , InvalidRequestException . class ) ; } } @Test public void testWholeSet ( ) throws Throwable { for ( boolean frozen : new boolean [ ] { false , true } ) { createTable ( String . format ( <str> , frozen ? <str> : <str> ) ) ; execute ( <str> ) ; check_applies_set ( <str> ) ; check_applies_set ( <str> ) ; check_applies_set ( <str> ) ; check_applies_set ( <str> ) ; check_applies_set ( <str> ) ; check_applies_set ( <str> ) ; check_applies_set ( <str> ) ; check_applies_set ( <str> ) ; check_applies_set ( <str> ) ; check_applies_set ( <str> ) ; check_does_not_apply_set ( <str> ) ; check_does_not_apply_set ( <str> ) ; check_does_not_apply_set ( <str> ) ; check_does_not_apply_set ( <str> ) ; check_does_not_apply_set ( <str> ) ; check_does_not_apply_set ( <str> ) ; check_does_not_apply_set ( <str> ) ; check_does_not_apply_set ( <str> ) ; check_does_not_apply_set ( <str> ) ; check_invalid_set ( <str> , InvalidRequestException . class ) ; check_invalid_set ( <str> , InvalidRequestException . class ) ; check_invalid_set ( <str> , InvalidRequestException . class ) ; check_invalid_set ( <str> , InvalidRequestException . class ) ; check_invalid_set ( <str> , InvalidRequestException . class ) ; check_invalid_set ( <str> , SyntaxException . class ) ; check_invalid_set ( <str> , SyntaxException . class ) ; check_invalid_set ( <str> , SyntaxException . class ) ; check_invalid_set ( <str> , InvalidRequestException . class ) ; check_invalid_set ( <str> , SyntaxException . class ) ; } } void check_applies_set ( String condition ) throws Throwable { assertRows ( execute ( <str> + condition ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( <str> , <str> ) ) ) ; } void check_does_not_apply_set ( String condition ) throws Throwable { assertRows ( execute ( <str> + condition ) , row ( false , set ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( <str> , <str> ) ) ) ; } void check_invalid_set ( String condition , Class < ? extends Throwable > expected ) throws Throwable { assertInvalidThrow ( expected , <str> + condition ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( <str> , <str> ) ) ) ; } @Test public void testWholeMap ( ) throws Throwable { for ( boolean frozen : new boolean [ ] { false , true } ) { createTable ( String . format ( <str> , frozen ? <str> : <str> ) ) ; execute ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; check_invalid_map ( <str> , SyntaxException . class ) ; check_invalid_map ( <str> , SyntaxException . class ) ; check_invalid_map ( <str> , SyntaxException . class ) ; check_invalid_map ( <str> , SyntaxException . class ) ; check_invalid_map ( <str> , SyntaxException . class ) ; } } @Test public void testMapItem ( ) throws Throwable { for ( boolean frozen : new boolean [ ] { false , true } ) { createTable ( String . format ( <str> , frozen ? <str> : <str> ) ) ; execute ( <str> ) ; assertInvalid ( <str> ) ; assertRows ( execute ( <str> ) , row ( false , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> ) , row ( false , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertEmpty ( execute ( <str> ) ) ; execute ( <str> ) ; if ( frozen ) assertInvalid ( <str> ) ; else assertRows ( execute ( <str> ) , row ( true ) ) ; } } @Test public void testExpandedMapItem ( ) throws Throwable { for ( boolean frozen : new boolean [ ] { false , true } ) { createTable ( String . format ( <str> , frozen ? <str> : <str> ) ) ; execute ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_applies_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_does_not_apply_map ( <str> ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; check_invalid_map ( <str> , SyntaxException . class ) ; check_invalid_map ( <str> , SyntaxException . class ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; check_invalid_map ( <str> , SyntaxException . class ) ; check_invalid_map ( <str> , SyntaxException . class ) ; check_invalid_map ( <str> , InvalidRequestException . class ) ; } } void check_applies_map ( String condition ) throws Throwable { assertRows ( execute ( <str> + condition ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , <str> ) ) ) ; } void check_does_not_apply_map ( String condition ) throws Throwable { assertRows ( execute ( <str> + condition ) , row ( false , map ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , <str> ) ) ) ; } void check_invalid_map ( String condition , Class < ? extends Throwable > expected ) throws Throwable { assertInvalidThrow ( expected , <str> + condition ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , <str> ) ) ) ; } @Test public void testCasAndListIndex ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( false , <str> ) ) ; assertRows ( execute ( <str> ) , row ( true ) ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( <str> , <str> ) , <str> ) ) ; } @Test public void testDropCreateKeyspaceIfNotExists ( ) throws Throwable { String keyspace = KEYSPACE_PER_TEST ; dropPerTestKeyspace ( ) ; dropPerTestKeyspace ( ) ; schemaChange ( <str> + keyspace + <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . KEYSPACES ) , keyspace ) , row ( true ) ) ; schemaChange ( <str> + keyspace + <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . KEYSPACES ) , keyspace ) , row ( true ) ) ; schemaChange ( <str> + keyspace ) ; assertEmpty ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . KEYSPACES ) , keyspace ) ) ; } @Test public void testDropCreateTableIfNotExists ( ) throws Throwable { String tableName = createTableName ( ) ; String fullTableName = KEYSPACE + <str> + tableName ; schemaChange ( <str> + fullTableName ) ; schemaChange ( <str> + fullTableName + <str> ) ; assertRows ( execute ( <str> , KEYSPACE , tableName ) , row ( <str> ) ) ; schemaChange ( <str> + fullTableName + <str> ) ; assertRows ( execute ( <str> , KEYSPACE , tableName ) , row ( <str> ) ) ; schemaChange ( <str> + fullTableName ) ; assertEmpty ( execute ( <str> , KEYSPACE , tableName ) ) ; } @Test public void testDropCreateIndexIfNotExists ( ) throws Throwable { String tableName = createTable ( <str> ) ; execute ( <str> + KEYSPACE ) ; schemaChange ( <str> ) ; createIndex ( <str> ) ; assertTrue ( waitForIndex ( KEYSPACE , tableName , <str> ) ) ; execute ( <str> ) ; execute ( <str> ) ; Object [ ] [ ] rows = getRows ( execute ( <str> , tableName ) ) ; assertEquals ( <int> , rows . length ) ; } @Test public void testDropCreateTypeIfNotExists ( ) throws Throwable { execute ( <str> + KEYSPACE ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TYPES ) , KEYSPACE , <str> ) , row ( <str> ) ) ; execute ( <str> ) ; execute ( <str> ) ; assertEmpty ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TYPES ) , KEYSPACE , <str> ) ) ; } } 

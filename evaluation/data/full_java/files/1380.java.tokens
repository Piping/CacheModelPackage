package org . apache . cassandra . cql3 . validation . entities ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . cql3 . CQLTester ; import static junit . framework . Assert . assertNull ; import static org . junit . Assert . assertTrue ; public class TimestampTest extends CQLTester { @Test public void testNegativeTimestamps ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> , - <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( - <int> ) ) ; assertInvalid ( <str> , <int> , <int> , Long . MIN_VALUE ) ; } @Test public void testTimestampTTL ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; Object [ ] [ ] res = getRows ( execute ( <str> ) ) ; Assert . assertEquals ( <int> , res . length ) ; for ( Object [ ] r : res ) { assertTrue ( r [ <int> ] instanceof Integer | | r [ <int> ] instanceof Long ) ; if ( r [ <int> ] . equals ( <int> ) ) assertNull ( r [ <int> ] ) ; else assertTrue ( r [ <int> ] instanceof Integer | | r [ <int> ] instanceof Long ) ; } res = getRows ( execute ( <str> ) ) ; Assert . assertEquals ( <int> , res . length ) ; for ( Object [ ] r : res ) { assertTrue ( r [ <int> ] instanceof Integer | | r [ <int> ] instanceof Long ) ; if ( r [ <int> ] . equals ( <int> ) ) assertNull ( r [ <int> ] ) ; else assertTrue ( r [ <int> ] instanceof Integer | | r [ <int> ] instanceof Long ) ; } res = getRows ( execute ( <str> ) ) ; Assert . assertEquals ( <int> , res . length ) ; for ( Object [ ] r : res ) { assertTrue ( r [ <int> ] instanceof Integer | | r [ <int> ] instanceof Long ) ; if ( r [ <int> ] . equals ( <int> ) ) assertNull ( r [ <int> ] ) ; else assertTrue ( r [ <int> ] instanceof Integer | | r [ <int> ] instanceof Long ) ; } assertInvalid ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , null , null ) ) ; } @Test public void testInvalidCustomTimestamp ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + <str> + <str> + <str> ) ; assertInvalid ( <str> + <str> + <str> + <str> ) ; assertInvalid ( <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; assertInvalid ( <str> ) ; createTable ( <str> ) ; execute ( <str> ) ; assertInvalid ( <str> ) ; execute ( <str> + <str> + <str> + <str> ) ; assertInvalid ( <str> + <str> + <str> + <str> ) ; assertInvalid ( <str> + <str> + <str> + <str> ) ; } @Test public void testInsertTimestampWithUnset ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , unset ( ) ) ; } } 

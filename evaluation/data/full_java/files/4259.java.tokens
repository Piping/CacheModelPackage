package org . eclipse . debug . internal . ui . model . elements ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . ui . IMemento ; public class BreakpointMementoProvider extends ElementMementoProvider { private static final String MARKER_ID = <str> ; private static final String RESOURCE_PATH = <str> ; protected boolean supportsContextId ( String id ) { return IDebugUIConstants . ID_BREAKPOINT_VIEW . equals ( id ) ; } @Override protected boolean encodeElement ( Object element , IMemento memento , IPresentationContext context ) throws CoreException { if ( element instanceof IBreakpoint ) { IMarker marker = ( ( IBreakpoint ) element ) . getMarker ( ) ; if ( marker ! = null ) { long markerId = marker . getId ( ) ; memento . putString ( MARKER_ID , Long . toString ( markerId ) ) ; IPath fullPath = marker . getResource ( ) . getFullPath ( ) ; String path = fullPath . toString ( ) ; memento . putString ( RESOURCE_PATH , path ) ; return true ; } } return false ; } @Override protected boolean isEqual ( Object element , IMemento memento , IPresentationContext context ) throws CoreException { if ( element instanceof IBreakpoint ) { IBreakpoint breakpoint = ( IBreakpoint ) element ; IMarker marker = breakpoint . getMarker ( ) ; long markerId = marker . getId ( ) ; String mementoMarkerId = memento . getString ( MARKER_ID ) ; if ( ! Long . toString ( markerId ) . equals ( mementoMarkerId ) ) { return false ; } IPath fullPath = marker . getResource ( ) . getFullPath ( ) ; String path = fullPath . toString ( ) ; String mementoPath = memento . getString ( RESOURCE_PATH ) ; if ( ! path . equals ( mementoPath ) ) { return false ; } return true ; } return false ; } } 

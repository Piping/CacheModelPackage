package org . apache . cassandra . transport . messages ; import java . nio . ByteBuffer ; import io . netty . buffer . ByteBuf ; import org . apache . cassandra . auth . AuthenticatedUser ; import org . apache . cassandra . auth . IAuthenticator ; import org . apache . cassandra . exceptions . AuthenticationException ; import org . apache . cassandra . service . QueryState ; import org . apache . cassandra . transport . * ; public class AuthResponse extends Message . Request { public static final Message . Codec < AuthResponse > codec = new Message . Codec < AuthResponse > ( ) { public AuthResponse decode ( ByteBuf body , int version ) { if ( version = = <int> ) throw new ProtocolException ( <str> ) ; ByteBuffer b = CBUtil . readValue ( body ) ; byte [ ] token = new byte [ b . remaining ( ) ] ; b . get ( token ) ; return new AuthResponse ( token ) ; } public void encode ( AuthResponse response , ByteBuf dest , int version ) { CBUtil . writeValue ( response . token , dest ) ; } public int encodedSize ( AuthResponse response , int version ) { return CBUtil . sizeOfValue ( response . token ) ; } } ; private final byte [ ] token ; public AuthResponse ( byte [ ] token ) { super ( Message . Type . AUTH_RESPONSE ) ; assert token ! = null ; this . token = token ; } @Override public Response execute ( QueryState queryState ) { try { IAuthenticator . SaslNegotiator negotiator = ( ( ServerConnection ) connection ) . getSaslNegotiator ( queryState ) ; byte [ ] challenge = negotiator . evaluateResponse ( token ) ; if ( negotiator . isComplete ( ) ) { AuthenticatedUser user = negotiator . getAuthenticatedUser ( ) ; queryState . getClientState ( ) . login ( user ) ; return new AuthSuccess ( challenge ) ; } else { return new AuthChallenge ( challenge ) ; } } catch ( AuthenticationException e ) { return ErrorMessage . fromException ( e ) ; } } } 

package org . nd4j . linalg . io ; import java . io . File ; import java . io . FileNotFoundException ; import java . net . MalformedURLException ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URL ; import java . net . URLConnection ; public abstract class ResourceUtils { public static final String CLASSPATH_URL_PREFIX = <str> ; public static final String FILE_URL_PREFIX = <str> ; public static final String URL_PROTOCOL_FILE = <str> ; public static final String URL_PROTOCOL_JAR = <str> ; public static final String URL_PROTOCOL_ZIP = <str> ; public static final String URL_PROTOCOL_VFSZIP = <str> ; public static final String URL_PROTOCOL_VFS = <str> ; public static final String URL_PROTOCOL_WSJAR = <str> ; public static final String URL_PROTOCOL_CODE_SOURCE = <str> ; public static final String JAR_URL_SEPARATOR = <str> ; public ResourceUtils ( ) { } public static boolean isUrl ( String resourceLocation ) { if ( resourceLocation = = null ) { return false ; } else if ( resourceLocation . startsWith ( <str> ) ) { return true ; } else { try { new URL ( resourceLocation ) ; return true ; } catch ( MalformedURLException var2 ) { return false ; } } } public static URL getURL ( String resourceLocation ) throws FileNotFoundException { Assert . notNull ( resourceLocation , <str> ) ; if ( resourceLocation . startsWith ( <str> ) ) { String ex = resourceLocation . substring ( <str> . length ( ) ) ; URL ex2 = ClassUtils . getDefaultClassLoader ( ) . getResource ( ex ) ; if ( ex2 = = null ) { String description = <str> + ex + <str> ; throw new FileNotFoundException ( description + <str> ) ; } else { return ex2 ; } } else { try { return new URL ( resourceLocation ) ; } catch ( MalformedURLException var5 ) { try { return ( new File ( resourceLocation ) ) . toURI ( ) . toURL ( ) ; } catch ( MalformedURLException var4 ) { throw new FileNotFoundException ( <str> + resourceLocation + <str> ) ; } } } } public static File getFile ( String resourceLocation ) throws FileNotFoundException { Assert . notNull ( resourceLocation , <str> ) ; if ( resourceLocation . startsWith ( <str> ) ) { String ex = resourceLocation . substring ( <str> . length ( ) ) ; String description = <str> + ex + <str> ; URL url = ClassUtils . getDefaultClassLoader ( ) . getResource ( ex ) ; if ( url = = null ) { throw new FileNotFoundException ( description + <str> + <str> ) ; } else { return getFile ( ( URL ) url , description ) ; } } else { try { return getFile ( ( URL ) ( new URL ( resourceLocation ) ) ) ; } catch ( MalformedURLException var4 ) { return new File ( resourceLocation ) ; } } } public static File getFile ( URL resourceUrl ) throws FileNotFoundException { return getFile ( ( URL ) resourceUrl , <str> ) ; } public static File getFile ( URL resourceUrl , String description ) throws FileNotFoundException { Assert . notNull ( resourceUrl , <str> ) ; if ( ! <str> . equals ( resourceUrl . getProtocol ( ) ) ) { throw new FileNotFoundException ( description + <str> + <str> + resourceUrl ) ; } else { try { return new File ( toURI ( ( URL ) resourceUrl ) . getSchemeSpecificPart ( ) ) ; } catch ( URISyntaxException var3 ) { return new File ( resourceUrl . getFile ( ) ) ; } } } public static File getFile ( URI resourceUri ) throws FileNotFoundException { return getFile ( ( URI ) resourceUri , <str> ) ; } public static File getFile ( URI resourceUri , String description ) throws FileNotFoundException { Assert . notNull ( resourceUri , <str> ) ; if ( ! <str> . equals ( resourceUri . getScheme ( ) ) ) { throw new FileNotFoundException ( description + <str> + <str> + resourceUri ) ; } else { return new File ( resourceUri . getSchemeSpecificPart ( ) ) ; } } public static boolean isFileURL ( URL url ) { String protocol = url . getProtocol ( ) ; return <str> . equals ( protocol ) | | protocol . startsWith ( <str> ) ; } public static boolean isJarURL ( URL url ) { String protocol = url . getProtocol ( ) ; return <str> . equals ( protocol ) | | <str> . equals ( protocol ) | | <str> . equals ( protocol ) | | <str> . equals ( protocol ) & & url . getPath ( ) . contains ( <str> ) ; } public static URL extractJarFileURL ( URL jarUrl ) throws MalformedURLException { String urlFile = jarUrl . getFile ( ) ; int separatorIndex = urlFile . indexOf ( <str> ) ; if ( separatorIndex ! = - <int> ) { String jarFile = urlFile . substring ( <int> , separatorIndex ) ; try { return new URL ( jarFile ) ; } catch ( MalformedURLException var5 ) { if ( ! jarFile . startsWith ( <str> ) ) { jarFile = <str> + jarFile ; } return new URL ( <str> + jarFile ) ; } } else { return jarUrl ; } } public static URI toURI ( URL url ) throws URISyntaxException { return toURI ( ( String ) url . toString ( ) ) ; } public static URI toURI ( String location ) throws URISyntaxException { return new URI ( StringUtils . replace ( location , <str> , <str> ) ) ; } public static void useCachesIfNecessary ( URLConnection con ) { con . setUseCaches ( con . getClass ( ) . getSimpleName ( ) . startsWith ( <str> ) ) ; } } 

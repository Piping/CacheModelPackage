package org . eclipse . debug . internal . ui . sourcelookup . browsers ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . core . sourcelookup . containers . ArchiveSourceContainer ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . sourcelookup . SourceLookupUIMessages ; import org . eclipse . debug . ui . sourcelookup . AbstractSourceContainerBrowser ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . ITreeContentProvider ; import org . eclipse . jface . viewers . ViewerFilter ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . dialogs . ElementTreeSelectionDialog ; import org . eclipse . ui . dialogs . ISelectionStatusValidator ; import org . eclipse . ui . model . WorkbenchContentProvider ; import org . eclipse . ui . model . WorkbenchLabelProvider ; import org . eclipse . ui . views . navigator . ResourceComparator ; public class ArchiveSourceContainerBrowser extends AbstractSourceContainerBrowser { private ISelectionStatusValidator validator = new ISelectionStatusValidator ( ) { @Override public IStatus validate ( Object [ ] selection ) { if ( selection . length = = <int> ) { return new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , IInternalDebugCoreConstants . EMPTY_STRING , null ) ; } for ( int i = <int> ; i < selection . length ; i + + ) { if ( ! ( selection [ i ] instanceof IFile ) ) { return new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , IInternalDebugCoreConstants . EMPTY_STRING , null ) ; } } return new Status ( IStatus . OK , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , IInternalDebugCoreConstants . EMPTY_STRING , null ) ; } } ; protected List < ISourceContainer > getSelectedJars ( ISourceLookupDirector director ) { ISourceContainer [ ] containers = director . getSourceContainers ( ) ; List < ISourceContainer > jars = new ArrayList < ISourceContainer > ( ) ; for ( int i = <int> ; i < containers . length ; i + + ) { ISourceContainer container = containers [ i ] ; if ( container . getType ( ) . getId ( ) . equals ( ArchiveSourceContainer . TYPE_ID ) ) { jars . add ( container ) ; } } return jars ; } @Override public ISourceContainer [ ] addSourceContainers ( Shell shell , ISourceLookupDirector director ) { ViewerFilter filter = new ArchiveFilter ( getSelectedJars ( director ) ) ; ILabelProvider lp = new WorkbenchLabelProvider ( ) ; ITreeContentProvider cp = new WorkbenchContentProvider ( ) ; ElementTreeSelectionDialog dialog = new ElementTreeSelectionDialog ( shell , lp , cp ) ; dialog . setValidator ( validator ) ; dialog . setTitle ( SourceLookupUIMessages . ArchiveSourceContainerBrowser_3 ) ; dialog . setMessage ( SourceLookupUIMessages . ArchiveSourceContainerBrowser_4 ) ; dialog . addFilter ( filter ) ; dialog . setInput ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ) ; dialog . setComparator ( new ResourceComparator ( ResourceComparator . NAME ) ) ; if ( dialog . open ( ) = = Window . OK ) { Object [ ] result = dialog . getResult ( ) ; ISourceContainer [ ] containers = new ISourceContainer [ result . length ] ; for ( int i = <int> ; i < containers . length ; i + + ) { containers [ i ] = new ArchiveSourceContainer ( ( IFile ) result [ i ] , true ) ; } return containers ; } return new ISourceContainer [ <int> ] ; } } 

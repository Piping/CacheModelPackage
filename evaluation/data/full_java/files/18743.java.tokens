package io . netty . buffer ; import java . nio . ByteBuffer ; public abstract class AbstractDerivedByteBuf extends AbstractByteBuf { protected AbstractDerivedByteBuf ( int maxCapacity ) { super ( maxCapacity ) ; } @Override public final int refCnt ( ) { return unwrap ( ) . refCnt ( ) ; } @Override public final ByteBuf retain ( ) { unwrap ( ) . retain ( ) ; return this ; } @Override public final ByteBuf retain ( int increment ) { unwrap ( ) . retain ( increment ) ; return this ; } @Override public final ByteBuf touch ( ) { unwrap ( ) . touch ( ) ; return this ; } @Override public final ByteBuf touch ( Object hint ) { unwrap ( ) . touch ( hint ) ; return this ; } @Override public final boolean release ( ) { return unwrap ( ) . release ( ) ; } @Override public final boolean release ( int decrement ) { return unwrap ( ) . release ( decrement ) ; } @Override public ByteBuffer internalNioBuffer ( int index , int length ) { return nioBuffer ( index , length ) ; } @Override public ByteBuffer nioBuffer ( int index , int length ) { return unwrap ( ) . nioBuffer ( index , length ) ; } } 

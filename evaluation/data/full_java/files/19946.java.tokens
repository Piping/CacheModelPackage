package io . netty . handler . logging ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufHolder ; import io . netty . channel . ChannelDuplexHandler ; import io . netty . channel . ChannelHandler ; import io . netty . channel . ChannelHandler . Sharable ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelOutboundHandler ; import io . netty . channel . ChannelPromise ; import io . netty . util . internal . logging . InternalLogLevel ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import java . net . SocketAddress ; import static io . netty . buffer . ByteBufUtil . appendPrettyHexDump ; import static io . netty . util . internal . StringUtil . NEWLINE ; @Sharable @SuppressWarnings ( { <str> , <str> } ) public class LoggingHandler extends ChannelDuplexHandler { private static final LogLevel DEFAULT_LEVEL = LogLevel . DEBUG ; protected final InternalLogger logger ; protected final InternalLogLevel internalLevel ; private final LogLevel level ; public LoggingHandler ( ) { this ( DEFAULT_LEVEL ) ; } public LoggingHandler ( LogLevel level ) { if ( level = = null ) { throw new NullPointerException ( <str> ) ; } logger = InternalLoggerFactory . getInstance ( getClass ( ) ) ; this . level = level ; internalLevel = level . toInternalLevel ( ) ; } public LoggingHandler ( Class < ? > clazz ) { this ( clazz , DEFAULT_LEVEL ) ; } public LoggingHandler ( Class < ? > clazz , LogLevel level ) { if ( clazz = = null ) { throw new NullPointerException ( <str> ) ; } if ( level = = null ) { throw new NullPointerException ( <str> ) ; } logger = InternalLoggerFactory . getInstance ( clazz ) ; this . level = level ; internalLevel = level . toInternalLevel ( ) ; } public LoggingHandler ( String name ) { this ( name , DEFAULT_LEVEL ) ; } public LoggingHandler ( String name , LogLevel level ) { if ( name = = null ) { throw new NullPointerException ( <str> ) ; } if ( level = = null ) { throw new NullPointerException ( <str> ) ; } logger = InternalLoggerFactory . getInstance ( name ) ; this . level = level ; internalLevel = level . toInternalLevel ( ) ; } public LogLevel level ( ) { return level ; } @Override public void channelRegistered ( ChannelHandlerContext ctx ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> ) ) ; } ctx . fireChannelRegistered ( ) ; } @Override public void channelUnregistered ( ChannelHandlerContext ctx ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> ) ) ; } ctx . fireChannelUnregistered ( ) ; } @Override public void channelActive ( ChannelHandlerContext ctx ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> ) ) ; } ctx . fireChannelActive ( ) ; } @Override public void channelInactive ( ChannelHandlerContext ctx ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> ) ) ; } ctx . fireChannelInactive ( ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> , cause ) , cause ) ; } ctx . fireExceptionCaught ( cause ) ; } @Override public void userEventTriggered ( ChannelHandlerContext ctx , Object evt ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> , evt ) ) ; } ctx . fireUserEventTriggered ( evt ) ; } @Override public void bind ( ChannelHandlerContext ctx , SocketAddress localAddress , ChannelPromise promise ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> , localAddress ) ) ; } ctx . bind ( localAddress , promise ) ; } @Override public void connect ( ChannelHandlerContext ctx , SocketAddress remoteAddress , SocketAddress localAddress , ChannelPromise promise ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> , remoteAddress , localAddress ) ) ; } ctx . connect ( remoteAddress , localAddress , promise ) ; } @Override public void disconnect ( ChannelHandlerContext ctx , ChannelPromise promise ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> ) ) ; } ctx . disconnect ( promise ) ; } @Override public void close ( ChannelHandlerContext ctx , ChannelPromise promise ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> ) ) ; } ctx . close ( promise ) ; } @Override public void deregister ( ChannelHandlerContext ctx , ChannelPromise promise ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> ) ) ; } ctx . deregister ( promise ) ; } @Override public void channelRead ( ChannelHandlerContext ctx , Object msg ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> , msg ) ) ; } ctx . fireChannelRead ( msg ) ; } @Override public void write ( ChannelHandlerContext ctx , Object msg , ChannelPromise promise ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> , msg ) ) ; } ctx . write ( msg , promise ) ; } @Override public void flush ( ChannelHandlerContext ctx ) throws Exception { if ( logger . isEnabled ( internalLevel ) ) { logger . log ( internalLevel , format ( ctx , <str> ) ) ; } ctx . flush ( ) ; } protected String format ( ChannelHandlerContext ctx , String eventName ) { String chStr = ctx . channel ( ) . toString ( ) ; return new StringBuilder ( chStr . length ( ) + <int> + eventName . length ( ) ) . append ( chStr ) . append ( <str> ) . append ( eventName ) . toString ( ) ; } protected String format ( ChannelHandlerContext ctx , String eventName , Object arg ) { if ( arg instanceof ByteBuf ) { return formatByteBuf ( ctx , eventName , ( ByteBuf ) arg ) ; } else if ( arg instanceof ByteBufHolder ) { return formatByteBufHolder ( ctx , eventName , ( ByteBufHolder ) arg ) ; } else { return formatSimple ( ctx , eventName , arg ) ; } } protected String format ( ChannelHandlerContext ctx , String eventName , Object firstArg , Object secondArg ) { if ( secondArg = = null ) { return formatSimple ( ctx , eventName , firstArg ) ; } String chStr = ctx . channel ( ) . toString ( ) ; String arg1Str = String . valueOf ( firstArg ) ; String arg2Str = secondArg . toString ( ) ; StringBuilder buf = new StringBuilder ( chStr . length ( ) + <int> + eventName + <int> + arg1Str . length ( ) + <int> + arg2Str . length ( ) ) ; buf . append ( chStr ) . append ( <str> ) . append ( eventName ) . append ( <str> ) . append ( arg1Str ) . append ( <str> ) . append ( arg2Str ) ; return buf . toString ( ) ; } private static String formatByteBuf ( ChannelHandlerContext ctx , String eventName , ByteBuf msg ) { String chStr = ctx . channel ( ) . toString ( ) ; int length = msg . readableBytes ( ) ; if ( length = = <int> ) { StringBuilder buf = new StringBuilder ( chStr . length ( ) + <int> + eventName . length ( ) + <int> ) ; buf . append ( chStr ) . append ( <str> ) . append ( eventName ) . append ( <str> ) ; return buf . toString ( ) ; } else { int rows = length / <int> + ( length % <int> = = <int> ? <int> : <int> ) + <int> ; StringBuilder buf = new StringBuilder ( chStr . length ( ) + <int> + eventName . length ( ) + <int> + <int> + <int> + <int> + rows * <int> ) ; buf . append ( chStr ) . append ( <str> ) . append ( eventName ) . append ( <str> ) . append ( length ) . append ( <str> ) . append ( NEWLINE ) ; appendPrettyHexDump ( buf , msg ) ; return buf . toString ( ) ; } } private static String formatByteBufHolder ( ChannelHandlerContext ctx , String eventName , ByteBufHolder msg ) { String chStr = ctx . channel ( ) . toString ( ) ; String msgStr = msg . toString ( ) ; ByteBuf content = msg . content ( ) ; int length = content . readableBytes ( ) ; if ( length = = <int> ) { StringBuilder buf = new StringBuilder ( chStr . length ( ) + <int> + eventName . length ( ) + <int> + msgStr . length ( ) + <int> ) ; buf . append ( chStr ) . append ( <str> ) . append ( eventName ) . append ( <str> ) . append ( msgStr ) . append ( <str> ) ; return buf . toString ( ) ; } else { int rows = length / <int> + ( length % <int> = = <int> ? <int> : <int> ) + <int> ; StringBuilder buf = new StringBuilder ( chStr . length ( ) + <int> + eventName . length ( ) + <int> + msgStr . length ( ) + <int> + <int> + <int> + <int> + rows * <int> ) ; buf . append ( chStr ) . append ( <str> ) . append ( eventName ) . append ( <str> ) . append ( msgStr ) . append ( <str> ) . append ( length ) . append ( <str> ) . append ( NEWLINE ) ; appendPrettyHexDump ( buf , content ) ; return buf . toString ( ) ; } } private static String formatSimple ( ChannelHandlerContext ctx , String eventName , Object msg ) { String chStr = ctx . channel ( ) . toString ( ) ; String msgStr = String . valueOf ( msg ) ; StringBuilder buf = new StringBuilder ( chStr . length ( ) + <int> + eventName . length ( ) + <int> + msgStr . length ( ) ) ; return buf . append ( chStr ) . append ( <str> ) . append ( eventName ) . append ( <str> ) . append ( msgStr ) . toString ( ) ; } } 

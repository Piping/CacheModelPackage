package org . apache . cassandra . cql3 . validation . operations ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import static java . util . Arrays . asList ; import static org . junit . Assert . assertTrue ; public class SelectOrderByTest extends CQLTester { @Test public void testNormalSelectionOrderSingleClustering ( ) throws Throwable { for ( String descOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + descOption ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; } } @Test public void testFunctionSelectionOrderSingleClustering ( ) throws Throwable { for ( String descOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + descOption ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; } } @Test public void testFieldSelectionOrderSingleClustering ( ) throws Throwable { String type = createType ( <str> ) ; for ( String descOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + type + <str> + descOption ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; dropTable ( <str> ) ; } } @Test public void testNormalSelectionOrderMultipleClustering ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void testFunctionSelectionOrderMultipleClustering ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void testSimpleOrderBy ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) execute ( <str> , i , j , i * <int> + j ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void testMoreOrderBy ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void testInvalidOrderBy ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; assertInvalid ( <str> ) ; } @Test public void testOrderByForInClause ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> ) , row ( <int> , <str> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> , <int> ) , row ( <str> , <int> ) , row ( <str> , <int> ) ) ; createTable ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> , null , <int> ) , row ( <str> , null , <int> ) , row ( <str> , null , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> , null , <int> ) , row ( <str> , null , <int> ) , row ( <str> , null , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; createTable ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> , null , <int> , <int> ) , row ( <str> , null , <int> , <int> ) , row ( <str> , null , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> , null , <int> , <int> ) , row ( <str> , null , <int> , <int> ) , row ( <str> , null , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; } @Test public void testReversedComparator ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> , i , i ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) execute ( <str> , i , j , String . format ( <str> , i , j ) ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; Object [ ] [ ] expectedRows = new Object [ <int> ] [ ] ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j > = <int> ; j - - ) expectedRows [ i * <int> + ( <int> - j ) ] = row ( i , j , String . format ( <str> , i , j ) ) ; assertRows ( execute ( <str> ) , expectedRows ) ; assertRows ( execute ( <str> ) , expectedRows ) ; for ( int i = <int> ; i > = <int> ; i - - ) for ( int j = <int> ; j < <int> ; j + + ) expectedRows [ ( <int> - i ) * <int> + j ] = row ( i , j , String . format ( <str> , i , j ) ) ; assertRows ( execute ( <str> ) , expectedRows ) ; assertInvalid ( <str> ) ; } @Test public void testMultiordering ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) execute ( <str> , i , j ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testSelectInStatementWithDesc ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testInOrderByWithoutSelecting ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) , row ( <int> ) ) ; Object [ ] [ ] results = getRows ( execute ( <str> ) ) ; assertTrue ( isFirstIntSorted ( results ) ) ; } @Test public void testInOrderByWithTwoPartitionKeyColumns ( ) throws Throwable { for ( String option : asList ( <str> , <str> ) ) { createTable ( <str> + option ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } } private boolean isFirstIntSorted ( Object [ ] [ ] rows ) { for ( int i = <int> ; i < rows . length ; i + + ) { Long prev = ( Long ) rows [ i - <int> ] [ <int> ] ; Long curr = ( Long ) rows [ i ] [ <int> ] ; if ( prev > curr ) return false ; } return true ; } } 

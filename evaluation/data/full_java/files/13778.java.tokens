package org . gradle . launcher . daemon . bootstrap ; import org . gradle . internal . classpath . DefaultClassPath ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . launcher . daemon . configuration . DaemonServerConfiguration ; import org . gradle . launcher . daemon . registry . DaemonRegistry ; import org . gradle . launcher . daemon . server . Daemon ; import org . gradle . launcher . daemon . server . DaemonServices ; import org . gradle . logging . LoggingManagerInternal ; import java . util . concurrent . TimeUnit ; public class ForegroundDaemonAction implements Runnable { private final ServiceRegistry loggingRegistry ; private final DaemonServerConfiguration configuration ; public ForegroundDaemonAction ( ServiceRegistry loggingRegistry , DaemonServerConfiguration configuration ) { this . loggingRegistry = loggingRegistry ; this . configuration = configuration ; } public void run ( ) { LoggingManagerInternal loggingManager = loggingRegistry . newInstance ( LoggingManagerInternal . class ) ; loggingManager . start ( ) ; DaemonServices daemonServices = new DaemonServices ( configuration , loggingRegistry , loggingManager , new DefaultClassPath ( ) ) ; Daemon daemon = daemonServices . get ( Daemon . class ) ; daemon . start ( ) ; try { daemonServices . get ( DaemonRegistry . class ) . markIdle ( daemon . getAddress ( ) ) ; daemon . requestStopOnIdleTimeout ( configuration . getIdleTimeout ( ) , TimeUnit . MILLISECONDS ) ; } finally { daemon . stop ( ) ; } } } 

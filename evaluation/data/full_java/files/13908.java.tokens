package org . gradle . tooling . internal . provider ; import org . gradle . api . BuildCancelledException ; import org . gradle . initialization . BuildRequestContext ; import org . gradle . initialization . ReportedException ; import org . gradle . internal . SystemProperties ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . internal . classpath . DefaultClassPath ; import org . gradle . internal . invocation . BuildAction ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . launcher . daemon . configuration . DaemonParameters ; import org . gradle . launcher . exec . BuildActionExecuter ; import org . gradle . launcher . exec . BuildActionParameters ; import org . gradle . launcher . exec . DefaultBuildActionParameters ; import org . gradle . tooling . UnsupportedVersionException ; import org . gradle . tooling . internal . protocol . BuildExceptionVersion1 ; import org . gradle . tooling . internal . protocol . InternalBuildCancelledException ; import org . gradle . tooling . internal . protocol . InternalCancellationToken ; import org . gradle . tooling . internal . protocol . ModelIdentifier ; import org . gradle . tooling . internal . provider . connection . ProviderOperationParameters ; import java . io . File ; import java . util . Collections ; public class DaemonBuildActionExecuter implements BuildActionExecuter < ProviderOperationParameters > { private final BuildActionExecuter < BuildActionParameters > executer ; private final DaemonParameters daemonParameters ; public DaemonBuildActionExecuter ( BuildActionExecuter < BuildActionParameters > executer , DaemonParameters daemonParameters ) { this . executer = executer ; this . daemonParameters = daemonParameters ; } public Object execute ( BuildAction action , BuildRequestContext buildRequestContext , ProviderOperationParameters parameters , ServiceRegistry contextServices ) { boolean continuous = action . getStartParameter ( ) ! = null & & action . getStartParameter ( ) . isContinuous ( ) & & isNotBuildingModel ( action ) ; if ( continuous & & ! doesConsumerSupportCancellation ( buildRequestContext ) ) { throw new UnsupportedVersionException ( <str> ) ; } ClassPath classPath = DefaultClassPath . of ( parameters . getInjectedPluginClasspath ( Collections . < File > emptyList ( ) ) ) ; BuildActionParameters actionParameters = new DefaultBuildActionParameters ( daemonParameters . getEffectiveSystemProperties ( ) , System . getenv ( ) , SystemProperties . getInstance ( ) . getCurrentDir ( ) , parameters . getBuildLogLevel ( ) , daemonParameters . getDaemonUsage ( ) , continuous , false , classPath ) ; try { return executer . execute ( action , buildRequestContext , actionParameters , contextServices ) ; } catch ( ReportedException e ) { Throwable t = e . getCause ( ) ; while ( t ! = null ) { if ( t instanceof BuildCancelledException ) { throw new InternalBuildCancelledException ( e . getCause ( ) ) ; } t = t . getCause ( ) ; } throw new BuildExceptionVersion1 ( e . getCause ( ) ) ; } } protected boolean doesConsumerSupportCancellation ( BuildRequestContext buildRequestContext ) { return buildRequestContext . getCancellationToken ( ) instanceof InternalCancellationToken ; } private boolean isNotBuildingModel ( BuildAction action ) { if ( ! ( action instanceof BuildModelAction ) ) { return true ; } String modelName = ( ( BuildModelAction ) action ) . getModelName ( ) ; return modelName . equals ( ModelIdentifier . NULL_MODEL ) ; } } 

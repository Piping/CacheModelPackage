package org . elasticsearch . test . rest . section ; import org . elasticsearch . test . rest . RestTestExecutionContext ; import java . io . IOException ; import java . util . Map ; public abstract class Assertion implements ExecutableSection { private final String field ; private final Object expectedValue ; protected Assertion ( String field , Object expectedValue ) { this . field = field ; this . expectedValue = expectedValue ; } public final String getField ( ) { return field ; } public final Object getExpectedValue ( ) { return expectedValue ; } protected final Object resolveExpectedValue ( RestTestExecutionContext executionContext ) throws IOException { if ( expectedValue instanceof Map ) { @SuppressWarnings ( <str> ) Map < String , Object > map = ( Map < String , Object > ) expectedValue ; return executionContext . stash ( ) . unstashMap ( map ) ; } if ( executionContext . stash ( ) . isStashedValue ( expectedValue ) ) { return executionContext . stash ( ) . unstashValue ( expectedValue . toString ( ) ) ; } return expectedValue ; } protected final Object getActualValue ( RestTestExecutionContext executionContext ) throws IOException { if ( executionContext . stash ( ) . isStashedValue ( field ) ) { return executionContext . stash ( ) . unstashValue ( field ) ; } return executionContext . response ( field ) ; } @Override public final void execute ( RestTestExecutionContext executionContext ) throws IOException { doAssert ( getActualValue ( executionContext ) , resolveExpectedValue ( executionContext ) ) ; } protected abstract void doAssert ( Object actualValue , Object expectedValue ) ; protected Class < ? > safeClass ( Object o ) { return o = = null ? null : o . getClass ( ) ; } } 

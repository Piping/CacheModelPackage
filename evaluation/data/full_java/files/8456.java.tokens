package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . junit . Ignore ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . test . ESIntegTestCase . Scope . SUITE ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . is ; public abstract class ShardSizeTestCase extends ESIntegTestCase { @Override protected int numberOfShards ( ) { return randomIntBetween ( <int> , DEFAULT_MAX_NUM_SHARDS ) ; } protected void createIdx ( String keyFieldMapping ) { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , keyFieldMapping ) ) ; } protected static String routing1 ; protected static String routing2 ; protected void indexData ( ) throws Exception { List < IndexRequestBuilder > docs = new ArrayList < > ( ) ; routing1 = routingKeyForShard ( <str> , <str> , <int> ) ; routing2 = routingKeyForShard ( <str> , <str> , <int> ) ; docs . addAll ( indexDoc ( routing1 , <str> , <int> ) ) ; docs . addAll ( indexDoc ( routing1 , <str> , <int> ) ) ; docs . addAll ( indexDoc ( routing1 , <str> , <int> ) ) ; docs . addAll ( indexDoc ( routing1 , <str> , <int> ) ) ; docs . addAll ( indexDoc ( routing1 , <str> , <int> ) ) ; docs . addAll ( indexDoc ( routing2 , <str> , <int> ) ) ; docs . addAll ( indexDoc ( routing2 , <str> , <int> ) ) ; docs . addAll ( indexDoc ( routing2 , <str> , <int> ) ) ; docs . addAll ( indexDoc ( routing2 , <str> , <int> ) ) ; docs . addAll ( indexDoc ( routing2 , <str> , <int> ) ) ; indexRandom ( true , docs ) ; SearchResponse resp = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setRouting ( routing1 ) . setQuery ( matchAllQuery ( ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( resp ) ; long totalOnOne = resp . getHits ( ) . getTotalHits ( ) ; assertThat ( totalOnOne , is ( <int> ) ) ; resp = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setRouting ( routing2 ) . setQuery ( matchAllQuery ( ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( resp ) ; long totalOnTwo = resp . getHits ( ) . getTotalHits ( ) ; assertThat ( totalOnTwo , is ( <int> ) ) ; } protected List < IndexRequestBuilder > indexDoc ( String shard , String key , int times ) throws Exception { IndexRequestBuilder [ ] builders = new IndexRequestBuilder [ times ] ; for ( int i = <int> ; i < times ; i + + ) { builders [ i ] = client ( ) . prepareIndex ( <str> , <str> ) . setRouting ( shard ) . setCreate ( true ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , key ) . field ( <str> , <int> ) . endObject ( ) ) ; } return Arrays . asList ( builders ) ; } } 

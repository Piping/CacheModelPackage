package org . elasticsearch . search . highlight . vectorhighlight ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . TextField ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . search . highlight . Encoder ; import org . apache . lucene . search . vectorhighlight . BoundaryScanner ; import org . apache . lucene . search . vectorhighlight . FieldFragList . WeightedFragInfo ; import org . apache . lucene . search . vectorhighlight . ScoreOrderFragmentsBuilder ; import org . elasticsearch . index . mapper . FieldMapper ; import org . elasticsearch . search . fetch . FetchSubPhase ; import org . elasticsearch . search . internal . SearchContext ; import org . elasticsearch . search . lookup . SearchLookup ; import org . elasticsearch . search . lookup . SourceLookup ; import java . io . IOException ; import java . util . List ; public class SourceScoreOrderFragmentsBuilder extends ScoreOrderFragmentsBuilder { private final FieldMapper mapper ; private final SearchContext searchContext ; private final FetchSubPhase . HitContext hitContext ; public SourceScoreOrderFragmentsBuilder ( FieldMapper mapper , SearchContext searchContext , FetchSubPhase . HitContext hitContext , String [ ] preTags , String [ ] postTags , BoundaryScanner boundaryScanner ) { super ( preTags , postTags , boundaryScanner ) ; this . mapper = mapper ; this . searchContext = searchContext ; this . hitContext = hitContext ; } @Override protected Field [ ] getFields ( IndexReader reader , int docId , String fieldName ) throws IOException { SourceLookup sourceLookup = searchContext . lookup ( ) . source ( ) ; sourceLookup . setSegmentAndDocument ( ( LeafReaderContext ) reader . getContext ( ) , docId ) ; List < Object > values = sourceLookup . extractRawValues ( hitContext . getSourcePath ( mapper . fieldType ( ) . names ( ) . fullName ( ) ) ) ; Field [ ] fields = new Field [ values . size ( ) ] ; for ( int i = <int> ; i < values . size ( ) ; i + + ) { fields [ i ] = new Field ( mapper . fieldType ( ) . names ( ) . indexName ( ) , values . get ( i ) . toString ( ) , TextField . TYPE_NOT_STORED ) ; } return fields ; } @Override protected String makeFragment ( StringBuilder buffer , int [ ] index , Field [ ] values , WeightedFragInfo fragInfo , String [ ] preTags , String [ ] postTags , Encoder encoder ) { return super . makeFragment ( buffer , index , values , FragmentBuilderHelper . fixWeightedFragInfo ( mapper , values , fragInfo ) , preTags , postTags , encoder ) ; } } 

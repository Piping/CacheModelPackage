package org . elasticsearch . gateway ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . block . ClusterBlock ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . Set ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . hasItem ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class RecoverAfterNodesIT extends ESIntegTestCase { private final static TimeValue BLOCK_WAIT_TIMEOUT = TimeValue . timeValueSeconds ( <int> ) ; public Set < ClusterBlock > waitForNoBlocksOnNode ( TimeValue timeout , Client nodeClient ) throws InterruptedException { long start = System . currentTimeMillis ( ) ; Set < ClusterBlock > blocks ; do { blocks = nodeClient . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) ; } while ( ! blocks . isEmpty ( ) & & ( System . currentTimeMillis ( ) - start ) < timeout . millis ( ) ) ; return blocks ; } public Client startNode ( Settings . Builder settings ) { String name = internalCluster ( ) . startNode ( settings ) ; return internalCluster ( ) . client ( name ) ; } public void testRecoverAfterNodes ( ) throws Exception { logger . info ( <str> ) ; Client clientNode1 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) ) ; assertThat ( clientNode1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; logger . info ( <str> ) ; Client clientNode2 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) ) ; Thread . sleep ( BLOCK_WAIT_TIMEOUT . millis ( ) ) ; assertThat ( clientNode1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; assertThat ( clientNode2 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; logger . info ( <str> ) ; Client clientNode3 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , clientNode1 ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , clientNode2 ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , clientNode3 ) . isEmpty ( ) , equalTo ( true ) ) ; } public void testRecoverAfterMasterNodes ( ) throws Exception { logger . info ( <str> ) ; Client master1 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , false ) . put ( <str> , true ) ) ; assertThat ( master1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; logger . info ( <str> ) ; Client data1 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , true ) . put ( <str> , false ) ) ; assertThat ( master1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; assertThat ( data1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; logger . info ( <str> ) ; Client data2 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , true ) . put ( <str> , false ) ) ; assertThat ( master1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; assertThat ( data1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; assertThat ( data2 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; logger . info ( <str> ) ; Client master2 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , false ) . put ( <str> , true ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , master1 ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , master2 ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , data1 ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , data2 ) . isEmpty ( ) , equalTo ( true ) ) ; } public void testRecoverAfterDataNodes ( ) throws Exception { logger . info ( <str> ) ; Client master1 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , false ) . put ( <str> , true ) ) ; assertThat ( master1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; logger . info ( <str> ) ; Client data1 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , true ) . put ( <str> , false ) ) ; assertThat ( master1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; assertThat ( data1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; logger . info ( <str> ) ; Client master2 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , false ) . put ( <str> , true ) ) ; assertThat ( master2 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; assertThat ( data1 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; assertThat ( master2 . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . execute ( ) . actionGet ( ) . getState ( ) . blocks ( ) . global ( ClusterBlockLevel . METADATA_WRITE ) , hasItem ( GatewayService . STATE_NOT_RECOVERED_BLOCK ) ) ; logger . info ( <str> ) ; Client data2 = startNode ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , true ) . put ( <str> , false ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , master1 ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , master2 ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , data1 ) . isEmpty ( ) , equalTo ( true ) ) ; assertThat ( waitForNoBlocksOnNode ( BLOCK_WAIT_TIMEOUT , data2 ) . isEmpty ( ) , equalTo ( true ) ) ; } } 

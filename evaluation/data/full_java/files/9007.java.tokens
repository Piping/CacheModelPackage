package org . elasticsearch . test . junit . listeners ; import com . carrotsearch . randomizedtesting . RandomizedContext ; import com . carrotsearch . randomizedtesting . ReproduceErrorMessageBuilder ; import com . carrotsearch . randomizedtesting . TraceFormatting ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESTestCase ; import org . junit . internal . AssumptionViolatedException ; import org . junit . runner . Description ; import org . junit . runner . notification . Failure ; import org . junit . runner . notification . RunListener ; import java . util . Locale ; import java . util . TimeZone ; import static com . carrotsearch . randomizedtesting . SysGlobals . SYSPROP_ITERATIONS ; import static com . carrotsearch . randomizedtesting . SysGlobals . SYSPROP_PREFIX ; import static com . carrotsearch . randomizedtesting . SysGlobals . SYSPROP_TESTMETHOD ; import static org . elasticsearch . test . ESIntegTestCase . TESTS_CLUSTER ; import static org . elasticsearch . test . rest . ESRestTestCase . REST_TESTS_BLACKLIST ; import static org . elasticsearch . test . rest . ESRestTestCase . REST_TESTS_SPEC ; import static org . elasticsearch . test . rest . ESRestTestCase . REST_TESTS_SUITE ; import static org . elasticsearch . test . rest . ESRestTestCase . Rest ; public class ReproduceInfoPrinter extends RunListener { protected final ESLogger logger = Loggers . getLogger ( ESTestCase . class ) ; @Override public void testStarted ( Description description ) throws Exception { logger . trace ( <str> , description . getDisplayName ( ) ) ; } @Override public void testFinished ( Description description ) throws Exception { logger . trace ( <str> , description . getDisplayName ( ) ) ; } static boolean inVerifyPhase ( ) { return Boolean . parseBoolean ( System . getProperty ( <str> ) ) ; } @Override public void testFailure ( Failure failure ) throws Exception { if ( failure . getException ( ) instanceof AssumptionViolatedException ) { return ; } final StringBuilder b = new StringBuilder ( <str> ) ; String task = System . getProperty ( <str> ) ; b . append ( task ) ; GradleMessageBuilder gradleMessageBuilder = new GradleMessageBuilder ( b ) ; gradleMessageBuilder . appendAllOpts ( failure . getDescription ( ) ) ; if ( failure . getDescription ( ) . getTestClass ( ) . isAnnotationPresent ( Rest . class ) ) { gradleMessageBuilder . appendRestTestsProperties ( ) ; } System . err . println ( b . toString ( ) ) ; } protected static class GradleMessageBuilder extends ReproduceErrorMessageBuilder { public GradleMessageBuilder ( StringBuilder b ) { super ( b ) ; } @Override public ReproduceErrorMessageBuilder appendAllOpts ( Description description ) { super . appendAllOpts ( description ) ; if ( description . getMethodName ( ) ! = null ) { super . appendOpt ( SYSPROP_TESTMETHOD ( ) , <str> + description . getMethodName ( ) + <str> ) ; } return appendESProperties ( ) ; } @Override public ReproduceErrorMessageBuilder appendEnvironmentSettings ( ) { return this ; } @Override public ReproduceErrorMessageBuilder appendOpt ( String sysPropName , String value ) { if ( sysPropName . equals ( SYSPROP_ITERATIONS ( ) ) ) { return this ; } if ( sysPropName . equals ( SYSPROP_TESTMETHOD ( ) ) ) { return this ; } if ( sysPropName . equals ( SYSPROP_PREFIX ( ) ) ) { return this ; } if ( Strings . hasLength ( value ) ) { return super . appendOpt ( sysPropName , value ) ; } return this ; } public ReproduceErrorMessageBuilder appendESProperties ( ) { appendProperties ( <str> ) ; if ( inVerifyPhase ( ) ) { appendProperties ( <str> , <str> , TESTS_CLUSTER , ESIntegTestCase . TESTS_ENABLE_MOCK_MODULES ) ; } appendProperties ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; if ( System . getProperty ( <str> ) ! = null & & ! System . getProperty ( <str> ) . isEmpty ( ) ) { appendOpt ( <str> , <str> + System . getProperty ( <str> ) + <str> ) ; } appendOpt ( <str> , Locale . getDefault ( ) . toString ( ) ) ; appendOpt ( <str> , TimeZone . getDefault ( ) . getID ( ) ) ; return this ; } public ReproduceErrorMessageBuilder appendRestTestsProperties ( ) { return appendProperties ( REST_TESTS_SUITE , REST_TESTS_SPEC , REST_TESTS_BLACKLIST ) ; } protected ReproduceErrorMessageBuilder appendProperties ( String . . . properties ) { for ( String sysPropName : properties ) { if ( Strings . hasLength ( System . getProperty ( sysPropName ) ) ) { appendOpt ( sysPropName , System . getProperty ( sysPropName ) ) ; } } return this ; } } } 

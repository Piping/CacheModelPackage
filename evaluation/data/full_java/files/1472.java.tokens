package org . apache . cassandra . db . commitlog ; import java . io . File ; import java . io . IOException ; import com . google . common . base . Predicate ; import org . junit . Assert ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . db . Mutation ; import org . apache . cassandra . db . rows . SerializationHelper ; import org . apache . cassandra . io . util . DataInputBuffer ; import org . apache . cassandra . io . util . NIODataInputStream ; import org . apache . cassandra . io . util . RebufferingInputStream ; public class CommitLogTestReplayer extends CommitLogReplayer { public static void examineCommitLog ( Predicate < Mutation > processor ) throws IOException { CommitLog . instance . sync ( true ) ; CommitLogTestReplayer replayer = new CommitLogTestReplayer ( CommitLog . instance , processor ) ; File commitLogDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; replayer . recover ( commitLogDir . listFiles ( ) ) ; } final private Predicate < Mutation > processor ; public CommitLogTestReplayer ( CommitLog log , Predicate < Mutation > processor ) { this ( log , ReplayPosition . NONE , processor ) ; } public CommitLogTestReplayer ( CommitLog log , ReplayPosition discardedPos , Predicate < Mutation > processor ) { super ( log , discardedPos , null , ReplayFilter . create ( ) ) ; this . processor = processor ; } @Override void replayMutation ( byte [ ] inputBuffer , int size , final long entryLocation , final CommitLogDescriptor desc ) { RebufferingInputStream bufIn = new DataInputBuffer ( inputBuffer , <int> , size ) ; Mutation mutation ; try { mutation = Mutation . serializer . deserialize ( bufIn , desc . getMessagingVersion ( ) , SerializationHelper . Flag . LOCAL ) ; Assert . assertTrue ( processor . apply ( mutation ) ) ; } catch ( IOException e ) { throw new AssertionError ( e ) ; } } } 

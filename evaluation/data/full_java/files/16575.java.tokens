package org . junit . samples ; import static org . junit . Assert . assertTrue ; import java . util . ArrayList ; import java . util . List ; import junit . framework . JUnit4TestAdapter ; import org . junit . Before ; import org . junit . BeforeClass ; import org . junit . Ignore ; import org . junit . Test ; public class ListTest { protected List < Integer > fEmpty ; protected List < Integer > fFull ; protected static List < Integer > fgHeavy ; public static void main ( String . . . args ) { junit . textui . TestRunner . run ( suite ( ) ) ; } @BeforeClass public static void setUpOnce ( ) { fgHeavy = new ArrayList < Integer > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { fgHeavy . add ( i ) ; } } @Before public void setUp ( ) { fEmpty = new ArrayList < Integer > ( ) ; fFull = new ArrayList < Integer > ( ) ; fFull . add ( <int> ) ; fFull . add ( <int> ) ; fFull . add ( <int> ) ; } public static junit . framework . Test suite ( ) { return new JUnit4TestAdapter ( ListTest . class ) ; } @Ignore ( <str> ) @Test public void capacity ( ) { int size = fFull . size ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { fFull . add ( i ) ; } assertTrue ( fFull . size ( ) = = <int> + size ) ; } @Test public void testCopy ( ) { List < Integer > copy = new ArrayList < Integer > ( fFull . size ( ) ) ; copy . addAll ( fFull ) ; assertTrue ( copy . size ( ) = = fFull . size ( ) ) ; assertTrue ( copy . contains ( <int> ) ) ; } @Test public void contains ( ) { assertTrue ( fFull . contains ( <int> ) ) ; assertTrue ( ! fEmpty . contains ( <int> ) ) ; } @Test ( expected = IndexOutOfBoundsException . class ) public void elementAt ( ) { int i = fFull . get ( <int> ) ; assertTrue ( i = = <int> ) ; fFull . get ( fFull . size ( ) ) ; } @Test public void removeAll ( ) { fFull . removeAll ( fFull ) ; fEmpty . removeAll ( fEmpty ) ; assertTrue ( fFull . isEmpty ( ) ) ; assertTrue ( fEmpty . isEmpty ( ) ) ; } @Test public void removeElement ( ) { fFull . remove ( new Integer ( <int> ) ) ; assertTrue ( ! fFull . contains ( <int> ) ) ; } } 

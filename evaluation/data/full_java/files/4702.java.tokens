package org . eclipse . debug . ui . actions ; import java . util . ArrayList ; import java . util . List ; import java . util . Set ; import org . eclipse . debug . internal . ui . actions . ToggleBreakpointsTargetManager ; import org . eclipse . debug . internal . ui . actions . breakpoints . Messages ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . ContributionItem ; import org . eclipse . jface . action . IContributionItem ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . swt . SWT ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . MenuItem ; import org . eclipse . ui . IPartService ; import org . eclipse . ui . ISelectionService ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . actions . CompoundContributionItem ; import org . eclipse . ui . menus . IWorkbenchContribution ; import org . eclipse . ui . services . IServiceLocator ; public class BreakpointTypesContribution extends CompoundContributionItem implements IWorkbenchContribution { private class SelectTargetAction extends Action { private final Set < String > fPossibleIDs ; private final String fID ; SelectTargetAction ( String name , Set < String > possibleIDs , String ID ) { super ( name , AS_RADIO_BUTTON ) ; fID = ID ; fPossibleIDs = possibleIDs ; } @Override public void run ( ) { if ( isChecked ( ) ) { ToggleBreakpointsTargetManager . getDefault ( ) . setPreferredTarget ( fPossibleIDs , fID ) ; } } } private IServiceLocator fServiceLocator ; private static IContributionItem [ ] NO_BREAKPOINT_TYPES_CONTRIBUTION_ITEMS = new IContributionItem [ ] { new ContributionItem ( ) { @Override public void fill ( Menu menu , int index ) { MenuItem item = new MenuItem ( menu , SWT . NONE ) ; item . setEnabled ( false ) ; item . setText ( Messages . BreakpointTypesContribution_0 ) ; } @Override public boolean isEnabled ( ) { return false ; } } } ; @Override protected IContributionItem [ ] getContributionItems ( ) { IWorkbenchPart part = null ; ISelection selection = null ; ISelectionService selectionService = fServiceLocator . getService ( ISelectionService . class ) ; if ( selectionService ! = null ) { selection = selectionService . getSelection ( ) ; } IPartService partService = fServiceLocator . getService ( IPartService . class ) ; if ( partService ! = null ) { part = partService . getActivePart ( ) ; } if ( part = = null | | selection = = null ) { return NO_BREAKPOINT_TYPES_CONTRIBUTION_ITEMS ; } IToggleBreakpointsTargetManager manager = DebugUITools . getToggleBreakpointsTargetManager ( ) ; Set < String > enabledIDs = manager . getEnabledToggleBreakpointsTargetIDs ( part , selection ) ; String preferredId = manager . getPreferredToggleBreakpointsTargetID ( part , selection ) ; List < Action > actions = new ArrayList < Action > ( enabledIDs . size ( ) ) ; for ( String id : enabledIDs ) { Action action = new SelectTargetAction ( manager . getToggleBreakpointsTargetName ( id ) , enabledIDs , id ) ; if ( id . equals ( preferredId ) ) { action . setChecked ( true ) ; } actions . add ( action ) ; } if ( enabledIDs . isEmpty ( ) ) { return NO_BREAKPOINT_TYPES_CONTRIBUTION_ITEMS ; } IContributionItem [ ] items = new IContributionItem [ enabledIDs . size ( ) ] ; for ( int i = <int> ; i < actions . size ( ) ; i + + ) { items [ i ] = new ActionContributionItem ( actions . get ( i ) ) ; } return items ; } @Override public void initialize ( IServiceLocator serviceLocator ) { fServiceLocator = serviceLocator ; } } 

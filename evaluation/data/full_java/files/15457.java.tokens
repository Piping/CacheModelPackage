package org . gradle . api . tasks ; import org . gradle . api . * ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . artifacts . dependencies . DefaultExternalModuleDependency ; import org . gradle . api . internal . file . collections . LazilyInitializedFileCollection ; import org . gradle . api . internal . tasks . TaskDependencyResolveContext ; import java . io . File ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; @Incubating public class ScalaRuntime { private static final Pattern SCALA_JAR_PATTERN = Pattern . compile ( <str> ) ; private final Project project ; public ScalaRuntime ( Project project ) { this . project = project ; } public FileCollection inferScalaClasspath ( final Iterable < File > classpath ) { return new LazilyInitializedFileCollection ( ) { @Override public String getDisplayName ( ) { return <str> ; } @Override public FileCollection createDelegate ( ) { if ( project . getRepositories ( ) . isEmpty ( ) ) { throw new GradleException ( String . format ( <str> , project ) ) ; } File scalaLibraryJar = findScalaJar ( classpath , <str> ) ; if ( scalaLibraryJar = = null ) { throw new GradleException ( String . format ( <str> + <str> , project , classpath ) ) ; } String scalaVersion = getScalaVersion ( scalaLibraryJar ) ; if ( scalaVersion = = null ) { throw new AssertionError ( String . format ( <str> , scalaLibraryJar , project ) ) ; } return project . getConfigurations ( ) . detachedConfiguration ( new DefaultExternalModuleDependency ( <str> , <str> , scalaVersion ) ) ; } @Override public void visitDependencies ( TaskDependencyResolveContext context ) { if ( classpath instanceof Buildable ) { context . add ( classpath ) ; } } } ; } @Nullable public File findScalaJar ( Iterable < File > classpath , String appendix ) { for ( File file : classpath ) { Matcher matcher = SCALA_JAR_PATTERN . matcher ( file . getName ( ) ) ; if ( matcher . matches ( ) & & matcher . group ( <int> ) . equals ( appendix ) ) { return file ; } } return null ; } @Nullable public String getScalaVersion ( File scalaJar ) { Matcher matcher = SCALA_JAR_PATTERN . matcher ( scalaJar . getName ( ) ) ; return matcher . matches ( ) ? matcher . group ( <int> ) : null ; } } 

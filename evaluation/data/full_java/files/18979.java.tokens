package io . netty . handler . codec . compression ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufInputStream ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import net . jpountz . lz4 . LZ4BlockInputStream ; import java . io . InputStream ; import static org . junit . Assert . * ; public class Lz4FrameEncoderTest extends AbstractEncoderTest { @Override public void initChannel ( ) { channel = new EmbeddedChannel ( new Lz4FrameEncoder ( ) ) ; } @Override protected ByteBuf decompress ( ByteBuf compressed , int originalLength ) throws Exception { InputStream is = new ByteBufInputStream ( compressed ) ; LZ4BlockInputStream lz4Is = new LZ4BlockInputStream ( is ) ; byte [ ] decompressed = new byte [ originalLength ] ; int remaining = originalLength ; while ( remaining > <int> ) { int read = lz4Is . read ( decompressed , originalLength - remaining , remaining ) ; if ( read > <int> ) { remaining - = read ; } else { break ; } } assertEquals ( - <int> , lz4Is . read ( ) ) ; lz4Is . close ( ) ; return Unpooled . wrappedBuffer ( decompressed ) ; } } 

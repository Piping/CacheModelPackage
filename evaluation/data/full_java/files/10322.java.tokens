package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . testing . EqualsTester ; @GwtCompatible ( emulated = true ) public class EmptyImmutableTableTest extends AbstractImmutableTableTest { private static final ImmutableTable < Character , Integer , String > INSTANCE = ImmutableTable . of ( ) ; @Override Iterable < ImmutableTable < Character , Integer , String > > getTestInstances ( ) { return ImmutableSet . of ( INSTANCE ) ; } public void testHashCode ( ) { assertEquals ( <int> , INSTANCE . hashCode ( ) ) ; } public void testEqualsObject ( ) { Table < Character , Integer , String > nonEmptyTable = HashBasedTable . create ( ) ; nonEmptyTable . put ( <str> , <int> , <str> ) ; new EqualsTester ( ) . addEqualityGroup ( INSTANCE , HashBasedTable . create ( ) , TreeBasedTable . create ( ) ) . addEqualityGroup ( nonEmptyTable ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testEqualsObjectNullValues ( ) { new EqualsTester ( ) . addEqualityGroup ( INSTANCE ) . addEqualityGroup ( ArrayTable . create ( ImmutableSet . of ( <str> ) , ImmutableSet . of ( <int> ) ) ) . testEquals ( ) ; } public void testToString ( ) { assertEquals ( <str> , INSTANCE . toString ( ) ) ; } public void testSize ( ) { assertEquals ( <int> , INSTANCE . size ( ) ) ; } public void testGet ( ) { assertNull ( INSTANCE . get ( <str> , <int> ) ) ; } public void testIsEmpty ( ) { assertTrue ( INSTANCE . isEmpty ( ) ) ; } public void testCellSet ( ) { assertEquals ( ImmutableSet . of ( ) , INSTANCE . cellSet ( ) ) ; } public void testColumn ( ) { assertEquals ( ImmutableMap . of ( ) , INSTANCE . column ( <int> ) ) ; } public void testColumnKeySet ( ) { assertEquals ( ImmutableSet . of ( ) , INSTANCE . columnKeySet ( ) ) ; } public void testColumnMap ( ) { assertEquals ( ImmutableMap . of ( ) , INSTANCE . columnMap ( ) ) ; } public void testContains ( ) { assertFalse ( INSTANCE . contains ( <str> , <int> ) ) ; } public void testContainsColumn ( ) { assertFalse ( INSTANCE . containsColumn ( <int> ) ) ; } public void testContainsRow ( ) { assertFalse ( INSTANCE . containsRow ( <str> ) ) ; } public void testContainsValue ( ) { assertFalse ( INSTANCE . containsValue ( <str> ) ) ; } public void testRow ( ) { assertEquals ( ImmutableMap . of ( ) , INSTANCE . row ( <str> ) ) ; } public void testRowKeySet ( ) { assertEquals ( ImmutableSet . of ( ) , INSTANCE . rowKeySet ( ) ) ; } public void testRowMap ( ) { assertEquals ( ImmutableMap . of ( ) , INSTANCE . rowMap ( ) ) ; } public void testValues ( ) { assertTrue ( INSTANCE . values ( ) . isEmpty ( ) ) ; } } 

package org . gradle . internal . hash ; import org . gradle . api . UncheckedIOException ; import org . gradle . internal . UncheckedException ; import java . io . * ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; public class HashUtil { public static HashValue createHash ( String scriptText , String algorithm ) { MessageDigest messageDigest = createMessageDigest ( algorithm ) ; messageDigest . update ( scriptText . getBytes ( ) ) ; return new HashValue ( messageDigest . digest ( ) ) ; } public static HashValue createHash ( File file , String algorithm ) { try { return createHash ( new FileInputStream ( file ) , algorithm ) ; } catch ( UncheckedIOException e ) { throw new UncheckedIOException ( String . format ( <str> , algorithm , file . getAbsolutePath ( ) ) , e . getCause ( ) ) ; } catch ( FileNotFoundException e ) { throw new UncheckedIOException ( e ) ; } } public static HashValue createHash ( InputStream instr , String algorithm ) { MessageDigest messageDigest ; try { messageDigest = createMessageDigest ( algorithm ) ; byte [ ] buffer = new byte [ <int> ] ; try { while ( true ) { int nread = instr . read ( buffer ) ; if ( nread < <int> ) { break ; } messageDigest . update ( buffer , <int> , nread ) ; } } finally { instr . close ( ) ; } } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } return new HashValue ( messageDigest . digest ( ) ) ; } private static MessageDigest createMessageDigest ( String algorithm ) { try { return MessageDigest . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } public static String createCompactMD5 ( String scriptText ) { return createHash ( scriptText , <str> ) . asCompactString ( ) ; } public static HashValue sha1 ( byte [ ] bytes ) { return createHash ( new ByteArrayInputStream ( bytes ) , <str> ) ; } public static HashValue sha1 ( InputStream inputStream ) { return createHash ( inputStream , <str> ) ; } public static HashValue sha1 ( File file ) { return createHash ( file , <str> ) ; } public static HashValue sha256 ( byte [ ] bytes ) { return createHash ( new ByteArrayInputStream ( bytes ) , <str> ) ; } public static HashValue sha256 ( InputStream inputStream ) { return createHash ( inputStream , <str> ) ; } public static HashValue sha256 ( File file ) { return createHash ( file , <str> ) ; } } 

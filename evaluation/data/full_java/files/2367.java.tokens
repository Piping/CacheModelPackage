package org . nd4j . linalg . util ; import java . nio . * ; public class NioUtil { public enum BufferType { INT , FLOAT , DOUBLE } public static void copyAtStride ( int n , BufferType bufferType , ByteBuffer from , int fromOffset , int fromStride , ByteBuffer to , int toOffset , int toStride ) { ByteBuffer fromView = from . slice ( ) ; ByteBuffer toView = to . slice ( ) ; fromView . order ( ByteOrder . nativeOrder ( ) ) ; toView . order ( ByteOrder . nativeOrder ( ) ) ; fromView . rewind ( ) ; toView . rewind ( ) ; switch ( bufferType ) { case INT : IntBuffer fromInt = fromView . asIntBuffer ( ) ; IntBuffer toInt = toView . asIntBuffer ( ) ; for ( int i = <int> ; i < n ; i + + ) { int put = fromInt . get ( fromOffset + i * fromStride ) ; toInt . put ( toOffset + i * toStride , put ) ; } break ; case FLOAT : FloatBuffer fromFloat = fromView . asFloatBuffer ( ) ; FloatBuffer toFloat = toView . asFloatBuffer ( ) ; for ( int i = <int> ; i < n ; i + + ) { float put = fromFloat . get ( fromOffset + i * fromStride ) ; toFloat . put ( toOffset + i * toStride , put ) ; } break ; case DOUBLE : DoubleBuffer fromDouble = fromView . asDoubleBuffer ( ) ; DoubleBuffer toDouble = toView . asDoubleBuffer ( ) ; for ( int i = <int> ; i < n ; i + + ) { toDouble . put ( toOffset + i * toStride , fromDouble . get ( fromOffset + i * fromStride ) ) ; } break ; default : throw new IllegalArgumentException ( <str> ) ; } } } 

package org . elasticsearch . action . support ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . transport . TransportClient ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . concurrent . AbstractRunnable ; import org . elasticsearch . threadpool . ThreadPool ; import java . util . concurrent . Future ; public final class ThreadedActionListener < Response > implements ActionListener < Response > { public static class Wrapper { private final ESLogger logger ; private final ThreadPool threadPool ; private final boolean threadedListener ; public Wrapper ( ESLogger logger , Settings settings , ThreadPool threadPool ) { this . logger = logger ; this . threadPool = threadPool ; this . threadedListener = DiscoveryNode . clientNode ( settings ) | | TransportClient . CLIENT_TYPE . equals ( settings . get ( Client . CLIENT_TYPE_SETTING ) ) ; } public < Response > ActionListener < Response > wrap ( ActionListener < Response > listener ) { if ( threadedListener = = false ) { return listener ; } if ( listener instanceof Future ) { return listener ; } if ( listener instanceof ThreadedActionListener ) { return listener ; } return new ThreadedActionListener < > ( logger , threadPool , ThreadPool . Names . LISTENER , listener ) ; } } private final ESLogger logger ; private final ThreadPool threadPool ; private final String executor ; private final ActionListener < Response > listener ; public ThreadedActionListener ( ESLogger logger , ThreadPool threadPool , String executor , ActionListener < Response > listener ) { this . logger = logger ; this . threadPool = threadPool ; this . executor = executor ; this . listener = listener ; } @Override public void onResponse ( final Response response ) { threadPool . executor ( executor ) . execute ( new AbstractRunnable ( ) { @Override protected void doRun ( ) throws Exception { listener . onResponse ( response ) ; } @Override public void onFailure ( Throwable t ) { listener . onFailure ( t ) ; } } ) ; } @Override public void onFailure ( final Throwable e ) { threadPool . executor ( executor ) . execute ( new AbstractRunnable ( ) { @Override protected void doRun ( ) throws Exception { listener . onFailure ( e ) ; } @Override public void onFailure ( Throwable t ) { logger . warn ( <str> , t , listener , e ) ; } } ) ; } } 

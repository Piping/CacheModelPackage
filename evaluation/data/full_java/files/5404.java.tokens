package org . elasticsearch . action . support ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . rest . RestRequest ; import java . io . IOException ; import java . util . Map ; import static org . elasticsearch . common . xcontent . support . XContentMapValues . nodeBooleanValue ; import static org . elasticsearch . common . xcontent . support . XContentMapValues . nodeStringArrayValue ; public class IndicesOptions { private static final IndicesOptions [ ] VALUES ; private static final byte IGNORE_UNAVAILABLE = <int> ; private static final byte ALLOW_NO_INDICES = <int> ; private static final byte EXPAND_WILDCARDS_OPEN = <int> ; private static final byte EXPAND_WILDCARDS_CLOSED = <int> ; private static final byte FORBID_ALIASES_TO_MULTIPLE_INDICES = <int> ; private static final byte FORBID_CLOSED_INDICES = <int> ; private static final byte STRICT_EXPAND_OPEN = <int> ; private static final byte LENIENT_EXPAND_OPEN = <int> ; private static final byte STRICT_EXPAND_OPEN_CLOSED = <int> ; private static final byte STRICT_EXPAND_OPEN_FORBID_CLOSED = <int> ; private static final byte STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED = <int> ; static { byte max = <int> < < <int> ; VALUES = new IndicesOptions [ max ] ; for ( byte id = <int> ; id < max ; id + + ) { VALUES [ id ] = new IndicesOptions ( id ) ; } } private final byte id ; private IndicesOptions ( byte id ) { this . id = id ; } public boolean ignoreUnavailable ( ) { return ( id & IGNORE_UNAVAILABLE ) ! = <int> ; } public boolean allowNoIndices ( ) { return ( id & ALLOW_NO_INDICES ) ! = <int> ; } public boolean expandWildcardsOpen ( ) { return ( id & EXPAND_WILDCARDS_OPEN ) ! = <int> ; } public boolean expandWildcardsClosed ( ) { return ( id & EXPAND_WILDCARDS_CLOSED ) ! = <int> ; } public boolean forbidClosedIndices ( ) { return ( id & FORBID_CLOSED_INDICES ) ! = <int> ; } public boolean allowAliasesToMultipleIndices ( ) { return ( id & FORBID_ALIASES_TO_MULTIPLE_INDICES ) = = <int> ; } public void writeIndicesOptions ( StreamOutput out ) throws IOException { out . write ( id ) ; } public static IndicesOptions readIndicesOptions ( StreamInput in ) throws IOException { byte id = in . readByte ( ) ; if ( id > = VALUES . length ) { throw new IllegalArgumentException ( <str> + id ) ; } return VALUES [ id ] ; } public static IndicesOptions fromOptions ( boolean ignoreUnavailable , boolean allowNoIndices , boolean expandToOpenIndices , boolean expandToClosedIndices ) { return fromOptions ( ignoreUnavailable , allowNoIndices , expandToOpenIndices , expandToClosedIndices , true , false ) ; } public static IndicesOptions fromOptions ( boolean ignoreUnavailable , boolean allowNoIndices , boolean expandToOpenIndices , boolean expandToClosedIndices , IndicesOptions defaultOptions ) { return fromOptions ( ignoreUnavailable , allowNoIndices , expandToOpenIndices , expandToClosedIndices , defaultOptions . allowAliasesToMultipleIndices ( ) , defaultOptions . forbidClosedIndices ( ) ) ; } static IndicesOptions fromOptions ( boolean ignoreUnavailable , boolean allowNoIndices , boolean expandToOpenIndices , boolean expandToClosedIndices , boolean allowAliasesToMultipleIndices , boolean forbidClosedIndices ) { byte id = toByte ( ignoreUnavailable , allowNoIndices , expandToOpenIndices , expandToClosedIndices , allowAliasesToMultipleIndices , forbidClosedIndices ) ; return VALUES [ id ] ; } public static IndicesOptions fromRequest ( RestRequest request , IndicesOptions defaultSettings ) { return fromParameters ( request . param ( <str> ) , request . param ( <str> ) , request . param ( <str> ) , defaultSettings ) ; } public static IndicesOptions fromMap ( Map < String , Object > map , IndicesOptions defaultSettings ) { return fromParameters ( map . containsKey ( <str> ) ? map . get ( <str> ) : map . get ( <str> ) , map . containsKey ( <str> ) ? map . get ( <str> ) : map . get ( <str> ) , map . containsKey ( <str> ) ? map . get ( <str> ) : map . get ( <str> ) , defaultSettings ) ; } public static boolean isIndicesOptions ( String name ) { return <str> . equals ( name ) | | <str> . equals ( name ) | | <str> . equals ( name ) | | <str> . equals ( name ) | | <str> . equals ( name ) | | <str> . equals ( name ) ; } public static IndicesOptions fromParameters ( Object wildcardsString , Object ignoreUnavailableString , Object allowNoIndicesString , IndicesOptions defaultSettings ) { if ( wildcardsString = = null & & ignoreUnavailableString = = null & & allowNoIndicesString = = null ) { return defaultSettings ; } boolean expandWildcardsOpen = false ; boolean expandWildcardsClosed = false ; if ( wildcardsString = = null ) { expandWildcardsOpen = defaultSettings . expandWildcardsOpen ( ) ; expandWildcardsClosed = defaultSettings . expandWildcardsClosed ( ) ; } else { String [ ] wildcards = nodeStringArrayValue ( wildcardsString ) ; for ( String wildcard : wildcards ) { if ( <str> . equals ( wildcard ) ) { expandWildcardsOpen = true ; } else if ( <str> . equals ( wildcard ) ) { expandWildcardsClosed = true ; } else if ( <str> . equals ( wildcard ) ) { expandWildcardsOpen = false ; expandWildcardsClosed = false ; } else if ( <str> . equals ( wildcard ) ) { expandWildcardsOpen = true ; expandWildcardsClosed = true ; } else { throw new IllegalArgumentException ( <str> + wildcard + <str> ) ; } } } return fromOptions ( nodeBooleanValue ( ignoreUnavailableString , defaultSettings . ignoreUnavailable ( ) ) , nodeBooleanValue ( allowNoIndicesString , defaultSettings . allowNoIndices ( ) ) , expandWildcardsOpen , expandWildcardsClosed , defaultSettings . allowAliasesToMultipleIndices ( ) , defaultSettings . forbidClosedIndices ( ) ) ; } public static IndicesOptions strictExpandOpen ( ) { return VALUES [ STRICT_EXPAND_OPEN ] ; } public static IndicesOptions strictExpandOpenAndForbidClosed ( ) { return VALUES [ STRICT_EXPAND_OPEN_FORBID_CLOSED ] ; } public static IndicesOptions strictExpand ( ) { return VALUES [ STRICT_EXPAND_OPEN_CLOSED ] ; } public static IndicesOptions strictSingleIndexNoExpandForbidClosed ( ) { return VALUES [ STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED ] ; } public static IndicesOptions lenientExpandOpen ( ) { return VALUES [ LENIENT_EXPAND_OPEN ] ; } private static byte toByte ( boolean ignoreUnavailable , boolean allowNoIndices , boolean wildcardExpandToOpen , boolean wildcardExpandToClosed , boolean allowAliasesToMultipleIndices , boolean forbidClosedIndices ) { byte id = <int> ; if ( ignoreUnavailable ) { id | = IGNORE_UNAVAILABLE ; } if ( allowNoIndices ) { id | = ALLOW_NO_INDICES ; } if ( wildcardExpandToOpen ) { id | = EXPAND_WILDCARDS_OPEN ; } if ( wildcardExpandToClosed ) { id | = EXPAND_WILDCARDS_CLOSED ; } if ( ! allowAliasesToMultipleIndices ) { id | = FORBID_ALIASES_TO_MULTIPLE_INDICES ; } if ( forbidClosedIndices ) { id | = FORBID_CLOSED_INDICES ; } return id ; } @Override public String toString ( ) { return <str> + <str> + id + <str> + ignoreUnavailable ( ) + <str> + allowNoIndices ( ) + <str> + expandWildcardsOpen ( ) + <str> + expandWildcardsClosed ( ) + <str> + allowAliasesToMultipleIndices ( ) + <str> + forbidClosedIndices ( ) + <str> ; } } 

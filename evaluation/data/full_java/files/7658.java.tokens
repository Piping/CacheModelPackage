package org . elasticsearch . transport ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . component . LifecycleComponent ; import org . elasticsearch . common . transport . BoundTransportAddress ; import org . elasticsearch . common . transport . TransportAddress ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public interface Transport extends LifecycleComponent < Transport > { public static class TransportSettings { public static final String TRANSPORT_TCP_COMPRESS = <str> ; } void transportServiceAdapter ( TransportServiceAdapter service ) ; BoundTransportAddress boundAddress ( ) ; Map < String , BoundTransportAddress > profileBoundAddresses ( ) ; TransportAddress [ ] addressesFromString ( String address , int perAddressLimit ) throws Exception ; boolean addressSupported ( Class < ? extends TransportAddress > address ) ; boolean nodeConnected ( DiscoveryNode node ) ; void connectToNode ( DiscoveryNode node ) throws ConnectTransportException ; void connectToNodeLight ( DiscoveryNode node ) throws ConnectTransportException ; void disconnectFromNode ( DiscoveryNode node ) ; void sendRequest ( DiscoveryNode node , long requestId , String action , TransportRequest request , TransportRequestOptions options ) throws IOException , TransportException ; long serverOpen ( ) ; List < String > getLocalAddresses ( ) ; } 

package org . gradle . api . internal . tasks . testing . worker ; import org . gradle . api . Action ; import org . gradle . api . internal . tasks . testing . TestClassProcessor ; import org . gradle . api . internal . tasks . testing . TestClassRunInfo ; import org . gradle . api . internal . tasks . testing . TestResultProcessor ; import org . gradle . api . internal . tasks . testing . WorkerTestClassProcessorFactory ; import org . gradle . internal . TimeProvider ; import org . gradle . internal . TrueTimeProvider ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . concurrent . DefaultExecutorFactory ; import org . gradle . internal . concurrent . ExecutorFactory ; import org . gradle . internal . id . CompositeIdGenerator ; import org . gradle . internal . id . IdGenerator ; import org . gradle . internal . id . LongIdGenerator ; import org . gradle . internal . service . DefaultServiceRegistry ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . messaging . actor . ActorFactory ; import org . gradle . messaging . actor . internal . DefaultActorFactory ; import org . gradle . messaging . dispatch . ContextClassLoaderProxy ; import org . gradle . messaging . remote . ObjectConnection ; import org . gradle . process . internal . WorkerProcessContext ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . Serializable ; import java . util . concurrent . CountDownLatch ; public class TestWorker implements Action < WorkerProcessContext > , RemoteTestClassProcessor , Serializable { private static final Logger LOGGER = LoggerFactory . getLogger ( TestWorker . class ) ; public static final String WORKER_ID_SYS_PROPERTY = <str> ; private final WorkerTestClassProcessorFactory factory ; private CountDownLatch completed ; private TestClassProcessor processor ; private TestResultProcessor resultProcessor ; public TestWorker ( WorkerTestClassProcessorFactory factory ) { this . factory = factory ; } public void execute ( final WorkerProcessContext workerProcessContext ) { LOGGER . info ( <str> , workerProcessContext . getDisplayName ( ) ) ; completed = new CountDownLatch ( <int> ) ; System . setProperty ( WORKER_ID_SYS_PROPERTY , workerProcessContext . getWorkerId ( ) . toString ( ) ) ; DefaultServiceRegistry testServices = new TestFrameworkServiceRegistry ( workerProcessContext ) ; startReceivingTests ( workerProcessContext , testServices ) ; try { try { completed . await ( ) ; } catch ( InterruptedException e ) { throw new UncheckedException ( e ) ; } } finally { LOGGER . info ( <str> , workerProcessContext . getDisplayName ( ) ) ; System . setSecurityManager ( null ) ; testServices . close ( ) ; } } private void startReceivingTests ( WorkerProcessContext workerProcessContext , ServiceRegistry testServices ) { TestClassProcessor targetProcessor = factory . create ( testServices ) ; IdGenerator < Object > idGenerator = testServices . get ( IdGenerator . class ) ; targetProcessor = new WorkerTestClassProcessor ( targetProcessor , idGenerator . generateId ( ) , workerProcessContext . getDisplayName ( ) , testServices . get ( TimeProvider . class ) ) ; ContextClassLoaderProxy < TestClassProcessor > proxy = new ContextClassLoaderProxy < TestClassProcessor > ( TestClassProcessor . class , targetProcessor , workerProcessContext . getApplicationClassLoader ( ) ) ; processor = proxy . getSource ( ) ; ObjectConnection serverConnection = workerProcessContext . getServerConnection ( ) ; serverConnection . useParameterSerializer ( TestEventSerializer . create ( ) ) ; this . resultProcessor = serverConnection . addOutgoing ( TestResultProcessor . class ) ; serverConnection . addIncoming ( RemoteTestClassProcessor . class , this ) ; serverConnection . connect ( ) ; } public void startProcessing ( ) { Thread . currentThread ( ) . setName ( <str> ) ; processor . startProcessing ( resultProcessor ) ; } public void processTestClass ( final TestClassRunInfo testClass ) { Thread . currentThread ( ) . setName ( <str> ) ; try { processor . processTestClass ( testClass ) ; } finally { Thread . interrupted ( ) ; } } public void stop ( ) { Thread . currentThread ( ) . setName ( <str> ) ; try { processor . stop ( ) ; } finally { completed . countDown ( ) ; } } private static class TestFrameworkServiceRegistry extends DefaultServiceRegistry { private final WorkerProcessContext workerProcessContext ; public TestFrameworkServiceRegistry ( WorkerProcessContext workerProcessContext ) { this . workerProcessContext = workerProcessContext ; } protected TimeProvider createTimeProvider ( ) { return new TrueTimeProvider ( ) ; } protected IdGenerator < Object > createIdGenerator ( ) { return new CompositeIdGenerator ( workerProcessContext . getWorkerId ( ) , new LongIdGenerator ( ) ) ; } protected ExecutorFactory createExecutorFactory ( ) { return new DefaultExecutorFactory ( ) ; } protected ActorFactory createActorFactory ( ExecutorFactory executorFactory ) { return new DefaultActorFactory ( executorFactory ) ; } } } 

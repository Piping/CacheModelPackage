package org . gradle . launcher . cli . converter ; import org . gradle . api . GradleException ; import org . gradle . internal . jvm . JavaHomeException ; import org . gradle . internal . jvm . JavaInfo ; import org . gradle . internal . jvm . Jvm ; import org . gradle . launcher . daemon . configuration . DaemonParameters ; import org . gradle . process . internal . JvmOptions ; import java . io . File ; import java . util . Map ; import static org . gradle . launcher . daemon . configuration . GradleProperties . * ; public class PropertiesToDaemonParametersConverter { public void convert ( Map < String , String > properties , DaemonParameters target ) { String prop = properties . get ( IDLE_TIMEOUT_PROPERTY ) ; if ( prop ! = null ) { try { target . setIdleTimeout ( new Integer ( prop ) ) ; } catch ( NumberFormatException e ) { throw new GradleException ( String . format ( <str> , IDLE_TIMEOUT_PROPERTY , prop ) ) ; } } prop = properties . get ( JVM_ARGS_PROPERTY ) ; if ( prop ! = null ) { target . setJvmArgs ( JvmOptions . fromString ( prop ) ) ; } prop = properties . get ( JAVA_HOME_PROPERTY ) ; if ( prop ! = null ) { File javaHome = new File ( prop ) ; if ( ! javaHome . isDirectory ( ) ) { throw new GradleException ( String . format ( <str> , JAVA_HOME_PROPERTY , prop ) ) ; } JavaInfo jvm ; try { jvm = Jvm . forHome ( javaHome ) ; } catch ( JavaHomeException e ) { throw new GradleException ( String . format ( <str> , JAVA_HOME_PROPERTY , prop ) ) ; } target . setJvm ( jvm ) ; } prop = properties . get ( DAEMON_BASE_DIR_PROPERTY ) ; if ( prop ! = null ) { target . setBaseDir ( new File ( prop ) ) ; } String daemonEnabledPropertyValue = properties . get ( DAEMON_ENABLED_PROPERTY ) ; if ( daemonEnabledPropertyValue ! = null ) { target . setEnabled ( isTrue ( daemonEnabledPropertyValue ) ) ; } target . setDebug ( isTrue ( properties . get ( DEBUG_MODE_PROPERTY ) ) ) ; } } 

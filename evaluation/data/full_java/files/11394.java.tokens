package org . gradle . api . internal . changedetection . rules ; import com . google . common . collect . AbstractIterator ; import org . gradle . api . internal . changedetection . state . FileCollectionSnapshot ; import org . gradle . api . internal . changedetection . state . TaskExecution ; import org . gradle . util . ChangeListener ; import java . util . Collections ; import java . util . Iterator ; class InputFilesStateChangeRule { public static TaskStateChanges create ( final TaskExecution previousExecution , final TaskExecution currentExecution , final FileCollectionSnapshot inputFilesSnapshot ) { return new TaskStateChanges ( ) { public Iterator < TaskStateChange > iterator ( ) { if ( previousExecution . getInputFilesSnapshot ( ) = = null ) { return Collections . < TaskStateChange > singleton ( new DescriptiveChange ( <str> ) ) . iterator ( ) ; } return new AbstractIterator < TaskStateChange > ( ) { final FileCollectionSnapshot . ChangeIterator < String > changeIterator = inputFilesSnapshot . iterateChangesSince ( previousExecution . getInputFilesSnapshot ( ) ) ; final ChangeListenerAdapter listenerAdapter = new ChangeListenerAdapter ( ) ; @Override protected TaskStateChange computeNext ( ) { if ( changeIterator . next ( listenerAdapter ) ) { return listenerAdapter . lastChange ; } return endOfData ( ) ; } } ; } public void snapshotAfterTask ( ) { currentExecution . setInputFilesSnapshot ( inputFilesSnapshot ) ; } } ; } private static class ChangeListenerAdapter implements ChangeListener < String > { public InputFileChange lastChange ; public void added ( String fileName ) { lastChange = new InputFileChange ( fileName , ChangeType . ADDED ) ; } public void removed ( String fileName ) { lastChange = new InputFileChange ( fileName , ChangeType . REMOVED ) ; } public void changed ( String fileName ) { lastChange = new InputFileChange ( fileName , ChangeType . MODIFIED ) ; } } } 

package org . apache . cassandra . gms ; import org . apache . cassandra . AbstractSerializationsTester ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . dht . IPartitioner ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . io . util . DataInputPlus . DataInputStreamPlus ; import org . apache . cassandra . io . util . DataOutputStreamPlus ; import org . apache . cassandra . service . StorageService ; import org . apache . cassandra . utils . FBUtilities ; import org . junit . Test ; import java . io . IOException ; import java . net . InetAddress ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class SerializationsTest extends AbstractSerializationsTester { private void testEndpointStateWrite ( ) throws IOException { DataOutputStreamPlus out = getOutput ( <str> ) ; HeartBeatState . serializer . serialize ( Statics . HeartbeatSt , out , getVersion ( ) ) ; EndpointState . serializer . serialize ( Statics . EndpointSt , out , getVersion ( ) ) ; VersionedValue . serializer . serialize ( Statics . vv0 , out , getVersion ( ) ) ; VersionedValue . serializer . serialize ( Statics . vv1 , out , getVersion ( ) ) ; out . close ( ) ; testSerializedSize ( Statics . HeartbeatSt , HeartBeatState . serializer ) ; testSerializedSize ( Statics . EndpointSt , EndpointState . serializer ) ; testSerializedSize ( Statics . vv0 , VersionedValue . serializer ) ; testSerializedSize ( Statics . vv1 , VersionedValue . serializer ) ; } @Test public void testEndpointStateRead ( ) throws IOException { if ( EXECUTE_WRITES ) testEndpointStateWrite ( ) ; DataInputStreamPlus in = getInput ( <str> ) ; assert HeartBeatState . serializer . deserialize ( in , getVersion ( ) ) ! = null ; assert EndpointState . serializer . deserialize ( in , getVersion ( ) ) ! = null ; assert VersionedValue . serializer . deserialize ( in , getVersion ( ) ) ! = null ; assert VersionedValue . serializer . deserialize ( in , getVersion ( ) ) ! = null ; in . close ( ) ; } private void testGossipDigestWrite ( ) throws IOException { Map < InetAddress , EndpointState > states = new HashMap < InetAddress , EndpointState > ( ) ; states . put ( InetAddress . getByName ( <str> ) , Statics . EndpointSt ) ; states . put ( InetAddress . getByName ( <str> ) , Statics . EndpointSt ) ; GossipDigestAck ack = new GossipDigestAck ( Statics . Digests , states ) ; GossipDigestAck2 ack2 = new GossipDigestAck2 ( states ) ; GossipDigestSyn syn = new GossipDigestSyn ( <str> , StorageService . instance . getTokenMetadata ( ) . partitioner . getClass ( ) . getCanonicalName ( ) , Statics . Digests ) ; DataOutputStreamPlus out = getOutput ( <str> ) ; for ( GossipDigest gd : Statics . Digests ) GossipDigest . serializer . serialize ( gd , out , getVersion ( ) ) ; GossipDigestAck . serializer . serialize ( ack , out , getVersion ( ) ) ; GossipDigestAck2 . serializer . serialize ( ack2 , out , getVersion ( ) ) ; GossipDigestSyn . serializer . serialize ( syn , out , getVersion ( ) ) ; out . close ( ) ; for ( GossipDigest gd : Statics . Digests ) testSerializedSize ( gd , GossipDigest . serializer ) ; testSerializedSize ( ack , GossipDigestAck . serializer ) ; testSerializedSize ( ack2 , GossipDigestAck2 . serializer ) ; testSerializedSize ( syn , GossipDigestSyn . serializer ) ; } @Test public void testGossipDigestRead ( ) throws IOException { if ( EXECUTE_WRITES ) testGossipDigestWrite ( ) ; int count = <int> ; DataInputStreamPlus in = getInput ( <str> ) ; while ( count < Statics . Digests . size ( ) ) assert GossipDigestAck2 . serializer . deserialize ( in , getVersion ( ) ) ! = null ; assert GossipDigestAck . serializer . deserialize ( in , getVersion ( ) ) ! = null ; assert GossipDigestAck2 . serializer . deserialize ( in , getVersion ( ) ) ! = null ; assert GossipDigestSyn . serializer . deserialize ( in , getVersion ( ) ) ! = null ; in . close ( ) ; } private static class Statics { private static HeartBeatState HeartbeatSt = new HeartBeatState ( <int> , <int> ) ; private static EndpointState EndpointSt = new EndpointState ( HeartbeatSt ) ; private static IPartitioner partitioner = StorageService . instance . getTokenMetadata ( ) . partitioner ; private static VersionedValue . VersionedValueFactory vvFact = new VersionedValue . VersionedValueFactory ( partitioner ) ; private static VersionedValue vv0 = vvFact . load ( <int> d ) ; private static VersionedValue vv1 = vvFact . bootstrapping ( Collections . < Token > singleton ( partitioner . getRandomToken ( ) ) ) ; private static List < GossipDigest > Digests = new ArrayList < GossipDigest > ( ) ; { HeartbeatSt . updateHeartBeat ( ) ; EndpointSt . addApplicationState ( ApplicationState . LOAD , vv0 ) ; EndpointSt . addApplicationState ( ApplicationState . STATUS , vv1 ) ; for ( int i = <int> ; i < <int> ; i + + ) Digests . add ( new GossipDigest ( FBUtilities . getBroadcastAddress ( ) , <int> + i , <int> + <int> * i ) ) ; } } } 

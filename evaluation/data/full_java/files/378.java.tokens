package org . apache . cassandra . db . compaction ; import java . util . Set ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Directories ; import org . apache . cassandra . db . compaction . CompactionManager . CompactionExecutorStatsCollector ; import org . apache . cassandra . db . compaction . writers . CompactionAwareWriter ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . utils . WrappedRunnable ; import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; public abstract class AbstractCompactionTask extends WrappedRunnable { protected final ColumnFamilyStore cfs ; protected LifecycleTransaction transaction ; protected boolean isUserDefined ; protected OperationType compactionType ; public AbstractCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction transaction ) { this . cfs = cfs ; this . transaction = transaction ; this . isUserDefined = false ; this . compactionType = OperationType . COMPACTION ; Set < SSTableReader > compacting = transaction . tracker . getCompacting ( ) ; for ( SSTableReader sstable : transaction . originals ( ) ) assert compacting . contains ( sstable ) : sstable . getFilename ( ) + <str> ; } public int execute ( CompactionExecutorStatsCollector collector ) { try { return executeInternal ( collector ) ; } finally { transaction . close ( ) ; } } public abstract CompactionAwareWriter getCompactionAwareWriter ( ColumnFamilyStore cfs , Directories directories , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables ) ; protected abstract int executeInternal ( CompactionExecutorStatsCollector collector ) ; public AbstractCompactionTask setUserDefined ( boolean isUserDefined ) { this . isUserDefined = isUserDefined ; return this ; } public AbstractCompactionTask setCompactionType ( OperationType compactionType ) { this . compactionType = compactionType ; return this ; } public String toString ( ) { return <str> + transaction + <str> ; } } 

package org . apache . cassandra . cql3 . validation . operations ; import java . util . Arrays ; import org . junit . Test ; import static org . apache . commons . lang3 . StringUtils . isEmpty ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . utils . ByteBufferUtil ; public class UpdateTest extends CQLTester { @Test public void testUpdateColumnType ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> , set ( <str> ) , <str> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> , set ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( ByteBufferUtil . bytes ( <str> ) , <str> , set ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) , set ( <str> ) , ByteBufferUtil . bytes ( <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <str> ) , set ( ByteBufferUtil . bytes ( <str> ) ) , ByteBufferUtil . bytes ( <str> ) ) ) ; } @Test public void testTypeCasts ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> ) ; execute ( <str> , <int> ) ; execute ( <str> , <int> ) ; execute ( <str> , <int> ) ; execute ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; execute ( <str> , <int> ) ; execute ( <str> , <int> ) ; execute ( <str> , <int> ) ; execute ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; assertInvalid ( <str> , <int> ) ; } @Test public void testUpdate ( ) throws Throwable { testUpdate ( false ) ; testUpdate ( true ) ; } private void testUpdate ( boolean forceFlush ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + <str> + <str> + <str> + compactOption ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; execute ( <str> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> ) ) ; execute ( <str> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , Arrays . asList ( <int> , <int> ) , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , Arrays . asList ( <int> , <int> ) , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; execute ( <str> , null , <int> , <int> ) ; flush ( forceFlush ) ; if ( isEmpty ( compactOption ) ) { assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , null ) , row ( <int> , <int> , <int> ) ) ; } else { assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidSyntax ( <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; String expectedMsg = isEmpty ( compactOption ) ? <str> : <str> ; assertInvalidMessage ( expectedMsg , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; } } @Test public void testUpdateWithSecondaryIndices ( ) throws Throwable { testUpdateWithSecondaryIndices ( false ) ; testUpdateWithSecondaryIndices ( true ) ; } private void testUpdateWithSecondaryIndices ( boolean forceFlush ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; } @Test public void testUpdateWithTwoClusteringColumns ( ) throws Throwable { testUpdateWithTwoClusteringColumns ( false ) ; testUpdateWithTwoClusteringColumns ( true ) ; } private void testUpdateWithTwoClusteringColumns ( boolean forceFlush ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + <str> + <str> + <str> + <str> + compactOption ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , Arrays . asList ( <int> , <int> ) , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , Arrays . asList ( <int> , <int> ) , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , null , <int> , <int> , <int> ) ; flush ( forceFlush ) ; if ( isEmpty ( compactOption ) ) { assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , null ) , row ( <int> , <int> , <int> , <int> ) ) ; } else { assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; } assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; String errorMsg = isEmpty ( compactOption ) ? <str> : <str> ; assertInvalidMessage ( errorMsg , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidSyntax ( <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; String expectedMsg = isEmpty ( compactOption ) ? <str> : <str> ; assertInvalidMessage ( expectedMsg , <str> , <int> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; } } @Test public void testUpdateWithMultiplePartitionKeyComponents ( ) throws Throwable { testUpdateWithMultiplePartitionKeyComponents ( false ) ; testUpdateWithMultiplePartitionKeyComponents ( true ) ; } public void testUpdateWithMultiplePartitionKeyComponents ( boolean forceFlush ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + <str> + <str> + <str> + <str> + <str> + compactOption ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; } } @Test public void testUpdateWithAStaticColumn ( ) throws Throwable { testUpdateWithAStaticColumn ( false ) ; testUpdateWithAStaticColumn ( true ) ; } private void testUpdateWithAStaticColumn ( boolean forceFlush ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; execute ( <str> , <str> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> ) , row ( <str> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> , <int> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <str> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> , <int> ) ; } @Test public void testUpdateWithStaticList ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> , <int> , <int> , <int> , list ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> ) ) ) ; execute ( <str> , <int> , <str> , <int> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> ) ) ) ; } private void flush ( boolean forceFlush ) { if ( forceFlush ) flush ( ) ; } } 

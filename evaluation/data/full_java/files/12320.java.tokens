package org . gradle . testfixtures . internal ; import org . gradle . StartParameter ; import org . gradle . api . Project ; import org . gradle . api . internal . AsmBackedClassGenerator ; import org . gradle . api . internal . GradleInternal ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . TemporaryFileProvider ; import org . gradle . api . internal . file . TmpDirTemporaryFileProvider ; import org . gradle . api . internal . initialization . ClassLoaderScope ; import org . gradle . api . internal . project . DefaultProject ; import org . gradle . api . internal . project . IProjectFactory ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . groovy . scripts . StringScriptSource ; import org . gradle . initialization . DefaultProjectDescriptor ; import org . gradle . initialization . DefaultProjectDescriptorRegistry ; import org . gradle . internal . nativeintegration . services . NativeServices ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . internal . service . ServiceRegistryBuilder ; import org . gradle . internal . service . scopes . ServiceRegistryFactory ; import org . gradle . invocation . DefaultGradle ; import org . gradle . logging . LoggingServiceRegistry ; import org . gradle . util . GFileUtils ; import java . io . File ; public class ProjectBuilderImpl { private static ServiceRegistry globalServices ; private static final AsmBackedClassGenerator CLASS_GENERATOR = new AsmBackedClassGenerator ( ) ; public Project createChildProject ( String name , Project parent , File projectDir ) { ProjectInternal parentProject = ( ProjectInternal ) parent ; DefaultProject project = CLASS_GENERATOR . newInstance ( DefaultProject . class , name , parentProject , ( projectDir ! = null ) ? projectDir . getAbsoluteFile ( ) : new File ( parentProject . getProjectDir ( ) , name ) , new StringScriptSource ( <str> , null ) , parentProject . getGradle ( ) , parentProject . getGradle ( ) . getServiceRegistryFactory ( ) , parentProject . getClassLoaderScope ( ) . createChild ( <str> + name ) , parentProject . getBaseClassLoaderScope ( ) ) ; parentProject . addChildProject ( project ) ; parentProject . getProjectRegistry ( ) . addProject ( project ) ; return project ; } public Project createProject ( String name , File inputProjectDir ) { File projectDir = prepareProjectDir ( inputProjectDir ) ; final File homeDir = new File ( projectDir , <str> ) ; StartParameter startParameter = new StartParameter ( ) ; File userHomeDir = new File ( projectDir , <str> ) ; startParameter . setGradleUserHomeDir ( userHomeDir ) ; NativeServices . initialize ( userHomeDir ) ; ServiceRegistry topLevelRegistry = new TestBuildScopeServices ( getGlobalServices ( ) , startParameter , homeDir ) ; GradleInternal gradle = CLASS_GENERATOR . newInstance ( DefaultGradle . class , null , startParameter , topLevelRegistry . get ( ServiceRegistryFactory . class ) ) ; DefaultProjectDescriptor projectDescriptor = new DefaultProjectDescriptor ( null , name , projectDir , new DefaultProjectDescriptorRegistry ( ) , topLevelRegistry . get ( FileResolver . class ) ) ; ClassLoaderScope baseScope = gradle . getClassLoaderScope ( ) ; ClassLoaderScope rootProjectScope = baseScope . createChild ( <str> ) ; ProjectInternal project = topLevelRegistry . get ( IProjectFactory . class ) . createProject ( projectDescriptor , null , gradle , rootProjectScope , baseScope ) ; gradle . setRootProject ( project ) ; gradle . setDefaultProject ( project ) ; return project ; } private ServiceRegistry getGlobalServices ( ) { if ( globalServices = = null ) { globalServices = ServiceRegistryBuilder . builder ( ) . displayName ( <str> ) . parent ( LoggingServiceRegistry . newNestedLogging ( ) ) . parent ( NativeServices . getInstance ( ) ) . provider ( new TestGlobalScopeServices ( ) ) . build ( ) ; } return globalServices ; } public File prepareProjectDir ( File projectDir ) { if ( projectDir = = null ) { TemporaryFileProvider temporaryFileProvider = new TmpDirTemporaryFileProvider ( ) ; projectDir = temporaryFileProvider . createTemporaryDirectory ( <str> , <str> ) ; projectDir . deleteOnExit ( ) ; } else { projectDir = GFileUtils . canonicalise ( projectDir ) ; } return projectDir ; } } 

package org . gradle . api . internal . tasks . testing . junit ; import org . gradle . api . internal . tasks . testing . detection . AbstractTestFrameworkDetector ; import org . gradle . api . internal . tasks . testing . detection . ClassFileExtractionManager ; import org . gradle . api . internal . tasks . testing . detection . TestClassVisitor ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; public class JUnitDetector extends AbstractTestFrameworkDetector < JUnitTestClassDetecter > { private static final Logger LOGGER = LoggerFactory . getLogger ( JUnitDetector . class ) ; public JUnitDetector ( ClassFileExtractionManager classFileExtractionManager ) { super ( classFileExtractionManager ) ; } protected JUnitTestClassDetecter createClassVisitor ( ) { return new JUnitTestClassDetecter ( this ) ; } protected boolean processTestClass ( final File testClassFile , boolean superClass ) { final TestClassVisitor classVisitor = classVisitor ( testClassFile ) ; boolean isTest = classVisitor . isTest ( ) ; if ( ! isTest ) { final String superClassName = classVisitor . getSuperClassName ( ) ; if ( isKnownTestCaseClassName ( superClassName ) ) { isTest = true ; } else { final File superClassFile = getSuperTestClassFile ( superClassName ) ; if ( superClassFile ! = null ) { isTest = processSuperClass ( superClassFile ) ; } else { LOGGER . debug ( <str> , superClassName ) ; } } } publishTestClass ( isTest , classVisitor , superClass ) ; return isTest ; } } 

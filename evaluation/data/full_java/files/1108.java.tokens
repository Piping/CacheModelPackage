package org . apache . cassandra . tools . nodetool ; import io . airlift . command . Command ; import io . airlift . command . Option ; import java . util . Set ; import org . apache . cassandra . io . util . FileUtils ; import org . apache . cassandra . net . MessagingServiceMBean ; import org . apache . cassandra . streaming . ProgressInfo ; import org . apache . cassandra . streaming . SessionInfo ; import org . apache . cassandra . streaming . StreamState ; import org . apache . cassandra . tools . NodeProbe ; import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; @Command ( name = <str> , description = <str> ) public class NetStats extends NodeToolCmd { @Option ( title = <str> , name = { <str> , <str> } , description = <str> ) private boolean humanReadable = false ; @Override public void execute ( NodeProbe probe ) { System . out . printf ( <str> , probe . getOperationMode ( ) ) ; Set < StreamState > statuses = probe . getStreamStatus ( ) ; if ( statuses . isEmpty ( ) ) System . out . println ( <str> ) ; for ( StreamState status : statuses ) { System . out . printf ( <str> , status . description , status . planId . toString ( ) ) ; for ( SessionInfo info : status . sessions ) { System . out . printf ( <str> , info . peer . toString ( ) ) ; if ( ! info . peer . equals ( info . connecting ) ) { System . out . printf ( <str> , info . connecting . toString ( ) ) ; } System . out . printf ( <str> ) ; if ( ! info . receivingSummaries . isEmpty ( ) ) { if ( humanReadable ) System . out . printf ( <str> , info . getTotalFilesToReceive ( ) , FileUtils . stringifyFileSize ( info . getTotalSizeToReceive ( ) ) , info . getTotalFilesReceived ( ) , FileUtils . stringifyFileSize ( info . getTotalSizeReceived ( ) ) ) ; else System . out . printf ( <str> , info . getTotalFilesToReceive ( ) , info . getTotalSizeToReceive ( ) , info . getTotalFilesReceived ( ) , info . getTotalSizeReceived ( ) ) ; for ( ProgressInfo progress : info . getReceivingFiles ( ) ) { System . out . printf ( <str> , progress . toString ( ) ) ; } } if ( ! info . sendingSummaries . isEmpty ( ) ) { if ( humanReadable ) System . out . printf ( <str> , info . getTotalFilesToSend ( ) , FileUtils . stringifyFileSize ( info . getTotalSizeToSend ( ) ) , info . getTotalFilesSent ( ) , FileUtils . stringifyFileSize ( info . getTotalSizeSent ( ) ) ) ; else System . out . printf ( <str> , info . getTotalFilesToSend ( ) , info . getTotalSizeToSend ( ) , info . getTotalFilesSent ( ) , info . getTotalSizeSent ( ) ) ; for ( ProgressInfo progress : info . getSendingFiles ( ) ) { System . out . printf ( <str> , progress . toString ( ) ) ; } } } } if ( ! probe . isStarting ( ) ) { System . out . printf ( <str> , probe . getReadRepairAttempted ( ) , probe . getReadRepairRepairedBlocking ( ) , probe . getReadRepairRepairedBackground ( ) ) ; MessagingServiceMBean ms = probe . msProxy ; System . out . printf ( <str> , <str> ) ; System . out . printf ( <str> , <str> ) ; System . out . printf ( <str> , <str> ) ; System . out . printf ( <str> , <str> ) ; int pending ; long completed ; pending = <int> ; for ( int n : ms . getLargeMessagePendingTasks ( ) . values ( ) ) pending + = n ; completed = <int> ; for ( long n : ms . getLargeMessageCompletedTasks ( ) . values ( ) ) completed + = n ; System . out . printf ( <str> , <str> , <str> , pending , completed ) ; pending = <int> ; for ( int n : ms . getSmallMessagePendingTasks ( ) . values ( ) ) pending + = n ; completed = <int> ; for ( long n : ms . getSmallMessageCompletedTasks ( ) . values ( ) ) completed + = n ; System . out . printf ( <str> , <str> , <str> , pending , completed ) ; pending = <int> ; for ( int n : ms . getGossipMessagePendingTasks ( ) . values ( ) ) pending + = n ; completed = <int> ; for ( long n : ms . getGossipMessageCompletedTasks ( ) . values ( ) ) completed + = n ; System . out . printf ( <str> , <str> , <str> , pending , completed ) ; } } } 

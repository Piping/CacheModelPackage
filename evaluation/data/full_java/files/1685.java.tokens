package org . apache . cassandra . stress ; import java . util . concurrent . atomic . AtomicLong ; interface WorkManager { int takePermits ( int count ) ; void stop ( ) ; static final class FixedWorkManager implements WorkManager { final AtomicLong permits ; public FixedWorkManager ( long permits ) { this . permits = new AtomicLong ( permits ) ; } @Override public int takePermits ( int count ) { while ( true ) { long cur = permits . get ( ) ; if ( cur = = <int> ) return - <int> ; count = ( int ) Math . min ( count , cur ) ; long next = cur - count ; if ( permits . compareAndSet ( cur , next ) ) return count ; } } @Override public void stop ( ) { permits . getAndSet ( <int> ) ; } } static final class ContinuousWorkManager implements WorkManager { volatile boolean stop = false ; @Override public int takePermits ( int count ) { if ( stop ) return - <int> ; return count ; } @Override public void stop ( ) { stop = true ; } } } 

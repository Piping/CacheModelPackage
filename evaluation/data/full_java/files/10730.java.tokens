package org . gradle . build . docs . dsl . source . model ; import org . gradle . api . Transformer ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; public abstract class AbstractLanguageElement implements LanguageElement , Serializable { private String rawCommentText ; private final List < String > annotationNames = new ArrayList < String > ( ) ; protected AbstractLanguageElement ( ) { } protected AbstractLanguageElement ( String rawCommentText ) { this . rawCommentText = rawCommentText ; } public String getRawCommentText ( ) { return rawCommentText ; } public void setRawCommentText ( String rawCommentText ) { this . rawCommentText = rawCommentText ; } public List < String > getAnnotationTypeNames ( ) { return annotationNames ; } public void addAnnotationTypeName ( String annotationType ) { annotationNames . add ( annotationType ) ; } public boolean isDeprecated ( ) { return annotationNames . contains ( Deprecated . class . getName ( ) ) ; } public boolean isIncubating ( ) { return annotationNames . contains ( <str> ) ; } public void resolveTypes ( Transformer < String , String > transformer ) { for ( int i = <int> ; i < annotationNames . size ( ) ; i + + ) { annotationNames . set ( i , transformer . transform ( annotationNames . get ( i ) ) ) ; } } } 

package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . CircleShape ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; public class SimpleTest extends Box2DTest { @Override protected void createWorld ( World world ) { PolygonShape groundPoly = new PolygonShape ( ) ; groundPoly . setAsBox ( <int> , <int> ) ; BodyDef groundBodyDef = new BodyDef ( ) ; groundBodyDef . type = BodyType . StaticBody ; groundBody = world . createBody ( groundBodyDef ) ; groundBody . createFixture ( groundPoly , <int> ) ; groundPoly . dispose ( ) ; PolygonShape boxPoly = new PolygonShape ( ) ; boxPoly . setAsBox ( <int> , <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { BodyDef boxBodyDef = new BodyDef ( ) ; boxBodyDef . type = BodyType . DynamicBody ; boxBodyDef . position . x = - <int> + ( float ) ( Math . random ( ) * <int> ) ; boxBodyDef . position . y = <int> + ( float ) ( Math . random ( ) * <int> ) ; Body boxBody = world . createBody ( boxBodyDef ) ; boxBody . createFixture ( boxPoly , <int> ) ; } boxPoly . dispose ( ) ; CircleShape circleShape = new CircleShape ( ) ; circleShape . setRadius ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { BodyDef circleBodyDef = new BodyDef ( ) ; circleBodyDef . type = BodyType . DynamicBody ; circleBodyDef . position . x = - <int> + ( float ) ( Math . random ( ) * <int> ) ; circleBodyDef . position . y = <int> + ( float ) ( Math . random ( ) * <int> ) ; Body circleBody = world . createBody ( circleBodyDef ) ; circleBody . createFixture ( circleShape , <int> ) ; } circleShape . dispose ( ) ; } } 

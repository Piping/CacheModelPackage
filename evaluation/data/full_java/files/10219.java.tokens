package com . google . common . math ; import static com . google . common . math . MathBenchmarking . ARRAY_MASK ; import static com . google . common . math . MathBenchmarking . ARRAY_SIZE ; import static com . google . common . math . MathBenchmarking . RANDOM_SOURCE ; import static com . google . common . math . MathBenchmarking . randomNonZeroBigInteger ; import static com . google . common . math . MathBenchmarking . randomPositiveBigInteger ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import com . google . common . math . IntMath ; import java . math . RoundingMode ; public class IntMathRoundingBenchmark { private static final int [ ] positive = new int [ ARRAY_SIZE ] ; private static final int [ ] nonzero = new int [ ARRAY_SIZE ] ; private static final int [ ] ints = new int [ ARRAY_SIZE ] ; @BeforeExperiment void setUp ( ) { for ( int i = <int> ; i < ARRAY_SIZE ; i + + ) { positive [ i ] = randomPositiveBigInteger ( Integer . SIZE - <int> ) . intValue ( ) ; nonzero [ i ] = randomNonZeroBigInteger ( Integer . SIZE - <int> ) . intValue ( ) ; ints [ i ] = RANDOM_SOURCE . nextInt ( ) ; } } @Param ( { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ) RoundingMode mode ; @Benchmark int log2 ( int reps ) { int tmp = <int> ; for ( int i = <int> ; i < reps ; i + + ) { int j = i & ARRAY_MASK ; tmp + = IntMath . log2 ( positive [ j ] , mode ) ; } return tmp ; } @Benchmark int log10 ( int reps ) { int tmp = <int> ; for ( int i = <int> ; i < reps ; i + + ) { int j = i & ARRAY_MASK ; tmp + = IntMath . log10 ( positive [ j ] , mode ) ; } return tmp ; } @Benchmark int sqrt ( int reps ) { int tmp = <int> ; for ( int i = <int> ; i < reps ; i + + ) { int j = i & ARRAY_MASK ; tmp + = IntMath . sqrt ( positive [ j ] , mode ) ; } return tmp ; } @Benchmark int divide ( int reps ) { int tmp = <int> ; for ( int i = <int> ; i < reps ; i + + ) { int j = i & ARRAY_MASK ; tmp + = IntMath . divide ( ints [ j ] , nonzero [ j ] , mode ) ; } return tmp ; } } 

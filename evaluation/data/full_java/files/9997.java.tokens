package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . Helpers . mapEntry ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . Multimap ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . Collection ; import java . util . Map . Entry ; @GwtCompatible public class MultimapSizeTester < K , V > extends AbstractMultimapTester < K , V , Multimap < K , V > > { public void testSize ( ) { int expectedSize = getNumElements ( ) ; Multimap < K , V > multimap = multimap ( ) ; assertEquals ( expectedSize , multimap . size ( ) ) ; int size = <int> ; for ( Entry < K , V > entry : multimap . entries ( ) ) { assertTrue ( multimap . containsEntry ( entry . getKey ( ) , entry . getValue ( ) ) ) ; size + + ; } assertEquals ( expectedSize , size ) ; int size2 = <int> ; for ( Entry < K , Collection < V > > entry2 : multimap . asMap ( ) . entrySet ( ) ) { size2 + = entry2 . getValue ( ) . size ( ) ; } assertEquals ( expectedSize , size2 ) ; } @CollectionSize.Require ( ZERO ) public void testIsEmptyYes ( ) { assertTrue ( multimap ( ) . isEmpty ( ) ) ; } @CollectionSize.Require ( absent = ZERO ) public void testIsEmptyNo ( ) { assertFalse ( multimap ( ) . isEmpty ( ) ) ; } @CollectionSize.Require ( absent = ZERO ) @MapFeature.Require ( ALLOWS_NULL_KEYS ) public void testSizeNullKey ( ) { initMultimapWithNullKey ( ) ; assertEquals ( getNumElements ( ) , multimap ( ) . size ( ) ) ; assertFalse ( multimap ( ) . isEmpty ( ) ) ; } @CollectionSize.Require ( absent = ZERO ) @MapFeature.Require ( ALLOWS_NULL_VALUES ) public void testSizeNullValue ( ) { initMultimapWithNullValue ( ) ; assertEquals ( getNumElements ( ) , multimap ( ) . size ( ) ) ; assertFalse ( multimap ( ) . isEmpty ( ) ) ; } @CollectionSize.Require ( absent = ZERO ) @MapFeature.Require ( { ALLOWS_NULL_KEYS , ALLOWS_NULL_VALUES } ) public void testSizeNullKeyAndValue ( ) { initMultimapWithNullKeyAndValue ( ) ; assertEquals ( getNumElements ( ) , multimap ( ) . size ( ) ) ; assertFalse ( multimap ( ) . isEmpty ( ) ) ; } @CollectionSize.Require ( SEVERAL ) public void testSizeMultipleValues ( ) { resetContainer ( mapEntry ( k0 ( ) , v0 ( ) ) , mapEntry ( k0 ( ) , v1 ( ) ) , mapEntry ( k0 ( ) , v2 ( ) ) ) ; assertEquals ( <int> , multimap ( ) . size ( ) ) ; assertEquals ( <int> , multimap ( ) . entries ( ) . size ( ) ) ; assertEquals ( <int> , multimap ( ) . keys ( ) . size ( ) ) ; assertEquals ( <int> , multimap ( ) . keySet ( ) . size ( ) ) ; assertEquals ( <int> , multimap ( ) . asMap ( ) . size ( ) ) ; } } 

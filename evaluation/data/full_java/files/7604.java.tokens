package org . elasticsearch . search . suggest . phrase ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . Terms ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . search . suggest . SuggestUtils ; import org . elasticsearch . search . suggest . phrase . DirectCandidateGenerator . Candidate ; import java . io . IOException ; public final class LinearInterpoatingScorer extends WordScorer { private final double unigramLambda ; private final double bigramLambda ; private final double trigramLambda ; public LinearInterpoatingScorer ( IndexReader reader , Terms terms , String field , double realWordLikelyhood , BytesRef separator , double trigramLambda , double bigramLambda , double unigramLambda ) throws IOException { super ( reader , terms , field , realWordLikelyhood , separator ) ; double sum = unigramLambda + bigramLambda + trigramLambda ; this . unigramLambda = unigramLambda / sum ; this . bigramLambda = bigramLambda / sum ; this . trigramLambda = trigramLambda / sum ; } @Override protected double scoreBigram ( Candidate word , Candidate w_1 ) throws IOException { SuggestUtils . join ( separator , spare , w_1 . term , word . term ) ; final long count = frequency ( spare . get ( ) ) ; if ( count < <int> ) { return unigramLambda * scoreUnigram ( word ) ; } return bigramLambda * ( count / ( <float> + w_1 . frequency ) ) + unigramLambda * scoreUnigram ( word ) ; } @Override protected double scoreTrigram ( Candidate w , Candidate w_1 , Candidate w_2 ) throws IOException { SuggestUtils . join ( separator , spare , w . term , w_1 . term , w_2 . term ) ; final long count = frequency ( spare . get ( ) ) ; if ( count < <int> ) { return scoreBigram ( w , w_1 ) ; } SuggestUtils . join ( separator , spare , w . term , w_1 . term ) ; return trigramLambda * ( count / ( <float> + frequency ( spare . get ( ) ) ) ) + scoreBigram ( w , w_1 ) ; } } 

package org . apache . cassandra . cql3 . validation . entities ; import java . util . Map ; import java . util . Random ; import java . util . Set ; import java . util . Arrays ; import java . util . UUID ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . assertEquals ; public class CollectionsTest extends CQLTester { @Test public void testMapBulkRemoval ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , map ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> , set ( <str> ) , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> , map ( <str> , <str> ) , set ( <str> ) , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , <str> , <str> , <str> ) ) ) ; } @Test public void testInvalidCollectionsMix ( ) throws Throwable { createTable ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> , map ( <str> , <str> , <str> , <str> ) ) ; assertInvalid ( <str> , map ( <str> , <str> , <str> , <str> ) ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> , map ( <str> , <str> , <str> , <str> ) ) ; assertInvalid ( <str> , map ( <str> , <str> , <str> , <str> ) ) ; assertInvalid ( <str> , list ( <str> , <str> ) ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> , set ( <str> , <str> ) ) ; assertInvalid ( <str> , map ( <str> , <str> , <str> , <str> ) ) ; } @Test public void testSets ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , set ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , <str> , <str> ) ) ) ; execute ( <str> , set ( <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , <str> ) ) ) ; execute ( <str> , set ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , <str> , <str> ) ) ) ; execute ( <str> , set ( <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( set ( <str> ) ) ) ; execute ( <str> , set ( <str> ) ) ; execute ( <str> , set ( <str> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( ( Object ) null ) ) ; } @Test public void testMaps ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , map ( <str> , <int> , <str> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> , <str> , <int> , <str> , <int> ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> , <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> , map ( <str> , <int> , <str> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> , map ( <str> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> , <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( ( Object ) null ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( ( Object ) null ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( ( Object ) null ) ) ; } @Test public void testLists ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , list ( <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> ) ) ) ; execute ( <str> , <int> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> ) ) ) ; execute ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> ) ) ) ; execute ( <str> , list ( <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> ) ) ) ; execute ( <str> , list ( <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> , list ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> , list ( <str> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( ( Object ) null ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> , list ( <str> ) ) ; execute ( <str> , list ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( ( Object ) null ) ) ; } @Test public void testMapWithUnsetValues ( ) throws Throwable { createTable ( <str> ) ; Object m = map ( <str> , <str> ) ; execute ( <str> , m ) ; assertRows ( execute ( <str> ) , row ( m ) ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( m ) ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( m ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; } @Test public void testListWithUnsetValues ( ) throws Throwable { createTable ( <str> ) ; Object l = list ( <str> , <str> ) ; execute ( <str> , l ) ; assertRows ( execute ( <str> ) , row ( l ) ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( l ) ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( l ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( l ) ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( l ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; } @Test public void testSetWithUnsetValues ( ) throws Throwable { createTable ( <str> ) ; Object s = set ( <str> , <str> , <str> ) ; execute ( <str> , s ) ; assertRows ( execute ( <str> ) , row ( s ) ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( s ) ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( s ) ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( s ) ) ; } @Test public void testSet ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( set ( <str> ) ) ) ; execute ( <str> ) ; assertEmpty ( execute ( <str> ) ) ; } @Test public void testMap ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> , <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , <int> , <str> , <int> , <str> , <int> ) ) ) ; execute ( <str> ) ; assertEmpty ( execute ( <str> ) ) ; } @Test public void testList ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , <str> , <str> , <str> ) ) ) ; } @Test public void testMultiCollections ( ) throws Throwable { UUID id = UUID . fromString ( <str> ) ; createTable ( <str> ) ; execute ( <str> , id ) ; execute ( <str> , id ) ; execute ( <str> , id ) ; execute ( <str> , id ) ; execute ( <str> , id ) ; execute ( <str> , id ) ; assertRows ( execute ( <str> , id ) , row ( list ( <int> , <int> , <int> , <int> , <int> , <int> ) , map ( <str> , <int> , <str> , <int> , <str> , <int> ) , set ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; } @Test public void testCollectionAndRegularColumns ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <int> , <int> , <int> ) , <int> ) ) ; } @Test public void testMultipleLists ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <int> , <int> , <int> ) , list ( <int> , <int> , <int> ) ) ) ; } @Test public void testAlterCollections ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; } @Test public void testCompactCollections ( ) throws Throwable { String tableName = KEYSPACE + <str> + createTableName ( ) ; assertInvalid ( String . format ( <str> , tableName ) ) ; } @Test public void testFunctionsOnCollections ( ) throws Throwable { createTable ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testInClauseWithCollections ( ) throws Throwable { createTable ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testNonPureFunctionCollection ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; } @Test public void testCollectionFlush ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( <int> ) ) ) ; } @Test public void testDropAndReaddCollection ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testDropAndReaddDroppedCollection ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; execute ( <str> ) ; } @Test public void testMapWithLargePartition ( ) throws Throwable { Random r = new Random ( ) ; long seed = System . nanoTime ( ) ; System . out . println ( <str> + seed ) ; r . setSeed ( seed ) ; int len = ( <int> * <int> ) / <int> ; createTable ( <str> ) ; final int numKeys = <int> ; for ( int i = <int> ; i < numKeys ; i + + ) { byte [ ] b = new byte [ len ] ; r . nextBytes ( b ) ; execute ( <str> , i , new String ( b ) ) ; } flush ( ) ; Object [ ] [ ] rows = getRows ( execute ( <str> ) ) ; assertEquals ( <int> , rows . length ) ; assertEquals ( numKeys , ( ( Map ) rows [ <int> ] [ <int> ] ) . size ( ) ) ; } @Test public void testMapWithTwoSStables ( ) throws Throwable { createTable ( <str> ) ; final int numKeys = <int> ; for ( int i = <int> ; i < numKeys ; i + + ) execute ( <str> , i , <str> + Integer . toString ( i ) ) ; flush ( ) ; for ( int i = numKeys ; i < <int> * numKeys ; i + + ) execute ( <str> , i , <str> + Integer . toString ( i ) ) ; flush ( ) ; Object [ ] [ ] rows = getRows ( execute ( <str> ) ) ; assertEquals ( <int> , rows . length ) ; assertEquals ( numKeys * <int> , ( ( Map ) rows [ <int> ] [ <int> ] ) . size ( ) ) ; } @Test public void testSetWithTwoSStables ( ) throws Throwable { createTable ( <str> ) ; final int numKeys = <int> ; for ( int i = <int> ; i < numKeys ; i + + ) execute ( <str> , set ( <str> + Integer . toString ( i ) ) ) ; flush ( ) ; for ( int i = numKeys ; i < <int> * numKeys ; i + + ) execute ( <str> , set ( <str> + Integer . toString ( i ) ) ) ; flush ( ) ; Object [ ] [ ] rows = getRows ( execute ( <str> ) ) ; assertEquals ( <int> , rows . length ) ; assertEquals ( numKeys * <int> , ( ( Set ) rows [ <int> ] [ <int> ] ) . size ( ) ) ; } @Test public void testUpdateStaticList ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <int> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <int> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <int> , <int> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( list ( <int> ) ) ) ; } @Test public void testListWithElementsBiggerThan64K ( ) throws Throwable { createTable ( <str> ) ; byte [ ] bytes = new byte [ FBUtilities . MAX_UNSIGNED_SHORT + <int> ] ; Arrays . fill ( bytes , ( byte ) <int> ) ; String largeText = new String ( bytes ) ; bytes = new byte [ FBUtilities . MAX_UNSIGNED_SHORT + <int> ] ; Arrays . fill ( bytes , ( byte ) <int> ) ; String largeText2 = new String ( bytes ) ; execute ( <str> , list ( largeText , <str> ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( list ( largeText , <str> ) ) ) ; execute ( <str> , <int> ) ; assertRows ( execute ( <str> ) , row ( list ( <str> ) ) ) ; execute ( <str> , <int> , largeText ) ; assertRows ( execute ( <str> ) , row ( list ( largeText ) ) ) ; execute ( <str> , list ( <str> , largeText ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , largeText ) ) ) ; execute ( <str> , list ( <str> , largeText2 ) ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , largeText , <str> , largeText2 ) ) ) ; execute ( <str> , list ( largeText , <str> ) ) ; assertRows ( execute ( <str> ) , row ( list ( <str> , largeText2 ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( ( Object ) null ) ) ; execute ( <str> + largeText + <str> ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( list ( largeText , <str> ) ) ) ; } @Test public void testMapsWithElementsBiggerThan64K ( ) throws Throwable { byte [ ] bytes = new byte [ FBUtilities . MAX_UNSIGNED_SHORT + <int> ] ; Arrays . fill ( bytes , ( byte ) <int> ) ; String largeText = new String ( bytes ) ; bytes = new byte [ FBUtilities . MAX_UNSIGNED_SHORT + <int> ] ; Arrays . fill ( bytes , ( byte ) <int> ) ; String largeText2 = new String ( bytes ) ; createTable ( <str> ) ; execute ( <str> , map ( <str> , largeText , largeText , <str> ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , largeText , largeText , <str> ) ) ) ; execute ( <str> , <str> , largeText ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , largeText , largeText , <str> , <str> , largeText ) ) ) ; execute ( <str> , largeText2 , <str> ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , largeText , largeText , <str> , <str> , largeText , largeText2 , <str> ) ) ) ; execute ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( map ( largeText , <str> , <str> , largeText , largeText2 , <str> ) ) ) ; execute ( <str> , largeText2 ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( map ( largeText , <str> , <str> , largeText ) ) ) ; execute ( <str> , map ( <str> , largeText , largeText , <str> ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , largeText , largeText , <str> ) ) ) ; execute ( <str> , map ( <str> , largeText ) ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , largeText , largeText , <str> , <str> , largeText ) ) ) ; execute ( <str> , map ( largeText2 , <str> ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( map ( <str> , largeText , largeText , <str> , <str> , largeText , largeText2 , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( ( Object ) null ) ) ; execute ( <str> + largeText + <str> + largeText + <str> ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( map ( largeText , <str> , <str> , largeText ) ) ) ; } @Test public void testSetsWithElementsBiggerThan64K ( ) throws Throwable { createTable ( <str> ) ; byte [ ] bytes = new byte [ FBUtilities . MAX_UNSIGNED_SHORT + <int> ] ; Arrays . fill ( bytes , ( byte ) <int> ) ; String largeText = new String ( bytes ) ; bytes = new byte [ FBUtilities . MAX_UNSIGNED_SHORT + <int> ] ; Arrays . fill ( bytes , ( byte ) <int> ) ; String largeText2 = new String ( bytes ) ; execute ( <str> , set ( largeText , <str> ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( set ( largeText , <str> ) ) ) ; execute ( <str> , largeText ) ; assertRows ( execute ( <str> ) , row ( set ( <str> ) ) ) ; execute ( <str> , set ( <str> , largeText ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , largeText ) ) ) ; execute ( <str> , set ( <str> , largeText2 ) ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , largeText , <str> , largeText2 ) ) ) ; execute ( <str> , set ( largeText , <str> ) ) ; assertRows ( execute ( <str> ) , row ( set ( <str> , largeText2 ) ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( ( Object ) null ) ) ; execute ( <str> + largeText + <str> ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( set ( largeText , <str> ) ) ) ; } } 

package org . elasticsearch . search . rescore ; import org . apache . lucene . search . TopDocs ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . search . SearchParseElement ; import org . elasticsearch . search . SearchPhase ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; import java . util . Map ; import static java . util . Collections . singletonMap ; public class RescorePhase extends AbstractComponent implements SearchPhase { private static final Map < String , SearchParseElement > PARSE_ELEMENTS = singletonMap ( <str> , new RescoreParseElement ( ) ) ; @Inject public RescorePhase ( Settings settings ) { super ( settings ) ; } @Override public Map < String , ? extends SearchParseElement > parseElements ( ) { return PARSE_ELEMENTS ; } @Override public void preProcess ( SearchContext context ) { } @Override public void execute ( SearchContext context ) { try { TopDocs topDocs = context . queryResult ( ) . topDocs ( ) ; for ( RescoreSearchContext ctx : context . rescore ( ) ) { topDocs = ctx . rescorer ( ) . rescore ( topDocs , context , ctx ) ; } context . queryResult ( ) . topDocs ( topDocs ) ; } catch ( IOException e ) { throw new ElasticsearchException ( <str> , e ) ; } } } 

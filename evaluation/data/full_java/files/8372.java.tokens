package org . elasticsearch . monitor . process ; import org . apache . lucene . util . Constants ; import org . elasticsearch . bootstrap . BootstrapInfo ; import org . elasticsearch . test . ESTestCase ; import static org . elasticsearch . monitor . jvm . JvmInfo . jvmInfo ; import static org . hamcrest . Matchers . allOf ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . lessThan ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; public class ProcessProbeTests extends ESTestCase { ProcessProbe probe = ProcessProbe . getInstance ( ) ; public void testProcessInfo ( ) { ProcessInfo info = probe . processInfo ( ) ; assertNotNull ( info ) ; assertThat ( info . getRefreshInterval ( ) , greaterThanOrEqualTo ( <int> L ) ) ; assertThat ( info . getId ( ) , equalTo ( jvmInfo ( ) . pid ( ) ) ) ; assertThat ( info . isMlockall ( ) , equalTo ( BootstrapInfo . isMemoryLocked ( ) ) ) ; } public void testProcessStats ( ) { ProcessStats stats = probe . processStats ( ) ; assertNotNull ( stats ) ; assertThat ( stats . getTimestamp ( ) , greaterThan ( <int> L ) ) ; if ( Constants . WINDOWS ) { assertThat ( stats . getOpenFileDescriptors ( ) , equalTo ( - <int> ) ) ; assertThat ( stats . getMaxFileDescriptors ( ) , equalTo ( - <int> ) ) ; } else { assertThat ( stats . getOpenFileDescriptors ( ) , greaterThan ( <int> L ) ) ; assertThat ( stats . getMaxFileDescriptors ( ) , greaterThan ( <int> L ) ) ; } ProcessStats . Cpu cpu = stats . getCpu ( ) ; assertNotNull ( cpu ) ; assertThat ( cpu . getPercent ( ) , anyOf ( lessThan ( ( short ) <int> ) , allOf ( greaterThanOrEqualTo ( ( short ) <int> ) , lessThanOrEqualTo ( ( short ) <int> ) ) ) ) ; assertThat ( cpu . total , greaterThan ( <int> L ) ) ; ProcessStats . Mem mem = stats . getMem ( ) ; assertNotNull ( mem ) ; assertThat ( mem . totalVirtual , greaterThan ( <int> L ) ) ; } } 

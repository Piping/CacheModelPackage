package org . elasticsearch . action . admin . cluster . health ; import org . elasticsearch . Version ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . health . ClusterStateHealth ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . cluster . health . ClusterIndexHealth ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . StatusToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; import java . util . List ; import java . util . Locale ; import java . util . Map ; public class ClusterHealthResponse extends ActionResponse implements StatusToXContent { private String clusterName ; private int numberOfPendingTasks = <int> ; private int numberOfInFlightFetch = <int> ; private int delayedUnassignedShards = <int> ; private TimeValue taskMaxWaitingTime = TimeValue . timeValueMillis ( <int> ) ; private boolean timedOut = false ; private ClusterStateHealth clusterStateHealth ; private ClusterHealthStatus clusterHealthStatus ; ClusterHealthResponse ( ) { } public ClusterHealthResponse ( String clusterName , String [ ] concreteIndices , ClusterState clusterState ) { this ( clusterName , concreteIndices , clusterState , - <int> , - <int> , - <int> , TimeValue . timeValueHours ( <int> ) ) ; } public ClusterHealthResponse ( String clusterName , String [ ] concreteIndices , ClusterState clusterState , int numberOfPendingTasks , int numberOfInFlightFetch , int delayedUnassignedShards , TimeValue taskMaxWaitingTime ) { this . clusterName = clusterName ; this . numberOfPendingTasks = numberOfPendingTasks ; this . numberOfInFlightFetch = numberOfInFlightFetch ; this . delayedUnassignedShards = delayedUnassignedShards ; this . clusterName = clusterName ; this . numberOfPendingTasks = numberOfPendingTasks ; this . numberOfInFlightFetch = numberOfInFlightFetch ; this . taskMaxWaitingTime = taskMaxWaitingTime ; this . clusterStateHealth = new ClusterStateHealth ( clusterState , concreteIndices ) ; this . clusterHealthStatus = clusterStateHealth . getStatus ( ) ; } public String getClusterName ( ) { return clusterName ; } ClusterStateHealth getClusterStateHealth ( ) { return clusterStateHealth ; } public List < String > getValidationFailures ( ) { return clusterStateHealth . getValidationFailures ( ) ; } public int getActiveShards ( ) { return clusterStateHealth . getActiveShards ( ) ; } public int getRelocatingShards ( ) { return clusterStateHealth . getRelocatingShards ( ) ; } public int getActivePrimaryShards ( ) { return clusterStateHealth . getActivePrimaryShards ( ) ; } public int getInitializingShards ( ) { return clusterStateHealth . getInitializingShards ( ) ; } public int getUnassignedShards ( ) { return clusterStateHealth . getUnassignedShards ( ) ; } public int getNumberOfNodes ( ) { return clusterStateHealth . getNumberOfNodes ( ) ; } public int getNumberOfDataNodes ( ) { return clusterStateHealth . getNumberOfDataNodes ( ) ; } public int getNumberOfPendingTasks ( ) { return this . numberOfPendingTasks ; } public int getNumberOfInFlightFetch ( ) { return this . numberOfInFlightFetch ; } public int getDelayedUnassignedShards ( ) { return this . delayedUnassignedShards ; } public boolean isTimedOut ( ) { return this . timedOut ; } public void setTimedOut ( boolean timedOut ) { this . timedOut = timedOut ; } public ClusterHealthStatus getStatus ( ) { return clusterHealthStatus ; } public void setStatus ( ClusterHealthStatus status ) { if ( status = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . clusterHealthStatus = status ; } public Map < String , ClusterIndexHealth > getIndices ( ) { return clusterStateHealth . getIndices ( ) ; } public TimeValue getTaskMaxWaitingTime ( ) { return taskMaxWaitingTime ; } public double getActiveShardsPercent ( ) { return clusterStateHealth . getActiveShardsPercent ( ) ; } public static ClusterHealthResponse readResponseFrom ( StreamInput in ) throws IOException { ClusterHealthResponse response = new ClusterHealthResponse ( ) ; response . readFrom ( in ) ; return response ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; clusterName = in . readString ( ) ; clusterHealthStatus = ClusterHealthStatus . fromValue ( in . readByte ( ) ) ; clusterStateHealth = ClusterStateHealth . readClusterHealth ( in ) ; numberOfPendingTasks = in . readInt ( ) ; timedOut = in . readBoolean ( ) ; numberOfInFlightFetch = in . readInt ( ) ; if ( in . getVersion ( ) . onOrAfter ( Version . V_1_7_0 ) ) { delayedUnassignedShards = in . readInt ( ) ; } taskMaxWaitingTime = TimeValue . readTimeValue ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( clusterName ) ; out . writeByte ( clusterHealthStatus . value ( ) ) ; clusterStateHealth . writeTo ( out ) ; out . writeInt ( numberOfPendingTasks ) ; out . writeBoolean ( timedOut ) ; out . writeInt ( numberOfInFlightFetch ) ; if ( out . getVersion ( ) . onOrAfter ( Version . V_1_7_0 ) ) { out . writeInt ( delayedUnassignedShards ) ; } taskMaxWaitingTime . writeTo ( out ) ; } @Override public String toString ( ) { try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) ; builder . startObject ( ) ; toXContent ( builder , EMPTY_PARAMS ) ; builder . endObject ( ) ; return builder . string ( ) ; } catch ( IOException e ) { return <str> + e . getMessage ( ) + <str> ; } } @Override public RestStatus status ( ) { return isTimedOut ( ) ? RestStatus . REQUEST_TIMEOUT : RestStatus . OK ; } static final class Fields { static final XContentBuilderString CLUSTER_NAME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString STATUS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TIMED_OUT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString NUMBER_OF_NODES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString NUMBER_OF_DATA_NODES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString NUMBER_OF_PENDING_TASKS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString NUMBER_OF_IN_FLIGHT_FETCH = new XContentBuilderString ( <str> ) ; static final XContentBuilderString DELAYED_UNASSIGNED_SHARDS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TASK_MAX_WAIT_TIME_IN_QUEUE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TASK_MAX_WAIT_TIME_IN_QUEUE_IN_MILLIS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ACTIVE_SHARDS_PERCENT_AS_NUMBER = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ACTIVE_SHARDS_PERCENT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ACTIVE_PRIMARY_SHARDS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ACTIVE_SHARDS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString RELOCATING_SHARDS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString INITIALIZING_SHARDS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString UNASSIGNED_SHARDS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString VALIDATION_FAILURES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString INDICES = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . field ( Fields . CLUSTER_NAME , getClusterName ( ) ) ; builder . field ( Fields . STATUS , getStatus ( ) . name ( ) . toLowerCase ( Locale . ROOT ) ) ; builder . field ( Fields . TIMED_OUT , isTimedOut ( ) ) ; builder . field ( Fields . NUMBER_OF_NODES , getNumberOfNodes ( ) ) ; builder . field ( Fields . NUMBER_OF_DATA_NODES , getNumberOfDataNodes ( ) ) ; builder . field ( Fields . ACTIVE_PRIMARY_SHARDS , getActivePrimaryShards ( ) ) ; builder . field ( Fields . ACTIVE_SHARDS , getActiveShards ( ) ) ; builder . field ( Fields . RELOCATING_SHARDS , getRelocatingShards ( ) ) ; builder . field ( Fields . INITIALIZING_SHARDS , getInitializingShards ( ) ) ; builder . field ( Fields . UNASSIGNED_SHARDS , getUnassignedShards ( ) ) ; builder . field ( Fields . DELAYED_UNASSIGNED_SHARDS , getDelayedUnassignedShards ( ) ) ; builder . field ( Fields . NUMBER_OF_PENDING_TASKS , getNumberOfPendingTasks ( ) ) ; builder . field ( Fields . NUMBER_OF_IN_FLIGHT_FETCH , getNumberOfInFlightFetch ( ) ) ; builder . timeValueField ( Fields . TASK_MAX_WAIT_TIME_IN_QUEUE_IN_MILLIS , Fields . TASK_MAX_WAIT_TIME_IN_QUEUE , getTaskMaxWaitingTime ( ) ) ; builder . percentageField ( Fields . ACTIVE_SHARDS_PERCENT_AS_NUMBER , Fields . ACTIVE_SHARDS_PERCENT , getActiveShardsPercent ( ) ) ; String level = params . param ( <str> , <str> ) ; boolean outputIndices = <str> . equals ( level ) | | <str> . equals ( level ) ; if ( ! getValidationFailures ( ) . isEmpty ( ) ) { builder . startArray ( Fields . VALIDATION_FAILURES ) ; for ( String validationFailure : getValidationFailures ( ) ) { builder . value ( validationFailure ) ; } if ( ! outputIndices ) { for ( ClusterIndexHealth indexHealth : clusterStateHealth . getIndices ( ) . values ( ) ) { builder . startObject ( indexHealth . getIndex ( ) ) ; if ( ! indexHealth . getValidationFailures ( ) . isEmpty ( ) ) { builder . startArray ( Fields . VALIDATION_FAILURES ) ; for ( String validationFailure : indexHealth . getValidationFailures ( ) ) { builder . value ( validationFailure ) ; } builder . endArray ( ) ; } builder . endObject ( ) ; } } builder . endArray ( ) ; } if ( outputIndices ) { builder . startObject ( Fields . INDICES ) ; for ( ClusterIndexHealth indexHealth : clusterStateHealth . getIndices ( ) . values ( ) ) { builder . startObject ( indexHealth . getIndex ( ) , XContentBuilder . FieldCaseConversion . NONE ) ; indexHealth . toXContent ( builder , params ) ; builder . endObject ( ) ; } builder . endObject ( ) ; } return builder ; } } 

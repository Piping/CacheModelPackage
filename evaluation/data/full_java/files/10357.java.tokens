package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import com . google . common . collect . testing . google . BiMapTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringBiMapGenerator ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Iterator ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; @GwtCompatible ( emulated = true ) public class HashBiMapTest extends TestCase { public static final class HashBiMapGenerator extends TestStringBiMapGenerator { @Override protected BiMap < String , String > create ( Entry < String , String > [ ] entries ) { BiMap < String , String > result = HashBiMap . create ( ) ; for ( Entry < String , String > entry : entries ) { result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return result ; } } @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( BiMapTestSuiteBuilder . using ( new HashBiMapGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . SERIALIZABLE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . KNOWN_ORDER , MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE ) . createTestSuite ( ) ) ; suite . addTestSuite ( HashBiMapTest . class ) ; return suite ; } public void testMapConstructor ( ) { Map < String , String > map = ImmutableMap . of ( <str> , <str> , <str> , <str> , <str> , <str> ) ; HashBiMap < String , String > bimap = HashBiMap . create ( map ) ; assertEquals ( <str> , bimap . get ( <str> ) ) ; assertEquals ( <str> , bimap . inverse ( ) . get ( <str> ) ) ; } private static final int N = <int> ; public void testBashIt ( ) throws Exception { BiMap < Integer , Integer > bimap = HashBiMap . create ( N ) ; BiMap < Integer , Integer > inverse = bimap . inverse ( ) ; for ( int i = <int> ; i < N ; i + + ) { assertNull ( bimap . put ( <int> * i , <int> * i + <int> ) ) ; } for ( int i = <int> ; i < N ; i + + ) { assertEquals ( <int> * i + <int> , ( int ) bimap . get ( <int> * i ) ) ; } for ( int i = <int> ; i < N ; i + + ) { assertEquals ( <int> * i , ( int ) inverse . get ( <int> * i + <int> ) ) ; } for ( int i = <int> ; i < N ; i + + ) { int oldValue = bimap . get ( <int> * i ) ; assertEquals ( <int> * i + <int> , ( int ) bimap . put ( <int> * i , oldValue - <int> ) ) ; } for ( int i = <int> ; i < N ; i + + ) { assertEquals ( <int> * i - <int> , ( int ) bimap . get ( <int> * i ) ) ; } for ( int i = <int> ; i < N ; i + + ) { assertEquals ( <int> * i , ( int ) inverse . get ( <int> * i - <int> ) ) ; } Set < Entry < Integer , Integer > > entries = bimap . entrySet ( ) ; for ( Entry < Integer , Integer > entry : entries ) { entry . setValue ( entry . getValue ( ) + <int> * N ) ; } for ( int i = <int> ; i < N ; i + + ) { assertEquals ( <int> * N + <int> * i - <int> , ( int ) bimap . get ( <int> * i ) ) ; } } public void testBiMapEntrySetIteratorRemove ( ) { BiMap < Integer , String > map = HashBiMap . create ( ) ; map . put ( <int> , <str> ) ; Set < Map . Entry < Integer , String > > entries = map . entrySet ( ) ; Iterator < Map . Entry < Integer , String > > iterator = entries . iterator ( ) ; Map . Entry < Integer , String > entry = iterator . next ( ) ; entry . setValue ( <str> ) ; assertEquals ( <str> , map . get ( <int> ) ) ; assertEquals ( Integer . valueOf ( <int> ) , map . inverse ( ) . get ( <str> ) ) ; iterator . remove ( ) ; assertTrue ( map . isEmpty ( ) ) ; } @GwtIncompatible ( <str> ) public void testInsertionOrder ( ) { BiMap < String , Integer > map = HashBiMap . create ( ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; assertThat ( map . entrySet ( ) ) . containsExactly ( Maps . immutableEntry ( <str> , <int> ) , Maps . immutableEntry ( <str> , <int> ) , Maps . immutableEntry ( <str> , <int> ) ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testInsertionOrderAfterRemoveFirst ( ) { BiMap < String , Integer > map = HashBiMap . create ( ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . remove ( <str> ) ; assertThat ( map . entrySet ( ) ) . containsExactly ( Maps . immutableEntry ( <str> , <int> ) , Maps . immutableEntry ( <str> , <int> ) ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testInsertionOrderAfterRemoveMiddle ( ) { BiMap < String , Integer > map = HashBiMap . create ( ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . remove ( <str> ) ; assertThat ( map . entrySet ( ) ) . containsExactly ( Maps . immutableEntry ( <str> , <int> ) , Maps . immutableEntry ( <str> , <int> ) ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testInsertionOrderAfterRemoveLast ( ) { BiMap < String , Integer > map = HashBiMap . create ( ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . remove ( <str> ) ; assertThat ( map . entrySet ( ) ) . containsExactly ( Maps . immutableEntry ( <str> , <int> ) , Maps . immutableEntry ( <str> , <int> ) ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testInsertionOrderAfterForcePut ( ) { BiMap < String , Integer > map = HashBiMap . create ( ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . forcePut ( <str> , <int> ) ; assertThat ( map . entrySet ( ) ) . containsExactly ( Maps . immutableEntry ( <str> , <int> ) , Maps . immutableEntry ( <str> , <int> ) ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testInsertionOrderAfterInverseForcePut ( ) { BiMap < String , Integer > map = HashBiMap . create ( ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . inverse ( ) . forcePut ( <int> , <str> ) ; assertThat ( map . entrySet ( ) ) . containsExactly ( Maps . immutableEntry ( <str> , <int> ) , Maps . immutableEntry ( <str> , <int> ) ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testInverseInsertionOrderAfterInverseForcePut ( ) { BiMap < String , Integer > map = HashBiMap . create ( ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . inverse ( ) . forcePut ( <int> , <str> ) ; assertThat ( map . inverse ( ) . entrySet ( ) ) . containsExactly ( Maps . immutableEntry ( <int> , <str> ) , Maps . immutableEntry ( <int> , <str> ) ) . inOrder ( ) ; } public void testInverseEntrySetValue ( ) { BiMap < Integer , String > map = HashBiMap . create ( ) ; map . put ( <int> , <str> ) ; Entry < String , Integer > inverseEntry = Iterables . getOnlyElement ( map . inverse ( ) . entrySet ( ) ) ; inverseEntry . setValue ( <int> ) ; assertEquals ( Integer . valueOf ( <int> ) , inverseEntry . getValue ( ) ) ; } } 

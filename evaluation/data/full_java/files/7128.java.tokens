package org . elasticsearch . search . aggregations ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . lease . Releasable ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . search . aggregations . bucket . BucketsAggregator ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; public abstract class Aggregator extends BucketCollector implements Releasable { public interface Parser { String type ( ) ; AggregatorFactory parse ( String aggregationName , XContentParser parser , SearchContext context ) throws IOException ; } public static boolean descendsFromBucketAggregator ( Aggregator parent ) { while ( parent ! = null ) { if ( parent instanceof BucketsAggregator ) { return true ; } parent = parent . parent ( ) ; } return false ; } public abstract String name ( ) ; public abstract AggregationContext context ( ) ; public abstract Aggregator parent ( ) ; public abstract Aggregator subAggregator ( String name ) ; public abstract InternalAggregation buildAggregation ( long bucket ) throws IOException ; public abstract InternalAggregation buildEmptyAggregation ( ) ; public enum SubAggCollectionMode { DEPTH_FIRST ( new ParseField ( <str> ) ) , BREADTH_FIRST ( new ParseField ( <str> ) ) ; public static final ParseField KEY = new ParseField ( <str> ) ; private final ParseField parseField ; SubAggCollectionMode ( ParseField parseField ) { this . parseField = parseField ; } public ParseField parseField ( ) { return parseField ; } public static SubAggCollectionMode parse ( String value , ParseFieldMatcher parseFieldMatcher ) { SubAggCollectionMode [ ] modes = SubAggCollectionMode . values ( ) ; for ( SubAggCollectionMode mode : modes ) { if ( parseFieldMatcher . match ( value , mode . parseField ) ) { return mode ; } } throw new ElasticsearchParseException ( <str> , KEY . getPreferredName ( ) , value ) ; } } } 

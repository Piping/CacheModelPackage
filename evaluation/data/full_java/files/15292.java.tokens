package org . gradle . api . internal . tasks ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . file . CompositeFileCollection ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . collections . DefaultConfigurableFileCollection ; import org . gradle . api . internal . file . collections . FileCollectionResolveContext ; import org . gradle . api . tasks . SourceSetOutput ; import java . io . File ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . Callable ; public class DefaultSourceSetOutput extends CompositeFileCollection implements SourceSetOutput { private final DefaultConfigurableFileCollection outputDirectories ; private Object classesDir ; private Object resourcesDir ; private final DefaultConfigurableFileCollection dirs ; private final FileResolver fileResolver ; public DefaultSourceSetOutput ( String sourceSetDisplayName , FileResolver fileResolver , TaskResolver taskResolver ) { this . fileResolver = fileResolver ; String displayName = String . format ( <str> , sourceSetDisplayName ) ; outputDirectories = new DefaultConfigurableFileCollection ( displayName , fileResolver , taskResolver , new Callable ( ) { public Object call ( ) throws Exception { return getClassesDir ( ) ; } } , new Callable ( ) { public Object call ( ) throws Exception { return getResourcesDir ( ) ; } } ) ; dirs = new DefaultConfigurableFileCollection ( <str> , fileResolver , taskResolver ) ; } @Override public void visitContents ( FileCollectionResolveContext context ) { context . add ( outputDirectories ) ; } @Override public String getDisplayName ( ) { return outputDirectories . getDisplayName ( ) ; } public File getClassesDir ( ) { if ( classesDir = = null ) { return null ; } return fileResolver . resolve ( classesDir ) ; } public void setClassesDir ( Object classesDir ) { this . classesDir = classesDir ; } public File getResourcesDir ( ) { if ( resourcesDir = = null ) { return null ; } return fileResolver . resolve ( resourcesDir ) ; } public void setResourcesDir ( Object resourcesDir ) { this . resourcesDir = resourcesDir ; } public void builtBy ( Object . . . taskPaths ) { outputDirectories . builtBy ( taskPaths ) ; } public void dir ( Object dir ) { this . dir ( new HashMap < String , Object > ( ) , dir ) ; } public void dir ( Map < String , Object > options , Object dir ) { this . dirs . from ( dir ) ; this . outputDirectories . from ( dir ) ; Object builtBy = options . get ( <str> ) ; if ( builtBy ! = null ) { this . builtBy ( builtBy ) ; this . dirs . builtBy ( builtBy ) ; } } public FileCollection getDirs ( ) { return dirs ; } } 

package com . google . common . collect ; import static com . google . common . collect . CollectPreconditions . checkEntryNotNull ; import com . google . common . annotations . GwtCompatible ; import javax . annotation . Nullable ; @GwtCompatible ( serializable = true , emulated = true ) @SuppressWarnings ( <str> ) final class SingletonImmutableBiMap < K , V > extends ImmutableBiMap < K , V > { final transient K singleKey ; final transient V singleValue ; SingletonImmutableBiMap ( K singleKey , V singleValue ) { checkEntryNotNull ( singleKey , singleValue ) ; this . singleKey = singleKey ; this . singleValue = singleValue ; } private SingletonImmutableBiMap ( K singleKey , V singleValue , ImmutableBiMap < V , K > inverse ) { this . singleKey = singleKey ; this . singleValue = singleValue ; this . inverse = inverse ; } @Override public V get ( @Nullable Object key ) { return singleKey . equals ( key ) ? singleValue : null ; } @Override public int size ( ) { return <int> ; } @Override public boolean containsKey ( @Nullable Object key ) { return singleKey . equals ( key ) ; } @Override public boolean containsValue ( @Nullable Object value ) { return singleValue . equals ( value ) ; } @Override boolean isPartialView ( ) { return false ; } @Override ImmutableSet < Entry < K , V > > createEntrySet ( ) { return ImmutableSet . of ( Maps . immutableEntry ( singleKey , singleValue ) ) ; } @Override ImmutableSet < K > createKeySet ( ) { return ImmutableSet . of ( singleKey ) ; } transient ImmutableBiMap < V , K > inverse ; @Override public ImmutableBiMap < V , K > inverse ( ) { ImmutableBiMap < V , K > result = inverse ; if ( result = = null ) { return inverse = new SingletonImmutableBiMap < V , K > ( singleValue , singleKey , this ) ; } else { return result ; } } } 

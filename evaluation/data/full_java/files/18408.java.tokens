package com . badlogic . gdx . utils . compression . rangecoder ; public class BitTreeDecoder { short [ ] Models ; int NumBitLevels ; public BitTreeDecoder ( int numBitLevels ) { NumBitLevels = numBitLevels ; Models = new short [ <int> < < numBitLevels ] ; } public void Init ( ) { Decoder . InitBitModels ( Models ) ; } public int Decode ( Decoder rangeDecoder ) throws java . io . IOException { int m = <int> ; for ( int bitIndex = NumBitLevels ; bitIndex ! = <int> ; bitIndex - - ) m = ( m < < <int> ) + rangeDecoder . DecodeBit ( Models , m ) ; return m - ( <int> < < NumBitLevels ) ; } public int ReverseDecode ( Decoder rangeDecoder ) throws java . io . IOException { int m = <int> ; int symbol = <int> ; for ( int bitIndex = <int> ; bitIndex < NumBitLevels ; bitIndex + + ) { int bit = rangeDecoder . DecodeBit ( Models , m ) ; m < < = <int> ; m + = bit ; symbol | = ( bit < < bitIndex ) ; } return symbol ; } public static int ReverseDecode ( short [ ] Models , int startIndex , Decoder rangeDecoder , int NumBitLevels ) throws java . io . IOException { int m = <int> ; int symbol = <int> ; for ( int bitIndex = <int> ; bitIndex < NumBitLevels ; bitIndex + + ) { int bit = rangeDecoder . DecodeBit ( Models , startIndex + m ) ; m < < = <int> ; m + = bit ; symbol | = ( bit < < bitIndex ) ; } return symbol ; } } 

package com . google . common . collect ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; import java . util . NoSuchElementException ; @GwtCompatible ( emulated = true ) public class EvictingQueueTest extends TestCase { public void testCreateWithNegativeSize ( ) throws Exception { try { EvictingQueue . create ( - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreateWithZeroSize ( ) throws Exception { EvictingQueue < String > queue = EvictingQueue . create ( <int> ) ; assertEquals ( <int> , queue . size ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertTrue ( queue . offer ( <str> ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertFalse ( queue . remove ( <str> ) ) ; assertEquals ( <int> , queue . size ( ) ) ; try { queue . element ( ) ; fail ( ) ; } catch ( NoSuchElementException expected ) { } assertNull ( queue . peek ( ) ) ; assertNull ( queue . poll ( ) ) ; try { queue . remove ( ) ; fail ( ) ; } catch ( NoSuchElementException expected ) { } } public void testRemainingCapacity_maxSize0 ( ) { EvictingQueue < String > queue = EvictingQueue . create ( <int> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testRemainingCapacity_maxSize1 ( ) { EvictingQueue < String > queue = EvictingQueue . create ( <int> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; queue . add ( <str> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testRemainingCapacity_maxSize3 ( ) { EvictingQueue < String > queue = EvictingQueue . create ( <int> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; queue . add ( <str> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; queue . add ( <str> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; queue . add ( <str> ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testEvictingAfterOne ( ) throws Exception { EvictingQueue < String > queue = EvictingQueue . create ( <int> ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertEquals ( <str> , queue . remove ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testEvictingAfterThree ( ) throws Exception { EvictingQueue < String > queue = EvictingQueue . create ( <int> ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . add ( <str> ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertEquals ( <str> , queue . remove ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } public void testAddAll ( ) throws Exception { EvictingQueue < String > queue = EvictingQueue . create ( <int> ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . addAll ( asList ( <str> , <str> , <str> ) ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertTrue ( queue . addAll ( asList ( <str> ) ) ) ; assertEquals ( <str> , queue . element ( ) ) ; assertEquals ( <str> , queue . peek ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; assertEquals ( <str> , queue . remove ( ) ) ; assertEquals ( <int> , queue . size ( ) ) ; assertEquals ( <int> , queue . remainingCapacity ( ) ) ; } @GwtIncompatible ( <str> ) public void testNullPointerExceptions ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( EvictingQueue . class ) ; tester . testAllPublicConstructors ( EvictingQueue . class ) ; EvictingQueue < String > queue = EvictingQueue . create ( <int> ) ; queue . add ( <str> ) ; tester . testAllPublicInstanceMethods ( queue ) ; } public void testSerialization ( ) { EvictingQueue < String > original = EvictingQueue . create ( <int> ) ; original . add ( <str> ) ; original . add ( <str> ) ; original . add ( <str> ) ; EvictingQueue < String > copy = SerializableTester . reserialize ( original ) ; assertEquals ( copy . maxSize , original . maxSize ) ; assertEquals ( <str> , copy . remove ( ) ) ; assertEquals ( <str> , copy . remove ( ) ) ; assertEquals ( <str> , copy . remove ( ) ) ; assertTrue ( copy . isEmpty ( ) ) ; } } 

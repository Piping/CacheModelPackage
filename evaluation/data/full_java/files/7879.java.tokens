package org . elasticsearch . cluster . serialization ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . allocation . AllocationService ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . test . ESAllocationTestCase ; import static org . hamcrest . Matchers . equalTo ; public class ClusterSerializationTests extends ESAllocationTestCase { public void testClusterStateSerialization ( ) throws Exception { MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; DiscoveryNodes nodes = DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . localNodeId ( <str> ) . masterNodeId ( <str> ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( new ClusterName ( <str> ) ) . nodes ( nodes ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; AllocationService strategy = createAllocationService ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( strategy . reroute ( clusterState , <str> ) . routingTable ( ) ) . build ( ) ; ClusterState serializedClusterState = ClusterState . Builder . fromBytes ( ClusterState . Builder . toBytes ( clusterState ) , newNode ( <str> ) ) ; assertThat ( serializedClusterState . getClusterName ( ) . value ( ) , equalTo ( clusterState . getClusterName ( ) . value ( ) ) ) ; assertThat ( serializedClusterState . routingTable ( ) . prettyPrint ( ) , equalTo ( clusterState . routingTable ( ) . prettyPrint ( ) ) ) ; } public void testRoutingTableSerialization ( ) throws Exception { MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; DiscoveryNodes nodes = DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . nodes ( nodes ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; AllocationService strategy = createAllocationService ( ) ; RoutingTable source = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; BytesStreamOutput outStream = new BytesStreamOutput ( ) ; source . writeTo ( outStream ) ; StreamInput inStream = StreamInput . wrap ( outStream . bytes ( ) . toBytes ( ) ) ; RoutingTable target = RoutingTable . Builder . readFrom ( inStream ) ; assertThat ( target . prettyPrint ( ) , equalTo ( source . prettyPrint ( ) ) ) ; } } 

package org . elasticsearch . index . engine ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class SegmentsStats implements Streamable , ToXContent { private long count ; private long memoryInBytes ; private long termsMemoryInBytes ; private long storedFieldsMemoryInBytes ; private long termVectorsMemoryInBytes ; private long normsMemoryInBytes ; private long docValuesMemoryInBytes ; private long indexWriterMemoryInBytes ; private long indexWriterMaxMemoryInBytes ; private long versionMapMemoryInBytes ; private long bitsetMemoryInBytes ; public SegmentsStats ( ) { } public void add ( long count , long memoryInBytes ) { this . count + = count ; this . memoryInBytes + = memoryInBytes ; } public void addTermsMemoryInBytes ( long termsMemoryInBytes ) { this . termsMemoryInBytes + = termsMemoryInBytes ; } public void addStoredFieldsMemoryInBytes ( long storedFieldsMemoryInBytes ) { this . storedFieldsMemoryInBytes + = storedFieldsMemoryInBytes ; } public void addTermVectorsMemoryInBytes ( long termVectorsMemoryInBytes ) { this . termVectorsMemoryInBytes + = termVectorsMemoryInBytes ; } public void addNormsMemoryInBytes ( long normsMemoryInBytes ) { this . normsMemoryInBytes + = normsMemoryInBytes ; } public void addDocValuesMemoryInBytes ( long docValuesMemoryInBytes ) { this . docValuesMemoryInBytes + = docValuesMemoryInBytes ; } public void addIndexWriterMemoryInBytes ( long indexWriterMemoryInBytes ) { this . indexWriterMemoryInBytes + = indexWriterMemoryInBytes ; } public void addIndexWriterMaxMemoryInBytes ( long indexWriterMaxMemoryInBytes ) { this . indexWriterMaxMemoryInBytes + = indexWriterMaxMemoryInBytes ; } public void addVersionMapMemoryInBytes ( long versionMapMemoryInBytes ) { this . versionMapMemoryInBytes + = versionMapMemoryInBytes ; } public void addBitsetMemoryInBytes ( long bitsetMemoryInBytes ) { this . bitsetMemoryInBytes + = bitsetMemoryInBytes ; } public void add ( SegmentsStats mergeStats ) { if ( mergeStats = = null ) { return ; } add ( mergeStats . count , mergeStats . memoryInBytes ) ; addTermsMemoryInBytes ( mergeStats . termsMemoryInBytes ) ; addStoredFieldsMemoryInBytes ( mergeStats . storedFieldsMemoryInBytes ) ; addTermVectorsMemoryInBytes ( mergeStats . termVectorsMemoryInBytes ) ; addNormsMemoryInBytes ( mergeStats . normsMemoryInBytes ) ; addDocValuesMemoryInBytes ( mergeStats . docValuesMemoryInBytes ) ; addIndexWriterMemoryInBytes ( mergeStats . indexWriterMemoryInBytes ) ; addIndexWriterMaxMemoryInBytes ( mergeStats . indexWriterMaxMemoryInBytes ) ; addVersionMapMemoryInBytes ( mergeStats . versionMapMemoryInBytes ) ; addBitsetMemoryInBytes ( mergeStats . bitsetMemoryInBytes ) ; } public long getCount ( ) { return this . count ; } public long getMemoryInBytes ( ) { return this . memoryInBytes ; } public ByteSizeValue getMemory ( ) { return new ByteSizeValue ( memoryInBytes ) ; } public long getTermsMemoryInBytes ( ) { return this . termsMemoryInBytes ; } public ByteSizeValue getTermsMemory ( ) { return new ByteSizeValue ( termsMemoryInBytes ) ; } public long getStoredFieldsMemoryInBytes ( ) { return this . storedFieldsMemoryInBytes ; } public ByteSizeValue getStoredFieldsMemory ( ) { return new ByteSizeValue ( storedFieldsMemoryInBytes ) ; } public long getTermVectorsMemoryInBytes ( ) { return this . termVectorsMemoryInBytes ; } public ByteSizeValue getTermVectorsMemory ( ) { return new ByteSizeValue ( termVectorsMemoryInBytes ) ; } public long getNormsMemoryInBytes ( ) { return this . normsMemoryInBytes ; } public ByteSizeValue getNormsMemory ( ) { return new ByteSizeValue ( normsMemoryInBytes ) ; } public long getDocValuesMemoryInBytes ( ) { return this . docValuesMemoryInBytes ; } public ByteSizeValue getDocValuesMemory ( ) { return new ByteSizeValue ( docValuesMemoryInBytes ) ; } public long getIndexWriterMemoryInBytes ( ) { return this . indexWriterMemoryInBytes ; } public ByteSizeValue getIndexWriterMemory ( ) { return new ByteSizeValue ( indexWriterMemoryInBytes ) ; } public long getIndexWriterMaxMemoryInBytes ( ) { return this . indexWriterMaxMemoryInBytes ; } public ByteSizeValue getIndexWriterMaxMemory ( ) { return new ByteSizeValue ( indexWriterMaxMemoryInBytes ) ; } public long getVersionMapMemoryInBytes ( ) { return this . versionMapMemoryInBytes ; } public ByteSizeValue getVersionMapMemory ( ) { return new ByteSizeValue ( versionMapMemoryInBytes ) ; } public long getBitsetMemoryInBytes ( ) { return bitsetMemoryInBytes ; } public ByteSizeValue getBitsetMemory ( ) { return new ByteSizeValue ( bitsetMemoryInBytes ) ; } public static SegmentsStats readSegmentsStats ( StreamInput in ) throws IOException { SegmentsStats stats = new SegmentsStats ( ) ; stats . readFrom ( in ) ; return stats ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . SEGMENTS ) ; builder . field ( Fields . COUNT , count ) ; builder . byteSizeField ( Fields . MEMORY_IN_BYTES , Fields . MEMORY , memoryInBytes ) ; builder . byteSizeField ( Fields . TERMS_MEMORY_IN_BYTES , Fields . TERMS_MEMORY , termsMemoryInBytes ) ; builder . byteSizeField ( Fields . STORED_FIELDS_MEMORY_IN_BYTES , Fields . STORED_FIELDS_MEMORY , storedFieldsMemoryInBytes ) ; builder . byteSizeField ( Fields . TERM_VECTORS_MEMORY_IN_BYTES , Fields . TERM_VECTORS_MEMORY , termVectorsMemoryInBytes ) ; builder . byteSizeField ( Fields . NORMS_MEMORY_IN_BYTES , Fields . NORMS_MEMORY , normsMemoryInBytes ) ; builder . byteSizeField ( Fields . DOC_VALUES_MEMORY_IN_BYTES , Fields . DOC_VALUES_MEMORY , docValuesMemoryInBytes ) ; builder . byteSizeField ( Fields . INDEX_WRITER_MEMORY_IN_BYTES , Fields . INDEX_WRITER_MEMORY , indexWriterMemoryInBytes ) ; builder . byteSizeField ( Fields . INDEX_WRITER_MAX_MEMORY_IN_BYTES , Fields . INDEX_WRITER_MAX_MEMORY , indexWriterMaxMemoryInBytes ) ; builder . byteSizeField ( Fields . VERSION_MAP_MEMORY_IN_BYTES , Fields . VERSION_MAP_MEMORY , versionMapMemoryInBytes ) ; builder . byteSizeField ( Fields . FIXED_BIT_SET_MEMORY_IN_BYTES , Fields . FIXED_BIT_SET , bitsetMemoryInBytes ) ; builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString SEGMENTS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString COUNT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MEMORY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TERMS_MEMORY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TERMS_MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString STORED_FIELDS_MEMORY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString STORED_FIELDS_MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TERM_VECTORS_MEMORY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TERM_VECTORS_MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString NORMS_MEMORY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString NORMS_MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString DOC_VALUES_MEMORY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString DOC_VALUES_MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString INDEX_WRITER_MEMORY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString INDEX_WRITER_MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString INDEX_WRITER_MAX_MEMORY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString INDEX_WRITER_MAX_MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString VERSION_MAP_MEMORY = new XContentBuilderString ( <str> ) ; static final XContentBuilderString VERSION_MAP_MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString FIXED_BIT_SET = new XContentBuilderString ( <str> ) ; static final XContentBuilderString FIXED_BIT_SET_MEMORY_IN_BYTES = new XContentBuilderString ( <str> ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { count = in . readVLong ( ) ; memoryInBytes = in . readLong ( ) ; termsMemoryInBytes = in . readLong ( ) ; storedFieldsMemoryInBytes = in . readLong ( ) ; termVectorsMemoryInBytes = in . readLong ( ) ; normsMemoryInBytes = in . readLong ( ) ; docValuesMemoryInBytes = in . readLong ( ) ; indexWriterMemoryInBytes = in . readLong ( ) ; versionMapMemoryInBytes = in . readLong ( ) ; indexWriterMaxMemoryInBytes = in . readLong ( ) ; bitsetMemoryInBytes = in . readLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVLong ( count ) ; out . writeLong ( memoryInBytes ) ; out . writeLong ( termsMemoryInBytes ) ; out . writeLong ( storedFieldsMemoryInBytes ) ; out . writeLong ( termVectorsMemoryInBytes ) ; out . writeLong ( normsMemoryInBytes ) ; out . writeLong ( docValuesMemoryInBytes ) ; out . writeLong ( indexWriterMemoryInBytes ) ; out . writeLong ( versionMapMemoryInBytes ) ; out . writeLong ( indexWriterMaxMemoryInBytes ) ; out . writeLong ( bitsetMemoryInBytes ) ; } } 

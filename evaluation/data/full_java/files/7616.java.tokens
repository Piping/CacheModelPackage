package org . elasticsearch . search . suggest . term ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . suggest . SuggestBuilder . SuggestionBuilder ; import java . io . IOException ; public class TermSuggestionBuilder extends SuggestionBuilder < TermSuggestionBuilder > { private String suggestMode ; private Float accuracy ; private String sort ; private String stringDistance ; private Integer maxEdits ; private Integer maxInspections ; private Float maxTermFreq ; private Integer prefixLength ; private Integer minWordLength ; private Float minDocFreq ; public TermSuggestionBuilder ( String name ) { super ( name , <str> ) ; } public TermSuggestionBuilder suggestMode ( String suggestMode ) { this . suggestMode = suggestMode ; return this ; } public TermSuggestionBuilder setAccuracy ( float accuracy ) { this . accuracy = accuracy ; return this ; } public TermSuggestionBuilder sort ( String sort ) { this . sort = sort ; return this ; } public TermSuggestionBuilder stringDistance ( String stringDistance ) { this . stringDistance = stringDistance ; return this ; } public TermSuggestionBuilder maxEdits ( Integer maxEdits ) { this . maxEdits = maxEdits ; return this ; } public TermSuggestionBuilder maxInspections ( Integer maxInspections ) { this . maxInspections = maxInspections ; return this ; } public TermSuggestionBuilder maxTermFreq ( float maxTermFreq ) { this . maxTermFreq = maxTermFreq ; return this ; } public TermSuggestionBuilder prefixLength ( int prefixLength ) { this . prefixLength = prefixLength ; return this ; } public TermSuggestionBuilder minWordLength ( int minWordLength ) { this . minWordLength = minWordLength ; return this ; } public TermSuggestionBuilder minDocFreq ( float minDocFreq ) { this . minDocFreq = minDocFreq ; return this ; } @Override public XContentBuilder innerToXContent ( XContentBuilder builder , Params params ) throws IOException { if ( suggestMode ! = null ) { builder . field ( <str> , suggestMode ) ; } if ( accuracy ! = null ) { builder . field ( <str> , accuracy ) ; } if ( sort ! = null ) { builder . field ( <str> , sort ) ; } if ( stringDistance ! = null ) { builder . field ( <str> , stringDistance ) ; } if ( maxEdits ! = null ) { builder . field ( <str> , maxEdits ) ; } if ( maxInspections ! = null ) { builder . field ( <str> , maxInspections ) ; } if ( maxTermFreq ! = null ) { builder . field ( <str> , maxTermFreq ) ; } if ( prefixLength ! = null ) { builder . field ( <str> , prefixLength ) ; } if ( minWordLength ! = null ) { builder . field ( <str> , minWordLength ) ; } if ( minDocFreq ! = null ) { builder . field ( <str> , minDocFreq ) ; } return builder ; } } 

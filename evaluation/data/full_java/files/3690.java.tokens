package org . eclipse . debug . internal . core ; import java . io . IOException ; import org . eclipse . debug . core . model . IStreamMonitor ; import org . eclipse . debug . core . model . IStreamsProxy ; import org . eclipse . debug . core . model . IStreamsProxy2 ; public class StreamsProxy implements IStreamsProxy , IStreamsProxy2 { private OutputStreamMonitor fOutputMonitor ; private OutputStreamMonitor fErrorMonitor ; private InputStreamMonitor fInputMonitor ; private boolean fClosed ; public StreamsProxy ( Process process , String encoding ) { if ( process = = null ) { return ; } fOutputMonitor = new OutputStreamMonitor ( process . getInputStream ( ) , encoding ) ; fErrorMonitor = new OutputStreamMonitor ( process . getErrorStream ( ) , encoding ) ; fInputMonitor = new InputStreamMonitor ( process . getOutputStream ( ) , encoding ) ; fOutputMonitor . startMonitoring ( ) ; fErrorMonitor . startMonitoring ( ) ; fInputMonitor . startMonitoring ( ) ; } public void close ( ) { if ( ! isClosed ( true ) ) { fOutputMonitor . close ( ) ; fErrorMonitor . close ( ) ; fInputMonitor . close ( ) ; } } private synchronized boolean isClosed ( boolean setClosed ) { boolean closed = fClosed ; if ( setClosed ) { fClosed = true ; } return closed ; } public void kill ( ) { synchronized ( this ) { fClosed = true ; } fOutputMonitor . kill ( ) ; fErrorMonitor . kill ( ) ; fInputMonitor . close ( ) ; } @Override public IStreamMonitor getErrorStreamMonitor ( ) { return fErrorMonitor ; } @Override public IStreamMonitor getOutputStreamMonitor ( ) { return fOutputMonitor ; } @Override public void write ( String input ) throws IOException { if ( ! isClosed ( false ) ) { fInputMonitor . write ( input ) ; } else { throw new IOException ( ) ; } } @Override public void closeInputStream ( ) throws IOException { if ( ! isClosed ( false ) ) { fInputMonitor . closeInputStream ( ) ; } else { throw new IOException ( ) ; } } } 

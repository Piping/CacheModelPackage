package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . Sprite ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureAtlas ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . tests . utils . GdxTest ; public class YDownTest extends GdxTest { SpriteBatch batch ; BitmapFont font ; TextureRegion region ; Sprite sprite ; TextureAtlas atlas ; Stage stage ; MyActor image ; OrthographicCamera camera ; @Override public void create ( ) { font = new BitmapFont ( Gdx . files . internal ( <str> ) , true ) ; region = new TextureRegion ( new Texture ( <str> ) ) ; region . flip ( false , true ) ; atlas = new TextureAtlas ( Gdx . files . internal ( <str> ) , true ) ; sprite = atlas . createSprite ( <str> ) ; sprite . setPosition ( <int> , <int> ) ; batch = new SpriteBatch ( ) ; camera = new OrthographicCamera ( ) ; camera . setToOrtho ( true ) ; stage = new Stage ( ) ; stage . getViewport ( ) . setCamera ( camera ) ; image = new MyActor ( region ) ; image . setPosition ( <int> , <int> ) ; stage . addActor ( image ) ; Gdx . input . setInputProcessor ( stage ) ; } @Override public void resize ( int width , int height ) { camera . setToOrtho ( true , width , height ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; camera . update ( ) ; batch . setProjectionMatrix ( camera . combined ) ; batch . begin ( ) ; batch . draw ( region , <int> , <int> ) ; font . draw ( batch , <str> , <int> , <int> ) ; batch . draw ( atlas . findRegion ( <str> ) , <int> , <int> ) ; sprite . setColor ( Color . RED ) ; sprite . draw ( batch ) ; font . draw ( batch , Gdx . input . getX ( ) + <str> + Gdx . input . getY ( ) , <int> , <int> ) ; batch . end ( ) ; stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; } public class MyActor extends Actor { TextureRegion region ; float lastX ; float lastY ; public MyActor ( TextureRegion region ) { this . region = region ; setWidth ( region . getRegionWidth ( ) ) ; setHeight ( region . getRegionHeight ( ) ) ; addListener ( new InputListener ( ) { public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { if ( pointer ! = <int> ) return false ; lastX = x ; lastY = y ; return true ; } public void touchDragged ( InputEvent event , float x , float y , int pointer ) { if ( pointer ! = <int> ) return ; moveBy ( x - lastX , y - lastY ) ; lastX = x - ( x - lastX ) ; lastY = y - ( y - lastY ) ; } } ) ; } @Override public void draw ( Batch batch , float parentAlpha ) { batch . draw ( region , getX ( ) , getY ( ) ) ; } } @Override public void dispose ( ) { batch . dispose ( ) ; font . dispose ( ) ; atlas . dispose ( ) ; region . getTexture ( ) . dispose ( ) ; stage . dispose ( ) ; } } 

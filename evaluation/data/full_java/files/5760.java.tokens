package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . spi . InjectionPoint ; import java . lang . reflect . Constructor ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Modifier ; class DefaultConstructionProxyFactory < T > implements ConstructionProxyFactory < T > { private final InjectionPoint injectionPoint ; DefaultConstructionProxyFactory ( InjectionPoint injectionPoint ) { this . injectionPoint = injectionPoint ; } @Override public ConstructionProxy < T > create ( ) { @SuppressWarnings ( <str> ) final Constructor < T > constructor = ( Constructor < T > ) injectionPoint . getMember ( ) ; return new ConstructionProxy < T > ( ) { @Override public T newInstance ( Object . . . arguments ) throws InvocationTargetException { try { return constructor . newInstance ( arguments ) ; } catch ( InstantiationException e ) { throw new AssertionError ( e ) ; } catch ( IllegalAccessException e ) { throw new AssertionError ( <str> + constructor , e ) ; } } @Override public InjectionPoint getInjectionPoint ( ) { return injectionPoint ; } @Override public Constructor < T > getConstructor ( ) { return constructor ; } } ; } } 

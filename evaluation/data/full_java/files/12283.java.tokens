package org . gradle . process . internal . child ; import java . io . DataInputStream ; import java . io . File ; import java . lang . reflect . Method ; import java . net . URL ; import java . net . URLClassLoader ; import java . security . Permission ; public class BootstrapSecurityManager extends SecurityManager { private boolean initialised ; private final URLClassLoader target ; public BootstrapSecurityManager ( ) { this ( null ) ; } BootstrapSecurityManager ( URLClassLoader target ) { this . target = target ; } @Override public void checkPermission ( Permission permission ) { synchronized ( this ) { if ( initialised ) { return ; } if ( System . in = = null ) { return ; } initialised = true ; } System . clearProperty ( <str> ) ; System . setSecurityManager ( null ) ; URLClassLoader systemClassLoader = target ! = null ? target : ( URLClassLoader ) getClass ( ) . getClassLoader ( ) ; String securityManagerType ; try { Method addUrlMethod = URLClassLoader . class . getDeclaredMethod ( <str> , URL . class ) ; addUrlMethod . setAccessible ( true ) ; DataInputStream inputStream = new DataInputStream ( new EncodedStream . EncodedInput ( System . in ) ) ; int count = inputStream . readInt ( ) ; StringBuilder classpathStr = new StringBuilder ( ) ; for ( int i = <int> ; i < count ; i + + ) { String entry = inputStream . readUTF ( ) ; File file = new File ( entry ) ; addUrlMethod . invoke ( systemClassLoader , file . toURI ( ) . toURL ( ) ) ; if ( i > <int> ) { classpathStr . append ( File . pathSeparator ) ; } classpathStr . append ( file . toString ( ) ) ; } System . setProperty ( <str> , classpathStr . toString ( ) ) ; securityManagerType = inputStream . readUTF ( ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> , e ) ; } if ( securityManagerType . length ( ) > <int> ) { System . setProperty ( <str> , securityManagerType ) ; SecurityManager securityManager ; try { Class < ? > aClass = systemClassLoader . loadClass ( securityManagerType ) ; securityManager = ( SecurityManager ) aClass . newInstance ( ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> + securityManagerType + <str> , e ) ; } System . setSecurityManager ( securityManager ) ; } } } 

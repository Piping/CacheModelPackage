package com . google . common . util . concurrent ; import junit . framework . TestCase ; import java . net . URLClassLoader ; import java . util . concurrent . CancellationException ; import java . util . concurrent . Future ; public class AbstractFutureCancellationCauseTest extends TestCase { private ClassLoader oldClassLoader ; private URLClassLoader classReloader ; @Override protected void setUp ( ) throws Exception { SettableFuture . create ( ) ; System . setProperty ( <str> , <str> ) ; final String concurrentPackage = SettableFuture . class . getPackage ( ) . getName ( ) ; classReloader = new URLClassLoader ( ( ( URLClassLoader ) SettableFuture . class . getClassLoader ( ) ) . getURLs ( ) ) { @Override public Class < ? > loadClass ( String name ) throws ClassNotFoundException { if ( name . startsWith ( concurrentPackage ) ) { return super . findClass ( name ) ; } return super . loadClass ( name ) ; } } ; oldClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; Thread . currentThread ( ) . setContextClassLoader ( classReloader ) ; } @Override protected void tearDown ( ) throws Exception { classReloader . close ( ) ; Thread . currentThread ( ) . setContextClassLoader ( oldClassLoader ) ; System . clearProperty ( <str> ) ; } public void testCancel_notDoneNoInterrupt ( ) throws Exception { Future < ? > future = newFutureInstance ( ) ; assertTrue ( future . cancel ( false ) ) ; assertTrue ( future . isCancelled ( ) ) ; assertTrue ( future . isDone ( ) ) ; try { future . get ( ) ; fail ( <str> ) ; } catch ( CancellationException e ) { assertNotNull ( e . getCause ( ) ) ; } } public void testCancel_notDoneInterrupt ( ) throws Exception { Future < ? > future = newFutureInstance ( ) ; assertTrue ( future . cancel ( true ) ) ; assertTrue ( future . isCancelled ( ) ) ; assertTrue ( future . isDone ( ) ) ; try { future . get ( ) ; fail ( <str> ) ; } catch ( CancellationException e ) { assertNotNull ( e . getCause ( ) ) ; } } private Future < ? > newFutureInstance ( ) throws Exception { return ( Future < ? > ) classReloader . loadClass ( SettableFuture . class . getName ( ) ) . getMethod ( <str> ) . invoke ( null ) ; } } 

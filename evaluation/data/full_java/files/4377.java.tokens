package org . eclipse . debug . internal . ui . viewers . breadcrumb ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . swt . SWT ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . graphics . Rectangle ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Item ; import org . eclipse . swt . widgets . Shell ; class BreadcrumbItem extends Item { private TreePath fPath ; private final BreadcrumbViewer fParent ; private Composite fContainer ; private BreadcrumbItemDropDown fExpandBlock ; private BreadcrumbItemDetails fDetailsBlock ; private boolean fIsLast ; public BreadcrumbItem ( BreadcrumbViewer viewer , Composite parent ) { super ( parent , SWT . NONE ) ; fParent = viewer ; fContainer = new Composite ( parent , SWT . NONE ) ; fContainer . setLayoutData ( new GridData ( SWT . FILL , SWT . CENTER , false , false ) ) ; GridLayout layout = new GridLayout ( <int> , false ) ; layout . marginBottom = <int> ; layout . marginHeight = <int> ; layout . marginWidth = <int> ; layout . horizontalSpacing = <int> ; fContainer . setLayout ( layout ) ; fExpandBlock = new BreadcrumbItemDropDown ( this , fContainer ) ; fDetailsBlock = new BreadcrumbItemDetails ( this , fContainer ) ; } public BreadcrumbViewer getViewer ( ) { return fParent ; } @Override public void dispose ( ) { fContainer . dispose ( ) ; super . dispose ( ) ; } public TreePath getPath ( ) { return fPath ; } public void setPath ( TreePath path ) { fPath = path ; } void setShowText ( boolean enabled ) { fDetailsBlock . setTextVisible ( enabled ) ; } boolean isShowText ( ) { return fDetailsBlock . isTextVisible ( ) ; } int getWidth ( ) { return fDetailsBlock . getWidth ( ) + fExpandBlock . getWidth ( ) + <int> ; } void setSelected ( boolean selected ) { fDetailsBlock . setSelected ( selected ) ; } void setFocus ( boolean state ) { fDetailsBlock . setFocus ( state ) ; } boolean hasFocus ( ) { return fDetailsBlock . hasFocus ( ) ; } void setIsLastItem ( boolean isLast ) { fIsLast = isLast ; GridData data = ( GridData ) fContainer . getLayoutData ( ) ; data . grabExcessHorizontalSpace = isLast ; } void openDropDownMenu ( ) { fExpandBlock . showMenu ( ) ; } boolean isMenuShown ( ) { return fExpandBlock . isMenuShown ( ) ; } Shell getDropDownShell ( ) { return fExpandBlock . getDropDownShell ( ) ; } public Rectangle getBounds ( ) { return fContainer . getBounds ( ) ; } public void setToolTip ( String text ) { fDetailsBlock . setToolTip ( text ) ; } @Override public void setText ( String string ) { super . setText ( string ) ; fDetailsBlock . setText ( string ) ; if ( fIsLast ) fContainer . layout ( true , true ) ; } @Override public void setImage ( Image image ) { super . setImage ( image ) ; fDetailsBlock . setImage ( image ) ; } } 

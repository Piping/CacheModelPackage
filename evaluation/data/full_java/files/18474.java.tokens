package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Image ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . ui . Label . LabelStyle ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . utils . DragAndDrop ; import com . badlogic . gdx . scenes . scene2d . utils . DragAndDrop . Payload ; import com . badlogic . gdx . scenes . scene2d . utils . DragAndDrop . Source ; import com . badlogic . gdx . scenes . scene2d . utils . DragAndDrop . Target ; import com . badlogic . gdx . tests . utils . GdxTest ; public class DragAndDropTest extends GdxTest { Stage stage ; public void create ( ) { stage = new Stage ( ) ; Gdx . input . setInputProcessor ( stage ) ; final Skin skin = new Skin ( ) ; skin . add ( <str> , new LabelStyle ( new BitmapFont ( ) , Color . WHITE ) ) ; skin . add ( <str> , new Texture ( <str> ) ) ; Image sourceImage = new Image ( skin , <str> ) ; sourceImage . setBounds ( <int> , <int> , <int> , <int> ) ; stage . addActor ( sourceImage ) ; Image validTargetImage = new Image ( skin , <str> ) ; validTargetImage . setBounds ( <int> , <int> , <int> , <int> ) ; stage . addActor ( validTargetImage ) ; Image invalidTargetImage = new Image ( skin , <str> ) ; invalidTargetImage . setBounds ( <int> , <int> , <int> , <int> ) ; stage . addActor ( invalidTargetImage ) ; DragAndDrop dragAndDrop = new DragAndDrop ( ) ; dragAndDrop . addSource ( new Source ( sourceImage ) { public Payload dragStart ( InputEvent event , float x , float y , int pointer ) { Payload payload = new Payload ( ) ; payload . setObject ( <str> ) ; payload . setDragActor ( new Label ( <str> , skin ) ) ; Label validLabel = new Label ( <str> , skin ) ; validLabel . setColor ( <int> , <int> , <int> , <int> ) ; payload . setValidDragActor ( validLabel ) ; Label invalidLabel = new Label ( <str> , skin ) ; invalidLabel . setColor ( <int> , <int> , <int> , <int> ) ; payload . setInvalidDragActor ( invalidLabel ) ; return payload ; } } ) ; dragAndDrop . addTarget ( new Target ( validTargetImage ) { public boolean drag ( Source source , Payload payload , float x , float y , int pointer ) { getActor ( ) . setColor ( Color . GREEN ) ; return true ; } public void reset ( Source source , Payload payload ) { getActor ( ) . setColor ( Color . WHITE ) ; } public void drop ( Source source , Payload payload , float x , float y , int pointer ) { System . out . println ( <str> + payload . getObject ( ) + <str> + x + <str> + y ) ; } } ) ; dragAndDrop . addTarget ( new Target ( invalidTargetImage ) { public boolean drag ( Source source , Payload payload , float x , float y , int pointer ) { getActor ( ) . setColor ( Color . RED ) ; return false ; } public void reset ( Source source , Payload payload ) { getActor ( ) . setColor ( Color . WHITE ) ; } public void drop ( Source source , Payload payload , float x , float y , int pointer ) { } } ) ; } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; } public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } public void dispose ( ) { stage . dispose ( ) ; } } 

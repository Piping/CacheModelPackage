package org . apache . cassandra . io . sstable ; import java . io . File ; import java . util . EnumSet ; import com . google . common . base . Objects ; import org . apache . cassandra . utils . ChecksumType ; import org . apache . cassandra . utils . Pair ; public class Component { public static final char separator = <str> ; final static EnumSet < Type > TYPES = EnumSet . allOf ( Type . class ) ; public enum Type { DATA ( <str> ) , PRIMARY_INDEX ( <str> ) , FILTER ( <str> ) , COMPRESSION_INFO ( <str> ) , STATS ( <str> ) , DIGEST ( <str> , <str> , <str> ) , CRC ( <str> ) , SUMMARY ( <str> ) , TOC ( <str> ) , CUSTOM ( new String [ ] { null } ) ; final String [ ] repr ; Type ( String repr ) { this ( new String [ ] { repr } ) ; } Type ( String . . . repr ) { this . repr = repr ; } static Type fromRepresentation ( String repr ) { for ( Type type : TYPES ) for ( String representation : type . repr ) if ( repr . equals ( representation ) ) return type ; return CUSTOM ; } } public final static Component DATA = new Component ( Type . DATA ) ; public final static Component PRIMARY_INDEX = new Component ( Type . PRIMARY_INDEX ) ; public final static Component FILTER = new Component ( Type . FILTER ) ; public final static Component COMPRESSION_INFO = new Component ( Type . COMPRESSION_INFO ) ; public final static Component STATS = new Component ( Type . STATS ) ; private static final String digestCrc32 = <str> ; private static final String digestAdler32 = <str> ; private static final String digestSha1 = <str> ; public final static Component DIGEST_CRC32 = new Component ( Type . DIGEST , digestCrc32 ) ; public final static Component DIGEST_ADLER32 = new Component ( Type . DIGEST , digestAdler32 ) ; public final static Component DIGEST_SHA1 = new Component ( Type . DIGEST , digestSha1 ) ; public final static Component CRC = new Component ( Type . CRC ) ; public final static Component SUMMARY = new Component ( Type . SUMMARY ) ; public final static Component TOC = new Component ( Type . TOC ) ; public static Component digestFor ( ChecksumType checksumType ) { switch ( checksumType ) { case Adler32 : return DIGEST_ADLER32 ; case CRC32 : return DIGEST_CRC32 ; } throw new AssertionError ( ) ; } public final Type type ; public final String name ; public final int hashCode ; public Component ( Type type ) { this ( type , type . repr [ <int> ] ) ; assert type . repr . length = = <int> ; assert type ! = Type . CUSTOM ; } public Component ( Type type , String name ) { assert name ! = null : <str> ; this . type = type ; this . name = name ; this . hashCode = Objects . hashCode ( type , name ) ; } public String name ( ) { return name ; } public static Pair < Descriptor , Component > fromFilename ( File directory , String name ) { Pair < Descriptor , String > path = Descriptor . fromFilename ( directory , name ) ; Type type = Type . fromRepresentation ( path . right ) ; Component component ; switch ( type ) { case DATA : component = Component . DATA ; break ; case PRIMARY_INDEX : component = Component . PRIMARY_INDEX ; break ; case FILTER : component = Component . FILTER ; break ; case COMPRESSION_INFO : component = Component . COMPRESSION_INFO ; break ; case STATS : component = Component . STATS ; break ; case DIGEST : switch ( path . right ) { case digestCrc32 : component = Component . DIGEST_CRC32 ; break ; case digestAdler32 : component = Component . DIGEST_ADLER32 ; break ; case digestSha1 : component = Component . DIGEST_SHA1 ; break ; default : throw new IllegalArgumentException ( <str> + path . right ) ; } break ; case CRC : component = Component . CRC ; break ; case SUMMARY : component = Component . SUMMARY ; break ; case TOC : component = Component . TOC ; break ; case CUSTOM : component = new Component ( Type . CUSTOM , path . right ) ; break ; default : throw new IllegalStateException ( ) ; } return Pair . create ( path . left , component ) ; } @Override public String toString ( ) { return this . name ( ) ; } @Override public boolean equals ( Object o ) { if ( o = = this ) return true ; if ( ! ( o instanceof Component ) ) return false ; Component that = ( Component ) o ; return this . type = = that . type & & this . name . equals ( that . name ) ; } @Override public int hashCode ( ) { return hashCode ; } } 

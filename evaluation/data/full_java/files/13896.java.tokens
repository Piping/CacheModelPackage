package org . gradle . launcher . exec ; import org . gradle . api . logging . LogLevel ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . launcher . daemon . configuration . DaemonUsage ; import org . gradle . util . GUtil ; import java . io . File ; import java . io . Serializable ; import java . util . HashMap ; import java . util . Map ; public class DefaultBuildActionParameters implements BuildActionParameters , Serializable { private final File currentDir ; private final LogLevel logLevel ; private final Map < String , String > systemProperties ; private final Map < String , String > envVariables ; private final DaemonUsage daemonUsage ; private final boolean continuous ; private final boolean interactive ; private final ClassPath injectedPluginClasspath ; public DefaultBuildActionParameters ( Map < ? , ? > systemProperties , Map < String , String > envVariables , File currentDir , LogLevel logLevel , DaemonUsage daemonUsage , boolean continuous , boolean interactive , ClassPath injectedPluginClasspath ) { this . currentDir = currentDir ; this . logLevel = logLevel ; this . continuous = continuous ; assert systemProperties ! = null ; assert envVariables ! = null ; this . systemProperties = new HashMap < String , String > ( ) ; GUtil . addToMap ( this . systemProperties , systemProperties ) ; this . envVariables = new HashMap < String , String > ( envVariables ) ; this . daemonUsage = daemonUsage ; this . interactive = interactive ; this . injectedPluginClasspath = injectedPluginClasspath ; } public Map < String , String > getSystemProperties ( ) { return systemProperties ; } public Map < String , String > getEnvVariables ( ) { return envVariables ; } public File getCurrentDir ( ) { return currentDir ; } public LogLevel getLogLevel ( ) { return logLevel ; } @Override public String toString ( ) { return <str> + <str> + currentDir + <str> + systemProperties . size ( ) + <str> + envVariables . size ( ) + <str> + logLevel + <str> + daemonUsage + <str> + continuous + <str> + interactive + <str> + injectedPluginClasspath + <str> ; } @Override public DaemonUsage getDaemonUsage ( ) { return daemonUsage ; } public boolean isContinuous ( ) { return continuous ; } public boolean isInteractive ( ) { return interactive ; } public ClassPath getInjectedPluginClasspath ( ) { return injectedPluginClasspath ; } } 

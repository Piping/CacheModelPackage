package org . elasticsearch . common . compress ; import org . apache . lucene . util . TestUtil ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . test . ESTestCase ; import org . junit . Assert ; import java . io . IOException ; import java . util . Random ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . not ; public abstract class AbstractCompressedXContentTestCase extends ESTestCase { private final Compressor compressor ; protected AbstractCompressedXContentTestCase ( Compressor compressor ) { this . compressor = compressor ; } private void assertEquals ( CompressedXContent s1 , CompressedXContent s2 ) { Assert . assertEquals ( s1 , s2 ) ; assertArrayEquals ( s1 . uncompressed ( ) , s2 . uncompressed ( ) ) ; assertEquals ( s1 . hashCode ( ) , s2 . hashCode ( ) ) ; } public void simpleTests ( ) throws IOException { Compressor defaultCompressor = CompressorFactory . defaultCompressor ( ) ; try { CompressorFactory . setDefaultCompressor ( compressor ) ; String str = <str> ; CompressedXContent cstr = new CompressedXContent ( str ) ; assertThat ( cstr . string ( ) , equalTo ( str ) ) ; assertThat ( new CompressedXContent ( str ) , equalTo ( cstr ) ) ; String str2 = <str> ; CompressedXContent cstr2 = new CompressedXContent ( str2 ) ; assertThat ( cstr2 . string ( ) , not ( equalTo ( str ) ) ) ; assertThat ( new CompressedXContent ( str2 ) , not ( equalTo ( cstr ) ) ) ; assertEquals ( new CompressedXContent ( str2 ) , cstr2 ) ; } finally { CompressorFactory . setDefaultCompressor ( defaultCompressor ) ; } } public void testRandom ( ) throws IOException { Compressor defaultCompressor = CompressorFactory . defaultCompressor ( ) ; try { CompressorFactory . setDefaultCompressor ( compressor ) ; Random r = getRandom ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { String string = TestUtil . randomUnicodeString ( r , <int> ) ; string = <str> + string ; CompressedXContent compressedXContent = new CompressedXContent ( string ) ; assertThat ( compressedXContent . string ( ) , equalTo ( string ) ) ; } } finally { CompressorFactory . setDefaultCompressor ( defaultCompressor ) ; } } public void testDifferentCompressedRepresentation ( ) throws Exception { byte [ ] b = <str> . getBytes ( <str> ) ; BytesStreamOutput bout = new BytesStreamOutput ( ) ; StreamOutput out = compressor . streamOutput ( bout ) ; out . writeBytes ( b ) ; out . flush ( ) ; out . writeBytes ( b ) ; out . close ( ) ; final BytesReference b1 = bout . bytes ( ) ; bout = new BytesStreamOutput ( ) ; out = compressor . streamOutput ( bout ) ; out . writeBytes ( b ) ; out . writeBytes ( b ) ; out . close ( ) ; final BytesReference b2 = bout . bytes ( ) ; assertFalse ( b1 . equals ( b2 ) ) ; assertArrayEquals ( b1 . toBytes ( ) , new CompressedXContent ( b1 ) . compressed ( ) ) ; assertArrayEquals ( b2 . toBytes ( ) , new CompressedXContent ( b2 ) . compressed ( ) ) ; assertEquals ( new CompressedXContent ( b1 ) , new CompressedXContent ( b2 ) ) ; } public void testHashCode ( ) throws IOException { assertFalse ( new CompressedXContent ( <str> ) . hashCode ( ) = = new CompressedXContent ( <str> ) . hashCode ( ) ) ; } } 

package io . netty . example . telnet ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . Channel ; import io . netty . channel . ChannelFuture ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . util . InsecureTrustManagerFactory ; import java . io . BufferedReader ; import java . io . InputStreamReader ; public final class TelnetClient { static final boolean SSL = System . getProperty ( <str> ) ! = null ; static final String HOST = System . getProperty ( <str> , <str> ) ; static final int PORT = Integer . parseInt ( System . getProperty ( <str> , SSL ? <str> : <str> ) ) ; public static void main ( String [ ] args ) throws Exception { final SslContext sslCtx ; if ( SSL ) { sslCtx = SslContextBuilder . forClient ( ) . trustManager ( InsecureTrustManagerFactory . INSTANCE ) . build ( ) ; } else { sslCtx = null ; } EventLoopGroup group = new NioEventLoopGroup ( ) ; try { Bootstrap b = new Bootstrap ( ) ; b . group ( group ) . channel ( NioSocketChannel . class ) . handler ( new TelnetClientInitializer ( sslCtx ) ) ; Channel ch = b . connect ( HOST , PORT ) . sync ( ) . channel ( ) ; ChannelFuture lastWriteFuture = null ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; for ( ; ; ) { String line = in . readLine ( ) ; if ( line = = null ) { break ; } lastWriteFuture = ch . writeAndFlush ( line + <str> ) ; if ( <str> . equals ( line . toLowerCase ( ) ) ) { ch . closeFuture ( ) . sync ( ) ; break ; } } if ( lastWriteFuture ! = null ) { lastWriteFuture . sync ( ) ; } } finally { group . shutdownGracefully ( ) ; } } } 

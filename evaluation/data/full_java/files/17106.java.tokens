package com . badlogic . gdx . physics . box2d . joints ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . JointDef ; public class FrictionJointDef extends JointDef { public FrictionJointDef ( ) { type = JointType . FrictionJoint ; } public void initialize ( Body bodyA , Body bodyB , Vector2 anchor ) { this . bodyA = bodyA ; this . bodyB = bodyB ; localAnchorA . set ( bodyA . getLocalPoint ( anchor ) ) ; localAnchorB . set ( bodyB . getLocalPoint ( anchor ) ) ; } public final Vector2 localAnchorA = new Vector2 ( ) ; public final Vector2 localAnchorB = new Vector2 ( ) ; public float maxForce = <int> ; public float maxTorque = <int> ; @Override public org . jbox2d . dynamics . joints . JointDef toJBox2d ( ) { org . jbox2d . dynamics . joints . FrictionJointDef jd = new org . jbox2d . dynamics . joints . FrictionJointDef ( ) ; jd . bodyA = bodyA . body ; jd . bodyB = bodyB . body ; jd . collideConnected = collideConnected ; jd . localAnchorA . set ( localAnchorA . x , localAnchorA . y ) ; jd . localAnchorB . set ( localAnchorB . x , localAnchorB . y ) ; jd . maxForce = maxForce ; jd . maxTorque = maxTorque ; jd . type = org . jbox2d . dynamics . joints . JointType . FRICTION ; return jd ; } } 

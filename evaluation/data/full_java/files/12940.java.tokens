package org . gradle . api . reporting . dependencies . internal ; import org . gradle . api . artifacts . ModuleIdentifier ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . artifacts . component . ModuleComponentSelector ; import org . gradle . api . artifacts . result . DependencyResult ; import org . gradle . api . artifacts . result . ResolvedDependencyResult ; import org . gradle . api . specs . Spec ; public class StrictDependencyResultSpec implements Spec < DependencyResult > { private final ModuleIdentifier moduleIdentifier ; public StrictDependencyResultSpec ( ModuleIdentifier moduleIdentifier ) { this . moduleIdentifier = moduleIdentifier ; } public boolean isSatisfiedBy ( DependencyResult candidate ) { if ( candidate instanceof ResolvedDependencyResult ) { return matchesRequested ( candidate ) | | matchesSelected ( ( ResolvedDependencyResult ) candidate ) ; } else { return matchesRequested ( candidate ) ; } } private boolean matchesRequested ( DependencyResult candidate ) { ComponentSelector requested = candidate . getRequested ( ) ; if ( moduleIdentifier ! = null & & requested instanceof ModuleComponentSelector ) { ModuleComponentSelector requestedSelector = ( ModuleComponentSelector ) requested ; return requestedSelector . getGroup ( ) . equals ( moduleIdentifier . getGroup ( ) ) & & requestedSelector . getModule ( ) . equals ( moduleIdentifier . getName ( ) ) ; } return false ; } private boolean matchesSelected ( ResolvedDependencyResult candidate ) { ComponentIdentifier selected = candidate . getSelected ( ) . getId ( ) ; if ( moduleIdentifier ! = null & & selected instanceof ModuleComponentIdentifier ) { ModuleComponentIdentifier selectedModule = ( ModuleComponentIdentifier ) selected ; return selectedModule . getGroup ( ) . equals ( moduleIdentifier . getGroup ( ) ) & & selectedModule . getModule ( ) . equals ( moduleIdentifier . getName ( ) ) ; } return false ; } } 

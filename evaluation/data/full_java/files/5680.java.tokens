package org . elasticsearch . common . blobstore . url ; import org . elasticsearch . common . blobstore . BlobContainer ; import org . elasticsearch . common . blobstore . BlobPath ; import org . elasticsearch . common . blobstore . BlobStore ; import org . elasticsearch . common . blobstore . BlobStoreException ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeUnit ; import org . elasticsearch . common . unit . ByteSizeValue ; import java . net . MalformedURLException ; import java . net . URL ; public class URLBlobStore extends AbstractComponent implements BlobStore { private final URL path ; private final int bufferSizeInBytes ; public URLBlobStore ( Settings settings , URL path ) { super ( settings ) ; this . path = path ; this . bufferSizeInBytes = ( int ) settings . getAsBytesSize ( <str> , new ByteSizeValue ( <int> , ByteSizeUnit . KB ) ) . bytes ( ) ; } @Override public String toString ( ) { return path . toString ( ) ; } public URL path ( ) { return path ; } public int bufferSizeInBytes ( ) { return this . bufferSizeInBytes ; } @Override public BlobContainer blobContainer ( BlobPath path ) { try { return new URLBlobContainer ( this , path , buildPath ( path ) ) ; } catch ( MalformedURLException ex ) { throw new BlobStoreException ( <str> + path , ex ) ; } } @Override public void delete ( BlobPath path ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public void close ( ) { } private URL buildPath ( BlobPath path ) throws MalformedURLException { String [ ] paths = path . toArray ( ) ; if ( paths . length = = <int> ) { return path ( ) ; } URL blobPath = new URL ( this . path , paths [ <int> ] + <str> ) ; if ( paths . length > <int> ) { for ( int i = <int> ; i < paths . length ; i + + ) { blobPath = new URL ( blobPath , paths [ i ] + <str> ) ; } } return blobPath ; } } 

package com . google . common . base ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import com . google . common . base . Ascii ; import com . google . common . collect . Lists ; import com . google . common . primitives . Chars ; import java . util . Collections ; import java . util . List ; import java . util . Locale ; import java . util . Random ; public class AsciiBenchmark { private static String ALPHA = <str> ; private static String NONALPHA = <str> ; @Param ( { <str> , <str> } ) int size ; @Param ( { <str> , <str> } ) int nonAlphaRatio ; @Param boolean noWorkToDo ; Random random ; String testString ; @BeforeExperiment void setUp ( ) { random = new Random ( ) ; int nonAlpha = size / nonAlphaRatio ; int alpha = size - nonAlpha ; List < Character > chars = Lists . newArrayListWithCapacity ( size ) ; for ( int i = <int> ; i < alpha ; i + + ) { chars . add ( randomAlpha ( ) ) ; } for ( int i = <int> ; i < nonAlpha ; i + + ) { chars . add ( randomNonAlpha ( ) ) ; } Collections . shuffle ( chars , random ) ; char [ ] array = Chars . toArray ( chars ) ; this . testString = new String ( array ) ; } private char randomAlpha ( ) { return ALPHA . charAt ( random . nextInt ( ALPHA . length ( ) ) ) ; } private char randomNonAlpha ( ) { return NONALPHA . charAt ( random . nextInt ( NONALPHA . length ( ) ) ) ; } @Benchmark int asciiStringToUpperCase ( int reps ) { String string = noWorkToDo ? Ascii . toUpperCase ( testString ) : testString ; int dummy = <int> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = Ascii . toUpperCase ( string ) . length ( ) ; } return dummy ; } @Benchmark int asciiCharSequenceToUpperCase ( int reps ) { String string = noWorkToDo ? charSequenceToUpperCase ( testString ) : testString ; int dummy = <int> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = charSequenceToUpperCase ( string ) . length ( ) ; } return dummy ; } @Benchmark int stringToUpperCase ( int reps ) { String string = noWorkToDo ? testString . toUpperCase ( Locale . US ) : testString ; int dummy = <int> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = string . toUpperCase ( Locale . US ) . length ( ) ; } return dummy ; } @Benchmark boolean equalsIgnoreCaseCharSequence ( int reps ) { String upperString = testString . toUpperCase ( ) ; CharSequence testSeq = new StringBuilder ( testString ) ; CharSequence upperSeq = new StringBuilder ( upperString ) ; CharSequence [ ] lhs = new CharSequence [ ] { testString , testSeq , testString , testSeq } ; CharSequence [ ] rhs = new CharSequence [ ] { upperString , upperString , upperSeq , upperSeq } ; boolean dummy = false ; for ( int i = <int> ; i < reps ; i + + ) { dummy ^ = Ascii . equalsIgnoreCase ( lhs [ i & <hex> ] , rhs [ i & <hex> ] ) ; } return dummy ; } @Benchmark boolean equalsIgnoreCaseStringOnly ( int reps ) { String lhs = testString ; String rhs = testString . toUpperCase ( ) ; boolean dummy = false ; for ( int i = <int> ; i < reps ; i + + ) { dummy ^ = Ascii . equalsIgnoreCase ( lhs , rhs ) ; } return dummy ; } @Benchmark boolean equalsIgnoreCaseJDK ( int reps ) { String lhs = testString ; String rhs = testString . toUpperCase ( ) ; boolean dummy = false ; for ( int i = <int> ; i < reps ; i + + ) { dummy ^ = lhs . equalsIgnoreCase ( rhs ) ; } return dummy ; } @Benchmark boolean isUpperCase ( int reps ) { char [ ] chars = testString . toCharArray ( ) ; boolean dummy = false ; for ( int i = <int> ; i < reps ; i + + ) { for ( int n = <int> ; n < chars . length ; n + + ) { dummy ^ = Ascii . isUpperCase ( chars [ n ] ) ; } } return dummy ; } static String charSequenceToUpperCase ( CharSequence chars ) { int length = chars . length ( ) ; StringBuilder builder = new StringBuilder ( length ) ; for ( int i = <int> ; i < length ; i + + ) { builder . append ( Ascii . toUpperCase ( chars . charAt ( i ) ) ) ; } return builder . toString ( ) ; } } 

package org . gradle . platform . base . internal . toolchain ; import org . gradle . api . Transformer ; import java . io . PrintWriter ; import java . util . regex . Pattern ; public class ArgWriter implements ArgCollector { private static final Pattern WHITESPACE = Pattern . compile ( <str> ) ; private final PrintWriter writer ; private final boolean backslashEscape ; private ArgWriter ( PrintWriter writer , boolean backslashEscape ) { this . writer = writer ; this . backslashEscape = backslashEscape ; } public static ArgWriter unixStyle ( PrintWriter writer ) { return new ArgWriter ( writer , true ) ; } public static Transformer < ArgWriter , PrintWriter > unixStyleFactory ( ) { return new Transformer < ArgWriter , PrintWriter > ( ) { public ArgWriter transform ( PrintWriter original ) { return unixStyle ( original ) ; } } ; } public static ArgWriter windowsStyle ( PrintWriter writer ) { return new ArgWriter ( writer , false ) ; } public static Transformer < ArgWriter , PrintWriter > windowsStyleFactory ( ) { return new Transformer < ArgWriter , PrintWriter > ( ) { public ArgWriter transform ( PrintWriter original ) { return windowsStyle ( original ) ; } } ; } public ArgWriter args ( Object . . . args ) { for ( int i = <int> ; i < args . length ; i + + ) { Object arg = args [ i ] ; if ( i > <int> ) { writer . print ( <str> ) ; } String str = arg . toString ( ) ; if ( backslashEscape ) { str = str . replace ( <str> , <str> ) . replace ( <str> , <str> ) ; } if ( WHITESPACE . matcher ( str ) . find ( ) ) { writer . print ( <str> ) ; writer . print ( str ) ; writer . print ( <str> ) ; } else { writer . print ( str ) ; } } writer . println ( ) ; return this ; } public ArgCollector args ( Iterable < ? > args ) { for ( Object arg : args ) { args ( arg ) ; } return this ; } } 

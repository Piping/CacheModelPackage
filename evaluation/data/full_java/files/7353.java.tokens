package org . elasticsearch . search . aggregations . metrics . stats . extended ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . AggregatorFactory ; import org . elasticsearch . search . aggregations . support . ValuesSource ; import org . elasticsearch . search . aggregations . support . ValuesSourceConfig ; import org . elasticsearch . search . aggregations . support . ValuesSourceParser ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; public class ExtendedStatsParser implements Aggregator . Parser { static final ParseField SIGMA = new ParseField ( <str> ) ; @Override public String type ( ) { return InternalExtendedStats . TYPE . name ( ) ; } protected AggregatorFactory createFactory ( String aggregationName , ValuesSourceConfig < ValuesSource . Numeric > config , double sigma ) { return new ExtendedStatsAggregator . Factory ( aggregationName , config , sigma ) ; } @Override public AggregatorFactory parse ( String aggregationName , XContentParser parser , SearchContext context ) throws IOException { ValuesSourceParser < ValuesSource . Numeric > vsParser = ValuesSourceParser . numeric ( aggregationName , InternalExtendedStats . TYPE , context ) . formattable ( true ) . build ( ) ; XContentParser . Token token ; String currentFieldName = null ; double sigma = <float> ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( vsParser . token ( currentFieldName , token , parser ) ) { continue ; } else if ( token = = XContentParser . Token . VALUE_NUMBER ) { if ( context . parseFieldMatcher ( ) . match ( currentFieldName , SIGMA ) ) { sigma = parser . doubleValue ( ) ; } else { throw new SearchParseException ( context , <str> + token + <str> + aggregationName + <str> + currentFieldName + <str> , parser . getTokenLocation ( ) ) ; } } else { throw new SearchParseException ( context , <str> + token + <str> + aggregationName + <str> , parser . getTokenLocation ( ) ) ; } } if ( sigma < <int> ) { throw new SearchParseException ( context , <str> + sigma , parser . getTokenLocation ( ) ) ; } return createFactory ( aggregationName , vsParser . config ( ) , sigma ) ; } } 

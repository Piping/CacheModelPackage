package org . elasticsearch . search . preference ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . not ; @ESIntegTestCase.ClusterScope ( minNumDataNodes = <int> ) public class SearchPreferenceIT extends ESIntegTestCase { public void testStopOneNodePreferenceWithRedState ( ) throws InterruptedException , IOException { assertAcked ( prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , cluster ( ) . numDataNodes ( ) + <int> ) . put ( <str> , <int> ) ) ) ; ensureGreen ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; } refresh ( ) ; internalCluster ( ) . stopRandomDataNode ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForStatus ( ClusterHealthStatus . RED ) . execute ( ) . actionGet ( ) ; String [ ] preferences = new String [ ] { <str> , <str> , <str> , <str> , <str> } ; for ( String pref : preferences ) { logger . info ( <str> , pref ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setSize ( <int> ) . setPreference ( pref ) . execute ( ) . actionGet ( ) ; assertThat ( RestStatus . OK , equalTo ( searchResponse . status ( ) ) ) ; assertThat ( pref , searchResponse . getFailedShards ( ) , greaterThanOrEqualTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setPreference ( pref ) . execute ( ) . actionGet ( ) ; assertThat ( RestStatus . OK , equalTo ( searchResponse . status ( ) ) ) ; assertThat ( pref , searchResponse . getFailedShards ( ) , greaterThanOrEqualTo ( <int> ) ) ; } SearchResponse searchResponse = dataNodeClient ( ) . prepareSearch ( ) . setSize ( <int> ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( RestStatus . OK , equalTo ( searchResponse . status ( ) ) ) ; assertThat ( <str> , searchResponse . getFailedShards ( ) , greaterThanOrEqualTo ( <int> ) ) ; searchResponse = dataNodeClient ( ) . prepareSearch ( ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( RestStatus . OK , equalTo ( searchResponse . status ( ) ) ) ; assertThat ( <str> , searchResponse . getFailedShards ( ) , greaterThanOrEqualTo ( <int> ) ) ; } public void testNoPreferenceRandom ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( SETTING_NUMBER_OF_REPLICAS , between ( <int> , maximumNumberOfReplicas ( ) ) ) ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; refresh ( ) ; final Client client = internalCluster ( ) . smartClient ( ) ; SearchResponse searchResponse = client . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . execute ( ) . actionGet ( ) ; String firstNodeId = searchResponse . getHits ( ) . getAt ( <int> ) . shard ( ) . nodeId ( ) ; searchResponse = client . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . execute ( ) . actionGet ( ) ; String secondNodeId = searchResponse . getHits ( ) . getAt ( <int> ) . shard ( ) . nodeId ( ) ; assertThat ( firstNodeId , not ( equalTo ( secondNodeId ) ) ) ; } public void testSimplePreference ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( <str> ) . get ( ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } public void testReplicaPreference ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( <str> ) . get ( ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; refresh ( ) ; try { client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( Exception e ) { } SearchResponse resp = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( resp . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( <str> ) . get ( ) ; ensureGreen ( <str> ) ; resp = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( resp . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; } public void testThatSpecifyingNonExistingNodesReturnsUsefulError ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; try { client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } } 

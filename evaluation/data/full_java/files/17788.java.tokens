package com . badlogic . gdx . setup ; import java . util . List ; import java . util . Map ; public class ExternalExtension { private String name ; private String [ ] gwtInherits ; private String description ; private String version ; private Map < String , List < String > > dependencies ; public ExternalExtension ( String name , String [ ] gwtInherits , String description , String version ) { this . name = name ; this . gwtInherits = gwtInherits ; this . description = description ; this . version = version ; } public void setDependencies ( Map < String , List < String > > dependencies ) { this . dependencies = dependencies ; } public Dependency generateDependency ( ) { Dependency dep = new Dependency ( name , gwtInherits , getPlatformDependencies ( <str> ) , getPlatformDependencies ( <str> ) , getPlatformDependencies ( <str> ) , getPlatformDependencies ( <str> ) , getPlatformDependencies ( <str> ) ) ; return dep ; } private String [ ] getPlatformDependencies ( String platformName ) { if ( dependencies . get ( platformName ) = = null ) { return null ; } else if ( dependencies . get ( platformName ) ! = null & & dependencies . get ( platformName ) . size ( ) = = <int> ) { return new String [ ] { } ; } else { String [ ] arr = new String [ dependencies . get ( platformName ) . size ( ) ] ; for ( int i = <int> ; i < dependencies . get ( platformName ) . size ( ) ; i + + ) { String dependencyString = dependencies . get ( platformName ) . get ( i ) ; if ( dependencyString . split ( <str> ) . length = = <int> ) { String [ ] split = dependencyString . split ( <str> ) ; arr [ i ] = split [ <int> ] + <str> + split [ <int> ] + <str> + version + <str> + split [ <int> ] ; } else { arr [ i ] = dependencyString + <str> + version ; } } return arr ; } } public String getName ( ) { return name ; } } 

package io . netty . util . concurrent ; import org . junit . Before ; import org . junit . Test ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import static org . hamcrest . CoreMatchers . * ; import static org . junit . Assert . * ; public class GlobalEventExecutorTest { private static final GlobalEventExecutor e = GlobalEventExecutor . INSTANCE ; @Before public void setUp ( ) throws Exception { for ( ; ; ) { if ( e . thread = = null | | ! e . thread . isAlive ( ) ) { break ; } Thread . sleep ( <int> ) ; } } @Test public void testAutomaticStartStop ( ) throws Exception { final TestRunnable task = new TestRunnable ( <int> ) ; e . execute ( task ) ; Thread thread = e . thread ; assertThat ( thread , is ( not ( nullValue ( ) ) ) ) ; assertThat ( thread . isAlive ( ) , is ( true ) ) ; Thread . sleep ( <int> ) ; assertThat ( thread . isAlive ( ) , is ( false ) ) ; assertThat ( task . ran . get ( ) , is ( true ) ) ; assertThat ( e . thread , sameInstance ( thread ) ) ; task . ran . set ( false ) ; e . execute ( task ) ; assertThat ( e . thread , not ( sameInstance ( thread ) ) ) ; thread = e . thread ; Thread . sleep ( <int> ) ; assertThat ( thread . isAlive ( ) , is ( false ) ) ; assertThat ( task . ran . get ( ) , is ( true ) ) ; assertThat ( e . thread , sameInstance ( thread ) ) ; } @Test public void testScheduledTasks ( ) throws Exception { TestRunnable task = new TestRunnable ( <int> ) ; ScheduledFuture < ? > f = e . schedule ( task , <int> , TimeUnit . MILLISECONDS ) ; f . sync ( ) ; assertThat ( task . ran . get ( ) , is ( true ) ) ; Thread thread = e . thread ; assertThat ( thread , is ( not ( nullValue ( ) ) ) ) ; assertThat ( thread . isAlive ( ) , is ( true ) ) ; Thread . sleep ( <int> ) ; assertThat ( thread . isAlive ( ) , is ( false ) ) ; assertThat ( e . thread , sameInstance ( thread ) ) ; } private static final class TestRunnable implements Runnable { final AtomicBoolean ran = new AtomicBoolean ( ) ; final long delay ; TestRunnable ( long delay ) { this . delay = delay ; } @Override public void run ( ) { try { Thread . sleep ( delay ) ; ran . set ( true ) ; } catch ( InterruptedException ignored ) { } } } } 

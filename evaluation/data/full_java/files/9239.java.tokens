package com . google . common . collect ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import java . util . Comparator ; import java . util . Iterator ; import java . util . NoSuchElementException ; import java . util . SortedSet ; import javax . annotation . Nullable ; @GwtCompatible public abstract class ForwardingSortedSet < E > extends ForwardingSet < E > implements SortedSet < E > { protected ForwardingSortedSet ( ) { } @Override protected abstract SortedSet < E > delegate ( ) ; @Override public Comparator < ? super E > comparator ( ) { return delegate ( ) . comparator ( ) ; } @Override public E first ( ) { return delegate ( ) . first ( ) ; } @Override public SortedSet < E > headSet ( E toElement ) { return delegate ( ) . headSet ( toElement ) ; } @Override public E last ( ) { return delegate ( ) . last ( ) ; } @Override public SortedSet < E > subSet ( E fromElement , E toElement ) { return delegate ( ) . subSet ( fromElement , toElement ) ; } @Override public SortedSet < E > tailSet ( E fromElement ) { return delegate ( ) . tailSet ( fromElement ) ; } @SuppressWarnings ( <str> ) private int unsafeCompare ( Object o1 , Object o2 ) { Comparator < ? super E > comparator = comparator ( ) ; return ( comparator = = null ) ? ( ( Comparable < Object > ) o1 ) . compareTo ( o2 ) : ( ( Comparator < Object > ) comparator ) . compare ( o1 , o2 ) ; } @Override @Beta protected boolean standardContains ( @Nullable Object object ) { try { @SuppressWarnings ( <str> ) SortedSet < Object > self = ( SortedSet < Object > ) this ; Object ceiling = self . tailSet ( object ) . first ( ) ; return unsafeCompare ( ceiling , object ) = = <int> ; } catch ( ClassCastException e ) { return false ; } catch ( NoSuchElementException e ) { return false ; } catch ( NullPointerException e ) { return false ; } } @Override @Beta protected boolean standardRemove ( @Nullable Object object ) { try { @SuppressWarnings ( <str> ) SortedSet < Object > self = ( SortedSet < Object > ) this ; Iterator < Object > iterator = self . tailSet ( object ) . iterator ( ) ; if ( iterator . hasNext ( ) ) { Object ceiling = iterator . next ( ) ; if ( unsafeCompare ( ceiling , object ) = = <int> ) { iterator . remove ( ) ; return true ; } } } catch ( ClassCastException e ) { return false ; } catch ( NullPointerException e ) { return false ; } return false ; } @Beta protected SortedSet < E > standardSubSet ( E fromElement , E toElement ) { return tailSet ( fromElement ) . headSet ( toElement ) ; } } 

package com . google . common . eventbus ; import com . google . common . collect . Lists ; import junit . framework . TestCase ; import java . util . List ; public class ReentrantEventsTest extends TestCase { static final String FIRST = <str> ; static final Double SECOND = <float> ; final EventBus bus = new EventBus ( ) ; public void testNoReentrantEvents ( ) { ReentrantEventsHater hater = new ReentrantEventsHater ( ) ; bus . register ( hater ) ; bus . post ( FIRST ) ; assertEquals ( <str> , Lists . < Object > newArrayList ( FIRST , SECOND ) , hater . eventsReceived ) ; } public class ReentrantEventsHater { boolean ready = true ; List < Object > eventsReceived = Lists . newArrayList ( ) ; @Subscribe public void listenForStrings ( String event ) { eventsReceived . add ( event ) ; ready = false ; try { bus . post ( SECOND ) ; } finally { ready = true ; } } @Subscribe public void listenForDoubles ( Double event ) { assertTrue ( <str> , ready ) ; eventsReceived . add ( event ) ; } } public void testEventOrderingIsPredictable ( ) { EventProcessor processor = new EventProcessor ( ) ; bus . register ( processor ) ; EventRecorder recorder = new EventRecorder ( ) ; bus . register ( recorder ) ; bus . post ( FIRST ) ; assertEquals ( <str> , Lists . < Object > newArrayList ( FIRST , SECOND ) , recorder . eventsReceived ) ; } public class EventProcessor { @Subscribe public void listenForStrings ( String event ) { bus . post ( SECOND ) ; } } public class EventRecorder { List < Object > eventsReceived = Lists . newArrayList ( ) ; @Subscribe public void listenForEverything ( Object event ) { eventsReceived . add ( event ) ; } } } 

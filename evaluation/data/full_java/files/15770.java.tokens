package org . gradle . api . internal . tasks . testing . junit . result ; import org . gradle . api . Action ; import org . gradle . api . tasks . testing . TestOutputEvent ; import java . io . IOException ; import java . io . Writer ; public class InMemoryTestResultsProvider implements TestResultsProvider { private final Iterable < TestClassResult > results ; private final TestOutputStore . Reader outputReader ; public InMemoryTestResultsProvider ( Iterable < TestClassResult > results , TestOutputStore . Reader outputReader ) { this . results = results ; this . outputReader = outputReader ; } public boolean hasOutput ( long id , TestOutputEvent . Destination destination ) { return outputReader . hasOutput ( id , destination ) ; } public void writeAllOutput ( long id , TestOutputEvent . Destination destination , Writer writer ) { outputReader . writeAllOutput ( id , destination , writer ) ; } public void writeNonTestOutput ( long id , TestOutputEvent . Destination destination , Writer writer ) { outputReader . writeNonTestOutput ( id , destination , writer ) ; } public void writeTestOutput ( long classId , long testId , TestOutputEvent . Destination destination , Writer writer ) { outputReader . writeTestOutput ( classId , testId , destination , writer ) ; } public void visitClasses ( final Action < ? super TestClassResult > visitor ) { for ( TestClassResult result : results ) { visitor . execute ( result ) ; } } public boolean isHasResults ( ) { return results . iterator ( ) . hasNext ( ) ; } public void close ( ) throws IOException { outputReader . close ( ) ; } } 

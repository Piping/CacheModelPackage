package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . AggregationBuilders ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . instanceOf ; public class ParentIdAggIT extends ESIntegTestCase { public void testParentIdAggregation ( ) throws IOException { XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , mapping ) ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ) . setParent ( <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) ) . setParent ( <str> ) . get ( ) ; refresh ( ) ; ensureGreen ( <str> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( AggregationBuilders . terms ( <str> ) . field ( <str> ) ) . get ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertSearchResponse ( searchResponse ) ; assertThat ( searchResponse . getAggregations ( ) . getAsMap ( ) . get ( <str> ) , instanceOf ( Terms . class ) ) ; Terms terms = ( Terms ) searchResponse . getAggregations ( ) . getAsMap ( ) . get ( <str> ) ; assertThat ( terms . getBuckets ( ) . iterator ( ) . next ( ) . getDocCount ( ) , equalTo ( <int> ) ) ; } } 

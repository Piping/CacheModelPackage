package org . nd4j . linalg . api . ops ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ndarray . LinearViewNDArray ; public abstract class BaseOp implements Op { protected INDArray x , y , z ; protected int n ; protected int numProcessed ; protected Object [ ] extraArgs ; protected boolean passThrough ; public BaseOp ( ) { } @Override public boolean isPassThrough ( ) { return passThrough ; } @Override public void setX ( INDArray x ) { if ( x = = null ) throw new IllegalArgumentException ( <str> ) ; this . x = x ; numProcessed = <int> ; this . n = x . length ( ) ; } @Override public void setZ ( INDArray z ) { if ( z = = null ) throw new IllegalArgumentException ( <str> ) ; this . z = z ; numProcessed = <int> ; this . n = z . length ( ) ; } @Override public void setY ( INDArray y ) { if ( y = = null ) throw new IllegalArgumentException ( <str> ) ; this . y = y ; numProcessed = <int> ; this . n = y . length ( ) ; } public BaseOp ( INDArray x , INDArray z ) { this ( x , z , x . length ( ) ) ; } public BaseOp ( INDArray x , INDArray z , int n ) { this ( x , null , z , n ) ; } public BaseOp ( INDArray x , INDArray y , INDArray z , int n ) { ensureProperVectors ( x , y , z ) ; this . n = n ; init ( x , y , z , n ) ; } protected void ensureProperVectors ( INDArray x , INDArray y , INDArray z ) { this . x = x ; if ( x . offset ( ) > <int> & & ! ( x instanceof LinearViewNDArray ) & & x . length ( ) < x . data ( ) . length ( ) ) { this . x = x . linearView ( ) ; } this . y = y ; if ( y ! = null & & y . offset ( ) > <int> & & ! ( y instanceof LinearViewNDArray ) & & y . majorStride ( ) > y . elementStride ( ) ) { this . y = y . linearView ( ) ; } this . z = z ; if ( z . offset ( ) > <int> & & ! ( x instanceof LinearViewNDArray ) & & z . majorStride ( ) > z . elementStride ( ) ) { this . z = z . linearView ( ) ; } } public BaseOp ( INDArray x ) { this ( x , null , x , x . length ( ) ) ; } @Override public Object [ ] extraArgs ( ) { return extraArgs ; } @Override public INDArray x ( ) { return x ; } @Override public INDArray y ( ) { return y ; } @Override public INDArray z ( ) { return z ; } @Override public int n ( ) { return n ; } @Override public void init ( INDArray x , INDArray y , INDArray z , int n ) { } @Override public void setN ( int n ) { this . n = n ; } @Override public int numProcessed ( ) { return numProcessed ; } @Override public String toString ( ) { return name ( ) ; } @Override public void exec ( ) { } @Override public void exec ( int . . . dimensions ) { } } 

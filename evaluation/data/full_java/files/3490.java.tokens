package org . nd4j . linalg . cpu ; import com . github . fommil . netlib . BLAS ; import com . github . fommil . netlib . LAPACK ; import org . nd4j . linalg . factory . BaseBlasWrapper ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . lang . reflect . * ; public class BlasWrapper extends BaseBlasWrapper { private static final Logger log = LoggerFactory . getLogger ( BlasWrapper . class ) ; public final static String FORCE_NATIVE = <str> ; static { String forceNative = System . getProperty ( FORCE_NATIVE , <str> ) ; if ( Boolean . parseBoolean ( forceNative ) ) { try { Field blasInstance = BLAS . class . getDeclaredField ( <str> ) ; BLAS newInstance = ( BLAS ) Class . forName ( <str> ) . newInstance ( ) ; setFinalStatic ( blasInstance , newInstance ) ; } catch ( ClassNotFoundException e ) { log . warn ( <str> ) ; } catch ( Exception e ) { log . warn ( <str> , e ) ; } } if ( ! ( BLAS . getInstance ( ) instanceof com . github . fommil . netlib . NativeSystemBLAS ) ) { System . out . println ( <str> ) ; System . out . println ( <str> ) ; System . out . println ( <str> ) ; System . out . println ( <str> ) ; System . out . println ( <str> ) ; System . out . println ( <str> ) ; } } static void setFinalStatic ( Field field , Object newValue ) throws Exception { field . setAccessible ( true ) ; Field modifiersField = Field . class . getDeclaredField ( <str> ) ; modifiersField . setAccessible ( true ) ; modifiersField . setInt ( field , field . getModifiers ( ) & ~ Modifier . FINAL ) ; field . set ( null , newValue ) ; } } 

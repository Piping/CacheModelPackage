package com . badlogic . gdx . graphics . glutils ; import java . nio . FloatBuffer ; import com . badlogic . gdx . Application . ApplicationType ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . TextureData ; import com . badlogic . gdx . utils . BufferUtils ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class FloatTextureData implements TextureData { int width = <int> ; int height = <int> ; boolean isPrepared = false ; FloatBuffer buffer ; public FloatTextureData ( int w , int h ) { this . width = w ; this . height = h ; } @Override public TextureDataType getType ( ) { return TextureDataType . Custom ; } @Override public boolean isPrepared ( ) { return isPrepared ; } @Override public void prepare ( ) { if ( isPrepared ) throw new GdxRuntimeException ( <str> ) ; this . buffer = BufferUtils . newFloatBuffer ( width * height * <int> ) ; isPrepared = true ; } @Override public void consumeCustomData ( int target ) { if ( Gdx . app . getType ( ) = = ApplicationType . Android | | Gdx . app . getType ( ) = = ApplicationType . iOS | | Gdx . app . getType ( ) = = ApplicationType . WebGL ) { if ( ! Gdx . graphics . supportsExtension ( <str> ) ) throw new GdxRuntimeException ( <str> ) ; Gdx . gl . glTexImage2D ( target , <int> , GL20 . GL_RGBA , width , height , <int> , GL20 . GL_RGBA , GL20 . GL_FLOAT , buffer ) ; } else { if ( ! Gdx . graphics . supportsExtension ( <str> ) ) throw new GdxRuntimeException ( <str> ) ; final int GL_RGBA32F = <int> ; Gdx . gl . glTexImage2D ( target , <int> , GL_RGBA32F , width , height , <int> , GL20 . GL_RGBA , GL20 . GL_FLOAT , buffer ) ; } } @Override public Pixmap consumePixmap ( ) { throw new GdxRuntimeException ( <str> ) ; } @Override public boolean disposePixmap ( ) { throw new GdxRuntimeException ( <str> ) ; } @Override public int getWidth ( ) { return width ; } @Override public int getHeight ( ) { return height ; } @Override public Format getFormat ( ) { return Format . RGBA8888 ; } @Override public boolean useMipMaps ( ) { return false ; } @Override public boolean isManaged ( ) { return true ; } } 

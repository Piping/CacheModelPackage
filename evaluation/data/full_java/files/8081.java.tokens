package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . tokenattributes . CharTermAttribute ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . lucene . all . AllEntries ; import org . elasticsearch . common . lucene . all . AllTokenStream ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . analysis . compound . DictionaryCompoundWordTokenFilterFactory ; import org . elasticsearch . index . analysis . filter1 . MyFilterTokenFilterFactory ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . IndexSettingsModule ; import org . hamcrest . MatcherAssert ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . * ; public class CompoundAnalysisTests extends ESTestCase { public void testDefaultsCompoundAnalysis ( ) throws Exception { Index index = new Index ( <str> ) ; Settings settings = getJsonSettings ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( index , settings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( settings ) , Collections . emptyMap ( ) , Collections . singletonMap ( <str> , MyFilterTokenFilterFactory : : new ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) ) . build ( idxSettings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; MatcherAssert . assertThat ( filterFactory , instanceOf ( DictionaryCompoundWordTokenFilterFactory . class ) ) ; } public void testDictionaryDecompounder ( ) throws Exception { Settings [ ] settingsArr = new Settings [ ] { getJsonSettings ( ) , getYamlSettings ( ) } ; for ( Settings settings : settingsArr ) { List < String > terms = analyze ( settings , <str> , <str> ) ; MatcherAssert . assertThat ( terms . size ( ) , equalTo ( <int> ) ) ; MatcherAssert . assertThat ( terms , hasItems ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; } } private List < String > analyze ( Settings settings , String analyzerName , String text ) throws IOException { Index index = new Index ( <str> ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( index , settings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( settings ) , Collections . emptyMap ( ) , Collections . singletonMap ( <str> , MyFilterTokenFilterFactory : : new ) , Collections . emptyMap ( ) , Collections . emptyMap ( ) ) . build ( idxSettings ) ; Analyzer analyzer = analysisService . analyzer ( analyzerName ) . analyzer ( ) ; AllEntries allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , text , <float> ) ; allEntries . reset ( ) ; TokenStream stream = AllTokenStream . allTokenStream ( <str> , allEntries , analyzer ) ; stream . reset ( ) ; CharTermAttribute termAtt = stream . addAttribute ( CharTermAttribute . class ) ; List < String > terms = new ArrayList < > ( ) ; while ( stream . incrementToken ( ) ) { String tokText = termAtt . toString ( ) ; terms . add ( tokText ) ; } return terms ; } private Settings getJsonSettings ( ) { String json = <str> ; return settingsBuilder ( ) . loadFromStream ( json , getClass ( ) . getResourceAsStream ( json ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; } private Settings getYamlSettings ( ) { String yaml = <str> ; return settingsBuilder ( ) . loadFromStream ( yaml , getClass ( ) . getResourceAsStream ( yaml ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; } } 

package org . nd4j . linalg . convolution ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . util . ArrayUtil ; public abstract class BaseConvolution implements ConvolutionInstance { @Override public INDArray conv2d ( INDArray input , INDArray kernel , Convolution . Type type ) { int [ ] axes = input . shape ( ) . length < <int> ? ArrayUtil . range ( <int> , <int> ) : ArrayUtil . range ( input . shape ( ) . length - <int> , input . shape ( ) . length ) ; return convn ( input , kernel , type , axes ) ; } @Override public INDArray conv2d ( IComplexNDArray input , IComplexNDArray kernel , Convolution . Type type ) { int [ ] axes = input . shape ( ) . length < <int> ? ArrayUtil . range ( <int> , <int> ) : ArrayUtil . range ( input . shape ( ) . length - <int> , input . shape ( ) . length ) ; return convn ( input , kernel , type , axes ) ; } @Override public INDArray convn ( INDArray input , INDArray kernel , Convolution . Type type ) { return convn ( input , kernel , type , ArrayUtil . range ( <int> , input . shape ( ) . length ) ) ; } @Override public IComplexNDArray convn ( IComplexNDArray input , IComplexNDArray kernel , Convolution . Type type ) { return convn ( input , kernel , type , ArrayUtil . range ( <int> , input . shape ( ) . length ) ) ; } } 

package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import java . util . UUID ; import org . apache . cassandra . cql3 . CQL3Type ; import org . apache . cassandra . cql3 . Constants ; import org . apache . cassandra . cql3 . Term ; import org . apache . cassandra . serializers . TypeSerializer ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . serializers . TimeUUIDSerializer ; public class TimeUUIDType extends AbstractType < UUID > { public static final TimeUUIDType instance = new TimeUUIDType ( ) ; TimeUUIDType ( ) { super ( ComparisonType . CUSTOM ) ; } public boolean isEmptyValueMeaningless ( ) { return true ; } public int compareCustom ( ByteBuffer b1 , ByteBuffer b2 ) { int s1 = b1 . position ( ) , s2 = b2 . position ( ) ; int l1 = b1 . limit ( ) , l2 = b2 . limit ( ) ; boolean p1 = l1 - s1 = = <int> , p2 = l2 - s2 = = <int> ; if ( ! ( p1 & p2 ) ) { assert p1 | ( l1 = = s1 ) ; assert p2 | ( l2 = = s2 ) ; return p1 ? <int> : p2 ? - <int> : <int> ; } long msb1 = b1 . getLong ( s1 ) ; long msb2 = b2 . getLong ( s2 ) ; msb1 = reorderTimestampBytes ( msb1 ) ; msb2 = reorderTimestampBytes ( msb2 ) ; assert ( msb1 & topbyte ( <hex> ) ) = = topbyte ( <hex> ) ; assert ( msb2 & topbyte ( <hex> ) ) = = topbyte ( <hex> ) ; int c = Long . compare ( msb1 , msb2 ) ; if ( c ! = <int> ) return c ; long lsb1 = signedBytesToNativeLong ( b1 . getLong ( s1 + <int> ) ) ; long lsb2 = signedBytesToNativeLong ( b2 . getLong ( s2 + <int> ) ) ; return Long . compare ( lsb1 , lsb2 ) ; } private static long signedBytesToNativeLong ( long signedBytes ) { return signedBytes ^ <hex> ; } private static long topbyte ( long topbyte ) { return topbyte < < <int> ; } protected static long reorderTimestampBytes ( long input ) { return ( input < < <int> ) | ( ( input < < <int> ) & <hex> ) | ( input > > > <int> ) ; } public ByteBuffer fromString ( String source ) throws MarshalException { ByteBuffer parsed = UUIDType . parse ( source ) ; if ( parsed = = null ) throw new MarshalException ( String . format ( <str> , source ) ) ; if ( parsed . remaining ( ) = = <int> & & UUIDType . version ( parsed ) ! = <int> ) throw new MarshalException ( <str> ) ; return parsed ; } @Override public Term fromJSONObject ( Object parsed ) throws MarshalException { try { return new Constants . Value ( fromString ( ( String ) parsed ) ) ; } catch ( ClassCastException exc ) { throw new MarshalException ( String . format ( <str> , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; } } public CQL3Type asCQL3Type ( ) { return CQL3Type . Native . TIMEUUID ; } public TypeSerializer < UUID > getSerializer ( ) { return TimeUUIDSerializer . instance ; } @Override protected int valueLengthIfFixed ( ) { return <int> ; } } 

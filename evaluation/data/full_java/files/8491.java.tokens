package org . elasticsearch . search . basic ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . action . admin . indices . refresh . RefreshResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; public class SearchWhileCreatingIndexIT extends ESIntegTestCase { public void testIndexCausesIndexCreation ( ) throws Exception { searchWhileCreatingIndex ( false , <int> ) ; } public void testNoReplicas ( ) throws Exception { searchWhileCreatingIndex ( true , <int> ) ; } public void testOneReplica ( ) throws Exception { searchWhileCreatingIndex ( true , <int> ) ; } public void testTwoReplicas ( ) throws Exception { searchWhileCreatingIndex ( true , <int> ) ; } private void searchWhileCreatingIndex ( boolean createIndex , int numberOfReplicas ) throws Exception { int shardsNo = numberOfReplicas + <int> ; int neededNodes = shardsNo < = <int> ? <int> : shardsNo / <int> + <int> ; internalCluster ( ) . ensureAtLeastNumDataNodes ( randomIntBetween ( neededNodes , shardsNo ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { logger . info ( <str> , i ) ; if ( createIndex ) { createIndex ( <str> ) ; } client ( ) . prepareIndex ( <str> , <str> , randomAsciiOfLength ( <int> ) ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; RefreshResponse refreshResponse = client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( refreshResponse . getSuccessfulShards ( ) , greaterThanOrEqualTo ( <int> ) ) ; ClusterHealthStatus status = ClusterHealthStatus . RED ; while ( status ! = ClusterHealthStatus . GREEN ) { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setPreference ( <str> ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; String preference = randomAsciiOfLength ( <int> ) ; Client client = client ( ) ; searchResponse = client . prepareSearch ( <str> ) . setPreference ( preference ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; if ( searchResponse . getHits ( ) . getTotalHits ( ) ! = <int> ) { refresh ( ) ; SearchResponse searchResponseAfterRefresh = client . prepareSearch ( <str> ) . setPreference ( preference ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; logger . info ( <str> , searchResponseAfterRefresh . getHits ( ) . getTotalHits ( ) ) ; ensureGreen ( ) ; SearchResponse searchResponseAfterGreen = client . prepareSearch ( <str> ) . setPreference ( preference ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; logger . info ( <str> , searchResponseAfterGreen . getHits ( ) . getTotalHits ( ) ) ; assertHitCount ( searchResponse , <int> ) ; } assertHitCount ( searchResponse , <int> ) ; status = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> ) . get ( ) . getStatus ( ) ; internalCluster ( ) . ensureAtLeastNumDataNodes ( numberOfReplicas + <int> ) ; } cluster ( ) . wipeIndices ( <str> ) ; } } } 

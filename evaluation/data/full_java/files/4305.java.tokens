package org . eclipse . debug . internal . ui . sourcelookup ; import java . util . ArrayList ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . jface . viewers . ITreeContentProvider ; import org . eclipse . jface . viewers . Viewer ; public class BasicContainerContentProvider implements ITreeContentProvider { private boolean fShowClosedProjects = true ; public BasicContainerContentProvider ( ) { } @Override public void dispose ( ) { } @Override public Object [ ] getChildren ( Object element ) { if ( element instanceof IWorkspaceRoot ) { IProject [ ] allProjects = ( ( IWorkspaceRoot ) element ) . getProjects ( ) ; if ( fShowClosedProjects ) { return allProjects ; } ArrayList < IProject > accessibleProjects = new ArrayList < IProject > ( ) ; for ( int i = <int> ; i < allProjects . length ; i + + ) { if ( allProjects [ i ] . isOpen ( ) ) { accessibleProjects . add ( allProjects [ i ] ) ; } } return accessibleProjects . toArray ( ) ; } return new Object [ <int> ] ; } @Override public Object [ ] getElements ( Object element ) { return getChildren ( element ) ; } @Override public Object getParent ( Object element ) { if ( element instanceof IResource ) { return ( ( IResource ) element ) . getParent ( ) ; } return null ; } @Override public boolean hasChildren ( Object element ) { return getChildren ( element ) . length > <int> ; } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } } 

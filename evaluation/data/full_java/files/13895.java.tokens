package org . gradle . launcher . exec ; import org . gradle . api . internal . DocumentationRegistry ; import org . gradle . api . logging . LogLevel ; import org . gradle . initialization . BuildRequestContext ; import org . gradle . internal . invocation . BuildAction ; import org . gradle . internal . os . OperatingSystem ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . logging . StyledTextOutput ; import org . gradle . logging . StyledTextOutputFactory ; public class DaemonUsageSuggestingBuildActionExecuter implements BuildActionExecuter < BuildActionParameters > { public static final String PLEASE_USE_DAEMON_MESSAGE_PREFIX = <str> ; private final BuildActionExecuter < BuildActionParameters > executer ; private final StyledTextOutputFactory textOutputFactory ; private final DocumentationRegistry documentationRegistry ; private final OperatingSystem operatingSystem ; public DaemonUsageSuggestingBuildActionExecuter ( BuildActionExecuter < BuildActionParameters > executer , StyledTextOutputFactory textOutputFactory , DocumentationRegistry documentationRegistry ) { this ( executer , textOutputFactory , documentationRegistry , OperatingSystem . current ( ) ) ; } DaemonUsageSuggestingBuildActionExecuter ( BuildActionExecuter < BuildActionParameters > executer , StyledTextOutputFactory textOutputFactory , DocumentationRegistry documentationRegistry , OperatingSystem operatingSystem ) { this . executer = executer ; this . textOutputFactory = textOutputFactory ; this . documentationRegistry = documentationRegistry ; this . operatingSystem = operatingSystem ; } @Override public Object execute ( BuildAction action , BuildRequestContext requestContext , BuildActionParameters actionParameters , ServiceRegistry contextServices ) { Object result = executer . execute ( action , requestContext , actionParameters , contextServices ) ; possiblySuggestUsingDaemon ( actionParameters ) ; return result ; } private void possiblySuggestUsingDaemon ( BuildActionParameters actionParameters ) { if ( actionParameters . getDaemonUsage ( ) . isExplicitlySet ( ) | | operatingSystem . isWindows ( ) | | isCIEnvironment ( actionParameters ) ) { return ; } StyledTextOutput styledTextOutput = textOutputFactory . create ( DaemonUsageSuggestingBuildActionExecuter . class , LogLevel . LIFECYCLE ) ; styledTextOutput . println ( ) ; styledTextOutput . println ( PLEASE_USE_DAEMON_MESSAGE_PREFIX + documentationRegistry . getDocumentationFor ( <str> ) ) ; } private boolean isCIEnvironment ( BuildActionParameters actionParameters ) { return actionParameters . getEnvVariables ( ) . get ( <str> ) ! = null & & ! actionParameters . getEnvVariables ( ) . get ( <str> ) . equals ( <str> ) ; } } 

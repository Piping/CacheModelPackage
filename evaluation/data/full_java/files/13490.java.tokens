package org . gradle . api . internal . tasks . compile . incremental . deps ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . Encoder ; import org . gradle . internal . serialize . MapSerializer ; import org . gradle . internal . serialize . SetSerializer ; import java . util . Map ; import java . util . Set ; import static org . gradle . internal . serialize . BaseSerializerFactory . STRING_SERIALIZER ; public class ClassSetAnalysisData { final Map < String , DependentsSet > dependents ; public ClassSetAnalysisData ( Map < String , DependentsSet > dependents ) { this . dependents = dependents ; } public DependentsSet getDependents ( String className ) { return dependents . get ( className ) ; } public static class Serializer implements org . gradle . internal . serialize . Serializer < ClassSetAnalysisData > { private final MapSerializer < String , DependentsSet > serializer = new MapSerializer < String , DependentsSet > ( STRING_SERIALIZER , new DependentsSetSerializer ( ) ) ; public ClassSetAnalysisData read ( Decoder decoder ) throws Exception { return new ClassSetAnalysisData ( serializer . read ( decoder ) ) ; } public void write ( Encoder encoder , ClassSetAnalysisData value ) throws Exception { serializer . write ( encoder , value . dependents ) ; } private static class DependentsSetSerializer implements org . gradle . internal . serialize . Serializer < DependentsSet > { private SetSerializer < String > setSerializer = new SetSerializer < String > ( STRING_SERIALIZER , false ) ; public DependentsSet read ( Decoder decoder ) throws Exception { int control = decoder . readSmallInt ( ) ; if ( control = = <int> ) { return new DependencyToAll ( ) ; } if ( control ! = <int> & & control ! = <int> ) { throw new IllegalArgumentException ( <str> + control ) ; } Set < String > classes = setSerializer . read ( decoder ) ; return new DefaultDependentsSet ( control = = <int> , classes ) ; } public void write ( Encoder encoder , DependentsSet value ) throws Exception { if ( value instanceof DependencyToAll ) { encoder . writeSmallInt ( <int> ) ; } else if ( value instanceof DefaultDependentsSet ) { encoder . writeSmallInt ( value . isDependencyToAll ( ) ? <int> : <int> ) ; setSerializer . write ( encoder , value . getDependentClasses ( ) ) ; } else { throw new IllegalArgumentException ( <str> + value . getClass ( ) + <str> + value ) ; } } } } } 

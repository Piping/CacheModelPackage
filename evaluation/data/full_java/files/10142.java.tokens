package com . google . common . collect . testing ; import static com . google . common . collect . Lists . newArrayList ; import static com . google . common . collect . testing . IteratorFeature . MODIFIABLE ; import static java . util . Collections . emptyList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Lists ; import junit . framework . AssertionFailedError ; import junit . framework . TestCase ; import java . util . Iterator ; import java . util . List ; import java . util . NoSuchElementException ; @GwtCompatible @SuppressWarnings ( <str> ) public class IteratorTesterTest extends TestCase { public void testCanCatchDifferentLengthOfIteration ( ) { IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , newArrayList ( <int> , <int> , <int> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return Lists . newArrayList ( <int> , <int> , <int> , <int> ) . iterator ( ) ; } } ; assertFailure ( tester ) ; } public void testCanCatchDifferentContents ( ) { IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , newArrayList ( <int> , <int> , <int> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return Lists . newArrayList ( <int> , <int> , <int> ) . iterator ( ) ; } } ; assertFailure ( tester ) ; } public void testCanCatchDifferentRemoveBehaviour ( ) { IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , newArrayList ( <int> , <int> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return ImmutableList . of ( <int> , <int> ) . iterator ( ) ; } } ; assertFailure ( tester ) ; } public void testUnknownOrder ( ) { new IteratorTester < Integer > ( <int> , MODIFIABLE , newArrayList ( <int> , <int> ) , IteratorTester . KnownOrder . UNKNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return newArrayList ( <int> , <int> ) . iterator ( ) ; } } . test ( ) ; } public void testUnknownOrderUnrecognizedElement ( ) { IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , newArrayList ( <int> , <int> , <int> ) , IteratorTester . KnownOrder . UNKNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return newArrayList ( <int> , <int> , <int> ) . iterator ( ) ; } } ; assertFailure ( tester ) ; } static class IteratorWithSunJavaBug6529795 < T > implements Iterator < T > { Iterator < T > iterator ; boolean nextThrewException ; IteratorWithSunJavaBug6529795 ( Iterator < T > iterator ) { this . iterator = iterator ; } @Override public boolean hasNext ( ) { return iterator . hasNext ( ) ; } @Override public T next ( ) { try { return iterator . next ( ) ; } catch ( NoSuchElementException e ) { nextThrewException = true ; throw e ; } } @Override public void remove ( ) { if ( nextThrewException ) { throw new IllegalStateException ( ) ; } iterator . remove ( ) ; } } public void testCanCatchSunJavaBug6529795InTargetIterator ( ) { try { new IteratorTester < Integer > ( <int> , MODIFIABLE , newArrayList ( <int> , <int> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { Iterator < Integer > iterator = Lists . newArrayList ( <int> , <int> ) . iterator ( ) ; return new IteratorWithSunJavaBug6529795 < Integer > ( iterator ) ; } } . test ( ) ; } catch ( AssertionFailedError e ) { return ; } fail ( <str> ) ; } public void testCanWorkAroundSunJavaBug6529795InTargetIterator ( ) { IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , newArrayList ( <int> , <int> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { Iterator < Integer > iterator = Lists . newArrayList ( <int> , <int> ) . iterator ( ) ; return new IteratorWithSunJavaBug6529795 < Integer > ( iterator ) ; } } ; tester . ignoreSunJavaBug6529795 ( ) ; tester . test ( ) ; } private static final int STEPS = <int> ; static class TesterThatCountsCalls extends IteratorTester < Integer > { TesterThatCountsCalls ( ) { super ( STEPS , MODIFIABLE , newArrayList ( <int> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) ; } int numCallsToNewTargetIterator ; int numCallsToVerify ; @Override protected Iterator < Integer > newTargetIterator ( ) { numCallsToNewTargetIterator + + ; return Lists . newArrayList ( <int> ) . iterator ( ) ; } @Override protected void verify ( List < Integer > elements ) { numCallsToVerify + + ; super . verify ( elements ) ; } } public void testVerifyGetsCalled ( ) { TesterThatCountsCalls tester = new TesterThatCountsCalls ( ) ; tester . test ( ) ; assertEquals ( <str> , tester . numCallsToVerify , tester . numCallsToNewTargetIterator * STEPS ) ; } public void testVerifyCanThrowAssertionThatFailsTest ( ) { final String message = <str> ; IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , newArrayList ( <int> , <int> , <int> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return Lists . newArrayList ( <int> , <int> , <int> ) . iterator ( ) ; } @Override protected void verify ( List < Integer > elements ) { throw new AssertionFailedError ( message ) ; } } ; AssertionFailedError actual = null ; try { tester . test ( ) ; } catch ( AssertionFailedError e ) { actual = e ; } assertNotNull ( <str> , actual ) ; assertTrue ( <str> , actual . getCause ( ) . getMessage ( ) . contains ( message ) ) ; } public void testMissingException ( ) { List < Integer > emptyList = newArrayList ( ) ; IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , emptyList , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return new Iterator < Integer > ( ) { @Override public void remove ( ) { } @Override public Integer next ( ) { return null ; } @Override public boolean hasNext ( ) { return false ; } } ; } } ; assertFailure ( tester ) ; } public void testUnexpectedException ( ) { IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , newArrayList ( <int> ) , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return new ThrowingIterator < Integer > ( new IllegalStateException ( ) ) ; } } ; assertFailure ( tester ) ; } public void testSimilarException ( ) { List < Integer > emptyList = emptyList ( ) ; IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , emptyList , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return new Iterator < Integer > ( ) { @Override public void remove ( ) { throw new IllegalStateException ( ) { } ; } @Override public Integer next ( ) { throw new NoSuchElementException ( ) { } ; } @Override public boolean hasNext ( ) { return false ; } } ; } } ; tester . test ( ) ; } public void testMismatchedException ( ) { List < Integer > emptyList = emptyList ( ) ; IteratorTester < Integer > tester = new IteratorTester < Integer > ( <int> , MODIFIABLE , emptyList , IteratorTester . KnownOrder . KNOWN_ORDER ) { @Override protected Iterator < Integer > newTargetIterator ( ) { return new Iterator < Integer > ( ) { @Override public void remove ( ) { throw new IllegalArgumentException ( ) ; } @Override public Integer next ( ) { throw new UnsupportedOperationException ( ) ; } @Override public boolean hasNext ( ) { return false ; } } ; } } ; assertFailure ( tester ) ; } private static void assertFailure ( IteratorTester < ? > tester ) { try { tester . test ( ) ; fail ( ) ; } catch ( AssertionFailedError expected ) { } } private static final class ThrowingIterator < E > implements Iterator < E > { private final RuntimeException ex ; private ThrowingIterator ( RuntimeException ex ) { this . ex = ex ; } @Override public boolean hasNext ( ) { return true ; } @Override public E next ( ) { ex . fillInStackTrace ( ) ; throw ex ; } @Override public void remove ( ) { ex . fillInStackTrace ( ) ; throw ex ; } } } 

package com . google . common . collect ; import com . google . common . collect . ImmutableClassToInstanceMapTest . TestClassToInstanceMapGenerator ; import com . google . common . collect . testing . MapTestSuiteBuilder ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import com . google . common . collect . testing . testers . MapPutTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . lang . reflect . Method ; import java . util . Map ; import java . util . Map . Entry ; public class MutableClassToInstanceMapTest extends TestCase { public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( MutableClassToInstanceMapTest . class ) ; Method remapTest = null ; try { remapTest = MapPutTester . class . getMethod ( <str> ) ; } catch ( NoSuchMethodException e ) { throw new AssertionError ( ) ; } suite . addTest ( MapTestSuiteBuilder . using ( new TestClassToInstanceMapGenerator ( ) { @Override @SuppressWarnings ( <str> ) public Map < Class , Number > create ( Object . . . elements ) { MutableClassToInstanceMap < Number > map = MutableClassToInstanceMap . create ( ) ; for ( Object object : elements ) { Entry < Class , Number > entry = ( Entry < Class , Number > ) object ; map . putInstance ( entry . getKey ( ) , entry . getValue ( ) ) ; } return ( Map ) map ; } } ) . named ( <str> ) . withFeatures ( MapFeature . GENERAL_PURPOSE , MapFeature . RESTRICTS_KEYS , MapFeature . ALLOWS_NULL_VALUES , CollectionSize . ANY , CollectionFeature . SERIALIZABLE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , MapFeature . ALLOWS_ANY_NULL_QUERIES ) . suppressing ( remapTest ) . createTestSuite ( ) ) ; return suite ; } private ClassToInstanceMap < Number > map ; @Override protected void setUp ( ) throws Exception { map = MutableClassToInstanceMap . create ( ) ; } public void testConstraint ( ) { map . put ( Integer . class , new Integer ( <int> ) ) ; try { map . put ( Double . class , new Long ( <int> ) ) ; fail ( ) ; } catch ( ClassCastException expected ) { } } public void testPutAndGetInstance ( ) { assertNull ( map . putInstance ( Integer . class , new Integer ( <int> ) ) ) ; Integer oldValue = map . putInstance ( Integer . class , new Integer ( <int> ) ) ; assertEquals ( <int> , ( int ) oldValue ) ; Integer newValue = map . getInstance ( Integer . class ) ; assertEquals ( <int> , ( int ) newValue ) ; } public void testNull ( ) { try { map . put ( null , new Integer ( <int> ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } map . putInstance ( Integer . class , null ) ; assertNull ( map . get ( Integer . class ) ) ; assertNull ( map . getInstance ( Integer . class ) ) ; map . put ( Long . class , null ) ; assertNull ( map . get ( Long . class ) ) ; assertNull ( map . getInstance ( Long . class ) ) ; } public void testPrimitiveAndWrapper ( ) { assertNull ( map . getInstance ( int . class ) ) ; assertNull ( map . getInstance ( Integer . class ) ) ; assertNull ( map . putInstance ( int . class , <int> ) ) ; assertNull ( map . putInstance ( Integer . class , <int> ) ) ; assertEquals ( <int> , map . size ( ) ) ; assertEquals ( <int> , ( int ) map . getInstance ( int . class ) ) ; assertEquals ( <int> , ( int ) map . getInstance ( Integer . class ) ) ; assertEquals ( <int> , ( int ) map . putInstance ( int . class , null ) ) ; assertEquals ( <int> , ( int ) map . putInstance ( Integer . class , null ) ) ; assertNull ( map . getInstance ( int . class ) ) ; assertNull ( map . getInstance ( Integer . class ) ) ; assertEquals ( <int> , map . size ( ) ) ; } } 

package org . gradle . internal . resolve ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . ModuleVersionSelector ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . component . external . model . DefaultModuleComponentSelector ; import org . gradle . internal . exceptions . Contextual ; import org . gradle . internal . exceptions . DefaultMultiCauseException ; import java . util . * ; @Contextual public class ModuleVersionResolveException extends DefaultMultiCauseException { private final List < List < ModuleVersionIdentifier > > paths = new ArrayList < List < ModuleVersionIdentifier > > ( ) ; private final ComponentSelector selector ; public ModuleVersionResolveException ( ComponentSelector selector , String message ) { super ( message ) ; this . selector = selector ; } public ModuleVersionResolveException ( ComponentSelector selector , Throwable cause ) { this ( selector , format ( <str> , selector ) ) ; initCause ( cause ) ; } public ModuleVersionResolveException ( ComponentSelector selector , Iterable < ? extends Throwable > causes ) { this ( selector , format ( <str> , selector ) ) ; initCauses ( causes ) ; } public ModuleVersionResolveException ( ModuleVersionSelector selector , String message ) { this ( DefaultModuleComponentSelector . newSelector ( selector . getGroup ( ) , selector . getName ( ) , selector . getVersion ( ) ) , message ) ; } public ModuleVersionResolveException ( ModuleVersionIdentifier id , String message ) { this ( DefaultModuleComponentSelector . newSelector ( id . getGroup ( ) , id . getName ( ) , id . getVersion ( ) ) , message ) ; } public ModuleVersionResolveException ( ModuleComponentIdentifier id , String messageFormat ) { this ( DefaultModuleComponentSelector . newSelector ( id . getGroup ( ) , id . getModule ( ) , id . getVersion ( ) ) , messageFormat ) ; } public ModuleVersionResolveException ( ModuleComponentIdentifier id , Throwable cause ) { this ( DefaultModuleComponentSelector . newSelector ( id . getGroup ( ) , id . getModule ( ) , id . getVersion ( ) ) , Arrays . asList ( cause ) ) ; } public ModuleVersionResolveException ( ModuleComponentIdentifier id , Iterable < ? extends Throwable > causes ) { this ( DefaultModuleComponentSelector . newSelector ( id . getGroup ( ) , id . getModule ( ) , id . getVersion ( ) ) , causes ) ; } public ModuleVersionResolveException ( ModuleVersionSelector selector , Throwable cause ) { this ( DefaultModuleComponentSelector . newSelector ( selector . getGroup ( ) , selector . getName ( ) , selector . getVersion ( ) ) , cause ) ; } public ModuleVersionResolveException ( ModuleVersionSelector selector , Iterable < ? extends Throwable > causes ) { this ( DefaultModuleComponentSelector . newSelector ( selector . getGroup ( ) , selector . getName ( ) , selector . getVersion ( ) ) , causes ) ; } public ComponentSelector getSelector ( ) { return selector ; } protected static String format ( String messageFormat , ComponentSelector selector ) { return String . format ( messageFormat , selector . getDisplayName ( ) ) ; } public ModuleVersionResolveException withIncomingPaths ( Collection < ? extends List < ModuleVersionIdentifier > > paths ) { ModuleVersionResolveException copy = createCopy ( ) ; copy . paths . addAll ( paths ) ; copy . initCauses ( getCauses ( ) ) ; copy . setStackTrace ( getStackTrace ( ) ) ; return copy ; } @Override public String getMessage ( ) { if ( paths . isEmpty ( ) ) { return super . getMessage ( ) ; } Formatter formatter = new Formatter ( ) ; formatter . format ( <str> , super . getMessage ( ) ) ; for ( List < ModuleVersionIdentifier > path : paths ) { formatter . format ( <str> , toString ( path . get ( <int> ) ) ) ; for ( int i = <int> ; i < path . size ( ) ; i + + ) { formatter . format ( <str> , toString ( path . get ( i ) ) ) ; } } return formatter . toString ( ) ; } private String toString ( ModuleVersionIdentifier identifier ) { return identifier . toString ( ) ; } protected ModuleVersionResolveException createCopy ( ) { try { return getClass ( ) . getConstructor ( ComponentSelector . class , String . class ) . newInstance ( selector , getMessage ( ) ) ; } catch ( Exception e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } } 

package org . gradle . nativeplatform . toolchain . internal . msvcpp ; import net . rubygrapefruit . platform . MissingRegistryEntryException ; import net . rubygrapefruit . platform . WindowsRegistry ; import org . apache . commons . lang . StringUtils ; import org . gradle . internal . os . OperatingSystem ; import org . gradle . util . GFileUtils ; import org . gradle . util . TreeVisitor ; import org . gradle . util . VersionNumber ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class DefaultWindowsSdkLocator implements WindowsSdkLocator { private static final Logger LOGGER = LoggerFactory . getLogger ( DefaultWindowsSdkLocator . class ) ; private static final String REGISTRY_BASEPATHS [ ] = { <str> , <str> } ; private static final String REGISTRY_ROOTPATH_SDK = <str> ; private static final String REGISTRY_ROOTPATH_KIT = <str> ; private static final String REGISTRY_FOLDER = <str> ; private static final String REGISTRY_VERSION = <str> ; private static final String REGISTRY_NAME = <str> ; private static final String REGISTRY_KIT_8 = <str> ; private static final String REGISTRY_KIT_81 = <str> ; private static final String VERSION_KIT_8 = <str> ; private static final String VERSION_KIT_81 = <str> ; private static final String VERSION_USER = <str> ; private static final String NAME_USER = <str> ; private static final String NAME_KIT = <str> ; private static final String RESOURCE_PATHS [ ] = { <str> , <str> } ; private static final String KERNEL32_PATHS [ ] = { <str> , <str> , <str> } ; private static final String RESOURCE_FILENAME = <str> ; private static final String KERNEL32_FILENAME = <str> ; private final Map < File , WindowsSdk > foundSdks = new HashMap < File , WindowsSdk > ( ) ; private final OperatingSystem os ; private final WindowsRegistry windowsRegistry ; private WindowsSdk pathSdk ; private boolean initialised ; public DefaultWindowsSdkLocator ( OperatingSystem os , WindowsRegistry windowsRegistry ) { this . os = os ; this . windowsRegistry = windowsRegistry ; } public SearchResult locateWindowsSdks ( File candidate ) { if ( ! initialised ) { locateSdksInRegistry ( ) ; locateKitsInRegistry ( ) ; locateSdkInPath ( ) ; initialised = true ; } if ( candidate ! = null ) { return locateUserSpecifiedSdk ( candidate ) ; } return locateDefaultSdk ( ) ; } private void locateSdksInRegistry ( ) { for ( String baseKey : REGISTRY_BASEPATHS ) { locateSdksInRegistry ( baseKey ) ; } } private void locateSdksInRegistry ( String baseKey ) { try { List < String > subkeys = windowsRegistry . getSubkeys ( WindowsRegistry . Key . HKEY_LOCAL_MACHINE , baseKey + REGISTRY_ROOTPATH_SDK ) ; for ( String subkey : subkeys ) { try { String basePath = baseKey + REGISTRY_ROOTPATH_SDK + <str> + subkey ; File sdkDir = GFileUtils . canonicalise ( new File ( windowsRegistry . getStringValue ( WindowsRegistry . Key . HKEY_LOCAL_MACHINE , basePath , REGISTRY_FOLDER ) ) ) ; String version = formatVersion ( windowsRegistry . getStringValue ( WindowsRegistry . Key . HKEY_LOCAL_MACHINE , basePath , REGISTRY_VERSION ) ) ; String name = windowsRegistry . getStringValue ( WindowsRegistry . Key . HKEY_LOCAL_MACHINE , basePath , REGISTRY_NAME ) ; if ( isWindowsSdk ( sdkDir ) ) { LOGGER . debug ( <str> , version , sdkDir ) ; addSdk ( sdkDir , version , name ) ; } else { LOGGER . debug ( <str> , sdkDir ) ; } } catch ( MissingRegistryEntryException e ) { } } } catch ( MissingRegistryEntryException e ) { } } private void locateKitsInRegistry ( ) { for ( String baseKey : REGISTRY_BASEPATHS ) { locateKitsInRegistry ( baseKey ) ; } } private void locateKitsInRegistry ( String baseKey ) { String [ ] versions = { VERSION_KIT_8 , VERSION_KIT_81 } ; String [ ] keys = { REGISTRY_KIT_8 , REGISTRY_KIT_81 } ; for ( int i = <int> ; i ! = keys . length ; + + i ) { try { File kitDir = GFileUtils . canonicalise ( new File ( windowsRegistry . getStringValue ( WindowsRegistry . Key . HKEY_LOCAL_MACHINE , baseKey + REGISTRY_ROOTPATH_KIT , keys [ i ] ) ) ) ; if ( isWindowsSdk ( kitDir ) ) { LOGGER . debug ( <str> , versions [ i ] , kitDir ) ; addSdk ( kitDir , versions [ i ] , NAME_KIT + <str> + versions [ i ] ) ; } else { LOGGER . debug ( <str> , kitDir ) ; } } catch ( MissingRegistryEntryException e ) { } } } private void locateSdkInPath ( ) { File resourceCompiler = os . findInPath ( RESOURCE_FILENAME ) ; if ( resourceCompiler = = null ) { LOGGER . debug ( <str> ) ; return ; } File sdkDir = GFileUtils . canonicalise ( resourceCompiler . getParentFile ( ) . getParentFile ( ) ) ; if ( ! isWindowsSdk ( sdkDir ) ) { sdkDir = sdkDir . getParentFile ( ) ; if ( ! isWindowsSdk ( sdkDir ) ) { LOGGER . debug ( <str> , resourceCompiler ) ; } } LOGGER . debug ( <str> , sdkDir ) ; if ( ! foundSdks . containsKey ( sdkDir ) ) { addSdk ( sdkDir , <str> , <str> ) ; } pathSdk = foundSdks . get ( sdkDir ) ; } private SearchResult locateUserSpecifiedSdk ( File candidate ) { File sdkDir = GFileUtils . canonicalise ( candidate ) ; if ( ! isWindowsSdk ( sdkDir ) ) { return new SdkNotFound ( String . format ( <str> , candidate ) ) ; } if ( ! foundSdks . containsKey ( sdkDir ) ) { addSdk ( sdkDir , VERSION_USER , NAME_USER ) ; } return new SdkFound ( foundSdks . get ( sdkDir ) ) ; } private SearchResult locateDefaultSdk ( ) { if ( pathSdk ! = null ) { return new SdkFound ( pathSdk ) ; } WindowsSdk candidate = null ; for ( WindowsSdk windowsSdk : foundSdks . values ( ) ) { if ( candidate = = null | | windowsSdk . getVersion ( ) . compareTo ( candidate . getVersion ( ) ) > <int> ) { candidate = windowsSdk ; } } return candidate = = null ? new SdkNotFound ( <str> ) : new SdkFound ( candidate ) ; } private void addSdk ( File path , String version , String name ) { foundSdks . put ( path , new WindowsSdk ( path , VersionNumber . parse ( version ) , name ) ) ; } private static boolean isWindowsSdk ( File candidate ) { boolean hasResourceCompiler = false ; boolean hasKernel32Lib = false ; for ( String path : RESOURCE_PATHS ) { if ( new File ( candidate , path + RESOURCE_FILENAME ) . isFile ( ) ) { hasResourceCompiler = true ; break ; } } for ( String path : KERNEL32_PATHS ) { if ( new File ( candidate , path + KERNEL32_FILENAME ) . isFile ( ) ) { hasKernel32Lib = true ; break ; } } return hasResourceCompiler & & hasKernel32Lib ; } private static String formatVersion ( String version ) { int index = StringUtils . ordinalIndexOf ( version , <str> , <int> ) ; if ( index ! = - <int> ) { version = version . substring ( <int> , index ) ; } return version ; } private static class SdkFound implements SearchResult { private final WindowsSdk sdk ; public SdkFound ( WindowsSdk sdk ) { this . sdk = sdk ; } public WindowsSdk getSdk ( ) { return sdk ; } public boolean isAvailable ( ) { return true ; } public void explain ( TreeVisitor < ? super String > visitor ) { } } private static class SdkNotFound implements SearchResult { private final String message ; private SdkNotFound ( String message ) { this . message = message ; } public WindowsSdk getSdk ( ) { return null ; } public boolean isAvailable ( ) { return false ; } public void explain ( TreeVisitor < ? super String > visitor ) { visitor . node ( message ) ; } } } 

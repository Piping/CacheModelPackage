package com . badlogic . gdx . tests . bullet ; import java . nio . ByteBuffer ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . loaders . ModelLoader ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . loader . G3dModelLoader ; import com . badlogic . gdx . graphics . g3d . model . Node ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . physics . bullet . collision . btCollisionShape ; import com . badlogic . gdx . physics . bullet . dynamics . btDynamicsWorld ; import com . badlogic . gdx . physics . bullet . dynamics . btRigidBody ; import com . badlogic . gdx . physics . bullet . extras . btBulletWorldImporter ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . BufferUtils ; import com . badlogic . gdx . utils . GdxRuntimeException ; import com . badlogic . gdx . utils . JsonReader ; public class ImportTest extends BaseBulletTest { btBulletWorldImporter importer ; Model model ; public class MyImporter extends btBulletWorldImporter { public MyImporter ( btDynamicsWorld world ) { super ( world ) ; } @Override public btRigidBody createRigidBody ( boolean isDynamic , float mass , Matrix4 startTransform , btCollisionShape shape , String bodyName ) { Vector3 localInertia = new Vector3 ( ) ; if ( mass > <float> ) shape . calculateLocalInertia ( mass , localInertia ) ; btRigidBody result = new btRigidBody ( mass , null , shape , localInertia ) ; String nodeName = bodyName . split ( <str> , <int> ) [ <int> ] + <str> ; ModelInstance instance = new ModelInstance ( model , nodeName , true , true ) ; instance . transform . set ( startTransform ) ; BulletEntity entity = new BulletEntity ( instance , result ) ; ImportTest . this . world . add ( entity ) ; return result ; } } @Override public void create ( ) { super . create ( ) ; ModelLoader g3djLoader = new G3dModelLoader ( new JsonReader ( ) ) ; model = g3djLoader . loadModel ( Gdx . files . internal ( <str> ) ) ; disposables . add ( model ) ; importer = new MyImporter ( ( btDynamicsWorld ) world . collisionWorld ) ; importer . loadFile ( Gdx . files . internal ( <str> ) ) ; camera . position . set ( <int> f , <int> f , <int> f ) ; camera . up . set ( <int> , <int> , <int> ) ; camera . lookAt ( - <int> , <int> , <int> ) ; camera . update ( ) ; } @Override public boolean tap ( float x , float y , int count , int button ) { shoot ( x , y ) ; return true ; } @Override public void dispose ( ) { super . dispose ( ) ; importer . deleteAllData ( ) ; importer . dispose ( ) ; importer = null ; } } 

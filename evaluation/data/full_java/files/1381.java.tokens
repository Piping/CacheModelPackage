package org . apache . cassandra . cql3 . validation . entities ; import java . util . Date ; import java . util . UUID ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . exceptions . SyntaxException ; import org . apache . cassandra . utils . UUIDGen ; import static org . junit . Assert . assertEquals ; public class TimeuuidTest extends CQLTester { @Test public void testTimeuuid ( ) throws Throwable { createTable ( <str> ) ; assertInvalidThrow ( SyntaxException . class , <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) execute ( <str> ) ; Object [ ] [ ] rows = getRows ( execute ( <str> ) ) ; assertEquals ( <int> , rows . length ) ; assertRowCount ( execute ( <str> , rows [ <int> ] [ <int> ] ) , <int> ) ; assertEmpty ( execute ( <str> , rows [ <int> ] [ <int> ] ) ) ; assertRowCount ( execute ( <str> , rows [ <int> ] [ <int> ] , rows [ <int> ] [ <int> ] ) , <int> ) ; assertRowCount ( execute ( <str> , rows [ <int> ] [ <int> ] ) , <int> ) ; assertInvalid ( <str> , rows [ <int> ] [ <int> ] ) ; for ( int i = <int> ; i < <int> ; i + + ) { long timestamp = UUIDGen . unixTimestamp ( ( UUID ) rows [ i ] [ <int> ] ) ; assertRows ( execute ( <str> , rows [ i ] [ <int> ] ) , row ( new Date ( timestamp ) , timestamp ) ) ; } assertEmpty ( execute ( <str> ) ) ; } @Test public void testDescClusteringOnTimeuuid ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; } } 

package org . eclipse . debug . internal . ui . sourcelookup ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . debug . internal . ui . views . launch . DebugElementAdapterFactory ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . contexts . DebugContextEvent ; import org . eclipse . debug . ui . contexts . IDebugContextListener ; import org . eclipse . debug . ui . contexts . IDebugContextService ; import org . eclipse . debug . ui . sourcelookup . ISourceDisplay ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchWindow ; public class SourceLookupService implements IDebugContextListener , ISourceDisplay { private IWorkbenchWindow fWindow ; private IDebugContextService fDebugContextService ; public SourceLookupService ( IWorkbenchWindow window ) { fWindow = window ; fDebugContextService = DebugUITools . getDebugContextManager ( ) . getContextService ( window ) ; fDebugContextService . addDebugContextListener ( this ) ; } public void dispose ( ) { fDebugContextService . removeDebugContextListener ( this ) ; fWindow = null ; } @Override public synchronized void debugContextChanged ( DebugContextEvent event ) { if ( ( event . getFlags ( ) & DebugContextEvent . ACTIVATED ) > <int> ) { displaySource ( event . getContext ( ) , event . getDebugContextProvider ( ) . getPart ( ) , false ) ; } } protected synchronized void displaySource ( ISelection selection , IWorkbenchPart part , boolean force ) { if ( fWindow = = null ) return ; if ( selection instanceof IStructuredSelection ) { IStructuredSelection structuredSelection = ( IStructuredSelection ) selection ; if ( structuredSelection . size ( ) = = <int> ) { Object context = ( structuredSelection ) . getFirstElement ( ) ; IWorkbenchPage page = null ; if ( part = = null ) { page = fWindow . getActivePage ( ) ; } else { page = part . getSite ( ) . getPage ( ) ; } displaySource ( context , page , force ) ; } } } @Override public void displaySource ( Object context , IWorkbenchPage page , boolean forceSourceLookup ) { if ( context instanceof IAdaptable ) { IAdaptable adaptable = ( IAdaptable ) context ; ISourceDisplay adapter = adaptable . getAdapter ( ISourceDisplay . class ) ; if ( adapter = = null & & ! ( context instanceof PlatformObject ) ) { adapter = new DebugElementAdapterFactory ( ) . getAdapter ( context , ISourceDisplay . class ) ; } if ( adapter ! = null ) { adapter . displaySource ( context , page , forceSourceLookup ) ; } } } } 

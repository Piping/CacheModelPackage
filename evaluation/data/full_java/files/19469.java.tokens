package io . netty . handler . codec . mqtt ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufHolder ; import io . netty . util . IllegalReferenceCountException ; public class MqttPublishMessage extends MqttMessage implements ByteBufHolder { public MqttPublishMessage ( MqttFixedHeader mqttFixedHeader , MqttPublishVariableHeader variableHeader , ByteBuf payload ) { super ( mqttFixedHeader , variableHeader , payload ) ; } @Override public MqttPublishVariableHeader variableHeader ( ) { return ( MqttPublishVariableHeader ) super . variableHeader ( ) ; } @Override public ByteBuf payload ( ) { return content ( ) ; } @Override public ByteBuf content ( ) { final ByteBuf data = ( ByteBuf ) super . payload ( ) ; if ( data . refCnt ( ) < = <int> ) { throw new IllegalReferenceCountException ( data . refCnt ( ) ) ; } return data ; } @Override public MqttPublishMessage copy ( ) { return new MqttPublishMessage ( fixedHeader ( ) , variableHeader ( ) , content ( ) . copy ( ) ) ; } @Override public MqttPublishMessage duplicate ( ) { return new MqttPublishMessage ( fixedHeader ( ) , variableHeader ( ) , content ( ) . duplicate ( ) ) ; } @Override public int refCnt ( ) { return content ( ) . refCnt ( ) ; } @Override public MqttPublishMessage retain ( ) { content ( ) . retain ( ) ; return this ; } @Override public MqttPublishMessage retain ( int increment ) { content ( ) . retain ( increment ) ; return this ; } @Override public MqttPublishMessage touch ( ) { content ( ) . touch ( ) ; return this ; } @Override public MqttPublishMessage touch ( Object hint ) { content ( ) . touch ( hint ) ; return this ; } @Override public boolean release ( ) { return content ( ) . release ( ) ; } @Override public boolean release ( int decrement ) { return content ( ) . release ( decrement ) ; } } 

package org . elasticsearch . common . util . concurrent ; import org . elasticsearch . common . lease . Releasable ; import org . elasticsearch . index . engine . EngineException ; import java . util . concurrent . locks . Lock ; public class ReleasableLock implements Releasable { private final Lock lock ; private final ThreadLocal < Boolean > holdingThreads ; public ReleasableLock ( Lock lock ) { this . lock = lock ; boolean useHoldingThreads = false ; assert ( useHoldingThreads = true ) ; if ( useHoldingThreads ) { holdingThreads = new ThreadLocal < > ( ) ; } else { holdingThreads = null ; } } @Override public void close ( ) { lock . unlock ( ) ; assert removeCurrentThread ( ) ; } public ReleasableLock acquire ( ) throws EngineException { lock . lock ( ) ; assert addCurrentThread ( ) ; return this ; } private boolean addCurrentThread ( ) { holdingThreads . set ( true ) ; return true ; } private boolean removeCurrentThread ( ) { holdingThreads . remove ( ) ; return true ; } public Boolean isHeldByCurrentThread ( ) { if ( holdingThreads = = null ) { throw new UnsupportedOperationException ( <str> ) ; } Boolean b = holdingThreads . get ( ) ; return b ! = null & & b . booleanValue ( ) ; } } 

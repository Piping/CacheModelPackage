package org . eclipse . debug . internal . ui . views . breakpoints ; import java . util . Comparator ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . ILineBreakpoint ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . breakpoints . provisional . IBreakpointContainer ; import org . eclipse . debug . internal . ui . breakpoints . provisional . OtherBreakpointCategory ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . views . DebugModelPresentationContext ; public class ElementComparator implements Comparator < Object > { final private static String SPACE = <str> ; protected DebugModelPresentationContext fContext ; public ElementComparator ( IPresentationContext context ) { if ( context instanceof DebugModelPresentationContext ) { fContext = ( DebugModelPresentationContext ) context ; } } @Override public int compare ( Object arg0 , Object arg1 ) { IBreakpoint bp0 = ( IBreakpoint ) DebugPlugin . getAdapter ( arg0 , IBreakpoint . class ) ; IBreakpoint bp1 = ( IBreakpoint ) DebugPlugin . getAdapter ( arg1 , IBreakpoint . class ) ; if ( bp0 ! = null & & bp1 ! = null ) { return doCompare ( bp0 , bp1 ) ; } else if ( arg0 instanceof IBreakpointContainer & & arg1 instanceof IBreakpointContainer ) { return doCompare ( ( IBreakpointContainer ) arg0 , ( IBreakpointContainer ) arg1 ) ; } else { return - <int> ; } } private int doCompare ( IBreakpointContainer c1 , IBreakpointContainer c2 ) { if ( c1 . getCategory ( ) instanceof OtherBreakpointCategory ) { if ( c2 . getCategory ( ) instanceof OtherBreakpointCategory ) { return <int> ; } return <int> ; } else if ( c2 . getCategory ( ) instanceof OtherBreakpointCategory ) { return - <int> ; } if ( fContext ! = null ) { String name1 = fContext . getModelPresentation ( ) . getText ( c1 ) ; String name2 = fContext . getModelPresentation ( ) . getText ( c2 ) ; return name1 . compareTo ( name2 ) ; } return - <int> ; } private int doCompare ( IBreakpoint b1 , IBreakpoint b2 ) { String text1 = IInternalDebugCoreConstants . EMPTY_STRING ; String text2 = IInternalDebugCoreConstants . EMPTY_STRING ; text1 + = b1 . getModelIdentifier ( ) ; text2 + = b2 . getModelIdentifier ( ) ; IMarker marker1 = b1 . getMarker ( ) ; IMarker marker2 = b2 . getMarker ( ) ; try { if ( marker1 . exists ( ) & & marker2 . exists ( ) ) { text1 + = SPACE + marker1 . getType ( ) ; text2 + = SPACE + marker2 . getType ( ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } int result = text1 . compareTo ( text2 ) ; if ( result ! = <int> ) { return result ; } if ( fContext ! = null ) { String name1 = fContext . getModelPresentation ( ) . getText ( b1 ) ; String name2 = fContext . getModelPresentation ( ) . getText ( b2 ) ; boolean lineBreakpoint = false ; try { lineBreakpoint = marker1 . isSubtypeOf ( IBreakpoint . LINE_BREAKPOINT_MARKER ) ; } catch ( CoreException ce ) { } if ( lineBreakpoint ) { return compareLineBreakpoints ( b1 , b2 , name1 , name2 ) ; } return name1 . compareTo ( name2 ) ; } return result ; } private int compareLineBreakpoints ( IBreakpoint b1 , IBreakpoint b2 , String name1 , String name2 ) { int colon1 = name1 . indexOf ( <str> ) ; if ( colon1 ! = - <int> ) { int colon2 = name2 . indexOf ( <str> ) ; if ( colon2 ! = - <int> ) { String upToColon1 = name1 . substring ( <int> , colon1 ) ; if ( name2 . startsWith ( upToColon1 ) ) { int l1 = <int> ; int l2 = <int> ; try { l1 = ( ( ILineBreakpoint ) b1 ) . getLineNumber ( ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } try { l2 = ( ( ILineBreakpoint ) b2 ) . getLineNumber ( ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } return l1 - l2 ; } } } return name1 . compareTo ( name2 ) ; } } 

package com . badlogic . gdx . tools . particleeditor ; import java . awt . * ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import java . io . File ; import java . io . FileWriter ; import java . io . Writer ; import java . net . URI ; import javax . swing . * ; import javax . swing . event . ListSelectionEvent ; import javax . swing . event . ListSelectionListener ; import javax . swing . event . TableModelEvent ; import javax . swing . event . TableModelListener ; import javax . swing . table . DefaultTableModel ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . g2d . ParticleEffect ; import com . badlogic . gdx . graphics . g2d . ParticleEmitter ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . StreamUtils ; class EffectPanel extends JPanel { ParticleEditor editor ; JTable emitterTable ; DefaultTableModel emitterTableModel ; int editIndex ; String lastDir ; public EffectPanel ( ParticleEditor editor ) { this . editor = editor ; initializeComponents ( ) ; } public ParticleEmitter newEmitter ( String name , boolean select ) { final ParticleEmitter emitter = new ParticleEmitter ( ) ; emitter . getDuration ( ) . setLow ( <int> ) ; emitter . getEmission ( ) . setHigh ( <int> ) ; emitter . getLife ( ) . setHigh ( <int> ) ; emitter . getScale ( ) . setHigh ( <int> , <int> ) ; emitter . getTint ( ) . setColors ( new float [ ] { <int> , <float> , <float> } ) ; emitter . getTransparency ( ) . setHigh ( <int> ) ; emitter . setMaxParticleCount ( <int> ) ; emitter . setImagePath ( ParticleEditor . DEFAULT_PARTICLE ) ; addEmitter ( name , select , emitter ) ; return emitter ; } public ParticleEmitter newExampleEmitter ( String name , boolean select ) { final ParticleEmitter emitter = new ParticleEmitter ( ) ; emitter . getDuration ( ) . setLow ( <int> ) ; emitter . getEmission ( ) . setHigh ( <int> ) ; emitter . getLife ( ) . setHigh ( <int> , <int> ) ; emitter . getLife ( ) . setTimeline ( new float [ ] { <int> , <float> , <int> } ) ; emitter . getLife ( ) . setScaling ( new float [ ] { <int> , <int> , <float> } ) ; emitter . getScale ( ) . setHigh ( <int> , <int> ) ; emitter . getRotation ( ) . setLow ( <int> , <int> ) ; emitter . getRotation ( ) . setHigh ( <int> , <int> ) ; emitter . getRotation ( ) . setTimeline ( new float [ ] { <int> , <int> } ) ; emitter . getRotation ( ) . setScaling ( new float [ ] { <int> , <int> } ) ; emitter . getRotation ( ) . setRelative ( true ) ; emitter . getAngle ( ) . setHigh ( <int> , <int> ) ; emitter . getAngle ( ) . setLow ( <int> ) ; emitter . getAngle ( ) . setTimeline ( new float [ ] { <int> , <float> , <int> } ) ; emitter . getAngle ( ) . setScaling ( new float [ ] { <int> , <int> , <int> } ) ; emitter . getAngle ( ) . setActive ( true ) ; emitter . getVelocity ( ) . setHigh ( <int> , <int> ) ; emitter . getVelocity ( ) . setActive ( true ) ; emitter . getTint ( ) . setColors ( new float [ ] { <int> , <float> , <float> } ) ; emitter . getTransparency ( ) . setHigh ( <int> , <int> ) ; emitter . getTransparency ( ) . setTimeline ( new float [ ] { <int> , <float> , <float> , <int> } ) ; emitter . getTransparency ( ) . setScaling ( new float [ ] { <int> , <int> , <float> , <int> } ) ; emitter . setMaxParticleCount ( <int> ) ; emitter . setImagePath ( ParticleEditor . DEFAULT_PARTICLE ) ; addEmitter ( name , select , emitter ) ; return emitter ; } private void addEmitter ( String name , boolean select , final ParticleEmitter emitter ) { Array < ParticleEmitter > emitters = editor . effect . getEmitters ( ) ; if ( emitters . size = = <int> ) emitter . setPosition ( editor . worldCamera . viewportWidth / <int> , editor . worldCamera . viewportHeight / <int> ) ; else { ParticleEmitter p = emitters . get ( <int> ) ; emitter . setPosition ( p . getX ( ) , p . getY ( ) ) ; } emitters . add ( emitter ) ; emitterTableModel . addRow ( new Object [ ] { name , true } ) ; if ( select ) { editor . reloadRows ( ) ; int row = emitterTableModel . getRowCount ( ) - <int> ; emitterTable . getSelectionModel ( ) . setSelectionInterval ( row , row ) ; } } void emitterSelected ( ) { int row = emitterTable . getSelectedRow ( ) ; if ( row = = - <int> ) { row = editIndex ; emitterTable . getSelectionModel ( ) . setSelectionInterval ( row , row ) ; } if ( row = = editIndex ) return ; editIndex = row ; editor . reloadRows ( ) ; } void openEffect ( boolean mergeIntoCurrent ) { FileDialog dialog = new FileDialog ( editor , <str> , FileDialog . LOAD ) ; if ( lastDir ! = null ) dialog . setDirectory ( lastDir ) ; dialog . setVisible ( true ) ; final String file = dialog . getFile ( ) ; final String dir = dialog . getDirectory ( ) ; if ( dir = = null | | file = = null | | file . trim ( ) . length ( ) = = <int> ) return ; lastDir = dir ; ParticleEffect effect = new ParticleEffect ( ) ; try { File effectFile = new File ( dir , file ) ; effect . loadEmitters ( Gdx . files . absolute ( effectFile . getAbsolutePath ( ) ) ) ; if ( mergeIntoCurrent ) { for ( ParticleEmitter emitter : effect . getEmitters ( ) ) { addEmitter ( emitter . getName ( ) , false , emitter ) ; } } else { editor . effect = effect ; editor . effectFile = effectFile ; } emitterTableModel . getDataVector ( ) . removeAllElements ( ) ; editor . particleData . clear ( ) ; } catch ( Exception ex ) { System . out . println ( <str> + new File ( dir , file ) . getAbsolutePath ( ) ) ; ex . printStackTrace ( ) ; JOptionPane . showMessageDialog ( editor , <str> ) ; return ; } for ( ParticleEmitter emitter : editor . effect . getEmitters ( ) ) { emitter . setPosition ( editor . worldCamera . viewportWidth / <int> , editor . worldCamera . viewportHeight / <int> ) ; emitterTableModel . addRow ( new Object [ ] { emitter . getName ( ) , true } ) ; } editIndex = <int> ; emitterTable . getSelectionModel ( ) . setSelectionInterval ( editIndex , editIndex ) ; editor . reloadRows ( ) ; } void saveEffect ( ) { FileDialog dialog = new FileDialog ( editor , <str> , FileDialog . SAVE ) ; if ( lastDir ! = null ) dialog . setDirectory ( lastDir ) ; dialog . setVisible ( true ) ; String file = dialog . getFile ( ) ; String dir = dialog . getDirectory ( ) ; if ( dir = = null | | file = = null | | file . trim ( ) . length ( ) = = <int> ) return ; lastDir = dir ; int index = <int> ; File effectFile = new File ( dir , file ) ; URI effectDirUri = effectFile . getParentFile ( ) . toURI ( ) ; for ( ParticleEmitter emitter : editor . effect . getEmitters ( ) ) { emitter . setName ( ( String ) emitterTableModel . getValueAt ( index + + , <int> ) ) ; String imagePath = emitter . getImagePath ( ) ; if ( ( imagePath . contains ( <str> ) | | imagePath . contains ( <str> ) ) & & ! imagePath . contains ( <str> ) ) { URI imageUri = new File ( emitter . getImagePath ( ) ) . toURI ( ) ; emitter . setImagePath ( effectDirUri . relativize ( imageUri ) . getPath ( ) ) ; } } File outputFile = new File ( dir , file ) ; Writer fileWriter = null ; try { fileWriter = new FileWriter ( outputFile ) ; editor . effect . save ( fileWriter ) ; } catch ( Exception ex ) { System . out . println ( <str> + outputFile . getAbsolutePath ( ) ) ; ex . printStackTrace ( ) ; JOptionPane . showMessageDialog ( editor , <str> ) ; } finally { StreamUtils . closeQuietly ( fileWriter ) ; } } void duplicateEmitter ( ) { int row = emitterTable . getSelectedRow ( ) ; if ( row = = - <int> ) return ; String name = ( String ) emitterTableModel . getValueAt ( row , <int> ) ; addEmitter ( name , true , new ParticleEmitter ( editor . effect . getEmitters ( ) . get ( row ) ) ) ; } void deleteEmitter ( ) { if ( editor . effect . getEmitters ( ) . size = = <int> ) return ; int row = emitterTable . getSelectedRow ( ) ; if ( row = = - <int> ) return ; if ( row < = editIndex ) { int oldEditIndex = editIndex ; editIndex = Math . max ( <int> , editIndex - <int> ) ; if ( oldEditIndex = = row ) editor . reloadRows ( ) ; } editor . effect . getEmitters ( ) . removeIndex ( row ) ; emitterTableModel . removeRow ( row ) ; emitterTable . getSelectionModel ( ) . setSelectionInterval ( editIndex , editIndex ) ; } void move ( int direction ) { if ( direction < <int> & & editIndex = = <int> ) return ; Array < ParticleEmitter > emitters = editor . effect . getEmitters ( ) ; if ( direction > <int> & & editIndex = = emitters . size - <int> ) return ; int insertIndex = editIndex + direction ; Object name = emitterTableModel . getValueAt ( editIndex , <int> ) ; emitterTableModel . removeRow ( editIndex ) ; ParticleEmitter emitter = emitters . removeIndex ( editIndex ) ; emitterTableModel . insertRow ( insertIndex , new Object [ ] { name } ) ; emitters . insert ( insertIndex , emitter ) ; editIndex = insertIndex ; emitterTable . getSelectionModel ( ) . setSelectionInterval ( editIndex , editIndex ) ; } void emitterChecked ( int index , boolean checked ) { editor . setEnabled ( editor . effect . getEmitters ( ) . get ( index ) , checked ) ; editor . effect . start ( ) ; } private void initializeComponents ( ) { setLayout ( new GridBagLayout ( ) ) ; { JPanel sideButtons = new JPanel ( new GridBagLayout ( ) ) ; add ( sideButtons , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { JButton newButton = new JButton ( <str> ) ; sideButtons . add ( newButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; newButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { newEmitter ( <str> , true ) ; } } ) ; } { JButton newButton = new JButton ( <str> ) ; sideButtons . add ( newButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; newButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { duplicateEmitter ( ) ; } } ) ; } { JButton deleteButton = new JButton ( <str> ) ; sideButtons . add ( deleteButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; deleteButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { deleteEmitter ( ) ; } } ) ; } { sideButtons . add ( new JSeparator ( JSeparator . HORIZONTAL ) , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } { JButton saveButton = new JButton ( <str> ) ; sideButtons . add ( saveButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; saveButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { saveEffect ( ) ; } } ) ; } { JButton openButton = new JButton ( <str> ) ; sideButtons . add ( openButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; openButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { openEffect ( false ) ; } } ) ; } { JButton mergeButton = new JButton ( <str> ) ; sideButtons . add ( mergeButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; mergeButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { openEffect ( true ) ; } } ) ; } { JButton upButton = new JButton ( <str> ) ; sideButtons . add ( upButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . SOUTH , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; upButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { move ( - <int> ) ; } } ) ; } { JButton downButton = new JButton ( <str> ) ; sideButtons . add ( downButton , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; downButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { move ( <int> ) ; } } ) ; } } { JScrollPane scroll = new JScrollPane ( ) ; add ( scroll , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { emitterTable = new JTable ( ) { public Class getColumnClass ( int column ) { return column = = <int> ? Boolean . class : super . getColumnClass ( column ) ; } } ; emitterTable . getTableHeader ( ) . setReorderingAllowed ( false ) ; emitterTable . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; scroll . setViewportView ( emitterTable ) ; emitterTableModel = new DefaultTableModel ( new String [ <int> ] [ <int> ] , new String [ ] { <str> , <str> } ) ; emitterTable . setModel ( emitterTableModel ) ; emitterTable . getSelectionModel ( ) . addListSelectionListener ( new ListSelectionListener ( ) { public void valueChanged ( ListSelectionEvent event ) { if ( event . getValueIsAdjusting ( ) ) return ; emitterSelected ( ) ; } } ) ; emitterTableModel . addTableModelListener ( new TableModelListener ( ) { public void tableChanged ( TableModelEvent event ) { if ( event . getColumn ( ) ! = <int> ) return ; emitterChecked ( event . getFirstRow ( ) , ( Boolean ) emitterTable . getValueAt ( event . getFirstRow ( ) , <int> ) ) ; } } ) ; } } } } 

package org . gradle . integtests . fixtures . jvm ; import org . gradle . api . JavaVersion ; import org . gradle . internal . nativeintegration . filesystem . FileCanonicalizer ; import java . io . File ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class UbuntuJvmLocator { private static final Pattern JAVA_HOME_DIR_PATTERN = Pattern . compile ( <str> ) ; private final FileCanonicalizer fileCanonicalizer ; private final File libDir ; public UbuntuJvmLocator ( FileCanonicalizer fileCanonicalizer ) { this ( new File ( <str> ) , fileCanonicalizer ) ; } UbuntuJvmLocator ( File libDir , FileCanonicalizer fileCanonicalizer ) { this . libDir = libDir ; this . fileCanonicalizer = fileCanonicalizer ; } public Collection < JvmInstallation > findJvms ( ) { List < JvmInstallation > jvms = new ArrayList < JvmInstallation > ( ) ; if ( libDir . isDirectory ( ) ) { for ( File javaHome : libDir . listFiles ( ) ) { Matcher matcher = JAVA_HOME_DIR_PATTERN . matcher ( javaHome . getName ( ) ) ; if ( ! matcher . matches ( ) ) { continue ; } if ( ! new File ( javaHome , <str> ) . isFile ( ) ) { continue ; } String version = matcher . group ( <int> ) ; String arch = matcher . group ( <int> ) ; boolean jdk = new File ( javaHome , <str> ) . isFile ( ) ; jvms . add ( new JvmInstallation ( JavaVersion . toVersion ( version ) , version , fileCanonicalizer . canonicalize ( javaHome ) , jdk , toArch ( arch ) ) ) ; } } return jvms ; } private JvmInstallation . Arch toArch ( String arch ) { if ( arch . equals ( <str> ) ) { return JvmInstallation . Arch . x86_64 ; } else if ( arch . equals ( <str> ) ) { return JvmInstallation . Arch . i386 ; } else { return JvmInstallation . Arch . Unknown ; } } } 

package org . gradle . launcher . daemon . client ; import org . gradle . api . Nullable ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . launcher . daemon . context . DaemonInstanceDetails ; import org . gradle . launcher . daemon . protocol . Message ; import org . gradle . messaging . remote . internal . Connection ; import org . gradle . messaging . remote . internal . MessageIOException ; import org . gradle . messaging . remote . internal . RemoteConnection ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; public class DaemonClientConnection implements Connection < Message > { private final static Logger LOG = Logging . getLogger ( DaemonClientConnection . class ) ; private final RemoteConnection < Message > connection ; private final DaemonInstanceDetails daemon ; private final StaleAddressDetector staleAddressDetector ; private boolean hasReceived ; private final Lock dispatchLock = new ReentrantLock ( ) ; public DaemonClientConnection ( RemoteConnection < Message > connection , DaemonInstanceDetails daemon , StaleAddressDetector staleAddressDetector ) { this . connection = connection ; this . daemon = daemon ; this . staleAddressDetector = staleAddressDetector ; } public void requestStop ( ) { LOG . debug ( <str> , Thread . currentThread ( ) . getId ( ) ) ; connection . requestStop ( ) ; } public DaemonInstanceDetails getDaemon ( ) { return daemon ; } public void dispatch ( Message message ) throws DaemonConnectionException { LOG . debug ( <str> , Thread . currentThread ( ) . getId ( ) , message . getClass ( ) ) ; try { dispatchLock . lock ( ) ; try { connection . dispatch ( message ) ; } finally { dispatchLock . unlock ( ) ; } } catch ( MessageIOException e ) { LOG . debug ( <str> ) ; if ( ! hasReceived & & staleAddressDetector . maybeStaleAddress ( e ) ) { throw new StaleDaemonAddressException ( <str> , e ) ; } throw new DaemonConnectionException ( <str> , e ) ; } } @Nullable public Message receive ( ) throws DaemonConnectionException { try { return connection . receive ( ) ; } catch ( MessageIOException e ) { LOG . debug ( <str> ) ; if ( ! hasReceived & & staleAddressDetector . maybeStaleAddress ( e ) ) { throw new StaleDaemonAddressException ( <str> , e ) ; } throw new DaemonConnectionException ( <str> , e ) ; } finally { hasReceived = true ; } } public void stop ( ) { LOG . debug ( <str> , Thread . currentThread ( ) . getId ( ) ) ; connection . stop ( ) ; } interface StaleAddressDetector { boolean maybeStaleAddress ( Exception failure ) ; } } 

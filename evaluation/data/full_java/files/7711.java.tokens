package org . elasticsearch ; import com . fasterxml . jackson . core . JsonLocation ; import com . fasterxml . jackson . core . JsonParseException ; import org . apache . lucene . util . Constants ; import org . elasticsearch . action . FailedNodeException ; import org . elasticsearch . action . RoutingMissingException ; import org . elasticsearch . action . TimestampParsingException ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . ShardSearchFailure ; import org . elasticsearch . client . AbstractClientHeadersTestCase ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . metadata . SnapshotId ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . routing . * ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . breaker . CircuitBreakingException ; import org . elasticsearch . common . io . PathUtils ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . NotSerializableExceptionWrapper ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . transport . LocalTransportAddress ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . util . CancellableThreadsTests ; import org . elasticsearch . common . util . set . Sets ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentLocation ; import org . elasticsearch . discovery . DiscoverySettings ; import org . elasticsearch . index . AlreadyExpiredException ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . engine . IndexFailedEngineException ; import org . elasticsearch . index . engine . RecoveryEngineException ; import org . elasticsearch . index . query . QueryShardException ; import org . elasticsearch . index . shard . IllegalIndexShardStateException ; import org . elasticsearch . index . shard . IndexShardState ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . shard . TranslogRecoveryPerformer ; import org . elasticsearch . indices . IndexTemplateAlreadyExistsException ; import org . elasticsearch . indices . IndexTemplateMissingException ; import org . elasticsearch . indices . InvalidIndexTemplateException ; import org . elasticsearch . indices . recovery . RecoverFilesRecoveryException ; import org . elasticsearch . percolator . PercolateException ; import org . elasticsearch . repositories . RepositoryException ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . rest . action . admin . indices . alias . delete . AliasesNotFoundException ; import org . elasticsearch . search . SearchContextMissingException ; import org . elasticsearch . search . SearchException ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . SearchShardTarget ; import org . elasticsearch . search . internal . SearchContext ; import org . elasticsearch . search . warmer . IndexWarmerMissingException ; import org . elasticsearch . snapshots . SnapshotException ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . TestSearchContext ; import org . elasticsearch . test . VersionUtils ; import org . elasticsearch . test . hamcrest . ElasticsearchAssertions ; import org . elasticsearch . transport . ActionNotFoundTransportException ; import org . elasticsearch . transport . ActionTransportException ; import org . elasticsearch . transport . ConnectTransportException ; import java . io . IOException ; import java . lang . reflect . Modifier ; import java . net . URISyntaxException ; import java . nio . file . FileVisitResult ; import java . nio . file . FileVisitor ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . attribute . BasicFileAttributes ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; import static java . util . Collections . singleton ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; public class ExceptionSerializationTests extends ESTestCase { public void testExceptionRegistration ( ) throws ClassNotFoundException , IOException , URISyntaxException { final Set < Class > notRegistered = new HashSet < > ( ) ; final Set < Class > hasDedicatedWrite = new HashSet < > ( ) ; final Set < Class > registered = new HashSet < > ( ) ; final String path = <str> ; final Path startPath = PathUtils . get ( ElasticsearchException . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) . resolve ( <str> ) . resolve ( <str> ) ; final Set < ? extends Class > ignore = Sets . newHashSet ( org . elasticsearch . test . rest . parser . RestTestParseException . class , org . elasticsearch . test . rest . client . RestException . class , CancellableThreadsTests . CustomException . class , org . elasticsearch . rest . BytesRestResponseTests . WithHeadersException . class , AbstractClientHeadersTestCase . InternalException . class ) ; FileVisitor < Path > visitor = new FileVisitor < Path > ( ) { private Path pkgPrefix = PathUtils . get ( path ) . getParent ( ) ; @Override public FileVisitResult preVisitDirectory ( Path dir , BasicFileAttributes attrs ) throws IOException { Path next = pkgPrefix . resolve ( dir . getFileName ( ) ) ; if ( ignore . contains ( next ) ) { return FileVisitResult . SKIP_SUBTREE ; } pkgPrefix = next ; return FileVisitResult . CONTINUE ; } @Override public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { try { String filename = file . getFileName ( ) . toString ( ) ; if ( filename . endsWith ( <str> ) ) { Class < ? > clazz = loadClass ( filename ) ; if ( ignore . contains ( clazz ) = = false ) { if ( Modifier . isAbstract ( clazz . getModifiers ( ) ) = = false & & Modifier . isInterface ( clazz . getModifiers ( ) ) = = false & & isEsException ( clazz ) ) { if ( ElasticsearchException . isRegistered ( ( Class < ? extends Throwable > ) clazz ) = = false & & ElasticsearchException . class . equals ( clazz . getEnclosingClass ( ) ) = = false ) { notRegistered . add ( clazz ) ; } else if ( ElasticsearchException . isRegistered ( ( Class < ? extends Throwable > ) clazz ) ) { registered . add ( clazz ) ; try { if ( clazz . getMethod ( <str> , StreamOutput . class ) ! = null ) { hasDedicatedWrite . add ( clazz ) ; } } catch ( Exception e ) { } } } } } } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e ) ; } return FileVisitResult . CONTINUE ; } private boolean isEsException ( Class < ? > clazz ) { return ElasticsearchException . class . isAssignableFrom ( clazz ) ; } private Class < ? > loadClass ( String filename ) throws ClassNotFoundException { StringBuilder pkg = new StringBuilder ( ) ; for ( Path p : pkgPrefix ) { pkg . append ( p . getFileName ( ) . toString ( ) ) . append ( <str> ) ; } pkg . append ( filename . substring ( <int> , filename . length ( ) - <int> ) ) ; return getClass ( ) . getClassLoader ( ) . loadClass ( pkg . toString ( ) ) ; } @Override public FileVisitResult visitFileFailed ( Path file , IOException exc ) throws IOException { throw exc ; } @Override public FileVisitResult postVisitDirectory ( Path dir , IOException exc ) throws IOException { pkgPrefix = pkgPrefix . getParent ( ) ; return FileVisitResult . CONTINUE ; } } ; Files . walkFileTree ( startPath , visitor ) ; final Path testStartPath = PathUtils . get ( ExceptionSerializationTests . class . getResource ( path ) . toURI ( ) ) ; Files . walkFileTree ( testStartPath , visitor ) ; assertTrue ( notRegistered . remove ( TestException . class ) ) ; assertTrue ( notRegistered . remove ( UnknownHeaderException . class ) ) ; assertTrue ( <str> + notRegistered . toString ( ) , notRegistered . isEmpty ( ) ) ; assertTrue ( registered . removeAll ( ElasticsearchException . getRegisteredKeys ( ) ) ) ; assertEquals ( registered . toString ( ) , <int> , registered . size ( ) ) ; } public static final class TestException extends ElasticsearchException { public TestException ( StreamInput in ) throws IOException { super ( in ) ; } } private < T extends Throwable > T serialize ( T exception ) throws IOException { ElasticsearchAssertions . assertVersionSerializable ( VersionUtils . randomVersion ( random ( ) ) , exception ) ; BytesStreamOutput out = new BytesStreamOutput ( ) ; out . writeThrowable ( exception ) ; StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ; return in . readThrowable ( ) ; } public void testIllegalShardRoutingStateException ( ) throws IOException { final ShardRouting routing = TestShardRouting . newShardRouting ( <str> , <int> , <str> , <str> , false , ShardRoutingState . STARTED , <int> ) ; final String routingAsString = routing . toString ( ) ; IllegalShardRoutingStateException serialize = serialize ( new IllegalShardRoutingStateException ( routing , <str> , new NullPointerException ( ) ) ) ; assertNotNull ( serialize . shard ( ) ) ; assertEquals ( routing , serialize . shard ( ) ) ; assertEquals ( routingAsString + <str> , serialize . getMessage ( ) ) ; assertTrue ( serialize . getCause ( ) instanceof NullPointerException ) ; serialize = serialize ( new IllegalShardRoutingStateException ( routing , <str> , null ) ) ; assertNotNull ( serialize . shard ( ) ) ; assertEquals ( routing , serialize . shard ( ) ) ; assertEquals ( routingAsString + <str> , serialize . getMessage ( ) ) ; assertNull ( serialize . getCause ( ) ) ; } public void testParsingException ( ) throws IOException { ParsingException ex = serialize ( new ParsingException ( <int> , <int> , <str> , null ) ) ; assertNull ( ex . getIndex ( ) ) ; assertEquals ( ex . getMessage ( ) , <str> ) ; assertEquals ( ex . getLineNumber ( ) , <int> ) ; assertEquals ( ex . getColumnNumber ( ) , <int> ) ; ex = serialize ( new ParsingException ( <int> , <int> , null , null ) ) ; assertNull ( ex . getIndex ( ) ) ; assertNull ( ex . getMessage ( ) ) ; assertEquals ( ex . getLineNumber ( ) , <int> ) ; assertEquals ( ex . getColumnNumber ( ) , <int> ) ; } public void testQueryShardException ( ) throws IOException { QueryShardException ex = serialize ( new QueryShardException ( new Index ( <str> ) , <str> , null ) ) ; assertEquals ( ex . getIndex ( ) , <str> ) ; assertEquals ( ex . getMessage ( ) , <str> ) ; ex = serialize ( new QueryShardException ( ( Index ) null , null , null ) ) ; assertNull ( ex . getIndex ( ) ) ; assertNull ( ex . getMessage ( ) ) ; } public void testSearchException ( ) throws IOException { SearchShardTarget target = new SearchShardTarget ( <str> , <str> , <int> ) ; SearchException ex = serialize ( new SearchException ( target , <str> ) ) ; assertEquals ( target , ex . shard ( ) ) ; assertEquals ( ex . getMessage ( ) , <str> ) ; ex = serialize ( new SearchException ( null , <str> , new NullPointerException ( ) ) ) ; assertNull ( ex . shard ( ) ) ; assertEquals ( ex . getMessage ( ) , <str> ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; } public void testAlreadyExpiredException ( ) throws IOException { AlreadyExpiredException alreadyExpiredException = serialize ( new AlreadyExpiredException ( <str> , <str> , <str> , <int> , <int> , <int> ) ) ; assertEquals ( <str> , alreadyExpiredException . getIndex ( ) ) ; assertEquals ( <str> , alreadyExpiredException . type ( ) ) ; assertEquals ( <str> , alreadyExpiredException . id ( ) ) ; assertEquals ( <int> , alreadyExpiredException . ttl ( ) ) ; assertEquals ( <int> , alreadyExpiredException . timestamp ( ) ) ; assertEquals ( <int> , alreadyExpiredException . now ( ) ) ; alreadyExpiredException = serialize ( new AlreadyExpiredException ( null , null , null , - <int> , - <int> , - <int> ) ) ; assertNull ( alreadyExpiredException . getIndex ( ) ) ; assertNull ( alreadyExpiredException . type ( ) ) ; assertNull ( alreadyExpiredException . id ( ) ) ; assertEquals ( - <int> , alreadyExpiredException . ttl ( ) ) ; assertEquals ( - <int> , alreadyExpiredException . timestamp ( ) ) ; assertEquals ( - <int> , alreadyExpiredException . now ( ) ) ; } public void testActionNotFoundTransportException ( ) throws IOException { ActionNotFoundTransportException ex = serialize ( new ActionNotFoundTransportException ( <str> ) ) ; assertEquals ( <str> , ex . action ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; } public void testSnapshotException ( ) throws IOException { SnapshotException ex = serialize ( new SnapshotException ( new SnapshotId ( <str> , <str> ) , <str> , new NullPointerException ( ) ) ) ; assertEquals ( ex . snapshot ( ) , new SnapshotId ( <str> , <str> ) ) ; assertEquals ( ex . getMessage ( ) , <str> ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; ex = serialize ( new SnapshotException ( null , <str> , new NullPointerException ( ) ) ) ; assertEquals ( ex . snapshot ( ) , null ) ; assertEquals ( ex . getMessage ( ) , <str> ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; } public void testRecoverFilesRecoveryException ( ) throws IOException { ShardId id = new ShardId ( <str> , <int> ) ; ByteSizeValue bytes = new ByteSizeValue ( randomIntBetween ( <int> , <int> ) ) ; RecoverFilesRecoveryException ex = serialize ( new RecoverFilesRecoveryException ( id , <int> , bytes , null ) ) ; assertEquals ( ex . getShardId ( ) , id ) ; assertEquals ( ex . numberOfFiles ( ) , <int> ) ; assertEquals ( ex . totalFilesSize ( ) , bytes ) ; assertEquals ( ex . getMessage ( ) , <str> + bytes + <str> ) ; assertNull ( ex . getCause ( ) ) ; ex = serialize ( new RecoverFilesRecoveryException ( null , <int> , bytes , new NullPointerException ( ) ) ) ; assertNull ( ex . getShardId ( ) ) ; assertEquals ( ex . numberOfFiles ( ) , <int> ) ; assertEquals ( ex . totalFilesSize ( ) , bytes ) ; assertEquals ( ex . getMessage ( ) , <str> + bytes + <str> ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; } public void testIndexTemplateAlreadyExistsException ( ) throws IOException { IndexTemplateAlreadyExistsException ex = serialize ( new IndexTemplateAlreadyExistsException ( <str> ) ) ; assertEquals ( <str> , ex . name ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; ex = serialize ( new IndexTemplateAlreadyExistsException ( ( String ) null ) ) ; assertNull ( ex . name ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; } public void testBatchOperationException ( ) throws IOException { ShardId id = new ShardId ( <str> , <int> ) ; TranslogRecoveryPerformer . BatchOperationException ex = serialize ( new TranslogRecoveryPerformer . BatchOperationException ( id , <str> , <int> , null ) ) ; assertEquals ( ex . getShardId ( ) , id ) ; assertEquals ( <int> , ex . completedOperations ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertNull ( ex . getCause ( ) ) ; ex = serialize ( new TranslogRecoveryPerformer . BatchOperationException ( null , <str> , - <int> , new NullPointerException ( ) ) ) ; assertNull ( ex . getShardId ( ) ) ; assertEquals ( - <int> , ex . completedOperations ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; } public void testInvalidIndexTemplateException ( ) throws IOException { InvalidIndexTemplateException ex = serialize ( new InvalidIndexTemplateException ( <str> , <str> ) ) ; assertEquals ( ex . getMessage ( ) , <str> ) ; assertEquals ( ex . name ( ) , <str> ) ; ex = serialize ( new InvalidIndexTemplateException ( null , <str> ) ) ; assertEquals ( ex . getMessage ( ) , <str> ) ; assertEquals ( ex . name ( ) , null ) ; } public void testActionTransportException ( ) throws IOException { ActionTransportException ex = serialize ( new ActionTransportException ( <str> , new LocalTransportAddress ( <str> ) , <str> , <str> , null ) ) ; assertEquals ( <str> , ex . action ( ) ) ; assertEquals ( new LocalTransportAddress ( <str> ) , ex . address ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; } public void testSearchContextMissingException ( ) throws IOException { long id = randomLong ( ) ; SearchContextMissingException ex = serialize ( new SearchContextMissingException ( id ) ) ; assertEquals ( id , ex . id ( ) ) ; } public void testPercolateException ( ) throws IOException { ShardId id = new ShardId ( <str> , <int> ) ; PercolateException ex = serialize ( new PercolateException ( id , <str> , null ) ) ; assertEquals ( id , ex . getShardId ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertNull ( ex . getCause ( ) ) ; ex = serialize ( new PercolateException ( id , <str> , new NullPointerException ( ) ) ) ; assertEquals ( id , ex . getShardId ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; } public void testRoutingValidationException ( ) throws IOException { RoutingTableValidation validation = new RoutingTableValidation ( ) ; validation . addIndexFailure ( <str> , <str> ) ; RoutingValidationException ex = serialize ( new RoutingValidationException ( validation ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( validation . toString ( ) , ex . validation ( ) . toString ( ) ) ; } public void testCircuitBreakingException ( ) throws IOException { CircuitBreakingException ex = serialize ( new CircuitBreakingException ( <str> , <int> , <int> ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( <int> , ex . getByteLimit ( ) ) ; assertEquals ( <int> , ex . getBytesWanted ( ) ) ; } public void testTimestampParsingException ( ) throws IOException { TimestampParsingException ex = serialize ( new TimestampParsingException ( <str> , null ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( <str> , ex . timestamp ( ) ) ; } public void testIndexFailedEngineException ( ) throws IOException { ShardId id = new ShardId ( <str> , <int> ) ; IndexFailedEngineException ex = serialize ( new IndexFailedEngineException ( id , <str> , <str> , null ) ) ; assertEquals ( ex . getShardId ( ) , new ShardId ( <str> , <int> ) ) ; assertEquals ( <str> , ex . type ( ) ) ; assertEquals ( <str> , ex . id ( ) ) ; assertNull ( ex . getCause ( ) ) ; ex = serialize ( new IndexFailedEngineException ( null , <str> , <str> , new NullPointerException ( ) ) ) ; assertNull ( ex . getShardId ( ) ) ; assertEquals ( <str> , ex . type ( ) ) ; assertEquals ( <str> , ex . id ( ) ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; } public void testAliasesMissingException ( ) throws IOException { AliasesNotFoundException ex = serialize ( new AliasesNotFoundException ( <str> , <str> , <str> ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( <str> , ex . getResourceType ( ) ) ; assertArrayEquals ( new String [ ] { <str> , <str> , <str> } , ex . getResourceId ( ) . toArray ( new String [ <int> ] ) ) ; } public void testSearchParseException ( ) throws IOException { SearchContext ctx = new TestSearchContext ( ) ; SearchParseException ex = serialize ( new SearchParseException ( ctx , <str> , new XContentLocation ( <int> , <int> ) ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( <int> , ex . getLineNumber ( ) ) ; assertEquals ( <int> , ex . getColumnNumber ( ) ) ; assertEquals ( ctx . shardTarget ( ) , ex . shard ( ) ) ; } public void testIllegalIndexShardStateException ( ) throws IOException { ShardId id = new ShardId ( <str> , <int> ) ; IndexShardState state = randomFrom ( IndexShardState . values ( ) ) ; IllegalIndexShardStateException ex = serialize ( new IllegalIndexShardStateException ( id , state , <str> ) ) ; assertEquals ( id , ex . getShardId ( ) ) ; assertEquals ( <str> + state . name ( ) + <str> , ex . getMessage ( ) ) ; assertEquals ( state , ex . currentState ( ) ) ; } public void testConnectTransportException ( ) throws IOException { DiscoveryNode node = new DiscoveryNode ( <str> , new LocalTransportAddress ( <str> ) , Version . CURRENT ) ; ConnectTransportException ex = serialize ( new ConnectTransportException ( node , <str> , <str> , null ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( node , ex . node ( ) ) ; assertEquals ( <str> , ex . action ( ) ) ; assertNull ( ex . getCause ( ) ) ; ex = serialize ( new ConnectTransportException ( node , <str> , <str> , new NullPointerException ( ) ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( node , ex . node ( ) ) ; assertEquals ( <str> , ex . action ( ) ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; } public void testSearchPhaseExecutionException ( ) throws IOException { ShardSearchFailure [ ] empty = new ShardSearchFailure [ <int> ] ; SearchPhaseExecutionException ex = serialize ( new SearchPhaseExecutionException ( <str> , <str> , new NullPointerException ( ) , empty ) ) ; assertEquals ( <str> , ex . getPhaseName ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; assertEquals ( empty . length , ex . shardFailures ( ) . length ) ; ShardSearchFailure [ ] one = new ShardSearchFailure [ ] { new ShardSearchFailure ( new IllegalArgumentException ( <str> ) ) } ; ex = serialize ( new SearchPhaseExecutionException ( <str> , <str> , new NullPointerException ( ) , one ) ) ; assertEquals ( <str> , ex . getPhaseName ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; assertEquals ( one . length , ex . shardFailures ( ) . length ) ; assertTrue ( ex . shardFailures ( ) [ <int> ] . getCause ( ) instanceof IllegalArgumentException ) ; } public void testRoutingMissingException ( ) throws IOException { RoutingMissingException ex = serialize ( new RoutingMissingException ( <str> , <str> , <str> ) ) ; assertEquals ( <str> , ex . getIndex ( ) ) ; assertEquals ( <str> , ex . getType ( ) ) ; assertEquals ( <str> , ex . getId ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; } public void testRepositoryException ( ) throws IOException { RepositoryException ex = serialize ( new RepositoryException ( <str> , <str> ) ) ; assertEquals ( <str> , ex . repository ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; ex = serialize ( new RepositoryException ( null , <str> ) ) ; assertNull ( ex . repository ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; } public void testIndexWarmerMissingException ( ) throws IOException { IndexWarmerMissingException ex = serialize ( new IndexWarmerMissingException ( <str> , <str> ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertArrayEquals ( new String [ ] { <str> , <str> } , ex . names ( ) ) ; } public void testIndexTemplateMissingException ( ) throws IOException { IndexTemplateMissingException ex = serialize ( new IndexTemplateMissingException ( <str> ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( <str> , ex . name ( ) ) ; ex = serialize ( new IndexTemplateMissingException ( ( String ) null ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertNull ( ex . name ( ) ) ; } public void testRecoveryEngineException ( ) throws IOException { ShardId id = new ShardId ( <str> , <int> ) ; RecoveryEngineException ex = serialize ( new RecoveryEngineException ( id , <int> , <str> , new NullPointerException ( ) ) ) ; assertEquals ( id , ex . getShardId ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( <int> , ex . phase ( ) ) ; ex = serialize ( new RecoveryEngineException ( null , - <int> , <str> , new NullPointerException ( ) ) ) ; assertNull ( ex . getShardId ( ) ) ; assertEquals ( - <int> , ex . phase ( ) ) ; assertTrue ( ex . getCause ( ) instanceof NullPointerException ) ; } public void testFailedNodeException ( ) throws IOException { FailedNodeException ex = serialize ( new FailedNodeException ( <str> , <str> , null ) ) ; assertEquals ( <str> , ex . nodeId ( ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; } public void testClusterBlockException ( ) throws IOException { ClusterBlockException ex = serialize ( new ClusterBlockException ( singleton ( DiscoverySettings . NO_MASTER_BLOCK_WRITES ) ) ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertTrue ( ex . blocks ( ) . contains ( DiscoverySettings . NO_MASTER_BLOCK_WRITES ) ) ; assertEquals ( <int> , ex . blocks ( ) . size ( ) ) ; } private String toXContent ( ToXContent x ) { try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; x . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; builder . endObject ( ) ; return builder . string ( ) ; } catch ( IOException e ) { return <str> + e . getMessage ( ) + <str> ; } } public void testNotSerializableExceptionWrapper ( ) throws IOException { NotSerializableExceptionWrapper ex = serialize ( new NotSerializableExceptionWrapper ( new NullPointerException ( ) ) ) ; assertEquals ( <str> , toXContent ( ex ) ) ; ex = serialize ( new NotSerializableExceptionWrapper ( new IllegalArgumentException ( <str> ) ) ) ; assertEquals ( <str> , toXContent ( ex ) ) ; Throwable [ ] unknowns = new Throwable [ ] { new JsonParseException ( <str> , new JsonLocation ( new Object ( ) , <int> , <int> , <int> , <int> ) ) , new ClassCastException ( <str> ) , new IOException ( <str> ) } ; for ( Throwable t : unknowns ) { if ( randomBoolean ( ) ) { t . addSuppressed ( new IOException ( <str> ) ) ; t . addSuppressed ( new NullPointerException ( ) ) ; } Throwable deserialized = serialize ( t ) ; assertTrue ( deserialized instanceof NotSerializableExceptionWrapper ) ; assertArrayEquals ( t . getStackTrace ( ) , deserialized . getStackTrace ( ) ) ; assertEquals ( t . getSuppressed ( ) . length , deserialized . getSuppressed ( ) . length ) ; if ( t . getSuppressed ( ) . length > <int> ) { assertTrue ( deserialized . getSuppressed ( ) [ <int> ] instanceof NotSerializableExceptionWrapper ) ; assertArrayEquals ( t . getSuppressed ( ) [ <int> ] . getStackTrace ( ) , deserialized . getSuppressed ( ) [ <int> ] . getStackTrace ( ) ) ; assertTrue ( deserialized . getSuppressed ( ) [ <int> ] instanceof NullPointerException ) ; } } } public void testWithRestHeadersException ( ) throws IOException { ElasticsearchException ex = new ElasticsearchException ( <str> ) ; ex . addHeader ( <str> , <str> , <str> ) ; ex = serialize ( ex ) ; assertEquals ( <str> , ex . getMessage ( ) ) ; assertEquals ( <int> , ex . getHeader ( <str> ) . size ( ) ) ; assertEquals ( <str> , ex . getHeader ( <str> ) . get ( <int> ) ) ; assertEquals ( <str> , ex . getHeader ( <str> ) . get ( <int> ) ) ; RestStatus status = randomFrom ( RestStatus . values ( ) ) ; UnknownHeaderException uhe = new UnknownHeaderException ( <str> , status ) ; uhe . addHeader ( <str> , <str> , <str> ) ; ElasticsearchException serialize = serialize ( ( ElasticsearchException ) uhe ) ; assertTrue ( serialize instanceof NotSerializableExceptionWrapper ) ; NotSerializableExceptionWrapper e = ( NotSerializableExceptionWrapper ) serialize ; assertEquals ( <str> , e . getMessage ( ) ) ; assertEquals ( <int> , e . getHeader ( <str> ) . size ( ) ) ; assertEquals ( <str> , e . getHeader ( <str> ) . get ( <int> ) ) ; assertEquals ( <str> , e . getHeader ( <str> ) . get ( <int> ) ) ; assertSame ( status , e . status ( ) ) ; } public static class UnknownHeaderException extends ElasticsearchException { private final RestStatus status ; public UnknownHeaderException ( String msg , RestStatus status ) { super ( msg ) ; this . status = status ; } @Override public RestStatus status ( ) { return status ; } } public void testElasticsearchSecurityException ( ) throws IOException { ElasticsearchSecurityException ex = new ElasticsearchSecurityException ( <str> , RestStatus . UNAUTHORIZED , <str> ) ; ElasticsearchSecurityException e = serialize ( ex ) ; assertEquals ( ex . status ( ) , e . status ( ) ) ; assertEquals ( RestStatus . UNAUTHORIZED , e . status ( ) ) ; } public void testInterruptedException ( ) throws IOException { InterruptedException orig = randomBoolean ( ) ? new InterruptedException ( <str> ) : new InterruptedException ( ) ; InterruptedException ex = serialize ( orig ) ; assertEquals ( orig . getMessage ( ) , ex . getMessage ( ) ) ; } public void testThatIdsArePositive ( ) { for ( ElasticsearchException . ElasticsearchExceptionHandle handle : ElasticsearchException . ElasticsearchExceptionHandle . values ( ) ) { assertThat ( <str> , handle . id , greaterThanOrEqualTo ( <int> ) ) ; } } public void testThatIdsAreUnique ( ) { Set < Integer > ids = new HashSet < > ( ) ; for ( ElasticsearchException . ElasticsearchExceptionHandle handle : ElasticsearchException . ElasticsearchExceptionHandle . values ( ) ) { assertTrue ( <str> , ids . add ( handle . id ) ) ; } } public void testIds ( ) { Map < Integer , Class < ? extends ElasticsearchException > > ids = new HashMap < > ( ) ; ids . put ( <int> , org . elasticsearch . index . snapshots . IndexShardSnapshotFailedException . class ) ; ids . put ( <int> , org . elasticsearch . search . dfs . DfsPhaseExecutionException . class ) ; ids . put ( <int> , org . elasticsearch . common . util . CancellableThreads . ExecutionCancelledException . class ) ; ids . put ( <int> , org . elasticsearch . discovery . MasterNotDiscoveredException . class ) ; ids . put ( <int> , org . elasticsearch . ElasticsearchSecurityException . class ) ; ids . put ( <int> , org . elasticsearch . index . snapshots . IndexShardRestoreException . class ) ; ids . put ( <int> , org . elasticsearch . indices . IndexClosedException . class ) ; ids . put ( <int> , org . elasticsearch . http . BindHttpException . class ) ; ids . put ( <int> , org . elasticsearch . action . search . ReduceSearchPhaseException . class ) ; ids . put ( <int> , org . elasticsearch . node . NodeClosedException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . SnapshotFailedEngineException . class ) ; ids . put ( <int> , org . elasticsearch . index . shard . ShardNotFoundException . class ) ; ids . put ( <int> , org . elasticsearch . transport . ConnectTransportException . class ) ; ids . put ( <int> , org . elasticsearch . transport . NotSerializableTransportException . class ) ; ids . put ( <int> , org . elasticsearch . transport . ResponseHandlerFailureTransportException . class ) ; ids . put ( <int> , org . elasticsearch . indices . IndexCreationException . class ) ; ids . put ( <int> , org . elasticsearch . index . IndexNotFoundException . class ) ; ids . put ( <int> , org . elasticsearch . cluster . routing . IllegalShardRoutingStateException . class ) ; ids . put ( <int> , org . elasticsearch . action . support . broadcast . BroadcastShardOperationFailedException . class ) ; ids . put ( <int> , org . elasticsearch . ResourceNotFoundException . class ) ; ids . put ( <int> , org . elasticsearch . transport . ActionTransportException . class ) ; ids . put ( <int> , org . elasticsearch . ElasticsearchGenerationException . class ) ; ids . put ( <int> , null ) ; ids . put ( <int> , org . elasticsearch . index . shard . IndexShardStartedException . class ) ; ids . put ( <int> , org . elasticsearch . search . SearchContextMissingException . class ) ; ids . put ( <int> , org . elasticsearch . script . ScriptException . class ) ; ids . put ( <int> , org . elasticsearch . index . shard . TranslogRecoveryPerformer . BatchOperationException . class ) ; ids . put ( <int> , org . elasticsearch . snapshots . SnapshotCreationException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . DeleteFailedEngineException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . DocumentMissingException . class ) ; ids . put ( <int> , org . elasticsearch . snapshots . SnapshotException . class ) ; ids . put ( <int> , org . elasticsearch . indices . InvalidAliasNameException . class ) ; ids . put ( <int> , org . elasticsearch . indices . InvalidIndexNameException . class ) ; ids . put ( <int> , org . elasticsearch . indices . IndexPrimaryShardNotAllocatedException . class ) ; ids . put ( <int> , org . elasticsearch . transport . TransportException . class ) ; ids . put ( <int> , org . elasticsearch . ElasticsearchParseException . class ) ; ids . put ( <int> , org . elasticsearch . search . SearchException . class ) ; ids . put ( <int> , org . elasticsearch . index . mapper . MapperException . class ) ; ids . put ( <int> , org . elasticsearch . indices . InvalidTypeNameException . class ) ; ids . put ( <int> , org . elasticsearch . snapshots . SnapshotRestoreException . class ) ; ids . put ( <int> , org . elasticsearch . common . ParsingException . class ) ; ids . put ( <int> , org . elasticsearch . index . shard . IndexShardClosedException . class ) ; ids . put ( <int> , org . elasticsearch . indices . recovery . RecoverFilesRecoveryException . class ) ; ids . put ( <int> , org . elasticsearch . index . translog . TruncatedTranslogException . class ) ; ids . put ( <int> , org . elasticsearch . indices . recovery . RecoveryFailedException . class ) ; ids . put ( <int> , org . elasticsearch . index . shard . IndexShardRelocatedException . class ) ; ids . put ( <int> , org . elasticsearch . transport . NodeShouldNotConnectException . class ) ; ids . put ( <int> , org . elasticsearch . indices . IndexTemplateAlreadyExistsException . class ) ; ids . put ( <int> , org . elasticsearch . index . translog . TranslogCorruptedException . class ) ; ids . put ( <int> , org . elasticsearch . cluster . block . ClusterBlockException . class ) ; ids . put ( <int> , org . elasticsearch . search . fetch . FetchPhaseExecutionException . class ) ; ids . put ( <int> , org . elasticsearch . index . IndexShardAlreadyExistsException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . VersionConflictEngineException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . EngineException . class ) ; ids . put ( <int> , null ) ; ids . put ( <int> , org . elasticsearch . action . NoSuchNodeException . class ) ; ids . put ( <int> , org . elasticsearch . common . settings . SettingsException . class ) ; ids . put ( <int> , org . elasticsearch . indices . IndexTemplateMissingException . class ) ; ids . put ( <int> , org . elasticsearch . transport . SendRequestTransportException . class ) ; ids . put ( <int> , org . elasticsearch . common . util . concurrent . EsRejectedExecutionException . class ) ; ids . put ( <int> , org . elasticsearch . common . lucene . Lucene . EarlyTerminationException . class ) ; ids . put ( <int> , org . elasticsearch . cluster . routing . RoutingValidationException . class ) ; ids . put ( <int> , org . elasticsearch . common . io . stream . NotSerializableExceptionWrapper . class ) ; ids . put ( <int> , org . elasticsearch . indices . AliasFilterParsingException . class ) ; ids . put ( <int> , null ) ; ids . put ( <int> , org . elasticsearch . gateway . GatewayException . class ) ; ids . put ( <int> , org . elasticsearch . index . shard . IndexShardNotRecoveringException . class ) ; ids . put ( <int> , org . elasticsearch . http . HttpException . class ) ; ids . put ( <int> , org . elasticsearch . ElasticsearchException . class ) ; ids . put ( <int> , org . elasticsearch . snapshots . SnapshotMissingException . class ) ; ids . put ( <int> , org . elasticsearch . action . PrimaryMissingActionException . class ) ; ids . put ( <int> , org . elasticsearch . action . FailedNodeException . class ) ; ids . put ( <int> , org . elasticsearch . search . SearchParseException . class ) ; ids . put ( <int> , org . elasticsearch . snapshots . ConcurrentSnapshotExecutionException . class ) ; ids . put ( <int> , org . elasticsearch . common . blobstore . BlobStoreException . class ) ; ids . put ( <int> , org . elasticsearch . cluster . IncompatibleClusterStateVersionException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . RecoveryEngineException . class ) ; ids . put ( <int> , org . elasticsearch . common . util . concurrent . UncategorizedExecutionException . class ) ; ids . put ( <int> , org . elasticsearch . action . TimestampParsingException . class ) ; ids . put ( <int> , org . elasticsearch . action . RoutingMissingException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . IndexFailedEngineException . class ) ; ids . put ( <int> , org . elasticsearch . index . snapshots . IndexShardRestoreFailedException . class ) ; ids . put ( <int> , org . elasticsearch . repositories . RepositoryException . class ) ; ids . put ( <int> , org . elasticsearch . transport . ReceiveTimeoutTransportException . class ) ; ids . put ( <int> , org . elasticsearch . transport . NodeDisconnectedException . class ) ; ids . put ( <int> , org . elasticsearch . index . AlreadyExpiredException . class ) ; ids . put ( <int> , org . elasticsearch . search . aggregations . AggregationExecutionException . class ) ; ids . put ( <int> , org . elasticsearch . indices . InvalidIndexTemplateException . class ) ; ids . put ( <int> , org . elasticsearch . percolator . PercolateException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . RefreshFailedEngineException . class ) ; ids . put ( <int> , org . elasticsearch . search . aggregations . AggregationInitializationException . class ) ; ids . put ( <int> , org . elasticsearch . indices . recovery . DelayRecoveryException . class ) ; ids . put ( <int> , org . elasticsearch . search . warmer . IndexWarmerMissingException . class ) ; ids . put ( <int> , org . elasticsearch . client . transport . NoNodeAvailableException . class ) ; ids . put ( <int> , null ) ; ids . put ( <int> , org . elasticsearch . snapshots . InvalidSnapshotNameException . class ) ; ids . put ( <int> , org . elasticsearch . index . shard . IllegalIndexShardStateException . class ) ; ids . put ( <int> , org . elasticsearch . index . snapshots . IndexShardSnapshotException . class ) ; ids . put ( <int> , org . elasticsearch . index . shard . IndexShardNotStartedException . class ) ; ids . put ( <int> , org . elasticsearch . action . search . SearchPhaseExecutionException . class ) ; ids . put ( <int> , org . elasticsearch . transport . ActionNotFoundTransportException . class ) ; ids . put ( <int> , org . elasticsearch . transport . TransportSerializationException . class ) ; ids . put ( <int> , org . elasticsearch . transport . RemoteTransportException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . EngineCreationFailureException . class ) ; ids . put ( <int> , org . elasticsearch . cluster . routing . RoutingException . class ) ; ids . put ( <int> , org . elasticsearch . index . shard . IndexShardRecoveryException . class ) ; ids . put ( <int> , org . elasticsearch . repositories . RepositoryMissingException . class ) ; ids . put ( <int> , org . elasticsearch . index . percolator . PercolatorException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . DocumentSourceMissingException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . FlushNotAllowedEngineException . class ) ; ids . put ( <int> , org . elasticsearch . common . settings . NoClassSettingsException . class ) ; ids . put ( <int> , org . elasticsearch . transport . BindTransportException . class ) ; ids . put ( <int> , org . elasticsearch . rest . action . admin . indices . alias . delete . AliasesNotFoundException . class ) ; ids . put ( <int> , org . elasticsearch . index . shard . IndexShardRecoveringException . class ) ; ids . put ( <int> , org . elasticsearch . index . translog . TranslogException . class ) ; ids . put ( <int> , org . elasticsearch . cluster . metadata . ProcessClusterEventTimeoutException . class ) ; ids . put ( <int> , org . elasticsearch . action . support . replication . TransportReplicationAction . RetryOnPrimaryException . class ) ; ids . put ( <int> , org . elasticsearch . ElasticsearchTimeoutException . class ) ; ids . put ( <int> , org . elasticsearch . search . query . QueryPhaseExecutionException . class ) ; ids . put ( <int> , org . elasticsearch . repositories . RepositoryVerificationException . class ) ; ids . put ( <int> , org . elasticsearch . search . aggregations . InvalidAggregationPathException . class ) ; ids . put ( <int> , null ) ; ids . put ( <int> , org . elasticsearch . indices . IndexAlreadyExistsException . class ) ; ids . put ( <int> , org . elasticsearch . script . Script . ScriptParseException . class ) ; ids . put ( <int> , org . elasticsearch . transport . netty . SizeHeaderFrameDecoder . HttpOnTransportException . class ) ; ids . put ( <int> , org . elasticsearch . index . mapper . MapperParsingException . class ) ; ids . put ( <int> , org . elasticsearch . search . SearchContextException . class ) ; ids . put ( <int> , org . elasticsearch . search . builder . SearchSourceBuilderException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . EngineClosedException . class ) ; ids . put ( <int> , org . elasticsearch . action . NoShardAvailableActionException . class ) ; ids . put ( <int> , org . elasticsearch . action . UnavailableShardsException . class ) ; ids . put ( <int> , org . elasticsearch . index . engine . FlushFailedEngineException . class ) ; ids . put ( <int> , org . elasticsearch . common . breaker . CircuitBreakingException . class ) ; ids . put ( <int> , org . elasticsearch . transport . NodeNotConnectedException . class ) ; ids . put ( <int> , org . elasticsearch . index . mapper . StrictDynamicMappingException . class ) ; ids . put ( <int> , org . elasticsearch . action . support . replication . TransportReplicationAction . RetryOnReplicaException . class ) ; ids . put ( <int> , org . elasticsearch . indices . TypeMissingException . class ) ; ids . put ( <int> , null ) ; ids . put ( <int> , null ) ; ids . put ( <int> , org . elasticsearch . discovery . Discovery . FailedToCommitClusterStateException . class ) ; ids . put ( <int> , org . elasticsearch . index . query . QueryShardException . class ) ; Map < Class < ? extends ElasticsearchException > , Integer > reverse = new HashMap < > ( ) ; for ( Map . Entry < Integer , Class < ? extends ElasticsearchException > > entry : ids . entrySet ( ) ) { if ( entry . getValue ( ) ! = null ) { reverse . put ( entry . getValue ( ) , entry . getKey ( ) ) ; } } for ( ElasticsearchException . ElasticsearchExceptionHandle handle : ElasticsearchException . ElasticsearchExceptionHandle . values ( ) ) { assertEquals ( ( int ) reverse . get ( handle . exceptionClass ) , handle . id ) ; } for ( Map . Entry < Integer , Class < ? extends ElasticsearchException > > entry : ids . entrySet ( ) ) { if ( entry . getValue ( ) ! = null ) { assertEquals ( ( int ) entry . getKey ( ) , ElasticsearchException . getId ( entry . getValue ( ) ) ) ; } } } } 

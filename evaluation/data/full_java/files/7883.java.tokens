package org . elasticsearch . cluster . settings ; import org . elasticsearch . action . admin . indices . settings . get . GetSettingsResponse ; import org . elasticsearch . common . inject . AbstractModule ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . inject . Module ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsFilter ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import java . util . Collection ; import java . util . Collections ; import static org . elasticsearch . test . ESIntegTestCase . Scope . SUITE ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; @ClusterScope ( scope = SUITE , numDataNodes = <int> ) public class SettingsFilteringIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( SettingsFilteringPlugin . class ) ; } public static class SettingsFilteringPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } @Override public Collection < Module > nodeModules ( ) { return Collections . < Module > singletonList ( new SettingsFilteringModule ( ) ) ; } } public static class SettingsFilteringModule extends AbstractModule { @Override protected void configure ( ) { bind ( SettingsFilteringService . class ) . asEagerSingleton ( ) ; } } public static class SettingsFilteringService { @Inject public SettingsFilteringService ( SettingsFilter settingsFilter ) { settingsFilter . addFilter ( <str> ) ; settingsFilter . addFilter ( <str> ) ; } } public void testSettingsFiltering ( ) { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ) . get ( ) ) ; GetSettingsResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetSettings ( <str> ) . get ( ) ; Settings settings = response . getIndexToSettings ( ) . get ( <str> ) ; assertThat ( settings . get ( <str> ) , nullValue ( ) ) ; assertThat ( settings . get ( <str> ) , nullValue ( ) ) ; assertThat ( settings . get ( <str> ) , nullValue ( ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; } } 

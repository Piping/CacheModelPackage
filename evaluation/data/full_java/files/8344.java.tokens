package org . elasticsearch . indices . memory . breaker ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . indices . breaker . HierarchyCircuitBreakerService ; import org . elasticsearch . search . sort . SortOrder ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . List ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . cardinality ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . SUITE , numDataNodes = <int> ) public class CircuitBreakerNoopIT extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . builder ( ) . put ( HierarchyCircuitBreakerService . FIELDDATA_CIRCUIT_BREAKER_TYPE_SETTING , <str> ) . put ( HierarchyCircuitBreakerService . FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING , <str> ) . put ( HierarchyCircuitBreakerService . REQUEST_CIRCUIT_BREAKER_TYPE_SETTING , <str> ) . put ( HierarchyCircuitBreakerService . REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING , <str> ) . build ( ) ; } public void testNoopRequestBreaker ( ) throws Exception { assertAcked ( prepareCreate ( <str> , <int> , settingsBuilder ( ) . put ( SETTING_NUMBER_OF_REPLICAS , between ( <int> , <int> ) ) ) ) ; Client client = client ( ) ; int docCount = scaledRandomIntBetween ( <int> , <int> ) ; List < IndexRequestBuilder > reqs = new ArrayList < > ( ) ; for ( long id = <int> ; id < docCount ; id + + ) { reqs . add ( client . prepareIndex ( <str> , <str> , Long . toString ( id ) ) . setSource ( <str> , id ) ) ; } indexRandom ( true , reqs ) ; client . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( cardinality ( <str> ) . field ( <str> ) ) . get ( ) ; } public void testNoopFielddataBreaker ( ) throws Exception { assertAcked ( prepareCreate ( <str> , <int> , settingsBuilder ( ) . put ( SETTING_NUMBER_OF_REPLICAS , between ( <int> , <int> ) ) ) ) ; Client client = client ( ) ; int docCount = scaledRandomIntBetween ( <int> , <int> ) ; List < IndexRequestBuilder > reqs = new ArrayList < > ( ) ; for ( long id = <int> ; id < docCount ; id + + ) { reqs . add ( client . prepareIndex ( <str> , <str> , Long . toString ( id ) ) . setSource ( <str> , id ) ) ; } indexRandom ( true , reqs ) ; client . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( <str> , SortOrder . DESC ) . get ( ) ; } } 

package com . badlogic . gdx . physics . box2d ; import com . badlogic . gdx . math . Vector2 ; public class ChainShape extends Shape { boolean isLooped = false ; public ChainShape ( ) { addr = newChainShape ( ) ; } private native long newChainShape ( ) ; ChainShape ( long addr ) { this . addr = addr ; } @Override public Type getType ( ) { return Type . Chain ; } public void createLoop ( float [ ] vertices ) { jniCreateLoop ( addr , vertices , vertices . length / <int> ) ; isLooped = true ; } public void createLoop ( Vector2 [ ] vertices ) { float [ ] verts = new float [ vertices . length * <int> ] ; for ( int i = <int> , j = <int> ; i < vertices . length * <int> ; i + = <int> , j + + ) { verts [ i ] = vertices [ j ] . x ; verts [ i + <int> ] = vertices [ j ] . y ; } jniCreateLoop ( addr , verts , verts . length / <int> ) ; isLooped = true ; } private native void jniCreateLoop ( long addr , float [ ] verts , int numVertices ) ; public void createChain ( float [ ] vertices ) { jniCreateChain ( addr , vertices , vertices . length / <int> ) ; isLooped = false ; } public void createChain ( Vector2 [ ] vertices ) { float [ ] verts = new float [ vertices . length * <int> ] ; for ( int i = <int> , j = <int> ; i < vertices . length * <int> ; i + = <int> , j + + ) { verts [ i ] = vertices [ j ] . x ; verts [ i + <int> ] = vertices [ j ] . y ; } createChain ( verts ) ; } private native void jniCreateChain ( long addr , float [ ] verts , int numVertices ) ; public void setPrevVertex ( Vector2 prevVertex ) { setPrevVertex ( prevVertex . x , prevVertex . y ) ; } public void setPrevVertex ( float prevVertexX , float prevVertexY ) { jniSetPrevVertex ( addr , prevVertexX , prevVertexY ) ; } private native void jniSetPrevVertex ( long addr , float x , float y ) ; public void setNextVertex ( Vector2 nextVertex ) { setNextVertex ( nextVertex . x , nextVertex . y ) ; } public void setNextVertex ( float nextVertexX , float nextVertexY ) { jniSetNextVertex ( addr , nextVertexX , nextVertexY ) ; } private native void jniSetNextVertex ( long addr , float x , float y ) ; public int getVertexCount ( ) { return jniGetVertexCount ( addr ) ; } private native int jniGetVertexCount ( long addr ) ; private static float [ ] verts = new float [ <int> ] ; public void getVertex ( int index , Vector2 vertex ) { jniGetVertex ( addr , index , verts ) ; vertex . x = verts [ <int> ] ; vertex . y = verts [ <int> ] ; } private native void jniGetVertex ( long addr , int index , float [ ] verts ) ; public boolean isLooped ( ) { return isLooped ; } } 

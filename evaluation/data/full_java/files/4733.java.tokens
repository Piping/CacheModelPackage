package org . eclipse . debug . ui . actions ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdapterManager ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . ISuspendResume ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . contexts . DebugContextEvent ; import org . eclipse . debug . ui . contexts . IDebugContextListener ; import org . eclipse . debug . ui . contexts . IDebugContextManager ; import org . eclipse . debug . ui . contexts . IDebugContextService ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ISelectionProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . widgets . Event ; import org . eclipse . ui . IActionDelegate2 ; import org . eclipse . ui . IEditorActionDelegate ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . IViewActionDelegate ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchPartSite ; import org . eclipse . ui . IWorkbenchWindow ; public class RunToLineActionDelegate implements IEditorActionDelegate , IActionDelegate2 , IViewActionDelegate { private IWorkbenchPart fActivePart = null ; private IRunToLineTarget fPartTarget = null ; private IAction fAction = null ; private DebugContextListener fContextListener = new DebugContextListener ( ) ; private ISuspendResume fTargetElement = null ; class DebugContextListener implements IDebugContextListener { protected void contextActivated ( ISelection selection ) { fTargetElement = null ; if ( selection instanceof IStructuredSelection ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; if ( ss . size ( ) = = <int> ) { fTargetElement = ( ISuspendResume ) DebugPlugin . getAdapter ( ss . getFirstElement ( ) , ISuspendResume . class ) ; } } update ( ) ; } @Override public void debugContextChanged ( DebugContextEvent event ) { contextActivated ( event . getContext ( ) ) ; } } @Override public void dispose ( ) { DebugUITools . getDebugContextManager ( ) . getContextService ( fActivePart . getSite ( ) . getWorkbenchWindow ( ) ) . removeDebugContextListener ( fContextListener ) ; fActivePart = null ; fPartTarget = null ; } @Override public void run ( IAction action ) { if ( fPartTarget ! = null & & fTargetElement ! = null ) { try { fPartTarget . runToLine ( fActivePart , fActivePart . getSite ( ) . getSelectionProvider ( ) . getSelection ( ) , fTargetElement ) ; } catch ( CoreException e ) { DebugUIPlugin . errorDialog ( fActivePart . getSite ( ) . getWorkbenchWindow ( ) . getShell ( ) , ActionMessages . RunToLineAction_0 , ActionMessages . RunToLineAction_1 , e . getStatus ( ) ) ; } } } @Override public void selectionChanged ( IAction action , ISelection selection ) { this . fAction = action ; update ( ) ; } public void update ( ) { if ( fAction = = null ) { return ; } Runnable r = new Runnable ( ) { @Override public void run ( ) { boolean enabled = false ; if ( fPartTarget ! = null & & fTargetElement ! = null ) { IWorkbenchPartSite site = fActivePart . getSite ( ) ; if ( site ! = null ) { ISelectionProvider selectionProvider = site . getSelectionProvider ( ) ; if ( selectionProvider ! = null ) { ISelection selection = selectionProvider . getSelection ( ) ; enabled = fTargetElement . isSuspended ( ) & & fPartTarget . canRunToLine ( fActivePart , selection , fTargetElement ) ; } } } fAction . setEnabled ( enabled ) ; } } ; DebugUIPlugin . getStandardDisplay ( ) . asyncExec ( r ) ; } @Override public void init ( IAction action ) { this . fAction = action ; if ( action ! = null ) { action . setText ( ActionMessages . RunToLineActionDelegate_4 ) ; action . setImageDescriptor ( DebugUITools . getImageDescriptor ( IInternalDebugUIConstants . IMG_LCL_RUN_TO_LINE ) ) ; action . setDisabledImageDescriptor ( DebugUITools . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_RUN_TO_LINE ) ) ; } } @Override public void runWithEvent ( IAction action , Event event ) { run ( action ) ; } @Override public void setActiveEditor ( IAction action , IEditorPart targetEditor ) { init ( action ) ; bindTo ( targetEditor ) ; } @Override public void init ( IViewPart view ) { bindTo ( view ) ; } private void bindTo ( IWorkbenchPart part ) { IDebugContextManager manager = DebugUITools . getDebugContextManager ( ) ; if ( fActivePart ! = null & & ! fActivePart . equals ( part ) ) { manager . getContextService ( fActivePart . getSite ( ) . getWorkbenchWindow ( ) ) . removeDebugContextListener ( fContextListener ) ; } fPartTarget = null ; fActivePart = part ; if ( part ! = null ) { IWorkbenchWindow workbenchWindow = part . getSite ( ) . getWorkbenchWindow ( ) ; IDebugContextService service = manager . getContextService ( workbenchWindow ) ; service . addDebugContextListener ( fContextListener ) ; fPartTarget = part . getAdapter ( IRunToLineTarget . class ) ; if ( fPartTarget = = null ) { IAdapterManager adapterManager = Platform . getAdapterManager ( ) ; if ( adapterManager . hasAdapter ( part , IRunToLineTarget . class . getName ( ) ) ) { fPartTarget = ( IRunToLineTarget ) adapterManager . loadAdapter ( part , IRunToLineTarget . class . getName ( ) ) ; } } ISelection activeContext = service . getActiveContext ( ) ; fContextListener . contextActivated ( activeContext ) ; } update ( ) ; } } 

package org . gradle . launcher . daemon . server . exec ; import org . apache . commons . io . IOUtils ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . UncheckedException ; import org . gradle . launcher . daemon . protocol . ForwardInput ; import org . gradle . launcher . daemon . server . api . DaemonCommandAction ; import org . gradle . launcher . daemon . server . api . DaemonCommandExecution ; import org . gradle . launcher . daemon . server . api . StdinHandler ; import org . gradle . util . StdinSwapper ; import java . io . IOException ; import java . io . PipedInputStream ; import java . io . PipedOutputStream ; import java . util . concurrent . Callable ; public class ForwardClientInput implements DaemonCommandAction { private static final Logger LOGGER = Logging . getLogger ( ForwardClientInput . class ) ; public void execute ( final DaemonCommandExecution execution ) { final PipedOutputStream inputSource = new PipedOutputStream ( ) ; final PipedInputStream replacementStdin ; try { replacementStdin = new PipedInputStream ( inputSource ) ; } catch ( IOException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } execution . getConnection ( ) . onStdin ( new StdinHandler ( ) { public void onInput ( ForwardInput input ) { LOGGER . debug ( <str> ) ; try { inputSource . write ( input . getBytes ( ) ) ; } catch ( IOException e ) { LOGGER . warn ( <str> , e ) ; } } public void onEndOfInput ( ) { LOGGER . info ( <str> ) ; try { inputSource . close ( ) ; } catch ( IOException e ) { LOGGER . warn ( <str> , e ) ; } finally { LOGGER . info ( <str> ) ; } } } ) ; try { try { new StdinSwapper ( ) . swap ( replacementStdin , new Callable < Void > ( ) { public Void call ( ) { execution . proceed ( ) ; return null ; } } ) ; } finally { execution . getConnection ( ) . onStdin ( null ) ; IOUtils . closeQuietly ( replacementStdin ) ; IOUtils . closeQuietly ( inputSource ) ; } } catch ( Exception e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } } 

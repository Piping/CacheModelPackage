package org . apache . cassandra . db . compaction ; import java . io . Serializable ; import java . util . HashMap ; import java . util . Map ; import java . util . UUID ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . metrics . StorageMetrics ; import org . apache . cassandra . service . StorageService ; public final class CompactionInfo implements Serializable { private static final long serialVersionUID = <int> ; private final CFMetaData cfm ; private final OperationType tasktype ; private final long completed ; private final long total ; private final String unit ; private final UUID compactionId ; public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long bytesComplete , long totalBytes , UUID compactionId ) { this ( cfm , tasktype , bytesComplete , totalBytes , <str> , compactionId ) ; } public CompactionInfo ( OperationType tasktype , long completed , long total , String unit , UUID compactionId ) { this ( null , tasktype , completed , total , unit , compactionId ) ; } public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long completed , long total , String unit , UUID compactionId ) { this . tasktype = tasktype ; this . completed = completed ; this . total = total ; this . cfm = cfm ; this . unit = unit ; this . compactionId = compactionId ; } public CompactionInfo forProgress ( long complete , long total ) { return new CompactionInfo ( cfm , tasktype , complete , total , unit , compactionId ) ; } public UUID getId ( ) { return cfm . cfId ; } public String getKeyspace ( ) { return cfm . ksName ; } public String getColumnFamily ( ) { return cfm . cfName ; } public CFMetaData getCFMetaData ( ) { return cfm ; } public long getCompleted ( ) { return completed ; } public long getTotal ( ) { return total ; } public OperationType getTaskType ( ) { return tasktype ; } public UUID compactionId ( ) { return compactionId ; } public String toString ( ) { StringBuilder buff = new StringBuilder ( ) ; buff . append ( getTaskType ( ) ) ; if ( cfm ! = null ) { buff . append ( <str> ) . append ( getId ( ) ) . append ( <str> ) ; buff . append ( getKeyspace ( ) ) . append ( <str> ) . append ( getColumnFamily ( ) ) . append ( <str> ) ; } else { buff . append ( <str> ) ; } buff . append ( getCompleted ( ) ) . append ( <str> ) . append ( getTotal ( ) ) ; return buff . append ( <str> ) . append ( unit ) . toString ( ) ; } public Map < String , String > asMap ( ) { Map < String , String > ret = new HashMap < String , String > ( ) ; ret . put ( <str> , getId ( ) = = null ? <str> : getId ( ) . toString ( ) ) ; ret . put ( <str> , getKeyspace ( ) ) ; ret . put ( <str> , getColumnFamily ( ) ) ; ret . put ( <str> , Long . toString ( completed ) ) ; ret . put ( <str> , Long . toString ( total ) ) ; ret . put ( <str> , tasktype . toString ( ) ) ; ret . put ( <str> , unit ) ; ret . put ( <str> , compactionId = = null ? <str> : compactionId . toString ( ) ) ; return ret ; } public static abstract class Holder { private volatile boolean stopRequested = false ; public abstract CompactionInfo getCompactionInfo ( ) ; double load = StorageMetrics . load . getCount ( ) ; double reportedSeverity = <float> ; public void stop ( ) { stopRequested = true ; } public boolean isStopRequested ( ) { return stopRequested ; } public void started ( ) { reportedSeverity = getCompactionInfo ( ) . getTotal ( ) / load ; StorageService . instance . reportSeverity ( reportedSeverity ) ; } public void finished ( ) { if ( reportedSeverity ! = <float> ) StorageService . instance . reportSeverity ( - ( reportedSeverity ) ) ; reportedSeverity = <float> ; } } } 

package org . apache . cassandra . utils ; import java . lang . management . ManagementFactory ; import java . util . Map ; import java . util . Set ; import javax . management . * ; import com . google . common . collect . Iterables ; import org . apache . cassandra . cache . * ; import org . apache . cassandra . concurrent . Stage ; import org . apache . cassandra . metrics . ThreadPoolMetrics ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutorMBean ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . RowIndexEntry ; import org . apache . cassandra . db . compaction . CompactionManager ; import org . apache . cassandra . net . MessagingService ; import org . apache . cassandra . service . CacheService ; public class StatusLogger { private static final Logger logger = LoggerFactory . getLogger ( StatusLogger . class ) ; public static void log ( ) { MBeanServer server = ManagementFactory . getPlatformMBeanServer ( ) ; logger . info ( String . format ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; for ( Map . Entry < String , String > tpool : ThreadPoolMetrics . getJmxThreadPools ( server ) . entries ( ) ) { logger . info ( String . format ( <str> , tpool . getValue ( ) , ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , <str> ) , ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , <str> ) , ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , <str> ) , ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , <str> ) , ThreadPoolMetrics . getJmxMetric ( server , tpool . getKey ( ) , tpool . getValue ( ) , <str> ) ) ) ; } logger . info ( String . format ( <str> , <str> , CompactionManager . instance . getActiveCompactions ( ) , CompactionManager . instance . getPendingTasks ( ) ) ) ; int pendingLargeMessages = <int> ; for ( int n : MessagingService . instance ( ) . getLargeMessagePendingTasks ( ) . values ( ) ) { pendingLargeMessages + = n ; } int pendingSmallMessages = <int> ; for ( int n : MessagingService . instance ( ) . getSmallMessagePendingTasks ( ) . values ( ) ) { pendingSmallMessages + = n ; } logger . info ( String . format ( <str> , <str> , <str> , pendingLargeMessages + <str> + pendingSmallMessages ) ) ; AutoSavingCache < KeyCacheKey , RowIndexEntry > keyCache = CacheService . instance . keyCache ; AutoSavingCache < RowCacheKey , IRowCacheEntry > rowCache = CacheService . instance . rowCache ; int keyCacheKeysToSave = DatabaseDescriptor . getKeyCacheKeysToSave ( ) ; int rowCacheKeysToSave = DatabaseDescriptor . getRowCacheKeysToSave ( ) ; logger . info ( String . format ( <str> , <str> , <str> , <str> , <str> ) ) ; logger . info ( String . format ( <str> , <str> , keyCache . weightedSize ( ) , keyCache . getCapacity ( ) , keyCacheKeysToSave = = Integer . MAX_VALUE ? <str> : keyCacheKeysToSave ) ) ; logger . info ( String . format ( <str> , <str> , rowCache . weightedSize ( ) , rowCache . getCapacity ( ) , rowCacheKeysToSave = = Integer . MAX_VALUE ? <str> : rowCacheKeysToSave ) ) ; logger . info ( String . format ( <str> , <str> , <str> ) ) ; for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) { logger . info ( String . format ( <str> , cfs . keyspace . getName ( ) + <str> + cfs . name , cfs . metric . memtableColumnsCount . getValue ( ) + <str> + cfs . metric . memtableLiveDataSize . getValue ( ) ) ) ; } } } 

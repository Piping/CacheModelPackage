package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION ; import static com . google . common . collect . testing . features . CollectionFeature . RESTRICTS_ELEMENTS ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ADD ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_REMOVE ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . Multiset ; import com . google . common . collect . Multiset . Entry ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . ConcurrentModificationException ; import java . util . Iterator ; import java . util . List ; @GwtCompatible ( emulated = true ) public abstract class AbstractMultisetSetCountTester < E > extends AbstractMultisetTester < E > { private void assertSetCount ( E element , int count ) { setCountCheckReturnValue ( element , count ) ; assertEquals ( <str> , count , getMultiset ( ) . count ( element ) ) ; int size = <int> ; for ( Multiset . Entry < E > entry : getMultiset ( ) . entrySet ( ) ) { size + = entry . getCount ( ) ; } assertEquals ( <str> , size , getMultiset ( ) . size ( ) ) ; } abstract void setCountCheckReturnValue ( E element , int count ) ; abstract void setCountNoCheckReturnValue ( E element , int count ) ; private void assertSetCountIncreasingFailure ( E element , int count ) { try { setCountNoCheckReturnValue ( element , count ) ; fail ( <str> + <str> ) ; } catch ( UnsupportedOperationException expected ) { } } private void assertSetCountDecreasingFailure ( E element , int count ) { try { setCountNoCheckReturnValue ( element , count ) ; fail ( <str> + <str> ) ; } catch ( UnsupportedOperationException expected ) { } } private void assertZeroToZero ( ) { assertSetCount ( e3 ( ) , <int> ) ; } private void assertOneToOne ( ) { assertSetCount ( e0 ( ) , <int> ) ; } private void assertThreeToThree ( ) { initThreeCopies ( ) ; assertSetCount ( e0 ( ) , <int> ) ; } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCount_zeroToZero_addSupported ( ) { assertZeroToZero ( ) ; } @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testSetCount_zeroToZero_removeSupported ( ) { assertZeroToZero ( ) ; } @CollectionFeature.Require ( absent = { SUPPORTS_ADD , SUPPORTS_REMOVE } ) public void testSetCount_zeroToZero_unsupported ( ) { try { assertZeroToZero ( ) ; } catch ( UnsupportedOperationException tolerated ) { } } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCount_oneToOne_addSupported ( ) { assertOneToOne ( ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testSetCount_oneToOne_removeSupported ( ) { assertOneToOne ( ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( absent = { SUPPORTS_ADD , SUPPORTS_REMOVE } ) public void testSetCount_oneToOne_unsupported ( ) { try { assertOneToOne ( ) ; } catch ( UnsupportedOperationException tolerated ) { } } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCount_threeToThree_addSupported ( ) { assertThreeToThree ( ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testSetCount_threeToThree_removeSupported ( ) { assertThreeToThree ( ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( absent = { SUPPORTS_ADD , SUPPORTS_REMOVE } ) public void testSetCount_threeToThree_unsupported ( ) { try { assertThreeToThree ( ) ; } catch ( UnsupportedOperationException tolerated ) { } } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCount_zeroToOne_supported ( ) { assertSetCount ( e3 ( ) , <int> ) ; } @CollectionFeature.Require ( { SUPPORTS_ADD , FAILS_FAST_ON_CONCURRENT_MODIFICATION } ) public void testSetCountZeroToOneConcurrentWithIteration ( ) { try { Iterator < E > iterator = collection . iterator ( ) ; assertSetCount ( e3 ( ) , <int> ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @CollectionFeature.Require ( { SUPPORTS_ADD , FAILS_FAST_ON_CONCURRENT_MODIFICATION } ) public void testSetCountZeroToOneConcurrentWithEntrySetIteration ( ) { try { Iterator < Entry < E > > iterator = getMultiset ( ) . entrySet ( ) . iterator ( ) ; assertSetCount ( e3 ( ) , <int> ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCount_zeroToThree_supported ( ) { assertSetCount ( e3 ( ) , <int> ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_ADD ) public void testSetCount_oneToThree_supported ( ) { assertSetCount ( e0 ( ) , <int> ) ; } @CollectionFeature.Require ( absent = SUPPORTS_ADD ) public void testSetCount_zeroToOne_unsupported ( ) { assertSetCountIncreasingFailure ( e3 ( ) , <int> ) ; } @CollectionFeature.Require ( absent = SUPPORTS_ADD ) public void testSetCount_zeroToThree_unsupported ( ) { assertSetCountIncreasingFailure ( e3 ( ) , <int> ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( absent = SUPPORTS_ADD ) public void testSetCount_oneToThree_unsupported ( ) { assertSetCountIncreasingFailure ( e3 ( ) , <int> ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testSetCount_oneToZero_supported ( ) { assertSetCount ( e0 ( ) , <int> ) ; } @CollectionFeature.Require ( { SUPPORTS_REMOVE , FAILS_FAST_ON_CONCURRENT_MODIFICATION } ) @CollectionSize.Require ( absent = ZERO ) public void testSetCountOneToZeroConcurrentWithIteration ( ) { try { Iterator < E > iterator = collection . iterator ( ) ; assertSetCount ( e0 ( ) , <int> ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @CollectionFeature.Require ( { SUPPORTS_REMOVE , FAILS_FAST_ON_CONCURRENT_MODIFICATION } ) @CollectionSize.Require ( absent = ZERO ) public void testSetCountOneToZeroConcurrentWithEntrySetIteration ( ) { try { Iterator < Entry < E > > iterator = getMultiset ( ) . entrySet ( ) . iterator ( ) ; assertSetCount ( e0 ( ) , <int> ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testSetCount_threeToZero_supported ( ) { initThreeCopies ( ) ; assertSetCount ( e0 ( ) , <int> ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testSetCount_threeToOne_supported ( ) { initThreeCopies ( ) ; assertSetCount ( e0 ( ) , <int> ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) public void testSetCount_oneToZero_unsupported ( ) { assertSetCountDecreasingFailure ( e0 ( ) , <int> ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) public void testSetCount_threeToZero_unsupported ( ) { initThreeCopies ( ) ; assertSetCountDecreasingFailure ( e0 ( ) , <int> ) ; } @CollectionSize.Require ( SEVERAL ) @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) public void testSetCount_threeToOne_unsupported ( ) { initThreeCopies ( ) ; assertSetCountDecreasingFailure ( e0 ( ) , <int> ) ; } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( { SUPPORTS_REMOVE , ALLOWS_NULL_VALUES } ) public void testSetCount_removeNull_nullSupported ( ) { initCollectionWithNullElement ( ) ; assertSetCount ( null , <int> ) ; } @CollectionFeature.Require ( value = { SUPPORTS_ADD , ALLOWS_NULL_VALUES } , absent = RESTRICTS_ELEMENTS ) public void testSetCount_addNull_nullSupported ( ) { assertSetCount ( null , <int> ) ; } @CollectionFeature.Require ( value = SUPPORTS_ADD , absent = ALLOWS_NULL_VALUES ) public void testSetCount_addNull_nullUnsupported ( ) { try { setCountNoCheckReturnValue ( null , <int> ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) public void testSetCount_noOpNull_nullSupported ( ) { try { assertSetCount ( null , <int> ) ; } catch ( UnsupportedOperationException tolerated ) { } } @CollectionFeature.Require ( absent = ALLOWS_NULL_VALUES ) public void testSetCount_noOpNull_nullUnsupported ( ) { try { assertSetCount ( null , <int> ) ; } catch ( NullPointerException tolerated ) { } catch ( UnsupportedOperationException tolerated ) { } } @CollectionSize.Require ( absent = ZERO ) @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) public void testSetCount_existingNoNopNull_nullSupported ( ) { initCollectionWithNullElement ( ) ; try { assertSetCount ( null , <int> ) ; } catch ( UnsupportedOperationException tolerated ) { } } @CollectionFeature.Require ( SUPPORTS_REMOVE ) public void testSetCount_negative_removeSupported ( ) { try { setCountNoCheckReturnValue ( e3 ( ) , - <int> ) ; fail ( <str> + <str> ) ; } catch ( IllegalArgumentException expected ) { } } @CollectionFeature.Require ( absent = SUPPORTS_REMOVE ) public void testSetCount_negative_removeUnsupported ( ) { try { setCountNoCheckReturnValue ( e3 ( ) , - <int> ) ; fail ( <str> + <str> ) ; } catch ( IllegalArgumentException expected ) { } catch ( UnsupportedOperationException expected ) { } } @GwtIncompatible ( <str> ) public static List < Method > getSetCountDuplicateInitializingMethods ( ) { return Arrays . asList ( getMethod ( <str> ) , getMethod ( <str> ) , getMethod ( <str> ) ) ; } @GwtIncompatible ( <str> ) private static Method getMethod ( String methodName ) { return Helpers . getMethod ( AbstractMultisetSetCountTester . class , methodName ) ; } } 

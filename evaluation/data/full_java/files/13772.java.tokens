package org . gradle . launcher . cli . converter ; import org . gradle . StartParameter ; import org . gradle . launcher . daemon . configuration . GradleProperties ; import java . util . Map ; import static org . gradle . launcher . daemon . configuration . GradleProperties . isTrue ; public class PropertiesToStartParameterConverter { public StartParameter convert ( Map < String , String > properties , StartParameter startParameter ) { startParameter . setConfigureOnDemand ( isTrue ( properties . get ( GradleProperties . CONFIGURE_ON_DEMAND_PROPERTY ) ) ) ; String parallel = properties . get ( GradleProperties . PARALLEL_PROPERTY ) ; if ( isTrue ( parallel ) ) { startParameter . setParallelProjectExecutionEnabled ( true ) ; } String workers = properties . get ( GradleProperties . WORKERS_PROPERTY ) ; if ( workers ! = null ) { try { int workerCount = Integer . parseInt ( workers ) ; if ( workerCount < <int> ) { invalidMaxWorkersPropValue ( workers ) ; } startParameter . setMaxWorkerCount ( workerCount ) ; } catch ( NumberFormatException e ) { invalidMaxWorkersPropValue ( workers ) ; } } return startParameter ; } private StartParameter invalidMaxWorkersPropValue ( String value ) { throw new IllegalArgumentException ( String . format ( <str> , value , GradleProperties . WORKERS_PROPERTY ) ) ; } } 

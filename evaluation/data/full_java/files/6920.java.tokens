package org . elasticsearch . plugins ; import org . elasticsearch . Version ; import org . elasticsearch . bootstrap . JarHell ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; import java . io . InputStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . Properties ; public class PluginInfo implements Streamable , ToXContent { public static final String ES_PLUGIN_PROPERTIES = <str> ; public static final String ES_PLUGIN_POLICY = <str> ; static final class Fields { static final XContentBuilderString NAME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString DESCRIPTION = new XContentBuilderString ( <str> ) ; static final XContentBuilderString URL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SITE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString VERSION = new XContentBuilderString ( <str> ) ; static final XContentBuilderString JVM = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CLASSNAME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ISOLATED = new XContentBuilderString ( <str> ) ; } private String name ; private String description ; private boolean site ; private String version ; private boolean jvm ; private String classname ; private boolean isolated ; public PluginInfo ( ) { } PluginInfo ( String name , String description , boolean site , String version , boolean jvm , String classname , boolean isolated ) { this . name = name ; this . description = description ; this . site = site ; this . jvm = jvm ; this . version = version ; this . classname = classname ; this . isolated = isolated ; } public static PluginInfo readFromProperties ( Path dir ) throws IOException { Path descriptor = dir . resolve ( ES_PLUGIN_PROPERTIES ) ; Properties props = new Properties ( ) ; try ( InputStream stream = Files . newInputStream ( descriptor ) ) { props . load ( stream ) ; } String name = props . getProperty ( <str> ) ; if ( name = = null | | name . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> + descriptor + <str> ) ; } PluginManager . checkForForbiddenName ( name ) ; String description = props . getProperty ( <str> ) ; if ( description = = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } String version = props . getProperty ( <str> ) ; if ( version = = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } boolean jvm = Boolean . parseBoolean ( props . getProperty ( <str> ) ) ; boolean site = Boolean . parseBoolean ( props . getProperty ( <str> ) ) ; if ( jvm = = false & & site = = false ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } boolean isolated = true ; String classname = <str> ; if ( jvm ) { String esVersionString = props . getProperty ( <str> ) ; if ( esVersionString = = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } Version esVersion = Version . fromString ( esVersionString ) ; if ( esVersion . equals ( Version . CURRENT ) = = false ) { throw new IllegalArgumentException ( <str> + name + <str> + Version . CURRENT . toString ( ) + <str> + esVersionString + <str> ) ; } String javaVersionString = props . getProperty ( <str> ) ; if ( javaVersionString = = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } JarHell . checkVersionFormat ( javaVersionString ) ; JarHell . checkJavaVersion ( name , javaVersionString ) ; isolated = Boolean . parseBoolean ( props . getProperty ( <str> , <str> ) ) ; classname = props . getProperty ( <str> ) ; if ( classname = = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } } if ( site ) { if ( ! Files . exists ( dir . resolve ( <str> ) ) ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } } return new PluginInfo ( name , description , site , version , jvm , classname , isolated ) ; } public String getName ( ) { return name ; } public String getDescription ( ) { return description ; } public boolean isSite ( ) { return site ; } public boolean isJvm ( ) { return jvm ; } public boolean isIsolated ( ) { return isolated ; } public String getClassname ( ) { return classname ; } public String getUrl ( ) { if ( site ) { return ( <str> + name + <str> ) ; } else { return null ; } } public String getVersion ( ) { return version ; } public static PluginInfo readFromStream ( StreamInput in ) throws IOException { PluginInfo info = new PluginInfo ( ) ; info . readFrom ( in ) ; return info ; } @Override public void readFrom ( StreamInput in ) throws IOException { this . name = in . readString ( ) ; this . description = in . readString ( ) ; this . site = in . readBoolean ( ) ; this . jvm = in . readBoolean ( ) ; this . version = in . readString ( ) ; this . classname = in . readString ( ) ; this . isolated = in . readBoolean ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( name ) ; out . writeString ( description ) ; out . writeBoolean ( site ) ; out . writeBoolean ( jvm ) ; out . writeString ( version ) ; out . writeString ( classname ) ; out . writeBoolean ( isolated ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; builder . field ( Fields . NAME , name ) ; builder . field ( Fields . VERSION , version ) ; builder . field ( Fields . DESCRIPTION , description ) ; if ( site ) { builder . field ( Fields . URL , getUrl ( ) ) ; } builder . field ( Fields . JVM , jvm ) ; if ( jvm ) { builder . field ( Fields . CLASSNAME , classname ) ; builder . field ( Fields . ISOLATED , isolated ) ; } builder . field ( Fields . SITE , site ) ; builder . endObject ( ) ; return builder ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; PluginInfo that = ( PluginInfo ) o ; if ( ! name . equals ( that . name ) ) return false ; if ( version ! = null ? ! version . equals ( that . version ) : that . version ! = null ) return false ; return true ; } @Override public int hashCode ( ) { return name . hashCode ( ) ; } @Override public String toString ( ) { final StringBuilder information = new StringBuilder ( ) . append ( <str> ) . append ( <str> ) . append ( name ) . append ( <str> ) . append ( <str> ) . append ( description ) . append ( <str> ) . append ( <str> ) . append ( site ) . append ( <str> ) . append ( <str> ) . append ( version ) . append ( <str> ) . append ( <str> ) . append ( jvm ) . append ( <str> ) ; if ( jvm ) { information . append ( <str> ) . append ( classname ) . append ( <str> ) ; information . append ( <str> ) . append ( isolated ) ; } return information . toString ( ) ; } } 

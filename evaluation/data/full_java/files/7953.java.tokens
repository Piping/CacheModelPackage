package org . elasticsearch . common . property ; import org . elasticsearch . test . ESTestCase ; import java . util . LinkedHashMap ; import java . util . Map ; import static org . hamcrest . Matchers . is ; public class PropertyPlaceholderTests extends ESTestCase { public void testSimple ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; } public void testVariousPrefixSuffix ( ) { PropertyPlaceholder ppEqualsPrefix = new PropertyPlaceholder ( <str> , <str> , false ) ; PropertyPlaceholder ppLongerPrefix = new PropertyPlaceholder ( <str> , <str> , false ) ; PropertyPlaceholder ppShorterPrefix = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; map . put ( <str> , <str> ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; assertEquals ( <str> , ppEqualsPrefix . replacePlaceholders ( <str> , placeholderResolver ) ) ; assertEquals ( <str> , ppLongerPrefix . replacePlaceholders ( <str> , placeholderResolver ) ) ; assertEquals ( <str> , ppShorterPrefix . replacePlaceholders ( <str> , placeholderResolver ) ) ; } public void testDefaultValue ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; } public void testIgnoredUnresolvedPlaceholder ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , true ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; } public void testNotIgnoredUnresolvedPlaceholder ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; try { propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testShouldIgnoreMissing ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , true , true ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; } public void testRecursive ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; } public void testNestedLongerPrefix ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; } public void testNestedSameLengthPrefixSuffix ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; } public void testNestedShorterPrefix ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; } public void testCircularReference ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; map . put ( <str> , <str> ) ; map . put ( <str> , <str> ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , false , true ) ; try { propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testShouldRemoveMissing ( ) { PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder ( <str> , <str> , false ) ; Map < String , String > map = new LinkedHashMap < > ( ) ; PropertyPlaceholder . PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver ( map , true , false ) ; assertEquals ( <str> , propertyPlaceholder . replacePlaceholders ( <str> , placeholderResolver ) ) ; } private class SimplePlaceholderResolver implements PropertyPlaceholder . PlaceholderResolver { private Map < String , String > map ; private boolean shouldIgnoreMissing ; private boolean shouldRemoveMissing ; SimplePlaceholderResolver ( Map < String , String > map , boolean shouldIgnoreMissing , boolean shouldRemoveMissing ) { this . map = map ; this . shouldIgnoreMissing = shouldIgnoreMissing ; this . shouldRemoveMissing = shouldRemoveMissing ; } @Override public String resolvePlaceholder ( String placeholderName ) { return map . get ( placeholderName ) ; } @Override public boolean shouldIgnoreMissing ( String placeholderName ) { return shouldIgnoreMissing ; } @Override public boolean shouldRemoveMissingPlaceholder ( String placeholderName ) { return shouldRemoveMissing ; } } } 

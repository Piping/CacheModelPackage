package org . gradle . jvm . internal . services ; import org . gradle . api . internal . artifacts . ResolveContext ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . ComponentResolvers ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . DelegatingComponentResolvers ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . ResolverProviderFactory ; import org . gradle . api . internal . resolve . * ; import org . gradle . internal . service . ServiceRegistration ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . internal . service . scopes . PluginServiceRegistry ; import org . gradle . jvm . JarBinarySpec ; import org . gradle . jvm . internal . DefaultJavaPlatformVariantAxisCompatibility ; import org . gradle . jvm . internal . JarBinaryRenderer ; import org . gradle . jvm . platform . JavaPlatform ; import org . gradle . language . base . internal . model . DefaultVariantAxisCompatibilityFactory ; import org . gradle . language . base . internal . model . VariantAxisCompatibilityFactory ; import org . gradle . language . base . internal . model . VariantsMetaData ; import org . gradle . language . base . internal . resolve . DependentSourceSetResolveContext ; import org . gradle . model . internal . manage . schema . ModelSchemaStore ; public class PlatformJvmServices implements PluginServiceRegistry { public void registerGlobalServices ( ServiceRegistration registration ) { registration . add ( JarBinaryRenderer . class ) ; registration . add ( VariantAxisCompatibilityFactory . class , DefaultVariantAxisCompatibilityFactory . of ( JavaPlatform . class , new DefaultJavaPlatformVariantAxisCompatibility ( ) ) ) ; } public void registerBuildSessionServices ( ServiceRegistration registration ) { } public void registerBuildServices ( ServiceRegistration registration ) { registration . addProvider ( new BuildScopeServices ( ) ) ; } public void registerGradleServices ( ServiceRegistration registration ) { } public void registerProjectServices ( ServiceRegistration registration ) { } private class BuildScopeServices { LocalLibraryDependencyResolverFactory createResolverProviderFactory ( ProjectModelResolver projectModelResolver , ServiceRegistry registry ) { return new LocalLibraryDependencyResolverFactory ( projectModelResolver , registry ) ; } } public static class LocalLibraryDependencyResolverFactory implements ResolverProviderFactory { private final ProjectModelResolver projectModelResolver ; private final ServiceRegistry registry ; public LocalLibraryDependencyResolverFactory ( ProjectModelResolver projectModelResolver , ServiceRegistry registry ) { this . projectModelResolver = projectModelResolver ; this . registry = registry ; } @Override public boolean canCreate ( ResolveContext context ) { return context instanceof DependentSourceSetResolveContext ; } @Override public ComponentResolvers create ( ResolveContext context ) { final ModelSchemaStore schemaStore = registry . get ( ModelSchemaStore . class ) ; VariantsMetaData variants = ( ( DependentSourceSetResolveContext ) context ) . getVariants ( ) ; JvmLocalLibraryMetaDataAdapter libraryMetaDataAdapter = new JvmLocalLibraryMetaDataAdapter ( ) ; LocalLibraryDependencyResolver < JarBinarySpec > delegate = new LocalLibraryDependencyResolver < JarBinarySpec > ( JarBinarySpec . class , projectModelResolver , registry . getAll ( VariantAxisCompatibilityFactory . class ) , variants , schemaStore , libraryMetaDataAdapter , new DefaultLibraryResolutionErrorMessageBuilder ( variants , schemaStore ) ) ; return DelegatingComponentResolvers . of ( delegate ) ; } } } 

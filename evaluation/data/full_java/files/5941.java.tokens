package org . elasticsearch . common . io . stream ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; public final class NotSerializableExceptionWrapper extends ElasticsearchException { private final String name ; private final RestStatus status ; public NotSerializableExceptionWrapper ( Throwable other ) { super ( other . getMessage ( ) , other . getCause ( ) ) ; this . name = ElasticsearchException . getExceptionName ( other ) ; this . status = ExceptionsHelper . status ( other ) ; setStackTrace ( other . getStackTrace ( ) ) ; for ( Throwable otherSuppressed : other . getSuppressed ( ) ) { addSuppressed ( otherSuppressed ) ; } if ( other instanceof ElasticsearchException ) { ElasticsearchException ex = ( ElasticsearchException ) other ; for ( String key : ex . getHeaderKeys ( ) ) { this . addHeader ( key , ex . getHeader ( key ) ) ; } } } public NotSerializableExceptionWrapper ( StreamInput in ) throws IOException { super ( in ) ; name = in . readString ( ) ; status = RestStatus . readFrom ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( name ) ; RestStatus . writeTo ( out , status ) ; } @Override protected String getExceptionName ( ) { return name ; } @Override public RestStatus status ( ) { return status ; } } 

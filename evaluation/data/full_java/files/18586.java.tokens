package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttribute ; import com . badlogic . gdx . graphics . VertexAttributes ; import com . badlogic . gdx . graphics . glutils . IndexBufferObject ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . graphics . glutils . VertexBufferObject ; import com . badlogic . gdx . tests . utils . GdxTest ; public class VertexBufferObjectShaderTest extends GdxTest { Texture texture ; ShaderProgram shader ; VertexBufferObject vbo ; IndexBufferObject indices ; @Override public void dispose ( ) { texture . dispose ( ) ; vbo . dispose ( ) ; indices . dispose ( ) ; shader . dispose ( ) ; } @Override public void render ( ) { GL20 gl = Gdx . gl20 ; gl . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl . glClearColor ( <float> , <int> , <int> , <int> ) ; gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; gl . glEnable ( GL20 . GL_TEXTURE_2D ) ; shader . begin ( ) ; shader . setUniformi ( <str> , <int> ) ; texture . bind ( ) ; vbo . bind ( shader ) ; indices . bind ( ) ; gl . glDrawElements ( GL20 . GL_TRIANGLES , <int> , GL20 . GL_UNSIGNED_SHORT , indices . getBuffer ( ) . position ( ) ) ; indices . unbind ( ) ; vbo . unbind ( shader ) ; shader . end ( ) ; } @Override public void create ( ) { String vertexShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; String fragmentShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; shader = new ShaderProgram ( vertexShader , fragmentShader ) ; vbo = new VertexBufferObject ( true , <int> , new VertexAttribute ( VertexAttributes . Usage . Position , <int> , <str> ) , new VertexAttribute ( VertexAttributes . Usage . TextureCoordinates , <int> , <str> ) , new VertexAttribute ( VertexAttributes . Usage . ColorPacked , <int> , <str> ) ) ; float [ ] vertices = new float [ ] { - <int> , - <int> , <int> , <int> , Color . toFloatBits ( <float> , <float> , <float> , <float> ) , <int> , <int> , <float> , <float> , Color . toFloatBits ( <float> , <float> , <float> , <float> ) , <int> , - <int> , <int> , <int> , Color . toFloatBits ( <float> , <float> , <float> , <float> ) } ; vbo . setVertices ( vertices , <int> , vertices . length ) ; indices = new IndexBufferObject ( <int> ) ; indices . setIndices ( new short [ ] { <int> , <int> , <int> } , <int> , <int> ) ; texture = new Texture ( Gdx . files . internal ( <str> ) ) ; } @Override public void resume ( ) { vbo . invalidate ( ) ; } } 

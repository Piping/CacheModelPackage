package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input . Keys ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttribute ; import com . badlogic . gdx . graphics . VertexAttributes ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Environment ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . attributes . BlendingAttribute ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . attributes . TextureAttribute ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . graphics . g3d . model . Animation ; import com . badlogic . gdx . graphics . g3d . model . Node ; import com . badlogic . gdx . graphics . g3d . utils . AnimationController ; import com . badlogic . gdx . graphics . g3d . utils . MeshBuilder ; import com . badlogic . gdx . graphics . g3d . utils . MeshPartBuilder ; import com . badlogic . gdx . graphics . g3d . utils . ModelBuilder ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer . ShapeType ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . ObjectMap ; import com . badlogic . gdx . utils . Pool ; import com . badlogic . gdx . utils . StringBuilder ; public class MeshBuilderTest extends BaseG3dHudTest { Model model ; Environment environment ; @Override public void create ( ) { super . create ( ) ; environment = new Environment ( ) ; environment . set ( new ColorAttribute ( ColorAttribute . AmbientLight , <float> , <float> , <float> , <float> ) ) ; environment . add ( new DirectionalLight ( ) . set ( <float> , <float> , <float> , - <float> , - <float> , - <float> ) ) ; modelsWindow . setVisible ( false ) ; Texture texture = new Texture ( Gdx . files . internal ( <str> ) ) ; Material material = new Material ( TextureAttribute . createDiffuse ( texture ) ) ; MeshBuilder meshBuilder = new MeshBuilder ( ) ; meshBuilder . begin ( Usage . Position | Usage . Normal | Usage . ColorPacked | Usage . TextureCoordinates , GL20 . GL_TRIANGLES ) ; meshBuilder . box ( <float> , <float> , <float> ) ; Mesh mesh = new Mesh ( true , meshBuilder . getNumVertices ( ) , meshBuilder . getNumIndices ( ) , meshBuilder . getAttributes ( ) ) ; mesh = meshBuilder . end ( mesh ) ; ModelBuilder modelBuilder = new ModelBuilder ( ) ; modelBuilder . begin ( ) ; modelBuilder . manage ( texture ) ; modelBuilder . node ( ) . id = <str> ; MeshPartBuilder mpb = modelBuilder . part ( <str> , GL20 . GL_TRIANGLES , Usage . Position | Usage . Normal | Usage . TextureCoordinates | Usage . ColorPacked , material ) ; mpb . setColor ( Color . RED ) ; mpb . box ( <float> , <float> , <float> ) ; modelBuilder . node ( ) . id = <str> ; mpb = modelBuilder . part ( <str> , GL20 . GL_TRIANGLES , Usage . Position | Usage . Normal | Usage . TextureCoordinates | Usage . ColorPacked , material ) ; mpb . sphere ( <float> , <float> , <float> , <int> , <int> ) ; modelBuilder . node ( ) . id = <str> ; mpb = modelBuilder . part ( <str> , GL20 . GL_TRIANGLES , Usage . Position | Usage . Normal | Usage . TextureCoordinates | Usage . ColorPacked , material ) ; mpb . setVertexTransform ( new Matrix4 ( ) . rotate ( Vector3 . X , - <int> f ) ) ; mpb . cone ( <float> , <float> , <float> , <int> ) ; modelBuilder . node ( ) . id = <str> ; mpb = modelBuilder . part ( <str> , GL20 . GL_TRIANGLES , Usage . Position | Usage . Normal | Usage . TextureCoordinates | Usage . ColorPacked , material ) ; mpb . setUVRange ( <float> , <float> , <float> , <float> ) ; mpb . cylinder ( <float> , <float> , <float> , <int> ) ; modelBuilder . node ( ) . id = <str> ; mpb = modelBuilder . part ( <str> , GL20 . GL_TRIANGLES , mesh . getVertexAttributes ( ) , material ) ; Matrix4 transform = new Matrix4 ( ) ; mpb . setVertexTransform ( transform . setToTranslation ( <int> , <int> , <int> ) ) ; mpb . addMesh ( mesh ) ; mpb . setColor ( Color . BLUE ) ; mpb . setVertexTransform ( transform . setToTranslation ( <int> , <int> , <int> ) ) ; mpb . addMesh ( mesh ) ; mpb . setColor ( null ) ; mpb . setVertexTransform ( transform . setToTranslation ( - <int> , <int> , <int> ) . rotate ( Vector3 . X , <int> ) ) ; mpb . addMesh ( mesh ) ; mpb . setVertexTransform ( transform . setToTranslation ( <int> , <int> , <int> ) ) ; mpb . setUVRange ( <float> , <float> , <float> , <float> ) ; mpb . addMesh ( mesh ) ; model = modelBuilder . end ( ) ; instances . add ( new ModelInstance ( model , new Matrix4 ( ) . trn ( <float> , <float> , <float> ) , <str> , true ) ) ; instances . add ( new ModelInstance ( model , new Matrix4 ( ) . trn ( - <float> , <float> , - <float> ) , <str> , true ) ) ; instances . add ( new ModelInstance ( model , new Matrix4 ( ) . trn ( <float> , <float> , - <float> ) , <str> , true ) ) ; instances . add ( new ModelInstance ( model , new Matrix4 ( ) . trn ( - <float> , <float> , <float> ) , <str> , true ) ) ; instances . add ( new ModelInstance ( model , new Matrix4 ( ) . trn ( <float> , <float> , <float> ) , <str> , true ) ) ; } @Override protected void render ( ModelBatch batch , Array < ModelInstance > instances ) { batch . render ( instances , environment ) ; } @Override protected void onModelClicked ( String name ) { } @Override public void dispose ( ) { super . dispose ( ) ; model . dispose ( ) ; } } 

package io . netty . example . spdy . server ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . channel . Channel ; import io . netty . channel . ChannelOption ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioServerSocketChannel ; import io . netty . handler . logging . LogLevel ; import io . netty . handler . logging . LoggingHandler ; import io . netty . handler . ssl . ApplicationProtocolConfig ; import io . netty . handler . ssl . ApplicationProtocolConfig . Protocol ; import io . netty . handler . ssl . ApplicationProtocolConfig . SelectedListenerFailureBehavior ; import io . netty . handler . ssl . ApplicationProtocolConfig . SelectorFailureBehavior ; import io . netty . handler . ssl . ApplicationProtocolNames ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . util . SelfSignedCertificate ; public final class SpdyServer { static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; public static void main ( String [ ] args ) throws Exception { SelfSignedCertificate ssc = new SelfSignedCertificate ( ) ; SslContext sslCtx = SslContextBuilder . forServer ( ssc . certificate ( ) , ssc . privateKey ( ) ) . applicationProtocolConfig ( new ApplicationProtocolConfig ( Protocol . NPN , SelectorFailureBehavior . NO_ADVERTISE , SelectedListenerFailureBehavior . ACCEPT , ApplicationProtocolNames . SPDY_3_1 , ApplicationProtocolNames . HTTP_1_1 ) ) . build ( ) ; EventLoopGroup bossGroup = new NioEventLoopGroup ( <int> ) ; EventLoopGroup workerGroup = new NioEventLoopGroup ( ) ; try { ServerBootstrap b = new ServerBootstrap ( ) ; b . option ( ChannelOption . SO_BACKLOG , <int> ) ; b . group ( bossGroup , workerGroup ) . channel ( NioServerSocketChannel . class ) . handler ( new LoggingHandler ( LogLevel . INFO ) ) . childHandler ( new SpdyServerInitializer ( sslCtx ) ) ; Channel ch = b . bind ( PORT ) . sync ( ) . channel ( ) ; System . err . println ( <str> + PORT + <str> ) ; System . err . println ( <str> ) ; ch . closeFuture ( ) . sync ( ) ; } finally { bossGroup . shutdownGracefully ( ) ; workerGroup . shutdownGracefully ( ) ; } } } 

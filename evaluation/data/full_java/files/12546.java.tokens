package org . gradle . api . internal . artifacts . ivyservice . ivyresolve ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . internal . component . model . ComponentOverrideMetadata ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import org . gradle . internal . resolve . result . DefaultBuildableModuleComponentMetaDataResolveResult ; import org . gradle . internal . resolve . result . ResourceAwareResolveResult ; class ComponentMetaDataResolveState { private final DefaultBuildableModuleComponentMetaDataResolveResult resolveResult = new DefaultBuildableModuleComponentMetaDataResolveResult ( ) ; private final VersionedComponentChooser versionedComponentChooser ; private final ComponentOverrideMetadata componentOverrideMetadata ; private final ModuleComponentIdentifier componentIdentifier ; final ModuleComponentRepository repository ; private boolean searchedLocally ; private boolean searchedRemotely ; public ComponentMetaDataResolveState ( ModuleComponentIdentifier componentIdentifier , ComponentOverrideMetadata componentOverrideMetadata , ModuleComponentRepository repository , VersionedComponentChooser versionedComponentChooser ) { this . componentOverrideMetadata = componentOverrideMetadata ; this . componentIdentifier = componentIdentifier ; this . repository = repository ; this . versionedComponentChooser = versionedComponentChooser ; } BuildableModuleComponentMetaDataResolveResult resolve ( ) { if ( ! searchedLocally ) { searchedLocally = true ; process ( repository . getLocalAccess ( ) ) ; if ( resolveResult . hasResult ( ) ) { if ( resolveResult . isAuthoritative ( ) ) { searchedRemotely = true ; } return resolveResult ; } } if ( ! searchedRemotely ) { searchedRemotely = true ; process ( repository . getRemoteAccess ( ) ) ; return resolveResult ; } throw new IllegalStateException ( ) ; } protected void process ( ModuleComponentRepositoryAccess moduleAccess ) { moduleAccess . resolveComponentMetaData ( componentIdentifier , componentOverrideMetadata , resolveResult ) ; if ( resolveResult . getState ( ) = = BuildableModuleComponentMetaDataResolveResult . State . Resolved ) { if ( versionedComponentChooser . isRejectedComponent ( componentIdentifier , new MetadataProvider ( resolveResult ) ) ) { resolveResult . missing ( ) ; } } } protected void applyTo ( ResourceAwareResolveResult result ) { resolveResult . applyTo ( result ) ; } public boolean canMakeFurtherAttempts ( ) { return ! searchedRemotely ; } } 

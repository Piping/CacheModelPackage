package org . eclipse . debug . internal . ui . actions ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IProcess ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . actions . SelectionListenerAction ; import com . ibm . icu . text . MessageFormat ; public class EditLaunchConfigurationAction extends SelectionListenerAction { private ILaunchConfiguration fConfiguration = null ; private String fMode = null ; private boolean fTerminated = false ; public EditLaunchConfigurationAction ( ) { super ( IInternalDebugCoreConstants . EMPTY_STRING ) ; setEnabled ( false ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugHelpContextIds . EDIT_LAUNCH_CONFIGURATION_ACTION ) ; } @Override protected boolean updateSelection ( IStructuredSelection selection ) { setLaunchConfiguration ( null ) ; setMode ( null ) ; if ( selection . size ( ) = = <int> ) { Object object = selection . getFirstElement ( ) ; ILaunch launch = null ; if ( object instanceof IAdaptable ) { launch = ( ( IAdaptable ) object ) . getAdapter ( ILaunch . class ) ; } if ( launch = = null ) { if ( object instanceof ILaunch ) { launch = ( ILaunch ) object ; } else if ( object instanceof IDebugElement ) { launch = ( ( IDebugElement ) object ) . getLaunch ( ) ; } else if ( object instanceof IProcess ) { launch = ( ( IProcess ) object ) . getLaunch ( ) ; } } if ( launch ! = null ) { ILaunchConfiguration configuration = launch . getLaunchConfiguration ( ) ; if ( configuration ! = null ) { try { String underlyingHandle = configuration . getAttribute ( DebugUIPlugin . ATTR_LAUNCHING_CONFIG_HANDLE , IInternalDebugCoreConstants . EMPTY_STRING ) ; if ( underlyingHandle . length ( ) > <int> ) { ILaunchConfiguration underlyingConfig = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfiguration ( underlyingHandle ) ; if ( underlyingConfig ! = null ) { configuration = underlyingConfig ; } } } catch ( CoreException e1 ) { } setLaunchConfiguration ( configuration ) ; setMode ( launch . getLaunchMode ( ) ) ; setIsTerminated ( launch . isTerminated ( ) ) ; setText ( MessageFormat . format ( ActionMessages . EditLaunchConfigurationAction_1 , new Object [ ] { configuration . getName ( ) } ) ) ; ImageDescriptor descriptor = null ; try { descriptor = DebugPluginImages . getImageDescriptor ( configuration . getType ( ) . getIdentifier ( ) ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } setImageDescriptor ( descriptor ) ; } } } ILaunchConfiguration config = getLaunchConfiguration ( ) ; if ( config = = null ) { return false ; } return ! DebugUITools . isPrivate ( config ) ; } protected void setLaunchConfiguration ( ILaunchConfiguration configuration ) { fConfiguration = configuration ; } protected ILaunchConfiguration getLaunchConfiguration ( ) { return fConfiguration ; } protected void setMode ( String mode ) { fMode = mode ; } protected String getMode ( ) { return fMode ; } protected boolean isTerminated ( ) { return fTerminated ; } protected void setIsTerminated ( boolean terminated ) { fTerminated = terminated ; } @Override public void run ( ) { ILaunchGroup group = DebugUITools . getLaunchGroup ( getLaunchConfiguration ( ) , getMode ( ) ) ; if ( group ! = null ) { if ( isTerminated ( ) ) { DebugUITools . openLaunchConfigurationDialog ( DebugUIPlugin . getShell ( ) , getLaunchConfiguration ( ) , group . getIdentifier ( ) , null ) ; } else { DebugUIPlugin . openLaunchConfigurationEditDialog ( DebugUIPlugin . getShell ( ) , getLaunchConfiguration ( ) , group . getIdentifier ( ) , null , false ) ; } } } } 

package org . gradle . internal . resource ; import org . apache . commons . io . IOUtils ; import org . gradle . internal . SystemProperties ; import org . gradle . util . GradleVersion ; import java . io . * ; import java . net . URI ; import java . net . URLConnection ; public class UriResource implements Resource { private final File sourceFile ; private final URI sourceUri ; private final String description ; public UriResource ( String description , File sourceFile ) { this . description = description ; this . sourceFile = canonicalise ( sourceFile ) ; this . sourceUri = sourceFile . toURI ( ) ; } private File canonicalise ( File file ) { try { return file . getCanonicalFile ( ) ; } catch ( IOException e ) { return file . getAbsoluteFile ( ) ; } } public UriResource ( String description , URI sourceUri ) { this . description = description ; this . sourceFile = sourceUri . getScheme ( ) . equals ( <str> ) ? canonicalise ( new File ( sourceUri . getPath ( ) ) ) : null ; this . sourceUri = sourceUri ; } public String getDisplayName ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( description ) ; builder . append ( <str> ) ; builder . append ( sourceFile ! = null ? sourceFile . getAbsolutePath ( ) : sourceUri ) ; builder . append ( <str> ) ; return builder . toString ( ) ; } public String getText ( ) { if ( sourceFile ! = null & & sourceFile . isDirectory ( ) ) { throw new ResourceException ( sourceUri , String . format ( <str> , getDisplayName ( ) ) ) ; } try { Reader reader = getInputStream ( sourceUri ) ; try { return IOUtils . toString ( reader ) ; } finally { reader . close ( ) ; } } catch ( FileNotFoundException e ) { throw new ResourceNotFoundException ( sourceUri , String . format ( <str> , getDisplayName ( ) ) ) ; } catch ( Exception e ) { throw ResourceException . failure ( sourceUri , String . format ( <str> , getDisplayName ( ) ) , e ) ; } } public boolean getExists ( ) { try { Reader reader = getInputStream ( sourceUri ) ; try { return true ; } finally { reader . close ( ) ; } } catch ( FileNotFoundException e ) { return false ; } catch ( Exception e ) { throw ResourceException . failure ( sourceUri , String . format ( <str> , getDisplayName ( ) ) , e ) ; } } private Reader getInputStream ( URI url ) throws IOException { final URLConnection urlConnection = url . toURL ( ) . openConnection ( ) ; urlConnection . setRequestProperty ( <str> , getUserAgentString ( ) ) ; urlConnection . connect ( ) ; String charset = extractCharacterEncoding ( urlConnection . getContentType ( ) , <str> ) ; return new InputStreamReader ( urlConnection . getInputStream ( ) , charset ) ; } public File getFile ( ) { return sourceFile ; } public URI getURI ( ) { return sourceUri ; } public static String extractCharacterEncoding ( String contentType , String defaultEncoding ) { if ( contentType = = null ) { return defaultEncoding ; } int pos = findFirstParameter ( <int> , contentType ) ; if ( pos = = - <int> ) { return defaultEncoding ; } StringBuilder paramName = new StringBuilder ( ) ; StringBuilder paramValue = new StringBuilder ( ) ; pos = findNextParameter ( pos , contentType , paramName , paramValue ) ; while ( pos ! = - <int> ) { if ( paramName . toString ( ) . equals ( <str> ) & & paramValue . length ( ) > <int> ) { return paramValue . toString ( ) ; } pos = findNextParameter ( pos , contentType , paramName , paramValue ) ; } return defaultEncoding ; } private static int findFirstParameter ( int pos , String contentType ) { int index = contentType . indexOf ( <str> , pos ) ; if ( index < <int> ) { return - <int> ; } return index + <int> ; } private static int findNextParameter ( int pos , String contentType , StringBuilder paramName , StringBuilder paramValue ) { if ( pos > = contentType . length ( ) ) { return - <int> ; } paramName . setLength ( <int> ) ; paramValue . setLength ( <int> ) ; int separator = contentType . indexOf ( <str> , pos ) ; if ( separator < <int> ) { separator = contentType . length ( ) ; } paramName . append ( contentType . substring ( pos , separator ) . trim ( ) ) ; if ( separator > = contentType . length ( ) - <int> ) { return contentType . length ( ) ; } int startValue = separator + <int> ; int endValue ; if ( contentType . charAt ( startValue ) = = <str> ) { startValue + + ; int i = startValue ; while ( i < contentType . length ( ) ) { char ch = contentType . charAt ( i ) ; if ( ch = = <str> & & i < contentType . length ( ) - <int> & & contentType . charAt ( i + <int> ) = = <str> ) { paramValue . append ( <str> ) ; i + = <int> ; } else if ( ch = = <str> ) { break ; } else { paramValue . append ( ch ) ; i + + ; } } endValue = i + <int> ; } else { endValue = contentType . indexOf ( <str> , startValue ) ; if ( endValue < <int> ) { endValue = contentType . length ( ) ; } paramValue . append ( contentType . substring ( startValue , endValue ) ) ; } if ( endValue < contentType . length ( ) & & contentType . charAt ( endValue ) = = <str> ) { endValue + + ; } return endValue ; } public static String getUserAgentString ( ) { String osName = System . getProperty ( <str> ) ; String osVersion = System . getProperty ( <str> ) ; String osArch = System . getProperty ( <str> ) ; String javaVendor = System . getProperty ( <str> ) ; String javaVersion = SystemProperties . getInstance ( ) . getJavaVersion ( ) ; String javaVendorVersion = System . getProperty ( <str> ) ; return String . format ( <str> , GradleVersion . current ( ) . getVersion ( ) , osName , osVersion , osArch , javaVendor , javaVersion , javaVendorVersion ) ; } } 

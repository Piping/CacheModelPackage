package org . gradle . api . tasks . diagnostics . internal . graph . nodes ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . result . ResolvedComponentResult ; import org . gradle . api . artifacts . result . ResolvedDependencyResult ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . Map ; import java . util . Set ; public class InvertedRenderableModuleResult extends RenderableModuleResult { public InvertedRenderableModuleResult ( ResolvedComponentResult module ) { super ( module ) ; } public Set < RenderableDependency > getChildren ( ) { Map < ComponentIdentifier , RenderableDependency > children = new LinkedHashMap < ComponentIdentifier , RenderableDependency > ( ) ; for ( ResolvedDependencyResult dependent : module . getDependents ( ) ) { InvertedRenderableModuleResult child = new InvertedRenderableModuleResult ( dependent . getFrom ( ) ) ; if ( ! children . containsKey ( child . getId ( ) ) ) { children . put ( child . getId ( ) , child ) ; } } return new LinkedHashSet < RenderableDependency > ( children . values ( ) ) ; } } 

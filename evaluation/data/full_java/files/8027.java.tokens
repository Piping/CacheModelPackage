package org . elasticsearch . discovery . zen ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . test . ESTestCase ; import static org . elasticsearch . discovery . zen . ZenDiscovery . shouldIgnoreOrRejectNewClusterState ; import static org . hamcrest . Matchers . containsString ; public class ZenDiscoveryUnitTests extends ESTestCase { public void testShouldIgnoreNewClusterState ( ) { ClusterName clusterName = new ClusterName ( <str> ) ; DiscoveryNodes . Builder currentNodes = DiscoveryNodes . builder ( ) ; currentNodes . masterNodeId ( <str> ) . put ( new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) ) ; DiscoveryNodes . Builder newNodes = DiscoveryNodes . builder ( ) ; newNodes . masterNodeId ( <str> ) . put ( new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) ) ; ClusterState . Builder currentState = ClusterState . builder ( clusterName ) ; currentState . nodes ( currentNodes ) ; ClusterState . Builder newState = ClusterState . builder ( clusterName ) ; newState . nodes ( newNodes ) ; currentState . version ( <int> ) ; newState . version ( <int> ) ; assertTrue ( <str> , shouldIgnoreOrRejectNewClusterState ( logger , currentState . build ( ) , newState . build ( ) ) ) ; currentState . version ( <int> ) ; newState . version ( <int> ) ; assertFalse ( <str> , shouldIgnoreOrRejectNewClusterState ( logger , currentState . build ( ) , newState . build ( ) ) ) ; currentState . version ( <int> ) ; newState . version ( <int> ) ; assertFalse ( <str> , shouldIgnoreOrRejectNewClusterState ( logger , currentState . build ( ) , newState . build ( ) ) ) ; currentNodes = DiscoveryNodes . builder ( ) ; currentNodes . masterNodeId ( <str> ) . put ( new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) ) ; ; if ( randomBoolean ( ) ) { currentState . version ( <int> ) ; newState . version ( <int> ) ; } else { currentState . version ( <int> ) ; newState . version ( <int> ) ; } currentState . nodes ( currentNodes ) ; try { shouldIgnoreOrRejectNewClusterState ( logger , currentState . build ( ) , newState . build ( ) ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } currentNodes = DiscoveryNodes . builder ( ) ; currentNodes . masterNodeId ( null ) ; currentState . nodes ( currentNodes ) ; if ( randomBoolean ( ) ) { currentState . version ( <int> ) ; newState . version ( <int> ) ; } else { currentState . version ( <int> ) ; newState . version ( <int> ) ; } assertFalse ( <str> , shouldIgnoreOrRejectNewClusterState ( logger , currentState . build ( ) , newState . build ( ) ) ) ; } } 

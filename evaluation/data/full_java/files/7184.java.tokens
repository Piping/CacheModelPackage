package org . elasticsearch . search . aggregations . bucket . histogram ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . rounding . Rounding ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . aggregations . support . format . ValueParser ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; public class ExtendedBounds { Long min ; Long max ; String minAsStr ; String maxAsStr ; ExtendedBounds ( ) { } ExtendedBounds ( Long min , Long max ) { this . min = min ; this . max = max ; } void processAndValidate ( String aggName , SearchContext context , ValueParser parser ) { assert parser ! = null ; if ( minAsStr ! = null ) { min = parser . parseLong ( minAsStr , context ) ; } if ( maxAsStr ! = null ) { max = parser . parseLong ( maxAsStr , context ) ; } if ( min ! = null & & max ! = null & & min . compareTo ( max ) > <int> ) { throw new SearchParseException ( context , <str> + min + <str> + <str> + max + <str> + aggName + <str> , null ) ; } } ExtendedBounds round ( Rounding rounding ) { return new ExtendedBounds ( min ! = null ? rounding . round ( min ) : null , max ! = null ? rounding . round ( max ) : null ) ; } void writeTo ( StreamOutput out ) throws IOException { if ( min ! = null ) { out . writeBoolean ( true ) ; out . writeLong ( min ) ; } else { out . writeBoolean ( false ) ; } if ( max ! = null ) { out . writeBoolean ( true ) ; out . writeLong ( max ) ; } else { out . writeBoolean ( false ) ; } } static ExtendedBounds readFrom ( StreamInput in ) throws IOException { ExtendedBounds bounds = new ExtendedBounds ( ) ; if ( in . readBoolean ( ) ) { bounds . min = in . readLong ( ) ; } if ( in . readBoolean ( ) ) { bounds . max = in . readLong ( ) ; } return bounds ; } } 

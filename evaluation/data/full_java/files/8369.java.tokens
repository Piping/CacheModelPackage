package org . elasticsearch . monitor . fs ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . NodeEnvironment ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . isEmptyOrNullString ; import static org . hamcrest . Matchers . not ; public class FsProbeTests extends ESTestCase { public void testFsInfo ( ) throws IOException { try ( NodeEnvironment env = newNodeEnvironment ( ) ) { FsProbe probe = new FsProbe ( Settings . EMPTY , env ) ; FsInfo stats = probe . stats ( ) ; assertNotNull ( stats ) ; assertThat ( stats . getTimestamp ( ) , greaterThan ( <int> L ) ) ; FsInfo . Path total = stats . getTotal ( ) ; assertNotNull ( total ) ; assertThat ( total . total , greaterThan ( <int> L ) ) ; assertThat ( total . free , greaterThan ( <int> L ) ) ; assertThat ( total . available , greaterThan ( <int> L ) ) ; for ( FsInfo . Path path : stats ) { assertNotNull ( path ) ; assertThat ( path . getPath ( ) , not ( isEmptyOrNullString ( ) ) ) ; assertThat ( path . getMount ( ) , not ( isEmptyOrNullString ( ) ) ) ; assertThat ( path . getType ( ) , not ( isEmptyOrNullString ( ) ) ) ; assertThat ( path . total , greaterThan ( <int> L ) ) ; assertThat ( path . free , greaterThan ( <int> L ) ) ; assertThat ( path . available , greaterThan ( <int> L ) ) ; } } } } 

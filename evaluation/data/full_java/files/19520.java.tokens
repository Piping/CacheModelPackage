package io . netty . handler . codec . socksx . v4 ; import io . netty . handler . codec . DecoderResult ; import io . netty . util . internal . StringUtil ; import java . net . IDN ; public class DefaultSocks4CommandRequest extends AbstractSocks4Message implements Socks4CommandRequest { private final Socks4CommandType type ; private final String dstAddr ; private final int dstPort ; private final String userId ; public DefaultSocks4CommandRequest ( Socks4CommandType type , String dstAddr , int dstPort ) { this ( type , dstAddr , dstPort , <str> ) ; } public DefaultSocks4CommandRequest ( Socks4CommandType type , String dstAddr , int dstPort , String userId ) { if ( type = = null ) { throw new NullPointerException ( <str> ) ; } if ( dstAddr = = null ) { throw new NullPointerException ( <str> ) ; } if ( dstPort < = <int> | | dstPort > = <int> ) { throw new IllegalArgumentException ( <str> + dstPort + <str> ) ; } if ( userId = = null ) { throw new NullPointerException ( <str> ) ; } this . userId = userId ; this . type = type ; this . dstAddr = IDN . toASCII ( dstAddr ) ; this . dstPort = dstPort ; } @Override public Socks4CommandType type ( ) { return type ; } @Override public String dstAddr ( ) { return dstAddr ; } @Override public int dstPort ( ) { return dstPort ; } @Override public String userId ( ) { return userId ; } @Override public String toString ( ) { StringBuilder buf = new StringBuilder ( <int> ) ; buf . append ( StringUtil . simpleClassName ( this ) ) ; DecoderResult decoderResult = decoderResult ( ) ; if ( ! decoderResult . isSuccess ( ) ) { buf . append ( <str> ) ; buf . append ( decoderResult ) ; buf . append ( <str> ) ; } else { buf . append ( <str> ) ; } buf . append ( type ( ) ) ; buf . append ( <str> ) ; buf . append ( dstAddr ( ) ) ; buf . append ( <str> ) ; buf . append ( dstPort ( ) ) ; buf . append ( <str> ) ; buf . append ( userId ( ) ) ; buf . append ( <str> ) ; return buf . toString ( ) ; } } 

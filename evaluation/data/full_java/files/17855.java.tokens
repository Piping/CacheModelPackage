package com . badlogic . gdx . tools . hiero . unicodefont . effects ; import java . awt . BasicStroke ; import java . awt . Color ; import java . awt . Graphics2D ; import java . awt . Stroke ; import java . awt . image . BufferedImage ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import com . badlogic . gdx . tools . hiero . unicodefont . Glyph ; import com . badlogic . gdx . tools . hiero . unicodefont . UnicodeFont ; public class OutlineEffect implements ConfigurableEffect { private float width = <int> ; private Color color = Color . black ; private int join = BasicStroke . JOIN_BEVEL ; private Stroke stroke ; public OutlineEffect ( ) { } public OutlineEffect ( int width , Color color ) { this . width = width ; this . color = color ; } public void draw ( BufferedImage image , Graphics2D g , UnicodeFont unicodeFont , Glyph glyph ) { g = ( Graphics2D ) g . create ( ) ; if ( stroke ! = null ) g . setStroke ( stroke ) ; else g . setStroke ( getStroke ( ) ) ; g . setColor ( color ) ; g . draw ( glyph . getShape ( ) ) ; g . dispose ( ) ; } public float getWidth ( ) { return width ; } public void setWidth ( int width ) { this . width = width ; } public Color getColor ( ) { return color ; } public void setColor ( Color color ) { this . color = color ; } public int getJoin ( ) { return join ; } public Stroke getStroke ( ) { if ( stroke = = null ) return new BasicStroke ( width , BasicStroke . CAP_SQUARE , join ) ; return stroke ; } public void setStroke ( Stroke stroke ) { this . stroke = stroke ; } public void setJoin ( int join ) { this . join = join ; } public String toString ( ) { return <str> ; } public List getValues ( ) { List values = new ArrayList ( ) ; values . add ( EffectUtil . colorValue ( <str> , color ) ) ; values . add ( EffectUtil . floatValue ( <str> , width , <float> , <int> , <str> + <str> ) ) ; values . add ( EffectUtil . optionValue ( <str> , String . valueOf ( join ) , new String [ ] [ ] { { <str> , BasicStroke . JOIN_BEVEL + <str> } , { <str> , BasicStroke . JOIN_MITER + <str> } , { <str> , BasicStroke . JOIN_ROUND + <str> } } , <str> + <str> ) ) ; return values ; } public void setValues ( List values ) { for ( Iterator iter = values . iterator ( ) ; iter . hasNext ( ) ; ) { Value value = ( Value ) iter . next ( ) ; if ( value . getName ( ) . equals ( <str> ) ) { color = ( Color ) value . getObject ( ) ; } else if ( value . getName ( ) . equals ( <str> ) ) { width = ( ( Float ) value . getObject ( ) ) . floatValue ( ) ; } else if ( value . getName ( ) . equals ( <str> ) ) { join = Integer . parseInt ( ( String ) value . getObject ( ) ) ; } } } } 

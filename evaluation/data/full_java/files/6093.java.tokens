package org . elasticsearch . common . util ; import org . apache . lucene . util . ThreadInterruptedException ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import java . io . IOException ; import java . util . HashSet ; import java . util . Set ; public class CancellableThreads { private final Set < Thread > threads = new HashSet < > ( ) ; private boolean cancelled = false ; private String reason ; public synchronized boolean isCancelled ( ) { return cancelled ; } public synchronized void checkForCancel ( ) { if ( isCancelled ( ) ) { onCancel ( reason , null ) ; } } protected void onCancel ( String reason , @Nullable Throwable suppressedException ) { RuntimeException e = new ExecutionCancelledException ( <str> + reason + <str> ) ; if ( suppressedException ! = null ) { e . addSuppressed ( suppressedException ) ; } throw e ; } private synchronized boolean add ( ) { checkForCancel ( ) ; threads . add ( Thread . currentThread ( ) ) ; return Thread . interrupted ( ) ; } public void execute ( Interruptable interruptable ) { boolean wasInterrupted = add ( ) ; RuntimeException throwable = null ; try { interruptable . run ( ) ; } catch ( InterruptedException | ThreadInterruptedException e ) { } catch ( RuntimeException t ) { throwable = t ; } finally { remove ( ) ; } if ( wasInterrupted ) { Thread . currentThread ( ) . interrupt ( ) ; } else { Thread . interrupted ( ) ; } synchronized ( this ) { if ( isCancelled ( ) ) { onCancel ( reason , throwable ) ; } else if ( throwable ! = null ) { throw throwable ; } } } private synchronized void remove ( ) { threads . remove ( Thread . currentThread ( ) ) ; } public synchronized void cancel ( String reason ) { if ( cancelled ) { return ; } cancelled = true ; this . reason = reason ; for ( Thread thread : threads ) { thread . interrupt ( ) ; } threads . clear ( ) ; } public interface Interruptable { void run ( ) throws InterruptedException ; } public static class ExecutionCancelledException extends ElasticsearchException { public ExecutionCancelledException ( String msg ) { super ( msg ) ; } public ExecutionCancelledException ( StreamInput in ) throws IOException { super ( in ) ; } } } 

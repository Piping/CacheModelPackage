package org . nd4j . linalg ; import junit . framework . TestCase ; import junit . framework . TestResult ; import org . junit . After ; import org . junit . Before ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . util . UUID ; public abstract class BaseNd4jTest extends TestCase { private static Logger log = LoggerFactory . getLogger ( BaseNd4jTest . class ) ; protected Nd4jBackend backend ; public final static String DEFAULT_BACKEND = <str> ; public BaseNd4jTest ( ) { this ( <str> , getDefaultBackend ( ) ) ; } public BaseNd4jTest ( String name ) { this ( name , getDefaultBackend ( ) ) ; } public BaseNd4jTest ( String name , Nd4jBackend backend ) { super ( name ) ; this . backend = backend ; } public BaseNd4jTest ( Nd4jBackend backend ) { this ( backend . getClass ( ) . getName ( ) + UUID . randomUUID ( ) . toString ( ) , backend ) ; } @Override protected TestResult createResult ( ) { return new Nd4jTestResult ( ) ; } public static Nd4jBackend getDefaultBackend ( ) { String cpuBackend = <str> ; String gpuBackend = <str> ; String clazz = System . getProperty ( DEFAULT_BACKEND , cpuBackend ) ; try { return ( Nd4jBackend ) Class . forName ( clazz ) . newInstance ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } @Override protected void tearDown ( ) throws Exception { after ( ) ; } @Override protected void setUp ( ) throws Exception { before ( ) ; } @Override public void runBare ( ) throws Throwable { try { super . runBare ( ) ; } catch ( UnsupportedOperationException e ) { log . warn ( <str> , e ) ; } } @Before public void before ( ) { log . info ( <str> + getName ( ) + <str> + backend . getClass ( ) . getName ( ) ) ; Nd4j nd4j = new Nd4j ( ) ; nd4j . initWithBackend ( backend ) ; Nd4j . factory ( ) . setOrder ( ordering ( ) ) ; Nd4j . MAX_ELEMENTS_PER_SLICE = - <int> ; Nd4j . MAX_SLICES_TO_PRINT = - <int> ; } @After public void after ( ) { log . info ( <str> + getName ( ) ) ; Nd4j nd4j = new Nd4j ( ) ; nd4j . initWithBackend ( backend ) ; Nd4j . factory ( ) . setOrder ( ordering ( ) ) ; Nd4j . MAX_ELEMENTS_PER_SLICE = - <int> ; Nd4j . MAX_SLICES_TO_PRINT = - <int> ; } public char ordering ( ) { return <str> ; } public String getFailureMessage ( ) { return <str> + backend . getClass ( ) . getName ( ) + <str> + ordering ( ) ; } @Override public String getName ( ) { return getClass ( ) . getName ( ) ; } } 

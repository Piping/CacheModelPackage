package org . elasticsearch . search . suggest . completion . context ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . index . mapper . ParseContext ; import org . elasticsearch . index . mapper . core . CompletionFieldMapper ; import java . io . IOException ; import java . util . * ; public abstract class ContextMapping implements ToXContent { public static final String FIELD_TYPE = <str> ; public static final String FIELD_NAME = <str> ; protected final Type type ; protected final String name ; public enum Type { CATEGORY , GEO ; public static Type fromString ( String type ) { if ( type . equalsIgnoreCase ( <str> ) ) { return CATEGORY ; } else if ( type . equalsIgnoreCase ( <str> ) ) { return GEO ; } else { throw new IllegalArgumentException ( <str> + type + <str> ) ; } } } protected ContextMapping ( Type type , String name ) { this . type = type ; this . name = name ; } public Type type ( ) { return type ; } public String name ( ) { return name ; } public abstract Set < CharSequence > parseContext ( ParseContext parseContext , XContentParser parser ) throws IOException , ElasticsearchParseException ; protected abstract Set < CharSequence > parseContext ( ParseContext . Document document ) ; public abstract List < QueryContext > parseQueryContext ( XContentParser parser ) throws IOException , ElasticsearchParseException ; protected abstract XContentBuilder toInnerXContent ( XContentBuilder builder , Params params ) throws IOException ; @Override public final XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . field ( FIELD_NAME , name ) ; builder . field ( FIELD_TYPE , type . name ( ) ) ; toInnerXContent ( builder , params ) ; return builder ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; ContextMapping that = ( ContextMapping ) o ; if ( type ! = that . type ) return false ; return name . equals ( that . name ) ; } @Override public int hashCode ( ) { return Objects . hash ( type , name ) ; } @Override public String toString ( ) { try { return toXContent ( JsonXContent . contentBuilder ( ) , ToXContent . EMPTY_PARAMS ) . string ( ) ; } catch ( IOException e ) { return super . toString ( ) ; } } public static class QueryContext { public final String context ; public final int boost ; public final boolean isPrefix ; public QueryContext ( String context , int boost , boolean isPrefix ) { this . context = context ; this . boost = boost ; this . isPrefix = isPrefix ; } @Override public String toString ( ) { return <str> + <str> + context + <str> + <str> + boost + <str> + isPrefix + <str> ; } } } 

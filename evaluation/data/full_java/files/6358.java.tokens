package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . shingle . ShingleFilter ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; public class ShingleTokenFilterFactory extends AbstractTokenFilterFactory { private final Factory factory ; public ShingleTokenFilterFactory ( IndexSettings indexSettings , Environment environment , String name , Settings settings ) { super ( indexSettings , name , settings ) ; Integer maxShingleSize = settings . getAsInt ( <str> , ShingleFilter . DEFAULT_MAX_SHINGLE_SIZE ) ; Integer minShingleSize = settings . getAsInt ( <str> , ShingleFilter . DEFAULT_MIN_SHINGLE_SIZE ) ; Boolean outputUnigrams = settings . getAsBoolean ( <str> , true ) ; Boolean outputUnigramsIfNoShingles = settings . getAsBoolean ( <str> , false ) ; String tokenSeparator = settings . get ( <str> , ShingleFilter . DEFAULT_TOKEN_SEPARATOR ) ; String fillerToken = settings . get ( <str> , ShingleFilter . DEFAULT_FILLER_TOKEN ) ; factory = new Factory ( <str> , minShingleSize , maxShingleSize , outputUnigrams , outputUnigramsIfNoShingles , tokenSeparator , fillerToken ) ; } @Override public TokenStream create ( TokenStream tokenStream ) { return factory . create ( tokenStream ) ; } public Factory getInnerFactory ( ) { return this . factory ; } public static final class Factory implements TokenFilterFactory { private final int maxShingleSize ; private final boolean outputUnigrams ; private final boolean outputUnigramsIfNoShingles ; private final String tokenSeparator ; private final String fillerToken ; private int minShingleSize ; private final String name ; public Factory ( String name ) { this ( name , ShingleFilter . DEFAULT_MIN_SHINGLE_SIZE , ShingleFilter . DEFAULT_MAX_SHINGLE_SIZE , true , false , ShingleFilter . DEFAULT_TOKEN_SEPARATOR , ShingleFilter . DEFAULT_FILLER_TOKEN ) ; } Factory ( String name , int minShingleSize , int maxShingleSize , boolean outputUnigrams , boolean outputUnigramsIfNoShingles , String tokenSeparator , String fillerToken ) { this . maxShingleSize = maxShingleSize ; this . outputUnigrams = outputUnigrams ; this . outputUnigramsIfNoShingles = outputUnigramsIfNoShingles ; this . tokenSeparator = tokenSeparator ; this . minShingleSize = minShingleSize ; this . fillerToken = fillerToken ; this . name = name ; } @Override public TokenStream create ( TokenStream tokenStream ) { ShingleFilter filter = new ShingleFilter ( tokenStream , minShingleSize , maxShingleSize ) ; filter . setOutputUnigrams ( outputUnigrams ) ; filter . setOutputUnigramsIfNoShingles ( outputUnigramsIfNoShingles ) ; filter . setTokenSeparator ( tokenSeparator ) ; filter . setFillerToken ( fillerToken ) ; return filter ; } public int getMaxShingleSize ( ) { return maxShingleSize ; } public int getMinShingleSize ( ) { return minShingleSize ; } public boolean getOutputUnigrams ( ) { return outputUnigrams ; } public boolean getOutputUnigramsIfNoShingles ( ) { return outputUnigramsIfNoShingles ; } @Override public String name ( ) { return name ; } } } 

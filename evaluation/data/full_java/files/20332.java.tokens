package io . netty . channel ; import org . junit . Before ; import org . junit . Test ; import java . util . concurrent . TimeUnit ; import static org . easymock . EasyMock . * ; import static org . junit . Assert . * ; public class CompleteChannelFutureTest { private final Channel channel = createMock ( Channel . class ) ; private CompleteChannelFuture future ; @Before public void init ( ) { future = new CompleteChannelFutureImpl ( channel ) ; } @Test ( expected = NullPointerException . class ) public void shouldDisallowNullChannel ( ) { new CompleteChannelFutureImpl ( null ) ; } @Test public void shouldNotDoAnythingOnRemove ( ) throws Exception { ChannelFutureListener l = createStrictMock ( ChannelFutureListener . class ) ; replay ( l ) ; future . removeListener ( l ) ; verify ( l ) ; } @Test public void testConstantProperties ( ) throws InterruptedException { assertSame ( channel , future . channel ( ) ) ; assertTrue ( future . isDone ( ) ) ; assertSame ( future , future . await ( ) ) ; assertTrue ( future . await ( <int> ) ) ; assertTrue ( future . await ( <int> , TimeUnit . NANOSECONDS ) ) ; assertSame ( future , future . awaitUninterruptibly ( ) ) ; assertTrue ( future . awaitUninterruptibly ( <int> ) ) ; assertTrue ( future . awaitUninterruptibly ( <int> , TimeUnit . NANOSECONDS ) ) ; } private static class CompleteChannelFutureImpl extends CompleteChannelFuture { CompleteChannelFutureImpl ( Channel channel ) { super ( channel , null ) ; } @Override public Throwable cause ( ) { throw new Error ( ) ; } @Override public boolean isSuccess ( ) { throw new Error ( ) ; } @Override public ChannelFuture sync ( ) throws InterruptedException { throw new Error ( ) ; } @Override public ChannelFuture syncUninterruptibly ( ) { throw new Error ( ) ; } } } 

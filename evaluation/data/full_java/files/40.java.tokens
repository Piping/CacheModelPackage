package org . apache . cassandra . thrift ; import org . apache . commons . lang3 . builder . HashCodeBuilder ; import org . apache . thrift . scheme . IScheme ; import org . apache . thrift . scheme . SchemeFactory ; import org . apache . thrift . scheme . StandardScheme ; import org . apache . thrift . scheme . TupleScheme ; import org . apache . thrift . protocol . TTupleProtocol ; import org . apache . thrift . protocol . TProtocolException ; import org . apache . thrift . EncodingUtils ; import org . apache . thrift . TException ; import org . apache . thrift . async . AsyncMethodCallback ; import org . apache . thrift . server . AbstractNonblockingServer . * ; import java . util . List ; import java . util . ArrayList ; import java . util . Map ; import java . util . HashMap ; import java . util . EnumMap ; import java . util . Set ; import java . util . HashSet ; import java . util . EnumSet ; import java . util . Collections ; import java . util . BitSet ; import java . nio . ByteBuffer ; import java . util . Arrays ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class SlicePredicate implements org . apache . thrift . TBase < SlicePredicate , SlicePredicate . _Fields > , java . io . Serializable , Cloneable , Comparable < SlicePredicate > { private static final org . apache . thrift . protocol . TStruct STRUCT_DESC = new org . apache . thrift . protocol . TStruct ( <str> ) ; private static final org . apache . thrift . protocol . TField COLUMN_NAMES_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . LIST , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField SLICE_RANGE_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRUCT , ( short ) <int> ) ; private static final Map < Class < ? extends IScheme > , SchemeFactory > schemes = new HashMap < Class < ? extends IScheme > , SchemeFactory > ( ) ; static { schemes . put ( StandardScheme . class , new SlicePredicateStandardSchemeFactory ( ) ) ; schemes . put ( TupleScheme . class , new SlicePredicateTupleSchemeFactory ( ) ) ; } public List < ByteBuffer > column_names ; public SliceRange slice_range ; public enum _Fields implements org . apache . thrift . TFieldIdEnum { COLUMN_NAMES ( ( short ) <int> , <str> ) , SLICE_RANGE ( ( short ) <int> , <str> ) ; private static final Map < String , _Fields > byName = new HashMap < String , _Fields > ( ) ; static { for ( _Fields field : EnumSet . allOf ( _Fields . class ) ) { byName . put ( field . getFieldName ( ) , field ) ; } } public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case <int> : return COLUMN_NAMES ; case <int> : return SLICE_RANGE ; default : return null ; } } public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields = = null ) throw new IllegalArgumentException ( <str> + fieldId + <str> ) ; return fields ; } public static _Fields findByName ( String name ) { return byName . get ( name ) ; } private final short _thriftId ; private final String _fieldName ; _Fields ( short thriftId , String fieldName ) { _thriftId = thriftId ; _fieldName = fieldName ; } public short getThriftFieldId ( ) { return _thriftId ; } public String getFieldName ( ) { return _fieldName ; } } private _Fields optionals [ ] = { _Fields . COLUMN_NAMES , _Fields . SLICE_RANGE } ; public static final Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > metaDataMap ; static { Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > tmpMap = new EnumMap < _Fields , org . apache . thrift . meta_data . FieldMetaData > ( _Fields . class ) ; tmpMap . put ( _Fields . COLUMN_NAMES , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . OPTIONAL , new org . apache . thrift . meta_data . ListMetaData ( org . apache . thrift . protocol . TType . LIST , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING , true ) ) ) ) ; tmpMap . put ( _Fields . SLICE_RANGE , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . OPTIONAL , new org . apache . thrift . meta_data . StructMetaData ( org . apache . thrift . protocol . TType . STRUCT , SliceRange . class ) ) ) ; metaDataMap = Collections . unmodifiableMap ( tmpMap ) ; org . apache . thrift . meta_data . FieldMetaData . addStructMetaDataMap ( SlicePredicate . class , metaDataMap ) ; } public SlicePredicate ( ) { } public SlicePredicate ( SlicePredicate other ) { if ( other . isSetColumn_names ( ) ) { List < ByteBuffer > __this__column_names = new ArrayList < ByteBuffer > ( other . column_names ) ; this . column_names = __this__column_names ; } if ( other . isSetSlice_range ( ) ) { this . slice_range = new SliceRange ( other . slice_range ) ; } } public SlicePredicate deepCopy ( ) { return new SlicePredicate ( this ) ; } @Override public void clear ( ) { this . column_names = null ; this . slice_range = null ; } public int getColumn_namesSize ( ) { return ( this . column_names = = null ) ? <int> : this . column_names . size ( ) ; } public java . util . Iterator < ByteBuffer > getColumn_namesIterator ( ) { return ( this . column_names = = null ) ? null : this . column_names . iterator ( ) ; } public void addToColumn_names ( ByteBuffer elem ) { if ( this . column_names = = null ) { this . column_names = new ArrayList < ByteBuffer > ( ) ; } this . column_names . add ( elem ) ; } public List < ByteBuffer > getColumn_names ( ) { return this . column_names ; } public SlicePredicate setColumn_names ( List < ByteBuffer > column_names ) { this . column_names = column_names ; return this ; } public void unsetColumn_names ( ) { this . column_names = null ; } public boolean isSetColumn_names ( ) { return this . column_names ! = null ; } public void setColumn_namesIsSet ( boolean value ) { if ( ! value ) { this . column_names = null ; } } public SliceRange getSlice_range ( ) { return this . slice_range ; } public SlicePredicate setSlice_range ( SliceRange slice_range ) { this . slice_range = slice_range ; return this ; } public void unsetSlice_range ( ) { this . slice_range = null ; } public boolean isSetSlice_range ( ) { return this . slice_range ! = null ; } public void setSlice_rangeIsSet ( boolean value ) { if ( ! value ) { this . slice_range = null ; } } public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case COLUMN_NAMES : if ( value = = null ) { unsetColumn_names ( ) ; } else { setColumn_names ( ( List < ByteBuffer > ) value ) ; } break ; case SLICE_RANGE : if ( value = = null ) { unsetSlice_range ( ) ; } else { setSlice_range ( ( SliceRange ) value ) ; } break ; } } public Object getFieldValue ( _Fields field ) { switch ( field ) { case COLUMN_NAMES : return getColumn_names ( ) ; case SLICE_RANGE : return getSlice_range ( ) ; } throw new IllegalStateException ( ) ; } public boolean isSet ( _Fields field ) { if ( field = = null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case COLUMN_NAMES : return isSetColumn_names ( ) ; case SLICE_RANGE : return isSetSlice_range ( ) ; } throw new IllegalStateException ( ) ; } @Override public boolean equals ( Object that ) { if ( that = = null ) return false ; if ( that instanceof SlicePredicate ) return this . equals ( ( SlicePredicate ) that ) ; return false ; } public boolean equals ( SlicePredicate that ) { if ( that = = null ) return false ; boolean this_present_column_names = true & & this . isSetColumn_names ( ) ; boolean that_present_column_names = true & & that . isSetColumn_names ( ) ; if ( this_present_column_names | | that_present_column_names ) { if ( ! ( this_present_column_names & & that_present_column_names ) ) return false ; if ( ! this . column_names . equals ( that . column_names ) ) return false ; } boolean this_present_slice_range = true & & this . isSetSlice_range ( ) ; boolean that_present_slice_range = true & & that . isSetSlice_range ( ) ; if ( this_present_slice_range | | that_present_slice_range ) { if ( ! ( this_present_slice_range & & that_present_slice_range ) ) return false ; if ( ! this . slice_range . equals ( that . slice_range ) ) return false ; } return true ; } @Override public int hashCode ( ) { HashCodeBuilder builder = new HashCodeBuilder ( ) ; boolean present_column_names = true & & ( isSetColumn_names ( ) ) ; builder . append ( present_column_names ) ; if ( present_column_names ) builder . append ( column_names ) ; boolean present_slice_range = true & & ( isSetSlice_range ( ) ) ; builder . append ( present_slice_range ) ; if ( present_slice_range ) builder . append ( slice_range ) ; return builder . toHashCode ( ) ; } @Override public int compareTo ( SlicePredicate other ) { if ( ! getClass ( ) . equals ( other . getClass ( ) ) ) { return getClass ( ) . getName ( ) . compareTo ( other . getClass ( ) . getName ( ) ) ; } int lastComparison = <int> ; lastComparison = Boolean . valueOf ( isSetColumn_names ( ) ) . compareTo ( other . isSetColumn_names ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetColumn_names ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . column_names , other . column_names ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetSlice_range ( ) ) . compareTo ( other . isSetSlice_range ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetSlice_range ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . slice_range , other . slice_range ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } return <int> ; } public _Fields fieldForId ( int fieldId ) { return _Fields . findByThriftId ( fieldId ) ; } public void read ( org . apache . thrift . protocol . TProtocol iprot ) throws org . apache . thrift . TException { schemes . get ( iprot . getScheme ( ) ) . getScheme ( ) . read ( iprot , this ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot ) throws org . apache . thrift . TException { schemes . get ( oprot . getScheme ( ) ) . getScheme ( ) . write ( oprot , this ) ; } @Override public String toString ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; boolean first = true ; if ( isSetColumn_names ( ) ) { sb . append ( <str> ) ; if ( this . column_names = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . column_names ) ; } first = false ; } if ( isSetSlice_range ( ) ) { if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . slice_range = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . slice_range ) ; } first = false ; } sb . append ( <str> ) ; return sb . toString ( ) ; } public void validate ( ) throws org . apache . thrift . TException { if ( slice_range ! = null ) { slice_range . validate ( ) ; } } private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { try { write ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( out ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { try { read ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( in ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private static class SlicePredicateStandardSchemeFactory implements SchemeFactory { public SlicePredicateStandardScheme getScheme ( ) { return new SlicePredicateStandardScheme ( ) ; } } private static class SlicePredicateStandardScheme extends StandardScheme < SlicePredicate > { public void read ( org . apache . thrift . protocol . TProtocol iprot , SlicePredicate struct ) throws org . apache . thrift . TException { org . apache . thrift . protocol . TField schemeField ; iprot . readStructBegin ( ) ; while ( true ) { schemeField = iprot . readFieldBegin ( ) ; if ( schemeField . type = = org . apache . thrift . protocol . TType . STOP ) { break ; } switch ( schemeField . id ) { case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . LIST ) { { org . apache . thrift . protocol . TList _list16 = iprot . readListBegin ( ) ; struct . column_names = new ArrayList < ByteBuffer > ( _list16 . size ) ; for ( int _i17 = <int> ; _i17 < _list16 . size ; + + _i17 ) { ByteBuffer _elem18 ; _elem18 = iprot . readBinary ( ) ; struct . column_names . add ( _elem18 ) ; } iprot . readListEnd ( ) ; } struct . setColumn_namesIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRUCT ) { struct . slice_range = new SliceRange ( ) ; struct . slice_range . read ( iprot ) ; struct . setSlice_rangeIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; default : org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } iprot . readFieldEnd ( ) ; } iprot . readStructEnd ( ) ; struct . validate ( ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot , SlicePredicate struct ) throws org . apache . thrift . TException { struct . validate ( ) ; oprot . writeStructBegin ( STRUCT_DESC ) ; if ( struct . column_names ! = null ) { if ( struct . isSetColumn_names ( ) ) { oprot . writeFieldBegin ( COLUMN_NAMES_FIELD_DESC ) ; { oprot . writeListBegin ( new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , struct . column_names . size ( ) ) ) ; for ( ByteBuffer _iter19 : struct . column_names ) { oprot . writeBinary ( _iter19 ) ; } oprot . writeListEnd ( ) ; } oprot . writeFieldEnd ( ) ; } } if ( struct . slice_range ! = null ) { if ( struct . isSetSlice_range ( ) ) { oprot . writeFieldBegin ( SLICE_RANGE_FIELD_DESC ) ; struct . slice_range . write ( oprot ) ; oprot . writeFieldEnd ( ) ; } } oprot . writeFieldStop ( ) ; oprot . writeStructEnd ( ) ; } } private static class SlicePredicateTupleSchemeFactory implements SchemeFactory { public SlicePredicateTupleScheme getScheme ( ) { return new SlicePredicateTupleScheme ( ) ; } } private static class SlicePredicateTupleScheme extends TupleScheme < SlicePredicate > { @Override public void write ( org . apache . thrift . protocol . TProtocol prot , SlicePredicate struct ) throws org . apache . thrift . TException { TTupleProtocol oprot = ( TTupleProtocol ) prot ; BitSet optionals = new BitSet ( ) ; if ( struct . isSetColumn_names ( ) ) { optionals . set ( <int> ) ; } if ( struct . isSetSlice_range ( ) ) { optionals . set ( <int> ) ; } oprot . writeBitSet ( optionals , <int> ) ; if ( struct . isSetColumn_names ( ) ) { { oprot . writeI32 ( struct . column_names . size ( ) ) ; for ( ByteBuffer _iter20 : struct . column_names ) { oprot . writeBinary ( _iter20 ) ; } } } if ( struct . isSetSlice_range ( ) ) { struct . slice_range . write ( oprot ) ; } } @Override public void read ( org . apache . thrift . protocol . TProtocol prot , SlicePredicate struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; BitSet incoming = iprot . readBitSet ( <int> ) ; if ( incoming . get ( <int> ) ) { { org . apache . thrift . protocol . TList _list21 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . STRING , iprot . readI32 ( ) ) ; struct . column_names = new ArrayList < ByteBuffer > ( _list21 . size ) ; for ( int _i22 = <int> ; _i22 < _list21 . size ; + + _i22 ) { ByteBuffer _elem23 ; _elem23 = iprot . readBinary ( ) ; struct . column_names . add ( _elem23 ) ; } } struct . setColumn_namesIsSet ( true ) ; } if ( incoming . get ( <int> ) ) { struct . slice_range = new SliceRange ( ) ; struct . slice_range . read ( iprot ) ; struct . setSlice_rangeIsSet ( true ) ; } } } } 

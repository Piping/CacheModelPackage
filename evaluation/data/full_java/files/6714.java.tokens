package org . elasticsearch . index . query . functionscore . script ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . lucene . search . function . ScoreFunction ; import org . elasticsearch . common . lucene . search . function . ScriptScoreFunction ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . query . QueryShardContext ; import org . elasticsearch . index . query . QueryShardException ; import org . elasticsearch . index . query . functionscore . ScoreFunctionBuilder ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . Script . ScriptField ; import org . elasticsearch . script . ScriptContext ; import org . elasticsearch . script . SearchScript ; import java . io . IOException ; import java . util . Objects ; public class ScriptScoreFunctionBuilder extends ScoreFunctionBuilder < ScriptScoreFunctionBuilder > { private final Script script ; public ScriptScoreFunctionBuilder ( Script script ) { if ( script = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . script = script ; } public Script getScript ( ) { return this . script ; } @Override public void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( getName ( ) ) ; builder . field ( ScriptField . SCRIPT . getPreferredName ( ) , script ) ; builder . endObject ( ) ; } @Override public String getName ( ) { return ScriptScoreFunctionParser . NAMES [ <int> ] ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { script . writeTo ( out ) ; } @Override protected ScriptScoreFunctionBuilder doReadFrom ( StreamInput in ) throws IOException { return new ScriptScoreFunctionBuilder ( Script . readScript ( in ) ) ; } @Override protected boolean doEquals ( ScriptScoreFunctionBuilder functionBuilder ) { return Objects . equals ( this . script , functionBuilder . script ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( this . script ) ; } @Override protected ScoreFunction doToFunction ( QueryShardContext context ) { try { SearchScript searchScript = context . getScriptService ( ) . search ( context . lookup ( ) , script , ScriptContext . Standard . SEARCH ) ; return new ScriptScoreFunction ( script , searchScript ) ; } catch ( Exception e ) { throw new QueryShardException ( context , <str> , e ) ; } } } 

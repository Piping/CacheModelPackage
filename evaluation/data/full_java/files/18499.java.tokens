package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input . Buttons ; import com . badlogic . gdx . Input . Keys ; import com . badlogic . gdx . InputProcessor ; import com . badlogic . gdx . tests . utils . GdxTest ; public class InputTest extends GdxTest implements InputProcessor { @Override public void create ( ) { Gdx . input . setInputProcessor ( this ) ; } @Override public void render ( ) { if ( Gdx . input . justTouched ( ) ) { Gdx . app . log ( <str> , <str> + ( Gdx . input . isButtonPressed ( Buttons . LEFT ) ? <str> : <str> ) + ( Gdx . input . isButtonPressed ( Buttons . MIDDLE ) ? <str> : <str> ) + ( Gdx . input . isButtonPressed ( Buttons . RIGHT ) ? <str> : <str> ) + ( Gdx . input . isButtonPressed ( Buttons . BACK ) ? <str> : <str> ) + ( Gdx . input . isButtonPressed ( Buttons . FORWARD ) ? <str> : <str> ) ) ; } for ( int i = <int> ; i < <int> ; i + + ) { if ( Gdx . input . getDeltaX ( i ) ! = <int> | | Gdx . input . getDeltaY ( i ) ! = <int> ) { Gdx . app . log ( <str> , <str> + i + <str> + Gdx . input . getDeltaX ( i ) + <str> + Gdx . input . getDeltaY ( i ) ) ; } } } @Override public boolean keyDown ( int keycode ) { Gdx . app . log ( <str> , <str> + keycode ) ; if ( keycode = = Keys . G ) Gdx . input . setCursorCatched ( ! Gdx . input . isCursorCatched ( ) ) ; return false ; } @Override public boolean keyTyped ( char character ) { Gdx . app . log ( <str> , <str> + character + <str> ) ; return false ; } @Override public boolean keyUp ( int keycode ) { Gdx . app . log ( <str> , <str> + keycode ) ; return false ; } @Override public boolean touchDown ( int x , int y , int pointer , int button ) { Gdx . app . log ( <str> , <str> + x + <str> + y + <str> + getButtonString ( button ) ) ; return false ; } @Override public boolean touchDragged ( int x , int y , int pointer ) { Gdx . app . log ( <str> , <str> + x + <str> + y + <str> + pointer ) ; return false ; } @Override public boolean touchUp ( int x , int y , int pointer , int button ) { Gdx . app . log ( <str> , <str> + x + <str> + y + <str> + getButtonString ( button ) ) ; return false ; } @Override public boolean mouseMoved ( int x , int y ) { Gdx . app . log ( <str> , <str> + x + <str> + y ) ; return false ; } @Override public boolean scrolled ( int amount ) { Gdx . app . log ( <str> , <str> + amount ) ; return false ; } private String getButtonString ( int button ) { if ( button = = Buttons . LEFT ) return <str> ; if ( button = = Buttons . RIGHT ) return <str> ; if ( button = = Buttons . MIDDLE ) return <str> ; if ( button = = Buttons . BACK ) return <str> ; if ( button = = Buttons . FORWARD ) return <str> ; return <str> ; } } 

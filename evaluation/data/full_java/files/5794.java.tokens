package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . binder . AnnotatedBindingBuilder ; import org . elasticsearch . common . inject . binder . AnnotatedConstantBindingBuilder ; import org . elasticsearch . common . inject . binder . AnnotatedElementBuilder ; import org . elasticsearch . common . inject . binder . LinkedBindingBuilder ; import org . elasticsearch . common . inject . matcher . Matcher ; import org . elasticsearch . common . inject . spi . Message ; import org . elasticsearch . common . inject . spi . TypeConverter ; import org . elasticsearch . common . inject . spi . TypeListener ; import java . lang . annotation . Annotation ; public abstract class PrivateModule implements Module { private PrivateBinder binder ; @Override public final synchronized void configure ( Binder binder ) { if ( this . binder ! = null ) { throw new IllegalStateException ( <str> ) ; } this . binder = ( PrivateBinder ) binder . skipSources ( PrivateModule . class ) ; try { configure ( ) ; } finally { this . binder = null ; } } protected abstract void configure ( ) ; protected final < T > void expose ( Key < T > key ) { binder . expose ( key ) ; } protected final AnnotatedElementBuilder expose ( Class < ? > type ) { return binder . expose ( type ) ; } protected final AnnotatedElementBuilder expose ( TypeLiteral < ? > type ) { return binder . expose ( type ) ; } protected final PrivateBinder binder ( ) { return binder ; } protected final void bindScope ( Class < ? extends Annotation > scopeAnnotation , Scope scope ) { binder . bindScope ( scopeAnnotation , scope ) ; } protected final < T > LinkedBindingBuilder < T > bind ( Key < T > key ) { return binder . bind ( key ) ; } protected final < T > AnnotatedBindingBuilder < T > bind ( TypeLiteral < T > typeLiteral ) { return binder . bind ( typeLiteral ) ; } protected final < T > AnnotatedBindingBuilder < T > bind ( Class < T > clazz ) { return binder . bind ( clazz ) ; } protected final AnnotatedConstantBindingBuilder bindConstant ( ) { return binder . bindConstant ( ) ; } protected final void install ( Module module ) { binder . install ( module ) ; } protected final void addError ( String message , Object . . . arguments ) { binder . addError ( message , arguments ) ; } protected final void addError ( Throwable t ) { binder . addError ( t ) ; } protected final void addError ( Message message ) { binder . addError ( message ) ; } protected final void requestInjection ( Object instance ) { binder . requestInjection ( instance ) ; } protected final void requestStaticInjection ( Class < ? > . . . types ) { binder . requestStaticInjection ( types ) ; } protected final void requireBinding ( Key < ? > key ) { binder . getProvider ( key ) ; } protected final void requireBinding ( Class < ? > type ) { binder . getProvider ( type ) ; } protected final < T > Provider < T > getProvider ( Key < T > key ) { return binder . getProvider ( key ) ; } protected final < T > Provider < T > getProvider ( Class < T > type ) { return binder . getProvider ( type ) ; } protected final void convertToTypes ( Matcher < ? super TypeLiteral < ? > > typeMatcher , TypeConverter converter ) { binder . convertToTypes ( typeMatcher , converter ) ; } protected final Stage currentStage ( ) { return binder . currentStage ( ) ; } protected < T > MembersInjector < T > getMembersInjector ( Class < T > type ) { return binder . getMembersInjector ( type ) ; } protected < T > MembersInjector < T > getMembersInjector ( TypeLiteral < T > type ) { return binder . getMembersInjector ( type ) ; } protected void bindListener ( Matcher < ? super TypeLiteral < ? > > typeMatcher , TypeListener listener ) { binder . bindListener ( typeMatcher , listener ) ; } } 

package org . apache . cassandra . cql3 . selection ; import java . nio . ByteBuffer ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . cql3 . ColumnSpecification ; import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . db . marshal . Int32Type ; import org . apache . cassandra . db . marshal . LongType ; import org . apache . cassandra . utils . ByteBufferUtil ; final class WritetimeOrTTLSelector extends Selector { private final String columnName ; private final int idx ; private final boolean isWritetime ; private ByteBuffer current ; private boolean isSet ; public static Factory newFactory ( final ColumnDefinition def , final int idx , final boolean isWritetime ) { return new Factory ( ) { protected String getColumnName ( ) { return String . format ( <str> , isWritetime ? <str> : <str> , def . name . toString ( ) ) ; } protected AbstractType < ? > getReturnType ( ) { return isWritetime ? LongType . instance : Int32Type . instance ; } protected void addColumnMapping ( SelectionColumnMapping mapping , ColumnSpecification resultsColumn ) { mapping . addMapping ( resultsColumn , def ) ; } public Selector newInstance ( ) { return new WritetimeOrTTLSelector ( def . name . toString ( ) , idx , isWritetime ) ; } public boolean isWritetimeSelectorFactory ( ) { return isWritetime ; } public boolean isTTLSelectorFactory ( ) { return ! isWritetime ; } } ; } public void addInput ( int protocolVersion , ResultSetBuilder rs ) { if ( isSet ) return ; isSet = true ; if ( isWritetime ) { long ts = rs . timestamps [ idx ] ; current = ts ! = Long . MIN_VALUE ? ByteBufferUtil . bytes ( ts ) : null ; } else { int ttl = rs . ttls [ idx ] ; current = ttl > <int> ? ByteBufferUtil . bytes ( ttl ) : null ; } } public ByteBuffer getOutput ( int protocolVersion ) { return current ; } public void reset ( ) { isSet = false ; current = null ; } public AbstractType < ? > getType ( ) { return isWritetime ? LongType . instance : Int32Type . instance ; } @Override public String toString ( ) { return columnName ; } private WritetimeOrTTLSelector ( String columnName , int idx , boolean isWritetime ) { this . columnName = columnName ; this . idx = idx ; this . isWritetime = isWritetime ; } } 

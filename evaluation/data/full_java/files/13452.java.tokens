package org . gradle . api . internal . tasks . compile ; import org . gradle . api . internal . tasks . compile . daemon . AbstractDaemonCompiler ; import org . gradle . api . internal . tasks . compile . daemon . CompilerDaemonFactory ; import org . gradle . api . internal . tasks . compile . daemon . DaemonForkOptions ; import org . gradle . api . tasks . compile . ForkOptions ; import org . gradle . language . base . internal . compile . Compiler ; import java . io . File ; import java . util . Collections ; public class DaemonJavaCompiler extends AbstractDaemonCompiler < JavaCompileSpec > { private static final Iterable < String > SHARED_PACKAGES = Collections . singleton ( <str> ) ; public DaemonJavaCompiler ( File daemonWorkingDir , Compiler < JavaCompileSpec > delegate , CompilerDaemonFactory compilerDaemonFactory ) { super ( daemonWorkingDir , delegate , compilerDaemonFactory ) ; } @Override protected DaemonForkOptions toDaemonOptions ( JavaCompileSpec spec ) { ForkOptions forkOptions = spec . getCompileOptions ( ) . getForkOptions ( ) ; return new DaemonForkOptions ( forkOptions . getMemoryInitialSize ( ) , forkOptions . getMemoryMaximumSize ( ) , forkOptions . getJvmArgs ( ) , Collections . < File > emptyList ( ) , SHARED_PACKAGES ) ; } } 

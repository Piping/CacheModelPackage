package org . gradle . api . internal . file . collections ; import org . gradle . api . file . ConfigurableFileCollection ; import org . gradle . api . internal . file . CompositeFileCollection ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . tasks . DefaultTaskDependency ; import org . gradle . api . internal . tasks . TaskDependencyResolveContext ; import org . gradle . api . internal . tasks . TaskResolver ; import org . gradle . util . GUtil ; import java . util . Arrays ; import java . util . LinkedHashSet ; import java . util . Set ; public class DefaultConfigurableFileCollection extends CompositeFileCollection implements ConfigurableFileCollection { private final Set < Object > files ; private final String displayName ; private final FileResolver resolver ; private final DefaultTaskDependency buildDependency ; public DefaultConfigurableFileCollection ( FileResolver fileResolver , TaskResolver taskResolver , Object . . . files ) { this ( <str> , fileResolver , taskResolver , files ) ; } public DefaultConfigurableFileCollection ( String displayName , FileResolver fileResolver , TaskResolver taskResolver , Object . . . files ) { this . displayName = displayName ; this . resolver = fileResolver ; this . files = new LinkedHashSet < Object > ( Arrays . asList ( files ) ) ; buildDependency = new DefaultTaskDependency ( taskResolver ) ; } public String getDisplayName ( ) { return displayName ; } public Set < Object > getFrom ( ) { return files ; } public void setFrom ( Iterable < ? > path ) { files . clear ( ) ; files . add ( path ) ; } public void setFrom ( Object . . . paths ) { files . clear ( ) ; GUtil . addToCollection ( files , Arrays . asList ( paths ) ) ; } public ConfigurableFileCollection from ( Object . . . paths ) { GUtil . addToCollection ( files , Arrays . asList ( paths ) ) ; return this ; } public ConfigurableFileCollection builtBy ( Object . . . tasks ) { buildDependency . add ( tasks ) ; return this ; } public Set < Object > getBuiltBy ( ) { return buildDependency . getValues ( ) ; } public ConfigurableFileCollection setBuiltBy ( Iterable < ? > tasks ) { buildDependency . setValues ( tasks ) ; return this ; } @Override public void visitContents ( FileCollectionResolveContext context ) { FileCollectionResolveContext nested = context . push ( resolver ) ; nested . add ( files ) ; } @Override public void visitDependencies ( TaskDependencyResolveContext context ) { context . add ( buildDependency ) ; super . visitDependencies ( context ) ; } } 

package org . elasticsearch . index . mapper . nested ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . index . mapper . internal . TypeFieldMapper ; import org . elasticsearch . index . mapper . object . ObjectMapper ; import org . elasticsearch . index . mapper . object . ObjectMapper . Dynamic ; import org . elasticsearch . test . ESSingleNodeTestCase ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class NestedMappingTests extends ESSingleNodeTestCase { public void testEmptyNested ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . nullField ( <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . docs ( ) . size ( ) , equalTo ( <int> ) ) ; doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . endArray ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . docs ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testSingleNested ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( docMapper . hasNestedObjects ( ) , equalTo ( true ) ) ; ObjectMapper nested1Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested1Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . docs ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( TypeFieldMapper . NAME ) , equalTo ( nested1Mapper . nestedTypePathAsString ( ) ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . docs ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( TypeFieldMapper . NAME ) , equalTo ( nested1Mapper . nestedTypePathAsString ( ) ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( TypeFieldMapper . NAME ) , equalTo ( nested1Mapper . nestedTypePathAsString ( ) ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testMultiNested ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( docMapper . hasNestedObjects ( ) , equalTo ( true ) ) ; ObjectMapper nested1Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested1Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; assertThat ( nested1Mapper . nested ( ) . isIncludeInParent ( ) , equalTo ( false ) ) ; assertThat ( nested1Mapper . nested ( ) . isIncludeInRoot ( ) , equalTo ( false ) ) ; ObjectMapper nested2Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested2Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; assertThat ( nested2Mapper . nested ( ) . isIncludeInParent ( ) , equalTo ( false ) ) ; assertThat ( nested2Mapper . nested ( ) . isIncludeInRoot ( ) , equalTo ( false ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endArray ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . docs ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; } public void testMultiObjectAndNested1 ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( docMapper . hasNestedObjects ( ) , equalTo ( true ) ) ; ObjectMapper nested1Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested1Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; assertThat ( nested1Mapper . nested ( ) . isIncludeInParent ( ) , equalTo ( false ) ) ; assertThat ( nested1Mapper . nested ( ) . isIncludeInRoot ( ) , equalTo ( false ) ) ; ObjectMapper nested2Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested2Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; assertThat ( nested2Mapper . nested ( ) . isIncludeInParent ( ) , equalTo ( true ) ) ; assertThat ( nested2Mapper . nested ( ) . isIncludeInRoot ( ) , equalTo ( false ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endArray ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . docs ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; } public void testMultiObjectAndNested2 ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( docMapper . hasNestedObjects ( ) , equalTo ( true ) ) ; ObjectMapper nested1Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested1Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; assertThat ( nested1Mapper . nested ( ) . isIncludeInParent ( ) , equalTo ( true ) ) ; assertThat ( nested1Mapper . nested ( ) . isIncludeInRoot ( ) , equalTo ( false ) ) ; ObjectMapper nested2Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested2Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; assertThat ( nested2Mapper . nested ( ) . isIncludeInParent ( ) , equalTo ( true ) ) ; assertThat ( nested2Mapper . nested ( ) . isIncludeInRoot ( ) , equalTo ( false ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endArray ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . docs ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . getFields ( <str> ) . length , equalTo ( <int> ) ) ; } public void testMultiRootAndNested1 ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( docMapper . hasNestedObjects ( ) , equalTo ( true ) ) ; ObjectMapper nested1Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested1Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; assertThat ( nested1Mapper . nested ( ) . isIncludeInParent ( ) , equalTo ( false ) ) ; assertThat ( nested1Mapper . nested ( ) . isIncludeInRoot ( ) , equalTo ( false ) ) ; ObjectMapper nested2Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested2Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; assertThat ( nested2Mapper . nested ( ) . isIncludeInParent ( ) , equalTo ( false ) ) ; assertThat ( nested2Mapper . nested ( ) . isIncludeInRoot ( ) , equalTo ( true ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endArray ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . docs ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . getFields ( <str> ) . length , equalTo ( <int> ) ) ; } public void testNestedArrayStrict ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( docMapper . hasNestedObjects ( ) , equalTo ( true ) ) ; ObjectMapper nested1Mapper = docMapper . objectMappers ( ) . get ( <str> ) ; assertThat ( nested1Mapper . nested ( ) . isNested ( ) , equalTo ( true ) ) ; assertThat ( nested1Mapper . dynamic ( ) , equalTo ( Dynamic . STRICT ) ) ; ParsedDocument doc = docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . bytes ( ) ) ; assertThat ( doc . docs ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , nullValue ( ) ) ; assertThat ( doc . docs ( ) . get ( <int> ) . get ( <str> ) , equalTo ( <str> ) ) ; } } 

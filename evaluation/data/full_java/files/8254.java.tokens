package org . elasticsearch . index . query ; import org . apache . lucene . search . join . ScoreMode ; import org . elasticsearch . common . geo . GeoDistance ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . geo . ShapeRelation ; import org . elasticsearch . common . geo . builders . ShapeBuilders ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . index . query . MoreLikeThisQueryBuilder . Item ; import org . elasticsearch . index . query . functionscore . FunctionScoreQueryBuilder ; import org . elasticsearch . index . query . functionscore . FunctionScoreQueryBuilder . FilterFunctionBuilder ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . index . query . QueryBuilders . boolQuery ; import static org . elasticsearch . index . query . QueryBuilders . boostingQuery ; import static org . elasticsearch . index . query . QueryBuilders . commonTermsQuery ; import static org . elasticsearch . index . query . QueryBuilders . constantScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . disMaxQuery ; import static org . elasticsearch . index . query . QueryBuilders . existsQuery ; import static org . elasticsearch . index . query . QueryBuilders . functionScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . fuzzyQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoBoundingBoxQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoDistanceQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoDistanceRangeQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoHashCellQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoPolygonQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoShapeQuery ; import static org . elasticsearch . index . query . QueryBuilders . hasChildQuery ; import static org . elasticsearch . index . query . QueryBuilders . hasParentQuery ; import static org . elasticsearch . index . query . QueryBuilders . idsQuery ; import static org . elasticsearch . index . query . QueryBuilders . indicesQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchQuery ; import static org . elasticsearch . index . query . QueryBuilders . moreLikeThisQuery ; import static org . elasticsearch . index . query . QueryBuilders . multiMatchQuery ; import static org . elasticsearch . index . query . QueryBuilders . nestedQuery ; import static org . elasticsearch . index . query . QueryBuilders . prefixQuery ; import static org . elasticsearch . index . query . QueryBuilders . queryStringQuery ; import static org . elasticsearch . index . query . QueryBuilders . rangeQuery ; import static org . elasticsearch . index . query . QueryBuilders . regexpQuery ; import static org . elasticsearch . index . query . QueryBuilders . scriptQuery ; import static org . elasticsearch . index . query . QueryBuilders . simpleQueryStringQuery ; import static org . elasticsearch . index . query . QueryBuilders . spanContainingQuery ; import static org . elasticsearch . index . query . QueryBuilders . spanFirstQuery ; import static org . elasticsearch . index . query . QueryBuilders . spanMultiTermQueryBuilder ; import static org . elasticsearch . index . query . QueryBuilders . spanNearQuery ; import static org . elasticsearch . index . query . QueryBuilders . spanNotQuery ; import static org . elasticsearch . index . query . QueryBuilders . spanOrQuery ; import static org . elasticsearch . index . query . QueryBuilders . spanTermQuery ; import static org . elasticsearch . index . query . QueryBuilders . spanWithinQuery ; import static org . elasticsearch . index . query . QueryBuilders . templateQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . index . query . QueryBuilders . termsQuery ; import static org . elasticsearch . index . query . QueryBuilders . typeQuery ; import static org . elasticsearch . index . query . QueryBuilders . wildcardQuery ; import static org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders . exponentialDecayFunction ; import static org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders . randomFunction ; public class QueryDSLDocumentationTests extends ESTestCase { public void testBool ( ) { boolQuery ( ) . must ( termQuery ( <str> , <str> ) ) . must ( termQuery ( <str> , <str> ) ) . mustNot ( termQuery ( <str> , <str> ) ) . should ( termQuery ( <str> , <str> ) ) . filter ( termQuery ( <str> , <str> ) ) ; } public void testBoosting ( ) { boostingQuery ( termQuery ( <str> , <str> ) , termQuery ( <str> , <str> ) ) . negativeBoost ( <float> ) ; } public void testCommonTerms ( ) { commonTermsQuery ( <str> , <str> ) ; } public void testConstantScore ( ) { constantScoreQuery ( termQuery ( <str> , <str> ) ) . boost ( <float> ) ; } public void testDisMax ( ) { disMaxQuery ( ) . add ( termQuery ( <str> , <str> ) ) . add ( termQuery ( <str> , <str> ) ) . boost ( <float> ) . tieBreaker ( <float> ) ; } public void testExists ( ) { existsQuery ( <str> ) ; } public void testFunctionScore ( ) { FilterFunctionBuilder [ ] functions = { new FunctionScoreQueryBuilder . FilterFunctionBuilder ( matchQuery ( <str> , <str> ) , randomFunction ( <str> ) ) , new FunctionScoreQueryBuilder . FilterFunctionBuilder ( exponentialDecayFunction ( <str> , <int> L , <int> ) ) } ; functionScoreQuery ( functions ) ; } public void testFuzzy ( ) { fuzzyQuery ( <str> , <str> ) ; } public void testGeoBoundingBox ( ) { geoBoundingBoxQuery ( <str> ) . setCorners ( <float> , - <float> , <float> , - <float> ) ; } public void testGeoDistance ( ) { geoDistanceQuery ( <str> ) . point ( <int> , - <int> ) . distance ( <int> , DistanceUnit . KILOMETERS ) . optimizeBbox ( <str> ) . geoDistance ( GeoDistance . ARC ) ; } public void testGeoDistanceRange ( ) { geoDistanceRangeQuery ( <str> , new GeoPoint ( <int> , - <int> ) ) . from ( <str> ) . to ( <str> ) . includeLower ( true ) . includeUpper ( false ) . optimizeBbox ( <str> ) . geoDistance ( GeoDistance . ARC ) ; } public void testGeoPolygon ( ) { List < GeoPoint > points = new ArrayList < GeoPoint > ( ) ; points . add ( new GeoPoint ( <int> , - <int> ) ) ; points . add ( new GeoPoint ( <int> , - <int> ) ) ; points . add ( new GeoPoint ( <int> , - <int> ) ) ; geoPolygonQuery ( <str> , points ) ; } public void testGeoShape ( ) throws IOException { GeoShapeQueryBuilder qb = geoShapeQuery ( <str> , ShapeBuilders . newMultiPoint ( ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) ) ; qb . relation ( ShapeRelation . WITHIN ) ; qb = geoShapeQuery ( <str> , <str> , <str> ) ; qb . relation ( ShapeRelation . WITHIN ) . indexedShapeIndex ( <str> ) . indexedShapePath ( <str> ) ; } public void testGeoHashCell ( ) { geoHashCellQuery ( <str> , new GeoPoint ( <float> , <float> ) ) . neighbors ( true ) . precision ( <int> ) ; } public void testHasChild ( ) { hasChildQuery ( <str> , termQuery ( <str> , <str> ) ) ; } public void testHasParent ( ) { hasParentQuery ( <str> , termQuery ( <str> , <str> ) ) ; } public void testIds ( ) { idsQuery ( <str> , <str> ) . addIds ( <str> , <str> , <str> ) ; idsQuery ( ) . addIds ( <str> , <str> , <str> ) ; } public void testIndices ( ) { indicesQuery ( termQuery ( <str> , <str> ) , <str> , <str> ) . noMatchQuery ( termQuery ( <str> , <str> ) ) ; indicesQuery ( termQuery ( <str> , <str> ) , <str> , <str> ) . noMatchQuery ( <str> ) ; } public void testMatchAll ( ) { matchAllQuery ( ) ; } public void testMatch ( ) { matchQuery ( <str> , <str> ) ; } public void testMLT ( ) { String [ ] fields = { <str> , <str> } ; String [ ] texts = { <str> } ; Item [ ] items = null ; moreLikeThisQuery ( fields , texts , items ) . minTermFreq ( <int> ) . maxQueryTerms ( <int> ) ; } public void testMultiMatch ( ) { multiMatchQuery ( <str> , <str> , <str> ) ; } public void testNested ( ) { nestedQuery ( <str> , boolQuery ( ) . must ( matchQuery ( <str> , <str> ) ) . must ( rangeQuery ( <str> ) . gt ( <int> ) ) ) . scoreMode ( ScoreMode . Avg ) ; } public void testPrefix ( ) { prefixQuery ( <str> , <str> ) ; } public void testQueryString ( ) { queryStringQuery ( <str> ) ; } public void testRange ( ) { rangeQuery ( <str> ) . from ( <int> ) . to ( <int> ) . includeLower ( true ) . includeUpper ( false ) ; rangeQuery ( <str> ) . gte ( <str> ) . lt ( <str> ) ; } public void testRegExp ( ) { regexpQuery ( <str> , <str> ) ; } public void testScript ( ) { scriptQuery ( new Script ( <str> ) ) ; Map < String , Integer > parameters = new HashMap < > ( ) ; parameters . put ( <str> , <int> ) ; scriptQuery ( new Script ( <str> , ScriptType . FILE , <str> , parameters ) ) ; } public void testSimpleQueryString ( ) { simpleQueryStringQuery ( <str> ) ; } public void testSpanContaining ( ) { spanContainingQuery ( spanNearQuery ( spanTermQuery ( <str> , <str> ) , <int> ) . clause ( spanTermQuery ( <str> , <str> ) ) . inOrder ( true ) , spanTermQuery ( <str> , <str> ) ) ; } public void testSpanFirst ( ) { spanFirstQuery ( spanTermQuery ( <str> , <str> ) , <int> ) ; } public void testSpanMultiTerm ( ) { spanMultiTermQueryBuilder ( prefixQuery ( <str> , <str> ) ) ; } public void testSpanNear ( ) { spanNearQuery ( spanTermQuery ( <str> , <str> ) , <int> ) . clause ( spanTermQuery ( <str> , <str> ) ) . clause ( spanTermQuery ( <str> , <str> ) ) . inOrder ( false ) . collectPayloads ( false ) ; } public void testSpanNot ( ) { spanNotQuery ( spanTermQuery ( <str> , <str> ) , spanTermQuery ( <str> , <str> ) ) ; } public void testSpanOr ( ) { spanOrQuery ( spanTermQuery ( <str> , <str> ) ) . clause ( spanTermQuery ( <str> , <str> ) ) . clause ( spanTermQuery ( <str> , <str> ) ) ; } public void testSpanTerm ( ) { spanTermQuery ( <str> , <str> ) ; } public void testSpanWithin ( ) { spanWithinQuery ( spanNearQuery ( spanTermQuery ( <str> , <str> ) , <int> ) . clause ( spanTermQuery ( <str> , <str> ) ) . inOrder ( true ) , spanTermQuery ( <str> , <str> ) ) ; } public void testTemplate ( ) { templateQuery ( <str> , ScriptType . INDEXED , new HashMap < > ( ) ) ; } public void testTerm ( ) { termQuery ( <str> , <str> ) ; } public void testTerms ( ) { termsQuery ( <str> , <str> , <str> ) ; } public void testType ( ) { typeQuery ( <str> ) ; } public void testWildcard ( ) { wildcardQuery ( <str> , <str> ) ; } } 

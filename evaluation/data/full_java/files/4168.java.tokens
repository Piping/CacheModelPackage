package org . eclipse . debug . internal . ui . elements . adapters ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockExtension ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . resource . ImageDescriptor ; public class MemoryBlockLabelAdapter extends AsynchronousDebugLabelAdapter { @Override protected ImageDescriptor [ ] getImageDescriptors ( Object element , IPresentationContext context ) throws CoreException { if ( element instanceof IMemoryBlock ) return new ImageDescriptor [ ] { DebugPluginImages . getImageDescriptor ( IDebugUIConstants . IMG_OBJS_VARIABLE ) } ; return new ImageDescriptor [ <int> ] ; } private String getLabel ( IMemoryBlock memoryBlock ) { String memoryBlockLabel = <str> ; if ( memoryBlock instanceof IMemoryBlockExtension ) { if ( ( ( IMemoryBlockExtension ) memoryBlock ) . getExpression ( ) ! = null ) { memoryBlockLabel + = ( ( IMemoryBlockExtension ) memoryBlock ) . getExpression ( ) ; } } else { long address = memoryBlock . getStartAddress ( ) ; memoryBlockLabel = Long . toHexString ( address ) ; } return memoryBlockLabel ; } @Override protected String [ ] getLabels ( Object element , IPresentationContext context ) throws CoreException { if ( element instanceof IMemoryBlock ) return new String [ ] { getLabel ( ( IMemoryBlock ) element ) } ; return super . getLabels ( element , context ) ; } } 

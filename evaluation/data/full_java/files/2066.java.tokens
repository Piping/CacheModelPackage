package org . nd4j . linalg . api . ops . impl . transforms ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . BaseTransformOp ; import org . nd4j . linalg . api . ops . Op ; import org . nd4j . linalg . factory . Nd4j ; public class HardTanhDerivative extends BaseTransformOp { public HardTanhDerivative ( ) { } public HardTanhDerivative ( INDArray x , INDArray z ) { super ( x , z ) ; } public HardTanhDerivative ( INDArray x , INDArray z , int n ) { super ( x , z , n ) ; } public HardTanhDerivative ( INDArray x , INDArray y , INDArray z , int n ) { super ( x , y , z , n ) ; } public HardTanhDerivative ( INDArray x ) { super ( x ) ; } @Override public String name ( ) { return <str> ; } @Override public IComplexNumber op ( IComplexNumber origin , double other ) { double r = origin . realComponent ( ) . doubleValue ( ) ; return ( r > = - <int> & & r < = <int> ) ? Nd4j . createDouble ( <int> , <int> ) : Nd4j . createDouble ( <int> , <int> ) ; } @Override public IComplexNumber op ( IComplexNumber origin , float other ) { double r = origin . realComponent ( ) . doubleValue ( ) ; return ( r > = - <int> & & r < = <int> ) ? Nd4j . createDouble ( <int> , <int> ) : Nd4j . createDouble ( <int> , <int> ) ; } @Override public IComplexNumber op ( IComplexNumber origin , IComplexNumber other ) { double r = origin . realComponent ( ) . doubleValue ( ) ; return ( r > = - <int> & & r < = <int> ) ? Nd4j . createDouble ( <int> , <int> ) : Nd4j . createDouble ( <int> , <int> ) ; } @Override public float op ( float origin , float other ) { return hardTanhDeriv ( origin ) ; } @Override public double op ( double origin , double other ) { return hardTanhDeriv ( origin ) ; } @Override public double op ( double origin ) { return hardTanhDeriv ( origin ) ; } @Override public float op ( float origin ) { return hardTanhDeriv ( origin ) ; } @Override public IComplexNumber op ( IComplexNumber origin ) { double r = origin . realComponent ( ) . doubleValue ( ) ; return ( r > = - <int> & & r < = <int> ) ? Nd4j . createDouble ( <int> , <int> ) : Nd4j . createDouble ( <int> , <int> ) ; } private static float hardTanhDeriv ( float num ) { return ( ( num > = - <float> & & num < = <float> ) ? <float> : <float> ) ; } private static double hardTanhDeriv ( double num ) { return ( ( num > = - <float> & & num < = <float> ) ? <float> : <float> ) ; } @Override public Op opForDimension ( int index , int dimension ) { INDArray xAlongDimension = x . vectorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new HardTanhDerivative ( xAlongDimension , y . vectorAlongDimension ( index , dimension ) , z . vectorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; else return new HardTanhDerivative ( xAlongDimension , z . vectorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; } @Override public Op opForDimension ( int index , int . . . dimension ) { INDArray xAlongDimension = x . tensorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new HardTanhDerivative ( xAlongDimension , y . tensorAlongDimension ( index , dimension ) , z . tensorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; else return new HardTanhDerivative ( xAlongDimension , z . tensorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; } } 

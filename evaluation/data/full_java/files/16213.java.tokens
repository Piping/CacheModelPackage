package org . gradle . foundation . visitors ; import org . gradle . foundation . ProjectView ; import org . gradle . foundation . TaskView ; import org . gradle . gradleplugin . foundation . filters . AllowAllProjectAndTaskFilter ; import org . gradle . gradleplugin . foundation . filters . ProjectAndTaskFilter ; import org . gradle . util . CollectionUtils ; import org . gradle . util . GUtil ; import java . util . * ; public class TaskTreePopulationVisitor { public interface Visitor < P , T > { public P visitProject ( ProjectView project , int indexOfProject , P parentProjectObject ) ; public T visitTask ( TaskView task , int indexOfTask , ProjectView tasksProject , P userProjectObject ) ; public void completedVisitingProject ( P parentProjectObject , List < P > projectObjects , List < T > taskObjects ) ; } public static < P , T > void visitProjectAndTasks ( List < ProjectView > projects , Visitor < P , T > visitor , P rootProjectObject ) { visitProjectAndTasks ( projects , visitor , new AllowAllProjectAndTaskFilter ( ) , rootProjectObject ) ; } public static < P , T > void visitProjectAndTasks ( List < ProjectView > projects , Visitor < P , T > visitor , ProjectAndTaskFilter filter , P rootProjectObject ) { List < P > userProjectObjects = visitProjects ( visitor , filter , projects , rootProjectObject , new AlphabeticalProjectNameComparator ( ) , new AlphabeticalTaskNameComparator ( ) ) ; visitor . completedVisitingProject ( rootProjectObject , userProjectObjects , Collections . < T > emptyList ( ) ) ; } private static < P , T > List < P > visitProjects ( Visitor < P , T > visitor , ProjectAndTaskFilter filter , List < ProjectView > sourceProjects , P parentProjectObject , Comparator < ProjectView > projectSorter , Comparator < TaskView > taskSorter ) { List < P > projectObjects = new ArrayList < P > ( ) ; sourceProjects = CollectionUtils . sort ( sourceProjects , projectSorter ) ; Iterator < ProjectView > iterator = sourceProjects . iterator ( ) ; int index = <int> ; while ( iterator . hasNext ( ) ) { ProjectView project = iterator . next ( ) ; if ( filter . doesAllowProject ( project ) ) { P userProjectObject = visitor . visitProject ( project , index , parentProjectObject ) ; projectObjects . add ( userProjectObject ) ; List < P > subProjectObjects = visitProjects ( visitor , filter , project . getSubProjects ( ) , userProjectObject , projectSorter , taskSorter ) ; List < T > taskObjects = visitTasks ( visitor , filter , project , subProjectObjects . size ( ) , userProjectObject , taskSorter ) ; visitor . completedVisitingProject ( userProjectObject , subProjectObjects , taskObjects ) ; } index + + ; } return projectObjects ; } private static < P , T > List < T > visitTasks ( Visitor < P , T > visitor , ProjectAndTaskFilter filter , ProjectView project , int startingIndex , P userProjectObject , Comparator < TaskView > taskSorter ) { List < T > taskObjects = new ArrayList < T > ( ) ; List < TaskView > tasks = CollectionUtils . sort ( project . getTasks ( ) , taskSorter ) ; Iterator < TaskView > iterator = tasks . iterator ( ) ; int index = startingIndex ; while ( iterator . hasNext ( ) ) { TaskView task = iterator . next ( ) ; if ( filter . doesAllowTask ( task ) ) { T taskObject = visitor . visitTask ( task , index , project , userProjectObject ) ; taskObjects . add ( taskObject ) ; } index + + ; } return taskObjects ; } public static class AlphabeticalProjectNameComparator implements Comparator < ProjectView > { public int compare ( ProjectView o1 , ProjectView o2 ) { return GUtil . caseInsensitive ( ) . compare ( o1 . getName ( ) , o2 . getName ( ) ) ; } } public static class AlphabeticalTaskNameComparator implements Comparator < TaskView > { public int compare ( TaskView o1 , TaskView o2 ) { return GUtil . caseInsensitive ( ) . compare ( o1 . getName ( ) , o2 . getName ( ) ) ; } } } 

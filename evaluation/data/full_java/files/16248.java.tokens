package org . gradle . gradleplugin . userinterface . swing . generic ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . userinterface . AlternateUIInteraction ; import javax . imageio . ImageIO ; import javax . swing . * ; import java . awt . * ; import java . awt . event . MouseAdapter ; import java . awt . event . MouseEvent ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . io . InputStream ; public class OutputTab extends OutputPanel { private static final Logger LOGGER = Logging . getLogger ( OutputTab . class ) ; private JPanel mainPanel ; private JLabel mainTextLabel ; private JLabel pinnedLabel ; private JLabel closeLabel ; private static ImageIcon closeIcon ; private static ImageIcon closeHighlightIcon ; private static ImageIcon pinnedIcon ; public OutputTab ( GradlePluginLord gradlePluginLord , OutputPanelParent parent , String header , AlternateUIInteraction alternateUIInteraction ) { super ( gradlePluginLord , parent , alternateUIInteraction ) ; mainPanel = new JPanel ( ) ; mainPanel . setOpaque ( false ) ; mainPanel . setLayout ( new BoxLayout ( mainPanel , BoxLayout . X_AXIS ) ) ; mainTextLabel = new JLabel ( header ) ; if ( pinnedIcon = = null ) { pinnedIcon = getImageIconResource ( <str> ) ; } pinnedLabel = new JLabel ( pinnedIcon ) ; pinnedLabel . setVisible ( isPinned ( ) ) ; setupCloseLabel ( ) ; mainPanel . add ( mainTextLabel ) ; mainPanel . add ( Box . createHorizontalStrut ( <int> ) ) ; mainPanel . add ( pinnedLabel ) ; mainPanel . add ( closeLabel ) ; } private void setupCloseLabel ( ) { if ( closeIcon = = null ) { closeIcon = getImageIconResource ( <str> ) ; closeHighlightIcon = getImageIconResource ( <str> ) ; } closeLabel = new JLabel ( closeIcon ) ; closeLabel . addMouseListener ( new MouseAdapter ( ) { @Override public void mouseEntered ( MouseEvent e ) { closeLabel . setIcon ( closeHighlightIcon ) ; } @Override public void mouseExited ( MouseEvent e ) { closeLabel . setIcon ( closeIcon ) ; } public void mouseClicked ( MouseEvent e ) { close ( ) ; } } ) ; } private BufferedImage getImageResource ( String imageResourceName ) { InputStream inputStream = getClass ( ) . getResourceAsStream ( imageResourceName ) ; if ( inputStream ! = null ) { try { BufferedImage image = ImageIO . read ( inputStream ) ; return image ; } catch ( IOException e ) { LOGGER . error ( <str> + imageResourceName , e ) ; } } return null ; } private ImageIcon getImageIconResource ( String imageIconResourceName ) { BufferedImage image = getImageResource ( imageIconResourceName ) ; if ( image ! = null ) { return new ImageIcon ( image ) ; } return null ; } @Override public void reset ( ) { super . reset ( ) ; closeLabel . setEnabled ( true ) ; } public Component getTabHeader ( ) { return mainPanel ; } public void setTabHeaderText ( String newText ) { mainTextLabel . setText ( newText ) ; } public boolean close ( ) { closeLabel . setEnabled ( false ) ; boolean result = super . close ( ) ; if ( result ) { closeLabel . setEnabled ( true ) ; } return result ; } @Override public void setPinned ( boolean pinned ) { pinnedLabel . setVisible ( pinned ) ; super . setPinned ( pinned ) ; } } 

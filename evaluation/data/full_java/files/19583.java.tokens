package io . netty . handler . codec . socksx . v5 ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import org . junit . Test ; import java . util . Arrays ; import static org . junit . Assert . * ; public class Socks5CommandResponseDecoderTest { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( Socks5CommandResponseDecoderTest . class ) ; private static final Socks5CommandStatus [ ] STATUSES = { Socks5CommandStatus . ADDRESS_UNSUPPORTED , Socks5CommandStatus . COMMAND_UNSUPPORTED , Socks5CommandStatus . CONNECTION_REFUSED , Socks5CommandStatus . FAILURE , Socks5CommandStatus . FORBIDDEN , Socks5CommandStatus . HOST_UNREACHABLE , Socks5CommandStatus . NETWORK_UNREACHABLE , Socks5CommandStatus . SUCCESS , Socks5CommandStatus . TTL_EXPIRED } ; private static void test ( Socks5CommandStatus status , Socks5AddressType bndAddrType , String bndAddr , int bndPort ) { logger . debug ( <str> + status + <str> + bndAddrType ) ; Socks5CommandResponse msg = new DefaultSocks5CommandResponse ( status , bndAddrType , bndAddr , bndPort ) ; EmbeddedChannel embedder = new EmbeddedChannel ( new Socks5CommandResponseDecoder ( ) ) ; Socks5CommonTestUtils . writeFromServerToClient ( embedder , msg ) ; msg = embedder . readInbound ( ) ; assertEquals ( msg . status ( ) , status ) ; if ( bndAddr ! = null ) { assertEquals ( msg . bndAddr ( ) , bndAddr ) ; } assertEquals ( msg . bndPort ( ) , bndPort ) ; assertNull ( embedder . readInbound ( ) ) ; } @Test public void testSocksCmdResponseDecoder ( ) { for ( Socks5CommandStatus cmdStatus : STATUSES ) { for ( Socks5AddressType addressType : Arrays . asList ( Socks5AddressType . DOMAIN , Socks5AddressType . IPv4 , Socks5AddressType . IPv6 ) ) { test ( cmdStatus , addressType , null , <int> ) ; } } } @Test ( expected = IllegalArgumentException . class ) public void testInvalidAddress ( ) { test ( Socks5CommandStatus . SUCCESS , Socks5AddressType . IPv4 , <str> , <int> ) ; } @Test public void testSocksCmdResponseDecoderIncludingHost ( ) { for ( Socks5CommandStatus cmdStatus : STATUSES ) { test ( cmdStatus , Socks5AddressType . IPv4 , <str> , <int> ) ; test ( cmdStatus , Socks5AddressType . DOMAIN , <str> , <int> ) ; test ( cmdStatus , Socks5AddressType . IPv6 , <str> , <int> ) ; test ( cmdStatus , Socks5AddressType . IPv6 , <str> , <int> ) ; } } } 

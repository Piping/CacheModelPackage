package org . junit . rules ; import static org . junit . Assert . fail ; import java . io . File ; import java . io . IOException ; import org . junit . Rule ; public class TemporaryFolder extends ExternalResource { private final File parentFolder ; private final boolean assureDeletion ; private File folder ; public TemporaryFolder ( ) { this ( ( File ) null ) ; } public TemporaryFolder ( File parentFolder ) { this . parentFolder = parentFolder ; this . assureDeletion = false ; } protected TemporaryFolder ( Builder builder ) { this . parentFolder = builder . parentFolder ; this . assureDeletion = builder . assureDeletion ; } public static Builder builder ( ) { return new Builder ( ) ; } public static class Builder { private File parentFolder ; private boolean assureDeletion ; protected Builder ( ) { } public Builder parentFolder ( File parentFolder ) { this . parentFolder = parentFolder ; return this ; } public Builder assureDeletion ( ) { this . assureDeletion = true ; return this ; } public TemporaryFolder build ( ) { return new TemporaryFolder ( this ) ; } } @Override protected void before ( ) throws Throwable { create ( ) ; } @Override protected void after ( ) { delete ( ) ; } public void create ( ) throws IOException { folder = createTemporaryFolderIn ( parentFolder ) ; } public File newFile ( String fileName ) throws IOException { File file = new File ( getRoot ( ) , fileName ) ; if ( ! file . createNewFile ( ) ) { throw new IOException ( <str> + fileName + <str> ) ; } return file ; } public File newFile ( ) throws IOException { return File . createTempFile ( <str> , null , getRoot ( ) ) ; } public File newFolder ( String folder ) throws IOException { return newFolder ( new String [ ] { folder } ) ; } public File newFolder ( String . . . folderNames ) throws IOException { File file = getRoot ( ) ; for ( int i = <int> ; i < folderNames . length ; i + + ) { String folderName = folderNames [ i ] ; validateFolderName ( folderName ) ; file = new File ( file , folderName ) ; if ( ! file . mkdir ( ) & & isLastElementInArray ( i , folderNames ) ) { throw new IOException ( <str> + folderName + <str> ) ; } } return file ; } private void validateFolderName ( String folderName ) throws IOException { File tempFile = new File ( folderName ) ; if ( tempFile . getParent ( ) ! = null ) { String errorMsg = <str> + <str> ; throw new IOException ( errorMsg ) ; } } private boolean isLastElementInArray ( int index , String [ ] array ) { return index = = array . length - <int> ; } public File newFolder ( ) throws IOException { return createTemporaryFolderIn ( getRoot ( ) ) ; } private File createTemporaryFolderIn ( File parentFolder ) throws IOException { File createdFolder = File . createTempFile ( <str> , <str> , parentFolder ) ; createdFolder . delete ( ) ; createdFolder . mkdir ( ) ; return createdFolder ; } public File getRoot ( ) { if ( folder = = null ) { throw new IllegalStateException ( <str> ) ; } return folder ; } public void delete ( ) { if ( ! tryDelete ( ) ) { if ( assureDeletion ) { fail ( <str> + folder ) ; } } } protected boolean tryDelete ( ) { if ( folder = = null ) { return true ; } return recursiveDelete ( folder ) ; } private boolean recursiveDelete ( File file ) { boolean result = true ; File [ ] files = file . listFiles ( ) ; if ( files ! = null ) { for ( File each : files ) { result = result & & recursiveDelete ( each ) ; } } return result & & file . delete ( ) ; } } 

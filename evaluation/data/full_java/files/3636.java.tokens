package org . eclipse . debug . core . sourcelookup ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . MultiStatus ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . internal . core . sourcelookup . SourceLookupMessages ; public abstract class AbstractSourceLookupParticipant implements ISourceLookupParticipant { private ISourceLookupDirector fDirector ; protected static final Object [ ] EMPTY = new Object [ <int> ] ; @Override public void init ( ISourceLookupDirector director ) { fDirector = director ; } @Override public void dispose ( ) { fDirector = null ; } @Override public Object [ ] findSourceElements ( Object object ) throws CoreException { List < Object > results = null ; CoreException single = null ; MultiStatus multiStatus = null ; if ( isFindDuplicates ( ) ) { results = new ArrayList < Object > ( ) ; } String name = getSourceName ( object ) ; if ( name ! = null ) { ISourceContainer [ ] containers = getSourceContainers ( ) ; for ( int i = <int> ; i < containers . length ; i + + ) { try { ISourceContainer container = getDelegateContainer ( containers [ i ] ) ; if ( container ! = null ) { Object [ ] objects = container . findSourceElements ( name ) ; if ( objects . length > <int> ) { if ( results ! = null ) { for ( int j = <int> ; j < objects . length ; j + + ) { results . add ( objects [ j ] ) ; } } else { if ( objects . length = = <int> ) { return objects ; } return new Object [ ] { objects [ <int> ] } ; } } } } catch ( CoreException e ) { if ( single = = null ) { single = e ; } else if ( multiStatus = = null ) { multiStatus = new MultiStatus ( DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , new IStatus [ ] { single . getStatus ( ) } , SourceLookupMessages . Source_Lookup_Error , null ) ; multiStatus . add ( e . getStatus ( ) ) ; } else { multiStatus . add ( e . getStatus ( ) ) ; } } } } if ( results = = null ) { if ( multiStatus ! = null ) { throw new CoreException ( multiStatus ) ; } else if ( single ! = null ) { throw single ; } return EMPTY ; } return results . toArray ( ) ; } protected ISourceContainer getDelegateContainer ( ISourceContainer container ) { return container ; } protected ISourceLookupDirector getDirector ( ) { return fDirector ; } public boolean isFindDuplicates ( ) { ISourceLookupDirector director = getDirector ( ) ; if ( director ! = null ) { return director . isFindDuplicates ( ) ; } return false ; } protected ISourceContainer [ ] getSourceContainers ( ) { ISourceLookupDirector director = getDirector ( ) ; if ( director ! = null ) { return director . getSourceContainers ( ) ; } return new ISourceContainer [ <int> ] ; } @Override public void sourceContainersChanged ( ISourceLookupDirector director ) { } } 

package org . gradle . internal . typeconversion ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; public class JustReturningConverter < N , T > implements NotationConverter < N , T > { private final Class < ? extends T > passThroughType ; public JustReturningConverter ( Class < ? extends T > passThroughType ) { this . passThroughType = passThroughType ; } @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( String . format ( <str> , passThroughType . getSimpleName ( ) ) ) ; } @Override public void convert ( N notation , NotationConvertResult < ? super T > result ) throws TypeConversionException { if ( passThroughType . isInstance ( notation ) ) { result . converted ( passThroughType . cast ( notation ) ) ; } } } 

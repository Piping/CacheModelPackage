package org . gradle . process . internal . streams ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . concurrent . CompositeStoppable ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . concurrent . Executor ; public class ExecOutputHandleRunner implements Runnable { private final static Logger LOGGER = Logging . getLogger ( ExecOutputHandleRunner . class ) ; private final String displayName ; private final InputStream inputStream ; private final OutputStream outputStream ; private final int bufferSize ; public ExecOutputHandleRunner ( String displayName , InputStream inputStream , OutputStream outputStream ) { this ( displayName , inputStream , outputStream , <int> ) ; } ExecOutputHandleRunner ( String displayName , InputStream inputStream , OutputStream outputStream , int bufferSize ) { this . displayName = displayName ; this . inputStream = inputStream ; this . outputStream = outputStream ; this . bufferSize = bufferSize ; } public void run ( ) { byte [ ] buffer = new byte [ bufferSize ] ; try { while ( true ) { int nread = inputStream . read ( buffer ) ; if ( nread < <int> ) { break ; } outputStream . write ( buffer , <int> , nread ) ; outputStream . flush ( ) ; } CompositeStoppable . stoppable ( inputStream , outputStream ) . stop ( ) ; } catch ( Throwable t ) { LOGGER . error ( String . format ( <str> , displayName ) , t ) ; } } public void run ( Executor executor ) { executor . execute ( this ) ; } public void closeInput ( ) throws IOException { inputStream . close ( ) ; } @Override public String toString ( ) { return displayName ; } } 

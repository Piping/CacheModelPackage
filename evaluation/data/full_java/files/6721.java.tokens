package org . elasticsearch . index . query . support ; import org . apache . lucene . search . MultiTermQuery ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParseFieldMatcher ; public final class QueryParsers { public static final ParseField CONSTANT_SCORE = new ParseField ( <str> , <str> , <str> ) ; public static final ParseField SCORING_BOOLEAN = new ParseField ( <str> ) ; public static final ParseField CONSTANT_SCORE_BOOLEAN = new ParseField ( <str> ) ; public static final ParseField TOP_TERMS = new ParseField ( <str> ) ; public static final ParseField TOP_TERMS_BOOST = new ParseField ( <str> ) ; public static final ParseField TOP_TERMS_BLENDED_FREQS = new ParseField ( <str> ) ; private QueryParsers ( ) { } public static void setRewriteMethod ( MultiTermQuery query , @Nullable MultiTermQuery . RewriteMethod rewriteMethod ) { if ( rewriteMethod = = null ) { return ; } query . setRewriteMethod ( rewriteMethod ) ; } public static void setRewriteMethod ( MultiTermQuery query , ParseFieldMatcher matcher , @Nullable String rewriteMethod ) { if ( rewriteMethod = = null ) { return ; } query . setRewriteMethod ( parseRewriteMethod ( matcher , rewriteMethod ) ) ; } public static MultiTermQuery . RewriteMethod parseRewriteMethod ( ParseFieldMatcher matcher , @Nullable String rewriteMethod ) { return parseRewriteMethod ( matcher , rewriteMethod , MultiTermQuery . CONSTANT_SCORE_REWRITE ) ; } public static MultiTermQuery . RewriteMethod parseRewriteMethod ( ParseFieldMatcher matcher , @Nullable String rewriteMethod , @Nullable MultiTermQuery . RewriteMethod defaultRewriteMethod ) { if ( rewriteMethod = = null ) { return defaultRewriteMethod ; } if ( matcher . match ( rewriteMethod , CONSTANT_SCORE ) ) { return MultiTermQuery . CONSTANT_SCORE_REWRITE ; } if ( matcher . match ( rewriteMethod , SCORING_BOOLEAN ) ) { return MultiTermQuery . SCORING_BOOLEAN_REWRITE ; } if ( matcher . match ( rewriteMethod , CONSTANT_SCORE_BOOLEAN ) ) { return MultiTermQuery . CONSTANT_SCORE_BOOLEAN_REWRITE ; } int firstDigit = - <int> ; for ( int i = <int> ; i < rewriteMethod . length ( ) ; + + i ) { if ( Character . isDigit ( rewriteMethod . charAt ( i ) ) ) { firstDigit = i ; break ; } } if ( firstDigit > = <int> ) { final int size = Integer . parseInt ( rewriteMethod . substring ( firstDigit ) ) ; String rewriteMethodName = rewriteMethod . substring ( <int> , firstDigit ) ; if ( matcher . match ( rewriteMethodName , TOP_TERMS ) ) { return new MultiTermQuery . TopTermsScoringBooleanQueryRewrite ( size ) ; } if ( matcher . match ( rewriteMethodName , TOP_TERMS_BOOST ) ) { return new MultiTermQuery . TopTermsBoostOnlyBooleanQueryRewrite ( size ) ; } if ( matcher . match ( rewriteMethodName , TOP_TERMS_BLENDED_FREQS ) ) { return new MultiTermQuery . TopTermsBlendedFreqScoringRewrite ( size ) ; } } throw new IllegalArgumentException ( <str> + rewriteMethod + <str> ) ; } } 

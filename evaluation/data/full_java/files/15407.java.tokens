package org . gradle . internal . resource . transport . http ; import org . apache . http . HttpEntityEnclosingRequest ; import org . apache . http . HttpRequest ; import org . apache . http . HttpResponse ; import org . apache . http . ProtocolException ; import org . apache . http . client . methods . * ; import org . apache . http . impl . client . DefaultRedirectStrategy ; import org . apache . http . protocol . HttpContext ; import java . net . URI ; public class AlwaysRedirectRedirectStrategy extends DefaultRedirectStrategy { public AlwaysRedirectRedirectStrategy ( ) { } @Override protected boolean isRedirectable ( String method ) { return true ; } public HttpUriRequest getRedirect ( HttpRequest request , HttpResponse response , HttpContext context ) throws ProtocolException { URI uri = this . getLocationURI ( request , response , context ) ; String method = request . getRequestLine ( ) . getMethod ( ) ; if ( method . equalsIgnoreCase ( HttpHead . METHOD_NAME ) ) { return new HttpHead ( uri ) ; } else if ( method . equalsIgnoreCase ( HttpPost . METHOD_NAME ) ) { return this . copyEntity ( new HttpPost ( uri ) , request ) ; } else if ( method . equalsIgnoreCase ( HttpPut . METHOD_NAME ) ) { return this . copyEntity ( new HttpPut ( uri ) , request ) ; } else if ( method . equalsIgnoreCase ( HttpDelete . METHOD_NAME ) ) { return new HttpDelete ( uri ) ; } else if ( method . equalsIgnoreCase ( HttpTrace . METHOD_NAME ) ) { return new HttpTrace ( uri ) ; } else if ( method . equalsIgnoreCase ( HttpOptions . METHOD_NAME ) ) { return new HttpOptions ( uri ) ; } else if ( method . equalsIgnoreCase ( HttpPatch . METHOD_NAME ) ) { return this . copyEntity ( new HttpPatch ( uri ) , request ) ; } else { return new HttpGet ( uri ) ; } } private HttpUriRequest copyEntity ( HttpEntityEnclosingRequestBase redirect , HttpRequest original ) { if ( original instanceof HttpEntityEnclosingRequest ) { redirect . setEntity ( ( ( HttpEntityEnclosingRequest ) original ) . getEntity ( ) ) ; } return redirect ; } } 

package io . netty . handler . codec . stomp ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . CharsetUtil ; import org . junit . After ; import org . junit . Before ; import org . junit . Test ; import static org . junit . Assert . * ; public class StompSubframeDecoderTest { private EmbeddedChannel channel ; @Before public void setup ( ) throws Exception { channel = new EmbeddedChannel ( new StompSubframeDecoder ( ) ) ; } @After public void teardown ( ) throws Exception { assertFalse ( channel . finish ( ) ) ; } @Test public void testSingleFrameDecoding ( ) { ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . CONNECT_FRAME . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; StompHeadersSubframe frame = channel . readInbound ( ) ; assertNotNull ( frame ) ; assertEquals ( StompCommand . CONNECT , frame . command ( ) ) ; StompContentSubframe content = channel . readInbound ( ) ; assertSame ( LastStompContentSubframe . EMPTY_LAST_CONTENT , content ) ; content . release ( ) ; Object o = channel . readInbound ( ) ; assertNull ( o ) ; } @Test public void testSingleFrameWithBodyAndContentLength ( ) { ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . SEND_FRAME_2 . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; StompHeadersSubframe frame = channel . readInbound ( ) ; assertNotNull ( frame ) ; assertEquals ( StompCommand . SEND , frame . command ( ) ) ; StompContentSubframe content = channel . readInbound ( ) ; assertTrue ( content instanceof LastStompContentSubframe ) ; String s = content . content ( ) . toString ( CharsetUtil . UTF_8 ) ; assertEquals ( <str> , s ) ; content . release ( ) ; assertNull ( channel . readInbound ( ) ) ; } @Test public void testSingleFrameWithBodyWithoutContentLength ( ) { ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . SEND_FRAME_1 . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; StompHeadersSubframe frame = channel . readInbound ( ) ; assertNotNull ( frame ) ; assertEquals ( StompCommand . SEND , frame . command ( ) ) ; StompContentSubframe content = channel . readInbound ( ) ; assertTrue ( content instanceof LastStompContentSubframe ) ; String s = content . content ( ) . toString ( CharsetUtil . UTF_8 ) ; assertEquals ( <str> , s ) ; content . release ( ) ; assertNull ( channel . readInbound ( ) ) ; } @Test public void testSingleFrameChunked ( ) { EmbeddedChannel channel = new EmbeddedChannel ( new StompSubframeDecoder ( <int> , <int> ) ) ; ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . SEND_FRAME_2 . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; StompHeadersSubframe frame = channel . readInbound ( ) ; assertNotNull ( frame ) ; assertEquals ( StompCommand . SEND , frame . command ( ) ) ; StompContentSubframe content = channel . readInbound ( ) ; String s = content . content ( ) . toString ( CharsetUtil . UTF_8 ) ; assertEquals ( <str> , s ) ; content . release ( ) ; content = channel . readInbound ( ) ; s = content . content ( ) . toString ( CharsetUtil . UTF_8 ) ; assertEquals ( <str> , s ) ; content . release ( ) ; content = channel . readInbound ( ) ; s = content . content ( ) . toString ( CharsetUtil . UTF_8 ) ; assertEquals ( <str> , s ) ; content . release ( ) ; content = channel . readInbound ( ) ; s = content . content ( ) . toString ( CharsetUtil . UTF_8 ) ; assertEquals ( <str> , s ) ; content . release ( ) ; assertNull ( channel . readInbound ( ) ) ; } @Test public void testMultipleFramesDecoding ( ) { ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . CONNECT_FRAME . getBytes ( ) ) ; incoming . writeBytes ( StompTestConstants . CONNECTED_FRAME . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; StompHeadersSubframe frame = channel . readInbound ( ) ; assertNotNull ( frame ) ; assertEquals ( StompCommand . CONNECT , frame . command ( ) ) ; StompContentSubframe content = channel . readInbound ( ) ; assertSame ( LastStompContentSubframe . EMPTY_LAST_CONTENT , content ) ; content . release ( ) ; StompHeadersSubframe frame2 = channel . readInbound ( ) ; assertNotNull ( frame2 ) ; assertEquals ( StompCommand . CONNECTED , frame2 . command ( ) ) ; StompContentSubframe content2 = channel . readInbound ( ) ; assertSame ( LastStompContentSubframe . EMPTY_LAST_CONTENT , content2 ) ; content2 . release ( ) ; assertNull ( channel . readInbound ( ) ) ; } } 

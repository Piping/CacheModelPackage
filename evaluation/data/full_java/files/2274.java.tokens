package org . nd4j . linalg . util ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . shape . Shape ; public class LinAlgExceptions { public static void assertSameShape ( INDArray n , INDArray n2 ) { if ( ! Shape . shapeEquals ( n . shape ( ) , n2 . shape ( ) ) ) throw new IllegalStateException ( <str> ) ; } public static void assertRows ( INDArray n , INDArray n2 ) { if ( n . rows ( ) ! = n2 . rows ( ) ) throw new IllegalStateException ( <str> ) ; } public static void assertVector ( INDArray . . . arr ) { for ( INDArray a1 : arr ) assertVector ( a1 ) ; } public static void assertMatrix ( INDArray . . . arr ) { for ( INDArray a1 : arr ) assertMatrix ( a1 ) ; } public static void assertVector ( INDArray arr ) { if ( ! arr . isVector ( ) ) throw new IllegalArgumentException ( <str> ) ; } public static void assertMatrix ( INDArray arr ) { if ( arr . shape ( ) . length > <int> ) throw new IllegalArgumentException ( <str> ) ; } public static void assertMultiplies ( INDArray nd1 , INDArray nd2 ) { if ( nd1 . columns ( ) = = nd2 . rows ( ) | | nd1 . rows ( ) = = nd2 . columns ( ) ) { return ; } throw new IllegalStateException ( <str> + nd1 . columns ( ) + <str> + nd2 . rows ( ) + <str> + nd1 . rows ( ) + <str> + nd2 . columns ( ) ) ; } public static void assertColumns ( INDArray n , INDArray n2 ) { if ( n . columns ( ) ! = n2 . columns ( ) ) throw new IllegalStateException ( <str> ) ; } public static void assertValidNum ( INDArray n ) { INDArray linear = n . linearView ( ) ; for ( int i = <int> ; i < linear . length ( ) ; i + + ) { double d = linear . getDouble ( i ) ; if ( Double . isNaN ( d ) | | Double . isInfinite ( d ) ) throw new IllegalStateException ( <str> ) ; } } } 

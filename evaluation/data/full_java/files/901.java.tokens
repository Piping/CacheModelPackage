package org . apache . cassandra . serializers ; import org . apache . cassandra . utils . ByteBufferUtil ; import java . nio . ByteBuffer ; import java . nio . charset . CharacterCodingException ; import java . nio . charset . Charset ; public abstract class AbstractTextSerializer implements TypeSerializer < String > { private final Charset charset ; protected AbstractTextSerializer ( Charset charset ) { this . charset = charset ; } public String deserialize ( ByteBuffer bytes ) { try { return ByteBufferUtil . string ( bytes , charset ) ; } catch ( CharacterCodingException e ) { throw new MarshalException ( <str> + charset + <str> + ByteBufferUtil . bytesToHex ( bytes ) ) ; } } public ByteBuffer serialize ( String value ) { return ByteBufferUtil . bytes ( value , charset ) ; } public String toString ( String value ) { return value ; } public Class < String > getType ( ) { return String . class ; } @Override public void toCQLLiteral ( ByteBuffer buffer , StringBuilder target ) { if ( buffer = = null ) { target . append ( <str> ) ; } else { String s = deserialize ( buffer ) ; target . append ( <str> ) ; for ( int i = <int> ; i < s . length ( ) ; i + + ) { char c = s . charAt ( i ) ; if ( c = = <str> ) target . append ( <str> ) ; else target . append ( c ) ; } target . append ( <str> ) ; } } } 

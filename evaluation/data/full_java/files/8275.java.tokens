package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . elasticsearch . action . support . ToXContentToBytes ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; import java . nio . charset . Charset ; import java . util . Base64 ; import java . util . Locale ; import static org . hamcrest . Matchers . equalTo ; public class WrapperQueryBuilderTests extends AbstractQueryTestCase < WrapperQueryBuilder > { @Override protected boolean supportsBoostAndQueryName ( ) { return false ; } @Override protected WrapperQueryBuilder doCreateTestQueryBuilder ( ) { QueryBuilder wrappedQuery = RandomQueryBuilder . createQuery ( random ( ) ) ; switch ( randomInt ( <int> ) ) { case <int> : return new WrapperQueryBuilder ( wrappedQuery . toString ( ) ) ; case <int> : return new WrapperQueryBuilder ( ( ( ToXContentToBytes ) wrappedQuery ) . buildAsBytes ( ) . toBytes ( ) ) ; case <int> : return new WrapperQueryBuilder ( ( ( ToXContentToBytes ) wrappedQuery ) . buildAsBytes ( ) ) ; default : throw new UnsupportedOperationException ( ) ; } } @Override protected void doAssertLuceneQuery ( WrapperQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { try ( XContentParser qSourceParser = XContentFactory . xContent ( queryBuilder . source ( ) ) . createParser ( queryBuilder . source ( ) ) ) { final QueryShardContext contextCopy = new QueryShardContext ( context ) ; contextCopy . reset ( qSourceParser ) ; QueryBuilder < ? > innerQuery = contextCopy . parseContext ( ) . parseInnerQueryBuilder ( ) ; Query expected = innerQuery . toQuery ( context ) ; assertThat ( query , equalTo ( expected ) ) ; } } public void testIllegalArgument ( ) { try { if ( randomBoolean ( ) ) { new WrapperQueryBuilder ( ( byte [ ] ) null ) ; } else { new WrapperQueryBuilder ( new byte [ <int> ] ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { if ( randomBoolean ( ) ) { new WrapperQueryBuilder ( ( String ) null ) ; } else { new WrapperQueryBuilder ( <str> ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { if ( randomBoolean ( ) ) { new WrapperQueryBuilder ( ( BytesReference ) null ) ; } else { new WrapperQueryBuilder ( new BytesArray ( new byte [ <int> ] ) ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } @Override public void testUnknownField ( ) throws IOException { try { parseQuery ( <str> + WrapperQueryBuilder . NAME + <str> ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> ; WrapperQueryBuilder parsed = ( WrapperQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; try { assertEquals ( json , <str> , new String ( parsed . source ( ) , <str> ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } } } 

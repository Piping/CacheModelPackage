package org . elasticsearch . action . search ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . StatusToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . search . SearchHits ; import org . elasticsearch . search . aggregations . Aggregations ; import org . elasticsearch . search . internal . InternalSearchResponse ; import org . elasticsearch . search . suggest . Suggest ; import java . io . IOException ; import static org . elasticsearch . action . search . ShardSearchFailure . readShardSearchFailure ; import static org . elasticsearch . search . internal . InternalSearchResponse . readInternalSearchResponse ; public class SearchResponse extends ActionResponse implements StatusToXContent { private InternalSearchResponse internalResponse ; private String scrollId ; private int totalShards ; private int successfulShards ; private ShardSearchFailure [ ] shardFailures ; private long tookInMillis ; public SearchResponse ( ) { } public SearchResponse ( InternalSearchResponse internalResponse , String scrollId , int totalShards , int successfulShards , long tookInMillis , ShardSearchFailure [ ] shardFailures ) { this . internalResponse = internalResponse ; this . scrollId = scrollId ; this . totalShards = totalShards ; this . successfulShards = successfulShards ; this . tookInMillis = tookInMillis ; this . shardFailures = shardFailures ; } @Override public RestStatus status ( ) { return RestStatus . status ( successfulShards , totalShards , shardFailures ) ; } public SearchHits getHits ( ) { return internalResponse . hits ( ) ; } public Aggregations getAggregations ( ) { return internalResponse . aggregations ( ) ; } public Suggest getSuggest ( ) { return internalResponse . suggest ( ) ; } public boolean isTimedOut ( ) { return internalResponse . timedOut ( ) ; } public Boolean isTerminatedEarly ( ) { return internalResponse . terminatedEarly ( ) ; } public TimeValue getTook ( ) { return new TimeValue ( tookInMillis ) ; } public long getTookInMillis ( ) { return tookInMillis ; } public int getTotalShards ( ) { return totalShards ; } public int getSuccessfulShards ( ) { return successfulShards ; } public int getFailedShards ( ) { return shardFailures . length ; } public ShardSearchFailure [ ] getShardFailures ( ) { return this . shardFailures ; } public String getScrollId ( ) { return scrollId ; } public void scrollId ( String scrollId ) { this . scrollId = scrollId ; } static final class Fields { static final XContentBuilderString _SCROLL_ID = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOOK = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TIMED_OUT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TERMINATED_EARLY = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { if ( scrollId ! = null ) { builder . field ( Fields . _SCROLL_ID , scrollId ) ; } builder . field ( Fields . TOOK , tookInMillis ) ; builder . field ( Fields . TIMED_OUT , isTimedOut ( ) ) ; if ( isTerminatedEarly ( ) ! = null ) { builder . field ( Fields . TERMINATED_EARLY , isTerminatedEarly ( ) ) ; } RestActions . buildBroadcastShardsHeader ( builder , params , getTotalShards ( ) , getSuccessfulShards ( ) , getFailedShards ( ) , getShardFailures ( ) ) ; internalResponse . toXContent ( builder , params ) ; return builder ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; internalResponse = readInternalSearchResponse ( in ) ; totalShards = in . readVInt ( ) ; successfulShards = in . readVInt ( ) ; int size = in . readVInt ( ) ; if ( size = = <int> ) { shardFailures = ShardSearchFailure . EMPTY_ARRAY ; } else { shardFailures = new ShardSearchFailure [ size ] ; for ( int i = <int> ; i < shardFailures . length ; i + + ) { shardFailures [ i ] = readShardSearchFailure ( in ) ; } } scrollId = in . readOptionalString ( ) ; tookInMillis = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; internalResponse . writeTo ( out ) ; out . writeVInt ( totalShards ) ; out . writeVInt ( successfulShards ) ; out . writeVInt ( shardFailures . length ) ; for ( ShardSearchFailure shardSearchFailure : shardFailures ) { shardSearchFailure . writeTo ( out ) ; } out . writeOptionalString ( scrollId ) ; out . writeVLong ( tookInMillis ) ; } @Override public String toString ( ) { try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) ; builder . startObject ( ) ; toXContent ( builder , EMPTY_PARAMS ) ; builder . endObject ( ) ; return builder . string ( ) ; } catch ( IOException e ) { return <str> + e . getMessage ( ) + <str> ; } } } 

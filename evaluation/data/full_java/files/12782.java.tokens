package org . gradle . api . internal . artifacts . result ; import groovy . lang . Closure ; import org . gradle . api . Action ; import org . gradle . api . artifacts . result . DependencyResult ; import org . gradle . api . artifacts . result . ResolutionResult ; import org . gradle . api . artifacts . result . ResolvedComponentResult ; import org . gradle . api . artifacts . result . ResolvedDependencyResult ; import org . gradle . internal . Actions ; import org . gradle . api . internal . ClosureBackedAction ; import org . gradle . internal . Factory ; import java . util . HashSet ; import java . util . LinkedHashSet ; import java . util . Set ; public class DefaultResolutionResult implements ResolutionResult { private Factory < ResolvedComponentResult > rootSource ; public DefaultResolutionResult ( Factory < ResolvedComponentResult > rootSource ) { assert rootSource ! = null ; this . rootSource = rootSource ; } public ResolvedComponentResult getRoot ( ) { return rootSource . create ( ) ; } public Set < ? extends DependencyResult > getAllDependencies ( ) { final Set < DependencyResult > out = new LinkedHashSet < DependencyResult > ( ) ; allDependencies ( new Action < DependencyResult > ( ) { public void execute ( DependencyResult dep ) { out . add ( dep ) ; } } ) ; return out ; } public void allDependencies ( Action < ? super DependencyResult > action ) { eachElement ( getRoot ( ) , Actions . doNothing ( ) , action , new HashSet < ResolvedComponentResult > ( ) ) ; } public void allDependencies ( final Closure closure ) { allDependencies ( new ClosureBackedAction < DependencyResult > ( closure ) ) ; } private void eachElement ( ResolvedComponentResult node , Action < ? super ResolvedComponentResult > moduleAction , Action < ? super DependencyResult > dependencyAction , Set < ResolvedComponentResult > visited ) { if ( ! visited . add ( node ) ) { return ; } moduleAction . execute ( node ) ; for ( DependencyResult d : node . getDependencies ( ) ) { dependencyAction . execute ( d ) ; if ( d instanceof ResolvedDependencyResult ) { eachElement ( ( ( ResolvedDependencyResult ) d ) . getSelected ( ) , moduleAction , dependencyAction , visited ) ; } } } public Set < ResolvedComponentResult > getAllComponents ( ) { final Set < ResolvedComponentResult > out = new LinkedHashSet < ResolvedComponentResult > ( ) ; eachElement ( getRoot ( ) , Actions . doNothing ( ) , Actions . doNothing ( ) , out ) ; return out ; } public void allComponents ( final Action < ? super ResolvedComponentResult > action ) { eachElement ( getRoot ( ) , action , Actions . doNothing ( ) , new HashSet < ResolvedComponentResult > ( ) ) ; } public void allComponents ( final Closure closure ) { allComponents ( new ClosureBackedAction < ResolvedComponentResult > ( closure ) ) ; } } 

package org . gradle . foundation . ipc . basic ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import java . io . IOException ; import java . io . Serializable ; import java . net . Socket ; public class ClientProcess { private final Logger logger = Logging . getLogger ( ClientProcess . class ) ; public interface Protocol { public void initialize ( ClientProcess client ) ; public boolean serverConnected ( Socket clientSocket ) ; public boolean continueConnection ( ) ; } private ObjectSocketWrapper socketWrapper ; private Protocol protocol ; public ClientProcess ( Protocol protocol ) { this . protocol = protocol ; protocol . initialize ( this ) ; } public void start ( int port ) { Socket clientSocket ; try { clientSocket = new Socket ( ( String ) null , port ) ; socketWrapper = new ObjectSocketWrapper ( clientSocket ) ; if ( protocol . serverConnected ( clientSocket ) ) { return ; } } catch ( IOException e ) { throw new UncheckedIOException ( String . format ( <str> , port ) , e ) ; } try { clientSocket . close ( ) ; socketWrapper = null ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } throw new UncheckedIOException ( <str> ) ; } public void stop ( ) { if ( socketWrapper ! = null ) { socketWrapper . close ( ) ; } } public boolean sendMessage ( String messageType , String message , Serializable data ) { return socketWrapper . sendObject ( new MessageObject ( messageType , message , data ) ) ; } public boolean sendMessage ( String messageType , String message ) { return sendMessage ( messageType , message , null ) ; } public MessageObject sendMessageWaitForReply ( String messageType , String message , Serializable data ) { if ( ! socketWrapper . sendObject ( new MessageObject ( messageType , message , data ) ) ) { return null ; } return readMessage ( ) ; } public MessageObject readMessage ( ) { Object object = socketWrapper . readObject ( ) ; if ( object = = null ) { return null ; } if ( object instanceof MessageObject ) { return ( MessageObject ) object ; } return new MessageObject ( <str> , object . toString ( ) , null ) ; } } 

package org . apache . cassandra . io . sstable . format ; import java . util . regex . Pattern ; import org . apache . cassandra . utils . ChecksumType ; public abstract class Version { private static final Pattern VALIDATION = Pattern . compile ( <str> ) ; protected final String version ; protected final SSTableFormat format ; protected Version ( SSTableFormat format , String version ) { this . format = format ; this . version = version ; } public abstract boolean isLatestVersion ( ) ; public abstract boolean hasSamplingLevel ( ) ; public abstract boolean hasNewStatsFile ( ) ; public abstract ChecksumType compressedChecksumType ( ) ; public abstract ChecksumType uncompressedChecksumType ( ) ; public abstract boolean hasRepairedAt ( ) ; public abstract boolean tracksLegacyCounterShards ( ) ; public abstract boolean hasNewFileName ( ) ; public abstract boolean storeRows ( ) ; public abstract int correspondingMessagingVersion ( ) ; public abstract boolean hasOldBfHashOrder ( ) ; public abstract boolean hasCompactionAncestors ( ) ; public abstract boolean hasBoundaries ( ) ; public String getVersion ( ) { return version ; } public SSTableFormat getSSTableFormat ( ) { return format ; } public static boolean validate ( String ver ) { return ver ! = null & & VALIDATION . matcher ( ver ) . matches ( ) ; } abstract public boolean isCompatible ( ) ; abstract public boolean isCompatibleForStreaming ( ) ; @Override public String toString ( ) { return version ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; Version version1 = ( Version ) o ; if ( version ! = null ? ! version . equals ( version1 . version ) : version1 . version ! = null ) return false ; return true ; } @Override public int hashCode ( ) { return version ! = null ? version . hashCode ( ) : <int> ; } } 

package org . gradle . launcher . daemon . bootstrap ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . concurrent . ExecutorFactory ; import org . gradle . internal . concurrent . StoppableExecutor ; import org . gradle . process . internal . streams . ExecOutputHandleRunner ; import org . gradle . process . internal . streams . StreamsHandler ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . util . Scanner ; public class DaemonOutputConsumer implements StreamsHandler { private final static Logger LOGGER = Logging . getLogger ( DaemonOutputConsumer . class ) ; private final InputStream stdInput ; private StringWriter output ; private StoppableExecutor executor ; private Runnable streamConsumer ; DaemonStartupCommunication startupCommunication = new DaemonStartupCommunication ( ) ; private String processOutput ; private ExecOutputHandleRunner standardInputRunner ; public DaemonOutputConsumer ( InputStream stdInput ) { this . stdInput = stdInput ; } public void connectStreams ( final Process process , String processName , ExecutorFactory executorFactory ) { if ( process = = null | | processName = = null ) { throw new IllegalArgumentException ( <str> ) ; } standardInputRunner = new ExecOutputHandleRunner ( <str> + processName , stdInput , process . getOutputStream ( ) ) ; executor = executorFactory . create ( <str> + processName ) ; final InputStream inputStream = process . getInputStream ( ) ; streamConsumer = new Runnable ( ) { public void run ( ) { Scanner scanner = new Scanner ( inputStream ) ; PrintWriter printer = new PrintWriter ( output ) ; try { while ( scanner . hasNext ( ) ) { String line = scanner . nextLine ( ) ; LOGGER . debug ( <str> , line ) ; printer . println ( line ) ; if ( startupCommunication . containsGreeting ( line ) ) { break ; } } } finally { scanner . close ( ) ; } } } ; } public void start ( ) { if ( executor = = null | | streamConsumer = = null ) { throw new IllegalStateException ( <str> ) ; } LOGGER . debug ( <str> ) ; output = new StringWriter ( ) ; executor . execute ( standardInputRunner ) ; executor . execute ( streamConsumer ) ; } public String getProcessOutput ( ) { if ( processOutput = = null ) { throw new IllegalStateException ( <str> ) ; } return processOutput ; } public void stop ( ) { if ( executor = = null | | output = = null ) { throw new IllegalStateException ( <str> ) ; } try { standardInputRunner . closeInput ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } executor . stop ( ) ; processOutput = output . toString ( ) ; } } 

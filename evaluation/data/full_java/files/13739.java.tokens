package org . gradle . language . scala . internal . toolchain ; import org . gradle . api . JavaVersion ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . ConfigurationContainer ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . artifacts . ResolveException ; import org . gradle . api . artifacts . dsl . DependencyHandler ; import org . gradle . api . internal . artifacts . dsl . dependencies . ProjectFinder ; import org . gradle . api . internal . tasks . compile . daemon . CompilerDaemonManager ; import org . gradle . language . scala . ScalaPlatform ; import org . gradle . platform . base . internal . toolchain . ToolProvider ; import java . io . File ; import java . util . Set ; public class DownloadingScalaToolChain implements ScalaToolChainInternal { private ProjectFinder projectFinder ; private CompilerDaemonManager compilerDaemonManager ; private final ConfigurationContainer configurationContainer ; private final DependencyHandler dependencyHandler ; private final JavaVersion javaVersion ; public DownloadingScalaToolChain ( ProjectFinder projectFinder , CompilerDaemonManager compilerDaemonManager , ConfigurationContainer configurationContainer , DependencyHandler dependencyHandler ) { this . projectFinder = projectFinder ; this . compilerDaemonManager = compilerDaemonManager ; this . configurationContainer = configurationContainer ; this . dependencyHandler = dependencyHandler ; this . javaVersion = JavaVersion . current ( ) ; } public String getName ( ) { return String . format ( <str> ) ; } public String getDisplayName ( ) { return String . format ( <str> , javaVersion . getMajorVersion ( ) , javaVersion ) ; } public ToolProvider select ( ScalaPlatform targetPlatform ) { try { Configuration scalaClasspath = resolveDependency ( String . format ( <str> , targetPlatform . getScalaVersion ( ) ) ) ; Configuration zincClasspath = resolveDependency ( String . format ( <str> , DefaultScalaToolProvider . DEFAULT_ZINC_VERSION ) ) ; Set < File > resolvedScalaClasspath = scalaClasspath . resolve ( ) ; Set < File > resolvedZincClasspath = zincClasspath . resolve ( ) ; return new DefaultScalaToolProvider ( projectFinder , compilerDaemonManager , resolvedScalaClasspath , resolvedZincClasspath ) ; } catch ( ResolveException resolveException ) { return new NotFoundScalaToolProvider ( resolveException ) ; } } private Configuration resolveDependency ( Object dependencyNotation ) { Dependency dependency = dependencyHandler . create ( dependencyNotation ) ; return configurationContainer . detachedConfiguration ( dependency ) ; } } 

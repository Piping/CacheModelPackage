package org . elasticsearch . test . disruption ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . test . transport . MockTransportService ; import java . util . Random ; import java . util . Set ; public class NetworkDelaysPartition extends NetworkPartition { static long DEFAULT_DELAY_MIN = <int> ; static long DEFAULT_DELAY_MAX = <int> ; final long delayMin ; final long delayMax ; TimeValue duration ; public NetworkDelaysPartition ( Random random ) { this ( random , DEFAULT_DELAY_MIN , DEFAULT_DELAY_MAX ) ; } public NetworkDelaysPartition ( Random random , long delayMin , long delayMax ) { super ( random ) ; this . delayMin = delayMin ; this . delayMax = delayMax ; } public NetworkDelaysPartition ( String node1 , String node2 , Random random ) { this ( node1 , node2 , DEFAULT_DELAY_MIN , DEFAULT_DELAY_MAX , random ) ; } public NetworkDelaysPartition ( String node1 , String node2 , long delayMin , long delayMax , Random random ) { super ( node1 , node2 , random ) ; this . delayMin = delayMin ; this . delayMax = delayMax ; } public NetworkDelaysPartition ( Set < String > nodesSideOne , Set < String > nodesSideTwo , Random random ) { this ( nodesSideOne , nodesSideTwo , DEFAULT_DELAY_MIN , DEFAULT_DELAY_MAX , random ) ; } public NetworkDelaysPartition ( Set < String > nodesSideOne , Set < String > nodesSideTwo , long delay , Random random ) { this ( nodesSideOne , nodesSideTwo , delay , delay , random ) ; } public NetworkDelaysPartition ( Set < String > nodesSideOne , Set < String > nodesSideTwo , long delayMin , long delayMax , Random random ) { super ( nodesSideOne , nodesSideTwo , random ) ; this . delayMin = delayMin ; this . delayMax = delayMax ; } @Override public synchronized void startDisrupting ( ) { duration = new TimeValue ( delayMin = = delayMax ? delayMin : delayMin + random . nextInt ( ( int ) ( delayMax - delayMin ) ) ) ; super . startDisrupting ( ) ; } @Override void applyDisruption ( MockTransportService transportService1 , MockTransportService transportService2 ) { transportService1 . addUnresponsiveRule ( transportService1 , duration ) ; transportService1 . addUnresponsiveRule ( transportService2 , duration ) ; } @Override protected String getPartitionDescription ( ) { return <str> + duration + <str> ; } @Override public TimeValue expectedTimeToHeal ( ) { return TimeValue . timeValueMillis ( delayMax ) ; } } 

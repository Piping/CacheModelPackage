package org . elasticsearch . mget ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . get . MultiGetItemResponse ; import org . elasticsearch . action . get . MultiGetRequest ; import org . elasticsearch . action . get . MultiGetRequestBuilder ; import org . elasticsearch . action . get . MultiGetResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . search . fetch . source . FetchSourceContext ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import java . util . Map ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . hasKey ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . nullValue ; public class SimpleMgetIT extends ESIntegTestCase { public void testThatMgetShouldWorkWithOneIndexMissing ( ) throws IOException { createIndex ( <str> ) ; ensureYellow ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; MultiGetResponse mgetResponse = client ( ) . prepareMultiGet ( ) . add ( new MultiGetRequest . Item ( <str> , <str> , <str> ) ) . add ( new MultiGetRequest . Item ( <str> , <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( mgetResponse . getResponses ( ) . length , is ( <int> ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getIndex ( ) , is ( <str> ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , is ( false ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getIndex ( ) , is ( <str> ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , is ( true ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getMessage ( ) , is ( <str> ) ) ; assertThat ( ( ( ElasticsearchException ) mgetResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getFailure ( ) ) . getIndex ( ) , is ( <str> ) ) ; mgetResponse = client ( ) . prepareMultiGet ( ) . add ( new MultiGetRequest . Item ( <str> , <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( mgetResponse . getResponses ( ) . length , is ( <int> ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getIndex ( ) , is ( <str> ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , is ( true ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getMessage ( ) , is ( <str> ) ) ; assertThat ( ( ( ElasticsearchException ) mgetResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getFailure ( ) ) . getIndex ( ) , is ( <str> ) ) ; } public void testThatParentPerDocumentIsSupported ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; ensureYellow ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setParent ( <str> ) . setRefresh ( true ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; MultiGetResponse mgetResponse = client ( ) . prepareMultiGet ( ) . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , <str> ) . parent ( <str> ) ) . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( mgetResponse . getResponses ( ) . length , is ( <int> ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , is ( false ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , is ( true ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , is ( true ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getResponse ( ) , nullValue ( ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getFailure ( ) . getMessage ( ) , equalTo ( <str> ) ) ; } @SuppressWarnings ( <str> ) public void testThatSourceFilteringIsSupported ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) ) ; ensureYellow ( ) ; BytesReference sourceBytesRef = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( sourceBytesRef ) . get ( ) ; } MultiGetRequestBuilder request = client ( ) . prepareMultiGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { if ( i % <int> = = <int> ) { request . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , Integer . toString ( i ) ) . fetchSourceContext ( new FetchSourceContext ( <str> , <str> ) ) ) ; } else { request . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , Integer . toString ( i ) ) . fetchSourceContext ( new FetchSourceContext ( false ) ) ) ; } } MultiGetResponse response = request . get ( ) ; assertThat ( response . getResponses ( ) . length , equalTo ( <int> ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { MultiGetItemResponse responseItem = response . getResponses ( ) [ i ] ; assertThat ( responseItem . getIndex ( ) , equalTo ( <str> ) ) ; if ( i % <int> = = <int> ) { Map < String , Object > source = responseItem . getResponse ( ) . getSourceAsMap ( ) ; assertThat ( source . size ( ) , equalTo ( <int> ) ) ; assertThat ( source , hasKey ( <str> ) ) ; assertThat ( ( ( Map < String , Object > ) source . get ( <str> ) ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Map < String , Object > ) source . get ( <str> ) ) , hasKey ( <str> ) ) ; } else { assertThat ( responseItem . getResponse ( ) . getSourceAsBytes ( ) , nullValue ( ) ) ; } } } public void testThatRoutingPerDocumentIsSupported ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . setSettings ( Settings . builder ( ) . put ( indexSettings ( ) ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , between ( <int> , DEFAULT_MAX_NUM_SHARDS ) ) ) ) ; ensureYellow ( ) ; final String id = routingKeyForShard ( <str> , <str> , <int> ) ; final String routingOtherShard = routingKeyForShard ( <str> , <str> , <int> ) ; client ( ) . prepareIndex ( <str> , <str> , id ) . setRefresh ( true ) . setRouting ( routingOtherShard ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; MultiGetResponse mgetResponse = client ( ) . prepareMultiGet ( ) . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , id ) . routing ( routingOtherShard ) ) . add ( new MultiGetRequest . Item ( indexOrAlias ( ) , <str> , id ) ) . execute ( ) . actionGet ( ) ; assertThat ( mgetResponse . getResponses ( ) . length , is ( <int> ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , is ( false ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , is ( true ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getResponse ( ) . getIndex ( ) , is ( <str> ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . isFailed ( ) , is ( false ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , is ( false ) ) ; assertThat ( mgetResponse . getResponses ( ) [ <int> ] . getResponse ( ) . getIndex ( ) , is ( <str> ) ) ; } private static String indexOrAlias ( ) { return randomBoolean ( ) ? <str> : <str> ; } } 

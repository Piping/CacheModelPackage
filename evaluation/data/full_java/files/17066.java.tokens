package com . badlogic . gdx . physics . box2d . joints ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Joint ; import com . badlogic . gdx . physics . box2d . World ; public class RevoluteJoint extends Joint { private final float [ ] tmp = new float [ <int> ] ; private final Vector2 localAnchorA = new Vector2 ( ) ; private final Vector2 localAnchorB = new Vector2 ( ) ; public RevoluteJoint ( World world , long addr ) { super ( world , addr ) ; } public float getJointAngle ( ) { return jniGetJointAngle ( addr ) ; } private native float jniGetJointAngle ( long addr ) ; public float getJointSpeed ( ) { return jniGetJointSpeed ( addr ) ; } private native float jniGetJointSpeed ( long addr ) ; public boolean isLimitEnabled ( ) { return jniIsLimitEnabled ( addr ) ; } private native boolean jniIsLimitEnabled ( long addr ) ; public void enableLimit ( boolean flag ) { jniEnableLimit ( addr , flag ) ; } private native void jniEnableLimit ( long addr , boolean flag ) ; public float getLowerLimit ( ) { return jniGetLowerLimit ( addr ) ; } private native float jniGetLowerLimit ( long addr ) ; public float getUpperLimit ( ) { return jniGetUpperLimit ( addr ) ; } private native float jniGetUpperLimit ( long addr ) ; public void setLimits ( float lower , float upper ) { jniSetLimits ( addr , lower , upper ) ; } private native void jniSetLimits ( long addr , float lower , float upper ) ; public boolean isMotorEnabled ( ) { return jniIsMotorEnabled ( addr ) ; } private native boolean jniIsMotorEnabled ( long addr ) ; public void enableMotor ( boolean flag ) { jniEnableMotor ( addr , flag ) ; } private native void jniEnableMotor ( long addr , boolean flag ) ; public void setMotorSpeed ( float speed ) { jniSetMotorSpeed ( addr , speed ) ; } private native void jniSetMotorSpeed ( long addr , float speed ) ; public float getMotorSpeed ( ) { return jniGetMotorSpeed ( addr ) ; } private native float jniGetMotorSpeed ( long addr ) ; public void setMaxMotorTorque ( float torque ) { jniSetMaxMotorTorque ( addr , torque ) ; } private native void jniSetMaxMotorTorque ( long addr , float torque ) ; public float getMotorTorque ( float invDt ) { return jniGetMotorTorque ( addr , invDt ) ; } private native float jniGetMotorTorque ( long addr , float invDt ) ; public Vector2 getLocalAnchorA ( ) { jniGetLocalAnchorA ( addr , tmp ) ; localAnchorA . set ( tmp [ <int> ] , tmp [ <int> ] ) ; return localAnchorA ; } private native void jniGetLocalAnchorA ( long addr , float [ ] anchor ) ; public Vector2 getLocalAnchorB ( ) { jniGetLocalAnchorB ( addr , tmp ) ; localAnchorB . set ( tmp [ <int> ] , tmp [ <int> ] ) ; return localAnchorB ; } private native void jniGetLocalAnchorB ( long addr , float [ ] anchor ) ; public float getReferenceAngle ( ) { return jniGetReferenceAngle ( addr ) ; } private native float jniGetReferenceAngle ( long addr ) ; public float getMaxMotorTorque ( ) { return jniGetMaxMotorTorque ( addr ) ; } private native float jniGetMaxMotorTorque ( long addr ) ; } 

package org . elasticsearch . action . percolate ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . collect . MapBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . StreamsUtils ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class MultiPercolatorRequestTests extends ESTestCase { public void testParseBulkRequests ( ) throws Exception { byte [ ] data = StreamsUtils . copyToBytesFromClasspath ( <str> ) ; MultiPercolateRequest request = new MultiPercolateRequest ( ) . add ( data , <int> , data . length ) ; assertThat ( request . requests ( ) . size ( ) , equalTo ( <int> ) ) ; PercolateRequest percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . preference ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( false ) ) ; assertThat ( percolateRequest . getRequest ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . source ( ) , notNullValue ( ) ) ; Map sourceMap = XContentFactory . xContent ( percolateRequest . source ( ) ) . createParser ( percolateRequest . source ( ) ) . map ( ) ; assertThat ( sourceMap . get ( <str> ) , equalTo ( ( Object ) MapBuilder . newMapBuilder ( ) . put ( <str> , <str> ) . map ( ) ) ) ; percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . preference ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . fromOptions ( true , true , true , false , IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( false ) ) ; assertThat ( percolateRequest . getRequest ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . source ( ) , notNullValue ( ) ) ; sourceMap = XContentFactory . xContent ( percolateRequest . source ( ) ) . createParser ( percolateRequest . source ( ) ) . map ( ) ; assertThat ( sourceMap . get ( <str> ) , equalTo ( ( Object ) MapBuilder . newMapBuilder ( ) . put ( <str> , <str> ) . map ( ) ) ) ; percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . preference ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . fromOptions ( false , true , true , true , IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( true ) ) ; assertThat ( percolateRequest . getRequest ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . source ( ) , notNullValue ( ) ) ; sourceMap = XContentFactory . xContent ( percolateRequest . source ( ) ) . createParser ( percolateRequest . source ( ) ) . map ( ) ; assertThat ( sourceMap . get ( <str> ) , equalTo ( ( Object ) MapBuilder . newMapBuilder ( ) . put ( <str> , <str> ) . map ( ) ) ) ; percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . preference ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . fromOptions ( false , true , true , true , IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( false ) ) ; assertThat ( percolateRequest . getRequest ( ) , notNullValue ( ) ) ; assertThat ( percolateRequest . getRequest ( ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . type ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . index ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . preference ( ) , equalTo ( <str> ) ) ; percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . preference ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( true ) ) ; assertThat ( percolateRequest . getRequest ( ) , notNullValue ( ) ) ; assertThat ( percolateRequest . getRequest ( ) . id ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . type ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . index ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . preference ( ) , equalTo ( <str> ) ) ; percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . preference ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( false ) ) ; assertThat ( percolateRequest . getRequest ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . source ( ) , notNullValue ( ) ) ; sourceMap = XContentFactory . xContent ( percolateRequest . source ( ) ) . createParser ( percolateRequest . source ( ) ) . map ( ) ; assertThat ( sourceMap . get ( <str> ) , equalTo ( ( Object ) MapBuilder . newMapBuilder ( ) . put ( <str> , <str> ) . map ( ) ) ) ; percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . preference ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) , notNullValue ( ) ) ; assertThat ( percolateRequest . getRequest ( ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . type ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . routing ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . getRequest ( ) . preference ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( false ) ) ; assertThat ( percolateRequest . source ( ) , notNullValue ( ) ) ; sourceMap = XContentFactory . xContent ( percolateRequest . source ( ) ) . createParser ( percolateRequest . source ( ) ) . map ( ) ; assertThat ( sourceMap . get ( <str> ) , nullValue ( ) ) ; percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . preference ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . getRequest ( ) , notNullValue ( ) ) ; assertThat ( percolateRequest . getRequest ( ) . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . type ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . getRequest ( ) . routing ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . getRequest ( ) . preference ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . fromOptions ( false , false , true , false , IndicesOptions . strictExpandOpenAndForbidClosed ( ) ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( false ) ) ; assertThat ( percolateRequest . source ( ) , notNullValue ( ) ) ; sourceMap = XContentFactory . xContent ( percolateRequest . source ( ) ) . createParser ( percolateRequest . source ( ) ) . map ( ) ; assertThat ( sourceMap . get ( <str> ) , nullValue ( ) ) ; } public void testParseBulkRequestsDefaults ( ) throws Exception { byte [ ] data = StreamsUtils . copyToBytesFromClasspath ( <str> ) ; MultiPercolateRequest request = new MultiPercolateRequest ( ) ; request . indices ( <str> ) . documentType ( <str> ) . indicesOptions ( IndicesOptions . lenientExpandOpen ( ) ) ; request . add ( data , <int> , data . length ) ; assertThat ( request . requests ( ) . size ( ) , equalTo ( <int> ) ) ; PercolateRequest percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . preference ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . lenientExpandOpen ( ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( false ) ) ; assertThat ( percolateRequest . getRequest ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . source ( ) , notNullValue ( ) ) ; Map sourceMap = XContentFactory . xContent ( percolateRequest . source ( ) ) . createParser ( percolateRequest . source ( ) ) . map ( ) ; assertThat ( sourceMap . get ( <str> ) , equalTo ( ( Object ) MapBuilder . newMapBuilder ( ) . put ( <str> , <str> ) . map ( ) ) ) ; percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . routing ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . preference ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . lenientExpandOpen ( ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( false ) ) ; assertThat ( percolateRequest . getRequest ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . source ( ) , notNullValue ( ) ) ; sourceMap = XContentFactory . xContent ( percolateRequest . source ( ) ) . createParser ( percolateRequest . source ( ) ) . map ( ) ; assertThat ( sourceMap . get ( <str> ) , equalTo ( ( Object ) MapBuilder . newMapBuilder ( ) . put ( <str> , <str> ) . map ( ) ) ) ; percolateRequest = request . requests ( ) . get ( <int> ) ; assertThat ( percolateRequest . indices ( ) [ <int> ] , equalTo ( <str> ) ) ; assertThat ( percolateRequest . documentType ( ) , equalTo ( <str> ) ) ; assertThat ( percolateRequest . indicesOptions ( ) , equalTo ( IndicesOptions . lenientExpandOpen ( ) ) ) ; assertThat ( percolateRequest . onlyCount ( ) , equalTo ( false ) ) ; assertThat ( percolateRequest . getRequest ( ) , nullValue ( ) ) ; assertThat ( percolateRequest . source ( ) , notNullValue ( ) ) ; sourceMap = XContentFactory . xContent ( percolateRequest . source ( ) ) . createParser ( percolateRequest . source ( ) ) . map ( ) ; assertThat ( sourceMap . get ( <str> ) , equalTo ( ( Object ) MapBuilder . newMapBuilder ( ) . put ( <str> , <str> ) . map ( ) ) ) ; } } 

package org . apache . cassandra . db . compaction ; import java . util . * ; import java . util . concurrent . TimeUnit ; import org . junit . BeforeClass ; import org . junit . Ignore ; import org . junit . Test ; import org . junit . runner . RunWith ; import org . apache . cassandra . OrderedJUnit4ClassRunner ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . Util ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . db . * ; import org . apache . cassandra . db . marshal . AsciiType ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . dht . * ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . schema . CompactionParams ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . * ; @RunWith ( OrderedJUnit4ClassRunner . class ) public class CompactionsTest { private static final String KEYSPACE1 = <str> ; private static final String CF_DENSE1 = <str> ; private static final String CF_STANDARD1 = <str> ; private static final String CF_STANDARD2 = <str> ; private static final String CF_STANDARD3 = <str> ; private static final String CF_STANDARD4 = <str> ; private static final String CF_SUPER1 = <str> ; private static final String CF_SUPER5 = <str> ; private static final String CF_SUPERGC = <str> ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { Map < String , String > compactionOptions = new HashMap < > ( ) ; compactionOptions . put ( <str> , <str> ) ; SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . denseCFMD ( KEYSPACE1 , CF_DENSE1 ) . compaction ( CompactionParams . scts ( compactionOptions ) ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD1 ) . compaction ( CompactionParams . scts ( compactionOptions ) ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD2 ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD3 ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD4 ) , SchemaLoader . superCFMD ( KEYSPACE1 , CF_SUPER1 , AsciiType . instance ) , SchemaLoader . superCFMD ( KEYSPACE1 , CF_SUPER5 , AsciiType . instance ) , SchemaLoader . superCFMD ( KEYSPACE1 , CF_SUPERGC , AsciiType . instance ) . gcGraceSeconds ( <int> ) ) ; } public ColumnFamilyStore testSingleSSTableCompaction ( String strategyClassName ) throws Exception { Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; ColumnFamilyStore store = keyspace . getColumnFamilyStore ( CF_DENSE1 ) ; store . clearUnsafe ( ) ; store . metadata . gcGraceSeconds ( <int> ) ; store . disableAutoCompaction ( ) ; long timestamp = populate ( KEYSPACE1 , CF_DENSE1 , <int> , <int> , <int> ) ; store . forceBlockingFlush ( ) ; assertEquals ( <int> , store . getLiveSSTables ( ) . size ( ) ) ; long originalSize = store . getLiveSSTables ( ) . iterator ( ) . next ( ) . uncompressedLength ( ) ; TimeUnit . SECONDS . sleep ( <int> ) ; store . enableAutoCompaction ( ) ; FBUtilities . waitOnFutures ( CompactionManager . instance . submitBackground ( store ) ) ; do { TimeUnit . SECONDS . sleep ( <int> ) ; } while ( CompactionManager . instance . getPendingTasks ( ) > <int> | | CompactionManager . instance . getActiveCompactions ( ) > <int> ) ; assertEquals ( <int> , store . getLiveSSTables ( ) . size ( ) ) ; long size = store . getLiveSSTables ( ) . iterator ( ) . next ( ) . uncompressedLength ( ) ; assertTrue ( <str> + originalSize + <str> + size , size < originalSize ) ; assertMaxTimestamp ( store , timestamp ) ; return store ; } private long populate ( String ks , String cf , int startRowKey , int endRowKey , int ttl ) { long timestamp = System . currentTimeMillis ( ) ; CFMetaData cfm = Keyspace . open ( ks ) . getColumnFamilyStore ( cf ) . metadata ; for ( int i = startRowKey ; i < = endRowKey ; i + + ) { DecoratedKey key = Util . dk ( Integer . toString ( i ) ) ; for ( int j = <int> ; j < <int> ; j + + ) { new RowUpdateBuilder ( cfm , timestamp , j > <int> ? ttl : <int> , key . getKey ( ) ) . clustering ( Integer . toString ( j ) ) . add ( <str> , ByteBufferUtil . EMPTY_BYTE_BUFFER ) . build ( ) . applyUnsafe ( ) ; } } return timestamp ; } @Test public void testSingleSSTableCompactionWithSizeTieredCompaction ( ) throws Exception { testSingleSSTableCompaction ( SizeTieredCompactionStrategy . class . getCanonicalName ( ) ) ; } public static void assertMaxTimestamp ( ColumnFamilyStore cfs , long maxTimestampExpected ) { long maxTimestampObserved = Long . MIN_VALUE ; for ( SSTableReader sstable : cfs . getLiveSSTables ( ) ) maxTimestampObserved = Math . max ( sstable . getMaxTimestamp ( ) , maxTimestampObserved ) ; assertEquals ( maxTimestampExpected , maxTimestampObserved ) ; } private static Range < Token > rangeFor ( int start , int end ) { return new Range < Token > ( new ByteOrderedPartitioner . BytesToken ( String . format ( <str> , start ) . getBytes ( ) ) , new ByteOrderedPartitioner . BytesToken ( String . format ( <str> , end ) . getBytes ( ) ) ) ; } private static Collection < Range < Token > > makeRanges ( int . . . keys ) { Collection < Range < Token > > ranges = new ArrayList < Range < Token > > ( keys . length / <int> ) ; for ( int i = <int> ; i < keys . length ; i + = <int> ) ranges . add ( rangeFor ( keys [ i ] , keys [ i + <int> ] ) ) ; return ranges ; } private static void insertRowWithKey ( int key ) { long timestamp = System . currentTimeMillis ( ) ; DecoratedKey dk = Util . dk ( String . format ( <str> , key ) ) ; new RowUpdateBuilder ( Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF_STANDARD1 ) . metadata , timestamp , dk . getKey ( ) ) . add ( <str> , <str> ) . build ( ) . applyUnsafe ( ) ; } @Test @Ignore ( <str> ) public void testNeedsCleanup ( ) { Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; ColumnFamilyStore store = keyspace . getColumnFamilyStore ( <str> ) ; store . clearUnsafe ( ) ; store . disableAutoCompaction ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { insertRowWithKey ( i ) ; insertRowWithKey ( i + <int> ) ; insertRowWithKey ( i + <int> ) ; } store . forceBlockingFlush ( ) ; assertEquals ( <int> , store . getLiveSSTables ( ) . size ( ) ) ; SSTableReader sstable = store . getLiveSSTables ( ) . iterator ( ) . next ( ) ; assertFalse ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> ) ) ) ; assertFalse ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> ) ) ) ; assertFalse ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertFalse ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> ) ) ) ; assertFalse ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertTrue ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertFalse ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; assertFalse ( CompactionManager . needsCleanup ( sstable , makeRanges ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ) ; } } 

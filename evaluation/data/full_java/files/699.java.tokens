package org . apache . cassandra . io . sstable ; import java . io . * ; import org . apache . cassandra . utils . AbstractIterator ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . db . * ; import org . apache . cassandra . db . rows . * ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . io . util . RandomAccessReader ; public class SSTableIdentityIterator extends AbstractIterator < Unfiltered > implements Comparable < SSTableIdentityIterator > , UnfilteredRowIterator { private final SSTableReader sstable ; private final DecoratedKey key ; private final DeletionTime partitionLevelDeletion ; private final String filename ; private final SSTableSimpleIterator iterator ; private final Row staticRow ; public SSTableIdentityIterator ( SSTableReader sstable , RandomAccessReader file , DecoratedKey key ) { this . sstable = sstable ; this . filename = file . getPath ( ) ; this . key = key ; try { this . partitionLevelDeletion = DeletionTime . serializer . deserialize ( file ) ; SerializationHelper helper = new SerializationHelper ( sstable . metadata , sstable . descriptor . version . correspondingMessagingVersion ( ) , SerializationHelper . Flag . LOCAL ) ; this . iterator = SSTableSimpleIterator . create ( sstable . metadata , file , sstable . header , helper , partitionLevelDeletion ) ; this . staticRow = iterator . readStaticRow ( ) ; } catch ( IOException e ) { sstable . markSuspect ( ) ; throw new CorruptSSTableException ( e , filename ) ; } } public CFMetaData metadata ( ) { return sstable . metadata ; } public PartitionColumns columns ( ) { return metadata ( ) . partitionColumns ( ) ; } public boolean isReverseOrder ( ) { return false ; } public DecoratedKey partitionKey ( ) { return key ; } public DeletionTime partitionLevelDeletion ( ) { return partitionLevelDeletion ; } public Row staticRow ( ) { return staticRow ; } protected Unfiltered computeNext ( ) { try { return iterator . hasNext ( ) ? iterator . next ( ) : endOfData ( ) ; } catch ( IOError e ) { if ( e . getCause ( ) instanceof IOException ) { sstable . markSuspect ( ) ; throw new CorruptSSTableException ( ( Exception ) e . getCause ( ) , filename ) ; } else { throw e ; } } } public void close ( ) { } public String getPath ( ) { return filename ; } public EncodingStats stats ( ) { return new EncodingStats ( sstable . getMinTimestamp ( ) , sstable . getMinLocalDeletionTime ( ) , sstable . getMinTTL ( ) ) ; } public int compareTo ( SSTableIdentityIterator o ) { return key . compareTo ( o . key ) ; } } 

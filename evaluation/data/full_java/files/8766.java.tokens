package org . elasticsearch . plugin . example ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . yaml . YamlXContent ; import org . elasticsearch . env . Environment ; import java . io . IOException ; import java . nio . file . Path ; import static java . nio . charset . StandardCharsets . UTF_8 ; import static java . nio . file . Files . newBufferedReader ; import static org . elasticsearch . common . io . Streams . copyToString ; public class ExamplePluginConfiguration { private String test = <str> ; @Inject public ExamplePluginConfiguration ( Environment env ) throws IOException { Path configFile = env . configFile ( ) . resolve ( <str> ) ; String contents = copyToString ( newBufferedReader ( configFile , UTF_8 ) ) ; XContentParser parser = YamlXContent . yamlXContent . createParser ( contents ) ; String currentFieldName = null ; XContentParser . Token token = parser . nextToken ( ) ; assert token = = XContentParser . Token . START_OBJECT ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) ) { test = parser . text ( ) ; } else { throw new ElasticsearchParseException ( <str> , currentFieldName ) ; } } else { throw new ElasticsearchParseException ( <str> , currentFieldName ) ; } } } public String getTestConfig ( ) { return test ; } } 

package io . netty . microbenchmark . common ; import io . netty . microbench . util . AbstractMicrobenchmark ; import io . netty . util . NetUtil ; import java . util . HashMap ; import java . util . Map ; import org . openjdk . jmh . annotations . Benchmark ; import org . openjdk . jmh . annotations . Measurement ; import org . openjdk . jmh . annotations . Threads ; import org . openjdk . jmh . annotations . Warmup ; @Threads ( <int> ) @Warmup ( iterations = <int> ) @Measurement ( iterations = <int> ) public class NetUtilBenchmark extends AbstractMicrobenchmark { @Benchmark public void useGetByNameIpv4 ( ) { for ( String testEntry : invalidIpV4Hosts . keySet ( ) ) { if ( NetUtil . getByName ( testEntry , true ) ! = null ) { throw new RuntimeException ( <str> ) ; } } } @Benchmark public void useGetByNameIpv6 ( ) { for ( String testEntry : invalidIpV6Hosts . keySet ( ) ) { if ( NetUtil . getByName ( testEntry , true ) ! = null ) { throw new RuntimeException ( <str> ) ; } } } @Benchmark public void useIsValidIpv6 ( ) { for ( String host : invalidIpV6Hosts . keySet ( ) ) { if ( NetUtil . isValidIpV6Address ( host ) ) { throw new RuntimeException ( <str> ) ; } } } @Benchmark public void useIsValidIpv4 ( ) { for ( String host : invalidIpV4Hosts . keySet ( ) ) { if ( NetUtil . isValidIpV4Address ( host ) ) { throw new RuntimeException ( <str> ) ; } } } private static final Map < String , byte [ ] > invalidIpV4Hosts = new HashMap < String , byte [ ] > ( ) { private static final long serialVersionUID = <int> ; { put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; } } ; private static final Map < String , byte [ ] > invalidIpV6Hosts = new HashMap < String , byte [ ] > ( ) { private static final long serialVersionUID = - <int> ; { put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; put ( <str> , null ) ; } } ; } 

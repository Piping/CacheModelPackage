package com . google . common . collect . testing ; import static com . google . common . collect . testing . testers . CollectionAddAllTester . getAddAllUnsupportedNonePresentMethod ; import static com . google . common . collect . testing . testers . CollectionAddAllTester . getAddAllUnsupportedSomePresentMethod ; import static com . google . common . collect . testing . testers . CollectionAddTester . getAddUnsupportedNotPresentMethod ; import static com . google . common . collect . testing . testers . CollectionCreationTester . getCreateWithNullUnsupportedMethod ; import static com . google . common . collect . testing . testers . MapCreationTester . getCreateWithNullKeyUnsupportedMethod ; import static com . google . common . collect . testing . testers . MapEntrySetTester . getContainsEntryWithIncomparableKeyMethod ; import static com . google . common . collect . testing . testers . MapEntrySetTester . getContainsEntryWithIncomparableValueMethod ; import static com . google . common . collect . testing . testers . MapPutAllTester . getPutAllNullKeyUnsupportedMethod ; import static com . google . common . collect . testing . testers . MapPutTester . getPutNullKeyUnsupportedMethod ; import junit . framework . Test ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . Collection ; import java . util . Map ; public class OpenJdk6MapTests extends TestsForMapsInJavaUtil { public static Test suite ( ) { return new OpenJdk6MapTests ( ) . allTests ( ) ; } @Override protected Collection < Method > suppressForTreeMapNatural ( ) { return Arrays . asList ( getPutNullKeyUnsupportedMethod ( ) , getPutAllNullKeyUnsupportedMethod ( ) , getCreateWithNullKeyUnsupportedMethod ( ) , getCreateWithNullUnsupportedMethod ( ) , getContainsEntryWithIncomparableKeyMethod ( ) , getContainsEntryWithIncomparableValueMethod ( ) ) ; } @Override protected Collection < Method > suppressForConcurrentHashMap ( ) { return Arrays . asList ( getAddUnsupportedNotPresentMethod ( ) , getAddAllUnsupportedNonePresentMethod ( ) , getAddAllUnsupportedSomePresentMethod ( ) ) ; } @Override protected Collection < Method > suppressForConcurrentSkipListMap ( ) { return Arrays . asList ( getContainsEntryWithIncomparableKeyMethod ( ) , getContainsEntryWithIncomparableValueMethod ( ) ) ; } } 

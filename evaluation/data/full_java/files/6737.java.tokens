package org . elasticsearch . index . shard ; import org . apache . lucene . util . CollectionUtil ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Comparator ; import java . util . Iterator ; import java . util . List ; public class CommitPoints implements Iterable < CommitPoint > { private final List < CommitPoint > commitPoints ; public CommitPoints ( List < CommitPoint > commitPoints ) { CollectionUtil . introSort ( commitPoints , new Comparator < CommitPoint > ( ) { @Override public int compare ( CommitPoint o1 , CommitPoint o2 ) { return ( o2 . version ( ) < o1 . version ( ) ? - <int> : ( o2 . version ( ) = = o1 . version ( ) ? <int> : <int> ) ) ; } } ) ; this . commitPoints = Collections . unmodifiableList ( new ArrayList < > ( commitPoints ) ) ; } public List < CommitPoint > commits ( ) { return this . commitPoints ; } public boolean hasVersion ( long version ) { for ( CommitPoint commitPoint : commitPoints ) { if ( commitPoint . version ( ) = = version ) { return true ; } } return false ; } public CommitPoint . FileInfo findPhysicalIndexFile ( String physicalName ) { for ( CommitPoint commitPoint : commitPoints ) { CommitPoint . FileInfo fileInfo = commitPoint . findPhysicalIndexFile ( physicalName ) ; if ( fileInfo ! = null ) { return fileInfo ; } } return null ; } public CommitPoint . FileInfo findNameFile ( String name ) { for ( CommitPoint commitPoint : commitPoints ) { CommitPoint . FileInfo fileInfo = commitPoint . findNameFile ( name ) ; if ( fileInfo ! = null ) { return fileInfo ; } } return null ; } @Override public Iterator < CommitPoint > iterator ( ) { return commitPoints . iterator ( ) ; } public static byte [ ] toXContent ( CommitPoint commitPoint ) throws Exception { XContentBuilder builder = XContentFactory . contentBuilder ( XContentType . JSON ) . prettyPrint ( ) ; builder . startObject ( ) ; builder . field ( <str> , commitPoint . version ( ) ) ; builder . field ( <str> , commitPoint . name ( ) ) ; builder . field ( <str> , commitPoint . type ( ) . toString ( ) ) ; builder . startObject ( <str> ) ; for ( CommitPoint . FileInfo fileInfo : commitPoint . indexFiles ( ) ) { builder . startObject ( fileInfo . name ( ) ) ; builder . field ( <str> , fileInfo . physicalName ( ) ) ; builder . field ( <str> , fileInfo . length ( ) ) ; if ( fileInfo . checksum ( ) ! = null ) { builder . field ( <str> , fileInfo . checksum ( ) ) ; } builder . endObject ( ) ; } builder . endObject ( ) ; builder . startObject ( <str> ) ; for ( CommitPoint . FileInfo fileInfo : commitPoint . translogFiles ( ) ) { builder . startObject ( fileInfo . name ( ) ) ; builder . field ( <str> , fileInfo . physicalName ( ) ) ; builder . field ( <str> , fileInfo . length ( ) ) ; builder . endObject ( ) ; } builder . endObject ( ) ; builder . endObject ( ) ; return builder . bytes ( ) . toBytes ( ) ; } public static CommitPoint fromXContent ( byte [ ] data ) throws Exception { try ( XContentParser parser = XContentFactory . xContent ( XContentType . JSON ) . createParser ( data ) ) { String currentFieldName = null ; XContentParser . Token token = parser . nextToken ( ) ; if ( token = = null ) { throw new IOException ( <str> ) ; } long version = - <int> ; String name = null ; CommitPoint . Type type = null ; List < CommitPoint . FileInfo > indexFiles = new ArrayList < > ( ) ; List < CommitPoint . FileInfo > translogFiles = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { List < CommitPoint . FileInfo > files = null ; if ( <str> . equals ( currentFieldName ) | | <str> . equals ( currentFieldName ) ) { files = indexFiles ; } else if ( <str> . equals ( currentFieldName ) | | <str> . equals ( currentFieldName ) ) { files = translogFiles ; } else { throw new IOException ( <str> + currentFieldName + <str> ) ; } while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { String fileName = currentFieldName ; String physicalName = null ; long size = - <int> ; String checksum = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) | | <str> . equals ( currentFieldName ) ) { physicalName = parser . text ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { size = parser . longValue ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { checksum = parser . text ( ) ; } } } if ( physicalName = = null ) { throw new IOException ( <str> + fileName + <str> ) ; } if ( size = = - <int> ) { throw new IOException ( <str> + fileName + <str> ) ; } files . add ( new CommitPoint . FileInfo ( fileName , physicalName , size , checksum ) ) ; } } } else if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) ) { version = parser . longValue ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { name = parser . text ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { type = CommitPoint . Type . valueOf ( parser . text ( ) ) ; } } } if ( version = = - <int> ) { throw new IOException ( <str> ) ; } if ( name = = null ) { throw new IOException ( <str> ) ; } if ( type = = null ) { throw new IOException ( <str> ) ; } return new CommitPoint ( version , name , type , indexFiles , translogFiles ) ; } } } 

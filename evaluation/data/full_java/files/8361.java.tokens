package org . elasticsearch . indices . store ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . IndexShardRoutingTable ; import org . elasticsearch . cluster . routing . ShardRoutingState ; import org . elasticsearch . cluster . routing . TestShardRouting ; import org . elasticsearch . cluster . routing . UnassignedInfo ; import org . elasticsearch . common . transport . LocalTransportAddress ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . test . ESTestCase ; import org . junit . Before ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import static org . elasticsearch . Version . CURRENT ; import static org . elasticsearch . test . VersionUtils . randomVersion ; public class IndicesStoreTests extends ESTestCase { private final static ShardRoutingState [ ] NOT_STARTED_STATES ; static { Set < ShardRoutingState > set = new HashSet < > ( ) ; set . addAll ( Arrays . asList ( ShardRoutingState . values ( ) ) ) ; set . remove ( ShardRoutingState . STARTED ) ; NOT_STARTED_STATES = set . toArray ( new ShardRoutingState [ set . size ( ) ] ) ; } private IndicesStore indicesStore ; private DiscoveryNode localNode ; @Before public void before ( ) { localNode = new DiscoveryNode ( <str> , new LocalTransportAddress ( <str> ) , Version . CURRENT ) ; indicesStore = new IndicesStore ( ) ; } public void testShardCanBeDeletedNoShardRouting ( ) throws Exception { int numShards = randomIntBetween ( <int> , <int> ) ; int numReplicas = randomInt ( <int> ) ; ClusterState . Builder clusterState = ClusterState . builder ( new ClusterName ( <str> ) ) ; clusterState . metaData ( MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( numShards ) . numberOfReplicas ( numReplicas ) ) ) ; IndexShardRoutingTable . Builder routingTable = new IndexShardRoutingTable . Builder ( new ShardId ( <str> , <int> ) ) ; assertFalse ( indicesStore . shardCanBeDeleted ( clusterState . build ( ) , routingTable . build ( ) ) ) ; } public void testShardCanBeDeletedNoShardStarted ( ) throws Exception { int numShards = randomIntBetween ( <int> , <int> ) ; int numReplicas = randomInt ( <int> ) ; ClusterState . Builder clusterState = ClusterState . builder ( new ClusterName ( <str> ) ) ; clusterState . metaData ( MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( numShards ) . numberOfReplicas ( numReplicas ) ) ) ; IndexShardRoutingTable . Builder routingTable = new IndexShardRoutingTable . Builder ( new ShardId ( <str> , <int> ) ) ; for ( int i = <int> ; i < numShards ; i + + ) { int unStartedShard = randomInt ( numReplicas ) ; for ( int j = <int> ; j < = numReplicas ; j + + ) { ShardRoutingState state ; if ( j = = unStartedShard ) { state = randomFrom ( NOT_STARTED_STATES ) ; } else { state = randomFrom ( ShardRoutingState . values ( ) ) ; } UnassignedInfo unassignedInfo = null ; if ( state = = ShardRoutingState . UNASSIGNED ) { unassignedInfo = new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , null ) ; } routingTable . addShard ( TestShardRouting . newShardRouting ( <str> , i , <str> , null , null , j = = <int> , state , <int> , unassignedInfo ) ) ; } } assertFalse ( indicesStore . shardCanBeDeleted ( clusterState . build ( ) , routingTable . build ( ) ) ) ; } public void testShardCanBeDeletedShardExistsLocally ( ) throws Exception { int numShards = randomIntBetween ( <int> , <int> ) ; int numReplicas = randomInt ( <int> ) ; ClusterState . Builder clusterState = ClusterState . builder ( new ClusterName ( <str> ) ) ; clusterState . metaData ( MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( numShards ) . numberOfReplicas ( numReplicas ) ) ) ; clusterState . nodes ( DiscoveryNodes . builder ( ) . localNodeId ( localNode . id ( ) ) . put ( localNode ) . put ( new DiscoveryNode ( <str> , new LocalTransportAddress ( <str> ) , Version . CURRENT ) ) ) ; IndexShardRoutingTable . Builder routingTable = new IndexShardRoutingTable . Builder ( new ShardId ( <str> , <int> ) ) ; int localShardId = randomInt ( numShards - <int> ) ; for ( int i = <int> ; i < numShards ; i + + ) { String nodeId = i = = localShardId ? localNode . getId ( ) : randomBoolean ( ) ? <str> : <str> ; String relocationNodeId = randomBoolean ( ) ? null : randomBoolean ( ) ? localNode . getId ( ) : <str> ; routingTable . addShard ( TestShardRouting . newShardRouting ( <str> , i , nodeId , relocationNodeId , true , ShardRoutingState . STARTED , <int> ) ) ; for ( int j = <int> ; j < numReplicas ; j + + ) { routingTable . addShard ( TestShardRouting . newShardRouting ( <str> , i , nodeId , relocationNodeId , false , ShardRoutingState . STARTED , <int> ) ) ; } } assertFalse ( indicesStore . shardCanBeDeleted ( clusterState . build ( ) , routingTable . build ( ) ) ) ; } public void testShardCanBeDeletedNodeNotInList ( ) throws Exception { int numShards = randomIntBetween ( <int> , <int> ) ; int numReplicas = randomInt ( <int> ) ; ClusterState . Builder clusterState = ClusterState . builder ( new ClusterName ( <str> ) ) ; clusterState . metaData ( MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( numShards ) . numberOfReplicas ( numReplicas ) ) ) ; clusterState . nodes ( DiscoveryNodes . builder ( ) . localNodeId ( localNode . id ( ) ) . put ( localNode ) ) ; IndexShardRoutingTable . Builder routingTable = new IndexShardRoutingTable . Builder ( new ShardId ( <str> , <int> ) ) ; for ( int i = <int> ; i < numShards ; i + + ) { String relocatingNodeId = randomBoolean ( ) ? null : <str> ; routingTable . addShard ( TestShardRouting . newShardRouting ( <str> , i , <str> , relocatingNodeId , true , ShardRoutingState . STARTED , <int> ) ) ; for ( int j = <int> ; j < numReplicas ; j + + ) { routingTable . addShard ( TestShardRouting . newShardRouting ( <str> , i , <str> , relocatingNodeId , false , ShardRoutingState . STARTED , <int> ) ) ; } } assertFalse ( indicesStore . shardCanBeDeleted ( clusterState . build ( ) , routingTable . build ( ) ) ) ; } public void testShardCanBeDeletedNodeVersion ( ) throws Exception { int numShards = randomIntBetween ( <int> , <int> ) ; int numReplicas = randomInt ( <int> ) ; final Version nodeVersion = randomBoolean ( ) ? CURRENT : randomVersion ( random ( ) ) ; ClusterState . Builder clusterState = ClusterState . builder ( new ClusterName ( <str> ) ) ; clusterState . metaData ( MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( numShards ) . numberOfReplicas ( numReplicas ) ) ) ; clusterState . nodes ( DiscoveryNodes . builder ( ) . localNodeId ( localNode . id ( ) ) . put ( localNode ) . put ( new DiscoveryNode ( <str> , new LocalTransportAddress ( <str> ) , nodeVersion ) ) ) ; IndexShardRoutingTable . Builder routingTable = new IndexShardRoutingTable . Builder ( new ShardId ( <str> , <int> ) ) ; for ( int i = <int> ; i < numShards ; i + + ) { routingTable . addShard ( TestShardRouting . newShardRouting ( <str> , i , <str> , null , true , ShardRoutingState . STARTED , <int> ) ) ; for ( int j = <int> ; j < numReplicas ; j + + ) { routingTable . addShard ( TestShardRouting . newShardRouting ( <str> , i , <str> , null , false , ShardRoutingState . STARTED , <int> ) ) ; } } assertTrue ( indicesStore . shardCanBeDeleted ( clusterState . build ( ) , routingTable . build ( ) ) ) ; } public void testShardCanBeDeletedRelocatingNode ( ) throws Exception { int numShards = randomIntBetween ( <int> , <int> ) ; int numReplicas = randomInt ( <int> ) ; ClusterState . Builder clusterState = ClusterState . builder ( new ClusterName ( <str> ) ) ; clusterState . metaData ( MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( numShards ) . numberOfReplicas ( numReplicas ) ) ) ; final Version nodeVersion = randomBoolean ( ) ? CURRENT : randomVersion ( random ( ) ) ; clusterState . nodes ( DiscoveryNodes . builder ( ) . localNodeId ( localNode . id ( ) ) . put ( localNode ) . put ( new DiscoveryNode ( <str> , new LocalTransportAddress ( <str> ) , Version . CURRENT ) ) . put ( new DiscoveryNode ( <str> , new LocalTransportAddress ( <str> ) , nodeVersion ) ) ) ; IndexShardRoutingTable . Builder routingTable = new IndexShardRoutingTable . Builder ( new ShardId ( <str> , <int> ) ) ; for ( int i = <int> ; i < numShards ; i + + ) { routingTable . addShard ( TestShardRouting . newShardRouting ( <str> , i , <str> , <str> , true , ShardRoutingState . STARTED , <int> ) ) ; for ( int j = <int> ; j < numReplicas ; j + + ) { routingTable . addShard ( TestShardRouting . newShardRouting ( <str> , i , <str> , <str> , false , ShardRoutingState . STARTED , <int> ) ) ; } } assertTrue ( indicesStore . shardCanBeDeleted ( clusterState . build ( ) , routingTable . build ( ) ) ) ; } } 

package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . allocation . command . AllocationCommands ; import org . elasticsearch . cluster . routing . allocation . command . MoveAllocationCommand ; import org . elasticsearch . cluster . routing . allocation . decider . ClusterRebalanceAllocationDecider ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESAllocationTestCase ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . RELOCATING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; public class DeadNodesAllocationTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( DeadNodesAllocationTests . class ) ; public void testSimpleDeadNodeOnStartedPrimaryShard ( ) { AllocationService allocation = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingAllocation . Result rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; logger . info ( <str> ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; logger . info ( <str> ) ; String nodeIdToFail = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . currentNodeId ( ) ; String nodeIdRemaining = nodeIdToFail . equals ( <str> ) ? <str> : <str> ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( nodeIdRemaining ) ) ) . build ( ) ; rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( nodeIdRemaining ) . get ( <int> ) . primary ( ) , equalTo ( true ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( nodeIdRemaining ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; } public void testDeadNodeWhileRelocatingOnToNode ( ) { AllocationService allocation = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingAllocation . Result rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; logger . info ( <str> ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; String origPrimaryNodeId = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . currentNodeId ( ) ; String origReplicaNodeId = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . replicaShards ( ) . get ( <int> ) . currentNodeId ( ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new MoveAllocationCommand ( clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . shardId ( ) , clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . currentNodeId ( ) , <str> ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( origPrimaryNodeId ) . get ( <int> ) . state ( ) , equalTo ( RELOCATING ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( origPrimaryNodeId ) ) . put ( newNode ( origReplicaNodeId ) ) ) . build ( ) ; rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( origPrimaryNodeId ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( origReplicaNodeId ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; } public void testDeadNodeWhileRelocatingOnFromNode ( ) { AllocationService allocation = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingAllocation . Result rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; rerouteResult = allocation . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; logger . info ( <str> ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . size ( ) , equalTo ( <int> ) ) ; String origPrimaryNodeId = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . currentNodeId ( ) ; String origReplicaNodeId = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . replicaShards ( ) . get ( <int> ) . currentNodeId ( ) ; logger . info ( <str> ) ; rerouteResult = allocation . reroute ( clusterState , new AllocationCommands ( new MoveAllocationCommand ( clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . shardId ( ) , clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . primaryShard ( ) . currentNodeId ( ) , <str> ) ) ) ; assertThat ( rerouteResult . changed ( ) , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( origPrimaryNodeId ) . get ( <int> ) . state ( ) , equalTo ( RELOCATING ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( origReplicaNodeId ) ) ) . build ( ) ; rerouteResult = allocation . reroute ( clusterState , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( origReplicaNodeId ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; } } 

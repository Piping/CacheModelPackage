package org . gradle . api . internal . tasks . compile . incremental ; import org . gradle . api . Action ; import org . gradle . api . internal . file . FileOperations ; import org . gradle . api . internal . tasks . compile . incremental . jar . JarChangeProcessor ; import org . gradle . api . internal . tasks . compile . incremental . jar . JarClasspathSnapshot ; import org . gradle . api . internal . tasks . compile . incremental . jar . PreviousCompilation ; import org . gradle . api . internal . tasks . compile . incremental . recomp . RecompilationSpec ; import org . gradle . api . tasks . incremental . IncrementalTaskInputs ; import org . gradle . api . tasks . incremental . InputFileDetails ; public class RecompilationSpecProvider { private final SourceToNameConverter sourceToNameConverter ; private final FileOperations fileOperations ; public RecompilationSpecProvider ( SourceToNameConverter sourceToNameConverter , FileOperations fileOperations ) { this . sourceToNameConverter = sourceToNameConverter ; this . fileOperations = fileOperations ; } public RecompilationSpec provideRecompilationSpec ( IncrementalTaskInputs inputs , PreviousCompilation previousCompilation , JarClasspathSnapshot jarClasspathSnapshot ) { RecompilationSpec spec = new RecompilationSpec ( ) ; JavaChangeProcessor javaChangeProcessor = new JavaChangeProcessor ( previousCompilation , sourceToNameConverter ) ; JarChangeProcessor jarChangeProcessor = new JarChangeProcessor ( fileOperations , jarClasspathSnapshot , previousCompilation ) ; InputChangeAction action = new InputChangeAction ( spec , javaChangeProcessor , jarChangeProcessor ) ; inputs . outOfDate ( action ) ; if ( action . spec . getFullRebuildCause ( ) ! = null ) { return action . spec ; } inputs . removed ( action ) ; return action . spec ; } private static class InputChangeAction implements Action < InputFileDetails > { private final RecompilationSpec spec ; private final JavaChangeProcessor javaChangeProcessor ; private final JarChangeProcessor jarChangeProcessor ; public InputChangeAction ( RecompilationSpec spec , JavaChangeProcessor javaChangeProcessor , JarChangeProcessor jarChangeProcessor ) { this . spec = spec ; this . javaChangeProcessor = javaChangeProcessor ; this . jarChangeProcessor = jarChangeProcessor ; } public void execute ( InputFileDetails input ) { if ( spec . getFullRebuildCause ( ) ! = null ) { return ; } if ( input . getFile ( ) . getName ( ) . endsWith ( <str> ) ) { javaChangeProcessor . processChange ( input , spec ) ; } if ( input . getFile ( ) . getName ( ) . endsWith ( <str> ) ) { jarChangeProcessor . processChange ( input , spec ) ; } } } } 

package org . apache . cassandra . cql3 . validation . operations ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . exceptions . SyntaxException ; import org . apache . cassandra . schema . SchemaKeyspace ; import org . junit . Assert ; import org . junit . Test ; import static java . lang . String . format ; import static org . junit . Assert . assertEquals ; public class AlterTest extends CQLTester { @Test public void testAddList ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> , list ( <str> ) ) ) ; } @Test public void testDropList ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> ) ) ; } @Test public void testAddMap ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> , map ( <str> , <str> ) ) ) ; } @Test public void testDropMap ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> ) ) ; } @Test public void testDropListAndAddListWithSameName ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> , null ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , <str> , list ( <str> ) ) ) ; } @Test public void testDropListAndAddMapWithSameName ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testChangeStrategyWithUnquotedAgrument ( ) throws Throwable { createTable ( <str> ) ; assertInvalidSyntaxMessage ( <str> , <str> ) ; } @Test public void testAlterIndexInterval ( ) throws Throwable { String tableName = createTable ( <str> ) ; ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( tableName ) ; alterTable ( <str> ) ; assertEquals ( <int> , cfs . metadata . params . minIndexInterval ) ; assertEquals ( <int> , cfs . metadata . params . maxIndexInterval ) ; alterTable ( <str> ) ; assertEquals ( <int> , cfs . metadata . params . minIndexInterval ) ; assertEquals ( <int> , cfs . metadata . params . maxIndexInterval ) ; } @Test public void testCreateAlterKeyspaces ( ) throws Throwable { assertInvalidThrow ( SyntaxException . class , <str> ) ; assertInvalidThrow ( ConfigurationException . class , <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , true ) , row ( KEYSPACE , true ) , row ( KEYSPACE_PER_TEST , true ) , row ( <str> , false ) ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , false , map ( <str> , <str> , <str> , <str> ) ) , row ( KEYSPACE , true , map ( <str> , <str> , <str> , <str> ) ) , row ( KEYSPACE_PER_TEST , true , map ( <str> , <str> , <str> , <str> ) ) , row ( <str> , true , map ( <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertInvalidThrow ( ConfigurationException . class , <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> , map ( <str> , <str> , <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; execute ( <str> ) ; } @Test public void testAlterStatementWithAdd ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , null , <str> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , null , null , <str> ) ) ; } @Test public void testDowngradeToCompact ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; flush ( ) ; execute ( <str> ) ; execute ( <str> ) ; } @Test public void testDoubleWith ( ) throws Throwable { String [ ] stmts = { <str> , <str> } ; for ( String stmt : stmts ) { assertInvalidSyntaxMessage ( <str> , stmt ) ; } } @Test public void testAlterTableWithCompression ( ) throws Throwable { createTable ( <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> , <str> , <str> ) ) ) ; execute ( <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> ) ) ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( format ( <str> , SchemaKeyspace . NAME , SchemaKeyspace . TABLES ) , KEYSPACE , currentTable ( ) ) , row ( map ( <str> , <str> ) ) ) ; assertThrowsConfigurationException ( <str> , <str> ) ; assertThrowsConfigurationException ( <str> , <str> ) ; assertThrowsConfigurationException ( <str> , <str> ) ; assertThrowsConfigurationException ( <str> , <str> ) ; assertThrowsConfigurationException ( <str> , <str> ) ; } @Test public void testAlterType ( ) throws Throwable { createTable ( <str> ) ; alterTable ( <str> ) ; createTable ( <str> ) ; alterTable ( <str> ) ; createTable ( <str> ) ; assertThrowsConfigurationException ( <str> , <str> ) ; } @Test public void testAlterColumnTypeToDate ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; createTable ( <str> ) ; execute ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } private void assertThrowsConfigurationException ( String errorMsg , String alterStmt ) throws Throwable { try { execute ( alterStmt ) ; Assert . fail ( <str> + alterStmt ) ; } catch ( ConfigurationException e ) { assertEquals ( errorMsg , e . getMessage ( ) ) ; } } @Test public void testAlterClusteringColumnTypeInCompactTable ( ) throws Throwable { createTable ( <str> ) ; assertInvalidThrow ( InvalidRequestException . class , <str> ) ; } } 

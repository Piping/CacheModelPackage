package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . search . aggregations . Aggregator . SubAggCollectionMode ; import org . elasticsearch . search . aggregations . bucket . filter . Filter ; import org . elasticsearch . search . aggregations . bucket . nested . Nested ; import org . elasticsearch . search . aggregations . bucket . nested . ReverseNested ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . search . aggregations . metrics . valuecount . ValueCount ; import org . elasticsearch . test . ESIntegTestCase ; import org . hamcrest . Matchers ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_SHARDS ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . count ; import static org . elasticsearch . search . aggregations . AggregationBuilders . filter ; import static org . elasticsearch . search . aggregations . AggregationBuilders . nested ; import static org . elasticsearch . search . aggregations . AggregationBuilders . reverseNested ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . sameInstance ; import static org . hamcrest . core . IsNull . notNullValue ; @ESIntegTestCase.SuiteScopeTestCase public class ReverseNestedIT extends ESIntegTestCase { @Override public void setupSuiteScopeCluster ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; insertType1 ( Arrays . asList ( <str> , <str> , <str> ) , Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; insertType1 ( Arrays . asList ( <str> , <str> , <str> ) , Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; insertType1 ( Arrays . asList ( <str> , <str> , <str> ) , Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; refresh ( ) ; insertType1 ( Arrays . asList ( <str> , <str> ) , Arrays . asList ( <str> , <str> , <str> , <str> ) ) ; insertType1 ( Arrays . asList ( <str> , <str> ) , Arrays . asList ( <str> , <str> ) ) ; insertType1 ( Arrays . asList ( <str> ) , Arrays . asList ( <str> , <str> ) ) ; refresh ( ) ; insertType1 ( Arrays . asList ( <str> , <str> ) , Arrays . asList ( <str> , <str> ) ) ; insertType1 ( Arrays . asList ( <str> , <str> ) , Arrays . asList ( <str> ) ) ; insertType1 ( Arrays . asList ( <str> ) , Arrays . asList ( <str> , <str> ) ) ; refresh ( ) ; insertType2 ( new String [ ] [ ] { new String [ ] { <str> , <str> , <str> , <str> , <str> } , new String [ ] { <str> , <str> , <str> , <str> , <str> } , new String [ ] { <str> , <str> } } ) ; insertType2 ( new String [ ] [ ] { new String [ ] { <str> , <str> , <str> , <str> , <str> } , new String [ ] { <str> , <str> , <str> } } ) ; refresh ( ) ; insertType2 ( new String [ ] [ ] { new String [ ] { <str> , <str> , <str> , <str> , <str> } , new String [ ] { <str> , <str> , <str> , <str> , <str> } } ) ; insertType2 ( new String [ ] [ ] { new String [ ] { <str> , <str> , <str> } , new String [ ] { <str> , <str> , <str> } } ) ; refresh ( ) ; ensureSearchable ( ) ; } private void insertType1 ( List < String > values1 , List < String > values2 ) throws Exception { XContentBuilder source = jsonBuilder ( ) . startObject ( ) . array ( <str> , values1 . toArray ( ) ) . startArray ( <str> ) ; for ( String value1 : values2 ) { source . startObject ( ) . field ( <str> , value1 ) . endObject ( ) ; } source . endArray ( ) . endObject ( ) ; indexRandom ( false , client ( ) . prepareIndex ( <str> , <str> ) . setRouting ( <str> ) . setSource ( source ) ) ; } private void insertType2 ( String [ ] [ ] values ) throws Exception { XContentBuilder source = jsonBuilder ( ) . startObject ( ) . startArray ( <str> ) ; for ( String [ ] value : values ) { source . startObject ( ) . field ( <str> , value [ <int> ] ) . startArray ( <str> ) ; for ( int i = <int> ; i < value . length ; i + + ) { source . startObject ( ) . field ( <str> , value [ i ] ) . endObject ( ) ; } source . endArray ( ) . endObject ( ) ; } source . endArray ( ) . endObject ( ) ; indexRandom ( false , client ( ) . prepareIndex ( <str> , <str> ) . setRouting ( <str> ) . setSource ( source ) ) ; } public void testSimpleReverseNestedToRoot ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( terms ( <str> ) . field ( <str> ) . subAggregation ( reverseNested ( <str> ) . subAggregation ( terms ( <str> ) . field ( <str> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) ) ) ) . get ( ) ; assertSearchResponse ( response ) ; Nested nested = response . getAggregations ( ) . get ( <str> ) ; assertThat ( nested , notNullValue ( ) ) ; assertThat ( nested . getName ( ) , equalTo ( <str> ) ) ; assertThat ( nested . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( nested . getAggregations ( ) . asList ( ) . isEmpty ( ) , is ( false ) ) ; Terms usernames = nested . getAggregations ( ) . get ( <str> ) ; assertThat ( usernames , notNullValue ( ) ) ; assertThat ( usernames . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; List < Terms . Bucket > usernameBuckets = new ArrayList < > ( usernames . getBuckets ( ) ) ; Terms . Bucket bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; ReverseNested reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( ( long ) reverseNested . getProperty ( <str> ) , equalTo ( <int> ) ) ; Terms tags = reverseNested . getAggregations ( ) . get ( <str> ) ; assertThat ( ( Terms ) reverseNested . getProperty ( <str> ) , sameInstance ( tags ) ) ; List < Terms . Bucket > tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; } public void testSimpleNested1ToRootToNested2 ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( reverseNested ( <str> ) . subAggregation ( nested ( <str> ) . path ( <str> ) ) ) ) . get ( ) ; assertSearchResponse ( response ) ; Nested nested = response . getAggregations ( ) . get ( <str> ) ; assertThat ( nested . getName ( ) , equalTo ( <str> ) ) ; assertThat ( nested . getDocCount ( ) , equalTo ( <int> ) ) ; ReverseNested reverseNested = nested . getAggregations ( ) . get ( <str> ) ; assertThat ( reverseNested . getName ( ) , equalTo ( <str> ) ) ; assertThat ( reverseNested . getDocCount ( ) , equalTo ( <int> ) ) ; nested = reverseNested . getAggregations ( ) . get ( <str> ) ; assertThat ( nested . getName ( ) , equalTo ( <str> ) ) ; assertThat ( nested . getDocCount ( ) , equalTo ( <int> ) ) ; } public void testSimpleReverseNestedToNested1 ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( terms ( <str> ) . field ( <str> ) . order ( Terms . Order . term ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . size ( <int> ) . subAggregation ( reverseNested ( <str> ) . path ( <str> ) . subAggregation ( terms ( <str> ) . field ( <str> ) . order ( Terms . Order . term ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) ) ) ) . get ( ) ; assertSearchResponse ( response ) ; Nested nested = response . getAggregations ( ) . get ( <str> ) ; assertThat ( nested , notNullValue ( ) ) ; assertThat ( nested . getName ( ) , equalTo ( <str> ) ) ; assertThat ( nested . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( nested . getAggregations ( ) . asList ( ) . isEmpty ( ) , is ( false ) ) ; Terms usernames = nested . getAggregations ( ) . get ( <str> ) ; assertThat ( usernames , notNullValue ( ) ) ; assertThat ( usernames . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; List < Terms . Bucket > usernameBuckets = new ArrayList < > ( usernames . getBuckets ( ) ) ; Terms . Bucket bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; ReverseNested reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( reverseNested . getDocCount ( ) , equalTo ( <int> ) ) ; Terms tags = reverseNested . getAggregations ( ) . get ( <str> ) ; List < Terms . Bucket > tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( reverseNested . getDocCount ( ) , equalTo ( <int> ) ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( reverseNested . getDocCount ( ) , equalTo ( <int> ) ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( reverseNested . getDocCount ( ) , equalTo ( <int> ) ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; bucket = usernameBuckets . get ( <int> ) ; assertThat ( bucket . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; reverseNested = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( reverseNested . getDocCount ( ) , equalTo ( <int> ) ) ; tags = reverseNested . getAggregations ( ) . get ( <str> ) ; tagsBuckets = new ArrayList < > ( tags . getBuckets ( ) ) ; assertThat ( tagsBuckets . size ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getDocCount ( ) , equalTo ( <int> ) ) ; assertThat ( tagsBuckets . get ( <int> ) . getKeyAsString ( ) , equalTo ( <str> ) ) ; } public void testReverseNestedAggWithoutNestedAgg ( ) { try { client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( reverseNested ( <str> ) . subAggregation ( terms ( <str> ) . field ( <str> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) ) ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testNonExistingNestedField ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( reverseNested ( <str> ) . path ( <str> ) ) ) . execute ( ) . actionGet ( ) ; Nested nested = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( nested , Matchers . notNullValue ( ) ) ; assertThat ( nested . getName ( ) , equalTo ( <str> ) ) ; ReverseNested reverseNested = nested . getAggregations ( ) . get ( <str> ) ; assertThat ( reverseNested . getDocCount ( ) , is ( <int> l ) ) ; } public void testSameParentDocHavingMultipleBuckets ( ) throws Exception { XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( SETTING_NUMBER_OF_SHARDS , <int> ) . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ) . addMapping ( <str> , mapping ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setRefresh ( true ) . setSource ( jsonBuilder ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) . endArray ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ) . get ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( terms ( <str> ) . field ( <str> ) . subAggregation ( reverseNested ( <str> ) . subAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( filter ( <str> ) . filter ( termQuery ( <str> , <str> ) ) . subAggregation ( count ( <str> ) . field ( <str> ) ) ) ) ) ) ) . get ( ) ; assertNoFailures ( response ) ; assertHitCount ( response , <int> ) ; Nested nested0 = response . getAggregations ( ) . get ( <str> ) ; assertThat ( nested0 . getDocCount ( ) , equalTo ( <int> ) ) ; Terms terms = nested0 . getAggregations ( ) . get ( <str> ) ; assertThat ( terms . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; for ( String bucketName : new String [ ] { <str> , <str> , <str> } ) { logger . info ( <str> , bucketName ) ; Terms . Bucket bucket = terms . getBucketByKey ( bucketName ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; ReverseNested toRoot = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( toRoot . getDocCount ( ) , equalTo ( <int> ) ) ; Nested nested1 = toRoot . getAggregations ( ) . get ( <str> ) ; assertThat ( nested1 . getDocCount ( ) , equalTo ( <int> ) ) ; Filter filterByBar = nested1 . getAggregations ( ) . get ( <str> ) ; assertThat ( filterByBar . getDocCount ( ) , equalTo ( <int> ) ) ; ValueCount barCount = filterByBar . getAggregations ( ) . get ( <str> ) ; assertThat ( barCount . getValue ( ) , equalTo ( <int> ) ) ; } response = client ( ) . prepareSearch ( <str> ) . addAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( terms ( <str> ) . field ( <str> ) . subAggregation ( reverseNested ( <str> ) . subAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( filter ( <str> ) . filter ( termQuery ( <str> , <str> ) ) . subAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( filter ( <str> ) . filter ( termQuery ( <str> , <str> ) ) . subAggregation ( reverseNested ( <str> ) . path ( <str> ) . subAggregation ( count ( <str> ) . field ( <str> ) ) ) ) ) ) ) ) ) ) . get ( ) ; assertNoFailures ( response ) ; assertHitCount ( response , <int> ) ; nested0 = response . getAggregations ( ) . get ( <str> ) ; assertThat ( nested0 . getDocCount ( ) , equalTo ( <int> ) ) ; terms = nested0 . getAggregations ( ) . get ( <str> ) ; assertThat ( terms . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; for ( String bucketName : new String [ ] { <str> , <str> , <str> } ) { logger . info ( <str> , bucketName ) ; Terms . Bucket bucket = terms . getBucketByKey ( bucketName ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( <int> ) ) ; ReverseNested toRoot = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( toRoot . getDocCount ( ) , equalTo ( <int> ) ) ; Nested nested1 = toRoot . getAggregations ( ) . get ( <str> ) ; assertThat ( nested1 . getDocCount ( ) , equalTo ( <int> ) ) ; Filter filterByBar = nested1 . getAggregations ( ) . get ( <str> ) ; assertThat ( filterByBar . getDocCount ( ) , equalTo ( <int> ) ) ; Nested nested2 = filterByBar . getAggregations ( ) . get ( <str> ) ; assertThat ( nested2 . getDocCount ( ) , equalTo ( <int> ) ) ; Filter filterBarColor = nested2 . getAggregations ( ) . get ( <str> ) ; assertThat ( filterBarColor . getDocCount ( ) , equalTo ( <int> ) ) ; ReverseNested reverseToBar = filterBarColor . getAggregations ( ) . get ( <str> ) ; assertThat ( reverseToBar . getDocCount ( ) , equalTo ( <int> ) ) ; ValueCount barCount = reverseToBar . getAggregations ( ) . get ( <str> ) ; assertThat ( barCount . getValue ( ) , equalTo ( <int> ) ) ; } } } 

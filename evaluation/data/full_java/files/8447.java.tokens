package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . bucket . missing . Missing ; import org . elasticsearch . search . aggregations . metrics . avg . Avg ; import org . elasticsearch . test . ESIntegTestCase ; import org . hamcrest . Matchers ; import java . util . ArrayList ; import java . util . List ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . avg ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . missing ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . core . IsNull . notNullValue ; @ESIntegTestCase.SuiteScopeTestCase public class MissingIT extends ESIntegTestCase { static int numDocs , numDocsMissing , numDocsUnmapped ; @Override public void setupSuiteScopeCluster ( ) throws Exception { createIndex ( <str> ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; numDocs = randomIntBetween ( <int> , <int> ) ; numDocsMissing = randomIntBetween ( <int> , numDocs - <int> ) ; for ( int i = <int> ; i < numDocsMissing ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i ) . endObject ( ) ) ) ; } for ( int i = numDocsMissing ; i < numDocs ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ; } createIndex ( <str> ) ; numDocsUnmapped = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < numDocsUnmapped ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i ) . endObject ( ) ) ) ; } prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i * <int> ) . endObject ( ) ) ) ; } indexRandom ( true , builders ) ; ensureSearchable ( ) ; } public void testUnmapped ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( missing ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Missing missing = response . getAggregations ( ) . get ( <str> ) ; assertThat ( missing , notNullValue ( ) ) ; assertThat ( missing . getName ( ) , equalTo ( <str> ) ) ; assertThat ( missing . getDocCount ( ) , equalTo ( ( long ) numDocsUnmapped ) ) ; } public void testPartiallyUnmapped ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> , <str> ) . addAggregation ( missing ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Missing missing = response . getAggregations ( ) . get ( <str> ) ; assertThat ( missing , notNullValue ( ) ) ; assertThat ( missing . getName ( ) , equalTo ( <str> ) ) ; assertThat ( missing . getDocCount ( ) , equalTo ( ( long ) numDocsMissing + numDocsUnmapped ) ) ; } public void testSimple ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( missing ( <str> ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Missing missing = response . getAggregations ( ) . get ( <str> ) ; assertThat ( missing , notNullValue ( ) ) ; assertThat ( missing . getName ( ) , equalTo ( <str> ) ) ; assertThat ( missing . getDocCount ( ) , equalTo ( ( long ) numDocsMissing ) ) ; } public void testWithSubAggregation ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> , <str> ) . addAggregation ( missing ( <str> ) . field ( <str> ) . subAggregation ( avg ( <str> ) . field ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; assertThat ( <str> , response . getSuccessfulShards ( ) , equalTo ( response . getTotalShards ( ) ) ) ; Missing missing = response . getAggregations ( ) . get ( <str> ) ; assertThat ( missing , notNullValue ( ) ) ; assertThat ( missing . getName ( ) , equalTo ( <str> ) ) ; assertThat ( missing . getDocCount ( ) , equalTo ( ( long ) numDocsMissing + numDocsUnmapped ) ) ; assertThat ( ( long ) missing . getProperty ( <str> ) , equalTo ( ( long ) numDocsMissing + numDocsUnmapped ) ) ; assertThat ( missing . getAggregations ( ) . asList ( ) . isEmpty ( ) , is ( false ) ) ; long sum = <int> ; for ( int i = <int> ; i < numDocsMissing ; + + i ) { sum + = i ; } for ( int i = <int> ; i < numDocsUnmapped ; + + i ) { sum + = i ; } Avg avgValue = missing . getAggregations ( ) . get ( <str> ) ; assertThat ( avgValue , notNullValue ( ) ) ; assertThat ( avgValue . getName ( ) , equalTo ( <str> ) ) ; assertThat ( avgValue . getValue ( ) , equalTo ( ( double ) sum / ( numDocsMissing + numDocsUnmapped ) ) ) ; assertThat ( ( double ) missing . getProperty ( <str> ) , equalTo ( ( double ) sum / ( numDocsMissing + numDocsUnmapped ) ) ) ; } public void testWithInheritedSubMissing ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> , <str> ) . addAggregation ( missing ( <str> ) . field ( <str> ) . subAggregation ( missing ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Missing topMissing = response . getAggregations ( ) . get ( <str> ) ; assertThat ( topMissing , notNullValue ( ) ) ; assertThat ( topMissing . getName ( ) , equalTo ( <str> ) ) ; assertThat ( topMissing . getDocCount ( ) , equalTo ( ( long ) numDocsMissing + numDocsUnmapped ) ) ; assertThat ( topMissing . getAggregations ( ) . asList ( ) . isEmpty ( ) , is ( false ) ) ; Missing subMissing = topMissing . getAggregations ( ) . get ( <str> ) ; assertThat ( subMissing , notNullValue ( ) ) ; assertThat ( subMissing . getName ( ) , equalTo ( <str> ) ) ; assertThat ( subMissing . getDocCount ( ) , equalTo ( ( long ) numDocsMissing + numDocsUnmapped ) ) ; } public void testEmptyAggregation ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . minDocCount ( <int> ) . subAggregation ( missing ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; Histogram histo = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , Matchers . notNullValue ( ) ) ; Histogram . Bucket bucket = histo . getBuckets ( ) . get ( <int> ) ; assertThat ( bucket , Matchers . notNullValue ( ) ) ; Missing missing = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( missing , Matchers . notNullValue ( ) ) ; assertThat ( missing . getName ( ) , equalTo ( <str> ) ) ; assertThat ( missing . getDocCount ( ) , is ( <int> l ) ) ; } } 

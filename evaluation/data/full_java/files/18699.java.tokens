package com . badlogic . gdx . tests . g3d . voxel ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . graphics . g3d . Environment ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . graphics . g3d . shaders . DefaultShader ; import com . badlogic . gdx . graphics . g3d . utils . FirstPersonCameraController ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . tests . utils . GdxTest ; public class VoxelTest extends GdxTest { SpriteBatch spriteBatch ; BitmapFont font ; ModelBatch modelBatch ; PerspectiveCamera camera ; Environment lights ; FirstPersonCameraController controller ; VoxelWorld voxelWorld ; @Override public void create ( ) { spriteBatch = new SpriteBatch ( ) ; font = new BitmapFont ( ) ; modelBatch = new ModelBatch ( ) ; DefaultShader . defaultCullFace = GL20 . GL_FRONT ; camera = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; camera . near = <float> ; camera . far = <int> ; controller = new FirstPersonCameraController ( camera ) ; Gdx . input . setInputProcessor ( controller ) ; lights = new Environment ( ) ; lights . set ( new ColorAttribute ( ColorAttribute . AmbientLight , <float> , <float> , <float> , <float> ) ) ; lights . add ( new DirectionalLight ( ) . set ( <int> , <int> , <int> , <int> , - <int> , <int> ) ) ; Texture texture = new Texture ( Gdx . files . internal ( <str> ) ) ; TextureRegion [ ] [ ] tiles = TextureRegion . split ( texture , <int> , <int> ) ; MathUtils . random . setSeed ( <int> ) ; voxelWorld = new VoxelWorld ( tiles [ <int> ] , <int> , <int> , <int> ) ; PerlinNoiseGenerator . generateVoxels ( voxelWorld , <int> , <int> , <int> ) ; float camX = voxelWorld . voxelsX / <float> ; float camZ = voxelWorld . voxelsZ / <float> ; float camY = voxelWorld . getHighest ( camX , camZ ) + <float> ; camera . position . set ( camX , camY , camZ ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <float> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; modelBatch . begin ( camera ) ; modelBatch . render ( voxelWorld , lights ) ; modelBatch . end ( ) ; controller . update ( ) ; spriteBatch . begin ( ) ; font . draw ( spriteBatch , <str> + Gdx . graphics . getFramesPerSecond ( ) + <str> + voxelWorld . renderedChunks + <str> + voxelWorld . numChunks , <int> , <int> ) ; spriteBatch . end ( ) ; } @Override public void resize ( int width , int height ) { spriteBatch . getProjectionMatrix ( ) . setToOrtho2D ( <int> , <int> , width , height ) ; camera . viewportWidth = width ; camera . viewportHeight = height ; camera . update ( ) ; } } 

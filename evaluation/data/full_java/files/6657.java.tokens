package org . elasticsearch . index . query ; import java . util . Locale ; import org . apache . lucene . util . automaton . RegExp ; import org . elasticsearch . common . Strings ; public enum RegexpFlag { INTERSECTION ( RegExp . INTERSECTION ) , COMPLEMENT ( RegExp . COMPLEMENT ) , EMPTY ( RegExp . EMPTY ) , ANYSTRING ( RegExp . ANYSTRING ) , INTERVAL ( RegExp . INTERVAL ) , NONE ( RegExp . NONE ) , ALL ( RegExp . ALL ) ; final int value ; private RegexpFlag ( int value ) { this . value = value ; } public int value ( ) { return value ; } public static int resolveValue ( String flags ) { if ( flags = = null | | flags . isEmpty ( ) ) { return RegExp . ALL ; } int magic = RegExp . NONE ; for ( String s : Strings . delimitedListToStringArray ( flags , <str> ) ) { if ( s . isEmpty ( ) ) { continue ; } try { RegexpFlag flag = RegexpFlag . valueOf ( s . toUpperCase ( Locale . ROOT ) ) ; if ( flag = = RegexpFlag . NONE ) { continue ; } if ( flag = = RegexpFlag . ALL ) { return flag . value ( ) ; } magic | = flag . value ( ) ; } catch ( IllegalArgumentException iae ) { throw new IllegalArgumentException ( <str> + s + <str> ) ; } } return magic ; } } 

package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . CircleShape ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . FixtureDef ; import com . badlogic . gdx . physics . box2d . World ; public class VaryingRestitution extends Box2DTest { @Override protected void createWorld ( World world ) { { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( <int> , <int> ) ) ; ground . createFixture ( shape , <float> ) ; shape . dispose ( ) ; } { CircleShape shape = new CircleShape ( ) ; shape . setRadius ( <int> ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; float restitution [ ] = { <int> , <float> , <float> , <float> , <float> , <float> , <float> } ; for ( int i = <int> ; i < restitution . length ; i + + ) { BodyDef bd = new BodyDef ( ) ; bd . type = BodyType . DynamicBody ; bd . position . set ( - <float> + <float> * i , <float> ) ; Body body = world . createBody ( bd ) ; fd . restitution = restitution [ i ] ; body . createFixture ( fd ) ; } shape . dispose ( ) ; } } } 

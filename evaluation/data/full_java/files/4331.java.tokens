package org . eclipse . debug . internal . ui . sourcelookup . browsers ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import org . eclipse . core . resources . IContainer ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . viewers . ViewerFilter ; import org . eclipse . swt . custom . BusyIndicator ; public class ArchiveFilter extends ViewerFilter { private Set < IResource > fArchives ; private List < ISourceContainer > fExisting ; @Override public boolean select ( Viewer viewer , Object parentElement , Object element ) { return fArchives . contains ( element ) & & ! fExisting . contains ( element ) ; } public ArchiveFilter ( List < ISourceContainer > objects ) { fExisting = objects ; init ( ) ; } private void init ( ) { BusyIndicator . showWhile ( DebugUIPlugin . getStandardDisplay ( ) , new Runnable ( ) { @Override public void run ( ) { fArchives = new HashSet < IResource > ( ) ; traverse ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) , fArchives ) ; } } ) ; } private boolean traverse ( IContainer container , Set < IResource > set ) { boolean added = false ; try { IResource [ ] resources = container . members ( ) ; for ( int i = <int> ; i < resources . length ; i + + ) { IResource resource = resources [ i ] ; if ( resource instanceof IFile ) { IFile file = ( IFile ) resource ; String ext = file . getFileExtension ( ) ; if ( ext ! = null & & ( ext . equalsIgnoreCase ( <str> ) | | ext . equalsIgnoreCase ( <str> ) ) ) { set . add ( file ) ; added = true ; } } else if ( resource instanceof IContainer ) { if ( traverse ( ( IContainer ) resource , set ) ) { set . add ( resource ) ; added = true ; } } } } catch ( CoreException e ) { } return added ; } } 

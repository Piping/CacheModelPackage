package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import org . junit . Test ; import org . apache . cassandra . serializers . SimpleDateSerializer ; public class SimpleDateTypeTest { @Test public void TestComparison ( ) { ByteBuffer d1 = SimpleDateType . instance . fromString ( <str> ) ; ByteBuffer d2 = SimpleDateSerializer . instance . serialize ( makeUnsigned ( <int> ) ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) = = <int> : <str> ; String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateSerializer . instance . serialize ( makeUnsigned ( <int> ) ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateSerializer . instance . serialize ( makeUnsigned ( - <int> ) ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) > <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateType . instance . fromString ( <str> ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; Integer intLimit = Integer . MAX_VALUE ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateType . instance . fromString ( intLimit . toString ( ) ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; Long overLimit = ( long ) ( Integer . MAX_VALUE ) ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateType . instance . fromString ( overLimit . toString ( ) ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; Long i1 = <int> L ; Long i2 = ( long ) Math . pow ( <int> , <int> ) - <int> ; d1 = SimpleDateType . instance . fromString ( i1 . toString ( ) ) ; d2 = SimpleDateType . instance . fromString ( i2 . toString ( ) ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateType . instance . fromString ( <str> ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; d1 = SimpleDateSerializer . instance . serialize ( makeUnsigned ( <int> ) ) ; d2 = SimpleDateSerializer . instance . serialize ( makeUnsigned ( Integer . MAX_VALUE ) ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateType . instance . fromString ( <str> ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateType . instance . fromString ( <str> ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateType . instance . fromString ( <str> ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) = = <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; d1 = SimpleDateType . instance . fromString ( <str> ) ; d2 = SimpleDateType . instance . fromString ( <str> ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; for ( int i = <int> ; i < <int> ; + + i ) { int offset = ( int ) Math . pow ( <int> , i ) ; d1 = SimpleDateSerializer . instance . serialize ( makeUnsigned ( <int> - offset ) ) ; d2 = SimpleDateSerializer . instance . serialize ( makeUnsigned ( offset ) ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) < <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; } for ( int i = <int> ; i < <int> ; + + i ) { int offset = ( int ) Math . pow ( <int> , i ) ; d1 = SimpleDateSerializer . instance . serialize ( makeUnsigned ( offset ) ) ; d2 = SimpleDateSerializer . instance . serialize ( makeUnsigned ( <int> - offset ) ) ; assert SimpleDateType . instance . compare ( d1 , d2 ) > <int> : String . format ( <str> , SimpleDateSerializer . instance . deserialize ( d1 ) , SimpleDateSerializer . instance . deserialize ( d2 ) ) ; } } private Integer makeUnsigned ( int input ) { return input - Integer . MIN_VALUE ; } } 

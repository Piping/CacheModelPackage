package org . elasticsearch . repositories . uri ; import org . elasticsearch . cluster . metadata . SnapshotId ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . blobstore . BlobPath ; import org . elasticsearch . common . blobstore . BlobStore ; import org . elasticsearch . common . blobstore . url . URLBlobStore ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . util . URIPattern ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . snapshots . IndexShardRepository ; import org . elasticsearch . repositories . RepositoryException ; import org . elasticsearch . repositories . RepositoryName ; import org . elasticsearch . repositories . RepositorySettings ; import org . elasticsearch . repositories . blobstore . BlobStoreRepository ; import java . io . IOException ; import java . net . URISyntaxException ; import java . net . URL ; import java . util . List ; public class URLRepository extends BlobStoreRepository { public final static String TYPE = <str> ; public final static String [ ] DEFAULT_SUPPORTED_PROTOCOLS = { <str> , <str> , <str> , <str> , <str> } ; public final static String SUPPORTED_PROTOCOLS_SETTING = <str> ; public final static String ALLOWED_URLS_SETTING = <str> ; private final String [ ] supportedProtocols ; private final URIPattern [ ] urlWhiteList ; private final Environment environment ; private final URLBlobStore blobStore ; private final BlobPath basePath ; private boolean listDirectories ; @Inject public URLRepository ( RepositoryName name , RepositorySettings repositorySettings , IndexShardRepository indexShardRepository , Environment environment ) throws IOException { super ( name . getName ( ) , repositorySettings , indexShardRepository ) ; URL url ; String path = repositorySettings . settings ( ) . get ( <str> , settings . get ( <str> , settings . get ( <str> ) ) ) ; if ( path = = null ) { throw new RepositoryException ( name . name ( ) , <str> ) ; } else { url = new URL ( path ) ; } supportedProtocols = settings . getAsArray ( SUPPORTED_PROTOCOLS_SETTING , DEFAULT_SUPPORTED_PROTOCOLS ) ; String [ ] urlWhiteList = settings . getAsArray ( ALLOWED_URLS_SETTING , Strings . EMPTY_ARRAY ) ; this . urlWhiteList = new URIPattern [ urlWhiteList . length ] ; for ( int i = <int> ; i < urlWhiteList . length ; i + + ) { this . urlWhiteList [ i ] = new URIPattern ( urlWhiteList [ i ] ) ; } this . environment = environment ; listDirectories = repositorySettings . settings ( ) . getAsBoolean ( <str> , settings . getAsBoolean ( <str> , true ) ) ; URL normalizedURL = checkURL ( url ) ; blobStore = new URLBlobStore ( settings , normalizedURL ) ; basePath = BlobPath . cleanPath ( ) ; } @Override protected BlobStore blobStore ( ) { return blobStore ; } @Override protected BlobPath basePath ( ) { return basePath ; } @Override public List < SnapshotId > snapshots ( ) { if ( listDirectories ) { return super . snapshots ( ) ; } else { try { return readSnapshotList ( ) ; } catch ( IOException ex ) { throw new RepositoryException ( repositoryName , <str> , ex ) ; } } } private URL checkURL ( URL url ) { String protocol = url . getProtocol ( ) ; if ( protocol = = null ) { throw new RepositoryException ( repositoryName , <str> + url + <str> ) ; } for ( String supportedProtocol : supportedProtocols ) { if ( supportedProtocol . equals ( protocol ) ) { try { if ( URIPattern . match ( urlWhiteList , url . toURI ( ) ) ) { return url ; } } catch ( URISyntaxException ex ) { logger . warn ( <str> , url ) ; throw new RepositoryException ( repositoryName , <str> + url + <str> ) ; } URL normalizedUrl = environment . resolveRepoURL ( url ) ; if ( normalizedUrl = = null ) { logger . warn ( <str> , url , environment . repoFiles ( ) ) ; throw new RepositoryException ( repositoryName , <str> + url + <str> ) ; } return normalizedUrl ; } } throw new RepositoryException ( repositoryName , <str> + protocol + <str> + url + <str> ) ; } @Override public boolean readOnly ( ) { return true ; } } 

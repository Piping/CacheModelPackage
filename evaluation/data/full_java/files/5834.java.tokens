package org . elasticsearch . common . inject . internal ; import org . elasticsearch . common . inject . Binder ; import org . elasticsearch . common . inject . ConfigurationException ; import org . elasticsearch . common . inject . Key ; import org . elasticsearch . common . inject . Provider ; import org . elasticsearch . common . inject . TypeLiteral ; import org . elasticsearch . common . inject . binder . AnnotatedBindingBuilder ; import org . elasticsearch . common . inject . spi . Element ; import org . elasticsearch . common . inject . spi . InjectionPoint ; import org . elasticsearch . common . inject . spi . Message ; import java . lang . annotation . Annotation ; import java . util . HashSet ; import java . util . List ; import java . util . Objects ; import java . util . Set ; import static java . util . Collections . emptySet ; import static java . util . Collections . unmodifiableSet ; public class BindingBuilder < T > extends AbstractBindingBuilder < T > implements AnnotatedBindingBuilder < T > { public BindingBuilder ( Binder binder , List < Element > elements , Object source , Key < T > key ) { super ( binder , elements , source , key ) ; } @Override public BindingBuilder < T > annotatedWith ( Class < ? extends Annotation > annotationType ) { annotatedWithInternal ( annotationType ) ; return this ; } @Override public BindingBuilder < T > annotatedWith ( Annotation annotation ) { annotatedWithInternal ( annotation ) ; return this ; } @Override public BindingBuilder < T > to ( Class < ? extends T > implementation ) { return to ( Key . get ( implementation ) ) ; } @Override public BindingBuilder < T > to ( TypeLiteral < ? extends T > implementation ) { return to ( Key . get ( implementation ) ) ; } @Override public BindingBuilder < T > to ( Key < ? extends T > linkedKey ) { Objects . requireNonNull ( linkedKey , <str> ) ; checkNotTargetted ( ) ; BindingImpl < T > base = getBinding ( ) ; setBinding ( new LinkedBindingImpl < > ( base . getSource ( ) , base . getKey ( ) , base . getScoping ( ) , linkedKey ) ) ; return this ; } @Override public void toInstance ( T instance ) { checkNotTargetted ( ) ; Set < InjectionPoint > injectionPoints ; if ( instance ! = null ) { try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( instance . getClass ( ) ) ; } catch ( ConfigurationException e ) { for ( Message message : e . getErrorMessages ( ) ) { binder . addError ( message ) ; } injectionPoints = unmodifiableSet ( new HashSet < InjectionPoint > ( e . getPartialValue ( ) ) ) ; } } else { binder . addError ( BINDING_TO_NULL ) ; injectionPoints = emptySet ( ) ; } BindingImpl < T > base = getBinding ( ) ; setBinding ( new InstanceBindingImpl < > ( base . getSource ( ) , base . getKey ( ) , base . getScoping ( ) , injectionPoints , instance ) ) ; } @Override public BindingBuilder < T > toProvider ( Provider < ? extends T > provider ) { Objects . requireNonNull ( provider , <str> ) ; checkNotTargetted ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( provider . getClass ( ) ) ; } catch ( ConfigurationException e ) { for ( Message message : e . getErrorMessages ( ) ) { binder . addError ( message ) ; } injectionPoints = unmodifiableSet ( new HashSet < InjectionPoint > ( e . getPartialValue ( ) ) ) ; } BindingImpl < T > base = getBinding ( ) ; setBinding ( new ProviderInstanceBindingImpl < > ( base . getSource ( ) , base . getKey ( ) , base . getScoping ( ) , injectionPoints , provider ) ) ; return this ; } @Override public BindingBuilder < T > toProvider ( Class < ? extends Provider < ? extends T > > providerType ) { return toProvider ( Key . get ( providerType ) ) ; } @Override public BindingBuilder < T > toProvider ( Key < ? extends Provider < ? extends T > > providerKey ) { Objects . requireNonNull ( providerKey , <str> ) ; checkNotTargetted ( ) ; BindingImpl < T > base = getBinding ( ) ; setBinding ( new LinkedProviderBindingImpl < > ( base . getSource ( ) , base . getKey ( ) , base . getScoping ( ) , providerKey ) ) ; return this ; } @Override public String toString ( ) { return <str> + getBinding ( ) . getKey ( ) . getTypeLiteral ( ) + <str> ; } } 

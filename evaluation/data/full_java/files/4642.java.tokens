package org . eclipse . debug . internal . ui . views . variables ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IIndexedValue ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; public class IndexedValuePartition implements IIndexedValue { private int fOffset ; private int fLength ; private IIndexedValue fValue ; public IndexedValuePartition ( IIndexedValue value , int offset , int length ) { fValue = value ; fOffset = offset ; fLength = length ; } @Override public int getSize ( ) { return fLength ; } @Override public IVariable getVariable ( int offset ) throws DebugException { return fValue . getVariable ( offset ) ; } @Override public String getReferenceTypeName ( ) throws DebugException { return fValue . getReferenceTypeName ( ) ; } @Override public String getValueString ( ) { return IInternalDebugCoreConstants . EMPTY_STRING ; } @Override public IVariable [ ] getVariables ( ) throws DebugException { return getVariables ( fOffset , fLength ) ; } @Override public boolean hasVariables ( ) { return fLength > <int> ; } @Override public boolean isAllocated ( ) throws DebugException { return fValue . isAllocated ( ) ; } @Override public IDebugTarget getDebugTarget ( ) { return fValue . getDebugTarget ( ) ; } @Override public ILaunch getLaunch ( ) { return fValue . getLaunch ( ) ; } @Override public String getModelIdentifier ( ) { return fValue . getModelIdentifier ( ) ; } @Override public < T > T getAdapter ( Class < T > adapter ) { return fValue . getAdapter ( adapter ) ; } @Override public IVariable [ ] getVariables ( int offset , int length ) throws DebugException { return fValue . getVariables ( offset , length ) ; } @Override public int getInitialOffset ( ) { return fOffset ; } } 

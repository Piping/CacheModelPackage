package org . elasticsearch . search . suggest ; import org . elasticsearch . action . support . ToXContentToBytes ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; public class SuggestBuilder extends ToXContentToBytes { private final String name ; private String globalText ; private final List < SuggestionBuilder < ? > > suggestions = new ArrayList < > ( ) ; public SuggestBuilder ( ) { this . name = null ; } public SuggestBuilder ( String name ) { this . name = name ; } public SuggestBuilder setText ( String globalText ) { this . globalText = globalText ; return this ; } public SuggestBuilder addSuggestion ( SuggestionBuilder < ? > suggestion ) { suggestions . add ( suggestion ) ; return this ; } public List < SuggestionBuilder < ? > > getSuggestion ( ) { return suggestions ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { if ( name = = null ) { builder . startObject ( ) ; } else { builder . startObject ( name ) ; } if ( globalText ! = null ) { builder . field ( <str> , globalText ) ; } for ( SuggestionBuilder < ? > suggestion : suggestions ) { builder = suggestion . toXContent ( builder , params ) ; } builder . endObject ( ) ; return builder ; } public static abstract class SuggestionBuilder < T > extends ToXContentToBytes { private String name ; private String suggester ; private String text ; private String prefix ; private String regex ; private String field ; private String analyzer ; private Integer size ; private Integer shardSize ; public SuggestionBuilder ( String name , String suggester ) { this . name = name ; this . suggester = suggester ; } @SuppressWarnings ( <str> ) public T text ( String text ) { this . text = text ; return ( T ) this ; } protected void setPrefix ( String prefix ) { this . prefix = prefix ; } protected void setRegex ( String regex ) { this . regex = regex ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( name ) ; if ( text ! = null ) { builder . field ( <str> , text ) ; } if ( prefix ! = null ) { builder . field ( <str> , prefix ) ; } if ( regex ! = null ) { builder . field ( <str> , regex ) ; } builder . startObject ( suggester ) ; if ( analyzer ! = null ) { builder . field ( <str> , analyzer ) ; } if ( field ! = null ) { builder . field ( <str> , field ) ; } if ( size ! = null ) { builder . field ( <str> , size ) ; } if ( shardSize ! = null ) { builder . field ( <str> , shardSize ) ; } builder = innerToXContent ( builder , params ) ; builder . endObject ( ) ; builder . endObject ( ) ; return builder ; } protected abstract XContentBuilder innerToXContent ( XContentBuilder builder , Params params ) throws IOException ; @SuppressWarnings ( <str> ) public T field ( String field ) { this . field = field ; return ( T ) this ; } @SuppressWarnings ( <str> ) public T analyzer ( String analyzer ) { this . analyzer = analyzer ; return ( T ) this ; } @SuppressWarnings ( <str> ) public T size ( int size ) { if ( size < = <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . size = size ; return ( T ) this ; } @SuppressWarnings ( <str> ) public T shardSize ( Integer shardSize ) { this . shardSize = shardSize ; return ( T ) this ; } } } 

package org . apache . cassandra . cql3 ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; public class VariableSpecifications { private final List < ColumnIdentifier > variableNames ; private final ColumnSpecification [ ] specs ; private final ColumnDefinition [ ] targetColumns ; public VariableSpecifications ( List < ColumnIdentifier > variableNames ) { this . variableNames = variableNames ; this . specs = new ColumnSpecification [ variableNames . size ( ) ] ; this . targetColumns = new ColumnDefinition [ variableNames . size ( ) ] ; } public static VariableSpecifications empty ( ) { return new VariableSpecifications ( Collections . < ColumnIdentifier > emptyList ( ) ) ; } public int size ( ) { return variableNames . size ( ) ; } public List < ColumnSpecification > getSpecifications ( ) { return Arrays . asList ( specs ) ; } public Short [ ] getPartitionKeyBindIndexes ( CFMetaData cfm ) { Short [ ] partitionKeyPositions = new Short [ cfm . partitionKeyColumns ( ) . size ( ) ] ; for ( int i = <int> ; i < targetColumns . length ; i + + ) { ColumnDefinition targetColumn = targetColumns [ i ] ; if ( targetColumn ! = null & & targetColumn . isPartitionKey ( ) ) { assert targetColumn . ksName . equals ( cfm . ksName ) & & targetColumn . cfName . equals ( cfm . cfName ) ; partitionKeyPositions [ targetColumn . position ( ) ] = ( short ) i ; } } for ( Short bindIndex : partitionKeyPositions ) { if ( bindIndex = = null ) return null ; } return partitionKeyPositions ; } public void add ( int bindIndex , ColumnSpecification spec ) { if ( spec instanceof ColumnDefinition ) targetColumns [ bindIndex ] = ( ColumnDefinition ) spec ; ColumnIdentifier bindMarkerName = variableNames . get ( bindIndex ) ; if ( bindMarkerName ! = null ) spec = new ColumnSpecification ( spec . ksName , spec . cfName , bindMarkerName , spec . type ) ; specs [ bindIndex ] = spec ; } @Override public String toString ( ) { return Arrays . toString ( specs ) ; } } 

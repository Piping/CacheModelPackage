package org . elasticsearch . monitor . os ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . SingleObjectCache ; import org . elasticsearch . common . util . concurrent . EsExecutors ; public class OsService extends AbstractComponent { private final OsProbe probe ; private final OsInfo info ; private SingleObjectCache < OsStats > osStatsCache ; public OsService ( Settings settings ) { super ( settings ) ; this . probe = OsProbe . getInstance ( ) ; TimeValue refreshInterval = settings . getAsTime ( <str> , TimeValue . timeValueSeconds ( <int> ) ) ; this . info = probe . osInfo ( ) ; this . info . refreshInterval = refreshInterval . millis ( ) ; this . info . allocatedProcessors = EsExecutors . boundedNumberOfProcessors ( settings ) ; osStatsCache = new OsStatsCache ( refreshInterval , probe . osStats ( ) ) ; logger . debug ( <str> , probe , refreshInterval ) ; } public OsInfo info ( ) { return this . info ; } public synchronized OsStats stats ( ) { return osStatsCache . getOrRefresh ( ) ; } private class OsStatsCache extends SingleObjectCache < OsStats > { public OsStatsCache ( TimeValue interval , OsStats initValue ) { super ( interval , initValue ) ; } @Override protected OsStats refresh ( ) { return probe . osStats ( ) ; } } } 

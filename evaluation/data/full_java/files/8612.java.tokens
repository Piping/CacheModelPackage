package org . elasticsearch . messy . tests ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . search . aggregations . Aggregator . SubAggCollectionMode ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . search . aggregations . metrics . cardinality . Cardinality ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Collection ; import java . util . Collections ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . cardinality ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . notNullValue ; @ESIntegTestCase.SuiteScopeTestCase public class CardinalityTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } @Override public Settings indexSettings ( ) { return Settings . builder ( ) . put ( <str> , numberOfShards ( ) ) . put ( <str> , numberOfReplicas ( ) ) . build ( ) ; } static long numDocs ; static long precisionThreshold ; @Override public void setupSuiteScopeCluster ( ) throws Exception { prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; numDocs = randomIntBetween ( <int> , <int> ) ; precisionThreshold = randomIntBetween ( <int> , <int> < < randomInt ( <int> ) ) ; IndexRequestBuilder [ ] builders = new IndexRequestBuilder [ ( int ) numDocs ] ; for ( int i = <int> ; i < numDocs ; + + i ) { builders [ i ] = client ( ) . prepareIndex ( <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> + i ) . field ( <str> , new String [ ] { <str> + ( i * <int> ) , <str> + ( i * <int> + <int> ) } ) . field ( <str> , i ) . field ( <str> , new int [ ] { i * <int> , i * <int> + <int> } ) . field ( <str> , i ) . field ( <str> , new double [ ] { i * <int> , i * <int> + <int> } ) . endObject ( ) ) ; } indexRandom ( true , builders ) ; createIndex ( <str> ) ; IndexRequestBuilder [ ] dummyDocsBuilder = new IndexRequestBuilder [ <int> ] ; for ( int i = <int> ; i < dummyDocsBuilder . length ; i + + ) { dummyDocsBuilder [ i ] = client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) ; } indexRandom ( true , dummyDocsBuilder ) ; ensureSearchable ( ) ; } private void assertCount ( Cardinality count , long value ) { if ( value < = precisionThreshold ) { assertEquals ( value , count . getValue ( ) ) ; } else { assertThat ( count . getValue ( ) , greaterThan ( <int> L ) ) ; } } private String singleNumericField ( ) { return randomBoolean ( ) ? <str> : <str> ; } private String multiNumericField ( boolean hash ) { return randomBoolean ( ) ? <str> : <str> ; } public void testUnmapped ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , <int> ) ; } public void testPartiallyUnmapped ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> , <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs ) ; } public void testSingleValuedString ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs ) ; } public void testSingleValuedNumeric ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( singleNumericField ( ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs ) ; } public void testSingleValuedNumericGetProperty ( ) throws Exception { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( singleNumericField ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; Global global = searchResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( global , notNullValue ( ) ) ; assertThat ( global . getName ( ) , equalTo ( <str> ) ) ; assertThat ( global . getAggregations ( ) , notNullValue ( ) ) ; assertThat ( global . getAggregations ( ) . asMap ( ) . size ( ) , equalTo ( <int> ) ) ; Cardinality cardinality = global . getAggregations ( ) . get ( <str> ) ; assertThat ( cardinality , notNullValue ( ) ) ; assertThat ( cardinality . getName ( ) , equalTo ( <str> ) ) ; long expectedValue = numDocs ; assertCount ( cardinality , expectedValue ) ; assertThat ( ( Cardinality ) global . getProperty ( <str> ) , equalTo ( cardinality ) ) ; assertThat ( ( double ) global . getProperty ( <str> ) , equalTo ( ( double ) cardinality . getValue ( ) ) ) ; assertThat ( ( double ) cardinality . getProperty ( <str> ) , equalTo ( ( double ) cardinality . getValue ( ) ) ) ; } public void testSingleValuedNumericHashed ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( singleNumericField ( ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs ) ; } public void testMultiValuedString ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs * <int> ) ; } public void testMultiValuedNumeric ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( multiNumericField ( false ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs * <int> ) ; } public void testMultiValuedNumericHashed ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( multiNumericField ( true ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs * <int> ) ; } public void testSingleValuedStringScript ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs ) ; } public void testMultiValuedStringScript ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs * <int> ) ; } public void testSingleValuedNumericScript ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . script ( new Script ( <str> + singleNumericField ( ) + <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs ) ; } public void testMultiValuedNumericScript ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . script ( new Script ( <str> + multiNumericField ( false ) + <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs * <int> ) ; } public void testSingleValuedStringValueScript ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( <str> ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs ) ; } public void testMultiValuedStringValueScript ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( <str> ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs * <int> ) ; } public void testSingleValuedNumericValueScript ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( singleNumericField ( ) ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs ) ; } public void testMultiValuedNumericValueScript ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( multiNumericField ( false ) ) . script ( new Script ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Cardinality count = response . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , numDocs * <int> ) ; } public void testAsSubAgg ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( cardinality ( <str> ) . precisionThreshold ( precisionThreshold ) . field ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; for ( Terms . Bucket bucket : terms . getBuckets ( ) ) { Cardinality count = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( count , notNullValue ( ) ) ; assertThat ( count . getName ( ) , equalTo ( <str> ) ) ; assertCount ( count , <int> ) ; } } } 

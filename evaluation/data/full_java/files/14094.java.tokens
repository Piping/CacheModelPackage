package org . gradle . internal . serialize ; import java . io . Closeable ; import java . io . DataOutputStream ; import java . io . IOException ; import java . io . OutputStream ; public class OutputStreamBackedEncoder extends AbstractEncoder implements Closeable , FlushableEncoder { private final DataOutputStream outputStream ; public OutputStreamBackedEncoder ( OutputStream outputStream ) { this . outputStream = new DataOutputStream ( outputStream ) ; } public void writeLong ( long value ) throws IOException { outputStream . writeLong ( value ) ; } public void writeInt ( int value ) throws IOException { outputStream . writeInt ( value ) ; } public void writeBoolean ( boolean value ) throws IOException { outputStream . writeBoolean ( value ) ; } public void writeString ( CharSequence value ) throws IOException { if ( value = = null ) { throw new IllegalArgumentException ( <str> ) ; } outputStream . writeUTF ( value . toString ( ) ) ; } public void writeByte ( byte value ) throws IOException { outputStream . writeByte ( value ) ; } public void writeBytes ( byte [ ] bytes , int offset , int count ) throws IOException { outputStream . write ( bytes , offset , count ) ; } public void flush ( ) throws IOException { outputStream . flush ( ) ; } public void close ( ) throws IOException { outputStream . close ( ) ; } } 

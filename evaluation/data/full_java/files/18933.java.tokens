package io . netty . handler . codec . protobuf ; import com . google . protobuf . ExtensionRegistry ; import com . google . protobuf . ExtensionRegistryLite ; import com . google . protobuf . Message ; import com . google . protobuf . MessageLite ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelHandler . Sharable ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelPipeline ; import io . netty . handler . codec . ByteToMessageDecoder ; import io . netty . handler . codec . LengthFieldBasedFrameDecoder ; import io . netty . handler . codec . LengthFieldPrepender ; import io . netty . handler . codec . MessageToMessageDecoder ; import java . util . List ; @Sharable public class ProtobufDecoder extends MessageToMessageDecoder < ByteBuf > { private static final boolean HAS_PARSER ; static { boolean hasParser = false ; try { MessageLite . class . getDeclaredMethod ( <str> ) ; hasParser = true ; } catch ( Throwable t ) { } HAS_PARSER = hasParser ; } private final MessageLite prototype ; private final ExtensionRegistryLite extensionRegistry ; public ProtobufDecoder ( MessageLite prototype ) { this ( prototype , null ) ; } public ProtobufDecoder ( MessageLite prototype , ExtensionRegistry extensionRegistry ) { this ( prototype , ( ExtensionRegistryLite ) extensionRegistry ) ; } public ProtobufDecoder ( MessageLite prototype , ExtensionRegistryLite extensionRegistry ) { if ( prototype = = null ) { throw new NullPointerException ( <str> ) ; } this . prototype = prototype . getDefaultInstanceForType ( ) ; this . extensionRegistry = extensionRegistry ; } @Override protected void decode ( ChannelHandlerContext ctx , ByteBuf msg , List < Object > out ) throws Exception { final byte [ ] array ; final int offset ; final int length = msg . readableBytes ( ) ; if ( msg . hasArray ( ) ) { array = msg . array ( ) ; offset = msg . arrayOffset ( ) + msg . readerIndex ( ) ; } else { array = new byte [ length ] ; msg . getBytes ( msg . readerIndex ( ) , array , <int> , length ) ; offset = <int> ; } if ( extensionRegistry = = null ) { if ( HAS_PARSER ) { out . add ( prototype . getParserForType ( ) . parseFrom ( array , offset , length ) ) ; } else { out . add ( prototype . newBuilderForType ( ) . mergeFrom ( array , offset , length ) . build ( ) ) ; } } else { if ( HAS_PARSER ) { out . add ( prototype . getParserForType ( ) . parseFrom ( array , offset , length , extensionRegistry ) ) ; } else { out . add ( prototype . newBuilderForType ( ) . mergeFrom ( array , offset , length , extensionRegistry ) . build ( ) ) ; } } } } 

package org . gradle . initialization ; import org . gradle . StartParameter ; import org . gradle . api . initialization . ProjectDescriptor ; import org . gradle . api . internal . GradleInternal ; import org . gradle . api . internal . SettingsInternal ; import org . gradle . api . internal . initialization . ClassLoaderScope ; import org . gradle . initialization . buildsrc . BuildSourceBuilder ; import java . io . File ; public class SettingsHandler implements SettingsLoader { private ISettingsFinder settingsFinder ; private SettingsProcessor settingsProcessor ; private BuildSourceBuilder buildSourceBuilder ; public SettingsHandler ( ISettingsFinder settingsFinder , SettingsProcessor settingsProcessor , BuildSourceBuilder buildSourceBuilder ) { this . settingsFinder = settingsFinder ; this . settingsProcessor = settingsProcessor ; this . buildSourceBuilder = buildSourceBuilder ; } @Override public SettingsInternal findAndLoadSettings ( GradleInternal gradle ) { StartParameter startParameter = gradle . getStartParameter ( ) ; SettingsInternal settings = findSettingsAndLoadIfAppropriate ( gradle , startParameter ) ; ProjectSpec spec = ProjectSpecs . forStartParameter ( startParameter , settings ) ; if ( spec . containsProject ( settings . getProjectRegistry ( ) ) ) { setDefaultProject ( spec , settings ) ; return settings ; } StartParameter noSearchParameter = startParameter . newInstance ( ) ; noSearchParameter . useEmptySettings ( ) ; settings = findSettingsAndLoadIfAppropriate ( gradle , noSearchParameter ) ; if ( noSearchParameter . getBuildFile ( ) ! = null ) { ProjectDescriptor rootProject = settings . getRootProject ( ) ; rootProject . setBuildFileName ( noSearchParameter . getBuildFile ( ) . getName ( ) ) ; } setDefaultProject ( spec , settings ) ; return settings ; } private void setDefaultProject ( ProjectSpec spec , SettingsInternal settings ) { settings . setDefaultProject ( spec . selectProject ( settings . getProjectRegistry ( ) ) ) ; } private SettingsInternal findSettingsAndLoadIfAppropriate ( GradleInternal gradle , StartParameter startParameter ) { SettingsLocation settingsLocation = findSettings ( startParameter ) ; StartParameter buildSrcStartParameter = startParameter . newBuild ( ) ; buildSrcStartParameter . setCurrentDir ( new File ( settingsLocation . getSettingsDir ( ) , BaseSettings . DEFAULT_BUILD_SRC_DIR ) ) ; ClassLoaderScope buildSourceClassLoader = buildSourceBuilder . buildAndCreateClassLoader ( buildSrcStartParameter ) ; return settingsProcessor . process ( gradle , settingsLocation , buildSourceClassLoader , startParameter ) ; } private SettingsLocation findSettings ( StartParameter startParameter ) { return settingsFinder . find ( startParameter ) ; } } 

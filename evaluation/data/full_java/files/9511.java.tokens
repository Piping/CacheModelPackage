package com . google . common . util . concurrent ; import com . google . common . annotations . Beta ; import com . google . common . base . Supplier ; import java . util . concurrent . Executor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; import java . util . logging . Level ; import java . util . logging . Logger ; @Beta public abstract class AbstractExecutionThreadService implements Service { private static final Logger logger = Logger . getLogger ( AbstractExecutionThreadService . class . getName ( ) ) ; private final Service delegate = new AbstractService ( ) { @Override protected final void doStart ( ) { Executor executor = MoreExecutors . renamingDecorator ( executor ( ) , new Supplier < String > ( ) { @Override public String get ( ) { return serviceName ( ) ; } } ) ; executor . execute ( new Runnable ( ) { @Override public void run ( ) { try { startUp ( ) ; notifyStarted ( ) ; if ( isRunning ( ) ) { try { AbstractExecutionThreadService . this . run ( ) ; } catch ( Throwable t ) { try { shutDown ( ) ; } catch ( Exception ignored ) { logger . log ( Level . WARNING , <str> + <str> , ignored ) ; } notifyFailed ( t ) ; return ; } } shutDown ( ) ; notifyStopped ( ) ; } catch ( Throwable t ) { notifyFailed ( t ) ; } } } ) ; } @Override protected void doStop ( ) { triggerShutdown ( ) ; } @Override public String toString ( ) { return AbstractExecutionThreadService . this . toString ( ) ; } } ; protected AbstractExecutionThreadService ( ) { } protected void startUp ( ) throws Exception { } protected abstract void run ( ) throws Exception ; protected void shutDown ( ) throws Exception { } protected void triggerShutdown ( ) { } protected Executor executor ( ) { return new Executor ( ) { @Override public void execute ( Runnable command ) { MoreExecutors . newThread ( serviceName ( ) , command ) . start ( ) ; } } ; } @Override public String toString ( ) { return serviceName ( ) + <str> + state ( ) + <str> ; } @Override public final boolean isRunning ( ) { return delegate . isRunning ( ) ; } @Override public final State state ( ) { return delegate . state ( ) ; } @Override public final void addListener ( Listener listener , Executor executor ) { delegate . addListener ( listener , executor ) ; } @Override public final Throwable failureCause ( ) { return delegate . failureCause ( ) ; } @Override public final Service startAsync ( ) { delegate . startAsync ( ) ; return this ; } @Override public final Service stopAsync ( ) { delegate . stopAsync ( ) ; return this ; } @Override public final void awaitRunning ( ) { delegate . awaitRunning ( ) ; } @Override public final void awaitRunning ( long timeout , TimeUnit unit ) throws TimeoutException { delegate . awaitRunning ( timeout , unit ) ; } @Override public final void awaitTerminated ( ) { delegate . awaitTerminated ( ) ; } @Override public final void awaitTerminated ( long timeout , TimeUnit unit ) throws TimeoutException { delegate . awaitTerminated ( timeout , unit ) ; } protected String serviceName ( ) { return getClass ( ) . getSimpleName ( ) ; } } 

package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . MapInterfaceTest ; import java . util . Collection ; import java . util . Collections ; import java . util . Map ; @GwtCompatible public class SubMapMultimapAsMapImplementsMapTest extends AbstractMultimapAsMapImplementsMapTest { public SubMapMultimapAsMapImplementsMapTest ( ) { super ( true , true , true ) ; } private TreeMultimap < String , Integer > createMultimap ( ) { TreeMultimap < String , Integer > multimap = TreeMultimap . create ( Ordering . < String > natural ( ) . nullsFirst ( ) , Ordering . < Integer > natural ( ) . nullsFirst ( ) ) ; multimap . put ( <str> , - <int> ) ; multimap . put ( <str> , - <int> ) ; multimap . put ( <str> , - <int> ) ; return multimap ; } @Override protected Map < String , Collection < Integer > > makeEmptyMap ( ) { return createMultimap ( ) . asMap ( ) . subMap ( <str> , <str> ) ; } @Override protected Map < String , Collection < Integer > > makePopulatedMap ( ) { TreeMultimap < String , Integer > multimap = createMultimap ( ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; multimap . put ( <str> , <int> ) ; return multimap . asMap ( ) . subMap ( <str> , <str> ) ; } @Override protected String getKeyNotInPopulatedMap ( ) { return <str> ; } @Override protected Collection < Integer > getValueNotInPopulatedMap ( ) { return Collections . singleton ( - <int> ) ; } @Override public void testEntrySetRemoveAllNullFromEmpty ( ) { try { super . testEntrySetRemoveAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testEntrySetRetainAllNullFromEmpty ( ) { try { super . testEntrySetRetainAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testKeySetRemoveAllNullFromEmpty ( ) { try { super . testKeySetRemoveAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testKeySetRetainAllNullFromEmpty ( ) { try { super . testKeySetRetainAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testValuesRemoveAllNullFromEmpty ( ) { try { super . testValuesRemoveAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testValuesRetainAllNullFromEmpty ( ) { try { super . testValuesRemoveAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } } 

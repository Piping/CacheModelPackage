package org . elasticsearch . search . rescore ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . search . SearchParseElement ; import org . elasticsearch . search . internal . SearchContext ; public class RescoreParseElement implements SearchParseElement { @Override public void parse ( XContentParser parser , SearchContext context ) throws Exception { if ( parser . currentToken ( ) = = XContentParser . Token . START_ARRAY ) { while ( parser . nextToken ( ) ! = XContentParser . Token . END_ARRAY ) { parseSingleRescoreContext ( parser , context ) ; } } else { parseSingleRescoreContext ( parser , context ) ; } } public void parseSingleRescoreContext ( XContentParser parser , SearchContext context ) throws Exception { String fieldName = null ; RescoreSearchContext rescoreContext = null ; Integer windowSize = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { fieldName = parser . currentName ( ) ; if ( QueryRescorer . NAME . equals ( fieldName ) ) { Rescorer rescorer = QueryRescorer . INSTANCE ; token = parser . nextToken ( ) ; if ( token ! = XContentParser . Token . START_OBJECT ) { throw new ElasticsearchParseException ( <str> ) ; } rescoreContext = rescorer . parse ( parser , context ) ; } } else if ( token . isValue ( ) ) { if ( <str> . equals ( fieldName ) ) { windowSize = parser . intValue ( ) ; } else { throw new IllegalArgumentException ( <str> + fieldName + <str> ) ; } } } if ( rescoreContext = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( windowSize ! = null ) { rescoreContext . setWindowSize ( windowSize . intValue ( ) ) ; } context . addRescore ( rescoreContext ) ; } } 

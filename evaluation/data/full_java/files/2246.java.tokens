package org . nd4j . linalg . io ; import java . util . Collection ; import java . util . Map ; import java . util . Collection ; import java . util . Map ; public abstract class Assert { public Assert ( ) { } public static void isTrue ( boolean expression , String message ) { if ( ! expression ) { throw new IllegalArgumentException ( message ) ; } } public static void isTrue ( boolean expression ) { isTrue ( expression , <str> ) ; } public static void isNull ( Object object , String message ) { if ( object ! = null ) { throw new IllegalArgumentException ( message ) ; } } public static void isNull ( Object object ) { isNull ( object , <str> ) ; } public static void notNull ( Object object , String message ) { if ( object = = null ) { throw new IllegalArgumentException ( message ) ; } } public static void notNull ( Object object ) { notNull ( object , <str> ) ; } public static void hasLength ( String text , String message ) { if ( ! StringUtils . hasLength ( text ) ) { throw new IllegalArgumentException ( message ) ; } } public static void hasLength ( String text ) { hasLength ( text , <str> ) ; } public static void hasText ( String text , String message ) { if ( ! StringUtils . hasText ( text ) ) { throw new IllegalArgumentException ( message ) ; } } public static void hasText ( String text ) { hasText ( text , <str> ) ; } public static void doesNotContain ( String textToSearch , String substring , String message ) { if ( StringUtils . hasLength ( textToSearch ) & & StringUtils . hasLength ( substring ) & & textToSearch . contains ( substring ) ) { throw new IllegalArgumentException ( message ) ; } } public static void doesNotContain ( String textToSearch , String substring ) { doesNotContain ( textToSearch , substring , <str> + substring + <str> ) ; } public static void notEmpty ( Object [ ] array , String message ) { if ( ObjectUtils . isEmpty ( array ) ) { throw new IllegalArgumentException ( message ) ; } } public static void notEmpty ( Object [ ] array ) { notEmpty ( ( Object [ ] ) array , <str> ) ; } public static void noNullElements ( Object [ ] array , String message ) { if ( array ! = null ) { Object [ ] arr$ = array ; int len$ = array . length ; for ( int i$ = <int> ; i$ < len$ ; + + i$ ) { Object element = arr$ [ i$ ] ; if ( element = = null ) { throw new IllegalArgumentException ( message ) ; } } } } public static void noNullElements ( Object [ ] array ) { noNullElements ( array , <str> ) ; } public static void notEmpty ( Collection collection , String message ) { if ( CollectionUtils . isEmpty ( collection ) ) { throw new IllegalArgumentException ( message ) ; } } public static void notEmpty ( Collection collection ) { notEmpty ( ( Collection ) collection , <str> ) ; } public static void notEmpty ( Map map , String message ) { if ( CollectionUtils . isEmpty ( map ) ) { throw new IllegalArgumentException ( message ) ; } } public static void notEmpty ( Map map ) { notEmpty ( ( Map ) map , <str> ) ; } public static void isInstanceOf ( Class < ? > clazz , Object obj ) { isInstanceOf ( clazz , obj , <str> ) ; } public static void isInstanceOf ( Class < ? > type , Object obj , String message ) { notNull ( type , <str> ) ; if ( ! type . isInstance ( obj ) ) { throw new IllegalArgumentException ( ( StringUtils . hasLength ( message ) ? message + <str> : <str> ) + <str> + ( obj ! = null ? obj . getClass ( ) . getName ( ) : <str> ) + <str> + type ) ; } } public static void isAssignable ( Class < ? > superType , Class < ? > subType ) { isAssignable ( superType , subType , <str> ) ; } public static void isAssignable ( Class < ? > superType , Class < ? > subType , String message ) { notNull ( superType , <str> ) ; if ( subType = = null | | ! superType . isAssignableFrom ( subType ) ) { throw new IllegalArgumentException ( message + subType + <str> + superType ) ; } } public static void state ( boolean expression , String message ) { if ( ! expression ) { throw new IllegalStateException ( message ) ; } } public static void state ( boolean expression ) { state ( expression , <str> ) ; } } 

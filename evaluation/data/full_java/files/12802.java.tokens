package org . gradle . internal . component . external . model ; import org . apache . ivy . core . module . descriptor . Artifact ; import org . apache . ivy . core . module . descriptor . DefaultModuleDescriptor ; import org . apache . ivy . core . module . descriptor . MDArtifact ; import org . gradle . internal . component . model . DefaultIvyArtifactName ; import org . gradle . internal . component . model . IvyArtifactName ; import java . util . Set ; import static com . google . common . collect . Sets . newLinkedHashSet ; import static java . util . Arrays . asList ; public class BuildableIvyModuleResolveMetaData extends DefaultIvyModuleResolveMetaData { private final DefaultModuleDescriptor module ; public BuildableIvyModuleResolveMetaData ( DefaultModuleDescriptor module ) { super ( module ) ; this . module = module ; } public void addArtifact ( IvyArtifactName newArtifact , Set < String > configurations ) { if ( configurations . isEmpty ( ) ) { throw new IllegalArgumentException ( <str> ) ; } MDArtifact unattached = new MDArtifact ( module , newArtifact . getName ( ) , newArtifact . getType ( ) , newArtifact . getExtension ( ) , null , newArtifact . getAttributes ( ) ) ; Artifact [ ] allArtifacts = module . getAllArtifacts ( ) ; for ( Artifact existing : allArtifacts ) { if ( artifactsEqual ( unattached , existing ) ) { if ( ! ( existing instanceof MDArtifact ) ) { throw new IllegalArgumentException ( <str> + existing + <str> + module + <str> + <str> + module ) ; } attachArtifact ( ( MDArtifact ) existing , configurations , module ) ; return ; } } attachArtifact ( unattached , configurations , module ) ; } private boolean artifactsEqual ( Artifact a , Artifact b ) { return DefaultIvyArtifactName . forIvyArtifact ( a ) . equals ( DefaultIvyArtifactName . forIvyArtifact ( b ) ) ; } private static void attachArtifact ( MDArtifact artifact , Set < String > configurations , DefaultModuleDescriptor target ) { Set < String > existingConfigurations = newLinkedHashSet ( asList ( artifact . getConfigurations ( ) ) ) ; for ( String c : configurations ) { if ( ! existingConfigurations . contains ( c ) ) { artifact . addConfiguration ( c ) ; target . addArtifact ( c , artifact ) ; } } } } 

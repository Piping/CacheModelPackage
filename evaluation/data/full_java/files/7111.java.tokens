package org . elasticsearch . search ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentLocation ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; public class SearchParseException extends SearchContextException { public static final int UNKNOWN_POSITION = - <int> ; private final int lineNumber ; private final int columnNumber ; public SearchParseException ( SearchContext context , String msg , @Nullable XContentLocation location ) { this ( context , msg , location , null ) ; } public SearchParseException ( SearchContext context , String msg , @Nullable XContentLocation location , Throwable cause ) { super ( context , msg , cause ) ; int lineNumber = UNKNOWN_POSITION ; int columnNumber = UNKNOWN_POSITION ; if ( location ! = null ) { if ( location ! = null ) { lineNumber = location . lineNumber ; columnNumber = location . columnNumber ; } } this . columnNumber = columnNumber ; this . lineNumber = lineNumber ; } public SearchParseException ( StreamInput in ) throws IOException { super ( in ) ; lineNumber = in . readInt ( ) ; columnNumber = in . readInt ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeInt ( lineNumber ) ; out . writeInt ( columnNumber ) ; } @Override public RestStatus status ( ) { return RestStatus . BAD_REQUEST ; } @Override protected void innerToXContent ( XContentBuilder builder , Params params ) throws IOException { if ( lineNumber ! = UNKNOWN_POSITION ) { builder . field ( <str> , lineNumber ) ; builder . field ( <str> , columnNumber ) ; } super . innerToXContent ( builder , params ) ; } public int getLineNumber ( ) { return lineNumber ; } public int getColumnNumber ( ) { return columnNumber ; } } 

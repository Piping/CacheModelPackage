package org . elasticsearch . indices . flush ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . util . iterable . Iterables ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; import java . util . List ; import java . util . Map ; import static java . util . Collections . unmodifiableMap ; public class IndicesSyncedFlushResult implements ToXContent { final Map < String , List < ShardsSyncedFlushResult > > shardsResultPerIndex ; final ShardCounts shardCounts ; public IndicesSyncedFlushResult ( Map < String , List < ShardsSyncedFlushResult > > shardsResultPerIndex ) { this . shardsResultPerIndex = unmodifiableMap ( shardsResultPerIndex ) ; this . shardCounts = calculateShardCounts ( Iterables . flatten ( shardsResultPerIndex . values ( ) ) ) ; } public int totalShards ( ) { return shardCounts . total ; } public int failedShards ( ) { return shardCounts . failed ; } public int successfulShards ( ) { return shardCounts . successful ; } public RestStatus restStatus ( ) { return failedShards ( ) = = <int> ? RestStatus . OK : RestStatus . CONFLICT ; } public Map < String , List < ShardsSyncedFlushResult > > getShardsResultPerIndex ( ) { return shardsResultPerIndex ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . _SHARDS ) ; shardCounts . toXContent ( builder , params ) ; builder . endObject ( ) ; for ( Map . Entry < String , List < ShardsSyncedFlushResult > > indexEntry : shardsResultPerIndex . entrySet ( ) ) { List < ShardsSyncedFlushResult > indexResult = indexEntry . getValue ( ) ; builder . startObject ( indexEntry . getKey ( ) ) ; ShardCounts indexShardCounts = calculateShardCounts ( indexResult ) ; indexShardCounts . toXContent ( builder , params ) ; if ( indexShardCounts . failed > <int> ) { builder . startArray ( Fields . FAILURES ) ; for ( ShardsSyncedFlushResult shardResults : indexResult ) { if ( shardResults . failed ( ) ) { builder . startObject ( ) ; builder . field ( Fields . SHARD , shardResults . shardId ( ) . id ( ) ) ; builder . field ( Fields . REASON , shardResults . failureReason ( ) ) ; builder . endObject ( ) ; continue ; } Map < ShardRouting , SyncedFlushService . SyncedFlushResponse > failedShards = shardResults . failedShards ( ) ; for ( Map . Entry < ShardRouting , SyncedFlushService . SyncedFlushResponse > shardEntry : failedShards . entrySet ( ) ) { builder . startObject ( ) ; builder . field ( Fields . SHARD , shardResults . shardId ( ) . id ( ) ) ; builder . field ( Fields . REASON , shardEntry . getValue ( ) . failureReason ( ) ) ; builder . field ( Fields . ROUTING , shardEntry . getKey ( ) ) ; builder . endObject ( ) ; } } builder . endArray ( ) ; } builder . endObject ( ) ; } return builder ; } static ShardCounts calculateShardCounts ( Iterable < ShardsSyncedFlushResult > results ) { int total = <int> , successful = <int> , failed = <int> ; for ( ShardsSyncedFlushResult result : results ) { total + = result . totalShards ( ) ; successful + = result . successfulShards ( ) ; if ( result . failed ( ) ) { failed + = result . totalShards ( ) ; } else { failed + = result . failedShards ( ) . size ( ) ; } } return new ShardCounts ( total , successful , failed ) ; } static final class ShardCounts implements ToXContent { public final int total ; public final int successful ; public final int failed ; ShardCounts ( int total , int successful , int failed ) { this . total = total ; this . successful = successful ; this . failed = failed ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . field ( Fields . TOTAL , total ) ; builder . field ( Fields . SUCCESSFUL , successful ) ; builder . field ( Fields . FAILED , failed ) ; return builder ; } } static final class Fields { static final XContentBuilderString _SHARDS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SUCCESSFUL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString FAILED = new XContentBuilderString ( <str> ) ; static final XContentBuilderString FAILURES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SHARD = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ROUTING = new XContentBuilderString ( <str> ) ; static final XContentBuilderString REASON = new XContentBuilderString ( <str> ) ; } } 

package org . nd4j . linalg . shape . concat . padding ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import static org . junit . Assert . assertArrayEquals ; public class PaddingTests extends BaseNd4jTest { public PaddingTests ( ) { } public PaddingTests ( String name ) { super ( name ) ; } public PaddingTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public PaddingTests ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testAppend ( ) { INDArray appendTo = Nd4j . ones ( <int> , <int> ) ; INDArray ret = Nd4j . append ( appendTo , <int> , <int> , - <int> ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , ret . shape ( ) ) ; INDArray linspace = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray otherAppend = Nd4j . append ( linspace , <int> , <float> , - <int> ) ; INDArray assertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> , <int> , <int> , <int> } , { <int> , <int> , <int> , <int> , <int> } } ) ; assertEquals ( assertion , otherAppend ) ; } @Test public void testPrepend ( ) { INDArray appendTo = Nd4j . ones ( <int> , <int> ) ; INDArray ret = Nd4j . append ( appendTo , <int> , <int> , - <int> ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , ret . shape ( ) ) ; INDArray linspace = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray assertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> , <int> , <int> , <int> } , { <int> , <int> , <int> , <int> , <int> } } ) ; INDArray prepend = Nd4j . prepend ( linspace , <int> , <float> , - <int> ) ; assertEquals ( assertion , prepend ) ; } @Test public void testPad ( ) { INDArray start = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray ret = Nd4j . pad ( start , new int [ ] { <int> , <int> } , Nd4j . PadMode . CONSTANT ) ; double [ ] [ ] data = new double [ ] [ ] { { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } , { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> } } ; INDArray assertion = Nd4j . create ( data ) ; assertEquals ( assertion , ret ) ; } @Override public char ordering ( ) { return <str> ; } } 

package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . Collection ; import java . util . HashMap ; import java . util . Map ; @GwtCompatible public class MapEqualsTester < K , V > extends AbstractMapTester < K , V > { public void testEquals_otherMapWithSameEntries ( ) { assertTrue ( <str> , getMap ( ) . equals ( newHashMap ( getSampleEntries ( ) ) ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_otherMapWithDifferentEntries ( ) { Map < K , V > other = newHashMap ( getSampleEntries ( getNumEntries ( ) - <int> ) ) ; other . put ( k3 ( ) , v3 ( ) ) ; assertFalse ( <str> , getMap ( ) . equals ( other ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) @MapFeature.Require ( ALLOWS_NULL_KEYS ) public void testEquals_containingNullKey ( ) { Collection < Map . Entry < K , V > > entries = getSampleEntries ( getNumEntries ( ) - <int> ) ; entries . add ( entry ( null , v3 ( ) ) ) ; resetContainer ( getSubjectGenerator ( ) . create ( entries . toArray ( ) ) ) ; assertTrue ( <str> + <str> , getMap ( ) . equals ( newHashMap ( entries ) ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_otherContainsNullKey ( ) { Collection < Map . Entry < K , V > > entries = getSampleEntries ( getNumEntries ( ) - <int> ) ; entries . add ( entry ( null , v3 ( ) ) ) ; Map < K , V > other = newHashMap ( entries ) ; assertFalse ( <str> + <str> , getMap ( ) . equals ( other ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) @MapFeature.Require ( ALLOWS_NULL_VALUES ) public void testEquals_containingNullValue ( ) { Collection < Map . Entry < K , V > > entries = getSampleEntries ( getNumEntries ( ) - <int> ) ; entries . add ( entry ( k3 ( ) , null ) ) ; resetContainer ( getSubjectGenerator ( ) . create ( entries . toArray ( ) ) ) ; assertTrue ( <str> + <str> , getMap ( ) . equals ( newHashMap ( entries ) ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_otherContainsNullValue ( ) { Collection < Map . Entry < K , V > > entries = getSampleEntries ( getNumEntries ( ) - <int> ) ; entries . add ( entry ( k3 ( ) , null ) ) ; Map < K , V > other = newHashMap ( entries ) ; assertFalse ( <str> + <str> , getMap ( ) . equals ( other ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_smallerMap ( ) { Collection < Map . Entry < K , V > > fewerEntries = getSampleEntries ( getNumEntries ( ) - <int> ) ; assertFalse ( <str> , getMap ( ) . equals ( newHashMap ( fewerEntries ) ) ) ; } public void testEquals_largerMap ( ) { Collection < Map . Entry < K , V > > moreEntries = getSampleEntries ( getNumEntries ( ) + <int> ) ; assertFalse ( <str> , getMap ( ) . equals ( newHashMap ( moreEntries ) ) ) ; } public void testEquals_list ( ) { assertFalse ( <str> , getMap ( ) . equals ( Helpers . copyToList ( getMap ( ) . entrySet ( ) ) ) ) ; } private static < K , V > HashMap < K , V > newHashMap ( Collection < ? extends Map . Entry < ? extends K , ? extends V > > entries ) { HashMap < K , V > map = new HashMap < K , V > ( ) ; for ( Map . Entry < ? extends K , ? extends V > entry : entries ) { map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return map ; } } 

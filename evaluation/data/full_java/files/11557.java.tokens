package org . gradle . api . internal . file . copy ; import org . gradle . api . file . DuplicateFileCopyingException ; import org . gradle . api . file . DuplicatesStrategy ; import org . gradle . api . file . RelativePath ; import org . gradle . api . internal . file . CopyActionProcessingStreamAction ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . api . tasks . WorkResult ; import java . util . HashSet ; import java . util . Set ; public class DuplicateHandlingCopyActionDecorator implements CopyAction { private final static Logger LOGGER = Logging . getLogger ( DuplicateHandlingCopyActionDecorator . class ) ; private final CopyAction delegate ; public DuplicateHandlingCopyActionDecorator ( CopyAction delegate ) { this . delegate = delegate ; } public WorkResult execute ( final CopyActionProcessingStream stream ) { final Set < RelativePath > visitedFiles = new HashSet < RelativePath > ( ) ; return delegate . execute ( new CopyActionProcessingStream ( ) { public void process ( final CopyActionProcessingStreamAction action ) { stream . process ( new CopyActionProcessingStreamAction ( ) { public void processFile ( FileCopyDetailsInternal details ) { if ( ! details . isDirectory ( ) ) { DuplicatesStrategy strategy = details . getDuplicatesStrategy ( ) ; if ( ! visitedFiles . add ( details . getRelativePath ( ) ) ) { if ( strategy = = DuplicatesStrategy . EXCLUDE ) { return ; } else if ( strategy = = DuplicatesStrategy . FAIL ) { throw new DuplicateFileCopyingException ( String . format ( <str> , details . getRelativePath ( ) ) ) ; } else if ( strategy = = DuplicatesStrategy . WARN ) { LOGGER . warn ( <str> , details . getRelativePath ( ) ) ; } } } action . processFile ( details ) ; } } ) ; } } ) ; } } 

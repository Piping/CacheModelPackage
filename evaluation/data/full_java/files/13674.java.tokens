package org . gradle . language . nativeplatform . internal . incremental ; import org . gradle . api . Transformer ; import org . gradle . api . file . FileVisitDetails ; import org . gradle . api . file . FileVisitor ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . changedetection . changes . IncrementalTaskInputsInternal ; import org . gradle . api . internal . changedetection . state . FileSnapshotter ; import org . gradle . api . internal . changedetection . state . TaskArtifactStateCacheAccess ; import org . gradle . api . internal . file . collections . DirectoryFileTree ; import org . gradle . api . internal . tasks . SimpleWorkResult ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . WorkResult ; import org . gradle . cache . PersistentStateCache ; import org . gradle . internal . Factory ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . language . base . internal . tasks . SimpleStaleClassCleaner ; import org . gradle . language . nativeplatform . internal . SourceIncludes ; import org . gradle . language . nativeplatform . internal . incremental . sourceparser . CSourceParser ; import org . gradle . language . nativeplatform . internal . incremental . sourceparser . RegexBackedCSourceParser ; import org . gradle . nativeplatform . toolchain . Clang ; import org . gradle . nativeplatform . toolchain . Gcc ; import org . gradle . nativeplatform . toolchain . NativeToolChain ; import org . gradle . nativeplatform . toolchain . internal . NativeCompileSpec ; import org . gradle . util . CollectionUtils ; import java . io . File ; import java . util . Collection ; import java . util . Map ; public class IncrementalNativeCompiler < T extends NativeCompileSpec > implements Compiler < T > { private final Compiler < T > delegateCompiler ; private final boolean importsAreIncludes ; private final TaskInternal task ; private final TaskArtifactStateCacheAccess cacheAccess ; private final FileSnapshotter fileSnapshotter ; private final CompilationStateCacheFactory compilationStateCacheFactory ; private final Logger logger = Logging . getLogger ( IncrementalNativeCompiler . class ) ; private final CSourceParser sourceParser = new RegexBackedCSourceParser ( ) ; public IncrementalNativeCompiler ( TaskInternal task , TaskArtifactStateCacheAccess cacheAccess , FileSnapshotter fileSnapshotter , CompilationStateCacheFactory compilationStateCacheFactory , Compiler < T > delegateCompiler , NativeToolChain toolChain ) { this . task = task ; this . cacheAccess = cacheAccess ; this . fileSnapshotter = fileSnapshotter ; this . compilationStateCacheFactory = compilationStateCacheFactory ; this . delegateCompiler = delegateCompiler ; this . importsAreIncludes = Clang . class . isAssignableFrom ( toolChain . getClass ( ) ) | | Gcc . class . isAssignableFrom ( toolChain . getClass ( ) ) ; } public WorkResult execute ( final T spec ) { final PersistentStateCache < CompilationState > compileStateCache = compilationStateCacheFactory . create ( task . getPath ( ) ) ; final IncrementalCompilation compilation = cacheAccess . useCache ( <str> , new Factory < IncrementalCompilation > ( ) { public IncrementalCompilation create ( ) { DefaultSourceIncludesParser sourceIncludesParser = new DefaultSourceIncludesParser ( sourceParser , importsAreIncludes ) ; IncrementalCompileProcessor processor = createProcessor ( compileStateCache , sourceIncludesParser , spec . getIncludeRoots ( ) ) ; return processor . processSourceFiles ( spec . getSourceFiles ( ) ) ; } } ) ; spec . setSourceFileIncludes ( mapIncludes ( spec . getSourceFiles ( ) , compilation . getFinalState ( ) ) ) ; for ( File includeFile : compilation . getIncludeCandidates ( ) ) { ( ( IncrementalTaskInputsInternal ) spec . getIncrementalInputs ( ) ) . newInput ( includeFile ) ; } if ( sourceFilesUseMacroIncludes ( spec . getSourceFiles ( ) , compilation . getFinalState ( ) ) ) { logger . info ( <str> , task . getName ( ) ) ; for ( final File includeRoot : spec . getIncludeRoots ( ) ) { logger . info ( <str> , includeRoot , task . getName ( ) ) ; new DirectoryFileTree ( includeRoot ) . visit ( new FileVisitor ( ) { @Override public void visitDir ( FileVisitDetails dirDetails ) { } @Override public void visitFile ( FileVisitDetails fileDetails ) { ( ( IncrementalTaskInputsInternal ) spec . getIncrementalInputs ( ) ) . newInput ( fileDetails . getFile ( ) ) ; } } ) ; } } WorkResult workResult ; if ( spec . isIncrementalCompile ( ) ) { workResult = doIncrementalCompile ( compilation , spec ) ; } else { workResult = doCleanIncrementalCompile ( spec ) ; } cacheAccess . useCache ( <str> , new Factory < Void > ( ) { public Void create ( ) { compileStateCache . set ( compilation . getFinalState ( ) ) ; return null ; } } ) ; return workResult ; } private Map < File , SourceIncludes > mapIncludes ( Collection < File > files , final CompilationState compilationState ) { return CollectionUtils . collectMapValues ( files , new Transformer < SourceIncludes , File > ( ) { @Override public SourceIncludes transform ( File file ) { return compilationState . getState ( file ) . getSourceIncludes ( ) ; } } ) ; } private boolean sourceFilesUseMacroIncludes ( Collection < File > files , final CompilationState compilationState ) { return CollectionUtils . any ( files , new Spec < File > ( ) { @Override public boolean isSatisfiedBy ( File file ) { return CollectionUtils . any ( compilationState . getState ( file ) . getResolvedIncludes ( ) , new Spec < ResolvedInclude > ( ) { @Override public boolean isSatisfiedBy ( ResolvedInclude element ) { return element . isMaybeMacro ( ) ; } } ) ; } } ) ; } protected WorkResult doIncrementalCompile ( IncrementalCompilation compilation , T spec ) { spec . setSourceFiles ( compilation . getRecompile ( ) ) ; spec . setRemovedSourceFiles ( compilation . getRemoved ( ) ) ; return delegateCompiler . execute ( spec ) ; } protected WorkResult doCleanIncrementalCompile ( T spec ) { boolean deleted = cleanPreviousOutputs ( spec ) ; WorkResult compileResult = delegateCompiler . execute ( spec ) ; if ( deleted & & ! compileResult . getDidWork ( ) ) { return new SimpleWorkResult ( deleted ) ; } return compileResult ; } private boolean cleanPreviousOutputs ( NativeCompileSpec spec ) { SimpleStaleClassCleaner cleaner = new SimpleStaleClassCleaner ( getTask ( ) . getOutputs ( ) ) ; cleaner . setDestinationDir ( spec . getObjectFileDir ( ) ) ; cleaner . execute ( ) ; return cleaner . getDidWork ( ) ; } protected TaskInternal getTask ( ) { return task ; } private IncrementalCompileProcessor createProcessor ( PersistentStateCache < CompilationState > compileStateCache , SourceIncludesParser sourceIncludesParser , Iterable < File > includes ) { DefaultSourceIncludesResolver dependencyParser = new DefaultSourceIncludesResolver ( CollectionUtils . toList ( includes ) ) ; return new IncrementalCompileProcessor ( compileStateCache , dependencyParser , sourceIncludesParser , fileSnapshotter ) ; } } 

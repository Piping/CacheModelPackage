package com . google . common . base ; import com . google . common . annotations . GwtCompatible ; import javax . annotation . Nullable ; @GwtCompatible public final class Preconditions { private Preconditions ( ) { } public static void checkArgument ( boolean expression ) { if ( ! expression ) { throw new IllegalArgumentException ( ) ; } } public static void checkArgument ( boolean expression , @Nullable Object errorMessage ) { if ( ! expression ) { throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; } } public static void checkArgument ( boolean expression , @Nullable String errorMessageTemplate , @Nullable Object . . . errorMessageArgs ) { if ( ! expression ) { throw new IllegalArgumentException ( format ( errorMessageTemplate , errorMessageArgs ) ) ; } } public static void checkState ( boolean expression ) { if ( ! expression ) { throw new IllegalStateException ( ) ; } } public static void checkState ( boolean expression , @Nullable Object errorMessage ) { if ( ! expression ) { throw new IllegalStateException ( String . valueOf ( errorMessage ) ) ; } } public static void checkState ( boolean expression , @Nullable String errorMessageTemplate , @Nullable Object . . . errorMessageArgs ) { if ( ! expression ) { throw new IllegalStateException ( format ( errorMessageTemplate , errorMessageArgs ) ) ; } } public static < T > T checkNotNull ( T reference ) { if ( reference = = null ) { throw new NullPointerException ( ) ; } return reference ; } public static < T > T checkNotNull ( T reference , @Nullable Object errorMessage ) { if ( reference = = null ) { throw new NullPointerException ( String . valueOf ( errorMessage ) ) ; } return reference ; } public static < T > T checkNotNull ( T reference , @Nullable String errorMessageTemplate , @Nullable Object . . . errorMessageArgs ) { if ( reference = = null ) { throw new NullPointerException ( format ( errorMessageTemplate , errorMessageArgs ) ) ; } return reference ; } public static int checkElementIndex ( int index , int size ) { return checkElementIndex ( index , size , <str> ) ; } public static int checkElementIndex ( int index , int size , @Nullable String desc ) { if ( index < <int> | | index > = size ) { throw new IndexOutOfBoundsException ( badElementIndex ( index , size , desc ) ) ; } return index ; } private static String badElementIndex ( int index , int size , String desc ) { if ( index < <int> ) { return format ( <str> , desc , index ) ; } else if ( size < <int> ) { throw new IllegalArgumentException ( <str> + size ) ; } else { return format ( <str> , desc , index , size ) ; } } public static int checkPositionIndex ( int index , int size ) { return checkPositionIndex ( index , size , <str> ) ; } public static int checkPositionIndex ( int index , int size , @Nullable String desc ) { if ( index < <int> | | index > size ) { throw new IndexOutOfBoundsException ( badPositionIndex ( index , size , desc ) ) ; } return index ; } private static String badPositionIndex ( int index , int size , String desc ) { if ( index < <int> ) { return format ( <str> , desc , index ) ; } else if ( size < <int> ) { throw new IllegalArgumentException ( <str> + size ) ; } else { return format ( <str> , desc , index , size ) ; } } public static void checkPositionIndexes ( int start , int end , int size ) { if ( start < <int> | | end < start | | end > size ) { throw new IndexOutOfBoundsException ( badPositionIndexes ( start , end , size ) ) ; } } private static String badPositionIndexes ( int start , int end , int size ) { if ( start < <int> | | start > size ) { return badPositionIndex ( start , size , <str> ) ; } if ( end < <int> | | end > size ) { return badPositionIndex ( end , size , <str> ) ; } return format ( <str> , end , start ) ; } static String format ( String template , @Nullable Object . . . args ) { template = String . valueOf ( template ) ; StringBuilder builder = new StringBuilder ( template . length ( ) + <int> * args . length ) ; int templateStart = <int> ; int i = <int> ; while ( i < args . length ) { int placeholderStart = template . indexOf ( <str> , templateStart ) ; if ( placeholderStart = = - <int> ) { break ; } builder . append ( template . substring ( templateStart , placeholderStart ) ) ; builder . append ( args [ i + + ] ) ; templateStart = placeholderStart + <int> ; } builder . append ( template . substring ( templateStart ) ) ; if ( i < args . length ) { builder . append ( <str> ) ; builder . append ( args [ i + + ] ) ; while ( i < args . length ) { builder . append ( <str> ) ; builder . append ( args [ i + + ] ) ; } builder . append ( <str> ) ; } return builder . toString ( ) ; } } 

package io . netty . handler . ssl ; import javax . net . ssl . KeyManager ; import javax . net . ssl . KeyManagerFactory ; import javax . net . ssl . SSLContext ; import javax . net . ssl . SSLException ; import javax . net . ssl . SSLSessionContext ; import javax . net . ssl . TrustManager ; import javax . net . ssl . TrustManagerFactory ; import java . io . File ; import java . security . PrivateKey ; import java . security . cert . X509Certificate ; public final class JdkSslServerContext extends JdkSslContext { private final SSLContext ctx ; @Deprecated public JdkSslServerContext ( File certChainFile , File keyFile ) throws SSLException { this ( certChainFile , keyFile , null ) ; } @Deprecated public JdkSslServerContext ( File certChainFile , File keyFile , String keyPassword ) throws SSLException { this ( certChainFile , keyFile , keyPassword , null , IdentityCipherSuiteFilter . INSTANCE , JdkDefaultApplicationProtocolNegotiator . INSTANCE , <int> , <int> ) ; } @Deprecated public JdkSslServerContext ( File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , Iterable < String > nextProtocols , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( certChainFile , keyFile , keyPassword , ciphers , IdentityCipherSuiteFilter . INSTANCE , toNegotiator ( toApplicationProtocolConfig ( nextProtocols ) , true ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public JdkSslServerContext ( File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( certChainFile , keyFile , keyPassword , ciphers , cipherFilter , toNegotiator ( apn , true ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public JdkSslServerContext ( File certChainFile , File keyFile , String keyPassword , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , JdkApplicationProtocolNegotiator apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( null , null , certChainFile , keyFile , keyPassword , null , ciphers , cipherFilter , apn , sessionCacheSize , sessionTimeout ) ; } @Deprecated public JdkSslServerContext ( File trustCertChainFile , TrustManagerFactory trustManagerFactory , File keyCertChainFile , File keyFile , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { this ( trustCertChainFile , trustManagerFactory , keyCertChainFile , keyFile , keyPassword , keyManagerFactory , ciphers , cipherFilter , toNegotiator ( apn , true ) , sessionCacheSize , sessionTimeout ) ; } @Deprecated public JdkSslServerContext ( File trustCertChainFile , TrustManagerFactory trustManagerFactory , File keyCertChainFile , File keyFile , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , JdkApplicationProtocolNegotiator apn , long sessionCacheSize , long sessionTimeout ) throws SSLException { super ( ciphers , cipherFilter , apn , ClientAuth . NONE ) ; try { ctx = newSSLContext ( toX509Certificates ( trustCertChainFile ) , trustManagerFactory , toX509Certificates ( keyCertChainFile ) , toPrivateKey ( keyFile , keyPassword ) , keyPassword , keyManagerFactory , sessionCacheSize , sessionTimeout ) ; } catch ( Exception e ) { if ( e instanceof SSLException ) { throw ( SSLException ) e ; } throw new SSLException ( <str> , e ) ; } } JdkSslServerContext ( X509Certificate [ ] trustCertChain , TrustManagerFactory trustManagerFactory , X509Certificate [ ] keyCertChain , PrivateKey key , String keyPassword , KeyManagerFactory keyManagerFactory , Iterable < String > ciphers , CipherSuiteFilter cipherFilter , ApplicationProtocolConfig apn , long sessionCacheSize , long sessionTimeout , ClientAuth clientAuth ) throws SSLException { super ( ciphers , cipherFilter , toNegotiator ( apn , true ) , clientAuth ) ; ctx = newSSLContext ( trustCertChain , trustManagerFactory , keyCertChain , key , keyPassword , keyManagerFactory , sessionCacheSize , sessionTimeout ) ; } private static SSLContext newSSLContext ( X509Certificate [ ] trustCertChain , TrustManagerFactory trustManagerFactory , X509Certificate [ ] keyCertChain , PrivateKey key , String keyPassword , KeyManagerFactory keyManagerFactory , long sessionCacheSize , long sessionTimeout ) throws SSLException { if ( key = = null & & keyManagerFactory = = null ) { throw new NullPointerException ( <str> ) ; } try { if ( trustCertChain ! = null ) { trustManagerFactory = buildTrustManagerFactory ( trustCertChain , trustManagerFactory ) ; } if ( key ! = null ) { keyManagerFactory = buildKeyManagerFactory ( keyCertChain , key , keyPassword , keyManagerFactory ) ; } SSLContext ctx = SSLContext . getInstance ( PROTOCOL ) ; ctx . init ( keyManagerFactory . getKeyManagers ( ) , trustManagerFactory = = null ? null : trustManagerFactory . getTrustManagers ( ) , null ) ; SSLSessionContext sessCtx = ctx . getServerSessionContext ( ) ; if ( sessionCacheSize > <int> ) { sessCtx . setSessionCacheSize ( ( int ) Math . min ( sessionCacheSize , Integer . MAX_VALUE ) ) ; } if ( sessionTimeout > <int> ) { sessCtx . setSessionTimeout ( ( int ) Math . min ( sessionTimeout , Integer . MAX_VALUE ) ) ; } return ctx ; } catch ( Exception e ) { if ( e instanceof SSLException ) { throw ( SSLException ) e ; } throw new SSLException ( <str> , e ) ; } } @Override public boolean isClient ( ) { return false ; } @Override public SSLContext context ( ) { return ctx ; } } 

package org . elasticsearch . action . admin . indices . alias ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . admin . indices . alias . IndicesAliasesRequest . AliasActions ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . ack . ClusterStateUpdateResponse ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . AliasAction ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MetaDataIndexAliasesService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . action . admin . indices . alias . delete . AliasesNotFoundException ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; public class TransportIndicesAliasesAction extends TransportMasterNodeAction < IndicesAliasesRequest , IndicesAliasesResponse > { private final MetaDataIndexAliasesService indexAliasesService ; @Inject public TransportIndicesAliasesAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , MetaDataIndexAliasesService indexAliasesService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , IndicesAliasesAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , IndicesAliasesRequest : : new ) ; this . indexAliasesService = indexAliasesService ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected IndicesAliasesResponse newResponse ( ) { return new IndicesAliasesResponse ( ) ; } @Override protected ClusterBlockException checkBlock ( IndicesAliasesRequest request , ClusterState state ) { Set < String > indices = new HashSet < > ( ) ; for ( AliasActions aliasAction : request . aliasActions ( ) ) { for ( String index : aliasAction . indices ( ) ) { indices . add ( index ) ; } } return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_WRITE , indices . toArray ( new String [ indices . size ( ) ] ) ) ; } @Override protected void masterOperation ( final IndicesAliasesRequest request , final ClusterState state , final ActionListener < IndicesAliasesResponse > listener ) { List < AliasActions > actions = request . aliasActions ( ) ; List < AliasAction > finalActions = new ArrayList < > ( ) ; boolean hasOnlyDeletesButNoneCanBeDone = true ; Set < String > aliases = new HashSet < > ( ) ; for ( AliasActions action : actions ) { String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( state , request . indicesOptions ( ) , action . indices ( ) ) ; Collections . addAll ( aliases , action . aliases ( ) ) ; for ( String index : concreteIndices ) { for ( String alias : action . concreteAliases ( state . metaData ( ) , index ) ) { AliasAction finalAction = new AliasAction ( action . aliasAction ( ) ) ; finalAction . index ( index ) ; finalAction . alias ( alias ) ; finalActions . add ( finalAction ) ; hasOnlyDeletesButNoneCanBeDone = false ; } } } if ( hasOnlyDeletesButNoneCanBeDone & & actions . size ( ) ! = <int> ) { throw new AliasesNotFoundException ( aliases . toArray ( new String [ aliases . size ( ) ] ) ) ; } request . aliasActions ( ) . clear ( ) ; IndicesAliasesClusterStateUpdateRequest updateRequest = new IndicesAliasesClusterStateUpdateRequest ( ) . ackTimeout ( request . timeout ( ) ) . masterNodeTimeout ( request . masterNodeTimeout ( ) ) . actions ( finalActions . toArray ( new AliasAction [ finalActions . size ( ) ] ) ) ; indexAliasesService . indicesAliases ( updateRequest , new ActionListener < ClusterStateUpdateResponse > ( ) { @Override public void onResponse ( ClusterStateUpdateResponse response ) { listener . onResponse ( new IndicesAliasesResponse ( response . isAcknowledged ( ) ) ) ; } @Override public void onFailure ( Throwable t ) { logger . debug ( <str> , t ) ; listener . onFailure ( t ) ; } } ) ; } } 

package org . gradle . api . internal . artifacts ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . ExcludeRule ; import org . gradle . api . tasks . Optional ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . typeconversion . MapKey ; import org . gradle . internal . typeconversion . MapNotationConverter ; import org . gradle . internal . typeconversion . NotationParser ; import org . gradle . internal . typeconversion . NotationParserBuilder ; public class ExcludeRuleNotationConverter extends MapNotationConverter < ExcludeRule > { private static final NotationParser < Object , ExcludeRule > PARSER = NotationParserBuilder . toType ( ExcludeRule . class ) . converter ( new ExcludeRuleNotationConverter ( ) ) . toComposite ( ) ; public static NotationParser < Object , ExcludeRule > parser ( ) { return PARSER ; } @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( <str> ) . example ( <str> ) ; } protected ExcludeRule parseMap ( @MapKey ( ExcludeRule . GROUP_KEY ) @Optional String group , @MapKey ( ExcludeRule . MODULE_KEY ) @Optional String module ) { if ( group = = null & & module = = null ) { throw new InvalidUserDataException ( <str> ) ; } return new DefaultExcludeRule ( group , module ) ; } } 

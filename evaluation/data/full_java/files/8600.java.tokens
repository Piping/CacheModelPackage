package org . elasticsearch . script . expression ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . queries . function . FunctionValues ; import org . apache . lucene . queries . function . ValueSource ; import org . elasticsearch . index . fielddata . AtomicFieldData ; import org . elasticsearch . index . fielddata . AtomicNumericFieldData ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . search . MultiValueMode ; import java . io . IOException ; import java . util . Map ; import java . util . Objects ; class FieldDataValueSource extends ValueSource { protected IndexFieldData < ? > fieldData ; protected MultiValueMode multiValueMode ; protected FieldDataValueSource ( IndexFieldData < ? > d , MultiValueMode m ) { Objects . requireNonNull ( d ) ; Objects . requireNonNull ( m ) ; fieldData = d ; multiValueMode = m ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; FieldDataValueSource that = ( FieldDataValueSource ) o ; if ( ! fieldData . equals ( that . fieldData ) ) return false ; return multiValueMode = = that . multiValueMode ; } @Override public int hashCode ( ) { int result = fieldData . hashCode ( ) ; result = <int> * result + multiValueMode . hashCode ( ) ; return result ; } @Override public FunctionValues getValues ( Map context , LeafReaderContext leaf ) throws IOException { AtomicFieldData leafData = fieldData . load ( leaf ) ; assert ( leafData instanceof AtomicNumericFieldData ) ; return new FieldDataFunctionValues ( this , multiValueMode , ( AtomicNumericFieldData ) leafData ) ; } @Override public String description ( ) { return <str> + fieldData . getFieldNames ( ) . toString ( ) + <str> ; } } 

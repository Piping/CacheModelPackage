package org . apache . cassandra . io . util ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; public class FastByteArrayInputStream extends InputStream { protected byte [ ] buf ; protected int pos ; protected int mark ; protected int count ; public FastByteArrayInputStream ( byte buf [ ] ) { this . mark = <int> ; this . buf = buf ; this . count = buf . length ; } public FastByteArrayInputStream ( byte buf [ ] , int offset , int length ) { this . buf = buf ; pos = offset ; mark = offset ; count = offset + length > buf . length ? buf . length : offset + length ; } @Override public int available ( ) { return count - pos ; } @Override public void close ( ) throws IOException { } @Override public void mark ( int readlimit ) { mark = pos ; } @Override public boolean markSupported ( ) { return true ; } @Override public int read ( ) { return pos < count ? buf [ pos + + ] & <hex> : - <int> ; } @Override public int read ( byte b [ ] , int offset , int length ) { if ( b = = null ) { throw new NullPointerException ( ) ; } if ( offset < <int> | | offset > b . length | | length < <int> | | length > b . length - offset ) { throw new IndexOutOfBoundsException ( ) ; } if ( this . pos > = this . count ) { return - <int> ; } if ( length = = <int> ) { return <int> ; } int copylen = this . count - pos < length ? this . count - pos : length ; System . arraycopy ( buf , pos , b , offset , copylen ) ; pos + = copylen ; return copylen ; } @Override public void reset ( ) { pos = mark ; } @Override public long skip ( long n ) { if ( n < = <int> ) { return <int> ; } int temp = pos ; pos = this . count - pos < n ? this . count : ( int ) ( pos + n ) ; return pos - temp ; } } 

package org . gradle . launcher . daemon . server . exec ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . SystemProperties ; import org . gradle . internal . nativeintegration . ProcessEnvironment ; import org . gradle . launcher . daemon . protocol . Build ; import org . gradle . launcher . daemon . server . api . DaemonCommandExecution ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . util . HashMap ; import java . util . Locale ; import java . util . Map ; import java . util . Properties ; public class EstablishBuildEnvironment extends BuildCommandOnly { private final static Logger LOGGER = Logging . getLogger ( EstablishBuildEnvironment . class ) ; private final ProcessEnvironment processEnvironment ; public EstablishBuildEnvironment ( ProcessEnvironment processEnvironment ) { this . processEnvironment = processEnvironment ; } protected void doBuild ( DaemonCommandExecution execution , Build build ) { Properties originalSystemProperties = new Properties ( ) ; originalSystemProperties . putAll ( System . getProperties ( ) ) ; Map < String , String > originalEnv = new HashMap < String , String > ( System . getenv ( ) ) ; File originalProcessDir = GFileUtils . canonicalise ( new File ( <str> ) ) ; for ( Map . Entry < String , String > entry : build . getParameters ( ) . getSystemProperties ( ) . entrySet ( ) ) { if ( SystemProperties . getInstance ( ) . getStandardProperties ( ) . contains ( entry . getKey ( ) ) ) { continue ; } if ( SystemProperties . getInstance ( ) . getNonStandardImportantProperties ( ) . contains ( entry . getKey ( ) ) ) { continue ; } if ( entry . getKey ( ) . startsWith ( <str> ) | | entry . getKey ( ) . startsWith ( <str> ) | | entry . getKey ( ) . contains ( <str> ) ) { continue ; } System . setProperty ( entry . getKey ( ) , entry . getValue ( ) ) ; } LOGGER . debug ( <str> , build . getParameters ( ) . getEnvVariables ( ) ) ; processEnvironment . maybeSetEnvironment ( build . getParameters ( ) . getEnvVariables ( ) ) ; processEnvironment . maybeSetProcessDir ( build . getParameters ( ) . getCurrentDir ( ) ) ; Locale locale = Locale . getDefault ( ) ; try { execution . proceed ( ) ; } finally { System . setProperties ( originalSystemProperties ) ; processEnvironment . maybeSetEnvironment ( originalEnv ) ; processEnvironment . maybeSetProcessDir ( originalProcessDir ) ; Locale . setDefault ( locale ) ; } } } 

package org . elasticsearch . search . sort ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class ScriptSortBuilder extends SortBuilder { private Script script ; @Deprecated private String scriptString ; private final String type ; @Deprecated private String lang ; @Deprecated private Map < String , Object > params ; private SortOrder order ; private String sortMode ; private QueryBuilder nestedFilter ; private String nestedPath ; public ScriptSortBuilder ( Script script , String type ) { this . script = script ; this . type = type ; } @Deprecated public ScriptSortBuilder ( String script , String type ) { this . scriptString = script ; this . type = type ; } @Deprecated public ScriptSortBuilder param ( String name , Object value ) { if ( params = = null ) { params = new HashMap < > ( ) ; } params . put ( name , value ) ; return this ; } @Deprecated public ScriptSortBuilder setParams ( Map < String , Object > params ) { this . params = params ; return this ; } @Deprecated public ScriptSortBuilder lang ( String lang ) { this . lang = lang ; return this ; } @Override public ScriptSortBuilder order ( SortOrder order ) { this . order = order ; return this ; } @Override public SortBuilder missing ( Object missing ) { return this ; } public ScriptSortBuilder sortMode ( String sortMode ) { this . sortMode = sortMode ; return this ; } public ScriptSortBuilder setNestedFilter ( QueryBuilder nestedFilter ) { this . nestedFilter = nestedFilter ; return this ; } public ScriptSortBuilder setNestedPath ( String nestedPath ) { this . nestedPath = nestedPath ; return this ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params builderParams ) throws IOException { builder . startObject ( <str> ) ; if ( script = = null ) { builder . field ( <str> , new Script ( scriptString , ScriptType . INLINE , lang , params ) ) ; } else { builder . field ( <str> , script ) ; } builder . field ( <str> , type ) ; if ( order = = SortOrder . DESC ) { builder . field ( <str> , true ) ; } if ( sortMode ! = null ) { builder . field ( <str> , sortMode ) ; } if ( nestedPath ! = null ) { builder . field ( <str> , nestedPath ) ; } if ( nestedFilter ! = null ) { builder . field ( <str> , nestedFilter , params ) ; } builder . endObject ( ) ; return builder ; } } 

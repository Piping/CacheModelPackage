package org . apache . cassandra . tools ; import java . util . * ; import java . util . concurrent . TimeUnit ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . commons . cli . * ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Directories ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . db . compaction . CompactionManager ; import org . apache . cassandra . db . compaction . OperationType ; import org . apache . cassandra . db . compaction . Upgrader ; import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; import org . apache . cassandra . io . sstable . * ; import org . apache . cassandra . utils . JVMStabilityInspector ; import org . apache . cassandra . utils . OutputHandler ; import static org . apache . cassandra . tools . BulkLoader . CmdLineOptions ; public class StandaloneUpgrader { private static final String TOOL_NAME = <str> ; private static final String DEBUG_OPTION = <str> ; private static final String HELP_OPTION = <str> ; private static final String KEEP_SOURCE = <str> ; public static void main ( String args [ ] ) { Options options = Options . parseArgs ( args ) ; Util . initDatabaseDescriptor ( ) ; try { Schema . instance . loadFromDisk ( false ) ; if ( Schema . instance . getCFMetaData ( options . keyspace , options . cf ) = = null ) throw new IllegalArgumentException ( String . format ( <str> , options . keyspace , options . cf ) ) ; Keyspace keyspace = Keyspace . openWithoutSSTables ( options . keyspace ) ; ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( options . cf ) ; OutputHandler handler = new OutputHandler . SystemOutput ( false , options . debug ) ; Directories . SSTableLister lister = cfs . getDirectories ( ) . sstableLister ( Directories . OnTxnErr . THROW ) ; if ( options . snapshot ! = null ) lister . onlyBackups ( true ) . snapshots ( options . snapshot ) ; else lister . includeBackups ( false ) ; Collection < SSTableReader > readers = new ArrayList < > ( ) ; for ( Map . Entry < Descriptor , Set < Component > > entry : lister . list ( ) . entrySet ( ) ) { Set < Component > components = entry . getValue ( ) ; if ( ! components . contains ( Component . DATA ) | | ! components . contains ( Component . PRIMARY_INDEX ) ) continue ; try { SSTableReader sstable = SSTableReader . openNoValidation ( entry . getKey ( ) , components , cfs ) ; if ( sstable . descriptor . version . equals ( DatabaseDescriptor . getSSTableFormat ( ) . info . getLatestVersion ( ) ) ) continue ; readers . add ( sstable ) ; } catch ( Exception e ) { JVMStabilityInspector . inspectThrowable ( e ) ; System . err . println ( String . format ( <str> , entry . getKey ( ) , e . getMessage ( ) ) ) ; if ( options . debug ) e . printStackTrace ( System . err ) ; continue ; } } int numSSTables = readers . size ( ) ; handler . output ( <str> + numSSTables + <str> ) ; for ( SSTableReader sstable : readers ) { try ( LifecycleTransaction txn = LifecycleTransaction . offline ( OperationType . UPGRADE_SSTABLES , sstable ) ) { Upgrader upgrader = new Upgrader ( cfs , txn , handler ) ; upgrader . upgrade ( options . keepSource ) ; } catch ( Exception e ) { System . err . println ( String . format ( <str> , sstable , e . getMessage ( ) ) ) ; if ( options . debug ) e . printStackTrace ( System . err ) ; } finally { sstable . selfRef ( ) . ensureReleased ( ) ; } } CompactionManager . instance . finishCompactionsAndShutdown ( <int> , TimeUnit . MINUTES ) ; LifecycleTransaction . waitForDeletions ( ) ; System . exit ( <int> ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; if ( options . debug ) e . printStackTrace ( System . err ) ; System . exit ( <int> ) ; } } private static class Options { public final String keyspace ; public final String cf ; public final String snapshot ; public boolean debug ; public boolean keepSource ; private Options ( String keyspace , String cf , String snapshot ) { this . keyspace = keyspace ; this . cf = cf ; this . snapshot = snapshot ; } public static Options parseArgs ( String cmdArgs [ ] ) { CommandLineParser parser = new GnuParser ( ) ; CmdLineOptions options = getCmdLineOptions ( ) ; try { CommandLine cmd = parser . parse ( options , cmdArgs , false ) ; if ( cmd . hasOption ( HELP_OPTION ) ) { printUsage ( options ) ; System . exit ( <int> ) ; } String [ ] args = cmd . getArgs ( ) ; if ( args . length > = <int> | | args . length < <int> ) { String msg = args . length < <int> ? <str> : <str> ; errorMsg ( msg , options ) ; System . exit ( <int> ) ; } String keyspace = args [ <int> ] ; String cf = args [ <int> ] ; String snapshot = null ; if ( args . length = = <int> ) snapshot = args [ <int> ] ; Options opts = new Options ( keyspace , cf , snapshot ) ; opts . debug = cmd . hasOption ( DEBUG_OPTION ) ; opts . keepSource = cmd . hasOption ( KEEP_SOURCE ) ; return opts ; } catch ( ParseException e ) { errorMsg ( e . getMessage ( ) , options ) ; return null ; } } private static void errorMsg ( String msg , CmdLineOptions options ) { System . err . println ( msg ) ; printUsage ( options ) ; System . exit ( <int> ) ; } private static CmdLineOptions getCmdLineOptions ( ) { CmdLineOptions options = new CmdLineOptions ( ) ; options . addOption ( null , DEBUG_OPTION , <str> ) ; options . addOption ( <str> , HELP_OPTION , <str> ) ; options . addOption ( <str> , KEEP_SOURCE , <str> ) ; return options ; } public static void printUsage ( CmdLineOptions options ) { String usage = String . format ( <str> , TOOL_NAME ) ; StringBuilder header = new StringBuilder ( ) ; header . append ( <str> ) ; header . append ( <str> ) ; header . append ( <str> ) ; header . append ( <str> ) ; header . append ( <str> ) ; header . append ( <str> ) ; header . append ( <str> ) ; header . append ( <str> ) ; header . append ( <str> ) ; header . append ( <str> ) ; header . append ( <str> ) ; new HelpFormatter ( ) . printHelp ( usage , header . toString ( ) , options , <str> ) ; } } } 

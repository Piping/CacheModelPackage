package org . gradle . api . internal ; import org . gradle . util . TestUtil ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . jmock . integration . junit4 . JMock ; import org . jmock . Expectations ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . * ; import org . junit . Test ; import org . junit . runner . RunWith ; import org . gradle . api . Transformer ; import groovy . lang . Closure ; @RunWith ( JMock . class ) public class ChainingTransformerTest { private final JUnit4Mockery context = new JUnit4Mockery ( ) ; private final ChainingTransformer < String > transformer = new ChainingTransformer < String > ( String . class ) ; @Test public void doesNothingWhenNoTransformersAdded ( ) { assertThat ( transformer . transform ( <str> ) , equalTo ( <str> ) ) ; } @Test public void passesObjectToEachTransformerInTurn ( ) { @SuppressWarnings ( <str> ) final Transformer < String , String > transformerA = context . mock ( Transformer . class , <str> ) ; @SuppressWarnings ( <str> ) final Transformer < String , String > transformerB = context . mock ( Transformer . class , <str> ) ; context . checking ( new Expectations ( ) { { one ( transformerA ) . transform ( <str> ) ; will ( returnValue ( <str> ) ) ; one ( transformerB ) . transform ( <str> ) ; will ( returnValue ( <str> ) ) ; } } ) ; transformer . add ( transformerA ) ; transformer . add ( transformerB ) ; assertThat ( transformer . transform ( <str> ) , equalTo ( <str> ) ) ; } @Test public void canUseAClosureAsATransformer ( ) { Closure closure = TestUtil . toClosure ( <str> ) ; transformer . add ( closure ) ; assertThat ( transformer . transform ( <str> ) , equalTo ( <str> ) ) ; } @Test public void usesOriginalObjectWhenClosureReturnsNull ( ) { Closure closure = TestUtil . toClosure ( <str> ) ; transformer . add ( closure ) ; assertThat ( transformer . transform ( <str> ) , equalTo ( <str> ) ) ; } @Test public void usesOriginalObjectWhenClosureReturnsObjectOfUnexpectedType ( ) { Closure closure = TestUtil . toClosure ( <str> ) ; transformer . add ( closure ) ; assertThat ( transformer . transform ( <str> ) , equalTo ( <str> ) ) ; } @Test public void originalObjectIsSetAsDelegateForClosure ( ) { Closure closure = TestUtil . toClosure ( <str> ) ; transformer . add ( closure ) ; assertThat ( transformer . transform ( <str> ) , equalTo ( <str> ) ) ; } @Test public void closureCanTransformAStringIntoAGString ( ) { Closure closure = TestUtil . toClosure ( <str> ) ; transformer . add ( closure ) ; assertThat ( transformer . transform ( <str> ) , equalTo ( <str> ) ) ; } } 

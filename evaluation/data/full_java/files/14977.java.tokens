package org . gradle . nativeplatform . platform . internal ; import java . util . LinkedHashSet ; import java . util . Set ; public class NativePlatforms { private static final String OS_WINDOWS = <str> ; private static final String OS_LINUX = <str> ; private static final String OS_OSX = <str> ; private static final String OS_UNIX = <str> ; private static final String ARCH_X86 = <str> ; public Set < DefaultNativePlatform > defaultPlatformDefinitions ( ) { Set < DefaultNativePlatform > platforms = new LinkedHashSet < DefaultNativePlatform > ( ) ; OperatingSystemInternal windows = new DefaultOperatingSystem ( OS_WINDOWS ) ; OperatingSystemInternal linux = new DefaultOperatingSystem ( OS_LINUX ) ; OperatingSystemInternal osx = new DefaultOperatingSystem ( OS_OSX ) ; OperatingSystemInternal unix = new DefaultOperatingSystem ( OS_UNIX ) ; OperatingSystemInternal freebsd = new DefaultOperatingSystem ( <str> ) ; OperatingSystemInternal solaris = new DefaultOperatingSystem ( <str> ) ; ArchitectureInternal x86 = Architectures . forInput ( ARCH_X86 ) ; ArchitectureInternal x64 = Architectures . forInput ( <str> ) ; ArchitectureInternal ia64 = Architectures . forInput ( <str> ) ; ArchitectureInternal armv7 = Architectures . forInput ( <str> ) ; ArchitectureInternal armv8 = Architectures . forInput ( <str> ) ; ArchitectureInternal sparc = Architectures . forInput ( <str> ) ; ArchitectureInternal ultrasparc = Architectures . forInput ( <str> ) ; ArchitectureInternal ppc = Architectures . forInput ( <str> ) ; ArchitectureInternal ppc64 = Architectures . forInput ( <str> ) ; platforms . add ( createPlatform ( windows , x86 ) ) ; platforms . add ( createPlatform ( windows , x64 ) ) ; platforms . add ( createPlatform ( windows , armv7 ) ) ; platforms . add ( createPlatform ( windows , ia64 ) ) ; platforms . add ( createPlatform ( freebsd , x86 ) ) ; platforms . add ( createPlatform ( freebsd , x64 ) ) ; platforms . add ( createPlatform ( freebsd , armv7 ) ) ; platforms . add ( createPlatform ( freebsd , armv8 ) ) ; platforms . add ( createPlatform ( freebsd , ppc ) ) ; platforms . add ( createPlatform ( freebsd , ppc64 ) ) ; platforms . add ( createPlatform ( unix , x86 ) ) ; platforms . add ( createPlatform ( unix , x64 ) ) ; platforms . add ( createPlatform ( unix , armv7 ) ) ; platforms . add ( createPlatform ( unix , armv8 ) ) ; platforms . add ( createPlatform ( unix , ppc ) ) ; platforms . add ( createPlatform ( unix , ppc64 ) ) ; platforms . add ( createPlatform ( linux , x64 ) ) ; platforms . add ( createPlatform ( linux , x86 ) ) ; platforms . add ( createPlatform ( linux , armv7 ) ) ; platforms . add ( createPlatform ( linux , armv8 ) ) ; platforms . add ( createPlatform ( osx , x86 ) ) ; platforms . add ( createPlatform ( osx , x64 ) ) ; platforms . add ( createPlatform ( solaris , x64 ) ) ; platforms . add ( createPlatform ( solaris , x86 ) ) ; platforms . add ( createPlatform ( solaris , sparc ) ) ; platforms . add ( createPlatform ( solaris , ultrasparc ) ) ; return platforms ; } private static DefaultNativePlatform createPlatform ( OperatingSystemInternal os , ArchitectureInternal arch ) { return new DefaultNativePlatform ( platformName ( os . getName ( ) , arch . getName ( ) ) , os , arch ) ; } private static String platformName ( String os , String arch ) { return String . format ( <str> , os , arch ) ; } public String getDefaultPlatformName ( ) { NativePlatformInternal defaultPlatform = new DefaultNativePlatform ( <str> ) ; OperatingSystemInternal os = defaultPlatform . getOperatingSystem ( ) ; ArchitectureInternal architecture = defaultPlatform . getArchitecture ( ) ; if ( os . isWindows ( ) ) { return platformName ( OS_WINDOWS , ARCH_X86 ) ; } if ( os . isLinux ( ) ) { return platformName ( OS_LINUX , architecture . getName ( ) ) ; } if ( os . isMacOsX ( ) ) { return platformName ( OS_OSX , architecture . getName ( ) ) ; } return platformName ( OS_UNIX , ARCH_X86 ) ; } } 

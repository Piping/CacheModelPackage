package org . gradle . messaging . actor ; import org . gradle . internal . concurrent . ThreadSafe ; import org . gradle . messaging . dispatch . DispatchException ; import org . gradle . messaging . dispatch . MethodInvocation ; import org . gradle . messaging . dispatch . ProxyDispatchAdapter ; import org . gradle . messaging . dispatch . ReflectionDispatch ; public class TestActorFactory implements ActorFactory { public Actor createActor ( Object target ) { throw new UnsupportedOperationException ( ) ; } public Actor createBlockingActor ( final Object target ) { return new Actor ( ) { public < T > T getProxy ( Class < T > type ) { return new ProxyDispatchAdapter < T > ( new ReflectionDispatch ( target ) , type , ThreadSafe . class ) . getSource ( ) ; } public void stop ( ) throws DispatchException { } public void dispatch ( MethodInvocation message ) { throw new UnsupportedOperationException ( ) ; } } ; } } 

package org . gradle . api . internal . tasks . compile . incremental . jar ; import org . gradle . api . internal . tasks . compile . incremental . deps . ClassSetAnalysisData ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . Encoder ; import org . gradle . internal . serialize . MapSerializer ; import org . gradle . internal . serialize . Serializer ; import java . util . Map ; import static org . gradle . internal . serialize . BaseSerializerFactory . BYTE_ARRAY_SERIALIZER ; import static org . gradle . internal . serialize . BaseSerializerFactory . STRING_SERIALIZER ; public class JarSnapshotDataSerializer implements Serializer < JarSnapshotData > { private final MapSerializer < String , byte [ ] > mapSerializer ; private final Serializer < ClassSetAnalysisData > analysisSerializer ; public JarSnapshotDataSerializer ( ) { mapSerializer = new MapSerializer < String , byte [ ] > ( STRING_SERIALIZER , BYTE_ARRAY_SERIALIZER ) ; analysisSerializer = new ClassSetAnalysisData . Serializer ( ) ; } public JarSnapshotData read ( Decoder decoder ) throws Exception { byte [ ] hash = decoder . readBinary ( ) ; Map < String , byte [ ] > hashes = mapSerializer . read ( decoder ) ; ClassSetAnalysisData data = analysisSerializer . read ( decoder ) ; return new JarSnapshotData ( hash , hashes , data ) ; } public void write ( Encoder encoder , JarSnapshotData value ) throws Exception { encoder . writeBinary ( value . hash ) ; mapSerializer . write ( encoder , value . hashes ) ; analysisSerializer . write ( encoder , value . data ) ; } } 

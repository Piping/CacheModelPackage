package org . elasticsearch . action . get ; import org . elasticsearch . action . RoutingMissingException ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . single . shard . TransportSingleShardAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . routing . Preference ; import org . elasticsearch . cluster . routing . ShardIterator ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . get . GetResult ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . indices . IndicesService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportGetAction extends TransportSingleShardAction < GetRequest , GetResponse > { private final IndicesService indicesService ; private final boolean realtime ; @Inject public TransportGetAction ( Settings settings , ClusterService clusterService , TransportService transportService , IndicesService indicesService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , GetAction . NAME , threadPool , clusterService , transportService , actionFilters , indexNameExpressionResolver , GetRequest : : new , ThreadPool . Names . GET ) ; this . indicesService = indicesService ; this . realtime = settings . getAsBoolean ( <str> , true ) ; } @Override protected boolean resolveIndex ( GetRequest request ) { return true ; } @Override protected ShardIterator shards ( ClusterState state , InternalRequest request ) { return clusterService . operationRouting ( ) . getShards ( clusterService . state ( ) , request . concreteIndex ( ) , request . request ( ) . type ( ) , request . request ( ) . id ( ) , request . request ( ) . routing ( ) , request . request ( ) . preference ( ) ) ; } @Override protected void resolveRequest ( ClusterState state , InternalRequest request ) { if ( request . request ( ) . realtime = = null ) { request . request ( ) . realtime = this . realtime ; } IndexMetaData indexMeta = state . getMetaData ( ) . index ( request . concreteIndex ( ) ) ; if ( request . request ( ) . realtime & & request . request ( ) . preference ( ) = = null & & indexMeta ! = null & & IndexMetaData . isIndexUsingShadowReplicas ( indexMeta . getSettings ( ) ) ) { request . request ( ) . preference ( Preference . PRIMARY . type ( ) ) ; } request . request ( ) . routing ( state . metaData ( ) . resolveIndexRouting ( request . request ( ) . routing ( ) , request . request ( ) . index ( ) ) ) ; if ( request . request ( ) . routing ( ) = = null & & state . getMetaData ( ) . routingRequired ( request . concreteIndex ( ) , request . request ( ) . type ( ) ) ) { throw new RoutingMissingException ( request . concreteIndex ( ) , request . request ( ) . type ( ) , request . request ( ) . id ( ) ) ; } } @Override protected GetResponse shardOperation ( GetRequest request , ShardId shardId ) { IndexService indexService = indicesService . indexServiceSafe ( shardId . getIndex ( ) ) ; IndexShard indexShard = indexService . getShard ( shardId . id ( ) ) ; if ( request . refresh ( ) & & ! request . realtime ( ) ) { indexShard . refresh ( <str> ) ; } GetResult result = indexShard . getService ( ) . get ( request . type ( ) , request . id ( ) , request . fields ( ) , request . realtime ( ) , request . version ( ) , request . versionType ( ) , request . fetchSourceContext ( ) , request . ignoreErrorsOnGeneratedFields ( ) ) ; return new GetResponse ( result ) ; } @Override protected GetResponse newResponse ( ) { return new GetResponse ( ) ; } } 

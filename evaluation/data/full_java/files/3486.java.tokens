package org . nd4j . linalg . util ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . shape . Shape ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import java . util . Arrays ; import static org . junit . Assert . assertArrayEquals ; public class ShapeTest extends BaseNd4jTest { public ShapeTest ( ) { } public ShapeTest ( Nd4jBackend backend ) { super ( backend ) ; } public ShapeTest ( String name ) { super ( name ) ; } public ShapeTest ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } @Test public void testToOffsetZero ( ) { INDArray matrix = Nd4j . rand ( <int> , <int> ) ; INDArray rowOne = matrix . getRow ( <int> ) ; INDArray row1Copy = Shape . toOffsetZero ( rowOne ) ; assertEquals ( rowOne , row1Copy ) ; INDArray rows = matrix . getRows ( <int> , <int> ) ; INDArray rowsOffsetZero = Shape . toOffsetZero ( rows ) ; assertEquals ( rows , rowsOffsetZero ) ; INDArray tensor = Nd4j . rand ( new int [ ] { <int> , <int> , <int> } ) ; INDArray getTensor = tensor . slice ( <int> ) . slice ( <int> ) ; INDArray getTensorZero = Shape . toOffsetZero ( getTensor ) ; assertEquals ( getTensor , getTensorZero ) ; } @Test public void testDupLeadingTrailingZeros ( ) { testDupHelper ( <int> , <int> ) ; testDupHelper ( <int> , <int> ) ; testDupHelper ( <int> , <int> , <int> ) ; testDupHelper ( <int> , <int> , <int> , <int> ) ; testDupHelper ( <int> , <int> , <int> ) ; testDupHelper ( <int> , <int> , <int> , <int> ) ; testDupHelper ( <int> , <int> , <int> , <int> ) ; testDupHelper ( <int> , <int> , <int> , <int> ) ; testDupHelper ( <int> , <int> ) ; } private void testDupHelper ( int . . . shape ) { INDArray arr = Nd4j . ones ( shape ) ; INDArray arr2 = arr . dup ( ) ; assertArrayEquals ( arr . shape ( ) , arr2 . shape ( ) ) ; assertTrue ( arr . equals ( arr2 ) ) ; } @Test public void testLeadingOnes ( ) { INDArray arr = Nd4j . create ( <int> , <int> , <int> ) ; assertEquals ( <int> , arr . getLeadingOnes ( ) ) ; INDArray arr2 = Nd4j . create ( <int> , <int> ) ; assertEquals ( <int> , arr2 . getLeadingOnes ( ) ) ; INDArray arr4 = Nd4j . create ( <int> , <int> , <int> , <int> ) ; assertEquals ( <int> , arr4 . getLeadingOnes ( ) ) ; } @Test public void testTrailingOnes ( ) { INDArray arr2 = Nd4j . create ( <int> , <int> , <int> ) ; assertEquals ( <int> , arr2 . getTrailingOnes ( ) ) ; INDArray arr4 = Nd4j . create ( <int> , <int> , <int> , <int> ) ; assertEquals ( <int> , arr4 . getTrailingOnes ( ) ) ; } @Test public void testElementWiseCompareOnesInMiddle ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray onesInMiddle = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; for ( int i = <int> ; i < arr . length ( ) ; i + + ) { double val = arr . getDouble ( i ) ; double middleVal = onesInMiddle . getDouble ( i ) ; assertEquals ( val , middleVal ) ; } } @Test public void testSumLeadingTrailingZeros ( ) { testSumHelper ( <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> , <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> , <int> , <int> , <int> ) ; testSumHelper ( <int> , <int> , <int> , <int> , <int> , <int> ) ; } private void testSumHelper ( int . . . shape ) { INDArray array = Nd4j . ones ( shape ) ; for ( int i = <int> ; i < shape . length ; i + + ) { for ( int j = <int> ; j < array . vectorsAlongDimension ( i ) ; j + + ) { INDArray vec = array . vectorAlongDimension ( j , i ) ; } array . sum ( i ) ; } } @Override public char ordering ( ) { return <str> ; } } 

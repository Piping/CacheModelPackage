package org . apache . cassandra . gms ; import java . io . * ; import java . net . InetAddress ; import java . util . Collection ; import java . util . UUID ; import static java . nio . charset . StandardCharsets . ISO_8859_1 ; import com . google . common . collect . Iterables ; import org . apache . cassandra . db . TypeSizes ; import org . apache . cassandra . dht . IPartitioner ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . io . IVersionedSerializer ; import org . apache . cassandra . io . util . DataInputPlus ; import org . apache . cassandra . io . util . DataOutputPlus ; import org . apache . cassandra . net . MessagingService ; import org . apache . cassandra . utils . FBUtilities ; import org . apache . commons . lang3 . StringUtils ; public class VersionedValue implements Comparable < VersionedValue > { public static final IVersionedSerializer < VersionedValue > serializer = new VersionedValueSerializer ( ) ; public final static char DELIMITER = <str> ; public final static String DELIMITER_STR = new String ( new char [ ] { DELIMITER } ) ; public final static String STATUS_BOOTSTRAPPING = <str> ; public final static String STATUS_NORMAL = <str> ; public final static String STATUS_LEAVING = <str> ; public final static String STATUS_LEFT = <str> ; public final static String STATUS_MOVING = <str> ; public final static String REMOVING_TOKEN = <str> ; public final static String REMOVED_TOKEN = <str> ; public final static String HIBERNATE = <str> ; public final static String SHUTDOWN = <str> ; public final static String REMOVAL_COORDINATOR = <str> ; public final int version ; public final String value ; private VersionedValue ( String value , int version ) { assert value ! = null ; this . value = value . intern ( ) ; this . version = version ; } private VersionedValue ( String value ) { this ( value , VersionGenerator . getNextVersion ( ) ) ; } public int compareTo ( VersionedValue value ) { return this . version - value . version ; } @Override public String toString ( ) { return <str> + value + <str> + version + <str> ; } public byte [ ] toBytes ( ) { return value . getBytes ( ISO_8859_1 ) ; } private static String versionString ( String . . . args ) { return StringUtils . join ( args , VersionedValue . DELIMITER ) ; } public static class VersionedValueFactory { final IPartitioner partitioner ; public VersionedValueFactory ( IPartitioner partitioner ) { this . partitioner = partitioner ; } public VersionedValue cloneWithHigherVersion ( VersionedValue value ) { return new VersionedValue ( value . value ) ; } public VersionedValue bootstrapping ( Collection < Token > tokens ) { return new VersionedValue ( versionString ( VersionedValue . STATUS_BOOTSTRAPPING , makeTokenString ( tokens ) ) ) ; } public VersionedValue normal ( Collection < Token > tokens ) { return new VersionedValue ( versionString ( VersionedValue . STATUS_NORMAL , makeTokenString ( tokens ) ) ) ; } private String makeTokenString ( Collection < Token > tokens ) { return partitioner . getTokenFactory ( ) . toString ( Iterables . get ( tokens , <int> ) ) ; } public VersionedValue load ( double load ) { return new VersionedValue ( String . valueOf ( load ) ) ; } public VersionedValue schema ( UUID newVersion ) { return new VersionedValue ( newVersion . toString ( ) ) ; } public VersionedValue leaving ( Collection < Token > tokens ) { return new VersionedValue ( versionString ( VersionedValue . STATUS_LEAVING , makeTokenString ( tokens ) ) ) ; } public VersionedValue left ( Collection < Token > tokens , long expireTime ) { return new VersionedValue ( versionString ( VersionedValue . STATUS_LEFT , makeTokenString ( tokens ) , Long . toString ( expireTime ) ) ) ; } public VersionedValue moving ( Token token ) { return new VersionedValue ( VersionedValue . STATUS_MOVING + VersionedValue . DELIMITER + partitioner . getTokenFactory ( ) . toString ( token ) ) ; } public VersionedValue hostId ( UUID hostId ) { return new VersionedValue ( hostId . toString ( ) ) ; } public VersionedValue tokens ( Collection < Token > tokens ) { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; DataOutputStream out = new DataOutputStream ( bos ) ; try { TokenSerializer . serialize ( partitioner , tokens , out ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return new VersionedValue ( new String ( bos . toByteArray ( ) , ISO_8859_1 ) ) ; } public VersionedValue removingNonlocal ( UUID hostId ) { return new VersionedValue ( versionString ( VersionedValue . REMOVING_TOKEN , hostId . toString ( ) ) ) ; } public VersionedValue removedNonlocal ( UUID hostId , long expireTime ) { return new VersionedValue ( versionString ( VersionedValue . REMOVED_TOKEN , hostId . toString ( ) , Long . toString ( expireTime ) ) ) ; } public VersionedValue removalCoordinator ( UUID hostId ) { return new VersionedValue ( versionString ( VersionedValue . REMOVAL_COORDINATOR , hostId . toString ( ) ) ) ; } public VersionedValue hibernate ( boolean value ) { return new VersionedValue ( VersionedValue . HIBERNATE + VersionedValue . DELIMITER + value ) ; } public VersionedValue rpcReady ( boolean value ) { return new VersionedValue ( String . valueOf ( value ) ) ; } public VersionedValue shutdown ( boolean value ) { return new VersionedValue ( VersionedValue . SHUTDOWN + VersionedValue . DELIMITER + value ) ; } public VersionedValue datacenter ( String dcId ) { return new VersionedValue ( dcId ) ; } public VersionedValue rack ( String rackId ) { return new VersionedValue ( rackId ) ; } public VersionedValue rpcaddress ( InetAddress endpoint ) { return new VersionedValue ( endpoint . getHostAddress ( ) ) ; } public VersionedValue releaseVersion ( ) { return new VersionedValue ( FBUtilities . getReleaseVersionString ( ) ) ; } public VersionedValue networkVersion ( ) { return new VersionedValue ( String . valueOf ( MessagingService . current_version ) ) ; } public VersionedValue internalIP ( String private_ip ) { return new VersionedValue ( private_ip ) ; } public VersionedValue severity ( double value ) { return new VersionedValue ( String . valueOf ( value ) ) ; } } private static class VersionedValueSerializer implements IVersionedSerializer < VersionedValue > { public void serialize ( VersionedValue value , DataOutputPlus out , int version ) throws IOException { out . writeUTF ( outValue ( value , version ) ) ; out . writeInt ( value . version ) ; } private String outValue ( VersionedValue value , int version ) { return value . value ; } public VersionedValue deserialize ( DataInputPlus in , int version ) throws IOException { String value = in . readUTF ( ) ; int valVersion = in . readInt ( ) ; return new VersionedValue ( value , valVersion ) ; } public long serializedSize ( VersionedValue value , int version ) { return TypeSizes . sizeof ( outValue ( value , version ) ) + TypeSizes . sizeof ( value . version ) ; } } } 

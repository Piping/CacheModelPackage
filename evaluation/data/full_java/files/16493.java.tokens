package org . junit . runners . parameterized ; import java . lang . annotation . Annotation ; import java . lang . reflect . Field ; import java . util . List ; import org . junit . runner . RunWith ; import org . junit . runner . notification . RunNotifier ; import org . junit . runners . BlockJUnit4ClassRunner ; import org . junit . runners . Parameterized . Parameter ; import org . junit . runners . model . FrameworkField ; import org . junit . runners . model . FrameworkMethod ; import org . junit . runners . model . InitializationError ; import org . junit . runners . model . Statement ; public class BlockJUnit4ClassRunnerWithParameters extends BlockJUnit4ClassRunner { private enum InjectionType { CONSTRUCTOR , FIELD } private final Object [ ] parameters ; private final String name ; public BlockJUnit4ClassRunnerWithParameters ( TestWithParameters test ) throws InitializationError { super ( test . getTestClass ( ) . getJavaClass ( ) ) ; parameters = test . getParameters ( ) . toArray ( new Object [ test . getParameters ( ) . size ( ) ] ) ; name = test . getName ( ) ; } @Override public Object createTest ( ) throws Exception { InjectionType injectionType = getInjectionType ( ) ; switch ( injectionType ) { case CONSTRUCTOR : return createTestUsingConstructorInjection ( ) ; case FIELD : return createTestUsingFieldInjection ( ) ; default : throw new IllegalStateException ( <str> + injectionType + <str> ) ; } } private Object createTestUsingConstructorInjection ( ) throws Exception { return getTestClass ( ) . getOnlyConstructor ( ) . newInstance ( parameters ) ; } private Object createTestUsingFieldInjection ( ) throws Exception { List < FrameworkField > annotatedFieldsByParameter = getAnnotatedFieldsByParameter ( ) ; if ( annotatedFieldsByParameter . size ( ) ! = parameters . length ) { throw new Exception ( <str> + <str> + annotatedFieldsByParameter . size ( ) + <str> + parameters . length + <str> ) ; } Object testClassInstance = getTestClass ( ) . getJavaClass ( ) . newInstance ( ) ; for ( FrameworkField each : annotatedFieldsByParameter ) { Field field = each . getField ( ) ; Parameter annotation = field . getAnnotation ( Parameter . class ) ; int index = annotation . value ( ) ; try { field . set ( testClassInstance , parameters [ index ] ) ; } catch ( IllegalArgumentException iare ) { throw new Exception ( getTestClass ( ) . getName ( ) + <str> + field . getName ( ) + <str> + parameters [ index ] + <str> + parameters [ index ] . getClass ( ) . getSimpleName ( ) + <str> + field . getType ( ) . getSimpleName ( ) + <str> , iare ) ; } } return testClassInstance ; } @Override protected String getName ( ) { return name ; } @Override protected String testName ( FrameworkMethod method ) { return method . getName ( ) + getName ( ) ; } @Override protected void validateConstructor ( List < Throwable > errors ) { validateOnlyOneConstructor ( errors ) ; if ( getInjectionType ( ) ! = InjectionType . CONSTRUCTOR ) { validateZeroArgConstructor ( errors ) ; } } @Override protected void validateFields ( List < Throwable > errors ) { super . validateFields ( errors ) ; if ( getInjectionType ( ) = = InjectionType . FIELD ) { List < FrameworkField > annotatedFieldsByParameter = getAnnotatedFieldsByParameter ( ) ; int [ ] usedIndices = new int [ annotatedFieldsByParameter . size ( ) ] ; for ( FrameworkField each : annotatedFieldsByParameter ) { int index = each . getField ( ) . getAnnotation ( Parameter . class ) . value ( ) ; if ( index < <int> | | index > annotatedFieldsByParameter . size ( ) - <int> ) { errors . add ( new Exception ( <str> + index + <str> + annotatedFieldsByParameter . size ( ) + <str> + ( annotatedFieldsByParameter . size ( ) - <int> ) + <str> ) ) ; } else { usedIndices [ index ] + + ; } } for ( int index = <int> ; index < usedIndices . length ; index + + ) { int numberOfUse = usedIndices [ index ] ; if ( numberOfUse = = <int> ) { errors . add ( new Exception ( <str> + index + <str> ) ) ; } else if ( numberOfUse > <int> ) { errors . add ( new Exception ( <str> + index + <str> + numberOfUse + <str> ) ) ; } } } } @Override protected Statement classBlock ( RunNotifier notifier ) { return childrenInvoker ( notifier ) ; } @Override protected Annotation [ ] getRunnerAnnotations ( ) { Annotation [ ] allAnnotations = super . getRunnerAnnotations ( ) ; Annotation [ ] annotationsWithoutRunWith = new Annotation [ allAnnotations . length - <int> ] ; int i = <int> ; for ( Annotation annotation : allAnnotations ) { if ( ! annotation . annotationType ( ) . equals ( RunWith . class ) ) { annotationsWithoutRunWith [ i ] = annotation ; + + i ; } } return annotationsWithoutRunWith ; } private List < FrameworkField > getAnnotatedFieldsByParameter ( ) { return getTestClass ( ) . getAnnotatedFields ( Parameter . class ) ; } private InjectionType getInjectionType ( ) { if ( fieldsAreAnnotated ( ) ) { return InjectionType . FIELD ; } else { return InjectionType . CONSTRUCTOR ; } } private boolean fieldsAreAnnotated ( ) { return ! getAnnotatedFieldsByParameter ( ) . isEmpty ( ) ; } } 

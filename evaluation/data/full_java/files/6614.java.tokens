package org . elasticsearch . index . query ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Writeable ; import java . io . IOException ; public enum GeoExecType implements Writeable < GeoExecType > { MEMORY ( <int> ) , INDEXED ( <int> ) ; private final int ordinal ; private static final GeoExecType PROTOTYPE = MEMORY ; GeoExecType ( int ordinal ) { this . ordinal = ordinal ; } @Override public GeoExecType readFrom ( StreamInput in ) throws IOException { int ord = in . readVInt ( ) ; switch ( ord ) { case ( <int> ) : return MEMORY ; case ( <int> ) : return INDEXED ; } throw new ElasticsearchException ( <str> + ord + <str> ) ; } public static GeoExecType readTypeFrom ( StreamInput in ) throws IOException { return PROTOTYPE . readFrom ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVInt ( this . ordinal ) ; } public static GeoExecType fromString ( String typeName ) { if ( typeName = = null ) { throw new IllegalArgumentException ( <str> ) ; } for ( GeoExecType type : GeoExecType . values ( ) ) { if ( type . name ( ) . equalsIgnoreCase ( typeName ) ) { return type ; } } throw new IllegalArgumentException ( <str> + typeName ) ; } } 

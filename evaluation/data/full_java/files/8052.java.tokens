package org . elasticsearch . gateway ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . InternalTestCluster . RestartCallback ; import java . util . concurrent . TimeUnit ; import static org . elasticsearch . client . Requests . clusterHealthRequest ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; @ClusterScope ( numDataNodes = <int> , scope = Scope . TEST ) public class QuorumGatewayIT extends ESIntegTestCase { @Override protected int numberOfReplicas ( ) { return <int> ; } public void testChangeInitialShardsRecovery ( ) throws Exception { logger . info ( <str> ) ; final String [ ] nodes = internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) . toArray ( new String [ <int> ] ) ; createIndex ( <str> ) ; ensureGreen ( ) ; NumShards test = getNumShards ( <str> ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . get ( ) ; flush ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . get ( ) ; refresh ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } final String nodeToRemove = nodes [ between ( <int> , <int> ) ] ; logger . info ( <str> ) ; internalCluster ( ) . fullRestart ( new RestartCallback ( ) { @Override public Settings onNodeStopped ( String nodeName ) throws Exception { return Settings . EMPTY ; } @Override public boolean doRestart ( String nodeName ) { return nodeToRemove . equals ( nodeName ) ; } } ) ; if ( randomBoolean ( ) ) { Thread . sleep ( between ( <int> , <int> ) ) ; } ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . health ( clusterHealthRequest ( ) . waitForNodes ( <str> ) ) . actionGet ( ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . RED ) ) ; assertTrue ( awaitBusy ( ( ) - > { ClusterStateResponse clusterStateResponse = internalCluster ( ) . smartClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . get ( ) ; return clusterStateResponse . getState ( ) ! = null & & clusterStateResponse . getState ( ) . routingTable ( ) . index ( <str> ) ! = null ; } ) ) ; final ClusterStateResponse clusterStateResponse = internalCluster ( ) . smartClient ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setMasterNodeTimeout ( <str> ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) , notNullValue ( ) ) ; assertThat ( clusterStateResponse . getState ( ) . routingTable ( ) . index ( <str> ) , notNullValue ( ) ) ; assertThat ( clusterStateResponse . getState ( ) . routingTable ( ) . index ( <str> ) . allPrimaryShardsActive ( ) , is ( false ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) ) . get ( ) ; logger . info ( <str> ) ; clusterHealth = client ( ) . admin ( ) . cluster ( ) . health ( clusterHealthRequest ( ) . waitForYellowStatus ( ) . waitForActiveShards ( test . numPrimaries ) ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; assertThat ( clusterHealth . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( clusterHealth . getStatus ( ) , equalTo ( ClusterHealthStatus . YELLOW ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } } public void testQuorumRecovery ( ) throws Exception { logger . info ( <str> ) ; internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; setMinimumMasterNodes ( <int> ) ; createIndex ( <str> ) ; ensureGreen ( ) ; final NumShards test = getNumShards ( <str> ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . get ( ) ; flush ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . get ( ) ; refresh ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } logger . info ( <str> ) ; internalCluster ( ) . fullRestart ( new RestartCallback ( ) { @Override public Settings onNodeStopped ( String nodeName ) throws Exception { return null ; } @Override public void doAfterNodes ( int numNodes , final Client activeClient ) throws Exception { if ( numNodes = = <int> ) { assertTrue ( awaitBusy ( ( ) - > { logger . info ( <str> ) ; ClusterHealthResponse clusterHealth = activeClient . admin ( ) . cluster ( ) . health ( clusterHealthRequest ( ) . waitForYellowStatus ( ) . waitForNodes ( <str> ) . waitForActiveShards ( test . numPrimaries * <int> ) ) . actionGet ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; return ( ! clusterHealth . isTimedOut ( ) ) & & clusterHealth . getStatus ( ) = = ClusterHealthStatus . YELLOW ; } , <int> , TimeUnit . SECONDS ) ) ; logger . info ( <str> ) ; activeClient . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . get ( ) ; assertNoFailures ( activeClient . admin ( ) . indices ( ) . prepareRefresh ( ) . get ( ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( activeClient . prepareSearch ( ) . setSize ( <int> ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } } } } ) ; logger . info ( <str> ) ; logger . info ( <str> ) ; ensureGreen ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( client ( ) . prepareSearch ( ) . setSize ( <int> ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } } } 

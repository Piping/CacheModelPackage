package org . elasticsearch . action . admin . cluster . shards ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . action . support . master . MasterNodeReadRequest ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; public class ClusterSearchShardsRequest extends MasterNodeReadRequest < ClusterSearchShardsRequest > implements IndicesRequest . Replaceable { private String [ ] indices ; @Nullable private String routing ; @Nullable private String preference ; private String [ ] types = Strings . EMPTY_ARRAY ; private IndicesOptions indicesOptions = IndicesOptions . lenientExpandOpen ( ) ; public ClusterSearchShardsRequest ( ) { } public ClusterSearchShardsRequest ( String . . . indices ) { indices ( indices ) ; } @Override public ActionRequestValidationException validate ( ) { return null ; } @Override public ClusterSearchShardsRequest indices ( String . . . indices ) { if ( indices = = null ) { throw new IllegalArgumentException ( <str> ) ; } else { for ( int i = <int> ; i < indices . length ; i + + ) { if ( indices [ i ] = = null ) { throw new IllegalArgumentException ( <str> + i + <str> ) ; } } } this . indices = indices ; return this ; } @Override public String [ ] indices ( ) { return indices ; } @Override public IndicesOptions indicesOptions ( ) { return indicesOptions ; } public ClusterSearchShardsRequest indicesOptions ( IndicesOptions indicesOptions ) { this . indicesOptions = indicesOptions ; return this ; } public String [ ] types ( ) { return types ; } public ClusterSearchShardsRequest types ( String . . . types ) { this . types = types ; return this ; } public String routing ( ) { return this . routing ; } public ClusterSearchShardsRequest routing ( String routing ) { this . routing = routing ; return this ; } public ClusterSearchShardsRequest routing ( String . . . routings ) { this . routing = Strings . arrayToCommaDelimitedString ( routings ) ; return this ; } public ClusterSearchShardsRequest preference ( String preference ) { this . preference = preference ; return this ; } public String preference ( ) { return this . preference ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; indices = new String [ in . readVInt ( ) ] ; for ( int i = <int> ; i < indices . length ; i + + ) { indices [ i ] = in . readString ( ) ; } routing = in . readOptionalString ( ) ; preference = in . readOptionalString ( ) ; types = in . readStringArray ( ) ; indicesOptions = IndicesOptions . readIndicesOptions ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( indices . length ) ; for ( String index : indices ) { out . writeString ( index ) ; } out . writeOptionalString ( routing ) ; out . writeOptionalString ( preference ) ; out . writeStringArray ( types ) ; indicesOptions . writeIndicesOptions ( out ) ; } } 

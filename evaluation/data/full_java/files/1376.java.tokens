package org . apache . cassandra . cql3 . validation . entities ; import org . junit . Test ; import org . apache . cassandra . Util ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . db . Mutation ; import org . apache . cassandra . db . RowUpdateBuilder ; import org . apache . cassandra . utils . FBUtilities ; public class RowUpdateBuilderTest extends CQLTester { @Test public void testAddListEntryDurable ( ) throws Throwable { testAddListEntry ( false ) ; } @Test public void testAddListEntryTransient ( ) throws Throwable { testAddListEntry ( true ) ; } public void testAddListEntry ( boolean skipCommitLog ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> ) ; long timestamp = FBUtilities . timestampMicros ( ) ; Mutation mutation = new Mutation ( keyspace ( ) , Util . dk ( <str> ) ) ; addToMutation ( <str> , timestamp , mutation ) ; addToMutation ( <str> , timestamp , mutation ) ; if ( skipCommitLog ) mutation . applyUnsafe ( ) ; else mutation . apply ( ) ; assertRowCount ( execute ( <str> ) , <int> ) ; } private void addToMutation ( String typeName , long timestamp , Mutation mutation ) { RowUpdateBuilder adder = new RowUpdateBuilder ( getCurrentColumnFamilyStore ( ) . metadata , timestamp , mutation ) . clustering ( typeName ) ; for ( int i = <int> ; i < <int> ; i + + ) { adder . addListEntry ( <str> , i ) . addListEntry ( <str> , i ) ; } adder . build ( ) ; } } 

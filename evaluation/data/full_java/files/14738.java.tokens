package org . gradle . platform . base . internal ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . Action ; import org . gradle . api . DomainObjectSet ; import org . gradle . api . Task ; import org . gradle . api . UnknownDomainObjectException ; import org . gradle . api . internal . DefaultDomainObjectSet ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . project . taskfactory . ITaskFactory ; import org . gradle . platform . base . BinaryTasksCollection ; public class DefaultBinaryTasksCollection extends DefaultDomainObjectSet < Task > implements BinaryTasksCollection { private final BinarySpecInternal binary ; private final ITaskFactory taskFactory ; public DefaultBinaryTasksCollection ( BinarySpecInternal binarySpecInternal , ITaskFactory taskFactory ) { super ( Task . class ) ; this . binary = binarySpecInternal ; this . taskFactory = taskFactory ; } @Override public String taskName ( String verb ) { return verb + StringUtils . capitalize ( binary . getProjectScopedName ( ) ) ; } @Override public String taskName ( String verb , String object ) { return verb + StringUtils . capitalize ( binary . getProjectScopedName ( ) ) + StringUtils . capitalize ( object ) ; } public Task getBuild ( ) { return binary . getBuildTask ( ) ; } public < T extends Task > T findSingleTaskWithType ( Class < T > type ) { DomainObjectSet < T > tasks = withType ( type ) ; if ( tasks . size ( ) = = <int> ) { return null ; } if ( tasks . size ( ) > <int> ) { throw new UnknownDomainObjectException ( String . format ( <str> , type . getSimpleName ( ) ) ) ; } return tasks . iterator ( ) . next ( ) ; } @Override public < T extends Task > void create ( String name , Class < T > type , Action < ? super T > config ) { @SuppressWarnings ( <str> ) T task = ( T ) taskFactory . create ( name , ( Class < TaskInternal > ) type ) ; add ( task ) ; config . execute ( task ) ; } } 

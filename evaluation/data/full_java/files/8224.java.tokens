package org . elasticsearch . index . query ; import com . fasterxml . jackson . core . io . JsonStringEncoder ; import java . util . HashMap ; import java . util . Map ; public abstract class AbstractTermQueryTestCase < QB extends BaseTermQueryBuilder < QB > > extends AbstractQueryTestCase < QB > { @Override protected final QB doCreateTestQueryBuilder ( ) { String fieldName = null ; Object value ; switch ( randomIntBetween ( <int> , <int> ) ) { case <int> : if ( randomBoolean ( ) ) { fieldName = BOOLEAN_FIELD_NAME ; } value = randomBoolean ( ) ; break ; case <int> : if ( randomBoolean ( ) ) { fieldName = STRING_FIELD_NAME ; } if ( frequently ( ) ) { value = randomAsciiOfLengthBetween ( <int> , <int> ) ; } else { JsonStringEncoder encoder = JsonStringEncoder . getInstance ( ) ; value = new String ( encoder . quoteAsString ( randomUnicodeOfLength ( <int> ) ) ) ; } break ; case <int> : if ( randomBoolean ( ) ) { fieldName = INT_FIELD_NAME ; } value = randomInt ( <int> ) ; break ; case <int> : if ( randomBoolean ( ) ) { fieldName = DOUBLE_FIELD_NAME ; } value = randomDouble ( ) ; break ; default : throw new UnsupportedOperationException ( ) ; } if ( fieldName = = null ) { fieldName = randomAsciiOfLengthBetween ( <int> , <int> ) ; } return createQueryBuilder ( fieldName , value ) ; } protected abstract QB createQueryBuilder ( String fieldName , Object value ) ; public void testIllegalArguments ( ) throws QueryShardException { try { if ( randomBoolean ( ) ) { createQueryBuilder ( null , randomAsciiOfLengthBetween ( <int> , <int> ) ) ; } else { createQueryBuilder ( <str> , randomAsciiOfLengthBetween ( <int> , <int> ) ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { createQueryBuilder ( <str> , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } @Override protected Map < String , QB > getAlternateVersions ( ) { HashMap < String , QB > alternateVersions = new HashMap < > ( ) ; QB tempQuery = createTestQueryBuilder ( ) ; QB testQuery = createQueryBuilder ( tempQuery . fieldName ( ) , tempQuery . value ( ) ) ; boolean isString = testQuery . value ( ) instanceof String ; Object value ; if ( isString ) { JsonStringEncoder encoder = JsonStringEncoder . getInstance ( ) ; value = <str> + new String ( encoder . quoteAsString ( ( String ) testQuery . value ( ) ) ) + <str> ; } else { value = testQuery . value ( ) ; } String contentString = <str> + <str> + testQuery . getName ( ) + <str> + <str> + testQuery . fieldName ( ) + <str> + value + <str> + <str> + <str> ; alternateVersions . put ( contentString , testQuery ) ; return alternateVersions ; } } 

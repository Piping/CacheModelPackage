package org . gradle . internal . resource . transport ; import org . gradle . internal . resource . ExternalResource ; import org . gradle . internal . resource . local . LocalResource ; import org . gradle . internal . resource . metadata . ExternalResourceMetaData ; import org . gradle . internal . resource . transfer . * ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . * ; import java . net . URI ; import java . util . List ; public class DefaultExternalResourceRepository implements ExternalResourceRepository { private static final Logger LOGGER = LoggerFactory . getLogger ( DefaultExternalResourceRepository . class ) ; private final String name ; private final ExternalResourceAccessor accessor ; private final ExternalResourceUploader uploader ; private final ExternalResourceLister lister ; private final ExternalResourceAccessor loggingAccessor ; private final ExternalResourceUploader loggingUploader ; public DefaultExternalResourceRepository ( String name , ExternalResourceAccessor accessor , ExternalResourceUploader uploader , ExternalResourceLister lister , ExternalResourceAccessor loggingAccessor , ExternalResourceUploader loggingUploader ) { this . name = name ; this . accessor = accessor ; this . uploader = uploader ; this . lister = lister ; this . loggingAccessor = loggingAccessor ; this . loggingUploader = loggingUploader ; } @Override public ExternalResourceRepository withProgressLogging ( ) { if ( loggingAccessor = = accessor & & loggingUploader = = uploader ) { return this ; } return new DefaultExternalResourceRepository ( name , loggingAccessor , loggingUploader , lister , loggingAccessor , loggingUploader ) ; } public ExternalResource getResource ( URI source ) { ExternalResourceReadResponse response = accessor . openResource ( source ) ; return response = = null ? null : new DefaultExternalResource ( source , response ) ; } public ExternalResourceMetaData getResourceMetaData ( URI source ) { return accessor . getMetaData ( source ) ; } public void put ( LocalResource source , URI destination ) throws IOException { LOGGER . debug ( <str> , destination ) ; uploader . upload ( source , destination ) ; } public List < String > list ( URI parent ) { return lister . list ( parent ) ; } public String toString ( ) { return name ; } } 

package com . google . common . eventbus ; import com . google . common . collect . Lists ; import junit . framework . TestCase ; import java . util . List ; import java . util . concurrent . Executor ; public class AsyncEventBusTest extends TestCase { private static final String EVENT = <str> ; private FakeExecutor executor ; private AsyncEventBus bus ; @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; executor = new FakeExecutor ( ) ; bus = new AsyncEventBus ( executor ) ; } public void testBasicDistribution ( ) { StringCatcher catcher = new StringCatcher ( ) ; bus . register ( catcher ) ; bus . post ( EVENT ) ; List < String > events = catcher . getEvents ( ) ; assertTrue ( <str> , events . isEmpty ( ) ) ; List < Runnable > tasks = executor . getTasks ( ) ; assertEquals ( <str> , <int> , tasks . size ( ) ) ; tasks . get ( <int> ) . run ( ) ; assertEquals ( <str> , <int> , events . size ( ) ) ; assertEquals ( <str> , EVENT , events . get ( <int> ) ) ; } public static class FakeExecutor implements Executor { List < Runnable > tasks = Lists . newArrayList ( ) ; @Override public void execute ( Runnable task ) { tasks . add ( task ) ; } public List < Runnable > getTasks ( ) { return tasks ; } } } 

package org . gradle . internal . typeconversion ; import org . gradle . api . InvalidUserDataException ; import java . util . concurrent . TimeUnit ; import static org . gradle . internal . typeconversion . NormalizedTimeUnit . millis ; public class TimeUnitsParser { public NormalizedTimeUnit parseNotation ( CharSequence notation , int value ) { String candidate = notation . toString ( ) . toUpperCase ( ) ; if ( candidate . equals ( <str> ) ) { return millis ( value * <int> * <int> * <int> * <int> ) ; } else if ( candidate . equals ( <str> ) ) { return millis ( value * <int> * <int> * <int> ) ; } else if ( candidate . equals ( <str> ) ) { return millis ( value * <int> * <int> ) ; } try { return new NormalizedTimeUnit ( value , TimeUnit . valueOf ( candidate ) ) ; } catch ( Exception e ) { throw new InvalidUserDataException ( <str> + notation , e ) ; } } } 

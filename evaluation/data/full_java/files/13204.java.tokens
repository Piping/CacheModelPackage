package org . gradle . plugins . ide . internal . resolver ; import org . gradle . api . Project ; import org . gradle . api . artifacts . * ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . artifacts . component . ProjectComponentIdentifier ; import org . gradle . api . artifacts . result . DependencyResult ; import org . gradle . api . artifacts . result . ResolutionResult ; import org . gradle . api . artifacts . result . ResolvedComponentResult ; import org . gradle . api . artifacts . result . UnresolvedDependencyResult ; import org . gradle . api . specs . Spec ; import org . gradle . api . specs . Specs ; import org . gradle . plugins . ide . internal . resolver . model . IdeExtendedRepoFileDependency ; import org . gradle . plugins . ide . internal . resolver . model . IdeLocalFileDependency ; import org . gradle . plugins . ide . internal . resolver . model . IdeProjectDependency ; import org . gradle . plugins . ide . internal . resolver . model . UnresolvedIdeRepoFileDependency ; import org . gradle . util . CollectionUtils ; import java . io . File ; import java . util . ArrayList ; import java . util . LinkedHashSet ; import java . util . List ; import java . util . Set ; public class DefaultIdeDependencyResolver implements IdeDependencyResolver { public List < IdeProjectDependency > getIdeProjectDependencies ( Configuration configuration , Project project ) { ResolutionResult result = getIncomingResolutionResult ( configuration ) ; final Set < ResolvedComponentResult > projectComponents = CollectionUtils . filter ( result . getAllComponents ( ) , new Spec < ResolvedComponentResult > ( ) { @Override public boolean isSatisfiedBy ( ResolvedComponentResult element ) { return element . getId ( ) instanceof ProjectComponentIdentifier ; } } ) ; List < IdeProjectDependency > ideProjectDependencies = new ArrayList < IdeProjectDependency > ( ) ; for ( ResolvedComponentResult projectComponent : projectComponents ) { Project resolvedProject = project . project ( ( ( ProjectComponentIdentifier ) projectComponent . getId ( ) ) . getProjectPath ( ) ) ; if ( ! resolvedProject . equals ( project ) ) { ideProjectDependencies . add ( new IdeProjectDependency ( configuration , resolvedProject ) ) ; } } return ideProjectDependencies ; } public List < UnresolvedIdeRepoFileDependency > getUnresolvedIdeRepoFileDependencies ( Configuration configuration ) { List < ComponentSelector > componentSelectors = getUnresolvedComponentSelectors ( configuration ) ; List < UnresolvedIdeRepoFileDependency > unresolvedIdeRepoFileDependencies = new ArrayList < UnresolvedIdeRepoFileDependency > ( ) ; for ( ComponentSelector componentSelector : componentSelectors ) { UnresolvedIdeRepoFileDependency unresolvedIdeRepoFileDependency = new UnresolvedIdeRepoFileDependency ( configuration , new File ( unresolvedFileName ( componentSelector ) ) ) ; unresolvedIdeRepoFileDependencies . add ( unresolvedIdeRepoFileDependency ) ; } return unresolvedIdeRepoFileDependencies ; } private String unresolvedFileName ( ComponentSelector componentSelector ) { return <str> + componentSelector . getDisplayName ( ) . replaceAll ( <str> , <str> ) ; } public List < IdeExtendedRepoFileDependency > getIdeRepoFileDependencies ( Configuration configuration ) { ResolutionResult result = getIncomingResolutionResult ( configuration ) ; final Set < ResolvedComponentResult > resolvedRepoFileComponents = CollectionUtils . filter ( result . getAllComponents ( ) , new Spec < ResolvedComponentResult > ( ) { @Override public boolean isSatisfiedBy ( ResolvedComponentResult element ) { return element . getId ( ) instanceof ModuleComponentIdentifier ; } } ) ; Set < ModuleVersionIdentifier > mappedResolvedDependencies = mapResolvedDependencies ( resolvedRepoFileComponents ) ; Set < ResolvedArtifact > artifacts = getExternalArtifacts ( configuration ) ; List < IdeExtendedRepoFileDependency > externalDependencies = new ArrayList < IdeExtendedRepoFileDependency > ( ) ; for ( ResolvedArtifact artifact : artifacts ) { if ( mappedResolvedDependencies . contains ( artifact . getModuleVersion ( ) . getId ( ) ) ) { IdeExtendedRepoFileDependency ideRepoFileDependency = new IdeExtendedRepoFileDependency ( configuration , artifact . getFile ( ) ) ; ideRepoFileDependency . setId ( artifact . getModuleVersion ( ) . getId ( ) ) ; externalDependencies . add ( ideRepoFileDependency ) ; } } return externalDependencies ; } private Set < ModuleVersionIdentifier > mapResolvedDependencies ( Set < ResolvedComponentResult > components ) { Set < ModuleVersionIdentifier > mappedResolvedDependencies = new LinkedHashSet < ModuleVersionIdentifier > ( ) ; for ( ResolvedComponentResult component : components ) { mappedResolvedDependencies . add ( component . getModuleVersion ( ) ) ; } return mappedResolvedDependencies ; } public List < IdeLocalFileDependency > getIdeLocalFileDependencies ( Configuration configuration ) { List < SelfResolvingDependency > externalDependencies = new ArrayList < SelfResolvingDependency > ( ) ; findAllExternalDependencies ( externalDependencies , new ArrayList < Dependency > ( ) , configuration ) ; List < IdeLocalFileDependency > ideLocalFileDependencies = new ArrayList < IdeLocalFileDependency > ( ) ; for ( SelfResolvingDependency externalDependency : externalDependencies ) { Set < File > resolvedFiles = externalDependency . resolve ( ) ; for ( File resolvedFile : resolvedFiles ) { IdeLocalFileDependency ideLocalFileDependency = new IdeLocalFileDependency ( configuration , resolvedFile ) ; ideLocalFileDependencies . add ( ideLocalFileDependency ) ; } } return ideLocalFileDependencies ; } private List < SelfResolvingDependency > findAllExternalDependencies ( List < SelfResolvingDependency > externalDependencies , List < Dependency > visited , Configuration configuration ) { for ( Dependency dependency : configuration . getAllDependencies ( ) ) { if ( ! visited . contains ( dependency ) ) { visited . add ( dependency ) ; if ( dependency instanceof ProjectDependency ) { findAllExternalDependencies ( externalDependencies , visited , ( ( ProjectDependency ) dependency ) . getProjectConfiguration ( ) ) ; } else if ( dependency instanceof SelfResolvingDependency ) { externalDependencies . add ( ( SelfResolvingDependency ) dependency ) ; } } } return externalDependencies ; } private ResolutionResult getIncomingResolutionResult ( Configuration configuration ) { return configuration . getIncoming ( ) . getResolutionResult ( ) ; } private List < ComponentSelector > getUnresolvedComponentSelectors ( Configuration configuration ) { ResolutionResult result = getIncomingResolutionResult ( configuration ) ; List < UnresolvedDependencyResult > unresolvedDependencies = findAllUnresolvedDependencyResults ( result . getRoot ( ) . getDependencies ( ) ) ; List < ComponentSelector > componentSelectors = new ArrayList < ComponentSelector > ( ) ; for ( UnresolvedDependencyResult unresolvedDependencyResult : unresolvedDependencies ) { componentSelectors . add ( unresolvedDependencyResult . getAttempted ( ) ) ; } return componentSelectors ; } private List < UnresolvedDependencyResult > findAllUnresolvedDependencyResults ( Set < ? extends DependencyResult > dependencies ) { List < UnresolvedDependencyResult > unresolvedDependencyResults = new ArrayList < UnresolvedDependencyResult > ( ) ; for ( DependencyResult dependencyResult : dependencies ) { if ( dependencyResult instanceof UnresolvedDependencyResult ) { unresolvedDependencyResults . add ( ( UnresolvedDependencyResult ) dependencyResult ) ; } } return unresolvedDependencyResults ; } private Set < ResolvedArtifact > getExternalArtifacts ( Configuration configuration ) { return configuration . getResolvedConfiguration ( ) . getLenientConfiguration ( ) . getArtifacts ( Specs . SATISFIES_ALL ) ; } } 

package org . gradle . tooling . internal . consumer ; import org . gradle . internal . event . ListenerNotificationException ; import org . gradle . tooling . * ; import org . gradle . tooling . exceptions . UnsupportedBuildArgumentException ; import org . gradle . tooling . exceptions . UnsupportedOperationConfigurationException ; import org . gradle . tooling . internal . protocol . BuildExceptionVersion1 ; import org . gradle . tooling . internal . protocol . InternalBuildCancelledException ; import org . gradle . tooling . internal . protocol . ResultHandlerVersion1 ; import org . gradle . tooling . internal . protocol . exceptions . InternalUnsupportedBuildArgumentException ; import org . gradle . tooling . internal . protocol . test . InternalTestExecutionException ; import org . gradle . tooling . TestExecutionException ; abstract class ResultHandlerAdapter < T > implements ResultHandlerVersion1 < T > { private final ResultHandler < ? super T > handler ; ResultHandlerAdapter ( ResultHandler < ? super T > handler ) { this . handler = handler ; } public void onComplete ( T result ) { handler . onComplete ( result ) ; } public void onFailure ( Throwable failure ) { if ( failure instanceof InternalUnsupportedBuildArgumentException ) { handler . onFailure ( new UnsupportedBuildArgumentException ( connectionFailureMessage ( failure ) + <str> + failure . getMessage ( ) , failure ) ) ; } else if ( failure instanceof UnsupportedOperationConfigurationException ) { handler . onFailure ( new UnsupportedOperationConfigurationException ( connectionFailureMessage ( failure ) + <str> + failure . getMessage ( ) , failure . getCause ( ) ) ) ; } else if ( failure instanceof GradleConnectionException ) { handler . onFailure ( ( GradleConnectionException ) failure ) ; } else if ( failure instanceof InternalBuildCancelledException ) { handler . onFailure ( new BuildCancelledException ( connectionFailureMessage ( failure ) , failure . getCause ( ) ) ) ; } else if ( failure instanceof InternalTestExecutionException ) { handler . onFailure ( new TestExecutionException ( connectionFailureMessage ( failure ) , failure . getCause ( ) ) ) ; } else if ( failure instanceof BuildExceptionVersion1 ) { handler . onFailure ( new BuildException ( connectionFailureMessage ( failure ) , failure . getCause ( ) ) ) ; } else if ( failure instanceof ListenerNotificationException ) { handler . onFailure ( new ListenerFailedException ( connectionFailureMessage ( failure ) , ( ( ListenerNotificationException ) failure ) . getCauses ( ) ) ) ; } else { handler . onFailure ( new GradleConnectionException ( connectionFailureMessage ( failure ) , failure ) ) ; } } protected abstract String connectionFailureMessage ( Throwable failure ) ; } 

package org . elasticsearch . index . percolator ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class PercolateStats implements Streamable , ToXContent { private long percolateCount ; private long percolateTimeInMillis ; private long current ; private long memorySizeInBytes = - <int> ; private long numQueries ; public PercolateStats ( ) { } PercolateStats ( long percolateCount , long percolateTimeInMillis , long current , long memorySizeInBytes , long numQueries ) { this . percolateCount = percolateCount ; this . percolateTimeInMillis = percolateTimeInMillis ; this . current = current ; this . memorySizeInBytes = memorySizeInBytes ; this . numQueries = numQueries ; } public long getCount ( ) { return percolateCount ; } public long getTimeInMillis ( ) { return percolateTimeInMillis ; } public TimeValue getTime ( ) { return new TimeValue ( getTimeInMillis ( ) ) ; } public long getCurrent ( ) { return current ; } public long getNumQueries ( ) { return numQueries ; } public long getMemorySizeInBytes ( ) { return memorySizeInBytes ; } public ByteSizeValue getMemorySize ( ) { return new ByteSizeValue ( memorySizeInBytes ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . PERCOLATE ) ; builder . field ( Fields . TOTAL , percolateCount ) ; builder . timeValueField ( Fields . TIME_IN_MILLIS , Fields . TIME , percolateTimeInMillis ) ; builder . field ( Fields . CURRENT , current ) ; builder . field ( Fields . MEMORY_SIZE_IN_BYTES , memorySizeInBytes ) ; builder . field ( Fields . MEMORY_SIZE , getMemorySize ( ) ) ; builder . field ( Fields . QUERIES , getNumQueries ( ) ) ; builder . endObject ( ) ; return builder ; } public void add ( PercolateStats percolate ) { if ( percolate = = null ) { return ; } percolateCount + = percolate . getCount ( ) ; percolateTimeInMillis + = percolate . getTimeInMillis ( ) ; current + = percolate . getCurrent ( ) ; numQueries + = percolate . getNumQueries ( ) ; } static final class Fields { static final XContentBuilderString PERCOLATE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TIME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TIME_IN_MILLIS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CURRENT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MEMORY_SIZE_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MEMORY_SIZE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString QUERIES = new XContentBuilderString ( <str> ) ; } public static PercolateStats readPercolateStats ( StreamInput in ) throws IOException { PercolateStats stats = new PercolateStats ( ) ; stats . readFrom ( in ) ; return stats ; } @Override public void readFrom ( StreamInput in ) throws IOException { percolateCount = in . readVLong ( ) ; percolateTimeInMillis = in . readVLong ( ) ; current = in . readVLong ( ) ; numQueries = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVLong ( percolateCount ) ; out . writeVLong ( percolateTimeInMillis ) ; out . writeVLong ( current ) ; out . writeVLong ( numQueries ) ; } } 

package org . elasticsearch . transport . netty ; import org . elasticsearch . Version ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . bytes . ReleasablePagedBytesReference ; import org . elasticsearch . common . compress . CompressorFactory ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . ReleasableBytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . lease . Releasables ; import org . elasticsearch . common . netty . ReleaseChannelFutureListener ; import org . elasticsearch . transport . * ; import org . elasticsearch . transport . support . TransportStatus ; import org . jboss . netty . buffer . ChannelBuffer ; import org . jboss . netty . channel . Channel ; import org . jboss . netty . channel . ChannelFuture ; import java . io . IOException ; import java . io . NotSerializableException ; public class NettyTransportChannel implements TransportChannel { private final NettyTransport transport ; private final TransportServiceAdapter transportServiceAdapter ; private final Version version ; private final String action ; private final Channel channel ; private final long requestId ; private final String profileName ; public NettyTransportChannel ( NettyTransport transport , TransportServiceAdapter transportServiceAdapter , String action , Channel channel , long requestId , Version version , String profileName ) { this . transportServiceAdapter = transportServiceAdapter ; this . version = version ; this . transport = transport ; this . action = action ; this . channel = channel ; this . requestId = requestId ; this . profileName = profileName ; } @Override public String getProfileName ( ) { return profileName ; } @Override public String action ( ) { return this . action ; } @Override public void sendResponse ( TransportResponse response ) throws IOException { sendResponse ( response , TransportResponseOptions . EMPTY ) ; } @Override public void sendResponse ( TransportResponse response , TransportResponseOptions options ) throws IOException { if ( transport . compress ) { options = TransportResponseOptions . builder ( options ) . withCompress ( transport . compress ) . build ( ) ; } byte status = <int> ; status = TransportStatus . setResponse ( status ) ; ReleasableBytesStreamOutput bStream = new ReleasableBytesStreamOutput ( transport . bigArrays ) ; boolean addedReleaseListener = false ; try { bStream . skip ( NettyHeader . HEADER_SIZE ) ; StreamOutput stream = bStream ; if ( options . compress ( ) ) { status = TransportStatus . setCompress ( status ) ; stream = CompressorFactory . defaultCompressor ( ) . streamOutput ( stream ) ; } stream . setVersion ( version ) ; response . writeTo ( stream ) ; stream . close ( ) ; ReleasablePagedBytesReference bytes = bStream . bytes ( ) ; ChannelBuffer buffer = bytes . toChannelBuffer ( ) ; NettyHeader . writeHeader ( buffer , requestId , status , version ) ; ChannelFuture future = channel . write ( buffer ) ; ReleaseChannelFutureListener listener = new ReleaseChannelFutureListener ( bytes ) ; future . addListener ( listener ) ; addedReleaseListener = true ; transportServiceAdapter . onResponseSent ( requestId , action , response , options ) ; } finally { if ( ! addedReleaseListener ) { Releasables . close ( bStream . bytes ( ) ) ; } } } @Override public void sendResponse ( Throwable error ) throws IOException { BytesStreamOutput stream = new BytesStreamOutput ( ) ; stream . skip ( NettyHeader . HEADER_SIZE ) ; RemoteTransportException tx = new RemoteTransportException ( transport . nodeName ( ) , transport . wrapAddress ( channel . getLocalAddress ( ) ) , action , error ) ; stream . writeThrowable ( tx ) ; byte status = <int> ; status = TransportStatus . setResponse ( status ) ; status = TransportStatus . setError ( status ) ; BytesReference bytes = stream . bytes ( ) ; ChannelBuffer buffer = bytes . toChannelBuffer ( ) ; NettyHeader . writeHeader ( buffer , requestId , status , version ) ; channel . write ( buffer ) ; transportServiceAdapter . onResponseSent ( requestId , action , error ) ; } public Channel getChannel ( ) { return channel ; } } 

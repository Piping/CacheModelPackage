package org . gradle . logging . internal ; import org . gradle . api . logging . LogLevel ; import java . util . concurrent . atomic . AtomicReference ; public class TextStreamOutputEventListener implements OutputEventListener { private final OutputEventListener listener ; private AtomicReference < LogLevel > logLevel = new AtomicReference < LogLevel > ( LogLevel . LIFECYCLE ) ; public TextStreamOutputEventListener ( OutputEventListener listener ) { this . listener = listener ; } public void onOutput ( OutputEvent event ) { if ( event instanceof StyledTextOutputEvent ) { onTextEvent ( ( StyledTextOutputEvent ) event ) ; } else if ( event instanceof LogLevelChangeEvent ) { onLogLevelChange ( ( LogLevelChangeEvent ) event ) ; } else { throw new IllegalArgumentException ( ) ; } } private void onLogLevelChange ( LogLevelChangeEvent changeEvent ) { logLevel . set ( changeEvent . getNewLogLevel ( ) ) ; } private void onTextEvent ( StyledTextOutputEvent textOutputEvent ) { if ( textOutputEvent . getLogLevel ( ) ! = null ) { listener . onOutput ( textOutputEvent ) ; } else { listener . onOutput ( textOutputEvent . withLogLevel ( logLevel . get ( ) ) ) ; } } } 

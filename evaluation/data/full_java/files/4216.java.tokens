package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . Set ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationListener ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . swt . SWT ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Shell ; public class LaunchConfigurationPropertiesDialog extends LaunchConfigurationsDialog implements ILaunchConfigurationListener { private ILaunchConfiguration fLaunchConfiguration ; public LaunchConfigurationPropertiesDialog ( Shell shell , ILaunchConfiguration launchConfiguration , LaunchGroupExtension group ) { super ( shell , group ) ; fLaunchConfiguration = launchConfiguration ; DebugPlugin . getDefault ( ) . getLaunchManager ( ) . addLaunchConfigurationListener ( this ) ; } public LaunchConfigurationPropertiesDialog ( Shell shell , ILaunchConfiguration launchConfiguration , LaunchGroupExtension group , Set < String > reservednames ) { super ( shell , group ) ; fLaunchConfiguration = launchConfiguration ; DebugPlugin . getDefault ( ) . getLaunchManager ( ) . addLaunchConfigurationListener ( this ) ; fReservedNames = reservednames ; } protected ILaunchConfiguration getLaunchConfiguration ( ) { return fLaunchConfiguration ; } @Override protected void initializeBounds ( ) { super . initializeBounds ( ) ; resize ( ) ; } @Override protected void initializeContent ( ) { ILaunchConfiguration launchConfiguration = getLaunchConfiguration ( ) ; if ( shouldSetDefaultsOnOpen ( ) & & launchConfiguration instanceof ILaunchConfigurationWorkingCopy ) { ILaunchConfigurationWorkingCopy wc = ( ILaunchConfigurationWorkingCopy ) launchConfiguration ; doSetDefaults ( wc ) ; } getTabViewer ( ) . setInput ( launchConfiguration ) ; IStatus status = getInitialStatus ( ) ; if ( status ! = null ) { handleStatus ( status ) ; } } @Override public boolean close ( ) { if ( ! isSafeToClose ( ) ) { return false ; } DebugPlugin . getDefault ( ) . getLaunchManager ( ) . removeLaunchConfigurationListener ( this ) ; return super . close ( ) ; } @Override protected void addContent ( Composite dialogComp ) { GridData gd ; Composite topComp = new Composite ( dialogComp , SWT . NONE ) ; gd = new GridData ( GridData . FILL_BOTH ) ; topComp . setLayoutData ( gd ) ; GridLayout topLayout = new GridLayout ( ) ; topLayout . numColumns = <int> ; topLayout . marginHeight = <int> ; topLayout . marginWidth = <int> ; topComp . setLayout ( topLayout ) ; topComp . setFont ( dialogComp . getFont ( ) ) ; setTitle ( getTitleAreaTitle ( ) ) ; setMessage ( IInternalDebugCoreConstants . EMPTY_STRING ) ; setModeLabelState ( ) ; Composite editAreaComp = createLaunchConfigurationEditArea ( topComp ) ; gd = new GridData ( GridData . FILL_BOTH ) ; editAreaComp . setLayoutData ( gd ) ; editAreaComp . setFont ( dialogComp . getFont ( ) ) ; dialogComp . layout ( true ) ; applyDialogFont ( dialogComp ) ; } protected String getTitleAreaTitle ( ) { return LaunchConfigurationsMessages . LaunchConfigurationPropertiesDialog_Edit_launch_configuration_properties_1 ; } @Override protected void createButtonsForButtonBar ( Composite parent ) { createButton ( parent , IDialogConstants . OK_ID , IDialogConstants . OK_LABEL , true ) ; createButton ( parent , IDialogConstants . CANCEL_ID , IDialogConstants . CANCEL_LABEL , false ) ; } @Override protected String getShellTitle ( ) { return LaunchConfigurationsMessages . LaunchConfigurationPropertiesDialog_Properties_for__0__2 ; } @Override protected String getHelpContextId ( ) { return IDebugHelpContextIds . LAUNCH_CONFIGURATION_PROPERTIES_DIALOG ; } @Override public void updateButtons ( ) { getTabViewer ( ) . refresh ( ) ; getButton ( IDialogConstants . OK_ID ) . setEnabled ( getTabViewer ( ) . canSave ( ) ) ; } @Override protected void okPressed ( ) { getTabViewer ( ) . handleApplyPressed ( ) ; super . okPressed ( ) ; } @Override public int open ( ) { setOpenMode ( - <int> ) ; return super . open ( ) ; } @Override protected String getDialogSettingsSectionName ( ) { return IDebugUIConstants . PLUGIN_ID + <str> ; } @Override public void launchConfigurationAdded ( ILaunchConfiguration configuration ) { ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; if ( getLaunchConfiguration ( ) . equals ( manager . getMovedFrom ( configuration ) ) ) { fLaunchConfiguration = configuration ; getTabViewer ( ) . setInput ( getLaunchConfiguration ( ) ) ; } } @Override public void launchConfigurationChanged ( ILaunchConfiguration configuration ) { } @Override public void launchConfigurationRemoved ( ILaunchConfiguration configuration ) { } } 

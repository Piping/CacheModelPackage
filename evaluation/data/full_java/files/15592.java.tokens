package org . gradle . api . internal . tasks . testing . processors ; import org . gradle . api . Nullable ; import org . gradle . api . internal . tasks . testing . * ; import org . gradle . api . internal . tasks . testing . results . AttachParentTestResultProcessor ; import org . gradle . internal . TimeProvider ; public class TestMainAction implements Runnable { private final Runnable detector ; private final TestClassProcessor processor ; private final TestResultProcessor resultProcessor ; private final TimeProvider timeProvider ; private final Object testTaskOperationId ; private final Object rootTestSuiteId ; private final String displayName ; public TestMainAction ( Runnable detector , TestClassProcessor processor , TestResultProcessor resultProcessor , TimeProvider timeProvider , Object testTaskOperationId , Object rootTestSuiteId , String displayName ) { this . detector = detector ; this . processor = processor ; this . resultProcessor = new AttachParentTestResultProcessor ( resultProcessor ) ; this . timeProvider = timeProvider ; this . testTaskOperationId = testTaskOperationId ; this . rootTestSuiteId = rootTestSuiteId ; this . displayName = displayName ; } public void run ( ) { RootTestSuiteDescriptor suite = new RootTestSuiteDescriptor ( rootTestSuiteId , displayName , testTaskOperationId ) ; resultProcessor . started ( suite , new TestStartEvent ( timeProvider . getCurrentTime ( ) ) ) ; try { processor . startProcessing ( resultProcessor ) ; try { detector . run ( ) ; } finally { processor . stop ( ) ; } } finally { resultProcessor . completed ( suite . getId ( ) , new TestCompleteEvent ( timeProvider . getCurrentTime ( ) ) ) ; } } public static final class RootTestSuiteDescriptor extends DefaultTestSuiteDescriptor { private final Object testTaskOperationId ; private RootTestSuiteDescriptor ( Object id , String name , Object testTaskOperationId ) { super ( id , name ) ; this . testTaskOperationId = testTaskOperationId ; } @Nullable @Override public Object getOwnerBuildOperationId ( ) { return testTaskOperationId ; } @Override public String toString ( ) { return getName ( ) ; } } } 

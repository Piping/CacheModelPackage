package io . netty . handler . codec . socksx . v5 ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelHandlerContext ; import io . netty . handler . codec . DecoderException ; import io . netty . handler . codec . DecoderResult ; import io . netty . handler . codec . ReplayingDecoder ; import io . netty . handler . codec . socksx . SocksVersion ; import io . netty . handler . codec . socksx . v5 . Socks5InitialResponseDecoder . State ; import java . util . List ; public class Socks5InitialResponseDecoder extends ReplayingDecoder < State > { enum State { INIT , SUCCESS , FAILURE } public Socks5InitialResponseDecoder ( ) { super ( State . INIT ) ; } @Override protected void decode ( ChannelHandlerContext ctx , ByteBuf in , List < Object > out ) throws Exception { try { switch ( state ( ) ) { case INIT : { final byte version = in . readByte ( ) ; if ( version ! = SocksVersion . SOCKS5 . byteValue ( ) ) { throw new DecoderException ( <str> + version + <str> + SocksVersion . SOCKS5 . byteValue ( ) + <str> ) ; } final Socks5AuthMethod authMethod = Socks5AuthMethod . valueOf ( in . readByte ( ) ) ; out . add ( new DefaultSocks5InitialResponse ( authMethod ) ) ; checkpoint ( State . SUCCESS ) ; } case SUCCESS : { int readableBytes = actualReadableBytes ( ) ; if ( readableBytes > <int> ) { out . add ( in . readSlice ( readableBytes ) . retain ( ) ) ; } break ; } case FAILURE : { in . skipBytes ( actualReadableBytes ( ) ) ; break ; } } } catch ( Exception e ) { fail ( out , e ) ; } } private void fail ( List < Object > out , Throwable cause ) { if ( ! ( cause instanceof DecoderException ) ) { cause = new DecoderException ( cause ) ; } checkpoint ( State . FAILURE ) ; Socks5Message m = new DefaultSocks5InitialResponse ( Socks5AuthMethod . UNACCEPTED ) ; m . setDecoderResult ( DecoderResult . failure ( cause ) ) ; out . add ( m ) ; } } 

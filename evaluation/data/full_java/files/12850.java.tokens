package org . gradle . internal . resolve ; import org . gradle . api . GradleException ; import org . gradle . api . artifacts . component . ComponentArtifactIdentifier ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . internal . exceptions . Contextual ; import org . gradle . util . GUtil ; @Contextual public class ArtifactResolveException extends GradleException { public ArtifactResolveException ( String message ) { super ( message ) ; } public ArtifactResolveException ( String message , Throwable cause ) { super ( message , cause ) ; } public ArtifactResolveException ( ComponentIdentifier component , Throwable cause ) { super ( format ( component , <str> ) , cause ) ; } public ArtifactResolveException ( ComponentIdentifier component , String message ) { super ( format ( component , message ) ) ; } public ArtifactResolveException ( ComponentArtifactIdentifier artifact , Throwable cause ) { super ( format ( artifact , <str> ) , cause ) ; } public ArtifactResolveException ( ComponentArtifactIdentifier artifact , String message ) { super ( format ( artifact , message ) ) ; } private static String format ( ComponentArtifactIdentifier artifact , String message ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( <str> ) ; builder . append ( artifact . getDisplayName ( ) ) ; if ( GUtil . isTrue ( message ) ) { builder . append ( <str> ) ; builder . append ( message ) ; } return builder . toString ( ) ; } private static String format ( ComponentIdentifier component , String message ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( <str> ) ; builder . append ( component . getDisplayName ( ) ) ; if ( GUtil . isTrue ( message ) ) { builder . append ( <str> ) ; builder . append ( message ) ; } return builder . toString ( ) ; } } 

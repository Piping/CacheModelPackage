package org . apache . cassandra . cql3 . validation . miscellaneous ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; public class RoleSyntaxTest extends CQLTester { private final String NO_QUOTED_USERNAME = <str> + <str> ; @Test public void standardOptionsSyntaxTest ( ) throws Throwable { assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; } @Test public void customOptionsSyntaxTest ( ) throws Throwable { assertValidSyntax ( <str> ) ; assertInvalidSyntax ( <str> ) ; assertInvalidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertInvalidSyntax ( <str> ) ; assertInvalidSyntax ( <str> ) ; } @Test public void createSyntaxTest ( ) throws Throwable { assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertInvalidSyntax ( <str> , NO_QUOTED_USERNAME ) ; } @Test public void dropSyntaxTest ( ) throws Throwable { assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertInvalidSyntax ( <str> , NO_QUOTED_USERNAME ) ; } @Test public void alterSyntaxTest ( ) throws Throwable { assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertInvalidSyntax ( <str> , NO_QUOTED_USERNAME ) ; } @Test public void grantRevokePermissionsSyntaxTest ( ) throws Throwable { assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; } @Test public void listPermissionsSyntaxTest ( ) throws Throwable { assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; } @Test public void listRolesSyntaxTest ( ) throws Throwable { assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; assertValidSyntax ( <str> ) ; } } 

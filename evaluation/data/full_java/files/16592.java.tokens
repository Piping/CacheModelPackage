package org . junit . tests . experimental ; import static org . hamcrest . CoreMatchers . containsString ; import static org . hamcrest . CoreMatchers . is ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertSame ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; import static org . junit . Assume . assumeNoException ; import static org . junit . Assume . assumeNotNull ; import static org . junit . Assume . assumeThat ; import static org . junit . Assume . assumeTrue ; import static org . junit . experimental . results . PrintableResult . testResult ; import static org . junit . experimental . results . ResultMatchers . isSuccessful ; import java . util . ArrayList ; import java . util . List ; import org . junit . Assume ; import org . junit . AssumptionViolatedException ; import org . junit . Before ; import org . junit . BeforeClass ; import org . junit . Test ; import org . junit . runner . JUnitCore ; import org . junit . runner . Result ; import org . junit . runner . notification . Failure ; import org . junit . runner . notification . RunListener ; public class AssumptionTest { public static class HasFailingAssumption { @Test public void assumptionsFail ( ) { assumeThat ( <int> , is ( <int> ) ) ; fail ( ) ; } } @Test public void failedAssumptionsMeanPassing ( ) { Result result = JUnitCore . runClasses ( HasFailingAssumption . class ) ; assertThat ( result . getRunCount ( ) , is ( <int> ) ) ; assertThat ( result . getIgnoreCount ( ) , is ( <int> ) ) ; assertThat ( result . getFailureCount ( ) , is ( <int> ) ) ; } private static int assumptionFailures = <int> ; @Test public void failedAssumptionsCanBeDetectedByListeners ( ) { assumptionFailures = <int> ; JUnitCore core = new JUnitCore ( ) ; core . addListener ( new RunListener ( ) { @Override public void testAssumptionFailure ( Failure failure ) { assumptionFailures + + ; } } ) ; core . run ( HasFailingAssumption . class ) ; assertThat ( assumptionFailures , is ( <int> ) ) ; } public static class HasPassingAssumption { @Test public void assumptionsFail ( ) { assumeThat ( <int> , is ( <int> ) ) ; fail ( ) ; } } @Test public void passingAssumptionsScootThrough ( ) { Result result = JUnitCore . runClasses ( HasPassingAssumption . class ) ; assertThat ( result . getRunCount ( ) , is ( <int> ) ) ; assertThat ( result . getIgnoreCount ( ) , is ( <int> ) ) ; assertThat ( result . getFailureCount ( ) , is ( <int> ) ) ; } @Test ( expected = AssumptionViolatedException . class ) public void assumeThatWorks ( ) { assumeThat ( <int> , is ( <int> ) ) ; } @Test public void assumeThatPasses ( ) { assumeThat ( <int> , is ( <int> ) ) ; assertCompletesNormally ( ) ; } @Test public void assumeThatPassesOnStrings ( ) { assumeThat ( <str> , is ( <str> ) ) ; assertCompletesNormally ( ) ; } @Test ( expected = AssumptionViolatedException . class ) public void assumeNotNullThrowsException ( ) { Object [ ] objects = { <int> , <int> , null } ; assumeNotNull ( objects ) ; } @Test public void assumeNotNullPasses ( ) { Object [ ] objects = { <int> , <int> } ; assumeNotNull ( objects ) ; assertCompletesNormally ( ) ; } @Test public void assumeNotNullIncludesParameterList ( ) { try { Object [ ] objects = { <int> , <int> , null } ; assumeNotNull ( objects ) ; } catch ( AssumptionViolatedException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } catch ( Exception e ) { fail ( <str> ) ; } } @Test public void assumeNoExceptionThrows ( ) { final Throwable exception = new NullPointerException ( ) ; try { assumeNoException ( exception ) ; fail ( <str> ) ; } catch ( AssumptionViolatedException e ) { assertThat ( e . getCause ( ) , is ( exception ) ) ; } } private void assertCompletesNormally ( ) { } @Test ( expected = AssumptionViolatedException . class ) public void assumeTrueWorks ( ) { Assume . assumeTrue ( false ) ; } public static class HasFailingAssumeInBefore { @Before public void checkForSomethingThatIsntThere ( ) { assumeTrue ( false ) ; } @Test public void failing ( ) { fail ( ) ; } } @Test public void failingAssumptionInBeforePreventsTestRun ( ) { assertThat ( testResult ( HasFailingAssumeInBefore . class ) , isSuccessful ( ) ) ; } public static class HasFailingAssumeInBeforeClass { @BeforeClass public static void checkForSomethingThatIsntThere ( ) { assumeTrue ( false ) ; } @Test public void failing ( ) { fail ( ) ; } } @Test public void failingAssumptionInBeforeClassIgnoresClass ( ) { assertThat ( testResult ( HasFailingAssumeInBeforeClass . class ) , isSuccessful ( ) ) ; } public static class AssumptionFailureInConstructor { public AssumptionFailureInConstructor ( ) { assumeTrue ( false ) ; } @Test public void shouldFail ( ) { fail ( ) ; } } @Test public void failingAssumptionInConstructorIgnoresClass ( ) { assertThat ( testResult ( AssumptionFailureInConstructor . class ) , isSuccessful ( ) ) ; } @Test ( expected = IllegalArgumentException . class ) public void assumeWithExpectedException ( ) { assumeTrue ( false ) ; } final static String message = <str> ; final static Throwable e = new Throwable ( ) ; public static class HasAssumeWithMessage { @Test public void testMethod ( ) { assumeTrue ( message , false ) ; } } @Test public void assumptionsWithMessage ( ) { final List < Failure > failures = runAndGetAssumptionFailures ( HasAssumeWithMessage . class ) ; assertTrue ( failures . get ( <int> ) . getMessage ( ) . contains ( message ) ) ; } public static class HasAssumeWithMessageAndCause { @Test public void testMethod ( ) { assumeNoException ( message , e ) ; } } @Test public void assumptionsWithMessageAndCause ( ) { final List < Failure > failures = runAndGetAssumptionFailures ( HasAssumeWithMessageAndCause . class ) ; assertTrue ( failures . get ( <int> ) . getMessage ( ) . contains ( message ) ) ; assertSame ( failures . get ( <int> ) . getException ( ) . getCause ( ) , e ) ; } public static class HasFailingAssumptionWithMessage { @Test public void assumptionsFail ( ) { assumeThat ( message , <int> , is ( <int> ) ) ; fail ( ) ; } } @Test public void failedAssumptionsWithMessage ( ) { final List < Failure > failures = runAndGetAssumptionFailures ( HasFailingAssumptionWithMessage . class ) ; assertEquals ( failures . size ( ) , <int> ) ; assertTrue ( failures . get ( <int> ) . getMessage ( ) . contains ( message ) ) ; } private static List < Failure > runAndGetAssumptionFailures ( Class < ? > clazz ) { final List < Failure > failures = new ArrayList < Failure > ( ) ; final JUnitCore core = new JUnitCore ( ) ; core . addListener ( new RunListener ( ) { @Override public void testAssumptionFailure ( Failure failure ) { failures . add ( failure ) ; } } ) ; core . run ( clazz ) ; return failures ; } } 

package org . gradle . nativeplatform . platform . internal ; import java . util . Arrays ; import java . util . List ; import static java . util . Arrays . asList ; public class Architectures { public static final KnownArchitecture X86 = new KnownArchitecture ( <str> , <str> , <str> , <str> ) ; public static final KnownArchitecture X86_64 = new KnownArchitecture ( <str> , <str> , <str> , <str> ) ; public static final KnownArchitecture IA_64 = new KnownArchitecture ( <str> , <str> ) ; public static final KnownArchitecture ARM_V7 = new KnownArchitecture ( <str> , <str> , <str> , <str> ) ; private static final List < KnownArchitecture > KNOWN_ARCHITECTURES = asList ( X86 , X86_64 , IA_64 , ARM_V7 , new KnownArchitecture ( <str> , <str> ) , new KnownArchitecture ( <str> ) , new KnownArchitecture ( <str> ) , new KnownArchitecture ( <str> , <str> , <str> ) , new KnownArchitecture ( <str> , <str> , <str> ) ) ; public static ArchitectureInternal forInput ( String input ) { for ( KnownArchitecture knownArchitecture : KNOWN_ARCHITECTURES ) { if ( knownArchitecture . isAlias ( input . toLowerCase ( ) ) ) { return new DefaultArchitecture ( knownArchitecture . getCanonicalName ( ) ) ; } } return new DefaultArchitecture ( input ) ; } public static class KnownArchitecture { private final String canonicalName ; private final List < String > aliases ; public KnownArchitecture ( String canonicalName , String . . . aliases ) { this . canonicalName = canonicalName ; this . aliases = Arrays . asList ( aliases ) ; } public String getCanonicalName ( ) { return canonicalName ; } public boolean isAlias ( String input ) { return canonicalName . equals ( input ) | | aliases . contains ( input ) ; } } } 

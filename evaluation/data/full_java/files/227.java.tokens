package org . apache . cassandra . cql3 . selection ; import java . util . * ; import com . google . common . collect . Iterables ; import com . google . common . collect . Lists ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . cql3 . selection . Selector . Factory ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . exceptions . InvalidRequestException ; final class SelectorFactories implements Iterable < Selector . Factory > { private final List < Selector . Factory > factories ; private boolean containsWritetimeFactory ; private boolean containsTTLFactory ; private int numberOfAggregateFactories ; public static SelectorFactories createFactoriesAndCollectColumnDefinitions ( List < Selectable > selectables , CFMetaData cfm , List < ColumnDefinition > defs ) throws InvalidRequestException { return new SelectorFactories ( selectables , cfm , defs ) ; } private SelectorFactories ( List < Selectable > selectables , CFMetaData cfm , List < ColumnDefinition > defs ) throws InvalidRequestException { factories = new ArrayList < > ( selectables . size ( ) ) ; for ( Selectable selectable : selectables ) { Factory factory = selectable . newSelectorFactory ( cfm , defs ) ; containsWritetimeFactory | = factory . isWritetimeSelectorFactory ( ) ; containsTTLFactory | = factory . isTTLSelectorFactory ( ) ; if ( factory . isAggregateSelectorFactory ( ) ) + + numberOfAggregateFactories ; factories . add ( factory ) ; } } public Iterable < Function > getFunctions ( ) { Iterable < Function > functions = Collections . emptySet ( ) ; for ( Factory factory : factories ) if ( factory ! = null ) functions = Iterables . concat ( functions , factory . getFunctions ( ) ) ; return functions ; } public Selector . Factory get ( int i ) { return factories . get ( i ) ; } public void addSelectorForOrdering ( ColumnDefinition def , int index ) { factories . add ( SimpleSelector . newFactory ( def , index ) ) ; } public boolean doesAggregation ( ) { return numberOfAggregateFactories > <int> ; } public boolean containsWritetimeSelectorFactory ( ) { return containsWritetimeFactory ; } public boolean containsTTLSelectorFactory ( ) { return containsTTLFactory ; } public List < Selector > newInstances ( ) throws InvalidRequestException { List < Selector > selectors = new ArrayList < > ( factories . size ( ) ) ; for ( Selector . Factory factory : factories ) { selectors . add ( factory . newInstance ( ) ) ; } return selectors ; } public Iterator < Factory > iterator ( ) { return factories . iterator ( ) ; } public List < String > getColumnNames ( ) { return Lists . transform ( factories , new com . google . common . base . Function < Selector . Factory , String > ( ) { public String apply ( Selector . Factory factory ) { return factory . getColumnName ( ) ; } } ) ; } public List < AbstractType < ? > > getReturnTypes ( ) { return Lists . transform ( factories , new com . google . common . base . Function < Selector . Factory , AbstractType < ? > > ( ) { public AbstractType < ? > apply ( Selector . Factory factory ) { return factory . getReturnType ( ) ; } } ) ; } public int size ( ) { return factories . size ( ) ; } } 

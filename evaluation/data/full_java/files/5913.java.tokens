package org . elasticsearch . common . inject . spi ; import org . elasticsearch . common . inject . Binder ; import org . elasticsearch . common . inject . TypeLiteral ; import org . elasticsearch . common . inject . matcher . Matcher ; import java . util . Objects ; public final class TypeConverterBinding implements Element { private final Object source ; private final Matcher < ? super TypeLiteral < ? > > typeMatcher ; private final TypeConverter typeConverter ; TypeConverterBinding ( Object source , Matcher < ? super TypeLiteral < ? > > typeMatcher , TypeConverter typeConverter ) { this . source = Objects . requireNonNull ( source , <str> ) ; this . typeMatcher = Objects . requireNonNull ( typeMatcher , <str> ) ; this . typeConverter = Objects . requireNonNull ( typeConverter , <str> ) ; } @Override public Object getSource ( ) { return source ; } public Matcher < ? super TypeLiteral < ? > > getTypeMatcher ( ) { return typeMatcher ; } public TypeConverter getTypeConverter ( ) { return typeConverter ; } @Override public < T > T acceptVisitor ( ElementVisitor < T > visitor ) { return visitor . visit ( this ) ; } @Override public void applyTo ( Binder binder ) { binder . withSource ( getSource ( ) ) . convertToTypes ( typeMatcher , typeConverter ) ; } } 

package org . gradle . api . internal . artifacts . dsl ; import org . gradle . api . IllegalDependencyNotation ; import org . gradle . util . GUtil ; public class ParsedModuleStringNotation { private String group ; private String name ; private String version ; private String classifier ; private String artifactType ; public ParsedModuleStringNotation ( String moduleNotation , String artifactType ) { assignValuesFromModuleNotation ( moduleNotation ) ; this . artifactType = artifactType ; } private void assignValuesFromModuleNotation ( String moduleNotation ) { String [ ] moduleNotationParts = moduleNotation . split ( <str> ) ; if ( moduleNotationParts . length < <int> | | moduleNotationParts . length > <int> ) { throw new IllegalDependencyNotation ( <str> + moduleNotation + <str> ) ; } group = GUtil . elvis ( moduleNotationParts [ <int> ] , null ) ; name = moduleNotationParts [ <int> ] ; version = moduleNotationParts . length = = <int> ? null : moduleNotationParts [ <int> ] ; if ( moduleNotationParts . length = = <int> ) { classifier = moduleNotationParts [ <int> ] ; } } public String getGroup ( ) { return group ; } public String getName ( ) { return name ; } public String getVersion ( ) { return version ; } public String getClassifier ( ) { return classifier ; } public String getArtifactType ( ) { return artifactType ; } } 

package org . apache . cassandra . locator ; import java . io . IOException ; import java . net . InetAddress ; import java . util . * ; import org . junit . Test ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . service . StorageService ; import org . apache . cassandra . utils . FBUtilities ; import static org . junit . Assert . assertEquals ; public class DynamicEndpointSnitchTest { private static void setScores ( DynamicEndpointSnitch dsnitch , int rounds , List < InetAddress > hosts , Integer . . . scores ) throws InterruptedException { for ( int round = <int> ; round < rounds ; round + + ) { for ( int i = <int> ; i < hosts . size ( ) ; i + + ) dsnitch . receiveTiming ( hosts . get ( i ) , scores [ i ] ) ; } Thread . sleep ( <int> ) ; } @Test public void testSnitch ( ) throws InterruptedException , IOException , ConfigurationException { StorageService . instance . unsafeInitialize ( ) ; SimpleSnitch ss = new SimpleSnitch ( ) ; DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( ss , String . valueOf ( ss . hashCode ( ) ) ) ; InetAddress self = FBUtilities . getBroadcastAddress ( ) ; InetAddress host1 = InetAddress . getByName ( <str> ) ; InetAddress host2 = InetAddress . getByName ( <str> ) ; InetAddress host3 = InetAddress . getByName ( <str> ) ; List < InetAddress > hosts = Arrays . asList ( host1 , host2 , host3 ) ; setScores ( dsnitch , <int> , hosts , <int> , <int> , <int> ) ; List < InetAddress > order = Arrays . asList ( host1 , host2 , host3 ) ; assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; setScores ( dsnitch , <int> , hosts , <int> , <int> , <int> ) ; order = Arrays . asList ( host2 , host3 , host1 ) ; assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; setScores ( dsnitch , <int> , hosts , <int> , <int> , <int> ) ; order = Arrays . asList ( host3 , host1 , host2 ) ; assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; setScores ( dsnitch , <int> , hosts , <int> , <int> , <int> ) ; order = Arrays . asList ( host1 , host2 , host3 ) ; assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; setScores ( dsnitch , <int> , hosts , <int> , <int> , <int> ) ; order = Arrays . asList ( host1 , host2 , host3 ) ; assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; setScores ( dsnitch , <int> , hosts , <int> , <int> , <int> ) ; order = Arrays . asList ( host1 , host3 , host2 ) ; assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; } } 

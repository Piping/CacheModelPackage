package com . google . common . base ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableSet ; import com . google . common . testing . GcFinalization ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . ref . WeakReference ; import java . lang . reflect . Field ; import java . net . URLClassLoader ; import java . util . HashSet ; import java . util . Set ; @GwtCompatible ( emulated = true ) public class EnumsTest extends TestCase { private enum TestEnum { CHEETO , HONDA , POODLE , } private enum OtherEnum { } public void testGetIfPresent ( ) { assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . hasValue ( TestEnum . CHEETO ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . hasValue ( TestEnum . HONDA ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . hasValue ( TestEnum . POODLE ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . isPresent ( ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . isPresent ( ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . isPresent ( ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . hasValue ( TestEnum . CHEETO ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . hasValue ( TestEnum . HONDA ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . hasValue ( TestEnum . POODLE ) ; } public void testGetIfPresent_caseSensitive ( ) { assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . isAbsent ( ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . isAbsent ( ) ; assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . isAbsent ( ) ; } public void testGetIfPresent_whenNoMatchingConstant ( ) { assertThat ( Enums . getIfPresent ( TestEnum . class , <str> ) ) . isAbsent ( ) ; } @GwtIncompatible ( <str> ) public void testGetIfPresent_doesNotPreventClassUnloading ( ) throws Exception { WeakReference < ? > shadowLoaderReference = doTestClassUnloading ( ) ; GcFinalization . awaitClear ( shadowLoaderReference ) ; } @GwtIncompatible ( <str> ) private WeakReference < ? > doTestClassUnloading ( ) throws Exception { URLClassLoader myLoader = ( URLClassLoader ) getClass ( ) . getClassLoader ( ) ; URLClassLoader shadowLoader = new URLClassLoader ( myLoader . getURLs ( ) , null ) ; @SuppressWarnings ( <str> ) Class < TestEnum > shadowTestEnum = ( Class < TestEnum > ) Class . forName ( TestEnum . class . getName ( ) , false , shadowLoader ) ; assertNotSame ( shadowTestEnum , TestEnum . class ) ; Set < TestEnum > shadowConstants = new HashSet < TestEnum > ( ) ; for ( TestEnum constant : TestEnum . values ( ) ) { Optional < TestEnum > result = Enums . getIfPresent ( shadowTestEnum , constant . name ( ) ) ; assertThat ( result ) . isPresent ( ) ; shadowConstants . add ( result . get ( ) ) ; } assertEquals ( ImmutableSet . copyOf ( shadowTestEnum . getEnumConstants ( ) ) , shadowConstants ) ; Optional < TestEnum > result = Enums . getIfPresent ( shadowTestEnum , <str> ) ; assertThat ( result ) . isAbsent ( ) ; return new WeakReference < ClassLoader > ( shadowLoader ) ; } public void testStringConverter_convert ( ) { Converter < String , TestEnum > converter = Enums . stringConverter ( TestEnum . class ) ; assertEquals ( TestEnum . CHEETO , converter . convert ( <str> ) ) ; assertEquals ( TestEnum . HONDA , converter . convert ( <str> ) ) ; assertEquals ( TestEnum . POODLE , converter . convert ( <str> ) ) ; assertNull ( converter . convert ( null ) ) ; assertNull ( converter . reverse ( ) . convert ( null ) ) ; } public void testStringConverter_convertError ( ) { Converter < String , TestEnum > converter = Enums . stringConverter ( TestEnum . class ) ; try { converter . convert ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testStringConverter_reverse ( ) { Converter < String , TestEnum > converter = Enums . stringConverter ( TestEnum . class ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( TestEnum . CHEETO ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( TestEnum . HONDA ) ) ; assertEquals ( <str> , converter . reverse ( ) . convert ( TestEnum . POODLE ) ) ; } @GwtIncompatible ( <str> ) public void testStringConverter_nullPointerTester ( ) throws Exception { Converter < String , TestEnum > converter = Enums . stringConverter ( TestEnum . class ) ; NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicInstanceMethods ( converter ) ; } public void testStringConverter_nullConversions ( ) { Converter < String , TestEnum > converter = Enums . stringConverter ( TestEnum . class ) ; assertNull ( converter . convert ( null ) ) ; assertNull ( converter . reverse ( ) . convert ( null ) ) ; } @GwtIncompatible ( <str> ) public void testStringConverter_toString ( ) { assertEquals ( <str> , Enums . stringConverter ( TestEnum . class ) . toString ( ) ) ; } public void testStringConverter_serialization ( ) { SerializableTester . reserializeAndAssert ( Enums . stringConverter ( TestEnum . class ) ) ; } @GwtIncompatible ( <str> ) public void testNullPointerExceptions ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( Enums . class ) ; } @Retention ( RetentionPolicy . RUNTIME ) private @interface ExampleAnnotation { } private enum AnEnum { @ExampleAnnotation FOO , BAR } @GwtIncompatible ( <str> ) public void testGetField ( ) { Field foo = Enums . getField ( AnEnum . FOO ) ; assertEquals ( <str> , foo . getName ( ) ) ; assertTrue ( foo . isAnnotationPresent ( ExampleAnnotation . class ) ) ; Field bar = Enums . getField ( AnEnum . BAR ) ; assertEquals ( <str> , bar . getName ( ) ) ; assertFalse ( bar . isAnnotationPresent ( ExampleAnnotation . class ) ) ; } } 

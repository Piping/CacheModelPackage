package org . gradle . openapi . wrappers . foundation ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . openapi . external . foundation . GradleInterfaceVersion1 ; import org . gradle . openapi . external . foundation . ProjectVersion1 ; import org . gradle . openapi . external . foundation . RequestObserverVersion1 ; import org . gradle . openapi . external . ui . CommandLineArgumentAlteringListenerVersion1 ; import org . gradle . openapi . wrappers . ui . CommandLineArgumentAlteringListenerWrapper ; import org . gradle . util . GradleVersion ; import java . io . File ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class GradleInterfaceWrapperVersion1 implements GradleInterfaceVersion1 { protected GradlePluginLord gradlePluginLord ; private Map < CommandLineArgumentAlteringListenerVersion1 , CommandLineArgumentAlteringListenerWrapper > commandLineListenerMap = new HashMap < CommandLineArgumentAlteringListenerVersion1 , CommandLineArgumentAlteringListenerWrapper > ( ) ; private Map < RequestObserverVersion1 , RequestObserverWrapper > requestObserverMap = new HashMap < RequestObserverVersion1 , RequestObserverWrapper > ( ) ; public GradleInterfaceWrapperVersion1 ( GradlePluginLord gradlePluginLord ) { this . gradlePluginLord = gradlePluginLord ; } public String getVersion ( ) { return GradleVersion . current ( ) . getVersion ( ) ; } public List < ProjectVersion1 > getRootProjects ( ) { return ProjectWrapper . convertProjects ( gradlePluginLord . getProjects ( ) ) ; } public boolean isBusy ( ) { return gradlePluginLord . isBusy ( ) ; } public void refreshTaskTree ( ) { gradlePluginLord . addRefreshRequestToQueue ( ) ; } public void executeCommand ( String commandLineArguments , String displayName ) { gradlePluginLord . addExecutionRequestToQueue ( commandLineArguments , displayName ) ; } public File getCurrentDirectory ( ) { return gradlePluginLord . getCurrentDirectory ( ) ; } public void setCurrentDirectory ( File currentDirectory ) { gradlePluginLord . setCurrentDirectory ( currentDirectory ) ; } public File getGradleHomeDirectory ( ) { return gradlePluginLord . getGradleHomeDirectory ( ) ; } public File getCustomGradleExecutable ( ) { return gradlePluginLord . getCustomGradleExecutor ( ) ; } public void setCustomGradleExecutable ( File customGradleExecutor ) { gradlePluginLord . setCustomGradleExecutor ( customGradleExecutor ) ; } public void addCommandLineArgumentAlteringListener ( CommandLineArgumentAlteringListenerVersion1 listener ) { CommandLineArgumentAlteringListenerWrapper wrapper = new CommandLineArgumentAlteringListenerWrapper ( listener ) ; commandLineListenerMap . put ( listener , wrapper ) ; gradlePluginLord . addCommandLineArgumentAlteringListener ( wrapper ) ; } public void removeCommandLineArgumentAlteringListener ( CommandLineArgumentAlteringListenerVersion1 listener ) { CommandLineArgumentAlteringListenerWrapper wrapper = commandLineListenerMap . remove ( listener ) ; if ( wrapper ! = null ) { gradlePluginLord . removeCommandLineArgumentAlteringListener ( wrapper ) ; } } public void addRequestObserver ( RequestObserverVersion1 observer ) { RequestObserverWrapper wrapper = new RequestObserverWrapper ( observer ) ; requestObserverMap . put ( observer , wrapper ) ; gradlePluginLord . addRequestObserver ( wrapper , false ) ; } public void removeRequestObserver ( RequestObserverVersion1 observer ) { RequestObserverWrapper wrapper = requestObserverMap . remove ( observer ) ; if ( wrapper ! = null ) { gradlePluginLord . removeRequestObserver ( wrapper ) ; } } } 

package org . apache . cassandra . db ; import org . apache . cassandra . index . Index ; import org . apache . cassandra . utils . concurrent . OpOrder ; public class ReadExecutionController implements AutoCloseable { private final OpOrder . Group baseOp ; private final OpOrder . Group indexOp ; private final OpOrder . Group writeOp ; private ReadExecutionController ( OpOrder . Group baseOp , OpOrder . Group indexOp , OpOrder . Group writeOp ) { this . baseOp = baseOp ; this . indexOp = indexOp ; this . writeOp = writeOp ; } public OpOrder . Group baseReadOpOrderGroup ( ) { return baseOp ; } public OpOrder . Group indexReadOpOrderGroup ( ) { return indexOp ; } public OpOrder . Group writeOpOrderGroup ( ) { return writeOp ; } public static ReadExecutionController empty ( ) { return new ReadExecutionController ( null , null , null ) ; } public static ReadExecutionController forReadOp ( OpOrder . Group readOp ) { return new ReadExecutionController ( readOp , null , null ) ; } @SuppressWarnings ( <str> ) public static ReadExecutionController forCommand ( ReadCommand command ) { ColumnFamilyStore baseCfs = Keyspace . openAndGetStore ( command . metadata ( ) ) ; ColumnFamilyStore indexCfs = maybeGetIndexCfs ( baseCfs , command ) ; if ( indexCfs = = null ) { return new ReadExecutionController ( baseCfs . readOrdering . start ( ) , null , null ) ; } else { OpOrder . Group baseOp = null , indexOp = null , writeOp = null ; try { baseOp = baseCfs . readOrdering . start ( ) ; indexOp = indexCfs . readOrdering . start ( ) ; writeOp = Keyspace . writeOrder . start ( ) ; return new ReadExecutionController ( baseOp , indexOp , writeOp ) ; } catch ( RuntimeException e ) { assert writeOp = = null ; try { if ( baseOp ! = null ) baseOp . close ( ) ; } finally { if ( indexOp ! = null ) indexOp . close ( ) ; } throw e ; } } } private static ColumnFamilyStore maybeGetIndexCfs ( ColumnFamilyStore baseCfs , ReadCommand command ) { Index index = command . getIndex ( baseCfs ) ; return index = = null ? null : index . getBackingTable ( ) . orElse ( null ) ; } public void close ( ) { try { if ( baseOp ! = null ) baseOp . close ( ) ; } finally { if ( indexOp ! = null ) { try { indexOp . close ( ) ; } finally { writeOp . close ( ) ; } } } } } 

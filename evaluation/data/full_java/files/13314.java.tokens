package org . gradle . util ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . concurrent . CompositeStoppable ; import org . junit . rules . TestRule ; import org . junit . runner . Description ; import org . junit . runners . model . Statement ; import java . io . IOException ; import java . io . InputStream ; import java . io . PipedInputStream ; import java . io . PipedOutputStream ; public class RedirectStdIn implements TestRule { private PipedInputStream emulatedSystemIn = new PipedInputStream ( ) ; private PipedOutputStream stdinPipe ; @Override public Statement apply ( final Statement base , Description description ) { return new Statement ( ) { @Override public void evaluate ( ) throws Throwable { final InputStream originalStdIn = System . in ; initPipe ( ) ; System . setIn ( emulatedSystemIn ) ; try { base . evaluate ( ) ; } finally { System . setIn ( originalStdIn ) ; closePipe ( ) ; } } } ; } public PipedOutputStream getStdinPipe ( ) { initPipe ( ) ; return stdinPipe ; } private void initPipe ( ) { if ( stdinPipe = = null ) { emulatedSystemIn = new PipedInputStream ( ) ; try { stdinPipe = new PipedOutputStream ( emulatedSystemIn ) ; } catch ( IOException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } } public void resetStdinPipe ( ) { closePipe ( ) ; initPipe ( ) ; System . setIn ( emulatedSystemIn ) ; } private void closePipe ( ) { CompositeStoppable . stoppable ( stdinPipe , emulatedSystemIn ) . stop ( ) ; stdinPipe = null ; emulatedSystemIn = null ; } } 

package org . elasticsearch . snapshots ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; public class RestoreInfo implements ToXContent , Streamable { private String name ; private List < String > indices ; private int totalShards ; private int successfulShards ; RestoreInfo ( ) { } public RestoreInfo ( String name , List < String > indices , int totalShards , int successfulShards ) { this . name = name ; this . indices = indices ; this . totalShards = totalShards ; this . successfulShards = successfulShards ; } public String name ( ) { return name ; } public List < String > indices ( ) { return indices ; } public int totalShards ( ) { return totalShards ; } public int failedShards ( ) { return totalShards - successfulShards ; } public int successfulShards ( ) { return successfulShards ; } public RestStatus status ( ) { return RestStatus . OK ; } static final class Fields { static final XContentBuilderString SNAPSHOT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString INDICES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SHARDS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString FAILED = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SUCCESSFUL = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; builder . field ( Fields . SNAPSHOT , name ) ; builder . startArray ( Fields . INDICES ) ; for ( String index : indices ) { builder . value ( index ) ; } builder . endArray ( ) ; builder . startObject ( Fields . SHARDS ) ; builder . field ( Fields . TOTAL , totalShards ) ; builder . field ( Fields . FAILED , failedShards ( ) ) ; builder . field ( Fields . SUCCESSFUL , successfulShards ) ; builder . endObject ( ) ; builder . endObject ( ) ; return builder ; } @Override public void readFrom ( StreamInput in ) throws IOException { name = in . readString ( ) ; int size = in . readVInt ( ) ; List < String > indicesListBuilder = new ArrayList < > ( ) ; for ( int i = <int> ; i < size ; i + + ) { indicesListBuilder . add ( in . readString ( ) ) ; } indices = Collections . unmodifiableList ( indicesListBuilder ) ; totalShards = in . readVInt ( ) ; successfulShards = in . readVInt ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( name ) ; out . writeVInt ( indices . size ( ) ) ; for ( String index : indices ) { out . writeString ( index ) ; } out . writeVInt ( totalShards ) ; out . writeVInt ( successfulShards ) ; } public static RestoreInfo readRestoreInfo ( StreamInput in ) throws IOException { RestoreInfo snapshotInfo = new RestoreInfo ( ) ; snapshotInfo . readFrom ( in ) ; return snapshotInfo ; } public static RestoreInfo readOptionalRestoreInfo ( StreamInput in ) throws IOException { return in . readOptionalStreamable ( RestoreInfo : : new ) ; } } 

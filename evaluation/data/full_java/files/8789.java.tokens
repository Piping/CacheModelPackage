package org . elasticsearch . plan . a ; import org . antlr . v4 . runtime . tree . AbstractParseTreeVisitor ; class PlanAParserBaseVisitor < T > extends AbstractParseTreeVisitor < T > implements PlanAParserVisitor < T > { @Override public T visitSource ( PlanAParser . SourceContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitIf ( PlanAParser . IfContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitWhile ( PlanAParser . WhileContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitDo ( PlanAParser . DoContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitFor ( PlanAParser . ForContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitDecl ( PlanAParser . DeclContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitContinue ( PlanAParser . ContinueContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitBreak ( PlanAParser . BreakContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitReturn ( PlanAParser . ReturnContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitTry ( PlanAParser . TryContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitThrow ( PlanAParser . ThrowContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExpr ( PlanAParser . ExprContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitMultiple ( PlanAParser . MultipleContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitSingle ( PlanAParser . SingleContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitEmpty ( PlanAParser . EmptyContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitInitializer ( PlanAParser . InitializerContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitAfterthought ( PlanAParser . AfterthoughtContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitDeclaration ( PlanAParser . DeclarationContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitDecltype ( PlanAParser . DecltypeContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitDeclvar ( PlanAParser . DeclvarContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitComp ( PlanAParser . CompContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitBool ( PlanAParser . BoolContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitConditional ( PlanAParser . ConditionalContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitAssignment ( PlanAParser . AssignmentContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitFalse ( PlanAParser . FalseContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitNumeric ( PlanAParser . NumericContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitUnary ( PlanAParser . UnaryContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitPrecedence ( PlanAParser . PrecedenceContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitPreinc ( PlanAParser . PreincContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitPostinc ( PlanAParser . PostincContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitCast ( PlanAParser . CastContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExternal ( PlanAParser . ExternalContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitNull ( PlanAParser . NullContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitBinary ( PlanAParser . BinaryContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitChar ( PlanAParser . CharContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitTrue ( PlanAParser . TrueContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtstart ( PlanAParser . ExtstartContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtprec ( PlanAParser . ExtprecContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtcast ( PlanAParser . ExtcastContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtbrace ( PlanAParser . ExtbraceContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtdot ( PlanAParser . ExtdotContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExttype ( PlanAParser . ExttypeContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtcall ( PlanAParser . ExtcallContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtvar ( PlanAParser . ExtvarContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtfield ( PlanAParser . ExtfieldContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtnew ( PlanAParser . ExtnewContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitExtstring ( PlanAParser . ExtstringContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitArguments ( PlanAParser . ArgumentsContext ctx ) { return visitChildren ( ctx ) ; } @Override public T visitIncrement ( PlanAParser . IncrementContext ctx ) { return visitChildren ( ctx ) ; } } 

package org . nd4j . linalg . complex ; import org . junit . Ignore ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . complex . IComplexDouble ; import org . nd4j . linalg . api . complex . IComplexFloat ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import static org . junit . Assert . assertEquals ; @Ignore public class ComplexNumberTests extends BaseNd4jTest { public ComplexNumberTests ( Nd4jBackend backend ) { super ( backend ) ; } public ComplexNumberTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public ComplexNumberTests ( String name ) { super ( name ) ; } public ComplexNumberTests ( ) { } @Test public void testScalar ( ) { IComplexDouble test = Nd4j . createDouble ( <int> , <int> ) ; test . addi ( <int> ) ; assertEquals ( <int> , test . realComponent ( ) . doubleValue ( ) , <float> ) ; assertEquals ( <int> , test . imaginaryComponent ( ) , <float> ) ; test . subi ( <int> ) ; assertEquals ( <int> , test . realComponent ( ) . doubleValue ( ) , <float> ) ; assertEquals ( getFailureMessage ( ) , <int> , test . imaginaryComponent ( ) , <float> ) ; test . muli ( <int> ) ; assertEquals ( <int> , test . realComponent ( ) . doubleValue ( ) , <float> ) ; assertEquals ( <int> , test . imaginaryComponent ( ) , <float> ) ; test . divi ( <int> ) ; assertEquals ( <int> , test . realComponent ( ) . doubleValue ( ) , <float> ) ; assertEquals ( <int> , test . imaginaryComponent ( ) , <float> ) ; test . addi ( Nd4j . createDouble ( <int> , <int> ) ) ; assertEquals ( <int> , test . realComponent ( ) . doubleValue ( ) , <float> ) ; assertEquals ( <int> , test . imaginaryComponent ( ) , <float> ) ; test . rdivi ( <int> ) ; assertEquals ( <float> , test . realComponent ( ) . doubleValue ( ) , <float> ) ; assertEquals ( <float> , test . imaginaryComponent ( ) , <float> ) ; } @Test public void testScalarFloat ( ) { IComplexFloat test = Nd4j . createFloat ( <int> , <int> ) ; test . addi ( <int> ) ; assertEquals ( <int> , test . realComponent ( ) . floatValue ( ) , <float> ) ; assertEquals ( <int> , test . imaginaryComponent ( ) , <float> ) ; test . subi ( <int> ) ; assertEquals ( <int> , test . realComponent ( ) . floatValue ( ) , <float> ) ; assertEquals ( getFailureMessage ( ) , <int> , test . imaginaryComponent ( ) , <float> ) ; test . muli ( <int> ) ; assertEquals ( <int> , test . realComponent ( ) . floatValue ( ) , <float> ) ; assertEquals ( <int> , test . imaginaryComponent ( ) , <float> ) ; test . divi ( <int> ) ; assertEquals ( <int> , test . realComponent ( ) . floatValue ( ) , <float> ) ; assertEquals ( <int> , test . imaginaryComponent ( ) , <float> ) ; test . addi ( Nd4j . createDouble ( <int> , <int> ) ) ; assertEquals ( <int> , test . realComponent ( ) . floatValue ( ) , <float> ) ; assertEquals ( <int> , test . imaginaryComponent ( ) , <float> ) ; test . rdivi ( <int> ) ; assertEquals ( <float> , test . realComponent ( ) . floatValue ( ) , <float> ) ; assertEquals ( - <float> , test . imaginaryComponent ( ) , <float> ) ; } @Override public char ordering ( ) { return <str> ; } } 

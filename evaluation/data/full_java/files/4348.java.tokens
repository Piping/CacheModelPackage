package org . eclipse . debug . internal . ui . stringsubstitution ; import java . util . Iterator ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . text . ITextSelection ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ISelectionProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . IEditorSite ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchPartSite ; import org . eclipse . ui . IWorkbenchSite ; import org . eclipse . ui . IWorkbenchWindow ; public class SelectedResourceManager { private static SelectedResourceManager fgDefault ; public static SelectedResourceManager getDefault ( ) { if ( fgDefault = = null ) { fgDefault = new SelectedResourceManager ( ) ; } return fgDefault ; } public IStructuredSelection getCurrentSelection ( ) { if ( DebugUIPlugin . getStandardDisplay ( ) . getThread ( ) . equals ( Thread . currentThread ( ) ) ) { return getCurrentSelection0 ( ) ; } else { final IStructuredSelection [ ] selection = new IStructuredSelection [ <int> ] ; DebugUIPlugin . getStandardDisplay ( ) . syncExec ( new Runnable ( ) { @Override public void run ( ) { selection [ <int> ] = getCurrentSelection0 ( ) ; } } ) ; return selection [ <int> ] ; } } private IStructuredSelection getCurrentSelection0 ( ) { IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { IWorkbenchPage page = window . getActivePage ( ) ; if ( page ! = null ) { IWorkbenchPart part = page . getActivePart ( ) ; if ( part instanceof IEditorPart ) { return new StructuredSelection ( part ) ; } else if ( part ! = null ) { IWorkbenchSite site = part . getSite ( ) ; if ( site ! = null ) { ISelectionProvider provider = site . getSelectionProvider ( ) ; if ( provider ! = null ) { ISelection selection = provider . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { return ( IStructuredSelection ) provider . getSelection ( ) ; } } } } } } return StructuredSelection . EMPTY ; } public IResource getSelectedResource ( ) { if ( DebugUIPlugin . getStandardDisplay ( ) . getThread ( ) . equals ( Thread . currentThread ( ) ) ) { return getSelectedResource0 ( ) ; } else { final IResource [ ] resource = new IResource [ <int> ] ; DebugUIPlugin . getStandardDisplay ( ) . syncExec ( new Runnable ( ) { @Override public void run ( ) { resource [ <int> ] = getSelectedResource0 ( ) ; } } ) ; return resource [ <int> ] ; } } protected IResource getSelectedResource0 ( ) { IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; IResource resource = null ; if ( window ! = null ) { IWorkbenchPage page = window . getActivePage ( ) ; if ( page ! = null ) { IWorkbenchPart part = page . getActivePart ( ) ; if ( part instanceof IEditorPart ) { IEditorPart epart = ( IEditorPart ) part ; resource = epart . getEditorInput ( ) . getAdapter ( IResource . class ) ; } else if ( part ! = null ) { IWorkbenchPartSite site = part . getSite ( ) ; if ( site ! = null ) { ISelectionProvider provider = site . getSelectionProvider ( ) ; if ( provider ! = null ) { ISelection selection = provider . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; if ( ! ss . isEmpty ( ) ) { Iterator < ? > iterator = ss . iterator ( ) ; while ( iterator . hasNext ( ) & & resource = = null ) { Object next = iterator . next ( ) ; resource = Platform . getAdapterManager ( ) . getAdapter ( next , IResource . class ) ; } } } } } } } } return resource ; } public String getSelectedText ( ) { if ( DebugUIPlugin . getStandardDisplay ( ) . getThread ( ) . equals ( Thread . currentThread ( ) ) ) { return getSelectedText0 ( ) ; } else { final String [ ] text = new String [ <int> ] ; DebugUIPlugin . getStandardDisplay ( ) . syncExec ( new Runnable ( ) { @Override public void run ( ) { text [ <int> ] = getSelectedText0 ( ) ; } } ) ; return text [ <int> ] ; } } protected String getSelectedText0 ( ) { IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { IWorkbenchPage page = window . getActivePage ( ) ; if ( page ! = null ) { IEditorPart epart = page . getActiveEditor ( ) ; if ( epart ! = null ) { IEditorSite esite = epart . getEditorSite ( ) ; if ( esite ! = null ) { ISelectionProvider sprovider = esite . getSelectionProvider ( ) ; if ( sprovider ! = null ) { ISelection selection = sprovider . getSelection ( ) ; if ( selection instanceof ITextSelection ) { return ( ( ITextSelection ) selection ) . getText ( ) ; } } } } } } return null ; } public IWorkbenchWindow getActiveWindow ( ) { if ( DebugUIPlugin . getStandardDisplay ( ) . getThread ( ) . equals ( Thread . currentThread ( ) ) ) { return DebugUIPlugin . getActiveWorkbenchWindow ( ) ; } else { final IWorkbenchWindow [ ] window = new IWorkbenchWindow [ <int> ] ; DebugUIPlugin . getStandardDisplay ( ) . syncExec ( new Runnable ( ) { @Override public void run ( ) { window [ <int> ] = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; } } ) ; return window [ <int> ] ; } } } 

package org . gradle . internal . event ; import org . gradle . api . Action ; import org . gradle . messaging . dispatch . Dispatch ; import org . gradle . messaging . dispatch . MethodInvocation ; import org . gradle . messaging . dispatch . ProxyDispatchAdapter ; public class ListenerBroadcast < T > implements Dispatch < MethodInvocation > { private final ProxyDispatchAdapter < T > source ; private final BroadcastDispatch < T > broadcast ; private final Class < T > type ; public ListenerBroadcast ( Class < T > type ) { this . type = type ; broadcast = new BroadcastDispatch < T > ( type ) ; source = new ProxyDispatchAdapter < T > ( broadcast , type ) ; } public T getSource ( ) { return source . getSource ( ) ; } public Class < T > getType ( ) { return type ; } public boolean isEmpty ( ) { return broadcast . isEmpty ( ) ; } public void add ( T listener ) { broadcast . add ( listener ) ; } public void addAll ( Iterable < ? extends T > listeners ) { for ( T listener : listeners ) { broadcast . add ( listener ) ; } } public void add ( Dispatch < MethodInvocation > dispatch ) { broadcast . add ( dispatch ) ; } public void add ( String methodName , Action < ? > action ) { broadcast . add ( methodName , action ) ; } public void remove ( Object listener ) { broadcast . remove ( listener ) ; } public void removeAll ( Iterable < ? > listeners ) { for ( Object listener : listeners ) { remove ( listener ) ; } } public void removeAll ( ) { broadcast . removeAll ( ) ; } public void dispatch ( MethodInvocation event ) { broadcast . dispatch ( event ) ; } } 

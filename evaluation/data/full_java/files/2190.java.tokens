package org . nd4j . linalg . dataset . api . iterator ; import org . nd4j . linalg . dataset . DataSet ; import org . nd4j . linalg . dataset . api . DataSetPreProcessor ; public class SamplingDataSetIterator implements DataSetIterator { private static final long serialVersionUID = - <int> ; private DataSet sampleFrom ; private int batchSize ; private int totalNumberSamples ; private int numTimesSampled ; private boolean replace = false ; private DataSetPreProcessor preProcessor ; public SamplingDataSetIterator ( DataSet sampleFrom , int batchSize , int totalNumberSamples , boolean replace ) { super ( ) ; this . sampleFrom = sampleFrom ; this . batchSize = batchSize ; this . totalNumberSamples = totalNumberSamples ; this . replace = replace ; } public SamplingDataSetIterator ( DataSet sampleFrom , int batchSize , int totalNumberSamples ) { super ( ) ; this . sampleFrom = sampleFrom ; this . batchSize = batchSize ; this . totalNumberSamples = totalNumberSamples ; } @Override public boolean hasNext ( ) { return numTimesSampled < totalNumberSamples ; } @Override public DataSet next ( ) { DataSet ret = sampleFrom . sample ( batchSize , replace ) ; numTimesSampled + = batchSize ; return ret ; } @Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } @Override public int totalExamples ( ) { return totalNumberSamples * batchSize ; } @Override public int inputColumns ( ) { return sampleFrom . numInputs ( ) ; } @Override public int totalOutcomes ( ) { return sampleFrom . numOutcomes ( ) ; } @Override public void reset ( ) { numTimesSampled = <int> ; } @Override public int batch ( ) { return batchSize ; } @Override public int cursor ( ) { return numTimesSampled ; } @Override public int numExamples ( ) { return sampleFrom . numExamples ( ) ; } @Override public void setPreProcessor ( DataSetPreProcessor preProcessor ) { this . preProcessor = preProcessor ; } @Override public DataSet next ( int num ) { DataSet ret = sampleFrom . sample ( num ) ; numTimesSampled + + ; return ret ; } } 

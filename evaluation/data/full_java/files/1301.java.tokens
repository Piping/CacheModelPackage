package org . apache . cassandra . utils . vint ; import java . io . DataInput ; import java . io . DataOutput ; import java . io . IOException ; import net . nicoulaj . compilecommand . annotations . Inline ; public class VIntCoding { public static long readUnsignedVInt ( DataInput input ) throws IOException { int firstByte = input . readByte ( ) ; if ( firstByte > = <int> ) return firstByte ; int size = numberOfExtraBytesToRead ( firstByte ) ; long retval = firstByte & firstByteValueMask ( size ) ; for ( int ii = <int> ; ii < size ; ii + + ) { byte b = input . readByte ( ) ; retval < < = <int> ; retval | = b & <hex> ; } return retval ; } public static long readVInt ( DataInput input ) throws IOException { return decodeZigZag64 ( readUnsignedVInt ( input ) ) ; } public static int firstByteValueMask ( int extraBytesToRead ) { return <hex> > > extraBytesToRead ; } public static int encodeExtraBytesToRead ( int extraBytesToRead ) { return ~ firstByteValueMask ( extraBytesToRead ) ; } public static int numberOfExtraBytesToRead ( int firstByte ) { return Integer . numberOfLeadingZeros ( ~ firstByte ) - <int> ; } protected static final ThreadLocal < byte [ ] > encodingBuffer = new ThreadLocal < byte [ ] > ( ) { @Override public byte [ ] initialValue ( ) { return new byte [ <int> ] ; } } ; public static void writeUnsignedVInt ( long value , DataOutput output ) throws IOException { int size = VIntCoding . computeUnsignedVIntSize ( value ) ; if ( size = = <int> ) { output . write ( ( int ) value ) ; return ; } output . write ( VIntCoding . encodeVInt ( value , size ) , <int> , size ) ; } @Inline public static byte [ ] encodeVInt ( long value , int size ) { byte encodingSpace [ ] = encodingBuffer . get ( ) ; int extraBytes = size - <int> ; for ( int i = extraBytes ; i > = <int> ; - - i ) { encodingSpace [ i ] = ( byte ) value ; value > > = <int> ; } encodingSpace [ <int> ] | = VIntCoding . encodeExtraBytesToRead ( extraBytes ) ; return encodingSpace ; } public static void writeVInt ( long value , DataOutput output ) throws IOException { writeUnsignedVInt ( encodeZigZag64 ( value ) , output ) ; } public static long decodeZigZag64 ( final long n ) { return ( n > > > <int> ) ^ - ( n & <int> ) ; } public static long encodeZigZag64 ( final long n ) { return ( n < < <int> ) ^ ( n > > <int> ) ; } public static int computeVIntSize ( final long param ) { return computeUnsignedVIntSize ( encodeZigZag64 ( param ) ) ; } public static int computeUnsignedVIntSize ( final long value ) { int magnitude = Long . numberOfLeadingZeros ( value | <int> ) ; return <int> - ( ( magnitude - <int> ) / <int> ) ; } } 

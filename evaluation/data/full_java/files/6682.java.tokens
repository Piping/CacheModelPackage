package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class SpanWithinQueryParser implements QueryParser < SpanWithinQueryBuilder > { public static final ParseField BIG_FIELD = new ParseField ( <str> ) ; public static final ParseField LITTLE_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { SpanWithinQueryBuilder . NAME , Strings . toCamelCase ( SpanWithinQueryBuilder . NAME ) } ; } @Override public SpanWithinQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String queryName = null ; SpanQueryBuilder big = null ; SpanQueryBuilder little = null ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , BIG_FIELD ) ) { QueryBuilder query = parseContext . parseInnerQueryBuilder ( ) ; if ( query instanceof SpanQueryBuilder = = false ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } big = ( SpanQueryBuilder ) query ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , LITTLE_FIELD ) ) { QueryBuilder query = parseContext . parseInnerQueryBuilder ( ) ; if ( query instanceof SpanQueryBuilder = = false ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } little = ( SpanQueryBuilder ) query ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } if ( big = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } if ( little = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } SpanWithinQueryBuilder query = new SpanWithinQueryBuilder ( big , little ) ; query . boost ( boost ) . queryName ( queryName ) ; return query ; } @Override public SpanWithinQueryBuilder getBuilderPrototype ( ) { return SpanWithinQueryBuilder . PROTOTYPE ; } } 

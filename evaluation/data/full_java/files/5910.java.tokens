package org . elasticsearch . common . inject . spi ; import org . elasticsearch . common . inject . Binder ; import org . elasticsearch . common . inject . Scope ; import java . lang . annotation . Annotation ; import java . util . Objects ; public final class ScopeBinding implements Element { private final Object source ; private final Class < ? extends Annotation > annotationType ; private final Scope scope ; ScopeBinding ( Object source , Class < ? extends Annotation > annotationType , Scope scope ) { this . source = Objects . requireNonNull ( source , <str> ) ; this . annotationType = Objects . requireNonNull ( annotationType , <str> ) ; this . scope = Objects . requireNonNull ( scope , <str> ) ; } @Override public Object getSource ( ) { return source ; } public Class < ? extends Annotation > getAnnotationType ( ) { return annotationType ; } public Scope getScope ( ) { return scope ; } @Override public < T > T acceptVisitor ( ElementVisitor < T > visitor ) { return visitor . visit ( this ) ; } @Override public void applyTo ( Binder binder ) { binder . withSource ( getSource ( ) ) . bindScope ( annotationType , scope ) ; } } 

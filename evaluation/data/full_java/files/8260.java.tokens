package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . elasticsearch . script . MockScriptEngine ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import java . io . IOException ; import java . util . Collections ; import java . util . Map ; import static org . hamcrest . Matchers . instanceOf ; public class ScriptQueryBuilderTests extends AbstractQueryTestCase < ScriptQueryBuilder > { @Override protected ScriptQueryBuilder doCreateTestQueryBuilder ( ) { String script = <str> ; Map < String , Object > params = Collections . emptyMap ( ) ; return new ScriptQueryBuilder ( new Script ( script , ScriptType . INLINE , MockScriptEngine . NAME , params ) ) ; } @Override protected void doAssertLuceneQuery ( ScriptQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( ScriptQueryBuilder . ScriptQuery . class ) ) ; } public void testIllegalConstructorArg ( ) { try { new ScriptQueryBuilder ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; ScriptQueryBuilder parsed = ( ScriptQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <str> , parsed . script ( ) . getLang ( ) ) ; } } 

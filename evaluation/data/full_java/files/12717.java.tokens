package org . gradle . api . internal . artifacts . ivyservice . resolveengine . result ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; import org . gradle . api . internal . artifacts . ModuleVersionIdentifierSerializer ; import org . gradle . internal . resolve . ModuleVersionResolveException ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . Encoder ; import java . io . IOException ; import java . util . Map ; public class InternalDependencyResultSerializer { private final static byte SUCCESSFUL = <int> ; private final static byte FAILED = <int> ; private final ComponentSelectorSerializer componentSelectorSerializer = new ComponentSelectorSerializer ( ) ; private final ComponentSelectionReasonSerializer componentSelectionReasonSerializer = new ComponentSelectionReasonSerializer ( ) ; private final ModuleVersionIdentifierSerializer moduleVersionIdentifierSerializer = new ModuleVersionIdentifierSerializer ( ) ; public InternalDependencyResult read ( Decoder decoder , Map < ComponentSelector , ModuleVersionResolveException > failures ) throws IOException { ComponentSelector requested = componentSelectorSerializer . read ( decoder ) ; byte resultByte = decoder . readByte ( ) ; if ( resultByte = = SUCCESSFUL ) { ModuleVersionIdentifier selected = moduleVersionIdentifierSerializer . read ( decoder ) ; return new DefaultInternalDependencyResult ( requested , selected , null , null ) ; } else if ( resultByte = = FAILED ) { ComponentSelectionReason reason = componentSelectionReasonSerializer . read ( decoder ) ; ModuleVersionResolveException failure = failures . get ( requested ) ; return new DefaultInternalDependencyResult ( requested , null , reason , failure ) ; } else { throw new IllegalArgumentException ( <str> + resultByte ) ; } } public void write ( Encoder encoder , InternalDependencyResult value ) throws IOException { componentSelectorSerializer . write ( encoder , value . getRequested ( ) ) ; if ( value . getFailure ( ) = = null ) { encoder . writeByte ( SUCCESSFUL ) ; moduleVersionIdentifierSerializer . write ( encoder , value . getSelected ( ) ) ; } else { encoder . writeByte ( FAILED ) ; componentSelectionReasonSerializer . write ( encoder , value . getReason ( ) ) ; } } } 

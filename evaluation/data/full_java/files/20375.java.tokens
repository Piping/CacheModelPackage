package io . netty . channel . epoll ; import io . netty . buffer . ByteBufAllocator ; import io . netty . channel . ChannelOption ; import io . netty . channel . MessageSizeEstimator ; import io . netty . channel . RecvByteBufAllocator ; import io . netty . util . NetUtil ; import java . net . InetAddress ; import java . util . Map ; import static io . netty . channel . ChannelOption . SO_BACKLOG ; import static io . netty . channel . ChannelOption . SO_RCVBUF ; import static io . netty . channel . ChannelOption . SO_REUSEADDR ; import static io . netty . channel . epoll . EpollChannelOption . TCP_MD5SIG ; ; public class EpollServerChannelConfig extends EpollChannelConfig { protected final AbstractEpollChannel channel ; private volatile int backlog = NetUtil . SOMAXCONN ; private volatile int pendingFastOpenRequestsThreshold ; EpollServerChannelConfig ( AbstractEpollChannel channel ) { super ( channel ) ; this . channel = channel ; } @Override public Map < ChannelOption < ? > , Object > getOptions ( ) { return getOptions ( super . getOptions ( ) , SO_RCVBUF , SO_REUSEADDR , SO_BACKLOG , EpollChannelOption . TCP_FASTOPEN ) ; } @SuppressWarnings ( <str> ) @Override public < T > T getOption ( ChannelOption < T > option ) { if ( option = = SO_RCVBUF ) { return ( T ) Integer . valueOf ( getReceiveBufferSize ( ) ) ; } if ( option = = SO_REUSEADDR ) { return ( T ) Boolean . valueOf ( isReuseAddress ( ) ) ; } if ( option = = SO_BACKLOG ) { return ( T ) Integer . valueOf ( getBacklog ( ) ) ; } if ( option = = EpollChannelOption . TCP_FASTOPEN ) { return ( T ) Integer . valueOf ( getTcpFastopen ( ) ) ; } return super . getOption ( option ) ; } @Override public < T > boolean setOption ( ChannelOption < T > option , T value ) { validate ( option , value ) ; if ( option = = SO_RCVBUF ) { setReceiveBufferSize ( ( Integer ) value ) ; } else if ( option = = SO_REUSEADDR ) { setReuseAddress ( ( Boolean ) value ) ; } else if ( option = = SO_BACKLOG ) { setBacklog ( ( Integer ) value ) ; } else if ( option = = TCP_MD5SIG ) { @SuppressWarnings ( <str> ) final Map < InetAddress , byte [ ] > m = ( Map < InetAddress , byte [ ] > ) value ; ( ( EpollServerSocketChannel ) channel ) . setTcpMd5Sig ( m ) ; } else if ( option = = EpollChannelOption . TCP_FASTOPEN ) { setTcpFastopen ( ( Integer ) value ) ; } else { return super . setOption ( option , value ) ; } return true ; } public boolean isReuseAddress ( ) { return Native . isReuseAddress ( channel . fd ( ) . intValue ( ) ) = = <int> ; } public EpollServerChannelConfig setReuseAddress ( boolean reuseAddress ) { Native . setReuseAddress ( channel . fd ( ) . intValue ( ) , reuseAddress ? <int> : <int> ) ; return this ; } public int getReceiveBufferSize ( ) { return channel . fd ( ) . getReceiveBufferSize ( ) ; } public EpollServerChannelConfig setReceiveBufferSize ( int receiveBufferSize ) { channel . fd ( ) . setReceiveBufferSize ( receiveBufferSize ) ; return this ; } public int getBacklog ( ) { return backlog ; } public EpollServerChannelConfig setBacklog ( int backlog ) { if ( backlog < <int> ) { throw new IllegalArgumentException ( <str> + backlog ) ; } this . backlog = backlog ; return this ; } public int getTcpFastopen ( ) { return pendingFastOpenRequestsThreshold ; } public EpollServerChannelConfig setTcpFastopen ( int pendingFastOpenRequestsThreshold ) { if ( this . pendingFastOpenRequestsThreshold < <int> ) { throw new IllegalArgumentException ( <str> + pendingFastOpenRequestsThreshold ) ; } this . pendingFastOpenRequestsThreshold = pendingFastOpenRequestsThreshold ; return this ; } @Override public EpollServerChannelConfig setConnectTimeoutMillis ( int connectTimeoutMillis ) { super . setConnectTimeoutMillis ( connectTimeoutMillis ) ; return this ; } @Override @Deprecated public EpollServerChannelConfig setMaxMessagesPerRead ( int maxMessagesPerRead ) { super . setMaxMessagesPerRead ( maxMessagesPerRead ) ; return this ; } @Override public EpollServerChannelConfig setWriteSpinCount ( int writeSpinCount ) { super . setWriteSpinCount ( writeSpinCount ) ; return this ; } @Override public EpollServerChannelConfig setAllocator ( ByteBufAllocator allocator ) { super . setAllocator ( allocator ) ; return this ; } @Override public EpollServerChannelConfig setRecvByteBufAllocator ( RecvByteBufAllocator allocator ) { super . setRecvByteBufAllocator ( allocator ) ; return this ; } @Override public EpollServerChannelConfig setAutoRead ( boolean autoRead ) { super . setAutoRead ( autoRead ) ; return this ; } @Override public EpollServerChannelConfig setWriteBufferHighWaterMark ( int writeBufferHighWaterMark ) { super . setWriteBufferHighWaterMark ( writeBufferHighWaterMark ) ; return this ; } @Override public EpollServerChannelConfig setWriteBufferLowWaterMark ( int writeBufferLowWaterMark ) { super . setWriteBufferLowWaterMark ( writeBufferLowWaterMark ) ; return this ; } @Override public EpollServerChannelConfig setMessageSizeEstimator ( MessageSizeEstimator estimator ) { super . setMessageSizeEstimator ( estimator ) ; return this ; } @Override public EpollServerChannelConfig setEpollMode ( EpollMode mode ) { super . setEpollMode ( mode ) ; return this ; } } 

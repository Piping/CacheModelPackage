package org . gradle . nativeplatform . toolchain . internal . msvcpp ; import org . gradle . api . Transformer ; import org . gradle . internal . operations . BuildOperationProcessor ; import org . gradle . nativeplatform . toolchain . internal . * ; import java . io . File ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; class VisualCppNativeCompiler < T extends NativeCompileSpec > extends NativeCompiler < T > { VisualCppNativeCompiler ( BuildOperationProcessor buildOperationProcessor , CommandLineToolInvocationWorker commandLineToolInvocationWorker , CommandLineToolContext invocationContext , ArgsTransformer < T > argsTransformer , Transformer < T , T > specTransformer , String objectFileExtension , boolean useCommandFile ) { super ( buildOperationProcessor , commandLineToolInvocationWorker , invocationContext , argsTransformer , specTransformer , objectFileExtension , useCommandFile ) ; } @Override protected List < String > getOutputArgs ( File outputFile ) { return Collections . singletonList ( <str> + outputFile . getAbsolutePath ( ) ) ; } @Override protected void addOptionsFileArgs ( List < String > args , File tempDir ) { OptionsFileArgsWriter writer = new VisualCppOptionsFileArgsWriter ( tempDir ) ; writer . execute ( args ) ; } @Override protected List < String > getPCHArgs ( T spec ) { List < String > pchArgs = new ArrayList < String > ( ) ; if ( spec . getPreCompiledHeader ( ) ! = null & & spec . getPreCompiledHeaderObjectFile ( ) ! = null ) { String lastHeader = spec . getPreCompiledHeader ( ) ; pchArgs . add ( <str> . concat ( lastHeader ) ) ; pchArgs . add ( <str> . concat ( spec . getPreCompiledHeaderObjectFile ( ) . getAbsolutePath ( ) ) ) ; } return pchArgs ; } } 

package org . gradle . model . internal . manage . schema . extract ; import org . gradle . internal . Cast ; import org . gradle . internal . reflect . JavaMethod ; import org . gradle . internal . reflect . JavaReflectionUtil ; import org . objectweb . asm . ClassWriter ; import org . objectweb . asm . MethodVisitor ; import org . objectweb . asm . Opcodes ; public class AbstractProxyClassGenerator { private static final JavaMethod < ClassLoader , ? > DEFINE_CLASS_METHOD = JavaReflectionUtil . method ( ClassLoader . class , Class . class , <str> , String . class , byte [ ] . class , Integer . TYPE , Integer . TYPE ) ; protected static final String CONSTRUCTOR_NAME = <str> ; protected static final String STATIC_CONSTRUCTOR_NAME = <str> ; protected static final String CONCRETE_SIGNATURE = null ; protected static final String [ ] NO_EXCEPTIONS = new String [ <int> ] ; protected < T > Class < ? extends T > defineClass ( ClassWriter visitor , ClassLoader classLoader , String generatedTypeName ) { byte [ ] bytecode = visitor . toByteArray ( ) ; return Cast . uncheckedCast ( DEFINE_CLASS_METHOD . invoke ( classLoader , generatedTypeName , bytecode , <int> , bytecode . length ) ) ; } protected void putThisOnStack ( MethodVisitor methodVisitor ) { methodVisitor . visitVarInsn ( Opcodes . ALOAD , <int> ) ; } protected void finishVisitingMethod ( MethodVisitor methodVisitor ) { finishVisitingMethod ( methodVisitor , Opcodes . RETURN ) ; } protected void finishVisitingMethod ( MethodVisitor methodVisitor , int returnOpcode ) { methodVisitor . visitInsn ( returnOpcode ) ; methodVisitor . visitMaxs ( <int> , <int> ) ; methodVisitor . visitEnd ( ) ; } } 

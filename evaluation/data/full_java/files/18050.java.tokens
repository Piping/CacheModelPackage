package com . badlogic . gdx . graphics . g3d . particles . emitters ; import com . badlogic . gdx . graphics . g3d . particles . ParticleControllerComponent ; import com . badlogic . gdx . utils . Json ; import com . badlogic . gdx . utils . JsonValue ; public abstract class Emitter extends ParticleControllerComponent implements Json . Serializable { public int minParticleCount , maxParticleCount = <int> ; public float percent ; public Emitter ( Emitter regularEmitter ) { set ( regularEmitter ) ; } public Emitter ( ) { } @Override public void init ( ) { controller . particles . size = <int> ; } @Override public void end ( ) { controller . particles . size = <int> ; } public int getMinParticleCount ( ) { return minParticleCount ; } public void setMinParticleCount ( int minParticleCount ) { this . minParticleCount = minParticleCount ; } public int getMaxParticleCount ( ) { return maxParticleCount ; } public void setMaxParticleCount ( int maxParticleCount ) { this . maxParticleCount = maxParticleCount ; } public void setParticleCount ( int aMin , int aMax ) { setMinParticleCount ( aMin ) ; setMaxParticleCount ( aMax ) ; } public void set ( Emitter emitter ) { minParticleCount = emitter . minParticleCount ; maxParticleCount = emitter . maxParticleCount ; } @Override public void write ( Json json ) { json . writeValue ( <str> , minParticleCount ) ; json . writeValue ( <str> , maxParticleCount ) ; } @Override public void read ( Json json , JsonValue jsonData ) { minParticleCount = json . readValue ( <str> , int . class , jsonData ) ; maxParticleCount = json . readValue ( <str> , int . class , jsonData ) ; } } 

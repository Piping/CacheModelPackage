package org . elasticsearch . timestamp ; import org . elasticsearch . action . admin . indices . mapping . get . GetMappingsResponse ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingResponse ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Locale ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; import static org . hamcrest . Matchers . notNullValue ; public class SimpleTimestampIT extends ESIntegTestCase { public void testSimpleTimestamp ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; long now1 = System . currentTimeMillis ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; long now2 = System . currentTimeMillis ( ) ; GetResponse getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( true ) . execute ( ) . actionGet ( ) ; long timestamp = ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; assertThat ( timestamp , greaterThanOrEqualTo ( now1 ) ) ; assertThat ( timestamp , lessThanOrEqualTo ( now2 ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( true ) . execute ( ) . actionGet ( ) ; assertThat ( ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) , equalTo ( timestamp ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; timestamp = ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; assertThat ( timestamp , greaterThanOrEqualTo ( now1 ) ) ; assertThat ( timestamp , lessThanOrEqualTo ( now2 ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; assertThat ( ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) , equalTo ( timestamp ) ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setTimestamp ( <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; timestamp = ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; assertThat ( timestamp , equalTo ( <int> ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; assertThat ( ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) , equalTo ( timestamp ) ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setTimestamp ( <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; timestamp = ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) ; assertThat ( timestamp , equalTo ( <int> ) ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . setRealtime ( false ) . execute ( ) . actionGet ( ) ; assertThat ( ( ( Number ) getResponse . getField ( <str> ) . getValue ( ) ) . longValue ( ) , equalTo ( timestamp ) ) ; } public void testThatUpdatingMappingShouldNotRemoveTimestampConfiguration ( ) throws Exception { String index = <str> ; String type = <str> ; XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( index ) . addMapping ( type , builder ) ) ; assertTimestampMappingEnabled ( index , type , true ) ; XContentBuilder updateMappingBuilder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( index ) . setType ( type ) . setSource ( updateMappingBuilder ) . get ( ) ; assertAcked ( putMappingResponse ) ; assertTimestampMappingEnabled ( index , type , true ) ; } public void testThatTimestampCanBeSwitchedOnAndOff ( ) throws Exception { String index = <str> ; String type = <str> ; XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( index ) . addMapping ( type , builder ) ) ; assertTimestampMappingEnabled ( index , type , true ) ; XContentBuilder updateMappingBuilder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) ; PutMappingResponse putMappingResponse = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( index ) . setType ( type ) . setSource ( updateMappingBuilder ) . get ( ) ; assertAcked ( putMappingResponse ) ; assertTimestampMappingEnabled ( index , type , false ) ; } private void assertTimestampMappingEnabled ( String index , String type , boolean enabled ) { GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( index ) . addTypes ( type ) . get ( ) ; MappingMetaData . Timestamp timestamp = getMappingsResponse . getMappings ( ) . get ( index ) . get ( type ) . timestamp ( ) ; assertThat ( timestamp , is ( notNullValue ( ) ) ) ; String errMsg = String . format ( Locale . ROOT , <str> + ( enabled ? <str> : <str> ) + <str> , index , type ) ; assertThat ( errMsg , timestamp . enabled ( ) , is ( enabled ) ) ; } } 

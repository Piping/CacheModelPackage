package org . gradle . api . internal . artifacts ; import org . gradle . api . artifacts . ResolvedArtifact ; import org . gradle . api . artifacts . ResolvedModuleVersion ; import org . gradle . api . artifacts . component . ComponentArtifactIdentifier ; import org . gradle . internal . Factory ; import org . gradle . internal . component . model . IvyArtifactName ; import java . io . File ; public class DefaultResolvedArtifact implements ResolvedArtifact { private final ResolvedModuleVersion owner ; private final IvyArtifactName artifact ; private final ComponentArtifactIdentifier artifactId ; private Factory < File > artifactSource ; private File file ; public DefaultResolvedArtifact ( ResolvedModuleVersion owner , IvyArtifactName artifact , ComponentArtifactIdentifier artifactId , Factory < File > artifactSource ) { this . owner = owner ; this . artifact = artifact ; this . artifactId = artifactId ; this . artifactSource = artifactSource ; } public ResolvedModuleVersion getModuleVersion ( ) { return owner ; } @Override public ComponentArtifactIdentifier getId ( ) { return artifactId ; } @Override public String toString ( ) { return String . format ( <str> , owner , getName ( ) , getClassifier ( ) , getExtension ( ) , getType ( ) ) ; } @Override public boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } if ( obj = = null | | obj . getClass ( ) ! = getClass ( ) ) { return false ; } DefaultResolvedArtifact other = ( DefaultResolvedArtifact ) obj ; return other . owner . getId ( ) . equals ( owner . getId ( ) ) & & other . artifactId . equals ( artifactId ) ; } @Override public int hashCode ( ) { return owner . getId ( ) . hashCode ( ) ^ artifactId . hashCode ( ) ; } public String getName ( ) { return artifact . getName ( ) ; } public String getType ( ) { return artifact . getType ( ) ; } public String getExtension ( ) { return artifact . getExtension ( ) ; } public String getClassifier ( ) { return artifact . getClassifier ( ) ; } public File getFile ( ) { if ( file = = null ) { file = artifactSource . create ( ) ; artifactSource = null ; } return file ; } } 

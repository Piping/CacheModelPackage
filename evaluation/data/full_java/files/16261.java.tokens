package org . gradle . gradleplugin . userinterface . swing . generic . tabs ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . favorites . FavoriteTask ; import org . gradle . gradleplugin . foundation . favorites . FavoritesEditor ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . userinterface . swing . generic . SwingEditFavoriteInteraction ; import org . gradle . gradleplugin . userinterface . swing . generic . SwingExportInteraction ; import org . gradle . gradleplugin . userinterface . swing . generic . SwingImportInteraction ; import org . gradle . gradleplugin . userinterface . swing . generic . Utility ; import javax . swing . * ; import javax . swing . event . ListSelectionEvent ; import javax . swing . event . ListSelectionListener ; import java . awt . * ; import java . awt . event . * ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; public class FavoriteTasksTab implements GradleTab , GradlePluginLord . GeneralPluginObserver , FavoritesEditor . FavoriteTasksObserver { private GradlePluginLord gradlePluginLord ; private FavoritesEditor favoritesEditor ; private SettingsNode settingsNode ; private JPanel mainPanel ; private DefaultListModel model ; private JList list ; private JPopupMenu popupMenu ; private JMenuItem executeMenuItem ; private JMenuItem editMenuItem ; private JMenuItem removeFavoritesMenuItem ; private JMenuItem copyFavoritesMenuItem ; private JButton executeButton ; private JButton addButton ; private JButton editButton ; private JButton removeButton ; private JButton moveUpButton ; private JButton moveDownButton ; private JButton importButton ; private JButton exportButton ; public FavoriteTasksTab ( GradlePluginLord gradlePluginLord , SettingsNode settingsNode ) { this . gradlePluginLord = gradlePluginLord ; this . settingsNode = settingsNode ; this . favoritesEditor = gradlePluginLord . getFavoritesEditor ( ) ; gradlePluginLord . addGeneralPluginObserver ( this , true ) ; favoritesEditor . addFavoriteTasksObserver ( this , true ) ; favoritesEditor . serializeIn ( settingsNode ) ; } public String getName ( ) { return <str> ; } public Component createComponent ( ) { setupUI ( ) ; enableThingsAppropriately ( ) ; return mainPanel ; } public void aboutToShow ( ) { populate ( ) ; } private void setupUI ( ) { mainPanel = new JPanel ( new BorderLayout ( ) ) ; mainPanel . add ( createButtonPanel ( ) , BorderLayout . NORTH ) ; mainPanel . add ( createListPanel ( ) , BorderLayout . CENTER ) ; setupPopupMenu ( ) ; } private Component createButtonPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . X_AXIS ) ) ; executeButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { executeSelectedTasks ( ) ; } } ) ; addButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { addTask ( ) ; } } ) ; editButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { editTask ( ) ; } } ) ; removeButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { removeSelectedFavorites ( ) ; } } ) ; moveUpButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { favoritesEditor . moveFavoritesBefore ( getSelectedFavoriteTasks ( ) ) ; } } ) ; moveDownButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { favoritesEditor . moveFavoritesAfter ( getSelectedFavoriteTasks ( ) ) ; } } ) ; importButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { importFavorites ( ) ; } } ) ; exportButton = Utility . createButton ( getClass ( ) , <str> , <str> , new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { exportFavorites ( ) ; } } ) ; panel . add ( executeButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( addButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( editButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( removeButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( moveUpButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( moveDownButton ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . add ( importButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( exportButton ) ; panel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; return panel ; } private Component createListPanel ( ) { model = new DefaultListModel ( ) ; list = new JList ( model ) ; list . addMouseListener ( new MouseAdapter ( ) { public void mouseClicked ( MouseEvent e ) { if ( e . getClickCount ( ) = = <int> ) { executeSelectedTasks ( ) ; } else if ( e . getButton ( ) = = MouseEvent . BUTTON3 ) { handleRightClick ( e ) ; } } } ) ; list . addListSelectionListener ( new ListSelectionListener ( ) { public void valueChanged ( ListSelectionEvent e ) { if ( ! e . getValueIsAdjusting ( ) ) { enableThingsAppropriately ( ) ; } } } ) ; list . registerKeyboardAction ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { executeSelectedTasks ( ) ; } } , KeyStroke . getKeyStroke ( KeyEvent . VK_ENTER , <int> ) , JComponent . WHEN_IN_FOCUSED_WINDOW ) ; return new JScrollPane ( list ) ; } private void populate ( ) { model . clear ( ) ; Iterator < FavoriteTask > taskIterator = favoritesEditor . getFavoriteTasks ( ) . iterator ( ) ; while ( taskIterator . hasNext ( ) ) { FavoriteTask favoriteTask = taskIterator . next ( ) ; model . addElement ( favoriteTask ) ; } } private void handleRightClick ( MouseEvent e ) { Point point = e . getPoint ( ) ; int index = list . locationToIndex ( point ) ; if ( index ! = - <int> ) { if ( ! list . isSelectedIndex ( index ) ) { if ( Utility . isCTRLDown ( e . getModifiersEx ( ) ) ) { list . addSelectionInterval ( index , index ) ; } else { list . setSelectedIndex ( index ) ; } } } enableThingsAppropriately ( ) ; popupMenu . show ( list , point . x , point . y ) ; } public void startingProjectsAndTasksReload ( ) { } public void projectsAndTasksReloaded ( boolean wasSuccessful ) { list . repaint ( ) ; enableThingsAppropriately ( ) ; } public void favoritesChanged ( ) { populate ( ) ; favoritesEditor . serializeOut ( settingsNode ) ; } public void favoritesReordered ( List < FavoriteTask > favoritesReordered ) { Object [ ] previouslySelectedObjects = list . getSelectedValues ( ) ; populate ( ) ; list . clearSelection ( ) ; if ( previouslySelectedObjects ! = null ) { for ( int index = <int> ; index < previouslySelectedObjects . length ; index + + ) { Object previouslySelectedObject = previouslySelectedObjects [ index ] ; int listIndex = model . indexOf ( previouslySelectedObject ) ; if ( listIndex ! = - <int> ) { list . addSelectionInterval ( listIndex , listIndex ) ; } } } favoritesEditor . serializeOut ( settingsNode ) ; } private void setupPopupMenu ( ) { popupMenu = new JPopupMenu ( ) ; executeMenuItem = Utility . createMenuItem ( this . getClass ( ) , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { executeSelectedTasks ( ) ; } } ) ; popupMenu . add ( executeMenuItem ) ; editMenuItem = Utility . createMenuItem ( this . getClass ( ) , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { editTask ( ) ; } } ) ; popupMenu . add ( editMenuItem ) ; copyFavoritesMenuItem = Utility . createMenuItem ( this . getClass ( ) , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { duplicateTasks ( ) ; } } ) ; popupMenu . add ( copyFavoritesMenuItem ) ; removeFavoritesMenuItem = Utility . createMenuItem ( this . getClass ( ) , <str> , <str> , new AbstractAction ( ) { public void actionPerformed ( ActionEvent e ) { removeSelectedFavorites ( ) ; } } ) ; popupMenu . add ( removeFavoritesMenuItem ) ; } private void executeSelectedTasks ( ) { List < FavoriteTask > favorites = getSelectedFavoriteTasks ( ) ; gradlePluginLord . addExecutionRequestToQueue ( favorites ) ; } private void removeSelectedFavorites ( ) { List < FavoriteTask > favorites = getSelectedFavoriteTasks ( ) ; favoritesEditor . removeFavorites ( favorites ) ; } private List < FavoriteTask > getSelectedFavoriteTasks ( ) { Object [ ] objects = list . getSelectedValues ( ) ; if ( objects = = null ) { return Collections . emptyList ( ) ; } List < FavoriteTask > favorites = new ArrayList < FavoriteTask > ( ) ; for ( int index = <int> ; index < objects . length ; index + + ) { favorites . add ( ( FavoriteTask ) objects [ index ] ) ; } return favorites ; } private FavoriteTask getFirstSelectedFavoriteTask ( ) { return ( FavoriteTask ) list . getSelectedValue ( ) ; } private void enableThingsAppropriately ( ) { Object [ ] objects = list . getSelectedValues ( ) ; boolean hasSelection = objects ! = null & & objects . length ! = <int> ; boolean hasSingleSelection = objects ! = null & & objects . length = = <int> ; executeMenuItem . setEnabled ( hasSelection ) ; removeFavoritesMenuItem . setEnabled ( hasSelection ) ; executeButton . setEnabled ( hasSelection ) ; removeButton . setEnabled ( hasSelection ) ; moveUpButton . setEnabled ( hasSelection ) ; moveDownButton . setEnabled ( hasSelection ) ; copyFavoritesMenuItem . setEnabled ( hasSelection ) ; editButton . setEnabled ( hasSingleSelection ) ; } private void importFavorites ( ) { favoritesEditor . importFromFile ( new SwingImportInteraction ( SwingUtilities . getWindowAncestor ( mainPanel ) ) ) ; } private void exportFavorites ( ) { favoritesEditor . exportToFile ( new SwingExportInteraction ( SwingUtilities . getWindowAncestor ( mainPanel ) ) ) ; } private void addTask ( ) { favoritesEditor . addFavorite ( new SwingEditFavoriteInteraction ( SwingUtilities . getWindowAncestor ( mainPanel ) , <str> , SwingEditFavoriteInteraction . SynchronizeType . OnlyIfAlreadySynchronized ) ) ; } private void editTask ( ) { FavoriteTask selectedFavoriteTask = getFirstSelectedFavoriteTask ( ) ; favoritesEditor . editFavorite ( selectedFavoriteTask , new SwingEditFavoriteInteraction ( SwingUtilities . getWindowAncestor ( mainPanel ) , <str> , SwingEditFavoriteInteraction . SynchronizeType . OnlyIfAlreadySynchronized ) ) ; } private void duplicateTasks ( ) { favoritesEditor . duplicateFavorites ( getSelectedFavoriteTasks ( ) , new SwingEditFavoriteInteraction ( SwingUtilities . getWindowAncestor ( mainPanel ) , <str> , SwingEditFavoriteInteraction . SynchronizeType . OnlyIfAlreadySynchronized ) ) ; } } 

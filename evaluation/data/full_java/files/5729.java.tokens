package org . elasticsearch . common . geo . builders ; import com . spatial4j . core . shape . Circle ; import com . vividsolutions . jts . geom . Coordinate ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . common . unit . DistanceUnit . Distance ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . Objects ; public class CircleBuilder extends ShapeBuilder { public static final String FIELD_RADIUS = <str> ; public static final GeoShapeType TYPE = GeoShapeType . CIRCLE ; public static final CircleBuilder PROTOTYPE = new CircleBuilder ( ) ; private DistanceUnit unit ; private double radius ; private Coordinate center ; public CircleBuilder center ( Coordinate center ) { this . center = center ; return this ; } public CircleBuilder center ( double lon , double lat ) { return center ( new Coordinate ( lon , lat ) ) ; } public Coordinate center ( ) { return center ; } public CircleBuilder radius ( String radius ) { return radius ( DistanceUnit . Distance . parseDistance ( radius ) ) ; } public CircleBuilder radius ( Distance radius ) { return radius ( radius . value , radius . unit ) ; } public CircleBuilder radius ( double radius , String unit ) { return radius ( radius , DistanceUnit . fromString ( unit ) ) ; } public CircleBuilder radius ( double radius , DistanceUnit unit ) { this . unit = unit ; this . radius = radius ; return this ; } public double radius ( ) { return this . radius ; } public DistanceUnit unit ( ) { return this . unit ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; builder . field ( FIELD_TYPE , TYPE . shapeName ( ) ) ; builder . field ( FIELD_RADIUS , unit . toString ( radius ) ) ; builder . field ( FIELD_COORDINATES ) ; toXContent ( builder , center ) ; return builder . endObject ( ) ; } @Override public Circle build ( ) { return SPATIAL_CONTEXT . makeCircle ( center . x , center . y , <int> * radius / unit . getEarthCircumference ( ) ) ; } @Override public GeoShapeType type ( ) { return TYPE ; } @Override public int hashCode ( ) { return Objects . hash ( center , radius , unit . ordinal ( ) ) ; } @Override public boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) { return false ; } CircleBuilder other = ( CircleBuilder ) obj ; return Objects . equals ( center , other . center ) & & Objects . equals ( radius , other . radius ) & & Objects . equals ( unit . ordinal ( ) , other . unit . ordinal ( ) ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { writeCoordinateTo ( center , out ) ; out . writeDouble ( radius ) ; DistanceUnit . writeDistanceUnit ( out , unit ) ; } @Override public CircleBuilder readFrom ( StreamInput in ) throws IOException { return new CircleBuilder ( ) . center ( readCoordinateFrom ( in ) ) . radius ( in . readDouble ( ) , DistanceUnit . readDistanceUnit ( in ) ) ; } } 

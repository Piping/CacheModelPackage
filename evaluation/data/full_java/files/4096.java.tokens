package org . eclipse . debug . internal . ui . actions . variables ; import java . util . Iterator ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IValueModification ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . VariableValueEditorManager ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . internal . ui . views . variables . VariablesView ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . actions . IVariableValueEditor ; import org . eclipse . jface . dialogs . IInputValidator ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . actions . SelectionProviderAction ; import com . ibm . icu . text . MessageFormat ; public class ChangeVariableValueAction extends SelectionProviderAction { protected IVariable fVariable ; private VariablesView fView ; private boolean fEditing = false ; private boolean isApplicable = false ; public ChangeVariableValueAction ( VariablesView view ) { super ( view . getViewer ( ) , ActionMessages . ChangeVariableValue_title ) ; setDescription ( ActionMessages . ChangeVariableValue_toolTipText ) ; setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_CHANGE_VARIABLE_VALUE ) ) ; setHoverImageDescriptor ( DebugPluginImages . getImageDescriptor ( IDebugUIConstants . IMG_LCL_CHANGE_VARIABLE_VALUE ) ) ; setDisabledImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_CHANGE_VARIABLE_VALUE ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugHelpContextIds . CHANGE_VALUE_ACTION ) ; fView = view ; } public boolean isApplicable ( ) { return isApplicable ; } protected void doActionPerformed ( final IVariable variable ) { Shell shell = fView . getViewSite ( ) . getShell ( ) ; if ( fEditing ) { return ; } fEditing = true ; fVariable = variable ; if ( ! delegateEdit ( shell ) ) { doDefaultEdit ( shell ) ; } fEditing = false ; } private boolean delegateEdit ( Shell shell ) { String modelIdentifier = fVariable . getModelIdentifier ( ) ; IVariableValueEditor editor = VariableValueEditorManager . getDefault ( ) . getVariableValueEditor ( modelIdentifier ) ; if ( editor ! = null ) { return editor . editVariable ( fVariable , shell ) ; } return false ; } protected void doDefaultEdit ( Shell shell ) { String name = IInternalDebugCoreConstants . EMPTY_STRING ; String value = IInternalDebugCoreConstants . EMPTY_STRING ; try { name = fVariable . getName ( ) ; value = fVariable . getValue ( ) . getValueString ( ) ; } catch ( DebugException exception ) { DebugUIPlugin . errorDialog ( shell , ActionMessages . ChangeVariableValue_errorDialogTitle , ActionMessages . ChangeVariableValue_errorDialogMessage , exception ) ; return ; } ChangeVariableValueInputDialog inputDialog = new ChangeVariableValueInputDialog ( shell , ActionMessages . ChangeVariableValue_1 , MessageFormat . format ( ActionMessages . ChangeVariableValue_2 , new Object [ ] { name } ) , value , new IInputValidator ( ) { @Override public String isValid ( String input ) { try { if ( fVariable . verifyValue ( input ) ) { return null ; } } catch ( DebugException exception ) { return ActionMessages . ChangeVariableValue_3 ; } return ActionMessages . ChangeVariableValue_4 ; } } ) ; inputDialog . open ( ) ; String newValue = inputDialog . getValue ( ) ; if ( newValue ! = null ) { try { fVariable . setValue ( newValue ) ; getSelectionProvider ( ) . setSelection ( new StructuredSelection ( fVariable ) ) ; } catch ( DebugException de ) { DebugUIPlugin . errorDialog ( shell , ActionMessages . ChangeVariableValue_errorDialogTitle , ActionMessages . ChangeVariableValue_errorDialogMessage , de ) ; } } } protected void update ( IStructuredSelection sel ) { isApplicable = false ; Iterator < Object > iter = sel . iterator ( ) ; if ( iter . hasNext ( ) ) { Object object = iter . next ( ) ; if ( object instanceof IValueModification ) { isApplicable = true ; IValueModification varMod = ( IValueModification ) object ; if ( ! varMod . supportsValueModification ( ) ) { setEnabled ( false ) ; return ; } setEnabled ( ! iter . hasNext ( ) ) ; return ; } } setEnabled ( false ) ; } @Override public void run ( ) { Iterator < Object > iterator = getStructuredSelection ( ) . iterator ( ) ; doActionPerformed ( ( IVariable ) iterator . next ( ) ) ; } @Override public void selectionChanged ( IStructuredSelection sel ) { update ( sel ) ; } } 

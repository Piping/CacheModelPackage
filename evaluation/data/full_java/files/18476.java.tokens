package com . badlogic . gdx . tests ; import java . util . Arrays ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . FPSLogger ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . loader . ObjLoader ; import com . badlogic . gdx . graphics . glutils . FrameBuffer ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . tests . utils . GdxTest ; public class EdgeDetectionTest extends GdxTest { FPSLogger logger ; Model scene ; ModelInstance sceneInstance ; ModelBatch modelBatch ; FrameBuffer fbo ; PerspectiveCamera cam ; Matrix4 matrix = new Matrix4 ( ) ; float angle = <int> ; TextureRegion fboRegion ; SpriteBatch batch ; ShaderProgram batchShader ; float [ ] filter = { <int> , <float> , <int> , <float> , - <float> , <float> , <int> , <float> , <int> , } ; float [ ] offsets = new float [ <int> ] ; public void create ( ) { ShaderProgram . pedantic = false ; batchShader = new ShaderProgram ( Gdx . files . internal ( <str> ) . readString ( ) , Gdx . files . internal ( <str> ) . readString ( ) ) ; if ( ! batchShader . isCompiled ( ) ) { Gdx . app . log ( <str> , <str> + batchShader . getLog ( ) ) ; } ObjLoader objLoader = new ObjLoader ( ) ; scene = objLoader . loadModel ( Gdx . files . internal ( <str> ) ) ; sceneInstance = new ModelInstance ( scene ) ; modelBatch = new ModelBatch ( ) ; fbo = new FrameBuffer ( Format . RGB565 , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) , true ) ; cam = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; cam . position . set ( <int> , <int> , <int> ) ; cam . lookAt ( <int> , <int> , <int> ) ; cam . far = <int> ; batch = new SpriteBatch ( ) ; batch . setShader ( batchShader ) ; fboRegion = new TextureRegion ( fbo . getColorBufferTexture ( ) ) ; fboRegion . flip ( false , true ) ; logger = new FPSLogger ( ) ; calculateOffsets ( ) ; } @Override public void dispose ( ) { batchShader . dispose ( ) ; scene . dispose ( ) ; fbo . dispose ( ) ; batch . dispose ( ) ; } private void calculateOffsets ( ) { int idx = <int> ; for ( int y = - <int> ; y < = <int> ; y + + ) { for ( int x = - <int> ; x < = <int> ; x + + ) { offsets [ idx + + ] = x / ( float ) Gdx . graphics . getWidth ( ) ; offsets [ idx + + ] = y / ( float ) Gdx . graphics . getHeight ( ) ; } } System . out . println ( Arrays . toString ( offsets ) ) ; } public void render ( ) { angle + = <int> * Gdx . graphics . getDeltaTime ( ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; cam . update ( ) ; matrix . setToRotation ( <int> , <int> , <int> , angle ) ; cam . combined . mul ( matrix ) ; fbo . begin ( ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; Gdx . gl . glEnable ( GL20 . GL_DEPTH_TEST ) ; modelBatch . begin ( cam ) ; modelBatch . render ( sceneInstance ) ; modelBatch . end ( ) ; fbo . end ( ) ; batch . begin ( ) ; batch . disableBlending ( ) ; batchShader . setUniformi ( <str> , filter . length ) ; batchShader . setUniform1fv ( <str> , filter , <int> , filter . length ) ; batchShader . setUniform2fv ( <str> , offsets , <int> , offsets . length ) ; batch . draw ( fboRegion , <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; batch . end ( ) ; logger . log ( ) ; } } 

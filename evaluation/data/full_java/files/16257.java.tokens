package org . gradle . gradleplugin . userinterface . swing . generic ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . gradleplugin . userinterface . swing . common . BorderlessImageButton ; import org . gradle . gradleplugin . userinterface . swing . common . BorderlessImageToggleButton ; import javax . imageio . ImageIO ; import javax . swing . * ; import javax . swing . text . BadLocationException ; import javax . swing . text . JTextComponent ; import java . awt . * ; import java . awt . event . InputEvent ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . io . InputStream ; import java . lang . reflect . Method ; public class Utility { private static final Logger LOGGER = Logging . getLogger ( Utility . class ) ; public static Component addLeftJustifiedComponent ( Component component ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . X_AXIS ) ) ; panel . add ( component ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; return panel ; } public static Component addRightJustifiedComponent ( Component component ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . X_AXIS ) ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . add ( component ) ; return panel ; } public static JDialog createDialog ( Window parent , String title , boolean isModal ) { if ( parent instanceof JDialog ) { return new JDialog ( ( JDialog ) parent , title , isModal ) ; } else if ( parent instanceof JFrame ) { return new JDialog ( ( JFrame ) parent , title , isModal ) ; } throw new RuntimeException ( <str> ) ; } public static void setTabComponent15Compatible ( JTabbedPane tabbedPane , int index , Component component ) { try { Method method = tabbedPane . getClass ( ) . getMethod ( <str> , new Class [ ] { Integer . TYPE , Component . class } ) ; method . invoke ( tabbedPane , index , component ) ; } catch ( NoSuchMethodException e ) { } catch ( Exception e ) { LOGGER . error ( <str> , e ) ; } } public static JButton createButton ( Class resourceClass , String imageResourceName , String tooltip , Action action ) { JButton button = null ; if ( imageResourceName ! = null ) { InputStream inputStream = resourceClass . getResourceAsStream ( imageResourceName ) ; if ( inputStream ! = null ) { try { BufferedImage image = ImageIO . read ( inputStream ) ; button = new BorderlessImageButton ( action , new ImageIcon ( image ) ) ; } catch ( IOException e ) { LOGGER . error ( <str> + imageResourceName , e ) ; } } } if ( button = = null ) { button = new JButton ( action ) ; } if ( tooltip ! = null ) { button . setToolTipText ( tooltip ) ; } return button ; } public static JToggleButton createToggleButton ( Class resourceClass , String imageResourceName , String tooltip , Action action ) { JToggleButton button = null ; if ( imageResourceName ! = null ) { ImageIcon icon = getImageIcon ( resourceClass , imageResourceName ) ; if ( icon ! = null ) { button = new BorderlessImageToggleButton ( action , icon ) ; } } if ( button = = null ) { button = new JToggleButton ( action ) ; } if ( tooltip ! = null ) { button . setToolTipText ( tooltip ) ; } return button ; } public static JMenuItem createMenuItem ( Class resourceClass , String name , String imageResourceName , Action action ) { JMenuItem item = new JMenuItem ( action ) ; item . setText ( name ) ; if ( imageResourceName ! = null ) { ImageIcon icon = getImageIcon ( resourceClass , imageResourceName ) ; item . setIcon ( icon ) ; } return item ; } public static boolean isCTRLDown ( int eventModifiersEx ) { return ( eventModifiersEx & InputEvent . CTRL_DOWN_MASK ) = = InputEvent . CTRL_DOWN_MASK ; } public static ImageIcon getImageIcon ( Class resourceClass , String imageResourceName ) { InputStream inputStream = resourceClass . getResourceAsStream ( imageResourceName ) ; if ( inputStream ! = null ) { try { BufferedImage image = ImageIO . read ( inputStream ) ; return new ImageIcon ( image ) ; } catch ( IOException e ) { LOGGER . error ( <str> + imageResourceName , e ) ; } } return null ; } public static void scrollToText ( JTextComponent textComponent , int startingIndex , int endingIndex ) { try { Rectangle startingRectangle = textComponent . modelToView ( startingIndex ) ; Rectangle endDingRectangle = textComponent . modelToView ( endingIndex ) ; Rectangle totalBounds = startingRectangle . union ( endDingRectangle ) ; textComponent . scrollRectToVisible ( totalBounds ) ; textComponent . repaint ( ) ; } catch ( BadLocationException e ) { e . printStackTrace ( ) ; } } } 

package org . apache . cassandra . utils ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . nio . ByteBuffer ; import java . security . SecureRandom ; import java . util . Random ; public class GuidGenerator { private static final Random myRand ; private static final SecureRandom mySecureRand ; private static final String s_id ; static { if ( System . getProperty ( <str> ) = = null ) { System . setProperty ( <str> , <str> ) ; } mySecureRand = new SecureRandom ( ) ; long secureInitializer = mySecureRand . nextLong ( ) ; myRand = new Random ( secureInitializer ) ; try { s_id = InetAddress . getLocalHost ( ) . toString ( ) ; } catch ( UnknownHostException e ) { throw new AssertionError ( e ) ; } } public static String guid ( ) { ByteBuffer array = guidAsBytes ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int j = array . position ( ) ; j < array . limit ( ) ; + + j ) { int b = array . get ( j ) & <hex> ; if ( b < <hex> ) sb . append ( <str> ) ; sb . append ( Integer . toHexString ( b ) ) ; } return convertToStandardFormat ( sb . toString ( ) ) ; } public static String guidToString ( byte [ ] bytes ) { StringBuilder sb = new StringBuilder ( ) ; for ( int j = <int> ; j < bytes . length ; + + j ) { int b = bytes [ j ] & <hex> ; if ( b < <hex> ) sb . append ( <str> ) ; sb . append ( Integer . toHexString ( b ) ) ; } return convertToStandardFormat ( sb . toString ( ) ) ; } public static ByteBuffer guidAsBytes ( ) { StringBuilder sbValueBeforeMD5 = new StringBuilder ( ) ; long time = System . currentTimeMillis ( ) ; long rand = <int> ; rand = myRand . nextLong ( ) ; sbValueBeforeMD5 . append ( s_id ) . append ( <str> ) . append ( Long . toString ( time ) ) . append ( <str> ) . append ( Long . toString ( rand ) ) ; String valueBeforeMD5 = sbValueBeforeMD5 . toString ( ) ; return ByteBuffer . wrap ( FBUtilities . threadLocalMD5Digest ( ) . digest ( valueBeforeMD5 . getBytes ( ) ) ) ; } private static String convertToStandardFormat ( String valueAfterMD5 ) { String raw = valueAfterMD5 . toUpperCase ( ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( raw . substring ( <int> , <int> ) ) . append ( <str> ) . append ( raw . substring ( <int> , <int> ) ) . append ( <str> ) . append ( raw . substring ( <int> , <int> ) ) . append ( <str> ) . append ( raw . substring ( <int> , <int> ) ) . append ( <str> ) . append ( raw . substring ( <int> ) ) ; return sb . toString ( ) ; } } 

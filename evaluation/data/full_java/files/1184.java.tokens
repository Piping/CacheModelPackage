package org . apache . cassandra . transport . messages ; import java . util . ArrayList ; import java . util . List ; import io . netty . buffer . ByteBuf ; import org . apache . cassandra . service . QueryState ; import org . apache . cassandra . transport . * ; public class RegisterMessage extends Message . Request { public static final Message . Codec < RegisterMessage > codec = new Message . Codec < RegisterMessage > ( ) { public RegisterMessage decode ( ByteBuf body , int version ) { int length = body . readUnsignedShort ( ) ; List < Event . Type > eventTypes = new ArrayList < > ( length ) ; for ( int i = <int> ; i < length ; + + i ) eventTypes . add ( CBUtil . readEnumValue ( Event . Type . class , body ) ) ; return new RegisterMessage ( eventTypes ) ; } public void encode ( RegisterMessage msg , ByteBuf dest , int version ) { dest . writeShort ( msg . eventTypes . size ( ) ) ; for ( Event . Type type : msg . eventTypes ) CBUtil . writeEnumValue ( type , dest ) ; } public int encodedSize ( RegisterMessage msg , int version ) { int size = <int> ; for ( Event . Type type : msg . eventTypes ) size + = CBUtil . sizeOfEnumValue ( type ) ; return size ; } } ; public final List < Event . Type > eventTypes ; public RegisterMessage ( List < Event . Type > eventTypes ) { super ( Message . Type . REGISTER ) ; this . eventTypes = eventTypes ; } public Response execute ( QueryState state ) { assert connection instanceof ServerConnection ; Connection . Tracker tracker = connection . getTracker ( ) ; assert tracker instanceof Server . ConnectionTracker ; for ( Event . Type type : eventTypes ) { if ( type . minimumVersion > connection . getVersion ( ) ) throw new ProtocolException ( <str> + type . name ( ) + <str> + connection . getVersion ( ) ) ; ( ( Server . ConnectionTracker ) tracker ) . register ( type , connection ( ) . channel ( ) ) ; } return new ReadyMessage ( ) ; } @Override public String toString ( ) { return <str> + eventTypes ; } } 

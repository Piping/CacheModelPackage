package org . apache . cassandra . cql3 . validation . operations ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; public class InsertTest extends CQLTester { @Test public void testInsertWithUnset ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> ) ; execute ( <str> , null , null ) ; assertRows ( execute ( <str> ) , row ( null , null ) ) ; execute ( <str> , <str> , <int> ) ; execute ( <str> , unset ( ) , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( <str> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; } @Test public void testInsertTtlWithUnset ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , unset ( ) ) ; assertRows ( execute ( <str> ) , row ( new Object [ ] { null } ) ) ; } @Test public void testInsert ( ) throws Throwable { testInsert ( false ) ; testInsert ( true ) ; } private void testInsert ( boolean forceFlush ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null ) , row ( <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testInsertWithCompactFormat ( ) throws Throwable { testInsertWithCompactFormat ( false ) ; testInsertWithCompactFormat ( true ) ; } private void testInsertWithCompactFormat ( boolean forceFlush ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testInsertWithTwoClusteringColumns ( ) throws Throwable { testInsertWithTwoClusteringColumns ( false ) ; testInsertWithTwoClusteringColumns ( true ) ; } private void testInsertWithTwoClusteringColumns ( boolean forceFlush ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , null ) , row ( <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testInsertWithCompactStorageAndTwoClusteringColumns ( ) throws Throwable { testInsertWithCompactStorageAndTwoClusteringColumns ( false ) ; testInsertWithCompactStorageAndTwoClusteringColumns ( true ) ; } private void testInsertWithCompactStorageAndTwoClusteringColumns ( boolean forceFlush ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null , <int> ) , row ( <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testInsertWithAStaticColumn ( ) throws Throwable { testInsertWithAStaticColumn ( false ) ; testInsertWithAStaticColumn ( true ) ; } private void testInsertWithAStaticColumn ( boolean forceFlush ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> ) , row ( <int> , null , null , <str> , null ) , row ( <int> , <int> , <int> , <str> , null ) ) ; execute ( <str> ) ; flush ( forceFlush ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <str> , <int> ) , row ( <int> , <int> , <int> , <str> , null ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } private void flush ( boolean forceFlush ) { if ( forceFlush ) flush ( ) ; } } 

package org . apache . cassandra . thrift ; import java . io . BufferedInputStream ; import java . io . BufferedOutputStream ; import java . io . IOException ; import java . net . InetSocketAddress ; import java . net . Socket ; import java . net . SocketException ; import org . apache . thrift . transport . TIOStreamTransport ; import org . apache . thrift . transport . TTransportException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class TCustomSocket extends TIOStreamTransport { private static final Logger LOGGER = LoggerFactory . getLogger ( TCustomSocket . class . getName ( ) ) ; private Socket socket = null ; private String host = null ; private int port = <int> ; private int timeout = <int> ; public TCustomSocket ( Socket socket ) throws TTransportException { this . socket = socket ; try { socket . setSoLinger ( false , <int> ) ; socket . setTcpNoDelay ( true ) ; } catch ( SocketException sx ) { LOGGER . warn ( <str> , sx ) ; } if ( isOpen ( ) ) { try { inputStream_ = new BufferedInputStream ( socket . getInputStream ( ) , <int> ) ; outputStream_ = new BufferedOutputStream ( socket . getOutputStream ( ) , <int> ) ; } catch ( IOException iox ) { close ( ) ; throw new TTransportException ( TTransportException . NOT_OPEN , iox ) ; } } } public TCustomSocket ( String host , int port ) { this ( host , port , <int> ) ; } public TCustomSocket ( String host , int port , int timeout ) { this . host = host ; this . port = port ; this . timeout = timeout ; initSocket ( ) ; } private void initSocket ( ) { socket = new Socket ( ) ; try { socket . setSoLinger ( false , <int> ) ; socket . setTcpNoDelay ( true ) ; socket . setSoTimeout ( timeout ) ; } catch ( SocketException sx ) { LOGGER . error ( <str> , sx ) ; } } public void setTimeout ( int timeout ) { this . timeout = timeout ; try { socket . setSoTimeout ( timeout ) ; } catch ( SocketException sx ) { LOGGER . warn ( <str> , sx ) ; } } public Socket getSocket ( ) { if ( socket = = null ) { initSocket ( ) ; } return socket ; } public boolean isOpen ( ) { if ( socket = = null ) { return false ; } return socket . isConnected ( ) ; } public void open ( ) throws TTransportException { if ( isOpen ( ) ) { throw new TTransportException ( TTransportException . ALREADY_OPEN , <str> ) ; } if ( host . length ( ) = = <int> ) { throw new TTransportException ( TTransportException . NOT_OPEN , <str> ) ; } if ( port < = <int> ) { throw new TTransportException ( TTransportException . NOT_OPEN , <str> ) ; } if ( socket = = null ) { initSocket ( ) ; } try { socket . connect ( new InetSocketAddress ( host , port ) , timeout ) ; inputStream_ = new BufferedInputStream ( socket . getInputStream ( ) , <int> ) ; outputStream_ = new BufferedOutputStream ( socket . getOutputStream ( ) , <int> ) ; } catch ( IOException iox ) { close ( ) ; throw new TTransportException ( TTransportException . NOT_OPEN , iox ) ; } } public void close ( ) { super . close ( ) ; if ( socket ! = null ) { try { socket . close ( ) ; } catch ( IOException iox ) { LOGGER . warn ( <str> , iox ) ; } socket = null ; } } } 

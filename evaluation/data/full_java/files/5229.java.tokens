package org . elasticsearch . action . admin . indices . upgrade . post ; import org . elasticsearch . Version ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . index . shard . ShardId ; import java . io . IOException ; import java . text . ParseException ; class ShardUpgradeResult implements Streamable { private ShardId shardId ; private org . apache . lucene . util . Version oldestLuceneSegment ; private Version upgradeVersion ; private boolean primary ; ShardUpgradeResult ( ) { } ShardUpgradeResult ( ShardId shardId , boolean primary , Version upgradeVersion , org . apache . lucene . util . Version oldestLuceneSegment ) { this . shardId = shardId ; this . primary = primary ; this . upgradeVersion = upgradeVersion ; this . oldestLuceneSegment = oldestLuceneSegment ; } public ShardId getShardId ( ) { return shardId ; } public org . apache . lucene . util . Version oldestLuceneSegment ( ) { return this . oldestLuceneSegment ; } public Version upgradeVersion ( ) { return this . upgradeVersion ; } public boolean primary ( ) { return primary ; } @Override public void readFrom ( StreamInput in ) throws IOException { shardId = ShardId . readShardId ( in ) ; primary = in . readBoolean ( ) ; upgradeVersion = Version . readVersion ( in ) ; try { oldestLuceneSegment = org . apache . lucene . util . Version . parse ( in . readString ( ) ) ; } catch ( ParseException ex ) { throw new IOException ( <str> + oldestLuceneSegment + <str> , ex ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { shardId . writeTo ( out ) ; out . writeBoolean ( primary ) ; Version . writeVersion ( upgradeVersion , out ) ; out . writeString ( oldestLuceneSegment . toString ( ) ) ; } } 

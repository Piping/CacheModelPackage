package org . elasticsearch . action . explain ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . ValidateActions ; import org . elasticsearch . action . support . single . shard . SingleShardRequest ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . search . fetch . source . FetchSourceContext ; import java . io . IOException ; public class ExplainRequest extends SingleShardRequest < ExplainRequest > { private String type = <str> ; private String id ; private String routing ; private String preference ; private QueryBuilder < ? > query ; private String [ ] fields ; private FetchSourceContext fetchSourceContext ; private String [ ] filteringAlias = Strings . EMPTY_ARRAY ; long nowInMillis ; public ExplainRequest ( ) { } public ExplainRequest ( String index , String type , String id ) { this . index = index ; this . type = type ; this . id = id ; } public String type ( ) { return type ; } public ExplainRequest type ( String type ) { this . type = type ; return this ; } public String id ( ) { return id ; } public ExplainRequest id ( String id ) { this . id = id ; return this ; } public String routing ( ) { return routing ; } public ExplainRequest routing ( String routing ) { this . routing = routing ; return this ; } public ExplainRequest parent ( String parent ) { this . routing = parent ; return this ; } public String preference ( ) { return preference ; } public ExplainRequest preference ( String preference ) { this . preference = preference ; return this ; } public QueryBuilder < ? > query ( ) { return query ; } public ExplainRequest query ( QueryBuilder < ? > query ) { this . query = query ; return this ; } public ExplainRequest fetchSourceContext ( FetchSourceContext context ) { this . fetchSourceContext = context ; return this ; } public FetchSourceContext fetchSourceContext ( ) { return fetchSourceContext ; } public String [ ] fields ( ) { return fields ; } public ExplainRequest fields ( String [ ] fields ) { this . fields = fields ; return this ; } public String [ ] filteringAlias ( ) { return filteringAlias ; } public ExplainRequest filteringAlias ( String [ ] filteringAlias ) { if ( filteringAlias ! = null ) { this . filteringAlias = filteringAlias ; } return this ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = super . validateNonNullIndex ( ) ; if ( type = = null ) { validationException = ValidateActions . addValidationError ( <str> , validationException ) ; } if ( id = = null ) { validationException = ValidateActions . addValidationError ( <str> , validationException ) ; } if ( query = = null ) { validationException = ValidateActions . addValidationError ( <str> , validationException ) ; } return validationException ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; type = in . readString ( ) ; id = in . readString ( ) ; routing = in . readOptionalString ( ) ; preference = in . readOptionalString ( ) ; query = in . readQuery ( ) ; filteringAlias = in . readStringArray ( ) ; if ( in . readBoolean ( ) ) { fields = in . readStringArray ( ) ; } fetchSourceContext = FetchSourceContext . optionalReadFromStream ( in ) ; nowInMillis = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( type ) ; out . writeString ( id ) ; out . writeOptionalString ( routing ) ; out . writeOptionalString ( preference ) ; out . writeQuery ( query ) ; out . writeStringArray ( filteringAlias ) ; if ( fields ! = null ) { out . writeBoolean ( true ) ; out . writeStringArray ( fields ) ; } else { out . writeBoolean ( false ) ; } FetchSourceContext . optionalWriteToStream ( fetchSourceContext , out ) ; out . writeVLong ( nowInMillis ) ; } } 

package org . elasticsearch . search . aggregations ; import org . elasticsearch . common . DelegatingHasContextAndHeaders ; import org . elasticsearch . common . HasContextAndHeaders ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorStreams ; import org . elasticsearch . search . aggregations . support . AggregationPath ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Map ; public abstract class InternalAggregation implements Aggregation , ToXContent , Streamable { public static class Type { private String name ; private BytesReference stream ; public Type ( String name ) { this ( name , new BytesArray ( name ) ) ; } public Type ( String name , String stream ) { this ( name , new BytesArray ( stream ) ) ; } public Type ( String name , BytesReference stream ) { this . name = name ; this . stream = stream ; } public String name ( ) { return name ; } public BytesReference stream ( ) { return stream ; } @Override public String toString ( ) { return name ; } } public static class ReduceContext extends DelegatingHasContextAndHeaders { private final BigArrays bigArrays ; private ScriptService scriptService ; public ReduceContext ( BigArrays bigArrays , ScriptService scriptService , HasContextAndHeaders headersContext ) { super ( headersContext ) ; this . bigArrays = bigArrays ; this . scriptService = scriptService ; } public BigArrays bigArrays ( ) { return bigArrays ; } public ScriptService scriptService ( ) { return scriptService ; } } protected String name ; protected Map < String , Object > metaData ; private List < PipelineAggregator > pipelineAggregators ; protected InternalAggregation ( ) { } protected InternalAggregation ( String name , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { this . name = name ; this . pipelineAggregators = pipelineAggregators ; this . metaData = metaData ; } @Override public String getName ( ) { return name ; } public abstract Type type ( ) ; public final InternalAggregation reduce ( List < InternalAggregation > aggregations , ReduceContext reduceContext ) { InternalAggregation aggResult = doReduce ( aggregations , reduceContext ) ; for ( PipelineAggregator pipelineAggregator : pipelineAggregators ) { aggResult = pipelineAggregator . reduce ( aggResult , reduceContext ) ; } return aggResult ; } public abstract InternalAggregation doReduce ( List < InternalAggregation > aggregations , ReduceContext reduceContext ) ; @Override public Object getProperty ( String path ) { AggregationPath aggPath = AggregationPath . parse ( path ) ; return getProperty ( aggPath . getPathElementsAsStringList ( ) ) ; } public abstract Object getProperty ( List < String > path ) ; protected static int readSize ( StreamInput in ) throws IOException { final int size = in . readVInt ( ) ; return size = = <int> ? Integer . MAX_VALUE : size ; } protected static void writeSize ( int size , StreamOutput out ) throws IOException { if ( size = = Integer . MAX_VALUE ) { size = <int> ; } out . writeVInt ( size ) ; } @Override public Map < String , Object > getMetaData ( ) { return metaData ; } public List < PipelineAggregator > pipelineAggregators ( ) { return pipelineAggregators ; } @Override public final XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( name ) ; if ( this . metaData ! = null ) { builder . field ( CommonFields . META ) ; builder . map ( this . metaData ) ; } doXContentBody ( builder , params ) ; builder . endObject ( ) ; return builder ; } public abstract XContentBuilder doXContentBody ( XContentBuilder builder , Params params ) throws IOException ; @Override public final void writeTo ( StreamOutput out ) throws IOException { out . writeString ( name ) ; out . writeGenericValue ( metaData ) ; out . writeVInt ( pipelineAggregators . size ( ) ) ; for ( PipelineAggregator pipelineAggregator : pipelineAggregators ) { out . writeBytesReference ( pipelineAggregator . type ( ) . stream ( ) ) ; pipelineAggregator . writeTo ( out ) ; } doWriteTo ( out ) ; } protected abstract void doWriteTo ( StreamOutput out ) throws IOException ; @Override public final void readFrom ( StreamInput in ) throws IOException { name = in . readString ( ) ; metaData = in . readMap ( ) ; int size = in . readVInt ( ) ; if ( size = = <int> ) { pipelineAggregators = Collections . emptyList ( ) ; } else { pipelineAggregators = new ArrayList < > ( size ) ; for ( int i = <int> ; i < size ; i + + ) { BytesReference type = in . readBytesReference ( ) ; PipelineAggregator pipelineAggregator = PipelineAggregatorStreams . stream ( type ) . readResult ( in ) ; pipelineAggregators . add ( pipelineAggregator ) ; } } doReadFrom ( in ) ; } protected abstract void doReadFrom ( StreamInput in ) throws IOException ; public static final class CommonFields { public static final XContentBuilderString META = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString BUCKETS = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString VALUE = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString VALUES = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString VALUE_AS_STRING = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString DOC_COUNT = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString KEY = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString KEY_AS_STRING = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString FROM = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString FROM_AS_STRING = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString TO = new XContentBuilderString ( <str> ) ; public static final XContentBuilderString TO_AS_STRING = new XContentBuilderString ( <str> ) ; } } 

package io . netty . util . internal ; import java . util . concurrent . atomic . AtomicReferenceFieldUpdater ; public abstract class MpscLinkedQueueNode < T > { @SuppressWarnings ( <str> ) private static final AtomicReferenceFieldUpdater < MpscLinkedQueueNode , MpscLinkedQueueNode > nextUpdater ; static { @SuppressWarnings ( <str> ) AtomicReferenceFieldUpdater < MpscLinkedQueueNode , MpscLinkedQueueNode > u ; u = PlatformDependent . newAtomicReferenceFieldUpdater ( MpscLinkedQueueNode . class , <str> ) ; if ( u = = null ) { u = AtomicReferenceFieldUpdater . newUpdater ( MpscLinkedQueueNode . class , MpscLinkedQueueNode . class , <str> ) ; } nextUpdater = u ; } @SuppressWarnings ( <str> ) private volatile MpscLinkedQueueNode < T > next ; final MpscLinkedQueueNode < T > next ( ) { return next ; } final void setNext ( final MpscLinkedQueueNode < T > newNext ) { nextUpdater . lazySet ( this , newNext ) ; } public abstract T value ( ) ; protected T clearMaybe ( ) { return value ( ) ; } void unlink ( ) { setNext ( null ) ; } } 

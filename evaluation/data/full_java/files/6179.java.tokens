package org . elasticsearch . discovery . zen . fd ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportConnectionListener ; import org . elasticsearch . transport . TransportService ; import static org . elasticsearch . common . unit . TimeValue . timeValueSeconds ; public abstract class FaultDetection extends AbstractComponent { public static final String SETTING_CONNECT_ON_NETWORK_DISCONNECT = <str> ; public static final String SETTING_PING_INTERVAL = <str> ; public static final String SETTING_PING_TIMEOUT = <str> ; public static final String SETTING_PING_RETRIES = <str> ; public static final String SETTING_REGISTER_CONNECTION_LISTENER = <str> ; protected final ThreadPool threadPool ; protected final ClusterName clusterName ; protected final TransportService transportService ; protected final boolean registerConnectionListener ; protected final FDConnectionListener connectionListener ; protected final boolean connectOnNetworkDisconnect ; protected final TimeValue pingInterval ; protected final TimeValue pingRetryTimeout ; protected final int pingRetryCount ; public FaultDetection ( Settings settings , ThreadPool threadPool , TransportService transportService , ClusterName clusterName ) { super ( settings ) ; this . threadPool = threadPool ; this . transportService = transportService ; this . clusterName = clusterName ; this . connectOnNetworkDisconnect = settings . getAsBoolean ( SETTING_CONNECT_ON_NETWORK_DISCONNECT , false ) ; this . pingInterval = settings . getAsTime ( SETTING_PING_INTERVAL , timeValueSeconds ( <int> ) ) ; this . pingRetryTimeout = settings . getAsTime ( SETTING_PING_TIMEOUT , timeValueSeconds ( <int> ) ) ; this . pingRetryCount = settings . getAsInt ( SETTING_PING_RETRIES , <int> ) ; this . registerConnectionListener = settings . getAsBoolean ( SETTING_REGISTER_CONNECTION_LISTENER , true ) ; this . connectionListener = new FDConnectionListener ( ) ; if ( registerConnectionListener ) { transportService . addConnectionListener ( connectionListener ) ; } } public void close ( ) { transportService . removeConnectionListener ( connectionListener ) ; } abstract void handleTransportDisconnect ( DiscoveryNode node ) ; private class FDConnectionListener implements TransportConnectionListener { @Override public void onNodeConnected ( DiscoveryNode node ) { } @Override public void onNodeDisconnected ( DiscoveryNode node ) { handleTransportDisconnect ( node ) ; } } } 

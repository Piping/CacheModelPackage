package org . apache . cassandra . metrics ; import java . io . IOException ; import org . junit . BeforeClass ; import org . junit . Test ; import org . junit . runner . RunWith ; import com . datastax . driver . core . Cluster ; import com . datastax . driver . core . PreparedStatement ; import com . datastax . driver . core . Session ; import org . apache . cassandra . OrderedJUnit4ClassRunner ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . cql3 . QueryProcessor ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . service . EmbeddedCassandraService ; import static junit . framework . Assert . assertEquals ; @RunWith ( OrderedJUnit4ClassRunner . class ) public class CQLMetricsTest extends SchemaLoader { private static EmbeddedCassandraService cassandra ; private static Cluster cluster ; private static Session session ; @BeforeClass ( ) public static void setup ( ) throws ConfigurationException , IOException { Schema . instance . clear ( ) ; cassandra = new EmbeddedCassandraService ( ) ; cassandra . start ( ) ; cluster = Cluster . builder ( ) . addContactPoint ( <str> ) . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) . build ( ) ; session = cluster . connect ( ) ; session . execute ( <str> ) ; session . execute ( <str> ) ; } @Test public void testPreparedStatementsCount ( ) { int n = ( int ) QueryProcessor . metrics . preparedStatementsCount . getValue ( ) ; session . prepare ( <str> ) ; assertEquals ( n + <int> , ( int ) QueryProcessor . metrics . preparedStatementsCount . getValue ( ) ) ; } @Test public void testRegularStatementsExecuted ( ) { clearMetrics ( ) ; PreparedStatement metricsStatement = session . prepare ( <str> ) ; assertEquals ( <int> , QueryProcessor . metrics . preparedStatementsExecuted . getCount ( ) ) ; assertEquals ( <int> , QueryProcessor . metrics . regularStatementsExecuted . getCount ( ) ) ; for ( int i = <int> ; i < <int> ; i + + ) session . execute ( String . format ( <str> , i , <str> + i ) ) ; assertEquals ( <int> , QueryProcessor . metrics . preparedStatementsExecuted . getCount ( ) ) ; assertEquals ( <int> , QueryProcessor . metrics . regularStatementsExecuted . getCount ( ) ) ; } @Test public void testPreparedStatementsExecuted ( ) { clearMetrics ( ) ; PreparedStatement metricsStatement = session . prepare ( <str> ) ; assertEquals ( <int> , QueryProcessor . metrics . preparedStatementsExecuted . getCount ( ) ) ; assertEquals ( <int> , QueryProcessor . metrics . regularStatementsExecuted . getCount ( ) ) ; for ( int i = <int> ; i < <int> ; i + + ) session . execute ( metricsStatement . bind ( i , <str> + i ) ) ; assertEquals ( <int> , QueryProcessor . metrics . preparedStatementsExecuted . getCount ( ) ) ; assertEquals ( <int> , QueryProcessor . metrics . regularStatementsExecuted . getCount ( ) ) ; } @Test public void testPreparedStatementsRatio ( ) { clearMetrics ( ) ; PreparedStatement metricsStatement = session . prepare ( <str> ) ; assertEquals ( Double . NaN , QueryProcessor . metrics . preparedStatementsRatio . getValue ( ) ) ; for ( int i = <int> ; i < <int> ; i + + ) session . execute ( metricsStatement . bind ( i , <str> + i ) ) ; assertEquals ( <float> , QueryProcessor . metrics . preparedStatementsRatio . getValue ( ) ) ; for ( int i = <int> ; i < <int> ; i + + ) session . execute ( String . format ( <str> , i , <str> + i ) ) ; assertEquals ( <float> , QueryProcessor . metrics . preparedStatementsRatio . getValue ( ) ) ; } private void clearMetrics ( ) { QueryProcessor . metrics . preparedStatementsExecuted . dec ( QueryProcessor . metrics . preparedStatementsExecuted . getCount ( ) ) ; QueryProcessor . metrics . regularStatementsExecuted . dec ( QueryProcessor . metrics . regularStatementsExecuted . getCount ( ) ) ; QueryProcessor . metrics . preparedStatementsEvicted . dec ( QueryProcessor . metrics . preparedStatementsEvicted . getCount ( ) ) ; } } 

package org . eclipse . debug . internal . ui . launchConfigurations ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . resource . CompositeImageDescriptor ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . graphics . ImageData ; import org . eclipse . swt . graphics . Point ; public class LaunchConfigurationTabImageDescriptor extends CompositeImageDescriptor { public final static int ERROR = <hex> ; private Image fBaseImage ; private int fFlags ; private Point fSize ; public LaunchConfigurationTabImageDescriptor ( Image baseImage , int flags ) { setBaseImage ( baseImage ) ; setFlags ( flags ) ; } @Override protected Point getSize ( ) { if ( fSize = = null ) { ImageData data = getBaseImage ( ) . getImageData ( ) ; setSize ( new Point ( data . width , data . height ) ) ; } return fSize ; } @Override public boolean equals ( Object object ) { if ( ! ( object instanceof LaunchConfigurationTabImageDescriptor ) ) { return false ; } LaunchConfigurationTabImageDescriptor other = ( LaunchConfigurationTabImageDescriptor ) object ; return ( getBaseImage ( ) . equals ( other . getBaseImage ( ) ) & & getFlags ( ) = = other . getFlags ( ) ) ; } @Override public int hashCode ( ) { return getBaseImage ( ) . hashCode ( ) | getFlags ( ) ; } @Override protected void drawCompositeImage ( int width , int height ) { ImageData bg = getBaseImage ( ) . getImageData ( ) ; if ( bg = = null ) { bg = DEFAULT_IMAGE_DATA ; } drawImage ( bg , <int> , <int> ) ; drawOverlays ( ) ; } protected void drawOverlays ( ) { int flags = getFlags ( ) ; ImageData data = null ; if ( ( flags & ERROR ) ! = <int> ) { data = DebugUITools . getImage ( IDebugUIConstants . IMG_OVR_ERROR ) . getImageData ( ) ; drawImage ( data , <int> , <int> ) ; } } protected Image getBaseImage ( ) { return fBaseImage ; } protected void setBaseImage ( Image baseImage ) { fBaseImage = baseImage ; } protected int getFlags ( ) { return fFlags ; } protected void setFlags ( int flags ) { fFlags = flags ; } protected void setSize ( Point size ) { fSize = size ; } } 

package org . elasticsearch . action . termvectors ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . Fields ; import org . apache . lucene . index . Terms ; import org . apache . lucene . index . TermsEnum ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . common . lucene . uid . Versions ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexNotFoundException ; import org . elasticsearch . index . engine . VersionConflictEngineException ; import java . io . IOException ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class MultiTermVectorsIT extends AbstractTermVectorsTestCase { public void testDuelESLucene ( ) throws Exception { AbstractTermVectorsTestCase . TestFieldSetting [ ] testFieldSettings = getFieldSettings ( ) ; createIndexBasedOnFieldSettings ( <str> , <str> , testFieldSettings ) ; TestDoc [ ] testDocs = generateTestDocs ( <str> , testFieldSettings ) ; DirectoryReader directoryReader = indexDocsWithLucene ( testDocs ) ; AbstractTermVectorsTestCase . TestConfig [ ] testConfigs = generateTestConfigs ( <int> , testDocs , testFieldSettings ) ; MultiTermVectorsRequestBuilder requestBuilder = client ( ) . prepareMultiTermVectors ( ) ; for ( AbstractTermVectorsTestCase . TestConfig test : testConfigs ) { requestBuilder . add ( getRequestForConfig ( test ) . request ( ) ) ; } MultiTermVectorsItemResponse [ ] responseItems = requestBuilder . get ( ) . getResponses ( ) ; for ( int i = <int> ; i < testConfigs . length ; i + + ) { TestConfig test = testConfigs [ i ] ; try { MultiTermVectorsItemResponse item = responseItems [ i ] ; if ( test . expectedException ! = null ) { assertTrue ( item . isFailed ( ) ) ; continue ; } else if ( item . isFailed ( ) ) { fail ( item . getFailure ( ) . getCause ( ) . getMessage ( ) ) ; } Fields luceneTermVectors = getTermVectorsFromLucene ( directoryReader , test . doc ) ; validateResponse ( item . getResponse ( ) , luceneTermVectors , test ) ; } catch ( Throwable t ) { throw new Exception ( <str> + test . toString ( ) , t ) ; } } } public void testMissingIndexThrowsMissingIndex ( ) throws Exception { TermVectorsRequestBuilder requestBuilder = client ( ) . prepareTermVectors ( <str> , <str> , Integer . toString ( <int> ) ) ; MultiTermVectorsRequestBuilder mtvBuilder = client ( ) . prepareMultiTermVectors ( ) ; mtvBuilder . add ( requestBuilder . request ( ) ) ; MultiTermVectorsResponse response = mtvBuilder . execute ( ) . actionGet ( ) ; assertThat ( response . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getCause ( ) , instanceOf ( IndexNotFoundException . class ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getCause ( ) . getMessage ( ) , equalTo ( <str> ) ) ; } public void testMultiTermVectorsWithVersion ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , - <int> ) ) ) ; ensureGreen ( ) ; MultiTermVectorsResponse response = client ( ) . prepareMultiTermVectors ( ) . add ( indexOrAlias ( ) , <str> , <str> ) . get ( ) ; assertThat ( response . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( false ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , <str> + i ) . get ( ) ; } response = client ( ) . prepareMultiTermVectors ( ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( Versions . MATCH_ANY ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( <int> ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( <int> ) ) . get ( ) ; assertThat ( response . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , nullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; checkTermTexts ( response . getResponses ( ) [ <int> ] . getResponse ( ) . getFields ( ) . terms ( <str> ) , new String [ ] { <str> } ) ; assertThat ( response . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , nullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; checkTermTexts ( response . getResponses ( ) [ <int> ] . getResponse ( ) . getFields ( ) . terms ( <str> ) , new String [ ] { <str> } ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , notNullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getCause ( ) , instanceOf ( VersionConflictEngineException . class ) ) ; refresh ( ) ; response = client ( ) . prepareMultiTermVectors ( ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( Versions . MATCH_ANY ) . realtime ( false ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( <int> ) . realtime ( false ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( <int> ) . realtime ( false ) ) . get ( ) ; assertThat ( response . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , nullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; checkTermTexts ( response . getResponses ( ) [ <int> ] . getResponse ( ) . getFields ( ) . terms ( <str> ) , new String [ ] { <str> } ) ; assertThat ( response . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , nullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; checkTermTexts ( response . getResponses ( ) [ <int> ] . getResponse ( ) . getFields ( ) . terms ( <str> ) , new String [ ] { <str> } ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , notNullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getCause ( ) , instanceOf ( VersionConflictEngineException . class ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , <str> + i ) . get ( ) ; } response = client ( ) . prepareMultiTermVectors ( ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( Versions . MATCH_ANY ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( <int> ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( <int> ) ) . get ( ) ; assertThat ( response . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , nullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; checkTermTexts ( response . getResponses ( ) [ <int> ] . getResponse ( ) . getFields ( ) . terms ( <str> ) , new String [ ] { <str> } ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , notNullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getCause ( ) , instanceOf ( VersionConflictEngineException . class ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , nullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; checkTermTexts ( response . getResponses ( ) [ <int> ] . getResponse ( ) . getFields ( ) . terms ( <str> ) , new String [ ] { <str> } ) ; refresh ( ) ; response = client ( ) . prepareMultiTermVectors ( ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( Versions . MATCH_ANY ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( <int> ) ) . add ( new TermVectorsRequest ( indexOrAlias ( ) , <str> , <str> ) . selectedFields ( <str> ) . version ( <int> ) ) . get ( ) ; assertThat ( response . getResponses ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , nullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; checkTermTexts ( response . getResponses ( ) [ <int> ] . getResponse ( ) . getFields ( ) . terms ( <str> ) , new String [ ] { <str> } ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , notNullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) . getCause ( ) , instanceOf ( VersionConflictEngineException . class ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getFailure ( ) , nullValue ( ) ) ; assertThat ( response . getResponses ( ) [ <int> ] . getResponse ( ) . isExists ( ) , equalTo ( true ) ) ; checkTermTexts ( response . getResponses ( ) [ <int> ] . getResponse ( ) . getFields ( ) . terms ( <str> ) , new String [ ] { <str> } ) ; } private static String indexOrAlias ( ) { return randomBoolean ( ) ? <str> : <str> ; } private void checkTermTexts ( Terms terms , String [ ] expectedTexts ) throws IOException { final TermsEnum termsEnum = terms . iterator ( ) ; for ( String expectedText : expectedTexts ) { assertThat ( termsEnum . next ( ) . utf8ToString ( ) , equalTo ( expectedText ) ) ; } } } 

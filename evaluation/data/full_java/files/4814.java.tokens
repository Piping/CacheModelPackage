package org . eclipse . ui . internal . console ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . Iterator ; import java . util . List ; import java . util . Set ; import java . util . regex . PatternSyntaxException ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . ISafeRunnable ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . Platform ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . swt . widgets . Control ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PartInitException ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . console . ConsolePlugin ; import org . eclipse . ui . console . IConsole ; import org . eclipse . ui . console . IConsoleConstants ; import org . eclipse . ui . console . IConsoleListener ; import org . eclipse . ui . console . IConsoleManager ; import org . eclipse . ui . console . IConsolePageParticipant ; import org . eclipse . ui . console . IConsoleView ; import org . eclipse . ui . console . IPatternMatchListener ; import org . eclipse . ui . console . TextConsole ; import org . eclipse . ui . progress . UIJob ; import org . eclipse . ui . progress . WorkbenchJob ; public class ConsoleManager implements IConsoleManager { private ListenerList fListeners = null ; private List < IConsole > fConsoles = new ArrayList < IConsole > ( <int> ) ; private final static int ADDED = <int> ; private final static int REMOVED = <int> ; private List < PatternMatchListenerExtension > fPatternMatchListeners ; private List < ConsolePageParticipantExtension > fPageParticipants ; private List < ConsoleFactoryExtension > fConsoleFactoryExtensions ; private List < IConsoleView > fConsoleViews = new ArrayList < IConsoleView > ( ) ; private boolean fWarnQueued = false ; private RepaintJob fRepaintJob = new RepaintJob ( ) ; private class RepaintJob extends WorkbenchJob { private Set < IConsole > list = new HashSet < IConsole > ( ) ; public RepaintJob ( ) { super ( <str> ) ; setSystem ( true ) ; } void addConsole ( IConsole console ) { synchronized ( list ) { list . add ( console ) ; } } @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { synchronized ( list ) { if ( list . isEmpty ( ) ) { return Status . OK_STATUS ; } IWorkbenchWindow [ ] workbenchWindows = PlatformUI . getWorkbench ( ) . getWorkbenchWindows ( ) ; for ( int i = <int> ; i < workbenchWindows . length ; i + + ) { IWorkbenchWindow window = workbenchWindows [ i ] ; if ( window ! = null ) { IWorkbenchPage page = window . getActivePage ( ) ; if ( page ! = null ) { IViewPart part = page . findView ( IConsoleConstants . ID_CONSOLE_VIEW ) ; if ( part ! = null & & part instanceof IConsoleView ) { ConsoleView view = ( ConsoleView ) part ; if ( list . contains ( view . getConsole ( ) ) ) { Control control = view . getCurrentPage ( ) . getControl ( ) ; if ( ! control . isDisposed ( ) ) { control . redraw ( ) ; } } } } } } list . clear ( ) ; } return Status . OK_STATUS ; } } class ConsoleNotifier implements ISafeRunnable { private IConsoleListener fListener ; private int fType ; private IConsole [ ] fChanged ; @Override public void handleException ( Throwable exception ) { IStatus status = new Status ( IStatus . ERROR , ConsolePlugin . getUniqueIdentifier ( ) , IConsoleConstants . INTERNAL_ERROR , ConsoleMessages . ConsoleManager_0 , exception ) ; ConsolePlugin . log ( status ) ; } @Override public void run ( ) throws Exception { switch ( fType ) { case ADDED : fListener . consolesAdded ( fChanged ) ; break ; case REMOVED : fListener . consolesRemoved ( fChanged ) ; break ; default : break ; } } public void notify ( IConsole [ ] consoles , int update ) { if ( fListeners = = null ) { return ; } fChanged = consoles ; fType = update ; Object [ ] copiedListeners = fListeners . getListeners ( ) ; for ( int i = <int> ; i < copiedListeners . length ; i + + ) { fListener = ( IConsoleListener ) copiedListeners [ i ] ; SafeRunner . run ( this ) ; } fChanged = null ; fListener = null ; } } public void registerConsoleView ( ConsoleView view ) { synchronized ( fConsoleViews ) { fConsoleViews . add ( view ) ; } } public void unregisterConsoleView ( ConsoleView view ) { synchronized ( fConsoleViews ) { fConsoleViews . remove ( view ) ; } } @Override public void addConsoleListener ( IConsoleListener listener ) { if ( fListeners = = null ) { fListeners = new ListenerList ( ) ; } fListeners . add ( listener ) ; } @Override public void removeConsoleListener ( IConsoleListener listener ) { if ( fListeners ! = null ) { fListeners . remove ( listener ) ; } } @Override public void addConsoles ( IConsole [ ] consoles ) { List < IConsole > added = new ArrayList < IConsole > ( consoles . length ) ; synchronized ( fConsoles ) { for ( int i = <int> ; i < consoles . length ; i + + ) { IConsole console = consoles [ i ] ; if ( console instanceof TextConsole ) { TextConsole ioconsole = ( TextConsole ) console ; createPatternMatchListeners ( ioconsole ) ; } if ( ! fConsoles . contains ( console ) ) { fConsoles . add ( console ) ; added . add ( console ) ; } } } if ( ! added . isEmpty ( ) ) { fireUpdate ( added . toArray ( new IConsole [ added . size ( ) ] ) , ADDED ) ; } } @Override public void removeConsoles ( IConsole [ ] consoles ) { List < IConsole > removed = new ArrayList < IConsole > ( consoles . length ) ; synchronized ( fConsoles ) { for ( int i = <int> ; i < consoles . length ; i + + ) { IConsole console = consoles [ i ] ; if ( fConsoles . remove ( console ) ) { removed . add ( console ) ; } } } if ( ! removed . isEmpty ( ) ) { fireUpdate ( removed . toArray ( new IConsole [ removed . size ( ) ] ) , REMOVED ) ; } } @Override public IConsole [ ] getConsoles ( ) { synchronized ( fConsoles ) { return fConsoles . toArray ( new IConsole [ fConsoles . size ( ) ] ) ; } } private void fireUpdate ( IConsole [ ] consoles , int type ) { new ConsoleNotifier ( ) . notify ( consoles , type ) ; } private class ShowConsoleViewJob extends WorkbenchJob { private IConsole console ; ShowConsoleViewJob ( ) { super ( <str> ) ; setSystem ( true ) ; setPriority ( Job . SHORT ) ; } void setConsole ( IConsole console ) { this . console = console ; } @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { boolean consoleFound = false ; IWorkbenchWindow window = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; if ( window ! = null & & console ! = null ) { IWorkbenchPage page = window . getActivePage ( ) ; if ( page ! = null ) { synchronized ( fConsoleViews ) { for ( IConsoleView consoleView : fConsoleViews ) { if ( consoleView . getSite ( ) . getPage ( ) . equals ( page ) ) { boolean consoleVisible = page . isPartVisible ( consoleView ) ; if ( consoleVisible ) { consoleFound = true ; boolean bringToTop = shouldBringToTop ( console , consoleView ) ; if ( bringToTop ) { page . bringToTop ( consoleView ) ; } consoleView . display ( console ) ; } } } } if ( ! consoleFound ) { try { IConsoleView consoleView = ( IConsoleView ) page . showView ( IConsoleConstants . ID_CONSOLE_VIEW , null , IWorkbenchPage . VIEW_CREATE ) ; boolean bringToTop = shouldBringToTop ( console , consoleView ) ; if ( bringToTop ) { page . bringToTop ( consoleView ) ; } consoleView . display ( console ) ; } catch ( PartInitException pie ) { ConsolePlugin . log ( pie ) ; } } } } console = null ; return Status . OK_STATUS ; } } private ShowConsoleViewJob showJob = new ShowConsoleViewJob ( ) ; @Override public void showConsoleView ( final IConsole console ) { showJob . setConsole ( console ) ; showJob . schedule ( <int> ) ; } private boolean shouldBringToTop ( IConsole console , IViewPart consoleView ) { boolean bringToTop = true ; if ( consoleView instanceof IConsoleView ) { IConsoleView cView = ( IConsoleView ) consoleView ; if ( cView . isPinned ( ) ) { IConsole pinnedConsole = cView . getConsole ( ) ; bringToTop = console . equals ( pinnedConsole ) ; } } return bringToTop ; } @Override public void warnOfContentChange ( final IConsole console ) { if ( ! fWarnQueued ) { fWarnQueued = true ; Job job = new UIJob ( ConsolePlugin . getStandardDisplay ( ) , ConsoleMessages . ConsoleManager_consoleContentChangeJob ) { @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { IWorkbenchWindow window = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { IWorkbenchPage page = window . getActivePage ( ) ; if ( page ! = null ) { IConsoleView consoleView = ( IConsoleView ) page . findView ( IConsoleConstants . ID_CONSOLE_VIEW ) ; if ( consoleView ! = null ) { consoleView . warnOfContentChange ( console ) ; } } } fWarnQueued = false ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; } } @Override public IPatternMatchListener [ ] createPatternMatchListeners ( IConsole console ) { if ( fPatternMatchListeners = = null ) { fPatternMatchListeners = new ArrayList < PatternMatchListenerExtension > ( ) ; IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( ConsolePlugin . getUniqueIdentifier ( ) , IConsoleConstants . EXTENSION_POINT_CONSOLE_PATTERN_MATCH_LISTENERS ) ; IConfigurationElement [ ] elements = extensionPoint . getConfigurationElements ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { IConfigurationElement config = elements [ i ] ; PatternMatchListenerExtension extension = new PatternMatchListenerExtension ( config ) ; fPatternMatchListeners . add ( extension ) ; } } ArrayList < PatternMatchListener > list = new ArrayList < PatternMatchListener > ( ) ; for ( Iterator < PatternMatchListenerExtension > i = fPatternMatchListeners . iterator ( ) ; i . hasNext ( ) ; ) { PatternMatchListenerExtension extension = i . next ( ) ; try { if ( extension . getEnablementExpression ( ) = = null ) { i . remove ( ) ; continue ; } if ( console instanceof TextConsole & & extension . isEnabledFor ( console ) ) { TextConsole textConsole = ( TextConsole ) console ; PatternMatchListener patternMatchListener = new PatternMatchListener ( extension ) ; try { textConsole . addPatternMatchListener ( patternMatchListener ) ; list . add ( patternMatchListener ) ; } catch ( PatternSyntaxException e ) { ConsolePlugin . log ( e ) ; i . remove ( ) ; } } } catch ( CoreException e ) { ConsolePlugin . log ( e ) ; } } return list . toArray ( new PatternMatchListener [ <int> ] ) ; } public IConsolePageParticipant [ ] getPageParticipants ( IConsole console ) { if ( fPageParticipants = = null ) { fPageParticipants = new ArrayList < ConsolePageParticipantExtension > ( ) ; IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( ConsolePlugin . getUniqueIdentifier ( ) , IConsoleConstants . EXTENSION_POINT_CONSOLE_PAGE_PARTICIPANTS ) ; IConfigurationElement [ ] elements = extensionPoint . getConfigurationElements ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { IConfigurationElement config = elements [ i ] ; ConsolePageParticipantExtension extension = new ConsolePageParticipantExtension ( config ) ; fPageParticipants . add ( extension ) ; } } ArrayList < IConsolePageParticipant > list = new ArrayList < IConsolePageParticipant > ( ) ; for ( Iterator < ConsolePageParticipantExtension > i = fPageParticipants . iterator ( ) ; i . hasNext ( ) ; ) { ConsolePageParticipantExtension extension = i . next ( ) ; try { if ( extension . isEnabledFor ( console ) ) { list . add ( extension . createDelegate ( ) ) ; } } catch ( CoreException e ) { ConsolePlugin . log ( e ) ; } } return list . toArray ( new IConsolePageParticipant [ <int> ] ) ; } public ConsoleFactoryExtension [ ] getConsoleFactoryExtensions ( ) { if ( fConsoleFactoryExtensions = = null ) { fConsoleFactoryExtensions = new ArrayList < ConsoleFactoryExtension > ( ) ; IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( ConsolePlugin . getUniqueIdentifier ( ) , IConsoleConstants . EXTENSION_POINT_CONSOLE_FACTORIES ) ; IConfigurationElement [ ] configurationElements = extensionPoint . getConfigurationElements ( ) ; for ( int i = <int> ; i < configurationElements . length ; i + + ) { fConsoleFactoryExtensions . add ( new ConsoleFactoryExtension ( configurationElements [ i ] ) ) ; } } return fConsoleFactoryExtensions . toArray ( new ConsoleFactoryExtension [ <int> ] ) ; } @Override public void refresh ( final IConsole console ) { fRepaintJob . addConsole ( console ) ; fRepaintJob . schedule ( <int> ) ; } } 

package org . gradle . internal . resource . transfer ; import org . apache . commons . lang . StringUtils ; import org . gradle . logging . ProgressLogger ; public class ResourceOperation { public enum Type { download , upload ; public String getCapitalized ( ) { return StringUtils . capitalize ( toString ( ) ) ; } } private final ProgressLogger progressLogger ; private final Type operationType ; private final String contentLengthString ; private long loggedKBytes ; private long totalProcessedBytes ; public ResourceOperation ( ProgressLogger progressLogger , Type type , long contentLength ) { this . progressLogger = progressLogger ; this . operationType = type ; this . contentLengthString = getLengthText ( contentLength ! = <int> ? contentLength : null ) ; } private String getLengthText ( Long bytes ) { if ( bytes = = null ) { return <str> ; } if ( bytes < <int> ) { return bytes + <str> ; } else if ( bytes < <int> ) { return ( bytes / <int> ) + <str> ; } else { return String . format ( <str> , bytes / <float> ) ; } } public void logProcessedBytes ( long processedBytes ) { totalProcessedBytes + = processedBytes ; long processedKB = totalProcessedBytes / <int> ; if ( processedKB > loggedKBytes ) { loggedKBytes = processedKB ; final String progressMessage = String . format ( <str> , getLengthText ( totalProcessedBytes ) , contentLengthString , operationType ) ; progressLogger . progress ( progressMessage ) ; } } public void completed ( ) { this . progressLogger . completed ( ) ; } } 

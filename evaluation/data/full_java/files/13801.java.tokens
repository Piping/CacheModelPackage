package org . gradle . launcher . daemon . client ; import org . gradle . api . GradleException ; import org . gradle . api . JavaVersion ; import org . gradle . api . UncheckedIOException ; import org . gradle . internal . jvm . JavaInfo ; import org . gradle . internal . jvm . Jvm ; import org . gradle . process . internal . ExecHandleBuilder ; import java . io . * ; import java . util . HashMap ; import java . util . Map ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class JvmVersionDetector { private final Map < JavaInfo , JavaVersion > cachedResults = new HashMap < JavaInfo , JavaVersion > ( ) ; public JvmVersionDetector ( ) { cachedResults . put ( Jvm . current ( ) , JavaVersion . current ( ) ) ; } public JavaVersion getJavaVersion ( JavaInfo jvm ) { JavaVersion version = cachedResults . get ( jvm ) ; if ( version ! = null ) { return version ; } ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; ExecHandleBuilder builder = new ExecHandleBuilder ( ) ; builder . setWorkingDir ( new File ( <str> ) . getAbsolutePath ( ) ) ; builder . setCommandLine ( jvm . getJavaExecutable ( ) , <str> ) ; builder . setStandardOutput ( new ByteArrayOutputStream ( ) ) ; builder . setErrorOutput ( outputStream ) ; builder . build ( ) . start ( ) . waitForFinish ( ) . assertNormalExitValue ( ) ; version = parseJavaVersionCommandOutput ( jvm . getJavaExecutable ( ) . getPath ( ) , new BufferedReader ( new InputStreamReader ( new ByteArrayInputStream ( outputStream . toByteArray ( ) ) ) ) ) ; cachedResults . put ( jvm , version ) ; return version ; } JavaVersion parseJavaVersionCommandOutput ( String javaExecutable , BufferedReader reader ) { try { String versionStr = reader . readLine ( ) ; while ( versionStr ! = null ) { Matcher matcher = Pattern . compile ( <str> ) . matcher ( versionStr ) ; if ( matcher . matches ( ) ) { return JavaVersion . toVersion ( matcher . group ( <int> ) ) ; } versionStr = reader . readLine ( ) ; } } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } throw new GradleException ( String . format ( <str> , javaExecutable ) ) ; } } 

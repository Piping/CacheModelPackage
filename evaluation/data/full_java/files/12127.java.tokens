package org . gradle . internal . service . scopes ; import org . gradle . StartParameter ; import org . gradle . api . execution . TaskActionListener ; import org . gradle . api . execution . internal . TaskInputsListener ; import org . gradle . api . internal . cache . StringInterner ; import org . gradle . api . internal . changedetection . TaskArtifactStateRepository ; import org . gradle . api . internal . changedetection . changes . DefaultTaskArtifactStateRepository ; import org . gradle . api . internal . changedetection . changes . ShortCircuitTaskArtifactStateRepository ; import org . gradle . api . internal . changedetection . state . * ; import org . gradle . api . internal . hash . DefaultHasher ; import org . gradle . api . internal . tasks . TaskExecuter ; import org . gradle . api . internal . tasks . execution . * ; import org . gradle . api . invocation . Gradle ; import org . gradle . cache . CacheRepository ; import org . gradle . cache . internal . CacheDecorator ; import org . gradle . execution . taskgraph . TaskPlanExecutor ; import org . gradle . execution . taskgraph . TaskPlanExecutorFactory ; import org . gradle . internal . concurrent . ExecutorFactory ; import org . gradle . internal . environment . GradleBuildEnvironment ; import org . gradle . internal . event . ListenerManager ; import org . gradle . internal . id . RandomLongIdGenerator ; import org . gradle . internal . operations . BuildOperationProcessor ; import org . gradle . internal . operations . DefaultBuildOperationProcessor ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . serialize . DefaultSerializerRegistry ; import org . gradle . internal . serialize . SerializerRegistry ; public class TaskExecutionServices { TaskExecuter createTaskExecuter ( TaskArtifactStateRepository repository , ListenerManager listenerManager , Gradle gradle ) { boolean isOuterBuild = gradle . getParent ( ) = = null ; TaskInputsListener taskInputsListener = isOuterBuild ? listenerManager . getBroadcaster ( TaskInputsListener . class ) : TaskInputsListener . NOOP ; return new ExecuteAtMostOnceTaskExecuter ( new SkipOnlyIfTaskExecuter ( new SkipTaskWithNoActionsExecuter ( new SkipEmptySourceFilesTaskExecuter ( taskInputsListener , new ValidatingTaskExecuter ( new SkipUpToDateTaskExecuter ( repository , new PostExecutionAnalysisTaskExecuter ( new ExecuteActionsTaskExecuter ( listenerManager . getBroadcaster ( TaskActionListener . class ) ) ) ) ) ) ) ) ) ; } TaskArtifactStateCacheAccess createCacheAccess ( Gradle gradle , CacheRepository cacheRepository , InMemoryTaskArtifactCache inMemoryTaskArtifactCache , GradleBuildEnvironment environment ) { CacheDecorator decorator ; if ( environment . isLongLivingProcess ( ) ) { decorator = inMemoryTaskArtifactCache ; } else { decorator = new NoOpDecorator ( ) ; } return new DefaultTaskArtifactStateCacheAccess ( gradle , cacheRepository , decorator ) ; } FileSnapshotter createFileSnapshotter ( TaskArtifactStateCacheAccess cacheAccess , StringInterner stringInterner ) { return new CachingFileSnapshotter ( new DefaultHasher ( ) , cacheAccess , stringInterner ) ; } TaskArtifactStateRepository createTaskArtifactStateRepository ( Instantiator instantiator , TaskArtifactStateCacheAccess cacheAccess , StartParameter startParameter , FileSnapshotter fileSnapshotter , StringInterner stringInterner ) { FileCollectionSnapshotter fileCollectionSnapshotter = new DefaultFileCollectionSnapshotter ( fileSnapshotter , cacheAccess , stringInterner ) ; FileCollectionSnapshotter discoveredFileCollectionSnapshotter = new MinimalFileSetSnapshotter ( fileSnapshotter , cacheAccess , stringInterner ) ; FileCollectionSnapshotter outputFilesSnapshotter = new OutputFilesCollectionSnapshotter ( fileCollectionSnapshotter , new RandomLongIdGenerator ( ) , cacheAccess , stringInterner ) ; SerializerRegistry < FileCollectionSnapshot > serializerRegistry = new DefaultSerializerRegistry < FileCollectionSnapshot > ( ) ; fileCollectionSnapshotter . registerSerializers ( serializerRegistry ) ; outputFilesSnapshotter . registerSerializers ( serializerRegistry ) ; fileCollectionSnapshotter . registerSerializers ( serializerRegistry ) ; TaskHistoryRepository taskHistoryRepository = new CacheBackedTaskHistoryRepository ( cacheAccess , new CacheBackedFileSnapshotRepository ( cacheAccess , serializerRegistry . build ( ) , new RandomLongIdGenerator ( ) ) , stringInterner ) ; return new ShortCircuitTaskArtifactStateRepository ( startParameter , instantiator , new DefaultTaskArtifactStateRepository ( taskHistoryRepository , instantiator , outputFilesSnapshotter , fileCollectionSnapshotter , discoveredFileCollectionSnapshotter ) ) ; } TaskPlanExecutor createTaskExecutorFactory ( StartParameter startParameter , ExecutorFactory executorFactory ) { return new TaskPlanExecutorFactory ( startParameter . getParallelThreadCount ( ) , executorFactory ) . create ( ) ; } BuildOperationProcessor createBuildOperationProcessor ( StartParameter startParameter , ExecutorFactory executorFactory ) { return new DefaultBuildOperationProcessor ( executorFactory , startParameter . getMaxWorkerCount ( ) ) ; } } 

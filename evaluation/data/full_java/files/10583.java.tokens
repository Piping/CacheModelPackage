package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . TestListGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . List ; @GwtCompatible ( emulated = true ) public class ByteArrayAsListTest extends TestCase { private static List < Byte > asList ( Byte [ ] values ) { byte [ ] temp = new byte [ values . length ] ; for ( int i = <int> ; i < values . length ; i + + ) { temp [ i ] = checkNotNull ( values [ i ] ) ; } return Bytes . asList ( temp ) ; } @GwtIncompatible ( <str> ) public static Test suite ( ) { List < ListTestSuiteBuilder < Byte > > builders = ImmutableList . of ( ListTestSuiteBuilder . using ( new BytesAsListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new BytesAsListHeadSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new BytesAsListTailSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new BytesAsListMiddleSubListGenerator ( ) ) . named ( <str> ) ) ; TestSuite suite = new TestSuite ( ) ; for ( ListTestSuiteBuilder < Byte > builder : builders ) { suite . addTest ( builder . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . RESTRICTS_ELEMENTS , ListFeature . SUPPORTS_SET ) . createTestSuite ( ) ) ; } return suite ; } public static final class BytesAsListGenerator extends TestByteListGenerator { @Override protected List < Byte > create ( Byte [ ] elements ) { return asList ( elements ) ; } } public static final class BytesAsListHeadSubListGenerator extends TestByteListGenerator { @Override protected List < Byte > create ( Byte [ ] elements ) { Byte [ ] suffix = { Byte . MIN_VALUE , Byte . MAX_VALUE } ; Byte [ ] all = concat ( elements , suffix ) ; return asList ( all ) . subList ( <int> , elements . length ) ; } } public static final class BytesAsListTailSubListGenerator extends TestByteListGenerator { @Override protected List < Byte > create ( Byte [ ] elements ) { Byte [ ] prefix = { ( byte ) <int> , ( byte ) <int> } ; Byte [ ] all = concat ( prefix , elements ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } public static final class BytesAsListMiddleSubListGenerator extends TestByteListGenerator { @Override protected List < Byte > create ( Byte [ ] elements ) { Byte [ ] prefix = { Byte . MIN_VALUE , Byte . MAX_VALUE } ; Byte [ ] suffix = { ( byte ) <int> , ( byte ) <int> } ; Byte [ ] all = concat ( concat ( prefix , elements ) , suffix ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } private static Byte [ ] concat ( Byte [ ] left , Byte [ ] right ) { Byte [ ] result = new Byte [ left . length + right . length ] ; System . arraycopy ( left , <int> , result , <int> , left . length ) ; System . arraycopy ( right , <int> , result , left . length , right . length ) ; return result ; } public static abstract class TestByteListGenerator implements TestListGenerator < Byte > { @Override public SampleElements < Byte > samples ( ) { return new SampleBytes ( ) ; } @Override public List < Byte > create ( Object . . . elements ) { Byte [ ] array = new Byte [ elements . length ] ; int i = <int> ; for ( Object e : elements ) { array [ i + + ] = ( Byte ) e ; } return create ( array ) ; } protected abstract List < Byte > create ( Byte [ ] elements ) ; @Override public Byte [ ] createArray ( int length ) { return new Byte [ length ] ; } @Override public List < Byte > order ( List < Byte > insertionOrder ) { return insertionOrder ; } } public static class SampleBytes extends SampleElements < Byte > { public SampleBytes ( ) { super ( ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> ) ; } } } 

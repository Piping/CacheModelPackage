package org . nd4j . linalg . api . ops . impl . indexaccum ; import org . apache . commons . math3 . util . FastMath ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . BaseIndexAccumulation ; import org . nd4j . linalg . api . ops . Op ; import org . nd4j . linalg . factory . Nd4j ; public class IMin extends BaseIndexAccumulation { public IMin ( ) { } public IMin ( INDArray x , INDArray y , int n ) { super ( x , y , n ) ; } public IMin ( INDArray x ) { super ( x ) ; } public IMin ( INDArray x , INDArray y ) { super ( x , y ) ; } public int update ( double accum , int accumIdx , double x , int xIdx ) { return ( accum < = x ? accumIdx : xIdx ) ; } public int update ( float accum , int accumIdx , float x , int xIdx ) { return ( accum < = x ? accumIdx : xIdx ) ; } public int update ( double accum , int accumIdx , double x , double y , int idx ) { return ( accum < = x ? accumIdx : idx ) ; } public int update ( float accum , int accumIdx , float x , float y , int idx ) { return ( accum < = x ? accumIdx : idx ) ; } public int update ( IComplexNumber accum , int accumIdx , IComplexNumber x , int xIdx ) { return ( accum . absoluteValue ( ) . doubleValue ( ) < = x . absoluteValue ( ) . doubleValue ( ) ? accumIdx : xIdx ) ; } @Override public int update ( IComplexNumber accum , int accumIdx , double x , int idx ) { return ( accum . absoluteValue ( ) . doubleValue ( ) < = x ? accumIdx : idx ) ; } @Override public int update ( IComplexNumber accum , int accumIdx , double x , double y , int idx ) { return ( accum . absoluteValue ( ) . doubleValue ( ) < = x ? accumIdx : idx ) ; } public int update ( IComplexNumber accum , int accumIdx , IComplexNumber x , IComplexNumber y , int idx ) { return ( accum . absoluteValue ( ) . doubleValue ( ) < = x . absoluteValue ( ) . doubleValue ( ) ? accumIdx : idx ) ; } @Override public String name ( ) { return <str> ; } @Override public IComplexNumber op ( IComplexNumber origin , double other ) { return origin ; } @Override public IComplexNumber op ( IComplexNumber origin , float other ) { return origin ; } @Override public IComplexNumber op ( IComplexNumber origin , IComplexNumber other ) { return origin ; } @Override public float op ( float origin , float other ) { return origin ; } @Override public double op ( double origin , double other ) { return origin ; } @Override public double op ( double origin ) { return origin ; } @Override public float op ( float origin ) { return origin ; } @Override public IComplexNumber op ( IComplexNumber origin ) { return origin ; } @Override public float zeroFloat ( ) { return Float . MAX_VALUE ; } @Override public double zeroDouble ( ) { return Double . MAX_VALUE ; } @Override public IComplexNumber zeroComplex ( ) { return Nd4j . createComplexNumber ( Double . MAX_VALUE , <int> ) ; } @Override public Op opForDimension ( int index , int dimension ) { INDArray xAlongDimension = x . vectorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new IMin ( xAlongDimension , y . vectorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; else return new IMin ( x . vectorAlongDimension ( index , dimension ) ) ; } @Override public Op opForDimension ( int index , int . . . dimension ) { INDArray xAlongDimension = x . tensorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new IMin ( xAlongDimension , y . tensorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) ) ; else return new IMin ( x . tensorAlongDimension ( index , dimension ) ) ; } } 

package com . google . common . util . concurrent ; import junit . framework . * ; public class AtomicDoubleTest extends JSR166TestCase { private static final double [ ] VALUES = { Double . NEGATIVE_INFINITY , - Double . MAX_VALUE , ( double ) Long . MIN_VALUE , ( double ) Integer . MIN_VALUE , - Math . PI , - <float> , - Double . MIN_VALUE , - <float> , + <float> , Double . MIN_VALUE , <float> , Math . PI , ( double ) Integer . MAX_VALUE , ( double ) Long . MAX_VALUE , Double . MAX_VALUE , Double . POSITIVE_INFINITY , Double . NaN , Float . MAX_VALUE , } ; static boolean bitEquals ( double x , double y ) { return Double . doubleToRawLongBits ( x ) = = Double . doubleToRawLongBits ( y ) ; } static void assertBitEquals ( double x , double y ) { assertEquals ( Double . doubleToRawLongBits ( x ) , Double . doubleToRawLongBits ( y ) ) ; } public void testConstructor ( ) { for ( double x : VALUES ) { AtomicDouble a = new AtomicDouble ( x ) ; assertBitEquals ( x , a . get ( ) ) ; } } public void testConstructor2 ( ) { AtomicDouble a = new AtomicDouble ( ) ; assertBitEquals ( <float> , a . get ( ) ) ; } public void testGetSet ( ) { AtomicDouble at = new AtomicDouble ( <float> ) ; assertBitEquals ( <float> , at . get ( ) ) ; for ( double x : VALUES ) { at . set ( x ) ; assertBitEquals ( x , at . get ( ) ) ; } } public void testGetLazySet ( ) { AtomicDouble at = new AtomicDouble ( <float> ) ; assertBitEquals ( <float> , at . get ( ) ) ; for ( double x : VALUES ) { at . lazySet ( x ) ; assertBitEquals ( x , at . get ( ) ) ; } } public void testCompareAndSet ( ) { double prev = Math . E ; double unused = Math . E + Math . PI ; AtomicDouble at = new AtomicDouble ( prev ) ; for ( double x : VALUES ) { assertBitEquals ( prev , at . get ( ) ) ; assertFalse ( at . compareAndSet ( unused , x ) ) ; assertBitEquals ( prev , at . get ( ) ) ; assertTrue ( at . compareAndSet ( prev , x ) ) ; assertBitEquals ( x , at . get ( ) ) ; prev = x ; } } public void testCompareAndSetInMultipleThreads ( ) throws Exception { final AtomicDouble at = new AtomicDouble ( <float> ) ; Thread t = newStartedThread ( new CheckedRunnable ( ) { public void realRun ( ) { while ( ! at . compareAndSet ( <float> , <float> ) ) { Thread . yield ( ) ; } } } ) ; assertTrue ( at . compareAndSet ( <float> , <float> ) ) ; awaitTermination ( t ) ; assertBitEquals ( <float> , at . get ( ) ) ; } public void testWeakCompareAndSet ( ) { double prev = Math . E ; double unused = Math . E + Math . PI ; AtomicDouble at = new AtomicDouble ( prev ) ; for ( double x : VALUES ) { assertBitEquals ( prev , at . get ( ) ) ; assertFalse ( at . weakCompareAndSet ( unused , x ) ) ; assertBitEquals ( prev , at . get ( ) ) ; while ( ! at . weakCompareAndSet ( prev , x ) ) { ; } assertBitEquals ( x , at . get ( ) ) ; prev = x ; } } public void testGetAndSet ( ) { double prev = Math . E ; AtomicDouble at = new AtomicDouble ( prev ) ; for ( double x : VALUES ) { assertBitEquals ( prev , at . getAndSet ( x ) ) ; prev = x ; } } public void testGetAndAdd ( ) { for ( double x : VALUES ) { for ( double y : VALUES ) { AtomicDouble a = new AtomicDouble ( x ) ; double z = a . getAndAdd ( y ) ; assertBitEquals ( x , z ) ; assertBitEquals ( x + y , a . get ( ) ) ; } } } public void testAddAndGet ( ) { for ( double x : VALUES ) { for ( double y : VALUES ) { AtomicDouble a = new AtomicDouble ( x ) ; double z = a . addAndGet ( y ) ; assertBitEquals ( x + y , z ) ; assertBitEquals ( x + y , a . get ( ) ) ; } } } public void testSerialization ( ) throws Exception { AtomicDouble a = new AtomicDouble ( ) ; AtomicDouble b = serialClone ( a ) ; assertNotSame ( a , b ) ; a . set ( - <float> ) ; AtomicDouble c = serialClone ( a ) ; assertNotSame ( b , c ) ; assertBitEquals ( - <float> , a . get ( ) ) ; assertBitEquals ( <float> , b . get ( ) ) ; assertBitEquals ( - <float> , c . get ( ) ) ; for ( double x : VALUES ) { AtomicDouble d = new AtomicDouble ( x ) ; assertBitEquals ( serialClone ( d ) . get ( ) , d . get ( ) ) ; } } public void testToString ( ) { AtomicDouble at = new AtomicDouble ( ) ; assertEquals ( <str> , at . toString ( ) ) ; for ( double x : VALUES ) { at . set ( x ) ; assertEquals ( Double . toString ( x ) , at . toString ( ) ) ; } } public void testIntValue ( ) { AtomicDouble at = new AtomicDouble ( ) ; assertEquals ( <int> , at . intValue ( ) ) ; for ( double x : VALUES ) { at . set ( x ) ; assertEquals ( ( int ) x , at . intValue ( ) ) ; } } public void testLongValue ( ) { AtomicDouble at = new AtomicDouble ( ) ; assertEquals ( <int> L , at . longValue ( ) ) ; for ( double x : VALUES ) { at . set ( x ) ; assertEquals ( ( long ) x , at . longValue ( ) ) ; } } public void testFloatValue ( ) { AtomicDouble at = new AtomicDouble ( ) ; assertEquals ( <float> , at . floatValue ( ) ) ; for ( double x : VALUES ) { at . set ( x ) ; assertEquals ( ( float ) x , at . floatValue ( ) ) ; } } public void testDoubleValue ( ) { AtomicDouble at = new AtomicDouble ( ) ; assertEquals ( <float> , at . doubleValue ( ) ) ; for ( double x : VALUES ) { at . set ( x ) ; assertBitEquals ( x , at . doubleValue ( ) ) ; } } public void testDistinctZeros ( ) { AtomicDouble at = new AtomicDouble ( + <float> ) ; assertFalse ( at . compareAndSet ( - <float> , <float> ) ) ; assertFalse ( at . weakCompareAndSet ( - <float> , <float> ) ) ; assertBitEquals ( + <float> , at . get ( ) ) ; assertTrue ( at . compareAndSet ( + <float> , - <float> ) ) ; assertBitEquals ( - <float> , at . get ( ) ) ; assertFalse ( at . compareAndSet ( + <float> , <float> ) ) ; assertFalse ( at . weakCompareAndSet ( + <float> , <float> ) ) ; assertBitEquals ( - <float> , at . get ( ) ) ; } } 

package org . elasticsearch . transport . netty ; import org . elasticsearch . Version ; import org . elasticsearch . cache . recycler . PageCacheRecycler ; import org . elasticsearch . common . component . Lifecycle ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . network . NetworkUtils ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . common . util . MockBigArrays ; import org . elasticsearch . indices . breaker . NoneCircuitBreakerService ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import org . junit . Before ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . is ; public class NettyTransportMultiPortTests extends ESTestCase { private String host ; @Before public void setup ( ) { if ( NetworkUtils . SUPPORTS_V6 & & randomBoolean ( ) ) { host = <str> ; } else { host = <str> ; } } public void testThatNettyCanBindToMultiplePorts ( ) throws Exception { Settings settings = settingsBuilder ( ) . put ( <str> , host ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; ThreadPool threadPool = new ThreadPool ( <str> ) ; try ( NettyTransport transport = startNettyTransport ( settings , threadPool ) ) { assertEquals ( <int> , transport . profileBoundAddresses ( ) . size ( ) ) ; assertEquals ( <int> , transport . boundAddress ( ) . boundAddresses ( ) . length ) ; } finally { terminate ( threadPool ) ; } } public void testThatDefaultProfileInheritsFromStandardSettings ( ) throws Exception { Settings settings = settingsBuilder ( ) . put ( <str> , host ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; ThreadPool threadPool = new ThreadPool ( <str> ) ; try ( NettyTransport transport = startNettyTransport ( settings , threadPool ) ) { assertEquals ( <int> , transport . profileBoundAddresses ( ) . size ( ) ) ; assertEquals ( <int> , transport . boundAddress ( ) . boundAddresses ( ) . length ) ; } finally { terminate ( threadPool ) ; } } public void testThatProfileWithoutPortSettingsFails ( ) throws Exception { Settings settings = settingsBuilder ( ) . put ( <str> , host ) . put ( <str> , <int> ) . put ( <str> , <str> ) . build ( ) ; ThreadPool threadPool = new ThreadPool ( <str> ) ; try ( NettyTransport transport = startNettyTransport ( settings , threadPool ) ) { assertEquals ( <int> , transport . profileBoundAddresses ( ) . size ( ) ) ; assertEquals ( <int> , transport . boundAddress ( ) . boundAddresses ( ) . length ) ; } finally { terminate ( threadPool ) ; } } public void testThatDefaultProfilePortOverridesGeneralConfiguration ( ) throws Exception { Settings settings = settingsBuilder ( ) . put ( <str> , host ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; ThreadPool threadPool = new ThreadPool ( <str> ) ; try ( NettyTransport transport = startNettyTransport ( settings , threadPool ) ) { assertEquals ( <int> , transport . profileBoundAddresses ( ) . size ( ) ) ; assertEquals ( <int> , transport . boundAddress ( ) . boundAddresses ( ) . length ) ; } finally { terminate ( threadPool ) ; } } public void testThatProfileWithoutValidNameIsIgnored ( ) throws Exception { Settings settings = settingsBuilder ( ) . put ( <str> , host ) . put ( <str> , <int> ) . put ( <str> + TransportService . DIRECT_RESPONSE_PROFILE + <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; ThreadPool threadPool = new ThreadPool ( <str> ) ; try ( NettyTransport transport = startNettyTransport ( settings , threadPool ) ) { assertEquals ( <int> , transport . profileBoundAddresses ( ) . size ( ) ) ; assertEquals ( <int> , transport . boundAddress ( ) . boundAddresses ( ) . length ) ; } finally { terminate ( threadPool ) ; } } private NettyTransport startNettyTransport ( Settings settings , ThreadPool threadPool ) { BigArrays bigArrays = new MockBigArrays ( new PageCacheRecycler ( settings , threadPool ) , new NoneCircuitBreakerService ( ) ) ; NettyTransport nettyTransport = new NettyTransport ( settings , threadPool , new NetworkService ( settings ) , bigArrays , Version . CURRENT , new NamedWriteableRegistry ( ) ) ; nettyTransport . start ( ) ; assertThat ( nettyTransport . lifecycleState ( ) , is ( Lifecycle . State . STARTED ) ) ; return nettyTransport ; } } 

package org . elasticsearch . cluster . health ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . routing . IndexRoutingTable ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . Matchers . empty ; public class ClusterIndexHealthTests extends ESTestCase { public void testClusterIndexHealth ( ) { RoutingTableGenerator routingTableGenerator = new RoutingTableGenerator ( ) ; int numberOfShards = randomInt ( <int> ) + <int> ; int numberOfReplicas = randomInt ( <int> ) ; IndexMetaData indexMetaData = IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( numberOfShards ) . numberOfReplicas ( numberOfReplicas ) . build ( ) ; RoutingTableGenerator . ShardCounter counter = new RoutingTableGenerator . ShardCounter ( ) ; IndexRoutingTable indexRoutingTable = routingTableGenerator . genIndexRoutingTable ( indexMetaData , counter ) ; ClusterIndexHealth indexHealth = new ClusterIndexHealth ( indexMetaData , indexRoutingTable ) ; logger . info ( <str> , indexHealth . getStatus ( ) , counter . status ( ) ) ; assertIndexHealth ( indexHealth , counter , indexMetaData ) ; } private void assertIndexHealth ( ClusterIndexHealth indexHealth , RoutingTableGenerator . ShardCounter counter , IndexMetaData indexMetaData ) { assertThat ( indexHealth . getStatus ( ) , equalTo ( counter . status ( ) ) ) ; assertThat ( indexHealth . getNumberOfShards ( ) , equalTo ( indexMetaData . getNumberOfShards ( ) ) ) ; assertThat ( indexHealth . getNumberOfReplicas ( ) , equalTo ( indexMetaData . getNumberOfReplicas ( ) ) ) ; assertThat ( indexHealth . getActiveShards ( ) , equalTo ( counter . active ) ) ; assertThat ( indexHealth . getRelocatingShards ( ) , equalTo ( counter . relocating ) ) ; assertThat ( indexHealth . getInitializingShards ( ) , equalTo ( counter . initializing ) ) ; assertThat ( indexHealth . getUnassignedShards ( ) , equalTo ( counter . unassigned ) ) ; assertThat ( indexHealth . getShards ( ) . size ( ) , equalTo ( indexMetaData . getNumberOfShards ( ) ) ) ; assertThat ( indexHealth . getValidationFailures ( ) , empty ( ) ) ; int totalShards = <int> ; for ( ClusterShardHealth shardHealth : indexHealth . getShards ( ) . values ( ) ) { totalShards + = shardHealth . getActiveShards ( ) + shardHealth . getInitializingShards ( ) + shardHealth . getUnassignedShards ( ) ; } assertThat ( totalShards , equalTo ( indexMetaData . getNumberOfShards ( ) * ( <int> + indexMetaData . getNumberOfReplicas ( ) ) ) ) ; } } 

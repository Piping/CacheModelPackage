package com . google . common . cache ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import java . util . concurrent . ConcurrentLinkedQueue ; import java . util . concurrent . atomic . AtomicInteger ; @GwtCompatible ( emulated = true ) class TestingRemovalListeners { static < K , V > NullRemovalListener < K , V > nullRemovalListener ( ) { return new NullRemovalListener < K , V > ( ) ; } @GwtIncompatible ( <str> ) static < K , V > QueuingRemovalListener < K , V > queuingRemovalListener ( ) { return new QueuingRemovalListener < K , V > ( ) ; } static < K , V > CountingRemovalListener < K , V > countingRemovalListener ( ) { return new CountingRemovalListener < K , V > ( ) ; } @GwtIncompatible ( <str> ) static class QueuingRemovalListener < K , V > extends ConcurrentLinkedQueue < RemovalNotification < K , V > > implements RemovalListener < K , V > { @Override public void onRemoval ( RemovalNotification < K , V > notification ) { add ( notification ) ; } } static class CountingRemovalListener < K , V > implements RemovalListener < K , V > { private final AtomicInteger count = new AtomicInteger ( ) ; private volatile RemovalNotification < K , V > lastNotification ; @Override public void onRemoval ( RemovalNotification < K , V > notification ) { count . incrementAndGet ( ) ; lastNotification = notification ; } public int getCount ( ) { return count . get ( ) ; } public K getLastEvictedKey ( ) { return lastNotification . getKey ( ) ; } public V getLastEvictedValue ( ) { return lastNotification . getValue ( ) ; } public RemovalNotification < K , V > getLastNotification ( ) { return lastNotification ; } } static class NullRemovalListener < K , V > implements RemovalListener < K , V > { @Override public void onRemoval ( RemovalNotification < K , V > notification ) { } } } 

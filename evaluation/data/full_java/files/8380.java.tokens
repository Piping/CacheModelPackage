package org . elasticsearch . percolator ; import org . apache . lucene . search . join . ScoreMode ; import org . elasticsearch . action . ShardOperationFailedException ; import org . elasticsearch . action . percolate . MultiPercolateRequestBuilder ; import org . elasticsearch . action . percolate . MultiPercolateResponse ; import org . elasticsearch . action . percolate . PercolateSourceBuilder ; import org . elasticsearch . client . Requests ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . Operator ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . elasticsearch . action . percolate . PercolateSourceBuilder . docBuilder ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . common . xcontent . XContentFactory . smileBuilder ; import static org . elasticsearch . common . xcontent . XContentFactory . yamlBuilder ; import static org . elasticsearch . index . query . QueryBuilders . boolQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchQuery ; import static org . elasticsearch . percolator . PercolatorTestUtil . convertFromTextArray ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertMatchCount ; import static org . hamcrest . Matchers . arrayContaining ; import static org . hamcrest . Matchers . arrayContainingInAnyOrder ; import static org . hamcrest . Matchers . arrayWithSize ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class MultiPercolatorIT extends ESIntegTestCase { public void testBasics ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , matchQuery ( <str> , <str> ) ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , matchQuery ( <str> , <str> ) ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , boolQuery ( ) . must ( matchQuery ( <str> , <str> ) ) . must ( matchQuery ( <str> , <str> ) ) ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , matchAllQuery ( ) ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; MultiPercolateResponse response = client ( ) . prepareMultiPercolate ( ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( yamlBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( smileBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setGetRequest ( Requests . getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) ) . execute ( ) . actionGet ( ) ; MultiPercolateResponse . Item item = response . getItems ( ) [ <int> ] ; assertMatchCount ( item . getResponse ( ) , <int> ) ; assertThat ( item . getResponse ( ) . getMatches ( ) , arrayWithSize ( <int> ) ) ; assertThat ( item . getErrorMessage ( ) , nullValue ( ) ) ; assertThat ( convertFromTextArray ( item . getResponse ( ) . getMatches ( ) , <str> ) , arrayContainingInAnyOrder ( <str> , <str> ) ) ; item = response . getItems ( ) [ <int> ] ; assertThat ( item . getErrorMessage ( ) , nullValue ( ) ) ; assertMatchCount ( item . getResponse ( ) , <int> ) ; assertThat ( item . getResponse ( ) . getMatches ( ) , arrayWithSize ( <int> ) ) ; assertThat ( convertFromTextArray ( item . getResponse ( ) . getMatches ( ) , <str> ) , arrayContainingInAnyOrder ( <str> , <str> ) ) ; item = response . getItems ( ) [ <int> ] ; assertThat ( item . getErrorMessage ( ) , nullValue ( ) ) ; assertMatchCount ( item . getResponse ( ) , <int> ) ; assertThat ( convertFromTextArray ( item . getResponse ( ) . getMatches ( ) , <str> ) , arrayContainingInAnyOrder ( <str> , <str> , <str> , <str> ) ) ; item = response . getItems ( ) [ <int> ] ; assertThat ( item . getErrorMessage ( ) , nullValue ( ) ) ; assertMatchCount ( item . getResponse ( ) , <int> ) ; assertThat ( item . getResponse ( ) . getMatches ( ) , arrayWithSize ( <int> ) ) ; assertThat ( convertFromTextArray ( item . getResponse ( ) . getMatches ( ) , <str> ) , arrayContaining ( <str> ) ) ; item = response . getItems ( ) [ <int> ] ; assertThat ( item . getResponse ( ) , nullValue ( ) ) ; assertThat ( item . getErrorMessage ( ) , notNullValue ( ) ) ; assertThat ( item . getErrorMessage ( ) , containsString ( <str> ) ) ; } public void testWithRouting ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , <str> ) . setRouting ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , matchQuery ( <str> , <str> ) ) . field ( <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , <str> ) . setRouting ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , matchQuery ( <str> , <str> ) ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , <str> ) . setRouting ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , boolQuery ( ) . must ( matchQuery ( <str> , <str> ) ) . must ( matchQuery ( <str> , <str> ) ) ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , <str> ) . setRouting ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , matchAllQuery ( ) ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; MultiPercolateResponse response = client ( ) . prepareMultiPercolate ( ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setRouting ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setRouting ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( yamlBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setRouting ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( smileBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setRouting ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setRouting ( <str> ) . setGetRequest ( Requests . getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) ) . execute ( ) . actionGet ( ) ; MultiPercolateResponse . Item item = response . getItems ( ) [ <int> ] ; assertMatchCount ( item . getResponse ( ) , <int> ) ; assertThat ( item . getResponse ( ) . getMatches ( ) , arrayWithSize ( <int> ) ) ; assertThat ( item . getErrorMessage ( ) , nullValue ( ) ) ; assertThat ( convertFromTextArray ( item . getResponse ( ) . getMatches ( ) , <str> ) , arrayContainingInAnyOrder ( <str> , <str> ) ) ; item = response . getItems ( ) [ <int> ] ; assertThat ( item . getErrorMessage ( ) , nullValue ( ) ) ; assertMatchCount ( item . getResponse ( ) , <int> ) ; assertThat ( item . getResponse ( ) . getMatches ( ) , arrayWithSize ( <int> ) ) ; assertThat ( convertFromTextArray ( item . getResponse ( ) . getMatches ( ) , <str> ) , arrayContainingInAnyOrder ( <str> , <str> ) ) ; item = response . getItems ( ) [ <int> ] ; assertThat ( item . getErrorMessage ( ) , nullValue ( ) ) ; assertMatchCount ( item . getResponse ( ) , <int> ) ; assertThat ( convertFromTextArray ( item . getResponse ( ) . getMatches ( ) , <str> ) , arrayContainingInAnyOrder ( <str> , <str> , <str> , <str> ) ) ; item = response . getItems ( ) [ <int> ] ; assertThat ( item . getErrorMessage ( ) , nullValue ( ) ) ; assertMatchCount ( item . getResponse ( ) , <int> ) ; assertThat ( item . getResponse ( ) . getMatches ( ) , arrayWithSize ( <int> ) ) ; assertThat ( convertFromTextArray ( item . getResponse ( ) . getMatches ( ) , <str> ) , arrayContaining ( <str> ) ) ; item = response . getItems ( ) [ <int> ] ; assertThat ( item . getResponse ( ) , nullValue ( ) ) ; assertThat ( item . getErrorMessage ( ) , notNullValue ( ) ) ; assertThat ( item . getErrorMessage ( ) , containsString ( <str> ) ) ; } public void testExistingDocsOnly ( ) throws Exception { createIndex ( <str> ) ; int numQueries = randomIntBetween ( <int> , <int> ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < numQueries ; i + + ) { client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , matchAllQuery ( ) ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; } client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; MultiPercolateRequestBuilder builder = client ( ) . prepareMultiPercolate ( ) ; int numPercolateRequest = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < numPercolateRequest ; i + + ) { builder . add ( client ( ) . preparePercolate ( ) . setGetRequest ( Requests . getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . setIndices ( <str> ) . setDocumentType ( <str> ) ) ; } MultiPercolateResponse response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . items ( ) . length , equalTo ( numPercolateRequest ) ) ; for ( MultiPercolateResponse . Item item : response ) { assertThat ( item . isFailure ( ) , equalTo ( false ) ) ; assertMatchCount ( item . getResponse ( ) , numQueries ) ; assertThat ( item . getResponse ( ) . getMatches ( ) . length , equalTo ( numQueries ) ) ; } builder = client ( ) . prepareMultiPercolate ( ) ; for ( int i = <int> ; i < numPercolateRequest ; i + + ) { builder . add ( client ( ) . preparePercolate ( ) . setGetRequest ( Requests . getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . setIndices ( <str> ) . setDocumentType ( <str> ) ) ; } response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . items ( ) . length , equalTo ( numPercolateRequest ) ) ; for ( MultiPercolateResponse . Item item : response ) { assertThat ( item . isFailure ( ) , equalTo ( true ) ) ; assertThat ( item . getErrorMessage ( ) , containsString ( <str> ) ) ; assertThat ( item . getResponse ( ) , nullValue ( ) ) ; } builder = client ( ) . prepareMultiPercolate ( ) ; for ( int i = <int> ; i < numPercolateRequest ; i + + ) { builder . add ( client ( ) . preparePercolate ( ) . setGetRequest ( Requests . getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . setIndices ( <str> ) . setDocumentType ( <str> ) ) ; } builder . add ( client ( ) . preparePercolate ( ) . setGetRequest ( Requests . getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . setIndices ( <str> ) . setDocumentType ( <str> ) ) ; response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . items ( ) . length , equalTo ( numPercolateRequest + <int> ) ) ; assertThat ( response . items ( ) [ numPercolateRequest ] . isFailure ( ) , equalTo ( false ) ) ; assertMatchCount ( response . items ( ) [ numPercolateRequest ] . getResponse ( ) , numQueries ) ; assertThat ( response . items ( ) [ numPercolateRequest ] . getResponse ( ) . getMatches ( ) . length , equalTo ( numQueries ) ) ; } public void testWithDocsOnly ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; NumShards test = getNumShards ( <str> ) ; int numQueries = randomIntBetween ( <int> , <int> ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < numQueries ; i + + ) { client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , matchAllQuery ( ) ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; } MultiPercolateRequestBuilder builder = client ( ) . prepareMultiPercolate ( ) ; int numPercolateRequest = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < numPercolateRequest ; i + + ) { builder . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) ; } MultiPercolateResponse response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . items ( ) . length , equalTo ( numPercolateRequest ) ) ; for ( MultiPercolateResponse . Item item : response ) { assertThat ( item . isFailure ( ) , equalTo ( false ) ) ; assertMatchCount ( item . getResponse ( ) , numQueries ) ; assertThat ( item . getResponse ( ) . getMatches ( ) . length , equalTo ( numQueries ) ) ; } builder = client ( ) . prepareMultiPercolate ( ) ; for ( int i = <int> ; i < numPercolateRequest ; i + + ) { builder . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setSource ( <str> ) ) ; } response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . items ( ) . length , equalTo ( numPercolateRequest ) ) ; for ( MultiPercolateResponse . Item item : response ) { assertThat ( item . isFailure ( ) , equalTo ( false ) ) ; assertThat ( item . getResponse ( ) . getSuccessfulShards ( ) , equalTo ( <int> ) ) ; assertThat ( item . getResponse ( ) . getShardFailures ( ) . length , equalTo ( test . numPrimaries ) ) ; for ( ShardOperationFailedException shardFailure : item . getResponse ( ) . getShardFailures ( ) ) { assertThat ( shardFailure . reason ( ) , containsString ( <str> ) ) ; assertThat ( shardFailure . status ( ) . getStatus ( ) , equalTo ( <int> ) ) ; } } builder = client ( ) . prepareMultiPercolate ( ) ; for ( int i = <int> ; i < numPercolateRequest ; i + + ) { builder . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setSource ( <str> ) ) ; } builder . add ( client ( ) . preparePercolate ( ) . setIndices ( <str> ) . setDocumentType ( <str> ) . setPercolateDoc ( docBuilder ( ) . setDoc ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ) ) ; response = builder . execute ( ) . actionGet ( ) ; assertThat ( response . items ( ) . length , equalTo ( numPercolateRequest + <int> ) ) ; assertThat ( response . items ( ) [ numPercolateRequest ] . isFailure ( ) , equalTo ( false ) ) ; assertMatchCount ( response . items ( ) [ numPercolateRequest ] . getResponse ( ) , numQueries ) ; assertThat ( response . items ( ) [ numPercolateRequest ] . getResponse ( ) . getMatches ( ) . length , equalTo ( numQueries ) ) ; } public void testNestedMultiPercolation ( ) throws IOException { initNestedIndexAndPercolation ( ) ; MultiPercolateRequestBuilder mpercolate = client ( ) . prepareMultiPercolate ( ) ; mpercolate . add ( client ( ) . preparePercolate ( ) . setPercolateDoc ( new PercolateSourceBuilder . DocBuilder ( ) . setDoc ( getNotMatchingNestedDoc ( ) ) ) . setIndices ( <str> ) . setDocumentType ( <str> ) ) ; mpercolate . add ( client ( ) . preparePercolate ( ) . setPercolateDoc ( new PercolateSourceBuilder . DocBuilder ( ) . setDoc ( getMatchingNestedDoc ( ) ) ) . setIndices ( <str> ) . setDocumentType ( <str> ) ) ; MultiPercolateResponse response = mpercolate . get ( ) ; assertEquals ( response . getItems ( ) [ <int> ] . getResponse ( ) . getMatches ( ) . length , <int> ) ; assertEquals ( response . getItems ( ) [ <int> ] . getResponse ( ) . getMatches ( ) . length , <int> ) ; assertEquals ( response . getItems ( ) [ <int> ] . getResponse ( ) . getMatches ( ) [ <int> ] . getId ( ) . string ( ) , <str> ) ; } void initNestedIndexAndPercolation ( ) throws IOException { XContentBuilder mapping = XContentFactory . jsonBuilder ( ) ; mapping . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , PercolatorService . TYPE_NAME , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , QueryBuilders . nestedQuery ( <str> , QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . AND ) ) . scoreMode ( ScoreMode . Avg ) ) . endObject ( ) ) . get ( ) ; refresh ( ) ; } XContentBuilder getMatchingNestedDoc ( ) throws IOException { XContentBuilder doc = XContentFactory . jsonBuilder ( ) ; doc . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ; return doc ; } XContentBuilder getNotMatchingNestedDoc ( ) throws IOException { XContentBuilder doc = XContentFactory . jsonBuilder ( ) ; doc . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . endArray ( ) . endObject ( ) ; return doc ; } } 

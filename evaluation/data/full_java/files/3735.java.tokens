package org . eclipse . debug . examples . core . pda ; import java . io . File ; import java . io . IOException ; import java . net . URL ; import java . util . MissingResourceException ; import java . util . ResourceBundle ; import org . eclipse . core . runtime . FileLocator ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . Plugin ; import org . osgi . framework . BundleContext ; public class DebugCorePlugin extends Plugin { private static DebugCorePlugin plugin ; private ResourceBundle resourceBundle ; public static final String ID_PDA_DEBUG_MODEL = <str> ; public static final String VARIALBE_PERL_EXECUTABLE = <str> ; public static final String ATTR_PDA_PROGRAM = ID_PDA_DEBUG_MODEL + <str> ; public static final String ID_PDA_LAUNCH_CONFIGURATION_TYPE = <str> ; public static final String PLUGIN_ID = <str> ; public DebugCorePlugin ( ) { super ( ) ; plugin = this ; } @Override public void start ( BundleContext context ) throws Exception { super . start ( context ) ; } @Override public void stop ( BundleContext context ) throws Exception { super . stop ( context ) ; plugin = null ; resourceBundle = null ; } public static DebugCorePlugin getDefault ( ) { return plugin ; } public static String getResourceString ( String key ) { ResourceBundle bundle = DebugCorePlugin . getDefault ( ) . getResourceBundle ( ) ; try { return ( bundle ! = null ) ? bundle . getString ( key ) : key ; } catch ( MissingResourceException e ) { return key ; } } public ResourceBundle getResourceBundle ( ) { try { if ( resourceBundle = = null ) resourceBundle = ResourceBundle . getBundle ( <str> ) ; } catch ( MissingResourceException x ) { resourceBundle = null ; } return resourceBundle ; } public static File getFileInPlugin ( IPath path ) { try { URL installURL = getDefault ( ) . getBundle ( ) . getEntry ( path . toString ( ) ) ; URL localURL = FileLocator . toFileURL ( installURL ) ; return new File ( localURL . getFile ( ) ) ; } catch ( IOException ioe ) { return null ; } } } 

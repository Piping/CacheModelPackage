package org . gradle . play . tasks ; import org . gradle . api . Incubating ; import org . gradle . api . tasks . Input ; import org . gradle . api . tasks . OutputDirectory ; import org . gradle . api . tasks . SourceTask ; import org . gradle . api . tasks . TaskAction ; import org . gradle . api . tasks . compile . BaseForkOptions ; import org . gradle . language . base . internal . compile . Compiler ; import org . gradle . platform . base . internal . toolchain . ToolProvider ; import org . gradle . play . internal . CleaningPlayToolCompiler ; import org . gradle . play . internal . routes . DefaultRoutesCompileSpec ; import org . gradle . play . internal . routes . RoutesCompileSpec ; import org . gradle . play . internal . toolchain . PlayToolChainInternal ; import org . gradle . play . platform . PlayPlatform ; import org . gradle . play . toolchain . PlayToolChain ; import javax . inject . Inject ; import java . io . File ; import java . util . ArrayList ; import java . util . List ; @Incubating public class RoutesCompile extends SourceTask { private File outputDirectory ; private List < String > additionalImports = new ArrayList < String > ( ) ; private boolean namespaceReverseRouter ; private boolean generateReverseRoutes = true ; private PlayPlatform platform ; private BaseForkOptions forkOptions ; private boolean injectedRoutesGenerator ; @OutputDirectory public File getOutputDirectory ( ) { return outputDirectory ; } public void setOutputDirectory ( File outputDirectory ) { this . outputDirectory = outputDirectory ; } @Input public List < String > getAdditionalImports ( ) { return additionalImports ; } public void setAdditionalImports ( List < String > additionalImports ) { this . additionalImports . addAll ( additionalImports ) ; } @TaskAction void compile ( ) { RoutesCompileSpec spec = new DefaultRoutesCompileSpec ( getSource ( ) . getFiles ( ) , getOutputDirectory ( ) , getForkOptions ( ) , isJavaProject ( ) , isNamespaceReverseRouter ( ) , isGenerateReverseRoutes ( ) , getInjectedRoutesGenerator ( ) , getAdditionalImports ( ) ) ; new CleaningPlayToolCompiler < RoutesCompileSpec > ( getCompiler ( ) , getOutputs ( ) ) . execute ( spec ) ; } private Compiler < RoutesCompileSpec > getCompiler ( ) { ToolProvider select = ( ( PlayToolChainInternal ) getToolChain ( ) ) . select ( platform ) ; return select . newCompiler ( RoutesCompileSpec . class ) ; } public boolean isJavaProject ( ) { return false ; } public void setPlatform ( PlayPlatform platform ) { this . platform = platform ; } @Incubating @Inject public PlayToolChain getToolChain ( ) { throw new UnsupportedOperationException ( ) ; } public BaseForkOptions getForkOptions ( ) { if ( forkOptions = = null ) { forkOptions = new BaseForkOptions ( ) ; } return forkOptions ; } @Input public boolean isNamespaceReverseRouter ( ) { return namespaceReverseRouter ; } public void setNamespaceReverseRouter ( boolean namespaceReverseRouter ) { this . namespaceReverseRouter = namespaceReverseRouter ; } @Input public boolean isGenerateReverseRoutes ( ) { return generateReverseRoutes ; } public void setGenerateReverseRoutes ( boolean generateReverseRoutes ) { this . generateReverseRoutes = generateReverseRoutes ; } @Input public boolean getInjectedRoutesGenerator ( ) { return injectedRoutesGenerator ; } public void setInjectedRoutesGenerator ( boolean injectedRoutesGenerator ) { this . injectedRoutesGenerator = injectedRoutesGenerator ; } } 

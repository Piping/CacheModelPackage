package org . eclipse . debug . examples . ui . pda . adapters ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . debug . core . IRequest ; import org . eclipse . debug . core . commands . AbstractDebugCommand ; import org . eclipse . debug . core . commands . IEnabledStateRequest ; import org . eclipse . debug . core . commands . IRestartHandler ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . examples . core . pda . model . PDADebugTarget ; public class PDARestartDebugCommand extends AbstractDebugCommand implements IRestartHandler { @Override protected void doExecute ( Object [ ] targets , IProgressMonitor monitor , IRequest request ) throws CoreException { for ( int i = <int> ; i < targets . length ; i + + ) { ( ( PDADebugTarget ) targets [ i ] ) . restart ( ) ; monitor . worked ( <int> ) ; } } @Override protected Object getTarget ( Object element ) { IDebugTarget target = ( IDebugTarget ) getAdapter ( element , IDebugTarget . class ) ; if ( target instanceof PDADebugTarget ) { return target ; } return null ; } @Override protected boolean isExecutable ( Object [ ] targets , IProgressMonitor monitor , IEnabledStateRequest request ) throws CoreException { for ( int i = <int> ; i < targets . length ; i + + ) { if ( ( ( PDADebugTarget ) targets [ i ] ) . isTerminated ( ) ) { return false ; } monitor . worked ( <int> ) ; } return true ; } } 

package io . netty . handler . codec . socks ; import io . netty . buffer . ByteBuf ; import io . netty . util . CharsetUtil ; import java . nio . charset . CharsetEncoder ; public final class SocksAuthRequest extends SocksRequest { private static final CharsetEncoder asciiEncoder = CharsetUtil . getEncoder ( CharsetUtil . US_ASCII ) ; private static final SocksSubnegotiationVersion SUBNEGOTIATION_VERSION = SocksSubnegotiationVersion . AUTH_PASSWORD ; private final String username ; private final String password ; public SocksAuthRequest ( String username , String password ) { super ( SocksRequestType . AUTH ) ; if ( username = = null ) { throw new NullPointerException ( <str> ) ; } if ( password = = null ) { throw new NullPointerException ( <str> ) ; } if ( ! asciiEncoder . canEncode ( username ) | | ! asciiEncoder . canEncode ( password ) ) { throw new IllegalArgumentException ( <str> + username + <str> ) ; } if ( username . length ( ) > <int> ) { throw new IllegalArgumentException ( <str> + username + <str> ) ; } if ( password . length ( ) > <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . username = username ; this . password = password ; } public String username ( ) { return username ; } public String password ( ) { return password ; } @Override public void encodeAsByteBuf ( ByteBuf byteBuf ) { byteBuf . writeByte ( SUBNEGOTIATION_VERSION . byteValue ( ) ) ; byteBuf . writeByte ( username . length ( ) ) ; byteBuf . writeBytes ( username . getBytes ( CharsetUtil . US_ASCII ) ) ; byteBuf . writeByte ( password . length ( ) ) ; byteBuf . writeBytes ( password . getBytes ( CharsetUtil . US_ASCII ) ) ; } } 

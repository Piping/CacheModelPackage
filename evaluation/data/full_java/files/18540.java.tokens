package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttribute ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . tests . utils . GdxTest ; public class ShaderMultitextureTest extends GdxTest { ShaderProgram shader ; Texture texture ; Texture texture2 ; Mesh mesh ; @Override public void create ( ) { String vertexShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; String fragmentShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; shader = new ShaderProgram ( vertexShader , fragmentShader ) ; mesh = new Mesh ( true , <int> , <int> , new VertexAttribute ( Usage . Position , <int> , <str> ) , new VertexAttribute ( Usage . TextureCoordinates , <int> , <str> ) ) ; float [ ] vertices = { - <float> , <float> , <float> , <float> , - <float> , - <float> , <float> , <float> , <float> , - <float> , <float> , <float> , <float> , <float> , <float> , <float> } ; short [ ] indices = { <int> , <int> , <int> , <int> , <int> , <int> } ; mesh . setVertices ( vertices ) ; mesh . setIndices ( indices ) ; createTexture ( ) ; } private void createTexture ( ) { Pixmap pixmap = new Pixmap ( <int> , <int> , Format . RGBA8888 ) ; pixmap . setColor ( <int> , <int> , <int> , <int> ) ; pixmap . fill ( ) ; pixmap . setColor ( <int> , <int> , <int> , <int> ) ; pixmap . drawLine ( <int> , <int> , <int> , <int> ) ; pixmap . drawLine ( <int> , <int> , <int> , <int> ) ; texture = new Texture ( pixmap ) ; pixmap . dispose ( ) ; pixmap = new Pixmap ( <int> , <int> , Format . RGBA8888 ) ; pixmap . setColor ( <int> , <int> , <int> , <int> ) ; pixmap . fill ( ) ; pixmap . setColor ( <int> , <int> , <int> , <int> ) ; pixmap . drawLine ( <int> , <int> , <int> , <int> ) ; texture2 = new Texture ( pixmap ) ; pixmap . dispose ( ) ; } public void resume ( ) { createTexture ( ) ; } public void render ( ) { Gdx . gl20 . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl20 . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; Gdx . gl20 . glActiveTexture ( GL20 . GL_TEXTURE0 ) ; texture . bind ( ) ; Gdx . gl20 . glActiveTexture ( GL20 . GL_TEXTURE1 ) ; texture2 . bind ( ) ; shader . begin ( ) ; shader . setUniformi ( <str> , <int> ) ; shader . setUniformi ( <str> , <int> ) ; mesh . render ( shader , GL20 . GL_TRIANGLES ) ; shader . end ( ) ; } @Override public void dispose ( ) { texture . dispose ( ) ; texture2 . dispose ( ) ; shader . dispose ( ) ; mesh . dispose ( ) ; } } 

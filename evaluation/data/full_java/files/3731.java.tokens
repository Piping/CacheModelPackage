package org . eclipse . debug . examples . core . midi . launcher ; import java . io . BufferedInputStream ; import java . io . IOException ; import javax . sound . midi . InvalidMidiDataException ; import javax . sound . midi . MidiFileFormat ; import javax . sound . midi . MidiSystem ; import javax . sound . midi . MidiUnavailableException ; import javax . sound . midi . Sequencer ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . model . LaunchConfigurationDelegate ; import org . eclipse . debug . examples . core . pda . DebugCorePlugin ; public class MidiLaunchDelegate extends LaunchConfigurationDelegate { public static final String ID_MIDI_LAUNCH_CONFIGURATION_TYPE = <str> ; public static final String ATTR_MIDI_FILE = <str> ; public static final String ATTR_THROW_EXCEPTION = <str> ; public static final String HANDLED = <str> ; public static final String UNHANDLED = <str> ; @Override public void launch ( ILaunchConfiguration configuration , String mode , ILaunch launch , IProgressMonitor monitor ) throws CoreException { String excep = configuration . getAttribute ( ATTR_THROW_EXCEPTION , ( String ) null ) ; if ( excep ! = null ) { if ( HANDLED . equals ( excep ) ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugCorePlugin . PLUGIN_ID , <int> , <str> , null ) ) ; } else { throw new CoreException ( new Status ( IStatus . ERROR , DebugCorePlugin . PLUGIN_ID , <str> , new Error ( <str> ) ) ) ; } } String fileName = configuration . getAttribute ( ATTR_MIDI_FILE , ( String ) null ) ; if ( fileName = = null ) { abort ( <str> , null ) ; } IWorkspaceRoot root = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; IFile file = root . getFile ( new Path ( fileName ) ) ; if ( ! file . exists ( ) ) { abort ( <str> , null ) ; } Sequencer sequencer = null ; MidiFileFormat fileFormat = null ; try { sequencer = MidiSystem . getSequencer ( ) ; sequencer . open ( ) ; IPath location = file . getLocation ( ) ; if ( location ! = null ) { fileFormat = MidiSystem . getMidiFileFormat ( location . toFile ( ) ) ; } } catch ( MidiUnavailableException e ) { abort ( <str> , e ) ; } catch ( InvalidMidiDataException e ) { abort ( <str> , e ) ; } catch ( IOException e ) { abort ( <str> , e ) ; } if ( sequencer ! = null ) { BufferedInputStream stream = new BufferedInputStream ( file . getContents ( ) ) ; try { sequencer . setSequence ( stream ) ; } catch ( IOException e ) { abort ( <str> , e ) ; } catch ( InvalidMidiDataException e ) { abort ( <str> , e ) ; } MidiLaunch midiLaunch = ( MidiLaunch ) launch ; midiLaunch . setSequencer ( sequencer ) ; midiLaunch . setFormat ( fileFormat ) ; sequencer . start ( ) ; } else { abort ( <str> , null ) ; } } private void abort ( String message , Throwable e ) throws CoreException { throw new CoreException ( new Status ( IStatus . ERROR , DebugCorePlugin . PLUGIN_ID , <int> , message , e ) ) ; } @Override public ILaunch getLaunch ( ILaunchConfiguration configuration , String mode ) throws CoreException { return new MidiLaunch ( configuration , mode ) ; } @Override public boolean buildForLaunch ( ILaunchConfiguration configuration , String mode , IProgressMonitor monitor ) throws CoreException { return false ; } } 

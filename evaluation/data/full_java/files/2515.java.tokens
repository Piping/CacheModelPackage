package jcuda . runtime ; import java . util . Arrays ; public class cudaDeviceProp { public cudaDeviceProp ( ) { } public byte name [ ] = new byte [ <int> ] ; public long totalGlobalMem ; public long sharedMemPerBlock ; public int regsPerBlock ; public int warpSize ; public long memPitch ; public int maxThreadsPerBlock ; public int maxThreadsDim [ ] = new int [ <int> ] ; public int maxGridSize [ ] = new int [ <int> ] ; public int clockRate ; public long totalConstMem ; public int major ; public int minor ; public long textureAlignment ; public long texturePitchAlignment ; public int deviceOverlap ; public int multiProcessorCount ; public int kernelExecTimeoutEnabled ; public int integrated ; public int canMapHostMemory ; public int computeMode ; public int maxTexture1D ; public int maxTexture1DMipmap ; public int maxTexture1DLinear ; public int maxTexture2D [ ] = new int [ <int> ] ; public int maxTexture2DMipmap [ ] = new int [ <int> ] ; public int maxTexture2DLinear [ ] = new int [ <int> ] ; public int maxTexture2DGather [ ] = new int [ <int> ] ; public int maxTexture3D [ ] = new int [ <int> ] ; public int maxTexture3DAlt [ ] = new int [ <int> ] ; public int maxTextureCubemap ; public int maxTexture1DLayered [ ] = new int [ <int> ] ; public int maxTexture2DLayered [ ] = new int [ <int> ] ; public int maxTextureCubemapLayered [ ] = new int [ <int> ] ; public int maxSurface1D ; public int maxSurface2D [ ] = new int [ <int> ] ; public int maxSurface3D [ ] = new int [ <int> ] ; public int maxSurface1DLayered [ ] = new int [ <int> ] ; public int maxSurface2DLayered [ ] = new int [ <int> ] ; public int maxSurfaceCubemap ; public int maxSurfaceCubemapLayered [ ] = new int [ <int> ] ; public long surfaceAlignment ; public int concurrentKernels ; public int ECCEnabled ; public int pciBusID ; public int pciDeviceID ; public int pciDomainID ; public int tccDriver ; public int asyncEngineCount ; public int unifiedAddressing ; public int memoryClockRate ; public int memoryBusWidth ; public int l2CacheSize ; public int maxThreadsPerMultiProcessor ; public int streamPrioritiesSupported ; public int globalL1CacheSupported ; public int localL1CacheSupported ; public long sharedMemPerMultiprocessor ; public int regsPerMultiprocessor ; public int managedMemory ; public int isMultiGpuBoard ; public int multiGpuBoardGroupID ; public String getName ( ) { return createString ( name ) ; } public void setName ( String nameString ) { byte bytes [ ] = nameString . getBytes ( ) ; int n = Math . min ( name . length , bytes . length ) ; System . arraycopy ( bytes , <int> , name , <int> , n ) ; } @Override public String toString ( ) { return <str> + createString ( <str> ) + <str> ; } public String toFormattedString ( ) { return <str> + createString ( <str> ) ; } private String createString ( String f ) { return <str> + createString ( name ) + f + <str> + totalGlobalMem + f + <str> + sharedMemPerBlock + f + <str> + regsPerBlock + f + <str> + warpSize + f + <str> + memPitch + f + <str> + maxThreadsPerBlock + f + <str> + Arrays . toString ( maxThreadsDim ) + f + <str> + Arrays . toString ( maxGridSize ) + f + <str> + clockRate + f + <str> + totalConstMem + f + <str> + major + f + <str> + minor + f + <str> + textureAlignment + f + <str> + texturePitchAlignment + f + <str> + deviceOverlap + f + <str> + multiProcessorCount + f + <str> + kernelExecTimeoutEnabled + f + <str> + integrated + f + <str> + canMapHostMemory + f + <str> + cudaComputeMode . stringFor ( computeMode ) + f + <str> + maxTexture1D + f + <str> + maxTexture1DMipmap + f + <str> + maxTexture1DLinear + f + <str> + Arrays . toString ( maxTexture2D ) + f + <str> + Arrays . toString ( maxTexture2DMipmap ) + f + <str> + Arrays . toString ( maxTexture2DLinear ) + f + <str> + Arrays . toString ( maxTexture2DGather ) + f + <str> + Arrays . toString ( maxTexture3D ) + f + <str> + Arrays . toString ( maxTexture3DAlt ) + f + <str> + maxTextureCubemap + f + <str> + Arrays . toString ( maxTexture1DLayered ) + f + <str> + Arrays . toString ( maxTexture2DLayered ) + f + <str> + Arrays . toString ( maxTextureCubemapLayered ) + f + <str> + maxSurface1D + f + <str> + Arrays . toString ( maxSurface2D ) + f + <str> + Arrays . toString ( maxSurface3D ) + f + <str> + Arrays . toString ( maxSurface1DLayered ) + f + <str> + Arrays . toString ( maxSurface2DLayered ) + f + <str> + maxSurfaceCubemap + f + <str> + Arrays . toString ( maxSurfaceCubemapLayered ) + f + <str> + surfaceAlignment + f + <str> + concurrentKernels + f + <str> + ECCEnabled + f + <str> + pciBusID + f + <str> + pciDeviceID + f + <str> + pciDomainID + f + <str> + tccDriver + f + <str> + asyncEngineCount + f + <str> + unifiedAddressing + f + <str> + memoryClockRate + f + <str> + memoryBusWidth + f + <str> + l2CacheSize + f + <str> + maxThreadsPerMultiProcessor + f + <str> + streamPrioritiesSupported + f + <str> + globalL1CacheSupported + f + <str> + localL1CacheSupported + f + <str> + sharedMemPerMultiprocessor + f + <str> + regsPerMultiprocessor + f + <str> + managedMemory + f + <str> + isMultiGpuBoard + f + <str> + multiGpuBoardGroupID + f ; } private static String createString ( byte bytes [ ] ) { StringBuffer sb = new StringBuffer ( ) ; for ( byte b : bytes ) { if ( Character . isLetterOrDigit ( b ) | | Character . isWhitespace ( b ) ) { sb . append ( ( char ) b ) ; } } return sb . toString ( ) ; } } 

package org . elasticsearch . cloud . aws . network ; import org . apache . lucene . util . IOUtils ; import org . elasticsearch . cloud . aws . AwsEc2ServiceImpl ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . network . NetworkService . CustomNameResolver ; import org . elasticsearch . common . settings . Settings ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . net . InetAddress ; import java . net . URL ; import java . net . URLConnection ; import java . nio . charset . StandardCharsets ; public class Ec2NameResolver extends AbstractComponent implements CustomNameResolver { private static enum Ec2HostnameType { PRIVATE_IPv4 ( <str> , <str> ) , PRIVATE_DNS ( <str> , <str> ) , PUBLIC_IPv4 ( <str> , <str> ) , PUBLIC_DNS ( <str> , <str> ) , PUBLIC_IP ( <str> , PUBLIC_IPv4 . ec2Name ) , PRIVATE_IP ( <str> , PRIVATE_IPv4 . ec2Name ) , EC2 ( <str> , PRIVATE_IPv4 . ec2Name ) ; final String configName ; final String ec2Name ; private Ec2HostnameType ( String configName , String ec2Name ) { this . configName = configName ; this . ec2Name = ec2Name ; } } public Ec2NameResolver ( Settings settings ) { super ( settings ) ; } public InetAddress [ ] resolve ( Ec2HostnameType type ) throws IOException { InputStream in = null ; String metadataUrl = AwsEc2ServiceImpl . EC2_METADATA_URL + type . ec2Name ; try { URL url = new URL ( metadataUrl ) ; logger . debug ( <str> , url ) ; URLConnection urlConnection = url . openConnection ( ) ; urlConnection . setConnectTimeout ( <int> ) ; in = urlConnection . getInputStream ( ) ; BufferedReader urlReader = new BufferedReader ( new InputStreamReader ( in , StandardCharsets . UTF_8 ) ) ; String metadataResult = urlReader . readLine ( ) ; if ( metadataResult = = null | | metadataResult . length ( ) = = <int> ) { throw new IOException ( <str> + url + <str> + type . configName + <str> ) ; } return new InetAddress [ ] { InetAddress . getByName ( metadataResult ) } ; } catch ( IOException e ) { throw new IOException ( <str> + metadataUrl + <str> , e ) ; } finally { IOUtils . closeWhileHandlingException ( in ) ; } } @Override public InetAddress [ ] resolveDefault ( ) { return null ; } @Override public InetAddress [ ] resolveIfPossible ( String value ) throws IOException { for ( Ec2HostnameType type : Ec2HostnameType . values ( ) ) { if ( type . configName . equals ( value ) ) { return resolve ( type ) ; } } return null ; } } 

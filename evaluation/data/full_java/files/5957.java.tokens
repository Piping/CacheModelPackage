package org . elasticsearch . common . logging ; import org . apache . lucene . util . SuppressForbidden ; import org . elasticsearch . common . Classes ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . shard . ShardId ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . ArrayList ; import java . util . List ; import static java . util . Arrays . asList ; import static org . elasticsearch . common . util . CollectionUtils . asArrayList ; public class Loggers { private final static String commonPrefix = System . getProperty ( <str> , <str> ) ; public static final String SPACE = <str> ; private static boolean consoleLoggingEnabled = true ; public static void disableConsoleLogging ( ) { consoleLoggingEnabled = false ; } public static void enableConsoleLogging ( ) { consoleLoggingEnabled = true ; } public static boolean consoleLoggingEnabled ( ) { return consoleLoggingEnabled ; } public static ESLogger getLogger ( Class clazz , Settings settings , ShardId shardId , String . . . prefixes ) { return getLogger ( clazz , settings , shardId . index ( ) , asArrayList ( Integer . toString ( shardId . id ( ) ) , prefixes ) . toArray ( new String [ <int> ] ) ) ; } public static ESLogger getLogger ( String loggerName , Settings settings , ShardId shardId , String . . . prefixes ) { return getLogger ( loggerName , settings , asArrayList ( shardId . index ( ) . name ( ) , Integer . toString ( shardId . id ( ) ) , prefixes ) . toArray ( new String [ <int> ] ) ) ; } public static ESLogger getLogger ( Class clazz , Settings settings , Index index , String . . . prefixes ) { return getLogger ( clazz , settings , asArrayList ( SPACE , index . name ( ) , prefixes ) . toArray ( new String [ <int> ] ) ) ; } public static ESLogger getLogger ( Class clazz , Settings settings , String . . . prefixes ) { return getLogger ( buildClassLoggerName ( clazz ) , settings , prefixes ) ; } @SuppressForbidden ( reason = <str> ) private static InetAddress getHostAddress ( ) { try { return InetAddress . getLocalHost ( ) ; } catch ( UnknownHostException e ) { return null ; } } @SuppressForbidden ( reason = <str> ) public static ESLogger getLogger ( String loggerName , Settings settings , String . . . prefixes ) { List < String > prefixesList = new ArrayList < > ( ) ; if ( settings . getAsBoolean ( <str> , false ) ) { final InetAddress addr = getHostAddress ( ) ; if ( addr ! = null ) { prefixesList . add ( addr . getHostAddress ( ) ) ; } } if ( settings . getAsBoolean ( <str> , false ) ) { final InetAddress addr = getHostAddress ( ) ; if ( addr ! = null ) { prefixesList . add ( addr . getHostName ( ) ) ; } } String name = settings . get ( <str> ) ; if ( name ! = null ) { prefixesList . add ( name ) ; } if ( prefixes ! = null & & prefixes . length > <int> ) { prefixesList . addAll ( asList ( prefixes ) ) ; } return getLogger ( getLoggerName ( loggerName ) , prefixesList . toArray ( new String [ prefixesList . size ( ) ] ) ) ; } public static ESLogger getLogger ( ESLogger parentLogger , String s ) { return ESLoggerFactory . getLogger ( parentLogger . getPrefix ( ) , getLoggerName ( parentLogger . getName ( ) + s ) ) ; } public static ESLogger getLogger ( String s ) { return ESLoggerFactory . getLogger ( getLoggerName ( s ) ) ; } public static ESLogger getLogger ( Class clazz ) { return ESLoggerFactory . getLogger ( getLoggerName ( buildClassLoggerName ( clazz ) ) ) ; } public static ESLogger getLogger ( Class clazz , String . . . prefixes ) { return getLogger ( buildClassLoggerName ( clazz ) , prefixes ) ; } public static ESLogger getLogger ( String name , String . . . prefixes ) { String prefix = null ; if ( prefixes ! = null & & prefixes . length > <int> ) { StringBuilder sb = new StringBuilder ( ) ; for ( String prefixX : prefixes ) { if ( prefixX ! = null ) { if ( prefixX . equals ( SPACE ) ) { sb . append ( <str> ) ; } else { sb . append ( <str> ) . append ( prefixX ) . append ( <str> ) ; } } } if ( sb . length ( ) > <int> ) { sb . append ( <str> ) ; prefix = sb . toString ( ) ; } } return ESLoggerFactory . getLogger ( prefix , getLoggerName ( name ) ) ; } private static String buildClassLoggerName ( Class clazz ) { String name = clazz . getName ( ) ; if ( name . startsWith ( <str> ) ) { name = Classes . getPackageName ( clazz ) ; } return name ; } private static String getLoggerName ( String name ) { if ( name . startsWith ( <str> ) ) { name = name . substring ( <str> . length ( ) ) ; } return commonPrefix + name ; } } 

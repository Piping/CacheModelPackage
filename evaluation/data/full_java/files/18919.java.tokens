package io . netty . handler . codec . marshalling ; import io . netty . buffer . ByteBuf ; import io . netty . channel . Channel ; import io . netty . channel . ChannelHandlerContext ; import io . netty . handler . codec . ReplayingDecoder ; import io . netty . handler . codec . TooLongFrameException ; import org . jboss . marshalling . ByteInput ; import org . jboss . marshalling . Unmarshaller ; import java . io . ObjectStreamConstants ; import java . util . List ; public class CompatibleMarshallingDecoder extends ReplayingDecoder < Void > { protected final UnmarshallerProvider provider ; protected final int maxObjectSize ; private boolean discardingTooLongFrame ; public CompatibleMarshallingDecoder ( UnmarshallerProvider provider , int maxObjectSize ) { this . provider = provider ; this . maxObjectSize = maxObjectSize ; } @Override protected void decode ( ChannelHandlerContext ctx , ByteBuf buffer , List < Object > out ) throws Exception { if ( discardingTooLongFrame ) { buffer . skipBytes ( actualReadableBytes ( ) ) ; checkpoint ( ) ; return ; } Unmarshaller unmarshaller = provider . getUnmarshaller ( ctx ) ; ByteInput input = new ChannelBufferByteInput ( buffer ) ; if ( maxObjectSize ! = Integer . MAX_VALUE ) { input = new LimitingByteInput ( input , maxObjectSize ) ; } try { unmarshaller . start ( input ) ; Object obj = unmarshaller . readObject ( ) ; unmarshaller . finish ( ) ; out . add ( obj ) ; } catch ( LimitingByteInput . TooBigObjectException ignored ) { discardingTooLongFrame = true ; throw new TooLongFrameException ( ) ; } finally { unmarshaller . close ( ) ; } } @Override protected void decodeLast ( ChannelHandlerContext ctx , ByteBuf buffer , List < Object > out ) throws Exception { switch ( buffer . readableBytes ( ) ) { case <int> : return ; case <int> : if ( buffer . getByte ( buffer . readerIndex ( ) ) = = ObjectStreamConstants . TC_RESET ) { buffer . skipBytes ( <int> ) ; return ; } } decode ( ctx , buffer , out ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { if ( cause instanceof TooLongFrameException ) { ctx . close ( ) ; } else { super . exceptionCaught ( ctx , cause ) ; } } } 

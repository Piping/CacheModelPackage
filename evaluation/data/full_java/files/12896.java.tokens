package org . gradle . internal . resource . transfer ; import org . gradle . internal . resource . local . LocalResource ; import org . gradle . logging . ProgressLoggerFactory ; import java . io . IOException ; import java . io . InputStream ; import java . net . URI ; public class ProgressLoggingExternalResourceUploader extends AbstractProgressLoggingHandler implements ExternalResourceUploader { private final ExternalResourceUploader delegate ; public ProgressLoggingExternalResourceUploader ( ExternalResourceUploader delegate , ProgressLoggerFactory progressLoggerFactory ) { super ( progressLoggerFactory ) ; this . delegate = delegate ; } @Override public void upload ( final LocalResource resource , URI destination ) throws IOException { final ResourceOperation uploadOperation = createResourceOperation ( destination . toString ( ) , ResourceOperation . Type . upload , getClass ( ) , resource . getContentLength ( ) ) ; try { delegate . upload ( new ProgressLoggingLocalResource ( resource , uploadOperation ) , destination ) ; } finally { uploadOperation . completed ( ) ; } } private class ProgressLoggingLocalResource implements LocalResource { private final LocalResource delegate ; private final ResourceOperation uploadOperation ; private ProgressLoggingLocalResource ( LocalResource delegate , ResourceOperation uploadOperation ) { this . delegate = delegate ; this . uploadOperation = uploadOperation ; } public InputStream open ( ) { return new ProgressLoggingInputStream ( delegate . open ( ) , uploadOperation ) ; } public long getContentLength ( ) { return delegate . getContentLength ( ) ; } } } 

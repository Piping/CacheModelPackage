package org . gradle . api . internal . tasks . compile . incremental ; import com . google . common . collect . Iterables ; import org . gradle . api . file . FileTree ; import org . gradle . api . internal . file . FileOperations ; import org . gradle . api . internal . file . collections . SimpleFileCollection ; import org . gradle . api . internal . tasks . compile . JavaCompileSpec ; import org . gradle . api . tasks . util . PatternSet ; import java . util . Collection ; import static java . util . Arrays . asList ; class IncrementalCompilationInitializer { private final FileOperations fileOperations ; public IncrementalCompilationInitializer ( FileOperations fileOperations ) { this . fileOperations = fileOperations ; } public void initializeCompilation ( JavaCompileSpec spec , Collection < String > staleClasses ) { if ( staleClasses . isEmpty ( ) ) { spec . setSource ( new SimpleFileCollection ( ) ) ; return ; } PatternSet classesToDelete = new PatternSet ( ) ; PatternSet sourceToCompile = new PatternSet ( ) ; preparePatterns ( staleClasses , classesToDelete , sourceToCompile ) ; spec . setSource ( spec . getSource ( ) . getAsFileTree ( ) . matching ( sourceToCompile ) ) ; spec . setClasspath ( Iterables . concat ( spec . getClasspath ( ) , asList ( spec . getDestinationDir ( ) ) ) ) ; FileTree deleteMe = fileOperations . fileTree ( spec . getDestinationDir ( ) ) . matching ( classesToDelete ) ; fileOperations . delete ( deleteMe ) ; } void preparePatterns ( Collection < String > staleClasses , PatternSet classesToDelete , PatternSet sourceToCompile ) { assert ! staleClasses . isEmpty ( ) ; for ( String staleClass : staleClasses ) { String path = staleClass . replaceAll ( <str> , <str> ) ; classesToDelete . include ( path . concat ( <str> ) ) ; classesToDelete . include ( path . concat ( <str> ) ) ; sourceToCompile . include ( path . concat ( <str> ) ) ; } } } 

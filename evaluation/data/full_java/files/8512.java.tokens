package org . elasticsearch . search . geo ; import com . spatial4j . core . shape . Rectangle ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . geo . ShapeRelation ; import org . elasticsearch . common . geo . builders . EnvelopeBuilder ; import org . elasticsearch . common . geo . builders . GeometryCollectionBuilder ; import org . elasticsearch . common . geo . builders . LineStringBuilder ; import org . elasticsearch . common . geo . builders . ShapeBuilder ; import org . elasticsearch . common . geo . builders . ShapeBuilders ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . query . GeoShapeQueryBuilder ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . elasticsearch . test . geo . RandomShapeGenerator ; import java . io . IOException ; import java . util . Locale ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . geoIntersectionQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoShapeQuery ; import static org . elasticsearch . test . geo . RandomShapeGenerator . createGeometryCollectionWithin ; import static org . elasticsearch . test . geo . RandomShapeGenerator . xRandomPoint ; import static org . elasticsearch . test . geo . RandomShapeGenerator . xRandomRectangle ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . * ; public class GeoShapeQueryTests extends ESSingleNodeTestCase { public void testNullShape ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; GetResponse result = client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; assertThat ( result . getField ( <str> ) , nullValue ( ) ) ; } public void testIndexPointsFilterRectangle ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startArray ( <str> ) . value ( - <int> ) . value ( - <int> ) . endArray ( ) . endObject ( ) . endObject ( ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startArray ( <str> ) . value ( - <int> ) . value ( - <int> ) . endArray ( ) . endObject ( ) . endObject ( ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; ShapeBuilder shape = ShapeBuilders . newEnvelope ( ) . topLeft ( - <int> , <int> ) . bottomRight ( <int> , - <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( geoIntersectionQuery ( <str> , shape ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( geoShapeQuery ( <str> , shape ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; } public void testEdgeCases ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startArray ( <str> ) . startArray ( ) . startArray ( ) . value ( - <float> ) . value ( <float> ) . endArray ( ) . startArray ( ) . value ( - <float> ) . value ( <float> ) . endArray ( ) . startArray ( ) . value ( - <float> ) . value ( <float> ) . endArray ( ) . startArray ( ) . value ( - <float> ) . value ( <float> ) . endArray ( ) . endArray ( ) . endArray ( ) . endObject ( ) . endObject ( ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; ShapeBuilder query = ShapeBuilders . newEnvelope ( ) . topLeft ( - <float> , <float> ) . bottomRight ( - <float> , <float> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( geoIntersectionQuery ( <str> , query ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; } public void testIndexedShapeReference ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . execute ( ) . actionGet ( ) ; createIndex ( <str> ) ; ensureGreen ( ) ; ShapeBuilder shape = ShapeBuilders . newEnvelope ( ) . topLeft ( - <int> , <int> ) . bottomRight ( <int> , - <int> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , shape ) . endObject ( ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startArray ( <str> ) . value ( - <int> ) . value ( - <int> ) . endArray ( ) . endObject ( ) . endObject ( ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( geoIntersectionQuery ( <str> , <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( geoShapeQuery ( <str> , <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( <int> ) . id ( ) , equalTo ( <str> ) ) ; } public void testReusableBuilder ( ) throws IOException { ShapeBuilder polygon = ShapeBuilders . newPolygon ( ) . point ( <int> , - <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . hole ( new LineStringBuilder ( ) . point ( <int> , - <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) . close ( ) ) . close ( ) ; assertUnmodified ( polygon ) ; ShapeBuilder linestring = ShapeBuilders . newLineString ( ) . point ( <int> , - <int> ) . point ( <int> , - <int> ) . point ( <int> , <int> ) . point ( <int> , <int> ) ; assertUnmodified ( linestring ) ; } private void assertUnmodified ( ShapeBuilder builder ) throws IOException { String before = jsonBuilder ( ) . startObject ( ) . field ( <str> , builder ) . endObject ( ) . string ( ) ; builder . build ( ) ; String after = jsonBuilder ( ) . startObject ( ) . field ( <str> , builder ) . endObject ( ) . string ( ) ; assertThat ( before , equalTo ( after ) ) ; } public void testShapeFetchingPath ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; String location = <str> ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( String . format ( Locale . ROOT , <str> , location , location , location , location ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startArray ( <str> ) . startArray ( ) . startArray ( ) . value ( - <int> ) . value ( - <int> ) . endArray ( ) . startArray ( ) . value ( <int> ) . value ( - <int> ) . endArray ( ) . startArray ( ) . value ( <int> ) . value ( <int> ) . endArray ( ) . startArray ( ) . value ( - <int> ) . value ( <int> ) . endArray ( ) . startArray ( ) . value ( - <int> ) . value ( - <int> ) . endArray ( ) . endArray ( ) . endArray ( ) . endObject ( ) . endObject ( ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; GeoShapeQueryBuilder filter = QueryBuilders . geoShapeQuery ( <str> , <str> , <str> ) . relation ( ShapeRelation . INTERSECTS ) . indexedShapeIndex ( <str> ) . indexedShapePath ( <str> ) ; SearchResponse result = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( filter ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; filter = QueryBuilders . geoShapeQuery ( <str> , <str> , <str> ) . relation ( ShapeRelation . INTERSECTS ) . indexedShapeIndex ( <str> ) . indexedShapePath ( <str> ) ; result = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( filter ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; filter = QueryBuilders . geoShapeQuery ( <str> , <str> , <str> ) . relation ( ShapeRelation . INTERSECTS ) . indexedShapeIndex ( <str> ) . indexedShapePath ( <str> ) ; result = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( filter ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; filter = QueryBuilders . geoShapeQuery ( <str> , <str> , <str> ) . relation ( ShapeRelation . INTERSECTS ) . indexedShapeIndex ( <str> ) . indexedShapePath ( <str> ) ; result = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( filter ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; GeoShapeQueryBuilder query = QueryBuilders . geoShapeQuery ( <str> , <str> , <str> ) . indexedShapeIndex ( <str> ) . indexedShapePath ( <str> ) ; result = client ( ) . prepareSearch ( <str> ) . setQuery ( query ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; query = QueryBuilders . geoShapeQuery ( <str> , <str> , <str> ) . indexedShapeIndex ( <str> ) . indexedShapePath ( <str> ) ; result = client ( ) . prepareSearch ( <str> ) . setQuery ( query ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; query = QueryBuilders . geoShapeQuery ( <str> , <str> , <str> ) . indexedShapeIndex ( <str> ) . indexedShapePath ( <str> ) ; result = client ( ) . prepareSearch ( <str> ) . setQuery ( query ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; query = QueryBuilders . geoShapeQuery ( <str> , <str> , <str> ) . indexedShapeIndex ( <str> ) . indexedShapePath ( <str> ) ; result = client ( ) . prepareSearch ( <str> ) . setQuery ( query ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; } public void testShapeFilterWithRandomGeoCollection ( ) throws Exception { GeometryCollectionBuilder gcb = RandomShapeGenerator . createGeometryCollection ( getRandom ( ) ) ; logger . info ( <str> + gcb . numShapes ( ) + <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; XContentBuilder docSource = gcb . toXContent ( jsonBuilder ( ) . startObject ( ) . field ( <str> ) , null ) . endObject ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( docSource ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; ShapeBuilder filterShape = ( gcb . getShapeAt ( randomIntBetween ( <int> , gcb . numShapes ( ) - <int> ) ) ) ; GeoShapeQueryBuilder filter = QueryBuilders . geoShapeQuery ( <str> , filterShape ) ; filter . relation ( ShapeRelation . INTERSECTS ) ; SearchResponse result = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( filter ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; } public void testContainsShapeQuery ( ) throws Exception { Rectangle mbr = xRandomRectangle ( getRandom ( ) , xRandomPoint ( getRandom ( ) ) ) ; GeometryCollectionBuilder gcb = createGeometryCollectionWithin ( getRandom ( ) , mbr ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; XContentBuilder docSource = gcb . toXContent ( jsonBuilder ( ) . startObject ( ) . field ( <str> ) , null ) . endObject ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( docSource ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; EnvelopeBuilder env = new EnvelopeBuilder ( ) . topLeft ( mbr . getMinX ( ) , mbr . getMaxY ( ) ) . bottomRight ( mbr . getMaxX ( ) , mbr . getMinY ( ) ) ; docSource = env . toXContent ( jsonBuilder ( ) . startObject ( ) . field ( <str> ) , null ) . endObject ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( docSource ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; ShapeBuilder filterShape = ( gcb . getShapeAt ( randomIntBetween ( <int> , gcb . numShapes ( ) - <int> ) ) ) ; GeoShapeQueryBuilder filter = QueryBuilders . geoShapeQuery ( <str> , filterShape ) . relation ( ShapeRelation . INTERSECTS ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( filter ) . get ( ) ; assertSearchResponse ( response ) ; assertThat ( response . getHits ( ) . totalHits ( ) , greaterThan ( <int> L ) ) ; } public void testShapeFilterWithDefinedGeoCollection ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; XContentBuilder docSource = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . value ( <float> ) . value ( <float> ) . endArray ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startArray ( ) . value ( <float> ) . value ( <float> ) . endArray ( ) . startArray ( ) . value ( <float> ) . value ( <float> ) . endArray ( ) . endArray ( ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( docSource ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; GeoShapeQueryBuilder filter = QueryBuilders . geoShapeQuery ( <str> , ShapeBuilders . newGeometryCollection ( ) . polygon ( ShapeBuilders . newPolygon ( ) . point ( <float> , - <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , - <float> ) . point ( <float> , - <float> ) ) ) . relation ( ShapeRelation . INTERSECTS ) ; SearchResponse result = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( filter ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; filter = QueryBuilders . geoShapeQuery ( <str> , ShapeBuilders . newGeometryCollection ( ) . polygon ( ShapeBuilders . newPolygon ( ) . point ( <float> , - <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , - <float> ) . point ( <float> , - <float> ) ) ) . relation ( ShapeRelation . INTERSECTS ) ; result = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( filter ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; filter = QueryBuilders . geoShapeQuery ( <str> , ShapeBuilders . newGeometryCollection ( ) . polygon ( ShapeBuilders . newPolygon ( ) . point ( <float> , - <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , - <float> ) . point ( <float> , - <float> ) ) . polygon ( ShapeBuilders . newPolygon ( ) . point ( <float> , - <float> ) . point ( <float> , <float> ) . point ( <float> , <float> ) . point ( <float> , - <float> ) . point ( <float> , - <float> ) ) ) . relation ( ShapeRelation . INTERSECTS ) ; result = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( filter ) . get ( ) ; assertSearchResponse ( result ) ; assertHitCount ( result , <int> ) ; } public void testPointsOnly ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , randomBoolean ( ) ? <str> : <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; ShapeBuilder shape = RandomShapeGenerator . createShape ( random ( ) ) ; try { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , shape ) . endObject ( ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; } catch ( MapperParsingException e ) { assertThat ( e . getCause ( ) . getMessage ( ) , containsString ( <str> ) ) ; return ; } SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( geoIntersectionQuery ( <str> , shape ) ) . execute ( ) . actionGet ( ) ; assertEquals ( <int> , response . getHits ( ) . getTotalHits ( ) ) ; } } 

package org . elasticsearch . index . store ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . index . shard . ShardPath ; import java . io . IOException ; import java . nio . file . Path ; public class StoreStats implements Streamable , ToXContent { private long sizeInBytes ; private long throttleTimeInNanos ; public StoreStats ( ) { } public StoreStats ( long sizeInBytes , long throttleTimeInNanos ) { this . sizeInBytes = sizeInBytes ; this . throttleTimeInNanos = throttleTimeInNanos ; } public void add ( StoreStats stats ) { if ( stats = = null ) { return ; } sizeInBytes + = stats . sizeInBytes ; throttleTimeInNanos + = stats . throttleTimeInNanos ; } public long sizeInBytes ( ) { return sizeInBytes ; } public long getSizeInBytes ( ) { return sizeInBytes ; } public ByteSizeValue size ( ) { return new ByteSizeValue ( sizeInBytes ) ; } public ByteSizeValue getSize ( ) { return size ( ) ; } public TimeValue throttleTime ( ) { return TimeValue . timeValueNanos ( throttleTimeInNanos ) ; } public TimeValue getThrottleTime ( ) { return throttleTime ( ) ; } public static StoreStats readStoreStats ( StreamInput in ) throws IOException { StoreStats store = new StoreStats ( ) ; store . readFrom ( in ) ; return store ; } @Override public void readFrom ( StreamInput in ) throws IOException { sizeInBytes = in . readVLong ( ) ; throttleTimeInNanos = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVLong ( sizeInBytes ) ; out . writeVLong ( throttleTimeInNanos ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . STORE ) ; builder . byteSizeField ( Fields . SIZE_IN_BYTES , Fields . SIZE , sizeInBytes ) ; builder . timeValueField ( Fields . THROTTLE_TIME_IN_MILLIS , Fields . THROTTLE_TIME , throttleTime ( ) ) ; builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString STORE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SIZE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString SIZE_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString THROTTLE_TIME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString THROTTLE_TIME_IN_MILLIS = new XContentBuilderString ( <str> ) ; } } 

package org . gradle . platform . base . internal ; import com . google . common . collect . ImmutableSet ; import org . gradle . platform . base . * ; import java . util . Collection ; import java . util . LinkedList ; import java . util . List ; import java . util . Set ; import static java . util . Collections . emptySet ; public class DefaultDependencySpecContainer implements DependencySpecContainer { private final List < DependencySpecBuilder > builders = new LinkedList < DependencySpecBuilder > ( ) ; @Override public ProjectDependencySpecBuilder project ( String path ) { return projectDependency ( ) . project ( path ) ; } @Override public ProjectDependencySpecBuilder library ( String name ) { return projectDependency ( ) . library ( name ) ; } @Override public ModuleDependencySpecBuilder module ( String moduleIdOrName ) { return moduleDependency ( ) . module ( moduleIdOrName ) ; } @Override public ModuleDependencySpecBuilder group ( String name ) { return moduleDependency ( ) . group ( name ) ; } @Override public Collection < DependencySpec > getDependencies ( ) { if ( isEmpty ( ) ) { return emptySet ( ) ; } return dependencySpecSet ( ) ; } @Override public boolean isEmpty ( ) { return builders . isEmpty ( ) ; } private DefaultProjectDependencySpec . Builder projectDependency ( ) { return add ( new DefaultProjectDependencySpec . Builder ( ) ) ; } private DefaultModuleDependencySpec . Builder moduleDependency ( ) { return add ( new DefaultModuleDependencySpec . Builder ( ) ) ; } private < T extends DependencySpecBuilder > T add ( T builder ) { builders . add ( builder ) ; return builder ; } private Set < DependencySpec > dependencySpecSet ( ) { ImmutableSet . Builder < DependencySpec > specs = ImmutableSet . builder ( ) ; for ( DependencySpecBuilder specBuilder : builders ) { specs . add ( specBuilder . build ( ) ) ; } return specs . build ( ) ; } } 

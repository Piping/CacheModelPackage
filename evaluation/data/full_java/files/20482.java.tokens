package io . netty . channel . udt . nio ; import com . barchart . udt . TypeUDT ; import com . barchart . udt . nio . ServerSocketChannelUDT ; import com . barchart . udt . nio . SocketChannelUDT ; import io . netty . channel . ChannelException ; import io . netty . channel . ChannelMetadata ; import io . netty . channel . ChannelOutboundBuffer ; import io . netty . channel . nio . AbstractNioMessageChannel ; import io . netty . channel . udt . DefaultUdtServerChannelConfig ; import io . netty . channel . udt . UdtChannel ; import io . netty . channel . udt . UdtServerChannel ; import io . netty . channel . udt . UdtServerChannelConfig ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; import java . util . List ; import static java . nio . channels . SelectionKey . * ; public abstract class NioUdtAcceptorChannel extends AbstractNioMessageChannel implements UdtServerChannel { protected static final InternalLogger logger = InternalLoggerFactory . getInstance ( NioUdtAcceptorChannel . class ) ; private static final ChannelMetadata METADATA = new ChannelMetadata ( false , <int> ) ; private final UdtServerChannelConfig config ; protected NioUdtAcceptorChannel ( final ServerSocketChannelUDT channelUDT ) { super ( null , channelUDT , OP_ACCEPT ) ; try { channelUDT . configureBlocking ( false ) ; config = new DefaultUdtServerChannelConfig ( this , channelUDT , true ) ; } catch ( final Exception e ) { try { channelUDT . close ( ) ; } catch ( final Exception e2 ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( <str> , e2 ) ; } } throw new ChannelException ( <str> , e ) ; } } protected NioUdtAcceptorChannel ( final TypeUDT type ) { this ( NioUdtProvider . newAcceptorChannelUDT ( type ) ) ; } @Override public UdtServerChannelConfig config ( ) { return config ; } @Override protected void doBind ( final SocketAddress localAddress ) throws Exception { javaChannel ( ) . socket ( ) . bind ( localAddress , config . getBacklog ( ) ) ; } @Override protected void doClose ( ) throws Exception { javaChannel ( ) . close ( ) ; } @Override protected boolean doConnect ( final SocketAddress remoteAddress , final SocketAddress localAddress ) throws Exception { throw new UnsupportedOperationException ( ) ; } @Override protected void doDisconnect ( ) throws Exception { throw new UnsupportedOperationException ( ) ; } @Override protected void doFinishConnect ( ) throws Exception { throw new UnsupportedOperationException ( ) ; } @Override protected boolean doWriteMessage ( Object msg , ChannelOutboundBuffer in ) throws Exception { throw new UnsupportedOperationException ( ) ; } @Override protected final Object filterOutboundMessage ( Object msg ) throws Exception { throw new UnsupportedOperationException ( ) ; } @Override public boolean isActive ( ) { return javaChannel ( ) . socket ( ) . isBound ( ) ; } @Override protected ServerSocketChannelUDT javaChannel ( ) { return ( ServerSocketChannelUDT ) super . javaChannel ( ) ; } @Override protected SocketAddress localAddress0 ( ) { return javaChannel ( ) . socket ( ) . getLocalSocketAddress ( ) ; } @Override public InetSocketAddress localAddress ( ) { return ( InetSocketAddress ) super . localAddress ( ) ; } @Override public InetSocketAddress remoteAddress ( ) { return null ; } @Override protected SocketAddress remoteAddress0 ( ) { return null ; } @Override public ChannelMetadata metadata ( ) { return METADATA ; } @Override protected int doReadMessages ( List < Object > buf ) throws Exception { final SocketChannelUDT channelUDT = javaChannel ( ) . accept ( ) ; if ( channelUDT = = null ) { return <int> ; } else { buf . add ( newConnectorChannel ( channelUDT ) ) ; return <int> ; } } protected abstract UdtChannel newConnectorChannel ( SocketChannelUDT channelUDT ) ; } 

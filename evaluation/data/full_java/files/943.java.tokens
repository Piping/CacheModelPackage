package org . apache . cassandra . service ; import java . nio . ByteBuffer ; import java . util . concurrent . TimeUnit ; import org . apache . cassandra . db . * ; import org . apache . cassandra . db . partitions . PartitionIterator ; import org . apache . cassandra . db . partitions . UnfilteredPartitionIterators ; import org . apache . cassandra . net . MessageIn ; public class DigestResolver extends ResponseResolver { private volatile ReadResponse dataResponse ; public DigestResolver ( Keyspace keyspace , ReadCommand command , ConsistencyLevel consistency , int maxResponseCount ) { super ( keyspace , command , consistency , maxResponseCount ) ; } @Override public void preprocess ( MessageIn < ReadResponse > message ) { super . preprocess ( message ) ; if ( dataResponse = = null & & ! message . payload . isDigestResponse ( ) ) dataResponse = message . payload ; } public PartitionIterator getData ( ) { assert isDataPresent ( ) ; return UnfilteredPartitionIterators . filter ( dataResponse . makeIterator ( command . metadata ( ) , command ) , command . nowInSec ( ) ) ; } public PartitionIterator resolve ( ) throws DigestMismatchException { if ( responses . size ( ) = = <int> ) return getData ( ) ; if ( logger . isTraceEnabled ( ) ) logger . trace ( <str> , responses . size ( ) ) ; long start = System . nanoTime ( ) ; ByteBuffer digest = null ; for ( MessageIn < ReadResponse > message : responses ) { ReadResponse response = message . payload ; ByteBuffer newDigest = response . digest ( command . metadata ( ) , command ) ; if ( digest = = null ) digest = newDigest ; else if ( ! digest . equals ( newDigest ) ) throw new DigestMismatchException ( ( ( SinglePartitionReadCommand ) command ) . partitionKey ( ) , digest , newDigest ) ; } if ( logger . isTraceEnabled ( ) ) logger . trace ( <str> , TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - start ) ) ; return UnfilteredPartitionIterators . filter ( dataResponse . makeIterator ( command . metadata ( ) , command ) , command . nowInSec ( ) ) ; } public boolean isDataPresent ( ) { return dataResponse ! = null ; } } 

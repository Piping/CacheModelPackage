package org . gradle . api . internal . artifacts . repositories . layout ; import org . gradle . api . internal . file . FileResolver ; import java . net . URI ; public class ResolvedPattern { public final String scheme ; public final URI baseUri ; public final String pattern ; public final String absolutePattern ; public ResolvedPattern ( String rawPattern , FileResolver fileResolver ) { int pos = rawPattern . indexOf ( <str> ) ; String basePath = pos < <int> ? rawPattern : rawPattern . substring ( <int> , pos ) ; this . baseUri = fileResolver . resolveUri ( basePath ) ; this . pattern = pos < <int> ? <str> : rawPattern . substring ( pos ) ; scheme = baseUri . getScheme ( ) . toLowerCase ( ) ; absolutePattern = constructAbsolutePattern ( baseUri , pattern ) ; } public ResolvedPattern ( URI baseUri , String pattern ) { this . baseUri = baseUri ; this . pattern = pattern ; scheme = baseUri . getScheme ( ) . toLowerCase ( ) ; absolutePattern = constructAbsolutePattern ( baseUri , pattern ) ; } private String constructAbsolutePattern ( URI baseUri , String patternPart ) { String uriPart = baseUri . toString ( ) ; String join = uriPart . endsWith ( <str> ) | | patternPart . length ( ) = = <int> ? <str> : <str> ; return uriPart + join + patternPart ; } } 

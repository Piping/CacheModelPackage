package org . eclipse . debug . internal . ui . sourcelookup ; import java . util . List ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . ui . actions . SelectionListenerAction ; public class UpAction extends SourceContainerAction { public UpAction ( ) { super ( SourceLookupUIMessages . sourceTab_upButton ) ; } @Override public void run ( ) { List < ISourceContainer > targets = getOrderedSelection ( ) ; if ( targets . isEmpty ( ) ) { return ; } int top = <int> ; int index = <int> ; List < ISourceContainer > list = getEntriesAsList ( ) ; for ( ISourceContainer container : targets ) { index = list . indexOf ( container ) ; if ( index > top ) { top = index - <int> ; ISourceContainer temp = list . get ( top ) ; list . set ( top , container ) ; list . set ( index , temp ) ; } top = index ; } setEntries ( list ) ; } @Override protected boolean updateSelection ( IStructuredSelection selection ) { return ! selection . isEmpty ( ) & & ! isIndexSelected ( selection , <int> ) & & getViewer ( ) . getTree ( ) . getSelection ( ) [ <int> ] . getParentItem ( ) = = null ; } } 

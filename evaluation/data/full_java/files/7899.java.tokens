package org . elasticsearch . common . bytes ; import org . elasticsearch . test . ESTestCase ; import java . util . Arrays ; public class BytesReferenceTests extends ESTestCase { public void testEquals ( ) { final int len = randomIntBetween ( <int> , randomBoolean ( ) ? <int> : <int> ) ; final int offset1 = randomInt ( <int> ) ; final byte [ ] array1 = new byte [ offset1 + len + randomInt ( <int> ) ] ; getRandom ( ) . nextBytes ( array1 ) ; final int offset2 = randomInt ( offset1 ) ; final byte [ ] array2 = Arrays . copyOfRange ( array1 , offset1 - offset2 , array1 . length ) ; final BytesArray b1 = new BytesArray ( array1 , offset1 , len ) ; final BytesArray b2 = new BytesArray ( array2 , offset2 , len ) ; assertTrue ( BytesReference . Helper . bytesEqual ( b1 , b2 ) ) ; assertTrue ( BytesReference . Helper . bytesEquals ( b1 , b2 ) ) ; assertEquals ( Arrays . hashCode ( b1 . toBytes ( ) ) , b1 . hashCode ( ) ) ; assertEquals ( BytesReference . Helper . bytesHashCode ( b1 ) , BytesReference . Helper . slowHashCode ( b2 ) ) ; assertTrue ( BytesReference . Helper . bytesEqual ( b1 , b1 ) ) ; assertTrue ( BytesReference . Helper . bytesEquals ( b1 , b1 ) ) ; assertEquals ( BytesReference . Helper . bytesHashCode ( b1 ) , BytesReference . Helper . slowHashCode ( b1 ) ) ; if ( len > <int> ) { BytesArray differentLen = new BytesArray ( array1 , offset1 , randomInt ( len - <int> ) ) ; assertFalse ( BytesReference . Helper . bytesEqual ( b1 , differentLen ) ) ; array1 [ offset1 + randomInt ( len - <int> ) ] + = <int> ; assertFalse ( BytesReference . Helper . bytesEqual ( b1 , b2 ) ) ; assertFalse ( BytesReference . Helper . bytesEquals ( b1 , b2 ) ) ; } } } 

package org . elasticsearch . monitor . os ; import org . apache . lucene . util . Constants ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . * ; public class OsProbeTests extends ESTestCase { OsProbe probe = OsProbe . getInstance ( ) ; public void testOsInfo ( ) { OsInfo info = probe . osInfo ( ) ; assertNotNull ( info ) ; assertThat ( info . getRefreshInterval ( ) , anyOf ( equalTo ( - <int> ) , greaterThanOrEqualTo ( <int> L ) ) ) ; assertThat ( info . getName ( ) , equalTo ( Constants . OS_NAME ) ) ; assertThat ( info . getArch ( ) , equalTo ( Constants . OS_ARCH ) ) ; assertThat ( info . getVersion ( ) , equalTo ( Constants . OS_VERSION ) ) ; assertThat ( info . getAvailableProcessors ( ) , equalTo ( Runtime . getRuntime ( ) . availableProcessors ( ) ) ) ; } public void testOsStats ( ) { OsStats stats = probe . osStats ( ) ; assertNotNull ( stats ) ; assertThat ( stats . getTimestamp ( ) , greaterThan ( <int> L ) ) ; assertThat ( stats . getCpu ( ) . getPercent ( ) , anyOf ( equalTo ( ( short ) - <int> ) , is ( both ( greaterThanOrEqualTo ( ( short ) <int> ) ) . and ( lessThanOrEqualTo ( ( short ) <int> ) ) ) ) ) ; if ( Constants . WINDOWS ) { assertThat ( stats . getCpu ( ) . getLoadAverage ( ) , equalTo ( ( double ) - <int> ) ) ; } else { assertThat ( stats . getCpu ( ) . getLoadAverage ( ) , anyOf ( lessThan ( ( double ) <int> ) , greaterThanOrEqualTo ( ( double ) <int> ) ) ) ; } assertNotNull ( stats . getMem ( ) ) ; assertThat ( stats . getMem ( ) . getTotal ( ) . bytes ( ) , greaterThan ( <int> L ) ) ; assertThat ( stats . getMem ( ) . getFree ( ) . bytes ( ) , greaterThan ( <int> L ) ) ; assertThat ( stats . getMem ( ) . getFreePercent ( ) , allOf ( greaterThanOrEqualTo ( ( short ) <int> ) , lessThanOrEqualTo ( ( short ) <int> ) ) ) ; assertThat ( stats . getMem ( ) . getUsed ( ) . bytes ( ) , greaterThan ( <int> L ) ) ; assertThat ( stats . getMem ( ) . getUsedPercent ( ) , allOf ( greaterThanOrEqualTo ( ( short ) <int> ) , lessThanOrEqualTo ( ( short ) <int> ) ) ) ; assertNotNull ( stats . getSwap ( ) ) ; assertNotNull ( stats . getSwap ( ) . getTotal ( ) ) ; long total = stats . getSwap ( ) . getTotal ( ) . bytes ( ) ; if ( total > <int> ) { assertThat ( stats . getSwap ( ) . getTotal ( ) . bytes ( ) , greaterThan ( <int> L ) ) ; assertThat ( stats . getSwap ( ) . getFree ( ) . bytes ( ) , greaterThan ( <int> L ) ) ; assertThat ( stats . getSwap ( ) . getUsed ( ) . bytes ( ) , greaterThanOrEqualTo ( <int> L ) ) ; } else { assertThat ( stats . getSwap ( ) . getTotal ( ) . bytes ( ) , equalTo ( <int> L ) ) ; assertThat ( stats . getSwap ( ) . getFree ( ) . bytes ( ) , equalTo ( <int> L ) ) ; assertThat ( stats . getSwap ( ) . getUsed ( ) . bytes ( ) , equalTo ( <int> L ) ) ; } } } 

package org . gradle . messaging . remote . internal ; import org . gradle . messaging . remote . internal . protocol . MessageCredits ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . util . LinkedList ; public class BufferingProtocol implements Protocol < Message > { private static final Logger LOGGER = LoggerFactory . getLogger ( BufferingProtocol . class ) ; private final int maxBufferSize ; private final LinkedList < Message > queue = new LinkedList < Message > ( ) ; private ProtocolContext < Message > context ; private int remainingOutgoingCredits ; private int remainingIncomingCredits ; private boolean stopping ; public BufferingProtocol ( int maxBufferSize ) { this . maxBufferSize = maxBufferSize ; } public void start ( ProtocolContext < Message > context ) { this . context = context ; context . dispatchOutgoing ( new MessageCredits ( maxBufferSize ) ) ; remainingIncomingCredits = maxBufferSize ; } public void handleIncoming ( Message message ) { remainingIncomingCredits - - ; if ( remainingOutgoingCredits = = <int> ) { queue . add ( message ) ; } else { remainingOutgoingCredits - - ; context . dispatchIncoming ( message ) ; } maybeGrantIncomingCredits ( ) ; } public void handleOutgoing ( Message message ) { if ( message instanceof MessageCredits ) { MessageCredits credits = ( MessageCredits ) message ; remainingOutgoingCredits + = credits . getCredits ( ) ; while ( ! queue . isEmpty ( ) & & remainingOutgoingCredits > <int> ) { remainingOutgoingCredits - - ; context . dispatchIncoming ( queue . removeFirst ( ) ) ; } if ( stopping & & queue . isEmpty ( ) ) { context . stopped ( ) ; return ; } maybeGrantIncomingCredits ( ) ; } else { context . dispatchOutgoing ( message ) ; } } private void maybeGrantIncomingCredits ( ) { int minBatchSize = maxBufferSize / <int> ; int grantablePermits = maxBufferSize - queue . size ( ) - remainingIncomingCredits + remainingOutgoingCredits ; if ( grantablePermits > = minBatchSize ) { context . dispatchOutgoing ( new MessageCredits ( grantablePermits ) ) ; remainingIncomingCredits + = grantablePermits ; } } public void stopRequested ( ) { stopping = true ; if ( queue . isEmpty ( ) ) { context . stopped ( ) ; } else { LOGGER . debug ( <str> ) ; context . stopLater ( ) ; } } } 

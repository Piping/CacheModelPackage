package org . elasticsearch . action . admin . cluster . reroute ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . support . master . AcknowledgedRequest ; import org . elasticsearch . cluster . routing . allocation . command . AllocationCommand ; import org . elasticsearch . cluster . routing . allocation . command . AllocationCommands ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class ClusterRerouteRequest extends AcknowledgedRequest < ClusterRerouteRequest > { AllocationCommands commands = new AllocationCommands ( ) ; boolean dryRun ; boolean explain ; public ClusterRerouteRequest ( ) { } public ClusterRerouteRequest add ( AllocationCommand . . . commands ) { this . commands . add ( commands ) ; return this ; } public ClusterRerouteRequest dryRun ( boolean dryRun ) { this . dryRun = dryRun ; return this ; } public boolean dryRun ( ) { return this . dryRun ; } public ClusterRerouteRequest explain ( boolean explain ) { this . explain = explain ; return this ; } public boolean explain ( ) { return this . explain ; } public ClusterRerouteRequest source ( BytesReference source ) throws Exception { try ( XContentParser parser = XContentHelper . createParser ( source ) ) { XContentParser . Token token ; String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_ARRAY ) { if ( <str> . equals ( currentFieldName ) ) { this . commands = AllocationCommands . fromXContent ( parser ) ; } else { throw new ElasticsearchParseException ( <str> , currentFieldName ) ; } } else if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) | | <str> . equals ( currentFieldName ) ) { dryRun = parser . booleanValue ( ) ; } else { throw new ElasticsearchParseException ( <str> , currentFieldName ) ; } } } } return this ; } @Override public ActionRequestValidationException validate ( ) { return null ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; commands = AllocationCommands . readFrom ( in ) ; dryRun = in . readBoolean ( ) ; explain = in . readBoolean ( ) ; readTimeout ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; AllocationCommands . writeTo ( commands , out ) ; out . writeBoolean ( dryRun ) ; out . writeBoolean ( explain ) ; writeTimeout ( out ) ; } } 

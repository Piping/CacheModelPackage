package org . gradle . api . tasks . bundling ; import org . apache . tools . zip . ZipOutputStream ; import org . gradle . api . Incubating ; import org . gradle . api . internal . DocumentationRegistry ; import org . gradle . api . internal . file . archive . ZipCopyAction ; import org . gradle . api . internal . file . copy . * ; public class Zip extends AbstractArchiveTask { public static final String ZIP_EXTENSION = <str> ; private ZipEntryCompression entryCompression = ZipEntryCompression . DEFLATED ; private boolean allowZip64 ; private String encoding ; public Zip ( ) { setExtension ( ZIP_EXTENSION ) ; allowZip64 = false ; } protected ZipCompressor getCompressor ( ) { switch ( entryCompression ) { case DEFLATED : return new DefaultZipCompressor ( allowZip64 , ZipOutputStream . DEFLATED ) ; case STORED : return new DefaultZipCompressor ( allowZip64 , ZipOutputStream . STORED ) ; default : throw new IllegalArgumentException ( String . format ( <str> , entryCompression ) ) ; } } @Override protected CopyAction createCopyAction ( ) { DocumentationRegistry documentationRegistry = getServices ( ) . get ( DocumentationRegistry . class ) ; return new ZipCopyAction ( getArchivePath ( ) , getCompressor ( ) , documentationRegistry , encoding ) ; } public ZipEntryCompression getEntryCompression ( ) { return entryCompression ; } public void setEntryCompression ( ZipEntryCompression entryCompression ) { this . entryCompression = entryCompression ; } @Incubating public void setZip64 ( boolean allowZip64 ) { this . allowZip64 = allowZip64 ; } @Incubating public boolean isZip64 ( ) { return allowZip64 ; } public String getEncoding ( ) { return this . encoding ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } @SuppressWarnings ( <str> ) @Deprecated protected class ZipCopyActionImpl { } } 

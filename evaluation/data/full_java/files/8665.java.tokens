package org . elasticsearch . index . analysis ; import com . ibm . icu . text . Collator ; import com . ibm . icu . text . RuleBasedCollator ; import com . ibm . icu . util . ULocale ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . analysis . core . KeywordTokenizer ; import org . apache . lucene . analysis . tokenattributes . CharTermAttribute ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . io . StringReader ; import static org . elasticsearch . index . analysis . AnalysisTestUtils . createAnalysisService ; import static org . hamcrest . Matchers . equalTo ; public class SimpleIcuCollationTokenFilterTests extends ESTestCase { public void testBasicUsage ( ) throws Exception { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertCollatesToSame ( filterFactory , <str> , <str> ) ; } public void testNormalization ( ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertCollatesToSame ( filterFactory , <str> , <str> ) ; } public void testSecondaryStrength ( ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertCollatesToSame ( filterFactory , <str> , <str> ) ; } public void testIgnorePunctuation ( ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertCollatesToSame ( filterFactory , <str> , <str> ) ; } public void testIgnoreWhitespace ( ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertCollatesToSame ( filterFactory , <str> , <str> ) ; assertCollation ( filterFactory , <str> , <str> , - <int> ) ; } public void testNumerics ( ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertCollation ( filterFactory , <str> , <str> , - <int> ) ; } public void testIgnoreAccentsButNotCase ( ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertCollatesToSame ( filterFactory , <str> , <str> ) ; assertCollatesToSame ( filterFactory , <str> , <str> ) ; assertCollation ( filterFactory , <str> , <str> , - <int> ) ; } public void testUpperCaseFirst ( ) throws IOException { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertCollation ( filterFactory , <str> , <str> , - <int> ) ; } public void testCustomRules ( ) throws Exception { RuleBasedCollator baseCollator = ( RuleBasedCollator ) Collator . getInstance ( new ULocale ( <str> ) ) ; String DIN5007_2_tailorings = <str> + <str> + <str> ; RuleBasedCollator tailoredCollator = new RuleBasedCollator ( baseCollator . getRules ( ) + DIN5007_2_tailorings ) ; String tailoredRules = tailoredCollator . getRules ( ) ; Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . put ( <str> , <str> ) . put ( <str> , tailoredRules ) . put ( <str> , <str> ) . build ( ) ; AnalysisService analysisService = createAnalysisService ( settings ) ; TokenFilterFactory filterFactory = analysisService . tokenFilter ( <str> ) ; assertCollatesToSame ( filterFactory , <str> , <str> ) ; } private void assertCollatesToSame ( TokenFilterFactory factory , String string1 , String string2 ) throws IOException { assertCollation ( factory , string1 , string2 , <int> ) ; } private void assertCollation ( TokenFilterFactory factory , String string1 , String string2 , int comparison ) throws IOException { Tokenizer tokenizer = new KeywordTokenizer ( ) ; tokenizer . setReader ( new StringReader ( string1 ) ) ; TokenStream stream1 = factory . create ( tokenizer ) ; tokenizer = new KeywordTokenizer ( ) ; tokenizer . setReader ( new StringReader ( string2 ) ) ; TokenStream stream2 = factory . create ( tokenizer ) ; assertCollation ( stream1 , stream2 , comparison ) ; } private void assertCollation ( TokenStream stream1 , TokenStream stream2 , int comparison ) throws IOException { CharTermAttribute term1 = stream1 . addAttribute ( CharTermAttribute . class ) ; CharTermAttribute term2 = stream2 . addAttribute ( CharTermAttribute . class ) ; stream1 . reset ( ) ; stream2 . reset ( ) ; assertThat ( stream1 . incrementToken ( ) , equalTo ( true ) ) ; assertThat ( stream2 . incrementToken ( ) , equalTo ( true ) ) ; assertThat ( Integer . signum ( term1 . toString ( ) . compareTo ( term2 . toString ( ) ) ) , equalTo ( Integer . signum ( comparison ) ) ) ; assertThat ( stream1 . incrementToken ( ) , equalTo ( false ) ) ; assertThat ( stream2 . incrementToken ( ) , equalTo ( false ) ) ; stream1 . end ( ) ; stream2 . end ( ) ; stream1 . close ( ) ; stream2 . close ( ) ; } } 

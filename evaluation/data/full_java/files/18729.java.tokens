package com . badlogic . gdx . tests . android ; import java . nio . ByteBuffer ; import java . nio . ByteOrder ; import java . nio . FloatBuffer ; import java . nio . IntBuffer ; import android . app . Activity ; import android . os . Bundle ; import android . util . Log ; import android . widget . ScrollView ; import android . widget . TextView ; import com . badlogic . gdx . utils . BufferUtils ; public class MicroBenchmarks extends Activity { final int TRIES = <int> ; long start = <int> ; ScrollView sv ; TextView tv ; Thread testThread = new Thread ( new Runnable ( ) { @Override public void run ( ) { ByteBuffer buffer = ByteBuffer . allocateDirect ( <int> * <int> * Float . SIZE / <int> ) ; buffer . order ( ByteOrder . nativeOrder ( ) ) ; FloatBuffer floatBuffer = buffer . asFloatBuffer ( ) ; IntBuffer intBuffer = buffer . asIntBuffer ( ) ; float [ ] floatArray = new float [ <int> * <int> ] ; int [ ] intArray = new int [ <int> * <int> ] ; tic ( ) ; for ( int tries = <int> ; tries < TRIES ; tries + + ) { for ( int i = <int> ; i < floatArray . length ; i + + ) floatBuffer . put ( floatArray [ i ] ) ; floatBuffer . clear ( ) ; } toc ( <str> ) ; tic ( ) ; for ( int tries = <int> ; tries < TRIES ; tries + + ) { for ( int i = <int> ; i < floatArray . length ; i + + ) floatBuffer . put ( i , floatArray [ i ] ) ; floatBuffer . clear ( ) ; } toc ( <str> ) ; tic ( ) ; for ( int tries = <int> ; tries < TRIES ; tries + + ) { floatBuffer . put ( floatArray ) ; floatBuffer . clear ( ) ; } toc ( <str> ) ; tic ( ) ; for ( int tries = <int> ; tries < TRIES ; tries + + ) { for ( int i = <int> ; i < floatArray . length ; i + + ) intArray [ i ] = Float . floatToIntBits ( floatArray [ i ] ) ; intBuffer . put ( intArray ) ; intBuffer . clear ( ) ; } toc ( <str> ) ; tic ( ) ; for ( int tries = <int> ; tries < TRIES ; tries + + ) { BufferUtils . copy ( floatArray , floatBuffer , floatArray . length , <int> ) ; floatBuffer . clear ( ) ; } toc ( <str> ) ; } } ) ; public void onCreate ( Bundle bundle ) { super . onCreate ( bundle ) ; tv = new TextView ( this ) ; sv = new ScrollView ( this ) ; sv . addView ( tv ) ; setContentView ( sv ) ; testThread . start ( ) ; } void tic ( ) { start = System . nanoTime ( ) ; } void toc ( final String info ) { final float time = ( System . nanoTime ( ) - start ) / <float> ; tv . post ( new Runnable ( ) { @Override public void run ( ) { StringBuilder buff = new StringBuilder ( tv . getText ( ) ) ; buff . append ( info ) . append ( <str> ) . append ( time ) . append ( <str> ) ; tv . setText ( buff . toString ( ) ) ; } } ) ; Log . d ( <str> , info + <str> + time ) ; } } 

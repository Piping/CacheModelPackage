package org . gradle . internal . rules ; import groovy . lang . Closure ; import org . gradle . api . Action ; import org . gradle . api . InvalidUserCodeException ; import org . gradle . model . internal . type . ModelType ; public class DefaultRuleActionAdapter < T > implements RuleActionAdapter < T > { private static final String INVALID_CLOSURE_ERROR = <str> ; private static final String INVALID_ACTION_ERROR = <str> ; private static final String INVALID_RULE_SOURCE_ERROR = <str> ; private final RuleActionValidator < T > ruleActionValidator ; private final String context ; public DefaultRuleActionAdapter ( RuleActionValidator < T > ruleActionValidator , String context ) { this . ruleActionValidator = ruleActionValidator ; this . context = context ; } public RuleAction < ? super T > createFromClosure ( Class < T > subjectType , Closure < ? > closure ) { try { return ruleActionValidator . validate ( new ClosureBackedRuleAction < T > ( subjectType , closure ) ) ; } catch ( RuleActionValidationException e ) { throw new InvalidUserCodeException ( String . format ( INVALID_CLOSURE_ERROR , context ) , e ) ; } } public RuleAction < ? super T > createFromAction ( Action < ? super T > action ) { try { return ruleActionValidator . validate ( new NoInputsRuleAction < T > ( action ) ) ; } catch ( RuleActionValidationException e ) { throw new InvalidUserCodeException ( String . format ( INVALID_ACTION_ERROR , context ) , e ) ; } } public RuleAction < ? super T > createFromRuleSource ( Class < T > subjectType , Object ruleSource ) { try { return ruleActionValidator . validate ( RuleSourceBackedRuleAction . create ( ModelType . of ( subjectType ) , ruleSource ) ) ; } catch ( RuleActionValidationException e ) { throw new InvalidUserCodeException ( String . format ( INVALID_RULE_SOURCE_ERROR , context ) , e ) ; } } } 

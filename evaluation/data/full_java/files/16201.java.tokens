package org . gradle . foundation . ipc . gradle ; import org . gradle . api . logging . LogLevel ; import org . gradle . foundation . ProjectView ; import org . gradle . foundation . ipc . basic . MessageObject ; import org . gradle . logging . ShowStacktrace ; import java . io . File ; import java . util . List ; public class TaskListServerProtocol extends AbstractGradleServerProtocol { private static final String INIT_SCRIPT_NAME = <str> ; private ExecutionInteraction executionInteraction ; public interface ExecutionInteraction { void reportExecutionStarted ( ) ; void reportExecutionFinished ( boolean wasSuccessful , String message , Throwable throwable ) ; void projectsPopulated ( List < ProjectView > projects ) ; void reportLiveOutput ( String message ) ; } public TaskListServerProtocol ( File currentDirectory , File gradleHomeDirectory , File customGradleExecutor , String fullCommandLine , LogLevel logLevel , ShowStacktrace stackTraceLevel , ExecutionInteraction executionInteraction ) { super ( currentDirectory , gradleHomeDirectory , customGradleExecutor , fullCommandLine , logLevel , stackTraceLevel ) ; this . executionInteraction = executionInteraction ; } @Override protected boolean handleMessageReceived ( MessageObject message ) { if ( ProtocolConstants . TASK_LIST_COMPLETED_WITH_ERRORS_TYPE . equals ( message . getMessageType ( ) ) ) { setHasReceivedBuildCompleteNotification ( ) ; return true ; } if ( ProtocolConstants . TASK_LIST_COMPLETED_SUCCESSFULLY_TYPE . equals ( message . getMessageType ( ) ) ) { setHasReceivedBuildCompleteNotification ( ) ; List < ProjectView > projects = ( List < ProjectView > ) message . getData ( ) ; executionInteraction . projectsPopulated ( projects ) ; return true ; } if ( ProtocolConstants . EXITING . equals ( message . getMessageType ( ) ) ) { closeConnection ( ) ; return true ; } return false ; } protected void reportClientExit ( boolean wasPremature , int returnCode , String output ) { executionInteraction . reportExecutionFinished ( returnCode = = <int> , output , null ) ; } protected void addStatus ( String status ) { executionInteraction . reportLiveOutput ( status ) ; } public File getInitScriptFile ( ) { return this . extractInitScriptFile ( TaskListServerProtocol . class , INIT_SCRIPT_NAME ) ; } } 

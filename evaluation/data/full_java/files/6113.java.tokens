package org . elasticsearch . common . util . concurrent ; import java . util . Collections ; import java . util . Deque ; import java . util . Queue ; import java . util . Set ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentLinkedDeque ; import java . util . concurrent . ConcurrentLinkedQueue ; import java . util . concurrent . ConcurrentMap ; import java . util . concurrent . LinkedTransferQueue ; public abstract class ConcurrentCollections { private final static boolean useLinkedTransferQueue = Boolean . parseBoolean ( System . getProperty ( <str> , <str> ) ) ; static final int aggressiveConcurrencyLevel ; static { aggressiveConcurrencyLevel = Math . max ( Runtime . getRuntime ( ) . availableProcessors ( ) * <int> , <int> ) ; } public static < K , V > ConcurrentMap < K , V > newConcurrentMapWithAggressiveConcurrency ( ) { return new ConcurrentHashMap < > ( <int> , <float> , aggressiveConcurrencyLevel ) ; } public static < K , V > ConcurrentMap < K , V > newConcurrentMap ( ) { return new ConcurrentHashMap < > ( ) ; } public static < V > ConcurrentMapLong < V > newConcurrentMapLongWithAggressiveConcurrency ( ) { return new ConcurrentHashMapLong < > ( ConcurrentCollections . < Long , V > newConcurrentMapWithAggressiveConcurrency ( ) ) ; } public static < V > ConcurrentMapLong < V > newConcurrentMapLong ( ) { return new ConcurrentHashMapLong < > ( ConcurrentCollections . < Long , V > newConcurrentMap ( ) ) ; } public static < V > Set < V > newConcurrentSet ( ) { return Collections . newSetFromMap ( ConcurrentCollections . < V , Boolean > newConcurrentMap ( ) ) ; } public static < T > Queue < T > newQueue ( ) { if ( useLinkedTransferQueue ) { return new LinkedTransferQueue < > ( ) ; } return new ConcurrentLinkedQueue < > ( ) ; } public static < T > Deque < T > newDeque ( ) { return new ConcurrentLinkedDeque < > ( ) ; } public static < T > BlockingQueue < T > newBlockingQueue ( ) { return new LinkedTransferQueue < > ( ) ; } private ConcurrentCollections ( ) { } } 

package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . Vector ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationListener ; import org . eclipse . debug . core . ILaunchListener ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . ILaunchGroup ; import org . eclipse . ui . activities . WorkbenchActivityHelper ; @SuppressWarnings ( <str> ) public class LaunchHistory implements ILaunchListener , ILaunchConfigurationListener { private Vector < ILaunchConfiguration > fCompleteHistory = new Vector < ILaunchConfiguration > ( ) ; private ILaunchGroup fGroup ; private Vector < ILaunchConfiguration > fFavorites = new Vector < ILaunchConfiguration > ( ) ; private boolean fSaved = true ; private static List < LaunchHistory > fgLaunchHistoryInstances = new ArrayList < LaunchHistory > ( ) ; public LaunchHistory ( ILaunchGroup group ) { fGroup = group ; ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; manager . addLaunchListener ( this ) ; manager . addLaunchConfigurationListener ( this ) ; fgLaunchHistoryInstances . add ( this ) ; } public void dispose ( ) { ILaunchManager manager = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; manager . removeLaunchListener ( this ) ; manager . removeLaunchConfigurationListener ( this ) ; fgLaunchHistoryInstances . remove ( this ) ; } @Override public void launchAdded ( ILaunch launch ) { ILaunchConfiguration configuration = launch . getLaunchConfiguration ( ) ; if ( configuration ! = null & & ! configuration . isWorkingCopy ( ) & & DebugUIPlugin . doLaunchConfigurationFiltering ( configuration ) & & accepts ( configuration ) ) { addHistory ( configuration , true ) ; } } public synchronized boolean contains ( ILaunchConfiguration configuration ) { return fCompleteHistory . contains ( configuration ) ; } protected void addHistory ( ILaunchConfiguration configuration , boolean prepend ) { synchronized ( this ) { if ( configuration . isWorkingCopy ( ) ) { return ; } checkFavorites ( configuration ) ; int index = fCompleteHistory . indexOf ( configuration ) ; if ( index = = <int> ) { return ; } if ( index < <int> ) { if ( prepend ) { fCompleteHistory . add ( <int> , configuration ) ; } else { fCompleteHistory . add ( configuration ) ; } } else { fCompleteHistory . add ( <int> , fCompleteHistory . remove ( index ) ) ; } resizeHistory ( ) ; } fireLaunchHistoryChanged ( ) ; } private void fireLaunchHistoryChanged ( ) { DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . fireLaunchHistoryChanged ( ) ; setSaved ( false ) ; } public boolean needsSaving ( ) { return ! fSaved ; } public void setSaved ( boolean saved ) { fSaved = saved ; } @Override public void launchChanged ( ILaunch launch ) { } @Override public void launchRemoved ( ILaunch launch ) { } public synchronized ILaunchConfiguration getRecentLaunch ( ) { ILaunchConfiguration [ ] history = getCompleteLaunchHistory ( ) ; if ( history . length > <int> ) { return history [ <int> ] ; } return null ; } public synchronized ILaunchConfiguration [ ] getHistory ( ) { Vector < ILaunchConfiguration > history = new Vector < ILaunchConfiguration > ( ) ; try { for ( ILaunchConfiguration config : fCompleteHistory ) { if ( config . exists ( ) & & ! fFavorites . contains ( config ) & & DebugUIPlugin . doLaunchConfigurationFiltering ( config ) & & ! WorkbenchActivityHelper . filterItem ( new LaunchConfigurationTypeContribution ( config . getType ( ) ) ) ) { history . add ( config ) ; } } if ( history . size ( ) > getMaxHistorySize ( ) ) { history . setSize ( getMaxHistorySize ( ) ) ; } } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } return history . toArray ( new ILaunchConfiguration [ history . size ( ) ] ) ; } public synchronized ILaunchConfiguration [ ] getCompleteLaunchHistory ( ) { Vector < ILaunchConfiguration > history = new Vector < ILaunchConfiguration > ( ) ; try { for ( ILaunchConfiguration config : fCompleteHistory ) { if ( config . exists ( ) & & DebugUIPlugin . doLaunchConfigurationFiltering ( config ) & & ! WorkbenchActivityHelper . filterItem ( new LaunchConfigurationTypeContribution ( config . getType ( ) ) ) ) { history . add ( config ) ; } } } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } return history . toArray ( new ILaunchConfiguration [ history . size ( ) ] ) ; } public synchronized ILaunchConfiguration [ ] getFavorites ( ) { return fFavorites . toArray ( new ILaunchConfiguration [ fFavorites . size ( ) ] ) ; } public synchronized void setFavorites ( ILaunchConfiguration [ ] favorites ) { fFavorites = new Vector < ILaunchConfiguration > ( Arrays . asList ( favorites ) ) ; setSaved ( false ) ; fireLaunchHistoryChanged ( ) ; } public synchronized void addFavorite ( ILaunchConfiguration configuration ) { if ( ! fFavorites . contains ( configuration ) ) { fFavorites . add ( configuration ) ; setSaved ( false ) ; fireLaunchHistoryChanged ( ) ; } } public ILaunchGroup getLaunchGroup ( ) { return fGroup ; } public boolean accepts ( ILaunchConfiguration configuration ) { try { if ( ! LaunchConfigurationManager . isVisible ( configuration ) ) { return false ; } if ( configuration . getType ( ) . supportsMode ( getLaunchGroup ( ) . getMode ( ) ) ) { String launchCategory = null ; launchCategory = configuration . getCategory ( ) ; String category = getLaunchGroup ( ) . getCategory ( ) ; if ( launchCategory = = null | | category = = null ) { return launchCategory = = category ; } return category . equals ( launchCategory ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } return false ; } public static void launchHistoryChanged ( ) { for ( LaunchHistory history : fgLaunchHistoryInstances ) { history . resizeHistory ( ) ; } } protected synchronized void resizeHistory ( ) { int max = getMaxHistorySize ( ) + fFavorites . size ( ) ; if ( fCompleteHistory . size ( ) > max ) { fCompleteHistory . setSize ( max ) ; } } protected int getMaxHistorySize ( ) { return DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getInt ( IDebugUIConstants . PREF_MAX_HISTORY_SIZE ) ; } @Override public void launchConfigurationAdded ( ILaunchConfiguration configuration ) { ILaunchConfiguration movedFrom = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getMovedFrom ( configuration ) ; if ( movedFrom = = null ) { checkFavorites ( configuration ) ; } } protected boolean isFavorite ( ILaunchConfiguration configuration ) throws CoreException { String groupId = getLaunchGroup ( ) . getIdentifier ( ) ; List < String > favoriteGroups = configuration . getAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , ( List < String > ) null ) ; if ( favoriteGroups = = null ) { if ( groupId . equals ( IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP ) ) { return configuration . getAttribute ( IDebugUIConstants . ATTR_DEBUG_FAVORITE , false ) ; } else if ( groupId . equals ( IDebugUIConstants . ID_RUN_LAUNCH_GROUP ) ) { return configuration . getAttribute ( IDebugUIConstants . ATTR_RUN_FAVORITE , false ) ; } } else if ( favoriteGroups . contains ( getLaunchGroup ( ) . getIdentifier ( ) ) ) { return true ; } return false ; } protected boolean checkFavorites ( ILaunchConfiguration configuration ) { if ( configuration . isWorkingCopy ( ) ) { return false ; } try { if ( isFavorite ( configuration ) ) { addFavorite ( configuration ) ; return true ; } else { removeFavorite ( configuration ) ; return false ; } } catch ( CoreException e ) { removeFavorite ( configuration ) ; } return false ; } protected synchronized void removeFavorite ( ILaunchConfiguration configuration ) { fFavorites . remove ( configuration ) ; setSaved ( false ) ; fireLaunchHistoryChanged ( ) ; } public synchronized void removeFromHistory ( ILaunchConfiguration configuration ) { try { boolean removed = fCompleteHistory . remove ( configuration ) ; if ( isFavorite ( configuration ) ) { removed | = fFavorites . remove ( configuration ) ; } if ( removed ) { setSaved ( false ) ; fireLaunchHistoryChanged ( ) ; } } catch ( CoreException ce ) { } } @Override public void launchConfigurationChanged ( ILaunchConfiguration configuration ) { checkFavorites ( configuration ) ; } @Override public void launchConfigurationRemoved ( ILaunchConfiguration configuration ) { synchronized ( this ) { ILaunchConfiguration newConfig = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getMovedTo ( configuration ) ; if ( newConfig = = null ) { fCompleteHistory . remove ( configuration ) ; fFavorites . remove ( configuration ) ; } else { int index = fCompleteHistory . indexOf ( configuration ) ; if ( index > = <int> ) { fCompleteHistory . remove ( index ) ; fCompleteHistory . add ( index , newConfig ) ; } index = fFavorites . indexOf ( configuration ) ; if ( index > = <int> ) { fFavorites . remove ( index ) ; fFavorites . add ( index , newConfig ) ; } checkFavorites ( newConfig ) ; } } fireLaunchHistoryChanged ( ) ; } } 

package org . gradle . api . internal . tasks . options ; import org . apache . commons . lang . StringUtils ; import org . gradle . internal . typeconversion . ValueAwareNotationParser ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . List ; public class FieldOptionElement extends AbstractOptionElement { public static FieldOptionElement create ( Option option , Field field , OptionNotationParserFactory optionNotationParserFactory ) { String optionName = calOptionName ( option , field ) ; Class < ? > optionType = calculateOptionType ( field . getType ( ) ) ; ValueAwareNotationParser < ? > notationParser = createNotationParserOrFail ( optionNotationParserFactory , optionName , optionType , field . getDeclaringClass ( ) ) ; return new FieldOptionElement ( field , optionName , option , optionType , notationParser ) ; } private final Field field ; public FieldOptionElement ( Field field , String optionName , Option option , Class < ? > optionType , ValueAwareNotationParser < ? > notationParser ) { super ( optionName , option , optionType , field . getDeclaringClass ( ) , notationParser ) ; this . field = field ; getSetter ( ) ; } private static String calOptionName ( Option option , Field field ) { if ( option . option ( ) . length ( ) = = <int> ) { return field . getName ( ) ; } else { return option . option ( ) ; } } private Method getSetter ( ) { try { String setterName = <str> + StringUtils . capitalize ( field . getName ( ) ) ; return field . getDeclaringClass ( ) . getMethod ( setterName , field . getType ( ) ) ; } catch ( NoSuchMethodException e ) { throw new OptionValidationException ( String . format ( <str> , getElementName ( ) , getDeclaredClass ( ) ) ) ; } } public String getElementName ( ) { return field . getName ( ) ; } public Class < ? > getDeclaredClass ( ) { return field . getDeclaringClass ( ) ; } public void apply ( Object object , List < String > parameterValues ) { if ( getOptionType ( ) = = Void . TYPE & & parameterValues . size ( ) = = <int> ) { setFieldValue ( object , true ) ; } else if ( parameterValues . size ( ) > <int> ) { throw new IllegalArgumentException ( String . format ( <str> ) ) ; } else { Object arg = getNotationParser ( ) . parseNotation ( parameterValues . get ( <int> ) ) ; setFieldValue ( object , arg ) ; } } private void setFieldValue ( Object object , Object value ) { Method setter = getSetter ( ) ; invokeMethod ( object , setter , value ) ; } } 

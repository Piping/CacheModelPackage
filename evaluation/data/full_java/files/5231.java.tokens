package org . elasticsearch . action . admin . indices . upgrade . post ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . ack . ClusterStateUpdateResponse ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MetaDataUpdateSettingsService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportUpgradeSettingsAction extends TransportMasterNodeAction < UpgradeSettingsRequest , UpgradeSettingsResponse > { private final MetaDataUpdateSettingsService updateSettingsService ; @Inject public TransportUpgradeSettingsAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , MetaDataUpdateSettingsService updateSettingsService , IndexNameExpressionResolver indexNameExpressionResolver , ActionFilters actionFilters ) { super ( settings , UpgradeSettingsAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , UpgradeSettingsRequest : : new ) ; this . updateSettingsService = updateSettingsService ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected ClusterBlockException checkBlock ( UpgradeSettingsRequest request , ClusterState state ) { return state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . METADATA_WRITE ) ; } @Override protected UpgradeSettingsResponse newResponse ( ) { return new UpgradeSettingsResponse ( ) ; } @Override protected void masterOperation ( final UpgradeSettingsRequest request , final ClusterState state , final ActionListener < UpgradeSettingsResponse > listener ) { UpgradeSettingsClusterStateUpdateRequest clusterStateUpdateRequest = new UpgradeSettingsClusterStateUpdateRequest ( ) . ackTimeout ( request . timeout ( ) ) . versions ( request . versions ( ) ) . masterNodeTimeout ( request . masterNodeTimeout ( ) ) ; updateSettingsService . upgradeIndexSettings ( clusterStateUpdateRequest , new ActionListener < ClusterStateUpdateResponse > ( ) { @Override public void onResponse ( ClusterStateUpdateResponse response ) { listener . onResponse ( new UpgradeSettingsResponse ( response . isAcknowledged ( ) ) ) ; } @Override public void onFailure ( Throwable t ) { logger . debug ( <str> , t , request . versions ( ) . keySet ( ) ) ; listener . onFailure ( t ) ; } } ) ; } } 

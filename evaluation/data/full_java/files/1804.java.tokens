package clojure . asm ; public interface Opcodes { int ASM4 = <int> < < <int> | <int> < < <int> | <int> ; int V1_1 = <int> < < <int> | <int> ; int V1_2 = <int> < < <int> | <int> ; int V1_3 = <int> < < <int> | <int> ; int V1_4 = <int> < < <int> | <int> ; int V1_5 = <int> < < <int> | <int> ; int V1_6 = <int> < < <int> | <int> ; int V1_7 = <int> < < <int> | <int> ; int ACC_PUBLIC = <hex> ; int ACC_PRIVATE = <hex> ; int ACC_PROTECTED = <hex> ; int ACC_STATIC = <hex> ; int ACC_FINAL = <hex> ; int ACC_SUPER = <hex> ; int ACC_SYNCHRONIZED = <hex> ; int ACC_VOLATILE = <hex> ; int ACC_BRIDGE = <hex> ; int ACC_VARARGS = <hex> ; int ACC_TRANSIENT = <hex> ; int ACC_NATIVE = <hex> ; int ACC_INTERFACE = <hex> ; int ACC_ABSTRACT = <hex> ; int ACC_STRICT = <hex> ; int ACC_SYNTHETIC = <hex> ; int ACC_ANNOTATION = <hex> ; int ACC_ENUM = <hex> ; int ACC_DEPRECATED = <hex> ; int T_BOOLEAN = <int> ; int T_CHAR = <int> ; int T_FLOAT = <int> ; int T_DOUBLE = <int> ; int T_BYTE = <int> ; int T_SHORT = <int> ; int T_INT = <int> ; int T_LONG = <int> ; int H_GETFIELD = <int> ; int H_GETSTATIC = <int> ; int H_PUTFIELD = <int> ; int H_PUTSTATIC = <int> ; int H_INVOKEVIRTUAL = <int> ; int H_INVOKESTATIC = <int> ; int H_INVOKESPECIAL = <int> ; int H_NEWINVOKESPECIAL = <int> ; int H_INVOKEINTERFACE = <int> ; int F_NEW = - <int> ; int F_FULL = <int> ; int F_APPEND = <int> ; int F_CHOP = <int> ; int F_SAME = <int> ; int F_SAME1 = <int> ; Integer TOP = new Integer ( <int> ) ; Integer INTEGER = new Integer ( <int> ) ; Integer FLOAT = new Integer ( <int> ) ; Integer DOUBLE = new Integer ( <int> ) ; Integer LONG = new Integer ( <int> ) ; Integer NULL = new Integer ( <int> ) ; Integer UNINITIALIZED_THIS = new Integer ( <int> ) ; int NOP = <int> ; int ACONST_NULL = <int> ; int ICONST_M1 = <int> ; int ICONST_0 = <int> ; int ICONST_1 = <int> ; int ICONST_2 = <int> ; int ICONST_3 = <int> ; int ICONST_4 = <int> ; int ICONST_5 = <int> ; int LCONST_0 = <int> ; int LCONST_1 = <int> ; int FCONST_0 = <int> ; int FCONST_1 = <int> ; int FCONST_2 = <int> ; int DCONST_0 = <int> ; int DCONST_1 = <int> ; int BIPUSH = <int> ; int SIPUSH = <int> ; int LDC = <int> ; int ILOAD = <int> ; int LLOAD = <int> ; int FLOAD = <int> ; int DLOAD = <int> ; int ALOAD = <int> ; int IALOAD = <int> ; int LALOAD = <int> ; int FALOAD = <int> ; int DALOAD = <int> ; int AALOAD = <int> ; int BALOAD = <int> ; int CALOAD = <int> ; int SALOAD = <int> ; int ISTORE = <int> ; int LSTORE = <int> ; int FSTORE = <int> ; int DSTORE = <int> ; int ASTORE = <int> ; int IASTORE = <int> ; int LASTORE = <int> ; int FASTORE = <int> ; int DASTORE = <int> ; int AASTORE = <int> ; int BASTORE = <int> ; int CASTORE = <int> ; int SASTORE = <int> ; int POP = <int> ; int POP2 = <int> ; int DUP = <int> ; int DUP_X1 = <int> ; int DUP_X2 = <int> ; int DUP2 = <int> ; int DUP2_X1 = <int> ; int DUP2_X2 = <int> ; int SWAP = <int> ; int IADD = <int> ; int LADD = <int> ; int FADD = <int> ; int DADD = <int> ; int ISUB = <int> ; int LSUB = <int> ; int FSUB = <int> ; int DSUB = <int> ; int IMUL = <int> ; int LMUL = <int> ; int FMUL = <int> ; int DMUL = <int> ; int IDIV = <int> ; int LDIV = <int> ; int FDIV = <int> ; int DDIV = <int> ; int IREM = <int> ; int LREM = <int> ; int FREM = <int> ; int DREM = <int> ; int INEG = <int> ; int LNEG = <int> ; int FNEG = <int> ; int DNEG = <int> ; int ISHL = <int> ; int LSHL = <int> ; int ISHR = <int> ; int LSHR = <int> ; int IUSHR = <int> ; int LUSHR = <int> ; int IAND = <int> ; int LAND = <int> ; int IOR = <int> ; int LOR = <int> ; int IXOR = <int> ; int LXOR = <int> ; int IINC = <int> ; int I2L = <int> ; int I2F = <int> ; int I2D = <int> ; int L2I = <int> ; int L2F = <int> ; int L2D = <int> ; int F2I = <int> ; int F2L = <int> ; int F2D = <int> ; int D2I = <int> ; int D2L = <int> ; int D2F = <int> ; int I2B = <int> ; int I2C = <int> ; int I2S = <int> ; int LCMP = <int> ; int FCMPL = <int> ; int FCMPG = <int> ; int DCMPL = <int> ; int DCMPG = <int> ; int IFEQ = <int> ; int IFNE = <int> ; int IFLT = <int> ; int IFGE = <int> ; int IFGT = <int> ; int IFLE = <int> ; int IF_ICMPEQ = <int> ; int IF_ICMPNE = <int> ; int IF_ICMPLT = <int> ; int IF_ICMPGE = <int> ; int IF_ICMPGT = <int> ; int IF_ICMPLE = <int> ; int IF_ACMPEQ = <int> ; int IF_ACMPNE = <int> ; int GOTO = <int> ; int JSR = <int> ; int RET = <int> ; int TABLESWITCH = <int> ; int LOOKUPSWITCH = <int> ; int IRETURN = <int> ; int LRETURN = <int> ; int FRETURN = <int> ; int DRETURN = <int> ; int ARETURN = <int> ; int RETURN = <int> ; int GETSTATIC = <int> ; int PUTSTATIC = <int> ; int GETFIELD = <int> ; int PUTFIELD = <int> ; int INVOKEVIRTUAL = <int> ; int INVOKESPECIAL = <int> ; int INVOKESTATIC = <int> ; int INVOKEINTERFACE = <int> ; int INVOKEDYNAMIC = <int> ; int NEW = <int> ; int NEWARRAY = <int> ; int ANEWARRAY = <int> ; int ARRAYLENGTH = <int> ; int ATHROW = <int> ; int CHECKCAST = <int> ; int INSTANCEOF = <int> ; int MONITORENTER = <int> ; int MONITOREXIT = <int> ; int MULTIANEWARRAY = <int> ; int IFNULL = <int> ; int IFNONNULL = <int> ; } 

package io . netty . handler . codec . socks ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import org . junit . Test ; import static org . junit . Assert . * ; public class SocksCmdResponseDecoderTest { private static final InternalLogger logger = InternalLoggerFactory . getInstance ( SocksCmdResponseDecoderTest . class ) ; private static void testSocksCmdResponseDecoderWithDifferentParams ( SocksCmdStatus cmdStatus , SocksAddressType addressType , String host , int port ) { logger . debug ( <str> + cmdStatus + <str> + addressType ) ; SocksResponse msg = new SocksCmdResponse ( cmdStatus , addressType , host , port ) ; SocksCmdResponseDecoder decoder = new SocksCmdResponseDecoder ( ) ; EmbeddedChannel embedder = new EmbeddedChannel ( decoder ) ; SocksCommonTestUtils . writeMessageIntoEmbedder ( embedder , msg ) ; if ( addressType = = SocksAddressType . UNKNOWN ) { assertTrue ( embedder . readInbound ( ) instanceof UnknownSocksResponse ) ; } else { msg = embedder . readInbound ( ) ; assertEquals ( ( ( SocksCmdResponse ) msg ) . cmdStatus ( ) , cmdStatus ) ; if ( host ! = null ) { assertEquals ( ( ( SocksCmdResponse ) msg ) . host ( ) , host ) ; } assertEquals ( ( ( SocksCmdResponse ) msg ) . port ( ) , port ) ; } assertNull ( embedder . readInbound ( ) ) ; } @Test public void testSocksCmdResponseDecoder ( ) { for ( SocksCmdStatus cmdStatus : SocksCmdStatus . values ( ) ) { for ( SocksAddressType addressType : SocksAddressType . values ( ) ) { testSocksCmdResponseDecoderWithDifferentParams ( cmdStatus , addressType , null , <int> ) ; } } } @Test ( expected = IllegalArgumentException . class ) public void testInvalidAddress ( ) { testSocksCmdResponseDecoderWithDifferentParams ( SocksCmdStatus . SUCCESS , SocksAddressType . IPv4 , <str> , <int> ) ; } @Test public void testSocksCmdResponseDecoderIncludingHost ( ) { for ( SocksCmdStatus cmdStatus : SocksCmdStatus . values ( ) ) { testSocksCmdResponseDecoderWithDifferentParams ( cmdStatus , SocksAddressType . IPv4 , <str> , <int> ) ; testSocksCmdResponseDecoderWithDifferentParams ( cmdStatus , SocksAddressType . DOMAIN , <str> , <int> ) ; testSocksCmdResponseDecoderWithDifferentParams ( cmdStatus , SocksAddressType . IPv6 , <str> , <int> ) ; testSocksCmdResponseDecoderWithDifferentParams ( cmdStatus , SocksAddressType . IPv6 , <str> , <int> ) ; } } } 

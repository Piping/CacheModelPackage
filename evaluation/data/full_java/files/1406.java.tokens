package org . apache . cassandra . cql3 . validation . miscellaneous ; import java . util . List ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . Future ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . db . compaction . CompactionInterruptedException ; import org . apache . cassandra . db . compaction . CompactionManager ; import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . utils . FBUtilities ; public class CrcCheckChanceTest extends CQLTester { @Test public void testChangingCrcCheckChanceNewFormat ( ) throws Throwable { testChangingCrcCheckChance ( true ) ; } @Test public void testChangingCrcCheckChanceOldFormat ( ) throws Throwable { testChangingCrcCheckChance ( false ) ; } public void testChangingCrcCheckChance ( boolean newFormat ) throws Throwable { if ( newFormat ) createTable ( <str> ) ; else createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> , <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> ) ; ColumnFamilyStore cfs = Keyspace . open ( CQLTester . KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) ; ColumnFamilyStore indexCfs = cfs . indexManager . getAllIndexColumnFamilyStores ( ) . iterator ( ) . next ( ) ; cfs . forceBlockingFlush ( ) ; Assert . assertEquals ( <float> , cfs . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , indexCfs . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; if ( newFormat ) alterTable ( <str> ) ; else alterTable ( <str> ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; execute ( <str> , <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> ) ; cfs . forceBlockingFlush ( ) ; execute ( <str> , <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> ) ; cfs . forceBlockingFlush ( ) ; execute ( <str> , <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> ) ; cfs . forceBlockingFlush ( ) ; cfs . forceMajorCompaction ( ) ; cfs . setCrcCheckChance ( <float> ) ; Assert . assertEquals ( <float> , cfs . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , indexCfs . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> , <str> , <str> , <str> ) ) ; if ( newFormat ) alterTable ( <str> ) ; else alterTable ( <str> ) ; Assert . assertEquals ( <float> , cfs . metadata . params . crcCheckChance ) ; Assert . assertEquals ( <float> , cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , indexCfs . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; cfs . setCrcCheckChance ( <float> ) ; Assert . assertEquals ( <float> , cfs . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , indexCfs . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) . getCrcCheckChance ( ) ) ; SSTableReader baseSSTable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; SSTableReader idxSSTable = indexCfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; try ( CompressedRandomAccessReader baseDataReader = ( CompressedRandomAccessReader ) baseSSTable . openDataReader ( ) ; CompressedRandomAccessReader idxDataReader = ( CompressedRandomAccessReader ) idxSSTable . openDataReader ( ) ) { Assert . assertEquals ( <float> , baseDataReader . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , idxDataReader . getCrcCheckChance ( ) ) ; cfs . setCrcCheckChance ( <float> ) ; Assert . assertEquals ( <float> , baseDataReader . getCrcCheckChance ( ) ) ; Assert . assertEquals ( <float> , idxDataReader . getCrcCheckChance ( ) ) ; } } @Test public void testDropDuringCompaction ( ) throws Throwable { CompactionManager . instance . disableAutoCompaction ( ) ; createTable ( <str> ) ; ColumnFamilyStore cfs = Keyspace . open ( CQLTester . KEYSPACE ) . getColumnFamilyStore ( currentTable ( ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { execute ( <str> , <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> , <str> ) ; execute ( <str> , <str> , <str> ) ; cfs . forceBlockingFlush ( ) ; } DatabaseDescriptor . setCompactionThroughputMbPerSec ( <int> ) ; List < Future < ? > > futures = CompactionManager . instance . submitMaximal ( cfs , CompactionManager . getDefaultGcBefore ( cfs , FBUtilities . nowInSeconds ( ) ) , false ) ; execute ( <str> ) ; try { FBUtilities . waitOnFutures ( futures ) ; } catch ( Throwable t ) { if ( ! ( t . getCause ( ) instanceof ExecutionException ) | | ! ( t . getCause ( ) . getCause ( ) instanceof CompactionInterruptedException ) ) throw t ; } } } 

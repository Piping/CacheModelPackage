package org . gradle . internal . resource . local ; import org . gradle . api . Action ; import org . gradle . api . Transformer ; import org . gradle . api . internal . file . TemporaryFileProvider ; import org . gradle . internal . hash . HashUtil ; import java . io . File ; import java . util . Set ; public class GroupedAndNamedUniqueFileStore < K > implements FileStore < K > , FileStoreSearcher < K > { private PathKeyFileStore delegate ; private final TemporaryFileProvider temporaryFileProvider ; private final Transformer < String , K > grouper ; private final Transformer < String , K > namer ; public GroupedAndNamedUniqueFileStore ( PathKeyFileStore delegate , TemporaryFileProvider temporaryFileProvider , Transformer < String , K > grouper , Transformer < String , K > namer ) { this . delegate = delegate ; this . temporaryFileProvider = temporaryFileProvider ; this . grouper = grouper ; this . namer = namer ; } public LocallyAvailableResource move ( K key , File source ) { return delegate . move ( toPath ( key , getChecksum ( source ) ) , source ) ; } public LocallyAvailableResource copy ( K key , File source ) { return delegate . copy ( toPath ( key , getChecksum ( source ) ) , source ) ; } public Set < ? extends LocallyAvailableResource > search ( K key ) { return delegate . search ( toPath ( key , <str> ) ) ; } protected String toPath ( K key , String checksumPart ) { String group = grouper . transform ( key ) ; String name = namer . transform ( key ) ; return String . format ( <str> , group , checksumPart , name ) ; } private String getChecksum ( File contentFile ) { return HashUtil . createHash ( contentFile , <str> ) . asHexString ( ) ; } public File getTempFile ( ) { return temporaryFileProvider . createTemporaryFile ( <str> , <str> ) ; } public void moveFilestore ( File destination ) { delegate . moveFilestore ( destination ) ; } public LocallyAvailableResource add ( K key , Action < File > addAction ) { final File tempFile = getTempFile ( ) ; addAction . execute ( tempFile ) ; final String groupedAndNamedKey = toPath ( key , getChecksum ( tempFile ) ) ; return delegate . move ( groupedAndNamedKey , tempFile ) ; } } 

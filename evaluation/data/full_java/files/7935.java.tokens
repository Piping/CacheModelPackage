package org . elasticsearch . common . lucene . all ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . core . WhitespaceAnalyzer ; import org . apache . lucene . analysis . payloads . PayloadHelper ; import org . apache . lucene . analysis . tokenattributes . CharTermAttribute ; import org . apache . lucene . analysis . tokenattributes . PayloadAttribute ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . StoredField ; import org . apache . lucene . document . TextField ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . Explanation ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . MatchAllDocsQuery ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . ScoreDoc ; import org . apache . lucene . search . TopDocs ; import org . apache . lucene . store . Directory ; import org . apache . lucene . store . RAMDirectory ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; public class SimpleAllTests extends ESTestCase { public void testBoostOnEagerTokenizer ( ) throws Exception { AllEntries allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . reset ( ) ; final TokenStream ts = AllTokenStream . allTokenStream ( <str> , allEntries , new WhitespaceAnalyzer ( ) ) ; final CharTermAttribute termAtt = ts . addAttribute ( CharTermAttribute . class ) ; final PayloadAttribute payloadAtt = ts . addAttribute ( PayloadAttribute . class ) ; ts . reset ( ) ; for ( int i = <int> ; i < <int> ; + + i ) { assertTrue ( ts . incrementToken ( ) ) ; final String term ; final float boost ; switch ( i ) { case <int> : term = <str> ; boost = <int> ; break ; case <int> : term = <str> ; boost = <int> ; break ; case <int> : term = <str> ; boost = <float> ; break ; default : throw new AssertionError ( ) ; } assertEquals ( term , termAtt . toString ( ) ) ; final BytesRef payload = payloadAtt . getPayload ( ) ; if ( payload = = null | | payload . length = = <int> ) { assertEquals ( boost , <float> , <float> ) ; } else { assertEquals ( <int> , payload . length ) ; final float b = PayloadHelper . decodeFloat ( payload . bytes , payload . offset ) ; assertEquals ( boost , b , <float> ) ; } } assertFalse ( ts . incrementToken ( ) ) ; } public void testAllEntriesRead ( ) throws Exception { AllEntries allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; for ( int i = <int> ; i < <int> ; i + + ) { allEntries . reset ( ) ; char [ ] data = new char [ i ] ; String value = slurpToString ( allEntries , data ) ; assertThat ( <str> + i , value , equalTo ( <str> ) ) ; } } private String slurpToString ( AllEntries allEntries , char [ ] data ) throws IOException { StringBuilder sb = new StringBuilder ( ) ; while ( true ) { int read = allEntries . read ( data , <int> , data . length ) ; if ( read = = - <int> ) { break ; } sb . append ( data , <int> , read ) ; } return sb . toString ( ) ; } private void assertExplanationScore ( IndexSearcher searcher , Query query , ScoreDoc scoreDoc ) throws IOException { final Explanation expl = searcher . explain ( query , scoreDoc . doc ) ; assertEquals ( scoreDoc . score , expl . getValue ( ) , <float> ) ; } public void testSimpleAllNoBoost ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document doc = new Document ( ) ; doc . add ( new Field ( <str> , <str> , StoredField . TYPE ) ) ; AllEntries allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . reset ( ) ; doc . add ( new TextField ( <str> , AllTokenStream . allTokenStream ( <str> , allEntries , Lucene . STANDARD_ANALYZER ) ) ) ; indexWriter . addDocument ( doc ) ; doc = new Document ( ) ; doc . add ( new Field ( <str> , <str> , StoredField . TYPE ) ) ; allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . reset ( ) ; doc . add ( new TextField ( <str> , AllTokenStream . allTokenStream ( <str> , allEntries , Lucene . STANDARD_ANALYZER ) ) ) ; indexWriter . addDocument ( doc ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; Query query = new AllTermQuery ( new Term ( <str> , <str> ) ) ; TopDocs docs = searcher . search ( query , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertExplanationScore ( searcher , query , docs . scoreDocs [ <int> ] ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertExplanationScore ( searcher , query , docs . scoreDocs [ <int> ] ) ; query = new AllTermQuery ( new Term ( <str> , <str> ) ) ; docs = searcher . search ( query , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertExplanationScore ( searcher , query , docs . scoreDocs [ <int> ] ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertExplanationScore ( searcher , query , docs . scoreDocs [ <int> ] ) ; indexWriter . close ( ) ; } public void testSimpleAllWithBoost ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document doc = new Document ( ) ; doc . add ( new Field ( <str> , <str> , StoredField . TYPE ) ) ; AllEntries allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . reset ( ) ; doc . add ( new TextField ( <str> , AllTokenStream . allTokenStream ( <str> , allEntries , Lucene . STANDARD_ANALYZER ) ) ) ; indexWriter . addDocument ( doc ) ; doc = new Document ( ) ; doc . add ( new Field ( <str> , <str> , StoredField . TYPE ) ) ; allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . reset ( ) ; doc . add ( new TextField ( <str> , AllTokenStream . allTokenStream ( <str> , allEntries , Lucene . STANDARD_ANALYZER ) ) ) ; indexWriter . addDocument ( doc ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; Query query = new AllTermQuery ( new Term ( <str> , <str> ) ) ; TopDocs docs = searcher . search ( query , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertExplanationScore ( searcher , query , docs . scoreDocs [ <int> ] ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertExplanationScore ( searcher , query , docs . scoreDocs [ <int> ] ) ; query = new AllTermQuery ( new Term ( <str> , <str> ) ) ; docs = searcher . search ( query , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertExplanationScore ( searcher , query , docs . scoreDocs [ <int> ] ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertExplanationScore ( searcher , query , docs . scoreDocs [ <int> ] ) ; indexWriter . close ( ) ; } public void testMultipleTokensAllNoBoost ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document doc = new Document ( ) ; doc . add ( new Field ( <str> , <str> , StoredField . TYPE ) ) ; AllEntries allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . reset ( ) ; doc . add ( new TextField ( <str> , AllTokenStream . allTokenStream ( <str> , allEntries , Lucene . STANDARD_ANALYZER ) ) ) ; indexWriter . addDocument ( doc ) ; doc = new Document ( ) ; doc . add ( new Field ( <str> , <str> , StoredField . TYPE ) ) ; allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . reset ( ) ; doc . add ( new TextField ( <str> , AllTokenStream . allTokenStream ( <str> , allEntries , Lucene . STANDARD_ANALYZER ) ) ) ; indexWriter . addDocument ( doc ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; TopDocs docs = searcher . search ( new AllTermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; docs = searcher . search ( new AllTermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; docs = searcher . search ( new AllTermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; docs = searcher . search ( new AllTermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; indexWriter . close ( ) ; } public void testMultipleTokensAllWithBoost ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; Document doc = new Document ( ) ; doc . add ( new Field ( <str> , <str> , StoredField . TYPE ) ) ; AllEntries allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . reset ( ) ; doc . add ( new TextField ( <str> , AllTokenStream . allTokenStream ( <str> , allEntries , Lucene . STANDARD_ANALYZER ) ) ) ; indexWriter . addDocument ( doc ) ; doc = new Document ( ) ; doc . add ( new Field ( <str> , <str> , StoredField . TYPE ) ) ; allEntries = new AllEntries ( ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . addText ( <str> , <str> , <float> ) ; allEntries . reset ( ) ; doc . add ( new TextField ( <str> , AllTokenStream . allTokenStream ( <str> , allEntries , Lucene . STANDARD_ANALYZER ) ) ) ; indexWriter . addDocument ( doc ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; TopDocs docs = searcher . search ( new AllTermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; docs = searcher . search ( new AllTermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; docs = searcher . search ( new AllTermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; docs = searcher . search ( new AllTermQuery ( new Term ( <str> , <str> ) ) , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; indexWriter . close ( ) ; } public void testNoTokensWithKeywordAnalyzer ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . KEYWORD_ANALYZER ) ) ; Document doc = new Document ( ) ; doc . add ( new Field ( <str> , <str> , StoredField . TYPE ) ) ; AllEntries allEntries = new AllEntries ( ) ; allEntries . reset ( ) ; doc . add ( new TextField ( <str> , AllTokenStream . allTokenStream ( <str> , allEntries , Lucene . KEYWORD_ANALYZER ) ) ) ; indexWriter . addDocument ( doc ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; TopDocs docs = searcher . search ( new MatchAllDocsQuery ( ) , <int> ) ; assertThat ( docs . totalHits , equalTo ( <int> ) ) ; assertThat ( docs . scoreDocs [ <int> ] . doc , equalTo ( <int> ) ) ; } } 

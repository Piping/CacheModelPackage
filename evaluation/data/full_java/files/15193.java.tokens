package org . gradle . play . plugins ; import org . gradle . api . Action ; import org . gradle . api . Incubating ; import org . gradle . api . Task ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . language . base . internal . LanguageSourceSetInternal ; import org . gradle . language . base . sources . BaseLanguageSourceSet ; import org . gradle . language . coffeescript . CoffeeScriptSourceSet ; import org . gradle . language . coffeescript . internal . DefaultCoffeeScriptSourceSet ; import org . gradle . language . javascript . JavaScriptSourceSet ; import org . gradle . language . javascript . internal . DefaultJavaScriptSourceSet ; import org . gradle . model . ModelMap ; import org . gradle . model . Mutate ; import org . gradle . model . Path ; import org . gradle . model . RuleSource ; import org . gradle . platform . base . BinaryTasks ; import org . gradle . platform . base . LanguageType ; import org . gradle . platform . base . LanguageTypeBuilder ; import org . gradle . play . PlayApplicationBinarySpec ; import org . gradle . play . PlayApplicationSpec ; import org . gradle . play . internal . PlayApplicationBinarySpecInternal ; import org . gradle . play . tasks . PlayCoffeeScriptCompile ; import java . io . File ; @SuppressWarnings ( <str> ) @Incubating public class PlayCoffeeScriptPlugin extends RuleSource { private static final String DEFAULT_COFFEESCRIPT_VERSION = <str> ; private static final String DEFAULT_RHINO_VERSION = <str> ; static String getDefaultCoffeeScriptDependencyNotation ( ) { return String . format ( <str> , DEFAULT_COFFEESCRIPT_VERSION ) ; } static String getDefaultRhinoDependencyNotation ( ) { return String . format ( <str> , DEFAULT_RHINO_VERSION ) ; } @LanguageType void registerCoffeeScript ( LanguageTypeBuilder < CoffeeScriptSourceSet > builder ) { builder . setLanguageName ( <str> ) ; builder . defaultImplementation ( DefaultCoffeeScriptSourceSet . class ) ; } @Mutate void createCoffeeScriptSourceSets ( ModelMap < PlayApplicationSpec > components ) { components . afterEach ( new Action < PlayApplicationSpec > ( ) { @Override public void execute ( PlayApplicationSpec playComponent ) { playComponent . getSources ( ) . create ( <str> , CoffeeScriptSourceSet . class , new Action < CoffeeScriptSourceSet > ( ) { @Override public void execute ( CoffeeScriptSourceSet coffeeScriptSourceSet ) { coffeeScriptSourceSet . getSource ( ) . srcDir ( <str> ) ; coffeeScriptSourceSet . getSource ( ) . include ( <str> ) ; } } ) ; } } ) ; } @Mutate void createGeneratedJavaScriptSourceSets ( ModelMap < PlayApplicationBinarySpec > binaries , final ServiceRegistry serviceRegistry ) { final FileResolver fileResolver = serviceRegistry . get ( FileResolver . class ) ; final Instantiator instantiator = serviceRegistry . get ( Instantiator . class ) ; binaries . all ( new Action < PlayApplicationBinarySpec > ( ) { @Override public void execute ( PlayApplicationBinarySpec playApplicationBinarySpec ) { for ( CoffeeScriptSourceSet coffeeScriptSourceSet : playApplicationBinarySpec . getInputs ( ) . withType ( CoffeeScriptSourceSet . class ) ) { JavaScriptSourceSet javaScriptSourceSet = BaseLanguageSourceSet . create ( JavaScriptSourceSet . class , DefaultJavaScriptSourceSet . class , String . format ( <str> , coffeeScriptSourceSet . getName ( ) ) , playApplicationBinarySpec . getName ( ) , fileResolver ) ; playApplicationBinarySpec . getGeneratedJavaScript ( ) . put ( coffeeScriptSourceSet , javaScriptSourceSet ) ; } } } ) ; } @BinaryTasks void createCoffeeScriptTasks ( ModelMap < Task > tasks , final PlayApplicationBinarySpecInternal binary , @Path ( <str> ) final File buildDir ) { tasks . beforeEach ( PlayCoffeeScriptCompile . class , new Action < PlayCoffeeScriptCompile > ( ) { @Override public void execute ( PlayCoffeeScriptCompile coffeeScriptCompile ) { coffeeScriptCompile . setRhinoClasspathNotation ( getDefaultRhinoDependencyNotation ( ) ) ; coffeeScriptCompile . setCoffeeScriptJsNotation ( getDefaultCoffeeScriptDependencyNotation ( ) ) ; } } ) ; for ( final CoffeeScriptSourceSet coffeeScriptSourceSet : binary . getInputs ( ) . withType ( CoffeeScriptSourceSet . class ) ) { if ( ( ( LanguageSourceSetInternal ) coffeeScriptSourceSet ) . getMayHaveSources ( ) ) { final String compileTaskName = binary . getTasks ( ) . taskName ( <str> , coffeeScriptSourceSet . getName ( ) ) ; tasks . create ( compileTaskName , PlayCoffeeScriptCompile . class , new Action < PlayCoffeeScriptCompile > ( ) { @Override public void execute ( PlayCoffeeScriptCompile coffeeScriptCompile ) { coffeeScriptCompile . setDescription ( <str> + coffeeScriptSourceSet . getDisplayName ( ) + <str> ) ; File outputDirectory = outputDirectory ( buildDir , binary , compileTaskName ) ; coffeeScriptCompile . setDestinationDir ( outputDirectory ) ; coffeeScriptCompile . setSource ( coffeeScriptSourceSet . getSource ( ) ) ; JavaScriptSourceSet javaScriptSourceSet = binary . getGeneratedJavaScript ( ) . get ( coffeeScriptSourceSet ) ; javaScriptSourceSet . getSource ( ) . srcDir ( outputDirectory ) ; javaScriptSourceSet . builtBy ( coffeeScriptCompile ) ; } } ) ; } } } private File outputDirectory ( File buildDir , PlayApplicationBinarySpecInternal binary , String taskName ) { return new File ( buildDir , String . format ( <str> , binary . getProjectScopedName ( ) , taskName ) ) ; } } 

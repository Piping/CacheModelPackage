package org . apache . cassandra . cql3 . validation . operations ; import java . util . Arrays ; import org . junit . Test ; import java . util . ArrayList ; import java . util . List ; import org . apache . cassandra . cql3 . CQLTester ; public class SelectSingleColumnRelationTest extends CQLTester { @Test public void testInvalidCollectionEqualityRelation ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; assertInvalidMessage ( <str> , <str> , set ( <int> ) ) ; assertInvalidMessage ( <str> , <str> , list ( <int> ) ) ; assertInvalidMessage ( <str> , <str> , map ( <int> , <int> ) ) ; } @Test public void testInvalidCollectionNonEQRelation ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> ) ; assertInvalidMessage ( <str> , <str> , set ( <int> ) ) ; assertInvalidMessage ( <str> , <str> , set ( <int> ) ) ; assertInvalidMessage ( <str> , <str> , set ( <int> ) ) ; assertInvalidMessage ( <str> , <str> , set ( <int> ) ) ; assertInvalidMessage ( <str> , <str> , set ( <int> ) ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testClusteringColumnRelations ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; testSelectQueriesWithClusteringColumnRelations ( ) ; } @Test public void testClusteringColumnRelationsWithCompactStorage ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; testSelectQueriesWithClusteringColumnRelations ( ) ; } private void testSelectQueriesWithClusteringColumnRelations ( ) throws Throwable { assertRows ( execute ( <str> , <str> , <str> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , Arrays . asList ( <int> , <int> ) , Arrays . asList ( <int> , <int> ) ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , null , Arrays . asList ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertEmpty ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> , <int> ) ; } @Test public void testPartitionKeyColumnRelations ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <str> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <str> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <str> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <str> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <str> , <str> ) ; assertInvalidMessage ( <str> , <str> , <str> ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <str> , <str> , <str> , <int> ) ; assertInvalidMessage ( <str> , <str> , <str> , <str> , <str> , <int> , <int> ) ; } @Test public void testClusteringColumnRelationsWithClusteringOrder ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; execute ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> , <int> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) , row ( <str> , <int> , <int> , <int> ) ) ; } @Test public void testAllowFilteringWithClusteringColumn ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testAllowFilteringWithIndexedColumn ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertInvalid ( <str> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testIndexQueriesOnComplexPrimaryKey ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; } @Test public void testIndexOnClusteringColumns ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> ) , row ( <str> ) , row ( <str> ) ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testCompositeIndexWithPrimaryKey ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; String req = <str> ; execute ( req , <int> , <int> , <int> , <str> , <str> ) ; execute ( req , <int> , <int> , <int> , <str> , <str> ) ; execute ( req , <int> , <int> , <int> , <str> , <str> ) ; execute ( req , <int> , <int> , <int> , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> ) , row ( <int> , <str> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <str> ) ) ; assertEmpty ( execute ( <str> ) ) ; assertEmpty ( execute ( <str> ) ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testRangeQueryOnIndex ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; String q = <str> ; execute ( q , <int> , <int> , <int> ) ; execute ( q , <int> , <int> , <int> ) ; execute ( q , <int> , <int> , <int> ) ; execute ( q , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testEmptyIN ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; for ( int i = <int> ; i < = <int> ; i + + ) for ( int j = <int> ; j < = <int> ; j + + ) execute ( <str> , i , j , i + j ) ; assertEmpty ( execute ( <str> ) ) ; assertEmpty ( execute ( <str> ) ) ; } } @Test public void testINWithDuplicateValue ( ) throws Throwable { for ( String compactOption : new String [ ] { <str> , <str> } ) { createTable ( <str> + compactOption ) ; execute ( <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } } @Test public void testLargeClusteringINValues ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; List < Integer > inValues = new ArrayList < > ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) inValues . add ( i ) ; assertRows ( execute ( <str> , <int> , inValues ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testMultiplePartitionKeyWithIndex ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertInvalidMessage ( <str> , <str> , <int> , <int> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> ) ) ; } @Test public void testFunctionCallWithUnset ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; } @Test public void testLimitWithUnset ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> , unset ( ) ) , row ( <int> ) , row ( <int> ) ) ; } @Test public void testWithUnsetValues ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , <int> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , <int> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; assertInvalidMessage ( <str> , <str> , unset ( ) ) ; } @Test public void testInvalidSliceRestrictionOnPartitionKey ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testInvalidMulticolumnSliceRestrictionOnPartitionKey ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testInvalidColumnNames ( ) throws Throwable { createTable ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidMessage ( <str> , <str> ) ; } } 

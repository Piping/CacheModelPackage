package org . elasticsearch . search . aggregations . bucket . significant ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . aggregations . bucket . significant . heuristics . SignificanceHeuristic ; import org . elasticsearch . search . aggregations . bucket . significant . heuristics . SignificanceHeuristicParser ; import org . elasticsearch . search . aggregations . bucket . significant . heuristics . SignificanceHeuristicParserMapper ; import org . elasticsearch . search . aggregations . bucket . terms . AbstractTermsParametersParser ; import org . elasticsearch . search . aggregations . bucket . terms . TermsAggregator ; import org . elasticsearch . search . internal . SearchContext ; import java . io . IOException ; public class SignificantTermsParametersParser extends AbstractTermsParametersParser { private static final TermsAggregator . BucketCountThresholds DEFAULT_BUCKET_COUNT_THRESHOLDS = new TermsAggregator . BucketCountThresholds ( <int> , <int> , <int> , - <int> ) ; private final SignificanceHeuristicParserMapper significanceHeuristicParserMapper ; public SignificantTermsParametersParser ( SignificanceHeuristicParserMapper significanceHeuristicParserMapper ) { this . significanceHeuristicParserMapper = significanceHeuristicParserMapper ; } public Query getFilter ( ) { return filter ; } private Query filter = null ; private SignificanceHeuristic significanceHeuristic ; @Override public TermsAggregator . BucketCountThresholds getDefaultBucketCountThresholds ( ) { return new TermsAggregator . BucketCountThresholds ( DEFAULT_BUCKET_COUNT_THRESHOLDS ) ; } static final ParseField BACKGROUND_FILTER = new ParseField ( <str> ) ; @Override public void parseSpecial ( String aggregationName , XContentParser parser , SearchContext context , XContentParser . Token token , String currentFieldName ) throws IOException { if ( token = = XContentParser . Token . START_OBJECT ) { SignificanceHeuristicParser significanceHeuristicParser = significanceHeuristicParserMapper . get ( currentFieldName ) ; if ( significanceHeuristicParser ! = null ) { significanceHeuristic = significanceHeuristicParser . parse ( parser , context . parseFieldMatcher ( ) , context ) ; } else if ( context . parseFieldMatcher ( ) . match ( currentFieldName , BACKGROUND_FILTER ) ) { filter = context . indexShard ( ) . getQueryShardContext ( ) . parseInnerFilter ( parser ) . query ( ) ; } else { throw new SearchParseException ( context , <str> + token + <str> + aggregationName + <str> + currentFieldName + <str> , parser . getTokenLocation ( ) ) ; } } else { throw new SearchParseException ( context , <str> + token + <str> + aggregationName + <str> + currentFieldName + <str> , parser . getTokenLocation ( ) ) ; } } public SignificanceHeuristic getSignificanceHeuristic ( ) { return significanceHeuristic ; } } 

package com . google . common . util . concurrent ; import com . google . common . base . Function ; import java . lang . reflect . UndeclaredThrowableException ; public class FuturesTransformTest extends AbstractChainedListenableFutureTest < String > { private static final String RESULT_DATA = <str> ; @Override protected ListenableFuture < String > buildChainingFuture ( ListenableFuture < Integer > inputFuture ) { return Futures . transform ( inputFuture , new ComposeFunction ( ) ) ; } @Override protected String getSuccessfulResult ( ) { return RESULT_DATA ; } private class ComposeFunction implements Function < Integer , String > { @Override public String apply ( Integer input ) { if ( input . intValue ( ) = = VALID_INPUT_DATA ) { return RESULT_DATA ; } else { throw new UndeclaredThrowableException ( EXCEPTION ) ; } } } public void testFutureGetThrowsFunctionException ( ) throws Exception { inputFuture . set ( EXCEPTION_DATA ) ; listener . assertException ( EXCEPTION ) ; } } 

package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . assets . AssetManager ; import com . badlogic . gdx . assets . loaders . BitmapFontLoader . BitmapFontParameter ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . reflect . ClassReflection ; public class BitmapFontAtlasRegionTest extends GdxTest { private SpriteBatch batch ; private AssetManager assets ; private BitmapFont [ ] fonts ; private String [ ] testStrings ; private static final String FONT_1 = <str> ; private static final String FONT_2 = <str> ; private static final String FONT_3 = <str> ; private static final String ATLAS = <str> ; @Override public void create ( ) { this . batch = new SpriteBatch ( ) ; this . assets = new AssetManager ( ) ; BitmapFontParameter params = new BitmapFontParameter ( ) ; params . atlasName = ATLAS ; this . assets . load ( FONT_1 , BitmapFont . class , params ) ; this . assets . load ( FONT_2 , BitmapFont . class , params ) ; this . assets . load ( FONT_3 , BitmapFont . class , params ) ; this . assets . finishLoading ( ) ; this . fonts = new BitmapFont [ <int> ] ; this . fonts [ <int> ] = assets . get ( FONT_1 ) ; this . fonts [ <int> ] = assets . get ( FONT_2 ) ; this . fonts [ <int> ] = assets . get ( FONT_3 ) ; this . fonts [ <int> ] . setColor ( Color . RED ) ; this . fonts [ <int> ] . setColor ( Color . BLUE ) ; this . fonts [ <int> ] . setColor ( Color . GREEN ) ; this . testStrings = new String [ ] { <str> , <str> , <str> } ; Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; for ( int i = <int> ; i < fonts . length ; + + i ) { fonts [ i ] . draw ( batch , testStrings [ i ] , <int> , <int> + <int> * i ) ; } batch . end ( ) ; } @Override public void dispose ( ) { Array < String > loaded = this . assets . getAssetNames ( ) ; this . assets . dispose ( ) ; this . batch . dispose ( ) ; String name = ClassReflection . getSimpleName ( this . getClass ( ) ) ; for ( int i = <int> ; i < loaded . size ; + + i ) { String asset = loaded . get ( i ) ; if ( this . assets . isLoaded ( asset ) ) { Gdx . app . error ( name , asset + <str> ) ; } else { Gdx . app . log ( name , asset + <str> ) ; } } } } 

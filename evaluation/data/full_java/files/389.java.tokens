package org . apache . cassandra . db . compaction ; import java . util . Map ; import java . util . concurrent . TimeUnit ; import org . apache . cassandra . exceptions . ConfigurationException ; public final class DateTieredCompactionStrategyOptions { protected static final TimeUnit DEFAULT_TIMESTAMP_RESOLUTION = TimeUnit . MICROSECONDS ; @Deprecated protected static final double DEFAULT_MAX_SSTABLE_AGE_DAYS = <int> * <int> ; protected static final long DEFAULT_BASE_TIME_SECONDS = <int> ; protected static final long DEFAULT_MAX_WINDOW_SIZE_SECONDS = TimeUnit . SECONDS . convert ( <int> , TimeUnit . DAYS ) ; protected static final int DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS = <int> * <int> ; protected static final String TIMESTAMP_RESOLUTION_KEY = <str> ; @Deprecated protected static final String MAX_SSTABLE_AGE_KEY = <str> ; protected static final String BASE_TIME_KEY = <str> ; protected static final String EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY = <str> ; protected static final String MAX_WINDOW_SIZE_KEY = <str> ; @Deprecated protected final long maxSSTableAge ; protected final long baseTime ; protected final long expiredSSTableCheckFrequency ; protected final long maxWindowSize ; public DateTieredCompactionStrategyOptions ( Map < String , String > options ) { String optionValue = options . get ( TIMESTAMP_RESOLUTION_KEY ) ; TimeUnit timestampResolution = optionValue = = null ? DEFAULT_TIMESTAMP_RESOLUTION : TimeUnit . valueOf ( optionValue ) ; optionValue = options . get ( MAX_SSTABLE_AGE_KEY ) ; double fractionalDays = optionValue = = null ? DEFAULT_MAX_SSTABLE_AGE_DAYS : Double . parseDouble ( optionValue ) ; maxSSTableAge = Math . round ( fractionalDays * timestampResolution . convert ( <int> , TimeUnit . DAYS ) ) ; optionValue = options . get ( BASE_TIME_KEY ) ; baseTime = timestampResolution . convert ( optionValue = = null ? DEFAULT_BASE_TIME_SECONDS : Long . parseLong ( optionValue ) , TimeUnit . SECONDS ) ; optionValue = options . get ( EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY ) ; expiredSSTableCheckFrequency = TimeUnit . MILLISECONDS . convert ( optionValue = = null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long . parseLong ( optionValue ) , TimeUnit . SECONDS ) ; optionValue = options . get ( MAX_WINDOW_SIZE_KEY ) ; maxWindowSize = timestampResolution . convert ( optionValue = = null ? DEFAULT_MAX_WINDOW_SIZE_SECONDS : Long . parseLong ( optionValue ) , TimeUnit . SECONDS ) ; } public DateTieredCompactionStrategyOptions ( ) { maxSSTableAge = Math . round ( DEFAULT_MAX_SSTABLE_AGE_DAYS * DEFAULT_TIMESTAMP_RESOLUTION . convert ( ( long ) DEFAULT_MAX_SSTABLE_AGE_DAYS , TimeUnit . DAYS ) ) ; baseTime = DEFAULT_TIMESTAMP_RESOLUTION . convert ( DEFAULT_BASE_TIME_SECONDS , TimeUnit . SECONDS ) ; expiredSSTableCheckFrequency = TimeUnit . MILLISECONDS . convert ( DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS , TimeUnit . SECONDS ) ; maxWindowSize = DEFAULT_TIMESTAMP_RESOLUTION . convert ( <int> , TimeUnit . DAYS ) ; } public static Map < String , String > validateOptions ( Map < String , String > options , Map < String , String > uncheckedOptions ) throws ConfigurationException { String optionValue = options . get ( TIMESTAMP_RESOLUTION_KEY ) ; try { if ( optionValue ! = null ) TimeUnit . valueOf ( optionValue ) ; } catch ( IllegalArgumentException e ) { throw new ConfigurationException ( String . format ( <str> , optionValue ) ) ; } optionValue = options . get ( MAX_SSTABLE_AGE_KEY ) ; try { double maxSStableAge = optionValue = = null ? DEFAULT_MAX_SSTABLE_AGE_DAYS : Double . parseDouble ( optionValue ) ; if ( maxSStableAge < <int> ) { throw new ConfigurationException ( String . format ( <str> , MAX_SSTABLE_AGE_KEY , maxSStableAge ) ) ; } } catch ( NumberFormatException e ) { throw new ConfigurationException ( String . format ( <str> , optionValue , MAX_SSTABLE_AGE_KEY ) , e ) ; } optionValue = options . get ( BASE_TIME_KEY ) ; try { long baseTime = optionValue = = null ? DEFAULT_BASE_TIME_SECONDS : Long . parseLong ( optionValue ) ; if ( baseTime < = <int> ) { throw new ConfigurationException ( String . format ( <str> , BASE_TIME_KEY , baseTime ) ) ; } } catch ( NumberFormatException e ) { throw new ConfigurationException ( String . format ( <str> , optionValue , BASE_TIME_KEY ) , e ) ; } optionValue = options . get ( EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY ) ; try { long expiredCheckFrequency = optionValue = = null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long . parseLong ( optionValue ) ; if ( expiredCheckFrequency < <int> ) { throw new ConfigurationException ( String . format ( <str> , EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY , expiredCheckFrequency ) ) ; } } catch ( NumberFormatException e ) { throw new ConfigurationException ( String . format ( <str> , optionValue , EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY ) , e ) ; } optionValue = options . get ( MAX_WINDOW_SIZE_KEY ) ; try { long maxWindowSize = optionValue = = null ? DEFAULT_MAX_WINDOW_SIZE_SECONDS : Long . parseLong ( optionValue ) ; if ( maxWindowSize < <int> ) { throw new ConfigurationException ( String . format ( <str> , MAX_WINDOW_SIZE_KEY , maxWindowSize ) ) ; } } catch ( NumberFormatException e ) { throw new ConfigurationException ( String . format ( <str> , optionValue , MAX_WINDOW_SIZE_KEY ) , e ) ; } uncheckedOptions . remove ( MAX_SSTABLE_AGE_KEY ) ; uncheckedOptions . remove ( BASE_TIME_KEY ) ; uncheckedOptions . remove ( TIMESTAMP_RESOLUTION_KEY ) ; uncheckedOptions . remove ( EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY ) ; uncheckedOptions . remove ( MAX_WINDOW_SIZE_KEY ) ; return uncheckedOptions ; } } 

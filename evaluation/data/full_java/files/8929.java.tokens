package org . elasticsearch . plugins ; import org . elasticsearch . common . cli . Terminal ; import org . elasticsearch . test . ESTestCase ; import java . nio . file . Path ; import java . security . Permission ; import java . security . PermissionCollection ; import java . security . Permissions ; import java . util . Collections ; import java . util . List ; public class PluginSecurityTests extends ESTestCase { public void testParsePermissions ( ) throws Exception { assumeTrue ( <str> , System . getSecurityManager ( ) = = null ) ; Path scratch = createTempDir ( ) ; Path testFile = this . getDataPath ( <str> ) ; Permissions expected = new Permissions ( ) ; expected . add ( new RuntimePermission ( <str> ) ) ; PermissionCollection actual = PluginSecurity . parsePermissions ( Terminal . DEFAULT , testFile , scratch ) ; assertEquals ( expected , actual ) ; } public void testParseTwoPermissions ( ) throws Exception { assumeTrue ( <str> , System . getSecurityManager ( ) = = null ) ; Path scratch = createTempDir ( ) ; Path testFile = this . getDataPath ( <str> ) ; Permissions expected = new Permissions ( ) ; expected . add ( new RuntimePermission ( <str> ) ) ; expected . add ( new RuntimePermission ( <str> ) ) ; PermissionCollection actual = PluginSecurity . parsePermissions ( Terminal . DEFAULT , testFile , scratch ) ; assertEquals ( expected , actual ) ; } public void testFormatSimplePermission ( ) throws Exception { assertEquals ( <str> , PluginSecurity . formatPermission ( new RuntimePermission ( <str> ) ) ) ; } public void testFormatUnresolvedPermission ( ) throws Exception { assumeTrue ( <str> , System . getSecurityManager ( ) = = null ) ; Path scratch = createTempDir ( ) ; Path testFile = this . getDataPath ( <str> ) ; PermissionCollection actual = PluginSecurity . parsePermissions ( Terminal . DEFAULT , testFile , scratch ) ; List < Permission > permissions = Collections . list ( actual . elements ( ) ) ; assertEquals ( <int> , permissions . size ( ) ) ; assertEquals ( <str> , PluginSecurity . formatPermission ( permissions . get ( <int> ) ) ) ; } private void assertEquals ( PermissionCollection expected , PermissionCollection actual ) { assertEquals ( asSet ( Collections . list ( expected . elements ( ) ) ) , asSet ( Collections . list ( actual . elements ( ) ) ) ) ; } } 

package org . gradle . build . docs . dsl . source . model ; import org . gradle . api . Action ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . LinkedList ; import java . util . List ; public class MethodMetaData extends AbstractLanguageElement implements Serializable , TypeContainer { private final String name ; private final ClassMetaData ownerClass ; private final List < ParameterMetaData > parameters = new ArrayList < ParameterMetaData > ( ) ; private TypeMetaData returnType ; public MethodMetaData ( String name , ClassMetaData ownerClass ) { this . name = name ; this . ownerClass = ownerClass ; } public String getName ( ) { return name ; } @Override public String toString ( ) { return String . format ( <str> , ownerClass , name ) ; } public ClassMetaData getOwnerClass ( ) { return ownerClass ; } public TypeMetaData getReturnType ( ) { return returnType ; } public void setReturnType ( TypeMetaData returnType ) { this . returnType = returnType ; } public MethodMetaData getOverriddenMethod ( ) { LinkedList < ClassMetaData > queue = new LinkedList < ClassMetaData > ( ) ; queue . add ( ownerClass . getSuperClass ( ) ) ; queue . addAll ( ownerClass . getInterfaces ( ) ) ; String overrideSignature = getOverrideSignature ( ) ; while ( ! queue . isEmpty ( ) ) { ClassMetaData cl = queue . removeFirst ( ) ; if ( cl = = null ) { continue ; } MethodMetaData overriddenMethod = cl . findDeclaredMethod ( overrideSignature ) ; if ( overriddenMethod ! = null ) { return overriddenMethod ; } queue . add ( cl . getSuperClass ( ) ) ; queue . addAll ( cl . getInterfaces ( ) ) ; } return null ; } public List < ParameterMetaData > getParameters ( ) { return parameters ; } public ParameterMetaData addParameter ( String name , TypeMetaData type ) { ParameterMetaData param = new ParameterMetaData ( name ) ; param . setType ( type ) ; parameters . add ( param ) ; return param ; } public String getSignature ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( returnType . getSignature ( ) ) ; builder . append ( <str> ) ; builder . append ( name ) ; builder . append ( <str> ) ; for ( int i = <int> ; i < parameters . size ( ) ; i + + ) { ParameterMetaData param = parameters . get ( i ) ; if ( i > <int> ) { builder . append ( <str> ) ; } builder . append ( param . getSignature ( ) ) ; } builder . append ( <str> ) ; return builder . toString ( ) ; } public String getOverrideSignature ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( name ) ; builder . append ( <str> ) ; for ( int i = <int> ; i < parameters . size ( ) ; i + + ) { ParameterMetaData param = parameters . get ( i ) ; if ( i > <int> ) { builder . append ( <str> ) ; } builder . append ( param . getType ( ) . getRawType ( ) . getSignature ( ) ) ; } builder . append ( <str> ) ; return builder . toString ( ) ; } public void visitTypes ( Action < TypeMetaData > action ) { action . execute ( returnType ) ; for ( ParameterMetaData parameter : parameters ) { parameter . visitTypes ( action ) ; } } } 

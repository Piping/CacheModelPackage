package org . elasticsearch . common ; import org . elasticsearch . test . ESTestCase ; import java . util . List ; import java . util . Map ; import static org . hamcrest . Matchers . is ; public class TableTests extends ESTestCase { public void testFailOnStartRowWithoutHeader ( ) { Table table = new Table ( ) ; try { table . startRow ( ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testFailOnEndHeadersWithoutStart ( ) { Table table = new Table ( ) ; try { table . endHeaders ( ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testFailOnAddCellWithoutHeader ( ) { Table table = new Table ( ) ; try { table . addCell ( <str> ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testFailOnAddCellWithoutRow ( ) { Table table = this . getTableWithHeaders ( ) ; try { table . addCell ( <str> ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testFailOnEndRowWithoutStart ( ) { Table table = this . getTableWithHeaders ( ) ; try { table . endRow ( ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testFailOnLessCellsThanDeclared ( ) { Table table = this . getTableWithHeaders ( ) ; table . startRow ( ) ; table . addCell ( <str> ) ; try { table . endRow ( true ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testOnLessCellsThanDeclaredUnchecked ( ) { Table table = this . getTableWithHeaders ( ) ; table . startRow ( ) ; table . addCell ( <str> ) ; table . endRow ( false ) ; } public void testFailOnMoreCellsThanDeclared ( ) { Table table = this . getTableWithHeaders ( ) ; table . startRow ( ) ; table . addCell ( <str> ) ; table . addCell ( <str> ) ; try { table . addCell ( <str> ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testSimple ( ) { Table table = this . getTableWithHeaders ( ) ; table . startRow ( ) ; table . addCell ( <str> ) ; table . addCell ( <str> ) ; table . endRow ( ) ; table . startRow ( ) ; table . addCell ( <str> ) ; table . addCell ( <str> ) ; table . endRow ( ) ; List < Table . Cell > headers = table . getHeaders ( ) ; assertEquals ( <int> , headers . size ( ) ) ; assertEquals ( <str> , headers . get ( <int> ) . value . toString ( ) ) ; assertEquals ( <int> , headers . get ( <int> ) . attr . size ( ) ) ; assertEquals ( <str> , headers . get ( <int> ) . attr . get ( <str> ) ) ; assertEquals ( <str> , headers . get ( <int> ) . attr . get ( <str> ) ) ; assertEquals ( <str> , headers . get ( <int> ) . value . toString ( ) ) ; assertEquals ( <int> , headers . get ( <int> ) . attr . size ( ) ) ; assertEquals ( <str> , headers . get ( <int> ) . attr . get ( <str> ) ) ; assertEquals ( <str> , headers . get ( <int> ) . attr . get ( <str> ) ) ; List < List < Table . Cell > > rows = table . getRows ( ) ; assertEquals ( <int> , rows . size ( ) ) ; List < Table . Cell > row = rows . get ( <int> ) ; assertEquals ( <str> , row . get ( <int> ) . value . toString ( ) ) ; assertEquals ( <str> , row . get ( <int> ) . value . toString ( ) ) ; row = rows . get ( <int> ) ; assertEquals ( <str> , row . get ( <int> ) . value . toString ( ) ) ; assertEquals ( <str> , row . get ( <int> ) . value . toString ( ) ) ; Map < String , List < Table . Cell > > map = table . getAsMap ( ) ; assertEquals ( <int> , map . size ( ) ) ; row = map . get ( <str> ) ; assertEquals ( <str> , row . get ( <int> ) . value . toString ( ) ) ; assertEquals ( <str> , row . get ( <int> ) . value . toString ( ) ) ; row = map . get ( <str> ) ; assertEquals ( <str> , row . get ( <int> ) . value . toString ( ) ) ; assertEquals ( <str> , row . get ( <int> ) . value . toString ( ) ) ; Map < String , Table . Cell > headerMap = table . getHeaderMap ( ) ; assertEquals ( <int> , headerMap . size ( ) ) ; Table . Cell cell = headerMap . get ( <str> ) ; assertEquals ( <str> , cell . value . toString ( ) ) ; cell = headerMap . get ( <str> ) ; assertEquals ( <str> , cell . value . toString ( ) ) ; cell = table . findHeaderByName ( <str> ) ; assertEquals ( <str> , cell . value . toString ( ) ) ; cell = table . findHeaderByName ( <str> ) ; assertNull ( cell ) ; } private Table getTableWithHeaders ( ) { Table table = new Table ( ) ; table . startHeaders ( ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . endHeaders ( ) ; return table ; } } 

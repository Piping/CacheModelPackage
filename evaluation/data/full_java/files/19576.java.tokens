package io . netty . handler . codec . socksx . v5 ; import org . junit . Test ; import static org . junit . Assert . * ; public class DefaultSocks5CommandRequestTest { @Test public void testConstructorParamsAreNotNull ( ) { try { new DefaultSocks5CommandRequest ( null , Socks5AddressType . DOMAIN , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof NullPointerException ) ; } try { new DefaultSocks5CommandRequest ( Socks5CommandType . CONNECT , null , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof NullPointerException ) ; } try { new DefaultSocks5CommandRequest ( Socks5CommandType . CONNECT , Socks5AddressType . DOMAIN , null , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof NullPointerException ) ; } } @Test public void testIPv4CorrectAddress ( ) { try { new DefaultSocks5CommandRequest ( Socks5CommandType . BIND , Socks5AddressType . IPv4 , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } } @Test public void testIPv6CorrectAddress ( ) { try { new DefaultSocks5CommandRequest ( Socks5CommandType . BIND , Socks5AddressType . IPv6 , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } } @Test public void testIDNNotExceeds255CharsLimit ( ) { try { new DefaultSocks5CommandRequest ( Socks5CommandType . BIND , Socks5AddressType . DOMAIN , <str> + <str> + <str> + <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } } @Test public void testValidPortRange ( ) { try { new DefaultSocks5CommandRequest ( Socks5CommandType . BIND , Socks5AddressType . DOMAIN , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } try { new DefaultSocks5CommandRequest ( Socks5CommandType . BIND , Socks5AddressType . DOMAIN , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } } } 

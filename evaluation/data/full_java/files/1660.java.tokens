package org . apache . cassandra . utils ; import java . util . Arrays ; import java . util . Iterator ; import org . apache . cassandra . utils . AbstractIterator ; import com . google . common . collect . Iterators ; import com . google . common . collect . Ordering ; import org . junit . Before ; import org . junit . Test ; public class MergeIteratorTest { CLI < String > all = null , cat = null , a = null , b = null , c = null , d = null ; @Before public void clear ( ) { all = new CLI ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; cat = new CLI ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; a = new CLI ( <str> , <str> , <str> , <str> ) ; b = new CLI ( <str> , <str> , <str> ) ; c = new CLI ( <str> , <str> , <str> , <str> ) ; d = new CLI ( ) ; } @Test public void testManyToOne ( ) throws Exception { MergeIterator . Reducer < String , String > reducer = new MergeIterator . Reducer < String , String > ( ) { String concatted = <str> ; @Override public void reduce ( int idx , String current ) { concatted + = current ; } public String getReduced ( ) { String tmp = concatted ; concatted = <str> ; return tmp ; } } ; IMergeIterator < String , String > smi = MergeIterator . get ( Arrays . asList ( a , b , c , d ) , Ordering . < String > natural ( ) , reducer ) ; assert Iterators . elementsEqual ( cat , smi ) ; smi . close ( ) ; assert a . closed & & b . closed & & c . closed & & d . closed ; } public static class CLI < E > extends AbstractIterator < E > implements CloseableIterator < E > { Iterator < E > iter ; boolean closed = false ; public CLI ( E . . . items ) { this . iter = Arrays . asList ( items ) . iterator ( ) ; } protected E computeNext ( ) { if ( ! iter . hasNext ( ) ) return endOfData ( ) ; return iter . next ( ) ; } public void close ( ) { assert ! this . closed ; this . closed = true ; } } } 

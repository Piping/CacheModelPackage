package org . elasticsearch . index . mapper . boost ; import org . apache . lucene . index . IndexableField ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . mapper . ParseContext . Document ; import org . elasticsearch . test . ESSingleNodeTestCase ; import static org . hamcrest . Matchers . closeTo ; public class FieldLevelBoostTests extends ESSingleNodeTestCase { public void testFieldLevelBoost ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , <int> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , <int> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , <float> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , <float> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , <int> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , <int> ) . endObject ( ) . bytes ( ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( ( double ) f . boost ( ) , closeTo ( <float> , <float> ) ) ; f = doc . getField ( <str> ) ; assertThat ( ( double ) f . boost ( ) , closeTo ( <float> , <float> ) ) ; f = doc . getField ( <str> ) ; assertThat ( ( double ) f . boost ( ) , closeTo ( <float> , <float> ) ) ; f = doc . getField ( <str> ) ; assertThat ( ( double ) f . boost ( ) , closeTo ( <float> , <float> ) ) ; f = doc . getField ( <str> ) ; assertThat ( ( double ) f . boost ( ) , closeTo ( <float> , <float> ) ) ; f = doc . getField ( <str> ) ; assertThat ( ( double ) f . boost ( ) , closeTo ( <float> , <float> ) ) ; f = doc . getField ( <str> ) ; assertThat ( ( double ) f . boost ( ) , closeTo ( <float> , <float> ) ) ; f = doc . getField ( <str> ) ; assertThat ( ( double ) f . boost ( ) , closeTo ( <float> , <float> ) ) ; } public void testInvalidFieldLevelBoost ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; try { docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } try { docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } try { docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } try { docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } try { docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } try { docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } try { docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } try { docMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { } } } 

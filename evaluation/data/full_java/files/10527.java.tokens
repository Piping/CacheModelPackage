package com . google . common . io ; import com . google . common . collect . ImmutableSet ; import junit . framework . TestCase ; import java . io . File ; import java . io . IOException ; public class FileTreeTraverserTest extends TestCase { private File dir ; @Override public void setUp ( ) throws IOException { dir = Files . createTempDir ( ) ; } @Override public void tearDown ( ) throws IOException { File [ ] files = dir . listFiles ( ) ; if ( files = = null ) { return ; } for ( File file : files ) { file . delete ( ) ; } dir . delete ( ) ; } public void testFileTreeViewer_emptyDir ( ) throws IOException { assertDirChildren ( ) ; } public void testFileTreeViewer_singleFile ( ) throws IOException { File file = newFile ( <str> ) ; assertDirChildren ( file ) ; } public void testFileTreeViewer_singleDir ( ) throws IOException { File file = newDir ( <str> ) ; assertDirChildren ( file ) ; } public void testFileTreeViewer_multipleFiles ( ) throws IOException { File a = newFile ( <str> ) ; File b = newDir ( <str> ) ; File c = newFile ( <str> ) ; File d = newDir ( <str> ) ; assertDirChildren ( a , b , c , d ) ; } private File newDir ( String name ) throws IOException { File file = new File ( dir , name ) ; file . mkdir ( ) ; return file ; } private File newFile ( String name ) throws IOException { File file = new File ( dir , name ) ; file . createNewFile ( ) ; return file ; } private void assertDirChildren ( File . . . files ) { assertEquals ( ImmutableSet . copyOf ( files ) , ImmutableSet . copyOf ( Files . fileTreeTraverser ( ) . children ( dir ) ) ) ; } } 

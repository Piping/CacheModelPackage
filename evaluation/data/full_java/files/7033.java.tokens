package org . elasticsearch . rest . action . cat ; import org . elasticsearch . action . admin . cluster . repositories . get . GetRepositoriesRequest ; import org . elasticsearch . action . admin . cluster . repositories . get . GetRepositoriesResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . metadata . RepositoryMetaData ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . RestResponse ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestRepositoriesAction extends AbstractCatAction { @Inject public RestRepositoriesAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void doRequest ( RestRequest request , RestChannel channel , Client client ) { GetRepositoriesRequest getRepositoriesRequest = new GetRepositoriesRequest ( ) ; getRepositoriesRequest . local ( request . paramAsBoolean ( <str> , getRepositoriesRequest . local ( ) ) ) ; getRepositoriesRequest . masterNodeTimeout ( request . paramAsTime ( <str> , getRepositoriesRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . cluster ( ) . getRepositories ( getRepositoriesRequest , new RestResponseListener < GetRepositoriesResponse > ( channel ) { @Override public RestResponse buildResponse ( GetRepositoriesResponse getRepositoriesResponse ) throws Exception { return RestTable . buildResponse ( buildTable ( request , getRepositoriesResponse ) , channel ) ; } } ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; } @Override protected Table getTableWithHeader ( RestRequest request ) { return new Table ( ) . startHeaders ( ) . addCell ( <str> , <str> ) . addCell ( <str> , <str> ) . endHeaders ( ) ; } private Table buildTable ( RestRequest req , GetRepositoriesResponse getRepositoriesResponse ) { Table table = getTableWithHeader ( req ) ; for ( RepositoryMetaData repositoryMetaData : getRepositoriesResponse . repositories ( ) ) { table . startRow ( ) ; table . addCell ( repositoryMetaData . name ( ) ) ; table . addCell ( repositoryMetaData . type ( ) ) ; table . endRow ( ) ; } return table ; } } 

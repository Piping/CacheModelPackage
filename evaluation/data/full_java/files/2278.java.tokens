package org . nd4j . linalg . util ; import org . nd4j . linalg . api . ndarray . INDArray ; import java . util . Arrays ; public class NDArrayMath { public static int offsetForSlice ( INDArray arr , int slice ) { return slice * lengthPerSlice ( arr ) ; } public static int lengthPerSlice ( INDArray arr , int . . . dimension ) { int [ ] remove = ArrayUtil . removeIndex ( arr . shape ( ) , dimension ) ; return ArrayUtil . prod ( remove ) ; } public static int lengthPerSlice ( INDArray arr ) { return lengthPerSlice ( arr , <int> ) ; } public static int numVectors ( INDArray arr ) { if ( arr . rank ( ) = = <int> ) return <int> ; else if ( arr . rank ( ) = = <int> ) return arr . size ( <int> ) ; else { int prod = <int> ; for ( int i = <int> ; i < arr . rank ( ) - <int> ; i + + ) { prod * = arr . size ( i ) ; } return prod ; } } public static int vectorsPerSlice ( INDArray arr ) { if ( arr . rank ( ) > <int> ) { return ArrayUtil . prod ( new int [ ] { arr . size ( - <int> ) , arr . size ( - <int> ) } ) ; } return arr . slices ( ) ; } public static int tensorsPerSlice ( INDArray arr , int [ ] tensorShape ) { return lengthPerSlice ( arr ) / ArrayUtil . prod ( tensorShape ) ; } public static int matricesPerSlice ( INDArray arr ) { if ( arr . rank ( ) = = <int> ) { return <int> ; } else if ( arr . rank ( ) > <int> ) { int ret = <int> ; for ( int i = <int> ; i < arr . rank ( ) - <int> ; i + + ) { ret * = arr . size ( i ) ; } return ret ; } return arr . size ( - <int> ) ; } public static int vectorsPerSlice ( INDArray arr , int . . . rank ) { if ( arr . rank ( ) > <int> ) { return arr . size ( - <int> ) * arr . size ( - <int> ) ; } return arr . size ( - <int> ) ; } public static int sliceOffsetForTensor ( int index , INDArray arr , int [ ] tensorShape ) { int tensorLength = ArrayUtil . prod ( tensorShape ) ; int offset = index * tensorLength / NDArrayMath . lengthPerSlice ( arr ) ; return offset ; } public static int mapIndexOntoTensor ( int index , INDArray arr , int . . . rank ) { int ret = index * ArrayUtil . prod ( ArrayUtil . removeIndex ( arr . shape ( ) , rank ) ) ; return ret ; } public static int mapIndexOntoVector ( int index , INDArray arr ) { int ret = index * arr . size ( - <int> ) ; return ret ; } } 

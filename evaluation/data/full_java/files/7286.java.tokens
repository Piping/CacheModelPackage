package org . elasticsearch . search . aggregations . metrics . avg ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . common . lease . Releasables ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . common . util . DoubleArray ; import org . elasticsearch . common . util . LongArray ; import org . elasticsearch . index . fielddata . SortedNumericDoubleValues ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . LeafBucketCollector ; import org . elasticsearch . search . aggregations . LeafBucketCollectorBase ; import org . elasticsearch . search . aggregations . metrics . NumericMetricsAggregator ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import org . elasticsearch . search . aggregations . support . ValuesSource ; import org . elasticsearch . search . aggregations . support . ValuesSourceAggregatorFactory ; import org . elasticsearch . search . aggregations . support . ValuesSourceConfig ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class AvgAggregator extends NumericMetricsAggregator . SingleValue { final ValuesSource . Numeric valuesSource ; LongArray counts ; DoubleArray sums ; ValueFormatter formatter ; public AvgAggregator ( String name , ValuesSource . Numeric valuesSource , ValueFormatter formatter , AggregationContext context , Aggregator parent , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { super ( name , context , parent , pipelineAggregators , metaData ) ; this . valuesSource = valuesSource ; this . formatter = formatter ; if ( valuesSource ! = null ) { final BigArrays bigArrays = context . bigArrays ( ) ; counts = bigArrays . newLongArray ( <int> , true ) ; sums = bigArrays . newDoubleArray ( <int> , true ) ; } } @Override public boolean needsScores ( ) { return valuesSource ! = null & & valuesSource . needsScores ( ) ; } @Override public LeafBucketCollector getLeafCollector ( LeafReaderContext ctx , final LeafBucketCollector sub ) throws IOException { if ( valuesSource = = null ) { return LeafBucketCollector . NO_OP_COLLECTOR ; } final BigArrays bigArrays = context . bigArrays ( ) ; final SortedNumericDoubleValues values = valuesSource . doubleValues ( ctx ) ; return new LeafBucketCollectorBase ( sub , values ) { @Override public void collect ( int doc , long bucket ) throws IOException { counts = bigArrays . grow ( counts , bucket + <int> ) ; sums = bigArrays . grow ( sums , bucket + <int> ) ; values . setDocument ( doc ) ; final int valueCount = values . count ( ) ; counts . increment ( bucket , valueCount ) ; double sum = <int> ; for ( int i = <int> ; i < valueCount ; i + + ) { sum + = values . valueAt ( i ) ; } sums . increment ( bucket , sum ) ; } } ; } @Override public double metric ( long owningBucketOrd ) { return valuesSource = = null ? Double . NaN : sums . get ( owningBucketOrd ) / counts . get ( owningBucketOrd ) ; } @Override public InternalAggregation buildAggregation ( long bucket ) { if ( valuesSource = = null | | bucket > = sums . size ( ) ) { return buildEmptyAggregation ( ) ; } return new InternalAvg ( name , sums . get ( bucket ) , counts . get ( bucket ) , formatter , pipelineAggregators ( ) , metaData ( ) ) ; } @Override public InternalAggregation buildEmptyAggregation ( ) { return new InternalAvg ( name , <float> , <int> l , formatter , pipelineAggregators ( ) , metaData ( ) ) ; } public static class Factory extends ValuesSourceAggregatorFactory . LeafOnly < ValuesSource . Numeric > { public Factory ( String name , String type , ValuesSourceConfig < ValuesSource . Numeric > valuesSourceConfig ) { super ( name , type , valuesSourceConfig ) ; } @Override protected Aggregator createUnmapped ( AggregationContext aggregationContext , Aggregator parent , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { return new AvgAggregator ( name , null , config . formatter ( ) , aggregationContext , parent , pipelineAggregators , metaData ) ; } @Override protected Aggregator doCreateInternal ( ValuesSource . Numeric valuesSource , AggregationContext aggregationContext , Aggregator parent , boolean collectsFromSingleBucket , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { return new AvgAggregator ( name , valuesSource , config . formatter ( ) , aggregationContext , parent , pipelineAggregators , metaData ) ; } } @Override public void doClose ( ) { Releasables . close ( counts , sums ) ; } } 

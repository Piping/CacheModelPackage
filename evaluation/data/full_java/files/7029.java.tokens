package org . elasticsearch . rest . action . cat ; import org . elasticsearch . action . admin . cluster . node . info . NodeInfo ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoRequest ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . action . admin . cluster . node . stats . NodeStats ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsRequest ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsResponse ; import org . elasticsearch . action . admin . cluster . state . ClusterStateRequest ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . InetSocketTransportAddress ; import org . elasticsearch . index . cache . query . QueryCacheStats ; import org . elasticsearch . index . cache . request . RequestCacheStats ; import org . elasticsearch . index . engine . SegmentsStats ; import org . elasticsearch . index . fielddata . FieldDataStats ; import org . elasticsearch . index . flush . FlushStats ; import org . elasticsearch . index . get . GetStats ; import org . elasticsearch . index . indexing . IndexingStats ; import org . elasticsearch . index . merge . MergeStats ; import org . elasticsearch . index . percolator . PercolateStats ; import org . elasticsearch . index . refresh . RefreshStats ; import org . elasticsearch . index . search . stats . SearchStats ; import org . elasticsearch . index . suggest . stats . SuggestStats ; import org . elasticsearch . indices . NodeIndicesStats ; import org . elasticsearch . monitor . fs . FsInfo ; import org . elasticsearch . monitor . jvm . JvmInfo ; import org . elasticsearch . monitor . jvm . JvmStats ; import org . elasticsearch . monitor . os . OsStats ; import org . elasticsearch . monitor . process . ProcessStats ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestActionListener ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import org . elasticsearch . script . ScriptStats ; import org . elasticsearch . search . suggest . completion . CompletionStats ; import java . util . Locale ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestNodesAction extends AbstractCatAction { @Inject public RestNodesAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; } @Override public void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final ClusterStateRequest clusterStateRequest = new ClusterStateRequest ( ) ; clusterStateRequest . clear ( ) . nodes ( true ) ; clusterStateRequest . local ( request . paramAsBoolean ( <str> , clusterStateRequest . local ( ) ) ) ; clusterStateRequest . masterNodeTimeout ( request . paramAsTime ( <str> , clusterStateRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . cluster ( ) . state ( clusterStateRequest , new RestActionListener < ClusterStateResponse > ( channel ) { @Override public void processResponse ( final ClusterStateResponse clusterStateResponse ) { NodesInfoRequest nodesInfoRequest = new NodesInfoRequest ( ) ; nodesInfoRequest . clear ( ) . jvm ( true ) . os ( true ) . process ( true ) ; client . admin ( ) . cluster ( ) . nodesInfo ( nodesInfoRequest , new RestActionListener < NodesInfoResponse > ( channel ) { @Override public void processResponse ( final NodesInfoResponse nodesInfoResponse ) { NodesStatsRequest nodesStatsRequest = new NodesStatsRequest ( ) ; nodesStatsRequest . clear ( ) . jvm ( true ) . os ( true ) . fs ( true ) . indices ( true ) . process ( true ) . script ( true ) ; client . admin ( ) . cluster ( ) . nodesStats ( nodesStatsRequest , new RestResponseListener < NodesStatsResponse > ( channel ) { @Override public RestResponse buildResponse ( NodesStatsResponse nodesStatsResponse ) throws Exception { return RestTable . buildResponse ( buildTable ( request , clusterStateResponse , nodesInfoResponse , nodesStatsResponse ) , channel ) ; } } ) ; } } ) ; } } ) ; } @Override protected Table getTableWithHeader ( final RestRequest request ) { Table table = new Table ( ) ; table . startHeaders ( ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . endHeaders ( ) ; return table ; } private Table buildTable ( RestRequest req , ClusterStateResponse state , NodesInfoResponse nodesInfo , NodesStatsResponse nodesStats ) { boolean fullId = req . paramAsBoolean ( <str> , false ) ; DiscoveryNodes nodes = state . getState ( ) . nodes ( ) ; String masterId = nodes . masterNodeId ( ) ; Table table = getTableWithHeader ( req ) ; for ( DiscoveryNode node : nodes ) { NodeInfo info = nodesInfo . getNodesMap ( ) . get ( node . id ( ) ) ; NodeStats stats = nodesStats . getNodesMap ( ) . get ( node . id ( ) ) ; JvmInfo jvmInfo = info = = null ? null : info . getJvm ( ) ; JvmStats jvmStats = stats = = null ? null : stats . getJvm ( ) ; FsInfo fsInfo = stats = = null ? null : stats . getFs ( ) ; OsStats osStats = stats = = null ? null : stats . getOs ( ) ; ProcessStats processStats = stats = = null ? null : stats . getProcess ( ) ; NodeIndicesStats indicesStats = stats = = null ? null : stats . getIndices ( ) ; table . startRow ( ) ; table . addCell ( fullId ? node . id ( ) : Strings . substring ( node . getId ( ) , <int> , <int> ) ) ; table . addCell ( info = = null ? null : info . getProcess ( ) . getId ( ) ) ; table . addCell ( node . getHostName ( ) ) ; table . addCell ( node . getHostAddress ( ) ) ; if ( node . address ( ) instanceof InetSocketTransportAddress ) { table . addCell ( ( ( InetSocketTransportAddress ) node . address ( ) ) . address ( ) . getPort ( ) ) ; } else { table . addCell ( <str> ) ; } table . addCell ( node . getVersion ( ) . number ( ) ) ; table . addCell ( info = = null ? null : info . getBuild ( ) . shortHash ( ) ) ; table . addCell ( jvmInfo = = null ? null : jvmInfo . version ( ) ) ; table . addCell ( fsInfo = = null ? null : fsInfo . getTotal ( ) . getAvailable ( ) ) ; table . addCell ( jvmStats = = null ? null : jvmStats . getMem ( ) . getHeapUsed ( ) ) ; table . addCell ( jvmStats = = null ? null : jvmStats . getMem ( ) . getHeapUsedPercent ( ) ) ; table . addCell ( jvmInfo = = null ? null : jvmInfo . getMem ( ) . getHeapMax ( ) ) ; table . addCell ( osStats = = null ? null : osStats . getMem ( ) = = null ? null : osStats . getMem ( ) . getUsed ( ) ) ; table . addCell ( osStats = = null ? null : osStats . getMem ( ) = = null ? null : osStats . getMem ( ) . getUsedPercent ( ) ) ; table . addCell ( osStats = = null ? null : osStats . getMem ( ) = = null ? null : osStats . getMem ( ) . getTotal ( ) ) ; table . addCell ( processStats = = null ? null : processStats . getOpenFileDescriptors ( ) ) ; table . addCell ( processStats = = null ? null : calculatePercentage ( processStats . getOpenFileDescriptors ( ) , processStats . getMaxFileDescriptors ( ) ) ) ; table . addCell ( processStats = = null ? null : processStats . getMaxFileDescriptors ( ) ) ; table . addCell ( osStats = = null ? null : Short . toString ( osStats . getCpu ( ) . getPercent ( ) ) ) ; table . addCell ( osStats = = null ? null : String . format ( Locale . ROOT , <str> , osStats . getCpu ( ) . getLoadAverage ( ) ) ) ; table . addCell ( jvmStats = = null ? null : jvmStats . getUptime ( ) ) ; table . addCell ( node . clientNode ( ) ? <str> : node . dataNode ( ) ? <str> : <str> ) ; table . addCell ( masterId = = null ? <str> : masterId . equals ( node . id ( ) ) ? <str> : node . masterNode ( ) ? <str> : <str> ) ; table . addCell ( node . name ( ) ) ; CompletionStats completionStats = indicesStats = = null ? null : stats . getIndices ( ) . getCompletion ( ) ; table . addCell ( completionStats = = null ? null : completionStats . getSize ( ) ) ; FieldDataStats fdStats = indicesStats = = null ? null : stats . getIndices ( ) . getFieldData ( ) ; table . addCell ( fdStats = = null ? null : fdStats . getMemorySize ( ) ) ; table . addCell ( fdStats = = null ? null : fdStats . getEvictions ( ) ) ; QueryCacheStats fcStats = indicesStats = = null ? null : indicesStats . getQueryCache ( ) ; table . addCell ( fcStats = = null ? null : fcStats . getMemorySize ( ) ) ; table . addCell ( fcStats = = null ? null : fcStats . getEvictions ( ) ) ; RequestCacheStats qcStats = indicesStats = = null ? null : indicesStats . getRequestCache ( ) ; table . addCell ( qcStats = = null ? null : qcStats . getMemorySize ( ) ) ; table . addCell ( qcStats = = null ? null : qcStats . getEvictions ( ) ) ; table . addCell ( qcStats = = null ? null : qcStats . getHitCount ( ) ) ; table . addCell ( qcStats = = null ? null : qcStats . getMissCount ( ) ) ; FlushStats flushStats = indicesStats = = null ? null : indicesStats . getFlush ( ) ; table . addCell ( flushStats = = null ? null : flushStats . getTotal ( ) ) ; table . addCell ( flushStats = = null ? null : flushStats . getTotalTime ( ) ) ; GetStats getStats = indicesStats = = null ? null : indicesStats . getGet ( ) ; table . addCell ( getStats = = null ? null : getStats . current ( ) ) ; table . addCell ( getStats = = null ? null : getStats . getTime ( ) ) ; table . addCell ( getStats = = null ? null : getStats . getCount ( ) ) ; table . addCell ( getStats = = null ? null : getStats . getExistsTime ( ) ) ; table . addCell ( getStats = = null ? null : getStats . getExistsCount ( ) ) ; table . addCell ( getStats = = null ? null : getStats . getMissingTime ( ) ) ; table . addCell ( getStats = = null ? null : getStats . getMissingCount ( ) ) ; IndexingStats indexingStats = indicesStats = = null ? null : indicesStats . getIndexing ( ) ; table . addCell ( indexingStats = = null ? null : indexingStats . getTotal ( ) . getDeleteCurrent ( ) ) ; table . addCell ( indexingStats = = null ? null : indexingStats . getTotal ( ) . getDeleteTime ( ) ) ; table . addCell ( indexingStats = = null ? null : indexingStats . getTotal ( ) . getDeleteCount ( ) ) ; table . addCell ( indexingStats = = null ? null : indexingStats . getTotal ( ) . getIndexCurrent ( ) ) ; table . addCell ( indexingStats = = null ? null : indexingStats . getTotal ( ) . getIndexTime ( ) ) ; table . addCell ( indexingStats = = null ? null : indexingStats . getTotal ( ) . getIndexCount ( ) ) ; table . addCell ( indexingStats = = null ? null : indexingStats . getTotal ( ) . getIndexFailedCount ( ) ) ; MergeStats mergeStats = indicesStats = = null ? null : indicesStats . getMerge ( ) ; table . addCell ( mergeStats = = null ? null : mergeStats . getCurrent ( ) ) ; table . addCell ( mergeStats = = null ? null : mergeStats . getCurrentNumDocs ( ) ) ; table . addCell ( mergeStats = = null ? null : mergeStats . getCurrentSize ( ) ) ; table . addCell ( mergeStats = = null ? null : mergeStats . getTotal ( ) ) ; table . addCell ( mergeStats = = null ? null : mergeStats . getTotalNumDocs ( ) ) ; table . addCell ( mergeStats = = null ? null : mergeStats . getTotalSize ( ) ) ; table . addCell ( mergeStats = = null ? null : mergeStats . getTotalTime ( ) ) ; PercolateStats percolateStats = indicesStats = = null ? null : indicesStats . getPercolate ( ) ; table . addCell ( percolateStats = = null ? null : percolateStats . getCurrent ( ) ) ; table . addCell ( percolateStats = = null ? null : percolateStats . getMemorySize ( ) ) ; table . addCell ( percolateStats = = null ? null : percolateStats . getNumQueries ( ) ) ; table . addCell ( percolateStats = = null ? null : percolateStats . getTime ( ) ) ; table . addCell ( percolateStats = = null ? null : percolateStats . getCount ( ) ) ; RefreshStats refreshStats = indicesStats = = null ? null : indicesStats . getRefresh ( ) ; table . addCell ( refreshStats = = null ? null : refreshStats . getTotal ( ) ) ; table . addCell ( refreshStats = = null ? null : refreshStats . getTotalTime ( ) ) ; ScriptStats scriptStats = stats = = null ? null : stats . getScriptStats ( ) ; table . addCell ( scriptStats = = null ? null : scriptStats . getCompilations ( ) ) ; table . addCell ( scriptStats = = null ? null : scriptStats . getCacheEvictions ( ) ) ; SearchStats searchStats = indicesStats = = null ? null : indicesStats . getSearch ( ) ; table . addCell ( searchStats = = null ? null : searchStats . getTotal ( ) . getFetchCurrent ( ) ) ; table . addCell ( searchStats = = null ? null : searchStats . getTotal ( ) . getFetchTime ( ) ) ; table . addCell ( searchStats = = null ? null : searchStats . getTotal ( ) . getFetchCount ( ) ) ; table . addCell ( searchStats = = null ? null : searchStats . getOpenContexts ( ) ) ; table . addCell ( searchStats = = null ? null : searchStats . getTotal ( ) . getQueryCurrent ( ) ) ; table . addCell ( searchStats = = null ? null : searchStats . getTotal ( ) . getQueryTime ( ) ) ; table . addCell ( searchStats = = null ? null : searchStats . getTotal ( ) . getQueryCount ( ) ) ; table . addCell ( searchStats = = null ? null : searchStats . getTotal ( ) . getScrollCurrent ( ) ) ; table . addCell ( searchStats = = null ? null : searchStats . getTotal ( ) . getScrollTime ( ) ) ; table . addCell ( searchStats = = null ? null : searchStats . getTotal ( ) . getScrollCount ( ) ) ; SegmentsStats segmentsStats = indicesStats = = null ? null : indicesStats . getSegments ( ) ; table . addCell ( segmentsStats = = null ? null : segmentsStats . getCount ( ) ) ; table . addCell ( segmentsStats = = null ? null : segmentsStats . getMemory ( ) ) ; table . addCell ( segmentsStats = = null ? null : segmentsStats . getIndexWriterMemory ( ) ) ; table . addCell ( segmentsStats = = null ? null : segmentsStats . getIndexWriterMaxMemory ( ) ) ; table . addCell ( segmentsStats = = null ? null : segmentsStats . getVersionMapMemory ( ) ) ; table . addCell ( segmentsStats = = null ? null : segmentsStats . getBitsetMemory ( ) ) ; SuggestStats suggestStats = indicesStats = = null ? null : indicesStats . getSuggest ( ) ; table . addCell ( suggestStats = = null ? null : suggestStats . getCurrent ( ) ) ; table . addCell ( suggestStats = = null ? null : suggestStats . getTime ( ) ) ; table . addCell ( suggestStats = = null ? null : suggestStats . getCount ( ) ) ; table . endRow ( ) ; } return table ; } private short calculatePercentage ( long used , long max ) { return max < = <int> ? <int> : ( short ) ( ( <int> d * used ) / max ) ; } } 

package io . netty . example . telnet ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelFutureListener ; import io . netty . channel . ChannelHandler . Sharable ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . SimpleChannelInboundHandler ; import java . net . InetAddress ; import java . util . Date ; @Sharable public class TelnetServerHandler extends SimpleChannelInboundHandler < String > { @Override public void channelActive ( ChannelHandlerContext ctx ) throws Exception { ctx . write ( <str> + InetAddress . getLocalHost ( ) . getHostName ( ) + <str> ) ; ctx . write ( <str> + new Date ( ) + <str> ) ; ctx . flush ( ) ; } @Override public void channelRead0 ( ChannelHandlerContext ctx , String request ) throws Exception { String response ; boolean close = false ; if ( request . isEmpty ( ) ) { response = <str> ; } else if ( <str> . equals ( request . toLowerCase ( ) ) ) { response = <str> ; close = true ; } else { response = <str> + request + <str> ; } ChannelFuture future = ctx . write ( response ) ; if ( close ) { future . addListener ( ChannelFutureListener . CLOSE ) ; } } @Override public void channelReadComplete ( ChannelHandlerContext ctx ) { ctx . flush ( ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { cause . printStackTrace ( ) ; ctx . close ( ) ; } } 

package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . graphics . g2d . NinePatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . math . Interpolation ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener . ChangeEvent ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . utils . Pools ; public class Slider extends ProgressBar { int draggingPointer = - <int> ; boolean mouseOver ; private Interpolation visualInterpolationInverse = Interpolation . linear ; public Slider ( float min , float max , float stepSize , boolean vertical , Skin skin ) { this ( min , max , stepSize , vertical , skin . get ( <str> + ( vertical ? <str> : <str> ) , SliderStyle . class ) ) ; } public Slider ( float min , float max , float stepSize , boolean vertical , Skin skin , String styleName ) { this ( min , max , stepSize , vertical , skin . get ( styleName , SliderStyle . class ) ) ; } public Slider ( float min , float max , float stepSize , boolean vertical , SliderStyle style ) { super ( min , max , stepSize , vertical , style ) ; shiftIgnoresSnap = true ; addListener ( new InputListener ( ) { public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { if ( disabled ) return false ; if ( draggingPointer ! = - <int> ) return false ; draggingPointer = pointer ; calculatePositionAndValue ( x , y ) ; return true ; } public void touchUp ( InputEvent event , float x , float y , int pointer , int button ) { if ( pointer ! = draggingPointer ) return ; draggingPointer = - <int> ; if ( ! calculatePositionAndValue ( x , y ) ) { ChangeEvent changeEvent = Pools . obtain ( ChangeEvent . class ) ; fire ( changeEvent ) ; Pools . free ( changeEvent ) ; } } public void touchDragged ( InputEvent event , float x , float y , int pointer ) { calculatePositionAndValue ( x , y ) ; } @Override public void enter ( InputEvent event , float x , float y , int pointer , Actor fromActor ) { if ( pointer = = - <int> ) mouseOver = true ; } @Override public void exit ( InputEvent event , float x , float y , int pointer , Actor toActor ) { if ( pointer = = - <int> ) mouseOver = false ; } } ) ; } public void setStyle ( SliderStyle style ) { if ( style = = null ) throw new NullPointerException ( <str> ) ; if ( ! ( style instanceof SliderStyle ) ) throw new IllegalArgumentException ( <str> ) ; super . setStyle ( style ) ; } public SliderStyle getStyle ( ) { return ( SliderStyle ) super . getStyle ( ) ; } protected Drawable getKnobDrawable ( ) { SliderStyle style = getStyle ( ) ; return ( disabled & & style . disabledKnob ! = null ) ? style . disabledKnob : ( isDragging ( ) & & style . knobDown ! = null ) ? style . knobDown : ( ( mouseOver & & style . knobOver ! = null ) ? style . knobOver : style . knob ) ; } boolean calculatePositionAndValue ( float x , float y ) { final SliderStyle style = getStyle ( ) ; final Drawable knob = getKnobDrawable ( ) ; final Drawable bg = ( disabled & & style . disabledBackground ! = null ) ? style . disabledBackground : style . background ; float value ; float oldPosition = position ; final float min = getMinValue ( ) ; final float max = getMaxValue ( ) ; if ( vertical ) { float height = getHeight ( ) - bg . getTopHeight ( ) - bg . getBottomHeight ( ) ; float knobHeight = knob = = null ? <int> : knob . getMinHeight ( ) ; position = y - bg . getBottomHeight ( ) - knobHeight * <float> ; value = min + ( max - min ) * visualInterpolationInverse . apply ( position / ( height - knobHeight ) ) ; position = Math . max ( <int> , position ) ; position = Math . min ( height - knobHeight , position ) ; } else { float width = getWidth ( ) - bg . getLeftWidth ( ) - bg . getRightWidth ( ) ; float knobWidth = knob = = null ? <int> : knob . getMinWidth ( ) ; position = x - bg . getLeftWidth ( ) - knobWidth * <float> ; value = min + ( max - min ) * visualInterpolationInverse . apply ( position / ( width - knobWidth ) ) ; position = Math . max ( <int> , position ) ; position = Math . min ( width - knobWidth , position ) ; } float oldValue = value ; boolean valueSet = setValue ( value ) ; if ( value = = oldValue ) position = oldPosition ; return valueSet ; } public boolean isDragging ( ) { return draggingPointer ! = - <int> ; } public void setVisualInterpolationInverse ( Interpolation interpolation ) { this . visualInterpolationInverse = interpolation ; } static public class SliderStyle extends ProgressBarStyle { public Drawable knobOver , knobDown ; public SliderStyle ( ) { } public SliderStyle ( Drawable background , Drawable knob ) { super ( background , knob ) ; } public SliderStyle ( SliderStyle style ) { super ( style ) ; this . knobOver = style . knobOver ; this . knobDown = style . knobDown ; } } } 

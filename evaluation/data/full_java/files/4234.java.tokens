package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . StringTokenizer ; import org . eclipse . core . commands . AbstractHandler ; import org . eclipse . core . commands . ExecutionEvent ; import org . eclipse . core . commands . ExecutionException ; import org . eclipse . core . commands . IHandler ; import org . eclipse . core . expressions . EvaluationResult ; import org . eclipse . core . expressions . Expression ; import org . eclipse . core . expressions . ExpressionConverter ; import org . eclipse . core . expressions . ExpressionTagNames ; import org . eclipse . core . expressions . IEvaluationContext ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . internal . core . IConfigurationElementConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . Pair ; import org . eclipse . debug . internal . ui . actions . LaunchShortcutAction ; import org . eclipse . debug . ui . ILaunchShortcut ; import org . eclipse . debug . ui . ILaunchShortcut2 ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . IPluginContribution ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . handlers . IHandlerService ; public class LaunchShortcutExtension implements ILaunchShortcut2 , IPluginContribution { private ImageDescriptor fImageDescriptor = null ; private List < String > fPerspectives = null ; private ILaunchShortcut fDelegate = null ; private Set < String > fModes = null ; private Set < String > fAssociatedTypes = null ; private Map < String , String > fDescriptions = null ; private IConfigurationElement fContextualLaunchConfigurationElement = null ; private Expression fContextualLaunchExpr = null ; private Expression fStandardLaunchExpr = null ; private class LaunchCommandHandler extends AbstractHandler { private LaunchShortcutExtension fShortcut ; private String fMode ; public LaunchCommandHandler ( LaunchShortcutExtension shortcut , String mode ) { fShortcut = shortcut ; fMode = mode ; } @Override public Object execute ( ExecutionEvent event ) throws ExecutionException { LaunchShortcutAction action = new LaunchShortcutAction ( fMode , fShortcut ) ; if ( action . isEnabled ( ) ) { action . run ( ) ; } else { fShortcut . launch ( new StructuredSelection ( ) , fMode ) ; } return null ; } } private IConfigurationElement fConfig ; private List < Pair > fContextLabels ; public LaunchShortcutExtension ( IConfigurationElement element ) { setConfigurationElement ( element ) ; registerLaunchCommandHandlers ( ) ; } private void registerLaunchCommandHandlers ( ) { IHandlerService handlerService = PlatformUI . getWorkbench ( ) . getAdapter ( IHandlerService . class ) ; if ( handlerService ! = null ) { for ( String mode : getModes ( ) ) { String id = getId ( ) + <str> + mode ; IHandler handler = new LaunchCommandHandler ( this , mode ) ; handlerService . activateHandler ( id , handler ) ; } } } private void setConfigurationElement ( IConfigurationElement element ) { fConfig = element ; } public IConfigurationElement getConfigurationElement ( ) { return fConfig ; } public String getLabel ( ) { return getConfigurationElement ( ) . getAttribute ( IConfigurationElementConstants . LABEL ) ; } public IConfigurationElement getContextualLaunchConfigurationElement ( ) { if ( fContextualLaunchConfigurationElement = = null ) { IConfigurationElement [ ] elements = getConfigurationElement ( ) . getChildren ( IConfigurationElementConstants . CONTEXTUAL_LAUNCH ) ; if ( elements . length > <int> ) { fContextualLaunchConfigurationElement = elements [ <int> ] ; } } return fContextualLaunchConfigurationElement ; } public String getContextLabel ( String mode ) { if ( fContextLabels = = null ) { IConfigurationElement context = getContextualLaunchConfigurationElement ( ) ; if ( context = = null ) { return null ; } IConfigurationElement [ ] labels = context . getChildren ( IConfigurationElementConstants . CONTEXT_LABEL ) ; fContextLabels = new ArrayList < Pair > ( labels . length ) ; for ( int i = <int> ; i < labels . length ; i + + ) { fContextLabels . add ( new Pair ( labels [ i ] . getAttribute ( IConfigurationElementConstants . MODE ) , labels [ i ] . getAttribute ( IConfigurationElementConstants . LABEL ) ) ) ; } } for ( Pair p : fContextLabels ) { if ( p . firstAsString ( ) . equals ( mode ) ) { return p . secondAsString ( ) ; } } return getLabel ( ) ; } public Set < String > getAssociatedConfigurationTypes ( ) { if ( fAssociatedTypes = = null ) { fAssociatedTypes = new HashSet < String > ( ) ; IConfigurationElement [ ] children = fConfig . getChildren ( IConfigurationElementConstants . CONFIGURATION_TYPES ) ; String id = null ; for ( int i = <int> ; i < children . length ; i + + ) { id = children [ i ] . getAttribute ( IConfigurationElementConstants . ID ) ; if ( id ! = null ) { fAssociatedTypes . add ( id ) ; } } } return fAssociatedTypes ; } public String getShortcutDescription ( String mode ) { if ( mode = = null ) { return null ; } if ( fDescriptions = = null ) { fDescriptions = new HashMap < String , String > ( ) ; String descr = fConfig . getAttribute ( IConfigurationElementConstants . DESCRIPTION ) ; if ( descr ! = null ) { for ( String lmode : getModes ( ) ) { fDescriptions . put ( lmode , descr ) ; } } IConfigurationElement [ ] children = fConfig . getChildren ( IConfigurationElementConstants . DESCRIPTION ) ; for ( int i = <int> ; i < children . length ; i + + ) { String lmode = children [ i ] . getAttribute ( IConfigurationElementConstants . MODE ) ; descr = children [ i ] . getAttribute ( IConfigurationElementConstants . DESCRIPTION ) ; fDescriptions . put ( lmode , descr ) ; } } return fDescriptions . get ( mode ) ; } public boolean evalEnablementExpression ( IEvaluationContext context , Expression exp ) throws CoreException { return ( exp ! = null ) ? ( ( exp . evaluate ( context ) ) ! = EvaluationResult . FALSE ) : false ; } public Expression getContextualLaunchEnablementExpression ( ) throws CoreException { if ( fContextualLaunchExpr = = null ) { IConfigurationElement contextualLaunchElement = getContextualLaunchConfigurationElement ( ) ; if ( contextualLaunchElement = = null ) { return null ; } IConfigurationElement [ ] elements = contextualLaunchElement . getChildren ( ExpressionTagNames . ENABLEMENT ) ; IConfigurationElement enablement = elements . length > <int> ? elements [ <int> ] : null ; if ( enablement ! = null ) { fContextualLaunchExpr = ExpressionConverter . getDefault ( ) . perform ( enablement ) ; } } return fContextualLaunchExpr ; } public Expression getShortcutEnablementExpression ( ) throws CoreException { if ( fStandardLaunchExpr = = null ) { IConfigurationElement [ ] elements = getConfigurationElement ( ) . getChildren ( ExpressionTagNames . ENABLEMENT ) ; IConfigurationElement enablement = elements . length > <int> ? elements [ <int> ] : null ; if ( enablement ! = null ) { fStandardLaunchExpr = ExpressionConverter . getDefault ( ) . perform ( enablement ) ; } } return fStandardLaunchExpr ; } public String getId ( ) { return getConfigurationElement ( ) . getAttribute ( IConfigurationElementConstants . ID ) ; } public String getHelpContextId ( ) { return getConfigurationElement ( ) . getAttribute ( IConfigurationElementConstants . HELP_CONTEXT_ID ) ; } public String getCategory ( ) { return getConfigurationElement ( ) . getAttribute ( IConfigurationElementConstants . CATEGORY ) ; } public ImageDescriptor getImageDescriptor ( ) { if ( fImageDescriptor = = null ) { fImageDescriptor = DebugUIPlugin . getImageDescriptor ( getConfigurationElement ( ) , <str> ) ; if ( fImageDescriptor = = null ) { fImageDescriptor = ImageDescriptor . getMissingImageDescriptor ( ) ; } } return fImageDescriptor ; } @Deprecated public List < String > getPerspectives ( ) { if ( fPerspectives = = null ) { IConfigurationElement [ ] perspectives = getConfigurationElement ( ) . getChildren ( IConfigurationElementConstants . PERSPECTIVE ) ; fPerspectives = new ArrayList < String > ( perspectives . length ) ; for ( int i = <int> ; i < perspectives . length ; i + + ) { fPerspectives . add ( perspectives [ i ] . getAttribute ( IConfigurationElementConstants . ID ) ) ; } } return fPerspectives ; } protected ILaunchShortcut getDelegate ( ) { if ( fDelegate = = null ) { try { fDelegate = ( ILaunchShortcut ) fConfig . createExecutableExtension ( IConfigurationElementConstants . CLASS ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } return fDelegate ; } @Override public void launch ( IEditorPart editor , String mode ) { ILaunchShortcut shortcut = getDelegate ( ) ; if ( shortcut ! = null ) { shortcut . launch ( editor , mode ) ; } } @Override public void launch ( ISelection selection , String mode ) { ILaunchShortcut shortcut = getDelegate ( ) ; if ( shortcut ! = null ) { shortcut . launch ( selection , mode ) ; } } public Set < String > getModes ( ) { if ( fModes = = null ) { String modes = getConfigurationElement ( ) . getAttribute ( IConfigurationElementConstants . MODES ) ; if ( modes = = null ) { return Collections . EMPTY_SET ; } StringTokenizer tokenizer = new StringTokenizer ( modes , <str> ) ; fModes = new HashSet < String > ( tokenizer . countTokens ( ) ) ; while ( tokenizer . hasMoreTokens ( ) ) { fModes . add ( tokenizer . nextToken ( ) . trim ( ) ) ; } } return fModes ; } public String getMenuPath ( ) { return getConfigurationElement ( ) . getAttribute ( IConfigurationElementConstants . PATH ) ; } @Override public String toString ( ) { return getId ( ) ; } @Override public String getLocalId ( ) { return getId ( ) ; } @Override public String getPluginId ( ) { return fConfig . getContributor ( ) . getName ( ) ; } @Override public ILaunchConfiguration [ ] getLaunchConfigurations ( ISelection selection ) { ILaunchShortcut delegate = getDelegate ( ) ; if ( delegate instanceof ILaunchShortcut2 ) { return ( ( ILaunchShortcut2 ) delegate ) . getLaunchConfigurations ( selection ) ; } return null ; } @Override public ILaunchConfiguration [ ] getLaunchConfigurations ( IEditorPart editorpart ) { ILaunchShortcut delegate = getDelegate ( ) ; if ( delegate instanceof ILaunchShortcut2 ) { return ( ( ILaunchShortcut2 ) delegate ) . getLaunchConfigurations ( editorpart ) ; } return null ; } @Override public IResource getLaunchableResource ( ISelection selection ) { ILaunchShortcut delegate = getDelegate ( ) ; if ( delegate instanceof ILaunchShortcut2 ) { return ( ( ILaunchShortcut2 ) delegate ) . getLaunchableResource ( selection ) ; } return null ; } @Override public IResource getLaunchableResource ( IEditorPart editorpart ) { ILaunchShortcut delegate = getDelegate ( ) ; if ( delegate instanceof ILaunchShortcut2 ) { return ( ( ILaunchShortcut2 ) delegate ) . getLaunchableResource ( editorpart ) ; } return null ; } public boolean isParticipant ( ) { return getDelegate ( ) instanceof ILaunchShortcut2 ; } } 

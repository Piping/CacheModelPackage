package com . badlogic . gdx . physics . bullet . dynamics ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btFixedConstraint extends btGeneric6DofSpring2Constraint { private long swigCPtr ; protected btFixedConstraint ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , DynamicsJNI . btFixedConstraint_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btFixedConstraint ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( DynamicsJNI . btFixedConstraint_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btFixedConstraint obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; DynamicsJNI . delete_btFixedConstraint ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public btFixedConstraint ( btRigidBody rbA , btRigidBody rbB , Matrix4 frameInA , Matrix4 frameInB ) { this ( DynamicsJNI . new_btFixedConstraint ( btRigidBody . getCPtr ( rbA ) , rbA , btRigidBody . getCPtr ( rbB ) , rbB , frameInA , frameInB ) , true ) ; } } 

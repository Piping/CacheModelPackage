package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . math . Circle ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener . ChangeEvent ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . utils . Pools ; public class Touchpad extends Widget { private TouchpadStyle style ; boolean touched ; boolean resetOnTouchUp = true ; private float deadzoneRadius ; private final Circle knobBounds = new Circle ( <int> , <int> , <int> ) ; private final Circle touchBounds = new Circle ( <int> , <int> , <int> ) ; private final Circle deadzoneBounds = new Circle ( <int> , <int> , <int> ) ; private final Vector2 knobPosition = new Vector2 ( ) ; private final Vector2 knobPercent = new Vector2 ( ) ; public Touchpad ( float deadzoneRadius , Skin skin ) { this ( deadzoneRadius , skin . get ( TouchpadStyle . class ) ) ; } public Touchpad ( float deadzoneRadius , Skin skin , String styleName ) { this ( deadzoneRadius , skin . get ( styleName , TouchpadStyle . class ) ) ; } public Touchpad ( float deadzoneRadius , TouchpadStyle style ) { if ( deadzoneRadius < <int> ) throw new IllegalArgumentException ( <str> ) ; this . deadzoneRadius = deadzoneRadius ; knobPosition . set ( getWidth ( ) / <float> , getHeight ( ) / <float> ) ; setStyle ( style ) ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; addListener ( new InputListener ( ) { @Override public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { if ( touched ) return false ; touched = true ; calculatePositionAndValue ( x , y , false ) ; return true ; } @Override public void touchDragged ( InputEvent event , float x , float y , int pointer ) { calculatePositionAndValue ( x , y , false ) ; } @Override public void touchUp ( InputEvent event , float x , float y , int pointer , int button ) { touched = false ; calculatePositionAndValue ( x , y , resetOnTouchUp ) ; } } ) ; } void calculatePositionAndValue ( float x , float y , boolean isTouchUp ) { float oldPositionX = knobPosition . x ; float oldPositionY = knobPosition . y ; float oldPercentX = knobPercent . x ; float oldPercentY = knobPercent . y ; float centerX = knobBounds . x ; float centerY = knobBounds . y ; knobPosition . set ( centerX , centerY ) ; knobPercent . set ( <float> , <float> ) ; if ( ! isTouchUp ) { if ( ! deadzoneBounds . contains ( x , y ) ) { knobPercent . set ( ( x - centerX ) / knobBounds . radius , ( y - centerY ) / knobBounds . radius ) ; float length = knobPercent . len ( ) ; if ( length > <int> ) knobPercent . scl ( <int> / length ) ; if ( knobBounds . contains ( x , y ) ) { knobPosition . set ( x , y ) ; } else { knobPosition . set ( knobPercent ) . nor ( ) . scl ( knobBounds . radius ) . add ( knobBounds . x , knobBounds . y ) ; } } } if ( oldPercentX ! = knobPercent . x | | oldPercentY ! = knobPercent . y ) { ChangeEvent changeEvent = Pools . obtain ( ChangeEvent . class ) ; if ( fire ( changeEvent ) ) { knobPercent . set ( oldPercentX , oldPercentY ) ; knobPosition . set ( oldPositionX , oldPositionY ) ; } Pools . free ( changeEvent ) ; } } public void setStyle ( TouchpadStyle style ) { if ( style = = null ) throw new IllegalArgumentException ( <str> ) ; this . style = style ; invalidateHierarchy ( ) ; } public TouchpadStyle getStyle ( ) { return style ; } @Override public Actor hit ( float x , float y , boolean touchable ) { return touchBounds . contains ( x , y ) ? this : null ; } @Override public void layout ( ) { float halfWidth = getWidth ( ) / <int> ; float halfHeight = getHeight ( ) / <int> ; float radius = Math . min ( halfWidth , halfHeight ) ; touchBounds . set ( halfWidth , halfHeight , radius ) ; if ( style . knob ! = null ) radius - = Math . max ( style . knob . getMinWidth ( ) , style . knob . getMinHeight ( ) ) / <int> ; knobBounds . set ( halfWidth , halfHeight , radius ) ; deadzoneBounds . set ( halfWidth , halfHeight , deadzoneRadius ) ; knobPosition . set ( halfWidth , halfHeight ) ; knobPercent . set ( <int> , <int> ) ; } @Override public void draw ( Batch batch , float parentAlpha ) { validate ( ) ; Color c = getColor ( ) ; batch . setColor ( c . r , c . g , c . b , c . a * parentAlpha ) ; float x = getX ( ) ; float y = getY ( ) ; float w = getWidth ( ) ; float h = getHeight ( ) ; final Drawable bg = style . background ; if ( bg ! = null ) bg . draw ( batch , x , y , w , h ) ; final Drawable knob = style . knob ; if ( knob ! = null ) { x + = knobPosition . x - knob . getMinWidth ( ) / <float> ; y + = knobPosition . y - knob . getMinHeight ( ) / <float> ; knob . draw ( batch , x , y , knob . getMinWidth ( ) , knob . getMinHeight ( ) ) ; } } @Override public float getPrefWidth ( ) { return style . background ! = null ? style . background . getMinWidth ( ) : <int> ; } @Override public float getPrefHeight ( ) { return style . background ! = null ? style . background . getMinHeight ( ) : <int> ; } public boolean isTouched ( ) { return touched ; } public boolean getResetOnTouchUp ( ) { return resetOnTouchUp ; } public void setResetOnTouchUp ( boolean reset ) { this . resetOnTouchUp = reset ; } public void setDeadzone ( float deadzoneRadius ) { if ( deadzoneRadius < <int> ) throw new IllegalArgumentException ( <str> ) ; this . deadzoneRadius = deadzoneRadius ; invalidate ( ) ; } public float getKnobX ( ) { return knobPosition . x ; } public float getKnobY ( ) { return knobPosition . y ; } public float getKnobPercentX ( ) { return knobPercent . x ; } public float getKnobPercentY ( ) { return knobPercent . y ; } public static class TouchpadStyle { public Drawable background ; public Drawable knob ; public TouchpadStyle ( ) { } public TouchpadStyle ( Drawable background , Drawable knob ) { this . background = background ; this . knob = knob ; } public TouchpadStyle ( TouchpadStyle style ) { this . background = style . background ; this . knob = style . knob ; } } } 

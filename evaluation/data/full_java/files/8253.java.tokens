package org . elasticsearch . index . query ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . MultiTermQuery ; import org . apache . lucene . search . PrefixQuery ; import org . apache . lucene . search . Query ; import java . io . IOException ; import java . util . Arrays ; import static org . elasticsearch . index . query . QueryBuilders . prefixQuery ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; public class PrefixQueryBuilderTests extends AbstractQueryTestCase < PrefixQueryBuilder > { @Override protected PrefixQueryBuilder doCreateTestQueryBuilder ( ) { String fieldName = randomBoolean ( ) ? STRING_FIELD_NAME : randomAsciiOfLengthBetween ( <int> , <int> ) ; String value = randomAsciiOfLengthBetween ( <int> , <int> ) ; PrefixQueryBuilder query = new PrefixQueryBuilder ( fieldName , value ) ; if ( randomBoolean ( ) ) { query . rewrite ( getRandomRewriteMethod ( ) ) ; } return query ; } @Override protected void doAssertLuceneQuery ( PrefixQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( PrefixQuery . class ) ) ; PrefixQuery prefixQuery = ( PrefixQuery ) query ; assertThat ( prefixQuery . getPrefix ( ) . field ( ) , equalTo ( queryBuilder . fieldName ( ) ) ) ; assertThat ( prefixQuery . getPrefix ( ) . text ( ) , equalTo ( queryBuilder . value ( ) ) ) ; } public void testIllegalArguments ( ) { try { if ( randomBoolean ( ) ) { new PrefixQueryBuilder ( null , <str> ) ; } else { new PrefixQueryBuilder ( <str> , <str> ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new PrefixQueryBuilder ( <str> , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testBlendedRewriteMethod ( ) throws IOException { for ( String rewrite : Arrays . asList ( <str> , <str> ) ) { Query parsedQuery = parseQuery ( prefixQuery ( <str> , <str> ) . rewrite ( rewrite ) . buildAsBytes ( ) ) . toQuery ( createShardContext ( ) ) ; assertThat ( parsedQuery , instanceOf ( PrefixQuery . class ) ) ; PrefixQuery prefixQuery = ( PrefixQuery ) parsedQuery ; assertThat ( prefixQuery . getPrefix ( ) , equalTo ( new Term ( <str> , <str> ) ) ) ; assertThat ( prefixQuery . getRewriteMethod ( ) , instanceOf ( MultiTermQuery . TopTermsBlendedFreqScoringRewrite . class ) ) ; } } public void testFromJson ( ) throws IOException { String json = <str> ; PrefixQueryBuilder parsed = ( PrefixQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <str> , parsed . value ( ) ) ; assertEquals ( json , <float> , parsed . boost ( ) , <float> ) ; assertEquals ( json , <str> , parsed . fieldName ( ) ) ; } } 

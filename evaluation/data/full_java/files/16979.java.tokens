package java . util ; import java . io . IOException ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import java . io . ObjectStreamField ; import java . io . Serializable ; public final class Locale implements Cloneable , Serializable { private static final long serialVersionUID = <int> ; public static final Locale CANADA = new Locale ( true , <str> , <str> ) ; public static final Locale CANADA_FRENCH = new Locale ( true , <str> , <str> ) ; public static final Locale CHINA = new Locale ( true , <str> , <str> ) ; public static final Locale CHINESE = new Locale ( true , <str> , <str> ) ; public static final Locale ENGLISH = new Locale ( true , <str> , <str> ) ; public static final Locale FRANCE = new Locale ( true , <str> , <str> ) ; public static final Locale FRENCH = new Locale ( true , <str> , <str> ) ; public static final Locale GERMAN = new Locale ( true , <str> , <str> ) ; public static final Locale GERMANY = new Locale ( true , <str> , <str> ) ; public static final Locale ITALIAN = new Locale ( true , <str> , <str> ) ; public static final Locale ITALY = new Locale ( true , <str> , <str> ) ; public static final Locale JAPAN = new Locale ( true , <str> , <str> ) ; public static final Locale JAPANESE = new Locale ( true , <str> , <str> ) ; public static final Locale KOREA = new Locale ( true , <str> , <str> ) ; public static final Locale KOREAN = new Locale ( true , <str> , <str> ) ; public static final Locale PRC = new Locale ( true , <str> , <str> ) ; public static final Locale ROOT = new Locale ( true , <str> , <str> ) ; public static final Locale SIMPLIFIED_CHINESE = new Locale ( true , <str> , <str> ) ; public static final Locale TAIWAN = new Locale ( true , <str> , <str> ) ; public static final Locale TRADITIONAL_CHINESE = new Locale ( true , <str> , <str> ) ; public static final Locale UK = new Locale ( true , <str> , <str> ) ; public static final Locale US = new Locale ( true , <str> , <str> ) ; private static Locale defaultLocale = US ; private transient String countryCode ; private transient String languageCode ; private transient String variantCode ; private transient String cachedToStringResult ; private Locale ( boolean unused , String lowerCaseLanguageCode , String upperCaseCountryCode ) { this . languageCode = lowerCaseLanguageCode ; this . countryCode = upperCaseCountryCode ; this . variantCode = <str> ; } public Locale ( String language ) { this ( language , <str> , <str> ) ; } public Locale ( String language , String country ) { this ( language , country , <str> ) ; } public Locale ( String language , String country , String variant ) { if ( language = = null | | country = = null | | variant = = null ) { throw new NullPointerException ( <str> + language + <str> + country + <str> + variant ) ; } if ( language . isEmpty ( ) & & country . isEmpty ( ) ) { languageCode = <str> ; countryCode = <str> ; variantCode = variant ; return ; } languageCode = language . toLowerCase ( ) ; if ( languageCode . equals ( <str> ) ) { languageCode = <str> ; } else if ( languageCode . equals ( <str> ) ) { languageCode = <str> ; } else if ( languageCode . equals ( <str> ) ) { languageCode = <str> ; } countryCode = country . toUpperCase ( ) ; variantCode = variant ; } @Override public boolean equals ( Object object ) { if ( object = = this ) { return true ; } if ( object instanceof Locale ) { Locale o = ( Locale ) object ; return languageCode . equals ( o . languageCode ) & & countryCode . equals ( o . countryCode ) & & variantCode . equals ( o . variantCode ) ; } return false ; } public String getCountry ( ) { return countryCode ; } public static Locale getDefault ( ) { return defaultLocale ; } public String getLanguage ( ) { return languageCode ; } public String getVariant ( ) { return variantCode ; } @Override public synchronized int hashCode ( ) { return countryCode . hashCode ( ) + languageCode . hashCode ( ) + variantCode . hashCode ( ) ; } public synchronized static void setDefault ( Locale locale ) { if ( locale = = null ) { throw new NullPointerException ( <str> ) ; } defaultLocale = locale ; } @Override public final String toString ( ) { String result = cachedToStringResult ; if ( result = = null ) { result = cachedToStringResult = toNewString ( languageCode , countryCode , variantCode ) ; } return result ; } private static String toNewString ( String languageCode , String countryCode , String variantCode ) { if ( languageCode . length ( ) = = <int> & & countryCode . length ( ) = = <int> ) { return <str> ; } StringBuilder result = new StringBuilder ( <int> ) ; result . append ( languageCode ) ; if ( countryCode . length ( ) > <int> | | variantCode . length ( ) > <int> ) { result . append ( <str> ) ; } result . append ( countryCode ) ; if ( variantCode . length ( ) > <int> ) { result . append ( <str> ) ; } result . append ( variantCode ) ; return result . toString ( ) ; } } 

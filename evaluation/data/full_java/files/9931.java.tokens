package com . google . common . collect . testing ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import junit . framework . Test ; import junit . framework . TestSuite ; import java . io . Serializable ; import java . lang . reflect . Method ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . EnumMap ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Map . Entry ; import java . util . SortedMap ; import java . util . TreeMap ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentSkipListMap ; public class TestsForMapsInJavaUtil { public static Test suite ( ) { return new TestsForMapsInJavaUtil ( ) . allTests ( ) ; } public Test allTests ( ) { TestSuite suite = new TestSuite ( <str> ) ; suite . addTest ( testsForEmptyMap ( ) ) ; suite . addTest ( testsForSingletonMap ( ) ) ; suite . addTest ( testsForHashMap ( ) ) ; suite . addTest ( testsForLinkedHashMap ( ) ) ; suite . addTest ( testsForTreeMapNatural ( ) ) ; suite . addTest ( testsForTreeMapWithComparator ( ) ) ; suite . addTest ( testsForEnumMap ( ) ) ; suite . addTest ( testsForConcurrentHashMap ( ) ) ; suite . addTest ( testsForConcurrentSkipListMapNatural ( ) ) ; suite . addTest ( testsForConcurrentSkipListMapWithComparator ( ) ) ; return suite ; } protected Collection < Method > suppressForEmptyMap ( ) { return Collections . emptySet ( ) ; } protected Collection < Method > suppressForSingletonMap ( ) { return Collections . emptySet ( ) ; } protected Collection < Method > suppressForHashMap ( ) { return Collections . emptySet ( ) ; } protected Collection < Method > suppressForLinkedHashMap ( ) { return Collections . emptySet ( ) ; } protected Collection < Method > suppressForTreeMapNatural ( ) { return Collections . emptySet ( ) ; } protected Collection < Method > suppressForTreeMapWithComparator ( ) { return Collections . emptySet ( ) ; } protected Collection < Method > suppressForEnumMap ( ) { return Collections . emptySet ( ) ; } protected Collection < Method > suppressForConcurrentHashMap ( ) { return Collections . emptySet ( ) ; } protected Collection < Method > suppressForConcurrentSkipListMap ( ) { return Collections . emptySet ( ) ; } public Test testsForEmptyMap ( ) { return MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { return Collections . emptyMap ( ) ; } } ) . named ( <str> ) . withFeatures ( CollectionFeature . SERIALIZABLE , CollectionSize . ZERO ) . suppressing ( suppressForEmptyMap ( ) ) . createTestSuite ( ) ; } public Test testsForSingletonMap ( ) { return MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { return Collections . singletonMap ( entries [ <int> ] . getKey ( ) , entries [ <int> ] . getValue ( ) ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , CollectionFeature . SERIALIZABLE , CollectionSize . ONE ) . suppressing ( suppressForSingletonMap ( ) ) . createTestSuite ( ) ; } public Test testsForHashMap ( ) { return MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { return toHashMap ( entries ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . GENERAL_PURPOSE , MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . SERIALIZABLE , CollectionSize . ANY ) . suppressing ( suppressForHashMap ( ) ) . createTestSuite ( ) ; } public Test testsForLinkedHashMap ( ) { return MapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { return populate ( new LinkedHashMap < String , String > ( ) , entries ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . GENERAL_PURPOSE , MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . KNOWN_ORDER , CollectionFeature . SERIALIZABLE , CollectionSize . ANY ) . suppressing ( suppressForLinkedHashMap ( ) ) . createTestSuite ( ) ; } public Test testsForTreeMapNatural ( ) { return NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { return populate ( new TreeMap < String , String > ( ) , entries ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . GENERAL_PURPOSE , MapFeature . ALLOWS_NULL_VALUES , MapFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . KNOWN_ORDER , CollectionFeature . SERIALIZABLE , CollectionSize . ANY ) . suppressing ( suppressForTreeMapNatural ( ) ) . createTestSuite ( ) ; } public Test testsForTreeMapWithComparator ( ) { return NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { return populate ( new TreeMap < String , String > ( arbitraryNullFriendlyComparator ( ) ) , entries ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . GENERAL_PURPOSE , MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . KNOWN_ORDER , CollectionFeature . SERIALIZABLE , CollectionSize . ANY ) . suppressing ( suppressForTreeMapWithComparator ( ) ) . createTestSuite ( ) ; } public Test testsForEnumMap ( ) { return MapTestSuiteBuilder . using ( new TestEnumMapGenerator ( ) { @Override protected Map < AnEnum , String > create ( Entry < AnEnum , String > [ ] entries ) { return populate ( new EnumMap < AnEnum , String > ( AnEnum . class ) , entries ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . GENERAL_PURPOSE , MapFeature . ALLOWS_NULL_VALUES , MapFeature . RESTRICTS_KEYS , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . KNOWN_ORDER , CollectionFeature . SERIALIZABLE , CollectionSize . ANY ) . suppressing ( suppressForEnumMap ( ) ) . createTestSuite ( ) ; } public Test testsForConcurrentHashMap ( ) { return ConcurrentMapTestSuiteBuilder . using ( new TestStringMapGenerator ( ) { @Override protected Map < String , String > create ( Entry < String , String > [ ] entries ) { return populate ( new ConcurrentHashMap < String , String > ( ) , entries ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . GENERAL_PURPOSE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . SERIALIZABLE , CollectionSize . ANY ) . suppressing ( suppressForConcurrentHashMap ( ) ) . createTestSuite ( ) ; } public Test testsForConcurrentSkipListMapNatural ( ) { return ConcurrentNavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { return populate ( new ConcurrentSkipListMap < String , String > ( ) , entries ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . GENERAL_PURPOSE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . KNOWN_ORDER , CollectionFeature . SERIALIZABLE , CollectionSize . ANY ) . suppressing ( suppressForConcurrentSkipListMap ( ) ) . createTestSuite ( ) ; } public Test testsForConcurrentSkipListMapWithComparator ( ) { return ConcurrentNavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { return populate ( new ConcurrentSkipListMap < String , String > ( arbitraryNullFriendlyComparator ( ) ) , entries ) ; } } ) . named ( <str> ) . withFeatures ( MapFeature . GENERAL_PURPOSE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . KNOWN_ORDER , CollectionFeature . SERIALIZABLE , CollectionSize . ANY ) . suppressing ( suppressForConcurrentSkipListMap ( ) ) . createTestSuite ( ) ; } private static Map < String , String > toHashMap ( Entry < String , String > [ ] entries ) { return populate ( new HashMap < String , String > ( ) , entries ) ; } private static < T , M extends Map < T , String > > M populate ( M map , Entry < T , String > [ ] entries ) { for ( Entry < T , String > entry : entries ) { map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return map ; } static < T > Comparator < T > arbitraryNullFriendlyComparator ( ) { return new NullFriendlyComparator < T > ( ) ; } private static final class NullFriendlyComparator < T > implements Comparator < T > , Serializable { @Override public int compare ( T left , T right ) { return String . valueOf ( left ) . compareTo ( String . valueOf ( right ) ) ; } } } 

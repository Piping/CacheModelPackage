package com . badlogic . gdx . tests ; import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . util . Arrays ; import com . badlogic . gdx . Application . ApplicationType ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . GdxRuntimeException ; import com . badlogic . gdx . utils . StreamUtils ; public class FilesTest extends GdxTest { String message = <str> ; boolean success ; BitmapFont font ; SpriteBatch batch ; @Override public void create ( ) { font = new BitmapFont ( Gdx . files . internal ( <str> ) , false ) ; batch = new SpriteBatch ( ) ; if ( Gdx . files . isExternalStorageAvailable ( ) ) { message + = <str> ; message + = <str> + Gdx . files . getExternalStoragePath ( ) + <str> ; try { InputStream in = Gdx . files . internal ( <str> ) . read ( ) ; StreamUtils . closeQuietly ( in ) ; message + = <str> ; } catch ( Throwable e ) { message + = <str> + e . getMessage ( ) + <str> ; } BufferedWriter out = null ; try { out = new BufferedWriter ( new OutputStreamWriter ( Gdx . files . external ( <str> ) . write ( false ) ) ) ; out . write ( <str> ) ; message + = <str> ; } catch ( GdxRuntimeException ex ) { message + = <str> ; } catch ( IOException e ) { message + = <str> ; } finally { StreamUtils . closeQuietly ( out ) ; } try { InputStream in = Gdx . files . external ( <str> ) . read ( ) ; StreamUtils . closeQuietly ( in ) ; message + = <str> ; } catch ( Throwable e ) { message + = <str> + e . getMessage ( ) + <str> ; } BufferedReader in = null ; try { in = new BufferedReader ( new InputStreamReader ( Gdx . files . external ( <str> ) . read ( ) ) ) ; if ( ! in . readLine ( ) . equals ( <str> ) ) message + = <str> ; else message + = <str> ; } catch ( GdxRuntimeException ex ) { message + = <str> ; } catch ( IOException e ) { message + = <str> ; } finally { StreamUtils . closeQuietly ( in ) ; } if ( ! Gdx . files . external ( <str> ) . delete ( ) ) message + = <str> ; } else { message + = <str> ; } if ( Gdx . files . isLocalStorageAvailable ( ) ) { message + = <str> ; message + = <str> + Gdx . files . getLocalStoragePath ( ) + <str> ; BufferedWriter out = null ; try { out = new BufferedWriter ( new OutputStreamWriter ( Gdx . files . local ( <str> ) . write ( false ) ) ) ; out . write ( <str> ) ; message + = <str> ; } catch ( GdxRuntimeException ex ) { message + = <str> ; } catch ( IOException e ) { message + = <str> ; } finally { StreamUtils . closeQuietly ( out ) ; } try { InputStream in = Gdx . files . local ( <str> ) . read ( ) ; StreamUtils . closeQuietly ( in ) ; message + = <str> ; } catch ( Throwable e ) { message + = <str> + e . getMessage ( ) + <str> ; } BufferedReader in = null ; try { in = new BufferedReader ( new InputStreamReader ( Gdx . files . local ( <str> ) . read ( ) ) ) ; if ( ! in . readLine ( ) . equals ( <str> ) ) message + = <str> ; else message + = <str> ; } catch ( GdxRuntimeException ex ) { message + = <str> ; } catch ( IOException e ) { message + = <str> ; } finally { StreamUtils . closeQuietly ( in ) ; } try { byte [ ] testBytes = Gdx . files . local ( <str> ) . readBytes ( ) ; if ( Arrays . equals ( <str> . getBytes ( ) , testBytes ) ) message + = <str> ; else fail ( ) ; } catch ( Throwable e ) { message + = <str> + e . getMessage ( ) + <str> ; } if ( ! Gdx . files . local ( <str> ) . delete ( ) ) message + = <str> ; } try { testClasspath ( ) ; testInternal ( ) ; testExternal ( ) ; testAbsolute ( ) ; testLocal ( ) ; } catch ( IOException ex ) { throw new RuntimeException ( ex ) ; } } private void testClasspath ( ) throws IOException { if ( Gdx . app . getType ( ) = = ApplicationType . iOS ) return ; FileHandle handle = Gdx . files . classpath ( <str> ) ; if ( ! handle . exists ( ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; try { handle . delete ( ) ; fail ( ) ; } catch ( Exception expected ) { } try { handle . list ( ) ; fail ( ) ; } catch ( Exception expected ) { } try { handle . read ( ) . close ( ) ; fail ( ) ; } catch ( Exception ignored ) { } FileHandle dir = Gdx . files . classpath ( <str> ) ; if ( dir . isDirectory ( ) ) fail ( ) ; FileHandle child = dir . child ( <str> ) ; if ( ! child . name ( ) . equals ( <str> ) ) fail ( ) ; if ( ! child . nameWithoutExtension ( ) . equals ( <str> ) ) fail ( ) ; if ( ! child . extension ( ) . equals ( <str> ) ) fail ( ) ; handle . read ( ) . close ( ) ; if ( handle . readBytes ( ) . length ! = handle . length ( ) ) fail ( ) ; } private void testInternal ( ) throws IOException { FileHandle handle = Gdx . files . internal ( <str> ) ; if ( ! handle . exists ( ) ) fail ( <str> ) ; if ( handle . isDirectory ( ) ) fail ( <str> ) ; try { handle . delete ( ) ; fail ( <str> ) ; } catch ( Exception expected ) { } if ( handle . list ( ) . length ! = <int> ) fail ( <str> ) ; if ( Gdx . app . getType ( ) ! = ApplicationType . Android ) { if ( ! handle . parent ( ) . exists ( ) ) fail ( <str> ) ; } try { handle . read ( ) . close ( ) ; fail ( ) ; } catch ( Exception ignored ) { } FileHandle dir ; if ( Gdx . app . getType ( ) = = ApplicationType . Android | | Gdx . app . getType ( ) = = ApplicationType . iOS ) dir = Gdx . files . internal ( <str> ) ; else dir = Gdx . files . internal ( <str> ) ; if ( Gdx . app . getType ( ) ! = ApplicationType . Android ) { if ( ! dir . exists ( ) ) fail ( ) ; } if ( ! dir . isDirectory ( ) ) fail ( ) ; if ( dir . list ( ) . length = = <int> ) fail ( ) ; FileHandle child = dir . child ( <str> ) ; if ( ! child . name ( ) . equals ( <str> ) ) fail ( ) ; if ( ! child . nameWithoutExtension ( ) . equals ( <str> ) ) fail ( ) ; if ( ! child . extension ( ) . equals ( <str> ) ) fail ( ) ; if ( Gdx . app . getType ( ) ! = ApplicationType . Android ) { if ( ! child . parent ( ) . exists ( ) ) fail ( ) ; } FileHandle copy = Gdx . files . external ( <str> ) ; copy . delete ( ) ; if ( copy . exists ( ) ) fail ( ) ; handle . copyTo ( copy ) ; if ( ! copy . exists ( ) ) fail ( ) ; if ( copy . length ( ) ! = <int> ) fail ( ) ; copy . delete ( ) ; if ( copy . exists ( ) ) fail ( ) ; handle . read ( ) . close ( ) ; if ( handle . readBytes ( ) . length ! = handle . length ( ) ) fail ( ) ; } private void testExternal ( ) throws IOException { String path = <str> ; FileHandle handle = Gdx . files . external ( path ) ; handle . delete ( ) ; if ( handle . exists ( ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; if ( handle . delete ( ) ) fail ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; if ( handle . child ( <str> ) . exists ( ) ) fail ( ) ; if ( ! handle . parent ( ) . exists ( ) ) fail ( ) ; try { handle . read ( ) . close ( ) ; fail ( ) ; } catch ( Exception ignored ) { } handle . mkdirs ( ) ; if ( ! handle . exists ( ) ) fail ( ) ; if ( ! handle . isDirectory ( ) ) fail ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; handle . child ( <str> ) . mkdirs ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; FileHandle child = handle . list ( ) [ <int> ] ; if ( ! child . name ( ) . equals ( <str> ) ) fail ( ) ; if ( ! child . parent ( ) . exists ( ) ) fail ( ) ; if ( ! handle . deleteDirectory ( ) ) fail ( ) ; if ( handle . exists ( ) ) fail ( ) ; OutputStream output = handle . write ( false ) ; output . write ( <str> . getBytes ( ) ) ; output . close ( ) ; if ( ! handle . exists ( ) ) fail ( ) ; if ( handle . length ( ) ! = <int> ) fail ( ) ; FileHandle copy = Gdx . files . external ( path + <str> ) ; copy . delete ( ) ; if ( copy . exists ( ) ) fail ( ) ; handle . copyTo ( copy ) ; if ( ! copy . exists ( ) ) fail ( ) ; if ( copy . length ( ) ! = <int> ) fail ( ) ; FileHandle move = Gdx . files . external ( path + <str> ) ; move . delete ( ) ; if ( move . exists ( ) ) fail ( ) ; copy . moveTo ( move ) ; if ( ! move . exists ( ) ) fail ( ) ; if ( move . length ( ) ! = <int> ) fail ( ) ; move . deleteDirectory ( ) ; if ( move . exists ( ) ) fail ( ) ; InputStream input = handle . read ( ) ; byte [ ] bytes = new byte [ <int> ] ; if ( input . read ( bytes ) ! = <int> ) fail ( ) ; input . close ( ) ; if ( ! new String ( bytes , <int> , <int> ) . equals ( <str> ) ) fail ( ) ; output = handle . write ( true ) ; output . write ( <str> . getBytes ( ) ) ; output . close ( ) ; if ( handle . length ( ) ! = <int> ) fail ( ) ; input = handle . read ( ) ; if ( input . read ( bytes ) ! = <int> ) fail ( ) ; input . close ( ) ; if ( ! new String ( bytes , <int> , <int> ) . equals ( <str> ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; if ( ! handle . name ( ) . equals ( <str> ) ) fail ( ) ; if ( ! handle . nameWithoutExtension ( ) . equals ( <str> ) ) fail ( ) ; if ( ! handle . extension ( ) . equals ( <str> ) ) fail ( ) ; handle . deleteDirectory ( ) ; if ( handle . exists ( ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; handle . delete ( ) ; handle . deleteDirectory ( ) ; } private void testAbsolute ( ) throws IOException { String path = new File ( Gdx . files . getExternalStoragePath ( ) , <str> ) . getAbsolutePath ( ) ; FileHandle handle = Gdx . files . absolute ( path ) ; handle . delete ( ) ; if ( handle . exists ( ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; if ( handle . delete ( ) ) fail ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; if ( handle . child ( <str> ) . exists ( ) ) fail ( ) ; if ( ! handle . parent ( ) . exists ( ) ) fail ( ) ; try { handle . read ( ) . close ( ) ; fail ( ) ; } catch ( Exception ignored ) { } handle . mkdirs ( ) ; if ( ! handle . exists ( ) ) fail ( ) ; if ( ! handle . isDirectory ( ) ) fail ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; handle . child ( <str> ) . mkdirs ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; FileHandle child = handle . list ( ) [ <int> ] ; if ( ! child . name ( ) . equals ( <str> ) ) fail ( ) ; if ( ! child . parent ( ) . exists ( ) ) fail ( ) ; if ( ! handle . deleteDirectory ( ) ) fail ( ) ; if ( handle . exists ( ) ) fail ( ) ; OutputStream output = handle . write ( false ) ; output . write ( <str> . getBytes ( ) ) ; output . close ( ) ; if ( ! handle . exists ( ) ) fail ( ) ; if ( handle . length ( ) ! = <int> ) fail ( ) ; FileHandle copy = Gdx . files . absolute ( path + <str> ) ; copy . delete ( ) ; if ( copy . exists ( ) ) fail ( ) ; handle . copyTo ( copy ) ; if ( ! copy . exists ( ) ) fail ( ) ; if ( copy . length ( ) ! = <int> ) fail ( ) ; FileHandle move = Gdx . files . absolute ( path + <str> ) ; move . delete ( ) ; if ( move . exists ( ) ) fail ( ) ; copy . moveTo ( move ) ; if ( ! move . exists ( ) ) fail ( ) ; if ( move . length ( ) ! = <int> ) fail ( ) ; move . deleteDirectory ( ) ; if ( move . exists ( ) ) fail ( ) ; InputStream input = handle . read ( ) ; byte [ ] bytes = new byte [ <int> ] ; if ( input . read ( bytes ) ! = <int> ) fail ( ) ; input . close ( ) ; if ( ! new String ( bytes , <int> , <int> ) . equals ( <str> ) ) fail ( ) ; output = handle . write ( true ) ; output . write ( <str> . getBytes ( ) ) ; output . close ( ) ; if ( handle . length ( ) ! = <int> ) fail ( ) ; input = handle . read ( ) ; if ( input . read ( bytes ) ! = <int> ) fail ( ) ; input . close ( ) ; if ( ! new String ( bytes , <int> , <int> ) . equals ( <str> ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; if ( ! handle . name ( ) . equals ( <str> ) ) fail ( ) ; if ( ! handle . nameWithoutExtension ( ) . equals ( <str> ) ) fail ( ) ; if ( ! handle . extension ( ) . equals ( <str> ) ) fail ( ) ; handle . deleteDirectory ( ) ; if ( handle . exists ( ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; handle . delete ( ) ; handle . deleteDirectory ( ) ; } private void testLocal ( ) throws IOException { String path = <str> ; FileHandle handle = Gdx . files . local ( path ) ; handle . delete ( ) ; if ( handle . exists ( ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; if ( handle . delete ( ) ) fail ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; if ( handle . child ( <str> ) . exists ( ) ) fail ( ) ; if ( ! handle . parent ( ) . exists ( ) ) fail ( ) ; try { handle . read ( ) . close ( ) ; fail ( ) ; } catch ( Exception ignored ) { } handle . mkdirs ( ) ; if ( ! handle . exists ( ) ) fail ( ) ; if ( ! handle . isDirectory ( ) ) fail ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; handle . child ( <str> ) . mkdirs ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; FileHandle child = handle . list ( ) [ <int> ] ; if ( ! child . name ( ) . equals ( <str> ) ) fail ( ) ; if ( ! child . parent ( ) . exists ( ) ) fail ( ) ; if ( ! handle . deleteDirectory ( ) ) fail ( ) ; if ( handle . exists ( ) ) fail ( ) ; OutputStream output = handle . write ( false ) ; output . write ( <str> . getBytes ( ) ) ; output . close ( ) ; if ( ! handle . exists ( ) ) fail ( ) ; if ( handle . length ( ) ! = <int> ) fail ( ) ; FileHandle copy = Gdx . files . local ( path + <str> ) ; copy . delete ( ) ; if ( copy . exists ( ) ) fail ( ) ; handle . copyTo ( copy ) ; if ( ! copy . exists ( ) ) fail ( ) ; if ( copy . length ( ) ! = <int> ) fail ( ) ; FileHandle move = Gdx . files . local ( path + <str> ) ; move . delete ( ) ; if ( move . exists ( ) ) fail ( ) ; copy . moveTo ( move ) ; if ( ! move . exists ( ) ) fail ( ) ; if ( move . length ( ) ! = <int> ) fail ( ) ; move . deleteDirectory ( ) ; if ( move . exists ( ) ) fail ( ) ; InputStream input = handle . read ( ) ; byte [ ] bytes = new byte [ <int> ] ; if ( input . read ( bytes ) ! = <int> ) fail ( ) ; input . close ( ) ; if ( ! new String ( bytes , <int> , <int> ) . equals ( <str> ) ) fail ( ) ; output = handle . write ( true ) ; output . write ( <str> . getBytes ( ) ) ; output . close ( ) ; if ( handle . length ( ) ! = <int> ) fail ( ) ; input = handle . read ( ) ; if ( input . read ( bytes ) ! = <int> ) fail ( ) ; input . close ( ) ; if ( ! new String ( bytes , <int> , <int> ) . equals ( <str> ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; if ( handle . list ( ) . length ! = <int> ) fail ( ) ; if ( ! handle . name ( ) . equals ( <str> ) ) fail ( ) ; if ( ! handle . nameWithoutExtension ( ) . equals ( <str> ) ) fail ( ) ; if ( ! handle . extension ( ) . equals ( <str> ) ) fail ( ) ; handle . deleteDirectory ( ) ; if ( handle . exists ( ) ) fail ( ) ; if ( handle . isDirectory ( ) ) fail ( ) ; handle . delete ( ) ; handle . deleteDirectory ( ) ; } private void fail ( ) { throw new RuntimeException ( ) ; } private void fail ( String msg ) { throw new RuntimeException ( msg ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; font . draw ( batch , message , <int> , Gdx . graphics . getHeight ( ) - <int> ) ; batch . end ( ) ; } @Override public void dispose ( ) { batch . dispose ( ) ; font . dispose ( ) ; } } 

package org . elasticsearch . messy . tests ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . indexedscripts . put . PutIndexedScriptResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . script . groovy . GroovyScriptEngineService ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . search . aggregations . AggregationBuilders ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class IndexedScriptTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } @Override protected Settings nodeSettings ( int nodeOrdinal ) { Settings . Builder builder = Settings . builder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . put ( <str> , <str> ) ; return builder . build ( ) ; } public void testFieldIndexedScript ( ) throws ExecutionException , InterruptedException { List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; builders . add ( client ( ) . prepareIndex ( ScriptService . SCRIPT_INDEX , <str> , <str> ) . setSource ( <str> + <str> + <str> ) . setTimeout ( TimeValue . timeValueSeconds ( randomIntBetween ( <int> , <int> ) ) ) ) ; builders . add ( client ( ) . prepareIndex ( ScriptService . SCRIPT_INDEX , <str> , <str> ) . setSource ( <str> + <str> + <str> ) ) ; indexRandom ( true , builders ) ; builders . clear ( ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) ) ; indexRandom ( true , builders ) ; Map < String , Object > script2Params = new HashMap < > ( ) ; script2Params . put ( <str> , <int> ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setSource ( new SearchSourceBuilder ( ) . query ( QueryBuilders . matchAllQuery ( ) ) . size ( <int> ) . scriptField ( <str> , new Script ( <str> , ScriptType . INDEXED , <str> , null ) ) . scriptField ( <str> , new Script ( <str> , ScriptType . INDEXED , <str> , script2Params ) ) ) . setIndices ( <str> ) . setTypes ( <str> ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertTrue ( searchResponse . getHits ( ) . hits ( ) . length = = <int> ) ; SearchHit sh = searchResponse . getHits ( ) . getAt ( <int> ) ; assertThat ( ( Integer ) sh . field ( <str> ) . getValue ( ) , equalTo ( <int> ) ) ; assertThat ( ( Integer ) sh . field ( <str> ) . getValue ( ) , equalTo ( <int> ) ) ; } public void testUpdateScripts ( ) { createIndex ( <str> ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; flush ( <str> ) ; int iterations = randomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iterations ; i + + ) { PutIndexedScriptResponse response = client ( ) . preparePutIndexedScript ( GroovyScriptEngineService . NAME , <str> , <str> + i + <str> ) . get ( ) ; assertEquals ( i , response . getVersion ( ) ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setSource ( new SearchSourceBuilder ( ) . query ( QueryBuilders . matchAllQuery ( ) ) . scriptField ( <str> , new Script ( <str> , ScriptType . INDEXED , <str> , null ) ) ) . setIndices ( <str> ) . setTypes ( <str> ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; SearchHit sh = searchResponse . getHits ( ) . getAt ( <int> ) ; assertThat ( ( Integer ) sh . field ( <str> ) . getValue ( ) , equalTo ( i ) ) ; } } public void testDisabledUpdateIndexedScriptsOnly ( ) { if ( randomBoolean ( ) ) { client ( ) . preparePutIndexedScript ( GroovyScriptEngineService . NAME , <str> , <str> ) . get ( ) ; } else { client ( ) . prepareIndex ( ScriptService . SCRIPT_INDEX , GroovyScriptEngineService . NAME , <str> ) . setSource ( <str> ) . get ( ) ; } client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; try { client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INDEXED , GroovyScriptEngineService . NAME , null ) ) . get ( ) ; fail ( <str> ) ; } catch ( Exception e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( ExceptionsHelper . detailedMessage ( e ) , containsString ( <str> ) ) ; } } public void testDisabledAggsDynamicScripts ( ) { if ( randomBoolean ( ) ) { client ( ) . preparePutIndexedScript ( GroovyScriptEngineService . NAME , <str> , <str> ) . get ( ) ; } else { client ( ) . prepareIndex ( ScriptService . SCRIPT_INDEX , GroovyScriptEngineService . NAME , <str> ) . setSource ( <str> ) . get ( ) ; } client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setSource ( new SearchSourceBuilder ( ) . aggregation ( AggregationBuilders . terms ( <str> ) . script ( new Script ( <str> , ScriptType . INDEXED , null , null ) ) ) ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getAggregations ( ) . get ( <str> ) , notNullValue ( ) ) ; } } 

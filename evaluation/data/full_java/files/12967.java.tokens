package org . gradle . api . tasks . diagnostics . internal . dsl ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . component . ModuleComponentSelector ; import org . gradle . api . artifacts . result . DependencyResult ; import org . gradle . api . artifacts . result . ResolvedDependencyResult ; import org . gradle . api . specs . Spec ; class DependencyResultSpec implements Spec < DependencyResult > { private final String stringNotation ; public DependencyResultSpec ( String stringNotation ) { this . stringNotation = stringNotation ; } public boolean isSatisfiedBy ( DependencyResult candidate ) { if ( candidate instanceof ResolvedDependencyResult ) { return matchesRequested ( candidate ) | | matchesSelected ( ( ResolvedDependencyResult ) candidate ) ; } else { return matchesRequested ( candidate ) ; } } private boolean matchesRequested ( DependencyResult candidate ) { ComponentSelector requested = candidate . getRequested ( ) ; if ( requested instanceof ModuleComponentSelector ) { ModuleComponentSelector requestedModule = ( ModuleComponentSelector ) requested ; String requestedCandidate = requestedModule . getGroup ( ) + <str> + requestedModule . getModule ( ) + <str> + requestedModule . getVersion ( ) ; return requestedCandidate . contains ( stringNotation ) ; } return false ; } private boolean matchesSelected ( ResolvedDependencyResult candidate ) { ModuleVersionIdentifier selected = candidate . getSelected ( ) . getModuleVersion ( ) ; String selectedCandidate = selected . getGroup ( ) + <str> + selected . getModule ( ) + <str> + selected . getVersion ( ) ; return selectedCandidate . contains ( stringNotation ) ; } } 

package com . google . common . collect ; import static com . google . common . collect . testing . features . CollectionFeature . KNOWN_ORDER ; import static com . google . common . collect . testing . features . CollectionFeature . SERIALIZABLE ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_ANY_NULL_QUERIES ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableListMultimap . Builder ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . ListMultimapTestSuiteBuilder ; import com . google . common . collect . testing . google . TestStringListMultimapGenerator ; import com . google . common . collect . testing . google . UnmodifiableCollectionTests ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . SerializableTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Map . Entry ; @GwtCompatible ( emulated = true ) public class ImmutableListMultimapTest extends TestCase { public static class ImmutableListMultimapGenerator extends TestStringListMultimapGenerator { @Override protected ListMultimap < String , String > create ( Entry < String , String > [ ] entries ) { ImmutableListMultimap . Builder < String , String > builder = ImmutableListMultimap . builder ( ) ; for ( Entry < String , String > entry : entries ) { builder . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return builder . build ( ) ; } } public static class ImmutableListMultimapCopyOfEntriesGenerator extends TestStringListMultimapGenerator { @Override protected ListMultimap < String , String > create ( Entry < String , String > [ ] entries ) { return ImmutableListMultimap . copyOf ( Arrays . asList ( entries ) ) ; } } @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( ListMultimapTestSuiteBuilder . using ( new ImmutableListMultimapGenerator ( ) ) . named ( <str> ) . withFeatures ( ALLOWS_ANY_NULL_QUERIES , SERIALIZABLE , KNOWN_ORDER , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTest ( ListMultimapTestSuiteBuilder . using ( new ImmutableListMultimapCopyOfEntriesGenerator ( ) ) . named ( <str> ) . withFeatures ( ALLOWS_ANY_NULL_QUERIES , SERIALIZABLE , KNOWN_ORDER , CollectionSize . ANY ) . createTestSuite ( ) ) ; suite . addTestSuite ( ImmutableListMultimapTest . class ) ; return suite ; } public void testBuilder_withImmutableEntry ( ) { ImmutableListMultimap < String , Integer > multimap = new Builder < String , Integer > ( ) . put ( Maps . immutableEntry ( <str> , <int> ) ) . build ( ) ; assertEquals ( Arrays . asList ( <int> ) , multimap . get ( <str> ) ) ; } public void testBuilder_withImmutableEntryAndNullContents ( ) { Builder < String , Integer > builder = new Builder < String , Integer > ( ) ; try { builder . put ( Maps . immutableEntry ( <str> , ( Integer ) null ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . put ( Maps . immutableEntry ( ( String ) null , <int> ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } private static class StringHolder { String string ; } public void testBuilder_withMutableEntry ( ) { ImmutableListMultimap . Builder < String , Integer > builder = new Builder < String , Integer > ( ) ; final StringHolder holder = new StringHolder ( ) ; holder . string = <str> ; Entry < String , Integer > entry = new AbstractMapEntry < String , Integer > ( ) { @Override public String getKey ( ) { return holder . string ; } @Override public Integer getValue ( ) { return <int> ; } } ; builder . put ( entry ) ; holder . string = <str> ; assertEquals ( Arrays . asList ( <int> ) , builder . build ( ) . get ( <str> ) ) ; } public void testBuilderPutAllIterable ( ) { ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . putAll ( <str> , Arrays . asList ( <int> , <int> , <int> ) ) ; builder . putAll ( <str> , Arrays . asList ( <int> , <int> ) ) ; builder . putAll ( <str> , Arrays . asList ( <int> , <int> ) ) ; Multimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( Arrays . asList ( <int> , <int> , <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( Arrays . asList ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutAllVarargs ( ) { ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . putAll ( <str> , <int> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> ) ; Multimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( Arrays . asList ( <int> , <int> , <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( Arrays . asList ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutAllMultimap ( ) { Multimap < String , Integer > toPut = LinkedListMultimap . create ( ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; Multimap < String , Integer > moreToPut = LinkedListMultimap . create ( ) ; moreToPut . put ( <str> , <int> ) ; moreToPut . put ( <str> , <int> ) ; moreToPut . put ( <str> , <int> ) ; ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . putAll ( toPut ) ; builder . putAll ( moreToPut ) ; Multimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( Arrays . asList ( <int> , <int> , <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( Arrays . asList ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutAllWithDuplicates ( ) { ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . putAll ( <str> , <int> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> , <int> ) ; ImmutableListMultimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( Arrays . asList ( <int> , <int> , <int> , <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( Arrays . asList ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutWithDuplicates ( ) { ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . putAll ( <str> , <int> , <int> , <int> ) ; builder . putAll ( <str> , <int> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableListMultimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( Arrays . asList ( <int> , <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( Arrays . asList ( <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutAllMultimapWithDuplicates ( ) { Multimap < String , Integer > toPut = LinkedListMultimap . create ( ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; toPut . put ( <str> , <int> ) ; Multimap < String , Integer > moreToPut = LinkedListMultimap . create ( ) ; moreToPut . put ( <str> , <int> ) ; moreToPut . put ( <str> , <int> ) ; moreToPut . put ( <str> , <int> ) ; moreToPut . put ( <str> , <int> ) ; ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . putAll ( toPut ) ; builder . putAll ( moreToPut ) ; Multimap < String , Integer > multimap = builder . build ( ) ; assertEquals ( Arrays . asList ( <int> , <int> , <int> , <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( Arrays . asList ( <int> , <int> , <int> ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; } public void testBuilderPutNullKey ( ) { Multimap < String , Integer > toPut = LinkedListMultimap . create ( ) ; toPut . put ( <str> , null ) ; ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; try { builder . put ( null , <int> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( null , Arrays . asList ( <int> , <int> , <int> ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( null , <int> , <int> , <int> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( toPut ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testBuilderPutNullValue ( ) { Multimap < String , Integer > toPut = LinkedListMultimap . create ( ) ; toPut . put ( null , <int> ) ; ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; try { builder . put ( <str> , null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( <str> , Arrays . asList ( <int> , null , <int> ) ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( <str> , <int> , null , <int> ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { builder . putAll ( toPut ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testBuilderOrderKeysBy ( ) { ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . orderKeysBy ( Collections . reverseOrder ( ) ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableListMultimap < String , Integer > multimap = builder . build ( ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( multimap . values ( ) ) . containsExactly ( <int> , <int> , <int> , <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; } public void testBuilderOrderKeysByDuplicates ( ) { ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . orderKeysBy ( new Ordering < String > ( ) { @Override public int compare ( String left , String right ) { return left . length ( ) - right . length ( ) ; } } ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableListMultimap < String , Integer > multimap = builder . build ( ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( multimap . values ( ) ) . containsExactly ( <int> , <int> , <int> , <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; } public void testBuilderOrderValuesBy ( ) { ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . orderValuesBy ( Collections . reverseOrder ( ) ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableListMultimap < String , Integer > multimap = builder . build ( ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( multimap . values ( ) ) . containsExactly ( <int> , <int> , <int> , <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; } public void testBuilderOrderKeysAndValuesBy ( ) { ImmutableListMultimap . Builder < String , Integer > builder = ImmutableListMultimap . builder ( ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . orderKeysBy ( Collections . reverseOrder ( ) ) ; builder . orderValuesBy ( Collections . reverseOrder ( ) ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; builder . put ( <str> , <int> ) ; ImmutableListMultimap < String , Integer > multimap = builder . build ( ) ; assertThat ( multimap . keySet ( ) ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; assertThat ( multimap . values ( ) ) . containsExactly ( <int> , <int> , <int> , <int> , <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; assertThat ( multimap . get ( <str> ) ) . containsExactly ( <int> , <int> ) . inOrder ( ) ; } public void testCopyOf ( ) { ArrayListMultimap < String , Integer > input = ArrayListMultimap . create ( ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; Multimap < String , Integer > multimap = ImmutableListMultimap . copyOf ( input ) ; assertEquals ( multimap , input ) ; assertEquals ( input , multimap ) ; } public void testCopyOfWithDuplicates ( ) { ArrayListMultimap < String , Integer > input = ArrayListMultimap . create ( ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; input . put ( <str> , <int> ) ; Multimap < String , Integer > multimap = ImmutableListMultimap . copyOf ( input ) ; assertEquals ( multimap , input ) ; assertEquals ( input , multimap ) ; } public void testCopyOfEmpty ( ) { ArrayListMultimap < String , Integer > input = ArrayListMultimap . create ( ) ; Multimap < String , Integer > multimap = ImmutableListMultimap . copyOf ( input ) ; assertEquals ( multimap , input ) ; assertEquals ( input , multimap ) ; } public void testCopyOfImmutableListMultimap ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; assertSame ( multimap , ImmutableListMultimap . copyOf ( multimap ) ) ; } public void testCopyOfNullKey ( ) { ArrayListMultimap < String , Integer > input = ArrayListMultimap . create ( ) ; input . put ( null , <int> ) ; try { ImmutableListMultimap . copyOf ( input ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testCopyOfNullValue ( ) { ArrayListMultimap < String , Integer > input = ArrayListMultimap . create ( ) ; input . putAll ( <str> , Arrays . asList ( <int> , null , <int> ) ) ; try { ImmutableListMultimap . copyOf ( input ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testEmptyMultimapReads ( ) { Multimap < String , Integer > multimap = ImmutableListMultimap . of ( ) ; assertFalse ( multimap . containsKey ( <str> ) ) ; assertFalse ( multimap . containsValue ( <int> ) ) ; assertFalse ( multimap . containsEntry ( <str> , <int> ) ) ; assertTrue ( multimap . entries ( ) . isEmpty ( ) ) ; assertTrue ( multimap . equals ( ArrayListMultimap . create ( ) ) ) ; assertEquals ( Collections . emptyList ( ) , multimap . get ( <str> ) ) ; assertEquals ( <int> , multimap . hashCode ( ) ) ; assertTrue ( multimap . isEmpty ( ) ) ; assertEquals ( HashMultiset . create ( ) , multimap . keys ( ) ) ; assertEquals ( Collections . emptySet ( ) , multimap . keySet ( ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; assertTrue ( multimap . values ( ) . isEmpty ( ) ) ; assertEquals ( <str> , multimap . toString ( ) ) ; } public void testEmptyMultimapWrites ( ) { Multimap < String , Integer > multimap = ImmutableListMultimap . of ( ) ; UnmodifiableCollectionTests . assertMultimapIsUnmodifiable ( multimap , <str> , <int> ) ; } private Multimap < String , Integer > createMultimap ( ) { return ImmutableListMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; } public void testMultimapReads ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; assertTrue ( multimap . containsKey ( <str> ) ) ; assertFalse ( multimap . containsKey ( <str> ) ) ; assertTrue ( multimap . containsValue ( <int> ) ) ; assertFalse ( multimap . containsValue ( <int> ) ) ; assertTrue ( multimap . containsEntry ( <str> , <int> ) ) ; assertFalse ( multimap . containsEntry ( <str> , <int> ) ) ; assertFalse ( multimap . containsEntry ( <str> , <int> ) ) ; assertFalse ( multimap . entries ( ) . isEmpty ( ) ) ; assertEquals ( <int> , multimap . size ( ) ) ; assertFalse ( multimap . isEmpty ( ) ) ; assertEquals ( <str> , multimap . toString ( ) ) ; } public void testMultimapWrites ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; UnmodifiableCollectionTests . assertMultimapIsUnmodifiable ( multimap , <str> , <int> ) ; } public void testMultimapEquals ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; Multimap < String , Integer > arrayListMultimap = ArrayListMultimap . create ( ) ; arrayListMultimap . putAll ( <str> , Arrays . asList ( <int> , <int> ) ) ; arrayListMultimap . put ( <str> , <int> ) ; new EqualsTester ( ) . addEqualityGroup ( multimap , createMultimap ( ) , arrayListMultimap , ImmutableListMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) . addEqualityGroup ( ImmutableListMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) . addEqualityGroup ( ImmutableListMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) . addEqualityGroup ( ImmutableListMultimap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) . testEquals ( ) ; } public void testOf ( ) { assertMultimapEquals ( ImmutableListMultimap . of ( <str> , <int> ) , <str> , <int> ) ; assertMultimapEquals ( ImmutableListMultimap . of ( <str> , <int> , <str> , <int> ) , <str> , <int> , <str> , <int> ) ; assertMultimapEquals ( ImmutableListMultimap . of ( <str> , <int> , <str> , <int> , <str> , <int> ) , <str> , <int> , <str> , <int> , <str> , <int> ) ; assertMultimapEquals ( ImmutableListMultimap . of ( <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> ) , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> ) ; assertMultimapEquals ( ImmutableListMultimap . of ( <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> ) , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> , <str> , <int> ) ; } public void testInverse ( ) { assertEquals ( ImmutableListMultimap . < Integer , String > of ( ) , ImmutableListMultimap . < String , Integer > of ( ) . inverse ( ) ) ; assertEquals ( ImmutableListMultimap . of ( <int> , <str> ) , ImmutableListMultimap . of ( <str> , <int> ) . inverse ( ) ) ; assertEquals ( ImmutableListMultimap . of ( <int> , <str> , <int> , <str> ) , ImmutableListMultimap . of ( <str> , <int> , <str> , <int> ) . inverse ( ) ) ; assertEquals ( ImmutableListMultimap . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) . inverse ( ) , ImmutableListMultimap . of ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; assertEquals ( ImmutableListMultimap . of ( <str> , <str> , <str> , <str> , <str> , <str> ) , ImmutableListMultimap . of ( <str> , <str> , <str> , <str> , <str> , <str> ) . inverse ( ) ) ; } public void testInverseMinimizesWork ( ) { ImmutableListMultimap < String , Character > multimap = ImmutableListMultimap . < String , Character > builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; assertSame ( multimap . inverse ( ) , multimap . inverse ( ) ) ; assertSame ( multimap , multimap . inverse ( ) . inverse ( ) ) ; } private static < K , V > void assertMultimapEquals ( Multimap < K , V > multimap , Object . . . alternatingKeysAndValues ) { assertEquals ( multimap . size ( ) , alternatingKeysAndValues . length / <int> ) ; int i = <int> ; for ( Entry < K , V > entry : multimap . entries ( ) ) { assertEquals ( alternatingKeysAndValues [ i + + ] , entry . getKey ( ) ) ; assertEquals ( alternatingKeysAndValues [ i + + ] , entry . getValue ( ) ) ; } } @GwtIncompatible ( <str> ) public void testSerialization ( ) { Multimap < String , Integer > multimap = createMultimap ( ) ; SerializableTester . reserializeAndAssert ( multimap ) ; assertEquals ( multimap . size ( ) , SerializableTester . reserialize ( multimap ) . size ( ) ) ; SerializableTester . reserializeAndAssert ( multimap . get ( <str> ) ) ; LenientSerializableTester . reserializeAndAssertLenient ( multimap . keySet ( ) ) ; LenientSerializableTester . reserializeAndAssertLenient ( multimap . keys ( ) ) ; SerializableTester . reserializeAndAssert ( multimap . asMap ( ) ) ; Collection < Integer > valuesCopy = SerializableTester . reserialize ( multimap . values ( ) ) ; assertEquals ( HashMultiset . create ( multimap . values ( ) ) , HashMultiset . create ( valuesCopy ) ) ; } @GwtIncompatible ( <str> ) public void testEmptySerialization ( ) { Multimap < String , Integer > multimap = ImmutableListMultimap . of ( ) ; assertSame ( multimap , SerializableTester . reserialize ( multimap ) ) ; } } 

package org . elasticsearch . script . expression ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . queries . function . FunctionValues ; import org . apache . lucene . queries . function . ValueSource ; import org . elasticsearch . index . fielddata . AtomicFieldData ; import org . elasticsearch . index . fielddata . AtomicNumericFieldData ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . search . MultiValueMode ; import java . io . IOException ; import java . util . Map ; import java . util . Objects ; public class CountMethodValueSource extends ValueSource { protected IndexFieldData < ? > fieldData ; protected CountMethodValueSource ( IndexFieldData < ? > fieldData ) { Objects . requireNonNull ( fieldData ) ; this . fieldData = fieldData ; } @Override public FunctionValues getValues ( Map context , LeafReaderContext leaf ) throws IOException { AtomicFieldData leafData = fieldData . load ( leaf ) ; assert ( leafData instanceof AtomicNumericFieldData ) ; return new CountMethodFunctionValues ( this , ( AtomicNumericFieldData ) leafData ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; FieldDataValueSource that = ( FieldDataValueSource ) o ; return fieldData . equals ( that . fieldData ) ; } @Override public int hashCode ( ) { return fieldData . hashCode ( ) ; } @Override public String description ( ) { return <str> + fieldData . getFieldNames ( ) . toString ( ) + <str> ; } } 

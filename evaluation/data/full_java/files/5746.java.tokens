package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . binder . AnnotatedBindingBuilder ; import org . elasticsearch . common . inject . binder . AnnotatedConstantBindingBuilder ; import org . elasticsearch . common . inject . binder . LinkedBindingBuilder ; import org . elasticsearch . common . inject . matcher . Matcher ; import org . elasticsearch . common . inject . spi . Message ; import org . elasticsearch . common . inject . spi . TypeConverter ; import org . elasticsearch . common . inject . spi . TypeListener ; import java . lang . annotation . Annotation ; public interface Binder { void bindScope ( Class < ? extends Annotation > annotationType , Scope scope ) ; < T > LinkedBindingBuilder < T > bind ( Key < T > key ) ; < T > AnnotatedBindingBuilder < T > bind ( TypeLiteral < T > typeLiteral ) ; < T > AnnotatedBindingBuilder < T > bind ( Class < T > type ) ; AnnotatedConstantBindingBuilder bindConstant ( ) ; < T > void requestInjection ( TypeLiteral < T > type , T instance ) ; void requestInjection ( Object instance ) ; void requestStaticInjection ( Class < ? > . . . types ) ; void install ( Module module ) ; Stage currentStage ( ) ; void addError ( String message , Object . . . arguments ) ; void addError ( Throwable t ) ; void addError ( Message message ) ; < T > Provider < T > getProvider ( Key < T > key ) ; < T > Provider < T > getProvider ( Class < T > type ) ; < T > MembersInjector < T > getMembersInjector ( TypeLiteral < T > typeLiteral ) ; < T > MembersInjector < T > getMembersInjector ( Class < T > type ) ; void convertToTypes ( Matcher < ? super TypeLiteral < ? > > typeMatcher , TypeConverter converter ) ; void bindListener ( Matcher < ? super TypeLiteral < ? > > typeMatcher , TypeListener listener ) ; Binder withSource ( Object source ) ; Binder skipSources ( Class . . . classesToSkip ) ; PrivateBinder newPrivateBinder ( ) ; } 

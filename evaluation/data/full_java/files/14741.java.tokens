package org . gradle . platform . base . internal ; import org . apache . commons . lang . ObjectUtils ; import org . gradle . api . IllegalDependencyNotation ; import org . gradle . api . Nullable ; import org . gradle . platform . base . DependencySpec ; import org . gradle . platform . base . ModuleDependencySpec ; import org . gradle . platform . base . ModuleDependencySpecBuilder ; import static com . google . common . base . Strings . isNullOrEmpty ; public final class DefaultModuleDependencySpec implements ModuleDependencySpec { public static String effectiveVersionFor ( String version ) { return isNullOrEmpty ( version ) ? <str> : version ; } private final String group ; private final String name ; private final String version ; public DefaultModuleDependencySpec ( String group , String name , String version ) { if ( group = = null | | name = = null ) { throw new IllegalDependencyNotation ( <str> ) ; } this . group = group ; this . name = name ; this . version = version ; } @Override public String getGroup ( ) { return group ; } @Override public String getName ( ) { return name ; } @Override @Nullable public String getVersion ( ) { return version ; } @Override public String getDisplayName ( ) { return String . format ( <str> , getGroup ( ) , getName ( ) , effectiveVersionFor ( getVersion ( ) ) ) ; } public static class Builder implements ModuleDependencySpecBuilder { private String group ; private String module ; private String version ; @Override public ModuleDependencySpecBuilder module ( String name ) { if ( name ! = null & & name . contains ( <str> ) ) { setValuesFromModuleId ( name ) ; } else { checkNotSet ( <str> , module ) ; module = name ; } return this ; } private void checkNotSet ( String name , String value ) { if ( value ! = null ) { throw new IllegalDependencyNotation ( String . format ( <str> , name ) ) ; } } private void setValuesFromModuleId ( String moduleId ) { String [ ] components = moduleId . split ( <str> ) ; if ( components . length < <int> | | components . length > <int> | | isNullOrEmpty ( components [ <int> ] ) | | isNullOrEmpty ( components [ <int> ] ) ) { throw illegalNotation ( moduleId ) ; } group ( components [ <int> ] ) . module ( components [ <int> ] ) ; if ( components . length > <int> ) { version ( components [ <int> ] ) ; } } private IllegalDependencyNotation illegalNotation ( String moduleId ) { return new IllegalDependencyNotation ( String . format ( <str> , moduleId ) ) ; } @Override public ModuleDependencySpecBuilder group ( String name ) { checkNotSet ( <str> , group ) ; group = name ; return this ; } @Override public ModuleDependencySpecBuilder version ( String range ) { checkNotSet ( <str> , version ) ; version = range ; return this ; } @Override public DependencySpec build ( ) { return new DefaultModuleDependencySpec ( group , module , version ) ; } } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } DefaultModuleDependencySpec that = ( DefaultModuleDependencySpec ) o ; return ObjectUtils . equals ( group , that . group ) & & ObjectUtils . equals ( name , that . name ) & & ObjectUtils . equals ( version , that . version ) ; } @Override public int hashCode ( ) { int result = ObjectUtils . hashCode ( group ) ; result = <int> * result + ObjectUtils . hashCode ( name ) ; result = <int> * result + ObjectUtils . hashCode ( version ) ; return result ; } } 

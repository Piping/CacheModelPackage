package com . google . common . io ; import static org . easymock . EasyMock . createStrictMock ; import static org . easymock . EasyMock . expectLastCall ; import static org . easymock . EasyMock . replay ; import static org . easymock . EasyMock . reset ; import static org . easymock . EasyMock . verify ; import junit . framework . TestCase ; import java . io . Flushable ; import java . io . IOException ; public class FlushablesTest extends TestCase { private Flushable mockFlushable ; public void testFlush_clean ( ) throws IOException { setupFlushable ( false ) ; doFlush ( mockFlushable , false , false ) ; setupFlushable ( false ) ; doFlush ( mockFlushable , true , false ) ; } public void testFlush_flushableWithEatenException ( ) throws IOException { setupFlushable ( true ) ; doFlush ( mockFlushable , true , false ) ; } public void testFlush_flushableWithThrownException ( ) throws IOException { setupFlushable ( true ) ; doFlush ( mockFlushable , false , true ) ; } public void testFlushQuietly_flushableWithEatenException ( ) throws IOException { setupFlushable ( true ) ; Flushables . flushQuietly ( mockFlushable ) ; } @Override protected void setUp ( ) throws Exception { mockFlushable = createStrictMock ( Flushable . class ) ; } private void expectThrown ( ) { expectLastCall ( ) . andThrow ( new IOException ( <str> + <str> ) ) ; } private void setupFlushable ( boolean shouldThrowOnFlush ) throws IOException { reset ( mockFlushable ) ; mockFlushable . flush ( ) ; if ( shouldThrowOnFlush ) { expectThrown ( ) ; } replay ( mockFlushable ) ; } private void doFlush ( Flushable flushable , boolean swallowException , boolean expectThrown ) { try { Flushables . flush ( flushable , swallowException ) ; if ( expectThrown ) { fail ( <str> ) ; } } catch ( IOException e ) { if ( ! expectThrown ) { fail ( <str> ) ; } } verify ( flushable ) ; } } 

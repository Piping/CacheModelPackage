package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Graphics . DisplayMode ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; public class FullscreenTest extends GdxTest { SpriteBatch batch ; Texture tex ; boolean fullscreen = false ; BitmapFont font ; @Override public void create ( ) { batch = new SpriteBatch ( ) ; font = new BitmapFont ( ) ; tex = new Texture ( Gdx . files . internal ( <str> ) ) ; DisplayMode [ ] modes = Gdx . graphics . getDisplayModes ( ) ; for ( DisplayMode mode : modes ) { System . out . println ( mode ) ; } Gdx . app . log ( <str> , Gdx . graphics . getBufferFormat ( ) . toString ( ) ) ; } @Override public void resume ( ) { } @Override public void render ( ) { Gdx . gl . glClearColor ( <int> , <int> , <int> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; batch . draw ( tex , Gdx . input . getX ( ) , Gdx . graphics . getHeight ( ) - Gdx . input . getY ( ) ) ; font . draw ( batch , <str> + Gdx . graphics . getWidth ( ) + <str> + Gdx . graphics . getHeight ( ) , <int> , <int> ) ; batch . end ( ) ; if ( Gdx . input . justTouched ( ) ) { if ( fullscreen ) { Gdx . graphics . setDisplayMode ( <int> , <int> , false ) ; batch . getProjectionMatrix ( ) . setToOrtho2D ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; fullscreen = false ; } else { DisplayMode m = null ; for ( DisplayMode mode : Gdx . graphics . getDisplayModes ( ) ) { if ( m = = null ) { m = mode ; } else { if ( m . width < mode . width ) { m = mode ; } } } Gdx . graphics . setDisplayMode ( m ) ; batch . getProjectionMatrix ( ) . setToOrtho2D ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; fullscreen = true ; } } } @Override public void resize ( int width , int height ) { Gdx . app . log ( <str> , <str> + width + <str> + height ) ; Gdx . gl . glViewport ( <int> , <int> , width , height ) ; } @Override public void pause ( ) { Gdx . app . log ( <str> , <str> ) ; } @Override public void dispose ( ) { Gdx . app . log ( <str> , <str> ) ; } } 

package org . elasticsearch . messy . tests ; import org . apache . lucene . util . GeoHashUtils ; import org . elasticsearch . Version ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . geo . GeoDistance ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . index . query . GeoDistanceQueryBuilder ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . search . sort . SortBuilders ; import org . elasticsearch . search . sort . SortOrder ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . VersionUtils ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . geoDistanceQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoDistanceRangeQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFirstHit ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertOrderedSearchHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . hasId ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . closeTo ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; public class GeoDistanceTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } public void testSimpleDistance ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_2_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; XContentBuilder xContentBuilder = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) ; if ( version . before ( Version . V_2_2_0 ) ) { xContentBuilder . field ( <str> , true ) ; } xContentBuilder . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , xContentBuilder ) ) ; ensureGreen ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <int> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceQuery ( <str> ) . distance ( <str> ) . point ( <float> , - <float> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceQuery ( <str> ) . distance ( <str> ) . point ( <float> , - <float> ) . optimizeBbox ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceQuery ( <str> ) . distance ( <str> ) . geoDistance ( GeoDistance . PLANE ) . point ( <float> , - <float> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceQuery ( <str> ) . distance ( <str> ) . point ( <float> , - <float> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceQuery ( <str> ) . distance ( <str> ) . point ( <float> , - <float> ) . optimizeBbox ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceQuery ( <str> ) . distance ( <str> ) . point ( <float> , - <float> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceQuery ( <str> ) . distance ( <str> ) . point ( <float> , - <float> ) . optimizeBbox ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceRangeQuery ( <str> , <float> , - <float> ) . from ( <str> ) . to ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceRangeQuery ( <str> , <float> , - <float> ) . from ( <str> ) . to ( <str> ) . optimizeBbox ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceRangeQuery ( <str> , <float> , - <float> ) . to ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( geoDistanceRangeQuery ( <str> , <float> , - <float> ) . from ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . ASC ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . DESC ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; } public void testDistanceSortingMVFields ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_2_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; XContentBuilder xContentBuilder = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) ; if ( version . before ( Version . V_2_2_0 ) ) { xContentBuilder . field ( <str> , true ) . field ( <str> , true ) ; } xContentBuilder . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , xContentBuilder ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , <float> ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . startObject ( ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endArray ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . startObject ( ) . field ( <str> , <float> ) . field ( <str> , - <int> ) . endObject ( ) . endArray ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . startObject ( ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endArray ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . ASC ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . ASC ) . sortMode ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . DESC ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . DESC ) . sortMode ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . sortMode ( <str> ) . order ( SortOrder . ASC ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <int> d , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <int> d , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <int> d , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . sortMode ( <str> ) . order ( SortOrder . DESC ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertFailures ( client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . sortMode ( <str> ) ) , RestStatus . BAD_REQUEST , containsString ( <str> ) ) ; } public void testDistanceSortingWithMissingGeoPoint ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_2_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; XContentBuilder xContentBuilder = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) ; if ( version . before ( Version . V_2_2_0 ) ) { xContentBuilder . field ( <str> , true ) ; } xContentBuilder . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , xContentBuilder ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . startObject ( ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endArray ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> , <str> ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . ASC ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , equalTo ( Double . MAX_VALUE ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . DESC ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , equalTo ( Double . MAX_VALUE ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <int> d , <int> d ) ) ; } public void testDistanceScript ( ) throws Exception { double source_lat = <float> ; double source_long = - <float> ; double target_lat = <float> ; double target_long = - <float> ; Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_2_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; XContentBuilder xContentBuilder = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) ; if ( version . before ( Version . V_2_2_0 ) ) { xContentBuilder . field ( <str> , true ) ; } xContentBuilder . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , xContentBuilder ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , source_lat ) . field ( <str> , source_long ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; refresh ( ) ; SearchResponse searchResponse1 = client ( ) . prepareSearch ( ) . addField ( <str> ) . addScriptField ( <str> , new Script ( <str> + target_lat + <str> + target_long + <str> ) ) . execute ( ) . actionGet ( ) ; Double resultDistance1 = searchResponse1 . getHits ( ) . getHits ( ) [ <int> ] . getFields ( ) . get ( <str> ) . getValue ( ) ; assertThat ( resultDistance1 , closeTo ( GeoDistance . ARC . calculate ( source_lat , source_long , target_lat , target_long , DistanceUnit . DEFAULT ) , <float> ) ) ; SearchResponse searchResponse2 = client ( ) . prepareSearch ( ) . addField ( <str> ) . addScriptField ( <str> , new Script ( <str> + target_lat + <str> + target_long + <str> ) ) . execute ( ) . actionGet ( ) ; Double resultDistance2 = searchResponse2 . getHits ( ) . getHits ( ) [ <int> ] . getFields ( ) . get ( <str> ) . getValue ( ) ; assertThat ( resultDistance2 , closeTo ( GeoDistance . PLANE . calculate ( source_lat , source_long , target_lat , target_long , DistanceUnit . DEFAULT ) , <float> ) ) ; SearchResponse searchResponse3 = client ( ) . prepareSearch ( ) . addField ( <str> ) . addScriptField ( <str> , new Script ( <str> + target_lat + <str> + target_long + <str> ) ) . execute ( ) . actionGet ( ) ; Double resultArcDistance3 = searchResponse3 . getHits ( ) . getHits ( ) [ <int> ] . getFields ( ) . get ( <str> ) . getValue ( ) ; assertThat ( resultArcDistance3 , closeTo ( GeoDistance . ARC . calculate ( source_lat , source_long , target_lat , target_long , DistanceUnit . KILOMETERS ) , <float> ) ) ; SearchResponse searchResponse4 = client ( ) . prepareSearch ( ) . addField ( <str> ) . addScriptField ( <str> , new Script ( <str> + target_lat + <str> + target_long + <str> ) ) . execute ( ) . actionGet ( ) ; Double resultDistance4 = searchResponse4 . getHits ( ) . getHits ( ) [ <int> ] . getFields ( ) . get ( <str> ) . getValue ( ) ; assertThat ( resultDistance4 , closeTo ( GeoDistance . PLANE . calculate ( source_lat , source_long , target_lat , target_long , DistanceUnit . KILOMETERS ) , <float> ) ) ; SearchResponse searchResponse5 = client ( ) . prepareSearch ( ) . addField ( <str> ) . addScriptField ( <str> , new Script ( <str> + ( target_lat ) + <str> + ( target_long + <int> ) + <str> ) ) . execute ( ) . actionGet ( ) ; Double resultArcDistance5 = searchResponse5 . getHits ( ) . getHits ( ) [ <int> ] . getFields ( ) . get ( <str> ) . getValue ( ) ; assertThat ( resultArcDistance5 , closeTo ( GeoDistance . ARC . calculate ( source_lat , source_long , target_lat , target_long , DistanceUnit . KILOMETERS ) , <float> ) ) ; SearchResponse searchResponse6 = client ( ) . prepareSearch ( ) . addField ( <str> ) . addScriptField ( <str> , new Script ( <str> + ( target_lat + <int> ) + <str> + ( target_long ) + <str> ) ) . execute ( ) . actionGet ( ) ; Double resultArcDistance6 = searchResponse6 . getHits ( ) . getHits ( ) [ <int> ] . getFields ( ) . get ( <str> ) . getValue ( ) ; assertThat ( resultArcDistance6 , closeTo ( GeoDistance . ARC . calculate ( source_lat , source_long , target_lat , target_long , DistanceUnit . KILOMETERS ) , <float> ) ) ; SearchResponse searchResponse7 = client ( ) . prepareSearch ( ) . addField ( <str> ) . addScriptField ( <str> , new Script ( <str> + target_lat + <str> + target_long + <str> ) ) . execute ( ) . actionGet ( ) ; Double resultDistance7 = searchResponse7 . getHits ( ) . getHits ( ) [ <int> ] . getFields ( ) . get ( <str> ) . getValue ( ) ; assertThat ( resultDistance7 , closeTo ( GeoDistance . ARC . calculate ( source_lat , source_long , target_lat , target_long , DistanceUnit . MILES ) , <float> ) ) ; SearchResponse searchResponse8 = client ( ) . prepareSearch ( ) . addField ( <str> ) . addScriptField ( <str> , new Script ( <str> + target_lat + <str> + target_long + <str> ) ) . execute ( ) . actionGet ( ) ; Double resultDistance8 = searchResponse8 . getHits ( ) . getHits ( ) [ <int> ] . getFields ( ) . get ( <str> ) . getValue ( ) ; assertThat ( resultDistance8 , closeTo ( GeoDistance . PLANE . calculate ( source_lat , source_long , target_lat , target_long , DistanceUnit . MILES ) , <float> ) ) ; } public void testDistanceSortingNestedFields ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_2_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; XContentBuilder xContentBuilder = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) ; if ( version . before ( Version . V_2_2_0 ) ) { xContentBuilder . field ( <str> , true ) ; } xContentBuilder . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , xContentBuilder ) ) ; ensureGreen ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) . endArray ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) . endArray ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <int> ) . endObject ( ) . endObject ( ) . endArray ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) . endArray ( ) . endObject ( ) ) ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . ASC ) . setNestedPath ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . ASC ) . sortMode ( <str> ) . setNestedPath ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . DESC ) . setNestedPath ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . order ( SortOrder . DESC ) . sortMode ( <str> ) . setNestedPath ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . sortMode ( <str> ) . order ( SortOrder . ASC ) . setNestedPath ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . setNestedPath ( <str> ) . point ( <float> , - <float> ) . sortMode ( <str> ) . order ( SortOrder . DESC ) . setNestedPath ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertOrderedSearchHits ( searchResponse , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . setNestedFilter ( termQuery ( <str> , <str> ) ) . point ( <float> , - <float> ) . sortMode ( <str> ) . order ( SortOrder . ASC ) . setNestedPath ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSearchHits ( searchResponse , <str> , <str> , <str> , <str> ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , closeTo ( <float> , <int> d ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , equalTo ( Double . MAX_VALUE ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , equalTo ( Double . MAX_VALUE ) ) ; assertThat ( ( ( Number ) searchResponse . getHits ( ) . getAt ( <int> ) . sortValues ( ) [ <int> ] ) . doubleValue ( ) , equalTo ( Double . MAX_VALUE ) ) ; assertFailures ( client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . addSort ( SortBuilders . geoDistanceSort ( <str> ) . point ( <float> , - <float> ) . sortMode ( <str> ) . setNestedPath ( <str> ) ) , RestStatus . BAD_REQUEST , containsString ( <str> ) ) ; } public void testGeoDistanceFilter ( ) throws IOException { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_2_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; double lat = <float> ; double lon = - <float> ; XContentBuilder mapping = JsonXContent . contentBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) ; if ( version . before ( Version . V_2_2_0 ) ) { mapping . field ( <str> , true ) ; } mapping . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; XContentBuilder source = JsonXContent . contentBuilder ( ) . startObject ( ) . field ( <str> , GeoHashUtils . stringEncode ( lon , lat ) ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , mapping ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setCreate ( true ) . setSource ( source ) . execute ( ) . actionGet ( ) ; refresh ( ) ; client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; SearchResponse result = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPostFilter ( QueryBuilders . geoDistanceQuery ( <str> ) . geoDistance ( GeoDistance . ARC ) . point ( lat , lon ) . distance ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( result , <int> ) ; } private double randomLon ( ) { return randomDouble ( ) * <int> - <int> ; } private double randomLat ( ) { return randomDouble ( ) * <int> - <int> ; } public void testDuelOptimizations ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_2_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; if ( version . before ( Version . V_2_2_0 ) ) { assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , <str> , <str> ) ) ; } else { assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , <str> , <str> ) ) ; } final int numDocs = scaledRandomIntBetween ( <int> , <int> ) ; List < IndexRequestBuilder > docs = new ArrayList < > ( ) ; for ( int i = <int> ; i < numDocs ; + + i ) { docs . add ( client ( ) . prepareIndex ( <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , randomLat ( ) ) . field ( <str> , randomLon ( ) ) . endObject ( ) . endObject ( ) ) ) ; } indexRandom ( true , docs ) ; ensureSearchable ( ) ; for ( int i = <int> ; i < <int> ; + + i ) { final double originLat = randomLat ( ) ; final double originLon = randomLon ( ) ; final String distance = DistanceUnit . KILOMETERS . toString ( randomIntBetween ( <int> , <int> ) ) ; for ( GeoDistance geoDistance : Arrays . asList ( GeoDistance . ARC , GeoDistance . SLOPPY_ARC ) ) { logger . info ( <str> , geoDistance , distance , originLat , originLon ) ; GeoDistanceQueryBuilder qb = QueryBuilders . geoDistanceQuery ( <str> ) . point ( originLat , originLon ) . distance ( distance ) . geoDistance ( geoDistance ) ; long matches ; if ( version . before ( Version . V_2_2_0 ) ) { for ( String optimizeBbox : Arrays . asList ( <str> , <str> , <str> ) ) { qb . optimizeBbox ( optimizeBbox ) ; SearchResponse resp = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setQuery ( QueryBuilders . constantScoreQuery ( qb ) ) . execute ( ) . actionGet ( ) ; matches = assertDuelOptimization ( resp ) ; logger . info ( <str> , optimizeBbox , matches ) ; } } else { SearchResponse resp = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setQuery ( QueryBuilders . constantScoreQuery ( qb ) ) . execute ( ) . actionGet ( ) ; matches = assertDuelOptimization ( resp ) ; logger . info ( <str> , matches ) ; } } } } private long assertDuelOptimization ( SearchResponse resp ) { long matches = - <int> ; assertSearchResponse ( resp ) ; if ( matches < <int> ) { matches = resp . getHits ( ) . totalHits ( ) ; } else { assertEquals ( matches , matches = resp . getHits ( ) . totalHits ( ) ) ; } return matches ; } } 

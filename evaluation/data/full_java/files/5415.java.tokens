package org . elasticsearch . action . support . broadcast ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . OriginalIndices ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . transport . TransportRequest ; import java . io . IOException ; public abstract class BroadcastShardRequest extends TransportRequest implements IndicesRequest { private ShardId shardId ; protected OriginalIndices originalIndices ; public BroadcastShardRequest ( ) { } protected BroadcastShardRequest ( ShardId shardId , BroadcastRequest request ) { super ( request ) ; this . shardId = shardId ; this . originalIndices = new OriginalIndices ( request ) ; } protected BroadcastShardRequest ( ShardId shardId , OriginalIndices originalIndices ) { this . shardId = shardId ; this . originalIndices = originalIndices ; } public ShardId shardId ( ) { return this . shardId ; } @Override public String [ ] indices ( ) { return originalIndices . indices ( ) ; } @Override public IndicesOptions indicesOptions ( ) { return originalIndices . indicesOptions ( ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; shardId = ShardId . readShardId ( in ) ; originalIndices = OriginalIndices . readOriginalIndices ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; shardId . writeTo ( out ) ; OriginalIndices . writeOriginalIndices ( originalIndices , out ) ; } } 

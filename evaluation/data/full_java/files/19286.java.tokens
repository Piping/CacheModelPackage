package io . netty . handler . codec . http . cookie ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertNotNull ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertTrue ; import io . netty . handler . codec . http . HttpHeaderDateFormat ; import java . text . ParseException ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import org . junit . Test ; public class ServerCookieEncoderTest { @Test public void testEncodingSingleCookieV0 ( ) throws ParseException { int maxAge = <int> ; String result = <str> ; Cookie cookie = new DefaultCookie ( <str> , <str> ) ; cookie . setDomain ( <str> ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( <str> ) ; cookie . setSecure ( true ) ; String encodedCookie = ServerCookieEncoder . STRICT . encode ( cookie ) ; Matcher matcher = Pattern . compile ( result ) . matcher ( encodedCookie ) ; assertTrue ( matcher . find ( ) ) ; Date expiresDate = HttpHeaderDateFormat . get ( ) . parse ( matcher . group ( <int> ) ) ; long diff = ( expiresDate . getTime ( ) - System . currentTimeMillis ( ) ) / <int> ; assertTrue ( Math . abs ( diff - maxAge ) < = <int> ) ; } @Test public void testEncodingWithNoCookies ( ) { String encodedCookie1 = ClientCookieEncoder . STRICT . encode ( ) ; List < String > encodedCookie2 = ServerCookieEncoder . STRICT . encode ( ) ; assertNull ( encodedCookie1 ) ; assertNotNull ( encodedCookie2 ) ; assertTrue ( encodedCookie2 . isEmpty ( ) ) ; } @Test public void testEncodingMultipleCookiesStrict ( ) { List < String > result = new ArrayList < String > ( ) ; result . add ( <str> ) ; result . add ( <str> ) ; Cookie cookie1 = new DefaultCookie ( <str> , <str> ) ; Cookie cookie2 = new DefaultCookie ( <str> , <str> ) ; Cookie cookie3 = new DefaultCookie ( <str> , <str> ) ; List < String > encodedCookies = ServerCookieEncoder . STRICT . encode ( cookie1 , cookie2 , cookie3 ) ; assertEquals ( result , encodedCookies ) ; } @Test public void testEncodingMultipleCookiesLax ( ) { List < String > result = new ArrayList < String > ( ) ; result . add ( <str> ) ; result . add ( <str> ) ; result . add ( <str> ) ; Cookie cookie1 = new DefaultCookie ( <str> , <str> ) ; Cookie cookie2 = new DefaultCookie ( <str> , <str> ) ; Cookie cookie3 = new DefaultCookie ( <str> , <str> ) ; List < String > encodedCookies = ServerCookieEncoder . LAX . encode ( cookie1 , cookie2 , cookie3 ) ; assertEquals ( result , encodedCookies ) ; } } 

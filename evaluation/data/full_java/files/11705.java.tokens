package org . gradle . api . internal . tasks . execution ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . tasks . TaskExecuter ; import org . gradle . api . internal . tasks . TaskExecutionContext ; import org . gradle . api . internal . tasks . TaskStateInternal ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; public class ExecuteAtMostOnceTaskExecuter implements TaskExecuter { private static final Logger LOGGER = Logging . getLogger ( ExecuteAtMostOnceTaskExecuter . class ) ; private final TaskExecuter executer ; public ExecuteAtMostOnceTaskExecuter ( TaskExecuter executer ) { this . executer = executer ; } public void execute ( TaskInternal task , TaskStateInternal state , TaskExecutionContext context ) { if ( state . getExecuted ( ) ) { return ; } LOGGER . debug ( <str> , task ) ; try { executer . execute ( task , state , context ) ; } finally { state . executed ( ) ; LOGGER . debug ( <str> , task ) ; } } } 

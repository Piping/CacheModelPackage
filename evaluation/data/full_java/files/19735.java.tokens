package io . netty . util . internal . chmv8 ; import io . netty . util . internal . LongCounter ; import java . io . IOException ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import java . io . Serializable ; import java . util . concurrent . atomic . AtomicLong ; @SuppressWarnings ( <str> ) public class LongAdderV8 extends Striped64 implements Serializable , LongCounter { private static final long serialVersionUID = <int> ; final long fn ( long v , long x ) { return v + x ; } public LongAdderV8 ( ) { } public void add ( long x ) { Cell [ ] as ; long b , v ; int [ ] hc ; Cell a ; int n ; if ( ( as = cells ) ! = null | | ! casBase ( b = base , b + x ) ) { boolean uncontended = true ; if ( ( hc = threadHashCode . get ( ) ) = = null | | as = = null | | ( n = as . length ) < <int> | | ( a = as [ ( n - <int> ) & hc [ <int> ] ] ) = = null | | ! ( uncontended = a . cas ( v = a . value , v + x ) ) ) retryUpdate ( x , hc , uncontended ) ; } } public void increment ( ) { add ( <int> ) ; } public void decrement ( ) { add ( - <int> ) ; } public long sum ( ) { long sum = base ; Cell [ ] as = cells ; if ( as ! = null ) { int n = as . length ; for ( int i = <int> ; i < n ; + + i ) { Cell a = as [ i ] ; if ( a ! = null ) sum + = a . value ; } } return sum ; } public void reset ( ) { internalReset ( <int> L ) ; } public long sumThenReset ( ) { long sum = base ; Cell [ ] as = cells ; base = <int> L ; if ( as ! = null ) { int n = as . length ; for ( int i = <int> ; i < n ; + + i ) { Cell a = as [ i ] ; if ( a ! = null ) { sum + = a . value ; a . value = <int> L ; } } } return sum ; } public String toString ( ) { return Long . toString ( sum ( ) ) ; } public long longValue ( ) { return sum ( ) ; } public int intValue ( ) { return ( int ) sum ( ) ; } public float floatValue ( ) { return ( float ) sum ( ) ; } public double doubleValue ( ) { return ( double ) sum ( ) ; } private void writeObject ( ObjectOutputStream s ) throws IOException { s . defaultWriteObject ( ) ; s . writeLong ( sum ( ) ) ; } private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; busy = <int> ; cells = null ; base = s . readLong ( ) ; } @Override public long value ( ) { return sum ( ) ; } } 

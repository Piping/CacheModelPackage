package org . gradle . api . internal . tasks . options ; import org . gradle . internal . reflect . JavaMethod ; import org . gradle . util . CollectionUtils ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; public class InstanceOptionDescriptor implements OptionDescriptor { private final Object object ; private final OptionElement optionElement ; private final JavaMethod < Object , Collection > optionValueMethod ; InstanceOptionDescriptor ( Object object , OptionElement optionElement ) { this ( object , optionElement , null ) ; } public InstanceOptionDescriptor ( Object object , OptionElement optionElement , JavaMethod < Object , Collection > optionValueMethod ) { this . object = object ; this . optionElement = optionElement ; this . optionValueMethod = optionValueMethod ; } public OptionElement getOptionElement ( ) { return optionElement ; } public String getName ( ) { return optionElement . getOptionName ( ) ; } public List < String > getAvailableValues ( ) { final List < String > values = optionElement . getAvailableValues ( ) ; if ( getArgumentType ( ) . isAssignableFrom ( String . class ) ) { values . addAll ( readDynamicAvailableValues ( ) ) ; } return values ; } public Class < ? > getArgumentType ( ) { return optionElement . getOptionType ( ) ; } private List < String > readDynamicAvailableValues ( ) { if ( optionValueMethod ! = null ) { Collection values = optionValueMethod . invoke ( object ) ; return CollectionUtils . toStringList ( values ) ; } return Collections . emptyList ( ) ; } public String getDescription ( ) { return optionElement . getDescription ( ) ; } public void apply ( Object objectParam , List < String > parameterValues ) { if ( objectParam ! = object ) { throw new AssertionError ( String . format ( <str> , objectParam , object ) ) ; } optionElement . apply ( objectParam , parameterValues ) ; } public int compareTo ( OptionDescriptor o ) { return getName ( ) . compareTo ( o . getName ( ) ) ; } } 

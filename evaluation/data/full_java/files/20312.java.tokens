package io . netty . channel . socket . nio ; import io . netty . channel . ChannelException ; import io . netty . channel . ChannelMetadata ; import io . netty . channel . ChannelOutboundBuffer ; import io . netty . channel . nio . AbstractNioMessageChannel ; import io . netty . channel . socket . DefaultServerSocketChannelConfig ; import io . netty . channel . socket . ServerSocketChannelConfig ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import java . io . IOException ; import java . net . InetSocketAddress ; import java . net . ServerSocket ; import java . net . SocketAddress ; import java . nio . channels . SelectionKey ; import java . nio . channels . ServerSocketChannel ; import java . nio . channels . SocketChannel ; import java . nio . channels . spi . SelectorProvider ; import java . util . List ; public class NioServerSocketChannel extends AbstractNioMessageChannel implements io . netty . channel . socket . ServerSocketChannel { private static final ChannelMetadata METADATA = new ChannelMetadata ( false , <int> ) ; private static final SelectorProvider DEFAULT_SELECTOR_PROVIDER = SelectorProvider . provider ( ) ; private static final InternalLogger logger = InternalLoggerFactory . getInstance ( NioServerSocketChannel . class ) ; private static ServerSocketChannel newSocket ( SelectorProvider provider ) { try { return provider . openServerSocketChannel ( ) ; } catch ( IOException e ) { throw new ChannelException ( <str> , e ) ; } } private final ServerSocketChannelConfig config ; public NioServerSocketChannel ( ) { this ( newSocket ( DEFAULT_SELECTOR_PROVIDER ) ) ; } public NioServerSocketChannel ( SelectorProvider provider ) { this ( newSocket ( provider ) ) ; } public NioServerSocketChannel ( ServerSocketChannel channel ) { super ( null , channel , SelectionKey . OP_ACCEPT ) ; config = new NioServerSocketChannelConfig ( this , javaChannel ( ) . socket ( ) ) ; } @Override public InetSocketAddress localAddress ( ) { return ( InetSocketAddress ) super . localAddress ( ) ; } @Override public ChannelMetadata metadata ( ) { return METADATA ; } @Override public ServerSocketChannelConfig config ( ) { return config ; } @Override public boolean isActive ( ) { return javaChannel ( ) . socket ( ) . isBound ( ) ; } @Override public InetSocketAddress remoteAddress ( ) { return null ; } @Override protected ServerSocketChannel javaChannel ( ) { return ( ServerSocketChannel ) super . javaChannel ( ) ; } @Override protected SocketAddress localAddress0 ( ) { return javaChannel ( ) . socket ( ) . getLocalSocketAddress ( ) ; } @Override protected void doBind ( SocketAddress localAddress ) throws Exception { javaChannel ( ) . socket ( ) . bind ( localAddress , config . getBacklog ( ) ) ; } @Override protected void doClose ( ) throws Exception { javaChannel ( ) . close ( ) ; } @Override protected int doReadMessages ( List < Object > buf ) throws Exception { SocketChannel ch = javaChannel ( ) . accept ( ) ; try { if ( ch ! = null ) { buf . add ( new NioSocketChannel ( this , ch ) ) ; return <int> ; } } catch ( Throwable t ) { logger . warn ( <str> , t ) ; try { ch . close ( ) ; } catch ( Throwable t2 ) { logger . warn ( <str> , t2 ) ; } } return <int> ; } @Override protected boolean doConnect ( SocketAddress remoteAddress , SocketAddress localAddress ) throws Exception { throw new UnsupportedOperationException ( ) ; } @Override protected void doFinishConnect ( ) throws Exception { throw new UnsupportedOperationException ( ) ; } @Override protected SocketAddress remoteAddress0 ( ) { return null ; } @Override protected void doDisconnect ( ) throws Exception { throw new UnsupportedOperationException ( ) ; } @Override protected boolean doWriteMessage ( Object msg , ChannelOutboundBuffer in ) throws Exception { throw new UnsupportedOperationException ( ) ; } @Override protected final Object filterOutboundMessage ( Object msg ) throws Exception { throw new UnsupportedOperationException ( ) ; } private final class NioServerSocketChannelConfig extends DefaultServerSocketChannelConfig { private NioServerSocketChannelConfig ( NioServerSocketChannel channel , ServerSocket javaSocket ) { super ( channel , javaSocket ) ; } @Override protected void autoReadCleared ( ) { setReadPending ( false ) ; } } } 

package org . nd4j . linalg . dataset ; import org . apache . commons . io . IOUtils ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . io . ClassPathResource ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; public class IrisUtils { public static List < DataSet > loadIris ( int from , int to ) throws IOException { ClassPathResource resource = new ClassPathResource ( <str> , IrisUtils . class . getClassLoader ( ) ) ; @SuppressWarnings ( <str> ) List < String > lines = IOUtils . readLines ( resource . getInputStream ( ) ) ; List < DataSet > list = new ArrayList < > ( ) ; INDArray ret = Nd4j . ones ( Math . abs ( to - from ) , <int> ) ; double [ ] [ ] outcomes = new double [ lines . size ( ) ] [ <int> ] ; int putCount = <int> ; for ( int i = from ; i < to ; i + + ) { String line = lines . get ( i ) ; String [ ] split = line . split ( <str> ) ; addRow ( ret , putCount + + , split ) ; String outcome = split [ split . length - <int> ] ; double [ ] rowOutcome = new double [ <int> ] ; rowOutcome [ Integer . parseInt ( outcome ) ] = <int> ; outcomes [ i ] = rowOutcome ; } for ( int i = <int> ; i < ret . rows ( ) ; i + + ) list . add ( new DataSet ( ret . getRow ( i ) , Nd4j . create ( outcomes [ from + i ] ) ) ) ; return list ; } private static void addRow ( INDArray ret , int row , String [ ] line ) { double [ ] vector = new double [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) vector [ i ] = Double . parseDouble ( line [ i ] ) ; ret . putRow ( row , Nd4j . create ( vector ) ) ; } } 

package org . gradle . api . internal . artifacts . repositories . resolver ; import org . gradle . api . Nullable ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . MetaDataParser ; import org . gradle . internal . component . external . model . DefaultMavenModuleResolveMetaData ; import org . gradle . internal . component . external . model . MavenModuleResolveMetaData ; import org . gradle . internal . component . external . model . ModuleComponentArtifactMetaData ; import org . gradle . internal . component . external . model . MutableModuleComponentResolveMetaData ; import org . gradle . internal . resolve . result . DefaultResourceAwareResolveResult ; import org . gradle . internal . resolve . result . ResourceAwareResolveResult ; import org . gradle . api . internal . artifacts . repositories . transport . RepositoryTransport ; import org . gradle . internal . resource . local . FileStore ; import org . gradle . internal . resource . local . LocallyAvailableResourceFinder ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . net . URI ; public class MavenLocalResolver extends MavenResolver { private static final Logger LOGGER = LoggerFactory . getLogger ( MavenResolver . class ) ; public MavenLocalResolver ( String name , URI rootUri , RepositoryTransport transport , LocallyAvailableResourceFinder < ModuleComponentArtifactMetaData > locallyAvailableResourceFinder , FileStore < ModuleComponentArtifactMetaData > artifactFileStore , MetaDataParser < DefaultMavenModuleResolveMetaData > pomParser ) { super ( name , rootUri , transport , locallyAvailableResourceFinder , artifactFileStore , pomParser ) ; } @Override @Nullable protected MutableModuleComponentResolveMetaData parseMetaDataFromArtifact ( ModuleComponentIdentifier moduleComponentIdentifier , ExternalResourceArtifactResolver artifactResolver , ResourceAwareResolveResult result ) { MutableModuleComponentResolveMetaData metaData = super . parseMetaDataFromArtifact ( moduleComponentIdentifier , artifactResolver , result ) ; if ( metaData = = null ) { return null ; } if ( isOrphanedPom ( mavenMetaData ( metaData ) , artifactResolver ) ) { return null ; } return metaData ; } private boolean isOrphanedPom ( MavenModuleResolveMetaData metaData , ExternalResourceArtifactResolver artifactResolver ) { if ( metaData . isPomPackaging ( ) ) { return false ; } ModuleComponentArtifactMetaData artifact ; if ( metaData . isKnownJarPackaging ( ) ) { artifact = metaData . artifact ( <str> , <str> , null ) ; } else { artifact = metaData . artifact ( metaData . getPackaging ( ) , metaData . getPackaging ( ) , null ) ; } if ( artifactResolver . artifactExists ( artifact , new DefaultResourceAwareResolveResult ( ) ) ) { return false ; } LOGGER . debug ( <str> , metaData . getId ( ) , getName ( ) ) ; return true ; } } 

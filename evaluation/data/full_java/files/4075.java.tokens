package org . eclipse . debug . internal . ui . actions . breakpoints ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . actions . ActionMessages ; import org . eclipse . debug . ui . actions . RulerBreakpointAction ; import org . eclipse . jface . text . source . IVerticalRulerInfo ; import org . eclipse . swt . SWT ; import org . eclipse . ui . texteditor . ITextEditor ; import org . eclipse . ui . texteditor . IUpdate ; public class RulerEnableDisableBreakpointAction extends RulerBreakpointAction implements IUpdate { private IBreakpoint fBreakpoint ; public RulerEnableDisableBreakpointAction ( ITextEditor editor , IVerticalRulerInfo info ) { super ( editor , info ) ; } @Override public void run ( ) { if ( fBreakpoint ! = null ) { try { fBreakpoint . setEnabled ( ! fBreakpoint . isEnabled ( ) ) ; } catch ( CoreException e ) { DebugUIPlugin . errorDialog ( getEditor ( ) . getSite ( ) . getShell ( ) , ActionMessages . RulerEnableDisableBreakpointAction_0 , ActionMessages . RulerEnableDisableBreakpointAction_1 , e . getStatus ( ) ) ; } } } @Override public void update ( ) { fBreakpoint = getBreakpoint ( ) ; setEnabled ( fBreakpoint ! = null ) ; String accelerator = DebugUIPlugin . formatKeyBindingString ( SWT . MOD2 , ActionMessages . RulerEnableDisableBreakpointAction_4 ) ; if ( fBreakpoint ! = null ) { try { if ( fBreakpoint . isEnabled ( ) ) { setText ( ActionMessages . RulerEnableDisableBreakpointAction_2 + <str> + accelerator ) ; } else { setText ( ActionMessages . RulerEnableDisableBreakpointAction_3 + <str> + accelerator ) ; } } catch ( CoreException e ) { } } else { setText ( ActionMessages . RulerEnableDisableBreakpointAction_2 + <str> + accelerator ) ; } } } 

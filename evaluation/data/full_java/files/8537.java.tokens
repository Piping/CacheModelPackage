package org . elasticsearch . search . suggest ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . util . CollectionUtils ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . io . IOException ; import java . util . Collection ; import java . util . List ; import java . util . Locale ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . hamcrest . Matchers . hasSize ; import static org . hamcrest . Matchers . is ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class CustomSuggesterSearchIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( CustomSuggesterPlugin . class ) ; } public void testThatCustomSuggestersCanBeRegisteredAndWork ( ) throws Exception { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; ensureYellow ( ) ; String randomText = randomAsciiOfLength ( <int> ) ; String randomField = randomAsciiOfLength ( <int> ) ; String randomSuffix = randomAsciiOfLength ( <int> ) ; SuggestBuilder suggestBuilder = new SuggestBuilder ( ) ; suggestBuilder . addSuggestion ( new SuggestBuilder . SuggestionBuilder < SuggestBuilder . SuggestionBuilder > ( <str> , <str> ) { @Override protected XContentBuilder innerToXContent ( XContentBuilder builder , Params params ) throws IOException { builder . field ( <str> , randomField ) ; builder . field ( <str> , randomSuffix ) ; return builder ; } } . text ( randomText ) ) ; SearchRequestBuilder searchRequestBuilder = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setFrom ( <int> ) . setSize ( <int> ) . suggest ( suggestBuilder ) ; SearchResponse searchResponse = searchRequestBuilder . execute ( ) . actionGet ( ) ; List < Suggest . Suggestion . Entry < ? extends Suggest . Suggestion . Entry . Option > > suggestions = CollectionUtils . < Suggest . Suggestion . Entry < ? extends Suggest . Suggestion . Entry . Option > > iterableAsArrayList ( searchResponse . getSuggest ( ) . getSuggestion ( <str> ) ) ; assertThat ( suggestions , hasSize ( <int> ) ) ; assertThat ( suggestions . get ( <int> ) . getText ( ) . string ( ) , is ( String . format ( Locale . ROOT , <str> , randomText , randomField , randomSuffix ) ) ) ; assertThat ( suggestions . get ( <int> ) . getText ( ) . string ( ) , is ( String . format ( Locale . ROOT , <str> , randomText , randomField , randomSuffix ) ) ) ; } } 

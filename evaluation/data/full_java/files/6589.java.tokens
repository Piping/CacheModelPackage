package org . elasticsearch . index . query ; import org . apache . lucene . search . BoostQuery ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanBoostQuery ; import org . apache . lucene . search . spans . SpanQuery ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . action . support . ToXContentToBytes ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . lucene . BytesRefs ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentType ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Objects ; public abstract class AbstractQueryBuilder < QB extends AbstractQueryBuilder > extends ToXContentToBytes implements QueryBuilder < QB > { public static final float DEFAULT_BOOST = <float> ; public static final ParseField NAME_FIELD = new ParseField ( <str> ) ; public static final ParseField BOOST_FIELD = new ParseField ( <str> ) ; protected String queryName ; protected float boost = DEFAULT_BOOST ; protected AbstractQueryBuilder ( ) { super ( XContentType . JSON ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; doXContent ( builder , params ) ; builder . endObject ( ) ; return builder ; } protected abstract void doXContent ( XContentBuilder builder , Params params ) throws IOException ; protected void printBoostAndQueryName ( XContentBuilder builder ) throws IOException { builder . field ( BOOST_FIELD . getPreferredName ( ) , boost ) ; if ( queryName ! = null ) { builder . field ( NAME_FIELD . getPreferredName ( ) , queryName ) ; } } @Override public final Query toQuery ( QueryShardContext context ) throws IOException { Query query = doToQuery ( context ) ; if ( query ! = null ) { if ( boost ! = DEFAULT_BOOST ) { if ( query instanceof SpanQuery ) { query = new SpanBoostQuery ( ( SpanQuery ) query , boost ) ; } else { query = new BoostQuery ( query , boost ) ; } } if ( queryName ! = null ) { context . addNamedQuery ( queryName , query ) ; } } return query ; } @Override public final Query toFilter ( QueryShardContext context ) throws IOException { Query result = null ; final boolean originalIsFilter = context . isFilter ; try { context . isFilter = true ; result = toQuery ( context ) ; } finally { context . isFilter = originalIsFilter ; } return result ; } protected abstract Query doToQuery ( QueryShardContext context ) throws IOException ; @SuppressWarnings ( <str> ) @Override public final QB queryName ( String queryName ) { this . queryName = queryName ; return ( QB ) this ; } @Override public final String queryName ( ) { return queryName ; } @Override public final float boost ( ) { return this . boost ; } @SuppressWarnings ( <str> ) @Override public final QB boost ( float boost ) { this . boost = boost ; return ( QB ) this ; } @Override public final QB readFrom ( StreamInput in ) throws IOException { QB queryBuilder = doReadFrom ( in ) ; queryBuilder . boost = in . readFloat ( ) ; queryBuilder . queryName = in . readOptionalString ( ) ; return queryBuilder ; } protected abstract QB doReadFrom ( StreamInput in ) throws IOException ; @Override public final void writeTo ( StreamOutput out ) throws IOException { doWriteTo ( out ) ; out . writeFloat ( boost ) ; out . writeOptionalString ( queryName ) ; } protected abstract void doWriteTo ( StreamOutput out ) throws IOException ; protected final QueryValidationException addValidationError ( String validationError , QueryValidationException validationException ) { return QueryValidationException . addValidationError ( getName ( ) , validationError , validationException ) ; } @Override public final boolean equals ( Object obj ) { if ( this = = obj ) { return true ; } if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) { return false ; } @SuppressWarnings ( <str> ) QB other = ( QB ) obj ; return Objects . equals ( queryName , other . queryName ) & & Objects . equals ( boost , other . boost ) & & doEquals ( other ) ; } protected abstract boolean doEquals ( QB other ) ; @Override public final int hashCode ( ) { return Objects . hash ( getClass ( ) , queryName , boost , doHashCode ( ) ) ; } protected abstract int doHashCode ( ) ; protected static Object convertToBytesRefIfString ( Object obj ) { if ( obj instanceof String ) { return BytesRefs . toBytesRef ( obj ) ; } return obj ; } protected static Object convertToStringIfBytesRef ( Object obj ) { if ( obj instanceof BytesRef ) { return ( ( BytesRef ) obj ) . utf8ToString ( ) ; } return obj ; } protected static Collection < Query > toQueries ( Collection < QueryBuilder > queryBuilders , QueryShardContext context ) throws QueryShardException , IOException { List < Query > queries = new ArrayList < > ( queryBuilders . size ( ) ) ; for ( QueryBuilder queryBuilder : queryBuilders ) { Query query = queryBuilder . toQuery ( context ) ; if ( query ! = null ) { queries . add ( query ) ; } } return queries ; } @Override public String getName ( ) { return getWriteableName ( ) ; } protected final void writeQueries ( StreamOutput out , List < ? extends QueryBuilder > queries ) throws IOException { out . writeVInt ( queries . size ( ) ) ; for ( QueryBuilder query : queries ) { out . writeQuery ( query ) ; } } protected final List < QueryBuilder > readQueries ( StreamInput in ) throws IOException { List < QueryBuilder > queries = new ArrayList < > ( ) ; int size = in . readVInt ( ) ; for ( int i = <int> ; i < size ; i + + ) { queries . add ( in . readQuery ( ) ) ; } return queries ; } } 

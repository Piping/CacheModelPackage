package org . elasticsearch . common . lucene . search . morelikethis ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . TextField ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . store . Directory ; import org . apache . lucene . store . RAMDirectory ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . common . lucene . search . MoreLikeThisQuery ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; public class MoreLikeThisQueryTests extends ESTestCase { public void testSimple ( ) throws Exception { Directory dir = new RAMDirectory ( ) ; IndexWriter indexWriter = new IndexWriter ( dir , new IndexWriterConfig ( Lucene . STANDARD_ANALYZER ) ) ; indexWriter . commit ( ) ; Document document = new Document ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; indexWriter . addDocument ( document ) ; document = new Document ( ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; document . add ( new TextField ( <str> , <str> , Field . Store . YES ) ) ; indexWriter . addDocument ( document ) ; IndexReader reader = DirectoryReader . open ( indexWriter , true ) ; IndexSearcher searcher = new IndexSearcher ( reader ) ; MoreLikeThisQuery mltQuery = new MoreLikeThisQuery ( <str> , new String [ ] { <str> } , Lucene . STANDARD_ANALYZER ) ; mltQuery . setLikeText ( <str> ) ; mltQuery . setMinTermFrequency ( <int> ) ; mltQuery . setMinDocFreq ( <int> ) ; long count = searcher . count ( mltQuery ) ; assertThat ( count , equalTo ( <int> ) ) ; reader . close ( ) ; indexWriter . close ( ) ; } } 

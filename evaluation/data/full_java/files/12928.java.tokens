package org . gradle . api . reporting . components . internal ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . tasks . diagnostics . internal . text . TextReportBuilder ; import org . gradle . language . base . LanguageSourceSet ; import org . gradle . platform . base . BinarySpec ; import org . gradle . platform . base . ComponentSpec ; import org . gradle . reporting . ReportRenderer ; import org . gradle . util . CollectionUtils ; public class ComponentRenderer extends ReportRenderer < ComponentSpec , TextReportBuilder > { private final ReportRenderer < LanguageSourceSet , TextReportBuilder > sourceSetRenderer ; private final ReportRenderer < BinarySpec , TextReportBuilder > binaryRenderer ; public ComponentRenderer ( ReportRenderer < LanguageSourceSet , TextReportBuilder > sourceSetRenderer , ReportRenderer < BinarySpec , TextReportBuilder > binaryRenderer ) { this . sourceSetRenderer = sourceSetRenderer ; this . binaryRenderer = binaryRenderer ; } @Override public void render ( ComponentSpec component , TextReportBuilder builder ) { builder . heading ( StringUtils . capitalize ( component . getDisplayName ( ) ) ) ; builder . getOutput ( ) . println ( ) ; builder . collection ( <str> , CollectionUtils . sort ( component . getSources ( ) . values ( ) , SourceSetRenderer . SORT_ORDER ) , sourceSetRenderer , <str> ) ; builder . getOutput ( ) . println ( ) ; builder . collection ( <str> , CollectionUtils . sort ( component . getBinaries ( ) . values ( ) , TypeAwareBinaryRenderer . SORT_ORDER ) , binaryRenderer , <str> ) ; } } 

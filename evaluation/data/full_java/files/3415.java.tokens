package org . nd4j . linalg ; import org . junit . After ; import org . junit . Before ; import org . junit . Test ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . api . shape . Shape ; import java . util . Arrays ; public abstract class BaseComplexNDArrayTests extends BaseNd4jTest { public BaseComplexNDArrayTests ( ) { } public BaseComplexNDArrayTests ( Nd4jBackend backend ) { super ( backend ) ; } public BaseComplexNDArrayTests ( String name ) { super ( name ) ; } public BaseComplexNDArrayTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } @Before public void before ( ) { super . before ( ) ; } @After public void after ( ) { super . after ( ) ; } @Test public void testOtherLinearView ( ) { IComplexNDArray arr = Nd4j . complexLinSpace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; IComplexNDArray slices = arr . slice ( <int> ) ; IComplexNDArray slice1 = arr . slice ( <int> ) ; IComplexNDArray arrLinear = arr . linearView ( ) ; System . out . println ( arrLinear ) ; } @Test public void testWrap ( ) { IComplexNDArray c = Nd4j . createComplex ( Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ) ; assertEquals ( true , Arrays . equals ( new int [ ] { <int> , <int> } , c . shape ( ) ) ) ; IComplexNDArray vec = Nd4j . createComplex ( Nd4j . linspace ( <int> , <int> , <int> ) ) ; assertEquals ( true , vec . isVector ( ) ) ; assertEquals ( true , Shape . shapeEquals ( new int [ ] { <int> } , vec . shape ( ) ) ) ; } protected void verifyElements ( IComplexNDArray d , IComplexNDArray d2 ) { for ( int i = <int> ; i < d . rows ( ) ; i + + ) { for ( int j = <int> ; j < d . columns ( ) ; j + + ) { IComplexNumber test1 = d . getComplex ( i , j ) ; IComplexNumber test2 = d2 . getComplex ( i , j ) ; assertEquals ( test1 . realComponent ( ) . doubleValue ( ) , test2 . realComponent ( ) . doubleValue ( ) , <float> ) ; assertEquals ( test1 . imaginaryComponent ( ) . doubleValue ( ) , test2 . imaginaryComponent ( ) . doubleValue ( ) , <float> ) ; } } } } 

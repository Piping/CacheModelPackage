package com . google . common . base ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import junit . framework . TestCase ; @GwtCompatible public class AsciiTest extends TestCase { private static final String IGNORED = <str> ; private static final String LOWER = <str> ; private static final String UPPER = <str> ; public void testToLowerCase ( ) { assertEquals ( LOWER , Ascii . toLowerCase ( UPPER ) ) ; assertSame ( LOWER , Ascii . toLowerCase ( LOWER ) ) ; assertEquals ( IGNORED , Ascii . toLowerCase ( IGNORED ) ) ; assertEquals ( <str> , Ascii . toLowerCase ( <str> ) ) ; } public void testToUpperCase ( ) { assertEquals ( UPPER , Ascii . toUpperCase ( LOWER ) ) ; assertSame ( UPPER , Ascii . toUpperCase ( UPPER ) ) ; assertEquals ( IGNORED , Ascii . toUpperCase ( IGNORED ) ) ; assertEquals ( <str> , Ascii . toUpperCase ( <str> ) ) ; } public void testCharsIgnored ( ) { for ( char c : IGNORED . toCharArray ( ) ) { String str = String . valueOf ( c ) ; assertTrue ( str , c = = Ascii . toLowerCase ( c ) ) ; assertTrue ( str , c = = Ascii . toUpperCase ( c ) ) ; assertFalse ( str , Ascii . isLowerCase ( c ) ) ; assertFalse ( str , Ascii . isUpperCase ( c ) ) ; } } public void testCharsLower ( ) { for ( char c : LOWER . toCharArray ( ) ) { String str = String . valueOf ( c ) ; assertTrue ( str , c = = Ascii . toLowerCase ( c ) ) ; assertFalse ( str , c = = Ascii . toUpperCase ( c ) ) ; assertTrue ( str , Ascii . isLowerCase ( c ) ) ; assertFalse ( str , Ascii . isUpperCase ( c ) ) ; } } public void testCharsUpper ( ) { for ( char c : UPPER . toCharArray ( ) ) { String str = String . valueOf ( c ) ; assertFalse ( str , c = = Ascii . toLowerCase ( c ) ) ; assertTrue ( str , c = = Ascii . toUpperCase ( c ) ) ; assertFalse ( str , Ascii . isLowerCase ( c ) ) ; assertTrue ( str , Ascii . isUpperCase ( c ) ) ; } } public void testTruncate ( ) { assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; assertEquals ( <str> , Ascii . truncate ( <str> , <int> , <str> ) ) ; } public void testTruncateIllegalArguments ( ) { String truncated = null ; try { truncated = Ascii . truncate ( <str> , <int> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { truncated = Ascii . truncate ( <str> , <int> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { truncated = Ascii . truncate ( <str> , - <int> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { truncated = Ascii . truncate ( <str> , - <int> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testEqualsIgnoreCase ( ) { assertTrue ( Ascii . equalsIgnoreCase ( <str> , <str> ) ) ; assertFalse ( Ascii . equalsIgnoreCase ( <str> , <str> ) ) ; assertFalse ( Ascii . equalsIgnoreCase ( <str> , <str> ) ) ; assertTrue ( Ascii . equalsIgnoreCase ( LOWER , UPPER ) ) ; assertTrue ( Ascii . equalsIgnoreCase ( UPPER , LOWER ) ) ; assertTrue ( Ascii . equalsIgnoreCase ( new String ( IGNORED ) , new String ( IGNORED ) ) ) ; assertFalse ( Ascii . equalsIgnoreCase ( <str> , <str> ) ) ; assertFalse ( Ascii . equalsIgnoreCase ( <str> , <str> ) ) ; assertFalse ( Ascii . equalsIgnoreCase ( <str> , <str> ) ) ; } @GwtIncompatible ( <str> ) public void testEqualsIgnoreCaseUnicodeEquivalence ( ) { assertEquals ( <str> . toUpperCase ( ) , <str> ) ; assertFalse ( <str> . equalsIgnoreCase ( <str> ) ) ; assertFalse ( Ascii . equalsIgnoreCase ( <str> , <str> ) ) ; } } 

package org . gradle . performance . results ; import com . googlecode . jatl . Html ; import org . gradle . api . Transformer ; import org . gradle . performance . fixture . MeasuredOperationList ; import org . gradle . performance . measure . Amount ; import org . gradle . performance . measure . DataSeries ; import org . gradle . reporting . ReportRenderer ; import org . gradle . util . GradleVersion ; import java . io . Writer ; import java . util . ArrayList ; import java . util . List ; public abstract class HtmlPageGenerator < T > extends ReportRenderer < T , Writer > { protected final FormatSupport format = new FormatSupport ( ) ; protected int getDepth ( ) { return <int> ; } protected void headSection ( Html html ) { String rootDir = getDepth ( ) = = <int> ? <str> : <str> ; html . meta ( ) . httpEquiv ( <str> ) . content ( <str> ) ; html . link ( ) . rel ( <str> ) . type ( <str> ) . href ( rootDir + <str> ) . end ( ) ; html . script ( ) . src ( rootDir + <str> ) . end ( ) ; html . script ( ) . src ( rootDir + <str> ) . end ( ) ; html . script ( ) . src ( rootDir + <str> ) . end ( ) ; } protected void footer ( Html html ) { html . div ( ) . id ( <str> ) . text ( String . format ( <str> , format . executionTimestamp ( ) , GradleVersion . current ( ) ) ) . end ( ) ; } protected static class MetricsHtml extends Html { public MetricsHtml ( Writer writer ) { super ( writer ) ; } protected < T > void renderSamplesForExperiment ( Iterable < MeasuredOperationList > experiments , Transformer < DataSeries < T > , MeasuredOperationList > transformer ) { List < DataSeries < T > > values = new ArrayList < DataSeries < T > > ( ) ; Amount < T > min = null ; Amount < T > max = null ; for ( MeasuredOperationList testExecution : experiments ) { DataSeries < T > data = transformer . transform ( testExecution ) ; if ( data . isEmpty ( ) ) { values . add ( null ) ; } else { Amount < T > value = data . getAverage ( ) ; values . add ( data ) ; if ( min = = null | | value . compareTo ( min ) < <int> ) { min = value ; } if ( max = = null | | value . compareTo ( max ) > <int> ) { max = value ; } } } if ( min ! = null & & min . equals ( max ) ) { min = null ; max = null ; } for ( DataSeries < T > data : values ) { if ( data = = null ) { td ( ) . text ( <str> ) . end ( ) ; } else { Amount < T > value = data . getAverage ( ) ; String classAttr = <str> ; if ( value . equals ( min ) ) { classAttr + = <str> ; } if ( value . equals ( max ) ) { classAttr + = <str> ; } td ( ) . classAttr ( classAttr ) . title ( <str> + value + <str> + data . getMin ( ) + <str> + data . getMax ( ) + <str> + data . getStddev ( ) + <str> + data ) . text ( value . format ( ) ) . end ( ) ; } } } } } 

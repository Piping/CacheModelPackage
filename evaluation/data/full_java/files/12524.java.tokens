package org . gradle . api . internal . artifacts . ivyservice ; import org . apache . ivy . core . module . descriptor . * ; import org . apache . ivy . core . module . id . ArtifactId ; import org . apache . ivy . core . module . id . ModuleId ; import org . apache . ivy . core . module . id . ModuleRevisionId ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . artifacts . Module ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . internal . component . model . IvyArtifactName ; import org . gradle . util . GUtil ; import java . util . Collections ; import java . util . Map ; import java . util . Set ; import static java . util . Collections . emptyMap ; public class IvyUtil { private static final Object MODULE_ID_LOCK = new Object ( ) ; public static ModuleRevisionId createModuleRevisionId ( Module module ) { return createModuleRevisionId ( module . getGroup ( ) , module . getName ( ) , module . getVersion ( ) ) ; } public static ModuleRevisionId createModuleRevisionId ( Dependency dependency ) { return createModuleRevisionId ( dependency . getGroup ( ) , dependency . getName ( ) , dependency . getVersion ( ) ) ; } public static ModuleRevisionId createModuleRevisionId ( String group , String name , String version ) { return createModuleRevisionId ( emptyStringIfNull ( group ) , name , null , emptyStringIfNull ( version ) , emptyMap ( ) ) ; } public static ModuleRevisionId createModuleRevisionId ( ModuleVersionIdentifier id ) { return createModuleRevisionId ( id . getGroup ( ) , id . getName ( ) , id . getVersion ( ) ) ; } public static ModuleRevisionId createModuleRevisionId ( ModuleComponentIdentifier id ) { return createModuleRevisionId ( id . getGroup ( ) , id . getModule ( ) , id . getVersion ( ) ) ; } public static ModuleRevisionId createModuleRevisionId ( ModuleRevisionId revId , String version ) { return createModuleRevisionId ( revId . getOrganisation ( ) , revId . getName ( ) , revId . getBranch ( ) , version , revId . getQualifiedExtraAttributes ( ) ) ; } private static String emptyStringIfNull ( String value ) { return GUtil . elvis ( value , <str> ) ; } public static ModuleRevisionId createModuleRevisionId ( String org , String name , String branch , String rev , Map extraAttributes ) { return createModuleRevisionId ( org , name , branch , rev , extraAttributes , true ) ; } public static ModuleRevisionId createModuleRevisionId ( String org , String name , String branch , String revConstraint , Map extraAttributes , boolean replaceNullBranchWithDefault ) { synchronized ( MODULE_ID_LOCK ) { return ModuleRevisionId . newInstance ( org , name , branch , revConstraint , extraAttributes , replaceNullBranchWithDefault ) ; } } public static ModuleId createModuleId ( String org , String name ) { synchronized ( MODULE_ID_LOCK ) { return ModuleId . newInstance ( org , name ) ; } } public static ArtifactId createArtifactId ( String org , String module , String name , String type , String ext ) { return new ArtifactId ( createModuleId ( org , module ) , name , type , ext ) ; } public static DefaultModuleDescriptor createModuleDescriptor ( ModuleComponentIdentifier componentIdentifier , Set < IvyArtifactName > componentArtifacts ) { ModuleRevisionId moduleRevisionId = IvyUtil . createModuleRevisionId ( componentIdentifier ) ; DefaultModuleDescriptor moduleDescriptor = new DefaultModuleDescriptor ( moduleRevisionId , <str> , null , true ) ; moduleDescriptor . addConfiguration ( new Configuration ( ModuleDescriptor . DEFAULT_CONFIGURATION ) ) ; moduleDescriptor . setLastModified ( System . currentTimeMillis ( ) ) ; for ( IvyArtifactName artifactName : componentArtifacts ) { addArtifact ( moduleDescriptor , artifactName . getName ( ) , artifactName . getType ( ) , artifactName . getExtension ( ) , artifactName . getAttributes ( ) ) ; } if ( componentArtifacts . isEmpty ( ) ) { addArtifact ( moduleDescriptor , componentIdentifier . getModule ( ) , <str> , <str> , Collections . < String , String > emptyMap ( ) ) ; } return moduleDescriptor ; } private static void addArtifact ( DefaultModuleDescriptor moduleDescriptor , String name , String type , String extension , Map < String , String > extraAttributes ) { moduleDescriptor . addArtifact ( ModuleDescriptor . DEFAULT_CONFIGURATION , new MDArtifact ( moduleDescriptor , name , type , extension , null , extraAttributes ) ) ; } } 

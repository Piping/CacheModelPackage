package org . gradle . api . tasks . bundling ; import groovy . lang . Closure ; import org . gradle . api . tasks . AbstractCopyTask ; import org . gradle . api . tasks . OutputFile ; import org . gradle . util . GUtil ; import java . io . File ; public abstract class AbstractArchiveTask extends AbstractCopyTask { private File destinationDir ; private String customName ; private String baseName ; private String appendix ; private String version ; private String extension ; private String classifier = <str> ; public String getArchiveName ( ) { if ( customName ! = null ) { return customName ; } String name = GUtil . elvis ( getBaseName ( ) , <str> ) + maybe ( getBaseName ( ) , getAppendix ( ) ) ; name + = maybe ( name , getVersion ( ) ) ; name + = maybe ( name , getClassifier ( ) ) ; name + = GUtil . isTrue ( getExtension ( ) ) ? <str> + getExtension ( ) : <str> ; return name ; } public void setArchiveName ( String name ) { customName = name ; } private String maybe ( String prefix , String value ) { if ( GUtil . isTrue ( value ) ) { if ( GUtil . isTrue ( prefix ) ) { return <str> . concat ( value ) ; } else { return value ; } } return <str> ; } @OutputFile public File getArchivePath ( ) { return new File ( getDestinationDir ( ) , getArchiveName ( ) ) ; } public File getDestinationDir ( ) { return destinationDir ; } public void setDestinationDir ( File destinationDir ) { this . destinationDir = destinationDir ; } public String getBaseName ( ) { return baseName ; } public void setBaseName ( String baseName ) { this . baseName = baseName ; } public String getAppendix ( ) { return appendix ; } public void setAppendix ( String appendix ) { this . appendix = appendix ; } public String getVersion ( ) { return version ; } public void setVersion ( String version ) { this . version = version ; } public String getExtension ( ) { return extension ; } public void setExtension ( String extension ) { this . extension = extension ; } public String getClassifier ( ) { return classifier ; } public void setClassifier ( String classifier ) { this . classifier = classifier ; } public AbstractArchiveTask into ( Object destPath ) { super . into ( destPath ) ; return this ; } public AbstractArchiveTask into ( Object destPath , Closure configureClosure ) { super . into ( destPath , configureClosure ) ; return this ; } } 

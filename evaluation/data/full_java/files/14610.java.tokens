package org . gradle . performance . measure ; import java . math . BigDecimal ; import java . math . RoundingMode ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; public abstract class Units < Q > implements Comparable < Units < Q > > { private final Class < Q > type ; private final String displaySingular ; private final String displayPlural ; protected Units ( Class < Q > type , String displaySingular , String displayPlural ) { this . type = type ; this . displaySingular = displaySingular ; this . displayPlural = displayPlural ; } public static < Q > Units < Q > base ( Class < Q > type , String displaySingular ) { return new BaseUnits < Q > ( type , displaySingular , displaySingular ) ; } public static < Q > Units < Q > base ( Class < Q > type , String displaySingular , String displayPlural ) { return new BaseUnits < Q > ( type , displaySingular , displayPlural ) ; } protected Class < Q > getType ( ) { return type ; } @Override public String toString ( ) { return displayPlural ; } public abstract Units < Q > times ( long value , String displaySingular , String displayPlural ) ; public Units < Q > times ( long value , String displaySingular ) { return times ( value , displaySingular , displaySingular ) ; } protected abstract Units < Q > getBaseUnits ( ) ; protected abstract List < Units < Q > > getUnitsForQuantity ( ) ; protected abstract BigDecimal getFactor ( ) ; protected abstract BigDecimal scaleTo ( BigDecimal value , Units < Q > units ) ; protected String format ( BigDecimal value ) { return value . compareTo ( BigDecimal . ONE ) = = <int> ? displaySingular : displayPlural ; } private static class BaseUnits < Q > extends Units < Q > { private final List < Units < Q > > units = new ArrayList < Units < Q > > ( ) ; protected BaseUnits ( Class < Q > type , String displaySingular , String displayPlural ) { super ( type , displaySingular , displayPlural ) ; units . add ( this ) ; } @Override public BigDecimal scaleTo ( BigDecimal value , Units < Q > units ) { if ( units = = this ) { return value ; } ScaledUnits < Q > scaledUnits = ( ScaledUnits < Q > ) units ; return value . divide ( scaledUnits . factor , <int> , RoundingMode . HALF_UP ) . stripTrailingZeros ( ) ; } @Override protected List < Units < Q > > getUnitsForQuantity ( ) { return units ; } @Override public Units < Q > times ( long value , String displaySingular , String displayPlural ) { return new ScaledUnits < Q > ( this , displaySingular , displayPlural , BigDecimal . valueOf ( value ) ) ; } @Override protected Units < Q > getBaseUnits ( ) { return this ; } @Override protected BigDecimal getFactor ( ) { return BigDecimal . ONE ; } public int compareTo ( Units < Q > o ) { if ( o = = this ) { return <int> ; } if ( o . getType ( ) ! = getType ( ) ) { throw new IllegalArgumentException ( String . format ( <str> , getType ( ) , o . getType ( ) ) ) ; } return - <int> ; } public void add ( ScaledUnits < Q > units ) { this . units . add ( units ) ; Collections . sort ( this . units ) ; } } private static class ScaledUnits < Q > extends Units < Q > { private final BaseUnits < Q > baseUnits ; private final BigDecimal factor ; public ScaledUnits ( BaseUnits < Q > baseUnits , String displaySingular , String displayPlural , BigDecimal factor ) { super ( baseUnits . getType ( ) , displaySingular , displayPlural ) ; assert factor . compareTo ( BigDecimal . ONE ) > <int> ; this . baseUnits = baseUnits ; this . factor = factor ; baseUnits . add ( this ) ; } @Override public Units < Q > times ( long value , String displaySingular , String displayPlural ) { return new ScaledUnits < Q > ( baseUnits , displaySingular , displayPlural , factor . multiply ( BigDecimal . valueOf ( value ) ) ) ; } @Override public BigDecimal scaleTo ( BigDecimal value , Units < Q > units ) { if ( units = = this ) { return value ; } if ( units . equals ( baseUnits ) ) { return value . multiply ( factor ) ; } ScaledUnits < Q > other = ( ScaledUnits < Q > ) units ; return value . multiply ( factor ) . divide ( other . factor , <int> , RoundingMode . HALF_UP ) . stripTrailingZeros ( ) ; } @Override protected List < Units < Q > > getUnitsForQuantity ( ) { return baseUnits . getUnitsForQuantity ( ) ; } @Override protected Units < Q > getBaseUnits ( ) { return baseUnits ; } @Override protected BigDecimal getFactor ( ) { return factor ; } public int compareTo ( Units < Q > o ) { if ( o . getType ( ) ! = getType ( ) ) { throw new IllegalArgumentException ( String . format ( <str> , getType ( ) , o . getType ( ) ) ) ; } if ( o . equals ( baseUnits ) ) { return <int> ; } ScaledUnits < Q > other = ( ScaledUnits < Q > ) o ; if ( ! other . baseUnits . equals ( baseUnits ) ) { throw new IllegalArgumentException ( <str> ) ; } return factor . compareTo ( other . factor ) ; } } } 

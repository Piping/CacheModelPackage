package org . elasticsearch . plan . a ; import org . elasticsearch . script . CompiledScript ; import org . elasticsearch . script . ExecutableScript ; import org . elasticsearch . script . ScriptService ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ; public class ScriptEngineTests extends ScriptTestCase { public void testSimpleEquation ( ) { final Object value = exec ( <str> ) ; assertEquals ( <int> , ( ( Number ) value ) . intValue ( ) ) ; } public void testMapAccess ( ) { Map < String , Object > vars = new HashMap < > ( ) ; Map < String , Object > obj2 = new HashMap < > ( ) ; obj2 . put ( <str> , <str> ) ; Map < String , Object > obj1 = new HashMap < > ( ) ; obj1 . put ( <str> , <str> ) ; obj1 . put ( <str> , obj2 ) ; obj1 . put ( <str> , Arrays . asList ( <str> , <str> ) ) ; vars . put ( <str> , obj1 ) ; Object value = exec ( <str> , vars ) ; obj1 = ( Map < String , Object > ) value ; assertEquals ( <str> , obj1 . get ( <str> ) ) ; assertEquals ( <str> , ( ( Map < String , Object > ) obj1 . get ( <str> ) ) . get ( <str> ) ) ; value = exec ( <str> , vars ) ; assertEquals ( <str> , value ) ; } public void testAccessListInScript ( ) { Map < String , Object > vars = new HashMap < > ( ) ; Map < String , Object > obj2 = new HashMap < > ( ) ; obj2 . put ( <str> , <str> ) ; Map < String , Object > obj1 = new HashMap < > ( ) ; obj1 . put ( <str> , <str> ) ; obj1 . put ( <str> , obj2 ) ; vars . put ( <str> , Arrays . asList ( <str> , <str> , <str> , obj1 ) ) ; assertEquals ( <int> , exec ( <str> , vars ) ) ; assertEquals ( <str> , exec ( <str> , vars ) ) ; Object value = exec ( <str> , vars ) ; obj1 = ( Map < String , Object > ) value ; assertEquals ( <str> , obj1 . get ( <str> ) ) ; assertEquals ( <str> , ( ( Map < String , Object > ) obj1 . get ( <str> ) ) . get ( <str> ) ) ; assertEquals ( <str> , exec ( <str> , vars ) ) ; } public void testChangingVarsCrossExecution1 ( ) { Map < String , Object > vars = new HashMap < > ( ) ; Map < String , Object > ctx = new HashMap < > ( ) ; vars . put ( <str> , ctx ) ; Object compiledScript = scriptEngine . compile ( <str> ) ; ExecutableScript script = scriptEngine . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , compiledScript ) , vars ) ; ctx . put ( <str> , <int> ) ; Object o = script . run ( ) ; assertEquals ( <int> , ( ( Number ) o ) . intValue ( ) ) ; ctx . put ( <str> , <int> ) ; o = script . run ( ) ; assertEquals ( <int> , ( ( Number ) o ) . intValue ( ) ) ; } public void testChangingVarsCrossExecution2 ( ) { Map < String , Object > vars = new HashMap < > ( ) ; Object compiledScript = scriptEngine . compile ( <str> ) ; ExecutableScript script = scriptEngine . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , compiledScript ) , vars ) ; script . setNextVar ( <str> , <int> ) ; Object value = script . run ( ) ; assertEquals ( <int> , ( ( Number ) value ) . intValue ( ) ) ; script . setNextVar ( <str> , <int> ) ; value = script . run ( ) ; assertEquals ( <int> , ( ( Number ) value ) . intValue ( ) ) ; } } 

package com . google . common . collect . testing ; import com . google . common . annotations . GwtCompatible ; import java . util . Iterator ; import java . util . Map . Entry ; import java . util . SortedMap ; @GwtCompatible public abstract class SortedMapInterfaceTest < K , V > extends MapInterfaceTest < K , V > { protected SortedMapInterfaceTest ( boolean allowsNullKeys , boolean allowsNullValues , boolean supportsPut , boolean supportsRemove , boolean supportsClear ) { super ( allowsNullKeys , allowsNullValues , supportsPut , supportsRemove , supportsClear ) ; } @Override protected abstract SortedMap < K , V > makeEmptyMap ( ) throws UnsupportedOperationException ; @Override protected abstract SortedMap < K , V > makePopulatedMap ( ) throws UnsupportedOperationException ; @Override protected SortedMap < K , V > makeEitherMap ( ) { try { return makePopulatedMap ( ) ; } catch ( UnsupportedOperationException e ) { return makeEmptyMap ( ) ; } } public void testTailMapWriteThrough ( ) { final SortedMap < K , V > map ; try { map = makePopulatedMap ( ) ; } catch ( UnsupportedOperationException e ) { return ; } if ( map . size ( ) < <int> | | ! supportsPut ) { return ; } Iterator < Entry < K , V > > iterator = map . entrySet ( ) . iterator ( ) ; Entry < K , V > firstEntry = iterator . next ( ) ; Entry < K , V > secondEntry = iterator . next ( ) ; K key = secondEntry . getKey ( ) ; SortedMap < K , V > subMap = map . tailMap ( key ) ; V value = getValueNotInPopulatedMap ( ) ; subMap . put ( key , value ) ; assertEquals ( secondEntry . getValue ( ) , value ) ; assertEquals ( map . get ( key ) , value ) ; try { subMap . put ( firstEntry . getKey ( ) , value ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testTailMapRemoveThrough ( ) { final SortedMap < K , V > map ; try { map = makePopulatedMap ( ) ; } catch ( UnsupportedOperationException e ) { return ; } int oldSize = map . size ( ) ; if ( map . size ( ) < <int> | | ! supportsRemove ) { return ; } Iterator < Entry < K , V > > iterator = map . entrySet ( ) . iterator ( ) ; Entry < K , V > firstEntry = iterator . next ( ) ; Entry < K , V > secondEntry = iterator . next ( ) ; K key = secondEntry . getKey ( ) ; SortedMap < K , V > subMap = map . tailMap ( key ) ; subMap . remove ( key ) ; assertNull ( subMap . remove ( firstEntry . getKey ( ) ) ) ; assertEquals ( map . size ( ) , oldSize - <int> ) ; assertFalse ( map . containsKey ( key ) ) ; assertEquals ( subMap . size ( ) , oldSize - <int> ) ; } public void testTailMapClearThrough ( ) { final SortedMap < K , V > map ; try { map = makePopulatedMap ( ) ; } catch ( UnsupportedOperationException e ) { return ; } int oldSize = map . size ( ) ; if ( map . size ( ) < <int> | | ! supportsClear ) { return ; } Iterator < Entry < K , V > > iterator = map . entrySet ( ) . iterator ( ) ; iterator . next ( ) ; Entry < K , V > secondEntry = iterator . next ( ) ; K key = secondEntry . getKey ( ) ; SortedMap < K , V > subMap = map . tailMap ( key ) ; int subMapSize = subMap . size ( ) ; subMap . clear ( ) ; assertEquals ( map . size ( ) , oldSize - subMapSize ) ; assertTrue ( subMap . isEmpty ( ) ) ; } } 

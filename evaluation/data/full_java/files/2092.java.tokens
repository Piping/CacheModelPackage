package org . nd4j . linalg . api . ops . impl . transforms ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . BaseTransformOp ; import org . nd4j . linalg . api . ops . Op ; import org . nd4j . linalg . factory . Nd4j ; public class Step extends BaseTransformOp { private final double cutoff ; public Step ( ) { cutoff = <float> ; } public Step ( INDArray x , INDArray z ) { super ( x , z ) ; cutoff = <float> ; } public Step ( INDArray x , INDArray z , int n ) { super ( x , z , n ) ; cutoff = <float> ; } public Step ( INDArray x , INDArray y , INDArray z , int n ) { super ( x , y , z , n ) ; cutoff = <float> ; } public Step ( INDArray x ) { super ( x ) ; cutoff = <float> ; } public Step ( INDArray x , INDArray z , double cutoff ) { super ( x , z ) ; this . cutoff = cutoff ; } public Step ( INDArray x , INDArray z , int n , double cutoff ) { super ( x , z , n ) ; this . cutoff = cutoff ; } public Step ( INDArray x , INDArray y , INDArray z , int n , double cutoff ) { super ( x , y , z , n ) ; this . cutoff = cutoff ; } public Step ( INDArray x , double cutoff ) { super ( x ) ; this . cutoff = cutoff ; } @Override public String name ( ) { return <str> ; } @Override public IComplexNumber op ( IComplexNumber origin , double other ) { return ( origin . realComponent ( ) . doubleValue ( ) > cutoff ? Nd4j . createDouble ( <int> , <int> ) : Nd4j . createDouble ( <int> , <int> ) ) ; } @Override public IComplexNumber op ( IComplexNumber origin , float other ) { return ( origin . realComponent ( ) . doubleValue ( ) > cutoff ? Nd4j . createDouble ( <int> , <int> ) : Nd4j . createDouble ( <int> , <int> ) ) ; } @Override public IComplexNumber op ( IComplexNumber origin , IComplexNumber other ) { return ( origin . realComponent ( ) . doubleValue ( ) > cutoff ? Nd4j . createDouble ( <int> , <int> ) : Nd4j . createDouble ( <int> , <int> ) ) ; } @Override public float op ( float origin , float other ) { return ( origin > cutoff ? <float> : <float> ) ; } @Override public double op ( double origin , double other ) { return ( origin > cutoff ? <float> : <float> ) ; } @Override public double op ( double origin ) { return ( origin > cutoff ? <float> : <float> ) ; } @Override public float op ( float origin ) { return ( origin > cutoff ? <float> : <float> ) ; } @Override public IComplexNumber op ( IComplexNumber origin ) { return ( origin . realComponent ( ) . doubleValue ( ) > cutoff ? Nd4j . createDouble ( <int> , <int> ) : Nd4j . createDouble ( <int> , <int> ) ) ; } @Override public Op opForDimension ( int index , int dimension ) { INDArray xAlongDimension = x . vectorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new Step ( x . vectorAlongDimension ( index , dimension ) , y . vectorAlongDimension ( index , dimension ) , z . vectorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) , cutoff ) ; else return new Step ( x . vectorAlongDimension ( index , dimension ) , z . vectorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) , cutoff ) ; } @Override public Op opForDimension ( int index , int . . . dimension ) { INDArray xAlongDimension = x . tensorAlongDimension ( index , dimension ) ; if ( y ( ) ! = null ) return new Step ( x . tensorAlongDimension ( index , dimension ) , y . tensorAlongDimension ( index , dimension ) , z . tensorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) , cutoff ) ; else return new Step ( x . tensorAlongDimension ( index , dimension ) , z . tensorAlongDimension ( index , dimension ) , xAlongDimension . length ( ) , cutoff ) ; } } 

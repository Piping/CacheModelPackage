package io . netty . util ; public interface ByteProcessor { class IndexOfProcessor implements ByteProcessor { private final byte byteToFind ; public IndexOfProcessor ( byte byteToFind ) { this . byteToFind = byteToFind ; } @Override public boolean process ( byte value ) { return value ! = byteToFind ; } } class IndexNotOfProcessor implements ByteProcessor { private final byte byteToNotFind ; public IndexNotOfProcessor ( byte byteToNotFind ) { this . byteToNotFind = byteToNotFind ; } @Override public boolean process ( byte value ) { return value = = byteToNotFind ; } } ByteProcessor FIND_NUL = new IndexOfProcessor ( ( byte ) <int> ) ; ByteProcessor FIND_NON_NUL = new IndexNotOfProcessor ( ( byte ) <int> ) ; ByteProcessor FIND_CR = new IndexOfProcessor ( ( byte ) <str> ) ; ByteProcessor FIND_NON_CR = new IndexNotOfProcessor ( ( byte ) <str> ) ; ByteProcessor FIND_LF = new IndexOfProcessor ( ( byte ) <str> ) ; ByteProcessor FIND_NON_LF = new IndexNotOfProcessor ( ( byte ) <str> ) ; ByteProcessor FIND_CRLF = new ByteProcessor ( ) { @Override public boolean process ( byte value ) throws Exception { return value ! = <str> & & value ! = <str> ; } } ; ByteProcessor FIND_NON_CRLF = new ByteProcessor ( ) { @Override public boolean process ( byte value ) throws Exception { return value = = <str> | | value = = <str> ; } } ; ByteProcessor FIND_LINEAR_WHITESPACE = new ByteProcessor ( ) { @Override public boolean process ( byte value ) throws Exception { return value ! = <str> & & value ! = <str> ; } } ; ByteProcessor FIND_NON_LINEAR_WHITESPACE = new ByteProcessor ( ) { @Override public boolean process ( byte value ) throws Exception { return value = = <str> | | value = = <str> ; } } ; ByteProcessor FIND_SEMI_COLON = new ByteProcessor ( ) { @Override public boolean process ( byte value ) throws Exception { return value ! = <str> ; } } ; boolean process ( byte value ) throws Exception ; } 

package com . badlogic . gdx . graphics . g2d ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . math . Affine2 ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . utils . Disposable ; public interface Batch extends Disposable { public void begin ( ) ; public void end ( ) ; public void setColor ( Color tint ) ; public void setColor ( float r , float g , float b , float a ) ; public void setColor ( float color ) ; public Color getColor ( ) ; public float getPackedColor ( ) ; public void draw ( Texture texture , float x , float y , float originX , float originY , float width , float height , float scaleX , float scaleY , float rotation , int srcX , int srcY , int srcWidth , int srcHeight , boolean flipX , boolean flipY ) ; public void draw ( Texture texture , float x , float y , float width , float height , int srcX , int srcY , int srcWidth , int srcHeight , boolean flipX , boolean flipY ) ; public void draw ( Texture texture , float x , float y , int srcX , int srcY , int srcWidth , int srcHeight ) ; public void draw ( Texture texture , float x , float y , float width , float height , float u , float v , float u2 , float v2 ) ; public void draw ( Texture texture , float x , float y ) ; public void draw ( Texture texture , float x , float y , float width , float height ) ; public void draw ( Texture texture , float [ ] spriteVertices , int offset , int count ) ; public void draw ( TextureRegion region , float x , float y ) ; public void draw ( TextureRegion region , float x , float y , float width , float height ) ; public void draw ( TextureRegion region , float x , float y , float originX , float originY , float width , float height , float scaleX , float scaleY , float rotation ) ; public void draw ( TextureRegion region , float x , float y , float originX , float originY , float width , float height , float scaleX , float scaleY , float rotation , boolean clockwise ) ; public void draw ( TextureRegion region , float width , float height , Affine2 transform ) ; public void flush ( ) ; public void disableBlending ( ) ; public void enableBlending ( ) ; public void setBlendFunction ( int srcFunc , int dstFunc ) ; public int getBlendSrcFunc ( ) ; public int getBlendDstFunc ( ) ; public Matrix4 getProjectionMatrix ( ) ; public Matrix4 getTransformMatrix ( ) ; public void setProjectionMatrix ( Matrix4 projection ) ; public void setTransformMatrix ( Matrix4 transform ) ; public void setShader ( ShaderProgram shader ) ; public ShaderProgram getShader ( ) ; public boolean isBlendingEnabled ( ) ; public boolean isDrawing ( ) ; static public final int X1 = <int> ; static public final int Y1 = <int> ; static public final int C1 = <int> ; static public final int U1 = <int> ; static public final int V1 = <int> ; static public final int X2 = <int> ; static public final int Y2 = <int> ; static public final int C2 = <int> ; static public final int U2 = <int> ; static public final int V2 = <int> ; static public final int X3 = <int> ; static public final int Y3 = <int> ; static public final int C3 = <int> ; static public final int U3 = <int> ; static public final int V3 = <int> ; static public final int X4 = <int> ; static public final int Y4 = <int> ; static public final int C4 = <int> ; static public final int U4 = <int> ; static public final int V4 = <int> ; } 

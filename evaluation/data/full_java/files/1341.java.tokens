package org . apache . cassandra . concurrent ; import java . io . IOException ; import java . util . concurrent . CancellationException ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . ScheduledFuture ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; import java . util . concurrent . atomic . AtomicInteger ; import org . junit . BeforeClass ; import org . junit . Test ; import junit . framework . Assert ; import org . apache . cassandra . service . EmbeddedCassandraService ; import org . apache . cassandra . service . StorageService ; public class DebuggableScheduledThreadPoolExecutorTest { static EmbeddedCassandraService service ; @BeforeClass public static void startup ( ) throws IOException { service = new EmbeddedCassandraService ( ) ; service . start ( ) ; } @Test public void testShutdown ( ) throws ExecutionException , InterruptedException , IOException { DebuggableScheduledThreadPoolExecutor testPool = new DebuggableScheduledThreadPoolExecutor ( <str> ) ; final AtomicInteger value = new AtomicInteger ( <int> ) ; ScheduledFuture future = testPool . schedule ( new Runnable ( ) { public void run ( ) { value . incrementAndGet ( ) ; } } , <int> , TimeUnit . SECONDS ) ; future . get ( ) ; assert value . get ( ) = = <int> ; future = testPool . schedule ( new Runnable ( ) { public void run ( ) { value . incrementAndGet ( ) ; } } , <int> , TimeUnit . SECONDS ) ; StorageService . instance . drain ( ) ; testPool . shutdown ( ) ; future . get ( ) ; assert value . get ( ) = = <int> ; future = testPool . schedule ( new Runnable ( ) { public void run ( ) { value . incrementAndGet ( ) ; } } , <int> , TimeUnit . SECONDS ) ; try { future . get ( <int> , TimeUnit . SECONDS ) ; Assert . fail ( <str> ) ; } catch ( CancellationException e ) { } catch ( TimeoutException e ) { Assert . fail ( <str> ) ; } assert future . isCancelled ( ) ; assert value . get ( ) = = <int> ; } } 

package org . nd4j . linalg . api . indexing ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . NDArrayIndex ; import org . nd4j . linalg . indexing . ShapeOffsetResolution ; import org . nd4j . linalg . util . ArrayUtil ; import java . util . Arrays ; import static org . junit . Assert . * ; import static org . junit . Assert . assertTrue ; public class ShapeResolutionTestsC extends BaseNd4jTest { public ShapeResolutionTestsC ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public ShapeResolutionTestsC ( Nd4jBackend backend ) { super ( backend ) ; } public ShapeResolutionTestsC ( ) { } public ShapeResolutionTestsC ( String name ) { super ( name ) ; } @Test public void testRowVectorShapeOneZeroOffset ( ) { INDArray arr = Nd4j . create ( <int> , <int> ) ; ShapeOffsetResolution resolution = new ShapeOffsetResolution ( arr ) ; resolution . exec ( NDArrayIndex . point ( <int> ) ) ; int [ ] oneIndexShape = ArrayUtil . copy ( resolution . getShapes ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , oneIndexShape ) ; int [ ] oneIndexOffsets = ArrayUtil . copy ( resolution . getOffsets ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , oneIndexOffsets ) ; assertEquals ( <int> , resolution . getOffset ( ) ) ; int [ ] oneIndexStrides = ArrayUtil . copy ( resolution . getStrides ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , oneIndexStrides ) ; } @Test public void testIntervalFirstShapeResolution ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; ShapeOffsetResolution resolution = new ShapeOffsetResolution ( arr ) ; resolution . exec ( NDArrayIndex . interval ( <int> , <int> ) ) ; assertFalse ( Arrays . equals ( arr . shape ( ) , resolution . getShapes ( ) ) ) ; } @Test public void testRowVectorShapeOneOneOffset ( ) { INDArray arr = Nd4j . create ( <int> , <int> ) ; ShapeOffsetResolution resolution = new ShapeOffsetResolution ( arr ) ; resolution . exec ( NDArrayIndex . point ( <int> ) ) ; int [ ] oneIndexShape = ArrayUtil . copy ( resolution . getShapes ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , oneIndexShape ) ; assertEquals ( <int> , resolution . getOffset ( ) ) ; int [ ] oneIndexStrides = ArrayUtil . copy ( resolution . getStrides ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , oneIndexStrides ) ; } @Test public void testRowVectorShapeTwoOneOffset ( ) { INDArray arr = Nd4j . create ( <int> , <int> ) ; ShapeOffsetResolution resolution = new ShapeOffsetResolution ( arr ) ; resolution . exec ( NDArrayIndex . point ( <int> ) , NDArrayIndex . all ( ) ) ; int [ ] oneIndexShape = ArrayUtil . copy ( resolution . getShapes ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , oneIndexShape ) ; int [ ] oneIndexOffsets = ArrayUtil . copy ( resolution . getOffsets ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , oneIndexOffsets ) ; assertEquals ( <int> , resolution . getOffset ( ) ) ; int [ ] oneIndexStrides = ArrayUtil . copy ( resolution . getStrides ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , oneIndexStrides ) ; } @Test public void testColumnVectorShapeZeroOffset ( ) { INDArray arr = Nd4j . create ( <int> , <int> ) ; ShapeOffsetResolution resolution = new ShapeOffsetResolution ( arr ) ; resolution . exec ( NDArrayIndex . all ( ) , NDArrayIndex . point ( <int> ) ) ; assertEquals ( <int> , resolution . getOffset ( ) ) ; int [ ] strides = resolution . getStrides ( ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , resolution . getShapes ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , strides ) ; } @Test public void testColumnVectorShapeOneOffset ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; ShapeOffsetResolution resolution = new ShapeOffsetResolution ( arr ) ; resolution . exec ( NDArrayIndex . all ( ) , NDArrayIndex . point ( <int> ) ) ; assertEquals ( <int> , resolution . getOffset ( ) ) ; int [ ] strides = resolution . getStrides ( ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , resolution . getShapes ( ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , strides ) ; } @Test public void testPartiallyOutOfRangeIndices ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; ShapeOffsetResolution resolution = new ShapeOffsetResolution ( arr ) ; resolution . exec ( NDArrayIndex . interval ( <int> , <int> ) , NDArrayIndex . interval ( <int> , <int> ) ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , resolution . getShapes ( ) ) ; } @Test public void testOutOfRangeIndices ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; ShapeOffsetResolution resolution = new ShapeOffsetResolution ( arr ) ; try { resolution . exec ( NDArrayIndex . interval ( <int> , <int> ) , NDArrayIndex . interval ( <int> , <int> ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } @Test public void testIndexAll ( ) { INDArray arr = Nd4j . create ( <int> , <int> ) ; ShapeOffsetResolution resolution = new ShapeOffsetResolution ( arr ) ; resolution . exec ( NDArrayIndex . all ( ) , NDArrayIndex . all ( ) ) ; assertEquals ( resolution . getShapes ( ) [ <int> ] , <int> ) ; assertEquals ( resolution . getShapes ( ) [ <int> ] , <int> ) ; } @Override public char ordering ( ) { return <str> ; } } 

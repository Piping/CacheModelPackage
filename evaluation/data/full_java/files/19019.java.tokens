package io . netty . handler . codec . protobuf ; import io . netty . buffer . ByteBuf ; import io . netty . channel . embedded . EmbeddedChannel ; import org . junit . Before ; import org . junit . Test ; import static io . netty . buffer . Unpooled . * ; import static io . netty . util . ReferenceCountUtil . releaseLater ; import static org . hamcrest . core . Is . * ; import static org . hamcrest . core . IsNull . * ; import static org . junit . Assert . * ; public class ProtobufVarint32FrameDecoderTest { private EmbeddedChannel ch ; @Before public void setUp ( ) { ch = new EmbeddedChannel ( new ProtobufVarint32FrameDecoder ( ) ) ; } @Test public void testTinyDecode ( ) { byte [ ] b = { <int> , <int> , <int> , <int> , <int> } ; ch . writeInbound ( wrappedBuffer ( b , <int> , <int> ) ) ; assertThat ( ch . readInbound ( ) , is ( nullValue ( ) ) ) ; ch . writeInbound ( wrappedBuffer ( b , <int> , <int> ) ) ; assertThat ( ch . readInbound ( ) , is ( nullValue ( ) ) ) ; ch . writeInbound ( wrappedBuffer ( b , <int> , b . length - <int> ) ) ; assertThat ( releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) , is ( releaseLater ( wrappedBuffer ( new byte [ ] { <int> , <int> , <int> , <int> } ) ) ) ) ; } @Test public void testRegularDecode ( ) { byte [ ] b = new byte [ <int> ] ; for ( int i = <int> ; i < <int> ; i + + ) { b [ i ] = <int> ; } b [ <int> ] = - <int> ; b [ <int> ] = <int> ; ch . writeInbound ( wrappedBuffer ( b , <int> , <int> ) ) ; assertThat ( ch . readInbound ( ) , is ( nullValue ( ) ) ) ; ch . writeInbound ( wrappedBuffer ( b , <int> , <int> ) ) ; assertThat ( ch . readInbound ( ) , is ( nullValue ( ) ) ) ; ch . writeInbound ( wrappedBuffer ( b , <int> , b . length - <int> ) ) ; assertThat ( releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) , is ( releaseLater ( wrappedBuffer ( b , <int> , b . length - <int> ) ) ) ) ; } } 

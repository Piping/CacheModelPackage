package org . eclipse . debug . tests . launching ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchHistory ; import org . eclipse . debug . ui . IDebugUIConstants ; public class LaunchFavoriteTests extends AbstractLaunchTest { private ILaunchConfiguration fConfig ; public LaunchFavoriteTests ( String name ) { super ( name ) ; } private LaunchHistory getRunLaunchHistory ( ) { return getLaunchConfigurationManager ( ) . getLaunchHistory ( IDebugUIConstants . ID_RUN_LAUNCH_GROUP ) ; } private LaunchHistory getDebugLaunchHistory ( ) { return getLaunchConfigurationManager ( ) . getLaunchHistory ( IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP ) ; } @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; getRunLaunchHistory ( ) . setFavorites ( new ILaunchConfiguration [ <int> ] ) ; getDebugLaunchHistory ( ) . setFavorites ( new ILaunchConfiguration [ <int> ] ) ; fConfig = getLaunchConfiguration ( getName ( ) ) ; } @Override protected void tearDown ( ) throws Exception { super . tearDown ( ) ; ILaunchConfiguration configuration = getLaunchConfiguration ( ) ; if ( configuration . exists ( ) ) { configuration . delete ( ) ; } } private ILaunchConfiguration getLaunchConfiguration ( ) { return fConfig ; } private ILaunchConfigurationWorkingCopy addFavorite ( ILaunchConfiguration config , String groupId ) throws CoreException { ILaunchConfigurationWorkingCopy wc = getWorkingCopy ( config ) ; List < String > list = config . getAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , ( List < String > ) null ) ; if ( list = = null ) { list = new ArrayList < String > ( ) ; } list . add ( groupId ) ; wc . setAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , list ) ; return wc ; } private ILaunchConfigurationWorkingCopy removeFavorite ( ILaunchConfiguration config , String groupId ) throws CoreException { ILaunchConfigurationWorkingCopy wc = getWorkingCopy ( config ) ; List < String > list = config . getAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , ( List < String > ) null ) ; if ( list ! = null ) { if ( list . remove ( groupId ) ) { if ( list . isEmpty ( ) ) { list = null ; } wc . setAttribute ( IDebugUIConstants . ATTR_FAVORITE_GROUPS , list ) ; } } return wc ; } private ILaunchConfigurationWorkingCopy getWorkingCopy ( ILaunchConfiguration config ) throws CoreException { ILaunchConfigurationWorkingCopy wc = null ; if ( config . isWorkingCopy ( ) ) { wc = ( ILaunchConfigurationWorkingCopy ) config ; } else { wc = config . getWorkingCopy ( ) ; } return wc ; } private boolean containsFavorite ( LaunchHistory history , ILaunchConfiguration configuration , int size ) { ILaunchConfiguration [ ] favorites = history . getFavorites ( ) ; assertNotNull ( <str> , favorites ) ; if ( size ! = - <int> ) { assertEquals ( <str> , size , favorites . length ) ; } for ( int i = <int> ; i < favorites . length ; i + + ) { if ( configuration . equals ( favorites [ i ] ) ) { return true ; } } return false ; } public void testBecomeFavorite ( ) throws CoreException { ILaunchConfigurationWorkingCopy wc = addFavorite ( getLaunchConfiguration ( ) , IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP ) ; addFavorite ( wc , IDebugUIConstants . ID_RUN_LAUNCH_GROUP ) ; ILaunchConfiguration saved = wc . doSave ( ) ; assertTrue ( <str> , containsFavorite ( getDebugLaunchHistory ( ) , saved , <int> ) ) ; assertTrue ( <str> , containsFavorite ( getRunLaunchHistory ( ) , saved , <int> ) ) ; } public void testUnFavorite ( ) throws CoreException { testBecomeFavorite ( ) ; ILaunchConfigurationWorkingCopy wc = removeFavorite ( getLaunchConfiguration ( ) , IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP ) ; removeFavorite ( wc , IDebugUIConstants . ID_RUN_LAUNCH_GROUP ) ; ILaunchConfiguration saved = wc . doSave ( ) ; assertFalse ( <str> , containsFavorite ( getDebugLaunchHistory ( ) , saved , <int> ) ) ; assertFalse ( <str> , containsFavorite ( getRunLaunchHistory ( ) , saved , <int> ) ) ; } public void testDeleteConfiguration ( ) throws CoreException { testBecomeFavorite ( ) ; ILaunchConfiguration configuration = getLaunchConfiguration ( ) ; configuration . delete ( ) ; assertFalse ( <str> , containsFavorite ( getDebugLaunchHistory ( ) , configuration , <int> ) ) ; assertFalse ( <str> , containsFavorite ( getRunLaunchHistory ( ) , configuration , <int> ) ) ; } public void testRenameFavorite ( ) throws CoreException { testBecomeFavorite ( ) ; ILaunchConfiguration original = getLaunchConfiguration ( ) ; ILaunchConfigurationWorkingCopy copy = original . getWorkingCopy ( ) ; copy . rename ( <str> + original . getName ( ) ) ; ILaunchConfiguration saved = copy . doSave ( ) ; assertTrue ( <str> , containsFavorite ( getDebugLaunchHistory ( ) , saved , <int> ) ) ; assertTrue ( <str> , containsFavorite ( getRunLaunchHistory ( ) , saved , <int> ) ) ; saved . delete ( ) ; } public void testRenameBecomeFavorite ( ) throws CoreException { ILaunchConfiguration original = getLaunchConfiguration ( ) ; ILaunchConfigurationWorkingCopy copy = original . getWorkingCopy ( ) ; copy . rename ( <str> + original . getName ( ) ) ; addFavorite ( copy , IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP ) ; addFavorite ( copy , IDebugUIConstants . ID_RUN_LAUNCH_GROUP ) ; ILaunchConfiguration saved = copy . doSave ( ) ; assertTrue ( <str> , containsFavorite ( getDebugLaunchHistory ( ) , saved , <int> ) ) ; assertTrue ( <str> , containsFavorite ( getRunLaunchHistory ( ) , saved , <int> ) ) ; saved . delete ( ) ; } public void testRenameUnFavorite ( ) throws CoreException { testBecomeFavorite ( ) ; ILaunchConfiguration original = getLaunchConfiguration ( ) ; ILaunchConfigurationWorkingCopy copy = original . getWorkingCopy ( ) ; copy . rename ( <str> + original . getName ( ) ) ; removeFavorite ( copy , IDebugUIConstants . ID_DEBUG_LAUNCH_GROUP ) ; removeFavorite ( copy , IDebugUIConstants . ID_RUN_LAUNCH_GROUP ) ; ILaunchConfiguration saved = copy . doSave ( ) ; assertFalse ( <str> , containsFavorite ( getDebugLaunchHistory ( ) , saved , <int> ) ) ; assertFalse ( <str> , containsFavorite ( getRunLaunchHistory ( ) , saved , <int> ) ) ; saved . delete ( ) ; } } 

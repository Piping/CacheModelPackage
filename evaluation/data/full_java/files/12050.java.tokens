package org . gradle . initialization . buildsrc ; import org . gradle . BuildAdapter ; import org . gradle . api . internal . GradleInternal ; import org . gradle . api . internal . component . BuildableJavaComponent ; import org . gradle . api . internal . component . ComponentRegistry ; import org . gradle . api . invocation . Gradle ; import org . gradle . initialization . ModelConfigurationListener ; import org . gradle . util . WrapUtil ; import java . io . File ; import java . util . Collection ; import java . util . Set ; public class BuildSrcBuildListenerFactory { private static final String DEFAULT_BUILD_SOURCE_SCRIPT_RESOURCE = <str> ; Listener create ( boolean rebuild ) { return new Listener ( rebuild ) ; } public static class Listener extends BuildAdapter implements ModelConfigurationListener { private Set < File > classpath ; private final boolean rebuild ; public Listener ( boolean rebuild ) { this . rebuild = rebuild ; } @Override public void projectsLoaded ( Gradle gradle ) { gradle . getRootProject ( ) . apply ( WrapUtil . toMap ( <str> , BuildSrcBuildListenerFactory . class . getResource ( DEFAULT_BUILD_SOURCE_SCRIPT_RESOURCE ) ) ) ; } public Collection < File > getRuntimeClasspath ( ) { return classpath ; } public void onConfigure ( GradleInternal gradle ) { BuildableJavaComponent projectInfo = gradle . getRootProject ( ) . getServices ( ) . get ( ComponentRegistry . class ) . getMainComponent ( ) ; gradle . getStartParameter ( ) . setTaskNames ( rebuild ? projectInfo . getRebuildTasks ( ) : projectInfo . getBuildTasks ( ) ) ; classpath = projectInfo . getRuntimeClasspath ( ) . getFiles ( ) ; } } } 

package org . apache . cassandra . db . composites ; import org . apache . cassandra . db . marshal . * ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . junit . Test ; import java . nio . ByteBuffer ; public class CTypeTest { @Test public void testCompoundType ( ) { CompositeType baseType = CompositeType . getInstance ( AsciiType . instance , UUIDType . instance , LongType . instance ) ; ByteBuffer a1 = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . add ( UUIDType . instance . fromString ( <str> ) ) . add ( ByteBufferUtil . bytes ( <int> ) ) . build ( ) ; ByteBuffer a2 = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . add ( UUIDType . instance . fromString ( <str> ) ) . add ( ByteBufferUtil . bytes ( <int> ) ) . build ( ) ; ByteBuffer b1 = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . add ( UUIDType . instance . fromString ( <str> ) ) . add ( ByteBufferUtil . bytes ( <int> ) ) . build ( ) ; ByteBuffer b2 = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . add ( UUIDType . instance . fromString ( <str> ) ) . add ( ByteBufferUtil . bytes ( <int> ) ) . build ( ) ; ByteBuffer c1 = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . add ( UUIDType . instance . fromString ( <str> ) ) . add ( ByteBufferUtil . bytes ( <int> ) ) . build ( ) ; ByteBuffer c2 = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . add ( UUIDType . instance . fromString ( <str> ) ) . add ( ByteBufferUtil . bytes ( <int> ) ) . build ( ) ; ByteBuffer d1 = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . add ( UUIDType . instance . fromString ( <str> ) ) . add ( ByteBufferUtil . bytes ( <int> ) ) . build ( ) ; ByteBuffer d2 = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . add ( UUIDType . instance . fromString ( <str> ) ) . add ( ByteBufferUtil . bytes ( <int> ) ) . build ( ) ; ByteBuffer z1 = baseType . builder ( ) . add ( ByteBufferUtil . EMPTY_BYTE_BUFFER ) . add ( UUIDType . instance . fromString ( <str> ) ) . add ( ByteBufferUtil . bytes ( <int> ) ) . build ( ) ; assert baseType . compare ( a1 , a2 ) < <int> ; assert baseType . compare ( a2 , b1 ) < <int> ; assert baseType . compare ( b1 , b2 ) < <int> ; assert baseType . compare ( b2 , c1 ) < <int> ; assert baseType . compare ( c1 , c2 ) < <int> ; assert baseType . compare ( c2 , d1 ) < <int> ; assert baseType . compare ( d1 , d2 ) < <int> ; assert baseType . compare ( a2 , a1 ) > <int> ; assert baseType . compare ( b1 , a2 ) > <int> ; assert baseType . compare ( b2 , b1 ) > <int> ; assert baseType . compare ( c1 , b2 ) > <int> ; assert baseType . compare ( c2 , c1 ) > <int> ; assert baseType . compare ( d1 , c2 ) > <int> ; assert baseType . compare ( d2 , d1 ) > <int> ; assert baseType . compare ( z1 , a1 ) < <int> ; assert baseType . compare ( z1 , a2 ) < <int> ; assert baseType . compare ( z1 , b1 ) < <int> ; assert baseType . compare ( z1 , b2 ) < <int> ; assert baseType . compare ( z1 , c1 ) < <int> ; assert baseType . compare ( z1 , c2 ) < <int> ; assert baseType . compare ( z1 , d1 ) < <int> ; assert baseType . compare ( z1 , d2 ) < <int> ; assert baseType . compare ( a1 , a1 ) = = <int> ; assert baseType . compare ( a2 , a2 ) = = <int> ; assert baseType . compare ( b1 , b1 ) = = <int> ; assert baseType . compare ( b2 , b2 ) = = <int> ; assert baseType . compare ( c1 , c1 ) = = <int> ; assert baseType . compare ( c2 , c2 ) = = <int> ; assert baseType . compare ( z1 , z1 ) = = <int> ; } @Test public void testSimpleType2 ( ) { CompositeType baseType = CompositeType . getInstance ( UUIDType . instance ) ; ByteBuffer a = baseType . builder ( ) . add ( UUIDType . instance . fromString ( <str> ) ) . build ( ) ; ByteBuffer z = baseType . builder ( ) . add ( UUIDType . instance . fromString ( <str> ) ) . build ( ) ; assert baseType . compare ( a , z ) < <int> ; assert baseType . compare ( z , a ) > <int> ; assert baseType . compare ( a , a ) = = <int> ; assert baseType . compare ( z , z ) = = <int> ; } @Test public void testSimpleType1 ( ) { CompositeType baseType = CompositeType . getInstance ( BytesType . instance ) ; ByteBuffer a = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . build ( ) ; ByteBuffer z = baseType . builder ( ) . add ( ByteBufferUtil . bytes ( <str> ) ) . build ( ) ; assert baseType . compare ( a , z ) < <int> ; assert baseType . compare ( z , a ) > <int> ; assert baseType . compare ( a , a ) = = <int> ; assert baseType . compare ( z , z ) = = <int> ; } } 

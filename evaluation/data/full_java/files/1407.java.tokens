package org . apache . cassandra . cql3 . validation . miscellaneous ; import java . math . BigInteger ; import org . junit . Test ; import static junit . framework . Assert . assertFalse ; import static junit . framework . Assert . assertNull ; import static org . junit . Assert . assertArrayEquals ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . exceptions . SyntaxException ; import org . apache . cassandra . utils . ByteBufferUtil ; public class OverflowTest extends CQLTester { @Test public void testNullSupport ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null , set ( <str> , <str> ) ) , row ( <int> , <int> , <int> , null ) ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null , null ) , row ( <int> , <int> , null , null ) ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testReservedKeywords ( ) throws Throwable { createTable ( <str> ) ; String tableName = createTableName ( ) ; assertInvalidThrow ( SyntaxException . class , String . format ( <str> , keyspace ( ) , tableName ) ) ; } @Test public void testIdentifiers ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; String tableName = createTableName ( ) ; assertInvalidThrow ( SyntaxException . class , String . format ( <str> , keyspace ( ) , tableName ) ) ; } @Test public void testTableOptions ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; } @Test public void testUnescapedString ( ) throws Throwable { createTable ( <str> ) ; assertInvalidThrow ( SyntaxException . class , <str> ) ; } @Test public void testBoolean ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( true , false ) ) ; } @Test public void testFloatWithExponent ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; } @Test public void testCompactMetadata ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; } @Test public void testConversionFunctions ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( BigInteger . valueOf ( <int> ) , <str> ) ) ; } @Test public void testEmptyBlob ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , ByteBufferUtil . bytes ( <str> ) ) ) ; } private Object [ ] [ ] fill ( ) throws Throwable { for ( int i = <int> ; i < <int> ; i + + ) for ( int j = <int> ; j < <int> ; j + + ) execute ( <str> , i , j , i + j ) ; return getRows ( execute ( <str> ) ) ; } @Test public void testEmpty ( ) throws Throwable { createTable ( <str> ) ; Object [ ] [ ] rows = fill ( ) ; assertEmpty ( execute ( <str> ) ) ; assertEmpty ( execute ( <str> ) ) ; execute ( <str> ) ; assertArrayEquals ( rows , getRows ( execute ( <str> ) ) ) ; execute ( <str> ) ; assertArrayEquals ( rows , getRows ( execute ( <str> ) ) ) ; createTable ( <str> ) ; rows = fill ( ) ; assertEmpty ( execute ( <str> ) ) ; assertEmpty ( execute ( <str> ) ) ; execute ( <str> ) ; assertArrayEquals ( rows , getRows ( execute ( <str> ) ) ) ; execute ( <str> ) ; assertArrayEquals ( rows , getRows ( execute ( <str> ) ) ) ; } @Test public void testFunctionWithNull ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; Object [ ] [ ] rows = getRows ( execute ( <str> ) ) ; assertNull ( rows [ <int> ] [ <int> ] ) ; } @Test public void testColumnNameValidation ( ) throws Throwable { createTable ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; assertInvalid ( <str> ) ; } @Test public void testNanInfinityValues ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; Object [ ] [ ] selected = getRows ( execute ( <str> ) ) ; assertEquals ( <int> , selected . length ) ; assertEquals ( <int> , selected [ <int> ] . length ) ; assertTrue ( Float . isNaN ( ( Float ) selected [ <int> ] [ <int> ] ) ) ; assertTrue ( Float . isInfinite ( ( Float ) selected [ <int> ] [ <int> ] ) ) ; assertTrue ( ( ( Float ) selected [ <int> ] [ <int> ] ) > <int> ) ; assertTrue ( Float . isInfinite ( ( Float ) selected [ <int> ] [ <int> ] ) ) ; assertTrue ( ( ( Float ) selected [ <int> ] [ <int> ] ) < <int> ) ; } @Test public void testBlobAsFunction ( ) throws Throwable { createTable ( <str> ) ; assertInvalid ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; } } 

package org . eclipse . debug . tests . launching ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . filesystem . EFS ; import org . eclipse . core . filesystem . IFileInfo ; import org . eclipse . core . filesystem . IFileStore ; import org . eclipse . core . filesystem . provider . FileInfo ; import org . eclipse . core . filesystem . provider . FileStore ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Status ; public class DebugFileStore extends FileStore { class DebugOutputStream extends ByteArrayOutputStream { @Override public void close ( ) throws IOException { super . close ( ) ; DebugFileSystem . getDefault ( ) . setContents ( toURI ( ) , toByteArray ( ) ) ; } } private final URI uri ; public DebugFileStore ( URI id ) { uri = id ; } @Override public String [ ] childNames ( int options , IProgressMonitor monitor ) throws CoreException { URI [ ] uris = DebugFileSystem . getDefault ( ) . getFileURIs ( ) ; List < String > children = new ArrayList < String > ( ) ; IPath me = getPath ( ) ; for ( int i = <int> ; i < uris . length ; i + + ) { URI id = uris [ i ] ; Path path = new Path ( id . getPath ( ) ) ; if ( path . segmentCount ( ) > <int> ) { if ( path . removeLastSegments ( <int> ) . equals ( me ) ) { children . add ( path . lastSegment ( ) ) ; } } } return children . toArray ( new String [ children . size ( ) ] ) ; } @Override public IFileInfo fetchInfo ( int options , IProgressMonitor monitor ) throws CoreException { byte [ ] contents = DebugFileSystem . getDefault ( ) . getContents ( toURI ( ) ) ; FileInfo info = new FileInfo ( ) ; info . setName ( getName ( ) ) ; info . setAttribute ( EFS . ATTRIBUTE_READ_ONLY , false ) ; if ( contents = = null ) { info . setExists ( false ) ; info . setLength ( <int> L ) ; } else { info . setExists ( true ) ; info . setLength ( contents . length ) ; info . setDirectory ( contents = = DebugFileSystem . DIRECTORY_BYTES ) ; if ( info . isDirectory ( ) ) { info . setAttribute ( EFS . ATTRIBUTE_EXECUTABLE , true ) ; } } return info ; } @Override public IFileStore getChild ( String name ) { try { return new DebugFileStore ( new URI ( getFileSystem ( ) . getScheme ( ) , getPath ( ) . append ( name ) . toString ( ) , null ) ) ; } catch ( URISyntaxException e ) { } return null ; } @Override public String getName ( ) { IPath path = getPath ( ) ; if ( path . segmentCount ( ) > <int> ) { return path . lastSegment ( ) ; } return <str> ; } private IPath getPath ( ) { URI me = toURI ( ) ; IPath path = new Path ( me . getPath ( ) ) ; return path ; } @Override public IFileStore getParent ( ) { IPath path = getPath ( ) ; if ( path . segmentCount ( ) > <int> ) { try { return new DebugFileStore ( new URI ( getFileSystem ( ) . getScheme ( ) , path . removeLastSegments ( <int> ) . toString ( ) , null ) ) ; } catch ( URISyntaxException e ) { } } return null ; } @Override public InputStream openInputStream ( int options , IProgressMonitor monitor ) throws CoreException { byte [ ] contents = DebugFileSystem . getDefault ( ) . getContents ( toURI ( ) ) ; if ( contents ! = null ) { return new ByteArrayInputStream ( contents ) ; } throw new CoreException ( new Status ( IStatus . ERROR , <str> , <str> + toURI ( ) ) ) ; } @Override public OutputStream openOutputStream ( int options , IProgressMonitor monitor ) throws CoreException { return new DebugOutputStream ( ) ; } @Override public IFileStore mkdir ( int options , IProgressMonitor monitor ) throws CoreException { IFileInfo info = fetchInfo ( ) ; if ( info . exists ( ) ) { if ( ! info . isDirectory ( ) ) { throw new CoreException ( new Status ( IStatus . ERROR , <str> , <str> + toURI ( ) ) ) ; } } else { IFileStore parent = getParent ( ) ; if ( parent . fetchInfo ( ) . exists ( ) ) { DebugFileSystem . getDefault ( ) . setContents ( toURI ( ) , DebugFileSystem . DIRECTORY_BYTES ) ; } else { if ( ( options & EFS . SHALLOW ) > <int> ) { throw new CoreException ( new Status ( IStatus . ERROR , <str> , <str> + toURI ( ) ) ) ; } else { parent . mkdir ( EFS . NONE , null ) ; } } } return this ; } @Override public URI toURI ( ) { return uri ; } @Override public void delete ( int options , IProgressMonitor monitor ) throws CoreException { DebugFileSystem . getDefault ( ) . delete ( toURI ( ) ) ; } } 

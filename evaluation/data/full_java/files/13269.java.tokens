package org . gradle . integtests . fixtures . executer ; import org . gradle . test . fixtures . file . TestDirectoryProvider ; public class GradleContextualExecuter extends AbstractDelegatingGradleExecuter { private static final String EXECUTER_SYS_PROP = <str> ; private static final String UNKNOWN_OS_SYS_PROP = <str> ; private Executer executerType ; private static enum Executer { embedded ( false ) , forking ( true ) , daemon ( true ) , parallel ( true , true ) ; final public boolean forks ; final public boolean executeParallel ; Executer ( boolean forks ) { this ( forks , false ) ; } Executer ( boolean forks , boolean parallel ) { this . forks = forks ; this . executeParallel = parallel ; } } private static Executer getSystemPropertyExecuter ( ) { return Executer . valueOf ( System . getProperty ( EXECUTER_SYS_PROP , Executer . forking . toString ( ) ) ) ; } public static boolean isEmbedded ( ) { return ! getSystemPropertyExecuter ( ) . forks ; } public static boolean isDaemon ( ) { return getSystemPropertyExecuter ( ) = = Executer . daemon ; } public static boolean isLongLivingProcess ( ) { return isEmbedded ( ) | | isDaemon ( ) ; } public static boolean isParallel ( ) { return getSystemPropertyExecuter ( ) . executeParallel ; } public GradleContextualExecuter ( GradleDistribution distribution , TestDirectoryProvider testDirectoryProvider ) { super ( distribution , testDirectoryProvider ) ; this . executerType = getSystemPropertyExecuter ( ) ; } protected GradleExecuter configureExecuter ( ) { if ( ! getClass ( ) . desiredAssertionStatus ( ) ) { throw new RuntimeException ( <str> ) ; } GradleExecuter gradleExecuter = createExecuter ( executerType ) ; configureExecuter ( gradleExecuter ) ; try { gradleExecuter . assertCanExecute ( ) ; } catch ( AssertionError assertionError ) { gradleExecuter = new ForkingGradleExecuter ( getDistribution ( ) , getTestDirectoryProvider ( ) ) ; configureExecuter ( gradleExecuter ) ; } return gradleExecuter ; } private void configureExecuter ( GradleExecuter gradleExecuter ) { copyTo ( gradleExecuter ) ; if ( System . getProperty ( UNKNOWN_OS_SYS_PROP ) ! = null ) { gradleExecuter . withBuildJvmOpts ( <str> , <str> , <str> ) ; } } private GradleExecuter createExecuter ( Executer executerType ) { switch ( executerType ) { case embedded : return new InProcessGradleExecuter ( getDistribution ( ) , getTestDirectoryProvider ( ) ) ; case daemon : return new DaemonGradleExecuter ( getDistribution ( ) , getTestDirectoryProvider ( ) ) ; case parallel : return new ParallelForkingGradleExecuter ( getDistribution ( ) , getTestDirectoryProvider ( ) ) ; case forking : return new ForkingGradleExecuter ( getDistribution ( ) , getTestDirectoryProvider ( ) ) ; default : throw new RuntimeException ( <str> + executerType ) ; } } } 

package org . eclipse . debug . internal . core ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . TreeMap ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . TransformerException ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import com . ibm . icu . text . MessageFormat ; public class LaunchConfigurationInfo { private static final String KEY = <str> ; private static final String VALUE = <str> ; private static final String SET_ENTRY = <str> ; private static final String LAUNCH_CONFIGURATION = <str> ; private static final String MAP_ENTRY = <str> ; private static final String LIST_ENTRY = <str> ; private static final String SET_ATTRIBUTE = <str> ; private static final String MAP_ATTRIBUTE = <str> ; private static final String LIST_ATTRIBUTE = <str> ; private static final String BOOLEAN_ATTRIBUTE = <str> ; private static final String INT_ATTRIBUTE = <str> ; private static final String STRING_ATTRIBUTE = <str> ; private static final String TYPE = <str> ; private TreeMap < String , Object > fAttributes ; private ILaunchConfigurationType fType ; private static boolean fgIsSun14x = false ; static { String vendor = System . getProperty ( <str> ) ; if ( vendor . startsWith ( <str> ) ) { String version = System . getProperty ( <str> ) ; if ( version . startsWith ( <str> ) ) { fgIsSun14x = true ; } } } protected LaunchConfigurationInfo ( ) { setAttributeTable ( new TreeMap < String , Object > ( ) ) ; } private TreeMap < String , Object > getAttributeTable ( ) { return fAttributes ; } private void setAttributeTable ( TreeMap < String , Object > table ) { fAttributes = table ; } protected void setAttributes ( Map < String , ? > map ) { if ( map = = null ) { setAttributeTable ( new TreeMap < String , Object > ( ) ) ; return ; } setAttributeTable ( new TreeMap < String , Object > ( map ) ) ; } protected String getStringAttribute ( String key , String defaultValue ) throws CoreException { Object attr = getAttributeTable ( ) . get ( key ) ; if ( attr ! = null ) { if ( attr instanceof String ) { return ( String ) attr ; } throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , MessageFormat . format ( DebugCoreMessages . LaunchConfigurationInfo_Attribute__0__is_not_of_type_java_lang_String__1 , new Object [ ] { key } ) , null ) ) ; } return defaultValue ; } protected int getIntAttribute ( String key , int defaultValue ) throws CoreException { Object attr = getAttributeTable ( ) . get ( key ) ; if ( attr ! = null ) { if ( attr instanceof Integer ) { return ( ( Integer ) attr ) . intValue ( ) ; } throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , MessageFormat . format ( DebugCoreMessages . LaunchConfigurationInfo_Attribute__0__is_not_of_type_int__2 , new Object [ ] { key } ) , null ) ) ; } return defaultValue ; } protected boolean getBooleanAttribute ( String key , boolean defaultValue ) throws CoreException { Object attr = getAttributeTable ( ) . get ( key ) ; if ( attr ! = null ) { if ( attr instanceof Boolean ) { return ( ( Boolean ) attr ) . booleanValue ( ) ; } throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , MessageFormat . format ( DebugCoreMessages . LaunchConfigurationInfo_Attribute__0__is_not_of_type_boolean__3 , new Object [ ] { key } ) , null ) ) ; } return defaultValue ; } @SuppressWarnings ( <str> ) protected List < String > getListAttribute ( String key , List < String > defaultValue ) throws CoreException { Object attr = getAttributeTable ( ) . get ( key ) ; if ( attr ! = null ) { if ( attr instanceof List ) { return ( List < String > ) attr ; } throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , MessageFormat . format ( DebugCoreMessages . LaunchConfigurationInfo_Attribute__0__is_not_of_type_java_util_List__1 , new Object [ ] { key } ) , null ) ) ; } return defaultValue ; } @SuppressWarnings ( <str> ) protected Set < String > getSetAttribute ( String key , Set < String > defaultValue ) throws CoreException { Object attr = getAttributeTable ( ) . get ( key ) ; if ( attr ! = null ) { if ( attr instanceof Set ) { return ( Set < String > ) attr ; } throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , MessageFormat . format ( DebugCoreMessages . LaunchConfigurationInfo_35 , new Object [ ] { key } ) , null ) ) ; } return defaultValue ; } @SuppressWarnings ( <str> ) protected Map < String , String > getMapAttribute ( String key , Map < String , String > defaultValue ) throws CoreException { Object attr = getAttributeTable ( ) . get ( key ) ; if ( attr ! = null ) { if ( attr instanceof Map ) { return ( Map < String , String > ) attr ; } throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , MessageFormat . format ( DebugCoreMessages . LaunchConfigurationInfo_Attribute__0__is_not_of_type_java_util_Map__1 , new Object [ ] { key } ) , null ) ) ; } return defaultValue ; } protected void setType ( ILaunchConfigurationType type ) { fType = type ; } protected ILaunchConfigurationType getType ( ) { return fType ; } protected LaunchConfigurationInfo getCopy ( ) { LaunchConfigurationInfo copy = new LaunchConfigurationInfo ( ) ; copy . setType ( getType ( ) ) ; copy . setAttributeTable ( getAttributes ( ) ) ; return copy ; } protected TreeMap < String , Object > getAttributes ( ) { return new TreeMap < String , Object > ( getAttributeTable ( ) ) ; } protected void setAttribute ( String key , Object value ) { if ( value = = null ) { getAttributeTable ( ) . remove ( key ) ; } else { getAttributeTable ( ) . put ( key , value ) ; } } @SuppressWarnings ( <str> ) protected String getAsXML ( ) throws CoreException , IOException , ParserConfigurationException , TransformerException { Document doc = LaunchManager . getDocument ( ) ; Element configRootElement = doc . createElement ( LAUNCH_CONFIGURATION ) ; doc . appendChild ( configRootElement ) ; configRootElement . setAttribute ( TYPE , getType ( ) . getIdentifier ( ) ) ; for ( String key : getAttributeTable ( ) . keySet ( ) ) { if ( key = = null ) { throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , DebugCoreMessages . LaunchConfigurationInfo_36 , null ) ) ; } Object value = getAttributeTable ( ) . get ( key ) ; if ( value = = null ) { continue ; } Element element = null ; String valueString = null ; if ( value instanceof String ) { valueString = ( String ) value ; element = createKeyValueElement ( doc , STRING_ATTRIBUTE , key , valueString ) ; } else if ( value instanceof Integer ) { valueString = ( ( Integer ) value ) . toString ( ) ; element = createKeyValueElement ( doc , INT_ATTRIBUTE , key , valueString ) ; } else if ( value instanceof Boolean ) { valueString = ( ( Boolean ) value ) . toString ( ) ; element = createKeyValueElement ( doc , BOOLEAN_ATTRIBUTE , key , valueString ) ; } else if ( value instanceof List ) { element = createListElement ( doc , LIST_ATTRIBUTE , key , ( List < String > ) value ) ; } else if ( value instanceof Map ) { element = createMapElement ( doc , MAP_ATTRIBUTE , key , ( Map < String , String > ) value ) ; } else if ( value instanceof Set ) { element = createSetElement ( doc , SET_ATTRIBUTE , key , ( Set < String > ) value ) ; } configRootElement . appendChild ( element ) ; } return LaunchManager . serializeDocument ( doc ) ; } protected Element createKeyValueElement ( Document doc , String elementType , String key , String value ) { Element element = doc . createElement ( elementType ) ; element . setAttribute ( KEY , key ) ; element . setAttribute ( VALUE , value ) ; return element ; } protected Element createListElement ( Document doc , String elementType , String listKey , List < String > list ) { Element listElement = doc . createElement ( elementType ) ; listElement . setAttribute ( KEY , listKey ) ; for ( String value : list ) { Element element = doc . createElement ( LIST_ENTRY ) ; element . setAttribute ( VALUE , value ) ; listElement . appendChild ( element ) ; } return listElement ; } protected Element createSetElement ( Document doc , String elementType , String setKey , Set < String > set ) { Element setElement = doc . createElement ( elementType ) ; setElement . setAttribute ( KEY , setKey ) ; List < String > list = new ArrayList < String > ( set ) ; Collections . sort ( list ) ; Element element = null ; for ( String str : list ) { element = doc . createElement ( SET_ENTRY ) ; element . setAttribute ( VALUE , str ) ; setElement . appendChild ( element ) ; } return setElement ; } protected Element createMapElement ( Document doc , String elementType , String mapKey , Map < String , String > map ) { Element mapElement = doc . createElement ( elementType ) ; mapElement . setAttribute ( KEY , mapKey ) ; List < String > keys = new ArrayList < String > ( map . keySet ( ) ) ; Collections . sort ( keys ) ; for ( String key : keys ) { String value = map . get ( key ) ; Element element = doc . createElement ( MAP_ENTRY ) ; element . setAttribute ( KEY , key ) ; element . setAttribute ( VALUE , value ) ; mapElement . appendChild ( element ) ; } return mapElement ; } protected void initializeFromXML ( Element root ) throws CoreException { if ( ! root . getNodeName ( ) . equalsIgnoreCase ( LAUNCH_CONFIGURATION ) ) { throw getInvalidFormatDebugException ( ) ; } String id = root . getAttribute ( TYPE ) ; if ( id = = null ) { throw getInvalidFormatDebugException ( ) ; } ILaunchConfigurationType type = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchConfigurationType ( id ) ; if ( type = = null ) { String message = MessageFormat . format ( DebugCoreMessages . LaunchConfigurationInfo_missing_type , new Object [ ] { id } ) ; throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . MISSING_LAUNCH_CONFIGURATION_TYPE , message , null ) ) ; } setType ( type ) ; NodeList list = root . getChildNodes ( ) ; Node node = null ; Element element = null ; String nodeName = null ; for ( int i = <int> ; i < list . getLength ( ) ; + + i ) { node = list . item ( i ) ; short nodeType = node . getNodeType ( ) ; if ( nodeType = = Node . ELEMENT_NODE ) { element = ( Element ) node ; nodeName = element . getNodeName ( ) ; if ( nodeName . equalsIgnoreCase ( STRING_ATTRIBUTE ) ) { setStringAttribute ( element ) ; } else if ( nodeName . equalsIgnoreCase ( INT_ATTRIBUTE ) ) { setIntegerAttribute ( element ) ; } else if ( nodeName . equalsIgnoreCase ( BOOLEAN_ATTRIBUTE ) ) { setBooleanAttribute ( element ) ; } else if ( nodeName . equalsIgnoreCase ( LIST_ATTRIBUTE ) ) { setListAttribute ( element ) ; } else if ( nodeName . equalsIgnoreCase ( MAP_ATTRIBUTE ) ) { setMapAttribute ( element ) ; } else if ( nodeName . equalsIgnoreCase ( SET_ATTRIBUTE ) ) { setSetAttribute ( element ) ; } } } } protected void setStringAttribute ( Element element ) throws CoreException { setAttribute ( getKeyAttribute ( element ) , getValueAttribute ( element ) ) ; } protected void setIntegerAttribute ( Element element ) throws CoreException { setAttribute ( getKeyAttribute ( element ) , Integer . valueOf ( getValueAttribute ( element ) ) ) ; } protected void setBooleanAttribute ( Element element ) throws CoreException { setAttribute ( getKeyAttribute ( element ) , Boolean . valueOf ( getValueAttribute ( element ) ) ) ; } protected void setListAttribute ( Element element ) throws CoreException { String listKey = element . getAttribute ( KEY ) ; NodeList nodeList = element . getChildNodes ( ) ; int entryCount = nodeList . getLength ( ) ; List < String > list = new ArrayList < String > ( entryCount ) ; Node node = null ; Element selement = null ; for ( int i = <int> ; i < entryCount ; i + + ) { node = nodeList . item ( i ) ; if ( node . getNodeType ( ) = = Node . ELEMENT_NODE ) { selement = ( Element ) node ; if ( ! selement . getNodeName ( ) . equalsIgnoreCase ( LIST_ENTRY ) ) { throw getInvalidFormatDebugException ( ) ; } list . add ( getValueAttribute ( selement ) ) ; } } setAttribute ( listKey , list ) ; } protected void setSetAttribute ( Element element ) throws CoreException { String setKey = element . getAttribute ( KEY ) ; NodeList nodeList = element . getChildNodes ( ) ; int entryCount = nodeList . getLength ( ) ; Set < String > set = new HashSet < String > ( entryCount ) ; Node node = null ; Element selement = null ; for ( int i = <int> ; i < entryCount ; i + + ) { node = nodeList . item ( i ) ; if ( node . getNodeType ( ) = = Node . ELEMENT_NODE ) { selement = ( Element ) node ; if ( ! selement . getNodeName ( ) . equalsIgnoreCase ( SET_ENTRY ) ) { throw getInvalidFormatDebugException ( ) ; } set . add ( getValueAttribute ( selement ) ) ; } } setAttribute ( setKey , set ) ; } protected void setMapAttribute ( Element element ) throws CoreException { String mapKey = element . getAttribute ( KEY ) ; NodeList nodeList = element . getChildNodes ( ) ; int entryCount = nodeList . getLength ( ) ; Map < String , String > map = new HashMap < String , String > ( entryCount ) ; Node node = null ; Element selement = null ; for ( int i = <int> ; i < entryCount ; i + + ) { node = nodeList . item ( i ) ; if ( node . getNodeType ( ) = = Node . ELEMENT_NODE ) { selement = ( Element ) node ; if ( ! selement . getNodeName ( ) . equalsIgnoreCase ( MAP_ENTRY ) ) { throw getInvalidFormatDebugException ( ) ; } map . put ( getKeyAttribute ( selement ) , getValueAttribute ( selement ) ) ; } } setAttribute ( mapKey , map ) ; } protected String getKeyAttribute ( Element element ) throws CoreException { String key = element . getAttribute ( KEY ) ; if ( key = = null ) { throw getInvalidFormatDebugException ( ) ; } return key ; } protected String getValueAttribute ( Element element ) throws CoreException { String value = element . getAttribute ( VALUE ) ; if ( value = = null ) { throw getInvalidFormatDebugException ( ) ; } return value ; } protected DebugException getInvalidFormatDebugException ( ) { return new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , DebugCoreMessages . LaunchConfigurationInfo_Invalid_launch_configuration_XML__10 , null ) ) ; } @Override public boolean equals ( Object obj ) { if ( ! ( obj instanceof LaunchConfigurationInfo ) ) { return false ; } LaunchConfigurationInfo other = ( LaunchConfigurationInfo ) obj ; if ( ! fType . getIdentifier ( ) . equals ( other . getType ( ) . getIdentifier ( ) ) ) { return false ; } return compareAttributes ( fAttributes , other . getAttributeTable ( ) ) ; } protected boolean compareAttributes ( TreeMap < String , Object > map1 , TreeMap < String , Object > map2 ) { LaunchManager manager = ( LaunchManager ) DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; if ( map1 . size ( ) = = map2 . size ( ) ) { Iterator < String > attributes = map1 . keySet ( ) . iterator ( ) ; while ( attributes . hasNext ( ) ) { String key = attributes . next ( ) ; Object attr1 = map1 . get ( key ) ; Object attr2 = map2 . get ( key ) ; if ( attr2 = = null ) { return false ; } Comparator < Object > comp = manager . getComparator ( key ) ; if ( comp = = null ) { if ( fgIsSun14x ) { if ( attr2 instanceof String & attr1 instanceof String ) { attr1 = ( ( String ) attr1 ) . replaceAll ( <str> , <str> ) ; attr2 = ( ( String ) attr2 ) . replaceAll ( <str> , <str> ) ; } } if ( ! attr1 . equals ( attr2 ) ) { return false ; } } else { if ( comp . compare ( attr1 , attr2 ) ! = <int> ) { return false ; } } } return true ; } return false ; } @Override public int hashCode ( ) { return fType . hashCode ( ) + fAttributes . size ( ) ; } protected boolean hasAttribute ( String attributeName ) { return fAttributes . containsKey ( attributeName ) ; } protected Object removeAttribute ( String attributeName ) { if ( attributeName ! = null ) { return fAttributes . remove ( attributeName ) ; } return null ; } } 

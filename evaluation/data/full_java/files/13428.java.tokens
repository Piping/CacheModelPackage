package org . gradle . api . internal . tasks . compile ; import org . codehaus . groovy . transform . GroovyASTTransformationClass ; import org . gradle . internal . classloader . TransformingClassLoader ; import org . gradle . internal . classpath . ClassPath ; import org . objectweb . asm . * ; import java . util . ArrayList ; import java . util . List ; class GroovyCompileTransformingClassLoader extends TransformingClassLoader { private static final String ANNOTATION_DESCRIPTOR = Type . getType ( GroovyASTTransformationClass . class ) . getDescriptor ( ) ; public GroovyCompileTransformingClassLoader ( ClassLoader parent , ClassPath classPath ) { super ( parent , classPath ) ; } @Override protected byte [ ] transform ( byte [ ] bytes ) { ClassReader classReader = new ClassReader ( bytes ) ; AnnotationDetector detector = new AnnotationDetector ( ) ; classReader . accept ( detector , ClassReader . SKIP_DEBUG | ClassReader . SKIP_CODE ) ; if ( ! detector . found ) { return bytes ; } ClassWriter classWriter = new ClassWriter ( <int> ) ; classReader . accept ( new TransformingAdapter ( classWriter ) , <int> ) ; bytes = classWriter . toByteArray ( ) ; return bytes ; } private static class AnnotationDetector extends ClassVisitor { private boolean found ; private AnnotationDetector ( ) { super ( Opcodes . ASM5 ) ; } public AnnotationVisitor visitAnnotation ( String desc , boolean visible ) { if ( desc . equals ( ANNOTATION_DESCRIPTOR ) ) { found = true ; } return null ; } } private static class TransformingAdapter extends ClassVisitor { public TransformingAdapter ( ClassWriter classWriter ) { super ( Opcodes . ASM5 , classWriter ) ; } @Override public AnnotationVisitor visitAnnotation ( String desc , boolean visible ) { if ( desc . equals ( ANNOTATION_DESCRIPTOR ) ) { return new AnnotationTransformingVisitor ( super . visitAnnotation ( desc , visible ) ) ; } return super . visitAnnotation ( desc , visible ) ; } private static class AnnotationTransformingVisitor extends AnnotationVisitor { private final List < String > names = new ArrayList < String > ( ) ; public AnnotationTransformingVisitor ( AnnotationVisitor annotationVisitor ) { super ( Opcodes . ASM5 , annotationVisitor ) ; } public AnnotationVisitor visitArray ( String name ) { if ( name . equals ( <str> ) ) { return new AnnotationVisitor ( Opcodes . ASM5 ) { @Override public void visit ( String name , Object value ) { Type type = ( Type ) value ; names . add ( type . getClassName ( ) ) ; } } ; } else if ( name . equals ( <str> ) ) { return new AnnotationVisitor ( Opcodes . ASM5 ) { @Override public void visit ( String name , Object value ) { String type = ( String ) value ; names . add ( type ) ; } } ; } else { return super . visitArray ( name ) ; } } public void visitEnd ( ) { if ( ! names . isEmpty ( ) ) { AnnotationVisitor visitor = super . visitArray ( <str> ) ; for ( String name : names ) { visitor . visit ( null , name ) ; } visitor . visitEnd ( ) ; } super . visitEnd ( ) ; } } } } 

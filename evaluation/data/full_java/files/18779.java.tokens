package io . netty . buffer ; import io . netty . util . internal . PlatformDependent ; import java . nio . ByteBuffer ; final class ReadOnlyUnsafeDirectByteBuf extends ReadOnlyByteBufferBuf { private final long memoryAddress ; ReadOnlyUnsafeDirectByteBuf ( ByteBufAllocator allocator , ByteBuffer buffer ) { super ( allocator , buffer ) ; memoryAddress = PlatformDependent . directBufferAddress ( buffer ) ; } @Override protected byte _getByte ( int index ) { return UnsafeByteBufUtil . getByte ( addr ( index ) ) ; } @Override protected short _getShort ( int index ) { return UnsafeByteBufUtil . getShort ( addr ( index ) ) ; } @Override protected int _getUnsignedMedium ( int index ) { return UnsafeByteBufUtil . getUnsignedMedium ( addr ( index ) ) ; } @Override protected int _getInt ( int index ) { return UnsafeByteBufUtil . getInt ( addr ( index ) ) ; } @Override protected long _getLong ( int index ) { return UnsafeByteBufUtil . getLong ( addr ( index ) ) ; } @Override public ByteBuf getBytes ( int index , ByteBuf dst , int dstIndex , int length ) { checkIndex ( index , length ) ; if ( dst = = null ) { throw new NullPointerException ( <str> ) ; } if ( dstIndex < <int> | | dstIndex > dst . capacity ( ) - length ) { throw new IndexOutOfBoundsException ( <str> + dstIndex ) ; } if ( dst . hasMemoryAddress ( ) ) { PlatformDependent . copyMemory ( addr ( index ) , dst . memoryAddress ( ) + dstIndex , length ) ; } else if ( dst . hasArray ( ) ) { PlatformDependent . copyMemory ( addr ( index ) , dst . array ( ) , dst . arrayOffset ( ) + dstIndex , length ) ; } else { dst . setBytes ( dstIndex , this , index , length ) ; } return this ; } @Override public ByteBuf getBytes ( int index , byte [ ] dst , int dstIndex , int length ) { checkIndex ( index , length ) ; if ( dst = = null ) { throw new NullPointerException ( <str> ) ; } if ( dstIndex < <int> | | dstIndex > dst . length - length ) { throw new IndexOutOfBoundsException ( String . format ( <str> , dstIndex , length , dst . length ) ) ; } if ( length ! = <int> ) { PlatformDependent . copyMemory ( addr ( index ) , dst , dstIndex , length ) ; } return this ; } @Override public ByteBuf getBytes ( int index , ByteBuffer dst ) { checkIndex ( index ) ; if ( dst = = null ) { throw new NullPointerException ( <str> ) ; } int bytesToCopy = Math . min ( capacity ( ) - index , dst . remaining ( ) ) ; ByteBuffer tmpBuf = internalNioBuffer ( ) ; tmpBuf . clear ( ) . position ( index ) . limit ( index + bytesToCopy ) ; dst . put ( tmpBuf ) ; return this ; } @Override public ByteBuf copy ( int index , int length ) { checkIndex ( index , length ) ; ByteBuf copy = alloc ( ) . directBuffer ( length , maxCapacity ( ) ) ; if ( length ! = <int> ) { if ( copy . hasMemoryAddress ( ) ) { PlatformDependent . copyMemory ( addr ( index ) , copy . memoryAddress ( ) , length ) ; copy . setIndex ( <int> , length ) ; } else { copy . writeBytes ( this , index , length ) ; } } return copy ; } private long addr ( int index ) { return memoryAddress + index ; } } 

package org . apache . lucene . search . postingshighlight ; import org . apache . lucene . search . highlight . DefaultEncoder ; import org . apache . lucene . search . highlight . SimpleHTMLEncoder ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . notNullValue ; public class CustomPassageFormatterTests extends ESTestCase { public void testSimpleFormat ( ) { String content = <str> ; CustomPassageFormatter passageFormatter = new CustomPassageFormatter ( <str> , <str> , new DefaultEncoder ( ) ) ; Passage [ ] passages = new Passage [ <int> ] ; String match = <str> ; BytesRef matchBytesRef = new BytesRef ( match ) ; Passage passage1 = new Passage ( ) ; int start = content . indexOf ( match ) ; int end = start + match . length ( ) ; passage1 . startOffset = <int> ; passage1 . endOffset = end + <int> ; passage1 . addMatch ( start , end , matchBytesRef ) ; passages [ <int> ] = passage1 ; Passage passage2 = new Passage ( ) ; start = content . lastIndexOf ( match ) ; end = start + match . length ( ) ; passage2 . startOffset = passage1 . endOffset ; passage2 . endOffset = end + <int> ; passage2 . addMatch ( start , end , matchBytesRef ) ; passages [ <int> ] = passage2 ; Passage passage3 = new Passage ( ) ; passage3 . startOffset = passage2 . endOffset ; passage3 . endOffset = content . length ( ) ; passages [ <int> ] = passage3 ; Snippet [ ] fragments = passageFormatter . format ( passages , content ) ; assertThat ( fragments , notNullValue ( ) ) ; assertThat ( fragments . length , equalTo ( <int> ) ) ; assertThat ( fragments [ <int> ] . getText ( ) , equalTo ( <str> ) ) ; assertThat ( fragments [ <int> ] . isHighlighted ( ) , equalTo ( true ) ) ; assertThat ( fragments [ <int> ] . getText ( ) , equalTo ( <str> ) ) ; assertThat ( fragments [ <int> ] . isHighlighted ( ) , equalTo ( true ) ) ; assertThat ( fragments [ <int> ] . getText ( ) , equalTo ( <str> ) ) ; assertThat ( fragments [ <int> ] . isHighlighted ( ) , equalTo ( false ) ) ; } public void testHtmlEncodeFormat ( ) { String content = <str> ; CustomPassageFormatter passageFormatter = new CustomPassageFormatter ( <str> , <str> , new SimpleHTMLEncoder ( ) ) ; Passage [ ] passages = new Passage [ <int> ] ; String match = <str> ; BytesRef matchBytesRef = new BytesRef ( match ) ; Passage passage1 = new Passage ( ) ; int start = content . indexOf ( match ) ; int end = start + match . length ( ) ; passage1 . startOffset = <int> ; passage1 . endOffset = end + <int> ; passage1 . addMatch ( start , end , matchBytesRef ) ; passages [ <int> ] = passage1 ; Passage passage2 = new Passage ( ) ; start = content . lastIndexOf ( match ) ; end = start + match . length ( ) ; passage2 . startOffset = passage1 . endOffset ; passage2 . endOffset = content . length ( ) ; passage2 . addMatch ( start , end , matchBytesRef ) ; passages [ <int> ] = passage2 ; Snippet [ ] fragments = passageFormatter . format ( passages , content ) ; assertThat ( fragments , notNullValue ( ) ) ; assertThat ( fragments . length , equalTo ( <int> ) ) ; assertThat ( fragments [ <int> ] . getText ( ) , equalTo ( <str> ) ) ; assertThat ( fragments [ <int> ] . getText ( ) , equalTo ( <str> ) ) ; } } 

package org . gradle . messaging . remote . internal ; import org . gradle . messaging . remote . internal . protocol . EndOfStreamEvent ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class RemoteDisconnectProtocol implements Protocol < Message > { private static final Logger LOGGER = LoggerFactory . getLogger ( RemoteDisconnectProtocol . class ) ; private ProtocolContext < Message > context ; private boolean stopping ; private boolean outgoingStopped ; private boolean finished ; public void start ( ProtocolContext < Message > context ) { this . context = context ; } public void handleIncoming ( Message message ) { context . dispatchIncoming ( message ) ; } public void handleOutgoing ( Message message ) { if ( message instanceof EndOfStreamEvent ) { if ( stopping ) { context . stopped ( ) ; return ; } context . dispatchOutgoing ( message ) ; outgoingStopped = true ; finished = true ; } else if ( ! outgoingStopped ) { context . dispatchOutgoing ( message ) ; } else { LOGGER . debug ( <str> , message ) ; } } public void stopRequested ( ) { if ( finished ) { context . stopped ( ) ; return ; } if ( ! outgoingStopped ) { context . dispatchOutgoing ( new EndOfStreamEvent ( ) ) ; outgoingStopped = true ; } context . stopLater ( ) ; stopping = true ; } } 

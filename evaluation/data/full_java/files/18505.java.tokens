package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . Box2DDebugRenderer ; import com . badlogic . gdx . physics . box2d . CircleShape ; import com . badlogic . gdx . physics . box2d . MassData ; import com . badlogic . gdx . physics . box2d . World ; import com . badlogic . gdx . tests . utils . GdxTest ; public class KinematicBodyTest extends GdxTest { OrthographicCamera cam ; World world ; Box2DDebugRenderer renderer ; public void create ( ) { cam = new OrthographicCamera ( <int> , <int> ) ; cam . position . set ( <int> , <int> , <int> ) ; renderer = new Box2DDebugRenderer ( ) ; world = new World ( new Vector2 ( <int> , - <int> ) , true ) ; Body body = world . createBody ( new BodyDef ( ) ) ; CircleShape shape = new CircleShape ( ) ; shape . setRadius ( <float> ) ; MassData mass = new MassData ( ) ; mass . mass = <float> ; body . setMassData ( mass ) ; body . setFixedRotation ( true ) ; body . setType ( BodyType . KinematicBody ) ; body . createFixture ( shape , <int> ) ; body . setBullet ( true ) ; body . setTransform ( new Vector2 ( <int> , <int> ) , body . getAngle ( ) ) ; body . setLinearVelocity ( new Vector2 ( <int> f , <int> ) ) ; } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; world . step ( Math . min ( <float> , Gdx . graphics . getDeltaTime ( ) ) , <int> , <int> ) ; cam . update ( ) ; renderer . render ( world , cam . combined ) ; } @Override public void dispose ( ) { world . dispose ( ) ; renderer . dispose ( ) ; } } 

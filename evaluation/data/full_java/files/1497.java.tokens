package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import java . util . * ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . ImmutableSet ; import org . junit . Test ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . fail ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . serializers . * ; public class CollectionTypeTest { @Test public void testListComparison ( ) { ListType < String > lt = ListType . getInstance ( UTF8Type . instance , true ) ; ByteBuffer [ ] lists = new ByteBuffer [ ] { ByteBufferUtil . EMPTY_BYTE_BUFFER , lt . decompose ( ImmutableList . < String > of ( ) ) , lt . decompose ( ImmutableList . of ( <str> ) ) , lt . decompose ( ImmutableList . of ( <str> ) ) , lt . decompose ( ImmutableList . of ( <str> , <str> ) ) , lt . decompose ( ImmutableList . of ( <str> , <str> ) ) } ; for ( int i = <int> ; i < lists . length ; i + + ) assertEquals ( lt . compare ( lists [ i ] , lists [ i ] ) , <int> ) ; for ( int i = <int> ; i < lists . length - <int> ; i + + ) { for ( int j = i + <int> ; j < lists . length ; j + + ) { assertEquals ( String . format ( <str> , i , j ) , - <int> , lt . compare ( lists [ i ] , lists [ j ] ) ) ; assertEquals ( String . format ( <str> , j , i ) , <int> , lt . compare ( lists [ j ] , lists [ i ] ) ) ; } } } @Test public void testSetComparison ( ) { SetType < String > st = SetType . getInstance ( UTF8Type . instance , true ) ; ByteBuffer [ ] sets = new ByteBuffer [ ] { ByteBufferUtil . EMPTY_BYTE_BUFFER , st . decompose ( ImmutableSet . < String > of ( ) ) , st . decompose ( ImmutableSet . of ( <str> ) ) , st . decompose ( ImmutableSet . of ( <str> ) ) , st . decompose ( ImmutableSet . of ( <str> , <str> ) ) , st . decompose ( ImmutableSet . of ( <str> , <str> ) ) } ; for ( int i = <int> ; i < sets . length ; i + + ) assertEquals ( st . compare ( sets [ i ] , sets [ i ] ) , <int> ) ; for ( int i = <int> ; i < sets . length - <int> ; i + + ) { for ( int j = i + <int> ; j < sets . length ; j + + ) { assertEquals ( String . format ( <str> , i , j ) , - <int> , st . compare ( sets [ i ] , sets [ j ] ) ) ; assertEquals ( String . format ( <str> , j , i ) , <int> , st . compare ( sets [ j ] , sets [ i ] ) ) ; } } } @Test public void testMapComparison ( ) { MapType < String , String > mt = MapType . getInstance ( UTF8Type . instance , UTF8Type . instance , true ) ; ByteBuffer [ ] maps = new ByteBuffer [ ] { ByteBufferUtil . EMPTY_BYTE_BUFFER , mt . decompose ( ImmutableMap . < String , String > of ( ) ) , mt . decompose ( ImmutableMap . of ( <str> , <str> ) ) , mt . decompose ( ImmutableMap . of ( <str> , <str> ) ) , mt . decompose ( ImmutableMap . of ( <str> , <str> ) ) , mt . decompose ( ImmutableMap . of ( <str> , <str> , <str> , <str> ) ) , mt . decompose ( ImmutableMap . of ( <str> , <str> , <str> , <str> ) ) , mt . decompose ( ImmutableMap . of ( <str> , <str> , <str> , <str> ) ) } ; for ( int i = <int> ; i < maps . length ; i + + ) assertEquals ( mt . compare ( maps [ i ] , maps [ i ] ) , <int> ) ; for ( int i = <int> ; i < maps . length - <int> ; i + + ) { for ( int j = i + <int> ; j < maps . length ; j + + ) { assertEquals ( String . format ( <str> , i , j ) , mt . compare ( maps [ i ] , maps [ j ] ) , - <int> ) ; assertEquals ( String . format ( <str> , j , i ) , mt . compare ( maps [ j ] , maps [ i ] ) , <int> ) ; } } } @Test public void listSerDerTest ( ) { ListSerializer < String > sls = ListType . getInstance ( UTF8Type . instance , true ) . getSerializer ( ) ; ListSerializer < Integer > ils = ListType . getInstance ( Int32Type . instance , true ) . getSerializer ( ) ; List < String > sl = Arrays . asList ( <str> , <str> ) ; List < Integer > il = Arrays . asList ( <int> , <int> , <int> ) ; ByteBuffer sb = sls . serialize ( sl ) ; ByteBuffer ib = ils . serialize ( il ) ; assertEquals ( sls . deserialize ( sb ) , sl ) ; assertEquals ( ils . deserialize ( ib ) , il ) ; sls . validate ( sb ) ; ils . validate ( ib ) ; assertInvalid ( ils , sb ) ; assertInvalid ( sls , UTF8Type . instance . getSerializer ( ) . serialize ( <str> ) ) ; } @Test public void setSerDerTest ( ) { SetSerializer < String > sss = SetType . getInstance ( UTF8Type . instance , true ) . getSerializer ( ) ; SetSerializer < Integer > iss = SetType . getInstance ( Int32Type . instance , true ) . getSerializer ( ) ; Set < String > ss = new HashSet ( ) { { add ( <str> ) ; add ( <str> ) ; } } ; Set < Integer > is = new HashSet ( ) { { add ( <int> ) ; add ( <int> ) ; add ( <int> ) ; } } ; ByteBuffer sb = sss . serialize ( ss ) ; ByteBuffer ib = iss . serialize ( is ) ; assertEquals ( sss . deserialize ( sb ) , ss ) ; assertEquals ( iss . deserialize ( ib ) , is ) ; sss . validate ( sb ) ; iss . validate ( ib ) ; assertInvalid ( iss , sb ) ; assertInvalid ( sss , UTF8Type . instance . getSerializer ( ) . serialize ( <str> ) ) ; } @Test public void setMapDerTest ( ) { MapSerializer < String , String > sms = MapType . getInstance ( UTF8Type . instance , UTF8Type . instance , true ) . getSerializer ( ) ; MapSerializer < Integer , Integer > ims = MapType . getInstance ( Int32Type . instance , Int32Type . instance , true ) . getSerializer ( ) ; Map < String , String > sm = new HashMap ( ) { { put ( <str> , <str> ) ; put ( <str> , <str> ) ; } } ; Map < Integer , Integer > im = new HashMap ( ) { { put ( <int> , <int> ) ; put ( <int> , <int> ) ; put ( <int> , <int> ) ; } } ; ByteBuffer sb = sms . serialize ( sm ) ; ByteBuffer ib = ims . serialize ( im ) ; assertEquals ( sms . deserialize ( sb ) , sm ) ; assertEquals ( ims . deserialize ( ib ) , im ) ; sms . validate ( sb ) ; ims . validate ( ib ) ; assertInvalid ( ims , sb ) ; assertInvalid ( sms , UTF8Type . instance . getSerializer ( ) . serialize ( <str> ) ) ; MapSerializer < Integer , String > sims = MapType . getInstance ( Int32Type . instance , UTF8Type . instance , true ) . getSerializer ( ) ; MapSerializer < String , Integer > isms = MapType . getInstance ( UTF8Type . instance , Int32Type . instance , true ) . getSerializer ( ) ; assertInvalid ( isms , sb ) ; assertInvalid ( sims , sb ) ; } private void assertInvalid ( TypeSerializer < ? > type , ByteBuffer value ) { try { type . validate ( value ) ; fail ( <str> + ByteBufferUtil . bytesToHex ( value ) + <str> + type ) ; } catch ( MarshalException e ) { } } } 

package org . elasticsearch . cluster . routing ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . InternalTestCluster ; import java . util . Collections ; import java . util . List ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . TEST , numDataNodes = <int> ) public class DelayedAllocationIT extends ESIntegTestCase { public void testNoDelayedTimeout ( ) throws Exception { internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( UnassignedInfo . INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING , <int> ) ) . get ( ) ; ensureGreen ( <str> ) ; indexRandomData ( ) ; internalCluster ( ) . stopRandomNode ( InternalTestCluster . nameFilter ( findNodeWithShard ( ) ) ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . get ( ) . getDelayedUnassignedShards ( ) , equalTo ( <int> ) ) ; ensureGreen ( <str> ) ; } public void testDelayedAllocationNodeLeavesAndComesBack ( ) throws Exception { internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( UnassignedInfo . INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING , TimeValue . timeValueHours ( <int> ) ) ) . get ( ) ; ensureGreen ( <str> ) ; indexRandomData ( ) ; internalCluster ( ) . stopRandomNode ( InternalTestCluster . nameFilter ( findNodeWithShard ( ) ) ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . all ( ) . get ( ) . getState ( ) . getRoutingNodes ( ) . unassigned ( ) . size ( ) > <int> , equalTo ( true ) ) ; } } ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . get ( ) . getDelayedUnassignedShards ( ) , equalTo ( <int> ) ) ; internalCluster ( ) . startNode ( ) ; ensureGreen ( <str> ) ; } public void testDelayedAllocationTimesOut ( ) throws Exception { internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( UnassignedInfo . INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING , TimeValue . timeValueMillis ( <int> ) ) ) . get ( ) ; ensureGreen ( <str> ) ; indexRandomData ( ) ; internalCluster ( ) . stopRandomNode ( InternalTestCluster . nameFilter ( findNodeWithShard ( ) ) ) ; ensureGreen ( <str> ) ; internalCluster ( ) . startNode ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( UnassignedInfo . INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING , TimeValue . timeValueMillis ( <int> ) ) ) . get ( ) ) ; internalCluster ( ) . stopRandomNode ( InternalTestCluster . nameFilter ( findNodeWithShard ( ) ) ) ; ensureGreen ( <str> ) ; } public void testDelayedAllocationChangeWithSettingTo100ms ( ) throws Exception { internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( UnassignedInfo . INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING , TimeValue . timeValueHours ( <int> ) ) ) . get ( ) ; ensureGreen ( <str> ) ; indexRandomData ( ) ; internalCluster ( ) . stopRandomNode ( InternalTestCluster . nameFilter ( findNodeWithShard ( ) ) ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . all ( ) . get ( ) . getState ( ) . getRoutingNodes ( ) . unassigned ( ) . size ( ) > <int> , equalTo ( true ) ) ; } } ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . get ( ) . getDelayedUnassignedShards ( ) , equalTo ( <int> ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( UnassignedInfo . INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING , TimeValue . timeValueMillis ( <int> ) ) ) . get ( ) ) ; ensureGreen ( <str> ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . get ( ) . getDelayedUnassignedShards ( ) , equalTo ( <int> ) ) ; } public void testDelayedAllocationChangeWithSettingTo0 ( ) throws Exception { internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( UnassignedInfo . INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING , TimeValue . timeValueHours ( <int> ) ) ) . get ( ) ; ensureGreen ( <str> ) ; indexRandomData ( ) ; internalCluster ( ) . stopRandomNode ( InternalTestCluster . nameFilter ( findNodeWithShard ( ) ) ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . all ( ) . get ( ) . getState ( ) . getRoutingNodes ( ) . unassigned ( ) . size ( ) > <int> , equalTo ( true ) ) ; } } ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . get ( ) . getDelayedUnassignedShards ( ) , equalTo ( <int> ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( UnassignedInfo . INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING , TimeValue . timeValueMillis ( <int> ) ) ) . get ( ) ) ; ensureGreen ( <str> ) ; assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . get ( ) . getDelayedUnassignedShards ( ) , equalTo ( <int> ) ) ; } private void indexRandomData ( ) throws Exception { int numDocs = scaledRandomIntBetween ( <int> , <int> ) ; IndexRequestBuilder [ ] builders = new IndexRequestBuilder [ numDocs ] ; for ( int i = <int> ; i < builders . length ; i + + ) { builders [ i ] = client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) ; } indexRandom ( true , builders ) ; } private String findNodeWithShard ( ) { ClusterState state = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; List < ShardRouting > startedShards = state . routingTable ( ) . shardsWithState ( ShardRoutingState . STARTED ) ; Collections . shuffle ( startedShards , random ( ) ) ; return state . nodes ( ) . get ( startedShards . get ( <int> ) . currentNodeId ( ) ) . getName ( ) ; } } 

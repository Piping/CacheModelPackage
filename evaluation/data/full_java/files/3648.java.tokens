package org . eclipse . debug . core . sourcelookup . containers ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . MultiStatus ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . internal . core . sourcelookup . SourceLookupMessages ; public abstract class CompositeSourceContainer extends AbstractSourceContainer { private ISourceContainer [ ] fContainers ; @Override public boolean isComposite ( ) { return true ; } @Override public Object [ ] findSourceElements ( String name ) throws CoreException { return findSourceElements ( name , getSourceContainers ( ) ) ; } protected Object [ ] findSourceElements ( String name , ISourceContainer [ ] containers ) throws CoreException { List < Object > results = null ; CoreException single = null ; MultiStatus multiStatus = null ; if ( isFindDuplicates ( ) ) { results = new ArrayList < Object > ( ) ; } for ( int i = <int> ; i < containers . length ; i + + ) { ISourceContainer container = containers [ i ] ; try { Object [ ] objects = container . findSourceElements ( name ) ; if ( objects . length > <int> ) { if ( results ! = null ) { for ( int j = <int> ; j < objects . length ; j + + ) { results . add ( objects [ j ] ) ; } } else { if ( objects . length = = <int> ) { return objects ; } return new Object [ ] { objects [ <int> ] } ; } } } catch ( CoreException e ) { if ( single = = null ) { single = e ; } else if ( multiStatus = = null ) { multiStatus = new MultiStatus ( DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , new IStatus [ ] { single . getStatus ( ) } , SourceLookupMessages . Source_Lookup_Error , null ) ; multiStatus . add ( e . getStatus ( ) ) ; } else { multiStatus . add ( e . getStatus ( ) ) ; } } } if ( results = = null ) { if ( multiStatus ! = null ) { throw new CoreException ( multiStatus ) ; } else if ( single ! = null ) { throw single ; } return EMPTY ; } return results . toArray ( ) ; } protected abstract ISourceContainer [ ] createSourceContainers ( ) throws CoreException ; @Override public synchronized ISourceContainer [ ] getSourceContainers ( ) throws CoreException { if ( fContainers = = null ) { fContainers = createSourceContainers ( ) ; for ( int i = <int> ; i < fContainers . length ; i + + ) { ISourceContainer container = fContainers [ i ] ; container . init ( getDirector ( ) ) ; } } return fContainers ; } @Override public void dispose ( ) { super . dispose ( ) ; if ( fContainers ! = null ) { for ( int i = <int> ; i < fContainers . length ; i + + ) { ISourceContainer container = fContainers [ i ] ; container . dispose ( ) ; } } fContainers = null ; } } 

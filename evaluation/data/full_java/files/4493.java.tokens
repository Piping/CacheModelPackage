package org . eclipse . debug . internal . ui . views . breakpoints ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . breakpoints . provisional . IBreakpointOrganizer ; import org . eclipse . debug . internal . ui . views . DebugUIViewsMessages ; import org . eclipse . debug . ui . IBreakpointOrganizerDelegate ; import org . eclipse . debug . ui . IBreakpointOrganizerDelegateExtension ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . util . IPropertyChangeListener ; public class BreakpointOrganizerExtension implements IBreakpointOrganizer , IBreakpointOrganizerDelegateExtension { private IConfigurationElement fElement ; private IBreakpointOrganizerDelegate fDelegate ; private ImageDescriptor fDescriptor ; public static final String ATTR_LABEL = <str> ; public static final String ATTR_CLASS = <str> ; public static final String ATTR_ID = <str> ; public static final String ATTR_ICON = <str> ; public static final String ATTR_OTHERS_LABEL = <str> ; public BreakpointOrganizerExtension ( IConfigurationElement element ) { fElement = element ; } @Override public ImageDescriptor getImageDescriptor ( ) { if ( fDescriptor = = null ) { fDescriptor = DebugUIPlugin . getImageDescriptor ( fElement , ATTR_ICON ) ; if ( fDescriptor = = null ) { fDescriptor = ImageDescriptor . getMissingImageDescriptor ( ) ; } } return fDescriptor ; } @Override public String getLabel ( ) { return fElement . getAttribute ( ATTR_LABEL ) ; } @Override public String getIdentifier ( ) { return fElement . getAttribute ( ATTR_ID ) ; } protected IBreakpointOrganizerDelegate getOrganizer ( ) { if ( fDelegate = = null ) { try { fDelegate = ( IBreakpointOrganizerDelegate ) fElement . createExecutableExtension ( ATTR_CLASS ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } return fDelegate ; } @Override public IAdaptable [ ] getCategories ( IBreakpoint breakpoint ) { return getOrganizer ( ) . getCategories ( breakpoint ) ; } @Override public void addPropertyChangeListener ( IPropertyChangeListener listener ) { getOrganizer ( ) . addPropertyChangeListener ( listener ) ; } @Override public void removePropertyChangeListener ( IPropertyChangeListener listener ) { getOrganizer ( ) . removePropertyChangeListener ( listener ) ; } @Override public void addBreakpoint ( IBreakpoint breakpoint , IAdaptable category ) { getOrganizer ( ) . addBreakpoint ( breakpoint , category ) ; } @Override public void removeBreakpoint ( IBreakpoint breakpoint , IAdaptable category ) { getOrganizer ( ) . removeBreakpoint ( breakpoint , category ) ; } @Override public boolean canAdd ( IBreakpoint breakpoint , IAdaptable category ) { return getOrganizer ( ) . canAdd ( breakpoint , category ) ; } @Override public boolean canRemove ( IBreakpoint breakpoint , IAdaptable category ) { return getOrganizer ( ) . canRemove ( breakpoint , category ) ; } @Override public void dispose ( ) { if ( fDelegate ! = null ) { fDelegate . dispose ( ) ; } } @Override public String getOthersLabel ( ) { String attribute = fElement . getAttribute ( ATTR_OTHERS_LABEL ) ; if ( attribute = = null ) { return DebugUIViewsMessages . OtherBreakpointOrganizer_0 ; } return attribute ; } @Override public IAdaptable [ ] getCategories ( ) { return getOrganizer ( ) . getCategories ( ) ; } @Override public void addBreakpoints ( IBreakpoint [ ] breakpoints , IAdaptable category ) { IBreakpointOrganizerDelegate organizer = getOrganizer ( ) ; if ( organizer instanceof IBreakpointOrganizerDelegateExtension ) { ( ( IBreakpointOrganizerDelegateExtension ) organizer ) . addBreakpoints ( breakpoints , category ) ; } else { for ( int i = <int> ; i < breakpoints . length ; i + + ) { addBreakpoint ( breakpoints [ i ] , category ) ; } } } @Override public void removeBreakpoints ( IBreakpoint [ ] breakpoints , IAdaptable category ) { IBreakpointOrganizerDelegate organizer = getOrganizer ( ) ; if ( organizer instanceof IBreakpointOrganizerDelegateExtension ) { ( ( IBreakpointOrganizerDelegateExtension ) organizer ) . removeBreakpoints ( breakpoints , category ) ; } else { for ( int i = <int> ; i < breakpoints . length ; i + + ) { removeBreakpoint ( breakpoints [ i ] , category ) ; } } } } 

package org . gradle . initialization ; import org . gradle . StartParameter ; import org . gradle . api . internal . * ; import org . gradle . api . internal . initialization . ClassLoaderScope ; import org . gradle . internal . service . scopes . ServiceRegistryFactory ; import org . gradle . groovy . scripts . ScriptSource ; import org . gradle . internal . reflect . Instantiator ; import java . io . File ; import java . util . Map ; public class SettingsFactory { private final Instantiator instantiator ; private final ServiceRegistryFactory serviceRegistryFactory ; public SettingsFactory ( Instantiator instantiator , ServiceRegistryFactory serviceRegistryFactory ) { this . instantiator = instantiator ; this . serviceRegistryFactory = serviceRegistryFactory ; } public SettingsInternal createSettings ( GradleInternal gradle , File settingsDir , ScriptSource settingsScript , Map < String , String > gradleProperties , StartParameter startParameter , ClassLoaderScope rootClassLoaderScope ) { DefaultSettings settings = instantiator . newInstance ( DefaultSettings . class , serviceRegistryFactory , gradle , rootClassLoaderScope . createChild ( <str> ) , rootClassLoaderScope , settingsDir , settingsScript , startParameter ) ; DynamicObject dynamicObject = ( ( DynamicObjectAware ) settings ) . getAsDynamicObject ( ) ; ( ( ExtensibleDynamicObject ) dynamicObject ) . addProperties ( gradleProperties ) ; return settings ; } } 

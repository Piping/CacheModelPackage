package org . elasticsearch . action . deletebyquery ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . search . Scroll ; import java . io . IOException ; import java . util . Arrays ; import static org . elasticsearch . action . ValidateActions . addValidationError ; import static org . elasticsearch . search . Scroll . readScroll ; public class DeleteByQueryRequest extends ActionRequest < DeleteByQueryRequest > implements IndicesRequest . Replaceable { private String [ ] indices = Strings . EMPTY_ARRAY ; private IndicesOptions indicesOptions = IndicesOptions . fromOptions ( false , false , true , false ) ; private String [ ] types = Strings . EMPTY_ARRAY ; private QueryBuilder < ? > query ; private String routing ; private int size = <int> ; private Scroll scroll = new Scroll ( TimeValue . timeValueMinutes ( <int> ) ) ; private TimeValue timeout ; public DeleteByQueryRequest ( ) { } public DeleteByQueryRequest ( String . . . indices ) { this . indices = indices ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( query = = null ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } @Override public String [ ] indices ( ) { return this . indices ; } @Override public DeleteByQueryRequest indices ( String [ ] indices ) { this . indices = indices ; return this ; } @Override public IndicesOptions indicesOptions ( ) { return indicesOptions ; } public DeleteByQueryRequest indicesOptions ( IndicesOptions indicesOptions ) { if ( indicesOptions = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . indicesOptions = indicesOptions ; return this ; } public String [ ] types ( ) { return this . types ; } public DeleteByQueryRequest types ( String . . . types ) { this . types = types ; return this ; } public QueryBuilder < ? > query ( ) { return query ; } public DeleteByQueryRequest query ( QueryBuilder < ? > queryBuilder ) { this . query = queryBuilder ; return this ; } public String routing ( ) { return this . routing ; } public DeleteByQueryRequest routing ( String routing ) { this . routing = routing ; return this ; } public DeleteByQueryRequest routing ( String . . . routings ) { this . routing = Strings . arrayToCommaDelimitedString ( routings ) ; return this ; } public DeleteByQueryRequest size ( int size ) { if ( size < <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . size = size ; return this ; } public int size ( ) { return size ; } public Scroll scroll ( ) { return scroll ; } public DeleteByQueryRequest scroll ( Scroll scroll ) { this . scroll = scroll ; return this ; } public DeleteByQueryRequest scroll ( TimeValue keepAlive ) { return scroll ( new Scroll ( keepAlive ) ) ; } public DeleteByQueryRequest scroll ( String keepAlive ) { return scroll ( new Scroll ( TimeValue . parseTimeValue ( keepAlive , null , getClass ( ) . getSimpleName ( ) + <str> ) ) ) ; } public TimeValue timeout ( ) { return timeout ; } public DeleteByQueryRequest timeout ( TimeValue timeout ) { if ( timeout = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . timeout = timeout ; return this ; } public DeleteByQueryRequest timeout ( String timeout ) { timeout ( TimeValue . parseTimeValue ( timeout , null , getClass ( ) . getSimpleName ( ) + <str> ) ) ; return this ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; indices = in . readStringArray ( ) ; indicesOptions = IndicesOptions . readIndicesOptions ( in ) ; types = in . readStringArray ( ) ; query = in . readQuery ( ) ; routing = in . readOptionalString ( ) ; size = in . readVInt ( ) ; if ( in . readBoolean ( ) ) { scroll = readScroll ( in ) ; } if ( in . readBoolean ( ) ) { timeout = TimeValue . readTimeValue ( in ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeStringArray ( indices ) ; indicesOptions . writeIndicesOptions ( out ) ; out . writeStringArray ( types ) ; out . writeQuery ( query ) ; out . writeOptionalString ( routing ) ; out . writeVInt ( size ) ; out . writeOptionalStreamable ( scroll ) ; out . writeOptionalStreamable ( timeout ) ; } @Override public String toString ( ) { return <str> + Arrays . toString ( indices ) + <str> + Arrays . toString ( types ) + <str> + size + <str> + timeout + <str> + routing + <str> + query . toString ( ) ; } } 

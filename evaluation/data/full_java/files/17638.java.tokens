package com . badlogic . gdx . physics . bullet . linearmath ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btTransform extends BulletBase { private long swigCPtr ; protected btTransform ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btTransform ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btTransform obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; LinearMathJNI . delete_btTransform ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public btTransform ( ) { this ( LinearMathJNI . new_btTransform__SWIG_0 ( ) , true ) ; } public btTransform ( Quaternion q , Vector3 c ) { this ( LinearMathJNI . new_btTransform__SWIG_1 ( q , c ) , true ) ; } public btTransform ( Quaternion q ) { this ( LinearMathJNI . new_btTransform__SWIG_2 ( q ) , true ) ; } public btTransform ( Matrix3 b , Vector3 c ) { this ( LinearMathJNI . new_btTransform__SWIG_3 ( b , c ) , true ) ; } public btTransform ( Matrix3 b ) { this ( LinearMathJNI . new_btTransform__SWIG_4 ( b ) , true ) ; } public btTransform ( Matrix4 other ) { this ( LinearMathJNI . new_btTransform__SWIG_5 ( other ) , true ) ; } public void mult ( Matrix4 t1 , Matrix4 t2 ) { LinearMathJNI . btTransform_mult ( swigCPtr , this , t1 , t2 ) ; } public Matrix3 getBasis ( ) { return LinearMathJNI . btTransform_getBasis__SWIG_0 ( swigCPtr , this ) ; } public Vector3 getOrigin ( ) { return LinearMathJNI . btTransform_getOrigin__SWIG_0 ( swigCPtr , this ) ; } public Quaternion getRotation ( ) { return LinearMathJNI . btTransform_getRotation ( swigCPtr , this ) ; } public void setFromOpenGLMatrix ( float [ ] m ) { LinearMathJNI . btTransform_setFromOpenGLMatrix ( swigCPtr , this , m ) ; } public void getOpenGLMatrix ( float [ ] m ) { LinearMathJNI . btTransform_getOpenGLMatrix ( swigCPtr , this , m ) ; } public void setOrigin ( Vector3 origin ) { LinearMathJNI . btTransform_setOrigin ( swigCPtr , this , origin ) ; } public Vector3 invXform ( Vector3 inVec ) { return LinearMathJNI . btTransform_invXform ( swigCPtr , this , inVec ) ; } public void setBasis ( Matrix3 basis ) { LinearMathJNI . btTransform_setBasis ( swigCPtr , this , basis ) ; } public void setRotation ( Quaternion q ) { LinearMathJNI . btTransform_setRotation ( swigCPtr , this , q ) ; } public void setIdentity ( ) { LinearMathJNI . btTransform_setIdentity ( swigCPtr , this ) ; } public Matrix4 inverse ( ) { return LinearMathJNI . btTransform_inverse ( swigCPtr , this ) ; } public Matrix4 inverseTimes ( Matrix4 t ) { return LinearMathJNI . btTransform_inverseTimes ( swigCPtr , this , t ) ; } public static Matrix4 getIdentity ( ) { return LinearMathJNI . btTransform_getIdentity ( ) ; } public void serialize ( btTransformFloatData dataOut ) { LinearMathJNI . btTransform_serialize ( swigCPtr , this , btTransformFloatData . getCPtr ( dataOut ) , dataOut ) ; } public void serializeFloat ( btTransformFloatData dataOut ) { LinearMathJNI . btTransform_serializeFloat ( swigCPtr , this , btTransformFloatData . getCPtr ( dataOut ) , dataOut ) ; } public void deSerialize ( btTransformFloatData dataIn ) { LinearMathJNI . btTransform_deSerialize ( swigCPtr , this , btTransformFloatData . getCPtr ( dataIn ) , dataIn ) ; } public void deSerializeDouble ( btTransformDoubleData dataIn ) { LinearMathJNI . btTransform_deSerializeDouble ( swigCPtr , this , btTransformDoubleData . getCPtr ( dataIn ) , dataIn ) ; } public void deSerializeFloat ( btTransformFloatData dataIn ) { LinearMathJNI . btTransform_deSerializeFloat ( swigCPtr , this , btTransformFloatData . getCPtr ( dataIn ) , dataIn ) ; } } 

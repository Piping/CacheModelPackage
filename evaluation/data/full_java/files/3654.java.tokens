package org . eclipse . debug . core . sourcelookup . containers ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import org . eclipse . core . resources . IStorage ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . internal . core . sourcelookup . SourceLookupMessages ; public class LocalFileStorage extends PlatformObject implements IStorage { private File fFile ; public LocalFileStorage ( File file ) { setFile ( file ) ; } @Override public InputStream getContents ( ) throws CoreException { try { return new FileInputStream ( getFile ( ) ) ; } catch ( IOException e ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , SourceLookupMessages . LocalFileStorage_0 , e ) ) ; } } @Override public IPath getFullPath ( ) { try { return new Path ( getFile ( ) . getCanonicalPath ( ) ) ; } catch ( IOException e ) { DebugPlugin . log ( e ) ; return null ; } } @Override public String getName ( ) { return getFile ( ) . getName ( ) ; } @Override public boolean isReadOnly ( ) { return true ; } private void setFile ( File file ) { fFile = file ; } public File getFile ( ) { return fFile ; } @Override public boolean equals ( Object object ) { return object instanceof LocalFileStorage & & getFile ( ) . equals ( ( ( LocalFileStorage ) object ) . getFile ( ) ) ; } @Override public int hashCode ( ) { return getFile ( ) . hashCode ( ) ; } } 

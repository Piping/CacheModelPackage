package org . elasticsearch . action . support . broadcast . node ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . Version ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . ShardOperationFailedException ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . PlainActionFuture ; import org . elasticsearch . action . support . broadcast . BroadcastRequest ; import org . elasticsearch . action . support . broadcast . BroadcastResponse ; import org . elasticsearch . action . support . broadcast . BroadcastShardOperationFailedException ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlock ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . block . ClusterBlocks ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . IndexRoutingTable ; import org . elasticsearch . cluster . routing . IndexShardRoutingTable ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . ShardRoutingState ; import org . elasticsearch . cluster . routing . ShardsIterator ; import org . elasticsearch . cluster . routing . TestShardRouting ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . cluster . TestClusterService ; import org . elasticsearch . test . transport . CapturingTransport ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportChannel ; import org . elasticsearch . transport . TransportResponse ; import org . elasticsearch . transport . TransportResponseOptions ; import org . elasticsearch . transport . TransportService ; import org . junit . AfterClass ; import org . junit . Before ; import org . junit . BeforeClass ; import java . io . IOException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . TimeUnit ; import java . util . function . Supplier ; import static org . hamcrest . CoreMatchers . containsString ; import static org . hamcrest . CoreMatchers . is ; import static org . hamcrest . object . HasToString . hasToString ; public class TransportBroadcastByNodeActionTests extends ESTestCase { private static final String TEST_INDEX = <str> ; private static final String TEST_CLUSTER = <str> ; private static ThreadPool THREAD_POOL ; private TestClusterService clusterService ; private CapturingTransport transport ; private TestTransportBroadcastByNodeAction action ; public static class Request extends BroadcastRequest < Request > { public Request ( ) { } public Request ( String [ ] indices ) { super ( indices ) ; } } public static class Response extends BroadcastResponse { public Response ( ) { } public Response ( int totalShards , int successfulShards , int failedShards , List < ShardOperationFailedException > shardFailures ) { super ( totalShards , successfulShards , failedShards , shardFailures ) ; } } class TestTransportBroadcastByNodeAction extends TransportBroadcastByNodeAction < Request , Response , TransportBroadcastByNodeAction . EmptyResult > { private final Map < ShardRouting , Object > shards = new HashMap < > ( ) ; public TestTransportBroadcastByNodeAction ( Settings settings , TransportService transportService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver , Supplier < Request > request , String executor ) { super ( settings , <str> , THREAD_POOL , TransportBroadcastByNodeActionTests . this . clusterService , transportService , actionFilters , indexNameExpressionResolver , request , executor ) ; } @Override protected EmptyResult readShardResult ( StreamInput in ) throws IOException { return EmptyResult . readEmptyResultFrom ( in ) ; } @Override protected Response newResponse ( Request request , int totalShards , int successfulShards , int failedShards , List < EmptyResult > emptyResults , List < ShardOperationFailedException > shardFailures , ClusterState clusterState ) { return new Response ( totalShards , successfulShards , failedShards , shardFailures ) ; } @Override protected Request readRequestFrom ( StreamInput in ) throws IOException { final Request request = new Request ( ) ; request . readFrom ( in ) ; return request ; } @Override protected EmptyResult shardOperation ( Request request , ShardRouting shardRouting ) { if ( rarely ( ) ) { shards . put ( shardRouting , Boolean . TRUE ) ; return EmptyResult . INSTANCE ; } else { ElasticsearchException e = new ElasticsearchException ( <str> ) ; shards . put ( shardRouting , e ) ; throw e ; } } @Override protected ShardsIterator shards ( ClusterState clusterState , Request request , String [ ] concreteIndices ) { return clusterState . routingTable ( ) . allShards ( new String [ ] { TEST_INDEX } ) ; } @Override protected ClusterBlockException checkGlobalBlock ( ClusterState state , Request request ) { return state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . METADATA_WRITE ) ; } @Override protected ClusterBlockException checkRequestBlock ( ClusterState state , Request request , String [ ] concreteIndices ) { return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_WRITE , concreteIndices ) ; } public Map < ShardRouting , Object > getResults ( ) { return shards ; } } class MyResolver extends IndexNameExpressionResolver { public MyResolver ( ) { super ( Settings . EMPTY ) ; } @Override public String [ ] concreteIndices ( ClusterState state , IndicesRequest request ) { return request . indices ( ) ; } } @BeforeClass public static void startThreadPool ( ) { THREAD_POOL = new ThreadPool ( TransportBroadcastByNodeActionTests . class . getSimpleName ( ) ) ; } @Before public void setUp ( ) throws Exception { super . setUp ( ) ; transport = new CapturingTransport ( ) ; clusterService = new TestClusterService ( THREAD_POOL ) ; final TransportService transportService = new TransportService ( transport , THREAD_POOL ) ; transportService . start ( ) ; setClusterState ( clusterService , TEST_INDEX ) ; action = new TestTransportBroadcastByNodeAction ( Settings . EMPTY , transportService , new ActionFilters ( new HashSet < > ( ) ) , new MyResolver ( ) , Request : : new , ThreadPool . Names . SAME ) ; } void setClusterState ( TestClusterService clusterService , String index ) { int numberOfNodes = randomIntBetween ( <int> , <int> ) ; DiscoveryNodes . Builder discoBuilder = DiscoveryNodes . builder ( ) ; IndexRoutingTable . Builder indexRoutingTable = IndexRoutingTable . builder ( index ) ; int shardIndex = - <int> ; for ( int i = <int> ; i < numberOfNodes ; i + + ) { final DiscoveryNode node = newNode ( i ) ; discoBuilder = discoBuilder . put ( node ) ; int numberOfShards = randomIntBetween ( <int> , <int> ) ; for ( int j = <int> ; j < numberOfShards ; j + + ) { final ShardId shardId = new ShardId ( index , + + shardIndex ) ; ShardRouting shard = TestShardRouting . newShardRouting ( index , shardId . getId ( ) , node . id ( ) , true , ShardRoutingState . STARTED , <int> ) ; IndexShardRoutingTable . Builder indexShard = new IndexShardRoutingTable . Builder ( shardId ) ; indexShard . addShard ( shard ) ; indexRoutingTable . addIndexShard ( indexShard . build ( ) ) ; } } discoBuilder . localNodeId ( newNode ( <int> ) . id ( ) ) ; discoBuilder . masterNodeId ( newNode ( numberOfNodes - <int> ) . id ( ) ) ; ClusterState . Builder stateBuilder = ClusterState . builder ( new ClusterName ( TEST_CLUSTER ) ) ; stateBuilder . nodes ( discoBuilder ) ; stateBuilder . routingTable ( RoutingTable . builder ( ) . add ( indexRoutingTable . build ( ) ) . build ( ) ) ; ClusterState clusterState = stateBuilder . build ( ) ; clusterService . setState ( clusterState ) ; } static DiscoveryNode newNode ( int nodeId ) { return new DiscoveryNode ( <str> + nodeId , DummyTransportAddress . INSTANCE , Version . CURRENT ) ; } @AfterClass public static void destroyThreadPool ( ) { ThreadPool . terminate ( THREAD_POOL , <int> , TimeUnit . SECONDS ) ; THREAD_POOL = null ; } public void testGlobalBlock ( ) { Request request = new Request ( new String [ ] { TEST_INDEX } ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; ClusterBlocks . Builder block = ClusterBlocks . builder ( ) . addGlobalBlock ( new ClusterBlock ( <int> , <str> , false , true , RestStatus . SERVICE_UNAVAILABLE , ClusterBlockLevel . ALL ) ) ; clusterService . setState ( ClusterState . builder ( clusterService . state ( ) ) . blocks ( block ) ) ; try { action . new AsyncAction ( request , listener ) . start ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException expected ) { assertEquals ( <str> , expected . getMessage ( ) ) ; } } public void testRequestBlock ( ) { Request request = new Request ( new String [ ] { TEST_INDEX } ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; ClusterBlocks . Builder block = ClusterBlocks . builder ( ) . addIndexBlock ( TEST_INDEX , new ClusterBlock ( <int> , <str> , false , true , RestStatus . SERVICE_UNAVAILABLE , ClusterBlockLevel . ALL ) ) ; clusterService . setState ( ClusterState . builder ( clusterService . state ( ) ) . blocks ( block ) ) ; try { action . new AsyncAction ( request , listener ) . start ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException expected ) { assertEquals ( <str> , expected . getMessage ( ) ) ; } } public void testOneRequestIsSentToEachNodeHoldingAShard ( ) { Request request = new Request ( new String [ ] { TEST_INDEX } ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; action . new AsyncAction ( request , listener ) . start ( ) ; Map < String , List < CapturingTransport . CapturedRequest > > capturedRequests = transport . capturedRequestsByTargetNode ( ) ; ShardsIterator shardIt = clusterService . state ( ) . routingTable ( ) . allShards ( new String [ ] { TEST_INDEX } ) ; Set < String > set = new HashSet < > ( ) ; for ( ShardRouting shard : shardIt . asUnordered ( ) ) { set . add ( shard . currentNodeId ( ) ) ; } assertEquals ( set . size ( ) , capturedRequests . size ( ) ) ; assertEquals ( set , capturedRequests . keySet ( ) ) ; for ( Map . Entry < String , List < CapturingTransport . CapturedRequest > > entry : capturedRequests . entrySet ( ) ) { assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; } } public void testRequestsAreNotSentToFailedMaster ( ) { Request request = new Request ( new String [ ] { TEST_INDEX } ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; DiscoveryNode masterNode = clusterService . state ( ) . nodes ( ) . masterNode ( ) ; DiscoveryNodes . Builder builder = DiscoveryNodes . builder ( clusterService . state ( ) . getNodes ( ) ) ; builder . remove ( masterNode . id ( ) ) ; clusterService . setState ( ClusterState . builder ( clusterService . state ( ) ) . nodes ( builder ) ) ; action . new AsyncAction ( request , listener ) . start ( ) ; Map < String , List < CapturingTransport . CapturedRequest > > capturedRequests = transport . capturedRequestsByTargetNode ( ) ; ShardsIterator shardIt = clusterService . state ( ) . routingTable ( ) . allShards ( new String [ ] { TEST_INDEX } ) ; Set < String > set = new HashSet < > ( ) ; for ( ShardRouting shard : shardIt . asUnordered ( ) ) { if ( ! shard . currentNodeId ( ) . equals ( masterNode . id ( ) ) ) { set . add ( shard . currentNodeId ( ) ) ; } } assertEquals ( set . size ( ) , capturedRequests . size ( ) ) ; assertEquals ( set , capturedRequests . keySet ( ) ) ; for ( Map . Entry < String , List < CapturingTransport . CapturedRequest > > entry : capturedRequests . entrySet ( ) ) { assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; } } public void testOperationExecution ( ) throws Exception { ShardsIterator shardIt = clusterService . state ( ) . routingTable ( ) . allShards ( new String [ ] { TEST_INDEX } ) ; Set < ShardRouting > shards = new HashSet < > ( ) ; String nodeId = shardIt . asUnordered ( ) . iterator ( ) . next ( ) . currentNodeId ( ) ; for ( ShardRouting shard : shardIt . asUnordered ( ) ) { if ( nodeId . equals ( shard . currentNodeId ( ) ) ) { shards . add ( shard ) ; } } final TransportBroadcastByNodeAction . BroadcastByNodeTransportRequestHandler handler = action . new BroadcastByNodeTransportRequestHandler ( ) ; TestTransportChannel channel = new TestTransportChannel ( ) ; handler . messageReceived ( action . new NodeRequest ( nodeId , new Request ( ) , new ArrayList < > ( shards ) ) , channel ) ; assertEquals ( shards , action . getResults ( ) . keySet ( ) ) ; TransportResponse response = channel . getCapturedResponse ( ) ; assertTrue ( response instanceof TransportBroadcastByNodeAction . NodeResponse ) ; TransportBroadcastByNodeAction . NodeResponse nodeResponse = ( TransportBroadcastByNodeAction . NodeResponse ) response ; assertEquals ( <str> , nodeId , nodeResponse . getNodeId ( ) ) ; int successfulShards = <int> ; int failedShards = <int> ; for ( Object result : action . getResults ( ) . values ( ) ) { if ( ! ( result instanceof ElasticsearchException ) ) { successfulShards + + ; } else { failedShards + + ; } } assertEquals ( <str> , successfulShards , nodeResponse . getSuccessfulShards ( ) ) ; assertEquals ( <str> , action . getResults ( ) . size ( ) , nodeResponse . getTotalShards ( ) ) ; assertEquals ( <str> , failedShards , nodeResponse . getExceptions ( ) . size ( ) ) ; List < BroadcastShardOperationFailedException > exceptions = nodeResponse . getExceptions ( ) ; for ( BroadcastShardOperationFailedException exception : exceptions ) { assertThat ( exception . getMessage ( ) , is ( <str> ) ) ; assertThat ( exception , hasToString ( containsString ( <str> ) ) ) ; } } public void testResultAggregation ( ) throws ExecutionException , InterruptedException { Request request = new Request ( new String [ ] { TEST_INDEX } ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; final boolean simulateFailedMasterNode = rarely ( ) ; DiscoveryNode failedMasterNode = null ; if ( simulateFailedMasterNode ) { failedMasterNode = clusterService . state ( ) . nodes ( ) . masterNode ( ) ; DiscoveryNodes . Builder builder = DiscoveryNodes . builder ( clusterService . state ( ) . getNodes ( ) ) ; builder . remove ( failedMasterNode . id ( ) ) ; builder . masterNodeId ( null ) ; clusterService . setState ( ClusterState . builder ( clusterService . state ( ) ) . nodes ( builder ) ) ; } action . new AsyncAction ( request , listener ) . start ( ) ; Map < String , List < CapturingTransport . CapturedRequest > > capturedRequests = transport . capturedRequestsByTargetNode ( ) ; transport . clear ( ) ; ShardsIterator shardIt = clusterService . state ( ) . getRoutingTable ( ) . allShards ( new String [ ] { TEST_INDEX } ) ; Map < String , List < ShardRouting > > map = new HashMap < > ( ) ; for ( ShardRouting shard : shardIt . asUnordered ( ) ) { if ( ! map . containsKey ( shard . currentNodeId ( ) ) ) { map . put ( shard . currentNodeId ( ) , new ArrayList < > ( ) ) ; } map . get ( shard . currentNodeId ( ) ) . add ( shard ) ; } int totalShards = <int> ; int totalSuccessfulShards = <int> ; int totalFailedShards = <int> ; for ( Map . Entry < String , List < CapturingTransport . CapturedRequest > > entry : capturedRequests . entrySet ( ) ) { List < BroadcastShardOperationFailedException > exceptions = new ArrayList < > ( ) ; long requestId = entry . getValue ( ) . get ( <int> ) . requestId ; if ( rarely ( ) ) { totalShards + = map . get ( entry . getKey ( ) ) . size ( ) ; totalFailedShards + = map . get ( entry . getKey ( ) ) . size ( ) ; transport . handleResponse ( requestId , new Exception ( ) ) ; } else { List < ShardRouting > shards = map . get ( entry . getKey ( ) ) ; List < TransportBroadcastByNodeAction . EmptyResult > shardResults = new ArrayList < > ( ) ; for ( ShardRouting shard : shards ) { totalShards + + ; if ( rarely ( ) ) { totalFailedShards + + ; exceptions . add ( new BroadcastShardOperationFailedException ( shard . shardId ( ) , <str> ) ) ; } else { shardResults . add ( TransportBroadcastByNodeAction . EmptyResult . INSTANCE ) ; } } totalSuccessfulShards + = shardResults . size ( ) ; TransportBroadcastByNodeAction . NodeResponse nodeResponse = action . new NodeResponse ( entry . getKey ( ) , shards . size ( ) , shardResults , exceptions ) ; transport . handleResponse ( requestId , nodeResponse ) ; } } if ( simulateFailedMasterNode ) { totalShards + = map . get ( failedMasterNode . id ( ) ) . size ( ) ; } Response response = listener . get ( ) ; assertEquals ( <str> , totalShards , response . getTotalShards ( ) ) ; assertEquals ( <str> , totalSuccessfulShards , response . getSuccessfulShards ( ) ) ; assertEquals ( <str> , totalFailedShards , response . getFailedShards ( ) ) ; assertEquals ( <str> , totalFailedShards , response . getShardFailures ( ) . length ) ; } public class TestTransportChannel implements TransportChannel { private TransportResponse capturedResponse ; public TransportResponse getCapturedResponse ( ) { return capturedResponse ; } @Override public String action ( ) { return null ; } @Override public String getProfileName ( ) { return <str> ; } @Override public void sendResponse ( TransportResponse response ) throws IOException { capturedResponse = response ; } @Override public void sendResponse ( TransportResponse response , TransportResponseOptions options ) throws IOException { } @Override public void sendResponse ( Throwable error ) throws IOException { } } } 

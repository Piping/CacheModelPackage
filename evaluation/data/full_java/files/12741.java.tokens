package org . gradle . api . internal . artifacts . repositories ; import com . google . common . collect . Lists ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . repositories . FlatDirectoryArtifactRepository ; import org . gradle . authentication . Authentication ; import org . gradle . api . internal . artifacts . ModuleVersionPublisher ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . ConfiguredModuleComponentRepository ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . ResolverStrategy ; import org . gradle . internal . component . external . model . ModuleComponentArtifactMetaData ; import org . gradle . api . internal . artifacts . repositories . resolver . IvyResolver ; import org . gradle . api . internal . artifacts . repositories . transport . RepositoryTransportFactory ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . resource . local . FileStore ; import org . gradle . internal . resource . local . LocallyAvailableResourceFinder ; import java . io . File ; import java . util . * ; public class DefaultFlatDirArtifactRepository extends AbstractArtifactRepository implements FlatDirectoryArtifactRepository , ResolutionAwareRepository , PublicationAwareRepository { private final FileResolver fileResolver ; private List < Object > dirs = new ArrayList < Object > ( ) ; private final RepositoryTransportFactory transportFactory ; private final LocallyAvailableResourceFinder < ModuleComponentArtifactMetaData > locallyAvailableResourceFinder ; private final ResolverStrategy resolverStrategy ; private final FileStore < ModuleComponentArtifactMetaData > artifactFileStore ; public DefaultFlatDirArtifactRepository ( FileResolver fileResolver , RepositoryTransportFactory transportFactory , LocallyAvailableResourceFinder < ModuleComponentArtifactMetaData > locallyAvailableResourceFinder , ResolverStrategy resolverStrategy , FileStore < ModuleComponentArtifactMetaData > artifactFileStore ) { this . fileResolver = fileResolver ; this . transportFactory = transportFactory ; this . locallyAvailableResourceFinder = locallyAvailableResourceFinder ; this . resolverStrategy = resolverStrategy ; this . artifactFileStore = artifactFileStore ; } public Set < File > getDirs ( ) { return fileResolver . resolveFiles ( dirs ) . getFiles ( ) ; } public void setDirs ( Iterable < ? > dirs ) { this . dirs = Lists . newArrayList ( dirs ) ; } public void dir ( Object dir ) { dirs ( dir ) ; } public void dirs ( Object . . . dirs ) { this . dirs . addAll ( Arrays . asList ( dirs ) ) ; } public ModuleVersionPublisher createPublisher ( ) { return createRealResolver ( ) ; } public ConfiguredModuleComponentRepository createResolver ( ) { return createRealResolver ( ) ; } private IvyResolver createRealResolver ( ) { Set < File > dirs = getDirs ( ) ; if ( dirs . isEmpty ( ) ) { throw new InvalidUserDataException ( <str> ) ; } IvyResolver resolver = new IvyResolver ( getName ( ) , transportFactory . createTransport ( <str> , getName ( ) , Collections . < Authentication > emptyList ( ) ) , locallyAvailableResourceFinder , false , resolverStrategy , artifactFileStore ) ; for ( File root : dirs ) { resolver . addArtifactLocation ( root . toURI ( ) , <str> ) ; resolver . addArtifactLocation ( root . toURI ( ) , <str> ) ; } return resolver ; } } 

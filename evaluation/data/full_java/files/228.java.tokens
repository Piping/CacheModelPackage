package org . apache . cassandra . cql3 . selection ; import java . nio . ByteBuffer ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . cql3 . ColumnSpecification ; import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . exceptions . InvalidRequestException ; public final class SimpleSelector extends Selector { private final String columnName ; private final int idx ; private final AbstractType < ? > type ; private ByteBuffer current ; private boolean isSet ; public static Factory newFactory ( final ColumnDefinition def , final int idx ) { return new Factory ( ) { @Override protected String getColumnName ( ) { return def . name . toString ( ) ; } @Override protected AbstractType < ? > getReturnType ( ) { return def . type ; } protected void addColumnMapping ( SelectionColumnMapping mapping , ColumnSpecification resultColumn ) { mapping . addMapping ( resultColumn , def ) ; } @Override public Selector newInstance ( ) { return new SimpleSelector ( def . name . toString ( ) , idx , def . type ) ; } @Override public boolean isSimpleSelectorFactory ( int index ) { return index = = idx ; } } ; } @Override public void addInput ( int protocolVersion , ResultSetBuilder rs ) throws InvalidRequestException { if ( ! isSet ) { isSet = true ; current = rs . current . get ( idx ) ; } } @Override public ByteBuffer getOutput ( int protocolVersion ) throws InvalidRequestException { return current ; } @Override public void reset ( ) { isSet = false ; current = null ; } @Override public AbstractType < ? > getType ( ) { return type ; } @Override public String toString ( ) { return columnName ; } private SimpleSelector ( String columnName , int idx , AbstractType < ? > type ) { this . columnName = columnName ; this . idx = idx ; this . type = type ; } } 

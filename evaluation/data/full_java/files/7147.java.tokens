package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import org . elasticsearch . search . aggregations . support . format . ValueFormatterStreams ; import java . io . IOException ; import java . util . Map ; public class BucketStreamContext implements Streamable { private ValueFormatter formatter ; private boolean keyed ; private Map < String , Object > attributes ; public BucketStreamContext ( ) { } public void formatter ( ValueFormatter formatter ) { this . formatter = formatter ; } public ValueFormatter formatter ( ) { return formatter ; } public void keyed ( boolean keyed ) { this . keyed = keyed ; } public boolean keyed ( ) { return keyed ; } public void attributes ( Map < String , Object > attributes ) { this . attributes = attributes ; } public Map < String , Object > attributes ( ) { return attributes ; } @Override public void readFrom ( StreamInput in ) throws IOException { formatter = ValueFormatterStreams . readOptional ( in ) ; keyed = in . readBoolean ( ) ; attributes = in . readMap ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { ValueFormatterStreams . writeOptional ( formatter , out ) ; out . writeBoolean ( keyed ) ; out . writeMap ( attributes ) ; } } 

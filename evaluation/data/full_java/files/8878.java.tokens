package org . elasticsearch . repositories . azure ; import org . elasticsearch . action . admin . cluster . repositories . put . PutRepositoryResponse ; import org . elasticsearch . action . admin . cluster . snapshots . create . CreateSnapshotResponse ; import org . elasticsearch . action . admin . cluster . snapshots . restore . RestoreSnapshotResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cloud . azure . AbstractAzureRepositoryServiceTestCase ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeUnit ; import org . elasticsearch . snapshots . SnapshotState ; import org . elasticsearch . test . ESIntegTestCase ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . SUITE , numDataNodes = <int> , numClientNodes = <int> , transportClientRatio = <float> ) public class AzureSnapshotRestoreServiceTests extends AbstractAzureRepositoryServiceTestCase { public AzureSnapshotRestoreServiceTests ( ) { super ( <str> + randomInt ( ) ) ; } public void testSimpleWorkflow ( ) { Client client = client ( ) ; logger . info ( <str> , basePath ) ; PutRepositoryResponse putRepositoryResponse = client . admin ( ) . cluster ( ) . preparePutRepository ( <str> ) . setType ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , basePath ) . put ( <str> , randomIntBetween ( <int> , <int> ) , ByteSizeUnit . BYTES ) ) . get ( ) ; assertThat ( putRepositoryResponse . isAcknowledged ( ) , equalTo ( true ) ) ; createIndex ( <str> , <str> , <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; index ( <str> , <str> , Integer . toString ( i ) , <str> , <str> + i ) ; } refresh ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; CreateSnapshotResponse createSnapshotResponse = client . admin ( ) . cluster ( ) . prepareCreateSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> , <str> ) . get ( ) ; assertThat ( createSnapshotResponse . getSnapshotInfo ( ) . successfulShards ( ) , greaterThan ( <int> ) ) ; assertThat ( createSnapshotResponse . getSnapshotInfo ( ) . successfulShards ( ) , equalTo ( createSnapshotResponse . getSnapshotInfo ( ) . totalShards ( ) ) ) ; assertThat ( client . admin ( ) . cluster ( ) . prepareGetSnapshots ( <str> ) . setSnapshots ( <str> ) . get ( ) . getSnapshots ( ) . get ( <int> ) . state ( ) , equalTo ( SnapshotState . SUCCESS ) ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { client . prepareDelete ( <str> , <str> , Integer . toString ( i ) ) . get ( ) ; } for ( int i = <int> ; i < <int> ; i + + ) { client . prepareDelete ( <str> , <str> , Integer . toString ( i ) ) . get ( ) ; } for ( int i = <int> ; i < <int> ; i + = <int> ) { client . prepareDelete ( <str> , <str> , Integer . toString ( i ) ) . get ( ) ; } refresh ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; client . admin ( ) . indices ( ) . prepareClose ( <str> , <str> ) . get ( ) ; logger . info ( <str> ) ; RestoreSnapshotResponse restoreSnapshotResponse = client . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . execute ( ) . actionGet ( ) ; assertThat ( restoreSnapshotResponse . getRestoreInfo ( ) . totalShards ( ) , greaterThan ( <int> ) ) ; ensureGreen ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; cluster ( ) . wipeIndices ( <str> , <str> ) ; logger . info ( <str> ) ; restoreSnapshotResponse = client . admin ( ) . cluster ( ) . prepareRestoreSnapshot ( <str> , <str> ) . setWaitForCompletion ( true ) . setIndices ( <str> , <str> ) . execute ( ) . actionGet ( ) ; assertThat ( restoreSnapshotResponse . getRestoreInfo ( ) . totalShards ( ) , greaterThan ( <int> ) ) ; ensureGreen ( ) ; assertThat ( client . prepareSearch ( <str> ) . setSize ( <int> ) . get ( ) . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; ClusterState clusterState = client . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) . getState ( ) ; assertThat ( clusterState . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( true ) ) ; assertThat ( clusterState . getMetaData ( ) . hasIndex ( <str> ) , equalTo ( false ) ) ; } } 

package org . elasticsearch . index ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . VersionUtils ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; import java . util . function . Consumer ; public class IndexSettingsTests extends ESTestCase { public void testRunListener ( ) { Version version = VersionUtils . getPreviousVersion ( ) ; Settings theSettings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . put ( IndexMetaData . SETTING_INDEX_UUID , <str> ) . build ( ) ; final AtomicInteger integer = new AtomicInteger ( <int> ) ; Consumer < Settings > settingsConsumer = ( s ) - > integer . set ( s . getAsInt ( <str> , - <int> ) ) ; IndexMetaData metaData = newIndexMeta ( <str> , theSettings ) ; IndexSettings settings = new IndexSettings ( metaData , Settings . EMPTY , Collections . singleton ( settingsConsumer ) ) ; assertEquals ( version , settings . getIndexVersionCreated ( ) ) ; assertEquals ( <str> , settings . getUUID ( ) ) ; assertEquals ( <int> , settings . getUpdateListeners ( ) . size ( ) ) ; assertFalse ( settings . updateIndexMetaData ( metaData ) ) ; assertEquals ( metaData . getSettings ( ) . getAsMap ( ) , settings . getSettings ( ) . getAsMap ( ) ) ; assertEquals ( <int> , integer . get ( ) ) ; assertTrue ( settings . updateIndexMetaData ( newIndexMeta ( <str> , Settings . builder ( ) . put ( theSettings ) . put ( <str> , <int> ) . build ( ) ) ) ) ; assertEquals ( <int> , integer . get ( ) ) ; } public void testMergedSettingsArePassed ( ) { Version version = VersionUtils . getPreviousVersion ( ) ; Settings theSettings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . put ( IndexMetaData . SETTING_INDEX_UUID , <str> ) . build ( ) ; final AtomicInteger integer = new AtomicInteger ( <int> ) ; final StringBuilder builder = new StringBuilder ( ) ; Consumer < Settings > settingsConsumer = ( s ) - > { integer . set ( s . getAsInt ( <str> , - <int> ) ) ; builder . append ( s . get ( <str> , <str> ) ) ; } ; IndexSettings settings = new IndexSettings ( newIndexMeta ( <str> , theSettings ) , Settings . EMPTY , Collections . singleton ( settingsConsumer ) ) ; assertEquals ( <int> , integer . get ( ) ) ; assertEquals ( <str> , builder . toString ( ) ) ; IndexMetaData newMetaData = newIndexMeta ( <str> , Settings . builder ( ) . put ( settings . getIndexMetaData ( ) . getSettings ( ) ) . put ( <str> , <int> ) . build ( ) ) ; assertTrue ( settings . updateIndexMetaData ( newMetaData ) ) ; assertSame ( settings . getIndexMetaData ( ) , newMetaData ) ; assertEquals ( <int> , integer . get ( ) ) ; assertEquals ( <str> , builder . toString ( ) ) ; integer . set ( <int> ) ; assertTrue ( settings . updateIndexMetaData ( newIndexMeta ( <str> , Settings . builder ( ) . put ( settings . getIndexMetaData ( ) . getSettings ( ) ) . put ( <str> , <str> ) . build ( ) ) ) ) ; assertEquals ( <str> , builder . toString ( ) ) ; assertEquals ( <int> , integer . get ( ) ) ; } public void testListenerCanThrowException ( ) { Version version = VersionUtils . getPreviousVersion ( ) ; Settings theSettings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . put ( IndexMetaData . SETTING_INDEX_UUID , <str> ) . build ( ) ; final AtomicInteger integer = new AtomicInteger ( <int> ) ; Consumer < Settings > settingsConsumer = ( s ) - > integer . set ( s . getAsInt ( <str> , - <int> ) ) ; Consumer < Settings > exceptionConsumer = ( s ) - > { throw new RuntimeException ( <str> ) ; } ; List < Consumer < Settings > > list = new ArrayList < > ( ) ; list . add ( settingsConsumer ) ; list . add ( exceptionConsumer ) ; Collections . shuffle ( list , random ( ) ) ; IndexSettings settings = new IndexSettings ( newIndexMeta ( <str> , theSettings ) , Settings . EMPTY , list ) ; assertEquals ( <int> , integer . get ( ) ) ; assertTrue ( settings . updateIndexMetaData ( newIndexMeta ( <str> , Settings . builder ( ) . put ( theSettings ) . put ( <str> , <int> ) . build ( ) ) ) ) ; assertEquals ( <int> , integer . get ( ) ) ; } public void testSettingsConsistency ( ) { Version version = VersionUtils . getPreviousVersion ( ) ; IndexMetaData metaData = newIndexMeta ( <str> , Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ) ; IndexSettings settings = new IndexSettings ( metaData , Settings . EMPTY , Collections . emptyList ( ) ) ; assertEquals ( version , settings . getIndexVersionCreated ( ) ) ; assertEquals ( <str> , settings . getUUID ( ) ) ; try { settings . updateIndexMetaData ( newIndexMeta ( <str> , Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , <int> ) . build ( ) ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertTrue ( ex . getMessage ( ) , ex . getMessage ( ) . startsWith ( <str> ) ) ; } metaData = newIndexMeta ( <str> , Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( IndexMetaData . SETTING_INDEX_UUID , <str> ) . build ( ) ) ; settings = new IndexSettings ( metaData , Settings . EMPTY , Collections . emptyList ( ) ) ; try { settings . updateIndexMetaData ( newIndexMeta ( <str> , Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( <str> , <int> ) . build ( ) ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertEquals ( <str> , ex . getMessage ( ) ) ; } assertEquals ( metaData . getSettings ( ) . getAsMap ( ) , settings . getSettings ( ) . getAsMap ( ) ) ; } public void testNodeSettingsAreContained ( ) { final int numShards = randomIntBetween ( <int> , <int> ) ; final int numReplicas = randomIntBetween ( <int> , <int> ) ; Settings theSettings = Settings . settingsBuilder ( ) . put ( <str> , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , numReplicas ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , numShards ) . build ( ) ; Settings nodeSettings = Settings . settingsBuilder ( ) . put ( <str> , <int> ) . build ( ) ; final AtomicInteger indexValue = new AtomicInteger ( <int> ) ; final AtomicInteger nodeValue = new AtomicInteger ( <int> ) ; Consumer < Settings > settingsConsumer = ( s ) - > { indexValue . set ( s . getAsInt ( <str> , - <int> ) ) ; nodeValue . set ( s . getAsInt ( <str> , - <int> ) ) ; } ; IndexSettings settings = new IndexSettings ( newIndexMeta ( <str> , theSettings ) , nodeSettings , Collections . singleton ( settingsConsumer ) ) ; assertEquals ( numReplicas , settings . getNumberOfReplicas ( ) ) ; assertEquals ( numShards , settings . getNumberOfShards ( ) ) ; assertEquals ( <int> , indexValue . get ( ) ) ; assertEquals ( <int> , nodeValue . get ( ) ) ; assertTrue ( settings . updateIndexMetaData ( newIndexMeta ( <str> , Settings . settingsBuilder ( ) . put ( <str> , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , numReplicas + <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , numShards ) . build ( ) ) ) ) ; assertEquals ( <int> , indexValue . get ( ) ) ; assertEquals ( <int> , nodeValue . get ( ) ) ; assertSame ( nodeSettings , settings . getNodeSettings ( ) ) ; } private IndexMetaData newIndexMeta ( String name , Settings indexSettings ) { Settings build = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( indexSettings ) . build ( ) ; IndexMetaData metaData = IndexMetaData . builder ( name ) . settings ( build ) . build ( ) ; return metaData ; } } 

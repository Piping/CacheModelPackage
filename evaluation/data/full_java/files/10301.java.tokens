package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Objects ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; @GwtCompatible ( emulated = true ) public abstract class AbstractTableReadTest extends TestCase { protected Table < String , Integer , Character > table ; protected abstract Table < String , Integer , Character > create ( Object . . . data ) ; protected void assertSize ( int expectedSize ) { assertEquals ( expectedSize , table . size ( ) ) ; } @Override public void setUp ( ) throws Exception { super . setUp ( ) ; table = create ( ) ; } public void testContains ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; assertTrue ( table . contains ( <str> , <int> ) ) ; assertFalse ( table . contains ( <str> , <int> ) ) ; assertFalse ( table . contains ( <str> , <int> ) ) ; assertFalse ( table . contains ( <str> , <int> ) ) ; assertFalse ( table . contains ( <str> , null ) ) ; assertFalse ( table . contains ( null , <int> ) ) ; assertFalse ( table . contains ( null , null ) ) ; } public void testContainsRow ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertTrue ( table . containsRow ( <str> ) ) ; assertTrue ( table . containsRow ( <str> ) ) ; assertFalse ( table . containsRow ( <str> ) ) ; assertFalse ( table . containsRow ( null ) ) ; } public void testContainsColumn ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertTrue ( table . containsColumn ( <int> ) ) ; assertTrue ( table . containsColumn ( <int> ) ) ; assertFalse ( table . containsColumn ( <int> ) ) ; assertFalse ( table . containsColumn ( null ) ) ; } public void testContainsValue ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertTrue ( table . containsValue ( <str> ) ) ; assertTrue ( table . containsValue ( <str> ) ) ; assertTrue ( table . containsValue ( <str> ) ) ; assertFalse ( table . containsValue ( <str> ) ) ; assertFalse ( table . containsValue ( null ) ) ; } public void testGet ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertEquals ( ( Character ) <str> , table . get ( <str> , <int> ) ) ; assertNull ( table . get ( <str> , <int> ) ) ; assertNull ( table . get ( <str> , <int> ) ) ; assertNull ( table . get ( <str> , <int> ) ) ; assertNull ( table . get ( <str> , null ) ) ; assertNull ( table . get ( null , <int> ) ) ; assertNull ( table . get ( null , null ) ) ; } public void testIsEmpty ( ) { assertTrue ( table . isEmpty ( ) ) ; table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertFalse ( table . isEmpty ( ) ) ; } public void testSize ( ) { assertSize ( <int> ) ; table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertSize ( <int> ) ; } public void testEquals ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > hashCopy = HashBasedTable . create ( table ) ; Table < String , Integer , Character > reordered = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > smaller = create ( <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > swapOuter = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > swapValues = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; new EqualsTester ( ) . addEqualityGroup ( table , hashCopy , reordered ) . addEqualityGroup ( smaller ) . addEqualityGroup ( swapOuter ) . addEqualityGroup ( swapValues ) . testEquals ( ) ; } public void testHashCode ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; int expected = Objects . hashCode ( <str> , <int> , <str> ) + Objects . hashCode ( <str> , <int> , <str> ) + Objects . hashCode ( <str> , <int> , <str> ) ; assertEquals ( expected , table . hashCode ( ) ) ; } public void testToStringSize1 ( ) { table = create ( <str> , <int> , <str> ) ; assertEquals ( <str> , table . toString ( ) ) ; } public void testRow ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( ImmutableMap . of ( <int> , <str> , <int> , <str> ) , table . row ( <str> ) ) ; } public void testRowNull ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; try { table . row ( null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testColumn ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertEquals ( ImmutableMap . of ( <str> , <str> , <str> , <str> ) , table . column ( <int> ) ) ; } public void testColumnNull ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; try { table . column ( null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testColumnSetPartialOverlap ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; assertThat ( table . columnKeySet ( ) ) . containsExactly ( <int> , <int> , <int> ) ; } @GwtIncompatible ( <str> ) public void testNullPointerInstance ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; new NullPointerTester ( ) . testAllPublicInstanceMethods ( table ) ; } } 

package org . elasticsearch . repositories . azure ; import org . apache . lucene . util . LuceneTestCase ; import org . elasticsearch . cloud . azure . storage . AzureStorageService . Storage ; import org . elasticsearch . cloud . azure . storage . AzureStorageSettings ; import org . elasticsearch . common . collect . Tuple ; import org . elasticsearch . common . settings . Settings ; import java . util . Map ; import static org . hamcrest . Matchers . * ; public class AzureSettingsParserTest extends LuceneTestCase { public void testParseTwoSettingsExplicitDefault ( ) { Settings settings = Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , true ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; Tuple < AzureStorageSettings , Map < String , AzureStorageSettings > > tuple = AzureStorageSettings . parse ( settings ) ; assertThat ( tuple . v1 ( ) , notNullValue ( ) ) ; assertThat ( tuple . v1 ( ) . getAccount ( ) , is ( <str> ) ) ; assertThat ( tuple . v1 ( ) . getKey ( ) , is ( <str> ) ) ; assertThat ( tuple . v2 ( ) . keySet ( ) , hasSize ( <int> ) ) ; assertThat ( tuple . v2 ( ) . get ( <str> ) , notNullValue ( ) ) ; assertThat ( tuple . v2 ( ) . get ( <str> ) . getAccount ( ) , is ( <str> ) ) ; assertThat ( tuple . v2 ( ) . get ( <str> ) . getKey ( ) , is ( <str> ) ) ; } public void testParseUniqueSettings ( ) { Settings settings = Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; Tuple < AzureStorageSettings , Map < String , AzureStorageSettings > > tuple = AzureStorageSettings . parse ( settings ) ; assertThat ( tuple . v1 ( ) , notNullValue ( ) ) ; assertThat ( tuple . v1 ( ) . getAccount ( ) , is ( <str> ) ) ; assertThat ( tuple . v1 ( ) . getKey ( ) , is ( <str> ) ) ; assertThat ( tuple . v2 ( ) . keySet ( ) , hasSize ( <int> ) ) ; } public void testDeprecatedSettings ( ) { Settings settings = Settings . builder ( ) . put ( Storage . ACCOUNT , <str> ) . put ( Storage . KEY , <str> ) . build ( ) ; Tuple < AzureStorageSettings , Map < String , AzureStorageSettings > > tuple = AzureStorageSettings . parse ( settings ) ; assertThat ( tuple . v1 ( ) , notNullValue ( ) ) ; assertThat ( tuple . v1 ( ) . getAccount ( ) , is ( <str> ) ) ; assertThat ( tuple . v1 ( ) . getKey ( ) , is ( <str> ) ) ; assertThat ( tuple . v2 ( ) . keySet ( ) , hasSize ( <int> ) ) ; } public void testParseTwoSettingsNoDefault ( ) { Settings settings = Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; Tuple < AzureStorageSettings , Map < String , AzureStorageSettings > > tuple = AzureStorageSettings . parse ( settings ) ; assertThat ( tuple . v1 ( ) , notNullValue ( ) ) ; assertThat ( tuple . v1 ( ) . getAccount ( ) , is ( <str> ) ) ; assertThat ( tuple . v1 ( ) . getKey ( ) , is ( <str> ) ) ; assertThat ( tuple . v2 ( ) . keySet ( ) , hasSize ( <int> ) ) ; assertThat ( tuple . v2 ( ) . get ( <str> ) , notNullValue ( ) ) ; assertThat ( tuple . v2 ( ) . get ( <str> ) . getAccount ( ) , is ( <str> ) ) ; assertThat ( tuple . v2 ( ) . get ( <str> ) . getKey ( ) , is ( <str> ) ) ; } public void testParseTwoSettingsTooManyDefaultSet ( ) { Settings settings = Settings . builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , true ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , true ) . build ( ) ; Tuple < AzureStorageSettings , Map < String , AzureStorageSettings > > tuple = AzureStorageSettings . parse ( settings ) ; assertThat ( tuple . v1 ( ) , notNullValue ( ) ) ; assertThat ( tuple . v1 ( ) . getAccount ( ) , is ( <str> ) ) ; assertThat ( tuple . v1 ( ) . getKey ( ) , is ( <str> ) ) ; assertThat ( tuple . v2 ( ) . keySet ( ) , hasSize ( <int> ) ) ; assertThat ( tuple . v2 ( ) . get ( <str> ) , notNullValue ( ) ) ; assertThat ( tuple . v2 ( ) . get ( <str> ) . getAccount ( ) , is ( <str> ) ) ; assertThat ( tuple . v2 ( ) . get ( <str> ) . getKey ( ) , is ( <str> ) ) ; } public void testParseEmptySettings ( ) { Tuple < AzureStorageSettings , Map < String , AzureStorageSettings > > tuple = AzureStorageSettings . parse ( Settings . EMPTY ) ; assertThat ( tuple . v1 ( ) , nullValue ( ) ) ; assertThat ( tuple . v2 ( ) . keySet ( ) , hasSize ( <int> ) ) ; } } 

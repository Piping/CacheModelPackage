package org . gradle . api . internal . artifacts . repositories . resolver ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . ComponentResolvers ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . DescriptorParseContext ; import org . gradle . api . internal . component . ArtifactType ; import org . gradle . internal . component . model . ComponentArtifactMetaData ; import org . gradle . internal . component . model . DefaultComponentOverrideMetadata ; import org . gradle . internal . resolve . resolver . ArtifactResolver ; import org . gradle . internal . resolve . resolver . ComponentMetaDataResolver ; import org . gradle . internal . resolve . result . * ; import org . gradle . internal . resource . local . DefaultLocallyAvailableExternalResource ; import org . gradle . internal . resource . local . DefaultLocallyAvailableResource ; import org . gradle . internal . resource . local . LocallyAvailableExternalResource ; import org . gradle . internal . resource . local . LocallyAvailableResource ; import java . io . File ; public class ExternalResourceResolverDescriptorParseContext implements DescriptorParseContext { private final ComponentResolvers mainResolvers ; public ExternalResourceResolverDescriptorParseContext ( ComponentResolvers mainResolvers ) { this . mainResolvers = mainResolvers ; } public LocallyAvailableExternalResource getMetaDataArtifact ( ModuleComponentIdentifier moduleComponentIdentifier , ArtifactType artifactType ) { File resolvedArtifactFile = resolveMetaDataArtifactFile ( moduleComponentIdentifier , mainResolvers . getComponentResolver ( ) , mainResolvers . getArtifactResolver ( ) , artifactType ) ; LocallyAvailableResource localResource = new DefaultLocallyAvailableResource ( resolvedArtifactFile ) ; return new DefaultLocallyAvailableExternalResource ( resolvedArtifactFile . toURI ( ) , localResource ) ; } private File resolveMetaDataArtifactFile ( ModuleComponentIdentifier moduleComponentIdentifier , ComponentMetaDataResolver componentResolver , ArtifactResolver artifactResolver , ArtifactType artifactType ) { BuildableComponentResolveResult moduleVersionResolveResult = new DefaultBuildableComponentResolveResult ( ) ; componentResolver . resolve ( moduleComponentIdentifier , new DefaultComponentOverrideMetadata ( ) , moduleVersionResolveResult ) ; BuildableArtifactSetResolveResult moduleArtifactsResolveResult = new DefaultBuildableArtifactSetResolveResult ( ) ; artifactResolver . resolveModuleArtifacts ( moduleVersionResolveResult . getMetaData ( ) , artifactType , moduleArtifactsResolveResult ) ; BuildableArtifactResolveResult artifactResolveResult = new DefaultBuildableArtifactResolveResult ( ) ; ComponentArtifactMetaData artifactMetaData = moduleArtifactsResolveResult . getArtifacts ( ) . iterator ( ) . next ( ) ; artifactResolver . resolveArtifact ( artifactMetaData , moduleVersionResolveResult . getMetaData ( ) . getSource ( ) , artifactResolveResult ) ; return artifactResolveResult . getFile ( ) ; } } 

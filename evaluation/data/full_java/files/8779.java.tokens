package org . elasticsearch . script . javascript ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . script . CompiledScript ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . test . ESTestCase ; import org . mozilla . javascript . EcmaError ; import org . mozilla . javascript . WrappedException ; import java . util . HashMap ; import java . util . Map ; public class JavaScriptSecurityTests extends ESTestCase { private JavaScriptScriptEngineService se ; @Override public void setUp ( ) throws Exception { super . setUp ( ) ; se = new JavaScriptScriptEngineService ( Settings . Builder . EMPTY_SETTINGS ) ; assumeTrue ( <str> , System . getSecurityManager ( ) ! = null ) ; } @Override public void tearDown ( ) throws Exception { se . close ( ) ; super . tearDown ( ) ; } private void doTest ( String script ) { Map < String , Object > vars = new HashMap < String , Object > ( ) ; se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( script ) ) , vars ) . run ( ) ; } private void assertSuccess ( String script ) { doTest ( script ) ; } private void assertFailure ( String script , Class < ? extends Throwable > exceptionClass ) { try { doTest ( script ) ; fail ( <str> ) ; } catch ( WrappedException expected ) { Throwable cause = expected . getCause ( ) ; assertNotNull ( cause ) ; if ( exceptionClass . isAssignableFrom ( cause . getClass ( ) ) = = false ) { throw new AssertionError ( <str> + expected , expected ) ; } } catch ( EcmaError expected ) { if ( exceptionClass . isAssignableFrom ( expected . getClass ( ) ) = = false ) { throw new AssertionError ( <str> + expected , expected ) ; } } } public void testOK ( ) { assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; } public void testNotOK ( ) throws Exception { assertFailure ( <str> , EcmaError . class ) ; assertFailure ( <str> , EcmaError . class ) ; assertFailure ( <str> , EcmaError . class ) ; } public void testDefinitelyNotOK ( ) { assertFailure ( <str> + <str> , EcmaError . class ) ; assertFailure ( <str> + <str> , EcmaError . class ) ; } } 

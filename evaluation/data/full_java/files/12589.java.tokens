package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser ; import org . apache . ivy . core . module . descriptor . Configuration ; import org . apache . ivy . core . module . descriptor . Configuration . Visibility ; import org . apache . ivy . core . module . descriptor . DefaultDependencyDescriptor ; import org . apache . ivy . core . module . descriptor . DefaultModuleDescriptor ; import org . apache . ivy . core . module . id . ModuleRevisionId ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . PomReader . PomDependencyData ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . data . MavenDependencyKey ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . data . PomDependencyMgt ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . MavenVersionSelectorScheme ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . VersionSelectorScheme ; import org . gradle . api . internal . component . ArtifactType ; import org . gradle . internal . component . external . model . DefaultMavenModuleResolveMetaData ; import org . gradle . internal . component . external . model . DefaultModuleComponentIdentifier ; import org . gradle . internal . resource . local . LocallyAvailableExternalResource ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . text . ParseException ; import java . util . Collection ; import java . util . LinkedHashMap ; import java . util . Map ; public final class GradlePomModuleDescriptorParser extends AbstractModuleDescriptorParser < DefaultMavenModuleResolveMetaData > { private static final Logger LOGGER = LoggerFactory . getLogger ( GradlePomModuleDescriptorParser . class ) ; private static final String DEPENDENCY_IMPORT_SCOPE = <str> ; private final VersionSelectorScheme gradleVersionSelectorScheme ; private final VersionSelectorScheme mavenVersionSelectorScheme ; public GradlePomModuleDescriptorParser ( VersionSelectorScheme gradleVersionSelectorScheme ) { this . gradleVersionSelectorScheme = gradleVersionSelectorScheme ; mavenVersionSelectorScheme = new MavenVersionSelectorScheme ( gradleVersionSelectorScheme ) ; } @Override protected String getTypeName ( ) { return <str> ; } public String toString ( ) { return <str> ; } protected DefaultMavenModuleResolveMetaData doParseDescriptor ( DescriptorParseContext parserSettings , LocallyAvailableExternalResource resource , boolean validate ) throws IOException , ParseException , SAXException { PomReader pomReader = new PomReader ( resource ) ; GradlePomModuleDescriptorBuilder mdBuilder = new GradlePomModuleDescriptorBuilder ( pomReader , gradleVersionSelectorScheme , mavenVersionSelectorScheme ) ; doParsePom ( parserSettings , mdBuilder , pomReader ) ; DefaultModuleDescriptor moduleDescriptor = mdBuilder . getModuleDescriptor ( ) ; if ( pomReader . getRelocation ( ) ! = null ) { return new DefaultMavenModuleResolveMetaData ( moduleDescriptor , <str> , true ) ; } return new DefaultMavenModuleResolveMetaData ( moduleDescriptor , pomReader . getPackaging ( ) , false ) ; } private void doParsePom ( DescriptorParseContext parserSettings , GradlePomModuleDescriptorBuilder mdBuilder , PomReader pomReader ) throws IOException , SAXException { if ( pomReader . hasParent ( ) ) { ModuleComponentIdentifier parentId = DefaultModuleComponentIdentifier . newId ( pomReader . getParentGroupId ( ) , pomReader . getParentArtifactId ( ) , pomReader . getParentVersion ( ) ) ; PomReader parentPomReader = parseOtherPom ( parserSettings , parentId ) ; pomReader . setPomParent ( parentPomReader ) ; } pomReader . resolveGAV ( ) ; String groupId = pomReader . getGroupId ( ) ; String artifactId = pomReader . getArtifactId ( ) ; String version = pomReader . getVersion ( ) ; mdBuilder . setModuleRevId ( groupId , artifactId , version ) ; mdBuilder . setHomePage ( pomReader . getHomePage ( ) ) ; mdBuilder . setDescription ( pomReader . getDescription ( ) ) ; mdBuilder . setLicenses ( pomReader . getLicenses ( ) ) ; ModuleRevisionId relocation = pomReader . getRelocation ( ) ; if ( relocation ! = null ) { if ( groupId ! = null & & artifactId ! = null & & artifactId . equals ( relocation . getName ( ) ) & & groupId . equals ( relocation . getOrganisation ( ) ) ) { LOGGER . error ( <str> , mdBuilder . getModuleDescriptor ( ) . getModuleRevisionId ( ) , relocation ) ; LOGGER . warn ( <str> , relocation ) ; LOGGER . warn ( <str> ) ; PomReader relocatedModule = parseOtherPom ( parserSettings , DefaultModuleComponentIdentifier . newId ( relocation . getOrganisation ( ) , relocation . getName ( ) , relocation . getRevision ( ) ) ) ; Collection < PomDependencyData > pomDependencyDataList = relocatedModule . getDependencies ( ) . values ( ) ; for ( PomDependencyData pomDependencyData : pomDependencyDataList ) { mdBuilder . addDependency ( pomDependencyData ) ; } } else { LOGGER . info ( mdBuilder . getModuleDescriptor ( ) . getModuleRevisionId ( ) + <str> + relocation + <str> ) ; LOGGER . debug ( <str> ) ; DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor ( mdBuilder . getModuleDescriptor ( ) , relocation , true , false , true ) ; Configuration [ ] m2Confs = GradlePomModuleDescriptorBuilder . MAVEN2_CONFIGURATIONS ; for ( Configuration m2Conf : m2Confs ) { if ( Visibility . PUBLIC . equals ( m2Conf . getVisibility ( ) ) ) { dd . addDependencyConfiguration ( m2Conf . getName ( ) , m2Conf . getName ( ) ) ; } } mdBuilder . addDependency ( dd ) ; } } else { overrideDependencyMgtsWithImported ( parserSettings , pomReader ) ; for ( PomDependencyData dependency : pomReader . getDependencies ( ) . values ( ) ) { mdBuilder . addDependency ( dependency ) ; } } } private void overrideDependencyMgtsWithImported ( DescriptorParseContext parseContext , PomReader pomReader ) throws IOException , SAXException { Map < MavenDependencyKey , PomDependencyMgt > importedDependencyMgts = parseImportedDependencyMgts ( parseContext , pomReader . parseDependencyMgt ( ) ) ; pomReader . addImportedDependencyMgts ( importedDependencyMgts ) ; } private Map < MavenDependencyKey , PomDependencyMgt > parseImportedDependencyMgts ( DescriptorParseContext parseContext , Collection < PomDependencyMgt > currentDependencyMgts ) throws IOException , SAXException { Map < MavenDependencyKey , PomDependencyMgt > importedDependencyMgts = new LinkedHashMap < MavenDependencyKey , PomDependencyMgt > ( ) ; for ( PomDependencyMgt currentDependencyMgt : currentDependencyMgts ) { if ( isDependencyImportScoped ( currentDependencyMgt ) ) { PomReader importDescr = parseImportedPom ( parseContext , currentDependencyMgt ) ; importedDependencyMgts . putAll ( importDescr . getDependencyMgt ( ) ) ; } } return importedDependencyMgts ; } private boolean isDependencyImportScoped ( PomDependencyMgt dependencyMgt ) { return DEPENDENCY_IMPORT_SCOPE . equals ( dependencyMgt . getScope ( ) ) ; } private PomReader parseImportedPom ( DescriptorParseContext parseContext , PomDependencyMgt pomDependencyMgt ) throws IOException , SAXException { ModuleComponentIdentifier importedId = DefaultModuleComponentIdentifier . newId ( pomDependencyMgt . getGroupId ( ) , pomDependencyMgt . getArtifactId ( ) , pomDependencyMgt . getVersion ( ) ) ; return parseOtherPom ( parseContext , importedId ) ; } private PomReader parseOtherPom ( DescriptorParseContext parseContext , ModuleComponentIdentifier parentId ) throws IOException , SAXException { LocallyAvailableExternalResource localResource = parseContext . getMetaDataArtifact ( parentId , ArtifactType . MAVEN_POM ) ; PomReader pomReader = new PomReader ( localResource ) ; GradlePomModuleDescriptorBuilder mdBuilder = new GradlePomModuleDescriptorBuilder ( pomReader , gradleVersionSelectorScheme , mavenVersionSelectorScheme ) ; doParsePom ( parseContext , mdBuilder , pomReader ) ; return pomReader ; } } 

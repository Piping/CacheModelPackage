package org . elasticsearch . index . analysis ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . test . ESTokenStreamTestCase ; import org . elasticsearch . test . IndexSettingsModule ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . containsString ; public class PatternCaptureTokenFilterTests extends ESTokenStreamTestCase { public void testPatternCaptureTokenFilter ( ) throws Exception { String json = <str> ; Settings settings = settingsBuilder ( ) . put ( <str> , createTempDir ( ) ) . loadFromStream ( json , getClass ( ) . getResourceAsStream ( json ) ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; IndexSettings idxSettings = IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , settings ) ; AnalysisService analysisService = new AnalysisRegistry ( null , new Environment ( settings ) ) . build ( idxSettings ) ; NamedAnalyzer analyzer1 = analysisService . analyzer ( <str> ) ; assertTokenStreamContents ( analyzer1 . tokenStream ( <str> , <str> ) , new String [ ] { <str> , <str> , <str> } ) ; NamedAnalyzer analyzer2 = analysisService . analyzer ( <str> ) ; assertTokenStreamContents ( analyzer2 . tokenStream ( <str> , <str> ) , new String [ ] { <str> , <str> , <str> , <str> } ) ; NamedAnalyzer analyzer3 = analysisService . analyzer ( <str> ) ; assertTokenStreamContents ( analyzer3 . tokenStream ( <str> , <str> ) , new String [ ] { <str> , <str> } ) ; } public void testNoPatterns ( ) { try { new PatternCaptureGroupTokenFilterFactory ( IndexSettingsModule . newIndexSettings ( new Index ( <str> ) , Settings . EMPTY ) , null , <str> , settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

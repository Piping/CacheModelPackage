package org . gradle . api . internal . artifacts . repositories . resolver ; import org . gradle . api . artifacts . ModuleIdentifier ; import org . gradle . internal . resolve . result . ResourceAwareResolveResult ; import org . gradle . internal . component . model . IvyArtifactName ; import org . gradle . internal . resource . ResourceException ; import org . gradle . internal . resource . ResourceNotFoundException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; public class ChainedVersionLister implements VersionLister { private final List < VersionLister > versionListers ; public ChainedVersionLister ( VersionLister . . . delegates ) { this . versionListers = Arrays . asList ( delegates ) ; } public VersionPatternVisitor newVisitor ( final ModuleIdentifier module , final Collection < String > dest , final ResourceAwareResolveResult result ) { final List < VersionPatternVisitor > visitors = new ArrayList < VersionPatternVisitor > ( ) ; for ( VersionLister lister : versionListers ) { visitors . add ( lister . newVisitor ( module , dest , result ) ) ; } return new VersionPatternVisitor ( ) { public void visit ( ResourcePattern pattern , IvyArtifactName artifact ) throws ResourceException { ResourceNotFoundException failure = null ; for ( VersionPatternVisitor list : visitors ) { try { list . visit ( pattern , artifact ) ; return ; } catch ( ResourceNotFoundException e ) { if ( failure = = null ) { failure = e ; } } catch ( Exception e ) { throw new ResourceException ( String . format ( <str> , module ) , e ) ; } } throw failure ; } } ; } } 

package org . gradle . api . internal . project . taskfactory ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . tasks . Nested ; import java . lang . annotation . Annotation ; import java . util . concurrent . Callable ; public class NestedBeanPropertyAnnotationHandler implements PropertyAnnotationHandler { public Class < ? extends Annotation > getAnnotationType ( ) { return Nested . class ; } public void attachActions ( final PropertyActionContext context ) { Class < ? > nestedType = context . getInstanceVariableType ( ) ; if ( nestedType = = null ) { nestedType = context . getType ( ) ; } context . attachActions ( nestedType ) ; context . setConfigureAction ( new UpdateAction ( ) { public void update ( TaskInternal task , final Callable < Object > futureValue ) { task . getInputs ( ) . property ( context . getName ( ) + <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { Object bean = futureValue . call ( ) ; return bean = = null ? null : bean . getClass ( ) . getName ( ) ; } } ) ; } } ) ; } } 

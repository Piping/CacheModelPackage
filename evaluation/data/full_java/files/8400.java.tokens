package org . elasticsearch . recovery ; import org . elasticsearch . action . admin . indices . flush . FlushResponse ; import org . elasticsearch . action . admin . indices . refresh . RefreshResponse ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . client . Requests . flushRequest ; import static org . elasticsearch . client . Requests . getRequest ; import static org . elasticsearch . client . Requests . indexRequest ; import static org . elasticsearch . client . Requests . refreshRequest ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; public class SimpleRecoveryIT extends ESIntegTestCase { @Override public Settings indexSettings ( ) { return settingsBuilder ( ) . put ( super . indexSettings ( ) ) . put ( recoverySettings ( ) ) . build ( ) ; } protected Settings recoverySettings ( ) { return Settings . Builder . EMPTY_SETTINGS ; } @Override protected int maximumNumberOfReplicas ( ) { return <int> ; } public void testSimpleRecovery ( ) throws Exception { assertAcked ( prepareCreate ( <str> , <int> ) . execute ( ) . actionGet ( ) ) ; NumShards numShards = getNumShards ( <str> ) ; logger . info ( <str> ) ; ensureYellow ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( source ( <str> , <str> ) ) ) . actionGet ( ) ; FlushResponse flushResponse = client ( ) . admin ( ) . indices ( ) . flush ( flushRequest ( <str> ) ) . actionGet ( ) ; assertThat ( flushResponse . getTotalShards ( ) , equalTo ( numShards . totalNumShards ) ) ; assertThat ( flushResponse . getSuccessfulShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( flushResponse . getFailedShards ( ) , equalTo ( <int> ) ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( source ( <str> , <str> ) ) ) . actionGet ( ) ; RefreshResponse refreshResponse = client ( ) . admin ( ) . indices ( ) . refresh ( refreshRequest ( <str> ) ) . actionGet ( ) ; assertThat ( refreshResponse . getTotalShards ( ) , equalTo ( numShards . totalNumShards ) ) ; assertThat ( refreshResponse . getSuccessfulShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( refreshResponse . getFailedShards ( ) , equalTo ( <int> ) ) ; allowNodes ( <str> , <int> ) ; logger . info ( <str> ) ; ensureGreen ( ) ; GetResponse getResult ; for ( int i = <int> ; i < <int> ; i + + ) { getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) . operationThreaded ( false ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) . operationThreaded ( false ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) . operationThreaded ( true ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) . operationThreaded ( true ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; } allowNodes ( <str> , <int> ) ; Thread . sleep ( <int> ) ; logger . info ( <str> ) ; ensureGreen ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) . operationThreaded ( true ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) . operationThreaded ( true ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) . operationThreaded ( true ) ) . actionGet ( ) ; assertThat ( getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) ) ) ; } } private String source ( String id , String nameValue ) { return <str> + id + <str> + nameValue + <str> ; } } 

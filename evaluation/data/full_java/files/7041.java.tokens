package org . elasticsearch . rest . action . fieldstats ; import org . elasticsearch . action . fieldstats . FieldStats ; import org . elasticsearch . action . fieldstats . FieldStatsRequest ; import org . elasticsearch . action . fieldstats . FieldStatsResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import java . util . Map ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestRequest . Method . POST ; import static org . elasticsearch . rest . action . support . RestActions . buildBroadcastShardsHeader ; public class RestFieldStatsAction extends BaseRestHandler { @Inject public RestFieldStatsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws Exception { if ( RestActions . hasBodyContent ( request ) & & request . hasParam ( <str> ) ) { throw new IllegalArgumentException ( <str> ) ; } final FieldStatsRequest fieldStatsRequest = new FieldStatsRequest ( ) ; fieldStatsRequest . indices ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; fieldStatsRequest . indicesOptions ( IndicesOptions . fromRequest ( request , fieldStatsRequest . indicesOptions ( ) ) ) ; fieldStatsRequest . level ( request . param ( <str> , FieldStatsRequest . DEFAULT_LEVEL ) ) ; if ( RestActions . hasBodyContent ( request ) ) { fieldStatsRequest . source ( RestActions . getRestContent ( request ) ) ; } else { fieldStatsRequest . setFields ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; } client . fieldStats ( fieldStatsRequest , new RestBuilderListener < FieldStatsResponse > ( channel ) { @Override public RestResponse buildResponse ( FieldStatsResponse response , XContentBuilder builder ) throws Exception { builder . startObject ( ) ; buildBroadcastShardsHeader ( builder , request , response ) ; builder . startObject ( <str> ) ; for ( Map . Entry < String , Map < String , FieldStats > > entry1 : response . getIndicesMergedFieldStats ( ) . entrySet ( ) ) { builder . startObject ( entry1 . getKey ( ) ) ; builder . startObject ( <str> ) ; for ( Map . Entry < String , FieldStats > entry2 : entry1 . getValue ( ) . entrySet ( ) ) { builder . field ( entry2 . getKey ( ) ) ; entry2 . getValue ( ) . toXContent ( builder , request ) ; } builder . endObject ( ) ; builder . endObject ( ) ; } builder . endObject ( ) ; return new BytesRestResponse ( RestStatus . OK , builder ) ; } } ) ; } } 

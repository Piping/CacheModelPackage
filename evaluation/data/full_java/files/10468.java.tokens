package com . google . common . graph ; import static com . google . common . graph . GraphProperties . isCyclic ; import static com . google . common . graph . GraphProperties . roots ; import static com . google . common . graph . Graphs . config ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . collect . ImmutableSet ; import org . junit . Test ; import org . junit . runner . RunWith ; import org . junit . runners . JUnit4 ; @RunWith ( JUnit4 . class ) public class GraphPropertiesTest { private static final Integer N1 = <int> ; private static final Integer N2 = <int> ; private static final Integer N3 = <int> ; private static final String E11 = <str> ; private static final String E12 = <str> ; private static final String E12_A = <str> ; private static final String E13 = <str> ; private static final String E21 = <str> ; private static final String E23 = <str> ; private static final String E31 = <str> ; @Test public void isCyclic_emptyGraph ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; assertThat ( isCyclic ( directedGraph ) ) . isFalse ( ) ; } @Test public void isCyclic_isolatedNodes ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addNode ( N1 ) ; assertThat ( isCyclic ( directedGraph ) ) . isFalse ( ) ; directedGraph . addNode ( N2 ) ; assertThat ( isCyclic ( directedGraph ) ) . isFalse ( ) ; } @Test public void isCyclic_oneEdge ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; assertThat ( isCyclic ( directedGraph ) ) . isFalse ( ) ; } @Test public void isCyclic_selfLoopEdge ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addEdge ( E11 , N1 , N1 ) ; assertThat ( isCyclic ( directedGraph ) ) . isTrue ( ) ; } @Test public void isCyclic_twoParallelEdges ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( config ( ) . multigraph ( ) ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E12_A , N1 , N2 ) ; assertThat ( isCyclic ( directedGraph ) ) . isFalse ( ) ; } @Test public void isCyclic_twoAcyclicEdges ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E13 , N1 , N3 ) ; assertThat ( isCyclic ( directedGraph ) ) . isFalse ( ) ; } @Test public void isCyclic_twoCyclicEdges ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E21 , N2 , N1 ) ; assertThat ( isCyclic ( directedGraph ) ) . isTrue ( ) ; } @Test public void isCyclic_threeAcyclicEdges ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E23 , N2 , N3 ) ; directedGraph . addEdge ( E13 , N1 , N3 ) ; assertThat ( isCyclic ( directedGraph ) ) . isFalse ( ) ; } @Test public void isCyclic_threeCyclicEdges ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E23 , N2 , N3 ) ; directedGraph . addEdge ( E31 , N3 , N1 ) ; assertThat ( isCyclic ( directedGraph ) ) . isTrue ( ) ; } @Test public void isCyclic_disconnectedCyclicGraph ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E21 , N2 , N1 ) ; directedGraph . addNode ( N3 ) ; assertThat ( isCyclic ( directedGraph ) ) . isTrue ( ) ; } @Test public void isCyclic_cyclicMultigraph ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( config ( ) . multigraph ( ) ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E12_A , N1 , N2 ) ; directedGraph . addEdge ( E23 , N2 , N3 ) ; directedGraph . addEdge ( E31 , N3 , N1 ) ; assertThat ( isCyclic ( directedGraph ) ) . isTrue ( ) ; } @Test public void isCyclic_multipleCycles ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( config ( ) . multigraph ( ) ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E21 , N2 , N1 ) ; directedGraph . addEdge ( E23 , N2 , N3 ) ; directedGraph . addEdge ( E31 , N3 , N1 ) ; assertThat ( isCyclic ( directedGraph ) ) . isTrue ( ) ; } @Test public void roots_emptyGraph ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; assertThat ( roots ( directedGraph ) ) . isEmpty ( ) ; } @Test public void roots_trivialGraph ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addNode ( N1 ) ; assertThat ( roots ( directedGraph ) ) . isEqualTo ( ImmutableSet . of ( N1 ) ) ; } @Test public void roots_nodeWithSelfLoop ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addNode ( N1 ) ; directedGraph . addEdge ( E11 , N1 , N1 ) ; assertThat ( roots ( directedGraph ) ) . isEmpty ( ) ; } @Test public void roots_nodeWithChildren ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E13 , N1 , N3 ) ; assertThat ( roots ( directedGraph ) ) . isEqualTo ( ImmutableSet . of ( N1 ) ) ; } @Test public void roots_cycle ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addEdge ( E12 , N1 , N2 ) ; directedGraph . addEdge ( E21 , N2 , N1 ) ; assertThat ( roots ( directedGraph ) ) . isEmpty ( ) ; } @Test public void roots_multipleRoots ( ) { DirectedGraph < Integer , String > directedGraph = Graphs . createDirected ( ) ; directedGraph . addNode ( N1 ) ; directedGraph . addNode ( N2 ) ; assertThat ( roots ( directedGraph ) ) . isEqualTo ( ImmutableSet . of ( N1 , N2 ) ) ; } } 

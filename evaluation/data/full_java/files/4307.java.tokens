package org . eclipse . debug . internal . ui . sourcelookup ; import java . util . Iterator ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; import org . eclipse . debug . core . sourcelookup . ISourceLookupDirector ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . sourcelookup . ISourceContainerBrowser ; import org . eclipse . jface . viewers . IStructuredSelection ; public class EditContainerAction extends SourceContainerAction { private ISourceLookupDirector fDirector ; private ISourceContainer [ ] fContainers ; private ISourceContainerBrowser fBrowser ; public EditContainerAction ( ) { super ( SourceLookupUIMessages . EditContainerAction_0 ) ; } @Override public void run ( ) { ISourceContainer [ ] replacements = fBrowser . editSourceContainers ( getShell ( ) , fDirector , fContainers ) ; int j = <int> ; ISourceContainer [ ] existing = getViewer ( ) . getEntries ( ) ; for ( int i = <int> ; i < existing . length & & j < replacements . length ; i + + ) { ISourceContainer toBeReplaced = fContainers [ j ] ; ISourceContainer container = existing [ i ] ; if ( container . equals ( toBeReplaced ) ) { existing [ i ] = replacements [ j ] ; j + + ; } } getViewer ( ) . setEntries ( existing ) ; } public void setSourceLookupDirector ( ISourceLookupDirector director ) { fDirector = director ; } @Override protected boolean updateSelection ( IStructuredSelection selection ) { if ( selection = = null | | selection . isEmpty ( ) ) { return false ; } if ( getViewer ( ) . getTree ( ) . getSelection ( ) [ <int> ] . getParentItem ( ) = = null ) { fContainers = new ISourceContainer [ selection . size ( ) ] ; Iterator < ISourceContainer > iterator = selection . iterator ( ) ; ISourceContainer container = iterator . next ( ) ; ISourceContainerType type = container . getType ( ) ; fContainers [ <int> ] = container ; int i = <int> ; while ( iterator . hasNext ( ) ) { container = iterator . next ( ) ; fContainers [ i ] = container ; i + + ; if ( ! container . getType ( ) . equals ( type ) ) { return false ; } } fBrowser = DebugUITools . getSourceContainerBrowser ( type . getId ( ) ) ; if ( fBrowser ! = null ) { return fBrowser . canEditSourceContainers ( fDirector , fContainers ) ; } } return false ; } } 

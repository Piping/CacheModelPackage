package com . badlogic . gdx . physics . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . utils . Array ; public class Body { protected long addr ; private final float [ ] tmp = new float [ <int> ] ; private final World world ; private Array < Fixture > fixtures = new Array < Fixture > ( <int> ) ; protected Array < JointEdge > joints = new Array < JointEdge > ( <int> ) ; private Object userData ; protected Body ( World world , long addr ) { this . world = world ; this . addr = addr ; } protected void reset ( long addr ) { this . addr = addr ; this . userData = null ; for ( int i = <int> ; i < fixtures . size ; i + + ) this . world . freeFixtures . free ( fixtures . get ( i ) ) ; fixtures . clear ( ) ; this . joints . clear ( ) ; } public Fixture createFixture ( FixtureDef def ) { long fixtureAddr = jniCreateFixture ( addr , def . shape . addr , def . friction , def . restitution , def . density , def . isSensor , def . filter . categoryBits , def . filter . maskBits , def . filter . groupIndex ) ; Fixture fixture = this . world . freeFixtures . obtain ( ) ; fixture . reset ( this , fixtureAddr ) ; this . world . fixtures . put ( fixture . addr , fixture ) ; this . fixtures . add ( fixture ) ; return fixture ; } private native long jniCreateFixture ( long addr , long shapeAddr , float friction , float restitution , float density , boolean isSensor , short filterCategoryBits , short filterMaskBits , short filterGroupIndex ) ; public Fixture createFixture ( Shape shape , float density ) { long fixtureAddr = jniCreateFixture ( addr , shape . addr , density ) ; Fixture fixture = this . world . freeFixtures . obtain ( ) ; fixture . reset ( this , fixtureAddr ) ; this . world . fixtures . put ( fixture . addr , fixture ) ; this . fixtures . add ( fixture ) ; return fixture ; } private native long jniCreateFixture ( long addr , long shapeAddr , float density ) ; public void destroyFixture ( Fixture fixture ) { this . world . destroyFixture ( this , fixture ) ; fixture . setUserData ( null ) ; this . world . fixtures . remove ( fixture . addr ) ; this . fixtures . removeValue ( fixture , true ) ; this . world . freeFixtures . free ( fixture ) ; } public void setTransform ( Vector2 position , float angle ) { jniSetTransform ( addr , position . x , position . y , angle ) ; } public void setTransform ( float x , float y , float angle ) { jniSetTransform ( addr , x , y , angle ) ; } private native void jniSetTransform ( long addr , float positionX , float positionY , float angle ) ; private final Transform transform = new Transform ( ) ; public Transform getTransform ( ) { jniGetTransform ( addr , transform . vals ) ; return transform ; } private native void jniGetTransform ( long addr , float [ ] vals ) ; private final Vector2 position = new Vector2 ( ) ; public Vector2 getPosition ( ) { jniGetPosition ( addr , tmp ) ; position . x = tmp [ <int> ] ; position . y = tmp [ <int> ] ; return position ; } private native void jniGetPosition ( long addr , float [ ] position ) ; public float getAngle ( ) { return jniGetAngle ( addr ) ; } private native float jniGetAngle ( long addr ) ; private final Vector2 worldCenter = new Vector2 ( ) ; public Vector2 getWorldCenter ( ) { jniGetWorldCenter ( addr , tmp ) ; worldCenter . x = tmp [ <int> ] ; worldCenter . y = tmp [ <int> ] ; return worldCenter ; } private native void jniGetWorldCenter ( long addr , float [ ] worldCenter ) ; private final Vector2 localCenter = new Vector2 ( ) ; public Vector2 getLocalCenter ( ) { jniGetLocalCenter ( addr , tmp ) ; localCenter . x = tmp [ <int> ] ; localCenter . y = tmp [ <int> ] ; return localCenter ; } private native void jniGetLocalCenter ( long addr , float [ ] localCenter ) ; public void setLinearVelocity ( Vector2 v ) { jniSetLinearVelocity ( addr , v . x , v . y ) ; } public void setLinearVelocity ( float vX , float vY ) { jniSetLinearVelocity ( addr , vX , vY ) ; } private native void jniSetLinearVelocity ( long addr , float x , float y ) ; private final Vector2 linearVelocity = new Vector2 ( ) ; public Vector2 getLinearVelocity ( ) { jniGetLinearVelocity ( addr , tmp ) ; linearVelocity . x = tmp [ <int> ] ; linearVelocity . y = tmp [ <int> ] ; return linearVelocity ; } private native void jniGetLinearVelocity ( long addr , float [ ] linearVelocity ) ; public void setAngularVelocity ( float omega ) { jniSetAngularVelocity ( addr , omega ) ; } private native void jniSetAngularVelocity ( long addr , float omega ) ; public float getAngularVelocity ( ) { return jniGetAngularVelocity ( addr ) ; } private native float jniGetAngularVelocity ( long addr ) ; public void applyForce ( Vector2 force , Vector2 point , boolean wake ) { jniApplyForce ( addr , force . x , force . y , point . x , point . y , wake ) ; } public void applyForce ( float forceX , float forceY , float pointX , float pointY , boolean wake ) { jniApplyForce ( addr , forceX , forceY , pointX , pointY , wake ) ; } private native void jniApplyForce ( long addr , float forceX , float forceY , float pointX , float pointY , boolean wake ) ; public void applyForceToCenter ( Vector2 force , boolean wake ) { jniApplyForceToCenter ( addr , force . x , force . y , wake ) ; } public void applyForceToCenter ( float forceX , float forceY , boolean wake ) { jniApplyForceToCenter ( addr , forceX , forceY , wake ) ; } private native void jniApplyForceToCenter ( long addr , float forceX , float forceY , boolean wake ) ; public void applyTorque ( float torque , boolean wake ) { jniApplyTorque ( addr , torque , wake ) ; } private native void jniApplyTorque ( long addr , float torque , boolean wake ) ; public void applyLinearImpulse ( Vector2 impulse , Vector2 point , boolean wake ) { jniApplyLinearImpulse ( addr , impulse . x , impulse . y , point . x , point . y , wake ) ; } public void applyLinearImpulse ( float impulseX , float impulseY , float pointX , float pointY , boolean wake ) { jniApplyLinearImpulse ( addr , impulseX , impulseY , pointX , pointY , wake ) ; } private native void jniApplyLinearImpulse ( long addr , float impulseX , float impulseY , float pointX , float pointY , boolean wake ) ; public void applyAngularImpulse ( float impulse , boolean wake ) { jniApplyAngularImpulse ( addr , impulse , wake ) ; } private native void jniApplyAngularImpulse ( long addr , float impulse , boolean wake ) ; public float getMass ( ) { return jniGetMass ( addr ) ; } private native float jniGetMass ( long addr ) ; public float getInertia ( ) { return jniGetInertia ( addr ) ; } private native float jniGetInertia ( long addr ) ; private final MassData massData = new MassData ( ) ; public MassData getMassData ( ) { jniGetMassData ( addr , tmp ) ; massData . mass = tmp [ <int> ] ; massData . center . x = tmp [ <int> ] ; massData . center . y = tmp [ <int> ] ; massData . I = tmp [ <int> ] ; return massData ; } private native void jniGetMassData ( long addr , float [ ] massData ) ; public void setMassData ( MassData data ) { jniSetMassData ( addr , data . mass , data . center . x , data . center . y , data . I ) ; } private native void jniSetMassData ( long addr , float mass , float centerX , float centerY , float I ) ; public void resetMassData ( ) { jniResetMassData ( addr ) ; } private native void jniResetMassData ( long addr ) ; private final Vector2 localPoint = new Vector2 ( ) ; public Vector2 getWorldPoint ( Vector2 localPoint ) { jniGetWorldPoint ( addr , localPoint . x , localPoint . y , tmp ) ; this . localPoint . x = tmp [ <int> ] ; this . localPoint . y = tmp [ <int> ] ; return this . localPoint ; } private native void jniGetWorldPoint ( long addr , float localPointX , float localPointY , float [ ] worldPoint ) ; private final Vector2 worldVector = new Vector2 ( ) ; public Vector2 getWorldVector ( Vector2 localVector ) { jniGetWorldVector ( addr , localVector . x , localVector . y , tmp ) ; worldVector . x = tmp [ <int> ] ; worldVector . y = tmp [ <int> ] ; return worldVector ; } private native void jniGetWorldVector ( long addr , float localVectorX , float localVectorY , float [ ] worldVector ) ; public final Vector2 localPoint2 = new Vector2 ( ) ; public Vector2 getLocalPoint ( Vector2 worldPoint ) { jniGetLocalPoint ( addr , worldPoint . x , worldPoint . y , tmp ) ; localPoint2 . x = tmp [ <int> ] ; localPoint2 . y = tmp [ <int> ] ; return localPoint2 ; } private native void jniGetLocalPoint ( long addr , float worldPointX , float worldPointY , float [ ] localPoint ) ; public final Vector2 localVector = new Vector2 ( ) ; public Vector2 getLocalVector ( Vector2 worldVector ) { jniGetLocalVector ( addr , worldVector . x , worldVector . y , tmp ) ; localVector . x = tmp [ <int> ] ; localVector . y = tmp [ <int> ] ; return localVector ; } private native void jniGetLocalVector ( long addr , float worldVectorX , float worldVectorY , float [ ] worldVector ) ; public final Vector2 linVelWorld = new Vector2 ( ) ; public Vector2 getLinearVelocityFromWorldPoint ( Vector2 worldPoint ) { jniGetLinearVelocityFromWorldPoint ( addr , worldPoint . x , worldPoint . y , tmp ) ; linVelWorld . x = tmp [ <int> ] ; linVelWorld . y = tmp [ <int> ] ; return linVelWorld ; } private native void jniGetLinearVelocityFromWorldPoint ( long addr , float worldPointX , float worldPointY , float [ ] linVelWorld ) ; public final Vector2 linVelLoc = new Vector2 ( ) ; public Vector2 getLinearVelocityFromLocalPoint ( Vector2 localPoint ) { jniGetLinearVelocityFromLocalPoint ( addr , localPoint . x , localPoint . y , tmp ) ; linVelLoc . x = tmp [ <int> ] ; linVelLoc . y = tmp [ <int> ] ; return linVelLoc ; } private native void jniGetLinearVelocityFromLocalPoint ( long addr , float localPointX , float localPointY , float [ ] linVelLoc ) ; public float getLinearDamping ( ) { return jniGetLinearDamping ( addr ) ; } private native float jniGetLinearDamping ( long addr ) ; public void setLinearDamping ( float linearDamping ) { jniSetLinearDamping ( addr , linearDamping ) ; } private native void jniSetLinearDamping ( long addr , float linearDamping ) ; public float getAngularDamping ( ) { return jniGetAngularDamping ( addr ) ; } private native float jniGetAngularDamping ( long addr ) ; public void setAngularDamping ( float angularDamping ) { jniSetAngularDamping ( addr , angularDamping ) ; } private native void jniSetAngularDamping ( long addr , float angularDamping ) ; public void setType ( BodyType type ) { jniSetType ( addr , type . getValue ( ) ) ; } private native void jniSetType ( long addr , int type ) ; public BodyType getType ( ) { int type = jniGetType ( addr ) ; if ( type = = <int> ) return BodyType . StaticBody ; if ( type = = <int> ) return BodyType . KinematicBody ; if ( type = = <int> ) return BodyType . DynamicBody ; return BodyType . StaticBody ; } private native int jniGetType ( long addr ) ; public void setBullet ( boolean flag ) { jniSetBullet ( addr , flag ) ; } private native void jniSetBullet ( long addr , boolean flag ) ; public boolean isBullet ( ) { return jniIsBullet ( addr ) ; } private native boolean jniIsBullet ( long addr ) ; public void setSleepingAllowed ( boolean flag ) { jniSetSleepingAllowed ( addr , flag ) ; } private native void jniSetSleepingAllowed ( long addr , boolean flag ) ; public boolean isSleepingAllowed ( ) { return jniIsSleepingAllowed ( addr ) ; } private native boolean jniIsSleepingAllowed ( long addr ) ; public void setAwake ( boolean flag ) { jniSetAwake ( addr , flag ) ; } private native void jniSetAwake ( long addr , boolean flag ) ; public boolean isAwake ( ) { return jniIsAwake ( addr ) ; } private native boolean jniIsAwake ( long addr ) ; public void setActive ( boolean flag ) { if ( flag ) { jniSetActive ( addr , flag ) ; } else { this . world . deactivateBody ( this ) ; } } private native void jniSetActive ( long addr , boolean flag ) ; public boolean isActive ( ) { return jniIsActive ( addr ) ; } private native boolean jniIsActive ( long addr ) ; public void setFixedRotation ( boolean flag ) { jniSetFixedRotation ( addr , flag ) ; } private native void jniSetFixedRotation ( long addr , boolean flag ) ; public boolean isFixedRotation ( ) { return jniIsFixedRotation ( addr ) ; } private native boolean jniIsFixedRotation ( long addr ) ; public Array < Fixture > getFixtureList ( ) { return fixtures ; } public Array < JointEdge > getJointList ( ) { return joints ; } public float getGravityScale ( ) { return jniGetGravityScale ( addr ) ; } private native float jniGetGravityScale ( long addr ) ; public void setGravityScale ( float scale ) { jniSetGravityScale ( addr , scale ) ; } private native void jniSetGravityScale ( long addr , float scale ) ; public World getWorld ( ) { return world ; } public Object getUserData ( ) { return userData ; } public void setUserData ( Object userData ) { this . userData = userData ; } } 

package org . eclipse . ui . externaltools . internal . model ; import java . net . MalformedURLException ; import java . net . URL ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . resource . CompositeImageDescriptor ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . resource . ImageRegistry ; import org . eclipse . swt . graphics . Image ; public class ExternalToolsImages { private static ImageRegistry imageRegistry ; private static ImageDescriptorRegistry imageDescriptorRegistry ; private static URL ICON_BASE_URL = null ; static { String pathSuffix = <str> ; ICON_BASE_URL = ExternalToolsPlugin . getDefault ( ) . getBundle ( ) . getEntry ( pathSuffix ) ; } private final static String OBJECT = <str> ; private static void declareImages ( ) { declareRegistryImage ( IExternalToolConstants . IMG_TAB_MAIN , OBJECT + <str> ) ; declareRegistryImage ( IExternalToolConstants . IMG_TAB_BUILD , OBJECT + <str> ) ; } private final static void declareRegistryImage ( String key , String path ) { ImageDescriptor desc = ImageDescriptor . getMissingImageDescriptor ( ) ; try { desc = ImageDescriptor . createFromURL ( makeIconFileURL ( path ) ) ; } catch ( MalformedURLException me ) { } imageRegistry . put ( key , desc ) ; } public static ImageRegistry getImageRegistry ( ) { if ( imageRegistry = = null ) { initializeImageRegistry ( ) ; } return imageRegistry ; } public static ImageRegistry initializeImageRegistry ( ) { imageRegistry = new ImageRegistry ( ExternalToolsPlugin . getStandardDisplay ( ) ) ; declareImages ( ) ; return imageRegistry ; } public static Image getImage ( String key ) { return getImageRegistry ( ) . get ( key ) ; } public static ImageDescriptor getImageDescriptor ( String key ) { return getImageRegistry ( ) . getDescriptor ( key ) ; } private static URL makeIconFileURL ( String iconPath ) throws MalformedURLException { if ( ICON_BASE_URL = = null ) { throw new MalformedURLException ( ) ; } return new URL ( ICON_BASE_URL , iconPath ) ; } public static void setLocalImageDescriptors ( IAction action , String iconName ) { setImageDescriptors ( action , <str> , iconName ) ; } private static void setImageDescriptors ( IAction action , String type , String relPath ) { try { ImageDescriptor id = ImageDescriptor . createFromURL ( makeIconFileURL ( <str> + type , relPath ) ) ; if ( id ! = null ) action . setDisabledImageDescriptor ( id ) ; } catch ( MalformedURLException e ) { ExternalToolsPlugin . getDefault ( ) . log ( e ) ; } try { ImageDescriptor id = ImageDescriptor . createFromURL ( makeIconFileURL ( <str> + type , relPath ) ) ; if ( id ! = null ) action . setHoverImageDescriptor ( id ) ; } catch ( MalformedURLException e ) { ExternalToolsPlugin . getDefault ( ) . log ( e ) ; } action . setImageDescriptor ( create ( <str> + type , relPath ) ) ; } private static URL makeIconFileURL ( String prefix , String name ) throws MalformedURLException { if ( ICON_BASE_URL = = null ) { throw new MalformedURLException ( ) ; } StringBuffer buffer = new StringBuffer ( prefix ) ; buffer . append ( <str> ) ; buffer . append ( name ) ; return new URL ( ICON_BASE_URL , buffer . toString ( ) ) ; } private static ImageDescriptor create ( String prefix , String name ) { try { return ImageDescriptor . createFromURL ( makeIconFileURL ( prefix , name ) ) ; } catch ( MalformedURLException e ) { ExternalToolsPlugin . getDefault ( ) . log ( e ) ; return ImageDescriptor . getMissingImageDescriptor ( ) ; } } public static Image getImage ( CompositeImageDescriptor imageDescriptor ) { if ( imageDescriptorRegistry = = null ) { imageDescriptorRegistry = new ImageDescriptorRegistry ( ) ; } return imageDescriptorRegistry . get ( imageDescriptor ) ; } public static void disposeImageDescriptorRegistry ( ) { if ( imageDescriptorRegistry ! = null ) { imageDescriptorRegistry . dispose ( ) ; } } } 

package com . google . common . collect ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_QUERIES ; import static com . google . common . collect . testing . features . CollectionFeature . SERIALIZABLE ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . AnEnum ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . MapTestSuiteBuilder ; import com . google . common . collect . testing . TestEnumMapGenerator ; import com . google . common . collect . testing . features . CollectionSize ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Map ; import java . util . Map . Entry ; @GwtCompatible ( emulated = true ) public class ImmutableEnumMapTest extends TestCase { public static class ImmutableEnumMapGenerator extends TestEnumMapGenerator { @Override protected Map < AnEnum , String > create ( Entry < AnEnum , String > [ ] entries ) { Map < AnEnum , String > map = Maps . newHashMap ( ) ; for ( Entry < AnEnum , String > entry : entries ) { map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return Maps . immutableEnumMap ( map ) ; } } @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( MapTestSuiteBuilder . using ( new ImmutableEnumMapGenerator ( ) ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , SERIALIZABLE , ALLOWS_NULL_QUERIES ) . createTestSuite ( ) ) ; suite . addTestSuite ( ImmutableEnumMapTest . class ) ; return suite ; } public void testEmptyImmutableEnumMap ( ) { ImmutableMap < AnEnum , String > map = Maps . immutableEnumMap ( ImmutableMap . < AnEnum , String > of ( ) ) ; assertEquals ( ImmutableMap . of ( ) , map ) ; } public void testImmutableEnumMapOrdering ( ) { ImmutableMap < AnEnum , String > map = Maps . immutableEnumMap ( ImmutableMap . of ( AnEnum . C , <str> , AnEnum . A , <str> , AnEnum . E , <str> ) ) ; assertThat ( map . entrySet ( ) ) . containsExactly ( Helpers . mapEntry ( AnEnum . A , <str> ) , Helpers . mapEntry ( AnEnum . C , <str> ) , Helpers . mapEntry ( AnEnum . E , <str> ) ) . inOrder ( ) ; } } 

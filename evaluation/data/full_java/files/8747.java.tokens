package org . elasticsearch . cloud . gce ; import com . google . api . client . googleapis . compute . ComputeCredential ; import com . google . api . client . googleapis . javanet . GoogleNetHttpTransport ; import com . google . api . client . http . GenericUrl ; import com . google . api . client . http . HttpHeaders ; import com . google . api . client . http . HttpResponse ; import com . google . api . client . http . HttpTransport ; import com . google . api . client . json . JsonFactory ; import com . google . api . client . json . jackson2 . JacksonFactory ; import com . google . api . services . compute . Compute ; import com . google . api . services . compute . model . Instance ; import com . google . api . services . compute . model . InstanceList ; import org . elasticsearch . SpecialPermission ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . cloud . gce . network . GceNameResolver ; import org . elasticsearch . common . component . AbstractLifecycleComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . discovery . gce . RetryHttpInitializerWrapper ; import java . io . IOException ; import java . net . URL ; import java . security . AccessController ; import java . security . GeneralSecurityException ; import java . security . PrivilegedAction ; import java . security . PrivilegedActionException ; import java . security . PrivilegedExceptionAction ; import java . util . * ; public class GceComputeServiceImpl extends AbstractLifecycleComponent < GceComputeService > implements GceComputeService { private final String project ; private final List < String > zones ; public static final String GCE_METADATA_URL = <str> ; public static final String TOKEN_SERVER_ENCODED_URL = GCE_METADATA_URL + <str> ; @Override public Collection < Instance > instances ( ) { logger . debug ( <str> , project , zones ) ; final List < Instance > instances = zones . stream ( ) . map ( ( zoneId ) - > { try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm ! = null ) { sm . checkPermission ( new SpecialPermission ( ) ) ; } InstanceList instanceList = AccessController . doPrivileged ( new PrivilegedExceptionAction < InstanceList > ( ) { @Override public InstanceList run ( ) throws Exception { Compute . Instances . List list = client ( ) . instances ( ) . list ( project , zoneId ) ; return list . execute ( ) ; } } ) ; return instanceList . isEmpty ( ) ? Collections . < Instance > emptyList ( ) : instanceList . getItems ( ) ; } catch ( PrivilegedActionException e ) { logger . warn ( <str> , zoneId ) ; logger . debug ( <str> , e ) ; return Collections . < Instance > emptyList ( ) ; } } ) . reduce ( new ArrayList < > ( ) , ( a , b ) - > { a . addAll ( b ) ; return a ; } ) ; if ( instances . isEmpty ( ) ) { logger . warn ( <str> ) ; } return instances ; } @Override public String metadata ( String metadataPath ) throws IOException { String urlMetadataNetwork = GCE_METADATA_URL + <str> + metadataPath ; logger . debug ( <str> , urlMetadataNetwork ) ; final URL url = new URL ( urlMetadataNetwork ) ; HttpHeaders headers ; try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm ! = null ) { sm . checkPermission ( new SpecialPermission ( ) ) ; } headers = AccessController . doPrivileged ( new PrivilegedExceptionAction < HttpHeaders > ( ) { @Override public HttpHeaders run ( ) throws IOException { return new HttpHeaders ( ) ; } } ) ; GenericUrl genericUrl = AccessController . doPrivileged ( new PrivilegedAction < GenericUrl > ( ) { @Override public GenericUrl run ( ) { return new GenericUrl ( url ) ; } } ) ; headers . put ( <str> , <str> ) ; HttpResponse response ; response = getGceHttpTransport ( ) . createRequestFactory ( ) . buildGetRequest ( genericUrl ) . setHeaders ( headers ) . execute ( ) ; String metadata = response . parseAsString ( ) ; logger . debug ( <str> , metadata ) ; return metadata ; } catch ( Exception e ) { throw new IOException ( <str> + urlMetadataNetwork + <str> , e ) ; } } private Compute client ; private TimeValue refreshInterval = null ; private long lastRefresh ; private HttpTransport gceHttpTransport ; private JsonFactory gceJsonFactory ; @Inject public GceComputeServiceImpl ( Settings settings , NetworkService networkService ) { super ( settings ) ; this . project = settings . get ( Fields . PROJECT ) ; String [ ] zoneList = settings . getAsArray ( Fields . ZONE ) ; this . zones = Arrays . asList ( zoneList ) ; networkService . addCustomNameResolver ( new GceNameResolver ( settings , this ) ) ; } protected synchronized HttpTransport getGceHttpTransport ( ) throws GeneralSecurityException , IOException { if ( gceHttpTransport = = null ) { gceHttpTransport = GoogleNetHttpTransport . newTrustedTransport ( ) ; } return gceHttpTransport ; } public synchronized Compute client ( ) { if ( refreshInterval ! = null & & refreshInterval . millis ( ) ! = <int> ) { if ( client ! = null & & ( refreshInterval . millis ( ) < <int> | | ( System . currentTimeMillis ( ) - lastRefresh ) < refreshInterval . millis ( ) ) ) { if ( logger . isTraceEnabled ( ) ) logger . trace ( <str> ) ; return client ; } lastRefresh = System . currentTimeMillis ( ) ; } try { gceJsonFactory = new JacksonFactory ( ) ; logger . info ( <str> ) ; ComputeCredential credential = new ComputeCredential . Builder ( getGceHttpTransport ( ) , gceJsonFactory ) . setTokenServerEncodedUrl ( TOKEN_SERVER_ENCODED_URL ) . build ( ) ; SecurityManager sm = System . getSecurityManager ( ) ; if ( sm ! = null ) { sm . checkPermission ( new SpecialPermission ( ) ) ; } AccessController . doPrivileged ( new PrivilegedExceptionAction < Void > ( ) { @Override public Void run ( ) throws IOException { credential . refreshToken ( ) ; return null ; } } ) ; logger . debug ( <str> , credential . getAccessToken ( ) , credential . getExpiresInSeconds ( ) ) ; if ( credential . getExpiresInSeconds ( ) ! = null ) { refreshInterval = TimeValue . timeValueSeconds ( credential . getExpiresInSeconds ( ) - <int> ) ; } boolean ifRetry = settings . getAsBoolean ( Fields . RETRY , true ) ; Compute . Builder builder = new Compute . Builder ( getGceHttpTransport ( ) , gceJsonFactory , null ) . setApplicationName ( Fields . VERSION ) ; if ( ifRetry ) { int maxWait = settings . getAsInt ( Fields . MAXWAIT , - <int> ) ; RetryHttpInitializerWrapper retryHttpInitializerWrapper ; if ( maxWait > <int> ) { retryHttpInitializerWrapper = new RetryHttpInitializerWrapper ( credential , maxWait ) ; } else { retryHttpInitializerWrapper = new RetryHttpInitializerWrapper ( credential ) ; } builder . setHttpRequestInitializer ( retryHttpInitializerWrapper ) ; } else { builder . setHttpRequestInitializer ( credential ) ; } this . client = builder . build ( ) ; } catch ( Exception e ) { logger . warn ( <str> , e ) ; throw new IllegalArgumentException ( <str> , e ) ; } return this . client ; } @Override protected void doStart ( ) throws ElasticsearchException { } @Override protected void doStop ( ) throws ElasticsearchException { if ( gceHttpTransport ! = null ) { try { gceHttpTransport . shutdown ( ) ; } catch ( IOException e ) { logger . warn ( <str> , e ) ; } gceHttpTransport = null ; } } @Override protected void doClose ( ) throws ElasticsearchException { } } 

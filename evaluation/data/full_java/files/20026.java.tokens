package io . netty . handler . traffic ; import io . netty . buffer . ByteBuf ; import io . netty . channel . ChannelHandler . Sharable ; import io . netty . channel . Channel ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelPromise ; import io . netty . util . concurrent . EventExecutor ; import io . netty . util . internal . OneTimeTask ; import io . netty . util . internal . PlatformDependent ; import java . util . ArrayDeque ; import java . util . concurrent . ConcurrentMap ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicLong ; @Sharable public class GlobalTrafficShapingHandler extends AbstractTrafficShapingHandler { private final ConcurrentMap < Integer , PerChannel > channelQueues = PlatformDependent . newConcurrentHashMap ( ) ; private final AtomicLong queuesSize = new AtomicLong ( ) ; long maxGlobalWriteSize = DEFAULT_MAX_SIZE * <int> ; private static final class PerChannel { ArrayDeque < ToSend > messagesQueue ; long queueSize ; long lastWriteTimestamp ; long lastReadTimestamp ; } void createGlobalTrafficCounter ( ScheduledExecutorService executor ) { if ( executor = = null ) { throw new NullPointerException ( <str> ) ; } TrafficCounter tc = new TrafficCounter ( this , executor , <str> , checkInterval ) ; setTrafficCounter ( tc ) ; tc . start ( ) ; } public GlobalTrafficShapingHandler ( ScheduledExecutorService executor , long writeLimit , long readLimit , long checkInterval , long maxTime ) { super ( writeLimit , readLimit , checkInterval , maxTime ) ; createGlobalTrafficCounter ( executor ) ; } public GlobalTrafficShapingHandler ( ScheduledExecutorService executor , long writeLimit , long readLimit , long checkInterval ) { super ( writeLimit , readLimit , checkInterval ) ; createGlobalTrafficCounter ( executor ) ; } public GlobalTrafficShapingHandler ( ScheduledExecutorService executor , long writeLimit , long readLimit ) { super ( writeLimit , readLimit ) ; createGlobalTrafficCounter ( executor ) ; } public GlobalTrafficShapingHandler ( ScheduledExecutorService executor , long checkInterval ) { super ( checkInterval ) ; createGlobalTrafficCounter ( executor ) ; } public GlobalTrafficShapingHandler ( EventExecutor executor ) { createGlobalTrafficCounter ( executor ) ; } public long getMaxGlobalWriteSize ( ) { return maxGlobalWriteSize ; } public void setMaxGlobalWriteSize ( long maxGlobalWriteSize ) { this . maxGlobalWriteSize = maxGlobalWriteSize ; } public long queuesSize ( ) { return queuesSize . get ( ) ; } public final void release ( ) { trafficCounter . stop ( ) ; } private PerChannel getOrSetPerChannel ( ChannelHandlerContext ctx ) { Channel channel = ctx . channel ( ) ; Integer key = channel . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; if ( perChannel = = null ) { perChannel = new PerChannel ( ) ; perChannel . messagesQueue = new ArrayDeque < ToSend > ( ) ; perChannel . queueSize = <int> L ; perChannel . lastReadTimestamp = TrafficCounter . milliSecondFromNano ( ) ; perChannel . lastWriteTimestamp = perChannel . lastReadTimestamp ; channelQueues . put ( key , perChannel ) ; } return perChannel ; } @Override public void handlerAdded ( ChannelHandlerContext ctx ) throws Exception { getOrSetPerChannel ( ctx ) ; super . handlerAdded ( ctx ) ; } @Override public void handlerRemoved ( ChannelHandlerContext ctx ) throws Exception { Channel channel = ctx . channel ( ) ; Integer key = channel . hashCode ( ) ; PerChannel perChannel = channelQueues . remove ( key ) ; if ( perChannel ! = null ) { synchronized ( perChannel ) { if ( channel . isActive ( ) ) { for ( ToSend toSend : perChannel . messagesQueue ) { long size = calculateSize ( toSend . toSend ) ; trafficCounter . bytesRealWriteFlowControl ( size ) ; perChannel . queueSize - = size ; queuesSize . addAndGet ( - size ) ; ctx . write ( toSend . toSend , toSend . promise ) ; } } else { queuesSize . addAndGet ( - perChannel . queueSize ) ; for ( ToSend toSend : perChannel . messagesQueue ) { if ( toSend . toSend instanceof ByteBuf ) { ( ( ByteBuf ) toSend . toSend ) . release ( ) ; } } } perChannel . messagesQueue . clear ( ) ; } } releaseWriteSuspended ( ctx ) ; releaseReadSuspended ( ctx ) ; super . handlerRemoved ( ctx ) ; } @Override long checkWaitReadTime ( final ChannelHandlerContext ctx , long wait , final long now ) { Integer key = ctx . channel ( ) . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; if ( perChannel ! = null ) { if ( wait > maxTime & & now + wait - perChannel . lastReadTimestamp > maxTime ) { wait = maxTime ; } } return wait ; } @Override void informReadOperation ( final ChannelHandlerContext ctx , final long now ) { Integer key = ctx . channel ( ) . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; if ( perChannel ! = null ) { perChannel . lastReadTimestamp = now ; } } private static final class ToSend { final long relativeTimeAction ; final Object toSend ; final long size ; final ChannelPromise promise ; private ToSend ( final long delay , final Object toSend , final long size , final ChannelPromise promise ) { relativeTimeAction = delay ; this . toSend = toSend ; this . size = size ; this . promise = promise ; } } @Override void submitWrite ( final ChannelHandlerContext ctx , final Object msg , final long size , final long writedelay , final long now , final ChannelPromise promise ) { Channel channel = ctx . channel ( ) ; Integer key = channel . hashCode ( ) ; PerChannel perChannel = channelQueues . get ( key ) ; if ( perChannel = = null ) { perChannel = getOrSetPerChannel ( ctx ) ; } final ToSend newToSend ; long delay = writedelay ; boolean globalSizeExceeded = false ; synchronized ( perChannel ) { if ( writedelay = = <int> & & perChannel . messagesQueue . isEmpty ( ) ) { trafficCounter . bytesRealWriteFlowControl ( size ) ; ctx . write ( msg , promise ) ; perChannel . lastWriteTimestamp = now ; return ; } if ( delay > maxTime & & now + delay - perChannel . lastWriteTimestamp > maxTime ) { delay = maxTime ; } newToSend = new ToSend ( delay + now , msg , size , promise ) ; perChannel . messagesQueue . addLast ( newToSend ) ; perChannel . queueSize + = size ; queuesSize . addAndGet ( size ) ; checkWriteSuspend ( ctx , delay , perChannel . queueSize ) ; if ( queuesSize . get ( ) > maxGlobalWriteSize ) { globalSizeExceeded = true ; } } if ( globalSizeExceeded ) { setUserDefinedWritability ( ctx , false ) ; } final long futureNow = newToSend . relativeTimeAction ; final PerChannel forSchedule = perChannel ; ctx . executor ( ) . schedule ( new OneTimeTask ( ) { @Override public void run ( ) { sendAllValid ( ctx , forSchedule , futureNow ) ; } } , delay , TimeUnit . MILLISECONDS ) ; } private void sendAllValid ( final ChannelHandlerContext ctx , final PerChannel perChannel , final long now ) { synchronized ( perChannel ) { ToSend newToSend = perChannel . messagesQueue . pollFirst ( ) ; for ( ; newToSend ! = null ; newToSend = perChannel . messagesQueue . pollFirst ( ) ) { if ( newToSend . relativeTimeAction < = now ) { long size = newToSend . size ; trafficCounter . bytesRealWriteFlowControl ( size ) ; perChannel . queueSize - = size ; queuesSize . addAndGet ( - size ) ; ctx . write ( newToSend . toSend , newToSend . promise ) ; perChannel . lastWriteTimestamp = now ; } else { perChannel . messagesQueue . addFirst ( newToSend ) ; break ; } } if ( perChannel . messagesQueue . isEmpty ( ) ) { releaseWriteSuspended ( ctx ) ; } } ctx . flush ( ) ; } } 

package org . elasticsearch . index . analysis ; import java . io . IOException ; import java . util . Arrays ; import java . util . regex . Pattern ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . core . StopAnalyzer ; import org . elasticsearch . test . ESTokenStreamTestCase ; public class PatternAnalyzerTests extends ESTokenStreamTestCase { public void testNonWordPattern ( ) throws IOException { PatternAnalyzer a = new PatternAnalyzer ( Pattern . compile ( <str> ) , false , null ) ; assertAnalyzesTo ( a , <str> , new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ) ; PatternAnalyzer b = new PatternAnalyzer ( Pattern . compile ( <str> ) , true , StopAnalyzer . ENGLISH_STOP_WORDS_SET ) ; assertAnalyzesTo ( b , <str> , new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ) ; } public void testWhitespacePattern ( ) throws IOException { PatternAnalyzer a = new PatternAnalyzer ( Pattern . compile ( <str> ) , false , null ) ; assertAnalyzesTo ( a , <str> , new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> } ) ; PatternAnalyzer b = new PatternAnalyzer ( Pattern . compile ( <str> ) , true , StopAnalyzer . ENGLISH_STOP_WORDS_SET ) ; assertAnalyzesTo ( b , <str> , new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> } ) ; } public void testCustomPattern ( ) throws IOException { PatternAnalyzer a = new PatternAnalyzer ( Pattern . compile ( <str> ) , false , null ) ; assertAnalyzesTo ( a , <str> , new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> } ) ; PatternAnalyzer b = new PatternAnalyzer ( Pattern . compile ( <str> ) , true , StopAnalyzer . ENGLISH_STOP_WORDS_SET ) ; assertAnalyzesTo ( b , <str> , new String [ ] { <str> , <str> , <str> , <str> , <str> } ) ; } public void testHugeDocument ( ) throws IOException { StringBuilder document = new StringBuilder ( ) ; char largeWord [ ] = new char [ <int> ] ; Arrays . fill ( largeWord , <str> ) ; document . append ( largeWord ) ; document . append ( <str> ) ; char largeWord2 [ ] = new char [ <int> ] ; Arrays . fill ( largeWord2 , <str> ) ; document . append ( largeWord2 ) ; PatternAnalyzer a = new PatternAnalyzer ( Pattern . compile ( <str> ) , false , null ) ; assertAnalyzesTo ( a , document . toString ( ) , new String [ ] { new String ( largeWord ) , new String ( largeWord2 ) } ) ; } public void testRandomStrings ( ) throws Exception { Analyzer a = new PatternAnalyzer ( Pattern . compile ( <str> ) , true , StopAnalyzer . ENGLISH_STOP_WORDS_SET ) ; checkRandomData ( random ( ) , a , <int> * RANDOM_MULTIPLIER ) ; } } 

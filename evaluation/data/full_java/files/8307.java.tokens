package org . elasticsearch . index . store ; import java . nio . charset . StandardCharsets ; import java . util . zip . Adler32 ; import org . apache . lucene . index . CorruptIndexException ; import org . apache . lucene . store . IndexOutput ; import org . apache . lucene . store . IOContext ; import org . apache . lucene . store . Directory ; import org . elasticsearch . test . ESTestCase ; @Deprecated public class LegacyVerificationTests extends ESTestCase { public void testAdler32 ( ) throws Exception { Adler32 expected = new Adler32 ( ) ; byte bytes [ ] = <str> . getBytes ( StandardCharsets . UTF_8 ) ; expected . update ( bytes ) ; String expectedString = Store . digestToString ( expected . getValue ( ) ) ; Directory dir = newDirectory ( ) ; IndexOutput o = dir . createOutput ( <str> , IOContext . DEFAULT ) ; VerifyingIndexOutput out = new LegacyVerification . Adler32VerifyingIndexOutput ( o , expectedString , <int> ) ; out . writeBytes ( bytes , <int> , bytes . length ) ; out . verify ( ) ; out . close ( ) ; out . verify ( ) ; dir . close ( ) ; } public void testAdler32Corrupt ( ) throws Exception { Adler32 expected = new Adler32 ( ) ; byte bytes [ ] = <str> . getBytes ( StandardCharsets . UTF_8 ) ; expected . update ( bytes ) ; String expectedString = Store . digestToString ( expected . getValue ( ) ) ; byte corruptBytes [ ] = <str> . getBytes ( StandardCharsets . UTF_8 ) ; Directory dir = newDirectory ( ) ; IndexOutput o = dir . createOutput ( <str> , IOContext . DEFAULT ) ; VerifyingIndexOutput out = new LegacyVerification . Adler32VerifyingIndexOutput ( o , expectedString , <int> ) ; out . writeBytes ( corruptBytes , <int> , bytes . length ) ; try { out . verify ( ) ; fail ( ) ; } catch ( CorruptIndexException e ) { } out . close ( ) ; try { out . verify ( ) ; fail ( ) ; } catch ( CorruptIndexException e ) { } dir . close ( ) ; } public void testLengthOnlyOneByte ( ) throws Exception { Directory dir = newDirectory ( ) ; IndexOutput o = dir . createOutput ( <str> , IOContext . DEFAULT ) ; VerifyingIndexOutput out = new LegacyVerification . LengthVerifyingIndexOutput ( o , <int> ) ; out . writeByte ( ( byte ) <int> ) ; out . verify ( ) ; out . close ( ) ; out . verify ( ) ; dir . close ( ) ; } public void testLengthOnlyCorrupt ( ) throws Exception { Directory dir = newDirectory ( ) ; IndexOutput o = dir . createOutput ( <str> , IOContext . DEFAULT ) ; VerifyingIndexOutput out = new LegacyVerification . LengthVerifyingIndexOutput ( o , <int> ) ; out . writeByte ( ( byte ) <int> ) ; try { out . verify ( ) ; fail ( ) ; } catch ( CorruptIndexException expected ) { } out . close ( ) ; try { out . verify ( ) ; fail ( ) ; } catch ( CorruptIndexException expected ) { } dir . close ( ) ; } } 

package org . elasticsearch . common . unit ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . closeTo ; import static org . hamcrest . Matchers . equalTo ; public class DistanceUnitTests extends ESTestCase { public void testSimpleDistanceUnit ( ) { assertThat ( DistanceUnit . KILOMETERS . convert ( <int> , DistanceUnit . MILES ) , closeTo ( <float> , <float> ) ) ; assertThat ( DistanceUnit . MILES . convert ( <int> , DistanceUnit . MILES ) , closeTo ( <int> , <float> ) ) ; assertThat ( DistanceUnit . MILES . convert ( <int> , DistanceUnit . KILOMETERS ) , closeTo ( <float> , <float> ) ) ; assertThat ( DistanceUnit . NAUTICALMILES . convert ( <int> , DistanceUnit . MILES ) , closeTo ( <float> , <float> ) ) ; assertThat ( DistanceUnit . KILOMETERS . convert ( <int> , DistanceUnit . KILOMETERS ) , closeTo ( <int> , <float> ) ) ; assertThat ( DistanceUnit . KILOMETERS . convert ( <int> , DistanceUnit . METERS ) , closeTo ( <float> , <float> ) ) ; assertThat ( DistanceUnit . KILOMETERS . convert ( <int> , DistanceUnit . METERS ) , closeTo ( <int> , <float> ) ) ; assertThat ( DistanceUnit . METERS . convert ( <int> , DistanceUnit . KILOMETERS ) , closeTo ( <int> , <float> ) ) ; } public void testDistanceUnitParsing ( ) { assertThat ( DistanceUnit . Distance . parseDistance ( <str> ) . unit , equalTo ( DistanceUnit . KILOMETERS ) ) ; assertThat ( DistanceUnit . Distance . parseDistance ( <str> ) . unit , equalTo ( DistanceUnit . METERS ) ) ; assertThat ( DistanceUnit . Distance . parseDistance ( <str> ) . unit , equalTo ( DistanceUnit . MILES ) ) ; assertThat ( DistanceUnit . Distance . parseDistance ( <str> ) . unit , equalTo ( DistanceUnit . NAUTICALMILES ) ) ; assertThat ( DistanceUnit . Distance . parseDistance ( <str> ) . unit , equalTo ( DistanceUnit . NAUTICALMILES ) ) ; assertThat ( DistanceUnit . Distance . parseDistance ( <str> ) . unit , equalTo ( DistanceUnit . YARD ) ) ; assertThat ( DistanceUnit . Distance . parseDistance ( <str> ) . unit , equalTo ( DistanceUnit . INCH ) ) ; assertThat ( DistanceUnit . Distance . parseDistance ( <str> ) . unit , equalTo ( DistanceUnit . MILLIMETERS ) ) ; assertThat ( DistanceUnit . Distance . parseDistance ( <str> ) . unit , equalTo ( DistanceUnit . CENTIMETERS ) ) ; double testValue = <float> ; for ( DistanceUnit unit : DistanceUnit . values ( ) ) { assertThat ( <str> + unit . toString ( ) + <str> , DistanceUnit . fromString ( unit . toString ( ) ) , equalTo ( unit ) ) ; assertThat ( <str> + testValue + unit . toString ( ) + <str> , DistanceUnit . fromString ( unit . toString ( ) ) , equalTo ( unit ) ) ; assertThat ( <str> + testValue + unit . toString ( ) + <str> , DistanceUnit . Distance . parseDistance ( unit . toString ( testValue ) ) . value , equalTo ( testValue ) ) ; } } public void testDistanceUnitNames ( ) { assertEquals ( <int> , DistanceUnit . INCH . ordinal ( ) ) ; assertEquals ( <int> , DistanceUnit . YARD . ordinal ( ) ) ; assertEquals ( <int> , DistanceUnit . FEET . ordinal ( ) ) ; assertEquals ( <int> , DistanceUnit . KILOMETERS . ordinal ( ) ) ; assertEquals ( <int> , DistanceUnit . NAUTICALMILES . ordinal ( ) ) ; assertEquals ( <int> , DistanceUnit . MILLIMETERS . ordinal ( ) ) ; assertEquals ( <int> , DistanceUnit . CENTIMETERS . ordinal ( ) ) ; assertEquals ( <int> , DistanceUnit . MILES . ordinal ( ) ) ; assertEquals ( <int> , DistanceUnit . METERS . ordinal ( ) ) ; } } 

package org . elasticsearch . cluster . routing . allocation ; import com . carrotsearch . hppc . cursors . ObjectCursor ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingNode ; import org . elasticsearch . cluster . routing . RoutingNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . allocation . decider . ClusterRebalanceAllocationDecider ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . CollectionUtils ; import org . elasticsearch . test . ESAllocationTestCase ; import org . hamcrest . Matcher ; import org . hamcrest . Matchers ; import java . util . ArrayList ; import java . util . Collections ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; public class AddIncrementallyTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( AddIncrementallyTests . class ) ; public void testAddNodesAndIndices ( ) { Settings . Builder settings = settingsBuilder ( ) ; settings . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , ClusterRebalanceAllocationDecider . ClusterRebalanceType . ALWAYS . toString ( ) ) ; AllocationService service = createAllocationService ( settings . build ( ) ) ; ClusterState clusterState = initCluster ( service , <int> , <int> , <int> , <int> ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; int nodeOffset = <int> ; clusterState = addNodes ( clusterState , service , <int> , nodeOffset + + ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . equalTo ( <int> ) ) ; clusterState = addNodes ( clusterState , service , <int> , nodeOffset + + ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . equalTo ( <int> ) ) ; clusterState = addNodes ( clusterState , service , <int> , nodeOffset + + ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . lessThanOrEqualTo ( <int> ) ) ; assertAtLeastOneIndexShardPerNode ( clusterState ) ; clusterState = removeNodes ( clusterState , service , <int> ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . equalTo ( <int> ) ) ; clusterState = addIndex ( clusterState , service , <int> , <int> , <int> ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertNumIndexShardsPerNode ( clusterState , <str> , Matchers . equalTo ( <int> ) ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . lessThanOrEqualTo ( <int> ) ) ; clusterState = addIndex ( clusterState , service , <int> , <int> , <int> ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertNumIndexShardsPerNode ( clusterState , <str> , Matchers . equalTo ( <int> ) ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . lessThanOrEqualTo ( <int> ) ) ; clusterState = addNodes ( clusterState , service , <int> , nodeOffset + + ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . lessThanOrEqualTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; clusterState = removeNodes ( clusterState , service , <int> ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . lessThanOrEqualTo ( <int> ) ) ; clusterState = addNodes ( clusterState , service , <int> , nodeOffset + + ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . lessThanOrEqualTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; logger . debug ( <str> , clusterState . getRoutingNodes ( ) . prettyPrint ( ) ) ; } public void testMinimalRelocations ( ) { Settings . Builder settings = settingsBuilder ( ) ; settings . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , ClusterRebalanceAllocationDecider . ClusterRebalanceType . ALWAYS . toString ( ) ) . put ( <str> , <int> ) ; AllocationService service = createAllocationService ( settings . build ( ) ) ; ClusterState clusterState = initCluster ( service , <int> , <int> , <int> , <int> ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; int nodeOffset = <int> ; clusterState = addNodes ( clusterState , service , <int> , nodeOffset + + ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . equalTo ( <int> ) ) ; logger . info ( <str> ) ; DiscoveryNodes . Builder nodes = DiscoveryNodes . builder ( clusterState . nodes ( ) ) ; nodes . put ( newNode ( <str> ) ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( nodes . build ( ) ) . build ( ) ; RoutingTable routingTable = service . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; RoutingTable prev = routingTable ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( prev , Matchers . not ( Matchers . sameInstance ( routingTable ) ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( prev , Matchers . not ( Matchers . sameInstance ( routingTable ) ) ) ; prev = routingTable ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( prev , Matchers . not ( Matchers . sameInstance ( routingTable ) ) ) ; prev = routingTable ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( prev , Matchers . not ( Matchers . sameInstance ( routingTable ) ) ) ; prev = routingTable ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prev , Matchers . sameInstance ( routingTable ) ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . equalTo ( <int> ) ) ; logger . debug ( <str> , clusterState . getRoutingNodes ( ) . prettyPrint ( ) ) ; } public void testMinimalRelocationsNoLimit ( ) { Settings . Builder settings = settingsBuilder ( ) ; settings . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , ClusterRebalanceAllocationDecider . ClusterRebalanceType . ALWAYS . toString ( ) ) . put ( <str> , <int> ) . put ( <str> , <int> ) ; AllocationService service = createAllocationService ( settings . build ( ) ) ; ClusterState clusterState = initCluster ( service , <int> , <int> , <int> , <int> ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; int nodeOffset = <int> ; clusterState = addNodes ( clusterState , service , <int> , nodeOffset + + ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . unassigned ( ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . equalTo ( <int> ) ) ; logger . info ( <str> ) ; DiscoveryNodes . Builder nodes = DiscoveryNodes . builder ( clusterState . nodes ( ) ) ; nodes . put ( newNode ( <str> ) ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( nodes . build ( ) ) . build ( ) ; RoutingTable routingTable = service . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; RoutingTable prev = routingTable ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( prev , Matchers . not ( Matchers . sameInstance ( routingTable ) ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( prev , Matchers . not ( Matchers . sameInstance ( routingTable ) ) ) ; prev = routingTable ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( prev , Matchers . not ( Matchers . sameInstance ( routingTable ) ) ) ; prev = routingTable ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( STARTED ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( clusterState . getRoutingNodes ( ) . node ( <str> ) . shardsWithState ( INITIALIZING ) . size ( ) , Matchers . equalTo ( <int> ) ) ; assertThat ( prev , Matchers . not ( Matchers . sameInstance ( routingTable ) ) ) ; prev = routingTable ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( prev , Matchers . sameInstance ( routingTable ) ) ; assertNumIndexShardsPerNode ( clusterState , Matchers . equalTo ( <int> ) ) ; logger . debug ( <str> , clusterState . getRoutingNodes ( ) . prettyPrint ( ) ) ; } private void assertNumIndexShardsPerNode ( ClusterState state , Matcher < Integer > matcher ) { for ( ObjectCursor < String > index : state . routingTable ( ) . indicesRouting ( ) . keys ( ) ) { assertNumIndexShardsPerNode ( state , index . value , matcher ) ; } } private void assertNumIndexShardsPerNode ( ClusterState state , String index , Matcher < Integer > matcher ) { for ( RoutingNode node : state . getRoutingNodes ( ) ) { assertThat ( node . shardsWithState ( index , STARTED ) . size ( ) , matcher ) ; } } private void assertAtLeastOneIndexShardPerNode ( ClusterState state ) { for ( ObjectCursor < String > index : state . routingTable ( ) . indicesRouting ( ) . keys ( ) ) { for ( RoutingNode node : state . getRoutingNodes ( ) ) { assertThat ( node . shardsWithState ( index . value , STARTED ) . size ( ) , Matchers . greaterThanOrEqualTo ( <int> ) ) ; } } } private ClusterState addNodes ( ClusterState clusterState , AllocationService service , int numNodes , int nodeOffset ) { logger . info ( <str> , numNodes ) ; DiscoveryNodes . Builder nodes = DiscoveryNodes . builder ( clusterState . nodes ( ) ) ; for ( int i = <int> ; i < numNodes ; i + + ) { nodes . put ( newNode ( <str> + ( i + nodeOffset ) ) ) ; } clusterState = ClusterState . builder ( clusterState ) . nodes ( nodes . build ( ) ) . build ( ) ; RoutingTable routingTable = service . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; RoutingTable prev = routingTable ; while ( true ) { logger . debug ( <str> , clusterState . getRoutingNodes ( ) . prettyPrint ( ) ) ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; if ( routingTable = = prev ) break ; prev = routingTable ; } return clusterState ; } private ClusterState initCluster ( AllocationService service , int numberOfNodes , int numberOfIndices , int numberOfShards , int numberOfReplicas ) { MetaData . Builder metaDataBuilder = MetaData . builder ( ) ; RoutingTable . Builder routingTableBuilder = RoutingTable . builder ( ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { IndexMetaData . Builder index = IndexMetaData . builder ( <str> + i ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( numberOfShards ) . numberOfReplicas ( numberOfReplicas ) ; metaDataBuilder = metaDataBuilder . put ( index ) ; } MetaData metaData = metaDataBuilder . build ( ) ; for ( ObjectCursor < IndexMetaData > cursor : metaData . indices ( ) . values ( ) ) { routingTableBuilder . addAsNew ( cursor . value ) ; } RoutingTable routingTable = routingTableBuilder . build ( ) ; logger . info ( <str> + numberOfNodes + <str> ) ; DiscoveryNodes . Builder nodes = DiscoveryNodes . builder ( ) ; for ( int i = <int> ; i < numberOfNodes ; i + + ) { nodes . put ( newNode ( <str> + i ) ) ; } ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . nodes ( nodes ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; routingTable = service . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; RoutingTable prev = routingTable ; while ( true ) { logger . debug ( <str> , clusterState . getRoutingNodes ( ) . prettyPrint ( ) ) ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; if ( routingTable = = prev ) break ; prev = routingTable ; } return clusterState ; } private ClusterState addIndex ( ClusterState clusterState , AllocationService service , int indexOrdinal , int numberOfShards , int numberOfReplicas ) { MetaData . Builder metaDataBuilder = MetaData . builder ( clusterState . getMetaData ( ) ) ; RoutingTable . Builder routingTableBuilder = RoutingTable . builder ( clusterState . routingTable ( ) ) ; IndexMetaData . Builder index = IndexMetaData . builder ( <str> + indexOrdinal ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( numberOfShards ) . numberOfReplicas ( numberOfReplicas ) ; IndexMetaData imd = index . build ( ) ; metaDataBuilder = metaDataBuilder . put ( imd , true ) ; routingTableBuilder . addAsNew ( imd ) ; MetaData metaData = metaDataBuilder . build ( ) ; RoutingTable routingTable = routingTableBuilder . build ( ) ; clusterState = ClusterState . builder ( clusterState ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; routingTable = service . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; RoutingTable prev = routingTable ; while ( true ) { logger . debug ( <str> , clusterState . getRoutingNodes ( ) . prettyPrint ( ) ) ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; if ( routingTable = = prev ) break ; prev = routingTable ; } return clusterState ; } private ClusterState removeNodes ( ClusterState clusterState , AllocationService service , int numNodes ) { logger . info ( <str> , numNodes ) ; DiscoveryNodes . Builder nodes = DiscoveryNodes . builder ( clusterState . nodes ( ) ) ; ArrayList < DiscoveryNode > discoveryNodes = CollectionUtils . iterableAsArrayList ( clusterState . nodes ( ) ) ; Collections . shuffle ( discoveryNodes , random ( ) ) ; for ( DiscoveryNode node : discoveryNodes ) { nodes . remove ( node . id ( ) ) ; numNodes - - ; if ( numNodes < = <int> ) { break ; } } clusterState = ClusterState . builder ( clusterState ) . nodes ( nodes . build ( ) ) . build ( ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; RoutingTable routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; routingTable = service . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; logger . info ( <str> ) ; RoutingTable prev = routingTable ; while ( true ) { logger . debug ( <str> , clusterState . getRoutingNodes ( ) . prettyPrint ( ) ) ; routingTable = service . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingNodes = clusterState . getRoutingNodes ( ) ; if ( routingTable = = prev ) break ; prev = routingTable ; } return clusterState ; } } 

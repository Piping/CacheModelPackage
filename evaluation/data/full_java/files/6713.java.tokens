package org . elasticsearch . index . query . functionscore . random ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . query . QueryParseContext ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . index . query . functionscore . ScoreFunctionParser ; import java . io . IOException ; public class RandomScoreFunctionParser implements ScoreFunctionParser < RandomScoreFunctionBuilder > { public static String [ ] NAMES = { <str> , <str> } ; private static RandomScoreFunctionBuilder PROTOTYPE = new RandomScoreFunctionBuilder ( ) ; @Inject public RandomScoreFunctionParser ( ) { } @Override public String [ ] getNames ( ) { return NAMES ; } @Override public RandomScoreFunctionBuilder fromXContent ( QueryParseContext parseContext , XContentParser parser ) throws IOException , ParsingException { RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilder ( ) ; String currentFieldName = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) ) { if ( token = = XContentParser . Token . VALUE_NUMBER ) { if ( parser . numberType ( ) = = XContentParser . NumberType . INT ) { randomScoreFunctionBuilder . seed ( parser . intValue ( ) ) ; } else if ( parser . numberType ( ) = = XContentParser . NumberType . LONG ) { randomScoreFunctionBuilder . seed ( parser . longValue ( ) ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + token . toString ( ) + <str> ) ; } } else if ( token = = XContentParser . Token . VALUE_STRING ) { randomScoreFunctionBuilder . seed ( parser . text ( ) ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + token . toString ( ) + <str> ) ; } } else { throw new ParsingException ( parser . getTokenLocation ( ) , NAMES [ <int> ] + <str> + currentFieldName + <str> ) ; } } } return randomScoreFunctionBuilder ; } @Override public RandomScoreFunctionBuilder getBuilderPrototype ( ) { return PROTOTYPE ; } } 

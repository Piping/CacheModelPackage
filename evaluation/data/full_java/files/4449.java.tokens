package org . eclipse . debug . internal . ui . viewers . model . provisional ; import org . eclipse . debug . internal . ui . viewers . model . ViewerAdapterService ; import org . eclipse . debug . internal . ui . viewers . model . ViewerInputUpdate ; public class ViewerInputService { public final static Object NULL_INPUT = new IViewerInputProvider ( ) { @Override public void update ( IViewerInputUpdate update ) { update . setInputElement ( null ) ; update . done ( ) ; } } ; private IViewerInputUpdate fPendingUpdate = null ; private IViewerInputRequestor fRequestor = null ; private ITreeModelViewer fViewer ; private IViewerInputRequestor fProxyRequest = new IViewerInputRequestor ( ) { @Override public void viewerInputComplete ( final IViewerInputUpdate update ) { synchronized ( ViewerInputService . this ) { if ( fPendingUpdate = = update ) { fPendingUpdate = null ; } } fRequestor . viewerInputComplete ( update ) ; } } ; public ViewerInputService ( ITreeModelViewer viewer , IViewerInputRequestor requestor ) { fRequestor = requestor ; fViewer = viewer ; } public void resolveViewerInput ( Object source ) { IViewerInputProvider provdier = ViewerAdapterService . getInputProvider ( source ) ; synchronized ( this ) { if ( fPendingUpdate ! = null ) { fPendingUpdate . cancel ( ) ; } fPendingUpdate = new ViewerInputUpdate ( fViewer . getPresentationContext ( ) , fViewer . getInput ( ) , fProxyRequest , source ) ; } if ( provdier = = null ) { fPendingUpdate . setInputElement ( source ) ; fPendingUpdate . done ( ) ; } else { provdier . update ( fPendingUpdate ) ; } } public synchronized void dispose ( ) { if ( fPendingUpdate ! = null ) { fPendingUpdate . cancel ( ) ; fPendingUpdate = null ; } } } 

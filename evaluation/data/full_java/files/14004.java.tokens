package org . gradle . api . publication . maven . internal . action ; import org . apache . maven . artifact . ant . RemoteRepository ; import org . gradle . api . GradleException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . sonatype . aether . RepositorySystem ; import org . sonatype . aether . RepositorySystemSession ; import org . sonatype . aether . artifact . Artifact ; import org . sonatype . aether . deployment . DeployRequest ; import org . sonatype . aether . deployment . DeploymentException ; import org . sonatype . aether . repository . Authentication ; import org . sonatype . aether . repository . Proxy ; import org . sonatype . aether . util . repository . DefaultProxySelector ; import java . io . File ; import java . util . Collection ; import java . util . List ; public class MavenDeployAction extends AbstractMavenPublishAction { private static final Logger LOGGER = LoggerFactory . getLogger ( MavenDeployAction . class ) ; private RemoteRepository remoteRepository ; private RemoteRepository remoteSnapshotRepository ; public MavenDeployAction ( File pomFile , List < File > wagonJars ) { super ( pomFile , wagonJars ) ; } public void setRepositories ( RemoteRepository repository , RemoteRepository snapshotRepository ) { this . remoteRepository = repository ; this . remoteSnapshotRepository = snapshotRepository ; } @Override protected void publishArtifacts ( Collection < Artifact > artifacts , RepositorySystem repositorySystem , RepositorySystemSession session ) throws DeploymentException { RemoteRepository gradleRepo = remoteRepository ; if ( artifacts . iterator ( ) . next ( ) . isSnapshot ( ) & & remoteSnapshotRepository ! = null ) { gradleRepo = remoteSnapshotRepository ; } if ( gradleRepo = = null ) { throw new GradleException ( <str> ) ; } org . sonatype . aether . repository . RemoteRepository aetherRepo = createRepository ( gradleRepo ) ; DeployRequest request = new DeployRequest ( ) ; request . setRepository ( aetherRepo ) ; for ( Artifact artifact : artifacts ) { request . addArtifact ( artifact ) ; } LOGGER . info ( <str> , gradleRepo . getUrl ( ) ) ; repositorySystem . deploy ( session , request ) ; } private org . sonatype . aether . repository . RemoteRepository createRepository ( RemoteRepository gradleRepo ) { org . sonatype . aether . repository . RemoteRepository repo = new org . sonatype . aether . repository . RemoteRepository ( <str> , gradleRepo . getLayout ( ) , gradleRepo . getUrl ( ) ) ; org . apache . maven . artifact . ant . Authentication auth = gradleRepo . getAuthentication ( ) ; if ( auth ! = null ) { repo . setAuthentication ( new Authentication ( auth . getUserName ( ) , auth . getPassword ( ) , auth . getPrivateKey ( ) , auth . getPassphrase ( ) ) ) ; } org . apache . maven . artifact . ant . Proxy proxy = gradleRepo . getProxy ( ) ; if ( proxy ! = null ) { DefaultProxySelector proxySelector = new DefaultProxySelector ( ) ; Authentication proxyAuth = new Authentication ( proxy . getUserName ( ) , proxy . getPassword ( ) ) ; proxySelector . add ( new Proxy ( proxy . getType ( ) , proxy . getHost ( ) , proxy . getPort ( ) , proxyAuth ) , proxy . getNonProxyHosts ( ) ) ; repo . setProxy ( proxySelector . getProxy ( repo ) ) ; } return repo ; } } 

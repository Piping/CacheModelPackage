package com . badlogic . gdx . graphics . g3d . utils ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . VertexAttributes ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . model . MeshPart ; import com . badlogic . gdx . graphics . g3d . model . Node ; import com . badlogic . gdx . graphics . g3d . model . NodePart ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Disposable ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class ModelBuilder { private Model model ; private Node node ; private Array < MeshBuilder > builders = new Array < MeshBuilder > ( ) ; private Matrix4 tmpTransform = new Matrix4 ( ) ; private MeshBuilder getBuilder ( final VertexAttributes attributes ) { for ( final MeshBuilder mb : builders ) if ( mb . getAttributes ( ) . equals ( attributes ) & & mb . lastIndex ( ) < Short . MAX_VALUE / <int> ) return mb ; final MeshBuilder result = new MeshBuilder ( ) ; result . begin ( attributes ) ; builders . add ( result ) ; return result ; } public void begin ( ) { if ( model ! = null ) throw new GdxRuntimeException ( <str> ) ; node = null ; model = new Model ( ) ; builders . clear ( ) ; } public Model end ( ) { if ( model = = null ) throw new GdxRuntimeException ( <str> ) ; final Model result = model ; endnode ( ) ; model = null ; for ( final MeshBuilder mb : builders ) mb . end ( ) ; builders . clear ( ) ; rebuildReferences ( result ) ; return result ; } private void endnode ( ) { if ( node ! = null ) { node = null ; } } protected Node node ( final Node node ) { if ( model = = null ) throw new GdxRuntimeException ( <str> ) ; endnode ( ) ; model . nodes . add ( node ) ; this . node = node ; return node ; } public Node node ( ) { final Node node = new Node ( ) ; node ( node ) ; node . id = <str> + model . nodes . size ; return node ; } public Node node ( final String id , final Model model ) { final Node node = new Node ( ) ; node . id = id ; node . addChildren ( model . nodes ) ; node ( node ) ; for ( final Disposable disposable : model . getManagedDisposables ( ) ) manage ( disposable ) ; return node ; } public void manage ( final Disposable disposable ) { if ( model = = null ) throw new GdxRuntimeException ( <str> ) ; model . manageDisposable ( disposable ) ; } public void part ( final MeshPart meshpart , final Material material ) { if ( node = = null ) node ( ) ; node . parts . add ( new NodePart ( meshpart , material ) ) ; } public MeshPart part ( final String id , final Mesh mesh , int primitiveType , int offset , int size , final Material material ) { final MeshPart meshPart = new MeshPart ( ) ; meshPart . id = id ; meshPart . primitiveType = primitiveType ; meshPart . mesh = mesh ; meshPart . offset = offset ; meshPart . size = size ; part ( meshPart , material ) ; return meshPart ; } public MeshPart part ( final String id , final Mesh mesh , int primitiveType , final Material material ) { return part ( id , mesh , primitiveType , <int> , mesh . getNumIndices ( ) , material ) ; } public MeshPartBuilder part ( final String id , int primitiveType , final VertexAttributes attributes , final Material material ) { final MeshBuilder builder = getBuilder ( attributes ) ; part ( builder . part ( id , primitiveType ) , material ) ; return builder ; } public MeshPartBuilder part ( final String id , int primitiveType , final long attributes , final Material material ) { return part ( id , primitiveType , MeshBuilder . createAttributes ( attributes ) , material ) ; } public Model createBox ( float width , float height , float depth , final Material material , final long attributes ) { return createBox ( width , height , depth , GL20 . GL_TRIANGLES , material , attributes ) ; } public Model createBox ( float width , float height , float depth , int primitiveType , final Material material , final long attributes ) { begin ( ) ; part ( <str> , primitiveType , attributes , material ) . box ( width , height , depth ) ; return end ( ) ; } public Model createRect ( float x00 , float y00 , float z00 , float x10 , float y10 , float z10 , float x11 , float y11 , float z11 , float x01 , float y01 , float z01 , float normalX , float normalY , float normalZ , final Material material , final long attributes ) { return createRect ( x00 , y00 , z00 , x10 , y10 , z10 , x11 , y11 , z11 , x01 , y01 , z01 , normalX , normalY , normalZ , GL20 . GL_TRIANGLES , material , attributes ) ; } public Model createRect ( float x00 , float y00 , float z00 , float x10 , float y10 , float z10 , float x11 , float y11 , float z11 , float x01 , float y01 , float z01 , float normalX , float normalY , float normalZ , int primitiveType , final Material material , final long attributes ) { begin ( ) ; part ( <str> , primitiveType , attributes , material ) . rect ( x00 , y00 , z00 , x10 , y10 , z10 , x11 , y11 , z11 , x01 , y01 , z01 , normalX , normalY , normalZ ) ; return end ( ) ; } public Model createCylinder ( float width , float height , float depth , int divisions , final Material material , final long attributes ) { return createCylinder ( width , height , depth , divisions , GL20 . GL_TRIANGLES , material , attributes ) ; } public Model createCylinder ( float width , float height , float depth , int divisions , int primitiveType , final Material material , final long attributes ) { return createCylinder ( width , height , depth , divisions , primitiveType , material , attributes , <int> , <int> ) ; } public Model createCylinder ( float width , float height , float depth , int divisions , final Material material , final long attributes , float angleFrom , float angleTo ) { return createCylinder ( width , height , depth , divisions , GL20 . GL_TRIANGLES , material , attributes , angleFrom , angleTo ) ; } public Model createCylinder ( float width , float height , float depth , int divisions , int primitiveType , final Material material , final long attributes , float angleFrom , float angleTo ) { begin ( ) ; part ( <str> , primitiveType , attributes , material ) . cylinder ( width , height , depth , divisions , angleFrom , angleTo ) ; return end ( ) ; } public Model createCone ( float width , float height , float depth , int divisions , final Material material , final long attributes ) { return createCone ( width , height , depth , divisions , GL20 . GL_TRIANGLES , material , attributes ) ; } public Model createCone ( float width , float height , float depth , int divisions , int primitiveType , final Material material , final long attributes ) { return createCone ( width , height , depth , divisions , primitiveType , material , attributes , <int> , <int> ) ; } public Model createCone ( float width , float height , float depth , int divisions , final Material material , final long attributes , float angleFrom , float angleTo ) { return createCone ( width , height , depth , divisions , GL20 . GL_TRIANGLES , material , attributes , angleFrom , angleTo ) ; } public Model createCone ( float width , float height , float depth , int divisions , int primitiveType , final Material material , final long attributes , float angleFrom , float angleTo ) { begin ( ) ; part ( <str> , primitiveType , attributes , material ) . cone ( width , height , depth , divisions , angleFrom , angleTo ) ; return end ( ) ; } public Model createSphere ( float width , float height , float depth , int divisionsU , int divisionsV , final Material material , final long attributes ) { return createSphere ( width , height , depth , divisionsU , divisionsV , GL20 . GL_TRIANGLES , material , attributes ) ; } public Model createSphere ( float width , float height , float depth , int divisionsU , int divisionsV , int primitiveType , final Material material , final long attributes ) { return createSphere ( width , height , depth , divisionsU , divisionsV , primitiveType , material , attributes , <int> , <int> , <int> , <int> ) ; } public Model createSphere ( float width , float height , float depth , int divisionsU , int divisionsV , final Material material , final long attributes , float angleUFrom , float angleUTo , float angleVFrom , float angleVTo ) { return createSphere ( width , height , depth , divisionsU , divisionsV , GL20 . GL_TRIANGLES , material , attributes , angleUFrom , angleUTo , angleVFrom , angleVTo ) ; } public Model createSphere ( float width , float height , float depth , int divisionsU , int divisionsV , int primitiveType , final Material material , final long attributes , float angleUFrom , float angleUTo , float angleVFrom , float angleVTo ) { begin ( ) ; part ( <str> , primitiveType , attributes , material ) . sphere ( width , height , depth , divisionsU , divisionsV , angleUFrom , angleUTo , angleVFrom , angleVTo ) ; return end ( ) ; } public Model createCapsule ( float radius , float height , int divisions , final Material material , final long attributes ) { return createCapsule ( radius , height , divisions , GL20 . GL_TRIANGLES , material , attributes ) ; } public Model createCapsule ( float radius , float height , int divisions , int primitiveType , final Material material , final long attributes ) { begin ( ) ; part ( <str> , primitiveType , attributes , material ) . capsule ( radius , height , divisions ) ; return end ( ) ; } public static void rebuildReferences ( final Model model ) { model . materials . clear ( ) ; model . meshes . clear ( ) ; model . meshParts . clear ( ) ; for ( final Node node : model . nodes ) rebuildReferences ( model , node ) ; } private static void rebuildReferences ( final Model model , final Node node ) { for ( final NodePart mpm : node . parts ) { if ( ! model . materials . contains ( mpm . material , true ) ) model . materials . add ( mpm . material ) ; if ( ! model . meshParts . contains ( mpm . meshPart , true ) ) { model . meshParts . add ( mpm . meshPart ) ; if ( ! model . meshes . contains ( mpm . meshPart . mesh , true ) ) model . meshes . add ( mpm . meshPart . mesh ) ; model . manageDisposable ( mpm . meshPart . mesh ) ; } } for ( final Node child : node . getChildren ( ) ) rebuildReferences ( model , child ) ; } public Model createXYZCoordinates ( float axisLength , float capLength , float stemThickness , int divisions , int primitiveType , Material material , long attributes ) { begin ( ) ; MeshPartBuilder partBuilder ; Node node = node ( ) ; partBuilder = part ( <str> , primitiveType , attributes , material ) ; partBuilder . setColor ( Color . RED ) ; partBuilder . arrow ( <int> , <int> , <int> , axisLength , <int> , <int> , capLength , stemThickness , divisions ) ; partBuilder . setColor ( Color . GREEN ) ; partBuilder . arrow ( <int> , <int> , <int> , <int> , axisLength , <int> , capLength , stemThickness , divisions ) ; partBuilder . setColor ( Color . BLUE ) ; partBuilder . arrow ( <int> , <int> , <int> , <int> , <int> , axisLength , capLength , stemThickness , divisions ) ; return end ( ) ; } public Model createXYZCoordinates ( float axisLength , Material material , long attributes ) { return createXYZCoordinates ( axisLength , <float> , <float> , <int> , GL20 . GL_TRIANGLES , material , attributes ) ; } public Model createArrow ( float x1 , float y1 , float z1 , float x2 , float y2 , float z2 , float capLength , float stemThickness , int divisions , int primitiveType , Material material , long attributes ) { begin ( ) ; part ( <str> , primitiveType , attributes , material ) . arrow ( x1 , y1 , z1 , x2 , y2 , z2 , capLength , stemThickness , divisions ) ; return end ( ) ; } public Model createArrow ( Vector3 from , Vector3 to , Material material , long attributes ) { return createArrow ( from . x , from . y , from . z , to . x , to . y , to . z , <float> , <float> , <int> , GL20 . GL_TRIANGLES , material , attributes ) ; } public Model createLineGrid ( int xDivisions , int zDivisions , float xSize , float zSize , Material material , long attributes ) { begin ( ) ; MeshPartBuilder partBuilder = part ( <str> , GL20 . GL_LINES , attributes , material ) ; float xlength = xDivisions * xSize , zlength = zDivisions * zSize , hxlength = xlength / <int> , hzlength = zlength / <int> ; float x1 = - hxlength , y1 = <int> , z1 = hzlength , x2 = - hxlength , y2 = <int> , z2 = - hzlength ; for ( int i = <int> ; i < = xDivisions ; + + i ) { partBuilder . line ( x1 , y1 , z1 , x2 , y2 , z2 ) ; x1 + = xSize ; x2 + = xSize ; } x1 = - hxlength ; y1 = <int> ; z1 = - hzlength ; x2 = hxlength ; y2 = <int> ; z2 = - hzlength ; for ( int j = <int> ; j < = zDivisions ; + + j ) { partBuilder . line ( x1 , y1 , z1 , x2 , y2 , z2 ) ; z1 + = zSize ; z2 + = zSize ; } return end ( ) ; } } 

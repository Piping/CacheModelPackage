package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkElementIndex ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . base . Preconditions . checkPositionIndexes ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import java . io . Serializable ; import java . util . AbstractList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; import java . util . RandomAccess ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @CheckReturnValue @GwtCompatible ( emulated = true ) public final class Chars { private Chars ( ) { } public static final int BYTES = Character . SIZE / Byte . SIZE ; public static int hashCode ( char value ) { return value ; } public static char checkedCast ( long value ) { char result = ( char ) value ; if ( result ! = value ) { throw new IllegalArgumentException ( <str> + value ) ; } return result ; } public static char saturatedCast ( long value ) { if ( value > Character . MAX_VALUE ) { return Character . MAX_VALUE ; } if ( value < Character . MIN_VALUE ) { return Character . MIN_VALUE ; } return ( char ) value ; } public static int compare ( char a , char b ) { return a - b ; } public static boolean contains ( char [ ] array , char target ) { for ( char value : array ) { if ( value = = target ) { return true ; } } return false ; } public static int indexOf ( char [ ] array , char target ) { return indexOf ( array , target , <int> , array . length ) ; } private static int indexOf ( char [ ] array , char target , int start , int end ) { for ( int i = start ; i < end ; i + + ) { if ( array [ i ] = = target ) { return i ; } } return - <int> ; } public static int indexOf ( char [ ] array , char [ ] target ) { checkNotNull ( array , <str> ) ; checkNotNull ( target , <str> ) ; if ( target . length = = <int> ) { return <int> ; } outer: for ( int i = <int> ; i < array . length - target . length + <int> ; i + + ) { for ( int j = <int> ; j < target . length ; j + + ) { if ( array [ i + j ] ! = target [ j ] ) { continue outer ; } } return i ; } return - <int> ; } public static int lastIndexOf ( char [ ] array , char target ) { return lastIndexOf ( array , target , <int> , array . length ) ; } private static int lastIndexOf ( char [ ] array , char target , int start , int end ) { for ( int i = end - <int> ; i > = start ; i - - ) { if ( array [ i ] = = target ) { return i ; } } return - <int> ; } public static char min ( char . . . array ) { checkArgument ( array . length > <int> ) ; char min = array [ <int> ] ; for ( int i = <int> ; i < array . length ; i + + ) { if ( array [ i ] < min ) { min = array [ i ] ; } } return min ; } public static char max ( char . . . array ) { checkArgument ( array . length > <int> ) ; char max = array [ <int> ] ; for ( int i = <int> ; i < array . length ; i + + ) { if ( array [ i ] > max ) { max = array [ i ] ; } } return max ; } public static char [ ] concat ( char [ ] . . . arrays ) { int length = <int> ; for ( char [ ] array : arrays ) { length + = array . length ; } char [ ] result = new char [ length ] ; int pos = <int> ; for ( char [ ] array : arrays ) { System . arraycopy ( array , <int> , result , pos , array . length ) ; pos + = array . length ; } return result ; } @GwtIncompatible ( <str> ) public static byte [ ] toByteArray ( char value ) { return new byte [ ] { ( byte ) ( value > > <int> ) , ( byte ) value } ; } @GwtIncompatible ( <str> ) public static char fromByteArray ( byte [ ] bytes ) { checkArgument ( bytes . length > = BYTES , <str> , bytes . length , BYTES ) ; return fromBytes ( bytes [ <int> ] , bytes [ <int> ] ) ; } @GwtIncompatible ( <str> ) public static char fromBytes ( byte b1 , byte b2 ) { return ( char ) ( ( b1 < < <int> ) | ( b2 & <hex> ) ) ; } public static char [ ] ensureCapacity ( char [ ] array , int minLength , int padding ) { checkArgument ( minLength > = <int> , <str> , minLength ) ; checkArgument ( padding > = <int> , <str> , padding ) ; return ( array . length < minLength ) ? copyOf ( array , minLength + padding ) : array ; } private static char [ ] copyOf ( char [ ] original , int length ) { char [ ] copy = new char [ length ] ; System . arraycopy ( original , <int> , copy , <int> , Math . min ( original . length , length ) ) ; return copy ; } public static String join ( String separator , char . . . array ) { checkNotNull ( separator ) ; int len = array . length ; if ( len = = <int> ) { return <str> ; } StringBuilder builder = new StringBuilder ( len + separator . length ( ) * ( len - <int> ) ) ; builder . append ( array [ <int> ] ) ; for ( int i = <int> ; i < len ; i + + ) { builder . append ( separator ) . append ( array [ i ] ) ; } return builder . toString ( ) ; } public static Comparator < char [ ] > lexicographicalComparator ( ) { return LexicographicalComparator . INSTANCE ; } private enum LexicographicalComparator implements Comparator < char [ ] > { INSTANCE ; @Override public int compare ( char [ ] left , char [ ] right ) { int minLength = Math . min ( left . length , right . length ) ; for ( int i = <int> ; i < minLength ; i + + ) { int result = Chars . compare ( left [ i ] , right [ i ] ) ; if ( result ! = <int> ) { return result ; } } return left . length - right . length ; } @Override public String toString ( ) { return <str> ; } } public static char [ ] toArray ( Collection < Character > collection ) { if ( collection instanceof CharArrayAsList ) { return ( ( CharArrayAsList ) collection ) . toCharArray ( ) ; } Object [ ] boxedArray = collection . toArray ( ) ; int len = boxedArray . length ; char [ ] array = new char [ len ] ; for ( int i = <int> ; i < len ; i + + ) { array [ i ] = ( Character ) checkNotNull ( boxedArray [ i ] ) ; } return array ; } public static List < Character > asList ( char . . . backingArray ) { if ( backingArray . length = = <int> ) { return Collections . emptyList ( ) ; } return new CharArrayAsList ( backingArray ) ; } @GwtCompatible private static class CharArrayAsList extends AbstractList < Character > implements RandomAccess , Serializable { final char [ ] array ; final int start ; final int end ; CharArrayAsList ( char [ ] array ) { this ( array , <int> , array . length ) ; } CharArrayAsList ( char [ ] array , int start , int end ) { this . array = array ; this . start = start ; this . end = end ; } @Override public int size ( ) { return end - start ; } @Override public boolean isEmpty ( ) { return false ; } @Override public Character get ( int index ) { checkElementIndex ( index , size ( ) ) ; return array [ start + index ] ; } @Override public boolean contains ( Object target ) { return ( target instanceof Character ) & & Chars . indexOf ( array , ( Character ) target , start , end ) ! = - <int> ; } @Override public int indexOf ( Object target ) { if ( target instanceof Character ) { int i = Chars . indexOf ( array , ( Character ) target , start , end ) ; if ( i > = <int> ) { return i - start ; } } return - <int> ; } @Override public int lastIndexOf ( Object target ) { if ( target instanceof Character ) { int i = Chars . lastIndexOf ( array , ( Character ) target , start , end ) ; if ( i > = <int> ) { return i - start ; } } return - <int> ; } @Override public Character set ( int index , Character element ) { checkElementIndex ( index , size ( ) ) ; char oldValue = array [ start + index ] ; array [ start + index ] = checkNotNull ( element ) ; return oldValue ; } @Override public List < Character > subList ( int fromIndex , int toIndex ) { int size = size ( ) ; checkPositionIndexes ( fromIndex , toIndex , size ) ; if ( fromIndex = = toIndex ) { return Collections . emptyList ( ) ; } return new CharArrayAsList ( array , start + fromIndex , start + toIndex ) ; } @Override public boolean equals ( @Nullable Object object ) { if ( object = = this ) { return true ; } if ( object instanceof CharArrayAsList ) { CharArrayAsList that = ( CharArrayAsList ) object ; int size = size ( ) ; if ( that . size ( ) ! = size ) { return false ; } for ( int i = <int> ; i < size ; i + + ) { if ( array [ start + i ] ! = that . array [ that . start + i ] ) { return false ; } } return true ; } return super . equals ( object ) ; } @Override public int hashCode ( ) { int result = <int> ; for ( int i = start ; i < end ; i + + ) { result = <int> * result + Chars . hashCode ( array [ i ] ) ; } return result ; } @Override public String toString ( ) { StringBuilder builder = new StringBuilder ( size ( ) * <int> ) ; builder . append ( <str> ) . append ( array [ start ] ) ; for ( int i = start + <int> ; i < end ; i + + ) { builder . append ( <str> ) . append ( array [ i ] ) ; } return builder . append ( <str> ) . toString ( ) ; } char [ ] toCharArray ( ) { int size = size ( ) ; char [ ] result = new char [ size ] ; System . arraycopy ( array , start , result , <int> , size ) ; return result ; } private static final long serialVersionUID = <int> ; } } 

package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input ; import com . badlogic . gdx . InputAdapter ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Pixmap . Format ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Scaling ; import com . badlogic . gdx . utils . viewport . ExtendViewport ; import com . badlogic . gdx . utils . viewport . ScalingViewport ; import com . badlogic . gdx . utils . viewport . ScreenViewport ; import com . badlogic . gdx . utils . viewport . Viewport ; public class ViewportTest2 extends GdxTest { Array < Viewport > viewports ; Viewport viewport ; Array < String > names ; String name ; private SpriteBatch batch ; private Texture texture ; private BitmapFont font ; private OrthographicCamera camera ; public void create ( ) { font = new BitmapFont ( ) ; font . setColor ( <int> , <int> , <int> , <int> ) ; Pixmap pixmap = new Pixmap ( <int> , <int> , Format . RGBA8888 ) ; pixmap . setColor ( <int> , <int> , <int> , <int> ) ; pixmap . fill ( ) ; texture = new Texture ( pixmap ) ; batch = new SpriteBatch ( ) ; camera = new OrthographicCamera ( ) ; camera . position . set ( <int> , <int> , <int> ) ; camera . update ( ) ; viewports = ViewportTest1 . getViewports ( camera ) ; viewport = viewports . first ( ) ; names = ViewportTest1 . getViewportNames ( ) ; name = names . first ( ) ; Gdx . input . setInputProcessor ( new InputAdapter ( ) { public boolean keyDown ( int keycode ) { if ( keycode = = Input . Keys . SPACE ) { int index = ( viewports . indexOf ( viewport , true ) + <int> ) % viewports . size ; name = names . get ( index ) ; viewport = viewports . get ( index ) ; resize ( Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; } return false ; } } ) ; } public void render ( ) { batch . setProjectionMatrix ( camera . projection ) ; batch . setTransformMatrix ( camera . view ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; batch . setColor ( <int> , <int> , <int> , <int> ) ; batch . draw ( texture , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , false , false ) ; batch . setColor ( <int> , <int> , <int> , <int> ) ; batch . draw ( texture , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , false , false ) ; font . draw ( batch , viewport . getClass ( ) . getSimpleName ( ) , <int> , <int> ) ; batch . end ( ) ; if ( viewport instanceof ScalingViewport ) { ScalingViewport scalingViewport = ( ScalingViewport ) viewport ; int screenWidth = Gdx . graphics . getWidth ( ) ; int screenHeight = Gdx . graphics . getHeight ( ) ; Gdx . gl . glViewport ( <int> , <int> , screenWidth , screenHeight ) ; batch . getProjectionMatrix ( ) . idt ( ) . setToOrtho2D ( <int> , <int> , screenWidth , screenHeight ) ; batch . getTransformMatrix ( ) . idt ( ) ; batch . begin ( ) ; float leftGutterWidth = scalingViewport . getLeftGutterWidth ( ) ; if ( leftGutterWidth > <int> ) { batch . draw ( texture , <int> , <int> , leftGutterWidth , screenHeight ) ; batch . draw ( texture , scalingViewport . getRightGutterX ( ) , <int> , scalingViewport . getRightGutterWidth ( ) , screenHeight ) ; } float bottomGutterHeight = scalingViewport . getBottomGutterHeight ( ) ; if ( bottomGutterHeight > <int> ) { batch . draw ( texture , <int> , <int> , screenWidth , bottomGutterHeight ) ; batch . draw ( texture , <int> , scalingViewport . getTopGutterY ( ) , screenWidth , scalingViewport . getTopGutterHeight ( ) ) ; } batch . end ( ) ; viewport . update ( screenWidth , screenHeight , true ) ; } } public void resize ( int width , int height ) { System . out . println ( name ) ; viewport . update ( width , height ) ; } public void dispose ( ) { texture . dispose ( ) ; batch . dispose ( ) ; } } 

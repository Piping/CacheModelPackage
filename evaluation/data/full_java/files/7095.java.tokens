package org . elasticsearch . script ; import org . elasticsearch . common . inject . AbstractModule ; import org . elasticsearch . common . inject . multibindings . MapBinder ; import org . elasticsearch . common . inject . multibindings . Multibinder ; import org . elasticsearch . common . settings . Settings ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class ScriptModule extends AbstractModule { private final Settings settings ; private final List < Class < ? extends ScriptEngineService > > scriptEngines = new ArrayList < > ( ) ; private final Map < String , Class < ? extends NativeScriptFactory > > scripts = new HashMap < > ( ) ; private final List < ScriptContext . Plugin > customScriptContexts = new ArrayList < > ( ) ; public ScriptModule ( Settings settings ) { this . settings = settings ; } public void addScriptEngine ( Class < ? extends ScriptEngineService > scriptEngine ) { scriptEngines . add ( scriptEngine ) ; } public void registerScript ( String name , Class < ? extends NativeScriptFactory > script ) { scripts . put ( name , script ) ; } public void registerScriptContext ( ScriptContext . Plugin scriptContext ) { customScriptContexts . add ( scriptContext ) ; } @Override protected void configure ( ) { MapBinder < String , NativeScriptFactory > scriptsBinder = MapBinder . newMapBinder ( binder ( ) , String . class , NativeScriptFactory . class ) ; for ( Map . Entry < String , Class < ? extends NativeScriptFactory > > entry : scripts . entrySet ( ) ) { scriptsBinder . addBinding ( entry . getKey ( ) ) . to ( entry . getValue ( ) ) . asEagerSingleton ( ) ; } Multibinder < ScriptEngineService > multibinder = Multibinder . newSetBinder ( binder ( ) , ScriptEngineService . class ) ; multibinder . addBinding ( ) . to ( NativeScriptEngineService . class ) ; for ( Class < ? extends ScriptEngineService > scriptEngine : scriptEngines ) { multibinder . addBinding ( ) . to ( scriptEngine ) . asEagerSingleton ( ) ; } bind ( ScriptContextRegistry . class ) . toInstance ( new ScriptContextRegistry ( customScriptContexts ) ) ; bind ( ScriptService . class ) . asEagerSingleton ( ) ; } } 

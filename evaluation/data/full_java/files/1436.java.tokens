package org . apache . cassandra . db ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . Util ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . db . rows . Row ; import org . apache . cassandra . db . context . CounterContext ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . WriteTimeoutException ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . utils . ByteBufferUtil ; import static org . junit . Assert . assertEquals ; public class CounterMutationTest { private static final String KEYSPACE1 = <str> ; private static final String CF1 = <str> ; private static final String CF2 = <str> ; @BeforeClass public static void defineSchema ( ) throws ConfigurationException { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . counterCFMD ( KEYSPACE1 , CF1 ) , SchemaLoader . counterCFMD ( KEYSPACE1 , CF2 ) ) ; } @Test public void testSingleCell ( ) throws WriteTimeoutException { ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF1 ) ; cfs . truncateBlocking ( ) ; ColumnDefinition cDef = cfs . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; addAndCheck ( cfs , <int> , <int> ) ; addAndCheck ( cfs , <int> , <int> ) ; addAndCheck ( cfs , - <int> , <int> ) ; } private void addAndCheck ( ColumnFamilyStore cfs , long toAdd , long expected ) { ColumnDefinition cDef = cfs . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; Mutation m = new RowUpdateBuilder ( cfs . metadata , <int> , <str> ) . clustering ( <str> ) . add ( <str> , toAdd ) . build ( ) ; new CounterMutation ( m , ConsistencyLevel . ONE ) . apply ( ) ; Row row = Util . getOnlyRow ( Util . cmd ( cfs ) . includeRow ( <str> ) . columns ( <str> ) . build ( ) ) ; assertEquals ( expected , CounterContext . instance ( ) . total ( row . getCell ( cDef ) . value ( ) ) ) ; } @Test public void testTwoCells ( ) throws WriteTimeoutException { ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF1 ) ; cfs . truncateBlocking ( ) ; addTwoAndCheck ( cfs , <int> , <int> , - <int> , - <int> ) ; addTwoAndCheck ( cfs , <int> , <int> , - <int> , - <int> ) ; addTwoAndCheck ( cfs , - <int> , <int> L , <int> , <int> L ) ; } private void addTwoAndCheck ( ColumnFamilyStore cfs , long addOne , long expectedOne , long addTwo , long expectedTwo ) { ColumnDefinition cDefOne = cfs . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; ColumnDefinition cDefTwo = cfs . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; Mutation m = new RowUpdateBuilder ( cfs . metadata , <int> , <str> ) . clustering ( <str> ) . add ( <str> , addOne ) . add ( <str> , addTwo ) . build ( ) ; new CounterMutation ( m , ConsistencyLevel . ONE ) . apply ( ) ; Row row = Util . getOnlyRow ( Util . cmd ( cfs ) . includeRow ( <str> ) . columns ( <str> , <str> ) . build ( ) ) ; assertEquals ( expectedOne , CounterContext . instance ( ) . total ( row . getCell ( cDefOne ) . value ( ) ) ) ; assertEquals ( expectedTwo , CounterContext . instance ( ) . total ( row . getCell ( cDefTwo ) . value ( ) ) ) ; } @Test public void testBatch ( ) throws WriteTimeoutException { ColumnFamilyStore cfsOne = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF1 ) ; ColumnFamilyStore cfsTwo = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF2 ) ; cfsOne . truncateBlocking ( ) ; cfsTwo . truncateBlocking ( ) ; Mutation batch = new Mutation ( KEYSPACE1 , Util . dk ( <str> ) ) ; batch . add ( new RowUpdateBuilder ( cfsOne . metadata , <int> , <str> ) . clustering ( <str> ) . add ( <str> , <int> ) . add ( <str> , - <int> ) . build ( ) . get ( cfsOne . metadata ) ) ; batch . add ( new RowUpdateBuilder ( cfsTwo . metadata , <int> , <str> ) . clustering ( <str> ) . add ( <str> , <int> ) . add ( <str> , - <int> ) . build ( ) . get ( cfsTwo . metadata ) ) ; new CounterMutation ( batch , ConsistencyLevel . ONE ) . apply ( ) ; ColumnDefinition c1cfs1 = cfsOne . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; ColumnDefinition c2cfs1 = cfsOne . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; Row row = Util . getOnlyRow ( Util . cmd ( cfsOne ) . includeRow ( <str> ) . columns ( <str> , <str> ) . build ( ) ) ; assertEquals ( <int> , CounterContext . instance ( ) . total ( row . getCell ( c1cfs1 ) . value ( ) ) ) ; assertEquals ( - <int> , CounterContext . instance ( ) . total ( row . getCell ( c2cfs1 ) . value ( ) ) ) ; ColumnDefinition c1cfs2 = cfsTwo . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; ColumnDefinition c2cfs2 = cfsTwo . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; row = Util . getOnlyRow ( Util . cmd ( cfsTwo ) . includeRow ( <str> ) . columns ( <str> , <str> ) . build ( ) ) ; assertEquals ( <int> , CounterContext . instance ( ) . total ( row . getCell ( c1cfs2 ) . value ( ) ) ) ; assertEquals ( - <int> , CounterContext . instance ( ) . total ( row . getCell ( c2cfs2 ) . value ( ) ) ) ; CBuilder cb = CBuilder . create ( cfsOne . metadata . comparator ) ; cb . add ( <str> ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cfsOne . getCachedCounter ( Util . dk ( <str> ) . getKey ( ) , cb . build ( ) , c1cfs1 , null ) ) ; assertEquals ( ClockAndCount . create ( <int> , - <int> ) , cfsOne . getCachedCounter ( Util . dk ( <str> ) . getKey ( ) , cb . build ( ) , c2cfs1 , null ) ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cfsTwo . getCachedCounter ( Util . dk ( <str> ) . getKey ( ) , cb . build ( ) , c1cfs2 , null ) ) ; assertEquals ( ClockAndCount . create ( <int> , - <int> ) , cfsTwo . getCachedCounter ( Util . dk ( <str> ) . getKey ( ) , cb . build ( ) , c2cfs2 , null ) ) ; } @Test public void testDeletes ( ) throws WriteTimeoutException { ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( CF1 ) ; cfs . truncateBlocking ( ) ; ColumnDefinition cOne = cfs . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; ColumnDefinition cTwo = cfs . metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ; new CounterMutation ( new RowUpdateBuilder ( cfs . metadata , <int> , <str> ) . clustering ( <str> ) . add ( <str> , <int> ) . add ( <str> , - <int> ) . build ( ) , ConsistencyLevel . ONE ) . apply ( ) ; Row row = Util . getOnlyRow ( Util . cmd ( cfs ) . includeRow ( <str> ) . columns ( <str> , <str> ) . build ( ) ) ; assertEquals ( <int> , CounterContext . instance ( ) . total ( row . getCell ( cOne ) . value ( ) ) ) ; assertEquals ( - <int> , CounterContext . instance ( ) . total ( row . getCell ( cTwo ) . value ( ) ) ) ; new CounterMutation ( new RowUpdateBuilder ( cfs . metadata , <int> , <str> ) . clustering ( <str> ) . delete ( cOne ) . add ( <str> , - <int> ) . build ( ) , ConsistencyLevel . ONE ) . apply ( ) ; row = Util . getOnlyRow ( Util . cmd ( cfs ) . includeRow ( <str> ) . columns ( <str> , <str> ) . build ( ) ) ; assertEquals ( null , row . getCell ( cOne ) ) ; assertEquals ( - <int> , CounterContext . instance ( ) . total ( row . getCell ( cTwo ) . value ( ) ) ) ; new CounterMutation ( new RowUpdateBuilder ( cfs . metadata , <int> , <str> ) . clustering ( <str> ) . add ( <str> , <int> ) . build ( ) , ConsistencyLevel . ONE ) . apply ( ) ; row = Util . getOnlyRow ( Util . cmd ( cfs ) . includeRow ( <str> ) . columns ( <str> , <str> ) . build ( ) ) ; assertEquals ( null , row . getCell ( cOne ) ) ; RowUpdateBuilder . deleteRow ( cfs . metadata , <int> , <str> , <str> ) . applyUnsafe ( ) ; Util . assertEmpty ( Util . cmd ( cfs ) . includeRow ( <str> ) . columns ( <str> , <str> ) . build ( ) ) ; new CounterMutation ( new RowUpdateBuilder ( cfs . metadata , <int> , <str> ) . clustering ( <str> ) . add ( <str> , <int> ) . add ( <str> , <int> ) . build ( ) , ConsistencyLevel . ONE ) . apply ( ) ; Util . assertEmpty ( Util . cmd ( cfs ) . includeRow ( <str> ) . columns ( <str> , <str> ) . build ( ) ) ; } } 

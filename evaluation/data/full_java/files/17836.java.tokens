package com . badlogic . gdx . tools . flame ; import java . awt . Dimension ; import java . awt . GridBagConstraints ; import java . awt . Insets ; import javax . swing . JScrollPane ; import javax . swing . JTable ; import javax . swing . ListSelectionModel ; import javax . swing . event . TableModelEvent ; import javax . swing . event . TableModelListener ; import javax . swing . table . DefaultTableModel ; import com . badlogic . gdx . utils . Array ; public class TemplatePickerPanel < T > extends EditorPanel < Array < T > > implements LoaderButton . Listener < T > { public interface Listener < T > { void onTemplateChecked ( T template , boolean isChecked ) ; } Array < T > loadedTemplates ; Array < T > excludedTemplates ; Class < T > type ; JTable templatesTable ; DefaultTableModel templatesTableModel ; boolean isOneModelSelectedRequired = true , isMultipleSelectionAllowed = true ; Listener listener ; int lastSelected = - <int> ; public TemplatePickerPanel ( FlameMain editor , Array < T > value , Listener listener , Class < T > type ) { this ( editor , value , listener , type , null , true , true ) ; } public TemplatePickerPanel ( FlameMain editor , Array < T > value , Listener listener , Class < T > type , LoaderButton < T > loaderButton ) { this ( editor , value , listener , type , loaderButton , true , true ) ; } public TemplatePickerPanel ( FlameMain editor , Array < T > value , Listener listener , Class < T > type , LoaderButton < T > loaderButton , boolean isOneModelSelectedRequired , boolean isMultipleSelectionAllowed ) { super ( editor , <str> , <str> ) ; this . type = type ; this . listener = listener ; this . isOneModelSelectedRequired = isOneModelSelectedRequired ; this . isMultipleSelectionAllowed = isMultipleSelectionAllowed ; loadedTemplates = new Array < T > ( ) ; excludedTemplates = new Array < T > ( ) ; initializeComponents ( type , loaderButton ) ; setValue ( value ) ; } @Override public void setValue ( Array < T > value ) { super . setValue ( value ) ; if ( value = = null ) return ; if ( ! isMultipleSelectionAllowed & & value . size > <int> ) throw new RuntimeException ( <str> ) ; for ( int i = <int> ; i < value . size ; + + i ) { T model = value . get ( i ) ; int index = loadedTemplates . indexOf ( model , true ) ; if ( index > - <int> ) { EditorPanel . setValue ( templatesTableModel , true , index , <int> ) ; lastSelected = index ; } } } public void setOneModelSelectionRequired ( boolean isOneModelSelectionRequired ) { this . isOneModelSelectedRequired = isOneModelSelectionRequired ; } public void setMultipleSelectionAllowed ( boolean isMultipleSelectionAllowed ) { this . isMultipleSelectionAllowed = isMultipleSelectionAllowed ; } public void setExcludedTemplates ( Array < T > excludedTemplates ) { this . excludedTemplates . clear ( ) ; this . excludedTemplates . addAll ( excludedTemplates ) ; } public void setLoadedTemplates ( Array < T > templates ) { loadedTemplates . clear ( ) ; loadedTemplates . addAll ( templates ) ; loadedTemplates . removeAll ( excludedTemplates , true ) ; templatesTableModel . getDataVector ( ) . removeAllElements ( ) ; int i = <int> ; for ( T template : templates ) { templatesTableModel . addRow ( new Object [ ] { getTemplateName ( template , i ) , false } ) ; i + + ; } lastSelected = - <int> ; setValue ( value ) ; } protected String getTemplateName ( T template , int index ) { String name = editor . assetManager . getAssetFileName ( template ) ; return name = = null ? <str> + index : name ; } public void reloadTemplates ( ) { setLoadedTemplates ( editor . assetManager . getAll ( type , new Array < T > ( ) ) ) ; } protected void initializeComponents ( Class < T > type , LoaderButton < T > loaderButton ) { int i = <int> ; if ( loaderButton ! = null ) { loaderButton . setListener ( this ) ; contentPanel . add ( loaderButton , new GridBagConstraints ( <int> , i + + , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } JScrollPane scroll = new JScrollPane ( ) ; contentPanel . add ( scroll , new GridBagConstraints ( <int> , i , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . BOTH , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; { templatesTable = new JTable ( ) { public Class getColumnClass ( int column ) { return column = = <int> ? Boolean . class : super . getColumnClass ( column ) ; } @Override public Dimension getPreferredScrollableViewportSize ( ) { Dimension dim = super . getPreferredScrollableViewportSize ( ) ; dim . height = getPreferredSize ( ) . height ; return dim ; } } ; templatesTable . getTableHeader ( ) . setReorderingAllowed ( false ) ; templatesTable . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; scroll . setViewportView ( templatesTable ) ; templatesTableModel = new DefaultTableModel ( new String [ <int> ] [ <int> ] , new String [ ] { <str> , <str> } ) ; templatesTable . setModel ( templatesTableModel ) ; reloadTemplates ( ) ; templatesTableModel . addTableModelListener ( new TableModelListener ( ) { public void tableChanged ( TableModelEvent event ) { if ( event . getColumn ( ) ! = <int> ) return ; int row = event . getFirstRow ( ) ; boolean checked = ( Boolean ) templatesTable . getValueAt ( row , <int> ) ; if ( isOneModelSelectedRequired & & ( value . size = = <int> & & ! checked ) ) { EditorPanel . setValue ( templatesTableModel , true , row , <int> ) ; return ; } templateChecked ( row , checked ) ; } } ) ; } } protected void templateChecked ( int index , Boolean isChecked ) { T template = loadedTemplates . get ( index ) ; if ( isChecked ) { if ( ! isMultipleSelectionAllowed ) { if ( lastSelected > - <int> ) { value . removeValue ( loadedTemplates . get ( lastSelected ) , true ) ; EditorPanel . setValue ( templatesTableModel , false , lastSelected , <int> ) ; } } value . add ( template ) ; lastSelected = index ; } else { value . removeValue ( template , true ) ; } listener . onTemplateChecked ( template , isChecked ) ; } @Override public void onResourceLoaded ( T model ) { reloadTemplates ( ) ; if ( lastSelected = = - <int> & & isOneModelSelectedRequired ) { templateChecked ( loadedTemplates . size - <int> , true ) ; } else { setValue ( value ) ; } revalidate ( ) ; repaint ( ) ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . FieldMaskingSpanQuery ; import org . elasticsearch . index . mapper . MappedFieldType ; import java . io . IOException ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . instanceOf ; public class FieldMaskingSpanQueryBuilderTests extends AbstractQueryTestCase < FieldMaskingSpanQueryBuilder > { @Override protected FieldMaskingSpanQueryBuilder doCreateTestQueryBuilder ( ) { String fieldName ; if ( randomBoolean ( ) ) { fieldName = randomFrom ( MAPPED_FIELD_NAMES ) ; } else { fieldName = randomAsciiOfLengthBetween ( <int> , <int> ) ; } SpanTermQueryBuilder innerQuery = new SpanTermQueryBuilderTests ( ) . createTestQueryBuilder ( ) ; return new FieldMaskingSpanQueryBuilder ( innerQuery , fieldName ) ; } @Override protected void doAssertLuceneQuery ( FieldMaskingSpanQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { String fieldInQuery = queryBuilder . fieldName ( ) ; MappedFieldType fieldType = context . fieldMapper ( fieldInQuery ) ; if ( fieldType ! = null ) { fieldInQuery = fieldType . names ( ) . indexName ( ) ; } assertThat ( query , instanceOf ( FieldMaskingSpanQuery . class ) ) ; FieldMaskingSpanQuery fieldMaskingSpanQuery = ( FieldMaskingSpanQuery ) query ; assertThat ( fieldMaskingSpanQuery . getField ( ) , equalTo ( fieldInQuery ) ) ; assertThat ( fieldMaskingSpanQuery . getMaskedQuery ( ) , equalTo ( queryBuilder . innerQuery ( ) . toQuery ( context ) ) ) ; } public void testIllegalArguments ( ) { try { new FieldMaskingSpanQueryBuilder ( null , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { SpanQueryBuilder span = new SpanTermQueryBuilder ( <str> , <str> ) ; if ( randomBoolean ( ) ) { new FieldMaskingSpanQueryBuilder ( span , null ) ; } else { new FieldMaskingSpanQueryBuilder ( span , <str> ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; FieldMaskingSpanQueryBuilder parsed = ( FieldMaskingSpanQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <float> , parsed . boost ( ) , <float> ) ; assertEquals ( json , <float> , parsed . innerQuery ( ) . boost ( ) , <float> ) ; } } 

package org . elasticsearch . action . termvectors ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . TransportActions ; import org . elasticsearch . action . support . single . shard . TransportSingleShardAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . routing . ShardIterator ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . indices . IndicesService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportShardMultiTermsVectorAction extends TransportSingleShardAction < MultiTermVectorsShardRequest , MultiTermVectorsShardResponse > { private final IndicesService indicesService ; private static final String ACTION_NAME = MultiTermVectorsAction . NAME + <str> ; @Inject public TransportShardMultiTermsVectorAction ( Settings settings , ClusterService clusterService , TransportService transportService , IndicesService indicesService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , ACTION_NAME , threadPool , clusterService , transportService , actionFilters , indexNameExpressionResolver , MultiTermVectorsShardRequest : : new , ThreadPool . Names . GET ) ; this . indicesService = indicesService ; } @Override protected boolean isSubAction ( ) { return true ; } @Override protected MultiTermVectorsShardResponse newResponse ( ) { return new MultiTermVectorsShardResponse ( ) ; } @Override protected boolean resolveIndex ( MultiTermVectorsShardRequest request ) { return false ; } @Override protected ShardIterator shards ( ClusterState state , InternalRequest request ) { return clusterService . operationRouting ( ) . getShards ( state , request . concreteIndex ( ) , request . request ( ) . shardId ( ) , request . request ( ) . preference ( ) ) ; } @Override protected MultiTermVectorsShardResponse shardOperation ( MultiTermVectorsShardRequest request , ShardId shardId ) { MultiTermVectorsShardResponse response = new MultiTermVectorsShardResponse ( ) ; for ( int i = <int> ; i < request . locations . size ( ) ; i + + ) { TermVectorsRequest termVectorsRequest = request . requests . get ( i ) ; try { IndexService indexService = indicesService . indexServiceSafe ( request . index ( ) ) ; IndexShard indexShard = indexService . getShard ( shardId . id ( ) ) ; TermVectorsResponse termVectorsResponse = indexShard . getTermVectors ( termVectorsRequest ) ; termVectorsResponse . updateTookInMillis ( termVectorsRequest . startTime ( ) ) ; response . add ( request . locations . get ( i ) , termVectorsResponse ) ; } catch ( Throwable t ) { if ( TransportActions . isShardNotAvailableException ( t ) ) { throw ( ElasticsearchException ) t ; } else { logger . debug ( <str> , t , shardId , termVectorsRequest . type ( ) , termVectorsRequest . id ( ) ) ; response . add ( request . locations . get ( i ) , new MultiTermVectorsResponse . Failure ( request . index ( ) , termVectorsRequest . type ( ) , termVectorsRequest . id ( ) , t ) ) ; } } } return response ; } } 

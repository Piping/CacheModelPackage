package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . Contact ; import com . badlogic . gdx . physics . box2d . ContactImpulse ; import com . badlogic . gdx . physics . box2d . ContactListener ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . Fixture ; import com . badlogic . gdx . physics . box2d . FixtureDef ; import com . badlogic . gdx . physics . box2d . Manifold ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; public class ConveyorBelt extends Box2DTest implements ContactListener { Fixture m_platform ; @Override protected void createWorld ( World world ) { world . setContactListener ( this ) ; { BodyDef bodyDef = new BodyDef ( ) ; groundBody = world . createBody ( bodyDef ) ; EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <float> , <float> ) , new Vector2 ( <float> , <float> ) ) ; groundBody . createFixture ( shape , <float> ) ; } { BodyDef bd = new BodyDef ( ) ; bd . position . set ( - <float> , <float> ) ; Body body = world . createBody ( bd ) ; PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <float> , <float> ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . friction = <float> ; m_platform = body . createFixture ( fd ) ; } for ( int i = <int> ; i < <int> ; + + i ) { BodyDef bd = new BodyDef ( ) ; bd . type = BodyType . DynamicBody ; bd . position . set ( - <float> + <float> * i , <float> ) ; Body body = world . createBody ( bd ) ; PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <float> , <float> ) ; body . createFixture ( shape , <float> ) ; } } public void preSolve ( Contact contact , Manifold oldManifold ) { Fixture fixtureA = contact . getFixtureA ( ) ; Fixture fixtureB = contact . getFixtureB ( ) ; if ( fixtureA = = m_platform | | fixtureB = = m_platform ) { contact . setTangentSpeed ( <float> ) ; } } @Override public void beginContact ( Contact contact ) { } @Override public void endContact ( Contact contact ) { } @Override public void postSolve ( Contact contact , ContactImpulse impulse ) { } } 

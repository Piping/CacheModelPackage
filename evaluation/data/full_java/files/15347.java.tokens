package org . gradle . api . reporting . internal ; import com . googlecode . jatl . Html ; import org . gradle . api . reporting . DirectoryReport ; import org . gradle . api . reporting . Report ; import org . gradle . reporting . HtmlPageBuilder ; import org . gradle . reporting . HtmlReportRenderer ; import org . gradle . reporting . ReportRenderer ; import org . gradle . util . GFileUtils ; import org . gradle . util . GradleVersion ; import java . io . File ; import java . io . IOException ; import java . io . Writer ; import java . util . * ; public class BuildDashboardGenerator extends ReportRenderer < Collection < Report > , File > { private Set < Report > reports ; private File outputFile ; @Override public void render ( Collection < Report > reports , final File outputFile ) { this . reports = new TreeSet < Report > ( new Comparator < Report > ( ) { public int compare ( Report o1 , Report o2 ) { return o1 . getDisplayName ( ) . compareTo ( o2 . getDisplayName ( ) ) ; } } ) ; this . reports . addAll ( reports ) ; this . outputFile = outputFile ; HtmlReportRenderer renderer = new HtmlReportRenderer ( ) ; renderer . renderRawSinglePage ( reports , new ReportRenderer < Collection < Report > , HtmlPageBuilder < Writer > > ( ) { @Override public void render ( Collection < Report > model , HtmlPageBuilder < Writer > builder ) throws IOException { generate ( builder ) ; } } , outputFile ) ; } private void generate ( final HtmlPageBuilder < Writer > builder ) { final String baseCssLink = builder . requireResource ( getClass ( ) . getResource ( <str> ) ) ; final String cssLink = builder . requireResource ( getClass ( ) . getResource ( <str> ) ) ; new Html ( builder . getOutput ( ) ) { { html ( ) ; head ( ) ; meta ( ) . httpEquiv ( <str> ) . content ( <str> ) ; meta ( ) . httpEquiv ( <str> ) . content ( <str> ) ; link ( ) . rel ( <str> ) . type ( <str> ) . href ( baseCssLink ) . end ( ) ; link ( ) . rel ( <str> ) . type ( <str> ) . href ( cssLink ) . end ( ) ; title ( ) . text ( <str> ) . end ( ) ; end ( ) ; body ( ) ; div ( ) . id ( <str> ) ; if ( reports . size ( ) > <int> ) { h1 ( ) . text ( <str> ) . end ( ) ; ul ( ) ; for ( Report report : reports ) { li ( ) ; if ( report . getDestination ( ) . exists ( ) ) { a ( ) . href ( GFileUtils . relativePath ( outputFile . getParentFile ( ) , getHtmlLinkedFileFromReport ( report ) ) ) . text ( report . getDisplayName ( ) ) ; } else { span ( ) . classAttr ( <str> ) . text ( report . getDisplayName ( ) ) ; } end ( <int> ) ; } end ( ) ; } else { h1 ( ) . text ( <str> ) . end ( ) ; } div ( ) . id ( <str> ) ; p ( ) ; text ( <str> ) ; a ( ) . href ( <str> ) . text ( GradleVersion . current ( ) . toString ( ) ) . end ( ) ; text ( String . format ( <str> , builder . formatDate ( new Date ( ) ) ) ) ; end ( ) ; end ( ) ; end ( ) ; endAll ( ) ; } } ; } private File getHtmlLinkedFileFromReport ( Report report ) { if ( report instanceof DirectoryReport ) { return ( ( DirectoryReport ) report ) . getEntryPoint ( ) ; } else { return report . getDestination ( ) ; } } } 

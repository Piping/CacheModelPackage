package org . elasticsearch . search . functionscore ; import org . apache . lucene . search . Explanation ; import org . elasticsearch . action . ActionFuture ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . index . query . functionscore . DecayFunction ; import org . elasticsearch . index . query . functionscore . DecayFunctionBuilder ; import org . elasticsearch . index . query . functionscore . DecayFunctionParser ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . search . SearchHits ; import org . elasticsearch . search . SearchModule ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . hamcrest . ElasticsearchAssertions ; import java . util . Collection ; import static org . elasticsearch . client . Requests . indexRequest ; import static org . elasticsearch . client . Requests . searchRequest ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . functionScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . search . builder . SearchSourceBuilder . searchSource ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class FunctionScorePluginIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( CustomDistanceScorePlugin . class ) ; } public void testPlugin ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForYellowStatus ( ) . execute ( ) . actionGet ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) ) ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; DecayFunctionBuilder gfb = new CustomDistanceScoreBuilder ( <str> , <str> , <str> ) ; ActionFuture < SearchResponse > response = client ( ) . search ( searchRequest ( ) . searchType ( SearchType . QUERY_THEN_FETCH ) . source ( searchSource ( ) . explain ( false ) . query ( functionScoreQuery ( termQuery ( <str> , <str> ) , gfb ) ) ) ) ; SearchResponse sr = response . actionGet ( ) ; ElasticsearchAssertions . assertNoFailures ( sr ) ; SearchHits sh = sr . getHits ( ) ; assertThat ( sh . hits ( ) . length , equalTo ( <int> ) ) ; assertThat ( sh . getAt ( <int> ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( sh . getAt ( <int> ) . getId ( ) , equalTo ( <str> ) ) ; } public static class CustomDistanceScorePlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( SearchModule scoreModule ) { scoreModule . registerFunctionScoreParser ( FunctionScorePluginIT . CustomDistanceScoreParser . class ) ; } } public static class CustomDistanceScoreParser extends DecayFunctionParser < CustomDistanceScoreBuilder > { private static final CustomDistanceScoreBuilder PROTOTYPE = new CustomDistanceScoreBuilder ( <str> , <str> , <str> ) ; public static final String [ ] NAMES = { <str> , <str> } ; @Override public String [ ] getNames ( ) { return NAMES ; } @Override public CustomDistanceScoreBuilder getBuilderPrototype ( ) { return PROTOTYPE ; } } public static class CustomDistanceScoreBuilder extends DecayFunctionBuilder < CustomDistanceScoreBuilder > { public CustomDistanceScoreBuilder ( String fieldName , Object origin , Object scale ) { super ( fieldName , origin , scale , null ) ; } private CustomDistanceScoreBuilder ( String fieldName , BytesReference functionBytes ) { super ( fieldName , functionBytes ) ; } @Override protected CustomDistanceScoreBuilder createFunctionBuilder ( String fieldName , BytesReference functionBytes ) { return new CustomDistanceScoreBuilder ( fieldName , functionBytes ) ; } @Override public String getName ( ) { return CustomDistanceScoreParser . NAMES [ <int> ] ; } @Override public DecayFunction getDecayFunction ( ) { return decayFunction ; } private static final DecayFunction decayFunction = new LinearMultScoreFunction ( ) ; private static class LinearMultScoreFunction implements DecayFunction { LinearMultScoreFunction ( ) { } @Override public double evaluate ( double value , double scale ) { return value ; } @Override public Explanation explainFunction ( String distanceString , double distanceVal , double scale ) { return Explanation . match ( ( float ) distanceVal , <str> + distanceVal ) ; } @Override public double processScale ( double userGivenScale , double userGivenValue ) { return userGivenScale ; } } } } 

package org . gradle . launcher . daemon . client ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . initialization . BuildCancellationToken ; import org . gradle . internal . concurrent . Stoppable ; import org . gradle . internal . id . IdGenerator ; import org . gradle . launcher . daemon . protocol . Cancel ; import org . gradle . messaging . dispatch . Dispatch ; public class DaemonCancelForwarder implements Stoppable { private static final Logger LOGGER = Logging . getLogger ( DaemonCancelForwarder . class ) ; private final Runnable cancellationCallback ; private final BuildCancellationToken cancellationToken ; public DaemonCancelForwarder ( final Dispatch < ? super Cancel > dispatch , BuildCancellationToken cancellationToken , final IdGenerator < ? > idGenerator ) { this . cancellationToken = cancellationToken ; cancellationCallback = new Runnable ( ) { public void run ( ) { LOGGER . info ( <str> ) ; dispatch . dispatch ( new Cancel ( idGenerator . generateId ( ) ) ) ; } } ; } public void start ( ) { cancellationToken . addCallback ( cancellationCallback ) ; } public void stop ( ) { cancellationToken . removeCallback ( cancellationCallback ) ; } } 

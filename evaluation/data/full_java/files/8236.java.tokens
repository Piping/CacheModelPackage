package org . elasticsearch . index . query ; import com . spatial4j . core . shape . Point ; import org . apache . lucene . search . GeoPointDistanceQuery ; import org . apache . lucene . search . Query ; import org . apache . lucene . util . GeoUtils ; import org . elasticsearch . Version ; import org . elasticsearch . common . geo . GeoDistance ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . index . search . geo . GeoDistanceRangeQuery ; import org . elasticsearch . test . geo . RandomShapeGenerator ; import java . io . IOException ; import static org . hamcrest . Matchers . * ; public class GeoDistanceQueryBuilderTests extends AbstractQueryTestCase < GeoDistanceQueryBuilder > { @Override protected GeoDistanceQueryBuilder doCreateTestQueryBuilder ( ) { GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder ( GEO_POINT_FIELD_NAME ) ; String distance = <str> + randomDouble ( ) ; if ( randomBoolean ( ) ) { DistanceUnit unit = randomFrom ( DistanceUnit . values ( ) ) ; distance = distance + unit . toString ( ) ; } int selector = randomIntBetween ( <int> , <int> ) ; switch ( selector ) { case <int> : qb . distance ( randomDouble ( ) , randomFrom ( DistanceUnit . values ( ) ) ) ; break ; case <int> : qb . distance ( distance , randomFrom ( DistanceUnit . values ( ) ) ) ; break ; case <int> : qb . distance ( distance ) ; break ; } Point p = RandomShapeGenerator . xRandomPoint ( random ( ) ) ; qb . point ( new GeoPoint ( p . getY ( ) , p . getX ( ) ) ) ; if ( randomBoolean ( ) ) { qb . setValidationMethod ( randomFrom ( GeoValidationMethod . values ( ) ) ) ; } if ( randomBoolean ( ) ) { qb . optimizeBbox ( randomFrom ( <str> , <str> , <str> ) ) ; } if ( randomBoolean ( ) ) { qb . geoDistance ( randomFrom ( GeoDistance . values ( ) ) ) ; } return qb ; } public void testIllegalValues ( ) { try { if ( randomBoolean ( ) ) { new GeoDistanceQueryBuilder ( <str> ) ; } else { new GeoDistanceQueryBuilder ( null ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } GeoDistanceQueryBuilder query = new GeoDistanceQueryBuilder ( <str> ) ; try { if ( randomBoolean ( ) ) { query . distance ( <str> ) ; } else { query . distance ( null ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } try { if ( randomBoolean ( ) ) { query . distance ( <str> , DistanceUnit . DEFAULT ) ; } else { query . distance ( null , DistanceUnit . DEFAULT ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } try { if ( randomBoolean ( ) ) { query . distance ( <str> , null ) ; } else { query . distance ( <int> , null ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } try { query . distance ( randomIntBetween ( Integer . MIN_VALUE , <int> ) , DistanceUnit . DEFAULT ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } try { if ( randomBoolean ( ) ) { query . geohash ( null ) ; } else { query . geohash ( <str> ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } try { query . geoDistance ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } try { query . optimizeBbox ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException ex ) { assertThat ( ex . getMessage ( ) , equalTo ( <str> ) ) ; } } @Override public void testToQuery ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; super . testToQuery ( ) ; } @Override protected void doAssertLuceneQuery ( GeoDistanceQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { Version version = context . indexVersionCreated ( ) ; if ( version . before ( Version . V_2_2_0 ) ) { assertLegacyQuery ( queryBuilder , query ) ; } else { assertGeoPointQuery ( queryBuilder , query ) ; } } private void assertLegacyQuery ( GeoDistanceQueryBuilder queryBuilder , Query query ) throws IOException { assertThat ( query , instanceOf ( GeoDistanceRangeQuery . class ) ) ; GeoDistanceRangeQuery geoQuery = ( GeoDistanceRangeQuery ) query ; assertThat ( geoQuery . fieldName ( ) , equalTo ( queryBuilder . fieldName ( ) ) ) ; if ( queryBuilder . point ( ) ! = null ) { assertThat ( geoQuery . lat ( ) , equalTo ( queryBuilder . point ( ) . lat ( ) ) ) ; assertThat ( geoQuery . lon ( ) , equalTo ( queryBuilder . point ( ) . lon ( ) ) ) ; } assertThat ( geoQuery . geoDistance ( ) , equalTo ( queryBuilder . geoDistance ( ) ) ) ; assertThat ( geoQuery . minInclusiveDistance ( ) , equalTo ( Double . NEGATIVE_INFINITY ) ) ; double distance = queryBuilder . distance ( ) ; if ( queryBuilder . geoDistance ( ) ! = null ) { distance = queryBuilder . geoDistance ( ) . normalize ( distance , DistanceUnit . DEFAULT ) ; } assertThat ( geoQuery . maxInclusiveDistance ( ) , closeTo ( distance , Math . abs ( distance ) / <int> ) ) ; } private void assertGeoPointQuery ( GeoDistanceQueryBuilder queryBuilder , Query query ) throws IOException { assertThat ( query , instanceOf ( GeoPointDistanceQuery . class ) ) ; GeoPointDistanceQuery geoQuery = ( GeoPointDistanceQuery ) query ; assertThat ( geoQuery . getField ( ) , equalTo ( queryBuilder . fieldName ( ) ) ) ; if ( queryBuilder . point ( ) ! = null ) { assertThat ( geoQuery . getCenterLat ( ) , equalTo ( queryBuilder . point ( ) . lat ( ) ) ) ; assertThat ( geoQuery . getCenterLon ( ) , equalTo ( queryBuilder . point ( ) . lon ( ) ) ) ; } double distance = queryBuilder . distance ( ) ; if ( queryBuilder . geoDistance ( ) ! = null ) { distance = queryBuilder . geoDistance ( ) . normalize ( distance , DistanceUnit . DEFAULT ) ; assertThat ( geoQuery . getRadiusMeters ( ) , closeTo ( distance , GeoUtils . TOLERANCE ) ) ; } } public void testParsingAndToQuery1 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery2 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery3 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery4 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery5 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery6 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery7 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <float> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery8 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . KILOMETERS ) ; } public void testParsingAndToQuery9 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery10 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery11 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } public void testParsingAndToQuery12 ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + <str> + <str> + GEO_POINT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; assertGeoDistanceRangeQuery ( query , <int> , - <int> , <int> , DistanceUnit . DEFAULT ) ; } private void assertGeoDistanceRangeQuery ( String query , double lat , double lon , double distance , DistanceUnit distanceUnit ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; Query parsedQuery = parseQuery ( query ) . toQuery ( createShardContext ( ) ) ; Version version = queryShardContext ( ) . indexVersionCreated ( ) ; if ( version . before ( Version . V_2_2_0 ) ) { GeoDistanceRangeQuery q = ( GeoDistanceRangeQuery ) parsedQuery ; assertThat ( q . fieldName ( ) , equalTo ( GEO_POINT_FIELD_NAME ) ) ; assertThat ( q . lat ( ) , closeTo ( lat , <float> ) ) ; assertThat ( q . lon ( ) , closeTo ( lon , <float> ) ) ; assertThat ( q . minInclusiveDistance ( ) , equalTo ( Double . NEGATIVE_INFINITY ) ) ; assertThat ( q . maxInclusiveDistance ( ) , closeTo ( distanceUnit . convert ( distance , DistanceUnit . MILES ) , <float> ) ) ; } else { GeoPointDistanceQuery q = ( GeoPointDistanceQuery ) parsedQuery ; assertThat ( q . getField ( ) , equalTo ( GEO_POINT_FIELD_NAME ) ) ; assertThat ( q . getCenterLat ( ) , closeTo ( lat , <float> ) ) ; assertThat ( q . getCenterLon ( ) , closeTo ( lon , <float> ) ) ; assertThat ( q . getRadiusMeters ( ) , closeTo ( distanceUnit . convert ( distance , DistanceUnit . MILES ) , <float> ) ) ; } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; GeoDistanceQueryBuilder parsed = ( GeoDistanceQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , - <float> , parsed . point ( ) . getLon ( ) , <float> ) ; assertEquals ( json , <float> , parsed . point ( ) . getLat ( ) , <float> ) ; assertEquals ( json , <float> , parsed . distance ( ) , <float> ) ; } } 

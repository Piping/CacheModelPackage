package org . junit . tests . running . classes ; import static java . util . Arrays . asList ; import static org . hamcrest . CoreMatchers . containsString ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; import static org . junit . experimental . results . PrintableResult . testResult ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import org . junit . Test ; import org . junit . runner . Description ; import org . junit . runner . JUnitCore ; import org . junit . runner . Request ; import org . junit . runner . Result ; import org . junit . runner . RunWith ; import org . junit . runner . Runner ; import org . junit . runner . notification . Failure ; import org . junit . runners . Parameterized ; import org . junit . runners . Parameterized . Parameter ; import org . junit . runners . Parameterized . Parameters ; import org . junit . runners . Parameterized . UseParametersRunnerFactory ; import org . junit . runners . model . InitializationError ; import org . junit . runners . parameterized . ParametersRunnerFactory ; import org . junit . runners . parameterized . TestWithParameters ; public class ParameterizedTestTest { @RunWith ( Parameterized . class ) public static class AdditionTest { @Parameters ( name = <str> ) public static Iterable < Object [ ] > data ( ) { return Arrays . asList ( new Object [ ] [ ] { { <int> , <int> , <int> } , { <int> , <int> , <int> } , { <int> , <int> , <int> } , { <int> , <int> , <int> } } ) ; } private int firstSummand ; private int secondSummand ; private int sum ; public AdditionTest ( int firstSummand , int secondSummand , int sum ) { this . firstSummand = firstSummand ; this . secondSummand = secondSummand ; this . sum = sum ; } @Test public void test ( ) { assertEquals ( sum , firstSummand + secondSummand ) ; } } @Test public void countsRuns ( ) { Result result = JUnitCore . runClasses ( AdditionTest . class ) ; assertEquals ( <int> , result . getRunCount ( ) ) ; } @Test public void countBeforeRun ( ) throws Exception { Runner runner = Request . aClass ( AdditionTest . class ) . getRunner ( ) ; assertEquals ( <int> , runner . testCount ( ) ) ; } @Test public void plansNamedCorrectly ( ) throws Exception { Runner runner = Request . aClass ( AdditionTest . class ) . getRunner ( ) ; Description description = runner . getDescription ( ) ; assertEquals ( <str> , description . getChildren ( ) . get ( <int> ) . getDisplayName ( ) ) ; } @RunWith ( Parameterized . class ) public static class ThreeFailures { @Parameters ( name = <str> ) public static Collection < Integer > data ( ) { return Arrays . asList ( <int> , <int> , <int> ) ; } @Parameter ( <int> ) public int unused ; @Test public void testSomething ( ) { fail ( ) ; } } @Test public void countsFailures ( ) throws Exception { Result result = JUnitCore . runClasses ( ThreeFailures . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } @Test public void failuresNamedCorrectly ( ) { Result result = JUnitCore . runClasses ( ThreeFailures . class ) ; assertEquals ( <str> + ThreeFailures . class . getName ( ) + <str> , result . getFailures ( ) . get ( <int> ) . getTestHeader ( ) ) ; } @RunWith ( Parameterized . class ) public static class ParameterizedWithoutSpecialTestname { @Parameters public static Collection < Object [ ] > data ( ) { return Arrays . asList ( new Object [ ] [ ] { { <int> } , { <int> } } ) ; } public ParameterizedWithoutSpecialTestname ( Object something ) { } @Test public void testSomething ( ) { } } @Test public void usesIndexAsTestName ( ) { Runner runner = Request . aClass ( ParameterizedWithoutSpecialTestname . class ) . getRunner ( ) ; Description description = runner . getDescription ( ) ; assertEquals ( <str> , description . getChildren ( ) . get ( <int> ) . getDisplayName ( ) ) ; } @RunWith ( Parameterized . class ) public static class AdditionTestWithAnnotatedFields { @Parameters ( name = <str> ) public static Iterable < Object [ ] > data ( ) { return Arrays . asList ( new Object [ ] [ ] { { <int> , <int> , <int> } , { <int> , <int> , <int> } , { <int> , <int> , <int> } , { <int> , <int> , <int> } } ) ; } @Parameter ( <int> ) public int firstSummand ; @Parameter ( <int> ) public int secondSummand ; @Parameter ( <int> ) public int sum ; @Test public void test ( ) { assertEquals ( sum , firstSummand + secondSummand ) ; } } @Test public void providesDataByAnnotatedFields ( ) { Result result = JUnitCore . runClasses ( AdditionTestWithAnnotatedFields . class ) ; assertEquals ( <int> , result . getRunCount ( ) ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } @RunWith ( Parameterized . class ) static public class BadIndexForAnnotatedFieldTest { @Parameters public static Collection < Object [ ] > data ( ) { return Arrays . asList ( new Object [ ] [ ] { { <int> } } ) ; } @Parameter ( <int> ) public int fInput ; public int fExpected ; @Test public void test ( ) { assertEquals ( fExpected , fib ( fInput ) ) ; } private int fib ( int x ) { return <int> ; } } @Test public void failureOnInitialization ( ) { Result result = JUnitCore . runClasses ( BadIndexForAnnotatedFieldTest . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; List < Failure > failures = result . getFailures ( ) ; assertEquals ( <str> , failures . get ( <int> ) . getException ( ) . getMessage ( ) ) ; assertEquals ( <str> , failures . get ( <int> ) . getException ( ) . getMessage ( ) ) ; } @RunWith ( Parameterized . class ) static public class BadNumberOfAnnotatedFieldTest { @Parameters public static Collection < Object [ ] > data ( ) { return Arrays . asList ( new Object [ ] [ ] { { <int> , <int> } } ) ; } @Parameter ( <int> ) public int fInput ; public int fExpected ; @Test public void test ( ) { assertEquals ( fExpected , fib ( fInput ) ) ; } private int fib ( int x ) { return <int> ; } } @Test public void numberOfFieldsAndParametersShouldMatch ( ) { Result result = JUnitCore . runClasses ( BadNumberOfAnnotatedFieldTest . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; List < Failure > failures = result . getFailures ( ) ; assertTrue ( failures . get ( <int> ) . getException ( ) . getMessage ( ) . contains ( <str> ) ) ; } private static String fLog ; @RunWith ( Parameterized . class ) static public class BeforeAndAfter { @BeforeClass public static void before ( ) { fLog + = <str> ; } @AfterClass public static void after ( ) { fLog + = <str> ; } public BeforeAndAfter ( int x ) { } @Parameters public static Collection < Object [ ] > data ( ) { return Arrays . asList ( new Object [ ] [ ] { { <int> } } ) ; } @Test public void aTest ( ) { } } @Test public void beforeAndAfterClassAreRun ( ) { fLog = <str> ; JUnitCore . runClasses ( BeforeAndAfter . class ) ; assertEquals ( <str> , fLog ) ; } @RunWith ( Parameterized . class ) static public class EmptyTest { @BeforeClass public static void before ( ) { fLog + = <str> ; } @AfterClass public static void after ( ) { fLog + = <str> ; } } @Test public void validateClassCatchesNoParameters ( ) { Result result = JUnitCore . runClasses ( EmptyTest . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } @RunWith ( Parameterized . class ) static public class IncorrectTest { @Test public int test ( ) { return <int> ; } @Parameters public static Collection < Object [ ] > data ( ) { return Collections . singletonList ( new Object [ ] { <int> } ) ; } } @Test public void failuresAddedForBadTestMethod ( ) throws Exception { Result result = JUnitCore . runClasses ( IncorrectTest . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } @RunWith ( Parameterized . class ) static public class ProtectedParametersTest { @Parameters protected static Collection < Object [ ] > data ( ) { return Collections . emptyList ( ) ; } @Test public void aTest ( ) { } } @Test public void meaningfulFailureWhenParametersNotPublic ( ) { assertTestCreatesSingleFailureWithMessage ( ProtectedParametersTest . class , <str> + ProtectedParametersTest . class . getName ( ) ) ; } @RunWith ( Parameterized . class ) static public class ParametersNotIterable { @Parameters public static String data ( ) { return <str> ; } @Test public void aTest ( ) { } } @Test public void meaningfulFailureWhenParametersAreNotAnIterable ( ) { assertThat ( testResult ( ParametersNotIterable . class ) . toString ( ) , containsString ( <str> ) ) ; } @RunWith ( Parameterized . class ) static public class PrivateConstructor { private PrivateConstructor ( int x ) { } @Parameters public static Collection < Object [ ] > data ( ) { return Arrays . asList ( new Object [ ] [ ] { { <int> } } ) ; } @Test public void aTest ( ) { } } @Test ( expected = InitializationError . class ) public void exceptionWhenPrivateConstructor ( ) throws Throwable { new Parameterized ( PrivateConstructor . class ) ; } @RunWith ( Parameterized . class ) public static class AdditionTestWithArray { @Parameters ( name = <str> ) public static Object [ ] [ ] data ( ) { return new Object [ ] [ ] { { <int> , <int> , <int> } , { <int> , <int> , <int> } , { <int> , <int> , <int> } , { <int> , <int> , <int> } } ; } @Parameter ( <int> ) public int firstSummand ; @Parameter ( <int> ) public int secondSummand ; @Parameter ( <int> ) public int sum ; @Test public void test ( ) { assertEquals ( sum , firstSummand + secondSummand ) ; } } @Test public void runsEveryTestOfArray ( ) { Result result = JUnitCore . runClasses ( AdditionTestWithArray . class ) ; assertEquals ( <int> , result . getRunCount ( ) ) ; } @RunWith ( Parameterized . class ) static public class SingleArgumentTestWithArray { @Parameters public static Object [ ] data ( ) { return new Object [ ] { <str> , <str> } ; } public SingleArgumentTestWithArray ( Object argument ) { } @Test public void aTest ( ) { } } @Test public void runsForEverySingleArgumentOfArray ( ) { Result result = JUnitCore . runClasses ( SingleArgumentTestWithArray . class ) ; assertEquals ( <int> , result . getRunCount ( ) ) ; } @RunWith ( Parameterized . class ) static public class SingleArgumentTestWithIterable { @Parameters public static Iterable < ? extends Object > data ( ) { return asList ( <str> , <str> ) ; } public SingleArgumentTestWithIterable ( Object argument ) { } @Test public void aTest ( ) { } } @Test public void runsForEverySingleArgumentOfIterable ( ) { Result result = JUnitCore . runClasses ( SingleArgumentTestWithIterable . class ) ; assertEquals ( <int> , result . getRunCount ( ) ) ; } static public class ExceptionThrowingRunnerFactory implements ParametersRunnerFactory { public Runner createRunnerForTestWithParameters ( TestWithParameters test ) throws InitializationError { throw new InitializationError ( <str> ) ; } } @RunWith ( Parameterized . class ) @UseParametersRunnerFactory ( ExceptionThrowingRunnerFactory . class ) static public class TestWithUseParametersRunnerFactoryAnnotation { @Parameters public static Iterable < ? extends Object > data ( ) { return asList ( <str> ) ; } public TestWithUseParametersRunnerFactoryAnnotation ( Object argument ) { } @Test public void aTest ( ) { } } @Test public void usesParametersRunnerFactoryThatWasSpecifiedByAnnotation ( ) { assertTestCreatesSingleFailureWithMessage ( TestWithUseParametersRunnerFactoryAnnotation . class , <str> ) ; } private void assertTestCreatesSingleFailureWithMessage ( Class < ? > test , String message ) { Result result = JUnitCore . runClasses ( test ) ; assertEquals ( <int> , result . getFailures ( ) . size ( ) ) ; assertEquals ( message , result . getFailures ( ) . get ( <int> ) . getMessage ( ) ) ; } @RunWith ( Parameterized . class ) @UseParametersRunnerFactory ( ExceptionThrowingRunnerFactory . class ) public static abstract class UseParameterizedFactoryAbstractTest { @Parameters public static Iterable < ? extends Object > data ( ) { return asList ( <str> ) ; } } public static class UseParameterizedFactoryTest extends UseParameterizedFactoryAbstractTest { public UseParameterizedFactoryTest ( String parameter ) { } @Test public void parameterizedTest ( ) { } } @Test public void usesParametersRunnerFactoryThatWasSpecifiedByAnnotationInSuperClass ( ) { assertTestCreatesSingleFailureWithMessage ( UseParameterizedFactoryTest . class , <str> ) ; } } 

package com . google . common . xml ; import static com . google . common . escape . testing . EscaperAsserts . assertEscaping ; import static com . google . common . escape . testing . EscaperAsserts . assertUnescaped ; import com . google . common . annotations . GwtCompatible ; import com . google . common . escape . CharEscaper ; import junit . framework . TestCase ; @GwtCompatible public class XmlEscapersTest extends TestCase { public void testXmlContentEscaper ( ) throws Exception { CharEscaper xmlContentEscaper = ( CharEscaper ) XmlEscapers . xmlContentEscaper ( ) ; assertBasicXmlEscaper ( xmlContentEscaper , false , false ) ; assertEquals ( <str> , xmlContentEscaper . escape ( <str> ) ) ; assertEquals ( <str> , xmlContentEscaper . escape ( <str> ) ) ; } public void testXmlAttributeEscaper ( ) throws Exception { CharEscaper xmlAttributeEscaper = ( CharEscaper ) XmlEscapers . xmlAttributeEscaper ( ) ; assertBasicXmlEscaper ( xmlAttributeEscaper , true , true ) ; assertEquals ( <str> , xmlAttributeEscaper . escape ( <str> ) ) ; assertEquals ( <str> , xmlAttributeEscaper . escape ( <str> ) ) ; assertEquals ( <str> , xmlAttributeEscaper . escape ( <str> ) ) ; assertEquals ( <str> , xmlAttributeEscaper . escape ( <str> ) ) ; } static void assertBasicXmlEscaper ( CharEscaper xmlEscaper , boolean shouldEscapeQuotes , boolean shouldEscapeWhitespaceChars ) { assertEquals ( <str> , xmlEscaper . escape ( <str> ) ) ; assertEquals ( <str> , xmlEscaper . escape ( <str> ) ) ; assertEquals ( <str> , xmlEscaper . escape ( <str> ) ) ; assertEquals ( <str> , xmlEscaper . escape ( <str> ) ) ; assertEquals ( <str> , xmlEscaper . escape ( <str> ) ) ; String s = <str> + <str> + <str> + <str> ; assertEquals ( s , xmlEscaper . escape ( s ) ) ; for ( char ch = <int> ; ch < <hex> ; ch + + ) { if ( ch = = <str> | | ch = = <str> | | ch = = <str> ) { if ( shouldEscapeWhitespaceChars ) { assertEscaping ( xmlEscaper , <str> + Integer . toHexString ( ch ) . toUpperCase ( ) + <str> , ch ) ; } else { assertUnescaped ( xmlEscaper , ch ) ; } } else { assertEscaping ( xmlEscaper , <str> , ch ) ; } } for ( char ch = <hex> ; ch < = <hex> ; ch + + ) { if ( ch = = <str> ) { assertEscaping ( xmlEscaper , <str> , ch ) ; } else if ( ch = = <str> ) { assertEscaping ( xmlEscaper , <str> , ch ) ; } else if ( ch = = <str> ) { assertEscaping ( xmlEscaper , <str> , ch ) ; } else if ( shouldEscapeQuotes & & ch = = <str> ) { assertEscaping ( xmlEscaper , <str> , ch ) ; } else if ( shouldEscapeQuotes & & ch = = <str> ) { assertEscaping ( xmlEscaper , <str> , ch ) ; } else { String input = String . valueOf ( ch ) ; String escaped = xmlEscaper . escape ( input ) ; assertEquals ( <str> + Integer . toString ( ch , <int> ) + <str> , input , escaped ) ; } } assertEscaping ( xmlEscaper , <str> , <str> ) ; assertEscaping ( xmlEscaper , <str> , <str> ) ; assertEquals ( <str> , <str> , xmlEscaper . escape ( <str> ) ) ; assertEquals ( <str> , <str> , xmlEscaper . escape ( <str> ) ) ; } } 

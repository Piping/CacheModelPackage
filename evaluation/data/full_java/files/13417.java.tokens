package org . gradle . api . plugins . jetty . internal ; import java . io . File ; import java . io . IOException ; import java . lang . reflect . Method ; import java . net . URL ; import java . net . URLClassLoader ; import java . util . Iterator ; import java . util . List ; import org . mortbay . jetty . plus . annotation . InjectionCollection ; import org . mortbay . jetty . plus . annotation . LifeCycleCallbackCollection ; import org . mortbay . jetty . plus . annotation . RunAsCollection ; import org . mortbay . jetty . plus . webapp . Configuration ; import org . mortbay . jetty . servlet . FilterHolder ; import org . mortbay . jetty . servlet . ServletHolder ; import org . mortbay . jetty . webapp . WebAppContext ; import org . mortbay . jetty . webapp . WebAppClassLoader ; import org . mortbay . log . Log ; import org . mortbay . util . LazyList ; public class JettyConfiguration extends Configuration { private List < File > classPathFiles ; private File webXmlFile ; public JettyConfiguration ( ) { super ( ) ; } public void setClassPathConfiguration ( List < File > classPathFiles ) { this . classPathFiles = classPathFiles ; } public void setWebXml ( File webXmlFile ) { this . webXmlFile = webXmlFile ; } public void configureClassLoader ( ) throws Exception { if ( classPathFiles ! = null ) { Log . debug ( <str> ) ; for ( File classPathFile : classPathFiles ) { ( ( WebAppClassLoader ) getWebAppContext ( ) . getClassLoader ( ) ) . addClassPath ( classPathFile . getCanonicalPath ( ) ) ; } if ( Log . isDebugEnabled ( ) ) { Log . debug ( <str> + LazyList . array2List ( ( ( URLClassLoader ) getWebAppContext ( ) . getClassLoader ( ) ) . getURLs ( ) ) ) ; } } else { super . configureClassLoader ( ) ; } } protected URL findWebXml ( ) throws IOException { if ( webXmlFile ! = null & & webXmlFile . exists ( ) ) { return webXmlFile . toURI ( ) . toURL ( ) ; } Log . debug ( <str> ) ; return super . findWebXml ( ) ; } public void parseAnnotations ( ) throws Exception { String v = System . getProperty ( <str> ) ; String [ ] version = v . split ( <str> ) ; if ( version = = null ) { Log . info ( <str> ) ; return ; } int major = Integer . parseInt ( version [ <int> ] ) ; int minor = Integer . parseInt ( version [ <int> ] ) ; if ( ( major > = <int> ) & & ( minor > = <int> ) ) { Class < ? > annotationParserClass = Thread . currentThread ( ) . getContextClassLoader ( ) . loadClass ( <str> ) ; Method parseAnnotationsMethod = annotationParserClass . getMethod ( <str> , WebAppContext . class , Class . class , RunAsCollection . class , InjectionCollection . class , LifeCycleCallbackCollection . class ) ; Iterator itor = LazyList . iterator ( _servlets ) ; while ( itor . hasNext ( ) ) { ServletHolder holder = ( ServletHolder ) itor . next ( ) ; Class servlet = getWebAppContext ( ) . loadClass ( holder . getClassName ( ) ) ; parseAnnotationsMethod . invoke ( null , getWebAppContext ( ) , servlet , _runAsCollection , _injections , _callbacks ) ; } itor = LazyList . iterator ( _filters ) ; while ( itor . hasNext ( ) ) { FilterHolder holder = ( FilterHolder ) itor . next ( ) ; Class filter = getWebAppContext ( ) . loadClass ( holder . getClassName ( ) ) ; parseAnnotationsMethod . invoke ( null , getWebAppContext ( ) , filter , null , _injections , _callbacks ) ; } itor = LazyList . iterator ( _listeners ) ; while ( itor . hasNext ( ) ) { Object listener = itor . next ( ) ; parseAnnotationsMethod . invoke ( null , getWebAppContext ( ) , listener . getClass ( ) , null , _injections , _callbacks ) ; } } else { Log . info ( <str> ) ; } } } 

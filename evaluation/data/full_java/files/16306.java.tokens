package org . gradle . wrapper ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . Formatter ; import java . util . Properties ; public class WrapperExecutor { public static final String DISTRIBUTION_URL_PROPERTY = <str> ; public static final String DISTRIBUTION_BASE_PROPERTY = <str> ; public static final String DISTRIBUTION_PATH_PROPERTY = <str> ; public static final String DISTRIBUTION_SHA_256_SUM = <str> ; public static final String ZIP_STORE_BASE_PROPERTY = <str> ; public static final String ZIP_STORE_PATH_PROPERTY = <str> ; private final Properties properties ; private final File propertiesFile ; private final Appendable warningOutput ; private final WrapperConfiguration config = new WrapperConfiguration ( ) ; public static WrapperExecutor forProjectDirectory ( File projectDir , Appendable warningOutput ) { return new WrapperExecutor ( new File ( projectDir , <str> ) , new Properties ( ) , warningOutput ) ; } public static WrapperExecutor forWrapperPropertiesFile ( File propertiesFile , Appendable warningOutput ) { if ( ! propertiesFile . exists ( ) ) { throw new RuntimeException ( String . format ( <str> , propertiesFile ) ) ; } return new WrapperExecutor ( propertiesFile , new Properties ( ) , warningOutput ) ; } WrapperExecutor ( File propertiesFile , Properties properties , Appendable warningOutput ) { this . properties = properties ; this . propertiesFile = propertiesFile ; this . warningOutput = warningOutput ; if ( propertiesFile . exists ( ) ) { try { loadProperties ( propertiesFile , properties ) ; config . setDistribution ( prepareDistributionUri ( ) ) ; config . setDistributionBase ( getProperty ( DISTRIBUTION_BASE_PROPERTY , config . getDistributionBase ( ) ) ) ; config . setDistributionPath ( getProperty ( DISTRIBUTION_PATH_PROPERTY , config . getDistributionPath ( ) ) ) ; config . setDistributionSha256Sum ( getProperty ( DISTRIBUTION_SHA_256_SUM , config . getDistributionSha256Sum ( ) , false ) ) ; config . setZipBase ( getProperty ( ZIP_STORE_BASE_PROPERTY , config . getZipBase ( ) ) ) ; config . setZipPath ( getProperty ( ZIP_STORE_PATH_PROPERTY , config . getZipPath ( ) ) ) ; } catch ( Exception e ) { throw new RuntimeException ( String . format ( <str> , propertiesFile ) , e ) ; } } } private URI prepareDistributionUri ( ) throws URISyntaxException { URI source = readDistroUrl ( ) ; if ( source . getScheme ( ) = = null ) { return new File ( propertiesFile . getParentFile ( ) , source . getSchemeSpecificPart ( ) ) . toURI ( ) ; } else { return source ; } } private URI readDistroUrl ( ) throws URISyntaxException { if ( properties . getProperty ( DISTRIBUTION_URL_PROPERTY ) ! = null ) { return new URI ( getProperty ( DISTRIBUTION_URL_PROPERTY ) ) ; } return readDistroUrlDeprecatedWay ( ) ; } private URI readDistroUrlDeprecatedWay ( ) throws URISyntaxException { String distroUrl = null ; try { distroUrl = getProperty ( <str> ) + <str> + getProperty ( <str> ) + <str> + getProperty ( <str> ) + <str> + getProperty ( <str> ) + <str> ; Formatter formatter = new Formatter ( ) ; formatter . format ( <str> , propertiesFile , DISTRIBUTION_URL_PROPERTY ) ; warningOutput . append ( formatter . toString ( ) ) ; } catch ( Exception e ) { reportMissingProperty ( DISTRIBUTION_URL_PROPERTY ) ; } return new URI ( distroUrl ) ; } private static void loadProperties ( File propertiesFile , Properties properties ) throws IOException { InputStream inStream = new FileInputStream ( propertiesFile ) ; try { properties . load ( inStream ) ; } finally { inStream . close ( ) ; } } public URI getDistribution ( ) { return config . getDistribution ( ) ; } public WrapperConfiguration getConfiguration ( ) { return config ; } public void execute ( String [ ] args , Install install , BootstrapMainStarter bootstrapMainStarter ) throws Exception { File gradleHome = install . createDist ( config ) ; bootstrapMainStarter . start ( args , gradleHome ) ; } private String getProperty ( String propertyName ) { return getProperty ( propertyName , null , true ) ; } private String getProperty ( String propertyName , String defaultValue ) { return getProperty ( propertyName , defaultValue , true ) ; } private String getProperty ( String propertyName , String defaultValue , boolean required ) { String value = properties . getProperty ( propertyName ) ; if ( value ! = null ) { return value ; } if ( defaultValue ! = null ) { return defaultValue ; } if ( required ) { return reportMissingProperty ( propertyName ) ; } else { return null ; } } private String reportMissingProperty ( String propertyName ) { throw new RuntimeException ( String . format ( <str> , propertyName , propertiesFile ) ) ; } } 

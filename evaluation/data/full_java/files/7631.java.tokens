package org . elasticsearch . snapshots ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . action . ShardOperationFailedException ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . snapshots . IndexShardSnapshotFailedException ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; public class SnapshotShardFailure implements ShardOperationFailedException { private String index ; private int shardId ; private String reason ; @Nullable private String nodeId ; private RestStatus status ; private SnapshotShardFailure ( ) { } public SnapshotShardFailure ( @Nullable String nodeId , String index , int shardId , String reason ) { this . nodeId = nodeId ; this . index = index ; this . shardId = shardId ; this . reason = reason ; status = RestStatus . INTERNAL_SERVER_ERROR ; } @Override public String index ( ) { return this . index ; } @Override public int shardId ( ) { return this . shardId ; } @Override public String reason ( ) { return this . reason ; } @Override public RestStatus status ( ) { return status ; } @Override public Throwable getCause ( ) { return new IndexShardSnapshotFailedException ( new ShardId ( index , shardId ) , reason ) ; } @Nullable public String nodeId ( ) { return nodeId ; } public static SnapshotShardFailure readSnapshotShardFailure ( StreamInput in ) throws IOException { SnapshotShardFailure exp = new SnapshotShardFailure ( ) ; exp . readFrom ( in ) ; return exp ; } @Override public void readFrom ( StreamInput in ) throws IOException { nodeId = in . readOptionalString ( ) ; index = in . readString ( ) ; shardId = in . readVInt ( ) ; reason = in . readString ( ) ; status = RestStatus . readFrom ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeOptionalString ( nodeId ) ; out . writeString ( index ) ; out . writeVInt ( shardId ) ; out . writeString ( reason ) ; RestStatus . writeTo ( out , status ) ; } @Override public String toString ( ) { return <str> + index + <str> + shardId + <str> + reason + <str> ; } public static void toXContent ( SnapshotShardFailure snapshotShardFailure , XContentBuilder builder , ToXContent . Params params ) throws IOException { builder . startObject ( ) ; snapshotShardFailure . toXContent ( builder , params ) ; builder . endObject ( ) ; } public static SnapshotShardFailure fromXContent ( XContentParser parser ) throws IOException { SnapshotShardFailure snapshotShardFailure = new SnapshotShardFailure ( ) ; XContentParser . Token token = parser . currentToken ( ) ; if ( token = = XContentParser . Token . START_OBJECT ) { while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { String currentFieldName = parser . currentName ( ) ; token = parser . nextToken ( ) ; if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) ) { snapshotShardFailure . index = parser . text ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { snapshotShardFailure . nodeId = parser . text ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { snapshotShardFailure . reason = parser . text ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { snapshotShardFailure . shardId = parser . intValue ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { snapshotShardFailure . status = RestStatus . valueOf ( parser . text ( ) ) ; } else { throw new ElasticsearchParseException ( <str> , currentFieldName ) ; } } } else { throw new ElasticsearchParseException ( <str> , token ) ; } } } else { throw new ElasticsearchParseException ( <str> , token ) ; } return snapshotShardFailure ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . field ( <str> , index ) ; builder . field ( <str> , shardId ) ; builder . field ( <str> , reason ) ; if ( nodeId ! = null ) { builder . field ( <str> , nodeId ) ; } builder . field ( <str> , status . name ( ) ) ; return builder ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanOrQuery ; import org . apache . lucene . search . spans . SpanQuery ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . Objects ; public class SpanOrQueryBuilder extends AbstractQueryBuilder < SpanOrQueryBuilder > implements SpanQueryBuilder < SpanOrQueryBuilder > { public static final String NAME = <str> ; private final List < SpanQueryBuilder > clauses = new ArrayList < > ( ) ; static final SpanOrQueryBuilder PROTOTYPE = new SpanOrQueryBuilder ( SpanTermQueryBuilder . PROTOTYPE ) ; public SpanOrQueryBuilder ( SpanQueryBuilder initialClause ) { if ( initialClause = = null ) { throw new IllegalArgumentException ( <str> ) ; } clauses . add ( initialClause ) ; } public SpanOrQueryBuilder clause ( SpanQueryBuilder clause ) { if ( clause = = null ) { throw new IllegalArgumentException ( <str> ) ; } clauses . add ( clause ) ; return this ; } public List < SpanQueryBuilder > clauses ( ) { return this . clauses ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . startArray ( SpanOrQueryParser . CLAUSES_FIELD . getPreferredName ( ) ) ; for ( SpanQueryBuilder clause : clauses ) { clause . toXContent ( builder , params ) ; } builder . endArray ( ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { SpanQuery [ ] spanQueries = new SpanQuery [ clauses . size ( ) ] ; for ( int i = <int> ; i < clauses . size ( ) ; i + + ) { Query query = clauses . get ( i ) . toQuery ( context ) ; assert query instanceof SpanQuery ; spanQueries [ i ] = ( SpanQuery ) query ; } return new SpanOrQuery ( spanQueries ) ; } @Override protected SpanOrQueryBuilder doReadFrom ( StreamInput in ) throws IOException { List < QueryBuilder > clauses = readQueries ( in ) ; SpanOrQueryBuilder queryBuilder = new SpanOrQueryBuilder ( ( SpanQueryBuilder ) clauses . get ( <int> ) ) ; for ( int i = <int> ; i < clauses . size ( ) ; i + + ) { queryBuilder . clauses . add ( ( SpanQueryBuilder ) clauses . get ( i ) ) ; } return queryBuilder ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { writeQueries ( out , clauses ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( clauses ) ; } @Override protected boolean doEquals ( SpanOrQueryBuilder other ) { return Objects . equals ( clauses , other . clauses ) ; } @Override public String getWriteableName ( ) { return NAME ; } } 

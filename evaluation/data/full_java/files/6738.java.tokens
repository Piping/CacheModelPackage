package org . elasticsearch . index . shard ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class DocsStats implements Streamable , ToXContent { long count = <int> ; long deleted = <int> ; public DocsStats ( ) { } public DocsStats ( long count , long deleted ) { this . count = count ; this . deleted = deleted ; } public void add ( DocsStats docsStats ) { if ( docsStats = = null ) { return ; } count + = docsStats . count ; deleted + = docsStats . deleted ; } public long getCount ( ) { return this . count ; } public long getDeleted ( ) { return this . deleted ; } public static DocsStats readDocStats ( StreamInput in ) throws IOException { DocsStats docsStats = new DocsStats ( ) ; docsStats . readFrom ( in ) ; return docsStats ; } @Override public void readFrom ( StreamInput in ) throws IOException { count = in . readVLong ( ) ; deleted = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVLong ( count ) ; out . writeVLong ( deleted ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . DOCS ) ; builder . field ( Fields . COUNT , count ) ; builder . field ( Fields . DELETED , deleted ) ; builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString DOCS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString COUNT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString DELETED = new XContentBuilderString ( <str> ) ; } } 

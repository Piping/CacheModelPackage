package org . gradle . internal . exceptions ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . GradleException ; import org . gradle . groovy . scripts . ScriptSource ; import org . gradle . initialization . BuildClientMetaData ; import org . gradle . logging . StyledTextOutput ; import org . gradle . util . TreeVisitor ; import java . util . ArrayList ; import java . util . List ; public class LocationAwareException extends GradleException implements FailureResolutionAware { private final String sourceDisplayName ; private final Integer lineNumber ; public LocationAwareException ( Throwable cause , ScriptSource source , Integer lineNumber ) { this ( cause , source ! = null ? source . getDisplayName ( ) : null , lineNumber ) ; } public LocationAwareException ( Throwable cause , String sourceDisplayName , Integer lineNumber ) { this . sourceDisplayName = sourceDisplayName ; this . lineNumber = lineNumber ; initCause ( cause ) ; } public String getSourceDisplayName ( ) { return sourceDisplayName ; } public String getLocation ( ) { if ( sourceDisplayName = = null ) { return null ; } String sourceMsg = StringUtils . capitalize ( sourceDisplayName ) ; if ( lineNumber = = null ) { return sourceMsg ; } return String . format ( <str> , sourceMsg , lineNumber ) ; } public Integer getLineNumber ( ) { return lineNumber ; } public String getMessage ( ) { String location = getLocation ( ) ; String message = getCause ( ) . getMessage ( ) ; if ( location = = null & & message = = null ) { return null ; } if ( location = = null ) { return message ; } if ( message = = null ) { return location ; } return String . format ( <str> , location , message ) ; } public void appendResolution ( StyledTextOutput output , BuildClientMetaData clientMetaData ) { if ( getCause ( ) instanceof FailureResolutionAware ) { FailureResolutionAware resolutionAware = ( FailureResolutionAware ) getCause ( ) ; resolutionAware . appendResolution ( output , clientMetaData ) ; } } public List < Throwable > getReportableCauses ( ) { final List < Throwable > causes = new ArrayList < Throwable > ( ) ; visitCauses ( getCause ( ) , new TreeVisitor < Throwable > ( ) { @Override public void node ( Throwable node ) { causes . add ( node ) ; } } ) ; return causes ; } public void visitReportableCauses ( TreeVisitor < ? super Throwable > visitor ) { visitor . node ( this ) ; visitCauses ( getCause ( ) , visitor ) ; } private void visitCauses ( Throwable t , TreeVisitor < ? super Throwable > visitor ) { if ( t instanceof MultiCauseException ) { MultiCauseException multiCauseException = ( MultiCauseException ) t ; List < ? extends Throwable > causes = multiCauseException . getCauses ( ) ; if ( ! causes . isEmpty ( ) ) { visitor . startChildren ( ) ; for ( Throwable cause : causes ) { visitor . node ( cause ) ; if ( cause . getClass ( ) . getAnnotation ( Contextual . class ) ! = null ) { visitCauses ( cause , visitor ) ; } } visitor . endChildren ( ) ; } return ; } if ( t . getCause ( ) ! = null ) { visitor . startChildren ( ) ; Throwable next = findNearestContextualCause ( t ) ; if ( next ! = null ) { visitor . node ( next ) ; visitCauses ( next , visitor ) ; } else { visitor . node ( t . getCause ( ) ) ; } visitor . endChildren ( ) ; } } private Throwable findNearestContextualCause ( Throwable t ) { if ( t . getCause ( ) = = null ) { return null ; } Throwable cause = t . getCause ( ) ; if ( cause . getClass ( ) . getAnnotation ( Contextual . class ) ! = null ) { return cause ; } return findNearestContextualCause ( cause ) ; } } 

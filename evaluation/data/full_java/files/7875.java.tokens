package org . elasticsearch . cluster . routing . allocation . decider ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Set ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . TEST , numDataNodes = <int> ) public class EnableAllocationDeciderIT extends ESIntegTestCase { public void testEnableRebalance ( ) throws InterruptedException { final String firstNode = internalCluster ( ) . startNode ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( settingsBuilder ( ) . put ( EnableAllocationDecider . CLUSTER_ROUTING_REBALANCE_ENABLE , EnableAllocationDecider . Rebalance . NONE ) ) . get ( ) ; final int numShards = <int> ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , numShards ) ) ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , numShards ) ) ) ; ensureGreen ( ) ; assertAllShardsOnNodes ( <str> , firstNode ) ; assertAllShardsOnNodes ( <str> , firstNode ) ; final String secondNode = internalCluster ( ) . startNode ( ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( EnableAllocationDecider . INDEX_ROUTING_REBALANCE_ENABLE , EnableAllocationDecider . Rebalance . NONE ) ) . get ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . get ( ) ; ensureGreen ( ) ; assertAllShardsOnNodes ( <str> , firstNode ) ; assertAllShardsOnNodes ( <str> , firstNode ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( EnableAllocationDecider . INDEX_ROUTING_REBALANCE_ENABLE , randomBoolean ( ) ? EnableAllocationDecider . Rebalance . PRIMARIES : EnableAllocationDecider . Rebalance . ALL ) ) . get ( ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . get ( ) ; ensureGreen ( <str> ) ; Set < String > test = assertAllShardsOnNodes ( <str> , firstNode , secondNode ) ; assertThat ( <str> , test . size ( ) , equalTo ( <int> ) ) ; client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( settingsBuilder ( ) . put ( EnableAllocationDecider . CLUSTER_ROUTING_REBALANCE_ENABLE , randomBoolean ( ) ? EnableAllocationDecider . Rebalance . PRIMARIES : EnableAllocationDecider . Rebalance . ALL ) ) . get ( ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . cluster ( ) . prepareReroute ( ) . get ( ) ; ensureGreen ( <str> ) ; Set < String > test_1 = assertAllShardsOnNodes ( <str> , firstNode , secondNode ) ; assertThat ( <str> , test_1 . size ( ) , equalTo ( <int> ) ) ; test = assertAllShardsOnNodes ( <str> , firstNode , secondNode ) ; assertThat ( <str> , test . size ( ) , equalTo ( <int> ) ) ; } } 

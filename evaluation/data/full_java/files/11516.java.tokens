package org . gradle . api . internal . file . collections ; import org . gradle . api . file . DirectoryTree ; import org . gradle . api . file . RelativePath ; import org . gradle . api . internal . file . DefaultFileTreeElement ; import org . gradle . internal . nativeintegration . filesystem . FileSystem ; import java . io . File ; import java . util . regex . Pattern ; public abstract class DirectoryTrees { private static final String QUOTED_SEPARATOR = Pattern . quote ( File . separator ) ; private DirectoryTrees ( ) { } public static boolean contains ( FileSystem fileSystem , DirectoryTree tree , File file ) { String prefix = tree . getDir ( ) . getAbsolutePath ( ) + File . separator ; if ( ! file . getAbsolutePath ( ) . startsWith ( prefix ) ) { return false ; } String [ ] partsUnderDir = file . getAbsolutePath ( ) . substring ( prefix . length ( ) ) . split ( QUOTED_SEPARATOR ) ; RelativePath path = new RelativePath ( true , partsUnderDir ) ; return tree . getPatterns ( ) . getAsSpec ( ) . isSatisfiedBy ( new DefaultFileTreeElement ( file , path , fileSystem , fileSystem ) ) ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . queries . ExtendedCommonTermsQuery ; import org . apache . lucene . search . Query ; import java . io . IOException ; import static org . elasticsearch . index . query . QueryBuilders . commonTermsQuery ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . nullValue ; public class CommonTermsQueryBuilderTests extends AbstractQueryTestCase < CommonTermsQueryBuilder > { @Override protected CommonTermsQueryBuilder doCreateTestQueryBuilder ( ) { CommonTermsQueryBuilder query ; String text = randomAsciiOfLengthBetween ( <int> , <int> ) ; if ( randomBoolean ( ) ) { query = new CommonTermsQueryBuilder ( STRING_FIELD_NAME , text ) ; } else { query = new CommonTermsQueryBuilder ( randomAsciiOfLengthBetween ( <int> , <int> ) , text ) ; } if ( randomBoolean ( ) ) { query . cutoffFrequency ( randomIntBetween ( <int> , <int> ) ) ; } if ( randomBoolean ( ) ) { query . lowFreqOperator ( randomFrom ( Operator . values ( ) ) ) ; } if ( randomBoolean ( ) ) { query . lowFreqMinimumShouldMatch ( <str> + randomIntBetween ( <int> , <int> ) ) ; } if ( randomBoolean ( ) ) { query . highFreqOperator ( randomFrom ( Operator . values ( ) ) ) ; } if ( randomBoolean ( ) ) { query . highFreqMinimumShouldMatch ( <str> + randomIntBetween ( <int> , <int> ) ) ; } if ( randomBoolean ( ) ) { query . analyzer ( randomAnalyzer ( ) ) ; } if ( randomBoolean ( ) ) { query . disableCoord ( randomBoolean ( ) ) ; } return query ; } @Override protected void doAssertLuceneQuery ( CommonTermsQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( ExtendedCommonTermsQuery . class ) ) ; ExtendedCommonTermsQuery extendedCommonTermsQuery = ( ExtendedCommonTermsQuery ) query ; assertThat ( extendedCommonTermsQuery . getHighFreqMinimumNumberShouldMatchSpec ( ) , equalTo ( queryBuilder . highFreqMinimumShouldMatch ( ) ) ) ; assertThat ( extendedCommonTermsQuery . getLowFreqMinimumNumberShouldMatchSpec ( ) , equalTo ( queryBuilder . lowFreqMinimumShouldMatch ( ) ) ) ; } public void testIllegalArguments ( ) { try { if ( randomBoolean ( ) ) { new CommonTermsQueryBuilder ( null , <str> ) ; } else { new CommonTermsQueryBuilder ( <str> , <str> ) ; } fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new CommonTermsQueryBuilder ( <str> , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String query = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; CommonTermsQueryBuilder queryBuilder = ( CommonTermsQueryBuilder ) parseQuery ( query ) ; checkGeneratedJson ( query , queryBuilder ) ; assertEquals ( query , <int> , queryBuilder . boost , <float> ) ; assertEquals ( query , <float> , queryBuilder . cutoffFrequency ( ) , <float> ) ; assertEquals ( query , Operator . OR , queryBuilder . lowFreqOperator ( ) ) ; assertEquals ( query , Operator . AND , queryBuilder . highFreqOperator ( ) ) ; assertEquals ( query , <str> , queryBuilder . value ( ) ) ; } public void testNoTermsFromQueryString ( ) throws IOException { CommonTermsQueryBuilder builder = new CommonTermsQueryBuilder ( STRING_FIELD_NAME , <str> ) ; QueryShardContext context = createShardContext ( ) ; context . setAllowUnmappedFields ( true ) ; assertNull ( builder . toQuery ( context ) ) ; } public void testCommonTermsQuery1 ( ) throws IOException { String query = copyToStringFromClasspath ( <str> ) ; Query parsedQuery = parseQuery ( query ) . toQuery ( createShardContext ( ) ) ; assertThat ( parsedQuery , instanceOf ( ExtendedCommonTermsQuery . class ) ) ; ExtendedCommonTermsQuery ectQuery = ( ExtendedCommonTermsQuery ) parsedQuery ; assertThat ( ectQuery . getHighFreqMinimumNumberShouldMatchSpec ( ) , nullValue ( ) ) ; assertThat ( ectQuery . getLowFreqMinimumNumberShouldMatchSpec ( ) , equalTo ( <str> ) ) ; } public void testCommonTermsQuery2 ( ) throws IOException { String query = copyToStringFromClasspath ( <str> ) ; Query parsedQuery = parseQuery ( query ) . toQuery ( createShardContext ( ) ) ; assertThat ( parsedQuery , instanceOf ( ExtendedCommonTermsQuery . class ) ) ; ExtendedCommonTermsQuery ectQuery = ( ExtendedCommonTermsQuery ) parsedQuery ; assertThat ( ectQuery . getHighFreqMinimumNumberShouldMatchSpec ( ) , equalTo ( <str> ) ) ; assertThat ( ectQuery . getLowFreqMinimumNumberShouldMatchSpec ( ) , equalTo ( <str> ) ) ; } public void testCommonTermsQuery3 ( ) throws IOException { String query = copyToStringFromClasspath ( <str> ) ; Query parsedQuery = parseQuery ( query ) . toQuery ( createShardContext ( ) ) ; assertThat ( parsedQuery , instanceOf ( ExtendedCommonTermsQuery . class ) ) ; ExtendedCommonTermsQuery ectQuery = ( ExtendedCommonTermsQuery ) parsedQuery ; assertThat ( ectQuery . getHighFreqMinimumNumberShouldMatchSpec ( ) , nullValue ( ) ) ; assertThat ( ectQuery . getLowFreqMinimumNumberShouldMatchSpec ( ) , equalTo ( <str> ) ) ; } public void testCommonTermsQuery4 ( ) throws IOException { boolean disableCoord = randomBoolean ( ) ; Query parsedQuery = parseQuery ( commonTermsQuery ( <str> , <str> ) . disableCoord ( disableCoord ) . buildAsBytes ( ) ) . toQuery ( createShardContext ( ) ) ; assertThat ( parsedQuery , instanceOf ( ExtendedCommonTermsQuery . class ) ) ; ExtendedCommonTermsQuery ectQuery = ( ExtendedCommonTermsQuery ) parsedQuery ; assertThat ( ectQuery . isCoordDisabled ( ) , equalTo ( disableCoord ) ) ; } } 

package org . gradle . internal . reflect ; import java . lang . reflect . Constructor ; import java . lang . reflect . InvocationTargetException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class DirectInstantiator implements Instantiator { public static final Instantiator INSTANCE = new DirectInstantiator ( ) ; public static < T > T instantiate ( Class < ? extends T > type , Object . . . params ) { return INSTANCE . newInstance ( type , params ) ; } private DirectInstantiator ( ) { } public < T > T newInstance ( Class < ? extends T > type , Object . . . params ) { try { List < Constructor < ? > > matches = new ArrayList < Constructor < ? > > ( ) ; for ( Constructor < ? > constructor : type . getConstructors ( ) ) { if ( isMatch ( constructor , params ) ) { matches . add ( constructor ) ; } } if ( matches . isEmpty ( ) ) { throw new IllegalArgumentException ( String . format ( <str> , type , Arrays . toString ( params ) ) ) ; } if ( matches . size ( ) > <int> ) { throw new IllegalArgumentException ( String . format ( <str> , type , Arrays . toString ( params ) ) ) ; } return type . cast ( matches . get ( <int> ) . newInstance ( params ) ) ; } catch ( InvocationTargetException e ) { throw new ObjectInstantiationException ( type , e . getCause ( ) ) ; } catch ( Exception e ) { throw new ObjectInstantiationException ( type , e ) ; } } private boolean isMatch ( Constructor < ? > constructor , Object . . . params ) { if ( constructor . getParameterTypes ( ) . length ! = params . length ) { return false ; } for ( int i = <int> ; i < params . length ; i + + ) { Object param = params [ i ] ; Class < ? > parameterType = constructor . getParameterTypes ( ) [ i ] ; if ( parameterType . isPrimitive ( ) ) { if ( ! JavaReflectionUtil . getWrapperTypeForPrimitiveType ( parameterType ) . isInstance ( param ) ) { return false ; } } else { if ( param ! = null & & ! parameterType . isInstance ( param ) ) { return false ; } } } return true ; } } 

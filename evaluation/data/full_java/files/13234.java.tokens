package org . gradle . ide . visualstudio . plugins ; import org . gradle . api . * ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . project . ProjectIdentifier ; import org . gradle . api . internal . resolve . ProjectModelResolver ; import org . gradle . api . tasks . Delete ; import org . gradle . api . tasks . TaskContainer ; import org . gradle . ide . visualstudio . VisualStudioProject ; import org . gradle . ide . visualstudio . VisualStudioSolution ; import org . gradle . ide . visualstudio . internal . DefaultVisualStudioExtension ; import org . gradle . ide . visualstudio . internal . DefaultVisualStudioProject ; import org . gradle . ide . visualstudio . internal . VisualStudioExtensionInternal ; import org . gradle . ide . visualstudio . internal . VisualStudioProjectConfiguration ; import org . gradle . ide . visualstudio . tasks . GenerateFiltersFileTask ; import org . gradle . ide . visualstudio . tasks . GenerateProjectFileTask ; import org . gradle . ide . visualstudio . tasks . GenerateSolutionFileTask ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . model . Model ; import org . gradle . model . ModelMap ; import org . gradle . model . Mutate ; import org . gradle . model . RuleSource ; import org . gradle . nativeplatform . NativeBinarySpec ; import org . gradle . nativeplatform . NativeComponentSpec ; import org . gradle . nativeplatform . plugins . NativeComponentModelPlugin ; @Incubating public class VisualStudioPlugin implements Plugin < Project > { public void apply ( Project project ) { project . getPluginManager ( ) . apply ( NativeComponentModelPlugin . class ) ; } static class Rules extends RuleSource { @Model public static VisualStudioExtensionInternal visualStudio ( ServiceRegistry serviceRegistry ) { Instantiator instantiator = serviceRegistry . get ( Instantiator . class ) ; ProjectModelResolver projectModelResolver = serviceRegistry . get ( ProjectModelResolver . class ) ; FileResolver fileResolver = serviceRegistry . get ( FileResolver . class ) ; return instantiator . newInstance ( DefaultVisualStudioExtension . class , instantiator , projectModelResolver , fileResolver ) ; } @Mutate public static void includeBuildFileInProject ( VisualStudioExtensionInternal visualStudio , final ProjectIdentifier projectIdentifier ) { visualStudio . getProjects ( ) . all ( new Action < VisualStudioProject > ( ) { public void execute ( VisualStudioProject project ) { if ( projectIdentifier . getBuildFile ( ) ! = null ) { ( ( DefaultVisualStudioProject ) project ) . addSourceFile ( projectIdentifier . getBuildFile ( ) ) ; } } } ) ; } @Mutate @SuppressWarnings ( <str> ) public static void createVisualStudioModelForBinaries ( VisualStudioExtensionInternal visualStudioExtension , ModelMap < NativeBinarySpec > nativeBinaries ) { for ( NativeBinarySpec binary : nativeBinaries ) { VisualStudioProjectConfiguration configuration = visualStudioExtension . getProjectRegistry ( ) . addProjectConfiguration ( binary ) ; if ( binary . isBuildable ( ) ) { DefaultVisualStudioProject visualStudioProject = configuration . getProject ( ) ; visualStudioExtension . getSolutionRegistry ( ) . addSolution ( visualStudioProject ) ; } } } @Mutate @SuppressWarnings ( <str> ) public static void createTasksForVisualStudio ( TaskContainer tasks , VisualStudioExtensionInternal visualStudioExtension ) { for ( VisualStudioProject vsProject : visualStudioExtension . getProjects ( ) ) { vsProject . builtBy ( createProjectsFileTask ( tasks , vsProject ) ) ; vsProject . builtBy ( createFiltersFileTask ( tasks , vsProject ) ) ; } for ( VisualStudioSolution vsSolution : visualStudioExtension . getSolutions ( ) ) { Task solutionTask = tasks . create ( vsSolution . getName ( ) + <str> ) ; solutionTask . setDescription ( String . format ( <str> , vsSolution . getName ( ) ) ) ; vsSolution . setBuildTask ( solutionTask ) ; vsSolution . builtBy ( createSolutionTask ( tasks , vsSolution ) ) ; NativeComponentSpec component = vsSolution . getComponent ( ) ; Task lifecycleTask = tasks . maybeCreate ( component . getName ( ) + <str> ) ; lifecycleTask . dependsOn ( vsSolution ) ; lifecycleTask . setGroup ( <str> ) ; lifecycleTask . setDescription ( String . format ( <str> , component ) ) ; } addCleanTask ( tasks ) ; } private static void addCleanTask ( TaskContainer tasks ) { Delete cleanTask = tasks . create ( <str> , Delete . class ) ; for ( Task task : tasks . withType ( GenerateSolutionFileTask . class ) ) { cleanTask . delete ( task . getOutputs ( ) . getFiles ( ) ) ; } for ( Task task : tasks . withType ( GenerateFiltersFileTask . class ) ) { cleanTask . delete ( task . getOutputs ( ) . getFiles ( ) ) ; } for ( Task task : tasks . withType ( GenerateProjectFileTask . class ) ) { cleanTask . delete ( task . getOutputs ( ) . getFiles ( ) ) ; } cleanTask . setGroup ( <str> ) ; cleanTask . setDescription ( <str> ) ; } private static Task createSolutionTask ( TaskContainer tasks , VisualStudioSolution solution ) { GenerateSolutionFileTask solutionFileTask = tasks . create ( solution . getName ( ) + <str> , GenerateSolutionFileTask . class ) ; solutionFileTask . setVisualStudioSolution ( solution ) ; return solutionFileTask ; } private static Task createProjectsFileTask ( TaskContainer tasks , VisualStudioProject vsProject ) { GenerateProjectFileTask task = tasks . create ( vsProject . getName ( ) + <str> , GenerateProjectFileTask . class ) ; task . setVisualStudioProject ( vsProject ) ; task . initGradleCommand ( ) ; return task ; } private static Task createFiltersFileTask ( TaskContainer tasks , VisualStudioProject vsProject ) { GenerateFiltersFileTask task = tasks . create ( vsProject . getName ( ) + <str> , GenerateFiltersFileTask . class ) ; task . setVisualStudioProject ( vsProject ) ; return task ; } } } 

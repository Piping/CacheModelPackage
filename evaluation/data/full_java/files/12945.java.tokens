package org . gradle . api . tasks . diagnostics ; import org . gradle . api . Project ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . ConfigurationContainer ; import org . gradle . api . internal . tasks . options . Option ; import org . gradle . api . tasks . diagnostics . internal . DependencyReportRenderer ; import org . gradle . api . tasks . diagnostics . internal . ReportRenderer ; import org . gradle . api . tasks . diagnostics . internal . dependencies . AsciiDependencyReportRenderer ; import java . io . IOException ; import java . util . * ; abstract public class AbstractDependencyReportTask extends AbstractReportTask { private DependencyReportRenderer renderer = new AsciiDependencyReportRenderer ( ) ; private Set < Configuration > configurations ; public ReportRenderer getRenderer ( ) { return renderer ; } public void setRenderer ( DependencyReportRenderer renderer ) { this . renderer = renderer ; } public void generate ( Project project ) throws IOException { SortedSet < Configuration > sortedConfigurations = new TreeSet < Configuration > ( new Comparator < Configuration > ( ) { public int compare ( Configuration conf1 , Configuration conf2 ) { return conf1 . getName ( ) . compareTo ( conf2 . getName ( ) ) ; } } ) ; sortedConfigurations . addAll ( getReportConfigurations ( ) ) ; for ( Configuration configuration : sortedConfigurations ) { renderer . startConfiguration ( configuration ) ; renderer . render ( configuration ) ; renderer . completeConfiguration ( configuration ) ; } } private Set < Configuration > getReportConfigurations ( ) { return configurations ! = null ? configurations : getTaskConfigurations ( ) ; } public Set < Configuration > getConfigurations ( ) { return configurations ; } public void setConfigurations ( Set < Configuration > configurations ) { this . configurations = configurations ; } @Option ( option = <str> , description = <str> ) public void setConfiguration ( String configurationName ) { this . configurations = Collections . singleton ( getTaskConfigurations ( ) . getByName ( configurationName ) ) ; } abstract public ConfigurationContainer getTaskConfigurations ( ) ; } 

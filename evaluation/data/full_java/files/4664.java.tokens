package org . eclipse . debug . ui ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . swt . SWT ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . progress . WorkbenchJob ; public abstract class AbstractLaunchConfigurationTab implements ILaunchConfigurationTab2 { private Control fControl ; private ILaunchConfigurationDialog fLaunchConfigurationDialog ; private String fErrorMessage ; private String fWarningMessage ; private String fMessage ; private boolean fDirty = true ; private Job fRereshJob ; private String fHelpContextId = null ; protected ILaunchConfigurationDialog getLaunchConfigurationDialog ( ) { return fLaunchConfigurationDialog ; } protected void updateLaunchConfigurationDialog ( ) { if ( getLaunchConfigurationDialog ( ) ! = null ) { getLaunchConfigurationDialog ( ) . updateButtons ( ) ; getLaunchConfigurationDialog ( ) . updateMessage ( ) ; } } @Override public Control getControl ( ) { return fControl ; } protected void setControl ( Control control ) { fControl = control ; } @Override public String getErrorMessage ( ) { return fErrorMessage ; } @Override public String getWarningMessage ( ) { return fWarningMessage ; } @Override public String getMessage ( ) { return fMessage ; } @Deprecated @Override public void launched ( ILaunch launch ) { } @Override public void setLaunchConfigurationDialog ( ILaunchConfigurationDialog dialog ) { fLaunchConfigurationDialog = dialog ; } protected void setErrorMessage ( String errorMessage ) { fErrorMessage = errorMessage ; } protected void setWarningMessage ( String warningMessage ) { fWarningMessage = warningMessage ; } protected void setMessage ( String message ) { fMessage = message ; } protected ILaunchManager getLaunchManager ( ) { return DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; } @Override public void dispose ( ) { } protected Shell getShell ( ) { Control control = getControl ( ) ; if ( control ! = null ) { return control . getShell ( ) ; } return null ; } protected Button createPushButton ( Composite parent , String label , Image image ) { return SWTFactory . createPushButton ( parent , label , image ) ; } protected Button createRadioButton ( Composite parent , String label ) { return SWTFactory . createRadioButton ( parent , label ) ; } protected Button createCheckButton ( Composite parent , String label ) { return SWTFactory . createCheckButton ( parent , label , null , false , <int> ) ; } @Override public boolean canSave ( ) { return true ; } @Override public boolean isValid ( ILaunchConfiguration launchConfig ) { return true ; } protected void createVerticalSpacer ( Composite comp , int colSpan ) { SWTFactory . createVerticalSpacer ( comp , colSpan ) ; } protected void createSeparator ( Composite comp , int colSpan ) { Label label = new Label ( comp , SWT . SEPARATOR | SWT . HORIZONTAL ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = colSpan ; label . setLayoutData ( gd ) ; } @Override public Image getImage ( ) { return null ; } public String getId ( ) { return null ; } protected void setAttribute ( String attribute , ILaunchConfigurationWorkingCopy configuration , boolean value , boolean defaultValue ) { if ( value = = defaultValue ) { configuration . setAttribute ( attribute , ( String ) null ) ; } else { configuration . setAttribute ( attribute , value ) ; } } protected boolean isDirty ( ) { return fDirty ; } protected void setDirty ( boolean dirty ) { fDirty = dirty ; } @Override public void activated ( ILaunchConfigurationWorkingCopy workingCopy ) { initializeFrom ( workingCopy ) ; } @Override public void deactivated ( ILaunchConfigurationWorkingCopy workingCopy ) { performApply ( workingCopy ) ; } private Job getUpdateJob ( ) { if ( fRereshJob = = null ) { fRereshJob = createUpdateJob ( ) ; fRereshJob . setSystem ( true ) ; } return fRereshJob ; } protected void scheduleUpdateJob ( ) { Job job = getUpdateJob ( ) ; job . cancel ( ) ; job . schedule ( getUpdateJobDelay ( ) ) ; } protected Job createUpdateJob ( ) { return new WorkbenchJob ( getControl ( ) . getDisplay ( ) , <str> ) { @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( ! getControl ( ) . isDisposed ( ) ) { updateLaunchConfigurationDialog ( ) ; } return Status . OK_STATUS ; } @Override public boolean shouldRun ( ) { return ! getControl ( ) . isDisposed ( ) ; } } ; } protected long getUpdateJobDelay ( ) { return <int> ; } public void setHelpContextId ( String id ) { fHelpContextId = id ; } public String getHelpContextId ( ) { return fHelpContextId ; } } 

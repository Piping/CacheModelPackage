package com . google . common . collect . testing ; import static java . util . Collections . sort ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableSortedMap ; import com . google . common . collect . Lists ; import com . google . common . collect . Ordering ; import com . google . common . collect . testing . Helpers . NullsBeforeTwo ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import com . google . common . testing . SerializableTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . NavigableMap ; import java . util . SortedMap ; public class SafeTreeMapTest extends TestCase { public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( SafeTreeMapTest . class ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { NavigableMap < String , String > map = new SafeTreeMap < String , String > ( Ordering . natural ( ) ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return map ; } } ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . SERIALIZABLE , MapFeature . ALLOWS_NULL_VALUES , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , MapFeature . GENERAL_PURPOSE ) . named ( <str> ) . createTestSuite ( ) ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { NavigableMap < String , String > map = new SafeTreeMap < String , String > ( NullsBeforeTwo . INSTANCE ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return map ; } @Override public Iterable < Entry < String , String > > order ( List < Entry < String , String > > insertionOrder ) { sort ( insertionOrder , Helpers . < String , String > entryComparator ( NullsBeforeTwo . INSTANCE ) ) ; return insertionOrder ; } } ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , MapFeature . ALLOWS_NULL_KEYS , MapFeature . ALLOWS_NULL_VALUES , MapFeature . ALLOWS_ANY_NULL_QUERIES , MapFeature . GENERAL_PURPOSE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . SERIALIZABLE ) . named ( <str> ) . createTestSuite ( ) ) ; return suite ; } @GwtIncompatible ( <str> ) public void testViewSerialization ( ) { Map < String , Integer > map = ImmutableSortedMap . of ( <str> , <int> , <str> , <int> , <str> , <int> ) ; SerializableTester . reserializeAndAssert ( map . entrySet ( ) ) ; SerializableTester . reserializeAndAssert ( map . keySet ( ) ) ; assertEquals ( Lists . newArrayList ( map . values ( ) ) , Lists . newArrayList ( SerializableTester . reserialize ( map . values ( ) ) ) ) ; } @GwtIncompatible ( <str> ) public static class ReserializedMapTests extends SortedMapInterfaceTest < String , Integer > { public ReserializedMapTests ( ) { super ( false , true , true , true , true ) ; } @Override protected SortedMap < String , Integer > makePopulatedMap ( ) { NavigableMap < String , Integer > map = new SafeTreeMap < String , Integer > ( ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; map . put ( <str> , <int> ) ; return SerializableTester . reserialize ( map ) ; } @Override protected SortedMap < String , Integer > makeEmptyMap ( ) throws UnsupportedOperationException { NavigableMap < String , Integer > map = new SafeTreeMap < String , Integer > ( ) ; return SerializableTester . reserialize ( map ) ; } @Override protected String getKeyNotInPopulatedMap ( ) { return <str> ; } @Override protected Integer getValueNotInPopulatedMap ( ) { return - <int> ; } } } 

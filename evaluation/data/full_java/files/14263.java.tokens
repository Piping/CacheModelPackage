package org . gradle . model . internal . core ; import com . google . common . base . Preconditions ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import java . util . Arrays ; import java . util . List ; public abstract class AbstractModelAction < T > implements ModelAction < T > { protected final ModelReference < T > subject ; protected final ModelRuleDescriptor descriptor ; protected final List < ? extends ModelReference < ? > > inputs ; protected AbstractModelAction ( ModelReference < T > subject , ModelRuleDescriptor descriptor , ModelReference < ? > . . . inputs ) { this ( subject , descriptor , Arrays . asList ( inputs ) ) ; } protected AbstractModelAction ( ModelReference < T > subject , ModelRuleDescriptor descriptor , List < ? extends ModelReference < ? > > inputs ) { this . subject = Preconditions . checkNotNull ( subject , <str> ) ; this . descriptor = Preconditions . checkNotNull ( descriptor , <str> ) ; this . inputs = Preconditions . checkNotNull ( inputs , <str> ) ; } @Override final public ModelReference < T > getSubject ( ) { return subject ; } @Override final public ModelRuleDescriptor getDescriptor ( ) { return descriptor ; } @Override final public List < ? extends ModelReference < ? > > getInputs ( ) { return inputs ; } } 

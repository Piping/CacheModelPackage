package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . viewers . ITreeContentProvider ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . activities . WorkbenchActivityHelper ; public class LaunchConfigurationTreeContentProvider implements ITreeContentProvider { private static final Object [ ] EMPTY_ARRAY = new Object [ <int> ] ; private String fMode ; private Shell fShell ; public LaunchConfigurationTreeContentProvider ( String mode , Shell shell ) { setMode ( mode ) ; setShell ( shell ) ; } @Override public Object [ ] getChildren ( Object parentElement ) { if ( parentElement instanceof ILaunchConfiguration ) { return EMPTY_ARRAY ; } else if ( parentElement instanceof ILaunchConfigurationType ) { try { ILaunchConfigurationType type = ( ILaunchConfigurationType ) parentElement ; return getLaunchManager ( ) . getLaunchConfigurations ( type ) ; } catch ( CoreException e ) { DebugUIPlugin . errorDialog ( getShell ( ) , LaunchConfigurationsMessages . LaunchConfigurationDialog_Error_19 , LaunchConfigurationsMessages . LaunchConfigurationDialog_An_exception_occurred_while_retrieving_launch_configurations_20 , e ) ; } } else { return getLaunchManager ( ) . getLaunchConfigurationTypes ( ) ; } return EMPTY_ARRAY ; } @Override public Object getParent ( Object element ) { if ( element instanceof ILaunchConfiguration ) { if ( ! ( ( ILaunchConfiguration ) element ) . exists ( ) ) { return null ; } try { return ( ( ILaunchConfiguration ) element ) . getType ( ) ; } catch ( CoreException e ) { DebugUIPlugin . errorDialog ( getShell ( ) , LaunchConfigurationsMessages . LaunchConfigurationDialog_Error_19 , LaunchConfigurationsMessages . LaunchConfigurationDialog_An_exception_occurred_while_retrieving_launch_configurations_20 , e ) ; } } else if ( element instanceof ILaunchConfigurationType ) { return ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; } return null ; } @Override public boolean hasChildren ( Object element ) { if ( element instanceof ILaunchConfiguration ) { return false ; } return getChildren ( element ) . length > <int> ; } @Override public Object [ ] getElements ( Object inputElement ) { ILaunchConfigurationType [ ] allTypes = getLaunchManager ( ) . getLaunchConfigurationTypes ( ) ; return filterTypes ( allTypes ) . toArray ( ) ; } private List < ILaunchConfigurationType > filterTypes ( ILaunchConfigurationType [ ] allTypes ) { List < ILaunchConfigurationType > filteredTypes = new ArrayList < ILaunchConfigurationType > ( ) ; String mode = getMode ( ) ; LaunchConfigurationTypeContribution contribution ; for ( int i = <int> ; i < allTypes . length ; i + + ) { ILaunchConfigurationType type = allTypes [ i ] ; contribution = new LaunchConfigurationTypeContribution ( type ) ; if ( isVisible ( type , mode ) & & ! WorkbenchActivityHelper . filterItem ( contribution ) ) { filteredTypes . add ( type ) ; } } return filteredTypes ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } private boolean isVisible ( ILaunchConfigurationType configType , String mode ) { if ( ! configType . isPublic ( ) ) { return false ; } if ( mode = = null ) { return true ; } return configType . supportsMode ( mode ) ; } private ILaunchManager getLaunchManager ( ) { return DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; } private void setMode ( String mode ) { fMode = mode ; } private String getMode ( ) { return fMode ; } private void setShell ( Shell shell ) { fShell = shell ; } private Shell getShell ( ) { return fShell ; } } 

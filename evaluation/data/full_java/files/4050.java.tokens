package org . eclipse . debug . internal . ui . actions . breakpointGroups ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . internal . ui . breakpoints . provisional . IBreakpointOrganizer ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointOrganizerManager ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointsView ; import org . eclipse . jface . dialogs . Dialog ; import org . eclipse . jface . dialogs . TrayDialog ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . DoubleClickEvent ; import org . eclipse . jface . viewers . IDoubleClickListener ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . ITreeContentProvider ; import org . eclipse . jface . viewers . LabelProvider ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . jface . viewers . TableViewer ; import org . eclipse . jface . viewers . TreeViewer ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Table ; import org . eclipse . swt . widgets . Tree ; import org . eclipse . ui . PlatformUI ; public class GroupBreakpointsByDialog extends TrayDialog { private BreakpointsView fView ; private TableViewer fAvailableViewer ; private AvailableOrganizersProvider fAvailableOrganizersProvider = new AvailableOrganizersProvider ( ) ; private TreeViewer fSelectedViewer ; private SelectedOrganizerProvider fSelectedOrganizersProvider = new SelectedOrganizerProvider ( ) ; private List < Object > fResult = new ArrayList < Object > ( ) ; private Button fAddButton ; private Button fRemoveButton ; private Button fMoveUpButton ; private Button fMoveDownButton ; private SelectionAdapter fSelectionListener = new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { Object source = e . getSource ( ) ; if ( source = = fAddButton ) { handleAddPressed ( ) ; } else if ( source = = fRemoveButton ) { handleRemovePressed ( ) ; } else if ( source = = fMoveUpButton ) { handleMoveUpPressed ( ) ; } else if ( source = = fMoveDownButton ) { handleMoveDownPressed ( ) ; } } } ; protected GroupBreakpointsByDialog ( BreakpointsView view ) { super ( view . getSite ( ) . getShell ( ) ) ; fView = view ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; } @Override protected Control createDialogArea ( Composite parent ) { ILabelProvider labelProvider = new BreakpointOrganzierLabelProvider ( ) ; Composite parentComposite = ( Composite ) super . createDialogArea ( parent ) ; parentComposite . setFont ( parent . getFont ( ) ) ; Composite composite = new Composite ( parentComposite , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . numColumns = <int> ; composite . setLayout ( layout ) ; GridData data = new GridData ( GridData . FILL_BOTH ) ; data . heightHint = <int> ; composite . setLayoutData ( data ) ; composite . setFont ( parent . getFont ( ) ) ; Label label = new Label ( composite , SWT . WRAP ) ; label . setText ( BreakpointGroupMessages . GroupBreakpointsByDialog_0 ) ; GridData gridData = new GridData ( GridData . FILL_HORIZONTAL ) ; gridData . horizontalSpan = <int> ; label . setLayoutData ( gridData ) ; createAvailableViewer ( composite , labelProvider ) ; createButtons ( composite ) ; createSelectedViewer ( composite , labelProvider ) ; initializeContent ( ) ; updateViewers ( ) ; Dialog . applyDialogFont ( parentComposite ) ; return parentComposite ; } @Override protected Control createContents ( Composite parent ) { Control contents = super . createContents ( parent ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getDialogArea ( ) , IDebugHelpContextIds . GROUP_BREAKPOINTS_DIALOG ) ; return contents ; } private void initializeContent ( ) { IBreakpointOrganizer [ ] organizers = BreakpointOrganizerManager . getDefault ( ) . getOrganizers ( ) ; for ( int i = <int> ; i < organizers . length ; i + + ) { fAvailableOrganizersProvider . addAvailable ( organizers [ i ] ) ; } organizers = fView . getBreakpointOrganizers ( ) ; if ( organizers ! = null ) { for ( int i = <int> ; i < organizers . length ; i + + ) { fSelectedOrganizersProvider . addSelected ( organizers [ i ] ) ; } } } private void createAvailableViewer ( Composite parent , ILabelProvider labelProvider ) { Composite availableComposite = new Composite ( parent , SWT . NONE ) ; availableComposite . setFont ( parent . getFont ( ) ) ; GridLayout layout = new GridLayout ( ) ; layout . marginHeight = <int> ; layout . marginWidth = <int> ; availableComposite . setLayout ( layout ) ; GridData gridData = new GridData ( GridData . FILL_BOTH ) ; gridData . widthHint = <int> ; availableComposite . setLayoutData ( gridData ) ; Label label = new Label ( availableComposite , SWT . WRAP ) ; label . setText ( BreakpointGroupMessages . GroupBreakpointsByDialog_1 ) ; gridData = new GridData ( GridData . FILL_HORIZONTAL ) ; label . setLayoutData ( gridData ) ; fAvailableViewer = new TableViewer ( availableComposite ) ; fAvailableViewer . setContentProvider ( fAvailableOrganizersProvider ) ; fAvailableViewer . setLabelProvider ( labelProvider ) ; fAvailableViewer . setInput ( new Object ( ) ) ; Table table = fAvailableViewer . getTable ( ) ; table . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; table . setFont ( parent . getFont ( ) ) ; fAvailableViewer . addDoubleClickListener ( new IDoubleClickListener ( ) { @Override public void doubleClick ( DoubleClickEvent event ) { handleAddPressed ( ) ; } } ) ; fAvailableViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { updateAddButton ( ) ; } } ) ; } private void createSelectedViewer ( Composite parent , ILabelProvider labelProvider ) { Composite selectedComposite = new Composite ( parent , SWT . NONE ) ; GridLayout layout = new GridLayout ( ) ; layout . marginHeight = <int> ; layout . marginWidth = <int> ; layout . numColumns = <int> ; selectedComposite . setLayout ( layout ) ; GridData gridData = new GridData ( GridData . FILL_BOTH ) ; gridData . widthHint = <int> ; selectedComposite . setLayoutData ( gridData ) ; selectedComposite . setFont ( parent . getFont ( ) ) ; Label label = new Label ( selectedComposite , SWT . WRAP ) ; label . setText ( BreakpointGroupMessages . GroupBreakpointsByDialog_3 ) ; gridData = new GridData ( ) ; gridData . horizontalSpan = <int> ; label . setLayoutData ( gridData ) ; fSelectedViewer = new TreeViewer ( selectedComposite ) ; fSelectedViewer . setContentProvider ( fSelectedOrganizersProvider ) ; fSelectedViewer . setLabelProvider ( labelProvider ) ; fSelectedViewer . setInput ( new Object ( ) ) ; Tree tree = fSelectedViewer . getTree ( ) ; tree . setLayoutData ( new GridData ( GridData . FILL_BOTH ) ) ; tree . setFont ( parent . getFont ( ) ) ; fSelectedViewer . addDoubleClickListener ( new IDoubleClickListener ( ) { @Override public void doubleClick ( DoubleClickEvent event ) { handleRemovePressed ( ) ; } } ) ; fSelectedViewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { updateSelectedButtons ( ) ; } } ) ; } public void createButtons ( Composite parent ) { Composite buttonComposite = new Composite ( parent , SWT . NONE ) ; buttonComposite . setLayout ( new GridLayout ( ) ) ; buttonComposite . setLayoutData ( new GridData ( ) ) ; buttonComposite . setFont ( parent . getFont ( ) ) ; fAddButton = SWTFactory . createPushButton ( buttonComposite , BreakpointGroupMessages . GroupBreakpointsByDialog_2 , null ) ; fAddButton . addSelectionListener ( fSelectionListener ) ; fRemoveButton = SWTFactory . createPushButton ( buttonComposite , BreakpointGroupMessages . GroupBreakpointsByDialog_4 , null ) ; fRemoveButton . addSelectionListener ( fSelectionListener ) ; fMoveUpButton = SWTFactory . createPushButton ( buttonComposite , BreakpointGroupMessages . GroupBreakpointsByDialog_5 , null ) ; fMoveUpButton . addSelectionListener ( fSelectionListener ) ; fMoveDownButton = SWTFactory . createPushButton ( buttonComposite , BreakpointGroupMessages . GroupBreakpointsByDialog_6 , null ) ; fMoveDownButton . addSelectionListener ( fSelectionListener ) ; } public IBreakpointOrganizer [ ] getOrganizers ( ) { return fResult . toArray ( new IBreakpointOrganizer [ fResult . size ( ) ] ) ; } @Override protected void okPressed ( ) { Object [ ] factories = fSelectedOrganizersProvider . getElements ( null ) ; while ( factories . length > <int> ) { Object factory = factories [ <int> ] ; fResult . add ( factory ) ; factories = fSelectedOrganizersProvider . getChildren ( factory ) ; } super . okPressed ( ) ; } public void handleAddPressed ( ) { IStructuredSelection selection = ( IStructuredSelection ) fAvailableViewer . getSelection ( ) ; if ( selection . size ( ) < <int> ) { return ; } Iterator < ? > iter = selection . iterator ( ) ; while ( iter . hasNext ( ) ) { fSelectedOrganizersProvider . addSelected ( ( IBreakpointOrganizer ) iter . next ( ) ) ; } updateViewers ( ) ; } public void handleRemovePressed ( ) { IStructuredSelection selection = ( IStructuredSelection ) fSelectedViewer . getSelection ( ) ; if ( selection . size ( ) < <int> ) { return ; } Iterator < ? > iter = selection . iterator ( ) ; while ( iter . hasNext ( ) ) { fAvailableOrganizersProvider . addAvailable ( ( IBreakpointOrganizer ) iter . next ( ) ) ; } updateViewers ( ) ; } public void handleMoveUpPressed ( ) { IStructuredSelection selection = ( IStructuredSelection ) fSelectedViewer . getSelection ( ) ; Iterator < ? > iter = selection . iterator ( ) ; while ( iter . hasNext ( ) ) { fSelectedOrganizersProvider . moveUp ( iter . next ( ) ) ; } updateViewers ( ) ; } public void handleMoveDownPressed ( ) { IStructuredSelection selection = ( IStructuredSelection ) fSelectedViewer . getSelection ( ) ; Object [ ] elements = selection . toArray ( ) ; for ( int i = elements . length - <int> ; i > = <int> ; i - - ) { fSelectedOrganizersProvider . moveDown ( elements [ i ] ) ; } updateViewers ( ) ; } public void updateViewers ( ) { fAvailableViewer . refresh ( ) ; fSelectedViewer . refresh ( ) ; fSelectedViewer . expandAll ( ) ; updateAddButton ( ) ; updateSelectedButtons ( ) ; } public void updateSelectedButtons ( ) { updateRemoveButton ( ) ; updateMoveUpButton ( ) ; updateMoveDownButton ( ) ; } public void updateAddButton ( ) { IStructuredSelection selection = ( IStructuredSelection ) fAvailableViewer . getSelection ( ) ; fAddButton . setEnabled ( selection . size ( ) > <int> ) ; } public void updateRemoveButton ( ) { IStructuredSelection selection = ( IStructuredSelection ) fSelectedViewer . getSelection ( ) ; fRemoveButton . setEnabled ( selection . size ( ) > <int> ) ; } public void updateMoveUpButton ( ) { boolean enabled = true ; IStructuredSelection selection = ( IStructuredSelection ) fSelectedViewer . getSelection ( ) ; if ( selection . size ( ) = = <int> ) { enabled = false ; } else { Object firstSelected = selection . getFirstElement ( ) ; Object parent = fSelectedOrganizersProvider . getParent ( firstSelected ) ; if ( ! ( parent instanceof IBreakpointOrganizer ) ) { enabled = false ; } } fMoveUpButton . setEnabled ( enabled ) ; } public void updateMoveDownButton ( ) { boolean enabled = true ; IStructuredSelection selection = ( IStructuredSelection ) fSelectedViewer . getSelection ( ) ; if ( selection . size ( ) = = <int> ) { enabled = false ; } else { Object lastSelected = selection . toList ( ) . get ( selection . size ( ) - <int> ) ; Object [ ] children = fSelectedOrganizersProvider . getChildren ( lastSelected ) ; if ( children . length < <int> ) { enabled = false ; } } fMoveDownButton . setEnabled ( enabled ) ; } private class AvailableOrganizersProvider implements IStructuredContentProvider { protected List < IBreakpointOrganizer > availableOrganziers = new ArrayList < IBreakpointOrganizer > ( ) ; public void addAvailable ( IBreakpointOrganizer organizer ) { availableOrganziers . add ( organizer ) ; fSelectedOrganizersProvider . selectedOrganizers . remove ( organizer ) ; } @Override public Object [ ] getElements ( Object inputElement ) { return availableOrganziers . toArray ( ) ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } } private class SelectedOrganizerProvider implements ITreeContentProvider { protected List < Object > selectedOrganizers = new ArrayList < Object > ( ) ; public void addSelected ( IBreakpointOrganizer organizer ) { selectedOrganizers . add ( organizer ) ; fAvailableOrganizersProvider . availableOrganziers . remove ( organizer ) ; } public void moveUp ( Object object ) { int index = selectedOrganizers . indexOf ( object ) ; if ( index > <int> ) { selectedOrganizers . remove ( object ) ; selectedOrganizers . add ( index - <int> , object ) ; } } public void moveDown ( Object object ) { int index = selectedOrganizers . indexOf ( object ) ; if ( index < selectedOrganizers . size ( ) - <int> ) { selectedOrganizers . remove ( object ) ; selectedOrganizers . add ( index + <int> , object ) ; } } @Override public Object [ ] getChildren ( Object parentElement ) { int index = selectedOrganizers . indexOf ( parentElement ) ; if ( index < selectedOrganizers . size ( ) - <int> ) { return new Object [ ] { selectedOrganizers . get ( index + <int> ) } ; } return new Object [ <int> ] ; } @Override public Object getParent ( Object element ) { int index = selectedOrganizers . indexOf ( element ) ; if ( index < = <int> | | selectedOrganizers . size ( ) < = <int> ) { return null ; } return selectedOrganizers . get ( index - <int> ) ; } @Override public boolean hasChildren ( Object element ) { int index = selectedOrganizers . indexOf ( element ) ; return index ! = - <int> & & index < selectedOrganizers . size ( ) - <int> ; } @Override public Object [ ] getElements ( Object inputElement ) { if ( selectedOrganizers . size ( ) > <int> ) { return new Object [ ] { selectedOrganizers . get ( <int> ) } ; } return new Object [ <int> ] ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } } private class BreakpointOrganzierLabelProvider extends LabelProvider { private HashMap < ImageDescriptor , Image > fImageCache = new HashMap < ImageDescriptor , Image > ( ) ; @Override public String getText ( Object element ) { if ( element instanceof IBreakpointOrganizer ) { return ( ( IBreakpointOrganizer ) element ) . getLabel ( ) ; } return super . getText ( element ) ; } @Override public Image getImage ( Object element ) { if ( element instanceof IBreakpointOrganizer ) { ImageDescriptor imageDescriptor = ( ( IBreakpointOrganizer ) element ) . getImageDescriptor ( ) ; if ( imageDescriptor ! = null ) { Image image = fImageCache . get ( imageDescriptor ) ; if ( image = = null ) { image = imageDescriptor . createImage ( ) ; if ( image ! = null ) { fImageCache . put ( imageDescriptor , image ) ; } } return image ; } } return super . getImage ( element ) ; } @Override public void dispose ( ) { for ( Image image : fImageCache . values ( ) ) { image . dispose ( ) ; } super . dispose ( ) ; } } @Override protected void configureShell ( Shell shell ) { super . configureShell ( shell ) ; shell . setText ( BreakpointGroupMessages . GroupBreakpointsByDialog_7 ) ; } } 

package org . gradle . gradleplugin . userinterface . swing . common ; import org . gradle . api . UncheckedIOException ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import javax . swing . * ; import java . awt . * ; import java . io . File ; import java . io . IOException ; public class PreferencesAssistant { private static final String WINDOW_X = <str> ; private static final String WINDOW_Y = <str> ; private static final String WINDOW_WIDTH = <str> ; private static final String WINDOW_HEIGHT = <str> ; private static final String EXTENDED_STATE = <str> ; private static final String DIVIDER_LOCATION = <str> ; private static final String DIRECTORY_NAME = <str> ; public static SettingsNode saveSettings ( SettingsNode settingsNode , Window window , String id , Class windowClass ) { Point p = window . getLocation ( ) ; Dimension size = window . getSize ( ) ; SettingsNode childNode = settingsNode . addChildIfNotPresent ( getPrefix ( windowClass , id ) ) ; childNode . setValueOfChildAsInt ( WINDOW_X , p . x ) ; childNode . setValueOfChildAsInt ( WINDOW_Y , p . y ) ; childNode . setValueOfChildAsInt ( WINDOW_WIDTH , size . width ) ; childNode . setValueOfChildAsInt ( WINDOW_HEIGHT , size . height ) ; return childNode ; } public static void saveSettings ( SettingsNode settingsNode , JFrame frame , String id , Class windowClass ) { if ( frame . getExtendedState ( ) = = JFrame . ICONIFIED ) { return ; } SettingsNode childNode = saveSettings ( settingsNode , ( Window ) frame , id , windowClass ) ; if ( frame . getExtendedState ( ) ! = JFrame . ICONIFIED ) { childNode . setValueOfChildAsInt ( EXTENDED_STATE , frame . getExtendedState ( ) ) ; } } public static SettingsNode restoreSettings ( SettingsNode settingsNode , Window window , String id , Class windowClass ) { SettingsNode childNode = settingsNode . getChildNode ( getPrefix ( windowClass , id ) ) ; if ( childNode = = null ) { return null ; } int x = childNode . getValueOfChildAsInt ( WINDOW_X , window . getLocation ( ) . x ) ; int y = childNode . getValueOfChildAsInt ( WINDOW_Y , window . getLocation ( ) . y ) ; int width = childNode . getValueOfChildAsInt ( WINDOW_WIDTH , window . getSize ( ) . width ) ; int height = childNode . getValueOfChildAsInt ( WINDOW_HEIGHT , window . getSize ( ) . height ) ; window . setLocation ( x , y ) ; window . setSize ( width , height ) ; return childNode ; } public static void restoreSettings ( SettingsNode settingsNode , JFrame frame , String id , Class windowClass ) { SettingsNode childNode = restoreSettings ( settingsNode , ( Window ) frame , id , windowClass ) ; if ( childNode = = null ) { return ; } int extendedState = childNode . getValueOfChildAsInt ( EXTENDED_STATE , frame . getExtendedState ( ) ) ; if ( extendedState ! = JFrame . ICONIFIED ) { frame . setExtendedState ( extendedState ) ; } } public static void saveSettings ( SettingsNode settingsNode , JSplitPane splitter , String id , Class splitterClass ) { SettingsNode childNode = settingsNode . addChildIfNotPresent ( getPrefix ( splitterClass , id ) ) ; childNode . setValueOfChildAsInt ( DIVIDER_LOCATION , splitter . getDividerLocation ( ) ) ; } public static void restoreSettings ( SettingsNode settingsNode , JSplitPane splitter , String id , Class splitterClass ) { SettingsNode childNode = settingsNode . getChildNode ( getPrefix ( splitterClass , id ) ) ; if ( childNode = = null ) { return ; } int location = childNode . getValueOfChildAsInt ( DIVIDER_LOCATION , splitter . getDividerLocation ( ) ) ; splitter . setDividerLocation ( location ) ; } private static String getPrefix ( Class aClass , String id ) { return aClass . getSimpleName ( ) + <str> + id ; } public static void saveSettings ( SettingsNode settingsNode , JFileChooser fileChooser , String id , Class fileChooserClass , boolean saveCurrentDirectoryVsSelectedFilesParent ) { SettingsNode childNode = settingsNode . addChildIfNotPresent ( getPrefix ( fileChooserClass , id ) ) ; String save ; try { if ( saveCurrentDirectoryVsSelectedFilesParent ) { save = fileChooser . getCurrentDirectory ( ) . getCanonicalPath ( ) ; } else { save = fileChooser . getSelectedFile ( ) . getCanonicalPath ( ) ; } } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } if ( save ! = null ) { childNode . setValueOfChild ( DIRECTORY_NAME , save ) ; } } public static void restoreSettings ( SettingsNode settingsNode , JFileChooser fileChooser , String id , Class fileChooserClass ) { SettingsNode childNode = settingsNode . getChildNode ( getPrefix ( fileChooserClass , id ) ) ; if ( childNode = = null ) { return ; } String lastDirectory = childNode . getValueOfChild ( DIRECTORY_NAME , null ) ; if ( lastDirectory ! = null ) { fileChooser . setCurrentDirectory ( new File ( lastDirectory ) ) ; } } } 

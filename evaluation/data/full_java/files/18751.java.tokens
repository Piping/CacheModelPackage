package io . netty . buffer ; import java . io . DataOutput ; import java . io . DataOutputStream ; import java . io . IOException ; import java . io . OutputStream ; public class ByteBufOutputStream extends OutputStream implements DataOutput { private final ByteBuf buffer ; private final int startIndex ; private final DataOutputStream utf8out = new DataOutputStream ( this ) ; public ByteBufOutputStream ( ByteBuf buffer ) { if ( buffer = = null ) { throw new NullPointerException ( <str> ) ; } this . buffer = buffer ; startIndex = buffer . writerIndex ( ) ; } public int writtenBytes ( ) { return buffer . writerIndex ( ) - startIndex ; } @Override public void write ( byte [ ] b , int off , int len ) throws IOException { if ( len = = <int> ) { return ; } buffer . writeBytes ( b , off , len ) ; } @Override public void write ( byte [ ] b ) throws IOException { buffer . writeBytes ( b ) ; } @Override public void write ( int b ) throws IOException { buffer . writeByte ( ( byte ) b ) ; } @Override public void writeBoolean ( boolean v ) throws IOException { write ( v ? ( byte ) <int> : ( byte ) <int> ) ; } @Override public void writeByte ( int v ) throws IOException { write ( v ) ; } @Override public void writeBytes ( String s ) throws IOException { int len = s . length ( ) ; for ( int i = <int> ; i < len ; i + + ) { write ( ( byte ) s . charAt ( i ) ) ; } } @Override public void writeChar ( int v ) throws IOException { writeShort ( ( short ) v ) ; } @Override public void writeChars ( String s ) throws IOException { int len = s . length ( ) ; for ( int i = <int> ; i < len ; i + + ) { writeChar ( s . charAt ( i ) ) ; } } @Override public void writeDouble ( double v ) throws IOException { writeLong ( Double . doubleToLongBits ( v ) ) ; } @Override public void writeFloat ( float v ) throws IOException { writeInt ( Float . floatToIntBits ( v ) ) ; } @Override public void writeInt ( int v ) throws IOException { buffer . writeInt ( v ) ; } @Override public void writeLong ( long v ) throws IOException { buffer . writeLong ( v ) ; } @Override public void writeShort ( int v ) throws IOException { buffer . writeShort ( ( short ) v ) ; } @Override public void writeUTF ( String s ) throws IOException { utf8out . writeUTF ( s ) ; } public ByteBuf buffer ( ) { return buffer ; } } 

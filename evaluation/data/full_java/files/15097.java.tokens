package org . gradle . nativeplatform . toolchain . plugins ; import org . gradle . api . Incubating ; import org . gradle . api . NamedDomainObjectFactory ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . operations . BuildOperationProcessor ; import org . gradle . internal . os . OperatingSystem ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . model . Defaults ; import org . gradle . model . RuleSource ; import org . gradle . nativeplatform . plugins . NativeComponentPlugin ; import org . gradle . nativeplatform . toolchain . VisualCpp ; import org . gradle . nativeplatform . toolchain . internal . NativeToolChainRegistryInternal ; import org . gradle . nativeplatform . toolchain . internal . msvcpp . VisualCppToolChain ; import org . gradle . nativeplatform . toolchain . internal . msvcpp . VisualStudioLocator ; import org . gradle . nativeplatform . toolchain . internal . msvcpp . WindowsSdkLocator ; import org . gradle . process . internal . ExecActionFactory ; @Incubating public class MicrosoftVisualCppPlugin implements Plugin < Project > { public void apply ( Project project ) { project . getPluginManager ( ) . apply ( NativeComponentPlugin . class ) ; } static class Rules extends RuleSource { @Defaults public static void addToolChain ( NativeToolChainRegistryInternal toolChainRegistry , ServiceRegistry serviceRegistry ) { final FileResolver fileResolver = serviceRegistry . get ( FileResolver . class ) ; final ExecActionFactory execActionFactory = serviceRegistry . get ( ExecActionFactory . class ) ; final Instantiator instantiator = serviceRegistry . get ( Instantiator . class ) ; final OperatingSystem operatingSystem = serviceRegistry . get ( OperatingSystem . class ) ; final BuildOperationProcessor buildOperationProcessor = serviceRegistry . get ( BuildOperationProcessor . class ) ; final VisualStudioLocator visualStudioLocator = serviceRegistry . get ( VisualStudioLocator . class ) ; final WindowsSdkLocator windowsSdkLocator = serviceRegistry . get ( WindowsSdkLocator . class ) ; toolChainRegistry . registerFactory ( VisualCpp . class , new NamedDomainObjectFactory < VisualCpp > ( ) { public VisualCpp create ( String name ) { return instantiator . newInstance ( VisualCppToolChain . class , name , buildOperationProcessor , operatingSystem , fileResolver , execActionFactory , visualStudioLocator , windowsSdkLocator , instantiator ) ; } } ) ; toolChainRegistry . registerDefaultToolChain ( VisualCppToolChain . DEFAULT_NAME , VisualCpp . class ) ; } } } 

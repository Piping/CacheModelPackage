package io . netty . handler . codec . compression ; import com . ning . compress . lzf . LZFEncoder ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import org . junit . Test ; import static com . ning . compress . lzf . LZFChunk . * ; public class LzfDecoderTest extends AbstractDecoderTest { public LzfDecoderTest ( ) throws Exception { } @Override public void initChannel ( ) { channel = new EmbeddedChannel ( new LzfDecoder ( ) ) ; } @Test public void testUnexpectedBlockIdentifier ( ) throws Exception { expected . expect ( DecompressionException . class ) ; expected . expectMessage ( <str> ) ; ByteBuf in = Unpooled . buffer ( ) ; in . writeShort ( <hex> ) ; in . writeByte ( BLOCK_TYPE_NON_COMPRESSED ) ; in . writeShort ( <int> ) ; channel . writeInbound ( in ) ; } @Test public void testUnknownTypeOfChunk ( ) throws Exception { expected . expect ( DecompressionException . class ) ; expected . expectMessage ( <str> ) ; ByteBuf in = Unpooled . buffer ( ) ; in . writeByte ( BYTE_Z ) ; in . writeByte ( BYTE_V ) ; in . writeByte ( <hex> ) ; in . writeInt ( <int> ) ; channel . writeInbound ( in ) ; } @Override protected byte [ ] compress ( byte [ ] data ) throws Exception { return LZFEncoder . encode ( data ) ; } } 

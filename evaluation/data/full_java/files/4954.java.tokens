package org . elasticsearch . action . admin . cluster . node . info ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . plugins . PluginInfo ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; public class PluginsAndModules implements Streamable , ToXContent { private List < PluginInfo > plugins ; private List < PluginInfo > modules ; public PluginsAndModules ( ) { plugins = new ArrayList < > ( ) ; modules = new ArrayList < > ( ) ; } public List < PluginInfo > getPluginInfos ( ) { List < PluginInfo > plugins = new ArrayList < > ( this . plugins ) ; Collections . sort ( plugins , ( p1 , p2 ) - > p1 . getName ( ) . compareTo ( p2 . getName ( ) ) ) ; return plugins ; } public List < PluginInfo > getModuleInfos ( ) { List < PluginInfo > modules = new ArrayList < > ( this . modules ) ; Collections . sort ( modules , ( p1 , p2 ) - > p1 . getName ( ) . compareTo ( p2 . getName ( ) ) ) ; return modules ; } public void addPlugin ( PluginInfo info ) { plugins . add ( info ) ; } public void addModule ( PluginInfo info ) { modules . add ( info ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { if ( plugins . isEmpty ( ) = = false | | modules . isEmpty ( ) = = false ) { throw new IllegalStateException ( <str> ) ; } int plugins_size = in . readInt ( ) ; for ( int i = <int> ; i < plugins_size ; i + + ) { plugins . add ( PluginInfo . readFromStream ( in ) ) ; } int modules_size = in . readInt ( ) ; for ( int i = <int> ; i < modules_size ; i + + ) { modules . add ( PluginInfo . readFromStream ( in ) ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeInt ( plugins . size ( ) ) ; for ( PluginInfo plugin : getPluginInfos ( ) ) { plugin . writeTo ( out ) ; } out . writeInt ( modules . size ( ) ) ; for ( PluginInfo module : getModuleInfos ( ) ) { module . writeTo ( out ) ; } } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startArray ( <str> ) ; for ( PluginInfo pluginInfo : getPluginInfos ( ) ) { pluginInfo . toXContent ( builder , params ) ; } builder . endArray ( ) ; builder . startArray ( <str> ) ; for ( PluginInfo moduleInfo : getModuleInfos ( ) ) { moduleInfo . toXContent ( builder , params ) ; } builder . endArray ( ) ; return builder ; } } 

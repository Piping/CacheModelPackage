package org . elasticsearch . cluster . routing ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . ObjectParser ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; import java . util . Objects ; public class AllocationId implements ToXContent { private static final String ID_KEY = <str> ; private static final String RELOCATION_ID_KEY = <str> ; private static final ObjectParser < AllocationId . Builder , Void > ALLOCATION_ID_PARSER = new ObjectParser < > ( <str> ) ; static { ALLOCATION_ID_PARSER . declareString ( AllocationId . Builder : : setId , new ParseField ( ID_KEY ) ) ; ALLOCATION_ID_PARSER . declareString ( AllocationId . Builder : : setRelocationId , new ParseField ( RELOCATION_ID_KEY ) ) ; } private static class Builder { private String id ; private String relocationId ; public void setId ( String id ) { this . id = id ; } public void setRelocationId ( String relocationId ) { this . relocationId = relocationId ; } public AllocationId build ( ) { return new AllocationId ( id , relocationId ) ; } } private final String id ; @Nullable private final String relocationId ; AllocationId ( StreamInput in ) throws IOException { this . id = in . readString ( ) ; this . relocationId = in . readOptionalString ( ) ; } public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( this . id ) ; out . writeOptionalString ( this . relocationId ) ; } private AllocationId ( String id , String relocationId ) { Objects . requireNonNull ( id , <str> ) ; this . id = id ; this . relocationId = relocationId ; } public static AllocationId newInitializing ( ) { return new AllocationId ( Strings . randomBase64UUID ( ) , null ) ; } public static AllocationId newTargetRelocation ( AllocationId allocationId ) { assert allocationId . getRelocationId ( ) ! = null ; return new AllocationId ( allocationId . getRelocationId ( ) , allocationId . getId ( ) ) ; } public static AllocationId newRelocation ( AllocationId allocationId ) { assert allocationId . getRelocationId ( ) = = null ; return new AllocationId ( allocationId . getId ( ) , Strings . randomBase64UUID ( ) ) ; } public static AllocationId cancelRelocation ( AllocationId allocationId ) { assert allocationId . getRelocationId ( ) ! = null ; return new AllocationId ( allocationId . getId ( ) , null ) ; } public static AllocationId finishRelocation ( AllocationId allocationId ) { assert allocationId . getRelocationId ( ) ! = null ; return new AllocationId ( allocationId . getId ( ) , null ) ; } public String getId ( ) { return id ; } public String getRelocationId ( ) { return relocationId ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null ) { return false ; } AllocationId that = ( AllocationId ) o ; if ( ! id . equals ( that . id ) ) { return false ; } return ! ( relocationId ! = null ? ! relocationId . equals ( that . relocationId ) : that . relocationId ! = null ) ; } @Override public int hashCode ( ) { int result = id . hashCode ( ) ; result = <int> * result + ( relocationId ! = null ? relocationId . hashCode ( ) : <int> ) ; return result ; } @Override public String toString ( ) { return <str> + id + ( relocationId = = null ? <str> : <str> + relocationId ) + <str> ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; builder . field ( ID_KEY , id ) ; if ( relocationId ! = null ) { builder . field ( RELOCATION_ID_KEY , relocationId ) ; } builder . endObject ( ) ; return builder ; } public static AllocationId fromXContent ( XContentParser parser ) throws IOException { return ALLOCATION_ID_PARSER . parse ( parser , new AllocationId . Builder ( ) ) . build ( ) ; } } 

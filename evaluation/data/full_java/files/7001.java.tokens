package org . elasticsearch . rest . action . admin . indices . recovery ; import org . elasticsearch . action . admin . indices . recovery . RecoveryRequest ; import org . elasticsearch . action . admin . indices . recovery . RecoveryResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestRecoveryAction extends BaseRestHandler { @Inject public RestRecoveryAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final RecoveryRequest recoveryRequest = new RecoveryRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; recoveryRequest . detailed ( request . paramAsBoolean ( <str> , false ) ) ; recoveryRequest . activeOnly ( request . paramAsBoolean ( <str> , false ) ) ; recoveryRequest . indicesOptions ( IndicesOptions . fromRequest ( request , recoveryRequest . indicesOptions ( ) ) ) ; client . admin ( ) . indices ( ) . recoveries ( recoveryRequest , new RestBuilderListener < RecoveryResponse > ( channel ) { @Override public RestResponse buildResponse ( RecoveryResponse response , XContentBuilder builder ) throws Exception { response . detailed ( recoveryRequest . detailed ( ) ) ; builder . startObject ( ) ; response . toXContent ( builder , request ) ; builder . endObject ( ) ; return new BytesRestResponse ( OK , builder ) ; } } ) ; } } 

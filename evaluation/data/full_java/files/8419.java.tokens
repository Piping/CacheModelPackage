package org . elasticsearch . script ; import org . elasticsearch . common . ContextAndHeaderHolder ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . inject . Injector ; import org . elasticsearch . common . inject . ModulesBuilder ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsFilter ; import org . elasticsearch . common . settings . SettingsModule ; import org . elasticsearch . env . Environment ; import org . elasticsearch . env . EnvironmentModule ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . threadpool . ThreadPoolModule ; import org . elasticsearch . watcher . ResourceWatcherService ; import java . io . IOException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import static java . util . Collections . singleton ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class NativeScriptTests extends ESTestCase { public void testNativeScript ( ) throws InterruptedException { ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder ( ) ; Settings settings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , createTempDir ( ) ) . build ( ) ; ScriptModule scriptModule = new ScriptModule ( settings ) ; scriptModule . registerScript ( <str> , MyNativeScriptFactory . class ) ; Injector injector = new ModulesBuilder ( ) . add ( new EnvironmentModule ( new Environment ( settings ) ) , new ThreadPoolModule ( new ThreadPool ( settings ) ) , new SettingsModule ( settings , new SettingsFilter ( settings ) ) , scriptModule ) . createInjector ( ) ; ScriptService scriptService = injector . getInstance ( ScriptService . class ) ; ExecutableScript executable = scriptService . executable ( new Script ( <str> , ScriptType . INLINE , NativeScriptEngineService . NAME , null ) , ScriptContext . Standard . SEARCH , contextAndHeaders ) ; assertThat ( executable . run ( ) . toString ( ) , equalTo ( <str> ) ) ; terminate ( injector . getInstance ( ThreadPool . class ) ) ; } public void testFineGrainedSettingsDontAffectNativeScripts ( ) throws IOException { ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder ( ) ; Settings . Builder builder = Settings . settingsBuilder ( ) ; if ( randomBoolean ( ) ) { ScriptType scriptType = randomFrom ( ScriptType . values ( ) ) ; builder . put ( ScriptModes . SCRIPT_SETTINGS_PREFIX + scriptType , randomFrom ( ScriptMode . values ( ) ) ) ; } else { String scriptContext = randomFrom ( ScriptContext . Standard . values ( ) ) . getKey ( ) ; builder . put ( ScriptModes . SCRIPT_SETTINGS_PREFIX + scriptContext , randomFrom ( ScriptMode . values ( ) ) ) ; } Settings settings = builder . put ( <str> , createTempDir ( ) ) . build ( ) ; Environment environment = new Environment ( settings ) ; ResourceWatcherService resourceWatcherService = new ResourceWatcherService ( settings , null ) ; Map < String , NativeScriptFactory > nativeScriptFactoryMap = new HashMap < > ( ) ; nativeScriptFactoryMap . put ( <str> , new MyNativeScriptFactory ( ) ) ; Set < ScriptEngineService > scriptEngineServices = singleton ( new NativeScriptEngineService ( settings , nativeScriptFactoryMap ) ) ; ScriptContextRegistry scriptContextRegistry = new ScriptContextRegistry ( new ArrayList < ScriptContext . Plugin > ( ) ) ; ScriptService scriptService = new ScriptService ( settings , environment , scriptEngineServices , resourceWatcherService , scriptContextRegistry ) ; for ( ScriptContext scriptContext : scriptContextRegistry . scriptContexts ( ) ) { assertThat ( scriptService . compile ( new Script ( <str> , ScriptType . INLINE , NativeScriptEngineService . NAME , null ) , scriptContext , contextAndHeaders ) , notNullValue ( ) ) ; } } public static class MyNativeScriptFactory implements NativeScriptFactory { @Override public ExecutableScript newScript ( @Nullable Map < String , Object > params ) { return new MyScript ( ) ; } @Override public boolean needsScores ( ) { return false ; } } static class MyScript extends AbstractExecutableScript { @Override public Object run ( ) { return <str> ; } } } 

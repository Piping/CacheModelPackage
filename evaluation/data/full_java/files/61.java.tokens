package org . apache . cassandra . auth ; import java . util . Map ; import java . util . Set ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . RequestExecutionException ; import org . apache . cassandra . exceptions . RequestValidationException ; public interface IRoleManager { public enum Option { SUPERUSER , PASSWORD , LOGIN , OPTIONS } Set < Option > supportedOptions ( ) ; Set < Option > alterableOptions ( ) ; void createRole ( AuthenticatedUser performer , RoleResource role , RoleOptions options ) throws RequestValidationException , RequestExecutionException ; void dropRole ( AuthenticatedUser performer , RoleResource role ) throws RequestValidationException , RequestExecutionException ; void alterRole ( AuthenticatedUser performer , RoleResource role , RoleOptions options ) throws RequestValidationException , RequestExecutionException ; void grantRole ( AuthenticatedUser performer , RoleResource role , RoleResource grantee ) throws RequestValidationException , RequestExecutionException ; void revokeRole ( AuthenticatedUser performer , RoleResource role , RoleResource revokee ) throws RequestValidationException , RequestExecutionException ; Set < RoleResource > getRoles ( RoleResource grantee , boolean includeInherited ) throws RequestValidationException , RequestExecutionException ; Set < RoleResource > getAllRoles ( ) throws RequestValidationException , RequestExecutionException ; boolean isSuper ( RoleResource role ) ; boolean canLogin ( RoleResource role ) ; Map < String , String > getCustomOptions ( RoleResource role ) ; boolean isExistingRole ( RoleResource role ) ; Set < ? extends IResource > protectedResources ( ) ; void validateConfiguration ( ) throws ConfigurationException ; void setup ( ) ; } 

package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . annotations . VisibleForTesting ; import com . google . common . base . Preconditions ; import java . io . IOException ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import java . util . Collection ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; @GwtCompatible ( serializable = true , emulated = true ) public final class HashMultimap < K , V > extends AbstractSetMultimap < K , V > { private static final int DEFAULT_VALUES_PER_KEY = <int> ; @VisibleForTesting transient int expectedValuesPerKey = DEFAULT_VALUES_PER_KEY ; public static < K , V > HashMultimap < K , V > create ( ) { return new HashMultimap < K , V > ( ) ; } public static < K , V > HashMultimap < K , V > create ( int expectedKeys , int expectedValuesPerKey ) { return new HashMultimap < K , V > ( expectedKeys , expectedValuesPerKey ) ; } public static < K , V > HashMultimap < K , V > create ( Multimap < ? extends K , ? extends V > multimap ) { return new HashMultimap < K , V > ( multimap ) ; } private HashMultimap ( ) { super ( new HashMap < K , Collection < V > > ( ) ) ; } private HashMultimap ( int expectedKeys , int expectedValuesPerKey ) { super ( Maps . < K , Collection < V > > newHashMapWithExpectedSize ( expectedKeys ) ) ; Preconditions . checkArgument ( expectedValuesPerKey > = <int> ) ; this . expectedValuesPerKey = expectedValuesPerKey ; } private HashMultimap ( Multimap < ? extends K , ? extends V > multimap ) { super ( Maps . < K , Collection < V > > newHashMapWithExpectedSize ( multimap . keySet ( ) . size ( ) ) ) ; putAll ( multimap ) ; } @Override Set < V > createCollection ( ) { return Sets . < V > newHashSetWithExpectedSize ( expectedValuesPerKey ) ; } @GwtIncompatible ( <str> ) private void writeObject ( ObjectOutputStream stream ) throws IOException { stream . defaultWriteObject ( ) ; Serialization . writeMultimap ( this , stream ) ; } @GwtIncompatible ( <str> ) private void readObject ( ObjectInputStream stream ) throws IOException , ClassNotFoundException { stream . defaultReadObject ( ) ; expectedValuesPerKey = DEFAULT_VALUES_PER_KEY ; int distinctKeys = Serialization . readCount ( stream ) ; Map < K , Collection < V > > map = Maps . newHashMap ( ) ; setMap ( map ) ; Serialization . populateMultimap ( this , stream , distinctKeys ) ; } @GwtIncompatible ( <str> ) private static final long serialVersionUID = <int> ; } 

package org . elasticsearch . discovery . zen ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . discovery . zen . ping . ZenPing ; import org . elasticsearch . test . ESTestCase ; import java . util . ArrayList ; import java . util . Collections ; import static org . hamcrest . Matchers . equalTo ; public class ZenPingTests extends ESTestCase { public void testPingCollection ( ) { DiscoveryNode [ ] nodes = new DiscoveryNode [ randomIntBetween ( <int> , <int> ) ] ; long maxIdPerNode [ ] = new long [ nodes . length ] ; DiscoveryNode masterPerNode [ ] = new DiscoveryNode [ nodes . length ] ; boolean hasJoinedOncePerNode [ ] = new boolean [ nodes . length ] ; ArrayList < ZenPing . PingResponse > pings = new ArrayList < > ( ) ; for ( int i = <int> ; i < nodes . length ; i + + ) { nodes [ i ] = new DiscoveryNode ( <str> + i , DummyTransportAddress . INSTANCE , Version . CURRENT ) ; } for ( int pingCount = scaledRandomIntBetween ( <int> , nodes . length * <int> ) ; pingCount > <int> ; pingCount - - ) { int node = randomInt ( nodes . length - <int> ) ; DiscoveryNode masterNode = null ; if ( randomBoolean ( ) ) { masterNode = nodes [ randomInt ( nodes . length - <int> ) ] ; } boolean hasJoinedOnce = randomBoolean ( ) ; ZenPing . PingResponse ping = new ZenPing . PingResponse ( nodes [ node ] , masterNode , ClusterName . DEFAULT , hasJoinedOnce ) ; if ( rarely ( ) ) { continue ; } maxIdPerNode [ node ] = ping . id ( ) ; masterPerNode [ node ] = masterNode ; hasJoinedOncePerNode [ node ] = hasJoinedOnce ; pings . add ( ping ) ; } Collections . shuffle ( pings , random ( ) ) ; ZenPing . PingCollection collection = new ZenPing . PingCollection ( ) ; collection . addPings ( pings . toArray ( new ZenPing . PingResponse [ pings . size ( ) ] ) ) ; ZenPing . PingResponse [ ] aggregate = collection . toArray ( ) ; for ( ZenPing . PingResponse ping : aggregate ) { int nodeId = Integer . parseInt ( ping . node ( ) . id ( ) ) ; assertThat ( maxIdPerNode [ nodeId ] , equalTo ( ping . id ( ) ) ) ; assertThat ( masterPerNode [ nodeId ] , equalTo ( ping . master ( ) ) ) ; assertThat ( hasJoinedOncePerNode [ nodeId ] , equalTo ( ping . hasJoinedOnce ( ) ) ) ; maxIdPerNode [ nodeId ] = - <int> ; } for ( int i = <int> ; i < maxIdPerNode . length ; i + + ) { assertTrue ( <str> + i + <str> , maxIdPerNode [ i ] < = <int> ) ; } } } 

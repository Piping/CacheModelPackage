package org . gradle . api . tasks . util . internal ; import groovy . lang . Closure ; import groovy . lang . GroovyObject ; import org . gradle . api . Action ; import org . gradle . api . tasks . AntBuilderAware ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; public class PatternSetAntBuilderDelegate implements AntBuilderAware { private final Set < String > includes ; private final Set < String > excludes ; private final boolean caseSensitive ; public PatternSetAntBuilderDelegate ( Set < String > includes , Set < String > excludes , boolean caseSensitive ) { this . includes = includes ; this . excludes = excludes ; this . caseSensitive = caseSensitive ; } private static Object logical ( Object node , String op , final Action < Object > withNode ) { GroovyObject groovyObject = ( GroovyObject ) node ; groovyObject . invokeMethod ( op , new Closure ( null , null ) { void doCall ( ) { withNode . execute ( getDelegate ( ) ) ; } } ) ; return node ; } public static Object and ( Object node , Action < Object > withNode ) { return logical ( node , <str> , withNode ) ; } private static Object or ( Object node , Action < Object > withNode ) { return logical ( node , <str> , withNode ) ; } private static Object not ( Object node , Action < Object > withNode ) { return logical ( node , <str> , withNode ) ; } private static Object addFilenames ( Object node , Iterable < String > filenames , boolean caseSensitive ) { GroovyObject groovyObject = ( GroovyObject ) node ; Map < String , Object > props = new HashMap < String , Object > ( <int> ) ; props . put ( <str> , caseSensitive ) ; for ( String filename : filenames ) { props . put ( <str> , filename ) ; groovyObject . invokeMethod ( <str> , props ) ; } return node ; } public Object addToAntBuilder ( Object node , String childNodeName ) { return and ( node , new Action < Object > ( ) { public void execute ( Object node ) { if ( ! includes . isEmpty ( ) ) { or ( node , new Action < Object > ( ) { public void execute ( Object node ) { addFilenames ( node , includes , caseSensitive ) ; } } ) ; } if ( ! excludes . isEmpty ( ) ) { not ( node , new Action < Object > ( ) { public void execute ( Object node ) { or ( node , new Action < Object > ( ) { public void execute ( Object node ) { addFilenames ( node , excludes , caseSensitive ) ; } } ) ; } } ) ; } } } ) ; } } 

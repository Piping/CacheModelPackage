package org . elasticsearch . discovery ; import org . elasticsearch . cluster . block . ClusterBlock ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . node . settings . NodeSettingsService ; import org . elasticsearch . rest . RestStatus ; import java . util . EnumSet ; public class DiscoverySettings extends AbstractComponent { public static final String PUBLISH_TIMEOUT = <str> ; public static final String COMMIT_TIMEOUT = <str> ; public static final String NO_MASTER_BLOCK = <str> ; public static final String PUBLISH_DIFF_ENABLE = <str> ; public static final TimeValue DEFAULT_PUBLISH_TIMEOUT = TimeValue . timeValueSeconds ( <int> ) ; public static final TimeValue DEFAULT_COMMIT_TIMEOUT = TimeValue . timeValueSeconds ( <int> ) ; public static final String DEFAULT_NO_MASTER_BLOCK = <str> ; public final static int NO_MASTER_BLOCK_ID = <int> ; public final static boolean DEFAULT_PUBLISH_DIFF_ENABLE = true ; public final static ClusterBlock NO_MASTER_BLOCK_ALL = new ClusterBlock ( NO_MASTER_BLOCK_ID , <str> , true , true , RestStatus . SERVICE_UNAVAILABLE , ClusterBlockLevel . ALL ) ; public final static ClusterBlock NO_MASTER_BLOCK_WRITES = new ClusterBlock ( NO_MASTER_BLOCK_ID , <str> , true , false , RestStatus . SERVICE_UNAVAILABLE , EnumSet . of ( ClusterBlockLevel . WRITE , ClusterBlockLevel . METADATA_WRITE ) ) ; private volatile ClusterBlock noMasterBlock ; private volatile TimeValue publishTimeout ; private volatile TimeValue commitTimeout ; private volatile boolean publishDiff ; @Inject public DiscoverySettings ( Settings settings , NodeSettingsService nodeSettingsService ) { super ( settings ) ; nodeSettingsService . addListener ( new ApplySettings ( ) ) ; this . noMasterBlock = parseNoMasterBlock ( settings . get ( NO_MASTER_BLOCK , DEFAULT_NO_MASTER_BLOCK ) ) ; this . publishTimeout = settings . getAsTime ( PUBLISH_TIMEOUT , DEFAULT_PUBLISH_TIMEOUT ) ; this . commitTimeout = settings . getAsTime ( COMMIT_TIMEOUT , new TimeValue ( Math . min ( DEFAULT_COMMIT_TIMEOUT . millis ( ) , publishTimeout . millis ( ) ) ) ) ; this . publishDiff = settings . getAsBoolean ( PUBLISH_DIFF_ENABLE , DEFAULT_PUBLISH_DIFF_ENABLE ) ; } public TimeValue getPublishTimeout ( ) { return publishTimeout ; } public TimeValue getCommitTimeout ( ) { return commitTimeout ; } public ClusterBlock getNoMasterBlock ( ) { return noMasterBlock ; } public boolean getPublishDiff ( ) { return publishDiff ; } private class ApplySettings implements NodeSettingsService . Listener { @Override public void onRefreshSettings ( Settings settings ) { TimeValue newPublishTimeout = settings . getAsTime ( PUBLISH_TIMEOUT , null ) ; if ( newPublishTimeout ! = null ) { if ( newPublishTimeout . millis ( ) ! = publishTimeout . millis ( ) ) { logger . info ( <str> , PUBLISH_TIMEOUT , publishTimeout , newPublishTimeout ) ; publishTimeout = newPublishTimeout ; if ( settings . getAsTime ( COMMIT_TIMEOUT , null ) = = null & & commitTimeout . millis ( ) > publishTimeout . millis ( ) ) { logger . info ( <str> , COMMIT_TIMEOUT , publishTimeout ) ; commitTimeout = publishTimeout ; } } } TimeValue newCommitTimeout = settings . getAsTime ( COMMIT_TIMEOUT , null ) ; if ( newCommitTimeout ! = null ) { if ( newCommitTimeout . millis ( ) ! = commitTimeout . millis ( ) ) { logger . info ( <str> , COMMIT_TIMEOUT , commitTimeout , newCommitTimeout ) ; commitTimeout = newCommitTimeout ; } } String newNoMasterBlockValue = settings . get ( NO_MASTER_BLOCK ) ; if ( newNoMasterBlockValue ! = null ) { ClusterBlock newNoMasterBlock = parseNoMasterBlock ( newNoMasterBlockValue ) ; if ( newNoMasterBlock ! = noMasterBlock ) { noMasterBlock = newNoMasterBlock ; } } Boolean newPublishDiff = settings . getAsBoolean ( PUBLISH_DIFF_ENABLE , null ) ; if ( newPublishDiff ! = null ) { if ( newPublishDiff ! = publishDiff ) { logger . info ( <str> , PUBLISH_DIFF_ENABLE , publishDiff , newPublishDiff ) ; publishDiff = newPublishDiff ; } } } } private ClusterBlock parseNoMasterBlock ( String value ) { switch ( value ) { case <str> : return NO_MASTER_BLOCK_ALL ; case <str> : return NO_MASTER_BLOCK_WRITES ; default : throw new IllegalArgumentException ( <str> + value + <str> ) ; } } } 

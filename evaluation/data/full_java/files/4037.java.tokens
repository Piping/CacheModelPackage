package org . eclipse . debug . internal . ui . actions ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; import java . util . StringTokenizer ; import java . util . TreeSet ; import org . eclipse . core . expressions . EvaluationResult ; import org . eclipse . core . expressions . Expression ; import org . eclipse . core . expressions . ExpressionConverter ; import org . eclipse . core . expressions . ExpressionTagNames ; import org . eclipse . core . expressions . IEvaluationContext ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . IAdapterManager ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . Platform ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . preferences . IEclipsePreferences ; import org . eclipse . core . runtime . preferences . InstanceScope ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . core . IConfigurationElementConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . actions . IToggleBreakpointsTarget ; import org . eclipse . debug . ui . actions . IToggleBreakpointsTargetFactory ; import org . eclipse . debug . ui . actions . IToggleBreakpointsTargetManager ; import org . eclipse . debug . ui . actions . IToggleBreakpointsTargetManagerListener ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . Position ; import org . eclipse . jface . text . source . Annotation ; import org . eclipse . jface . text . source . IAnnotationModel ; import org . eclipse . jface . text . source . IVerticalRulerInfo ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . ui . IEditorInput ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . texteditor . IDocumentProvider ; import org . eclipse . ui . texteditor . ITextEditor ; import org . eclipse . ui . texteditor . SimpleMarkerAnnotation ; public class ToggleBreakpointsTargetManager implements IToggleBreakpointsTargetManager { public static String DEFAULT_TOGGLE_TARGET_ID = <str> ; private static Set < String > DEFAULT_TOGGLE_TARGET_ID_SET = new TreeSet < String > ( ) ; static { DEFAULT_TOGGLE_TARGET_ID_SET . add ( DEFAULT_TOGGLE_TARGET_ID ) ; } private static class ToggleTargetFactory implements IToggleBreakpointsTargetFactory { private IConfigurationElement fConfigElement ; private IToggleBreakpointsTargetFactory fFactory ; private Expression fEnablementExpression ; public ToggleTargetFactory ( IConfigurationElement configElement ) { fConfigElement = configElement ; } private IToggleBreakpointsTargetFactory getFactory ( ) { if ( fFactory ! = null ) { return fFactory ; } try { Object obj = fConfigElement . createExecutableExtension ( IConfigurationElementConstants . CLASS ) ; if ( obj instanceof IToggleBreakpointsTargetFactory ) { fFactory = ( IToggleBreakpointsTargetFactory ) obj ; } else { throw new CoreException ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . INTERNAL_ERROR , <str> + obj , null ) ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; fFactory = null ; } return fFactory ; } public boolean isEnabled ( IWorkbenchPart part , ISelection selection ) { boolean enabled = false ; Expression expression = getEnablementExpression ( ) ; if ( expression ! = null ) { enabled = evalEnablementExpression ( part , selection , expression ) ; } else { enabled = true ; } return enabled ; } private IStructuredSelection getDebugContext ( IWorkbenchPart part ) { ISelection selection = DebugUITools . getDebugContextManager ( ) . getContextService ( part . getSite ( ) . getWorkbenchWindow ( ) ) . getActiveContext ( ) ; if ( selection instanceof IStructuredSelection ) { return ( IStructuredSelection ) selection ; } return StructuredSelection . EMPTY ; } private boolean evalEnablementExpression ( IWorkbenchPart part , ISelection selection , Expression exp ) { if ( exp ! = null ) { IEvaluationContext context = DebugUIPlugin . createEvaluationContext ( part ) ; List < Object > debugContextList = getDebugContext ( part ) . toList ( ) ; context . addVariable ( IConfigurationElementConstants . DEBUG_CONTEXT , debugContextList ) ; if ( selection instanceof IStructuredSelection ) { List < Object > selectionList = ( ( IStructuredSelection ) selection ) . toList ( ) ; context . addVariable ( IConfigurationElementConstants . SELECTION , selectionList ) ; } if ( part instanceof IEditorPart ) { context . addVariable ( IConfigurationElementConstants . EDITOR_INPUT , ( ( IEditorPart ) part ) . getEditorInput ( ) ) ; } try { EvaluationResult result = exp . evaluate ( context ) ; if ( result = = EvaluationResult . TRUE ) { return true ; } } catch ( CoreException e ) { } } return false ; } private Expression getEnablementExpression ( ) { if ( fEnablementExpression = = null ) { try { IConfigurationElement [ ] elements = fConfigElement . getChildren ( ExpressionTagNames . ENABLEMENT ) ; IConfigurationElement enablement = elements . length > <int> ? elements [ <int> ] : null ; if ( enablement ! = null ) { fEnablementExpression = ExpressionConverter . getDefault ( ) . perform ( enablement ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e . getStatus ( ) ) ; fEnablementExpression = null ; } } return fEnablementExpression ; } @Override public IToggleBreakpointsTarget createToggleTarget ( String targetID ) { IToggleBreakpointsTargetFactory factory = getFactory ( ) ; if ( factory ! = null ) { return factory . createToggleTarget ( targetID ) ; } return null ; } @Override public Set < String > getToggleTargets ( IWorkbenchPart part , ISelection selection ) { IToggleBreakpointsTargetFactory factory = getFactory ( ) ; if ( factory ! = null ) { return factory . getToggleTargets ( part , selection ) ; } return Collections . EMPTY_SET ; } @Override public String getToggleTargetName ( String targetID ) { IToggleBreakpointsTargetFactory factory = getFactory ( ) ; if ( factory ! = null ) { return factory . getToggleTargetName ( targetID ) ; } return null ; } @Override public String getToggleTargetDescription ( String targetID ) { IToggleBreakpointsTargetFactory factory = getFactory ( ) ; if ( factory ! = null ) { return factory . getToggleTargetDescription ( targetID ) ; } return null ; } @Override public String getDefaultToggleTarget ( IWorkbenchPart part , ISelection selection ) { IToggleBreakpointsTargetFactory factory = getFactory ( ) ; if ( factory ! = null ) { return factory . getDefaultToggleTarget ( part , selection ) ; } return null ; } } private static class ToggleBreakpointsTargetAdapterFactory implements IToggleBreakpointsTargetFactory { private Object getSelectionElement ( ISelection selection ) { if ( selection instanceof IStructuredSelection ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; return ss . getFirstElement ( ) ; } return null ; } private boolean canGetToggleBreakpointsTarget ( Object adaptable ) { if ( adaptable ! = null ) { IToggleBreakpointsTarget adapter = null ; if ( adaptable instanceof IAdaptable ) { adapter = ( ( IAdaptable ) adaptable ) . getAdapter ( IToggleBreakpointsTarget . class ) ; } if ( adapter = = null ) { IAdapterManager adapterManager = Platform . getAdapterManager ( ) ; if ( adapterManager . hasAdapter ( adaptable , IToggleBreakpointsTarget . class . getName ( ) ) ) { return true ; } } else { return true ; } } return false ; } private IToggleBreakpointsTarget getToggleBreakpointsTarget ( IWorkbenchPart part , Object element ) { IToggleBreakpointsTarget target = null ; if ( element ! = null ) { target = ( IToggleBreakpointsTarget ) DebugPlugin . getAdapter ( element , IToggleBreakpointsTarget . class ) ; } if ( target = = null ) { target = ( IToggleBreakpointsTarget ) DebugPlugin . getAdapter ( part , IToggleBreakpointsTarget . class ) ; } return target ; } public boolean isEnabled ( IWorkbenchPart part , ISelection selection ) { return canGetToggleBreakpointsTarget ( getSelectionElement ( selection ) ) | | canGetToggleBreakpointsTarget ( part ) ; } @Override public IToggleBreakpointsTarget createToggleTarget ( String targetID ) { return null ; } public IToggleBreakpointsTarget createDefaultToggleTarget ( IWorkbenchPart part , ISelection selection ) { return getToggleBreakpointsTarget ( part , getSelectionElement ( selection ) ) ; } @Override public Set < String > getToggleTargets ( IWorkbenchPart part , ISelection selection ) { if ( isEnabled ( part , selection ) ) { return DEFAULT_TOGGLE_TARGET_ID_SET ; } return Collections . EMPTY_SET ; } @Override public String getToggleTargetName ( String targetID ) { return ActionMessages . ToggleBreakpointsTargetManager_defaultToggleTarget_name ; } @Override public String getToggleTargetDescription ( String targetID ) { return ActionMessages . ToggleBreakpointsTargetManager_defaultToggleTarget_description ; } @Override public String getDefaultToggleTarget ( IWorkbenchPart part , ISelection selection ) { return DEFAULT_TOGGLE_TARGET_ID ; } } public static final String PREF_TARGETS = <str> ; private static ToggleBreakpointsTargetManager fgSingleton ; public static ToggleBreakpointsTargetManager getDefault ( ) { if ( fgSingleton = = null ) { fgSingleton = new ToggleBreakpointsTargetManager ( ) ; } return fgSingleton ; } private Map < String , IToggleBreakpointsTargetFactory > fKnownFactories ; private Map < Set < String > , String > fPreferredTargets ; private Map < String , IToggleBreakpointsTargetFactory > fFactoriesByTargetID = new HashMap < String , IToggleBreakpointsTargetFactory > ( ) ; private ListenerList fChangedListners = new ListenerList ( ) ; private void initializeFactories ( ) { fKnownFactories = new LinkedHashMap < String , IToggleBreakpointsTargetFactory > ( ) ; fKnownFactories . put ( DEFAULT_TOGGLE_TARGET_ID , new ToggleBreakpointsTargetAdapterFactory ( ) ) ; IExtensionPoint ep = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . EXTENSION_POINT_TOGGLE_BREAKPOINTS_TARGET_FACTORIES ) ; IConfigurationElement [ ] elements = ep . getConfigurationElements ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { String id = elements [ i ] . getAttribute ( IConfigurationElementConstants . ID ) ; if ( id ! = null & & id . length ( ) ! = <int> ) { if ( fKnownFactories . containsKey ( id ) ) { DebugUIPlugin . log ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . INTERNAL_ERROR , <str> + id , null ) ) ; } else { fKnownFactories . put ( id , new ToggleTargetFactory ( elements [ i ] ) ) ; } } else { DebugUIPlugin . log ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . INTERNAL_ERROR , <str> , null ) ) ; } } System . setProperty ( IDebugUIConstants . SYS_PROP_BREAKPOINT_TOGGLE_FACTORIES_USED , fKnownFactories . size ( ) > <int> ? <str> : <str> ) ; } private Set < IToggleBreakpointsTargetFactory > getEnabledFactories ( IWorkbenchPart part , ISelection selection ) { if ( fKnownFactories = = null ) { initializeFactories ( ) ; } Set < IToggleBreakpointsTargetFactory > set = new HashSet < IToggleBreakpointsTargetFactory > ( ) ; for ( Entry < String , IToggleBreakpointsTargetFactory > entry : fKnownFactories . entrySet ( ) ) { IToggleBreakpointsTargetFactory factory = entry . getValue ( ) ; if ( factory instanceof ToggleTargetFactory & & ( ( ToggleTargetFactory ) factory ) . isEnabled ( part , selection ) ) { set . add ( factory ) ; } else if ( factory instanceof ToggleBreakpointsTargetAdapterFactory & & ( ( ToggleBreakpointsTargetAdapterFactory ) factory ) . isEnabled ( part , selection ) ) { set . add ( factory ) ; } } return set ; } private Set < String > getEnabledTargetIDs ( Set < IToggleBreakpointsTargetFactory > factoriesToQuery , IWorkbenchPart part , ISelection selection ) { Set < String > idsForSelection = new TreeSet < String > ( ) ; for ( IToggleBreakpointsTargetFactory factory : factoriesToQuery ) { for ( String targetID : factory . getToggleTargets ( part , selection ) ) { fFactoriesByTargetID . put ( targetID , factory ) ; idsForSelection . add ( targetID ) ; } } return idsForSelection ; } @Override public Set < String > getEnabledToggleBreakpointsTargetIDs ( IWorkbenchPart part , ISelection selection ) { return getEnabledTargetIDs ( getEnabledFactories ( part , selection ) , part , selection ) ; } @Override public String getPreferredToggleBreakpointsTargetID ( IWorkbenchPart part , ISelection selection ) { Set < IToggleBreakpointsTargetFactory > factories = getEnabledFactories ( part , selection ) ; Set < String > possibleIDs = getEnabledTargetIDs ( factories , part , selection ) ; return chooseToggleTargetIDInSet ( possibleIDs , part , selection ) ; } @Override public IToggleBreakpointsTarget getToggleBreakpointsTarget ( IWorkbenchPart part , ISelection selection ) { String id = getPreferredToggleBreakpointsTargetID ( part , selection ) ; IToggleBreakpointsTargetFactory factory = fFactoriesByTargetID . get ( id ) ; if ( factory ! = null ) { if ( DEFAULT_TOGGLE_TARGET_ID . equals ( id ) ) { return ( ( ToggleBreakpointsTargetAdapterFactory ) factory ) . createDefaultToggleTarget ( part , selection ) ; } else { return factory . createToggleTarget ( id ) ; } } return null ; } @Override public String getToggleBreakpointsTargetName ( String id ) { IToggleBreakpointsTargetFactory factory = fFactoriesByTargetID . get ( id ) ; if ( factory ! = null ) { return factory . getToggleTargetName ( id ) ; } return null ; } @Override public String getToggleBreakpointsTargetDescription ( String id ) { IToggleBreakpointsTargetFactory factory = fFactoriesByTargetID . get ( id ) ; if ( factory ! = null ) { return factory . getToggleTargetDescription ( id ) ; } return null ; } @Override public void addChangedListener ( IToggleBreakpointsTargetManagerListener listener ) { fChangedListners . add ( listener ) ; } @Override public void removeChangedListener ( IToggleBreakpointsTargetManagerListener listener ) { fChangedListners . remove ( listener ) ; } private void storePreferredTargets ( ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Entry < Set < String > , String > entry : fPreferredTargets . entrySet ( ) ) { for ( String currentID : entry . getKey ( ) ) { buffer . append ( currentID ) ; buffer . append ( <str> ) ; } buffer . deleteCharAt ( buffer . length ( ) - <int> ) ; buffer . append ( <str> ) ; buffer . append ( entry . getValue ( ) ) ; buffer . append ( <str> ) ; } IEclipsePreferences prefs = InstanceScope . INSTANCE . getNode ( DebugUIPlugin . getUniqueIdentifier ( ) ) ; if ( prefs ! = null ) { prefs . put ( PREF_TARGETS , buffer . toString ( ) ) ; } } private void loadPreferredTargets ( ) { fPreferredTargets = new HashMap < Set < String > , String > ( ) ; String preferenceValue = Platform . getPreferencesService ( ) . getString ( DebugUIPlugin . getUniqueIdentifier ( ) , PREF_TARGETS , null , null ) ; if ( preferenceValue = = null ) { return ; } StringTokenizer entryTokenizer = new StringTokenizer ( preferenceValue , <str> ) ; while ( entryTokenizer . hasMoreTokens ( ) ) { String token = entryTokenizer . nextToken ( ) ; int valueStart = token . indexOf ( <str> ) ; StringTokenizer keyTokenizer = new StringTokenizer ( token . substring ( <int> , valueStart ) , <str> ) ; Set < String > keys = new TreeSet < String > ( ) ; while ( keyTokenizer . hasMoreTokens ( ) ) { keys . add ( keyTokenizer . nextToken ( ) ) ; } fPreferredTargets . put ( keys , token . substring ( valueStart + <int> ) ) ; } } public void setPreferredTarget ( Set < String > possibleIDs , String preferredID ) { if ( possibleIDs = = null ) { return ; } if ( fKnownFactories = = null ) { initializeFactories ( ) ; } if ( fPreferredTargets = = null ) { loadPreferredTargets ( ) ; } String currentKey = fPreferredTargets . get ( possibleIDs ) ; if ( currentKey = = null | | ! currentKey . equals ( preferredID ) ) { fPreferredTargets . put ( possibleIDs , preferredID ) ; storePreferredTargets ( ) ; firePreferredTargetsChanged ( ) ; } } private String getUserPreferredTarget ( Set < String > possibleTargetIDs ) { if ( fPreferredTargets = = null ) { loadPreferredTargets ( ) ; } return fPreferredTargets . get ( possibleTargetIDs ) ; } private String chooseToggleTargetIDInSet ( Set < String > possibleTargetIDs , IWorkbenchPart part , ISelection selection ) { if ( possibleTargetIDs = = null | | possibleTargetIDs . isEmpty ( ) ) { return null ; } String preferredID = getUserPreferredTarget ( possibleTargetIDs ) ; if ( preferredID = = null ) { Iterator < String > possibleIDsIterator = possibleTargetIDs . iterator ( ) ; while ( preferredID = = null & & possibleIDsIterator . hasNext ( ) ) { IToggleBreakpointsTargetFactory factory = fFactoriesByTargetID . get ( possibleIDsIterator . next ( ) ) ; if ( factory ! = null ) { preferredID = factory . getDefaultToggleTarget ( part , selection ) ; } } if ( preferredID = = null | | ! possibleTargetIDs . contains ( preferredID ) ) { preferredID = possibleTargetIDs . iterator ( ) . next ( ) ; } setPreferredTarget ( possibleTargetIDs , preferredID ) ; } return preferredID ; } private void firePreferredTargetsChanged ( ) { Object [ ] listeners = fChangedListners . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { ( ( IToggleBreakpointsTargetManagerListener ) listeners [ i ] ) . preferredTargetsChanged ( ) ; } } public IBreakpoint getBeakpointFromEditor ( ITextEditor editor , IVerticalRulerInfo info ) { IDocumentProvider provider = editor . getDocumentProvider ( ) ; if ( provider = = null ) { return null ; } IEditorInput input = editor . getEditorInput ( ) ; IAnnotationModel annotationModel = provider . getAnnotationModel ( input ) ; if ( annotationModel ! = null ) { IDocument document = provider . getDocument ( input ) ; Iterator < Annotation > iterator = annotationModel . getAnnotationIterator ( ) ; while ( iterator . hasNext ( ) ) { Annotation annot = iterator . next ( ) ; if ( annot instanceof SimpleMarkerAnnotation ) { SimpleMarkerAnnotation markerAnnotation = ( SimpleMarkerAnnotation ) annot ; IMarker marker = markerAnnotation . getMarker ( ) ; try { if ( marker . isSubtypeOf ( IBreakpoint . BREAKPOINT_MARKER ) ) { Position position = annotationModel . getPosition ( markerAnnotation ) ; int line = document . getLineOfOffset ( position . getOffset ( ) ) ; if ( line = = info . getLineOfLastMouseButtonActivity ( ) ) { IBreakpoint breakpoint = DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . getBreakpoint ( marker ) ; if ( breakpoint ! = null ) { return breakpoint ; } } } } catch ( CoreException e ) { } catch ( BadLocationException e ) { } } } } return null ; } } 

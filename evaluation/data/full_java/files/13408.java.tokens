package org . gradle . api . plugins . jetty ; import org . gradle . api . Action ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . api . plugins . Convention ; import org . gradle . api . plugins . JavaPluginConvention ; import org . gradle . api . plugins . WarPlugin ; import org . gradle . api . plugins . WarPluginConvention ; import org . gradle . api . tasks . SourceSet ; import org . gradle . api . tasks . bundling . War ; import java . io . File ; import java . util . concurrent . Callable ; public class JettyPlugin implements Plugin < Project > { public static final String JETTY_RUN = <str> ; public static final String JETTY_RUN_WAR = <str> ; public static final String JETTY_STOP = <str> ; public static final String RELOAD_AUTOMATIC = <str> ; public static final String RELOAD_MANUAL = <str> ; public void apply ( Project project ) { project . getPluginManager ( ) . apply ( WarPlugin . class ) ; JettyPluginConvention jettyConvention = new JettyPluginConvention ( ) ; Convention convention = project . getConvention ( ) ; convention . getPlugins ( ) . put ( <str> , jettyConvention ) ; configureMappingRules ( project , jettyConvention ) ; configureJettyRun ( project ) ; configureJettyRunWar ( project ) ; configureJettyStop ( project , jettyConvention ) ; } private void configureMappingRules ( final Project project , final JettyPluginConvention jettyConvention ) { project . getTasks ( ) . withType ( AbstractJettyRunTask . class , new Action < AbstractJettyRunTask > ( ) { public void execute ( AbstractJettyRunTask abstractJettyRunTask ) { configureAbstractJettyTask ( project , jettyConvention , abstractJettyRunTask ) ; } } ) ; } private void configureJettyRunWar ( final Project project ) { project . getTasks ( ) . withType ( JettyRunWar . class , new Action < JettyRunWar > ( ) { public void execute ( JettyRunWar jettyRunWar ) { jettyRunWar . dependsOn ( WarPlugin . WAR_TASK_NAME ) ; jettyRunWar . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return ( ( War ) project . getTasks ( ) . getByName ( WarPlugin . WAR_TASK_NAME ) ) . getArchivePath ( ) ; } } ) ; } } ) ; JettyRunWar jettyRunWar = project . getTasks ( ) . create ( JETTY_RUN_WAR , JettyRunWar . class ) ; jettyRunWar . setDescription ( <str> ) ; jettyRunWar . setGroup ( WarPlugin . WEB_APP_GROUP ) ; } private void configureJettyStop ( Project project , final JettyPluginConvention jettyConvention ) { JettyStop jettyStop = project . getTasks ( ) . create ( JETTY_STOP , JettyStop . class ) ; jettyStop . setDescription ( <str> ) ; jettyStop . setGroup ( WarPlugin . WEB_APP_GROUP ) ; jettyStop . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return jettyConvention . getStopPort ( ) ; } } ) ; jettyStop . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return jettyConvention . getStopKey ( ) ; } } ) ; } private void configureJettyRun ( final Project project ) { project . getTasks ( ) . withType ( JettyRun . class , new Action < JettyRun > ( ) { public void execute ( JettyRun jettyRun ) { jettyRun . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return getWebXml ( project ) ; } } ) ; jettyRun . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return getJavaConvention ( project ) . getSourceSets ( ) . getByName ( SourceSet . MAIN_SOURCE_SET_NAME ) . getRuntimeClasspath ( ) ; } } ) ; jettyRun . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return getWarConvention ( project ) . getWebAppDir ( ) ; } } ) ; } } ) ; JettyRun jettyRun = project . getTasks ( ) . create ( JETTY_RUN , JettyRun . class ) ; jettyRun . setDescription ( <str> ) ; jettyRun . setGroup ( WarPlugin . WEB_APP_GROUP ) ; } private Object getWebXml ( Project project ) { War war = ( War ) project . getTasks ( ) . getByName ( WarPlugin . WAR_TASK_NAME ) ; File webXml ; if ( war . getWebXml ( ) ! = null ) { webXml = war . getWebXml ( ) ; } else { webXml = new File ( getWarConvention ( project ) . getWebAppDir ( ) , <str> ) ; } return webXml ; } private void configureAbstractJettyTask ( final Project project , final JettyPluginConvention jettyConvention , AbstractJettyRunTask jettyTask ) { jettyTask . setDaemon ( false ) ; jettyTask . setReload ( RELOAD_AUTOMATIC ) ; jettyTask . setScanIntervalSeconds ( <int> ) ; jettyTask . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return ( ( War ) project . getTasks ( ) . getByName ( WarPlugin . WAR_TASK_NAME ) ) . getBaseName ( ) ; } } ) ; jettyTask . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return jettyConvention . getHttpPort ( ) ; } } ) ; jettyTask . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return jettyConvention . getStopPort ( ) ; } } ) ; jettyTask . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return jettyConvention . getStopKey ( ) ; } } ) ; } public JavaPluginConvention getJavaConvention ( Project project ) { return project . getConvention ( ) . getPlugin ( JavaPluginConvention . class ) ; } public WarPluginConvention getWarConvention ( Project project ) { return project . getConvention ( ) . getPlugin ( WarPluginConvention . class ) ; } } 

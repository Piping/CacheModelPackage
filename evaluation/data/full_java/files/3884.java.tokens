package org . eclipse . debug . examples . ui . pda . views ; import org . eclipse . core . commands . AbstractHandler ; import org . eclipse . core . commands . ExecutionEvent ; import org . eclipse . core . commands . ExecutionException ; import org . eclipse . debug . examples . core . pda . model . PDAStackFrame ; import org . eclipse . debug . examples . core . pda . model . PDAThread ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . handlers . HandlerUtil ; abstract public class AbstractDataStackViewHandler extends AbstractHandler { @Override public Object execute ( ExecutionEvent event ) throws ExecutionException { IWorkbenchPart part = HandlerUtil . getActivePartChecked ( event ) ; if ( part instanceof DataStackView ) { DataStackView view = ( DataStackView ) part ; ISelection selection = DebugUITools . getDebugContextForEventChecked ( event ) ; if ( selection instanceof IStructuredSelection ) { Object element = ( ( IStructuredSelection ) selection ) . getFirstElement ( ) ; PDAThread thread = null ; if ( element instanceof PDAThread ) { thread = ( PDAThread ) element ; } else if ( element instanceof PDAStackFrame ) { thread = ( PDAThread ) ( ( PDAStackFrame ) element ) . getThread ( ) ; } if ( element ! = null ) { doExecute ( view , thread , HandlerUtil . getCurrentSelectionChecked ( event ) ) ; } } } else { throw new ExecutionException ( <str> ) ; } return null ; } abstract protected void doExecute ( DataStackView view , PDAThread target , ISelection selection ) throws ExecutionException ; } 

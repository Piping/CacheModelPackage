package com . badlogic . gdx . backends . gwt ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . audio . Music ; import com . badlogic . gdx . audio . Music . OnCompletionListener ; import com . badlogic . gdx . backends . gwt . soundmanager2 . SMSound ; import com . badlogic . gdx . backends . gwt . soundmanager2 . SMSound . SMSoundCallback ; import com . badlogic . gdx . backends . gwt . soundmanager2 . SMSoundOptions ; import com . badlogic . gdx . backends . gwt . soundmanager2 . SoundManager ; import com . badlogic . gdx . files . FileHandle ; public class GwtMusic implements Music , SMSoundCallback { private boolean isPlaying = false ; private boolean isLooping = false ; private SMSound sound ; private float volume = <float> ; private float pan = <float> ; private SMSoundOptions soundOptions ; private OnCompletionListener onCompletionListener ; public GwtMusic ( FileHandle file ) { String url = ( ( GwtApplication ) Gdx . app ) . getBaseUrl ( ) + file . path ( ) ; sound = SoundManager . createSound ( url ) ; soundOptions = new SMSoundOptions ( ) ; soundOptions . callback = this ; } @Override public void play ( ) { if ( isPlaying ( ) ) return ; if ( sound . getPaused ( ) ) { resume ( ) ; return ; } soundOptions . volume = ( int ) ( volume * <int> ) ; soundOptions . pan = ( int ) ( pan * <int> ) ; soundOptions . loops = <int> ; soundOptions . from = <int> ; sound . play ( soundOptions ) ; isPlaying = true ; } public void resume ( ) { sound . resume ( ) ; } @Override public void pause ( ) { sound . pause ( ) ; isPlaying = false ; } @Override public void stop ( ) { sound . stop ( ) ; isPlaying = false ; } @Override public boolean isPlaying ( ) { isPlaying & = sound . getPlayState ( ) = = <int> ; return isPlaying ; } @Override public void setLooping ( boolean isLooping ) { this . isLooping = isLooping ; } @Override public boolean isLooping ( ) { return isLooping ; } @Override public void setVolume ( float volume ) { sound . setVolume ( ( int ) ( volume * <int> ) ) ; this . volume = volume ; } @Override public float getVolume ( ) { return volume ; } @Override public void setPan ( float pan , float volume ) { sound . setPan ( ( int ) ( pan * <int> ) ) ; sound . setVolume ( ( int ) ( volume * <int> ) ) ; this . pan = pan ; this . volume = volume ; } @Override public void setPosition ( float position ) { sound . setPosition ( ( int ) ( position * <int> f ) ) ; } @Override public float getPosition ( ) { return sound . getPosition ( ) / <int> f ; } @Override public void dispose ( ) { sound . destruct ( ) ; } @Override public void setOnCompletionListener ( OnCompletionListener listener ) { onCompletionListener = listener ; } @Override public void onfinish ( ) { if ( isLooping ) play ( ) ; else if ( onCompletionListener ! = null ) onCompletionListener . onCompletion ( this ) ; } } 

package com . badlogic . gdx . backends . android ; import android . content . Context ; import android . view . MotionEvent ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input . Buttons ; import com . badlogic . gdx . backends . android . AndroidInput . TouchEvent ; public class AndroidMultiTouchHandler implements AndroidTouchHandler { public void onTouch ( MotionEvent event , AndroidInput input ) { final int action = event . getAction ( ) & MotionEvent . ACTION_MASK ; int pointerIndex = ( event . getAction ( ) & MotionEvent . ACTION_POINTER_INDEX_MASK ) > > MotionEvent . ACTION_POINTER_INDEX_SHIFT ; int pointerId = event . getPointerId ( pointerIndex ) ; int x = <int> , y = <int> ; int realPointerIndex = <int> ; int button = Buttons . LEFT ; long timeStamp = System . nanoTime ( ) ; synchronized ( input ) { switch ( action ) { case MotionEvent . ACTION_DOWN : case MotionEvent . ACTION_POINTER_DOWN : realPointerIndex = input . getFreePointerIndex ( ) ; if ( realPointerIndex > = AndroidInput . NUM_TOUCHES ) break ; input . realId [ realPointerIndex ] = pointerId ; x = ( int ) event . getX ( pointerIndex ) ; y = ( int ) event . getY ( pointerIndex ) ; if ( android . os . Build . VERSION . SDK_INT > = <int> ) button = toGdxButton ( event . getButtonState ( ) ) ; if ( button ! = - <int> ) postTouchEvent ( input , TouchEvent . TOUCH_DOWN , x , y , realPointerIndex , button , timeStamp ) ; input . touchX [ realPointerIndex ] = x ; input . touchY [ realPointerIndex ] = y ; input . deltaX [ realPointerIndex ] = <int> ; input . deltaY [ realPointerIndex ] = <int> ; input . touched [ realPointerIndex ] = ( button ! = - <int> ) ; input . button [ realPointerIndex ] = button ; break ; case MotionEvent . ACTION_UP : case MotionEvent . ACTION_POINTER_UP : case MotionEvent . ACTION_OUTSIDE : case MotionEvent . ACTION_CANCEL : realPointerIndex = input . lookUpPointerIndex ( pointerId ) ; if ( realPointerIndex = = - <int> ) break ; if ( realPointerIndex > = AndroidInput . NUM_TOUCHES ) break ; input . realId [ realPointerIndex ] = - <int> ; x = ( int ) event . getX ( pointerIndex ) ; y = ( int ) event . getY ( pointerIndex ) ; button = input . button [ realPointerIndex ] ; if ( button ! = - <int> ) postTouchEvent ( input , TouchEvent . TOUCH_UP , x , y , realPointerIndex , button , timeStamp ) ; input . touchX [ realPointerIndex ] = x ; input . touchY [ realPointerIndex ] = y ; input . deltaX [ realPointerIndex ] = <int> ; input . deltaY [ realPointerIndex ] = <int> ; input . touched [ realPointerIndex ] = false ; input . button [ realPointerIndex ] = <int> ; break ; case MotionEvent . ACTION_MOVE : int pointerCount = event . getPointerCount ( ) ; for ( int i = <int> ; i < pointerCount ; i + + ) { pointerIndex = i ; pointerId = event . getPointerId ( pointerIndex ) ; x = ( int ) event . getX ( pointerIndex ) ; y = ( int ) event . getY ( pointerIndex ) ; realPointerIndex = input . lookUpPointerIndex ( pointerId ) ; if ( realPointerIndex = = - <int> ) continue ; if ( realPointerIndex > = AndroidInput . NUM_TOUCHES ) break ; button = input . button [ realPointerIndex ] ; if ( button ! = - <int> ) postTouchEvent ( input , TouchEvent . TOUCH_DRAGGED , x , y , realPointerIndex , button , timeStamp ) ; else postTouchEvent ( input , TouchEvent . TOUCH_MOVED , x , y , realPointerIndex , <int> , timeStamp ) ; input . deltaX [ realPointerIndex ] = x - input . touchX [ realPointerIndex ] ; input . deltaY [ realPointerIndex ] = y - input . touchY [ realPointerIndex ] ; input . touchX [ realPointerIndex ] = x ; input . touchY [ realPointerIndex ] = y ; } break ; } } Gdx . app . getGraphics ( ) . requestRendering ( ) ; } private void logAction ( int action , int pointer ) { String actionStr = <str> ; if ( action = = MotionEvent . ACTION_DOWN ) actionStr = <str> ; else if ( action = = MotionEvent . ACTION_POINTER_DOWN ) actionStr = <str> ; else if ( action = = MotionEvent . ACTION_UP ) actionStr = <str> ; else if ( action = = MotionEvent . ACTION_POINTER_UP ) actionStr = <str> ; else if ( action = = MotionEvent . ACTION_OUTSIDE ) actionStr = <str> ; else if ( action = = MotionEvent . ACTION_CANCEL ) actionStr = <str> ; else if ( action = = MotionEvent . ACTION_MOVE ) actionStr = <str> ; else actionStr = <str> + action + <str> ; Gdx . app . log ( <str> , <str> + actionStr + <str> + pointer ) ; } private int toGdxButton ( int button ) { if ( button = = <int> | | button = = <int> ) return Buttons . LEFT ; if ( button = = <int> ) return Buttons . RIGHT ; if ( button = = <int> ) return Buttons . MIDDLE ; if ( button = = <int> ) return Buttons . BACK ; if ( button = = <int> ) return Buttons . FORWARD ; return - <int> ; } private void postTouchEvent ( AndroidInput input , int type , int x , int y , int pointer , int button , long timeStamp ) { TouchEvent event = input . usedTouchEvents . obtain ( ) ; event . timeStamp = timeStamp ; event . pointer = pointer ; event . x = x ; event . y = y ; event . type = type ; event . button = button ; input . touchEvents . add ( event ) ; } public boolean supportsMultitouch ( Context activity ) { return activity . getPackageManager ( ) . hasSystemFeature ( <str> ) ; } } 

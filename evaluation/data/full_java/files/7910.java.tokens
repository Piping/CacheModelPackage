package org . elasticsearch . common . geo ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . lessThan ; public class GeoDistanceTests extends ESTestCase { public void testGeoDistanceSerialization ( ) throws IOException { assertThat ( GeoDistance . PLANE . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( GeoDistance . FACTOR . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( GeoDistance . ARC . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( GeoDistance . SLOPPY_ARC . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( GeoDistance . values ( ) . length , equalTo ( <int> ) ) ; GeoDistance geoDistance = randomFrom ( GeoDistance . PLANE , GeoDistance . FACTOR , GeoDistance . ARC , GeoDistance . SLOPPY_ARC ) ; try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { geoDistance . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { ; GeoDistance copy = GeoDistance . readGeoDistanceFrom ( in ) ; assertEquals ( copy . toString ( ) + <str> + geoDistance . toString ( ) , copy , geoDistance ) ; } } } public void testInvalidReadFrom ( ) throws Exception { try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { if ( randomBoolean ( ) ) { out . writeVInt ( randomIntBetween ( GeoDistance . values ( ) . length , Integer . MAX_VALUE ) ) ; } else { out . writeVInt ( randomIntBetween ( Integer . MIN_VALUE , - <int> ) ) ; } try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { GeoDistance . readGeoDistanceFrom ( in ) ; } catch ( IOException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } public void testDistanceCheck ( ) { GeoDistance . DistanceBoundingCheck check = GeoDistance . distanceBoundingCheck ( <int> , <int> , <int> , DistanceUnit . MILES ) ; assertThat ( check . isWithin ( <float> , <float> ) , equalTo ( true ) ) ; assertThat ( check . isWithin ( <float> , <float> ) , equalTo ( true ) ) ; assertThat ( check . isWithin ( <int> , <int> ) , equalTo ( false ) ) ; check = GeoDistance . distanceBoundingCheck ( <int> , <int> , <int> , DistanceUnit . MILES ) ; assertThat ( check . isWithin ( <int> , - <int> ) , equalTo ( true ) ) ; assertThat ( check . isWithin ( <int> , - <int> ) , equalTo ( false ) ) ; } public void testArcDistanceVsPlaneInEllipsis ( ) { GeoPoint centre = new GeoPoint ( <float> , <float> ) ; GeoPoint northernPoint = new GeoPoint ( <float> , <float> ) ; GeoPoint westernPoint = new GeoPoint ( <float> , <float> ) ; assertThat ( GeoDistance . ARC . calculate ( centre . lat ( ) , centre . lon ( ) , northernPoint . lat ( ) , northernPoint . lon ( ) , DistanceUnit . KILOMETERS ) , lessThan ( <float> ) ) ; assertThat ( GeoDistance . ARC . calculate ( centre . lat ( ) , centre . lon ( ) , westernPoint . lat ( ) , westernPoint . lon ( ) , DistanceUnit . KILOMETERS ) , lessThan ( <float> ) ) ; assertThat ( GeoDistance . PLANE . calculate ( centre . lat ( ) , centre . lon ( ) , northernPoint . lat ( ) , northernPoint . lon ( ) , DistanceUnit . KILOMETERS ) , lessThan ( <float> ) ) ; assertThat ( GeoDistance . PLANE . calculate ( centre . lat ( ) , centre . lon ( ) , westernPoint . lat ( ) , westernPoint . lon ( ) , DistanceUnit . KILOMETERS ) , greaterThan ( <float> ) ) ; } } 

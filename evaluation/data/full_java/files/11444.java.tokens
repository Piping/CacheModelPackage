package org . gradle . api . internal . collections ; import org . gradle . api . specs . Spec ; import org . gradle . api . specs . Specs ; public class CollectionFilter < T > implements Spec < T > { private Class < ? extends T > type ; private Spec < ? super T > spec ; public CollectionFilter ( Class < T > type ) { this ( type , Specs . < T > satisfyAll ( ) ) ; } public CollectionFilter ( Class < ? extends T > type , Spec < ? super T > spec ) { this . type = type ; this . spec = spec ; } public Class < ? extends T > getType ( ) { return type ; } public T filter ( Object object ) { if ( ! type . isInstance ( object ) ) { return null ; } T t = type . cast ( object ) ; if ( spec . isSatisfiedBy ( t ) ) { return t ; } else { return null ; } } public boolean isSatisfiedBy ( T element ) { return filter ( element ) ! = null ; } @SuppressWarnings ( <str> ) public < S extends T > CollectionFilter < S > and ( CollectionFilter < S > other ) { return new CollectionFilter < S > ( other . type , Specs . and ( spec , other . spec ) ) ; } } 

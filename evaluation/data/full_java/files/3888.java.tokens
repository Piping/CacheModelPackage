package org . eclipse . debug . examples . ui . pda . views ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . commands . ExecutionException ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . examples . core . pda . model . PDAThread ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . TreeViewer ; public class PopHandler extends AbstractDataStackViewHandler { @Override protected void doExecute ( DataStackView view , PDAThread thread , ISelection selection ) throws ExecutionException { TreeViewer viewer = ( TreeViewer ) view . getViewer ( ) ; Object popee = selection instanceof IStructuredSelection ? ( ( IStructuredSelection ) selection ) . getFirstElement ( ) : null ; if ( popee ! = null ) { try { IValue [ ] stack = thread . getDataStack ( ) ; List < IValue > restore = new ArrayList < IValue > ( ) ; for ( int i = <int> ; i < stack . length ; i + + ) { Object value = stack [ i ] ; if ( popee . equals ( value ) ) { thread . popData ( ) ; break ; } else { restore . add ( thread . popData ( ) ) ; } } while ( ! restore . isEmpty ( ) ) { IValue value = restore . remove ( restore . size ( ) - <int> ) ; thread . pushData ( value . getValueString ( ) ) ; } } catch ( DebugException e ) { throw new ExecutionException ( <str> , e ) ; } viewer . refresh ( ) ; } } } 

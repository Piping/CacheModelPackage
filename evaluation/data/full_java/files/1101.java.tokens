package org . apache . cassandra . tools . nodetool ; import io . airlift . command . Command ; import io . airlift . command . Option ; import java . lang . management . MemoryUsage ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import javax . management . InstanceNotFoundException ; import org . apache . cassandra . db . ColumnFamilyStoreMBean ; import org . apache . cassandra . io . util . FileUtils ; import org . apache . cassandra . service . CacheServiceMBean ; import org . apache . cassandra . tools . NodeProbe ; import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; @Command ( name = <str> , description = <str> ) public class Info extends NodeToolCmd { @Option ( name = { <str> , <str> } , description = <str> ) private boolean tokens = false ; @Override public void execute ( NodeProbe probe ) { boolean gossipInitialized = probe . isInitialized ( ) ; System . out . printf ( <str> , <str> , probe . getLocalHostId ( ) ) ; System . out . printf ( <str> , <str> , gossipInitialized ) ; System . out . printf ( <str> , <str> , probe . isThriftServerRunning ( ) ) ; System . out . printf ( <str> , <str> , probe . isNativeTransportRunning ( ) ) ; System . out . printf ( <str> , <str> , probe . getLoadString ( ) ) ; if ( gossipInitialized ) System . out . printf ( <str> , <str> , probe . getCurrentGenerationNumber ( ) ) ; else System . out . printf ( <str> , <str> , <int> ) ; long secondsUp = probe . getUptime ( ) / <int> ; System . out . printf ( <str> , <str> , secondsUp ) ; MemoryUsage heapUsage = probe . getHeapMemoryUsage ( ) ; double memUsed = ( double ) heapUsage . getUsed ( ) / ( <int> * <int> ) ; double memMax = ( double ) heapUsage . getMax ( ) / ( <int> * <int> ) ; System . out . printf ( <str> , <str> , memUsed , memMax ) ; try { System . out . printf ( <str> , <str> , getOffHeapMemoryUsed ( probe ) ) ; } catch ( RuntimeException e ) { if ( ! ( e . getCause ( ) instanceof InstanceNotFoundException ) ) throw e ; } System . out . printf ( <str> , <str> , probe . getDataCenter ( ) ) ; System . out . printf ( <str> , <str> , probe . getRack ( ) ) ; System . out . printf ( <str> , <str> , probe . getStorageMetric ( <str> ) ) ; CacheServiceMBean cacheService = probe . getCacheServiceMBean ( ) ; System . out . printf ( <str> , <str> , probe . getCacheMetric ( <str> , <str> ) , FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( <str> , <str> ) ) , FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( <str> , <str> ) ) , probe . getCacheMetric ( <str> , <str> ) , probe . getCacheMetric ( <str> , <str> ) , probe . getCacheMetric ( <str> , <str> ) , cacheService . getKeyCacheSavePeriodInSeconds ( ) ) ; System . out . printf ( <str> , <str> , probe . getCacheMetric ( <str> , <str> ) , FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( <str> , <str> ) ) , FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( <str> , <str> ) ) , probe . getCacheMetric ( <str> , <str> ) , probe . getCacheMetric ( <str> , <str> ) , probe . getCacheMetric ( <str> , <str> ) , cacheService . getRowCacheSavePeriodInSeconds ( ) ) ; System . out . printf ( <str> , <str> , probe . getCacheMetric ( <str> , <str> ) , FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( <str> , <str> ) ) , FileUtils . stringifyFileSize ( ( long ) probe . getCacheMetric ( <str> , <str> ) ) , probe . getCacheMetric ( <str> , <str> ) , probe . getCacheMetric ( <str> , <str> ) , probe . getCacheMetric ( <str> , <str> ) , cacheService . getCounterCacheSavePeriodInSeconds ( ) ) ; if ( probe . isJoined ( ) ) { List < String > tokens = probe . getTokens ( ) ; if ( tokens . size ( ) = = <int> | | this . tokens ) for ( String token : tokens ) System . out . printf ( <str> , <str> , token ) ; else System . out . printf ( <str> , <str> , tokens . size ( ) ) ; } else { System . out . printf ( <str> , <str> ) ; } } private static double getOffHeapMemoryUsed ( NodeProbe probe ) { long offHeapMemUsedInBytes = <int> ; Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > cfamilies = probe . getColumnFamilyStoreMBeanProxies ( ) ; while ( cfamilies . hasNext ( ) ) { Entry < String , ColumnFamilyStoreMBean > entry = cfamilies . next ( ) ; String keyspaceName = entry . getKey ( ) ; String cfName = entry . getValue ( ) . getColumnFamilyName ( ) ; offHeapMemUsedInBytes + = ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , <str> ) ; offHeapMemUsedInBytes + = ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , <str> ) ; offHeapMemUsedInBytes + = ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , <str> ) ; offHeapMemUsedInBytes + = ( Long ) probe . getColumnFamilyMetric ( keyspaceName , cfName , <str> ) ; } return offHeapMemUsedInBytes / ( <int> d * <int> ) ; } } 

package org . gradle . api . internal . tasks . testing . junit ; import org . gradle . api . internal . tasks . testing . detection . TestClassVisitor ; import org . gradle . api . internal . tasks . testing . detection . TestFrameworkDetector ; import org . objectweb . asm . AnnotationVisitor ; import org . objectweb . asm . MethodVisitor ; import org . objectweb . asm . Opcodes ; class JUnitTestClassDetecter extends TestClassVisitor { private boolean isAbstract ; private String className ; private String superClassName ; private boolean test ; JUnitTestClassDetecter ( final TestFrameworkDetector detector ) { super ( detector ) ; } public void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) { isAbstract = ( access & Opcodes . ACC_ABSTRACT ) ! = <int> ; this . className = name ; this . superClassName = superName ; } @Override public void visitInnerClass ( String name , String outerName , String innerName , int access ) { if ( name . equals ( className ) & & ( access & Opcodes . ACC_STATIC ) = = <int> ) { isAbstract = true ; } } public AnnotationVisitor visitAnnotation ( String desc , boolean visible ) { if ( <str> . equals ( desc ) ) { test = true ; } return null ; } public MethodVisitor visitMethod ( int access , String name , String desc , String signature , String [ ] exceptions ) { if ( ! test ) { return new JUnitTestMethodDetecter ( this ) ; } else { return null ; } } public String getClassName ( ) { return className ; } public boolean isAbstract ( ) { return isAbstract ; } public boolean isTest ( ) { return test ; } void setTest ( boolean test ) { this . test = test ; } public String getSuperClassName ( ) { return superClassName ; } } 

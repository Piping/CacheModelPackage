package org . eclipse . ui . console ; import org . eclipse . core . runtime . ISafeRunnable ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . core . runtime . Status ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . jface . viewers . IBasicPropertyConstants ; import org . eclipse . ui . internal . console . ConsoleMessages ; public abstract class AbstractConsole implements IConsole { private ListenerList fListeners ; private String fName = null ; private ImageDescriptor fImageDescriptor = null ; private String fType = null ; class Lifecycle implements IConsoleListener { @Override public void consolesAdded ( IConsole [ ] consoles ) { for ( int i = <int> ; i < consoles . length ; i + + ) { IConsole console = consoles [ i ] ; if ( console = = AbstractConsole . this ) { initialize ( ) ; } } } @Override public void consolesRemoved ( IConsole [ ] consoles ) { for ( int i = <int> ; i < consoles . length ; i + + ) { IConsole console = consoles [ i ] ; if ( console = = AbstractConsole . this ) { ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . removeConsoleListener ( this ) ; destroy ( ) ; } } } } class PropertyNotifier implements ISafeRunnable { private IPropertyChangeListener fListener ; private PropertyChangeEvent fEvent ; @Override public void handleException ( Throwable exception ) { IStatus status = new Status ( IStatus . ERROR , ConsolePlugin . getUniqueIdentifier ( ) , IConsoleConstants . INTERNAL_ERROR , ConsoleMessages . AbstractConsole_0 , exception ) ; ConsolePlugin . log ( status ) ; } @Override public void run ( ) throws Exception { fListener . propertyChange ( fEvent ) ; } public void notify ( PropertyChangeEvent event ) { if ( fListeners = = null ) { return ; } fEvent = event ; Object [ ] copiedListeners = fListeners . getListeners ( ) ; for ( int i = <int> ; i < copiedListeners . length ; i + + ) { fListener = ( IPropertyChangeListener ) copiedListeners [ i ] ; SafeRunner . run ( this ) ; } fListener = null ; } } public AbstractConsole ( String name , ImageDescriptor imageDescriptor , boolean autoLifecycle ) { this ( name , null , imageDescriptor , autoLifecycle ) ; } public AbstractConsole ( String name , String type , ImageDescriptor imageDescriptor , boolean autoLifecycle ) { setName ( name ) ; setType ( type ) ; setImageDescriptor ( imageDescriptor ) ; if ( autoLifecycle ) { ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . addConsoleListener ( new Lifecycle ( ) ) ; } } public AbstractConsole ( String name , ImageDescriptor imageDescriptor ) { this ( name , imageDescriptor , true ) ; } @Override public String getName ( ) { return fName ; } protected void setName ( String name ) { if ( ! name . equals ( fName ) ) { String old = fName ; fName = name ; firePropertyChange ( this , IBasicPropertyConstants . P_TEXT , old , name ) ; } } @Override public ImageDescriptor getImageDescriptor ( ) { return fImageDescriptor ; } protected void setImageDescriptor ( ImageDescriptor imageDescriptor ) { ImageDescriptor old = fImageDescriptor ; fImageDescriptor = imageDescriptor ; firePropertyChange ( this , IBasicPropertyConstants . P_IMAGE , old , imageDescriptor ) ; } @Override public void addPropertyChangeListener ( IPropertyChangeListener listener ) { if ( fListeners = = null ) { fListeners = new ListenerList ( ) ; } fListeners . add ( listener ) ; } @Override public void removePropertyChangeListener ( IPropertyChangeListener listener ) { if ( fListeners ! = null ) { fListeners . remove ( listener ) ; } } public void firePropertyChange ( Object source , String property , Object oldValue , Object newValue ) { if ( fListeners = = null ) { return ; } PropertyNotifier notifier = new PropertyNotifier ( ) ; notifier . notify ( new PropertyChangeEvent ( source , property , oldValue , newValue ) ) ; } public final void initialize ( ) { init ( ) ; } protected void init ( ) { } public final void destroy ( ) { dispose ( ) ; } protected void dispose ( ) { } public void activate ( ) { ConsolePlugin . getDefault ( ) . getConsoleManager ( ) . showConsoleView ( this ) ; } protected void setType ( String typeIdentifier ) { fType = typeIdentifier ; } @Override public String getType ( ) { return fType ; } public String getHelpContextId ( ) { return null ; } } 

package org . gradle . cache . internal . filelock ; import org . gradle . cache . internal . FileLock ; import java . io . DataInput ; import java . io . DataOutput ; import java . io . IOException ; import java . util . Random ; public class DefaultLockStateSerializer implements LockStateSerializer { public int getSize ( ) { return <int> ; } public byte getVersion ( ) { return <int> ; } public LockState createInitialState ( ) { long creationNumber = new Random ( ) . nextLong ( ) ; return new SequenceNumberLockState ( creationNumber , - <int> , <int> ) ; } public void write ( DataOutput dataOutput , LockState lockState ) throws IOException { SequenceNumberLockState state = ( SequenceNumberLockState ) lockState ; dataOutput . writeLong ( state . creationNumber ) ; dataOutput . writeLong ( state . sequenceNumber ) ; } public LockState read ( DataInput dataInput ) throws IOException { long creationNumber = dataInput . readLong ( ) ; long sequenceNumber = dataInput . readLong ( ) ; return new SequenceNumberLockState ( creationNumber , sequenceNumber , sequenceNumber ) ; } private static class SequenceNumberLockState implements LockState { private final long creationNumber ; private final long originalSequenceNumber ; private final long sequenceNumber ; private SequenceNumberLockState ( long creationNumber , long originalSequenceNumber , long sequenceNumber ) { this . creationNumber = creationNumber ; this . originalSequenceNumber = originalSequenceNumber ; this . sequenceNumber = sequenceNumber ; } @Override public String toString ( ) { return String . format ( <str> , creationNumber , sequenceNumber , isDirty ( ) ) ; } public LockState beforeUpdate ( ) { return new SequenceNumberLockState ( creationNumber , originalSequenceNumber , <int> ) ; } public LockState completeUpdate ( ) { long newSequenceNumber ; if ( originalSequenceNumber < = <int> ) { newSequenceNumber = <int> ; } else { newSequenceNumber = originalSequenceNumber + <int> ; } return new SequenceNumberLockState ( creationNumber , newSequenceNumber , newSequenceNumber ) ; } public boolean isDirty ( ) { return sequenceNumber = = <int> | | sequenceNumber ! = originalSequenceNumber ; } public boolean hasBeenUpdatedSince ( FileLock . State state ) { SequenceNumberLockState other = ( SequenceNumberLockState ) state ; return sequenceNumber ! = other . sequenceNumber | | creationNumber ! = other . creationNumber ; } } } 

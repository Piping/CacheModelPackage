package com . badlogic . gdx . math ; import java . io . Serializable ; public class Matrix4 implements Serializable { private static final long serialVersionUID = - <int> ; public static final int M00 = <int> ; public static final int M01 = <int> ; public static final int M02 = <int> ; public static final int M03 = <int> ; public static final int M10 = <int> ; public static final int M11 = <int> ; public static final int M12 = <int> ; public static final int M13 = <int> ; public static final int M20 = <int> ; public static final int M21 = <int> ; public static final int M22 = <int> ; public static final int M23 = <int> ; public static final int M30 = <int> ; public static final int M31 = <int> ; public static final int M32 = <int> ; public static final int M33 = <int> ; private static final float tmp [ ] = new float [ <int> ] ; public final float val [ ] = new float [ <int> ] ; public Matrix4 ( ) { val [ M00 ] = <float> ; val [ M11 ] = <float> ; val [ M22 ] = <float> ; val [ M33 ] = <float> ; } public Matrix4 ( Matrix4 matrix ) { this . set ( matrix ) ; } public Matrix4 ( float [ ] values ) { this . set ( values ) ; } public Matrix4 ( Quaternion quaternion ) { this . set ( quaternion ) ; } public Matrix4 ( Vector3 position , Quaternion rotation , Vector3 scale ) { set ( position , rotation , scale ) ; } public Matrix4 set ( Matrix4 matrix ) { return this . set ( matrix . val ) ; } public Matrix4 set ( float [ ] values ) { System . arraycopy ( values , <int> , val , <int> , val . length ) ; return this ; } public Matrix4 set ( Quaternion quaternion ) { return set ( quaternion . x , quaternion . y , quaternion . z , quaternion . w ) ; } public Matrix4 set ( float quaternionX , float quaternionY , float quaternionZ , float quaternionW ) { return set ( <float> , <float> , <float> , quaternionX , quaternionY , quaternionZ , quaternionW ) ; } public Matrix4 set ( Vector3 position , Quaternion orientation ) { return set ( position . x , position . y , position . z , orientation . x , orientation . y , orientation . z , orientation . w ) ; } public Matrix4 set ( float translationX , float translationY , float translationZ , float quaternionX , float quaternionY , float quaternionZ , float quaternionW ) { final float xs = quaternionX * <float> , ys = quaternionY * <float> , zs = quaternionZ * <float> ; final float wx = quaternionW * xs , wy = quaternionW * ys , wz = quaternionW * zs ; final float xx = quaternionX * xs , xy = quaternionX * ys , xz = quaternionX * zs ; final float yy = quaternionY * ys , yz = quaternionY * zs , zz = quaternionZ * zs ; val [ M00 ] = ( <float> - ( yy + zz ) ) ; val [ M01 ] = ( xy - wz ) ; val [ M02 ] = ( xz + wy ) ; val [ M03 ] = translationX ; val [ M10 ] = ( xy + wz ) ; val [ M11 ] = ( <float> - ( xx + zz ) ) ; val [ M12 ] = ( yz - wx ) ; val [ M13 ] = translationY ; val [ M20 ] = ( xz - wy ) ; val [ M21 ] = ( yz + wx ) ; val [ M22 ] = ( <float> - ( xx + yy ) ) ; val [ M23 ] = translationZ ; val [ M30 ] = <float> ; val [ M31 ] = <float> ; val [ M32 ] = <float> ; val [ M33 ] = <float> ; return this ; } public Matrix4 set ( Vector3 position , Quaternion orientation , Vector3 scale ) { return set ( position . x , position . y , position . z , orientation . x , orientation . y , orientation . z , orientation . w , scale . x , scale . y , scale . z ) ; } public Matrix4 set ( float translationX , float translationY , float translationZ , float quaternionX , float quaternionY , float quaternionZ , float quaternionW , float scaleX , float scaleY , float scaleZ ) { final float xs = quaternionX * <float> , ys = quaternionY * <float> , zs = quaternionZ * <float> ; final float wx = quaternionW * xs , wy = quaternionW * ys , wz = quaternionW * zs ; final float xx = quaternionX * xs , xy = quaternionX * ys , xz = quaternionX * zs ; final float yy = quaternionY * ys , yz = quaternionY * zs , zz = quaternionZ * zs ; val [ M00 ] = scaleX * ( <float> - ( yy + zz ) ) ; val [ M01 ] = scaleY * ( xy - wz ) ; val [ M02 ] = scaleZ * ( xz + wy ) ; val [ M03 ] = translationX ; val [ M10 ] = scaleX * ( xy + wz ) ; val [ M11 ] = scaleY * ( <float> - ( xx + zz ) ) ; val [ M12 ] = scaleZ * ( yz - wx ) ; val [ M13 ] = translationY ; val [ M20 ] = scaleX * ( xz - wy ) ; val [ M21 ] = scaleY * ( yz + wx ) ; val [ M22 ] = scaleZ * ( <float> - ( xx + yy ) ) ; val [ M23 ] = translationZ ; val [ M30 ] = <float> ; val [ M31 ] = <float> ; val [ M32 ] = <float> ; val [ M33 ] = <float> ; return this ; } public Matrix4 set ( Vector3 xAxis , Vector3 yAxis , Vector3 zAxis , Vector3 pos ) { val [ M00 ] = xAxis . x ; val [ M01 ] = xAxis . y ; val [ M02 ] = xAxis . z ; val [ M10 ] = yAxis . x ; val [ M11 ] = yAxis . y ; val [ M12 ] = yAxis . z ; val [ M20 ] = zAxis . x ; val [ M21 ] = zAxis . y ; val [ M22 ] = zAxis . z ; val [ M03 ] = pos . x ; val [ M13 ] = pos . y ; val [ M23 ] = pos . z ; val [ M30 ] = <int> ; val [ M31 ] = <int> ; val [ M32 ] = <int> ; val [ M33 ] = <int> ; return this ; } public Matrix4 cpy ( ) { return new Matrix4 ( this ) ; } public Matrix4 trn ( Vector3 vector ) { val [ M03 ] + = vector . x ; val [ M13 ] + = vector . y ; val [ M23 ] + = vector . z ; return this ; } public Matrix4 trn ( float x , float y , float z ) { val [ M03 ] + = x ; val [ M13 ] + = y ; val [ M23 ] + = z ; return this ; } public float [ ] getValues ( ) { return val ; } public Matrix4 mul ( Matrix4 matrix ) { mul ( val , matrix . val ) ; return this ; } public Matrix4 mulLeft ( Matrix4 matrix ) { tmpMat . set ( matrix ) ; mul ( tmpMat . val , this . val ) ; return set ( tmpMat ) ; } public Matrix4 tra ( ) { tmp [ M00 ] = val [ M00 ] ; tmp [ M01 ] = val [ M10 ] ; tmp [ M02 ] = val [ M20 ] ; tmp [ M03 ] = val [ M30 ] ; tmp [ M10 ] = val [ M01 ] ; tmp [ M11 ] = val [ M11 ] ; tmp [ M12 ] = val [ M21 ] ; tmp [ M13 ] = val [ M31 ] ; tmp [ M20 ] = val [ M02 ] ; tmp [ M21 ] = val [ M12 ] ; tmp [ M22 ] = val [ M22 ] ; tmp [ M23 ] = val [ M32 ] ; tmp [ M30 ] = val [ M03 ] ; tmp [ M31 ] = val [ M13 ] ; tmp [ M32 ] = val [ M23 ] ; tmp [ M33 ] = val [ M33 ] ; return set ( tmp ) ; } public Matrix4 idt ( ) { val [ M00 ] = <int> ; val [ M01 ] = <int> ; val [ M02 ] = <int> ; val [ M03 ] = <int> ; val [ M10 ] = <int> ; val [ M11 ] = <int> ; val [ M12 ] = <int> ; val [ M13 ] = <int> ; val [ M20 ] = <int> ; val [ M21 ] = <int> ; val [ M22 ] = <int> ; val [ M23 ] = <int> ; val [ M30 ] = <int> ; val [ M31 ] = <int> ; val [ M32 ] = <int> ; val [ M33 ] = <int> ; return this ; } public Matrix4 inv ( ) { float l_det = val [ M30 ] * val [ M21 ] * val [ M12 ] * val [ M03 ] - val [ M20 ] * val [ M31 ] * val [ M12 ] * val [ M03 ] - val [ M30 ] * val [ M11 ] * val [ M22 ] * val [ M03 ] + val [ M10 ] * val [ M31 ] * val [ M22 ] * val [ M03 ] + val [ M20 ] * val [ M11 ] * val [ M32 ] * val [ M03 ] - val [ M10 ] * val [ M21 ] * val [ M32 ] * val [ M03 ] - val [ M30 ] * val [ M21 ] * val [ M02 ] * val [ M13 ] + val [ M20 ] * val [ M31 ] * val [ M02 ] * val [ M13 ] + val [ M30 ] * val [ M01 ] * val [ M22 ] * val [ M13 ] - val [ M00 ] * val [ M31 ] * val [ M22 ] * val [ M13 ] - val [ M20 ] * val [ M01 ] * val [ M32 ] * val [ M13 ] + val [ M00 ] * val [ M21 ] * val [ M32 ] * val [ M13 ] + val [ M30 ] * val [ M11 ] * val [ M02 ] * val [ M23 ] - val [ M10 ] * val [ M31 ] * val [ M02 ] * val [ M23 ] - val [ M30 ] * val [ M01 ] * val [ M12 ] * val [ M23 ] + val [ M00 ] * val [ M31 ] * val [ M12 ] * val [ M23 ] + val [ M10 ] * val [ M01 ] * val [ M32 ] * val [ M23 ] - val [ M00 ] * val [ M11 ] * val [ M32 ] * val [ M23 ] - val [ M20 ] * val [ M11 ] * val [ M02 ] * val [ M33 ] + val [ M10 ] * val [ M21 ] * val [ M02 ] * val [ M33 ] + val [ M20 ] * val [ M01 ] * val [ M12 ] * val [ M33 ] - val [ M00 ] * val [ M21 ] * val [ M12 ] * val [ M33 ] - val [ M10 ] * val [ M01 ] * val [ M22 ] * val [ M33 ] + val [ M00 ] * val [ M11 ] * val [ M22 ] * val [ M33 ] ; if ( l_det = = <float> ) throw new RuntimeException ( <str> ) ; float inv_det = <float> / l_det ; tmp [ M00 ] = val [ M12 ] * val [ M23 ] * val [ M31 ] - val [ M13 ] * val [ M22 ] * val [ M31 ] + val [ M13 ] * val [ M21 ] * val [ M32 ] - val [ M11 ] * val [ M23 ] * val [ M32 ] - val [ M12 ] * val [ M21 ] * val [ M33 ] + val [ M11 ] * val [ M22 ] * val [ M33 ] ; tmp [ M01 ] = val [ M03 ] * val [ M22 ] * val [ M31 ] - val [ M02 ] * val [ M23 ] * val [ M31 ] - val [ M03 ] * val [ M21 ] * val [ M32 ] + val [ M01 ] * val [ M23 ] * val [ M32 ] + val [ M02 ] * val [ M21 ] * val [ M33 ] - val [ M01 ] * val [ M22 ] * val [ M33 ] ; tmp [ M02 ] = val [ M02 ] * val [ M13 ] * val [ M31 ] - val [ M03 ] * val [ M12 ] * val [ M31 ] + val [ M03 ] * val [ M11 ] * val [ M32 ] - val [ M01 ] * val [ M13 ] * val [ M32 ] - val [ M02 ] * val [ M11 ] * val [ M33 ] + val [ M01 ] * val [ M12 ] * val [ M33 ] ; tmp [ M03 ] = val [ M03 ] * val [ M12 ] * val [ M21 ] - val [ M02 ] * val [ M13 ] * val [ M21 ] - val [ M03 ] * val [ M11 ] * val [ M22 ] + val [ M01 ] * val [ M13 ] * val [ M22 ] + val [ M02 ] * val [ M11 ] * val [ M23 ] - val [ M01 ] * val [ M12 ] * val [ M23 ] ; tmp [ M10 ] = val [ M13 ] * val [ M22 ] * val [ M30 ] - val [ M12 ] * val [ M23 ] * val [ M30 ] - val [ M13 ] * val [ M20 ] * val [ M32 ] + val [ M10 ] * val [ M23 ] * val [ M32 ] + val [ M12 ] * val [ M20 ] * val [ M33 ] - val [ M10 ] * val [ M22 ] * val [ M33 ] ; tmp [ M11 ] = val [ M02 ] * val [ M23 ] * val [ M30 ] - val [ M03 ] * val [ M22 ] * val [ M30 ] + val [ M03 ] * val [ M20 ] * val [ M32 ] - val [ M00 ] * val [ M23 ] * val [ M32 ] - val [ M02 ] * val [ M20 ] * val [ M33 ] + val [ M00 ] * val [ M22 ] * val [ M33 ] ; tmp [ M12 ] = val [ M03 ] * val [ M12 ] * val [ M30 ] - val [ M02 ] * val [ M13 ] * val [ M30 ] - val [ M03 ] * val [ M10 ] * val [ M32 ] + val [ M00 ] * val [ M13 ] * val [ M32 ] + val [ M02 ] * val [ M10 ] * val [ M33 ] - val [ M00 ] * val [ M12 ] * val [ M33 ] ; tmp [ M13 ] = val [ M02 ] * val [ M13 ] * val [ M20 ] - val [ M03 ] * val [ M12 ] * val [ M20 ] + val [ M03 ] * val [ M10 ] * val [ M22 ] - val [ M00 ] * val [ M13 ] * val [ M22 ] - val [ M02 ] * val [ M10 ] * val [ M23 ] + val [ M00 ] * val [ M12 ] * val [ M23 ] ; tmp [ M20 ] = val [ M11 ] * val [ M23 ] * val [ M30 ] - val [ M13 ] * val [ M21 ] * val [ M30 ] + val [ M13 ] * val [ M20 ] * val [ M31 ] - val [ M10 ] * val [ M23 ] * val [ M31 ] - val [ M11 ] * val [ M20 ] * val [ M33 ] + val [ M10 ] * val [ M21 ] * val [ M33 ] ; tmp [ M21 ] = val [ M03 ] * val [ M21 ] * val [ M30 ] - val [ M01 ] * val [ M23 ] * val [ M30 ] - val [ M03 ] * val [ M20 ] * val [ M31 ] + val [ M00 ] * val [ M23 ] * val [ M31 ] + val [ M01 ] * val [ M20 ] * val [ M33 ] - val [ M00 ] * val [ M21 ] * val [ M33 ] ; tmp [ M22 ] = val [ M01 ] * val [ M13 ] * val [ M30 ] - val [ M03 ] * val [ M11 ] * val [ M30 ] + val [ M03 ] * val [ M10 ] * val [ M31 ] - val [ M00 ] * val [ M13 ] * val [ M31 ] - val [ M01 ] * val [ M10 ] * val [ M33 ] + val [ M00 ] * val [ M11 ] * val [ M33 ] ; tmp [ M23 ] = val [ M03 ] * val [ M11 ] * val [ M20 ] - val [ M01 ] * val [ M13 ] * val [ M20 ] - val [ M03 ] * val [ M10 ] * val [ M21 ] + val [ M00 ] * val [ M13 ] * val [ M21 ] + val [ M01 ] * val [ M10 ] * val [ M23 ] - val [ M00 ] * val [ M11 ] * val [ M23 ] ; tmp [ M30 ] = val [ M12 ] * val [ M21 ] * val [ M30 ] - val [ M11 ] * val [ M22 ] * val [ M30 ] - val [ M12 ] * val [ M20 ] * val [ M31 ] + val [ M10 ] * val [ M22 ] * val [ M31 ] + val [ M11 ] * val [ M20 ] * val [ M32 ] - val [ M10 ] * val [ M21 ] * val [ M32 ] ; tmp [ M31 ] = val [ M01 ] * val [ M22 ] * val [ M30 ] - val [ M02 ] * val [ M21 ] * val [ M30 ] + val [ M02 ] * val [ M20 ] * val [ M31 ] - val [ M00 ] * val [ M22 ] * val [ M31 ] - val [ M01 ] * val [ M20 ] * val [ M32 ] + val [ M00 ] * val [ M21 ] * val [ M32 ] ; tmp [ M32 ] = val [ M02 ] * val [ M11 ] * val [ M30 ] - val [ M01 ] * val [ M12 ] * val [ M30 ] - val [ M02 ] * val [ M10 ] * val [ M31 ] + val [ M00 ] * val [ M12 ] * val [ M31 ] + val [ M01 ] * val [ M10 ] * val [ M32 ] - val [ M00 ] * val [ M11 ] * val [ M32 ] ; tmp [ M33 ] = val [ M01 ] * val [ M12 ] * val [ M20 ] - val [ M02 ] * val [ M11 ] * val [ M20 ] + val [ M02 ] * val [ M10 ] * val [ M21 ] - val [ M00 ] * val [ M12 ] * val [ M21 ] - val [ M01 ] * val [ M10 ] * val [ M22 ] + val [ M00 ] * val [ M11 ] * val [ M22 ] ; val [ M00 ] = tmp [ M00 ] * inv_det ; val [ M01 ] = tmp [ M01 ] * inv_det ; val [ M02 ] = tmp [ M02 ] * inv_det ; val [ M03 ] = tmp [ M03 ] * inv_det ; val [ M10 ] = tmp [ M10 ] * inv_det ; val [ M11 ] = tmp [ M11 ] * inv_det ; val [ M12 ] = tmp [ M12 ] * inv_det ; val [ M13 ] = tmp [ M13 ] * inv_det ; val [ M20 ] = tmp [ M20 ] * inv_det ; val [ M21 ] = tmp [ M21 ] * inv_det ; val [ M22 ] = tmp [ M22 ] * inv_det ; val [ M23 ] = tmp [ M23 ] * inv_det ; val [ M30 ] = tmp [ M30 ] * inv_det ; val [ M31 ] = tmp [ M31 ] * inv_det ; val [ M32 ] = tmp [ M32 ] * inv_det ; val [ M33 ] = tmp [ M33 ] * inv_det ; return this ; } public float det ( ) { return val [ M30 ] * val [ M21 ] * val [ M12 ] * val [ M03 ] - val [ M20 ] * val [ M31 ] * val [ M12 ] * val [ M03 ] - val [ M30 ] * val [ M11 ] * val [ M22 ] * val [ M03 ] + val [ M10 ] * val [ M31 ] * val [ M22 ] * val [ M03 ] + val [ M20 ] * val [ M11 ] * val [ M32 ] * val [ M03 ] - val [ M10 ] * val [ M21 ] * val [ M32 ] * val [ M03 ] - val [ M30 ] * val [ M21 ] * val [ M02 ] * val [ M13 ] + val [ M20 ] * val [ M31 ] * val [ M02 ] * val [ M13 ] + val [ M30 ] * val [ M01 ] * val [ M22 ] * val [ M13 ] - val [ M00 ] * val [ M31 ] * val [ M22 ] * val [ M13 ] - val [ M20 ] * val [ M01 ] * val [ M32 ] * val [ M13 ] + val [ M00 ] * val [ M21 ] * val [ M32 ] * val [ M13 ] + val [ M30 ] * val [ M11 ] * val [ M02 ] * val [ M23 ] - val [ M10 ] * val [ M31 ] * val [ M02 ] * val [ M23 ] - val [ M30 ] * val [ M01 ] * val [ M12 ] * val [ M23 ] + val [ M00 ] * val [ M31 ] * val [ M12 ] * val [ M23 ] + val [ M10 ] * val [ M01 ] * val [ M32 ] * val [ M23 ] - val [ M00 ] * val [ M11 ] * val [ M32 ] * val [ M23 ] - val [ M20 ] * val [ M11 ] * val [ M02 ] * val [ M33 ] + val [ M10 ] * val [ M21 ] * val [ M02 ] * val [ M33 ] + val [ M20 ] * val [ M01 ] * val [ M12 ] * val [ M33 ] - val [ M00 ] * val [ M21 ] * val [ M12 ] * val [ M33 ] - val [ M10 ] * val [ M01 ] * val [ M22 ] * val [ M33 ] + val [ M00 ] * val [ M11 ] * val [ M22 ] * val [ M33 ] ; } public float det3x3 ( ) { return val [ M00 ] * val [ M11 ] * val [ M22 ] + val [ M01 ] * val [ M12 ] * val [ M20 ] + val [ M02 ] * val [ M10 ] * val [ M21 ] - val [ M00 ] * val [ M12 ] * val [ M21 ] - val [ M01 ] * val [ M10 ] * val [ M22 ] - val [ M02 ] * val [ M11 ] * val [ M20 ] ; } public Matrix4 setToProjection ( float near , float far , float fovy , float aspectRatio ) { idt ( ) ; float l_fd = ( float ) ( <float> / Math . tan ( ( fovy * ( Math . PI / <int> ) ) / <float> ) ) ; float l_a1 = ( far + near ) / ( near - far ) ; float l_a2 = ( <int> * far * near ) / ( near - far ) ; val [ M00 ] = l_fd / aspectRatio ; val [ M10 ] = <int> ; val [ M20 ] = <int> ; val [ M30 ] = <int> ; val [ M01 ] = <int> ; val [ M11 ] = l_fd ; val [ M21 ] = <int> ; val [ M31 ] = <int> ; val [ M02 ] = <int> ; val [ M12 ] = <int> ; val [ M22 ] = l_a1 ; val [ M32 ] = - <int> ; val [ M03 ] = <int> ; val [ M13 ] = <int> ; val [ M23 ] = l_a2 ; val [ M33 ] = <int> ; return this ; } public Matrix4 setToProjection ( float left , float right , float bottom , float top , float near , float far ) { float x = <float> * near / ( right - left ) ; float y = <float> * near / ( top - bottom ) ; float a = ( right + left ) / ( right - left ) ; float b = ( top + bottom ) / ( top - bottom ) ; float l_a1 = ( far + near ) / ( near - far ) ; float l_a2 = ( <int> * far * near ) / ( near - far ) ; val [ M00 ] = x ; val [ M10 ] = <int> ; val [ M20 ] = <int> ; val [ M30 ] = <int> ; val [ M01 ] = <int> ; val [ M11 ] = y ; val [ M21 ] = <int> ; val [ M31 ] = <int> ; val [ M02 ] = a ; val [ M12 ] = b ; val [ M22 ] = l_a1 ; val [ M32 ] = - <int> ; val [ M03 ] = <int> ; val [ M13 ] = <int> ; val [ M23 ] = l_a2 ; val [ M33 ] = <int> ; return this ; } public Matrix4 setToOrtho2D ( float x , float y , float width , float height ) { setToOrtho ( x , x + width , y , y + height , <int> , <int> ) ; return this ; } public Matrix4 setToOrtho2D ( float x , float y , float width , float height , float near , float far ) { setToOrtho ( x , x + width , y , y + height , near , far ) ; return this ; } public Matrix4 setToOrtho ( float left , float right , float bottom , float top , float near , float far ) { this . idt ( ) ; float x_orth = <int> / ( right - left ) ; float y_orth = <int> / ( top - bottom ) ; float z_orth = - <int> / ( far - near ) ; float tx = - ( right + left ) / ( right - left ) ; float ty = - ( top + bottom ) / ( top - bottom ) ; float tz = - ( far + near ) / ( far - near ) ; val [ M00 ] = x_orth ; val [ M10 ] = <int> ; val [ M20 ] = <int> ; val [ M30 ] = <int> ; val [ M01 ] = <int> ; val [ M11 ] = y_orth ; val [ M21 ] = <int> ; val [ M31 ] = <int> ; val [ M02 ] = <int> ; val [ M12 ] = <int> ; val [ M22 ] = z_orth ; val [ M32 ] = <int> ; val [ M03 ] = tx ; val [ M13 ] = ty ; val [ M23 ] = tz ; val [ M33 ] = <int> ; return this ; } public Matrix4 setTranslation ( Vector3 vector ) { val [ M03 ] = vector . x ; val [ M13 ] = vector . y ; val [ M23 ] = vector . z ; return this ; } public Matrix4 setTranslation ( float x , float y , float z ) { val [ M03 ] = x ; val [ M13 ] = y ; val [ M23 ] = z ; return this ; } public Matrix4 setToTranslation ( Vector3 vector ) { idt ( ) ; val [ M03 ] = vector . x ; val [ M13 ] = vector . y ; val [ M23 ] = vector . z ; return this ; } public Matrix4 setToTranslation ( float x , float y , float z ) { idt ( ) ; val [ M03 ] = x ; val [ M13 ] = y ; val [ M23 ] = z ; return this ; } public Matrix4 setToTranslationAndScaling ( Vector3 translation , Vector3 scaling ) { idt ( ) ; val [ M03 ] = translation . x ; val [ M13 ] = translation . y ; val [ M23 ] = translation . z ; val [ M00 ] = scaling . x ; val [ M11 ] = scaling . y ; val [ M22 ] = scaling . z ; return this ; } public Matrix4 setToTranslationAndScaling ( float translationX , float translationY , float translationZ , float scalingX , float scalingY , float scalingZ ) { idt ( ) ; val [ M03 ] = translationX ; val [ M13 ] = translationY ; val [ M23 ] = translationZ ; val [ M00 ] = scalingX ; val [ M11 ] = scalingY ; val [ M22 ] = scalingZ ; return this ; } static Quaternion quat = new Quaternion ( ) ; static Quaternion quat2 = new Quaternion ( ) ; public Matrix4 setToRotation ( Vector3 axis , float degrees ) { if ( degrees = = <int> ) { idt ( ) ; return this ; } return set ( quat . set ( axis , degrees ) ) ; } public Matrix4 setToRotationRad ( Vector3 axis , float radians ) { if ( radians = = <int> ) { idt ( ) ; return this ; } return set ( quat . setFromAxisRad ( axis , radians ) ) ; } public Matrix4 setToRotation ( float axisX , float axisY , float axisZ , float degrees ) { if ( degrees = = <int> ) { idt ( ) ; return this ; } return set ( quat . setFromAxis ( axisX , axisY , axisZ , degrees ) ) ; } public Matrix4 setToRotationRad ( float axisX , float axisY , float axisZ , float radians ) { if ( radians = = <int> ) { idt ( ) ; return this ; } return set ( quat . setFromAxisRad ( axisX , axisY , axisZ , radians ) ) ; } public Matrix4 setToRotation ( final Vector3 v1 , final Vector3 v2 ) { return set ( quat . setFromCross ( v1 , v2 ) ) ; } public Matrix4 setToRotation ( final float x1 , final float y1 , final float z1 , final float x2 , final float y2 , final float z2 ) { return set ( quat . setFromCross ( x1 , y1 , z1 , x2 , y2 , z2 ) ) ; } public Matrix4 setFromEulerAngles ( float yaw , float pitch , float roll ) { quat . setEulerAngles ( yaw , pitch , roll ) ; return set ( quat ) ; } public Matrix4 setFromEulerAnglesRad ( float yaw , float pitch , float roll ) { quat . setEulerAnglesRad ( yaw , pitch , roll ) ; return set ( quat ) ; } public Matrix4 setToScaling ( Vector3 vector ) { idt ( ) ; val [ M00 ] = vector . x ; val [ M11 ] = vector . y ; val [ M22 ] = vector . z ; return this ; } public Matrix4 setToScaling ( float x , float y , float z ) { idt ( ) ; val [ M00 ] = x ; val [ M11 ] = y ; val [ M22 ] = z ; return this ; } static final Vector3 l_vez = new Vector3 ( ) ; static final Vector3 l_vex = new Vector3 ( ) ; static final Vector3 l_vey = new Vector3 ( ) ; public Matrix4 setToLookAt ( Vector3 direction , Vector3 up ) { l_vez . set ( direction ) . nor ( ) ; l_vex . set ( direction ) . nor ( ) ; l_vex . crs ( up ) . nor ( ) ; l_vey . set ( l_vex ) . crs ( l_vez ) . nor ( ) ; idt ( ) ; val [ M00 ] = l_vex . x ; val [ M01 ] = l_vex . y ; val [ M02 ] = l_vex . z ; val [ M10 ] = l_vey . x ; val [ M11 ] = l_vey . y ; val [ M12 ] = l_vey . z ; val [ M20 ] = - l_vez . x ; val [ M21 ] = - l_vez . y ; val [ M22 ] = - l_vez . z ; return this ; } static final Vector3 tmpVec = new Vector3 ( ) ; static final Matrix4 tmpMat = new Matrix4 ( ) ; public Matrix4 setToLookAt ( Vector3 position , Vector3 target , Vector3 up ) { tmpVec . set ( target ) . sub ( position ) ; setToLookAt ( tmpVec , up ) ; this . mul ( tmpMat . setToTranslation ( - position . x , - position . y , - position . z ) ) ; return this ; } static final Vector3 right = new Vector3 ( ) ; static final Vector3 tmpForward = new Vector3 ( ) ; static final Vector3 tmpUp = new Vector3 ( ) ; public Matrix4 setToWorld ( Vector3 position , Vector3 forward , Vector3 up ) { tmpForward . set ( forward ) . nor ( ) ; right . set ( tmpForward ) . crs ( up ) . nor ( ) ; tmpUp . set ( right ) . crs ( tmpForward ) . nor ( ) ; this . set ( right , tmpUp , tmpForward . scl ( - <int> ) , position ) ; return this ; } public String toString ( ) { return <str> + val [ M00 ] + <str> + val [ M01 ] + <str> + val [ M02 ] + <str> + val [ M03 ] + <str> + <str> + val [ M10 ] + <str> + val [ M11 ] + <str> + val [ M12 ] + <str> + val [ M13 ] + <str> + <str> + val [ M20 ] + <str> + val [ M21 ] + <str> + val [ M22 ] + <str> + val [ M23 ] + <str> + <str> + val [ M30 ] + <str> + val [ M31 ] + <str> + val [ M32 ] + <str> + val [ M33 ] + <str> ; } public Matrix4 lerp ( Matrix4 matrix , float alpha ) { for ( int i = <int> ; i < <int> ; i + + ) this . val [ i ] = this . val [ i ] * ( <int> - alpha ) + matrix . val [ i ] * alpha ; return this ; } public Matrix4 avg ( Matrix4 other , float w ) { getScale ( tmpVec ) ; other . getScale ( tmpForward ) ; getRotation ( quat ) ; other . getRotation ( quat2 ) ; getTranslation ( tmpUp ) ; other . getTranslation ( right ) ; setToScaling ( tmpVec . scl ( w ) . add ( tmpForward . scl ( <int> - w ) ) ) ; rotate ( quat . slerp ( quat2 , <int> - w ) ) ; setTranslation ( tmpUp . scl ( w ) . add ( right . scl ( <int> - w ) ) ) ; return this ; } public Matrix4 avg ( Matrix4 [ ] t ) { final float w = <float> / t . length ; tmpVec . set ( t [ <int> ] . getScale ( tmpUp ) . scl ( w ) ) ; quat . set ( t [ <int> ] . getRotation ( quat2 ) . exp ( w ) ) ; tmpForward . set ( t [ <int> ] . getTranslation ( tmpUp ) . scl ( w ) ) ; for ( int i = <int> ; i < t . length ; i + + ) { tmpVec . add ( t [ i ] . getScale ( tmpUp ) . scl ( w ) ) ; quat . mul ( t [ i ] . getRotation ( quat2 ) . exp ( w ) ) ; tmpForward . add ( t [ i ] . getTranslation ( tmpUp ) . scl ( w ) ) ; } quat . nor ( ) ; setToScaling ( tmpVec ) ; rotate ( quat ) ; setTranslation ( tmpForward ) ; return this ; } public Matrix4 avg ( Matrix4 [ ] t , float [ ] w ) { tmpVec . set ( t [ <int> ] . getScale ( tmpUp ) . scl ( w [ <int> ] ) ) ; quat . set ( t [ <int> ] . getRotation ( quat2 ) . exp ( w [ <int> ] ) ) ; tmpForward . set ( t [ <int> ] . getTranslation ( tmpUp ) . scl ( w [ <int> ] ) ) ; for ( int i = <int> ; i < t . length ; i + + ) { tmpVec . add ( t [ i ] . getScale ( tmpUp ) . scl ( w [ i ] ) ) ; quat . mul ( t [ i ] . getRotation ( quat2 ) . exp ( w [ i ] ) ) ; tmpForward . add ( t [ i ] . getTranslation ( tmpUp ) . scl ( w [ i ] ) ) ; } quat . nor ( ) ; setToScaling ( tmpVec ) ; rotate ( quat ) ; setTranslation ( tmpForward ) ; return this ; } public Matrix4 set ( Matrix3 mat ) { val [ <int> ] = mat . val [ <int> ] ; val [ <int> ] = mat . val [ <int> ] ; val [ <int> ] = mat . val [ <int> ] ; val [ <int> ] = <int> ; val [ <int> ] = mat . val [ <int> ] ; val [ <int> ] = mat . val [ <int> ] ; val [ <int> ] = mat . val [ <int> ] ; val [ <int> ] = <int> ; val [ <int> ] = <int> ; val [ <int> ] = <int> ; val [ <int> ] = <int> ; val [ <int> ] = <int> ; val [ <int> ] = mat . val [ <int> ] ; val [ <int> ] = mat . val [ <int> ] ; val [ <int> ] = <int> ; val [ <int> ] = mat . val [ <int> ] ; return this ; } public Matrix4 set ( Affine2 affine ) { val [ M00 ] = affine . m00 ; val [ M10 ] = affine . m10 ; val [ M20 ] = <int> ; val [ M30 ] = <int> ; val [ M01 ] = affine . m01 ; val [ M11 ] = affine . m11 ; val [ M21 ] = <int> ; val [ M31 ] = <int> ; val [ M02 ] = <int> ; val [ M12 ] = <int> ; val [ M22 ] = <int> ; val [ M32 ] = <int> ; val [ M03 ] = affine . m02 ; val [ M13 ] = affine . m12 ; val [ M23 ] = <int> ; val [ M33 ] = <int> ; return this ; } public Matrix4 setAsAffine ( Affine2 affine ) { val [ M00 ] = affine . m00 ; val [ M10 ] = affine . m10 ; val [ M01 ] = affine . m01 ; val [ M11 ] = affine . m11 ; val [ M03 ] = affine . m02 ; val [ M13 ] = affine . m12 ; return this ; } public Matrix4 setAsAffine ( Matrix4 mat ) { val [ M00 ] = mat . val [ M00 ] ; val [ M10 ] = mat . val [ M10 ] ; val [ M01 ] = mat . val [ M01 ] ; val [ M11 ] = mat . val [ M11 ] ; val [ M03 ] = mat . val [ M03 ] ; val [ M13 ] = mat . val [ M13 ] ; return this ; } public Matrix4 scl ( Vector3 scale ) { val [ M00 ] * = scale . x ; val [ M11 ] * = scale . y ; val [ M22 ] * = scale . z ; return this ; } public Matrix4 scl ( float x , float y , float z ) { val [ M00 ] * = x ; val [ M11 ] * = y ; val [ M22 ] * = z ; return this ; } public Matrix4 scl ( float scale ) { val [ M00 ] * = scale ; val [ M11 ] * = scale ; val [ M22 ] * = scale ; return this ; } public Vector3 getTranslation ( Vector3 position ) { position . x = val [ M03 ] ; position . y = val [ M13 ] ; position . z = val [ M23 ] ; return position ; } public Quaternion getRotation ( Quaternion rotation , boolean normalizeAxes ) { return rotation . setFromMatrix ( normalizeAxes , this ) ; } public Quaternion getRotation ( Quaternion rotation ) { return rotation . setFromMatrix ( this ) ; } public float getScaleXSquared ( ) { return val [ Matrix4 . M00 ] * val [ Matrix4 . M00 ] + val [ Matrix4 . M01 ] * val [ Matrix4 . M01 ] + val [ Matrix4 . M02 ] * val [ Matrix4 . M02 ] ; } public float getScaleYSquared ( ) { return val [ Matrix4 . M10 ] * val [ Matrix4 . M10 ] + val [ Matrix4 . M11 ] * val [ Matrix4 . M11 ] + val [ Matrix4 . M12 ] * val [ Matrix4 . M12 ] ; } public float getScaleZSquared ( ) { return val [ Matrix4 . M20 ] * val [ Matrix4 . M20 ] + val [ Matrix4 . M21 ] * val [ Matrix4 . M21 ] + val [ Matrix4 . M22 ] * val [ Matrix4 . M22 ] ; } public float getScaleX ( ) { return ( MathUtils . isZero ( val [ Matrix4 . M01 ] ) & & MathUtils . isZero ( val [ Matrix4 . M02 ] ) ) ? Math . abs ( val [ Matrix4 . M00 ] ) : ( float ) Math . sqrt ( getScaleXSquared ( ) ) ; } public float getScaleY ( ) { return ( MathUtils . isZero ( val [ Matrix4 . M10 ] ) & & MathUtils . isZero ( val [ Matrix4 . M12 ] ) ) ? Math . abs ( val [ Matrix4 . M11 ] ) : ( float ) Math . sqrt ( getScaleYSquared ( ) ) ; } public float getScaleZ ( ) { return ( MathUtils . isZero ( val [ Matrix4 . M20 ] ) & & MathUtils . isZero ( val [ Matrix4 . M21 ] ) ) ? Math . abs ( val [ Matrix4 . M22 ] ) : ( float ) Math . sqrt ( getScaleZSquared ( ) ) ; } public Vector3 getScale ( Vector3 scale ) { return scale . set ( getScaleX ( ) , getScaleY ( ) , getScaleZ ( ) ) ; } public Matrix4 toNormalMatrix ( ) { val [ M03 ] = <int> ; val [ M13 ] = <int> ; val [ M23 ] = <int> ; return inv ( ) . tra ( ) ; } public static native void mul ( float [ ] mata , float [ ] matb ) ; public static native void mulVec ( float [ ] mat , float [ ] vec ) ; public static native void mulVec ( float [ ] mat , float [ ] vecs , int offset , int numVecs , int stride ) ; public static native void prj ( float [ ] mat , float [ ] vec ) ; public static native void prj ( float [ ] mat , float [ ] vecs , int offset , int numVecs , int stride ) ; public static native void rot ( float [ ] mat , float [ ] vec ) ; public static native void rot ( float [ ] mat , float [ ] vecs , int offset , int numVecs , int stride ) ; public static native boolean inv ( float [ ] values ) ; public static native float det ( float [ ] values ) ; public Matrix4 translate ( Vector3 translation ) { return translate ( translation . x , translation . y , translation . z ) ; } public Matrix4 translate ( float x , float y , float z ) { tmp [ M00 ] = <int> ; tmp [ M01 ] = <int> ; tmp [ M02 ] = <int> ; tmp [ M03 ] = x ; tmp [ M10 ] = <int> ; tmp [ M11 ] = <int> ; tmp [ M12 ] = <int> ; tmp [ M13 ] = y ; tmp [ M20 ] = <int> ; tmp [ M21 ] = <int> ; tmp [ M22 ] = <int> ; tmp [ M23 ] = z ; tmp [ M30 ] = <int> ; tmp [ M31 ] = <int> ; tmp [ M32 ] = <int> ; tmp [ M33 ] = <int> ; mul ( val , tmp ) ; return this ; } public Matrix4 rotate ( Vector3 axis , float degrees ) { if ( degrees = = <int> ) return this ; quat . set ( axis , degrees ) ; return rotate ( quat ) ; } public Matrix4 rotateRad ( Vector3 axis , float radians ) { if ( radians = = <int> ) return this ; quat . setFromAxisRad ( axis , radians ) ; return rotate ( quat ) ; } public Matrix4 rotate ( float axisX , float axisY , float axisZ , float degrees ) { if ( degrees = = <int> ) return this ; quat . setFromAxis ( axisX , axisY , axisZ , degrees ) ; return rotate ( quat ) ; } public Matrix4 rotateRad ( float axisX , float axisY , float axisZ , float radians ) { if ( radians = = <int> ) return this ; quat . setFromAxisRad ( axisX , axisY , axisZ , radians ) ; return rotate ( quat ) ; } public Matrix4 rotate ( Quaternion rotation ) { rotation . toMatrix ( tmp ) ; mul ( val , tmp ) ; return this ; } public Matrix4 rotate ( final Vector3 v1 , final Vector3 v2 ) { return rotate ( quat . setFromCross ( v1 , v2 ) ) ; } public Matrix4 scale ( float scaleX , float scaleY , float scaleZ ) { tmp [ M00 ] = scaleX ; tmp [ M01 ] = <int> ; tmp [ M02 ] = <int> ; tmp [ M03 ] = <int> ; tmp [ M10 ] = <int> ; tmp [ M11 ] = scaleY ; tmp [ M12 ] = <int> ; tmp [ M13 ] = <int> ; tmp [ M20 ] = <int> ; tmp [ M21 ] = <int> ; tmp [ M22 ] = scaleZ ; tmp [ M23 ] = <int> ; tmp [ M30 ] = <int> ; tmp [ M31 ] = <int> ; tmp [ M32 ] = <int> ; tmp [ M33 ] = <int> ; mul ( val , tmp ) ; return this ; } public void extract4x3Matrix ( float [ ] dst ) { dst [ <int> ] = val [ M00 ] ; dst [ <int> ] = val [ M10 ] ; dst [ <int> ] = val [ M20 ] ; dst [ <int> ] = val [ M01 ] ; dst [ <int> ] = val [ M11 ] ; dst [ <int> ] = val [ M21 ] ; dst [ <int> ] = val [ M02 ] ; dst [ <int> ] = val [ M12 ] ; dst [ <int> ] = val [ M22 ] ; dst [ <int> ] = val [ M03 ] ; dst [ <int> ] = val [ M13 ] ; dst [ <int> ] = val [ M23 ] ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanContainingQuery ; import java . io . IOException ; import static org . hamcrest . CoreMatchers . instanceOf ; public class SpanContainingQueryBuilderTests extends AbstractQueryTestCase < SpanContainingQueryBuilder > { @Override protected SpanContainingQueryBuilder doCreateTestQueryBuilder ( ) { SpanTermQueryBuilder [ ] spanTermQueries = new SpanTermQueryBuilderTests ( ) . createSpanTermQueryBuilders ( <int> ) ; return new SpanContainingQueryBuilder ( spanTermQueries [ <int> ] , spanTermQueries [ <int> ] ) ; } @Override protected void doAssertLuceneQuery ( SpanContainingQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( SpanContainingQuery . class ) ) ; } public void testIllegalArguments ( ) { try { new SpanContainingQueryBuilder ( null , SpanTermQueryBuilder . PROTOTYPE ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new SpanContainingQueryBuilder ( SpanTermQueryBuilder . PROTOTYPE , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; SpanContainingQueryBuilder parsed = ( SpanContainingQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <int> , ( ( SpanNearQueryBuilder ) parsed . bigQuery ( ) ) . clauses ( ) . size ( ) ) ; assertEquals ( json , <str> , ( ( SpanTermQueryBuilder ) parsed . littleQuery ( ) ) . value ( ) ) ; } } 

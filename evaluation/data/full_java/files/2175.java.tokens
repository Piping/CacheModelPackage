package org . nd4j . linalg . benchmark ; import org . apache . commons . lang3 . time . StopWatch ; import org . apache . commons . math3 . stat . descriptive . SummaryStatistics ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class TimeOperations implements Runnable { private static Logger log = LoggerFactory . getLogger ( TimeOperations . class ) ; private INDArray testing ; private int numTimesRun = <int> ; private StopWatch watch = new StopWatch ( ) ; private INDArray other ; public TimeOperations ( INDArray n ) { this ( n , <int> ) ; } public TimeOperations ( INDArray n , int numTimesRun ) { this . testing = n ; this . other = Nd4j . ones ( n . shape ( ) ) ; this . numTimesRun = numTimesRun ; } public void benchMarkScalarMuli ( ) { System . out . println ( <str> + runNTimes ( new Runnable ( ) { @Override public void run ( ) { testing . mul ( <int> ) ; } } ) . getMean ( ) + <str> ) ; } public void benchMarkElementWiseMul ( ) { System . out . println ( <str> + runNTimes ( new Runnable ( ) { @Override public void run ( ) { testing . mul ( other ) ; } } ) . getMean ( ) + <str> ) ; } public void benchMarkScalarAdd ( ) { System . out . println ( <str> + runNTimes ( new Runnable ( ) { @Override public void run ( ) { testing . add ( <int> ) ; } } ) . getMean ( ) + <str> ) ; } public void benchMarkElementWiseAdd ( ) { System . out . println ( <str> + runNTimes ( new Runnable ( ) { @Override public void run ( ) { testing . add ( other ) ; } } ) . getMean ( ) + <str> ) ; } public void benchmarkCreation ( ) { System . out . println ( <str> ) ; System . out . println ( runNTimes ( new Runnable ( ) { @Override public void run ( ) { Nd4j . create ( new double [ ] { <int> } , new int [ ] { <int> , <int> } ) ; } } ) . getMean ( ) + <str> ) ; } public void benchmarkRavel ( ) { System . out . println ( <str> ) ; System . out . println ( runNTimes ( new Runnable ( ) { @Override public void run ( ) { testing . ravel ( ) ; } } ) . getMean ( ) + <str> ) ; } public SummaryStatistics runNTimes ( Runnable run ) { SummaryStatistics sum = new SummaryStatistics ( ) ; for ( int i = <int> ; i < numTimesRun ; i + + ) { sum . addValue ( timeOp ( run ) ) ; } return sum ; } public long timeOp ( Runnable run ) { watch . start ( ) ; run . run ( ) ; watch . stop ( ) ; long time = watch . getTime ( ) ; watch . reset ( ) ; return time ; } @Override public void run ( ) { benchmarkRavel ( ) ; benchmarkCreation ( ) ; benchMarkScalarAdd ( ) ; benchMarkElementWiseAdd ( ) ; benchMarkElementWiseMul ( ) ; benchMarkScalarMuli ( ) ; } } 

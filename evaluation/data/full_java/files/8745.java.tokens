package org . elasticsearch . discovery . ec2 ; import org . elasticsearch . cloud . aws . network . Ec2NameResolver ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . net . InetAddress ; import static org . hamcrest . Matchers . arrayContaining ; import static org . hamcrest . Matchers . containsString ; public class Ec2NetworkTests extends ESTestCase { public void testNetworkHostEc2 ( ) throws IOException { Settings nodeSettings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; NetworkService networkService = new NetworkService ( nodeSettings ) ; networkService . addCustomNameResolver ( new Ec2NameResolver ( nodeSettings ) ) ; try { networkService . resolveBindHostAddresses ( null ) ; } catch ( IOException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNetworkHostEc2PublicIp ( ) throws IOException { Settings nodeSettings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; NetworkService networkService = new NetworkService ( nodeSettings ) ; networkService . addCustomNameResolver ( new Ec2NameResolver ( nodeSettings ) ) ; try { networkService . resolveBindHostAddresses ( null ) ; } catch ( IOException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNetworkHostEc2PrivateIp ( ) throws IOException { Settings nodeSettings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; NetworkService networkService = new NetworkService ( nodeSettings ) ; networkService . addCustomNameResolver ( new Ec2NameResolver ( nodeSettings ) ) ; try { networkService . resolveBindHostAddresses ( null ) ; } catch ( IOException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNetworkHostEc2PrivateIpv4 ( ) throws IOException { Settings nodeSettings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; NetworkService networkService = new NetworkService ( nodeSettings ) ; networkService . addCustomNameResolver ( new Ec2NameResolver ( nodeSettings ) ) ; try { networkService . resolveBindHostAddresses ( null ) ; } catch ( IOException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNetworkHostEc2PrivateDns ( ) throws IOException { Settings nodeSettings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; NetworkService networkService = new NetworkService ( nodeSettings ) ; networkService . addCustomNameResolver ( new Ec2NameResolver ( nodeSettings ) ) ; try { networkService . resolveBindHostAddresses ( null ) ; } catch ( IOException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNetworkHostEc2PublicIpv4 ( ) throws IOException { Settings nodeSettings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; NetworkService networkService = new NetworkService ( nodeSettings ) ; networkService . addCustomNameResolver ( new Ec2NameResolver ( nodeSettings ) ) ; try { networkService . resolveBindHostAddresses ( null ) ; } catch ( IOException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNetworkHostEc2PublicDns ( ) throws IOException { Settings nodeSettings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; NetworkService networkService = new NetworkService ( nodeSettings ) ; networkService . addCustomNameResolver ( new Ec2NameResolver ( nodeSettings ) ) ; try { networkService . resolveBindHostAddresses ( null ) ; } catch ( IOException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNetworkHostCoreLocal ( ) throws IOException { Settings nodeSettings = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; NetworkService networkService = new NetworkService ( nodeSettings ) ; networkService . addCustomNameResolver ( new Ec2NameResolver ( nodeSettings ) ) ; InetAddress [ ] addresses = networkService . resolveBindHostAddresses ( null ) ; assertThat ( addresses , arrayContaining ( networkService . resolveBindHostAddresses ( new String [ ] { <str> } ) ) ) ; } } 

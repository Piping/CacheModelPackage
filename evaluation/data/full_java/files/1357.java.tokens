package org . apache . cassandra . cql3 ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . junit . Assert ; import org . junit . Test ; import org . apache . cassandra . cache . KeyCacheKey ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . metrics . CacheMetrics ; import org . apache . cassandra . metrics . CassandraMetricsRegistry ; import org . apache . cassandra . service . CacheService ; import org . apache . cassandra . service . StorageService ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . assertNull ; import org . apache . cassandra . utils . Pair ; public class KeyCacheCqlTest extends CQLTester { static final String commonColumnsDef = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; static final String commonColumns = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; static final String longString = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; @Test public void testSliceQueries ( ) throws Throwable { createTable ( <str> ) ; for ( int pkInt = <int> ; pkInt < <int> ; pkInt + + ) { String pk = Integer . toString ( pkInt ) ; for ( int ck1 = <int> ; ck1 < <int> ; ck1 + + ) { for ( int ck2 = <int> ; ck2 < <int> ; ck2 + + ) { execute ( <str> , pk , ck1 , ck2 , makeStringValue ( pk , ck1 , ck2 ) , pk , ck1 , ck2 ) ; } } } StorageService . instance . forceKeyspaceFlush ( KEYSPACE ) ; for ( int pkInt = <int> ; pkInt < <int> ; pkInt + + ) { String pk = Integer . toString ( pkInt ) ; assertClusterRows ( execute ( <str> , pk ) , pk , <int> , <int> , <int> , <int> ) ; for ( int ck1 = <int> ; ck1 < <int> ; ck1 + + ) { assertClusterRows ( execute ( <str> , pk , ck1 ) , pk , ck1 , ck1 + <int> , <int> , <int> ) ; assertClusterRows ( execute ( <str> , pk , ck1 ) , pk , <int> , ck1 , <int> , <int> ) ; assertClusterRows ( execute ( <str> , pk , ck1 ) , pk , ck1 + <int> , <int> , <int> , <int> ) ; assertClusterRows ( execute ( <str> , pk , ck1 ) , pk , <int> , ck1 + <int> , <int> , <int> ) ; assertClusterRows ( execute ( <str> , pk , ck1 ) , pk , ck1 , <int> , <int> , <int> ) ; for ( int ck2 = <int> ; ck2 < <int> ; ck2 + + ) { assertRows ( execute ( <str> , pk , ck1 , ck2 ) , new Object [ ] { makeStringValue ( pk , ck1 , ck2 ) , pk , ck1 , ck2 } ) ; assertClusterRows ( execute ( <str> , pk , ck1 , ck2 ) , pk , ck1 , ck1 + <int> , <int> , ck2 ) ; assertClusterRows ( execute ( <str> , pk , ck1 , ck2 ) , pk , ck1 , ck1 + <int> , ck2 + <int> , <int> ) ; assertClusterRows ( execute ( <str> , pk , ck1 , ck2 ) , pk , ck1 , ck1 + <int> , <int> , ck2 + <int> ) ; assertClusterRows ( execute ( <str> , pk , ck1 , ck2 ) , pk , ck1 , ck1 + <int> , ck2 , <int> ) ; } } } } private static void assertClusterRows ( UntypedResultSet rows , String pk , int ck1from , int ck1to , int ck2from , int ck2to ) { String info = <str> + pk + <str> + ck1from + <str> + ck1to + <str> + ck2from + <str> + ck2to ; Iterator < UntypedResultSet . Row > iter = rows . iterator ( ) ; int cnt = <int> ; int expect = ( ck1to - ck1from ) * ( ck2to - ck2from ) ; for ( int ck1 = ck1from ; ck1 < ck1to ; ck1 + + ) { for ( int ck2 = ck2from ; ck2 < ck2to ; ck2 + + ) { assertTrue ( <str> + expect + <str> + cnt + <str> + info , iter . hasNext ( ) ) ; UntypedResultSet . Row row = iter . next ( ) ; assertEquals ( makeStringValue ( pk , ck1 , ck2 ) , row . getString ( <str> ) ) ; assertEquals ( pk , row . getString ( <str> ) ) ; assertEquals ( ck1 , row . getInt ( <str> ) ) ; assertEquals ( ck2 , row . getInt ( <str> ) ) ; } } assertFalse ( <str> + expect + <str> + cnt + <str> + info , iter . hasNext ( ) ) ; } private static String makeStringValue ( String pk , int ck1 , int ck2 ) { return longString + <str> + pk + <str> + ck1 + <str> + ck2 ; } @Test public void test2iKeyCachePaths ( ) throws Throwable { String table = createTable ( <str> + commonColumnsDef + <str> ) ; createIndex ( <str> ) ; insertData ( table , <str> , true ) ; clearCache ( ) ; CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { UntypedResultSet result = execute ( <str> , i ) ; assertEquals ( <int> , result . size ( ) ) ; } long hits = metrics . hits . getCount ( ) ; long requests = metrics . requests . getCount ( ) ; assertEquals ( <int> , hits ) ; assertEquals ( <int> , requests ) ; for ( int i = <int> ; i < <int> ; i + + ) { UntypedResultSet result = execute ( <str> , i ) ; assertEquals ( <int> , result . size ( ) ) ; } metrics = CacheService . instance . keyCache . getMetrics ( ) ; hits = metrics . hits . getCount ( ) ; requests = metrics . requests . getCount ( ) ; assertEquals ( <int> , hits ) ; assertEquals ( <int> , requests ) ; CacheService . instance . keyCache . submitWrite ( Integer . MAX_VALUE ) . get ( ) ; int beforeSize = CacheService . instance . keyCache . size ( ) ; CacheService . instance . keyCache . clear ( ) ; Assert . assertEquals ( <int> , CacheService . instance . keyCache . size ( ) ) ; CacheService . instance . keyCache . loadSaved ( ) ; assertEquals ( beforeSize , CacheService . instance . keyCache . size ( ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { UntypedResultSet result = execute ( <str> , i ) ; assertEquals ( <int> , result . size ( ) ) ; } assertNull ( Schema . instance . getColumnFamilyStoreIncludingIndexes ( Pair . create ( <str> , <str> ) ) ) ; assertNull ( Schema . instance . getColumnFamilyStoreIncludingIndexes ( Pair . create ( KEYSPACE , <str> ) ) ) ; dropTable ( <str> ) ; Schema . instance . updateVersion ( ) ; CacheService . instance . keyCache . clear ( ) ; CacheService . instance . keyCache . loadSaved ( ) ; assertEquals ( <int> , CacheService . instance . keyCache . size ( ) ) ; } @Test public void test2iKeyCachePathsSaveKeysForDroppedTable ( ) throws Throwable { String table = createTable ( <str> + commonColumnsDef + <str> ) ; createIndex ( <str> ) ; insertData ( table , <str> , true ) ; clearCache ( ) ; CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { UntypedResultSet result = execute ( <str> , i ) ; assertEquals ( <int> , result . size ( ) ) ; } long hits = metrics . hits . getCount ( ) ; long requests = metrics . requests . getCount ( ) ; assertEquals ( <int> , hits ) ; assertEquals ( <int> , requests ) ; for ( int i = <int> ; i < <int> ; i + + ) { UntypedResultSet result = execute ( <str> , i ) ; assertEquals ( <int> , result . size ( ) ) ; } metrics = CacheService . instance . keyCache . getMetrics ( ) ; hits = metrics . hits . getCount ( ) ; requests = metrics . requests . getCount ( ) ; assertEquals ( <int> , hits ) ; assertEquals ( <int> , requests ) ; dropTable ( <str> ) ; CacheService . instance . keyCache . submitWrite ( Integer . MAX_VALUE ) . get ( ) ; CacheService . instance . keyCache . clear ( ) ; Assert . assertEquals ( <int> , CacheService . instance . keyCache . size ( ) ) ; CacheService . instance . keyCache . loadSaved ( ) ; Iterator < KeyCacheKey > iter = CacheService . instance . keyCache . keyIterator ( ) ; while ( iter . hasNext ( ) ) { KeyCacheKey key = iter . next ( ) ; Assert . assertFalse ( key . ksAndCFName . left . equals ( <str> ) ) ; Assert . assertFalse ( key . ksAndCFName . right . startsWith ( table ) ) ; } } @Test public void testKeyCacheNonClustered ( ) throws Throwable { String table = createTable ( <str> + commonColumnsDef + <str> ) ; insertData ( table , null , false ) ; clearCache ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertRows ( execute ( <str> , i , Integer . toOctalString ( i ) ) , new Object [ ] { String . valueOf ( i ) + <str> + String . valueOf ( <int> ) } ) ; } CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ; long hits = metrics . hits . getCount ( ) ; long requests = metrics . requests . getCount ( ) ; assertEquals ( <int> , hits ) ; assertEquals ( <int> , requests ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertRows ( execute ( <str> , i , Integer . toOctalString ( i ) ) , new Object [ ] { String . valueOf ( i ) + <str> + String . valueOf ( <int> ) } ) ; } hits = metrics . hits . getCount ( ) ; requests = metrics . requests . getCount ( ) ; assertEquals ( <int> , hits ) ; assertEquals ( <int> , requests ) ; } @Test public void testKeyCacheClustered ( ) throws Throwable { String table = createTable ( <str> + commonColumnsDef + <str> ) ; insertData ( table , null , true ) ; clearCache ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertEquals ( <int> , execute ( <str> , i , Integer . toOctalString ( i ) ) . size ( ) ) ; } CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ; long hits = metrics . hits . getCount ( ) ; long requests = metrics . requests . getCount ( ) ; assertEquals ( <int> , hits ) ; assertEquals ( <int> , requests ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertEquals ( <int> , execute ( <str> , i , Integer . toOctalString ( i ) ) . size ( ) ) ; } metrics = CacheService . instance . keyCache . getMetrics ( ) ; hits = metrics . hits . getCount ( ) ; requests = metrics . requests . getCount ( ) ; assertEquals ( <int> , hits ) ; assertEquals ( <int> + <int> , requests ) ; for ( int i = <int> ; i < <int> ; i + + ) { for ( int c = <int> ; c < <int> ; c + + ) { assertRows ( execute ( <str> , i , Integer . toOctalString ( i ) , c ) , new Object [ ] { String . valueOf ( i ) + <str> + String . valueOf ( c ) , ( long ) c } ) ; } } metrics = CacheService . instance . keyCache . getMetrics ( ) ; hits = metrics . hits . getCount ( ) ; requests = metrics . requests . getCount ( ) ; assertEquals ( <int> + <int> , hits ) ; assertEquals ( <int> + <int> , requests ) ; for ( int i = <int> ; i < <int> ; i + + ) { for ( int c = <int> ; c < <int> ; c + + ) { assertRows ( execute ( <str> , i , Integer . toOctalString ( i ) , c ) , new Object [ ] { String . valueOf ( i ) + <str> + String . valueOf ( c ) , ( long ) c } ) ; } } hits = metrics . hits . getCount ( ) ; requests = metrics . requests . getCount ( ) ; assertEquals ( <int> + <int> , hits ) ; assertEquals ( <int> + <int> , requests ) ; } private void insertData ( String table , String index , boolean withClustering ) throws Throwable { prepareTable ( table ) ; if ( index ! = null ) { StorageService . instance . disableAutoCompaction ( KEYSPACE , table + <str> + index ) ; Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( table ) . indexManager . getIndexByName ( index ) . getBlockingFlushTask ( ) . call ( ) ; } for ( int i = <int> ; i < <int> ; i + + ) { int partKeyA = i ; String partKeyB = Integer . toOctalString ( i ) ; for ( int c = <int> ; c < ( withClustering ? <int> : <int> ) ; c + + ) { int clustKeyA = c ; String clustKeyB = Integer . toOctalString ( c ) ; List < String > clustKeyC = makeList ( clustKeyB ) ; String colText = String . valueOf ( i ) + <str> + String . valueOf ( c ) ; int colInt = i % <int> ; long colLong = c ; execute ( <str> + commonColumns + <str> , partKeyA , partKeyB , clustKeyA , clustKeyB , clustKeyC , colText , colInt , colLong ) ; } if ( i % <int> = = <int> ) { Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( table ) . forceFlush ( ) . get ( ) ; if ( index ! = null ) Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( table ) . indexManager . getIndexByName ( index ) . getBlockingFlushTask ( ) . call ( ) ; } } } private static void prepareTable ( String table ) throws IOException , InterruptedException , java . util . concurrent . ExecutionException { StorageService . instance . disableAutoCompaction ( KEYSPACE , table ) ; Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( table ) . forceFlush ( ) . get ( ) ; Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( table ) . truncateBlocking ( ) ; } private static List < String > makeList ( String value ) { List < String > list = new ArrayList < > ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { list . add ( value + i ) ; } return list ; } private static void clearCache ( ) { CassandraMetricsRegistry . Metrics . getNames ( ) . forEach ( CassandraMetricsRegistry . Metrics : : remove ) ; CacheService . instance . keyCache . clear ( ) ; CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ; Assert . assertEquals ( <int> , metrics . entries . getValue ( ) . intValue ( ) ) ; Assert . assertEquals ( <int> L , metrics . hits . getCount ( ) ) ; Assert . assertEquals ( <int> L , metrics . requests . getCount ( ) ) ; Assert . assertEquals ( <int> L , metrics . size . getValue ( ) . longValue ( ) ) ; } } 

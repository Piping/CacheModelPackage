package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_QUERIES ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractCollectionTester ; import com . google . common . collect . testing . MinimalCollection ; import com . google . common . collect . testing . WrongType ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . util . Collection ; @SuppressWarnings ( <str> ) @GwtCompatible public class CollectionContainsAllTester < E > extends AbstractCollectionTester < E > { public void testContainsAll_empty ( ) { assertTrue ( <str> , collection . containsAll ( MinimalCollection . of ( ) ) ) ; } @CollectionSize.Require ( absent = ZERO ) public void testContainsAll_subset ( ) { assertTrue ( <str> , collection . containsAll ( MinimalCollection . of ( e0 ( ) ) ) ) ; } public void testContainsAll_sameElements ( ) { assertTrue ( <str> , collection . containsAll ( MinimalCollection . of ( createSamplesArray ( ) ) ) ) ; } @SuppressWarnings ( <str> ) public void testContainsAll_self ( ) { assertTrue ( <str> , collection . containsAll ( collection ) ) ; } public void testContainsAll_partialOverlap ( ) { assertFalse ( <str> , collection . containsAll ( MinimalCollection . of ( e0 ( ) , e3 ( ) ) ) ) ; } public void testContainsAll_disjoint ( ) { assertFalse ( <str> , collection . containsAll ( MinimalCollection . of ( e3 ( ) ) ) ) ; } @CollectionFeature.Require ( absent = ALLOWS_NULL_QUERIES ) public void testContainsAll_nullNotAllowed ( ) { try { assertFalse ( collection . containsAll ( MinimalCollection . of ( ( E ) null ) ) ) ; } catch ( NullPointerException tolerated ) { } } @CollectionFeature.Require ( ALLOWS_NULL_QUERIES ) public void testContainsAll_nullAllowed ( ) { assertFalse ( collection . containsAll ( MinimalCollection . of ( ( E ) null ) ) ) ; } @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testContainsAll_nullPresent ( ) { initCollectionWithNullElement ( ) ; assertTrue ( collection . containsAll ( MinimalCollection . of ( ( E ) null ) ) ) ; } public void testContainsAll_wrongType ( ) { Collection < WrongType > wrong = MinimalCollection . of ( WrongType . VALUE ) ; try { assertFalse ( <str> , collection . containsAll ( wrong ) ) ; } catch ( ClassCastException tolerated ) { } } } 

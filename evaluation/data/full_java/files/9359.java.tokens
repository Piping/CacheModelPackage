package com . google . common . escape ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . VisibleForTesting ; import java . util . Collections ; import java . util . Map ; @Beta @GwtCompatible public final class ArrayBasedEscaperMap { public static ArrayBasedEscaperMap create ( Map < Character , String > replacements ) { return new ArrayBasedEscaperMap ( createReplacementArray ( replacements ) ) ; } private final char [ ] [ ] replacementArray ; private ArrayBasedEscaperMap ( char [ ] [ ] replacementArray ) { this . replacementArray = replacementArray ; } char [ ] [ ] getReplacementArray ( ) { return replacementArray ; } @VisibleForTesting static char [ ] [ ] createReplacementArray ( Map < Character , String > map ) { checkNotNull ( map ) ; if ( map . isEmpty ( ) ) { return EMPTY_REPLACEMENT_ARRAY ; } char max = Collections . max ( map . keySet ( ) ) ; char [ ] [ ] replacements = new char [ max + <int> ] [ ] ; for ( char c : map . keySet ( ) ) { replacements [ c ] = map . get ( c ) . toCharArray ( ) ; } return replacements ; } private static final char [ ] [ ] EMPTY_REPLACEMENT_ARRAY = new char [ <int> ] [ <int> ] ; } 

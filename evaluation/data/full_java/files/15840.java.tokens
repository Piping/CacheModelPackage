package org . gradle . integtests . tooling . r18 ; import org . gradle . integtests . tooling . r16 . CustomModel ; import org . gradle . tooling . BuildAction ; import org . gradle . tooling . BuildController ; import org . gradle . tooling . model . GradleProject ; import org . gradle . tooling . model . HierarchicalElement ; import org . gradle . tooling . model . eclipse . EclipseProject ; import org . gradle . tooling . model . idea . IdeaModule ; import org . gradle . tooling . model . idea . IdeaProject ; import java . util . HashMap ; import java . util . Map ; public class UseOtherTypesToFetchProjectModel implements BuildAction < Map < String , CustomModel > > { public Map < String , CustomModel > execute ( BuildController controller ) { IdeaProject ideaProject = controller . getModel ( IdeaProject . class ) ; for ( IdeaModule ideaModule : ideaProject . getModules ( ) ) { visit ( ideaModule , controller , new HashMap < String , CustomModel > ( ) ) ; } EclipseProject eclipseProject = controller . getModel ( EclipseProject . class ) ; visit ( eclipseProject , controller , new HashMap < String , CustomModel > ( ) ) ; GradleProject rootProject = controller . getModel ( GradleProject . class ) ; Map < String , CustomModel > projects = new HashMap < String , CustomModel > ( ) ; visit ( rootProject , controller , projects ) ; return projects ; } void visit ( HierarchicalElement element , BuildController buildController , Map < String , CustomModel > results ) { results . put ( element . getName ( ) , buildController . getModel ( element , CustomModel . class ) ) ; for ( HierarchicalElement child : element . getChildren ( ) ) { visit ( child , buildController , results ) ; } } } 

package com . badlogic . gdx . graphics . glutils ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Cubemap ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Pixmap ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . Texture . TextureWrap ; import com . badlogic . gdx . graphics . g2d . Gdx2DPixmap ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class FrameBufferCubemap extends GLFrameBuffer < Cubemap > { private int currentSide ; public FrameBufferCubemap ( Pixmap . Format format , int width , int height , boolean hasDepth ) { this ( format , width , height , hasDepth , false ) ; } public FrameBufferCubemap ( Pixmap . Format format , int width , int height , boolean hasDepth , boolean hasStencil ) { super ( format , width , height , hasDepth , hasStencil ) ; } @Override protected Cubemap createColorTexture ( ) { int glFormat = Pixmap . Format . toGlFormat ( format ) ; int glType = Pixmap . Format . toGlType ( format ) ; GLOnlyTextureData data = new GLOnlyTextureData ( width , height , <int> , glFormat , glFormat , glType ) ; Cubemap result = new Cubemap ( data , data , data , data , data , data ) ; result . setFilter ( TextureFilter . Linear , TextureFilter . Linear ) ; result . setWrap ( TextureWrap . ClampToEdge , TextureWrap . ClampToEdge ) ; return result ; } @Override protected void disposeColorTexture ( Cubemap colorTexture ) { colorTexture . dispose ( ) ; } @Override public void bind ( ) { currentSide = - <int> ; super . bind ( ) ; } public boolean nextSide ( ) { if ( currentSide > <int> ) { throw new GdxRuntimeException ( <str> ) ; } else if ( currentSide = = <int> ) { return false ; } currentSide + + ; bindSide ( getSide ( ) ) ; return true ; } protected void bindSide ( final Cubemap . CubemapSide side ) { Gdx . gl20 . glFramebufferTexture2D ( GL20 . GL_FRAMEBUFFER , GL20 . GL_COLOR_ATTACHMENT0 , side . glEnum , colorTexture . getTextureObjectHandle ( ) , <int> ) ; } public Cubemap . CubemapSide getSide ( ) { return currentSide < <int> ? null : Cubemap . CubemapSide . values ( ) [ currentSide ] ; } } 

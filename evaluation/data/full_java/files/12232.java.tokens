package org . gradle . plugin . internal ; import com . google . common . base . CharMatcher ; import org . gradle . api . Nullable ; import static com . google . common . base . CharMatcher . anyOf ; import static com . google . common . base . CharMatcher . inRange ; public class PluginId { public static final String ID_SEPARATOR_ON_START_OR_END = <str> + PluginId . SEPARATOR + <str> ; public static final String DOUBLE_SEPARATOR = <str> + PluginId . SEPARATOR + PluginId . SEPARATOR + <str> ; public static final String PLUGIN_ID_VALID_CHARS_DESCRIPTION = <str> ; public static final CharMatcher INVALID_PLUGIN_ID_CHAR_MATCHER = inRange ( <str> , <str> ) . or ( inRange ( <str> , <str> ) ) . or ( inRange ( <str> , <str> ) ) . or ( anyOf ( <str> ) ) . negate ( ) ; public static final String SEPARATOR = <str> ; private final String value ; private PluginId ( String value ) { this . value = value ; } public static PluginId of ( String value ) throws InvalidPluginIdException { validate ( value ) ; return new PluginId ( value ) ; } public static PluginId unvalidated ( String value ) { return new PluginId ( value ) ; } public static void validate ( String value ) throws InvalidPluginIdException { if ( value . startsWith ( SEPARATOR ) | | value . endsWith ( SEPARATOR ) ) { throw new InvalidPluginIdException ( value , ID_SEPARATOR_ON_START_OR_END ) ; } else if ( value . contains ( PluginId . SEPARATOR + PluginId . SEPARATOR ) ) { throw new InvalidPluginIdException ( value , DOUBLE_SEPARATOR ) ; } else { int invalidCharIndex = PluginId . INVALID_PLUGIN_ID_CHAR_MATCHER . indexIn ( value ) ; if ( invalidCharIndex > = <int> ) { char invalidChar = value . charAt ( invalidCharIndex ) ; throw new InvalidPluginIdException ( value , invalidPluginIdCharMessage ( invalidChar ) ) ; } } } public static String invalidPluginIdCharMessage ( char invalidChar ) { return <str> + invalidChar + <str> + PluginId . PLUGIN_ID_VALID_CHARS_DESCRIPTION + <str> ; } public boolean isQualified ( ) { return value . contains ( PluginId . SEPARATOR ) ; } public PluginId maybeQualify ( String qualification ) { return isQualified ( ) ? this : new PluginId ( qualification + PluginId . SEPARATOR + value ) ; } @Nullable public String getNamespace ( ) { return isQualified ( ) ? value . substring ( <int> , value . lastIndexOf ( SEPARATOR ) ) : null ; } public boolean inNamespace ( String namespace ) { return isQualified ( ) & & getNamespace ( ) . equals ( namespace ) ; } public String getName ( ) { return isQualified ( ) ? value . substring ( value . lastIndexOf ( PluginId . SEPARATOR ) + <int> ) : value ; } public PluginId getUnqualified ( ) { return isQualified ( ) ? new PluginId ( getName ( ) ) : this ; } @Override public String toString ( ) { return value ; } public String asString ( ) { return value ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } PluginId pluginId = ( PluginId ) o ; return value . equals ( pluginId . value ) ; } @Override public int hashCode ( ) { return value . hashCode ( ) ; } } 

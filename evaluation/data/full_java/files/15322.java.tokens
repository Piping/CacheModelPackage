package org . gradle . api . tasks . compile ; import org . gradle . api . internal . file . collections . SimpleFileCollection ; import org . gradle . api . tasks . AbstractConventionTaskTest ; import org . gradle . util . WrapUtil ; import org . junit . Before ; import org . junit . Test ; import java . io . File ; import java . util . List ; import static org . gradle . util . Matchers . isEmpty ; import static org . junit . Assert . * ; public abstract class AbstractCompileTest extends AbstractConventionTaskTest { public static final String TEST_PATTERN_1 = <str> ; public static final String TEST_PATTERN_2 = <str> ; public static final String TEST_PATTERN_3 = <str> ; public static final List < File > TEST_DEPENDENCY_MANAGER_CLASSPATH = WrapUtil . toList ( new File ( <str> ) ) ; public static final List < String > TEST_INCLUDES = WrapUtil . toList ( <str> ) ; public static final List < String > TEST_EXCLUDES = WrapUtil . toList ( <str> ) ; protected File srcDir ; protected File destDir ; protected File depCacheDir ; protected abstract AbstractCompile getCompile ( ) ; @Before public final void setUpDirs ( ) { destDir = getProject ( ) . file ( <str> ) ; depCacheDir = getProject ( ) . file ( <str> ) ; srcDir = getProject ( ) . file ( <str> ) ; srcDir . mkdirs ( ) ; } @Test public void testDefaults ( ) { AbstractCompile compile = getCompile ( ) ; assertNull ( compile . getDestinationDir ( ) ) ; assertNull ( compile . getSourceCompatibility ( ) ) ; assertNull ( compile . getTargetCompatibility ( ) ) ; assertThat ( compile . getSource ( ) , isEmpty ( ) ) ; } protected void setUpMocksAndAttributes ( final AbstractCompile compile ) { compile . source ( srcDir ) ; compile . setIncludes ( TEST_INCLUDES ) ; compile . setExcludes ( TEST_EXCLUDES ) ; compile . setSourceCompatibility ( <str> ) ; compile . setTargetCompatibility ( <str> ) ; compile . setDestinationDir ( destDir ) ; compile . setClasspath ( new SimpleFileCollection ( TEST_DEPENDENCY_MANAGER_CLASSPATH ) ) ; } @Test public void testIncludes ( ) { AbstractCompile compile = getCompile ( ) ; assertSame ( compile . include ( TEST_PATTERN_1 , TEST_PATTERN_2 ) , compile ) ; assertEquals ( compile . getIncludes ( ) , WrapUtil . toLinkedSet ( TEST_PATTERN_1 , TEST_PATTERN_2 ) ) ; assertSame ( compile . include ( TEST_PATTERN_3 ) , compile ) ; assertEquals ( compile . getIncludes ( ) , WrapUtil . toLinkedSet ( TEST_PATTERN_1 , TEST_PATTERN_2 , TEST_PATTERN_3 ) ) ; } @Test public void testExcludes ( ) { AbstractCompile compile = getCompile ( ) ; assertSame ( compile . exclude ( TEST_PATTERN_1 , TEST_PATTERN_2 ) , compile ) ; assertEquals ( compile . getExcludes ( ) , WrapUtil . toLinkedSet ( TEST_PATTERN_1 , TEST_PATTERN_2 ) ) ; assertSame ( compile . exclude ( TEST_PATTERN_3 ) , compile ) ; assertEquals ( compile . getExcludes ( ) , WrapUtil . toLinkedSet ( TEST_PATTERN_1 , TEST_PATTERN_2 , TEST_PATTERN_3 ) ) ; } } 

package org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . conflicts ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . ModuleConflictResolver ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . ComponentResolutionState ; import java . util . Collection ; import java . util . LinkedList ; import java . util . List ; class CompositeConflictResolver implements ModuleConflictResolver { private final List < ModuleConflictResolver > resolvers = new LinkedList < ModuleConflictResolver > ( ) ; public < T extends ComponentResolutionState > T select ( Collection < ? extends T > candidates ) { for ( ModuleConflictResolver r : resolvers ) { T selection = r . select ( candidates ) ; if ( selection ! = null ) { return selection ; } } throw new IllegalStateException ( this . getClass ( ) . getSimpleName ( ) + <str> + resolvers + <str> + candidates ) ; } void addFirst ( ModuleConflictResolver conflictResolver ) { resolvers . add ( <int> , conflictResolver ) ; } } 

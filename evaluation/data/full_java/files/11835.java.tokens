package org . gradle . cache . internal ; import org . gradle . api . Action ; import org . gradle . cache . CacheValidator ; import org . gradle . cache . PersistentCache ; import org . gradle . cache . internal . filelock . LockOptions ; import org . gradle . util . GFileUtils ; import org . gradle . util . GUtil ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . util . Map ; import java . util . Properties ; public class DefaultPersistentDirectoryCache extends DefaultPersistentDirectoryStore implements ReferencablePersistentCache { private static final Logger LOGGER = LoggerFactory . getLogger ( DefaultPersistentDirectoryCache . class ) ; private final File propertiesFile ; private final Properties properties = new Properties ( ) ; private final Action < ? super PersistentCache > initAction ; private final CacheValidator validator ; private boolean didRebuild ; public DefaultPersistentDirectoryCache ( File dir , String displayName , CacheValidator validator , Map < String , ? > properties , LockOptions lockOptions , Action < ? super PersistentCache > initAction , FileLockManager lockManager ) { super ( dir , displayName , lockOptions , lockManager ) ; this . validator = validator ; this . initAction = initAction ; propertiesFile = new File ( dir , <str> ) ; this . properties . putAll ( properties ) ; } @Override protected File getLockTarget ( ) { return propertiesFile ; } @Override protected CacheInitializationAction getInitAction ( ) { return new Initializer ( ) ; } public Properties getProperties ( ) { return properties ; } private class Initializer implements CacheInitializationAction { public boolean requiresInitialization ( FileLock lock ) { if ( ! didRebuild ) { if ( validator ! = null & & ! validator . isValid ( ) ) { LOGGER . debug ( <str> , this ) ; return true ; } } if ( ! lock . getUnlockedCleanly ( ) ) { LOGGER . debug ( <str> , this ) ; return true ; } Properties cachedProperties = GUtil . loadProperties ( propertiesFile ) ; for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { String previousValue = cachedProperties . getProperty ( entry . getKey ( ) . toString ( ) ) ; String currentValue = entry . getValue ( ) . toString ( ) ; if ( ! previousValue . equals ( currentValue ) ) { LOGGER . debug ( <str> , this , entry . getKey ( ) , previousValue , currentValue ) ; return true ; } } return false ; } public void initialize ( FileLock fileLock ) { for ( File file : getBaseDir ( ) . listFiles ( ) ) { if ( fileLock . isLockFile ( file ) | | file . equals ( propertiesFile ) ) { continue ; } GFileUtils . forceDelete ( file ) ; } if ( initAction ! = null ) { initAction . execute ( DefaultPersistentDirectoryCache . this ) ; } GUtil . saveProperties ( properties , propertiesFile ) ; didRebuild = true ; } } } 

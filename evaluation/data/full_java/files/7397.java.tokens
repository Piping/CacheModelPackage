package org . elasticsearch . search . aggregations . pipeline . bucketmetrics . stats ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . search . aggregations . AggregationStreams ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . metrics . stats . InternalStats ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public class InternalStatsBucket extends InternalStats implements StatsBucket { public final static Type TYPE = new Type ( <str> ) ; public final static AggregationStreams . Stream STREAM = new AggregationStreams . Stream ( ) { @Override public InternalStatsBucket readResult ( StreamInput in ) throws IOException { InternalStatsBucket result = new InternalStatsBucket ( ) ; result . readFrom ( in ) ; return result ; } } ; public static void registerStreams ( ) { AggregationStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } public InternalStatsBucket ( String name , long count , double sum , double min , double max , ValueFormatter formatter , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , count , sum , min , max , formatter , pipelineAggregators , metaData ) ; } InternalStatsBucket ( ) { } @Override public Type type ( ) { return TYPE ; } @Override public InternalStats doReduce ( List < InternalAggregation > aggregations , ReduceContext reduceContext ) { throw new UnsupportedOperationException ( <str> ) ; } } 

package org . gradle . language . nativeplatform . internal ; import org . gradle . api . DefaultTask ; import org . gradle . api . Project ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . util . PatternSet ; import org . gradle . language . base . LanguageSourceSet ; import org . gradle . language . base . internal . LanguageSourceSetInternal ; import org . gradle . language . base . internal . registry . LanguageTransform ; import org . gradle . language . nativeplatform . tasks . AbstractNativeCompileTask ; import org . gradle . nativeplatform . ObjectFile ; import org . gradle . nativeplatform . internal . NativeBinarySpecInternal ; import org . gradle . nativeplatform . tasks . PrefixHeaderFileGenerateTask ; import org . gradle . nativeplatform . toolchain . internal . PreCompiledHeader ; import java . io . File ; import java . util . Set ; import java . util . concurrent . Callable ; public class PCHCompileTaskConfig extends CompileTaskConfig { public PCHCompileTaskConfig ( LanguageTransform < ? extends LanguageSourceSet , ObjectFile > languageTransform , Class < ? extends DefaultTask > taskType ) { super ( languageTransform , taskType ) ; } @Override protected void configureCompileTask ( AbstractNativeCompileTask task , final NativeBinarySpecInternal binary , final LanguageSourceSetInternal languageSourceSet ) { final DependentSourceSetInternal sourceSet = ( DependentSourceSetInternal ) languageSourceSet ; task . setDescription ( String . format ( <str> , sourceSet , binary ) ) ; task . includes ( new Callable < Set < File > > ( ) { public Set < File > call ( ) throws Exception { return sourceSet . getSource ( ) . getSrcDirs ( ) ; } } ) ; final Project project = task . getProject ( ) ; task . source ( sourceSet . getPrefixHeaderFile ( ) ) ; task . setObjectFileDir ( new File ( binary . getNamingScheme ( ) . getOutputDirectory ( project . getBuildDir ( ) , <str> ) , languageSourceSet . getProjectScopedName ( ) + <str> ) ) ; task . dependsOn ( project . getTasks ( ) . withType ( PrefixHeaderFileGenerateTask . class ) . matching ( new Spec < PrefixHeaderFileGenerateTask > ( ) { @Override public boolean isSatisfiedBy ( PrefixHeaderFileGenerateTask prefixHeaderFileGenerateTask ) { return prefixHeaderFileGenerateTask . getPrefixHeaderFile ( ) . equals ( sourceSet . getPrefixHeaderFile ( ) ) ; } } ) ) ; binary . binaryInputs ( task . getOutputs ( ) . getFiles ( ) . getAsFileTree ( ) . matching ( new PatternSet ( ) . include ( <str> , <str> ) ) ) ; PreCompiledHeader pch = binary . getPrefixFileToPCH ( ) . get ( sourceSet . getPrefixHeaderFile ( ) ) ; pch . setPchObjects ( task . getOutputs ( ) . getFiles ( ) . getAsFileTree ( ) . matching ( new PatternSet ( ) . include ( <str> , <str> ) ) ) ; pch . builtBy ( task ) ; } } 

package org . gradle . groovy . scripts ; import org . gradle . internal . resource . UriResource ; import org . gradle . test . fixtures . file . TestFile ; import org . gradle . test . fixtures . file . TestNameTestDirectoryProvider ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import java . io . File ; import java . net . URI ; import java . net . URISyntaxException ; import static org . gradle . util . Matchers . matchesRegexp ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . assertThat ; public class UriScriptSourceTest { private TestFile testDir ; private File scriptFile ; private URI scriptFileUri ; @Rule public TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider ( ) ; @Before public void setUp ( ) throws URISyntaxException { testDir = tmpDir . createDir ( <str> ) ; scriptFile = new File ( testDir , <str> ) ; scriptFileUri = scriptFile . toURI ( ) ; createJar ( ) ; } private URI createJar ( ) throws URISyntaxException { TestFile jarFile = tmpDir . getTestDirectory ( ) . file ( <str> ) ; testDir . file ( <str> ) . write ( <str> ) ; testDir . zipTo ( jarFile ) ; return new URI ( String . format ( <str> , jarFile . toURI ( ) ) ) ; } @Test public void canConstructSourceFromFile ( ) { UriScriptSource source = new UriScriptSource ( <str> , scriptFile ) ; assertThat ( source . getResource ( ) , instanceOf ( UriResource . class ) ) ; assertThat ( source . getResource ( ) . getFile ( ) , equalTo ( scriptFile ) ) ; } @Test public void canConstructSourceFromFileURI ( ) { UriScriptSource source = new UriScriptSource ( <str> , scriptFileUri ) ; assertThat ( source . getResource ( ) , instanceOf ( UriResource . class ) ) ; assertThat ( source . getResource ( ) . getFile ( ) , equalTo ( scriptFile ) ) ; } @Test public void canConstructSourceFromJarURI ( ) throws URISyntaxException { URI uri = createJar ( ) ; UriScriptSource source = new UriScriptSource ( <str> , uri ) ; assertThat ( source . getResource ( ) , instanceOf ( UriResource . class ) ) ; assertThat ( source . getResource ( ) . getURI ( ) , equalTo ( uri ) ) ; } @Test public void usesScriptFileNameToBuildDescription ( ) { UriScriptSource source = new UriScriptSource ( <str> , scriptFile ) ; assertThat ( source . getDisplayName ( ) , equalTo ( String . format ( <str> , scriptFile . getAbsolutePath ( ) ) ) ) ; } @Test public void usesScriptFileNameToBuildDescriptionWhenUsingFileUri ( ) { UriScriptSource source = new UriScriptSource ( <str> , scriptFileUri ) ; assertThat ( source . getDisplayName ( ) , equalTo ( String . format ( <str> , scriptFile . getAbsolutePath ( ) ) ) ) ; } @Test public void usesScriptFileNameToBuildDescriptionWhenUsingHttpUri ( ) throws URISyntaxException { UriScriptSource source = new UriScriptSource ( <str> , new URI ( <str> ) ) ; assertThat ( source . getDisplayName ( ) , equalTo ( String . format ( <str> ) ) ) ; } @Test public void usesScriptFilePathForFileNameUsingFile ( ) { UriScriptSource source = new UriScriptSource ( <str> , scriptFile ) ; assertThat ( source . getFileName ( ) , equalTo ( scriptFile . getAbsolutePath ( ) ) ) ; } @Test public void usesScriptFilePathForFileNameUsingFileUri ( ) { UriScriptSource source = new UriScriptSource ( <str> , scriptFileUri ) ; assertThat ( source . getFileName ( ) , equalTo ( scriptFile . getAbsolutePath ( ) ) ) ; } @Test public void usesScriptUriForFileNameUsingHttpUri ( ) throws URISyntaxException { UriScriptSource source = new UriScriptSource ( <str> , new URI ( <str> ) ) ; assertThat ( source . getFileName ( ) , equalTo ( <str> ) ) ; } @Test public void generatesClassNameFromFileNameByRemovingExtensionAndAddingHashOfFileURL ( ) { UriScriptSource source = new UriScriptSource ( <str> , scriptFile ) ; assertThat ( source . getClassName ( ) , matchesRegexp ( <str> ) ) ; } @Test public void generatesClassNameFromFileNameByRemovingExtensionAndAddingHashOfJarURL ( ) throws Exception { UriScriptSource source = new UriScriptSource ( <str> , createJar ( ) ) ; assertThat ( source . getClassName ( ) , matchesRegexp ( <str> ) ) ; } @Test public void truncatesClassNameAt30Characters ( ) { UriScriptSource source = new UriScriptSource ( <str> , new File ( testDir , <str> ) ) ; assertThat ( source . getClassName ( ) , matchesRegexp ( <str> ) ) ; } @Test public void encodesReservedCharactersInClassName ( ) { UriScriptSource source = new UriScriptSource ( <str> , new File ( testDir , <str> ) ) ; assertThat ( source . getClassName ( ) , matchesRegexp ( <str> ) ) ; } @Test public void prefixesClassNameWhenFirstCharacterIsNotValidIdentifierStartChar ( ) { UriScriptSource source = new UriScriptSource ( <str> , new File ( testDir , <str> ) ) ; assertThat ( source . getClassName ( ) , matchesRegexp ( <str> ) ) ; source = new UriScriptSource ( <str> , new File ( testDir , <str> ) ) ; assertThat ( source . getClassName ( ) , matchesRegexp ( <str> ) ) ; } @Test public void filesWithSameNameAndDifferentPathHaveDifferentClassName ( ) { ScriptSource source1 = new UriScriptSource ( <str> , new File ( testDir , <str> ) ) ; ScriptSource source2 = new UriScriptSource ( <str> , new File ( testDir , <str> ) ) ; assertThat ( source1 . getClassName ( ) , not ( equalTo ( source2 . getClassName ( ) ) ) ) ; ScriptSource source3 = new UriScriptSource ( <str> , new File ( testDir , <str> ) ) ; assertThat ( source1 . getClassName ( ) , equalTo ( source3 . getClassName ( ) ) ) ; } @Test public void filesWithSameNameAndUriHaveDifferentClassName ( ) throws URISyntaxException { ScriptSource source1 = new UriScriptSource ( <str> , new File ( testDir , <str> ) ) ; ScriptSource source2 = new UriScriptSource ( <str> , new URI ( <str> ) ) ; assertThat ( source1 . getClassName ( ) , not ( equalTo ( source2 . getClassName ( ) ) ) ) ; ScriptSource source3 = new UriScriptSource ( <str> , new File ( testDir , <str> ) ) ; assertThat ( source1 . getClassName ( ) , equalTo ( source3 . getClassName ( ) ) ) ; } } 

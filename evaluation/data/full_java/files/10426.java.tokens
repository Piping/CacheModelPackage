package com . google . common . collect ; import com . google . common . collect . Synchronized . SynchronizedNavigableSet ; import com . google . common . collect . Synchronized . SynchronizedSortedSet ; import com . google . common . collect . testing . NavigableSetTestSuiteBuilder ; import com . google . common . collect . testing . SafeTreeSet ; import com . google . common . collect . testing . TestStringSortedSetGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Collections ; import java . util . Comparator ; import java . util . Iterator ; import java . util . List ; import java . util . NavigableSet ; import java . util . SortedSet ; import java . util . TreeSet ; public class SynchronizedNavigableSetTest extends TestCase { private static final Object MUTEX = new Integer ( <int> ) ; @SuppressWarnings ( <str> ) protected < E > NavigableSet < E > create ( ) { TestSet < E > inner = new TestSet < E > ( new TreeSet < E > ( ( Comparator < E > ) Ordering . natural ( ) . nullsFirst ( ) ) , MUTEX ) ; NavigableSet < E > outer = Synchronized . navigableSet ( inner , MUTEX ) ; return outer ; } static class TestSet < E > extends SynchronizedSetTest . TestSet < E > implements NavigableSet < E > { TestSet ( NavigableSet < E > delegate , Object mutex ) { super ( delegate , mutex ) ; } @Override protected NavigableSet < E > delegate ( ) { return ( NavigableSet < E > ) super . delegate ( ) ; } @Override public E ceiling ( E e ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . ceiling ( e ) ; } @Override public Iterator < E > descendingIterator ( ) { return delegate ( ) . descendingIterator ( ) ; } @Override public NavigableSet < E > descendingSet ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . descendingSet ( ) ; } @Override public E floor ( E e ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . floor ( e ) ; } @Override public NavigableSet < E > headSet ( E toElement , boolean inclusive ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . headSet ( toElement , inclusive ) ; } @Override public SortedSet < E > headSet ( E toElement ) { return headSet ( toElement , false ) ; } @Override public E higher ( E e ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . higher ( e ) ; } @Override public E lower ( E e ) { return delegate ( ) . lower ( e ) ; } @Override public E pollFirst ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . pollFirst ( ) ; } @Override public E pollLast ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . pollLast ( ) ; } @Override public NavigableSet < E > subSet ( E fromElement , boolean fromInclusive , E toElement , boolean toInclusive ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . subSet ( fromElement , fromInclusive , toElement , toInclusive ) ; } @Override public SortedSet < E > subSet ( E fromElement , E toElement ) { return subSet ( fromElement , true , toElement , false ) ; } @Override public NavigableSet < E > tailSet ( E fromElement , boolean inclusive ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . tailSet ( fromElement , inclusive ) ; } @Override public SortedSet < E > tailSet ( E fromElement ) { return tailSet ( fromElement , true ) ; } @Override public Comparator < ? super E > comparator ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . comparator ( ) ; } @Override public E first ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . first ( ) ; } @Override public E last ( ) { assertTrue ( Thread . holdsLock ( mutex ) ) ; return delegate ( ) . last ( ) ; } private static final long serialVersionUID = <int> ; } public static TestSuite suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( SynchronizedNavigableSetTest . class ) ; suite . addTest ( NavigableSetTestSuiteBuilder . using ( new TestStringSortedSetGenerator ( ) { @Override protected NavigableSet < String > create ( String [ ] elements ) { NavigableSet < String > innermost = new SafeTreeSet < String > ( ) ; Collections . addAll ( innermost , elements ) ; TestSet < String > inner = new TestSet < String > ( innermost , MUTEX ) ; NavigableSet < String > outer = Synchronized . navigableSet ( inner , MUTEX ) ; return outer ; } @Override public List < String > order ( List < String > insertionOrder ) { return Ordering . natural ( ) . sortedCopy ( insertionOrder ) ; } } ) . named ( <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . GENERAL_PURPOSE , CollectionFeature . SERIALIZABLE ) . createTestSuite ( ) ) ; return suite ; } public void testDescendingSet ( ) { NavigableSet < String > map = create ( ) ; NavigableSet < String > descendingSet = map . descendingSet ( ) ; assertTrue ( descendingSet instanceof SynchronizedNavigableSet ) ; assertSame ( MUTEX , ( ( SynchronizedNavigableSet < String > ) descendingSet ) . mutex ) ; } public void testHeadSet_E ( ) { NavigableSet < String > map = create ( ) ; SortedSet < String > headSet = map . headSet ( <str> ) ; assertTrue ( headSet instanceof SynchronizedSortedSet ) ; assertSame ( MUTEX , ( ( SynchronizedSortedSet < String > ) headSet ) . mutex ) ; } public void testHeadSet_E_B ( ) { NavigableSet < String > map = create ( ) ; NavigableSet < String > headSet = map . headSet ( <str> , true ) ; assertTrue ( headSet instanceof SynchronizedNavigableSet ) ; assertSame ( MUTEX , ( ( SynchronizedNavigableSet < String > ) headSet ) . mutex ) ; } public void testSubSet_E_E ( ) { NavigableSet < String > map = create ( ) ; SortedSet < String > subSet = map . subSet ( <str> , <str> ) ; assertTrue ( subSet instanceof SynchronizedSortedSet ) ; assertSame ( MUTEX , ( ( SynchronizedSortedSet < String > ) subSet ) . mutex ) ; } public void testSubSet_E_B_E_B ( ) { NavigableSet < String > map = create ( ) ; NavigableSet < String > subSet = map . subSet ( <str> , false , <str> , true ) ; assertTrue ( subSet instanceof SynchronizedNavigableSet ) ; assertSame ( MUTEX , ( ( SynchronizedNavigableSet < String > ) subSet ) . mutex ) ; } public void testTailSet_E ( ) { NavigableSet < String > map = create ( ) ; SortedSet < String > tailSet = map . tailSet ( <str> ) ; assertTrue ( tailSet instanceof SynchronizedSortedSet ) ; assertSame ( MUTEX , ( ( SynchronizedSortedSet < String > ) tailSet ) . mutex ) ; } public void testTailSet_E_B ( ) { NavigableSet < String > map = create ( ) ; NavigableSet < String > tailSet = map . tailSet ( <str> , true ) ; assertTrue ( tailSet instanceof SynchronizedNavigableSet ) ; assertSame ( MUTEX , ( ( SynchronizedNavigableSet < String > ) tailSet ) . mutex ) ; } } 

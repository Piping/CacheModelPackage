package org . elasticsearch . bootstrap ; import org . apache . lucene . util . Constants ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . common . io . PathUtils ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . test . ESTestCase ; import java . io . FilePermission ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Path ; import java . security . PermissionCollection ; import java . security . Permissions ; import java . util . Set ; @SuppressForbidden ( reason = <str> ) public class EvilSecurityTests extends ESTestCase { public void testGeneratedPermissions ( ) throws Exception { Path path = createTempDir ( ) ; Path esHome = path . resolve ( <str> ) ; Settings . Builder settingsBuilder = Settings . builder ( ) ; settingsBuilder . put ( <str> , esHome . toString ( ) ) ; Settings settings = settingsBuilder . build ( ) ; Path fakeTmpDir = createTempDir ( ) ; String realTmpDir = System . getProperty ( <str> ) ; Permissions permissions ; try { System . setProperty ( <str> , fakeTmpDir . toString ( ) ) ; Environment environment = new Environment ( settings ) ; permissions = Security . createPermissions ( environment ) ; } finally { System . setProperty ( <str> , realTmpDir ) ; } assertNoPermissions ( esHome , permissions ) ; assertNoPermissions ( esHome . getParent ( ) , permissions ) ; assertNoPermissions ( esHome . getParent ( ) . resolve ( <str> ) , permissions ) ; assertNoPermissions ( PathUtils . get ( realTmpDir ) , permissions ) ; } public void testEnvironmentPaths ( ) throws Exception { Path path = createTempDir ( ) ; Path esHome = path . resolve ( <str> ) ; Settings . Builder settingsBuilder = Settings . builder ( ) ; settingsBuilder . put ( <str> , esHome . resolve ( <str> ) . toString ( ) ) ; settingsBuilder . put ( <str> , esHome . resolve ( <str> ) . toString ( ) ) ; settingsBuilder . put ( <str> , esHome . resolve ( <str> ) . toString ( ) ) ; settingsBuilder . put ( <str> , esHome . resolve ( <str> ) . toString ( ) ) ; settingsBuilder . putArray ( <str> , esHome . resolve ( <str> ) . toString ( ) , esHome . resolve ( <str> ) . toString ( ) ) ; settingsBuilder . put ( <str> , esHome . resolve ( <str> ) . toString ( ) ) ; settingsBuilder . put ( <str> , esHome . resolve ( <str> ) . toString ( ) ) ; settingsBuilder . put ( <str> , esHome . resolve ( <str> ) . toString ( ) ) ; Settings settings = settingsBuilder . build ( ) ; Path fakeTmpDir = createTempDir ( ) ; String realTmpDir = System . getProperty ( <str> ) ; Permissions permissions ; Environment environment ; try { System . setProperty ( <str> , fakeTmpDir . toString ( ) ) ; environment = new Environment ( settings ) ; permissions = Security . createPermissions ( environment ) ; } finally { System . setProperty ( <str> , realTmpDir ) ; } assertNoPermissions ( esHome , permissions ) ; assertNoPermissions ( esHome . getParent ( ) , permissions ) ; assertNoPermissions ( esHome . getParent ( ) . resolve ( <str> ) , permissions ) ; assertNoPermissions ( PathUtils . get ( realTmpDir ) , permissions ) ; assertExactPermissions ( new FilePermission ( environment . binFile ( ) . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( environment . libFile ( ) . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( environment . modulesFile ( ) . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( environment . configFile ( ) . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( environment . scriptsFile ( ) . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( environment . pluginsFile ( ) . toString ( ) , <str> ) , permissions ) ; for ( Path dataPath : environment . dataFiles ( ) ) { assertExactPermissions ( new FilePermission ( dataPath . toString ( ) , <str> ) , permissions ) ; } for ( Path dataPath : environment . dataWithClusterFiles ( ) ) { assertExactPermissions ( new FilePermission ( dataPath . toString ( ) , <str> ) , permissions ) ; } assertExactPermissions ( new FilePermission ( environment . sharedDataFile ( ) . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( environment . logsFile ( ) . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( fakeTmpDir . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( environment . pidFile ( ) . toString ( ) , <str> ) , permissions ) ; } public void testEnsureSymlink ( ) throws IOException { Path p = createTempDir ( ) ; Path exists = p . resolve ( <str> ) ; Files . createDirectory ( exists ) ; Path linkExists = p . resolve ( <str> ) ; try { Files . createSymbolicLink ( linkExists , exists ) ; } catch ( UnsupportedOperationException | IOException e ) { assumeNoException ( <str> , e ) ; } catch ( SecurityException e ) { assumeNoException ( <str> , e ) ; } Security . ensureDirectoryExists ( linkExists ) ; Files . createTempFile ( linkExists , null , null ) ; } public void testEnsureBrokenSymlink ( ) throws IOException { Path p = createTempDir ( ) ; Path brokenLink = p . resolve ( <str> ) ; try { Files . createSymbolicLink ( brokenLink , p . resolve ( <str> ) ) ; } catch ( UnsupportedOperationException | IOException e ) { assumeNoException ( <str> , e ) ; } catch ( SecurityException e ) { assumeNoException ( <str> , e ) ; } try { Security . ensureDirectoryExists ( brokenLink ) ; fail ( <str> ) ; } catch ( IOException expected ) { } } public void testSymlinkPermissions ( ) throws IOException { assumeFalse ( <str> , Constants . WINDOWS ) ; Path dir = createTempDir ( ) ; Path target = dir . resolve ( <str> ) ; Files . createDirectory ( target ) ; Path link = dir . resolve ( <str> ) ; try { Files . createSymbolicLink ( link , target ) ; } catch ( UnsupportedOperationException | IOException e ) { assumeNoException ( <str> , e ) ; } catch ( SecurityException e ) { assumeNoException ( <str> , e ) ; } Permissions permissions = new Permissions ( ) ; Security . addPath ( permissions , <str> , link , <str> ) ; assertExactPermissions ( new FilePermission ( link . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( link . resolve ( <str> ) . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( target . toString ( ) , <str> ) , permissions ) ; assertExactPermissions ( new FilePermission ( target . resolve ( <str> ) . toString ( ) , <str> ) , permissions ) ; } static void assertExactPermissions ( FilePermission expected , PermissionCollection actual ) { String target = expected . getName ( ) ; Set < String > permissionSet = asSet ( expected . getActions ( ) . split ( <str> ) ) ; boolean read = permissionSet . remove ( <str> ) ; boolean readlink = permissionSet . remove ( <str> ) ; boolean write = permissionSet . remove ( <str> ) ; boolean delete = permissionSet . remove ( <str> ) ; boolean execute = permissionSet . remove ( <str> ) ; assertTrue ( <str> + permissionSet , permissionSet . isEmpty ( ) ) ; assertEquals ( read , actual . implies ( new FilePermission ( target , <str> ) ) ) ; assertEquals ( readlink , actual . implies ( new FilePermission ( target , <str> ) ) ) ; assertEquals ( write , actual . implies ( new FilePermission ( target , <str> ) ) ) ; assertEquals ( delete , actual . implies ( new FilePermission ( target , <str> ) ) ) ; assertEquals ( execute , actual . implies ( new FilePermission ( target , <str> ) ) ) ; } static void assertNoPermissions ( Path path , PermissionCollection actual ) { String target = path . toString ( ) ; assertFalse ( actual . implies ( new FilePermission ( target , <str> ) ) ) ; assertFalse ( actual . implies ( new FilePermission ( target , <str> ) ) ) ; assertFalse ( actual . implies ( new FilePermission ( target , <str> ) ) ) ; assertFalse ( actual . implies ( new FilePermission ( target , <str> ) ) ) ; assertFalse ( actual . implies ( new FilePermission ( target , <str> ) ) ) ; } } 

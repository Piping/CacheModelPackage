package org . apache . cassandra . io . sstable . format . big ; import java . io . IOException ; import java . util . * ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . cassandra . utils . AbstractIterator ; import com . google . common . collect . Iterators ; import com . google . common . util . concurrent . RateLimiter ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . db . * ; import org . apache . cassandra . db . rows . * ; import org . apache . cassandra . db . filter . * ; import org . apache . cassandra . db . partitions . * ; import org . apache . cassandra . dht . AbstractBounds ; import org . apache . cassandra . dht . AbstractBounds . Boundary ; import org . apache . cassandra . dht . Bounds ; import org . apache . cassandra . dht . Range ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . io . sstable . CorruptSSTableException ; import org . apache . cassandra . io . sstable . ISSTableScanner ; import org . apache . cassandra . io . sstable . SSTableIdentityIterator ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . io . util . FileUtils ; import org . apache . cassandra . io . util . RandomAccessReader ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . Pair ; import static org . apache . cassandra . dht . AbstractBounds . isEmpty ; import static org . apache . cassandra . dht . AbstractBounds . maxLeft ; import static org . apache . cassandra . dht . AbstractBounds . minRight ; public class BigTableScanner implements ISSTableScanner { private final AtomicBoolean isClosed = new AtomicBoolean ( false ) ; protected final RandomAccessReader dfile ; protected final RandomAccessReader ifile ; public final SSTableReader sstable ; private final Iterator < AbstractBounds < PartitionPosition > > rangeIterator ; private AbstractBounds < PartitionPosition > currentRange ; private final ColumnFilter columns ; private final DataRange dataRange ; private final RowIndexEntry . IndexSerializer rowIndexEntrySerializer ; private final boolean isForThrift ; protected Iterator < UnfilteredRowIterator > iterator ; public static ISSTableScanner getScanner ( SSTableReader sstable , RateLimiter limiter ) { return new BigTableScanner ( sstable , ColumnFilter . all ( sstable . metadata ) , null , limiter , false , Iterators . singletonIterator ( fullRange ( sstable ) ) ) ; } public static ISSTableScanner getScanner ( SSTableReader sstable , ColumnFilter columns , DataRange dataRange , RateLimiter limiter , boolean isForThrift ) { return new BigTableScanner ( sstable , columns , dataRange , limiter , isForThrift , makeBounds ( sstable , dataRange ) . iterator ( ) ) ; } public static ISSTableScanner getScanner ( SSTableReader sstable , Collection < Range < Token > > tokenRanges , RateLimiter limiter ) { List < Pair < Long , Long > > positions = sstable . getPositionsForRanges ( tokenRanges ) ; if ( positions . isEmpty ( ) ) return new EmptySSTableScanner ( sstable ) ; return new BigTableScanner ( sstable , ColumnFilter . all ( sstable . metadata ) , null , limiter , false , makeBounds ( sstable , tokenRanges ) . iterator ( ) ) ; } private BigTableScanner ( SSTableReader sstable , ColumnFilter columns , DataRange dataRange , RateLimiter limiter , boolean isForThrift , Iterator < AbstractBounds < PartitionPosition > > rangeIterator ) { assert sstable ! = null ; this . dfile = limiter = = null ? sstable . openDataReader ( ) : sstable . openDataReader ( limiter ) ; this . ifile = sstable . openIndexReader ( ) ; this . sstable = sstable ; this . columns = columns ; this . dataRange = dataRange ; this . rowIndexEntrySerializer = sstable . descriptor . version . getSSTableFormat ( ) . getIndexSerializer ( sstable . metadata , sstable . descriptor . version , sstable . header ) ; this . isForThrift = isForThrift ; this . rangeIterator = rangeIterator ; } private static List < AbstractBounds < PartitionPosition > > makeBounds ( SSTableReader sstable , Collection < Range < Token > > tokenRanges ) { List < AbstractBounds < PartitionPosition > > boundsList = new ArrayList < > ( tokenRanges . size ( ) ) ; for ( Range < Token > range : Range . normalize ( tokenRanges ) ) addRange ( sstable , Range . makeRowRange ( range ) , boundsList ) ; return boundsList ; } private static List < AbstractBounds < PartitionPosition > > makeBounds ( SSTableReader sstable , DataRange dataRange ) { List < AbstractBounds < PartitionPosition > > boundsList = new ArrayList < > ( <int> ) ; addRange ( sstable , dataRange . keyRange ( ) , boundsList ) ; return boundsList ; } private static AbstractBounds < PartitionPosition > fullRange ( SSTableReader sstable ) { return new Bounds < PartitionPosition > ( sstable . first , sstable . last ) ; } private static void addRange ( SSTableReader sstable , AbstractBounds < PartitionPosition > requested , List < AbstractBounds < PartitionPosition > > boundsList ) { if ( requested instanceof Range & & ( ( Range ) requested ) . isWrapAround ( ) ) { if ( requested . right . compareTo ( sstable . first ) > = <int> ) { Boundary < PartitionPosition > left = new Boundary < PartitionPosition > ( sstable . first , true ) ; Boundary < PartitionPosition > right ; right = requested . rightBoundary ( ) ; right = minRight ( right , sstable . last , true ) ; if ( ! isEmpty ( left , right ) ) boundsList . add ( AbstractBounds . bounds ( left , right ) ) ; } if ( requested . left . compareTo ( sstable . last ) < = <int> ) { Boundary < PartitionPosition > right = new Boundary < PartitionPosition > ( sstable . last , true ) ; Boundary < PartitionPosition > left ; left = requested . leftBoundary ( ) ; left = maxLeft ( left , sstable . first , true ) ; if ( ! isEmpty ( left , right ) ) boundsList . add ( AbstractBounds . bounds ( left , right ) ) ; } } else { assert requested . left . compareTo ( requested . right ) < = <int> | | requested . right . isMinimum ( ) ; Boundary < PartitionPosition > left , right ; left = requested . leftBoundary ( ) ; right = requested . rightBoundary ( ) ; left = maxLeft ( left , sstable . first , true ) ; right = requested . right . isMinimum ( ) ? new Boundary < PartitionPosition > ( sstable . last , true ) : minRight ( right , sstable . last , true ) ; if ( ! isEmpty ( left , right ) ) boundsList . add ( AbstractBounds . bounds ( left , right ) ) ; } } private void seekToCurrentRangeStart ( ) { long indexPosition = sstable . getIndexScanPosition ( currentRange . left ) ; ifile . seek ( indexPosition ) ; try { while ( ! ifile . isEOF ( ) ) { indexPosition = ifile . getFilePointer ( ) ; DecoratedKey indexDecoratedKey = sstable . decorateKey ( ByteBufferUtil . readWithShortLength ( ifile ) ) ; if ( indexDecoratedKey . compareTo ( currentRange . left ) > <int> | | currentRange . contains ( indexDecoratedKey ) ) { long dataPosition = RowIndexEntry . Serializer . readPosition ( ifile , sstable . descriptor . version ) ; ifile . seek ( indexPosition ) ; dfile . seek ( dataPosition ) ; break ; } else { RowIndexEntry . Serializer . skip ( ifile , sstable . descriptor . version ) ; } } } catch ( IOException e ) { sstable . markSuspect ( ) ; throw new CorruptSSTableException ( e , sstable . getFilename ( ) ) ; } } public void close ( ) { try { if ( isClosed . compareAndSet ( false , true ) ) FileUtils . close ( dfile , ifile ) ; } catch ( IOException e ) { sstable . markSuspect ( ) ; throw new CorruptSSTableException ( e , sstable . getFilename ( ) ) ; } } public long getLengthInBytes ( ) { return dfile . length ( ) ; } public long getCurrentPosition ( ) { return dfile . getFilePointer ( ) ; } public String getBackingFiles ( ) { return sstable . toString ( ) ; } public boolean isForThrift ( ) { return isForThrift ; } public CFMetaData metadata ( ) { return sstable . metadata ; } public boolean hasNext ( ) { if ( iterator = = null ) iterator = createIterator ( ) ; return iterator . hasNext ( ) ; } public UnfilteredRowIterator next ( ) { if ( iterator = = null ) iterator = createIterator ( ) ; return iterator . next ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } private Iterator < UnfilteredRowIterator > createIterator ( ) { return new KeyScanningIterator ( ) ; } protected class KeyScanningIterator extends AbstractIterator < UnfilteredRowIterator > { private DecoratedKey nextKey ; private RowIndexEntry nextEntry ; private DecoratedKey currentKey ; private RowIndexEntry currentEntry ; protected UnfilteredRowIterator computeNext ( ) { try { if ( nextEntry = = null ) { do { if ( ! rangeIterator . hasNext ( ) ) return endOfData ( ) ; currentRange = rangeIterator . next ( ) ; seekToCurrentRangeStart ( ) ; if ( ifile . isEOF ( ) ) return endOfData ( ) ; currentKey = sstable . decorateKey ( ByteBufferUtil . readWithShortLength ( ifile ) ) ; currentEntry = rowIndexEntrySerializer . deserialize ( ifile ) ; } while ( ! currentRange . contains ( currentKey ) ) ; } else { currentKey = nextKey ; currentEntry = nextEntry ; } if ( ifile . isEOF ( ) ) { nextEntry = null ; nextKey = null ; } else { nextKey = sstable . decorateKey ( ByteBufferUtil . readWithShortLength ( ifile ) ) ; nextEntry = rowIndexEntrySerializer . deserialize ( ifile ) ; if ( ! currentRange . contains ( nextKey ) ) { nextKey = null ; nextEntry = null ; } } return new LazilyInitializedUnfilteredRowIterator ( currentKey ) { protected UnfilteredRowIterator initializeIterator ( ) { try { if ( dataRange = = null ) { dfile . seek ( currentEntry . position + currentEntry . headerOffset ( ) ) ; ByteBufferUtil . readWithShortLength ( dfile ) ; return new SSTableIdentityIterator ( sstable , dfile , partitionKey ( ) ) ; } ClusteringIndexFilter filter = dataRange . clusteringIndexFilter ( partitionKey ( ) ) ; return filter . filter ( sstable . iterator ( dfile , partitionKey ( ) , currentEntry , columns , filter . isReversed ( ) , isForThrift ) ) ; } catch ( CorruptSSTableException | IOException e ) { sstable . markSuspect ( ) ; throw new CorruptSSTableException ( e , sstable . getFilename ( ) ) ; } } } ; } catch ( CorruptSSTableException | IOException e ) { sstable . markSuspect ( ) ; throw new CorruptSSTableException ( e , sstable . getFilename ( ) ) ; } } } @Override public String toString ( ) { return getClass ( ) . getSimpleName ( ) + <str> + <str> + dfile + <str> + ifile + <str> + sstable + <str> ; } public static class EmptySSTableScanner extends AbstractUnfilteredPartitionIterator implements ISSTableScanner { private final SSTableReader sstable ; public EmptySSTableScanner ( SSTableReader sstable ) { this . sstable = sstable ; } public long getLengthInBytes ( ) { return <int> ; } public long getCurrentPosition ( ) { return <int> ; } public String getBackingFiles ( ) { return sstable . getFilename ( ) ; } public boolean isForThrift ( ) { return false ; } public CFMetaData metadata ( ) { return sstable . metadata ; } public boolean hasNext ( ) { return false ; } public UnfilteredRowIterator next ( ) { return null ; } } } 

package org . elasticsearch . search . aggregations . bucket . significant . heuristics ; import org . elasticsearch . common . collect . CopyOnWriteHashMap ; import org . elasticsearch . common . io . stream . StreamInput ; import java . io . IOException ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; public class SignificanceHeuristicStreams { private static Map < String , Stream > STREAMS = Collections . emptyMap ( ) ; static { HashMap < String , Stream > map = new HashMap < > ( ) ; map . put ( JLHScore . STREAM . getName ( ) , JLHScore . STREAM ) ; map . put ( PercentageScore . STREAM . getName ( ) , PercentageScore . STREAM ) ; map . put ( MutualInformation . STREAM . getName ( ) , MutualInformation . STREAM ) ; map . put ( GND . STREAM . getName ( ) , GND . STREAM ) ; map . put ( ChiSquare . STREAM . getName ( ) , ChiSquare . STREAM ) ; map . put ( ScriptHeuristic . STREAM . getName ( ) , ScriptHeuristic . STREAM ) ; STREAMS = Collections . unmodifiableMap ( map ) ; } public static SignificanceHeuristic read ( StreamInput in ) throws IOException { return stream ( in . readString ( ) ) . readResult ( in ) ; } public static interface Stream { SignificanceHeuristic readResult ( StreamInput in ) throws IOException ; String getName ( ) ; } public static synchronized void registerStream ( Stream stream ) { if ( STREAMS . containsKey ( stream . getName ( ) ) ) { throw new IllegalArgumentException ( <str> + stream . getName ( ) + <str> ) ; } HashMap < String , Stream > map = new HashMap < > ( ) ; map . putAll ( STREAMS ) ; map . put ( stream . getName ( ) , stream ) ; STREAMS = Collections . unmodifiableMap ( map ) ; } private static synchronized Stream stream ( String name ) { return STREAMS . get ( name ) ; } } 

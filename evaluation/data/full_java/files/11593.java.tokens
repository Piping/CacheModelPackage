package org . gradle . api . internal . initialization ; import org . gradle . api . UnknownProjectException ; import org . gradle . api . internal . DomainObjectContext ; import org . gradle . api . internal . artifacts . DependencyManagementServices ; import org . gradle . api . internal . artifacts . DependencyResolutionServices ; import org . gradle . api . internal . artifacts . configurations . DependencyMetaDataProvider ; import org . gradle . api . internal . artifacts . dsl . dependencies . ProjectFinder ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . groovy . scripts . ScriptSource ; public class DefaultScriptHandlerFactory implements ScriptHandlerFactory { private final DependencyManagementServices dependencyManagementServices ; private final DependencyMetaDataProvider dependencyMetaDataProvider ; private final FileResolver fileResolver ; private final ProjectFinder projectFinder = new ProjectFinder ( ) { public ProjectInternal getProject ( String path ) { throw new UnknownProjectException ( <str> ) ; } } ; public DefaultScriptHandlerFactory ( DependencyManagementServices dependencyManagementServices , FileResolver fileResolver , DependencyMetaDataProvider dependencyMetaDataProvider ) { this . dependencyManagementServices = dependencyManagementServices ; this . fileResolver = fileResolver ; this . dependencyMetaDataProvider = dependencyMetaDataProvider ; } public ScriptHandlerInternal create ( ScriptSource scriptSource , ClassLoaderScope classLoaderScope ) { return create ( scriptSource , classLoaderScope , new BasicDomainObjectContext ( ) ) ; } public ScriptHandlerInternal create ( ScriptSource scriptSource , ClassLoaderScope classLoaderScope , DomainObjectContext context ) { DependencyResolutionServices services = dependencyManagementServices . create ( fileResolver , dependencyMetaDataProvider , projectFinder , context ) ; return new DefaultScriptHandler ( scriptSource , services , classLoaderScope ) ; } } 

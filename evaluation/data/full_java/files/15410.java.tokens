package org . gradle . internal . resource . transport . http ; import org . apache . http . ssl . SSLInitializationException ; import org . gradle . internal . Factory ; import org . gradle . internal . SystemProperties ; import javax . net . ssl . KeyManagerFactory ; import javax . net . ssl . SSLContext ; import javax . net . ssl . TrustManagerFactory ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . security . GeneralSecurityException ; import java . security . KeyStore ; public class DefaultSslContextFactory implements Factory < SSLContext > { private static final char [ ] EMPTY_PASSWORD = <str> . toCharArray ( ) ; @Override public SSLContext create ( ) { try { TrustManagerFactory tmFactory ; String trustAlgorithm = System . getProperty ( <str> ) ; if ( trustAlgorithm = = null ) { trustAlgorithm = TrustManagerFactory . getDefaultAlgorithm ( ) ; } String trustStoreType = System . getProperty ( <str> ) ; if ( trustStoreType = = null ) { trustStoreType = KeyStore . getDefaultType ( ) ; } if ( <str> . equalsIgnoreCase ( trustStoreType ) ) { tmFactory = TrustManagerFactory . getInstance ( trustAlgorithm ) ; } else { File trustStoreFile ; String s = System . getProperty ( <str> ) ; if ( s ! = null ) { trustStoreFile = new File ( s ) ; tmFactory = TrustManagerFactory . getInstance ( trustAlgorithm ) ; String trustStoreProvider = System . getProperty ( <str> ) ; KeyStore trustStore ; if ( trustStoreProvider ! = null ) { trustStore = KeyStore . getInstance ( trustStoreType , trustStoreProvider ) ; } else { trustStore = KeyStore . getInstance ( trustStoreType ) ; } String trustStorePassword = System . getProperty ( <str> ) ; FileInputStream instream = new FileInputStream ( trustStoreFile ) ; try { trustStore . load ( instream , trustStorePassword ! = null ? trustStorePassword . toCharArray ( ) : EMPTY_PASSWORD ) ; } finally { instream . close ( ) ; } tmFactory . init ( trustStore ) ; } else { File javaHome = SystemProperties . getInstance ( ) . getJavaHomeDir ( ) ; File file = new File ( javaHome , <str> ) ; if ( ! file . exists ( ) ) { file = new File ( javaHome , <str> ) ; trustStoreFile = file ; } else { trustStoreFile = file ; } tmFactory = TrustManagerFactory . getInstance ( TrustManagerFactory . getDefaultAlgorithm ( ) ) ; KeyStore trustStore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; String trustStorePassword = System . getProperty ( <str> ) ; FileInputStream instream = new FileInputStream ( trustStoreFile ) ; try { trustStore . load ( instream , trustStorePassword ! = null ? trustStorePassword . toCharArray ( ) : null ) ; } finally { instream . close ( ) ; } tmFactory . init ( trustStore ) ; } } KeyManagerFactory kmFactory = null ; String keyAlgorithm = System . getProperty ( <str> ) ; if ( keyAlgorithm = = null ) { keyAlgorithm = KeyManagerFactory . getDefaultAlgorithm ( ) ; } String keyStoreType = System . getProperty ( <str> ) ; if ( keyStoreType = = null ) { keyStoreType = KeyStore . getDefaultType ( ) ; } if ( <str> . equalsIgnoreCase ( keyStoreType ) ) { kmFactory = KeyManagerFactory . getInstance ( keyAlgorithm ) ; } else { File keyStoreFile = null ; String s = System . getProperty ( <str> ) ; if ( s ! = null ) { keyStoreFile = new File ( s ) ; } if ( keyStoreFile ! = null ) { kmFactory = KeyManagerFactory . getInstance ( keyAlgorithm ) ; String keyStoreProvider = System . getProperty ( <str> ) ; KeyStore keyStore ; if ( keyStoreProvider ! = null ) { keyStore = KeyStore . getInstance ( keyStoreType , keyStoreProvider ) ; } else { keyStore = KeyStore . getInstance ( keyStoreType ) ; } String keyStorePassword = System . getProperty ( <str> ) ; FileInputStream instream = new FileInputStream ( keyStoreFile ) ; try { keyStore . load ( instream , keyStorePassword ! = null ? keyStorePassword . toCharArray ( ) : EMPTY_PASSWORD ) ; } finally { instream . close ( ) ; } kmFactory . init ( keyStore , keyStorePassword ! = null ? keyStorePassword . toCharArray ( ) : EMPTY_PASSWORD ) ; } } SSLContext sslcontext = SSLContext . getInstance ( <str> ) ; sslcontext . init ( kmFactory ! = null ? kmFactory . getKeyManagers ( ) : null , tmFactory ! = null ? tmFactory . getTrustManagers ( ) : null , null ) ; return sslcontext ; } catch ( GeneralSecurityException e ) { throw new SSLInitializationException ( e . getMessage ( ) , e ) ; } catch ( IOException e ) { throw new SSLInitializationException ( e . getMessage ( ) , e ) ; } } } 

package org . apache . cassandra . cql3 ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . net . InetAddress ; import java . text . SimpleDateFormat ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Date ; import java . util . HashSet ; import java . util . List ; import java . util . UUID ; import junit . framework . Assert ; import org . apache . cassandra . concurrent . SEPExecutor ; import org . apache . cassandra . concurrent . Stage ; import org . apache . cassandra . concurrent . StageManager ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . SystemKeyspace ; import org . apache . cassandra . serializers . SimpleDateSerializer ; import org . apache . cassandra . serializers . TimeSerializer ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . junit . After ; import org . junit . Before ; import org . junit . BeforeClass ; import org . junit . Test ; import com . datastax . driver . core . exceptions . InvalidQueryException ; public class ViewSchemaTest extends CQLTester { int protocolVersion = <int> ; private final List < String > views = new ArrayList < > ( ) ; @BeforeClass public static void startup ( ) { requireNetwork ( ) ; } @Before public void begin ( ) { views . clear ( ) ; } @After public void end ( ) throws Throwable { for ( String viewName : views ) executeNet ( protocolVersion , <str> + viewName ) ; } private void createView ( String name , String query ) throws Throwable { executeNet ( protocolVersion , String . format ( query , name ) ) ; views . add ( name ) ; } private void updateView ( String query , Object . . . params ) throws Throwable { executeNet ( protocolVersion , query , params ) ; while ( ! ( ( ( SEPExecutor ) StageManager . getStage ( Stage . VIEW_MUTATION ) ) . getPendingTasks ( ) = = <int> & & ( ( SEPExecutor ) StageManager . getStage ( Stage . VIEW_MUTATION ) ) . getActiveCount ( ) = = <int> ) ) { Thread . sleep ( <int> ) ; } } @Test public void testCaseSensitivity ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; execute ( <str> , <int> , <int> , <int> ) ; createView ( <str> , <str> + <str> + <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; createView ( <str> , <str> + <str> + <str> ) ; while ( ! SystemKeyspace . isViewBuilt ( keyspace ( ) , <str> ) ) Thread . sleep ( <int> ) ; for ( String mvname : Arrays . asList ( <str> , <str> ) ) { assertRows ( execute ( <str> + mvname ) , row ( <int> , <int> , <int> ) ) ; } executeNet ( protocolVersion , <str> ) ; for ( String mvname : Arrays . asList ( <str> , <str> ) ) { assertRows ( execute ( <str> + mvname ) , row ( <int> , <int> , <int> ) ) ; } } @Test public void testAccessAndSchema ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <str> , <int> ) ; try { updateView ( <str> , <int> , <str> , <int> ) ; Assert . fail ( <str> ) ; } catch ( Exception e ) { } try { executeNet ( protocolVersion , <str> ) ; Assert . fail ( <str> ) ; } catch ( Exception e ) { } try { executeNet ( protocolVersion , <str> ) ; Assert . fail ( <str> ) ; } catch ( Exception e ) { } executeNet ( protocolVersion , <str> ) ; executeNet ( protocolVersion , <str> ) ; CFMetaData metadata = Schema . instance . getCFMetaData ( keyspace ( ) , <str> ) ; Assert . assertNotNull ( metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ) ; updateView ( <str> , <int> , <str> , <int> , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; executeNet ( protocolVersion , <str> ) ; assertRows ( execute ( <str> ) , row ( <str> ) ) ; metadata = Schema . instance . getCFMetaData ( keyspace ( ) , <str> ) ; Assert . assertNotNull ( metadata . getColumnDefinition ( ByteBufferUtil . bytes ( <str> ) ) ) ; } @Test public void testTwoTablesOneView ( ) throws Throwable { execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createTable ( <str> + keyspace ( ) + <str> + <str> + <str> + <str> ) ; createTable ( <str> + keyspace ( ) + <str> + <str> + <str> + <str> ) ; createView ( <str> , <str> + keyspace ( ) + <str> ) ; createView ( <str> , <str> + keyspace ( ) + <str> ) ; updateView ( <str> + keyspace ( ) + <str> , <int> , <int> ) ; assertRows ( execute ( <str> + keyspace ( ) + <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; updateView ( <str> + keyspace ( ) + <str> , <int> , <int> ) ; assertRows ( execute ( <str> + keyspace ( ) + <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> + keyspace ( ) + <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; updateView ( <str> + keyspace ( ) + <str> , <int> , <int> ) ; assertRows ( execute ( <str> + keyspace ( ) + <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; } @Test public void testReuseName ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; executeNet ( protocolVersion , <str> ) ; views . remove ( <str> ) ; createView ( <str> , <str> ) ; updateView ( <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; } @Test public void testAllTypes ( ) throws Throwable { String myType = createType ( <str> ) ; createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + myType + <str> ) ; CFMetaData metadata = currentTableMetadata ( ) ; execute ( <str> + keyspace ( ) ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; for ( ColumnDefinition def : new HashSet < > ( metadata . allColumns ( ) ) ) { try { createView ( <str> + def . name , <str> + def . name + <str> + def . name + <str> ) ; if ( def . type . isMultiCell ( ) ) Assert . fail ( <str> + def ) ; if ( def . isPartitionKey ( ) ) Assert . fail ( <str> + def ) ; } catch ( InvalidQueryException e ) { if ( ! def . type . isMultiCell ( ) & & ! def . isPartitionKey ( ) ) Assert . fail ( <str> + def ) ; } } assertInvalidMessage ( <str> , <str> , <int> , <int> ) ; String func1 = createFunction ( KEYSPACE , <str> , <str> ) ; createFunctionOverload ( func1 , <str> , <str> ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , null ) ) ; updateView ( <str> , <str> , <str> ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , null ) ) ; updateView ( <str> , <str> ) ; assertRows ( execute ( <str> , <int> ) ) ; assertRows ( execute ( <str> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , null ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , ByteBufferUtil . bytes ( <int> ) ) ) ; assertRows ( execute ( <str> , ByteBufferUtil . bytes ( <int> ) ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , true ) ) ; assertRows ( execute ( <str> , true ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , false ) ) ; assertRows ( execute ( <str> , true ) ) ; assertRows ( execute ( <str> , false ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , SimpleDateSerializer . dateStringToDays ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigDecimal ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigDecimal ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigDecimal ( <str> ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigDecimal ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <float> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , InetAddress . getByName ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , InetAddress . getByName ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , TimeSerializer . timeStringToLong ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new Date ( <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new SimpleDateFormat ( <str> ) . parse ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , UUID . fromString ( <str> ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , UUID . fromString ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , UUID . fromString ( <str> ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , UUID . fromString ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigInteger ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , new BigInteger ( <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , list ( <int> ) ) ) ; updateView ( <str> , <str> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , list ( <int> , <int> ) ) ) ; updateView ( <str> , <str> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; updateView ( <str> , <str> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; updateView ( <str> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , list ( <int> , <int> ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , null ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , null ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , list ( <int> , <int> , <int> ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , list ( ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , list ( ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; updateView ( <str> , <str> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , set ( UUID . fromString ( <str> ) , UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; updateView ( <str> , <str> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , null ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , null ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , set ( UUID . fromString ( <str> ) , ( UUID . fromString ( <str> ) ) ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; updateView ( <str> , <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> , <str> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , map ( <str> , <int> , <str> , <int> , <str> , <int> ) ) ) ; updateView ( <str> , <str> , <int> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> , <str> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , map ( <str> , <int> , <str> , <int> , <str> , <int> ) ) ) ; updateView ( <str> , <str> , <int> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , null ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , null ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , map ( <str> , <int> , <str> , <int> ) ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , tuple ( <int> , <str> , UUID . fromString ( <str> ) ) ) ) ; assertRows ( execute ( <str> , tuple ( <int> , <str> , UUID . fromString ( <str> ) ) ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , tuple ( <int> , null , UUID . fromString ( <str> ) ) ) ) ; assertRows ( execute ( <str> , tuple ( <int> , <str> , UUID . fromString ( <str> ) ) ) ) ; assertRows ( execute ( <str> , tuple ( <int> , null , UUID . fromString ( <str> ) ) ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , UUID . fromString ( <str> ) , set ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , UUID . fromString ( <str> ) , set ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , null , UUID . fromString ( <str> ) , set ( <str> , <str> ) ) ) ; assertRows ( execute ( <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; updateView ( <str> , <int> , <str> ) ; assertRows ( execute ( <str> , <int> ) , row ( <int> , <int> , UUID . fromString ( <str> ) , null ) ) ; assertRows ( execute ( <str> , <str> ) ) ; assertRows ( execute ( <str> , <str> ) , row ( <int> , <str> ) ) ; } @Test public void testDropTableWithMV ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( keyspace ( ) + <str> , <str> ) ; try { executeNet ( protocolVersion , <str> + keyspace ( ) + <str> ) ; Assert . fail ( ) ; } catch ( InvalidQueryException e ) { Assert . assertEquals ( <str> , e . getMessage ( ) ) ; } } @Test public void testAlterTable ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; alterTable ( <str> ) ; } @Test public void testAlterReversedTypeBaseTable ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; alterTable ( <str> ) ; } @Test public void testAlterReversedTypeViewTable ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; alterTable ( <str> ) ; } @Test public void testAlterClusteringViewTable ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; alterTable ( <str> ) ; } @Test public void testAlterViewTableValue ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; executeNet ( protocolVersion , <str> + keyspace ( ) ) ; createView ( <str> , <str> ) ; assertInvalid ( <str> ) ; } } 

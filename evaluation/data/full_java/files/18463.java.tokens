package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . Container ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . utils . TextureRegionDrawable ; import com . badlogic . gdx . tests . utils . GdxTest ; public class ContainerTest extends GdxTest { Skin skin ; Stage stage ; @Override public void create ( ) { skin = new Skin ( Gdx . files . internal ( <str> ) ) ; stage = new Stage ( ) ; Gdx . input . setInputProcessor ( stage ) ; TextureRegionDrawable logo = new TextureRegionDrawable ( new TextureRegion ( new Texture ( Gdx . files . internal ( <str> ) ) ) ) ; Table root = new Table ( ) ; root . setFillParent ( true ) ; root . debug ( ) . defaults ( ) . space ( <int> ) . size ( <int> ) ; stage . addActor ( root ) ; root . add ( new Container ( label ( <str> ) ) ) ; root . add ( new Container ( label ( <str> ) ) . top ( ) ) ; root . add ( new Container ( label ( <str> ) ) . right ( ) ) ; root . add ( new Container ( label ( <str> ) ) . bottom ( ) ) ; root . add ( new Container ( label ( <str> ) ) . left ( ) ) ; root . row ( ) ; root . add ( new Container ( label ( <str> ) ) . fill ( ) ) ; root . add ( new Container ( label ( <str> ) ) . fillX ( ) ) ; root . add ( new Container ( label ( <str> ) ) . fillY ( ) ) ; root . add ( new Container ( label ( <str> ) ) . fill ( <float> , <float> ) ) ; root . add ( new Container ( label ( <str> ) ) . fill ( <float> , <float> ) . bottom ( ) . right ( ) ) ; root . row ( ) ; root . add ( new Container ( label ( <str> ) ) . padTop ( <int> ) . top ( ) ) ; root . add ( new Container ( label ( <str> ) ) . padBottom ( <int> ) . bottom ( ) ) ; root . add ( new Container ( label ( <str> ) ) . padLeft ( <int> ) ) ; root . add ( new Container ( label ( <str> ) ) . pad ( <int> ) . fill ( ) ) ; root . add ( new Container ( label ( <str> ) ) . pad ( <int> ) . top ( ) . left ( ) ) ; root . row ( ) ; root . add ( new Container ( label ( <str> ) ) . background ( logo ) ) ; root . add ( new Container ( label ( <str> ) ) . background ( logo ) . height ( <int> ) ) ; Container transformBG = new Container ( label ( <str> ) ) . background ( logo ) ; transformBG . setTransform ( true ) ; transformBG . setOrigin ( <int> , <int> ) ; transformBG . rotateBy ( <int> ) ; root . add ( transformBG ) ; Container transform = new Container ( label ( <str> ) ) ; transform . setTransform ( true ) ; transform . setOrigin ( <int> , <int> ) ; transform . rotateBy ( <int> ) ; root . add ( transform ) ; Container clip = new Container ( label ( <str> ) ) ; clip . setClip ( true ) ; root . add ( clip ) ; } Table label ( String text ) { Table table = new Table ( ) . debug ( ) ; table . add ( new Label ( text , skin ) ) . fill ( ) . expand ( ) ; return table ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( ) ; stage . draw ( ) ; } @Override public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } @Override public void dispose ( ) { stage . dispose ( ) ; skin . dispose ( ) ; } } 

package org . elasticsearch . index . codec ; import org . apache . lucene . codecs . Codec ; import org . apache . lucene . codecs . PostingsFormat ; import org . apache . lucene . codecs . lucene50 . Lucene50StoredFieldsFormat ; import org . apache . lucene . codecs . lucene54 . Lucene54Codec ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . index . mapper . core . CompletionFieldMapper ; public class PerFieldMappingPostingFormatCodec extends Lucene54Codec { private final ESLogger logger ; private final MapperService mapperService ; static { assert Codec . forName ( Lucene . LATEST_CODEC ) . getClass ( ) . isAssignableFrom ( PerFieldMappingPostingFormatCodec . class ) : <str> + Lucene . LATEST_CODEC ; } public PerFieldMappingPostingFormatCodec ( Lucene50StoredFieldsFormat . Mode compressionMode , MapperService mapperService , ESLogger logger ) { super ( compressionMode ) ; this . mapperService = mapperService ; this . logger = logger ; } @Override public PostingsFormat getPostingsFormatForField ( String field ) { final MappedFieldType indexName = mapperService . indexName ( field ) ; if ( indexName = = null ) { logger . warn ( <str> , field ) ; } else if ( indexName instanceof CompletionFieldMapper . CompletionFieldType ) { return CompletionFieldMapper . CompletionFieldType . postingsFormat ( ) ; } return super . getPostingsFormatForField ( field ) ; } } 

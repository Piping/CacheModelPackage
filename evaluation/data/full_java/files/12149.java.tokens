package org . gradle . internal . typeconversion ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; public abstract class TypedNotationConverter < N , T > implements NotationConverter < Object , T > { private final Class < N > typeToken ; public TypedNotationConverter ( Class < N > typeToken ) { assert typeToken ! = null : <str> ; this . typeToken = typeToken ; } public TypedNotationConverter ( TypeInfo < N > typeToken ) { assert typeToken ! = null : <str> ; this . typeToken = typeToken . getTargetType ( ) ; } @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( String . format ( <str> , typeToken . getSimpleName ( ) ) ) ; } @Override public void convert ( Object notation , NotationConvertResult < ? super T > result ) throws TypeConversionException { if ( typeToken . isInstance ( notation ) ) { result . converted ( parseType ( typeToken . cast ( notation ) ) ) ; } } abstract protected T parseType ( N notation ) ; } 

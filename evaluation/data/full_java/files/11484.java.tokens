package org . gradle . api . internal . file ; import com . google . common . hash . Hasher ; import com . google . common . hash . Hashing ; import org . gradle . api . file . FileTreeElement ; import java . util . Collection ; import java . util . SortedSet ; import java . util . TreeSet ; public class FileTreeElementHasher { private static final byte HASH_PATH_SEPARATOR = ( byte ) <str> ; private static final byte HASH_RECORD_SEPARATOR = ( byte ) <str> ; public static final int calculateHashForFilePaths ( Collection < FileTreeElement > allFileTreeElements ) { SortedSet < FileTreeElement > sortedFileTreeElement = asSortedSet ( allFileTreeElements ) ; Hasher hasher = Hashing . adler32 ( ) . newHasher ( ) ; for ( FileTreeElement fileTreeElement : sortedFileTreeElement ) { for ( String pathPart : fileTreeElement . getRelativePath ( ) . getSegments ( ) ) { hasher . putUnencodedChars ( pathPart ) ; hasher . putByte ( HASH_PATH_SEPARATOR ) ; } hasher . putByte ( HASH_RECORD_SEPARATOR ) ; } return hasher . hash ( ) . asInt ( ) ; } private static SortedSet < FileTreeElement > asSortedSet ( Collection < FileTreeElement > allFileTreeElements ) { if ( allFileTreeElements instanceof SortedSet ) { return ( SortedSet < FileTreeElement > ) allFileTreeElements ; } SortedSet < FileTreeElement > sortedFileTreeElement = new TreeSet < FileTreeElement > ( FileTreeElementComparator . INSTANCE ) ; sortedFileTreeElement . addAll ( allFileTreeElements ) ; return sortedFileTreeElement ; } } 

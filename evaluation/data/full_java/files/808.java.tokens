package org . apache . cassandra . metrics ; import com . codahale . metrics . Counter ; import com . codahale . metrics . Gauge ; import org . apache . cassandra . concurrent . SEPExecutor ; import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; public class SEPMetrics { public final Gauge < Integer > activeTasks ; public final Counter totalBlocked ; public final Counter currentBlocked ; public final Gauge < Long > completedTasks ; public final Gauge < Long > pendingTasks ; public final Gauge < Integer > maxPoolSize ; private MetricNameFactory factory ; public SEPMetrics ( final SEPExecutor executor , String path , String poolName ) { this . factory = new ThreadPoolMetricNameFactory ( <str> , path , poolName ) ; activeTasks = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Integer > ( ) { public Integer getValue ( ) { return executor . getActiveCount ( ) ; } } ) ; pendingTasks = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Long > ( ) { public Long getValue ( ) { return executor . getPendingTasks ( ) ; } } ) ; totalBlocked = Metrics . counter ( factory . createMetricName ( <str> ) ) ; currentBlocked = Metrics . counter ( factory . createMetricName ( <str> ) ) ; completedTasks = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Long > ( ) { public Long getValue ( ) { return executor . getCompletedTasks ( ) ; } } ) ; maxPoolSize = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Integer > ( ) { public Integer getValue ( ) { return executor . maxWorkers ; } } ) ; } public void release ( ) { Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; Metrics . remove ( factory . createMetricName ( <str> ) ) ; } } 

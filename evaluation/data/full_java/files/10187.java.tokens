package com . google . common . cache ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . common . collect . MapMaker ; import java . util . Map ; public class MapMakerComparisonBenchmark { private static final String TEST_KEY = <str> ; private static final String TEST_VALUE = <str> ; private final Map < Object , Object > map = new MapMaker ( ) . makeMap ( ) ; private final Cache < Object , Object > cache = CacheBuilder . newBuilder ( ) . recordStats ( ) . build ( ) ; private final Cache < Object , Object > cacheNoStats = CacheBuilder . newBuilder ( ) . build ( ) ; @BeforeExperiment void setUp ( ) { map . put ( TEST_KEY , TEST_VALUE ) ; cache . put ( TEST_KEY , TEST_VALUE ) ; cacheNoStats . put ( TEST_KEY , TEST_VALUE ) ; } @Benchmark void concurrentHashMap ( int rep ) { for ( int i = <int> ; i < rep ; i + + ) { map . get ( TEST_KEY ) ; } } @Benchmark void cacheBuilder_stats ( int rep ) { for ( int i = <int> ; i < rep ; i + + ) { cache . getIfPresent ( TEST_KEY ) ; } } @Benchmark void cacheBuilder ( int rep ) { for ( int i = <int> ; i < rep ; i + + ) { cacheNoStats . getIfPresent ( TEST_KEY ) ; } } } 

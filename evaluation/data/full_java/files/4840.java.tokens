package org . eclipse . ui . externaltools . internal . launchConfigurations ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . eclipse . core . externaltools . internal . IExternalToolConstants ; import org . eclipse . core . externaltools . internal . launchConfigurations . ExternalToolsCoreUtil ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IWorkspace ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . ui . AbstractLaunchConfigurationTab ; import org . eclipse . jface . viewers . IStructuredContentProvider ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Group ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . ListSelectionDialog ; import org . eclipse . ui . externaltools . internal . model . ExternalToolsImages ; import org . eclipse . ui . externaltools . internal . model . ExternalToolsPlugin ; import org . eclipse . ui . externaltools . internal . model . IExternalToolsHelpContextIds ; import org . eclipse . ui . model . WorkbenchLabelProvider ; public class ExternalToolsBuildTab extends AbstractLaunchConfigurationTab { private Button fBuildButton ; private Group fGroup ; private Button fProjectButton ; private Button fSpecificProjectsButton ; private Button fWorkspaceButton ; private Button fSelectButton ; private Button fReferencedProjects ; private List < IProject > fProjects = new ArrayList < IProject > ( ) ; class ProjectsContentProvider implements IStructuredContentProvider { @Override public Object [ ] getElements ( Object inputElement ) { return ( ( IWorkspace ) inputElement ) . getRoot ( ) . getProjects ( ) ; } @Override public void dispose ( ) { } @Override public void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { } } public ExternalToolsBuildTab ( ) { setHelpContextId ( IExternalToolsHelpContextIds . EXTERNAL_TOOLS_LAUNCH_CONFIGURATION_DIALOG_BUILD_TAB ) ; } @Override public void createControl ( Composite parent ) { Composite mainComposite = new Composite ( parent , SWT . NONE ) ; setControl ( mainComposite ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getControl ( ) , getHelpContextId ( ) ) ; GridLayout layout = new GridLayout ( ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; mainComposite . setLayout ( layout ) ; mainComposite . setLayoutData ( gd ) ; mainComposite . setFont ( parent . getFont ( ) ) ; fBuildButton = createCheckButton ( mainComposite , ExternalToolsLaunchConfigurationMessages . ExternalToolsBuildTab_1 ) ; fBuildButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { updateEnabledState ( ) ; updateLaunchConfigurationDialog ( ) ; } } ) ; fGroup = new Group ( mainComposite , SWT . NONE ) ; fGroup . setFont ( mainComposite . getFont ( ) ) ; layout = new GridLayout ( ) ; layout . numColumns = <int> ; layout . makeColumnsEqualWidth = false ; fGroup . setLayout ( layout ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fGroup . setLayoutData ( gd ) ; SelectionAdapter adapter = new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { if ( ( ( Button ) e . getSource ( ) ) . getSelection ( ) ) { updateEnabledState ( ) ; updateLaunchConfigurationDialog ( ) ; } } } ; fWorkspaceButton = createRadioButton ( fGroup , ExternalToolsLaunchConfigurationMessages . ExternalToolsBuildTab_2 ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fWorkspaceButton . setLayoutData ( gd ) ; fWorkspaceButton . addSelectionListener ( adapter ) ; fProjectButton = createRadioButton ( fGroup , ExternalToolsLaunchConfigurationMessages . ExternalToolsBuildTab_3 ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fProjectButton . setLayoutData ( gd ) ; fProjectButton . addSelectionListener ( adapter ) ; fSpecificProjectsButton = createRadioButton ( fGroup , ExternalToolsLaunchConfigurationMessages . ExternalToolsBuildTab_4 ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = <int> ; fSpecificProjectsButton . setLayoutData ( gd ) ; fSpecificProjectsButton . addSelectionListener ( adapter ) ; fSelectButton = createPushButton ( fGroup , ExternalToolsLaunchConfigurationMessages . ExternalToolsBuildTab_5 , null ) ; gd = ( GridData ) fSelectButton . getLayoutData ( ) ; gd . horizontalAlignment = GridData . HORIZONTAL_ALIGN_END ; fSelectButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { selectResources ( ) ; } } ) ; createVerticalSpacer ( mainComposite , <int> ) ; fReferencedProjects = createCheckButton ( mainComposite , ExternalToolsLaunchConfigurationMessages . ExternalToolsBuildTab_6 ) ; } private void selectResources ( ) { ListSelectionDialog dialog = new ListSelectionDialog ( getShell ( ) , ResourcesPlugin . getWorkspace ( ) , new ProjectsContentProvider ( ) , new WorkbenchLabelProvider ( ) , ExternalToolsLaunchConfigurationMessages . ExternalToolsBuildTab_7 ) ; dialog . setInitialElementSelections ( fProjects ) ; if ( dialog . open ( ) = = Window . CANCEL ) { return ; } Object [ ] res = dialog . getResult ( ) ; fProjects = new ArrayList < IProject > ( res . length ) ; for ( int i = <int> ; i < res . length ; i + + ) { fProjects . add ( ( IProject ) res [ i ] ) ; } updateLaunchConfigurationDialog ( ) ; } @Override public void setDefaults ( ILaunchConfigurationWorkingCopy configuration ) { } @Override public void initializeFrom ( ILaunchConfiguration configuration ) { updateScope ( configuration ) ; updateReferencedProjects ( configuration ) ; updateEnabledState ( ) ; } private void updateReferencedProjects ( ILaunchConfiguration configuration ) { boolean ref = false ; try { ref = configuration . getAttribute ( IExternalToolConstants . ATTR_INCLUDE_REFERENCED_PROJECTS , true ) ; } catch ( CoreException e ) { ExternalToolsPlugin . getDefault ( ) . log ( <str> , e ) ; } fReferencedProjects . setSelection ( ref ) ; } private void updateScope ( ILaunchConfiguration configuration ) { String scope = null ; try { scope = configuration . getAttribute ( IExternalToolConstants . ATTR_BUILD_SCOPE , ( String ) null ) ; } catch ( CoreException ce ) { ExternalToolsPlugin . getDefault ( ) . log ( <str> , ce ) ; } fBuildButton . setSelection ( scope ! = null ) ; fWorkspaceButton . setSelection ( false ) ; fProjectButton . setSelection ( false ) ; fSpecificProjectsButton . setSelection ( false ) ; fProjects . clear ( ) ; if ( scope = = null ) { fBuildButton . setSelection ( true ) ; fWorkspaceButton . setSelection ( true ) ; } else { if ( scope . equals ( <str> ) ) { fBuildButton . setSelection ( false ) ; } else if ( scope . equals ( <str> ) ) { fProjectButton . setSelection ( true ) ; } else if ( scope . startsWith ( <str> ) ) { fSpecificProjectsButton . setSelection ( true ) ; IProject [ ] projects = getBuildProjects ( configuration , IExternalToolConstants . ATTR_BUILD_SCOPE ) ; fProjects = new ArrayList < IProject > ( projects . length ) ; for ( int i = <int> ; i < projects . length ; i + + ) { fProjects . add ( projects [ i ] ) ; } } } } @Override public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { String scope = generateScopeMemento ( ) ; configuration . setAttribute ( IExternalToolConstants . ATTR_BUILD_SCOPE , scope ) ; if ( fReferencedProjects . getSelection ( ) ) { configuration . setAttribute ( IExternalToolConstants . ATTR_INCLUDE_REFERENCED_PROJECTS , ( String ) null ) ; } else { configuration . setAttribute ( IExternalToolConstants . ATTR_INCLUDE_REFERENCED_PROJECTS , false ) ; } } private String generateScopeMemento ( ) { if ( fBuildButton . getSelection ( ) ) { if ( fWorkspaceButton . getSelection ( ) ) { return null ; } if ( fProjectButton . getSelection ( ) ) { return <str> ; } if ( fSpecificProjectsButton . getSelection ( ) ) { return getBuildScopeAttribute ( fProjects ) ; } return null ; } return <str> ; } @Override public String getName ( ) { return ExternalToolsLaunchConfigurationMessages . ExternalToolsBuildTab_8 ; } private void updateEnabledState ( ) { boolean enabled = fBuildButton . getSelection ( ) ; fGroup . setEnabled ( enabled ) ; fWorkspaceButton . setEnabled ( enabled ) ; fProjectButton . setEnabled ( enabled ) ; fSpecificProjectsButton . setEnabled ( enabled ) ; fSelectButton . setEnabled ( enabled & & fSpecificProjectsButton . getSelection ( ) ) ; if ( ! enabled ) { super . setErrorMessage ( null ) ; } if ( enabled ) { if ( ! fWorkspaceButton . getSelection ( ) & & ! fProjectButton . getSelection ( ) & & ! fSpecificProjectsButton . getSelection ( ) ) { fWorkspaceButton . setSelection ( true ) ; } } fReferencedProjects . setEnabled ( fBuildButton . getSelection ( ) & & ( fProjectButton . getSelection ( ) | | fSpecificProjectsButton . getSelection ( ) ) ) ; } @Override public Image getImage ( ) { return ExternalToolsImages . getImage ( org . eclipse . ui . externaltools . internal . model . IExternalToolConstants . IMG_TAB_BUILD ) ; } @Override public boolean isValid ( ILaunchConfiguration launchConfig ) { setErrorMessage ( null ) ; setMessage ( null ) ; if ( fBuildButton . getSelection ( ) & & fSpecificProjectsButton . getSelection ( ) & & fProjects . isEmpty ( ) ) { setErrorMessage ( ExternalToolsLaunchConfigurationMessages . ExternalToolsBuildTab_9 ) ; return false ; } return true ; } public static IProject [ ] getBuildProjects ( ILaunchConfiguration configuration , String buildScopeId ) { return ExternalToolsCoreUtil . getBuildProjects ( configuration , buildScopeId ) ; } public static boolean isIncludeReferencedProjects ( ILaunchConfiguration configuration , String includeReferencedProjectsId ) throws CoreException { return ExternalToolsCoreUtil . isIncludeReferencedProjects ( configuration , includeReferencedProjectsId ) ; } public static String getBuildScopeAttribute ( List < IProject > projects ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( <str> ) ; Iterator < IProject > iterator = projects . iterator ( ) ; while ( iterator . hasNext ( ) ) { IProject project = iterator . next ( ) ; buf . append ( project . getName ( ) ) ; if ( iterator . hasNext ( ) ) { buf . append ( <str> ) ; } } buf . append ( <str> ) ; return buf . toString ( ) ; } @Override public void activated ( ILaunchConfigurationWorkingCopy workingCopy ) { } @Override public void deactivated ( ILaunchConfigurationWorkingCopy workingCopy ) { } } 

package org . gradle . plugin . use . resolve . internal ; import org . gradle . api . internal . plugins . PluginDescriptor ; import org . gradle . api . internal . plugins . PluginDescriptorLocator ; import org . gradle . api . internal . plugins . PluginRegistry ; import org . gradle . plugin . internal . PluginId ; import org . gradle . plugin . use . internal . InvalidPluginRequestException ; import org . gradle . plugin . use . internal . PluginRequest ; public class NotNonCorePluginOnClasspathCheckPluginResolver implements PluginResolver { private final PluginResolver delegate ; private final PluginRegistry corePluginRegistry ; private final PluginDescriptorLocator pluginDescriptorLocator ; public NotNonCorePluginOnClasspathCheckPluginResolver ( PluginResolver delegate , PluginRegistry corePluginRegistry , PluginDescriptorLocator pluginDescriptorLocator ) { this . delegate = delegate ; this . corePluginRegistry = corePluginRegistry ; this . pluginDescriptorLocator = pluginDescriptorLocator ; } public void resolve ( PluginRequest pluginRequest , PluginResolutionResult result ) { PluginId pluginId = pluginRequest . getId ( ) ; PluginDescriptor pluginDescriptor = pluginDescriptorLocator . findPluginDescriptor ( pluginId . toString ( ) ) ; if ( pluginDescriptor = = null | | isCorePlugin ( pluginId ) ) { delegate . resolve ( pluginRequest , result ) ; } else { throw new InvalidPluginRequestException ( pluginRequest , pluginOnClasspathErrorMessage ( pluginId . toString ( ) ) ) ; } } public static String pluginOnClasspathErrorMessage ( String pluginId ) { return String . format ( <str> , pluginId , pluginId ) ; } private boolean isCorePlugin ( PluginId pluginId ) { return corePluginRegistry . lookup ( pluginId ) ! = null ; } } 

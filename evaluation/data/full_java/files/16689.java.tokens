package org . junit . tests . running . methods ; import static org . hamcrest . CoreMatchers . allOf ; import static org . hamcrest . CoreMatchers . containsString ; import static org . junit . Assert . assertThat ; import java . util . Collection ; import java . util . HashSet ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import org . junit . After ; import org . junit . AfterClass ; import org . junit . Before ; import org . junit . BeforeClass ; import org . junit . Test ; import org . junit . runner . Description ; import org . junit . runner . JUnitCore ; import org . junit . runner . Result ; import org . junit . runner . RunWith ; import org . junit . runners . JUnit4 ; public class AnnotationTest extends TestCase { static boolean run ; @Override public void setUp ( ) { run = false ; } static public class SimpleTest { @Test public void success ( ) { run = true ; } } public void testAnnotatedMethod ( ) throws Exception { JUnitCore runner = new JUnitCore ( ) ; runner . run ( SimpleTest . class ) ; assertTrue ( run ) ; } @RunWith ( JUnit4 . class ) static public class SimpleTestWithFutureProofExplicitRunner { @Test public void success ( ) { run = true ; } } public void testAnnotatedMethodWithFutureProofExplicitRunner ( ) throws Exception { JUnitCore runner = new JUnitCore ( ) ; runner . run ( SimpleTestWithFutureProofExplicitRunner . class ) ; assertTrue ( run ) ; } static public class SetupTest { @Before public void before ( ) { run = true ; } @Test public void success ( ) { } } public void testSetup ( ) throws Exception { JUnitCore runner = new JUnitCore ( ) ; runner . run ( SetupTest . class ) ; assertTrue ( run ) ; } static public class TeardownTest { @After public void after ( ) { run = true ; } @Test public void success ( ) { } } public void testTeardown ( ) throws Exception { JUnitCore runner = new JUnitCore ( ) ; runner . run ( TeardownTest . class ) ; assertTrue ( run ) ; } static public class FailureTest { @Test public void error ( ) throws Exception { org . junit . Assert . fail ( ) ; } } public void testRunFailure ( ) throws Exception { JUnitCore runner = new JUnitCore ( ) ; Result result = runner . run ( FailureTest . class ) ; assertEquals ( <int> , result . getRunCount ( ) ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; assertEquals ( AssertionError . class , result . getFailures ( ) . get ( <int> ) . getException ( ) . getClass ( ) ) ; } static public class SetupFailureTest { @Before public void before ( ) { throw new Error ( ) ; } @Test public void test ( ) { run = true ; } } public void testSetupFailure ( ) throws Exception { JUnitCore core = new JUnitCore ( ) ; Result runner = core . run ( SetupFailureTest . class ) ; assertEquals ( <int> , runner . getRunCount ( ) ) ; assertEquals ( <int> , runner . getFailureCount ( ) ) ; assertEquals ( Error . class , runner . getFailures ( ) . get ( <int> ) . getException ( ) . getClass ( ) ) ; assertFalse ( run ) ; } static public class TeardownFailureTest { @After public void after ( ) { throw new Error ( ) ; } @Test public void test ( ) { } } public void testTeardownFailure ( ) throws Exception { JUnitCore core = new JUnitCore ( ) ; Result runner = core . run ( TeardownFailureTest . class ) ; assertEquals ( <int> , runner . getRunCount ( ) ) ; assertEquals ( <int> , runner . getFailureCount ( ) ) ; assertEquals ( Error . class , runner . getFailures ( ) . get ( <int> ) . getException ( ) . getClass ( ) ) ; } static public class TestAndTeardownFailureTest { @After public void after ( ) { throw new Error ( <str> ) ; } @Test public void test ( ) throws Exception { throw new Exception ( <str> ) ; } } public void testTestAndTeardownFailure ( ) throws Exception { JUnitCore core = new JUnitCore ( ) ; Result runner = core . run ( TestAndTeardownFailureTest . class ) ; assertEquals ( <int> , runner . getRunCount ( ) ) ; assertEquals ( <int> , runner . getFailureCount ( ) ) ; assertThat ( runner . getFailures ( ) . toString ( ) , allOf ( containsString ( <str> ) , containsString ( <str> ) ) ) ; } static public class TeardownAfterFailureTest { @After public void after ( ) { run = true ; } @Test public void test ( ) throws Exception { throw new Exception ( ) ; } } public void testTeardownAfterFailure ( ) throws Exception { JUnitCore runner = new JUnitCore ( ) ; runner . run ( TeardownAfterFailureTest . class ) ; assertTrue ( run ) ; } static int count ; static Collection < Object > tests ; static public class TwoTests { @Test public void one ( ) { count + + ; tests . add ( this ) ; } @Test public void two ( ) { count + + ; tests . add ( this ) ; } } public void testTwoTests ( ) throws Exception { count = <int> ; tests = new HashSet < Object > ( ) ; JUnitCore runner = new JUnitCore ( ) ; runner . run ( TwoTests . class ) ; assertEquals ( <int> , count ) ; assertEquals ( <int> , tests . size ( ) ) ; } static public class OldTest extends TestCase { public void test ( ) { run = true ; } } public void testOldTest ( ) throws Exception { JUnitCore runner = new JUnitCore ( ) ; runner . run ( OldTest . class ) ; assertTrue ( run ) ; } static public class OldSuiteTest extends TestCase { public void testOne ( ) { run = true ; } } public void testOldSuiteTest ( ) throws Exception { TestSuite suite = new TestSuite ( OldSuiteTest . class ) ; JUnitCore runner = new JUnitCore ( ) ; runner . run ( suite ) ; assertTrue ( run ) ; } static public class ExceptionTest { @Test ( expected = Error . class ) public void expectedException ( ) { throw new Error ( ) ; } } public void testException ( ) throws Exception { JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( ExceptionTest . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } static public class NoExceptionTest { @Test ( expected = Error . class ) public void expectedException ( ) { } } public void testExceptionNotThrown ( ) throws Exception { JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( NoExceptionTest . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; assertEquals ( <str> , result . getFailures ( ) . get ( <int> ) . getMessage ( ) ) ; } static public class OneTimeSetup { @BeforeClass public static void once ( ) { count + + ; } @Test public void one ( ) { } @Test public void two ( ) { } } public void testOneTimeSetup ( ) throws Exception { count = <int> ; JUnitCore core = new JUnitCore ( ) ; core . run ( OneTimeSetup . class ) ; assertEquals ( <int> , count ) ; } static public class OneTimeTeardown { @AfterClass public static void once ( ) { count + + ; } @Test public void one ( ) { } @Test public void two ( ) { } } public void testOneTimeTeardown ( ) throws Exception { count = <int> ; JUnitCore core = new JUnitCore ( ) ; core . run ( OneTimeTeardown . class ) ; assertEquals ( <int> , count ) ; } static String log ; public static class OrderTest { @BeforeClass public static void onceBefore ( ) { log + = <str> ; } @Before public void before ( ) { log + = <str> ; } @Test public void test ( ) { log + = <str> ; } @After public void after ( ) { log + = <str> ; } @AfterClass public static void onceAfter ( ) { log + = <str> ; } } public void testOrder ( ) throws Exception { log = <str> ; JUnitCore core = new JUnitCore ( ) ; core . run ( OrderTest . class ) ; assertEquals ( <str> , log ) ; } static public class NonStaticOneTimeSetup { @BeforeClass public void once ( ) { } @Test public void aTest ( ) { } } public void testNonStaticOneTimeSetup ( ) throws Exception { JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( NonStaticOneTimeSetup . class ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } static public class ErrorInBeforeClass { @BeforeClass public static void before ( ) throws Exception { throw new Exception ( ) ; } @Test public void test ( ) { run = true ; } } public void testErrorInBeforeClass ( ) throws Exception { run = false ; JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( ErrorInBeforeClass . class ) ; assertFalse ( run ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; Description description = result . getFailures ( ) . get ( <int> ) . getDescription ( ) ; assertEquals ( ErrorInBeforeClass . class . getName ( ) , description . getDisplayName ( ) ) ; } static public class ErrorInAfterClass { @Test public void test ( ) { run = true ; } @AfterClass public static void after ( ) throws Exception { throw new Exception ( ) ; } } public void testErrorInAfterClass ( ) throws Exception { run = false ; JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( ErrorInAfterClass . class ) ; assertTrue ( run ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } static public class SuperInheritance { @BeforeClass static public void beforeClassSuper ( ) { log + = <str> ; } @AfterClass static public void afterClassSuper ( ) { log + = <str> ; } @Before public void beforeSuper ( ) { log + = <str> ; } @After public void afterSuper ( ) { log + = <str> ; } } static public class SubInheritance extends SuperInheritance { @BeforeClass static public void beforeClassSub ( ) { log + = <str> ; } @AfterClass static public void afterClassSub ( ) { log + = <str> ; } @Before public void beforeSub ( ) { log + = <str> ; } @After public void afterSub ( ) { log + = <str> ; } @Test public void test ( ) { log + = <str> ; } } public void testOrderingOfInheritance ( ) throws Exception { log = <str> ; JUnitCore core = new JUnitCore ( ) ; core . run ( SubInheritance . class ) ; assertEquals ( <str> , log ) ; } static public class SuperShadowing { @Before public void before ( ) { log + = <str> ; } @After public void after ( ) { log + = <str> ; } } static public class SubShadowing extends SuperShadowing { @Override @Before public void before ( ) { log + = <str> ; } @Override @After public void after ( ) { log + = <str> ; } @Test public void test ( ) { log + = <str> ; } } public void testShadowing ( ) throws Exception { log = <str> ; JUnitCore core = new JUnitCore ( ) ; core . run ( SubShadowing . class ) ; assertEquals ( <str> , log ) ; } static public class SuperTest { @Test public void one ( ) { log + = <str> ; } @Test public void two ( ) { log + = <str> ; } } static public class SubTest extends SuperTest { @Override @Test public void one ( ) { log + = <str> ; } } public void testTestInheritance ( ) throws Exception { log = <str> ; JUnitCore core = new JUnitCore ( ) ; core . run ( SubTest . class ) ; assertTrue ( log . contains ( <str> ) ) ; assertTrue ( log . contains ( <str> ) ) ; assertFalse ( log . contains ( <str> ) ) ; } static public class RunAllAfters { @Before public void good ( ) { } @Before public void bad ( ) { throw new Error ( ) ; } @Test public void empty ( ) { } @After public void one ( ) { log + = <str> ; } @After public void two ( ) { log + = <str> ; } } public void testRunAllAfters ( ) { log = <str> ; JUnitCore core = new JUnitCore ( ) ; core . run ( RunAllAfters . class ) ; assertTrue ( log . contains ( <str> ) ) ; assertTrue ( log . contains ( <str> ) ) ; } static public class RunAllAftersRegardless { @Test public void empty ( ) { } @After public void one ( ) { log + = <str> ; throw new Error ( ) ; } @After public void two ( ) { log + = <str> ; throw new Error ( ) ; } } public void testRunAllAftersRegardless ( ) { log = <str> ; JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( RunAllAftersRegardless . class ) ; assertTrue ( log . contains ( <str> ) ) ; assertTrue ( log . contains ( <str> ) ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } static public class RunAllAfterClasses { @Before public void good ( ) { } @BeforeClass public static void bad ( ) { throw new Error ( ) ; } @Test public void empty ( ) { } @AfterClass public static void one ( ) { log + = <str> ; } @AfterClass public static void two ( ) { log + = <str> ; } } public void testRunAllAfterClasses ( ) { log = <str> ; JUnitCore core = new JUnitCore ( ) ; core . run ( RunAllAfterClasses . class ) ; assertTrue ( log . contains ( <str> ) ) ; assertTrue ( log . contains ( <str> ) ) ; } static public class RunAllAfterClassesRegardless { @Test public void empty ( ) { } @AfterClass static public void one ( ) { log + = <str> ; throw new Error ( ) ; } @AfterClass static public void two ( ) { log + = <str> ; throw new Error ( ) ; } } public void testRunAllAfterClassesRegardless ( ) { log = <str> ; JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( RunAllAfterClassesRegardless . class ) ; assertTrue ( log . contains ( <str> ) ) ; assertTrue ( log . contains ( <str> ) ) ; assertEquals ( <int> , result . getFailureCount ( ) ) ; } } 

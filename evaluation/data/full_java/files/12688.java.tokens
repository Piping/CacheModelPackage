package org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . conflicts ; import org . gradle . api . Action ; import org . gradle . api . Nullable ; import org . gradle . api . artifacts . ModuleIdentifier ; import org . gradle . api . internal . artifacts . dsl . ModuleReplacementsData ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . ModuleConflictResolver ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . ComponentResolutionState ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import static org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . conflicts . PotentialConflictFactory . potentialConflict ; public class DefaultConflictHandler implements ConflictHandler { private final static Logger LOGGER = Logging . getLogger ( DefaultConflictHandler . class ) ; private final CompositeConflictResolver compositeResolver = new CompositeConflictResolver ( ) ; private final ConflictContainer < ModuleIdentifier , ComponentResolutionState > conflicts = new ConflictContainer < ModuleIdentifier , ComponentResolutionState > ( ) ; private final ModuleReplacementsData moduleReplacements ; public DefaultConflictHandler ( ModuleConflictResolver conflictResolver , ModuleReplacementsData moduleReplacements ) { this . moduleReplacements = moduleReplacements ; this . compositeResolver . addFirst ( conflictResolver ) ; } @Nullable public PotentialConflict registerModule ( CandidateModule newModule ) { ModuleIdentifier replacedBy = moduleReplacements . getReplacementFor ( newModule . getId ( ) ) ; return potentialConflict ( conflicts . newElement ( newModule . getId ( ) , newModule . getVersions ( ) , replacedBy ) ) ; } public boolean hasConflicts ( ) { return conflicts . getSize ( ) > <int> ; } public void resolveNextConflict ( Action < ConflictResolutionResult > resolutionAction ) { assert hasConflicts ( ) ; ConflictContainer . Conflict conflict = conflicts . popConflict ( ) ; ComponentResolutionState selected = compositeResolver . select ( conflict . candidates ) ; ConflictResolutionResult result = new DefaultConflictResolutionResult ( potentialConflict ( conflict ) , selected ) ; resolutionAction . execute ( result ) ; LOGGER . debug ( <str> , selected , conflict . candidates ) ; } public void registerResolver ( ModuleConflictResolver conflictResolver ) { compositeResolver . addFirst ( conflictResolver ) ; } } 

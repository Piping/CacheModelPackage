package io . netty . handler . codec . frame ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . DecoderException ; import io . netty . handler . codec . DelimiterBasedFrameDecoder ; import io . netty . handler . codec . Delimiters ; import io . netty . handler . codec . TooLongFrameException ; import io . netty . util . CharsetUtil ; import org . junit . Test ; import static io . netty . util . ReferenceCountUtil . releaseLater ; import static org . junit . Assert . * ; public class DelimiterBasedFrameDecoderTest { @Test public void testFailSlowTooLongFrameRecovery ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new DelimiterBasedFrameDecoder ( <int> , true , false , Delimiters . nulDelimiter ( ) ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <int> , <int> } ) ) ; try { assertTrue ( ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <int> } ) ) ) ; fail ( DecoderException . class . getSimpleName ( ) + <str> ) ; } catch ( TooLongFrameException e ) { } ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <str> , <int> } ) ) ; ByteBuf buf = releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) ; assertEquals ( <str> , buf . toString ( CharsetUtil . ISO_8859_1 ) ) ; } } @Test public void testFailFastTooLongFrameRecovery ( ) throws Exception { EmbeddedChannel ch = new EmbeddedChannel ( new DelimiterBasedFrameDecoder ( <int> , Delimiters . nulDelimiter ( ) ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { try { assertTrue ( ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <int> , <int> } ) ) ) ; fail ( DecoderException . class . getSimpleName ( ) + <str> ) ; } catch ( TooLongFrameException e ) { } ch . writeInbound ( Unpooled . wrappedBuffer ( new byte [ ] { <int> , <str> , <int> } ) ) ; ByteBuf buf = releaseLater ( ( ByteBuf ) ch . readInbound ( ) ) ; assertEquals ( <str> , buf . toString ( CharsetUtil . ISO_8859_1 ) ) ; } } } 

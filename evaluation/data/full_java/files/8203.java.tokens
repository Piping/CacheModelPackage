package org . elasticsearch . index . mapper . multifield ; import org . apache . lucene . index . IndexOptions ; import org . apache . lucene . index . IndexableField ; import org . apache . lucene . util . GeoUtils ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . common . xcontent . support . XContentMapValues ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . * ; import org . elasticsearch . index . mapper . ParseContext . Document ; import org . elasticsearch . index . mapper . core . * ; import org . elasticsearch . index . mapper . geo . BaseGeoPointFieldMapper ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . elasticsearch . test . VersionUtils ; import java . io . IOException ; import java . util . Arrays ; import java . util . Collections ; import java . util . Map ; import java . util . TreeMap ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . mapper . MapperBuilders . * ; import static org . elasticsearch . test . StreamsUtils . copyToBytesFromClasspath ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . * ; public class MultiFieldTests extends ESSingleNodeTestCase { public void testMultiFieldMultiFieldType ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; testMultiField ( mapping ) ; } public void testMultiFieldMultiFields ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; testMultiField ( mapping ) ; } private void testMultiField ( String mapping ) throws Exception { DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = new BytesArray ( copyToBytesFromClasspath ( <str> ) ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertEquals ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertEquals ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . fieldDataType ( ) . getLoading ( ) , equalTo ( MappedFieldType . Loading . EAGER ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( TokenCountFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; assertThat ( ( ( TokenCountFieldMapper ) docMapper . mappers ( ) . getMapper ( <str> ) ) . analyzer ( ) , equalTo ( <str> ) ) ; assertThat ( ( ( TokenCountFieldMapper ) docMapper . mappers ( ) . getMapper ( <str> ) ) . analyzer ( ) , equalTo ( <str> ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( DateFieldMapper . class ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; } public void testBuildThenParse ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; Settings settings = indexService . getIndexSettings ( ) . getSettings ( ) ; DocumentMapperParser mapperParser = indexService . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper builderDocMapper = doc ( settings , rootObject ( <str> ) . add ( stringField ( <str> ) . store ( true ) . addMultiField ( stringField ( <str> ) . index ( true ) . tokenized ( true ) ) . addMultiField ( stringField ( <str> ) . index ( false ) . store ( true ) ) ) , indexService . mapperService ( ) ) . build ( indexService . mapperService ( ) , mapperParser ) ; String builtMapping = builderDocMapper . mappingSource ( ) . string ( ) ; DocumentMapper docMapper = mapperParser . parse ( builtMapping ) ; BytesReference json = new BytesArray ( copyToBytesFromClasspath ( <str> ) ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertEquals ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; } public void testConvertMultiFieldNoDefaultField ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = new BytesArray ( copyToBytesFromClasspath ( <str> ) ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertNull ( doc . getField ( <str> ) ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertEquals ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertEquals ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertNotNull ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertEquals ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; assertNull ( doc . getField ( <str> ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . numericValue ( ) , equalTo ( ( Number ) <int> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . numericValue ( ) , equalTo ( ( Number ) <int> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( LongFieldMapper . class ) ) ; assertEquals ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( LongFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( LongFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; } public void testConvertMultiFieldGeoPoint ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_1_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; boolean indexCreatedBefore22 = version . before ( Version . V_2_2_0 ) ; String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = createIndex ( <str> , settings ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( BaseGeoPointFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; final boolean stored = indexCreatedBefore22 = = false ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( stored ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; final boolean hasDocValues = indexCreatedBefore22 = = false ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . hasDocValues ( ) , equalTo ( hasDocValues ) ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; if ( indexCreatedBefore22 = = true ) { assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; } else { assertThat ( Long . parseLong ( f . stringValue ( ) ) , equalTo ( GeoUtils . mortonHash ( - <float> , - <float> ) ) ) ; } assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( stored ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( BaseGeoPointFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( stored ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . hasDocValues ( ) , equalTo ( hasDocValues ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; if ( indexCreatedBefore22 = = true ) { assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; } else { assertThat ( Long . parseLong ( f . stringValue ( ) ) , equalTo ( GeoUtils . mortonHash ( - <float> , - <float> ) ) ) ; } assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( stored ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; json = jsonBuilder ( ) . startObject ( ) . startArray ( <str> ) . startArray ( ) . value ( - <int> ) . value ( - <int> ) . endArray ( ) . startArray ( ) . value ( - <int> ) . value ( - <int> ) . endArray ( ) . endArray ( ) . endObject ( ) . bytes ( ) ; doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; f = doc . getFields ( <str> ) [ <int> ] ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; if ( indexCreatedBefore22 = = true ) { assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; } else { assertThat ( Long . parseLong ( f . stringValue ( ) ) , equalTo ( GeoUtils . mortonHash ( - <float> , - <float> ) ) ) ; } assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( stored ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getFields ( <str> ) [ <int> ] ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; if ( indexCreatedBefore22 = = true ) { assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; } else { assertThat ( Long . parseLong ( f . stringValue ( ) ) , equalTo ( GeoUtils . mortonHash ( - <float> , - <float> ) ) ) ; } assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( stored ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; } public void testConvertMultiFieldCompletion ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( CompletionFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( CompletionFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( true ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , instanceOf ( StringFieldMapper . class ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . tokenized ( ) , equalTo ( false ) ) ; json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; assertThat ( f . name ( ) , equalTo ( <str> ) ) ; assertThat ( f . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( f . fieldType ( ) . stored ( ) , equalTo ( false ) ) ; assertNotSame ( IndexOptions . NONE , f . fieldType ( ) . indexOptions ( ) ) ; } public void testMultiFieldsInConsistentOrder ( ) throws Exception { String [ ] multiFieldNames = new String [ randomIntBetween ( <int> , <int> ) ] ; for ( int i = <int> ; i < multiFieldNames . length ; i + + ) { multiFieldNames [ i ] = randomAsciiOfLength ( <int> ) ; } XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) ; for ( String multiFieldName : multiFieldNames ) { builder = builder . startObject ( multiFieldName ) . field ( <str> , <str> ) . endObject ( ) ; } builder = builder . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; String mapping = builder . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; Arrays . sort ( multiFieldNames ) ; Map < String , Object > sourceAsMap = XContentHelper . convertToMap ( docMapper . mappingSource ( ) . compressedReference ( ) , true ) . v2 ( ) ; @SuppressWarnings ( <str> ) Map < String , Object > multiFields = ( Map < String , Object > ) XContentMapValues . extractValue ( <str> , sourceAsMap ) ; assertThat ( multiFields . size ( ) , equalTo ( multiFieldNames . length ) ) ; int i = <int> ; for ( String field : multiFields . keySet ( ) ) { assertThat ( field , equalTo ( multiFieldNames [ i + + ] ) ) ; } } public void testMultiFieldsFieldDataSettingsInConsistentOrder ( ) throws Exception { final String MY_MULTI_FIELD = <str> ; Map < String , Object > possibleSettings = new TreeMap < String , Object > ( ) ; possibleSettings . put ( <str> , <int> ) ; possibleSettings . put ( <str> , <int> ) ; possibleSettings . put ( <str> , <str> ) ; possibleSettings . put ( <str> , <str> ) ; possibleSettings . put ( <str> , <str> ) ; possibleSettings . put ( <str> , <str> ) ; possibleSettings . put ( <str> , <str> ) ; XContentBuilder builder = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( MY_MULTI_FIELD ) . field ( <str> , <str> ) . startObject ( <str> ) ; String [ ] keys = possibleSettings . keySet ( ) . toArray ( new String [ ] { } ) ; Collections . shuffle ( Arrays . asList ( keys ) , random ( ) ) ; for ( int i = randomIntBetween ( <int> , possibleSettings . size ( ) - <int> ) ; i > = <int> ; - - i ) builder . field ( keys [ i ] , possibleSettings . get ( keys [ i ] ) ) ; builder . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; final DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper docMapper = parser . parse ( builder . string ( ) ) ; DocumentMapper docMapper2 = parser . parse ( docMapper . mappingSource ( ) . string ( ) ) ; assertThat ( docMapper . mappingSource ( ) , equalTo ( docMapper2 . mappingSource ( ) ) ) ; } public void testObjectFieldNotAllowed ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; final DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; try { parser . parse ( mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testNestedFieldNotAllowed ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; final DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; try { parser . parse ( mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertTrue ( e . getMessage ( ) . contains ( <str> ) ) ; } } public void testMultiFieldWithDot ( ) throws IOException { XContentBuilder mapping = jsonBuilder ( ) ; mapping . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; MapperService mapperService = createIndex ( <str> ) . mapperService ( ) ; try { mapperService . documentMapperParser ( ) . parse ( mapping . string ( ) ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } } 

package org . gradle . api . internal . tasks . testing . filter ; import com . google . common . collect . Sets ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . tasks . Input ; import org . gradle . api . tasks . testing . TestFilter ; import java . util . HashSet ; import java . util . Set ; public class DefaultTestFilter implements TestFilter { private Set < String > testNames = new HashSet < String > ( ) ; private boolean failOnNoMatching = true ; private void validateName ( String name ) { if ( name = = null | | name . length ( ) = = <int> ) { throw new InvalidUserDataException ( <str> ) ; } } public TestFilter includeTestsMatching ( String testNamePattern ) { validateName ( testNamePattern ) ; testNames . add ( testNamePattern ) ; return this ; } public TestFilter includeTest ( String className , String methodName ) { validateName ( className ) ; if ( methodName = = null | | methodName . trim ( ) . isEmpty ( ) ) { testNames . add ( new StringBuilder ( className ) . append ( <str> ) . toString ( ) ) ; } else { testNames . add ( new StringBuilder ( className ) . append ( <str> ) . append ( methodName ) . toString ( ) ) ; } return this ; } @Override public void setFailOnNoMatchingTests ( boolean failOnNoMatchingTests ) { this . failOnNoMatching = failOnNoMatchingTests ; } @Override public boolean isFailOnNoMatchingTests ( ) { return failOnNoMatching ; } @Input public Set < String > getIncludePatterns ( ) { return testNames ; } public TestFilter setIncludePatterns ( String . . . testNamePatterns ) { for ( String name : testNamePatterns ) { validateName ( name ) ; } this . testNames = Sets . newHashSet ( testNamePatterns ) ; return this ; } } 

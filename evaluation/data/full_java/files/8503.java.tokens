package org . elasticsearch . search . functionscore ; import org . apache . lucene . search . Explanation ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . lucene . search . function . CombineFunction ; import org . elasticsearch . index . fielddata . ScriptDocValues ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . AbstractDoubleSearchScript ; import org . elasticsearch . script . ExecutableScript ; import org . elasticsearch . script . ExplainableSearchScript ; import org . elasticsearch . script . NativeScriptFactory ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . search . SearchHits ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . hamcrest . ElasticsearchAssertions ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . client . Requests . searchRequest ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . functionScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders . scriptFunction ; import static org . elasticsearch . search . builder . SearchSourceBuilder . searchSource ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class ExplainableScriptIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( ExplainableScriptPlugin . class ) ; } public void testNativeExplainScript ( ) throws InterruptedException , IOException , ExecutionException { List < IndexRequestBuilder > indexRequests = new ArrayList < > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { indexRequests . add ( client ( ) . prepareIndex ( <str> , <str> ) . setId ( Integer . toString ( i ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , i ) . field ( <str> , <str> ) . endObject ( ) ) ) ; } indexRandom ( true , true , indexRequests ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( ) . execute ( ) . actionGet ( ) ; ensureYellow ( ) ; SearchResponse response = client ( ) . search ( searchRequest ( ) . searchType ( SearchType . QUERY_THEN_FETCH ) . source ( searchSource ( ) . explain ( true ) . query ( functionScoreQuery ( termQuery ( <str> , <str> ) , scriptFunction ( new Script ( <str> , ScriptType . INLINE , <str> , null ) ) ) . boostMode ( CombineFunction . REPLACE ) ) ) ) . actionGet ( ) ; ElasticsearchAssertions . assertNoFailures ( response ) ; SearchHits hits = response . getHits ( ) ; assertThat ( hits . getTotalHits ( ) , equalTo ( <int> ) ) ; int idCounter = <int> ; for ( SearchHit hit : hits . getHits ( ) ) { assertThat ( hit . getId ( ) , equalTo ( Integer . toString ( idCounter ) ) ) ; assertThat ( hit . explanation ( ) . toString ( ) , containsString ( Double . toString ( idCounter ) + <str> + Double . toString ( idCounter ) ) ) ; assertThat ( hit . explanation ( ) . toString ( ) , containsString ( <str> ) ) ; assertThat ( hit . explanation ( ) . getDetails ( ) . length , equalTo ( <int> ) ) ; idCounter - - ; } } public static class MyNativeScriptFactory implements NativeScriptFactory { @Override public ExecutableScript newScript ( @Nullable Map < String , Object > params ) { return new MyScript ( ) ; } @Override public boolean needsScores ( ) { return true ; } } static class MyScript extends AbstractDoubleSearchScript implements ExplainableSearchScript , ExecutableScript { @Override public Explanation explain ( Explanation subQueryScore ) throws IOException { Explanation scoreExp = Explanation . match ( subQueryScore . getValue ( ) , <str> , subQueryScore ) ; return Explanation . match ( ( float ) ( runAsDouble ( ) ) , <str> + runAsDouble ( ) , scoreExp ) ; } @Override public double runAsDouble ( ) { return ( ( Number ) ( ( ScriptDocValues ) doc ( ) . get ( <str> ) ) . getValues ( ) . get ( <int> ) ) . doubleValue ( ) ; } } } 

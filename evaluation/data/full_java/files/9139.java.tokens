package com . google . common . cache ; import static com . google . common . base . Preconditions . checkArgument ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . MoreObjects ; import com . google . common . base . Objects ; import java . util . concurrent . Callable ; import javax . annotation . Nullable ; @GwtCompatible public final class CacheStats { private final long hitCount ; private final long missCount ; private final long loadSuccessCount ; private final long loadExceptionCount ; private final long totalLoadTime ; private final long evictionCount ; public CacheStats ( long hitCount , long missCount , long loadSuccessCount , long loadExceptionCount , long totalLoadTime , long evictionCount ) { checkArgument ( hitCount > = <int> ) ; checkArgument ( missCount > = <int> ) ; checkArgument ( loadSuccessCount > = <int> ) ; checkArgument ( loadExceptionCount > = <int> ) ; checkArgument ( totalLoadTime > = <int> ) ; checkArgument ( evictionCount > = <int> ) ; this . hitCount = hitCount ; this . missCount = missCount ; this . loadSuccessCount = loadSuccessCount ; this . loadExceptionCount = loadExceptionCount ; this . totalLoadTime = totalLoadTime ; this . evictionCount = evictionCount ; } public long requestCount ( ) { return hitCount + missCount ; } public long hitCount ( ) { return hitCount ; } public double hitRate ( ) { long requestCount = requestCount ( ) ; return ( requestCount = = <int> ) ? <float> : ( double ) hitCount / requestCount ; } public long missCount ( ) { return missCount ; } public double missRate ( ) { long requestCount = requestCount ( ) ; return ( requestCount = = <int> ) ? <float> : ( double ) missCount / requestCount ; } public long loadCount ( ) { return loadSuccessCount + loadExceptionCount ; } public long loadSuccessCount ( ) { return loadSuccessCount ; } public long loadExceptionCount ( ) { return loadExceptionCount ; } public double loadExceptionRate ( ) { long totalLoadCount = loadSuccessCount + loadExceptionCount ; return ( totalLoadCount = = <int> ) ? <float> : ( double ) loadExceptionCount / totalLoadCount ; } public long totalLoadTime ( ) { return totalLoadTime ; } public double averageLoadPenalty ( ) { long totalLoadCount = loadSuccessCount + loadExceptionCount ; return ( totalLoadCount = = <int> ) ? <float> : ( double ) totalLoadTime / totalLoadCount ; } public long evictionCount ( ) { return evictionCount ; } public CacheStats minus ( CacheStats other ) { return new CacheStats ( Math . max ( <int> , hitCount - other . hitCount ) , Math . max ( <int> , missCount - other . missCount ) , Math . max ( <int> , loadSuccessCount - other . loadSuccessCount ) , Math . max ( <int> , loadExceptionCount - other . loadExceptionCount ) , Math . max ( <int> , totalLoadTime - other . totalLoadTime ) , Math . max ( <int> , evictionCount - other . evictionCount ) ) ; } public CacheStats plus ( CacheStats other ) { return new CacheStats ( hitCount + other . hitCount , missCount + other . missCount , loadSuccessCount + other . loadSuccessCount , loadExceptionCount + other . loadExceptionCount , totalLoadTime + other . totalLoadTime , evictionCount + other . evictionCount ) ; } @Override public int hashCode ( ) { return Objects . hashCode ( hitCount , missCount , loadSuccessCount , loadExceptionCount , totalLoadTime , evictionCount ) ; } @Override public boolean equals ( @Nullable Object object ) { if ( object instanceof CacheStats ) { CacheStats other = ( CacheStats ) object ; return hitCount = = other . hitCount & & missCount = = other . missCount & & loadSuccessCount = = other . loadSuccessCount & & loadExceptionCount = = other . loadExceptionCount & & totalLoadTime = = other . totalLoadTime & & evictionCount = = other . evictionCount ; } return false ; } @Override public String toString ( ) { return MoreObjects . toStringHelper ( this ) . add ( <str> , hitCount ) . add ( <str> , missCount ) . add ( <str> , loadSuccessCount ) . add ( <str> , loadExceptionCount ) . add ( <str> , totalLoadTime ) . add ( <str> , evictionCount ) . toString ( ) ; } } 

package org . apache . cassandra . cql3 . functions ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . Date ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . serializers . SimpleDateSerializer ; import org . apache . cassandra . utils . UUIDGen ; import org . joda . time . DateTime ; import org . joda . time . DateTimeZone ; import org . joda . time . format . DateTimeFormat ; import org . junit . Test ; public class CastFctsTest extends CQLTester { @Test public void testInvalidQueries ( ) throws Throwable { createTable ( <str> ) ; assertInvalidSyntaxMessage ( <str> , <str> , <float> , <str> , <float> ) ; assertInvalidSyntaxMessage ( <str> + KEYSPACE + <str> + currentTable ( ) + <str> , <str> , <int> , <int> ) ; assertInvalidSyntaxMessage ( <str> , <str> , <int> , <float> ) ; assertInvalidSyntaxMessage ( <str> + KEYSPACE + <str> + currentTable ( ) + <str> , <str> , <int> , <float> ) ; assertInvalidSyntaxMessage ( <str> + KEYSPACE + <str> + currentTable ( ) + <str> , <str> , <int> , <float> ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testNumericCastsInSelectionClause ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; execute ( <str> , ( byte ) <int> , ( short ) <int> , <int> , <int> , <float> , <float> , BigDecimal . valueOf ( <float> ) , BigInteger . valueOf ( <int> ) ) ; assertColumnNames ( execute ( <str> ) , <str> , <str> , <str> ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , null ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , null ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , null ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , null ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( <float> , <float> , <float> , <float> , <float> , <float> , <float> , <float> , null ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( <float> , <float> , <float> , <float> , ( double ) <float> , <float> , <float> , <float> , null ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( BigDecimal . valueOf ( <float> ) , BigDecimal . valueOf ( <float> ) , BigDecimal . valueOf ( <float> ) , BigDecimal . valueOf ( <float> ) , BigDecimal . valueOf ( <float> ) , BigDecimal . valueOf ( <float> ) , BigDecimal . valueOf ( <float> ) , BigDecimal . valueOf ( <float> ) , null ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , null ) ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , null ) ) ; } @Test public void testTimeCastsInSelectionClause ( ) throws Throwable { createTable ( <str> ) ; DateTime dateTime = DateTimeFormat . forPattern ( <str> ) . withZone ( DateTimeZone . UTC ) . parseDateTime ( <str> ) ; DateTime date = DateTimeFormat . forPattern ( <str> ) . withZone ( DateTimeZone . UTC ) . parseDateTime ( <str> ) ; long timeInMillis = dateTime . getMillis ( ) ; execute ( <str> , UUIDGen . getTimeUUID ( timeInMillis ) ) ; assertRows ( execute ( <str> + <str> + <str> ) , row ( new Date ( dateTime . getMillis ( ) ) , new Date ( dateTime . getMillis ( ) ) , new Date ( date . getMillis ( ) ) ) ) ; int timeInMillisToDay = SimpleDateSerializer . timeInMillisToDay ( date . getMillis ( ) ) ; assertRows ( execute ( <str> + <str> + <str> ) , row ( timeInMillisToDay , timeInMillisToDay , timeInMillisToDay ) ) ; assertRows ( execute ( <str> + <str> + <str> ) , row ( <str> , <str> , <str> ) ) ; } @Test public void testOtherTypeCastsInSelectionClause ( ) throws Throwable { createTable ( <str> + <str> + <str> ) ; execute ( <str> , <str> , true ) ; assertRows ( execute ( <str> + <str> + <str> ) , row ( <str> , <str> , <str> ) ) ; } @Test public void testCastsWithReverseOrder ( ) throws Throwable { createTable ( <str> + <str> + <str> + <str> ) ; execute ( <str> , <int> , ( short ) <int> , <float> ) ; assertRows ( execute ( <str> + <str> + <str> ) , row ( ( byte ) <int> , ( byte ) <int> , ( byte ) <int> ) ) ; assertRows ( execute ( <str> + <str> + <str> ) , row ( ( short ) <int> , ( short ) <int> , ( short ) <int> ) ) ; assertRows ( execute ( <str> + <str> + <str> ) , row ( <str> , <str> , <str> ) ) ; String f = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertRows ( execute ( <str> + f + <str> ) , row ( ( double ) <int> ) ) ; assertRows ( execute ( <str> + f + <str> ) , row ( <str> ) ) ; } @Test public void testCounterCastsInSelectionClause ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) , row ( ( byte ) <int> , ( short ) <int> , <int> , <int> , <float> , <float> , BigDecimal . valueOf ( <float> ) , <str> , <str> ) ) ; } } 

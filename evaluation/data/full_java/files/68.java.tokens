package org . apache . cassandra . auth ; import java . util . HashMap ; import java . util . Map ; import com . google . common . base . Optional ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . exceptions . SyntaxException ; import org . apache . cassandra . utils . FBUtilities ; public class RoleOptions { private final Map < IRoleManager . Option , Object > options = new HashMap < > ( ) ; public void setOption ( IRoleManager . Option option , Object value ) { if ( options . containsKey ( option ) ) throw new SyntaxException ( String . format ( <str> , option . name ( ) ) ) ; options . put ( option , value ) ; } public boolean isEmpty ( ) { return options . isEmpty ( ) ; } public Map < IRoleManager . Option , Object > getOptions ( ) { return options ; } public Optional < Boolean > getSuperuser ( ) { return Optional . fromNullable ( ( Boolean ) options . get ( IRoleManager . Option . SUPERUSER ) ) ; } public Optional < Boolean > getLogin ( ) { return Optional . fromNullable ( ( Boolean ) options . get ( IRoleManager . Option . LOGIN ) ) ; } public Optional < String > getPassword ( ) { return Optional . fromNullable ( ( String ) options . get ( IRoleManager . Option . PASSWORD ) ) ; } @SuppressWarnings ( <str> ) public Optional < Map < String , String > > getCustomOptions ( ) { return Optional . fromNullable ( ( Map < String , String > ) options . get ( IRoleManager . Option . OPTIONS ) ) ; } public void validate ( ) { for ( Map . Entry < IRoleManager . Option , Object > option : options . entrySet ( ) ) { if ( ! DatabaseDescriptor . getRoleManager ( ) . supportedOptions ( ) . contains ( option . getKey ( ) ) ) throw new InvalidRequestException ( String . format ( <str> , DatabaseDescriptor . getRoleManager ( ) . getClass ( ) . getName ( ) , option . getKey ( ) ) ) ; switch ( option . getKey ( ) ) { case LOGIN : case SUPERUSER : if ( ! ( option . getValue ( ) instanceof Boolean ) ) throw new InvalidRequestException ( String . format ( <str> + <str> , option . getKey ( ) ) ) ; break ; case PASSWORD : if ( ! ( option . getValue ( ) instanceof String ) ) throw new InvalidRequestException ( String . format ( <str> + <str> , option . getKey ( ) ) ) ; break ; case OPTIONS : if ( ! ( option . getValue ( ) instanceof Map ) ) throw new InvalidRequestException ( String . format ( <str> + <str> , option . getKey ( ) ) ) ; break ; } } } public String toString ( ) { return FBUtilities . toString ( options ) ; } } 

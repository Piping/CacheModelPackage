package org . elasticsearch . common . lucene . store ; import org . apache . lucene . store . IndexInput ; import java . io . EOFException ; import java . io . IOException ; public class ByteArrayIndexInput extends IndexInput { private final byte [ ] bytes ; private int pos ; private int offset ; private int length ; public ByteArrayIndexInput ( String resourceDesc , byte [ ] bytes ) { this ( resourceDesc , bytes , <int> , bytes . length ) ; } public ByteArrayIndexInput ( String resourceDesc , byte [ ] bytes , int offset , int length ) { super ( resourceDesc ) ; this . bytes = bytes ; this . offset = offset ; this . length = length ; } @Override public void close ( ) throws IOException { } @Override public long getFilePointer ( ) { return pos ; } @Override public void seek ( long l ) throws IOException { if ( l < <int> ) { throw new IllegalArgumentException ( <str> + pos ) ; } else if ( l > length ) { throw new EOFException ( <str> ) ; } pos = ( int ) l ; } @Override public long length ( ) { return length ; } @Override public IndexInput slice ( String sliceDescription , long offset , long length ) throws IOException { if ( offset > = <int> L & & length > = <int> L & & offset + length < = this . length ) { return new ByteArrayIndexInput ( sliceDescription , bytes , this . offset + ( int ) offset , ( int ) length ) ; } else { throw new IllegalArgumentException ( <str> + sliceDescription + <str> + offset + <str> + length + <str> + this . length + <str> + this ) ; } } @Override public byte readByte ( ) throws IOException { if ( pos > = offset + length ) { throw new EOFException ( <str> ) ; } return bytes [ offset + pos + + ] ; } @Override public void readBytes ( final byte [ ] b , final int offset , int len ) throws IOException { if ( pos + len > this . offset + length ) { throw new EOFException ( <str> ) ; } System . arraycopy ( bytes , this . offset + pos , b , offset , len ) ; pos + = len ; } } 

package com . google . common . util . concurrent ; import static com . google . common . util . concurrent . MoreExecutors . directExecutor ; import com . google . common . base . Preconditions ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . Future ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; import javax . annotation . Nullable ; final class TimeoutFuture < V > extends AbstractFuture . TrustedFuture < V > { static < V > ListenableFuture < V > create ( ListenableFuture < V > delegate , long time , TimeUnit unit , ScheduledExecutorService scheduledExecutor ) { TimeoutFuture < V > result = new TimeoutFuture < V > ( delegate ) ; TimeoutFuture . Fire < V > fire = new TimeoutFuture . Fire < V > ( result ) ; result . timer = scheduledExecutor . schedule ( fire , time , unit ) ; delegate . addListener ( fire , directExecutor ( ) ) ; return result ; } @Nullable private ListenableFuture < V > delegateRef ; @Nullable private Future < ? > timer ; private TimeoutFuture ( ListenableFuture < V > delegate ) { this . delegateRef = Preconditions . checkNotNull ( delegate ) ; } private static final class Fire < V > implements Runnable { @Nullable TimeoutFuture < V > timeoutFutureRef ; Fire ( TimeoutFuture < V > timeoutFuture ) { this . timeoutFutureRef = timeoutFuture ; } @Override public void run ( ) { TimeoutFuture < V > timeoutFuture = timeoutFutureRef ; if ( timeoutFuture = = null ) { return ; } ListenableFuture < V > delegate = timeoutFuture . delegateRef ; if ( delegate = = null ) { return ; } timeoutFutureRef = null ; if ( delegate . isDone ( ) ) { timeoutFuture . setFuture ( delegate ) ; } else { try { timeoutFuture . setException ( new TimeoutException ( <str> + delegate ) ) ; } finally { delegate . cancel ( true ) ; } } } } @Override void done ( ) { maybePropagateCancellation ( delegateRef ) ; Future < ? > localTimer = timer ; if ( localTimer ! = null ) { localTimer . cancel ( false ) ; } delegateRef = null ; timer = null ; } } 

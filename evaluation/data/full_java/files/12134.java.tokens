package org . gradle . internal . typeconversion ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import java . util . Collection ; public class CompositeNotationParser < N , T > implements NotationParser < N , T > { private final Collection < ? extends NotationParser < ? super N , ? extends T > > delegates ; public CompositeNotationParser ( Collection < ? extends NotationParser < ? super N , ? extends T > > delegates ) { assert delegates ! = null : <str> ; this . delegates = delegates ; } @Override public void describe ( DiagnosticsVisitor visitor ) { for ( NotationParser < ? , ? > delegate : delegates ) { delegate . describe ( visitor ) ; } } public T parseNotation ( N notation ) { for ( NotationParser < ? super N , ? extends T > delegate : delegates ) { try { return delegate . parseNotation ( notation ) ; } catch ( UnsupportedNotationException e ) { } } throw new UnsupportedNotationException ( notation ) ; } } 

package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . ListFeature . SUPPORTS_ADD_WITH_INDEX ; import static java . util . Collections . singletonList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . MinimalCollection ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import java . util . List ; @SuppressWarnings ( <str> ) @GwtCompatible public class ListAddAllAtIndexTester < E > extends AbstractListTester < E > { @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testAddAllAtIndex_supportedAllPresent ( ) { assertTrue ( <str> , getList ( ) . addAll ( <int> , MinimalCollection . of ( e0 ( ) ) ) ) ; expectAdded ( <int> , e0 ( ) ) ; } @ListFeature.Require ( absent = SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testAddAllAtIndex_unsupportedAllPresent ( ) { try { getList ( ) . addAll ( <int> , MinimalCollection . of ( e0 ( ) ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testAddAllAtIndex_supportedSomePresent ( ) { assertTrue ( <str> , getList ( ) . addAll ( <int> , MinimalCollection . of ( e0 ( ) , e3 ( ) ) ) ) ; expectAdded ( <int> , e0 ( ) , e3 ( ) ) ; } @ListFeature.Require ( absent = SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testAddAllAtIndex_unsupportedSomePresent ( ) { try { getList ( ) . addAll ( <int> , MinimalCollection . of ( e0 ( ) , e3 ( ) ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testAddAllAtIndex_supportedNothing ( ) { assertFalse ( <str> , getList ( ) . addAll ( <int> , emptyCollection ( ) ) ) ; expectUnchanged ( ) ; } @ListFeature.Require ( absent = SUPPORTS_ADD_WITH_INDEX ) public void testAddAllAtIndex_unsupportedNothing ( ) { try { assertFalse ( <str> , getList ( ) . addAll ( <int> , emptyCollection ( ) ) ) ; } catch ( UnsupportedOperationException tolerated ) { } expectUnchanged ( ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testAddAllAtIndex_withDuplicates ( ) { MinimalCollection < E > elementsToAdd = MinimalCollection . of ( e0 ( ) , e1 ( ) , e0 ( ) , e1 ( ) ) ; assertTrue ( <str> , getList ( ) . addAll ( <int> , elementsToAdd ) ) ; expectAdded ( <int> , e0 ( ) , e1 ( ) , e0 ( ) , e1 ( ) ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) public void testAddAllAtIndex_nullSupported ( ) { List < E > containsNull = singletonList ( null ) ; assertTrue ( <str> , getList ( ) . addAll ( <int> , containsNull ) ) ; expectAdded ( <int> , ( E ) null ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionFeature.Require ( absent = ALLOWS_NULL_VALUES ) public void testAddAllAtIndex_nullUnsupported ( ) { List < E > containsNull = singletonList ( null ) ; try { getList ( ) . addAll ( <int> , containsNull ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } expectUnchanged ( ) ; expectNullMissingWhenNullUnsupported ( <str> ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testAddAllAtIndex_middle ( ) { assertTrue ( <str> , getList ( ) . addAll ( getNumElements ( ) / <int> , createDisjointCollection ( ) ) ) ; expectAdded ( getNumElements ( ) / <int> , createDisjointCollection ( ) ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testAddAllAtIndex_end ( ) { assertTrue ( <str> , getList ( ) . addAll ( getNumElements ( ) , createDisjointCollection ( ) ) ) ; expectAdded ( getNumElements ( ) , createDisjointCollection ( ) ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testAddAllAtIndex_nullCollectionReference ( ) { try { getList ( ) . addAll ( <int> , null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } expectUnchanged ( ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testAddAllAtIndex_negative ( ) { try { getList ( ) . addAll ( - <int> , MinimalCollection . of ( e3 ( ) ) ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testAddAllAtIndex_tooLarge ( ) { try { getList ( ) . addAll ( getNumElements ( ) + <int> , MinimalCollection . of ( e3 ( ) ) ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } } 

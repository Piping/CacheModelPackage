package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . search . aggregations . Aggregator . SubAggCollectionMode ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . search . aggregations . bucket . terms . Terms . Bucket ; import org . elasticsearch . search . aggregations . bucket . terms . Terms . Order ; import org . elasticsearch . search . aggregations . bucket . terms . TermsAggregatorFactory . ExecutionMode ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . search . aggregations . AggregationBuilders . sum ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; import static org . hamcrest . core . IsNull . notNullValue ; @ESIntegTestCase.SuiteScopeTestCase public class TermsDocCountErrorIT extends ESIntegTestCase { private static final String STRING_FIELD_NAME = <str> ; private static final String LONG_FIELD_NAME = <str> ; private static final String DOUBLE_FIELD_NAME = <str> ; public static String randomExecutionHint ( ) { return randomBoolean ( ) ? null : randomFrom ( ExecutionMode . values ( ) ) . toString ( ) ; } private static int numRoutingValues ; @Override public void setupSuiteScopeCluster ( ) throws Exception { createIndex ( <str> ) ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; int numDocs = between ( <int> , <int> ) ; int numUniqueTerms = between ( <int> , numDocs / <int> ) ; for ( int i = <int> ; i < numDocs ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( STRING_FIELD_NAME , <str> + randomInt ( numUniqueTerms ) ) . field ( LONG_FIELD_NAME , randomInt ( numUniqueTerms ) ) . field ( DOUBLE_FIELD_NAME , <float> * randomInt ( numUniqueTerms ) ) . endObject ( ) ) ) ; } assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . builder ( ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( STRING_FIELD_NAME , <str> + randomInt ( numUniqueTerms ) ) . field ( LONG_FIELD_NAME , randomInt ( numUniqueTerms ) ) . field ( DOUBLE_FIELD_NAME , <float> * randomInt ( numUniqueTerms ) ) . endObject ( ) ) ) ; } numRoutingValues = between ( <int> , <int> ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> ) ) ; for ( int i = <int> ; i < numDocs ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setRouting ( String . valueOf ( randomInt ( numRoutingValues ) ) ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( STRING_FIELD_NAME , <str> + randomInt ( numUniqueTerms ) ) . field ( LONG_FIELD_NAME , randomInt ( numUniqueTerms ) ) . field ( DOUBLE_FIELD_NAME , <float> * randomInt ( numUniqueTerms ) ) . endObject ( ) ) ) ; } indexRandom ( true , builders ) ; ensureSearchable ( ) ; } private void assertDocCountErrorWithinBounds ( int size , SearchResponse accurateResponse , SearchResponse testResponse ) { Terms accurateTerms = accurateResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( accurateTerms , notNullValue ( ) ) ; assertThat ( accurateTerms . getName ( ) , equalTo ( <str> ) ) ; assertThat ( accurateTerms . getDocCountError ( ) , equalTo ( <int> l ) ) ; Terms testTerms = testResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( testTerms , notNullValue ( ) ) ; assertThat ( testTerms . getName ( ) , equalTo ( <str> ) ) ; assertThat ( testTerms . getDocCountError ( ) , greaterThanOrEqualTo ( <int> l ) ) ; Collection < Bucket > testBuckets = testTerms . getBuckets ( ) ; assertThat ( testBuckets . size ( ) , lessThanOrEqualTo ( size ) ) ; assertThat ( accurateTerms . getBuckets ( ) . size ( ) , greaterThanOrEqualTo ( testBuckets . size ( ) ) ) ; for ( Terms . Bucket testBucket : testBuckets ) { assertThat ( testBucket , notNullValue ( ) ) ; Terms . Bucket accurateBucket = accurateTerms . getBucketByKey ( testBucket . getKeyAsString ( ) ) ; assertThat ( accurateBucket , notNullValue ( ) ) ; assertThat ( accurateBucket . getDocCountError ( ) , equalTo ( <int> l ) ) ; assertThat ( testBucket . getDocCountError ( ) , lessThanOrEqualTo ( testTerms . getDocCountError ( ) ) ) ; assertThat ( testBucket . getDocCount ( ) + testBucket . getDocCountError ( ) , greaterThanOrEqualTo ( accurateBucket . getDocCount ( ) ) ) ; assertThat ( testBucket . getDocCount ( ) - testBucket . getDocCountError ( ) , lessThanOrEqualTo ( accurateBucket . getDocCount ( ) ) ) ; } for ( Terms . Bucket accurateBucket : accurateTerms . getBuckets ( ) ) { assertThat ( accurateBucket , notNullValue ( ) ) ; Terms . Bucket testBucket = accurateTerms . getBucketByKey ( accurateBucket . getKeyAsString ( ) ) ; if ( testBucket = = null ) { assertThat ( accurateBucket . getDocCount ( ) , lessThanOrEqualTo ( testTerms . getDocCountError ( ) ) ) ; } } } private void assertNoDocCountError ( int size , SearchResponse accurateResponse , SearchResponse testResponse ) { Terms accurateTerms = accurateResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( accurateTerms , notNullValue ( ) ) ; assertThat ( accurateTerms . getName ( ) , equalTo ( <str> ) ) ; assertThat ( accurateTerms . getDocCountError ( ) , equalTo ( <int> l ) ) ; Terms testTerms = testResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( testTerms , notNullValue ( ) ) ; assertThat ( testTerms . getName ( ) , equalTo ( <str> ) ) ; assertThat ( testTerms . getDocCountError ( ) , equalTo ( <int> l ) ) ; Collection < Bucket > testBuckets = testTerms . getBuckets ( ) ; assertThat ( testBuckets . size ( ) , lessThanOrEqualTo ( size ) ) ; assertThat ( accurateTerms . getBuckets ( ) . size ( ) , greaterThanOrEqualTo ( testBuckets . size ( ) ) ) ; for ( Terms . Bucket testBucket : testBuckets ) { assertThat ( testBucket , notNullValue ( ) ) ; Terms . Bucket accurateBucket = accurateTerms . getBucketByKey ( testBucket . getKeyAsString ( ) ) ; assertThat ( accurateBucket , notNullValue ( ) ) ; assertThat ( accurateBucket . getDocCountError ( ) , equalTo ( <int> l ) ) ; assertThat ( testBucket . getDocCountError ( ) , equalTo ( <int> l ) ) ; } } private void assertNoDocCountErrorSingleResponse ( int size , SearchResponse testResponse ) { Terms testTerms = testResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( testTerms , notNullValue ( ) ) ; assertThat ( testTerms . getName ( ) , equalTo ( <str> ) ) ; assertThat ( testTerms . getDocCountError ( ) , equalTo ( <int> l ) ) ; Collection < Bucket > testBuckets = testTerms . getBuckets ( ) ; assertThat ( testBuckets . size ( ) , lessThanOrEqualTo ( size ) ) ; for ( Terms . Bucket testBucket : testBuckets ) { assertThat ( testBucket , notNullValue ( ) ) ; assertThat ( testBucket . getDocCountError ( ) , equalTo ( <int> l ) ) ; } } private void assertUnboundedDocCountError ( int size , SearchResponse accurateResponse , SearchResponse testResponse ) { Terms accurateTerms = accurateResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( accurateTerms , notNullValue ( ) ) ; assertThat ( accurateTerms . getName ( ) , equalTo ( <str> ) ) ; assertThat ( accurateTerms . getDocCountError ( ) , equalTo ( <int> l ) ) ; Terms testTerms = testResponse . getAggregations ( ) . get ( <str> ) ; assertThat ( testTerms , notNullValue ( ) ) ; assertThat ( testTerms . getName ( ) , equalTo ( <str> ) ) ; assertThat ( testTerms . getDocCountError ( ) , anyOf ( equalTo ( - <int> ) , equalTo ( <int> l ) ) ) ; Collection < Bucket > testBuckets = testTerms . getBuckets ( ) ; assertThat ( testBuckets . size ( ) , lessThanOrEqualTo ( size ) ) ; assertThat ( accurateTerms . getBuckets ( ) . size ( ) , greaterThanOrEqualTo ( testBuckets . size ( ) ) ) ; for ( Terms . Bucket testBucket : testBuckets ) { assertThat ( testBucket , notNullValue ( ) ) ; Terms . Bucket accurateBucket = accurateTerms . getBucketByKey ( testBucket . getKeyAsString ( ) ) ; assertThat ( accurateBucket , notNullValue ( ) ) ; assertThat ( accurateBucket . getDocCountError ( ) , equalTo ( <int> l ) ) ; assertThat ( testBucket . getDocCountError ( ) , anyOf ( equalTo ( - <int> ) , equalTo ( <int> l ) ) ) ; } } public void testStringValueField ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertDocCountErrorWithinBounds ( size , accurateResponse , testResponse ) ; } public void testStringValueFieldSingleShard ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountError ( size , accurateResponse , testResponse ) ; } public void testStringValueFieldWithRouting ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setRouting ( String . valueOf ( between ( <int> , numRoutingValues ) ) ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountErrorSingleResponse ( size , testResponse ) ; } public void testStringValueFieldDocCountAsc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . count ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . count ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertUnboundedDocCountError ( size , accurateResponse , testResponse ) ; } public void testStringValueFieldTermSortAsc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . term ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . term ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountError ( size , accurateResponse , testResponse ) ; } public void testStringValueFieldTermSortDesc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . term ( false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . term ( false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountError ( size , accurateResponse , testResponse ) ; } public void testStringValueFieldSubAggAsc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . aggregation ( <str> , true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . aggregation ( <str> , true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertUnboundedDocCountError ( size , accurateResponse , testResponse ) ; } public void testStringValueFieldSubAggDesc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . aggregation ( <str> , false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( STRING_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . aggregation ( <str> , false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertUnboundedDocCountError ( size , accurateResponse , testResponse ) ; } public void testLongValueField ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertDocCountErrorWithinBounds ( size , accurateResponse , testResponse ) ; } public void testLongValueFieldSingleShard ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountError ( size , accurateResponse , testResponse ) ; } public void testLongValueFieldWithRouting ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setRouting ( String . valueOf ( between ( <int> , numRoutingValues ) ) ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountErrorSingleResponse ( size , testResponse ) ; } public void testLongValueFieldDocCountAsc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . count ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . count ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertUnboundedDocCountError ( size , accurateResponse , testResponse ) ; } public void testLongValueFieldTermSortAsc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . term ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . term ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountError ( size , accurateResponse , testResponse ) ; } public void testLongValueFieldTermSortDesc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . term ( false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . term ( false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountError ( size , accurateResponse , testResponse ) ; } public void testLongValueFieldSubAggAsc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . aggregation ( <str> , true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . aggregation ( <str> , true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertUnboundedDocCountError ( size , accurateResponse , testResponse ) ; } public void testLongValueFieldSubAggDesc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . aggregation ( <str> , false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( DOUBLE_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( LONG_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . aggregation ( <str> , false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( DOUBLE_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertUnboundedDocCountError ( size , accurateResponse , testResponse ) ; } public void testDoubleValueField ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertDocCountErrorWithinBounds ( size , accurateResponse , testResponse ) ; } public void testDoubleValueFieldSingleShard ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountError ( size , accurateResponse , testResponse ) ; } public void testDoubleValueFieldWithRouting ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setRouting ( String . valueOf ( between ( <int> , numRoutingValues ) ) ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountErrorSingleResponse ( size , testResponse ) ; } public void testDoubleValueFieldDocCountAsc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . count ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . count ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertUnboundedDocCountError ( size , accurateResponse , testResponse ) ; } public void testDoubleValueFieldTermSortAsc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . term ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . term ( true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountError ( size , accurateResponse , testResponse ) ; } public void testDoubleValueFieldTermSortDesc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . term ( false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . term ( false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertNoDocCountError ( size , accurateResponse , testResponse ) ; } public void testDoubleValueFieldSubAggAsc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . aggregation ( <str> , true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . aggregation ( <str> , true ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertUnboundedDocCountError ( size , accurateResponse , testResponse ) ; } public void testDoubleValueFieldSubAggDesc ( ) throws Exception { int size = randomIntBetween ( <int> , <int> ) ; int shardSize = randomIntBetween ( size , size * <int> ) ; SearchResponse accurateResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( <int> ) . shardSize ( <int> ) . order ( Order . aggregation ( <str> , false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( accurateResponse ) ; SearchResponse testResponse = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . addAggregation ( terms ( <str> ) . executionHint ( randomExecutionHint ( ) ) . field ( DOUBLE_FIELD_NAME ) . showTermDocCountError ( true ) . size ( size ) . shardSize ( shardSize ) . order ( Order . aggregation ( <str> , false ) ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( sum ( <str> ) . field ( LONG_FIELD_NAME ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( testResponse ) ; assertUnboundedDocCountError ( size , accurateResponse , testResponse ) ; } } 

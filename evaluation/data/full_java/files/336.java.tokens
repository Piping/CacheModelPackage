package org . apache . cassandra . db ; import org . apache . cassandra . db . filter . DataLimits ; import org . apache . cassandra . db . partitions . * ; import org . apache . cassandra . exceptions . RequestExecutionException ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . service . pager . QueryPager ; import org . apache . cassandra . service . pager . PagingState ; public interface ReadQuery { ReadQuery EMPTY = new ReadQuery ( ) { public ReadExecutionController executionController ( ) { return ReadExecutionController . empty ( ) ; } public PartitionIterator execute ( ConsistencyLevel consistency , ClientState clientState ) throws RequestExecutionException { return EmptyIterators . partition ( ) ; } public PartitionIterator executeInternal ( ReadExecutionController controller ) { return EmptyIterators . partition ( ) ; } public DataLimits limits ( ) { return DataLimits . cqlLimits ( <int> ) ; } public QueryPager getPager ( PagingState state , int protocolVersion ) { return QueryPager . EMPTY ; } public QueryPager getLocalPager ( ) { return QueryPager . EMPTY ; } public boolean selectsKey ( DecoratedKey key ) { return false ; } public boolean selectsClustering ( DecoratedKey key , Clustering clustering ) { return false ; } } ; public ReadExecutionController executionController ( ) ; public PartitionIterator execute ( ConsistencyLevel consistency , ClientState clientState ) throws RequestExecutionException ; public PartitionIterator executeInternal ( ReadExecutionController controller ) ; public QueryPager getPager ( PagingState pagingState , int protocolVersion ) ; public DataLimits limits ( ) ; public boolean selectsKey ( DecoratedKey key ) ; public boolean selectsClustering ( DecoratedKey key , Clustering clustering ) ; } 

package org . elasticsearch . repositories . blobstore ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . blobstore . BlobContainer ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . FromXContentBuilder ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; import java . util . HashMap ; import java . util . Locale ; import java . util . Map ; public abstract class BlobStoreFormat < T extends ToXContent > { protected final String blobNameFormat ; protected final FromXContentBuilder < T > reader ; protected final ParseFieldMatcher parseFieldMatcher ; protected static final ToXContent . Params SNAPSHOT_ONLY_FORMAT_PARAMS ; static { Map < String , String > snapshotOnlyParams = new HashMap < > ( ) ; snapshotOnlyParams . put ( MetaData . CONTEXT_MODE_PARAM , MetaData . CONTEXT_MODE_SNAPSHOT ) ; SNAPSHOT_ONLY_FORMAT_PARAMS = new ToXContent . MapParams ( snapshotOnlyParams ) ; } protected BlobStoreFormat ( String blobNameFormat , FromXContentBuilder < T > reader , ParseFieldMatcher parseFieldMatcher ) { this . reader = reader ; this . blobNameFormat = blobNameFormat ; this . parseFieldMatcher = parseFieldMatcher ; } public abstract T readBlob ( BlobContainer blobContainer , String blobName ) throws IOException ; public T read ( BlobContainer blobContainer , String name ) throws IOException { String blobName = blobName ( name ) ; return readBlob ( blobContainer , blobName ) ; } public void delete ( BlobContainer blobContainer , String name ) throws IOException { blobContainer . deleteBlob ( blobName ( name ) ) ; } public boolean exists ( BlobContainer blobContainer , String name ) throws IOException { return blobContainer . blobExists ( blobName ( name ) ) ; } protected String blobName ( String name ) { return String . format ( Locale . ROOT , blobNameFormat , name ) ; } protected T read ( BytesReference bytes ) throws IOException { try ( XContentParser parser = XContentHelper . createParser ( bytes ) ) { T obj = reader . fromXContent ( parser , parseFieldMatcher ) ; return obj ; } } } 

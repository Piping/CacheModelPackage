package org . gradle . api ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public enum JavaVersion { VERSION_1_1 ( false ) , VERSION_1_2 ( false ) , VERSION_1_3 ( false ) , VERSION_1_4 ( false ) , VERSION_1_5 ( true ) , VERSION_1_6 ( true ) , VERSION_1_7 ( true ) , VERSION_1_8 ( true ) , VERSION_1_9 ( true ) ; private final boolean hasMajorVersion ; JavaVersion ( boolean hasMajorVersion ) { this . hasMajorVersion = hasMajorVersion ; } public static JavaVersion toVersion ( Object value ) throws IllegalArgumentException { if ( value = = null ) { return null ; } if ( value instanceof JavaVersion ) { return ( JavaVersion ) value ; } String name = value . toString ( ) ; Matcher matcher = Pattern . compile ( <str> ) . matcher ( name ) ; if ( matcher . matches ( ) ) { int index = Integer . parseInt ( matcher . group ( <int> ) ) - <int> ; if ( index < values ( ) . length & & values ( ) [ index ] . hasMajorVersion ) { return values ( ) [ index ] ; } } matcher = Pattern . compile ( <str> ) . matcher ( name ) ; if ( matcher . matches ( ) ) { int versionIdx = Integer . parseInt ( matcher . group ( <int> ) ) - <int> ; if ( versionIdx > = <int> & & versionIdx < values ( ) . length ) { return values ( ) [ versionIdx ] ; } } throw new IllegalArgumentException ( String . format ( <str> , name ) ) ; } public static JavaVersion current ( ) { return toVersion ( System . getProperty ( <str> ) ) ; } public static JavaVersion forClassVersion ( int classVersion ) { int index = classVersion - <int> ; if ( index > <int> & & index < values ( ) . length & & values ( ) [ index ] . hasMajorVersion ) { return values ( ) [ index ] ; } throw new IllegalArgumentException ( String . format ( <str> , classVersion ) ) ; } public boolean isJava5 ( ) { return this = = VERSION_1_5 ; } public boolean isJava6 ( ) { return this = = VERSION_1_6 ; } public boolean isJava7 ( ) { return this = = VERSION_1_7 ; } private boolean isJava8 ( ) { return this = = VERSION_1_8 ; } private boolean isJava9 ( ) { return this = = VERSION_1_9 ; } public boolean isJava5Compatible ( ) { return this . compareTo ( VERSION_1_5 ) > = <int> ; } public boolean isJava6Compatible ( ) { return this . compareTo ( VERSION_1_6 ) > = <int> ; } public boolean isJava7Compatible ( ) { return this . compareTo ( VERSION_1_7 ) > = <int> ; } public boolean isJava8Compatible ( ) { return this . compareTo ( VERSION_1_8 ) > = <int> ; } public boolean isJava9Compatible ( ) { return this . compareTo ( VERSION_1_9 ) > = <int> ; } @Override public String toString ( ) { return getName ( ) ; } private String getName ( ) { return name ( ) . substring ( <str> . length ( ) ) . replace ( <str> , <str> ) ; } public String getMajorVersion ( ) { return name ( ) . substring ( <int> ) ; } } 

package org . gradle . platform . base . component ; import org . gradle . api . Incubating ; import org . gradle . internal . reflect . DirectInstantiator ; import org . gradle . internal . reflect . ObjectInstantiationException ; import org . gradle . language . base . LanguageSourceSet ; import org . gradle . model . ModelMap ; import org . gradle . model . internal . core . ModelMaps ; import org . gradle . model . internal . core . MutableModelNode ; import org . gradle . platform . base . * ; import org . gradle . platform . base . internal . ComponentSpecInternal ; import org . gradle . util . DeprecationLogger ; import java . util . Collections ; import java . util . Set ; @Incubating @SuppressWarnings ( <str> ) public class BaseComponentSpec implements ComponentSpecInternal { private static ThreadLocal < ComponentInfo > nextComponentInfo = new ThreadLocal < ComponentInfo > ( ) ; private final ComponentSpecIdentifier identifier ; private final String typeName ; private final MutableModelNode binaries ; private final MutableModelNode sources ; private final MutableModelNode modelNode ; public static < T extends BaseComponentSpec > T create ( Class < ? extends ComponentSpec > publicType , Class < T > implementationType , ComponentSpecIdentifier identifier , MutableModelNode modelNode ) { nextComponentInfo . set ( new ComponentInfo ( identifier , modelNode , publicType . getSimpleName ( ) ) ) ; try { try { return DirectInstantiator . INSTANCE . newInstance ( implementationType ) ; } catch ( ObjectInstantiationException e ) { throw new ModelInstantiationException ( String . format ( <str> , publicType . getSimpleName ( ) ) , e . getCause ( ) ) ; } } finally { nextComponentInfo . set ( null ) ; } } public BaseComponentSpec ( ) { this ( nextComponentInfo . get ( ) ) ; } private BaseComponentSpec ( ComponentInfo info ) { if ( info = = null ) { throw new ModelInstantiationException ( <str> ) ; } this . identifier = info . componentIdentifier ; this . typeName = info . typeName ; modelNode = info . modelNode ; binaries = ModelMaps . addModelMapNode ( modelNode , BinarySpec . class , <str> ) ; sources = ModelMaps . addModelMapNode ( modelNode , LanguageSourceSet . class , <str> ) ; } public String getName ( ) { return identifier . getName ( ) ; } public String getProjectPath ( ) { return identifier . getProjectPath ( ) ; } protected String getTypeName ( ) { return typeName ; } public String getDisplayName ( ) { return String . format ( <str> , getTypeName ( ) , getName ( ) ) ; } @Override public String toString ( ) { return getDisplayName ( ) ; } @Override public ModelMap < LanguageSourceSet > getSource ( ) { DeprecationLogger . nagUserOfReplacedProperty ( <str> , <str> ) ; return getSources ( ) ; } @Override public ModelMap < LanguageSourceSet > getSources ( ) { return ModelMaps . asMutableView ( sources , LanguageSourceSet . class , modelNode . toString ( ) + <str> ) ; } @Override public ModelMap < BinarySpec > getBinaries ( ) { return ModelMaps . asMutableView ( binaries , BinarySpec . class , modelNode . toString ( ) + <str> ) ; } public Set < ? extends Class < ? extends TransformationFileType > > getInputTypes ( ) { return Collections . emptySet ( ) ; } private static class ComponentInfo { final ComponentSpecIdentifier componentIdentifier ; final MutableModelNode modelNode ; final String typeName ; private ComponentInfo ( ComponentSpecIdentifier componentIdentifier , MutableModelNode modelNode , String typeName ) { this . componentIdentifier = componentIdentifier ; this . modelNode = modelNode ; this . typeName = typeName ; } } } 

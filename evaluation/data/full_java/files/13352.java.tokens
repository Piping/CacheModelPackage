package org . gradle . api . publish . ivy . internal . publisher ; import org . apache . commons . lang . ObjectUtils ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . DescriptorParseContext ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . DisconnectedDescriptorParseContext ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . DisconnectedIvyXmlModuleDescriptorParser ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . MetaDataParseException ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy . ResolverStrategy ; import org . gradle . internal . component . external . model . MutableModuleComponentResolveMetaData ; import org . gradle . api . internal . artifacts . repositories . PublicationAwareRepository ; import org . gradle . api . publish . internal . PublicationFieldValidator ; import org . gradle . api . publish . ivy . InvalidIvyPublicationException ; import org . gradle . api . publish . ivy . IvyArtifact ; import java . io . File ; import java . util . HashSet ; import java . util . Set ; public class ValidatingIvyPublisher implements IvyPublisher { private final DescriptorParseContext parserSettings = new DisconnectedDescriptorParseContext ( ) ; private final IvyPublisher delegate ; private final DisconnectedIvyXmlModuleDescriptorParser moduleDescriptorParser = new DisconnectedIvyXmlModuleDescriptorParser ( new ResolverStrategy ( ) ) ; public ValidatingIvyPublisher ( IvyPublisher delegate ) { this . delegate = delegate ; } public void publish ( IvyNormalizedPublication publication , PublicationAwareRepository repository ) { validateMetadata ( publication ) ; validateArtifacts ( publication ) ; checkNoDuplicateArtifacts ( publication ) ; delegate . publish ( publication , repository ) ; } private void validateMetadata ( IvyNormalizedPublication publication ) { IvyPublicationIdentity identity = publication . getProjectIdentity ( ) ; IvyFieldValidator organisation = field ( publication , <str> , identity . getOrganisation ( ) ) . notEmpty ( ) . validInFileName ( ) ; IvyFieldValidator moduleName = field ( publication , <str> , identity . getModule ( ) ) . notEmpty ( ) . validInFileName ( ) ; IvyFieldValidator revision = field ( publication , <str> , identity . getRevision ( ) ) . notEmpty ( ) . validInFileName ( ) ; MutableModuleComponentResolveMetaData metadata = parseIvyFile ( publication ) ; ModuleVersionIdentifier moduleId = metadata . getId ( ) ; organisation . matches ( moduleId . getGroup ( ) ) ; moduleName . matches ( moduleId . getName ( ) ) ; revision . matches ( moduleId . getVersion ( ) ) ; field ( publication , <str> , metadata . getDescriptor ( ) . getModuleRevisionId ( ) . getBranch ( ) ) . optionalNotEmpty ( ) . doesNotContainSpecialCharacters ( true ) ; field ( publication , <str> , metadata . getStatus ( ) ) . optionalNotEmpty ( ) . validInFileName ( ) ; } private MutableModuleComponentResolveMetaData parseIvyFile ( IvyNormalizedPublication publication ) { try { return moduleDescriptorParser . parseMetaData ( parserSettings , publication . getDescriptorFile ( ) ) ; } catch ( MetaDataParseException pe ) { throw new InvalidIvyPublicationException ( publication . getName ( ) , pe . getLocalizedMessage ( ) , pe ) ; } } private void validateArtifacts ( IvyNormalizedPublication publication ) { for ( final IvyArtifact artifact : publication . getArtifacts ( ) ) { field ( publication , <str> , artifact . getName ( ) ) . notEmpty ( ) . validInFileName ( ) ; field ( publication , <str> , artifact . getType ( ) ) . notEmpty ( ) . validInFileName ( ) ; field ( publication , <str> , artifact . getExtension ( ) ) . notNull ( ) . validInFileName ( ) ; field ( publication , <str> , artifact . getClassifier ( ) ) . optionalNotEmpty ( ) . validInFileName ( ) ; checkCanPublish ( publication . getName ( ) , artifact ) ; } } private void checkNoDuplicateArtifacts ( IvyNormalizedPublication publication ) { Set < IvyArtifact > verified = new HashSet < IvyArtifact > ( ) ; for ( final IvyArtifact artifact : publication . getArtifacts ( ) ) { checkNotDuplicate ( publication , verified , artifact . getName ( ) , artifact . getExtension ( ) , artifact . getType ( ) , artifact . getClassifier ( ) ) ; verified . add ( artifact ) ; } checkNotDuplicate ( publication , verified , <str> , <str> , <str> , null ) ; } private void checkNotDuplicate ( IvyNormalizedPublication publication , Set < IvyArtifact > verified , String name , String extension , String type , String classifier ) { for ( IvyArtifact alreadyVerified : verified ) { if ( hasCoordinates ( alreadyVerified , name , extension , type , classifier ) ) { String message = String . format ( <str> , name , extension , type , classifier ) ; throw new InvalidIvyPublicationException ( publication . getName ( ) , message ) ; } } } private boolean hasCoordinates ( IvyArtifact one , String name , String extension , String type , String classifier ) { return ObjectUtils . equals ( one . getName ( ) , name ) & & ObjectUtils . equals ( one . getType ( ) , type ) & & ObjectUtils . equals ( one . getExtension ( ) , extension ) & & ObjectUtils . equals ( one . getClassifier ( ) , classifier ) ; } private void checkCanPublish ( String name , IvyArtifact artifact ) { File artifactFile = artifact . getFile ( ) ; if ( artifactFile = = null | | ! artifactFile . exists ( ) ) { throw new InvalidIvyPublicationException ( name , String . format ( <str> , artifactFile ) ) ; } if ( artifactFile . isDirectory ( ) ) { throw new InvalidIvyPublicationException ( name , String . format ( <str> , artifactFile ) ) ; } } private IvyFieldValidator field ( IvyNormalizedPublication publication , String name , String value ) { return new IvyFieldValidator ( publication . getName ( ) , name , value ) ; } private static class IvyFieldValidator extends PublicationFieldValidator < IvyFieldValidator > { private IvyFieldValidator ( String publicationName , String name , String value ) { super ( IvyFieldValidator . class , publicationName , name , value ) ; } public IvyFieldValidator matches ( String expectedValue ) { if ( ! value . equals ( expectedValue ) ) { throw new InvalidIvyPublicationException ( publicationName , String . format ( <str> , name ) ) ; } return this ; } @Override protected InvalidUserDataException failure ( String message ) { throw new InvalidIvyPublicationException ( publicationName , message ) ; } } } 

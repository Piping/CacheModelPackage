package org . gradle . gradleplugin . userinterface . swing . generic ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . userinterface . AlternateUIInteraction ; import org . gradle . gradleplugin . userinterface . swing . generic . tabs . GradleTab ; import javax . swing . * ; import java . awt . * ; import java . io . File ; public abstract class AbstractGradleUIInstance implements BasicGradleUI { protected MainGradlePanel gradlePanel ; protected GradlePluginLord gradlePluginLord ; protected SettingsNode settings ; protected AlternateUIInteraction alternateUIInteraction ; protected JPanel mainPanel ; public AbstractGradleUIInstance ( ) { gradlePluginLord = new GradlePluginLord ( ) ; } public void initialize ( SettingsNode settings , AlternateUIInteraction alternateUIInteraction ) { this . settings = settings ; this . alternateUIInteraction = alternateUIInteraction ; setupUI ( ) ; } public JComponent getComponent ( ) { return mainPanel ; } protected void setupUI ( ) { mainPanel = new JPanel ( new BorderLayout ( ) ) ; mainPanel . add ( createMainGradlePanel ( ) , BorderLayout . CENTER ) ; } protected Component createMainGradlePanel ( ) { gradlePanel = new MainGradlePanel ( gradlePluginLord , getOutputUILord ( ) , settings , alternateUIInteraction ) ; return gradlePanel ; } public abstract OutputUILord getOutputUILord ( ) ; public void aboutToShow ( ) { gradlePanel . aboutToShow ( ) ; } public boolean canClose ( CloseInteraction closeInteraction ) { if ( ! gradlePluginLord . isBusy ( ) ) { return true ; } return closeInteraction . promptUserToConfirmClosingWhileBusy ( ) ; } public void close ( ) { gradlePanel . aboutToClose ( ) ; } public File getCurrentDirectory ( ) { return gradlePluginLord . getCurrentDirectory ( ) ; } public void setCurrentDirectory ( File currentDirectory ) { gradlePluginLord . setCurrentDirectory ( currentDirectory ) ; } public void addGradleTab ( int index , GradleTab gradleTab ) { gradlePanel . addGradleTab ( index , gradleTab ) ; } public void removeGradleTab ( GradleTab gradleTab ) { gradlePanel . removeGradleTab ( gradleTab ) ; } public int getGradleTabCount ( ) { return gradlePanel . getGradleTabCount ( ) ; } public String getGradleTabName ( int index ) { return gradlePanel . getGradleTabName ( index ) ; } public GradlePluginLord getGradlePluginLord ( ) { return gradlePluginLord ; } public int getGradleTabIndex ( String name ) { return gradlePanel . getGradleTabIndex ( name ) ; } public int getCurrentGradleTab ( ) { return gradlePanel . getCurrentGradleTab ( ) ; } public void setCurrentGradleTab ( int index ) { gradlePanel . setCurrentGradleTab ( index ) ; } public void executeCommand ( String commandLineArguments , String displayName ) { gradlePluginLord . addExecutionRequestToQueue ( commandLineArguments , displayName ) ; } public void refreshTaskTree ( ) { gradlePluginLord . addRefreshRequestToQueue ( ) ; } public void refreshTaskTree ( String additionalCommandLineArguments ) { gradlePluginLord . addRefreshRequestToQueue ( additionalCommandLineArguments ) ; } public boolean isBusy ( ) { return gradlePluginLord . isBusy ( ) ; } public void setCustomPanelToSetupTab ( JComponent component ) { gradlePanel . setCustomPanelToSetupTab ( component ) ; } public void setOutputTextFont ( Font font ) { getOutputUILord ( ) . setOutputTextFont ( font ) ; } } 

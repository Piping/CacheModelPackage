package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . math . BigInteger ; import org . eclipse . debug . core . model . MemoryByte ; import org . eclipse . debug . internal . ui . memory . provisional . AbstractAsyncTextRendering ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . util . PropertyChangeEvent ; public class ASCIIRendering extends AbstractAsyncTextRendering { private final int numCharsPerByte = <int> ; public ASCIIRendering ( String renderingId ) { super ( renderingId ) ; String codepage = DebugUITools . getPreferenceStore ( ) . getString ( IDebugUIConstants . PREF_DEFAULT_ASCII_CODE_PAGE ) ; setCodePage ( codepage ) ; } @Override public void dispose ( ) { super . dispose ( ) ; } @Override public int getNumCharsPerByte ( ) { return numCharsPerByte ; } @Override public byte [ ] getBytes ( String renderingId , BigInteger address , MemoryByte [ ] currentValues , String data ) { byte [ ] bytes = super . getBytes ( renderingId , address , currentValues , data ) ; for ( int i = <int> ; i < bytes . length & & i < currentValues . length ; i + + ) { if ( bytes [ i ] = = <int> & & currentValues [ i ] . getValue ( ) = = <int> ) { bytes [ i ] = <int> ; } } return bytes ; } @Override public String getString ( String renderingId , BigInteger address , MemoryByte [ ] data ) { MemoryByte [ ] copy = new MemoryByte [ data . length ] ; for ( int i = <int> ; i < data . length ; i + + ) { copy [ i ] = new MemoryByte ( ) ; if ( data [ i ] . getValue ( ) = = <int> ) { copy [ i ] . setValue ( ( byte ) <int> ) ; } else { copy [ i ] . setValue ( data [ i ] . getValue ( ) ) ; } copy [ i ] . setFlags ( data [ i ] . getFlags ( ) ) ; } return super . getString ( renderingId , address , copy ) ; } @Override public void propertyChange ( PropertyChangeEvent event ) { if ( event . getProperty ( ) . equals ( IDebugUIConstants . PREF_DEFAULT_ASCII_CODE_PAGE ) ) { String codePage = ( String ) event . getNewValue ( ) ; setCodePage ( codePage ) ; if ( isVisible ( ) ) updateLabels ( ) ; } super . propertyChange ( event ) ; } } 

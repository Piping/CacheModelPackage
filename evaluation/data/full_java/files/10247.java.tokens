package com . google . common . base ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Equivalence . Wrapper ; import com . google . common . collect . ImmutableList ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . EquivalenceTester ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; @GwtCompatible ( emulated = true ) public class EquivalenceTest extends TestCase { @SuppressWarnings ( <str> ) public void testPairwiseEquivalent ( ) { EquivalenceTester . of ( Equivalence . equals ( ) . < String > pairwise ( ) ) . addEquivalenceGroup ( ImmutableList . < String > of ( ) ) . addEquivalenceGroup ( ImmutableList . of ( <str> ) ) . addEquivalenceGroup ( ImmutableList . of ( <str> ) ) . addEquivalenceGroup ( ImmutableList . of ( <str> , <str> ) , ImmutableList . of ( <str> , <str> ) ) . test ( ) ; } public void testPairwiseEquivalent_equals ( ) { new EqualsTester ( ) . addEqualityGroup ( Equivalence . equals ( ) . pairwise ( ) , Equivalence . equals ( ) . pairwise ( ) ) . addEqualityGroup ( Equivalence . identity ( ) . pairwise ( ) ) . testEquals ( ) ; } private enum LengthFunction implements Function < String , Integer > { INSTANCE ; @Override public Integer apply ( String input ) { return input . length ( ) ; } } private static final Equivalence < String > LENGTH_EQUIVALENCE = Equivalence . equals ( ) . onResultOf ( LengthFunction . INSTANCE ) ; public void testWrap ( ) { new EqualsTester ( ) . addEqualityGroup ( LENGTH_EQUIVALENCE . wrap ( <str> ) , LENGTH_EQUIVALENCE . wrap ( <str> ) , LENGTH_EQUIVALENCE . wrap ( <str> ) ) . addEqualityGroup ( LENGTH_EQUIVALENCE . wrap ( <str> ) , LENGTH_EQUIVALENCE . wrap ( <str> ) ) . addEqualityGroup ( LENGTH_EQUIVALENCE . wrap ( null ) , LENGTH_EQUIVALENCE . wrap ( null ) ) . addEqualityGroup ( Equivalence . equals ( ) . wrap ( <str> ) ) . addEqualityGroup ( Equivalence . equals ( ) . wrap ( null ) ) . testEquals ( ) ; } public void testWrap_get ( ) { String test = <str> ; Wrapper < String > wrapper = LENGTH_EQUIVALENCE . wrap ( test ) ; assertSame ( test , wrapper . get ( ) ) ; } @GwtIncompatible ( <str> ) public void testSerialization ( ) { SerializableTester . reserializeAndAssert ( LENGTH_EQUIVALENCE . wrap ( <str> ) ) ; SerializableTester . reserializeAndAssert ( Equivalence . equals ( ) ) ; SerializableTester . reserializeAndAssert ( Equivalence . identity ( ) ) ; } private static class IntValue { private final int value ; IntValue ( int value ) { this . value = value ; } @Override public String toString ( ) { return <str> + value ; } } public void testOnResultOf ( ) { EquivalenceTester . of ( Equivalence . equals ( ) . onResultOf ( Functions . toStringFunction ( ) ) ) . addEquivalenceGroup ( new IntValue ( <int> ) , new IntValue ( <int> ) ) . addEquivalenceGroup ( new IntValue ( <int> ) ) . test ( ) ; } public void testOnResultOf_equals ( ) { new EqualsTester ( ) . addEqualityGroup ( Equivalence . identity ( ) . onResultOf ( Functions . toStringFunction ( ) ) , Equivalence . identity ( ) . onResultOf ( Functions . toStringFunction ( ) ) ) . addEqualityGroup ( Equivalence . equals ( ) . onResultOf ( Functions . toStringFunction ( ) ) ) . addEqualityGroup ( Equivalence . identity ( ) . onResultOf ( Functions . identity ( ) ) ) . testEquals ( ) ; } public void testEquivalentTo ( ) { Predicate < Object > equalTo1 = Equivalence . equals ( ) . equivalentTo ( <str> ) ; assertTrue ( equalTo1 . apply ( <str> ) ) ; assertFalse ( equalTo1 . apply ( <str> ) ) ; assertFalse ( equalTo1 . apply ( null ) ) ; Predicate < Object > isNull = Equivalence . equals ( ) . equivalentTo ( null ) ; assertFalse ( isNull . apply ( <str> ) ) ; assertFalse ( isNull . apply ( <str> ) ) ; assertTrue ( isNull . apply ( null ) ) ; new EqualsTester ( ) . addEqualityGroup ( equalTo1 , Equivalence . equals ( ) . equivalentTo ( <str> ) ) . addEqualityGroup ( isNull ) . addEqualityGroup ( Equivalence . identity ( ) . equivalentTo ( <str> ) ) . testEquals ( ) ; } public void testEqualsEquivalent ( ) { EquivalenceTester . of ( Equivalence . equals ( ) ) . addEquivalenceGroup ( new Integer ( <int> ) , <int> ) . addEquivalenceGroup ( <str> ) . test ( ) ; } public void testIdentityEquivalent ( ) { EquivalenceTester . of ( Equivalence . identity ( ) ) . addEquivalenceGroup ( new Integer ( <int> ) ) . addEquivalenceGroup ( new Integer ( <int> ) ) . addEquivalenceGroup ( <str> ) . test ( ) ; } public void testEquals ( ) { new EqualsTester ( ) . addEqualityGroup ( Equivalence . equals ( ) , Equivalence . equals ( ) ) . addEqualityGroup ( Equivalence . identity ( ) , Equivalence . identity ( ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Equivalence . class ) ; new NullPointerTester ( ) . testAllPublicInstanceMethods ( Equivalence . equals ( ) ) ; new NullPointerTester ( ) . testAllPublicInstanceMethods ( Equivalence . identity ( ) ) ; } } 

package com . google . common . collect ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . AnEnum ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . google . MultisetFeature ; import com . google . common . collect . testing . google . MultisetTestSuiteBuilder ; import com . google . common . collect . testing . google . TestEnumMultisetGenerator ; import com . google . common . testing . ClassSanityTester ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . Collection ; import java . util . EnumSet ; import java . util . Set ; @GwtCompatible ( emulated = true ) public class EnumMultisetTest extends TestCase { @GwtIncompatible ( <str> ) public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTest ( MultisetTestSuiteBuilder . using ( enumMultisetGenerator ( ) ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , CollectionFeature . GENERAL_PURPOSE , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , CollectionFeature . ALLOWS_NULL_QUERIES , MultisetFeature . ENTRIES_ARE_VIEWS ) . named ( <str> ) . createTestSuite ( ) ) ; suite . addTestSuite ( EnumMultisetTest . class ) ; return suite ; } private static TestEnumMultisetGenerator enumMultisetGenerator ( ) { return new TestEnumMultisetGenerator ( ) { @Override protected Multiset < AnEnum > create ( AnEnum [ ] elements ) { return ( elements . length = = <int> ) ? EnumMultiset . create ( AnEnum . class ) : EnumMultiset . create ( asList ( elements ) ) ; } } ; } private enum Color { BLUE , RED , YELLOW , GREEN , WHITE } private enum Gender { MALE , FEMALE } public void testClassCreate ( ) { Multiset < Color > ms = EnumMultiset . create ( Color . class ) ; ms . add ( Color . RED ) ; ms . add ( Color . YELLOW ) ; ms . add ( Color . RED ) ; assertEquals ( <int> , ms . count ( Color . BLUE ) ) ; assertEquals ( <int> , ms . count ( Color . YELLOW ) ) ; assertEquals ( <int> , ms . count ( Color . RED ) ) ; } public void testCollectionCreate ( ) { Multiset < Color > ms = EnumMultiset . create ( asList ( Color . RED , Color . YELLOW , Color . RED ) ) ; assertEquals ( <int> , ms . count ( Color . BLUE ) ) ; assertEquals ( <int> , ms . count ( Color . YELLOW ) ) ; assertEquals ( <int> , ms . count ( Color . RED ) ) ; } public void testIllegalCreate ( ) { Collection < Color > empty = EnumSet . noneOf ( Color . class ) ; try { EnumMultiset . create ( empty ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreateEmptyWithClass ( ) { Multiset < Color > ms = EnumMultiset . create ( ImmutableList . < Color > of ( ) , Color . class ) ; ms . add ( Color . RED ) ; } public void testCreateEmptyWithoutClassFails ( ) { try { EnumMultiset . create ( ImmutableList . < Color > of ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } public void testToString ( ) { Multiset < Color > ms = EnumMultiset . create ( Color . class ) ; ms . add ( Color . BLUE , <int> ) ; ms . add ( Color . YELLOW , <int> ) ; ms . add ( Color . RED , <int> ) ; assertEquals ( <str> , ms . toString ( ) ) ; } @GwtIncompatible ( <str> ) public void testSerializable ( ) { Multiset < Color > ms = EnumMultiset . create ( asList ( Color . RED , Color . YELLOW , Color . RED ) ) ; assertEquals ( ms , SerializableTester . reserialize ( ms ) ) ; } public void testEntrySet ( ) { Multiset < Color > ms = EnumMultiset . create ( Color . class ) ; ms . add ( Color . BLUE , <int> ) ; ms . add ( Color . YELLOW , <int> ) ; ms . add ( Color . RED , <int> ) ; Set < Object > uniqueEntries = Sets . newIdentityHashSet ( ) ; uniqueEntries . addAll ( ms . entrySet ( ) ) ; assertEquals ( <int> , uniqueEntries . size ( ) ) ; } private static class EnumMultisetFactory { public static < E extends Enum < E > > EnumMultiset < E > create ( Iterable < E > elements ) { return EnumMultiset . create ( elements ) ; } } @GwtIncompatible ( <str> ) public void testEquals ( ) throws Exception { new ClassSanityTester ( ) . setDistinctValues ( Class . class , Color . class , Gender . class ) . setDistinctValues ( Enum . class , Color . BLUE , Color . RED ) . forAllPublicStaticMethods ( EnumMultisetFactory . class ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) throws Exception { new NullPointerTester ( ) . setDefault ( Class . class , Color . class ) . setDefault ( Iterable . class , EnumSet . allOf ( Color . class ) ) . testAllPublicStaticMethods ( EnumMultiset . class ) ; } } 

package junit . framework ; public class ComparisonCompactor { private static final String ELLIPSIS = <str> ; private static final String DELTA_END = <str> ; private static final String DELTA_START = <str> ; private int fContextLength ; private String fExpected ; private String fActual ; private int fPrefix ; private int fSuffix ; public ComparisonCompactor ( int contextLength , String expected , String actual ) { fContextLength = contextLength ; fExpected = expected ; fActual = actual ; } @SuppressWarnings ( <str> ) public String compact ( String message ) { if ( fExpected = = null | | fActual = = null | | areStringsEqual ( ) ) { return Assert . format ( message , fExpected , fActual ) ; } findCommonPrefix ( ) ; findCommonSuffix ( ) ; String expected = compactString ( fExpected ) ; String actual = compactString ( fActual ) ; return Assert . format ( message , expected , actual ) ; } private String compactString ( String source ) { String result = DELTA_START + source . substring ( fPrefix , source . length ( ) - fSuffix + <int> ) + DELTA_END ; if ( fPrefix > <int> ) { result = computeCommonPrefix ( ) + result ; } if ( fSuffix > <int> ) { result = result + computeCommonSuffix ( ) ; } return result ; } private void findCommonPrefix ( ) { fPrefix = <int> ; int end = Math . min ( fExpected . length ( ) , fActual . length ( ) ) ; for ( ; fPrefix < end ; fPrefix + + ) { if ( fExpected . charAt ( fPrefix ) ! = fActual . charAt ( fPrefix ) ) { break ; } } } private void findCommonSuffix ( ) { int expectedSuffix = fExpected . length ( ) - <int> ; int actualSuffix = fActual . length ( ) - <int> ; for ( ; actualSuffix > = fPrefix & & expectedSuffix > = fPrefix ; actualSuffix - - , expectedSuffix - - ) { if ( fExpected . charAt ( expectedSuffix ) ! = fActual . charAt ( actualSuffix ) ) { break ; } } fSuffix = fExpected . length ( ) - expectedSuffix ; } private String computeCommonPrefix ( ) { return ( fPrefix > fContextLength ? ELLIPSIS : <str> ) + fExpected . substring ( Math . max ( <int> , fPrefix - fContextLength ) , fPrefix ) ; } private String computeCommonSuffix ( ) { int end = Math . min ( fExpected . length ( ) - fSuffix + <int> + fContextLength , fExpected . length ( ) ) ; return fExpected . substring ( fExpected . length ( ) - fSuffix + <int> , end ) + ( fExpected . length ( ) - fSuffix + <int> < fExpected . length ( ) - fContextLength ? ELLIPSIS : <str> ) ; } private boolean areStringsEqual ( ) { return fExpected . equals ( fActual ) ; } } 

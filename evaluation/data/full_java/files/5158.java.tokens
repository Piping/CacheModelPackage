package org . elasticsearch . action . admin . indices . open ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . DestructiveOperations ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . ack . ClusterStateUpdateResponse ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MetaDataIndexStateService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . node . settings . NodeSettingsService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import java . util . Arrays ; public class TransportOpenIndexAction extends TransportMasterNodeAction < OpenIndexRequest , OpenIndexResponse > { private final MetaDataIndexStateService indexStateService ; private final DestructiveOperations destructiveOperations ; @Inject public TransportOpenIndexAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , MetaDataIndexStateService indexStateService , NodeSettingsService nodeSettingsService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver , DestructiveOperations destructiveOperations ) { super ( settings , OpenIndexAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , OpenIndexRequest : : new ) ; this . indexStateService = indexStateService ; this . destructiveOperations = destructiveOperations ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected OpenIndexResponse newResponse ( ) { return new OpenIndexResponse ( ) ; } @Override protected void doExecute ( OpenIndexRequest request , ActionListener < OpenIndexResponse > listener ) { destructiveOperations . failDestructive ( request . indices ( ) ) ; super . doExecute ( request , listener ) ; } @Override protected ClusterBlockException checkBlock ( OpenIndexRequest request , ClusterState state ) { return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_WRITE , indexNameExpressionResolver . concreteIndices ( state , request ) ) ; } @Override protected void masterOperation ( final OpenIndexRequest request , final ClusterState state , final ActionListener < OpenIndexResponse > listener ) { final String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( state , request ) ; OpenIndexClusterStateUpdateRequest updateRequest = new OpenIndexClusterStateUpdateRequest ( ) . ackTimeout ( request . timeout ( ) ) . masterNodeTimeout ( request . masterNodeTimeout ( ) ) . indices ( concreteIndices ) ; indexStateService . openIndex ( updateRequest , new ActionListener < ClusterStateUpdateResponse > ( ) { @Override public void onResponse ( ClusterStateUpdateResponse response ) { listener . onResponse ( new OpenIndexResponse ( response . isAcknowledged ( ) ) ) ; } @Override public void onFailure ( Throwable t ) { logger . debug ( <str> , t , ( Object ) concreteIndices ) ; listener . onFailure ( t ) ; } } ) ; } } 

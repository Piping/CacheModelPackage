package com . badlogic . gdx . backends . gwt . widgets ; import com . google . gwt . user . client . DOM ; import com . google . gwt . user . client . Element ; import com . google . gwt . user . client . ui . Widget ; public class ProgressBar extends Widget implements ResizableWidget { private static final String DEFAULT_TEXT_CLASS_NAME = <str> ; private String textClassName = DEFAULT_TEXT_CLASS_NAME ; private String textFirstHalfClassName = DEFAULT_TEXT_CLASS_NAME + <str> ; private String textSecondHalfClassName = DEFAULT_TEXT_CLASS_NAME + <str> ; public abstract static class TextFormatter { protected abstract String getText ( ProgressBar bar , double curProgress ) ; } private Element barElement ; private double curProgress ; private double maxProgress ; private double minProgress ; private boolean textVisible = true ; private Element textElement ; private TextFormatter textFormatter ; public ProgressBar ( ) { this ( <float> , <float> , <float> ) ; } public ProgressBar ( double curProgress ) { this ( <float> , <float> , curProgress ) ; } public ProgressBar ( double minProgress , double maxProgress ) { this ( minProgress , maxProgress , <float> ) ; } public ProgressBar ( double minProgress , double maxProgress , double curProgress ) { this ( minProgress , maxProgress , curProgress , null ) ; } public ProgressBar ( double minProgress , double maxProgress , double curProgress , TextFormatter textFormatter ) { this . minProgress = minProgress ; this . maxProgress = maxProgress ; this . curProgress = curProgress ; setTextFormatter ( textFormatter ) ; setElement ( DOM . createDiv ( ) ) ; DOM . setStyleAttribute ( getElement ( ) , <str> , <str> ) ; setStyleName ( <str> ) ; barElement = DOM . createDiv ( ) ; DOM . appendChild ( getElement ( ) , barElement ) ; DOM . setStyleAttribute ( barElement , <str> , <str> ) ; setBarStyleName ( <str> ) ; textElement = DOM . createDiv ( ) ; DOM . appendChild ( getElement ( ) , textElement ) ; DOM . setStyleAttribute ( textElement , <str> , <str> ) ; DOM . setStyleAttribute ( textElement , <str> , <str> ) ; setProgress ( curProgress ) ; } public double getMaxProgress ( ) { return maxProgress ; } public double getMinProgress ( ) { return minProgress ; } public double getPercent ( ) { if ( maxProgress < = minProgress ) { return <float> ; } double percent = ( curProgress - minProgress ) / ( maxProgress - minProgress ) ; return Math . max ( <float> , Math . min ( <float> , percent ) ) ; } public double getProgress ( ) { return curProgress ; } public TextFormatter getTextFormatter ( ) { return textFormatter ; } public boolean isTextVisible ( ) { return textVisible ; } public void onResize ( int width , int height ) { if ( textVisible ) { int textWidth = DOM . getElementPropertyInt ( textElement , <str> ) ; int left = ( width / <int> ) - ( textWidth / <int> ) ; DOM . setStyleAttribute ( textElement , <str> , left + <str> ) ; } } public void redraw ( ) { if ( isAttached ( ) ) { int width = DOM . getElementPropertyInt ( getElement ( ) , <str> ) ; int height = DOM . getElementPropertyInt ( getElement ( ) , <str> ) ; onResize ( width , height ) ; } } public void setBarStyleName ( String barClassName ) { DOM . setElementProperty ( barElement , <str> , barClassName ) ; } public void setMaxProgress ( double maxProgress ) { this . maxProgress = maxProgress ; curProgress = Math . min ( curProgress , maxProgress ) ; resetProgress ( ) ; } public void setMinProgress ( double minProgress ) { this . minProgress = minProgress ; curProgress = Math . max ( curProgress , minProgress ) ; resetProgress ( ) ; } public void setProgress ( double curProgress ) { this . curProgress = Math . max ( minProgress , Math . min ( maxProgress , curProgress ) ) ; int percent = ( int ) ( <int> * getPercent ( ) ) ; DOM . setStyleAttribute ( barElement , <str> , percent + <str> ) ; DOM . setElementProperty ( textElement , <str> , generateText ( curProgress ) ) ; updateTextStyle ( percent ) ; redraw ( ) ; } public void setTextFirstHalfStyleName ( String textFirstHalfClassName ) { this . textFirstHalfClassName = textFirstHalfClassName ; onTextStyleChange ( ) ; } public void setTextFormatter ( TextFormatter textFormatter ) { this . textFormatter = textFormatter ; } public void setTextSecondHalfStyleName ( String textSecondHalfClassName ) { this . textSecondHalfClassName = textSecondHalfClassName ; onTextStyleChange ( ) ; } public void setTextStyleName ( String textClassName ) { this . textClassName = textClassName ; onTextStyleChange ( ) ; } public void setTextVisible ( boolean textVisible ) { this . textVisible = textVisible ; if ( this . textVisible ) { DOM . setStyleAttribute ( textElement , <str> , <str> ) ; redraw ( ) ; } else { DOM . setStyleAttribute ( textElement , <str> , <str> ) ; } } protected String generateText ( double curProgress ) { if ( textFormatter ! = null ) { return textFormatter . getText ( this , curProgress ) ; } else { return ( int ) ( <int> * getPercent ( ) ) + <str> ; } } protected Element getBarElement ( ) { return barElement ; } protected Element getTextElement ( ) { return textElement ; } @Override protected void onLoad ( ) { DOM . setStyleAttribute ( getElement ( ) , <str> , <str> ) ; ResizableWidgetCollection . get ( ) . add ( this ) ; redraw ( ) ; } @Override protected void onUnload ( ) { ResizableWidgetCollection . get ( ) . remove ( this ) ; } protected void resetProgress ( ) { setProgress ( getProgress ( ) ) ; } private void onTextStyleChange ( ) { int percent = ( int ) ( <int> * getPercent ( ) ) ; updateTextStyle ( percent ) ; } private void updateTextStyle ( int percent ) { if ( percent < <int> ) { DOM . setElementProperty ( textElement , <str> , textClassName + <str> + textFirstHalfClassName ) ; } else { DOM . setElementProperty ( textElement , <str> , textClassName + <str> + textSecondHalfClassName ) ; } } } 

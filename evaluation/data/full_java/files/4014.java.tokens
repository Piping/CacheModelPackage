package org . eclipse . debug . internal . ui . actions ; import org . eclipse . core . expressions . PropertyTester ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationManager ; import org . eclipse . debug . ui . actions . ILaunchable ; public class LaunchablePropertyTester extends PropertyTester { @Override public boolean test ( Object receiver , String property , Object [ ] args , Object expectedValue ) { if ( <str> . equals ( property ) ) { if ( DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . launchModeAvailable ( ( String ) expectedValue ) ) { return Platform . getAdapterManager ( ) . hasAdapter ( receiver , ILaunchable . class . getName ( ) ) ; } } if ( <str> . equals ( property ) ) { if ( DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_USE_CONTEXTUAL_LAUNCH ) ) { IResource res = getResource ( receiver ) ; if ( res ! = null ) { return res . isAccessible ( ) & & getLaunchConfigurationManager ( ) . getLaunchShortcuts ( getResource ( receiver ) ) . size ( ) > <int> & & getLaunchConfigurationManager ( ) . isSharedConfig ( receiver ) = = null ; } return false ; } } return false ; } protected LaunchConfigurationManager getLaunchConfigurationManager ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; } protected IResource getResource ( Object element ) { IResource resource = null ; if ( element instanceof IResource ) { resource = ( IResource ) element ; } else if ( element instanceof IAdaptable ) { resource = ( ( IAdaptable ) element ) . getAdapter ( IResource . class ) ; } return resource ; } } 

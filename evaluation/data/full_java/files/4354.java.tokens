package org . eclipse . debug . internal . ui . stringsubstitution ; import java . util . HashMap ; import java . util . Map ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . Platform ; import org . eclipse . core . variables . IStringVariable ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . stringsubstitution . IArgumentSelector ; import com . ibm . icu . text . MessageFormat ; public class StringVariablePresentationManager { public static final String EXTENSION_POINT_STRING_VARIABLE_PRESENTATIONS = <str> ; private static StringVariablePresentationManager fgManager ; public static final String ATTR_NAME = <str> ; public static final String ATTR_ARGUMENT_SELECTOR = <str> ; private Map < String , IConfigurationElement > fConfigurations ; public static StringVariablePresentationManager getDefault ( ) { if ( fgManager = = null ) { fgManager = new StringVariablePresentationManager ( ) ; } return fgManager ; } public IArgumentSelector getArgumentSelector ( IStringVariable variable ) { IConfigurationElement element = fConfigurations . get ( variable . getName ( ) ) ; if ( element ! = null ) { try { return ( IArgumentSelector ) element . createExecutableExtension ( ATTR_ARGUMENT_SELECTOR ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } return null ; } private StringVariablePresentationManager ( ) { initialize ( ) ; } private void initialize ( ) { fConfigurations = new HashMap < String , IConfigurationElement > ( ) ; IExtensionPoint point = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , EXTENSION_POINT_STRING_VARIABLE_PRESENTATIONS ) ; IConfigurationElement elements [ ] = point . getConfigurationElements ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { IConfigurationElement element = elements [ i ] ; String name = element . getAttribute ( ATTR_NAME ) ; if ( name = = null ) { DebugUIPlugin . logErrorMessage ( MessageFormat . format ( <str> , new Object [ ] { element . getDeclaringExtension ( ) . getLabel ( ) } ) ) ; continue ; } fConfigurations . put ( name , element ) ; } } } 

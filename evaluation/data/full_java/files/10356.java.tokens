package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; @GwtCompatible ( emulated = true ) public class HashBasedTableTest extends AbstractTableTest { @Override protected Table < String , Integer , Character > create ( Object . . . data ) { Table < String , Integer , Character > table = HashBasedTable . create ( ) ; table . put ( <str> , <int> , <str> ) ; table . put ( <str> , <int> , <str> ) ; table . clear ( ) ; populate ( table , data ) ; return table ; } public void testCreateWithValidSizes ( ) { Table < String , Integer , Character > table1 = HashBasedTable . create ( <int> , <int> ) ; table1 . put ( <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , table1 . get ( <str> , <int> ) ) ; Table < String , Integer , Character > table2 = HashBasedTable . create ( <int> , <int> ) ; table2 . put ( <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , table2 . get ( <str> , <int> ) ) ; Table < String , Integer , Character > table3 = HashBasedTable . create ( <int> , <int> ) ; table3 . put ( <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , table3 . get ( <str> , <int> ) ) ; Table < String , Integer , Character > table4 = HashBasedTable . create ( <int> , <int> ) ; table4 . put ( <str> , <int> , <str> ) ; assertEquals ( ( Character ) <str> , table4 . get ( <str> , <int> ) ) ; } public void testCreateWithInvalidSizes ( ) { try { HashBasedTable . create ( <int> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { HashBasedTable . create ( - <int> , <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreateCopy ( ) { Table < String , Integer , Character > original = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; Table < String , Integer , Character > copy = HashBasedTable . create ( original ) ; assertEquals ( original , copy ) ; assertEquals ( ( Character ) <str> , copy . get ( <str> , <int> ) ) ; } @GwtIncompatible ( <str> ) public void testSerialization ( ) { table = create ( <str> , <int> , <str> , <str> , <int> , <str> , <str> , <int> , <str> ) ; SerializableTester . reserializeAndAssert ( table ) ; } @GwtIncompatible ( <str> ) public void testNullPointerStatic ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( HashBasedTable . class ) ; } } 

package io . netty . handler . codec . spdy ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufAllocator ; import io . netty . buffer . ByteBufUtil ; import io . netty . buffer . Unpooled ; import java . util . Set ; import static io . netty . handler . codec . spdy . SpdyCodecUtil . SPDY_MAX_NV_LENGTH ; public class SpdyHeaderBlockRawEncoder extends SpdyHeaderBlockEncoder { private final int version ; public SpdyHeaderBlockRawEncoder ( SpdyVersion version ) { if ( version = = null ) { throw new NullPointerException ( <str> ) ; } this . version = version . getVersion ( ) ; } private static void setLengthField ( ByteBuf buffer , int writerIndex , int length ) { buffer . setInt ( writerIndex , length ) ; } private static void writeLengthField ( ByteBuf buffer , int length ) { buffer . writeInt ( length ) ; } @Override public ByteBuf encode ( ByteBufAllocator alloc , SpdyHeadersFrame frame ) throws Exception { Set < CharSequence > names = frame . headers ( ) . names ( ) ; int numHeaders = names . size ( ) ; if ( numHeaders = = <int> ) { return Unpooled . EMPTY_BUFFER ; } if ( numHeaders > SPDY_MAX_NV_LENGTH ) { throw new IllegalArgumentException ( <str> ) ; } ByteBuf headerBlock = alloc . heapBuffer ( ) ; writeLengthField ( headerBlock , numHeaders ) ; for ( CharSequence name : names ) { writeLengthField ( headerBlock , name . length ( ) ) ; ByteBufUtil . writeAscii ( headerBlock , name ) ; int savedIndex = headerBlock . writerIndex ( ) ; int valueLength = <int> ; writeLengthField ( headerBlock , valueLength ) ; for ( CharSequence value : frame . headers ( ) . getAll ( name ) ) { int length = value . length ( ) ; if ( length > <int> ) { ByteBufUtil . writeAscii ( headerBlock , value ) ; headerBlock . writeByte ( <int> ) ; valueLength + = length + <int> ; } } if ( valueLength ! = <int> ) { valueLength - - ; } if ( valueLength > SPDY_MAX_NV_LENGTH ) { throw new IllegalArgumentException ( <str> + name ) ; } if ( valueLength > <int> ) { setLengthField ( headerBlock , savedIndex , valueLength ) ; headerBlock . writerIndex ( headerBlock . writerIndex ( ) - <int> ) ; } } return headerBlock ; } @Override void end ( ) { } } 

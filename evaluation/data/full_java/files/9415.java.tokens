package com . google . common . hash ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . base . Preconditions . checkState ; import java . io . Serializable ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . util . Arrays ; final class MessageDigestHashFunction extends AbstractStreamingHashFunction implements Serializable { private final MessageDigest prototype ; private final int bytes ; private final boolean supportsClone ; private final String toString ; MessageDigestHashFunction ( String algorithmName , String toString ) { this . prototype = getMessageDigest ( algorithmName ) ; this . bytes = prototype . getDigestLength ( ) ; this . toString = checkNotNull ( toString ) ; this . supportsClone = supportsClone ( ) ; } MessageDigestHashFunction ( String algorithmName , int bytes , String toString ) { this . toString = checkNotNull ( toString ) ; this . prototype = getMessageDigest ( algorithmName ) ; int maxLength = prototype . getDigestLength ( ) ; checkArgument ( bytes > = <int> & & bytes < = maxLength , <str> , bytes , maxLength ) ; this . bytes = bytes ; this . supportsClone = supportsClone ( ) ; } private boolean supportsClone ( ) { try { prototype . clone ( ) ; return true ; } catch ( CloneNotSupportedException e ) { return false ; } } @Override public int bits ( ) { return bytes * Byte . SIZE ; } @Override public String toString ( ) { return toString ; } private static MessageDigest getMessageDigest ( String algorithmName ) { try { return MessageDigest . getInstance ( algorithmName ) ; } catch ( NoSuchAlgorithmException e ) { throw new AssertionError ( e ) ; } } @Override public Hasher newHasher ( ) { if ( supportsClone ) { try { return new MessageDigestHasher ( ( MessageDigest ) prototype . clone ( ) , bytes ) ; } catch ( CloneNotSupportedException e ) { } } return new MessageDigestHasher ( getMessageDigest ( prototype . getAlgorithm ( ) ) , bytes ) ; } private static final class SerializedForm implements Serializable { private final String algorithmName ; private final int bytes ; private final String toString ; private SerializedForm ( String algorithmName , int bytes , String toString ) { this . algorithmName = algorithmName ; this . bytes = bytes ; this . toString = toString ; } private Object readResolve ( ) { return new MessageDigestHashFunction ( algorithmName , bytes , toString ) ; } private static final long serialVersionUID = <int> ; } Object writeReplace ( ) { return new SerializedForm ( prototype . getAlgorithm ( ) , bytes , toString ) ; } private static final class MessageDigestHasher extends AbstractByteHasher { private final MessageDigest digest ; private final int bytes ; private boolean done ; private MessageDigestHasher ( MessageDigest digest , int bytes ) { this . digest = digest ; this . bytes = bytes ; } @Override protected void update ( byte b ) { checkNotDone ( ) ; digest . update ( b ) ; } @Override protected void update ( byte [ ] b ) { checkNotDone ( ) ; digest . update ( b ) ; } @Override protected void update ( byte [ ] b , int off , int len ) { checkNotDone ( ) ; digest . update ( b , off , len ) ; } private void checkNotDone ( ) { checkState ( ! done , <str> ) ; } @Override public HashCode hash ( ) { checkNotDone ( ) ; done = true ; return ( bytes = = digest . getDigestLength ( ) ) ? HashCode . fromBytesNoCopy ( digest . digest ( ) ) : HashCode . fromBytesNoCopy ( Arrays . copyOf ( digest . digest ( ) , bytes ) ) ; } } } 

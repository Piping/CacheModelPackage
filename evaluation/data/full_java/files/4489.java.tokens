package org . eclipse . debug . internal . ui . views ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; import java . util . StringTokenizer ; import java . util . TreeSet ; import org . eclipse . core . commands . common . NotDefinedException ; import org . eclipse . core . commands . contexts . Context ; import org . eclipse . core . commands . contexts . ContextManagerEvent ; import org . eclipse . core . commands . contexts . IContextManagerListener ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . Platform ; import org . eclipse . core . runtime . preferences . IEclipsePreferences ; import org . eclipse . core . runtime . preferences . IEclipsePreferences . IPreferenceChangeListener ; import org . eclipse . core . runtime . preferences . IEclipsePreferences . PreferenceChangeEvent ; import org . eclipse . core . runtime . preferences . InstanceScope ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . contexts . DebugModelContextBindingManager ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . contexts . DebugContextEvent ; import org . eclipse . debug . ui . contexts . IDebugContextListener ; import org . eclipse . debug . ui . contexts . IDebugContextService ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . ui . IPerspectiveDescriptor ; import org . eclipse . ui . IPerspectiveListener4 ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . IViewReference ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchPartReference ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . PartInitException ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . console . IConsoleConstants ; import org . eclipse . ui . contexts . IContextService ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; public class ViewContextService implements IDebugContextListener , IPerspectiveListener4 , IPreferenceChangeListener , IContextManagerListener { private final Map < IPerspectiveDescriptor , String > fPerspectiveToActiveContext = new HashMap < IPerspectiveDescriptor , String > ( ) ; private final Map < IPerspectiveDescriptor , Set < String > > fPerspectiveToActivatedContexts = new HashMap < IPerspectiveDescriptor , Set < String > > ( ) ; private Map < String , DebugContextViewBindings > fContextIdsToBindings ; private Set < String > fEnabledPerspectives = new HashSet < String > ( ) ; private boolean fIgnoreChanges = false ; private IWorkbenchWindow fWindow ; private final IContextService fContextService ; private final IDebugContextService fDebugContextService ; private IPerspectiveDescriptor fActivePerspective ; public static final String DEBUG_CONTEXT = <str> ; private static final String ID_CONTEXT_VIEW_BINDINGS = <str> ; private static final String ELEM_CONTEXT_VIEW_BINDING = <str> ; private static final String ELEM_PERSPECTIVE = <str> ; private static final String ATTR_CONTEXT_ID = <str> ; private static final String ATTR_VIEW_ID = <str> ; private static final String ATTR_AUTO_OPEN = <str> ; private static final String ATTR_AUTO_CLOSE = <str> ; private static final String ATTR_PERSPECTIVE_ID = <str> ; private static final String XML_ELEMENT_VIEW_BINDINGS = <str> ; private static final String XML_ELEMENT_PERSPECTIVE = <str> ; private static final String XML_ELEMENT_VIEW = <str> ; private static final String XML_ATTR_ID = <str> ; private static final String XML_ATTR_USER_ACTION = <str> ; private static final String XML_VALUE_OPENED = <str> ; private static final String XML_VALUE_CLOSED = <str> ; private static Set < String > fgBaseDebugViewIds = null ; static { fgBaseDebugViewIds = new HashSet < String > ( ) ; fgBaseDebugViewIds . add ( IDebugUIConstants . ID_DEBUG_VIEW ) ; fgBaseDebugViewIds . add ( IDebugUIConstants . ID_VARIABLE_VIEW ) ; fgBaseDebugViewIds . add ( IDebugUIConstants . ID_BREAKPOINT_VIEW ) ; fgBaseDebugViewIds . add ( IConsoleConstants . ID_CONSOLE_VIEW ) ; } private static String [ ] EMPTY_IDS = new String [ <int> ] ; private class DebugContextViewBindings { private final String fId ; private String [ ] fViewBindingIds = EMPTY_IDS ; private String [ ] fAllViewBindingIds = null ; private final Map < String , ViewBinding > fAllViewIdToBindings = new HashMap < String , ViewBinding > ( ) ; private String [ ] fAllConetxtIds = null ; private String fParentId ; public DebugContextViewBindings ( String id ) { fId = id ; } public String getId ( ) { return fId ; } public void addBinding ( ViewBinding binding ) { String [ ] newBindings = new String [ fViewBindingIds . length + <int> ] ; System . arraycopy ( fViewBindingIds , <int> , newBindings , <int> , fViewBindingIds . length ) ; newBindings [ fViewBindingIds . length ] = binding . getViewId ( ) ; fAllViewIdToBindings . put ( binding . getViewId ( ) , binding ) ; fViewBindingIds = newBindings ; } protected void setParentId ( String id ) { fParentId = id ; } public DebugContextViewBindings getParentContext ( ) { if ( fParentId = = null ) { return null ; } return fContextIdsToBindings . get ( fParentId ) ; } public void activateChain ( IWorkbenchPage page , IPerspectiveDescriptor perspective , Set < String > allViewIds ) { initializeChain ( ) ; doActivation ( page , perspective , allViewIds , fAllConetxtIds ) ; } public String [ ] getAllViewBindingsIds ( ) { initializeChain ( ) ; return fAllViewBindingIds ; } private void doActivation ( IWorkbenchPage page , IPerspectiveDescriptor perspective , Set < String > allViewIds , String [ ] contextIds ) { for ( int i = <int> ; i < contextIds . length ; i + + ) { addActivated ( contextIds [ i ] ) ; } setActive ( perspective , getId ( ) ) ; for ( int i = <int> ; i < fAllViewBindingIds . length ; i + + ) { String viewId = fAllViewBindingIds [ i ] ; ViewBinding binding = fAllViewIdToBindings . get ( viewId ) ; binding . activated ( page , perspective ) ; binding . checkZOrder ( page , allViewIds ) ; } } private synchronized void initializeChain ( ) { if ( fAllViewBindingIds = = null ) { List < String > orderedIds = new ArrayList < String > ( ) ; List < DebugContextViewBindings > contexts = new ArrayList < DebugContextViewBindings > ( ) ; DebugContextViewBindings context = this ; while ( context ! = null ) { contexts . add ( <int> , context ) ; context = context . getParentContext ( ) ; } fAllConetxtIds = new String [ contexts . size ( ) ] ; int pos = <int> ; for ( DebugContextViewBindings bindings : contexts ) { fAllConetxtIds [ pos ] = bindings . getId ( ) ; pos + + ; for ( int i = <int> ; i < bindings . fViewBindingIds . length ; i + + ) { String viewId = bindings . fViewBindingIds [ i ] ; if ( bindings = = this ) { orderedIds . add ( viewId ) ; } if ( ! fAllViewIdToBindings . containsKey ( viewId ) ) { orderedIds . add ( viewId ) ; fAllViewIdToBindings . put ( viewId , bindings . fAllViewIdToBindings . get ( viewId ) ) ; } } } fAllViewBindingIds = orderedIds . toArray ( new String [ orderedIds . size ( ) ] ) ; } } public void deactivate ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { removeActivated ( getId ( ) ) ; if ( isActiveContext ( getId ( ) ) ) { setActive ( page . getPerspective ( ) , null ) ; } for ( int i = <int> ; i < fViewBindingIds . length ; i + + ) { String viewId = fViewBindingIds [ i ] ; ViewBinding binding = fAllViewIdToBindings . get ( viewId ) ; binding . deactivated ( page , perspective ) ; } } public void setViewOpened ( boolean opened , String viewId ) { initializeChain ( ) ; ViewBinding binding = fAllViewIdToBindings . get ( viewId ) ; if ( binding ! = null ) { if ( opened ) { binding . userOpened ( ) ; } else { binding . userClosed ( ) ; } } } public void applyUserSettings ( String viewId , Element viewElement ) { initializeChain ( ) ; ViewBinding binding = fAllViewIdToBindings . get ( viewId ) ; if ( binding ! = null ) { binding . applyUserSettings ( viewElement ) ; } } public void saveBindings ( Document document , Element root , Set < String > alreadyDone ) { for ( int i = <int> ; i < fViewBindingIds . length ; i + + ) { String viewId = fViewBindingIds [ i ] ; if ( ! alreadyDone . contains ( viewId ) ) { alreadyDone . add ( viewId ) ; ViewBinding binding = fAllViewIdToBindings . get ( viewId ) ; binding . saveBindings ( document , root ) ; } } } } private class ViewBinding { private final IConfigurationElement fElement ; private final Set < String > fUserOpened = new HashSet < String > ( ) ; private final Set < String > fUserClosed = new HashSet < String > ( ) ; private final Set < String > fAutoOpened = new HashSet < String > ( ) ; public ViewBinding ( IConfigurationElement element ) { fElement = element ; } public String getViewId ( ) { return fElement . getAttribute ( ATTR_VIEW_ID ) ; } public boolean isAutoOpen ( ) { String autoopen = fElement . getAttribute ( ATTR_AUTO_OPEN ) ; return autoopen = = null | | <str> . equals ( autoopen ) ; } public boolean isAutoClose ( ) { String autoclose = fElement . getAttribute ( ATTR_AUTO_CLOSE ) ; return autoclose = = null | | <str> . equals ( autoclose ) ; } public boolean isUserOpened ( IPerspectiveDescriptor perspective ) { return fUserOpened . contains ( perspective . getId ( ) ) ; } public boolean isUserClosed ( IPerspectiveDescriptor perspective ) { return fUserClosed . contains ( getActivePerspective ( ) . getId ( ) ) ; } public boolean isDefault ( IPerspectiveDescriptor perspective ) { String id = perspective . getId ( ) ; if ( IDebugUIConstants . ID_DEBUG_PERSPECTIVE . equals ( id ) ) { return fgBaseDebugViewIds . contains ( getViewId ( ) ) ; } return false ; } protected void userOpened ( ) { if ( isTrackingViews ( ) ) { String id = getActivePerspective ( ) . getId ( ) ; fAutoOpened . remove ( id ) ; fUserOpened . add ( id ) ; fUserClosed . remove ( id ) ; saveViewBindings ( ) ; } } protected void userClosed ( ) { if ( isTrackingViews ( ) ) { String id = getActivePerspective ( ) . getId ( ) ; fAutoOpened . remove ( id ) ; fUserClosed . add ( id ) ; fUserOpened . remove ( id ) ; saveViewBindings ( ) ; } } protected boolean isTrackingViews ( ) { return DebugUITools . getPreferenceStore ( ) . getBoolean ( IInternalDebugUIConstants . PREF_TRACK_VIEWS ) ; } public void activated ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { if ( ! isUserClosed ( perspective ) ) { if ( isAutoOpen ( ) ) { try { fIgnoreChanges = true ; if ( page . findViewReference ( getViewId ( ) ) = = null ) { fAutoOpened . add ( perspective . getId ( ) ) ; } page . showView ( getViewId ( ) , null , IWorkbenchPage . VIEW_CREATE ) ; } catch ( PartInitException e ) { DebugUIPlugin . log ( e ) ; } finally { fIgnoreChanges = false ; } } } } public void checkZOrder ( IWorkbenchPage page , Set < String > relevantViews ) { String viewId = getViewId ( ) ; IViewPart part = page . findView ( viewId ) ; if ( part ! = null ) { IViewPart [ ] viewStack = page . getViewStack ( part ) ; if ( viewStack ! = null & & viewStack . length > <int> ) { String top = viewStack [ <int> ] . getSite ( ) . getId ( ) ; if ( relevantViews . contains ( top ) ) { return ; } IViewReference partRef = page . findViewReference ( viewId ) ; if ( partRef . isFastView ( ) | | IWorkbenchPage . STATE_MINIMIZED = = page . getPartState ( partRef ) ) { return ; } try { fIgnoreChanges = true ; page . bringToTop ( part ) ; } finally { fIgnoreChanges = false ; } } } } public void deactivated ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { if ( ! isUserOpened ( perspective ) ) { if ( fAutoOpened . remove ( perspective . getId ( ) ) & & isAutoClose ( ) & & ! isDefault ( perspective ) ) { IViewReference reference = page . findViewReference ( getViewId ( ) ) ; if ( reference ! = null ) { try { fIgnoreChanges = true ; page . hideView ( reference ) ; } finally { fIgnoreChanges = false ; } } } } } public void saveBindings ( Document document , Element root ) { Element viewElement = document . createElement ( XML_ELEMENT_VIEW ) ; viewElement . setAttribute ( XML_ATTR_ID , getViewId ( ) ) ; appendPerspectives ( document , viewElement , fUserOpened , XML_VALUE_OPENED ) ; appendPerspectives ( document , viewElement , fUserClosed , XML_VALUE_CLOSED ) ; if ( viewElement . hasChildNodes ( ) ) { root . appendChild ( viewElement ) ; } } private void appendPerspectives ( Document document , Element parent , Set < String > perpectives , String xmlValue ) { String [ ] ids = perpectives . toArray ( new String [ perpectives . size ( ) ] ) ; for ( int i = <int> ; i < ids . length ; i + + ) { String id = ids [ i ] ; Element element = document . createElement ( XML_ELEMENT_PERSPECTIVE ) ; element . setAttribute ( XML_ATTR_ID , id ) ; element . setAttribute ( XML_ATTR_USER_ACTION , xmlValue ) ; parent . appendChild ( element ) ; } } public void applyUserSettings ( Element viewElement ) { NodeList list = viewElement . getChildNodes ( ) ; int length = list . getLength ( ) ; for ( int i = <int> ; i < length ; + + i ) { Node node = list . item ( i ) ; short type = node . getNodeType ( ) ; if ( type = = Node . ELEMENT_NODE ) { Element entry = ( Element ) node ; if ( entry . getNodeName ( ) . equalsIgnoreCase ( XML_ELEMENT_PERSPECTIVE ) ) { String id = entry . getAttribute ( XML_ATTR_ID ) ; String setting = entry . getAttribute ( XML_ATTR_USER_ACTION ) ; if ( id ! = null ) { if ( XML_VALUE_CLOSED . equals ( setting ) ) { fUserClosed . add ( id ) ; } else if ( XML_VALUE_OPENED . equals ( setting ) ) { fUserOpened . add ( id ) ; } } } } } } } private IDebugContextService getDebugContextService ( ) { return fDebugContextService ; } ViewContextService ( IWorkbenchWindow window ) { fWindow = window ; fContextService = PlatformUI . getWorkbench ( ) . getAdapter ( IContextService . class ) ; fDebugContextService = DebugUITools . getDebugContextManager ( ) . getContextService ( fWindow ) ; loadContextToViewExtensions ( ) ; applyUserViewBindings ( ) ; loadPerspectives ( ) ; window . addPerspectiveListener ( this ) ; getDebugContextService ( ) . addDebugContextListener ( this ) ; IEclipsePreferences node = InstanceScope . INSTANCE . getNode ( DebugUIPlugin . getUniqueIdentifier ( ) ) ; if ( node ! = null ) { node . addPreferenceChangeListener ( this ) ; } fContextService . addContextManagerListener ( this ) ; if ( fWindow ! = null ) { IWorkbenchPage page = fWindow . getActivePage ( ) ; if ( page ! = null ) { fActivePerspective = page . getPerspective ( ) ; } } } public void dispose ( ) { fWindow . removePerspectiveListener ( this ) ; fWindow = null ; getDebugContextService ( ) . removeDebugContextListener ( this ) ; IEclipsePreferences node = InstanceScope . INSTANCE . getNode ( DebugUIPlugin . getUniqueIdentifier ( ) ) ; if ( node ! = null ) { node . removePreferenceChangeListener ( this ) ; } fContextService . removeContextManagerListener ( this ) ; fActivePerspective = null ; } private void loadContextToViewExtensions ( ) { fContextIdsToBindings = new HashMap < String , DebugContextViewBindings > ( ) ; IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , ID_CONTEXT_VIEW_BINDINGS ) ; IConfigurationElement [ ] configurationElements = extensionPoint . getConfigurationElements ( ) ; for ( int i = <int> ; i < configurationElements . length ; i + + ) { IConfigurationElement element = configurationElements [ i ] ; if ( ELEM_CONTEXT_VIEW_BINDING . equals ( element . getName ( ) ) ) { String viewId = element . getAttribute ( ATTR_VIEW_ID ) ; String contextId = element . getAttribute ( ATTR_CONTEXT_ID ) ; if ( contextId = = null | | viewId = = null ) { continue ; } ViewBinding info = new ViewBinding ( element ) ; DebugContextViewBindings bindings = fContextIdsToBindings . get ( contextId ) ; if ( bindings = = null ) { bindings = new DebugContextViewBindings ( contextId ) ; fContextIdsToBindings . put ( contextId , bindings ) ; } bindings . addBinding ( info ) ; } } linkParentContexts ( ) ; } private void applyUserViewBindings ( ) { String xml = DebugUITools . getPreferenceStore ( ) . getString ( IInternalDebugUIConstants . PREF_USER_VIEW_BINDINGS ) ; if ( xml . length ( ) > <int> ) { try { Element root = DebugPlugin . parseDocument ( xml ) ; NodeList list = root . getChildNodes ( ) ; int length = list . getLength ( ) ; for ( int i = <int> ; i < length ; + + i ) { Node node = list . item ( i ) ; short type = node . getNodeType ( ) ; if ( type = = Node . ELEMENT_NODE ) { Element entry = ( Element ) node ; if ( entry . getNodeName ( ) . equalsIgnoreCase ( XML_ELEMENT_VIEW ) ) { String id = entry . getAttribute ( XML_ATTR_ID ) ; for ( DebugContextViewBindings binding : fContextIdsToBindings . values ( ) ) { binding . applyUserSettings ( id , entry ) ; } } } } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } } private void loadPerspectives ( ) { String preference = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( IDebugUIConstants . PREF_MANAGE_VIEW_PERSPECTIVES ) ; if ( IDebugUIConstants . PREF_MANAGE_VIEW_PERSPECTIVES_DEFAULT . equals ( preference ) ) { fEnabledPerspectives = getDefaultEnabledPerspectives ( ) ; } else { fEnabledPerspectives = parseList ( preference ) ; } } private boolean isEnabledPerspective ( ) { IPerspectiveDescriptor perspective = getActivePerspective ( ) ; if ( perspective ! = null ) { return fEnabledPerspectives . contains ( perspective . getId ( ) ) ; } return false ; } private IPerspectiveDescriptor getActivePerspective ( ) { if ( fWindow = = null ) { return null ; } return fActivePerspective ; } public static Set < String > parseList ( String listString ) { Set < String > list = new HashSet < String > ( <int> ) ; StringTokenizer tokenizer = new StringTokenizer ( listString , <str> ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; list . add ( token ) ; } return list ; } public static Set < String > getDefaultEnabledPerspectives ( ) { Set < String > perspectives = new HashSet < String > ( <int> ) ; IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , ID_CONTEXT_VIEW_BINDINGS ) ; IConfigurationElement [ ] configurationElements = extensionPoint . getConfigurationElements ( ) ; for ( int i = <int> ; i < configurationElements . length ; i + + ) { IConfigurationElement element = configurationElements [ i ] ; if ( ELEM_PERSPECTIVE . equals ( element . getName ( ) ) ) { String perspectiveId = element . getAttribute ( ATTR_PERSPECTIVE_ID ) ; if ( perspectiveId ! = null ) { perspectives . add ( perspectiveId ) ; } } } return perspectives ; } public void contextActivated ( ISelection selection ) { if ( isEnabledPerspective ( ) ) { if ( selection instanceof IStructuredSelection & & ! selection . isEmpty ( ) ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; Iterator < ? > iterator = ss . iterator ( ) ; while ( iterator . hasNext ( ) ) { Object target = iterator . next ( ) ; ILaunch launch = DebugModelContextBindingManager . getLaunch ( target ) ; if ( launch ! = null & & ! launch . isTerminated ( ) ) { ILaunchConfiguration launchConfiguration = launch . getLaunchConfiguration ( ) ; if ( launchConfiguration ! = null ) { try { ILaunchConfigurationType type = launchConfiguration . getType ( ) ; if ( fContextService . getActiveContextIds ( ) . contains ( type . getIdentifier ( ) + <str> + getActivePerspective ( ) . getId ( ) ) ) { List < String > workbenchContexts = DebugModelContextBindingManager . getDefault ( ) . getWorkbenchContextsForDebugContext ( target ) ; if ( ! workbenchContexts . isEmpty ( ) ) { boolean needToActivate = false ; for ( int i = <int> ; i < workbenchContexts . size ( ) ; i + + ) { if ( ! isActivated ( workbenchContexts . get ( i ) ) ) { needToActivate = true ; break ; } } if ( needToActivate ) { Set < String > allViewIds = getAllContextsViewIDs ( workbenchContexts ) ; for ( int i = <int> ; i < workbenchContexts . size ( ) ; i + + ) { String contextId = workbenchContexts . get ( i ) ; if ( ! isActivated ( contextId ) ) { activateChain ( contextId , getActivePerspective ( ) , allViewIds ) ; } } } } } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } } } } } } private boolean isActiveContext ( String contextId ) { IPerspectiveDescriptor activePerspective = getActivePerspective ( ) ; if ( activePerspective ! = null ) { String activeId = fPerspectiveToActiveContext . get ( activePerspective ) ; return contextId . equals ( activeId ) ; } return false ; } private boolean isActivated ( String contextId ) { IPerspectiveDescriptor activePerspective = getActivePerspective ( ) ; if ( activePerspective ! = null ) { Set < String > contexts = fPerspectiveToActivatedContexts . get ( activePerspective ) ; if ( contexts ! = null ) { return contexts . contains ( contextId ) ; } } return false ; } private void addActivated ( String contextId ) { IPerspectiveDescriptor activePerspective = getActivePerspective ( ) ; if ( activePerspective ! = null ) { Set < String > contexts = fPerspectiveToActivatedContexts . get ( activePerspective ) ; if ( contexts = = null ) { contexts = new HashSet < String > ( ) ; fPerspectiveToActivatedContexts . put ( activePerspective , contexts ) ; } contexts . add ( contextId ) ; } } private void removeActivated ( String contextId ) { IPerspectiveDescriptor activePerspective = getActivePerspective ( ) ; if ( activePerspective ! = null ) { Set < String > contexts = fPerspectiveToActivatedContexts . get ( activePerspective ) ; if ( contexts ! = null ) { contexts . remove ( contextId ) ; } } } @Override public void debugContextChanged ( DebugContextEvent event ) { if ( ( event . getFlags ( ) & DebugContextEvent . ACTIVATED ) > <int> ) { contextActivated ( event . getContext ( ) ) ; } } @Override public void perspectiveOpened ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { } @Override public void perspectiveClosed ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { } @Override public void perspectiveDeactivated ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { } private void clean ( IPerspectiveDescriptor perspective ) { Set < String > contexts = fPerspectiveToActivatedContexts . remove ( perspective ) ; fPerspectiveToActiveContext . remove ( perspective ) ; if ( contexts ! = null ) { for ( String id : contexts ) { deactivate ( id , perspective ) ; } } } @Override public void perspectiveSavedAs ( IWorkbenchPage page , IPerspectiveDescriptor oldPerspective , IPerspectiveDescriptor newPerspective ) { } @Override public void perspectiveChanged ( IWorkbenchPage page , IPerspectiveDescriptor perspective , IWorkbenchPartReference partRef , String changeId ) { if ( ! fIgnoreChanges & & page . getWorkbenchWindow ( ) . equals ( fWindow ) ) { if ( partRef ! = null ) { if ( IWorkbenchPage . CHANGE_VIEW_SHOW = = changeId | | IWorkbenchPage . CHANGE_VIEW_HIDE = = changeId ) { Set < String > activatedContexts = fPerspectiveToActivatedContexts . get ( perspective ) ; if ( activatedContexts ! = null ) { for ( String id : activatedContexts ) { DebugContextViewBindings bindings = fContextIdsToBindings . get ( id ) ; if ( bindings ! = null ) { bindings . setViewOpened ( IWorkbenchPage . CHANGE_VIEW_SHOW = = changeId , partRef . getId ( ) ) ; } } } } } } } @Override public void perspectiveActivated ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { if ( page . getWorkbenchWindow ( ) . equals ( fWindow ) ) { fActivePerspective = perspective ; ISelection activeContext = getDebugContextService ( ) . getActiveContext ( ) ; if ( activeContext ! = null ) { contextActivated ( activeContext ) ; } } } @Override public void perspectiveChanged ( IWorkbenchPage page , IPerspectiveDescriptor perspective , String changeId ) { } private void activateChain ( String contextId , IPerspectiveDescriptor perspective , Set < String > allViewIds ) { if ( fWindow = = null ) { return ; } IWorkbenchPage page = fWindow . getActivePage ( ) ; if ( page ! = null ) { DebugContextViewBindings bindings = fContextIdsToBindings . get ( contextId ) ; if ( bindings ! = null ) { bindings . activateChain ( page , perspective , allViewIds ) ; } } } private Set < String > getAllContextsViewIDs ( List < String > contextsIds ) { if ( fWindow = = null ) { return Collections . EMPTY_SET ; } TreeSet < String > viewIds = new TreeSet < String > ( ) ; for ( int i = <int> ; i < contextsIds . size ( ) ; i + + ) { DebugContextViewBindings bindings = fContextIdsToBindings . get ( contextsIds . get ( i ) ) ; if ( bindings ! = null ) { String [ ] bindingViewIds = bindings . getAllViewBindingsIds ( ) ; for ( int j = <int> ; j < bindingViewIds . length ; j + + ) { viewIds . add ( bindingViewIds [ j ] ) ; } } } return viewIds ; } private void linkParentContexts ( ) { for ( Entry < String , DebugContextViewBindings > entry : fContextIdsToBindings . entrySet ( ) ) { DebugContextViewBindings bindings = entry . getValue ( ) ; if ( ! bindings . getId ( ) . equals ( DEBUG_CONTEXT ) ) { Context context = fContextService . getContext ( entry . getKey ( ) ) ; try { bindings . setParentId ( context . getParentId ( ) ) ; } catch ( NotDefinedException e ) { DebugUIPlugin . log ( e ) ; } } } } private void setActive ( IPerspectiveDescriptor perspective , String contextId ) { if ( contextId = = null ) { fPerspectiveToActiveContext . remove ( perspective ) ; } else { fPerspectiveToActiveContext . put ( perspective , contextId ) ; } } @Override public void contextManagerChanged ( ContextManagerEvent event ) { if ( event . isActiveContextsChanged ( ) & & getActivePerspective ( ) ! = null ) { Set < String > disabledContexts = getDisabledContexts ( event ) ; if ( ! disabledContexts . isEmpty ( ) ) { for ( String contextId : disabledContexts ) { if ( isViewContext ( contextId ) ) { if ( isActivated ( contextId ) ) { deactivate ( contextId , getActivePerspective ( ) ) ; } } } } contextActivated ( DebugUITools . getDebugContextManager ( ) . getContextService ( fWindow ) . getActiveContext ( ) ) ; } } private void deactivate ( String contextId , IPerspectiveDescriptor perspective ) { if ( fWindow = = null ) { return ; } IWorkbenchPage page = fWindow . getActivePage ( ) ; if ( page ! = null ) { DebugContextViewBindings bindings = fContextIdsToBindings . get ( contextId ) ; if ( bindings ! = null ) { bindings . deactivate ( page , perspective ) ; } } } private Set < String > getDisabledContexts ( ContextManagerEvent event ) { Set < String > prev = new HashSet < String > ( event . getPreviouslyActiveContextIds ( ) ) ; Set < String > activeContextIds = event . getContextManager ( ) . getActiveContextIds ( ) ; if ( activeContextIds ! = null ) { prev . removeAll ( activeContextIds ) ; } return prev ; } private boolean isViewContext ( String id ) { return fContextIdsToBindings . containsKey ( id ) ; } private void saveViewBindings ( ) { try { Document document = DebugPlugin . newDocument ( ) ; Element root = document . createElement ( XML_ELEMENT_VIEW_BINDINGS ) ; document . appendChild ( root ) ; Set < String > done = new HashSet < String > ( ) ; for ( DebugContextViewBindings binding : fContextIdsToBindings . values ( ) ) { binding . saveBindings ( document , root , done ) ; } String prefValue = IInternalDebugCoreConstants . EMPTY_STRING ; if ( root . hasChildNodes ( ) ) { prefValue = DebugPlugin . serializeDocument ( document ) ; } fIgnoreChanges = true ; DebugUITools . getPreferenceStore ( ) . setValue ( IInternalDebugUIConstants . PREF_USER_VIEW_BINDINGS , prefValue ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } finally { fIgnoreChanges = false ; } } public String [ ] getEnabledPerspectives ( ) { return fEnabledPerspectives . toArray ( new String [ fEnabledPerspectives . size ( ) ] ) ; } public void showViewQuiet ( String viewId ) { if ( fWindow = = null ) { return ; } IWorkbenchPage page = fWindow . getActivePage ( ) ; if ( page ! = null ) { try { fIgnoreChanges = true ; IViewPart part = page . showView ( viewId , null , IWorkbenchPage . VIEW_VISIBLE ) ; if ( ! page . isPartVisible ( part ) ) { page . bringToTop ( part ) ; } } catch ( PartInitException e ) { DebugUIPlugin . log ( e ) ; } finally { fIgnoreChanges = false ; } } } @Override public void perspectivePreDeactivate ( IWorkbenchPage page , IPerspectiveDescriptor perspective ) { if ( page . getWorkbenchWindow ( ) . equals ( fWindow ) ) { fActivePerspective = null ; clean ( perspective ) ; } } @Override public void preferenceChange ( PreferenceChangeEvent event ) { if ( ! fIgnoreChanges ) { if ( IDebugUIConstants . PREF_MANAGE_VIEW_PERSPECTIVES . equals ( event . getKey ( ) ) ) { loadPerspectives ( ) ; } else if ( IInternalDebugUIConstants . PREF_USER_VIEW_BINDINGS . equals ( event . getKey ( ) ) ) { loadContextToViewExtensions ( ) ; applyUserViewBindings ( ) ; fPerspectiveToActivatedContexts . clear ( ) ; ISelection selection = getDebugContextService ( ) . getActiveContext ( ) ; contextActivated ( selection ) ; } } } } 

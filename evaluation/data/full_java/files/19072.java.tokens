package io . netty . handler . codec . http ; import io . netty . handler . codec . CharSequenceValueConverter ; import io . netty . handler . codec . DefaultHeaders ; import io . netty . handler . codec . DefaultHeaders . NameValidator ; import io . netty . handler . codec . DefaultHeadersImpl ; import io . netty . handler . codec . HeadersUtils ; import io . netty . handler . codec . ValueConverter ; import io . netty . util . AsciiString ; import io . netty . util . ByteProcessor ; import io . netty . util . internal . PlatformDependent ; import java . util . ArrayList ; import java . util . Calendar ; import java . util . Collections ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; import static io . netty . util . AsciiString . CASE_INSENSITIVE_HASHER ; import static io . netty . util . AsciiString . CASE_SENSITIVE_HASHER ; public class DefaultHttpHeaders extends HttpHeaders { private static final int HIGHEST_INVALID_VALUE_CHAR_MASK = ~ <int> ; private static final ByteProcessor HEADER_NAME_VALIDATOR = new ByteProcessor ( ) { @Override public boolean process ( byte value ) throws Exception { validateHeaderNameElement ( value ) ; return true ; } } ; static final NameValidator < CharSequence > HttpNameValidator = new NameValidator < CharSequence > ( ) { @Override public void validateName ( CharSequence name ) { if ( name instanceof AsciiString ) { try { ( ( AsciiString ) name ) . forEachByte ( HEADER_NAME_VALIDATOR ) ; } catch ( Exception e ) { PlatformDependent . throwException ( e ) ; } } else { for ( int index = <int> ; index < name . length ( ) ; + + index ) { validateHeaderNameElement ( name . charAt ( index ) ) ; } } } } ; private final DefaultHeaders < CharSequence , CharSequence , ? > headers ; public DefaultHttpHeaders ( ) { this ( true ) ; } public DefaultHttpHeaders ( boolean validate ) { this ( validate , nameValidator ( validate ) ) ; } protected DefaultHttpHeaders ( boolean validate , NameValidator < CharSequence > nameValidator ) { this ( new DefaultHeadersImpl < CharSequence , CharSequence > ( CASE_INSENSITIVE_HASHER , valueConverter ( validate ) , nameValidator ) ) ; } protected DefaultHttpHeaders ( DefaultHeaders < CharSequence , CharSequence , ? > headers ) { this . headers = headers ; } @Override public HttpHeaders add ( HttpHeaders headers ) { if ( headers instanceof DefaultHttpHeaders ) { this . headers . add ( ( ( DefaultHttpHeaders ) headers ) . headers ) ; return this ; } else { return super . add ( headers ) ; } } @Override public HttpHeaders set ( HttpHeaders headers ) { if ( headers instanceof DefaultHttpHeaders ) { this . headers . set ( ( ( DefaultHttpHeaders ) headers ) . headers ) ; return this ; } else { return super . set ( headers ) ; } } @Override public HttpHeaders add ( String name , Object value ) { headers . addObject ( name , value ) ; return this ; } @Override public HttpHeaders add ( CharSequence name , Object value ) { headers . addObject ( name , value ) ; return this ; } @Override public HttpHeaders add ( String name , Iterable < ? > values ) { headers . addObject ( name , values ) ; return this ; } @Override public HttpHeaders add ( CharSequence name , Iterable < ? > values ) { headers . addObject ( name , values ) ; return this ; } @Override public HttpHeaders addInt ( CharSequence name , int value ) { headers . addInt ( name , value ) ; return this ; } @Override public HttpHeaders addShort ( CharSequence name , short value ) { headers . addShort ( name , value ) ; return this ; } @Override public HttpHeaders remove ( String name ) { headers . remove ( name ) ; return this ; } @Override public HttpHeaders remove ( CharSequence name ) { headers . remove ( name ) ; return this ; } @Override public HttpHeaders set ( String name , Object value ) { headers . setObject ( name , value ) ; return this ; } @Override public HttpHeaders set ( CharSequence name , Object value ) { headers . setObject ( name , value ) ; return this ; } @Override public HttpHeaders set ( String name , Iterable < ? > values ) { headers . setObject ( name , values ) ; return this ; } @Override public HttpHeaders set ( CharSequence name , Iterable < ? > values ) { headers . setObject ( name , values ) ; return this ; } @Override public HttpHeaders setInt ( CharSequence name , int value ) { headers . setInt ( name , value ) ; return this ; } @Override public HttpHeaders setShort ( CharSequence name , short value ) { headers . setShort ( name , value ) ; return this ; } @Override public HttpHeaders clear ( ) { headers . clear ( ) ; return this ; } @Override public String get ( String name ) { return get ( ( CharSequence ) name ) ; } @Override public String get ( CharSequence name ) { return HeadersUtils . getAsString ( headers , name ) ; } @Override public Integer getInt ( CharSequence name ) { return headers . getInt ( name ) ; } @Override public int getInt ( CharSequence name , int defaultValue ) { return headers . getInt ( name , defaultValue ) ; } @Override public Short getShort ( CharSequence name ) { return headers . getShort ( name ) ; } @Override public short getShort ( CharSequence name , short defaultValue ) { return headers . getShort ( name , defaultValue ) ; } @Override public Long getTimeMillis ( CharSequence name ) { return headers . getTimeMillis ( name ) ; } @Override public long getTimeMillis ( CharSequence name , long defaultValue ) { return headers . getTimeMillis ( name , defaultValue ) ; } @Override public List < String > getAll ( String name ) { return getAll ( ( CharSequence ) name ) ; } @Override public List < String > getAll ( CharSequence name ) { return HeadersUtils . getAllAsString ( headers , name ) ; } @Override public List < Entry < String , String > > entries ( ) { if ( isEmpty ( ) ) { return Collections . emptyList ( ) ; } List < Entry < String , String > > entriesConverted = new ArrayList < Entry < String , String > > ( headers . size ( ) ) ; for ( Entry < String , String > entry : this ) { entriesConverted . add ( entry ) ; } return entriesConverted ; } @Deprecated @Override public Iterator < Map . Entry < String , String > > iterator ( ) { return HeadersUtils . iteratorAsString ( headers ) ; } @Override public Iterator < Entry < CharSequence , CharSequence > > iteratorCharSequence ( ) { return headers . iterator ( ) ; } @Override public boolean contains ( String name ) { return contains ( ( CharSequence ) name ) ; } @Override public boolean contains ( CharSequence name ) { return headers . contains ( name ) ; } @Override public boolean isEmpty ( ) { return headers . isEmpty ( ) ; } @Override public int size ( ) { return headers . size ( ) ; } @Override public boolean contains ( String name , String value , boolean ignoreCase ) { return contains ( ( CharSequence ) name , ( CharSequence ) value , ignoreCase ) ; } @Override public boolean contains ( CharSequence name , CharSequence value , boolean ignoreCase ) { return headers . contains ( name , value , ignoreCase ? CASE_INSENSITIVE_HASHER : CASE_SENSITIVE_HASHER ) ; } @Override public Set < String > names ( ) { return HeadersUtils . namesAsString ( headers ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof DefaultHttpHeaders ) ) { return false ; } return headers . equals ( ( ( DefaultHttpHeaders ) o ) . headers , CASE_SENSITIVE_HASHER ) ; } @Override public int hashCode ( ) { return headers . hashCode ( CASE_SENSITIVE_HASHER ) ; } private static void validateHeaderNameElement ( byte value ) { switch ( value ) { case <hex> : case <str> : case <str> : case <hex> : case <str> : case <str> : case <str> : case <str> : case <str> : case <str> : case <str> : throw new IllegalArgumentException ( <str> + value ) ; default : if ( value < <int> ) { throw new IllegalArgumentException ( <str> + value ) ; } } } private static void validateHeaderNameElement ( char value ) { switch ( value ) { case <hex> : case <str> : case <str> : case <hex> : case <str> : case <str> : case <str> : case <str> : case <str> : case <str> : case <str> : throw new IllegalArgumentException ( <str> + value ) ; default : if ( value > <int> ) { throw new IllegalArgumentException ( <str> + value ) ; } } } static ValueConverter < CharSequence > valueConverter ( boolean validate ) { return validate ? HeaderValueConverterAndValidator . INSTANCE : HeaderValueConverter . INSTANCE ; } @SuppressWarnings ( <str> ) static NameValidator < CharSequence > nameValidator ( boolean validate ) { return validate ? HttpNameValidator : NameValidator . NOT_NULL ; } private static class HeaderValueConverter extends CharSequenceValueConverter { static final HeaderValueConverter INSTANCE = new HeaderValueConverter ( ) ; @Override public CharSequence convertObject ( Object value ) { if ( value instanceof CharSequence ) { return ( CharSequence ) value ; } if ( value instanceof Date ) { return HttpHeaderDateFormat . get ( ) . format ( ( Date ) value ) ; } if ( value instanceof Calendar ) { return HttpHeaderDateFormat . get ( ) . format ( ( ( Calendar ) value ) . getTime ( ) ) ; } return value . toString ( ) ; } } private static final class HeaderValueConverterAndValidator extends HeaderValueConverter { static final HeaderValueConverterAndValidator INSTANCE = new HeaderValueConverterAndValidator ( ) ; @Override public CharSequence convertObject ( Object value ) { CharSequence seq = super . convertObject ( value ) ; int state = <int> ; for ( int index = <int> ; index < seq . length ( ) ; index + + ) { state = validateValueChar ( seq , state , seq . charAt ( index ) ) ; } if ( state ! = <int> ) { throw new IllegalArgumentException ( <str> + seq ) ; } return seq ; } private static int validateValueChar ( CharSequence seq , int state , char character ) { if ( ( character & HIGHEST_INVALID_VALUE_CHAR_MASK ) = = <int> ) { switch ( character ) { case <hex> : throw new IllegalArgumentException ( <str> + seq ) ; case <hex> : throw new IllegalArgumentException ( <str> + seq ) ; case <str> : throw new IllegalArgumentException ( <str> + seq ) ; } } switch ( state ) { case <int> : switch ( character ) { case <str> : return <int> ; case <str> : return <int> ; } break ; case <int> : switch ( character ) { case <str> : return <int> ; default : throw new IllegalArgumentException ( <str> + seq ) ; } case <int> : switch ( character ) { case <str> : case <str> : return <int> ; default : throw new IllegalArgumentException ( <str> + seq ) ; } } return state ; } } } 

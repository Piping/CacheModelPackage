package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . profiling . GLProfiler ; import com . badlogic . gdx . graphics . profiling . GLErrorListener ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class GLProfilerErrorTest extends GdxTest { SpriteBatch batch ; BitmapFont font ; String message = <str> ; boolean makeGlError = false ; final GLErrorListener customListener = new GLErrorListener ( ) { @Override public void onError ( int error ) { if ( error = = GL20 . GL_INVALID_VALUE ) { message = <str> ; } else { message = <str> + error ; } } } ; @Override public void create ( ) { batch = new SpriteBatch ( ) ; font = new BitmapFont ( ) ; Gdx . input . setInputProcessor ( this ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; if ( makeGlError ) { makeGlError = false ; try { Gdx . gl . glClear ( <int> ) ; } catch ( GdxRuntimeException glError ) { if ( <str> . equals ( glError . getMessage ( ) ) ) { message = <str> ; } else { message = <str> + glError . getMessage ( ) ; } Gdx . app . log ( <str> , <str> , glError ) ; } } int x = <int> ; int y = Gdx . graphics . getHeight ( ) - <int> ; y - = font . draw ( batch , <str> + <str> + <str> + <str> + <str> + <str> , x , y ) . height ; y - = <int> ; font . draw ( batch , message , x , y ) ; batch . end ( ) ; } @Override public boolean keyTyped ( char character ) { String DEBUGGER_DISABLED_MESSAGE = <str> ; switch ( character ) { case <str> : GLProfiler . enable ( ) ; message = <str> + GLProfiler . isEnabled ( ) + <str> ; break ; case <str> : GLProfiler . disable ( ) ; message = <str> + GLProfiler . isEnabled ( ) + <str> ; break ; case <str> : GLProfiler . listener = GLErrorListener . LOGGING_LISTENER ; makeGlError = true ; if ( GLProfiler . isEnabled ( ) ) { message = <str> ; } else { message = DEBUGGER_DISABLED_MESSAGE ; } break ; case <str> : GLProfiler . listener = GLErrorListener . THROWING_LISTENER ; makeGlError = true ; if ( GLProfiler . isEnabled ( ) ) { message = <str> ; } else { message = DEBUGGER_DISABLED_MESSAGE ; } break ; case <str> : GLProfiler . listener = customListener ; makeGlError = true ; if ( GLProfiler . isEnabled ( ) ) { message = <str> ; } else { message = DEBUGGER_DISABLED_MESSAGE ; } break ; default : return false ; } return true ; } @Override public void dispose ( ) { batch . dispose ( ) ; font . dispose ( ) ; } } 

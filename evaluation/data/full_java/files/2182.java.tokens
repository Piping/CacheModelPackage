package org . nd4j . linalg . dataset ; import org . apache . commons . io . FileUtils ; import org . nd4j . linalg . dataset . api . DataSetPreProcessor ; import org . nd4j . linalg . dataset . api . iterator . DataSetIterator ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . indexing . NDArrayIndex ; import java . io . * ; import java . util . ArrayList ; import java . util . List ; import java . util . UUID ; public class MiniBatchFileDataSetIterator implements DataSetIterator { private int batchSize ; private List < String [ ] > paths ; private int currIdx ; private File rootDir ; private int totalExamples ; private int totalLabels ; private int totalBatches = - <int> ; private DataSetPreProcessor dataSetPreProcessor ; public MiniBatchFileDataSetIterator ( DataSet baseData , int batchSize ) throws IOException { this ( baseData , batchSize , true ) ; } public MiniBatchFileDataSetIterator ( DataSet baseData , int batchSize , boolean delete , File rootDir ) throws IOException { this . batchSize = batchSize ; this . rootDir = new File ( rootDir , UUID . randomUUID ( ) . toString ( ) ) ; this . rootDir . mkdirs ( ) ; if ( delete ) Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( new Runnable ( ) { @Override public void run ( ) { try { FileUtils . deleteDirectory ( MiniBatchFileDataSetIterator . this . rootDir ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } } ) ) ; currIdx = <int> ; paths = new ArrayList < > ( ) ; totalExamples = baseData . numExamples ( ) ; totalLabels = baseData . numOutcomes ( ) ; int offset = <int> ; totalBatches = baseData . numExamples ( ) / batchSize ; for ( int i = <int> ; i < baseData . numExamples ( ) / batchSize ; i + + ) { paths . add ( writeData ( new DataSet ( baseData . getFeatureMatrix ( ) . get ( NDArrayIndex . interval ( offset , offset + batchSize ) ) , baseData . getLabels ( ) . get ( NDArrayIndex . interval ( offset , offset + batchSize ) ) ) ) ) ; offset + = batchSize ; if ( offset > = totalExamples ) break ; } } public MiniBatchFileDataSetIterator ( DataSet baseData , int batchSize , boolean delete ) throws IOException { this ( baseData , batchSize , delete , new File ( System . getProperty ( <str> ) ) ) ; } @Override public DataSet next ( int num ) { throw new UnsupportedOperationException ( <str> ) ; } @Override public int totalExamples ( ) { return totalExamples ; } @Override public int inputColumns ( ) { return <int> ; } @Override public int totalOutcomes ( ) { return totalLabels ; } @Override public void reset ( ) { currIdx = <int> ; } @Override public int batch ( ) { return batchSize ; } @Override public int cursor ( ) { return currIdx ; } @Override public int numExamples ( ) { return totalExamples ; } @Override public void setPreProcessor ( DataSetPreProcessor preProcessor ) { this . dataSetPreProcessor = preProcessor ; } @Override public boolean hasNext ( ) { return currIdx < totalBatches ; } @Override public void remove ( ) { } @Override public DataSet next ( ) { try { DataSet ret = read ( currIdx ) ; if ( dataSetPreProcessor ! = null ) dataSetPreProcessor . preProcess ( ret ) ; currIdx + + ; return ret ; } catch ( IOException e ) { throw new IllegalStateException ( <str> ) ; } } private DataSet read ( int idx ) throws IOException { BufferedInputStream bis = new BufferedInputStream ( new FileInputStream ( paths . get ( idx ) [ <int> ] ) ) ; DataInputStream dis = new DataInputStream ( bis ) ; BufferedInputStream labelInputStream = new BufferedInputStream ( new FileInputStream ( paths . get ( idx ) [ <int> ] ) ) ; DataInputStream labelDis = new DataInputStream ( labelInputStream ) ; DataSet d = new DataSet ( Nd4j . read ( dis ) , Nd4j . read ( labelDis ) ) ; dis . close ( ) ; labelDis . close ( ) ; return d ; } private String [ ] writeData ( DataSet write ) throws IOException { String [ ] ret = new String [ <int> ] ; String dataSetId = UUID . randomUUID ( ) . toString ( ) ; BufferedOutputStream dataOut = new BufferedOutputStream ( new FileOutputStream ( new File ( rootDir , dataSetId + <str> ) ) ) ; DataOutputStream dos = new DataOutputStream ( dataOut ) ; Nd4j . write ( write . getFeatureMatrix ( ) , dos ) ; dos . flush ( ) ; dos . close ( ) ; BufferedOutputStream dataOutLabels = new BufferedOutputStream ( new FileOutputStream ( new File ( rootDir , dataSetId + <str> ) ) ) ; DataOutputStream dosLabels = new DataOutputStream ( dataOutLabels ) ; Nd4j . write ( write . getLabels ( ) , dosLabels ) ; dosLabels . flush ( ) ; dos . close ( ) ; ret [ <int> ] = new File ( rootDir , dataSetId + <str> ) . getAbsolutePath ( ) ; ret [ <int> ] = new File ( rootDir , dataSetId + <str> ) . getAbsolutePath ( ) ; return ret ; } public File getRootDir ( ) { return rootDir ; } public void setRootDir ( File rootDir ) { this . rootDir = rootDir ; } } 

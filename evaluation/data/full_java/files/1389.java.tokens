package org . apache . cassandra . cql3 . validation . entities ; import java . util . UUID ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . dht . ByteOrderedPartitioner ; import org . apache . cassandra . service . StorageService ; public class UserTypesTest extends CQLTester { @BeforeClass public static void setUpClass ( ) { StorageService . instance . setPartitionerUnsafe ( ByteOrderedPartitioner . instance ) ; } @Test public void testInvalidField ( ) throws Throwable { String myType = createType ( <str> ) ; createTable ( <str> + myType + <str> ) ; assertInvalid ( <str> , <int> , <int> ) ; } @Test public void testCassandra8105 ( ) throws Throwable { String ut1 = createType ( <str> ) ; String ut2 = createType ( <str> + KEYSPACE + <str> + ut1 + <str> ) ; createTable ( <str> + KEYSPACE + <str> + ut2 + <str> ) ; execute ( <str> ) ; String ut3 = createType ( <str> ) ; String ut4 = createType ( <str> + KEYSPACE + <str> + ut3 + <str> ) ; createTable ( <str> + KEYSPACE + <str> + ut4 + <str> ) ; execute ( <str> ) ; String ut5 = createType ( <str> ) ; String ut6 = createType ( <str> + KEYSPACE + <str> + ut5 + <str> ) ; createTable ( <str> + KEYSPACE + <str> + ut6 + <str> ) ; execute ( <str> ) ; } @Test public void testFor7684 ( ) throws Throwable { String myType = createType ( <str> ) ; createTable ( <str> + myType + <str> ) ; execute ( <str> , <int> , - <float> ) ; execute ( <str> , true , <int> ) ; assertRows ( execute ( <str> , <int> , - <float> ) , row ( - <float> ) ) ; flush ( ) ; assertRows ( execute ( <str> , <int> , - <float> ) , row ( - <float> ) ) ; } @Test public void testCreateInvalidTablesWithUDT ( ) throws Throwable { String myType = createType ( <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + KEYSPACE + <str> + myType + <str> ) ; assertInvalidMessage ( <str> + KEYSPACE + <str> + <str> , <str> + KEYSPACE + <str> ) ; assertInvalidMessage ( <str> + KEYSPACE + <str> , <str> + KEYSPACE + <str> + KEYSPACE + <str> + <str> ) ; } @Test public void testAlterUDT ( ) throws Throwable { String myType = KEYSPACE + <str> + createType ( <str> ) ; createTable ( <str> + myType + <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; flush ( ) ; execute ( <str> + myType + <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) , row ( <int> , <int> ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <int> , null ) , row ( <int> , <int> ) ) ; } @Test public void testUDTWithUnsetValues ( ) throws Throwable { String myType = createType ( <str> ) ; String myOtherType = createType ( <str> + myType + <str> ) ; createTable ( <str> + myType + <str> + myOtherType + <str> ) ; assertInvalidMessage ( <str> + myType , <str> , <int> , unset ( ) ) ; assertInvalidMessage ( <str> + myType , <str> , <int> , <int> , <int> , unset ( ) ) ; } @Test public void testAlteringUserTypeNestedWithinMap ( ) throws Throwable { String [ ] columnTypePrefixes = { <str> , <str> } ; for ( String columnTypePrefix : columnTypePrefixes ) { String ut1 = createType ( <str> ) ; String columnType = columnTypePrefix + KEYSPACE + <str> + ut1 + <str> ; createTable ( <str> + columnType + <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , userType ( <int> ) ) ) ) ; flush ( ) ; execute ( <str> + KEYSPACE + <str> + ut1 + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , userType ( <int> ) ) ) , row ( <int> , map ( <str> , userType ( <int> , <int> ) ) ) , row ( <int> , map ( <str> , userType ( <int> , null ) ) ) , row ( <int> , map ( <str> , userType ( null , <int> ) ) ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <int> , map ( <str> , userType ( <int> ) ) ) , row ( <int> , map ( <str> , userType ( <int> , <int> ) ) ) , row ( <int> , map ( <str> , userType ( <int> , null ) ) ) , row ( <int> , map ( <str> , userType ( null , <int> ) ) ) ) ; } } @Test public void testAlteringUserTypeNestedWithinSet ( ) throws Throwable { String [ ] columnTypePrefixes = { <str> , <str> } ; for ( String columnTypePrefix : columnTypePrefixes ) { String ut1 = createType ( <str> ) ; String columnType = columnTypePrefix + KEYSPACE + <str> + ut1 + <str> ; createTable ( <str> + columnType + <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( userType ( <int> ) ) ) ) ; flush ( ) ; execute ( <str> + KEYSPACE + <str> + ut1 + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( userType ( <int> ) ) ) , row ( <int> , set ( userType ( <int> , <int> ) ) ) , row ( <int> , set ( userType ( <int> , null ) ) ) , row ( <int> , set ( userType ( null , <int> ) ) ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <int> , set ( userType ( <int> ) ) ) , row ( <int> , set ( userType ( <int> , <int> ) ) ) , row ( <int> , set ( userType ( <int> , null ) ) ) , row ( <int> , set ( userType ( null , <int> ) ) ) ) ; } } @Test public void testAlteringUserTypeNestedWithinList ( ) throws Throwable { String [ ] columnTypePrefixes = { <str> , <str> } ; for ( String columnTypePrefix : columnTypePrefixes ) { String ut1 = createType ( <str> ) ; String columnType = columnTypePrefix + KEYSPACE + <str> + ut1 + <str> ; createTable ( <str> + columnType + <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( userType ( <int> ) ) ) ) ; flush ( ) ; execute ( <str> + KEYSPACE + <str> + ut1 + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( userType ( <int> ) ) ) , row ( <int> , list ( userType ( <int> , <int> ) ) ) , row ( <int> , list ( userType ( <int> , null ) ) ) , row ( <int> , list ( userType ( null , <int> ) ) ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <int> , list ( userType ( <int> ) ) ) , row ( <int> , list ( userType ( <int> , <int> ) ) ) , row ( <int> , list ( userType ( <int> , null ) ) ) , row ( <int> , list ( userType ( null , <int> ) ) ) ) ; } } @Test public void testAlteringUserTypeNestedWithinTuple ( ) throws Throwable { String type = createType ( <str> ) ; createTable ( <str> + KEYSPACE + <str> + type + <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , tuple ( <int> , userType ( <int> , <int> ) ) ) ) ; flush ( ) ; execute ( <str> + KEYSPACE + <str> + type + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , tuple ( <int> , userType ( <int> , <int> ) ) ) , row ( <int> , tuple ( <int> , userType ( <int> , <int> , <int> ) ) ) , row ( <int> , tuple ( <int> , userType ( <int> , <int> , null ) ) ) , row ( <int> , tuple ( <int> , userType ( null , <int> , null ) ) ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <int> , tuple ( <int> , userType ( <int> , <int> ) ) ) , row ( <int> , tuple ( <int> , userType ( <int> , <int> , <int> ) ) ) , row ( <int> , tuple ( <int> , userType ( <int> , <int> , null ) ) ) , row ( <int> , tuple ( <int> , userType ( null , <int> , null ) ) ) ) ; } @Test public void testAlteringUserTypeNestedWithinNestedTuple ( ) throws Throwable { String type = createType ( <str> ) ; createTable ( <str> + KEYSPACE + <str> + type + <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , tuple ( <int> , tuple ( <int> , userType ( <int> , <int> ) ) ) ) ) ; flush ( ) ; execute ( <str> + KEYSPACE + <str> + type + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , tuple ( <int> , tuple ( <int> , userType ( <int> , <int> ) ) ) ) , row ( <int> , tuple ( <int> , tuple ( <int> , userType ( <int> , <int> , <int> ) ) ) ) , row ( <int> , tuple ( <int> , tuple ( <int> , userType ( <int> , <int> , null ) ) ) ) , row ( <int> , tuple ( <int> , tuple ( <int> , userType ( null , <int> , null ) ) ) ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <int> , tuple ( <int> , tuple ( <int> , userType ( <int> , <int> ) ) ) ) , row ( <int> , tuple ( <int> , tuple ( <int> , userType ( <int> , <int> , <int> ) ) ) ) , row ( <int> , tuple ( <int> , tuple ( <int> , userType ( <int> , <int> , null ) ) ) ) , row ( <int> , tuple ( <int> , tuple ( <int> , userType ( null , <int> , null ) ) ) ) ) ; } @Test public void testAlteringUserTypeNestedWithinUserType ( ) throws Throwable { String type = createType ( <str> ) ; String otherType = createType ( <str> + KEYSPACE + <str> + type + <str> ) ; createTable ( <str> + KEYSPACE + <str> + otherType + <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; flush ( ) ; execute ( <str> + KEYSPACE + <str> + type + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , null ) , row ( null , <int> , null ) ) ; flush ( ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , null ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , null ) , row ( null , <int> , null ) ) ; } @Test public void testUserTypes ( ) throws Throwable { UUID userID_1 = UUID . fromString ( <str> ) ; String addressType = createType ( <str> ) ; String nameType = createType ( <str> ) ; createTable ( <str> + nameType + <str> + addressType + <str> ) ; execute ( <str> , userID_1 ) ; assertRows ( execute ( <str> , userID_1 ) , row ( <str> ) ) ; execute ( <str> , userID_1 ) ; execute ( <str> , userID_1 ) ; } @Test public void testNestedUserTypes ( ) throws Throwable { String type1 = createType ( <str> ) ; String type2 = createType ( <str> + type1 + <str> ) ; createTable ( <str> + type2 + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; } @Test public void testAddFieldToUdt ( ) throws Throwable { String typeName = createType ( <str> ) ; createTable ( <str> + typeName + <str> ) ; execute ( <str> ) ; execute ( <str> + keyspace ( ) + <str> + typeName + <str> ) ; execute ( <str> ) ; } @Test public void testCircularReferences ( ) throws Throwable { String type1 = createType ( <str> ) ; String typeX = createType ( <str> + typeWithKs ( type1 ) + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; typeX = createType ( <str> + typeWithKs ( type1 ) + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; typeX = createType ( <str> + typeWithKs ( type1 ) + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; typeX = createType ( <str> + typeWithKs ( type1 ) + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; typeX = createType ( <str> + typeWithKs ( type1 ) + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; String type2 = createType ( <str> + typeWithKs ( type1 ) + <str> ) ; typeX = createType ( <str> + keyspace ( ) + <str> + type2 + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; typeX = createType ( <str> + keyspace ( ) + <str> + type2 + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; typeX = createType ( <str> + keyspace ( ) + <str> + type2 + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; typeX = createType ( <str> + keyspace ( ) + <str> + type2 + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; typeX = createType ( <str> + keyspace ( ) + <str> + type2 + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( typeX ) + <str> ) ; assertInvalidMessage ( <str> , <str> + typeWithKs ( type1 ) + <str> + typeWithKs ( type1 ) + <str> ) ; } private String typeWithKs ( String type1 ) { return keyspace ( ) + <str> + type1 ; } } 

package org . apache . cassandra . hints ; import java . io . IOException ; import java . util . UUID ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . Mutation ; import org . apache . cassandra . db . RowUpdateBuilder ; import org . apache . cassandra . io . util . DataInputBuffer ; import org . apache . cassandra . io . util . DataInputPlus ; import org . apache . cassandra . io . util . DataOutputBuffer ; import org . apache . cassandra . net . MessagingService ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . utils . FBUtilities ; import static junit . framework . Assert . assertEquals ; import static org . apache . cassandra . hints . HintsTestUtil . assertHintsEqual ; import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; public class HintMessageTest { private static final String KEYSPACE = <str> ; private static final String TABLE = <str> ; @Test public void testSerializer ( ) throws IOException { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE , TABLE ) ) ; UUID hostId = UUID . randomUUID ( ) ; long now = FBUtilities . timestampMicros ( ) ; CFMetaData table = Schema . instance . getCFMetaData ( KEYSPACE , TABLE ) ; Mutation mutation = new RowUpdateBuilder ( table , now , bytes ( <str> ) ) . clustering ( <str> ) . add ( <str> , <str> + <int> ) . build ( ) ; Hint hint = Hint . create ( mutation , now / <int> ) ; HintMessage message = new HintMessage ( hostId , hint ) ; int serializedSize = ( int ) HintMessage . serializer . serializedSize ( message , MessagingService . current_version ) ; DataOutputBuffer dob = new DataOutputBuffer ( ) ; HintMessage . serializer . serialize ( message , dob , MessagingService . current_version ) ; assertEquals ( serializedSize , dob . getLength ( ) ) ; DataInputPlus di = new DataInputBuffer ( dob . buffer ( ) , true ) ; HintMessage deserializedMessage = HintMessage . serializer . deserialize ( di , MessagingService . current_version ) ; assertEquals ( hostId , deserializedMessage . hostId ) ; assertHintsEqual ( message . hint , deserializedMessage . hint ) ; } } 

package org . gradle . tooling . internal . consumer ; import org . gradle . tooling . * ; import org . gradle . tooling . internal . consumer . async . AsyncConsumerActionExecutor ; class DefaultProjectConnection implements ProjectConnection { private final AsyncConsumerActionExecutor connection ; private final ConnectionParameters parameters ; public DefaultProjectConnection ( AsyncConsumerActionExecutor connection , ConnectionParameters parameters ) { this . connection = connection ; this . parameters = parameters ; } public void close ( ) { connection . stop ( ) ; } public < T > T getModel ( Class < T > modelType ) { return model ( modelType ) . get ( ) ; } public < T > void getModel ( final Class < T > modelType , final ResultHandler < ? super T > handler ) { model ( modelType ) . get ( handler ) ; } public BuildLauncher newBuild ( ) { return new DefaultBuildLauncher ( connection , parameters ) ; } @Override public TestLauncher newTestLauncher ( ) { return new DefaultTestLauncher ( connection , parameters ) ; } public < T > ModelBuilder < T > model ( Class < T > modelType ) { if ( ! modelType . isInterface ( ) ) { throw new IllegalArgumentException ( String . format ( <str> , modelType . getName ( ) ) ) ; } return new DefaultModelBuilder < T > ( modelType , connection , parameters ) ; } public < T > BuildActionExecuter < T > action ( final BuildAction < T > buildAction ) { return new DefaultBuildActionExecuter < T > ( buildAction , connection , parameters ) ; } } 

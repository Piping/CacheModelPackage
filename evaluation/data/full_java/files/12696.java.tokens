package org . gradle . api . internal . artifacts . ivyservice . resolveengine . oldresult ; import org . gradle . api . artifacts . ModuleDependency ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . ModuleVersionSelector ; import org . gradle . api . internal . artifacts . ResolvedConfigurationIdentifier ; import org . gradle . api . internal . artifacts . ivyservice . DefaultUnresolvedDependency ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . artifact . ArtifactSet ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . artifact . DependencyArtifactsVisitor ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . DependencyGraphEdge ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . DependencyGraphNode ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . DependencyGraphPathResolver ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . DependencyGraphVisitor ; import org . gradle . internal . resolve . ModuleVersionResolveException ; import java . util . * ; public class ResolvedConfigurationDependencyGraphVisitor implements DependencyGraphVisitor , DependencyArtifactsVisitor { private final ResolvedConfigurationBuilder builder ; private final Map < ModuleVersionSelector , BrokenDependency > failuresByRevisionId = new LinkedHashMap < ModuleVersionSelector , BrokenDependency > ( ) ; private DependencyGraphNode root ; public ResolvedConfigurationDependencyGraphVisitor ( ResolvedConfigurationBuilder builder ) { this . builder = builder ; } public void start ( DependencyGraphNode root ) { this . root = root ; } public void visitNode ( DependencyGraphNode resolvedConfiguration ) { builder . newResolvedDependency ( resolvedConfiguration . getNodeId ( ) ) ; for ( DependencyGraphEdge dependency : resolvedConfiguration . getOutgoingEdges ( ) ) { ModuleVersionResolveException failure = dependency . getFailure ( ) ; if ( failure ! = null ) { addUnresolvedDependency ( dependency , dependency . getRequestedModuleVersion ( ) , failure ) ; } } } public void visitEdge ( DependencyGraphNode resolvedConfiguration ) { ResolvedConfigurationIdentifier targetNodeId = resolvedConfiguration . getNodeId ( ) ; for ( DependencyGraphEdge dependency : resolvedConfiguration . getIncomingEdges ( ) ) { if ( dependency . getFrom ( ) . getNodeId ( ) = = root . getNodeId ( ) ) { ModuleDependency moduleDependency = dependency . getModuleDependency ( ) ; builder . addFirstLevelDependency ( moduleDependency , targetNodeId ) ; } } } public void visitArtifacts ( ResolvedConfigurationIdentifier parent , ResolvedConfigurationIdentifier child , ArtifactSet artifacts ) { builder . addChild ( parent , child , artifacts . getId ( ) ) ; } public void finish ( DependencyGraphNode root ) { attachFailures ( builder ) ; builder . done ( root . getNodeId ( ) ) ; } public void finishArtifacts ( ) { } private void attachFailures ( ResolvedConfigurationBuilder result ) { for ( Map . Entry < ModuleVersionSelector , BrokenDependency > entry : failuresByRevisionId . entrySet ( ) ) { Collection < List < ModuleVersionIdentifier > > paths = DependencyGraphPathResolver . calculatePaths ( entry . getValue ( ) . requiredBy , root ) ; result . addUnresolvedDependency ( new DefaultUnresolvedDependency ( entry . getKey ( ) , entry . getValue ( ) . failure . withIncomingPaths ( paths ) ) ) ; } } private void addUnresolvedDependency ( DependencyGraphEdge dependency , ModuleVersionSelector requested , ModuleVersionResolveException failure ) { BrokenDependency breakage = failuresByRevisionId . get ( requested ) ; if ( breakage = = null ) { breakage = new BrokenDependency ( failure ) ; failuresByRevisionId . put ( requested , breakage ) ; } breakage . requiredBy . add ( dependency . getFrom ( ) ) ; } private static class BrokenDependency { final ModuleVersionResolveException failure ; final List < DependencyGraphNode > requiredBy = new ArrayList < DependencyGraphNode > ( ) ; private BrokenDependency ( ModuleVersionResolveException failure ) { this . failure = failure ; } } } 

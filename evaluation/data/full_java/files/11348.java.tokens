package org . gradle . api . internal . artifacts . dependencies ; import org . gradle . api . artifacts . ClientModule ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . artifacts . ModuleDependency ; import java . util . HashSet ; import java . util . Set ; public class DefaultClientModule extends AbstractExternalModuleDependency implements ClientModule { private Set < ModuleDependency > dependencies = new HashSet < ModuleDependency > ( ) ; public DefaultClientModule ( String group , String name , String version ) { this ( group , name , version , null ) ; } public DefaultClientModule ( String group , String name , String version , String configuration ) { super ( group , name , version , configuration ) ; } public String getId ( ) { return emptyStringIfNull ( getGroup ( ) ) + <str> + getName ( ) + <str> + emptyStringIfNull ( getVersion ( ) ) ; } private String emptyStringIfNull ( String value ) { return value = = null ? <str> : value ; } public Set < ModuleDependency > getDependencies ( ) { return dependencies ; } public void addDependency ( ModuleDependency dependency ) { this . dependencies . add ( dependency ) ; } public ClientModule copy ( ) { DefaultClientModule copiedClientModule = new DefaultClientModule ( getGroup ( ) , getName ( ) , getVersion ( ) , getConfiguration ( ) ) ; copyTo ( copiedClientModule ) ; for ( ModuleDependency dependency : dependencies ) { copiedClientModule . addDependency ( dependency . copy ( ) ) ; } return copiedClientModule ; } public boolean contentEquals ( Dependency dependency ) { if ( this = = dependency ) { return true ; } if ( dependency = = null | | getClass ( ) ! = dependency . getClass ( ) ) { return false ; } ClientModule that = ( ClientModule ) dependency ; return isContentEqualsFor ( that ) & & dependencies . equals ( that . getDependencies ( ) ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } ClientModule that = ( ClientModule ) o ; return isContentEqualsFor ( that ) ; } @Override public int hashCode ( ) { return super . hashCode ( ) ; } } 

package org . elasticsearch . index . query ; import com . carrotsearch . randomizedtesting . generators . RandomPicks ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . join . ScoreMode ; import org . apache . lucene . search . join . ToParentBlockJoinQuery ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingRequest ; import org . elasticsearch . common . compress . CompressedXContent ; import org . elasticsearch . index . fielddata . IndexFieldDataService ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . index . query . support . QueryInnerHits ; import org . elasticsearch . search . fetch . innerhits . InnerHitsBuilder ; import org . elasticsearch . search . fetch . innerhits . InnerHitsContext ; import org . elasticsearch . search . internal . SearchContext ; import org . elasticsearch . search . sort . SortOrder ; import org . elasticsearch . test . TestSearchContext ; import java . io . IOException ; import static org . hamcrest . CoreMatchers . instanceOf ; public class NestedQueryBuilderTests extends AbstractQueryTestCase < NestedQueryBuilder > { @Override public void setUp ( ) throws Exception { super . setUp ( ) ; MapperService mapperService = queryShardContext ( ) . getMapperService ( ) ; mapperService . merge ( <str> , new CompressedXContent ( PutMappingRequest . buildFromSimplifiedDef ( <str> , STRING_FIELD_NAME , <str> , INT_FIELD_NAME , <str> , DOUBLE_FIELD_NAME , <str> , BOOLEAN_FIELD_NAME , <str> , DATE_FIELD_NAME , <str> , OBJECT_FIELD_NAME , <str> , <str> , <str> ) . string ( ) ) , false , false ) ; } @Override protected void setSearchContext ( String [ ] types ) { final MapperService mapperService = queryShardContext ( ) . getMapperService ( ) ; final IndexFieldDataService fieldData = indexFieldDataService ( ) ; TestSearchContext testSearchContext = new TestSearchContext ( ) { private InnerHitsContext context ; @Override public void innerHits ( InnerHitsContext innerHitsContext ) { context = innerHitsContext ; } @Override public InnerHitsContext innerHits ( ) { return context ; } @Override public MapperService mapperService ( ) { return mapperService ; } @Override public IndexFieldDataService fieldData ( ) { return fieldData ; } } ; testSearchContext . setTypes ( types ) ; SearchContext . setCurrent ( testSearchContext ) ; } @Override protected NestedQueryBuilder doCreateTestQueryBuilder ( ) { InnerHitsBuilder . InnerHit innerHit = new InnerHitsBuilder . InnerHit ( ) . setSize ( <int> ) . addSort ( STRING_FIELD_NAME , SortOrder . ASC ) ; return new NestedQueryBuilder ( <str> , RandomQueryBuilder . createQuery ( random ( ) ) , RandomPicks . randomFrom ( random ( ) , ScoreMode . values ( ) ) , SearchContext . current ( ) = = null ? null : new QueryInnerHits ( <str> , innerHit ) ) ; } @Override protected void doAssertLuceneQuery ( NestedQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { QueryBuilder innerQueryBuilder = queryBuilder . query ( ) ; if ( innerQueryBuilder instanceof EmptyQueryBuilder ) { assertNull ( query ) ; } else { assertThat ( query , instanceOf ( ToParentBlockJoinQuery . class ) ) ; ToParentBlockJoinQuery parentBlockJoinQuery = ( ToParentBlockJoinQuery ) query ; } if ( queryBuilder . innerHit ( ) ! = null ) { assertNotNull ( SearchContext . current ( ) ) ; if ( query ! = null ) { assertNotNull ( SearchContext . current ( ) . innerHits ( ) ) ; assertEquals ( <int> , SearchContext . current ( ) . innerHits ( ) . getInnerHits ( ) . size ( ) ) ; assertTrue ( SearchContext . current ( ) . innerHits ( ) . getInnerHits ( ) . containsKey ( <str> ) ) ; InnerHitsContext . BaseInnerHits innerHits = SearchContext . current ( ) . innerHits ( ) . getInnerHits ( ) . get ( <str> ) ; assertEquals ( innerHits . size ( ) , <int> ) ; assertEquals ( innerHits . sort ( ) . getSort ( ) . length , <int> ) ; assertEquals ( innerHits . sort ( ) . getSort ( ) [ <int> ] . getField ( ) , STRING_FIELD_NAME ) ; } else { assertNull ( SearchContext . current ( ) . innerHits ( ) ) ; } } } public void testValidate ( ) { try { new NestedQueryBuilder ( null , EmptyQueryBuilder . PROTOTYPE ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new NestedQueryBuilder ( <str> , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } NestedQueryBuilder nestedQueryBuilder = new NestedQueryBuilder ( <str> , EmptyQueryBuilder . PROTOTYPE ) ; try { nestedQueryBuilder . scoreMode ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; NestedQueryBuilder parsed = ( NestedQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , ScoreMode . Avg , parsed . scoreMode ( ) ) ; } } 

package org . gradle . api . internal . tasks . compile . incremental . jar ; import org . gradle . api . internal . file . FileOperations ; import org . gradle . api . internal . tasks . compile . incremental . deps . DependentsSet ; import org . gradle . api . internal . tasks . compile . incremental . recomp . RecompilationSpec ; import org . gradle . api . tasks . incremental . InputFileDetails ; public class JarChangeProcessor { private final FileOperations fileOperations ; private final JarClasspathSnapshot jarClasspathSnapshot ; private final PreviousCompilation previousCompilation ; public JarChangeProcessor ( FileOperations fileOperations , JarClasspathSnapshot jarClasspathSnapshot , PreviousCompilation previousCompilation ) { this . fileOperations = fileOperations ; this . jarClasspathSnapshot = jarClasspathSnapshot ; this . previousCompilation = previousCompilation ; } public void processChange ( InputFileDetails input , RecompilationSpec spec ) { JarArchive jarArchive = new JarArchive ( input . getFile ( ) , fileOperations . zipTree ( input . getFile ( ) ) ) ; JarChangeDependentsFinder dependentsFinder = new JarChangeDependentsFinder ( jarClasspathSnapshot , previousCompilation ) ; DependentsSet actualDependents = dependentsFinder . getActualDependents ( input , jarArchive ) ; if ( actualDependents . isDependencyToAll ( ) ) { spec . setFullRebuildCause ( actualDependents . getDescription ( ) , input . getFile ( ) ) ; return ; } spec . getClassNames ( ) . addAll ( actualDependents . getDependentClasses ( ) ) ; } } 

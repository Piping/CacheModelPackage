package com . badlogic . gdx . utils ; import static org . junit . Assert . * ; import java . util . Iterator ; import org . junit . Test ; public class QueueTest { @Test public void resizableQueueTest ( ) { final Queue < Integer > q = new Queue < Integer > ( <int> ) ; assertTrue ( <str> , q . size = = <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { for ( int j = <int> ; j < i ; j + + ) { try { q . addLast ( j ) ; } catch ( IllegalStateException e ) { fail ( <str> + j + <str> + i + <str> ) ; } final Integer peeked = q . last ( ) ; assertTrue ( <str> + peeked + <str> + j + <str> + i + <str> , peeked . equals ( j ) ) ; final int size = q . size ; assertTrue ( <str> + ( j + <int> ) + <str> + size + <str> + i + <str> , size = = j + <int> ) ; } if ( i ! = <int> ) { final Integer peek = q . first ( ) ; assertTrue ( <str> + peek + <str> + i + <str> , peek = = <int> ) ; } for ( int j = <int> ; j < i ; j + + ) { final Integer pop = q . removeFirst ( ) ; assertTrue ( <str> + j + <str> + pop + <str> + i + <str> , pop = = j ) ; final int size = q . size ; assertTrue ( <str> + ( i - <int> - j ) + <str> + size + <str> + i + <str> , size = = i - <int> - j ) ; } assertTrue ( <str> + i , q . size = = <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { q . addLast ( <int> ) ; } q . clear ( ) ; assertTrue ( <str> , q . size = = <int> ) ; } @Test public void resizableDequeTest ( ) { final Queue < Integer > q = new Queue < Integer > ( <int> ) ; assertTrue ( <str> , q . size = = <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { for ( int j = <int> ; j < i ; j + + ) { try { q . addFirst ( j ) ; } catch ( IllegalStateException e ) { fail ( <str> + j + <str> + i + <str> ) ; } final Integer peeked = q . first ( ) ; assertTrue ( <str> + peeked + <str> + j + <str> + i + <str> , peeked . equals ( j ) ) ; final int size = q . size ; assertTrue ( <str> + ( j + <int> ) + <str> + size + <str> + i + <str> , size = = j + <int> ) ; } if ( i ! = <int> ) { final Integer peek = q . last ( ) ; assertTrue ( <str> + peek + <str> + i + <str> , peek = = <int> ) ; } for ( int j = <int> ; j < i ; j + + ) { final Integer pop = q . removeLast ( ) ; assertTrue ( <str> + j + <str> + pop + <str> + i + <str> , pop = = j ) ; final int size = q . size ; assertTrue ( <str> + ( i - <int> - j ) + <str> + size + <str> + i + <str> , size = = i - <int> - j ) ; } assertTrue ( <str> + i , q . size = = <int> ) ; } for ( int i = <int> ; i < <int> ; i + + ) { q . addFirst ( <int> ) ; } q . clear ( ) ; assertTrue ( <str> , q . size = = <int> ) ; } @Test public void getTest ( ) { final Queue < Integer > q = new Queue < Integer > ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { for ( int j = <int> ; j < <int> ; j + + ) { q . addLast ( j ) ; } assertEquals ( <str> + i + <str> , q . get ( <int> ) , q . first ( ) ) ; assertEquals ( <str> + i + <str> , q . get ( q . size - <int> ) , q . last ( ) ) ; for ( int j = <int> ; j < <int> ; j + + ) { assertTrue ( q . get ( j ) = = j ) ; } for ( int j = <int> ; j < <int> - <int> ; j + + ) { q . removeFirst ( ) ; assertEquals ( <str> + i + <str> , q . get ( <int> ) , q . first ( ) ) ; } q . removeFirst ( ) ; assert q . size = = <int> ; try { q . get ( <int> ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException ignore ) { } } } @Test public void removeTest ( ) { final Queue < Integer > q = new Queue < Integer > ( ) ; for ( int j = <int> ; j < = <int> ; j + + ) q . addLast ( j ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; q . removeIndex ( <int> ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> , <int> ) ; q . removeIndex ( <int> ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> ) ; q . removeIndex ( <int> ) ; assertValues ( q , <int> , <int> , <int> , <int> ) ; q . removeIndex ( <int> ) ; assertValues ( q , <int> , <int> , <int> ) ; q . clear ( ) ; for ( int j = <int> ; j > = <int> ; j - - ) q . addFirst ( j ) ; for ( int j = <int> ; j < = <int> ; j + + ) q . addLast ( j ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; q . removeIndex ( <int> ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> , <int> ) ; q . removeIndex ( <int> ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> ) ; q . clear ( ) ; for ( int j = <int> ; j > = <int> ; j - - ) q . addFirst ( j ) ; for ( int j = <int> ; j < = <int> ; j + + ) q . addLast ( j ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; q . removeIndex ( <int> ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> , <int> ) ; q . removeIndex ( <int> ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> ) ; } @Test public void indexOfTest ( ) { final Queue < Integer > q = new Queue < Integer > ( ) ; for ( int j = <int> ; j < = <int> ; j + + ) q . addLast ( j ) ; for ( int j = <int> ; j < = <int> ; j + + ) assertEquals ( q . indexOf ( j , false ) , j ) ; q . clear ( ) ; for ( int j = <int> ; j > = <int> ; j - - ) q . addFirst ( j ) ; for ( int j = <int> ; j < = <int> ; j + + ) q . addLast ( j ) ; for ( int j = <int> ; j < = <int> ; j + + ) assertEquals ( q . indexOf ( j , false ) , j ) ; } @Test public void iteratorTest ( ) { final Queue < Integer > q = new Queue < Integer > ( ) ; for ( int j = <int> ; j < = <int> ; j + + ) q . addLast ( j ) ; Iterator < Integer > iter = q . iterator ( ) ; for ( int j = <int> ; j < = <int> ; j + + ) assertEquals ( iter . next ( ) . intValue ( ) , j ) ; iter = q . iterator ( ) ; iter . next ( ) ; iter . remove ( ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> , <int> ) ; iter . next ( ) ; iter . remove ( ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> ) ; iter . next ( ) ; iter . next ( ) ; iter . remove ( ) ; assertValues ( q , <int> , <int> , <int> , <int> ) ; iter . next ( ) ; iter . next ( ) ; iter . next ( ) ; iter . remove ( ) ; assertValues ( q , <int> , <int> , <int> ) ; q . clear ( ) ; for ( int j = <int> ; j > = <int> ; j - - ) q . addFirst ( j ) ; for ( int j = <int> ; j < = <int> ; j + + ) q . addLast ( j ) ; iter = q . iterator ( ) ; for ( int j = <int> ; j < = <int> ; j + + ) assertEquals ( iter . next ( ) . intValue ( ) , j ) ; iter = q . iterator ( ) ; iter . next ( ) ; iter . remove ( ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> , <int> ) ; iter . next ( ) ; iter . remove ( ) ; assertValues ( q , <int> , <int> , <int> , <int> , <int> ) ; iter . next ( ) ; iter . next ( ) ; iter . remove ( ) ; assertValues ( q , <int> , <int> , <int> , <int> ) ; iter . next ( ) ; iter . next ( ) ; iter . next ( ) ; iter . remove ( ) ; assertValues ( q , <int> , <int> , <int> ) ; } @Test public void toStringTest ( ) { Queue < Integer > q = new Queue < Integer > ( <int> ) ; assertTrue ( q . toString ( ) . equals ( <str> ) ) ; q . addLast ( <int> ) ; assertTrue ( q . toString ( ) . equals ( <str> ) ) ; q . addLast ( <int> ) ; q . addLast ( <int> ) ; q . addLast ( <int> ) ; assertTrue ( q . toString ( ) . equals ( <str> ) ) ; } @Test public void hashEqualsText ( ) { Queue < Integer > q1 = new Queue < Integer > ( ) ; Queue < Integer > q2 = new Queue < Integer > ( ) ; assertEqualsAndHash ( q1 , q2 ) ; q1 . addFirst ( <int> ) ; assertNotEquals ( q1 , q2 ) ; q2 . addFirst ( <int> ) ; assertEqualsAndHash ( q1 , q2 ) ; q1 . clear ( ) ; q1 . addLast ( <int> ) ; q1 . addLast ( <int> ) ; q2 . addLast ( <int> ) ; assertEqualsAndHash ( q1 , q2 ) ; for ( int i = <int> ; i < <int> ; i + + ) { q1 . addLast ( i ) ; q1 . addLast ( i ) ; q1 . removeFirst ( ) ; assertNotEquals ( q1 , q2 ) ; q2 . addLast ( i ) ; q2 . addLast ( i ) ; q2 . removeFirst ( ) ; assertEqualsAndHash ( q1 , q2 ) ; } } private void assertEqualsAndHash ( Queue < ? > q1 , Queue < ? > q2 ) { assertEquals ( q1 , q2 ) ; assertEquals ( <str> , q1 . hashCode ( ) , q2 . hashCode ( ) ) ; } private void assertValues ( Queue < Integer > q , Integer . . . values ) { for ( int i = <int> , n = values . length ; i < n ; i + + ) if ( values [ i ] ! = q . get ( i ) ) fail ( q + <str> + new Array ( values ) ) ; } } 

package java . nio ; import com . google . gwt . corp . compatibility . Numbers ; class StringByteBuffer extends BaseByteBuffer { private String s ; StringByteBuffer ( String s ) { super ( s . length ( ) ) ; this . s = s ; order ( ByteOrder . LITTLE_ENDIAN ) ; } StringByteBuffer ( String s , int position , int limit ) { this ( s ) ; this . position = position ; this . limit = limit ; } public ByteBuffer asReadOnlyBuffer ( ) { return this ; } byte [ ] protectedArray ( ) { throw new UnsupportedOperationException ( ) ; } int protectedArrayOffset ( ) { throw new UnsupportedOperationException ( ) ; } boolean protectedHasArray ( ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer compact ( ) { return this ; } @Override public ByteBuffer duplicate ( ) { return this ; } @Override public byte get ( ) { return get ( position + + ) ; } @Override public byte get ( int index ) { return get ( s , index ) ; } public final double getDouble ( ) { return Numbers . longBitsToDouble ( getLong ( ) ) ; } public final double getDouble ( int index ) { return Numbers . longBitsToDouble ( getLong ( index ) ) ; } public final float getFloat ( ) { return Numbers . intBitsToFloat ( getInt ( ) ) ; } public final float getFloat ( int index ) { return Numbers . intBitsToFloat ( getInt ( index ) ) ; } public final int getInt ( ) { int newPosition = position + <int> ; int result = loadInt ( position ) ; position = newPosition ; return result ; } public final int getInt ( int index ) { return loadInt ( index ) ; } public final long getLong ( ) { throw new UnsupportedOperationException ( ) ; } public final long getLong ( int index ) { throw new UnsupportedOperationException ( ) ; } public final short getShort ( ) { int newPosition = position + <int> ; short result = loadShort ( position ) ; position = newPosition ; return result ; } public final short getShort ( int index ) { return loadShort ( index ) ; } @Override public boolean isDirect ( ) { return false ; } @Override public ByteBuffer put ( byte b ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer put ( int index , byte b ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putDouble ( double value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putDouble ( int index , double value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putFloat ( float value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putFloat ( int index , float value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putInt ( int value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putInt ( int index , int value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putLong ( long value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putLong ( int index , long value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putShort ( short value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer putShort ( int index , short value ) { throw new UnsupportedOperationException ( ) ; } @Override public ByteBuffer slice ( ) { StringByteBuffer slice = new StringByteBuffer ( s , position , limit ) ; slice . order = order ; return slice ; } @Override public boolean isReadOnly ( ) { return true ; } private native byte get ( String s , int i ) ; protected final int loadInt ( int baseOffset ) { int bytes = <int> ; for ( int i = <int> ; i > = <int> ; i - - ) { bytes = bytes < < <int> ; bytes = bytes | ( get ( baseOffset + i ) & <hex> ) ; } return bytes ; } protected final short loadShort ( int baseOffset ) { short bytes = <int> ; bytes = ( short ) ( get ( baseOffset + <int> ) < < <int> ) ; bytes | = ( get ( baseOffset ) & <hex> ) ; return bytes ; } } 

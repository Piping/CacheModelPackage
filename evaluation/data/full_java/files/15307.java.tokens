package org . gradle . jvm . application . tasks ; import com . google . common . base . Function ; import com . google . common . collect . Iterables ; import com . google . common . collect . Lists ; import org . gradle . api . Incubating ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . ConventionTask ; import org . gradle . api . internal . plugins . StartScriptGenerator ; import org . gradle . api . internal . plugins . UnixStartScriptGenerator ; import org . gradle . api . internal . plugins . WindowsStartScriptGenerator ; import org . gradle . api . tasks . * ; import org . gradle . jvm . application . scripts . ScriptGenerator ; import org . gradle . util . GUtil ; import java . io . File ; public class CreateStartScripts extends ConventionTask { private File outputDir ; private String mainClassName ; private Iterable < String > defaultJvmOpts = Lists . newLinkedList ( ) ; private String applicationName ; private String optsEnvironmentVar ; private String exitEnvironmentVar ; private FileCollection classpath ; private ScriptGenerator unixStartScriptGenerator = new UnixStartScriptGenerator ( ) ; private ScriptGenerator windowsStartScriptGenerator = new WindowsStartScriptGenerator ( ) ; @Input @Optional public String getOptsEnvironmentVar ( ) { if ( GUtil . isTrue ( optsEnvironmentVar ) ) { return optsEnvironmentVar ; } if ( ! GUtil . isTrue ( getApplicationName ( ) ) ) { return null ; } return GUtil . toConstant ( getApplicationName ( ) ) + <str> ; } @Input @Optional public String getExitEnvironmentVar ( ) { if ( GUtil . isTrue ( exitEnvironmentVar ) ) { return exitEnvironmentVar ; } if ( ! GUtil . isTrue ( getApplicationName ( ) ) ) { return null ; } return GUtil . toConstant ( getApplicationName ( ) ) + <str> ; } public File getUnixScript ( ) { return new File ( getOutputDir ( ) , getApplicationName ( ) ) ; } public File getWindowsScript ( ) { return new File ( getOutputDir ( ) , getApplicationName ( ) + <str> ) ; } @OutputDirectory public File getOutputDir ( ) { return outputDir ; } public void setOutputDir ( File outputDir ) { this . outputDir = outputDir ; } @Input public String getMainClassName ( ) { return mainClassName ; } public void setMainClassName ( String mainClassName ) { this . mainClassName = mainClassName ; } @Input @Optional public Iterable < String > getDefaultJvmOpts ( ) { return defaultJvmOpts ; } public void setDefaultJvmOpts ( Iterable < String > defaultJvmOpts ) { this . defaultJvmOpts = defaultJvmOpts ; } @Input public String getApplicationName ( ) { return applicationName ; } public void setApplicationName ( String applicationName ) { this . applicationName = applicationName ; } public void setOptsEnvironmentVar ( String optsEnvironmentVar ) { this . optsEnvironmentVar = optsEnvironmentVar ; } public void setExitEnvironmentVar ( String exitEnvironmentVar ) { this . exitEnvironmentVar = exitEnvironmentVar ; } @InputFiles public FileCollection getClasspath ( ) { return classpath ; } public void setClasspath ( FileCollection classpath ) { this . classpath = classpath ; } @Incubating public ScriptGenerator getUnixStartScriptGenerator ( ) { return unixStartScriptGenerator ; } public void setUnixStartScriptGenerator ( ScriptGenerator unixStartScriptGenerator ) { this . unixStartScriptGenerator = unixStartScriptGenerator ; } @Incubating public ScriptGenerator getWindowsStartScriptGenerator ( ) { return windowsStartScriptGenerator ; } public void setWindowsStartScriptGenerator ( ScriptGenerator windowsStartScriptGenerator ) { this . windowsStartScriptGenerator = windowsStartScriptGenerator ; } @TaskAction public void generate ( ) { StartScriptGenerator generator = new StartScriptGenerator ( unixStartScriptGenerator , windowsStartScriptGenerator ) ; generator . setApplicationName ( getApplicationName ( ) ) ; generator . setMainClassName ( getMainClassName ( ) ) ; generator . setDefaultJvmOpts ( getDefaultJvmOpts ( ) ) ; generator . setOptsEnvironmentVar ( getOptsEnvironmentVar ( ) ) ; generator . setExitEnvironmentVar ( getExitEnvironmentVar ( ) ) ; generator . setClasspath ( getRelativeClasspath ( ) ) ; generator . setScriptRelPath ( <str> + getUnixScript ( ) . getName ( ) ) ; generator . generateUnixScript ( getUnixScript ( ) ) ; generator . generateWindowsScript ( getWindowsScript ( ) ) ; } private Iterable < String > getRelativeClasspath ( ) { return Iterables . transform ( getClasspath ( ) . getFiles ( ) , new Function < File , String > ( ) { @Override public String apply ( File input ) { return <str> + input . getName ( ) ; } } ) ; } } 

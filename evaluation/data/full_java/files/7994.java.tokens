package org . elasticsearch . common . xcontent ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . xcontent . XContentParser . Token ; import org . elasticsearch . test . ESTestCase ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; public abstract class BaseXContentTestCase extends ESTestCase { public abstract XContentType xcontentType ( ) ; public void testBasics ( ) throws IOException { ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; try ( XContentGenerator generator = xcontentType ( ) . xContent ( ) . createGenerator ( os ) ) { generator . writeStartObject ( ) ; generator . writeEndObject ( ) ; } byte [ ] data = os . toByteArray ( ) ; assertEquals ( xcontentType ( ) , XContentFactory . xContentType ( data ) ) ; } public void testRawField ( ) throws Exception { for ( boolean useStream : new boolean [ ] { false , true } ) { for ( XContentType xcontentType : XContentType . values ( ) ) { doTestRawField ( xcontentType . xContent ( ) , useStream ) ; } } } void doTestRawField ( XContent source , boolean useStream ) throws Exception { ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; try ( XContentGenerator generator = source . createGenerator ( os ) ) { generator . writeStartObject ( ) ; generator . writeFieldName ( <str> ) ; generator . writeNull ( ) ; generator . writeEndObject ( ) ; } final byte [ ] rawData = os . toByteArray ( ) ; os = new ByteArrayOutputStream ( ) ; try ( XContentGenerator generator = xcontentType ( ) . xContent ( ) . createGenerator ( os ) ) { generator . writeStartObject ( ) ; if ( useStream ) { generator . writeRawField ( <str> , new ByteArrayInputStream ( rawData ) ) ; } else { generator . writeRawField ( <str> , new BytesArray ( rawData ) ) ; } generator . writeEndObject ( ) ; } XContentParser parser = xcontentType ( ) . xContent ( ) . createParser ( os . toByteArray ( ) ) ; assertEquals ( Token . START_OBJECT , parser . nextToken ( ) ) ; assertEquals ( Token . FIELD_NAME , parser . nextToken ( ) ) ; assertEquals ( <str> , parser . currentName ( ) ) ; assertEquals ( Token . START_OBJECT , parser . nextToken ( ) ) ; assertEquals ( Token . FIELD_NAME , parser . nextToken ( ) ) ; assertEquals ( <str> , parser . currentName ( ) ) ; assertEquals ( Token . VALUE_NULL , parser . nextToken ( ) ) ; assertEquals ( Token . END_OBJECT , parser . nextToken ( ) ) ; assertEquals ( Token . END_OBJECT , parser . nextToken ( ) ) ; assertNull ( parser . nextToken ( ) ) ; } public void testRawValue ( ) throws Exception { for ( XContentType xcontentType : XContentType . values ( ) ) { doTestRawValue ( xcontentType . xContent ( ) ) ; } } void doTestRawValue ( XContent source ) throws Exception { ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; try ( XContentGenerator generator = source . createGenerator ( os ) ) { generator . writeStartObject ( ) ; generator . writeFieldName ( <str> ) ; generator . writeNull ( ) ; generator . writeEndObject ( ) ; } final byte [ ] rawData = os . toByteArray ( ) ; os = new ByteArrayOutputStream ( ) ; try ( XContentGenerator generator = xcontentType ( ) . xContent ( ) . createGenerator ( os ) ) { generator . writeRawValue ( new BytesArray ( rawData ) ) ; } XContentParser parser = xcontentType ( ) . xContent ( ) . createParser ( os . toByteArray ( ) ) ; assertEquals ( Token . START_OBJECT , parser . nextToken ( ) ) ; assertEquals ( Token . FIELD_NAME , parser . nextToken ( ) ) ; assertEquals ( <str> , parser . currentName ( ) ) ; assertEquals ( Token . VALUE_NULL , parser . nextToken ( ) ) ; assertEquals ( Token . END_OBJECT , parser . nextToken ( ) ) ; assertNull ( parser . nextToken ( ) ) ; } } 

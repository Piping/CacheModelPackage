package org . gradle . language . nativeplatform . internal ; import org . gradle . api . DefaultTask ; import org . gradle . api . Project ; import org . gradle . api . tasks . util . PatternSet ; import org . gradle . language . base . LanguageSourceSet ; import org . gradle . language . base . internal . LanguageSourceSetInternal ; import org . gradle . language . base . internal . registry . LanguageTransform ; import org . gradle . language . nativeplatform . tasks . AbstractNativeCompileTask ; import org . gradle . language . nativeplatform . tasks . AbstractNativeSourceCompileTask ; import org . gradle . nativeplatform . ObjectFile ; import org . gradle . nativeplatform . internal . NativeBinarySpecInternal ; import org . gradle . nativeplatform . toolchain . internal . PreCompiledHeader ; import java . io . File ; public class SourceCompileTaskConfig extends CompileTaskConfig { public SourceCompileTaskConfig ( LanguageTransform < ? extends LanguageSourceSet , ObjectFile > languageTransform , Class < ? extends DefaultTask > taskType ) { super ( languageTransform , taskType ) ; } protected void configureCompileTask ( AbstractNativeCompileTask abstractTask , final NativeBinarySpecInternal binary , final LanguageSourceSetInternal sourceSet ) { AbstractNativeSourceCompileTask task = ( AbstractNativeSourceCompileTask ) abstractTask ; task . setDescription ( String . format ( <str> , sourceSet , binary ) ) ; task . source ( sourceSet . getSource ( ) ) ; final Project project = task . getProject ( ) ; task . setObjectFileDir ( new File ( binary . getNamingScheme ( ) . getOutputDirectory ( project . getBuildDir ( ) , <str> ) , sourceSet . getProjectScopedName ( ) ) ) ; if ( sourceSet instanceof DependentSourceSetInternal & & ( ( DependentSourceSetInternal ) sourceSet ) . getPreCompiledHeader ( ) ! = null ) { final DependentSourceSetInternal dependentSourceSet = ( DependentSourceSetInternal ) sourceSet ; PreCompiledHeader pch = binary . getPrefixFileToPCH ( ) . get ( dependentSourceSet . getPrefixHeaderFile ( ) ) ; pch . setPrefixHeaderFile ( dependentSourceSet . getPrefixHeaderFile ( ) ) ; pch . setIncludeString ( dependentSourceSet . getPreCompiledHeader ( ) ) ; task . setPreCompiledHeader ( pch ) ; } binary . binaryInputs ( task . getOutputs ( ) . getFiles ( ) . getAsFileTree ( ) . matching ( new PatternSet ( ) . include ( <str> , <str> ) ) ) ; } } 

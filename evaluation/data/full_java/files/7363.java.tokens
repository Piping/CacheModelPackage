package org . elasticsearch . search . aggregations . metrics . tophits ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . script . Script ; import org . elasticsearch . search . aggregations . AbstractAggregationBuilder ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . search . highlight . HighlightBuilder ; import org . elasticsearch . search . sort . SortBuilder ; import org . elasticsearch . search . sort . SortOrder ; import java . io . IOException ; public class TopHitsBuilder extends AbstractAggregationBuilder { private SearchSourceBuilder sourceBuilder ; public TopHitsBuilder ( String name ) { super ( name , InternalTopHits . TYPE . name ( ) ) ; } public TopHitsBuilder setFrom ( int from ) { sourceBuilder ( ) . from ( from ) ; return this ; } public TopHitsBuilder setSize ( int size ) { sourceBuilder ( ) . size ( size ) ; return this ; } public TopHitsBuilder setTrackScores ( boolean trackScores ) { sourceBuilder ( ) . trackScores ( trackScores ) ; return this ; } public TopHitsBuilder setExplain ( boolean explain ) { sourceBuilder ( ) . explain ( explain ) ; return this ; } public TopHitsBuilder setVersion ( boolean version ) { sourceBuilder ( ) . version ( version ) ; return this ; } public TopHitsBuilder addField ( String field ) { sourceBuilder ( ) . field ( field ) ; return this ; } public TopHitsBuilder setNoFields ( ) { sourceBuilder ( ) . noFields ( ) ; return this ; } public TopHitsBuilder setFetchSource ( boolean fetch ) { sourceBuilder ( ) . fetchSource ( fetch ) ; return this ; } public TopHitsBuilder setFetchSource ( @Nullable String include , @Nullable String exclude ) { sourceBuilder ( ) . fetchSource ( include , exclude ) ; return this ; } public TopHitsBuilder setFetchSource ( @Nullable String [ ] includes , @Nullable String [ ] excludes ) { sourceBuilder ( ) . fetchSource ( includes , excludes ) ; return this ; } public TopHitsBuilder addFieldDataField ( String name ) { sourceBuilder ( ) . fieldDataField ( name ) ; return this ; } public TopHitsBuilder addScriptField ( String name , Script script ) { sourceBuilder ( ) . scriptField ( name , script ) ; return this ; } public TopHitsBuilder addSort ( String field , SortOrder order ) { sourceBuilder ( ) . sort ( field , order ) ; return this ; } public TopHitsBuilder addSort ( SortBuilder sort ) { sourceBuilder ( ) . sort ( sort ) ; return this ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( getName ( ) ) . field ( type ) ; sourceBuilder ( ) . toXContent ( builder , params ) ; return builder . endObject ( ) ; } private SearchSourceBuilder sourceBuilder ( ) { if ( sourceBuilder = = null ) { sourceBuilder = new SearchSourceBuilder ( ) ; } return sourceBuilder ; } public BytesReference highlighter ( ) { return sourceBuilder ( ) . highlighter ( ) ; } public TopHitsBuilder highlighter ( HighlightBuilder highlightBuilder ) { sourceBuilder ( ) . highlighter ( highlightBuilder ) ; return this ; } } 

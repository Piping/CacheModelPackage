package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . internal . ui . AbstractDebugListSelectionDialog ; import org . eclipse . debug . internal . ui . IDebugHelpContextIds ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . viewers . IBaseLabelProvider ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . ILabelProviderListener ; import org . eclipse . swt . SWT ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . widgets . Shell ; public class SelectLaunchModesDialog extends AbstractDebugListSelectionDialog { class OptionsLabelProvider implements ILabelProvider { @Override public Image getImage ( Object element ) { return null ; } @Override public String getText ( Object element ) { Set < ? > vals = ( Set < ? > ) element ; Set < String > modes = new HashSet < String > ( vals . size ( ) ) ; for ( Object o : vals ) { modes . add ( ( String ) o ) ; } List < String > names = LaunchConfigurationPresentationManager . getDefault ( ) . getLaunchModeNames ( modes ) ; return names . toString ( ) ; } @Override public void addListener ( ILabelProviderListener listener ) { } @Override public void dispose ( ) { } @Override public boolean isLabelProperty ( Object element , String property ) { return false ; } @Override public void removeListener ( ILabelProviderListener listener ) { } } private List < Set < String > > fValidModes = null ; public SelectLaunchModesDialog ( Shell parentShell , String mode , ILaunchConfiguration configuration ) throws CoreException { super ( parentShell ) ; super . setTitle ( LaunchConfigurationsMessages . SelectLaunchOptionsDialog_3 ) ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; fValidModes = new ArrayList < Set < String > > ( ) ; Set < Set < String > > modes = configuration . getType ( ) . getSupportedModeCombinations ( ) ; for ( Set < String > modeset : modes ) { if ( modeset . contains ( mode ) ) { fValidModes . add ( modeset ) ; } } } @Override protected String getDialogSettingsId ( ) { return IDebugUIConstants . PLUGIN_ID + <str> ; } @Override protected IBaseLabelProvider getLabelProvider ( ) { return new OptionsLabelProvider ( ) ; } @Override protected Object getViewerInput ( ) { return fValidModes . toArray ( ) ; } @Override protected String getHelpContextId ( ) { return IDebugHelpContextIds . SELECT_LAUNCH_MODES_DIALOG ; } @Override protected String getViewerLabel ( ) { return LaunchConfigurationsMessages . SelectLaunchOptionsDialog_4 ; } } 

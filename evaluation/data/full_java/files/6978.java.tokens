package org . elasticsearch . rest . action . admin . cluster . tasks ; import org . elasticsearch . action . admin . cluster . tasks . PendingClusterTasksRequest ; import org . elasticsearch . action . admin . cluster . tasks . PendingClusterTasksResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestToXContentListener ; public class RestPendingClusterTasksAction extends BaseRestHandler { @Inject public RestPendingClusterTasksAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( RestRequest . Method . GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { PendingClusterTasksRequest pendingClusterTasksRequest = new PendingClusterTasksRequest ( ) ; pendingClusterTasksRequest . masterNodeTimeout ( request . paramAsTime ( <str> , pendingClusterTasksRequest . masterNodeTimeout ( ) ) ) ; pendingClusterTasksRequest . local ( request . paramAsBoolean ( <str> , pendingClusterTasksRequest . local ( ) ) ) ; client . admin ( ) . cluster ( ) . pendingClusterTasks ( pendingClusterTasksRequest , new RestToXContentListener < PendingClusterTasksResponse > ( channel ) ) ; } } 

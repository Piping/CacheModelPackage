package org . gradle . initialization ; import org . gradle . StartParameter ; import org . gradle . api . Project ; import org . gradle . test . fixtures . file . TestNameTestDirectoryProvider ; import org . gradle . util . GUtil ; import org . gradle . util . WrapUtil ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import java . io . File ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import java . util . Properties ; import static org . junit . Assert . * ; public class DefaultGradlePropertiesLoaderTest { private DefaultGradlePropertiesLoader gradlePropertiesLoader ; private File gradleUserHomeDir ; private File settingsDir ; private Map < String , String > systemProperties = new HashMap < String , String > ( ) ; private Map < String , String > envProperties = new HashMap < String , String > ( ) ; private StartParameter startParameter = new StartParameter ( ) ; @Rule public TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider ( ) ; @Before public void setUp ( ) { gradleUserHomeDir = tmpDir . createDir ( <str> ) ; settingsDir = tmpDir . createDir ( <str> ) ; gradlePropertiesLoader = new DefaultGradlePropertiesLoader ( startParameter ) ; startParameter . setGradleUserHomeDir ( gradleUserHomeDir ) ; } private void writePropertyFile ( File location , Map < String , String > propertiesMap ) { Properties properties = new Properties ( ) ; properties . putAll ( propertiesMap ) ; GUtil . saveProperties ( properties , new File ( location , Project . GRADLE_PROPERTIES ) ) ; } @Test public void mergeAddsPropertiesFromUserPropertiesFile ( ) { writePropertyFile ( gradleUserHomeDir , GUtil . map ( <str> , <str> ) ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( Collections . < String , String > emptyMap ( ) ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void mergeAddsPropertiesFromSettingsPropertiesFile ( ) { writePropertyFile ( settingsDir , GUtil . map ( <str> , <str> ) ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( Collections . < String , String > emptyMap ( ) ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void mergeAddsPropertiesFromEnvironmentVariablesWithPrefix ( ) { envProperties = GUtil . map ( IGradlePropertiesLoader . ENV_PROJECT_PROPERTIES_PREFIX + <str> , <str> , <str> , <str> ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( Collections . < String , String > emptyMap ( ) ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void mergeAddsPropertiesFromSystemPropertiesWithPrefix ( ) { systemProperties = GUtil . map ( IGradlePropertiesLoader . SYSTEM_PROJECT_PROPERTIES_PREFIX + <str> , <str> , <str> , <str> ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( Collections . < String , String > emptyMap ( ) ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void mergeAddsPropertiesFromStartParameter ( ) { startParameter . setProjectProperties ( GUtil . map ( <str> , <str> ) ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( Collections . < String , String > emptyMap ( ) ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void projectPropertiesHavePrecedenceOverSettingsPropertiesFile ( ) { writePropertyFile ( settingsDir , GUtil . map ( <str> , <str> ) ) ; Map < String , String > projectProperties = GUtil . map ( <str> , <str> ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( projectProperties ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void userPropertiesFileHasPrecedenceOverSettingsPropertiesFile ( ) { writePropertyFile ( gradleUserHomeDir , GUtil . map ( <str> , <str> ) ) ; writePropertyFile ( settingsDir , GUtil . map ( <str> , <str> ) ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( Collections . < String , String > emptyMap ( ) ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void userPropertiesFileHasPrecedenceOverProjectProperties ( ) { writePropertyFile ( gradleUserHomeDir , GUtil . map ( <str> , <str> ) ) ; writePropertyFile ( settingsDir , GUtil . map ( <str> , <str> ) ) ; Map < String , String > projectProperties = GUtil . map ( <str> , <str> ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( projectProperties ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void environmentVariablesHavePrecedenceOverProjectProperties ( ) { writePropertyFile ( gradleUserHomeDir , GUtil . map ( <str> , <str> ) ) ; writePropertyFile ( settingsDir , GUtil . map ( <str> , <str> ) ) ; Map < String , String > projectProperties = GUtil . map ( <str> , <str> ) ; envProperties = GUtil . map ( IGradlePropertiesLoader . ENV_PROJECT_PROPERTIES_PREFIX + <str> , <str> ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( projectProperties ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void systemPropertiesHavePrecedenceOverEnvironmentVariables ( ) { writePropertyFile ( gradleUserHomeDir , GUtil . map ( <str> , <str> ) ) ; writePropertyFile ( settingsDir , GUtil . map ( <str> , <str> ) ) ; Map < String , String > projectProperties = GUtil . map ( <str> , <str> ) ; envProperties = GUtil . map ( IGradlePropertiesLoader . ENV_PROJECT_PROPERTIES_PREFIX + <str> , <str> ) ; systemProperties = GUtil . map ( IGradlePropertiesLoader . SYSTEM_PROJECT_PROPERTIES_PREFIX + <str> , <str> ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( projectProperties ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void startParameterPropertiesHavePrecedenceOverSystemProperties ( ) { writePropertyFile ( gradleUserHomeDir , GUtil . map ( <str> , <str> ) ) ; writePropertyFile ( settingsDir , GUtil . map ( <str> , <str> ) ) ; Map < String , String > projectProperties = GUtil . map ( <str> , <str> ) ; envProperties = GUtil . map ( IGradlePropertiesLoader . ENV_PROJECT_PROPERTIES_PREFIX + <str> , <str> ) ; systemProperties = GUtil . map ( IGradlePropertiesLoader . SYSTEM_PROJECT_PROPERTIES_PREFIX + <str> , <str> ) ; startParameter . setProjectProperties ( GUtil . map ( <str> , <str> ) ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( projectProperties ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; } @Test public void loadSetsSystemProperties ( ) { startParameter . setSystemPropertiesArgs ( WrapUtil . toMap ( <str> , <str> ) ) ; writePropertyFile ( gradleUserHomeDir , GUtil . map ( Project . SYSTEM_PROP_PREFIX + <str> , <str> ) ) ; writePropertyFile ( settingsDir , GUtil . map ( Project . SYSTEM_PROP_PREFIX + <str> , <str> , Project . SYSTEM_PROP_PREFIX + <str> , <str> ) ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; assertEquals ( <str> , System . getProperty ( <str> ) ) ; assertEquals ( <str> , System . getProperty ( <str> ) ) ; assertEquals ( <str> , System . getProperty ( <str> ) ) ; } @Test public void loadPropertiesWithNoExceptionForNonExistingUserHomeAndSettingsDir ( ) { tmpDir . getTestDirectory ( ) . deleteDir ( ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; } @Test public void reloadsProperties ( ) { writePropertyFile ( settingsDir , GUtil . map ( <str> , <str> , <str> , <str> ) ) ; File otherSettingsDir = tmpDir . createDir ( <str> ) ; writePropertyFile ( otherSettingsDir , GUtil . map ( <str> , <str> ) ) ; gradlePropertiesLoader . loadProperties ( settingsDir , startParameter , systemProperties , envProperties ) ; Map < String , String > properties = gradlePropertiesLoader . mergeProperties ( Collections . < String , String > emptyMap ( ) ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; gradlePropertiesLoader . loadProperties ( otherSettingsDir , startParameter , systemProperties , envProperties ) ; properties = gradlePropertiesLoader . mergeProperties ( Collections . < String , String > emptyMap ( ) ) ; assertEquals ( <str> , properties . get ( <str> ) ) ; assertNull ( properties . get ( <str> ) ) ; } @Test public void buildSystemProperties ( ) { System . setProperty ( <str> , <str> ) ; assertTrue ( gradlePropertiesLoader . getAllSystemProperties ( ) . containsKey ( <str> ) ) ; assertEquals ( <str> , gradlePropertiesLoader . getAllSystemProperties ( ) . get ( <str> ) ) ; } } 

package org . elasticsearch . index . mapper . copyto ; import org . apache . lucene . index . IndexableField ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . FieldMapper ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . mapper . MergeResult ; import org . elasticsearch . index . mapper . ParseContext ; import org . elasticsearch . index . mapper . ParseContext . Document ; import org . elasticsearch . index . mapper . ParsedDocument ; import org . elasticsearch . index . mapper . core . LongFieldMapper ; import org . elasticsearch . index . mapper . core . StringFieldMapper ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . startsWith ; public class CopyToMapperTests extends ESSingleNodeTestCase { @SuppressWarnings ( <str> ) public void testCopyToFieldsParsing ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . array ( <str> , <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . array ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . array ( <str> , <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; IndexService index = createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( mapping ) . get ( ) ; DocumentMapper docMapper = index . mapperService ( ) . documentMapper ( <str> ) ; FieldMapper fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; StringFieldMapper stringFieldMapper = ( StringFieldMapper ) fieldMapper ; XContentBuilder builder = jsonBuilder ( ) . startObject ( ) ; stringFieldMapper . toXContent ( builder , ToXContent . EMPTY_PARAMS ) . endObject ( ) ; builder . close ( ) ; Map < String , Object > serializedMap ; try ( XContentParser parser = JsonXContent . jsonXContent . createParser ( builder . bytes ( ) ) ) { serializedMap = parser . map ( ) ; } Map < String , Object > copyTestMap = ( Map < String , Object > ) serializedMap . get ( <str> ) ; assertThat ( copyTestMap . get ( <str> ) . toString ( ) , is ( <str> ) ) ; List < String > copyToList = ( List < String > ) copyTestMap . get ( <str> ) ; assertThat ( copyToList . size ( ) , equalTo ( <int> ) ) ; assertThat ( copyToList . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( copyToList . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <int> ) . endObject ( ) . bytes ( ) ; ParsedDocument parsedDoc = docMapper . parse ( <str> , <str> , <str> , json ) ; ParseContext . Document doc = parsedDoc . rootDoc ( ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . numericValue ( ) . intValue ( ) , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . numericValue ( ) . intValue ( ) , equalTo ( <int> ) ) ; assertNotNull ( parsedDoc . dynamicMappingsUpdate ( ) ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( parsedDoc . dynamicMappingsUpdate ( ) . toString ( ) ) . get ( ) ; fieldMapper = docMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( LongFieldMapper . class ) ) ; } public void testCopyToFieldsInnerObjectParsing ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . bytes ( ) ; ParseContext . Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; } public void testCopyToDynamicInnerObjectParsing ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; ParseContext . Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; } public void testCopyToDynamicInnerInnerObjectParsing ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; ParseContext . Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; assertThat ( doc . getFields ( <str> ) . length , equalTo ( <int> ) ) ; assertThat ( doc . getFields ( <str> ) [ <int> ] . stringValue ( ) , equalTo ( <str> ) ) ; } public void testCopyToStrictDynamicInnerObjectParsing ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; try { docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { assertThat ( ex . getMessage ( ) , startsWith ( <str> ) ) ; } } public void testCopyToInnerStrictDynamicInnerObjectParsing ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; try { docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { assertThat ( ex . getMessage ( ) , startsWith ( <str> ) ) ; } } public void testCopyToFieldMerge ( ) throws Exception { String mappingBefore = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . array ( <str> , <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; String mappingAfter = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . array ( <str> , <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper docMapperBefore = parser . parse ( mappingBefore ) ; List < String > fields = docMapperBefore . mappers ( ) . getMapper ( <str> ) . copyTo ( ) . copyToFields ( ) ; assertThat ( fields . size ( ) , equalTo ( <int> ) ) ; assertThat ( fields . get ( <int> ) , equalTo ( <str> ) ) ; assertThat ( fields . get ( <int> ) , equalTo ( <str> ) ) ; DocumentMapper docMapperAfter = parser . parse ( mappingAfter ) ; MergeResult mergeResult = docMapperBefore . merge ( docMapperAfter . mapping ( ) , true , false ) ; assertThat ( Arrays . toString ( mergeResult . buildConflicts ( ) ) , mergeResult . hasConflicts ( ) , equalTo ( false ) ) ; docMapperBefore . merge ( docMapperAfter . mapping ( ) , false , false ) ; fields = docMapperBefore . mappers ( ) . getMapper ( <str> ) . copyTo ( ) . copyToFields ( ) ; assertThat ( fields . size ( ) , equalTo ( <int> ) ) ; assertThat ( fields . get ( <int> ) , equalTo ( <str> ) ) ; assertThat ( fields . get ( <int> ) , equalTo ( <str> ) ) ; } public void testCopyToNestedField ( ) throws Exception { IndexService indexService = createIndex ( <str> ) ; DocumentMapperParser parser = indexService . mapperService ( ) . documentMapperParser ( ) ; for ( boolean mapped : new boolean [ ] { true , false } ) { XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . endObject ( ) ; for ( int i = <int> ; i < <int> ; + + i ) { if ( mapped ) { mapping = mapping . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , false ) . endObject ( ) ; } mapping = mapping . endObject ( ) . endObject ( ) ; } mapping = mapping . endObject ( ) ; DocumentMapper mapper = parser . parse ( mapping . string ( ) ) ; XContentBuilder jsonDoc = XContentFactory . jsonBuilder ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) . endArray ( ) . endObject ( ) . startObject ( ) . startArray ( <str> ) . startObject ( ) . field ( <str> , <int> ) . endObject ( ) . endArray ( ) . endObject ( ) . endArray ( ) . endObject ( ) ; ParsedDocument doc = mapper . parse ( <str> , <str> , <str> , jsonDoc . bytes ( ) ) ; assertEquals ( <int> , doc . docs ( ) . size ( ) ) ; Document nested = doc . docs ( ) . get ( <int> ) ; assertFieldValue ( nested , <str> , <int> ) ; assertFieldValue ( nested , <str> ) ; assertFieldValue ( nested , <str> ) ; nested = doc . docs ( ) . get ( <int> ) ; assertFieldValue ( nested , <str> , <int> ) ; assertFieldValue ( nested , <str> ) ; assertFieldValue ( nested , <str> ) ; nested = doc . docs ( ) . get ( <int> ) ; assertFieldValue ( nested , <str> , <int> ) ; assertFieldValue ( nested , <str> ) ; assertFieldValue ( nested , <str> ) ; Document parent = doc . docs ( ) . get ( <int> ) ; assertFieldValue ( parent , <str> ) ; assertFieldValue ( parent , <str> , <int> ) ; assertFieldValue ( parent , <str> ) ; parent = doc . docs ( ) . get ( <int> ) ; assertFieldValue ( parent , <str> ) ; assertFieldValue ( parent , <str> , <int> , <int> ) ; assertFieldValue ( parent , <str> ) ; Document root = doc . docs ( ) . get ( <int> ) ; assertFieldValue ( root , <str> , <int> , <int> , <int> ) ; assertFieldValue ( root , <str> ) ; assertFieldValue ( root , <str> ) ; } } public void testCopyToDynamicNestedObjectParsing ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endArray ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper docMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; BytesReference json = jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; try { docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; fail ( ) ; } catch ( MapperParsingException ex ) { assertThat ( ex . getMessage ( ) , startsWith ( <str> ) ) ; } } private void assertFieldValue ( Document doc , String field , Number . . . expected ) { IndexableField [ ] values = doc . getFields ( field ) ; if ( values = = null ) { values = new IndexableField [ <int> ] ; } Number [ ] actual = new Number [ values . length ] ; for ( int i = <int> ; i < values . length ; + + i ) { actual [ i ] = values [ i ] . numericValue ( ) ; } assertArrayEquals ( expected , actual ) ; } } 

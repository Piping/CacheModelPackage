package org . gradle . tooling . internal . consumer . connection ; import org . gradle . tooling . BuildAction ; import org . gradle . tooling . UnsupportedVersionException ; import org . gradle . tooling . internal . adapter . ProtocolToModelAdapter ; import org . gradle . tooling . internal . build . VersionOnlyBuildEnvironment ; import org . gradle . tooling . internal . consumer . Distribution ; import org . gradle . tooling . internal . consumer . TestExecutionRequest ; import org . gradle . tooling . internal . consumer . parameters . ConsumerOperationParameters ; import org . gradle . tooling . internal . protocol . ConnectionVersion4 ; import org . gradle . tooling . model . build . BuildEnvironment ; import org . gradle . tooling . model . internal . Exceptions ; public class UnsupportedOlderVersionConnection implements ConsumerConnection { private final Distribution distribution ; private final ProtocolToModelAdapter adapter ; private final String version ; public UnsupportedOlderVersionConnection ( Distribution distribution , ConnectionVersion4 delegate , ProtocolToModelAdapter adapter ) { this . distribution = distribution ; this . adapter = adapter ; version = delegate . getMetaData ( ) . getVersion ( ) ; } public void stop ( ) { } public String getDisplayName ( ) { return distribution . getDisplayName ( ) ; } public < T > T run ( Class < T > type , ConsumerOperationParameters operationParameters ) throws UnsupportedOperationException , IllegalStateException { if ( type . equals ( BuildEnvironment . class ) ) { return adapter . adapt ( type , doGetBuildEnvironment ( ) ) ; } throw fail ( ) ; } private Object doGetBuildEnvironment ( ) { return new VersionOnlyBuildEnvironment ( version ) ; } public < T > T run ( BuildAction < T > action , ConsumerOperationParameters operationParameters ) throws UnsupportedOperationException , IllegalStateException { return new UnsupportedActionRunner ( version ) . run ( action , operationParameters ) ; } public void runTests ( TestExecutionRequest testExecutionRequest , ConsumerOperationParameters operationParameters ) { throw Exceptions . unsupportedFeature ( operationParameters . getEntryPointName ( ) , version , <str> ) ; } private UnsupportedVersionException fail ( ) { return new UnsupportedVersionException ( String . format ( <str> , version ) ) ; } } 

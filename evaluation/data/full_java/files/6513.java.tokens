package org . elasticsearch . index . get ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . index . mapper . MapperService ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class GetField implements Streamable , Iterable < Object > { private String name ; private List < Object > values ; private GetField ( ) { } public GetField ( String name , List < Object > values ) { this . name = name ; this . values = values ; } public String getName ( ) { return name ; } public Object getValue ( ) { if ( values ! = null & & ! values . isEmpty ( ) ) { return values . get ( <int> ) ; } return null ; } public List < Object > getValues ( ) { return values ; } public boolean isMetadataField ( ) { return MapperService . isMetadataField ( name ) ; } @Override public Iterator < Object > iterator ( ) { return values . iterator ( ) ; } public static GetField readGetField ( StreamInput in ) throws IOException { GetField result = new GetField ( ) ; result . readFrom ( in ) ; return result ; } @Override public void readFrom ( StreamInput in ) throws IOException { name = in . readString ( ) ; int size = in . readVInt ( ) ; values = new ArrayList < > ( size ) ; for ( int i = <int> ; i < size ; i + + ) { values . add ( in . readGenericValue ( ) ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( name ) ; out . writeVInt ( values . size ( ) ) ; for ( Object obj : values ) { out . writeGenericValue ( obj ) ; } } } 

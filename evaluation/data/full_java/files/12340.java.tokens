package org . gradle . util ; import org . apache . commons . io . FileUtils ; import org . apache . commons . io . IOUtils ; import org . apache . commons . io . filefilter . IOFileFilter ; import org . gradle . api . UncheckedIOException ; import org . gradle . internal . UncheckedException ; import org . gradle . util . internal . LimitedDescription ; import java . io . * ; import java . net . URL ; import java . nio . charset . Charset ; import java . util . * ; import java . util . zip . Checksum ; import static org . gradle . internal . concurrent . CompositeStoppable . stoppable ; public class GFileUtils { public static FileInputStream openInputStream ( File file ) { try { return FileUtils . openInputStream ( file ) ; } catch ( IOException e ) { throw new RuntimeException ( <str> + file , e ) ; } } public static void touch ( File file ) { try { FileUtils . touch ( file ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static void moveFile ( File source , File destination ) { try { FileUtils . moveFile ( source , destination ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static void copyFile ( File source , File destination ) { try { FileUtils . copyFile ( source , destination ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static void moveDirectory ( File source , File destination ) { try { FileUtils . moveDirectory ( source , destination ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static String readFile ( File file ) { return readFile ( file , Charset . defaultCharset ( ) . name ( ) ) ; } public static String readFile ( File file , String encoding ) { try { return FileUtils . readFileToString ( file , encoding ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static String readFileQuietly ( File file ) { try { return readFile ( file ) ; } catch ( Exception e ) { return <str> + file + <str> + e . toString ( ) ; } } public static void writeFile ( String content , File destination ) { writeFile ( content , destination , Charset . defaultCharset ( ) . name ( ) ) ; } public static void writeFile ( String content , File destination , String encoding ) { try { FileUtils . writeStringToFile ( destination , content , encoding ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static Collection listFiles ( File directory , IOFileFilter fileFilter , IOFileFilter dirFilter ) { return FileUtils . listFiles ( directory , fileFilter , dirFilter ) ; } public static Collection listFiles ( File directory , String [ ] extensions , boolean recursive ) { return FileUtils . listFiles ( directory , extensions , recursive ) ; } public static List < String > toPaths ( Collection < File > files ) { List < String > paths = new ArrayList < String > ( ) ; for ( File file : files ) { paths . add ( file . getAbsolutePath ( ) ) ; } return paths ; } public static void copyURLToFile ( URL source , File destination ) { try { FileUtils . copyURLToFile ( source , destination ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static void deleteDirectory ( File directory ) { try { FileUtils . deleteDirectory ( directory ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static void cleanDirectory ( File directory ) { try { FileUtils . cleanDirectory ( directory ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static boolean deleteQuietly ( File file ) { return FileUtils . deleteQuietly ( file ) ; } public static void closeInputStream ( InputStream input ) { stoppable ( input ) . stop ( ) ; } public static class TailReadingException extends RuntimeException { public TailReadingException ( Throwable throwable ) { super ( throwable ) ; } } public static String tail ( File file , int maxLines ) throws TailReadingException { BufferedReader reader = null ; FileReader fileReader = null ; try { fileReader = new FileReader ( file ) ; reader = new BufferedReader ( fileReader ) ; LimitedDescription description = new LimitedDescription ( maxLines ) ; String line = reader . readLine ( ) ; while ( line ! = null ) { description . append ( line ) ; line = reader . readLine ( ) ; } return description . toString ( ) ; } catch ( Exception e ) { throw new TailReadingException ( e ) ; } finally { IOUtils . closeQuietly ( fileReader ) ; IOUtils . closeQuietly ( reader ) ; } } public static void writeStringToFile ( File file , String data ) { try { FileUtils . writeStringToFile ( file , data ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static void forceDelete ( File file ) { try { FileUtils . forceDelete ( file ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static Checksum checksum ( File file , Checksum checksum ) { try { return FileUtils . checksum ( file , checksum ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static File canonicalise ( File src ) { try { return src . getCanonicalFile ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public static String relativePath ( File from , File to ) { try { return org . apache . tools . ant . util . FileUtils . getRelativePath ( from , to ) ; } catch ( Exception e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } public static File parentMkdirs ( File child ) { File parent = child . getParentFile ( ) ; mkdirs ( parent ) ; return parent ; } public static void mkdirs ( File dir ) { dir = dir . getAbsoluteFile ( ) ; if ( dir . isDirectory ( ) ) { return ; } if ( dir . exists ( ) & & ! dir . isDirectory ( ) ) { throw new UncheckedIOException ( String . format ( <str> , dir ) ) ; } List < File > toCreate = new LinkedList < File > ( ) ; File parent = dir . getParentFile ( ) ; while ( ! parent . exists ( ) ) { toCreate . add ( parent ) ; parent = parent . getParentFile ( ) ; } Collections . reverse ( toCreate ) ; for ( File parentDirToCreate : toCreate ) { if ( parentDirToCreate . isDirectory ( ) ) { continue ; } File parentDirToCreateParent = parentDirToCreate . getParentFile ( ) ; if ( ! parentDirToCreateParent . isDirectory ( ) ) { throw new UncheckedIOException ( String . format ( <str> , parentDirToCreate , dir , parentDirToCreateParent ) ) ; } if ( ! parentDirToCreate . mkdir ( ) & & ! parentDirToCreate . isDirectory ( ) ) { throw new UncheckedIOException ( String . format ( <str> , parentDirToCreate , dir ) ) ; } } if ( ! dir . mkdir ( ) & & ! dir . isDirectory ( ) ) { throw new UncheckedIOException ( String . format ( <str> , dir ) ) ; } } } 

package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . SortedLists . KeyAbsentBehavior ; import com . google . common . collect . SortedLists . KeyPresentBehavior ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . util . List ; @GwtCompatible ( emulated = true ) public class SortedListsTest extends TestCase { private static final ImmutableList < Integer > LIST_WITH_DUPS = ImmutableList . of ( <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ; private static final ImmutableList < Integer > LIST_WITHOUT_DUPS = ImmutableList . of ( <int> , <int> , <int> , <int> ) ; void assertModelAgrees ( List < Integer > list , Integer key , int answer , KeyPresentBehavior presentBehavior , KeyAbsentBehavior absentBehavior ) { switch ( presentBehavior ) { case FIRST_PRESENT : if ( list . contains ( key ) ) { assertEquals ( list . indexOf ( key ) , answer ) ; return ; } break ; case LAST_PRESENT : if ( list . contains ( key ) ) { assertEquals ( list . lastIndexOf ( key ) , answer ) ; return ; } break ; case ANY_PRESENT : if ( list . contains ( key ) ) { assertEquals ( key , list . get ( answer ) ) ; return ; } break ; case FIRST_AFTER : if ( list . contains ( key ) ) { assertEquals ( list . lastIndexOf ( key ) + <int> , answer ) ; return ; } break ; case LAST_BEFORE : if ( list . contains ( key ) ) { assertEquals ( list . indexOf ( key ) - <int> , answer ) ; return ; } break ; default : throw new AssertionError ( ) ; } int nextHigherIndex = list . size ( ) ; for ( int i = list . size ( ) - <int> ; i > = <int> & & list . get ( i ) > key ; i - - ) { nextHigherIndex = i ; } switch ( absentBehavior ) { case NEXT_LOWER : assertEquals ( nextHigherIndex - <int> , answer ) ; return ; case NEXT_HIGHER : assertEquals ( nextHigherIndex , answer ) ; return ; case INVERTED_INSERTION_INDEX : assertEquals ( - <int> - nextHigherIndex , answer ) ; return ; default : throw new AssertionError ( ) ; } } public void testWithoutDups ( ) { for ( KeyPresentBehavior presentBehavior : KeyPresentBehavior . values ( ) ) { for ( KeyAbsentBehavior absentBehavior : KeyAbsentBehavior . values ( ) ) { for ( int key = <int> ; key < = <int> ; key + + ) { assertModelAgrees ( LIST_WITHOUT_DUPS , key , SortedLists . binarySearch ( LIST_WITHOUT_DUPS , key , presentBehavior , absentBehavior ) , presentBehavior , absentBehavior ) ; } } } } public void testWithDups ( ) { for ( KeyPresentBehavior presentBehavior : KeyPresentBehavior . values ( ) ) { for ( KeyAbsentBehavior absentBehavior : KeyAbsentBehavior . values ( ) ) { for ( int key = <int> ; key < = <int> ; key + + ) { assertModelAgrees ( LIST_WITH_DUPS , key , SortedLists . binarySearch ( LIST_WITH_DUPS , key , presentBehavior , absentBehavior ) , presentBehavior , absentBehavior ) ; } } } } @GwtIncompatible ( <str> ) public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( SortedLists . class ) ; } } 

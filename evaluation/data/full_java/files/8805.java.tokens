package org . elasticsearch . plan . a ; import org . junit . Before ; public class FieldTests extends ScriptTestCase { public static class FieldClass { public boolean z = false ; public byte b = <int> ; public short s = <int> ; public char c = <str> ; public int i = <int> ; public int si = - <int> ; public long j = <int> ; public float f = <float> ; public double d = <float> ; public String t = <str> ; public Object l = new Object ( ) ; public float test ( float a , float b ) { return Math . min ( a , b ) ; } public int getSi ( ) { return si ; } public void setSi ( final int si ) { this . si = si ; } } public static class FieldDefinition extends Definition { FieldDefinition ( ) { super ( ) ; addStruct ( <str> , FieldClass . class ) ; addConstructor ( <str> , <str> , new Type [ ] { } , null ) ; addField ( <str> , <str> , null , false , booleanType , null ) ; addField ( <str> , <str> , null , false , byteType , null ) ; addField ( <str> , <str> , null , false , shortType , null ) ; addField ( <str> , <str> , null , false , charType , null ) ; addField ( <str> , <str> , null , false , intType , null ) ; addField ( <str> , <str> , null , false , longType , null ) ; addField ( <str> , <str> , null , false , floatType , null ) ; addField ( <str> , <str> , null , false , doubleType , null ) ; addField ( <str> , <str> , null , false , stringType , null ) ; addField ( <str> , <str> , null , false , objectType , null ) ; addClass ( <str> ) ; addMethod ( <str> , <str> , null , false , intType , new Type [ ] { } , null , null ) ; addMethod ( <str> , <str> , null , false , voidType , new Type [ ] { intType } , null , null ) ; addMethod ( <str> , <str> , null , false , floatType , new Type [ ] { floatType , floatType } , null , null ) ; } } @Before public void setDefinition ( ) { scriptEngine . setDefinition ( new FieldDefinition ( ) ) ; } public void testIntField ( ) { assertEquals ( <str> , exec ( <str> ) ) ; assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; } public void testExplicitShortcut ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <str> , exec ( <str> ) ) ; } public void testImplicitShortcut ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( - <int> , exec ( <str> ) ) ; assertEquals ( <str> , exec ( <str> ) ) ; } } 

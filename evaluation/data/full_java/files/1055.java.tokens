package org . apache . cassandra . tools ; import java . io . * ; import java . nio . charset . Charset ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . nio . file . attribute . FileTime ; import java . util . Arrays ; import java . util . List ; import org . apache . cassandra . config . Config ; import org . apache . cassandra . io . sstable . Component ; import org . apache . cassandra . io . sstable . Descriptor ; import org . apache . cassandra . service . ActiveRepairService ; public class SSTableRepairedAtSetter { public static void main ( final String [ ] args ) throws IOException { Config . setClientMode ( true ) ; PrintStream out = System . out ; if ( args . length = = <int> ) { out . println ( <str> ) ; out . println ( <str> ) ; System . exit ( <int> ) ; } if ( args . length < <int> | | ! args [ <int> ] . equals ( <str> ) | | ( ! args [ <int> ] . equals ( <str> ) & & ! args [ <int> ] . equals ( <str> ) ) ) { out . println ( <str> ) ; out . println ( <str> ) ; out . println ( <str> ) ; System . exit ( <int> ) ; } Util . initDatabaseDescriptor ( ) ; boolean setIsRepaired = args [ <int> ] . equals ( <str> ) ; List < String > fileNames ; if ( args [ <int> ] . equals ( <str> ) ) { fileNames = Files . readAllLines ( Paths . get ( args [ <int> ] ) , Charset . defaultCharset ( ) ) ; } else { fileNames = Arrays . asList ( args ) . subList ( <int> , args . length ) ; } for ( String fname : fileNames ) { Descriptor descriptor = Descriptor . fromFilename ( fname ) ; if ( descriptor . version . hasRepairedAt ( ) ) { if ( setIsRepaired ) { FileTime f = Files . getLastModifiedTime ( new File ( descriptor . filenameFor ( Component . DATA ) ) . toPath ( ) ) ; descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( descriptor , f . toMillis ( ) ) ; } else { descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( descriptor , ActiveRepairService . UNREPAIRED_SSTABLE ) ; } } else { System . err . println ( <str> + fname + <str> ) ; } } } } 

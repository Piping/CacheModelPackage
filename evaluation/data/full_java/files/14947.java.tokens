package org . gradle . nativeplatform . internal . prebuilt ; import org . gradle . api . DomainObjectSet ; import org . gradle . api . NamedDomainObjectSet ; import org . gradle . api . internal . resolve . ProjectModelResolver ; import org . gradle . model . internal . registry . ModelRegistry ; import org . gradle . nativeplatform . * ; import org . gradle . nativeplatform . internal . resolve . LibraryBinaryLocator ; public class PrebuiltLibraryBinaryLocator implements LibraryBinaryLocator { private final ProjectModelResolver projectModelResolver ; public PrebuiltLibraryBinaryLocator ( ProjectModelResolver projectModelResolver ) { this . projectModelResolver = projectModelResolver ; } public DomainObjectSet < NativeLibraryBinary > getBinaries ( NativeLibraryRequirement requirement ) { ModelRegistry projectModel = projectModelResolver . resolveProjectModel ( requirement . getProjectPath ( ) ) ; NamedDomainObjectSet < PrebuiltLibraries > repositories = projectModel . realize ( <str> , Repositories . class ) . withType ( PrebuiltLibraries . class ) ; if ( repositories . isEmpty ( ) ) { return null ; } PrebuiltLibrary prebuiltLibrary = getPrebuiltLibrary ( repositories , requirement . getLibraryName ( ) ) ; return prebuiltLibrary ! = null ? prebuiltLibrary . getBinaries ( ) : null ; } private PrebuiltLibrary getPrebuiltLibrary ( NamedDomainObjectSet < PrebuiltLibraries > repositories , String libraryName ) { for ( PrebuiltLibraries prebuiltLibraries : repositories ) { PrebuiltLibrary prebuiltLibrary = prebuiltLibraries . resolveLibrary ( libraryName ) ; if ( prebuiltLibrary ! = null ) { return prebuiltLibrary ; } } return null ; } } 

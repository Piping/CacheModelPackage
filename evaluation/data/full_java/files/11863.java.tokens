package org . gradle . cache . internal . btree ; import org . gradle . cache . internal . FileAccess ; import java . util . concurrent . Callable ; public class LockingBlockStore implements BlockStore { private final BlockStore store ; private final FileAccess fileAccess ; public LockingBlockStore ( BlockStore store , FileAccess fileAccess ) { this . store = store ; this . fileAccess = fileAccess ; } public void open ( final Runnable initAction , final BlockStore . Factory factory ) { store . open ( new Runnable ( ) { public void run ( ) { fileAccess . updateFile ( initAction ) ; } } , factory ) ; } public void close ( ) { store . close ( ) ; } public void flush ( ) { fileAccess . updateFile ( new Runnable ( ) { public void run ( ) { store . flush ( ) ; } } ) ; } public void clear ( ) { fileAccess . updateFile ( new Runnable ( ) { public void run ( ) { store . clear ( ) ; } } ) ; } public void attach ( BlockPayload block ) { store . attach ( block ) ; } public < T extends BlockPayload > T read ( final BlockPointer pos , final Class < T > payloadType ) { return fileAccess . readFile ( new Callable < T > ( ) { public T call ( ) throws Exception { return store . read ( pos , payloadType ) ; } } ) ; } public < T extends BlockPayload > T readFirst ( final Class < T > payloadType ) { return fileAccess . readFile ( new Callable < T > ( ) { public T call ( ) throws Exception { return store . readFirst ( payloadType ) ; } } ) ; } public void write ( final BlockPayload block ) { fileAccess . updateFile ( new Runnable ( ) { public void run ( ) { store . write ( block ) ; } } ) ; } public void remove ( final BlockPayload block ) { fileAccess . updateFile ( new Runnable ( ) { public void run ( ) { store . remove ( block ) ; } } ) ; } } 

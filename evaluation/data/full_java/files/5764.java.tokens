package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . * ; import org . elasticsearch . common . inject . spi . Dependency ; import org . elasticsearch . common . inject . spi . PrivateElements ; class ExposedKeyFactory < T > implements InternalFactory < T > , BindingProcessor . CreationListener { private final Key < T > key ; private final PrivateElements privateElements ; private BindingImpl < T > delegate ; public ExposedKeyFactory ( Key < T > key , PrivateElements privateElements ) { this . key = key ; this . privateElements = privateElements ; } @Override public void notify ( Errors errors ) { InjectorImpl privateInjector = ( InjectorImpl ) privateElements . getInjector ( ) ; BindingImpl < T > explicitBinding = privateInjector . state . getExplicitBinding ( key ) ; if ( explicitBinding . getInternalFactory ( ) = = this ) { errors . withSource ( explicitBinding . getSource ( ) ) . exposedButNotBound ( key ) ; return ; } this . delegate = explicitBinding ; } @Override public T get ( Errors errors , InternalContext context , Dependency < ? > dependency ) throws ErrorsException { return delegate . getInternalFactory ( ) . get ( errors , context , dependency ) ; } } 

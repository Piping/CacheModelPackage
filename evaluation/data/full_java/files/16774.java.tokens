package com . badlogic . gdx . backends . lwjgl ; import java . awt . GraphicsDevice ; import java . awt . GraphicsEnvironment ; import java . util . ArrayList ; import com . badlogic . gdx . Application ; import com . badlogic . gdx . Files ; import com . badlogic . gdx . Files . FileType ; import com . badlogic . gdx . Graphics ; import com . badlogic . gdx . Graphics . DisplayMode ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . utils . Array ; public class LwjglApplicationConfiguration { static public boolean disableAudio ; public boolean useGL30 = false ; public int gles30ContextMajorVersion = <int> ; public int gles30ContextMinorVersion = <int> ; public int r = <int> , g = <int> , b = <int> , a = <int> ; public int depth = <int> , stencil = <int> ; public int samples = <int> ; public int width = <int> , height = <int> ; public int x = - <int> , y = - <int> ; public boolean fullscreen = false ; public int overrideDensity = - <int> ; public boolean vSyncEnabled = true ; public String title ; public boolean forceExit = true ; public boolean resizable = true ; public int audioDeviceSimultaneousSources = <int> ; public int audioDeviceBufferSize = <int> ; public int audioDeviceBufferCount = <int> ; public Color initialBackgroundColor = Color . BLACK ; public int foregroundFPS = <int> ; public int backgroundFPS = <int> ; public boolean allowSoftwareMode = false ; public String preferencesDirectory = <str> ; public Files . FileType preferencesFileType = FileType . External ; public LwjglGraphics . SetDisplayModeCallback setDisplayModeCallback ; public boolean useHDPI = false ; Array < String > iconPaths = new Array ( ) ; Array < FileType > iconFileTypes = new Array ( ) ; public void addIcon ( String path , FileType fileType ) { iconPaths . add ( path ) ; iconFileTypes . add ( fileType ) ; } public void setFromDisplayMode ( DisplayMode mode ) { this . width = mode . width ; this . height = mode . height ; if ( mode . bitsPerPixel = = <int> ) { this . r = <int> ; this . g = <int> ; this . b = <int> ; this . a = <int> ; } if ( mode . bitsPerPixel = = <int> ) { this . r = <int> ; this . g = <int> ; this . b = <int> ; this . a = <int> ; } if ( mode . bitsPerPixel = = <int> ) { this . r = <int> ; this . g = <int> ; this . b = <int> ; this . a = <int> ; } this . fullscreen = true ; } protected static class LwjglApplicationConfigurationDisplayMode extends DisplayMode { protected LwjglApplicationConfigurationDisplayMode ( int width , int height , int refreshRate , int bitsPerPixel ) { super ( width , height , refreshRate , bitsPerPixel ) ; } } public static DisplayMode getDesktopDisplayMode ( ) { GraphicsEnvironment genv = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice device = genv . getDefaultScreenDevice ( ) ; java . awt . DisplayMode mode = device . getDisplayMode ( ) ; return new LwjglApplicationConfigurationDisplayMode ( mode . getWidth ( ) , mode . getHeight ( ) , mode . getRefreshRate ( ) , mode . getBitDepth ( ) ) ; } public static DisplayMode [ ] getDisplayModes ( ) { GraphicsEnvironment genv = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice device = genv . getDefaultScreenDevice ( ) ; java . awt . DisplayMode desktopMode = device . getDisplayMode ( ) ; java . awt . DisplayMode [ ] displayModes = device . getDisplayModes ( ) ; ArrayList < DisplayMode > modes = new ArrayList < DisplayMode > ( ) ; int idx = <int> ; for ( java . awt . DisplayMode mode : displayModes ) { boolean duplicate = false ; for ( int i = <int> ; i < modes . size ( ) ; i + + ) { if ( modes . get ( i ) . width = = mode . getWidth ( ) & & modes . get ( i ) . height = = mode . getHeight ( ) & & modes . get ( i ) . bitsPerPixel = = mode . getBitDepth ( ) ) { duplicate = true ; break ; } } if ( duplicate ) continue ; if ( mode . getBitDepth ( ) ! = desktopMode . getBitDepth ( ) ) continue ; modes . add ( new LwjglApplicationConfigurationDisplayMode ( mode . getWidth ( ) , mode . getHeight ( ) , mode . getRefreshRate ( ) , mode . getBitDepth ( ) ) ) ; } return modes . toArray ( new DisplayMode [ modes . size ( ) ] ) ; } } 

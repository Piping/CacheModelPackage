package org . gradle . internal . nativeintegration . filesystem . services ; import com . google . common . base . Charsets ; import com . google . common . io . Files ; import org . apache . commons . io . FileUtils ; import org . gradle . internal . nativeintegration . filesystem . FileException ; import org . gradle . internal . nativeintegration . filesystem . FileModeAccessor ; import org . gradle . internal . nativeintegration . filesystem . FileModeMutator ; import org . gradle . internal . nativeintegration . filesystem . Symlink ; import org . gradle . internal . nativeplatform . filesystem . FileSystem ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . io . IOException ; import java . util . UUID ; class GenericFileSystem implements FileSystem { private static final Logger LOGGER = LoggerFactory . getLogger ( GenericFileSystem . class ) ; final boolean caseSensitive ; final boolean canCreateSymbolicLink ; private final FileModeMutator chmod ; private final FileModeAccessor stat ; private final Symlink symlink ; public boolean isCaseSensitive ( ) { return caseSensitive ; } public boolean canCreateSymbolicLink ( ) { return canCreateSymbolicLink ; } public void createSymbolicLink ( File link , File target ) { try { symlink . symlink ( link , target ) ; } catch ( Exception e ) { throw new FileException ( String . format ( <str> , link . getPath ( ) , target . getPath ( ) ) , e ) ; } } public int getUnixMode ( File f ) { try { return stat . getUnixMode ( f ) ; } catch ( Exception e ) { throw new FileException ( String . format ( <str> , f ) , e ) ; } } public void chmod ( File f , int mode ) { try { chmod . chmod ( f , mode ) ; } catch ( Exception e ) { throw new FileException ( String . format ( <str> , mode , f ) , e ) ; } } public GenericFileSystem ( FileModeMutator chmod , FileModeAccessor stat , Symlink symlink ) { this . stat = stat ; this . symlink = symlink ; this . chmod = chmod ; canCreateSymbolicLink = symlink . isSymlinkSupported ( ) ; String content = generateUniqueContent ( ) ; File file = null ; try { checkJavaIoTmpDirExists ( ) ; file = createFile ( content ) ; caseSensitive = probeCaseSensitive ( file , content ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { FileUtils . deleteQuietly ( file ) ; } } private String generateUniqueContent ( ) { return UUID . randomUUID ( ) . toString ( ) ; } private File createFile ( String content ) throws IOException { File file = File . createTempFile ( <str> , null , null ) ; Files . write ( content , file , Charsets . UTF_8 ) ; return file ; } private boolean probeCaseSensitive ( File file , String content ) { try { File upperCased = new File ( file . getPath ( ) . toUpperCase ( ) ) ; return ! hasContent ( upperCased , content ) ; } catch ( IOException e ) { boolean result = ! new File ( <str> ) . equals ( new File ( <str> ) ) ; LOGGER . info ( <str> , result ) ; return result ; } } private boolean hasContent ( File file , String content ) throws IOException { return file . exists ( ) & & Files . readFirstLine ( file , Charsets . UTF_8 ) . equals ( content ) ; } private void checkJavaIoTmpDirExists ( ) throws IOException { File dir = new File ( System . getProperty ( <str> ) ) ; if ( ! dir . exists ( ) ) { throw new IOException ( <str> + dir ) ; } } } 

package io . netty . channel . epoll ; import io . netty . channel . Channel ; import io . netty . channel . EventLoop ; import io . netty . channel . socket . ServerSocketChannel ; import io . netty . channel . unix . FileDescriptor ; import io . netty . channel . unix . Socket ; import java . net . InetAddress ; import java . net . InetSocketAddress ; import java . net . SocketAddress ; import java . util . Collection ; import java . util . Collections ; import java . util . Map ; import static io . netty . channel . unix . NativeInetAddress . address ; import static io . netty . channel . unix . Socket . newSocketStream ; public final class EpollServerSocketChannel extends AbstractEpollServerChannel implements ServerSocketChannel { private final EpollServerSocketChannelConfig config ; private volatile InetSocketAddress local ; private volatile Collection < InetAddress > tcpMd5SigAddresses = Collections . emptyList ( ) ; public EpollServerSocketChannel ( ) { super ( newSocketStream ( ) , false ) ; config = new EpollServerSocketChannelConfig ( this ) ; } @Deprecated public EpollServerSocketChannel ( FileDescriptor fd ) { this ( new Socket ( fd . intValue ( ) ) ) ; } @Deprecated public EpollServerSocketChannel ( Socket fd ) { super ( fd ) ; local = fd . localAddress ( ) ; config = new EpollServerSocketChannelConfig ( this ) ; } public EpollServerSocketChannel ( Socket fd , boolean active ) { super ( fd , active ) ; local = fd . localAddress ( ) ; config = new EpollServerSocketChannelConfig ( this ) ; } @Override protected boolean isCompatible ( EventLoop loop ) { return loop instanceof EpollEventLoop ; } @Override protected void doBind ( SocketAddress localAddress ) throws Exception { InetSocketAddress addr = ( InetSocketAddress ) localAddress ; checkResolvable ( addr ) ; fd ( ) . bind ( addr ) ; local = fd ( ) . localAddress ( ) ; if ( Native . IS_SUPPORTING_TCP_FASTOPEN & & config . getTcpFastopen ( ) > <int> ) { Native . setTcpFastopen ( fd ( ) . intValue ( ) , config . getTcpFastopen ( ) ) ; } fd ( ) . listen ( config . getBacklog ( ) ) ; active = true ; } @Override public InetSocketAddress remoteAddress ( ) { return ( InetSocketAddress ) super . remoteAddress ( ) ; } @Override public InetSocketAddress localAddress ( ) { return ( InetSocketAddress ) super . localAddress ( ) ; } @Override public EpollServerSocketChannelConfig config ( ) { return config ; } @Override protected InetSocketAddress localAddress0 ( ) { return local ; } @Override protected Channel newChildChannel ( int fd , byte [ ] address , int offset , int len ) throws Exception { return new EpollSocketChannel ( this , new Socket ( fd ) , address ( address , offset , len ) ) ; } Collection < InetAddress > tcpMd5SigAddresses ( ) { return tcpMd5SigAddresses ; } void setTcpMd5Sig ( Map < InetAddress , byte [ ] > keys ) { this . tcpMd5SigAddresses = TcpMd5Util . newTcpMd5Sigs ( this , tcpMd5SigAddresses , keys ) ; } } 

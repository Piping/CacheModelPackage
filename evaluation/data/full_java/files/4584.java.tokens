package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . math . BigInteger ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . MemoryByte ; import org . eclipse . debug . ui . memory . AbstractMemoryRendering ; import org . eclipse . debug . ui . memory . IRepositionableMemoryRendering ; public abstract class AbstractBaseTableRendering extends AbstractMemoryRendering implements IRepositionableMemoryRendering { public AbstractBaseTableRendering ( String renderingId ) { super ( renderingId ) ; } abstract public boolean format ( int bytesPerLine , int columnSize ) ; abstract public int getAddressableSize ( ) ; abstract public void resizeColumnsToPreferredSize ( ) ; abstract public int getAddressableUnitPerLine ( ) ; abstract public int getAddressableUnitPerColumn ( ) ; abstract public int getBytesPerColumn ( ) ; abstract public int getBytesPerLine ( ) ; abstract public void updateLabels ( ) ; @Override abstract public String getLabel ( ) ; abstract public void refresh ( ) ; @Override abstract public void goToAddress ( BigInteger address ) throws DebugException ; @Override abstract public BigInteger getSelectedAddress ( ) ; abstract public String getSelectedAsString ( ) ; @Override abstract public MemoryByte [ ] getSelectedAsBytes ( ) ; abstract public int getNumCharsPerByte ( ) ; abstract public void resetRendering ( ) throws DebugException ; abstract public String getString ( String renderingTypeId , BigInteger address , MemoryByte [ ] data ) ; abstract public byte [ ] getBytes ( String renderingTypeId , BigInteger address , MemoryByte [ ] currentValues , String newValue ) ; } 

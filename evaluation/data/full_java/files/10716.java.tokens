package org . gradle . build . docs . dsl . docbook ; import org . gradle . build . docs . dsl . docbook . model . MethodDoc ; import org . gradle . build . docs . dsl . source . model . ParameterMetaData ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import java . util . List ; public class MethodDetailRenderer { private final GenerationListener listener ; private final LinkRenderer linkRenderer ; private final ElementWarningsRenderer warningsRenderer = new ElementWarningsRenderer ( ) ; public MethodDetailRenderer ( LinkRenderer linkRenderer , GenerationListener listener ) { this . linkRenderer = linkRenderer ; this . listener = listener ; } public void renderTo ( MethodDoc methodDoc , Element parent ) { Document document = parent . getOwnerDocument ( ) ; Element section = document . createElement ( <str> ) ; parent . appendChild ( section ) ; section . setAttribute ( <str> , methodDoc . getId ( ) ) ; section . setAttribute ( <str> , <str> ) ; Element title = document . createElement ( <str> ) ; section . appendChild ( title ) ; title . appendChild ( linkRenderer . link ( methodDoc . getMetaData ( ) . getReturnType ( ) , listener ) ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; Element literal = document . createElement ( <str> ) ; title . appendChild ( literal ) ; literal . appendChild ( document . createTextNode ( methodDoc . getName ( ) ) ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; List < ParameterMetaData > parameters = methodDoc . getMetaData ( ) . getParameters ( ) ; for ( int i = <int> ; i < parameters . size ( ) ; i + + ) { ParameterMetaData param = parameters . get ( i ) ; if ( i > <int> ) { title . appendChild ( document . createTextNode ( <str> ) ) ; } title . appendChild ( linkRenderer . link ( param . getType ( ) , listener ) ) ; title . appendChild ( document . createTextNode ( <str> + param . getName ( ) ) ) ; } title . appendChild ( document . createTextNode ( <str> ) ) ; warningsRenderer . renderTo ( methodDoc , <str> , section ) ; for ( Element element : methodDoc . getComment ( ) ) { section . appendChild ( document . importNode ( element , true ) ) ; } } } 

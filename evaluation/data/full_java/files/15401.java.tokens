package org . gradle . internal . resource . transfer ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . resource . ExternalResource ; import org . gradle . internal . resource . metadata . DefaultExternalResourceMetaData ; import org . gradle . internal . resource . metadata . ExternalResourceMetaData ; import java . io . IOException ; import java . io . InputStream ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URL ; import java . net . URLConnection ; public class UrlExternalResource implements ExternalResourceReadResponse { private final URI uri ; private final URLConnection connection ; private final DefaultExternalResourceMetaData metaData ; public static ExternalResource open ( URL url ) throws IOException { URI uri ; try { uri = url . toURI ( ) ; } catch ( URISyntaxException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } return new DefaultExternalResource ( uri , new UrlExternalResource ( uri , url ) ) ; } private UrlExternalResource ( URI uri , URL url ) throws IOException { connection = url . openConnection ( ) ; this . uri = uri ; metaData = new DefaultExternalResourceMetaData ( uri , connection . getLastModified ( ) , connection . getContentLength ( ) , connection . getContentType ( ) , null , null ) ; } public URI getURI ( ) { return uri ; } public ExternalResourceMetaData getMetaData ( ) { return metaData ; } public boolean isLocal ( ) { return uri . getScheme ( ) . equalsIgnoreCase ( <str> ) ; } public long getContentLength ( ) { return connection . getContentLength ( ) ; } public long getLastModified ( ) { return connection . getLastModified ( ) ; } public InputStream openStream ( ) throws IOException { return connection . getInputStream ( ) ; } @Override public void close ( ) { } } 

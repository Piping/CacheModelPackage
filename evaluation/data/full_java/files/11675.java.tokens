package org . gradle . api . internal . resources ; import com . google . common . io . Files ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . file . TemporaryFileProvider ; import org . gradle . api . resources . TextResource ; import org . gradle . api . tasks . TaskDependency ; import java . io . * ; import java . nio . charset . Charset ; public class FileCollectionBackedTextResource implements TextResource { private final TemporaryFileProvider tempFileProvider ; private final FileCollection fileCollection ; private final Charset charset ; public FileCollectionBackedTextResource ( TemporaryFileProvider tempFileProvider , FileCollection fileCollection , Charset charset ) { this . tempFileProvider = tempFileProvider ; this . fileCollection = fileCollection ; this . charset = charset ; } public String asString ( ) { try { return Files . toString ( asFile ( ) , charset ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } public Reader asReader ( ) { try { return Files . newReader ( asFile ( ) , charset ) ; } catch ( FileNotFoundException e ) { throw new UncheckedIOException ( e ) ; } } public File asFile ( String targetCharset ) { Charset targetCharsetObj = Charset . forName ( targetCharset ) ; if ( targetCharsetObj . equals ( charset ) ) { return fileCollection . getSingleFile ( ) ; } File targetFile = tempFileProvider . createTemporaryFile ( <str> , <str> , <str> ) ; try { Files . asCharSource ( fileCollection . getSingleFile ( ) , charset ) . copyTo ( Files . asCharSink ( targetFile , targetCharsetObj ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } return targetFile ; } public File asFile ( ) { return asFile ( Charset . defaultCharset ( ) . name ( ) ) ; } public TaskDependency getBuildDependencies ( ) { return fileCollection . getBuildDependencies ( ) ; } public Object getInputProperties ( ) { return charset . name ( ) ; } public FileCollection getInputFiles ( ) { return fileCollection ; } } 

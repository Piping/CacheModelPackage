package io . netty . handler . codec . http . cookie ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertNotNull ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; import org . junit . Test ; import io . netty . handler . codec . http . HttpHeaderDateFormat ; import java . util . ArrayList ; import java . util . Calendar ; import java . util . Collection ; import java . util . Date ; import java . util . Iterator ; import java . util . TimeZone ; public class ClientCookieDecoderTest { @Test public void testDecodingSingleCookieV0 ( ) { String cookieString = <str> ; cookieString = cookieString . replace ( <str> , HttpHeaderDateFormat . get ( ) . format ( new Date ( System . currentTimeMillis ( ) + <int> ) ) ) ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( cookieString ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . value ( ) ) ; assertEquals ( <str> , cookie . domain ( ) ) ; boolean fail = true ; for ( int i = <int> ; i < = <int> ; i + + ) { if ( cookie . maxAge ( ) = = i ) { fail = false ; break ; } } if ( fail ) { fail ( <str> + cookie . maxAge ( ) ) ; } assertEquals ( <str> , cookie . path ( ) ) ; assertTrue ( cookie . isSecure ( ) ) ; } @Test public void testDecodingSingleCookieV0ExtraParamsIgnored ( ) { String cookieString = <str> + <str> + <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( cookieString ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . value ( ) ) ; assertEquals ( <str> , cookie . domain ( ) ) ; assertEquals ( <int> , cookie . maxAge ( ) ) ; assertEquals ( <str> , cookie . path ( ) ) ; assertTrue ( cookie . isSecure ( ) ) ; } @Test public void testDecodingSingleCookieV1 ( ) { String cookieString = <str> + <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( cookieString ) ; assertEquals ( <str> , cookie . value ( ) ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . domain ( ) ) ; assertEquals ( <int> , cookie . maxAge ( ) ) ; assertEquals ( <str> , cookie . path ( ) ) ; assertTrue ( cookie . isSecure ( ) ) ; } @Test public void testDecodingSingleCookieV1ExtraParamsIgnored ( ) { String cookieString = <str> + <str> + <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( cookieString ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . value ( ) ) ; assertEquals ( <str> , cookie . domain ( ) ) ; assertEquals ( <int> , cookie . maxAge ( ) ) ; assertEquals ( <str> , cookie . path ( ) ) ; assertTrue ( cookie . isSecure ( ) ) ; } @Test public void testDecodingSingleCookieV2 ( ) { String cookieString = <str> + <str> + <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( cookieString ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . value ( ) ) ; assertEquals ( <str> , cookie . domain ( ) ) ; assertEquals ( <int> , cookie . maxAge ( ) ) ; assertEquals ( <str> , cookie . path ( ) ) ; assertTrue ( cookie . isSecure ( ) ) ; } @Test public void testDecodingComplexCookie ( ) { String c1 = <str> + <str> + <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( c1 ) ; assertNotNull ( cookie ) ; assertEquals ( <str> , cookie . value ( ) ) ; assertEquals ( <str> , cookie . domain ( ) ) ; assertEquals ( <int> , cookie . maxAge ( ) ) ; assertEquals ( <str> , cookie . path ( ) ) ; assertTrue ( cookie . isSecure ( ) ) ; } @Test public void testDecodingQuotedCookie ( ) { Collection < String > sources = new ArrayList < String > ( ) ; sources . add ( <str> ) ; sources . add ( <str> ) ; Collection < Cookie > cookies = new ArrayList < Cookie > ( ) ; for ( String source : sources ) { cookies . add ( ClientCookieDecoder . STRICT . decode ( source ) ) ; } Iterator < Cookie > it = cookies . iterator ( ) ; Cookie c ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> , c . value ( ) ) ; c = it . next ( ) ; assertEquals ( <str> , c . name ( ) ) ; assertEquals ( <str> , c . value ( ) ) ; assertFalse ( it . hasNext ( ) ) ; } @Test public void testDecodingGoogleAnalyticsCookie ( ) { String source = <str> + <str> + <str> + <str> + <str> + <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( source ) ; assertEquals ( <str> , cookie . name ( ) ) ; assertEquals ( <str> , cookie . value ( ) ) ; } @Test public void testDecodingLongDates ( ) { Calendar cookieDate = Calendar . getInstance ( TimeZone . getTimeZone ( <str> ) ) ; cookieDate . set ( <int> , Calendar . DECEMBER , <int> , <int> , <int> , <int> ) ; long expectedMaxAge = ( cookieDate . getTimeInMillis ( ) - System . currentTimeMillis ( ) ) / <int> ; String source = <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( source ) ; assertTrue ( Math . abs ( expectedMaxAge - cookie . maxAge ( ) ) < <int> ) ; } @Test public void testDecodingValueWithCommaFails ( ) { String source = <str> + <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( source ) ; assertNull ( cookie ) ; } @Test public void testDecodingWeirdNames1 ( ) { String src = <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( src ) ; assertEquals ( <str> , cookie . name ( ) ) ; assertEquals ( <str> , cookie . value ( ) ) ; assertEquals ( <str> , cookie . path ( ) ) ; } @Test public void testDecodingWeirdNames2 ( ) { String src = <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( src ) ; assertEquals ( <str> , cookie . name ( ) ) ; assertEquals ( <str> , cookie . value ( ) ) ; } @Test public void testDecodingValuesWithCommasAndEqualsFails ( ) { String src = <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( src ) ; assertNull ( cookie ) ; } @Test public void testDecodingLongValue ( ) { String longValue = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( <str> + longValue + <str> ) ; assertEquals ( <str> , cookie . name ( ) ) ; assertEquals ( longValue , cookie . value ( ) ) ; } @Test public void testIgnoreEmptyDomain ( ) { String emptyDomain = <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( emptyDomain ) ; assertNull ( cookie . domain ( ) ) ; } @Test public void testIgnoreEmptyPath ( ) { String emptyPath = <str> ; Cookie cookie = ClientCookieDecoder . STRICT . decode ( emptyPath ) ; assertNull ( cookie . path ( ) ) ; } } 

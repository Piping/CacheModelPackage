package com . badlogic . gdx . backends . android ; import android . media . AudioFormat ; import android . media . AudioManager ; import android . media . AudioTrack ; import com . badlogic . gdx . audio . AudioDevice ; class AndroidAudioDevice implements AudioDevice { private final AudioTrack track ; private short [ ] buffer = new short [ <int> ] ; private final boolean isMono ; private final int latency ; AndroidAudioDevice ( int samplingRate , boolean isMono ) { this . isMono = isMono ; int minSize = AudioTrack . getMinBufferSize ( samplingRate , isMono ? AudioFormat . CHANNEL_OUT_MONO : AudioFormat . CHANNEL_OUT_STEREO , AudioFormat . ENCODING_PCM_16BIT ) ; track = new AudioTrack ( AudioManager . STREAM_MUSIC , samplingRate , isMono ? AudioFormat . CHANNEL_OUT_MONO : AudioFormat . CHANNEL_OUT_STEREO , AudioFormat . ENCODING_PCM_16BIT , minSize , AudioTrack . MODE_STREAM ) ; track . play ( ) ; latency = minSize / ( isMono ? <int> : <int> ) ; } @Override public void dispose ( ) { track . stop ( ) ; track . release ( ) ; } @Override public boolean isMono ( ) { return isMono ; } @Override public void writeSamples ( short [ ] samples , int offset , int numSamples ) { int writtenSamples = track . write ( samples , offset , numSamples ) ; while ( writtenSamples ! = numSamples ) writtenSamples + = track . write ( samples , offset + writtenSamples , numSamples - writtenSamples ) ; } @Override public void writeSamples ( float [ ] samples , int offset , int numSamples ) { if ( buffer . length < samples . length ) buffer = new short [ samples . length ] ; int bound = offset + numSamples ; for ( int i = offset , j = <int> ; i < bound ; i + + , j + + ) { float fValue = samples [ i ] ; if ( fValue > <int> ) fValue = <int> ; if ( fValue < - <int> ) fValue = - <int> ; short value = ( short ) ( fValue * Short . MAX_VALUE ) ; buffer [ j ] = value ; } int writtenSamples = track . write ( buffer , <int> , numSamples ) ; while ( writtenSamples ! = numSamples ) writtenSamples + = track . write ( buffer , writtenSamples , numSamples - writtenSamples ) ; } @Override public int getLatency ( ) { return latency ; } @Override public void setVolume ( float volume ) { track . setStereoVolume ( volume , volume ) ; } } 

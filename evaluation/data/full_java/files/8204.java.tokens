package org . elasticsearch . index . mapper . multifield . merge ; import org . apache . lucene . index . IndexOptions ; import org . apache . lucene . index . IndexableField ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . compress . CompressedXContent ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . index . mapper . MergeResult ; import org . elasticsearch . index . mapper . ParseContext . Document ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . util . Arrays ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class JavaMultiFieldMergeTests extends ESSingleNodeTestCase { public void testMergeMultiField ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper docMapper = parser . parse ( mapping ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , nullValue ( ) ) ; BytesReference json = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f , nullValue ( ) ) ; mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper2 = parser . parse ( mapping ) ; MergeResult mergeResult = docMapper . merge ( docMapper2 . mapping ( ) , true , false ) ; assertThat ( Arrays . toString ( mergeResult . buildConflicts ( ) ) , mergeResult . hasConflicts ( ) , equalTo ( false ) ) ; docMapper . merge ( docMapper2 . mapping ( ) , false , false ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , nullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , nullValue ( ) ) ; doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper3 = parser . parse ( mapping ) ; mergeResult = docMapper . merge ( docMapper3 . mapping ( ) , true , false ) ; assertThat ( Arrays . toString ( mergeResult . buildConflicts ( ) ) , mergeResult . hasConflicts ( ) , equalTo ( false ) ) ; docMapper . merge ( docMapper3 . mapping ( ) , false , false ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , nullValue ( ) ) ; mapping = copyToStringFromClasspath ( <str> ) ; DocumentMapper docMapper4 = parser . parse ( mapping ) ; mergeResult = docMapper . merge ( docMapper4 . mapping ( ) , true , false ) ; assertThat ( Arrays . toString ( mergeResult . buildConflicts ( ) ) , mergeResult . hasConflicts ( ) , equalTo ( false ) ) ; docMapper . merge ( docMapper4 . mapping ( ) , false , false ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; } public void testUpgradeFromMultiFieldTypeToMultiFields ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; MapperService mapperService = createIndex ( <str> ) . mapperService ( ) ; DocumentMapper docMapper = mapperService . merge ( <str> , new CompressedXContent ( mapping ) , true , false ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , nullValue ( ) ) ; BytesReference json = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ; Document doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; IndexableField f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f , nullValue ( ) ) ; mapping = copyToStringFromClasspath ( <str> ) ; mapperService . merge ( <str> , new CompressedXContent ( mapping ) , false , false ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , nullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , nullValue ( ) ) ; doc = docMapper . parse ( <str> , <str> , <str> , json ) . rootDoc ( ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; f = doc . getField ( <str> ) ; assertThat ( f , notNullValue ( ) ) ; mapping = copyToStringFromClasspath ( <str> ) ; mapperService . merge ( <str> , new CompressedXContent ( mapping ) , false , false ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , nullValue ( ) ) ; mapping = copyToStringFromClasspath ( <str> ) ; try { mapperService . merge ( <str> , new CompressedXContent ( mapping ) , false , false ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } assertNotSame ( IndexOptions . NONE , docMapper . mappers ( ) . getMapper ( <str> ) . fieldType ( ) . indexOptions ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , notNullValue ( ) ) ; assertThat ( docMapper . mappers ( ) . getMapper ( <str> ) , nullValue ( ) ) ; } } 

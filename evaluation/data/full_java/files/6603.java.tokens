package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class ExistsQueryParser implements QueryParser < ExistsQueryBuilder > { public static final ParseField FIELD_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { ExistsQueryBuilder . NAME } ; } @Override public ExistsQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; String fieldPattern = null ; String queryName = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; XContentParser . Token token ; String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , FIELD_FIELD ) ) { fieldPattern = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + ExistsQueryBuilder . NAME + <str> + currentFieldName + <str> ) ; } } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + ExistsQueryBuilder . NAME + <str> + token + <str> + currentFieldName + <str> ) ; } } if ( fieldPattern = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + ExistsQueryBuilder . NAME + <str> ) ; } ExistsQueryBuilder builder = new ExistsQueryBuilder ( fieldPattern ) ; builder . queryName ( queryName ) ; builder . boost ( boost ) ; return builder ; } @Override public ExistsQueryBuilder getBuilderPrototype ( ) { return ExistsQueryBuilder . PROTOTYPE ; } } 

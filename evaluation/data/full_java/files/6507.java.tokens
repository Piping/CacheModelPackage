package org . elasticsearch . index . fielddata . plain ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . fielddata . * ; import org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource . Nested ; import org . elasticsearch . index . fielddata . fieldcomparator . BytesRefFieldComparatorSource ; import org . elasticsearch . index . fielddata . ordinals . GlobalOrdinalsBuilder ; import org . elasticsearch . index . mapper . MappedFieldType . Names ; import org . elasticsearch . search . MultiValueMode ; import org . elasticsearch . indices . breaker . CircuitBreakerService ; import java . io . IOException ; public class SortedSetDVOrdinalsIndexFieldData extends DocValuesIndexFieldData implements IndexOrdinalsFieldData { private final IndexSettings indexSettings ; private final IndexFieldDataCache cache ; private final CircuitBreakerService breakerService ; public SortedSetDVOrdinalsIndexFieldData ( IndexSettings indexSettings , IndexFieldDataCache cache , Names fieldNames , CircuitBreakerService breakerService , FieldDataType fieldDataType ) { super ( indexSettings . getIndex ( ) , fieldNames , fieldDataType ) ; this . indexSettings = indexSettings ; this . cache = cache ; this . breakerService = breakerService ; } @Override public org . elasticsearch . index . fielddata . IndexFieldData . XFieldComparatorSource comparatorSource ( Object missingValue , MultiValueMode sortMode , Nested nested ) { return new BytesRefFieldComparatorSource ( ( IndexFieldData < ? > ) this , missingValue , sortMode , nested ) ; } @Override public AtomicOrdinalsFieldData load ( LeafReaderContext context ) { return new SortedSetDVBytesAtomicFieldData ( context . reader ( ) , fieldNames . indexName ( ) ) ; } @Override public AtomicOrdinalsFieldData loadDirect ( LeafReaderContext context ) throws Exception { return load ( context ) ; } @Override public IndexOrdinalsFieldData loadGlobal ( DirectoryReader indexReader ) { if ( indexReader . leaves ( ) . size ( ) < = <int> ) { return this ; } boolean fieldFound = false ; for ( LeafReaderContext context : indexReader . leaves ( ) ) { if ( context . reader ( ) . getFieldInfos ( ) . fieldInfo ( getFieldNames ( ) . indexName ( ) ) ! = null ) { fieldFound = true ; break ; } } if ( fieldFound = = false ) { try { return GlobalOrdinalsBuilder . buildEmpty ( indexSettings , indexReader , this ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } try { return cache . load ( indexReader , this ) ; } catch ( Throwable e ) { if ( e instanceof ElasticsearchException ) { throw ( ElasticsearchException ) e ; } else { throw new ElasticsearchException ( e ) ; } } } @Override public IndexOrdinalsFieldData localGlobalDirect ( DirectoryReader indexReader ) throws Exception { return GlobalOrdinalsBuilder . build ( indexReader , this , indexSettings , breakerService , logger ) ; } } 

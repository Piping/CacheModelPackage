package org . gradle . api . internal . file . pattern ; import java . util . List ; public class FixedStepsPathMatcher implements PathMatcher { private final List < PatternStep > steps ; private final PathMatcher next ; private final int minSegments ; private final int maxSegments ; public FixedStepsPathMatcher ( List < PatternStep > steps , PathMatcher next ) { this . steps = steps ; this . next = next ; minSegments = steps . size ( ) + next . getMinSegments ( ) ; maxSegments = next . getMaxSegments ( ) = = Integer . MAX_VALUE ? Integer . MAX_VALUE : next . getMaxSegments ( ) + steps . size ( ) ; } public int getMinSegments ( ) { return minSegments ; } public int getMaxSegments ( ) { return maxSegments ; } public boolean matches ( String [ ] segments , int startIndex ) { int remaining = segments . length - startIndex ; if ( remaining < minSegments | | remaining > maxSegments ) { return false ; } int pos = startIndex ; for ( int i = <int> ; i < steps . size ( ) ; i + + , pos + + ) { PatternStep step = steps . get ( i ) ; if ( ! step . matches ( segments [ pos ] ) ) { return false ; } } return next . matches ( segments , pos ) ; } public boolean isPrefix ( String [ ] segments , int startIndex ) { int pos = startIndex ; for ( int i = <int> ; pos < segments . length & & i < steps . size ( ) ; i + + , pos + + ) { PatternStep step = steps . get ( i ) ; if ( ! step . matches ( segments [ pos ] ) ) { return false ; } } if ( pos = = segments . length ) { return true ; } return next . isPrefix ( segments , pos ) ; } } 

package com . badlogic . gdx . physics . box2d . joints ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . JointDef ; public class MotorJointDef extends JointDef { public MotorJointDef ( ) { type = JointType . MotorJoint ; } public void initialize ( Body body1 , Body body2 ) { this . bodyA = body1 ; this . bodyB = body2 ; this . linearOffset . set ( bodyA . getLocalPoint ( bodyB . getPosition ( ) ) ) ; this . angularOffset = bodyB . getAngle ( ) - bodyA . getAngle ( ) ; } public final Vector2 linearOffset = new Vector2 ( ) ; public float angularOffset = <float> ; public float maxForce = <float> ; public float maxTorque = <float> ; public float correctionFactor = <float> ; @Override public org . jbox2d . dynamics . joints . JointDef toJBox2d ( ) { org . jbox2d . dynamics . joints . MotorJointDef jd = new org . jbox2d . dynamics . joints . MotorJointDef ( ) ; jd . bodyA = bodyA . body ; jd . bodyB = bodyB . body ; jd . collideConnected = collideConnected ; jd . linearOffset . set ( linearOffset . x , linearOffset . y ) ; jd . angularOffset = angularOffset ; jd . maxForce = maxForce ; jd . maxTorque = maxTorque ; jd . type = org . jbox2d . dynamics . joints . JointType . MOTOR ; return jd ; } } 

package org . gradle . internal . resource . transport . http . ntlm ; import org . gradle . api . artifacts . repositories . PasswordCredentials ; import java . net . InetAddress ; import java . net . UnknownHostException ; public class NTLMCredentials { private static final String DEFAULT_DOMAIN = <str> ; private static final String DEFAULT_WORKSTATION = <str> ; private final String domain ; private final String username ; private final String password ; private final String workstation ; public NTLMCredentials ( PasswordCredentials credentials ) { String domain ; String username = credentials . getUsername ( ) ; int slashPos = username . indexOf ( <str> ) ; slashPos = slashPos > = <int> ? slashPos : username . indexOf ( <str> ) ; if ( slashPos > = <int> ) { domain = username . substring ( <int> , slashPos ) ; username = username . substring ( slashPos + <int> ) ; } else { domain = System . getProperty ( <str> , DEFAULT_DOMAIN ) ; } this . domain = domain = = null ? null : domain . toUpperCase ( ) ; this . username = username ; this . password = credentials . getPassword ( ) ; this . workstation = determineWorkstationName ( ) ; } private String determineWorkstationName ( ) { String sysPropWorkstation = System . getProperty ( <str> ) ; if ( sysPropWorkstation ! = null ) { return sysPropWorkstation ; } try { return removeDotSuffix ( getHostName ( ) ) . toUpperCase ( ) ; } catch ( UnknownHostException e ) { return DEFAULT_WORKSTATION ; } } protected String getHostName ( ) throws UnknownHostException { return InetAddress . getLocalHost ( ) . getHostName ( ) ; } private String removeDotSuffix ( String val ) { int dotPos = val . indexOf ( <str> ) ; return dotPos = = - <int> ? val : val . substring ( <int> , dotPos ) ; } public String getDomain ( ) { return domain ; } public String getUsername ( ) { return username ; } public String getPassword ( ) { return password ; } public String getWorkstation ( ) { return workstation ; } @Override public String toString ( ) { return String . format ( <str> , username , domain , workstation ) ; } } 

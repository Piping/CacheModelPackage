package org . elasticsearch . common . bytes ; import java . nio . charset . StandardCharsets ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . io . Channels ; import org . elasticsearch . common . io . stream . StreamInput ; import org . jboss . netty . buffer . ChannelBuffer ; import org . jboss . netty . buffer . ChannelBuffers ; import java . io . IOException ; import java . io . OutputStream ; import java . nio . channels . GatheringByteChannel ; import java . util . Arrays ; public class BytesArray implements BytesReference { public static final BytesArray EMPTY = new BytesArray ( BytesRef . EMPTY_BYTES , <int> , <int> ) ; private byte [ ] bytes ; private int offset ; private int length ; public BytesArray ( String bytes ) { BytesRef bytesRef = new BytesRef ( bytes ) ; this . bytes = bytesRef . bytes ; this . offset = bytesRef . offset ; this . length = bytesRef . length ; } public BytesArray ( BytesRef bytesRef ) { this ( bytesRef , false ) ; } public BytesArray ( BytesRef bytesRef , boolean deepCopy ) { if ( deepCopy ) { BytesRef copy = BytesRef . deepCopyOf ( bytesRef ) ; bytes = copy . bytes ; offset = copy . offset ; length = copy . length ; } else { bytes = bytesRef . bytes ; offset = bytesRef . offset ; length = bytesRef . length ; } } public BytesArray ( byte [ ] bytes ) { this . bytes = bytes ; this . offset = <int> ; this . length = bytes . length ; } public BytesArray ( byte [ ] bytes , int offset , int length ) { this . bytes = bytes ; this . offset = offset ; this . length = length ; } @Override public byte get ( int index ) { return bytes [ offset + index ] ; } @Override public int length ( ) { return length ; } @Override public BytesReference slice ( int from , int length ) { if ( from < <int> | | ( from + length ) > this . length ) { throw new IllegalArgumentException ( <str> + this . length + <str> + from + <str> + length + <str> ) ; } return new BytesArray ( bytes , offset + from , length ) ; } @Override public StreamInput streamInput ( ) { return StreamInput . wrap ( bytes , offset , length ) ; } @Override public void writeTo ( OutputStream os ) throws IOException { os . write ( bytes , offset , length ) ; } @Override public void writeTo ( GatheringByteChannel channel ) throws IOException { Channels . writeToChannel ( bytes , offset , length ( ) , channel ) ; } @Override public byte [ ] toBytes ( ) { if ( offset = = <int> & & bytes . length = = length ) { return bytes ; } return Arrays . copyOfRange ( bytes , offset , offset + length ) ; } @Override public BytesArray toBytesArray ( ) { return this ; } @Override public BytesArray copyBytesArray ( ) { return new BytesArray ( Arrays . copyOfRange ( bytes , offset , offset + length ) ) ; } @Override public ChannelBuffer toChannelBuffer ( ) { return ChannelBuffers . wrappedBuffer ( bytes , offset , length ) ; } @Override public boolean hasArray ( ) { return true ; } @Override public byte [ ] array ( ) { return bytes ; } @Override public int arrayOffset ( ) { return offset ; } @Override public String toUtf8 ( ) { if ( length = = <int> ) { return <str> ; } return new String ( bytes , offset , length , StandardCharsets . UTF_8 ) ; } @Override public BytesRef toBytesRef ( ) { return new BytesRef ( bytes , offset , length ) ; } @Override public BytesRef copyBytesRef ( ) { return new BytesRef ( Arrays . copyOfRange ( bytes , offset , offset + length ) ) ; } @Override public int hashCode ( ) { return Helper . bytesHashCode ( this ) ; } @Override public boolean equals ( Object obj ) { return Helper . bytesEqual ( this , ( BytesReference ) obj ) ; } } 

package org . eclipse . debug . internal . ui . viewers . model ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . internal . core . commands . Request ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerInputRequestor ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerInputUpdate ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . ui . progress . WorkbenchJob ; public class ViewerInputUpdate extends Request implements IViewerInputUpdate { private IPresentationContext fContext ; private Object fSource ; private boolean fDone ; private Object fInputElement ; private Object fViewerInput ; private IViewerInputRequestor fRequestor ; protected WorkbenchJob fViewerInputUpdateJob = new WorkbenchJob ( <str> ) { @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( ViewerInputUpdate . this . isCanceled ( ) ) { return Status . CANCEL_STATUS ; } fRequestor . viewerInputComplete ( ViewerInputUpdate . this ) ; return Status . OK_STATUS ; } } ; public ViewerInputUpdate ( IPresentationContext context , Object viewerInput , IViewerInputRequestor requestor , Object source ) { fContext = context ; fSource = source ; fRequestor = requestor ; fViewerInputUpdateJob . setSystem ( true ) ; fViewerInput = viewerInput ; } @Override public IPresentationContext getPresentationContext ( ) { return fContext ; } @Override public final void done ( ) { synchronized ( this ) { if ( isDone ( ) ) { return ; } fDone = true ; } fViewerInputUpdateJob . schedule ( ) ; } protected synchronized boolean isDone ( ) { return fDone ; } @Override public Object getElement ( ) { return fSource ; } @Override public TreePath getElementPath ( ) { return TreePath . EMPTY ; } @Override public void setInputElement ( Object element ) { fInputElement = element ; } @Override public Object getInputElement ( ) { return fInputElement ; } @Override public Object getViewerInput ( ) { return fViewerInput ; } } 

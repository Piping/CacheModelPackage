package org . apache . cassandra . utils ; import org . junit . Test ; import static org . junit . Assert . assertTrue ; public class CassandraVersionTest { @Test public void testParsing ( ) { CassandraVersion version ; version = new CassandraVersion ( <str> ) ; assert version . major = = <int> & & version . minor = = <int> & & version . patch = = <int> ; version = new CassandraVersion ( <str> ) ; assert version . major = = <int> & & version . minor = = <int> & & version . patch = = <int> ; version = new CassandraVersion ( <str> ) ; assert version . major = = <int> & & version . minor = = <int> & & version . patch = = <int> ; } @Test public void testComparison ( ) { CassandraVersion v1 , v2 ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert v1 . compareTo ( v2 ) = = - <int> ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert v1 . compareTo ( v2 ) = = <int> ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert v1 . compareTo ( v2 ) = = - <int> ; assert v2 . compareTo ( v1 ) = = <int> ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert v1 . compareTo ( v2 ) = = <int> ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert v1 . compareTo ( v2 ) = = - <int> ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert v1 . compareTo ( v2 ) = = <int> ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert v1 . compareTo ( v2 ) = = - <int> ; } @Test public void testIsSupportedBy ( ) { CassandraVersion v1 , v2 ; v1 = new CassandraVersion ( <str> ) ; assert v1 . isSupportedBy ( v1 ) ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert v1 . isSupportedBy ( v2 ) ; assert ! v2 . isSupportedBy ( v1 ) ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert v1 . isSupportedBy ( v2 ) ; assert ! v2 . isSupportedBy ( v1 ) ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert ! v1 . isSupportedBy ( v2 ) ; assert ! v2 . isSupportedBy ( v1 ) ; v1 = new CassandraVersion ( <str> ) ; v2 = new CassandraVersion ( <str> ) ; assert ! v1 . isSupportedBy ( v2 ) ; assert v2 . isSupportedBy ( v1 ) ; } @Test public void testInvalid ( ) { assertThrows ( <str> ) ; assertThrows ( <str> ) ; assertThrows ( <str> ) ; assertThrows ( <str> ) ; } @Test public void testSnapshot ( ) { CassandraVersion prev , next ; prev = new CassandraVersion ( <str> ) ; next = new CassandraVersion ( <str> ) ; assertTrue ( prev . compareTo ( next ) < <int> ) ; prev = next ; next = new CassandraVersion ( <str> ) ; assertTrue ( prev . compareTo ( next ) < <int> ) ; prev = new CassandraVersion ( <str> ) ; next = new CassandraVersion ( <str> ) ; assertTrue ( prev . compareTo ( next ) < <int> ) ; prev = next ; next = new CassandraVersion ( <str> ) ; assertTrue ( prev . compareTo ( next ) < <int> ) ; } private static void assertThrows ( String str ) { try { new CassandraVersion ( str ) ; assert false ; } catch ( IllegalArgumentException e ) { } } } 

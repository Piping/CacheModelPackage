package org . gradle . api . internal . tasks . testing . testng ; import org . gradle . api . internal . tasks . testing . * ; import org . gradle . api . tasks . testing . TestResult ; import org . gradle . internal . TimeProvider ; import org . gradle . internal . id . IdGenerator ; import org . testng . * ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; public class TestNGTestResultProcessorAdapter implements ISuiteListener , ITestListener , TestNGConfigurationListener { private final TestResultProcessor resultProcessor ; private final IdGenerator < ? > idGenerator ; private final TimeProvider timeProvider ; private final Object lock = new Object ( ) ; private final Map < ITestContext , Object > testId = new HashMap < ITestContext , Object > ( ) ; private final Map < ISuite , Object > suiteId = new HashMap < ISuite , Object > ( ) ; private final Map < ITestResult , Object > testMethodId = new HashMap < ITestResult , Object > ( ) ; private final Map < ITestNGMethod , Object > testMethodParentId = new HashMap < ITestNGMethod , Object > ( ) ; private final Set < ITestResult > failedConfigurations = new HashSet < ITestResult > ( ) ; public TestNGTestResultProcessorAdapter ( TestResultProcessor resultProcessor , IdGenerator < ? > idGenerator , TimeProvider timeProvider ) { this . resultProcessor = resultProcessor ; this . idGenerator = idGenerator ; this . timeProvider = timeProvider ; } public void onStart ( ISuite suite ) { TestDescriptorInternal testInternal ; synchronized ( lock ) { if ( suiteId . containsKey ( suite ) ) { return ; } testInternal = new DefaultTestSuiteDescriptor ( idGenerator . generateId ( ) , suite . getName ( ) ) ; suiteId . put ( suite , testInternal . getId ( ) ) ; } resultProcessor . started ( testInternal , new TestStartEvent ( timeProvider . getCurrentTime ( ) ) ) ; } public void onFinish ( ISuite suite ) { Object id ; synchronized ( lock ) { id = suiteId . remove ( suite ) ; if ( id = = null ) { return ; } } resultProcessor . completed ( id , new TestCompleteEvent ( timeProvider . getCurrentTime ( ) ) ) ; } public void onStart ( ITestContext iTestContext ) { TestDescriptorInternal testInternal ; Object parentId ; synchronized ( lock ) { testInternal = new DefaultTestSuiteDescriptor ( idGenerator . generateId ( ) , iTestContext . getName ( ) ) ; parentId = suiteId . get ( iTestContext . getSuite ( ) ) ; testId . put ( iTestContext , testInternal . getId ( ) ) ; for ( ITestNGMethod method : iTestContext . getAllTestMethods ( ) ) { testMethodParentId . put ( method , testInternal . getId ( ) ) ; } } resultProcessor . started ( testInternal , new TestStartEvent ( iTestContext . getStartDate ( ) . getTime ( ) , parentId ) ) ; } public void onFinish ( ITestContext iTestContext ) { Object id ; synchronized ( lock ) { id = testId . remove ( iTestContext ) ; for ( ITestNGMethod method : iTestContext . getAllTestMethods ( ) ) { testMethodParentId . remove ( method ) ; } } resultProcessor . completed ( id , new TestCompleteEvent ( iTestContext . getEndDate ( ) . getTime ( ) ) ) ; } public void onTestStart ( ITestResult iTestResult ) { TestDescriptorInternal testInternal ; Object parentId ; synchronized ( lock ) { String name = calculateTestCaseName ( iTestResult ) ; testInternal = new DefaultTestMethodDescriptor ( idGenerator . generateId ( ) , iTestResult . getTestClass ( ) . getName ( ) , name ) ; Object oldTestId = testMethodId . put ( iTestResult , testInternal . getId ( ) ) ; assert oldTestId = = null : <str> + <str> + <str> ; parentId = testMethodParentId . get ( iTestResult . getMethod ( ) ) ; assert parentId ! = null ; } resultProcessor . started ( testInternal , new TestStartEvent ( iTestResult . getStartMillis ( ) , parentId ) ) ; if ( iTestResult . getThrowable ( ) instanceof UnrepresentableParameterException ) { throw ( UnrepresentableParameterException ) iTestResult . getThrowable ( ) ; } } private String calculateTestCaseName ( ITestResult iTestResult ) { Object [ ] parameters = iTestResult . getParameters ( ) ; String name = iTestResult . getName ( ) ; if ( parameters ! = null & & parameters . length > <int> ) { StringBuilder builder = new StringBuilder ( name ) . append ( <str> ) . append ( iTestResult . getMethod ( ) . getCurrentInvocationCount ( ) ) . append ( <str> ) ; StringBuilder paramsListBuilder = new StringBuilder ( <str> ) ; int i = <int> ; for ( Object parameter : parameters ) { if ( parameter = = null ) { paramsListBuilder . append ( <str> ) ; } else { try { paramsListBuilder . append ( parameter . toString ( ) ) ; } catch ( Exception e ) { iTestResult . setThrowable ( new UnrepresentableParameterException ( iTestResult , i , e ) ) ; return builder . toString ( ) ; } } if ( + + i < parameters . length ) { paramsListBuilder . append ( <str> ) ; } } paramsListBuilder . append ( <str> ) ; return builder . append ( paramsListBuilder . toString ( ) ) . toString ( ) ; } else { return name ; } } public void onTestSuccess ( ITestResult iTestResult ) { onTestFinished ( iTestResult , TestResult . ResultType . SUCCESS ) ; } public void onTestFailure ( ITestResult iTestResult ) { onTestFinished ( iTestResult , TestResult . ResultType . FAILURE ) ; } public void onTestSkipped ( ITestResult iTestResult ) { onTestFinished ( iTestResult , TestResult . ResultType . SKIPPED ) ; } public void onTestFailedButWithinSuccessPercentage ( ITestResult iTestResult ) { onTestFinished ( iTestResult , TestResult . ResultType . SUCCESS ) ; } private void onTestFinished ( ITestResult iTestResult , TestResult . ResultType resultType ) { Object testId ; TestStartEvent startEvent = null ; synchronized ( lock ) { testId = testMethodId . remove ( iTestResult ) ; if ( testId = = null ) { testId = idGenerator . generateId ( ) ; Object parentId = testMethodParentId . get ( iTestResult . getMethod ( ) ) ; startEvent = new TestStartEvent ( iTestResult . getStartMillis ( ) , parentId ) ; } } if ( startEvent ! = null ) { resultProcessor . started ( new DefaultTestMethodDescriptor ( testId , iTestResult . getTestClass ( ) . getName ( ) , iTestResult . getName ( ) ) , startEvent ) ; } if ( resultType = = TestResult . ResultType . FAILURE ) { resultProcessor . failure ( testId , iTestResult . getThrowable ( ) ) ; } resultProcessor . completed ( testId , new TestCompleteEvent ( iTestResult . getEndMillis ( ) , resultType ) ) ; } public void onConfigurationSuccess ( ITestResult testResult ) { } public void onConfigurationSkip ( ITestResult testResult ) { } public void onConfigurationFailure ( ITestResult testResult ) { synchronized ( lock ) { if ( ! failedConfigurations . add ( testResult ) ) { return ; } } TestDescriptorInternal test = new DefaultTestMethodDescriptor ( idGenerator . generateId ( ) , testResult . getMethod ( ) . getTestClass ( ) . getName ( ) , testResult . getMethod ( ) . getMethodName ( ) ) ; resultProcessor . started ( test , new TestStartEvent ( testResult . getStartMillis ( ) ) ) ; resultProcessor . failure ( test . getId ( ) , testResult . getThrowable ( ) ) ; resultProcessor . completed ( test . getId ( ) , new TestCompleteEvent ( testResult . getEndMillis ( ) , TestResult . ResultType . FAILURE ) ) ; } public void beforeConfiguration ( ITestResult tr ) { } } 

package org . elasticsearch . search . aggregations . metrics . percentiles . tdigest ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . search . aggregations . AggregationStreams ; import org . elasticsearch . search . aggregations . metrics . percentiles . InternalPercentile ; import org . elasticsearch . search . aggregations . metrics . percentiles . Percentile ; import org . elasticsearch . search . aggregations . metrics . percentiles . PercentileRanks ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . io . IOException ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; public class InternalTDigestPercentileRanks extends AbstractInternalTDigestPercentiles implements PercentileRanks { public final static Type TYPE = new Type ( PercentileRanks . TYPE_NAME , <str> ) ; public final static AggregationStreams . Stream STREAM = new AggregationStreams . Stream ( ) { @Override public InternalTDigestPercentileRanks readResult ( StreamInput in ) throws IOException { InternalTDigestPercentileRanks result = new InternalTDigestPercentileRanks ( ) ; result . readFrom ( in ) ; return result ; } } ; public static void registerStreams ( ) { AggregationStreams . registerStream ( STREAM , TYPE . stream ( ) ) ; } InternalTDigestPercentileRanks ( ) { } public InternalTDigestPercentileRanks ( String name , double [ ] cdfValues , TDigestState state , boolean keyed , ValueFormatter formatter , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { super ( name , cdfValues , state , keyed , formatter , pipelineAggregators , metaData ) ; } @Override public Iterator < Percentile > iterator ( ) { return new Iter ( keys , state ) ; } @Override public double percent ( double value ) { return percentileRank ( state , value ) ; } @Override public String percentAsString ( double value ) { return valueAsString ( String . valueOf ( value ) ) ; } @Override public double value ( double key ) { return percent ( key ) ; } @Override protected AbstractInternalTDigestPercentiles createReduced ( String name , double [ ] keys , TDigestState merged , boolean keyed , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) { return new InternalTDigestPercentileRanks ( name , keys , merged , keyed , valueFormatter , pipelineAggregators , metaData ) ; } @Override public Type type ( ) { return TYPE ; } static double percentileRank ( TDigestState state , double value ) { double percentileRank = state . cdf ( value ) ; if ( percentileRank < <int> ) { percentileRank = <int> ; } else if ( percentileRank > <int> ) { percentileRank = <int> ; } return percentileRank * <int> ; } public static class Iter implements Iterator < Percentile > { private final double [ ] values ; private final TDigestState state ; private int i ; public Iter ( double [ ] values , TDigestState state ) { this . values = values ; this . state = state ; i = <int> ; } @Override public boolean hasNext ( ) { return i < values . length ; } @Override public Percentile next ( ) { final Percentile next = new InternalPercentile ( percentileRank ( state , values [ i ] ) , values [ i ] ) ; + + i ; return next ; } @Override public final void remove ( ) { throw new UnsupportedOperationException ( ) ; } } } 

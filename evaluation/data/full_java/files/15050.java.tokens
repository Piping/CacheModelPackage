package org . gradle . nativeplatform . toolchain . internal . gcc ; import com . google . common . collect . Lists ; import org . gradle . nativeplatform . toolchain . internal . ArgsTransformer ; import org . gradle . nativeplatform . toolchain . internal . MacroArgsConverter ; import org . gradle . nativeplatform . toolchain . internal . NativeCompileSpec ; import java . io . File ; import java . util . Collections ; import java . util . List ; abstract class GccCompilerArgsTransformer < T extends NativeCompileSpec > implements ArgsTransformer < T > { public List < String > transform ( T spec ) { List < String > args = Lists . newArrayList ( ) ; addToolSpecificArgs ( spec , args ) ; addMacroArgs ( spec , args ) ; addUserArgs ( spec , args ) ; addIncludeArgs ( spec , args ) ; return args ; } protected void addToolSpecificArgs ( T spec , List < String > args ) { Collections . addAll ( args , <str> , getLanguage ( ) ) ; args . add ( <str> ) ; if ( spec . isPositionIndependentCode ( ) ) { if ( ! spec . getTargetPlatform ( ) . getOperatingSystem ( ) . isWindows ( ) ) { args . add ( <str> ) ; } } } protected void addIncludeArgs ( T spec , List < String > args ) { for ( File file : spec . getIncludeRoots ( ) ) { args . add ( <str> ) ; args . add ( file . getAbsolutePath ( ) ) ; } } protected void addMacroArgs ( T spec , List < String > args ) { for ( String macroArg : new MacroArgsConverter ( ) . transform ( spec . getMacros ( ) ) ) { args . add ( <str> + macroArg ) ; } } protected void addUserArgs ( T spec , List < String > args ) { args . addAll ( spec . getAllArgs ( ) ) ; } protected abstract String getLanguage ( ) ; } 

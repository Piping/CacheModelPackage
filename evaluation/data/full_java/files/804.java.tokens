package org . apache . cassandra . metrics ; import java . util . List ; import java . util . concurrent . TimeUnit ; import com . codahale . metrics . Counter ; import com . codahale . metrics . Timer ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Lists ; import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; public class LatencyMetrics { public final Timer latency ; public final Counter totalLatency ; private List < LatencyMetrics > parents = Lists . newArrayList ( ) ; protected final MetricNameFactory factory ; protected final MetricNameFactory aliasFactory ; protected final String namePrefix ; public LatencyMetrics ( String type , String scope ) { this ( type , <str> , scope ) ; } public LatencyMetrics ( String type , String namePrefix , String scope ) { this ( new DefaultNameFactory ( type , scope ) , namePrefix ) ; } public LatencyMetrics ( MetricNameFactory factory , String namePrefix ) { this ( factory , null , namePrefix ) ; } public LatencyMetrics ( MetricNameFactory factory , MetricNameFactory aliasFactory , String namePrefix ) { this . factory = factory ; this . aliasFactory = aliasFactory ; this . namePrefix = namePrefix ; if ( aliasFactory = = null ) { latency = Metrics . timer ( factory . createMetricName ( namePrefix + <str> ) ) ; totalLatency = Metrics . counter ( factory . createMetricName ( namePrefix + <str> ) ) ; } else { latency = Metrics . timer ( factory . createMetricName ( namePrefix + <str> ) , aliasFactory . createMetricName ( namePrefix + <str> ) ) ; totalLatency = Metrics . counter ( factory . createMetricName ( namePrefix + <str> ) , aliasFactory . createMetricName ( namePrefix + <str> ) ) ; } } public LatencyMetrics ( MetricNameFactory factory , String namePrefix , LatencyMetrics . . . parents ) { this ( factory , null , namePrefix ) ; this . parents . addAll ( ImmutableList . copyOf ( parents ) ) ; } public void addNano ( long nanos ) { latency . update ( nanos , TimeUnit . NANOSECONDS ) ; totalLatency . inc ( nanos / <int> ) ; for ( LatencyMetrics parent : parents ) { parent . addNano ( nanos ) ; } } public void release ( ) { if ( aliasFactory = = null ) { Metrics . remove ( factory . createMetricName ( namePrefix + <str> ) ) ; Metrics . remove ( factory . createMetricName ( namePrefix + <str> ) ) ; } else { Metrics . remove ( factory . createMetricName ( namePrefix + <str> ) , aliasFactory . createMetricName ( namePrefix + <str> ) ) ; Metrics . remove ( factory . createMetricName ( namePrefix + <str> ) , aliasFactory . createMetricName ( namePrefix + <str> ) ) ; } } } 

package com . google . common . collect ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . io . Serializable ; import java . util . Arrays ; import java . util . List ; @GwtCompatible ( emulated = true ) public class ObjectArraysTest extends TestCase { @GwtIncompatible ( <str> ) public void testNullPointerExceptions ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicStaticMethods ( ObjectArrays . class ) ; } @GwtIncompatible ( <str> ) public void testNewArray_fromClass_Empty ( ) { String [ ] empty = ObjectArrays . newArray ( String . class , <int> ) ; assertEquals ( String [ ] . class , empty . getClass ( ) ) ; assertThat ( empty ) . isEmpty ( ) ; } @GwtIncompatible ( <str> ) public void testNewArray_fromClass_Nonempty ( ) { String [ ] array = ObjectArrays . newArray ( String . class , <int> ) ; assertEquals ( String [ ] . class , array . getClass ( ) ) ; assertThat ( array ) . hasLength ( <int> ) ; assertNull ( array [ <int> ] ) ; } @GwtIncompatible ( <str> ) public void testNewArray_fromClass_OfArray ( ) { String [ ] [ ] array = ObjectArrays . newArray ( String [ ] . class , <int> ) ; assertEquals ( String [ ] [ ] . class , array . getClass ( ) ) ; assertThat ( array ) . hasLength ( <int> ) ; assertNull ( array [ <int> ] ) ; } public void testNewArray_fromArray_Empty ( ) { String [ ] in = new String [ <int> ] ; String [ ] empty = ObjectArrays . newArray ( in , <int> ) ; assertThat ( empty ) . isEmpty ( ) ; } public void testNewArray_fromArray_Nonempty ( ) { String [ ] array = ObjectArrays . newArray ( new String [ <int> ] , <int> ) ; assertEquals ( String [ ] . class , array . getClass ( ) ) ; assertThat ( array ) . hasLength ( <int> ) ; assertNull ( array [ <int> ] ) ; } public void testNewArray_fromArray_OfArray ( ) { String [ ] [ ] array = ObjectArrays . newArray ( new String [ <int> ] [ <int> ] , <int> ) ; assertEquals ( String [ ] [ ] . class , array . getClass ( ) ) ; assertThat ( array ) . hasLength ( <int> ) ; assertNull ( array [ <int> ] ) ; } @GwtIncompatible ( <str> ) public void testConcatEmptyEmpty ( ) { String [ ] result = ObjectArrays . concat ( new String [ <int> ] , new String [ <int> ] , String . class ) ; assertEquals ( String [ ] . class , result . getClass ( ) ) ; assertThat ( result ) . isEmpty ( ) ; } @GwtIncompatible ( <str> ) public void testConcatEmptyNonempty ( ) { String [ ] result = ObjectArrays . concat ( new String [ <int> ] , new String [ ] { <str> , <str> } , String . class ) ; assertEquals ( String [ ] . class , result . getClass ( ) ) ; assertThat ( result ) . asList ( ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testConcatNonemptyEmpty ( ) { String [ ] result = ObjectArrays . concat ( new String [ ] { <str> , <str> } , new String [ <int> ] , String . class ) ; assertEquals ( String [ ] . class , result . getClass ( ) ) ; assertThat ( result ) . asList ( ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testConcatBasic ( ) { String [ ] result = ObjectArrays . concat ( new String [ ] { <str> , <str> } , new String [ ] { <str> , <str> } , String . class ) ; assertEquals ( String [ ] . class , result . getClass ( ) ) ; assertThat ( result ) . asList ( ) . containsExactly ( <str> , <str> , <str> , <str> ) . inOrder ( ) ; } @GwtIncompatible ( <str> ) public void testConcatWithMoreGeneralType ( ) { Serializable [ ] result = ObjectArrays . concat ( new String [ <int> ] , new String [ <int> ] , Serializable . class ) ; assertEquals ( Serializable [ ] . class , result . getClass ( ) ) ; } public void testToArrayImpl1 ( ) { doTestToArrayImpl1 ( Lists . < Integer > newArrayList ( ) ) ; doTestToArrayImpl1 ( Lists . newArrayList ( <int> ) ) ; doTestToArrayImpl1 ( Lists . newArrayList ( <int> , null , <int> ) ) ; } private void doTestToArrayImpl1 ( List < Integer > list ) { Object [ ] reference = list . toArray ( ) ; Object [ ] target = ObjectArrays . toArrayImpl ( list ) ; assertEquals ( reference . getClass ( ) , target . getClass ( ) ) ; assertTrue ( Arrays . equals ( reference , target ) ) ; } public void testToArrayImpl2 ( ) { doTestToArrayImpl2 ( Lists . < Integer > newArrayList ( ) , new Integer [ <int> ] , false ) ; doTestToArrayImpl2 ( Lists . < Integer > newArrayList ( ) , new Integer [ <int> ] , true ) ; doTestToArrayImpl2 ( Lists . newArrayList ( <int> ) , new Integer [ <int> ] , false ) ; doTestToArrayImpl2 ( Lists . newArrayList ( <int> ) , new Integer [ <int> ] , true ) ; doTestToArrayImpl2 ( Lists . newArrayList ( <int> ) , new Integer [ ] { <int> , <int> } , true ) ; doTestToArrayImpl2 ( Lists . newArrayList ( <int> , null , <int> ) , new Integer [ <int> ] , false ) ; doTestToArrayImpl2 ( Lists . newArrayList ( <int> , null , <int> ) , new Integer [ <int> ] , false ) ; doTestToArrayImpl2 ( Lists . newArrayList ( <int> , null , <int> ) , new Integer [ <int> ] , true ) ; } private void doTestToArrayImpl2 ( List < Integer > list , Integer [ ] array1 , boolean expectModify ) { Integer [ ] starting = ObjectArrays . arraysCopyOf ( array1 , array1 . length ) ; Integer [ ] array2 = ObjectArrays . arraysCopyOf ( array1 , array1 . length ) ; Object [ ] reference = list . toArray ( array1 ) ; Object [ ] target = ObjectArrays . toArrayImpl ( list , array2 ) ; assertEquals ( reference . getClass ( ) , target . getClass ( ) ) ; assertTrue ( Arrays . equals ( reference , target ) ) ; assertTrue ( Arrays . equals ( reference , target ) ) ; Object [ ] expectedArray1 = expectModify ? reference : starting ; Object [ ] expectedArray2 = expectModify ? target : starting ; assertTrue ( Arrays . equals ( expectedArray1 , array1 ) ) ; assertTrue ( Arrays . equals ( expectedArray2 , array2 ) ) ; } public void testPrependZeroElements ( ) { String [ ] result = ObjectArrays . concat ( <str> , new String [ ] { } ) ; assertThat ( result ) . asList ( ) . contains ( <str> ) ; } public void testPrependOneElement ( ) { String [ ] result = ObjectArrays . concat ( <str> , new String [ ] { <str> } ) ; assertThat ( result ) . asList ( ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; } public void testPrependTwoElements ( ) { String [ ] result = ObjectArrays . concat ( <str> , new String [ ] { <str> , <str> } ) ; assertThat ( result ) . asList ( ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } public void testAppendZeroElements ( ) { String [ ] result = ObjectArrays . concat ( new String [ ] { } , <str> ) ; assertThat ( result ) . asList ( ) . contains ( <str> ) ; } public void testAppendOneElement ( ) { String [ ] result = ObjectArrays . concat ( new String [ ] { <str> } , <str> ) ; assertThat ( result ) . asList ( ) . containsExactly ( <str> , <str> ) . inOrder ( ) ; } public void testAppendTwoElements ( ) { String [ ] result = ObjectArrays . concat ( new String [ ] { <str> , <str> } , <str> ) ; assertThat ( result ) . asList ( ) . containsExactly ( <str> , <str> , <str> ) . inOrder ( ) ; } public void testEmptyArrayToEmpty ( ) { doTestNewArrayEquals ( new Object [ <int> ] , <int> ) ; } public void testEmptyArrayToNonEmpty ( ) { checkArrayEquals ( new Long [ <int> ] , ObjectArrays . newArray ( new Long [ <int> ] , <int> ) ) ; } public void testNonEmptyToShorter ( ) { checkArrayEquals ( new String [ <int> ] , ObjectArrays . newArray ( new String [ <int> ] , <int> ) ) ; } public void testNonEmptyToSameLength ( ) { doTestNewArrayEquals ( new String [ <int> ] , <int> ) ; } public void testNonEmptyToLonger ( ) { checkArrayEquals ( new String [ <int> ] , ObjectArrays . newArray ( new String [ ] { <str> , <str> , <str> , <str> , <str> } , <int> ) ) ; } private static void checkArrayEquals ( Object [ ] expected , Object [ ] actual ) { assertTrue ( <str> + expected . getClass ( ) + <str> + Arrays . toString ( expected ) + <str> + actual . getClass ( ) + <str> + Arrays . toString ( actual ) , arrayEquals ( expected , actual ) ) ; } private static boolean arrayEquals ( Object [ ] array1 , Object [ ] array2 ) { assertSame ( array1 . getClass ( ) , array2 . getClass ( ) ) ; return Arrays . equals ( array1 , array2 ) ; } private static void doTestNewArrayEquals ( Object [ ] expected , int length ) { checkArrayEquals ( expected , ObjectArrays . newArray ( expected , length ) ) ; } } 

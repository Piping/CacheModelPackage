package org . gradle . api . internal . tasks . testing . junit . report ; import org . gradle . internal . ErroringAction ; import org . gradle . internal . html . SimpleHtmlWriter ; import java . io . IOException ; class PackagePageRenderer extends PageRenderer < PackageTestResults > { @Override protected void renderBreadcrumbs ( SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , getResults ( ) . getUrlTo ( getResults ( ) . getParent ( ) ) ) . characters ( <str> ) . endElement ( ) ; htmlWriter . characters ( String . format ( <str> , getResults ( ) . getName ( ) ) ) ; htmlWriter . endElement ( ) ; } private void renderClasses ( SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; for ( ClassTestResults testClass : getResults ( ) . getClasses ( ) ) { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , testClass . getStatusClass ( ) ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , asHtmlLinkEncoded ( getResults ( ) . getUrlTo ( testClass ) ) ) . characters ( testClass . getSimpleName ( ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( Integer . toString ( testClass . getTestCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( Integer . toString ( testClass . getFailureCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( Integer . toString ( testClass . getIgnoredCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( testClass . getFormattedDuration ( ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , testClass . getStatusClass ( ) ) . characters ( testClass . getFormattedSuccessRate ( ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; } htmlWriter . endElement ( ) ; } @Override protected void registerTabs ( ) { addFailuresTab ( ) ; addIgnoredTab ( ) ; addTab ( <str> , new ErroringAction < SimpleHtmlWriter > ( ) { public void doExecute ( SimpleHtmlWriter htmlWriter ) throws IOException { renderClasses ( htmlWriter ) ; } } ) ; } } 

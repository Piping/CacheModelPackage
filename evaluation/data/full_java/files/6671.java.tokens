package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class SpanMultiTermQueryParser implements QueryParser < SpanMultiTermQueryBuilder > { public static final ParseField MATCH_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { SpanMultiTermQueryBuilder . NAME , Strings . toCamelCase ( SpanMultiTermQueryBuilder . NAME ) } ; } @Override public SpanMultiTermQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; String currentFieldName = null ; MultiTermQueryBuilder subQuery = null ; String queryName = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , MATCH_FIELD ) ) { QueryBuilder innerQuery = parseContext . parseInnerQueryBuilder ( ) ; if ( innerQuery instanceof MultiTermQueryBuilder = = false ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + MATCH_FIELD . getPreferredName ( ) + <str> ) ; } subQuery = ( MultiTermQueryBuilder ) innerQuery ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } if ( subQuery = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + MATCH_FIELD . getPreferredName ( ) + <str> ) ; } return new SpanMultiTermQueryBuilder ( subQuery ) . queryName ( queryName ) . boost ( boost ) ; } @Override public SpanMultiTermQueryBuilder getBuilderPrototype ( ) { return SpanMultiTermQueryBuilder . PROTOTYPE ; } } 

package org . apache . cassandra . transport . messages ; import java . util . HashMap ; import java . util . Map ; import io . netty . buffer . ByteBuf ; import org . apache . cassandra . auth . AuthenticatedUser ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . exceptions . AuthenticationException ; import org . apache . cassandra . service . QueryState ; import org . apache . cassandra . transport . CBUtil ; import org . apache . cassandra . transport . Message ; import org . apache . cassandra . transport . ProtocolException ; public class CredentialsMessage extends Message . Request { public static final Message . Codec < CredentialsMessage > codec = new Message . Codec < CredentialsMessage > ( ) { public CredentialsMessage decode ( ByteBuf body , int version ) { if ( version > <int> ) throw new ProtocolException ( <str> + <str> ) ; Map < String , String > credentials = CBUtil . readStringMap ( body ) ; return new CredentialsMessage ( credentials ) ; } public void encode ( CredentialsMessage msg , ByteBuf dest , int version ) { CBUtil . writeStringMap ( msg . credentials , dest ) ; } public int encodedSize ( CredentialsMessage msg , int version ) { return CBUtil . sizeOfStringMap ( msg . credentials ) ; } } ; public final Map < String , String > credentials ; public CredentialsMessage ( ) { this ( new HashMap < String , String > ( ) ) ; } private CredentialsMessage ( Map < String , String > credentials ) { super ( Message . Type . CREDENTIALS ) ; this . credentials = credentials ; } public Message . Response execute ( QueryState state ) { try { AuthenticatedUser user = DatabaseDescriptor . getAuthenticator ( ) . legacyAuthenticate ( credentials ) ; state . getClientState ( ) . login ( user ) ; } catch ( AuthenticationException e ) { return ErrorMessage . fromException ( e ) ; } return new ReadyMessage ( ) ; } @Override public String toString ( ) { return <str> ; } } 

package org . elasticsearch . action . support . master ; import org . elasticsearch . Version ; import org . elasticsearch . action . ActionFuture ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . PlainActionFuture ; import org . elasticsearch . action . support . ThreadedActionListener ; import org . elasticsearch . action . support . replication . ClusterStateCreationUtils ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . NotMasterException ; import org . elasticsearch . cluster . block . ClusterBlock ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . block . ClusterBlocks ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . concurrent . EsRejectedExecutionException ; import org . elasticsearch . discovery . Discovery ; import org . elasticsearch . discovery . MasterNotDiscoveredException ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . cluster . TestClusterService ; import org . elasticsearch . test . transport . CapturingTransport ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . ConnectTransportException ; import org . elasticsearch . transport . TransportService ; import org . junit . AfterClass ; import org . junit . Before ; import org . junit . BeforeClass ; import java . util . HashSet ; import java . util . Set ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; public class TransportMasterNodeActionTests extends ESTestCase { private static ThreadPool threadPool ; private TestClusterService clusterService ; private TransportService transportService ; private CapturingTransport transport ; private DiscoveryNode localNode ; private DiscoveryNode remoteNode ; private DiscoveryNode [ ] allNodes ; @BeforeClass public static void beforeClass ( ) { threadPool = new ThreadPool ( <str> ) ; } @Override @Before public void setUp ( ) throws Exception { super . setUp ( ) ; transport = new CapturingTransport ( ) ; clusterService = new TestClusterService ( threadPool ) ; transportService = new TransportService ( transport , threadPool ) ; transportService . start ( ) ; localNode = new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) ; remoteNode = new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) ; allNodes = new DiscoveryNode [ ] { localNode , remoteNode } ; } @AfterClass public static void afterClass ( ) { ThreadPool . terminate ( threadPool , <int> , TimeUnit . SECONDS ) ; threadPool = null ; } < T > void assertListenerThrows ( String msg , ActionFuture < ? > listener , Class < ? > klass ) throws InterruptedException { try { listener . get ( ) ; fail ( msg ) ; } catch ( ExecutionException ex ) { assertThat ( ex . getCause ( ) , instanceOf ( klass ) ) ; } } public static class Request extends MasterNodeRequest < Request > { @Override public ActionRequestValidationException validate ( ) { return null ; } } class Response extends ActionResponse { } class Action extends TransportMasterNodeAction < Request , Response > { Action ( Settings settings , String actionName , TransportService transportService , ClusterService clusterService , ThreadPool threadPool ) { super ( settings , actionName , transportService , clusterService , threadPool , new ActionFilters ( new HashSet < > ( ) ) , new IndexNameExpressionResolver ( Settings . EMPTY ) , Request : : new ) ; } @Override protected void doExecute ( final Request request , ActionListener < Response > listener ) { super . doExecute ( request , new ThreadedActionListener < > ( logger , threadPool , ThreadPool . Names . SAME , listener ) ) ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected Response newResponse ( ) { return new Response ( ) ; } @Override protected void masterOperation ( Request request , ClusterState state , ActionListener < Response > listener ) throws Exception { listener . onResponse ( new Response ( ) ) ; } @Override protected ClusterBlockException checkBlock ( Request request , ClusterState state ) { return null ; } } public void testLocalOperationWithoutBlocks ( ) throws ExecutionException , InterruptedException { final boolean masterOperationFailure = randomBoolean ( ) ; Request request = new Request ( ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; final Throwable exception = new Throwable ( ) ; final Response response = new Response ( ) ; clusterService . setState ( ClusterStateCreationUtils . state ( localNode , localNode , allNodes ) ) ; new Action ( Settings . EMPTY , <str> , transportService , clusterService , threadPool ) { @Override protected void masterOperation ( Request request , ClusterState state , ActionListener < Response > listener ) throws Exception { if ( masterOperationFailure ) { listener . onFailure ( exception ) ; } else { listener . onResponse ( response ) ; } } } . execute ( request , listener ) ; assertTrue ( listener . isDone ( ) ) ; if ( masterOperationFailure ) { try { listener . get ( ) ; fail ( <str> ) ; } catch ( ExecutionException ex ) { assertThat ( ex . getCause ( ) , equalTo ( exception ) ) ; } } else { assertThat ( listener . get ( ) , equalTo ( response ) ) ; } } public void testLocalOperationWithBlocks ( ) throws ExecutionException , InterruptedException { final boolean retryableBlock = randomBoolean ( ) ; final boolean unblockBeforeTimeout = randomBoolean ( ) ; Request request = new Request ( ) . masterNodeTimeout ( TimeValue . timeValueSeconds ( unblockBeforeTimeout ? <int> : <int> ) ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; ClusterBlock block = new ClusterBlock ( <int> , <str> , retryableBlock , true , randomFrom ( RestStatus . values ( ) ) , ClusterBlockLevel . ALL ) ; ClusterState stateWithBlock = ClusterState . builder ( ClusterStateCreationUtils . state ( localNode , localNode , allNodes ) ) . blocks ( ClusterBlocks . builder ( ) . addGlobalBlock ( block ) ) . build ( ) ; clusterService . setState ( stateWithBlock ) ; new Action ( Settings . EMPTY , <str> , transportService , clusterService , threadPool ) { @Override protected ClusterBlockException checkBlock ( Request request , ClusterState state ) { Set < ClusterBlock > blocks = state . blocks ( ) . global ( ) ; return blocks . isEmpty ( ) ? null : new ClusterBlockException ( blocks ) ; } } . execute ( request , listener ) ; if ( retryableBlock & & unblockBeforeTimeout ) { assertFalse ( listener . isDone ( ) ) ; clusterService . setState ( ClusterState . builder ( ClusterStateCreationUtils . state ( localNode , localNode , allNodes ) ) . blocks ( ClusterBlocks . EMPTY_CLUSTER_BLOCK ) . build ( ) ) ; assertTrue ( listener . isDone ( ) ) ; listener . get ( ) ; return ; } assertTrue ( listener . isDone ( ) ) ; if ( retryableBlock ) { try { listener . get ( ) ; fail ( <str> ) ; } catch ( ExecutionException ex ) { assertThat ( ex . getCause ( ) , instanceOf ( MasterNotDiscoveredException . class ) ) ; assertThat ( ex . getCause ( ) . getCause ( ) , instanceOf ( ClusterBlockException . class ) ) ; } } else { assertListenerThrows ( <str> , listener , ClusterBlockException . class ) ; } } public void testForceLocalOperation ( ) throws ExecutionException , InterruptedException { Request request = new Request ( ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; clusterService . setState ( ClusterStateCreationUtils . state ( localNode , randomFrom ( null , localNode , remoteNode ) , allNodes ) ) ; new Action ( Settings . EMPTY , <str> , transportService , clusterService , threadPool ) { @Override protected boolean localExecute ( Request request ) { return true ; } } . execute ( request , listener ) ; assertTrue ( listener . isDone ( ) ) ; listener . get ( ) ; } public void testMasterNotAvailable ( ) throws ExecutionException , InterruptedException { Request request = new Request ( ) . masterNodeTimeout ( TimeValue . timeValueSeconds ( <int> ) ) ; clusterService . setState ( ClusterStateCreationUtils . state ( localNode , null , allNodes ) ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; new Action ( Settings . EMPTY , <str> , transportService , clusterService , threadPool ) . execute ( request , listener ) ; assertTrue ( listener . isDone ( ) ) ; assertListenerThrows ( <str> , listener , MasterNotDiscoveredException . class ) ; } public void testMasterBecomesAvailable ( ) throws ExecutionException , InterruptedException { Request request = new Request ( ) ; clusterService . setState ( ClusterStateCreationUtils . state ( localNode , null , allNodes ) ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; new Action ( Settings . EMPTY , <str> , transportService , clusterService , threadPool ) . execute ( request , listener ) ; assertFalse ( listener . isDone ( ) ) ; clusterService . setState ( ClusterStateCreationUtils . state ( localNode , localNode , allNodes ) ) ; assertTrue ( listener . isDone ( ) ) ; listener . get ( ) ; } public void testDelegateToMaster ( ) throws ExecutionException , InterruptedException { Request request = new Request ( ) ; clusterService . setState ( ClusterStateCreationUtils . state ( localNode , remoteNode , allNodes ) ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; new Action ( Settings . EMPTY , <str> , transportService , clusterService , threadPool ) . execute ( request , listener ) ; assertThat ( transport . capturedRequests ( ) . length , equalTo ( <int> ) ) ; CapturingTransport . CapturedRequest capturedRequest = transport . capturedRequests ( ) [ <int> ] ; assertTrue ( capturedRequest . node . isMasterNode ( ) ) ; assertThat ( capturedRequest . request , equalTo ( request ) ) ; assertThat ( capturedRequest . action , equalTo ( <str> ) ) ; Response response = new Response ( ) ; transport . handleResponse ( capturedRequest . requestId , response ) ; assertTrue ( listener . isDone ( ) ) ; assertThat ( listener . get ( ) , equalTo ( response ) ) ; } public void testDelegateToFailingMaster ( ) throws ExecutionException , InterruptedException { boolean failsWithConnectTransportException = randomBoolean ( ) ; Request request = new Request ( ) . masterNodeTimeout ( TimeValue . timeValueSeconds ( failsWithConnectTransportException ? <int> : <int> ) ) ; clusterService . setState ( ClusterStateCreationUtils . state ( localNode , remoteNode , allNodes ) ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; new Action ( Settings . EMPTY , <str> , transportService , clusterService , threadPool ) . execute ( request , listener ) ; assertThat ( transport . capturedRequests ( ) . length , equalTo ( <int> ) ) ; CapturingTransport . CapturedRequest capturedRequest = transport . capturedRequests ( ) [ <int> ] ; assertTrue ( capturedRequest . node . isMasterNode ( ) ) ; assertThat ( capturedRequest . request , equalTo ( request ) ) ; assertThat ( capturedRequest . action , equalTo ( <str> ) ) ; if ( failsWithConnectTransportException ) { transport . handleResponse ( capturedRequest . requestId , new ConnectTransportException ( remoteNode , <str> ) ) ; assertFalse ( listener . isDone ( ) ) ; clusterService . setState ( ClusterStateCreationUtils . state ( localNode , localNode , allNodes ) ) ; assertTrue ( listener . isDone ( ) ) ; listener . get ( ) ; } else { Throwable t = new Throwable ( ) ; transport . handleResponse ( capturedRequest . requestId , t ) ; assertTrue ( listener . isDone ( ) ) ; try { listener . get ( ) ; fail ( <str> ) ; } catch ( ExecutionException ex ) { assertThat ( ex . getCause ( ) . getCause ( ) , equalTo ( t ) ) ; } } } public void testMasterFailoverAfterStepDown ( ) throws ExecutionException , InterruptedException { Request request = new Request ( ) . masterNodeTimeout ( TimeValue . timeValueHours ( <int> ) ) ; PlainActionFuture < Response > listener = new PlainActionFuture < > ( ) ; final Response response = new Response ( ) ; clusterService . setState ( ClusterStateCreationUtils . state ( localNode , localNode , allNodes ) ) ; new Action ( Settings . EMPTY , <str> , transportService , clusterService , threadPool ) { @Override protected void masterOperation ( Request request , ClusterState state , ActionListener < Response > listener ) throws Exception { TransportMasterNodeActionTests . this . clusterService . setState ( ClusterStateCreationUtils . state ( localNode , remoteNode , allNodes ) ) ; Throwable failure = randomBoolean ( ) ? new Discovery . FailedToCommitClusterStateException ( <str> ) : new NotMasterException ( <str> ) ; listener . onFailure ( failure ) ; } } . execute ( request , listener ) ; assertThat ( transport . capturedRequests ( ) . length , equalTo ( <int> ) ) ; CapturingTransport . CapturedRequest capturedRequest = transport . capturedRequests ( ) [ <int> ] ; assertTrue ( capturedRequest . node . isMasterNode ( ) ) ; assertThat ( capturedRequest . request , equalTo ( request ) ) ; assertThat ( capturedRequest . action , equalTo ( <str> ) ) ; transport . handleResponse ( capturedRequest . requestId , response ) ; assertTrue ( listener . isDone ( ) ) ; assertThat ( listener . get ( ) , equalTo ( response ) ) ; } } 

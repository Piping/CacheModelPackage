package com . google . common . io ; import static org . easymock . EasyMock . createStrictMock ; import static org . easymock . EasyMock . expectLastCall ; import static org . easymock . EasyMock . replay ; import static org . easymock . EasyMock . reset ; import static org . easymock . EasyMock . verify ; import junit . framework . TestCase ; import java . io . ByteArrayInputStream ; import java . io . Closeable ; import java . io . IOException ; import java . io . InputStream ; import java . io . Reader ; public class CloseablesTest extends TestCase { private Closeable mockCloseable ; public void testClose_closeableClean ( ) throws IOException { setupCloseable ( false ) ; doClose ( mockCloseable , false , false ) ; setupCloseable ( false ) ; doClose ( mockCloseable , true , false ) ; } public void testClose_closeableWithEatenException ( ) throws IOException { setupCloseable ( true ) ; doClose ( mockCloseable , true ) ; } public void testClose_closeableWithThrownException ( ) throws IOException { setupCloseable ( true ) ; doClose ( mockCloseable , false ) ; } public void testCloseQuietly_inputStreamWithEatenException ( ) throws IOException { TestInputStream in = new TestInputStream ( new ByteArrayInputStream ( new byte [ <int> ] ) , TestOption . CLOSE_THROWS ) ; Closeables . closeQuietly ( in ) ; assertTrue ( in . closed ( ) ) ; } public void testCloseQuietly_readerWithEatenException ( ) throws IOException { TestReader in = new TestReader ( TestOption . CLOSE_THROWS ) ; Closeables . closeQuietly ( in ) ; assertTrue ( in . closed ( ) ) ; } public void testCloseNull ( ) throws IOException { Closeables . close ( null , true ) ; Closeables . close ( null , false ) ; } public void testCloseQuietlyNull_inputStream ( ) { Closeables . closeQuietly ( ( InputStream ) null ) ; } public void testCloseQuietlyNull_reader ( ) { Closeables . closeQuietly ( ( Reader ) null ) ; } @Override protected void setUp ( ) throws Exception { mockCloseable = createStrictMock ( Closeable . class ) ; } private void expectThrown ( ) { expectLastCall ( ) . andThrow ( new IOException ( <str> + <str> ) ) ; } private void setupCloseable ( boolean shouldThrow ) throws IOException { reset ( mockCloseable ) ; mockCloseable . close ( ) ; if ( shouldThrow ) { expectThrown ( ) ; } replay ( mockCloseable ) ; } private void doClose ( Closeable closeable , boolean swallowException ) { doClose ( closeable , swallowException , ! swallowException ) ; } private void doClose ( Closeable closeable , boolean swallowException , boolean expectThrown ) { try { Closeables . close ( closeable , swallowException ) ; if ( expectThrown ) { fail ( <str> ) ; } } catch ( IOException e ) { if ( ! expectThrown ) { fail ( <str> ) ; } } verify ( closeable ) ; } } 

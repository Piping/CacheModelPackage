package com . badlogic . gdx . physics . bullet . collision ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btMultiSphereShape extends btConvexInternalAabbCachingShape { private long swigCPtr ; protected btMultiSphereShape ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , CollisionJNI . btMultiSphereShape_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btMultiSphereShape ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( CollisionJNI . btMultiSphereShape_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btMultiSphereShape obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; CollisionJNI . delete_btMultiSphereShape ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public btMultiSphereShape ( Vector3 [ ] positions , float [ ] radi , int numSpheres ) { this ( CollisionJNI . new_btMultiSphereShape ( positions , radi , numSpheres ) , true ) ; } public int getSphereCount ( ) { return CollisionJNI . btMultiSphereShape_getSphereCount ( swigCPtr , this ) ; } public Vector3 getSpherePosition ( int index ) { return CollisionJNI . btMultiSphereShape_getSpherePosition ( swigCPtr , this , index ) ; } public float getSphereRadius ( int index ) { return CollisionJNI . btMultiSphereShape_getSphereRadius ( swigCPtr , this , index ) ; } } 

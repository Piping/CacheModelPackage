package org . elasticsearch . common ; import org . elasticsearch . test . ESTestCase ; import org . hamcrest . Matchers ; import java . util . Locale ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . nullValue ; public class BooleansTests extends ESTestCase { public void testIsBoolean ( ) { String [ ] booleans = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; String [ ] notBooleans = new String [ ] { <str> , <str> , <str> , <str> , <str> } ; assertThat ( Booleans . isBoolean ( null , <int> , <int> ) , is ( false ) ) ; for ( String b : booleans ) { String t = <str> + b + <str> ; assertThat ( <str> + b + <str> , Booleans . isBoolean ( t . toCharArray ( ) , <str> . length ( ) , b . length ( ) ) , Matchers . equalTo ( true ) ) ; } for ( String nb : notBooleans ) { String t = <str> + nb + <str> ; assertThat ( <str> + nb + <str> , Booleans . isBoolean ( t . toCharArray ( ) , <str> . length ( ) , nb . length ( ) ) , Matchers . equalTo ( false ) ) ; } } public void testParseBoolean ( ) { assertThat ( Booleans . parseBoolean ( randomFrom ( <str> , <str> , <str> , <str> ) , randomBoolean ( ) ) , is ( true ) ) ; assertThat ( Booleans . parseBoolean ( randomFrom ( <str> , <str> , <str> , <str> ) , randomBoolean ( ) ) , is ( false ) ) ; assertThat ( Booleans . parseBoolean ( randomFrom ( <str> , <str> , <str> ) . toUpperCase ( Locale . ROOT ) , randomBoolean ( ) ) , is ( true ) ) ; assertThat ( Booleans . parseBoolean ( null , false ) , is ( false ) ) ; assertThat ( Booleans . parseBoolean ( null , true ) , is ( true ) ) ; assertThat ( Booleans . parseBoolean ( randomFrom ( <str> , <str> , <str> , <str> ) , randomFrom ( null , Boolean . TRUE , Boolean . FALSE ) ) , is ( true ) ) ; assertThat ( Booleans . parseBoolean ( randomFrom ( <str> , <str> , <str> , <str> ) , randomFrom ( null , Boolean . TRUE , Boolean . FALSE ) ) , is ( false ) ) ; assertThat ( Booleans . parseBoolean ( randomFrom ( <str> , <str> , <str> ) . toUpperCase ( Locale . ROOT ) , randomFrom ( null , Boolean . TRUE , Boolean . FALSE ) ) , is ( true ) ) ; assertThat ( Booleans . parseBoolean ( null , Boolean . FALSE ) , is ( false ) ) ; assertThat ( Booleans . parseBoolean ( null , Boolean . TRUE ) , is ( true ) ) ; assertThat ( Booleans . parseBoolean ( null , null ) , nullValue ( ) ) ; char [ ] chars = randomFrom ( <str> , <str> , <str> , <str> ) . toCharArray ( ) ; assertThat ( Booleans . parseBoolean ( chars , <int> , chars . length , randomBoolean ( ) ) , is ( true ) ) ; chars = randomFrom ( <str> , <str> , <str> , <str> ) . toCharArray ( ) ; assertThat ( Booleans . parseBoolean ( chars , <int> , chars . length , randomBoolean ( ) ) , is ( false ) ) ; chars = randomFrom ( <str> , <str> , <str> ) . toUpperCase ( Locale . ROOT ) . toCharArray ( ) ; assertThat ( Booleans . parseBoolean ( chars , <int> , chars . length , randomBoolean ( ) ) , is ( true ) ) ; } public void testParseBooleanExact ( ) { assertThat ( Booleans . parseBooleanExact ( randomFrom ( <str> , <str> , <str> , <str> ) ) , is ( true ) ) ; assertThat ( Booleans . parseBooleanExact ( randomFrom ( <str> , <str> , <str> , <str> ) ) , is ( false ) ) ; try { Booleans . parseBooleanExact ( randomFrom ( null , <str> , <str> , <str> ) ) ; fail ( <str> ) ; } catch ( Exception ex ) { assertTrue ( ex instanceof IllegalArgumentException ) ; } } public void testIsExplicit ( ) { assertThat ( Booleans . isExplicitFalse ( randomFrom ( <str> , <str> , <str> , <str> , <str> , null ) ) , is ( false ) ) ; assertThat ( Booleans . isExplicitFalse ( randomFrom ( <str> , <str> , <str> , <str> ) ) , is ( true ) ) ; assertThat ( Booleans . isExplicitTrue ( randomFrom ( <str> , <str> , <str> , <str> ) ) , is ( true ) ) ; assertThat ( Booleans . isExplicitTrue ( randomFrom ( <str> , <str> , <str> , <str> , <str> , null ) ) , is ( false ) ) ; } } 

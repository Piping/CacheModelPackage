package com . google . common . io ; import static com . google . common . base . Charsets . UTF_8 ; import static com . google . common . io . Files . simplifyPath ; import com . google . common . base . CharMatcher ; import com . google . common . base . Splitter ; import junit . framework . TestCase ; import java . io . IOException ; import java . net . URL ; import java . util . Iterator ; public class FilesSimplifyPathTest extends TestCase { public void testSimplifyEmptyString ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplifyDot ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplifyWhiteSpace ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify2 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify3 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify4 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify5 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify6 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify7 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify8 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify9 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify10 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify11 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify12 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplify13 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplifyDotDot ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplifyDotDotSlash ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplifyDotDots ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSimplifyRootedDotDots ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testMadbotsBug ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void test705 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void test716 ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testHiddenFiles ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testMultipleDotFilenames ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testSlashDot ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testInitialSlashDotDot ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testInitialSlashDot ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testConsecutiveParentsAfterPresent ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testRfc2396Normal ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testRfc2396Abnormal ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testRfc3986Normal ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testRfc3986Abnormal ( ) { assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; assertEquals ( <str> , simplifyPath ( <str> ) ) ; } public void testExtensiveWithAbsolutePrefix ( ) throws IOException { doExtensiveTest ( <str> ) ; } public void testExtensiveNoPrefix ( ) throws IOException { doExtensiveTest ( <str> ) ; } private void doExtensiveTest ( String resourceName ) throws IOException { Splitter splitter = Splitter . on ( CharMatcher . WHITESPACE ) ; URL url = getClass ( ) . getResource ( resourceName ) ; for ( String line : Resources . readLines ( url , UTF_8 ) ) { Iterator < String > iterator = splitter . split ( line ) . iterator ( ) ; String input = iterator . next ( ) ; String expectedOutput = iterator . next ( ) ; assertFalse ( iterator . hasNext ( ) ) ; assertEquals ( expectedOutput , simplifyPath ( input ) ) ; } } } 

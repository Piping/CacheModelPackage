package org . elasticsearch . search . suggest ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . util . ExtensionPoint ; import org . elasticsearch . indices . IndicesService ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . search . suggest . completion . CompletionSuggester ; import org . elasticsearch . search . suggest . phrase . PhraseSuggester ; import org . elasticsearch . search . suggest . term . TermSuggester ; import java . util . * ; public final class Suggesters extends ExtensionPoint . ClassMap < Suggester > { private final Map < String , Suggester > parsers ; public Suggesters ( ) { this ( Collections . emptyMap ( ) ) ; } public Suggesters ( Map < String , Suggester > suggesters ) { super ( <str> , Suggester . class , new HashSet < > ( Arrays . asList ( <str> , <str> , <str> ) ) , Suggesters . class , SuggestParseElement . class , SuggestPhase . class ) ; this . parsers = Collections . unmodifiableMap ( suggesters ) ; } @Inject public Suggesters ( Map < String , Suggester > suggesters , ScriptService scriptService , IndicesService indexServices ) { this ( addBuildIns ( suggesters , scriptService , indexServices ) ) ; } private static Map < String , Suggester > addBuildIns ( Map < String , Suggester > suggesters , ScriptService scriptService , IndicesService indexServices ) { final Map < String , Suggester > map = new HashMap < > ( ) ; map . put ( <str> , new PhraseSuggester ( scriptService , indexServices ) ) ; map . put ( <str> , new TermSuggester ( ) ) ; map . put ( <str> , new CompletionSuggester ( ) ) ; map . putAll ( suggesters ) ; return map ; } public Suggester get ( String type ) { return parsers . get ( type ) ; } } 

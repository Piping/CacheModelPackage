package org . gradle . api . tasks ; import org . gradle . StartParameter ; import org . gradle . api . internal . ConventionTask ; import org . gradle . initialization . GradleLauncher ; import org . gradle . initialization . GradleLauncherFactory ; import java . io . File ; import java . util . Collection ; import java . util . List ; public class GradleBuild extends ConventionTask { private final GradleLauncherFactory gradleLauncherFactory ; private StartParameter startParameter ; public GradleBuild ( ) { this . gradleLauncherFactory = getServices ( ) . get ( GradleLauncherFactory . class ) ; this . startParameter = getServices ( ) . get ( StartParameter . class ) . newBuild ( ) ; startParameter . setCurrentDir ( getProject ( ) . getProjectDir ( ) ) ; } public StartParameter getStartParameter ( ) { return startParameter ; } public void setStartParameter ( StartParameter startParameter ) { this . startParameter = startParameter ; } public File getDir ( ) { return getStartParameter ( ) . getCurrentDir ( ) ; } public void setDir ( Object dir ) { getStartParameter ( ) . setCurrentDir ( getProject ( ) . file ( dir ) ) ; } public File getBuildFile ( ) { return getStartParameter ( ) . getBuildFile ( ) ; } public void setBuildFile ( Object file ) { getStartParameter ( ) . setBuildFile ( getProject ( ) . file ( file ) ) ; } public List < String > getTasks ( ) { return getStartParameter ( ) . getTaskNames ( ) ; } public void setTasks ( Collection < String > tasks ) { getStartParameter ( ) . setTaskNames ( tasks ) ; } @TaskAction void build ( ) { GradleLauncher launcher = gradleLauncherFactory . newInstance ( getStartParameter ( ) ) ; try { launcher . run ( ) ; } finally { launcher . stop ( ) ; } } } 

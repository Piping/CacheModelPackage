package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . lang . reflect . Method ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . views . memory . MemoryViewUtil ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . memory . AbstractTableRendering ; import org . eclipse . jface . action . Action ; import org . eclipse . ui . PlatformUI ; public class ResetToBaseAddressAction extends Action { private AbstractBaseTableRendering fRendering ; public ResetToBaseAddressAction ( AbstractBaseTableRendering rendering ) { fRendering = rendering ; setText ( DebugUIMessages . ResetMemoryBlockAction_title ) ; setToolTipText ( DebugUIMessages . ResetMemoryBlockAction_tootip ) ; setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_RESET_MEMORY ) ) ; setHoverImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_LCL_RESET_MEMORY ) ) ; setDisabledImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_RESET_MEMORY ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugUIConstants . PLUGIN_ID + <str> ) ; } @SuppressWarnings ( <str> ) @Override public void run ( ) { Class < ? extends AbstractBaseTableRendering > renderingClass = fRendering . getClass ( ) ; try { Method method = renderingClass . getMethod ( <str> , new Class [ ] { } ) ; if ( method . getDeclaringClass ( ) . equals ( AbstractTableRendering . class ) ) { try { fRendering . resetRendering ( ) ; } catch ( DebugException e ) { MemoryViewUtil . openError ( DebugUIMessages . AbstractTableRendering_12 , DebugUIMessages . AbstractTableRendering_13 , e ) ; } return ; } } catch ( SecurityException e ) { } catch ( NoSuchMethodException e ) { try { fRendering . resetRendering ( ) ; } catch ( DebugException e1 ) { MemoryViewUtil . openError ( DebugUIMessages . AbstractTableRendering_12 , DebugUIMessages . AbstractTableRendering_13 , e ) ; } } if ( fRendering instanceof AbstractTableRendering ) { ( ( AbstractTableRendering ) fRendering ) . reset ( ) ; } } } 

package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . memcache ; import org . gradle . internal . component . external . model . MutableModuleComponentResolveMetaData ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import static org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult . State . Missing ; import static org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult . State . Resolved ; class CachedModuleVersionResult { private final BuildableModuleComponentMetaDataResolveResult . State state ; private final boolean authoritative ; private final MutableModuleComponentResolveMetaData metaData ; public CachedModuleVersionResult ( BuildableModuleComponentMetaDataResolveResult result ) { this . state = result . getState ( ) ; if ( state = = Resolved ) { this . metaData = result . getMetaData ( ) . copy ( ) ; this . authoritative = result . isAuthoritative ( ) ; } else if ( state = = Missing ) { this . metaData = null ; this . authoritative = result . isAuthoritative ( ) ; } else { this . metaData = null ; this . authoritative = false ; } } public boolean isCacheable ( ) { return state = = Missing | | state = = Resolved ; } public void supply ( BuildableModuleComponentMetaDataResolveResult result ) { assert isCacheable ( ) : <str> ; if ( state = = Resolved ) { MutableModuleComponentResolveMetaData metaData = this . metaData . copy ( ) ; result . resolved ( metaData ) ; result . setAuthoritative ( authoritative ) ; } else if ( state = = Missing ) { result . missing ( ) ; result . setAuthoritative ( authoritative ) ; } } } 

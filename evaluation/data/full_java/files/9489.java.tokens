package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . primitives . UnsignedInts . INT_MASK ; import static com . google . common . primitives . UnsignedInts . compare ; import static com . google . common . primitives . UnsignedInts . toLong ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import java . math . BigInteger ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @CheckReturnValue @GwtCompatible ( emulated = true ) public final class UnsignedInteger extends Number implements Comparable < UnsignedInteger > { public static final UnsignedInteger ZERO = fromIntBits ( <int> ) ; public static final UnsignedInteger ONE = fromIntBits ( <int> ) ; public static final UnsignedInteger MAX_VALUE = fromIntBits ( - <int> ) ; private final int value ; private UnsignedInteger ( int value ) { this . value = value & <hex> ; } public static UnsignedInteger fromIntBits ( int bits ) { return new UnsignedInteger ( bits ) ; } public static UnsignedInteger valueOf ( long value ) { checkArgument ( ( value & INT_MASK ) = = value , <str> , value ) ; return fromIntBits ( ( int ) value ) ; } public static UnsignedInteger valueOf ( BigInteger value ) { checkNotNull ( value ) ; checkArgument ( value . signum ( ) > = <int> & & value . bitLength ( ) < = Integer . SIZE , <str> , value ) ; return fromIntBits ( value . intValue ( ) ) ; } public static UnsignedInteger valueOf ( String string ) { return valueOf ( string , <int> ) ; } public static UnsignedInteger valueOf ( String string , int radix ) { return fromIntBits ( UnsignedInts . parseUnsignedInt ( string , radix ) ) ; } public UnsignedInteger plus ( UnsignedInteger val ) { return fromIntBits ( this . value + checkNotNull ( val ) . value ) ; } public UnsignedInteger minus ( UnsignedInteger val ) { return fromIntBits ( value - checkNotNull ( val ) . value ) ; } @GwtIncompatible ( <str> ) public UnsignedInteger times ( UnsignedInteger val ) { return fromIntBits ( value * checkNotNull ( val ) . value ) ; } public UnsignedInteger dividedBy ( UnsignedInteger val ) { return fromIntBits ( UnsignedInts . divide ( value , checkNotNull ( val ) . value ) ) ; } public UnsignedInteger mod ( UnsignedInteger val ) { return fromIntBits ( UnsignedInts . remainder ( value , checkNotNull ( val ) . value ) ) ; } @Override public int intValue ( ) { return value ; } @Override public long longValue ( ) { return toLong ( value ) ; } @Override public float floatValue ( ) { return longValue ( ) ; } @Override public double doubleValue ( ) { return longValue ( ) ; } public BigInteger bigIntegerValue ( ) { return BigInteger . valueOf ( longValue ( ) ) ; } @Override public int compareTo ( UnsignedInteger other ) { checkNotNull ( other ) ; return compare ( value , other . value ) ; } @Override public int hashCode ( ) { return value ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof UnsignedInteger ) { UnsignedInteger other = ( UnsignedInteger ) obj ; return value = = other . value ; } return false ; } @Override public String toString ( ) { return toString ( <int> ) ; } public String toString ( int radix ) { return UnsignedInts . toString ( value , radix ) ; } } 

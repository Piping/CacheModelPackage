package org . gradle . api . internal . artifacts . ivyservice . resolveengine . result ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; public class VersionSelectionReasons { public static final ComponentSelectionReason REQUESTED = new DefaultComponentSelectionReason ( false , false , false , true , <str> ) ; public static final ComponentSelectionReason ROOT = new DefaultComponentSelectionReason ( false , false , false , true , <str> ) ; public static final ComponentSelectionReason FORCED = new DefaultComponentSelectionReason ( true , false , false , false , <str> ) ; public static final ComponentSelectionReason CONFLICT_RESOLUTION = new DefaultComponentSelectionReason ( false , true , false , false , <str> ) ; public static final ComponentSelectionReason SELECTED_BY_RULE = new DefaultComponentSelectionReason ( false , false , true , false , <str> ) ; public static final ComponentSelectionReason CONFLICT_RESOLUTION_BY_RULE = new DefaultComponentSelectionReason ( false , true , true , false , <str> ) ; public static ComponentSelectionReason withConflictResolution ( ComponentSelectionReason reason ) { if ( reason . isConflictResolution ( ) ) { return reason ; } else if ( reason = = SELECTED_BY_RULE ) { return CONFLICT_RESOLUTION_BY_RULE ; } else if ( reason = = REQUESTED ) { return CONFLICT_RESOLUTION ; } else if ( reason = = FORCED ) { return CONFLICT_RESOLUTION ; } throw new IllegalArgumentException ( <str> + reason ) ; } private static class DefaultComponentSelectionReason implements ComponentSelectionReason { private final boolean forced ; private final boolean conflictResolution ; private final boolean selectedByRule ; private final boolean expected ; private final String description ; private DefaultComponentSelectionReason ( boolean forced , boolean conflictResolution , boolean selectedByRule , boolean expected , String description ) { this . forced = forced ; this . conflictResolution = conflictResolution ; this . selectedByRule = selectedByRule ; this . expected = expected ; assert description ! = null ; this . description = description ; } public boolean isForced ( ) { return forced ; } public boolean isConflictResolution ( ) { return conflictResolution ; } public boolean isSelectedByRule ( ) { return selectedByRule ; } public boolean isExpected ( ) { return expected ; } public String getDescription ( ) { return description ; } public String toString ( ) { return description ; } } } 

package io . netty . handler . codec . socks ; import io . netty . util . internal . StringUtil ; final class SocksCommonUtils { public static final SocksRequest UNKNOWN_SOCKS_REQUEST = new UnknownSocksRequest ( ) ; public static final SocksResponse UNKNOWN_SOCKS_RESPONSE = new UnknownSocksResponse ( ) ; private static final int SECOND_ADDRESS_OCTET_SHIFT = <int> ; private static final int FIRST_ADDRESS_OCTET_SHIFT = <int> ; private static final int THIRD_ADDRESS_OCTET_SHIFT = <int> ; private static final int XOR_DEFAULT_VALUE = <hex> ; private SocksCommonUtils ( ) { } public static String intToIp ( int i ) { return String . valueOf ( i > > FIRST_ADDRESS_OCTET_SHIFT & XOR_DEFAULT_VALUE ) + <str> + ( i > > SECOND_ADDRESS_OCTET_SHIFT & XOR_DEFAULT_VALUE ) + <str> + ( i > > THIRD_ADDRESS_OCTET_SHIFT & XOR_DEFAULT_VALUE ) + <str> + ( i & XOR_DEFAULT_VALUE ) ; } private static final char [ ] ipv6conseqZeroFiller = { <str> , <str> } ; private static final char ipv6hextetSeparator = <str> ; public static String ipv6toCompressedForm ( byte [ ] src ) { assert src . length = = <int> ; int cmprHextet = - <int> ; int cmprSize = <int> ; for ( int hextet = <int> ; hextet < <int> ; ) { int curByte = hextet * <int> ; int size = <int> ; while ( curByte < src . length & & src [ curByte ] = = <int> & & src [ curByte + <int> ] = = <int> ) { curByte + = <int> ; size + + ; } if ( size > cmprSize ) { cmprHextet = hextet ; cmprSize = size ; } hextet = curByte / <int> + <int> ; } if ( cmprHextet = = - <int> | | cmprSize < <int> ) { return ipv6toStr ( src ) ; } StringBuilder sb = new StringBuilder ( <int> ) ; ipv6toStr ( sb , src , <int> , cmprHextet ) ; sb . append ( ipv6conseqZeroFiller ) ; ipv6toStr ( sb , src , cmprHextet + cmprSize , <int> ) ; return sb . toString ( ) ; } public static String ipv6toStr ( byte [ ] src ) { assert src . length = = <int> ; StringBuilder sb = new StringBuilder ( <int> ) ; ipv6toStr ( sb , src , <int> , <int> ) ; return sb . toString ( ) ; } private static void ipv6toStr ( StringBuilder sb , byte [ ] src , int fromHextet , int toHextet ) { int i ; toHextet - - ; for ( i = fromHextet ; i < toHextet ; i + + ) { appendHextet ( sb , src , i ) ; sb . append ( ipv6hextetSeparator ) ; } appendHextet ( sb , src , i ) ; } private static void appendHextet ( StringBuilder sb , byte [ ] src , int i ) { StringUtil . toHexString ( sb , src , i < < <int> , <int> ) ; } } 

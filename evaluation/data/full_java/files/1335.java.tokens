package org . apache . cassandra . batchlog ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . Collection ; import java . util . HashSet ; import com . google . common . collect . ImmutableMultimap ; import com . google . common . collect . Multimap ; import org . junit . Test ; import org . junit . matchers . JUnitMatchers ; import static org . hamcrest . CoreMatchers . is ; import static org . junit . Assert . assertThat ; public class BatchlogEndpointFilterTest { private static final String LOCAL = <str> ; @Test public void shouldSelect2hostsFromNonLocalRacks ( ) throws UnknownHostException { Multimap < String , InetAddress > endpoints = ImmutableMultimap . < String , InetAddress > builder ( ) . put ( LOCAL , InetAddress . getByName ( <str> ) ) . put ( LOCAL , InetAddress . getByName ( <str> ) ) . put ( <str> , InetAddress . getByName ( <str> ) ) . put ( <str> , InetAddress . getByName ( <str> ) ) . put ( <str> , InetAddress . getByName ( <str> ) ) . put ( <str> , InetAddress . getByName ( <str> ) ) . build ( ) ; Collection < InetAddress > result = new TestEndpointFilter ( LOCAL , endpoints ) . filter ( ) ; assertThat ( result . size ( ) , is ( <int> ) ) ; assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( <str> ) ) ) ; assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( <str> ) ) ) ; } @Test public void shouldSelectHostFromLocal ( ) throws UnknownHostException { Multimap < String , InetAddress > endpoints = ImmutableMultimap . < String , InetAddress > builder ( ) . put ( LOCAL , InetAddress . getByName ( <str> ) ) . put ( LOCAL , InetAddress . getByName ( <str> ) ) . put ( <str> , InetAddress . getByName ( <str> ) ) . build ( ) ; Collection < InetAddress > result = new TestEndpointFilter ( LOCAL , endpoints ) . filter ( ) ; assertThat ( result . size ( ) , is ( <int> ) ) ; assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( <str> ) ) ) ; assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( <str> ) ) ) ; } @Test public void shouldReturnAsIsIfNoEnoughEndpoints ( ) throws UnknownHostException { Multimap < String , InetAddress > endpoints = ImmutableMultimap . < String , InetAddress > builder ( ) . put ( LOCAL , InetAddress . getByName ( <str> ) ) . build ( ) ; Collection < InetAddress > result = new TestEndpointFilter ( LOCAL , endpoints ) . filter ( ) ; assertThat ( result . size ( ) , is ( <int> ) ) ; assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( <str> ) ) ) ; } @Test public void shouldSelectTwoRandomHostsFromSingleOtherRack ( ) throws UnknownHostException { Multimap < String , InetAddress > endpoints = ImmutableMultimap . < String , InetAddress > builder ( ) . put ( LOCAL , InetAddress . getByName ( <str> ) ) . put ( LOCAL , InetAddress . getByName ( <str> ) ) . put ( <str> , InetAddress . getByName ( <str> ) ) . put ( <str> , InetAddress . getByName ( <str> ) ) . put ( <str> , InetAddress . getByName ( <str> ) ) . build ( ) ; Collection < InetAddress > result = new TestEndpointFilter ( LOCAL , endpoints ) . filter ( ) ; assertThat ( new HashSet < > ( result ) . size ( ) , is ( <int> ) ) ; } private static class TestEndpointFilter extends BatchlogManager . EndpointFilter { TestEndpointFilter ( String localRack , Multimap < String , InetAddress > endpoints ) { super ( localRack , endpoints ) ; } @Override protected boolean isValid ( InetAddress input ) { return true ; } @Override protected int getRandomInt ( int bound ) { return bound - <int> ; } } } 

package com . badlogic . gdx . backends . android ; import android . content . Context ; import android . os . Bundle ; import android . service . wallpaper . WallpaperService ; import android . util . Log ; import android . view . MotionEvent ; import android . view . SurfaceHolder ; import android . view . WindowManager ; import com . badlogic . gdx . Application ; import com . badlogic . gdx . ApplicationListener ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Graphics ; import com . badlogic . gdx . utils . GdxNativesLoader ; public abstract class AndroidLiveWallpaperService extends WallpaperService { static { GdxNativesLoader . load ( ) ; } static final String TAG = <str> ; static boolean DEBUG = false ; protected volatile AndroidLiveWallpaper app = null ; protected SurfaceHolder . Callback view = null ; protected int viewFormat ; protected int viewWidth ; protected int viewHeight ; protected int engines = <int> ; protected int visibleEngines = <int> ; protected volatile AndroidWallpaperEngine linkedEngine = null ; protected void setLinkedEngine ( AndroidWallpaperEngine linkedEngine ) { synchronized ( sync ) { this . linkedEngine = linkedEngine ; } } protected volatile boolean isPreviewNotified = false ; protected volatile boolean notifiedPreviewState = false ; volatile int [ ] sync = new int [ <int> ] ; public AndroidLiveWallpaperService ( ) { super ( ) ; } @Override public void onCreate ( ) { if ( DEBUG ) Log . d ( TAG , <str> + hashCode ( ) ) ; Log . i ( TAG , <str> ) ; super . onCreate ( ) ; } @Override public Engine onCreateEngine ( ) { if ( DEBUG ) Log . d ( TAG , <str> ) ; Log . i ( TAG , <str> ) ; return new AndroidWallpaperEngine ( ) ; } public void onCreateApplication ( ) { if ( DEBUG ) Log . d ( TAG , <str> ) ; } public void initialize ( ApplicationListener listener ) { AndroidApplicationConfiguration config = new AndroidApplicationConfiguration ( ) ; initialize ( listener , config ) ; } public void initialize ( ApplicationListener listener , AndroidApplicationConfiguration config ) { if ( DEBUG ) Log . d ( TAG , <str> ) ; app . initialize ( listener , config ) ; if ( config . getTouchEventsForLiveWallpaper & & Integer . parseInt ( android . os . Build . VERSION . SDK ) > = <int> ) linkedEngine . setTouchEventsEnabled ( true ) ; } public SurfaceHolder getSurfaceHolder ( ) { if ( DEBUG ) Log . d ( TAG , <str> ) ; synchronized ( sync ) { if ( linkedEngine = = null ) return null ; else return linkedEngine . getSurfaceHolder ( ) ; } } public void onDeepPauseApplication ( ) { if ( DEBUG ) Log . d ( TAG , <str> ) ; if ( app ! = null ) { app . graphics . clearManagedCaches ( ) ; } } @Override public void onDestroy ( ) { if ( DEBUG ) Log . d ( TAG , <str> + hashCode ( ) ) ; Log . i ( TAG , <str> ) ; super . onDestroy ( ) ; if ( app ! = null ) { app . onDestroy ( ) ; app = null ; view = null ; } } @Override protected void finalize ( ) throws Throwable { Log . i ( TAG , <str> ) ; super . finalize ( ) ; } public AndroidLiveWallpaper getLiveWallpaper ( ) { return app ; } public WindowManager getWindowManager ( ) { return ( WindowManager ) getSystemService ( Context . WINDOW_SERVICE ) ; } public class AndroidWallpaperEngine extends Engine { protected boolean engineIsVisible = false ; protected int engineFormat ; protected int engineWidth ; protected int engineHeight ; public AndroidWallpaperEngine ( ) { if ( DEBUG ) Log . d ( TAG , <str> + hashCode ( ) ) ; } @Override public void onCreate ( final SurfaceHolder surfaceHolder ) { if ( DEBUG ) Log . d ( TAG , <str> + hashCode ( ) + <str> + engines + <str> + ( linkedEngine = = this ) + <str> + Thread . currentThread ( ) . toString ( ) ) ; super . onCreate ( surfaceHolder ) ; } @Override public void onSurfaceCreated ( final SurfaceHolder holder ) { engines + + ; setLinkedEngine ( this ) ; if ( DEBUG ) Log . d ( TAG , <str> + hashCode ( ) + <str> + engines + <str> + ( linkedEngine = = this ) ) ; Log . i ( TAG , <str> ) ; super . onSurfaceCreated ( holder ) ; if ( engines = = <int> ) { visibleEngines = <int> ; } if ( engines = = <int> & & app = = null ) { viewFormat = <int> ; viewWidth = <int> ; viewHeight = <int> ; app = new AndroidLiveWallpaper ( AndroidLiveWallpaperService . this ) ; onCreateApplication ( ) ; if ( app . graphics = = null ) throw new Error ( <str> ) ; } view = ( SurfaceHolder . Callback ) app . graphics . view ; this . getSurfaceHolder ( ) . removeCallback ( view ) ; engineFormat = viewFormat ; engineWidth = viewWidth ; engineHeight = viewHeight ; if ( engines = = <int> ) { view . surfaceCreated ( holder ) ; } else { view . surfaceDestroyed ( holder ) ; notifySurfaceChanged ( engineFormat , engineWidth , engineHeight , false ) ; view . surfaceCreated ( holder ) ; } notifyPreviewState ( ) ; notifyOffsetsChanged ( ) ; if ( ! Gdx . graphics . isContinuousRendering ( ) ) { Gdx . graphics . requestRendering ( ) ; } } @Override public void onSurfaceChanged ( final SurfaceHolder holder , final int format , final int width , final int height ) { if ( DEBUG ) Log . d ( TAG , <str> + isPreview ( ) + <str> + hashCode ( ) + <str> + engines + <str> + ( linkedEngine = = this ) + <str> + getSurfaceHolder ( ) . getSurface ( ) . isValid ( ) ) ; Log . i ( TAG , <str> ) ; super . onSurfaceChanged ( holder , format , width , height ) ; notifySurfaceChanged ( format , width , height , true ) ; } private void notifySurfaceChanged ( final int format , final int width , final int height , boolean forceUpdate ) { if ( ! forceUpdate & & format = = viewFormat & & width = = viewWidth & & height = = viewHeight ) { if ( DEBUG ) Log . d ( TAG , <str> ) ; } else { engineFormat = format ; engineWidth = width ; engineHeight = height ; if ( linkedEngine = = this ) { viewFormat = engineFormat ; viewWidth = engineWidth ; viewHeight = engineHeight ; view . surfaceChanged ( this . getSurfaceHolder ( ) , viewFormat , viewWidth , viewHeight ) ; } else { if ( DEBUG ) Log . d ( TAG , <str> ) ; } } } @Override public void onVisibilityChanged ( final boolean visible ) { boolean reportedVisible = isVisible ( ) ; if ( DEBUG ) Log . d ( TAG , <str> + visible + <str> + reportedVisible + <str> + hashCode ( ) + <str> + getSurfaceHolder ( ) . getSurface ( ) . isValid ( ) ) ; super . onVisibilityChanged ( visible ) ; if ( reportedVisible = = false & & visible = = true ) { if ( DEBUG ) Log . d ( TAG , <str> ) ; return ; } notifyVisibilityChanged ( visible ) ; } private void notifyVisibilityChanged ( final boolean visible ) { if ( this . engineIsVisible ! = visible ) { this . engineIsVisible = visible ; if ( this . engineIsVisible ) onResume ( ) ; else onPause ( ) ; } else { if ( DEBUG ) Log . d ( TAG , <str> ) ; } } public void onResume ( ) { visibleEngines + + ; if ( DEBUG ) Log . d ( TAG , <str> + hashCode ( ) + <str> + engines + <str> + ( linkedEngine = = this ) + <str> + visibleEngines ) ; Log . i ( TAG , <str> ) ; if ( linkedEngine ! = null ) { if ( linkedEngine ! = this ) { setLinkedEngine ( this ) ; view . surfaceDestroyed ( this . getSurfaceHolder ( ) ) ; notifySurfaceChanged ( engineFormat , engineWidth , engineHeight , false ) ; view . surfaceCreated ( this . getSurfaceHolder ( ) ) ; } else { notifySurfaceChanged ( engineFormat , engineWidth , engineHeight , false ) ; } if ( visibleEngines = = <int> ) app . onResume ( ) ; notifyPreviewState ( ) ; notifyOffsetsChanged ( ) ; if ( ! Gdx . graphics . isContinuousRendering ( ) ) { Gdx . graphics . requestRendering ( ) ; } } } public void onPause ( ) { visibleEngines - - ; if ( DEBUG ) Log . d ( TAG , <str> + hashCode ( ) + <str> + engines + <str> + ( linkedEngine = = this ) + <str> + visibleEngines ) ; Log . i ( TAG , <str> ) ; if ( visibleEngines > = engines ) { Log . e ( AndroidLiveWallpaperService . TAG , <str> ) ; visibleEngines = Math . max ( engines - <int> , <int> ) ; } if ( linkedEngine ! = null ) { if ( visibleEngines = = <int> ) app . onPause ( ) ; } if ( DEBUG ) Log . d ( TAG , <str> ) ; } @Override public void onSurfaceDestroyed ( final SurfaceHolder holder ) { engines - - ; if ( DEBUG ) Log . d ( TAG , <str> + hashCode ( ) + <str> + engines + <str> + ( linkedEngine = = this ) + <str> + engineIsVisible ) ; Log . i ( TAG , <str> ) ; if ( engines = = <int> ) onDeepPauseApplication ( ) ; if ( linkedEngine = = this & & view ! = null ) view . surfaceDestroyed ( holder ) ; engineFormat = <int> ; engineWidth = <int> ; engineHeight = <int> ; if ( engines = = <int> ) linkedEngine = null ; super . onSurfaceDestroyed ( holder ) ; } @Override public void onDestroy ( ) { super . onDestroy ( ) ; } @Override public Bundle onCommand ( final String pAction , final int pX , final int pY , final int pZ , final Bundle pExtras , final boolean pResultRequested ) { if ( DEBUG ) Log . d ( TAG , <str> + pAction + <str> + pX + <str> + pY + <str> + pZ + <str> + pExtras + <str> + pResultRequested + <str> + <str> + ( linkedEngine = = this ) ) ; return super . onCommand ( pAction , pX , pY , pZ , pExtras , pResultRequested ) ; } @Override public void onTouchEvent ( MotionEvent event ) { if ( linkedEngine = = this ) { app . input . onTouch ( null , event ) ; } } boolean offsetsConsumed = true ; float xOffset = <float> ; float yOffset = <float> ; float xOffsetStep = <float> ; float yOffsetStep = <float> ; int xPixelOffset = <int> ; int yPixelOffset = <int> ; @Override public void onOffsetsChanged ( final float xOffset , final float yOffset , final float xOffsetStep , final float yOffsetStep , final int xPixelOffset , final int yPixelOffset ) { this . offsetsConsumed = false ; this . xOffset = xOffset ; this . yOffset = yOffset ; this . xOffsetStep = xOffsetStep ; this . yOffsetStep = yOffsetStep ; this . xPixelOffset = xPixelOffset ; this . yPixelOffset = yPixelOffset ; notifyOffsetsChanged ( ) ; if ( ! Gdx . graphics . isContinuousRendering ( ) ) { Gdx . graphics . requestRendering ( ) ; } super . onOffsetsChanged ( xOffset , yOffset , xOffsetStep , yOffsetStep , xPixelOffset , yPixelOffset ) ; } protected void notifyOffsetsChanged ( ) { if ( linkedEngine = = this & & app . listener instanceof AndroidWallpaperListener ) { if ( ! offsetsConsumed ) { offsetsConsumed = true ; app . postRunnable ( new Runnable ( ) { @Override public void run ( ) { boolean isCurrent = false ; synchronized ( sync ) { isCurrent = ( linkedEngine = = AndroidWallpaperEngine . this ) ; } if ( isCurrent ) ( ( AndroidWallpaperListener ) app . listener ) . offsetChange ( xOffset , yOffset , xOffsetStep , yOffsetStep , xPixelOffset , yPixelOffset ) ; } } ) ; } } } protected void notifyPreviewState ( ) { if ( linkedEngine = = this & & app . listener instanceof AndroidWallpaperListener ) { final boolean currentPreviewState = linkedEngine . isPreview ( ) ; app . postRunnable ( new Runnable ( ) { @Override public void run ( ) { boolean shouldNotify = false ; synchronized ( sync ) { if ( ! isPreviewNotified | | notifiedPreviewState ! = currentPreviewState ) { notifiedPreviewState = currentPreviewState ; isPreviewNotified = true ; shouldNotify = true ; } } if ( shouldNotify ) { AndroidLiveWallpaper currentApp = app ; if ( currentApp ! = null ) ( ( AndroidWallpaperListener ) currentApp . listener ) . previewStateChange ( currentPreviewState ) ; } } } ) ; } } } } 

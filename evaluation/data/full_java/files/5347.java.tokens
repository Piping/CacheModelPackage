package org . elasticsearch . action . percolate ; import org . elasticsearch . ElasticsearchGenerationException ; import org . elasticsearch . action . support . ToXContentToBytes ; import org . elasticsearch . client . Requests ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . search . aggregations . AbstractAggregationBuilder ; import org . elasticsearch . search . highlight . HighlightBuilder ; import org . elasticsearch . search . sort . ScoreSortBuilder ; import org . elasticsearch . search . sort . SortBuilder ; import java . io . IOException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class PercolateSourceBuilder extends ToXContentToBytes { private DocBuilder docBuilder ; private QueryBuilder queryBuilder ; private Integer size ; private List < SortBuilder > sorts ; private Boolean trackScores ; private HighlightBuilder highlightBuilder ; private List < AbstractAggregationBuilder > aggregations ; public PercolateSourceBuilder setDoc ( DocBuilder docBuilder ) { this . docBuilder = docBuilder ; return this ; } public PercolateSourceBuilder setQueryBuilder ( QueryBuilder queryBuilder ) { this . queryBuilder = queryBuilder ; return this ; } public PercolateSourceBuilder setSize ( int size ) { this . size = size ; return this ; } public PercolateSourceBuilder setSort ( boolean sort ) { if ( sort ) { addSort ( new ScoreSortBuilder ( ) ) ; } else { this . sorts = null ; } return this ; } public PercolateSourceBuilder addSort ( SortBuilder sort ) { if ( sorts = = null ) { sorts = new ArrayList < > ( ) ; } sorts . add ( sort ) ; return this ; } public PercolateSourceBuilder setTrackScores ( boolean trackScores ) { this . trackScores = trackScores ; return this ; } public PercolateSourceBuilder setHighlightBuilder ( HighlightBuilder highlightBuilder ) { this . highlightBuilder = highlightBuilder ; return this ; } public PercolateSourceBuilder addAggregation ( AbstractAggregationBuilder aggregationBuilder ) { if ( aggregations = = null ) { aggregations = new ArrayList < > ( ) ; } aggregations . add ( aggregationBuilder ) ; return this ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; if ( docBuilder ! = null ) { docBuilder . toXContent ( builder , params ) ; } if ( queryBuilder ! = null ) { builder . field ( <str> ) ; queryBuilder . toXContent ( builder , params ) ; } if ( size ! = null ) { builder . field ( <str> , size ) ; } if ( sorts ! = null ) { builder . startArray ( <str> ) ; for ( SortBuilder sort : sorts ) { builder . startObject ( ) ; sort . toXContent ( builder , params ) ; builder . endObject ( ) ; } builder . endArray ( ) ; } if ( trackScores ! = null ) { builder . field ( <str> , trackScores ) ; } if ( highlightBuilder ! = null ) { highlightBuilder . toXContent ( builder , params ) ; } if ( aggregations ! = null ) { builder . field ( <str> ) ; builder . startObject ( ) ; for ( AbstractAggregationBuilder aggregation : aggregations ) { aggregation . toXContent ( builder , params ) ; } builder . endObject ( ) ; } builder . endObject ( ) ; return builder ; } public static DocBuilder docBuilder ( ) { return new DocBuilder ( ) ; } public static class DocBuilder implements ToXContent { private BytesReference doc ; public DocBuilder setDoc ( BytesReference doc ) { this . doc = doc ; return this ; } public DocBuilder setDoc ( String field , Object value ) { Map < String , Object > values = new HashMap < > ( <int> ) ; values . put ( field , value ) ; setDoc ( values ) ; return this ; } public DocBuilder setDoc ( String doc ) { this . doc = new BytesArray ( doc ) ; return this ; } public DocBuilder setDoc ( XContentBuilder doc ) { this . doc = doc . bytes ( ) ; return this ; } public DocBuilder setDoc ( Map doc ) { return setDoc ( doc , Requests . CONTENT_TYPE ) ; } @SuppressWarnings ( <str> ) public DocBuilder setDoc ( Map doc , XContentType contentType ) { try { return setDoc ( XContentFactory . contentBuilder ( contentType ) . map ( doc ) ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + doc + <str> , e ) ; } } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { return builder . rawField ( <str> , doc ) ; } } } 

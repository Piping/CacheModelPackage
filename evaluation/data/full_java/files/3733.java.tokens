package org . eclipse . debug . examples . core . midi . launcher ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . examples . core . pda . DebugCorePlugin ; public class TempoControl extends SequencerControl { public TempoControl ( MidiLaunch launch ) { super ( <str> , launch ) ; } @Override public String getValue ( ) { float bpm = getSequencer ( ) . getTempoInBPM ( ) ; return Float . toString ( bpm ) ; } @Override public boolean isEditable ( ) { return getSequencer ( ) . isOpen ( ) ; } @Override public IStatus setValue ( String newValue ) { try { float value = getFloat ( newValue ) ; getSequencer ( ) . setTempoInBPM ( value ) ; fireEvent ( new DebugEvent ( this , DebugEvent . CHANGE ) ) ; return Status . OK_STATUS ; } catch ( CoreException e ) { return e . getStatus ( ) ; } } @Override public IStatus validateValue ( String value ) { try { getFloat ( value ) ; return Status . OK_STATUS ; } catch ( CoreException e ) { return e . getStatus ( ) ; } } protected float getFloat ( String value ) throws CoreException { try { return Float . parseFloat ( value ) ; } catch ( NumberFormatException e ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugCorePlugin . PLUGIN_ID , <str> , e ) ) ; } } } 

package org . elasticsearch . cluster . settings ; import org . elasticsearch . action . admin . cluster . settings . ClusterUpdateSettingsRequestBuilder ; import org . elasticsearch . action . admin . cluster . settings . ClusterUpdateSettingsResponse ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . routing . allocation . decider . EnableAllocationDecider ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeUnit ; import org . elasticsearch . common . util . concurrent . EsExecutors ; import org . elasticsearch . discovery . DiscoverySettings ; import org . elasticsearch . index . store . IndexStoreConfig ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . hamcrest . Matchers ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . ESIntegTestCase . Scope . TEST ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; @ClusterScope ( scope = TEST ) public class ClusterSettingsIT extends ESIntegTestCase { public void testClusterNonExistingSettingsUpdate ( ) { String key1 = <str> ; int value1 = <int> ; ClusterUpdateSettingsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( Settings . builder ( ) . put ( key1 , value1 ) . build ( ) ) . get ( ) ; assertAcked ( response ) ; assertThat ( response . getTransientSettings ( ) . getAsMap ( ) . entrySet ( ) , Matchers . emptyIterable ( ) ) ; } public void testClusterSettingsUpdateResponse ( ) { String key1 = IndexStoreConfig . INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC ; int value1 = <int> ; String key2 = EnableAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ENABLE ; boolean value2 = false ; Settings transientSettings1 = Settings . builder ( ) . put ( key1 , value1 , ByteSizeUnit . BYTES ) . build ( ) ; Settings persistentSettings1 = Settings . builder ( ) . put ( key2 , value2 ) . build ( ) ; ClusterUpdateSettingsResponse response1 = client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( transientSettings1 ) . setPersistentSettings ( persistentSettings1 ) . execute ( ) . actionGet ( ) ; assertAcked ( response1 ) ; assertThat ( response1 . getTransientSettings ( ) . get ( key1 ) , notNullValue ( ) ) ; assertThat ( response1 . getTransientSettings ( ) . get ( key2 ) , nullValue ( ) ) ; assertThat ( response1 . getPersistentSettings ( ) . get ( key1 ) , nullValue ( ) ) ; assertThat ( response1 . getPersistentSettings ( ) . get ( key2 ) , notNullValue ( ) ) ; Settings transientSettings2 = Settings . builder ( ) . put ( key1 , value1 , ByteSizeUnit . BYTES ) . put ( key2 , value2 ) . build ( ) ; Settings persistentSettings2 = Settings . EMPTY ; ClusterUpdateSettingsResponse response2 = client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( transientSettings2 ) . setPersistentSettings ( persistentSettings2 ) . execute ( ) . actionGet ( ) ; assertAcked ( response2 ) ; assertThat ( response2 . getTransientSettings ( ) . get ( key1 ) , notNullValue ( ) ) ; assertThat ( response2 . getTransientSettings ( ) . get ( key2 ) , notNullValue ( ) ) ; assertThat ( response2 . getPersistentSettings ( ) . get ( key1 ) , nullValue ( ) ) ; assertThat ( response2 . getPersistentSettings ( ) . get ( key2 ) , nullValue ( ) ) ; Settings transientSettings3 = Settings . EMPTY ; Settings persistentSettings3 = Settings . builder ( ) . put ( key1 , value1 , ByteSizeUnit . BYTES ) . put ( key2 , value2 ) . build ( ) ; ClusterUpdateSettingsResponse response3 = client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( transientSettings3 ) . setPersistentSettings ( persistentSettings3 ) . execute ( ) . actionGet ( ) ; assertAcked ( response3 ) ; assertThat ( response3 . getTransientSettings ( ) . get ( key1 ) , nullValue ( ) ) ; assertThat ( response3 . getTransientSettings ( ) . get ( key2 ) , nullValue ( ) ) ; assertThat ( response3 . getPersistentSettings ( ) . get ( key1 ) , notNullValue ( ) ) ; assertThat ( response3 . getPersistentSettings ( ) . get ( key2 ) , notNullValue ( ) ) ; } public void testUpdateDiscoveryPublishTimeout ( ) { DiscoverySettings discoverySettings = internalCluster ( ) . getInstance ( DiscoverySettings . class ) ; assertThat ( discoverySettings . getPublishTimeout ( ) , equalTo ( DiscoverySettings . DEFAULT_PUBLISH_TIMEOUT ) ) ; ClusterUpdateSettingsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( Settings . builder ( ) . put ( DiscoverySettings . PUBLISH_TIMEOUT , <str> ) . build ( ) ) . get ( ) ; assertAcked ( response ) ; assertThat ( response . getTransientSettings ( ) . getAsMap ( ) . get ( DiscoverySettings . PUBLISH_TIMEOUT ) , equalTo ( <str> ) ) ; assertThat ( discoverySettings . getPublishTimeout ( ) . seconds ( ) , equalTo ( <int> ) ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( Settings . builder ( ) . put ( DiscoverySettings . PUBLISH_TIMEOUT , <str> ) . build ( ) ) . get ( ) ; assertAcked ( response ) ; assertThat ( response . getTransientSettings ( ) . getAsMap ( ) . entrySet ( ) , Matchers . emptyIterable ( ) ) ; assertThat ( discoverySettings . getPublishTimeout ( ) . seconds ( ) , equalTo ( <int> ) ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( Settings . builder ( ) . put ( DiscoverySettings . PUBLISH_TIMEOUT , - <int> ) . build ( ) ) . get ( ) ; assertAcked ( response ) ; assertThat ( response . getTransientSettings ( ) . getAsMap ( ) . entrySet ( ) , Matchers . emptyIterable ( ) ) ; assertThat ( discoverySettings . getPublishTimeout ( ) . seconds ( ) , equalTo ( <int> ) ) ; } public void testClusterUpdateSettingsWithBlocks ( ) { String key1 = <str> ; Settings transientSettings = Settings . builder ( ) . put ( key1 , false ) . build ( ) ; String key2 = <str> ; Settings persistentSettings = Settings . builder ( ) . put ( key2 , <str> ) . build ( ) ; ClusterUpdateSettingsRequestBuilder request = client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( transientSettings ) . setPersistentSettings ( persistentSettings ) ; try { setClusterReadOnly ( true ) ; assertBlocked ( request , MetaData . CLUSTER_READ_ONLY_BLOCK ) ; Settings settings = settingsBuilder ( ) . put ( MetaData . SETTING_READ_ONLY , false ) . build ( ) ; assertAcked ( client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( settings ) . get ( ) ) ; } finally { setClusterReadOnly ( false ) ; } ClusterUpdateSettingsResponse response = request . execute ( ) . actionGet ( ) ; assertAcked ( response ) ; assertThat ( response . getTransientSettings ( ) . get ( key1 ) , notNullValue ( ) ) ; assertThat ( response . getTransientSettings ( ) . get ( key2 ) , nullValue ( ) ) ; assertThat ( response . getPersistentSettings ( ) . get ( key1 ) , nullValue ( ) ) ; assertThat ( response . getPersistentSettings ( ) . get ( key2 ) , notNullValue ( ) ) ; } public void testMissingUnits ( ) { assertAcked ( prepareCreate ( <str> ) ) ; try { client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testMissingUnitsLenient ( ) { try { createNode ( Settings . builder ( ) . put ( Settings . SETTINGS_REQUIRE_UNITS , <str> ) . build ( ) ) ; assertAcked ( prepareCreate ( <str> ) ) ; ensureGreen ( ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; } finally { assertFalse ( Settings . getSettingsRequireUnits ( ) ) ; Settings . setSettingsRequireUnits ( true ) ; } } private void createNode ( Settings settings ) { internalCluster ( ) . startNode ( Settings . builder ( ) . put ( ClusterName . SETTING , <str> ) . put ( <str> , <str> ) . put ( IndexMetaData . SETTING_NUMBER_OF_SHARDS , <int> ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . put ( EsExecutors . PROCESSORS , <int> ) . put ( <str> , false ) . put ( <str> , true ) . put ( settings ) ) ; } } 

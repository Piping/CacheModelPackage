package com . google . common . math ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import com . google . common . collect . ContiguousSet ; import com . google . common . collect . DiscreteDomain ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Range ; import java . util . Random ; public class QuantilesBenchmark { private static final ContiguousSet < Integer > ALL_DECILE_INDEXES = ContiguousSet . create ( Range . closed ( <int> , <int> ) , DiscreteDomain . integers ( ) ) ; @Param ( { <str> , <str> , <str> , <str> , <str> } ) int datasetSize ; @Param QuantilesAlgorithm algorithm ; private double [ ] [ ] datasets = new double [ <hex> ] [ ] ; @BeforeExperiment void setUp ( ) { Random rng = new Random ( ) ; for ( int i = <int> ; i < <hex> ; i + + ) { datasets [ i ] = new double [ datasetSize ] ; for ( int j = <int> ; j < datasetSize ; j + + ) { datasets [ i ] [ j ] = rng . nextDouble ( ) ; } } } private double [ ] dataset ( int i ) { return datasets [ i & <hex> ] . clone ( ) ; } @Benchmark double median ( int reps ) { double dummy = <float> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = algorithm . singleQuantile ( <int> , <int> , dataset ( i ) ) ; } return dummy ; } @Benchmark double percentile90 ( int reps ) { double dummy = <float> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = algorithm . singleQuantile ( <int> , <int> , dataset ( i ) ) ; } return dummy ; } @Benchmark double percentile99 ( int reps ) { double dummy = <float> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = algorithm . singleQuantile ( <int> , <int> , dataset ( i ) ) ; } return dummy ; } @Benchmark double percentiles90And99 ( int reps ) { double dummy = <float> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = algorithm . multipleQuantiles ( ImmutableSet . of ( <int> , <int> ) , <int> , dataset ( i ) ) . get ( <int> ) ; } return dummy ; } @Benchmark double threePercentiles ( int reps ) { double dummy = <float> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = algorithm . multipleQuantiles ( ImmutableSet . of ( <int> , <int> , <int> ) , <int> , dataset ( i ) ) . get ( <int> ) ; } return dummy ; } @Benchmark double allDeciles ( int reps ) { double dummy = <float> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = algorithm . multipleQuantiles ( ALL_DECILE_INDEXES , <int> , dataset ( i ) ) . get ( <int> ) ; } return dummy ; } } 

package org . elasticsearch . common . lucene . search ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . Collector ; import org . apache . lucene . search . FilterLeafCollector ; import org . apache . lucene . search . LeafCollector ; import org . apache . lucene . search . Scorer ; import org . apache . lucene . search . Weight ; import org . apache . lucene . util . Bits ; import org . elasticsearch . common . lucene . Lucene ; import java . io . IOException ; public class FilteredCollector implements Collector { private final Collector collector ; private final Weight filter ; public FilteredCollector ( Collector collector , Weight filter ) { this . collector = collector ; this . filter = filter ; } @Override public LeafCollector getLeafCollector ( LeafReaderContext context ) throws IOException { final Scorer filterScorer = filter . scorer ( context ) ; final LeafCollector in = collector . getLeafCollector ( context ) ; final Bits bits = Lucene . asSequentialAccessBits ( context . reader ( ) . maxDoc ( ) , filterScorer ) ; return new FilterLeafCollector ( in ) { @Override public void collect ( int doc ) throws IOException { if ( bits . get ( doc ) ) { in . collect ( doc ) ; } } } ; } @Override public boolean needsScores ( ) { return collector . needsScores ( ) ; } } 

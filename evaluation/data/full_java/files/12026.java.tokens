package org . gradle . initialization ; import org . gradle . api . Transformer ; import org . gradle . api . initialization . Settings ; import org . gradle . api . internal . file . BasicFileResolver ; import org . gradle . cli . AbstractCommandLineConverter ; import org . gradle . cli . CommandLineArgumentException ; import org . gradle . cli . CommandLineParser ; import org . gradle . cli . ParsedCommandLine ; import java . io . File ; public class LayoutCommandLineConverter extends AbstractCommandLineConverter < BuildLayoutParameters > { public static final String GRADLE_USER_HOME = <str> ; private static final String NO_SEARCH_UPWARDS = <str> ; private static final String PROJECT_DIR = <str> ; public BuildLayoutParameters convert ( ParsedCommandLine options , BuildLayoutParameters target ) throws CommandLineArgumentException { Transformer < File , String > resolver = new BasicFileResolver ( target . getCurrentDir ( ) ) ; if ( options . hasOption ( NO_SEARCH_UPWARDS ) ) { target . setSearchUpwards ( false ) ; } if ( options . hasOption ( PROJECT_DIR ) ) { target . setProjectDir ( resolver . transform ( options . option ( PROJECT_DIR ) . getValue ( ) ) ) ; } if ( options . hasOption ( GRADLE_USER_HOME ) ) { target . setGradleUserHomeDir ( resolver . transform ( options . option ( GRADLE_USER_HOME ) . getValue ( ) ) ) ; } return target ; } public void configure ( CommandLineParser parser ) { parser . option ( NO_SEARCH_UPWARDS , <str> ) . hasDescription ( String . format ( <str> , Settings . DEFAULT_SETTINGS_FILE ) ) ; parser . option ( PROJECT_DIR , <str> ) . hasArgument ( ) . hasDescription ( <str> ) ; parser . option ( GRADLE_USER_HOME , <str> ) . hasArgument ( ) . hasDescription ( <str> ) ; } } 

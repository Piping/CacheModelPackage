package org . elasticsearch . indices . flush ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . routing . IndexShardRoutingTable ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . common . Strings ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . engine . Engine ; import org . elasticsearch . index . shard . IndexShard ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . shard . ShardNotFoundException ; import org . elasticsearch . indices . IndicesService ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . util . List ; import java . util . Map ; public class SyncedFlushSingleNodeTests extends ESSingleNodeTestCase { public void testModificationPreventsFlushing ( ) throws InterruptedException { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; IndexService test = getInstanceFromNode ( IndicesService . class ) . indexService ( <str> ) ; IndexShard shard = test . getShardOrNull ( <int> ) ; SyncedFlushService flushService = getInstanceFromNode ( SyncedFlushService . class ) ; final ShardId shardId = shard . shardId ( ) ; final ClusterState state = getInstanceFromNode ( ClusterService . class ) . state ( ) ; final IndexShardRoutingTable shardRoutingTable = flushService . getShardRoutingTable ( shardId , state ) ; final List < ShardRouting > activeShards = shardRoutingTable . activeShards ( ) ; assertEquals ( <str> , <int> , activeShards . size ( ) ) ; Map < String , Engine . CommitId > commitIds = SyncedFlushUtil . sendPreSyncRequests ( flushService , activeShards , state , shardId ) ; assertEquals ( <str> , <int> , commitIds . size ( ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; String syncId = Strings . base64UUID ( ) ; SyncedFlushUtil . LatchedListener < ShardsSyncedFlushResult > listener = new SyncedFlushUtil . LatchedListener < > ( ) ; flushService . sendSyncRequests ( syncId , activeShards , state , commitIds , shardId , shardRoutingTable . size ( ) , listener ) ; listener . latch . await ( ) ; assertNull ( listener . error ) ; ShardsSyncedFlushResult syncedFlushResult = listener . result ; assertNotNull ( syncedFlushResult ) ; assertEquals ( <int> , syncedFlushResult . successfulShards ( ) ) ; assertEquals ( <int> , syncedFlushResult . totalShards ( ) ) ; assertEquals ( syncId , syncedFlushResult . syncId ( ) ) ; assertNotNull ( syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) ) ; assertFalse ( syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) . success ( ) ) ; assertEquals ( <str> , syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) . failureReason ( ) ) ; SyncedFlushUtil . sendPreSyncRequests ( flushService , activeShards , state , shardId ) ; listener = new SyncedFlushUtil . LatchedListener ( ) ; flushService . sendSyncRequests ( syncId , activeShards , state , commitIds , shardId , shardRoutingTable . size ( ) , listener ) ; listener . latch . await ( ) ; assertNull ( listener . error ) ; syncedFlushResult = listener . result ; assertNotNull ( syncedFlushResult ) ; assertEquals ( <int> , syncedFlushResult . successfulShards ( ) ) ; assertEquals ( <int> , syncedFlushResult . totalShards ( ) ) ; assertEquals ( syncId , syncedFlushResult . syncId ( ) ) ; assertNotNull ( syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) ) ; assertFalse ( syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) . success ( ) ) ; assertEquals ( <str> , syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) . failureReason ( ) ) ; } public void testSingleShardSuccess ( ) throws InterruptedException { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; IndexService test = getInstanceFromNode ( IndicesService . class ) . indexService ( <str> ) ; IndexShard shard = test . getShardOrNull ( <int> ) ; SyncedFlushService flushService = getInstanceFromNode ( SyncedFlushService . class ) ; final ShardId shardId = shard . shardId ( ) ; SyncedFlushUtil . LatchedListener < ShardsSyncedFlushResult > listener = new SyncedFlushUtil . LatchedListener ( ) ; flushService . attemptSyncedFlush ( shardId , listener ) ; listener . latch . await ( ) ; assertNull ( listener . error ) ; ShardsSyncedFlushResult syncedFlushResult = listener . result ; assertNotNull ( syncedFlushResult ) ; assertEquals ( <int> , syncedFlushResult . successfulShards ( ) ) ; assertEquals ( <int> , syncedFlushResult . totalShards ( ) ) ; SyncedFlushService . SyncedFlushResponse response = syncedFlushResult . shardResponses ( ) . values ( ) . iterator ( ) . next ( ) ; assertTrue ( response . success ( ) ) ; } public void testSyncFailsIfOperationIsInFlight ( ) throws InterruptedException { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; IndexService test = getInstanceFromNode ( IndicesService . class ) . indexService ( <str> ) ; IndexShard shard = test . getShardOrNull ( <int> ) ; SyncedFlushService flushService = getInstanceFromNode ( SyncedFlushService . class ) ; final ShardId shardId = shard . shardId ( ) ; shard . incrementOperationCounter ( ) ; try { SyncedFlushUtil . LatchedListener < ShardsSyncedFlushResult > listener = new SyncedFlushUtil . LatchedListener < > ( ) ; flushService . attemptSyncedFlush ( shardId , listener ) ; listener . latch . await ( ) ; assertNull ( listener . error ) ; ShardsSyncedFlushResult syncedFlushResult = listener . result ; assertNotNull ( syncedFlushResult ) ; assertEquals ( <int> , syncedFlushResult . successfulShards ( ) ) ; assertNotEquals ( <int> , syncedFlushResult . totalShards ( ) ) ; assertEquals ( <str> , syncedFlushResult . failureReason ( ) ) ; } finally { shard . decrementOperationCounter ( ) ; } } public void testSyncFailsOnIndexClosedOrMissing ( ) throws InterruptedException { createIndex ( <str> ) ; IndexService test = getInstanceFromNode ( IndicesService . class ) . indexService ( <str> ) ; IndexShard shard = test . getShardOrNull ( <int> ) ; SyncedFlushService flushService = getInstanceFromNode ( SyncedFlushService . class ) ; SyncedFlushUtil . LatchedListener listener = new SyncedFlushUtil . LatchedListener ( ) ; flushService . attemptSyncedFlush ( new ShardId ( <str> , <int> ) , listener ) ; listener . latch . await ( ) ; assertNotNull ( listener . error ) ; assertNull ( listener . result ) ; assertEquals ( ShardNotFoundException . class , listener . error . getClass ( ) ) ; assertEquals ( <str> , listener . error . getMessage ( ) ) ; final ShardId shardId = shard . shardId ( ) ; client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . get ( ) ; listener = new SyncedFlushUtil . LatchedListener ( ) ; flushService . attemptSyncedFlush ( shardId , listener ) ; listener . latch . await ( ) ; assertNotNull ( listener . error ) ; assertNull ( listener . result ) ; assertEquals ( <str> , listener . error . getMessage ( ) ) ; listener = new SyncedFlushUtil . LatchedListener ( ) ; flushService . attemptSyncedFlush ( new ShardId ( <str> , <int> ) , listener ) ; listener . latch . await ( ) ; assertNotNull ( listener . error ) ; assertNull ( listener . result ) ; assertEquals ( <str> , listener . error . getMessage ( ) ) ; } public void testFailAfterIntermediateCommit ( ) throws InterruptedException { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; IndexService test = getInstanceFromNode ( IndicesService . class ) . indexService ( <str> ) ; IndexShard shard = test . getShardOrNull ( <int> ) ; SyncedFlushService flushService = getInstanceFromNode ( SyncedFlushService . class ) ; final ShardId shardId = shard . shardId ( ) ; final ClusterState state = getInstanceFromNode ( ClusterService . class ) . state ( ) ; final IndexShardRoutingTable shardRoutingTable = flushService . getShardRoutingTable ( shardId , state ) ; final List < ShardRouting > activeShards = shardRoutingTable . activeShards ( ) ; assertEquals ( <str> , <int> , activeShards . size ( ) ) ; Map < String , Engine . CommitId > commitIds = SyncedFlushUtil . sendPreSyncRequests ( flushService , activeShards , state , shardId ) ; assertEquals ( <str> , <int> , commitIds . size ( ) ) ; if ( randomBoolean ( ) ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; } client ( ) . admin ( ) . indices ( ) . prepareFlush ( <str> ) . setForce ( true ) . get ( ) ; String syncId = Strings . base64UUID ( ) ; final SyncedFlushUtil . LatchedListener < ShardsSyncedFlushResult > listener = new SyncedFlushUtil . LatchedListener ( ) ; flushService . sendSyncRequests ( syncId , activeShards , state , commitIds , shardId , shardRoutingTable . size ( ) , listener ) ; listener . latch . await ( ) ; assertNull ( listener . error ) ; ShardsSyncedFlushResult syncedFlushResult = listener . result ; assertNotNull ( syncedFlushResult ) ; assertEquals ( <int> , syncedFlushResult . successfulShards ( ) ) ; assertEquals ( <int> , syncedFlushResult . totalShards ( ) ) ; assertEquals ( syncId , syncedFlushResult . syncId ( ) ) ; assertNotNull ( syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) ) ; assertFalse ( syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) . success ( ) ) ; assertEquals ( <str> , syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) . failureReason ( ) ) ; } public void testFailWhenCommitIsMissing ( ) throws InterruptedException { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> ) . get ( ) ; IndexService test = getInstanceFromNode ( IndicesService . class ) . indexService ( <str> ) ; IndexShard shard = test . getShardOrNull ( <int> ) ; SyncedFlushService flushService = getInstanceFromNode ( SyncedFlushService . class ) ; final ShardId shardId = shard . shardId ( ) ; final ClusterState state = getInstanceFromNode ( ClusterService . class ) . state ( ) ; final IndexShardRoutingTable shardRoutingTable = flushService . getShardRoutingTable ( shardId , state ) ; final List < ShardRouting > activeShards = shardRoutingTable . activeShards ( ) ; assertEquals ( <str> , <int> , activeShards . size ( ) ) ; Map < String , Engine . CommitId > commitIds = SyncedFlushUtil . sendPreSyncRequests ( flushService , activeShards , state , shardId ) ; assertEquals ( <str> , <int> , commitIds . size ( ) ) ; commitIds . clear ( ) ; String syncId = Strings . base64UUID ( ) ; SyncedFlushUtil . LatchedListener < ShardsSyncedFlushResult > listener = new SyncedFlushUtil . LatchedListener ( ) ; flushService . sendSyncRequests ( syncId , activeShards , state , commitIds , shardId , shardRoutingTable . size ( ) , listener ) ; listener . latch . await ( ) ; assertNull ( listener . error ) ; ShardsSyncedFlushResult syncedFlushResult = listener . result ; assertNotNull ( syncedFlushResult ) ; assertEquals ( <int> , syncedFlushResult . successfulShards ( ) ) ; assertEquals ( <int> , syncedFlushResult . totalShards ( ) ) ; assertEquals ( syncId , syncedFlushResult . syncId ( ) ) ; assertNotNull ( syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) ) ; assertFalse ( syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) . success ( ) ) ; assertEquals ( <str> , syncedFlushResult . shardResponses ( ) . get ( activeShards . get ( <int> ) ) . failureReason ( ) ) ; } } 

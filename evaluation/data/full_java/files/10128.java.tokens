package com . google . common . testing ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Equivalence ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Lists ; import junit . framework . AssertionFailedError ; import java . util . List ; @GwtCompatible final class RelationshipTester < T > { static class ItemReporter { String reportItem ( Item < ? > item ) { return item . toString ( ) ; } } private final Equivalence < ? super T > equivalence ; private final String relationshipName ; private final String hashName ; private final ItemReporter itemReporter ; private final List < ImmutableList < T > > groups = Lists . newArrayList ( ) ; RelationshipTester ( Equivalence < ? super T > equivalence , String relationshipName , String hashName , ItemReporter itemReporter ) { this . equivalence = checkNotNull ( equivalence ) ; this . relationshipName = checkNotNull ( relationshipName ) ; this . hashName = checkNotNull ( hashName ) ; this . itemReporter = checkNotNull ( itemReporter ) ; } public RelationshipTester < T > addRelatedGroup ( Iterable < ? extends T > group ) { groups . add ( ImmutableList . copyOf ( group ) ) ; return this ; } public void test ( ) { for ( int groupNumber = <int> ; groupNumber < groups . size ( ) ; groupNumber + + ) { ImmutableList < T > group = groups . get ( groupNumber ) ; for ( int itemNumber = <int> ; itemNumber < group . size ( ) ; itemNumber + + ) { for ( int relatedItemNumber = <int> ; relatedItemNumber < group . size ( ) ; relatedItemNumber + + ) { if ( itemNumber ! = relatedItemNumber ) { assertRelated ( groupNumber , itemNumber , relatedItemNumber ) ; } } for ( int unrelatedGroupNumber = <int> ; unrelatedGroupNumber < groups . size ( ) ; unrelatedGroupNumber + + ) { if ( groupNumber ! = unrelatedGroupNumber ) { ImmutableList < T > unrelatedGroup = groups . get ( unrelatedGroupNumber ) ; for ( int unrelatedItemNumber = <int> ; unrelatedItemNumber < unrelatedGroup . size ( ) ; unrelatedItemNumber + + ) { assertUnrelated ( groupNumber , itemNumber , unrelatedGroupNumber , unrelatedItemNumber ) ; } } } } } } private void assertRelated ( int groupNumber , int itemNumber , int relatedItemNumber ) { Item < T > itemInfo = getItem ( groupNumber , itemNumber ) ; Item < T > relatedInfo = getItem ( groupNumber , relatedItemNumber ) ; T item = itemInfo . value ; T related = relatedInfo . value ; assertWithTemplate ( <str> , itemInfo , relatedInfo , equivalence . equivalent ( item , related ) ) ; int itemHash = equivalence . hash ( item ) ; int relatedHash = equivalence . hash ( related ) ; assertWithTemplate ( <str> + itemHash + <str> + relatedHash + <str> , itemInfo , relatedInfo , itemHash = = relatedHash ) ; } private void assertUnrelated ( int groupNumber , int itemNumber , int unrelatedGroupNumber , int unrelatedItemNumber ) { Item < T > itemInfo = getItem ( groupNumber , itemNumber ) ; Item < T > unrelatedInfo = getItem ( unrelatedGroupNumber , unrelatedItemNumber ) ; assertWithTemplate ( <str> , itemInfo , unrelatedInfo , ! equivalence . equivalent ( itemInfo . value , unrelatedInfo . value ) ) ; } private void assertWithTemplate ( String template , Item < T > item , Item < T > other , boolean condition ) { if ( ! condition ) { throw new AssertionFailedError ( template . replace ( <str> , relationshipName ) . replace ( <str> , hashName ) . replace ( <str> , itemReporter . reportItem ( item ) ) . replace ( <str> , itemReporter . reportItem ( other ) ) ) ; } } private Item < T > getItem ( int groupNumber , int itemNumber ) { return new Item < T > ( groups . get ( groupNumber ) . get ( itemNumber ) , groupNumber , itemNumber ) ; } static final class Item < T > { final T value ; final int groupNumber ; final int itemNumber ; Item ( T value , int groupNumber , int itemNumber ) { this . value = value ; this . groupNumber = groupNumber ; this . itemNumber = itemNumber ; } @Override public String toString ( ) { return new StringBuilder ( ) . append ( value ) . append ( <str> ) . append ( groupNumber + <int> ) . append ( <str> ) . append ( itemNumber + <int> ) . append ( <str> ) . toString ( ) ; } } } 

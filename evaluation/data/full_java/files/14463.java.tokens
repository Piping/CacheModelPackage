package org . gradle . model . internal . core ; import org . gradle . model . internal . type . ModelType ; import org . junit . Test ; import java . util . List ; import java . util . Map ; import static org . junit . Assert . assertEquals ; public class ModelTypeJavaTest { class Nested < T > { class Child < S extends Number & Runnable > { } } @Test public void testNestedParameterizedType ( ) { ModelType < ? > type = new ModelType < Nested < ? super Long > . Child < ? extends Runnable > > ( ) { } ; assertEquals ( type . getDisplayName ( ) , <str> ) ; assertEquals ( type . toString ( ) , <str> ) ; ModelType < ? > listType = new ModelType < List < ? extends Nested < Number > . Child < ? extends Runnable > > > ( ) { } ; assertEquals ( listType . getDisplayName ( ) , <str> ) ; assertEquals ( listType . toString ( ) , <str> ) ; } @Test public void testBuildType ( ) throws Exception { assertEquals ( new ModelType < Map < String , Integer > > ( ) { } , buildMap ( ModelType . of ( String . class ) , ModelType . of ( Integer . class ) ) ) ; } static < K , V > ModelType < Map < K , V > > buildMap ( ModelType < K > k , ModelType < V > v ) { return new ModelType . Builder < Map < K , V > > ( ) { } . where ( new ModelType . Parameter < K > ( ) { } , k ) . where ( new ModelType . Parameter < V > ( ) { } , v ) . build ( ) ; } } 

package com . google . common . util . concurrent ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import java . lang . reflect . Constructor ; import java . util . concurrent . BlockingQueue ; public class MonitorBenchmark { @Param ( { <str> , <str> , <str> } ) int capacity ; @Param ( { <str> , <str> } ) String queueType ; @Param boolean useMonitor ; private BlockingQueue < String > queue ; private String [ ] strings ; @BeforeExperiment @SuppressWarnings ( <str> ) void setUp ( ) throws Exception { String prefix = ( useMonitor ? <str> : <str> ) ; String className = prefix + queueType + <str> ; Constructor < ? > constructor = Class . forName ( className ) . getConstructor ( int . class ) ; queue = ( BlockingQueue < String > ) constructor . newInstance ( capacity ) ; strings = new String [ capacity ] ; for ( int i = <int> ; i < capacity ; i + + ) { strings [ i ] = String . valueOf ( Math . random ( ) ) ; } } @Benchmark void addsAndRemoves ( int reps ) { int capacity = this . capacity ; BlockingQueue < String > queue = this . queue ; String [ ] strings = this . strings ; for ( int i = <int> ; i < reps ; i + + ) { for ( int j = <int> ; j < capacity ; j + + ) { queue . add ( strings [ j ] ) ; } for ( int j = <int> ; j < capacity ; j + + ) { queue . remove ( ) ; } } } } 

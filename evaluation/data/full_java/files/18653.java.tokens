package com . badlogic . gdx . tests . extensions ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . OrthographicCamera ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGenerator ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGenerator . FreeTypeBitmapFontData ; import com . badlogic . gdx . graphics . g2d . freetype . FreeTypeFontGenerator . FreeTypeFontParameter ; import com . badlogic . gdx . tests . utils . GdxTest ; public class FreeTypeTest extends GdxTest { BitmapFont font ; SpriteBatch batch ; BitmapFont ftFont ; @Override public void create ( ) { boolean flip = false ; batch = new SpriteBatch ( ) ; if ( flip ) { OrthographicCamera cam = new OrthographicCamera ( ) ; cam . setToOrtho ( flip ) ; cam . update ( ) ; batch . setProjectionMatrix ( cam . combined ) ; } font = new BitmapFont ( Gdx . files . internal ( <str> ) , flip ) ; FileHandle fontFile = Gdx . files . internal ( <str> ) ; FreeTypeFontGenerator generator = new FreeTypeFontGenerator ( fontFile ) ; FreeTypeFontParameter parameter = new FreeTypeFontParameter ( ) ; parameter . size = <int> ; parameter . flip = flip ; parameter . genMipMaps = true ; FreeTypeBitmapFontData fontData = generator . generateData ( parameter ) ; ftFont = generator . generateFont ( parameter ) ; generator . dispose ( ) ; } @Override public void render ( ) { Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; font . setColor ( Color . RED ) ; font . draw ( batch , <str> , <int> , <int> ) ; ftFont . draw ( batch , <str> , <int> , <int> ) ; batch . draw ( ftFont . getRegion ( ) , <int> , <int> ) ; batch . end ( ) ; } } 

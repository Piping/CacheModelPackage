package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . ApplicationListener ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . InputMultiplexer ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . VertexAttributes . Usage ; import com . badlogic . gdx . graphics . g3d . Environment ; import com . badlogic . gdx . graphics . g3d . Material ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . attributes . ColorAttribute ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . graphics . g3d . utils . CameraInputController ; import com . badlogic . gdx . graphics . g3d . utils . ModelBuilder ; import com . badlogic . gdx . tests . utils . GdxTest ; public class FogTest extends GdxTest implements ApplicationListener { public PerspectiveCamera cam ; public CameraInputController inputController ; public ModelBatch modelBatch ; public Model model ; public ModelInstance instance ; public Environment environment ; @Override public void create ( ) { modelBatch = new ModelBatch ( ) ; environment = new Environment ( ) ; environment . set ( new ColorAttribute ( ColorAttribute . AmbientLight , <float> , <float> , <float> , <float> ) ) ; environment . set ( new ColorAttribute ( ColorAttribute . Fog , <float> , <float> , <float> , <float> ) ) ; environment . add ( new DirectionalLight ( ) . set ( <float> , <float> , <float> , - <float> , - <float> , - <float> ) ) ; cam = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; cam . position . set ( <int> f , <int> f , <int> f ) ; cam . lookAt ( <int> , <int> , <int> ) ; cam . near = <float> ; cam . far = <int> f ; cam . update ( ) ; ModelBuilder modelBuilder = new ModelBuilder ( ) ; model = modelBuilder . createBox ( <float> , <float> , <float> , new Material ( ColorAttribute . createDiffuse ( Color . GREEN ) ) , Usage . Position | Usage . Normal ) ; instance = new ModelInstance ( model ) ; Gdx . input . setInputProcessor ( new InputMultiplexer ( this , inputController = new CameraInputController ( cam ) ) ) ; } @Override public void render ( ) { animate ( ) ; inputController . update ( ) ; Gdx . gl . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; Gdx . gl . glClearColor ( <float> , <float> , <float> , <int> ) ; modelBatch . begin ( cam ) ; modelBatch . render ( instance , environment ) ; modelBatch . end ( ) ; } float delta = <float> , dir = <int> ; private void animate ( ) { delta = Gdx . graphics . getDeltaTime ( ) ; instance . transform . val [ <int> ] + = delta * <int> * dir ; if ( Math . abs ( instance . transform . val [ <int> ] ) > <int> ) { dir * = - <int> ; } } @Override public void dispose ( ) { modelBatch . dispose ( ) ; model . dispose ( ) ; } public boolean needsGL20 ( ) { return true ; } public void resume ( ) { } public void resize ( int width , int height ) { } public void pause ( ) { } } 

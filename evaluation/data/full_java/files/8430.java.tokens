package org . elasticsearch . search ; import org . apache . lucene . util . English ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . test . ESIntegTestCase . Scope . SUITE ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; @ClusterScope ( scope = SUITE ) public class StressSearchServiceReaperIT extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { return Settings . builder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( SearchService . KEEPALIVE_INTERVAL_KEY , TimeValue . timeValueMillis ( <int> ) ) . build ( ) ; } public void testStressReaper ( ) throws ExecutionException , InterruptedException { int num = randomIntBetween ( <int> , <int> ) ; IndexRequestBuilder [ ] builders = new IndexRequestBuilder [ num ] ; for ( int i = <int> ; i < builders . length ; i + + ) { builders [ i ] = client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( <str> , English . intToEnglish ( i ) ) ; } createIndex ( <str> ) ; indexRandom ( true , builders ) ; ensureYellow ( ) ; final int iterations = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iterations ; i + + ) { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( matchAllQuery ( ) ) . setSize ( num ) . get ( ) ; assertNoFailures ( searchResponse ) ; assertHitCount ( searchResponse , num ) ; } } } 

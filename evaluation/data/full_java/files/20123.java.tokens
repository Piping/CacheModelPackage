package io . netty . testsuite . transport ; import io . netty . bootstrap . AbstractBootstrap ; import io . netty . buffer . ByteBufAllocator ; import io . netty . testsuite . util . TestUtils ; import io . netty . util . internal . StringUtil ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; import org . junit . Rule ; import org . junit . rules . TestName ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . List ; public abstract class AbstractComboTestsuiteTest < SB extends AbstractBootstrap < ? , ? > , CB extends AbstractBootstrap < ? , ? > > { private final Class < SB > sbClazz ; private final Class < CB > cbClazz ; protected final InternalLogger logger = InternalLoggerFactory . getInstance ( getClass ( ) ) ; protected volatile CB cb ; protected volatile SB sb ; protected AbstractComboTestsuiteTest ( Class < SB > sbClazz , Class < CB > cbClazz ) { this . sbClazz = sbClazz ; this . cbClazz = cbClazz ; } protected abstract List < TestsuitePermutation . BootstrapComboFactory < SB , CB > > newFactories ( ) ; protected List < ByteBufAllocator > newAllocators ( ) { return TestsuitePermutation . allocator ( ) ; } @Rule public final TestName testName = new TestName ( ) ; protected void run ( ) throws Throwable { List < TestsuitePermutation . BootstrapComboFactory < SB , CB > > combos = newFactories ( ) ; for ( ByteBufAllocator allocator : newAllocators ( ) ) { int i = <int> ; for ( TestsuitePermutation . BootstrapComboFactory < SB , CB > e : combos ) { sb = e . newServerInstance ( ) ; cb = e . newClientInstance ( ) ; configure ( sb , cb , allocator ) ; logger . info ( String . format ( <str> , testName . getMethodName ( ) , + + i , combos . size ( ) , sb , cb , StringUtil . simpleClassName ( allocator ) ) ) ; try { Method m = getClass ( ) . getMethod ( TestUtils . testMethodName ( testName ) , sbClazz , cbClazz ) ; m . invoke ( this , sb , cb ) ; } catch ( InvocationTargetException ex ) { throw ex . getCause ( ) ; } } } } protected abstract void configure ( SB sb , CB cb , ByteBufAllocator allocator ) ; } 

package io . netty . handler . codec . socksx . v5 ; import io . netty . handler . codec . DecoderResult ; import io . netty . util . NetUtil ; import io . netty . util . internal . StringUtil ; import java . net . IDN ; public final class DefaultSocks5CommandResponse extends AbstractSocks5Message implements Socks5CommandResponse { private final Socks5CommandStatus status ; private final Socks5AddressType bndAddrType ; private final String bndAddr ; private final int bndPort ; public DefaultSocks5CommandResponse ( Socks5CommandStatus status , Socks5AddressType bndAddrType ) { this ( status , bndAddrType , null , <int> ) ; } public DefaultSocks5CommandResponse ( Socks5CommandStatus status , Socks5AddressType bndAddrType , String bndAddr , int bndPort ) { if ( status = = null ) { throw new NullPointerException ( <str> ) ; } if ( bndAddrType = = null ) { throw new NullPointerException ( <str> ) ; } if ( bndAddr ! = null ) { if ( bndAddrType = = Socks5AddressType . IPv4 ) { if ( ! NetUtil . isValidIpV4Address ( bndAddr ) ) { throw new IllegalArgumentException ( <str> + bndAddr + <str> ) ; } } else if ( bndAddrType = = Socks5AddressType . DOMAIN ) { bndAddr = IDN . toASCII ( bndAddr ) ; if ( bndAddr . length ( ) > <int> ) { throw new IllegalArgumentException ( <str> + bndAddr + <str> ) ; } } else if ( bndAddrType = = Socks5AddressType . IPv6 ) { if ( ! NetUtil . isValidIpV6Address ( bndAddr ) ) { throw new IllegalArgumentException ( <str> + bndAddr + <str> ) ; } } } if ( bndPort < <int> | | bndPort > <int> ) { throw new IllegalArgumentException ( <str> + bndPort + <str> ) ; } this . status = status ; this . bndAddrType = bndAddrType ; this . bndAddr = bndAddr ; this . bndPort = bndPort ; } @Override public Socks5CommandStatus status ( ) { return status ; } @Override public Socks5AddressType bndAddrType ( ) { return bndAddrType ; } @Override public String bndAddr ( ) { return bndAddr ; } @Override public int bndPort ( ) { return bndPort ; } @Override public String toString ( ) { StringBuilder buf = new StringBuilder ( <int> ) ; buf . append ( StringUtil . simpleClassName ( this ) ) ; DecoderResult decoderResult = decoderResult ( ) ; if ( ! decoderResult . isSuccess ( ) ) { buf . append ( <str> ) ; buf . append ( decoderResult ) ; buf . append ( <str> ) ; } else { buf . append ( <str> ) ; } buf . append ( status ( ) ) ; buf . append ( <str> ) ; buf . append ( bndAddrType ( ) ) ; buf . append ( <str> ) ; buf . append ( bndAddr ( ) ) ; buf . append ( <str> ) ; buf . append ( bndPort ( ) ) ; buf . append ( <str> ) ; return buf . toString ( ) ; } } 

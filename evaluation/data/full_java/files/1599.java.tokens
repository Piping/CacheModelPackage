package org . apache . cassandra . repair ; import java . net . InetAddress ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . util . UUID ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . dht . IPartitioner ; import org . apache . cassandra . dht . Murmur3Partitioner ; import org . apache . cassandra . dht . Range ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . schema . KeyspaceParams ; import org . apache . cassandra . service . ActiveRepairService ; import org . apache . cassandra . utils . MerkleTree ; import org . apache . cassandra . utils . MerkleTrees ; import static org . junit . Assert . assertEquals ; public class LocalSyncTaskTest extends SchemaLoader { private static final IPartitioner partirioner = Murmur3Partitioner . instance ; public static final String KEYSPACE1 = <str> ; public static final String CF_STANDARD = <str> ; @BeforeClass public static void defineSchema ( ) throws Exception { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( <int> ) , SchemaLoader . standardCFMD ( KEYSPACE1 , CF_STANDARD ) ) ; } @Test public void testNoDifference ( ) throws Throwable { final InetAddress ep1 = InetAddress . getByName ( <str> ) ; final InetAddress ep2 = InetAddress . getByName ( <str> ) ; Range < Token > range = new Range < > ( partirioner . getMinimumToken ( ) , partirioner . getRandomToken ( ) ) ; RepairJobDesc desc = new RepairJobDesc ( UUID . randomUUID ( ) , UUID . randomUUID ( ) , KEYSPACE1 , <str> , Arrays . asList ( range ) ) ; MerkleTrees tree1 = createInitialTree ( desc ) ; MerkleTrees tree2 = createInitialTree ( desc ) ; TreeResponse r1 = new TreeResponse ( ep1 , tree1 ) ; TreeResponse r2 = new TreeResponse ( ep2 , tree2 ) ; LocalSyncTask task = new LocalSyncTask ( desc , r1 , r2 , ActiveRepairService . UNREPAIRED_SSTABLE ) ; task . run ( ) ; assertEquals ( <int> , task . get ( ) . numberOfDifferences ) ; } @Test public void testDifference ( ) throws Throwable { Range < Token > range = new Range < > ( partirioner . getMinimumToken ( ) , partirioner . getRandomToken ( ) ) ; UUID parentRepairSession = UUID . randomUUID ( ) ; Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( <str> ) ; ActiveRepairService . instance . registerParentRepairSession ( parentRepairSession , Arrays . asList ( cfs ) , Arrays . asList ( range ) , false , System . currentTimeMillis ( ) , false ) ; RepairJobDesc desc = new RepairJobDesc ( parentRepairSession , UUID . randomUUID ( ) , KEYSPACE1 , <str> , Arrays . asList ( range ) ) ; MerkleTrees tree1 = createInitialTree ( desc ) ; MerkleTrees tree2 = createInitialTree ( desc ) ; Token token = partirioner . midpoint ( range . left , range . right ) ; tree1 . invalidate ( token ) ; MerkleTree . TreeRange changed = tree1 . get ( token ) ; changed . hash ( <str> . getBytes ( ) ) ; Set < Range < Token > > interesting = new HashSet < > ( ) ; interesting . add ( changed ) ; TreeResponse r1 = new TreeResponse ( InetAddress . getByName ( <str> ) , tree1 ) ; TreeResponse r2 = new TreeResponse ( InetAddress . getByName ( <str> ) , tree2 ) ; LocalSyncTask task = new LocalSyncTask ( desc , r1 , r2 , ActiveRepairService . UNREPAIRED_SSTABLE ) ; task . run ( ) ; assertEquals ( <str> , interesting . size ( ) , task . getCurrentStat ( ) . numberOfDifferences ) ; } private MerkleTrees createInitialTree ( RepairJobDesc desc ) { MerkleTrees tree = new MerkleTrees ( partirioner ) ; tree . addMerkleTrees ( ( int ) Math . pow ( <int> , <int> ) , desc . ranges ) ; tree . init ( ) ; for ( MerkleTree . TreeRange r : tree . invalids ( ) ) { r . ensureHashInitialised ( ) ; } return tree ; } } 

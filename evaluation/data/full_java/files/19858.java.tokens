package io . netty . example . portunification ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . SocketChannel ; import io . netty . channel . socket . nio . NioServerSocketChannel ; import io . netty . handler . logging . LogLevel ; import io . netty . handler . logging . LoggingHandler ; import io . netty . handler . ssl . SslContext ; import io . netty . handler . ssl . SslContextBuilder ; import io . netty . handler . ssl . util . SelfSignedCertificate ; public final class PortUnificationServer { static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; public static void main ( String [ ] args ) throws Exception { SelfSignedCertificate ssc = new SelfSignedCertificate ( ) ; final SslContext sslCtx = SslContextBuilder . forServer ( ssc . certificate ( ) , ssc . privateKey ( ) ) . build ( ) ; EventLoopGroup bossGroup = new NioEventLoopGroup ( <int> ) ; EventLoopGroup workerGroup = new NioEventLoopGroup ( ) ; try { ServerBootstrap b = new ServerBootstrap ( ) ; b . group ( bossGroup , workerGroup ) . channel ( NioServerSocketChannel . class ) . handler ( new LoggingHandler ( LogLevel . INFO ) ) . childHandler ( new ChannelInitializer < SocketChannel > ( ) { @Override public void initChannel ( SocketChannel ch ) throws Exception { ch . pipeline ( ) . addLast ( new PortUnificationServerHandler ( sslCtx ) ) ; } } ) ; b . bind ( PORT ) . sync ( ) . channel ( ) . closeFuture ( ) . sync ( ) ; } finally { bossGroup . shutdownGracefully ( ) ; workerGroup . shutdownGracefully ( ) ; } } } 

package org . elasticsearch . common . io ; import java . io . IOException ; import java . io . Reader ; public class FastCharArrayReader extends Reader { protected char buf [ ] ; protected int pos ; protected int markedPos = <int> ; protected int count ; public FastCharArrayReader ( char buf [ ] ) { this . buf = buf ; this . pos = <int> ; this . count = buf . length ; } public FastCharArrayReader ( char buf [ ] , int offset , int length ) { if ( ( offset < <int> ) | | ( offset > buf . length ) | | ( length < <int> ) | | ( ( offset + length ) < <int> ) ) { throw new IllegalArgumentException ( ) ; } this . buf = buf ; this . pos = offset ; this . count = Math . min ( offset + length , buf . length ) ; this . markedPos = offset ; } private void ensureOpen ( ) throws IOException { if ( buf = = null ) throw new IOException ( <str> ) ; } @Override public int read ( ) throws IOException { ensureOpen ( ) ; if ( pos > = count ) return - <int> ; else return buf [ pos + + ] ; } @Override public int read ( char b [ ] , int off , int len ) throws IOException { ensureOpen ( ) ; if ( ( off < <int> ) | | ( off > b . length ) | | ( len < <int> ) | | ( ( off + len ) > b . length ) | | ( ( off + len ) < <int> ) ) { throw new IndexOutOfBoundsException ( ) ; } else if ( len = = <int> ) { return <int> ; } if ( pos > = count ) { return - <int> ; } if ( pos + len > count ) { len = count - pos ; } if ( len < = <int> ) { return <int> ; } System . arraycopy ( buf , pos , b , off , len ) ; pos + = len ; return len ; } @Override public long skip ( long n ) throws IOException { ensureOpen ( ) ; if ( pos + n > count ) { n = count - pos ; } if ( n < <int> ) { return <int> ; } pos + = n ; return n ; } @Override public boolean ready ( ) throws IOException { ensureOpen ( ) ; return ( count - pos ) > <int> ; } @Override public boolean markSupported ( ) { return true ; } @Override public void mark ( int readAheadLimit ) throws IOException { ensureOpen ( ) ; markedPos = pos ; } @Override public void reset ( ) throws IOException { ensureOpen ( ) ; pos = markedPos ; } @Override public void close ( ) { buf = null ; } } 

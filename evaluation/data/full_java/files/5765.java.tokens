package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . * ; import org . elasticsearch . common . inject . spi . Dependency ; class FactoryProxy < T > implements InternalFactory < T > , BindingProcessor . CreationListener { private final InjectorImpl injector ; private final Key < T > key ; private final Key < ? extends T > targetKey ; private final Object source ; private InternalFactory < ? extends T > targetFactory ; FactoryProxy ( InjectorImpl injector , Key < T > key , Key < ? extends T > targetKey , Object source ) { this . injector = injector ; this . key = key ; this . targetKey = targetKey ; this . source = source ; } @Override public void notify ( final Errors errors ) { try { targetFactory = injector . getInternalFactory ( targetKey , errors . withSource ( source ) ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } @Override public T get ( Errors errors , InternalContext context , Dependency < ? > dependency ) throws ErrorsException { return targetFactory . get ( errors . withSource ( targetKey ) , context , dependency ) ; } @Override public String toString ( ) { return new ToStringBuilder ( FactoryProxy . class ) . add ( <str> , key ) . add ( <str> , targetFactory ) . toString ( ) ; } } 

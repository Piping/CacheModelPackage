package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . analysis . Tokenizer ; import java . io . Reader ; public final class CustomAnalyzer extends Analyzer { private final TokenizerFactory tokenizerFactory ; private final CharFilterFactory [ ] charFilters ; private final TokenFilterFactory [ ] tokenFilters ; private final int positionIncrementGap ; private final int offsetGap ; public CustomAnalyzer ( TokenizerFactory tokenizerFactory , CharFilterFactory [ ] charFilters , TokenFilterFactory [ ] tokenFilters ) { this ( tokenizerFactory , charFilters , tokenFilters , <int> , - <int> ) ; } public CustomAnalyzer ( TokenizerFactory tokenizerFactory , CharFilterFactory [ ] charFilters , TokenFilterFactory [ ] tokenFilters , int positionIncrementGap , int offsetGap ) { this . tokenizerFactory = tokenizerFactory ; this . charFilters = charFilters ; this . tokenFilters = tokenFilters ; this . positionIncrementGap = positionIncrementGap ; this . offsetGap = offsetGap ; } public TokenizerFactory tokenizerFactory ( ) { return tokenizerFactory ; } public TokenFilterFactory [ ] tokenFilters ( ) { return tokenFilters ; } public CharFilterFactory [ ] charFilters ( ) { return charFilters ; } @Override public int getPositionIncrementGap ( String fieldName ) { return this . positionIncrementGap ; } @Override public int getOffsetGap ( String field ) { if ( offsetGap < <int> ) { return super . getOffsetGap ( field ) ; } return this . offsetGap ; } @Override protected TokenStreamComponents createComponents ( String fieldName ) { Tokenizer tokenizer = tokenizerFactory . create ( ) ; TokenStream tokenStream = tokenizer ; for ( TokenFilterFactory tokenFilter : tokenFilters ) { tokenStream = tokenFilter . create ( tokenStream ) ; } return new TokenStreamComponents ( tokenizer , tokenStream ) ; } @Override protected Reader initReader ( String fieldName , Reader reader ) { if ( charFilters ! = null & & charFilters . length > <int> ) { for ( CharFilterFactory charFilter : charFilters ) { reader = charFilter . create ( reader ) ; } } return reader ; } } 

package com . google . common . io ; import com . google . common . base . Charsets ; import com . google . common . primitives . Bytes ; import junit . framework . TestCase ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . DataInput ; import java . io . DataInputStream ; import java . io . IOException ; public class LittleEndianDataOutputStreamTest extends TestCase { private ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; private LittleEndianDataOutputStream out = new LittleEndianDataOutputStream ( baos ) ; public void testWriteLittleEndian ( ) throws IOException { out . write ( new byte [ ] { - <int> , <int> } ) ; out . writeBoolean ( true ) ; out . writeBoolean ( false ) ; out . writeByte ( <int> ) ; out . writeByte ( - <int> ) ; out . writeByte ( ( byte ) <int> ) ; out . writeChar ( <str> ) ; out . writeShort ( ( short ) - <int> ) ; out . writeShort ( ( short ) <int> ) ; out . writeInt ( <hex> ) ; out . writeLong ( <hex> ) ; out . writeUTF ( <str> ) ; out . writeFloat ( Float . intBitsToFloat ( <hex> ) ) ; out . writeDouble ( Double . longBitsToDouble ( <hex> ) ) ; byte [ ] data = baos . toByteArray ( ) ; DataInput in = new DataInputStream ( new ByteArrayInputStream ( data ) ) ; byte [ ] b = new byte [ <int> ] ; in . readFully ( b ) ; assertEquals ( - <int> , b [ <int> ] ) ; assertEquals ( <int> , b [ <int> ] ) ; assertEquals ( true , in . readBoolean ( ) ) ; assertEquals ( false , in . readBoolean ( ) ) ; assertEquals ( <int> , in . readByte ( ) ) ; assertEquals ( - <int> , in . readByte ( ) ) ; assertEquals ( <int> , in . readUnsignedByte ( ) ) ; assertEquals ( <str> , in . readChar ( ) ) ; assertEquals ( - <int> , in . readShort ( ) ) ; assertEquals ( <int> , in . readUnsignedShort ( ) ) ; assertEquals ( <hex> , in . readInt ( ) ) ; assertEquals ( <hex> , in . readLong ( ) ) ; assertEquals ( <str> , in . readUTF ( ) ) ; assertEquals ( <hex> , Float . floatToIntBits ( in . readFloat ( ) ) ) ; assertEquals ( <hex> , Double . doubleToLongBits ( in . readDouble ( ) ) ) ; } @SuppressWarnings ( <str> ) public void testWriteBytes ( ) throws IOException { out . writeBytes ( <str> ) ; byte [ ] data = baos . toByteArray ( ) ; DataInput in = new DataInputStream ( new ByteArrayInputStream ( data ) ) ; byte [ ] b = new byte [ <int> ] ; in . readFully ( b ) ; assertEquals ( <str> . getBytes ( Charsets . ISO_8859_1 ) , b ) ; } @SuppressWarnings ( <str> ) public void testWriteBytes_discardHighOrderBytes ( ) throws IOException { out . writeBytes ( <str> ) ; byte [ ] data = baos . toByteArray ( ) ; DataInput in = new DataInputStream ( new ByteArrayInputStream ( data ) ) ; byte [ ] b = new byte [ <int> ] ; in . readFully ( b ) ; byte [ ] expected = { ( byte ) <hex> , ( byte ) <hex> , ( byte ) <hex> } ; assertEquals ( expected , b ) ; } public void testWriteChars ( ) throws IOException { out . writeChars ( <str> ) ; byte [ ] data = baos . toByteArray ( ) ; DataInput in = new DataInputStream ( new ByteArrayInputStream ( data ) ) ; byte [ ] actual = new byte [ <int> ] ; in . readFully ( actual ) ; assertEquals ( <str> , actual [ <int> ] ) ; assertEquals ( <int> , actual [ <int> ] ) ; assertEquals ( ( byte ) <hex> , actual [ <int> ] ) ; assertEquals ( <int> , actual [ <int> ] ) ; assertEquals ( <str> , actual [ <int> ] ) ; assertEquals ( <int> , actual [ <int> ] ) ; assertEquals ( <str> , actual [ <int> ] ) ; assertEquals ( <int> , actual [ <int> ] ) ; assertEquals ( <str> , actual [ <int> ] ) ; assertEquals ( <int> , actual [ <int> ] ) ; assertEquals ( ( byte ) <hex> , actual [ <int> ] ) ; assertEquals ( <int> , actual [ <int> ] ) ; } private static void assertEquals ( byte [ ] expected , byte [ ] actual ) { assertEquals ( Bytes . asList ( expected ) , Bytes . asList ( actual ) ) ; } } 

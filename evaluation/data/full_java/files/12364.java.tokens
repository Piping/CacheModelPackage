package org . gradle . api . internal ; import groovy . lang . * ; import groovy . lang . MissingMethodException ; import org . gradle . api . internal . project . AbstractProject ; import org . gradle . api . plugins . Convention ; import org . gradle . testfixtures . ProjectBuilder ; import org . gradle . util . TestUtil ; import org . junit . Test ; import java . util . Map ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . * ; public class ExtensibleDynamicObjectTest { @Test public void hasPropertiesDefinedByClass ( ) { Bean bean = new Bean ( ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; } @Test public void canGetAndSetClassProperty ( ) { Bean bean = new Bean ( ) ; bean . setReadWriteProperty ( <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( bean . getReadWriteProperty ( ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canGetReadOnlyClassProperty ( ) { Bean bean = new Bean ( ) ; bean . doSetReadOnlyProperty ( <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void cannotSetReadOnlyClassProperty ( ) { Bean bean = new Bean ( ) ; try { bean . setProperty ( <str> , <str> ) ; fail ( ) ; } catch ( ReadOnlyPropertyException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } @Test public void canSetWriteOnlyClassProperty ( ) { Bean bean = new Bean ( ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( bean . doGetWriteOnlyProperty ( ) , equalTo ( <str> ) ) ; } @Test public void cannotGetWriteOnlyClassProperty ( ) { Bean bean = new Bean ( ) ; try { bean . getProperty ( <str> ) ; fail ( ) ; } catch ( GroovyRuntimeException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } @Test public void canSetPropertyWhenGetterAndSetterHaveDifferentTypes ( ) { Bean bean = new Bean ( ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <int> ) ) ; } @Test public void groovyObjectHasPropertiesDefinedByClassMetaInfo ( ) { GroovyBean bean = new GroovyBean ( ) ; ExtensibleDynamicObjectTestHelper . decorateGroovyBean ( bean ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; } @Test public void groovyObjectHasPropertiesInheritedFromSuperClass ( ) { GroovyBean bean = new GroovyBean ( ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; } @Test public void canGetAndSetGroovyObjectClassProperty ( ) { GroovyBean bean = new GroovyBean ( ) ; bean . setGroovyProperty ( <str> ) ; assertThat ( ( ( Bean ) bean ) . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( ( ( Bean ) bean ) . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( bean . getGroovyProperty ( ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canGetAndSetGroovyDynamicProperty ( ) { GroovyBean bean = new GroovyBean ( ) ; ExtensibleDynamicObjectTestHelper . decorateGroovyBean ( bean ) ; assertThat ( ( ( Bean ) bean ) . getProperty ( <str> ) , equalTo ( null ) ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( ( ( Bean ) bean ) . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canGetButNotSetPropertiesOnJavaObjectFromGroovy ( ) { ExtensibleDynamicObjectTestHelper . assertCanGetProperties ( new Bean ( ) ) ; } @Test public void canGetAndSetPropertiesOnGroovyObjectFromGroovy ( ) { ExtensibleDynamicObjectTestHelper . assertCanGetAndSetProperties ( new GroovyBean ( ) ) ; } @Test public void canGetAndSetPropertiesOnGroovyObjectFromJava ( ) { assertCanGetAndSetProperties ( new GroovyBean ( ) . getAsDynamicObject ( ) ) ; } @Test public void canGetAndSetPropertiesOnJavaSubClassOfGroovyObjectFromJava ( ) { assertCanGetAndSetProperties ( new DynamicJavaBean ( ) . getAsDynamicObject ( ) ) ; } private void assertCanGetAndSetProperties ( DynamicObject bean ) { bean . setProperty ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canGetAndSetPropertiesOnJavaSubClassOfGroovyObjectFromGroovy ( ) { ExtensibleDynamicObjectTestHelper . assertCanGetAndSetProperties ( new DynamicJavaBean ( ) ) ; } @Test public void hasPropertyDefinedByConventionObject ( ) { Bean bean = new Bean ( ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; assertFalse ( bean . hasProperty ( <str> ) ) ; assertFalse ( bean . hasProperty ( <str> ) ) ; convention . getPlugins ( ) . put ( <str> , new ConventionBean ( ) ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; } @Test public void canGetAndSetPropertyDefinedByConventionObject ( ) { Bean bean = new Bean ( ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; ConventionBean conventionBean = new ConventionBean ( ) ; convention . getPlugins ( ) . put ( <str> , conventionBean ) ; conventionBean . setConventionProperty ( <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( conventionBean . getConventionProperty ( ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void hasPropertyDefinedByParent ( ) { Bean parent = new Bean ( ) ; parent . defineProperty ( <str> , <str> ) ; Bean bean = new Bean ( ) ; assertFalse ( bean . hasProperty ( <str> ) ) ; bean . setParent ( parent . getAsDynamicObject ( ) ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; } @Test public void canGetPropertyDefinedByParent ( ) { Bean parent = new Bean ( ) ; parent . defineProperty ( <str> , <str> ) ; Bean bean = new Bean ( ) ; bean . setParent ( parent . getAsDynamicObject ( ) ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void extraPropertyIsNotVisibleToParent ( ) { Bean parent = new Bean ( ) ; Bean bean = new Bean ( ) ; bean . setParent ( parent . getAsDynamicObject ( ) ) ; bean . defineProperty ( <str> , <str> ) ; assertFalse ( parent . hasProperty ( <str> ) ) ; } @Test public void hasAdditionalProperty ( ) { Bean bean = new Bean ( ) ; assertFalse ( bean . hasProperty ( <str> ) ) ; bean . defineProperty ( <str> , <str> ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; bean . setProperty ( <str> , null ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; } @Test public void canGetAndSetExtraProperty ( ) { Bean bean = new Bean ( ) ; bean . defineProperty ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canGetAndSetPropertyDefinedByAdditionalObject ( ) { Bean otherObject = new Bean ( ) ; otherObject . defineProperty ( <str> , <str> ) ; Bean bean = new Bean ( ) ; bean . extensibleDynamicObject . addObject ( otherObject . getAsDynamicObject ( ) , ExtensibleDynamicObject . Location . BeforeConvention ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( otherObject . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void classPropertyTakesPrecedenceOverAdditionalProperty ( ) { Bean bean = new Bean ( ) ; bean . setReadWriteProperty ( <str> ) ; bean . extensibleDynamicObject . getDynamicProperties ( ) . set ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( bean . getReadWriteProperty ( ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( bean . extensibleDynamicObject . getDynamicProperties ( ) . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void extraPropertyTakesPrecedenceOverConventionProperty ( ) { Bean bean = new Bean ( ) ; bean . defineProperty ( <str> , <str> ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; ConventionBean conventionBean = new ConventionBean ( ) ; convention . getPlugins ( ) . put ( <str> , conventionBean ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; bean . setProperty ( <str> , <str> ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( bean . extensibleDynamicObject . getDynamicProperties ( ) . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( conventionBean . getConventionProperty ( ) , nullValue ( ) ) ; } @Test public void conventionPropertyTakesPrecedenceOverParentProperty ( ) { Bean parent = new Bean ( ) ; parent . defineProperty ( <str> , <str> ) ; Bean bean = new Bean ( ) ; bean . setParent ( parent . getAsDynamicObject ( ) ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; ConventionBean conventionBean = new ConventionBean ( ) ; conventionBean . setConventionProperty ( <str> ) ; convention . getPlugins ( ) . put ( <str> , conventionBean ) ; assertThat ( bean . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canGetAllProperties ( ) { Bean parent = new Bean ( ) ; parent . defineProperty ( <str> , <str> ) ; parent . setReadWriteProperty ( <str> ) ; parent . doSetReadOnlyProperty ( <str> ) ; Convention parentConvention = parent . extensibleDynamicObject . getConvention ( ) ; parentConvention . getPlugins ( ) . put ( <str> , new ConventionBean ( ) ) ; GroovyBean bean = new GroovyBean ( ) ; bean . defineProperty ( <str> , <str> ) ; bean . setReadWriteProperty ( <str> ) ; bean . doSetReadOnlyProperty ( <str> ) ; bean . setGroovyProperty ( <str> ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; ConventionBean conventionBean = new ConventionBean ( ) ; conventionBean . setConventionProperty ( <str> ) ; convention . getPlugins ( ) . put ( <str> , conventionBean ) ; bean . setParent ( parent . getAsDynamicObject ( ) ) ; Map < String , Object > properties = bean . getProperties ( ) ; assertThat ( properties . get ( <str> ) , sameInstance ( ( Object ) properties ) ) ; assertThat ( properties . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( properties . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( properties . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( properties . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( properties . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( properties . get ( <str> ) , equalTo ( null ) ) ; assertThat ( properties . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canGetAllPropertiesFromGroovy ( ) { ExtensibleDynamicObjectTestHelper . assertCanGetAllProperties ( new Bean ( ) ) ; ExtensibleDynamicObjectTestHelper . assertCanGetAllProperties ( new GroovyBean ( ) ) ; ExtensibleDynamicObjectTestHelper . assertCanGetAllProperties ( new DynamicJavaBean ( ) ) ; } @Test public void getPropertyFailsForUnknownProperty ( ) { Bean bean = new Bean ( ) ; try { bean . getProperty ( <str> ) ; fail ( ) ; } catch ( MissingPropertyException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } bean . setParent ( new Bean ( ) { @Override public String toString ( ) { return <str> ; } } . getAsDynamicObject ( ) ) ; try { bean . getProperty ( <str> ) ; fail ( ) ; } catch ( MissingPropertyException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } @Test public void extraPropertyWithNullValueIsNotTreatedAsUnknown ( ) { Bean bean = new Bean ( ) ; bean . defineProperty ( <str> , null ) ; assertThat ( bean . getProperty ( <str> ) , nullValue ( ) ) ; } @Test public void canInvokeMethodDefinedByClass ( ) { Bean bean = new Bean ( ) ; assertTrue ( bean . hasMethod ( <str> , <str> , <str> ) ) ; assertThat ( bean . getAsDynamicObject ( ) . invokeMethod ( <str> , <str> , <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canInvokeMethodDefinedByMetaClass ( ) { Bean bean = new GroovyBean ( ) ; ExtensibleDynamicObjectTestHelper . decorateGroovyBean ( bean ) ; assertTrue ( bean . hasMethod ( <str> , <str> , <str> ) ) ; assertThat ( bean . getAsDynamicObject ( ) . invokeMethod ( <str> , <str> , <str> ) , equalTo ( ( Object ) <str> ) ) ; assertTrue ( bean . hasMethod ( <str> , <str> , <str> ) ) ; assertThat ( bean . getAsDynamicObject ( ) . invokeMethod ( <str> , <str> , <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canInvokeMethodDefinedByScriptObject ( ) { Bean bean = new Bean ( ) ; Script script = TestUtil . createScript ( <str> ) ; bean . extensibleDynamicObject . addObject ( new BeanDynamicObject ( script ) , ExtensibleDynamicObject . Location . BeforeConvention ) ; assertTrue ( bean . hasMethod ( <str> , <str> , <str> ) ) ; assertThat ( bean . getAsDynamicObject ( ) . invokeMethod ( <str> , <str> , <str> ) . toString ( ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canInvokeMethodDefinedByConvention ( ) { Bean bean = new Bean ( ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; assertFalse ( bean . hasMethod ( <str> , <str> , <str> ) ) ; convention . getPlugins ( ) . put ( <str> , new ConventionBean ( ) ) ; assertTrue ( bean . hasMethod ( <str> , <str> , <str> ) ) ; assertThat ( bean . getAsDynamicObject ( ) . invokeMethod ( <str> , <str> , <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canInvokeMethodDefinedByParent ( ) { Bean parent = new Bean ( ) { public String parentMethod ( String a , String b ) { return String . format ( <str> , a , b ) ; } } ; Bean bean = new Bean ( ) ; assertFalse ( bean . hasMethod ( <str> , <str> , <str> ) ) ; bean . setParent ( parent . getAsDynamicObject ( ) ) ; assertTrue ( bean . hasMethod ( <str> , <str> , <str> ) ) ; assertThat ( bean . getAsDynamicObject ( ) . invokeMethod ( <str> , <str> , <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void canInvokeMethodsOnJavaObjectFromGroovy ( ) { Bean bean = new Bean ( ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; convention . getPlugins ( ) . put ( <str> , new ConventionBean ( ) ) ; new ExtensibleDynamicObjectTestHelper ( ) . assertCanCallMethods ( bean ) ; } @Test public void canInvokeMethodsOnGroovyObjectFromGroovy ( ) { GroovyBean bean = new GroovyBean ( ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; convention . getPlugins ( ) . put ( <str> , new ConventionBean ( ) ) ; new ExtensibleDynamicObjectTestHelper ( ) . assertCanCallMethods ( bean ) ; } @Test public void canInvokeMethodsOnJavaSubClassOfGroovyObjectFromGroovy ( ) { DynamicJavaBean javaBean = new DynamicJavaBean ( ) ; Convention convention = javaBean . extensibleDynamicObject . getConvention ( ) ; convention . getPlugins ( ) . put ( <str> , new ConventionBean ( ) ) ; new ExtensibleDynamicObjectTestHelper ( ) . assertCanCallMethods ( javaBean ) ; } @Test public void canInvokeClosurePropertyAsAMethod ( ) { Bean bean = new Bean ( ) ; bean . defineProperty ( <str> , TestUtil . toClosure ( <str> ) ) ; assertThat ( bean . invokeMethod ( <str> , <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void invokeMethodFailsForUnknownMethod ( ) { Bean bean = new Bean ( ) ; try { bean . getAsDynamicObject ( ) . invokeMethod ( <str> , <str> , <int> ) ; fail ( ) ; } catch ( MissingMethodException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } @Test public void propagatesGetPropertyException ( ) { final RuntimeException failure = new RuntimeException ( ) ; Bean bean = new Bean ( ) { String getFailure ( ) { throw failure ; } } ; try { bean . getProperty ( <str> ) ; fail ( ) ; } catch ( Exception e ) { assertThat ( e , sameInstance ( ( Exception ) failure ) ) ; } } @Test public void propagatesSetPropertyException ( ) { final RuntimeException failure = new RuntimeException ( ) ; Bean bean = new Bean ( ) { void setFailure ( String value ) { throw failure ; } } ; try { bean . setProperty ( <str> , <str> ) ; fail ( ) ; } catch ( Exception e ) { assertThat ( e , sameInstance ( ( Exception ) failure ) ) ; } } @Test public void propagatesInvokeMethodException ( ) { final RuntimeException failure = new RuntimeException ( ) ; Bean bean = new Bean ( ) { void failure ( ) { throw failure ; } } ; try { bean . getAsDynamicObject ( ) . invokeMethod ( <str> ) ; fail ( ) ; } catch ( Exception e ) { assertThat ( e , sameInstance ( ( Exception ) failure ) ) ; } } @Test public void extraPropertiesAreInherited ( ) { Bean bean = new Bean ( ) ; bean . defineProperty ( <str> , <str> ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertTrue ( inherited . hasProperty ( <str> ) ) ; assertThat ( inherited . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( inherited . getProperties ( ) . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void inheritedAdditionalPropertiesTrackChanges ( ) { Bean bean = new Bean ( ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertFalse ( inherited . hasProperty ( <str> ) ) ; bean . defineProperty ( <str> , <str> ) ; assertTrue ( inherited . hasProperty ( <str> ) ) ; assertThat ( inherited . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void additionalObjectPropertiesAreInherited ( ) { Bean other = new Bean ( ) ; other . defineProperty ( <str> , <str> ) ; Bean bean = new Bean ( ) ; bean . extensibleDynamicObject . addObject ( other . getAsDynamicObject ( ) , ExtensibleDynamicObject . Location . BeforeConvention ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertTrue ( inherited . hasProperty ( <str> ) ) ; assertThat ( inherited . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( inherited . getProperties ( ) . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void inheritedAdditionalObjectPropertiesTrackChanges ( ) { Bean other = new Bean ( ) ; other . defineProperty ( <str> , <str> ) ; Bean bean = new Bean ( ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertFalse ( inherited . hasProperty ( <str> ) ) ; bean . extensibleDynamicObject . addObject ( other . getAsDynamicObject ( ) , ExtensibleDynamicObject . Location . BeforeConvention ) ; assertTrue ( inherited . hasProperty ( <str> ) ) ; assertThat ( inherited . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void conventionPropertiesAreInherited ( ) { Bean bean = new Bean ( ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; ConventionBean conventionBean = new ConventionBean ( ) ; conventionBean . setConventionProperty ( <str> ) ; convention . getPlugins ( ) . put ( <str> , conventionBean ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertTrue ( inherited . hasProperty ( <str> ) ) ; assertThat ( inherited . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( inherited . getProperties ( ) . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void inheritedConventionPropertiesTrackChanges ( ) { Bean bean = new Bean ( ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertFalse ( inherited . hasProperty ( <str> ) ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; ConventionBean conventionBean = new ConventionBean ( ) ; conventionBean . setConventionProperty ( <str> ) ; convention . getPlugins ( ) . put ( <str> , conventionBean ) ; assertTrue ( inherited . hasProperty ( <str> ) ) ; assertThat ( inherited . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void parentPropertiesAreInherited ( ) { Bean parent = new Bean ( ) ; parent . defineProperty ( <str> , <str> ) ; Bean bean = new Bean ( ) ; bean . setParent ( parent . getAsDynamicObject ( ) ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertTrue ( inherited . hasProperty ( <str> ) ) ; assertThat ( inherited . getProperty ( <str> ) , equalTo ( ( Object ) <str> ) ) ; assertThat ( inherited . getProperties ( ) . get ( <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void otherPropertiesAreNotInherited ( ) { Bean bean = new Bean ( ) ; assertTrue ( bean . hasProperty ( <str> ) ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertFalse ( inherited . hasProperty ( <str> ) ) ; assertFalse ( inherited . getProperties ( ) . containsKey ( <str> ) ) ; } @Test public void cannotSetInheritedProperties ( ) { Bean bean = new Bean ( ) ; bean . defineProperty ( <str> , <str> ) ; DynamicObject inherited = bean . getInheritable ( ) ; try { inherited . setProperty ( <str> , <str> ) ; fail ( ) ; } catch ( MissingPropertyException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } @Test public void conventionMethodsAreInherited ( ) { Bean bean = new Bean ( ) ; Convention convention = bean . extensibleDynamicObject . getConvention ( ) ; convention . getPlugins ( ) . put ( <str> , new ConventionBean ( ) ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertTrue ( inherited . hasMethod ( <str> , <str> , <str> ) ) ; assertThat ( inherited . invokeMethod ( <str> , <str> , <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void additionalObjectMethodsAreInherited ( ) { Bean other = new Bean ( ) ; Convention convention = other . extensibleDynamicObject . getConvention ( ) ; convention . getPlugins ( ) . put ( <str> , new ConventionBean ( ) ) ; Bean bean = new Bean ( ) ; bean . extensibleDynamicObject . addObject ( other . getAsDynamicObject ( ) , ExtensibleDynamicObject . Location . BeforeConvention ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertTrue ( inherited . hasMethod ( <str> , <str> , <str> ) ) ; assertThat ( inherited . invokeMethod ( <str> , <str> , <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void parentMethodsAreInherited ( ) { Bean parent = new Bean ( ) ; Convention convention = parent . extensibleDynamicObject . getConvention ( ) ; convention . getPlugins ( ) . put ( <str> , new ConventionBean ( ) ) ; Bean bean = new Bean ( ) ; bean . setParent ( parent . getAsDynamicObject ( ) ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertTrue ( inherited . hasMethod ( <str> , <str> , <str> ) ) ; assertThat ( inherited . invokeMethod ( <str> , <str> , <str> ) , equalTo ( ( Object ) <str> ) ) ; } @Test public void otherMethodsAreNotInherited ( ) { Bean bean = new Bean ( ) ; assertTrue ( bean . hasMethod ( <str> , <str> , <str> ) ) ; DynamicObject inherited = bean . getInheritable ( ) ; assertFalse ( inherited . hasMethod ( <str> , <str> , <str> ) ) ; } @Test public void canGetObjectAsDynamicObject ( ) { Bean bean = new Bean ( ) ; assertThat ( DynamicObjectUtil . asDynamicObject ( bean ) , sameInstance ( ( DynamicObject ) bean . getAsDynamicObject ( ) ) ) ; AbstractProject project = ( AbstractProject ) ProjectBuilder . builder ( ) . build ( ) ; assertThat ( DynamicObjectUtil . asDynamicObject ( project ) , sameInstance ( project . getAsDynamicObject ( ) ) ) ; assertThat ( DynamicObjectUtil . asDynamicObject ( new Object ( ) ) , instanceOf ( DynamicObject . class ) ) ; } @Test public void canGetAndSetGroovyDynamicProperties ( ) { DynamicObject object = new BeanDynamicObject ( new DynamicGroovyBean ( ) ) ; object . setProperty ( <str> , <str> ) ; assertThat ( ( String ) object . getProperty ( <str> ) , equalTo ( <str> ) ) ; try { object . getProperty ( <str> ) ; fail ( ) ; } catch ( MissingPropertyException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } try { object . setProperty ( <str> , <str> ) ; fail ( ) ; } catch ( MissingPropertyException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } @Test public void canCallGroovyDynamicMethods ( ) { DynamicObject object = new BeanDynamicObject ( new DynamicGroovyBean ( ) ) ; Integer doubled = ( Integer ) object . invokeMethod ( <str> , <int> ) ; assertThat ( doubled , equalTo ( <int> ) ) ; try { object . invokeMethod ( <str> , <int> , <int> , <int> ) ; fail ( ) ; } catch ( MissingMethodException e ) { assertThat ( e . getMessage ( ) , startsWith ( <str> ) ) ; } } public static class Bean extends GroovyObjectSupport implements DynamicObjectAware { private String readWriteProperty ; private String readOnlyProperty ; private String writeOnlyProperty ; private Integer differentTypesProperty ; final ExtensibleDynamicObject extensibleDynamicObject ; public Bean ( ) { extensibleDynamicObject = new ExtensibleDynamicObject ( this , ThreadGlobalInstantiator . getOrCreate ( ) ) ; } public DynamicObject getAsDynamicObject ( ) { return extensibleDynamicObject ; } @Override public String toString ( ) { return <str> ; } public void setParent ( DynamicObject parent ) { extensibleDynamicObject . setParent ( parent ) ; } public String getReadOnlyProperty ( ) { return readOnlyProperty ; } public void doSetReadOnlyProperty ( String readOnlyProperty ) { this . readOnlyProperty = readOnlyProperty ; } public String doGetWriteOnlyProperty ( ) { return writeOnlyProperty ; } public void setWriteOnlyProperty ( String writeOnlyProperty ) { this . writeOnlyProperty = writeOnlyProperty ; } public String getReadWriteProperty ( ) { return readWriteProperty ; } public void setReadWriteProperty ( String property ) { this . readWriteProperty = property ; } public Integer getDifferentTypesProperty ( ) { return differentTypesProperty ; } public void setDifferentTypesProperty ( Object differentTypesProperty ) { this . differentTypesProperty = Integer . parseInt ( differentTypesProperty . toString ( ) ) ; } public String javaMethod ( String a , String b ) { return String . format ( <str> , a , b ) ; } public Object getProperty ( String name ) { return extensibleDynamicObject . getProperty ( name ) ; } public boolean hasProperty ( String name ) { return extensibleDynamicObject . hasProperty ( name ) ; } public void setProperty ( String name , Object value ) { extensibleDynamicObject . setProperty ( name , value ) ; } public Map < String , Object > getProperties ( ) { return extensibleDynamicObject . getProperties ( ) ; } public boolean hasMethod ( String name , Object . . . arguments ) { return extensibleDynamicObject . hasMethod ( name , arguments ) ; } public Object invokeMethod ( String name , Object args ) { return extensibleDynamicObject . invokeMethod ( name , ( args instanceof Object [ ] ) ? ( Object [ ] ) args : new Object [ ] { args } ) ; } public DynamicObject getInheritable ( ) { return extensibleDynamicObject . getInheritable ( ) ; } public void defineProperty ( String name , Object value ) { extensibleDynamicObject . getConvention ( ) . getExtraProperties ( ) . set ( name , value ) ; } } private static class DynamicJavaBean extends GroovyBean { } private static class ConventionBean { private String conventionProperty ; public String getConventionProperty ( ) { return conventionProperty ; } public void setConventionProperty ( String conventionProperty ) { this . conventionProperty = conventionProperty ; } public String conventionMethod ( String a , String b ) { return String . format ( <str> , a , b ) ; } } } 

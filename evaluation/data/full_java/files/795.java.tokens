package org . apache . cassandra . metrics ; import java . util . * ; import java . util . concurrent . ThreadPoolExecutor ; import com . codahale . metrics . Counter ; import com . codahale . metrics . Gauge ; import com . codahale . metrics . Meter ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . db . compaction . CompactionInfo ; import org . apache . cassandra . db . compaction . CompactionManager ; import static org . apache . cassandra . metrics . CassandraMetricsRegistry . Metrics ; public class CompactionMetrics implements CompactionManager . CompactionExecutorStatsCollector { public static final MetricNameFactory factory = new DefaultNameFactory ( <str> ) ; private static final Set < CompactionInfo . Holder > compactions = Collections . synchronizedSet ( Collections . newSetFromMap ( new IdentityHashMap < CompactionInfo . Holder , Boolean > ( ) ) ) ; public final Gauge < Integer > pendingTasks ; public final Gauge < Long > completedTasks ; public final Meter totalCompactionsCompleted ; public final Counter bytesCompacted ; public CompactionMetrics ( final ThreadPoolExecutor . . . collectors ) { pendingTasks = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Integer > ( ) { public Integer getValue ( ) { int n = <int> ; for ( String keyspaceName : Schema . instance . getKeyspaces ( ) ) { for ( ColumnFamilyStore cfs : Keyspace . open ( keyspaceName ) . getColumnFamilyStores ( ) ) n + = cfs . getCompactionStrategyManager ( ) . getEstimatedRemainingTasks ( ) ; } return n + compactions . size ( ) ; } } ) ; completedTasks = Metrics . register ( factory . createMetricName ( <str> ) , new Gauge < Long > ( ) { public Long getValue ( ) { long completedTasks = <int> ; for ( ThreadPoolExecutor collector : collectors ) completedTasks + = collector . getCompletedTaskCount ( ) ; return completedTasks ; } } ) ; totalCompactionsCompleted = Metrics . meter ( factory . createMetricName ( <str> ) ) ; bytesCompacted = Metrics . counter ( factory . createMetricName ( <str> ) ) ; } public void beginCompaction ( CompactionInfo . Holder ci ) { ci . started ( ) ; compactions . add ( ci ) ; } public void finishCompaction ( CompactionInfo . Holder ci ) { ci . finished ( ) ; compactions . remove ( ci ) ; bytesCompacted . inc ( ci . getCompactionInfo ( ) . getTotal ( ) ) ; totalCompactionsCompleted . mark ( ) ; } public static List < CompactionInfo . Holder > getCompactions ( ) { return new ArrayList < CompactionInfo . Holder > ( compactions ) ; } } 

package org . gradle . api . publish . maven . tasks ; import org . gradle . api . DefaultTask ; import org . gradle . api . Incubating ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . publication . maven . internal . VersionRangeMapper ; import org . gradle . api . publish . maven . MavenPom ; import org . gradle . api . publish . maven . internal . dependencies . MavenDependencyInternal ; import org . gradle . api . publish . maven . internal . publication . MavenPomInternal ; import org . gradle . api . publish . maven . internal . tasks . MavenPomFileGenerator ; import org . gradle . api . specs . Specs ; import org . gradle . api . tasks . OutputFile ; import org . gradle . api . tasks . TaskAction ; import javax . inject . Inject ; import java . io . File ; @Incubating public class GenerateMavenPom extends DefaultTask { private MavenPom pom ; private Object destination ; public GenerateMavenPom ( ) { getOutputs ( ) . upToDateWhen ( Specs . satisfyNone ( ) ) ; } @Inject protected FileResolver getFileResolver ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected VersionRangeMapper getVersionRangeMapper ( ) { throw new UnsupportedOperationException ( ) ; } public MavenPom getPom ( ) { return pom ; } public void setPom ( MavenPom pom ) { this . pom = pom ; } @OutputFile public File getDestination ( ) { return destination = = null ? null : getFileResolver ( ) . resolve ( destination ) ; } public void setDestination ( Object destination ) { this . destination = destination ; } @TaskAction public void doGenerate ( ) { MavenPomInternal pomInternal = ( MavenPomInternal ) getPom ( ) ; MavenPomFileGenerator pomGenerator = new MavenPomFileGenerator ( pomInternal . getProjectIdentity ( ) , getVersionRangeMapper ( ) ) ; pomGenerator . setPackaging ( pomInternal . getPackaging ( ) ) ; for ( MavenDependencyInternal runtimeDependency : pomInternal . getRuntimeDependencies ( ) ) { pomGenerator . addRuntimeDependency ( runtimeDependency ) ; } pomGenerator . withXml ( pomInternal . getXmlAction ( ) ) ; pomGenerator . writeTo ( getDestination ( ) ) ; } } 

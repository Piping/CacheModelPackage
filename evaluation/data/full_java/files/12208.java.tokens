package org . gradle . logging . internal ; import org . gradle . api . Nullable ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . logging . StandardOutputListener ; import org . gradle . internal . TimeProvider ; import org . gradle . internal . io . TextStream ; import org . gradle . util . LinePerThreadBufferingOutputStream ; import java . io . PrintStream ; import java . util . concurrent . atomic . AtomicReference ; abstract class PrintStreamLoggingSystem implements LoggingSystem { private final AtomicReference < StandardOutputListener > destination = new AtomicReference < StandardOutputListener > ( ) ; private final PrintStream outstr = new LinePerThreadBufferingOutputStream ( new TextStream ( ) { public void text ( String output ) { destination . get ( ) . onOutput ( output ) ; } public void endOfStream ( @Nullable Throwable failure ) { } } ) ; private PrintStreamDestination original ; private LogLevel logLevel ; private final StandardOutputListener listener ; private final OutputEventListener outputEventListener ; protected PrintStreamLoggingSystem ( OutputEventListener listener , String category , TimeProvider timeProvider ) { outputEventListener = listener ; this . listener = new OutputEventDestination ( listener , category , timeProvider ) ; } protected abstract PrintStream get ( ) ; protected abstract void set ( PrintStream printStream ) ; public Snapshot snapshot ( ) { return new SnapshotImpl ( logLevel ) ; } public void restore ( Snapshot state ) { SnapshotImpl snapshot = ( SnapshotImpl ) state ; if ( snapshot . logLevel = = null ) { off ( ) ; } else { on ( snapshot . logLevel , snapshot . logLevel ) ; } } @Override public Snapshot on ( LogLevel minimumLevel , LogLevel defaultLevel ) { Snapshot snapshot = snapshot ( ) ; if ( original = = null ) { PrintStream originalStream = get ( ) ; original = new PrintStreamDestination ( originalStream ) ; } outstr . flush ( ) ; if ( get ( ) ! = outstr ) { set ( outstr ) ; } this . logLevel = defaultLevel ; outputEventListener . onOutput ( new LogLevelChangeEvent ( logLevel ) ) ; destination . set ( listener ) ; return snapshot ; } private Snapshot off ( ) { Snapshot snapshot = snapshot ( ) ; if ( original ! = null & & logLevel ! = null ) { outstr . flush ( ) ; destination . set ( original ) ; set ( original . originalStream ) ; logLevel = null ; } return snapshot ; } private static class PrintStreamDestination implements StandardOutputListener { private final PrintStream originalStream ; public PrintStreamDestination ( PrintStream originalStream ) { this . originalStream = originalStream ; } public void onOutput ( CharSequence output ) { originalStream . print ( output ) ; } } private static class SnapshotImpl implements Snapshot { private final LogLevel logLevel ; public SnapshotImpl ( LogLevel logLevel ) { this . logLevel = logLevel ; } } private static class OutputEventDestination implements StandardOutputListener { private final OutputEventListener listener ; private final String category ; private final TimeProvider timeProvider ; public OutputEventDestination ( OutputEventListener listener , String category , TimeProvider timeProvider ) { this . listener = listener ; this . category = category ; this . timeProvider = timeProvider ; } public void onOutput ( CharSequence output ) { listener . onOutput ( new StyledTextOutputEvent ( timeProvider . getCurrentTime ( ) , category , output . toString ( ) ) ) ; } } } 

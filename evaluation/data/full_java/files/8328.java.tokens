package org . elasticsearch . indices . cache . query ; import java . io . IOException ; import org . apache . lucene . document . Document ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexWriter ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . ConstantScoreScorer ; import org . apache . lucene . search . ConstantScoreWeight ; import org . apache . lucene . search . DocIdSetIterator ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . QueryCachingPolicy ; import org . apache . lucene . search . Scorer ; import org . apache . lucene . search . Weight ; import org . apache . lucene . store . Directory ; import org . apache . lucene . util . IOUtils ; import org . elasticsearch . common . lucene . index . ElasticsearchDirectoryReader ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . cache . query . QueryCacheStats ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . test . ESTestCase ; public class IndicesQueryCacheTests extends ESTestCase { private static class DummyQuery extends Query { private final int id ; DummyQuery ( int id ) { this . id = id ; } @Override public boolean equals ( Object obj ) { return super . equals ( obj ) & & id = = ( ( DummyQuery ) obj ) . id ; } @Override public int hashCode ( ) { return <int> * super . hashCode ( ) + id ; } @Override public String toString ( String field ) { return <str> ; } @Override public Weight createWeight ( IndexSearcher searcher , boolean needsScores ) throws IOException { return new ConstantScoreWeight ( this ) { @Override public Scorer scorer ( LeafReaderContext context ) throws IOException { return new ConstantScoreScorer ( this , score ( ) , DocIdSetIterator . all ( context . reader ( ) . maxDoc ( ) ) ) ; } } ; } } public void testBasics ( ) throws IOException { Directory dir = newDirectory ( ) ; IndexWriter w = new IndexWriter ( dir , newIndexWriterConfig ( ) ) ; w . addDocument ( new Document ( ) ) ; DirectoryReader r = DirectoryReader . open ( w , false ) ; w . close ( ) ; ShardId shard = new ShardId ( new Index ( <str> ) , <int> ) ; r = ElasticsearchDirectoryReader . wrap ( r , shard ) ; IndexSearcher s = new IndexSearcher ( r ) ; s . setQueryCachingPolicy ( QueryCachingPolicy . ALWAYS_CACHE ) ; Settings settings = Settings . builder ( ) . put ( IndicesQueryCache . INDICES_CACHE_QUERY_COUNT , <int> ) . build ( ) ; IndicesQueryCache cache = new IndicesQueryCache ( settings ) ; s . setQueryCache ( cache ) ; QueryCacheStats stats = cache . getStats ( shard ) ; assertEquals ( <int> L , stats . getCacheSize ( ) ) ; assertEquals ( <int> L , stats . getCacheCount ( ) ) ; assertEquals ( <int> L , stats . getHitCount ( ) ) ; assertEquals ( <int> L , stats . getMissCount ( ) ) ; assertEquals ( <int> , s . count ( new DummyQuery ( <int> ) ) ) ; stats = cache . getStats ( shard ) ; assertEquals ( <int> , stats . getCacheSize ( ) ) ; assertEquals ( <int> , stats . getCacheCount ( ) ) ; assertEquals ( <int> L , stats . getHitCount ( ) ) ; assertEquals ( <int> , stats . getMissCount ( ) ) ; for ( int i = <int> ; i < <int> ; + + i ) { assertEquals ( <int> , s . count ( new DummyQuery ( i ) ) ) ; } stats = cache . getStats ( shard ) ; assertEquals ( <int> , stats . getCacheSize ( ) ) ; assertEquals ( <int> , stats . getCacheCount ( ) ) ; assertEquals ( <int> L , stats . getHitCount ( ) ) ; assertEquals ( <int> , stats . getMissCount ( ) ) ; s . count ( new DummyQuery ( <int> ) ) ; stats = cache . getStats ( shard ) ; assertEquals ( <int> , stats . getCacheSize ( ) ) ; assertEquals ( <int> , stats . getCacheCount ( ) ) ; assertEquals ( <int> , stats . getHitCount ( ) ) ; assertEquals ( <int> , stats . getMissCount ( ) ) ; IOUtils . close ( r , dir ) ; stats = cache . getStats ( shard ) ; assertEquals ( <int> L , stats . getCacheSize ( ) ) ; assertEquals ( <int> , stats . getCacheCount ( ) ) ; assertEquals ( <int> , stats . getHitCount ( ) ) ; assertEquals ( <int> , stats . getMissCount ( ) ) ; cache . onClose ( shard ) ; stats = cache . getStats ( shard ) ; assertEquals ( <int> L , stats . getCacheSize ( ) ) ; assertEquals ( <int> L , stats . getCacheCount ( ) ) ; assertEquals ( <int> L , stats . getHitCount ( ) ) ; assertEquals ( <int> L , stats . getMissCount ( ) ) ; cache . close ( ) ; } public void testTwoShards ( ) throws IOException { Directory dir1 = newDirectory ( ) ; IndexWriter w1 = new IndexWriter ( dir1 , newIndexWriterConfig ( ) ) ; w1 . addDocument ( new Document ( ) ) ; DirectoryReader r1 = DirectoryReader . open ( w1 , false ) ; w1 . close ( ) ; ShardId shard1 = new ShardId ( new Index ( <str> ) , <int> ) ; r1 = ElasticsearchDirectoryReader . wrap ( r1 , shard1 ) ; IndexSearcher s1 = new IndexSearcher ( r1 ) ; s1 . setQueryCachingPolicy ( QueryCachingPolicy . ALWAYS_CACHE ) ; Directory dir2 = newDirectory ( ) ; IndexWriter w2 = new IndexWriter ( dir2 , newIndexWriterConfig ( ) ) ; w2 . addDocument ( new Document ( ) ) ; DirectoryReader r2 = DirectoryReader . open ( w2 , false ) ; w2 . close ( ) ; ShardId shard2 = new ShardId ( new Index ( <str> ) , <int> ) ; r2 = ElasticsearchDirectoryReader . wrap ( r2 , shard2 ) ; IndexSearcher s2 = new IndexSearcher ( r2 ) ; s2 . setQueryCachingPolicy ( QueryCachingPolicy . ALWAYS_CACHE ) ; Settings settings = Settings . builder ( ) . put ( IndicesQueryCache . INDICES_CACHE_QUERY_COUNT , <int> ) . build ( ) ; IndicesQueryCache cache = new IndicesQueryCache ( settings ) ; s1 . setQueryCache ( cache ) ; s2 . setQueryCache ( cache ) ; assertEquals ( <int> , s1 . count ( new DummyQuery ( <int> ) ) ) ; QueryCacheStats stats1 = cache . getStats ( shard1 ) ; assertEquals ( <int> , stats1 . getCacheSize ( ) ) ; assertEquals ( <int> , stats1 . getCacheCount ( ) ) ; assertEquals ( <int> L , stats1 . getHitCount ( ) ) ; assertEquals ( <int> , stats1 . getMissCount ( ) ) ; QueryCacheStats stats2 = cache . getStats ( shard2 ) ; assertEquals ( <int> L , stats2 . getCacheSize ( ) ) ; assertEquals ( <int> L , stats2 . getCacheCount ( ) ) ; assertEquals ( <int> L , stats2 . getHitCount ( ) ) ; assertEquals ( <int> L , stats2 . getMissCount ( ) ) ; assertEquals ( <int> , s2 . count ( new DummyQuery ( <int> ) ) ) ; stats1 = cache . getStats ( shard1 ) ; assertEquals ( <int> , stats1 . getCacheSize ( ) ) ; assertEquals ( <int> , stats1 . getCacheCount ( ) ) ; assertEquals ( <int> L , stats1 . getHitCount ( ) ) ; assertEquals ( <int> , stats1 . getMissCount ( ) ) ; stats2 = cache . getStats ( shard2 ) ; assertEquals ( <int> , stats2 . getCacheSize ( ) ) ; assertEquals ( <int> , stats2 . getCacheCount ( ) ) ; assertEquals ( <int> L , stats2 . getHitCount ( ) ) ; assertEquals ( <int> , stats2 . getMissCount ( ) ) ; for ( int i = <int> ; i < <int> ; + + i ) { assertEquals ( <int> , s2 . count ( new DummyQuery ( i ) ) ) ; } stats1 = cache . getStats ( shard1 ) ; assertEquals ( <int> L , stats1 . getCacheSize ( ) ) ; assertEquals ( <int> , stats1 . getCacheCount ( ) ) ; assertEquals ( <int> L , stats1 . getHitCount ( ) ) ; assertEquals ( <int> , stats1 . getMissCount ( ) ) ; stats2 = cache . getStats ( shard2 ) ; assertEquals ( <int> , stats2 . getCacheSize ( ) ) ; assertEquals ( <int> , stats2 . getCacheCount ( ) ) ; assertEquals ( <int> , stats2 . getHitCount ( ) ) ; assertEquals ( <int> , stats2 . getMissCount ( ) ) ; IOUtils . close ( r1 , dir1 ) ; stats1 = cache . getStats ( shard1 ) ; assertEquals ( <int> L , stats1 . getCacheSize ( ) ) ; assertEquals ( <int> , stats1 . getCacheCount ( ) ) ; assertEquals ( <int> L , stats1 . getHitCount ( ) ) ; assertEquals ( <int> , stats1 . getMissCount ( ) ) ; stats2 = cache . getStats ( shard2 ) ; assertEquals ( <int> , stats2 . getCacheSize ( ) ) ; assertEquals ( <int> , stats2 . getCacheCount ( ) ) ; assertEquals ( <int> , stats2 . getHitCount ( ) ) ; assertEquals ( <int> , stats2 . getMissCount ( ) ) ; cache . onClose ( shard1 ) ; stats1 = cache . getStats ( shard1 ) ; assertEquals ( <int> L , stats1 . getCacheSize ( ) ) ; assertEquals ( <int> L , stats1 . getCacheCount ( ) ) ; assertEquals ( <int> L , stats1 . getHitCount ( ) ) ; assertEquals ( <int> L , stats1 . getMissCount ( ) ) ; stats2 = cache . getStats ( shard2 ) ; assertEquals ( <int> , stats2 . getCacheSize ( ) ) ; assertEquals ( <int> , stats2 . getCacheCount ( ) ) ; assertEquals ( <int> , stats2 . getHitCount ( ) ) ; assertEquals ( <int> , stats2 . getMissCount ( ) ) ; IOUtils . close ( r2 , dir2 ) ; cache . onClose ( shard2 ) ; stats1 = cache . getStats ( shard1 ) ; assertEquals ( <int> L , stats1 . getCacheSize ( ) ) ; assertEquals ( <int> L , stats1 . getCacheCount ( ) ) ; assertEquals ( <int> L , stats1 . getHitCount ( ) ) ; assertEquals ( <int> L , stats1 . getMissCount ( ) ) ; stats2 = cache . getStats ( shard2 ) ; assertEquals ( <int> L , stats2 . getCacheSize ( ) ) ; assertEquals ( <int> L , stats2 . getCacheCount ( ) ) ; assertEquals ( <int> L , stats2 . getHitCount ( ) ) ; assertEquals ( <int> L , stats2 . getMissCount ( ) ) ; cache . close ( ) ; } public void testStatsOnEviction ( ) throws IOException { Directory dir1 = newDirectory ( ) ; IndexWriter w1 = new IndexWriter ( dir1 , newIndexWriterConfig ( ) ) ; w1 . addDocument ( new Document ( ) ) ; DirectoryReader r1 = DirectoryReader . open ( w1 , false ) ; w1 . close ( ) ; ShardId shard1 = new ShardId ( new Index ( <str> ) , <int> ) ; r1 = ElasticsearchDirectoryReader . wrap ( r1 , shard1 ) ; IndexSearcher s1 = new IndexSearcher ( r1 ) ; s1 . setQueryCachingPolicy ( QueryCachingPolicy . ALWAYS_CACHE ) ; Directory dir2 = newDirectory ( ) ; IndexWriter w2 = new IndexWriter ( dir2 , newIndexWriterConfig ( ) ) ; w2 . addDocument ( new Document ( ) ) ; DirectoryReader r2 = DirectoryReader . open ( w2 , false ) ; w2 . close ( ) ; ShardId shard2 = new ShardId ( new Index ( <str> ) , <int> ) ; r2 = ElasticsearchDirectoryReader . wrap ( r2 , shard2 ) ; IndexSearcher s2 = new IndexSearcher ( r2 ) ; s2 . setQueryCachingPolicy ( QueryCachingPolicy . ALWAYS_CACHE ) ; Settings settings = Settings . builder ( ) . put ( IndicesQueryCache . INDICES_CACHE_QUERY_COUNT , <int> ) . build ( ) ; IndicesQueryCache cache = new IndicesQueryCache ( settings ) ; s1 . setQueryCache ( cache ) ; s2 . setQueryCache ( cache ) ; assertEquals ( <int> , s1 . count ( new DummyQuery ( <int> ) ) ) ; for ( int i = <int> ; i < = <int> ; + + i ) { assertEquals ( <int> , s2 . count ( new DummyQuery ( i ) ) ) ; } QueryCacheStats stats1 = cache . getStats ( shard1 ) ; assertEquals ( <int> L , stats1 . getCacheSize ( ) ) ; assertEquals ( <int> , stats1 . getCacheCount ( ) ) ; IOUtils . close ( r1 , dir1 ) ; cache . onClose ( shard1 ) ; IOUtils . close ( r2 , dir2 ) ; cache . onClose ( shard2 ) ; cache . close ( ) ; } } 

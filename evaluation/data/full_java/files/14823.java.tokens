package org . gradle . jvm . internal ; import java . util . Arrays ; import java . util . List ; public class JvmPackageName { private static final List < String > JAVA_KEYWORDS = Arrays . asList ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; private static final List < String > BOOLEAN_AND_NULL_LITERALS = Arrays . asList ( <str> , <str> , <str> ) ; private static final String UNNAMED_PACKAGE = <str> ; private final String value ; private JvmPackageName ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static JvmPackageName of ( String value ) { if ( ! isValidPackageName ( value ) ) { throw new IllegalArgumentException ( String . format ( <str> , value ) ) ; } return new JvmPackageName ( value ) ; } private static boolean isValidPackageName ( String value ) { if ( UNNAMED_PACKAGE . equals ( value ) ) { return true ; } if ( value = = null | | value . startsWith ( <str> ) | | value . endsWith ( <str> ) ) { return false ; } for ( String token : value . split ( <str> ) ) { if ( ! isIdentifier ( token ) ) { return false ; } } return true ; } private static boolean isIdentifier ( String token ) { if ( token . isEmpty ( ) | | JAVA_KEYWORDS . contains ( token ) | | BOOLEAN_AND_NULL_LITERALS . contains ( token ) | | ! Character . isJavaIdentifierStart ( token . charAt ( <int> ) ) ) { return false ; } if ( token . length ( ) > <int> ) { for ( char c : token . substring ( <int> ) . toCharArray ( ) ) { if ( ! Character . isJavaIdentifierPart ( c ) ) { return false ; } } } return true ; } @Override public String toString ( ) { return value ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } JvmPackageName that = ( JvmPackageName ) o ; return value . equals ( that . value ) ; } @Override public int hashCode ( ) { return value . hashCode ( ) ; } } 

package org . gradle . api . internal . artifacts . configurations ; import org . gradle . api . artifacts . * ; import org . gradle . api . internal . tasks . AbstractTaskDependency ; import org . gradle . api . internal . tasks . TaskDependencyResolveContext ; import org . gradle . api . tasks . TaskDependency ; public class DirectBuildDependencies extends AbstractTaskDependency { private final DependencySet dependencies ; private final PublishArtifactSet publishArtifacts ; public static TaskDependency forDependenciesOnly ( Configuration configuration ) { return new DirectBuildDependencies ( configuration . getAllDependencies ( ) , null ) ; } public static TaskDependency forDependenciesAndArtifacts ( Configuration configuration ) { return new DirectBuildDependencies ( configuration . getAllDependencies ( ) , configuration . getAllArtifacts ( ) ) ; } private DirectBuildDependencies ( DependencySet dependencies , PublishArtifactSet artifacts ) { this . dependencies = dependencies ; this . publishArtifacts = artifacts ; } @Override public void visitDependencies ( TaskDependencyResolveContext context ) { for ( SelfResolvingDependency dependency : dependencies . withType ( SelfResolvingDependency . class ) ) { if ( ! ( dependency instanceof ProjectDependency ) ) { context . add ( dependency ) ; } } if ( publishArtifacts ! = null ) { context . add ( publishArtifacts ) ; } } } 

package org . apache . cassandra . cql3 ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import org . junit . Test ; import com . datastax . driver . core . Cluster ; import com . datastax . driver . core . PreparedStatement ; import com . datastax . driver . core . Session ; import com . datastax . driver . core . exceptions . SyntaxError ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . index . StubIndex ; import org . apache . cassandra . service . EmbeddedCassandraService ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . fail ; public class PreparedStatementsTest extends SchemaLoader { private static Cluster cluster ; private static Session session ; private static final String KEYSPACE = <str> ; private static final String createKsStatement = <str> + KEYSPACE + <str> ; private static final String dropKsStatement = <str> + KEYSPACE ; @BeforeClass public static void setup ( ) throws Exception { Schema . instance . clear ( ) ; EmbeddedCassandraService cassandra = new EmbeddedCassandraService ( ) ; cassandra . start ( ) ; Thread . sleep ( <int> ) ; cluster = Cluster . builder ( ) . addContactPoint ( <str> ) . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) . build ( ) ; session = cluster . connect ( ) ; session . execute ( dropKsStatement ) ; session . execute ( createKsStatement ) ; } @AfterClass public static void tearDown ( ) throws Exception { cluster . close ( ) ; } @Test public void testInvalidatePreparedStatementsOnDrop ( ) { String createTableStatement = <str> + KEYSPACE + <str> ; String dropTableStatement = <str> + KEYSPACE + <str> ; session . execute ( createTableStatement ) ; PreparedStatement prepared = session . prepare ( <str> + KEYSPACE + <str> ) ; PreparedStatement preparedBatch = session . prepare ( <str> + <str> + KEYSPACE + <str> + <str> ) ; session . execute ( dropTableStatement ) ; session . execute ( createTableStatement ) ; session . execute ( prepared . bind ( <int> , <int> , <str> ) ) ; session . execute ( preparedBatch . bind ( <int> , <int> , <str> ) ) ; session . execute ( dropKsStatement ) ; session . execute ( createKsStatement ) ; session . execute ( createTableStatement ) ; session . execute ( prepared . bind ( <int> , <int> , <str> ) ) ; session . execute ( preparedBatch . bind ( <int> , <int> , <str> ) ) ; session . execute ( dropKsStatement ) ; } @Test public void testStatementRePreparationOnReconnect ( ) { session . execute ( dropKsStatement ) ; session . execute ( createKsStatement ) ; session . execute ( <str> + KEYSPACE + <str> ) ; String insertCQL = <str> + KEYSPACE + <str> ; String selectCQL = <str> + KEYSPACE + <str> ; PreparedStatement preparedInsert = session . prepare ( insertCQL ) ; PreparedStatement preparedSelect = session . prepare ( selectCQL ) ; session . execute ( preparedInsert . bind ( <int> , <int> , <str> ) ) ; assertEquals ( <int> , session . execute ( preparedSelect . bind ( <int> ) ) . all ( ) . size ( ) ) ; cluster . close ( ) ; cluster = Cluster . builder ( ) . addContactPoint ( <str> ) . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) . build ( ) ; session = cluster . connect ( ) ; preparedInsert = session . prepare ( insertCQL ) ; preparedSelect = session . prepare ( selectCQL ) ; session . execute ( preparedInsert . bind ( <int> , <int> , <str> ) ) ; assertEquals ( <int> , session . execute ( preparedSelect . bind ( <int> ) ) . all ( ) . size ( ) ) ; } @Test public void prepareAndExecuteWithCustomExpressions ( ) throws Throwable { session . execute ( dropKsStatement ) ; session . execute ( createKsStatement ) ; String table = <str> ; String index = <str> ; session . execute ( String . format ( <str> , KEYSPACE , table ) ) ; session . execute ( String . format ( <str> , index , KEYSPACE , table , StubIndex . class . getName ( ) ) ) ; session . execute ( String . format ( <str> , KEYSPACE , table ) ) ; PreparedStatement prepared1 = session . prepare ( String . format ( <str> , KEYSPACE , table , index ) ) ; assertEquals ( <int> , session . execute ( prepared1 . bind ( ) ) . all ( ) . size ( ) ) ; PreparedStatement prepared2 = session . prepare ( String . format ( <str> , KEYSPACE , table , index ) ) ; assertEquals ( <int> , session . execute ( prepared2 . bind ( <str> ) ) . all ( ) . size ( ) ) ; try { session . prepare ( String . format ( <str> , KEYSPACE , table ) ) ; fail ( <str> ) ; } catch ( SyntaxError e ) { assertEquals ( <str> , e . getMessage ( ) ) ; } } } 

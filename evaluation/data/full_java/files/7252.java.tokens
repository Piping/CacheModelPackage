package org . elasticsearch . search . aggregations . bucket . significant . heuristics ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . search . aggregations . InternalAggregation ; import java . io . IOException ; public abstract class SignificanceHeuristic { public abstract double getScore ( long subsetFreq , long subsetSize , long supersetFreq , long supersetSize ) ; abstract public void writeTo ( StreamOutput out ) throws IOException ; protected void checkFrequencyValidity ( long subsetFreq , long subsetSize , long supersetFreq , long supersetSize , String scoreFunctionName ) { if ( subsetFreq < <int> | | subsetSize < <int> | | supersetFreq < <int> | | supersetSize < <int> ) { throw new IllegalArgumentException ( <str> + scoreFunctionName + <str> ) ; } if ( subsetFreq > subsetSize ) { throw new IllegalArgumentException ( <str> + scoreFunctionName ) ; } if ( supersetFreq > supersetSize ) { throw new IllegalArgumentException ( <str> + scoreFunctionName ) ; } } public void initialize ( InternalAggregation . ReduceContext reduceContext ) { } } 

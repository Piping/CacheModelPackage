package org . elasticsearch . transport ; import org . elasticsearch . Version ; import org . elasticsearch . cache . recycler . MockPageCacheRecycler ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . InetSocketTransportAddress ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . common . util . MockBigArrays ; import org . elasticsearch . indices . breaker . NoneCircuitBreakerService ; import org . elasticsearch . node . settings . NodeSettingsService ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . netty . NettyTransport ; import org . junit . After ; import org . junit . Before ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . net . InetAddress ; import java . net . Socket ; import java . nio . charset . StandardCharsets ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . is ; public class NettySizeHeaderFrameDecoderTests extends ESTestCase { private final Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; private ThreadPool threadPool ; private NettyTransport nettyTransport ; private int port ; private InetAddress host ; @Before public void startThreadPool ( ) { threadPool = new ThreadPool ( settings ) ; threadPool . setNodeSettingsService ( new NodeSettingsService ( settings ) ) ; NetworkService networkService = new NetworkService ( settings ) ; BigArrays bigArrays = new MockBigArrays ( new MockPageCacheRecycler ( settings , threadPool ) , new NoneCircuitBreakerService ( ) ) ; nettyTransport = new NettyTransport ( settings , threadPool , networkService , bigArrays , Version . CURRENT , new NamedWriteableRegistry ( ) ) ; nettyTransport . start ( ) ; TransportService transportService = new TransportService ( nettyTransport , threadPool ) ; nettyTransport . transportServiceAdapter ( transportService . createAdapter ( ) ) ; InetSocketTransportAddress transportAddress = ( InetSocketTransportAddress ) randomFrom ( nettyTransport . boundAddress ( ) . boundAddresses ( ) ) ; port = transportAddress . address ( ) . getPort ( ) ; host = transportAddress . address ( ) . getAddress ( ) ; } @After public void terminateThreadPool ( ) throws InterruptedException { nettyTransport . stop ( ) ; terminate ( threadPool ) ; } public void testThatTextMessageIsReturnedOnHTTPLikeRequest ( ) throws Exception { String randomMethod = randomFrom ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; String data = randomMethod + <str> ; try ( Socket socket = new Socket ( host , port ) ) { socket . getOutputStream ( ) . write ( data . getBytes ( StandardCharsets . UTF_8 ) ) ; socket . getOutputStream ( ) . flush ( ) ; try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( socket . getInputStream ( ) , StandardCharsets . UTF_8 ) ) ) { assertThat ( reader . readLine ( ) , is ( <str> ) ) ; } } } public void testThatNothingIsReturnedForOtherInvalidPackets ( ) throws Exception { try ( Socket socket = new Socket ( host , port ) ) { socket . getOutputStream ( ) . write ( <str> . getBytes ( StandardCharsets . UTF_8 ) ) ; socket . getOutputStream ( ) . flush ( ) ; assertThat ( socket . getInputStream ( ) . read ( ) , is ( - <int> ) ) ; } } } 

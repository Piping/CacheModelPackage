package java . net ; import java . io . UnsupportedEncodingException ; public class URLEncoder { static final String digits = <str> ; private URLEncoder ( ) { } @Deprecated public static String encode ( String s ) { StringBuilder buf = new StringBuilder ( s . length ( ) + <int> ) ; for ( int i = <int> ; i < s . length ( ) ; i + + ) { char ch = s . charAt ( i ) ; if ( ( ch > = <str> & & ch < = <str> ) | | ( ch > = <str> & & ch < = <str> ) | | ( ch > = <str> & & ch < = <str> ) | | <str> . indexOf ( ch ) > - <int> ) { buf . append ( ch ) ; } else if ( ch = = <str> ) { buf . append ( <str> ) ; } else { byte [ ] bytes = new String ( new char [ ] { ch } ) . getBytes ( ) ; for ( int j = <int> ; j < bytes . length ; j + + ) { buf . append ( <str> ) ; buf . append ( digits . charAt ( ( bytes [ j ] & <hex> ) > > <int> ) ) ; buf . append ( digits . charAt ( bytes [ j ] & <hex> ) ) ; } } } return buf . toString ( ) ; } public static String encode ( String s , String enc ) throws UnsupportedEncodingException { if ( s = = null | | enc = = null ) { throw new NullPointerException ( ) ; } <str> . getBytes ( enc ) ; StringBuilder buf = new StringBuilder ( s . length ( ) + <int> ) ; int start = - <int> ; for ( int i = <int> ; i < s . length ( ) ; i + + ) { char ch = s . charAt ( i ) ; if ( ( ch > = <str> & & ch < = <str> ) | | ( ch > = <str> & & ch < = <str> ) | | ( ch > = <str> & & ch < = <str> ) | | <str> . indexOf ( ch ) > - <int> ) { if ( start > = <int> ) { convert ( s . substring ( start , i ) , buf , enc ) ; start = - <int> ; } if ( ch ! = <str> ) { buf . append ( ch ) ; } else { buf . append ( <str> ) ; } } else { if ( start < <int> ) { start = i ; } } } if ( start > = <int> ) { convert ( s . substring ( start , s . length ( ) ) , buf , enc ) ; } return buf . toString ( ) ; } private static void convert ( String s , StringBuilder buf , String enc ) throws UnsupportedEncodingException { byte [ ] bytes = s . getBytes ( enc ) ; for ( int j = <int> ; j < bytes . length ; j + + ) { buf . append ( <str> ) ; buf . append ( digits . charAt ( ( bytes [ j ] & <hex> ) > > <int> ) ) ; buf . append ( digits . charAt ( bytes [ j ] & <hex> ) ) ; } } } 

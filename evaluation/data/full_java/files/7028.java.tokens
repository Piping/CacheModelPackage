package org . elasticsearch . rest . action . cat ; import com . carrotsearch . hppc . cursors . ObjectObjectCursor ; import org . elasticsearch . action . admin . cluster . node . info . NodeInfo ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoRequest ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsRequest ; import org . elasticsearch . action . admin . cluster . node . stats . NodesStatsResponse ; import org . elasticsearch . action . admin . cluster . state . ClusterStateRequest ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . InetSocketTransportAddress ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . RestResponse ; import org . elasticsearch . rest . action . support . RestActionListener ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestNodeAttrsAction extends AbstractCatAction { @Inject public RestNodeAttrsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; } @Override public void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final ClusterStateRequest clusterStateRequest = new ClusterStateRequest ( ) ; clusterStateRequest . clear ( ) . nodes ( true ) ; clusterStateRequest . local ( request . paramAsBoolean ( <str> , clusterStateRequest . local ( ) ) ) ; clusterStateRequest . masterNodeTimeout ( request . paramAsTime ( <str> , clusterStateRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . cluster ( ) . state ( clusterStateRequest , new RestActionListener < ClusterStateResponse > ( channel ) { @Override public void processResponse ( final ClusterStateResponse clusterStateResponse ) { NodesInfoRequest nodesInfoRequest = new NodesInfoRequest ( ) ; nodesInfoRequest . clear ( ) . jvm ( false ) . os ( false ) . process ( true ) ; client . admin ( ) . cluster ( ) . nodesInfo ( nodesInfoRequest , new RestActionListener < NodesInfoResponse > ( channel ) { @Override public void processResponse ( final NodesInfoResponse nodesInfoResponse ) { NodesStatsRequest nodesStatsRequest = new NodesStatsRequest ( ) ; nodesStatsRequest . clear ( ) . jvm ( false ) . os ( false ) . fs ( false ) . indices ( false ) . process ( false ) ; client . admin ( ) . cluster ( ) . nodesStats ( nodesStatsRequest , new RestResponseListener < NodesStatsResponse > ( channel ) { @Override public RestResponse buildResponse ( NodesStatsResponse nodesStatsResponse ) throws Exception { return RestTable . buildResponse ( buildTable ( request , clusterStateResponse , nodesInfoResponse , nodesStatsResponse ) , channel ) ; } } ) ; } } ) ; } } ) ; } @Override protected Table getTableWithHeader ( final RestRequest request ) { Table table = new Table ( ) ; table . startHeaders ( ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . endHeaders ( ) ; return table ; } private Table buildTable ( RestRequest req , ClusterStateResponse state , NodesInfoResponse nodesInfo , NodesStatsResponse nodesStats ) { boolean fullId = req . paramAsBoolean ( <str> , false ) ; DiscoveryNodes nodes = state . getState ( ) . nodes ( ) ; Table table = getTableWithHeader ( req ) ; for ( DiscoveryNode node : nodes ) { NodeInfo info = nodesInfo . getNodesMap ( ) . get ( node . id ( ) ) ; for ( ObjectObjectCursor < String , String > att : node . attributes ( ) ) { table . startRow ( ) ; table . addCell ( node . name ( ) ) ; table . addCell ( fullId ? node . id ( ) : Strings . substring ( node . getId ( ) , <int> , <int> ) ) ; table . addCell ( info = = null ? null : info . getProcess ( ) . getId ( ) ) ; table . addCell ( node . getHostName ( ) ) ; table . addCell ( node . getHostAddress ( ) ) ; if ( node . address ( ) instanceof InetSocketTransportAddress ) { table . addCell ( ( ( InetSocketTransportAddress ) node . address ( ) ) . address ( ) . getPort ( ) ) ; } else { table . addCell ( <str> ) ; } table . addCell ( att . key ) ; table . addCell ( att . value ) ; table . endRow ( ) ; } } return table ; } } 

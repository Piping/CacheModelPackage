package org . elasticsearch . action . admin . cluster . repositories . verify ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . repositories . RepositoriesService ; import org . elasticsearch . repositories . RepositoryVerificationException ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportVerifyRepositoryAction extends TransportMasterNodeAction < VerifyRepositoryRequest , VerifyRepositoryResponse > { private final RepositoriesService repositoriesService ; protected final ClusterName clusterName ; @Inject public TransportVerifyRepositoryAction ( Settings settings , ClusterName clusterName , TransportService transportService , ClusterService clusterService , RepositoriesService repositoriesService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , VerifyRepositoryAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , VerifyRepositoryRequest : : new ) ; this . repositoriesService = repositoriesService ; this . clusterName = clusterName ; } @Override protected String executor ( ) { return ThreadPool . Names . MANAGEMENT ; } @Override protected VerifyRepositoryResponse newResponse ( ) { return new VerifyRepositoryResponse ( ) ; } @Override protected ClusterBlockException checkBlock ( VerifyRepositoryRequest request , ClusterState state ) { return state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . METADATA_READ ) ; } @Override protected void masterOperation ( final VerifyRepositoryRequest request , ClusterState state , final ActionListener < VerifyRepositoryResponse > listener ) { repositoriesService . verifyRepository ( request . name ( ) , new ActionListener < RepositoriesService . VerifyResponse > ( ) { @Override public void onResponse ( RepositoriesService . VerifyResponse verifyResponse ) { if ( verifyResponse . failed ( ) ) { listener . onFailure ( new RepositoryVerificationException ( request . name ( ) , verifyResponse . failureDescription ( ) ) ) ; } else { listener . onResponse ( new VerifyRepositoryResponse ( clusterName , verifyResponse . nodes ( ) ) ) ; } } @Override public void onFailure ( Throwable e ) { listener . onFailure ( e ) ; } } ) ; } } 

package io . netty . example . http2 . helloworld . server ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufUtil ; import io . netty . channel . ChannelHandlerContext ; import io . netty . handler . codec . http . HttpServerUpgradeHandler ; import io . netty . handler . codec . http2 . DefaultHttp2Headers ; import io . netty . handler . codec . http2 . Http2ConnectionDecoder ; import io . netty . handler . codec . http2 . Http2ConnectionEncoder ; import io . netty . handler . codec . http2 . Http2ConnectionHandler ; import io . netty . handler . codec . http2 . Http2Exception ; import io . netty . handler . codec . http2 . Http2Flags ; import io . netty . handler . codec . http2 . Http2FrameListener ; import io . netty . handler . codec . http2 . Http2FrameLogger ; import io . netty . handler . codec . http2 . Http2Headers ; import io . netty . handler . codec . http2 . Http2Settings ; import io . netty . util . AsciiString ; import io . netty . util . CharsetUtil ; import static io . netty . buffer . Unpooled . copiedBuffer ; import static io . netty . buffer . Unpooled . unreleasableBuffer ; import static io . netty . example . http2 . Http2ExampleUtil . UPGRADE_RESPONSE_HEADER ; import static io . netty . handler . codec . http . HttpResponseStatus . OK ; import static io . netty . handler . logging . LogLevel . INFO ; public final class HelloWorldHttp2Handler extends Http2ConnectionHandler implements Http2FrameListener { private static final Http2FrameLogger logger = new Http2FrameLogger ( INFO , HelloWorldHttp2Handler . class ) ; static final ByteBuf RESPONSE_BYTES = unreleasableBuffer ( copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; public static final class Builder extends BuilderBase < HelloWorldHttp2Handler , Builder > { public Builder ( ) { frameLogger ( logger ) ; } @Override public HelloWorldHttp2Handler build0 ( Http2ConnectionDecoder decoder , Http2ConnectionEncoder encoder ) { HelloWorldHttp2Handler handler = new HelloWorldHttp2Handler ( decoder , encoder , initialSettings ( ) ) ; frameListener ( handler ) ; return handler ; } } private HelloWorldHttp2Handler ( Http2ConnectionDecoder decoder , Http2ConnectionEncoder encoder , Http2Settings initialSettings ) { super ( decoder , encoder , initialSettings ) ; } @Override public void userEventTriggered ( ChannelHandlerContext ctx , Object evt ) throws Exception { if ( evt instanceof HttpServerUpgradeHandler . UpgradeEvent ) { Http2Headers headers = new DefaultHttp2Headers ( ) . status ( OK . codeAsText ( ) ) . set ( new AsciiString ( UPGRADE_RESPONSE_HEADER ) , new AsciiString ( <str> ) ) ; encoder ( ) . writeHeaders ( ctx , <int> , headers , <int> , true , ctx . newPromise ( ) ) ; } super . userEventTriggered ( ctx , evt ) ; } @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { super . exceptionCaught ( ctx , cause ) ; cause . printStackTrace ( ) ; ctx . close ( ) ; } private void sendResponse ( ChannelHandlerContext ctx , int streamId , ByteBuf payload ) { Http2Headers headers = new DefaultHttp2Headers ( ) . status ( OK . codeAsText ( ) ) ; encoder ( ) . writeHeaders ( ctx , streamId , headers , <int> , false , ctx . newPromise ( ) ) ; encoder ( ) . writeData ( ctx , streamId , payload , <int> , true , ctx . newPromise ( ) ) ; ctx . flush ( ) ; } @Override public int onDataRead ( ChannelHandlerContext ctx , int streamId , ByteBuf data , int padding , boolean endOfStream ) throws Http2Exception { int processed = data . readableBytes ( ) + padding ; if ( endOfStream ) { sendResponse ( ctx , streamId , data . retain ( ) ) ; } return processed ; } @Override public void onHeadersRead ( ChannelHandlerContext ctx , int streamId , Http2Headers headers , int padding , boolean endOfStream ) throws Http2Exception { if ( endOfStream ) { ByteBuf content = ctx . alloc ( ) . buffer ( ) ; content . writeBytes ( HelloWorldHttp2Handler . RESPONSE_BYTES . duplicate ( ) ) ; ByteBufUtil . writeAscii ( content , <str> ) ; sendResponse ( ctx , streamId , content ) ; } } @Override public void onHeadersRead ( ChannelHandlerContext ctx , int streamId , Http2Headers headers , int streamDependency , short weight , boolean exclusive , int padding , boolean endOfStream ) throws Http2Exception { onHeadersRead ( ctx , streamId , headers , padding , endOfStream ) ; } @Override public void onPriorityRead ( ChannelHandlerContext ctx , int streamId , int streamDependency , short weight , boolean exclusive ) throws Http2Exception { } @Override public void onRstStreamRead ( ChannelHandlerContext ctx , int streamId , long errorCode ) throws Http2Exception { } @Override public void onSettingsAckRead ( ChannelHandlerContext ctx ) throws Http2Exception { } @Override public void onSettingsRead ( ChannelHandlerContext ctx , Http2Settings settings ) throws Http2Exception { } @Override public void onPingRead ( ChannelHandlerContext ctx , ByteBuf data ) throws Http2Exception { } @Override public void onPingAckRead ( ChannelHandlerContext ctx , ByteBuf data ) throws Http2Exception { } @Override public void onPushPromiseRead ( ChannelHandlerContext ctx , int streamId , int promisedStreamId , Http2Headers headers , int padding ) throws Http2Exception { } @Override public void onGoAwayRead ( ChannelHandlerContext ctx , int lastStreamId , long errorCode , ByteBuf debugData ) throws Http2Exception { } @Override public void onWindowUpdateRead ( ChannelHandlerContext ctx , int streamId , int windowSizeIncrement ) throws Http2Exception { } @Override public void onUnknownFrame ( ChannelHandlerContext ctx , byte frameType , int streamId , Http2Flags flags , ByteBuf payload ) throws Http2Exception { } } 

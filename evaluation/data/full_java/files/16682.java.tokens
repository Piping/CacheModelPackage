package org . junit . tests . running . classes ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import org . junit . Test ; import org . junit . runner . Description ; import org . junit . runner . JUnitCore ; import org . junit . runner . RunWith ; import org . junit . runner . Runner ; import org . junit . runner . notification . RunNotifier ; public class RunWithTest { private static String log ; public static class ExampleRunner extends Runner { public ExampleRunner ( Class < ? > klass ) { log + = <str> ; } @Override public void run ( RunNotifier notifier ) { log + = <str> ; } @Override public int testCount ( ) { log + = <str> ; return <int> ; } @Override public Description getDescription ( ) { log + = <str> ; return Description . createSuiteDescription ( <str> ) ; } } @RunWith ( ExampleRunner . class ) public static class ExampleTest { } @Test public void run ( ) { log = <str> ; JUnitCore . runClasses ( ExampleTest . class ) ; assertTrue ( log . contains ( <str> ) ) ; assertTrue ( log . contains ( <str> ) ) ; assertTrue ( log . contains ( <str> ) ) ; } public static class SubExampleTest extends ExampleTest { } @Test public void runWithExtendsToSubclasses ( ) { log = <str> ; JUnitCore . runClasses ( SubExampleTest . class ) ; assertTrue ( log . contains ( <str> ) ) ; } public static class BadRunner extends Runner { @Override public Description getDescription ( ) { return null ; } @Override public void run ( RunNotifier notifier ) { } } @RunWith ( BadRunner . class ) public static class Empty { } @Test public void characterizeErrorMessageFromBadRunner ( ) { assertEquals ( <str> , JUnitCore . runClasses ( Empty . class ) . getFailures ( ) . get ( <int> ) . getMessage ( ) ) ; } } 

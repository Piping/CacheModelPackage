package org . elasticsearch . rest . action . percolate ; import org . elasticsearch . action . get . GetRequest ; import org . elasticsearch . action . percolate . PercolateRequest ; import org . elasticsearch . action . percolate . PercolateResponse ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestToXContentListener ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestRequest . Method . POST ; public class RestPercolateAction extends BaseRestHandler { @Inject public RestPercolateAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; RestPercolateExistingDocHandler existingDocHandler = new RestPercolateExistingDocHandler ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , existingDocHandler ) ; controller . registerHandler ( POST , <str> , existingDocHandler ) ; RestCountPercolateDocHandler countHandler = new RestCountPercolateDocHandler ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , countHandler ) ; controller . registerHandler ( POST , <str> , countHandler ) ; RestCountPercolateExistingDocHandler countExistingDocHandler = new RestCountPercolateExistingDocHandler ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , countExistingDocHandler ) ; controller . registerHandler ( POST , <str> , countExistingDocHandler ) ; } void parseDocPercolate ( PercolateRequest percolateRequest , RestRequest restRequest , RestChannel restChannel , final Client client ) { percolateRequest . indices ( Strings . splitStringByCommaToArray ( restRequest . param ( <str> ) ) ) ; percolateRequest . documentType ( restRequest . param ( <str> ) ) ; percolateRequest . routing ( restRequest . param ( <str> ) ) ; percolateRequest . preference ( restRequest . param ( <str> ) ) ; percolateRequest . source ( RestActions . getRestContent ( restRequest ) ) ; percolateRequest . indicesOptions ( IndicesOptions . fromRequest ( restRequest , percolateRequest . indicesOptions ( ) ) ) ; executePercolate ( percolateRequest , restChannel , client ) ; } void parseExistingDocPercolate ( PercolateRequest percolateRequest , RestRequest restRequest , RestChannel restChannel , final Client client ) { String index = restRequest . param ( <str> ) ; String type = restRequest . param ( <str> ) ; percolateRequest . indices ( Strings . splitStringByCommaToArray ( restRequest . param ( <str> , index ) ) ) ; percolateRequest . documentType ( restRequest . param ( <str> , type ) ) ; GetRequest getRequest = new GetRequest ( index , type , restRequest . param ( <str> ) ) ; getRequest . routing ( restRequest . param ( <str> ) ) ; getRequest . preference ( restRequest . param ( <str> ) ) ; getRequest . refresh ( restRequest . paramAsBoolean ( <str> , getRequest . refresh ( ) ) ) ; getRequest . realtime ( restRequest . paramAsBoolean ( <str> , null ) ) ; getRequest . version ( RestActions . parseVersion ( restRequest ) ) ; getRequest . versionType ( VersionType . fromString ( restRequest . param ( <str> ) , getRequest . versionType ( ) ) ) ; percolateRequest . getRequest ( getRequest ) ; percolateRequest . routing ( restRequest . param ( <str> ) ) ; percolateRequest . preference ( restRequest . param ( <str> ) ) ; percolateRequest . source ( RestActions . getRestContent ( restRequest ) ) ; percolateRequest . indicesOptions ( IndicesOptions . fromRequest ( restRequest , percolateRequest . indicesOptions ( ) ) ) ; executePercolate ( percolateRequest , restChannel , client ) ; } void executePercolate ( final PercolateRequest percolateRequest , final RestChannel restChannel , final Client client ) { client . percolate ( percolateRequest , new RestToXContentListener < PercolateResponse > ( restChannel ) ) ; } @Override public void handleRequest ( RestRequest restRequest , RestChannel restChannel , final Client client ) { PercolateRequest percolateRequest = new PercolateRequest ( ) ; parseDocPercolate ( percolateRequest , restRequest , restChannel , client ) ; } final class RestCountPercolateDocHandler extends BaseRestHandler { private RestCountPercolateDocHandler ( Settings settings , final RestController controller , Client client ) { super ( settings , controller , client ) ; } @Override public void handleRequest ( RestRequest restRequest , RestChannel restChannel , final Client client ) { PercolateRequest percolateRequest = new PercolateRequest ( ) ; percolateRequest . onlyCount ( true ) ; parseDocPercolate ( percolateRequest , restRequest , restChannel , client ) ; } } final class RestPercolateExistingDocHandler extends BaseRestHandler { protected RestPercolateExistingDocHandler ( Settings settings , final RestController controller , Client client ) { super ( settings , controller , client ) ; } @Override public void handleRequest ( RestRequest restRequest , RestChannel restChannel , final Client client ) { PercolateRequest percolateRequest = new PercolateRequest ( ) ; parseExistingDocPercolate ( percolateRequest , restRequest , restChannel , client ) ; } } final class RestCountPercolateExistingDocHandler extends BaseRestHandler { protected RestCountPercolateExistingDocHandler ( Settings settings , final RestController controller , Client client ) { super ( settings , controller , client ) ; } @Override public void handleRequest ( RestRequest restRequest , RestChannel restChannel , final Client client ) { PercolateRequest percolateRequest = new PercolateRequest ( ) ; percolateRequest . onlyCount ( true ) ; parseExistingDocPercolate ( percolateRequest , restRequest , restChannel , client ) ; } } } 

package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . Script . ScriptField ; import org . elasticsearch . script . ScriptParameterParser ; import org . elasticsearch . script . ScriptParameterParser . ScriptParameterValue ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class ScriptQueryParser implements QueryParser < ScriptQueryBuilder > { public static final ParseField PARAMS_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { ScriptQueryBuilder . NAME } ; } @Override public ScriptQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; ScriptParameterParser scriptParameterParser = new ScriptParameterParser ( ) ; Script script = null ; Map < String , Object > params = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String queryName = null ; XContentParser . Token token ; String currentFieldName = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( parseContext . isDeprecatedSetting ( currentFieldName ) ) { } else if ( token = = XContentParser . Token . START_OBJECT ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , ScriptField . SCRIPT ) ) { script = Script . parse ( parser , parseContext . parseFieldMatcher ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , PARAMS_FIELD ) ) { params = parser . map ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( ! scriptParameterParser . token ( currentFieldName , token , parser , parseContext . parseFieldMatcher ( ) ) ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } if ( script = = null ) { ScriptParameterValue scriptValue = scriptParameterParser . getDefaultScriptParameterValue ( ) ; if ( scriptValue ! = null ) { if ( params = = null ) { params = new HashMap < > ( ) ; } script = new Script ( scriptValue . script ( ) , scriptValue . scriptType ( ) , scriptParameterParser . lang ( ) , params ) ; } } else if ( params ! = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } if ( script = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } return new ScriptQueryBuilder ( script ) . boost ( boost ) . queryName ( queryName ) ; } @Override public ScriptQueryBuilder getBuilderPrototype ( ) { return ScriptQueryBuilder . PROTOTYPE ; } } 

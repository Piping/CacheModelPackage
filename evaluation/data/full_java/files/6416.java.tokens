package org . elasticsearch . index . engine ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . SearcherManager ; import org . apache . lucene . store . AlreadyClosedException ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . index . store . Store ; import java . io . IOException ; import java . util . concurrent . atomic . AtomicBoolean ; public class EngineSearcher extends Engine . Searcher { private final SearcherManager manager ; private final AtomicBoolean released = new AtomicBoolean ( false ) ; private final Store store ; private final ESLogger logger ; public EngineSearcher ( String source , IndexSearcher searcher , SearcherManager manager , Store store , ESLogger logger ) { super ( source , searcher ) ; this . manager = manager ; this . store = store ; this . logger = logger ; } @Override public void close ( ) { if ( ! released . compareAndSet ( false , true ) ) { logger . warn ( <str> , new IllegalStateException ( <str> ) ) ; return ; } try { manager . release ( this . searcher ( ) ) ; } catch ( IOException e ) { throw new IllegalStateException ( <str> , e ) ; } catch ( AlreadyClosedException e ) { } finally { store . decRef ( ) ; } } } 

package org . gradle . plugins . javascript . jshint . internal ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorker ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorkerUtils ; import org . mozilla . javascript . Context ; import org . mozilla . javascript . RhinoException ; import org . mozilla . javascript . Scriptable ; import java . io . File ; import java . util . LinkedHashMap ; import java . util . Map ; import static org . gradle . plugins . javascript . rhino . worker . RhinoWorkerUtils . * ; public class JsHintWorker implements RhinoWorker < JsHintResult , JsHintSpec > { private static final Logger LOGGER = Logging . getLogger ( JsHintWorker . class ) ; public JsHintResult process ( JsHintSpec spec ) { Scriptable jsHintScope = RhinoWorkerUtils . parse ( spec . getJsHint ( ) , <str> ) ; String encoding = spec . getEncoding ( ) ; Map < File , Map < String , Object > > results = new LinkedHashMap < File , Map < String , Object > > ( ) ; for ( File target : spec . getSource ( ) ) { LOGGER . info ( <str> , target . getAbsolutePath ( ) ) ; String source = readFile ( target , encoding ) ; Map < String , Object > result = jsHint ( jsHintScope , source , target . getName ( ) ) ; results . put ( target , result ) ; } return new JsHintResult ( results ) ; } private Map < String , Object > jsHint ( Scriptable jsHintScope , final String source , final String sourceName ) { return childScope ( jsHintScope , new DefaultScopeOperation < Map < String , Object > > ( ) { public Map < String , Object > action ( Scriptable scope , Context context ) { scope . put ( <str> , scope , source ) ; Object data = context . evaluateString ( scope , <str> , sourceName , <int> , null ) ; return toMap ( ( Scriptable ) data ) ; } } ) ; } public Exception convertException ( RhinoException rhinoException ) { return rhinoException ; } } 

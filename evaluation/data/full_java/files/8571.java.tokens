package org . elasticsearch . transport . netty ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . action . admin . cluster . node . info . NodeInfo ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . client . transport . TransportClient ; import org . elasticsearch . common . network . NetworkAddress ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . transport . InetSocketTransportAddress ; import org . elasticsearch . common . transport . TransportAddress ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . junit . annotations . Network ; import org . elasticsearch . transport . TransportModule ; import java . net . InetAddress ; import java . util . Locale ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . allOf ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . hasKey ; import static org . hamcrest . Matchers . hasSize ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> , numClientNodes = <int> ) public class NettyTransportMultiPortIntegrationIT extends ESIntegTestCase { private static int randomPort = - <int> ; private static String randomPortRange ; @Override protected Settings nodeSettings ( int nodeOrdinal ) { if ( randomPort = = - <int> ) { randomPort = randomIntBetween ( <int> , <int> ) ; randomPortRange = String . format ( Locale . ROOT , <str> , randomPort , randomPort + <int> ) ; } Settings . Builder builder = settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , <str> ) . put ( TransportModule . TRANSPORT_TYPE_KEY , <str> ) . put ( <str> , <str> ) . put ( <str> , randomPortRange ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , true ) ; return builder . build ( ) ; } public void testThatTransportClientCanConnect ( ) throws Exception { Settings settings = settingsBuilder ( ) . put ( <str> , internalCluster ( ) . getClusterName ( ) ) . put ( TransportModule . TRANSPORT_TYPE_KEY , <str> ) . put ( <str> , createTempDir ( ) . toString ( ) ) . build ( ) ; try ( TransportClient transportClient = TransportClient . builder ( ) . settings ( settings ) . build ( ) ) { transportClient . addTransportAddress ( new InetSocketTransportAddress ( InetAddress . getByName ( <str> ) , randomPort ) ) ; ClusterHealthResponse response = transportClient . admin ( ) . cluster ( ) . prepareHealth ( ) . get ( ) ; assertThat ( response . getStatus ( ) , is ( ClusterHealthStatus . GREEN ) ) ; } } @Network public void testThatInfosAreExposed ( ) throws Exception { NodesInfoResponse response = client ( ) . admin ( ) . cluster ( ) . prepareNodesInfo ( ) . clear ( ) . setTransport ( true ) . get ( ) ; for ( NodeInfo nodeInfo : response . getNodes ( ) ) { assertThat ( nodeInfo . getTransport ( ) . getProfileAddresses ( ) . keySet ( ) , hasSize ( <int> ) ) ; assertThat ( nodeInfo . getTransport ( ) . getProfileAddresses ( ) , hasKey ( <str> ) ) ; for ( TransportAddress transportAddress : nodeInfo . getTransport ( ) . getProfileAddresses ( ) . get ( <str> ) . boundAddresses ( ) ) { assertThat ( transportAddress , instanceOf ( InetSocketTransportAddress . class ) ) ; } for ( TransportAddress transportAddress : nodeInfo . getTransport ( ) . getProfileAddresses ( ) . get ( <str> ) . boundAddresses ( ) ) { assertThat ( transportAddress , instanceOf ( InetSocketTransportAddress . class ) ) ; assertThat ( ( ( InetSocketTransportAddress ) transportAddress ) . address ( ) . getPort ( ) , is ( allOf ( greaterThanOrEqualTo ( randomPort ) , lessThanOrEqualTo ( randomPort + <int> ) ) ) ) ; } assertThat ( nodeInfo . getTransport ( ) . getProfileAddresses ( ) . get ( <str> ) . publishAddress ( ) , instanceOf ( InetSocketTransportAddress . class ) ) ; InetSocketTransportAddress publishAddress = ( InetSocketTransportAddress ) nodeInfo . getTransport ( ) . getProfileAddresses ( ) . get ( <str> ) . publishAddress ( ) ; assertThat ( NetworkAddress . formatAddress ( publishAddress . address ( ) . getAddress ( ) ) , is ( <str> ) ) ; assertThat ( publishAddress . address ( ) . getPort ( ) , is ( <int> ) ) ; } } } 

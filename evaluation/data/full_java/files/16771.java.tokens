package com . badlogic . gdx . backends . jglfw ; class Sync { private static final long NANOS_IN_SECOND = <int> * <int> * <int> ; private static long nextFrame = <int> ; private static boolean initialised = false ; private static RunningAvg sleepDurations = new RunningAvg ( <int> ) ; private static RunningAvg yieldDurations = new RunningAvg ( <int> ) ; public static void sync ( int fps ) { if ( fps < = <int> ) return ; if ( ! initialised ) initialise ( ) ; try { for ( long t0 = System . nanoTime ( ) , t1 ; ( nextFrame - t0 ) > sleepDurations . avg ( ) ; t0 = t1 ) { Thread . sleep ( <int> ) ; sleepDurations . add ( ( t1 = System . nanoTime ( ) ) - t0 ) ; } sleepDurations . dampenForLowResTicker ( ) ; for ( long t0 = System . nanoTime ( ) , t1 ; ( nextFrame - t0 ) > yieldDurations . avg ( ) ; t0 = t1 ) { Thread . yield ( ) ; yieldDurations . add ( ( t1 = System . nanoTime ( ) ) - t0 ) ; } } catch ( InterruptedException e ) { } nextFrame = Math . max ( nextFrame + NANOS_IN_SECOND / fps , System . nanoTime ( ) ) ; } private static void initialise ( ) { initialised = true ; sleepDurations . init ( <int> * <int> ) ; yieldDurations . init ( ( int ) ( - ( System . nanoTime ( ) - System . nanoTime ( ) ) * <float> ) ) ; nextFrame = System . nanoTime ( ) ; String osName = System . getProperty ( <str> ) ; if ( osName . startsWith ( <str> ) ) { Thread timerAccuracyThread = new Thread ( new Runnable ( ) { public void run ( ) { try { Thread . sleep ( Long . MAX_VALUE ) ; } catch ( Exception e ) { } } } ) ; timerAccuracyThread . setName ( <str> ) ; timerAccuracyThread . setDaemon ( true ) ; timerAccuracyThread . start ( ) ; } } private static class RunningAvg { private final long [ ] slots ; private int offset ; private static final long DAMPEN_THRESHOLD = <int> * <int> * <int> ; private static final float DAMPEN_FACTOR = <float> ; public RunningAvg ( int slotCount ) { this . slots = new long [ slotCount ] ; this . offset = <int> ; } public void init ( long value ) { while ( this . offset < this . slots . length ) { this . slots [ this . offset + + ] = value ; } } public void add ( long value ) { this . slots [ this . offset + + % this . slots . length ] = value ; this . offset % = this . slots . length ; } public long avg ( ) { long sum = <int> ; for ( int i = <int> ; i < this . slots . length ; i + + ) { sum + = this . slots [ i ] ; } return sum / this . slots . length ; } public void dampenForLowResTicker ( ) { if ( this . avg ( ) > DAMPEN_THRESHOLD ) { for ( int i = <int> ; i < this . slots . length ; i + + ) { this . slots [ i ] * = DAMPEN_FACTOR ; } } } } } 

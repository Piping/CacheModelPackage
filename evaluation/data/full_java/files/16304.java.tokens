package org . gradle . wrapper ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; import java . util . Properties ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class SystemPropertiesHandler { public static Map < String , String > getSystemProperties ( File propertiesFile ) { Map < String , String > propertyMap = new HashMap < String , String > ( ) ; if ( ! propertiesFile . isFile ( ) ) { return propertyMap ; } Properties properties = new Properties ( ) ; try { FileInputStream inStream = new FileInputStream ( propertiesFile ) ; try { properties . load ( inStream ) ; } finally { inStream . close ( ) ; } } catch ( IOException e ) { throw new RuntimeException ( <str> + propertiesFile , e ) ; } Pattern pattern = Pattern . compile ( <str> ) ; for ( Object argument : properties . keySet ( ) ) { Matcher matcher = pattern . matcher ( argument . toString ( ) ) ; if ( matcher . find ( ) ) { String key = matcher . group ( <int> ) ; if ( key . length ( ) > <int> ) { propertyMap . put ( key , properties . get ( argument ) . toString ( ) ) ; } } } return propertyMap ; } } 

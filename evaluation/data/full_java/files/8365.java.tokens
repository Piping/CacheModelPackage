package org . elasticsearch . indices . warmer ; import org . elasticsearch . action . admin . indices . warmer . delete . DeleteWarmerResponse ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . search . warmer . IndexWarmersMetaData ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . InternalTestCluster . RestartCallback ; import org . hamcrest . Matchers ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( numDataNodes = <int> , scope = Scope . TEST ) public class GatewayIndicesWarmerIT extends ESIntegTestCase { private final ESLogger logger = Loggers . getLogger ( GatewayIndicesWarmerIT . class ) ; public void testStatePersistence ( ) throws Exception { logger . info ( <str> ) ; internalCluster ( ) . startNode ( ) ; logger . info ( <str> ) ; createIndex ( <str> ) ; ensureYellow ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . preparePutWarmer ( <str> ) . setSearchRequest ( client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . preparePutTemplate ( <str> ) . setSource ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; ClusterState clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; IndexWarmersMetaData warmersMetaData = clusterState . metaData ( ) . index ( <str> ) . custom ( IndexWarmersMetaData . TYPE ) ; assertThat ( warmersMetaData , Matchers . notNullValue ( ) ) ; assertThat ( warmersMetaData . entries ( ) . size ( ) , equalTo ( <int> ) ) ; IndexWarmersMetaData templateWarmers = clusterState . metaData ( ) . templates ( ) . get ( <str> ) . custom ( IndexWarmersMetaData . TYPE ) ; assertThat ( templateWarmers , Matchers . notNullValue ( ) ) ; assertThat ( templateWarmers . entries ( ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; internalCluster ( ) . fullRestart ( new RestartCallback ( ) { @Override public Settings onNodeStopped ( String nodeName ) throws Exception { return Settings . EMPTY ; } } ) ; ensureYellow ( ) ; logger . info ( <str> ) ; clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; IndexWarmersMetaData recoveredWarmersMetaData = clusterState . metaData ( ) . index ( <str> ) . custom ( IndexWarmersMetaData . TYPE ) ; assertThat ( recoveredWarmersMetaData . entries ( ) . size ( ) , equalTo ( warmersMetaData . entries ( ) . size ( ) ) ) ; for ( int i = <int> ; i < warmersMetaData . entries ( ) . size ( ) ; i + + ) { assertThat ( recoveredWarmersMetaData . entries ( ) . get ( i ) . name ( ) , equalTo ( warmersMetaData . entries ( ) . get ( i ) . name ( ) ) ) ; assertThat ( recoveredWarmersMetaData . entries ( ) . get ( i ) . source ( ) , equalTo ( warmersMetaData . entries ( ) . get ( i ) . source ( ) ) ) ; } logger . info ( <str> ) ; IndexWarmersMetaData recoveredTemplateWarmers = clusterState . metaData ( ) . templates ( ) . get ( <str> ) . custom ( IndexWarmersMetaData . TYPE ) ; assertThat ( recoveredTemplateWarmers . entries ( ) . size ( ) , equalTo ( templateWarmers . entries ( ) . size ( ) ) ) ; for ( int i = <int> ; i < templateWarmers . entries ( ) . size ( ) ; i + + ) { assertThat ( recoveredTemplateWarmers . entries ( ) . get ( i ) . name ( ) , equalTo ( templateWarmers . entries ( ) . get ( i ) . name ( ) ) ) ; assertThat ( recoveredTemplateWarmers . entries ( ) . get ( i ) . source ( ) , equalTo ( templateWarmers . entries ( ) . get ( i ) . source ( ) ) ) ; } logger . info ( <str> ) ; DeleteWarmerResponse deleteWarmerResponse = client ( ) . admin ( ) . indices ( ) . prepareDeleteWarmer ( ) . setIndices ( <str> ) . setNames ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( deleteWarmerResponse . isAcknowledged ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; warmersMetaData = clusterState . metaData ( ) . index ( <str> ) . custom ( IndexWarmersMetaData . TYPE ) ; assertThat ( warmersMetaData , Matchers . notNullValue ( ) ) ; assertThat ( warmersMetaData . entries ( ) . size ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; internalCluster ( ) . fullRestart ( new RestartCallback ( ) { @Override public Settings onNodeStopped ( String nodeName ) throws Exception { return Settings . EMPTY ; } } ) ; ensureYellow ( ) ; logger . info ( <str> ) ; clusterState = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) ; recoveredWarmersMetaData = clusterState . metaData ( ) . index ( <str> ) . custom ( IndexWarmersMetaData . TYPE ) ; assertThat ( recoveredWarmersMetaData . entries ( ) . size ( ) , equalTo ( warmersMetaData . entries ( ) . size ( ) ) ) ; for ( int i = <int> ; i < warmersMetaData . entries ( ) . size ( ) ; i + + ) { assertThat ( recoveredWarmersMetaData . entries ( ) . get ( i ) . name ( ) , equalTo ( warmersMetaData . entries ( ) . get ( i ) . name ( ) ) ) ; assertThat ( recoveredWarmersMetaData . entries ( ) . get ( i ) . source ( ) , equalTo ( warmersMetaData . entries ( ) . get ( i ) . source ( ) ) ) ; } } } 

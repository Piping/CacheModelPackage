package org . gradle . util ; import org . junit . rules . MethodRule ; import org . junit . runners . model . FrameworkMethod ; import org . junit . runners . model . Statement ; import java . io . ByteArrayOutputStream ; import java . io . PrintStream ; public class RedirectStdOutAndErr implements MethodRule { private PrintStream originalStdOut ; private PrintStream originalStdErr ; private ByteArrayOutputStream stdoutContent = new ByteArrayOutputStream ( ) ; private ByteArrayOutputStream stderrContent = new ByteArrayOutputStream ( ) ; private PrintStream stdOutPrintStream = new PrintStream ( stdoutContent ) ; private PrintStream stdErrPrintStream = new PrintStream ( stderrContent ) ; public Statement apply ( final Statement base , FrameworkMethod method , Object target ) { return new Statement ( ) { @Override public void evaluate ( ) throws Throwable { originalStdOut = System . out ; originalStdErr = System . err ; try { System . setOut ( stdOutPrintStream ) ; System . setErr ( stdErrPrintStream ) ; base . evaluate ( ) ; } finally { System . setOut ( originalStdOut ) ; System . setErr ( originalStdErr ) ; stdOutPrintStream = null ; stdErrPrintStream = null ; stdoutContent = null ; stderrContent = null ; } } } ; } public PrintStream getStdOutPrintStream ( ) { return stdOutPrintStream ; } public PrintStream getStdErrPrintStream ( ) { return stdErrPrintStream ; } public String getStdErr ( ) { return stderrContent . toString ( ) ; } public String getStdOut ( ) { return stdoutContent . toString ( ) ; } } 

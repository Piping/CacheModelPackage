package io . netty . microbench . http2 . hpack ; import io . netty . handler . codec . http2 . hpack . Decoder ; import io . netty . handler . codec . http2 . hpack . Encoder ; import io . netty . handler . codec . http2 . hpack . HeaderListener ; import io . netty . microbench . util . AbstractMicrobenchmark ; import org . openjdk . jmh . annotations . Benchmark ; import org . openjdk . jmh . annotations . BenchmarkMode ; import org . openjdk . jmh . annotations . Level ; import org . openjdk . jmh . annotations . Mode ; import org . openjdk . jmh . annotations . Param ; import org . openjdk . jmh . annotations . Setup ; import org . openjdk . jmh . infra . Blackhole ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . List ; public class DecoderBenchmark extends AbstractMicrobenchmark { @Param public HeadersSize size ; @Param ( { <str> } ) public int maxTableSize ; @Param ( { <str> } ) public int maxHeaderSize ; @Param ( { <str> , <str> } ) public boolean sensitive ; @Param ( { <str> , <str> } ) public boolean limitToAscii ; private byte [ ] input ; @Setup ( Level . Trial ) public void setup ( ) throws IOException { input = getSerializedHeaders ( Util . headers ( size , limitToAscii ) , sensitive ) ; } @Benchmark @BenchmarkMode ( Mode . Throughput ) public void decode ( final Blackhole bh ) throws IOException { Decoder decoder = new Decoder ( maxHeaderSize , maxTableSize ) ; decoder . decode ( new ByteArrayInputStream ( input ) , new HeaderListener ( ) { @Override public void addHeader ( byte [ ] name , byte [ ] value , boolean sensitive ) { bh . consume ( sensitive ) ; } } ) ; decoder . endHeaderBlock ( ) ; } private byte [ ] getSerializedHeaders ( List < Header > headers , boolean sensitive ) throws IOException { Encoder encoder = new Encoder ( <int> ) ; ByteArrayOutputStream outputStream = size . newOutputStream ( ) ; for ( int i = <int> ; i < headers . size ( ) ; + + i ) { Header header = headers . get ( i ) ; encoder . encodeHeader ( outputStream , header . name , header . value , sensitive ) ; } return outputStream . toByteArray ( ) ; } } 

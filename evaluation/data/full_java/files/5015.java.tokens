package org . elasticsearch . action . admin . cluster . snapshots . get ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . SnapshotId ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . regex . Regex ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . snapshots . Snapshot ; import org . elasticsearch . snapshots . SnapshotInfo ; import org . elasticsearch . snapshots . SnapshotsService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; import java . util . ArrayList ; import java . util . Collections ; import java . util . LinkedHashSet ; import java . util . List ; import java . util . Set ; public class TransportGetSnapshotsAction extends TransportMasterNodeAction < GetSnapshotsRequest , GetSnapshotsResponse > { private final SnapshotsService snapshotsService ; @Inject public TransportGetSnapshotsAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , SnapshotsService snapshotsService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , GetSnapshotsAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , GetSnapshotsRequest : : new ) ; this . snapshotsService = snapshotsService ; } @Override protected String executor ( ) { return ThreadPool . Names . GENERIC ; } @Override protected GetSnapshotsResponse newResponse ( ) { return new GetSnapshotsResponse ( ) ; } @Override protected ClusterBlockException checkBlock ( GetSnapshotsRequest request , ClusterState state ) { return state . blocks ( ) . globalBlockedException ( ClusterBlockLevel . METADATA_READ ) ; } @Override protected void masterOperation ( final GetSnapshotsRequest request , ClusterState state , final ActionListener < GetSnapshotsResponse > listener ) { try { List < SnapshotInfo > snapshotInfoBuilder = new ArrayList < > ( ) ; if ( isAllSnapshots ( request . snapshots ( ) ) ) { List < Snapshot > snapshots = snapshotsService . snapshots ( request . repository ( ) , request . ignoreUnavailable ( ) ) ; for ( Snapshot snapshot : snapshots ) { snapshotInfoBuilder . add ( new SnapshotInfo ( snapshot ) ) ; } } else if ( isCurrentSnapshots ( request . snapshots ( ) ) ) { List < Snapshot > snapshots = snapshotsService . currentSnapshots ( request . repository ( ) ) ; for ( Snapshot snapshot : snapshots ) { snapshotInfoBuilder . add ( new SnapshotInfo ( snapshot ) ) ; } } else { Set < String > snapshotsToGet = new LinkedHashSet < > ( ) ; List < Snapshot > snapshots = null ; for ( String snapshotOrPattern : request . snapshots ( ) ) { if ( Regex . isSimpleMatchPattern ( snapshotOrPattern ) = = false ) { snapshotsToGet . add ( snapshotOrPattern ) ; } else { if ( snapshots = = null ) { snapshots = snapshotsService . snapshots ( request . repository ( ) , request . ignoreUnavailable ( ) ) ; } for ( Snapshot snapshot : snapshots ) { if ( Regex . simpleMatch ( snapshotOrPattern , snapshot . name ( ) ) ) { snapshotsToGet . add ( snapshot . name ( ) ) ; } } } } for ( String snapshot : snapshotsToGet ) { SnapshotId snapshotId = new SnapshotId ( request . repository ( ) , snapshot ) ; snapshotInfoBuilder . add ( new SnapshotInfo ( snapshotsService . snapshot ( snapshotId ) ) ) ; } } listener . onResponse ( new GetSnapshotsResponse ( Collections . unmodifiableList ( snapshotInfoBuilder ) ) ) ; } catch ( Throwable t ) { listener . onFailure ( t ) ; } } private boolean isAllSnapshots ( String [ ] snapshots ) { return ( snapshots . length = = <int> ) | | ( snapshots . length = = <int> & & GetSnapshotsRequest . ALL_SNAPSHOTS . equalsIgnoreCase ( snapshots [ <int> ] ) ) ; } private boolean isCurrentSnapshots ( String [ ] snapshots ) { return ( snapshots . length = = <int> & & GetSnapshotsRequest . CURRENT_SNAPSHOT . equalsIgnoreCase ( snapshots [ <int> ] ) ) ; } } 

package io . netty . handler . codec . dns ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public class DnsResponseCode implements Comparable < DnsResponseCode > { public static final DnsResponseCode NOERROR = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode FORMERR = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode SERVFAIL = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode NXDOMAIN = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode NOTIMP = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode REFUSED = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode YXDOMAIN = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode YXRRSET = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode NXRRSET = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode NOTAUTH = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode NOTZONE = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode BADVERS_OR_BADSIG = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode BADKEY = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode BADTIME = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode BADMODE = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode BADNAME = new DnsResponseCode ( <int> , <str> ) ; public static final DnsResponseCode BADALG = new DnsResponseCode ( <int> , <str> ) ; public static DnsResponseCode valueOf ( int responseCode ) { switch ( responseCode ) { case <int> : return NOERROR ; case <int> : return FORMERR ; case <int> : return SERVFAIL ; case <int> : return NXDOMAIN ; case <int> : return NOTIMP ; case <int> : return REFUSED ; case <int> : return YXDOMAIN ; case <int> : return YXRRSET ; case <int> : return NXRRSET ; case <int> : return NOTAUTH ; case <int> : return NOTZONE ; case <int> : return BADVERS_OR_BADSIG ; case <int> : return BADKEY ; case <int> : return BADTIME ; case <int> : return BADMODE ; case <int> : return BADNAME ; case <int> : return BADALG ; default : return new DnsResponseCode ( responseCode ) ; } } private final int code ; private final String name ; private String text ; private DnsResponseCode ( int code ) { this ( code , <str> ) ; } public DnsResponseCode ( int code , String name ) { if ( code < <int> | | code > <int> ) { throw new IllegalArgumentException ( <str> + code + <str> ) ; } this . code = code ; this . name = checkNotNull ( name , <str> ) ; } public int intValue ( ) { return code ; } @Override public int compareTo ( DnsResponseCode o ) { return intValue ( ) - o . intValue ( ) ; } @Override public int hashCode ( ) { return intValue ( ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof DnsResponseCode ) ) { return false ; } return intValue ( ) = = ( ( DnsResponseCode ) o ) . intValue ( ) ; } @Override public String toString ( ) { String text = this . text ; if ( text = = null ) { this . text = text = name + <str> + intValue ( ) + <str> ; } return text ; } } 

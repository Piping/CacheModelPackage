package org . apache . cassandra . index . internal ; import java . util . List ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . db . marshal . CollectionType ; import org . apache . cassandra . db . marshal . CompositeType ; import org . apache . cassandra . index . internal . composites . * ; import org . apache . cassandra . index . internal . keys . KeysIndex ; import org . apache . cassandra . schema . IndexMetadata ; public interface CassandraIndexFunctions { public CassandraIndex newIndexInstance ( ColumnFamilyStore baseCfs , IndexMetadata indexMetadata ) ; default AbstractType < ? > getIndexedValueType ( ColumnDefinition indexedColumn ) { return indexedColumn . type ; } default CFMetaData . Builder addIndexClusteringColumns ( CFMetaData . Builder builder , CFMetaData baseMetadata , ColumnDefinition cfDef ) { for ( ColumnDefinition def : baseMetadata . clusteringColumns ( ) ) builder . addClusteringColumn ( def . name , def . type ) ; return builder ; } static final CassandraIndexFunctions KEYS_INDEX_FUNCTIONS = new CassandraIndexFunctions ( ) { public CassandraIndex newIndexInstance ( ColumnFamilyStore baseCfs , IndexMetadata indexMetadata ) { return new KeysIndex ( baseCfs , indexMetadata ) ; } } ; static final CassandraIndexFunctions REGULAR_COLUMN_INDEX_FUNCTIONS = new CassandraIndexFunctions ( ) { public CassandraIndex newIndexInstance ( ColumnFamilyStore baseCfs , IndexMetadata indexMetadata ) { return new RegularColumnIndex ( baseCfs , indexMetadata ) ; } } ; static final CassandraIndexFunctions CLUSTERING_COLUMN_INDEX_FUNCTIONS = new CassandraIndexFunctions ( ) { public CassandraIndex newIndexInstance ( ColumnFamilyStore baseCfs , IndexMetadata indexMetadata ) { return new ClusteringColumnIndex ( baseCfs , indexMetadata ) ; } public CFMetaData . Builder addIndexClusteringColumns ( CFMetaData . Builder builder , CFMetaData baseMetadata , ColumnDefinition columnDef ) { List < ColumnDefinition > cks = baseMetadata . clusteringColumns ( ) ; for ( int i = <int> ; i < columnDef . position ( ) ; i + + ) { ColumnDefinition def = cks . get ( i ) ; builder . addClusteringColumn ( def . name , def . type ) ; } for ( int i = columnDef . position ( ) + <int> ; i < cks . size ( ) ; i + + ) { ColumnDefinition def = cks . get ( i ) ; builder . addClusteringColumn ( def . name , def . type ) ; } return builder ; } } ; static final CassandraIndexFunctions PARTITION_KEY_INDEX_FUNCTIONS = new CassandraIndexFunctions ( ) { public CassandraIndex newIndexInstance ( ColumnFamilyStore baseCfs , IndexMetadata indexMetadata ) { return new PartitionKeyIndex ( baseCfs , indexMetadata ) ; } } ; static final CassandraIndexFunctions COLLECTION_KEY_INDEX_FUNCTIONS = new CassandraIndexFunctions ( ) { public CassandraIndex newIndexInstance ( ColumnFamilyStore baseCfs , IndexMetadata indexMetadata ) { return new CollectionKeyIndex ( baseCfs , indexMetadata ) ; } public AbstractType < ? > getIndexedValueType ( ColumnDefinition indexedColumn ) { return ( ( CollectionType ) indexedColumn . type ) . nameComparator ( ) ; } } ; static final CassandraIndexFunctions COLLECTION_VALUE_INDEX_FUNCTIONS = new CassandraIndexFunctions ( ) { public CassandraIndex newIndexInstance ( ColumnFamilyStore baseCfs , IndexMetadata indexMetadata ) { return new CollectionValueIndex ( baseCfs , indexMetadata ) ; } public AbstractType < ? > getIndexedValueType ( ColumnDefinition indexedColumn ) { return ( ( CollectionType ) indexedColumn . type ) . valueComparator ( ) ; } public CFMetaData . Builder addIndexClusteringColumns ( CFMetaData . Builder builder , CFMetaData baseMetadata , ColumnDefinition columnDef ) { for ( ColumnDefinition def : baseMetadata . clusteringColumns ( ) ) builder . addClusteringColumn ( def . name , def . type ) ; builder . addClusteringColumn ( <str> , ( ( CollectionType ) columnDef . type ) . nameComparator ( ) ) ; return builder ; } } ; static final CassandraIndexFunctions COLLECTION_ENTRY_INDEX_FUNCTIONS = new CassandraIndexFunctions ( ) { public CassandraIndex newIndexInstance ( ColumnFamilyStore baseCfs , IndexMetadata indexMetadata ) { return new CollectionEntryIndex ( baseCfs , indexMetadata ) ; } public AbstractType < ? > getIndexedValueType ( ColumnDefinition indexedColumn ) { CollectionType colType = ( CollectionType ) indexedColumn . type ; return CompositeType . getInstance ( colType . nameComparator ( ) , colType . valueComparator ( ) ) ; } } ; } 

package org . elasticsearch . script . javascript . support ; import org . mozilla . javascript . * ; import java . util . * ; public final class ScriptValueConverter { private static final String TYPE_DATE = <str> ; private ScriptValueConverter ( ) { } public static Object unwrapValue ( Object value ) { if ( value = = null ) { return null ; } else if ( value instanceof Wrapper ) { value = unwrapValue ( ( ( Wrapper ) value ) . unwrap ( ) ) ; } else if ( value instanceof IdScriptableObject ) { String className = ( ( IdScriptableObject ) value ) . getClassName ( ) ; if ( <str> . equals ( className ) ) { value = Context . jsToJava ( value , String . class ) ; } else if ( <str> . equals ( className ) ) { value = Context . jsToJava ( value , Date . class ) ; } else { Scriptable values = ( Scriptable ) value ; Object [ ] propIds = values . getIds ( ) ; if ( values instanceof NativeArray & & isArray ( propIds ) ) { List < Object > propValues = new ArrayList < Object > ( propIds . length ) ; for ( int i = <int> ; i < propIds . length ; i + + ) { Integer propId = ( Integer ) propIds [ i ] ; if ( propId instanceof Integer ) { Object val = values . get ( propId , values ) ; propValues . add ( unwrapValue ( val ) ) ; } } value = propValues ; } else { Map < String , Object > propValues = new HashMap < String , Object > ( propIds . length ) ; for ( int i = <int> ; i < propIds . length ; i + + ) { Object propId = propIds [ i ] ; if ( propId instanceof String ) { Object val = values . get ( ( String ) propId , values ) ; propValues . put ( ( String ) propId , unwrapValue ( val ) ) ; } } value = propValues ; } } } else if ( value instanceof Object [ ] ) { Object [ ] array = ( Object [ ] ) value ; ArrayList < Object > list = new ArrayList < Object > ( array . length ) ; for ( int i = <int> ; i < array . length ; i + + ) { list . add ( unwrapValue ( array [ i ] ) ) ; } value = list ; } else if ( value instanceof Map ) { Map < Object , Object > map = ( Map < Object , Object > ) value ; Map < Object , Object > copyMap = new HashMap < Object , Object > ( map . size ( ) ) ; for ( Object key : map . keySet ( ) ) { copyMap . put ( key , unwrapValue ( map . get ( key ) ) ) ; } value = copyMap ; } return value ; } public static Object wrapValue ( Scriptable scope , Object value ) { if ( value = = null ) { return null ; } else if ( value instanceof Date ) { Date date = ( Date ) value ; value = ScriptRuntime . newObject ( Context . getCurrentContext ( ) , scope , TYPE_DATE , new Object [ ] { date . getTime ( ) } ) ; } else if ( value instanceof Collection ) { Collection < Object > collection = ( Collection < Object > ) value ; Object [ ] array = new Object [ collection . size ( ) ] ; int index = <int> ; for ( Object obj : collection ) { array [ index + + ] = wrapValue ( scope , obj ) ; } value = Context . getCurrentContext ( ) . newArray ( scope , array ) ; } else if ( value instanceof Map ) { value = NativeMap . wrap ( scope , ( Map ) value ) ; } return value ; } private static boolean isArray ( final Object [ ] ids ) { boolean result = true ; for ( int i = <int> ; i < ids . length ; i + + ) { if ( ids [ i ] instanceof Integer = = false ) { result = false ; break ; } } return result ; } } 

package com . badlogic . gdx . graphics . g3d . decals ; import java . util . Comparator ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Camera ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Disposable ; import com . badlogic . gdx . utils . ObjectMap ; import com . badlogic . gdx . utils . Pool ; public class CameraGroupStrategy implements GroupStrategy , Disposable { private static final int GROUP_OPAQUE = <int> ; private static final int GROUP_BLEND = <int> ; Pool < Array < Decal > > arrayPool = new Pool < Array < Decal > > ( <int> ) { @Override protected Array < Decal > newObject ( ) { return new Array ( ) ; } } ; Array < Array < Decal > > usedArrays = new Array < Array < Decal > > ( ) ; ObjectMap < DecalMaterial , Array < Decal > > materialGroups = new ObjectMap < DecalMaterial , Array < Decal > > ( ) ; Camera camera ; ShaderProgram shader ; private final Comparator < Decal > cameraSorter ; public CameraGroupStrategy ( final Camera camera ) { this ( camera , new Comparator < Decal > ( ) { @Override public int compare ( Decal o1 , Decal o2 ) { float dist1 = camera . position . dst ( o1 . position ) ; float dist2 = camera . position . dst ( o2 . position ) ; return ( int ) Math . signum ( dist2 - dist1 ) ; } } ) ; } public CameraGroupStrategy ( Camera camera , Comparator < Decal > sorter ) { this . camera = camera ; this . cameraSorter = sorter ; createDefaultShader ( ) ; } public void setCamera ( Camera camera ) { this . camera = camera ; } public Camera getCamera ( ) { return camera ; } @Override public int decideGroup ( Decal decal ) { return decal . getMaterial ( ) . isOpaque ( ) ? GROUP_OPAQUE : GROUP_BLEND ; } @Override public void beforeGroup ( int group , Array < Decal > contents ) { if ( group = = GROUP_BLEND ) { Gdx . gl . glEnable ( GL20 . GL_BLEND ) ; contents . sort ( cameraSorter ) ; } else { for ( int i = <int> , n = contents . size ; i < n ; i + + ) { Decal decal = contents . get ( i ) ; Array < Decal > materialGroup = materialGroups . get ( decal . material ) ; if ( materialGroup = = null ) { materialGroup = arrayPool . obtain ( ) ; materialGroup . clear ( ) ; usedArrays . add ( materialGroup ) ; materialGroups . put ( decal . material , materialGroup ) ; } materialGroup . add ( decal ) ; } contents . clear ( ) ; for ( Array < Decal > materialGroup : materialGroups . values ( ) ) { contents . addAll ( materialGroup ) ; } materialGroups . clear ( ) ; arrayPool . freeAll ( usedArrays ) ; usedArrays . clear ( ) ; } } @Override public void afterGroup ( int group ) { if ( group = = GROUP_BLEND ) { Gdx . gl . glDisable ( GL20 . GL_BLEND ) ; } } @Override public void beforeGroups ( ) { Gdx . gl . glEnable ( GL20 . GL_DEPTH_TEST ) ; shader . begin ( ) ; shader . setUniformMatrix ( <str> , camera . combined ) ; shader . setUniformi ( <str> , <int> ) ; } @Override public void afterGroups ( ) { shader . end ( ) ; Gdx . gl . glDisable ( GL20 . GL_DEPTH_TEST ) ; } private void createDefaultShader ( ) { String vertexShader = <str> + ShaderProgram . POSITION_ATTRIBUTE + <str> + <str> + ShaderProgram . COLOR_ATTRIBUTE + <str> + <str> + ShaderProgram . TEXCOORD_ATTRIBUTE + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + ShaderProgram . COLOR_ATTRIBUTE + <str> + <str> + ShaderProgram . TEXCOORD_ATTRIBUTE + <str> + <str> + ShaderProgram . POSITION_ATTRIBUTE + <str> + <str> ; String fragmentShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; shader = new ShaderProgram ( vertexShader , fragmentShader ) ; if ( shader . isCompiled ( ) = = false ) throw new IllegalArgumentException ( <str> + shader . getLog ( ) ) ; } @Override public ShaderProgram getGroupShader ( int group ) { return shader ; } @Override public void dispose ( ) { if ( shader ! = null ) shader . dispose ( ) ; } } 

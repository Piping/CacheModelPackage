package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Mesh ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . VertexAttribute ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . tests . utils . GdxTest ; public class MeshShaderTest extends GdxTest { ShaderProgram shader ; Mesh mesh ; Texture texture ; Matrix4 matrix = new Matrix4 ( ) ; @Override public void create ( ) { String vertexShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; String fragmentShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; shader = new ShaderProgram ( vertexShader , fragmentShader ) ; if ( shader . isCompiled ( ) = = false ) { Gdx . app . log ( <str> , shader . getLog ( ) ) ; Gdx . app . exit ( ) ; } mesh = new Mesh ( true , <int> , <int> , VertexAttribute . Position ( ) , VertexAttribute . ColorUnpacked ( ) , VertexAttribute . TexCoords ( <int> ) ) ; mesh . setVertices ( new float [ ] { - <float> , - <float> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> , - <float> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <float> , <float> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <float> , <float> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } ) ; mesh . setIndices ( new short [ ] { <int> , <int> , <int> , <int> , <int> , <int> } ) ; texture = new Texture ( Gdx . files . internal ( <str> ) ) ; } Vector3 axis = new Vector3 ( <int> , <int> , <int> ) ; float angle = <int> ; @Override public void render ( ) { angle + = Gdx . graphics . getDeltaTime ( ) * <int> ; matrix . setToRotation ( axis , angle ) ; Gdx . gl20 . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl20 . glClearColor ( <float> , <float> , <float> , <int> ) ; Gdx . gl20 . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; Gdx . gl20 . glEnable ( GL20 . GL_TEXTURE_2D ) ; Gdx . gl20 . glEnable ( GL20 . GL_BLEND ) ; Gdx . gl20 . glBlendFunc ( GL20 . GL_SRC_ALPHA , GL20 . GL_ONE_MINUS_SRC_ALPHA ) ; texture . bind ( ) ; shader . begin ( ) ; shader . setUniformMatrix ( <str> , matrix ) ; shader . setUniformi ( <str> , <int> ) ; mesh . render ( shader , GL20 . GL_TRIANGLES ) ; shader . end ( ) ; } @Override public void dispose ( ) { mesh . dispose ( ) ; texture . dispose ( ) ; shader . dispose ( ) ; } } 

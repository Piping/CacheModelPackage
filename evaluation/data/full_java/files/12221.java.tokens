package org . gradle . logging . internal ; import org . gradle . api . logging . LogLevel ; import org . gradle . logging . StyledTextOutput ; import java . text . SimpleDateFormat ; import java . util . Date ; import static org . gradle . logging . StyledTextOutput . Style . Error ; import static org . gradle . logging . StyledTextOutput . Style . Normal ; public class StyledTextOutputBackedRenderer implements OutputEventListener { private final OutputEventTextOutputImpl textOutput ; private boolean debugOutput ; private RenderableOutputEvent lastEvent ; public StyledTextOutputBackedRenderer ( StyledTextOutput textOutput ) { this . textOutput = new OutputEventTextOutputImpl ( textOutput ) ; } public void onOutput ( OutputEvent event ) { if ( event instanceof LogLevelChangeEvent ) { LogLevelChangeEvent changeEvent = ( LogLevelChangeEvent ) event ; debugOutput = changeEvent . getNewLogLevel ( ) = = LogLevel . DEBUG ; } if ( event instanceof RenderableOutputEvent ) { RenderableOutputEvent outputEvent = ( RenderableOutputEvent ) event ; textOutput . style ( outputEvent . getLogLevel ( ) = = LogLevel . ERROR ? Error : Normal ) ; if ( debugOutput & & ( textOutput . atEndOfLine | | lastEvent = = null | | ! lastEvent . getCategory ( ) . equals ( outputEvent . getCategory ( ) ) ) ) { if ( ! textOutput . atEndOfLine ) { textOutput . println ( ) ; } textOutput . text ( new SimpleDateFormat ( <str> ) . format ( new Date ( outputEvent . getTimestamp ( ) ) ) ) ; textOutput . text ( <str> ) ; textOutput . text ( outputEvent . getLogLevel ( ) ) ; textOutput . text ( <str> ) ; textOutput . text ( outputEvent . getCategory ( ) ) ; textOutput . text ( <str> ) ; } outputEvent . render ( textOutput ) ; lastEvent = outputEvent ; textOutput . style ( Normal ) ; } } private class OutputEventTextOutputImpl extends AbstractLineChoppingStyledTextOutput { private final StyledTextOutput textOutput ; private boolean atEndOfLine = true ; public OutputEventTextOutputImpl ( StyledTextOutput textOutput ) { this . textOutput = textOutput ; } @Override protected void doStyleChange ( Style style ) { textOutput . style ( style ) ; } @Override protected void doLineText ( CharSequence text , boolean terminatesLine ) { textOutput . text ( text ) ; atEndOfLine = terminatesLine ; } } } 

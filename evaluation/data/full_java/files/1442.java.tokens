package org . apache . cassandra . db ; import java . io . File ; import java . io . RandomAccessFile ; import java . lang . management . ManagementFactory ; import java . nio . MappedByteBuffer ; import java . nio . channels . FileChannel ; import java . nio . file . StandardOpenOption ; import javax . management . MBeanServer ; import javax . management . ObjectName ; import org . junit . Assert ; import org . junit . Test ; import sun . nio . ch . DirectBuffer ; public class MmapFileTest { @Test public void testMmapFile ( ) throws Exception { ObjectName bpmName = new ObjectName ( <str> ) ; MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; Long mmapCount = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; Long mmapMemoryUsed = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> L ) , mmapCount ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> L ) , mmapMemoryUsed ) ; File f1 = File . createTempFile ( <str> , <str> ) ; File f2 = File . createTempFile ( <str> , <str> ) ; File f3 = File . createTempFile ( <str> , <str> ) ; try { int size = <int> * <int> ; try ( RandomAccessFile raf = new RandomAccessFile ( f1 , <str> ) ) { raf . setLength ( size ) ; } try ( RandomAccessFile raf = new RandomAccessFile ( f2 , <str> ) ) { raf . setLength ( size ) ; } try ( RandomAccessFile raf = new RandomAccessFile ( f3 , <str> ) ) { raf . setLength ( size ) ; } try ( FileChannel channel = FileChannel . open ( f1 . toPath ( ) , StandardOpenOption . WRITE , StandardOpenOption . READ ) ) { MappedByteBuffer buffer = channel . map ( FileChannel . MapMode . READ_WRITE , <int> , size ) ; mmapCount = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; mmapMemoryUsed = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> ) , mmapCount ) ; Assert . assertTrue ( <str> , mmapMemoryUsed > = size ) ; Assert . assertTrue ( buffer . isDirect ( ) ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; ( ( DirectBuffer ) buffer ) . cleaner ( ) . clean ( ) ; } mmapCount = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; mmapMemoryUsed = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> L ) , mmapCount ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> L ) , mmapMemoryUsed ) ; try ( FileChannel channel = FileChannel . open ( f2 . toPath ( ) , StandardOpenOption . WRITE , StandardOpenOption . READ ) ) { MappedByteBuffer buffer = channel . map ( FileChannel . MapMode . READ_WRITE , <int> , size ) ; mmapCount = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; mmapMemoryUsed = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> ) , mmapCount ) ; Assert . assertTrue ( <str> , mmapMemoryUsed > = size ) ; Assert . assertTrue ( buffer . isDirect ( ) ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; ( ( DirectBuffer ) buffer ) . cleaner ( ) . clean ( ) ; } mmapCount = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; mmapMemoryUsed = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> L ) , mmapCount ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> L ) , mmapMemoryUsed ) ; try ( FileChannel channel = FileChannel . open ( f3 . toPath ( ) , StandardOpenOption . WRITE , StandardOpenOption . READ ) ) { MappedByteBuffer buffer = channel . map ( FileChannel . MapMode . READ_WRITE , <int> , size ) ; mmapCount = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; mmapMemoryUsed = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> ) , mmapCount ) ; Assert . assertTrue ( <str> , mmapMemoryUsed > = size ) ; Assert . assertTrue ( buffer . isDirect ( ) ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; buffer . putInt ( <int> ) ; ( ( DirectBuffer ) buffer ) . cleaner ( ) . clean ( ) ; } mmapCount = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; mmapMemoryUsed = ( Long ) mbs . getAttribute ( bpmName , <str> ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> L ) , mmapCount ) ; Assert . assertEquals ( <str> , Long . valueOf ( <int> L ) , mmapMemoryUsed ) ; Assert . assertTrue ( f1 . delete ( ) ) ; Assert . assertTrue ( f2 . delete ( ) ) ; Assert . assertTrue ( f3 . delete ( ) ) ; } finally { Runtime . getRuntime ( ) . gc ( ) ; f1 . delete ( ) ; f2 . delete ( ) ; f3 . delete ( ) ; } } } 

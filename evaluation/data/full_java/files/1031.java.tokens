package org . apache . cassandra . thrift ; import java . io . IOException ; import java . net . InetSocketAddress ; import java . net . ServerSocket ; import java . net . Socket ; import java . net . SocketException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . thrift . transport . TServerTransport ; import org . apache . thrift . transport . TTransportException ; public class TCustomServerSocket extends TServerTransport { private static final Logger logger = LoggerFactory . getLogger ( TCustomServerSocket . class ) ; private ServerSocket serverSocket = null ; private final boolean keepAlive ; private final Integer sendBufferSize ; private final Integer recvBufferSize ; public TCustomServerSocket ( InetSocketAddress bindAddr , boolean keepAlive , Integer sendBufferSize , Integer recvBufferSize , Integer listenBacklog ) throws TTransportException { try { serverSocket = new ServerSocket ( ) ; serverSocket . setReuseAddress ( true ) ; serverSocket . bind ( bindAddr , listenBacklog ) ; } catch ( IOException ioe ) { serverSocket = null ; throw new TTransportException ( <str> + bindAddr + <str> ) ; } this . keepAlive = keepAlive ; this . sendBufferSize = sendBufferSize ; this . recvBufferSize = recvBufferSize ; } public TCustomServerSocket ( ServerSocket socket , boolean keepAlive , Integer sendBufferSize , Integer recvBufferSize ) { this . serverSocket = socket ; this . keepAlive = keepAlive ; this . sendBufferSize = sendBufferSize ; this . recvBufferSize = recvBufferSize ; } @Override @SuppressWarnings ( <str> ) protected TCustomSocket acceptImpl ( ) throws TTransportException { if ( serverSocket = = null ) throw new TTransportException ( TTransportException . NOT_OPEN , <str> ) ; TCustomSocket tsocket = null ; Socket socket = null ; try { socket = serverSocket . accept ( ) ; tsocket = new TCustomSocket ( socket ) ; tsocket . setTimeout ( <int> ) ; } catch ( IOException iox ) { throw new TTransportException ( iox ) ; } try { socket . setKeepAlive ( this . keepAlive ) ; } catch ( SocketException se ) { logger . warn ( <str> , se ) ; } if ( this . sendBufferSize ! = null ) { try { socket . setSendBufferSize ( this . sendBufferSize . intValue ( ) ) ; } catch ( SocketException se ) { logger . warn ( <str> , se ) ; } } if ( this . recvBufferSize ! = null ) { try { socket . setReceiveBufferSize ( this . recvBufferSize . intValue ( ) ) ; } catch ( SocketException se ) { logger . warn ( <str> , se ) ; } } return tsocket ; } @Override public void listen ( ) throws TTransportException { if ( serverSocket ! = null ) { try { serverSocket . setSoTimeout ( <int> ) ; } catch ( SocketException sx ) { logger . error ( <str> , sx ) ; } } } @Override public void close ( ) { if ( serverSocket ! = null ) { try { serverSocket . close ( ) ; } catch ( IOException iox ) { logger . warn ( <str> , iox ) ; } serverSocket = null ; } } @Override public void interrupt ( ) { close ( ) ; } } 

package org . gradle . api . internal . tasks . compile ; import com . google . common . collect . Iterables ; import org . gradle . api . UncheckedIOException ; import org . gradle . platform . base . internal . toolchain . ArgCollector ; import org . gradle . platform . base . internal . toolchain . ArgWriter ; import java . io . * ; import java . util . Collections ; import java . util . List ; public class CommandLineJavaCompilerArgumentsGenerator implements CompileSpecToArguments < JavaCompileSpec > , Serializable { public void collectArguments ( JavaCompileSpec spec , ArgCollector collector ) { for ( String arg : generate ( spec ) ) { collector . args ( arg ) ; } } public Iterable < String > generate ( JavaCompileSpec spec ) { List < String > launcherOptions = new JavaCompilerArgumentsBuilder ( spec ) . includeLauncherOptions ( true ) . includeMainOptions ( false ) . includeClasspath ( false ) . includeCustomizations ( false ) . build ( ) ; List < String > remainingArgs = new JavaCompilerArgumentsBuilder ( spec ) . includeSourceFiles ( true ) . build ( ) ; Iterable < String > allArgs = Iterables . concat ( launcherOptions , remainingArgs ) ; if ( exceedsWindowsCommandLineLengthLimit ( allArgs ) ) { return Iterables . concat ( launcherOptions , shortenArgs ( spec . getTempDir ( ) , remainingArgs ) ) ; } return allArgs ; } private boolean exceedsWindowsCommandLineLengthLimit ( Iterable < String > args ) { int length = <int> ; for ( String arg : args ) { length + = arg . length ( ) + <int> ; if ( length > <int> ) { return true ; } } return false ; } private Iterable < String > shortenArgs ( File tempDir , List < String > args ) { File file = new File ( tempDir , <str> ) ; try { PrintWriter writer = new PrintWriter ( new FileWriter ( file ) ) ; try { ArgWriter argWriter = ArgWriter . unixStyle ( writer ) ; for ( String arg : args ) { argWriter . args ( arg ) ; } } finally { writer . close ( ) ; } } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } return Collections . singleton ( <str> + file . getPath ( ) ) ; } } 

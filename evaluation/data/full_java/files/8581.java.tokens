package org . elasticsearch . validate ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . admin . indices . validate . query . ValidateQueryResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . Fuzziness ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . IndexNotFoundException ; import org . elasticsearch . index . query . MoreLikeThisQueryBuilder ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . hamcrest . Matcher ; import org . joda . time . DateTime ; import org . joda . time . DateTimeZone ; import org . joda . time . format . ISODateTimeFormat ; import java . io . IOException ; import java . nio . charset . StandardCharsets ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_SHARDS ; import static org . elasticsearch . index . query . QueryBuilders . queryStringQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . nullValue ; @ClusterScope ( randomDynamicTemplates = false , scope = Scope . SUITE ) public class SimpleValidateQueryIT extends ESIntegTestCase { public void testSimpleValidateQuery ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; refresh ( ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . wrapperQuery ( <str> . getBytes ( StandardCharsets . UTF_8 ) ) ) . execute ( ) . actionGet ( ) . isValid ( ) , equalTo ( false ) ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) ) . execute ( ) . actionGet ( ) . isValid ( ) , equalTo ( true ) ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) ) . execute ( ) . actionGet ( ) . isValid ( ) , equalTo ( false ) ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) ) . execute ( ) . actionGet ( ) . isValid ( ) , equalTo ( true ) ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) ) . execute ( ) . actionGet ( ) . isValid ( ) , equalTo ( false ) ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) ) . execute ( ) . actionGet ( ) . isValid ( ) , equalTo ( true ) ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) ) . execute ( ) . actionGet ( ) . isValid ( ) , equalTo ( false ) ) ; } public void testExplainValidateQueryTwoNodes ( ) throws IOException { createIndex ( <str> ) ; ensureGreen ( ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; refresh ( ) ; for ( Client client : internalCluster ( ) ) { ValidateQueryResponse response = client . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . wrapperQuery ( <str> . getBytes ( StandardCharsets . UTF_8 ) ) ) . setExplain ( true ) . execute ( ) . actionGet ( ) ; assertThat ( response . isValid ( ) , equalTo ( false ) ) ; assertThat ( response . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getQueryExplanation ( ) . get ( <int> ) . getError ( ) , containsString ( <str> ) ) ; assertThat ( response . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , nullValue ( ) ) ; } for ( Client client : internalCluster ( ) ) { ValidateQueryResponse response = client . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) ) . setExplain ( true ) . execute ( ) . actionGet ( ) ; assertThat ( response . isValid ( ) , equalTo ( true ) ) ; assertThat ( response . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , equalTo ( <str> ) ) ; assertThat ( response . getQueryExplanation ( ) . get ( <int> ) . getError ( ) , nullValue ( ) ) ; } } public void testExplainDateRangeInQueryString ( ) { assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <int> ) ) ) ; String aMonthAgo = ISODateTimeFormat . yearMonthDay ( ) . print ( new DateTime ( DateTimeZone . UTC ) . minusMonths ( <int> ) ) ; String aMonthFromNow = ISODateTimeFormat . yearMonthDay ( ) . print ( new DateTime ( DateTimeZone . UTC ) . plusMonths ( <int> ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , aMonthAgo , <str> , aMonthFromNow ) . get ( ) ; refresh ( ) ; ValidateQueryResponse response = client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( ) . setQuery ( queryStringQuery ( <str> ) ) . setRewrite ( true ) . get ( ) ; assertNoFailures ( response ) ; assertThat ( response . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getQueryExplanation ( ) . get ( <int> ) . getError ( ) , nullValue ( ) ) ; DateTime twoMonthsAgo = new DateTime ( DateTimeZone . UTC ) . minusMonths ( <int> ) . withTimeAtStartOfDay ( ) ; DateTime now = new DateTime ( DateTimeZone . UTC ) . plusDays ( <int> ) . withTimeAtStartOfDay ( ) . minusMillis ( <int> ) ; assertThat ( response . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , equalTo ( <str> + twoMonthsAgo . getMillis ( ) + <str> + now . getMillis ( ) + <str> ) ) ; assertThat ( response . isValid ( ) , equalTo ( true ) ) ; } public void testValidateEmptyCluster ( ) { try { client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( ) . get ( ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } public void testExplainNoQuery ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; ValidateQueryResponse validateQueryResponse = client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( ) . setExplain ( true ) . get ( ) ; assertThat ( validateQueryResponse . isValid ( ) , equalTo ( true ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . get ( <int> ) . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , equalTo ( <str> ) ) ; } public void testExplainFilteredAlias ( ) { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . addAlias ( new Alias ( <str> ) . filter ( QueryBuilders . termQuery ( <str> , <str> ) ) ) ) ; ensureGreen ( ) ; ValidateQueryResponse validateQueryResponse = client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setExplain ( true ) . get ( ) ; assertThat ( validateQueryResponse . isValid ( ) , equalTo ( true ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . get ( <int> ) . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , containsString ( <str> ) ) ; } public void testExplainMatchPhrasePrefix ( ) { assertAcked ( prepareCreate ( <str> ) . setSettings ( Settings . settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( ) ; ValidateQueryResponse validateQueryResponse = client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . matchPhrasePrefixQuery ( <str> , <str> ) ) . setExplain ( true ) . get ( ) ; assertThat ( validateQueryResponse . isValid ( ) , equalTo ( true ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , containsString ( <str> ) ) ; validateQueryResponse = client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . matchPhrasePrefixQuery ( <str> , <str> ) ) . setExplain ( true ) . get ( ) ; assertThat ( validateQueryResponse . isValid ( ) , equalTo ( true ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , containsString ( <str> ) ) ; validateQueryResponse = client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . matchPhrasePrefixQuery ( <str> , <str> ) ) . setExplain ( true ) . get ( ) ; assertThat ( validateQueryResponse . isValid ( ) , equalTo ( true ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , containsString ( <str> ) ) ; validateQueryResponse = client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . matchPhrasePrefixQuery ( <str> , <str> ) ) . setExplain ( true ) . get ( ) ; assertThat ( validateQueryResponse . isValid ( ) , equalTo ( true ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( validateQueryResponse . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , containsString ( <str> ) ) ; } public void testExplainWithRewriteValidateQuery ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . setSettings ( SETTING_NUMBER_OF_SHARDS , <int> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; refresh ( ) ; assertExplanation ( QueryBuilders . matchPhrasePrefixQuery ( <str> , <str> ) , containsString ( <str> ) , true ) ; assertExplanation ( QueryBuilders . matchPhrasePrefixQuery ( <str> , <str> ) , containsString ( <str> ) , true ) ; assertExplanation ( QueryBuilders . commonTermsQuery ( <str> , <str> ) . cutoffFrequency ( <int> ) , containsString ( <str> ) , true ) ; assertExplanation ( QueryBuilders . commonTermsQuery ( <str> , <str> ) . analyzer ( <str> ) , containsString ( <str> ) , true ) ; assertExplanation ( QueryBuilders . matchQuery ( <str> , <str> ) . cutoffFrequency ( <int> ) , containsString ( <str> ) , true ) ; assertExplanation ( QueryBuilders . matchQuery ( <str> , <str> ) . analyzer ( <str> ) , containsString ( <str> ) , true ) ; assertExplanation ( QueryBuilders . fuzzyQuery ( <str> , <str> ) . fuzziness ( Fuzziness . fromEdits ( <int> ) ) , containsString ( <str> ) , true ) ; assertExplanation ( QueryBuilders . fuzzyQuery ( <str> , <str> ) , containsString ( <str> ) , true ) ; assertExplanation ( QueryBuilders . moreLikeThisQuery ( new String [ ] { <str> } , null , MoreLikeThisQueryBuilder . ids ( <str> ) ) . include ( true ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . maxQueryTerms ( <int> ) , containsString ( <str> ) , true ) ; assertExplanation ( QueryBuilders . moreLikeThisQuery ( new String [ ] { <str> } , new String [ ] { <str> } , null ) . minTermFreq ( <int> ) . minDocFreq ( <int> ) . maxQueryTerms ( <int> ) , containsString ( <str> ) , true ) ; } public void testIrrelevantPropertiesBeforeQuery ( ) throws IOException { createIndex ( <str> ) ; ensureGreen ( ) ; refresh ( ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . wrapperQuery ( new BytesArray ( <str> ) ) ) . get ( ) . isValid ( ) , equalTo ( false ) ) ; } public void testIrrelevantPropertiesAfterQuery ( ) throws IOException { createIndex ( <str> ) ; ensureGreen ( ) ; refresh ( ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setQuery ( QueryBuilders . wrapperQuery ( new BytesArray ( <str> ) ) ) . get ( ) . isValid ( ) , equalTo ( false ) ) ; } private static void assertExplanation ( QueryBuilder queryBuilder , Matcher < String > matcher , boolean withRewrite ) { ValidateQueryResponse response = client ( ) . admin ( ) . indices ( ) . prepareValidateQuery ( <str> ) . setTypes ( <str> ) . setQuery ( queryBuilder ) . setExplain ( true ) . setRewrite ( withRewrite ) . execute ( ) . actionGet ( ) ; assertThat ( response . getQueryExplanation ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . getQueryExplanation ( ) . get ( <int> ) . getError ( ) , nullValue ( ) ) ; assertThat ( response . getQueryExplanation ( ) . get ( <int> ) . getExplanation ( ) , matcher ) ; assertThat ( response . isValid ( ) , equalTo ( true ) ) ; } } 

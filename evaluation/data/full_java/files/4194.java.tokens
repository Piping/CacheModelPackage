package org . eclipse . debug . internal . ui . launchConfigurations ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . jface . dialogs . ErrorDialog ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . swt . custom . BusyIndicator ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . actions . SelectionListenerAction ; public abstract class AbstractLaunchConfigurationAction extends SelectionListenerAction { private String fMode ; public interface IConfirmationRequestor { public boolean getConfirmation ( ) ; } private IConfirmationRequestor fConfirmationRequestor ; private Viewer fViewer ; public AbstractLaunchConfigurationAction ( String text , Viewer viewer , String mode ) { super ( text ) ; fViewer = viewer ; fViewer . addSelectionChangedListener ( this ) ; fMode = mode ; } protected Shell getShell ( ) { return getViewer ( ) . getControl ( ) . getShell ( ) ; } protected Viewer getViewer ( ) { return fViewer ; } protected abstract void performAction ( ) ; @Override public final void run ( ) { if ( fConfirmationRequestor ! = null ) { if ( ! fConfirmationRequestor . getConfirmation ( ) ) { return ; } } Runnable r = new Runnable ( ) { @Override public void run ( ) { performAction ( ) ; } } ; BusyIndicator . showWhile ( getShell ( ) . getDisplay ( ) , r ) ; } public void setConfirmationRequestor ( IConfirmationRequestor confirmationRequestor ) { fConfirmationRequestor = confirmationRequestor ; } public void dispose ( ) { fViewer . removeSelectionChangedListener ( this ) ; } protected void errorDialog ( CoreException exception ) { ErrorDialog . openError ( getShell ( ) , null , null , exception . getStatus ( ) ) ; } protected String getMode ( ) { return fMode ; } } 

package org . gradle . api . tasks . javadoc ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . ClassPathRegistry ; import org . gradle . api . internal . project . IsolatedAntBuilder ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . tasks . * ; import java . io . File ; import java . io . Serializable ; import java . util . * ; import org . gradle . api . tasks . Optional ; public class Groovydoc extends SourceTask { private FileCollection groovyClasspath ; private FileCollection classpath ; private File destinationDir ; private AntGroovydoc antGroovydoc ; private boolean use ; private String windowTitle ; private String docTitle ; private String header ; private String footer ; private String overview ; private Set < Link > links = new HashSet < Link > ( ) ; boolean includePrivate ; public Groovydoc ( ) { getLogging ( ) . captureStandardOutput ( LogLevel . INFO ) ; } @TaskAction protected void generate ( ) { checkGroovyClasspathNonEmpty ( getGroovyClasspath ( ) . getFiles ( ) ) ; getAntGroovydoc ( ) . execute ( getSource ( ) , getDestinationDir ( ) , isUse ( ) , getWindowTitle ( ) , getDocTitle ( ) , getHeader ( ) , getFooter ( ) , getOverview ( ) , isIncludePrivate ( ) , getLinks ( ) , getGroovyClasspath ( ) , getClasspath ( ) , getProject ( ) ) ; } private void checkGroovyClasspathNonEmpty ( Collection < File > classpath ) { if ( classpath . isEmpty ( ) ) { throw new InvalidUserDataException ( <str> ) ; } } @OutputDirectory public File getDestinationDir ( ) { return destinationDir ; } public void setDestinationDir ( File destinationDir ) { this . destinationDir = destinationDir ; } @InputFiles public FileCollection getGroovyClasspath ( ) { return groovyClasspath ; } public void setGroovyClasspath ( FileCollection groovyClasspath ) { this . groovyClasspath = groovyClasspath ; } @InputFiles public FileCollection getClasspath ( ) { return classpath ; } public void setClasspath ( FileCollection classpath ) { this . classpath = classpath ; } public AntGroovydoc getAntGroovydoc ( ) { if ( antGroovydoc = = null ) { IsolatedAntBuilder antBuilder = getServices ( ) . get ( IsolatedAntBuilder . class ) ; ClassPathRegistry classPathRegistry = getServices ( ) . get ( ClassPathRegistry . class ) ; antGroovydoc = new AntGroovydoc ( antBuilder , classPathRegistry ) ; } return antGroovydoc ; } public void setAntGroovydoc ( AntGroovydoc antGroovydoc ) { this . antGroovydoc = antGroovydoc ; } @Input public boolean isUse ( ) { return use ; } public void setUse ( boolean use ) { this . use = use ; } @Input @Optional public String getWindowTitle ( ) { return windowTitle ; } public void setWindowTitle ( String windowTitle ) { this . windowTitle = windowTitle ; } @Input @Optional public String getDocTitle ( ) { return docTitle ; } public void setDocTitle ( String docTitle ) { this . docTitle = docTitle ; } @Input @Optional public String getHeader ( ) { return header ; } public void setHeader ( String header ) { this . header = header ; } @Input @Optional public String getFooter ( ) { return footer ; } public void setFooter ( String footer ) { this . footer = footer ; } public String getOverview ( ) { return overview ; } public void setOverview ( String overview ) { this . overview = overview ; } @Input public boolean isIncludePrivate ( ) { return includePrivate ; } public void setIncludePrivate ( boolean includePrivate ) { this . includePrivate = includePrivate ; } @Input public Set < Link > getLinks ( ) { return Collections . unmodifiableSet ( links ) ; } public void setLinks ( Set < Link > links ) { this . links = links ; } public void link ( String url , String . . . packages ) { links . add ( new Link ( url , packages ) ) ; } public static class Link implements Serializable { private List < String > packages = new ArrayList < String > ( ) ; private String url ; public Link ( String url , String . . . packages ) { throwExceptionIfNull ( url , <str> ) ; if ( packages . length = = <int> ) { throw new InvalidUserDataException ( <str> ) ; } for ( String aPackage : packages ) { throwExceptionIfNull ( aPackage , <str> ) ; } this . packages = Arrays . asList ( packages ) ; this . url = url ; } private void throwExceptionIfNull ( String value , String message ) { if ( value = = null ) { throw new InvalidUserDataException ( message ) ; } } public List < String > getPackages ( ) { return Collections . unmodifiableList ( packages ) ; } public String getUrl ( ) { return url ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } Link link = ( Link ) o ; if ( packages ! = null ? ! packages . equals ( link . packages ) : link . packages ! = null ) { return false ; } if ( url ! = null ? ! url . equals ( link . url ) : link . url ! = null ) { return false ; } return true ; } @Override public int hashCode ( ) { int result = packages ! = null ? packages . hashCode ( ) : <int> ; result = <int> * result + ( url ! = null ? url . hashCode ( ) : <int> ) ; return result ; } } } 

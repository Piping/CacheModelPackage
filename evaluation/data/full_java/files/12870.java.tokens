package org . gradle . internal . resolve . result ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . component . ComponentIdentifier ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . result . VersionSelectionReasons ; import org . gradle . internal . component . model . ComponentResolveMetaData ; import org . gradle . internal . resolve . ModuleVersionResolveException ; public class DefaultBuildableComponentIdResolveResult extends DefaultResourceAwareResolveResult implements BuildableComponentIdResolveResult { private ModuleVersionResolveException failure ; private ComponentResolveMetaData metaData ; private ComponentIdentifier id ; private ModuleVersionIdentifier moduleVersionId ; private ComponentSelectionReason selectionReason ; public boolean hasResult ( ) { return id ! = null | | failure ! = null ; } public ModuleVersionResolveException getFailure ( ) { return failure ; } public ComponentIdentifier getId ( ) { assertResolved ( ) ; return id ; } public ModuleVersionIdentifier getModuleVersionId ( ) { assertResolved ( ) ; return moduleVersionId ; } public ComponentSelectionReason getSelectionReason ( ) { return selectionReason ; } public void setSelectionReason ( ComponentSelectionReason reason ) { this . selectionReason = reason ; } public ComponentResolveMetaData getMetaData ( ) { assertResolved ( ) ; return metaData ; } public void resolved ( ComponentIdentifier id , ModuleVersionIdentifier moduleVersionIdentifier ) { reset ( ) ; this . id = id ; this . moduleVersionId = moduleVersionIdentifier ; } public void resolved ( ComponentResolveMetaData metaData ) { resolved ( metaData . getComponentId ( ) , metaData . getId ( ) ) ; this . metaData = metaData ; } public void failed ( ModuleVersionResolveException failure ) { reset ( ) ; this . failure = failure ; } private void assertResolved ( ) { if ( failure ! = null ) { throw failure ; } if ( id = = null ) { throw new IllegalStateException ( <str> ) ; } } private void reset ( ) { failure = null ; metaData = null ; id = null ; moduleVersionId = null ; selectionReason = VersionSelectionReasons . REQUESTED ; } } 

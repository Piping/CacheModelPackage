package com . google . common . util . concurrent ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . lang . Thread . UncaughtExceptionHandler ; import java . util . Locale ; import java . util . concurrent . Executors ; import java . util . concurrent . ThreadFactory ; public class ThreadFactoryBuilderTest extends TestCase { private final Runnable monitoredRunnable = new Runnable ( ) { @Override public void run ( ) { completed = true ; } } ; private static final UncaughtExceptionHandler UNCAUGHT_EXCEPTION_HANDLER = new UncaughtExceptionHandler ( ) { @Override public void uncaughtException ( Thread t , Throwable e ) { } } ; private ThreadFactoryBuilder builder ; private volatile boolean completed = false ; @Override public void setUp ( ) { builder = new ThreadFactoryBuilder ( ) ; } public void testThreadFactoryBuilder_defaults ( ) throws InterruptedException { ThreadFactory threadFactory = builder . build ( ) ; Thread thread = threadFactory . newThread ( monitoredRunnable ) ; checkThreadPoolName ( thread , <int> ) ; Thread defaultThread = Executors . defaultThreadFactory ( ) . newThread ( monitoredRunnable ) ; assertEquals ( defaultThread . isDaemon ( ) , thread . isDaemon ( ) ) ; assertEquals ( defaultThread . getPriority ( ) , thread . getPriority ( ) ) ; assertSame ( defaultThread . getThreadGroup ( ) , thread . getThreadGroup ( ) ) ; assertSame ( defaultThread . getUncaughtExceptionHandler ( ) , thread . getUncaughtExceptionHandler ( ) ) ; assertFalse ( completed ) ; thread . start ( ) ; thread . join ( ) ; assertTrue ( completed ) ; Thread thread2 = threadFactory . newThread ( monitoredRunnable ) ; checkThreadPoolName ( thread2 , <int> ) ; assertEquals ( thread . getName ( ) . substring ( <int> , thread . getName ( ) . lastIndexOf ( <str> ) ) , thread2 . getName ( ) . substring ( <int> , thread . getName ( ) . lastIndexOf ( <str> ) ) ) ; ThreadFactory threadFactory2 = builder . build ( ) ; Thread thread3 = threadFactory2 . newThread ( monitoredRunnable ) ; checkThreadPoolName ( thread3 , <int> ) ; assertThat ( thread2 . getName ( ) . substring ( <int> , thread . getName ( ) . lastIndexOf ( <str> ) ) ) . isNotEqualTo ( thread3 . getName ( ) . substring ( <int> , thread . getName ( ) . lastIndexOf ( <str> ) ) ) ; } private static void checkThreadPoolName ( Thread thread , int threadId ) { assertThat ( thread . getName ( ) ) . matches ( <str> + threadId + <str> ) ; } public void testNameFormatWithPercentS_custom ( ) { String format = <str> ; ThreadFactory factory = builder . setNameFormat ( format ) . build ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertEquals ( rootLocaleFormat ( format , i ) , factory . newThread ( monitoredRunnable ) . getName ( ) ) ; } } public void testNameFormatWithPercentD_custom ( ) { String format = <str> ; ThreadFactory factory = builder . setNameFormat ( format ) . build ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertEquals ( rootLocaleFormat ( format , i ) , factory . newThread ( monitoredRunnable ) . getName ( ) ) ; } } public void testDaemon_false ( ) { ThreadFactory factory = builder . setDaemon ( false ) . build ( ) ; Thread thread = factory . newThread ( monitoredRunnable ) ; assertFalse ( thread . isDaemon ( ) ) ; } public void testDaemon_true ( ) { ThreadFactory factory = builder . setDaemon ( true ) . build ( ) ; Thread thread = factory . newThread ( monitoredRunnable ) ; assertTrue ( thread . isDaemon ( ) ) ; } public void testPriority_custom ( ) { for ( int i = Thread . MIN_PRIORITY ; i < = Thread . MAX_PRIORITY ; i + + ) { ThreadFactory factory = builder . setPriority ( i ) . build ( ) ; Thread thread = factory . newThread ( monitoredRunnable ) ; assertEquals ( i , thread . getPriority ( ) ) ; } } public void testPriority_tooLow ( ) { try { builder . setPriority ( Thread . MIN_PRIORITY - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testPriority_tooHigh ( ) { try { builder . setPriority ( Thread . MAX_PRIORITY + <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testUncaughtExceptionHandler_custom ( ) { assertEquals ( UNCAUGHT_EXCEPTION_HANDLER , builder . setUncaughtExceptionHandler ( UNCAUGHT_EXCEPTION_HANDLER ) . build ( ) . newThread ( monitoredRunnable ) . getUncaughtExceptionHandler ( ) ) ; } public void testBuildMutateBuild ( ) { ThreadFactory factory1 = builder . setPriority ( <int> ) . build ( ) ; assertEquals ( <int> , factory1 . newThread ( monitoredRunnable ) . getPriority ( ) ) ; ThreadFactory factory2 = builder . setPriority ( <int> ) . build ( ) ; assertEquals ( <int> , factory1 . newThread ( monitoredRunnable ) . getPriority ( ) ) ; assertEquals ( <int> , factory2 . newThread ( monitoredRunnable ) . getPriority ( ) ) ; } public void testBuildTwice ( ) { builder . build ( ) ; builder . build ( ) ; } public void testBuildMutate ( ) { ThreadFactory factory1 = builder . setPriority ( <int> ) . build ( ) ; assertEquals ( <int> , factory1 . newThread ( monitoredRunnable ) . getPriority ( ) ) ; builder . setPriority ( <int> ) ; assertEquals ( <int> , factory1 . newThread ( monitoredRunnable ) . getPriority ( ) ) ; } public void testThreadFactory ( ) throws InterruptedException { final String THREAD_NAME = <str> ; final int THREAD_PRIORITY = <int> ; final boolean THREAD_DAEMON = false ; ThreadFactory backingThreadFactory = new ThreadFactory ( ) { @Override public Thread newThread ( Runnable r ) { Thread thread = new Thread ( r ) ; thread . setName ( THREAD_NAME ) ; thread . setPriority ( THREAD_PRIORITY ) ; thread . setDaemon ( THREAD_DAEMON ) ; thread . setUncaughtExceptionHandler ( UNCAUGHT_EXCEPTION_HANDLER ) ; return thread ; } } ; Thread thread = builder . setThreadFactory ( backingThreadFactory ) . build ( ) . newThread ( monitoredRunnable ) ; assertEquals ( THREAD_NAME , thread . getName ( ) ) ; assertEquals ( THREAD_PRIORITY , thread . getPriority ( ) ) ; assertEquals ( THREAD_DAEMON , thread . isDaemon ( ) ) ; assertSame ( UNCAUGHT_EXCEPTION_HANDLER , thread . getUncaughtExceptionHandler ( ) ) ; assertSame ( Thread . State . NEW , thread . getState ( ) ) ; assertFalse ( completed ) ; thread . start ( ) ; thread . join ( ) ; assertTrue ( completed ) ; } public void testNulls ( ) { NullPointerTester npTester = new NullPointerTester ( ) ; npTester . testAllPublicConstructors ( ThreadFactoryBuilder . class ) ; npTester . testAllPublicStaticMethods ( ThreadFactoryBuilder . class ) ; npTester . testAllPublicInstanceMethods ( builder ) ; } private static String rootLocaleFormat ( String format , Object . . . args ) { return String . format ( Locale . ROOT , format , args ) ; } } 

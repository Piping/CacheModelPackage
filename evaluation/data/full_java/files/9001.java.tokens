package org . elasticsearch . test . hamcrest ; import org . apache . lucene . search . BooleanQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . Version ; import org . elasticsearch . action . ActionFuture ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestBuilder ; import org . elasticsearch . action . ShardOperationFailedException ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthRequestBuilder ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . action . admin . cluster . node . info . PluginsAndModules ; import org . elasticsearch . action . admin . indices . alias . exists . AliasesExistResponse ; import org . elasticsearch . action . admin . indices . delete . DeleteIndexRequestBuilder ; import org . elasticsearch . action . admin . indices . delete . DeleteIndexResponse ; import org . elasticsearch . action . admin . indices . template . get . GetIndexTemplatesResponse ; import org . elasticsearch . action . bulk . BulkResponse ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . action . percolate . PercolateResponse ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . ShardSearchFailure ; import org . elasticsearch . action . support . broadcast . BroadcastResponse ; import org . elasticsearch . action . support . master . AcknowledgedRequestBuilder ; import org . elasticsearch . action . support . master . AcknowledgedResponse ; import org . elasticsearch . cluster . block . ClusterBlock ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . metadata . IndexTemplateMetaData ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . NamedWriteableAwareStreamInput ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . plugins . PluginInfo ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . search . suggest . Suggest ; import org . elasticsearch . test . VersionUtils ; import org . elasticsearch . test . rest . client . http . HttpResponse ; import org . hamcrest . CoreMatchers ; import org . hamcrest . Matcher ; import org . hamcrest . Matchers ; import org . junit . Assert ; import java . io . IOException ; import java . lang . reflect . Constructor ; import java . lang . reflect . InvocationTargetException ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . List ; import java . util . Locale ; import java . util . Set ; import java . util . function . Function ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import static org . apache . lucene . util . LuceneTestCase . random ; import static org . elasticsearch . test . VersionUtils . randomVersion ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . is ; import static org . hamcrest . MatcherAssert . assertThat ; import static org . hamcrest . Matchers . contains ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . hasItem ; import static org . hamcrest . Matchers . hasKey ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . not ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; import static org . junit . Assert . assertArrayEquals ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertNotNull ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; public class ElasticsearchAssertions { public static void assertAcked ( AcknowledgedRequestBuilder < ? , ? , ? > builder ) { assertAcked ( builder . get ( ) ) ; } public static void assertNoTimeout ( ClusterHealthRequestBuilder requestBuilder ) { assertNoTimeout ( requestBuilder . get ( ) ) ; } public static void assertNoTimeout ( ClusterHealthResponse response ) { assertThat ( <str> + response + <str> , response . isTimedOut ( ) , is ( false ) ) ; } public static void assertAcked ( AcknowledgedResponse response ) { assertThat ( response . getClass ( ) . getSimpleName ( ) + <str> , response . isAcknowledged ( ) , equalTo ( true ) ) ; assertVersionSerializable ( response ) ; } public static void assertAcked ( DeleteIndexRequestBuilder builder ) { assertAcked ( builder . get ( ) ) ; } public static void assertAcked ( DeleteIndexResponse response ) { assertThat ( <str> , response . isAcknowledged ( ) , equalTo ( true ) ) ; assertVersionSerializable ( response ) ; } public static void assertBlocked ( ActionRequestBuilder builder ) { assertBlocked ( builder , null ) ; } public static void assertBlocked ( BroadcastResponse replicatedBroadcastResponse ) { assertThat ( <str> , replicatedBroadcastResponse . getFailedShards ( ) , Matchers . equalTo ( replicatedBroadcastResponse . getTotalShards ( ) ) ) ; for ( ShardOperationFailedException exception : replicatedBroadcastResponse . getShardFailures ( ) ) { ClusterBlockException clusterBlockException = ( ClusterBlockException ) ExceptionsHelper . unwrap ( exception . getCause ( ) , ClusterBlockException . class ) ; assertNotNull ( <str> + exception . getCause ( ) . getMessage ( ) , clusterBlockException ) ; assertThat ( clusterBlockException . blocks ( ) . size ( ) , greaterThan ( <int> ) ) ; assertThat ( clusterBlockException . status ( ) , CoreMatchers . equalTo ( RestStatus . FORBIDDEN ) ) ; } } public static void assertBlocked ( ActionRequestBuilder builder , ClusterBlock expectedBlock ) { try { builder . get ( ) ; fail ( <str> ) ; } catch ( ClusterBlockException e ) { assertThat ( e . blocks ( ) . size ( ) , greaterThan ( <int> ) ) ; assertThat ( e . status ( ) , equalTo ( RestStatus . FORBIDDEN ) ) ; if ( expectedBlock ! = null ) { boolean found = false ; for ( ClusterBlock clusterBlock : e . blocks ( ) ) { if ( clusterBlock . id ( ) = = expectedBlock . id ( ) ) { found = true ; break ; } } assertThat ( <str> + expectedBlock + <str> + e . blocks ( ) , found , equalTo ( true ) ) ; } } } public static String formatShardStatus ( BroadcastResponse response ) { String msg = <str> + response . getTotalShards ( ) + <str> + response . getSuccessfulShards ( ) + <str> + response . getFailedShards ( ) + <str> ; for ( ShardOperationFailedException failure : response . getShardFailures ( ) ) { msg + = <str> + failure . toString ( ) ; } return msg ; } public static String formatShardStatus ( SearchResponse response ) { String msg = <str> + response . getTotalShards ( ) + <str> + response . getSuccessfulShards ( ) + <str> + response . getFailedShards ( ) + <str> ; for ( ShardSearchFailure failure : response . getShardFailures ( ) ) { msg + = <str> + failure . toString ( ) ; } return msg ; } public static void assertNoSearchHits ( SearchResponse searchResponse ) { assertEquals ( <int> , searchResponse . getHits ( ) . getHits ( ) . length ) ; } public static void assertSearchHits ( SearchResponse searchResponse , String . . . ids ) { String shardStatus = formatShardStatus ( searchResponse ) ; Set < String > idsSet = new HashSet < > ( Arrays . asList ( ids ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( <str> + hit . getId ( ) + <str> + hit . getType ( ) + <str> + hit . index ( ) + <str> + shardStatus , idsSet . remove ( hit . getId ( ) ) , equalTo ( true ) ) ; } assertThat ( <str> + Arrays . toString ( idsSet . toArray ( new String [ idsSet . size ( ) ] ) ) + <str> + shardStatus , idsSet . size ( ) , equalTo ( <int> ) ) ; assertVersionSerializable ( searchResponse ) ; } public static void assertSortValues ( SearchResponse searchResponse , Object [ ] . . . sortValues ) { assertSearchResponse ( searchResponse ) ; SearchHit [ ] hits = searchResponse . getHits ( ) . getHits ( ) ; assertEquals ( sortValues . length , hits . length ) ; for ( int i = <int> ; i < sortValues . length ; + + i ) { final Object [ ] hitsSortValues = hits [ i ] . getSortValues ( ) ; assertArrayEquals ( <str> + Integer . toString ( i ) + <str> + hits [ i ] . getId ( ) , sortValues [ i ] , hitsSortValues ) ; } assertVersionSerializable ( searchResponse ) ; } public static void assertOrderedSearchHits ( SearchResponse searchResponse , String . . . ids ) { String shardStatus = formatShardStatus ( searchResponse ) ; assertThat ( <str> + shardStatus , searchResponse . getHits ( ) . hits ( ) . length , equalTo ( ids . length ) ) ; for ( int i = <int> ; i < ids . length ; i + + ) { SearchHit hit = searchResponse . getHits ( ) . hits ( ) [ i ] ; assertThat ( <str> + ids [ i ] + <str> + i + <str> + shardStatus , hit . getId ( ) , equalTo ( ids [ i ] ) ) ; } assertVersionSerializable ( searchResponse ) ; } public static void assertHitCount ( SearchResponse countResponse , long expectedHitCount ) { if ( countResponse . getHits ( ) . totalHits ( ) ! = expectedHitCount ) { fail ( <str> + countResponse . getHits ( ) . totalHits ( ) + <str> + expectedHitCount + <str> + formatShardStatus ( countResponse ) ) ; } assertVersionSerializable ( countResponse ) ; } public static void assertMatchCount ( PercolateResponse percolateResponse , long expectedHitCount ) { if ( percolateResponse . getCount ( ) ! = expectedHitCount ) { fail ( <str> + percolateResponse . getCount ( ) + <str> + expectedHitCount + <str> + formatShardStatus ( percolateResponse ) ) ; } assertVersionSerializable ( percolateResponse ) ; } public static void assertExists ( GetResponse response ) { String message = String . format ( Locale . ROOT , <str> , response . getIndex ( ) , response . getType ( ) , response . getId ( ) ) ; assertThat ( message , response . isExists ( ) , is ( true ) ) ; } public static void assertFirstHit ( SearchResponse searchResponse , Matcher < SearchHit > matcher ) { assertSearchHit ( searchResponse , <int> , matcher ) ; } public static void assertSecondHit ( SearchResponse searchResponse , Matcher < SearchHit > matcher ) { assertSearchHit ( searchResponse , <int> , matcher ) ; } public static void assertThirdHit ( SearchResponse searchResponse , Matcher < SearchHit > matcher ) { assertSearchHit ( searchResponse , <int> , matcher ) ; } public static void assertFourthHit ( SearchResponse searchResponse , Matcher < SearchHit > matcher ) { assertSearchHit ( searchResponse , <int> , matcher ) ; } public static void assertFifthHit ( SearchResponse searchResponse , Matcher < SearchHit > matcher ) { assertSearchHit ( searchResponse , <int> , matcher ) ; } public static void assertSearchHit ( SearchResponse searchResponse , int number , Matcher < SearchHit > matcher ) { assertThat ( number , greaterThan ( <int> ) ) ; assertThat ( <str> , number , greaterThan ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , greaterThanOrEqualTo ( ( long ) number ) ) ; assertSearchHit ( searchResponse . getHits ( ) . getAt ( number - <int> ) , matcher ) ; assertVersionSerializable ( searchResponse ) ; } public static void assertNoFailures ( SearchResponse searchResponse ) { assertThat ( <str> + Arrays . toString ( searchResponse . getShardFailures ( ) ) , searchResponse . getShardFailures ( ) . length , equalTo ( <int> ) ) ; assertVersionSerializable ( searchResponse ) ; } public static void assertFailures ( SearchResponse searchResponse ) { assertThat ( <str> , searchResponse . getShardFailures ( ) . length , greaterThan ( <int> ) ) ; assertVersionSerializable ( searchResponse ) ; } public static void assertNoFailures ( BulkResponse response ) { assertThat ( <str> + response . buildFailureMessage ( ) , response . hasFailures ( ) , is ( false ) ) ; assertVersionSerializable ( response ) ; } public static void assertFailures ( SearchRequestBuilder searchRequestBuilder , RestStatus restStatus , Matcher < String > reasonMatcher ) { try { SearchResponse searchResponse = searchRequestBuilder . get ( ) ; assertThat ( <str> , searchResponse . getShardFailures ( ) . length , greaterThan ( <int> ) ) ; for ( ShardSearchFailure shardSearchFailure : searchResponse . getShardFailures ( ) ) { assertThat ( shardSearchFailure . status ( ) , equalTo ( restStatus ) ) ; assertThat ( shardSearchFailure . reason ( ) , reasonMatcher ) ; } assertVersionSerializable ( searchResponse ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . status ( ) , equalTo ( restStatus ) ) ; assertThat ( e . toString ( ) , reasonMatcher ) ; for ( ShardSearchFailure shardSearchFailure : e . shardFailures ( ) ) { assertThat ( shardSearchFailure . status ( ) , equalTo ( restStatus ) ) ; assertThat ( shardSearchFailure . reason ( ) , reasonMatcher ) ; } } catch ( Exception e ) { fail ( <str> + e . getClass ( ) ) ; } } public static void assertFailures ( PercolateResponse percolateResponse ) { assertThat ( <str> , percolateResponse . getShardFailures ( ) . length , greaterThan ( <int> ) ) ; assertVersionSerializable ( percolateResponse ) ; } public static void assertNoFailures ( BroadcastResponse response ) { assertThat ( <str> + Arrays . toString ( response . getShardFailures ( ) ) , response . getFailedShards ( ) , equalTo ( <int> ) ) ; assertVersionSerializable ( response ) ; } public static void assertAllSuccessful ( BroadcastResponse response ) { assertNoFailures ( response ) ; assertThat ( <str> + response . getSuccessfulShards ( ) + <str> + response . getTotalShards ( ) + <str> , response . getTotalShards ( ) , equalTo ( response . getSuccessfulShards ( ) ) ) ; assertVersionSerializable ( response ) ; } public static void assertAllSuccessful ( SearchResponse response ) { assertNoFailures ( response ) ; assertThat ( <str> + response . getSuccessfulShards ( ) + <str> + response . getTotalShards ( ) + <str> , response . getTotalShards ( ) , equalTo ( response . getSuccessfulShards ( ) ) ) ; assertVersionSerializable ( response ) ; } public static void assertSearchHit ( SearchHit searchHit , Matcher < SearchHit > matcher ) { assertThat ( searchHit , matcher ) ; assertVersionSerializable ( searchHit ) ; } public static void assertHighlight ( SearchResponse resp , int hit , String field , int fragment , Matcher < String > matcher ) { assertHighlight ( resp , hit , field , fragment , greaterThan ( fragment ) , matcher ) ; } public static void assertHighlight ( SearchResponse resp , int hit , String field , int fragment , int totalFragments , Matcher < String > matcher ) { assertHighlight ( resp , hit , field , fragment , equalTo ( totalFragments ) , matcher ) ; } public static void assertHighlight ( SearchHit hit , String field , int fragment , Matcher < String > matcher ) { assertHighlight ( hit , field , fragment , greaterThan ( fragment ) , matcher ) ; } public static void assertHighlight ( SearchHit hit , String field , int fragment , int totalFragments , Matcher < String > matcher ) { assertHighlight ( hit , field , fragment , equalTo ( totalFragments ) , matcher ) ; } private static void assertHighlight ( SearchResponse resp , int hit , String field , int fragment , Matcher < Integer > fragmentsMatcher , Matcher < String > matcher ) { assertNoFailures ( resp ) ; assertThat ( <str> , resp . getHits ( ) . hits ( ) . length , greaterThan ( hit ) ) ; assertHighlight ( resp . getHits ( ) . hits ( ) [ hit ] , field , fragment , fragmentsMatcher , matcher ) ; assertVersionSerializable ( resp ) ; } private static void assertHighlight ( SearchHit hit , String field , int fragment , Matcher < Integer > fragmentsMatcher , Matcher < String > matcher ) { assertThat ( hit . getHighlightFields ( ) , hasKey ( field ) ) ; assertThat ( hit . getHighlightFields ( ) . get ( field ) . fragments ( ) . length , fragmentsMatcher ) ; assertThat ( hit . highlightFields ( ) . get ( field ) . fragments ( ) [ fragment ] . string ( ) , matcher ) ; } public static void assertNotHighlighted ( SearchResponse resp , int hit , String field ) { assertNoFailures ( resp ) ; assertThat ( <str> , resp . getHits ( ) . hits ( ) . length , greaterThan ( hit ) ) ; assertThat ( resp . getHits ( ) . hits ( ) [ hit ] . getHighlightFields ( ) , not ( hasKey ( field ) ) ) ; } public static void assertSuggestionSize ( Suggest searchSuggest , int entry , int size , String key ) { assertThat ( searchSuggest , notNullValue ( ) ) ; String msg = <str> + searchSuggest . toString ( ) ; assertThat ( msg , searchSuggest . size ( ) , greaterThanOrEqualTo ( <int> ) ) ; assertThat ( msg , searchSuggest . getSuggestion ( key ) . getName ( ) , equalTo ( key ) ) ; assertThat ( msg , searchSuggest . getSuggestion ( key ) . getEntries ( ) . size ( ) , greaterThanOrEqualTo ( entry ) ) ; assertThat ( msg , searchSuggest . getSuggestion ( key ) . getEntries ( ) . get ( entry ) . getOptions ( ) . size ( ) , equalTo ( size ) ) ; assertVersionSerializable ( searchSuggest ) ; } public static void assertSuggestionPhraseCollateMatchExists ( Suggest searchSuggest , String key , int numberOfPhraseExists ) { int counter = <int> ; assertThat ( searchSuggest , notNullValue ( ) ) ; String msg = <str> + searchSuggest . toString ( ) ; assertThat ( msg , searchSuggest . size ( ) , greaterThanOrEqualTo ( <int> ) ) ; assertThat ( msg , searchSuggest . getSuggestion ( key ) . getName ( ) , equalTo ( key ) ) ; for ( Suggest . Suggestion . Entry . Option option : searchSuggest . getSuggestion ( key ) . getEntries ( ) . get ( <int> ) . getOptions ( ) ) { if ( option . collateMatch ( ) ) { counter + + ; } } assertThat ( counter , equalTo ( numberOfPhraseExists ) ) ; } public static void assertSuggestion ( Suggest searchSuggest , int entry , int ord , String key , String text ) { assertThat ( searchSuggest , notNullValue ( ) ) ; String msg = <str> + searchSuggest . toString ( ) ; assertThat ( msg , searchSuggest . size ( ) , greaterThanOrEqualTo ( <int> ) ) ; assertThat ( msg , searchSuggest . getSuggestion ( key ) . getName ( ) , equalTo ( key ) ) ; assertThat ( msg , searchSuggest . getSuggestion ( key ) . getEntries ( ) . size ( ) , greaterThanOrEqualTo ( entry ) ) ; assertThat ( msg , searchSuggest . getSuggestion ( key ) . getEntries ( ) . get ( entry ) . getOptions ( ) . size ( ) , greaterThan ( ord ) ) ; assertThat ( msg , searchSuggest . getSuggestion ( key ) . getEntries ( ) . get ( entry ) . getOptions ( ) . get ( ord ) . getText ( ) . string ( ) , equalTo ( text ) ) ; assertVersionSerializable ( searchSuggest ) ; } public static void assertSuggestion ( Suggest searchSuggest , int entry , String key , String . . . text ) { assertSuggestion ( searchSuggest , entry , key , text . length , text ) ; } public static void assertSuggestion ( Suggest searchSuggest , int entry , String key , int size , String . . . text ) { assertSuggestionSize ( searchSuggest , entry , size , key ) ; for ( int i = <int> ; i < text . length ; i + + ) { assertSuggestion ( searchSuggest , entry , i , key , text [ i ] ) ; } } public static void assertIndexTemplateMissing ( GetIndexTemplatesResponse templatesResponse , String name ) { List < String > templateNames = new ArrayList < > ( ) ; for ( IndexTemplateMetaData indexTemplateMetaData : templatesResponse . getIndexTemplates ( ) ) { templateNames . add ( indexTemplateMetaData . name ( ) ) ; } assertThat ( templateNames , not ( hasItem ( name ) ) ) ; } public static void assertIndexTemplateExists ( GetIndexTemplatesResponse templatesResponse , String name ) { List < String > templateNames = new ArrayList < > ( ) ; for ( IndexTemplateMetaData indexTemplateMetaData : templatesResponse . getIndexTemplates ( ) ) { templateNames . add ( indexTemplateMetaData . name ( ) ) ; } assertThat ( templateNames , hasItem ( name ) ) ; } public static void assertAliasesMissing ( AliasesExistResponse aliasesExistResponse ) { assertFalse ( <str> , aliasesExistResponse . exists ( ) ) ; } public static void assertAliasesExist ( AliasesExistResponse aliasesExistResponse ) { assertTrue ( <str> , aliasesExistResponse . exists ( ) ) ; } public static Matcher < SearchHit > hasId ( final String id ) { return new ElasticsearchMatchers . SearchHitHasIdMatcher ( id ) ; } public static Matcher < SearchHit > hasType ( final String type ) { return new ElasticsearchMatchers . SearchHitHasTypeMatcher ( type ) ; } public static Matcher < SearchHit > hasIndex ( final String index ) { return new ElasticsearchMatchers . SearchHitHasIndexMatcher ( index ) ; } public static Matcher < SearchHit > hasScore ( final float score ) { return new ElasticsearchMatchers . SearchHitHasScoreMatcher ( score ) ; } public static Matcher < HttpResponse > hasStatus ( RestStatus restStatus ) { return new ElasticsearchMatchers . HttpResponseHasStatusMatcher ( restStatus ) ; } public static < T extends Query > T assertBooleanSubQuery ( Query query , Class < T > subqueryType , int i ) { assertThat ( query , instanceOf ( BooleanQuery . class ) ) ; BooleanQuery q = ( BooleanQuery ) query ; assertThat ( q . getClauses ( ) . length , greaterThan ( i ) ) ; assertThat ( q . getClauses ( ) [ i ] . getQuery ( ) , instanceOf ( subqueryType ) ) ; return ( T ) q . getClauses ( ) [ i ] . getQuery ( ) ; } public static < E extends Throwable > void assertThrows ( ActionRequestBuilder < ? , ? , ? > builder , Class < E > exceptionClass ) { assertThrows ( builder . execute ( ) , exceptionClass ) ; } public static < E extends Throwable > void assertThrows ( ActionRequestBuilder < ? , ? , ? > builder , Class < E > exceptionClass , RestStatus status ) { assertThrows ( builder . execute ( ) , exceptionClass , status ) ; } public static < E extends Throwable > void assertThrows ( ActionRequestBuilder < ? , ? , ? > builder , Class < E > exceptionClass , String extraInfo ) { assertThrows ( builder . execute ( ) , exceptionClass , extraInfo ) ; } public static < E extends Throwable > void assertThrows ( ActionFuture future , Class < E > exceptionClass ) { assertThrows ( future , exceptionClass , null , null ) ; } public static < E extends Throwable > void assertThrows ( ActionFuture future , Class < E > exceptionClass , RestStatus status ) { assertThrows ( future , exceptionClass , status , null ) ; } public static < E extends Throwable > void assertThrows ( ActionFuture future , Class < E > exceptionClass , String extraInfo ) { assertThrows ( future , exceptionClass , null , extraInfo ) ; } public static < E extends Throwable > void assertThrows ( ActionFuture future , Class < E > exceptionClass , @Nullable RestStatus status , @Nullable String extraInfo ) { boolean fail = false ; extraInfo = extraInfo = = null | | extraInfo . isEmpty ( ) ? <str> : extraInfo + <str> ; extraInfo + = <str> + exceptionClass + <str> ; if ( status ! = null ) { extraInfo + = <str> + status + <str> ; } try { future . actionGet ( ) ; fail = true ; } catch ( ElasticsearchException esException ) { assertThat ( extraInfo , esException . unwrapCause ( ) , instanceOf ( exceptionClass ) ) ; if ( status ! = null ) { assertThat ( extraInfo , ExceptionsHelper . status ( esException ) , equalTo ( status ) ) ; } } catch ( Throwable e ) { assertThat ( extraInfo , e , instanceOf ( exceptionClass ) ) ; if ( status ! = null ) { assertThat ( extraInfo , ExceptionsHelper . status ( e ) , equalTo ( status ) ) ; } } if ( fail ) { throw new AssertionError ( extraInfo ) ; } } public static < E extends Throwable > void assertThrows ( ActionRequestBuilder < ? , ? , ? > builder , RestStatus status ) { assertThrows ( builder . execute ( ) , status ) ; } public static < E extends Throwable > void assertThrows ( ActionRequestBuilder < ? , ? , ? > builder , RestStatus status , String extraInfo ) { assertThrows ( builder . execute ( ) , status , extraInfo ) ; } public static < E extends Throwable > void assertThrows ( ActionFuture future , RestStatus status ) { assertThrows ( future , status , null ) ; } public static void assertThrows ( ActionFuture future , RestStatus status , String extraInfo ) { boolean fail = false ; extraInfo = extraInfo = = null | | extraInfo . isEmpty ( ) ? <str> : extraInfo + <str> ; extraInfo + = <str> + status + <str> ; try { future . actionGet ( ) ; fail = true ; } catch ( Throwable e ) { assertThat ( extraInfo , ExceptionsHelper . status ( e ) , equalTo ( status ) ) ; } if ( fail ) { throw new AssertionError ( extraInfo ) ; } } private static BytesReference serialize ( Version version , Streamable streamable ) throws IOException { BytesStreamOutput output = new BytesStreamOutput ( ) ; output . setVersion ( version ) ; streamable . writeTo ( output ) ; output . flush ( ) ; return output . bytes ( ) ; } public static void assertVersionSerializable ( Streamable streamable ) { assertTrue ( Version . CURRENT . after ( VersionUtils . getPreviousVersion ( ) ) ) ; assertVersionSerializable ( randomVersion ( random ( ) ) , streamable ) ; } public static void assertVersionSerializable ( Version version , Streamable streamable ) { assertVersionSerializable ( version , streamable , null ) ; } public static void assertVersionSerializable ( Version version , Streamable streamable , NamedWriteableRegistry namedWriteableRegistry ) { try { Streamable newInstance = tryCreateNewInstance ( streamable ) ; if ( newInstance = = null ) { return ; } if ( streamable instanceof ActionRequest ) { ( ( ActionRequest < ? > ) streamable ) . validate ( ) ; } BytesReference orig = serialize ( version , streamable ) ; StreamInput input = StreamInput . wrap ( orig ) ; if ( namedWriteableRegistry ! = null ) { input = new NamedWriteableAwareStreamInput ( input , namedWriteableRegistry ) ; } input . setVersion ( version ) ; newInstance . readFrom ( input ) ; assertThat ( <str> + version + <str> + streamable + <str> , input . available ( ) , equalTo ( <int> ) ) ; assertThat ( <str> + version + <str> + streamable + <str> , serialize ( version , streamable ) , equalTo ( orig ) ) ; } catch ( Throwable ex ) { throw new RuntimeException ( <str> + version + <str> + streamable + <str> , ex ) ; } } public static void assertVersionSerializable ( Version version , final Throwable t ) { ElasticsearchAssertions . assertVersionSerializable ( version , new ThrowableWrapper ( t ) ) ; } public static final class ThrowableWrapper implements Streamable { Throwable throwable ; public ThrowableWrapper ( Throwable t ) { throwable = t ; } public ThrowableWrapper ( ) { throwable = null ; } @Override public void readFrom ( StreamInput in ) throws IOException { throwable = in . readThrowable ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeThrowable ( throwable ) ; } } private static Streamable tryCreateNewInstance ( Streamable streamable ) throws NoSuchMethodException , InstantiationException , IllegalAccessException , InvocationTargetException { try { Class < ? extends Streamable > clazz = streamable . getClass ( ) ; Constructor < ? extends Streamable > constructor = clazz . getConstructor ( ) ; assertThat ( constructor , Matchers . notNullValue ( ) ) ; Streamable newInstance = constructor . newInstance ( ) ; return newInstance ; } catch ( Throwable e ) { return null ; } } public static SearchResponse assertSearchResponse ( SearchRequestBuilder request ) { return assertSearchResponse ( request . get ( ) ) ; } public static SearchResponse assertSearchResponse ( SearchResponse response ) { assertNoFailures ( response ) ; return response ; } public static void assertNodeContainsPlugins ( NodesInfoResponse response , String nodeId , List < String > expectedJvmPluginNames , List < String > expectedJvmPluginDescriptions , List < String > expectedJvmVersions , List < String > expectedSitePluginNames , List < String > expectedSitePluginDescriptions , List < String > expectedSiteVersions ) { Assert . assertThat ( response . getNodesMap ( ) . get ( nodeId ) , notNullValue ( ) ) ; PluginsAndModules plugins = response . getNodesMap ( ) . get ( nodeId ) . getPlugins ( ) ; Assert . assertThat ( plugins , notNullValue ( ) ) ; List < String > pluginNames = filterAndMap ( plugins , jvmPluginPredicate , nameFunction ) ; for ( String expectedJvmPluginName : expectedJvmPluginNames ) { Assert . assertThat ( pluginNames , hasItem ( expectedJvmPluginName ) ) ; } List < String > pluginDescriptions = filterAndMap ( plugins , jvmPluginPredicate , descriptionFunction ) ; for ( String expectedJvmPluginDescription : expectedJvmPluginDescriptions ) { Assert . assertThat ( pluginDescriptions , hasItem ( expectedJvmPluginDescription ) ) ; } List < String > jvmPluginVersions = filterAndMap ( plugins , jvmPluginPredicate , versionFunction ) ; for ( String pluginVersion : expectedJvmVersions ) { Assert . assertThat ( jvmPluginVersions , hasItem ( pluginVersion ) ) ; } boolean anyHaveUrls = plugins . getPluginInfos ( ) . stream ( ) . filter ( jvmPluginPredicate . and ( sitePluginPredicate . negate ( ) ) ) . map ( urlFunction ) . anyMatch ( p - > p ! = null ) ; assertFalse ( anyHaveUrls ) ; List < String > sitePluginNames = filterAndMap ( plugins , sitePluginPredicate , nameFunction ) ; Assert . assertThat ( sitePluginNames . isEmpty ( ) , is ( expectedSitePluginNames . isEmpty ( ) ) ) ; for ( String expectedSitePluginName : expectedSitePluginNames ) { Assert . assertThat ( sitePluginNames , hasItem ( expectedSitePluginName ) ) ; } List < String > sitePluginDescriptions = filterAndMap ( plugins , sitePluginPredicate , descriptionFunction ) ; Assert . assertThat ( sitePluginDescriptions . isEmpty ( ) , is ( expectedSitePluginDescriptions . isEmpty ( ) ) ) ; for ( String sitePluginDescription : expectedSitePluginDescriptions ) { Assert . assertThat ( sitePluginDescriptions , hasItem ( sitePluginDescription ) ) ; } List < String > sitePluginUrls = filterAndMap ( plugins , sitePluginPredicate , urlFunction ) ; Assert . assertThat ( sitePluginUrls , not ( contains ( nullValue ( ) ) ) ) ; List < String > sitePluginVersions = filterAndMap ( plugins , sitePluginPredicate , versionFunction ) ; Assert . assertThat ( sitePluginVersions . isEmpty ( ) , is ( expectedSiteVersions . isEmpty ( ) ) ) ; for ( String pluginVersion : expectedSiteVersions ) { Assert . assertThat ( sitePluginVersions , hasItem ( pluginVersion ) ) ; } } private static List < String > filterAndMap ( PluginsAndModules pluginsInfo , Predicate < PluginInfo > predicate , Function < PluginInfo , String > function ) { return pluginsInfo . getPluginInfos ( ) . stream ( ) . filter ( predicate ) . map ( function ) . collect ( Collectors . toList ( ) ) ; } private static Predicate < PluginInfo > jvmPluginPredicate = p - > p . isJvm ( ) ; private static Predicate < PluginInfo > sitePluginPredicate = p - > p . isSite ( ) ; private static Function < PluginInfo , String > nameFunction = p - > p . getName ( ) ; private static Function < PluginInfo , String > descriptionFunction = p - > p . getDescription ( ) ; private static Function < PluginInfo , String > urlFunction = p - > p . getUrl ( ) ; private static Function < PluginInfo , String > versionFunction = p - > p . getVersion ( ) ; public static void assertFileExists ( Path file ) { assertThat ( <str> + file + <str> , Files . exists ( file ) , is ( true ) ) ; } public static void assertFileNotExists ( Path file ) { assertThat ( <str> + file + <str> , Files . exists ( file ) , is ( false ) ) ; } public static void assertDirectoryExists ( Path dir ) { assertFileExists ( dir ) ; assertThat ( <str> + dir + <str> , Files . isDirectory ( dir ) , is ( true ) ) ; } } 

package junit . textui ; import java . io . PrintStream ; import java . text . NumberFormat ; import java . util . Enumeration ; import junit . framework . AssertionFailedError ; import junit . framework . Test ; import junit . framework . TestFailure ; import junit . framework . TestListener ; import junit . framework . TestResult ; import junit . runner . BaseTestRunner ; public class ResultPrinter implements TestListener { PrintStream fWriter ; int fColumn = <int> ; public ResultPrinter ( PrintStream writer ) { fWriter = writer ; } synchronized void print ( TestResult result , long runTime ) { printHeader ( runTime ) ; printErrors ( result ) ; printFailures ( result ) ; printFooter ( result ) ; } void printWaitPrompt ( ) { getWriter ( ) . println ( ) ; getWriter ( ) . println ( <str> ) ; } protected void printHeader ( long runTime ) { getWriter ( ) . println ( ) ; getWriter ( ) . println ( <str> + elapsedTimeAsString ( runTime ) ) ; } protected void printErrors ( TestResult result ) { printDefects ( result . errors ( ) , result . errorCount ( ) , <str> ) ; } protected void printFailures ( TestResult result ) { printDefects ( result . failures ( ) , result . failureCount ( ) , <str> ) ; } protected void printDefects ( Enumeration < TestFailure > booBoos , int count , String type ) { if ( count = = <int> ) return ; if ( count = = <int> ) { getWriter ( ) . println ( <str> + count + <str> + type + <str> ) ; } else { getWriter ( ) . println ( <str> + count + <str> + type + <str> ) ; } for ( int i = <int> ; booBoos . hasMoreElements ( ) ; i + + ) { printDefect ( booBoos . nextElement ( ) , i ) ; } } public void printDefect ( TestFailure booBoo , int count ) { printDefectHeader ( booBoo , count ) ; printDefectTrace ( booBoo ) ; } protected void printDefectHeader ( TestFailure booBoo , int count ) { getWriter ( ) . print ( count + <str> + booBoo . failedTest ( ) ) ; } protected void printDefectTrace ( TestFailure booBoo ) { getWriter ( ) . print ( BaseTestRunner . getFilteredTrace ( booBoo . trace ( ) ) ) ; } protected void printFooter ( TestResult result ) { if ( result . wasSuccessful ( ) ) { getWriter ( ) . println ( ) ; getWriter ( ) . print ( <str> ) ; getWriter ( ) . println ( <str> + result . runCount ( ) + <str> + ( result . runCount ( ) = = <int> ? <str> : <str> ) + <str> ) ; } else { getWriter ( ) . println ( ) ; getWriter ( ) . println ( <str> ) ; getWriter ( ) . println ( <str> + result . runCount ( ) + <str> + result . failureCount ( ) + <str> + result . errorCount ( ) ) ; } getWriter ( ) . println ( ) ; } protected String elapsedTimeAsString ( long runTime ) { return NumberFormat . getInstance ( ) . format ( ( double ) runTime / <int> ) ; } public PrintStream getWriter ( ) { return fWriter ; } public void addError ( Test test , Throwable e ) { getWriter ( ) . print ( <str> ) ; } public void addFailure ( Test test , AssertionFailedError t ) { getWriter ( ) . print ( <str> ) ; } public void endTest ( Test test ) { } public void startTest ( Test test ) { getWriter ( ) . print ( <str> ) ; if ( fColumn + + > = <int> ) { getWriter ( ) . println ( ) ; fColumn = <int> ; } } } 

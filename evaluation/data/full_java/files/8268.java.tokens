package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanTermQuery ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . lucene . BytesRefs ; import org . elasticsearch . index . mapper . MappedFieldType ; import java . io . IOException ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . instanceOf ; public class SpanTermQueryBuilderTests extends AbstractTermQueryTestCase < SpanTermQueryBuilder > { @Override protected SpanTermQueryBuilder createQueryBuilder ( String fieldName , Object value ) { return new SpanTermQueryBuilder ( fieldName , value ) ; } @Override protected void doAssertLuceneQuery ( SpanTermQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , instanceOf ( SpanTermQuery . class ) ) ; SpanTermQuery spanTermQuery = ( SpanTermQuery ) query ; assertThat ( spanTermQuery . getTerm ( ) . field ( ) , equalTo ( queryBuilder . fieldName ( ) ) ) ; MappedFieldType mapper = context . fieldMapper ( queryBuilder . fieldName ( ) ) ; if ( mapper ! = null ) { BytesRef bytesRef = mapper . indexedValueForSearch ( queryBuilder . value ( ) ) ; assertThat ( spanTermQuery . getTerm ( ) . bytes ( ) , equalTo ( bytesRef ) ) ; } else { assertThat ( spanTermQuery . getTerm ( ) . bytes ( ) , equalTo ( BytesRefs . toBytesRef ( queryBuilder . value ( ) ) ) ) ; } } public SpanTermQueryBuilder [ ] createSpanTermQueryBuilders ( int amount ) { SpanTermQueryBuilder [ ] clauses = new SpanTermQueryBuilder [ amount ] ; SpanTermQueryBuilder first = createTestQueryBuilder ( ) ; clauses [ <int> ] = first ; for ( int i = <int> ; i < amount ; i + + ) { SpanTermQueryBuilder spanTermQuery = new SpanTermQueryBuilder ( first . fieldName ( ) , getRandomValueForFieldName ( first . fieldName ( ) ) ) ; if ( randomBoolean ( ) ) { spanTermQuery . boost ( <float> / randomIntBetween ( <int> , <int> ) ) ; } if ( randomBoolean ( ) ) { spanTermQuery . queryName ( randomAsciiOfLengthBetween ( <int> , <int> ) ) ; } clauses [ i ] = spanTermQuery ; } return clauses ; } public void testFromJson ( ) throws IOException { String json = <str> ; SpanTermQueryBuilder parsed = ( SpanTermQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <str> , parsed . value ( ) ) ; assertEquals ( json , <float> , parsed . boost ( ) , <float> ) ; } } 

package org . gradle . api . internal . tasks . compile . incremental ; import org . gradle . api . file . FileTree ; import org . gradle . api . internal . cache . Stash ; import org . gradle . api . internal . file . FileOperations ; import org . gradle . api . internal . tasks . compile . JavaCompileSpec ; import org . gradle . api . internal . tasks . compile . incremental . analyzer . ClassDependenciesAnalyzer ; import org . gradle . api . internal . tasks . compile . incremental . analyzer . ClassFilesAnalyzer ; import org . gradle . api . internal . tasks . compile . incremental . deps . ClassSetAnalysisData ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . util . Clock ; public class ClassSetAnalysisUpdater { private final static Logger LOG = Logging . getLogger ( ClassSetAnalysisUpdater . class ) ; private final Stash < ClassSetAnalysisData > stash ; private final FileOperations fileOperations ; private ClassDependenciesAnalyzer analyzer ; public ClassSetAnalysisUpdater ( Stash < ClassSetAnalysisData > stash , FileOperations fileOperations , ClassDependenciesAnalyzer analyzer ) { this . stash = stash ; this . fileOperations = fileOperations ; this . analyzer = analyzer ; } public void updateAnalysis ( JavaCompileSpec spec ) { Clock clock = new Clock ( ) ; FileTree tree = fileOperations . fileTree ( spec . getDestinationDir ( ) ) ; ClassFilesAnalyzer analyzer = new ClassFilesAnalyzer ( this . analyzer ) ; tree . visit ( analyzer ) ; ClassSetAnalysisData data = analyzer . getAnalysis ( ) ; stash . put ( data ) ; LOG . info ( <str> , clock . getTime ( ) ) ; } } 

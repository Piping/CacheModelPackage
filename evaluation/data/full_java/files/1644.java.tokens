package org . apache . cassandra . utils ; import java . io . ByteArrayInputStream ; import java . io . DataInputStream ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . nio . charset . CharacterCodingException ; import java . util . Arrays ; import org . junit . Test ; import org . apache . cassandra . io . util . DataOutputBuffer ; import static org . junit . Assert . assertArrayEquals ; import static org . junit . Assert . assertEquals ; public class ByteBufferUtilTest { private static final String s = <str> ; private ByteBuffer fromStringWithPosition ( String s , int pos , boolean direct ) { int l = s . length ( ) ; ByteBuffer bb ; if ( direct ) { bb = ByteBuffer . allocateDirect ( l + pos ) ; } else { ByteBuffer tmp = ByteBuffer . allocate ( l + pos + <int> ) ; tmp . position ( <int> ) ; bb = tmp . slice ( ) ; } bb . position ( pos ) ; bb . mark ( ) ; bb . put ( s . getBytes ( ) ) ; bb . reset ( ) ; assert bb . position ( ) = = pos ; return bb ; } @Test public void testString ( ) throws Exception { assert s . equals ( ByteBufferUtil . string ( ByteBufferUtil . bytes ( s ) ) ) ; int pos = <int> ; ByteBuffer bb = fromStringWithPosition ( s , <int> , false ) ; assert s . equals ( ByteBufferUtil . string ( bb , <int> , s . length ( ) ) ) ; bb = fromStringWithPosition ( s , <int> , true ) ; assert s . equals ( ByteBufferUtil . string ( bb , <int> , s . length ( ) ) ) ; } @Test public void testGetArray ( ) { byte [ ] t = s . getBytes ( ) ; ByteBuffer bb = ByteBufferUtil . bytes ( s ) ; assertArrayEquals ( t , ByteBufferUtil . getArray ( bb ) ) ; bb = fromStringWithPosition ( s , <int> , false ) ; assertArrayEquals ( t , ByteBufferUtil . getArray ( bb ) ) ; bb = fromStringWithPosition ( s , <int> , true ) ; assertArrayEquals ( t , ByteBufferUtil . getArray ( bb ) ) ; } @Test public void testLastIndexOf ( ) { ByteBuffer bb = ByteBufferUtil . bytes ( s ) ; checkLastIndexOf ( bb ) ; bb = fromStringWithPosition ( s , <int> , false ) ; checkLastIndexOf ( bb ) ; bb = fromStringWithPosition ( s , <int> , true ) ; checkLastIndexOf ( bb ) ; } private void checkLastIndexOf ( ByteBuffer bb ) { assert bb . position ( ) + <int> = = ByteBufferUtil . lastIndexOf ( bb , ( byte ) <str> , bb . position ( ) + <int> ) ; assert bb . position ( ) + <int> = = ByteBufferUtil . lastIndexOf ( bb , ( byte ) <str> , bb . position ( ) + <int> ) ; assert bb . position ( ) + <int> = = ByteBufferUtil . lastIndexOf ( bb , ( byte ) <str> , bb . position ( ) + <int> ) ; assert - <int> = = ByteBufferUtil . lastIndexOf ( bb , ( byte ) <str> , bb . position ( ) + <int> ) ; assert - <int> = = ByteBufferUtil . lastIndexOf ( bb , ( byte ) <str> , bb . position ( ) + <int> ) ; } @Test public void testClone ( ) { ByteBuffer bb = ByteBufferUtil . bytes ( s ) ; ByteBuffer clone1 = ByteBufferUtil . clone ( bb ) ; assert bb ! = clone1 ; assert bb . equals ( clone1 ) ; assert bb . array ( ) ! = clone1 . array ( ) ; bb = fromStringWithPosition ( s , <int> , false ) ; ByteBuffer clone2 = ByteBufferUtil . clone ( bb ) ; assert bb ! = clone2 ; assert bb . equals ( clone2 ) ; assert clone1 . equals ( clone2 ) ; assert bb . array ( ) ! = clone2 . array ( ) ; bb = fromStringWithPosition ( s , <int> , true ) ; ByteBuffer clone3 = ByteBufferUtil . clone ( bb ) ; assert bb ! = clone3 ; assert bb . equals ( clone3 ) ; assert clone1 . equals ( clone3 ) ; } @Test public void testArrayCopy ( ) { ByteBuffer bb = ByteBufferUtil . bytes ( s ) ; checkArrayCopy ( bb ) ; bb = fromStringWithPosition ( s , <int> , false ) ; checkArrayCopy ( bb ) ; bb = fromStringWithPosition ( s , <int> , true ) ; checkArrayCopy ( bb ) ; } private void checkArrayCopy ( ByteBuffer bb ) { byte [ ] bytes = new byte [ s . length ( ) ] ; ByteBufferUtil . arrayCopy ( bb , bb . position ( ) , bytes , <int> , s . length ( ) ) ; assertArrayEquals ( s . getBytes ( ) , bytes ) ; bytes = new byte [ <int> ] ; ByteBufferUtil . arrayCopy ( bb , bb . position ( ) + <int> , bytes , <int> , <int> ) ; assertArrayEquals ( Arrays . copyOfRange ( s . getBytes ( ) , <int> , <int> ) , Arrays . copyOfRange ( bytes , <int> , <int> ) ) ; } @Test public void testReadWrite ( ) throws IOException { ByteBuffer bb = ByteBufferUtil . bytes ( s ) ; checkReadWrite ( bb ) ; bb = fromStringWithPosition ( s , <int> , false ) ; checkReadWrite ( bb ) ; bb = fromStringWithPosition ( s , <int> , true ) ; checkReadWrite ( bb ) ; } private void checkReadWrite ( ByteBuffer bb ) throws IOException { DataOutputBuffer out = new DataOutputBuffer ( ) ; ByteBufferUtil . writeWithLength ( bb , out ) ; ByteBufferUtil . writeWithShortLength ( bb , out ) ; DataInputStream in = new DataInputStream ( new ByteArrayInputStream ( out . toByteArray ( ) ) ) ; assert bb . equals ( ByteBufferUtil . readWithLength ( in ) ) ; assert bb . equals ( ByteBufferUtil . readWithShortLength ( in ) ) ; } @Test public void testInputStream ( ) throws IOException { ByteBuffer bb = ByteBuffer . allocate ( <int> ) ; bb . putInt ( <int> ) ; bb . put ( ( byte ) - <int> ) ; bb . putLong ( <int> ) ; bb . clear ( ) ; DataInputStream in = new DataInputStream ( ByteBufferUtil . inputStream ( bb ) ) ; assert in . readInt ( ) = = <int> ; assert in . readByte ( ) = = ( byte ) - <int> ; assert in . readLong ( ) = = <int> ; } @Test public void testIntBytesConversions ( ) { int [ ] ints = new int [ ] { - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> } ; for ( int i : ints ) { ByteBuffer ba = ByteBufferUtil . bytes ( i ) ; int actual = ByteBufferUtil . toInt ( ba ) ; assertEquals ( i , actual ) ; } } @Test ( expected = CharacterCodingException . class ) public void testDecode ( ) throws IOException { ByteBuffer bytes = ByteBuffer . wrap ( new byte [ ] { ( byte ) <hex> , ( byte ) <hex> } ) ; ByteBufferUtil . string ( bytes ) ; } @Test public void testHexBytesConversion ( ) { for ( int i = Byte . MIN_VALUE ; i < = Byte . MAX_VALUE ; i + + ) { ByteBuffer bb = ByteBuffer . allocate ( <int> ) ; bb . put ( ( byte ) i ) ; bb . clear ( ) ; String s = ByteBufferUtil . bytesToHex ( bb ) ; ByteBuffer bb2 = ByteBufferUtil . hexToBytes ( s ) ; assertEquals ( bb , bb2 ) ; } ByteBuffer bb = ByteBuffer . allocate ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { bb . put ( ( byte ) i ) ; } bb . position ( <int> ) ; bb . limit ( <int> ) ; assertEquals ( <int> , bb . remaining ( ) ) ; String s = ByteBufferUtil . bytesToHex ( bb ) ; ByteBuffer bb2 = ByteBufferUtil . hexToBytes ( s ) ; assertEquals ( bb , bb2 ) ; assertEquals ( <str> , s ) ; } } 

package org . elasticsearch . nodesinfo ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . concurrent . EsExecutors ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . List ; import static org . elasticsearch . client . Requests . nodesInfoRequest ; import static org . hamcrest . Matchers . * ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class SimpleNodesInfoIT extends ESIntegTestCase { static final class Fields { static final String SITE_PLUGIN = <str> ; static final String SITE_PLUGIN_DESCRIPTION = <str> ; static final String SITE_PLUGIN_VERSION = <str> ; } public void testNodesInfos ( ) throws Exception { List < String > nodesIds = internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; final String node_1 = nodesIds . get ( <int> ) ; final String node_2 = nodesIds . get ( <int> ) ; ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . setWaitForNodes ( <str> ) . get ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; String server1NodeId = internalCluster ( ) . getInstance ( ClusterService . class , node_1 ) . state ( ) . nodes ( ) . localNodeId ( ) ; String server2NodeId = internalCluster ( ) . getInstance ( ClusterService . class , node_2 ) . state ( ) . nodes ( ) . localNodeId ( ) ; logger . info ( <str> + server1NodeId + <str> + server2NodeId ) ; NodesInfoResponse response = client ( ) . admin ( ) . cluster ( ) . prepareNodesInfo ( ) . execute ( ) . actionGet ( ) ; assertThat ( response . getNodes ( ) . length , is ( <int> ) ) ; assertThat ( response . getNodesMap ( ) . get ( server1NodeId ) , notNullValue ( ) ) ; assertThat ( response . getNodesMap ( ) . get ( server2NodeId ) , notNullValue ( ) ) ; response = client ( ) . admin ( ) . cluster ( ) . nodesInfo ( nodesInfoRequest ( ) ) . actionGet ( ) ; assertThat ( response . getNodes ( ) . length , is ( <int> ) ) ; assertThat ( response . getNodesMap ( ) . get ( server1NodeId ) , notNullValue ( ) ) ; assertThat ( response . getNodesMap ( ) . get ( server2NodeId ) , notNullValue ( ) ) ; response = client ( ) . admin ( ) . cluster ( ) . nodesInfo ( nodesInfoRequest ( server1NodeId ) ) . actionGet ( ) ; assertThat ( response . getNodes ( ) . length , is ( <int> ) ) ; assertThat ( response . getNodesMap ( ) . get ( server1NodeId ) , notNullValue ( ) ) ; response = client ( ) . admin ( ) . cluster ( ) . nodesInfo ( nodesInfoRequest ( server1NodeId ) ) . actionGet ( ) ; assertThat ( response . getNodes ( ) . length , is ( <int> ) ) ; assertThat ( response . getNodesMap ( ) . get ( server1NodeId ) , notNullValue ( ) ) ; response = client ( ) . admin ( ) . cluster ( ) . nodesInfo ( nodesInfoRequest ( server2NodeId ) ) . actionGet ( ) ; assertThat ( response . getNodes ( ) . length , is ( <int> ) ) ; assertThat ( response . getNodesMap ( ) . get ( server2NodeId ) , notNullValue ( ) ) ; response = client ( ) . admin ( ) . cluster ( ) . nodesInfo ( nodesInfoRequest ( server2NodeId ) ) . actionGet ( ) ; assertThat ( response . getNodes ( ) . length , is ( <int> ) ) ; assertThat ( response . getNodesMap ( ) . get ( server2NodeId ) , notNullValue ( ) ) ; } public void testAllocatedProcessors ( ) throws Exception { List < String > nodesIds = internalCluster ( ) . startNodesAsync ( Settings . builder ( ) . put ( EsExecutors . PROCESSORS , <int> ) . build ( ) , Settings . builder ( ) . put ( EsExecutors . PROCESSORS , <int> ) . build ( ) ) . get ( ) ; final String node_1 = nodesIds . get ( <int> ) ; final String node_2 = nodesIds . get ( <int> ) ; ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . setWaitForNodes ( <str> ) . get ( ) ; logger . info ( <str> + clusterHealth . getStatus ( ) ) ; String server1NodeId = internalCluster ( ) . getInstance ( ClusterService . class , node_1 ) . state ( ) . nodes ( ) . localNodeId ( ) ; String server2NodeId = internalCluster ( ) . getInstance ( ClusterService . class , node_2 ) . state ( ) . nodes ( ) . localNodeId ( ) ; logger . info ( <str> + server1NodeId + <str> + server2NodeId ) ; NodesInfoResponse response = client ( ) . admin ( ) . cluster ( ) . prepareNodesInfo ( ) . execute ( ) . actionGet ( ) ; assertThat ( response . getNodes ( ) . length , is ( <int> ) ) ; assertThat ( response . getNodesMap ( ) . get ( server1NodeId ) , notNullValue ( ) ) ; assertThat ( response . getNodesMap ( ) . get ( server2NodeId ) , notNullValue ( ) ) ; assertThat ( response . getNodesMap ( ) . get ( server1NodeId ) . getOs ( ) . getAvailableProcessors ( ) , equalTo ( Runtime . getRuntime ( ) . availableProcessors ( ) ) ) ; assertThat ( response . getNodesMap ( ) . get ( server2NodeId ) . getOs ( ) . getAvailableProcessors ( ) , equalTo ( Runtime . getRuntime ( ) . availableProcessors ( ) ) ) ; assertThat ( response . getNodesMap ( ) . get ( server1NodeId ) . getOs ( ) . getAllocatedProcessors ( ) , equalTo ( <int> ) ) ; assertThat ( response . getNodesMap ( ) . get ( server2NodeId ) . getOs ( ) . getAllocatedProcessors ( ) , equalTo ( <int> ) ) ; } } 

package org . eclipse . debug . examples . internal . memory . core ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . model . DebugElement ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IStackFrame ; import org . eclipse . debug . core . model . IThread ; public class SampleThread extends DebugElement implements IThread { private SampleDebugTarget fTarget ; public SampleThread ( SampleDebugTarget target ) { super ( target ) ; fTarget = target ; try { getStackFrames ( ) ; } catch ( DebugException e ) { e . printStackTrace ( ) ; } fireEvent ( new DebugEvent ( this , DebugEvent . SUSPEND ) ) ; } @Override public IStackFrame [ ] getStackFrames ( ) throws DebugException { return ( ( SampleDebugTarget ) getDebugTarget ( ) ) . getEngine ( ) . getStackframes ( this ) ; } @Override public boolean hasStackFrames ( ) throws DebugException { return true ; } @Override public int getPriority ( ) throws DebugException { return <int> ; } @Override public IStackFrame getTopStackFrame ( ) throws DebugException { return ( ( SampleDebugTarget ) getDebugTarget ( ) ) . getEngine ( ) . getStackframes ( this ) [ <int> ] ; } @Override public String getName ( ) throws DebugException { return Messages . SampleThread_0 ; } @Override public IBreakpoint [ ] getBreakpoints ( ) { return new IBreakpoint [ <int> ] ; } @Override public String getModelIdentifier ( ) { return fTarget . getModelIdentifier ( ) ; } @Override public IDebugTarget getDebugTarget ( ) { return fTarget ; } @Override public ILaunch getLaunch ( ) { return fTarget . getLaunch ( ) ; } @Override public boolean canResume ( ) { return fTarget . canResume ( ) ; } @Override public boolean canSuspend ( ) { return fTarget . canSuspend ( ) ; } @Override public boolean isSuspended ( ) { return fTarget . isSuspended ( ) ; } @Override public void resume ( ) throws DebugException { fTarget . resume ( ) ; } @Override public void suspend ( ) throws DebugException { fTarget . suspend ( ) ; } @Override public boolean canStepInto ( ) { return false ; } @Override public boolean canStepOver ( ) { if ( ! fTarget . isTerminated ( ) ) { return true ; } return fTarget . isSuspended ( ) ; } @Override public boolean canStepReturn ( ) { return false ; } @Override public boolean isStepping ( ) { return false ; } @Override public void stepInto ( ) throws DebugException { } @Override public void stepOver ( ) throws DebugException { fTarget . resume ( ) ; fTarget . suspend ( ) ; } @Override public void stepReturn ( ) throws DebugException { } @Override public boolean canTerminate ( ) { return fTarget . canTerminate ( ) ; } @Override public boolean isTerminated ( ) { return fTarget . isTerminated ( ) ; } @Override public void terminate ( ) throws DebugException { fTarget . terminate ( ) ; } @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Class < T > adapter ) { if ( adapter = = ILaunch . class ) { return ( T ) getLaunch ( ) ; } return super . getAdapter ( adapter ) ; } } 

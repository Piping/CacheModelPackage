package org . elasticsearch . search . simple ; import org . apache . lucene . util . Constants ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . search . internal . DefaultSearchContext ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . ExecutionException ; import static com . carrotsearch . randomizedtesting . RandomizedTest . systemPropertyAsBoolean ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_SHARDS ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . boolQuery ; import static org . elasticsearch . index . query . QueryBuilders . rangeQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; public class SimpleSearchIT extends ESIntegTestCase { public void testSearchNullIndex ( ) { try { client ( ) . prepareSearch ( ( String ) null ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } try { client ( ) . prepareSearch ( ( String [ ] ) null ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } } public void testSearchRandomPreference ( ) throws InterruptedException , ExecutionException { createIndex ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { String randomPreference = randomUnicodeOfLengthBetween ( <int> , <int> ) ; while ( randomPreference . startsWith ( <str> ) ) { randomPreference = randomUnicodeOfLengthBetween ( <int> , <int> ) ; } SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setPreference ( randomPreference ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; } } public void testSimpleIp ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; SearchResponse search = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( rangeQuery ( <str> ) . lt ( <str> ) ) . must ( rangeQuery ( <str> ) . gt ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( search , <int> ) ; } public void testIpCidr ( ) throws Exception { createIndex ( <str> ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; refresh ( ) ; SearchResponse search = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( QueryBuilders . termQuery ( <str> , <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( search , <int> ) ; search = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( QueryBuilders . termQuery ( <str> , <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( search , <int> ) ; search = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( QueryBuilders . termQuery ( <str> , <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( search , <int> ) ; search = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( QueryBuilders . termQuery ( <str> , <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( search , <int> ) ; search = client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( QueryBuilders . termQuery ( <str> , <str> ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( search , <int> l ) ; assertFailures ( client ( ) . prepareSearch ( ) . setQuery ( boolQuery ( ) . must ( QueryBuilders . termQuery ( <str> , <str> ) ) ) , RestStatus . BAD_REQUEST , containsString ( <str> ) ) ; } public void testSimpleId ( ) { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . prefixQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) . lowercaseExpandedTerms ( false ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; } public void testSimpleDateRange ( ) throws Exception { createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . rangeQuery ( <str> ) . gte ( <str> ) . lte ( <str> ) ) . execute ( ) . actionGet ( ) ; assertNoFailures ( searchResponse ) ; assertHitCount ( searchResponse , <int> ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . rangeQuery ( <str> ) . gte ( <str> ) . lte ( <str> ) ) . execute ( ) . actionGet ( ) ; assertNoFailures ( searchResponse ) ; assertHitCount ( searchResponse , <int> ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . rangeQuery ( <str> ) . gte ( <str> ) . lt ( <str> ) ) . execute ( ) . actionGet ( ) ; assertNoFailures ( searchResponse ) ; assertHitCount ( searchResponse , <int> ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . rangeQuery ( <str> ) . gt ( <str> ) . lt ( <str> ) ) . execute ( ) . actionGet ( ) ; assertNoFailures ( searchResponse ) ; assertHitCount ( searchResponse , <int> l ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . queryStringQuery ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; } public void testLocaleDependentDate ( ) throws Exception { assumeFalse ( <str> , Constants . JRE_IS_MINIMUM_JAVA9 & & systemPropertyAsBoolean ( <str> , false ) ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; ensureGreen ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> + ( <int> + i ) ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; } refresh ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . rangeQuery ( <str> ) . gte ( <str> ) . lte ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . rangeQuery ( <str> ) . gte ( <str> ) . lte ( <str> ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; } } public void testSimpleTerminateAfterCount ( ) throws Exception { prepareCreate ( <str> ) . setSettings ( SETTING_NUMBER_OF_SHARDS , <int> , SETTING_NUMBER_OF_REPLICAS , <int> ) . get ( ) ; ensureGreen ( ) ; int max = randomIntBetween ( <int> , <int> ) ; List < IndexRequestBuilder > docbuilders = new ArrayList < > ( max ) ; for ( int i = <int> ; i < = max ; i + + ) { String id = String . valueOf ( i ) ; docbuilders . add ( client ( ) . prepareIndex ( <str> , <str> , id ) . setSource ( <str> , i ) ) ; } indexRandom ( true , docbuilders ) ; ensureGreen ( ) ; refresh ( ) ; SearchResponse searchResponse ; for ( int i = <int> ; i < = max ; i + + ) { searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . rangeQuery ( <str> ) . gte ( <int> ) . lte ( max ) ) . setTerminateAfter ( i ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , ( long ) i ) ; assertTrue ( searchResponse . isTerminatedEarly ( ) ) ; } searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . rangeQuery ( <str> ) . gte ( <int> ) . lte ( max ) ) . setTerminateAfter ( <int> * max ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , max ) ; assertFalse ( searchResponse . isTerminatedEarly ( ) ) ; } public void testInsaneFromAndSize ( ) throws Exception { createIndex ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> ) ) ; assertWindowFails ( client ( ) . prepareSearch ( <str> ) . setFrom ( Integer . MAX_VALUE ) ) ; assertWindowFails ( client ( ) . prepareSearch ( <str> ) . setSize ( Integer . MAX_VALUE ) ) ; } public void testTooLargeFromAndSize ( ) throws Exception { createIndex ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> ) ) ; assertWindowFails ( client ( ) . prepareSearch ( <str> ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) ) ; assertWindowFails ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW + <int> ) ) ; assertWindowFails ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) ) ; } public void testLargeFromAndSizeSucceeds ( ) throws Exception { createIndex ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> ) ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW - <int> ) . get ( ) , <int> ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) . get ( ) , <int> ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW / <int> ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW / <int> - <int> ) . get ( ) , <int> ) ; } public void testTooLargeFromAndSizeOkBySetting ( ) throws Exception { prepareCreate ( <str> ) . setSettings ( DefaultSearchContext . MAX_RESULT_WINDOW , DefaultSearchContext . Defaults . MAX_RESULT_WINDOW * <int> ) . get ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> ) ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) . get ( ) , <int> ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW + <int> ) . get ( ) , <int> ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) . get ( ) , <int> ) ; } public void testTooLargeFromAndSizeOkByDynamicSetting ( ) throws Exception { createIndex ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( Settings . builder ( ) . put ( DefaultSearchContext . MAX_RESULT_WINDOW , DefaultSearchContext . Defaults . MAX_RESULT_WINDOW * <int> ) ) . get ( ) ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> ) ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) . get ( ) , <int> ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW + <int> ) . get ( ) , <int> ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) . get ( ) , <int> ) ; } public void testTooLargeFromAndSizeBackwardsCompatibilityRecommendation ( ) throws Exception { prepareCreate ( <str> ) . setSettings ( DefaultSearchContext . MAX_RESULT_WINDOW , Integer . MAX_VALUE ) . get ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> ) ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW * <int> ) . get ( ) , <int> ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW * <int> ) . get ( ) , <int> ) ; assertHitCount ( client ( ) . prepareSearch ( <str> ) . setSize ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW * <int> ) . setFrom ( DefaultSearchContext . Defaults . MAX_RESULT_WINDOW * <int> ) . get ( ) , <int> ) ; } public void testQueryNumericFieldWithRegex ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( <str> ) ; try { client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . regexpQuery ( <str> , <str> ) ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException ex ) { assertThat ( ex . getCause ( ) . getCause ( ) . getMessage ( ) , equalTo ( <str> ) ) ; } } private void assertWindowFails ( SearchRequestBuilder search ) { try { search . get ( ) ; fail ( ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) , containsString ( <str> + DefaultSearchContext . Defaults . MAX_RESULT_WINDOW ) ) ; assertThat ( e . toString ( ) , containsString ( <str> ) ) ; } } } 

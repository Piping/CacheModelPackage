package org . eclipse . debug . internal . ui . memory ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . IExtensionPoint ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . memory . AbstractMemoryRenderingBindingsProvider ; import org . eclipse . debug . ui . memory . IMemoryRendering ; import org . eclipse . debug . ui . memory . IMemoryRenderingBindingsListener ; import org . eclipse . debug . ui . memory . IMemoryRenderingManager ; import org . eclipse . debug . ui . memory . IMemoryRenderingType ; public class MemoryRenderingManager extends AbstractMemoryRenderingBindingsProvider implements IMemoryRenderingManager { private Map < String , MemoryRenderingType > fRenderingTypes = new HashMap < String , MemoryRenderingType > ( ) ; private List < RenderingBindings > fBindings = new ArrayList < RenderingBindings > ( ) ; private static MemoryRenderingManager fgDefault ; public static final String ELEMENT_MEMORY_RENDERING_TYPE = <str> ; public static final String ELEMENT_RENDERING_BINDINGS = <str> ; public static IMemoryRenderingManager getDefault ( ) { if ( fgDefault = = null ) { fgDefault = new MemoryRenderingManager ( ) ; } return fgDefault ; } private MemoryRenderingManager ( ) { initializeRenderings ( ) ; } public IMemoryRendering createRendering ( String id ) throws CoreException { IMemoryRenderingType type = getRenderingType ( id ) ; if ( type ! = null ) { return type . createRendering ( ) ; } return null ; } @Override public IMemoryRenderingType [ ] getRenderingTypes ( ) { Collection < MemoryRenderingType > types = fRenderingTypes . values ( ) ; return types . toArray ( new IMemoryRenderingType [ types . size ( ) ] ) ; } @Override public IMemoryRenderingType getRenderingType ( String id ) { return fRenderingTypes . get ( id ) ; } @Override public IMemoryRenderingType [ ] getDefaultRenderingTypes ( IMemoryBlock block ) { List < IMemoryRenderingType > allTypes = new ArrayList < IMemoryRenderingType > ( ) ; Iterator < RenderingBindings > iterator = fBindings . iterator ( ) ; while ( iterator . hasNext ( ) ) { RenderingBindings binding = iterator . next ( ) ; IMemoryRenderingType [ ] renderingTypes = binding . getDefaultRenderingTypes ( block ) ; for ( int i = <int> ; i < renderingTypes . length ; i + + ) { IMemoryRenderingType type = renderingTypes [ i ] ; if ( ! allTypes . contains ( type ) ) { allTypes . add ( type ) ; } } } return allTypes . toArray ( new IMemoryRenderingType [ allTypes . size ( ) ] ) ; } @Override public IMemoryRenderingType getPrimaryRenderingType ( IMemoryBlock block ) { for ( RenderingBindings binding : fBindings ) { IMemoryRenderingType renderingType = binding . getPrimaryRenderingType ( block ) ; if ( renderingType ! = null ) { return renderingType ; } } return null ; } @Override public IMemoryRenderingType [ ] getRenderingTypes ( IMemoryBlock block ) { List < IMemoryRenderingType > allTypes = new ArrayList < IMemoryRenderingType > ( ) ; for ( RenderingBindings binding : fBindings ) { IMemoryRenderingType [ ] renderingTypes = binding . getRenderingTypes ( block ) ; for ( int i = <int> ; i < renderingTypes . length ; i + + ) { IMemoryRenderingType type = renderingTypes [ i ] ; if ( ! allTypes . contains ( type ) ) { allTypes . add ( type ) ; } } } return allTypes . toArray ( new IMemoryRenderingType [ allTypes . size ( ) ] ) ; } private void initializeRenderings ( ) { IExtensionPoint extensionPoint = Platform . getExtensionRegistry ( ) . getExtensionPoint ( DebugUIPlugin . getUniqueIdentifier ( ) , IDebugUIConstants . EXTENSION_POINT_MEMORY_RENDERINGS ) ; IConfigurationElement [ ] configurationElements = extensionPoint . getConfigurationElements ( ) ; for ( int i = <int> ; i < configurationElements . length ; i + + ) { IConfigurationElement element = configurationElements [ i ] ; String name = element . getName ( ) ; if ( name . equals ( ELEMENT_MEMORY_RENDERING_TYPE ) ) { MemoryRenderingType type = new MemoryRenderingType ( element ) ; try { type . validate ( ) ; fRenderingTypes . put ( type . getId ( ) , type ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } else if ( name . equals ( ELEMENT_RENDERING_BINDINGS ) ) { RenderingBindings bindings = new RenderingBindings ( element ) ; try { bindings . validate ( ) ; fBindings . add ( bindings ) ; bindings . addListener ( new IMemoryRenderingBindingsListener ( ) { @Override public void memoryRenderingBindingsChanged ( ) { fireBindingsChanged ( ) ; } } ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } } } } 

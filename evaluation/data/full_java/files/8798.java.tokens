package org . elasticsearch . plan . a ; import java . util . HashMap ; import java . util . Map ; public class BasicStatementTests extends ScriptTestCase { public void testIfStatement ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ) ; } public void testWhileStatement ( ) { assertEquals ( <str> , exec ( <str> ) ) ; Object value = exec ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; byte [ ] [ ] b = ( byte [ ] [ ] ) value ; for ( byte x = <int> ; x < <int> ; + + x ) { for ( byte y = <int> ; y < <int> ; + + y ) { assertEquals ( x * y , b [ x ] [ y ] ) ; } } } public void testDoWhileStatement ( ) { assertEquals ( <str> , exec ( <str> ) ) ; Object value = exec ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; int [ ] [ ] b = ( int [ ] [ ] ) value ; for ( byte x = <int> ; x < <int> ; + + x ) { for ( byte y = <int> ; y < <int> ; + + y ) { assertEquals ( x * y , b [ x ] [ y ] ) ; } } } public void testForStatement ( ) { assertEquals ( <str> , exec ( <str> ) ) ; Object value = exec ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; int [ ] [ ] b = ( int [ ] [ ] ) value ; for ( byte x = <int> ; x < <int> ; + + x ) { for ( byte y = <int> ; y < <int> ; + + y ) { assertEquals ( x * y , b [ x ] [ y ] ) ; } } } public void testDeclarationStatement ( ) { assertEquals ( ( byte ) <int> , exec ( <str> ) ) ; assertEquals ( ( short ) <int> , exec ( <str> ) ) ; assertEquals ( ( char ) <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( <float> , exec ( <str> ) ) ; assertEquals ( false , exec ( <str> ) ) ; assertEquals ( <str> , exec ( <str> ) ) ; assertEquals ( HashMap . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( byte [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( short [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( char [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( int [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( long [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( float [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( double [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( boolean [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( String [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( Map [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( byte [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( short [ ] [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( char [ ] [ ] [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( int [ ] [ ] [ ] [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( long [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( float [ ] [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( double [ ] [ ] [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( boolean [ ] [ ] [ ] [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( String [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; assertEquals ( Map [ ] [ ] [ ] . class , exec ( <str> ) . getClass ( ) ) ; } public void testContinueStatement ( ) { assertEquals ( <int> , exec ( <str> ) ) ; } public void testBreakStatement ( ) { assertEquals ( <int> , exec ( <str> ) ) ; } public void testReturnStatement ( ) { assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , exec ( <str> ) ) ; assertEquals ( <int> , ( ( short [ ] ) exec ( <str> ) ) [ <int> ] ) ; assertEquals ( <int> , ( ( Map ) exec ( <str> ) ) . get ( <str> ) ) ; } } 

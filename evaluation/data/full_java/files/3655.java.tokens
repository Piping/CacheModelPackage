package org . eclipse . debug . core . sourcelookup . containers ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; public class ProjectSourceContainer extends ContainerSourceContainer { boolean fReferencedProjects = false ; public static final String TYPE_ID = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public ProjectSourceContainer ( IProject project , boolean referenced ) { super ( project , true ) ; fReferencedProjects = referenced ; } public boolean isSearchReferencedProjects ( ) { return fReferencedProjects ; } public IProject getProject ( ) { return ( IProject ) getContainer ( ) ; } @Override public ISourceContainerType getType ( ) { return getSourceContainerType ( TYPE_ID ) ; } @Override public boolean isComposite ( ) { return true ; } @Override protected ISourceContainer [ ] createSourceContainers ( ) throws CoreException { if ( getProject ( ) . isOpen ( ) ) { if ( isSearchReferencedProjects ( ) ) { IProject project = getProject ( ) ; IProject [ ] projects = getAllReferencedProjects ( project ) ; ISourceContainer [ ] folders = super . createSourceContainers ( ) ; List < ISourceContainer > all = new ArrayList < ISourceContainer > ( folders . length + projects . length ) ; for ( int i = <int> ; i < folders . length ; i + + ) { all . add ( folders [ i ] ) ; } for ( int i = <int> ; i < projects . length ; i + + ) { if ( project . exists ( ) & & project . isOpen ( ) ) { ProjectSourceContainer container = new ProjectSourceContainer ( projects [ i ] , false ) ; container . init ( getDirector ( ) ) ; all . add ( container ) ; } } return all . toArray ( new ISourceContainer [ all . size ( ) ] ) ; } return super . createSourceContainers ( ) ; } return new ISourceContainer [ <int> ] ; } private IProject [ ] getAllReferencedProjects ( IProject project ) throws CoreException { Set < IProject > all = new HashSet < IProject > ( ) ; getAllReferencedProjects ( all , project ) ; return all . toArray ( new IProject [ all . size ( ) ] ) ; } private void getAllReferencedProjects ( Set < IProject > all , IProject project ) throws CoreException { IProject [ ] refs = project . getReferencedProjects ( ) ; for ( int i = <int> ; i < refs . length ; i + + ) { if ( ! all . contains ( refs [ i ] ) & & refs [ i ] . exists ( ) & & refs [ i ] . isOpen ( ) ) { all . add ( refs [ i ] ) ; getAllReferencedProjects ( all , refs [ i ] ) ; } } } } 

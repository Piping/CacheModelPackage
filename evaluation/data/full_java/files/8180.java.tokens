package org . elasticsearch . index . mapper . geo ; import org . apache . lucene . spatial . prefix . PrefixTreeStrategy ; import org . apache . lucene . spatial . prefix . RecursivePrefixTreeStrategy ; import org . apache . lucene . spatial . prefix . tree . GeohashPrefixTree ; import org . apache . lucene . spatial . prefix . tree . QuadPrefixTree ; import org . elasticsearch . common . compress . CompressedXContent ; import org . elasticsearch . common . geo . GeoUtils ; import org . elasticsearch . common . geo . builders . ShapeBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . DocumentMapper ; import org . elasticsearch . index . mapper . DocumentMapperParser ; import org . elasticsearch . index . mapper . FieldMapper ; import org . elasticsearch . index . mapper . MapperService ; import org . elasticsearch . index . mapper . MergeResult ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . isIn ; public class GeoShapeFieldMapperTests extends ESSingleNodeTestCase { public void testDefaultConfiguration ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( GeoShapeFieldMapper . Defaults . LEGACY_DISTANCE_ERROR_PCT ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( GeohashPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( GeoShapeFieldMapper . Defaults . GEOHASH_LEVELS ) ) ; assertThat ( geoShapeFieldMapper . fieldType ( ) . orientation ( ) , equalTo ( GeoShapeFieldMapper . Defaults . ORIENTATION ) ) ; } public void testOrientationParsing ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; ShapeBuilder . Orientation orientation = ( ( GeoShapeFieldMapper ) fieldMapper ) . fieldType ( ) . orientation ( ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . CLOCKWISE ) ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . LEFT ) ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . CW ) ) ; mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; orientation = ( ( GeoShapeFieldMapper ) fieldMapper ) . fieldType ( ) . orientation ( ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . COUNTER_CLOCKWISE ) ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . RIGHT ) ) ; assertThat ( orientation , equalTo ( ShapeBuilder . Orientation . CCW ) ) ; } public void testCoerceParsing ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; boolean coerce = ( ( GeoShapeFieldMapper ) fieldMapper ) . coerce ( ) . value ( ) ; assertThat ( coerce , equalTo ( true ) ) ; mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; coerce = ( ( GeoShapeFieldMapper ) fieldMapper ) . coerce ( ) . value ( ) ; assertThat ( coerce , equalTo ( false ) ) ; } public void testGeohashConfiguration ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( GeohashPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( <int> ) ) ; } public void testQuadtreeConfiguration ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( QuadPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( <int> ) ) ; assertThat ( strategy . isPointsOnly ( ) , equalTo ( true ) ) ; } public void testLevelPrecisionConfiguration ( ) throws IOException { DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = parser . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( QuadPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( GeoUtils . quadTreeLevelsForPrecision ( <int> d ) ) ) ; } { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = parser . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( QuadPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( <int> ) ) ; } { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = parser . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( GeohashPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( GeoUtils . geoHashLevelsForPrecision ( <int> d ) ) ) ; } { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , GeoUtils . geoHashLevelsForPrecision ( <int> d ) + <int> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = parser . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( GeohashPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( GeoUtils . geoHashLevelsForPrecision ( <int> d ) + <int> ) ) ; } { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , GeoUtils . quadTreeLevelsForPrecision ( <int> d ) + <int> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = parser . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( QuadPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( GeoUtils . quadTreeLevelsForPrecision ( <int> d ) + <int> ) ) ; } } public void testPointsOnlyOption ( ) throws IOException { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( GeohashPrefixTree . class ) ) ; assertThat ( strategy . isPointsOnly ( ) , equalTo ( true ) ) ; } public void testLevelDefaults ( ) throws IOException { DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = parser . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( QuadPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( GeoUtils . quadTreeLevelsForPrecision ( <int> d ) ) ) ; } { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper defaultMapper = parser . parse ( mapping ) ; FieldMapper fieldMapper = defaultMapper . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( GeohashPrefixTree . class ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( GeoUtils . geoHashLevelsForPrecision ( <int> d ) ) ) ; } } public void testGeoShapeMapperMerge ( ) throws Exception { String stage1Mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <int> ) . field ( <str> , <float> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; MapperService mapperService = createIndex ( <str> ) . mapperService ( ) ; DocumentMapper stage1 = mapperService . merge ( <str> , new CompressedXContent ( stage1Mapping ) , true , false ) ; String stage2Mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <int> ) . field ( <str> , <int> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { mapperService . merge ( <str> , new CompressedXContent ( stage2Mapping ) , false , false ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } FieldMapper fieldMapper = stage1 . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; GeoShapeFieldMapper geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; PrefixTreeStrategy strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy , instanceOf ( RecursivePrefixTreeStrategy . class ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( GeohashPrefixTree . class ) ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( GeoUtils . geoHashLevelsForPrecision ( <float> ) ) ) ; assertThat ( geoShapeFieldMapper . fieldType ( ) . orientation ( ) , equalTo ( ShapeBuilder . Orientation . CCW ) ) ; stage2Mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <int> ) . field ( <str> , <float> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; mapperService . merge ( <str> , new CompressedXContent ( stage2Mapping ) , false , false ) ; fieldMapper = stage1 . mappers ( ) . getMapper ( <str> ) ; assertThat ( fieldMapper , instanceOf ( GeoShapeFieldMapper . class ) ) ; geoShapeFieldMapper = ( GeoShapeFieldMapper ) fieldMapper ; strategy = geoShapeFieldMapper . fieldType ( ) . defaultStrategy ( ) ; assertThat ( strategy , instanceOf ( RecursivePrefixTreeStrategy . class ) ) ; assertThat ( strategy . getGrid ( ) , instanceOf ( GeohashPrefixTree . class ) ) ; assertThat ( strategy . getDistErrPct ( ) , equalTo ( <float> ) ) ; assertThat ( strategy . getGrid ( ) . getMaxLevels ( ) , equalTo ( GeoUtils . geoHashLevelsForPrecision ( <float> ) ) ) ; assertThat ( geoShapeFieldMapper . fieldType ( ) . orientation ( ) , equalTo ( ShapeBuilder . Orientation . CW ) ) ; } } 

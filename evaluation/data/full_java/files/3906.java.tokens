package org . eclipse . debug . tests . launching ; import org . eclipse . core . runtime . NullProgressMonitor ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . internal . core . LaunchManager ; import org . eclipse . debug . tests . launching . CancellingLaunchDelegate . CancellingLaunch ; @SuppressWarnings ( <str> ) public class LaunchManagerTests extends AbstractLaunchTest { public LaunchManagerTests ( String name ) { super ( name ) ; } public void testGenereateConfigName ( ) { String configname = <str> ; String name = getLaunchManager ( ) . generateLaunchConfigurationName ( configname ) ; assertTrue ( <str> + configname + <str> , name . equals ( configname ) ) ; } public void testGenereateConfigNameBadChar ( ) { String configname = <str> ; String name = getLaunchManager ( ) . generateUniqueLaunchConfigurationNameFrom ( configname ) ; assertEquals ( <str> + configname + <str> , configname , name ) ; } public void testGenerateValidName ( ) { String configname = <str> ; String name = getLaunchManager ( ) . generateLaunchConfigurationName ( configname ) ; assertEquals ( <str> , configname , name ) ; } public void testGenerateConfigNameReservedName ( ) { if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { String configname = <str> ; String name = getLaunchManager ( ) . generateUniqueLaunchConfigurationNameFrom ( configname ) ; assertEquals ( <str> , configname , name ) ; } } public void testGenerateBadConfigName ( ) { String configname = <str> ; String name = getLaunchManager ( ) . generateLaunchConfigurationName ( configname ) ; assertEquals ( <str> , <str> , name ) ; } public void testGenerateConflictingName ( ) { if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { String configname = <str> ; String name = getLaunchManager ( ) . generateLaunchConfigurationName ( configname ) ; assertEquals ( <str> , <str> , name ) ; } } public void testGenerateBadCharConflict ( ) throws Exception { String configname = <str> ; String name = getLaunchManager ( ) . generateLaunchConfigurationName ( configname ) ; assertEquals ( <str> , <str> , name ) ; getLaunchConfiguration ( name ) ; name = getLaunchManager ( ) . generateLaunchConfigurationName ( configname ) ; assertEquals ( <str> , <str> , name ) ; ILaunchConfiguration config = getLaunchConfiguration ( <str> ) ; config . delete ( ) ; } public void testGenerateBadNameConflict ( ) throws Exception { if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { String configname = <str> ; String name = getLaunchManager ( ) . generateLaunchConfigurationName ( configname ) ; assertEquals ( <str> , <str> , name ) ; getLaunchConfiguration ( name ) ; name = getLaunchManager ( ) . generateLaunchConfigurationName ( configname ) ; assertEquals ( <str> , <str> , name ) ; ILaunchConfiguration config = getLaunchConfiguration ( <str> ) ; config . delete ( ) ; } } public void testValidateConfigGoodName ( ) { String configname = <str> ; try { getLaunchManager ( ) . isValidLaunchConfigurationName ( configname ) ; } catch ( IllegalArgumentException iae ) { fail ( <str> ) ; } } public void testValidateConfigBadCharName ( ) { String configname = <str> ; try { getLaunchManager ( ) . isValidLaunchConfigurationName ( configname ) ; } catch ( IllegalArgumentException iae ) { return ; } fail ( <str> ) ; } public void testValidateConfigBadName ( ) { if ( Platform . OS_WIN32 . equals ( Platform . getOS ( ) ) ) { String configname = <str> ; try { getLaunchManager ( ) . isValidLaunchConfigurationName ( configname ) ; } catch ( IllegalArgumentException iae ) { return ; } fail ( <str> ) ; } } public void testGenerateNameExistingConfig ( ) throws Exception { String configname = <str> ; getLaunchConfiguration ( configname ) ; String name = getLaunchManager ( ) . generateLaunchConfigurationName ( configname ) ; assertEquals ( <str> + configname + <str> , configname + <str> , name ) ; getLaunchConfiguration ( name ) ; name = getLaunchManager ( ) . generateLaunchConfigurationName ( name ) ; assertEquals ( <str> + configname + <str> , configname + <str> , name ) ; ILaunchConfiguration config = getLaunchConfiguration ( configname ) ; if ( config ! = null ) { config . delete ( ) ; } config = getLaunchConfiguration ( configname + <str> ) ; if ( config ! = null ) { config . delete ( ) ; } } public void testRemoveAcc ( ) { String text = <str> ; String label = LaunchManager . removeAccelerators ( text ) ; assertEquals ( <str> , <str> , label ) ; text = <str> ; label = LaunchManager . removeAccelerators ( text ) ; assertEquals ( <str> , <str> , label ) ; } ILaunchConfiguration getCancellingConfiguration ( boolean pre , boolean fin , boolean build ) throws Exception { ILaunchConfigurationType type = getLaunchManager ( ) . getLaunchConfigurationType ( <str> ) ; if ( type ! = null ) { ILaunchConfigurationWorkingCopy copy = type . newInstance ( null , getLaunchManager ( ) . generateLaunchConfigurationName ( <str> ) ) ; copy . setAttribute ( <str> , ! pre ) ; copy . setAttribute ( <str> , ! fin ) ; copy . setAttribute ( <str> , ! build ) ; return copy . doSave ( ) ; } return null ; } void hasCancellingLaunches ( int count ) { ILaunch [ ] launches = getLaunchManager ( ) . getLaunches ( ) ; int num = <int> ; for ( int i = <int> ; i < launches . length ; i + + ) { if ( launches [ i ] instanceof CancellingLaunch ) { num + + ; } } assertEquals ( <str> , count , num ) ; } public void testCancelledPreLaunchCheck ( ) throws Exception { ILaunchConfiguration config = getCancellingConfiguration ( true , false , false ) ; assertNotNull ( <str> , config ) ; try { hasCancellingLaunches ( <int> ) ; config . launch ( <str> , new NullProgressMonitor ( ) ) ; hasCancellingLaunches ( <int> ) ; } finally { ILaunch [ ] launches = getLaunchManager ( ) . getLaunches ( ) ; for ( int i = <int> ; i < launches . length ; i + + ) { getLaunchManager ( ) . removeLaunch ( launches [ i ] ) ; } config . delete ( ) ; } } public void testCancelledFinalLaunchCheck ( ) throws Exception { ILaunchConfiguration config = getCancellingConfiguration ( false , true , false ) ; assertNotNull ( <str> , config ) ; try { hasCancellingLaunches ( <int> ) ; config . launch ( <str> , new NullProgressMonitor ( ) ) ; hasCancellingLaunches ( <int> ) ; } finally { ILaunch [ ] launches = getLaunchManager ( ) . getLaunches ( ) ; for ( int i = <int> ; i < launches . length ; i + + ) { getLaunchManager ( ) . removeLaunch ( launches [ i ] ) ; } config . delete ( ) ; } } public void testCancelledBuildForLaunch ( ) throws Exception { ILaunchConfiguration config = getCancellingConfiguration ( false , false , true ) ; assertNotNull ( <str> , config ) ; try { hasCancellingLaunches ( <int> ) ; config . launch ( <str> , new NullProgressMonitor ( ) ) ; hasCancellingLaunches ( <int> ) ; } finally { ILaunch [ ] launches = getLaunchManager ( ) . getLaunches ( ) ; for ( int i = <int> ; i < launches . length ; i + + ) { getLaunchManager ( ) . removeLaunch ( launches [ i ] ) ; } config . delete ( ) ; } } } 

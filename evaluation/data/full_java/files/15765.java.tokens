package org . gradle . api . internal . tasks . testing . junit . report ; import org . gradle . api . internal . tasks . testing . junit . result . TestFailure ; import java . util . ArrayList ; import java . util . List ; import static org . gradle . api . tasks . testing . TestResult . ResultType ; public class TestResult extends TestResultModel implements Comparable < TestResult > { private final long duration ; final ClassTestResults classResults ; final List < TestFailure > failures = new ArrayList < TestFailure > ( ) ; final String name ; boolean ignored ; public TestResult ( String name , long duration , ClassTestResults classResults ) { this . name = name ; this . duration = duration ; this . classResults = classResults ; } public Object getId ( ) { return name ; } public String getName ( ) { return name ; } @Override public String getTitle ( ) { return String . format ( <str> , name ) ; } @Override public ResultType getResultType ( ) { if ( ignored ) { return ResultType . SKIPPED ; } return failures . isEmpty ( ) ? ResultType . SUCCESS : ResultType . FAILURE ; } @Override public long getDuration ( ) { return duration ; } @Override public String getFormattedDuration ( ) { return ignored ? <str> : super . getFormattedDuration ( ) ; } public ClassTestResults getClassResults ( ) { return classResults ; } public List < TestFailure > getFailures ( ) { return failures ; } public boolean isIgnored ( ) { return ignored ; } public void addFailure ( TestFailure failure ) { classResults . failed ( this ) ; failures . add ( failure ) ; } public void setIgnored ( ) { classResults . ignored ( this ) ; ignored = true ; } public int compareTo ( TestResult testResult ) { int diff = classResults . getName ( ) . compareTo ( testResult . classResults . getName ( ) ) ; if ( diff ! = <int> ) { return diff ; } diff = name . compareTo ( testResult . name ) ; if ( diff ! = <int> ) { return diff ; } Integer thisIdentity = System . identityHashCode ( this ) ; int otherIdentity = System . identityHashCode ( testResult ) ; return thisIdentity . compareTo ( otherIdentity ) ; } } 

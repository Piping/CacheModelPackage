package com . google . common . collect ; import static com . google . common . base . Preconditions . checkNotNull ; import java . io . Serializable ; import java . util . AbstractCollection ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import javax . annotation . Nullable ; @SuppressWarnings ( <str> ) public abstract class ImmutableCollection < E > extends AbstractCollection < E > implements Serializable { static final ImmutableCollection < Object > EMPTY_IMMUTABLE_COLLECTION = new ForwardingImmutableCollection < Object > ( Collections . emptyList ( ) ) ; ImmutableCollection ( ) { } public abstract UnmodifiableIterator < E > iterator ( ) ; public boolean contains ( @Nullable Object object ) { return object ! = null & & super . contains ( object ) ; } public final boolean add ( E e ) { throw new UnsupportedOperationException ( ) ; } public final boolean remove ( Object object ) { throw new UnsupportedOperationException ( ) ; } public final boolean addAll ( Collection < ? extends E > newElements ) { throw new UnsupportedOperationException ( ) ; } public final boolean removeAll ( Collection < ? > oldElements ) { throw new UnsupportedOperationException ( ) ; } public final boolean retainAll ( Collection < ? > elementsToKeep ) { throw new UnsupportedOperationException ( ) ; } public final void clear ( ) { throw new UnsupportedOperationException ( ) ; } private transient ImmutableList < E > asList ; public ImmutableList < E > asList ( ) { ImmutableList < E > list = asList ; return ( list = = null ) ? ( asList = createAsList ( ) ) : list ; } ImmutableList < E > createAsList ( ) { switch ( size ( ) ) { case <int> : return ImmutableList . of ( ) ; case <int> : return ImmutableList . of ( iterator ( ) . next ( ) ) ; default : return new RegularImmutableAsList < E > ( this , toArray ( ) ) ; } } static < E > ImmutableCollection < E > unsafeDelegate ( Collection < E > delegate ) { return new ForwardingImmutableCollection < E > ( delegate ) ; } boolean isPartialView ( ) { return false ; } public abstract static class Builder < E > { Builder ( ) { } public abstract Builder < E > add ( E element ) ; public Builder < E > add ( E . . . elements ) { checkNotNull ( elements ) ; for ( E element : elements ) { add ( checkNotNull ( element ) ) ; } return this ; } public Builder < E > addAll ( Iterable < ? extends E > elements ) { checkNotNull ( elements ) ; for ( E element : elements ) { add ( checkNotNull ( element ) ) ; } return this ; } public Builder < E > addAll ( Iterator < ? extends E > elements ) { checkNotNull ( elements ) ; while ( elements . hasNext ( ) ) { add ( checkNotNull ( elements . next ( ) ) ) ; } return this ; } public abstract ImmutableCollection < E > build ( ) ; } } 

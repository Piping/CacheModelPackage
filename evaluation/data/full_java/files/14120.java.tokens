package org . gradle . messaging . dispatch ; import org . gradle . internal . concurrent . Stoppable ; import org . gradle . internal . UncheckedException ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . locks . Condition ; import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; public class QueuingDispatch < T > implements Dispatch < T > , Stoppable { private final Lock lock = new ReentrantLock ( ) ; private final Condition condition = lock . newCondition ( ) ; private List < T > queue = new ArrayList < T > ( ) ; private Dispatch < ? super T > dispatch ; public void dispatchTo ( Dispatch < ? super T > dispatch ) { lock . lock ( ) ; try { this . dispatch = dispatch ; for ( T message : queue ) { dispatch . dispatch ( message ) ; } queue = null ; condition . signalAll ( ) ; } finally { lock . unlock ( ) ; } } public void dispatch ( T message ) { lock . lock ( ) ; try { if ( dispatch = = null ) { queue . add ( message ) ; } else { dispatch . dispatch ( message ) ; } } finally { lock . unlock ( ) ; } } public void stop ( ) { lock . lock ( ) ; try { while ( queue ! = null & & ! queue . isEmpty ( ) ) { try { condition . await ( ) ; } catch ( InterruptedException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } } finally { lock . unlock ( ) ; } } } 

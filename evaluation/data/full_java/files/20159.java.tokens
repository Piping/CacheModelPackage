package io . netty . testsuite . transport . socket ; import io . netty . bootstrap . Bootstrap ; import io . netty . buffer . Unpooled ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelInboundHandlerAdapter ; import io . netty . channel . socket . SocketChannel ; import org . junit . Test ; public class WriteBeforeRegisteredTest extends AbstractClientSocketTest { @Test ( timeout = <int> ) public void testWriteBeforeConnect ( ) throws Throwable { run ( ) ; } public void testWriteBeforeConnect ( Bootstrap cb ) throws Throwable { TestHandler h = new TestHandler ( ) ; SocketChannel ch = null ; try { ch = ( SocketChannel ) cb . handler ( h ) . connect ( ) . channel ( ) ; ch . writeAndFlush ( Unpooled . wrappedBuffer ( new byte [ ] { <int> } ) ) ; } finally { if ( ch ! = null ) { ch . close ( ) ; } } } private static class TestHandler extends ChannelInboundHandlerAdapter { @Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { cause . printStackTrace ( ) ; } } } 

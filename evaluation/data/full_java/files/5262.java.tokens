package org . elasticsearch . action . admin . indices . warmer . put ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . search . SearchRequest ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . action . support . master . AcknowledgedRequest ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; import static org . elasticsearch . action . ValidateActions . addValidationError ; public class PutWarmerRequest extends AcknowledgedRequest < PutWarmerRequest > implements IndicesRequest . Replaceable { private String name ; private SearchRequest searchRequest ; public PutWarmerRequest ( ) { } public PutWarmerRequest ( String name ) { this . name = name ; } public PutWarmerRequest name ( String name ) { this . name = name ; return this ; } public String name ( ) { return this . name ; } public PutWarmerRequest searchRequest ( SearchRequest searchRequest ) { this . searchRequest = searchRequest ; return this ; } public PutWarmerRequest searchRequest ( SearchRequestBuilder searchRequest ) { this . searchRequest = searchRequest . request ( ) ; return this ; } public SearchRequest searchRequest ( ) { return this . searchRequest ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( searchRequest = = null ) { validationException = addValidationError ( <str> , validationException ) ; } else { validationException = searchRequest . validate ( ) ; } if ( name = = null ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } @Override public String [ ] indices ( ) { if ( searchRequest = = null ) { throw new IllegalStateException ( <str> ) ; } return searchRequest . indices ( ) ; } @Override public IndicesRequest indices ( String [ ] indices ) { if ( searchRequest = = null ) { throw new IllegalStateException ( <str> ) ; } searchRequest . indices ( indices ) ; return this ; } @Override public IndicesOptions indicesOptions ( ) { if ( searchRequest = = null ) { throw new IllegalStateException ( <str> ) ; } return searchRequest . indicesOptions ( ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; name = in . readString ( ) ; if ( in . readBoolean ( ) ) { searchRequest = new SearchRequest ( ) ; searchRequest . readFrom ( in ) ; } readTimeout ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( name ) ; if ( searchRequest = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; searchRequest . writeTo ( out ) ; } writeTimeout ( out ) ; } } 

package org . gradle . internal . resource ; import org . apache . commons . io . IOUtils ; import org . gradle . api . Action ; import org . gradle . api . Transformer ; import java . io . * ; public abstract class AbstractExternalResource implements ExternalResource { protected abstract InputStream openStream ( ) throws IOException ; private InputStream openBuffered ( ) { try { return new BufferedInputStream ( openStream ( ) ) ; } catch ( FileNotFoundException e ) { throw new ResourceNotFoundException ( getURI ( ) , String . format ( <str> , getURI ( ) ) , e ) ; } catch ( IOException e ) { throw ResourceException . getFailed ( getURI ( ) , e ) ; } } private void close ( InputStream input ) { try { input . close ( ) ; } catch ( IOException e ) { throw ResourceException . getFailed ( getURI ( ) , e ) ; } } public String getName ( ) { return getURI ( ) . toString ( ) ; } public void writeTo ( File destination ) { try { FileOutputStream output = new FileOutputStream ( destination ) ; try { writeTo ( output ) ; } finally { output . close ( ) ; } } catch ( Exception e ) { throw ResourceException . getFailed ( getURI ( ) , e ) ; } } public void writeTo ( OutputStream output ) { try { InputStream input = openStream ( ) ; try { IOUtils . copyLarge ( input , output ) ; } finally { input . close ( ) ; } } catch ( Exception e ) { throw ResourceException . getFailed ( getURI ( ) , e ) ; } } public void withContent ( Action < ? super InputStream > readAction ) { InputStream input = openBuffered ( ) ; try { readAction . execute ( input ) ; } finally { close ( input ) ; } } public < T > T withContent ( Transformer < ? extends T , ? super InputStream > readAction ) { InputStream input = openBuffered ( ) ; try { return readAction . transform ( input ) ; } finally { close ( input ) ; } } @Override public < T > T withContent ( ContentAction < ? extends T > readAction ) { InputStream input = openBuffered ( ) ; try { try { return readAction . execute ( input , getMetaData ( ) ) ; } catch ( IOException e ) { throw ResourceException . getFailed ( getURI ( ) , e ) ; } } finally { close ( input ) ; } } public void close ( ) { } } 

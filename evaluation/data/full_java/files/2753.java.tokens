package jcuda ; public class cuDoubleComplex { public double x ; public double y ; private cuDoubleComplex ( ) { } public static double cuCreal ( cuDoubleComplex x ) { return x . x ; } public static double cuCimag ( cuDoubleComplex x ) { return x . y ; } public static cuDoubleComplex cuCmplx ( double r , double i ) { cuDoubleComplex res = new cuDoubleComplex ( ) ; res . x = r ; res . y = i ; return res ; } public static cuDoubleComplex cuConj ( cuDoubleComplex x ) { return cuCmplx ( cuCreal ( x ) , - cuCimag ( x ) ) ; } public static cuDoubleComplex cuCadd ( cuDoubleComplex x , cuDoubleComplex y ) { return cuCmplx ( cuCreal ( x ) + cuCreal ( y ) , cuCimag ( x ) + cuCimag ( y ) ) ; } public static cuDoubleComplex cuCmul ( cuDoubleComplex x , cuDoubleComplex y ) { cuDoubleComplex prod ; prod = cuCmplx ( ( cuCreal ( x ) * cuCreal ( y ) ) - ( cuCimag ( x ) * cuCimag ( y ) ) , ( cuCreal ( x ) * cuCimag ( y ) ) + ( cuCimag ( x ) * cuCreal ( y ) ) ) ; return prod ; } public static cuDoubleComplex cuCdiv ( cuDoubleComplex x , cuDoubleComplex y ) { cuDoubleComplex quot ; double s = Math . abs ( cuCreal ( y ) ) + Math . abs ( cuCimag ( y ) ) ; double oos = <float> / s ; double ars = cuCreal ( x ) * oos ; double ais = cuCimag ( x ) * oos ; double brs = cuCreal ( y ) * oos ; double bis = cuCimag ( y ) * oos ; s = ( brs * brs ) + ( bis * bis ) ; oos = <float> / s ; quot = cuCmplx ( ( ( ars * brs ) + ( ais * bis ) ) * oos , ( ( ais * brs ) - ( ars * bis ) ) * oos ) ; return quot ; } public static double cuCabs ( cuDoubleComplex x ) { double p = cuCreal ( x ) ; double q = cuCimag ( x ) ; double r ; if ( p = = <int> ) return q ; if ( q = = <int> ) return p ; p = Math . sqrt ( p ) ; q = Math . sqrt ( q ) ; if ( p < q ) { r = p ; p = q ; q = r ; } r = q / p ; return p * Math . sqrt ( <float> + r * r ) ; } public String toString ( ) { return <str> + x + <str> + y + <str> ; } } 

package org . apache . cassandra . db . marshal ; import org . junit . Test ; import static org . junit . Assert . assertSame ; import static org . junit . Assert . fail ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . dht . * ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . SyntaxException ; public class TypeParserTest { @Test public void testParse ( ) throws ConfigurationException , SyntaxException { AbstractType < ? > type ; type = TypeParser . parse ( null ) ; assert type = = BytesType . instance ; type = TypeParser . parse ( <str> ) ; assert type = = BytesType . instance ; type = TypeParser . parse ( <str> ) ; assert type = = BytesType . instance ; type = TypeParser . parse ( <str> ) ; assert type = = LongType . instance ; type = TypeParser . parse ( <str> ) ; assert type = = LongType . instance ; type = TypeParser . parse ( <str> ) ; assert type = = LongType . instance ; type = TypeParser . parse ( <str> ) ; assert type = = LongType . instance ; type = TypeParser . parse ( <str> ) ; assert type = = ReversedType . getInstance ( LongType . instance ) ; assert ( ( ReversedType < ? > ) type ) . baseType = = LongType . instance ; type = TypeParser . parse ( <str> ) ; assert type = = ReversedType . getInstance ( LongType . instance ) ; assert ( ( ReversedType < ? > ) type ) . baseType = = LongType . instance ; } @Test public void testParseError ( ) { try { TypeParser . parse ( <str> ) ; fail ( <str> ) ; } catch ( ConfigurationException e ) { } catch ( SyntaxException e ) { } try { TypeParser . parse ( <str> ) ; fail ( <str> ) ; } catch ( ConfigurationException e ) { } catch ( SyntaxException e ) { } } @Test public void testParsePartitionerOrder ( ) throws ConfigurationException , SyntaxException { for ( IPartitioner partitioner : new IPartitioner [ ] { Murmur3Partitioner . instance , ByteOrderedPartitioner . instance , RandomPartitioner . instance , OrderPreservingPartitioner . instance } ) { AbstractType < ? > type = partitioner . partitionOrdering ( ) ; assertSame ( type , TypeParser . parse ( type . toString ( ) ) ) ; } assertSame ( DatabaseDescriptor . getPartitioner ( ) . partitionOrdering ( ) , TypeParser . parse ( <str> ) ) ; } } 

package org . elasticsearch . rest . action . update ; import org . elasticsearch . action . WriteConsistencyLevel ; import org . elasticsearch . action . index . IndexRequest ; import org . elasticsearch . action . update . UpdateRequest ; import org . elasticsearch . action . update . UpdateResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . rest . BaseRestHandler ; import org . elasticsearch . rest . BytesRestResponse ; import org . elasticsearch . rest . RestChannel ; import org . elasticsearch . rest . RestController ; import org . elasticsearch . rest . RestRequest ; import org . elasticsearch . rest . RestResponse ; import org . elasticsearch . rest . RestStatus ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import org . elasticsearch . rest . action . support . RestStatusToXContentListener ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptParameterParser ; import org . elasticsearch . script . ScriptParameterParser . ScriptParameterValue ; import java . util . HashMap ; import java . util . Map ; import static org . elasticsearch . rest . RestRequest . Method . POST ; public class RestUpdateAction extends BaseRestHandler { @Inject public RestUpdateAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws Exception { UpdateRequest updateRequest = new UpdateRequest ( request . param ( <str> ) , request . param ( <str> ) , request . param ( <str> ) ) ; updateRequest . routing ( request . param ( <str> ) ) ; updateRequest . parent ( request . param ( <str> ) ) ; updateRequest . timeout ( request . paramAsTime ( <str> , updateRequest . timeout ( ) ) ) ; updateRequest . refresh ( request . paramAsBoolean ( <str> , updateRequest . refresh ( ) ) ) ; String consistencyLevel = request . param ( <str> ) ; if ( consistencyLevel ! = null ) { updateRequest . consistencyLevel ( WriteConsistencyLevel . fromString ( consistencyLevel ) ) ; } updateRequest . docAsUpsert ( request . paramAsBoolean ( <str> , updateRequest . docAsUpsert ( ) ) ) ; ScriptParameterParser scriptParameterParser = new ScriptParameterParser ( ) ; scriptParameterParser . parseParams ( request ) ; ScriptParameterValue scriptValue = scriptParameterParser . getDefaultScriptParameterValue ( ) ; if ( scriptValue ! = null ) { Map < String , Object > scriptParams = new HashMap < > ( ) ; for ( Map . Entry < String , String > entry : request . params ( ) . entrySet ( ) ) { if ( entry . getKey ( ) . startsWith ( <str> ) ) { scriptParams . put ( entry . getKey ( ) . substring ( <int> ) , entry . getValue ( ) ) ; } } updateRequest . script ( new Script ( scriptValue . script ( ) , scriptValue . scriptType ( ) , scriptParameterParser . lang ( ) , scriptParams ) ) ; } String sField = request . param ( <str> ) ; if ( sField ! = null ) { String [ ] sFields = Strings . splitStringByCommaToArray ( sField ) ; if ( sFields ! = null ) { updateRequest . fields ( sFields ) ; } } updateRequest . retryOnConflict ( request . paramAsInt ( <str> , updateRequest . retryOnConflict ( ) ) ) ; updateRequest . version ( RestActions . parseVersion ( request ) ) ; updateRequest . versionType ( VersionType . fromString ( request . param ( <str> ) , updateRequest . versionType ( ) ) ) ; if ( request . hasContent ( ) ) { updateRequest . source ( request . content ( ) ) ; IndexRequest upsertRequest = updateRequest . upsertRequest ( ) ; if ( upsertRequest ! = null ) { upsertRequest . routing ( request . param ( <str> ) ) ; upsertRequest . parent ( request . param ( <str> ) ) ; upsertRequest . timestamp ( request . param ( <str> ) ) ; if ( request . hasParam ( <str> ) ) { upsertRequest . ttl ( request . param ( <str> ) ) ; } upsertRequest . version ( RestActions . parseVersion ( request ) ) ; upsertRequest . versionType ( VersionType . fromString ( request . param ( <str> ) , upsertRequest . versionType ( ) ) ) ; } IndexRequest doc = updateRequest . doc ( ) ; if ( doc ! = null ) { doc . routing ( request . param ( <str> ) ) ; doc . parent ( request . param ( <str> ) ) ; doc . timestamp ( request . param ( <str> ) ) ; if ( request . hasParam ( <str> ) ) { doc . ttl ( request . param ( <str> ) ) ; } doc . version ( RestActions . parseVersion ( request ) ) ; doc . versionType ( VersionType . fromString ( request . param ( <str> ) , doc . versionType ( ) ) ) ; } } client . update ( updateRequest , new RestStatusToXContentListener < > ( channel ) ) ; } } 

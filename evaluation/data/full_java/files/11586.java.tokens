package org . gradle . api . internal . initialization ; import groovy . lang . Closure ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . ConfigurationContainer ; import org . gradle . api . artifacts . dsl . DependencyHandler ; import org . gradle . api . artifacts . dsl . RepositoryHandler ; import org . gradle . api . initialization . dsl . ScriptHandler ; import org . gradle . groovy . scripts . ScriptSource ; import org . gradle . util . ConfigureUtil ; import java . io . File ; import java . net . URI ; public abstract class AbstractScriptHandler implements ScriptHandler { private final ScriptSource scriptSource ; private final RepositoryHandler repositoryHandler ; private final DependencyHandler dependencyHandler ; private final ConfigurationContainer configContainer ; private final Configuration classpathConfiguration ; public AbstractScriptHandler ( RepositoryHandler repositoryHandler , DependencyHandler dependencyHandler , ScriptSource scriptSource , ConfigurationContainer configContainer ) { this . repositoryHandler = repositoryHandler ; this . dependencyHandler = dependencyHandler ; this . scriptSource = scriptSource ; this . configContainer = configContainer ; classpathConfiguration = configContainer . create ( CLASSPATH_CONFIGURATION ) ; } public void dependencies ( Closure configureClosure ) { ConfigureUtil . configure ( configureClosure , dependencyHandler ) ; } protected Configuration getClasspathConfiguration ( ) { return classpathConfiguration ; } public DependencyHandler getDependencies ( ) { return dependencyHandler ; } public RepositoryHandler getRepositories ( ) { return repositoryHandler ; } public void repositories ( Closure configureClosure ) { ConfigureUtil . configure ( configureClosure , repositoryHandler ) ; } public ConfigurationContainer getConfigurations ( ) { return configContainer ; } public File getSourceFile ( ) { return scriptSource . getResource ( ) . getFile ( ) ; } public URI getSourceURI ( ) { return scriptSource . getResource ( ) . getURI ( ) ; } } 

package org . gradle . tooling . internal . provider . runner ; import org . gradle . initialization . BuildEventConsumer ; import org . gradle . internal . progress . BuildOperationInternal ; import org . gradle . internal . progress . InternalBuildListener ; import org . gradle . internal . progress . OperationResult ; import org . gradle . internal . progress . OperationStartEvent ; import org . gradle . tooling . internal . provider . events . * ; import java . util . Collections ; class ClientForwardingBuildListener implements InternalBuildListener { private final BuildEventConsumer eventConsumer ; ClientForwardingBuildListener ( BuildEventConsumer eventConsumer ) { this . eventConsumer = eventConsumer ; } @Override public void started ( BuildOperationInternal buildOperation , OperationStartEvent startEvent ) { eventConsumer . dispatch ( new DefaultOperationStartedProgressEvent ( startEvent . getStartTime ( ) , toBuildOperationDescriptor ( buildOperation ) ) ) ; } @Override public void finished ( BuildOperationInternal buildOperation , OperationResult result ) { eventConsumer . dispatch ( new DefaultOperationFinishedProgressEvent ( result . getEndTime ( ) , toBuildOperationDescriptor ( buildOperation ) , adaptResult ( result ) ) ) ; } private DefaultOperationDescriptor toBuildOperationDescriptor ( BuildOperationInternal buildOperation ) { Object id = buildOperation . getId ( ) ; String name = buildOperation . getDisplayName ( ) ; String displayName = buildOperation . getDisplayName ( ) ; Object parentId = buildOperation . getParentId ( ) ; return new DefaultOperationDescriptor ( id , name , displayName , parentId ) ; } private AbstractOperationResult adaptResult ( OperationResult result ) { Throwable failure = result . getFailure ( ) ; long startTime = result . getStartTime ( ) ; long endTime = result . getEndTime ( ) ; if ( failure ! = null ) { return new DefaultFailureResult ( startTime , endTime , Collections . singletonList ( DefaultFailure . fromThrowable ( failure ) ) ) ; } return new DefaultSuccessResult ( startTime , endTime ) ; } } 

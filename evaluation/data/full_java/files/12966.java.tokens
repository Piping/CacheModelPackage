package org . gradle . api . tasks . diagnostics . internal . dependencies ; import org . gradle . api . Action ; import org . gradle . api . Project ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . result . ResolutionResult ; import org . gradle . api . tasks . diagnostics . internal . DependencyReportRenderer ; import org . gradle . api . tasks . diagnostics . internal . TextReportRenderer ; import org . gradle . api . tasks . diagnostics . internal . graph . DependencyGraphRenderer ; import org . gradle . api . tasks . diagnostics . internal . graph . NodeRenderer ; import org . gradle . api . tasks . diagnostics . internal . graph . SimpleNodeRenderer ; import org . gradle . api . tasks . diagnostics . internal . graph . nodes . RenderableDependency ; import org . gradle . api . tasks . diagnostics . internal . graph . nodes . RenderableModuleResult ; import org . gradle . internal . graph . GraphRenderer ; import org . gradle . logging . StyledTextOutput ; import org . gradle . util . GUtil ; import java . io . IOException ; import static org . gradle . logging . StyledTextOutput . Style . * ; public class AsciiDependencyReportRenderer extends TextReportRenderer implements DependencyReportRenderer { private boolean hasConfigs ; DependencyGraphRenderer dependencyGraphRenderer ; @Override public void startProject ( Project project ) { super . startProject ( project ) ; hasConfigs = false ; } @Override public void completeProject ( Project project ) { if ( ! hasConfigs ) { getTextOutput ( ) . withStyle ( Info ) . println ( <str> ) ; } super . completeProject ( project ) ; } public void startConfiguration ( final Configuration configuration ) { if ( hasConfigs ) { getTextOutput ( ) . println ( ) ; } hasConfigs = true ; GraphRenderer renderer = new GraphRenderer ( getTextOutput ( ) ) ; renderer . visit ( new Action < StyledTextOutput > ( ) { public void execute ( StyledTextOutput styledTextOutput ) { getTextOutput ( ) . withStyle ( Identifier ) . text ( configuration . getName ( ) ) ; getTextOutput ( ) . withStyle ( Description ) . text ( getDescription ( configuration ) ) ; } } , true ) ; NodeRenderer nodeRenderer = new SimpleNodeRenderer ( ) ; dependencyGraphRenderer = new DependencyGraphRenderer ( renderer , nodeRenderer ) ; } private String getDescription ( Configuration configuration ) { return GUtil . isTrue ( configuration . getDescription ( ) ) ? <str> + configuration . getDescription ( ) : <str> ; } public void completeConfiguration ( Configuration configuration ) { } public void render ( Configuration configuration ) throws IOException { ResolutionResult result = configuration . getIncoming ( ) . getResolutionResult ( ) ; RenderableDependency root = new RenderableModuleResult ( result . getRoot ( ) ) ; renderNow ( root ) ; } void renderNow ( RenderableDependency root ) { if ( root . getChildren ( ) . isEmpty ( ) ) { getTextOutput ( ) . withStyle ( Info ) . text ( <str> ) ; getTextOutput ( ) . println ( ) ; return ; } dependencyGraphRenderer . render ( root ) ; } public void complete ( ) { if ( dependencyGraphRenderer ! = null ) { dependencyGraphRenderer . printLegend ( ) ; } super . complete ( ) ; } } 

package io . netty . test . udt . nio ; import io . netty . channel . udt . UdtServerChannel ; import io . netty . channel . udt . nio . NioUdtByteAcceptorChannel ; import io . netty . channel . udt . nio . NioUdtByteConnectorChannel ; import io . netty . channel . udt . nio . NioUdtByteRendezvousChannel ; import io . netty . channel . udt . nio . NioUdtProvider ; import io . netty . channel . udt . nio . NioUdtMessageAcceptorChannel ; import io . netty . channel . udt . nio . NioUdtMessageConnectorChannel ; import io . netty . channel . udt . nio . NioUdtMessageRendezvousChannel ; import org . junit . Test ; import static org . junit . Assert . * ; public class NioUdtProviderTest extends AbstractUdtTest { @Test public void provideFactory ( ) { NioUdtByteAcceptorChannel nioUdtByteAcceptorChannel = ( NioUdtByteAcceptorChannel ) NioUdtProvider . BYTE_ACCEPTOR . newChannel ( ) ; NioUdtByteConnectorChannel nioUdtByteConnectorChannel = ( NioUdtByteConnectorChannel ) NioUdtProvider . BYTE_CONNECTOR . newChannel ( ) ; NioUdtByteRendezvousChannel nioUdtByteRendezvousChannel = ( NioUdtByteRendezvousChannel ) NioUdtProvider . BYTE_RENDEZVOUS . newChannel ( ) ; NioUdtMessageAcceptorChannel nioUdtMessageAcceptorChannel = ( NioUdtMessageAcceptorChannel ) NioUdtProvider . MESSAGE_ACCEPTOR . newChannel ( ) ; NioUdtMessageConnectorChannel nioUdtMessageConnectorChannel = ( NioUdtMessageConnectorChannel ) NioUdtProvider . MESSAGE_CONNECTOR . newChannel ( ) ; NioUdtMessageRendezvousChannel nioUdtMessageRendezvousChannel = ( NioUdtMessageRendezvousChannel ) NioUdtProvider . MESSAGE_RENDEZVOUS . newChannel ( ) ; assertNotNull ( nioUdtByteAcceptorChannel ) ; assertNotNull ( nioUdtByteConnectorChannel ) ; assertNotNull ( nioUdtByteRendezvousChannel ) ; assertNotNull ( nioUdtMessageAcceptorChannel ) ; assertNotNull ( nioUdtMessageConnectorChannel ) ; assertNotNull ( nioUdtMessageRendezvousChannel ) ; assertNotNull ( NioUdtProvider . channelUDT ( nioUdtByteAcceptorChannel ) ) ; assertNotNull ( NioUdtProvider . channelUDT ( nioUdtByteConnectorChannel ) ) ; assertNotNull ( NioUdtProvider . channelUDT ( nioUdtByteRendezvousChannel ) ) ; assertNotNull ( NioUdtProvider . channelUDT ( nioUdtMessageAcceptorChannel ) ) ; assertNotNull ( NioUdtProvider . channelUDT ( nioUdtMessageConnectorChannel ) ) ; assertNotNull ( NioUdtProvider . channelUDT ( nioUdtMessageRendezvousChannel ) ) ; assertTrue ( NioUdtProvider . BYTE_ACCEPTOR . newChannel ( ) instanceof UdtServerChannel ) ; assertTrue ( NioUdtProvider . MESSAGE_ACCEPTOR . newChannel ( ) instanceof UdtServerChannel ) ; } } 

package org . gradle . foundation . output ; import org . gradle . foundation . output . definitions . FileLinkDefinition ; import java . util . ArrayList ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class OutputParser { private FileLinkDefinitionLord fileLinkDefinitionLord ; private boolean verifyFileExists ; public OutputParser ( FileLinkDefinitionLord fileLinkDefinitionLord , boolean verifyFileExists ) { this . fileLinkDefinitionLord = fileLinkDefinitionLord ; this . verifyFileExists = verifyFileExists ; } public boolean isVerifyFileExists ( ) { return verifyFileExists ; } public FileLinkDefinitionLord getFileLinkDefinitionLord ( ) { return fileLinkDefinitionLord ; } public List < FileLink > parseText ( String text ) { List < FileLink > fileLinks = new ArrayList < FileLink > ( ) ; Pattern combinedSearchPattern = fileLinkDefinitionLord . getSearchPattern ( ) ; Matcher matcher = combinedSearchPattern . matcher ( text ) ; int index = <int> ; boolean foundAMatch = matcher . find ( index ) ; while ( foundAMatch ) { String matchedText = matcher . group ( ) ; int start = matcher . start ( ) ; int end = matcher . end ( ) ; int nextStarting = start ; FileLinkDefinition fileLinkDefinition = fileLinkDefinitionLord . getMatchingFileLinkDefinition ( matchedText ) ; if ( fileLinkDefinition ! = null ) { nextStarting = fileLinkDefinition . parseFileLink ( text , matchedText , start , end , verifyFileExists , fileLinks ) ; } else { System . out . println ( <str> + text ) ; } if ( nextStarting = = - <int> | | nextStarting < start ) { nextStarting = start ; } index = nextStarting + <int> ; if ( index < text . length ( ) ) { foundAMatch = matcher . find ( index ) ; } else { foundAMatch = false ; } } return fileLinks ; } } 

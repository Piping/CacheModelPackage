package org . junit . tests . experimental . max ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . not ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertThat ; import java . lang . annotation . Annotation ; import java . net . URL ; import java . net . URLClassLoader ; import org . junit . Ignore ; import org . junit . Test ; import org . junit . runner . Description ; public class DescriptionTest { @Test public void parseClass_whenCantParse ( ) { assertNull ( Description . TEST_MECHANISM . getTestClass ( ) ) ; } @Test public void parseMethod_whenCantParse ( ) { assertNull ( Description . TEST_MECHANISM . getMethodName ( ) ) ; } @Test ( expected = IllegalArgumentException . class ) public void createSuiteDescription_whenZeroLength ( ) { Description . createSuiteDescription ( <str> ) ; } @Test ( expected = IllegalArgumentException . class ) public void createSuiteDescription_whenNull ( ) { Description . createSuiteDescription ( ( String ) null ) ; } @Test public void parseClassAndMethodNoAnnotations ( ) throws Exception { Description description = Description . createTestDescription ( Description . class , <str> ) ; assertThat ( description . getClassName ( ) , equalTo ( <str> ) ) ; assertThat ( description . getMethodName ( ) , equalTo ( <str> ) ) ; assertThat ( description . getAnnotations ( ) . size ( ) , equalTo ( <int> ) ) ; } @Test public void parseClassAndMethodWithAnnotations ( ) throws Exception { Annotation [ ] annotations = DescriptionTest . class . getMethod ( <str> ) . getDeclaredAnnotations ( ) ; Description description = Description . createTestDescription ( Description . class , <str> , annotations ) ; assertThat ( description . getClassName ( ) , equalTo ( <str> ) ) ; assertThat ( description . getMethodName ( ) , equalTo ( <str> ) ) ; assertThat ( description . getAnnotations ( ) . size ( ) , equalTo ( <int> ) ) ; } @Test public void parseClassNameAndMethodUniqueId ( ) throws Exception { Description description = Description . createTestDescription ( <str> , <str> , <int> ) ; assertThat ( description . getClassName ( ) , equalTo ( <str> ) ) ; assertThat ( description . getMethodName ( ) , equalTo ( <str> ) ) ; assertThat ( description . getAnnotations ( ) . size ( ) , equalTo ( <int> ) ) ; } @Test public void sameNamesButDifferentUniqueIdAreNotEqual ( ) throws Exception { assertThat ( Description . createTestDescription ( <str> , <str> , <int> ) , not ( equalTo ( Description . createTestDescription ( <str> , <str> , <int> ) ) ) ) ; } @Test public void usesPassedInClassObject ( ) throws Exception { class URLClassLoader2 extends URLClassLoader { URLClassLoader2 ( URL . . . urls ) { super ( urls ) ; } @Override public Class < ? > findClass ( String name ) throws ClassNotFoundException { return super . findClass ( name ) ; } } URL classpath = Sweet . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) ; URLClassLoader2 loader = new URLClassLoader2 ( classpath ) ; Class < ? > clazz = loader . findClass ( Sweet . class . getName ( ) ) ; assertEquals ( loader , clazz . getClassLoader ( ) ) ; Description d = Description . createSuiteDescription ( clazz ) ; assertEquals ( clazz , d . getTestClass ( ) ) ; assertNull ( d . getMethodName ( ) ) ; assertEquals ( <int> , d . getAnnotations ( ) . size ( ) ) ; assertEquals ( Ignore . class , d . getAnnotations ( ) . iterator ( ) . next ( ) . annotationType ( ) ) ; d = Description . createTestDescription ( clazz , <str> ) ; assertEquals ( clazz , d . getTestClass ( ) ) ; assertEquals ( <str> , d . getMethodName ( ) ) ; assertEquals ( <int> , d . getAnnotations ( ) . size ( ) ) ; d = Description . createTestDescription ( clazz , <str> , clazz . getMethod ( <str> ) . getAnnotations ( ) ) ; assertEquals ( clazz , d . getTestClass ( ) ) ; assertEquals ( <str> , d . getMethodName ( ) ) ; assertEquals ( <int> , d . getAnnotations ( ) . size ( ) ) ; assertEquals ( Test . class , d . getAnnotations ( ) . iterator ( ) . next ( ) . annotationType ( ) ) ; d = d . childlessCopy ( ) ; assertEquals ( clazz , d . getTestClass ( ) ) ; assertEquals ( <str> , d . getMethodName ( ) ) ; assertEquals ( <int> , d . getAnnotations ( ) . size ( ) ) ; assertEquals ( Test . class , d . getAnnotations ( ) . iterator ( ) . next ( ) . annotationType ( ) ) ; } @Ignore private static class Sweet { @Test public void tessed ( ) { } } } 

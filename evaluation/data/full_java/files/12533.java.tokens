package org . gradle . api . internal . artifacts . ivyservice . dependencysubstitution ; import org . gradle . api . Action ; import org . gradle . api . artifacts . DependencySubstitution ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . internal . artifacts . DependencySubstitutionInternal ; import org . gradle . internal . component . model . DependencyMetaData ; import org . gradle . internal . resolve . ModuleVersionResolveException ; import org . gradle . internal . resolve . resolver . DependencyToComponentIdResolver ; import org . gradle . internal . resolve . result . BuildableComponentIdResolveResult ; public class DependencySubstitutionResolver implements DependencyToComponentIdResolver { private final DependencyToComponentIdResolver resolver ; private final Action < DependencySubstitution > rule ; public DependencySubstitutionResolver ( DependencyToComponentIdResolver resolver , Action < DependencySubstitution > rule ) { this . resolver = resolver ; this . rule = rule ; } public void resolve ( DependencyMetaData dependency , BuildableComponentIdResolveResult result ) { ComponentSelector selector = dependency . getSelector ( ) ; DependencySubstitutionInternal details = new DefaultDependencySubstitution ( selector , dependency . getRequested ( ) ) ; try { rule . execute ( details ) ; } catch ( Throwable e ) { result . failed ( new ModuleVersionResolveException ( selector , e ) ) ; return ; } if ( details . isUpdated ( ) ) { resolver . resolve ( dependency . withTarget ( details . getTarget ( ) ) , result ) ; result . setSelectionReason ( details . getSelectionReason ( ) ) ; return ; } resolver . resolve ( dependency , result ) ; } } 

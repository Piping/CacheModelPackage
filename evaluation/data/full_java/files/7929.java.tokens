package org . elasticsearch . common . logging . jdk ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . test . ESTestCase ; import java . util . ArrayList ; import java . util . List ; import java . util . logging . Handler ; import java . util . logging . Level ; import java . util . logging . LogRecord ; import java . util . logging . Logger ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class JDKESLoggerTests extends ESTestCase { private ESLogger esTestLogger ; private TestHandler testHandler ; @Override public void setUp ( ) throws Exception { super . setUp ( ) ; JdkESLoggerFactory esTestLoggerFactory = new JdkESLoggerFactory ( ) ; esTestLogger = esTestLoggerFactory . newInstance ( <str> ) ; Logger testLogger = ( ( JdkESLogger ) esTestLogger ) . logger ( ) ; testLogger . setLevel ( Level . FINEST ) ; assertThat ( testLogger . getLevel ( ) , equalTo ( Level . FINEST ) ) ; testHandler = new TestHandler ( ) ; testLogger . addHandler ( testHandler ) ; } public void testLocationInfoTest ( ) { esTestLogger . error ( <str> ) ; esTestLogger . warn ( <str> ) ; esTestLogger . info ( <str> ) ; esTestLogger . debug ( <str> ) ; esTestLogger . trace ( <str> ) ; List < LogRecord > records = testHandler . getEvents ( ) ; assertThat ( records , notNullValue ( ) ) ; assertThat ( records . size ( ) , equalTo ( <int> ) ) ; LogRecord record = records . get ( <int> ) ; assertThat ( record , notNullValue ( ) ) ; assertThat ( record . getLevel ( ) , equalTo ( Level . SEVERE ) ) ; assertThat ( record . getMessage ( ) , equalTo ( <str> ) ) ; assertThat ( record . getSourceClassName ( ) , equalTo ( JDKESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( record . getSourceMethodName ( ) , equalTo ( <str> ) ) ; record = records . get ( <int> ) ; assertThat ( record , notNullValue ( ) ) ; assertThat ( record . getLevel ( ) , equalTo ( Level . WARNING ) ) ; assertThat ( record . getMessage ( ) , equalTo ( <str> ) ) ; assertThat ( record . getSourceClassName ( ) , equalTo ( JDKESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( record . getSourceMethodName ( ) , equalTo ( <str> ) ) ; record = records . get ( <int> ) ; assertThat ( record , notNullValue ( ) ) ; assertThat ( record . getLevel ( ) , equalTo ( Level . INFO ) ) ; assertThat ( record . getMessage ( ) , equalTo ( <str> ) ) ; assertThat ( record . getSourceClassName ( ) , equalTo ( JDKESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( record . getSourceMethodName ( ) , equalTo ( <str> ) ) ; record = records . get ( <int> ) ; assertThat ( record , notNullValue ( ) ) ; assertThat ( record . getLevel ( ) , equalTo ( Level . FINE ) ) ; assertThat ( record . getMessage ( ) , equalTo ( <str> ) ) ; assertThat ( record . getSourceClassName ( ) , equalTo ( JDKESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( record . getSourceMethodName ( ) , equalTo ( <str> ) ) ; record = records . get ( <int> ) ; assertThat ( record , notNullValue ( ) ) ; assertThat ( record . getLevel ( ) , equalTo ( Level . FINEST ) ) ; assertThat ( record . getMessage ( ) , equalTo ( <str> ) ) ; assertThat ( record . getSourceClassName ( ) , equalTo ( JDKESLoggerTests . class . getCanonicalName ( ) ) ) ; assertThat ( record . getSourceMethodName ( ) , equalTo ( <str> ) ) ; } public void testSetLogLevelString ( ) { esTestLogger . setLevel ( <str> ) ; assertThat ( esTestLogger . getLevel ( ) , equalTo ( <str> ) ) ; esTestLogger . setLevel ( <str> ) ; assertThat ( esTestLogger . getLevel ( ) , equalTo ( <str> ) ) ; esTestLogger . setLevel ( <str> ) ; assertThat ( esTestLogger . getLevel ( ) , equalTo ( <str> ) ) ; esTestLogger . setLevel ( <str> ) ; assertThat ( esTestLogger . getLevel ( ) , equalTo ( <str> ) ) ; esTestLogger . setLevel ( <str> ) ; assertThat ( esTestLogger . getLevel ( ) , equalTo ( <str> ) ) ; } private static class TestHandler extends Handler { private List < LogRecord > records = new ArrayList < > ( ) ; @Override public void close ( ) { } public List < LogRecord > getEvents ( ) { return records ; } @Override public void publish ( LogRecord record ) { record . getSourceClassName ( ) ; records . add ( record ) ; } @Override public void flush ( ) { } } } 

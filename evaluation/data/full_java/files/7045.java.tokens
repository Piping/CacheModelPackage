package org . elasticsearch . rest . action . get ; import org . elasticsearch . action . get . MultiGetRequest ; import org . elasticsearch . action . get . MultiGetResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestActions ; import org . elasticsearch . rest . action . support . RestToXContentListener ; import org . elasticsearch . search . fetch . source . FetchSourceContext ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestRequest . Method . POST ; public class RestMultiGetAction extends BaseRestHandler { private final boolean allowExplicitIndex ; @Inject public RestMultiGetAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( POST , <str> , this ) ; this . allowExplicitIndex = settings . getAsBoolean ( <str> , true ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws Exception { MultiGetRequest multiGetRequest = new MultiGetRequest ( ) ; multiGetRequest . refresh ( request . paramAsBoolean ( <str> , multiGetRequest . refresh ( ) ) ) ; multiGetRequest . preference ( request . param ( <str> ) ) ; multiGetRequest . realtime ( request . paramAsBoolean ( <str> , null ) ) ; multiGetRequest . ignoreErrorsOnGeneratedFields ( request . paramAsBoolean ( <str> , false ) ) ; String [ ] sFields = null ; String sField = request . param ( <str> ) ; if ( sField ! = null ) { sFields = Strings . splitStringByCommaToArray ( sField ) ; } FetchSourceContext defaultFetchSource = FetchSourceContext . parseFromRestRequest ( request ) ; multiGetRequest . add ( request . param ( <str> ) , request . param ( <str> ) , sFields , defaultFetchSource , request . param ( <str> ) , RestActions . getRestContent ( request ) , allowExplicitIndex ) ; client . multiGet ( multiGetRequest , new RestToXContentListener < MultiGetResponse > ( channel ) ) ; } } 

package org . elasticsearch . search . highlight ; import org . apache . lucene . search . highlight . Encoder ; import org . apache . lucene . search . vectorhighlight . BaseFragmentsBuilder ; import org . apache . lucene . search . vectorhighlight . BoundaryScanner ; import org . apache . lucene . search . vectorhighlight . CustomFieldQuery ; import org . apache . lucene . search . vectorhighlight . FieldFragList ; import org . apache . lucene . search . vectorhighlight . FieldPhraseList . WeightedPhraseInfo ; import org . apache . lucene . search . vectorhighlight . FieldQuery ; import org . apache . lucene . search . vectorhighlight . FragListBuilder ; import org . apache . lucene . search . vectorhighlight . FragmentsBuilder ; import org . apache . lucene . search . vectorhighlight . ScoreOrderFragmentsBuilder ; import org . apache . lucene . search . vectorhighlight . SimpleBoundaryScanner ; import org . apache . lucene . search . vectorhighlight . SimpleFieldFragList ; import org . apache . lucene . search . vectorhighlight . SimpleFragListBuilder ; import org . apache . lucene . search . vectorhighlight . SingleFragListBuilder ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . text . StringText ; import org . elasticsearch . index . mapper . FieldMapper ; import org . elasticsearch . search . fetch . FetchPhaseExecutionException ; import org . elasticsearch . search . fetch . FetchSubPhase ; import org . elasticsearch . search . highlight . vectorhighlight . SimpleFragmentsBuilder ; import org . elasticsearch . search . highlight . vectorhighlight . SourceScoreOrderFragmentsBuilder ; import org . elasticsearch . search . highlight . vectorhighlight . SourceSimpleFragmentsBuilder ; import org . elasticsearch . search . internal . SearchContext ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; public class FastVectorHighlighter implements Highlighter { private static final SimpleBoundaryScanner DEFAULT_BOUNDARY_SCANNER = new SimpleBoundaryScanner ( ) ; private static final String CACHE_KEY = <str> ; private final Boolean termVectorMultiValue ; public FastVectorHighlighter ( Settings settings ) { this . termVectorMultiValue = settings . getAsBoolean ( <str> , true ) ; } @Override public HighlightField highlight ( HighlighterContext highlighterContext ) { SearchContextHighlight . Field field = highlighterContext . field ; SearchContext context = highlighterContext . context ; FetchSubPhase . HitContext hitContext = highlighterContext . hitContext ; FieldMapper mapper = highlighterContext . mapper ; if ( canHighlight ( mapper ) = = false ) { throw new IllegalArgumentException ( <str> + highlighterContext . fieldName + <str> ) ; } Encoder encoder = field . fieldOptions ( ) . encoder ( ) . equals ( <str> ) ? HighlightUtils . Encoders . HTML : HighlightUtils . Encoders . DEFAULT ; if ( ! hitContext . cache ( ) . containsKey ( CACHE_KEY ) ) { hitContext . cache ( ) . put ( CACHE_KEY , new HighlighterEntry ( ) ) ; } HighlighterEntry cache = ( HighlighterEntry ) hitContext . cache ( ) . get ( CACHE_KEY ) ; try { FieldQuery fieldQuery ; if ( field . fieldOptions ( ) . requireFieldMatch ( ) ) { if ( cache . fieldMatchFieldQuery = = null ) { cache . fieldMatchFieldQuery = new CustomFieldQuery ( highlighterContext . query , hitContext . topLevelReader ( ) , true , field . fieldOptions ( ) . requireFieldMatch ( ) ) ; } fieldQuery = cache . fieldMatchFieldQuery ; } else { if ( cache . noFieldMatchFieldQuery = = null ) { cache . noFieldMatchFieldQuery = new CustomFieldQuery ( highlighterContext . query , hitContext . topLevelReader ( ) , true , field . fieldOptions ( ) . requireFieldMatch ( ) ) ; } fieldQuery = cache . noFieldMatchFieldQuery ; } MapperHighlightEntry entry = cache . mappers . get ( mapper ) ; if ( entry = = null ) { FragListBuilder fragListBuilder ; BaseFragmentsBuilder fragmentsBuilder ; BoundaryScanner boundaryScanner = DEFAULT_BOUNDARY_SCANNER ; if ( field . fieldOptions ( ) . boundaryMaxScan ( ) ! = SimpleBoundaryScanner . DEFAULT_MAX_SCAN | | field . fieldOptions ( ) . boundaryChars ( ) ! = SimpleBoundaryScanner . DEFAULT_BOUNDARY_CHARS ) { boundaryScanner = new SimpleBoundaryScanner ( field . fieldOptions ( ) . boundaryMaxScan ( ) , field . fieldOptions ( ) . boundaryChars ( ) ) ; } boolean forceSource = context . highlight ( ) . forceSource ( field ) ; if ( field . fieldOptions ( ) . numberOfFragments ( ) = = <int> ) { fragListBuilder = new SingleFragListBuilder ( ) ; if ( ! forceSource & & mapper . fieldType ( ) . stored ( ) ) { fragmentsBuilder = new SimpleFragmentsBuilder ( mapper , field . fieldOptions ( ) . preTags ( ) , field . fieldOptions ( ) . postTags ( ) , boundaryScanner ) ; } else { fragmentsBuilder = new SourceSimpleFragmentsBuilder ( mapper , context , hitContext , field . fieldOptions ( ) . preTags ( ) , field . fieldOptions ( ) . postTags ( ) , boundaryScanner ) ; } } else { fragListBuilder = field . fieldOptions ( ) . fragmentOffset ( ) = = - <int> ? new SimpleFragListBuilder ( ) : new SimpleFragListBuilder ( field . fieldOptions ( ) . fragmentOffset ( ) ) ; if ( field . fieldOptions ( ) . scoreOrdered ( ) ) { if ( ! forceSource & & mapper . fieldType ( ) . stored ( ) ) { fragmentsBuilder = new ScoreOrderFragmentsBuilder ( field . fieldOptions ( ) . preTags ( ) , field . fieldOptions ( ) . postTags ( ) , boundaryScanner ) ; } else { fragmentsBuilder = new SourceScoreOrderFragmentsBuilder ( mapper , context , hitContext , field . fieldOptions ( ) . preTags ( ) , field . fieldOptions ( ) . postTags ( ) , boundaryScanner ) ; } } else { if ( ! forceSource & & mapper . fieldType ( ) . stored ( ) ) { fragmentsBuilder = new SimpleFragmentsBuilder ( mapper , field . fieldOptions ( ) . preTags ( ) , field . fieldOptions ( ) . postTags ( ) , boundaryScanner ) ; } else { fragmentsBuilder = new SourceSimpleFragmentsBuilder ( mapper , context , hitContext , field . fieldOptions ( ) . preTags ( ) , field . fieldOptions ( ) . postTags ( ) , boundaryScanner ) ; } } } fragmentsBuilder . setDiscreteMultiValueHighlighting ( termVectorMultiValue ) ; entry = new MapperHighlightEntry ( ) ; entry . fragListBuilder = fragListBuilder ; entry . fragmentsBuilder = fragmentsBuilder ; if ( cache . fvh = = null ) { cache . fvh = new org . apache . lucene . search . vectorhighlight . FastVectorHighlighter ( ) ; } CustomFieldQuery . highlightFilters . set ( field . fieldOptions ( ) . highlightFilter ( ) ) ; cache . mappers . put ( mapper , entry ) ; } cache . fvh . setPhraseLimit ( field . fieldOptions ( ) . phraseLimit ( ) ) ; String [ ] fragments ; int numberOfFragments = field . fieldOptions ( ) . numberOfFragments ( ) = = <int> ? Integer . MAX_VALUE : field . fieldOptions ( ) . numberOfFragments ( ) ; int fragmentCharSize = field . fieldOptions ( ) . numberOfFragments ( ) = = <int> ? Integer . MAX_VALUE : field . fieldOptions ( ) . fragmentCharSize ( ) ; if ( field . fieldOptions ( ) . matchedFields ( ) ! = null & & ! field . fieldOptions ( ) . matchedFields ( ) . isEmpty ( ) ) { fragments = cache . fvh . getBestFragments ( fieldQuery , hitContext . reader ( ) , hitContext . docId ( ) , mapper . fieldType ( ) . names ( ) . indexName ( ) , field . fieldOptions ( ) . matchedFields ( ) , fragmentCharSize , numberOfFragments , entry . fragListBuilder , entry . fragmentsBuilder , field . fieldOptions ( ) . preTags ( ) , field . fieldOptions ( ) . postTags ( ) , encoder ) ; } else { fragments = cache . fvh . getBestFragments ( fieldQuery , hitContext . reader ( ) , hitContext . docId ( ) , mapper . fieldType ( ) . names ( ) . indexName ( ) , fragmentCharSize , numberOfFragments , entry . fragListBuilder , entry . fragmentsBuilder , field . fieldOptions ( ) . preTags ( ) , field . fieldOptions ( ) . postTags ( ) , encoder ) ; } if ( fragments ! = null & & fragments . length > <int> ) { return new HighlightField ( highlighterContext . fieldName , StringText . convertFromStringArray ( fragments ) ) ; } int noMatchSize = highlighterContext . field . fieldOptions ( ) . noMatchSize ( ) ; if ( noMatchSize > <int> ) { FieldFragList fieldFragList = new SimpleFieldFragList ( - <int> ) ; fieldFragList . add ( <int> , noMatchSize , Collections . < WeightedPhraseInfo > emptyList ( ) ) ; fragments = entry . fragmentsBuilder . createFragments ( hitContext . reader ( ) , hitContext . docId ( ) , mapper . fieldType ( ) . names ( ) . indexName ( ) , fieldFragList , <int> , field . fieldOptions ( ) . preTags ( ) , field . fieldOptions ( ) . postTags ( ) , encoder ) ; if ( fragments ! = null & & fragments . length > <int> ) { return new HighlightField ( highlighterContext . fieldName , StringText . convertFromStringArray ( fragments ) ) ; } } return null ; } catch ( Exception e ) { throw new FetchPhaseExecutionException ( context , <str> + highlighterContext . fieldName + <str> , e ) ; } } @Override public boolean canHighlight ( FieldMapper fieldMapper ) { return fieldMapper . fieldType ( ) . storeTermVectors ( ) & & fieldMapper . fieldType ( ) . storeTermVectorOffsets ( ) & & fieldMapper . fieldType ( ) . storeTermVectorPositions ( ) ; } private class MapperHighlightEntry { public FragListBuilder fragListBuilder ; public FragmentsBuilder fragmentsBuilder ; public org . apache . lucene . search . highlight . Highlighter highlighter ; } private class HighlighterEntry { public org . apache . lucene . search . vectorhighlight . FastVectorHighlighter fvh ; public FieldQuery noFieldMatchFieldQuery ; public FieldQuery fieldMatchFieldQuery ; public Map < FieldMapper , MapperHighlightEntry > mappers = new HashMap < > ( ) ; } } 

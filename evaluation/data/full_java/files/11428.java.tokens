package org . gradle . api . internal . classloading ; import org . gradle . api . GradleException ; import org . gradle . util . VersionNumber ; import java . lang . reflect . Method ; public class GroovySystemLoaderFactory { public static final NoOpGroovySystemLoader NOT_BROKEN = new NoOpGroovySystemLoader ( ) ; public GroovySystemLoader forClassLoader ( ClassLoader classLoader ) { try { Class < ? > groovySystem ; try { groovySystem = classLoader . loadClass ( <str> ) ; } catch ( ClassNotFoundException e ) { return NOT_BROKEN ; } if ( groovySystem . getClassLoader ( ) ! = classLoader ) { return NOT_BROKEN ; } String versionString ; try { Method getVersion = groovySystem . getDeclaredMethod ( <str> ) ; versionString = ( String ) getVersion . invoke ( null ) ; } catch ( NoSuchMethodException ex ) { return NOT_BROKEN ; } VersionNumber groovyVersion = VersionNumber . parse ( versionString ) ; boolean isFaultyGroovy = groovyVersion . getMajor ( ) = = <int> & & groovyVersion . getMinor ( ) = = <int> ; return isFaultyGroovy ? new LeakyOnJava7GroovySystemLoader ( classLoader ) : NOT_BROKEN ; } catch ( Exception e ) { throw new GradleException ( <str> + classLoader , e ) ; } } } 

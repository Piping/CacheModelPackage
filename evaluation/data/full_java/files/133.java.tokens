package org . apache . cassandra . cql3 ; import java . nio . ByteBuffer ; import java . util . List ; import java . util . Locale ; import java . util . concurrent . ConcurrentMap ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import com . google . common . collect . MapMaker ; import org . apache . cassandra . cache . IMeasurableMemory ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . cql3 . selection . Selectable ; import org . apache . cassandra . cql3 . selection . Selector ; import org . apache . cassandra . cql3 . selection . SimpleSelector ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . db . marshal . UTF8Type ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . ObjectSizes ; import org . apache . cassandra . utils . memory . AbstractAllocator ; public class ColumnIdentifier extends Selectable implements IMeasurableMemory , Comparable < ColumnIdentifier > { private static final Pattern PATTERN_DOUBLE_QUOTE = Pattern . compile ( <str> , Pattern . LITERAL ) ; public final ByteBuffer bytes ; private final String text ; public final long prefixComparison ; private final boolean interned ; private static final Pattern UNQUOTED_IDENTIFIER = Pattern . compile ( <str> ) ; private static final long EMPTY_SIZE = ObjectSizes . measure ( new ColumnIdentifier ( ByteBufferUtil . EMPTY_BYTE_BUFFER , <str> , false ) ) ; private static final ConcurrentMap < ByteBuffer , ColumnIdentifier > internedInstances = new MapMaker ( ) . weakValues ( ) . makeMap ( ) ; private static long prefixComparison ( ByteBuffer bytes ) { long prefix = <int> ; ByteBuffer read = bytes . duplicate ( ) ; int i = <int> ; while ( read . hasRemaining ( ) & & i < <int> ) { prefix < < = <int> ; prefix | = read . get ( ) & <hex> ; i + + ; } prefix < < = ( <int> - i ) * <int> ; prefix ^ = Long . MIN_VALUE ; return prefix ; } public ColumnIdentifier ( String rawText , boolean keepCase ) { this . text = keepCase ? rawText : rawText . toLowerCase ( Locale . US ) ; this . bytes = ByteBufferUtil . bytes ( this . text ) ; this . prefixComparison = prefixComparison ( bytes ) ; this . interned = false ; } public ColumnIdentifier ( ByteBuffer bytes , AbstractType < ? > type ) { this ( bytes , type . getString ( bytes ) , false ) ; } private ColumnIdentifier ( ByteBuffer bytes , String text , boolean interned ) { this . bytes = bytes ; this . text = text ; this . interned = interned ; this . prefixComparison = prefixComparison ( bytes ) ; } public static ColumnIdentifier getInterned ( ByteBuffer bytes , AbstractType < ? > type ) { return getInterned ( bytes , type . getString ( bytes ) ) ; } public static ColumnIdentifier getInterned ( String rawText , boolean keepCase ) { String text = keepCase ? rawText : rawText . toLowerCase ( Locale . US ) ; ByteBuffer bytes = ByteBufferUtil . bytes ( text ) ; return getInterned ( bytes , text ) ; } public static ColumnIdentifier getInterned ( ByteBuffer bytes , String text ) { ColumnIdentifier id = internedInstances . get ( bytes ) ; if ( id ! = null ) return id ; ColumnIdentifier created = new ColumnIdentifier ( bytes , text , true ) ; ColumnIdentifier previous = internedInstances . putIfAbsent ( bytes , created ) ; return previous = = null ? created : previous ; } public boolean isInterned ( ) { return interned ; } @Override public final int hashCode ( ) { return bytes . hashCode ( ) ; } @Override public final boolean equals ( Object o ) { if ( this = = o ) return true ; if ( ! ( o instanceof ColumnIdentifier ) ) return false ; ColumnIdentifier that = ( ColumnIdentifier ) o ; return bytes . equals ( that . bytes ) ; } @Override public String toString ( ) { return text ; } public String toCQLString ( ) { return maybeQuote ( text ) ; } public long unsharedHeapSize ( ) { return EMPTY_SIZE + ObjectSizes . sizeOnHeapOf ( bytes ) + ObjectSizes . sizeOf ( text ) ; } public long unsharedHeapSizeExcludingData ( ) { return EMPTY_SIZE + ObjectSizes . sizeOnHeapExcludingData ( bytes ) + ObjectSizes . sizeOf ( text ) ; } public ColumnIdentifier clone ( AbstractAllocator allocator ) { return interned ? this : new ColumnIdentifier ( allocator . clone ( bytes ) , text , false ) ; } public Selector . Factory newSelectorFactory ( CFMetaData cfm , List < ColumnDefinition > defs ) throws InvalidRequestException { ColumnDefinition def = cfm . getColumnDefinition ( this ) ; if ( def = = null ) throw new InvalidRequestException ( String . format ( <str> , this ) ) ; return SimpleSelector . newFactory ( def , addAndGetIndex ( def , defs ) ) ; } public int compareTo ( ColumnIdentifier that ) { int c = Long . compare ( this . prefixComparison , that . prefixComparison ) ; if ( c ! = <int> ) return c ; if ( this = = that ) return <int> ; return ByteBufferUtil . compareUnsigned ( this . bytes , that . bytes ) ; } public static interface Raw extends Selectable . Raw { public ColumnIdentifier prepare ( CFMetaData cfm ) ; public String toCQLString ( ) ; } public static class Literal implements Raw { private final String rawText ; private final String text ; public Literal ( String rawText , boolean keepCase ) { this . rawText = rawText ; this . text = keepCase ? rawText : rawText . toLowerCase ( Locale . US ) ; } public ColumnIdentifier prepare ( CFMetaData cfm ) { if ( ! cfm . isStaticCompactTable ( ) ) return getInterned ( text , true ) ; AbstractType < ? > thriftColumnNameType = cfm . thriftColumnNameType ( ) ; if ( thriftColumnNameType instanceof UTF8Type ) return getInterned ( text , true ) ; ByteBuffer bufferName = ByteBufferUtil . bytes ( text ) ; for ( ColumnDefinition def : cfm . allColumns ( ) ) { if ( def . name . bytes . equals ( bufferName ) ) return def . name ; } return getInterned ( thriftColumnNameType . fromString ( rawText ) , text ) ; } public boolean processesSelection ( ) { return false ; } @Override public final int hashCode ( ) { return text . hashCode ( ) ; } @Override public final boolean equals ( Object o ) { if ( ! ( o instanceof Literal ) ) return false ; Literal that = ( Literal ) o ; return text . equals ( that . text ) ; } @Override public String toString ( ) { return text ; } public String toCQLString ( ) { return maybeQuote ( text ) ; } } public static class ColumnIdentifierValue implements Raw { private final ColumnIdentifier identifier ; public ColumnIdentifierValue ( ColumnIdentifier identifier ) { this . identifier = identifier ; } public ColumnIdentifier prepare ( CFMetaData cfm ) { return identifier ; } public boolean processesSelection ( ) { return false ; } @Override public final int hashCode ( ) { return identifier . hashCode ( ) ; } @Override public final boolean equals ( Object o ) { if ( ! ( o instanceof ColumnIdentifierValue ) ) return false ; ColumnIdentifierValue that = ( ColumnIdentifierValue ) o ; return identifier . equals ( that . identifier ) ; } @Override public String toString ( ) { return identifier . toString ( ) ; } public String toCQLString ( ) { return maybeQuote ( identifier . text ) ; } } static String maybeQuote ( String text ) { if ( UNQUOTED_IDENTIFIER . matcher ( text ) . matches ( ) ) return text ; return <str> + PATTERN_DOUBLE_QUOTE . matcher ( text ) . replaceAll ( Matcher . quoteReplacement ( <str> ) ) + <str> ; } } 

package org . apache . cassandra . cql3 . statements ; import org . apache . cassandra . auth . * ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . RoleName ; import org . apache . cassandra . exceptions . * ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . transport . messages . ResultMessage ; public class CreateRoleStatement extends AuthenticationStatement { private final RoleResource role ; private final RoleOptions opts ; private final boolean ifNotExists ; public CreateRoleStatement ( RoleName name , RoleOptions options , boolean ifNotExists ) { this . role = RoleResource . role ( name . getName ( ) ) ; this . opts = options ; this . ifNotExists = ifNotExists ; } public void checkAccess ( ClientState state ) throws UnauthorizedException { super . checkPermission ( state , Permission . CREATE , RoleResource . root ( ) ) ; if ( opts . getSuperuser ( ) . isPresent ( ) ) { if ( opts . getSuperuser ( ) . get ( ) & & ! state . getUser ( ) . isSuper ( ) ) throw new UnauthorizedException ( <str> ) ; } } public void validate ( ClientState state ) throws RequestValidationException { opts . validate ( ) ; if ( role . getRoleName ( ) . isEmpty ( ) ) throw new InvalidRequestException ( <str> ) ; state . ensureNotAnonymous ( ) ; if ( ! ifNotExists & & DatabaseDescriptor . getRoleManager ( ) . isExistingRole ( role ) ) throw new InvalidRequestException ( String . format ( <str> , role . getRoleName ( ) ) ) ; } public ResultMessage execute ( ClientState state ) throws RequestExecutionException , RequestValidationException { if ( ifNotExists & & DatabaseDescriptor . getRoleManager ( ) . isExistingRole ( role ) ) return null ; DatabaseDescriptor . getRoleManager ( ) . createRole ( state . getUser ( ) , role , opts ) ; grantPermissionsToCreator ( state ) ; return null ; } private void grantPermissionsToCreator ( ClientState state ) { if ( ! state . getUser ( ) . isAnonymous ( ) ) { try { DatabaseDescriptor . getAuthorizer ( ) . grant ( AuthenticatedUser . SYSTEM_USER , role . applicablePermissions ( ) , role , RoleResource . role ( state . getUser ( ) . getName ( ) ) ) ; } catch ( UnsupportedOperationException e ) { } } } } 

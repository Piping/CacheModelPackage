package org . nd4j . linalg . util ; import java . math . BigInteger ; import java . util . Vector ; class Factorial { static Vector < BigInteger > a = new Vector < > ( ) ; public Factorial ( ) { if ( a . size ( ) = = <int> ) { a . add ( BigInteger . ONE ) ; a . add ( BigInteger . ONE ) ; } } public BigInteger at ( int n ) { while ( a . size ( ) < = n ) { final int lastn = a . size ( ) - <int> ; final BigInteger nextn = new BigInteger ( <str> + ( lastn + <int> ) ) ; a . add ( a . elementAt ( lastn ) . multiply ( nextn ) ) ; } return a . elementAt ( n ) ; } } 

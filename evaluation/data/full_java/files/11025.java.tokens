package org . gradle . buildinit . plugins . internal ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . Factory ; public class LanguageLibraryProjectInitDescriptor extends TemplateBasedProjectInitDescriptor { private final String language ; private final FileResolver fileResolver ; private final TemplateOperationFactory templateOperationFactory ; public LanguageLibraryProjectInitDescriptor ( String language , TemplateOperationFactory templateOperationFactory , FileResolver fileResolver ) { this . language = language ; this . fileResolver = fileResolver ; this . templateOperationFactory = templateOperationFactory ; } protected TemplateOperation whenNoSourcesAvailable ( TemplateOperation . . . operations ) { return new ConditionalTemplateOperation ( new Factory < Boolean > ( ) { public Boolean create ( ) { return fileResolver . resolveFilesAsTree ( String . format ( <str> , language ) ) . isEmpty ( ) | | fileResolver . resolveFilesAsTree ( String . format ( <str> , language ) ) . isEmpty ( ) ; } } , operations ) ; } protected TemplateOperation fromClazzTemplate ( String clazzTemplate , String sourceSetName ) { String targetFileName = clazzTemplate . substring ( clazzTemplate . lastIndexOf ( <str> ) + <int> ) . replace ( <str> , <str> ) ; return templateOperationFactory . newTemplateOperation ( ) . withTemplate ( clazzTemplate ) . withTarget ( String . format ( <str> , sourceSetName , language , targetFileName ) ) . create ( ) ; } } 

package org . elasticsearch . snapshots ; import org . elasticsearch . action . admin . cluster . snapshots . create . CreateSnapshotRequest ; import org . elasticsearch . action . admin . cluster . snapshots . restore . RestoreSnapshotRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; public class SnapshotRequestsTests extends ESTestCase { public void testRestoreSnapshotRequestParsing ( ) throws IOException { RestoreSnapshotRequest request = new RestoreSnapshotRequest ( <str> , <str> ) ; XContentBuilder builder = jsonBuilder ( ) . startObject ( ) ; if ( randomBoolean ( ) ) { builder . field ( <str> , <str> ) ; } else { builder . startArray ( <str> ) ; builder . value ( <str> ) ; builder . value ( <str> ) ; builder . value ( <str> ) ; builder . endArray ( ) ; } IndicesOptions indicesOptions = IndicesOptions . fromOptions ( randomBoolean ( ) , randomBoolean ( ) , randomBoolean ( ) , randomBoolean ( ) ) ; if ( indicesOptions . expandWildcardsClosed ( ) ) { if ( indicesOptions . expandWildcardsOpen ( ) ) { builder . field ( <str> , <str> ) ; } else { builder . field ( <str> , <str> ) ; } } else { if ( indicesOptions . expandWildcardsOpen ( ) ) { builder . field ( <str> , <str> ) ; } else { builder . field ( <str> , <str> ) ; } } builder . field ( <str> , indicesOptions . allowNoIndices ( ) ) ; builder . field ( <str> , <str> ) ; builder . field ( <str> , <str> ) ; boolean partial = randomBoolean ( ) ; builder . field ( <str> , partial ) ; builder . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) ; builder . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) ; if ( randomBoolean ( ) ) { builder . field ( <str> , <str> ) ; } else { builder . startArray ( <str> ) ; builder . value ( <str> ) ; builder . value ( <str> ) ; builder . endArray ( ) ; } byte [ ] bytes = builder . endObject ( ) . bytes ( ) . toBytes ( ) ; request . source ( bytes ) ; assertEquals ( <str> , request . repository ( ) ) ; assertEquals ( <str> , request . snapshot ( ) ) ; assertArrayEquals ( request . indices ( ) , new String [ ] { <str> , <str> , <str> } ) ; assertEquals ( <str> , request . renamePattern ( ) ) ; assertEquals ( <str> , request . renameReplacement ( ) ) ; assertEquals ( partial , request . partial ( ) ) ; assertEquals ( <str> , request . settings ( ) . get ( <str> ) ) ; assertArrayEquals ( request . ignoreIndexSettings ( ) , new String [ ] { <str> , <str> } ) ; } public void testCreateSnapshotRequestParsing ( ) throws IOException { CreateSnapshotRequest request = new CreateSnapshotRequest ( <str> , <str> ) ; XContentBuilder builder = jsonBuilder ( ) . startObject ( ) ; if ( randomBoolean ( ) ) { builder . field ( <str> , <str> ) ; } else { builder . startArray ( <str> ) ; builder . value ( <str> ) ; builder . value ( <str> ) ; builder . value ( <str> ) ; builder . endArray ( ) ; } IndicesOptions indicesOptions = IndicesOptions . fromOptions ( randomBoolean ( ) , randomBoolean ( ) , randomBoolean ( ) , randomBoolean ( ) ) ; if ( indicesOptions . expandWildcardsClosed ( ) ) { if ( indicesOptions . expandWildcardsOpen ( ) ) { builder . field ( <str> , <str> ) ; } else { builder . field ( <str> , <str> ) ; } } else { if ( indicesOptions . expandWildcardsOpen ( ) ) { builder . field ( <str> , <str> ) ; } else { builder . field ( <str> , <str> ) ; } } builder . field ( <str> , indicesOptions . allowNoIndices ( ) ) ; boolean partial = randomBoolean ( ) ; builder . field ( <str> , partial ) ; builder . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) ; builder . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) ; if ( randomBoolean ( ) ) { builder . field ( <str> , <str> ) ; } else { builder . startArray ( <str> ) ; builder . value ( <str> ) ; builder . value ( <str> ) ; builder . endArray ( ) ; } byte [ ] bytes = builder . endObject ( ) . bytes ( ) . toBytes ( ) ; request . source ( bytes ) ; assertEquals ( <str> , request . repository ( ) ) ; assertEquals ( <str> , request . snapshot ( ) ) ; assertArrayEquals ( request . indices ( ) , new String [ ] { <str> , <str> , <str> } ) ; assertEquals ( partial , request . partial ( ) ) ; assertEquals ( <str> , request . settings ( ) . get ( <str> ) ) ; } } 

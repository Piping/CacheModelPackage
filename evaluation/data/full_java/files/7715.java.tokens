package org . elasticsearch . action ; import org . elasticsearch . action . index . IndexRequest ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . transport . TransportClient ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . atomic . AtomicReference ; public class ListenerActionIT extends ESIntegTestCase { public void testThreadedListeners ( ) throws Throwable { final CountDownLatch latch = new CountDownLatch ( <int> ) ; final AtomicReference < Throwable > failure = new AtomicReference < > ( ) ; final AtomicReference < String > threadName = new AtomicReference < > ( ) ; Client client = client ( ) ; IndexRequest request = new IndexRequest ( <str> , <str> , <str> ) ; if ( randomBoolean ( ) ) { request . source ( <str> , <str> ) ; } client . index ( request , new ActionListener < IndexResponse > ( ) { @Override public void onResponse ( IndexResponse indexResponse ) { threadName . set ( Thread . currentThread ( ) . getName ( ) ) ; latch . countDown ( ) ; } @Override public void onFailure ( Throwable e ) { threadName . set ( Thread . currentThread ( ) . getName ( ) ) ; failure . set ( e ) ; latch . countDown ( ) ; } } ) ; latch . await ( ) ; boolean shouldBeThreaded = DiscoveryNode . clientNode ( client . settings ( ) ) | | TransportClient . CLIENT_TYPE . equals ( client . settings ( ) . get ( Client . CLIENT_TYPE_SETTING ) ) ; if ( shouldBeThreaded ) { assertTrue ( threadName . get ( ) . contains ( <str> ) ) ; } else { assertFalse ( threadName . get ( ) . contains ( <str> ) ) ; } } } 

package org . gradle . api . internal . tasks . compile . incremental . deps ; import java . util . HashMap ; import java . util . Map ; public class ClassDependentsAccumulator { private final Map < String , DependentsSet > dependents = new HashMap < String , DependentsSet > ( ) ; private final String packagePrefix ; public ClassDependentsAccumulator ( String packagePrefix ) { this . packagePrefix = packagePrefix ; } public void addClass ( String className , boolean dependencyToAll , Iterable < String > classDependencies ) { if ( className . startsWith ( packagePrefix ) ) { rememberClass ( className ) . setDependencyToAll ( dependencyToAll ) ; } for ( String dependency : classDependencies ) { if ( ! dependency . equals ( className ) & & dependency . startsWith ( packagePrefix ) ) { DefaultDependentsSet d = rememberClass ( dependency ) ; if ( className . startsWith ( packagePrefix ) ) { d . addDependent ( className ) ; } } } } private DefaultDependentsSet rememberClass ( String className ) { DependentsSet d = dependents . get ( className ) ; if ( d = = null ) { d = new DefaultDependentsSet ( ) ; dependents . put ( className , d ) ; } return ( DefaultDependentsSet ) d ; } public Map < String , DependentsSet > getDependentsMap ( ) { return dependents ; } } 

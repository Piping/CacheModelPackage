package org . elasticsearch . indices . mapping ; import org . elasticsearch . action . admin . indices . mapping . get . GetFieldMappingsResponse ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . test . ESIntegTestCase ; import org . hamcrest . Matchers ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ; import static org . elasticsearch . cluster . metadata . IndexMetaData . INDEX_METADATA_BLOCK ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_METADATA ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . hasEntry ; import static org . hamcrest . Matchers . hasKey ; import static org . hamcrest . Matchers . not ; import static org . hamcrest . Matchers . nullValue ; public class SimpleGetFieldMappingsIT extends ESIntegTestCase { public void testGetMappingsWhereThereAreNone ( ) { createIndex ( <str> ) ; ensureYellow ( ) ; GetFieldMappingsResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( ) . get ( ) ; assertThat ( response . mappings ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . mappings ( ) . get ( <str> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , Matchers . nullValue ( ) ) ; } private XContentBuilder getMappingForType ( String type ) throws IOException { return jsonBuilder ( ) . startObject ( ) . startObject ( type ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; } public void testSimpleGetFieldMappings ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , getMappingForType ( <str> ) ) . addMapping ( <str> , getMappingForType ( <str> ) ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , getMappingForType ( <str> ) ) . addMapping ( <str> , getMappingForType ( <str> ) ) ) ; ensureYellow ( ) ; GetFieldMappingsResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( <str> ) . setTypes ( <str> ) . setFields ( <str> , <str> ) . get ( ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . mappings ( ) . get ( <str> ) , not ( hasKey ( <str> ) ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . mappings ( ) , not ( hasKey ( <str> ) ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( <str> ) . setTypes ( <str> ) . setFields ( <str> , <str> ) . get ( ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( ) . setTypes ( <str> ) . setFields ( <str> ) . get ( ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( <str> ) . setFields ( <str> ) . get ( ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( ) . setFields ( <str> ) . get ( ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) , hasKey ( <str> ) ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) , nullValue ( ) ) ; } @SuppressWarnings ( <str> ) public void testSimpleGetFieldMappingsWithDefaults ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , getMappingForType ( <str> ) ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . get ( ) ; ensureYellow ( ) ; GetFieldMappingsResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( ) . setFields ( <str> , <str> , <str> ) . includeDefaults ( true ) . get ( ) ; assertThat ( ( Map < String , Object > ) response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) . get ( <str> ) , hasEntry ( <str> , ( Object ) <str> ) ) ; assertThat ( ( Map < String , Object > ) response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) . get ( <str> ) , hasEntry ( <str> , ( Object ) <str> ) ) ; assertThat ( ( Map < String , Object > ) response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) . get ( <str> ) , hasEntry ( <str> , ( Object ) <str> ) ) ; assertThat ( ( Map < String , Object > ) response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) . get ( <str> ) , hasEntry ( <str> , ( Object ) <str> ) ) ; assertThat ( ( Map < String , Object > ) response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) . get ( <str> ) , hasEntry ( <str> , ( Object ) <str> ) ) ; assertThat ( ( Map < String , Object > ) response . fieldMappings ( <str> , <str> , <str> ) . sourceAsMap ( ) . get ( <str> ) , hasEntry ( <str> , ( Object ) <str> ) ) ; } public void testSimpleGetFieldMappingsWithPretty ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , getMappingForType ( <str> ) ) ) ; Map < String , String > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; ensureYellow ( ) ; GetFieldMappingsResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( <str> ) . setTypes ( <str> ) . setFields ( <str> , <str> ) . get ( ) ; XContentBuilder responseBuilder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) ; responseBuilder . startObject ( ) ; response . toXContent ( responseBuilder , new ToXContent . MapParams ( params ) ) ; responseBuilder . endObject ( ) ; String responseStrings = responseBuilder . string ( ) ; XContentBuilder prettyJsonBuilder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) ; prettyJsonBuilder . copyCurrentStructure ( XContentFactory . xContent ( responseStrings ) . createParser ( responseStrings ) ) ; assertThat ( responseStrings , equalTo ( prettyJsonBuilder . string ( ) ) ) ; params . put ( <str> , <str> ) ; response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( <str> ) . setTypes ( <str> ) . setFields ( <str> , <str> ) . get ( ) ; responseBuilder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) . lfAtEnd ( ) ; responseBuilder . startObject ( ) ; response . toXContent ( responseBuilder , new ToXContent . MapParams ( params ) ) ; responseBuilder . endObject ( ) ; responseStrings = responseBuilder . string ( ) ; prettyJsonBuilder = XContentFactory . jsonBuilder ( ) . prettyPrint ( ) ; prettyJsonBuilder . copyCurrentStructure ( XContentFactory . xContent ( responseStrings ) . createParser ( responseStrings ) ) ; assertThat ( responseStrings , not ( equalTo ( prettyJsonBuilder . string ( ) ) ) ) ; } public void testGetFieldMappingsWithBlocks ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , getMappingForType ( <str> ) ) . addMapping ( <str> , getMappingForType ( <str> ) ) ) ; ensureYellow ( ) ; for ( String block : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE , SETTING_READ_ONLY ) ) { try { enableIndexBlock ( <str> , block ) ; GetFieldMappingsResponse response = client ( ) . admin ( ) . indices ( ) . prepareGetFieldMappings ( <str> ) . setTypes ( <str> ) . setFields ( <str> , <str> ) . get ( ) ; assertThat ( response . fieldMappings ( <str> , <str> , <str> ) . fullName ( ) , equalTo ( <str> ) ) ; } finally { disableIndexBlock ( <str> , block ) ; } } try { enableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( ) , INDEX_METADATA_BLOCK ) ; } finally { disableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; } } } 

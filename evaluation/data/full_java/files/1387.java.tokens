package org . apache . cassandra . cql3 . validation . entities ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . TreeMap ; import java . util . TreeSet ; import org . junit . Test ; import com . datastax . driver . core . DataType ; import com . datastax . driver . core . TupleType ; import com . datastax . driver . core . TupleValue ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . transport . Server ; public class UFPureScriptTupleCollectionTest extends CQLTester { @Test public void testJavascriptTupleTypeCollection ( ) throws Throwable { String tupleTypeDef = <str> ; createTable ( <str> + tupleTypeDef + <str> ) ; String fTup1 = createFunction ( KEYSPACE_PER_TEST , tupleTypeDef , <str> + tupleTypeDef + <str> + <str> + <str> + <str> + <str> + <str> ) ; String fTup2 = createFunction ( KEYSPACE_PER_TEST , tupleTypeDef , <str> + tupleTypeDef + <str> + <str> + <str> + <str> + <str> + <str> ) ; String fTup3 = createFunction ( KEYSPACE_PER_TEST , tupleTypeDef , <str> + tupleTypeDef + <str> + <str> + <str> + <str> + <str> + <str> ) ; String fTup4 = createFunction ( KEYSPACE_PER_TEST , tupleTypeDef , <str> + tupleTypeDef + <str> + <str> + <str> + <str> + <str> + <str> ) ; String fTup5 = createFunction ( KEYSPACE_PER_TEST , tupleTypeDef , <str> + tupleTypeDef + <str> + <str> + <str> + <str> + <str> + <str> ) ; List < Double > list = Arrays . asList ( <float> , <float> , <float> ) ; Set < String > set = new TreeSet < > ( Arrays . asList ( <str> , <str> , <str> ) ) ; Map < Integer , Boolean > map = new TreeMap < > ( ) ; map . put ( <int> , true ) ; map . put ( <int> , false ) ; map . put ( <int> , true ) ; Object t = tuple ( <float> , list , set , map ) ; execute ( <str> , t ) ; assertRows ( execute ( <str> + fTup1 + <str> ) , row ( t ) ) ; assertRows ( execute ( <str> + fTup2 + <str> ) , row ( <float> ) ) ; assertRows ( execute ( <str> + fTup3 + <str> ) , row ( list ) ) ; assertRows ( execute ( <str> + fTup4 + <str> ) , row ( set ) ) ; assertRows ( execute ( <str> + fTup5 + <str> ) , row ( map ) ) ; TupleType tType = tupleTypeOf ( Server . VERSION_3 , DataType . cdouble ( ) , DataType . list ( DataType . cdouble ( ) ) , DataType . set ( DataType . text ( ) ) , DataType . map ( DataType . cint ( ) , DataType . cboolean ( ) ) ) ; TupleValue tup = tType . newValue ( <float> , list , set , map ) ; for ( int version : PROTOCOL_VERSIONS ) { assertRowsNet ( version , executeNet ( version , <str> + fTup1 + <str> ) , row ( tup ) ) ; assertRowsNet ( version , executeNet ( version , <str> + fTup2 + <str> ) , row ( <float> ) ) ; assertRowsNet ( version , executeNet ( version , <str> + fTup3 + <str> ) , row ( list ) ) ; assertRowsNet ( version , executeNet ( version , <str> + fTup4 + <str> ) , row ( set ) ) ; assertRowsNet ( version , executeNet ( version , <str> + fTup5 + <str> ) , row ( map ) ) ; } } } 

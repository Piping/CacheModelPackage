package org . eclipse . debug . internal . ui ; import org . eclipse . core . expressions . PropertyTester ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IDebugModelProvider ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IDisconnect ; import org . eclipse . debug . core . model . IProcess ; import org . eclipse . debug . core . model . ITerminate ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; public class DebugModelPropertyTester extends PropertyTester { public static final String MODEL_TYPE_PROPERTY = <str> ; public static final String IS_TERMINATED_OR_DISCONNECTED_PROPERTY = <str> ; @Override public boolean test ( Object receiver , String property , Object [ ] args , Object expectedValue ) { if ( MODEL_TYPE_PROPERTY . equals ( property ) ) { IDebugTarget target = null ; if ( receiver instanceof IProcess ) { target = ( ( IProcess ) receiver ) . getAdapter ( IDebugTarget . class ) ; } else if ( receiver instanceof IDebugElement ) { target = ( ( IDebugElement ) receiver ) . getAdapter ( IDebugTarget . class ) ; } if ( target ! = null ) { if ( expectedValue = = null | | expectedValue . equals ( IInternalDebugCoreConstants . EMPTY_STRING ) ) { return false ; } if ( expectedValue . equals ( target . getModelIdentifier ( ) ) ) { return true ; } } IDebugModelProvider modelProvider = null ; if ( receiver instanceof IAdaptable ) { modelProvider = ( ( IAdaptable ) receiver ) . getAdapter ( IDebugModelProvider . class ) ; } else { modelProvider = Platform . getAdapterManager ( ) . getAdapter ( receiver , IDebugModelProvider . class ) ; } if ( modelProvider ! = null ) { String [ ] ids = modelProvider . getModelIdentifiers ( ) ; for ( int i = <int> ; i < ids . length ; i + + ) { if ( ids [ i ] . equals ( expectedValue ) ) { return true ; } } return false ; } return <str> . equals ( expectedValue ) ; } else if ( IS_TERMINATED_OR_DISCONNECTED_PROPERTY . equals ( property ) ) { if ( receiver instanceof ITerminate & & ( ( ITerminate ) receiver ) . isTerminated ( ) ) { return true ; } if ( receiver instanceof IDisconnect & & ( ( IDisconnect ) receiver ) . isDisconnected ( ) ) { return true ; } else { return false ; } } else { return false ; } } } 

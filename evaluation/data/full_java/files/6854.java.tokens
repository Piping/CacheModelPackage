package org . elasticsearch . indices . fielddata . cache ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . index . SegmentReader ; import org . apache . lucene . util . Accountable ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . cache . Cache ; import org . elasticsearch . common . cache . CacheBuilder ; import org . elasticsearch . common . cache . RemovalListener ; import org . elasticsearch . common . cache . RemovalNotification ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . lucene . index . ElasticsearchDirectoryReader ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . index . Index ; import org . elasticsearch . index . fielddata . AtomicFieldData ; import org . elasticsearch . index . fielddata . FieldDataType ; import org . elasticsearch . index . fielddata . IndexFieldData ; import org . elasticsearch . index . fielddata . IndexFieldDataCache ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . index . shard . ShardUtils ; import org . elasticsearch . threadpool . ThreadPool ; import java . util . ArrayList ; import java . util . List ; import java . util . function . ToLongBiFunction ; public class IndicesFieldDataCache extends AbstractComponent implements RemovalListener < IndicesFieldDataCache . Key , Accountable > { public static final String FIELDDATA_CLEAN_INTERVAL_SETTING = <str> ; public static final String INDICES_FIELDDATA_CACHE_SIZE_KEY = <str> ; private final IndicesFieldDataCacheListener indicesFieldDataCacheListener ; private final Cache < Key , Accountable > cache ; private final TimeValue cleanInterval ; private final ThreadPool threadPool ; private volatile boolean closed = false ; @Inject public IndicesFieldDataCache ( Settings settings , IndicesFieldDataCacheListener indicesFieldDataCacheListener , ThreadPool threadPool ) { super ( settings ) ; this . threadPool = threadPool ; this . indicesFieldDataCacheListener = indicesFieldDataCacheListener ; final String size = settings . get ( INDICES_FIELDDATA_CACHE_SIZE_KEY , <str> ) ; final long sizeInBytes = settings . getAsMemory ( INDICES_FIELDDATA_CACHE_SIZE_KEY , <str> ) . bytes ( ) ; CacheBuilder < Key , Accountable > cacheBuilder = CacheBuilder . < Key , Accountable > builder ( ) . removalListener ( this ) ; if ( sizeInBytes > <int> ) { cacheBuilder . setMaximumWeight ( sizeInBytes ) . weigher ( new FieldDataWeigher ( ) ) ; } logger . debug ( <str> , size , new ByteSizeValue ( sizeInBytes ) ) ; cache = cacheBuilder . build ( ) ; this . cleanInterval = settings . getAsTime ( FIELDDATA_CLEAN_INTERVAL_SETTING , TimeValue . timeValueMinutes ( <int> ) ) ; threadPool . schedule ( this . cleanInterval , ThreadPool . Names . SAME , new FieldDataCacheCleaner ( this . cache , this . logger , this . threadPool , this . cleanInterval ) ) ; } public void close ( ) { cache . invalidateAll ( ) ; this . closed = true ; } public IndexFieldDataCache buildIndexFieldDataCache ( IndexFieldDataCache . Listener listener , Index index , MappedFieldType . Names fieldNames , FieldDataType fieldDataType ) { return new IndexFieldCache ( logger , cache , index , fieldNames , fieldDataType , indicesFieldDataCacheListener , listener ) ; } public Cache < Key , Accountable > getCache ( ) { return cache ; } @Override public void onRemoval ( RemovalNotification < Key , Accountable > notification ) { Key key = notification . getKey ( ) ; assert key ! = null & & key . listeners ! = null ; IndexFieldCache indexCache = key . indexCache ; final Accountable value = notification . getValue ( ) ; for ( IndexFieldDataCache . Listener listener : key . listeners ) { try { listener . onRemoval ( key . shardId , indexCache . fieldNames , indexCache . fieldDataType , notification . getRemovalReason ( ) = = RemovalNotification . RemovalReason . EVICTED , value . ramBytesUsed ( ) ) ; } catch ( Throwable e ) { logger . error ( <str> , e ) ; } } } public static class FieldDataWeigher implements ToLongBiFunction < Key , Accountable > { @Override public long applyAsLong ( Key key , Accountable ramUsage ) { int weight = ( int ) Math . min ( ramUsage . ramBytesUsed ( ) , Integer . MAX_VALUE ) ; return weight = = <int> ? <int> : weight ; } } static class IndexFieldCache implements IndexFieldDataCache , SegmentReader . CoreClosedListener , IndexReader . ReaderClosedListener { private final ESLogger logger ; final Index index ; final MappedFieldType . Names fieldNames ; final FieldDataType fieldDataType ; private final Cache < Key , Accountable > cache ; private final Listener [ ] listeners ; IndexFieldCache ( ESLogger logger , final Cache < Key , Accountable > cache , Index index , MappedFieldType . Names fieldNames , FieldDataType fieldDataType , Listener . . . listeners ) { this . logger = logger ; this . listeners = listeners ; this . index = index ; this . fieldNames = fieldNames ; this . fieldDataType = fieldDataType ; this . cache = cache ; } @Override public < FD extends AtomicFieldData , IFD extends IndexFieldData < FD > > FD load ( final LeafReaderContext context , final IFD indexFieldData ) throws Exception { final ShardId shardId = ShardUtils . extractShardId ( context . reader ( ) ) ; final Key key = new Key ( this , context . reader ( ) . getCoreCacheKey ( ) , shardId ) ; final Accountable accountable = cache . computeIfAbsent ( key , k - > { context . reader ( ) . addCoreClosedListener ( IndexFieldCache . this ) ; for ( Listener listener : this . listeners ) { k . listeners . add ( listener ) ; } final AtomicFieldData fieldData = indexFieldData . loadDirect ( context ) ; for ( Listener listener : k . listeners ) { try { listener . onCache ( shardId , fieldNames , fieldDataType , fieldData ) ; } catch ( Throwable e ) { logger . error ( <str> , e ) ; } } return fieldData ; } ) ; return ( FD ) accountable ; } @Override public < FD extends AtomicFieldData , IFD extends IndexFieldData . Global < FD > > IFD load ( final DirectoryReader indexReader , final IFD indexFieldData ) throws Exception { final ShardId shardId = ShardUtils . extractShardId ( indexReader ) ; final Key key = new Key ( this , indexReader . getCoreCacheKey ( ) , shardId ) ; final Accountable accountable = cache . computeIfAbsent ( key , k - > { ElasticsearchDirectoryReader . addReaderCloseListener ( indexReader , IndexFieldCache . this ) ; for ( Listener listener : this . listeners ) { k . listeners . add ( listener ) ; } final Accountable ifd = ( Accountable ) indexFieldData . localGlobalDirect ( indexReader ) ; for ( Listener listener : k . listeners ) { try { listener . onCache ( shardId , fieldNames , fieldDataType , ifd ) ; } catch ( Throwable e ) { logger . error ( <str> , e ) ; } } return ifd ; } ) ; return ( IFD ) accountable ; } @Override public void onClose ( Object coreKey ) { cache . invalidate ( new Key ( this , coreKey , null ) ) ; } @Override public void onClose ( IndexReader reader ) { cache . invalidate ( new Key ( this , reader . getCoreCacheKey ( ) , null ) ) ; } @Override public void clear ( ) { for ( Key key : cache . keys ( ) ) { if ( key . indexCache . index . equals ( index ) ) { cache . invalidate ( key ) ; } } cache . refresh ( ) ; } @Override public void clear ( String fieldName ) { for ( Key key : cache . keys ( ) ) { if ( key . indexCache . index . equals ( index ) ) { if ( key . indexCache . fieldNames . fullName ( ) . equals ( fieldName ) ) { cache . invalidate ( key ) ; } } } cache . refresh ( ) ; } } public static class Key { public final IndexFieldCache indexCache ; public final Object readerKey ; public final ShardId shardId ; public final List < IndexFieldDataCache . Listener > listeners = new ArrayList < > ( ) ; Key ( IndexFieldCache indexCache , Object readerKey , @Nullable ShardId shardId ) { this . indexCache = indexCache ; this . readerKey = readerKey ; this . shardId = shardId ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; Key key = ( Key ) o ; if ( ! indexCache . equals ( key . indexCache ) ) return false ; if ( ! readerKey . equals ( key . readerKey ) ) return false ; return true ; } @Override public int hashCode ( ) { int result = indexCache . hashCode ( ) ; result = <int> * result + readerKey . hashCode ( ) ; return result ; } } public class FieldDataCacheCleaner implements Runnable { private final Cache < Key , Accountable > cache ; private final ESLogger logger ; private final ThreadPool threadPool ; private final TimeValue interval ; public FieldDataCacheCleaner ( Cache cache , ESLogger logger , ThreadPool threadPool , TimeValue interval ) { this . cache = cache ; this . logger = logger ; this . threadPool = threadPool ; this . interval = interval ; } @Override public void run ( ) { long startTimeNS = System . nanoTime ( ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( <str> ) ; } try { this . cache . refresh ( ) ; } catch ( Exception e ) { logger . warn ( <str> , e ) ; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( <str> , TimeValue . nsecToMSec ( System . nanoTime ( ) - startTimeNS ) ) ; } if ( closed = = false ) { threadPool . schedule ( interval , ThreadPool . Names . SAME , this ) ; } } } } 

package com . badlogic . gdx . tests . bullet ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . physics . bullet . collision . Collision ; import com . badlogic . gdx . physics . bullet . collision . btCollisionObject ; import com . badlogic . gdx . physics . bullet . linearmath . LinearMathConstants ; public class KinematicTest extends BaseBulletTest { BulletEntity kinematicBox , kinematicBox1 , kinematicBox2 , kinematicBox3 ; Vector3 position ; final static Vector3 position1 = new Vector3 ( <float> , <float> , <float> ) ; final static Vector3 position2 = new Vector3 ( <float> , <float> , <float> ) ; final static Vector3 position3 = new Vector3 ( <int> f , <float> , <float> ) ; float angle ; @Override public void create ( ) { super . create ( ) ; world . add ( <str> , <float> , <float> , <float> ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; kinematicBox1 = world . add ( <str> , position1 . x , position1 . y , position1 . z ) ; kinematicBox1 . setColor ( Color . RED ) ; kinematicBox1 . body . setCollisionFlags ( kinematicBox1 . body . getCollisionFlags ( ) | btCollisionObject . CollisionFlags . CF_KINEMATIC_OBJECT ) ; kinematicBox2 = world . add ( <str> , position2 . x , position2 . y , position2 . z ) ; kinematicBox2 . setColor ( Color . RED ) ; kinematicBox2 . body . setCollisionFlags ( kinematicBox2 . body . getCollisionFlags ( ) | btCollisionObject . CollisionFlags . CF_KINEMATIC_OBJECT ) ; ; kinematicBox3 = world . add ( <str> , position3 . x , position3 . y , position3 . z ) ; kinematicBox3 . setColor ( Color . RED ) ; kinematicBox3 . body . setCollisionFlags ( kinematicBox3 . body . getCollisionFlags ( ) | btCollisionObject . CollisionFlags . CF_KINEMATIC_OBJECT ) ; ; kinematicBox3 . body . setActivationState ( Collision . DISABLE_DEACTIVATION ) ; angle = <int> f ; } @Override public void render ( ) { angle = angle + Gdx . graphics . getDeltaTime ( ) * <int> f / <float> ; kinematicBox3 . transform . idt ( ) . rotate ( Vector3 . Y , <int> f - <float> * angle ) . translate ( position3 ) ; if ( angle > = <int> f ) { angle = <int> ; kinematicBox = ( kinematicBox = = kinematicBox1 ) ? kinematicBox2 : kinematicBox1 ; position = ( position = = position1 ) ? position2 : position1 ; } kinematicBox . transform . idt ( ) . rotate ( Vector3 . Y , angle ) . translate ( position ) ; kinematicBox . body . setActivationState ( Collision . ACTIVE_TAG ) ; super . render ( ) ; } @Override public void dispose ( ) { kinematicBox = kinematicBox1 = kinematicBox2 = kinematicBox3 = null ; position = null ; super . dispose ( ) ; } @Override public boolean tap ( float x , float y , int count , int button ) { shoot ( x , y ) ; return true ; } } 

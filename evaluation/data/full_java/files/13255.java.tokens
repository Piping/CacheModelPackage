package org . gradle . integtests . fixtures . daemon ; import com . google . common . base . Splitter ; import com . google . common . collect . Lists ; import org . gradle . launcher . daemon . context . DaemonContext ; import org . gradle . launcher . daemon . context . DefaultDaemonContext ; import java . io . BufferedReader ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . FileReader ; import java . io . IOException ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class DaemonContextParser { public static DaemonContext parseFromFile ( File file ) { try { BufferedReader reader = new BufferedReader ( new FileReader ( file ) ) ; for ( String line = reader . readLine ( ) ; line ! = null ; line = reader . readLine ( ) ) { DaemonContext context = parseFrom ( line ) ; if ( context ! = null ) { return context ; } } } catch ( FileNotFoundException e ) { throw new IllegalStateException ( <str> + file . getAbsolutePath ( ) + <str> , e ) ; } catch ( IOException e ) { throw new IllegalStateException ( <str> + file . getAbsolutePath ( ) + <str> , e ) ; } throw new IllegalStateException ( <str> + file . getAbsolutePath ( ) + <str> ) ; } public static DaemonContext parseFromString ( String source ) { DaemonContext context = parseFrom ( source ) ; if ( context = = null ) { throw new IllegalStateException ( <str> + source + <str> ) ; } return context ; } private static DaemonContext parseFrom ( String source ) { Pattern pattern = Pattern . compile ( <str> , Pattern . MULTILINE + Pattern . DOTALL ) ; Matcher matcher = pattern . matcher ( source ) ; if ( matcher . matches ( ) ) { String uid = matcher . group ( <int> ) = = null ? null : matcher . group ( <int> ) . substring ( <str> . length ( ) ) ; String javaHome = matcher . group ( <int> ) ; String daemonRegistryDir = matcher . group ( <int> ) ; String pidStr = matcher . group ( <int> ) ; Long pid = pidStr . equals ( <str> ) ? null : Long . parseLong ( pidStr ) ; Integer idleTimeout = Integer . decode ( matcher . group ( <int> ) ) ; List < String > jvmOpts = Lists . newArrayList ( Splitter . on ( <str> ) . split ( matcher . group ( <int> ) ) ) ; return new DefaultDaemonContext ( uid , new File ( javaHome ) , new File ( daemonRegistryDir ) , pid , idleTimeout , jvmOpts ) ; } else { return null ; } } } 

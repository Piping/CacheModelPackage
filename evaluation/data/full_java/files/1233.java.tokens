package org . apache . cassandra . utils ; import java . util . concurrent . TimeUnit ; import org . apache . cassandra . concurrent . ScheduledExecutors ; import org . apache . cassandra . config . Config ; import com . google . common . annotations . VisibleForTesting ; public class NanoTimeToCurrentTimeMillis { private static final String TIMESTAMP_UPDATE_INTERVAL_PROPERTY = Config . PROPERTY_PREFIX + <str> ; private static final long TIMESTAMP_UPDATE_INTERVAL = Long . getLong ( TIMESTAMP_UPDATE_INTERVAL_PROPERTY , <int> ) ; private static volatile long TIMESTAMP_BASE [ ] = new long [ ] { System . currentTimeMillis ( ) , System . nanoTime ( ) } ; public static long convert ( long nanoTime ) { final long timestampBase [ ] = TIMESTAMP_BASE ; return timestampBase [ <int> ] + TimeUnit . NANOSECONDS . toMillis ( nanoTime - timestampBase [ <int> ] ) ; } public static void updateNow ( ) { ScheduledExecutors . scheduledFastTasks . submit ( NanoTimeToCurrentTimeMillis : : updateTimestampBase ) ; } static { ScheduledExecutors . scheduledFastTasks . scheduleWithFixedDelay ( NanoTimeToCurrentTimeMillis : : updateTimestampBase , TIMESTAMP_UPDATE_INTERVAL , TIMESTAMP_UPDATE_INTERVAL , TimeUnit . MILLISECONDS ) ; } private static void updateTimestampBase ( ) { TIMESTAMP_BASE = new long [ ] { Math . max ( TIMESTAMP_BASE [ <int> ] , System . currentTimeMillis ( ) ) , Math . max ( TIMESTAMP_BASE [ <int> ] , System . nanoTime ( ) ) } ; } } 

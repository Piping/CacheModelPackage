package org . gradle . language . assembler . plugins ; import com . google . common . collect . Maps ; import org . gradle . api . Incubating ; import org . gradle . api . Plugin ; import org . gradle . api . Project ; import org . gradle . language . assembler . AssemblerSourceSet ; import org . gradle . language . assembler . internal . DefaultAssemblerSourceSet ; import org . gradle . language . assembler . plugins . internal . AssembleTaskConfig ; import org . gradle . language . base . internal . SourceTransformTaskConfig ; import org . gradle . language . base . internal . registry . LanguageTransformContainer ; import org . gradle . language . base . plugins . ComponentModelBasePlugin ; import org . gradle . language . nativeplatform . internal . NativeLanguageTransform ; import org . gradle . model . Mutate ; import org . gradle . model . RuleSource ; import org . gradle . nativeplatform . internal . DefaultTool ; import org . gradle . platform . base . LanguageType ; import org . gradle . platform . base . LanguageTypeBuilder ; import java . util . Map ; @Incubating public class AssemblerLangPlugin implements Plugin < Project > { public void apply ( Project project ) { project . getPluginManager ( ) . apply ( ComponentModelBasePlugin . class ) ; } @SuppressWarnings ( <str> ) static class Rules extends RuleSource { @LanguageType void registerLanguage ( LanguageTypeBuilder < AssemblerSourceSet > builder ) { builder . setLanguageName ( <str> ) ; builder . defaultImplementation ( DefaultAssemblerSourceSet . class ) ; } @Mutate void registerLanguageTransform ( LanguageTransformContainer languages ) { languages . add ( new Assembler ( ) ) ; } } private static class Assembler extends NativeLanguageTransform < AssemblerSourceSet > { public Class < AssemblerSourceSet > getSourceSetType ( ) { return AssemblerSourceSet . class ; } public Map < String , Class < ? > > getBinaryTools ( ) { Map < String , Class < ? > > tools = Maps . newLinkedHashMap ( ) ; tools . put ( <str> , DefaultTool . class ) ; return tools ; } public SourceTransformTaskConfig getTransformTask ( ) { return new AssembleTaskConfig ( ) ; } } } 

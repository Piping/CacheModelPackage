package io . netty . buffer ; import org . junit . Test ; import static org . hamcrest . Matchers . * ; import static org . junit . Assert . * ; public class EmptyByteBufTest { @Test public void testIsWritable ( ) { EmptyByteBuf empty = new EmptyByteBuf ( UnpooledByteBufAllocator . DEFAULT ) ; assertFalse ( empty . isWritable ( ) ) ; assertFalse ( empty . isWritable ( <int> ) ) ; } @Test public void testIsReadable ( ) { EmptyByteBuf empty = new EmptyByteBuf ( UnpooledByteBufAllocator . DEFAULT ) ; assertFalse ( empty . isReadable ( ) ) ; assertFalse ( empty . isReadable ( <int> ) ) ; } @Test public void testArray ( ) { EmptyByteBuf empty = new EmptyByteBuf ( UnpooledByteBufAllocator . DEFAULT ) ; assertThat ( empty . hasArray ( ) , is ( true ) ) ; assertThat ( empty . array ( ) . length , is ( <int> ) ) ; assertThat ( empty . arrayOffset ( ) , is ( <int> ) ) ; } @Test public void testNioBuffer ( ) { EmptyByteBuf empty = new EmptyByteBuf ( UnpooledByteBufAllocator . DEFAULT ) ; assertThat ( empty . nioBufferCount ( ) , is ( <int> ) ) ; assertThat ( empty . nioBuffer ( ) . position ( ) , is ( <int> ) ) ; assertThat ( empty . nioBuffer ( ) . limit ( ) , is ( <int> ) ) ; assertThat ( empty . nioBuffer ( ) , is ( sameInstance ( empty . nioBuffer ( ) ) ) ) ; assertThat ( empty . nioBuffer ( ) , is ( sameInstance ( empty . internalNioBuffer ( <int> , <int> ) ) ) ) ; } @Test public void testMemoryAddress ( ) { EmptyByteBuf empty = new EmptyByteBuf ( UnpooledByteBufAllocator . DEFAULT ) ; if ( empty . hasMemoryAddress ( ) ) { assertThat ( empty . memoryAddress ( ) , is ( not ( <int> L ) ) ) ; } else { try { empty . memoryAddress ( ) ; fail ( ) ; } catch ( UnsupportedOperationException ignored ) { } } } } 

package org . apache . cassandra . cql3 . selection ; import java . nio . ByteBuffer ; import java . util . Collections ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . cql3 . AssignmentTestable ; import org . apache . cassandra . cql3 . ColumnIdentifier ; import org . apache . cassandra . cql3 . ColumnSpecification ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; import org . apache . cassandra . db . marshal . AbstractType ; import org . apache . cassandra . db . marshal . ReversedType ; import org . apache . cassandra . exceptions . InvalidRequestException ; public abstract class Selector implements AssignmentTestable { public static abstract class Factory { public Iterable < Function > getFunctions ( ) { return Collections . emptySet ( ) ; } public final ColumnSpecification getColumnSpecification ( CFMetaData cfm ) { return new ColumnSpecification ( cfm . ksName , cfm . cfName , ColumnIdentifier . getInterned ( getColumnName ( ) , true ) , getReturnType ( ) ) ; } public abstract Selector newInstance ( ) throws InvalidRequestException ; public boolean isAggregateSelectorFactory ( ) { return false ; } public boolean isWritetimeSelectorFactory ( ) { return false ; } public boolean isTTLSelectorFactory ( ) { return false ; } public boolean isSimpleSelectorFactory ( int index ) { return false ; } protected abstract String getColumnName ( ) ; protected abstract AbstractType < ? > getReturnType ( ) ; protected abstract void addColumnMapping ( SelectionColumnMapping mapping , ColumnSpecification resultsColumn ) ; } public abstract void addInput ( int protocolVersion , ResultSetBuilder rs ) throws InvalidRequestException ; public abstract ByteBuffer getOutput ( int protocolVersion ) throws InvalidRequestException ; public abstract AbstractType < ? > getType ( ) ; public boolean isAggregate ( ) { return false ; } public abstract void reset ( ) ; public final AssignmentTestable . TestResult testAssignment ( String keyspace , ColumnSpecification receiver ) { AbstractType < ? > receiverType = receiver . type ; if ( getType ( ) . isFrozenCollection ( ) ) receiverType = receiverType . freeze ( ) ; if ( getType ( ) . isReversed ( ) ) receiverType = ReversedType . getInstance ( receiverType ) ; if ( receiverType . equals ( getType ( ) ) ) return AssignmentTestable . TestResult . EXACT_MATCH ; if ( receiverType . isValueCompatibleWith ( getType ( ) ) ) return AssignmentTestable . TestResult . WEAKLY_ASSIGNABLE ; return AssignmentTestable . TestResult . NOT_ASSIGNABLE ; } } 

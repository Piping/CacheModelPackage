package com . google . common . base ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import com . google . common . base . Strings ; public class StringsRepeatBenchmark { @Param ( { <str> , <str> , <str> , <str> } ) int count ; @Param ( { <str> , <str> } ) int length ; private String originalString ; @BeforeExperiment void setUp ( ) { originalString = Strings . repeat ( <str> , length ) ; } @Benchmark void oldRepeat ( int reps ) { for ( int i = <int> ; i < reps ; i + + ) { String x = oldRepeat ( originalString , count ) ; if ( x . length ( ) ! = ( originalString . length ( ) * count ) ) { throw new RuntimeException ( <str> + x ) ; } } } @Benchmark void mikeRepeat ( int reps ) { for ( int i = <int> ; i < reps ; i + + ) { String x = mikeRepeat ( originalString , count ) ; if ( x . length ( ) ! = ( originalString . length ( ) * count ) ) { throw new RuntimeException ( <str> + x ) ; } } } @Benchmark void martinRepeat ( int reps ) { for ( int i = <int> ; i < reps ; i + + ) { String x = martinRepeat ( originalString , count ) ; if ( x . length ( ) ! = ( originalString . length ( ) * count ) ) { throw new RuntimeException ( <str> + x ) ; } } } private static String mikeRepeat ( String string , int count ) { final int len = string . length ( ) ; char [ ] strCopy = new char [ len * Integer . highestOneBit ( count ) ] ; string . getChars ( <int> , len , strCopy , <int> ) ; char [ ] array = new char [ len * count ] ; int strCopyLen = len ; int pos = <int> ; while ( count ! = <int> ) { if ( ( count & <int> ) ! = <int> ) { System . arraycopy ( strCopy , <int> , array , pos , strCopyLen ) ; pos + = strCopyLen ; } count > > = <int> ; if ( count ! = <int> ) { System . arraycopy ( strCopy , <int> , strCopy , strCopyLen , strCopyLen ) ; strCopyLen < < = <int> ; } } return new String ( array ) ; } private static String oldRepeat ( String string , int count ) { final int len = string . length ( ) ; final int size = len * count ; char [ ] array = new char [ size ] ; for ( int i = <int> ; i < size ; i + = len ) { string . getChars ( <int> , len , array , i ) ; } return new String ( array ) ; } private static String martinRepeat ( String string , int count ) { final int len = string . length ( ) ; final int size = len * count ; final char [ ] array = new char [ size ] ; string . getChars ( <int> , len , array , <int> ) ; int n ; for ( n = len ; n < size - n ; n < < = <int> ) { System . arraycopy ( array , <int> , array , n , n ) ; } System . arraycopy ( array , <int> , array , n , size - n ) ; return new String ( array ) ; } } 

package org . eclipse . ui . internal . console ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import org . eclipse . core . runtime . ISafeRunnable ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IToolBarManager ; import org . eclipse . jface . action . Separator ; import org . eclipse . jface . action . ToolBarManager ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . jface . viewers . IBasicPropertyConstants ; import org . eclipse . swt . custom . StyledText ; import org . eclipse . swt . events . MouseAdapter ; import org . eclipse . swt . events . MouseEvent ; import org . eclipse . swt . graphics . Point ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Event ; import org . eclipse . swt . widgets . ToolBar ; import org . eclipse . swt . widgets . ToolItem ; import org . eclipse . ui . IPartListener2 ; import org . eclipse . ui . IViewReference ; import org . eclipse . ui . IViewSite ; import org . eclipse . ui . IWorkbenchPart ; import org . eclipse . ui . IWorkbenchPartReference ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . console . AbstractConsole ; import org . eclipse . ui . console . ConsolePlugin ; import org . eclipse . ui . console . IConsole ; import org . eclipse . ui . console . IConsoleConstants ; import org . eclipse . ui . console . IConsoleListener ; import org . eclipse . ui . console . IConsoleManager ; import org . eclipse . ui . console . IConsolePageParticipant ; import org . eclipse . ui . console . IConsoleView ; import org . eclipse . ui . contexts . IContextActivation ; import org . eclipse . ui . contexts . IContextService ; import org . eclipse . ui . part . IPage ; import org . eclipse . ui . part . IPageBookViewPage ; import org . eclipse . ui . part . MessagePage ; import org . eclipse . ui . part . PageBook ; import org . eclipse . ui . part . PageBookView ; import org . eclipse . ui . part . PageSwitcher ; import org . eclipse . ui . progress . IWorkbenchSiteProgressService ; public class ConsoleView extends PageBookView implements IConsoleView , IConsoleListener , IPropertyChangeListener , IPartListener2 { private boolean fPinned = false ; private List < IConsole > fStack = new ArrayList < IConsole > ( ) ; private IConsole fActiveConsole = null ; private Map < IConsole , ConsoleWorkbenchPart > fConsoleToPart ; private Map < IConsole , ListenerList > fConsoleToPageParticipants ; private Map < ConsoleWorkbenchPart , IConsole > fPartToConsole ; private boolean fActive = false ; private IContextActivation fActivatedContext ; private PinConsoleAction fPinAction = null ; private ConsoleDropDownAction fDisplayConsoleAction = null ; private OpenConsoleAction fOpenConsoleAction = null ; private boolean fScrollLock ; private boolean fWordWrap ; private boolean isAvailable ( ) { return getPageBook ( ) ! = null & & ! getPageBook ( ) . isDisposed ( ) ; } @Override public void propertyChange ( PropertyChangeEvent event ) { Object source = event . getSource ( ) ; if ( source instanceof IConsole & & event . getProperty ( ) . equals ( IBasicPropertyConstants . P_TEXT ) ) { if ( source . equals ( getConsole ( ) ) ) { updateTitle ( ) ; } } } @Override public void partClosed ( IWorkbenchPart part ) { super . partClosed ( part ) ; fPinAction . update ( ) ; } @Override public IConsole getConsole ( ) { return fActiveConsole ; } @Override protected void showPageRec ( PageRec pageRec ) { if ( fActiveConsole ! = null & & pageRec . page ! = getDefaultPage ( ) & & fPinned & & fConsoleToPart . size ( ) > <int> ) { IConsole console = fPartToConsole . get ( pageRec . part ) ; if ( ! fStack . contains ( console ) ) { fStack . add ( console ) ; } return ; } IConsole recConsole = fPartToConsole . get ( pageRec . part ) ; if ( recConsole ! = null & & recConsole . equals ( fActiveConsole ) ) { return ; } super . showPageRec ( pageRec ) ; fActiveConsole = recConsole ; IConsole tos = null ; if ( ! fStack . isEmpty ( ) ) { tos = fStack . get ( <int> ) ; } if ( tos ! = null & & ! tos . equals ( fActiveConsole ) & & fActive ) { deactivateParticipants ( tos ) ; } if ( fActiveConsole ! = null & & ! fActiveConsole . equals ( tos ) ) { fStack . remove ( fActiveConsole ) ; fStack . add ( <int> , fActiveConsole ) ; activateParticipants ( fActiveConsole ) ; } updateTitle ( ) ; updateHelp ( ) ; if ( fPinAction ! = null ) { fPinAction . update ( ) ; } IPage page = getCurrentPage ( ) ; if ( page instanceof IOConsolePage ) { ( ( IOConsolePage ) page ) . setWordWrap ( fWordWrap ) ; } } private void activateParticipants ( IConsole console ) { if ( console ! = null & & fActive ) { final ListenerList listeners = getParticipants ( console ) ; if ( listeners ! = null ) { Object [ ] participants = listeners . getListeners ( ) ; for ( int i = <int> ; i < participants . length ; i + + ) { final IConsolePageParticipant participant = ( IConsolePageParticipant ) participants [ i ] ; SafeRunner . run ( new ISafeRunnable ( ) { @Override public void run ( ) throws Exception { participant . activated ( ) ; } @Override public void handleException ( Throwable exception ) { ConsolePlugin . log ( exception ) ; listeners . remove ( participant ) ; } } ) ; } } } } protected List < IConsole > getConsoleStack ( ) { return fStack ; } protected void updateTitle ( ) { IConsole console = getConsole ( ) ; if ( console = = null ) { setContentDescription ( ConsoleMessages . ConsoleView_0 ) ; } else { String newName = console . getName ( ) ; String oldName = getContentDescription ( ) ; if ( newName ! = null & & ! ( newName . equals ( oldName ) ) ) { setContentDescription ( console . getName ( ) ) ; } } } protected void updateHelp ( ) { IConsole console = getConsole ( ) ; String helpContextId = null ; if ( console instanceof AbstractConsole ) { AbstractConsole abs = ( AbstractConsole ) console ; helpContextId = abs . getHelpContextId ( ) ; } if ( helpContextId = = null ) { helpContextId = IConsoleHelpContextIds . CONSOLE_VIEW ; } PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( getPageBook ( ) . getParent ( ) , helpContextId ) ; } @Override protected void doDestroyPage ( IWorkbenchPart part , PageRec pageRecord ) { IConsole console = fPartToConsole . get ( part ) ; ListenerList listeners = fConsoleToPageParticipants . remove ( console ) ; if ( listeners ! = null ) { Object [ ] participants = listeners . getListeners ( ) ; for ( int i = <int> ; i < participants . length ; i + + ) { final IConsolePageParticipant participant = ( IConsolePageParticipant ) participants [ i ] ; SafeRunner . run ( new ISafeRunnable ( ) { @Override public void run ( ) throws Exception { participant . dispose ( ) ; } @Override public void handleException ( Throwable exception ) { ConsolePlugin . log ( exception ) ; } } ) ; } } IPage page = pageRecord . page ; page . dispose ( ) ; pageRecord . dispose ( ) ; console . removePropertyChangeListener ( this ) ; fPartToConsole . remove ( part ) ; fConsoleToPart . remove ( console ) ; if ( fPartToConsole . isEmpty ( ) ) { fActiveConsole = null ; } fPinAction . update ( ) ; } private ListenerList getParticipants ( IConsole console ) { return fConsoleToPageParticipants . get ( console ) ; } @Override protected PageRec doCreatePage ( IWorkbenchPart dummyPart ) { ConsoleWorkbenchPart part = ( ConsoleWorkbenchPart ) dummyPart ; final IConsole console = part . getConsole ( ) ; final IPageBookViewPage page = console . createPage ( this ) ; initPage ( page ) ; page . createControl ( getPageBook ( ) ) ; console . addPropertyChangeListener ( this ) ; IConsolePageParticipant [ ] consoleParticipants = ( ( ConsoleManager ) getConsoleManager ( ) ) . getPageParticipants ( console ) ; final ListenerList participants = new ListenerList ( ) ; for ( int i = <int> ; i < consoleParticipants . length ; i + + ) { participants . add ( consoleParticipants [ i ] ) ; } fConsoleToPageParticipants . put ( console , participants ) ; Object [ ] listeners = participants . getListeners ( ) ; for ( int i = <int> ; i < listeners . length ; i + + ) { final IConsolePageParticipant participant = ( IConsolePageParticipant ) listeners [ i ] ; SafeRunner . run ( new ISafeRunnable ( ) { @Override public void run ( ) throws Exception { participant . init ( page , console ) ; } @Override public void handleException ( Throwable exception ) { ConsolePlugin . log ( exception ) ; participants . remove ( participant ) ; } } ) ; } PageRec rec = new PageRec ( dummyPart , page ) ; return rec ; } @Override protected boolean isImportant ( IWorkbenchPart part ) { return part instanceof ConsoleWorkbenchPart ; } @Override public void dispose ( ) { IViewSite site = getViewSite ( ) ; if ( site ! = null ) { site . getPage ( ) . removePartListener ( ( IPartListener2 ) this ) ; } super . dispose ( ) ; ConsoleManager consoleManager = ( ConsoleManager ) ConsolePlugin . getDefault ( ) . getConsoleManager ( ) ; consoleManager . removeConsoleListener ( this ) ; consoleManager . unregisterConsoleView ( this ) ; if ( fDisplayConsoleAction ! = null ) { fDisplayConsoleAction . dispose ( ) ; fDisplayConsoleAction = null ; } } private IConsoleManager getConsoleManager ( ) { return ConsolePlugin . getDefault ( ) . getConsoleManager ( ) ; } @Override protected IPage createDefaultPage ( PageBook book ) { MessagePage page = new MessagePage ( ) ; page . createControl ( getPageBook ( ) ) ; initPage ( page ) ; return page ; } @Override public void consolesAdded ( final IConsole [ ] consoles ) { if ( isAvailable ( ) ) { Runnable r = new Runnable ( ) { @Override public void run ( ) { for ( int i = <int> ; i < consoles . length ; i + + ) { if ( isAvailable ( ) ) { IConsole console = consoles [ i ] ; IConsole [ ] allConsoles = getConsoleManager ( ) . getConsoles ( ) ; for ( int j = <int> ; j < allConsoles . length ; j + + ) { IConsole registered = allConsoles [ j ] ; if ( registered . equals ( console ) ) { ConsoleWorkbenchPart part = new ConsoleWorkbenchPart ( console , getSite ( ) ) ; fConsoleToPart . put ( console , part ) ; fPartToConsole . put ( part , console ) ; partActivated ( part ) ; break ; } } } } } } ; asyncExec ( r ) ; } } @Override public void consolesRemoved ( final IConsole [ ] consoles ) { if ( isAvailable ( ) ) { Runnable r = new Runnable ( ) { @Override public void run ( ) { for ( int i = <int> ; i < consoles . length ; i + + ) { if ( isAvailable ( ) ) { IConsole console = consoles [ i ] ; fStack . remove ( console ) ; ConsoleWorkbenchPart part = fConsoleToPart . get ( console ) ; if ( part ! = null ) { partClosed ( part ) ; } if ( getConsole ( ) = = null ) { IConsole [ ] available = getConsoleManager ( ) . getConsoles ( ) ; if ( available . length > <int> ) { display ( available [ available . length - <int> ] ) ; } } } } } } ; asyncExec ( r ) ; } } public ConsoleView ( ) { super ( ) ; fConsoleToPart = new HashMap < IConsole , ConsoleWorkbenchPart > ( ) ; fPartToConsole = new HashMap < ConsoleWorkbenchPart , IConsole > ( ) ; fConsoleToPageParticipants = new HashMap < IConsole , ListenerList > ( ) ; ConsoleManager consoleManager = ( ConsoleManager ) ConsolePlugin . getDefault ( ) . getConsoleManager ( ) ; consoleManager . registerConsoleView ( this ) ; } protected void createActions ( ) { fPinAction = new PinConsoleAction ( this ) ; fDisplayConsoleAction = new ConsoleDropDownAction ( this ) ; ConsoleFactoryExtension [ ] extensions = ( ( ConsoleManager ) ConsolePlugin . getDefault ( ) . getConsoleManager ( ) ) . getConsoleFactoryExtensions ( ) ; if ( extensions . length > <int> ) { fOpenConsoleAction = new OpenConsoleAction ( ) ; } } protected void configureToolBar ( IToolBarManager mgr ) { mgr . add ( new Separator ( IConsoleConstants . LAUNCH_GROUP ) ) ; mgr . add ( new Separator ( IConsoleConstants . OUTPUT_GROUP ) ) ; mgr . add ( new Separator ( <str> ) ) ; mgr . add ( fPinAction ) ; mgr . add ( fDisplayConsoleAction ) ; if ( fOpenConsoleAction ! = null ) { mgr . add ( fOpenConsoleAction ) ; if ( mgr instanceof ToolBarManager ) { ToolBarManager tbm = ( ToolBarManager ) mgr ; final ToolBar tb = tbm . getControl ( ) ; tb . addMouseListener ( new MouseAdapter ( ) { @Override public void mouseDown ( MouseEvent e ) { ToolItem ti = tb . getItem ( new Point ( e . x , e . y ) ) ; if ( ti ! = null ) { if ( ti . getData ( ) instanceof ActionContributionItem ) { ActionContributionItem actionContributionItem = ( ActionContributionItem ) ti . getData ( ) ; IAction action = actionContributionItem . getAction ( ) ; if ( action = = fOpenConsoleAction ) { Event event = new Event ( ) ; event . widget = ti ; event . x = e . x ; event . y = e . y ; action . runWithEvent ( event ) ; } } } } } ) ; } } } @Override public void display ( IConsole console ) { if ( fPinned & & fActiveConsole ! = null ) { return ; } if ( console . equals ( fActiveConsole ) ) { return ; } ConsoleWorkbenchPart part = fConsoleToPart . get ( console ) ; if ( part ! = null ) { partActivated ( part ) ; } } @Override public void setPinned ( boolean pin ) { fPinned = pin ; if ( fPinAction ! = null ) { fPinAction . update ( ) ; } } @Override public boolean isPinned ( ) { return fPinned ; } @Override protected IWorkbenchPart getBootstrapPart ( ) { return null ; } public void asyncExec ( Runnable r ) { if ( isAvailable ( ) ) { getPageBook ( ) . getDisplay ( ) . asyncExec ( r ) ; } } @Override public void createPartControl ( Composite parent ) { super . createPartControl ( parent ) ; createActions ( ) ; IToolBarManager tbm = getViewSite ( ) . getActionBars ( ) . getToolBarManager ( ) ; configureToolBar ( tbm ) ; updateForExistingConsoles ( ) ; getViewSite ( ) . getActionBars ( ) . updateActionBars ( ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( parent , IConsoleHelpContextIds . CONSOLE_VIEW ) ; getViewSite ( ) . getPage ( ) . addPartListener ( ( IPartListener2 ) this ) ; initPageSwitcher ( ) ; } private void initPageSwitcher ( ) { new PageSwitcher ( this ) { @Override public void activatePage ( Object page ) { ShowConsoleAction . showConsole ( ( IConsole ) page , ConsoleView . this ) ; } @Override public ImageDescriptor getImageDescriptor ( Object page ) { return ( ( IConsole ) page ) . getImageDescriptor ( ) ; } @Override public String getName ( Object page ) { return ( ( IConsole ) page ) . getName ( ) ; } @Override public Object [ ] getPages ( ) { return getConsoleManager ( ) . getConsoles ( ) ; } @Override public int getCurrentPageIndex ( ) { IConsole currentConsole = getConsole ( ) ; IConsole [ ] consoles = getConsoleManager ( ) . getConsoles ( ) ; for ( int i = <int> ; i < consoles . length ; i + + ) { if ( consoles [ i ] . equals ( currentConsole ) ) { return i ; } } return super . getCurrentPageIndex ( ) ; } } ; } private void updateForExistingConsoles ( ) { IConsoleManager manager = getConsoleManager ( ) ; IConsole [ ] consoles = manager . getConsoles ( ) ; consolesAdded ( consoles ) ; manager . addConsoleListener ( this ) ; } @Override public void warnOfContentChange ( IConsole console ) { IWorkbenchPart part = fConsoleToPart . get ( console ) ; if ( part ! = null ) { IWorkbenchSiteProgressService service = part . getSite ( ) . getAdapter ( IWorkbenchSiteProgressService . class ) ; if ( service ! = null ) { service . warnOfContentChange ( ) ; } } } @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Class < T > key ) { Object adpater = super . getAdapter ( key ) ; if ( adpater = = null ) { IConsole console = getConsole ( ) ; if ( console ! = null ) { ListenerList listeners = getParticipants ( console ) ; if ( listeners ! = null ) { Object [ ] participants = listeners . getListeners ( ) ; for ( int i = <int> ; i < participants . length ; i + + ) { IConsolePageParticipant participant = ( IConsolePageParticipant ) participants [ i ] ; adpater = participant . getAdapter ( key ) ; if ( adpater ! = null ) { return ( T ) adpater ; } } } } } return ( T ) adpater ; } @Override public void partActivated ( IWorkbenchPartReference partRef ) { if ( isThisPart ( partRef ) ) { fActive = true ; IContextService contextService = getSite ( ) . getService ( IContextService . class ) ; if ( contextService ! = null ) { fActivatedContext = contextService . activateContext ( IConsoleConstants . ID_CONSOLE_VIEW ) ; activateParticipants ( fActiveConsole ) ; } } } @Override public void partBroughtToTop ( IWorkbenchPartReference partRef ) { } @Override public void partClosed ( IWorkbenchPartReference partRef ) { } @Override public void partDeactivated ( IWorkbenchPartReference partRef ) { if ( isThisPart ( partRef ) ) { fActive = false ; IContextService contextService = getSite ( ) . getService ( IContextService . class ) ; if ( contextService ! = null ) { contextService . deactivateContext ( fActivatedContext ) ; deactivateParticipants ( fActiveConsole ) ; } } } protected boolean isThisPart ( IWorkbenchPartReference partRef ) { if ( partRef instanceof IViewReference ) { IViewReference viewRef = ( IViewReference ) partRef ; if ( getViewSite ( ) ! = null & & viewRef . getId ( ) . equals ( getViewSite ( ) . getId ( ) ) ) { String secId = viewRef . getSecondaryId ( ) ; String mySec = null ; if ( getSite ( ) instanceof IViewSite ) { mySec = ( ( IViewSite ) getSite ( ) ) . getSecondaryId ( ) ; } if ( mySec = = null ) { return secId = = null ; } return mySec . equals ( secId ) ; } } return false ; } private void deactivateParticipants ( IConsole console ) { if ( console ! = null ) { final ListenerList listeners = getParticipants ( console ) ; if ( listeners ! = null ) { Object [ ] participants = listeners . getListeners ( ) ; for ( int i = <int> ; i < participants . length ; i + + ) { final IConsolePageParticipant participant = ( IConsolePageParticipant ) participants [ i ] ; SafeRunner . run ( new ISafeRunnable ( ) { @Override public void run ( ) throws Exception { participant . deactivated ( ) ; } @Override public void handleException ( Throwable exception ) { ConsolePlugin . log ( exception ) ; listeners . remove ( participant ) ; } } ) ; } } } } @Override public void partOpened ( IWorkbenchPartReference partRef ) { } @Override public void partHidden ( IWorkbenchPartReference partRef ) { } @Override public void partVisible ( IWorkbenchPartReference partRef ) { } @Override public void partInputChanged ( IWorkbenchPartReference partRef ) { } @Override public void setScrollLock ( boolean scrollLock ) { fScrollLock = scrollLock ; IPage page = getCurrentPage ( ) ; if ( page instanceof IOConsolePage ) { ( ( IOConsolePage ) page ) . setAutoScroll ( ! scrollLock ) ; } } @Override public boolean getScrollLock ( ) { return fScrollLock ; } @Override public void setWordWrap ( boolean wordWrap ) { fWordWrap = wordWrap ; IWorkbenchPart part = getSite ( ) . getPart ( ) ; if ( part instanceof PageBookView ) { Control control = ( ( PageBookView ) part ) . getCurrentPage ( ) . getControl ( ) ; if ( control instanceof StyledText ) { ( ( StyledText ) control ) . setWordWrap ( wordWrap ) ; } } } @Override public boolean getWordWrap ( ) { return fWordWrap ; } @Override public void pin ( IConsole console ) { if ( console = = null ) { setPinned ( false ) ; } else { if ( isPinned ( ) ) { setPinned ( false ) ; } display ( console ) ; setPinned ( true ) ; } } @Override public void setAutoScrollLock ( boolean scrollLock ) { IPage page = getCurrentPage ( ) ; if ( page instanceof IOConsolePage ) { ( ( IOConsolePage ) page ) . setAutoScroll ( ! scrollLock ) ; } } @Override public boolean getAutoScrollLock ( ) { IPage page = getCurrentPage ( ) ; if ( page instanceof IOConsolePage ) { return ! ( ( IOConsolePage ) page ) . isAutoScroll ( ) ; } return fScrollLock ; } } 

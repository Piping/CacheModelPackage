package com . badlogic . gdx . backends . android ; import java . io . * ; import android . content . res . AssetFileDescriptor ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Files . FileType ; import com . badlogic . gdx . backends . android . ZipResourceFile . ZipEntryRO ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class AndroidZipFileHandle extends AndroidFileHandle { private AssetFileDescriptor assetFd ; private ZipResourceFile expansionFile ; private String path ; public AndroidZipFileHandle ( String fileName ) { super ( null , fileName , FileType . Internal ) ; initialize ( ) ; } public AndroidZipFileHandle ( File file , FileType type ) { super ( null , file , type ) ; initialize ( ) ; } private void initialize ( ) { path = file . getPath ( ) . replace ( <str> , <str> ) ; expansionFile = ( ( AndroidFiles ) Gdx . files ) . getExpansionFile ( ) ; assetFd = expansionFile . getAssetFileDescriptor ( getPath ( ) ) ; if ( isDirectory ( ) ) path + = <str> ; } @Override public AssetFileDescriptor getAssetFileDescriptor ( ) throws IOException { return assetFd ; } private String getPath ( ) { return path ; } @Override public InputStream read ( ) { InputStream input = null ; try { input = expansionFile . getInputStream ( getPath ( ) ) ; } catch ( IOException ex ) { throw new GdxRuntimeException ( <str> + file + <str> , ex ) ; } return input ; } @Override public FileHandle child ( String name ) { if ( file . getPath ( ) . length ( ) = = <int> ) return new AndroidZipFileHandle ( new File ( name ) , type ) ; return new AndroidZipFileHandle ( new File ( file , name ) , type ) ; } @Override public FileHandle sibling ( String name ) { if ( file . getPath ( ) . length ( ) = = <int> ) throw new GdxRuntimeException ( <str> ) ; return Gdx . files . getFileHandle ( new File ( file . getParent ( ) , name ) . getPath ( ) , type ) ; } @Override public FileHandle parent ( ) { File parent = file . getParentFile ( ) ; if ( parent = = null ) parent = new File ( <str> ) ; return new AndroidZipFileHandle ( parent . getPath ( ) ) ; } @Override public FileHandle [ ] list ( ) { ZipEntryRO [ ] zipEntries = expansionFile . getEntriesAt ( getPath ( ) ) ; FileHandle [ ] handles = new FileHandle [ zipEntries . length ] ; for ( int i = <int> , n = handles . length ; i < n ; i + + ) handles [ i ] = new AndroidZipFileHandle ( zipEntries [ i ] . mFileName ) ; return handles ; } @Override public FileHandle [ ] list ( FileFilter filter ) { ZipEntryRO [ ] zipEntries = expansionFile . getEntriesAt ( getPath ( ) ) ; FileHandle [ ] handles = new FileHandle [ zipEntries . length ] ; int count = <int> ; for ( int i = <int> , n = handles . length ; i < n ; i + + ) { FileHandle child = new AndroidZipFileHandle ( zipEntries [ i ] . mFileName ) ; if ( ! filter . accept ( child . file ( ) ) ) continue ; handles [ count ] = child ; count + + ; } if ( count < zipEntries . length ) { FileHandle [ ] newHandles = new FileHandle [ count ] ; System . arraycopy ( handles , <int> , newHandles , <int> , count ) ; handles = newHandles ; } return handles ; } @Override public FileHandle [ ] list ( FilenameFilter filter ) { ZipEntryRO [ ] zipEntries = expansionFile . getEntriesAt ( getPath ( ) ) ; FileHandle [ ] handles = new FileHandle [ zipEntries . length ] ; int count = <int> ; for ( int i = <int> , n = handles . length ; i < n ; i + + ) { String path = zipEntries [ i ] . mFileName ; if ( ! filter . accept ( file , path ) ) continue ; handles [ count ] = new AndroidZipFileHandle ( path ) ; count + + ; } if ( count < zipEntries . length ) { FileHandle [ ] newHandles = new FileHandle [ count ] ; System . arraycopy ( handles , <int> , newHandles , <int> , count ) ; handles = newHandles ; } return handles ; } @Override public FileHandle [ ] list ( String suffix ) { ZipEntryRO [ ] zipEntries = expansionFile . getEntriesAt ( getPath ( ) ) ; FileHandle [ ] handles = new FileHandle [ zipEntries . length ] ; int count = <int> ; for ( int i = <int> , n = handles . length ; i < n ; i + + ) { String path = zipEntries [ i ] . mFileName ; if ( ! path . endsWith ( suffix ) ) continue ; handles [ count ] = new AndroidZipFileHandle ( path ) ; count + + ; } if ( count < zipEntries . length ) { FileHandle [ ] newHandles = new FileHandle [ count ] ; System . arraycopy ( handles , <int> , newHandles , <int> , count ) ; handles = newHandles ; } return handles ; } @Override public boolean isDirectory ( ) { return assetFd = = null ; } @Override public long length ( ) { return assetFd ! = null ? assetFd . getLength ( ) : <int> ; } @Override public boolean exists ( ) { return assetFd ! = null | | expansionFile . getEntriesAt ( getPath ( ) ) . length ! = <int> ; } } 

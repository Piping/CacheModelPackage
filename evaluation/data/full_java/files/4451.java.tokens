package org . eclipse . debug . internal . ui . viewers . model . provisional ; import java . util . HashSet ; import java . util . Set ; import org . eclipse . swt . SWT ; public class VirtualTree extends VirtualItem { private boolean fLazy ; private IVirtualItemValidator fValidator ; private class SelectedItemValidator implements IVirtualItemValidator { @Override public boolean isItemVisible ( VirtualItem item ) { for ( int i = <int> ; i < fSelection . length ; i + + ) { VirtualItem selectionItem = fSelection [ i ] ; while ( selectionItem ! = null ) { if ( item . equals ( selectionItem ) ) { return true ; } selectionItem = selectionItem . getParent ( ) ; } } return false ; } @Override public void showItem ( VirtualItem item ) { } } private Set < IVirtualItemListener > fVirtualItemListeners = new HashSet < IVirtualItemListener > ( <int> ) ; private VirtualItem [ ] fSelection = new VirtualItem [ <int> ] ; public VirtualTree ( int style , IVirtualItemValidator validator ) { super ( null , new VirtualItem . Index ( <int> ) ) ; fLazy = ( style & SWT . VIRTUAL ) ! = <int> ; if ( fLazy & & validator = = null ) { fValidator = new SelectedItemValidator ( ) ; } else { fValidator = validator ; } clearNeedsLabelUpdate ( ) ; clearNeedsDataUpdate ( ) ; } @Override public void dispose ( ) { super . dispose ( ) ; fVirtualItemListeners . clear ( ) ; } @Override public void setNeedsCountUpdate ( ) { super . setNeedsCountUpdate ( ) ; clearNeedsLabelUpdate ( ) ; clearNeedsDataUpdate ( ) ; } @Override public void setNeedsLabelUpdate ( ) { } @Override public void setData ( String key , Object data ) { super . setData ( key , data ) ; if ( data = = null ) { clearNeedsDataUpdate ( ) ; } } public void addItemListener ( IVirtualItemListener listener ) { fVirtualItemListeners . add ( listener ) ; } public void removeItemListener ( IVirtualItemListener listener ) { fVirtualItemListeners . remove ( listener ) ; } public VirtualItem [ ] getSelection ( ) { return fSelection ; } public void setSelection ( VirtualItem [ ] items ) { fSelection = items ; } public void showItem ( VirtualItem item ) { if ( fValidator ! = null ) { fValidator . showItem ( item ) ; } } public void fireItemDisposed ( VirtualItem item ) { for ( IVirtualItemListener listener : fVirtualItemListeners ) { listener . disposed ( item ) ; } } public void fireItemRevealed ( VirtualItem item ) { for ( IVirtualItemListener listener : fVirtualItemListeners ) { listener . revealed ( item ) ; } } @Override public void setData ( Object data ) { super . setData ( data ) ; setHasItems ( data ! = null ) ; } @Override public void setHasItems ( boolean hasChildren ) { super . setHasItems ( hasChildren ) ; if ( hasChildren ) { setExpanded ( true ) ; } } public boolean isItemVisible ( VirtualItem item ) { if ( fLazy ) { return fValidator . isItemVisible ( item ) ; } return true ; } public void validate ( ) { validate ( VirtualTree . this ) ; } public void validate ( VirtualItem item ) { if ( item . needsDataUpdate ( ) ) { if ( isItemVisible ( item ) ) { fireItemRevealed ( item ) ; } } else if ( item . getData ( ) ! = null ) { if ( item . needsLabelUpdate ( ) | | ( item . needsCountUpdate ( ) & & item . hasItems ( ) & & item . getExpanded ( ) ) ) { if ( isItemVisible ( item ) ) { fireItemRevealed ( item ) ; } } if ( item . getData ( ) ! = null & & item . getItemCount ( ) > <int> & & item . getExpanded ( ) ) { for ( int i = <int> ; i < item . getItemCount ( ) ; i + + ) { validate ( item . getItem ( new Index ( i ) ) ) ; } } } } } 

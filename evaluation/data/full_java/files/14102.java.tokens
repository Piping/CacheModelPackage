package org . gradle . internal . serialize . kryo ; import com . esotericsoftware . kryo . io . Output ; import org . gradle . api . Nullable ; import org . gradle . internal . serialize . AbstractEncoder ; import org . gradle . internal . serialize . FlushableEncoder ; import java . io . Closeable ; import java . io . OutputStream ; public class KryoBackedEncoder extends AbstractEncoder implements FlushableEncoder , Closeable { private final Output output ; public KryoBackedEncoder ( OutputStream outputStream ) { this ( outputStream , <int> ) ; } public KryoBackedEncoder ( OutputStream outputStream , int bufferSize ) { output = new Output ( outputStream , bufferSize ) ; } public void writeByte ( byte value ) { output . writeByte ( value ) ; } public void writeBytes ( byte [ ] bytes , int offset , int count ) { output . writeBytes ( bytes , offset , count ) ; } public void writeLong ( long value ) { output . writeLong ( value ) ; } public void writeSmallLong ( long value ) { output . writeLong ( value , true ) ; } public void writeInt ( int value ) { output . writeInt ( value ) ; } public void writeSmallInt ( int value ) { output . writeInt ( value , true ) ; } public void writeBoolean ( boolean value ) { output . writeBoolean ( value ) ; } public void writeString ( CharSequence value ) { if ( value = = null ) { throw new IllegalArgumentException ( <str> ) ; } output . writeString ( value ) ; } public void writeNullableString ( @Nullable CharSequence value ) { output . writeString ( value ) ; } public int getWritePosition ( ) { return output . total ( ) ; } public void flush ( ) { output . flush ( ) ; } public void close ( ) { output . close ( ) ; } } 

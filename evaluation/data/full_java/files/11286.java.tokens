package org . gradle . api . internal ; import groovy . lang . Closure ; import org . gradle . api . * ; import org . gradle . internal . Cast ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . model . internal . core . NamedEntityInstantiator ; import java . util . Set ; public class DefaultPolymorphicDomainObjectContainer < T > extends AbstractPolymorphicDomainObjectContainer < T > implements ExtensiblePolymorphicDomainObjectContainer < T > { protected final DefaultPolymorphicNamedEntityInstantiator < T > namedEntityInstantiator ; public DefaultPolymorphicDomainObjectContainer ( Class < T > type , Instantiator instantiator , Namer < ? super T > namer ) { super ( type , instantiator , namer ) ; namedEntityInstantiator = new DefaultPolymorphicNamedEntityInstantiator < T > ( type , <str> ) ; } public DefaultPolymorphicDomainObjectContainer ( Class < T > type , Instantiator instantiator ) { this ( type , instantiator , Named . Namer . forType ( type ) ) ; } @Override public NamedEntityInstantiator < T > getEntityInstantiator ( ) { return namedEntityInstantiator ; } protected T doCreate ( String name ) { try { return namedEntityInstantiator . create ( name , getType ( ) ) ; } catch ( InvalidUserDataException e ) { if ( e . getCause ( ) instanceof NoFactoryRegisteredForTypeException ) { throw new InvalidUserDataException ( String . format ( <str> + <str> + <str> , getTypeDisplayName ( ) , name , getTypeDisplayName ( ) , namedEntityInstantiator . getSupportedTypeNames ( ) ) ) ; } else { throw e ; } } } protected < U extends T > U doCreate ( String name , Class < U > type ) { return namedEntityInstantiator . create ( name , type ) ; } public < U extends T > void registerDefaultFactory ( NamedDomainObjectFactory < U > factory ) { Class < T > castType = Cast . uncheckedCast ( getType ( ) ) ; registerFactory ( castType , factory ) ; } public < U extends T > void registerFactory ( Class < U > type , NamedDomainObjectFactory < ? extends U > factory ) { namedEntityInstantiator . registerFactory ( type , factory ) ; } public < U extends T > void registerFactory ( Class < U > type , final Closure < ? extends U > factory ) { registerFactory ( type , new NamedDomainObjectFactory < U > ( ) { public U create ( String name ) { return factory . call ( name ) ; } } ) ; } public < U extends T > void registerBinding ( Class < U > type , final Class < ? extends U > implementationType ) { registerFactory ( type , new NamedDomainObjectFactory < U > ( ) { boolean named = Named . class . isAssignableFrom ( implementationType ) ; public U create ( String name ) { return named ? getInstantiator ( ) . newInstance ( implementationType , name ) : getInstantiator ( ) . newInstance ( implementationType ) ; } } ) ; } public Set < ? extends Class < ? extends T > > getCreateableTypes ( ) { return namedEntityInstantiator . getCreatableTypes ( ) ; } } 

package org . gradle . api . plugins . jetty ; import org . gradle . api . plugins . jetty . internal . Jetty6PluginServer ; import org . mortbay . util . Scanner ; import org . mortbay . xml . XmlConfiguration ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . gradle . api . tasks . InputFile ; import java . io . File ; import java . util . ArrayList ; import java . util . List ; public class JettyRunWar extends AbstractJettyRunTask { private static Logger logger = LoggerFactory . getLogger ( JettyRunWar . class ) ; private File webApp ; public void configureWebApplication ( ) throws Exception { super . configureWebApplication ( ) ; getWebAppConfig ( ) . setWar ( getWebApp ( ) . getCanonicalPath ( ) ) ; getWebAppConfig ( ) . configure ( ) ; } public void validateConfiguration ( ) { } public void configureScanner ( ) { List < File > scanList = new ArrayList < File > ( ) ; scanList . add ( getProject ( ) . getBuildFile ( ) ) ; scanList . add ( getWebApp ( ) ) ; getScanner ( ) . setScanDirs ( scanList ) ; List < Scanner . Listener > listeners = new ArrayList < Scanner . Listener > ( ) ; listeners . add ( new Scanner . BulkListener ( ) { public void filesChanged ( List changes ) { try { boolean reconfigure = changes . contains ( getProject ( ) . getBuildFile ( ) . getCanonicalPath ( ) ) ; restartWebApp ( reconfigure ) ; } catch ( Exception e ) { logger . error ( <str> , e ) ; } } } ) ; setScannerListeners ( listeners ) ; } public void restartWebApp ( boolean reconfigureScanner ) throws Exception { logger . info ( <str> ) ; logger . debug ( <str> ) ; getWebAppConfig ( ) . stop ( ) ; logger . debug ( <str> ) ; validateConfiguration ( ) ; if ( reconfigureScanner ) { logger . info ( <str> ) ; List < File > scanList = new ArrayList < File > ( ) ; scanList . add ( getProject ( ) . getBuildFile ( ) ) ; scanList . add ( getWebApp ( ) ) ; getScanner ( ) . setScanDirs ( scanList ) ; } logger . debug ( <str> ) ; getWebAppConfig ( ) . start ( ) ; logger . info ( <str> ) ; } public void finishConfigurationBeforeStart ( ) { } @InputFile public File getWebApp ( ) { return webApp ; } public void setWebApp ( File webApp ) { this . webApp = webApp ; } public void applyJettyXml ( ) throws Exception { if ( getJettyConfig ( ) = = null ) { return ; } logger . info ( <str> , getJettyConfig ( ) ) ; XmlConfiguration xmlConfiguration = new XmlConfiguration ( getJettyConfig ( ) . toURI ( ) . toURL ( ) ) ; xmlConfiguration . configure ( getServer ( ) . getProxiedObject ( ) ) ; } public org . gradle . api . plugins . jetty . internal . JettyPluginServer createServer ( ) throws Exception { return new Jetty6PluginServer ( ) ; } } 

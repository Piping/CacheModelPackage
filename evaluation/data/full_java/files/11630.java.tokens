package org . gradle . api . internal . plugins ; import org . gradle . api . Nullable ; import org . gradle . api . Plugin ; import org . gradle . model . RuleSource ; import org . gradle . model . internal . core . ExtractedModelRule ; import org . gradle . model . internal . core . ModelPath ; import org . gradle . model . internal . inspect . ModelRuleExtractor ; import org . gradle . model . internal . inspect . ModelRuleSourceDetector ; import org . gradle . model . internal . registry . ModelRegistry ; import org . gradle . model . internal . registry . ModelRegistryScope ; public class RuleBasedPluginApplicator < T extends ModelRegistryScope & PluginAwareInternal > implements PluginApplicator { private final T target ; private final PluginApplicator imperativeApplicator ; private final ModelRuleExtractor ruleInspector ; private final ModelRuleSourceDetector ruleDetector ; public RuleBasedPluginApplicator ( T target , ModelRuleExtractor ruleInspector , ModelRuleSourceDetector ruleDetector ) { this . target = target ; this . ruleInspector = ruleInspector ; this . ruleDetector = ruleDetector ; this . imperativeApplicator = new ImperativeOnlyPluginApplicator < T > ( target ) ; } public void applyImperative ( @Nullable String pluginId , Plugin < ? > plugin ) { imperativeApplicator . applyImperative ( pluginId , plugin ) ; } public void applyRules ( @Nullable String pluginId , Class < ? > clazz ) { ModelRegistry modelRegistry = target . getModelRegistry ( ) ; Iterable < Class < ? extends RuleSource > > declaredSources = ruleDetector . getDeclaredSources ( clazz ) ; for ( Class < ? extends RuleSource > ruleSource : declaredSources ) { Iterable < ExtractedModelRule > rules = ruleInspector . extract ( ruleSource ) ; for ( ExtractedModelRule rule : rules ) { for ( Class < ? > dependency : rule . getRuleDependencies ( ) ) { target . getPluginManager ( ) . apply ( dependency ) ; } rule . apply ( modelRegistry , ModelPath . ROOT ) ; } } } public void applyImperativeRulesHybrid ( @Nullable String pluginId , Plugin < ? > plugin ) { applyImperative ( pluginId , plugin ) ; applyRules ( pluginId , plugin . getClass ( ) ) ; } } 

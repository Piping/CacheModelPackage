package org . elasticsearch . index . query ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; public class MatchAllQueryParser implements QueryParser < MatchAllQueryBuilder > { @Override public String [ ] names ( ) { return new String [ ] { MatchAllQueryBuilder . NAME , Strings . toCamelCase ( MatchAllQueryBuilder . NAME ) } ; } @Override public MatchAllQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; String currentFieldName = null ; XContentParser . Token token ; String queryName = null ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; while ( ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT & & token ! = XContentParser . Token . END_ARRAY ) ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + MatchAllQueryBuilder . NAME + <str> + currentFieldName + <str> ) ; } } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + MatchAllQueryBuilder . NAME + <str> + token + <str> + currentFieldName + <str> ) ; } } MatchAllQueryBuilder queryBuilder = new MatchAllQueryBuilder ( ) ; queryBuilder . boost ( boost ) ; queryBuilder . queryName ( queryName ) ; return queryBuilder ; } @Override public MatchAllQueryBuilder getBuilderPrototype ( ) { return MatchAllQueryBuilder . PROTOTYPE ; } } 

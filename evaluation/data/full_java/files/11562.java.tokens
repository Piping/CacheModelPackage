package org . gradle . api . internal . file . copy ; import groovy . lang . Closure ; import groovy . text . SimpleTemplateEngine ; import groovy . text . Template ; import org . apache . tools . ant . util . ReaderInputStream ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . Transformer ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . internal . ChainingTransformer ; import org . gradle . util . ConfigureUtil ; import java . io . * ; import java . lang . reflect . Constructor ; import java . util . Map ; public class FilterChain implements Transformer < InputStream , InputStream > { private final ChainingTransformer < Reader > transformers = new ChainingTransformer < Reader > ( Reader . class ) ; public Reader transform ( Reader original ) { return transformers . transform ( original ) ; } public InputStream transform ( InputStream original ) { return new ReaderInputStream ( transform ( new InputStreamReader ( original ) ) ) ; } public boolean hasFilters ( ) { return transformers . hasTransformers ( ) ; } public void add ( Class < ? extends FilterReader > filterType ) { add ( filterType , null ) ; } public void add ( final Class < ? extends FilterReader > filterType , final Map < String , ? > properties ) { transformers . add ( new Transformer < Reader , Reader > ( ) { public Reader transform ( Reader original ) { try { Constructor < ? extends FilterReader > constructor = filterType . getConstructor ( Reader . class ) ; FilterReader result = constructor . newInstance ( original ) ; if ( properties ! = null ) { ConfigureUtil . configureByMap ( properties , result ) ; } return result ; } catch ( Throwable th ) { throw new InvalidUserDataException ( <str> + filterType . getName ( ) , th ) ; } } } ) ; } public void add ( final Closure closure ) { transformers . add ( new Transformer < Reader , Reader > ( ) { public Reader transform ( Reader original ) { return new LineFilter ( original , closure ) ; } } ) ; } public void expand ( final Map < String , ? > properties ) { transformers . add ( new Transformer < Reader , Reader > ( ) { public Reader transform ( Reader original ) { try { Template template ; try { SimpleTemplateEngine engine = new SimpleTemplateEngine ( ) ; template = engine . createTemplate ( original ) ; } finally { original . close ( ) ; } StringWriter writer = new StringWriter ( ) ; template . make ( properties ) . writeTo ( writer ) ; return new StringReader ( writer . toString ( ) ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } ) ; } } 

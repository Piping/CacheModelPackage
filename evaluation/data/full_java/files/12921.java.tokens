package org . gradle . api . plugins ; import org . gradle . api . Action ; import org . gradle . api . Incubating ; import org . gradle . api . Plugin ; import org . gradle . api . internal . component . BuildableJavaComponent ; import org . gradle . api . internal . component . ComponentRegistry ; import org . gradle . api . internal . plugins . DslObject ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . internal . tasks . TaskContainerInternal ; import org . gradle . api . reporting . components . ComponentReport ; import org . gradle . api . reporting . model . ModelReport ; import org . gradle . api . tasks . diagnostics . * ; import org . gradle . configuration . Help ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . model . Defaults ; import org . gradle . model . Path ; import org . gradle . model . RuleSource ; import java . util . concurrent . Callable ; @Incubating public class HelpTasksPlugin implements Plugin < ProjectInternal > { public static final String HELP_GROUP = <str> ; public static final String PROPERTIES_TASK = <str> ; public static final String DEPENDENCIES_TASK = <str> ; public static final String DEPENDENCY_INSIGHT_TASK = <str> ; public static final String COMPONENTS_TASK = <str> ; public static final String MODEL_TASK = <str> ; public void apply ( final ProjectInternal project ) { final TaskContainerInternal tasks = project . getTasks ( ) ; String projectName = project . toString ( ) ; tasks . addPlaceholderAction ( ProjectInternal . HELP_TASK , Help . class , new HelpAction ( ) ) ; tasks . addPlaceholderAction ( ProjectInternal . PROJECTS_TASK , ProjectReportTask . class , new ProjectReportTaskAction ( projectName ) ) ; tasks . addPlaceholderAction ( ProjectInternal . TASKS_TASK , TaskReportTask . class , new TaskReportTaskAction ( projectName , project . getChildProjects ( ) . isEmpty ( ) ) ) ; tasks . addPlaceholderAction ( PROPERTIES_TASK , PropertyReportTask . class , new PropertyReportTaskAction ( projectName ) ) ; tasks . addPlaceholderAction ( DEPENDENCY_INSIGHT_TASK , DependencyInsightReportTask . class , new DependencyInsightReportTaskAction ( projectName ) ) ; tasks . addPlaceholderAction ( DEPENDENCIES_TASK , DependencyReportTask . class , new DependencyReportTaskAction ( projectName ) ) ; tasks . addPlaceholderAction ( BuildEnvironmentReportTask . TASK_NAME , BuildEnvironmentReportTask . class , new BuildEnvironmentReportTaskAction ( projectName ) ) ; tasks . addPlaceholderAction ( COMPONENTS_TASK , ComponentReport . class , new ComponentReportAction ( projectName ) ) ; tasks . addPlaceholderAction ( MODEL_TASK , ModelReport . class , new ModelReportAction ( projectName ) ) ; } static class Rules extends RuleSource { @Defaults void addDefaultDependenciesReportConfiguration ( @Path ( <str> ) DependencyInsightReportTask task , final ServiceRegistry services ) { new DslObject ( task ) . getConventionMapping ( ) . map ( <str> , new Callable < Object > ( ) { public Object call ( ) { BuildableJavaComponent javaProject = services . get ( ComponentRegistry . class ) . getMainComponent ( ) ; return javaProject = = null ? null : javaProject . getCompileDependencies ( ) ; } } ) ; } } private static class HelpAction implements Action < Help > { public void execute ( Help task ) { task . setDescription ( <str> ) ; task . setGroup ( HELP_GROUP ) ; task . setImpliesSubProjects ( true ) ; } } private static class ProjectReportTaskAction implements Action < ProjectReportTask > { private final String project ; public ProjectReportTaskAction ( String projectName ) { this . project = projectName ; } public void execute ( ProjectReportTask task ) { task . setDescription ( <str> + project + <str> ) ; task . setGroup ( HELP_GROUP ) ; task . setImpliesSubProjects ( true ) ; } } private static class TaskReportTaskAction implements Action < TaskReportTask > { private final String projectName ; private final boolean noChildren ; public TaskReportTaskAction ( String projectName , boolean noChildren ) { this . projectName = projectName ; this . noChildren = noChildren ; } public void execute ( TaskReportTask task ) { String description ; if ( noChildren ) { description = <str> + projectName + <str> ; } else { description = <str> + projectName + <str> ; } task . setDescription ( description ) ; task . setGroup ( HELP_GROUP ) ; task . setImpliesSubProjects ( true ) ; } } private static class PropertyReportTaskAction implements Action < PropertyReportTask > { private final String projectName ; public PropertyReportTaskAction ( String projectName ) { this . projectName = projectName ; } public void execute ( PropertyReportTask task ) { task . setDescription ( <str> + projectName + <str> ) ; task . setGroup ( HELP_GROUP ) ; task . setImpliesSubProjects ( true ) ; } } private static class DependencyInsightReportTaskAction implements Action < DependencyInsightReportTask > { private final String projectName ; public DependencyInsightReportTaskAction ( String projectName ) { this . projectName = projectName ; } public void execute ( final DependencyInsightReportTask task ) { task . setDescription ( <str> + projectName + <str> ) ; task . setGroup ( HELP_GROUP ) ; task . setImpliesSubProjects ( true ) ; } } private static class DependencyReportTaskAction implements Action < DependencyReportTask > { private final String projectName ; public DependencyReportTaskAction ( String projectName ) { this . projectName = projectName ; } public void execute ( DependencyReportTask task ) { task . setDescription ( <str> + projectName + <str> ) ; task . setGroup ( HELP_GROUP ) ; task . setImpliesSubProjects ( true ) ; } } private static class BuildEnvironmentReportTaskAction implements Action < BuildEnvironmentReportTask > { private final String projectName ; public BuildEnvironmentReportTaskAction ( String projectName ) { this . projectName = projectName ; } public void execute ( BuildEnvironmentReportTask task ) { task . setDescription ( <str> + projectName + <str> ) ; task . setGroup ( HELP_GROUP ) ; task . setImpliesSubProjects ( true ) ; } } private static class ComponentReportAction implements Action < ComponentReport > { private final String projectName ; public ComponentReportAction ( String projectName ) { this . projectName = projectName ; } public void execute ( ComponentReport task ) { task . setDescription ( <str> + projectName + <str> ) ; task . setGroup ( HELP_GROUP ) ; task . setImpliesSubProjects ( true ) ; } } private static class ModelReportAction implements Action < ModelReport > { private final String projectName ; public ModelReportAction ( String projectName ) { this . projectName = projectName ; } public void execute ( ModelReport task ) { task . setDescription ( <str> + projectName + <str> ) ; task . setGroup ( HELP_GROUP ) ; task . setImpliesSubProjects ( true ) ; } } } 

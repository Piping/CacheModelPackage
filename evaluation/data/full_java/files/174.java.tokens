package org . apache . cassandra . cql3 . functions ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . nio . ByteBuffer ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . cassandra . cql3 . CQL3Type ; import org . apache . cassandra . db . marshal . * ; public abstract class AggregateFcts { public static Collection < AggregateFunction > all ( ) { Collection < AggregateFunction > functions = new ArrayList < > ( ) ; functions . add ( countRowsFunction ) ; functions . add ( sumFunctionForByte ) ; functions . add ( sumFunctionForShort ) ; functions . add ( sumFunctionForInt32 ) ; functions . add ( sumFunctionForLong ) ; functions . add ( sumFunctionForFloat ) ; functions . add ( sumFunctionForDouble ) ; functions . add ( sumFunctionForDecimal ) ; functions . add ( sumFunctionForVarint ) ; functions . add ( avgFunctionForByte ) ; functions . add ( avgFunctionForShort ) ; functions . add ( avgFunctionForInt32 ) ; functions . add ( avgFunctionForLong ) ; functions . add ( avgFunctionForFloat ) ; functions . add ( avgFunctionForDouble ) ; functions . add ( avgFunctionForDecimal ) ; functions . add ( avgFunctionForVarint ) ; for ( CQL3Type type : CQL3Type . Native . values ( ) ) { if ( type ! = CQL3Type . Native . VARCHAR ) { functions . add ( AggregateFcts . makeCountFunction ( type . getType ( ) ) ) ; functions . add ( AggregateFcts . makeMaxFunction ( type . getType ( ) ) ) ; functions . add ( AggregateFcts . makeMinFunction ( type . getType ( ) ) ) ; } } return functions ; } public static final AggregateFunction countRowsFunction = new NativeAggregateFunction ( <str> , LongType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private long count ; public void reset ( ) { count = <int> ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( LongType ) returnType ( ) ) . decompose ( count ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { count + + ; } } ; } @Override public String columnName ( List < String > columnNames ) { return <str> ; } } ; public static final AggregateFunction sumFunctionForDecimal = new NativeAggregateFunction ( <str> , DecimalType . instance , DecimalType . instance ) { @Override public Aggregate newAggregate ( ) { return new Aggregate ( ) { private BigDecimal sum = BigDecimal . ZERO ; public void reset ( ) { sum = BigDecimal . ZERO ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( DecimalType ) returnType ( ) ) . decompose ( sum ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; BigDecimal number = ( ( BigDecimal ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum = sum . add ( number ) ; } } ; } } ; public static final AggregateFunction avgFunctionForDecimal = new NativeAggregateFunction ( <str> , DecimalType . instance , DecimalType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private BigDecimal sum = BigDecimal . ZERO ; private int count ; public void reset ( ) { count = <int> ; sum = BigDecimal . ZERO ; } public ByteBuffer compute ( int protocolVersion ) { if ( count = = <int> ) return ( ( DecimalType ) returnType ( ) ) . decompose ( BigDecimal . ZERO ) ; return ( ( DecimalType ) returnType ( ) ) . decompose ( sum . divide ( BigDecimal . valueOf ( count ) ) ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; count + + ; BigDecimal number = ( ( BigDecimal ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum = sum . add ( number ) ; } } ; } } ; public static final AggregateFunction sumFunctionForVarint = new NativeAggregateFunction ( <str> , IntegerType . instance , IntegerType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private BigInteger sum = BigInteger . ZERO ; public void reset ( ) { sum = BigInteger . ZERO ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( IntegerType ) returnType ( ) ) . decompose ( sum ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; BigInteger number = ( ( BigInteger ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum = sum . add ( number ) ; } } ; } } ; public static final AggregateFunction avgFunctionForVarint = new NativeAggregateFunction ( <str> , IntegerType . instance , IntegerType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private BigInteger sum = BigInteger . ZERO ; private int count ; public void reset ( ) { count = <int> ; sum = BigInteger . ZERO ; } public ByteBuffer compute ( int protocolVersion ) { if ( count = = <int> ) return ( ( IntegerType ) returnType ( ) ) . decompose ( BigInteger . ZERO ) ; return ( ( IntegerType ) returnType ( ) ) . decompose ( sum . divide ( BigInteger . valueOf ( count ) ) ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; count + + ; BigInteger number = ( ( BigInteger ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum = sum . add ( number ) ; } } ; } } ; public static final AggregateFunction sumFunctionForByte = new NativeAggregateFunction ( <str> , ByteType . instance , ByteType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private byte sum ; public void reset ( ) { sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( ByteType ) returnType ( ) ) . decompose ( sum ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . byteValue ( ) ; } } ; } } ; public static final AggregateFunction avgFunctionForByte = new NativeAggregateFunction ( <str> , ByteType . instance , ByteType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private byte sum ; private int count ; public void reset ( ) { count = <int> ; sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { int avg = count = = <int> ? <int> : sum / count ; return ( ( ByteType ) returnType ( ) ) . decompose ( ( byte ) avg ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; count + + ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . byteValue ( ) ; } } ; } } ; public static final AggregateFunction sumFunctionForShort = new NativeAggregateFunction ( <str> , ShortType . instance , ShortType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private short sum ; public void reset ( ) { sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( ShortType ) returnType ( ) ) . decompose ( sum ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . shortValue ( ) ; } } ; } } ; public static final AggregateFunction avgFunctionForShort = new NativeAggregateFunction ( <str> , ShortType . instance , ShortType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private short sum ; private int count ; public void reset ( ) { count = <int> ; sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { int avg = count = = <int> ? <int> : sum / count ; return ( ( ShortType ) returnType ( ) ) . decompose ( ( short ) avg ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; count + + ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . shortValue ( ) ; } } ; } } ; public static final AggregateFunction sumFunctionForInt32 = new NativeAggregateFunction ( <str> , Int32Type . instance , Int32Type . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private int sum ; public void reset ( ) { sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( Int32Type ) returnType ( ) ) . decompose ( sum ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . intValue ( ) ; } } ; } } ; public static final AggregateFunction avgFunctionForInt32 = new NativeAggregateFunction ( <str> , Int32Type . instance , Int32Type . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private int sum ; private int count ; public void reset ( ) { count = <int> ; sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { int avg = count = = <int> ? <int> : sum / count ; return ( ( Int32Type ) returnType ( ) ) . decompose ( avg ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; count + + ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . intValue ( ) ; } } ; } } ; public static final AggregateFunction sumFunctionForLong = new NativeAggregateFunction ( <str> , LongType . instance , LongType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private long sum ; public void reset ( ) { sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( LongType ) returnType ( ) ) . decompose ( sum ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . longValue ( ) ; } } ; } } ; public static final AggregateFunction avgFunctionForLong = new NativeAggregateFunction ( <str> , LongType . instance , LongType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private long sum ; private int count ; public void reset ( ) { count = <int> ; sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { long avg = count = = <int> ? <int> : sum / count ; return ( ( LongType ) returnType ( ) ) . decompose ( avg ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; count + + ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . longValue ( ) ; } } ; } } ; public static final AggregateFunction sumFunctionForFloat = new NativeAggregateFunction ( <str> , FloatType . instance , FloatType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private float sum ; public void reset ( ) { sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( FloatType ) returnType ( ) ) . decompose ( sum ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . floatValue ( ) ; } } ; } } ; public static final AggregateFunction avgFunctionForFloat = new NativeAggregateFunction ( <str> , FloatType . instance , FloatType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private float sum ; private int count ; public void reset ( ) { count = <int> ; sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { float avg = count = = <int> ? <int> : sum / count ; return ( ( FloatType ) returnType ( ) ) . decompose ( avg ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; count + + ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . floatValue ( ) ; } } ; } } ; public static final AggregateFunction sumFunctionForDouble = new NativeAggregateFunction ( <str> , DoubleType . instance , DoubleType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private double sum ; public void reset ( ) { sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( DoubleType ) returnType ( ) ) . decompose ( sum ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . doubleValue ( ) ; } } ; } } ; public static final AggregateFunction avgFunctionForDouble = new NativeAggregateFunction ( <str> , DoubleType . instance , DoubleType . instance ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private double sum ; private int count ; public void reset ( ) { count = <int> ; sum = <int> ; } public ByteBuffer compute ( int protocolVersion ) { double avg = count = = <int> ? <int> : sum / count ; return ( ( DoubleType ) returnType ( ) ) . decompose ( avg ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; count + + ; Number number = ( ( Number ) argTypes ( ) . get ( <int> ) . compose ( value ) ) ; sum + = number . doubleValue ( ) ; } } ; } } ; public static AggregateFunction makeMaxFunction ( final AbstractType < ? > inputType ) { return new NativeAggregateFunction ( <str> , inputType , inputType ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private ByteBuffer max ; public void reset ( ) { max = null ; } public ByteBuffer compute ( int protocolVersion ) { return max ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; if ( max = = null | | returnType ( ) . compare ( max , value ) < <int> ) max = value ; } } ; } } ; } public static AggregateFunction makeMinFunction ( final AbstractType < ? > inputType ) { return new NativeAggregateFunction ( <str> , inputType , inputType ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private ByteBuffer min ; public void reset ( ) { min = null ; } public ByteBuffer compute ( int protocolVersion ) { return min ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; if ( min = = null | | returnType ( ) . compare ( min , value ) > <int> ) min = value ; } } ; } } ; } public static AggregateFunction makeCountFunction ( AbstractType < ? > inputType ) { return new NativeAggregateFunction ( <str> , LongType . instance , inputType ) { public Aggregate newAggregate ( ) { return new Aggregate ( ) { private long count ; public void reset ( ) { count = <int> ; } public ByteBuffer compute ( int protocolVersion ) { return ( ( LongType ) returnType ( ) ) . decompose ( count ) ; } public void addInput ( int protocolVersion , List < ByteBuffer > values ) { ByteBuffer value = values . get ( <int> ) ; if ( value = = null ) return ; count + + ; } } ; } } ; } } 

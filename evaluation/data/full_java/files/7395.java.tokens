package org . elasticsearch . search . aggregations . pipeline . bucketmetrics . percentile ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorFactory ; import org . elasticsearch . search . aggregations . pipeline . bucketmetrics . BucketMetricsParser ; import org . elasticsearch . search . aggregations . support . format . ValueFormatter ; import java . text . ParseException ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . search . aggregations . pipeline . BucketHelpers . GapPolicy ; public class PercentilesBucketParser extends BucketMetricsParser { public static final ParseField PERCENTS = new ParseField ( <str> ) ; @Override public String type ( ) { return PercentilesBucketPipelineAggregator . TYPE . name ( ) ; } @Override protected PipelineAggregatorFactory buildFactory ( String pipelineAggregatorName , String [ ] bucketsPaths , GapPolicy gapPolicy , ValueFormatter formatter , Map < String , Object > unparsedParams ) throws ParseException { double [ ] percents = new double [ ] { <float> , <float> , <float> , <float> , <float> , <float> , <float> } ; int counter = <int> ; Object percentParam = unparsedParams . get ( PERCENTS . getPreferredName ( ) ) ; if ( percentParam ! = null ) { if ( percentParam instanceof List ) { percents = new double [ ( ( List ) percentParam ) . size ( ) ] ; for ( Object p : ( List ) percentParam ) { if ( p instanceof Double ) { percents [ counter ] = ( Double ) p ; counter + = <int> ; } else { throw new ParseException ( <str> + PERCENTS . getPreferredName ( ) + <str> + percentParam . getClass ( ) . getSimpleName ( ) + <str> , <int> ) ; } } unparsedParams . remove ( PERCENTS . getPreferredName ( ) ) ; } else { throw new ParseException ( <str> + PERCENTS . getPreferredName ( ) + <str> + percentParam . getClass ( ) . getSimpleName ( ) + <str> , <int> ) ; } } return new PercentilesBucketPipelineAggregator . Factory ( pipelineAggregatorName , bucketsPaths , gapPolicy , formatter , percents ) ; } } 

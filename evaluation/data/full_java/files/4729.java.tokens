package org . eclipse . debug . ui . actions ; import java . util . Set ; import org . eclipse . debug . internal . ui . actions . ToggleBreakpointsTargetManager ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IMenuCreator ; import org . eclipse . jface . action . IMenuListener ; import org . eclipse . jface . action . IMenuManager ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . IRegion ; import org . eclipse . jface . text . TextSelection ; import org . eclipse . jface . text . source . IVerticalRulerInfo ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . swt . events . MenuAdapter ; import org . eclipse . swt . events . MenuEvent ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . MenuItem ; import org . eclipse . ui . IEditorActionDelegate ; import org . eclipse . ui . IEditorPart ; import org . eclipse . ui . texteditor . IDocumentProvider ; import org . eclipse . ui . texteditor . ITextEditor ; import org . eclipse . ui . texteditor . ITextEditorExtension ; @Deprecated public class RulerBreakpointTypesActionDelegate implements IEditorActionDelegate , IMenuListener , IMenuCreator { private ITextEditor fEditor = null ; private IAction fCallerAction = null ; private IVerticalRulerInfo fRulerInfo ; private ISelection fSelection ; private Menu fMenu ; private class SelectTargetAction extends Action { private final Set < String > fPossibleIDs ; private final String fID ; SelectTargetAction ( String name , Set < String > possibleIDs , String ID ) { super ( name , AS_RADIO_BUTTON ) ; fID = ID ; fPossibleIDs = possibleIDs ; } @Override public void run ( ) { if ( isChecked ( ) ) { ToggleBreakpointsTargetManager . getDefault ( ) . setPreferredTarget ( fPossibleIDs , fID ) ; } } } @Override public void selectionChanged ( IAction action , ISelection selection ) { } @Override public void run ( IAction action ) { } @Override public void setActiveEditor ( IAction callerAction , IEditorPart targetEditor ) { if ( fCallerAction ! = null ) { fCallerAction . setMenuCreator ( null ) ; } if ( fEditor instanceof ITextEditorExtension ) { ( ( ITextEditorExtension ) fEditor ) . removeRulerContextMenuListener ( this ) ; } fRulerInfo = null ; fCallerAction = callerAction ; fCallerAction . setMenuCreator ( this ) ; fEditor = targetEditor = = null ? null : targetEditor . getAdapter ( ITextEditor . class ) ; if ( fEditor ! = null ) { if ( fEditor instanceof ITextEditorExtension ) { ( ( ITextEditorExtension ) fEditor ) . addRulerContextMenuListener ( this ) ; } fRulerInfo = fEditor . getAdapter ( IVerticalRulerInfo . class ) ; } } @Override public void dispose ( ) { if ( fCallerAction ! = null ) { fCallerAction . setMenuCreator ( null ) ; } if ( fEditor instanceof ITextEditorExtension ) { ( ( ITextEditorExtension ) fEditor ) . removeRulerContextMenuListener ( this ) ; } fRulerInfo = null ; } @Override public void menuAboutToShow ( IMenuManager manager ) { fSelection = StructuredSelection . EMPTY ; if ( fEditor ! = null & & fRulerInfo ! = null ) { IDocumentProvider provider = fEditor . getDocumentProvider ( ) ; if ( provider ! = null ) { IDocument document = provider . getDocument ( fEditor . getEditorInput ( ) ) ; int line = fRulerInfo . getLineOfLastMouseButtonActivity ( ) ; if ( line > - <int> ) { try { IRegion region = document . getLineInformation ( line ) ; fSelection = new TextSelection ( document , region . getOffset ( ) , <int> ) ; } catch ( BadLocationException e ) { } } } ToggleBreakpointsTargetManager toggleTargetManager = ToggleBreakpointsTargetManager . getDefault ( ) ; Set < String > enabledIDs = toggleTargetManager . getEnabledToggleBreakpointsTargetIDs ( fEditor , fSelection ) ; fCallerAction . setEnabled ( enabledIDs . size ( ) > <int> ) ; } else { fCallerAction . setEnabled ( false ) ; } } private void setMenu ( Menu menu ) { if ( fMenu ! = null ) { fMenu . dispose ( ) ; } fMenu = menu ; } @Override public Menu getMenu ( Menu parent ) { setMenu ( new Menu ( parent ) ) ; fillMenu ( fMenu ) ; initMenu ( ) ; return fMenu ; } @Override public Menu getMenu ( Control parent ) { setMenu ( new Menu ( parent ) ) ; fillMenu ( fMenu ) ; initMenu ( ) ; return fMenu ; } private void fillMenu ( Menu menu ) { ToggleBreakpointsTargetManager manager = ToggleBreakpointsTargetManager . getDefault ( ) ; Set < String > enabledIDs = manager . getEnabledToggleBreakpointsTargetIDs ( fEditor , fSelection ) ; String preferredId = manager . getPreferredToggleBreakpointsTargetID ( fEditor , fSelection ) ; for ( String id : enabledIDs ) { SelectTargetAction action = new SelectTargetAction ( manager . getToggleBreakpointsTargetName ( id ) , enabledIDs , id ) ; if ( id . equals ( preferredId ) ) { action . setChecked ( true ) ; } ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( menu , - <int> ) ; } } private void initMenu ( ) { fMenu . addMenuListener ( new MenuAdapter ( ) { @Override public void menuShown ( MenuEvent e ) { Menu m = ( Menu ) e . widget ; MenuItem [ ] items = m . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { items [ i ] . dispose ( ) ; } fillMenu ( m ) ; } } ) ; } } 

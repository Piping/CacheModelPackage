package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy ; import org . gradle . api . Transformer ; import java . util . ArrayList ; import java . util . List ; public class VersionParser implements Transformer < Version , String > { @Override public Version transform ( String original ) { List < String > parts = new ArrayList < String > ( ) ; boolean digit = false ; int startPart = <int> ; int pos = <int> ; int endBase = <int> ; int endBaseStr = <int> ; for ( ; pos < original . length ( ) ; pos + + ) { char ch = original . charAt ( pos ) ; if ( ch = = <str> | | ch = = <str> | | ch = = <str> | | ch = = <str> ) { parts . add ( original . substring ( startPart , pos ) ) ; startPart = pos + <int> ; digit = false ; if ( ch ! = <str> & & endBaseStr = = <int> ) { endBase = parts . size ( ) ; endBaseStr = pos ; } } else if ( ch > = <str> & & ch < = <str> ) { if ( ! digit & & pos > startPart ) { if ( endBaseStr = = <int> ) { endBase = parts . size ( ) + <int> ; endBaseStr = pos ; } parts . add ( original . substring ( startPart , pos ) ) ; startPart = pos ; } digit = true ; } else { if ( digit ) { if ( endBaseStr = = <int> ) { endBase = parts . size ( ) + <int> ; endBaseStr = pos ; } parts . add ( original . substring ( startPart , pos ) ) ; startPart = pos ; } digit = false ; } } if ( pos > startPart ) { parts . add ( original . substring ( startPart , pos ) ) ; } DefaultVersion base = null ; if ( endBaseStr > <int> ) { base = new DefaultVersion ( original . substring ( <int> , endBaseStr ) , parts . subList ( <int> , endBase ) , null ) ; } return new DefaultVersion ( original , parts , base ) ; } private static class DefaultVersion implements Version { private final String source ; private final String [ ] parts ; private final DefaultVersion baseVersion ; public DefaultVersion ( String source , List < String > parts , DefaultVersion baseVersion ) { this . source = source ; this . parts = parts . toArray ( new String [ parts . size ( ) ] ) ; this . baseVersion = baseVersion = = null ? this : baseVersion ; } @Override public String toString ( ) { return source ; } @Override public boolean equals ( Object obj ) { if ( obj = = this ) { return true ; } if ( obj = = null | | obj . getClass ( ) ! = getClass ( ) ) { return false ; } DefaultVersion other = ( DefaultVersion ) obj ; return source . equals ( other . source ) ; } @Override public int hashCode ( ) { return source . hashCode ( ) ; } @Override public boolean isQualified ( ) { return baseVersion ! = this ; } @Override public Version getBaseVersion ( ) { return baseVersion ; } public String [ ] getParts ( ) { return parts ; } } } 

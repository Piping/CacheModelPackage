package org . gradle . process . internal . child ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; public abstract class EncodedStream { private final static char [ ] HEX_DIGIT = new char [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; public static class EncodedInput extends InputStream { private InputStream delegate ; public EncodedInput ( java . io . InputStream delegate ) { this . delegate = delegate ; } public int read ( ) throws IOException { int byte1 = delegate . read ( ) ; if ( byte1 < <int> ) { return - <int> ; } int byte2 = delegate . read ( ) ; if ( byte2 < <int> ) { throw new IOException ( <str> ) ; } return ( hexToByte ( byte1 ) < < <int> ) | hexToByte ( byte2 ) ; } public static int hexToByte ( int s ) throws IOException { if ( s > = <str> & & s < = <str> ) { return s - <str> ; } if ( s > = <str> & & s < = <str> ) { return s - <str> + <int> ; } throw new IOException ( String . format ( <str> , s ) ) ; } } public static class EncodedOutput extends OutputStream { private final OutputStream delegate ; public EncodedOutput ( OutputStream delegate ) { this . delegate = delegate ; } public void write ( int b ) throws IOException { delegate . write ( HEX_DIGIT [ ( b > > <int> ) & <hex> ] ) ; delegate . write ( HEX_DIGIT [ b & <hex> ] ) ; } @Override public void flush ( ) throws IOException { delegate . flush ( ) ; } @Override public void close ( ) throws IOException { delegate . close ( ) ; } } } 

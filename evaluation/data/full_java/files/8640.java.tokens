package org . elasticsearch . script . groovy ; import org . apache . lucene . util . Constants ; import org . codehaus . groovy . control . MultipleCompilationErrorsException ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . script . CompiledScript ; import org . elasticsearch . script . ScriptException ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . test . ESTestCase ; import groovy . lang . MissingPropertyException ; import java . nio . file . Path ; import java . security . PrivilegedActionException ; import java . util . AbstractMap ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class GroovySecurityTests extends ESTestCase { private GroovyScriptEngineService se ; static { org . joda . time . DateTimeZone . getDefault ( ) ; } @Override public void setUp ( ) throws Exception { super . setUp ( ) ; se = new GroovyScriptEngineService ( Settings . EMPTY ) ; assumeTrue ( <str> , System . getSecurityManager ( ) ! = null ) ; } @Override public void tearDown ( ) throws Exception { se . close ( ) ; super . tearDown ( ) ; } public void testEvilGroovyScripts ( ) throws Exception { assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertSuccess ( <str> ) ; assertFailure ( <str> , MissingPropertyException . class ) ; assertFailure ( <str> , PrivilegedActionException . class ) ; assertFailure ( <str> , PrivilegedActionException . class ) ; assertFailure ( <str> , SecurityException . class ) ; assertFailure ( <str> , SecurityException . class ) ; assertFailure ( <str> + <str> , SecurityException . class ) ; assertFailure ( <str> , MissingPropertyException . class ) ; assertFailure ( <str> , MissingPropertyException . class ) ; assertFailure ( <str> , MissingPropertyException . class ) ; assertFailure ( <str> + <str> , MultipleCompilationErrorsException . class ) ; assertFailure ( <str> , MissingPropertyException . class ) ; assertFailure ( <str> , MultipleCompilationErrorsException . class ) ; Path dir = createTempDir ( ) ; if ( ! Constants . WINDOWS ) { assertFailure ( <str> + dir + <str> , MultipleCompilationErrorsException . class ) ; } } private void doTest ( String script ) { Map < String , Object > vars = new HashMap < String , Object > ( ) ; vars . put ( <str> , Collections . singletonMap ( <str> , new AbstractMap . SimpleEntry < Object , Integer > ( null , <int> ) ) ) ; vars . put ( <str> , Arrays . asList ( <str> ) ) ; vars . put ( <str> , Arrays . asList ( <str> ) ) ; vars . put ( <str> , new MyObject ( ) ) ; se . executable ( new CompiledScript ( ScriptService . ScriptType . INLINE , <str> , <str> , se . compile ( script ) ) , vars ) . run ( ) ; } public static class MyObject { public int getPrimitive ( ) { return <int> ; } public Object getObject ( ) { return <str> ; } public List < Object > getList ( ) { return Arrays . asList ( new MyObject ( ) ) ; } } private void assertSuccess ( String script ) { doTest ( script ) ; } private void assertFailure ( String script , Class < ? extends Throwable > exceptionClass ) { try { doTest ( script ) ; fail ( <str> ) ; } catch ( ScriptException expected ) { Throwable cause = expected . getCause ( ) ; assertNotNull ( cause ) ; if ( exceptionClass . isAssignableFrom ( cause . getClass ( ) ) = = false ) { throw new AssertionError ( <str> + cause , expected ) ; } } } } 

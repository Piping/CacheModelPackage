package org . elasticsearch . cluster . metadata ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import java . io . IOException ; public class SnapshotId implements Streamable { private String repository ; private String snapshot ; private int hashCode ; private SnapshotId ( ) { } public SnapshotId ( String repository , String snapshot ) { this . repository = repository ; this . snapshot = snapshot ; this . hashCode = computeHashCode ( ) ; } public String getRepository ( ) { return repository ; } public String getSnapshot ( ) { return snapshot ; } @Override public String toString ( ) { return repository + <str> + snapshot ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( o = = null ) return false ; SnapshotId snapshotId = ( SnapshotId ) o ; return snapshot . equals ( snapshotId . snapshot ) & & repository . equals ( snapshotId . repository ) ; } @Override public int hashCode ( ) { return hashCode ; } private int computeHashCode ( ) { int result = repository ! = null ? repository . hashCode ( ) : <int> ; result = <int> * result + snapshot . hashCode ( ) ; return result ; } public static SnapshotId readSnapshotId ( StreamInput in ) throws IOException { SnapshotId snapshot = new SnapshotId ( ) ; snapshot . readFrom ( in ) ; return snapshot ; } @Override public void readFrom ( StreamInput in ) throws IOException { repository = in . readString ( ) ; snapshot = in . readString ( ) ; hashCode = computeHashCode ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeString ( repository ) ; out . writeString ( snapshot ) ; } } 

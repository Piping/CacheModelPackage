package org . gradle . play . internal . platform ; import com . google . common . collect . Lists ; import org . gradle . api . InvalidUserDataException ; import org . gradle . language . scala . ScalaPlatform ; import org . gradle . play . platform . PlayPlatform ; import org . gradle . util . VersionNumber ; import java . util . List ; public enum PlayMajorVersion { PLAY_2_2_X ( <str> , <str> ) , PLAY_2_3_X ( <str> , <str> , <str> ) , PLAY_2_4_X ( <str> , <str> , <str> ) ; private final String name ; private final List < String > compatibleScalaVersions ; PlayMajorVersion ( String name , String . . . compatibleScalaVersions ) { this . name = name ; this . compatibleScalaVersions = Lists . newArrayList ( compatibleScalaVersions ) ; } public void validateCompatible ( ScalaPlatform scalaPlatform ) { if ( ! compatibleScalaVersions . contains ( scalaPlatform . getScalaCompatibilityVersion ( ) ) ) { throw new InvalidUserDataException ( String . format ( <str> , name , scalaPlatform . getScalaCompatibilityVersion ( ) , compatibleScalaVersions ) ) ; } } public String getDefaultScalaPlatform ( ) { return compatibleScalaVersions . get ( <int> ) ; } public static PlayMajorVersion forPlatform ( PlayPlatform targetPlatform ) { String playVersion = targetPlatform . getPlayVersion ( ) ; return forPlayVersion ( playVersion ) ; } public static PlayMajorVersion forPlayVersion ( String playVersion ) { VersionNumber versionNumber = VersionNumber . parse ( playVersion ) ; if ( versionNumber . getMajor ( ) = = <int> & & versionNumber . getMinor ( ) = = <int> ) { return PlayMajorVersion . PLAY_2_2_X ; } if ( versionNumber . getMajor ( ) = = <int> & & versionNumber . getMinor ( ) = = <int> ) { return PlayMajorVersion . PLAY_2_3_X ; } if ( versionNumber . getMajor ( ) = = <int> & & versionNumber . getMinor ( ) = = <int> ) { return PlayMajorVersion . PLAY_2_4_X ; } throw new InvalidUserDataException ( String . format ( <str> , playVersion ) ) ; } } 

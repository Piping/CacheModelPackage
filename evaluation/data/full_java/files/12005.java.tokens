package org . gradle . initialization ; import org . gradle . StartParameter ; import org . gradle . api . Transformer ; import org . gradle . api . internal . file . BasicFileResolver ; import org . gradle . cli . * ; import org . gradle . logging . LoggingConfiguration ; import org . gradle . logging . internal . LoggingCommandLineConverter ; import java . io . File ; import java . util . HashMap ; import java . util . Map ; import static org . gradle . StartParameter . GRADLE_USER_HOME_PROPERTY_KEY ; public class DefaultCommandLineConverter extends AbstractCommandLineConverter < StartParameter > { private static final String NO_PROJECT_DEPENDENCY_REBUILD = <str> ; private static final String BUILD_FILE = <str> ; public static final String INIT_SCRIPT = <str> ; private static final String SETTINGS_FILE = <str> ; private static final String DRY_RUN = <str> ; private static final String RERUN_TASKS = <str> ; private static final String EXCLUDE_TASK = <str> ; private static final String PROFILE = <str> ; private static final String CONTINUE = <str> ; private static final String OFFLINE = <str> ; private static final String REFRESH_DEPENDENCIES = <str> ; private static final String PROJECT_CACHE_DIR = <str> ; private static final String RECOMPILE_SCRIPTS = <str> ; private static final String PARALLEL = <str> ; private static final String PARALLEL_THREADS = <str> ; private static final String MAX_WORKERS = <str> ; private static final String CONFIGURE_ON_DEMAND = <str> ; private static final String CONTINUOUS = <str> ; private static final String CONTINUOUS_SHORT_FLAG = <str> ; private final CommandLineConverter < LoggingConfiguration > loggingConfigurationCommandLineConverter = new LoggingCommandLineConverter ( ) ; private final SystemPropertiesCommandLineConverter systemPropertiesCommandLineConverter = new SystemPropertiesCommandLineConverter ( ) ; private final ProjectPropertiesCommandLineConverter projectPropertiesCommandLineConverter = new ProjectPropertiesCommandLineConverter ( ) ; private final LayoutCommandLineConverter layoutCommandLineConverter ; public DefaultCommandLineConverter ( ) { layoutCommandLineConverter = new LayoutCommandLineConverter ( ) ; } public void configure ( CommandLineParser parser ) { loggingConfigurationCommandLineConverter . configure ( parser ) ; systemPropertiesCommandLineConverter . configure ( parser ) ; projectPropertiesCommandLineConverter . configure ( parser ) ; layoutCommandLineConverter . configure ( parser ) ; parser . allowMixedSubcommandsAndOptions ( ) ; parser . option ( PROJECT_CACHE_DIR ) . hasArgument ( ) . hasDescription ( <str> ) ; parser . option ( DRY_RUN , <str> ) . hasDescription ( <str> ) ; parser . option ( INIT_SCRIPT , <str> ) . hasArguments ( ) . hasDescription ( <str> ) ; parser . option ( SETTINGS_FILE , <str> ) . hasArgument ( ) . hasDescription ( <str> ) ; parser . option ( BUILD_FILE , <str> ) . hasArgument ( ) . hasDescription ( <str> ) ; parser . option ( NO_PROJECT_DEPENDENCY_REBUILD , <str> ) . hasDescription ( <str> ) ; parser . option ( RERUN_TASKS ) . hasDescription ( <str> ) ; parser . option ( RECOMPILE_SCRIPTS ) . hasDescription ( <str> ) ; parser . option ( EXCLUDE_TASK , <str> ) . hasArguments ( ) . hasDescription ( <str> ) ; parser . option ( PROFILE ) . hasDescription ( <str> ) ; parser . option ( CONTINUE ) . hasDescription ( <str> ) ; parser . option ( OFFLINE ) . hasDescription ( <str> ) ; parser . option ( REFRESH_DEPENDENCIES ) . hasDescription ( <str> ) ; parser . option ( PARALLEL ) . hasDescription ( <str> ) . incubating ( ) ; parser . option ( PARALLEL_THREADS ) . hasArgument ( ) . hasDescription ( <str> ) . deprecated ( <str> ) . incubating ( ) ; parser . option ( MAX_WORKERS ) . hasArgument ( ) . hasDescription ( <str> ) . incubating ( ) ; parser . option ( CONFIGURE_ON_DEMAND ) . hasDescription ( <str> ) . incubating ( ) ; parser . option ( CONTINUOUS , CONTINUOUS_SHORT_FLAG ) . hasDescription ( <str> ) . incubating ( ) ; parser . allowOneOf ( MAX_WORKERS , PARALLEL_THREADS ) ; } public StartParameter convert ( final ParsedCommandLine options , final StartParameter startParameter ) throws CommandLineArgumentException { loggingConfigurationCommandLineConverter . convert ( options , startParameter ) ; Transformer < File , String > resolver = new BasicFileResolver ( startParameter . getCurrentDir ( ) ) ; Map < String , String > systemProperties = systemPropertiesCommandLineConverter . convert ( options , new HashMap < String , String > ( ) ) ; convertCommandLineSystemProperties ( systemProperties , startParameter , resolver ) ; Map < String , String > projectProperties = projectPropertiesCommandLineConverter . convert ( options , new HashMap < String , String > ( ) ) ; startParameter . getProjectProperties ( ) . putAll ( projectProperties ) ; BuildLayoutParameters layout = new BuildLayoutParameters ( ) . setGradleUserHomeDir ( startParameter . getGradleUserHomeDir ( ) ) . setProjectDir ( startParameter . getProjectDir ( ) ) . setCurrentDir ( startParameter . getCurrentDir ( ) ) ; layoutCommandLineConverter . convert ( options , layout ) ; startParameter . setGradleUserHomeDir ( layout . getGradleUserHomeDir ( ) ) ; if ( layout . getProjectDir ( ) ! = null ) { startParameter . setProjectDir ( layout . getProjectDir ( ) ) ; } startParameter . setSearchUpwards ( layout . getSearchUpwards ( ) ) ; if ( options . hasOption ( BUILD_FILE ) ) { startParameter . setBuildFile ( resolver . transform ( options . option ( BUILD_FILE ) . getValue ( ) ) ) ; } if ( options . hasOption ( SETTINGS_FILE ) ) { startParameter . setSettingsFile ( resolver . transform ( options . option ( SETTINGS_FILE ) . getValue ( ) ) ) ; } for ( String script : options . option ( INIT_SCRIPT ) . getValues ( ) ) { startParameter . addInitScript ( resolver . transform ( script ) ) ; } if ( options . hasOption ( PROJECT_CACHE_DIR ) ) { startParameter . setProjectCacheDir ( resolver . transform ( options . option ( PROJECT_CACHE_DIR ) . getValue ( ) ) ) ; } if ( options . hasOption ( NO_PROJECT_DEPENDENCY_REBUILD ) ) { startParameter . setBuildProjectDependencies ( false ) ; } if ( ! options . getExtraArguments ( ) . isEmpty ( ) ) { startParameter . setTaskNames ( options . getExtraArguments ( ) ) ; } if ( options . hasOption ( DRY_RUN ) ) { startParameter . setDryRun ( true ) ; } if ( options . hasOption ( RERUN_TASKS ) ) { startParameter . setRerunTasks ( true ) ; } if ( options . hasOption ( RECOMPILE_SCRIPTS ) ) { startParameter . setRecompileScripts ( true ) ; } if ( options . hasOption ( EXCLUDE_TASK ) ) { startParameter . setExcludedTaskNames ( options . option ( EXCLUDE_TASK ) . getValues ( ) ) ; } if ( options . hasOption ( PROFILE ) ) { startParameter . setProfile ( true ) ; } if ( options . hasOption ( CONTINUE ) ) { startParameter . setContinueOnFailure ( true ) ; } if ( options . hasOption ( OFFLINE ) ) { startParameter . setOffline ( true ) ; } if ( options . hasOption ( REFRESH_DEPENDENCIES ) ) { startParameter . setRefreshDependencies ( true ) ; } if ( options . hasOption ( PARALLEL ) | | options . hadOptionRemoved ( PARALLEL_THREADS ) ) { startParameter . setParallelProjectExecutionEnabled ( true ) ; } if ( options . hasOption ( PARALLEL_THREADS ) ) { try { int parallelThreads = Integer . parseInt ( options . option ( PARALLEL_THREADS ) . getValue ( ) ) ; startParameter . setParallelThreadCount ( parallelThreads ) ; } catch ( NumberFormatException e ) { throw new CommandLineArgumentException ( String . format ( <str> , PARALLEL_THREADS ) ) ; } } if ( options . hasOption ( MAX_WORKERS ) ) { String value = options . option ( MAX_WORKERS ) . getValue ( ) ; try { int workerCount = Integer . parseInt ( value ) ; if ( workerCount < <int> ) { invalidMaxWorkersSwitchValue ( value ) ; } startParameter . setMaxWorkerCount ( workerCount ) ; } catch ( NumberFormatException e ) { invalidMaxWorkersSwitchValue ( value ) ; } } if ( options . hasOption ( CONFIGURE_ON_DEMAND ) ) { startParameter . setConfigureOnDemand ( true ) ; } if ( options . hasOption ( CONTINUOUS ) ) { startParameter . setContinuous ( true ) ; } return startParameter ; } private StartParameter invalidMaxWorkersSwitchValue ( String value ) { throw new CommandLineArgumentException ( String . format ( <str> , value , MAX_WORKERS ) ) ; } void convertCommandLineSystemProperties ( Map < String , String > systemProperties , StartParameter startParameter , Transformer < File , String > resolver ) { startParameter . getSystemPropertiesArgs ( ) . putAll ( systemProperties ) ; if ( systemProperties . containsKey ( GRADLE_USER_HOME_PROPERTY_KEY ) ) { startParameter . setGradleUserHomeDir ( resolver . transform ( systemProperties . get ( GRADLE_USER_HOME_PROPERTY_KEY ) ) ) ; } } public LayoutCommandLineConverter getLayoutConverter ( ) { return layoutCommandLineConverter ; } public SystemPropertiesCommandLineConverter getSystemPropertiesConverter ( ) { return systemPropertiesCommandLineConverter ; } } 

package org . gradle . api . internal . collections ; import java . util . Collection ; import java . util . Iterator ; import java . util . NoSuchElementException ; public class FilteredCollection < T , S extends T > implements Collection < S > { protected final Collection < T > collection ; protected final CollectionFilter < S > filter ; public FilteredCollection ( Collection < T > collection , CollectionFilter < S > filter ) { this . collection = collection ; this . filter = filter ; } public boolean add ( S o ) { throw new UnsupportedOperationException ( String . format ( <str> , o , this ) ) ; } public boolean addAll ( Collection < ? extends S > c ) { throw new UnsupportedOperationException ( String . format ( <str> , c , this ) ) ; } public void clear ( ) { throw new UnsupportedOperationException ( String . format ( <str> , this ) ) ; } protected boolean accept ( Object o ) { return filter . filter ( o ) ! = null ; } public boolean contains ( Object o ) { return collection . contains ( o ) & & accept ( o ) ; } public boolean containsAll ( Collection < ? > c ) { if ( collection . containsAll ( c ) ) { for ( Object o : c ) { if ( ! accept ( o ) ) { return false ; } } return true ; } else { return false ; } } public boolean isEmpty ( ) { if ( collection . isEmpty ( ) ) { return true ; } else { for ( T o : collection ) { if ( accept ( o ) ) { return false ; } } return true ; } } protected static class FilteringIterator < T , S extends T > implements Iterator < S > { private final CollectionFilter < S > filter ; private final Iterator < T > iterator ; private S next ; public FilteringIterator ( Iterator < T > iterator , CollectionFilter < S > filter ) { this . iterator = iterator ; this . filter = filter ; this . next = findNext ( ) ; } private S findNext ( ) { while ( iterator . hasNext ( ) ) { T potentialNext = iterator . next ( ) ; S filtered = filter . filter ( potentialNext ) ; if ( filtered ! = null ) { return filtered ; } } return null ; } public boolean hasNext ( ) { return next ! = null ; } public S next ( ) { if ( next ! = null ) { S thisNext = next ; next = findNext ( ) ; return thisNext ; } else { throw new NoSuchElementException ( ) ; } } public void remove ( ) { throw new UnsupportedOperationException ( <str> ) ; } } public Iterator < S > iterator ( ) { return new FilteringIterator < T , S > ( collection . iterator ( ) , filter ) ; } public boolean remove ( Object o ) { throw new UnsupportedOperationException ( String . format ( <str> , o , this ) ) ; } public boolean removeAll ( Collection < ? > c ) { throw new UnsupportedOperationException ( String . format ( <str> , c , this ) ) ; } public boolean retainAll ( Collection < ? > c ) { throw new UnsupportedOperationException ( String . format ( <str> , c , this ) ) ; } public int size ( ) { int i = <int> ; for ( T o : collection ) { if ( accept ( o ) ) { + + i ; } } return i ; } public Object [ ] toArray ( ) { Object [ ] a = new Object [ size ( ) ] ; int i = <int> ; for ( T o : collection ) { if ( accept ( o ) ) { a [ i + + ] = o ; } } return a ; } public < T > T [ ] toArray ( T [ ] a ) { return ( T [ ] ) toArray ( ) ; } } 

package org . gradle . api . internal ; import org . gradle . api . NamedDomainObjectFactory ; import org . gradle . internal . reflect . DirectInstantiator ; import org . gradle . internal . reflect . Instantiator ; public class ReflectiveNamedDomainObjectFactory < T > implements NamedDomainObjectFactory < T > { private final Class < ? extends T > type ; private final Object [ ] extraArgs ; private final Instantiator instantiator ; public ReflectiveNamedDomainObjectFactory ( Class < ? extends T > type , Object . . . extraArgs ) { this ( type , DirectInstantiator . INSTANCE , extraArgs ) ; } public ReflectiveNamedDomainObjectFactory ( Class < ? extends T > type , Instantiator instantiator , Object . . . extraArgs ) { this . type = type ; this . instantiator = instantiator ; this . extraArgs = extraArgs ; } public T create ( String name ) { return instantiator . newInstance ( type , combineInstantiationArgs ( name ) ) ; } protected Object [ ] combineInstantiationArgs ( String name ) { Object [ ] combinedArgs ; if ( extraArgs . length = = <int> ) { Object [ ] nameArg = { name } ; combinedArgs = nameArg ; } else { combinedArgs = new Object [ extraArgs . length + <int> ] ; combinedArgs [ <int> ] = name ; int i = <int> ; for ( Object e : extraArgs ) { combinedArgs [ i + + ] = e ; } } return combinedArgs ; } } 

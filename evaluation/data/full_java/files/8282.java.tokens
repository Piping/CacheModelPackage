package org . elasticsearch . index . query . support ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . search . fetch . innerhits . InnerHitsBuilder ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; public class QueryInnerHitsTests extends ESTestCase { public void testSerialize ( ) throws IOException { copyAndAssert ( new QueryInnerHits ( ) ) ; copyAndAssert ( new QueryInnerHits ( <str> , new InnerHitsBuilder . InnerHit ( ) ) ) ; copyAndAssert ( new QueryInnerHits ( <str> , null ) ) ; copyAndAssert ( new QueryInnerHits ( <str> , new InnerHitsBuilder . InnerHit ( ) . setSize ( randomIntBetween ( <int> , <int> ) ) ) ) ; } public void testToXContent ( ) throws IOException { assertJson ( <str> , new QueryInnerHits ( ) ) ; assertJson ( <str> , new QueryInnerHits ( <str> , new InnerHitsBuilder . InnerHit ( ) ) ) ; assertJson ( <str> , new QueryInnerHits ( <str> , null ) ) ; assertJson ( <str> , new QueryInnerHits ( <str> , new InnerHitsBuilder . InnerHit ( ) . setSize ( <int> ) ) ) ; assertJson ( <str> , new QueryInnerHits ( <str> , new InnerHitsBuilder . InnerHit ( ) . setFrom ( <int> ) . setSize ( <int> ) ) ) ; } private void assertJson ( String expected , QueryInnerHits hits ) throws IOException { QueryInnerHits queryInnerHits = copyAndAssert ( hits ) ; String actual ; if ( randomBoolean ( ) ) { actual = oneLineJSON ( queryInnerHits ) ; } else { actual = oneLineJSON ( hits ) ; } assertEquals ( expected , actual ) ; XContentParser parser = hits . getXcontentParser ( ) ; assertEquals ( XContentParser . Token . START_OBJECT , parser . nextToken ( ) ) ; QueryInnerHits other = copyAndAssert ( new QueryInnerHits ( parser ) ) ; assertEquals ( expected , oneLineJSON ( other ) ) ; } public QueryInnerHits copyAndAssert ( QueryInnerHits hits ) throws IOException { BytesStreamOutput out = new BytesStreamOutput ( ) ; hits . writeTo ( out ) ; QueryInnerHits copy = randomBoolean ( ) ? hits . readFrom ( StreamInput . wrap ( out . bytes ( ) ) ) : new QueryInnerHits ( StreamInput . wrap ( out . bytes ( ) ) ) ; assertEquals ( copy . toString ( ) + <str> + hits . toString ( ) , copy , hits ) ; return copy ; } private String oneLineJSON ( QueryInnerHits hits ) throws IOException { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . startObject ( ) ; hits . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; builder . endObject ( ) ; return builder . string ( ) . trim ( ) ; } } 

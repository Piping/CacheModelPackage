package org . gradle . api . internal . project ; import org . gradle . api . initialization . ProjectDescriptor ; import org . gradle . api . internal . GradleInternal ; import org . gradle . api . internal . initialization . ClassLoaderScope ; import org . gradle . groovy . scripts . ScriptSource ; import org . gradle . groovy . scripts . UriScriptSource ; import org . gradle . internal . reflect . Instantiator ; import java . io . File ; public class ProjectFactory implements IProjectFactory { private final Instantiator instantiator ; private final ProjectRegistry < ProjectInternal > projectRegistry ; public ProjectFactory ( Instantiator instantiator , ProjectRegistry < ProjectInternal > projectRegistry ) { this . instantiator = instantiator ; this . projectRegistry = projectRegistry ; } public DefaultProject createProject ( ProjectDescriptor projectDescriptor , ProjectInternal parent , GradleInternal gradle , ClassLoaderScope selfClassLoaderScope , ClassLoaderScope baseClassLoaderScope ) { File buildFile = projectDescriptor . getBuildFile ( ) ; ScriptSource source = UriScriptSource . file ( <str> , buildFile ) ; DefaultProject project = instantiator . newInstance ( DefaultProject . class , projectDescriptor . getName ( ) , parent , projectDescriptor . getProjectDir ( ) , source , gradle , gradle . getServiceRegistryFactory ( ) , selfClassLoaderScope , baseClassLoaderScope ) ; if ( parent ! = null ) { parent . addChildProject ( project ) ; } projectRegistry . addProject ( project ) ; return project ; } } 

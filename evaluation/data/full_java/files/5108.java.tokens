package org . elasticsearch . action . admin . indices . exists . indices ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . action . support . master . TransportMasterNodeReadAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexNotFoundException ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportIndicesExistsAction extends TransportMasterNodeReadAction < IndicesExistsRequest , IndicesExistsResponse > { @Inject public TransportIndicesExistsAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , IndicesExistsAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , IndicesExistsRequest : : new ) ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected IndicesExistsResponse newResponse ( ) { return new IndicesExistsResponse ( ) ; } @Override protected ClusterBlockException checkBlock ( IndicesExistsRequest request , ClusterState state ) { IndicesOptions indicesOptions = IndicesOptions . fromOptions ( true , true , request . indicesOptions ( ) . expandWildcardsOpen ( ) , request . indicesOptions ( ) . expandWildcardsClosed ( ) ) ; return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_READ , indexNameExpressionResolver . concreteIndices ( state , indicesOptions , request . indices ( ) ) ) ; } @Override protected void masterOperation ( final IndicesExistsRequest request , final ClusterState state , final ActionListener < IndicesExistsResponse > listener ) { boolean exists ; try { indexNameExpressionResolver . concreteIndices ( state , request ) ; exists = true ; } catch ( IndexNotFoundException e ) { exists = false ; } listener . onResponse ( new IndicesExistsResponse ( exists ) ) ; } } 

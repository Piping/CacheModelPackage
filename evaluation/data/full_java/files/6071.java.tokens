package org . elasticsearch . common . unit ; import org . elasticsearch . ElasticsearchParseException ; public class RatioValue { private final double percent ; public RatioValue ( double percent ) { this . percent = percent ; } public double getAsRatio ( ) { return this . percent / <float> ; } public double getAsPercent ( ) { return this . percent ; } @Override public String toString ( ) { return this . percent + <str> ; } public static RatioValue parseRatioValue ( String sValue ) { if ( sValue . endsWith ( <str> ) ) { final String percentAsString = sValue . substring ( <int> , sValue . length ( ) - <int> ) ; try { final double percent = Double . parseDouble ( percentAsString ) ; if ( percent < <int> | | percent > <int> ) { throw new ElasticsearchParseException ( <str> , percentAsString ) ; } return new RatioValue ( Math . abs ( percent ) ) ; } catch ( NumberFormatException e ) { throw new ElasticsearchParseException ( <str> , e , percentAsString ) ; } } else { try { double ratio = Double . parseDouble ( sValue ) ; if ( ratio < <int> | | ratio > <float> ) { throw new ElasticsearchParseException ( <str> , ratio ) ; } return new RatioValue ( <float> * Math . abs ( ratio ) ) ; } catch ( NumberFormatException e ) { throw new ElasticsearchParseException ( <str> , sValue ) ; } } } } 

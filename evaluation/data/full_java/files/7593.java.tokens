package org . elasticsearch . search . suggest . completion . context ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . xcontent . * ; import java . io . IOException ; import static org . elasticsearch . search . suggest . completion . context . CategoryContextMapping . CONTEXT_BOOST ; import static org . elasticsearch . search . suggest . completion . context . CategoryContextMapping . CONTEXT_PREFIX ; import static org . elasticsearch . search . suggest . completion . context . CategoryContextMapping . CONTEXT_VALUE ; public final class CategoryQueryContext implements ToXContent { private final CharSequence category ; private final boolean isPrefix ; private final int boost ; private CategoryQueryContext ( CharSequence category , int boost , boolean isPrefix ) { this . category = category ; this . boost = boost ; this . isPrefix = isPrefix ; } public CharSequence getCategory ( ) { return category ; } public boolean isPrefix ( ) { return isPrefix ; } public int getBoost ( ) { return boost ; } public static Builder builder ( ) { return new Builder ( ) ; } public static class Builder { private CharSequence category ; private boolean isPrefix = false ; private int boost = <int> ; public Builder ( ) { } public Builder setCategory ( CharSequence context ) { this . category = context ; return this ; } public Builder setPrefix ( boolean prefix ) { this . isPrefix = prefix ; return this ; } public Builder setBoost ( int boost ) { this . boost = boost ; return this ; } public CategoryQueryContext build ( ) { return new CategoryQueryContext ( category , boost , isPrefix ) ; } } private static ObjectParser < Builder , Void > CATEGORY_PARSER = new ObjectParser < > ( <str> , null ) ; static { CATEGORY_PARSER . declareString ( Builder : : setCategory , new ParseField ( <str> ) ) ; CATEGORY_PARSER . declareInt ( Builder : : setBoost , new ParseField ( <str> ) ) ; CATEGORY_PARSER . declareBoolean ( Builder : : setPrefix , new ParseField ( <str> ) ) ; } public static CategoryQueryContext parse ( XContentParser parser ) throws IOException { XContentParser . Token token = parser . currentToken ( ) ; Builder builder = builder ( ) ; if ( token = = XContentParser . Token . START_OBJECT ) { CATEGORY_PARSER . parse ( parser , builder ) ; } else if ( token = = XContentParser . Token . VALUE_STRING ) { builder . setCategory ( parser . text ( ) ) ; } else { throw new ElasticsearchParseException ( <str> ) ; } return builder . build ( ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; builder . field ( CONTEXT_VALUE , category ) ; builder . field ( CONTEXT_BOOST , boost ) ; builder . field ( CONTEXT_PREFIX , isPrefix ) ; builder . endObject ( ) ; return builder ; } } 

package org . apache . lucene . search . postingshighlight ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . Query ; import java . io . IOException ; import java . text . BreakIterator ; import java . util . Map ; public final class CustomPostingsHighlighter extends PostingsHighlighter { private static final Snippet [ ] EMPTY_SNIPPET = new Snippet [ <int> ] ; private static final Passage [ ] EMPTY_PASSAGE = new Passage [ <int> ] ; private final Analyzer analyzer ; private final CustomPassageFormatter passageFormatter ; private final BreakIterator breakIterator ; private final boolean returnNonHighlightedSnippets ; private final String fieldValue ; public CustomPostingsHighlighter ( Analyzer analyzer , CustomPassageFormatter passageFormatter , String fieldValue , boolean returnNonHighlightedSnippets ) { this ( analyzer , passageFormatter , null , fieldValue , returnNonHighlightedSnippets ) ; } public CustomPostingsHighlighter ( Analyzer analyzer , CustomPassageFormatter passageFormatter , BreakIterator breakIterator , String fieldValue , boolean returnNonHighlightedSnippets ) { this . analyzer = analyzer ; this . passageFormatter = passageFormatter ; this . breakIterator = breakIterator ; this . returnNonHighlightedSnippets = returnNonHighlightedSnippets ; this . fieldValue = fieldValue ; } public Snippet [ ] highlightField ( String field , Query query , IndexSearcher searcher , int docId , int maxPassages ) throws IOException { Map < String , Object [ ] > fieldsAsObjects = super . highlightFieldsAsObjects ( new String [ ] { field } , query , searcher , new int [ ] { docId } , new int [ ] { maxPassages } ) ; Object [ ] snippetObjects = fieldsAsObjects . get ( field ) ; if ( snippetObjects ! = null ) { assert snippetObjects . length = = <int> ; Object snippetObject = snippetObjects [ <int> ] ; if ( snippetObject ! = null & & snippetObject instanceof Snippet [ ] ) { return ( Snippet [ ] ) snippetObject ; } } return EMPTY_SNIPPET ; } @Override protected PassageFormatter getFormatter ( String field ) { return passageFormatter ; } @Override protected BreakIterator getBreakIterator ( String field ) { if ( breakIterator = = null ) { return super . getBreakIterator ( field ) ; } return breakIterator ; } @Override protected Passage [ ] getEmptyHighlight ( String fieldName , BreakIterator bi , int maxPassages ) { if ( returnNonHighlightedSnippets ) { return super . getEmptyHighlight ( fieldName , bi , <int> ) ; } return EMPTY_PASSAGE ; } @Override protected Analyzer getIndexAnalyzer ( String field ) { return analyzer ; } @Override protected String [ ] [ ] loadFieldValues ( IndexSearcher searcher , String [ ] fields , int [ ] docids , int maxLength ) throws IOException { return new String [ ] [ ] { new String [ ] { fieldValue } } ; } } 

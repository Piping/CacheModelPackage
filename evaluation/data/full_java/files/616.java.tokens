package org . apache . cassandra . hadoop . cql3 ; import java . io . IOException ; import java . nio . ByteBuffer ; import java . util . List ; import java . util . Map ; import org . apache . cassandra . hadoop . * ; import org . apache . hadoop . conf . * ; import org . apache . hadoop . mapreduce . * ; public class CqlOutputFormat extends OutputFormat < Map < String , ByteBuffer > , List < ByteBuffer > > implements org . apache . hadoop . mapred . OutputFormat < Map < String , ByteBuffer > , List < ByteBuffer > > { public static final String BATCH_THRESHOLD = <str> ; public static final String QUEUE_SIZE = <str> ; public void checkOutputSpecs ( JobContext context ) { checkOutputSpecs ( HadoopCompat . getConfiguration ( context ) ) ; } protected void checkOutputSpecs ( Configuration conf ) { if ( ConfigHelper . getOutputKeyspace ( conf ) = = null ) throw new UnsupportedOperationException ( <str> ) ; if ( ConfigHelper . getOutputPartitioner ( conf ) = = null ) throw new UnsupportedOperationException ( <str> ) ; if ( ConfigHelper . getOutputInitialAddress ( conf ) = = null ) throw new UnsupportedOperationException ( <str> ) ; } @Deprecated public void checkOutputSpecs ( org . apache . hadoop . fs . FileSystem filesystem , org . apache . hadoop . mapred . JobConf job ) throws IOException { checkOutputSpecs ( job ) ; } public OutputCommitter getOutputCommitter ( TaskAttemptContext context ) throws IOException , InterruptedException { return new NullOutputCommitter ( ) ; } @Deprecated public CqlRecordWriter getRecordWriter ( org . apache . hadoop . fs . FileSystem filesystem , org . apache . hadoop . mapred . JobConf job , String name , org . apache . hadoop . util . Progressable progress ) throws IOException { return new CqlRecordWriter ( job , progress ) ; } public CqlRecordWriter getRecordWriter ( final TaskAttemptContext context ) throws IOException , InterruptedException { return new CqlRecordWriter ( context ) ; } private static class NullOutputCommitter extends OutputCommitter { public void abortTask ( TaskAttemptContext taskContext ) { } public void cleanupJob ( JobContext jobContext ) { } public void commitTask ( TaskAttemptContext taskContext ) { } public boolean needsTaskCommit ( TaskAttemptContext taskContext ) { return false ; } public void setupJob ( JobContext jobContext ) { } public void setupTask ( TaskAttemptContext taskContext ) { } } } 

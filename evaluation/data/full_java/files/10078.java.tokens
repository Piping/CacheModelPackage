package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . Helpers . assertContentsInOrder ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_REMOVE ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . SEVERAL ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . MinimalCollection ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . util . Arrays ; @GwtCompatible public class ListRetainAllTester < E > extends AbstractListTester < E > { @CollectionFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testRetainAll_duplicatesKept ( ) { E [ ] array = createSamplesArray ( ) ; array [ <int> ] = e0 ( ) ; collection = getSubjectGenerator ( ) . create ( array ) ; assertFalse ( <str> , collection . retainAll ( MinimalCollection . of ( createSamplesArray ( ) ) ) ) ; expectContents ( array ) ; } @SuppressWarnings ( <str> ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( SEVERAL ) public void testRetainAll_duplicatesRemoved ( ) { E [ ] array = createSamplesArray ( ) ; array [ <int> ] = e0 ( ) ; collection = getSubjectGenerator ( ) . create ( array ) ; assertTrue ( <str> , collection . retainAll ( MinimalCollection . of ( e2 ( ) ) ) ) ; expectContents ( e2 ( ) ) ; } @SuppressWarnings ( <str> ) @CollectionFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( SEVERAL ) public void testRetainAll_countIgnored ( ) { resetContainer ( getSubjectGenerator ( ) . create ( e0 ( ) , e2 ( ) , e1 ( ) , e0 ( ) ) ) ; assertTrue ( getList ( ) . retainAll ( Arrays . asList ( e0 ( ) , e1 ( ) ) ) ) ; assertContentsInOrder ( getList ( ) , e0 ( ) , e1 ( ) , e0 ( ) ) ; } } 

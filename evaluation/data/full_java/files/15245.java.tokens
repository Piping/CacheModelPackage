package org . gradle . plugin . use . resolve . service . internal ; import org . gradle . internal . serialize . BaseSerializerFactory ; import org . gradle . internal . serialize . Decoder ; import org . gradle . internal . serialize . Encoder ; import java . util . Map ; public class PluginUseMetaData { public static final String M2_JAR = <str> ; public final String id ; public final String version ; public final Map < String , String > implementation ; public final String implementationType ; public final boolean legacy ; public PluginUseMetaData ( String id , String version , Map < String , String > implementation , String implementationType , boolean legacy ) { this . id = id ; this . version = version ; this . implementation = implementation ; this . implementationType = implementationType ; this . legacy = legacy ; } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( ! ( o instanceof PluginUseMetaData ) ) { return false ; } PluginUseMetaData that = ( PluginUseMetaData ) o ; if ( legacy ! = that . legacy ) { return false ; } if ( ! id . equals ( that . id ) ) { return false ; } if ( ! implementation . equals ( that . implementation ) ) { return false ; } if ( ! implementationType . equals ( that . implementationType ) ) { return false ; } if ( ! version . equals ( that . version ) ) { return false ; } return true ; } @Override public int hashCode ( ) { int result = id . hashCode ( ) ; result = <int> * result + version . hashCode ( ) ; result = <int> * result + implementation . hashCode ( ) ; result = <int> * result + implementationType . hashCode ( ) ; result = <int> * result + ( legacy ? <int> : <int> ) ; return result ; } public static class Serializer implements org . gradle . internal . serialize . Serializer < PluginUseMetaData > { public PluginUseMetaData read ( Decoder decoder ) throws Exception { return new PluginUseMetaData ( decoder . readString ( ) , decoder . readString ( ) , BaseSerializerFactory . NO_NULL_STRING_MAP_SERIALIZER . read ( decoder ) , decoder . readString ( ) , decoder . readBoolean ( ) ) ; } public void write ( Encoder encoder , PluginUseMetaData value ) throws Exception { encoder . writeString ( value . id ) ; encoder . writeString ( value . version ) ; BaseSerializerFactory . NO_NULL_STRING_MAP_SERIALIZER . write ( encoder , value . implementation ) ; encoder . writeString ( value . implementationType ) ; encoder . writeBoolean ( value . legacy ) ; } } } 

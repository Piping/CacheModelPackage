package org . elasticsearch . common . lucene . index ; import org . apache . lucene . index . * ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . index . shard . ShardId ; import java . io . IOException ; public final class ElasticsearchDirectoryReader extends FilterDirectoryReader { private final ShardId shardId ; private final FilterDirectoryReader . SubReaderWrapper wrapper ; private ElasticsearchDirectoryReader ( DirectoryReader in , FilterDirectoryReader . SubReaderWrapper wrapper , ShardId shardId ) throws IOException { super ( in , wrapper ) ; this . wrapper = wrapper ; this . shardId = shardId ; } public ShardId shardId ( ) { return this . shardId ; } @Override protected DirectoryReader doWrapDirectoryReader ( DirectoryReader in ) throws IOException { return new ElasticsearchDirectoryReader ( in , wrapper , shardId ) ; } public static ElasticsearchDirectoryReader wrap ( DirectoryReader reader , ShardId shardId ) throws IOException { return new ElasticsearchDirectoryReader ( reader , new SubReaderWrapper ( shardId ) , shardId ) ; } private final static class SubReaderWrapper extends FilterDirectoryReader . SubReaderWrapper { private final ShardId shardId ; SubReaderWrapper ( ShardId shardId ) { this . shardId = shardId ; } @Override public LeafReader wrap ( LeafReader reader ) { return new ElasticsearchLeafReader ( reader , shardId ) ; } } @SuppressForbidden ( reason = <str> ) public static void addReaderCloseListener ( DirectoryReader reader , IndexReader . ReaderClosedListener listener ) { ElasticsearchDirectoryReader elasticsearchDirectoryReader = getElasticsearchDirectoryReader ( reader ) ; if ( elasticsearchDirectoryReader ! = null ) { assert reader . getCoreCacheKey ( ) = = elasticsearchDirectoryReader . getCoreCacheKey ( ) ; elasticsearchDirectoryReader . addReaderClosedListener ( listener ) ; return ; } throw new IllegalArgumentException ( <str> ) ; } public static ElasticsearchDirectoryReader getElasticsearchDirectoryReader ( DirectoryReader reader ) { if ( reader instanceof FilterDirectoryReader ) { if ( reader instanceof ElasticsearchDirectoryReader ) { return ( ElasticsearchDirectoryReader ) reader ; } else { return getElasticsearchDirectoryReader ( ( ( FilterDirectoryReader ) reader ) . getDelegate ( ) ) ; } } return null ; } } 

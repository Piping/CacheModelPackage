package org . gradle . build . docs . dsl . docbook ; import org . gradle . build . docs . dsl . docbook . model . ClassDoc ; import org . gradle . build . docs . dsl . docbook . model . ClassExtensionDoc ; import org . gradle . build . docs . dsl . docbook . model . MethodDoc ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import java . util . Collection ; class MethodsRenderer implements ClassDocMemberRenderer { private final MethodTableRenderer methodTableRenderer = new MethodTableRenderer ( ) ; private final ExtensionMethodsSummaryRenderer extensionMethodsSummaryRenderer ; private final MethodDetailRenderer methodDetailRenderer ; public MethodsRenderer ( LinkRenderer linkRenderer , GenerationListener listener ) { methodDetailRenderer = new MethodDetailRenderer ( linkRenderer , listener ) ; extensionMethodsSummaryRenderer = new ExtensionMethodsSummaryRenderer ( methodTableRenderer ) ; } public void renderSummaryTo ( ClassDoc classDoc , Element parent ) { Document document = parent . getOwnerDocument ( ) ; Element summarySection = document . createElement ( <str> ) ; parent . appendChild ( summarySection ) ; Element title = document . createElement ( <str> ) ; summarySection . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; Collection < MethodDoc > classMethods = classDoc . getClassMethods ( ) ; if ( ! classMethods . isEmpty ( ) ) { Element table = document . createElement ( <str> ) ; summarySection . appendChild ( table ) ; title = document . createElement ( <str> ) ; table . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> + classDoc . getSimpleName ( ) ) ) ; methodTableRenderer . renderTo ( classMethods , table ) ; } for ( ClassExtensionDoc extensionDoc : classDoc . getClassExtensions ( ) ) { extensionMethodsSummaryRenderer . renderTo ( extensionDoc , summarySection ) ; } if ( ! hasMethods ( classDoc ) ) { Element para = document . createElement ( <str> ) ; summarySection . appendChild ( para ) ; para . appendChild ( document . createTextNode ( <str> ) ) ; } } public void renderDetailsTo ( ClassDoc classDoc , Element parent ) { if ( hasMethods ( classDoc ) ) { Document document = parent . getOwnerDocument ( ) ; Element detailsSection = document . createElement ( <str> ) ; parent . appendChild ( detailsSection ) ; Element title = document . createElement ( <str> ) ; detailsSection . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; for ( MethodDoc methodDoc : classDoc . getClassMethods ( ) ) { methodDetailRenderer . renderTo ( methodDoc , detailsSection ) ; } for ( ClassExtensionDoc extensionDoc : classDoc . getClassExtensions ( ) ) { for ( MethodDoc methodDoc : extensionDoc . getExtensionMethods ( ) ) { methodDetailRenderer . renderTo ( methodDoc , detailsSection ) ; } } } } private boolean hasMethods ( ClassDoc classDoc ) { boolean hasMethods = false ; if ( ! classDoc . getClassMethods ( ) . isEmpty ( ) ) { hasMethods = true ; } for ( ClassExtensionDoc extensionDoc : classDoc . getClassExtensions ( ) ) { hasMethods | = ! extensionDoc . getExtensionMethods ( ) . isEmpty ( ) ; } return hasMethods ; } } 

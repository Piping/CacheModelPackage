package org . elasticsearch . node . settings ; import org . elasticsearch . cluster . ClusterChangedEvent ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterStateListener ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . logging . ESLoggerFactory ; import org . elasticsearch . common . settings . Settings ; import java . util . Map ; import java . util . concurrent . CopyOnWriteArrayList ; public class NodeSettingsService extends AbstractComponent implements ClusterStateListener { private static volatile Settings globalSettings = Settings . Builder . EMPTY_SETTINGS ; public static Settings getGlobalSettings ( ) { return globalSettings ; } private volatile Settings lastSettingsApplied ; private final CopyOnWriteArrayList < Listener > listeners = new CopyOnWriteArrayList < > ( ) ; @Inject public NodeSettingsService ( Settings settings ) { super ( settings ) ; globalSettings = settings ; } public void setClusterService ( ClusterService clusterService ) { clusterService . add ( this ) ; } @Override public void clusterChanged ( ClusterChangedEvent event ) { if ( event . state ( ) . blocks ( ) . disableStatePersistence ( ) ) { return ; } if ( ! event . metaDataChanged ( ) ) { return ; } if ( lastSettingsApplied ! = null & & event . state ( ) . metaData ( ) . settings ( ) . equals ( lastSettingsApplied ) ) { return ; } for ( Listener listener : listeners ) { try { listener . onRefreshSettings ( event . state ( ) . metaData ( ) . settings ( ) ) ; } catch ( Exception e ) { logger . warn ( <str> , e , listener ) ; } } try { for ( Map . Entry < String , String > entry : event . state ( ) . metaData ( ) . settings ( ) . getAsMap ( ) . entrySet ( ) ) { if ( entry . getKey ( ) . startsWith ( <str> ) ) { String component = entry . getKey ( ) . substring ( <str> . length ( ) ) ; if ( <str> . equals ( component ) ) { ESLoggerFactory . getRootLogger ( ) . setLevel ( entry . getValue ( ) ) ; } else { ESLoggerFactory . getLogger ( component ) . setLevel ( entry . getValue ( ) ) ; } } } } catch ( Exception e ) { logger . warn ( <str> , e , <str> ) ; } lastSettingsApplied = event . state ( ) . metaData ( ) . settings ( ) ; globalSettings = lastSettingsApplied ; } public void addListener ( Listener listener ) { this . listeners . add ( listener ) ; } public void removeListener ( Listener listener ) { this . listeners . remove ( listener ) ; } public interface Listener { void onRefreshSettings ( Settings settings ) ; } } 

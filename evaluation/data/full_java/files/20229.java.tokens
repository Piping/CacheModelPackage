package io . netty . channel ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufAllocator ; public abstract class DefaultMaxMessagesRecvByteBufAllocator implements MaxMessagesRecvByteBufAllocator { private volatile int maxMessagesPerRead ; public DefaultMaxMessagesRecvByteBufAllocator ( ) { this ( <int> ) ; } public DefaultMaxMessagesRecvByteBufAllocator ( int maxMessagesPerRead ) { maxMessagesPerRead ( maxMessagesPerRead ) ; } @Override public int maxMessagesPerRead ( ) { return maxMessagesPerRead ; } @Override public MaxMessagesRecvByteBufAllocator maxMessagesPerRead ( int maxMessagesPerRead ) { if ( maxMessagesPerRead < = <int> ) { throw new IllegalArgumentException ( <str> + maxMessagesPerRead + <str> ) ; } this . maxMessagesPerRead = maxMessagesPerRead ; return this ; } public abstract class MaxMessageHandle implements Handle { private ChannelConfig config ; private int maxMessagePerRead ; private int totalMessages ; private int totalBytesRead ; private int attemptedBytesRead ; private int lastBytesRead ; @Override public void reset ( ChannelConfig config ) { this . config = config ; maxMessagePerRead = maxMessagesPerRead ( ) ; totalMessages = totalBytesRead = <int> ; } @Override public ByteBuf allocate ( ByteBufAllocator alloc ) { return alloc . ioBuffer ( guess ( ) ) ; } @Override public final void incMessagesRead ( int amt ) { totalMessages + = amt ; } @Override public final void lastBytesRead ( int bytes ) { lastBytesRead = bytes ; totalBytesRead + = bytes ; if ( totalBytesRead < <int> ) { totalBytesRead = Integer . MAX_VALUE ; } } @Override public final int lastBytesRead ( ) { return lastBytesRead ; } @Override public boolean continueReading ( ) { return config . isAutoRead ( ) & & attemptedBytesRead = = lastBytesRead & & totalMessages < maxMessagePerRead & & totalBytesRead < Integer . MAX_VALUE ; } @Override public void readComplete ( ) { } @Override public int attemptedBytesRead ( ) { return attemptedBytesRead ; } @Override public void attemptedBytesRead ( int bytes ) { attemptedBytesRead = bytes ; } protected final int totalBytesRead ( ) { return totalBytesRead ; } } } 

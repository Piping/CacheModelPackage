package org . eclipse . debug . core . model ; import java . util . Map ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IResourceRuleFactory ; import org . eclipse . core . resources . IWorkspace ; import org . eclipse . core . resources . IWorkspaceRunnable ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . ISchedulingRule ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . IBreakpointManager ; import org . eclipse . debug . internal . core . BreakpointManager ; import org . eclipse . debug . internal . core . DebugCoreMessages ; public abstract class Breakpoint extends PlatformObject implements IBreakpoint { public Breakpoint ( ) { ( ( BreakpointManager ) DebugPlugin . getDefault ( ) . getBreakpointManager ( ) ) . ensureInitialized ( ) ; } private IMarker fMarker = null ; @Override public void setMarker ( IMarker marker ) throws CoreException { fMarker = marker ; } @Override public boolean equals ( Object item ) { if ( item instanceof IBreakpoint ) { return getMarker ( ) . equals ( ( ( IBreakpoint ) item ) . getMarker ( ) ) ; } return false ; } @Override public int hashCode ( ) { return getMarker ( ) . hashCode ( ) ; } @Override public void setEnabled ( boolean enabled ) throws CoreException { if ( enabled ! = isEnabled ( ) ) { setAttribute ( ENABLED , enabled ) ; } } @Override public boolean isEnabled ( ) throws CoreException { return getMarker ( ) . getAttribute ( ENABLED , false ) ; } @Override public boolean isRegistered ( ) throws CoreException { IMarker marker = getMarker ( ) ; return marker . exists ( ) & & marker . getAttribute ( REGISTERED , true ) ; } @Override public void setRegistered ( boolean registered ) throws CoreException { if ( isRegistered ( ) ! = registered ) { setAttribute ( REGISTERED , registered ) ; IBreakpointManager mgr = DebugPlugin . getDefault ( ) . getBreakpointManager ( ) ; if ( registered ) { mgr . addBreakpoint ( this ) ; } else { mgr . removeBreakpoint ( this , false ) ; } } } @Override public void delete ( ) throws CoreException { DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . removeBreakpoint ( this , false ) ; getMarker ( ) . delete ( ) ; } @Override public IMarker getMarker ( ) { return fMarker ; } @Override public boolean isPersisted ( ) throws CoreException { return getMarker ( ) . getAttribute ( PERSISTED , true ) ; } @Override public void setPersisted ( boolean persisted ) throws CoreException { if ( isPersisted ( ) ! = persisted ) { setAttributes ( new String [ ] { PERSISTED , IMarker . TRANSIENT } , new Object [ ] { Boolean . valueOf ( persisted ) , Boolean . valueOf ( ! persisted ) } ) ; } } protected void setAttribute ( final String attributeName , final boolean value ) throws CoreException { IWorkspace workspace = ResourcesPlugin . getWorkspace ( ) ; IWorkspaceRunnable runnable = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) throws CoreException { ensureMarker ( ) . setAttribute ( attributeName , value ) ; } } ; workspace . run ( runnable , getMarkerRule ( ) , <int> , null ) ; } protected void setAttribute ( final String attributeName , final int value ) throws CoreException { IWorkspace workspace = ResourcesPlugin . getWorkspace ( ) ; IWorkspaceRunnable runnable = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) throws CoreException { ensureMarker ( ) . setAttribute ( attributeName , value ) ; } } ; workspace . run ( runnable , getMarkerRule ( ) , <int> , null ) ; } protected void setAttribute ( final String attributeName , final Object value ) throws CoreException { IWorkspace workspace = ResourcesPlugin . getWorkspace ( ) ; IWorkspaceRunnable runnable = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) throws CoreException { ensureMarker ( ) . setAttribute ( attributeName , value ) ; } } ; workspace . run ( runnable , getMarkerRule ( ) , <int> , null ) ; } protected void setAttributes ( final String [ ] attributeNames , final Object [ ] values ) throws CoreException { IWorkspace workspace = ResourcesPlugin . getWorkspace ( ) ; IWorkspaceRunnable runnable = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) throws CoreException { ensureMarker ( ) . setAttributes ( attributeNames , values ) ; } } ; workspace . run ( runnable , getMarkerRule ( ) , IWorkspace . AVOID_UPDATE , null ) ; } protected void setAttributes ( final Map < String , ? extends Object > attributes ) throws CoreException { IWorkspace workspace = ResourcesPlugin . getWorkspace ( ) ; IWorkspaceRunnable runnable = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) throws CoreException { ensureMarker ( ) . setAttributes ( attributes ) ; } } ; workspace . run ( runnable , getMarkerRule ( ) , IWorkspace . AVOID_UPDATE , null ) ; } protected IMarker ensureMarker ( ) throws DebugException { IMarker m = getMarker ( ) ; if ( m = = null | | ! m . exists ( ) ) { throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , DebugCoreMessages . Breakpoint_no_associated_marker , null ) ) ; } return m ; } protected boolean markerExists ( ) { IMarker m = getMarker ( ) ; return ( m ! = null & & m . exists ( ) ) ; } protected ISchedulingRule getMarkerRule ( IResource resource ) { ISchedulingRule rule = null ; if ( resource ! = null ) { IResourceRuleFactory ruleFactory = ResourcesPlugin . getWorkspace ( ) . getRuleFactory ( ) ; rule = ruleFactory . markerRule ( resource ) ; } return rule ; } protected ISchedulingRule getMarkerRule ( ) { ISchedulingRule rule = null ; IMarker marker = getMarker ( ) ; if ( marker ! = null ) { IResource resource = marker . getResource ( ) ; if ( resource ! = null ) { IResourceRuleFactory ruleFactory = ResourcesPlugin . getWorkspace ( ) . getRuleFactory ( ) ; rule = ruleFactory . markerRule ( resource ) ; } } return rule ; } protected void run ( ISchedulingRule rule , IWorkspaceRunnable wr ) throws DebugException { try { ResourcesPlugin . getWorkspace ( ) . run ( wr , rule , <int> , null ) ; } catch ( CoreException e ) { throw new DebugException ( e . getStatus ( ) ) ; } } } 

package jcuda ; import java . io . * ; import java . util . Locale ; public final class LibUtils { public static enum OSType { APPLE , LINUX , SUN , WINDOWS , UNKNOWN } public static enum ARCHType { PPC , PPC_64 , SPARC , X86 , X86_64 , ARM , MIPS , RISC , UNKNOWN } public static void loadLibrary ( String baseName ) { String libName = LibUtils . createLibName ( baseName ) ; Throwable throwable = null ; final boolean tryResource = true ; if ( tryResource ) { try { loadLibraryResource ( libName ) ; return ; } catch ( Throwable t ) { throwable = t ; } } try { System . loadLibrary ( libName ) ; return ; } catch ( Throwable t ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; pw . println ( <str> + libName + <str> + baseName + <str> ) ; pw . println ( <str> + System . getProperty ( <str> ) ) ; pw . println ( <str> + System . getProperty ( <str> ) ) ; pw . println ( <str> + System . getProperty ( <str> ) ) ; if ( throwable ! = null ) { pw . println ( <str> + <str> ) ; throwable . printStackTrace ( pw ) ; } pw . println ( <str> + <str> ) ; t . printStackTrace ( pw ) ; pw . flush ( ) ; pw . close ( ) ; throw new UnsatisfiedLinkError ( <str> + sw . toString ( ) ) ; } } private static void loadLibraryResource ( String libName ) throws Throwable { String libPrefix = createLibPrefix ( ) ; String libExtension = createLibExtension ( ) ; String fullName = libPrefix + libName ; String resourceName = <str> + fullName + <str> + libExtension ; InputStream inputStream = LibUtils . class . getResourceAsStream ( resourceName ) ; if ( inputStream = = null ) { throw new NullPointerException ( <str> + resourceName + <str> ) ; } File tempFile = File . createTempFile ( fullName , <str> + libExtension ) ; tempFile . deleteOnExit ( ) ; OutputStream outputStream = null ; try { outputStream = new FileOutputStream ( tempFile ) ; byte [ ] buffer = new byte [ <int> ] ; while ( true ) { int read = inputStream . read ( buffer ) ; if ( read < <int> ) { break ; } outputStream . write ( buffer , <int> , read ) ; } outputStream . flush ( ) ; outputStream . close ( ) ; outputStream = null ; System . load ( tempFile . toString ( ) ) ; } finally { if ( outputStream ! = null ) { outputStream . close ( ) ; } } } private static String createLibExtension ( ) { OSType osType = calculateOS ( ) ; switch ( osType ) { case APPLE : return <str> ; case LINUX : return <str> ; case SUN : return <str> ; case WINDOWS : return <str> ; } return <str> ; } private static String createLibPrefix ( ) { OSType osType = calculateOS ( ) ; switch ( osType ) { case APPLE : case LINUX : case SUN : return <str> ; case WINDOWS : return <str> ; } return <str> ; } public static String createLibName ( String baseName ) { OSType osType = calculateOS ( ) ; ARCHType archType = calculateArch ( ) ; String libName = baseName ; libName + = <str> + osType . toString ( ) . toLowerCase ( Locale . ENGLISH ) ; libName + = <str> + archType . toString ( ) . toLowerCase ( Locale . ENGLISH ) ; return libName ; } public static OSType calculateOS ( ) { String osName = System . getProperty ( <str> ) ; osName = osName . toLowerCase ( Locale . ENGLISH ) ; if ( osName . startsWith ( <str> ) ) { return OSType . APPLE ; } if ( osName . startsWith ( <str> ) ) { return OSType . WINDOWS ; } if ( osName . startsWith ( <str> ) ) { return OSType . LINUX ; } if ( osName . startsWith ( <str> ) ) { return OSType . SUN ; } return OSType . UNKNOWN ; } public static ARCHType calculateArch ( ) { String osArch = System . getProperty ( <str> ) ; osArch = osArch . toLowerCase ( Locale . ENGLISH ) ; if ( osArch . equals ( <str> ) | | osArch . equals ( <str> ) | | osArch . equals ( <str> ) ) { return ARCHType . X86 ; } if ( osArch . startsWith ( <str> ) | | osArch . startsWith ( <str> ) ) { return ARCHType . X86_64 ; } if ( osArch . equals ( <str> ) | | osArch . equals ( <str> ) ) { return ARCHType . PPC ; } if ( osArch . startsWith ( <str> ) ) { return ARCHType . PPC_64 ; } if ( osArch . startsWith ( <str> ) ) { return ARCHType . SPARC ; } if ( osArch . startsWith ( <str> ) ) { return ARCHType . ARM ; } if ( osArch . startsWith ( <str> ) ) { return ARCHType . MIPS ; } if ( osArch . contains ( <str> ) ) { return ARCHType . RISC ; } return ARCHType . UNKNOWN ; } private LibUtils ( ) { } } 

package org . elasticsearch . script . expression ; import org . apache . lucene . expressions . Expression ; import org . apache . lucene . expressions . js . JavascriptCompiler ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . action . update . UpdateRequestBuilder ; import org . elasticsearch . common . lucene . search . function . CombineFunction ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . index . query . functionscore . ScoreFunctionBuilder ; import org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . CompiledScript ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptException ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . search . SearchHits ; import org . elasticsearch . search . aggregations . AggregationBuilders ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . bucket . histogram . InternalHistogram ; import org . elasticsearch . search . aggregations . bucket . histogram . InternalHistogram . Bucket ; import org . elasticsearch . search . aggregations . metrics . stats . Stats ; import org . elasticsearch . search . aggregations . pipeline . SimpleValue ; import org . elasticsearch . search . sort . SortBuilders ; import org . elasticsearch . search . sort . SortOrder ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . hamcrest . ElasticsearchAssertions ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . sum ; import static org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorBuilders . bucketScript ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . notNullValue ; public class MoreExpressionTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( ExpressionPlugin . class ) ; } private SearchRequestBuilder buildRequest ( String script , Object . . . params ) { ensureGreen ( <str> ) ; Map < String , Object > paramsMap = new HashMap < > ( ) ; assert ( params . length % <int> = = <int> ) ; for ( int i = <int> ; i < params . length ; i + = <int> ) { paramsMap . put ( params [ i ] . toString ( ) , params [ i + <int> ] ) ; } SearchRequestBuilder req = client ( ) . prepareSearch ( ) . setIndices ( <str> ) ; req . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addSort ( SortBuilders . fieldSort ( <str> ) . order ( SortOrder . ASC ) ) . addScriptField ( <str> , new Script ( script , ScriptType . INLINE , <str> , paramsMap ) ) ; return req ; } public void testBasic ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; SearchResponse rsp = buildRequest ( <str> ) . get ( ) ; assertEquals ( <int> , rsp . getHits ( ) . getTotalHits ( ) ) ; assertEquals ( <float> , rsp . getHits ( ) . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; } public void testFunction ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; SearchResponse rsp = buildRequest ( <str> ) . get ( ) ; assertSearchResponse ( rsp ) ; assertEquals ( <int> , rsp . getHits ( ) . getTotalHits ( ) ) ; assertEquals ( <float> , rsp . getHits ( ) . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; } public void testBasicUsingDotValue ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; SearchResponse rsp = buildRequest ( <str> ) . get ( ) ; assertEquals ( <int> , rsp . getHits ( ) . getTotalHits ( ) ) ; assertEquals ( <float> , rsp . getHits ( ) . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; } public void testScore ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; ScoreFunctionBuilder score = ScoreFunctionBuilders . scriptFunction ( new Script ( <str> , ScriptType . INLINE , <str> , null ) ) ; SearchRequestBuilder req = client ( ) . prepareSearch ( ) . setIndices ( <str> ) ; req . setQuery ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , <str> ) , score ) . boostMode ( CombineFunction . REPLACE ) ) ; req . setSearchType ( SearchType . DFS_QUERY_THEN_FETCH ) ; SearchResponse rsp = req . get ( ) ; assertSearchResponse ( rsp ) ; SearchHits hits = rsp . getHits ( ) ; assertEquals ( <int> , hits . getTotalHits ( ) ) ; assertEquals ( <str> , hits . getAt ( <int> ) . getId ( ) ) ; assertEquals ( <str> , hits . getAt ( <int> ) . getId ( ) ) ; assertEquals ( <str> , hits . getAt ( <int> ) . getId ( ) ) ; } public void testDateMethods ( ) throws Exception { ElasticsearchAssertions . assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) ) ; SearchResponse rsp = buildRequest ( <str> ) . get ( ) ; assertEquals ( <int> , rsp . getHits ( ) . getTotalHits ( ) ) ; SearchHits hits = rsp . getHits ( ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( - <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; rsp = buildRequest ( <str> ) . get ( ) ; assertEquals ( <int> , rsp . getHits ( ) . getTotalHits ( ) ) ; hits = rsp . getHits ( ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; rsp = buildRequest ( <str> ) . get ( ) ; assertEquals ( <int> , rsp . getHits ( ) . getTotalHits ( ) ) ; hits = rsp . getHits ( ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; rsp = buildRequest ( <str> ) . get ( ) ; assertEquals ( <int> , rsp . getHits ( ) . getTotalHits ( ) ) ; hits = rsp . getHits ( ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; } public void testMultiValueMethods ( ) throws Exception { ElasticsearchAssertions . assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; SearchResponse rsp = buildRequest ( <str> ) . get ( ) ; assertSearchResponse ( rsp ) ; SearchHits hits = rsp . getHits ( ) ; assertEquals ( <int> , hits . getTotalHits ( ) ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; rsp = buildRequest ( <str> ) . get ( ) ; assertSearchResponse ( rsp ) ; hits = rsp . getHits ( ) ; assertEquals ( <int> , hits . getTotalHits ( ) ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; rsp = buildRequest ( <str> ) . get ( ) ; assertSearchResponse ( rsp ) ; hits = rsp . getHits ( ) ; assertEquals ( <int> , hits . getTotalHits ( ) ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; rsp = buildRequest ( <str> ) . get ( ) ; assertSearchResponse ( rsp ) ; hits = rsp . getHits ( ) ; assertEquals ( <int> , hits . getTotalHits ( ) ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; rsp = buildRequest ( <str> ) . get ( ) ; assertSearchResponse ( rsp ) ; hits = rsp . getHits ( ) ; assertEquals ( <int> , hits . getTotalHits ( ) ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( - <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; rsp = buildRequest ( <str> ) . get ( ) ; assertSearchResponse ( rsp ) ; hits = rsp . getHits ( ) ; assertEquals ( <int> , hits . getTotalHits ( ) ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; rsp = buildRequest ( <str> ) . get ( ) ; assertSearchResponse ( rsp ) ; hits = rsp . getHits ( ) ; assertEquals ( <int> , hits . getTotalHits ( ) ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; } public void testInvalidDateMethodCall ( ) throws Exception { ElasticsearchAssertions . assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; try { buildRequest ( <str> ) . get ( ) ; fail ( ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testSparseField ( ) throws Exception { ElasticsearchAssertions . assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> ) ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) ) ; SearchResponse rsp = buildRequest ( <str> ) . get ( ) ; ElasticsearchAssertions . assertSearchResponse ( rsp ) ; SearchHits hits = rsp . getHits ( ) ; assertEquals ( <int> , rsp . getHits ( ) . getTotalHits ( ) ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; } public void testMissingField ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; try { buildRequest ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testParams ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) ) ; String script = <str> ; SearchResponse rsp = buildRequest ( script , <str> , <int> , <str> , <float> , <str> , <int> ) . get ( ) ; SearchHits hits = rsp . getHits ( ) ; assertEquals ( <int> , hits . getTotalHits ( ) ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; assertEquals ( <float> , hits . getAt ( <int> ) . field ( <str> ) . getValue ( ) , <float> ) ; } public void testCompileFailure ( ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; try { buildRequest ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testNonNumericParam ( ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; try { buildRequest ( <str> , <str> , <str> ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testNonNumericField ( ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . get ( ) ; try { buildRequest ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testInvalidGlobalVariable ( ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; try { buildRequest ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testDocWithoutField ( ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; try { buildRequest ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testInvalidFieldMember ( ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; try { buildRequest ( <str> ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testSpecialValueVariable ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> , <str> , <float> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> , <str> , <float> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> , <str> , <float> ) ) ; SearchRequestBuilder req = client ( ) . prepareSearch ( ) . setIndices ( <str> ) ; req . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( AggregationBuilders . stats ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , ExpressionScriptEngineService . NAME , null ) ) ) . addAggregation ( AggregationBuilders . stats ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , ExpressionScriptEngineService . NAME , null ) ) ) ; SearchResponse rsp = req . get ( ) ; assertEquals ( <int> , rsp . getHits ( ) . getTotalHits ( ) ) ; Stats stats = rsp . getAggregations ( ) . get ( <str> ) ; assertEquals ( <float> , stats . getMax ( ) , <float> ) ; assertEquals ( <float> , stats . getMin ( ) , <float> ) ; stats = rsp . getAggregations ( ) . get ( <str> ) ; assertEquals ( <float> , stats . getMax ( ) , <float> ) ; assertEquals ( <float> , stats . getMin ( ) , <float> ) ; } public void testStringSpecialValueVariable ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; SearchRequestBuilder req = client ( ) . prepareSearch ( ) . setIndices ( <str> ) ; req . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( AggregationBuilders . terms ( <str> ) . field ( <str> ) . script ( new Script ( <str> , ScriptType . INLINE , ExpressionScriptEngineService . NAME , null ) ) ) ; String message ; try { SearchResponse rsp = req . get ( ) ; assertThat ( rsp . getShardFailures ( ) . length , greaterThan ( <int> ) ) ; message = rsp . getShardFailures ( ) [ <int> ] . reason ( ) ; } catch ( SearchPhaseExecutionException e ) { message = e . toString ( ) ; } assertThat ( message + <str> , message . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( message + <str> , message . contains ( <str> ) , equalTo ( true ) ) ; } public void testExecutableScripts ( ) throws Exception { assumeTrue ( <str> , System . getSecurityManager ( ) = = null ) ; Map < String , Object > vars = new HashMap < > ( ) ; vars . put ( <str> , <float> ) ; vars . put ( <str> , <int> ) ; vars . put ( <str> , - <int> ) ; Expression expr = JavascriptCompiler . compile ( <str> ) ; CompiledScript compiledScript = new CompiledScript ( ScriptType . INLINE , <str> , <str> , expr ) ; ExpressionExecutableScript ees = new ExpressionExecutableScript ( compiledScript , vars ) ; assertEquals ( ( Double ) ees . run ( ) , <float> , <float> ) ; ees . setNextVar ( <str> , - <float> ) ; assertEquals ( ( Double ) ees . run ( ) , - <int> , <float> ) ; ees . setNextVar ( <str> , - <float> ) ; ees . setNextVar ( <str> , - <float> ) ; ees . setNextVar ( <str> , - <float> ) ; assertEquals ( ( Double ) ees . run ( ) , - <float> , <float> ) ; String message ; try { vars = new HashMap < > ( ) ; vars . put ( <str> , <int> ) ; ees = new ExpressionExecutableScript ( compiledScript , vars ) ; ees . run ( ) ; fail ( <str> ) ; } catch ( ScriptException se ) { message = se . getMessage ( ) ; assertThat ( message + <str> , message . contains ( <str> ) , equalTo ( true ) ) ; } try { vars = new HashMap < > ( ) ; vars . put ( <str> , <int> ) ; vars . put ( <str> , <int> ) ; vars . put ( <str> , - <int> ) ; ees = new ExpressionExecutableScript ( compiledScript , vars ) ; ees . run ( ) ; fail ( <str> ) ; } catch ( ScriptException se ) { message = se . getMessage ( ) ; assertThat ( message + <str> , message . contains ( <str> ) , equalTo ( true ) ) ; } try { vars = new HashMap < > ( ) ; vars . put ( <str> , <int> ) ; vars . put ( <str> , <int> ) ; vars . put ( <str> , <str> ) ; ees = new ExpressionExecutableScript ( compiledScript , vars ) ; ees . run ( ) ; fail ( <str> ) ; } catch ( ScriptException se ) { message = se . getMessage ( ) ; assertThat ( message + <str> , message . contains ( <str> ) , equalTo ( true ) ) ; } } public void testInvalidUpdateScript ( ) throws Exception { try { createIndex ( <str> ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; UpdateRequestBuilder urb = client ( ) . prepareUpdate ( ) . setIndex ( <str> ) ; urb . setType ( <str> ) ; urb . setId ( <str> ) ; urb . setScript ( new Script ( <str> , ScriptType . INLINE , ExpressionScriptEngineService . NAME , null ) ) ; urb . get ( ) ; fail ( <str> ) ; } catch ( Exception e ) { String message = e . getMessage ( ) ; assertThat ( message + <str> , message . contains ( <str> ) , equalTo ( true ) ) ; message = e . getCause ( ) . getMessage ( ) ; assertThat ( message + <str> , message . contains ( <str> ) , equalTo ( true ) ) ; } } public void testPipelineAggregationScript ( ) throws Exception { createIndex ( <str> ) ; ensureGreen ( <str> ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <float> , <str> , <float> , <str> , <float> , <str> , <float> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <float> , <str> , <float> , <str> , <float> , <str> , <float> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <float> , <str> , <float> , <str> , <float> , <str> , <float> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <float> , <str> , <float> , <str> , <float> , <str> , <float> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <float> , <str> , <float> , <str> , <float> , <str> , <float> ) ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . subAggregation ( sum ( <str> ) . field ( <str> ) ) . subAggregation ( sum ( <str> ) . field ( <str> ) ) . subAggregation ( sum ( <str> ) . field ( <str> ) ) . subAggregation ( bucketScript ( <str> ) . setBucketsPaths ( <str> , <str> , <str> ) . script ( new Script ( <str> , ScriptType . INLINE , ExpressionScriptEngineService . NAME , null ) ) ) ) . execute ( ) . actionGet ( ) ; InternalHistogram < Bucket > histogram = response . getAggregations ( ) . get ( <str> ) ; assertThat ( histogram , notNullValue ( ) ) ; assertThat ( histogram . getName ( ) , equalTo ( <str> ) ) ; List < Bucket > buckets = histogram . getBuckets ( ) ; for ( int bucketCount = <int> ; bucketCount < buckets . size ( ) ; + + bucketCount ) { Histogram . Bucket bucket = buckets . get ( bucketCount ) ; if ( bucket . getDocCount ( ) = = <int> ) { SimpleValue seriesArithmetic = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( seriesArithmetic , notNullValue ( ) ) ; double seriesArithmeticValue = seriesArithmetic . value ( ) ; assertEquals ( <float> , seriesArithmeticValue , <float> ) ; } else if ( bucket . getDocCount ( ) = = <int> ) { SimpleValue seriesArithmetic = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( seriesArithmetic , notNullValue ( ) ) ; double seriesArithmeticValue = seriesArithmetic . value ( ) ; assertEquals ( <float> , seriesArithmeticValue , <float> ) ; } else { fail ( <str> ) ; } } } } 

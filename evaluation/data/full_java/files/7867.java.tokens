package org . elasticsearch . cluster . routing . allocation ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . RoutingNode ; import org . elasticsearch . cluster . routing . RoutingNodes ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . allocation . decider . ClusterRebalanceAllocationDecider ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . test . ESAllocationTestCase ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . RELOCATING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . cluster . routing . ShardRoutingState . UNASSIGNED ; import static org . elasticsearch . cluster . routing . allocation . RoutingNodesUtils . numberOfShardsOfType ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . hasItem ; import static org . hamcrest . Matchers . lessThan ; import static org . hamcrest . Matchers . not ; import static org . hamcrest . Matchers . nullValue ; public class SingleShardNoReplicasRoutingTests extends ESAllocationTestCase { private final ESLogger logger = Loggers . getLogger ( SingleShardNoReplicasRoutingTests . class ) ; public void testSingleIndexStartedShard ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( UNASSIGNED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , nullValue ( ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingTable prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; prevRoutingTable = routingTable ; clusterState = ClusterState . builder ( clusterState ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; assertThat ( routingTable = = prevRoutingTable , equalTo ( true ) ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; logger . info ( <str> ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . node ( <str> ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable ! = prevRoutingTable , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable = = prevRoutingTable , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . remove ( <str> ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable ! = prevRoutingTable , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable = = prevRoutingTable , equalTo ( true ) ) ; logger . info ( <str> ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . node ( <str> ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable ! = prevRoutingTable , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( STARTED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , equalTo ( <str> ) ) ; } public void testSingleIndexShardFailed ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . build ( ) ) ; logger . info ( <str> ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( UNASSIGNED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , nullValue ( ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingTable prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . unassigned ( ) , equalTo ( false ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyFailedShard ( clusterState , routingNodes . node ( <str> ) . shardsWithState ( INITIALIZING ) . get ( <int> ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; assertThat ( routingTable . index ( <str> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( UNASSIGNED ) ) ; assertThat ( routingTable . index ( <str> ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , nullValue ( ) ) ; } public void testMultiIndexEvenDistribution ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . put ( <str> , - <int> ) . build ( ) ) ; final int numberOfIndices = <int> ; logger . info ( <str> + numberOfIndices + <str> ) ; MetaData . Builder metaDataBuilder = MetaData . builder ( ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { metaDataBuilder . put ( IndexMetaData . builder ( <str> + i ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) ; } MetaData metaData = metaDataBuilder . build ( ) ; RoutingTable . Builder routingTableBuilder = RoutingTable . builder ( ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { routingTableBuilder . addAsNew ( metaData . index ( <str> + i ) ) ; } RoutingTable routingTable = routingTableBuilder . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . indicesRouting ( ) . size ( ) , equalTo ( numberOfIndices ) ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { assertThat ( routingTable . index ( <str> + i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( UNASSIGNED ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) , nullValue ( ) ) ; } logger . info ( <str> + ( numberOfIndices / <int> ) + <str> ) ; DiscoveryNodes . Builder nodesBuilder = DiscoveryNodes . builder ( ) ; List < DiscoveryNode > nodes = new ArrayList < > ( ) ; for ( int i = <int> ; i < ( numberOfIndices / <int> ) ; i + + ) { nodesBuilder . put ( newNode ( <str> + i ) ) ; } RoutingTable prevRoutingTable = routingTable ; clusterState = ClusterState . builder ( clusterState ) . nodes ( nodesBuilder ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { assertThat ( routingTable . index ( <str> + i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . unassigned ( ) , equalTo ( false ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . primary ( ) , equalTo ( true ) ) ; String nodeId = routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) ; int nodeIndex = Integer . parseInt ( nodeId . substring ( <str> . length ( ) ) ) ; assertThat ( nodeIndex , lessThan ( <int> ) ) ; } RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; Set < String > encounteredIndices = new HashSet < > ( ) ; for ( RoutingNode routingNode : routingNodes ) { assertThat ( routingNode . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; assertThat ( routingNode . size ( ) , equalTo ( <int> ) ) ; int nodeIndex = Integer . parseInt ( routingNode . nodeId ( ) . substring ( <str> . length ( ) ) ) ; assertThat ( nodeIndex , lessThan ( <int> ) ) ; for ( ShardRouting shardRoutingEntry : routingNode ) { assertThat ( encounteredIndices , not ( hasItem ( shardRoutingEntry . index ( ) ) ) ) ; encounteredIndices . add ( shardRoutingEntry . index ( ) ) ; } } logger . info ( <str> + ( numberOfIndices / <int> ) + <str> ) ; nodesBuilder = DiscoveryNodes . builder ( clusterState . nodes ( ) ) ; for ( int i = ( numberOfIndices / <int> ) ; i < numberOfIndices ; i + + ) { nodesBuilder . put ( newNode ( <str> + i ) ) ; } prevRoutingTable = routingTable ; clusterState = ClusterState . builder ( clusterState ) . nodes ( nodesBuilder ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( false ) ) ; logger . info ( <str> ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; int numberOfRelocatingShards = <int> ; int numberOfStartedShards = <int> ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { assertThat ( routingTable . index ( <str> + i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . unassigned ( ) , equalTo ( false ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , anyOf ( equalTo ( STARTED ) , equalTo ( RELOCATING ) ) ) ; if ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) = = STARTED ) { numberOfStartedShards + + ; } else if ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) = = RELOCATING ) { numberOfRelocatingShards + + ; } assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . primary ( ) , equalTo ( true ) ) ; String nodeId = routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . currentNodeId ( ) ; int nodeIndex = Integer . parseInt ( nodeId . substring ( <str> . length ( ) ) ) ; assertThat ( nodeIndex , lessThan ( <int> ) ) ; } assertThat ( numberOfRelocatingShards , equalTo ( <int> ) ) ; assertThat ( numberOfStartedShards , equalTo ( <int> ) ) ; } public void testMultiIndexUnevenNodes ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . put ( <str> , - <int> ) . build ( ) ) ; final int numberOfIndices = <int> ; logger . info ( <str> + numberOfIndices + <str> ) ; MetaData . Builder metaDataBuilder = MetaData . builder ( ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { metaDataBuilder . put ( IndexMetaData . builder ( <str> + i ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) ; } MetaData metaData = metaDataBuilder . build ( ) ; RoutingTable . Builder routingTableBuilder = RoutingTable . builder ( ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { routingTableBuilder . addAsNew ( metaData . index ( <str> + i ) ) ; } RoutingTable routingTable = routingTableBuilder . build ( ) ; ClusterState clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; assertThat ( routingTable . indicesRouting ( ) . size ( ) , equalTo ( numberOfIndices ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; RoutingTable prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { assertThat ( routingTable . index ( <str> + i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , equalTo ( INITIALIZING ) ) ; } RoutingNodes routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( numberOfShardsOfType ( routingNodes , INITIALIZING ) , equalTo ( numberOfIndices ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( INITIALIZING ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( INITIALIZING ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertThat ( routingNodes . node ( <str> ) . numberOfShardsWithState ( INITIALIZING ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; logger . info ( <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( clusterState . nodes ( ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) ) . build ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; assertThat ( prevRoutingTable = = routingTable , equalTo ( true ) ) ; routingNodes = clusterState . getRoutingNodes ( ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { assertThat ( routingTable . index ( <str> + i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , anyOf ( equalTo ( RELOCATING ) , equalTo ( STARTED ) ) ) ; } routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( <str> , numberOfShardsOfType ( routingNodes , RELOCATING ) , equalTo ( <int> ) ) ; assertThat ( <str> , numberOfShardsOfType ( routingNodes , INITIALIZING ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; prevRoutingTable = routingTable ; routingTable = strategy . applyStartedShards ( clusterState , routingNodes . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; assertThat ( prevRoutingTable ! = routingTable , equalTo ( true ) ) ; for ( int i = <int> ; i < numberOfIndices ; i + + ) { assertThat ( routingTable . index ( <str> + i ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( routingTable . index ( <str> + i ) . shard ( <int> ) . shards ( ) . get ( <int> ) . state ( ) , anyOf ( equalTo ( RELOCATING ) , equalTo ( STARTED ) ) ) ; } routingNodes = clusterState . getRoutingNodes ( ) ; assertThat ( numberOfShardsOfType ( routingNodes , STARTED ) , equalTo ( numberOfIndices ) ) ; for ( RoutingNode routingNode : routingNodes ) { assertThat ( routingNode . numberOfShardsWithState ( STARTED ) , equalTo ( <int> ) ) ; } } } 

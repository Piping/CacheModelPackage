package org . elasticsearch . common . io ; import java . nio . charset . StandardCharsets ; import org . apache . lucene . util . IOUtils ; import org . elasticsearch . common . util . Callback ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . Reader ; import java . io . StringWriter ; import java . io . Writer ; import java . util . ArrayList ; import java . util . List ; import java . util . Objects ; public abstract class Streams { public static final int BUFFER_SIZE = <int> * <int> ; public static long copy ( InputStream in , OutputStream out ) throws IOException { return copy ( in , out , new byte [ BUFFER_SIZE ] ) ; } public static long copy ( InputStream in , OutputStream out , byte [ ] buffer ) throws IOException { Objects . requireNonNull ( in , <str> ) ; Objects . requireNonNull ( out , <str> ) ; boolean success = false ; try { long byteCount = <int> ; int bytesRead ; while ( ( bytesRead = in . read ( buffer ) ) ! = - <int> ) { out . write ( buffer , <int> , bytesRead ) ; byteCount + = bytesRead ; } out . flush ( ) ; success = true ; return byteCount ; } finally { if ( success ) { IOUtils . close ( in , out ) ; } else { IOUtils . closeWhileHandlingException ( in , out ) ; } } } public static void copy ( byte [ ] in , OutputStream out ) throws IOException { Objects . requireNonNull ( in , <str> ) ; Objects . requireNonNull ( out , <str> ) ; try { out . write ( in ) ; } finally { try { out . close ( ) ; } catch ( IOException ex ) { } } } public static int copy ( Reader in , Writer out ) throws IOException { Objects . requireNonNull ( in , <str> ) ; Objects . requireNonNull ( out , <str> ) ; boolean success = false ; try { int byteCount = <int> ; char [ ] buffer = new char [ BUFFER_SIZE ] ; int bytesRead ; while ( ( bytesRead = in . read ( buffer ) ) ! = - <int> ) { out . write ( buffer , <int> , bytesRead ) ; byteCount + = bytesRead ; } out . flush ( ) ; success = true ; return byteCount ; } finally { if ( success ) { IOUtils . close ( in , out ) ; } else { IOUtils . closeWhileHandlingException ( in , out ) ; } } } public static void copy ( String in , Writer out ) throws IOException { Objects . requireNonNull ( in , <str> ) ; Objects . requireNonNull ( out , <str> ) ; try { out . write ( in ) ; } finally { try { out . close ( ) ; } catch ( IOException ex ) { } } } public static String copyToString ( Reader in ) throws IOException { StringWriter out = new StringWriter ( ) ; copy ( in , out ) ; return out . toString ( ) ; } public static int readFully ( Reader reader , char [ ] dest ) throws IOException { return readFully ( reader , dest , <int> , dest . length ) ; } public static int readFully ( Reader reader , char [ ] dest , int offset , int len ) throws IOException { int read = <int> ; while ( read < len ) { final int r = reader . read ( dest , offset + read , len - read ) ; if ( r = = - <int> ) { break ; } read + = r ; } return read ; } public static int readFully ( InputStream reader , byte [ ] dest ) throws IOException { return readFully ( reader , dest , <int> , dest . length ) ; } public static int readFully ( InputStream reader , byte [ ] dest , int offset , int len ) throws IOException { int read = <int> ; while ( read < len ) { final int r = reader . read ( dest , offset + read , len - read ) ; if ( r = = - <int> ) { break ; } read + = r ; } return read ; } public static List < String > readAllLines ( InputStream input ) throws IOException { final List < String > lines = new ArrayList < > ( ) ; readAllLines ( input , new Callback < String > ( ) { @Override public void handle ( String line ) { lines . add ( line ) ; } } ) ; return lines ; } public static void readAllLines ( InputStream input , Callback < String > callback ) throws IOException { try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( input , StandardCharsets . UTF_8 ) ) ) { String line ; while ( ( line = reader . readLine ( ) ) ! = null ) { callback . handle ( line ) ; } } } } 

package com . badlogic . gdx . jnigen ; public class BuildTarget { public enum TargetOs { Windows , Linux , MacOsX , Android , IOS } public BuildTarget . TargetOs os ; public boolean is64Bit ; public String [ ] cIncludes ; public String [ ] cExcludes ; public String [ ] cppIncludes ; public String [ ] cppExcludes ; public String [ ] headerDirs ; public String compilerPrefix ; public String cFlags ; public String cppFlags ; public String linkerFlags ; public String buildFileName ; public boolean excludeFromMasterBuildFile = false ; public String preCompileTask ; public String postCompileTask ; public String libraries ; public String osFileName ; public String libName ; public BuildTarget ( BuildTarget . TargetOs targetType , boolean is64Bit , String [ ] cIncludes , String [ ] cExcludes , String [ ] cppIncludes , String [ ] cppExcludes , String [ ] headerDirs , String compilerPrefix , String cFlags , String cppFlags , String linkerFlags ) { if ( targetType = = null ) throw new IllegalArgumentException ( <str> ) ; if ( cIncludes = = null ) cIncludes = new String [ <int> ] ; if ( cExcludes = = null ) cExcludes = new String [ <int> ] ; if ( cppIncludes = = null ) cppIncludes = new String [ <int> ] ; if ( cppExcludes = = null ) cppExcludes = new String [ <int> ] ; if ( headerDirs = = null ) headerDirs = new String [ <int> ] ; if ( compilerPrefix = = null ) compilerPrefix = <str> ; if ( cFlags = = null ) cFlags = <str> ; if ( cppFlags = = null ) cppFlags = <str> ; if ( linkerFlags = = null ) linkerFlags = <str> ; this . os = targetType ; this . is64Bit = is64Bit ; this . cIncludes = cIncludes ; this . cExcludes = cExcludes ; this . cppIncludes = cppIncludes ; this . cppExcludes = cppExcludes ; this . headerDirs = headerDirs ; this . compilerPrefix = compilerPrefix ; this . cFlags = cFlags ; this . cppFlags = cppFlags ; this . linkerFlags = linkerFlags ; this . libraries = <str> ; } public static BuildTarget newDefaultTarget ( BuildTarget . TargetOs type , boolean is64Bit ) { if ( type = = TargetOs . Windows & & ! is64Bit ) { return new BuildTarget ( TargetOs . Windows , false , new String [ ] { <str> } , new String [ <int> ] , new String [ ] { <str> } , new String [ <int> ] , new String [ <int> ] , <str> , <str> , <str> , <str> ) ; } if ( type = = TargetOs . Windows & & is64Bit ) { return new BuildTarget ( TargetOs . Windows , true , new String [ ] { <str> } , new String [ <int> ] , new String [ ] { <str> } , new String [ <int> ] , new String [ <int> ] , <str> , <str> , <str> , <str> ) ; } if ( type = = TargetOs . Linux & & ! is64Bit ) { return new BuildTarget ( TargetOs . Linux , false , new String [ ] { <str> } , new String [ <int> ] , new String [ ] { <str> } , new String [ <int> ] , new String [ <int> ] , <str> , <str> , <str> , <str> ) ; } if ( type = = TargetOs . Linux & & is64Bit ) { return new BuildTarget ( TargetOs . Linux , true , new String [ ] { <str> } , new String [ <int> ] , new String [ ] { <str> } , new String [ <int> ] , new String [ <int> ] , <str> , <str> , <str> , <str> ) ; } if ( type = = TargetOs . MacOsX & & ! is64Bit ) { BuildTarget mac = new BuildTarget ( TargetOs . MacOsX , false , new String [ ] { <str> } , new String [ <int> ] , new String [ ] { <str> } , new String [ <int> ] , new String [ <int> ] , <str> , <str> , <str> , <str> ) ; return mac ; } if ( type = = TargetOs . MacOsX & & is64Bit ) { BuildTarget mac = new BuildTarget ( TargetOs . MacOsX , true , new String [ ] { <str> } , new String [ <int> ] , new String [ ] { <str> } , new String [ <int> ] , new String [ <int> ] , <str> , <str> , <str> , <str> ) ; return mac ; } if ( type = = TargetOs . Android ) { BuildTarget android = new BuildTarget ( TargetOs . Android , false , new String [ ] { <str> } , new String [ <int> ] , new String [ ] { <str> } , new String [ <int> ] , new String [ <int> ] , <str> , <str> , <str> , <str> ) ; return android ; } if ( type = = TargetOs . IOS ) { BuildTarget ios = new BuildTarget ( TargetOs . IOS , false , new String [ ] { <str> } , new String [ <int> ] , new String [ ] { <str> } , new String [ <int> ] , new String [ <int> ] , <str> , <str> , <str> , <str> ) ; return ios ; } throw new RuntimeException ( <str> ) ; } } 

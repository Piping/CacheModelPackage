package org . elasticsearch . common . settings ; import org . elasticsearch . common . settings . loader . YamlSettingsLoader ; import org . elasticsearch . test . ESTestCase ; import org . hamcrest . Matchers ; import java . io . IOException ; import java . util . List ; import java . util . Map ; import java . util . Set ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . allOf ; import static org . hamcrest . Matchers . arrayContaining ; import static org . hamcrest . Matchers . contains ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; public class SettingsTests extends ESTestCase { public void testCamelCaseSupport ( ) { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; } public void testLoadFromDelimitedString ( ) { Settings settings = settingsBuilder ( ) . loadFromDelimitedString ( <str> , <str> ) . build ( ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . getAsMap ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( settings . toDelimitedString ( <str> ) , equalTo ( <str> ) ) ; settings = settingsBuilder ( ) . loadFromDelimitedString ( <str> , <str> ) . build ( ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . getAsMap ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( settings . toDelimitedString ( <str> ) , equalTo ( <str> ) ) ; } public void testReplacePropertiesPlaceholderSystemProperty ( ) { String value = System . getProperty ( <str> ) ; assertFalse ( value . isEmpty ( ) ) ; Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . replacePropertyPlaceholders ( ) . build ( ) ; assertThat ( settings . get ( <str> ) , equalTo ( value ) ) ; assertNull ( System . getProperty ( <str> ) ) ; settings = settingsBuilder ( ) . put ( <str> , <str> ) . replacePropertyPlaceholders ( ) . build ( ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; settings = settingsBuilder ( ) . put ( <str> , <str> ) . replacePropertyPlaceholders ( ) . build ( ) ; assertThat ( settings . get ( <str> ) , is ( nullValue ( ) ) ) ; } public void testReplacePropertiesPlaceholderIgnoreEnvUnset ( ) { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . replacePropertyPlaceholders ( ) . build ( ) ; assertThat ( settings . get ( <str> ) , is ( nullValue ( ) ) ) ; } public void testReplacePropertiesPlaceholderIgnoresPrompt ( ) { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . replacePropertyPlaceholders ( ) . build ( ) ; assertThat ( settings . get ( <str> ) , is ( <str> ) ) ; assertThat ( settings . get ( <str> ) , is ( <str> ) ) ; } public void testUnFlattenedSettings ( ) { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> , <str> , <str> ) . build ( ) ; Map < String , Object > map = settings . getAsStructuredMap ( ) ; assertThat ( map . keySet ( ) , Matchers . < String > hasSize ( <int> ) ) ; assertThat ( map , allOf ( Matchers . < String , Object > hasEntry ( <str> , <str> ) , Matchers . < String , Object > hasEntry ( <str> , <str> ) ) ) ; @SuppressWarnings ( <str> ) Map < String , Object > bazMap = ( Map < String , Object > ) map . get ( <str> ) ; assertThat ( bazMap . keySet ( ) , Matchers . < String > hasSize ( <int> ) ) ; assertThat ( bazMap , allOf ( Matchers . < String , Object > hasEntry ( <str> , <str> ) , Matchers . < String , Object > hasEntry ( <str> , <str> ) ) ) ; @SuppressWarnings ( <str> ) List < String > bazArr = ( List < String > ) bazMap . get ( <str> ) ; assertThat ( bazArr , contains ( <str> , <str> , <str> ) ) ; } public void testFallbackToFlattenedSettings ( ) { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; Map < String , Object > map = settings . getAsStructuredMap ( ) ; assertThat ( map . keySet ( ) , Matchers . < String > hasSize ( <int> ) ) ; assertThat ( map , allOf ( Matchers . < String , Object > hasEntry ( <str> , <str> ) , Matchers . < String , Object > hasEntry ( <str> , <str> ) , Matchers . < String , Object > hasEntry ( <str> , <str> ) ) ) ; settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; map = settings . getAsStructuredMap ( ) ; assertThat ( map . keySet ( ) , Matchers . < String > hasSize ( <int> ) ) ; assertThat ( map , allOf ( Matchers . < String , Object > hasEntry ( <str> , <str> ) , Matchers . < String , Object > hasEntry ( <str> , <str> ) , Matchers . < String , Object > hasEntry ( <str> , <str> ) ) ) ; } public void testGetAsSettings ( ) { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; Settings fooSettings = settings . getAsSettings ( <str> ) ; assertThat ( fooSettings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( fooSettings . get ( <str> ) , equalTo ( <str> ) ) ; } public void testNames ( ) { Settings settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; Set < String > names = settings . names ( ) ; assertThat ( names . size ( ) , equalTo ( <int> ) ) ; assertTrue ( names . contains ( <str> ) ) ; assertTrue ( names . contains ( <str> ) ) ; Settings fooSettings = settings . getAsSettings ( <str> ) ; names = fooSettings . names ( ) ; assertThat ( names . size ( ) , equalTo ( <int> ) ) ; assertTrue ( names . contains ( <str> ) ) ; assertTrue ( names . contains ( <str> ) ) ; } public void testThatArraysAreOverriddenCorrectly ( ) throws IOException { Settings settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( new YamlSettingsLoader ( ) . load ( <str> ) ) . put ( new YamlSettingsLoader ( ) . load ( <str> ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> , <str> ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> , <str> ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; assertThat ( settings . getAsArray ( <str> ) , notNullValue ( ) ) ; assertThat ( settings . getAsArray ( <str> ) , notNullValue ( ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . getAsArray ( <str> ) , arrayContaining ( <str> , <str> ) ) ; settings = settingsBuilder ( ) . put ( settingsBuilder ( ) . putArray ( <str> , <str> , <str> ) . build ( ) ) . put ( settingsBuilder ( ) . put ( <str> , <str> ) . build ( ) ) . build ( ) ; assertThat ( settings . get ( <str> ) , is ( <str> ) ) ; assertThat ( settings . get ( <str> ) , is ( nullValue ( ) ) ) ; } public void testPrefixNormalization ( ) { Settings settings = settingsBuilder ( ) . normalizePrefix ( <str> ) . build ( ) ; assertThat ( settings . names ( ) . size ( ) , equalTo ( <int> ) ) ; settings = settingsBuilder ( ) . put ( <str> , <str> ) . normalizePrefix ( <str> ) . build ( ) ; assertThat ( settings . getAsMap ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( settings . get ( <str> ) , nullValue ( ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; settings = settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . normalizePrefix ( <str> ) . build ( ) ; assertThat ( settings . getAsMap ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( settings . get ( <str> ) , nullValue ( ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; settings = settingsBuilder ( ) . put ( <str> , <str> ) . normalizePrefix ( <str> ) . build ( ) ; assertThat ( settings . getAsMap ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( settings . get ( <str> ) , equalTo ( <str> ) ) ; } } 

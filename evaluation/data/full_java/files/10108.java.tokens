package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . MinimalSet ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . util . Collection ; import java . util . Set ; @GwtCompatible public class SetEqualsTester < E > extends AbstractSetTester < E > { public void testEquals_otherSetWithSameElements ( ) { assertTrue ( <str> , getSet ( ) . equals ( MinimalSet . from ( getSampleElements ( ) ) ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_otherSetWithDifferentElements ( ) { Collection < E > elements = getSampleElements ( getNumElements ( ) - <int> ) ; elements . add ( getSubjectGenerator ( ) . samples ( ) . e3 ( ) ) ; assertFalse ( <str> , getSet ( ) . equals ( MinimalSet . from ( elements ) ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) public void testEquals_containingNull ( ) { Collection < E > elements = getSampleElements ( getNumElements ( ) - <int> ) ; elements . add ( null ) ; collection = getSubjectGenerator ( ) . create ( elements . toArray ( ) ) ; assertTrue ( <str> + <str> , getSet ( ) . equals ( MinimalSet . from ( elements ) ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_otherContainsNull ( ) { Collection < E > elements = getSampleElements ( getNumElements ( ) - <int> ) ; elements . add ( null ) ; Set < E > other = MinimalSet . from ( elements ) ; assertFalse ( <str> , getSet ( ) . equals ( other ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_smallerSet ( ) { Collection < E > fewerElements = getSampleElements ( getNumElements ( ) - <int> ) ; assertFalse ( <str> , getSet ( ) . equals ( MinimalSet . from ( fewerElements ) ) ) ; } public void testEquals_largerSet ( ) { Collection < E > moreElements = getSampleElements ( getNumElements ( ) + <int> ) ; assertFalse ( <str> , getSet ( ) . equals ( MinimalSet . from ( moreElements ) ) ) ; } public void testEquals_list ( ) { assertFalse ( <str> , getSet ( ) . equals ( Helpers . copyToList ( getSet ( ) ) ) ) ; } } 

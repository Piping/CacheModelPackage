package org . gradle . api . internal . artifacts . dsl ; import groovy . lang . Closure ; import org . gradle . api . Action ; import org . gradle . api . artifacts . dsl . RepositoryHandler ; import org . gradle . api . artifacts . repositories . FlatDirectoryArtifactRepository ; import org . gradle . api . artifacts . repositories . IvyArtifactRepository ; import org . gradle . api . artifacts . repositories . MavenArtifactRepository ; import org . gradle . api . internal . ClosureBackedAction ; import org . gradle . api . internal . ConfigureByMapAction ; import org . gradle . api . internal . artifacts . BaseRepositoryFactory ; import org . gradle . api . internal . artifacts . DefaultArtifactRepositoryContainer ; import org . gradle . internal . reflect . Instantiator ; import java . util . HashMap ; import java . util . Map ; import static org . gradle . util . CollectionUtils . flattenCollections ; public class DefaultRepositoryHandler extends DefaultArtifactRepositoryContainer implements RepositoryHandler { public static final String DEFAULT_BINTRAY_JCENTER_REPO_NAME = <str> ; public static final String BINTRAY_JCENTER_URL = <str> ; public static final String FLAT_DIR_DEFAULT_NAME = <str> ; private static final String MAVEN_REPO_DEFAULT_NAME = <str> ; private static final String IVY_REPO_DEFAULT_NAME = <str> ; private final BaseRepositoryFactory repositoryFactory ; public DefaultRepositoryHandler ( BaseRepositoryFactory repositoryFactory , Instantiator instantiator ) { super ( instantiator ) ; this . repositoryFactory = repositoryFactory ; } public FlatDirectoryArtifactRepository flatDir ( Action < ? super FlatDirectoryArtifactRepository > action ) { return addRepository ( repositoryFactory . createFlatDirRepository ( ) , FLAT_DIR_DEFAULT_NAME , action ) ; } public FlatDirectoryArtifactRepository flatDir ( Closure configureClosure ) { return flatDir ( new ClosureBackedAction < FlatDirectoryArtifactRepository > ( configureClosure ) ) ; } public FlatDirectoryArtifactRepository flatDir ( Map < String , ? > args ) { Map < String , Object > modifiedArgs = new HashMap < String , Object > ( args ) ; if ( modifiedArgs . containsKey ( <str> ) ) { modifiedArgs . put ( <str> , flattenCollections ( modifiedArgs . get ( <str> ) ) ) ; } return flatDir ( new ConfigureByMapAction < FlatDirectoryArtifactRepository > ( modifiedArgs ) ) ; } public MavenArtifactRepository mavenCentral ( ) { return addRepository ( repositoryFactory . createMavenCentralRepository ( ) , DEFAULT_MAVEN_CENTRAL_REPO_NAME ) ; } public MavenArtifactRepository jcenter ( ) { return addRepository ( repositoryFactory . createJCenterRepository ( ) , DEFAULT_BINTRAY_JCENTER_REPO_NAME ) ; } public MavenArtifactRepository jcenter ( Action < ? super MavenArtifactRepository > action ) { return addRepository ( repositoryFactory . createJCenterRepository ( ) , DEFAULT_BINTRAY_JCENTER_REPO_NAME , action ) ; } public MavenArtifactRepository mavenCentral ( Map < String , ? > args ) { Map < String , Object > modifiedArgs = new HashMap < String , Object > ( args ) ; return addRepository ( repositoryFactory . createMavenCentralRepository ( ) , DEFAULT_MAVEN_CENTRAL_REPO_NAME , new ConfigureByMapAction < MavenArtifactRepository > ( modifiedArgs ) ) ; } public MavenArtifactRepository mavenLocal ( ) { return addRepository ( repositoryFactory . createMavenLocalRepository ( ) , DEFAULT_MAVEN_LOCAL_REPO_NAME ) ; } public MavenArtifactRepository maven ( Action < ? super MavenArtifactRepository > action ) { return addRepository ( repositoryFactory . createMavenRepository ( ) , MAVEN_REPO_DEFAULT_NAME , action ) ; } public MavenArtifactRepository maven ( Closure closure ) { return maven ( new ClosureBackedAction < MavenArtifactRepository > ( closure ) ) ; } public IvyArtifactRepository ivy ( Action < ? super IvyArtifactRepository > action ) { return addRepository ( repositoryFactory . createIvyRepository ( ) , IVY_REPO_DEFAULT_NAME , action ) ; } public IvyArtifactRepository ivy ( Closure closure ) { return ivy ( new ClosureBackedAction < IvyArtifactRepository > ( closure ) ) ; } } 

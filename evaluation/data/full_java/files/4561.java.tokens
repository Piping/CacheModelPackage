package org . eclipse . debug . internal . ui . views . memory ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockRetrieval ; import org . eclipse . debug . internal . ui . viewers . model . ITreeModelContentProvider ; import org . eclipse . debug . internal . ui . viewers . model . TreeModelContentProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . TreeModelViewer ; public class MemoryViewTreeModelContentProvider extends TreeModelContentProvider { @Override protected void updateNodes ( IModelDelta [ ] nodes , int mask ) { if ( getViewer ( ) instanceof TreeModelViewer ) { for ( int i = <int> ; i < nodes . length ; i + + ) { IModelDelta node = nodes [ i ] ; int flags = node . getFlags ( ) ; if ( ( mask & ITreeModelContentProvider . CONTROL_MODEL_DELTA_FLAGS ) ! = <int> & & ( flags & IModelDelta . ADDED ) ! = <int> & & ( flags & IModelDelta . SELECT ) ! = <int> & & node . getElement ( ) instanceof IMemoryBlock ) { if ( ( flags & IModelDelta . SELECT ) ! = <int> ) { if ( getPresentationContext ( ) . getPart ( ) instanceof MemoryView ) { MemoryView view = ( MemoryView ) getPresentationContext ( ) . getPart ( ) ; if ( view . isPinMBDisplay ( ) & & ! isFirstMemoryBlock ( ) ) { flags | = IModelDelta . SELECT ; flags ^ = IModelDelta . SELECT ; } } } if ( isFirstMemoryBlock ( ) ) { flags | = IModelDelta . SELECT ; } } flags = flags & mask ; if ( ( flags & IModelDelta . ADDED ) ! = <int> ) { handleAdd ( node ) ; } if ( ( flags & IModelDelta . REMOVED ) ! = <int> ) { handleRemove ( node ) ; } if ( ( flags & IModelDelta . CONTENT ) ! = <int> ) { handleContent ( node ) ; } if ( ( flags & IModelDelta . STATE ) ! = <int> ) { handleState ( node ) ; } if ( ( flags & IModelDelta . INSERTED ) ! = <int> ) { handleInsert ( node ) ; } if ( ( flags & IModelDelta . REPLACED ) ! = <int> ) { handleReplace ( node ) ; } if ( ( flags & IModelDelta . INSTALL ) ! = <int> ) { handleInstall ( node ) ; } if ( ( flags & IModelDelta . UNINSTALL ) ! = <int> ) { handleUninstall ( node ) ; } if ( ( flags & IModelDelta . EXPAND ) ! = <int> ) { handleExpand ( node ) ; } if ( ( flags & IModelDelta . COLLAPSE ) ! = <int> ) { handleCollapse ( node ) ; } if ( ( flags & IModelDelta . SELECT ) ! = <int> ) { handleSelect ( node ) ; } if ( ( flags & IModelDelta . REVEAL ) ! = <int> ) { handleReveal ( node ) ; } updateNodes ( node . getChildDeltas ( ) , mask ) ; } } } private boolean isFirstMemoryBlock ( ) { Object input = getViewer ( ) . getInput ( ) ; if ( input instanceof IMemoryBlockRetrieval ) { IMemoryBlock [ ] memoryBlocks = DebugPlugin . getDefault ( ) . getMemoryBlockManager ( ) . getMemoryBlocks ( ( IMemoryBlockRetrieval ) input ) ; if ( memoryBlocks . length = = <int> ) return true ; } return false ; } } 

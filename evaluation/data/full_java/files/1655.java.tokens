package org . apache . cassandra . utils ; import java . io . IOException ; import java . lang . reflect . Constructor ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import org . junit . Test ; import org . apache . cassandra . io . ISerializer ; import org . apache . cassandra . io . IVersionedSerializer ; import org . apache . cassandra . io . util . DataInputBuffer ; import org . apache . cassandra . io . util . DataInputPlus ; import org . apache . cassandra . io . util . DataOutputBuffer ; import org . apache . cassandra . io . util . DataOutputPlus ; import static org . junit . Assert . assertEquals ; public class IntervalTreeTest { @Test public void testSearch ( ) throws Exception { List < Interval < Integer , Void > > intervals = new ArrayList < Interval < Integer , Void > > ( ) ; intervals . add ( Interval . < Integer , Void > create ( - <int> , - <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( - <int> , - <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; IntervalTree < Integer , Void , Interval < Integer , Void > > it = IntervalTree . build ( intervals ) ; assertEquals ( <int> , it . search ( Interval . < Integer , Void > create ( <int> , <int> ) ) . size ( ) ) ; assertEquals ( <int> , it . search ( Interval . < Integer , Void > create ( <int> , <int> ) ) . size ( ) ) ; assertEquals ( <int> , it . search ( Interval . < Integer , Void > create ( - <int> , <int> ) ) . size ( ) ) ; assertEquals ( <int> , it . search ( Interval . < Integer , Void > create ( - <int> , - <int> ) ) . size ( ) ) ; assertEquals ( <int> , it . search ( Interval . < Integer , Void > create ( <int> , <int> ) ) . size ( ) ) ; assertEquals ( <int> , it . search ( Interval . < Integer , Void > create ( <int> , <int> ) ) . size ( ) ) ; assertEquals ( <int> , it . search ( Interval . < Integer , Void > create ( <int> , <int> ) ) . size ( ) ) ; List < Interval < Integer , Void > > intervals2 = new ArrayList < Interval < Integer , Void > > ( ) ; intervals2 . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals2 . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals2 . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals2 . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals2 . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals2 . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; IntervalTree < Integer , Void , Interval < Integer , Void > > it2 = IntervalTree . build ( intervals2 ) ; assertEquals ( <int> , it2 . search ( Interval . < Integer , Void > create ( <int> , <int> ) ) . size ( ) ) ; List < Void > intersection1 = it2 . search ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; assertEquals ( <int> , intersection1 . size ( ) ) ; intersection1 = it2 . search ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; assertEquals ( <int> , intersection1 . size ( ) ) ; } @Test public void testIteration ( ) { List < Interval < Integer , Void > > intervals = new ArrayList < Interval < Integer , Void > > ( ) ; intervals . add ( Interval . < Integer , Void > create ( - <int> , - <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( - <int> , - <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; intervals . add ( Interval . < Integer , Void > create ( <int> , <int> ) ) ; IntervalTree < Integer , Void , Interval < Integer , Void > > it = IntervalTree . build ( intervals ) ; Collections . sort ( intervals , Interval . < Integer , Void > minOrdering ( ) ) ; List < Interval < Integer , Void > > l = new ArrayList < Interval < Integer , Void > > ( ) ; for ( Interval < Integer , Void > i : it ) l . add ( i ) ; assertEquals ( intervals , l ) ; } @Test public void testSerialization ( ) throws Exception { List < Interval < Integer , String > > intervals = new ArrayList < Interval < Integer , String > > ( ) ; intervals . add ( Interval . < Integer , String > create ( - <int> , - <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( - <int> , - <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; intervals . add ( Interval . < Integer , String > create ( <int> , <int> , <str> ) ) ; IntervalTree < Integer , String , Interval < Integer , String > > it = IntervalTree . build ( intervals ) ; IVersionedSerializer < IntervalTree < Integer , String , Interval < Integer , String > > > serializer = IntervalTree . serializer ( new ISerializer < Integer > ( ) { public void serialize ( Integer i , DataOutputPlus out ) throws IOException { out . writeInt ( i ) ; } public Integer deserialize ( DataInputPlus in ) throws IOException { return in . readInt ( ) ; } public long serializedSize ( Integer i ) { return <int> ; } } , new ISerializer < String > ( ) { public void serialize ( String v , DataOutputPlus out ) throws IOException { out . writeUTF ( v ) ; } public String deserialize ( DataInputPlus in ) throws IOException { return in . readUTF ( ) ; } public long serializedSize ( String v ) { return v . length ( ) ; } } , ( Constructor < Interval < Integer , String > > ) ( Object ) Interval . class . getConstructor ( Object . class , Object . class , Object . class ) ) ; DataOutputBuffer out = new DataOutputBuffer ( ) ; serializer . serialize ( it , out , <int> ) ; DataInputPlus in = new DataInputBuffer ( out . toByteArray ( ) ) ; IntervalTree < Integer , String , Interval < Integer , String > > it2 = serializer . deserialize ( in , <int> ) ; List < Interval < Integer , String > > intervals2 = new ArrayList < Interval < Integer , String > > ( ) ; for ( Interval < Integer , String > i : it2 ) intervals2 . add ( i ) ; assertEquals ( intervals , intervals2 ) ; } } 

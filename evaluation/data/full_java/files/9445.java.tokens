package com . google . common . io ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import java . io . IOException ; import java . io . Reader ; import java . nio . CharBuffer ; import java . util . LinkedList ; import java . util . Queue ; @Beta public final class LineReader { private final Readable readable ; private final Reader reader ; private final char [ ] buf = new char [ <hex> ] ; private final CharBuffer cbuf = CharBuffer . wrap ( buf ) ; private final Queue < String > lines = new LinkedList < String > ( ) ; private final LineBuffer lineBuf = new LineBuffer ( ) { @Override protected void handleLine ( String line , String end ) { lines . add ( line ) ; } } ; public LineReader ( Readable readable ) { this . readable = checkNotNull ( readable ) ; this . reader = ( readable instanceof Reader ) ? ( Reader ) readable : null ; } public String readLine ( ) throws IOException { while ( lines . peek ( ) = = null ) { cbuf . clear ( ) ; int read = ( reader ! = null ) ? reader . read ( buf , <int> , buf . length ) : readable . read ( cbuf ) ; if ( read = = - <int> ) { lineBuf . finish ( ) ; break ; } lineBuf . add ( buf , <int> , read ) ; } return lines . poll ( ) ; } } 

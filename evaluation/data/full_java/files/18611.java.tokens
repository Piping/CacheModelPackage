package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . Input ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . CircleShape ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . FixtureDef ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; public class VerticalStack extends Box2DTest { static final int e_columnCount = <int> ; static final int e_rowCount = <int> ; Body m_bullet ; Body [ ] m_bodies = new Body [ e_rowCount * e_columnCount ] ; int [ ] m_indices = new int [ e_rowCount * e_columnCount ] ; @Override protected void createWorld ( World world ) { { BodyDef bd = new BodyDef ( ) ; Body ground = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( <int> , <int> ) ) ; ground . createFixture ( shape , <float> ) ; shape . set ( new Vector2 ( <int> , <int> ) , new Vector2 ( <int> , <int> ) ) ; ground . createFixture ( shape , <int> ) ; shape . dispose ( ) ; } float xs [ ] = { <int> , - <int> , - <int> , <int> , <int> } ; for ( int j = <int> ; j < e_columnCount ; j + + ) { PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <float> , <float> ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; fd . friction = <float> ; for ( int i = <int> ; i < e_rowCount ; i + + ) { BodyDef bd = new BodyDef ( ) ; bd . type = BodyType . DynamicBody ; int n = j * e_rowCount + i ; m_indices [ n ] = n ; float x = <int> ; bd . position . set ( xs [ j ] + x , <float> + <float> * i ) ; Body body = world . createBody ( bd ) ; body . setUserData ( n ) ; m_bodies [ n ] = body ; body . createFixture ( fd ) ; } shape . dispose ( ) ; } m_bullet = null ; } @Override public boolean keyDown ( int keyCode ) { if ( keyCode = = Input . Keys . COMMA ) { if ( m_bullet ! = null ) { world . destroyBody ( m_bullet ) ; m_bullet = null ; } { CircleShape shape = new CircleShape ( ) ; shape . setRadius ( <float> ) ; FixtureDef fd = new FixtureDef ( ) ; fd . shape = shape ; fd . density = <float> ; fd . restitution = <float> ; BodyDef bd = new BodyDef ( ) ; bd . type = BodyType . DynamicBody ; bd . bullet = true ; bd . position . set ( - <int> , <int> ) ; m_bullet = world . createBody ( bd ) ; m_bullet . createFixture ( fd ) ; m_bullet . setLinearVelocity ( new Vector2 ( <int> , <int> ) ) ; } } return false ; } public void render ( ) { super . render ( ) ; } } 

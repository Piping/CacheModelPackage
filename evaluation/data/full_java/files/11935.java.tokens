package org . gradle . execution . taskgraph ; import org . gradle . api . Action ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import static org . gradle . util . Clock . prettyTime ; abstract class AbstractTaskPlanExecutor implements TaskPlanExecutor { private static final Logger LOGGER = Logging . getLogger ( AbstractTaskPlanExecutor . class ) ; protected Runnable taskWorker ( TaskExecutionPlan taskExecutionPlan , Action < ? super TaskInternal > taskWorker ) { return new TaskExecutorWorker ( taskExecutionPlan , taskWorker ) ; } private static class TaskExecutorWorker implements Runnable { private final TaskExecutionPlan taskExecutionPlan ; private final Action < ? super TaskInternal > taskWorker ; private TaskExecutorWorker ( TaskExecutionPlan taskExecutionPlan , Action < ? super TaskInternal > taskWorker ) { this . taskExecutionPlan = taskExecutionPlan ; this . taskWorker = taskWorker ; } public void run ( ) { long busy = <int> ; long start = System . currentTimeMillis ( ) ; TaskInfo task ; while ( ( task = taskExecutionPlan . getTaskToExecute ( ) ) ! = null ) { final String taskPath = task . getTask ( ) . getPath ( ) ; LOGGER . info ( <str> , taskPath , Thread . currentThread ( ) ) ; long startTask = System . currentTimeMillis ( ) ; processTask ( task ) ; long taskDuration = System . currentTimeMillis ( ) - startTask ; busy + = taskDuration ; if ( LOGGER . isInfoEnabled ( ) ) { LOGGER . info ( <str> , taskPath , Thread . currentThread ( ) , prettyTime ( taskDuration ) ) ; } } long total = System . currentTimeMillis ( ) - start ; if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( <str> , Thread . currentThread ( ) , prettyTime ( busy ) , prettyTime ( total - busy ) ) ; } } protected void processTask ( TaskInfo taskInfo ) { try { taskWorker . execute ( taskInfo . getTask ( ) ) ; } catch ( Throwable e ) { taskInfo . setExecutionFailure ( e ) ; } finally { taskExecutionPlan . taskComplete ( taskInfo ) ; } } } } 

package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . memcache ; import com . google . common . collect . MapMaker ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . ModuleComponentRepository ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . concurrent . Stoppable ; import java . util . Map ; public class InMemoryCachedRepositoryFactory implements Stoppable { public final static String TOGGLE_PROPERTY = <str> ; private final static Logger LOG = Logging . getLogger ( InMemoryCachedRepositoryFactory . class ) ; Map < String , InMemoryModuleComponentRepositoryCaches > cachePerRepo = new MapMaker ( ) . makeMap ( ) ; final InMemoryCacheStats stats = new InMemoryCacheStats ( ) ; public ModuleComponentRepository cached ( ModuleComponentRepository input ) { if ( <str> . equalsIgnoreCase ( System . getProperty ( TOGGLE_PROPERTY ) ) ) { return input ; } InMemoryModuleComponentRepositoryCaches caches = cachePerRepo . get ( input . getId ( ) ) ; stats . reposWrapped + + ; if ( caches = = null ) { LOG . debug ( <str> , input . getName ( ) , input . getId ( ) ) ; caches = new InMemoryModuleComponentRepositoryCaches ( stats ) ; stats . cacheInstances + + ; cachePerRepo . put ( input . getId ( ) , caches ) ; } else { LOG . debug ( <str> , input . getName ( ) , input . getId ( ) ) ; } return new InMemoryCachedModuleComponentRepository ( caches , input ) ; } public void stop ( ) { cachePerRepo . clear ( ) ; LOG . debug ( <str> , stats ) ; } } 

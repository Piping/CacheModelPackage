package org . gradle . api . internal . artifacts . ivyservice . resolveengine . result ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; import org . gradle . api . artifacts . result . ResolvedComponentResult ; import org . gradle . api . artifacts . result . ResolvedDependencyResult ; import org . gradle . api . artifacts . result . UnresolvedDependencyResult ; import org . gradle . internal . resolve . ModuleVersionResolveException ; import org . gradle . api . internal . artifacts . result . DefaultResolvedComponentResult ; import org . gradle . api . internal . artifacts . result . DefaultResolvedDependencyResult ; import org . gradle . api . internal . artifacts . result . DefaultUnresolvedDependencyResult ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import static java . util . Arrays . asList ; public class CachingDependencyResultFactory { private final Map < List , DefaultUnresolvedDependencyResult > unresolvedDependencies = new HashMap < List , DefaultUnresolvedDependencyResult > ( ) ; private final Map < List , DefaultResolvedDependencyResult > resolvedDependencies = new HashMap < List , DefaultResolvedDependencyResult > ( ) ; public UnresolvedDependencyResult createUnresolvedDependency ( ComponentSelector requested , ResolvedComponentResult from , ComponentSelectionReason reason , ModuleVersionResolveException failure ) { List < Object > key = asList ( requested , from ) ; if ( ! unresolvedDependencies . containsKey ( key ) ) { unresolvedDependencies . put ( key , new DefaultUnresolvedDependencyResult ( requested , reason , from , failure ) ) ; } return unresolvedDependencies . get ( key ) ; } public ResolvedDependencyResult createResolvedDependency ( ComponentSelector requested , ResolvedComponentResult from , DefaultResolvedComponentResult selected ) { List < Object > key = asList ( requested , from , selected ) ; if ( ! resolvedDependencies . containsKey ( key ) ) { resolvedDependencies . put ( key , new DefaultResolvedDependencyResult ( requested , selected , from ) ) ; } return resolvedDependencies . get ( key ) ; } } 

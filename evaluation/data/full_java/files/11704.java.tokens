package org . gradle . api . internal . tasks . execution ; import org . gradle . api . GradleException ; import org . gradle . api . execution . TaskActionListener ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . internal . tasks . * ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . api . tasks . StopActionException ; import org . gradle . api . tasks . StopExecutionException ; import org . gradle . api . tasks . TaskExecutionException ; import java . util . ArrayList ; import java . util . List ; public class ExecuteActionsTaskExecuter implements TaskExecuter { private static Logger logger = Logging . getLogger ( ExecuteActionsTaskExecuter . class ) ; private final TaskActionListener listener ; public ExecuteActionsTaskExecuter ( TaskActionListener listener ) { this . listener = listener ; } public void execute ( TaskInternal task , TaskStateInternal state , TaskExecutionContext context ) { listener . beforeActions ( task ) ; state . setExecuting ( true ) ; try { GradleException failure = executeActions ( task , state , context ) ; state . executed ( failure ) ; } finally { state . setExecuting ( false ) ; listener . afterActions ( task ) ; } } private GradleException executeActions ( TaskInternal task , TaskStateInternal state , TaskExecutionContext context ) { logger . debug ( <str> , task ) ; final List < ContextAwareTaskAction > actions = new ArrayList < ContextAwareTaskAction > ( task . getTaskActions ( ) ) ; for ( ContextAwareTaskAction action : actions ) { state . setDidWork ( true ) ; task . getStandardOutputCapture ( ) . start ( ) ; try { executeAction ( task , action , context ) ; } catch ( StopActionException e ) { logger . debug ( <str> , e . getMessage ( ) ) ; } catch ( StopExecutionException e ) { logger . info ( <str> , e . getMessage ( ) ) ; break ; } catch ( Throwable t ) { return new TaskExecutionException ( task , t ) ; } finally { task . getStandardOutputCapture ( ) . stop ( ) ; } } return null ; } private void executeAction ( TaskInternal task , ContextAwareTaskAction action , TaskExecutionContext context ) { action . contextualise ( context ) ; try { action . execute ( task ) ; } finally { action . contextualise ( null ) ; } } } 

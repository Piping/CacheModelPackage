package org . gradle . execution ; import com . google . common . collect . Lists ; import org . gradle . api . internal . GradleInternal ; import org . gradle . util . CollectionUtils ; import java . util . List ; public class DefaultBuildConfigurationActionExecuter implements BuildConfigurationActionExecuter { private final List < BuildConfigurationAction > configurationActions ; private List < ? extends BuildConfigurationAction > taskSelectors ; public DefaultBuildConfigurationActionExecuter ( Iterable < ? extends BuildConfigurationAction > configurationActions , Iterable < ? extends BuildConfigurationAction > defaultTaskSelectors ) { this . taskSelectors = Lists . newArrayList ( defaultTaskSelectors ) ; this . configurationActions = Lists . newArrayList ( configurationActions ) ; } public void select ( GradleInternal gradle ) { List < BuildConfigurationAction > processingBuildActions = CollectionUtils . flattenCollections ( BuildConfigurationAction . class , configurationActions , taskSelectors ) ; configure ( processingBuildActions , gradle , <int> ) ; } @Override public void setTaskSelectors ( List < ? extends BuildConfigurationAction > taskSelectors ) { this . taskSelectors = taskSelectors ; } private void configure ( final List < BuildConfigurationAction > processingConfigurationActions , final GradleInternal gradle , final int index ) { if ( index > = processingConfigurationActions . size ( ) ) { return ; } processingConfigurationActions . get ( index ) . configure ( new BuildExecutionContext ( ) { public GradleInternal getGradle ( ) { return gradle ; } public void proceed ( ) { configure ( processingConfigurationActions , gradle , index + <int> ) ; } } ) ; } } 

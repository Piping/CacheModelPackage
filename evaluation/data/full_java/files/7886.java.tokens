package org . elasticsearch . cluster . structure ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . routing . GroupShardsIterator ; import org . elasticsearch . cluster . routing . OperationRouting ; import org . elasticsearch . cluster . routing . PlainShardIterator ; import org . elasticsearch . cluster . routing . RotationShardShuffler ; import org . elasticsearch . cluster . routing . RoutingTable ; import org . elasticsearch . cluster . routing . ShardIterator ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . ShardShuffler ; import org . elasticsearch . cluster . routing . ShardsIterator ; import org . elasticsearch . cluster . routing . allocation . AllocationService ; import org . elasticsearch . cluster . routing . allocation . decider . AwarenessAllocationDecider ; import org . elasticsearch . cluster . routing . allocation . decider . ClusterRebalanceAllocationDecider ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . test . ESAllocationTestCase ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import static java . util . Collections . singletonMap ; import static java . util . Collections . unmodifiableMap ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . not ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; import static org . hamcrest . Matchers . sameInstance ; public class RoutingIteratorTests extends ESAllocationTestCase { public void testEmptyIterator ( ) { ShardShuffler shuffler = new RotationShardShuffler ( <int> ) ; ShardIterator shardIterator = new PlainShardIterator ( new ShardId ( <str> , <int> ) , shuffler . shuffle ( Collections . < ShardRouting > emptyList ( ) ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; shardIterator = new PlainShardIterator ( new ShardId ( <str> , <int> ) , shuffler . shuffle ( Collections . < ShardRouting > emptyList ( ) ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; shardIterator = new PlainShardIterator ( new ShardId ( <str> , <int> ) , shuffler . shuffle ( Collections . < ShardRouting > emptyList ( ) ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; shardIterator = new PlainShardIterator ( new ShardId ( <str> , <int> ) , shuffler . shuffle ( Collections . < ShardRouting > emptyList ( ) ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; } public void testIterator1 ( ) { MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ShardIterator shardIterator = routingTable . index ( <str> ) . shard ( <int> ) . shardsIt ( <int> ) ; assertThat ( shardIterator . size ( ) , equalTo ( <int> ) ) ; ShardRouting shardRouting1 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting1 , notNullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; ShardRouting shardRouting2 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting2 , notNullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardRouting2 , not ( sameInstance ( shardRouting1 ) ) ) ; ShardRouting shardRouting3 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting3 , notNullValue ( ) ) ; assertThat ( shardRouting3 , not ( sameInstance ( shardRouting1 ) ) ) ; assertThat ( shardRouting3 , not ( sameInstance ( shardRouting2 ) ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; } public void testIterator2 ( ) { MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ShardIterator shardIterator = routingTable . index ( <str> ) . shard ( <int> ) . shardsIt ( <int> ) ; assertThat ( shardIterator . size ( ) , equalTo ( <int> ) ) ; ShardRouting shardRouting1 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting1 , notNullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; ShardRouting shardRouting2 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting2 , notNullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardRouting2 , not ( sameInstance ( shardRouting1 ) ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . remaining ( ) , equalTo ( <int> ) ) ; shardIterator = routingTable . index ( <str> ) . shard ( <int> ) . shardsIt ( <int> ) ; assertThat ( shardIterator . size ( ) , equalTo ( <int> ) ) ; ShardRouting shardRouting3 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting1 , notNullValue ( ) ) ; ShardRouting shardRouting4 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting2 , notNullValue ( ) ) ; assertThat ( shardRouting2 , not ( sameInstance ( shardRouting1 ) ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardRouting1 , not ( sameInstance ( shardRouting3 ) ) ) ; assertThat ( shardRouting2 , not ( sameInstance ( shardRouting4 ) ) ) ; assertThat ( shardRouting1 , sameInstance ( shardRouting4 ) ) ; assertThat ( shardRouting2 , sameInstance ( shardRouting3 ) ) ; shardIterator = routingTable . index ( <str> ) . shard ( <int> ) . shardsIt ( <int> ) ; assertThat ( shardIterator . size ( ) , equalTo ( <int> ) ) ; ShardRouting shardRouting5 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting5 , notNullValue ( ) ) ; ShardRouting shardRouting6 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting6 , notNullValue ( ) ) ; assertThat ( shardRouting6 , not ( sameInstance ( shardRouting5 ) ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardRouting5 , sameInstance ( shardRouting1 ) ) ; assertThat ( shardRouting6 , sameInstance ( shardRouting2 ) ) ; shardIterator = routingTable . index ( <str> ) . shard ( <int> ) . shardsIt ( <int> ) ; assertThat ( shardIterator . size ( ) , equalTo ( <int> ) ) ; ShardRouting shardRouting7 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting7 , notNullValue ( ) ) ; ShardRouting shardRouting8 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting8 , notNullValue ( ) ) ; assertThat ( shardRouting8 , not ( sameInstance ( shardRouting7 ) ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardRouting7 , sameInstance ( shardRouting3 ) ) ; assertThat ( shardRouting8 , sameInstance ( shardRouting4 ) ) ; shardIterator = routingTable . index ( <str> ) . shard ( <int> ) . shardsIt ( <int> ) ; assertThat ( shardIterator . size ( ) , equalTo ( <int> ) ) ; ShardRouting shardRouting9 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting9 , notNullValue ( ) ) ; ShardRouting shardRouting10 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting10 , notNullValue ( ) ) ; assertThat ( shardRouting10 , not ( sameInstance ( shardRouting9 ) ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardRouting9 , sameInstance ( shardRouting5 ) ) ; assertThat ( shardRouting10 , sameInstance ( shardRouting6 ) ) ; } public void testRandomRouting ( ) { MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ShardIterator shardIterator = routingTable . index ( <str> ) . shard ( <int> ) . shardsRandomIt ( ) ; ShardRouting shardRouting1 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting1 , notNullValue ( ) ) ; assertThat ( shardIterator . nextOrNull ( ) , notNullValue ( ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; shardIterator = routingTable . index ( <str> ) . shard ( <int> ) . shardsRandomIt ( ) ; ShardRouting shardRouting2 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting2 , notNullValue ( ) ) ; ShardRouting shardRouting3 = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting3 , notNullValue ( ) ) ; assertThat ( shardIterator . nextOrNull ( ) , nullValue ( ) ) ; assertThat ( shardRouting1 , not ( sameInstance ( shardRouting2 ) ) ) ; assertThat ( shardRouting1 , sameInstance ( shardRouting3 ) ) ; } public void testAttributePreferenceRouting ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . put ( <str> , <str> ) . build ( ) ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; Map < String , String > node1Attributes = new HashMap < > ( ) ; node1Attributes . put ( <str> , <str> ) ; node1Attributes . put ( <str> , <str> ) ; Map < String , String > node2Attributes = new HashMap < > ( ) ; node2Attributes . put ( <str> , <str> ) ; node2Attributes . put ( <str> , <str> ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> , unmodifiableMap ( node1Attributes ) ) ) . put ( newNode ( <str> , unmodifiableMap ( node2Attributes ) ) ) . localNodeId ( <str> ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingTable = strategy . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingTable = strategy . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; ShardIterator shardIterator = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . preferAttributesActiveInitializingShardsIt ( new String [ ] { <str> } , clusterState . nodes ( ) ) ; ShardRouting shardRouting = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting , notNullValue ( ) ) ; assertThat ( shardRouting . currentNodeId ( ) , equalTo ( <str> ) ) ; shardRouting = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting , notNullValue ( ) ) ; assertThat ( shardRouting . currentNodeId ( ) , equalTo ( <str> ) ) ; shardIterator = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . preferAttributesActiveInitializingShardsIt ( new String [ ] { <str> } , clusterState . nodes ( ) ) ; shardRouting = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting , notNullValue ( ) ) ; assertThat ( shardRouting . currentNodeId ( ) , equalTo ( <str> ) ) ; shardRouting = shardIterator . nextOrNull ( ) ; assertThat ( shardRouting , notNullValue ( ) ) ; assertThat ( shardRouting . currentNodeId ( ) , equalTo ( <str> ) ) ; } public void testNodeSelectorRouting ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( ClusterRebalanceAllocationDecider . CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE , <str> ) . build ( ) ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> , <str> , singletonMap ( <str> , <str> ) ) ) . put ( newNode ( <str> , <str> , singletonMap ( <str> , <str> ) ) ) . localNodeId ( <str> ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingTable = strategy . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; ShardsIterator shardsIterator = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . onlyNodeSelectorActiveInitializingShardsIt ( <str> , clusterState . nodes ( ) ) ; assertThat ( shardsIterator . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardsIterator . nextOrNull ( ) . currentNodeId ( ) , equalTo ( <str> ) ) ; shardsIterator = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . onlyNodeSelectorActiveInitializingShardsIt ( <str> , clusterState . nodes ( ) ) ; assertThat ( shardsIterator . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardsIterator . nextOrNull ( ) . currentNodeId ( ) , equalTo ( <str> ) ) ; shardsIterator = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . onlyNodeSelectorActiveInitializingShardsIt ( <str> , clusterState . nodes ( ) ) ; assertThat ( shardsIterator . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardsIterator . nextOrNull ( ) . currentNodeId ( ) , equalTo ( <str> ) ) ; shardsIterator = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . onlyNodeSelectorActiveInitializingShardsIt ( <str> , clusterState . nodes ( ) ) ; assertThat ( shardsIterator . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardsIterator . nextOrNull ( ) . currentNodeId ( ) , equalTo ( <str> ) ) ; try { shardsIterator = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . onlyNodeSelectorActiveInitializingShardsIt ( <str> , clusterState . nodes ( ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException illegal ) { } shardsIterator = clusterState . routingTable ( ) . index ( <str> ) . shard ( <int> ) . onlyNodeSelectorActiveInitializingShardsIt ( <str> , clusterState . nodes ( ) ) ; assertThat ( shardsIterator . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardsIterator . nextOrNull ( ) . currentNodeId ( ) , equalTo ( <str> ) ) ; } public void testShardsAndPreferNodeRouting ( ) { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . build ( ) ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . localNodeId ( <str> ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingTable = strategy . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingTable = strategy . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; OperationRouting operationRouting = new OperationRouting ( Settings . Builder . EMPTY_SETTINGS , new AwarenessAllocationDecider ( ) ) ; GroupShardsIterator shardIterators = operationRouting . searchShards ( clusterState , new String [ ] { <str> } , null , <str> ) ; assertThat ( shardIterators . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterators . iterator ( ) . next ( ) . shardId ( ) . id ( ) , equalTo ( <int> ) ) ; shardIterators = operationRouting . searchShards ( clusterState , new String [ ] { <str> } , null , <str> ) ; assertThat ( shardIterators . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterators . iterator ( ) . next ( ) . shardId ( ) . id ( ) , equalTo ( <int> ) ) ; shardIterators = operationRouting . searchShards ( clusterState , new String [ ] { <str> } , null , <str> ) ; assertThat ( shardIterators . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterators . iterator ( ) . next ( ) . shardId ( ) . id ( ) , equalTo ( <int> ) ) ; String firstRoundNodeId = shardIterators . iterator ( ) . next ( ) . nextOrNull ( ) . currentNodeId ( ) ; shardIterators = operationRouting . searchShards ( clusterState , new String [ ] { <str> } , null , <str> ) ; assertThat ( shardIterators . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterators . iterator ( ) . next ( ) . shardId ( ) . id ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterators . iterator ( ) . next ( ) . nextOrNull ( ) . currentNodeId ( ) , not ( equalTo ( firstRoundNodeId ) ) ) ; shardIterators = operationRouting . searchShards ( clusterState , new String [ ] { <str> } , null , <str> ) ; assertThat ( shardIterators . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterators . iterator ( ) . next ( ) . shardId ( ) . id ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterators . iterator ( ) . next ( ) . nextOrNull ( ) . currentNodeId ( ) , equalTo ( <str> ) ) ; shardIterators = operationRouting . searchShards ( clusterState , new String [ ] { <str> } , null , <str> ) ; assertThat ( shardIterators . size ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterators . iterator ( ) . next ( ) . shardId ( ) . id ( ) , equalTo ( <int> ) ) ; assertThat ( shardIterators . iterator ( ) . next ( ) . nextOrNull ( ) . currentNodeId ( ) , equalTo ( <str> ) ) ; } public void testReplicaShardPreferenceIters ( ) throws Exception { AllocationService strategy = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . build ( ) ) ; OperationRouting operationRouting = new OperationRouting ( Settings . Builder . EMPTY_SETTINGS , new AwarenessAllocationDecider ( ) ) ; MetaData metaData = MetaData . builder ( ) . put ( IndexMetaData . builder ( <str> ) . settings ( settings ( Version . CURRENT ) ) . numberOfShards ( <int> ) . numberOfReplicas ( <int> ) ) . build ( ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( metaData . index ( <str> ) ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; clusterState = ClusterState . builder ( clusterState ) . nodes ( DiscoveryNodes . builder ( ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . put ( newNode ( <str> ) ) . localNodeId ( <str> ) ) . build ( ) ; routingTable = strategy . reroute ( clusterState , <str> ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingTable = strategy . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; GroupShardsIterator shardIterators = operationRouting . searchShards ( clusterState , new String [ ] { <str> } , null , <str> ) ; assertThat ( shardIterators . size ( ) , equalTo ( <int> ) ) ; ShardIterator iter = shardIterators . iterator ( ) . next ( ) ; assertThat ( iter . size ( ) , equalTo ( <int> ) ) ; ShardRouting routing = iter . nextOrNull ( ) ; assertNotNull ( routing ) ; assertThat ( routing . shardId ( ) . id ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertTrue ( routing . primary ( ) ) ; assertTrue ( routing . started ( ) ) ; routing = iter . nextOrNull ( ) ; assertThat ( routing . shardId ( ) . id ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertFalse ( routing . primary ( ) ) ; assertTrue ( routing . initializing ( ) ) ; routing = iter . nextOrNull ( ) ; assertThat ( routing . shardId ( ) . id ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertFalse ( routing . primary ( ) ) ; assertTrue ( routing . initializing ( ) ) ; routingTable = strategy . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; routingTable = strategy . applyStartedShards ( clusterState , clusterState . getRoutingNodes ( ) . shardsWithState ( INITIALIZING ) ) . routingTable ( ) ; clusterState = ClusterState . builder ( clusterState ) . routingTable ( routingTable ) . build ( ) ; shardIterators = operationRouting . searchShards ( clusterState , new String [ ] { <str> } , null , <str> ) ; assertThat ( shardIterators . size ( ) , equalTo ( <int> ) ) ; iter = shardIterators . iterator ( ) . next ( ) ; assertThat ( iter . size ( ) , equalTo ( <int> ) ) ; routing = iter . nextOrNull ( ) ; assertNotNull ( routing ) ; assertThat ( routing . shardId ( ) . id ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertFalse ( routing . primary ( ) ) ; routing = iter . nextOrNull ( ) ; assertThat ( routing . shardId ( ) . id ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertFalse ( routing . primary ( ) ) ; shardIterators = operationRouting . searchShards ( clusterState , new String [ ] { <str> } , null , <str> ) ; assertThat ( shardIterators . size ( ) , equalTo ( <int> ) ) ; iter = shardIterators . iterator ( ) . next ( ) ; assertThat ( iter . size ( ) , equalTo ( <int> ) ) ; routing = iter . nextOrNull ( ) ; assertNotNull ( routing ) ; assertThat ( routing . shardId ( ) . id ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertFalse ( routing . primary ( ) ) ; routing = iter . nextOrNull ( ) ; assertThat ( routing . shardId ( ) . id ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertFalse ( routing . primary ( ) ) ; routing = iter . nextOrNull ( ) ; assertThat ( routing . shardId ( ) . id ( ) , anyOf ( equalTo ( <int> ) , equalTo ( <int> ) ) ) ; assertTrue ( routing . primary ( ) ) ; } } 

package org . gradle . api . tasks . diagnostics ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . tasks . diagnostics . internal . PropertyReportRenderer ; import org . gradle . util . GUtil ; import org . gradle . util . TestUtil ; import org . jmock . Expectations ; import org . jmock . Sequence ; import org . jmock . integration . junit4 . JMock ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . jmock . lib . legacy . ClassImposteriser ; import org . junit . Before ; import org . junit . Test ; import org . junit . runner . RunWith ; import java . io . IOException ; @RunWith ( JMock . class ) public class PropertyReportTaskTest { private final JUnit4Mockery context = new JUnit4Mockery ( ) ; private ProjectInternal project ; private PropertyReportTask task ; private PropertyReportRenderer renderer ; @Before public void setup ( ) { context . setImposteriser ( ClassImposteriser . INSTANCE ) ; project = context . mock ( ProjectInternal . class ) ; renderer = context . mock ( PropertyReportRenderer . class ) ; context . checking ( new Expectations ( ) { { allowing ( project ) . absoluteProjectPath ( <str> ) ; will ( returnValue ( <str> ) ) ; allowing ( project ) . getConvention ( ) ; will ( returnValue ( null ) ) ; } } ) ; task = TestUtil . createTask ( PropertyReportTask . class ) ; task . setRenderer ( renderer ) ; } @Test public void passesEachProjectPropertyToRenderer ( ) throws IOException { context . checking ( new Expectations ( ) { { one ( project ) . getProperties ( ) ; will ( returnValue ( GUtil . map ( <str> , <str> , <str> , <str> ) ) ) ; Sequence sequence = context . sequence ( <str> ) ; one ( renderer ) . addProperty ( <str> , <str> ) ; inSequence ( sequence ) ; one ( renderer ) . addProperty ( <str> , <str> ) ; inSequence ( sequence ) ; } } ) ; task . generate ( project ) ; } @Test public void doesNotShowContentsOfThePropertiesProperty ( ) throws IOException { context . checking ( new Expectations ( ) { { one ( project ) . getProperties ( ) ; will ( returnValue ( GUtil . map ( <str> , <str> , <str> , <str> ) ) ) ; Sequence sequence = context . sequence ( <str> ) ; one ( renderer ) . addProperty ( <str> , <str> ) ; inSequence ( sequence ) ; one ( renderer ) . addProperty ( <str> , <str> ) ; inSequence ( sequence ) ; } } ) ; task . generate ( project ) ; } } 

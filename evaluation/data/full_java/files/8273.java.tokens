package org . elasticsearch . index . query ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . TermQuery ; import org . elasticsearch . index . mapper . internal . TypeFieldMapper ; import java . io . IOException ; import static org . hamcrest . Matchers . either ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; public class TypeQueryBuilderTests extends AbstractQueryTestCase < TypeQueryBuilder > { @Override protected TypeQueryBuilder doCreateTestQueryBuilder ( ) { return new TypeQueryBuilder ( getRandomType ( ) ) ; } @Override protected void doAssertLuceneQuery ( TypeQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , either ( instanceOf ( TermQuery . class ) ) . or ( instanceOf ( ConstantScoreQuery . class ) ) ) ; if ( query instanceof ConstantScoreQuery ) { query = ( ( ConstantScoreQuery ) query ) . getQuery ( ) ; assertThat ( query , instanceOf ( TermQuery . class ) ) ; } TermQuery termQuery = ( TermQuery ) query ; assertThat ( termQuery . getTerm ( ) . field ( ) , equalTo ( TypeFieldMapper . NAME ) ) ; assertThat ( termQuery . getTerm ( ) . text ( ) , equalTo ( queryBuilder . type ( ) ) ) ; } public void testIllegalArgument ( ) { try { new TypeQueryBuilder ( ( String ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> ; TypeQueryBuilder parsed = ( TypeQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <str> , parsed . type ( ) ) ; } } 

package org . elasticsearch . action . search ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import static org . elasticsearch . action . ValidateActions . addValidationError ; public class ClearScrollRequest extends ActionRequest < ClearScrollRequest > { private List < String > scrollIds ; public ClearScrollRequest ( ) { } public ClearScrollRequest ( ActionRequest request ) { super ( request ) ; } public List < String > getScrollIds ( ) { return scrollIds ; } public void setScrollIds ( List < String > scrollIds ) { this . scrollIds = scrollIds ; } public void addScrollId ( String scrollId ) { if ( scrollIds = = null ) { scrollIds = new ArrayList < > ( ) ; } scrollIds . add ( scrollId ) ; } public List < String > scrollIds ( ) { return scrollIds ; } public void scrollIds ( List < String > scrollIds ) { this . scrollIds = scrollIds ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( scrollIds = = null | | scrollIds . isEmpty ( ) ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; scrollIds = Arrays . asList ( in . readStringArray ( ) ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; if ( scrollIds = = null ) { out . writeVInt ( <int> ) ; } else { out . writeStringArray ( scrollIds . toArray ( new String [ scrollIds . size ( ) ] ) ) ; } } } 

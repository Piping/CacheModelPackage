package org . gradle . api . internal . tasks . testing . logging ; import com . google . common . base . Joiner ; import com . google . common . collect . Lists ; import org . gradle . api . Nullable ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . tasks . testing . TestDescriptor ; import org . gradle . api . tasks . testing . logging . TestLogEvent ; import org . gradle . logging . StyledTextOutput ; import org . gradle . logging . StyledTextOutputFactory ; import org . gradle . util . TextUtil ; import java . util . List ; public abstract class AbstractTestLogger { private final StyledTextOutputFactory textOutputFactory ; private final LogLevel logLevel ; private final int displayGranularity ; private TestDescriptor lastSeenTestDescriptor ; private TestLogEvent lastSeenTestEvent ; protected AbstractTestLogger ( StyledTextOutputFactory textOutputFactory , LogLevel logLevel , int displayGranularity ) { this . textOutputFactory = textOutputFactory ; this . logLevel = logLevel ; this . displayGranularity = displayGranularity ; } protected void logEvent ( TestDescriptor descriptor , TestLogEvent event ) { logEvent ( descriptor , event , null ) ; } protected void logEvent ( TestDescriptor descriptor , TestLogEvent event , @Nullable String details ) { StyledTextOutput output = textOutputFactory . create ( <str> , logLevel ) ; if ( ! descriptor . equals ( lastSeenTestDescriptor ) | | event ! = lastSeenTestEvent ) { output . println ( ) . append ( getEventPath ( descriptor ) ) ; output . withStyle ( getStyle ( event ) ) . println ( event . toString ( ) ) ; } lastSeenTestDescriptor = descriptor ; lastSeenTestEvent = event ; if ( details ! = null ) { output . append ( TextUtil . toPlatformLineSeparators ( details ) ) ; } } private String getEventPath ( TestDescriptor descriptor ) { List < String > names = Lists . newArrayList ( ) ; TestDescriptor current = descriptor ; while ( current ! = null ) { if ( isAtomicTestWhoseParentIsNotTheTestClass ( current ) ) { names . add ( current . getClassName ( ) + <str> + current . getName ( ) ) ; } else { names . add ( current . getName ( ) ) ; } current = current . getParent ( ) ; } int effectiveDisplayGranularity = displayGranularity = = - <int> ? names . size ( ) - <int> : Math . min ( displayGranularity , names . size ( ) - <int> ) ; List < String > displayedNames = Lists . reverse ( names ) . subList ( effectiveDisplayGranularity , names . size ( ) ) ; return Joiner . on ( <str> ) . join ( displayedNames ) + <str> ; } private boolean isAtomicTestWhoseParentIsNotTheTestClass ( TestDescriptor current ) { return ! current . isComposite ( ) & & current . getClassName ( ) ! = null & & ( current . getParent ( ) = = null | | ! current . getClassName ( ) . equals ( current . getParent ( ) . getName ( ) ) ) ; } private StyledTextOutput . Style getStyle ( TestLogEvent event ) { switch ( event ) { case PASSED : return StyledTextOutput . Style . Identifier ; case FAILED : return StyledTextOutput . Style . Failure ; case SKIPPED : return StyledTextOutput . Style . Info ; default : return StyledTextOutput . Style . Normal ; } } } 

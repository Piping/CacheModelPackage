package org . gradle . api . plugins . osgi ; import groovy . lang . Closure ; import org . gradle . api . internal . ConventionMapping ; import org . gradle . api . internal . IConventionAware ; import org . gradle . api . internal . plugins . osgi . DefaultOsgiManifest ; import org . gradle . api . internal . plugins . osgi . OsgiHelper ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . plugins . BasePluginConvention ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . util . ConfigureUtil ; import java . util . concurrent . Callable ; public class OsgiPluginConvention { private ProjectInternal project ; public OsgiPluginConvention ( ProjectInternal project ) { this . project = project ; } public OsgiManifest osgiManifest ( ) { return osgiManifest ( null ) ; } public OsgiManifest osgiManifest ( Closure closure ) { return ConfigureUtil . configure ( closure , createDefaultOsgiManifest ( project ) ) ; } private OsgiManifest createDefaultOsgiManifest ( final ProjectInternal project ) { OsgiManifest osgiManifest = project . getServices ( ) . get ( Instantiator . class ) . newInstance ( DefaultOsgiManifest . class , project . getFileResolver ( ) ) ; ConventionMapping mapping = ( ( IConventionAware ) osgiManifest ) . getConventionMapping ( ) ; final OsgiHelper osgiHelper = new OsgiHelper ( ) ; mapping . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return osgiHelper . getVersion ( project . getVersion ( ) . toString ( ) ) ; } } ) ; mapping . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return project . getConvention ( ) . getPlugin ( BasePluginConvention . class ) . getArchivesBaseName ( ) ; } } ) ; mapping . map ( <str> , new Callable < Object > ( ) { public Object call ( ) throws Exception { return osgiHelper . getBundleSymbolicName ( project ) ; } } ) ; return osgiManifest ; } } 

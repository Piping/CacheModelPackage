package org . elasticsearch . common . lucene ; import org . apache . lucene . index . IndexReader ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . Weight ; import java . io . IOException ; import java . util . Objects ; public abstract class IndexCacheableQuery extends Query { private Object readerCacheKey ; @Override public Query rewrite ( IndexReader reader ) throws IOException { if ( reader . getCoreCacheKey ( ) ! = this . readerCacheKey ) { IndexCacheableQuery rewritten = ( IndexCacheableQuery ) clone ( ) ; rewritten . readerCacheKey = reader . getCoreCacheKey ( ) ; return rewritten ; } return super . rewrite ( reader ) ; } @Override public boolean equals ( Object obj ) { return super . equals ( obj ) & & readerCacheKey = = ( ( IndexCacheableQuery ) obj ) . readerCacheKey ; } @Override public int hashCode ( ) { return <int> * super . hashCode ( ) + Objects . hashCode ( readerCacheKey ) ; } @Override public final Weight createWeight ( IndexSearcher searcher , boolean needsScores ) throws IOException { if ( readerCacheKey = = null ) { throw new IllegalStateException ( <str> ) ; } if ( readerCacheKey ! = searcher . getIndexReader ( ) . getCoreCacheKey ( ) ) { throw new IllegalStateException ( <str> ) ; } return doCreateWeight ( searcher , needsScores ) ; } public abstract Weight doCreateWeight ( IndexSearcher searcher , boolean needsScores ) throws IOException ; } 

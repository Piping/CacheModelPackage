package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . math . BigInteger ; import org . eclipse . debug . core . model . MemoryByte ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . memory . provisional . AbstractAsyncTableRendering ; import org . eclipse . debug . ui . IDebugUIConstants ; public class HexRendering extends AbstractAsyncTableRendering { public HexRendering ( String renderingId ) { super ( renderingId ) ; } @Override public String getString ( String dataType , BigInteger address , MemoryByte [ ] data ) { StringBuffer strBuffer = new StringBuffer ( ) ; String paddedStr = DebugUIPlugin . getDefault ( ) . getPreferenceStore ( ) . getString ( IDebugUIConstants . PREF_PADDED_STR ) ; for ( int i = <int> ; i < data . length ; i + + ) { if ( data [ i ] . isReadable ( ) ) { strBuffer . append ( new String ( RenderingsUtil . convertByteToCharArray ( data [ i ] . getValue ( ) ) ) ) ; } else { strBuffer . append ( paddedStr ) ; } } return strBuffer . toString ( ) . toUpperCase ( ) ; } @Override public byte [ ] getBytes ( String dataType , BigInteger address , MemoryByte [ ] currentValues , String data ) { byte [ ] bytes = RenderingsUtil . convertHexStringToByteArray ( data , currentValues . length , getNumCharsPerByte ( ) ) ; return bytes ; } @Override public int getNumCharsPerByte ( ) { return <int> ; } } 

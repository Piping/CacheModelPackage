package org . eclipse . debug . tests . launching ; import java . io . ByteArrayInputStream ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IFolder ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . RefreshUtil ; import org . eclipse . debug . internal . core . RefreshScopeComparator ; import org . eclipse . debug . tests . TestsPlugin ; import org . eclipse . debug . ui . RefreshTab ; import org . eclipse . jface . viewers . ISelectionProvider ; import org . eclipse . jface . viewers . StructuredSelection ; import org . eclipse . ui . IViewPart ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchPartSite ; import org . eclipse . ui . PartInitException ; import org . eclipse . ui . PlatformUI ; public class RefreshTabTests extends AbstractLaunchTest { public RefreshTabTests ( String name ) { super ( name ) ; } protected void setSelection ( IResource resource ) { IWorkbenchPage page = PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getActivePage ( ) ; assertNotNull ( <str> , page ) ; IViewPart part ; try { part = page . showView ( <str> ) ; IWorkbenchPartSite site = part . getSite ( ) ; assertNotNull ( <str> , site ) ; ISelectionProvider provider = site . getSelectionProvider ( ) ; assertNotNull ( <str> , provider ) ; provider . setSelection ( new StructuredSelection ( resource ) ) ; } catch ( PartInitException e ) { assertNotNull ( <str> , null ) ; } } public void testSelectedResource ( ) throws CoreException { String scope = <str> ; IResource resource = getProject ( ) . getFolder ( <str> ) ; setSelection ( resource ) ; IResource [ ] result = RefreshTab . getRefreshResources ( scope ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . length ) ; assertEquals ( resource , result [ <int> ] ) ; } public void testSelectionsFolder ( ) throws CoreException { String scope = <str> ; IResource resource = getProject ( ) . getFolder ( <str> ) ; setSelection ( resource ) ; IResource [ ] result = RefreshTab . getRefreshResources ( scope ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . length ) ; assertEquals ( resource . getParent ( ) , result [ <int> ] ) ; } public void testSelectionsProject ( ) throws CoreException { String scope = <str> ; IResource resource = getProject ( ) . getFolder ( <str> ) ; setSelection ( resource ) ; IResource [ ] result = RefreshTab . getRefreshResources ( scope ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . length ) ; assertEquals ( resource . getProject ( ) , result [ <int> ] ) ; } public void testWorkspaceScope ( ) throws CoreException { String scope = <str> ; IResource [ ] result = RefreshTab . getRefreshResources ( scope ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . length ) ; assertEquals ( ResourcesPlugin . getWorkspace ( ) . getRoot ( ) , result [ <int> ] ) ; } public void testSpecificResource ( ) throws CoreException { String scope = <str> ; IResource resource = getProject ( ) . getFile ( <str> ) ; IResource [ ] result = RefreshTab . getRefreshResources ( scope ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . length ) ; assertEquals ( resource , result [ <int> ] ) ; } public void testWorkingSet ( ) throws CoreException { String scope = <str> ; IResource resource = getProject ( ) . getFile ( <str> ) ; IResource [ ] result = RefreshTab . getRefreshResources ( scope ) ; assertNotNull ( result ) ; assertEquals ( <int> , result . length ) ; assertEquals ( resource , result [ <int> ] ) ; } protected IProject getProject ( ) throws CoreException { IWorkspaceRoot root = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; IProject project = root . getProject ( <str> ) ; if ( ! project . exists ( ) ) { project = TestsPlugin . createProject ( <str> ) ; IFolder folder = project . getFolder ( <str> ) ; folder . create ( false , true , null ) ; IFile file = project . getFile ( <str> ) ; file . create ( new ByteArrayInputStream ( <str> . getBytes ( ) ) , false , null ) ; } return project ; } public void testRefreshScopeComparator ( ) throws CoreException { String oldStyle = <str> ; String newStyle = <str> ; assertEquals ( <str> , <int> , new RefreshScopeComparator ( ) . compare ( oldStyle , newStyle ) ) ; } public void testResourceMemento ( ) throws CoreException { IResource [ ] resources = new IResource [ ] { getProject ( ) , getProject ( ) . getFile ( <str> ) , getProject ( ) . getFile ( <str> ) } ; String memento = RefreshUtil . toMemento ( resources ) ; IResource [ ] restore = RefreshUtil . toResources ( memento ) ; assertEquals ( resources . length , restore . length ) ; assertEquals ( resources [ <int> ] , restore [ <int> ] ) ; assertEquals ( resources [ <int> ] , restore [ <int> ] ) ; assertEquals ( resources [ <int> ] , restore [ <int> ] ) ; } public void testEmptyResourceSet ( ) throws CoreException { String memento = RefreshUtil . toMemento ( new IResource [ ] { } ) ; IResource [ ] resources = RefreshUtil . toResources ( memento ) ; assertNotNull ( resources ) ; assertEquals ( <str> , <int> , resources . length ) ; } } 

package org . apache . cassandra . service . pager ; import java . nio . ByteBuffer ; import org . junit . Test ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . cql3 . ColumnIdentifier ; import org . apache . cassandra . db . * ; import org . apache . cassandra . db . rows . * ; import org . apache . cassandra . db . marshal . * ; import org . apache . cassandra . transport . Server ; import org . apache . cassandra . utils . ByteBufferUtil ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; public class PagingStateTest { private PagingState makeSomePagingState ( int protocolVersion ) { CFMetaData metadata = CFMetaData . Builder . create ( <str> , <str> ) . addPartitionKey ( <str> , AsciiType . instance ) . addClusteringColumn ( <str> , AsciiType . instance ) . addClusteringColumn ( <str> , Int32Type . instance ) . addRegularColumn ( <str> , AsciiType . instance ) . build ( ) ; ByteBuffer pk = ByteBufferUtil . bytes ( <str> ) ; ColumnDefinition def = metadata . getColumnDefinition ( new ColumnIdentifier ( <str> , false ) ) ; Clustering c = new Clustering ( ByteBufferUtil . bytes ( <str> ) , ByteBufferUtil . bytes ( <int> ) ) ; Row row = BTreeRow . singleCellRow ( c , BufferCell . live ( metadata , def , <int> , ByteBufferUtil . EMPTY_BYTE_BUFFER ) ) ; PagingState . RowMark mark = PagingState . RowMark . create ( metadata , row , protocolVersion ) ; return new PagingState ( pk , mark , <int> , <int> ) ; } @Test public void testSerializationBackwardCompatibility ( ) { PagingState state = makeSomePagingState ( Server . VERSION_3 ) ; String serializedState = ByteBufferUtil . bytesToHex ( state . serialize ( Server . VERSION_3 ) ) ; assertTrue ( serializedState . startsWith ( <str> ) ) ; } @Test public void testSerializeDeserializeV3 ( ) { PagingState state = makeSomePagingState ( Server . VERSION_3 ) ; ByteBuffer serialized = state . serialize ( Server . VERSION_3 ) ; assertEquals ( serialized . remaining ( ) , state . serializedSize ( Server . VERSION_3 ) ) ; assertEquals ( state , PagingState . deserialize ( serialized , Server . VERSION_3 ) ) ; } @Test public void testSerializeDeserializeV4 ( ) { PagingState state = makeSomePagingState ( Server . VERSION_4 ) ; ByteBuffer serialized = state . serialize ( Server . VERSION_4 ) ; assertEquals ( serialized . remaining ( ) , state . serializedSize ( Server . VERSION_4 ) ) ; assertEquals ( state , PagingState . deserialize ( serialized , Server . VERSION_4 ) ) ; } } 

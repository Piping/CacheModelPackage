package org . elasticsearch . index . mapper . date ; import org . elasticsearch . Version ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . junit . Before ; import java . util . Arrays ; import java . util . List ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . VersionUtils . randomVersionBetween ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoSearchHits ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . is ; public class DateBackwardsCompatibilityTests extends ESSingleNodeTestCase { private String index = <str> ; private String type = <str> ; private Version randomVersionBelow2x ; @Before public void setup ( ) throws Exception { randomVersionBelow2x = randomVersionBetween ( getRandom ( ) , Version . V_0_90_0 , Version . V_1_6_1 ) ; } public void testThatPre2xIndicesNumbersAreTreatedAsEpochs ( ) throws Exception { index = createPre2xIndexAndMapping ( ) ; long dateInMillis = <int> * <int> ; XContentBuilder document = jsonBuilder ( ) . startObject ( ) . field ( <str> , dateInMillis ) . endObject ( ) ; index ( document ) ; QueryBuilder query = QueryBuilders . rangeQuery ( <str> ) . from ( <str> ) . to ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( index ) . setQuery ( query ) . get ( ) ; assertHitCount ( response , <int> ) ; } public void testThatPre2xFailedStringParsingLeadsToEpochParsing ( ) throws Exception { index = createPre2xIndexAndMapping ( ) ; long dateInMillis = <int> * <int> ; String date = String . valueOf ( dateInMillis ) ; XContentBuilder document = jsonBuilder ( ) . startObject ( ) . field ( <str> , date ) . endObject ( ) ; index ( document ) ; QueryBuilder query = QueryBuilders . rangeQuery ( <str> ) . from ( <str> ) . to ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( index ) . setQuery ( query ) . get ( ) ; assertHitCount ( response , <int> ) ; } public void testThatPre2xSupportsUnixTimestampsInAnyDateFormat ( ) throws Exception { long dateInMillis = <int> * <int> ; List < String > dateFormats = Arrays . asList ( <str> , <str> , <str> , <str> , <str> , <str> ) ; for ( String format : dateFormats ) { XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , format ) . endObject ( ) . endObject ( ) . endObject ( ) ; index = createIndex ( randomVersionBelow2x , mapping ) ; XContentBuilder document = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , String . valueOf ( dateInMillis ) ) . endObject ( ) ; index ( document ) ; document = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , dateInMillis ) . endObject ( ) ; index ( document ) ; client ( ) . admin ( ) . indices ( ) . prepareDelete ( index ) . get ( ) ; } } public void testThatPre2xIndicesNumbersAreTreatedAsTimestamps ( ) throws Exception { long date = <int> ; XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ; index = createIndex ( randomVersionBelow2x , mapping ) ; XContentBuilder document = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , randomBoolean ( ) ? String . valueOf ( date ) : date ) . endObject ( ) ; index ( document ) ; QueryBuilder query = QueryBuilders . rangeQuery ( <str> ) . from ( <str> ) . to ( <str> ) . format ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( index ) . setQuery ( query ) . get ( ) ; assertNoSearchHits ( response ) ; QueryBuilder timestampQuery = QueryBuilders . rangeQuery ( <str> ) . from ( <int> ) . to ( <int> ) ; assertHitCount ( client ( ) . prepareSearch ( index ) . setQuery ( timestampQuery ) . get ( ) , <int> ) ; QueryBuilder regularTimeQuery = QueryBuilders . rangeQuery ( <str> ) . from ( <str> ) . to ( <str> ) . format ( <str> ) ; assertHitCount ( client ( ) . prepareSearch ( index ) . setQuery ( regularTimeQuery ) . get ( ) , <int> ) ; } public void testThatPost2xIndicesNumbersAreTreatedAsStrings ( ) throws Exception { long date = <int> ; XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ; index = createIndex ( Version . CURRENT , mapping ) ; XContentBuilder document = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , String . valueOf ( date ) ) . endObject ( ) ; index ( document ) ; document = XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , date ) . endObject ( ) ; index ( document ) ; QueryBuilder query = QueryBuilders . rangeQuery ( <str> ) . from ( <str> ) . to ( <str> ) . format ( <str> ) ; SearchResponse response = client ( ) . prepareSearch ( index ) . setQuery ( query ) . get ( ) ; assertHitCount ( response , <int> ) ; } public void testDynamicDateDetectionIn2xDoesNotSupportEpochs ( ) throws Exception { try { XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startArray ( <str> ) . value ( <str> ) . value ( <str> ) . endArray ( ) . endObject ( ) ; createIndex ( Version . CURRENT , mapping ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> + type + <str> ) ) ; assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } private String createPre2xIndexAndMapping ( ) throws Exception { return createIndexAndMapping ( randomVersionBelow2x ) ; } private String createIndexAndMapping ( Version version ) throws Exception { XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ; return createIndex ( version , mapping ) ; } private String createIndex ( Version version , XContentBuilder mapping ) { Settings settings = settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; createIndex ( index , settings , type , mapping ) ; ensureGreen ( index ) ; return index ; } private void index ( XContentBuilder document ) { IndexResponse indexResponse = client ( ) . prepareIndex ( index , type ) . setSource ( document ) . setRefresh ( true ) . get ( ) ; assertThat ( indexResponse . isCreated ( ) , is ( true ) ) ; } } 

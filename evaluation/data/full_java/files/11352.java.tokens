package org . gradle . api . internal . artifacts . dependencies ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . artifacts . FileCollectionDependency ; import org . gradle . api . artifacts . SelfResolvingDependency ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . artifacts . DependencyResolveContext ; import org . gradle . api . internal . file . FileCollectionInternal ; import org . gradle . api . internal . file . FileSystemSubset ; import org . gradle . api . tasks . TaskDependency ; import java . io . File ; import java . util . Set ; public class DefaultSelfResolvingDependency extends AbstractDependency implements SelfResolvingDependency , FileCollectionDependency { private final FileCollectionInternal source ; public DefaultSelfResolvingDependency ( FileCollectionInternal source ) { this . source = source ; } public FileCollection getSource ( ) { return source ; } public boolean contentEquals ( Dependency dependency ) { if ( ! ( dependency instanceof DefaultSelfResolvingDependency ) ) { return false ; } DefaultSelfResolvingDependency selfResolvingDependency = ( DefaultSelfResolvingDependency ) dependency ; return source . equals ( selfResolvingDependency . source ) ; } public SelfResolvingDependency copy ( ) { return new DefaultSelfResolvingDependency ( source ) ; } public String getGroup ( ) { return null ; } public String getName ( ) { return <str> ; } public String getVersion ( ) { return null ; } @Override public void resolve ( DependencyResolveContext context ) { context . add ( source ) ; } public Set < File > resolve ( ) { return source . getFiles ( ) ; } public Set < File > resolve ( boolean transitive ) { return source . getFiles ( ) ; } public TaskDependency getBuildDependencies ( ) { return source . getBuildDependencies ( ) ; } @Override public void registerWatchPoints ( FileSystemSubset . Builder builder ) { source . registerWatchPoints ( builder ) ; } } 

package org . apache . cassandra . streaming . management ; import java . util . HashMap ; import java . util . Map ; import java . util . UUID ; import javax . management . openmbean . * ; import com . google . common . base . Throwables ; import org . apache . cassandra . streaming . StreamSummary ; public class StreamSummaryCompositeData { private static final String [ ] ITEM_NAMES = new String [ ] { <str> , <str> , <str> } ; private static final String [ ] ITEM_DESCS = new String [ ] { <str> , <str> , <str> } ; private static final OpenType < ? > [ ] ITEM_TYPES = new OpenType [ ] { SimpleType . STRING , SimpleType . INTEGER , SimpleType . LONG } ; public static final CompositeType COMPOSITE_TYPE ; static { try { COMPOSITE_TYPE = new CompositeType ( StreamSummary . class . getName ( ) , <str> , ITEM_NAMES , ITEM_DESCS , ITEM_TYPES ) ; } catch ( OpenDataException e ) { throw Throwables . propagate ( e ) ; } } public static CompositeData toCompositeData ( StreamSummary streamSummary ) { Map < String , Object > valueMap = new HashMap < > ( ) ; valueMap . put ( ITEM_NAMES [ <int> ] , streamSummary . cfId . toString ( ) ) ; valueMap . put ( ITEM_NAMES [ <int> ] , streamSummary . files ) ; valueMap . put ( ITEM_NAMES [ <int> ] , streamSummary . totalSize ) ; try { return new CompositeDataSupport ( COMPOSITE_TYPE , valueMap ) ; } catch ( OpenDataException e ) { throw Throwables . propagate ( e ) ; } } public static StreamSummary fromCompositeData ( CompositeData cd ) { Object [ ] values = cd . getAll ( ITEM_NAMES ) ; return new StreamSummary ( UUID . fromString ( ( String ) values [ <int> ] ) , ( int ) values [ <int> ] , ( long ) values [ <int> ] ) ; } } 

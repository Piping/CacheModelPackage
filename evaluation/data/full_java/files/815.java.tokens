package org . apache . cassandra . net ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; public class AsyncOneResponse < T > implements IAsyncCallback < T > { private T result ; private boolean done ; private final long start = System . nanoTime ( ) ; public T get ( long timeout , TimeUnit tu ) throws TimeoutException { timeout = tu . toNanos ( timeout ) ; boolean interrupted = false ; try { synchronized ( this ) { while ( ! done ) { try { long overallTimeout = timeout - ( System . nanoTime ( ) - start ) ; if ( overallTimeout < = <int> ) { throw new TimeoutException ( <str> ) ; } TimeUnit . NANOSECONDS . timedWait ( this , overallTimeout ) ; } catch ( InterruptedException e ) { interrupted = true ; } } } } finally { if ( interrupted ) { Thread . currentThread ( ) . interrupt ( ) ; } } return result ; } public synchronized void response ( MessageIn < T > response ) { if ( ! done ) { result = response . payload ; done = true ; this . notifyAll ( ) ; } } public boolean isLatencyForSnitch ( ) { return false ; } } 

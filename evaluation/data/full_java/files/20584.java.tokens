package com . nostra13 . universalimageloader . core . assist ; import android . app . Activity ; import android . content . Context ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import com . nostra13 . universalimageloader . core . imageaware . ImageAware ; import com . nostra13 . universalimageloader . core . imageaware . ImageViewAware ; import com . nostra13 . universalimageloader . utils . ImageSizeUtils ; import org . assertj . core . api . Assertions ; import org . junit . Before ; import org . junit . Test ; import org . junit . runner . RunWith ; import org . robolectric . RobolectricTestRunner ; @RunWith ( RobolectricTestRunner . class ) public class ImageSizeTest { private Activity mActivity ; private ImageView mView ; private ImageAware mImageAware ; @Before public void setUp ( ) throws Exception { mActivity = new Activity ( ) ; mView = new TestImageView ( mActivity ) ; mView . setLayoutParams ( new FrameLayout . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , ViewGroup . LayoutParams . MATCH_PARENT ) ) ; mView . measure ( View . MeasureSpec . makeMeasureSpec ( <int> , View . MeasureSpec . EXACTLY ) , View . MeasureSpec . makeMeasureSpec ( <int> , View . MeasureSpec . EXACTLY ) ) ; mImageAware = new ImageViewAware ( mView ) ; } @Test public void testGetImageSizeScaleTo_useImageActualSize ( ) throws Exception { mView . measure ( View . MeasureSpec . makeMeasureSpec ( <int> , View . MeasureSpec . EXACTLY ) , View . MeasureSpec . makeMeasureSpec ( <int> , View . MeasureSpec . EXACTLY ) ) ; mView . layout ( <int> , <int> , <int> , <int> ) ; ImageSize expected = new ImageSize ( <int> , <int> ) ; ImageSize result = ImageSizeUtils . defineTargetSizeForView ( mImageAware , new ImageSize ( <int> , <int> ) ) ; Assertions . assertThat ( result ) . isNotNull ( ) ; Assertions . assertThat ( result . getWidth ( ) ) . isEqualTo ( expected . getWidth ( ) ) ; Assertions . assertThat ( result . getHeight ( ) ) . isEqualTo ( expected . getHeight ( ) ) ; } @Test public void testGetImageSizeScaleTo_dontUseImageActualSizeWithWrapContent ( ) throws Exception { mView . setLayoutParams ( new FrameLayout . LayoutParams ( ViewGroup . LayoutParams . WRAP_CONTENT , ViewGroup . LayoutParams . WRAP_CONTENT ) ) ; mView . measure ( View . MeasureSpec . makeMeasureSpec ( <int> , View . MeasureSpec . EXACTLY ) , View . MeasureSpec . makeMeasureSpec ( <int> , View . MeasureSpec . EXACTLY ) ) ; mView . layout ( <int> , <int> , <int> , <int> ) ; ImageSize expected = new ImageSize ( <int> , <int> ) ; ImageSize result = ImageSizeUtils . defineTargetSizeForView ( mImageAware , new ImageSize ( <int> , <int> ) ) ; Assertions . assertThat ( result ) . isNotNull ( ) . isEqualsToByComparingFields ( expected ) ; } @Test public void testGetImageSizeScaleTo_useImageLayoutParams ( ) throws Exception { mView . setLayoutParams ( new FrameLayout . LayoutParams ( <int> , <int> ) ) ; ImageSize expected = new ImageSize ( <int> , <int> ) ; ImageSize result = ImageSizeUtils . defineTargetSizeForView ( mImageAware , new ImageSize ( <int> , <int> ) ) ; Assertions . assertThat ( result ) . isNotNull ( ) . isEqualsToByComparingFields ( expected ) ; } @Test public void testGetImageSizeScaleTo_useImageConfigMaxSize ( ) throws Exception { ImageSize expected = new ImageSize ( <int> , <int> ) ; ImageSize result = ImageSizeUtils . defineTargetSizeForView ( mImageAware , new ImageSize ( <int> , <int> ) ) ; Assertions . assertThat ( result ) . isNotNull ( ) . isEqualsToByComparingFields ( expected ) ; } @Test public void testComputeImageSampleSize_fitInside ( ) throws Exception { final ViewScaleType scaleType = ViewScaleType . FIT_INSIDE ; int result ; ImageSize srcSize = new ImageSize ( <int> , <int> ) ; ImageSize targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; srcSize = new ImageSize ( <int> , <int> ) ; targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; srcSize = new ImageSize ( <int> , <int> ) ; targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; srcSize = new ImageSize ( <int> , <int> ) ; targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; srcSize = new ImageSize ( <int> , <int> ) ; targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; } @Test public void testComputeImageSampleSize_centerCrop ( ) throws Exception { final ViewScaleType scaleType = ViewScaleType . CROP ; int result ; ImageSize srcSize = new ImageSize ( <int> , <int> ) ; ImageSize targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; srcSize = new ImageSize ( <int> , <int> ) ; targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; srcSize = new ImageSize ( <int> , <int> ) ; targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; srcSize = new ImageSize ( <int> , <int> ) ; targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; srcSize = new ImageSize ( <int> , <int> ) ; targetSize = new ImageSize ( <int> , <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , false ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; result = ImageSizeUtils . computeImageSampleSize ( srcSize , targetSize , scaleType , true ) ; Assertions . assertThat ( result ) . isEqualTo ( <int> ) ; } private class TestImageView extends ImageView { TestImageView ( Context activity ) { super ( activity ) ; } @Override public void onLayout ( boolean changed , int left , int top , int right , int bottom ) { super . onLayout ( changed , left , top , right , bottom ) ; } } } 

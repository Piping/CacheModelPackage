package org . gradle . initialization ; import org . gradle . api . GradleScriptException ; import org . gradle . api . internal . ExceptionAnalyser ; import org . gradle . api . tasks . TaskExecutionException ; import org . gradle . groovy . scripts . Script ; import org . gradle . groovy . scripts . ScriptCompilationException ; import org . gradle . groovy . scripts . ScriptExecutionListener ; import org . gradle . groovy . scripts . ScriptSource ; import org . gradle . internal . event . ListenerManager ; import org . gradle . internal . exceptions . Contextual ; import org . gradle . internal . exceptions . LocationAwareException ; import java . util . HashMap ; import java . util . Map ; public class DefaultExceptionAnalyser implements ExceptionAnalyser , ScriptExecutionListener { private final Map < String , ScriptSource > scripts = new HashMap < String , ScriptSource > ( ) ; public DefaultExceptionAnalyser ( ListenerManager listenerManager ) { listenerManager . addListener ( this ) ; } @Override public void scriptClassLoaded ( ScriptSource source , Class < ? extends Script > scriptClass ) { scripts . put ( source . getFileName ( ) , source ) ; } public Throwable transform ( Throwable exception ) { Throwable actualException = findDeepestRootException ( exception ) ; if ( actualException instanceof LocationAwareException ) { return actualException ; } ScriptSource source = null ; Integer lineNumber = null ; if ( actualException instanceof ScriptCompilationException ) { ScriptCompilationException scriptCompilationException = ( ScriptCompilationException ) actualException ; source = scriptCompilationException . getScriptSource ( ) ; lineNumber = scriptCompilationException . getLineNumber ( ) ; } if ( source = = null ) { for ( Throwable currentException = actualException ; currentException ! = null ; currentException = currentException . getCause ( ) ) { for ( StackTraceElement element : currentException . getStackTrace ( ) ) { if ( element . getLineNumber ( ) > = <int> & & scripts . containsKey ( element . getFileName ( ) ) ) { source = scripts . get ( element . getFileName ( ) ) ; lineNumber = element . getLineNumber ( ) ; break ; } } } } return new LocationAwareException ( actualException , source , lineNumber ) ; } private Throwable findDeepestRootException ( Throwable exception ) { Throwable locationAware = null ; Throwable result = null ; Throwable contextMatch = null ; for ( Throwable current = exception ; current ! = null ; current = current . getCause ( ) ) { if ( current instanceof LocationAwareException ) { locationAware = current ; } else if ( current instanceof GradleScriptException | | current instanceof TaskExecutionException ) { result = current ; } else if ( contextMatch = = null & & current . getClass ( ) . getAnnotation ( Contextual . class ) ! = null ) { contextMatch = current ; } } if ( locationAware ! = null ) { return locationAware ; } else if ( result ! = null ) { return result ; } else if ( contextMatch ! = null ) { return contextMatch ; } else { return exception ; } } } 

package org . gradle . plugin . use . resolve . internal ; import org . gradle . api . Plugin ; import org . gradle . api . internal . plugins . DefaultPotentialPluginWithId ; import org . gradle . api . internal . plugins . PluginRegistry ; import org . gradle . plugin . internal . PluginId ; import org . gradle . plugin . use . internal . InvalidPluginRequestException ; import org . gradle . plugin . use . internal . PluginRequest ; public class NoopPluginResolver implements PluginResolver { public static final PluginId NOOP_PLUGIN_ID = PluginId . of ( <str> ) ; private final PluginRegistry pluginRegistry ; public NoopPluginResolver ( PluginRegistry pluginRegistry ) { this . pluginRegistry = pluginRegistry ; } public void resolve ( PluginRequest pluginRequest , PluginResolutionResult result ) throws InvalidPluginRequestException { if ( pluginRequest . getId ( ) . equals ( NOOP_PLUGIN_ID ) ) { result . found ( <str> , new SimplePluginResolution ( DefaultPotentialPluginWithId . of ( NOOP_PLUGIN_ID , pluginRegistry . inspect ( NoopPlugin . class ) ) ) ) ; } } public static class NoopPlugin implements Plugin < Object > { public void apply ( Object target ) { } } } 

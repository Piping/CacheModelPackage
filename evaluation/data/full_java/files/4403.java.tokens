package org . eclipse . debug . internal . ui . viewers . model ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IColumnPresentationFactory ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementContentProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementEditor ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementLabelProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementMementoProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelProxyFactory ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelProxyFactory2 ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelSelectionPolicy ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelSelectionPolicyFactory ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IViewerInputProvider ; import org . eclipse . debug . internal . ui . views . launch . DebugElementAdapterFactory ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . IStructuredSelection ; public class ViewerAdapterService { public static IElementContentProvider getContentProvider ( Object element ) { return ( IElementContentProvider ) getAdapter ( element , IElementContentProvider . class ) ; } public static IElementLabelProvider getLabelProvider ( Object element ) { IElementLabelProvider lp = ( IElementLabelProvider ) getAdapter ( element , IElementLabelProvider . class ) ; if ( lp = = null & & element instanceof String ) { return new DebugElementAdapterFactory ( ) . getAdapter ( element , IElementLabelProvider . class ) ; } return lp ; } public static IColumnPresentationFactory getColumnPresentationFactory ( Object element ) { return ( IColumnPresentationFactory ) getAdapter ( element , IColumnPresentationFactory . class ) ; } public static IModelProxyFactory getModelProxyFactory ( Object element ) { return ( IModelProxyFactory ) getAdapter ( element , IModelProxyFactory . class ) ; } public static IModelProxyFactory2 getModelProxyFactory2 ( Object element ) { return ( IModelProxyFactory2 ) getAdapter ( element , IModelProxyFactory2 . class ) ; } public static IElementMementoProvider getMementoProvider ( Object element ) { return ( IElementMementoProvider ) getAdapter ( element , IElementMementoProvider . class ) ; } public static IElementEditor getElementEditor ( Object element ) { return ( IElementEditor ) getAdapter ( element , IElementEditor . class ) ; } public static IModelSelectionPolicy getSelectionPolicy ( ISelection selection , IPresentationContext context ) { if ( selection instanceof IStructuredSelection ) { IStructuredSelection ss = ( IStructuredSelection ) selection ; Object element = ss . getFirstElement ( ) ; IModelSelectionPolicyFactory factory = ( IModelSelectionPolicyFactory ) getAdapter ( element , IModelSelectionPolicyFactory . class ) ; if ( factory ! = null ) { return factory . createModelSelectionPolicyAdapter ( element , context ) ; } } return null ; } public static IViewerInputProvider getInputProvider ( Object element ) { return ( IViewerInputProvider ) getAdapter ( element , IViewerInputProvider . class ) ; } private static Object getAdapter ( Object element , Class < ? > type ) { return DebugPlugin . getAdapter ( element , type ) ; } } 

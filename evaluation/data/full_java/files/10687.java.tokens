package org . gradle . build . docs ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . stream . StreamResult ; import javax . xml . transform . stream . StreamSource ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; public class XslTransformer { public static void main ( String [ ] args ) throws TransformerException , IOException { if ( args . length < <int> | | args . length > <int> ) { throw new IllegalArgumentException ( <str> ) ; } File stylesheet = new File ( args [ <int> ] ) ; File source = new File ( args [ <int> ] ) ; File dest = new File ( args [ <int> ] ) ; String destDir = <str> ; if ( args . length > <int> ) { destDir = args [ <int> ] ; } System . out . format ( <str> , stylesheet ) ; System . out . format ( <str> , source ) ; System . out . format ( <str> , dest ) ; System . out . format ( <str> , destDir ) ; TransformerFactory factory = TransformerFactory . newInstance ( ) ; Transformer transformer = factory . newTransformer ( new StreamSource ( stylesheet ) ) ; System . out . format ( <str> , transformer , transformer . getClass ( ) . getName ( ) ) ; if ( destDir . length ( ) > <int> ) { transformer . setParameter ( <str> , destDir + <str> ) ; } FileOutputStream outstr = new FileOutputStream ( dest ) ; try { transformer . transform ( new StreamSource ( source ) , new StreamResult ( outstr ) ) ; } finally { outstr . close ( ) ; } } } 

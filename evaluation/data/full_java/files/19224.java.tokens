package io . netty . handler . codec . spdy ; import io . netty . util . internal . StringUtil ; public class DefaultSpdySynStreamFrame extends DefaultSpdyHeadersFrame implements SpdySynStreamFrame { private int associatedStreamId ; private byte priority ; private boolean unidirectional ; public DefaultSpdySynStreamFrame ( int streamId , int associatedStreamId , byte priority ) { this ( streamId , associatedStreamId , priority , true ) ; } public DefaultSpdySynStreamFrame ( int streamId , int associatedStreamId , byte priority , boolean validateHeaders ) { super ( streamId , validateHeaders ) ; setAssociatedStreamId ( associatedStreamId ) ; setPriority ( priority ) ; } @Override public SpdySynStreamFrame setStreamId ( int streamId ) { super . setStreamId ( streamId ) ; return this ; } @Override public SpdySynStreamFrame setLast ( boolean last ) { super . setLast ( last ) ; return this ; } @Override public SpdySynStreamFrame setInvalid ( ) { super . setInvalid ( ) ; return this ; } @Override public int associatedStreamId ( ) { return associatedStreamId ; } @Override public SpdySynStreamFrame setAssociatedStreamId ( int associatedStreamId ) { if ( associatedStreamId < <int> ) { throw new IllegalArgumentException ( <str> + associatedStreamId ) ; } this . associatedStreamId = associatedStreamId ; return this ; } @Override public byte priority ( ) { return priority ; } @Override public SpdySynStreamFrame setPriority ( byte priority ) { if ( priority < <int> | | priority > <int> ) { throw new IllegalArgumentException ( <str> + priority ) ; } this . priority = priority ; return this ; } @Override public boolean isUnidirectional ( ) { return unidirectional ; } @Override public SpdySynStreamFrame setUnidirectional ( boolean unidirectional ) { this . unidirectional = unidirectional ; return this ; } @Override public String toString ( ) { StringBuilder buf = new StringBuilder ( ) . append ( StringUtil . simpleClassName ( this ) ) . append ( <str> ) . append ( isLast ( ) ) . append ( <str> ) . append ( isUnidirectional ( ) ) . append ( <str> ) . append ( StringUtil . NEWLINE ) . append ( <str> ) . append ( streamId ( ) ) . append ( StringUtil . NEWLINE ) ; if ( associatedStreamId ! = <int> ) { buf . append ( <str> ) . append ( associatedStreamId ( ) ) . append ( StringUtil . NEWLINE ) ; } buf . append ( <str> ) . append ( priority ( ) ) . append ( StringUtil . NEWLINE ) . append ( <str> ) . append ( StringUtil . NEWLINE ) ; appendHeaders ( buf ) ; buf . setLength ( buf . length ( ) - StringUtil . NEWLINE . length ( ) ) ; return buf . toString ( ) ; } } 

package org . gradle . initialization ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . TestFiles ; import org . gradle . util . Path ; import org . junit . Test ; import java . io . File ; import static org . hamcrest . Matchers . nullValue ; import static org . hamcrest . Matchers . sameInstance ; import static org . junit . Assert . assertSame ; import static org . junit . Assert . assertThat ; public class DefaultProjectDescriptorRegistryTest { private static final File TEST_DIR = new File ( <str> ) ; private static final FileResolver FILE_RESOLVER = TestFiles . resolver ( TEST_DIR . getAbsoluteFile ( ) ) ; private final DefaultProjectDescriptorRegistry registry = new DefaultProjectDescriptorRegistry ( ) ; @Test public void addProjectDescriptor ( ) { DefaultProjectDescriptor rootProject = new DefaultProjectDescriptor ( null , <str> , TEST_DIR , registry , FILE_RESOLVER ) ; registry . addProject ( rootProject ) ; assertSame ( rootProject , registry . getProject ( rootProject . getPath ( ) ) ) ; assertSame ( rootProject , registry . getProject ( rootProject . getProjectDir ( ) ) ) ; } @Test public void changeProjectDescriptorPath ( ) { DefaultProjectDescriptor project = new DefaultProjectDescriptor ( null , <str> , TEST_DIR , registry , FILE_RESOLVER ) ; registry . addProject ( project ) ; registry . changeDescriptorPath ( Path . path ( <str> ) , Path . path ( <str> ) ) ; assertThat ( registry . getProject ( <str> ) , nullValue ( ) ) ; assertThat ( registry . getProject ( <str> ) , sameInstance ( project ) ) ; } } 

package org . eclipse . debug . internal . ui ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . viewers . DoubleClickEvent ; import org . eclipse . jface . viewers . IDoubleClickListener ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . jface . viewers . ISelectionChangedListener ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . jface . viewers . SelectionChangedEvent ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . jface . viewers . TableViewer ; import org . eclipse . swt . SWT ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Shell ; public abstract class AbstractDebugListSelectionDialog extends AbstractDebugSelectionDialog { protected TableViewer fListViewer ; public AbstractDebugListSelectionDialog ( Shell parentShell ) { super ( parentShell ) ; setShellStyle ( getShellStyle ( ) | SWT . RESIZE ) ; } @Override protected StructuredViewer createViewer ( Composite parent ) { fListViewer = new TableViewer ( parent , SWT . SINGLE | SWT . H_SCROLL | SWT . V_SCROLL | SWT . BORDER ) ; GridData gd = new GridData ( GridData . FILL_BOTH ) ; gd . heightHint = <int> ; fListViewer . getTable ( ) . setLayoutData ( gd ) ; return fListViewer ; } @Override protected void addViewerListeners ( StructuredViewer viewer ) { viewer . addSelectionChangedListener ( new ISelectionChangedListener ( ) { @Override public void selectionChanged ( SelectionChangedEvent event ) { getButton ( IDialogConstants . OK_ID ) . setEnabled ( isValid ( ) ) ; } } ) ; viewer . addDoubleClickListener ( new IDoubleClickListener ( ) { @Override public void doubleClick ( DoubleClickEvent event ) { if ( isValid ( ) ) { okPressed ( ) ; } } } ) ; } @Override protected boolean isValid ( ) { if ( fListViewer ! = null ) { ISelection sel = fListViewer . getSelection ( ) ; if ( sel instanceof IStructuredSelection ) { return ( ( IStructuredSelection ) sel ) . size ( ) = = <int> ; } } return false ; } @Override protected void okPressed ( ) { ISelection selection = fViewer . getSelection ( ) ; if ( selection instanceof IStructuredSelection ) { setResult ( ( ( IStructuredSelection ) selection ) . toList ( ) ) ; } super . okPressed ( ) ; } } 

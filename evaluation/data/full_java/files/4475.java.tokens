package org . eclipse . debug . internal . ui . viewers . update ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IExpression ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ModelDelta ; import org . eclipse . debug . internal . ui . viewers . provisional . AbstractModelProxy ; public class ExpressionEventHandler extends DebugEventHandler { public ExpressionEventHandler ( AbstractModelProxy proxy ) { super ( proxy ) ; } @Override protected boolean handlesEvent ( DebugEvent event ) { return event . getKind ( ) = = DebugEvent . CHANGE ; } @Override protected void handleChange ( DebugEvent event ) { ModelDelta delta = new ModelDelta ( DebugPlugin . getDefault ( ) . getExpressionManager ( ) , IModelDelta . NO_CHANGE ) ; IExpression expression = null ; if ( event . getSource ( ) instanceof IExpression ) { expression = ( IExpression ) event . getSource ( ) ; int flags = IModelDelta . NO_CHANGE ; if ( ( event . getDetail ( ) & DebugEvent . STATE ) ! = <int> ) { flags = flags | IModelDelta . STATE ; } if ( ( event . getDetail ( ) & DebugEvent . CONTENT ) ! = <int> ) { flags = flags | IModelDelta . CONTENT ; } delta . addNode ( expression , flags ) ; fireDelta ( delta ) ; } if ( event . getSource ( ) instanceof IVariable ) { IVariable variable = ( IVariable ) event . getSource ( ) ; int flags = IModelDelta . NO_CHANGE ; if ( event . getDetail ( ) = = DebugEvent . CONTENT ) { flags = flags | IModelDelta . CONTENT ; } delta . addNode ( variable , flags ) ; fireDelta ( delta ) ; } } @Override protected void refreshRoot ( DebugEvent event ) { ModelDelta delta = new ModelDelta ( DebugPlugin . getDefault ( ) . getExpressionManager ( ) , IModelDelta . CONTENT ) ; fireDelta ( delta ) ; } } 

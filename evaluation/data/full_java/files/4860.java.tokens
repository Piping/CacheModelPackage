package org . eclipse . ui . externaltools . internal . ui ; import org . eclipse . jface . preference . PreferencePage ; import org . eclipse . swt . SWT ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . ui . IWorkbench ; import org . eclipse . ui . IWorkbenchPreferencePage ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . externaltools . internal . model . ExternalToolsPlugin ; import org . eclipse . ui . externaltools . internal . model . IExternalToolsHelpContextIds ; import org . eclipse . ui . externaltools . internal . model . IPreferenceConstants ; public class ExternalToolsPreferencePage extends PreferencePage implements IWorkbenchPreferencePage { private Button promptForToolMigrationButton ; private Button promptForProjectMigrationButton ; public ExternalToolsPreferencePage ( ) { setPreferenceStore ( ExternalToolsPlugin . getDefault ( ) . getPreferenceStore ( ) ) ; setDescription ( ExternalToolsUIMessages . ExternalToolsPreferencePage_External_tool_project_builders_migration_2 ) ; } @Override protected Control createContents ( Composite parent ) { PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( parent , IExternalToolsHelpContextIds . EXTERNAL_TOOLS_PREFERENCE_PAGE ) ; Composite composite = new Composite ( parent , SWT . NULL ) ; GridLayout layout = new GridLayout ( ) ; layout . marginHeight = <int> ; layout . marginWidth = <int> ; composite . setLayout ( layout ) ; composite . setFont ( parent . getFont ( ) ) ; promptForToolMigrationButton = createCheckButton ( composite , ExternalToolsUIMessages . ExternalToolsPreferencePage_Prompt_before_migrating_3 , IPreferenceConstants . PROMPT_FOR_TOOL_MIGRATION ) ; promptForProjectMigrationButton = createCheckButton ( composite , ExternalToolsUIMessages . ExternalToolsPreferencePage_1 , IPreferenceConstants . PROMPT_FOR_PROJECT_MIGRATION ) ; applyDialogFont ( composite ) ; return composite ; } private Button createCheckButton ( Composite parent , String label , String preferenceKey ) { Button button = new Button ( parent , SWT . CHECK | SWT . LEFT ) ; button . setLayoutData ( new GridData ( GridData . HORIZONTAL_ALIGN_BEGINNING ) ) ; button . setFont ( parent . getFont ( ) ) ; button . setText ( label ) ; button . setSelection ( getPreferenceStore ( ) . getBoolean ( preferenceKey ) ) ; return button ; } @Override public void init ( IWorkbench workbench ) { } @Override public boolean performOk ( ) { getPreferenceStore ( ) . setValue ( IPreferenceConstants . PROMPT_FOR_TOOL_MIGRATION , promptForToolMigrationButton . getSelection ( ) ) ; getPreferenceStore ( ) . setValue ( IPreferenceConstants . PROMPT_FOR_PROJECT_MIGRATION , promptForProjectMigrationButton . getSelection ( ) ) ; return super . performOk ( ) ; } @Override protected void performDefaults ( ) { promptForToolMigrationButton . setSelection ( getPreferenceStore ( ) . getDefaultBoolean ( IPreferenceConstants . PROMPT_FOR_TOOL_MIGRATION ) ) ; promptForProjectMigrationButton . setSelection ( getPreferenceStore ( ) . getDefaultBoolean ( IPreferenceConstants . PROMPT_FOR_PROJECT_MIGRATION ) ) ; super . performDefaults ( ) ; } } 

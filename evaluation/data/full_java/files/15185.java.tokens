package org . gradle . play . internal . twirl ; import org . gradle . scala . internal . reflect . ScalaMethod ; import org . gradle . scala . internal . reflect . ScalaReflectionUtil ; import java . io . File ; import java . lang . reflect . InvocationTargetException ; import java . util . Arrays ; class TwirlCompilerAdapterV22X implements VersionedTwirlCompilerAdapter { private static final Iterable < String > SHARED_PACKAGES = Arrays . asList ( <str> ) ; private static final String DEFAULT_JAVA_IMPORTS = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; private static final String DEFAULT_SCALA_IMPORTS = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; private final String twirlVersion ; private final String scalaVersion ; public TwirlCompilerAdapterV22X ( String twirlVersion , String scalaVersion ) { this . twirlVersion = twirlVersion ; this . scalaVersion = scalaVersion ; } public ScalaMethod getCompileMethod ( final ClassLoader cl ) throws ClassNotFoundException { return ScalaReflectionUtil . scalaMethod ( cl , <str> , <str> , File . class , File . class , File . class , String . class , String . class ) ; } @Override public Object [ ] createCompileParameters ( ClassLoader cl , File file , File sourceDirectory , File destinationDirectory , boolean javaProject ) throws ClassNotFoundException , NoSuchMethodException , InvocationTargetException , InstantiationException , IllegalAccessException { return new Object [ ] { file , sourceDirectory , destinationDirectory , <str> , javaProject ? DEFAULT_JAVA_IMPORTS : DEFAULT_SCALA_IMPORTS } ; } public Iterable < String > getClassLoaderPackages ( ) { return SHARED_PACKAGES ; } public String getDependencyNotation ( ) { return String . format ( <str> , scalaVersion , twirlVersion ) ; } } 

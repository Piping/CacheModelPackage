package org . eclipse . debug . examples . ui . midi . detailpanes ; import org . eclipse . debug . examples . core . midi . launcher . TempoControl ; import org . eclipse . debug . ui . IDetailPane ; import org . eclipse . jface . viewers . IStructuredSelection ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Slider ; import org . eclipse . ui . IWorkbenchPartSite ; public class TempoSliderDetailPane implements IDetailPane { private Slider fSlider ; private TempoControl fControl ; @Override public Control createControl ( Composite parent ) { fSlider = new Slider ( parent , SWT . HORIZONTAL ) ; fSlider . setMinimum ( <int> ) ; fSlider . setMaximum ( <int> ) ; fSlider . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { int selection = fSlider . getSelection ( ) ; if ( fControl ! = null ) { fControl . setValue ( Integer . toString ( selection ) ) ; } } } ) ; return fSlider ; } @Override public void display ( IStructuredSelection selection ) { fControl = null ; if ( selection = = null | | selection . isEmpty ( ) ) { fSlider . setEnabled ( false ) ; } else { fSlider . setEnabled ( true ) ; fControl = ( TempoControl ) selection . getFirstElement ( ) ; int bpm = ( int ) fControl . getSequencer ( ) . getTempoInBPM ( ) ; fSlider . setSelection ( bpm ) ; } } @Override public void dispose ( ) { } @Override public String getDescription ( ) { return <str> ; } @Override public String getID ( ) { return ControlDetailPaneFactory . ID_TEMPO_SLIDER ; } @Override public String getName ( ) { return <str> ; } @Override public void init ( IWorkbenchPartSite partSite ) { } @Override public boolean setFocus ( ) { fSlider . setFocus ( ) ; return true ; } } 

package org . jbox2d . pooling . normal ; import org . jbox2d . pooling . IOrderedStack ; public abstract class CircleStack < E > implements IOrderedStack < E > { private final Object [ ] pool ; private int index ; private final int size ; private final Object [ ] container ; public CircleStack ( int argStackSize , int argContainerSize ) { size = argStackSize ; pool = new Object [ argStackSize ] ; for ( int i = <int> ; i < argStackSize ; i + + ) { pool [ i ] = newInstance ( ) ; } index = <int> ; container = new Object [ argContainerSize ] ; } @SuppressWarnings ( <str> ) public final E pop ( ) { index + + ; if ( index > = size ) { index = <int> ; } return ( E ) pool [ index ] ; } @SuppressWarnings ( <str> ) public final E [ ] pop ( int argNum ) { assert ( argNum < = container . length ) : <str> ; if ( index + argNum < size ) { System . arraycopy ( pool , index , container , <int> , argNum ) ; index + = argNum ; } else { int overlap = ( index + argNum ) - size ; System . arraycopy ( pool , index , container , <int> , argNum - overlap ) ; System . arraycopy ( pool , <int> , container , argNum - overlap , overlap ) ; index = overlap ; } return ( E [ ] ) container ; } @Override public void push ( int argNum ) { } protected abstract E newInstance ( ) ; } 

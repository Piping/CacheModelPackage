package org . apache . cassandra . utils ; import java . io . Serializable ; import java . util . * ; import java . util . concurrent . * ; import org . apache . cassandra . concurrent . * ; import org . slf4j . * ; import com . clearspring . analytics . stream . * ; import com . clearspring . analytics . stream . cardinality . HyperLogLogPlus ; import com . google . common . annotations . VisibleForTesting ; public class TopKSampler < T > { private static final Logger logger = LoggerFactory . getLogger ( TopKSampler . class ) ; private volatile boolean enabled = false ; @VisibleForTesting static final ThreadPoolExecutor samplerExecutor = new JMXEnabledThreadPoolExecutor ( <int> , <int> , TimeUnit . SECONDS , new LinkedBlockingQueue < Runnable > ( ) , new NamedThreadFactory ( <str> ) , <str> ) ; private StreamSummary < T > summary ; @VisibleForTesting HyperLogLogPlus hll ; public synchronized void beginSampling ( int capacity ) { if ( ! enabled ) { summary = new StreamSummary < T > ( capacity ) ; hll = new HyperLogLogPlus ( <int> ) ; enabled = true ; } } public synchronized SamplerResult < T > finishSampling ( int count ) { List < Counter < T > > results = Collections . EMPTY_LIST ; long cardinality = <int> ; if ( enabled ) { enabled = false ; results = summary . topK ( count ) ; cardinality = hll . cardinality ( ) ; } return new SamplerResult < T > ( results , cardinality ) ; } public void addSample ( T item ) { addSample ( item , item . hashCode ( ) , <int> ) ; } public void addSample ( final T item , final long hash , final int value ) { if ( enabled ) { final Object lock = this ; samplerExecutor . execute ( new Runnable ( ) { public void run ( ) { synchronized ( lock ) { if ( enabled ) { try { summary . offer ( item , value ) ; hll . offerHashed ( hash ) ; } catch ( Exception e ) { logger . trace ( <str> , e ) ; } } } } } ) ; } } public static class SamplerResult < S > implements Serializable { public final List < Counter < S > > topK ; public final long cardinality ; public SamplerResult ( List < Counter < S > > topK , long cardinality ) { this . topK = topK ; this . cardinality = cardinality ; } } } 

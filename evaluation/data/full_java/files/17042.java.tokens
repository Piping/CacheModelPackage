package com . badlogic . gdx . physics . box2d ; import com . badlogic . gdx . math . Vector2 ; public class Manifold { long addr ; final ManifoldPoint [ ] points = new ManifoldPoint [ ] { new ManifoldPoint ( ) , new ManifoldPoint ( ) } ; final Vector2 localNormal = new Vector2 ( ) ; final Vector2 localPoint = new Vector2 ( ) ; final int [ ] tmpInt = new int [ <int> ] ; final float [ ] tmpFloat = new float [ <int> ] ; protected Manifold ( long addr ) { this . addr = addr ; } public ManifoldType getType ( ) { int type = jniGetType ( addr ) ; if ( type = = <int> ) return ManifoldType . Circle ; if ( type = = <int> ) return ManifoldType . FaceA ; if ( type = = <int> ) return ManifoldType . FaceB ; return ManifoldType . Circle ; } private native int jniGetType ( long addr ) ; public int getPointCount ( ) { return jniGetPointCount ( addr ) ; } private native int jniGetPointCount ( long addr ) ; public Vector2 getLocalNormal ( ) { jniGetLocalNormal ( addr , tmpFloat ) ; localNormal . set ( tmpFloat [ <int> ] , tmpFloat [ <int> ] ) ; return localNormal ; } private native void jniGetLocalNormal ( long addr , float [ ] values ) ; public Vector2 getLocalPoint ( ) { jniGetLocalPoint ( addr , tmpFloat ) ; localPoint . set ( tmpFloat [ <int> ] , tmpFloat [ <int> ] ) ; return localPoint ; } private native void jniGetLocalPoint ( long addr , float [ ] values ) ; public ManifoldPoint [ ] getPoints ( ) { int count = jniGetPointCount ( addr ) ; for ( int i = <int> ; i < count ; i + + ) { int contactID = jniGetPoint ( addr , tmpFloat , i ) ; ManifoldPoint point = points [ i ] ; point . contactID = contactID ; point . localPoint . set ( tmpFloat [ <int> ] , tmpFloat [ <int> ] ) ; point . normalImpulse = tmpFloat [ <int> ] ; point . tangentImpulse = tmpFloat [ <int> ] ; } return points ; } private native int jniGetPoint ( long addr , float [ ] values , int idx ) ; public class ManifoldPoint { public final Vector2 localPoint = new Vector2 ( ) ; public float normalImpulse ; public float tangentImpulse ; public int contactID = <int> ; public String toString ( ) { return <str> + contactID + <str> + localPoint + <str> + normalImpulse + <str> + tangentImpulse ; } } public enum ManifoldType { Circle , FaceA , FaceB } } 

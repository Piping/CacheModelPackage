package org . gradle . api . internal . artifacts . repositories ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . repositories . MavenArtifactRepository ; import org . gradle . api . artifacts . repositories . AuthenticationContainer ; import org . gradle . api . internal . artifacts . ivyservice . ivyresolve . parser . MetaDataParser ; import org . gradle . api . internal . artifacts . repositories . resolver . MavenLocalResolver ; import org . gradle . api . internal . artifacts . repositories . resolver . MavenResolver ; import org . gradle . api . internal . artifacts . repositories . transport . RepositoryTransportFactory ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . internal . component . external . model . DefaultMavenModuleResolveMetaData ; import org . gradle . internal . component . external . model . ModuleComponentArtifactMetaData ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . resource . local . FileStore ; import org . gradle . internal . resource . local . LocallyAvailableResourceFinder ; import java . net . URI ; public class DefaultMavenLocalArtifactRepository extends DefaultMavenArtifactRepository implements MavenArtifactRepository { public DefaultMavenLocalArtifactRepository ( FileResolver fileResolver , RepositoryTransportFactory transportFactory , LocallyAvailableResourceFinder < ModuleComponentArtifactMetaData > locallyAvailableResourceFinder , Instantiator instantiator , FileStore < ModuleComponentArtifactMetaData > artifactFileStore , MetaDataParser < DefaultMavenModuleResolveMetaData > pomParser , AuthenticationContainer authenticationContainer ) { super ( fileResolver , transportFactory , locallyAvailableResourceFinder , instantiator , artifactFileStore , pomParser , authenticationContainer ) ; } protected MavenResolver createRealResolver ( ) { URI rootUri = getUrl ( ) ; if ( rootUri = = null ) { throw new InvalidUserDataException ( <str> ) ; } MavenResolver resolver = new MavenLocalResolver ( getName ( ) , rootUri , getTransport ( rootUri . getScheme ( ) ) , getLocallyAvailableResourceFinder ( ) , getArtifactFileStore ( ) , getPomParser ( ) ) ; for ( URI repoUrl : getArtifactUrls ( ) ) { resolver . addArtifactLocation ( repoUrl ) ; } return resolver ; } } 

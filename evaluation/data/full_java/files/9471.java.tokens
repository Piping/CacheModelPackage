package com . google . common . net ; import static com . google . common . base . Preconditions . checkArgument ; import static com . google . common . base . Preconditions . checkNotNull ; import static com . google . common . base . Preconditions . checkState ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Ascii ; import com . google . common . base . CharMatcher ; import com . google . common . base . Joiner ; import com . google . common . base . Splitter ; import com . google . common . collect . ImmutableList ; import com . google . thirdparty . publicsuffix . PublicSuffixPatterns ; import java . util . List ; import javax . annotation . Nullable ; @Beta @GwtCompatible public final class InternetDomainName { private static final CharMatcher DOTS_MATCHER = CharMatcher . anyOf ( <str> ) ; private static final Splitter DOT_SPLITTER = Splitter . on ( <str> ) ; private static final Joiner DOT_JOINER = Joiner . on ( <str> ) ; private static final int NO_PUBLIC_SUFFIX_FOUND = - <int> ; private static final String DOT_REGEX = <str> ; private static final int MAX_PARTS = <int> ; private static final int MAX_LENGTH = <int> ; private static final int MAX_DOMAIN_PART_LENGTH = <int> ; private final String name ; private final ImmutableList < String > parts ; private final int publicSuffixIndex ; InternetDomainName ( String name ) { name = Ascii . toLowerCase ( DOTS_MATCHER . replaceFrom ( name , <str> ) ) ; if ( name . endsWith ( <str> ) ) { name = name . substring ( <int> , name . length ( ) - <int> ) ; } checkArgument ( name . length ( ) < = MAX_LENGTH , <str> , name ) ; this . name = name ; this . parts = ImmutableList . copyOf ( DOT_SPLITTER . split ( name ) ) ; checkArgument ( parts . size ( ) < = MAX_PARTS , <str> , name ) ; checkArgument ( validateSyntax ( parts ) , <str> , name ) ; this . publicSuffixIndex = findPublicSuffix ( ) ; } private int findPublicSuffix ( ) { final int partsSize = parts . size ( ) ; for ( int i = <int> ; i < partsSize ; i + + ) { String ancestorName = DOT_JOINER . join ( parts . subList ( i , partsSize ) ) ; if ( PublicSuffixPatterns . EXACT . containsKey ( ancestorName ) ) { return i ; } if ( PublicSuffixPatterns . EXCLUDED . containsKey ( ancestorName ) ) { return i + <int> ; } if ( matchesWildcardPublicSuffix ( ancestorName ) ) { return i ; } } return NO_PUBLIC_SUFFIX_FOUND ; } public static InternetDomainName from ( String domain ) { return new InternetDomainName ( checkNotNull ( domain ) ) ; } private static boolean validateSyntax ( List < String > parts ) { final int lastIndex = parts . size ( ) - <int> ; if ( ! validatePart ( parts . get ( lastIndex ) , true ) ) { return false ; } for ( int i = <int> ; i < lastIndex ; i + + ) { String part = parts . get ( i ) ; if ( ! validatePart ( part , false ) ) { return false ; } } return true ; } private static final CharMatcher DASH_MATCHER = CharMatcher . anyOf ( <str> ) ; private static final CharMatcher PART_CHAR_MATCHER = CharMatcher . JAVA_LETTER_OR_DIGIT . or ( DASH_MATCHER ) ; private static boolean validatePart ( String part , boolean isFinalPart ) { if ( part . length ( ) < <int> | | part . length ( ) > MAX_DOMAIN_PART_LENGTH ) { return false ; } String asciiChars = CharMatcher . ASCII . retainFrom ( part ) ; if ( ! PART_CHAR_MATCHER . matchesAllOf ( asciiChars ) ) { return false ; } if ( DASH_MATCHER . matches ( part . charAt ( <int> ) ) | | DASH_MATCHER . matches ( part . charAt ( part . length ( ) - <int> ) ) ) { return false ; } if ( isFinalPart & & CharMatcher . DIGIT . matches ( part . charAt ( <int> ) ) ) { return false ; } return true ; } public ImmutableList < String > parts ( ) { return parts ; } public boolean isPublicSuffix ( ) { return publicSuffixIndex = = <int> ; } public boolean hasPublicSuffix ( ) { return publicSuffixIndex ! = NO_PUBLIC_SUFFIX_FOUND ; } public InternetDomainName publicSuffix ( ) { return hasPublicSuffix ( ) ? ancestor ( publicSuffixIndex ) : null ; } public boolean isUnderPublicSuffix ( ) { return publicSuffixIndex > <int> ; } public boolean isTopPrivateDomain ( ) { return publicSuffixIndex = = <int> ; } public InternetDomainName topPrivateDomain ( ) { if ( isTopPrivateDomain ( ) ) { return this ; } checkState ( isUnderPublicSuffix ( ) , <str> , name ) ; return ancestor ( publicSuffixIndex - <int> ) ; } public boolean hasParent ( ) { return parts . size ( ) > <int> ; } public InternetDomainName parent ( ) { checkState ( hasParent ( ) , <str> , name ) ; return ancestor ( <int> ) ; } private InternetDomainName ancestor ( int levels ) { return from ( DOT_JOINER . join ( parts . subList ( levels , parts . size ( ) ) ) ) ; } public InternetDomainName child ( String leftParts ) { return from ( checkNotNull ( leftParts ) + <str> + name ) ; } public static boolean isValid ( String name ) { try { from ( name ) ; return true ; } catch ( IllegalArgumentException e ) { return false ; } } private static boolean matchesWildcardPublicSuffix ( String domain ) { final String [ ] pieces = domain . split ( DOT_REGEX , <int> ) ; return pieces . length = = <int> & & PublicSuffixPatterns . UNDER . containsKey ( pieces [ <int> ] ) ; } @Override public String toString ( ) { return name ; } @Override public boolean equals ( @Nullable Object object ) { if ( object = = this ) { return true ; } if ( object instanceof InternetDomainName ) { InternetDomainName that = ( InternetDomainName ) object ; return this . name . equals ( that . name ) ; } return false ; } @Override public int hashCode ( ) { return name . hashCode ( ) ; } } 

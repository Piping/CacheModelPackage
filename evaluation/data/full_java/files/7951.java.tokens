package org . elasticsearch . common . network ; import org . elasticsearch . test . ESTestCase ; import java . net . InetAddress ; public class NetworkUtilsTests extends ESTestCase { public void testSortKey ( ) throws Exception { InetAddress localhostv4 = InetAddress . getByName ( <str> ) ; InetAddress localhostv6 = InetAddress . getByName ( <str> ) ; assertTrue ( NetworkUtils . sortKey ( localhostv4 , false ) < NetworkUtils . sortKey ( localhostv6 , false ) ) ; assertTrue ( NetworkUtils . sortKey ( localhostv6 , true ) < NetworkUtils . sortKey ( localhostv4 , true ) ) ; } public void testSortKeySiteLocal ( ) throws Exception { InetAddress siteLocal = InetAddress . getByName ( <str> ) ; assert siteLocal . isSiteLocalAddress ( ) ; InetAddress ordinary = InetAddress . getByName ( <str> ) ; assertTrue ( NetworkUtils . sortKey ( ordinary , true ) < NetworkUtils . sortKey ( siteLocal , true ) ) ; assertTrue ( NetworkUtils . sortKey ( ordinary , false ) < NetworkUtils . sortKey ( siteLocal , false ) ) ; InetAddress siteLocal6 = InetAddress . getByName ( <str> ) ; assert siteLocal6 . isSiteLocalAddress ( ) ; InetAddress ordinary6 = InetAddress . getByName ( <str> ) ; assertTrue ( NetworkUtils . sortKey ( ordinary6 , true ) < NetworkUtils . sortKey ( siteLocal6 , true ) ) ; assertTrue ( NetworkUtils . sortKey ( ordinary6 , false ) < NetworkUtils . sortKey ( siteLocal6 , false ) ) ; } public void testSortKeyLinkLocal ( ) throws Exception { InetAddress linkLocal = InetAddress . getByName ( <str> ) ; assert linkLocal . isLinkLocalAddress ( ) ; InetAddress ordinary = InetAddress . getByName ( <str> ) ; assertTrue ( NetworkUtils . sortKey ( ordinary , true ) < NetworkUtils . sortKey ( linkLocal , true ) ) ; assertTrue ( NetworkUtils . sortKey ( ordinary , false ) < NetworkUtils . sortKey ( linkLocal , false ) ) ; } public void testFilter ( ) throws Exception { InetAddress addresses [ ] = { InetAddress . getByName ( <str> ) , InetAddress . getByName ( <str> ) } ; assertArrayEquals ( new InetAddress [ ] { InetAddress . getByName ( <str> ) } , NetworkUtils . filterIPV4 ( addresses ) ) ; assertArrayEquals ( new InetAddress [ ] { InetAddress . getByName ( <str> ) } , NetworkUtils . filterIPV6 ( addresses ) ) ; } } 

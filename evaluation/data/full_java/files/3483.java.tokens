package org . nd4j . linalg . shape . reshape ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import static org . junit . Assert . * ; import static org . junit . Assume . * ; public class ReshapeTests extends BaseNd4jTest { public ReshapeTests ( ) { } public ReshapeTests ( String name ) { super ( name ) ; } public ReshapeTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public ReshapeTests ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testThreeTwoTwoTwo ( ) { INDArray threeTwoTwo = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> , <int> ) ; INDArray sliceZero = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; INDArray sliceOne = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; INDArray sliceTwo = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; INDArray [ ] assertions = new INDArray [ ] { sliceZero , sliceOne , sliceTwo } ; for ( int i = <int> ; i < threeTwoTwo . slices ( ) ; i + + ) { INDArray sliceI = threeTwoTwo . slice ( i ) ; assertEquals ( assertions [ i ] , sliceI ) ; } INDArray linspaced = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray [ ] assertionsTwo = new INDArray [ ] { Nd4j . create ( new double [ ] { <int> , <int> } ) , Nd4j . create ( new double [ ] { <int> , <int> } ) } ; for ( int i = <int> ; i < assertionsTwo . length ; i + + ) assertEquals ( linspaced . slice ( i ) , assertionsTwo [ i ] ) ; } @Test public void testColumnVectorReshape ( ) { double delta = <float> ; INDArray arr = Nd4j . create ( <int> , <int> ) ; INDArray reshaped = arr . reshape ( <str> , <int> , <int> ) ; assertArrayEquals ( new int [ ] { <int> , <int> } , reshaped . shape ( ) ) ; assertEquals ( <float> , reshaped . getDouble ( <int> ) , delta ) ; assertEquals ( <float> , reshaped . getDouble ( <int> ) , delta ) ; assumeNotNull ( reshaped . toString ( ) ) ; } @Override public char ordering ( ) { return <str> ; } } 

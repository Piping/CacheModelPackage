package io . netty . handler . codec . http2 ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . util . AsciiString ; import org . junit . After ; import org . junit . Before ; import org . junit . Test ; import static io . netty . handler . codec . http2 . Http2TestUtil . randomString ; import static org . junit . Assert . assertEquals ; public class Http2HeaderBlockIOTest { private DefaultHttp2HeadersDecoder decoder ; private DefaultHttp2HeadersEncoder encoder ; private ByteBuf buffer ; @Before public void setup ( ) { encoder = new DefaultHttp2HeadersEncoder ( ) ; decoder = new DefaultHttp2HeadersDecoder ( false ) ; buffer = Unpooled . buffer ( ) ; } @After public void teardown ( ) { buffer . release ( ) ; } @Test public void roundtripShouldBeSuccessful ( ) throws Http2Exception { Http2Headers in = headers ( ) ; assertRoundtripSuccessful ( in ) ; } @Test public void successiveCallsShouldSucceed ( ) throws Http2Exception { Http2Headers in = new DefaultHttp2Headers ( ) . method ( new AsciiString ( <str> ) ) . scheme ( new AsciiString ( <str> ) ) . authority ( new AsciiString ( <str> ) ) . path ( new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) ; assertRoundtripSuccessful ( in ) ; in = new DefaultHttp2Headers ( ) . method ( new AsciiString ( <str> ) ) . scheme ( new AsciiString ( <str> ) ) . authority ( new AsciiString ( <str> ) ) . path ( new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) ; assertRoundtripSuccessful ( in ) ; in = new DefaultHttp2Headers ( ) . method ( new AsciiString ( <str> ) ) . scheme ( new AsciiString ( <str> ) ) . authority ( new AsciiString ( <str> ) ) . path ( new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) ; assertRoundtripSuccessful ( in ) ; } @Test public void setMaxHeaderSizeShouldBeSuccessful ( ) throws Http2Exception { encoder . headerTable ( ) . maxHeaderTableSize ( <int> ) ; Http2Headers in = headers ( ) ; assertRoundtripSuccessful ( in ) ; assertEquals ( <int> , decoder . headerTable ( ) . maxHeaderTableSize ( ) ) ; } private void assertRoundtripSuccessful ( Http2Headers in ) throws Http2Exception { encoder . encodeHeaders ( in , buffer ) ; Http2Headers out = decoder . decodeHeaders ( buffer ) ; assertEquals ( in , out ) ; } private static Http2Headers headers ( ) { return new DefaultHttp2Headers ( false ) . method ( new AsciiString ( <str> ) ) . scheme ( new AsciiString ( <str> ) ) . authority ( new AsciiString ( <str> ) ) . path ( new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) . add ( new AsciiString ( <str> ) , new AsciiString ( <str> ) ) . add ( randomString ( ) , randomString ( ) ) ; } } 

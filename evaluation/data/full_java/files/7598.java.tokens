package org . elasticsearch . search . suggest . completion . context ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . geo . GeoUtils ; import org . elasticsearch . common . xcontent . ObjectParser ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentParser ; import java . io . IOException ; import java . util . Collections ; import java . util . List ; import static org . elasticsearch . search . suggest . completion . context . GeoContextMapping . * ; public final class GeoQueryContext implements ToXContent { private final GeoPoint geoPoint ; private final int boost ; private final int precision ; private final List < Integer > neighbours ; private GeoQueryContext ( GeoPoint geoPoint , int boost , int precision , List < Integer > neighbours ) { this . geoPoint = geoPoint ; this . boost = boost ; this . precision = precision ; this . neighbours = neighbours ; } public GeoPoint getGeoPoint ( ) { return geoPoint ; } public int getBoost ( ) { return boost ; } public int getPrecision ( ) { return precision ; } public List < Integer > getNeighbours ( ) { return neighbours ; } public static Builder builder ( ) { return new Builder ( ) ; } public static class Builder { private GeoPoint geoPoint ; private int boost = <int> ; private int precision = - <int> ; private List < Integer > neighbours = Collections . emptyList ( ) ; public Builder ( ) { } public Builder setBoost ( int boost ) { this . boost = boost ; return this ; } public Builder setPrecision ( int precision ) { this . precision = precision ; return this ; } public Builder setNeighbours ( List < Integer > neighbours ) { this . neighbours = neighbours ; return this ; } public Builder setGeoPoint ( GeoPoint geoPoint ) { this . geoPoint = geoPoint ; return this ; } private double lat = Double . NaN ; void setLat ( double lat ) { this . lat = lat ; } private double lon = Double . NaN ; void setLon ( double lon ) { this . lon = lon ; } public GeoQueryContext build ( ) { if ( geoPoint = = null ) { if ( Double . isNaN ( lat ) = = false & & Double . isNaN ( lon ) = = false ) { geoPoint = new GeoPoint ( lat , lon ) ; } else { throw new IllegalArgumentException ( <str> ) ; } } return new GeoQueryContext ( geoPoint , boost , precision , neighbours ) ; } } private static ObjectParser < GeoQueryContext . Builder , Void > GEO_CONTEXT_PARSER = new ObjectParser < > ( <str> , null ) ; static { GEO_CONTEXT_PARSER . declareField ( ( parser , geoQueryContext , geoContextMapping ) - > geoQueryContext . setGeoPoint ( GeoUtils . parseGeoPoint ( parser ) ) , new ParseField ( <str> ) , ObjectParser . ValueType . OBJECT ) ; GEO_CONTEXT_PARSER . declareInt ( GeoQueryContext . Builder : : setBoost , new ParseField ( <str> ) ) ; GEO_CONTEXT_PARSER . declareInt ( GeoQueryContext . Builder : : setPrecision , new ParseField ( <str> ) ) ; GEO_CONTEXT_PARSER . declareIntArray ( GeoQueryContext . Builder : : setNeighbours , new ParseField ( <str> ) ) ; GEO_CONTEXT_PARSER . declareDouble ( GeoQueryContext . Builder : : setLat , new ParseField ( <str> ) ) ; GEO_CONTEXT_PARSER . declareDouble ( GeoQueryContext . Builder : : setLon , new ParseField ( <str> ) ) ; } public static GeoQueryContext parse ( XContentParser parser ) throws IOException { XContentParser . Token token = parser . currentToken ( ) ; GeoQueryContext . Builder builder = new Builder ( ) ; if ( token = = XContentParser . Token . START_OBJECT ) { GEO_CONTEXT_PARSER . parse ( parser , builder ) ; } else if ( token = = XContentParser . Token . VALUE_STRING ) { builder . setGeoPoint ( GeoPoint . fromGeohash ( parser . text ( ) ) ) ; } else { throw new ElasticsearchParseException ( <str> ) ; } return builder . build ( ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( ) ; builder . startObject ( CONTEXT_VALUE ) ; builder . field ( <str> , geoPoint . getLat ( ) ) ; builder . field ( <str> , geoPoint . getLon ( ) ) ; builder . endObject ( ) ; builder . field ( CONTEXT_BOOST , boost ) ; builder . field ( CONTEXT_NEIGHBOURS , neighbours ) ; builder . field ( CONTEXT_PRECISION , precision ) ; builder . endObject ( ) ; return builder ; } } 

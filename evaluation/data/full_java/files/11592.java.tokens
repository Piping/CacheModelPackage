package org . gradle . api . internal . initialization ; import groovy . lang . Closure ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . ConfigurationContainer ; import org . gradle . api . artifacts . dsl . DependencyHandler ; import org . gradle . api . artifacts . dsl . RepositoryHandler ; import org . gradle . api . initialization . dsl . ScriptHandler ; import org . gradle . api . internal . artifacts . DependencyResolutionServices ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . groovy . scripts . ScriptSource ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . internal . classpath . DefaultClassPath ; import org . gradle . util . ConfigureUtil ; import java . io . File ; import java . net . URI ; public class DefaultScriptHandler implements ScriptHandler , ScriptHandlerInternal { private static final Logger LOGGER = Logging . getLogger ( DefaultScriptHandler . class ) ; private final ScriptSource scriptSource ; private final ClassLoaderScope classLoaderScope ; private final DependencyResolutionServices dependencyResolutionServices ; private RepositoryHandler repositoryHandler ; private DependencyHandler dependencyHandler ; private ConfigurationContainer configContainer ; private Configuration classpathConfiguration ; public DefaultScriptHandler ( ScriptSource scriptSource , DependencyResolutionServices dependencyResolutionServices , ClassLoaderScope classLoaderScope ) { this . dependencyResolutionServices = dependencyResolutionServices ; this . scriptSource = scriptSource ; this . classLoaderScope = classLoaderScope ; } public void dependencies ( Closure configureClosure ) { ConfigureUtil . configure ( configureClosure , getDependencies ( ) ) ; } @Override public void addScriptClassPathDependency ( Object notation ) { getDependencies ( ) . add ( ScriptHandler . CLASSPATH_CONFIGURATION , notation ) ; } @Override public ClassPath getScriptClassPath ( ) { if ( classpathConfiguration = = null ) { return new DefaultClassPath ( ) ; } return new DefaultClassPath ( classpathConfiguration . getFiles ( ) ) ; } public DependencyHandler getDependencies ( ) { defineConfiguration ( ) ; if ( dependencyHandler = = null ) { dependencyHandler = dependencyResolutionServices . getDependencyHandler ( ) ; } return dependencyHandler ; } public RepositoryHandler getRepositories ( ) { if ( repositoryHandler = = null ) { repositoryHandler = dependencyResolutionServices . getResolveRepositoryHandler ( ) ; } return repositoryHandler ; } public void repositories ( Closure configureClosure ) { ConfigureUtil . configure ( configureClosure , getRepositories ( ) ) ; } public ConfigurationContainer getConfigurations ( ) { defineConfiguration ( ) ; return configContainer ; } private void defineConfiguration ( ) { if ( configContainer = = null ) { configContainer = dependencyResolutionServices . getConfigurationContainer ( ) ; } if ( classpathConfiguration = = null ) { classpathConfiguration = configContainer . create ( CLASSPATH_CONFIGURATION ) ; } } public File getSourceFile ( ) { return scriptSource . getResource ( ) . getFile ( ) ; } public URI getSourceURI ( ) { return scriptSource . getResource ( ) . getURI ( ) ; } public ClassLoader getClassLoader ( ) { if ( ! classLoaderScope . isLocked ( ) ) { LOGGER . debug ( <str> , scriptSource ) ; } return classLoaderScope . getLocalClassLoader ( ) ; } } 

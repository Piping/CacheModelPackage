package org . elasticsearch . rest . action . admin . cluster . health ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthRequest ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestStatusToXContentListener ; import java . util . Locale ; import static org . elasticsearch . client . Requests . clusterHealthRequest ; public class RestClusterHealthAction extends BaseRestHandler { @Inject public RestClusterHealthAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( RestRequest . Method . GET , <str> , this ) ; controller . registerHandler ( RestRequest . Method . GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { ClusterHealthRequest clusterHealthRequest = clusterHealthRequest ( Strings . splitStringByCommaToArray ( request . param ( <str> ) ) ) ; clusterHealthRequest . local ( request . paramAsBoolean ( <str> , clusterHealthRequest . local ( ) ) ) ; clusterHealthRequest . masterNodeTimeout ( request . paramAsTime ( <str> , clusterHealthRequest . masterNodeTimeout ( ) ) ) ; clusterHealthRequest . timeout ( request . paramAsTime ( <str> , clusterHealthRequest . timeout ( ) ) ) ; String waitForStatus = request . param ( <str> ) ; if ( waitForStatus ! = null ) { clusterHealthRequest . waitForStatus ( ClusterHealthStatus . valueOf ( waitForStatus . toUpperCase ( Locale . ROOT ) ) ) ; } clusterHealthRequest . waitForRelocatingShards ( request . paramAsInt ( <str> , clusterHealthRequest . waitForRelocatingShards ( ) ) ) ; clusterHealthRequest . waitForActiveShards ( request . paramAsInt ( <str> , clusterHealthRequest . waitForActiveShards ( ) ) ) ; clusterHealthRequest . waitForNodes ( request . param ( <str> , clusterHealthRequest . waitForNodes ( ) ) ) ; client . admin ( ) . cluster ( ) . health ( clusterHealthRequest , new RestStatusToXContentListener < ClusterHealthResponse > ( channel ) ) ; } } 

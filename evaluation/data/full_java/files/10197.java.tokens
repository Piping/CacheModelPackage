package com . google . common . collect ; import com . google . caliper . AfterExperiment ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . caliper . Param ; import com . google . common . base . Function ; import com . google . common . collect . MapMaker ; import com . google . common . primitives . Ints ; import java . util . Map ; import java . util . Random ; import java . util . concurrent . atomic . AtomicLong ; public class MapMakerSingleThreadBenchmark { @Param ( { <str> , <str> } ) int maximumSize ; @Param ( <str> ) int distinctKeys ; @Param ( <str> ) int segments ; @Param ( <str> ) double concentration ; Random random = new Random ( ) ; Map < Integer , Integer > cache ; int max ; static AtomicLong requests = new AtomicLong ( <int> ) ; static AtomicLong misses = new AtomicLong ( <int> ) ; @BeforeExperiment void setUp ( ) { max = Ints . checkedCast ( ( long ) Math . pow ( distinctKeys , concentration ) ) ; cache = new MapMaker ( ) . concurrencyLevel ( segments ) . maximumSize ( maximumSize ) . makeComputingMap ( new Function < Integer , Integer > ( ) { @Override public Integer apply ( Integer from ) { return ( int ) misses . incrementAndGet ( ) ; } } ) ; while ( cache . get ( nextRandomKey ( ) ) < maximumSize ) { } requests . set ( <int> ) ; misses . set ( <int> ) ; } @Benchmark int time ( int reps ) { int dummy = <int> ; for ( int i = <int> ; i < reps ; i + + ) { dummy + = cache . get ( nextRandomKey ( ) ) ; } requests . addAndGet ( reps ) ; return dummy ; } private int nextRandomKey ( ) { int a = random . nextInt ( max ) ; return ( int ) Math . pow ( a , <float> / concentration ) ; } @AfterExperiment void tearDown ( ) { double req = requests . get ( ) ; double hit = req - misses . get ( ) ; System . out . println ( <str> + hit / req ) ; } } 

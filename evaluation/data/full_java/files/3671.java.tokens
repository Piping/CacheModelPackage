package org . eclipse . debug . internal . core ; import java . io . File ; import java . io . IOException ; import java . io . StringReader ; import java . net . URI ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . Set ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . TransformerException ; import org . eclipse . core . filesystem . EFS ; import org . eclipse . core . filesystem . IFileStore ; import org . eclipse . core . resources . IContainer ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . core . resources . IncrementalProjectBuilder ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . SubMonitor ; import org . eclipse . core . runtime . SubProgressMonitor ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchDelegate ; import org . eclipse . debug . core . IStatusHandler ; import org . eclipse . debug . core . Launch ; import org . eclipse . debug . core . model . ILaunchConfigurationDelegate ; import org . eclipse . debug . core . model . ILaunchConfigurationDelegate2 ; import org . eclipse . debug . core . model . IPersistableSourceLocator ; import org . eclipse . debug . core . sourcelookup . IPersistableSourceLocator2 ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . xml . sax . helpers . DefaultHandler ; import com . ibm . icu . text . MessageFormat ; public class LaunchConfiguration extends PlatformObject implements ILaunchConfiguration { public static final String ATTR_MAPPED_RESOURCE_PATHS = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public static final String ATTR_MAPPED_RESOURCE_TYPES = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public static final String ATTR_LAUNCH_MODES = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public static final String ATTR_PREFERRED_LAUNCHERS = DebugPlugin . getUniqueIdentifier ( ) + <str> ; protected static final IStatus promptStatus = new Status ( IStatus . INFO , <str> , <int> , <str> , null ) ; protected static final IStatus delegateNotAvailable = new Status ( IStatus . INFO , <str> , <int> , <str> , null ) ; protected static final IStatus duplicateDelegates = new Status ( IStatus . INFO , <str> , <int> , <str> , null ) ; private String fName ; private IContainer fContainer ; protected LaunchConfiguration ( String name , IContainer container ) { initialize ( ) ; setName ( name ) ; setContainer ( container ) ; } protected void initialize ( ) { } protected LaunchConfiguration ( IFile file ) { this ( getSimpleName ( file . getName ( ) ) , file . getParent ( ) ) ; } protected static String getSimpleName ( String fileName ) { IPath path = new Path ( fileName ) ; if ( ILaunchConfiguration . LAUNCH_CONFIGURATION_FILE_EXTENSION . equals ( path . getFileExtension ( ) ) ) { return path . removeFileExtension ( ) . toString ( ) ; } return fileName ; } protected LaunchConfiguration ( String memento ) throws CoreException { Exception ex = null ; try { Element root = null ; DocumentBuilder parser = DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder ( ) ; parser . setErrorHandler ( new DefaultHandler ( ) ) ; StringReader reader = new StringReader ( memento ) ; InputSource source = new InputSource ( reader ) ; root = parser . parse ( source ) . getDocumentElement ( ) ; String localString = root . getAttribute ( IConfigurationElementConstants . LOCAL ) ; String path = root . getAttribute ( IConfigurationElementConstants . PATH ) ; String message = null ; if ( path = = null | | IInternalDebugCoreConstants . EMPTY_STRING . equals ( path ) ) { message = DebugCoreMessages . LaunchConfiguration_18 ; } else if ( localString = = null | | IInternalDebugCoreConstants . EMPTY_STRING . equals ( localString ) ) { message = DebugCoreMessages . LaunchConfiguration_19 ; } if ( message ! = null ) { throw new CoreException ( newStatus ( message , DebugException . INTERNAL_ERROR , null ) ) ; } boolean local = ( Boolean . valueOf ( localString ) ) . booleanValue ( ) ; IPath iPath = new Path ( path ) ; String name = getSimpleName ( iPath . lastSegment ( ) ) ; IContainer container = null ; if ( ! local ) { container = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getFile ( iPath ) . getParent ( ) ; } setName ( name ) ; setContainer ( container ) ; return ; } catch ( ParserConfigurationException e ) { ex = e ; } catch ( SAXException e ) { ex = e ; } catch ( IOException e ) { ex = e ; } IStatus s = newStatus ( DebugCoreMessages . LaunchConfiguration_17 , DebugException . INTERNAL_ERROR , ex ) ; throw new CoreException ( s ) ; } @Override public boolean contentsEqual ( ILaunchConfiguration object ) { try { if ( object instanceof LaunchConfiguration ) { LaunchConfiguration otherConfig = ( LaunchConfiguration ) object ; return getName ( ) . equals ( otherConfig . getName ( ) ) & & getType ( ) . equals ( otherConfig . getType ( ) ) & & equalOrNull ( getContainer ( ) , otherConfig . getContainer ( ) ) & & getInfo ( ) . equals ( otherConfig . getInfo ( ) ) ; } return false ; } catch ( CoreException ce ) { return false ; } } @Override public ILaunchConfigurationWorkingCopy copy ( String name ) throws CoreException { ILaunchConfigurationWorkingCopy copy = new LaunchConfigurationWorkingCopy ( this , name ) ; return copy ; } @Override public void delete ( ) throws CoreException { if ( exists ( ) ) { IFile file = getFile ( ) ; if ( file = = null ) { IFileStore store = getFileStore ( ) ; if ( store ! = null ) { store . delete ( EFS . NONE , null ) ; if ( ( store . fetchInfo ( ) . exists ( ) ) ) { throw new DebugException ( new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugException . REQUEST_FAILED , DebugCoreMessages . LaunchConfiguration_Failed_to_delete_launch_configuration__1 , null ) ) ; } } } else { if ( file . isReadOnly ( ) ) { IStatus status = ResourcesPlugin . getWorkspace ( ) . validateEdit ( new IFile [ ] { file } , null ) ; if ( ! status . isOK ( ) ) { throw new CoreException ( status ) ; } } file . delete ( true , null ) ; } getLaunchManager ( ) . launchConfigurationDeleted ( this ) ; } } @Override public boolean equals ( Object object ) { if ( object instanceof ILaunchConfiguration ) { if ( isWorkingCopy ( ) ) { return this = = object ; } LaunchConfiguration config = ( LaunchConfiguration ) object ; if ( ! config . isWorkingCopy ( ) ) { return getName ( ) . equals ( config . getName ( ) ) & & equalOrNull ( getContainer ( ) , config . getContainer ( ) ) ; } } return false ; } protected boolean equalOrNull ( Object o1 , Object o2 ) { if ( o1 = = null ) { return o2 = = null ; } else if ( o2 ! = null ) { return o1 . equals ( o2 ) ; } return false ; } @Override public boolean exists ( ) { IFile file = getFile ( ) ; if ( file ! = null ) { return file . exists ( ) ; } try { IFileStore store = getFileStore ( ) ; if ( store ! = null ) { return store . fetchInfo ( ) . exists ( ) ; } } catch ( CoreException e ) { } return false ; } @Override public boolean getAttribute ( String attributeName , boolean defaultValue ) throws CoreException { return getInfo ( ) . getBooleanAttribute ( attributeName , defaultValue ) ; } @Override public int getAttribute ( String attributeName , int defaultValue ) throws CoreException { return getInfo ( ) . getIntAttribute ( attributeName , defaultValue ) ; } @Override public List < String > getAttribute ( String attributeName , List < String > defaultValue ) throws CoreException { return getInfo ( ) . getListAttribute ( attributeName , defaultValue ) ; } @Override public Set < String > getAttribute ( String attributeName , Set < String > defaultValue ) throws CoreException { return getInfo ( ) . getSetAttribute ( attributeName , defaultValue ) ; } @Override public Map < String , String > getAttribute ( String attributeName , Map < String , String > defaultValue ) throws CoreException { return getInfo ( ) . getMapAttribute ( attributeName , defaultValue ) ; } @Override public String getAttribute ( String attributeName , String defaultValue ) throws CoreException { return getInfo ( ) . getStringAttribute ( attributeName , defaultValue ) ; } @Override public Map < String , Object > getAttributes ( ) throws CoreException { LaunchConfigurationInfo info = getInfo ( ) ; return info . getAttributes ( ) ; } @Override public String getCategory ( ) throws CoreException { return getType ( ) . getCategory ( ) ; } @Override public IFile getFile ( ) { IContainer container = getContainer ( ) ; if ( container ! = null ) { return container . getFile ( new Path ( getFileName ( ) ) ) ; } return null ; } protected String getFileName ( ) { StringBuffer buf = new StringBuffer ( getName ( ) ) ; buf . append ( <str> ) ; buf . append ( ILaunchConfiguration . LAUNCH_CONFIGURATION_FILE_EXTENSION ) ; return buf . toString ( ) ; } protected LaunchConfigurationInfo getInfo ( ) throws CoreException { return getLaunchManager ( ) . getInfo ( this ) ; } protected LaunchManager getLaunchManager ( ) { return ( LaunchManager ) DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; } @Override public IPath getLocation ( ) { try { IFileStore store = getFileStore ( ) ; if ( store ! = null ) { File localFile = store . toLocalFile ( EFS . NONE , null ) ; if ( localFile ! = null ) { return new Path ( localFile . getAbsolutePath ( ) ) ; } } } catch ( CoreException e ) { } return null ; } public IFileStore getFileStore ( ) throws CoreException { if ( isLocal ( ) ) { return EFS . getLocalFileSystem ( ) . fromLocalFile ( LaunchManager . LOCAL_LAUNCH_CONFIGURATION_CONTAINER_PATH . append ( getFileName ( ) ) . toFile ( ) ) ; } URI uri = getFile ( ) . getLocationURI ( ) ; if ( uri ! = null ) { return EFS . getStore ( uri ) ; } return null ; } @Override public IResource [ ] getMappedResources ( ) throws CoreException { List < String > paths = getAttribute ( ATTR_MAPPED_RESOURCE_PATHS , ( List < String > ) null ) ; if ( paths = = null | | paths . size ( ) = = <int> ) { return null ; } List < String > types = getAttribute ( ATTR_MAPPED_RESOURCE_TYPES , ( List < String > ) null ) ; if ( types = = null | | types . size ( ) ! = paths . size ( ) ) { throw new CoreException ( newStatus ( DebugCoreMessages . LaunchConfiguration_0 , DebugPlugin . ERROR , null ) ) ; } ArrayList < IResource > list = new ArrayList < IResource > ( ) ; IWorkspaceRoot root = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; for ( int i = <int> ; i < paths . size ( ) ; i + + ) { String pathStr = paths . get ( i ) ; String typeStr = types . get ( i ) ; int type = - <int> ; try { type = Integer . decode ( typeStr ) . intValue ( ) ; } catch ( NumberFormatException e ) { throw new CoreException ( newStatus ( DebugCoreMessages . LaunchConfiguration_0 , DebugPlugin . ERROR , e ) ) ; } IPath path = Path . fromPortableString ( pathStr ) ; IResource res = null ; switch ( type ) { case IResource . FILE : res = root . getFile ( path ) ; break ; case IResource . PROJECT : pathStr = path . makeRelative ( ) . toPortableString ( ) ; if ( Path . ROOT . isValidSegment ( pathStr ) ) { res = root . getProject ( pathStr ) ; } break ; case IResource . FOLDER : res = root . getFolder ( path ) ; break ; case IResource . ROOT : res = root ; break ; default : throw new CoreException ( newStatus ( DebugCoreMessages . LaunchConfiguration_0 , DebugPlugin . ERROR , null ) ) ; } if ( res ! = null ) { list . add ( res ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new IResource [ list . size ( ) ] ) ; } @Override public String getMemento ( ) throws CoreException { IPath relativePath = null ; IFile file = getFile ( ) ; boolean local = true ; if ( file = = null ) { relativePath = new Path ( getName ( ) ) ; } else { local = false ; relativePath = file . getFullPath ( ) ; } Exception e = null ; try { Document doc = LaunchManager . getDocument ( ) ; Element node = doc . createElement ( IConfigurationElementConstants . LAUNCH_CONFIGURATION ) ; doc . appendChild ( node ) ; node . setAttribute ( IConfigurationElementConstants . LOCAL , ( Boolean . valueOf ( local ) ) . toString ( ) ) ; node . setAttribute ( IConfigurationElementConstants . PATH , relativePath . toString ( ) ) ; return LaunchManager . serializeDocument ( doc ) ; } catch ( IOException ioe ) { e = ioe ; } catch ( ParserConfigurationException pce ) { e = pce ; } catch ( TransformerException te ) { e = te ; } IStatus status = newStatus ( DebugCoreMessages . LaunchConfiguration_16 , DebugException . INTERNAL_ERROR , e ) ; throw new CoreException ( status ) ; } @Override public String getName ( ) { return fName ; } protected IContainer getContainer ( ) { return fContainer ; } @Override public Set < String > getModes ( ) throws CoreException { Set < String > options = getAttribute ( ATTR_LAUNCH_MODES , ( Set < String > ) null ) ; return ( options ! = null ? new HashSet < String > ( options ) : new HashSet < String > ( <int> ) ) ; } @Override public ILaunchConfigurationType getType ( ) throws CoreException { return getInfo ( ) . getType ( ) ; } @Override public ILaunchConfigurationWorkingCopy getWorkingCopy ( ) throws CoreException { return new LaunchConfigurationWorkingCopy ( this ) ; } @Override public int hashCode ( ) { IContainer container = getContainer ( ) ; if ( container = = null ) { return getName ( ) . hashCode ( ) ; } else { return getName ( ) . hashCode ( ) + container . hashCode ( ) ; } } @Override public boolean hasAttribute ( String attributeName ) throws CoreException { return getInfo ( ) . hasAttribute ( attributeName ) ; } protected void initializeSourceLocator ( ILaunch launch ) throws CoreException { if ( launch . getSourceLocator ( ) = = null ) { String type = getAttribute ( ATTR_SOURCE_LOCATOR_ID , ( String ) null ) ; if ( type = = null ) { type = getType ( ) . getSourceLocatorId ( ) ; } if ( type ! = null ) { IPersistableSourceLocator locator = getLaunchManager ( ) . newSourceLocator ( type ) ; String memento = getAttribute ( ATTR_SOURCE_LOCATOR_MEMENTO , ( String ) null ) ; if ( memento = = null ) { locator . initializeDefaults ( this ) ; } else { if ( locator instanceof IPersistableSourceLocator2 ) { ( ( IPersistableSourceLocator2 ) locator ) . initializeFromMemento ( memento , this ) ; } else { locator . initializeFromMemento ( memento ) ; } } launch . setSourceLocator ( locator ) ; } } } @Override public boolean isLocal ( ) { return getContainer ( ) = = null ; } @Override public boolean isMigrationCandidate ( ) throws CoreException { return ( ( LaunchConfigurationType ) getType ( ) ) . isMigrationCandidate ( this ) ; } @Override public boolean isWorkingCopy ( ) { return false ; } @Override public ILaunch launch ( String mode , IProgressMonitor monitor ) throws CoreException { return launch ( mode , monitor , false ) ; } @Override public ILaunch launch ( String mode , IProgressMonitor monitor , boolean build ) throws CoreException { return launch ( mode , monitor , build , true ) ; } @Override public ILaunch launch ( String mode , IProgressMonitor monitor , boolean build , boolean register ) throws CoreException { SubMonitor lmonitor = SubMonitor . convert ( monitor , DebugCoreMessages . LaunchConfiguration_9 , build ? <int> : <int> ) ; try { Set < String > modes = getModes ( ) ; modes . add ( mode ) ; ILaunchDelegate [ ] delegates = getType ( ) . getDelegates ( modes ) ; ILaunchConfigurationDelegate delegate = null ; if ( delegates . length = = <int> ) { delegate = delegates [ <int> ] . getDelegate ( ) ; } else if ( delegates . length = = <int> ) { IStatusHandler handler = DebugPlugin . getDefault ( ) . getStatusHandler ( promptStatus ) ; if ( handler ! = null ) { handler . handleStatus ( delegateNotAvailable , new Object [ ] { this , mode } ) ; } IStatus status = new Status ( IStatus . CANCEL , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , DebugCoreMessages . LaunchConfiguration_11 , null ) ; throw new CoreException ( status ) ; } else { ILaunchDelegate del = getPreferredDelegate ( modes ) ; if ( del = = null ) { del = getType ( ) . getPreferredDelegate ( modes ) ; } if ( del = = null ) { IStatusHandler handler = DebugPlugin . getDefault ( ) . getStatusHandler ( promptStatus ) ; IStatus status = null ; if ( handler ! = null ) { status = ( IStatus ) handler . handleStatus ( duplicateDelegates , new Object [ ] { this , mode } ) ; } if ( status ! = null & & status . isOK ( ) ) { del = getPreferredDelegate ( modes ) ; if ( del = = null ) { del = getType ( ) . getPreferredDelegate ( modes ) ; } if ( del ! = null ) { delegate = del . getDelegate ( ) ; } else { status = new Status ( IStatus . CANCEL , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , DebugCoreMessages . LaunchConfiguration_13 , null ) ; throw new CoreException ( status ) ; } } else { status = new Status ( IStatus . CANCEL , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , DebugCoreMessages . LaunchConfiguration_13 , null ) ; throw new CoreException ( status ) ; } } else { delegate = del . getDelegate ( ) ; } } ILaunchConfigurationDelegate2 delegate2 = null ; if ( delegate instanceof ILaunchConfigurationDelegate2 ) { delegate2 = ( ILaunchConfigurationDelegate2 ) delegate ; } ILaunch launch = null ; if ( delegate2 ! = null ) { launch = delegate2 . getLaunch ( this , mode ) ; } if ( launch = = null ) { launch = new Launch ( this , mode , null ) ; } else { if ( ! mode . equals ( launch . getLaunchMode ( ) ) ) { IStatus status = new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , DebugPlugin . ERROR , MessageFormat . format ( DebugCoreMessages . LaunchConfiguration_14 , new Object [ ] { mode , launch . getLaunchMode ( ) } ) , null ) ; throw new CoreException ( status ) ; } } launch . setAttribute ( DebugPlugin . ATTR_LAUNCH_TIMESTAMP , Long . toString ( System . currentTimeMillis ( ) ) ) ; boolean captureOutput = getAttribute ( DebugPlugin . ATTR_CAPTURE_OUTPUT , true ) ; if ( ! captureOutput ) { launch . setAttribute ( DebugPlugin . ATTR_CAPTURE_OUTPUT , <str> ) ; } else { launch . setAttribute ( DebugPlugin . ATTR_CAPTURE_OUTPUT , null ) ; } launch . setAttribute ( DebugPlugin . ATTR_CONSOLE_ENCODING , getLaunchManager ( ) . getEncoding ( this ) ) ; if ( register ) { getLaunchManager ( ) . addLaunch ( launch ) ; } lmonitor . subTask ( DebugCoreMessages . LaunchConfiguration_8 ) ; if ( delegate2 ! = null ) { if ( ! ( delegate2 . preLaunchCheck ( this , mode , new SubProgressMonitor ( lmonitor , <int> ) ) ) ) { getLaunchManager ( ) . removeLaunch ( launch ) ; return launch ; } } else { lmonitor . worked ( <int> ) ; } if ( build ) { IProgressMonitor buildMonitor = new SubProgressMonitor ( lmonitor , <int> , SubProgressMonitor . PREPEND_MAIN_LABEL_TO_SUBTASK ) ; buildMonitor . beginTask ( DebugCoreMessages . LaunchConfiguration_7 , <int> ) ; buildMonitor . subTask ( DebugCoreMessages . LaunchConfiguration_6 ) ; boolean tempbuild = build ; if ( delegate2 ! = null ) { tempbuild = delegate2 . buildForLaunch ( this , mode , new SubProgressMonitor ( buildMonitor , <int> ) ) ; } if ( tempbuild ) { buildMonitor . subTask ( DebugCoreMessages . LaunchConfiguration_5 ) ; ResourcesPlugin . getWorkspace ( ) . build ( IncrementalProjectBuilder . INCREMENTAL_BUILD , new SubProgressMonitor ( buildMonitor , <int> ) ) ; } else { buildMonitor . worked ( <int> ) ; } } lmonitor . subTask ( DebugCoreMessages . LaunchConfiguration_4 ) ; if ( delegate2 ! = null ) { if ( ! ( delegate2 . finalLaunchCheck ( this , mode , new SubProgressMonitor ( lmonitor , <int> ) ) ) ) { getLaunchManager ( ) . removeLaunch ( launch ) ; return launch ; } } else { lmonitor . worked ( <int> ) ; } try { lmonitor . subTask ( DebugCoreMessages . LaunchConfiguration_3 ) ; initializeSourceLocator ( launch ) ; lmonitor . worked ( <int> ) ; lmonitor . subTask ( DebugCoreMessages . LaunchConfiguration_2 ) ; delegate . launch ( this , mode , launch , new SubProgressMonitor ( lmonitor , <int> ) ) ; } catch ( CoreException e ) { if ( ! launch . hasChildren ( ) ) { getLaunchManager ( ) . removeLaunch ( launch ) ; } throw e ; } catch ( RuntimeException e ) { if ( ! launch . hasChildren ( ) ) { getLaunchManager ( ) . removeLaunch ( launch ) ; } throw e ; } if ( lmonitor . isCanceled ( ) ) { getLaunchManager ( ) . removeLaunch ( launch ) ; } return launch ; } finally { lmonitor . done ( ) ; } } @Override public void migrate ( ) throws CoreException { ( ( LaunchConfigurationType ) getType ( ) ) . migrate ( this ) ; } protected IStatus newStatus ( String message , int code , Throwable e ) { return new Status ( IStatus . ERROR , DebugPlugin . getUniqueIdentifier ( ) , code , message , e ) ; } protected void setName ( String name ) { fName = name ; } protected void setContainer ( IContainer container ) { fContainer = container ; } @Override public boolean supportsMode ( String mode ) throws CoreException { return getType ( ) . supportsMode ( mode ) ; } @Override public boolean isReadOnly ( ) { try { IFileStore fileStore = getFileStore ( ) ; if ( fileStore ! = null ) { return fileStore . fetchInfo ( ) . getAttribute ( EFS . ATTRIBUTE_READ_ONLY ) ; } } catch ( CoreException e ) { } return true ; } @Override public ILaunchDelegate getPreferredDelegate ( Set < String > modes ) throws CoreException { Map < String , String > delegates = getAttribute ( LaunchConfiguration . ATTR_PREFERRED_LAUNCHERS , ( Map < String , String > ) null ) ; if ( delegates ! = null ) { String id = delegates . get ( modes . toString ( ) ) ; if ( id ! = null ) { return getLaunchManager ( ) . getLaunchDelegate ( id ) ; } } return null ; } @Override public String toString ( ) { return getName ( ) ; } } 

package org . elasticsearch . action . indexedscripts . delete ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . delete . DeleteResponse ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . DelegatingActionListener ; import org . elasticsearch . action . support . HandledTransportAction ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportDeleteIndexedScriptAction extends HandledTransportAction < DeleteIndexedScriptRequest , DeleteIndexedScriptResponse > { private final ScriptService scriptService ; @Inject public TransportDeleteIndexedScriptAction ( Settings settings , ThreadPool threadPool , ScriptService scriptService , TransportService transportService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , DeleteIndexedScriptAction . NAME , threadPool , transportService , actionFilters , indexNameExpressionResolver , DeleteIndexedScriptRequest : : new ) ; this . scriptService = scriptService ; } @Override protected void doExecute ( final DeleteIndexedScriptRequest request , final ActionListener < DeleteIndexedScriptResponse > listener ) { scriptService . deleteScriptFromIndex ( request , new DelegatingActionListener < DeleteResponse , DeleteIndexedScriptResponse > ( listener ) { @Override public DeleteIndexedScriptResponse getDelegatedFromInstigator ( DeleteResponse deleteResponse ) { return new DeleteIndexedScriptResponse ( deleteResponse . getIndex ( ) , deleteResponse . getType ( ) , deleteResponse . getId ( ) , deleteResponse . getVersion ( ) , deleteResponse . isFound ( ) ) ; } } ) ; } } 

package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . io . stream . StreamInput ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; import static java . util . Collections . emptyMap ; import static java . util . Collections . unmodifiableMap ; public class BucketStreams { private static Map < BytesReference , Stream > streams = emptyMap ( ) ; public static interface Stream < B extends MultiBucketsAggregation . Bucket > { B readResult ( StreamInput in , BucketStreamContext context ) throws IOException ; BucketStreamContext getBucketStreamContext ( B bucket ) ; } public static synchronized void registerStream ( Stream stream , BytesReference . . . types ) { Map < BytesReference , Stream > newStreams = new HashMap < > ( streams ) ; for ( BytesReference type : types ) { newStreams . put ( type , stream ) ; } streams = unmodifiableMap ( newStreams ) ; } public static Stream stream ( BytesReference type ) { return streams . get ( type ) ; } } 

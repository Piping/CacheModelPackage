package org . eclipse . debug . internal . ui . views . memory ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . memory . IMemoryRendering ; import org . eclipse . debug . ui . memory . IMemoryRenderingContainer ; import org . eclipse . jface . action . Action ; public class RemoveMemoryRenderingAction extends Action { private IMemoryRenderingContainer fViewPane ; public RemoveMemoryRenderingAction ( IMemoryRenderingContainer viewPane ) { super ( DebugUIMessages . RemoveMemoryRenderingAction_Remove_rendering , AS_PUSH_BUTTON ) ; setText ( DebugUIMessages . RemoveMemoryRenderingAction_Remove_rendering ) ; setToolTipText ( DebugUIMessages . RemoveMemoryRenderingAction_Remove_rendering ) ; setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_REMOVE_MEMORY ) ) ; setHoverImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_LCL_REMOVE_MEMORY ) ) ; setDisabledImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_REMOVE_MEMORY ) ) ; fViewPane = viewPane ; } @Override public void run ( ) { IMemoryViewTab topTab = getViewTab ( ) ; if ( topTab ! = null ) { IMemoryRendering rendering = topTab . getRendering ( ) ; if ( rendering ! = null ) { fViewPane . removeMemoryRendering ( rendering ) ; } } } IMemoryViewTab getViewTab ( ) { if ( fViewPane instanceof IMemoryView ) { return ( ( IMemoryView ) fViewPane ) . getTopMemoryTab ( ) ; } return null ; } } 

package org . gradle . api . internal . artifacts ; import org . gradle . api . DomainObjectSet ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . artifacts . DependencySet ; import org . gradle . api . artifacts . SelfResolvingDependency ; import org . gradle . api . internal . DelegatingDomainObjectSet ; import org . gradle . api . internal . tasks . AbstractTaskDependency ; import org . gradle . api . internal . tasks . TaskDependencyResolveContext ; import org . gradle . api . tasks . TaskDependency ; public class DefaultDependencySet extends DelegatingDomainObjectSet < Dependency > implements DependencySet { private final TaskDependency builtBy = new DependencySetTaskDependency ( ) ; private final String displayName ; public DefaultDependencySet ( String displayName , DomainObjectSet < Dependency > backingSet ) { super ( backingSet ) ; this . displayName = displayName ; } @Override public String toString ( ) { return displayName ; } public TaskDependency getBuildDependencies ( ) { return builtBy ; } private class DependencySetTaskDependency extends AbstractTaskDependency { @Override public String toString ( ) { return String . format ( <str> , DefaultDependencySet . this ) ; } @Override public void visitDependencies ( TaskDependencyResolveContext context ) { for ( SelfResolvingDependency dependency : DefaultDependencySet . this . withType ( SelfResolvingDependency . class ) ) { context . add ( dependency ) ; } } } } 

package org . eclipse . debug . internal . ui ; import org . eclipse . core . runtime . IAdapterFactory ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . ui . breakpoints . provisional . IBreakpointContainer ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointContainerWorkbenchAdapter ; import org . eclipse . debug . internal . ui . views . breakpoints . BreakpointPersistableElementAdapter ; import org . eclipse . ui . IPersistableElement ; import org . eclipse . ui . model . IWorkbenchAdapter ; import org . eclipse . ui . model . IWorkbenchAdapter2 ; public class DebugUIAdapterFactory implements IAdapterFactory { @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Object obj , Class < T > adapterType ) { if ( adapterType . isInstance ( obj ) ) { return ( T ) obj ; } if ( adapterType = = IPersistableElement . class ) { if ( obj instanceof IBreakpoint ) { return ( T ) new BreakpointPersistableElementAdapter ( ( IBreakpoint ) obj ) ; } } if ( adapterType = = IWorkbenchAdapter . class ) { if ( obj instanceof IBreakpointContainer ) { return ( T ) new BreakpointContainerWorkbenchAdapter ( ) ; } } if ( adapterType = = IWorkbenchAdapter2 . class ) { if ( obj instanceof IBreakpointContainer ) { return ( T ) new BreakpointContainerWorkbenchAdapter ( ) ; } } return null ; } @Override public Class < ? > [ ] getAdapterList ( ) { return new Class [ ] { IPersistableElement . class , IWorkbenchAdapter . class , IWorkbenchAdapter2 . class } ; } } 

package com . google . common . io ; import com . google . common . collect . Sets ; import junit . framework . TestCase ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . net . URL ; import java . util . Set ; import java . util . logging . Level ; import java . util . logging . Logger ; public abstract class IoTestCase extends TestCase { private static final Logger logger = Logger . getLogger ( IoTestCase . class . getName ( ) ) ; static final String I18N = <str> + <str> ; static final String ASCII = <str> + <str> ; private File testDir ; private File tempDir ; private final Set < File > filesToDelete = Sets . newHashSet ( ) ; @Override protected void tearDown ( ) { for ( File file : filesToDelete ) { if ( file . exists ( ) ) { delete ( file ) ; } } filesToDelete . clear ( ) ; } private File getTestDir ( ) throws IOException { if ( testDir ! = null ) { return testDir ; } URL testFileUrl = IoTestCase . class . getResource ( <str> ) ; if ( testFileUrl = = null ) { throw new RuntimeException ( <str> ) ; } if ( testFileUrl . getProtocol ( ) . equals ( <str> ) ) { try { File testFile = new File ( testFileUrl . toURI ( ) ) ; testDir = testFile . getParentFile ( ) ; } catch ( Exception ignore ) { } } if ( testDir = = null ) { testDir = createTempDir ( ) ; } return testDir ; } protected final File getTestFile ( String name ) throws IOException { File file = new File ( getTestDir ( ) , name ) ; if ( ! file . exists ( ) ) { URL resourceUrl = IoTestCase . class . getResource ( <str> + name ) ; if ( resourceUrl = = null ) { return null ; } copy ( resourceUrl , file ) ; } return file ; } protected final File createTempDir ( ) throws IOException { File tempFile = File . createTempFile ( <str> , <str> ) ; if ( ! tempFile . delete ( ) | | ! tempFile . mkdir ( ) ) { throw new IOException ( <str> ) ; } filesToDelete . add ( tempFile ) ; return tempFile ; } protected final File getTempDir ( ) throws IOException { if ( tempDir = = null ) { tempDir = createTempDir ( ) ; } return tempDir ; } protected final File createTempFile ( ) throws IOException { return File . createTempFile ( <str> , null , getTempDir ( ) ) ; } static byte [ ] newPreFilledByteArray ( int size ) { return newPreFilledByteArray ( <int> , size ) ; } static byte [ ] newPreFilledByteArray ( int offset , int size ) { byte [ ] array = new byte [ size ] ; for ( int i = <int> ; i < size ; i + + ) { array [ i ] = ( byte ) ( offset + i ) ; } return array ; } private static void copy ( URL url , File file ) throws IOException { InputStream in = url . openStream ( ) ; try { OutputStream out = new FileOutputStream ( file ) ; try { byte [ ] buf = new byte [ <int> ] ; for ( int read = in . read ( buf ) ; read ! = - <int> ; read = in . read ( buf ) ) { out . write ( buf , <int> , read ) ; } } finally { out . close ( ) ; } } finally { in . close ( ) ; } } private boolean delete ( File file ) { if ( file . isDirectory ( ) ) { File [ ] files = file . listFiles ( ) ; if ( files ! = null ) { for ( File f : files ) { if ( ! delete ( f ) ) { return false ; } } } } if ( ! file . delete ( ) ) { logger . log ( Level . WARNING , <str> , new Object [ ] { file } ) ; return false ; } return true ; } } 

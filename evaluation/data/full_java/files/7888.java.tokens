package org . elasticsearch . common ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . nio . charset . StandardCharsets ; import java . util . Locale ; import static org . hamcrest . Matchers . is ; public class Base64Tests extends ESTestCase { public void testBase64DecodeWithExtraCharactersAfterPadding ( ) throws Exception { String plain = randomAsciiOfLengthBetween ( <int> , <int> ) + <str> + randomAsciiOfLengthBetween ( <int> , <int> ) ; String encoded = Base64 . encodeBytes ( plain . getBytes ( StandardCharsets . UTF_8 ) ) ; assertValidBase64 ( encoded , plain ) ; char lastChar = encoded . charAt ( encoded . length ( ) - <int> ) ; if ( lastChar = = <str> ) { assertInvalidBase64 ( encoded + randomAsciiOfLength ( <int> ) ) ; } } private void assertValidBase64 ( String base64 , String expected ) throws IOException { String decoded = new String ( Base64 . decode ( base64 . getBytes ( StandardCharsets . UTF_8 ) ) , StandardCharsets . UTF_8 ) ; assertThat ( decoded , is ( expected ) ) ; } private void assertInvalidBase64 ( String base64 ) { try { Base64 . decode ( base64 . getBytes ( StandardCharsets . UTF_8 ) ) ; fail ( String . format ( Locale . ROOT , <str> , base64 , base64 . length ( ) ) ) ; } catch ( IOException e ) { } } } 

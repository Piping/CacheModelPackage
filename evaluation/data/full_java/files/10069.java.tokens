package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . MinimalSet ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; @GwtCompatible public class ListEqualsTester < E > extends AbstractListTester < E > { public void testEquals_otherListWithSameElements ( ) { assertTrue ( <str> , getList ( ) . equals ( new ArrayList < E > ( getOrderedElements ( ) ) ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_otherListWithDifferentElements ( ) { ArrayList < E > other = new ArrayList < E > ( getSampleElements ( ) ) ; other . set ( other . size ( ) / <int> , getSubjectGenerator ( ) . samples ( ) . e3 ( ) ) ; assertFalse ( <str> , getList ( ) . equals ( other ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_otherListContainingNull ( ) { List < E > other = new ArrayList < E > ( getSampleElements ( ) ) ; other . set ( other . size ( ) / <int> , null ) ; assertFalse ( <str> + <str> , getList ( ) . equals ( other ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) public void testEquals_containingNull ( ) { ArrayList < E > elements = new ArrayList < E > ( getSampleElements ( ) ) ; elements . set ( elements . size ( ) / <int> , null ) ; collection = getSubjectGenerator ( ) . create ( elements . toArray ( ) ) ; List < E > other = new ArrayList < E > ( getSampleElements ( ) ) ; assertFalse ( <str> + <str> , getList ( ) . equals ( other ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) public void testEquals_shorterList ( ) { Collection < E > fewerElements = getSampleElements ( getNumElements ( ) - <int> ) ; assertFalse ( <str> , getList ( ) . equals ( new ArrayList < E > ( fewerElements ) ) ) ; } public void testEquals_longerList ( ) { Collection < E > moreElements = getSampleElements ( getNumElements ( ) + <int> ) ; assertFalse ( <str> , getList ( ) . equals ( new ArrayList < E > ( moreElements ) ) ) ; } public void testEquals_set ( ) { assertFalse ( <str> , getList ( ) . equals ( MinimalSet . from ( getList ( ) ) ) ) ; } } 

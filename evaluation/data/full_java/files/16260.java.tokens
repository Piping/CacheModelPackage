package org . gradle . gradleplugin . userinterface . swing . generic . tabs ; import org . gradle . gradleplugin . foundation . GradlePluginLord ; import org . gradle . gradleplugin . foundation . favorites . FavoritesEditor ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . userinterface . swing . generic . Utility ; import javax . swing . * ; import java . awt . * ; import java . awt . event . ActionEvent ; import java . awt . event . KeyEvent ; public class CommandLineTab implements GradleTab { private GradlePluginLord gradlePluginLord ; private FavoritesEditor favoritesEditor ; private JPanel mainPanel ; private JTextField commandLineField ; private JButton executeButton ; private JButton addToFavoritesButton ; public CommandLineTab ( GradlePluginLord gradlePluginLord , SettingsNode settingsNode ) { this . gradlePluginLord = gradlePluginLord ; this . favoritesEditor = gradlePluginLord . getFavoritesEditor ( ) ; } public String getName ( ) { return <str> ; } public void aboutToShow ( ) { } public Component createComponent ( ) { JPanel mainPanel = new JPanel ( new BorderLayout ( ) ) ; mainPanel . add ( createCommandLinePanel ( ) , BorderLayout . NORTH ) ; mainPanel . add ( Box . createVerticalGlue ( ) , BorderLayout . CENTER ) ; mainPanel . setBorder ( BorderFactory . createEmptyBorder ( <int> , <int> , <int> , <int> ) ) ; return mainPanel ; } private Component createCommandLinePanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS ) ) ; commandLineField = new JTextField ( ) ; commandLineField . registerKeyboardAction ( new ExecuteAction ( ) , KeyStroke . getKeyStroke ( KeyEvent . VK_ENTER , <int> ) , JComponent . WHEN_IN_FOCUSED_WINDOW ) ; JPanel commandLinePanel = new JPanel ( ) ; commandLinePanel . setLayout ( new BoxLayout ( commandLinePanel , BoxLayout . X_AXIS ) ) ; commandLinePanel . add ( new JLabel ( <str> ) ) ; commandLinePanel . add ( commandLineField ) ; panel . add ( Utility . addLeftJustifiedComponent ( new JLabel ( <str> ) ) ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( commandLinePanel ) ; panel . add ( Box . createVerticalStrut ( <int> ) ) ; panel . add ( createButtonPanel ( ) ) ; return panel ; } private class ExecuteAction extends AbstractAction { private ExecuteAction ( ) { super ( <str> ) ; } public void actionPerformed ( ActionEvent e ) { executeCommandLine ( ) ; } } private Component createButtonPanel ( ) { JPanel panel = new JPanel ( ) ; panel . setLayout ( new BoxLayout ( panel , BoxLayout . X_AXIS ) ) ; executeButton = new JButton ( new ExecuteAction ( ) ) ; addToFavoritesButton = new JButton ( new AbstractAction ( <str> ) { public void actionPerformed ( ActionEvent e ) { addToFavorites ( ) ; } } ) ; panel . add ( Box . createHorizontalGlue ( ) ) ; panel . add ( executeButton ) ; panel . add ( Box . createHorizontalStrut ( <int> ) ) ; panel . add ( addToFavoritesButton ) ; return panel ; } private void addToFavorites ( ) { String commandLineText = commandLineField . getText ( ) ; favoritesEditor . addFavorite ( commandLineText , false ) ; } private void executeCommandLine ( ) { String commandLineText = commandLineField . getText ( ) ; gradlePluginLord . addExecutionRequestToQueue ( commandLineText , <str> ) ; } } 

package org . apache . cassandra . service ; import java . io . IOException ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . nio . ByteBuffer ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . TimeoutException ; import javax . management . NotificationEmitter ; import javax . management . openmbean . TabularData ; public interface StorageServiceMBean extends NotificationEmitter { public List < String > getLiveNodes ( ) ; public List < String > getUnreachableNodes ( ) ; public List < String > getJoiningNodes ( ) ; public List < String > getLeavingNodes ( ) ; public List < String > getMovingNodes ( ) ; public List < String > getTokens ( ) ; public List < String > getTokens ( String endpoint ) throws UnknownHostException ; public String getReleaseVersion ( ) ; public String getSchemaVersion ( ) ; public String [ ] getAllDataFileLocations ( ) ; public String getCommitLogLocation ( ) ; public String getSavedCachesLocation ( ) ; public Map < List < String > , List < String > > getRangeToEndpointMap ( String keyspace ) ; public Map < List < String > , List < String > > getRangeToRpcaddressMap ( String keyspace ) ; public List < String > describeRingJMX ( String keyspace ) throws IOException ; public Map < List < String > , List < String > > getPendingRangeToEndpointMap ( String keyspace ) ; public Map < String , String > getTokenToEndpointMap ( ) ; public String getLocalHostId ( ) ; @Deprecated public Map < String , String > getHostIdMap ( ) ; public Map < String , String > getEndpointToHostId ( ) ; public Map < String , String > getHostIdToEndpoint ( ) ; public String getLoadString ( ) ; public Map < String , String > getLoadMap ( ) ; public int getCurrentGenerationNumber ( ) ; public List < InetAddress > getNaturalEndpoints ( String keyspaceName , String cf , String key ) ; public List < InetAddress > getNaturalEndpoints ( String keyspaceName , ByteBuffer key ) ; public void takeSnapshot ( String tag , String . . . keyspaceNames ) throws IOException ; public void takeTableSnapshot ( String keyspaceName , String tableName , String tag ) throws IOException ; public void takeMultipleTableSnapshot ( String tag , String . . . tableList ) throws IOException ; public void clearSnapshot ( String tag , String . . . keyspaceNames ) throws IOException ; public Map < String , TabularData > getSnapshotDetails ( ) ; public long trueSnapshotsSize ( ) ; public void refreshSizeEstimates ( ) throws ExecutionException ; public void forceKeyspaceCompaction ( boolean splitOutput , String keyspaceName , String . . . tableNames ) throws IOException , ExecutionException , InterruptedException ; public int forceKeyspaceCleanup ( String keyspaceName , String . . . tables ) throws IOException , ExecutionException , InterruptedException ; @Deprecated public int scrub ( boolean disableSnapshot , boolean skipCorrupted , String keyspaceName , String . . . tableNames ) throws IOException , ExecutionException , InterruptedException ; public int scrub ( boolean disableSnapshot , boolean skipCorrupted , boolean checkData , String keyspaceName , String . . . tableNames ) throws IOException , ExecutionException , InterruptedException ; public int verify ( boolean extendedVerify , String keyspaceName , String . . . tableNames ) throws IOException , ExecutionException , InterruptedException ; public int upgradeSSTables ( String keyspaceName , boolean excludeCurrentVersion , String . . . tableNames ) throws IOException , ExecutionException , InterruptedException ; public void forceKeyspaceFlush ( String keyspaceName , String . . . tableNames ) throws IOException , ExecutionException , InterruptedException ; public int repairAsync ( String keyspace , Map < String , String > options ) ; @Deprecated public int forceRepairAsync ( String keyspace , boolean isSequential , Collection < String > dataCenters , Collection < String > hosts , boolean primaryRange , boolean fullRepair , String . . . tableNames ) throws IOException ; @Deprecated public int forceRepairAsync ( String keyspace , int parallelismDegree , Collection < String > dataCenters , Collection < String > hosts , boolean primaryRange , boolean fullRepair , String . . . tableNames ) ; @Deprecated public int forceRepairRangeAsync ( String beginToken , String endToken , String keyspaceName , boolean isSequential , Collection < String > dataCenters , Collection < String > hosts , boolean fullRepair , String . . . tableNames ) throws IOException ; @Deprecated public int forceRepairRangeAsync ( String beginToken , String endToken , String keyspaceName , int parallelismDegree , Collection < String > dataCenters , Collection < String > hosts , boolean fullRepair , String . . . tableNames ) ; @Deprecated public int forceRepairAsync ( String keyspace , boolean isSequential , boolean isLocal , boolean primaryRange , boolean fullRepair , String . . . tableNames ) ; @Deprecated public int forceRepairRangeAsync ( String beginToken , String endToken , String keyspaceName , boolean isSequential , boolean isLocal , boolean fullRepair , String . . . tableNames ) ; public void forceTerminateAllRepairSessions ( ) ; public void decommission ( ) throws InterruptedException ; public void move ( String newToken ) throws IOException ; public void removeNode ( String token ) ; public String getRemovalStatus ( ) ; public void forceRemoveCompletion ( ) ; public void setLoggingLevel ( String classQualifier , String level ) throws Exception ; public Map < String , String > getLoggingLevels ( ) ; public String getOperationMode ( ) ; public boolean isStarting ( ) ; public String getDrainProgress ( ) ; public void drain ( ) throws IOException , InterruptedException , ExecutionException ; public void truncate ( String keyspace , String table ) throws TimeoutException , IOException ; public Map < InetAddress , Float > getOwnership ( ) ; public Map < InetAddress , Float > effectiveOwnership ( String keyspace ) throws IllegalStateException ; public List < String > getKeyspaces ( ) ; public List < String > getNonSystemKeyspaces ( ) ; public void updateSnitch ( String epSnitchClassName , Boolean dynamic , Integer dynamicUpdateInterval , Integer dynamicResetInterval , Double dynamicBadnessThreshold ) throws ClassNotFoundException ; public void stopGossiping ( ) ; public void startGossiping ( ) ; public boolean isGossipRunning ( ) ; public void stopDaemon ( ) ; public boolean isInitialized ( ) ; public void stopRPCServer ( ) ; public void startRPCServer ( ) ; public boolean isRPCServerRunning ( ) ; public void stopNativeTransport ( ) ; public void startNativeTransport ( ) ; public boolean isNativeTransportRunning ( ) ; public void joinRing ( ) throws IOException ; public boolean isJoined ( ) ; public void setStreamThroughputMbPerSec ( int value ) ; public int getStreamThroughputMbPerSec ( ) ; public int getCompactionThroughputMbPerSec ( ) ; public void setCompactionThroughputMbPerSec ( int value ) ; public boolean isIncrementalBackupsEnabled ( ) ; public void setIncrementalBackupsEnabled ( boolean value ) ; public void rebuild ( String sourceDc ) ; public void bulkLoad ( String directory ) ; public String bulkLoadAsync ( String directory ) ; public void rescheduleFailedDeletions ( ) ; public void loadNewSSTables ( String ksName , String tableName ) ; public List < String > sampleKeyRange ( ) ; public void rebuildSecondaryIndex ( String ksName , String cfName , String . . . idxNames ) ; public void resetLocalSchema ( ) throws IOException ; public void setTraceProbability ( double probability ) ; public double getTraceProbability ( ) ; void disableAutoCompaction ( String ks , String . . . tables ) throws IOException ; void enableAutoCompaction ( String ks , String . . . tables ) throws IOException ; public void deliverHints ( String host ) throws UnknownHostException ; public String getClusterName ( ) ; public String getPartitionerName ( ) ; public int getTombstoneWarnThreshold ( ) ; public void setTombstoneWarnThreshold ( int tombstoneDebugThreshold ) ; public int getTombstoneFailureThreshold ( ) ; public void setTombstoneFailureThreshold ( int tombstoneDebugThreshold ) ; public int getBatchSizeFailureThreshold ( ) ; public void setBatchSizeFailureThreshold ( int batchSizeDebugThreshold ) ; public void setHintedHandoffThrottleInKB ( int throttleInKB ) ; public boolean resumeBootstrap ( ) ; } 

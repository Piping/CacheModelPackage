package io . netty . handler . codec . dns ; import io . netty . buffer . ByteBuf ; import io . netty . util . internal . StringUtil ; import static io . netty . util . internal . ObjectUtil . checkNotNull ; public class DefaultDnsRawRecord extends AbstractDnsRecord implements DnsRawRecord { private final ByteBuf content ; public DefaultDnsRawRecord ( String name , DnsRecordType type , long timeToLive , ByteBuf content ) { this ( name , type , DnsRecord . CLASS_IN , timeToLive , content ) ; } public DefaultDnsRawRecord ( String name , DnsRecordType type , int dnsClass , long timeToLive , ByteBuf content ) { super ( name , type , dnsClass , timeToLive ) ; this . content = checkNotNull ( content , <str> ) ; } @Override public ByteBuf content ( ) { return content ; } @Override public DnsRawRecord copy ( ) { return new DefaultDnsRawRecord ( name ( ) , type ( ) , dnsClass ( ) , timeToLive ( ) , content ( ) . copy ( ) ) ; } @Override public DnsRawRecord duplicate ( ) { return new DefaultDnsRawRecord ( name ( ) , type ( ) , dnsClass ( ) , timeToLive ( ) , content ( ) . duplicate ( ) ) ; } @Override public int refCnt ( ) { return content ( ) . refCnt ( ) ; } @Override public DnsRawRecord retain ( ) { content ( ) . retain ( ) ; return this ; } @Override public DnsRawRecord retain ( int increment ) { content ( ) . retain ( increment ) ; return this ; } @Override public boolean release ( ) { return content ( ) . release ( ) ; } @Override public boolean release ( int decrement ) { return content ( ) . release ( decrement ) ; } @Override public DnsRawRecord touch ( ) { content ( ) . touch ( ) ; return this ; } @Override public DnsRawRecord touch ( Object hint ) { content ( ) . touch ( hint ) ; return this ; } @Override public String toString ( ) { final StringBuilder buf = new StringBuilder ( <int> ) . append ( StringUtil . simpleClassName ( this ) ) . append ( <str> ) ; final DnsRecordType type = type ( ) ; if ( type ! = DnsRecordType . OPT ) { buf . append ( name ( ) . isEmpty ( ) ? <str> : name ( ) ) . append ( <str> ) . append ( timeToLive ( ) ) . append ( <str> ) ; DnsMessageUtil . appendRecordClass ( buf , dnsClass ( ) ) . append ( <str> ) . append ( type . name ( ) ) ; } else { buf . append ( <str> ) . append ( timeToLive ( ) ) . append ( <str> ) . append ( dnsClass ( ) ) ; } buf . append ( <str> ) . append ( content ( ) . readableBytes ( ) ) . append ( <str> ) ; return buf . toString ( ) ; } } 

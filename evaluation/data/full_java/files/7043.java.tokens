package org . elasticsearch . rest . action . get ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . get . GetRequest ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . search . fetch . source . FetchSourceContext ; import java . io . IOException ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestStatus . NOT_FOUND ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestGetSourceAction extends BaseRestHandler { @Inject public RestGetSourceAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final GetRequest getRequest = new GetRequest ( request . param ( <str> ) , request . param ( <str> ) , request . param ( <str> ) ) ; getRequest . operationThreaded ( true ) ; getRequest . refresh ( request . paramAsBoolean ( <str> , getRequest . refresh ( ) ) ) ; getRequest . routing ( request . param ( <str> ) ) ; getRequest . parent ( request . param ( <str> ) ) ; getRequest . preference ( request . param ( <str> ) ) ; getRequest . realtime ( request . paramAsBoolean ( <str> , null ) ) ; getRequest . fetchSourceContext ( FetchSourceContext . parseFromRestRequest ( request ) ) ; if ( getRequest . fetchSourceContext ( ) ! = null & & ! getRequest . fetchSourceContext ( ) . fetchSource ( ) ) { try { ActionRequestValidationException validationError = new ActionRequestValidationException ( ) ; validationError . addValidationError ( <str> ) ; channel . sendResponse ( new BytesRestResponse ( channel , validationError ) ) ; } catch ( IOException e ) { logger . error ( <str> , e ) ; } } client . get ( getRequest , new RestResponseListener < GetResponse > ( channel ) { @Override public RestResponse buildResponse ( GetResponse response ) throws Exception { XContentBuilder builder = channel . newBuilder ( response . getSourceInternal ( ) , false ) ; if ( ! response . isExists ( ) ) { return new BytesRestResponse ( NOT_FOUND , builder ) ; } else { builder . rawValue ( response . getSourceInternal ( ) ) ; return new BytesRestResponse ( OK , builder ) ; } } } ) ; } } 

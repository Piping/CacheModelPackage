package org . gradle . integtests ; import org . gradle . integtests . fixtures . AbstractIntegrationTest ; import org . gradle . integtests . fixtures . executer . ExecutionFailure ; import org . gradle . test . fixtures . file . TestFile ; import org . junit . Test ; import java . io . File ; import static org . hamcrest . Matchers . endsWith ; import static org . hamcrest . Matchers . startsWith ; public class ProjectLoadingIntegrationTest extends AbstractIntegrationTest { @Test public void handlesSimilarlyNamedBuildFilesInSameDirectory ( ) { TestFile buildFile1 = testFile ( <str> ) . write ( <str> ) ; TestFile buildFile2 = testFile ( <str> ) . write ( <str> ) ; usingBuildFile ( buildFile1 ) . withTasks ( <str> ) . run ( ) ; usingBuildFile ( buildFile2 ) . withTasks ( <str> ) . run ( ) ; usingBuildFile ( buildFile1 ) . withTasks ( <str> ) . run ( ) ; } @Test public void handlesWhitespaceOnlySettingsAndBuildFiles ( ) { testFile ( <str> ) . write ( <str> ) ; testFile ( <str> ) . write ( <str> ) ; inTestDirectory ( ) . withTaskList ( ) . run ( ) ; } @Test public void canDetermineRootProjectAndDefaultProjectBasedOnCurrentDirectory ( ) { File rootDir = getTestDirectory ( ) ; File childDir = new File ( rootDir , <str> ) ; testFile ( <str> ) . write ( <str> ) ; testFile ( <str> ) . write ( <str> ) ; testFile ( <str> ) . write ( <str> ) ; inDirectory ( rootDir ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> , <str> ) ; inDirectory ( rootDir ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; inDirectory ( childDir ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; inDirectory ( childDir ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; } @Test public void canDetermineRootProjectAndDefaultProjectBasedOnProjectDirectory ( ) { File rootDir = getTestDirectory ( ) ; File childDir = new File ( rootDir , <str> ) ; testFile ( <str> ) . write ( <str> ) ; testFile ( <str> ) . write ( <str> ) ; testFile ( <str> ) . write ( <str> ) ; usingProjectDir ( rootDir ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> , <str> ) ; usingProjectDir ( rootDir ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; usingProjectDir ( childDir ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; usingProjectDir ( childDir ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; } @Test public void canDetermineRootProjectAndDefaultProjectBasedOnBuildFile ( ) { testFile ( <str> ) . write ( <str> ) ; TestFile rootBuildFile = testFile ( <str> ) ; rootBuildFile . write ( <str> ) ; TestFile childBuildFile = testFile ( <str> ) ; childBuildFile . write ( <str> ) ; usingBuildFile ( rootBuildFile ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> , <str> ) ; usingBuildFile ( rootBuildFile ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; usingBuildFile ( childBuildFile ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; usingBuildFile ( childBuildFile ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; } @Test public void buildFailsWhenMultipleProjectsMeetDefaultProjectCriteria ( ) { testFile ( <str> ) . writelns ( <str> , <str> ) ; testFile ( <str> ) . write ( <str> ) ; ExecutionFailure result = inTestDirectory ( ) . withTasks ( <str> ) . runWithFailure ( ) ; result . assertThatDescription ( startsWith ( <str> ) ) ; result = usingProjectDir ( getTestDirectory ( ) ) . withTasks ( <str> ) . runWithFailure ( ) ; result . assertThatDescription ( startsWith ( <str> ) ) ; result = usingBuildFile ( testFile ( <str> ) ) . withTasks ( <str> ) . runWithFailure ( ) ; result . assertThatDescription ( startsWith ( <str> ) ) ; } @Test public void buildFailsWhenSpecifiedBuildFileIsNotAFile ( ) { ExecutionFailure result = usingBuildFile ( testFile ( <str> ) ) . runWithFailure ( ) ; result . assertThatDescription ( startsWith ( <str> ) ) ; result . assertThatDescription ( endsWith ( <str> ) ) ; } @Test public void buildFailsWhenSpecifiedProjectDirectoryIsNotADirectory ( ) { ExecutionFailure result = usingProjectDir ( testFile ( <str> ) ) . runWithFailure ( ) ; result . assertThatDescription ( startsWith ( <str> ) ) ; result . assertThatDescription ( endsWith ( <str> ) ) ; } @Test public void buildFailsWhenSpecifiedSettingsFileIsNotAFile ( ) { ExecutionFailure result = inTestDirectory ( ) . usingSettingsFile ( testFile ( <str> ) ) . runWithFailure ( ) ; result . assertThatDescription ( startsWith ( <str> ) ) ; result . assertThatDescription ( endsWith ( <str> ) ) ; } @Test public void buildFailsWhenSpecifiedSettingsFileDoesNotContainMatchingProject ( ) { TestFile settingsFile = testFile ( <str> ) ; settingsFile . write ( <str> ) ; TestFile projectDir = testFile ( <str> ) ; TestFile buildFile = projectDir . file ( <str> ) . createFile ( ) ; ExecutionFailure result = usingProjectDir ( projectDir ) . usingSettingsFile ( settingsFile ) . runWithFailure ( ) ; result . assertHasDescription ( String . format ( <str> , projectDir ) ) ; result = usingBuildFile ( buildFile ) . usingSettingsFile ( settingsFile ) . runWithFailure ( ) ; result . assertHasDescription ( String . format ( <str> , buildFile ) ) ; } @Test public void settingsFileTakesPrecedenceOverBuildFileInSameDirectory ( ) { testFile ( <str> ) . write ( <str> ) ; testFile ( <str> ) . write ( <str> ) ; TestFile buildFile = testFile ( <str> ) ; buildFile . write ( <str> ) ; inTestDirectory ( ) . withTasks ( <str> ) . run ( ) ; usingProjectDir ( getTestDirectory ( ) ) . withTasks ( <str> ) . run ( ) ; } @Test public void settingsFileInParentDirectoryTakesPrecedenceOverBuildFile ( ) { testFile ( <str> ) . writelns ( <str> , <str> ) ; TestFile subDirectory = getTestDirectory ( ) . file ( <str> ) ; subDirectory . file ( <str> ) . write ( <str> ) ; subDirectory . file ( <str> ) . write ( <str> ) ; inDirectory ( subDirectory ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) ; usingProjectDir ( subDirectory ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) ; } @Test public void explicitBuildFileTakesPrecedenceOverSettingsFileInSameDirectory ( ) { testFile ( <str> ) . write ( <str> ) ; testFile ( <str> ) . write ( <str> ) ; TestFile buildFile = testFile ( <str> ) ; buildFile . write ( <str> ) ; usingBuildFile ( buildFile ) . withTasks ( <str> ) . run ( ) ; } @Test public void ignoresMultiProjectBuildInParentDirectoryWhichDoesNotMeetDefaultProjectCriteria ( ) { testFile ( <str> ) . write ( <str> ) ; testFile ( <str> ) . writelns ( <str> , <str> ) ; TestFile subDirectory = getTestDirectory ( ) . file ( <str> ) ; TestFile buildFile = subDirectory . file ( <str> ) ; buildFile . writelns ( <str> , <str> , <str> , <str> ) ; testFile ( <str> ) . write ( <str> ) ; inDirectory ( subDirectory ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) ; usingProjectDir ( subDirectory ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) ; usingBuildFile ( buildFile ) . withSearchUpwards ( ) . withTasks ( <str> ) . run ( ) ; } @Test public void multiProjectBuildCanHaveMultipleProjectsWithSameProjectDir ( ) { testFile ( <str> ) . writelns ( <str> , <str> , <str> ) ; testFile ( <str> ) . write ( <str> ) ; inTestDirectory ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> , <str> ) ; } @Test public void multiProjectBuildCanHaveSeveralProjectsWithSameBuildFile ( ) { testFile ( <str> ) . writelns ( <str> , <str> , <str> ) ; testFile ( <str> ) . write ( <str> ) ; inTestDirectory ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> , <str> ) ; } @Test public void multiProjectBuildCanHaveSettingsFileAndRootBuildFileInSubDir ( ) { TestFile buildFilesDir = getTestDirectory ( ) . file ( <str> ) ; TestFile settingsFile = buildFilesDir . file ( <str> ) ; settingsFile . writelns ( <str> , <str> , <str> ) ; TestFile rootBuildFile = buildFilesDir . file ( <str> ) ; rootBuildFile . write ( <str> ) ; TestFile childBuildFile = testFile ( <str> ) ; childBuildFile . writelns ( <str> , <str> ) ; usingProjectDir ( getTestDirectory ( ) ) . usingSettingsFile ( settingsFile ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> , <str> , <str> ) ; usingBuildFile ( rootBuildFile ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> , <str> , <str> ) ; usingBuildFile ( childBuildFile ) . usingSettingsFile ( settingsFile ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; } @Test public void multiProjectBuildCanHaveAllProjectsAsChildrenOfSettingsDir ( ) { TestFile settingsFile = testFile ( <str> ) ; settingsFile . writelns ( <str> , <str> , <str> ) ; getTestDirectory ( ) . createDir ( <str> ) . file ( <str> ) . writelns ( <str> ) ; inTestDirectory ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; inTestDirectory ( ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; } @Test public void usesRootProjectAsDefaultProjectWhenInSettingsDir ( ) { TestFile settingsDir = testFile ( <str> ) ; TestFile settingsFile = settingsDir . file ( <str> ) ; settingsFile . writelns ( <str> , <str> , <str> ) ; getTestDirectory ( ) . createDir ( <str> ) . file ( <str> ) . writelns ( <str> ) ; inDirectory ( settingsDir ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> , <str> ) ; } @Test public void rootProjectDirectoryAndBuildFileDoNotHaveToExistWhenInSettingsDir ( ) { TestFile settingsDir = testFile ( <str> ) ; TestFile settingsFile = settingsDir . file ( <str> ) ; settingsFile . writelns ( <str> , <str> , <str> ) ; getTestDirectory ( ) . createDir ( <str> ) . file ( <str> ) . writelns ( <str> ) ; inDirectory ( settingsDir ) . withTasks ( <str> ) . run ( ) . assertTasksExecuted ( <str> ) ; } @Test public void settingsFileGetsIgnoredWhenUsingSettingsOnlyDirectoryAsProjectDirectory ( ) { TestFile settingsDir = testFile ( <str> ) ; TestFile settingsFile = settingsDir . file ( <str> ) ; settingsFile . writelns ( <str> ) ; getTestDirectory ( ) . createDir ( <str> ) . file ( <str> ) . writelns ( <str> ) ; inTestDirectory ( ) . withArguments ( <str> , settingsDir . getAbsolutePath ( ) ) . withTasks ( <str> ) . runWithFailure ( ) . assertHasDescription ( <str> ) ; } @Test public void cannotUseDirectoryAsBuildFile ( ) { TestFile settingsDir = testFile ( <str> ) . createDir ( ) ; inTestDirectory ( ) . withArguments ( <str> , settingsDir . getAbsolutePath ( ) ) . withTasks ( <str> ) . runWithFailure ( ) . assertHasDescription ( String . format ( <str> , settingsDir . getAbsolutePath ( ) ) ) ; } } 

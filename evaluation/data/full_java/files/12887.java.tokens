package org . gradle . internal . resource . cached . ivy ; import org . gradle . api . internal . artifacts . ivyservice . CacheLockingManager ; import org . gradle . internal . resource . cached . CachedItem ; import org . gradle . cache . PersistentIndexedCache ; import org . gradle . internal . Factory ; import org . gradle . internal . serialize . Serializer ; import java . io . File ; abstract public class AbstractCachedIndex < K , V extends CachedItem > { private final String persistentCacheFile ; private final Serializer < K > keySerializer ; private final Serializer < V > valueSerializer ; private final CacheLockingManager cacheLockingManager ; private PersistentIndexedCache < K , V > persistentCache ; public AbstractCachedIndex ( String persistentCacheFile , Serializer < K > keySerializer , Serializer < V > valueSerializer , CacheLockingManager cacheLockingManager ) { this . persistentCacheFile = persistentCacheFile ; this . keySerializer = keySerializer ; this . valueSerializer = valueSerializer ; this . cacheLockingManager = cacheLockingManager ; } private PersistentIndexedCache < K , V > getPersistentCache ( ) { if ( persistentCache = = null ) { persistentCache = initPersistentCache ( ) ; } return persistentCache ; } private PersistentIndexedCache < K , V > initPersistentCache ( ) { return cacheLockingManager . createCache ( persistentCacheFile , keySerializer , valueSerializer ) ; } private String operationName ( String action ) { return String . format ( <str> , action , persistentCacheFile ) ; } public V lookup ( final K key ) { assertKeyNotNull ( key ) ; return cacheLockingManager . useCache ( operationName ( <str> ) , new Factory < V > ( ) { public V create ( ) { V found = getPersistentCache ( ) . get ( key ) ; if ( found = = null ) { return null ; } else if ( found . isMissing ( ) | | found . getCachedFile ( ) . exists ( ) ) { return found ; } else { clear ( key ) ; return null ; } } } ) ; } protected void storeInternal ( final K key , final V entry ) { cacheLockingManager . useCache ( operationName ( <str> ) , new Runnable ( ) { public void run ( ) { getPersistentCache ( ) . put ( key , entry ) ; } } ) ; } protected void assertKeyNotNull ( K key ) { if ( key = = null ) { throw new IllegalArgumentException ( <str> ) ; } } protected void assertArtifactFileNotNull ( File artifactFile ) { if ( artifactFile = = null ) { throw new IllegalArgumentException ( <str> ) ; } } public void clear ( final K key ) { assertKeyNotNull ( key ) ; cacheLockingManager . useCache ( operationName ( <str> ) , new Runnable ( ) { public void run ( ) { getPersistentCache ( ) . remove ( key ) ; } } ) ; } } 

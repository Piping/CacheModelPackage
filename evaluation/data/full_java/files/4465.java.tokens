package org . eclipse . debug . internal . ui . viewers . update ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ModelDelta ; import org . eclipse . debug . internal . ui . viewers . provisional . AbstractModelProxy ; public abstract class DebugEventHandler { private AbstractModelProxy fModelProxy ; public DebugEventHandler ( AbstractModelProxy proxy ) { fModelProxy = proxy ; } public synchronized void dispose ( ) { fModelProxy = null ; } protected synchronized AbstractModelProxy getModelProxy ( ) { return fModelProxy ; } protected abstract boolean handlesEvent ( DebugEvent event ) ; protected void handleCreate ( DebugEvent event ) { refreshRoot ( event ) ; } protected void handleTerminate ( DebugEvent event ) { refreshRoot ( event ) ; } protected void handleSuspend ( DebugEvent event ) { refreshRoot ( event ) ; } protected void handleResumeExpectingSuspend ( DebugEvent event ) { } protected void handleResume ( DebugEvent event ) { refreshRoot ( event ) ; } protected void handleChange ( DebugEvent event ) { refreshRoot ( event ) ; } protected void handleOther ( DebugEvent event ) { refreshRoot ( event ) ; } protected void handleSuspendTimeout ( DebugEvent event ) { refreshRoot ( event ) ; } protected void handleLateSuspend ( DebugEvent suspend , DebugEvent resume ) { refreshRoot ( suspend ) ; } protected void refreshRoot ( DebugEvent event ) { ModelDelta delta = new ModelDelta ( DebugPlugin . getDefault ( ) . getLaunchManager ( ) , IModelDelta . CONTENT ) ; fireDelta ( delta ) ; } protected void fireDelta ( IModelDelta delta ) { AbstractModelProxy modelProxy = getModelProxy ( ) ; if ( modelProxy ! = null ) { modelProxy . fireModelChanged ( delta ) ; } } protected synchronized boolean isDisposed ( ) { return fModelProxy = = null ; } protected int indexOf ( Object [ ] list , Object element ) { for ( int i = <int> ; i < list . length ; i + + ) { if ( element . equals ( list [ i ] ) ) { return i ; } } return - <int> ; } } 

package org . gradle . plugins . ide . internal . tooling ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . internal . tasks . TaskContainerInternal ; import org . gradle . tooling . internal . gradle . DefaultGradleProject ; import org . gradle . plugins . ide . internal . tooling . model . LaunchableGradleProjectTask ; import org . gradle . plugins . ide . internal . tooling . model . LaunchableGradleTask ; import org . gradle . tooling . provider . model . ToolingModelBuilder ; import java . util . ArrayList ; import java . util . List ; import java . util . SortedSet ; import static org . gradle . plugins . ide . internal . tooling . ToolingModelBuilderSupport . buildFromTask ; public class GradleProjectBuilder implements ToolingModelBuilder { public boolean canBuild ( String modelName ) { return modelName . equals ( <str> ) ; } public Object buildAll ( String modelName , Project project ) { return buildHierarchy ( project . getRootProject ( ) ) ; } public DefaultGradleProject buildAll ( Project project ) { return buildHierarchy ( project . getRootProject ( ) ) ; } private DefaultGradleProject < LaunchableGradleTask > buildHierarchy ( Project project ) { List < DefaultGradleProject < LaunchableGradleTask > > children = new ArrayList < DefaultGradleProject < LaunchableGradleTask > > ( ) ; for ( Project child : project . getChildProjects ( ) . values ( ) ) { children . add ( buildHierarchy ( child ) ) ; } DefaultGradleProject < LaunchableGradleTask > gradleProject = new DefaultGradleProject < LaunchableGradleTask > ( ) . setPath ( project . getPath ( ) ) . setName ( project . getName ( ) ) . setDescription ( project . getDescription ( ) ) . setBuildDirectory ( project . getBuildDir ( ) ) . setProjectDirectory ( project . getProjectDir ( ) ) . setChildren ( children ) ; gradleProject . getBuildScript ( ) . setSourceFile ( project . getBuildFile ( ) ) ; gradleProject . setTasks ( tasks ( gradleProject , ( TaskContainerInternal ) project . getTasks ( ) ) ) ; for ( DefaultGradleProject child : children ) { child . setParent ( gradleProject ) ; } return gradleProject ; } private static List < LaunchableGradleTask > tasks ( DefaultGradleProject owner , TaskContainerInternal tasks ) { tasks . discoverTasks ( ) ; SortedSet < String > taskNames = tasks . getNames ( ) ; List < LaunchableGradleTask > out = new ArrayList < LaunchableGradleTask > ( taskNames . size ( ) ) ; for ( String taskName : taskNames ) { Task t = tasks . findByName ( taskName ) ; if ( t ! = null ) { out . add ( buildFromTask ( new LaunchableGradleProjectTask ( ) , t ) . setProject ( owner ) ) ; } } return out ; } } 

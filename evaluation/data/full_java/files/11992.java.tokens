package org . gradle . initialization ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . internal . project . ProjectIdentifier ; import org . gradle . api . internal . project . ProjectRegistry ; import java . io . File ; import java . util . List ; public class BuildFileProjectSpec extends AbstractProjectSpec { private final File buildFile ; public BuildFileProjectSpec ( File buildFile ) { this . buildFile = buildFile ; } protected String formatNoMatchesMessage ( ) { return String . format ( <str> , buildFile ) ; } protected String formatMultipleMatchesMessage ( Iterable < ? extends ProjectIdentifier > matches ) { return String . format ( <str> , buildFile , matches ) ; } @Override protected < T extends ProjectIdentifier > void select ( ProjectRegistry < ? extends T > candidates , List < ? super T > matches ) { for ( T candidate : candidates . getAllProjects ( ) ) { if ( candidate . getBuildFile ( ) . equals ( buildFile ) ) { matches . add ( candidate ) ; } } } @Override protected void checkPreconditions ( ProjectRegistry < ? > registry ) { if ( ! buildFile . exists ( ) ) { throw new InvalidUserDataException ( String . format ( <str> , buildFile ) ) ; } if ( ! buildFile . isFile ( ) ) { throw new InvalidUserDataException ( String . format ( <str> , buildFile ) ) ; } } } 

package org . elasticsearch . search . aggregations . support . values ; import org . apache . lucene . search . Scorer ; import org . apache . lucene . util . LongValues ; import org . elasticsearch . common . lucene . ScorerAware ; import org . elasticsearch . index . fielddata . SortingNumericDocValues ; import org . elasticsearch . script . LeafSearchScript ; import org . elasticsearch . search . aggregations . AggregationExecutionException ; import java . lang . reflect . Array ; import java . util . Collection ; import java . util . Iterator ; public class ScriptLongValues extends SortingNumericDocValues implements ScorerAware { final LeafSearchScript script ; public ScriptLongValues ( LeafSearchScript script ) { super ( ) ; this . script = script ; } @Override public void setDocument ( int docId ) { script . setDocument ( docId ) ; final Object value = script . run ( ) ; if ( value = = null ) { resize ( <int> ) ; } else if ( value instanceof Number ) { resize ( <int> ) ; values [ <int> ] = ( ( Number ) value ) . longValue ( ) ; } else if ( value . getClass ( ) . isArray ( ) ) { resize ( Array . getLength ( value ) ) ; for ( int i = <int> ; i < count ( ) ; + + i ) { values [ i ] = ( ( Number ) Array . get ( value , i ) ) . longValue ( ) ; } } else if ( value instanceof Collection ) { resize ( ( ( Collection < ? > ) value ) . size ( ) ) ; int i = <int> ; for ( Iterator < ? > it = ( ( Collection < ? > ) value ) . iterator ( ) ; it . hasNext ( ) ; + + i ) { values [ i ] = ( ( Number ) it . next ( ) ) . longValue ( ) ; } assert i = = count ( ) ; } else { throw new AggregationExecutionException ( <str> + value + <str> ) ; } sort ( ) ; } @Override public void setScorer ( Scorer scorer ) { script . setScorer ( scorer ) ; } } 

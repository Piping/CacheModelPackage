package org . apache . cassandra . stress . operations . predefined ; import java . nio . ByteBuffer ; import java . util . ArrayList ; import java . util . List ; import org . apache . cassandra . stress . generate . Distribution ; import org . apache . cassandra . stress . generate . DistributionFactory ; import org . apache . cassandra . stress . generate . PartitionGenerator ; import org . apache . cassandra . stress . generate . SeedManager ; import org . apache . cassandra . stress . settings . Command ; import org . apache . cassandra . stress . settings . StressSettings ; import org . apache . cassandra . stress . util . Timer ; public class CqlCounterAdder extends CqlOperation < Integer > { final Distribution counteradd ; public CqlCounterAdder ( DistributionFactory counteradd , Timer timer , PartitionGenerator generator , SeedManager seedManager , StressSettings settings ) { super ( Command . COUNTER_WRITE , timer , generator , seedManager , settings ) ; this . counteradd = counteradd . get ( ) ; } @Override protected String buildQuery ( ) { StringBuilder query = new StringBuilder ( <str> ) ; for ( int i = <int> ; i < settings . columns . maxColumnsPerKey ; i + + ) { if ( i > <int> ) query . append ( <str> ) ; String name = wrapInQuotes ( settings . columns . namestrs . get ( i ) ) ; query . append ( name ) . append ( <str> ) . append ( name ) . append ( <str> ) ; } query . append ( <str> ) ; return query . toString ( ) ; } @Override protected List < Object > getQueryParameters ( byte [ ] key ) { final List < Object > list = new ArrayList < > ( ) ; for ( int i = <int> ; i < settings . columns . maxColumnsPerKey ; i + + ) list . add ( counteradd . next ( ) ) ; list . add ( ByteBuffer . wrap ( key ) ) ; return list ; } @Override protected CqlRunOp < Integer > buildRunOp ( ClientWrapper client , String query , Object queryId , List < Object > params , ByteBuffer key ) { return new CqlRunOpAlwaysSucceed ( client , query , queryId , params , key , <int> ) ; } public boolean isWrite ( ) { return true ; } } 

package org . elasticsearch . index . query ; import org . elasticsearch . common . ParseField ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . geo . GeoDistance ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . geo . GeoUtils ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . mapper . geo . GeoPointFieldMapper ; import java . io . IOException ; public class GeoDistanceQueryParser implements QueryParser < GeoDistanceQueryBuilder > { public static final ParseField VALIDATION_METHOD_FIELD = new ParseField ( <str> ) ; public static final ParseField IGNORE_MALFORMED_FIELD = new ParseField ( <str> ) ; public static final ParseField COERCE_FIELD = new ParseField ( <str> , <str> ) ; public static final ParseField OPTIMIZE_BBOX_FIELD = new ParseField ( <str> ) ; public static final ParseField DISTANCE_TYPE_FIELD = new ParseField ( <str> ) ; public static final ParseField UNIT_FIELD = new ParseField ( <str> ) ; public static final ParseField DISTANCE_FIELD = new ParseField ( <str> ) ; @Override public String [ ] names ( ) { return new String [ ] { GeoDistanceQueryBuilder . NAME , <str> } ; } @Override public GeoDistanceQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { XContentParser parser = parseContext . parser ( ) ; XContentParser . Token token ; float boost = AbstractQueryBuilder . DEFAULT_BOOST ; String queryName = null ; String currentFieldName = null ; GeoPoint point = new GeoPoint ( Double . NaN , Double . NaN ) ; String fieldName = null ; Object vDistance = null ; DistanceUnit unit = GeoDistanceQueryBuilder . DEFAULT_DISTANCE_UNIT ; GeoDistance geoDistance = GeoDistanceQueryBuilder . DEFAULT_GEO_DISTANCE ; String optimizeBbox = GeoDistanceQueryBuilder . DEFAULT_OPTIMIZE_BBOX ; boolean coerce = GeoValidationMethod . DEFAULT_LENIENT_PARSING ; boolean ignoreMalformed = GeoValidationMethod . DEFAULT_LENIENT_PARSING ; GeoValidationMethod validationMethod = null ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( parseContext . isDeprecatedSetting ( currentFieldName ) ) { } else if ( token = = XContentParser . Token . START_ARRAY ) { fieldName = currentFieldName ; GeoUtils . parseGeoPoint ( parser , point ) ; } else if ( token = = XContentParser . Token . START_OBJECT ) { String currentName = parser . currentName ( ) ; assert currentFieldName ! = null ; fieldName = currentFieldName ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( currentName . equals ( GeoPointFieldMapper . Names . LAT ) ) { point . resetLat ( parser . doubleValue ( ) ) ; } else if ( currentName . equals ( GeoPointFieldMapper . Names . LON ) ) { point . resetLon ( parser . doubleValue ( ) ) ; } else if ( currentName . equals ( GeoPointFieldMapper . Names . GEOHASH ) ) { point . resetFromGeoHash ( parser . text ( ) ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + currentFieldName + <str> ) ; } } } } else if ( token . isValue ( ) ) { if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , DISTANCE_FIELD ) ) { if ( token = = XContentParser . Token . VALUE_STRING ) { vDistance = parser . text ( ) ; } else { vDistance = parser . numberValue ( ) ; } } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , UNIT_FIELD ) ) { unit = DistanceUnit . fromString ( parser . text ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , DISTANCE_TYPE_FIELD ) ) { geoDistance = GeoDistance . fromString ( parser . text ( ) ) ; } else if ( currentFieldName . endsWith ( GeoPointFieldMapper . Names . LAT_SUFFIX ) ) { point . resetLat ( parser . doubleValue ( ) ) ; fieldName = currentFieldName . substring ( <int> , currentFieldName . length ( ) - GeoPointFieldMapper . Names . LAT_SUFFIX . length ( ) ) ; } else if ( currentFieldName . endsWith ( GeoPointFieldMapper . Names . LON_SUFFIX ) ) { point . resetLon ( parser . doubleValue ( ) ) ; fieldName = currentFieldName . substring ( <int> , currentFieldName . length ( ) - GeoPointFieldMapper . Names . LON_SUFFIX . length ( ) ) ; } else if ( currentFieldName . endsWith ( GeoPointFieldMapper . Names . GEOHASH_SUFFIX ) ) { point . resetFromGeoHash ( parser . text ( ) ) ; fieldName = currentFieldName . substring ( <int> , currentFieldName . length ( ) - GeoPointFieldMapper . Names . GEOHASH_SUFFIX . length ( ) ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . NAME_FIELD ) ) { queryName = parser . text ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , AbstractQueryBuilder . BOOST_FIELD ) ) { boost = parser . floatValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , OPTIMIZE_BBOX_FIELD ) ) { optimizeBbox = parser . textOrNull ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , COERCE_FIELD ) ) { coerce = parser . booleanValue ( ) ; if ( coerce = = true ) { ignoreMalformed = true ; } } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , IGNORE_MALFORMED_FIELD ) ) { ignoreMalformed = parser . booleanValue ( ) ; } else if ( parseContext . parseFieldMatcher ( ) . match ( currentFieldName , VALIDATION_METHOD_FIELD ) ) { validationMethod = GeoValidationMethod . fromString ( parser . text ( ) ) ; } else { if ( fieldName = = null ) { point . resetFromString ( parser . text ( ) ) ; fieldName = currentFieldName ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + GeoDistanceQueryBuilder . NAME + <str> + fieldName + <str> + currentFieldName + <str> ) ; } } } } if ( vDistance = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> ) ; } GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder ( fieldName ) ; if ( vDistance instanceof Number ) { qb . distance ( ( ( Number ) vDistance ) . doubleValue ( ) , unit ) ; } else { qb . distance ( ( String ) vDistance , unit ) ; } qb . point ( point ) ; if ( validationMethod ! = null ) { qb . setValidationMethod ( validationMethod ) ; } else { qb . setValidationMethod ( GeoValidationMethod . infer ( coerce , ignoreMalformed ) ) ; } qb . optimizeBbox ( optimizeBbox ) ; qb . geoDistance ( geoDistance ) ; qb . boost ( boost ) ; qb . queryName ( queryName ) ; return qb ; } @Override public GeoDistanceQueryBuilder getBuilderPrototype ( ) { return GeoDistanceQueryBuilder . PROTOTYPE ; } } 

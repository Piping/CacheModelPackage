package com . google . common . base ; import static com . google . common . base . Throwables . getStackTraceAsString ; import static com . google . common . base . Throwables . lazyStackTrace ; import static com . google . common . base . Throwables . lazyStackTraceIsLazy ; import static com . google . common . truth . Truth . assertThat ; import static java . util . Arrays . asList ; import static java . util . regex . Pattern . quote ; import com . google . common . collect . Iterables ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . io . FileNotFoundException ; import java . security . Permission ; import java . security . Policy ; import java . security . ProtectionDomain ; import java . util . List ; public class ThrowablesTest extends TestCase { public void testPropagateIfPossible_NoneDeclared_NoneThrown ( ) { Sample sample = new Sample ( ) { @Override public void noneDeclared ( ) { try { methodThatDoesntThrowAnything ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t ) ; throw new SomeChainingException ( t ) ; } } } ; sample . noneDeclared ( ) ; } public void testPropagateIfPossible_NoneDeclared_UncheckedThrown ( ) { Sample sample = new Sample ( ) { @Override public void noneDeclared ( ) { try { methodThatThrowsUnchecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t ) ; throw new SomeChainingException ( t ) ; } } } ; try { sample . noneDeclared ( ) ; fail ( ) ; } catch ( SomeUncheckedException expected ) { } } public void testPropagateIfPossible_NoneDeclared_UndeclaredThrown ( ) { Sample sample = new Sample ( ) { @Override public void noneDeclared ( ) { try { methodThatThrowsUndeclaredChecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t ) ; throw new SomeChainingException ( t ) ; } } } ; try { sample . noneDeclared ( ) ; fail ( ) ; } catch ( SomeChainingException expected ) { } } public void testPropagateIfPossible_OneDeclared_NoneThrown ( ) throws SomeCheckedException { Sample sample = new Sample ( ) { @Override public void oneDeclared ( ) throws SomeCheckedException { try { methodThatDoesntThrowAnything ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t , SomeCheckedException . class ) ; throw new SomeChainingException ( t ) ; } } } ; sample . oneDeclared ( ) ; } public void testPropagateIfPossible_OneDeclared_UncheckedThrown ( ) throws SomeCheckedException { Sample sample = new Sample ( ) { @Override public void oneDeclared ( ) throws SomeCheckedException { try { methodThatThrowsUnchecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t , SomeCheckedException . class ) ; throw new SomeChainingException ( t ) ; } } } ; try { sample . oneDeclared ( ) ; fail ( ) ; } catch ( SomeUncheckedException expected ) { } } public void testPropagateIfPossible_OneDeclared_CheckedThrown ( ) { Sample sample = new Sample ( ) { @Override public void oneDeclared ( ) throws SomeCheckedException { try { methodThatThrowsChecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t , SomeCheckedException . class ) ; throw new SomeChainingException ( t ) ; } } } ; try { sample . oneDeclared ( ) ; fail ( ) ; } catch ( SomeCheckedException expected ) { } } public void testPropagateIfPossible_OneDeclared_UndeclaredThrown ( ) throws SomeCheckedException { Sample sample = new Sample ( ) { @Override public void oneDeclared ( ) throws SomeCheckedException { try { methodThatThrowsUndeclaredChecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t , SomeCheckedException . class ) ; throw new SomeChainingException ( t ) ; } } } ; try { sample . oneDeclared ( ) ; fail ( ) ; } catch ( SomeChainingException expected ) { } } public void testPropagateIfPossible_TwoDeclared_NoneThrown ( ) throws SomeCheckedException , SomeOtherCheckedException { Sample sample = new Sample ( ) { @Override public void twoDeclared ( ) throws SomeCheckedException , SomeOtherCheckedException { try { methodThatDoesntThrowAnything ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t , SomeCheckedException . class , SomeOtherCheckedException . class ) ; throw new SomeChainingException ( t ) ; } } } ; sample . twoDeclared ( ) ; } public void testPropagateIfPossible_TwoDeclared_UncheckedThrown ( ) throws SomeCheckedException , SomeOtherCheckedException { Sample sample = new Sample ( ) { @Override public void twoDeclared ( ) throws SomeCheckedException , SomeOtherCheckedException { try { methodThatThrowsUnchecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t , SomeCheckedException . class , SomeOtherCheckedException . class ) ; throw new SomeChainingException ( t ) ; } } } ; try { sample . twoDeclared ( ) ; fail ( ) ; } catch ( SomeUncheckedException expected ) { } } public void testPropagateIfPossible_TwoDeclared_CheckedThrown ( ) throws SomeOtherCheckedException { Sample sample = new Sample ( ) { @Override public void twoDeclared ( ) throws SomeCheckedException , SomeOtherCheckedException { try { methodThatThrowsChecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t , SomeCheckedException . class , SomeOtherCheckedException . class ) ; throw new SomeChainingException ( t ) ; } } } ; try { sample . twoDeclared ( ) ; fail ( ) ; } catch ( SomeCheckedException expected ) { } } public void testPropagateIfPossible_TwoDeclared_OtherCheckedThrown ( ) throws SomeCheckedException { Sample sample = new Sample ( ) { @Override public void twoDeclared ( ) throws SomeCheckedException , SomeOtherCheckedException { try { methodThatThrowsOtherChecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfPossible ( t , SomeCheckedException . class , SomeOtherCheckedException . class ) ; throw new SomeChainingException ( t ) ; } } } ; try { sample . twoDeclared ( ) ; fail ( ) ; } catch ( SomeOtherCheckedException expected ) { } } public void testPropageIfPossible_null ( ) throws SomeCheckedException { Throwables . propagateIfPossible ( null ) ; Throwables . propagateIfPossible ( null , SomeCheckedException . class ) ; Throwables . propagateIfPossible ( null , SomeCheckedException . class , SomeUncheckedException . class ) ; } public void testPropagate_NoneDeclared_NoneThrown ( ) { Sample sample = new Sample ( ) { @Override public void noneDeclared ( ) { try { methodThatDoesntThrowAnything ( ) ; } catch ( Throwable t ) { throw Throwables . propagate ( t ) ; } } } ; sample . noneDeclared ( ) ; } public void testPropagate_NoneDeclared_UncheckedThrown ( ) { Sample sample = new Sample ( ) { @Override public void noneDeclared ( ) { try { methodThatThrowsUnchecked ( ) ; } catch ( Throwable t ) { throw Throwables . propagate ( t ) ; } } } ; try { sample . noneDeclared ( ) ; fail ( ) ; } catch ( SomeUncheckedException expected ) { } } public void testPropagate_NoneDeclared_ErrorThrown ( ) { Sample sample = new Sample ( ) { @Override public void noneDeclared ( ) { try { methodThatThrowsError ( ) ; } catch ( Throwable t ) { throw Throwables . propagate ( t ) ; } } } ; try { sample . noneDeclared ( ) ; fail ( ) ; } catch ( SomeError expected ) { } } public void testPropagate_NoneDeclared_CheckedThrown ( ) { Sample sample = new Sample ( ) { @Override public void noneDeclared ( ) { try { methodThatThrowsChecked ( ) ; } catch ( Throwable t ) { throw Throwables . propagate ( t ) ; } } } ; try { sample . noneDeclared ( ) ; fail ( ) ; } catch ( RuntimeException expected ) { assertThat ( expected . getCause ( ) ) . isInstanceOf ( SomeCheckedException . class ) ; } } public void testPropagateIfInstanceOf_NoneThrown ( ) throws SomeCheckedException { Sample sample = new Sample ( ) { @Override public void oneDeclared ( ) throws SomeCheckedException { try { methodThatDoesntThrowAnything ( ) ; } catch ( Throwable t ) { Throwables . propagateIfInstanceOf ( t , SomeCheckedException . class ) ; throw Throwables . propagate ( t ) ; } } } ; sample . oneDeclared ( ) ; } public void testPropagateIfInstanceOf_DeclaredThrown ( ) { Sample sample = new Sample ( ) { @Override public void oneDeclared ( ) throws SomeCheckedException { try { methodThatThrowsChecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfInstanceOf ( t , SomeCheckedException . class ) ; throw Throwables . propagate ( t ) ; } } } ; try { sample . oneDeclared ( ) ; fail ( ) ; } catch ( SomeCheckedException expected ) { } } public void testPropagateIfInstanceOf_UncheckedThrown ( ) throws SomeCheckedException { Sample sample = new Sample ( ) { @Override public void oneDeclared ( ) throws SomeCheckedException { try { methodThatThrowsUnchecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfInstanceOf ( t , SomeCheckedException . class ) ; throw Throwables . propagate ( t ) ; } } } ; try { sample . oneDeclared ( ) ; fail ( ) ; } catch ( SomeUncheckedException expected ) { } } public void testPropagateIfInstanceOf_UndeclaredThrown ( ) throws SomeCheckedException { Sample sample = new Sample ( ) { @Override public void oneDeclared ( ) throws SomeCheckedException { try { methodThatThrowsOtherChecked ( ) ; } catch ( Throwable t ) { Throwables . propagateIfInstanceOf ( t , SomeCheckedException . class ) ; throw Throwables . propagate ( t ) ; } } } ; try { sample . oneDeclared ( ) ; fail ( ) ; } catch ( RuntimeException expected ) { assertThat ( expected . getCause ( ) ) . isInstanceOf ( SomeOtherCheckedException . class ) ; } } public void testPropageIfInstanceOf_null ( ) throws SomeCheckedException { Throwables . propagateIfInstanceOf ( null , SomeCheckedException . class ) ; } public void testGetRootCause_NoCause ( ) { SomeCheckedException exception = new SomeCheckedException ( ) ; assertSame ( exception , Throwables . getRootCause ( exception ) ) ; } public void testGetRootCause_SingleWrapped ( ) { SomeCheckedException cause = new SomeCheckedException ( ) ; SomeChainingException exception = new SomeChainingException ( cause ) ; assertSame ( cause , Throwables . getRootCause ( exception ) ) ; } public void testGetRootCause_DoubleWrapped ( ) { SomeCheckedException cause = new SomeCheckedException ( ) ; SomeChainingException exception = new SomeChainingException ( new SomeChainingException ( cause ) ) ; assertSame ( cause , Throwables . getRootCause ( exception ) ) ; } private static class SomeError extends Error { } private static class SomeCheckedException extends Exception { } private static class SomeOtherCheckedException extends Exception { } private static class SomeUncheckedException extends RuntimeException { } private static class SomeUndeclaredCheckedException extends Exception { } private static class SomeChainingException extends RuntimeException { public SomeChainingException ( Throwable cause ) { super ( cause ) ; } } static class Sample { void noneDeclared ( ) { } void oneDeclared ( ) throws SomeCheckedException { } void twoDeclared ( ) throws SomeCheckedException , SomeOtherCheckedException { } } static void methodThatDoesntThrowAnything ( ) { } static void methodThatThrowsError ( ) { throw new SomeError ( ) ; } static void methodThatThrowsUnchecked ( ) { throw new SomeUncheckedException ( ) ; } static void methodThatThrowsChecked ( ) throws SomeCheckedException { throw new SomeCheckedException ( ) ; } static void methodThatThrowsOtherChecked ( ) throws SomeOtherCheckedException { throw new SomeOtherCheckedException ( ) ; } static void methodThatThrowsUndeclaredChecked ( ) throws SomeUndeclaredCheckedException { throw new SomeUndeclaredCheckedException ( ) ; } public void testGetStackTraceAsString ( ) { class StackTraceException extends Exception { StackTraceException ( String message ) { super ( message ) ; } } StackTraceException e = new StackTraceException ( <str> ) ; String firstLine = quote ( e . getClass ( ) . getName ( ) + <str> + e . getMessage ( ) ) ; String secondLine = <str> + ThrowablesTest . class . getName ( ) + <str> ; String moreLines = <str> ; String expected = firstLine + <str> + secondLine + <str> + moreLines ; assertThat ( getStackTraceAsString ( e ) ) . matches ( expected ) ; } public void testGetCausalChain ( ) { FileNotFoundException fnfe = new FileNotFoundException ( ) ; IllegalArgumentException iae = new IllegalArgumentException ( fnfe ) ; RuntimeException re = new RuntimeException ( iae ) ; IllegalStateException ex = new IllegalStateException ( re ) ; assertEquals ( asList ( ex , re , iae , fnfe ) , Throwables . getCausalChain ( ex ) ) ; assertSame ( fnfe , Iterables . getOnlyElement ( Throwables . getCausalChain ( fnfe ) ) ) ; List < Throwable > causes = Throwables . getCausalChain ( ex ) ; try { causes . add ( new RuntimeException ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } } @SuppressWarnings ( <str> ) public void testGetCasualChainNull ( ) { try { Throwables . getCausalChain ( null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } @AndroidIncompatible public void testLazyStackTraceWorksInProd ( ) { assertTrue ( lazyStackTraceIsLazy ( ) ) ; } public void testLazyStackTrace ( ) { Exception e = new Exception ( ) ; StackTraceElement [ ] originalStackTrace = e . getStackTrace ( ) ; assertThat ( lazyStackTrace ( e ) ) . containsExactly ( ( Object [ ] ) originalStackTrace ) . inOrder ( ) ; try { lazyStackTrace ( e ) . set ( <int> , null ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } if ( ! lazyStackTraceIsLazy ( ) ) { return ; } e . setStackTrace ( new StackTraceElement [ <int> ] ) ; assertThat ( lazyStackTrace ( e ) ) . containsExactly ( ( Object [ ] ) originalStackTrace ) . inOrder ( ) ; } private void doTestLazyStackTraceFallback ( ) { assertFalse ( lazyStackTraceIsLazy ( ) ) ; Exception e = new Exception ( ) ; assertThat ( lazyStackTrace ( e ) ) . containsExactly ( ( Object [ ] ) e . getStackTrace ( ) ) . inOrder ( ) ; try { lazyStackTrace ( e ) . set ( <int> , null ) ; fail ( ) ; } catch ( UnsupportedOperationException expected ) { } e . setStackTrace ( new StackTraceElement [ <int> ] ) ; assertThat ( lazyStackTrace ( e ) ) . isEmpty ( ) ; } private static class AllowSettingSecurityManagerPolicy extends Policy { @Override public boolean implies ( ProtectionDomain pd , Permission perm ) { return true ; } } public void testNullPointers ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Throwables . class ) ; } } 

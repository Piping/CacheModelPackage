package org . elasticsearch . index . analysis ; import org . elasticsearch . Version ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . mapper . core . StringFieldMapper ; import java . util . ArrayList ; import java . util . List ; public class CustomAnalyzerProvider extends AbstractIndexAnalyzerProvider < CustomAnalyzer > { private final Settings analyzerSettings ; private CustomAnalyzer customAnalyzer ; public CustomAnalyzerProvider ( IndexSettings indexSettings , String name , Settings settings ) { super ( indexSettings , name , settings ) ; this . analyzerSettings = settings ; } public void build ( AnalysisService analysisService ) { String tokenizerName = analyzerSettings . get ( <str> ) ; if ( tokenizerName = = null ) { throw new IllegalArgumentException ( <str> + name ( ) + <str> ) ; } TokenizerFactory tokenizer = analysisService . tokenizer ( tokenizerName ) ; if ( tokenizer = = null ) { throw new IllegalArgumentException ( <str> + name ( ) + <str> + tokenizerName + <str> ) ; } List < CharFilterFactory > charFilters = new ArrayList < > ( ) ; String [ ] charFilterNames = analyzerSettings . getAsArray ( <str> ) ; for ( String charFilterName : charFilterNames ) { CharFilterFactory charFilter = analysisService . charFilter ( charFilterName ) ; if ( charFilter = = null ) { throw new IllegalArgumentException ( <str> + name ( ) + <str> + charFilterName + <str> ) ; } charFilters . add ( charFilter ) ; } List < TokenFilterFactory > tokenFilters = new ArrayList < > ( ) ; String [ ] tokenFilterNames = analyzerSettings . getAsArray ( <str> ) ; for ( String tokenFilterName : tokenFilterNames ) { TokenFilterFactory tokenFilter = analysisService . tokenFilter ( tokenFilterName ) ; if ( tokenFilter = = null ) { throw new IllegalArgumentException ( <str> + name ( ) + <str> + tokenFilterName + <str> ) ; } tokenFilters . add ( tokenFilter ) ; } int positionIncrementGap = StringFieldMapper . Defaults . positionIncrementGap ( indexSettings . getIndexVersionCreated ( ) ) ; if ( analyzerSettings . getAsMap ( ) . containsKey ( <str> ) ) { if ( indexSettings . getIndexVersionCreated ( ) . before ( Version . V_2_0_0 ) ) { if ( analyzerSettings . getAsMap ( ) . containsKey ( <str> ) ) { throw new IllegalArgumentException ( <str> + name ( ) + <str> ) ; } positionIncrementGap = analyzerSettings . getAsInt ( <str> , positionIncrementGap ) ; } else { throw new IllegalArgumentException ( <str> + name ( ) + <str> ) ; } } positionIncrementGap = analyzerSettings . getAsInt ( <str> , positionIncrementGap ) ; int offsetGap = analyzerSettings . getAsInt ( <str> , - <int> ) ; ; this . customAnalyzer = new CustomAnalyzer ( tokenizer , charFilters . toArray ( new CharFilterFactory [ charFilters . size ( ) ] ) , tokenFilters . toArray ( new TokenFilterFactory [ tokenFilters . size ( ) ] ) , positionIncrementGap , offsetGap ) ; } @Override public CustomAnalyzer get ( ) { return this . customAnalyzer ; } } 

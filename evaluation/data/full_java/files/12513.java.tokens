package org . gradle . api . internal . artifacts . ivyservice ; import javax . xml . namespace . QName ; import com . google . common . base . Joiner ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . Transformer ; import org . gradle . api . artifacts . ivy . IvyExtraInfo ; import org . gradle . util . CollectionUtils ; import java . util . * ; public class DefaultIvyExtraInfo implements IvyExtraInfo { protected Map < NamespaceId , String > extraInfo ; public DefaultIvyExtraInfo ( ) { this . extraInfo = new LinkedHashMap < NamespaceId , String > ( ) ; } public DefaultIvyExtraInfo ( Map < NamespaceId , String > extraInfo ) { this . extraInfo = extraInfo ; } public String get ( String name ) { List < Map . Entry < NamespaceId , String > > foundEntries = new ArrayList < Map . Entry < NamespaceId , String > > ( ) ; for ( Map . Entry < NamespaceId , String > entry : extraInfo . entrySet ( ) ) { if ( entry . getKey ( ) . getName ( ) . equals ( name ) ) { foundEntries . add ( entry ) ; } } if ( foundEntries . size ( ) > <int> ) { String allNamespaces = Joiner . on ( <str> ) . join ( CollectionUtils . collect ( foundEntries , new Transformer < String , Map . Entry < NamespaceId , String > > ( ) { public String transform ( Map . Entry < NamespaceId , String > original ) { return original . getKey ( ) . getNamespace ( ) ; } } ) ) ; throw new InvalidUserDataException ( String . format ( <str> , name , allNamespaces ) ) ; } return foundEntries . size ( ) = = <int> ? null : foundEntries . get ( <int> ) . getValue ( ) ; } public String get ( String namespace , String name ) { return extraInfo . get ( new NamespaceId ( namespace , name ) ) ; } public Map < QName , String > asMap ( ) { Map < QName , String > map = new LinkedHashMap < QName , String > ( ) ; for ( Map . Entry < NamespaceId , String > entry : extraInfo . entrySet ( ) ) { map . put ( new QName ( entry . getKey ( ) . getNamespace ( ) , entry . getKey ( ) . getName ( ) ) , entry . getValue ( ) ) ; } return Collections . unmodifiableMap ( map ) ; } } 

package org . elasticsearch . monitor . process ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class ProcessStats implements Streamable , ToXContent { long timestamp = - <int> ; long openFileDescriptors = - <int> ; long maxFileDescriptors = - <int> ; Cpu cpu = null ; Mem mem = null ; ProcessStats ( ) { } public long getTimestamp ( ) { return timestamp ; } public long getOpenFileDescriptors ( ) { return openFileDescriptors ; } public long getMaxFileDescriptors ( ) { return maxFileDescriptors ; } public Cpu getCpu ( ) { return cpu ; } public Mem getMem ( ) { return mem ; } static final class Fields { static final XContentBuilderString PROCESS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TIMESTAMP = new XContentBuilderString ( <str> ) ; static final XContentBuilderString OPEN_FILE_DESCRIPTORS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MAX_FILE_DESCRIPTORS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CPU = new XContentBuilderString ( <str> ) ; static final XContentBuilderString PERCENT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_IN_MILLIS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MEM = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_VIRTUAL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_VIRTUAL_IN_BYTES = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . PROCESS ) ; builder . field ( Fields . TIMESTAMP , timestamp ) ; builder . field ( Fields . OPEN_FILE_DESCRIPTORS , openFileDescriptors ) ; builder . field ( Fields . MAX_FILE_DESCRIPTORS , maxFileDescriptors ) ; if ( cpu ! = null ) { builder . startObject ( Fields . CPU ) ; builder . field ( Fields . PERCENT , cpu . percent ) ; builder . timeValueField ( Fields . TOTAL_IN_MILLIS , Fields . TOTAL , cpu . total ) ; builder . endObject ( ) ; } if ( mem ! = null ) { builder . startObject ( Fields . MEM ) ; builder . byteSizeField ( Fields . TOTAL_VIRTUAL_IN_BYTES , Fields . TOTAL_VIRTUAL , mem . totalVirtual ) ; builder . endObject ( ) ; } builder . endObject ( ) ; return builder ; } public static ProcessStats readProcessStats ( StreamInput in ) throws IOException { ProcessStats stats = new ProcessStats ( ) ; stats . readFrom ( in ) ; return stats ; } @Override public void readFrom ( StreamInput in ) throws IOException { timestamp = in . readVLong ( ) ; openFileDescriptors = in . readLong ( ) ; maxFileDescriptors = in . readLong ( ) ; if ( in . readBoolean ( ) ) { cpu = Cpu . readCpu ( in ) ; } if ( in . readBoolean ( ) ) { mem = Mem . readMem ( in ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVLong ( timestamp ) ; out . writeLong ( openFileDescriptors ) ; out . writeLong ( maxFileDescriptors ) ; if ( cpu = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; cpu . writeTo ( out ) ; } if ( mem = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; mem . writeTo ( out ) ; } } public static class Mem implements Streamable { long totalVirtual = - <int> ; Mem ( ) { } public static Mem readMem ( StreamInput in ) throws IOException { Mem mem = new Mem ( ) ; mem . readFrom ( in ) ; return mem ; } @Override public void readFrom ( StreamInput in ) throws IOException { totalVirtual = in . readLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeLong ( totalVirtual ) ; } public ByteSizeValue getTotalVirtual ( ) { return new ByteSizeValue ( totalVirtual ) ; } } public static class Cpu implements Streamable { short percent = - <int> ; long total = - <int> ; Cpu ( ) { } public static Cpu readCpu ( StreamInput in ) throws IOException { Cpu cpu = new Cpu ( ) ; cpu . readFrom ( in ) ; return cpu ; } @Override public void readFrom ( StreamInput in ) throws IOException { percent = in . readShort ( ) ; total = in . readLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeShort ( percent ) ; out . writeLong ( total ) ; } public short getPercent ( ) { return percent ; } public TimeValue getTotal ( ) { return new TimeValue ( total ) ; } } } 

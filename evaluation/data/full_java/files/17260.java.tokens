package org . jbox2d . pooling . normal ; public abstract class OrderedStack < E > { private final Object [ ] pool ; private int index ; private final int size ; private final Object [ ] container ; public OrderedStack ( int argStackSize , int argContainerSize ) { size = argStackSize ; pool = new Object [ argStackSize ] ; for ( int i = <int> ; i < argStackSize ; i + + ) { pool [ i ] = newInstance ( ) ; } index = <int> ; container = new Object [ argContainerSize ] ; } @SuppressWarnings ( <str> ) public final E pop ( ) { assert ( index < size ) : <str> ; return ( E ) pool [ index + + ] ; } @SuppressWarnings ( <str> ) public final E [ ] pop ( int argNum ) { assert ( index + argNum < size ) : <str> ; assert ( argNum < = container . length ) : <str> ; System . arraycopy ( pool , index , container , <int> , argNum ) ; index + = argNum ; return ( E [ ] ) container ; } public final void push ( int argNum ) { index - = argNum ; assert ( index > = <int> ) : <str> ; } protected abstract E newInstance ( ) ; } 

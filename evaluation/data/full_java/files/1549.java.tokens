package org . apache . cassandra . io ; import org . junit . Test ; import org . apache . cassandra . io . sstable . BloomFilterTracker ; import static org . junit . Assert . assertEquals ; public class BloomFilterTrackerTest { @Test public void testAddingFalsePositives ( ) { BloomFilterTracker bft = new BloomFilterTracker ( ) ; assertEquals ( <int> L , bft . getFalsePositiveCount ( ) ) ; assertEquals ( <int> L , bft . getRecentFalsePositiveCount ( ) ) ; bft . addFalsePositive ( ) ; bft . addFalsePositive ( ) ; assertEquals ( <int> , bft . getFalsePositiveCount ( ) ) ; assertEquals ( <int> , bft . getRecentFalsePositiveCount ( ) ) ; assertEquals ( <int> L , bft . getRecentFalsePositiveCount ( ) ) ; assertEquals ( <int> , bft . getFalsePositiveCount ( ) ) ; } @Test public void testAddingTruePositives ( ) { BloomFilterTracker bft = new BloomFilterTracker ( ) ; assertEquals ( <int> L , bft . getTruePositiveCount ( ) ) ; assertEquals ( <int> L , bft . getRecentTruePositiveCount ( ) ) ; bft . addTruePositive ( ) ; bft . addTruePositive ( ) ; assertEquals ( <int> , bft . getTruePositiveCount ( ) ) ; assertEquals ( <int> , bft . getRecentTruePositiveCount ( ) ) ; assertEquals ( <int> L , bft . getRecentTruePositiveCount ( ) ) ; assertEquals ( <int> , bft . getTruePositiveCount ( ) ) ; } @Test public void testAddingToOneLeavesTheOtherAlone ( ) { BloomFilterTracker bft = new BloomFilterTracker ( ) ; bft . addFalsePositive ( ) ; assertEquals ( <int> L , bft . getTruePositiveCount ( ) ) ; assertEquals ( <int> L , bft . getRecentTruePositiveCount ( ) ) ; bft . addTruePositive ( ) ; assertEquals ( <int> , bft . getFalsePositiveCount ( ) ) ; assertEquals ( <int> , bft . getRecentFalsePositiveCount ( ) ) ; } } 

package org . gradle . model . internal . core ; import groovy . lang . Closure ; import groovy . lang . GroovyObjectSupport ; import groovy . lang . MissingMethodException ; import groovy . lang . MissingPropertyException ; import org . gradle . api . internal . ClosureBackedAction ; import org . gradle . model . ModelMap ; import static org . gradle . internal . Cast . uncheckedCast ; public abstract class ModelMapGroovyView < I > extends GroovyObjectSupport implements ModelMap < I > { public void create ( String name , Closure < ? super I > configAction ) { create ( name , new ClosureBackedAction < I > ( configAction ) ) ; } public < S extends I > void create ( String name , Class < S > type , Closure < ? super S > configAction ) { create ( name , type , new ClosureBackedAction < I > ( configAction ) ) ; } public void named ( String name , Closure < ? super I > configAction ) { named ( name , new ClosureBackedAction < I > ( configAction ) ) ; } public void all ( Closure < ? super I > configAction ) { all ( new ClosureBackedAction < I > ( configAction ) ) ; } public < S > void withType ( Class < S > type , Closure < ? super S > configAction ) { withType ( type , new ClosureBackedAction < S > ( configAction ) ) ; } public void beforeEach ( Closure < ? super I > configAction ) { beforeEach ( new ClosureBackedAction < I > ( configAction ) ) ; } public < S > void beforeEach ( Class < S > type , Closure < ? super S > configAction ) { beforeEach ( type , new ClosureBackedAction < S > ( configAction ) ) ; } public void afterEach ( Closure < ? super I > configAction ) { afterEach ( new ClosureBackedAction < I > ( configAction ) ) ; } public < S > void afterEach ( Class < S > type , Closure < ? super S > configAction ) { afterEach ( type , new ClosureBackedAction < S > ( configAction ) ) ; } @Override public Object getProperty ( String property ) { I element = get ( property ) ; if ( element = = null ) { throw new MissingPropertyException ( property , ModelMap . class ) ; } return element ; } public Void methodMissing ( String name , Object argsObj ) { Object [ ] args = ( Object [ ] ) argsObj ; if ( args . length = = <int> & & args [ <int> ] instanceof Class < ? > ) { Class < ? extends I > itemType = uncheckedCast ( args [ <int> ] ) ; create ( name , itemType ) ; } else if ( args . length = = <int> & & args [ <int> ] instanceof Class < ? > & & args [ <int> ] instanceof Closure < ? > ) { Class < ? extends I > itemType = uncheckedCast ( args [ <int> ] ) ; Closure < ? super I > closure = uncheckedCast ( args [ <int> ] ) ; create ( name , itemType , closure ) ; } else if ( args . length = = <int> & & args [ <int> ] instanceof Closure < ? > ) { Closure < ? super I > closure = uncheckedCast ( args [ <int> ] ) ; named ( name , closure ) ; } else { throw new MissingMethodException ( name , ModelMap . class , args ) ; } return null ; } } 

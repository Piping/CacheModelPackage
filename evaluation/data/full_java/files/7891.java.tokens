package org . elasticsearch . common ; import org . elasticsearch . test . ESTestCase ; import java . util . EnumSet ; import static org . hamcrest . CoreMatchers . is ; import static org . hamcrest . CoreMatchers . not ; import static org . hamcrest . CoreMatchers . sameInstance ; public class ParseFieldTests extends ESTestCase { public void testParse ( ) { String [ ] values = new String [ ] { <str> , <str> } ; ParseField field = new ParseField ( randomFrom ( values ) ) ; String [ ] deprecated = new String [ ] { <str> , <str> } ; ParseField withDeprecations = field . withDeprecation ( <str> , randomFrom ( deprecated ) ) ; assertThat ( field , not ( sameInstance ( withDeprecations ) ) ) ; assertThat ( field . match ( randomFrom ( values ) , ParseField . EMPTY_FLAGS ) , is ( true ) ) ; assertThat ( field . match ( <str> , ParseField . EMPTY_FLAGS ) , is ( false ) ) ; assertThat ( field . match ( randomFrom ( deprecated ) , ParseField . EMPTY_FLAGS ) , is ( false ) ) ; assertThat ( field . match ( <str> , ParseField . EMPTY_FLAGS ) , is ( false ) ) ; assertThat ( withDeprecations . match ( randomFrom ( values ) , ParseField . EMPTY_FLAGS ) , is ( true ) ) ; assertThat ( withDeprecations . match ( <str> , ParseField . EMPTY_FLAGS ) , is ( false ) ) ; assertThat ( withDeprecations . match ( randomFrom ( deprecated ) , ParseField . EMPTY_FLAGS ) , is ( true ) ) ; assertThat ( withDeprecations . match ( <str> , ParseField . EMPTY_FLAGS ) , is ( true ) ) ; EnumSet < ParseField . Flag > flags = EnumSet . of ( ParseField . Flag . STRICT ) ; assertThat ( field . match ( randomFrom ( values ) , flags ) , is ( true ) ) ; assertThat ( field . match ( <str> , flags ) , is ( false ) ) ; assertThat ( field . match ( randomFrom ( deprecated ) , flags ) , is ( false ) ) ; assertThat ( field . match ( <str> , flags ) , is ( false ) ) ; assertThat ( withDeprecations . match ( randomFrom ( values ) , flags ) , is ( true ) ) ; assertThat ( withDeprecations . match ( <str> , flags ) , is ( false ) ) ; try { withDeprecations . match ( randomFrom ( deprecated ) , flags ) ; fail ( ) ; } catch ( IllegalArgumentException ex ) { } try { withDeprecations . match ( <str> , flags ) ; fail ( ) ; } catch ( IllegalArgumentException ex ) { } } public void testAllDeprecated ( ) { String [ ] values = new String [ ] { <str> , <str> } ; boolean withDeprecatedNames = randomBoolean ( ) ; String [ ] deprecated = new String [ ] { <str> , <str> } ; String [ ] allValues = values ; if ( withDeprecatedNames ) { String [ ] newArray = new String [ allValues . length + deprecated . length ] ; System . arraycopy ( allValues , <int> , newArray , <int> , allValues . length ) ; System . arraycopy ( deprecated , <int> , newArray , allValues . length , deprecated . length ) ; allValues = newArray ; } ParseField field = new ParseField ( randomFrom ( values ) ) ; if ( withDeprecatedNames ) { field = field . withDeprecation ( deprecated ) ; } field = field . withAllDeprecated ( <str> ) ; assertThat ( field . match ( randomFrom ( allValues ) , ParseField . EMPTY_FLAGS ) , is ( true ) ) ; assertThat ( field . match ( <str> , ParseField . EMPTY_FLAGS ) , is ( false ) ) ; EnumSet < ParseField . Flag > flags = EnumSet . of ( ParseField . Flag . STRICT ) ; try { field . match ( randomFrom ( allValues ) , flags ) ; fail ( ) ; } catch ( IllegalArgumentException ex ) { } } } 

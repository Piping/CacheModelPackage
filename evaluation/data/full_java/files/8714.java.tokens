package org . elasticsearch . cloud . azure . management ; import com . microsoft . windowsazure . Configuration ; import com . microsoft . windowsazure . core . utils . KeyStoreType ; import com . microsoft . windowsazure . management . compute . ComputeManagementClient ; import com . microsoft . windowsazure . management . compute . ComputeManagementService ; import com . microsoft . windowsazure . management . compute . models . HostedServiceGetDetailedResponse ; import com . microsoft . windowsazure . management . configuration . ManagementConfiguration ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . cloud . azure . AzureServiceDisableException ; import org . elasticsearch . cloud . azure . AzureServiceRemoteException ; import org . elasticsearch . common . component . AbstractLifecycleComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import java . io . IOException ; import java . net . URI ; import java . net . URISyntaxException ; import static org . elasticsearch . cloud . azure . management . AzureComputeService . Management . * ; public class AzureComputeServiceImpl extends AbstractLifecycleComponent < AzureComputeServiceImpl > implements AzureComputeService { static final class Azure { private static final String ENDPOINT = <str> ; } private final ComputeManagementClient computeManagementClient ; private final String serviceName ; @Inject public AzureComputeServiceImpl ( Settings settings ) { super ( settings ) ; String subscriptionId = settings . get ( SUBSCRIPTION_ID ) ; serviceName = settings . get ( Management . SERVICE_NAME ) ; String keystorePath = settings . get ( KEYSTORE_PATH ) ; String keystorePassword = settings . get ( KEYSTORE_PASSWORD ) ; String strKeyStoreType = settings . get ( KEYSTORE_TYPE , KeyStoreType . pkcs12 . name ( ) ) ; KeyStoreType tmpKeyStoreType = KeyStoreType . pkcs12 ; try { tmpKeyStoreType = KeyStoreType . fromString ( strKeyStoreType ) ; } catch ( Exception e ) { logger . warn ( <str> , KEYSTORE_TYPE , strKeyStoreType , KeyStoreType . pkcs12 . name ( ) ) ; } KeyStoreType keystoreType = tmpKeyStoreType ; Configuration configuration ; try { configuration = ManagementConfiguration . configure ( new URI ( Azure . ENDPOINT ) , subscriptionId , keystorePath , keystorePassword , keystoreType ) ; } catch ( IOException | URISyntaxException e ) { logger . error ( <str> , e . getMessage ( ) ) ; computeManagementClient = null ; return ; } logger . trace ( <str> , subscriptionId , serviceName ) ; computeManagementClient = ComputeManagementService . create ( configuration ) ; } @Override public HostedServiceGetDetailedResponse getServiceDetails ( ) { if ( computeManagementClient = = null ) { throw new AzureServiceDisableException ( <str> ) ; } try { return computeManagementClient . getHostedServicesOperations ( ) . getDetailed ( serviceName ) ; } catch ( Exception e ) { throw new AzureServiceRemoteException ( <str> , e ) ; } } @Override protected void doStart ( ) throws ElasticsearchException { } @Override protected void doStop ( ) throws ElasticsearchException { } @Override protected void doClose ( ) throws ElasticsearchException { if ( computeManagementClient ! = null ) { try { computeManagementClient . close ( ) ; } catch ( IOException e ) { logger . error ( <str> , e ) ; } } } } 

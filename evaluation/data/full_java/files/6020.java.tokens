package org . elasticsearch . common . network ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import java . io . IOException ; import java . net . Inet6Address ; import java . net . InetAddress ; import java . net . InterfaceAddress ; import java . net . NetworkInterface ; import java . net . SocketException ; import java . util . List ; import java . util . Locale ; final class IfConfig { private static final ESLogger logger = Loggers . getLogger ( IfConfig . class ) ; private static final String INDENT = <str> ; static void logIfNecessary ( ) { if ( logger . isDebugEnabled ( ) ) { try { doLogging ( ) ; } catch ( IOException | SecurityException e ) { logger . warn ( <str> , e ) ; } } } private static void doLogging ( ) throws IOException { StringBuilder msg = new StringBuilder ( ) ; for ( NetworkInterface nic : NetworkUtils . getInterfaces ( ) ) { msg . append ( System . lineSeparator ( ) ) ; msg . append ( nic . getName ( ) ) ; msg . append ( System . lineSeparator ( ) ) ; if ( ! nic . getName ( ) . equals ( nic . getDisplayName ( ) ) ) { msg . append ( INDENT ) ; msg . append ( nic . getDisplayName ( ) ) ; msg . append ( System . lineSeparator ( ) ) ; } List < InterfaceAddress > addresses = nic . getInterfaceAddresses ( ) ; for ( InterfaceAddress address : addresses ) { if ( address . getAddress ( ) instanceof Inet6Address = = false ) { msg . append ( INDENT ) ; msg . append ( formatAddress ( address ) ) ; msg . append ( System . lineSeparator ( ) ) ; } } for ( InterfaceAddress address : addresses ) { if ( address . getAddress ( ) instanceof Inet6Address ) { msg . append ( INDENT ) ; msg . append ( formatAddress ( address ) ) ; msg . append ( System . lineSeparator ( ) ) ; } } byte hardware [ ] = nic . getHardwareAddress ( ) ; if ( hardware ! = null ) { msg . append ( INDENT ) ; msg . append ( <str> ) ; for ( int i = <int> ; i < hardware . length ; i + + ) { if ( i > <int> ) { msg . append ( <str> ) ; } msg . append ( String . format ( Locale . ROOT , <str> , hardware [ i ] ) ) ; } msg . append ( System . lineSeparator ( ) ) ; } msg . append ( INDENT ) ; msg . append ( formatFlags ( nic ) ) ; msg . append ( System . lineSeparator ( ) ) ; } logger . debug ( <str> + System . lineSeparator ( ) + <str> , msg . toString ( ) ) ; } private static String formatAddress ( InterfaceAddress interfaceAddress ) throws IOException { StringBuilder sb = new StringBuilder ( ) ; InetAddress address = interfaceAddress . getAddress ( ) ; if ( address instanceof Inet6Address ) { sb . append ( <str> ) ; sb . append ( NetworkAddress . formatAddress ( address ) ) ; sb . append ( <str> ) ; sb . append ( interfaceAddress . getNetworkPrefixLength ( ) ) ; } else { sb . append ( <str> ) ; sb . append ( NetworkAddress . formatAddress ( address ) ) ; int netmask = <hex> < < ( <int> - interfaceAddress . getNetworkPrefixLength ( ) ) ; sb . append ( <str> + NetworkAddress . formatAddress ( InetAddress . getByAddress ( new byte [ ] { ( byte ) ( netmask > > > <int> ) , ( byte ) ( netmask > > > <int> & <hex> ) , ( byte ) ( netmask > > > <int> & <hex> ) , ( byte ) ( netmask & <hex> ) } ) ) ) ; InetAddress broadcast = interfaceAddress . getBroadcast ( ) ; if ( broadcast ! = null ) { sb . append ( <str> + NetworkAddress . formatAddress ( broadcast ) ) ; } } if ( address . isLoopbackAddress ( ) ) { sb . append ( <str> ) ; } else if ( address . isLinkLocalAddress ( ) ) { sb . append ( <str> ) ; } else if ( address . isSiteLocalAddress ( ) ) { sb . append ( <str> ) ; } return sb . toString ( ) ; } private static String formatFlags ( NetworkInterface nic ) throws SocketException { StringBuilder flags = new StringBuilder ( ) ; if ( nic . isUp ( ) ) { flags . append ( <str> ) ; } if ( nic . supportsMulticast ( ) ) { flags . append ( <str> ) ; } if ( nic . isLoopback ( ) ) { flags . append ( <str> ) ; } if ( nic . isPointToPoint ( ) ) { flags . append ( <str> ) ; } if ( nic . isVirtual ( ) ) { flags . append ( <str> ) ; } flags . append ( <str> + nic . getMTU ( ) ) ; flags . append ( <str> + nic . getIndex ( ) ) ; return flags . toString ( ) ; } } 

package com . google . common . collect ; import static com . google . common . base . Preconditions . checkArgument ; import com . google . common . base . Function ; import com . google . common . base . Predicate ; import com . google . common . collect . Maps . EntryTransformer ; import jsinterop . annotations . JsPackage ; import jsinterop . annotations . JsProperty ; import jsinterop . annotations . JsType ; import java . io . Serializable ; import java . util . AbstractSet ; import java . util . Arrays ; import java . util . Collection ; import java . util . Deque ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . Map ; import java . util . Set ; import java . util . SortedMap ; import java . util . SortedSet ; import javax . annotation . Nullable ; final class Platform { static < T > T [ ] newArray ( T [ ] reference , int length ) { T [ ] clone = Arrays . copyOf ( reference , <int> ) ; resizeArray ( clone , length ) ; return clone ; } private static void resizeArray ( Object array , int newSize ) { ( ( NativeArray ) array ) . setLength ( newSize ) ; } @JsType ( isNative = true , name = <str> , namespace = JsPackage . GLOBAL ) private interface NativeArray { @JsProperty void setLength ( int length ) ; } static < E > Set < E > newSetFromMap ( Map < E , Boolean > map ) { return new SetFromMap < E > ( map ) ; } private static class SetFromMap < E > extends AbstractSet < E > implements Set < E > , Serializable { private final Map < E , Boolean > m ; private transient Set < E > s ; SetFromMap ( Map < E , Boolean > map ) { checkArgument ( map . isEmpty ( ) , <str> ) ; m = map ; s = map . keySet ( ) ; } @Override public void clear ( ) { m . clear ( ) ; } @Override public int size ( ) { return m . size ( ) ; } @Override public boolean isEmpty ( ) { return m . isEmpty ( ) ; } @Override public boolean contains ( Object o ) { return m . containsKey ( o ) ; } @Override public boolean remove ( Object o ) { return m . remove ( o ) ! = null ; } @Override public boolean add ( E e ) { return m . put ( e , Boolean . TRUE ) = = null ; } @Override public Iterator < E > iterator ( ) { return s . iterator ( ) ; } @Override public Object [ ] toArray ( ) { return s . toArray ( ) ; } @Override public < T > T [ ] toArray ( T [ ] a ) { return s . toArray ( a ) ; } @Override public String toString ( ) { return s . toString ( ) ; } @Override public int hashCode ( ) { return s . hashCode ( ) ; } @Override public boolean equals ( @Nullable Object object ) { return this = = object | | this . s . equals ( object ) ; } @Override public boolean containsAll ( Collection < ? > c ) { return s . containsAll ( c ) ; } @Override public boolean removeAll ( Collection < ? > c ) { return s . removeAll ( c ) ; } @Override public boolean retainAll ( Collection < ? > c ) { return s . retainAll ( c ) ; } } static MapMaker tryWeakKeys ( MapMaker mapMaker ) { return mapMaker ; } static < K , V1 , V2 > SortedMap < K , V2 > mapsTransformEntriesSortedMap ( SortedMap < K , V1 > fromMap , EntryTransformer < ? super K , ? super V1 , V2 > transformer ) { return Maps . transformEntriesIgnoreNavigable ( fromMap , transformer ) ; } static < K , V > SortedMap < K , V > mapsAsMapSortedSet ( SortedSet < K > set , Function < ? super K , V > function ) { return Maps . asMapSortedIgnoreNavigable ( set , function ) ; } static < E > SortedSet < E > setsFilterSortedSet ( SortedSet < E > unfiltered , Predicate < ? super E > predicate ) { return Sets . filterSortedIgnoreNavigable ( unfiltered , predicate ) ; } static < K , V > SortedMap < K , V > mapsFilterSortedMap ( SortedMap < K , V > unfiltered , Predicate < ? super Map . Entry < K , V > > predicate ) { return Maps . filterSortedIgnoreNavigable ( unfiltered , predicate ) ; } static < E > Deque < E > newFastestDeque ( int ignored ) { return new LinkedList < E > ( ) ; } private Platform ( ) { } } 

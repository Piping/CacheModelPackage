package org . apache . cassandra . service ; import java . io . File ; import java . io . IOException ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . * ; import java . util . concurrent . * ; import java . util . concurrent . atomic . AtomicBoolean ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . Multimap ; import com . google . common . collect . Sets ; import com . google . common . util . concurrent . Futures ; import com . google . common . util . concurrent . ListenableFuture ; import com . google . common . util . concurrent . ListeningExecutorService ; import com . google . common . util . concurrent . MoreExecutors ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . db . ColumnFamilyStore ; import org . apache . cassandra . db . SystemKeyspace ; import org . apache . cassandra . db . compaction . CompactionManager ; import org . apache . cassandra . dht . Range ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . gms . FailureDetector ; import org . apache . cassandra . gms . Gossiper ; import org . apache . cassandra . gms . IFailureDetector ; import org . apache . cassandra . io . sstable . Component ; import org . apache . cassandra . io . sstable . format . SSTableReader ; import org . apache . cassandra . locator . TokenMetadata ; import org . apache . cassandra . net . IAsyncCallbackWithFailure ; import org . apache . cassandra . net . MessageIn ; import org . apache . cassandra . net . MessageOut ; import org . apache . cassandra . net . MessagingService ; import org . apache . cassandra . repair . AnticompactionTask ; import org . apache . cassandra . repair . RepairJobDesc ; import org . apache . cassandra . repair . RepairParallelism ; import org . apache . cassandra . repair . RepairSession ; import org . apache . cassandra . repair . messages . * ; import org . apache . cassandra . utils . CassandraVersion ; import org . apache . cassandra . utils . FBUtilities ; import org . apache . cassandra . utils . UUIDGen ; import org . apache . cassandra . utils . concurrent . Ref ; import org . apache . cassandra . utils . concurrent . Refs ; public class ActiveRepairService { public static CassandraVersion SUPPORTS_GLOBAL_PREPARE_FLAG_VERSION = new CassandraVersion ( <str> ) ; private static final Logger logger = LoggerFactory . getLogger ( ActiveRepairService . class ) ; public static final ActiveRepairService instance = new ActiveRepairService ( FailureDetector . instance , Gossiper . instance ) ; public static final long UNREPAIRED_SSTABLE = <int> ; private final ConcurrentMap < UUID , RepairSession > sessions = new ConcurrentHashMap < > ( ) ; private final ConcurrentMap < UUID , ParentRepairSession > parentRepairSessions = new ConcurrentHashMap < > ( ) ; private final IFailureDetector failureDetector ; private final Gossiper gossiper ; public ActiveRepairService ( IFailureDetector failureDetector , Gossiper gossiper ) { this . failureDetector = failureDetector ; this . gossiper = gossiper ; } public RepairSession submitRepairSession ( UUID parentRepairSession , Collection < Range < Token > > range , String keyspace , RepairParallelism parallelismDegree , Set < InetAddress > endpoints , long repairedAt , ListeningExecutorService executor , String . . . cfnames ) { if ( endpoints . isEmpty ( ) ) return null ; if ( cfnames . length = = <int> ) return null ; final RepairSession session = new RepairSession ( parentRepairSession , UUIDGen . getTimeUUID ( ) , range , keyspace , parallelismDegree , endpoints , repairedAt , cfnames ) ; sessions . put ( session . getId ( ) , session ) ; gossiper . register ( session ) ; failureDetector . registerFailureDetectionEventListener ( session ) ; session . addListener ( new Runnable ( ) { public void run ( ) { failureDetector . unregisterFailureDetectionEventListener ( session ) ; gossiper . unregister ( session ) ; sessions . remove ( session . getId ( ) ) ; } } , MoreExecutors . sameThreadExecutor ( ) ) ; session . start ( executor ) ; return session ; } public synchronized void terminateSessions ( ) { Throwable cause = new IOException ( <str> ) ; for ( RepairSession session : sessions . values ( ) ) { session . forceShutdown ( cause ) ; } parentRepairSessions . clear ( ) ; } public static Set < InetAddress > getNeighbors ( String keyspaceName , Range < Token > toRepair , Collection < String > dataCenters , Collection < String > hosts ) { StorageService ss = StorageService . instance ; Map < Range < Token > , List < InetAddress > > replicaSets = ss . getRangeToAddressMap ( keyspaceName ) ; Range < Token > rangeSuperSet = null ; for ( Range < Token > range : ss . getLocalRanges ( keyspaceName ) ) { if ( range . contains ( toRepair ) ) { rangeSuperSet = range ; break ; } else if ( range . intersects ( toRepair ) ) { throw new IllegalArgumentException ( <str> ) ; } } if ( rangeSuperSet = = null | | ! replicaSets . containsKey ( rangeSuperSet ) ) return Collections . emptySet ( ) ; Set < InetAddress > neighbors = new HashSet < > ( replicaSets . get ( rangeSuperSet ) ) ; neighbors . remove ( FBUtilities . getBroadcastAddress ( ) ) ; if ( dataCenters ! = null & & ! dataCenters . isEmpty ( ) ) { TokenMetadata . Topology topology = ss . getTokenMetadata ( ) . cloneOnlyTokenMap ( ) . getTopology ( ) ; Set < InetAddress > dcEndpoints = Sets . newHashSet ( ) ; Multimap < String , InetAddress > dcEndpointsMap = topology . getDatacenterEndpoints ( ) ; for ( String dc : dataCenters ) { Collection < InetAddress > c = dcEndpointsMap . get ( dc ) ; if ( c ! = null ) dcEndpoints . addAll ( c ) ; } return Sets . intersection ( neighbors , dcEndpoints ) ; } else if ( hosts ! = null & & ! hosts . isEmpty ( ) ) { Set < InetAddress > specifiedHost = new HashSet < > ( ) ; for ( final String host : hosts ) { try { final InetAddress endpoint = InetAddress . getByName ( host . trim ( ) ) ; if ( endpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) | | neighbors . contains ( endpoint ) ) specifiedHost . add ( endpoint ) ; } catch ( UnknownHostException e ) { throw new IllegalArgumentException ( <str> + host , e ) ; } } if ( ! specifiedHost . contains ( FBUtilities . getBroadcastAddress ( ) ) ) throw new IllegalArgumentException ( <str> ) ; if ( specifiedHost . size ( ) < = <int> ) { String msg = <str> + <str> ; throw new IllegalArgumentException ( String . format ( msg , specifiedHost , neighbors , hosts ) ) ; } specifiedHost . remove ( FBUtilities . getBroadcastAddress ( ) ) ; return specifiedHost ; } return neighbors ; } public synchronized UUID prepareForRepair ( UUID parentRepairSession , Set < InetAddress > endpoints , RepairOption options , List < ColumnFamilyStore > columnFamilyStores ) { long timestamp = System . currentTimeMillis ( ) ; registerParentRepairSession ( parentRepairSession , columnFamilyStores , options . getRanges ( ) , options . isIncremental ( ) , timestamp , options . isGlobal ( ) ) ; final CountDownLatch prepareLatch = new CountDownLatch ( endpoints . size ( ) ) ; final AtomicBoolean status = new AtomicBoolean ( true ) ; final Set < String > failedNodes = Collections . synchronizedSet ( new HashSet < String > ( ) ) ; IAsyncCallbackWithFailure callback = new IAsyncCallbackWithFailure ( ) { public void response ( MessageIn msg ) { prepareLatch . countDown ( ) ; } public boolean isLatencyForSnitch ( ) { return false ; } public void onFailure ( InetAddress from ) { status . set ( false ) ; failedNodes . add ( from . getHostAddress ( ) ) ; prepareLatch . countDown ( ) ; } } ; List < UUID > cfIds = new ArrayList < > ( columnFamilyStores . size ( ) ) ; for ( ColumnFamilyStore cfs : columnFamilyStores ) cfIds . add ( cfs . metadata . cfId ) ; for ( InetAddress neighbour : endpoints ) { if ( FailureDetector . instance . isAlive ( neighbour ) ) { PrepareMessage message = new PrepareMessage ( parentRepairSession , cfIds , options . getRanges ( ) , options . isIncremental ( ) , timestamp , options . isGlobal ( ) ) ; MessageOut < RepairMessage > msg = message . createMessage ( ) ; MessagingService . instance ( ) . sendRR ( msg , neighbour , callback , TimeUnit . HOURS . toMillis ( <int> ) , true ) ; } else { status . set ( false ) ; failedNodes . add ( neighbour . getHostAddress ( ) ) ; prepareLatch . countDown ( ) ; } } try { prepareLatch . await ( <int> , TimeUnit . HOURS ) ; } catch ( InterruptedException e ) { parentRepairSessions . remove ( parentRepairSession ) ; throw new RuntimeException ( <str> + failedNodes . toString ( ) , e ) ; } if ( ! status . get ( ) ) { parentRepairSessions . remove ( parentRepairSession ) ; throw new RuntimeException ( <str> + failedNodes . toString ( ) ) ; } return parentRepairSession ; } public void registerParentRepairSession ( UUID parentRepairSession , List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental , long timestamp , boolean isGlobal ) { parentRepairSessions . put ( parentRepairSession , new ParentRepairSession ( columnFamilyStores , ranges , isIncremental , timestamp , isGlobal ) ) ; } public Set < SSTableReader > currentlyRepairing ( UUID cfId , UUID parentRepairSession ) { Set < SSTableReader > repairing = new HashSet < > ( ) ; for ( Map . Entry < UUID , ParentRepairSession > entry : parentRepairSessions . entrySet ( ) ) { Collection < SSTableReader > sstables = entry . getValue ( ) . sstableMap . get ( cfId ) ; if ( sstables ! = null & & ! entry . getKey ( ) . equals ( parentRepairSession ) ) repairing . addAll ( sstables ) ; } return repairing ; } public synchronized ListenableFuture finishParentSession ( UUID parentSession , Set < InetAddress > neighbors , Collection < Range < Token > > successfulRanges ) { List < ListenableFuture < ? > > tasks = new ArrayList < > ( neighbors . size ( ) + <int> ) ; for ( InetAddress neighbor : neighbors ) { AnticompactionTask task = new AnticompactionTask ( parentSession , neighbor , successfulRanges ) ; tasks . add ( task ) ; task . run ( ) ; } tasks . add ( doAntiCompaction ( parentSession , successfulRanges ) ) ; return Futures . successfulAsList ( tasks ) ; } public ParentRepairSession getParentRepairSession ( UUID parentSessionId ) { return parentRepairSessions . get ( parentSessionId ) ; } public synchronized ParentRepairSession removeParentRepairSession ( UUID parentSessionId ) { return parentRepairSessions . remove ( parentSessionId ) ; } @SuppressWarnings ( <str> ) public ListenableFuture < List < Object > > doAntiCompaction ( final UUID parentRepairSession , Collection < Range < Token > > successfulRanges ) { assert parentRepairSession ! = null ; ParentRepairSession prs = getParentRepairSession ( parentRepairSession ) ; if ( ! prs . isGlobal ) { logger . info ( <str> ) ; removeParentRepairSession ( parentRepairSession ) ; return Futures . immediateFuture ( Collections . emptyList ( ) ) ; } assert prs . ranges . containsAll ( successfulRanges ) : <str> ; List < ListenableFuture < ? > > futures = new ArrayList < > ( ) ; if ( ! successfulRanges . isEmpty ( ) ) { for ( Map . Entry < UUID , ColumnFamilyStore > columnFamilyStoreEntry : prs . columnFamilyStores . entrySet ( ) ) { Refs < SSTableReader > sstables = prs . getAndReferenceSSTables ( columnFamilyStoreEntry . getKey ( ) ) ; ColumnFamilyStore cfs = columnFamilyStoreEntry . getValue ( ) ; futures . add ( CompactionManager . instance . submitAntiCompaction ( cfs , successfulRanges , sstables , prs . repairedAt ) ) ; } } ListenableFuture < List < Object > > allAntiCompactionResults = Futures . successfulAsList ( futures ) ; allAntiCompactionResults . addListener ( new Runnable ( ) { @Override public void run ( ) { removeParentRepairSession ( parentRepairSession ) ; } } , MoreExecutors . sameThreadExecutor ( ) ) ; return allAntiCompactionResults ; } public void handleMessage ( InetAddress endpoint , RepairMessage message ) { RepairJobDesc desc = message . desc ; RepairSession session = sessions . get ( desc . sessionId ) ; if ( session = = null ) return ; switch ( message . messageType ) { case VALIDATION_COMPLETE : ValidationComplete validation = ( ValidationComplete ) message ; session . validationComplete ( desc , endpoint , validation . trees ) ; break ; case SYNC_COMPLETE : SyncComplete sync = ( SyncComplete ) message ; session . syncComplete ( desc , sync . nodes , sync . success ) ; break ; default : break ; } } public static class ParentRepairSession { private final Map < UUID , ColumnFamilyStore > columnFamilyStores = new HashMap < > ( ) ; private final Collection < Range < Token > > ranges ; private final Map < UUID , Set < SSTableReader > > sstableMap = new HashMap < > ( ) ; private final long repairedAt ; public final boolean isIncremental ; private final boolean isGlobal ; public ParentRepairSession ( List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental , long repairedAt , boolean isGlobal ) { for ( ColumnFamilyStore cfs : columnFamilyStores ) this . columnFamilyStores . put ( cfs . metadata . cfId , cfs ) ; this . ranges = ranges ; this . repairedAt = repairedAt ; this . isIncremental = isIncremental ; this . isGlobal = isGlobal ; } public void addSSTables ( UUID cfId , Set < SSTableReader > sstables ) { Set < SSTableReader > existingSSTables = this . sstableMap . get ( cfId ) ; if ( existingSSTables = = null ) existingSSTables = new HashSet < > ( ) ; existingSSTables . addAll ( sstables ) ; this . sstableMap . put ( cfId , existingSSTables ) ; } @SuppressWarnings ( <str> ) public synchronized Refs < SSTableReader > getAndReferenceSSTables ( UUID cfId ) { Set < SSTableReader > sstables = sstableMap . get ( cfId ) ; Iterator < SSTableReader > sstableIterator = sstables . iterator ( ) ; ImmutableMap . Builder < SSTableReader , Ref < SSTableReader > > references = ImmutableMap . builder ( ) ; while ( sstableIterator . hasNext ( ) ) { SSTableReader sstable = sstableIterator . next ( ) ; if ( ! new File ( sstable . descriptor . filenameFor ( Component . DATA ) ) . exists ( ) ) { sstableIterator . remove ( ) ; } else { Ref < SSTableReader > ref = sstable . tryRef ( ) ; if ( ref = = null ) sstableIterator . remove ( ) ; else references . put ( sstable , ref ) ; } } return new Refs < > ( references . build ( ) ) ; } public long getRepairedAt ( ) { if ( isGlobal ) return repairedAt ; return ActiveRepairService . UNREPAIRED_SSTABLE ; } @Override public String toString ( ) { return <str> + <str> + columnFamilyStores + <str> + ranges + <str> + sstableMap + <str> + repairedAt + <str> ; } } } 

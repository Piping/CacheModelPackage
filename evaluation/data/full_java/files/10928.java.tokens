package org . gradle . api . specs ; import org . gradle . util . CollectionUtils ; import org . junit . Assert ; import org . junit . Before ; import org . junit . Test ; import java . util . ArrayList ; import java . util . List ; import static org . junit . Assert . assertFalse ; abstract public class AbstractCompositeSpecTest { private Spec spec1 ; private Spec spec2 ; public abstract org . gradle . api . specs . CompositeSpec < Object > createCompositeSpec ( Spec < Object > . . . specs ) ; @Before public void setUp ( ) { spec1 = new Spec < Object > ( ) { public boolean isSatisfiedBy ( Object o ) { return false ; } } ; spec2 = new Spec < Object > ( ) { public boolean isSatisfiedBy ( Object o ) { return false ; } } ; } @Test public void init ( ) { org . gradle . api . specs . CompositeSpec < Object > compositeSpec = createCompositeSpec ( spec1 , spec2 ) ; Assert . assertEquals ( CollectionUtils . flattenCollections ( spec1 , spec2 ) , compositeSpec . getSpecs ( ) ) ; } protected Spec < Object > [ ] createAtomicElements ( boolean . . . satisfies ) { List < Spec < Object > > result = new ArrayList < Spec < Object > > ( ) ; for ( final boolean satisfy : satisfies ) { result . add ( new Spec < Object > ( ) { public boolean isSatisfiedBy ( Object o ) { return satisfy ; } } ) ; } return result . toArray ( new Spec [ result . size ( ) ] ) ; } @Test public void equality ( ) { assert createCompositeSpec ( spec1 ) . equals ( createCompositeSpec ( spec1 ) ) ; assertFalse ( createCompositeSpec ( spec1 ) . equals ( createCompositeSpec ( spec2 ) ) ) ; } } 

package org . gradle . api . internal . tasks . testing . junit . report ; import org . gradle . api . Action ; import org . gradle . internal . ErroringAction ; import org . gradle . internal . html . SimpleHtmlWriter ; import org . gradle . reporting . ReportRenderer ; import org . gradle . reporting . TabbedPageRenderer ; import org . gradle . reporting . TabsRenderer ; import java . io . IOException ; import java . net . URL ; abstract class PageRenderer < T extends CompositeTestResults > extends TabbedPageRenderer < T > { private static final URL STYLE_URL = PageRenderer . class . getResource ( <str> ) ; private T results ; private final TabsRenderer < T > tabsRenderer = new TabsRenderer < T > ( ) ; protected T getResults ( ) { return results ; } protected abstract void renderBreadcrumbs ( SimpleHtmlWriter htmlWriter ) throws IOException ; protected abstract void registerTabs ( ) ; @Override protected URL getStyleUrl ( ) { return STYLE_URL ; } protected void addTab ( String title , final Action < SimpleHtmlWriter > contentRenderer ) { tabsRenderer . add ( title , new ReportRenderer < T , SimpleHtmlWriter > ( ) { @Override public void render ( T model , SimpleHtmlWriter writer ) { contentRenderer . execute ( writer ) ; } } ) ; } protected void renderTabs ( SimpleHtmlWriter htmlWriter ) throws IOException { tabsRenderer . render ( getModel ( ) , htmlWriter ) ; } protected void addFailuresTab ( ) { if ( ! results . getFailures ( ) . isEmpty ( ) ) { addTab ( <str> , new ErroringAction < SimpleHtmlWriter > ( ) { public void doExecute ( SimpleHtmlWriter element ) throws IOException { renderFailures ( element ) ; } } ) ; } } protected void renderFailures ( SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) ; for ( TestResult test : results . getFailures ( ) ) { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , asHtmlLinkEncoded ( getResults ( ) . getUrlTo ( test . getClassResults ( ) ) ) ) . characters ( test . getClassResults ( ) . getSimpleName ( ) ) . endElement ( ) ; htmlWriter . characters ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , String . format ( <str> , asHtmlLinkEncoded ( getResults ( ) . getUrlTo ( test . getClassResults ( ) ) ) , test . getName ( ) ) ) . characters ( test . getName ( ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; } htmlWriter . endElement ( ) ; } protected void addIgnoredTab ( ) { if ( ! results . getIgnored ( ) . isEmpty ( ) ) { addTab ( <str> , new ErroringAction < SimpleHtmlWriter > ( ) { public void doExecute ( SimpleHtmlWriter htmlWriter ) throws IOException { renderIgnoredTests ( htmlWriter ) ; } } ) ; } } protected void renderIgnoredTests ( SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) ; for ( TestResult test : getResults ( ) . getIgnored ( ) ) { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , asHtmlLinkEncoded ( getResults ( ) . getUrlTo ( test . getClassResults ( ) ) ) ) . characters ( test . getClassResults ( ) . getSimpleName ( ) ) . endElement ( ) ; htmlWriter . characters ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , String . format ( <str> , asHtmlLinkEncoded ( getResults ( ) . getUrlTo ( test . getClassResults ( ) ) ) , test . getName ( ) ) ) . characters ( test . getName ( ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; } htmlWriter . endElement ( ) ; } @Override protected String getTitle ( ) { return getModel ( ) . getTitle ( ) ; } @Override protected String getPageTitle ( ) { return String . format ( <str> , getModel ( ) . getTitle ( ) ) ; } @Override protected ReportRenderer < T , SimpleHtmlWriter > getHeaderRenderer ( ) { return new ReportRenderer < T , SimpleHtmlWriter > ( ) { @Override public void render ( T model , SimpleHtmlWriter htmlWriter ) throws IOException { PageRenderer . this . results = model ; renderBreadcrumbs ( htmlWriter ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( Integer . toString ( results . getTestCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( Integer . toString ( results . getFailureCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( Integer . toString ( results . getIgnoredCount ( ) ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( results . getFormattedDuration ( ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , String . format ( <str> , results . getStatusClass ( ) ) ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( results . getFormattedSuccessRate ( ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; } } ; } @Override protected ReportRenderer < T , SimpleHtmlWriter > getContentRenderer ( ) { return new ReportRenderer < T , SimpleHtmlWriter > ( ) { @Override public void render ( T model , SimpleHtmlWriter htmlWriter ) throws IOException { PageRenderer . this . results = model ; tabsRenderer . clear ( ) ; registerTabs ( ) ; renderTabs ( htmlWriter ) ; } } ; } protected String asHtmlLinkEncoded ( String rawLink ) { return rawLink . replaceAll ( <str> , <str> ) ; } } 

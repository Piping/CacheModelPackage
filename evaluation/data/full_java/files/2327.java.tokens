package org . nd4j . bytebuddy . loadref ; import net . bytebuddy . description . method . MethodDescription ; import net . bytebuddy . implementation . Implementation ; import net . bytebuddy . implementation . bytecode . ByteCodeAppender ; import net . bytebuddy . implementation . bytecode . StackManipulation ; import net . bytebuddy . implementation . bytecode . member . MethodVariableAccess ; import net . bytebuddy . jar . asm . MethodVisitor ; import org . nd4j . bytebuddy . util . OpCodeUtil ; public class LoadDeclaredInternalReference implements ByteCodeAppender { private int refId = - <int> ; public LoadDeclaredInternalReference ( int refId ) { this . refId = refId ; } @Override public Size apply ( MethodVisitor methodVisitor , Implementation . Context implementationContext , MethodDescription instrumentedMethod ) { int numArgs = instrumentedMethod . getParameters ( ) . asTypeList ( ) . getStackSize ( ) ; int start = instrumentedMethod . isStatic ( ) ? <int> : <int> ; StackManipulation arg0 = MethodVariableAccess . REFERENCE . loadOffset ( numArgs + start + OpCodeUtil . getAloadInstructionForReference ( refId ) ) ; StackManipulation . Size size = arg0 . apply ( methodVisitor , implementationContext ) ; return new Size ( size . getMaximalSize ( ) , instrumentedMethod . getStackSize ( ) ) ; } } 

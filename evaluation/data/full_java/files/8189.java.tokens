package org . elasticsearch . index . mapper . internal ; import org . apache . lucene . index . DocValuesType ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . fielddata . FieldDataType ; import org . elasticsearch . index . mapper . ContentPath ; import org . elasticsearch . index . mapper . MappedFieldType . Loading ; import org . elasticsearch . index . mapper . Mapper ; import org . elasticsearch . test . ESTestCase ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . nullValue ; public class ParentFieldMapperTests extends ESTestCase { public void testPost2Dot0LazyLoading ( ) { ParentFieldMapper . Builder builder = new ParentFieldMapper . Builder ( <str> ) ; builder . type ( <str> ) ; builder . fieldDataSettings ( createFDSettings ( Loading . LAZY ) ) ; ParentFieldMapper parentFieldMapper = builder . build ( new Mapper . BuilderContext ( post2Dot0IndexSettings ( ) , new ContentPath ( <int> ) ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . names ( ) . indexName ( ) , equalTo ( <str> ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . fieldDataType ( ) , nullValue ( ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . hasDocValues ( ) , is ( true ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . docValuesType ( ) , equalTo ( DocValuesType . SORTED ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . names ( ) . indexName ( ) , equalTo ( <str> ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . fieldDataType ( ) . getLoading ( ) , equalTo ( Loading . LAZY ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . hasDocValues ( ) , is ( true ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . docValuesType ( ) , equalTo ( DocValuesType . SORTED ) ) ; } public void testPost2Dot0EagerLoading ( ) { ParentFieldMapper . Builder builder = new ParentFieldMapper . Builder ( <str> ) ; builder . type ( <str> ) ; builder . fieldDataSettings ( createFDSettings ( Loading . EAGER ) ) ; ParentFieldMapper parentFieldMapper = builder . build ( new Mapper . BuilderContext ( post2Dot0IndexSettings ( ) , new ContentPath ( <int> ) ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . names ( ) . indexName ( ) , equalTo ( <str> ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . fieldDataType ( ) , nullValue ( ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . hasDocValues ( ) , is ( true ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . docValuesType ( ) , equalTo ( DocValuesType . SORTED ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . names ( ) . indexName ( ) , equalTo ( <str> ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . fieldDataType ( ) . getLoading ( ) , equalTo ( Loading . EAGER ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . hasDocValues ( ) , is ( true ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . docValuesType ( ) , equalTo ( DocValuesType . SORTED ) ) ; } public void testPost2Dot0EagerGlobalOrdinalsLoading ( ) { ParentFieldMapper . Builder builder = new ParentFieldMapper . Builder ( <str> ) ; builder . type ( <str> ) ; builder . fieldDataSettings ( createFDSettings ( Loading . EAGER_GLOBAL_ORDINALS ) ) ; ParentFieldMapper parentFieldMapper = builder . build ( new Mapper . BuilderContext ( post2Dot0IndexSettings ( ) , new ContentPath ( <int> ) ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . names ( ) . indexName ( ) , equalTo ( <str> ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . fieldDataType ( ) , nullValue ( ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . hasDocValues ( ) , is ( true ) ) ; assertThat ( parentFieldMapper . getParentJoinFieldType ( ) . docValuesType ( ) , equalTo ( DocValuesType . SORTED ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . names ( ) . indexName ( ) , equalTo ( <str> ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . fieldDataType ( ) . getLoading ( ) , equalTo ( Loading . EAGER_GLOBAL_ORDINALS ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . hasDocValues ( ) , is ( true ) ) ; assertThat ( parentFieldMapper . getChildJoinFieldType ( ) . docValuesType ( ) , equalTo ( DocValuesType . SORTED ) ) ; } private static Settings post2Dot0IndexSettings ( ) { return Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . V_2_1_0 ) . build ( ) ; } private static Settings createFDSettings ( Loading loading ) { return new FieldDataType ( <str> , settingsBuilder ( ) . put ( Loading . KEY , loading ) ) . getSettings ( ) ; } } 

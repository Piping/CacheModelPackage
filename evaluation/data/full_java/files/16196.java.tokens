package org . gradle . foundation . ipc . gradle ; import org . gradle . api . invocation . Gradle ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; public class IPCUtilities { private static final Logger LOGGER = Logging . getLogger ( IPCUtilities . class ) ; public static void invokeExecuteGradleClient ( Gradle gradle ) { Integer port = getPort ( gradle ) ; if ( port = = null ) { return ; } ExecuteGradleCommandClientProtocol protocol = new ExecuteGradleCommandClientProtocol ( gradle ) ; GradleClient client = new GradleClient ( ) ; client . start ( protocol , port ) ; } private static Integer getPort ( Gradle gradle ) { String portText = gradle . getStartParameter ( ) . getSystemPropertiesArgs ( ) . get ( ProtocolConstants . PORT_NUMBER_SYSTEM_PROPERTY ) ; if ( portText = = null ) { LOGGER . error ( <str> + ProtocolConstants . PORT_NUMBER_SYSTEM_PROPERTY + <str> ) ; return null ; } try { return Integer . parseInt ( portText ) ; } catch ( NumberFormatException e ) { LOGGER . error ( <str> + ProtocolConstants . PORT_NUMBER_SYSTEM_PROPERTY + <str> , e ) ; return null ; } } public static void invokeTaskListGradleClient ( Gradle gradle ) { Integer port = getPort ( gradle ) ; if ( port = = null ) { return ; } TaskListClientProtocol protocol = new TaskListClientProtocol ( gradle ) ; GradleClient client = new GradleClient ( ) ; client . start ( protocol , port ) ; } } 

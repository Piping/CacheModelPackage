package org . elasticsearch . cluster ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . common . Priority ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . List ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class UpdateSettingsValidationIT extends ESIntegTestCase { public void testUpdateSettingsValidation ( ) throws Exception { List < String > nodes = internalCluster ( ) . startNodesAsync ( settingsBuilder ( ) . put ( <str> , false ) . build ( ) , settingsBuilder ( ) . put ( <str> , false ) . build ( ) , settingsBuilder ( ) . put ( <str> , false ) . build ( ) ) . get ( ) ; String master = nodes . get ( <int> ) ; String node_1 = nodes . get ( <int> ) ; String node_2 = nodes . get ( <int> ) ; createIndex ( <str> ) ; NumShards test = getNumShards ( <str> ) ; ClusterHealthResponse healthResponse = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForNodes ( <str> ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( healthResponse . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( test . totalNumShards ) ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; healthResponse = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( healthResponse . getIndices ( ) . get ( <str> ) . getActiveShards ( ) , equalTo ( test . numPrimaries ) ) ; try { client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( IllegalArgumentException ex ) { logger . info ( <str> , ex . getMessage ( ) ) ; } } } 

package org . elasticsearch . action . support . broadcast ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . TimeValue ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; public class BroadcastRequest < T extends BroadcastRequest > extends ActionRequest < T > implements IndicesRequest . Replaceable { protected String [ ] indices ; private IndicesOptions indicesOptions = IndicesOptions . strictExpandOpenAndForbidClosed ( ) ; public BroadcastRequest ( ) { } protected BroadcastRequest ( ActionRequest originalRequest ) { super ( originalRequest ) ; } protected BroadcastRequest ( String [ ] indices ) { this . indices = indices ; } @Override public String [ ] indices ( ) { return indices ; } @SuppressWarnings ( <str> ) @Override public final T indices ( String . . . indices ) { this . indices = indices ; return ( T ) this ; } @Override public ActionRequestValidationException validate ( ) { return null ; } @Override public IndicesOptions indicesOptions ( ) { return indicesOptions ; } @SuppressWarnings ( <str> ) public final T indicesOptions ( IndicesOptions indicesOptions ) { this . indicesOptions = indicesOptions ; return ( T ) this ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeStringArrayNullable ( indices ) ; indicesOptions . writeIndicesOptions ( out ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; indices = in . readStringArray ( ) ; indicesOptions = IndicesOptions . readIndicesOptions ( in ) ; } } 

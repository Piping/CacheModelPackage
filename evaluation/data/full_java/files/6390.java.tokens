package org . elasticsearch . index . analysis . compound ; import org . apache . lucene . analysis . compound . CompoundWordTokenFilterBase ; import org . apache . lucene . analysis . util . CharArraySet ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . analysis . AbstractTokenFilterFactory ; import org . elasticsearch . index . analysis . Analysis ; public abstract class AbstractCompoundWordTokenFilterFactory extends AbstractTokenFilterFactory { protected final int minWordSize ; protected final int minSubwordSize ; protected final int maxSubwordSize ; protected final boolean onlyLongestMatch ; protected final CharArraySet wordList ; public AbstractCompoundWordTokenFilterFactory ( IndexSettings indexSettings , Environment env , String name , Settings settings ) { super ( indexSettings , name , settings ) ; minWordSize = settings . getAsInt ( <str> , CompoundWordTokenFilterBase . DEFAULT_MIN_WORD_SIZE ) ; minSubwordSize = settings . getAsInt ( <str> , CompoundWordTokenFilterBase . DEFAULT_MIN_SUBWORD_SIZE ) ; maxSubwordSize = settings . getAsInt ( <str> , CompoundWordTokenFilterBase . DEFAULT_MAX_SUBWORD_SIZE ) ; onlyLongestMatch = settings . getAsBoolean ( <str> , false ) ; wordList = Analysis . getWordSet ( env , settings , <str> ) ; if ( wordList = = null ) { throw new IllegalArgumentException ( <str> + name + <str> ) ; } } } 

package org . elasticsearch . test . rest . client ; import org . elasticsearch . test . rest . Stash ; import org . elasticsearch . test . rest . client . http . HttpResponse ; import org . elasticsearch . test . rest . json . JsonPath ; import java . io . IOException ; public class RestResponse { private final HttpResponse response ; private JsonPath parsedResponse ; public RestResponse ( HttpResponse response ) { this . response = response ; } public int getStatusCode ( ) { return response . getStatusCode ( ) ; } public String getReasonPhrase ( ) { return response . getReasonPhrase ( ) ; } public Object getBody ( ) throws IOException { if ( isJson ( ) ) { return parsedResponse ( ) . evaluate ( <str> ) ; } return response . getBody ( ) ; } public String getBodyAsString ( ) { return response . getBody ( ) ; } public boolean isError ( ) { return response . isError ( ) ; } public Object evaluate ( String path ) throws IOException { return evaluate ( path , Stash . EMPTY ) ; } public Object evaluate ( String path , Stash stash ) throws IOException { if ( response = = null ) { return null ; } JsonPath jsonPath = parsedResponse ( ) ; if ( jsonPath = = null ) { if ( <str> . equals ( path ) & & ! response . supportsBody ( ) ) { return ! response . isError ( ) ; } return null ; } return jsonPath . evaluate ( path , stash ) ; } private boolean isJson ( ) { String contentType = response . getHeaders ( ) . get ( <str> ) ; return contentType ! = null & & contentType . contains ( <str> ) ; } private JsonPath parsedResponse ( ) throws IOException { if ( parsedResponse ! = null ) { return parsedResponse ; } if ( response = = null | | ! response . hasBody ( ) ) { return null ; } return parsedResponse = new JsonPath ( response . getBody ( ) ) ; } } 

package org . gradle . api . tasks ; import com . google . common . collect . Lists ; import org . gradle . api . Buildable ; import org . gradle . api . GradleException ; import org . gradle . api . Incubating ; import org . gradle . api . Project ; import org . gradle . api . artifacts . Dependency ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . file . FileCollectionInternal ; import org . gradle . api . internal . file . collections . LazilyInitializedFileCollection ; import org . gradle . api . internal . plugins . GroovyJarFile ; import org . gradle . api . internal . tasks . TaskDependencyResolveContext ; import org . gradle . internal . Cast ; import java . io . File ; import java . util . List ; @Incubating public class GroovyRuntime { private final Project project ; public GroovyRuntime ( Project project ) { this . project = project ; } public FileCollection inferGroovyClasspath ( final Iterable < File > classpath ) { return new LazilyInitializedFileCollection ( ) { @Override public String getDisplayName ( ) { return <str> ; } @Override public FileCollection createDelegate ( ) { GroovyJarFile groovyJar = findGroovyJarFile ( classpath ) ; if ( groovyJar = = null ) { throw new GradleException ( String . format ( <str> , classpath ) ) ; } if ( groovyJar . isGroovyAll ( ) ) { return Cast . cast ( FileCollectionInternal . class , project . files ( groovyJar . getFile ( ) ) ) ; } if ( project . getRepositories ( ) . isEmpty ( ) ) { throw new GradleException ( <str> ) ; } String notation = groovyJar . getDependencyNotation ( ) ; List < Dependency > dependencies = Lists . newArrayList ( ) ; dependencies . add ( project . getDependencies ( ) . create ( notation ) ) ; if ( groovyJar . getVersion ( ) . getMajor ( ) > = <int> ) { dependencies . add ( project . getDependencies ( ) . create ( notation . replace ( <str> , <str> ) ) ) ; } return project . getConfigurations ( ) . detachedConfiguration ( dependencies . toArray ( new Dependency [ dependencies . size ( ) ] ) ) ; } @Override public void visitDependencies ( TaskDependencyResolveContext context ) { if ( classpath instanceof Buildable ) { context . add ( classpath ) ; } } } ; } private GroovyJarFile findGroovyJarFile ( Iterable < File > classpath ) { if ( classpath = = null ) { return null ; } for ( File file : classpath ) { GroovyJarFile groovyJar = GroovyJarFile . parse ( file ) ; if ( groovyJar ! = null ) { return groovyJar ; } } return null ; } } 

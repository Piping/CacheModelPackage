package org . elasticsearch . common . xcontent . smile ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentGenerator ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class JsonVsSmileTests extends ESTestCase { public void testCompareParsingTokens ( ) throws IOException { BytesStreamOutput xsonOs = new BytesStreamOutput ( ) ; XContentGenerator xsonGen = XContentFactory . xContent ( XContentType . SMILE ) . createGenerator ( xsonOs ) ; BytesStreamOutput jsonOs = new BytesStreamOutput ( ) ; XContentGenerator jsonGen = XContentFactory . xContent ( XContentType . JSON ) . createGenerator ( jsonOs ) ; xsonGen . writeStartObject ( ) ; jsonGen . writeStartObject ( ) ; xsonGen . writeStringField ( <str> , <str> ) ; jsonGen . writeStringField ( <str> , <str> ) ; xsonGen . writeArrayFieldStart ( <str> ) ; jsonGen . writeArrayFieldStart ( <str> ) ; xsonGen . writeNumber ( <int> ) ; jsonGen . writeNumber ( <int> ) ; xsonGen . writeNull ( ) ; jsonGen . writeNull ( ) ; xsonGen . writeEndArray ( ) ; jsonGen . writeEndArray ( ) ; xsonGen . writeEndObject ( ) ; jsonGen . writeEndObject ( ) ; xsonGen . close ( ) ; jsonGen . close ( ) ; verifySameTokens ( XContentFactory . xContent ( XContentType . JSON ) . createParser ( jsonOs . bytes ( ) . toBytes ( ) ) , XContentFactory . xContent ( XContentType . SMILE ) . createParser ( xsonOs . bytes ( ) . toBytes ( ) ) ) ; } private void verifySameTokens ( XContentParser parser1 , XContentParser parser2 ) throws IOException { while ( true ) { XContentParser . Token token1 = parser1 . nextToken ( ) ; XContentParser . Token token2 = parser2 . nextToken ( ) ; if ( token1 = = null ) { assertThat ( token2 , nullValue ( ) ) ; return ; } assertThat ( token1 , equalTo ( token2 ) ) ; switch ( token1 ) { case FIELD_NAME : assertThat ( parser1 . currentName ( ) , equalTo ( parser2 . currentName ( ) ) ) ; break ; case VALUE_STRING : assertThat ( parser1 . text ( ) , equalTo ( parser2 . text ( ) ) ) ; break ; case VALUE_NUMBER : assertThat ( parser1 . numberType ( ) , equalTo ( parser2 . numberType ( ) ) ) ; assertThat ( parser1 . numberValue ( ) , equalTo ( parser2 . numberValue ( ) ) ) ; break ; } } } } 

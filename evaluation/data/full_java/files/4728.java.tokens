package org . eclipse . debug . ui . actions ; import java . util . Iterator ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . text . BadLocationException ; import org . eclipse . jface . text . IDocument ; import org . eclipse . jface . text . Position ; import org . eclipse . jface . text . source . Annotation ; import org . eclipse . jface . text . source . IAnnotationModel ; import org . eclipse . jface . text . source . IVerticalRulerInfo ; import org . eclipse . ui . texteditor . ITextEditor ; import org . eclipse . ui . texteditor . SimpleMarkerAnnotation ; public abstract class RulerBreakpointAction extends Action { private ITextEditor fEditor ; private IVerticalRulerInfo fRulerInfo ; public RulerBreakpointAction ( ITextEditor editor , IVerticalRulerInfo info ) { fEditor = editor ; fRulerInfo = info ; } protected IBreakpoint getBreakpoint ( ) { IAnnotationModel annotationModel = fEditor . getDocumentProvider ( ) . getAnnotationModel ( fEditor . getEditorInput ( ) ) ; IDocument document = fEditor . getDocumentProvider ( ) . getDocument ( fEditor . getEditorInput ( ) ) ; if ( annotationModel ! = null ) { Iterator < Annotation > iterator = annotationModel . getAnnotationIterator ( ) ; while ( iterator . hasNext ( ) ) { Annotation annot = iterator . next ( ) ; if ( annot instanceof SimpleMarkerAnnotation ) { SimpleMarkerAnnotation markerAnnotation = ( SimpleMarkerAnnotation ) annot ; IMarker marker = markerAnnotation . getMarker ( ) ; try { if ( marker . isSubtypeOf ( IBreakpoint . BREAKPOINT_MARKER ) ) { Position position = annotationModel . getPosition ( markerAnnotation ) ; int line = document . getLineOfOffset ( position . getOffset ( ) ) ; if ( line = = fRulerInfo . getLineOfLastMouseButtonActivity ( ) ) { IBreakpoint breakpoint = DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . getBreakpoint ( marker ) ; if ( breakpoint ! = null ) { return breakpoint ; } } } } catch ( CoreException e ) { } catch ( BadLocationException e ) { } } } } return null ; } protected ITextEditor getEditor ( ) { return fEditor ; } protected IVerticalRulerInfo getVerticalRulerInfo ( ) { return fRulerInfo ; } } 

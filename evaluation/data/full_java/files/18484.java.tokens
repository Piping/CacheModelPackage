package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . graphics . g3d . Model ; import com . badlogic . gdx . graphics . g3d . ModelBatch ; import com . badlogic . gdx . graphics . g3d . ModelInstance ; import com . badlogic . gdx . graphics . g3d . attributes . TextureAttribute ; import com . badlogic . gdx . graphics . g3d . loader . ObjLoader ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . ScreenUtils ; public class FramebufferToTextureTest extends GdxTest { TextureRegion fbTexture ; Texture texture ; Model mesh ; ModelInstance modelInstance ; ModelBatch modelBatch ; PerspectiveCamera cam ; SpriteBatch batch ; BitmapFont font ; Color clearColor = new Color ( <float> , <float> , <float> , <int> ) ; float angle = <int> ; @Override public void create ( ) { texture = new Texture ( Gdx . files . internal ( <str> ) , true ) ; texture . setFilter ( TextureFilter . MipMap , TextureFilter . Linear ) ; ObjLoader objLoader = new ObjLoader ( ) ; mesh = objLoader . loadModel ( Gdx . files . internal ( <str> ) ) ; mesh . materials . get ( <int> ) . set ( new TextureAttribute ( TextureAttribute . Diffuse , texture ) ) ; modelInstance = new ModelInstance ( mesh ) ; modelBatch = new ModelBatch ( ) ; cam = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; cam . position . set ( <int> , <int> , <int> ) ; cam . direction . set ( - <int> , - <int> , - <int> ) ; batch = new SpriteBatch ( ) ; font = new BitmapFont ( ) ; } @Override public void render ( ) { Gdx . gl . glViewport ( <int> , <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; Gdx . gl . glClearColor ( clearColor . g , clearColor . g , clearColor . b , clearColor . a ) ; Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; Gdx . gl . glEnable ( GL20 . GL_DEPTH_TEST ) ; Gdx . gl . glEnable ( GL20 . GL_TEXTURE_2D ) ; cam . update ( ) ; modelInstance . transform . rotate ( Vector3 . Y , <int> * Gdx . graphics . getDeltaTime ( ) ) ; modelBatch . begin ( cam ) ; modelBatch . render ( modelInstance ) ; modelBatch . end ( ) ; if ( Gdx . input . justTouched ( ) | | fbTexture = = null ) { if ( fbTexture ! = null ) fbTexture . getTexture ( ) . dispose ( ) ; fbTexture = ScreenUtils . getFrameBufferTexture ( ) ; } batch . begin ( ) ; if ( fbTexture ! = null ) { batch . draw ( fbTexture , <int> , <int> , <int> , <int> ) ; } font . draw ( batch , <str> , <int> , <int> ) ; batch . end ( ) ; } @Override public void pause ( ) { fbTexture = null ; } } 

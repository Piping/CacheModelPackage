package org . nd4j . bytebuddy . method ; import net . bytebuddy . ByteBuddy ; import net . bytebuddy . dynamic . loading . ClassLoadingStrategy ; import net . bytebuddy . implementation . Implementation ; import net . bytebuddy . matcher . ElementMatchers ; import org . junit . Test ; import org . nd4j . bytebuddy . method . integer . LoadIntParamImplementation ; import org . nd4j . bytebuddy . returnref . ReturnAppender ; import org . nd4j . bytebuddy . returnref . ReturnAppenderImplementation ; import static org . junit . Assert . * ; public class LoadIntParamTest { @Test public void testLoadParam ( ) throws Exception { Class < ? > dynamicType = new ByteBuddy ( ) . subclass ( GrabArgOne . class ) . method ( ElementMatchers . isDeclaredBy ( GrabArgOne . class ) ) . intercept ( new Implementation . Compound ( new LoadIntParamImplementation ( <int> ) , new ReturnAppenderImplementation ( ReturnAppender . ReturnType . INT ) ) ) . make ( ) . load ( GrabArgOne . class . getClassLoader ( ) , ClassLoadingStrategy . Default . WRAPPER ) . getLoaded ( ) ; GrabArgOne argOne = ( GrabArgOne ) dynamicType . newInstance ( ) ; int val = argOne . ret ( <int> , <int> ) ; assertEquals ( <int> , val ) ; Class < ? > dynamicType2 = new ByteBuddy ( ) . subclass ( GrabArgOne . class ) . method ( ElementMatchers . isDeclaredBy ( GrabArgOne . class ) ) . intercept ( new Implementation . Compound ( new LoadIntParamImplementation ( <int> ) , new ReturnAppenderImplementation ( ReturnAppender . ReturnType . INT ) ) ) . make ( ) . load ( GrabArgOne . class . getClassLoader ( ) , ClassLoadingStrategy . Default . WRAPPER ) . getLoaded ( ) ; GrabArgOne argOne2 = ( GrabArgOne ) dynamicType2 . newInstance ( ) ; int val2 = argOne2 . ret ( <int> , <int> ) ; assertEquals ( <int> , val2 ) ; } public interface GrabArgOne { int ret ( int arg0 , int arg1 ) ; } } 

package com . badlogic . gdx . physics . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Shape . Type ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class Fixture { private Body body ; protected long addr ; protected Shape shape ; protected Object userData ; protected Fixture ( Body body , long addr ) { this . body = body ; this . addr = addr ; } protected void reset ( Body body , long addr ) { this . body = body ; this . addr = addr ; this . shape = null ; this . userData = null ; } public Type getType ( ) { int type = jniGetType ( addr ) ; switch ( type ) { case <int> : return Type . Circle ; case <int> : return Type . Edge ; case <int> : return Type . Polygon ; case <int> : return Type . Chain ; default : throw new GdxRuntimeException ( <str> ) ; } } private native int jniGetType ( long addr ) ; public Shape getShape ( ) { if ( shape = = null ) { long shapeAddr = jniGetShape ( addr ) ; if ( shapeAddr = = <int> ) throw new GdxRuntimeException ( <str> ) ; int type = Shape . jniGetType ( shapeAddr ) ; switch ( type ) { case <int> : shape = new CircleShape ( shapeAddr ) ; break ; case <int> : shape = new EdgeShape ( shapeAddr ) ; break ; case <int> : shape = new PolygonShape ( shapeAddr ) ; break ; case <int> : shape = new ChainShape ( shapeAddr ) ; break ; default : throw new GdxRuntimeException ( <str> ) ; } } return shape ; } private native long jniGetShape ( long addr ) ; public void setSensor ( boolean sensor ) { jniSetSensor ( addr , sensor ) ; } private native void jniSetSensor ( long addr , boolean sensor ) ; public boolean isSensor ( ) { return jniIsSensor ( addr ) ; } private native boolean jniIsSensor ( long addr ) ; public void setFilterData ( Filter filter ) { jniSetFilterData ( addr , filter . categoryBits , filter . maskBits , filter . groupIndex ) ; } private native void jniSetFilterData ( long addr , short categoryBits , short maskBits , short groupIndex ) ; private final short [ ] tmp = new short [ <int> ] ; private final Filter filter = new Filter ( ) ; public Filter getFilterData ( ) { jniGetFilterData ( addr , tmp ) ; filter . maskBits = tmp [ <int> ] ; filter . categoryBits = tmp [ <int> ] ; filter . groupIndex = tmp [ <int> ] ; return filter ; } private native void jniGetFilterData ( long addr , short [ ] filter ) ; public void refilter ( ) { jniRefilter ( addr ) ; } private native void jniRefilter ( long addr ) ; public Body getBody ( ) { return body ; } public boolean testPoint ( Vector2 p ) { return jniTestPoint ( addr , p . x , p . y ) ; } public boolean testPoint ( float x , float y ) { return jniTestPoint ( addr , x , y ) ; } private native boolean jniTestPoint ( long addr , float x , float y ) ; public void setDensity ( float density ) { jniSetDensity ( addr , density ) ; } private native void jniSetDensity ( long addr , float density ) ; public float getDensity ( ) { return jniGetDensity ( addr ) ; } private native float jniGetDensity ( long addr ) ; public float getFriction ( ) { return jniGetFriction ( addr ) ; } private native float jniGetFriction ( long addr ) ; public void setFriction ( float friction ) { jniSetFriction ( addr , friction ) ; } private native void jniSetFriction ( long addr , float friction ) ; public float getRestitution ( ) { return jniGetRestitution ( addr ) ; } private native float jniGetRestitution ( long addr ) ; public void setRestitution ( float restitution ) { jniSetRestitution ( addr , restitution ) ; } private native void jniSetRestitution ( long addr , float restitution ) ; public void setUserData ( Object userData ) { this . userData = userData ; } public Object getUserData ( ) { return userData ; } } 

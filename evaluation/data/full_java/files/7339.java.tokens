package org . elasticsearch . search . aggregations . metrics . percentiles . tdigest ; import com . tdunning . math . stats . AVLTreeDigest ; import com . tdunning . math . stats . Centroid ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; public class TDigestState extends AVLTreeDigest { private final double compression ; public TDigestState ( double compression ) { super ( compression ) ; this . compression = compression ; } @Override public double compression ( ) { return compression ; } public static void write ( TDigestState state , StreamOutput out ) throws IOException { out . writeDouble ( state . compression ) ; out . writeVInt ( state . centroidCount ( ) ) ; for ( Centroid centroid : state . centroids ( ) ) { out . writeDouble ( centroid . mean ( ) ) ; out . writeVLong ( centroid . count ( ) ) ; } } public static TDigestState read ( StreamInput in ) throws IOException { double compression = in . readDouble ( ) ; TDigestState state = new TDigestState ( compression ) ; int n = in . readVInt ( ) ; for ( int i = <int> ; i < n ; i + + ) { state . add ( in . readDouble ( ) , in . readVInt ( ) ) ; } return state ; } } 

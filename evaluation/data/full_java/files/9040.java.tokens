package org . elasticsearch . test . rest . parser ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . test . rest . section . SkipSection ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; public class SkipSectionParser implements RestTestFragmentParser < SkipSection > { @Override public SkipSection parse ( RestTestSuiteParseContext parseContext ) throws IOException , RestTestParseException { XContentParser parser = parseContext . parser ( ) ; String currentFieldName = null ; XContentParser . Token token ; String version = null ; String reason = null ; List < String > features = new ArrayList < > ( ) ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) ) { version = parser . text ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { reason = parser . text ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { features . add ( parser . text ( ) ) ; } else { throw new RestTestParseException ( <str> + currentFieldName + <str> ) ; } } else if ( token = = XContentParser . Token . START_ARRAY ) { if ( <str> . equals ( currentFieldName ) ) { while ( parser . nextToken ( ) ! = XContentParser . Token . END_ARRAY ) { features . add ( parser . text ( ) ) ; } } } } parser . nextToken ( ) ; if ( ! Strings . hasLength ( version ) & & features . isEmpty ( ) ) { throw new RestTestParseException ( <str> ) ; } if ( Strings . hasLength ( version ) & & ! features . isEmpty ( ) ) { throw new RestTestParseException ( <str> ) ; } if ( Strings . hasLength ( version ) & & ! Strings . hasLength ( reason ) ) { throw new RestTestParseException ( <str> ) ; } return new SkipSection ( version , features , reason ) ; } } 

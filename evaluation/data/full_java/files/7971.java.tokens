package org . elasticsearch . common . unit ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . test . ESTestCase ; import org . hamcrest . MatcherAssert ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; public class ByteSizeValueTests extends ESTestCase { public void testActualPeta ( ) { MatcherAssert . assertThat ( new ByteSizeValue ( <int> , ByteSizeUnit . PB ) . bytes ( ) , equalTo ( <int> ) ) ; } public void testActualTera ( ) { MatcherAssert . assertThat ( new ByteSizeValue ( <int> , ByteSizeUnit . TB ) . bytes ( ) , equalTo ( <int> ) ) ; } public void testActual ( ) { MatcherAssert . assertThat ( new ByteSizeValue ( <int> , ByteSizeUnit . GB ) . bytes ( ) , equalTo ( <int> ) ) ; } public void testSimple ( ) { assertThat ( ByteSizeUnit . BYTES . toBytes ( <int> ) , is ( new ByteSizeValue ( <int> , ByteSizeUnit . BYTES ) . bytes ( ) ) ) ; assertThat ( ByteSizeUnit . KB . toKB ( <int> ) , is ( new ByteSizeValue ( <int> , ByteSizeUnit . KB ) . kb ( ) ) ) ; assertThat ( ByteSizeUnit . MB . toMB ( <int> ) , is ( new ByteSizeValue ( <int> , ByteSizeUnit . MB ) . mb ( ) ) ) ; assertThat ( ByteSizeUnit . GB . toGB ( <int> ) , is ( new ByteSizeValue ( <int> , ByteSizeUnit . GB ) . gb ( ) ) ) ; assertThat ( ByteSizeUnit . TB . toTB ( <int> ) , is ( new ByteSizeValue ( <int> , ByteSizeUnit . TB ) . tb ( ) ) ) ; assertThat ( ByteSizeUnit . PB . toPB ( <int> ) , is ( new ByteSizeValue ( <int> , ByteSizeUnit . PB ) . pb ( ) ) ) ; } public void testEquality ( ) { String [ ] equalValues = new String [ ] { <str> , <str> , <str> , <str> } ; ByteSizeValue value1 = ByteSizeValue . parseBytesSizeValue ( randomFrom ( equalValues ) , <str> ) ; ByteSizeValue value2 = ByteSizeValue . parseBytesSizeValue ( randomFrom ( equalValues ) , <str> ) ; assertThat ( value1 , equalTo ( value2 ) ) ; } public void testToString ( ) { assertThat ( <str> , is ( new ByteSizeValue ( <int> , ByteSizeUnit . BYTES ) . toString ( ) ) ) ; assertThat ( <str> , is ( new ByteSizeValue ( ( long ) ( <int> * <float> ) , ByteSizeUnit . BYTES ) . toString ( ) ) ) ; assertThat ( <str> , is ( new ByteSizeValue ( ( long ) ( <int> * <float> ) , ByteSizeUnit . KB ) . toString ( ) ) ) ; assertThat ( <str> , is ( new ByteSizeValue ( ( long ) ( <int> * <float> ) , ByteSizeUnit . MB ) . toString ( ) ) ) ; assertThat ( <str> , is ( new ByteSizeValue ( ( long ) ( <int> * <float> ) , ByteSizeUnit . GB ) . toString ( ) ) ) ; assertThat ( <str> , is ( new ByteSizeValue ( ( long ) ( <int> * <float> ) , ByteSizeUnit . TB ) . toString ( ) ) ) ; assertThat ( <str> , is ( new ByteSizeValue ( ( long ) ( <int> * <float> ) , ByteSizeUnit . PB ) . toString ( ) ) ) ; } public void testParsing ( ) { assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; } public void testFailOnMissingUnits ( ) { try { ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) ; fail ( <str> ) ; } catch ( ElasticsearchParseException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testFailOnUnknownUnits ( ) { try { ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) ; fail ( <str> ) ; } catch ( ElasticsearchParseException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testFailOnEmptyParsing ( ) { try { assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; fail ( <str> ) ; } catch ( ElasticsearchParseException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testFailOnEmptyNumberParsing ( ) { try { assertThat ( ByteSizeValue . parseBytesSizeValue ( <str> , <str> ) . toString ( ) , is ( <str> ) ) ; fail ( <str> ) ; } catch ( ElasticsearchParseException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testNoDotsAllowed ( ) { try { ByteSizeValue . parseBytesSizeValue ( <str> , null , <str> ) ; fail ( <str> ) ; } catch ( ElasticsearchParseException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

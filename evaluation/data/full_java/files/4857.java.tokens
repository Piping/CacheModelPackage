package org . eclipse . ui . externaltools . internal . ui ; import org . eclipse . core . externaltools . internal . IExternalToolConstants ; import org . eclipse . core . resources . ICommand ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IExtension ; import org . eclipse . core . runtime . Platform ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugModelPresentation ; import org . eclipse . jface . viewers . LabelProvider ; import org . eclipse . osgi . util . NLS ; import org . eclipse . swt . graphics . Image ; import org . eclipse . ui . externaltools . internal . model . ExternalToolsPlugin ; import org . eclipse . ui . externaltools . internal . ui . BuilderPropertyPage . ErrorConfig ; class BuilderLabelProvider extends LabelProvider { private static final String IMG_BUILDER = <str> ; private static final String IMG_INVALID_BUILD_TOOL = <str> ; IDebugModelPresentation debugModelPresentation = DebugUITools . newDebugModelPresentation ( ) ; private Image builderImage = ExternalToolsPlugin . getDefault ( ) . getImageDescriptor ( IMG_BUILDER ) . createImage ( ) ; private Image invalidBuildToolImage = ExternalToolsPlugin . getDefault ( ) . getImageDescriptor ( IMG_INVALID_BUILD_TOOL ) . createImage ( ) ; @Override public String getText ( Object element ) { if ( element instanceof ICommand ) { return getCommandText ( ( ICommand ) element ) ; } else if ( element instanceof ILaunchConfiguration | | element instanceof ILaunchConfigurationType ) { return getDebugModelText ( element ) ; } else if ( element instanceof ErrorConfig ) { return ExternalToolsUIMessages . BuilderPropertyPage_invalidBuildTool ; } return super . getText ( element ) ; } @Override public Image getImage ( Object element ) { if ( element instanceof ICommand ) { return getCommandImage ( ) ; } else if ( element instanceof ILaunchConfiguration | | element instanceof ILaunchConfigurationType ) { return getDebugModelImage ( element ) ; } else if ( element instanceof ErrorConfig ) { return invalidBuildToolImage ; } return super . getImage ( element ) ; } public String getCommandText ( ICommand command ) { String builderID = command . getBuilderName ( ) ; return getBuilderName ( builderID ) ; } private String getBuilderName ( String builderID ) { IExtension extension = Platform . getExtensionRegistry ( ) . getExtension ( ResourcesPlugin . PI_RESOURCES , ResourcesPlugin . PT_BUILDERS , builderID ) ; String builderName ; if ( extension ! = null ) { builderName = extension . getLabel ( ) ; } else { builderName = NLS . bind ( ExternalToolsUIMessages . BuilderPropertyPage_missingBuilder , new Object [ ] { builderID } ) ; } return builderName ; } public Image getCommandImage ( ) { return builderImage ; } public String getDebugModelText ( Object element ) { if ( element instanceof ILaunchConfiguration ) { try { String disabledBuilderName = ( ( ILaunchConfiguration ) element ) . getAttribute ( IExternalToolConstants . ATTR_DISABLED_BUILDER , ( String ) null ) ; if ( disabledBuilderName ! = null ) { return getBuilderName ( disabledBuilderName ) ; } } catch ( CoreException e ) { } } return debugModelPresentation . getText ( element ) ; } public Image getDebugModelImage ( Object element ) { if ( element instanceof ILaunchConfiguration ) { try { String disabledBuilderName = ( ( ILaunchConfiguration ) element ) . getAttribute ( IExternalToolConstants . ATTR_DISABLED_BUILDER , ( String ) null ) ; if ( disabledBuilderName ! = null ) { return builderImage ; } } catch ( CoreException e ) { } } return debugModelPresentation . getImage ( element ) ; } @Override public void dispose ( ) { builderImage . dispose ( ) ; invalidBuildToolImage . dispose ( ) ; } } 

package org . elasticsearch . cluster ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . common . Priority ; import org . elasticsearch . test . ESIntegTestCase ; import static org . hamcrest . Matchers . equalTo ; public class ClusterHealthIT extends ESIntegTestCase { public void testSimpleLocalHealth ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; for ( String node : internalCluster ( ) . getNodeNames ( ) ) { ClusterHealthResponse health = client ( node ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setLocal ( true ) . setWaitForEvents ( Priority . LANGUID ) . setTimeout ( <str> ) . get ( <str> ) ; assertThat ( health . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( health . isTimedOut ( ) , equalTo ( false ) ) ; } } public void testHealth ( ) { logger . info ( <str> ) ; ClusterHealthResponse healthResponse = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> ) . setWaitForYellowStatus ( ) . setTimeout ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( true ) ) ; assertThat ( healthResponse . getStatus ( ) , equalTo ( ClusterHealthStatus . RED ) ) ; assertThat ( healthResponse . getIndices ( ) . isEmpty ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; healthResponse = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForGreenStatus ( ) . setTimeout ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( healthResponse . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( healthResponse . getIndices ( ) . isEmpty ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; createIndex ( <str> ) ; logger . info ( <str> ) ; healthResponse = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> ) . setWaitForGreenStatus ( ) . setTimeout ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( false ) ) ; assertThat ( healthResponse . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( healthResponse . getIndices ( ) . get ( <str> ) . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; logger . info ( <str> ) ; healthResponse = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( <str> , <str> ) . setWaitForYellowStatus ( ) . setTimeout ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( healthResponse . isTimedOut ( ) , equalTo ( true ) ) ; assertThat ( healthResponse . getStatus ( ) , equalTo ( ClusterHealthStatus . RED ) ) ; assertThat ( healthResponse . getIndices ( ) . get ( <str> ) . getStatus ( ) , equalTo ( ClusterHealthStatus . GREEN ) ) ; assertThat ( healthResponse . getIndices ( ) . size ( ) , equalTo ( <int> ) ) ; } } 

package org . gradle . launcher . daemon . server . exec ; import org . gradle . launcher . daemon . protocol . Build ; import org . gradle . launcher . daemon . protocol . Command ; import org . gradle . launcher . daemon . server . api . DaemonCommandAction ; import org . gradle . launcher . daemon . server . api . DaemonCommandExecution ; abstract public class BuildCommandOnly implements DaemonCommandAction { public void execute ( DaemonCommandExecution execution ) { Command command = execution . getCommand ( ) ; if ( ! ( command instanceof Build ) ) { throw new IllegalStateException ( String . format ( <str> , this . getClass ( ) , command . getClass ( ) ) ) ; } doBuild ( execution , ( Build ) command ) ; } protected void doBuild ( DaemonCommandExecution execution , Build build ) { } } 

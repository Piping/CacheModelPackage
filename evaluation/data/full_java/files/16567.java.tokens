package org . junit . runners ; import static org . junit . Assert . assertEquals ; import java . util . concurrent . atomic . AtomicInteger ; import org . junit . Test ; import org . junit . runner . Description ; import org . junit . runner . notification . Failure ; import org . junit . runner . notification . RunListener ; import org . junit . runner . notification . RunNotifier ; import org . junit . runners . model . FrameworkMethod ; import org . junit . runners . model . InitializationError ; import org . junit . runners . model . Statement ; public class CustomBlockJUnit4ClassRunnerTest { @Test public void exceptionsFromMethodBlockMustNotResultInUnrootedTests ( ) throws Exception { TrackingRunListener listener = new TrackingRunListener ( ) ; RunNotifier notifier = new RunNotifier ( ) ; notifier . addListener ( listener ) ; new CustomBlockJUnit4ClassRunner ( CustomBlockJUnit4ClassRunnerTestCase . class ) . run ( notifier ) ; assertEquals ( <str> , <int> , listener . testStartedCount . get ( ) ) ; assertEquals ( <str> , <int> , listener . testFailureCount . get ( ) ) ; assertEquals ( <str> , <int> , listener . testFinishedCount . get ( ) ) ; } public static class CustomBlockJUnit4ClassRunnerTestCase { @Test public void shouldPass ( ) { } @Test public void throwException ( ) { } } private static class CustomBlockJUnit4ClassRunner extends BlockJUnit4ClassRunner { CustomBlockJUnit4ClassRunner ( Class < ? > testClass ) throws InitializationError { super ( testClass ) ; } @Override protected Statement methodBlock ( FrameworkMethod method ) { if ( <str> . equals ( method . getName ( ) ) ) { throw new RuntimeException ( <str> ) ; } return super . methodBlock ( method ) ; } } private static class TrackingRunListener extends RunListener { final AtomicInteger testStartedCount = new AtomicInteger ( ) ; final AtomicInteger testFailureCount = new AtomicInteger ( ) ; final AtomicInteger testFinishedCount = new AtomicInteger ( ) ; @Override public void testStarted ( Description description ) throws Exception { testStartedCount . incrementAndGet ( ) ; } @Override public void testFailure ( Failure failure ) throws Exception { testFailureCount . incrementAndGet ( ) ; } @Override public void testFinished ( Description description ) throws Exception { testFinishedCount . incrementAndGet ( ) ; } } } 

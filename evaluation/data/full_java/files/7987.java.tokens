package org . elasticsearch . common . util ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . test . ESTestCase ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . atomic . AtomicBoolean ; import java . util . concurrent . atomic . AtomicInteger ; public class SingleObjectCacheTests extends ESTestCase { public void testRefresh ( ) { final AtomicInteger count = new AtomicInteger ( <int> ) ; final AtomicBoolean needsRefresh = new AtomicBoolean ( true ) ; SingleObjectCache < Integer > cache = new SingleObjectCache < Integer > ( TimeValue . timeValueMillis ( <int> ) , <int> ) { @Override protected Integer refresh ( ) { return count . incrementAndGet ( ) ; } @Override protected boolean needsRefresh ( ) { return needsRefresh . get ( ) ; } } ; assertEquals ( <int> , cache . getOrRefresh ( ) . intValue ( ) ) ; assertEquals ( <int> , cache . getOrRefresh ( ) . intValue ( ) ) ; needsRefresh . set ( false ) ; assertEquals ( <int> , cache . getOrRefresh ( ) . intValue ( ) ) ; needsRefresh . set ( true ) ; assertEquals ( <int> , cache . getOrRefresh ( ) . intValue ( ) ) ; } public void testRefreshDoesntBlock ( ) throws InterruptedException { final AtomicInteger count = new AtomicInteger ( <int> ) ; final AtomicBoolean needsRefresh = new AtomicBoolean ( true ) ; final CountDownLatch latch = new CountDownLatch ( <int> ) ; final CountDownLatch waiting = new CountDownLatch ( <int> ) ; final SingleObjectCache < Integer > cache = new SingleObjectCache < Integer > ( TimeValue . timeValueMillis ( <int> ) , <int> ) { @Override protected Integer refresh ( ) { if ( count . get ( ) = = <int> ) { try { waiting . countDown ( ) ; latch . await ( ) ; } catch ( InterruptedException e ) { assert false ; } } return count . incrementAndGet ( ) ; } @Override protected boolean needsRefresh ( ) { return needsRefresh . get ( ) ; } } ; assertEquals ( <int> , cache . getOrRefresh ( ) . intValue ( ) ) ; needsRefresh . set ( true ) ; Thread t = new Thread ( ) { @Override public void run ( ) { Integer value = cache . getOrRefresh ( ) ; assertEquals ( <int> , value . intValue ( ) ) ; } } ; t . start ( ) ; waiting . await ( ) ; assertEquals ( <int> , cache . getOrRefresh ( ) . intValue ( ) ) ; needsRefresh . set ( false ) ; latch . countDown ( ) ; t . join ( ) ; assertEquals ( <int> , cache . getOrRefresh ( ) . intValue ( ) ) ; } } 

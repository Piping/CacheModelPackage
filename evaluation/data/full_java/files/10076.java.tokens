package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . FAILS_FAST_ON_CONCURRENT_MODIFICATION ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . ListFeature . SUPPORTS_REMOVE_WITH_INDEX ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import java . util . ConcurrentModificationException ; import java . util . Iterator ; import java . util . List ; @GwtCompatible public class ListRemoveAtIndexTester < E > extends AbstractListTester < E > { @ListFeature.Require ( absent = SUPPORTS_REMOVE_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveAtIndex_unsupported ( ) { try { getList ( ) . remove ( <int> ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; } @ListFeature.Require ( SUPPORTS_REMOVE_WITH_INDEX ) public void testRemoveAtIndex_negative ( ) { try { getList ( ) . remove ( - <int> ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } expectUnchanged ( ) ; } @ListFeature.Require ( SUPPORTS_REMOVE_WITH_INDEX ) public void testRemoveAtIndex_tooLarge ( ) { try { getList ( ) . remove ( getNumElements ( ) ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } expectUnchanged ( ) ; } @ListFeature.Require ( SUPPORTS_REMOVE_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveAtIndex_first ( ) { runRemoveTest ( <int> ) ; } @ListFeature.Require ( SUPPORTS_REMOVE_WITH_INDEX ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testRemoveAtIndex_middle ( ) { runRemoveTest ( getNumElements ( ) / <int> ) ; } @CollectionFeature.Require ( FAILS_FAST_ON_CONCURRENT_MODIFICATION ) @ListFeature.Require ( SUPPORTS_REMOVE_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveAtIndexConcurrentWithIteration ( ) { try { Iterator < E > iterator = collection . iterator ( ) ; getList ( ) . remove ( getNumElements ( ) / <int> ) ; iterator . next ( ) ; fail ( <str> ) ; } catch ( ConcurrentModificationException expected ) { } } @ListFeature.Require ( SUPPORTS_REMOVE_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveAtIndex_last ( ) { runRemoveTest ( getNumElements ( ) - <int> ) ; } private void runRemoveTest ( int index ) { assertEquals ( Platform . format ( <str> , index , index ) , getList ( ) . get ( index ) , getList ( ) . remove ( index ) ) ; List < E > expected = Helpers . copyToList ( createSamplesArray ( ) ) ; expected . remove ( index ) ; expectContents ( expected ) ; } } 

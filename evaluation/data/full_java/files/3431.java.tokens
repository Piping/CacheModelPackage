package org . nd4j . linalg . api . indexing ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . INDArrayIndex ; import org . nd4j . linalg . indexing . NDArrayIndex ; public class IndexingTestsC extends BaseNd4jTest { public IndexingTestsC ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public IndexingTestsC ( Nd4jBackend backend ) { super ( backend ) ; } public IndexingTestsC ( ) { } public IndexingTestsC ( String name ) { super ( name ) ; } @Test public void testOffsetsC ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; assertEquals ( <int> , NDArrayIndex . offset ( arr , <int> , <int> ) ) ; assertEquals ( <int> , NDArrayIndex . offset ( arr , NDArrayIndex . point ( <int> ) , NDArrayIndex . point ( <int> ) ) ) ; INDArray arr2 = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; assertEquals ( <int> , NDArrayIndex . offset ( arr2 , <int> , <int> ) ) ; assertEquals ( <int> , NDArrayIndex . offset ( arr2 , NDArrayIndex . point ( <int> ) , NDArrayIndex . point ( <int> ) ) ) ; assertEquals ( <int> , NDArrayIndex . offset ( arr2 , <int> , <int> ) ) ; assertEquals ( <int> , NDArrayIndex . offset ( arr2 , NDArrayIndex . point ( <int> ) , NDArrayIndex . point ( <int> ) ) ) ; } @Test public void testIndexFor ( ) { int [ ] shape = { <int> , <int> } ; INDArrayIndex [ ] indexes = NDArrayIndex . indexesFor ( shape ) ; for ( int i = <int> ; i < indexes . length ; i + + ) { assertEquals ( shape [ i ] , indexes [ i ] . offset ( ) ) ; } } @Test public void testGetScalar ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) ; INDArray d = arr . get ( NDArrayIndex . point ( <int> ) ) ; assertTrue ( d . isScalar ( ) ) ; assertEquals ( <float> , d . getDouble ( <int> ) ) ; } @Test public void testGetIndices2d ( ) throws Exception { INDArray twoByTwo = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArray firstRow = twoByTwo . getRow ( <int> ) ; INDArray secondRow = twoByTwo . getRow ( <int> ) ; INDArray firstAndSecondRow = twoByTwo . getRows ( new int [ ] { <int> , <int> } ) ; INDArray firstRowViaIndexing = twoByTwo . get ( NDArrayIndex . interval ( <int> , <int> ) ) ; assertEquals ( firstRow , firstRowViaIndexing ) ; INDArray secondRowViaIndexing = twoByTwo . get ( NDArrayIndex . point ( <int> ) ) ; assertEquals ( secondRow , secondRowViaIndexing ) ; INDArray firstAndSecondRowTest = twoByTwo . get ( NDArrayIndex . interval ( <int> , <int> ) ) ; assertEquals ( firstAndSecondRow , firstAndSecondRowTest ) ; INDArray individualElement = twoByTwo . get ( NDArrayIndex . interval ( <int> , <int> ) , NDArrayIndex . interval ( <int> , <int> ) ) ; assertEquals ( Nd4j . create ( new float [ ] { <int> } ) , individualElement ) ; } @Test public void testConcatColumns ( ) { INDArray input1 = Nd4j . zeros ( <int> , <int> ) ; INDArray input2 = Nd4j . ones ( <int> , <int> ) ; INDArray concat = Nd4j . concat ( <int> , input1 , input2 ) ; INDArray assertion = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; assertEquals ( assertion , concat ) ; } @Test public void testGetIndicesVector ( ) { INDArray line = Nd4j . linspace ( <int> , <int> , <int> ) ; INDArray test = Nd4j . create ( new float [ ] { <int> , <int> } ) ; INDArray result = line . get ( NDArrayIndex . point ( <int> ) , NDArrayIndex . interval ( <int> , <int> ) ) ; assertEquals ( test , result ) ; } @Test public void testArangeMul ( ) { INDArray arange = Nd4j . arange ( <int> , <int> ) . reshape ( <int> , <int> ) ; INDArrayIndex index = NDArrayIndex . interval ( <int> , <int> ) ; INDArray get = arange . get ( index , index ) ; INDArray ones = Nd4j . ones ( <int> , <int> ) . mul ( <float> ) ; INDArray mul = get . mul ( ones ) ; INDArray assertion = Nd4j . create ( new double [ ] [ ] { { <float> , <float> } , { <float> , <float> } } ) ; assertEquals ( assertion , mul ) ; } @Override public char ordering ( ) { return <str> ; } } 

package org . elasticsearch . script . python ; import java . io . IOException ; import java . security . AccessControlContext ; import java . security . AccessController ; import java . security . Permissions ; import java . security . PrivilegedAction ; import java . security . ProtectionDomain ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; import org . apache . lucene . index . LeafReaderContext ; import org . apache . lucene . search . Scorer ; import org . elasticsearch . SpecialPermission ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . script . ClassPermission ; import org . elasticsearch . script . CompiledScript ; import org . elasticsearch . script . ExecutableScript ; import org . elasticsearch . script . LeafSearchScript ; import org . elasticsearch . script . ScoreAccessor ; import org . elasticsearch . script . ScriptEngineService ; import org . elasticsearch . script . SearchScript ; import org . elasticsearch . search . lookup . LeafSearchLookup ; import org . elasticsearch . search . lookup . SearchLookup ; import org . python . core . Py ; import org . python . core . PyCode ; import org . python . core . PyObject ; import org . python . core . PyStringMap ; import org . python . util . PythonInterpreter ; public class PythonScriptEngineService extends AbstractComponent implements ScriptEngineService { private final PythonInterpreter interp ; @Inject public PythonScriptEngineService ( Settings settings ) { super ( settings ) ; final SecurityManager sm = System . getSecurityManager ( ) ; if ( sm ! = null ) { sm . checkPermission ( new SpecialPermission ( ) ) ; } this . interp = AccessController . doPrivileged ( new PrivilegedAction < PythonInterpreter > ( ) { @Override public PythonInterpreter run ( ) { final AccessControlContext engineContext = AccessController . getContext ( ) ; PythonInterpreter interp = PythonInterpreter . threadLocalStateInterpreter ( null ) ; if ( sm ! = null ) { interp . getSystemState ( ) . setClassLoader ( new ClassLoader ( getClass ( ) . getClassLoader ( ) ) { @Override protected Class < ? > loadClass ( String name , boolean resolve ) throws ClassNotFoundException { try { engineContext . checkPermission ( new ClassPermission ( name ) ) ; } catch ( SecurityException e ) { throw new ClassNotFoundException ( name , e ) ; } return super . loadClass ( name , resolve ) ; } } ) ; } return interp ; } } ) ; } @Override public String [ ] types ( ) { return new String [ ] { <str> , <str> } ; } @Override public String [ ] extensions ( ) { return new String [ ] { <str> } ; } @Override public boolean sandboxed ( ) { return false ; } @Override public Object compile ( String script ) { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm ! = null ) { sm . checkPermission ( new SpecialPermission ( ) ) ; } return AccessController . doPrivileged ( new PrivilegedAction < PyCode > ( ) { @Override public PyCode run ( ) { return interp . compile ( script ) ; } } ) ; } @Override public ExecutableScript executable ( CompiledScript compiledScript , Map < String , Object > vars ) { return new PythonExecutableScript ( ( PyCode ) compiledScript . compiled ( ) , vars ) ; } @Override public SearchScript search ( final CompiledScript compiledScript , final SearchLookup lookup , @Nullable final Map < String , Object > vars ) { return new SearchScript ( ) { @Override public LeafSearchScript getLeafSearchScript ( LeafReaderContext context ) throws IOException { final LeafSearchLookup leafLookup = lookup . getLeafSearchLookup ( context ) ; return new PythonSearchScript ( ( PyCode ) compiledScript . compiled ( ) , vars , leafLookup ) ; } @Override public boolean needsScores ( ) { return true ; } } ; } @Override public void close ( ) { interp . cleanup ( ) ; } @Override public void scriptRemoved ( @Nullable CompiledScript compiledScript ) { } public class PythonExecutableScript implements ExecutableScript { private final PyCode code ; private final PyStringMap pyVars ; public PythonExecutableScript ( PyCode code , Map < String , Object > vars ) { this . code = code ; this . pyVars = new PyStringMap ( ) ; if ( vars ! = null ) { for ( Map . Entry < String , Object > entry : vars . entrySet ( ) ) { pyVars . __setitem__ ( entry . getKey ( ) , Py . java2py ( entry . getValue ( ) ) ) ; } } } @Override public void setNextVar ( String name , Object value ) { pyVars . __setitem__ ( name , Py . java2py ( value ) ) ; } @Override public Object run ( ) { interp . setLocals ( pyVars ) ; PyObject ret = evalRestricted ( code ) ; if ( ret = = null ) { return null ; } return ret . __tojava__ ( Object . class ) ; } @Override public Object unwrap ( Object value ) { return unwrapValue ( value ) ; } } public class PythonSearchScript implements LeafSearchScript { private final PyCode code ; private final PyStringMap pyVars ; private final LeafSearchLookup lookup ; public PythonSearchScript ( PyCode code , Map < String , Object > vars , LeafSearchLookup lookup ) { this . code = code ; this . pyVars = new PyStringMap ( ) ; for ( Map . Entry < String , Object > entry : lookup . asMap ( ) . entrySet ( ) ) { pyVars . __setitem__ ( entry . getKey ( ) , Py . java2py ( entry . getValue ( ) ) ) ; } if ( vars ! = null ) { for ( Map . Entry < String , Object > entry : vars . entrySet ( ) ) { pyVars . __setitem__ ( entry . getKey ( ) , Py . java2py ( entry . getValue ( ) ) ) ; } } this . lookup = lookup ; } @Override public void setScorer ( Scorer scorer ) { pyVars . __setitem__ ( <str> , Py . java2py ( new ScoreAccessor ( scorer ) ) ) ; } @Override public void setDocument ( int doc ) { lookup . setDocument ( doc ) ; } @Override public void setSource ( Map < String , Object > source ) { lookup . source ( ) . setSource ( source ) ; } @Override public void setNextVar ( String name , Object value ) { pyVars . __setitem__ ( name , Py . java2py ( value ) ) ; } @Override public Object run ( ) { interp . setLocals ( pyVars ) ; PyObject ret = evalRestricted ( code ) ; if ( ret = = null ) { return null ; } return ret . __tojava__ ( Object . class ) ; } @Override public float runAsFloat ( ) { return ( ( Number ) run ( ) ) . floatValue ( ) ; } @Override public long runAsLong ( ) { return ( ( Number ) run ( ) ) . longValue ( ) ; } @Override public double runAsDouble ( ) { return ( ( Number ) run ( ) ) . doubleValue ( ) ; } @Override public Object unwrap ( Object value ) { return unwrapValue ( value ) ; } } private static final AccessControlContext PY_CONTEXT ; static { Permissions none = new Permissions ( ) ; none . setReadOnly ( ) ; PY_CONTEXT = new AccessControlContext ( new ProtectionDomain [ ] { new ProtectionDomain ( null , none ) } ) ; } private final PyObject evalRestricted ( final PyCode code ) { return AccessController . doPrivileged ( new PrivilegedAction < PyObject > ( ) { @Override public PyObject run ( ) { return interp . eval ( code ) ; } } , PY_CONTEXT ) ; } public static Object unwrapValue ( Object value ) { if ( value = = null ) { return null ; } else if ( value instanceof PyObject ) { return ( ( PyObject ) value ) . __tojava__ ( Object . class ) ; } return value ; } } 

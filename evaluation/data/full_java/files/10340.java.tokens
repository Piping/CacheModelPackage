package com . google . common . collect ; import java . util . Collections ; public class ForwardingMultimapTest extends ForwardingTestCase { Multimap < String , Boolean > forward ; @Override public void setUp ( ) throws Exception { super . setUp ( ) ; @SuppressWarnings ( <str> ) final Multimap < String , Boolean > multimap = createProxyInstance ( Multimap . class ) ; forward = new ForwardingMultimap < String , Boolean > ( ) { @Override protected Multimap < String , Boolean > delegate ( ) { return multimap ; } } ; } public void testSize ( ) { forward . size ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testIsEmpty ( ) { forward . isEmpty ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsKey_Object ( ) { forward . containsKey ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsValue_Object ( ) { forward . containsValue ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testContainsEntry_Object_Object ( ) { forward . containsEntry ( <str> , false ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPut_Key_Value ( ) { forward . put ( <str> , true ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemove_Key_Value ( ) { forward . remove ( <str> , false ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPutAll_Key_Iterable ( ) { forward . remove ( <str> , Collections . < Boolean > emptyList ( ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPutAll_Multimap ( ) { forward . putAll ( ArrayListMultimap . < String , Boolean > create ( ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testReplaceValues_Key_Iterable ( ) { forward . replaceValues ( <str> , Collections . < Boolean > emptyList ( ) ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testRemoveAll_Object ( ) { forward . removeAll ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testClear ( ) { forward . clear ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testGet_Key ( ) { forward . get ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testKeySet ( ) { forward . keySet ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testKeys ( ) { forward . keys ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testValues ( ) { forward . values ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testEntries ( ) { forward . entries ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testAsMap ( ) { forward . asMap ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testEquals ( ) { forward . equals ( null ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testHashCode ( ) { forward . hashCode ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testToString ( ) { forward . toString ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } } 

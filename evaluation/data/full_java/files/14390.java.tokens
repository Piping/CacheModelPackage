package org . gradle . model . internal . manage . schema . extract ; import org . objectweb . asm . ClassWriter ; import org . objectweb . asm . MethodVisitor ; import org . objectweb . asm . Opcodes ; import org . objectweb . asm . Type ; import java . lang . reflect . Constructor ; public class ManagedCollectionProxyClassGenerator extends AbstractProxyClassGenerator { public Class < ? > generate ( Class < ? > implClass , Class < ? > publicContractType ) { ClassWriter visitor = new ClassWriter ( ClassWriter . COMPUTE_MAXS | ClassWriter . COMPUTE_FRAMES ) ; String generatedTypeName = publicContractType . getName ( ) + <str> ; Type generatedType = Type . getType ( <str> + generatedTypeName . replaceAll ( <str> , <str> ) + <str> ) ; Type superclassType = Type . getType ( implClass ) ; Type publicType = Type . getType ( publicContractType ) ; generateClass ( visitor , generatedType , superclassType , publicType ) ; generateConstructors ( visitor , implClass , superclassType ) ; visitor . visitEnd ( ) ; return defineClass ( visitor , publicContractType . getClassLoader ( ) , generatedTypeName ) ; } private < T > void generateConstructors ( ClassWriter visitor , Class < ? extends T > implClass , Type superclassType ) { for ( Constructor < ? > constructor : implClass . getConstructors ( ) ) { Type [ ] paramTypes = new Type [ constructor . getParameterTypes ( ) . length ] ; for ( int i = <int> ; i < paramTypes . length ; i + + ) { paramTypes [ i ] = Type . getType ( constructor . getParameterTypes ( ) [ i ] ) ; } String methodDescriptor = Type . getMethodDescriptor ( Type . VOID_TYPE , paramTypes ) ; MethodVisitor constructorVisitor = visitor . visitMethod ( Opcodes . ACC_PUBLIC , CONSTRUCTOR_NAME , methodDescriptor , CONCRETE_SIGNATURE , NO_EXCEPTIONS ) ; constructorVisitor . visitCode ( ) ; putThisOnStack ( constructorVisitor ) ; for ( int i = <int> ; i < paramTypes . length ; i + + ) { constructorVisitor . visitVarInsn ( paramTypes [ i ] . getOpcode ( Opcodes . ILOAD ) , i + <int> ) ; } constructorVisitor . visitMethodInsn ( Opcodes . INVOKESPECIAL , superclassType . getInternalName ( ) , CONSTRUCTOR_NAME , methodDescriptor , false ) ; finishVisitingMethod ( constructorVisitor ) ; } } private void generateClass ( ClassWriter visitor , Type generatedType , Type superclassType , Type publicType ) { visitor . visit ( Opcodes . V1_6 , Opcodes . ACC_PUBLIC , generatedType . getInternalName ( ) , null , superclassType . getInternalName ( ) , new String [ ] { publicType . getInternalName ( ) } ) ; } } 

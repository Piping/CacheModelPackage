package com . badlogic . gdx . scenes . scene2d . utils ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Event ; import com . badlogic . gdx . scenes . scene2d . EventListener ; abstract public class FocusListener implements EventListener { public boolean handle ( Event event ) { if ( ! ( event instanceof FocusEvent ) ) return false ; FocusEvent focusEvent = ( FocusEvent ) event ; switch ( focusEvent . getType ( ) ) { case keyboard : keyboardFocusChanged ( focusEvent , event . getTarget ( ) , focusEvent . isFocused ( ) ) ; break ; case scroll : scrollFocusChanged ( focusEvent , event . getTarget ( ) , focusEvent . isFocused ( ) ) ; break ; } return false ; } public void keyboardFocusChanged ( FocusEvent event , Actor actor , boolean focused ) { } public void scrollFocusChanged ( FocusEvent event , Actor actor , boolean focused ) { } static public class FocusEvent extends Event { private boolean focused ; private Type type ; private Actor relatedActor ; public void reset ( ) { super . reset ( ) ; relatedActor = null ; } public boolean isFocused ( ) { return focused ; } public void setFocused ( boolean focused ) { this . focused = focused ; } public Type getType ( ) { return type ; } public void setType ( Type focusType ) { this . type = focusType ; } public Actor getRelatedActor ( ) { return relatedActor ; } public void setRelatedActor ( Actor relatedActor ) { this . relatedActor = relatedActor ; } static public enum Type { keyboard , scroll } } } 

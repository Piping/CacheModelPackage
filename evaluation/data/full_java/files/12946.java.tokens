package org . gradle . api . tasks . diagnostics ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . internal . ConventionTask ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . Optional ; import org . gradle . api . tasks . OutputFile ; import org . gradle . api . tasks . TaskAction ; import org . gradle . api . tasks . diagnostics . internal . ProjectReportGenerator ; import org . gradle . api . tasks . diagnostics . internal . ReportGenerator ; import org . gradle . api . tasks . diagnostics . internal . ReportRenderer ; import org . gradle . initialization . BuildClientMetaData ; import org . gradle . logging . StyledTextOutputFactory ; import javax . inject . Inject ; import java . io . File ; import java . io . IOException ; import java . util . HashSet ; import java . util . Set ; import java . util . TreeSet ; public abstract class AbstractReportTask extends ConventionTask { private File outputFile ; private Set < Project > projects ; protected AbstractReportTask ( ) { getOutputs ( ) . upToDateWhen ( new Spec < Task > ( ) { public boolean isSatisfiedBy ( Task element ) { return false ; } } ) ; projects = new HashSet < Project > ( ) ; projects . add ( getProject ( ) ) ; } @Inject protected BuildClientMetaData getClientMetaData ( ) { throw new UnsupportedOperationException ( ) ; } @Inject protected StyledTextOutputFactory getTextOutputFactory ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction public void generate ( ) { ProjectReportGenerator projectReportGenerator = new ProjectReportGenerator ( ) { @Override public void generateReport ( Project project ) throws IOException { generate ( project ) ; } } ; ReportGenerator reportGenerator = new ReportGenerator ( getRenderer ( ) , getClientMetaData ( ) , getOutputFile ( ) , getTextOutputFactory ( ) , projectReportGenerator ) ; reportGenerator . generateReport ( new TreeSet < Project > ( getProjects ( ) ) ) ; } protected abstract ReportRenderer getRenderer ( ) ; protected abstract void generate ( Project project ) throws IOException ; @OutputFile @Optional public File getOutputFile ( ) { return outputFile ; } public void setOutputFile ( File outputFile ) { this . outputFile = outputFile ; } public Set < Project > getProjects ( ) { return projects ; } public void setProjects ( Set < Project > projects ) { this . projects = projects ; } } 

package org . elasticsearch . index ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . action . index . IndexAction ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . routing . IndexShardRoutingTable ; import org . elasticsearch . cluster . routing . RoutingNodes ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . discovery . Discovery ; import org . elasticsearch . discovery . DiscoverySettings ; import org . elasticsearch . discovery . zen . fd . FaultDetection ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . transport . MockTransportService ; import org . elasticsearch . transport . TransportService ; import java . util . Collection ; import java . util . List ; import static java . util . Collections . singleton ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . RELOCATING ; import static org . elasticsearch . cluster . routing . ShardRoutingState . STARTED ; import static org . elasticsearch . cluster . routing . ShardRoutingState . UNASSIGNED ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.ClusterScope ( scope = ESIntegTestCase . Scope . TEST , numDataNodes = <int> , transportClientRatio = <int> ) @ESIntegTestCase.SuppressLocalMode public class TransportIndexFailuresIT extends ESIntegTestCase { private static final Settings nodeSettings = Settings . settingsBuilder ( ) . put ( <str> , <str> ) . put ( FaultDetection . SETTING_PING_TIMEOUT , <str> ) . put ( FaultDetection . SETTING_PING_RETRIES , <str> ) . put ( DiscoverySettings . PUBLISH_TIMEOUT , <str> ) . put ( <str> , <int> ) . build ( ) ; @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( MockTransportService . TestPlugin . class ) ; } @Override protected int numberOfShards ( ) { return <int> ; } @Override protected int numberOfReplicas ( ) { return <int> ; } public void testNetworkPartitionDuringReplicaIndexOp ( ) throws Exception { final String INDEX = <str> ; List < String > nodes = internalCluster ( ) . startNodesAsync ( <int> , nodeSettings ) . get ( ) ; createIndex ( INDEX ) ; ensureGreen ( INDEX ) ; Settings s = Settings . builder ( ) . put ( <str> , <str> ) . build ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareUpdateSettings ( ) . setTransientSettings ( s ) . get ( ) ; ClusterState state = getNodeClusterState ( nodes . get ( <int> ) ) ; IndexShardRoutingTable shard = state . getRoutingTable ( ) . index ( INDEX ) . shard ( <int> ) ; String primaryNode ; String replicaNode ; if ( shard . getShards ( ) . get ( <int> ) . primary ( ) ) { primaryNode = nodes . get ( <int> ) ; replicaNode = nodes . get ( <int> ) ; } else { primaryNode = nodes . get ( <int> ) ; replicaNode = nodes . get ( <int> ) ; } logger . info ( <str> , primaryNode ) ; IndexResponse resp = internalCluster ( ) . client ( primaryNode ) . prepareIndex ( INDEX , <str> ) . setSource ( <str> , <str> ) . get ( ) ; assertThat ( <str> , internalCluster ( ) . client ( primaryNode ) . prepareGet ( INDEX , <str> , resp . getId ( ) ) . setPreference ( <str> ) . get ( ) . isExists ( ) , equalTo ( true ) ) ; assertThat ( <str> , internalCluster ( ) . client ( replicaNode ) . prepareGet ( INDEX , <str> , resp . getId ( ) ) . setPreference ( <str> ) . get ( ) . isExists ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; TransportService mockTransportService = internalCluster ( ) . getInstance ( TransportService . class , primaryNode ) ; ( ( MockTransportService ) mockTransportService ) . addFailToSendNoConnectRule ( internalCluster ( ) . getInstance ( TransportService . class , replicaNode ) , singleton ( IndexAction . NAME + <str> ) ) ; mockTransportService = internalCluster ( ) . getInstance ( TransportService . class , replicaNode ) ; ( ( MockTransportService ) mockTransportService ) . addFailToSendNoConnectRule ( internalCluster ( ) . getInstance ( TransportService . class , primaryNode ) , singleton ( IndexAction . NAME + <str> ) ) ; logger . info ( <str> ) ; resp = internalCluster ( ) . client ( primaryNode ) . prepareIndex ( INDEX , <str> ) . setSource ( <str> , <str> ) . get ( ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { assertThat ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . get ( ) . getStatus ( ) , equalTo ( ClusterHealthStatus . YELLOW ) ) ; } } ) ; assertThat ( <str> , client ( ) . prepareGet ( INDEX , <str> , resp . getId ( ) ) . get ( ) . isExists ( ) , equalTo ( true ) ) ; state = getNodeClusterState ( randomFrom ( nodes . toArray ( Strings . EMPTY_ARRAY ) ) ) ; RoutingNodes rn = state . getRoutingNodes ( ) ; logger . info ( <str> , rn . shards ( input - > true ) . size ( ) , rn . shardsWithState ( UNASSIGNED ) . size ( ) , rn . shardsWithState ( INITIALIZING ) . size ( ) , rn . shardsWithState ( RELOCATING ) . size ( ) , rn . shardsWithState ( STARTED ) . size ( ) ) ; logger . info ( <str> , rn . shardsWithState ( UNASSIGNED ) , rn . shardsWithState ( INITIALIZING ) , rn . shardsWithState ( RELOCATING ) , rn . shardsWithState ( STARTED ) ) ; assertThat ( <str> , rn . shardsWithState ( STARTED ) . size ( ) , equalTo ( <int> ) ) ; } private ClusterState getNodeClusterState ( String node ) { return internalCluster ( ) . client ( node ) . admin ( ) . cluster ( ) . prepareState ( ) . setLocal ( true ) . get ( ) . getState ( ) ; } } 

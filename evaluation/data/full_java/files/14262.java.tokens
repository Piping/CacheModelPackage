package org . gradle . model . internal . asm ; import org . objectweb . asm . Type ; import java . lang . reflect . * ; public class AsmClassGeneratorUtils { public static String signature ( Constructor < ? > constructor ) { StringBuilder builder = new StringBuilder ( ) ; visitFormalTypeParameters ( builder , constructor . getTypeParameters ( ) ) ; visitParameters ( builder , constructor . getGenericParameterTypes ( ) ) ; builder . append ( <str> ) ; visitExceptions ( builder , constructor . getGenericExceptionTypes ( ) ) ; return builder . toString ( ) ; } public static String signature ( Method method ) { StringBuilder builder = new StringBuilder ( ) ; visitFormalTypeParameters ( builder , method . getTypeParameters ( ) ) ; visitParameters ( builder , method . getGenericParameterTypes ( ) ) ; visitType ( method . getGenericReturnType ( ) , builder ) ; visitExceptions ( builder , method . getGenericExceptionTypes ( ) ) ; return builder . toString ( ) ; } private static void visitExceptions ( StringBuilder builder , java . lang . reflect . Type [ ] exceptionTypes ) { for ( java . lang . reflect . Type exceptionType : exceptionTypes ) { builder . append ( <str> ) ; visitType ( exceptionType , builder ) ; } } private static void visitParameters ( StringBuilder builder , java . lang . reflect . Type [ ] parameterTypes ) { builder . append ( <str> ) ; for ( java . lang . reflect . Type paramType : parameterTypes ) { visitType ( paramType , builder ) ; } builder . append ( <str> ) ; } private static void visitFormalTypeParameters ( StringBuilder builder , TypeVariable < ? > [ ] typeParameters ) { if ( typeParameters . length > <int> ) { builder . append ( <str> ) ; for ( TypeVariable < ? > typeVariable : typeParameters ) { builder . append ( typeVariable . getName ( ) ) ; for ( java . lang . reflect . Type bound : typeVariable . getBounds ( ) ) { builder . append ( <str> ) ; visitType ( bound , builder ) ; } } builder . append ( <str> ) ; } } private static void visitType ( java . lang . reflect . Type type , StringBuilder builder ) { if ( type instanceof Class ) { Class < ? > cl = ( Class < ? > ) type ; if ( cl . isPrimitive ( ) ) { builder . append ( Type . getType ( cl ) . getDescriptor ( ) ) ; } else { if ( cl . isArray ( ) ) { builder . append ( cl . getName ( ) . replace ( <str> , <str> ) ) ; } else { builder . append ( <str> ) ; builder . append ( cl . getName ( ) . replace ( <str> , <str> ) ) ; builder . append ( <str> ) ; } } } else if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; visitNested ( parameterizedType . getRawType ( ) , builder ) ; builder . append ( <str> ) ; for ( java . lang . reflect . Type param : parameterizedType . getActualTypeArguments ( ) ) { visitType ( param , builder ) ; } builder . append ( <str> ) ; } else if ( type instanceof WildcardType ) { WildcardType wildcardType = ( WildcardType ) type ; if ( wildcardType . getUpperBounds ( ) . length = = <int> & & wildcardType . getUpperBounds ( ) [ <int> ] . equals ( Object . class ) ) { if ( wildcardType . getLowerBounds ( ) . length = = <int> ) { builder . append ( <str> ) ; return ; } } else { for ( java . lang . reflect . Type upperType : wildcardType . getUpperBounds ( ) ) { builder . append ( <str> ) ; visitType ( upperType , builder ) ; } } for ( java . lang . reflect . Type lowerType : wildcardType . getLowerBounds ( ) ) { builder . append ( <str> ) ; visitType ( lowerType , builder ) ; } } else if ( type instanceof TypeVariable ) { TypeVariable < ? > typeVar = ( TypeVariable ) type ; builder . append ( <str> ) ; builder . append ( typeVar . getName ( ) ) ; builder . append ( <str> ) ; } else if ( type instanceof GenericArrayType ) { GenericArrayType arrayType = ( GenericArrayType ) type ; builder . append ( <str> ) ; visitType ( arrayType . getGenericComponentType ( ) , builder ) ; } else { throw new IllegalArgumentException ( String . format ( <str> , type ) ) ; } } private static void visitNested ( java . lang . reflect . Type type , StringBuilder builder ) { if ( type instanceof Class ) { Class < ? > cl = ( Class < ? > ) type ; if ( cl . isPrimitive ( ) ) { builder . append ( Type . getType ( cl ) . getDescriptor ( ) ) ; } else { builder . append ( <str> ) ; builder . append ( cl . getName ( ) . replace ( <str> , <str> ) ) ; } } else { visitType ( type , builder ) ; } } } 

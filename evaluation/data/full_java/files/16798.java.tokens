package com . badlogic . gdx . backends . lwjgl . audio ; import java . nio . ByteBuffer ; import java . nio . ByteOrder ; import com . badlogic . gdx . audio . Sound ; import static org . lwjgl . openal . AL10 . * ; public class OpenALSound implements Sound { private int bufferID = - <int> ; private final OpenALAudio audio ; private float duration ; public OpenALSound ( OpenALAudio audio ) { this . audio = audio ; } void setup ( byte [ ] pcm , int channels , int sampleRate ) { int bytes = pcm . length - ( pcm . length % ( channels > <int> ? <int> : <int> ) ) ; int samples = bytes / ( <int> * channels ) ; duration = samples / ( float ) sampleRate ; ByteBuffer buffer = ByteBuffer . allocateDirect ( bytes ) ; buffer . order ( ByteOrder . nativeOrder ( ) ) ; buffer . put ( pcm , <int> , bytes ) ; buffer . flip ( ) ; if ( bufferID = = - <int> ) { bufferID = alGenBuffers ( ) ; alBufferData ( bufferID , channels > <int> ? AL_FORMAT_STEREO16 : AL_FORMAT_MONO16 , buffer . asShortBuffer ( ) , sampleRate ) ; } } public long play ( ) { return play ( <int> ) ; } public long play ( float volume ) { if ( audio . noDevice ) return <int> ; int sourceID = audio . obtainSource ( false ) ; if ( sourceID = = - <int> ) { audio . retain ( this , true ) ; sourceID = audio . obtainSource ( false ) ; } else audio . retain ( this , false ) ; if ( sourceID = = - <int> ) return - <int> ; long soundId = audio . getSoundId ( sourceID ) ; alSourcei ( sourceID , AL_BUFFER , bufferID ) ; alSourcei ( sourceID , AL_LOOPING , AL_FALSE ) ; alSourcef ( sourceID , AL_GAIN , volume ) ; alSourcePlay ( sourceID ) ; return soundId ; } public long loop ( ) { return loop ( <int> ) ; } @Override public long loop ( float volume ) { if ( audio . noDevice ) return <int> ; int sourceID = audio . obtainSource ( false ) ; if ( sourceID = = - <int> ) return - <int> ; long soundId = audio . getSoundId ( sourceID ) ; alSourcei ( sourceID , AL_BUFFER , bufferID ) ; alSourcei ( sourceID , AL_LOOPING , AL_TRUE ) ; alSourcef ( sourceID , AL_GAIN , volume ) ; alSourcePlay ( sourceID ) ; return soundId ; } public void stop ( ) { if ( audio . noDevice ) return ; audio . stopSourcesWithBuffer ( bufferID ) ; } public void dispose ( ) { if ( audio . noDevice ) return ; if ( bufferID = = - <int> ) return ; audio . freeBuffer ( bufferID ) ; alDeleteBuffers ( bufferID ) ; bufferID = - <int> ; audio . forget ( this ) ; } @Override public void stop ( long soundId ) { if ( audio . noDevice ) return ; audio . stopSound ( soundId ) ; } @Override public void pause ( ) { if ( audio . noDevice ) return ; audio . pauseSourcesWithBuffer ( bufferID ) ; } @Override public void pause ( long soundId ) { if ( audio . noDevice ) return ; audio . pauseSound ( soundId ) ; } @Override public void resume ( ) { if ( audio . noDevice ) return ; audio . resumeSourcesWithBuffer ( bufferID ) ; } @Override public void resume ( long soundId ) { if ( audio . noDevice ) return ; audio . resumeSound ( soundId ) ; } @Override public void setPitch ( long soundId , float pitch ) { if ( audio . noDevice ) return ; audio . setSoundPitch ( soundId , pitch ) ; } @Override public void setVolume ( long soundId , float volume ) { if ( audio . noDevice ) return ; audio . setSoundGain ( soundId , volume ) ; } @Override public void setLooping ( long soundId , boolean looping ) { if ( audio . noDevice ) return ; audio . setSoundLooping ( soundId , looping ) ; } @Override public void setPan ( long soundId , float pan , float volume ) { if ( audio . noDevice ) return ; audio . setSoundPan ( soundId , pan , volume ) ; } @Override public long play ( float volume , float pitch , float pan ) { long id = play ( ) ; setPitch ( id , pitch ) ; setPan ( id , pan , volume ) ; return id ; } @Override public long loop ( float volume , float pitch , float pan ) { long id = loop ( ) ; setPitch ( id , pitch ) ; setPan ( id , pan , volume ) ; return id ; } public float duration ( ) { return duration ; } @Override public void setPriority ( long soundId , int priority ) { } } 

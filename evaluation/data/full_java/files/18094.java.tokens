package com . badlogic . gdx . graphics . g3d . utils ; import java . util . Comparator ; import com . badlogic . gdx . graphics . Camera ; import com . badlogic . gdx . graphics . g3d . Renderable ; import com . badlogic . gdx . graphics . g3d . attributes . BlendingAttribute ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . utils . Array ; public class DefaultRenderableSorter implements RenderableSorter , Comparator < Renderable > { private Camera camera ; private final Vector3 tmpV1 = new Vector3 ( ) ; private final Vector3 tmpV2 = new Vector3 ( ) ; @Override public void sort ( final Camera camera , final Array < Renderable > renderables ) { this . camera = camera ; renderables . sort ( this ) ; } @Override public int compare ( final Renderable o1 , final Renderable o2 ) { final boolean b1 = o1 . material . has ( BlendingAttribute . Type ) & & ( ( BlendingAttribute ) o1 . material . get ( BlendingAttribute . Type ) ) . blended ; final boolean b2 = o2 . material . has ( BlendingAttribute . Type ) & & ( ( BlendingAttribute ) o2 . material . get ( BlendingAttribute . Type ) ) . blended ; if ( b1 ! = b2 ) return b1 ? <int> : - <int> ; o1 . worldTransform . getTranslation ( tmpV1 ) ; o2 . worldTransform . getTranslation ( tmpV2 ) ; final float dst = ( int ) ( <int> f * camera . position . dst2 ( tmpV1 ) ) - ( int ) ( <int> f * camera . position . dst2 ( tmpV2 ) ) ; final int result = dst < <int> ? - <int> : ( dst > <int> ? <int> : <int> ) ; return b1 ? - result : result ; } } 

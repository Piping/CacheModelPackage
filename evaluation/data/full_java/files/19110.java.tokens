package io . netty . handler . codec . http ; import static io . netty . handler . codec . http . HttpConstants . SP ; import io . netty . buffer . ByteBuf ; import io . netty . util . AsciiString ; import io . netty . util . ByteProcessor ; import io . netty . util . CharsetUtil ; public class HttpResponseStatus implements Comparable < HttpResponseStatus > { public static final HttpResponseStatus CONTINUE = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus SWITCHING_PROTOCOLS = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus PROCESSING = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus OK = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus CREATED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus ACCEPTED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus NON_AUTHORITATIVE_INFORMATION = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus NO_CONTENT = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus RESET_CONTENT = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus PARTIAL_CONTENT = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus MULTI_STATUS = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus MULTIPLE_CHOICES = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus MOVED_PERMANENTLY = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus FOUND = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus SEE_OTHER = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus NOT_MODIFIED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus USE_PROXY = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus TEMPORARY_REDIRECT = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus BAD_REQUEST = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus UNAUTHORIZED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus PAYMENT_REQUIRED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus FORBIDDEN = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus NOT_FOUND = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus METHOD_NOT_ALLOWED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus NOT_ACCEPTABLE = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus PROXY_AUTHENTICATION_REQUIRED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus REQUEST_TIMEOUT = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus CONFLICT = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus GONE = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus LENGTH_REQUIRED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus PRECONDITION_FAILED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus REQUEST_ENTITY_TOO_LARGE = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus REQUEST_URI_TOO_LONG = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus UNSUPPORTED_MEDIA_TYPE = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus REQUESTED_RANGE_NOT_SATISFIABLE = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus EXPECTATION_FAILED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus MISDIRECTED_REQUEST = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus UNPROCESSABLE_ENTITY = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus LOCKED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus FAILED_DEPENDENCY = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus UNORDERED_COLLECTION = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus UPGRADE_REQUIRED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus PRECONDITION_REQUIRED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus TOO_MANY_REQUESTS = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus REQUEST_HEADER_FIELDS_TOO_LARGE = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus INTERNAL_SERVER_ERROR = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus NOT_IMPLEMENTED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus BAD_GATEWAY = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus SERVICE_UNAVAILABLE = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus GATEWAY_TIMEOUT = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus HTTP_VERSION_NOT_SUPPORTED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus VARIANT_ALSO_NEGOTIATES = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus INSUFFICIENT_STORAGE = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus NOT_EXTENDED = newStatus ( <int> , <str> ) ; public static final HttpResponseStatus NETWORK_AUTHENTICATION_REQUIRED = newStatus ( <int> , <str> ) ; private static HttpResponseStatus newStatus ( int statusCode , String reasonPhrase ) { return new HttpResponseStatus ( statusCode , reasonPhrase , true ) ; } public static HttpResponseStatus valueOf ( int code ) { switch ( code ) { case <int> : return CONTINUE ; case <int> : return SWITCHING_PROTOCOLS ; case <int> : return PROCESSING ; case <int> : return OK ; case <int> : return CREATED ; case <int> : return ACCEPTED ; case <int> : return NON_AUTHORITATIVE_INFORMATION ; case <int> : return NO_CONTENT ; case <int> : return RESET_CONTENT ; case <int> : return PARTIAL_CONTENT ; case <int> : return MULTI_STATUS ; case <int> : return MULTIPLE_CHOICES ; case <int> : return MOVED_PERMANENTLY ; case <int> : return FOUND ; case <int> : return SEE_OTHER ; case <int> : return NOT_MODIFIED ; case <int> : return USE_PROXY ; case <int> : return TEMPORARY_REDIRECT ; case <int> : return BAD_REQUEST ; case <int> : return UNAUTHORIZED ; case <int> : return PAYMENT_REQUIRED ; case <int> : return FORBIDDEN ; case <int> : return NOT_FOUND ; case <int> : return METHOD_NOT_ALLOWED ; case <int> : return NOT_ACCEPTABLE ; case <int> : return PROXY_AUTHENTICATION_REQUIRED ; case <int> : return REQUEST_TIMEOUT ; case <int> : return CONFLICT ; case <int> : return GONE ; case <int> : return LENGTH_REQUIRED ; case <int> : return PRECONDITION_FAILED ; case <int> : return REQUEST_ENTITY_TOO_LARGE ; case <int> : return REQUEST_URI_TOO_LONG ; case <int> : return UNSUPPORTED_MEDIA_TYPE ; case <int> : return REQUESTED_RANGE_NOT_SATISFIABLE ; case <int> : return EXPECTATION_FAILED ; case <int> : return MISDIRECTED_REQUEST ; case <int> : return UNPROCESSABLE_ENTITY ; case <int> : return LOCKED ; case <int> : return FAILED_DEPENDENCY ; case <int> : return UNORDERED_COLLECTION ; case <int> : return UPGRADE_REQUIRED ; case <int> : return PRECONDITION_REQUIRED ; case <int> : return TOO_MANY_REQUESTS ; case <int> : return REQUEST_HEADER_FIELDS_TOO_LARGE ; case <int> : return INTERNAL_SERVER_ERROR ; case <int> : return NOT_IMPLEMENTED ; case <int> : return BAD_GATEWAY ; case <int> : return SERVICE_UNAVAILABLE ; case <int> : return GATEWAY_TIMEOUT ; case <int> : return HTTP_VERSION_NOT_SUPPORTED ; case <int> : return VARIANT_ALSO_NEGOTIATES ; case <int> : return INSUFFICIENT_STORAGE ; case <int> : return NOT_EXTENDED ; case <int> : return NETWORK_AUTHENTICATION_REQUIRED ; } return new HttpResponseStatus ( code ) ; } public static HttpResponseStatus parseLine ( CharSequence line ) { String status = line . toString ( ) ; try { int space = status . indexOf ( <str> ) ; if ( space = = - <int> ) { return valueOf ( Integer . parseInt ( status ) ) ; } else { int code = Integer . parseInt ( status . substring ( <int> , space ) ) ; String reasonPhrase = status . substring ( space + <int> ) ; HttpResponseStatus responseStatus = valueOf ( code ) ; if ( responseStatus . reasonPhrase ( ) . contentEquals ( reasonPhrase ) ) { return responseStatus ; } else { return new HttpResponseStatus ( code , reasonPhrase ) ; } } } catch ( Exception e ) { throw new IllegalArgumentException ( <str> + status , e ) ; } } private static final class HttpStatusLineProcessor implements ByteProcessor { private static final byte ASCII_SPACE = ( byte ) <str> ; private final AsciiString string ; private int i ; private int state ; private HttpResponseStatus status ; public HttpStatusLineProcessor ( AsciiString string ) { this . string = string ; } @Override public boolean process ( byte value ) { switch ( state ) { case <int> : if ( value = = ASCII_SPACE ) { state = <int> ; } break ; case <int> : parseStatus ( i ) ; state = <int> ; return false ; default : break ; } + + i ; return true ; } private void parseStatus ( int codeEnd ) { int code = string . parseInt ( <int> , codeEnd ) ; status = valueOf ( code ) ; if ( codeEnd < string . length ( ) ) { String actualReason = string . toString ( codeEnd + <int> , string . length ( ) ) ; if ( ! status . reasonPhrase ( ) . contentEquals ( actualReason ) ) { status = new HttpResponseStatus ( code , actualReason ) ; } } } public HttpResponseStatus status ( ) { if ( state < = <int> ) { parseStatus ( string . length ( ) ) ; state = <int> ; } return status ; } } public static HttpResponseStatus parseLine ( AsciiString line ) { try { HttpStatusLineProcessor processor = new HttpStatusLineProcessor ( line ) ; line . forEachByte ( processor ) ; HttpResponseStatus status = processor . status ( ) ; if ( status = = null ) { throw new IllegalArgumentException ( <str> ) ; } return status ; } catch ( Exception e ) { throw new IllegalArgumentException ( <str> + line , e ) ; } } private final int code ; private final AsciiString codeAsText ; private HttpStatusClass codeClass ; private final String reasonPhrase ; private final byte [ ] bytes ; private HttpResponseStatus ( int code ) { this ( code , HttpStatusClass . valueOf ( code ) . defaultReasonPhrase ( ) + <str> + code + <str> , false ) ; } public HttpResponseStatus ( int code , String reasonPhrase ) { this ( code , reasonPhrase , false ) ; } private HttpResponseStatus ( int code , String reasonPhrase , boolean bytes ) { if ( code < <int> ) { throw new IllegalArgumentException ( <str> + code + <str> ) ; } if ( reasonPhrase = = null ) { throw new NullPointerException ( <str> ) ; } for ( int i = <int> ; i < reasonPhrase . length ( ) ; i + + ) { char c = reasonPhrase . charAt ( i ) ; switch ( c ) { case <str> : case <str> : throw new IllegalArgumentException ( <str> + <str> + reasonPhrase ) ; } } this . code = code ; codeAsText = new AsciiString ( Integer . toString ( code ) ) ; this . reasonPhrase = reasonPhrase ; if ( bytes ) { this . bytes = ( code + <str> + reasonPhrase ) . getBytes ( CharsetUtil . US_ASCII ) ; } else { this . bytes = null ; } } public int code ( ) { return code ; } public AsciiString codeAsText ( ) { return codeAsText ; } public String reasonPhrase ( ) { return reasonPhrase ; } public HttpStatusClass codeClass ( ) { HttpStatusClass type = this . codeClass ; if ( type = = null ) { this . codeClass = type = HttpStatusClass . valueOf ( code ) ; } return type ; } @Override public int hashCode ( ) { return code ( ) ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof HttpResponseStatus ) ) { return false ; } return code ( ) = = ( ( HttpResponseStatus ) o ) . code ( ) ; } @Override public int compareTo ( HttpResponseStatus o ) { return code ( ) - o . code ( ) ; } @Override public String toString ( ) { return new StringBuilder ( reasonPhrase . length ( ) + <int> ) . append ( code ) . append ( <str> ) . append ( reasonPhrase ) . toString ( ) ; } void encode ( ByteBuf buf ) { if ( bytes = = null ) { HttpUtil . encodeAscii0 ( String . valueOf ( code ( ) ) , buf ) ; buf . writeByte ( SP ) ; HttpUtil . encodeAscii0 ( String . valueOf ( reasonPhrase ( ) ) , buf ) ; } else { buf . writeBytes ( bytes ) ; } } } 

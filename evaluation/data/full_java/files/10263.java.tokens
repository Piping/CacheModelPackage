package com . google . common . base ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableMap ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Map ; @GwtCompatible public class ToStringHelperTest extends TestCase { @GwtIncompatible ( <str> ) public void testConstructor_instance ( ) { String toTest = Objects . toStringHelper ( this ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } public void testConstructorLenient_instance ( ) { String toTest = Objects . toStringHelper ( this ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testConstructor_innerClass ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } public void testConstructorLenient_innerClass ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testConstructor_anonymousClass ( ) { String toTest = Objects . toStringHelper ( new Object ( ) { } ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } public void testConstructorLenient_anonymousClass ( ) { String toTest = Objects . toStringHelper ( new Object ( ) { } ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testConstructor_classObject ( ) { String toTest = Objects . toStringHelper ( TestClass . class ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } public void testConstructorLenient_classObject ( ) { String toTest = Objects . toStringHelper ( TestClass . class ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } public void testConstructor_stringObject ( ) { String toTest = Objects . toStringHelper ( <str> ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToStringHelper_localInnerClass ( ) { class LocalInnerClass { } String toTest = Objects . toStringHelper ( new LocalInnerClass ( ) ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } public void testToStringHelperLenient_localInnerClass ( ) { class LocalInnerClass { } String toTest = Objects . toStringHelper ( new LocalInnerClass ( ) ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testToStringHelper_localInnerNestedClass ( ) { class LocalInnerClass { class LocalInnerNestedClass { } } String toTest = Objects . toStringHelper ( new LocalInnerClass ( ) . new LocalInnerNestedClass ( ) ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } public void testToStringHelperLenient_localInnerNestedClass ( ) { class LocalInnerClass { class LocalInnerNestedClass { } } String toTest = Objects . toStringHelper ( new LocalInnerClass ( ) . new LocalInnerNestedClass ( ) ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testToStringHelper_moreThanNineAnonymousClasses ( ) { Object o1 = new Object ( ) { } ; Object o2 = new Object ( ) { } ; Object o3 = new Object ( ) { } ; Object o4 = new Object ( ) { } ; Object o5 = new Object ( ) { } ; Object o6 = new Object ( ) { } ; Object o7 = new Object ( ) { } ; Object o8 = new Object ( ) { } ; Object o9 = new Object ( ) { } ; Object o10 = new Object ( ) { } ; String toTest = Objects . toStringHelper ( o10 ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } public void testToStringHelperLenient_moreThanNineAnonymousClasses ( ) { Object o1 = new Object ( ) { } ; Object o2 = new Object ( ) { } ; Object o3 = new Object ( ) { } ; Object o4 = new Object ( ) { } ; Object o5 = new Object ( ) { } ; Object o6 = new Object ( ) { } ; Object o7 = new Object ( ) { } ; Object o8 = new Object ( ) { } ; Object o9 = new Object ( ) { } ; Object o10 = new Object ( ) { } ; String toTest = Objects . toStringHelper ( o10 ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testToString_oneField ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , <str> ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToString_oneIntegerField ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , new Integer ( <int> ) ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToString_nullInteger ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , ( Integer ) null ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } public void testToStringLenient_oneField ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , <str> ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } public void testToStringLenient_oneIntegerField ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , new Integer ( <int> ) ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } public void testToStringLenient_nullInteger ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , ( Integer ) null ) . toString ( ) ; assertTrue ( toTest , toTest . matches ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testToString_complexFields ( ) { Map < String , Integer > map = ImmutableMap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , <str> ) . add ( <str> , Arrays . asList ( <str> , <str> , <str> ) ) . add ( <str> , map ) . toString ( ) ; final String expected = <str> + <str> ; assertEquals ( expected , toTest ) ; } public void testToStringLenient_complexFields ( ) { Map < String , Integer > map = ImmutableMap . < String , Integer > builder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ; String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , <str> ) . add ( <str> , Arrays . asList ( <str> , <str> , <str> ) ) . add ( <str> , map ) . toString ( ) ; final String expectedRegex = <str> + <str> + <str> + <str> ; assertTrue ( toTest , toTest . matches ( expectedRegex ) ) ; } public void testToString_addWithNullName ( ) { Objects . ToStringHelper helper = Objects . toStringHelper ( new TestClass ( ) ) ; try { helper . add ( null , <str> ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } @GwtIncompatible ( <str> ) public void testToString_addWithNullValue ( ) { final String result = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , null ) . toString ( ) ; assertEquals ( <str> , result ) ; } public void testToStringLenient_addWithNullValue ( ) { final String result = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , null ) . toString ( ) ; assertTrue ( result , result . matches ( <str> ) ) ; } @GwtIncompatible ( <str> ) public void testToString_ToStringTwice ( ) { Objects . ToStringHelper helper = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , <int> ) . addValue ( <str> ) . add ( <str> , <str> ) ; final String expected = <str> ; assertEquals ( expected , helper . toString ( ) ) ; assertEquals ( expected , helper . toString ( ) ) ; final String expected2 = <str> ; helper . addValue ( <int> ) ; assertEquals ( expected2 , helper . toString ( ) ) ; } @GwtIncompatible ( <str> ) public void testToString_addValue ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , <int> ) . addValue ( <str> ) . add ( <str> , <str> ) . addValue ( <int> ) . toString ( ) ; final String expected = <str> ; assertEquals ( expected , toTest ) ; } public void testToStringLenient_addValue ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , <int> ) . addValue ( <str> ) . add ( <str> , <str> ) . addValue ( <int> ) . toString ( ) ; final String expected = <str> ; assertTrue ( toTest , toTest . matches ( expected ) ) ; } @GwtIncompatible ( <str> ) public void testToString_addValueWithNullValue ( ) { final String result = Objects . toStringHelper ( new TestClass ( ) ) . addValue ( null ) . addValue ( <str> ) . addValue ( null ) . toString ( ) ; final String expected = <str> ; assertEquals ( expected , result ) ; } public void testToStringLenient_addValueWithNullValue ( ) { final String result = Objects . toStringHelper ( new TestClass ( ) ) . addValue ( null ) . addValue ( <str> ) . addValue ( null ) . toString ( ) ; final String expected = <str> ; assertTrue ( result , result . matches ( expected ) ) ; } @GwtIncompatible ( <str> ) public void testToStringOmitNullValues_oneField ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . omitNullValues ( ) . add ( <str> , null ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToStringOmitNullValues_manyFieldsFirstNull ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . omitNullValues ( ) . add ( <str> , null ) . add ( <str> , <str> ) . add ( <str> , <str> ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToStringOmitNullValues_manyFieldsOmitAfterNull ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , null ) . add ( <str> , <str> ) . add ( <str> , <str> ) . omitNullValues ( ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToStringOmitNullValues_manyFieldsLastNull ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . omitNullValues ( ) . add ( <str> , <str> ) . add ( <str> , <str> ) . add ( <str> , null ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToStringOmitNullValues_oneValue ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . omitNullValues ( ) . addValue ( null ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToStringOmitNullValues_manyValuesFirstNull ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . omitNullValues ( ) . addValue ( null ) . addValue ( <str> ) . addValue ( <str> ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToStringOmitNullValues_manyValuesLastNull ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . omitNullValues ( ) . addValue ( <str> ) . addValue ( <str> ) . addValue ( null ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } @GwtIncompatible ( <str> ) public void testToStringOmitNullValues_differentOrder ( ) { String expected = <str> ; String toTest1 = Objects . toStringHelper ( new TestClass ( ) ) . omitNullValues ( ) . add ( <str> , <str> ) . add ( <str> , <str> ) . add ( <str> , <str> ) . toString ( ) ; String toTest2 = Objects . toStringHelper ( new TestClass ( ) ) . add ( <str> , <str> ) . add ( <str> , <str> ) . omitNullValues ( ) . add ( <str> , <str> ) . toString ( ) ; assertEquals ( expected , toTest1 ) ; assertEquals ( expected , toTest2 ) ; } @GwtIncompatible ( <str> ) public void testToStringOmitNullValues_canBeCalledManyTimes ( ) { String toTest = Objects . toStringHelper ( new TestClass ( ) ) . omitNullValues ( ) . omitNullValues ( ) . add ( <str> , <str> ) . omitNullValues ( ) . add ( <str> , <str> ) . omitNullValues ( ) . add ( <str> , <str> ) . toString ( ) ; assertEquals ( <str> , toTest ) ; } private static class TestClass { } } 

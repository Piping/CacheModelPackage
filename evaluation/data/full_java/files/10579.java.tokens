package com . google . common . net ; import static com . google . common . escape . testing . EscaperAsserts . assertEscaping ; import static com . google . common . escape . testing . EscaperAsserts . assertUnescaped ; import static com . google . common . escape . testing . EscaperAsserts . assertUnicodeEscaping ; import static com . google . common . truth . Truth . assertThat ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Preconditions ; import com . google . common . escape . UnicodeEscaper ; import junit . framework . TestCase ; @GwtCompatible public class PercentEscaperTest extends TestCase { public void testSimpleEscaper ( ) { UnicodeEscaper e = new PercentEscaper ( <str> , false ) ; for ( char c = <int> ; c < <int> ; c + + ) { if ( ( c > = <str> & & c < = <str> ) | | ( c > = <str> & & c < = <str> ) | | ( c > = <str> & & c < = <str> ) ) { assertUnescaped ( e , c ) ; } else { assertEscaping ( e , escapeAscii ( c ) , c ) ; } } assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertUnicodeEscaping ( e , <str> , <str> , <str> ) ; assertUnicodeEscaping ( e , <str> , <str> , <str> ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; } public void testPlusForSpace ( ) { UnicodeEscaper basicEscaper = new PercentEscaper ( <str> , false ) ; UnicodeEscaper plusForSpaceEscaper = new PercentEscaper ( <str> , true ) ; UnicodeEscaper spaceEscaper = new PercentEscaper ( <str> , false ) ; assertEquals ( <str> , basicEscaper . escape ( <str> ) ) ; assertEquals ( <str> , plusForSpaceEscaper . escape ( <str> ) ) ; assertEquals ( <str> , spaceEscaper . escape ( <str> ) ) ; } public void testCustomEscaper ( ) { UnicodeEscaper e = new PercentEscaper ( <str> , false ) ; for ( char c = <int> ; c < <int> ; c + + ) { if ( ( c > = <str> & & c < = <str> ) | | ( c > = <str> & & c < = <str> ) | | ( c > = <str> & & c < = <str> ) | | <str> . indexOf ( c ) > = <int> ) { assertUnescaped ( e , c ) ; } else { assertEscaping ( e , escapeAscii ( c ) , c ) ; } } } public void testCustomEscaper_withpercent ( ) { UnicodeEscaper e = new PercentEscaper ( <str> , false ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; } public void testBadArguments_null ( ) { try { new PercentEscaper ( null , false ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } } public void testBadArguments_badchars ( ) { String msg = <str> + <str> ; try { new PercentEscaper ( <str> , false ) ; fail ( msg ) ; } catch ( IllegalArgumentException expected ) { assertThat ( expected ) . hasMessage ( msg ) ; } } public void testBadArguments_plusforspace ( ) { try { new PercentEscaper ( <str> , false ) ; } catch ( IllegalArgumentException e ) { fail ( <str> ) ; } String msg = <str> ; try { new PercentEscaper ( <str> , true ) ; fail ( msg ) ; } catch ( IllegalArgumentException expected ) { assertThat ( expected ) . hasMessage ( msg ) ; } } private String escapeAscii ( char c ) { Preconditions . checkArgument ( c < <int> ) ; String hex = <str> ; return <str> + hex . charAt ( ( c > > <int> ) & <hex> ) + hex . charAt ( c & <hex> ) ; } } 

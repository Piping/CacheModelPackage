package org . apache . cassandra . cql3 . validation . operations ; import java . math . BigDecimal ; import java . text . SimpleDateFormat ; import java . util . Arrays ; import java . util . Calendar ; import java . util . Date ; import java . util . TimeZone ; import org . apache . commons . lang3 . time . DateUtils ; import org . junit . Test ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . cql3 . QueryProcessor ; import org . apache . cassandra . cql3 . UntypedResultSet ; import org . apache . cassandra . cql3 . UntypedResultSet . Row ; import org . apache . cassandra . cql3 . functions . UDAggregate ; import org . apache . cassandra . db . SystemKeyspace ; import org . apache . cassandra . exceptions . FunctionExecutionException ; import org . apache . cassandra . exceptions . InvalidRequestException ; import org . apache . cassandra . schema . KeyspaceMetadata ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . transport . Event ; import org . apache . cassandra . transport . messages . ResultMessage ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertNotNull ; import static org . junit . Assert . assertNull ; import static org . junit . Assert . assertTrue ; public class AggregationTest extends CQLTester { @Test public void testNonExistingOnes ( ) throws Throwable { assertInvalidThrowMessage ( <str> , InvalidRequestException . class , <str> + KEYSPACE + <str> ) ; assertInvalidThrowMessage ( <str> , InvalidRequestException . class , <str> + KEYSPACE + <str> ) ; assertInvalidThrowMessage ( <str> , InvalidRequestException . class , <str> ) ; assertInvalidThrowMessage ( <str> , InvalidRequestException . class , <str> ) ; execute ( <str> + KEYSPACE + <str> ) ; execute ( <str> + KEYSPACE + <str> ) ; execute ( <str> ) ; execute ( <str> ) ; } @Test public void testFunctions ( ) throws Throwable { createTable ( <str> ) ; assertColumnNames ( execute ( <str> ) , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L ) ) ; assertColumnNames ( execute ( <str> + <str> + <str> + <str> + <str> ) , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; assertRows ( execute ( <str> + <str> + <str> + <str> + <str> ) , row ( null , null , <int> , <int> , null , <float> , <float> , new BigDecimal ( <str> ) , new BigDecimal ( <str> ) , null , null , ( short ) <int> , ( short ) <int> , null , null , ( byte ) <int> , ( byte ) <int> ) ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> + <str> + <str> + <str> ) , row ( <int> , <int> , <int> , <int> , <float> , <float> , <float> , new BigDecimal ( <str> ) , new BigDecimal ( <str> ) , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> , ( byte ) <int> ) ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <float> / <int> ) ) ; } @Test public void testCountStarFunction ( ) throws Throwable { createTable ( <str> ) ; assertColumnNames ( execute ( <str> ) , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L ) ) ; assertColumnNames ( execute ( <str> ) , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L ) ) ; assertColumnNames ( execute ( <str> ) , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L , <int> L ) ) ; assertColumnNames ( execute ( <str> ) , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L ) ) ; assertColumnNames ( execute ( <str> ) , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L ) ) ; assertInvalidSyntaxMessage ( <str> , <str> ) ; assertColumnNames ( execute ( <str> ) , <str> , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L , null , null ) ) ; assertColumnNames ( execute ( <str> ) , <str> , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L , null , null ) ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testAggregateWithColumns ( ) throws Throwable { createTable ( <str> ) ; assertColumnNames ( execute ( <str> ) , <str> , <str> , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L , null , null , null ) ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , null ) ) ; } @Test public void testAggregateWithUdtFields ( ) throws Throwable { String myType = createType ( <str> ) ; createTable ( <str> + myType + <str> + myType + <str> ) ; assertColumnNames ( execute ( <str> ) , <str> , <str> , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L , null , null , null ) ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , null ) ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testAggregateWithFunctions ( ) throws Throwable { createTable ( <str> ) ; String copySign = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertColumnNames ( execute ( <str> + copySign + <str> + copySign + <str> ) , <str> , <str> , copySign + <str> , <str> ) ; assertRows ( execute ( <str> + copySign + <str> + copySign + <str> ) , row ( <int> L , null , null , null ) ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> + copySign + <str> + copySign + <str> ) , row ( <int> , <float> , <float> , - <float> ) ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> + copySign + <str> + copySign + <str> ) , row ( <int> , <float> , null , null ) ) ; } @Test public void testAggregateWithWriteTimeOrTTL ( ) throws Throwable { createTable ( <str> ) ; assertColumnNames ( execute ( <str> ) , <str> , <str> , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( <int> L , null , null , null ) ) ; long today = System . currentTimeMillis ( ) * <int> ; long yesterday = today - ( DateUtils . MILLIS_PER_DAY * <int> ) ; final int secondsPerMinute = <int> ; execute ( <str> + ( <int> * secondsPerMinute ) ) ; execute ( <str> + ( <int> * secondsPerMinute ) ) ; execute ( <str> + yesterday ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> ) ) ; UntypedResultSet resultSet = execute ( <str> ) ; assertEquals ( <int> , resultSet . size ( ) ) ; Row row = resultSet . one ( ) ; assertTrue ( row . getInt ( <str> ) > ( <int> * secondsPerMinute ) ) ; assertTrue ( row . getInt ( <str> ) < = ( <int> * secondsPerMinute ) ) ; resultSet = execute ( <str> ) ; assertEquals ( <int> , resultSet . size ( ) ) ; row = resultSet . one ( ) ; assertTrue ( row . getLong ( <str> ) > = today ) ; assertTrue ( row . getLong ( <str> ) = = yesterday ) ; } @Test public void testFunctionsWithCompactStorage ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> , <float> , <float> , <float> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> , <int> , <float> , <float> , <float> ) ) ; } @Test public void testInvalidCalls ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertInvalidSyntax ( <str> ) ; assertInvalidMessage ( <str> , <str> ) ; assertInvalidSyntax ( <str> ) ; } @Test public void testReversedType ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testNestedFunctions ( ) throws Throwable { createTable ( <str> ) ; String copySign = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertColumnNames ( execute ( <str> ) , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( null , null ) ) ; assertColumnNames ( execute ( <str> ) , <str> , <str> ) ; assertRows ( execute ( <str> ) , row ( null , null ) ) ; assertColumnNames ( execute ( <str> + copySign + <str> ) , <str> + copySign + <str> ) ; assertRows ( execute ( <str> + copySign + <str> ) , row ( ( Object ) null ) ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; SimpleDateFormat format = new SimpleDateFormat ( <str> ) ; format . setTimeZone ( TimeZone . getTimeZone ( <str> ) ) ; Date date = format . parse ( <str> ) ; date = DateUtils . truncate ( date , Calendar . MILLISECOND ) ; assertRows ( execute ( <str> ) , row ( <int> , date . getTime ( ) ) ) ; assertRows ( execute ( <str> ) , row ( <int> , date . getTime ( ) ) ) ; assertRows ( execute ( <str> + copySign + <str> ) , row ( - <float> ) ) ; assertRows ( execute ( <str> + copySign + <str> ) , row ( <float> ) , row ( - <float> ) , row ( <float> ) ) ; assertRows ( execute ( <str> + copySign + <str> ) , row ( <float> ) ) ; assertRows ( execute ( <str> + copySign + <str> ) , row ( <float> ) ) ; assertRows ( execute ( <str> + copySign + <str> ) , row ( - <float> ) ) ; ; } @Test public void testSchemaChange ( ) throws Throwable { String f = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; createFunctionOverload ( f , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( f ) + <str> + <str> + <str> ) ; assertLastSchemaChange ( Event . SchemaChange . Change . CREATED , Event . SchemaChange . Target . AGGREGATE , KEYSPACE , parseFunctionName ( a ) . name , <str> ) ; schemaChange ( <str> + a + <str> + <str> + shortFunctionName ( f ) + <str> + <str> + <str> ) ; assertLastSchemaChange ( Event . SchemaChange . Change . UPDATED , Event . SchemaChange . Target . AGGREGATE , KEYSPACE , parseFunctionName ( a ) . name , <str> ) ; createAggregateOverload ( a , <str> , <str> + <str> + shortFunctionName ( f ) + <str> + <str> + <str> ) ; assertLastSchemaChange ( Event . SchemaChange . Change . CREATED , Event . SchemaChange . Target . AGGREGATE , KEYSPACE , parseFunctionName ( a ) . name , <str> ) ; schemaChange ( <str> + a + <str> ) ; assertLastSchemaChange ( Event . SchemaChange . Change . DROPPED , Event . SchemaChange . Target . AGGREGATE , KEYSPACE , parseFunctionName ( a ) . name , <str> ) ; } @Test public void testDropStatements ( ) throws Throwable { String f = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; createFunctionOverload ( f , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + f ) ; assertInvalidMessage ( <str> , <str> + f + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( f ) + <str> + <str> + <str> ) ; createAggregateOverload ( a , <str> , <str> + <str> + shortFunctionName ( f ) + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + a ) ; assertInvalidMessage ( <str> , <str> + a + <str> ) ; assertInvalidMessage ( <str> , <str> + a ) ; assertInvalidMessage ( <str> , <str> + a ) ; execute ( <str> + KEYSPACE + <str> ) ; execute ( <str> + a + <str> ) ; execute ( <str> + a + <str> ) ; execute ( <str> + a + <str> ) ; } @Test public void testDropReferenced ( ) throws Throwable { String f = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( f ) + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + f ) ; execute ( <str> + a + <str> ) ; } @Test public void testJavaAggregateNoInit ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) ) ; assertRows ( execute ( <str> + a + <str> ) , row ( <str> ) ) ; execute ( <str> + a + <str> ) ; assertInvalidMessage ( <str> , <str> + a + <str> ) ; } @Test public void testJavaAggregateNullInitcond ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; assertRows ( execute ( <str> + a + <str> ) , row ( <str> ) ) ; execute ( <str> + a + <str> ) ; assertInvalidMessage ( <str> , <str> + a + <str> ) ; } @Test public void testJavaAggregateInvalidInitcond ( ) throws Throwable { String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; } @Test public void testJavaAggregateIncompatibleTypes ( ) throws Throwable { String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fState2 = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal2 = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState2 ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal2 ) ) ; } @Test public void testJavaAggregateNonExistingFuncs ( ) throws Throwable { String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) + <str> ) ; execute ( <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) ) ; execute ( <str> + KEYSPACE + <str> ) ; } @Test public void testJavaAggregateFailingFuncs ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fStateOK = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinalOK = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a0 = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; String a1 = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateOK ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; String a2 = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateOK ) + <str> + <str> + <str> + shortFunctionName ( fFinalOK ) + <str> + <str> ) ; assertInvalidThrowMessage ( <str> , FunctionExecutionException . class , <str> + a0 + <str> ) ; assertInvalidThrowMessage ( <str> , FunctionExecutionException . class , <str> + a1 + <str> ) ; assertRows ( execute ( <str> + a2 + <str> ) , row ( <str> ) ) ; } @Test public void testJavaAggregateWithoutStateOrFinal ( ) throws Throwable { assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + <str> ) ; String f = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( f ) + <str> + <str> + <str> ) ; execute ( <str> + f + <str> ) ; } @Test public void testJavaAggregate ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; assertRows ( execute ( <str> , KEYSPACE , shortFunctionName ( a ) ) , row ( <str> ) ) ; assertRows ( execute ( <str> + a + <str> ) , row ( <str> ) ) ; execute ( <str> + a + <str> ) ; execute ( <str> + fFinal + <str> ) ; execute ( <str> + fState + <str> ) ; assertInvalidMessage ( <str> , <str> + a + <str> ) ; } @Test public void testJavaAggregateSimple ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> ) ; assertRows ( execute ( <str> + a + <str> ) , row ( <int> ) ) ; execute ( <str> + a + <str> ) ; execute ( <str> + fState + <str> ) ; assertInvalidMessage ( <str> , <str> + a + <str> ) ; } @Test public void testJavaAggregateComplex ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; assertRows ( execute ( <str> , KEYSPACE , shortFunctionName ( a ) ) , row ( <str> ) ) ; assertRows ( execute ( <str> + a + <str> ) , row ( <float> ) ) ; } @Test public void testJavascriptAggregate ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createFunction ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; assertRows ( execute ( <str> + a + <str> ) , row ( <str> ) ) ; execute ( <str> + a + <str> ) ; execute ( <str> + fFinal + <str> ) ; execute ( <str> + fState + <str> ) ; assertInvalidMessage ( <str> , <str> + a + <str> ) ; } @Test public void testJavascriptAggregateSimple ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> ) ; assertRows ( execute ( <str> + a + <str> ) , row ( <int> ) ) ; execute ( <str> + a + <str> ) ; execute ( <str> + fState + <str> ) ; assertInvalidMessage ( <str> , <str> + a + <str> ) ; } @Test public void testFunctionDropPreparedStatement ( ) throws Throwable { String otherKS = <str> ; execute ( <str> + otherKS + <str> ) ; try { execute ( <str> + otherKS + <str> ) ; String fState = createFunction ( otherKS , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( otherKS , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> ) ; ResultMessage . Prepared prepared = QueryProcessor . prepare ( <str> + a + <str> + otherKS + <str> , ClientState . forInternalCalls ( ) , false ) ; assertNotNull ( QueryProcessor . instance . getPrepared ( prepared . statementId ) ) ; execute ( <str> + a + <str> ) ; assertNull ( QueryProcessor . instance . getPrepared ( prepared . statementId ) ) ; execute ( <str> + a + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> ) ; prepared = QueryProcessor . prepare ( <str> + a + <str> + otherKS + <str> , ClientState . forInternalCalls ( ) , false ) ; assertNotNull ( QueryProcessor . instance . getPrepared ( prepared . statementId ) ) ; execute ( <str> + otherKS + <str> ) ; assertNull ( QueryProcessor . instance . getPrepared ( prepared . statementId ) ) ; } finally { execute ( <str> + otherKS + <str> ) ; } } @Test public void testAggregatesReferencedInAggregates ( ) throws Throwable { String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( a ) + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( a ) ) ; } @Test public void testCalledOnNullInput ( ) throws Throwable { String fStateNonNull = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fStateNull = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> + <str> + <str> ) ; String fStateAlwaysNull = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinalNonNull = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinalNull = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalid ( <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fStateNonNull ) + <str> + <str> ) ; assertInvalid ( <str> + KEYSPACE + <str> + <str> + shortFunctionName ( fStateNonNull ) + <str> + <str> + <str> + shortFunctionName ( fFinalNonNull ) ) ; String aStateNull = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateNull ) + <str> + <str> ) ; String aStateNullFinalNull = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateNull ) + <str> + <str> + <str> + shortFunctionName ( fFinalNull ) ) ; String aStateNullFinalNonNull = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateNull ) + <str> + <str> + <str> + shortFunctionName ( fFinalNonNull ) ) ; String aStateNonNull = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateNonNull ) + <str> + <str> + <str> ) ; String aStateNonNullFinalNull = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateNonNull ) + <str> + <str> + <str> + shortFunctionName ( fFinalNull ) + <str> + <str> ) ; String aStateNonNullFinalNonNull = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateNonNull ) + <str> + <str> + <str> + shortFunctionName ( fFinalNonNull ) + <str> + <str> ) ; String aStateAlwaysNullFinalNull = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateAlwaysNull ) + <str> + <str> + <str> + shortFunctionName ( fFinalNull ) ) ; String aStateAlwaysNullFinalNonNull = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fStateAlwaysNull ) + <str> + <str> + <str> + shortFunctionName ( fFinalNonNull ) ) ; createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> + aStateNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNullFinalNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNullFinalNonNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNonNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNonNullFinalNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNonNullFinalNonNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateAlwaysNullFinalNull + <str> ) , row ( new Object [ ] { null } ) ) ; assertRows ( execute ( <str> + aStateAlwaysNullFinalNonNull + <str> ) , row ( new Object [ ] { null } ) ) ; assertRows ( execute ( <str> + aStateNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNullFinalNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNullFinalNonNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNonNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNonNullFinalNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNonNullFinalNonNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateAlwaysNullFinalNull + <str> ) , row ( new Object [ ] { null } ) ) ; assertRows ( execute ( <str> + aStateAlwaysNullFinalNonNull + <str> ) , row ( new Object [ ] { null } ) ) ; assertRows ( execute ( <str> + aStateNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNullFinalNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNullFinalNonNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNonNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNonNullFinalNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateNonNullFinalNonNull + <str> ) , row ( <int> ) ) ; assertRows ( execute ( <str> + aStateAlwaysNullFinalNull + <str> ) , row ( new Object [ ] { null } ) ) ; assertRows ( execute ( <str> + aStateAlwaysNullFinalNonNull + <str> ) , row ( new Object [ ] { null } ) ) ; } @Test public void testBrokenAggregate ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> ) ; KeyspaceMetadata ksm = Schema . instance . getKSMetaData ( keyspace ( ) ) ; UDAggregate f = ( UDAggregate ) ksm . functions . get ( parseFunctionName ( a ) ) . iterator ( ) . next ( ) ; UDAggregate broken = UDAggregate . createBroken ( f . name ( ) , f . argTypes ( ) , f . returnType ( ) , null , new InvalidRequestException ( <str> ) ) ; Schema . instance . setKeyspaceMetadata ( ksm . withSwapped ( ksm . functions . without ( f . name ( ) , f . argTypes ( ) ) . with ( broken ) ) ) ; assertInvalidThrowMessage ( <str> , InvalidRequestException . class , <str> + a + <str> ) ; } @Test public void testWrongStateType ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; } @Test public void testWrongKeyspace ( ) throws Throwable { String typeName = createType ( <str> ) ; String type = KEYSPACE + <str> + typeName ; String fState = createFunction ( KEYSPACE_PER_TEST , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE_PER_TEST , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fStateWrong = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinalWrong = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( String . format ( <str> , KEYSPACE_PER_TEST , KEYSPACE ) , <str> + KEYSPACE_PER_TEST + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + type + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE_PER_TEST + <str> + <str> + fStateWrong + <str> + <str> + type + <str> + <str> + shortFunctionName ( fFinal ) + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE_PER_TEST + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + type + <str> + <str> + fFinalWrong + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + KEYSPACE_PER_TEST + <str> + <str> + shortFunctionName ( fState ) + <str> + <str> + type + <str> + <str> + SystemKeyspace . NAME + <str> + <str> ) ; } @Test public void testFunctionWithFrozenSetType ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , set ( ) ) ; execute ( <str> , <int> , set ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , set ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , set ( <int> , <int> , <int> ) ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; String aggregation = createAggregate ( KEYSPACE , <str> , <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; assertRows ( execute ( <str> , KEYSPACE , shortFunctionName ( aggregation ) ) , row ( ( Object ) null ) ) ; assertRows ( execute ( <str> + aggregation + <str> ) , row ( set ( <int> , <int> , <int> ) ) ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testFunctionWithFrozenListType ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , list ( ) ) ; execute ( <str> , <int> , list ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , list ( <int> , <int> , <int> ) ) ; execute ( <str> , <int> , list ( <int> , <int> , <int> ) ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; String aggregation = createAggregate ( KEYSPACE , <str> , <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; assertRows ( execute ( <str> + aggregation + <str> ) , row ( list ( <int> , <int> , <int> ) ) ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testFunctionWithFrozenMapType ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , map ( ) ) ; execute ( <str> , <int> , map ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , map ( <int> , <int> , <int> , <int> ) ) ; execute ( <str> , <int> , map ( <int> , <int> , <int> , <int> ) ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; String aggregation = createAggregate ( KEYSPACE , <str> , <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; assertRows ( execute ( <str> + aggregation + <str> ) , row ( map ( <int> , <int> , <int> , <int> ) ) ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testFunctionWithFrozenTupleType ( ) throws Throwable { createTable ( <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , tuple ( ) ) ; execute ( <str> , <int> , tuple ( <int> , <int> ) ) ; execute ( <str> , <int> , tuple ( <int> , <int> ) ) ; execute ( <str> , <int> , tuple ( <int> , <int> ) ) ; String fState = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; String aggregation = createAggregate ( KEYSPACE , <str> , <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; assertRows ( execute ( <str> + aggregation + <str> ) , row ( tuple ( <int> , <int> ) ) ) ; assertInvalidMessage ( <str> , <str> ) ; } @Test public void testFunctionWithFrozenUDFType ( ) throws Throwable { String myType = createType ( <str> ) ; createTable ( <str> + myType + <str> ) ; createIndex ( <str> ) ; execute ( <str> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; execute ( <str> , <int> , <int> ) ; String fState = createFunction ( KEYSPACE , myType + <str> + myType , <str> + myType + <str> + myType + <str> + <str> + <str> + myType + <str> + <str> + <str> ) ; String fFinal = createFunction ( KEYSPACE , myType , <str> + myType + <str> + <str> + <str> + myType + <str> + <str> + <str> ) ; assertInvalidMessage ( <str> , <str> + myType + <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + myType + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; String aggregation = createAggregate ( KEYSPACE , myType , <str> + myType + <str> + <str> + parseFunctionName ( fState ) . name + <str> + <str> + myType + <str> + <str> + parseFunctionName ( fFinal ) . name + <str> + <str> ) ; assertRows ( execute ( <str> + aggregation + <str> ) , row ( <int> ) ) ; assertInvalidMessage ( <str> , <str> + myType + <str> ) ; } @Test public void testEmptyValues ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; String fCON = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fCONf = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String aCON = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fCON ) + <str> + <str> + <str> + shortFunctionName ( fCONf ) + <str> + <str> ) ; assertRows ( execute ( <str> , KEYSPACE , shortFunctionName ( aCON ) ) , row ( <str> ) ) ; String fRNON = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String fRNONf = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String aRNON = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( fRNON ) + <str> + <str> + <str> + shortFunctionName ( fRNONf ) + <str> + <str> ) ; assertRows ( execute ( <str> + aCON + <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> + aRNON + <str> ) , row ( <str> ) ) ; createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> + aCON + <str> ) , row ( <str> ) ) ; assertRows ( execute ( <str> + aRNON + <str> ) , row ( <str> ) ) ; } @Test public void testEmptyListInitcond ( ) throws Throwable { String f = createFunction ( KEYSPACE , <str> , <str> + <str> + <str> + <str> + <str> ) ; String a = createAggregate ( KEYSPACE , <str> , <str> + <str> + shortFunctionName ( f ) + <str> + <str> + <str> ) ; assertRows ( execute ( <str> , KEYSPACE , shortFunctionName ( a ) ) , row ( <str> ) ) ; createTable ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; execute ( <str> ) ; assertRows ( execute ( <str> + a + <str> ) , row ( Arrays . asList ( <str> , <str> ) ) ) ; } } 

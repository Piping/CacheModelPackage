package org . nd4j . bytebuddy . arrays . create . noreturn ; import net . bytebuddy . description . method . MethodDescription ; import net . bytebuddy . implementation . Implementation ; import net . bytebuddy . implementation . bytecode . ByteCodeAppender ; import net . bytebuddy . implementation . bytecode . StackManipulation ; import net . bytebuddy . implementation . bytecode . member . MethodReturn ; import net . bytebuddy . jar . asm . MethodVisitor ; public class CreateArrayByteCodeAppender implements ByteCodeAppender { private int length = - <int> ; public CreateArrayByteCodeAppender ( int length ) { if ( length < <int> ) throw new IllegalArgumentException ( <str> + length ) ; this . length = length ; } @Override public Size apply ( MethodVisitor methodVisitor , Implementation . Context implementationContext , MethodDescription instrumentedMethod ) { StackManipulation createArray = IntArrayCreation . intCreationOfLength ( length ) ; StackManipulation . Compound size = new StackManipulation . Compound ( createArray ) ; StackManipulation . Size size1 = size . apply ( methodVisitor , implementationContext ) ; return new Size ( size1 . getMaximalSize ( ) , instrumentedMethod . getStackSize ( ) ) ; } } 

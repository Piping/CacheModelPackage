package org . gradle . internal . resource . transfer ; import org . gradle . api . Nullable ; import org . gradle . internal . resource . metadata . ExternalResourceMetaData ; import org . gradle . logging . ProgressLoggerFactory ; import java . io . IOException ; import java . io . InputStream ; import java . net . URI ; public class ProgressLoggingExternalResourceAccessor extends AbstractProgressLoggingHandler implements ExternalResourceAccessor { private final ExternalResourceAccessor delegate ; public ProgressLoggingExternalResourceAccessor ( ExternalResourceAccessor delegate , ProgressLoggerFactory progressLoggerFactory ) { super ( progressLoggerFactory ) ; this . delegate = delegate ; } public ExternalResourceReadResponse openResource ( URI location ) { ExternalResourceReadResponse resource = delegate . openResource ( location ) ; if ( resource ! = null ) { return new ProgressLoggingExternalResource ( location , resource ) ; } else { return null ; } } @Nullable public ExternalResourceMetaData getMetaData ( URI location ) { return delegate . getMetaData ( location ) ; } private class ProgressLoggingExternalResource implements ExternalResourceReadResponse { private final ExternalResourceReadResponse resource ; private final ResourceOperation downloadOperation ; private ProgressLoggingExternalResource ( URI location , ExternalResourceReadResponse resource ) { this . resource = resource ; downloadOperation = createResourceOperation ( location . toString ( ) , ResourceOperation . Type . download , getClass ( ) , resource . getMetaData ( ) . getContentLength ( ) ) ; } @Override public InputStream openStream ( ) throws IOException { return new ProgressLoggingInputStream ( resource . openStream ( ) , downloadOperation ) ; } public void close ( ) throws IOException { try { resource . close ( ) ; } finally { downloadOperation . completed ( ) ; } } @Nullable public ExternalResourceMetaData getMetaData ( ) { return resource . getMetaData ( ) ; } public boolean isLocal ( ) { return resource . isLocal ( ) ; } public String toString ( ) { return resource . toString ( ) ; } } } 

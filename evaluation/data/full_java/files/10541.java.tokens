package com . google . common . io ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . Lists ; import junit . framework . TestCase ; import java . io . IOException ; import java . io . Reader ; import java . io . StringReader ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . List ; @AndroidIncompatible public class SourceSinkTester < S , T , F extends SourceSinkFactory < S , T > > extends TestCase { static final String LOREM_IPSUM = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; static final ImmutableMap < String , String > TEST_STRINGS = ImmutableMap . < String , String > builder ( ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , LOREM_IPSUM ) . build ( ) ; protected final F factory ; protected final T data ; protected final T expected ; private final String suiteName ; private final String caseDesc ; SourceSinkTester ( F factory , T data , String suiteName , String caseDesc , Method method ) { super ( method . getName ( ) ) ; this . factory = checkNotNull ( factory ) ; this . data = checkNotNull ( data ) ; this . expected = checkNotNull ( factory . getExpected ( data ) ) ; this . suiteName = checkNotNull ( suiteName ) ; this . caseDesc = checkNotNull ( caseDesc ) ; } @Override public String getName ( ) { return super . getName ( ) + <str> + suiteName + <str> + caseDesc + <str> ; } protected static ImmutableList < String > getLines ( final String string ) { try { return new CharSource ( ) { @Override public Reader openStream ( ) throws IOException { return new StringReader ( string ) ; } } . readLines ( ) ; } catch ( IOException e ) { throw new AssertionError ( ) ; } } @Override public void tearDown ( ) throws IOException { factory . tearDown ( ) ; } static ImmutableList < Method > getTestMethods ( Class < ? > testClass ) { List < Method > result = Lists . newArrayList ( ) ; for ( Method method : testClass . getDeclaredMethods ( ) ) { if ( Modifier . isPublic ( method . getModifiers ( ) ) & & method . getReturnType ( ) = = void . class & & method . getParameterTypes ( ) . length = = <int> & & method . getName ( ) . startsWith ( <str> ) ) { result . add ( method ) ; } } return ImmutableList . copyOf ( result ) ; } } 

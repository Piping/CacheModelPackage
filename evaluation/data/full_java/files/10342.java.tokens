package com . google . common . collect ; import static com . google . common . collect . Maps . immutableEntry ; import com . google . common . collect . testing . NavigableMapTestSuiteBuilder ; import com . google . common . collect . testing . SafeTreeMap ; import com . google . common . collect . testing . TestStringSortedMapGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import junit . framework . Test ; import junit . framework . TestSuite ; import java . util . Collection ; import java . util . Iterator ; import java . util . Map ; import java . util . Map . Entry ; import java . util . NavigableMap ; import java . util . NavigableSet ; import java . util . Set ; import java . util . SortedMap ; public class ForwardingNavigableMapTest extends ForwardingSortedMapTest { static class StandardImplForwardingNavigableMap < K , V > extends ForwardingNavigableMap < K , V > { private final NavigableMap < K , V > backingMap ; StandardImplForwardingNavigableMap ( NavigableMap < K , V > backingMap ) { this . backingMap = backingMap ; } @Override protected NavigableMap < K , V > delegate ( ) { return backingMap ; } @Override public boolean containsKey ( Object key ) { return standardContainsKey ( key ) ; } @Override public boolean containsValue ( Object value ) { return standardContainsValue ( value ) ; } @Override public void putAll ( Map < ? extends K , ? extends V > map ) { standardPutAll ( map ) ; } @Override public V remove ( Object object ) { return standardRemove ( object ) ; } @Override public boolean equals ( Object object ) { return standardEquals ( object ) ; } @Override public int hashCode ( ) { return standardHashCode ( ) ; } @Override public Set < K > keySet ( ) { return navigableKeySet ( ) ; } @Override public Collection < V > values ( ) { return new StandardValues ( ) ; } @Override public String toString ( ) { return standardToString ( ) ; } @Override public Set < Entry < K , V > > entrySet ( ) { return new StandardEntrySet ( ) { @Override public Iterator < Entry < K , V > > iterator ( ) { return backingMap . entrySet ( ) . iterator ( ) ; } } ; } @Override public void clear ( ) { standardClear ( ) ; } @Override public boolean isEmpty ( ) { return standardIsEmpty ( ) ; } @Override public SortedMap < K , V > subMap ( K fromKey , K toKey ) { return standardSubMap ( fromKey , toKey ) ; } @Override public Entry < K , V > lowerEntry ( K key ) { return standardLowerEntry ( key ) ; } @Override public K lowerKey ( K key ) { return standardLowerKey ( key ) ; } @Override public Entry < K , V > floorEntry ( K key ) { return standardFloorEntry ( key ) ; } @Override public K floorKey ( K key ) { return standardFloorKey ( key ) ; } @Override public Entry < K , V > ceilingEntry ( K key ) { return standardCeilingEntry ( key ) ; } @Override public K ceilingKey ( K key ) { return standardCeilingKey ( key ) ; } @Override public Entry < K , V > higherEntry ( K key ) { return standardHigherEntry ( key ) ; } @Override public K higherKey ( K key ) { return standardHigherKey ( key ) ; } @Override public Entry < K , V > firstEntry ( ) { return standardFirstEntry ( ) ; } @Override public Entry < K , V > pollFirstEntry ( ) { return standardPollFirstEntry ( ) ; } @Override public Entry < K , V > pollLastEntry ( ) { return standardPollLastEntry ( ) ; } @Override public NavigableMap < K , V > descendingMap ( ) { return new StandardDescendingMap ( ) ; } @Override public NavigableSet < K > navigableKeySet ( ) { return new StandardNavigableKeySet ( ) ; } @Override public NavigableSet < K > descendingKeySet ( ) { return standardDescendingKeySet ( ) ; } @Override public K firstKey ( ) { return standardFirstKey ( ) ; } @Override public SortedMap < K , V > headMap ( K toKey ) { return standardHeadMap ( toKey ) ; } @Override public K lastKey ( ) { return standardLastKey ( ) ; } @Override public SortedMap < K , V > tailMap ( K fromKey ) { return standardTailMap ( fromKey ) ; } } static class StandardLastEntryForwardingNavigableMap < K , V > extends ForwardingNavigableMap < K , V > { private final NavigableMap < K , V > backingMap ; StandardLastEntryForwardingNavigableMap ( NavigableMap < K , V > backingMap ) { this . backingMap = backingMap ; } @Override protected NavigableMap < K , V > delegate ( ) { return backingMap ; } @Override public Entry < K , V > lastEntry ( ) { return standardLastEntry ( ) ; } } public static Test suite ( ) { TestSuite suite = new TestSuite ( ) ; suite . addTestSuite ( ForwardingNavigableMapTest . class ) ; suite . addTest ( NavigableMapTestSuiteBuilder . using ( new TestStringSortedMapGenerator ( ) { @Override protected SortedMap < String , String > create ( Entry < String , String > [ ] entries ) { NavigableMap < String , String > map = new SafeTreeMap < String , String > ( ) ; for ( Entry < String , String > entry : entries ) { map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return new StandardImplForwardingNavigableMap < String , String > ( map ) ; } } ) . named ( <str> + <str> ) . withFeatures ( CollectionSize . ANY , CollectionFeature . KNOWN_ORDER , MapFeature . ALLOWS_NULL_VALUES , CollectionFeature . SUPPORTS_ITERATOR_REMOVE , MapFeature . GENERAL_PURPOSE ) . createTestSuite ( ) ) ; return suite ; } @Override public void setUp ( ) throws Exception { super . setUp ( ) ; @SuppressWarnings ( <str> ) final NavigableMap < String , Boolean > sortedMap = createProxyInstance ( NavigableMap . class ) ; forward = new ForwardingNavigableMap < String , Boolean > ( ) { @Override protected NavigableMap < String , Boolean > delegate ( ) { return sortedMap ; } } ; } public void testStandardLastEntry ( ) { NavigableMap < String , Integer > forwarding = new StandardLastEntryForwardingNavigableMap < String , Integer > ( new SafeTreeMap < String , Integer > ( ) ) ; assertNull ( forwarding . lastEntry ( ) ) ; forwarding . put ( <str> , <int> ) ; assertEquals ( immutableEntry ( <str> , <int> ) , forwarding . lastEntry ( ) ) ; forwarding . put ( <str> , <int> ) ; assertEquals ( immutableEntry ( <str> , <int> ) , forwarding . lastEntry ( ) ) ; forwarding . put ( <str> , <int> ) ; assertEquals ( immutableEntry ( <str> , <int> ) , forwarding . lastEntry ( ) ) ; forwarding . remove ( <str> ) ; assertEquals ( immutableEntry ( <str> , <int> ) , forwarding . lastEntry ( ) ) ; } public void testLowerEntry ( ) { forward ( ) . lowerEntry ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testLowerKey ( ) { forward ( ) . lowerKey ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testFloorEntry ( ) { forward ( ) . floorEntry ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testFloorKey ( ) { forward ( ) . floorKey ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testCeilingEntry ( ) { forward ( ) . ceilingEntry ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testCeilingKey ( ) { forward ( ) . ceilingKey ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testHigherEntry ( ) { forward ( ) . higherEntry ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testHigherKey ( ) { forward ( ) . higherKey ( <str> ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPollFirstEntry ( ) { forward ( ) . pollFirstEntry ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testPollLastEntry ( ) { forward ( ) . pollLastEntry ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testFirstEntry ( ) { forward ( ) . firstEntry ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testLastEntry ( ) { forward ( ) . lastEntry ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testDescendingMap ( ) { forward ( ) . descendingMap ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testNavigableKeySet ( ) { forward ( ) . navigableKeySet ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testDescendingKeySet ( ) { forward ( ) . descendingKeySet ( ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testSubMap_K_Bool_K_Bool ( ) { forward ( ) . subMap ( <str> , false , <str> , true ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testHeadMap_K_Bool ( ) { forward ( ) . headMap ( <str> , false ) ; assertEquals ( <str> , getCalls ( ) ) ; } public void testTailMap_K_Bool ( ) { forward ( ) . tailMap ( <str> , false ) ; assertEquals ( <str> , getCalls ( ) ) ; } @Override NavigableMap < String , Boolean > forward ( ) { return ( NavigableMap < String , Boolean > ) super . forward ( ) ; } } 

package com . google . common . base ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . regex . Pattern ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @CheckReturnValue @GwtCompatible ( emulated = true ) public final class Predicates { private Predicates ( ) { } @GwtCompatible ( serializable = true ) public static < T > Predicate < T > alwaysTrue ( ) { return ObjectPredicate . ALWAYS_TRUE . withNarrowedType ( ) ; } @GwtCompatible ( serializable = true ) public static < T > Predicate < T > alwaysFalse ( ) { return ObjectPredicate . ALWAYS_FALSE . withNarrowedType ( ) ; } @GwtCompatible ( serializable = true ) public static < T > Predicate < T > isNull ( ) { return ObjectPredicate . IS_NULL . withNarrowedType ( ) ; } @GwtCompatible ( serializable = true ) public static < T > Predicate < T > notNull ( ) { return ObjectPredicate . NOT_NULL . withNarrowedType ( ) ; } public static < T > Predicate < T > not ( Predicate < T > predicate ) { return new NotPredicate < T > ( predicate ) ; } public static < T > Predicate < T > and ( Iterable < ? extends Predicate < ? super T > > components ) { return new AndPredicate < T > ( defensiveCopy ( components ) ) ; } public static < T > Predicate < T > and ( Predicate < ? super T > . . . components ) { return new AndPredicate < T > ( defensiveCopy ( components ) ) ; } public static < T > Predicate < T > and ( Predicate < ? super T > first , Predicate < ? super T > second ) { return new AndPredicate < T > ( Predicates . < T > asList ( checkNotNull ( first ) , checkNotNull ( second ) ) ) ; } public static < T > Predicate < T > or ( Iterable < ? extends Predicate < ? super T > > components ) { return new OrPredicate < T > ( defensiveCopy ( components ) ) ; } public static < T > Predicate < T > or ( Predicate < ? super T > . . . components ) { return new OrPredicate < T > ( defensiveCopy ( components ) ) ; } public static < T > Predicate < T > or ( Predicate < ? super T > first , Predicate < ? super T > second ) { return new OrPredicate < T > ( Predicates . < T > asList ( checkNotNull ( first ) , checkNotNull ( second ) ) ) ; } public static < T > Predicate < T > equalTo ( @Nullable T target ) { return ( target = = null ) ? Predicates . < T > isNull ( ) : new IsEqualToPredicate < T > ( target ) ; } @GwtIncompatible ( <str> ) public static Predicate < Object > instanceOf ( Class < ? > clazz ) { return new InstanceOfPredicate ( clazz ) ; } @GwtIncompatible ( <str> ) @Beta public static Predicate < Class < ? > > assignableFrom ( Class < ? > clazz ) { return new AssignableFromPredicate ( clazz ) ; } public static < T > Predicate < T > in ( Collection < ? extends T > target ) { return new InPredicate < T > ( target ) ; } public static < A , B > Predicate < A > compose ( Predicate < B > predicate , Function < A , ? extends B > function ) { return new CompositionPredicate < A , B > ( predicate , function ) ; } @GwtIncompatible ( value = <str> ) public static Predicate < CharSequence > containsPattern ( String pattern ) { return new ContainsPatternFromStringPredicate ( pattern ) ; } @GwtIncompatible ( value = <str> ) public static Predicate < CharSequence > contains ( Pattern pattern ) { return new ContainsPatternPredicate ( pattern ) ; } enum ObjectPredicate implements Predicate < Object > { ALWAYS_TRUE { @Override public boolean apply ( @Nullable Object o ) { return true ; } @Override public String toString ( ) { return <str> ; } } , ALWAYS_FALSE { @Override public boolean apply ( @Nullable Object o ) { return false ; } @Override public String toString ( ) { return <str> ; } } , IS_NULL { @Override public boolean apply ( @Nullable Object o ) { return o = = null ; } @Override public String toString ( ) { return <str> ; } } , NOT_NULL { @Override public boolean apply ( @Nullable Object o ) { return o ! = null ; } @Override public String toString ( ) { return <str> ; } } ; @SuppressWarnings ( <str> ) < T > Predicate < T > withNarrowedType ( ) { return ( Predicate < T > ) this ; } } private static class NotPredicate < T > implements Predicate < T > , Serializable { final Predicate < T > predicate ; NotPredicate ( Predicate < T > predicate ) { this . predicate = checkNotNull ( predicate ) ; } @Override public boolean apply ( @Nullable T t ) { return ! predicate . apply ( t ) ; } @Override public int hashCode ( ) { return ~ predicate . hashCode ( ) ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof NotPredicate ) { NotPredicate < ? > that = ( NotPredicate < ? > ) obj ; return predicate . equals ( that . predicate ) ; } return false ; } @Override public String toString ( ) { return <str> + predicate + <str> ; } private static final long serialVersionUID = <int> ; } private static final Joiner COMMA_JOINER = Joiner . on ( <str> ) ; private static class AndPredicate < T > implements Predicate < T > , Serializable { private final List < ? extends Predicate < ? super T > > components ; private AndPredicate ( List < ? extends Predicate < ? super T > > components ) { this . components = components ; } @Override public boolean apply ( @Nullable T t ) { for ( int i = <int> ; i < components . size ( ) ; i + + ) { if ( ! components . get ( i ) . apply ( t ) ) { return false ; } } return true ; } @Override public int hashCode ( ) { return components . hashCode ( ) + <hex> ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof AndPredicate ) { AndPredicate < ? > that = ( AndPredicate < ? > ) obj ; return components . equals ( that . components ) ; } return false ; } @Override public String toString ( ) { return <str> + COMMA_JOINER . join ( components ) + <str> ; } private static final long serialVersionUID = <int> ; } private static class OrPredicate < T > implements Predicate < T > , Serializable { private final List < ? extends Predicate < ? super T > > components ; private OrPredicate ( List < ? extends Predicate < ? super T > > components ) { this . components = components ; } @Override public boolean apply ( @Nullable T t ) { for ( int i = <int> ; i < components . size ( ) ; i + + ) { if ( components . get ( i ) . apply ( t ) ) { return true ; } } return false ; } @Override public int hashCode ( ) { return components . hashCode ( ) + <hex> ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof OrPredicate ) { OrPredicate < ? > that = ( OrPredicate < ? > ) obj ; return components . equals ( that . components ) ; } return false ; } @Override public String toString ( ) { return <str> + COMMA_JOINER . join ( components ) + <str> ; } private static final long serialVersionUID = <int> ; } private static class IsEqualToPredicate < T > implements Predicate < T > , Serializable { private final T target ; private IsEqualToPredicate ( T target ) { this . target = target ; } @Override public boolean apply ( T t ) { return target . equals ( t ) ; } @Override public int hashCode ( ) { return target . hashCode ( ) ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof IsEqualToPredicate ) { IsEqualToPredicate < ? > that = ( IsEqualToPredicate < ? > ) obj ; return target . equals ( that . target ) ; } return false ; } @Override public String toString ( ) { return <str> + target + <str> ; } private static final long serialVersionUID = <int> ; } @GwtIncompatible ( <str> ) private static class InstanceOfPredicate implements Predicate < Object > , Serializable { private final Class < ? > clazz ; private InstanceOfPredicate ( Class < ? > clazz ) { this . clazz = checkNotNull ( clazz ) ; } @Override public boolean apply ( @Nullable Object o ) { return clazz . isInstance ( o ) ; } @Override public int hashCode ( ) { return clazz . hashCode ( ) ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof InstanceOfPredicate ) { InstanceOfPredicate that = ( InstanceOfPredicate ) obj ; return clazz = = that . clazz ; } return false ; } @Override public String toString ( ) { return <str> + clazz . getName ( ) + <str> ; } private static final long serialVersionUID = <int> ; } @GwtIncompatible ( <str> ) private static class AssignableFromPredicate implements Predicate < Class < ? > > , Serializable { private final Class < ? > clazz ; private AssignableFromPredicate ( Class < ? > clazz ) { this . clazz = checkNotNull ( clazz ) ; } @Override public boolean apply ( Class < ? > input ) { return clazz . isAssignableFrom ( input ) ; } @Override public int hashCode ( ) { return clazz . hashCode ( ) ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof AssignableFromPredicate ) { AssignableFromPredicate that = ( AssignableFromPredicate ) obj ; return clazz = = that . clazz ; } return false ; } @Override public String toString ( ) { return <str> + clazz . getName ( ) + <str> ; } private static final long serialVersionUID = <int> ; } private static class InPredicate < T > implements Predicate < T > , Serializable { private final Collection < ? > target ; private InPredicate ( Collection < ? > target ) { this . target = checkNotNull ( target ) ; } @Override public boolean apply ( @Nullable T t ) { try { return target . contains ( t ) ; } catch ( NullPointerException e ) { return false ; } catch ( ClassCastException e ) { return false ; } } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof InPredicate ) { InPredicate < ? > that = ( InPredicate < ? > ) obj ; return target . equals ( that . target ) ; } return false ; } @Override public int hashCode ( ) { return target . hashCode ( ) ; } @Override public String toString ( ) { return <str> + target + <str> ; } private static final long serialVersionUID = <int> ; } private static class CompositionPredicate < A , B > implements Predicate < A > , Serializable { final Predicate < B > p ; final Function < A , ? extends B > f ; private CompositionPredicate ( Predicate < B > p , Function < A , ? extends B > f ) { this . p = checkNotNull ( p ) ; this . f = checkNotNull ( f ) ; } @Override public boolean apply ( @Nullable A a ) { return p . apply ( f . apply ( a ) ) ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof CompositionPredicate ) { CompositionPredicate < ? , ? > that = ( CompositionPredicate < ? , ? > ) obj ; return f . equals ( that . f ) & & p . equals ( that . p ) ; } return false ; } @Override public int hashCode ( ) { return f . hashCode ( ) ^ p . hashCode ( ) ; } @Override public String toString ( ) { return p + <str> + f + <str> ; } private static final long serialVersionUID = <int> ; } @GwtIncompatible ( <str> ) private static class ContainsPatternPredicate implements Predicate < CharSequence > , Serializable { final Pattern pattern ; ContainsPatternPredicate ( Pattern pattern ) { this . pattern = checkNotNull ( pattern ) ; } @Override public boolean apply ( CharSequence t ) { return pattern . matcher ( t ) . find ( ) ; } @Override public int hashCode ( ) { return Objects . hashCode ( pattern . pattern ( ) , pattern . flags ( ) ) ; } @Override public boolean equals ( @Nullable Object obj ) { if ( obj instanceof ContainsPatternPredicate ) { ContainsPatternPredicate that = ( ContainsPatternPredicate ) obj ; return Objects . equal ( pattern . pattern ( ) , that . pattern . pattern ( ) ) & & Objects . equal ( pattern . flags ( ) , that . pattern . flags ( ) ) ; } return false ; } @Override public String toString ( ) { String patternString = MoreObjects . toStringHelper ( pattern ) . add ( <str> , pattern . pattern ( ) ) . add ( <str> , pattern . flags ( ) ) . toString ( ) ; return <str> + patternString + <str> ; } private static final long serialVersionUID = <int> ; } @GwtIncompatible ( <str> ) private static class ContainsPatternFromStringPredicate extends ContainsPatternPredicate { ContainsPatternFromStringPredicate ( String string ) { super ( Pattern . compile ( string ) ) ; } @Override public String toString ( ) { return <str> + pattern . pattern ( ) + <str> ; } private static final long serialVersionUID = <int> ; } private static < T > List < Predicate < ? super T > > asList ( Predicate < ? super T > first , Predicate < ? super T > second ) { return Arrays . < Predicate < ? super T > > asList ( first , second ) ; } private static < T > List < T > defensiveCopy ( T . . . array ) { return defensiveCopy ( Arrays . asList ( array ) ) ; } static < T > List < T > defensiveCopy ( Iterable < T > iterable ) { ArrayList < T > list = new ArrayList < T > ( ) ; for ( T element : iterable ) { list . add ( checkNotNull ( element ) ) ; } return list ; } } 

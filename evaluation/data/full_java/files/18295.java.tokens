package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Touchable ; import com . badlogic . gdx . scenes . scene2d . utils . Layout ; import com . badlogic . gdx . utils . Align ; import com . badlogic . gdx . utils . SnapshotArray ; public class VerticalGroup extends WidgetGroup { private float prefWidth , prefHeight ; private boolean sizeInvalid = true ; private int align ; private boolean reverse , round = true ; private float spacing ; private float padTop , padLeft , padBottom , padRight ; private float fill ; public VerticalGroup ( ) { setTouchable ( Touchable . childrenOnly ) ; } public void invalidate ( ) { super . invalidate ( ) ; sizeInvalid = true ; } private void computeSize ( ) { sizeInvalid = false ; SnapshotArray < Actor > children = getChildren ( ) ; int n = children . size ; prefWidth = <int> ; prefHeight = padTop + padBottom + spacing * ( n - <int> ) ; for ( int i = <int> ; i < n ; i + + ) { Actor child = children . get ( i ) ; if ( child instanceof Layout ) { Layout layout = ( Layout ) child ; prefWidth = Math . max ( prefWidth , layout . getPrefWidth ( ) ) ; prefHeight + = layout . getPrefHeight ( ) ; } else { prefWidth = Math . max ( prefWidth , child . getWidth ( ) ) ; prefHeight + = child . getHeight ( ) ; } } prefWidth + = padLeft + padRight ; if ( round ) { prefWidth = Math . round ( prefWidth ) ; prefHeight = Math . round ( prefHeight ) ; } } public void layout ( ) { float spacing = this . spacing , padLeft = this . padLeft ; int align = this . align ; boolean reverse = this . reverse , round = this . round ; float groupWidth = getWidth ( ) - padLeft - padRight ; float y = reverse ? padBottom : getHeight ( ) - padTop + spacing ; SnapshotArray < Actor > children = getChildren ( ) ; for ( int i = <int> , n = children . size ; i < n ; i + + ) { Actor child = children . get ( i ) ; float width , height ; Layout layout = null ; if ( child instanceof Layout ) { layout = ( Layout ) child ; if ( fill > <int> ) width = groupWidth * fill ; else width = Math . min ( layout . getPrefWidth ( ) , groupWidth ) ; width = Math . max ( width , layout . getMinWidth ( ) ) ; float maxWidth = layout . getMaxWidth ( ) ; if ( maxWidth > <int> & & width > maxWidth ) width = maxWidth ; height = layout . getPrefHeight ( ) ; } else { width = child . getWidth ( ) ; height = child . getHeight ( ) ; if ( fill > <int> ) width * = fill ; } float x = padLeft ; if ( ( align & Align . right ) ! = <int> ) x + = groupWidth - width ; else if ( ( align & Align . left ) = = <int> ) x + = ( groupWidth - width ) / <int> ; if ( ! reverse ) y - = ( height + spacing ) ; if ( round ) child . setBounds ( Math . round ( x ) , Math . round ( y ) , Math . round ( width ) , Math . round ( height ) ) ; else child . setBounds ( x , y , width , height ) ; if ( reverse ) y + = ( height + spacing ) ; if ( layout ! = null ) layout . validate ( ) ; } } public float getPrefWidth ( ) { if ( sizeInvalid ) computeSize ( ) ; return prefWidth ; } public float getPrefHeight ( ) { if ( sizeInvalid ) computeSize ( ) ; return prefHeight ; } public void setRound ( boolean round ) { this . round = round ; } public VerticalGroup reverse ( ) { reverse ( true ) ; return this ; } public VerticalGroup reverse ( boolean reverse ) { this . reverse = reverse ; return this ; } public boolean getReverse ( ) { return reverse ; } public VerticalGroup space ( float spacing ) { this . spacing = spacing ; return this ; } public float getSpace ( ) { return spacing ; } public VerticalGroup pad ( float pad ) { padTop = pad ; padLeft = pad ; padBottom = pad ; padRight = pad ; return this ; } public VerticalGroup pad ( float top , float left , float bottom , float right ) { padTop = top ; padLeft = left ; padBottom = bottom ; padRight = right ; return this ; } public VerticalGroup padTop ( float padTop ) { this . padTop = padTop ; return this ; } public VerticalGroup padLeft ( float padLeft ) { this . padLeft = padLeft ; return this ; } public VerticalGroup padBottom ( float padBottom ) { this . padBottom = padBottom ; return this ; } public VerticalGroup padRight ( float padRight ) { this . padRight = padRight ; return this ; } public float getPadTop ( ) { return padTop ; } public float getPadLeft ( ) { return padLeft ; } public float getPadBottom ( ) { return padBottom ; } public float getPadRight ( ) { return padRight ; } public VerticalGroup align ( int align ) { this . align = align ; return this ; } public VerticalGroup center ( ) { align = Align . center ; return this ; } public VerticalGroup left ( ) { align | = Align . left ; align & = ~ Align . right ; return this ; } public VerticalGroup right ( ) { align | = Align . right ; align & = ~ Align . left ; return this ; } public int getAlign ( ) { return align ; } public VerticalGroup fill ( ) { fill = <float> ; return this ; } public VerticalGroup fill ( float fill ) { this . fill = fill ; return this ; } public float getFill ( ) { return fill ; } } 

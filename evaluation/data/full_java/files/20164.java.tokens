package io . netty . testsuite . websockets . autobahn ; import io . netty . bootstrap . ServerBootstrap ; import io . netty . buffer . PooledByteBufAllocator ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelOption ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioServerSocketChannel ; public class AutobahnServer { private final int port ; public AutobahnServer ( int port ) { this . port = port ; } public void run ( ) throws Exception { EventLoopGroup bossGroup = new NioEventLoopGroup ( <int> ) ; EventLoopGroup workerGroup = new NioEventLoopGroup ( ) ; try { ServerBootstrap b = new ServerBootstrap ( ) ; b . group ( bossGroup , workerGroup ) . channel ( NioServerSocketChannel . class ) . childOption ( ChannelOption . ALLOCATOR , PooledByteBufAllocator . DEFAULT ) . childHandler ( new AutobahnServerInitializer ( ) ) ; ChannelFuture f = b . bind ( port ) . sync ( ) ; System . out . println ( <str> + port ) ; f . channel ( ) . closeFuture ( ) . sync ( ) ; } finally { bossGroup . shutdownGracefully ( ) ; workerGroup . shutdownGracefully ( ) ; } } public static void main ( String [ ] args ) throws Exception { int port ; if ( args . length > <int> ) { port = Integer . parseInt ( args [ <int> ] ) ; } else { port = <int> ; } new AutobahnServer ( port ) . run ( ) ; } } 

package com . badlogic . gdx . tests ; import java . util . Date ; import java . util . Locale ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . g2d . BitmapFont ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . utils . I18NBundle ; public class I18NMessageTest extends GdxTest { String message = <str> ; BitmapFont font ; SpriteBatch batch ; I18NBundle rb_root ; I18NBundle rb_default ; I18NBundle rb_en ; I18NBundle rb_it ; I18NBundle rb_unsupported ; Date now = new Date ( ) ; @Override public void create ( ) { font = new BitmapFont ( ) ; batch = new SpriteBatch ( ) ; try { FileHandle bfh = Gdx . files . internal ( <str> ) ; rb_root = I18NBundle . createBundle ( bfh , new Locale ( <str> , <str> , <str> ) ) ; rb_default = I18NBundle . createBundle ( bfh ) ; rb_en = I18NBundle . createBundle ( bfh , new Locale ( <str> , <str> ) ) ; rb_it = I18NBundle . createBundle ( bfh , new Locale ( <str> , <str> ) ) ; rb_unsupported = I18NBundle . createBundle ( bfh , new Locale ( <str> ) ) ; println ( <str> + Locale . getDefault ( ) ) ; println ( <str> ) ; println ( getMessage ( <str> , rb_root ) ) ; println ( getMessage ( <str> , rb_default ) ) ; println ( getMessage ( <str> , rb_en ) ) ; println ( getMessage ( <str> , rb_it ) ) ; println ( getMessage ( <str> , rb_unsupported ) ) ; println ( <str> ) ; println ( getParametricMessage ( <str> , rb_root ) ) ; println ( getParametricMessage ( <str> , rb_default ) ) ; println ( getParametricMessage ( <str> , rb_en ) ) ; println ( getParametricMessage ( <str> , rb_it ) ) ; println ( getParametricMessage ( <str> , rb_unsupported ) ) ; Gdx . app . log ( <str> , message ) ; } catch ( Throwable t ) { message = <str> + t . getMessage ( ) + <str> ; message + = t . getClass ( ) ; Gdx . app . error ( I18NMessageTest . class . getSimpleName ( ) , <str> , t ) ; } } private String getMessage ( String header , I18NBundle rb ) { return header + <str> + rb . getLocale ( ) + <str> + rb . format ( <str> ) + <str> + rb . format ( <str> ) + <str> ; } private String getParametricMessage ( String header , I18NBundle rb ) { return header + <str> + rb . format ( <str> , <str> , MathUtils . PI , now ) ; } private void println ( String line ) { message + = line + <str> ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; batch . begin ( ) ; font . draw ( batch , message , <int> , Gdx . graphics . getHeight ( ) - <int> ) ; batch . end ( ) ; } @Override public void dispose ( ) { batch . dispose ( ) ; font . dispose ( ) ; } } 

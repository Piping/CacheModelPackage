package org . gradle . openapi . wrappers . foundation . favorites ; import org . gradle . gradleplugin . foundation . favorites . FavoriteTask ; import org . gradle . gradleplugin . foundation . favorites . FavoritesEditor ; import org . gradle . gradleplugin . userinterface . swing . generic . SwingEditFavoriteInteraction ; import org . gradle . openapi . external . foundation . TaskVersion1 ; import org . gradle . openapi . external . foundation . favorites . FavoriteTaskVersion1 ; import org . gradle . openapi . external . foundation . favorites . FavoritesEditorVersion1 ; import java . awt . * ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class FavoritesEditorWrapper implements FavoritesEditorVersion1 { private FavoritesEditor favoritesEditor ; public FavoritesEditorWrapper ( FavoritesEditor favoritesEditor ) { this . favoritesEditor = favoritesEditor ; } public FavoriteTaskVersion1 addFavorite ( String fullCommandLine , String displayName , boolean alwaysShowOutput ) { return convertFavoriteTask ( favoritesEditor . addFavorite ( fullCommandLine , displayName , alwaysShowOutput ) ) ; } public String editFavorite ( FavoriteTaskVersion1 favoriteTaskVersion1 , final String newFullCommandLine , final String newDisplayName , final boolean newAlwaysShowOutput ) { final StringHolder stringHolder = new StringHolder ( ) ; FavoriteTask favoriteTask = getFavoriteTask ( favoriteTaskVersion1 ) ; favoritesEditor . editFavorite ( favoriteTask , new FavoritesEditor . EditFavoriteInteraction ( ) { public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { favoriteTask . fullCommandLine = newFullCommandLine ; favoriteTask . displayName = newDisplayName ; favoriteTask . alwaysShowOutput = newAlwaysShowOutput ; return true ; } public void reportError ( String error ) { stringHolder . string = error ; } } ) ; return stringHolder . string ; } private class StringHolder { private String string ; } private FavoriteTaskVersion1 convertFavoriteTask ( FavoriteTask favoriteTask ) { if ( favoriteTask = = null ) { return null ; } return new FavoriteTaskWrapper ( favoriteTask ) ; } public List < FavoriteTaskVersion1 > getFavoriteTasks ( ) { List < FavoriteTaskVersion1 > returnedTasks = new ArrayList < FavoriteTaskVersion1 > ( ) ; Iterator < FavoriteTask > taskIterator = favoritesEditor . getFavoriteTasks ( ) . iterator ( ) ; while ( taskIterator . hasNext ( ) ) { FavoriteTask favoriteTask = taskIterator . next ( ) ; returnedTasks . add ( new FavoriteTaskWrapper ( favoriteTask ) ) ; } return returnedTasks ; } public FavoriteTaskVersion1 getFavorite ( String fullCommandLine ) { return convertFavoriteTask ( favoritesEditor . getFavorite ( fullCommandLine ) ) ; } public FavoriteTaskVersion1 getFavoriteByDisplayName ( String displayName ) { return convertFavoriteTask ( favoritesEditor . getFavoriteByDisplayName ( displayName ) ) ; } public FavoriteTaskVersion1 getFavorite ( TaskVersion1 task ) { return convertFavoriteTask ( favoritesEditor . getFavorite ( task . getFullTaskName ( ) ) ) ; } public FavoriteTaskVersion1 promptUserToAddFavorite ( Window parent ) { FavoriteTask favoriteTask = favoritesEditor . addFavorite ( new SwingEditFavoriteInteraction ( parent , <str> , SwingEditFavoriteInteraction . SynchronizeType . OnlyIfAlreadySynchronized ) ) ; return convertFavoriteTask ( favoriteTask ) ; } public boolean promptUserToEditFavorite ( Window parent , FavoriteTaskVersion1 favorite ) { FavoriteTask favoriteTask = getFavoriteTask ( favorite ) ; return favoritesEditor . editFavorite ( favoriteTask , new SwingEditFavoriteInteraction ( parent , <str> , SwingEditFavoriteInteraction . SynchronizeType . OnlyIfAlreadySynchronized ) ) ; } public void removeFavorites ( List < FavoriteTaskVersion1 > favoritesToRemove ) { List < FavoriteTask > favoriteTasksToRemove = new ArrayList < FavoriteTask > ( ) ; Iterator < FavoriteTaskVersion1 > iterator = favoritesToRemove . iterator ( ) ; while ( iterator . hasNext ( ) ) { FavoriteTaskVersion1 favoriteTaskVersion1 = iterator . next ( ) ; favoriteTasksToRemove . add ( getFavoriteTask ( favoriteTaskVersion1 ) ) ; } favoritesEditor . removeFavorites ( favoriteTasksToRemove ) ; } private FavoriteTask getFavoriteTask ( FavoriteTaskVersion1 favoriteTaskVersion1 ) { return ( ( FavoriteTaskWrapper ) favoriteTaskVersion1 ) . getFavoriteTask ( ) ; } } 

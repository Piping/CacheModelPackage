package org . gradle . api ; import groovy . lang . Closure ; import groovy . lang . MissingPropertyException ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . LoggingManager ; import org . gradle . api . plugins . Convention ; import org . gradle . api . plugins . ExtensionAware ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . TaskDependency ; import org . gradle . api . tasks . TaskInputs ; import org . gradle . api . tasks . TaskOutputs ; import org . gradle . api . tasks . TaskState ; import java . io . File ; import java . util . List ; import java . util . Set ; public interface Task extends Comparable < Task > , ExtensionAware { public static final String TASK_NAME = <str> ; public static final String TASK_DESCRIPTION = <str> ; public static final String TASK_GROUP = <str> ; public static final String TASK_TYPE = <str> ; public static final String TASK_DEPENDS_ON = <str> ; public static final String TASK_OVERWRITE = <str> ; public static final String TASK_ACTION = <str> ; String getName ( ) ; static class Namer implements org . gradle . api . Namer < Task > { public String determineName ( Task c ) { return c . getName ( ) ; } } Project getProject ( ) ; List < Action < ? super Task > > getActions ( ) ; void setActions ( List < Action < ? super Task > > actions ) ; TaskDependency getTaskDependencies ( ) ; Set < Object > getDependsOn ( ) ; void setDependsOn ( Iterable < ? > dependsOnTasks ) ; Task dependsOn ( Object . . . paths ) ; void onlyIf ( Closure onlyIfClosure ) ; void onlyIf ( Spec < ? super Task > onlyIfSpec ) ; void setOnlyIf ( Closure onlyIfClosure ) ; void setOnlyIf ( Spec < ? super Task > onlyIfSpec ) ; TaskState getState ( ) ; void setDidWork ( boolean didWork ) ; boolean getDidWork ( ) ; String getPath ( ) ; Task doFirst ( Action < ? super Task > action ) ; Task doFirst ( Closure action ) ; Task doLast ( Action < ? super Task > action ) ; Task doLast ( Closure action ) ; Task leftShift ( Closure action ) ; Task deleteAllActions ( ) ; boolean getEnabled ( ) ; void setEnabled ( boolean enabled ) ; Task configure ( Closure configureClosure ) ; AntBuilder getAnt ( ) ; Logger getLogger ( ) ; LoggingManager getLogging ( ) ; Object property ( String propertyName ) throws MissingPropertyException ; boolean hasProperty ( String propertyName ) ; void setProperty ( String name , Object value ) throws MissingPropertyException ; Convention getConvention ( ) ; String getDescription ( ) ; void setDescription ( String description ) ; String getGroup ( ) ; void setGroup ( String group ) ; boolean dependsOnTaskDidWork ( ) ; TaskInputs getInputs ( ) ; TaskOutputs getOutputs ( ) ; File getTemporaryDir ( ) ; @Incubating Task mustRunAfter ( Object . . . paths ) ; @Incubating void setMustRunAfter ( Iterable < ? > mustRunAfter ) ; @Incubating TaskDependency getMustRunAfter ( ) ; @Incubating Task finalizedBy ( Object . . . paths ) ; @Incubating void setFinalizedBy ( Iterable < ? > finalizedBy ) ; @Incubating TaskDependency getFinalizedBy ( ) ; @Incubating TaskDependency shouldRunAfter ( Object . . . paths ) ; @Incubating void setShouldRunAfter ( Iterable < ? > shouldRunAfter ) ; @Incubating TaskDependency getShouldRunAfter ( ) ; } 

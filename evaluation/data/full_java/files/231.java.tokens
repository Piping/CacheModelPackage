package org . apache . cassandra . cql3 . statements ; import org . apache . cassandra . auth . * ; import org . apache . cassandra . auth . IRoleManager . Option ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . RoleName ; import org . apache . cassandra . exceptions . * ; import org . apache . cassandra . service . ClientState ; import org . apache . cassandra . transport . messages . ResultMessage ; public class AlterRoleStatement extends AuthenticationStatement { private final RoleResource role ; private final RoleOptions opts ; public AlterRoleStatement ( RoleName name , RoleOptions opts ) { this . role = RoleResource . role ( name . getName ( ) ) ; this . opts = opts ; } public void validate ( ClientState state ) throws RequestValidationException { opts . validate ( ) ; if ( opts . isEmpty ( ) ) throw new InvalidRequestException ( <str> ) ; state . ensureNotAnonymous ( ) ; if ( ! DatabaseDescriptor . getRoleManager ( ) . isExistingRole ( role ) ) throw new InvalidRequestException ( String . format ( <str> , role . getRoleName ( ) ) ) ; } public void checkAccess ( ClientState state ) throws UnauthorizedException { AuthenticatedUser user = state . getUser ( ) ; boolean isSuper = user . isSuper ( ) ; if ( opts . getSuperuser ( ) . isPresent ( ) & & user . getRoles ( ) . contains ( role ) ) throw new UnauthorizedException ( <str> + <str> ) ; if ( opts . getSuperuser ( ) . isPresent ( ) & & ! isSuper ) throw new UnauthorizedException ( <str> ) ; if ( isSuper ) return ; if ( user . getName ( ) . equals ( role . getRoleName ( ) ) ) { for ( Option option : opts . getOptions ( ) . keySet ( ) ) { if ( ! DatabaseDescriptor . getRoleManager ( ) . alterableOptions ( ) . contains ( option ) ) throw new UnauthorizedException ( String . format ( <str> , option ) ) ; } } else { super . checkPermission ( state , Permission . ALTER , role ) ; } } public ResultMessage execute ( ClientState state ) throws RequestValidationException , RequestExecutionException { if ( ! opts . isEmpty ( ) ) DatabaseDescriptor . getRoleManager ( ) . alterRole ( state . getUser ( ) , role , opts ) ; return null ; } } 

package org . elasticsearch . index . query ; import com . carrotsearch . randomizedtesting . generators . RandomInts ; import com . carrotsearch . randomizedtesting . generators . RandomStrings ; import java . util . Random ; public class RandomQueryBuilder { public static QueryBuilder createQuery ( Random r ) { switch ( RandomInts . randomIntBetween ( r , <int> , <int> ) ) { case <int> : return new MatchAllQueryBuilderTests ( ) . createTestQueryBuilder ( ) ; case <int> : return new TermQueryBuilderTests ( ) . createTestQueryBuilder ( ) ; case <int> : return new IdsQueryBuilderTests ( ) . createTestQueryBuilder ( ) ; case <int> : return createMultiTermQuery ( r ) ; case <int> : return EmptyQueryBuilder . PROTOTYPE ; default : throw new UnsupportedOperationException ( ) ; } } public static MultiTermQueryBuilder createMultiTermQuery ( Random r ) { MultiTermQueryBuilder < ? > multiTermQueryBuilder ; switch ( RandomInts . randomIntBetween ( r , <int> , <int> ) ) { case <int> : RangeQueryBuilder stringRangeQuery = new RangeQueryBuilder ( AbstractQueryTestCase . STRING_FIELD_NAME ) ; stringRangeQuery . from ( <str> + RandomStrings . randomAsciiOfLengthBetween ( r , <int> , <int> ) ) ; stringRangeQuery . to ( <str> + RandomStrings . randomAsciiOfLengthBetween ( r , <int> , <int> ) ) ; multiTermQueryBuilder = stringRangeQuery ; break ; case <int> : RangeQueryBuilder numericRangeQuery = new RangeQueryBuilder ( AbstractQueryTestCase . INT_FIELD_NAME ) ; numericRangeQuery . from ( RandomInts . randomIntBetween ( r , <int> , <int> ) ) ; numericRangeQuery . to ( RandomInts . randomIntBetween ( r , <int> , <int> ) ) ; multiTermQueryBuilder = numericRangeQuery ; break ; case <int> : multiTermQueryBuilder = new FuzzyQueryBuilder ( AbstractQueryTestCase . INT_FIELD_NAME , RandomInts . randomInt ( r , <int> ) ) ; break ; case <int> : multiTermQueryBuilder = new FuzzyQueryBuilder ( AbstractQueryTestCase . STRING_FIELD_NAME , RandomStrings . randomAsciiOfLengthBetween ( r , <int> , <int> ) ) ; break ; case <int> : multiTermQueryBuilder = new PrefixQueryBuilderTests ( ) . createTestQueryBuilder ( ) ; break ; case <int> : multiTermQueryBuilder = new WildcardQueryBuilderTests ( ) . createTestQueryBuilder ( ) ; break ; default : throw new UnsupportedOperationException ( ) ; } if ( r . nextBoolean ( ) ) { multiTermQueryBuilder . boost ( <float> / RandomInts . randomIntBetween ( r , <int> , <int> ) ) ; } return multiTermQueryBuilder ; } } 

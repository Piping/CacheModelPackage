package io . netty . util . internal ; import org . junit . Test ; import static org . junit . Assert . * ; public class AppendableCharSequenceTest { @Test public void testSimpleAppend ( ) { testSimpleAppend0 ( new AppendableCharSequence ( <int> ) ) ; } @Test public void testAppendString ( ) { testAppendString0 ( new AppendableCharSequence ( <int> ) ) ; } @Test public void testAppendAppendableCharSequence ( ) { AppendableCharSequence seq = new AppendableCharSequence ( <int> ) ; String text = <str> ; AppendableCharSequence seq2 = new AppendableCharSequence ( <int> ) ; seq2 . append ( text ) ; seq . append ( seq2 ) ; assertEquals ( text , seq . toString ( ) ) ; assertEquals ( text . substring ( <int> , text . length ( ) - <int> ) , seq . substring ( <int> , text . length ( ) - <int> ) ) ; assertEqualsChars ( text , seq ) ; } @Test public void testSimpleAppendWithExpand ( ) { testSimpleAppend0 ( new AppendableCharSequence ( <int> ) ) ; } @Test public void testAppendStringWithExpand ( ) { testAppendString0 ( new AppendableCharSequence ( <int> ) ) ; } @Test public void testSubSequence ( ) { AppendableCharSequence master = new AppendableCharSequence ( <int> ) ; master . append ( <str> ) ; assertEquals ( <str> , master . subSequence ( <int> , <int> ) . toString ( ) ) ; } private static void testSimpleAppend0 ( AppendableCharSequence seq ) { String text = <str> ; for ( int i = <int> ; i < text . length ( ) ; i + + ) { seq . append ( text . charAt ( i ) ) ; } assertEquals ( text , seq . toString ( ) ) ; assertEquals ( text . substring ( <int> , text . length ( ) - <int> ) , seq . substring ( <int> , text . length ( ) - <int> ) ) ; assertEqualsChars ( text , seq ) ; seq . reset ( ) ; assertEquals ( <int> , seq . length ( ) ) ; } private static void testAppendString0 ( AppendableCharSequence seq ) { String text = <str> ; seq . append ( text ) ; assertEquals ( text , seq . toString ( ) ) ; assertEquals ( text . substring ( <int> , text . length ( ) - <int> ) , seq . substring ( <int> , text . length ( ) - <int> ) ) ; assertEqualsChars ( text , seq ) ; seq . reset ( ) ; assertEquals ( <int> , seq . length ( ) ) ; } private static void assertEqualsChars ( CharSequence seq1 , CharSequence seq2 ) { assertEquals ( seq1 . length ( ) , seq2 . length ( ) ) ; for ( int i = <int> ; i < seq1 . length ( ) ; i + + ) { assertEquals ( seq1 . charAt ( i ) , seq2 . charAt ( i ) ) ; } } } 

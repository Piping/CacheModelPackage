package com . google . common . base ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . Beta ; import com . google . common . annotations . GwtCompatible ; import java . io . Serializable ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @CheckReturnValue @GwtCompatible public enum CaseFormat { LOWER_HYPHEN ( CharMatcher . is ( <str> ) , <str> ) { @Override String normalizeWord ( String word ) { return Ascii . toLowerCase ( word ) ; } @Override String convert ( CaseFormat format , String s ) { if ( format = = LOWER_UNDERSCORE ) { return s . replace ( <str> , <str> ) ; } if ( format = = UPPER_UNDERSCORE ) { return Ascii . toUpperCase ( s . replace ( <str> , <str> ) ) ; } return super . convert ( format , s ) ; } } , LOWER_UNDERSCORE ( CharMatcher . is ( <str> ) , <str> ) { @Override String normalizeWord ( String word ) { return Ascii . toLowerCase ( word ) ; } @Override String convert ( CaseFormat format , String s ) { if ( format = = LOWER_HYPHEN ) { return s . replace ( <str> , <str> ) ; } if ( format = = UPPER_UNDERSCORE ) { return Ascii . toUpperCase ( s ) ; } return super . convert ( format , s ) ; } } , LOWER_CAMEL ( CharMatcher . inRange ( <str> , <str> ) , <str> ) { @Override String normalizeWord ( String word ) { return firstCharOnlyToUpper ( word ) ; } } , UPPER_CAMEL ( CharMatcher . inRange ( <str> , <str> ) , <str> ) { @Override String normalizeWord ( String word ) { return firstCharOnlyToUpper ( word ) ; } } , UPPER_UNDERSCORE ( CharMatcher . is ( <str> ) , <str> ) { @Override String normalizeWord ( String word ) { return Ascii . toUpperCase ( word ) ; } @Override String convert ( CaseFormat format , String s ) { if ( format = = LOWER_HYPHEN ) { return Ascii . toLowerCase ( s . replace ( <str> , <str> ) ) ; } if ( format = = LOWER_UNDERSCORE ) { return Ascii . toLowerCase ( s ) ; } return super . convert ( format , s ) ; } } ; private final CharMatcher wordBoundary ; private final String wordSeparator ; CaseFormat ( CharMatcher wordBoundary , String wordSeparator ) { this . wordBoundary = wordBoundary ; this . wordSeparator = wordSeparator ; } public final String to ( CaseFormat format , String str ) { checkNotNull ( format ) ; checkNotNull ( str ) ; return ( format = = this ) ? str : convert ( format , str ) ; } String convert ( CaseFormat format , String s ) { StringBuilder out = null ; int i = <int> ; int j = - <int> ; while ( ( j = wordBoundary . indexIn ( s , + + j ) ) ! = - <int> ) { if ( i = = <int> ) { out = new StringBuilder ( s . length ( ) + <int> * wordSeparator . length ( ) ) ; out . append ( format . normalizeFirstWord ( s . substring ( i , j ) ) ) ; } else { out . append ( format . normalizeWord ( s . substring ( i , j ) ) ) ; } out . append ( format . wordSeparator ) ; i = j + wordSeparator . length ( ) ; } return ( i = = <int> ) ? format . normalizeFirstWord ( s ) : out . append ( format . normalizeWord ( s . substring ( i ) ) ) . toString ( ) ; } @Beta public Converter < String , String > converterTo ( CaseFormat targetFormat ) { return new StringConverter ( this , targetFormat ) ; } private static final class StringConverter extends Converter < String , String > implements Serializable { private final CaseFormat sourceFormat ; private final CaseFormat targetFormat ; StringConverter ( CaseFormat sourceFormat , CaseFormat targetFormat ) { this . sourceFormat = checkNotNull ( sourceFormat ) ; this . targetFormat = checkNotNull ( targetFormat ) ; } @Override protected String doForward ( String s ) { return sourceFormat . to ( targetFormat , s ) ; } @Override protected String doBackward ( String s ) { return targetFormat . to ( sourceFormat , s ) ; } @Override public boolean equals ( @Nullable Object object ) { if ( object instanceof StringConverter ) { StringConverter that = ( StringConverter ) object ; return sourceFormat . equals ( that . sourceFormat ) & & targetFormat . equals ( that . targetFormat ) ; } return false ; } @Override public int hashCode ( ) { return sourceFormat . hashCode ( ) ^ targetFormat . hashCode ( ) ; } @Override public String toString ( ) { return sourceFormat + <str> + targetFormat + <str> ; } private static final long serialVersionUID = <int> L ; } abstract String normalizeWord ( String word ) ; private String normalizeFirstWord ( String word ) { return ( this = = LOWER_CAMEL ) ? Ascii . toLowerCase ( word ) : normalizeWord ( word ) ; } private static String firstCharOnlyToUpper ( String word ) { return ( word . isEmpty ( ) ) ? word : new StringBuilder ( word . length ( ) ) . append ( Ascii . toUpperCase ( word . charAt ( <int> ) ) ) . append ( Ascii . toLowerCase ( word . substring ( <int> ) ) ) . toString ( ) ; } } 

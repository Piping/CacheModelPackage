package org . elasticsearch . search . stats ; import org . elasticsearch . index . search . stats . SearchStats ; import org . elasticsearch . index . search . stats . SearchStats . Stats ; import org . elasticsearch . test . ESTestCase ; import java . util . HashMap ; import java . util . Map ; public class SearchStatsUnitTests extends ESTestCase { public void testShardLevelSearchGroupStats ( ) throws Exception { Map < String , Stats > groupStats1 = new HashMap < > ( ) ; Map < String , Stats > groupStats2 = new HashMap < > ( ) ; groupStats2 . put ( <str> , new Stats ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) ) ; SearchStats searchStats1 = new SearchStats ( new Stats ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , <int> , groupStats1 ) ; SearchStats searchStats2 = new SearchStats ( new Stats ( <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> ) , <int> , groupStats2 ) ; searchStats1 . add ( searchStats2 ) ; assertStats ( groupStats1 . get ( <str> ) , <int> ) ; searchStats1 . add ( searchStats2 ) ; assertStats ( groupStats1 . get ( <str> ) , <int> ) ; assertStats ( groupStats2 . get ( <str> ) , <int> ) ; searchStats1 . add ( searchStats2 ) ; assertStats ( groupStats1 . get ( <str> ) , <int> ) ; } private void assertStats ( Stats stats , long equalTo ) { assertEquals ( equalTo , stats . getQueryCount ( ) ) ; assertEquals ( equalTo , stats . getQueryTimeInMillis ( ) ) ; assertEquals ( equalTo , stats . getQueryCurrent ( ) ) ; assertEquals ( equalTo , stats . getFetchCount ( ) ) ; assertEquals ( equalTo , stats . getFetchTimeInMillis ( ) ) ; assertEquals ( equalTo , stats . getFetchCurrent ( ) ) ; assertEquals ( equalTo , stats . getScrollCount ( ) ) ; assertEquals ( equalTo , stats . getScrollTimeInMillis ( ) ) ; assertEquals ( equalTo , stats . getScrollCurrent ( ) ) ; } } 

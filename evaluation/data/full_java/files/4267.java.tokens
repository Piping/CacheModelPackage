package org . eclipse . debug . internal . ui . model . elements ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . model . IErrorReportingExpression ; import org . eclipse . debug . core . model . IExpression ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . core . model . IWatchExpression ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . swt . graphics . RGB ; public class ExpressionLabelProvider extends VariableLabelProvider { @Override protected RGB getForeground ( TreePath elementPath , IPresentationContext presentationContext , String columnId ) throws CoreException { Object element = elementPath . getLastSegment ( ) ; if ( element instanceof IErrorReportingExpression ) { IErrorReportingExpression expression = ( IErrorReportingExpression ) element ; if ( expression . hasErrors ( ) ) { if ( columnId = = null | | columnId . equals ( IDebugUIConstants . COLUMN_ID_VARIABLE_VALUE ) ) { return new RGB ( <int> , <int> , <int> ) ; } } } return super . getForeground ( elementPath , presentationContext , columnId ) ; } @Override protected String getLabel ( TreePath elementPath , IPresentationContext context , String columnId ) throws CoreException { if ( columnId = = null ) { return super . getLabel ( elementPath , context , columnId ) ; } else { IExpression expression = ( IExpression ) elementPath . getLastSegment ( ) ; IValue value = expression . getValue ( ) ; return getColumnText ( expression , value , context , columnId ) ; } } private String getColumnText ( IExpression expression , IValue value , IPresentationContext context , String columnId ) throws CoreException { if ( IDebugUIConstants . COLUMN_ID_VARIABLE_NAME . equals ( columnId ) ) { return getExpressionName ( expression , context ) ; } else if ( IDebugUIConstants . COLUMN_ID_VARIABLE_VALUE . equals ( columnId ) ) { return getExpressionValueText ( expression , value , context ) ; } else if ( IDebugUIConstants . COLUMN_ID_VARIABLE_TYPE . equals ( columnId ) | | IDebugUIConstants . COLUMN_ID_VARIABLE_VALUE_TYPE . equals ( columnId ) ) { if ( value ! = null ) { return getValueTypeName ( null , value , context ) ; } } return null ; } protected String getExpressionName ( IExpression expression , IPresentationContext context ) throws CoreException { if ( expression instanceof IWatchExpression ) { return getWatchExpressionName ( ( IWatchExpression ) expression , context ) ; } return expression . getExpressionText ( ) ; } private String getWatchExpressionName ( IWatchExpression expression , IPresentationContext context ) { StringBuffer result = new StringBuffer ( ) ; String snippet = expression . getExpressionText ( ) . trim ( ) ; StringBuffer snippetBuffer = new StringBuffer ( ) ; if ( snippet . length ( ) > <int> ) { snippetBuffer . append ( snippet . substring ( <int> , <int> ) ) ; snippetBuffer . append ( DebugUIMessages . DefaultLabelProvider_0 ) ; snippetBuffer . append ( snippet . substring ( snippet . length ( ) - <int> ) ) ; } else { snippetBuffer . append ( snippet ) ; } snippet = snippetBuffer . toString ( ) . replaceAll ( <str> , <str> ) ; result . append ( <str> ) ; result . append ( snippet ) ; result . append ( <str> ) ; return result . toString ( ) ; } protected String getExpressionValueText ( IExpression expression , IValue value , IPresentationContext context ) throws CoreException { if ( expression instanceof IWatchExpression ) { IWatchExpression watchExpression = ( IWatchExpression ) expression ; StringBuffer result = new StringBuffer ( ) ; if ( watchExpression . isPending ( ) & & value = = null ) { result . append ( DebugUIMessages . DefaultLabelProvider_12 ) ; } else if ( watchExpression . hasErrors ( ) ) { result . append ( DebugUIMessages . DefaultLabelProvider_13 ) ; } else if ( value ! = null ) { result . append ( getValueText ( null , value , context ) ) ; } if ( ! watchExpression . isEnabled ( ) ) { result . append ( DebugUIMessages . DefaultLabelProvider_15 ) ; } return result . toString ( ) ; } if ( value ! = null ) { return getValueText ( null , value , context ) ; } return null ; } } 

package org . gradle . model . internal . inspect ; import org . gradle . model . internal . core . * ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import java . util . List ; class MethodBackedModelAction < T > extends AbstractModelActionWithView < T > { private final ModelRuleInvoker < ? > ruleInvoker ; public MethodBackedModelAction ( MethodRuleDefinition < ? , T > ruleDefinition ) { this ( ruleDefinition . getRuleInvoker ( ) , ruleDefinition . getDescriptor ( ) , ruleDefinition . getSubjectReference ( ) , ruleDefinition . getTailReferences ( ) ) ; } public MethodBackedModelAction ( ModelRuleInvoker < ? > ruleInvoker , ModelRuleDescriptor descriptor , ModelReference < T > subject , List < ModelReference < ? > > inputs ) { super ( subject , descriptor , inputs ) ; this . ruleInvoker = ruleInvoker ; } @Override protected void execute ( MutableModelNode modelNode , T view , List < ModelView < ? > > inputs ) { Object [ ] args = new Object [ <int> + this . inputs . size ( ) ] ; args [ <int> ] = view ; for ( int i = <int> ; i < this . inputs . size ( ) ; + + i ) { args [ i + <int> ] = inputs . get ( i ) . getInstance ( ) ; } ruleInvoker . invoke ( args ) ; } @Override public String toString ( ) { return <str> + descriptor + <str> + subject + <str> + inputs + <str> ; } } 

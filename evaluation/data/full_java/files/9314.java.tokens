package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . base . Preconditions ; @GwtCompatible ( serializable = true , emulated = true ) @SuppressWarnings ( <str> ) class RegularImmutableList < E > extends ImmutableList < E > { static final ImmutableList < Object > EMPTY = new RegularImmutableList < Object > ( ObjectArrays . EMPTY_ARRAY ) ; private final transient int offset ; private final transient int size ; private final transient Object [ ] array ; RegularImmutableList ( Object [ ] array , int offset , int size ) { this . offset = offset ; this . size = size ; this . array = array ; } RegularImmutableList ( Object [ ] array ) { this ( array , <int> , array . length ) ; } @Override public int size ( ) { return size ; } @Override boolean isPartialView ( ) { return size ! = array . length ; } @Override int copyIntoArray ( Object [ ] dst , int dstOff ) { System . arraycopy ( array , offset , dst , dstOff , size ) ; return dstOff + size ; } @Override @SuppressWarnings ( <str> ) public E get ( int index ) { Preconditions . checkElementIndex ( index , size ) ; return ( E ) array [ index + offset ] ; } @Override ImmutableList < E > subListUnchecked ( int fromIndex , int toIndex ) { return new RegularImmutableList < E > ( array , offset + fromIndex , toIndex - fromIndex ) ; } @SuppressWarnings ( <str> ) @Override public UnmodifiableListIterator < E > listIterator ( int index ) { return ( UnmodifiableListIterator < E > ) Iterators . forArray ( array , offset , size , index ) ; } } 

package com . google . common . util . concurrent ; import com . google . common . util . concurrent . testing . MockFutureListener ; import junit . framework . TestCase ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; public abstract class AbstractChainedListenableFutureTest < T > extends TestCase { protected static final int EXCEPTION_DATA = - <int> ; protected static final int VALID_INPUT_DATA = <int> ; protected static final Exception EXCEPTION = new Exception ( <str> ) ; protected SettableFuture < Integer > inputFuture ; protected ListenableFuture < T > resultFuture ; protected MockFutureListener listener ; @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; inputFuture = SettableFuture . create ( ) ; resultFuture = buildChainingFuture ( inputFuture ) ; listener = new MockFutureListener ( resultFuture ) ; } public void testFutureGetBeforeCallback ( ) throws Exception { try { resultFuture . get ( <int> , TimeUnit . MILLISECONDS ) ; fail ( <str> ) ; } catch ( TimeoutException expected ) { } } public void testFutureGetThrowsWrappedException ( ) throws Exception { inputFuture . setException ( EXCEPTION ) ; listener . assertException ( EXCEPTION ) ; } public void testFutureGetThrowsWrappedError ( ) throws Exception { Error error = new Error ( ) ; inputFuture . setException ( error ) ; listener . assertException ( error ) ; } public void testAddListenerAfterCallback ( ) throws Throwable { inputFuture . set ( VALID_INPUT_DATA ) ; listener . assertSuccess ( getSuccessfulResult ( ) ) ; } public void testFutureBeforeCallback ( ) throws Throwable { inputFuture . set ( VALID_INPUT_DATA ) ; listener . assertSuccess ( getSuccessfulResult ( ) ) ; } protected abstract ListenableFuture < T > buildChainingFuture ( ListenableFuture < Integer > inputFuture ) ; protected abstract T getSuccessfulResult ( ) ; } 

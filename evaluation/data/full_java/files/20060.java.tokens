package io . netty . microbench . buffer ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . SwappedByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . microbench . util . AbstractMicrobenchmark ; import org . openjdk . jmh . annotations . Benchmark ; import org . openjdk . jmh . annotations . Measurement ; import org . openjdk . jmh . annotations . Param ; import org . openjdk . jmh . annotations . Scope ; import org . openjdk . jmh . annotations . Setup ; import org . openjdk . jmh . annotations . State ; import org . openjdk . jmh . annotations . Warmup ; import java . nio . ByteOrder ; @State ( Scope . Benchmark ) @Warmup ( iterations = <int> ) @Measurement ( iterations = <int> ) public class SwappedByteBufBenchmark extends AbstractMicrobenchmark { private ByteBuf swappedByteBuf ; private ByteBuf unsafeSwappedByteBuf ; @Setup public void setup ( ) { swappedByteBuf = new SwappedByteBuf ( Unpooled . directBuffer ( <int> ) ) ; unsafeSwappedByteBuf = Unpooled . directBuffer ( <int> ) . order ( ByteOrder . LITTLE_ENDIAN ) ; if ( unsafeSwappedByteBuf . getClass ( ) . equals ( SwappedByteBuf . class ) ) { throw new IllegalStateException ( <str> + SwappedByteBuf . class . getSimpleName ( ) ) ; } } @Param ( <str> ) public int size ; @Benchmark public void swappedByteBufSetInt ( ) { swappedByteBuf . setLong ( <int> , size ) ; } @Benchmark public void swappedByteBufSetShort ( ) { swappedByteBuf . setShort ( <int> , size ) ; } @Benchmark public void swappedByteBufSetLong ( ) { swappedByteBuf . setLong ( <int> , size ) ; } @Benchmark public void unsafeSwappedByteBufSetInt ( ) { unsafeSwappedByteBuf . setInt ( <int> , size ) ; } @Benchmark public void unsafeSwappedByteBufSetShort ( ) { unsafeSwappedByteBuf . setShort ( <int> , size ) ; } @Benchmark public void unsafeSwappedByteBufSetLong ( ) { unsafeSwappedByteBuf . setLong ( <int> , size ) ; } } 

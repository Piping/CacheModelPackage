package com . badlogic . gdx . backends . headless . mock . graphics ; import com . badlogic . gdx . Graphics ; import com . badlogic . gdx . graphics . Cursor ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . GL30 ; import com . badlogic . gdx . graphics . Pixmap ; public class MockGraphics implements Graphics { long frameId = - <int> ; float deltaTime = <int> ; long frameStart = <int> ; int frames = <int> ; int fps ; long lastTime = System . nanoTime ( ) ; @Override public boolean isGL30Available ( ) { return false ; } @Override public GL20 getGL20 ( ) { return null ; } @Override public GL30 getGL30 ( ) { return null ; } @Override public int getWidth ( ) { return <int> ; } @Override public int getHeight ( ) { return <int> ; } @Override public long getFrameId ( ) { return frameId ; } @Override public float getDeltaTime ( ) { return deltaTime ; } @Override public float getRawDeltaTime ( ) { return <int> ; } @Override public int getFramesPerSecond ( ) { return <int> ; } @Override public GraphicsType getType ( ) { return GraphicsType . Mock ; } @Override public float getPpiX ( ) { return <int> ; } @Override public float getPpiY ( ) { return <int> ; } @Override public float getPpcX ( ) { return <int> ; } @Override public float getPpcY ( ) { return <int> ; } @Override public float getDensity ( ) { return <int> ; } @Override public boolean supportsDisplayModeChange ( ) { return false ; } @Override public DisplayMode [ ] getDisplayModes ( ) { return new DisplayMode [ <int> ] ; } @Override public DisplayMode getDesktopDisplayMode ( ) { return null ; } @Override public boolean setDisplayMode ( DisplayMode displayMode ) { return false ; } @Override public boolean setDisplayMode ( int width , int height , boolean fullscreen ) { return false ; } @Override public void setTitle ( String title ) { } @Override public void setVSync ( boolean vsync ) { } @Override public BufferFormat getBufferFormat ( ) { return null ; } @Override public boolean supportsExtension ( String extension ) { return false ; } @Override public void setContinuousRendering ( boolean isContinuous ) { } @Override public boolean isContinuousRendering ( ) { return false ; } @Override public void requestRendering ( ) { } @Override public boolean isFullscreen ( ) { return false ; } public void updateTime ( ) { long time = System . nanoTime ( ) ; deltaTime = ( time - lastTime ) / <float> ; lastTime = time ; if ( time - frameStart > = <int> ) { fps = frames ; frames = <int> ; frameStart = time ; } frames + + ; } public void incrementFrameId ( ) { frameId + + ; } @Override public Cursor newCursor ( Pixmap pixmap , int xHotspot , int yHotspot ) { return null ; } @Override public void setCursor ( Cursor cursor ) { } } 

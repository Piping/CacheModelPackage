package org . gradle . api . tasks ; import groovy . lang . Closure ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . PublishException ; import org . gradle . api . artifacts . dsl . RepositoryHandler ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . ConventionTask ; import org . gradle . api . internal . artifacts . ArtifactPublicationServices ; import org . gradle . api . internal . artifacts . ArtifactPublisher ; import org . gradle . api . internal . artifacts . ModuleInternal ; import org . gradle . api . internal . artifacts . configurations . ConfigurationInternal ; import org . gradle . api . internal . artifacts . repositories . PublicationAwareRepository ; import org . gradle . internal . Transformers ; import org . gradle . util . ConfigureUtil ; import javax . inject . Inject ; import java . io . File ; import java . util . List ; import static org . gradle . util . CollectionUtils . collect ; public class Upload extends ConventionTask { private Configuration configuration ; private boolean uploadDescriptor ; private File descriptorDestination ; private RepositoryHandler repositories ; @Inject protected ArtifactPublicationServices getPublicationServices ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction protected void upload ( ) { getLogger ( ) . info ( <str> + configuration ) ; ModuleInternal module = ( ( ConfigurationInternal ) configuration ) . getModule ( ) ; ArtifactPublisher artifactPublisher = getPublicationServices ( ) . createArtifactPublisher ( ) ; File descriptorDestination = isUploadDescriptor ( ) ? getDescriptorDestination ( ) : null ; List < PublicationAwareRepository > publishRepositories = collect ( getRepositories ( ) , Transformers . cast ( PublicationAwareRepository . class ) ) ; try { artifactPublisher . publish ( publishRepositories , module , configuration , descriptorDestination ) ; } catch ( Exception e ) { throw new PublishException ( String . format ( <str> , configuration . getName ( ) ) , e ) ; } } public boolean isUploadDescriptor ( ) { return uploadDescriptor ; } public void setUploadDescriptor ( boolean uploadDescriptor ) { this . uploadDescriptor = uploadDescriptor ; } public File getDescriptorDestination ( ) { return descriptorDestination ; } @SuppressWarnings ( <str> ) public void setDescriptorDestination ( File descriptorDestination ) { this . descriptorDestination = descriptorDestination ; } public RepositoryHandler getRepositories ( ) { if ( repositories = = null ) { repositories = getPublicationServices ( ) . createRepositoryHandler ( ) ; } return repositories ; } public Configuration getConfiguration ( ) { return configuration ; } public void setConfiguration ( Configuration configuration ) { this . configuration = configuration ; } public RepositoryHandler repositories ( Closure configureClosure ) { return ConfigureUtil . configure ( configureClosure , getRepositories ( ) ) ; } @InputFiles public FileCollection getArtifacts ( ) { Configuration configuration = getConfiguration ( ) ; return configuration = = null ? null : configuration . getAllArtifacts ( ) . getFiles ( ) ; } } 

package org . elasticsearch . search . functionscore ; import org . apache . lucene . search . Explanation ; import org . apache . lucene . util . English ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . SearchType ; import org . elasticsearch . common . lucene . search . function . CombineFunction ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . Settings . Builder ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . Operator ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . search . SearchHits ; import org . elasticsearch . search . rescore . RescoreBuilder ; import org . elasticsearch . search . rescore . RescoreBuilder . QueryRescorer ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . Arrays ; import java . util . Comparator ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_REPLICAS ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_NUMBER_OF_SHARDS ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFirstHit ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertFourthHit ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSecondHit ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertThirdHit ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . hasId ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . hasScore ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; import static org . hamcrest . Matchers . notNullValue ; public class QueryRescorerIT extends ESIntegTestCase { public void testEnforceWindowSize ( ) { createIndex ( <str> ) ; int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , Integer . toString ( i ) ) . setSource ( <str> , Integer . toString ( i ) ) . execute ( ) . actionGet ( ) ; } ensureYellow ( ) ; refresh ( ) ; int numShards = getNumShards ( <str> ) . numPrimaries ; for ( int j = <int> ; j < iters ; j + + ) { SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . functionScoreQuery ( QueryBuilders . matchAllQuery ( ) , ScoreFunctionBuilders . weightFactorFunction ( <int> ) ) . boostMode ( CombineFunction . REPLACE ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , <int> ) . setSize ( randomIntBetween ( <int> , <int> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( searchResponse ) ; assertFirstHit ( searchResponse , hasScore ( <float> ) ) ; int numDocsWith100AsAScore = <int> ; for ( int i = <int> ; i < searchResponse . getHits ( ) . hits ( ) . length ; i + + ) { float score = searchResponse . getHits ( ) . hits ( ) [ i ] . getScore ( ) ; if ( score = = <int> f ) { numDocsWith100AsAScore + = <int> ; } } assertThat ( numDocsWith100AsAScore , lessThanOrEqualTo ( numShards ) ) ; } } public void testRescorePhrase ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . setSettings ( Settings . settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <int> ) ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . get ( ) ; ensureYellow ( ) ; refresh ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) . boost ( <float> ) ) . setRescoreQueryWeight ( <int> ) , <int> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getHits ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getHits ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getHits ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) , <int> ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setRescorer ( RescoreBuilder . queryRescorer ( ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) ) ) , <int> ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; } public void testMoreDocs ( ) throws Exception { Builder builder = Settings . builder ( ) ; builder . put ( <str> , <str> ) ; builder . putArray ( <str> , <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . putArray ( <str> , <str> , <str> ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . setSettings ( builder . put ( <str> , <int> ) ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; ensureYellow ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setFrom ( <int> ) . setSize ( <int> ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , <int> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setFrom ( <int> ) . setSize ( <int> ) . setSearchType ( SearchType . DFS_QUERY_THEN_FETCH ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , <int> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setFrom ( <int> ) . setSize ( <int> ) . setSearchType ( SearchType . DFS_QUERY_THEN_FETCH ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , <int> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; } public void testSmallRescoreWindow ( ) throws Exception { Builder builder = Settings . builder ( ) ; builder . put ( <str> , <str> ) ; builder . putArray ( <str> , <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . putArray ( <str> , <str> , <str> ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . setSettings ( builder . put ( <str> , <int> ) ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; ensureYellow ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) ) . setFrom ( <int> ) . setSize ( <int> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; assertFourthHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) ) . setFrom ( <int> ) . setSize ( <int> ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , <int> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; assertFourthHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) ) . setFrom ( <int> ) . setSize ( <int> ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , <int> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; assertFourthHit ( searchResponse , hasId ( <str> ) ) ; } public void testRescorerMadeScoresWorse ( ) throws Exception { Builder builder = Settings . builder ( ) ; builder . put ( <str> , <str> ) ; builder . putArray ( <str> , <str> , <str> ) ; builder . put ( <str> , <str> ) ; builder . putArray ( <str> , <str> , <str> ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . setSettings ( builder . put ( <str> , <int> ) ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; ensureYellow ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setFrom ( <int> ) . setSize ( <int> ) . execute ( ) . actionGet ( ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; assertFourthHit ( searchResponse , hasId ( <str> ) ) ; searchResponse = client ( ) . prepareSearch ( ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setFrom ( <int> ) . setSize ( <int> ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( - <float> ) , <int> ) . execute ( ) . actionGet ( ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; assertFourthHit ( searchResponse , hasId ( <str> ) ) ; } private final static Comparator < SearchHit > searchHitsComparator = new Comparator < SearchHit > ( ) { @Override public int compare ( SearchHit hit1 , SearchHit hit2 ) { int cmp = Float . compare ( hit2 . getScore ( ) , hit1 . getScore ( ) ) ; if ( cmp = = <int> ) { return hit1 . id ( ) . compareTo ( hit2 . id ( ) ) ; } else { return cmp ; } } } ; private static void assertEquivalent ( String query , SearchResponse plain , SearchResponse rescored ) { assertNoFailures ( plain ) ; assertNoFailures ( rescored ) ; SearchHits leftHits = plain . getHits ( ) ; SearchHits rightHits = rescored . getHits ( ) ; assertThat ( leftHits . getTotalHits ( ) , equalTo ( rightHits . getTotalHits ( ) ) ) ; assertThat ( leftHits . getHits ( ) . length , equalTo ( rightHits . getHits ( ) . length ) ) ; SearchHit [ ] hits = leftHits . getHits ( ) ; SearchHit [ ] rHits = rightHits . getHits ( ) ; Arrays . sort ( hits , searchHitsComparator ) ; Arrays . sort ( rHits , searchHitsComparator ) ; for ( int i = <int> ; i < hits . length ; i + + ) { assertThat ( <str> + query , hits [ i ] . getScore ( ) , equalTo ( rHits [ i ] . getScore ( ) ) ) ; } for ( int i = <int> ; i < hits . length ; i + + ) { if ( hits [ i ] . getScore ( ) = = hits [ hits . length - <int> ] . getScore ( ) ) { return ; } assertThat ( <str> + query , hits [ i ] . getId ( ) , equalTo ( rHits [ i ] . getId ( ) ) ) ; } } private static void assertEquivalentOrSubstringMatch ( String query , SearchResponse plain , SearchResponse rescored ) { assertNoFailures ( plain ) ; assertNoFailures ( rescored ) ; SearchHits leftHits = plain . getHits ( ) ; SearchHits rightHits = rescored . getHits ( ) ; assertThat ( leftHits . getTotalHits ( ) , equalTo ( rightHits . getTotalHits ( ) ) ) ; assertThat ( leftHits . getHits ( ) . length , equalTo ( rightHits . getHits ( ) . length ) ) ; SearchHit [ ] hits = leftHits . getHits ( ) ; SearchHit [ ] otherHits = rightHits . getHits ( ) ; if ( ! hits [ <int> ] . getId ( ) . equals ( otherHits [ <int> ] . getId ( ) ) ) { assertThat ( ( ( String ) otherHits [ <int> ] . sourceAsMap ( ) . get ( <str> ) ) . contains ( query ) , equalTo ( true ) ) ; } else { Arrays . sort ( hits , searchHitsComparator ) ; Arrays . sort ( otherHits , searchHitsComparator ) ; for ( int i = <int> ; i < hits . length ; i + + ) { if ( hits [ i ] . getScore ( ) = = hits [ hits . length - <int> ] . getScore ( ) ) { return ; } assertThat ( query , hits [ i ] . getId ( ) , equalTo ( rightHits . getHits ( ) [ i ] . getId ( ) ) ) ; } } } public void testEquivalence ( ) throws Exception { int numDocs = indexRandomNumbers ( <str> , - <int> , false ) ; final int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { int resultSize = numDocs ; int rescoreWindow = between ( <int> , <int> ) * resultSize ; String intToEnglish = English . intToEnglish ( between ( <int> , numDocs - <int> ) ) ; String query = intToEnglish . split ( <str> ) [ <int> ] ; SearchResponse rescored = client ( ) . prepareSearch ( ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . setPreference ( <str> ) . setQuery ( QueryBuilders . matchQuery ( <str> , query ) . operator ( Operator . OR ) ) . setFrom ( <int> ) . setSize ( resultSize ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . constantScoreQuery ( QueryBuilders . matchPhraseQuery ( <str> , intToEnglish ) . slop ( <int> ) ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , rescoreWindow ) . execute ( ) . actionGet ( ) ; SearchResponse plain = client ( ) . prepareSearch ( ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . setPreference ( <str> ) . setQuery ( QueryBuilders . matchQuery ( <str> , query ) . operator ( Operator . OR ) ) . setFrom ( <int> ) . setSize ( resultSize ) . execute ( ) . actionGet ( ) ; assertEquivalent ( query , plain , rescored ) ; rescored = client ( ) . prepareSearch ( ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . setPreference ( <str> ) . setQuery ( QueryBuilders . matchQuery ( <str> , query ) . operator ( Operator . OR ) ) . setFrom ( <int> ) . setSize ( resultSize ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . constantScoreQuery ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , rescoreWindow ) . execute ( ) . actionGet ( ) ; assertEquivalent ( query , plain , rescored ) ; rescored = client ( ) . prepareSearch ( ) . setSearchType ( SearchType . QUERY_THEN_FETCH ) . setPreference ( <str> ) . setQuery ( QueryBuilders . matchQuery ( <str> , query ) . operator ( Operator . OR ) ) . setFrom ( <int> ) . setSize ( resultSize ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , intToEnglish ) . slop ( <int> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , <int> * rescoreWindow ) . execute ( ) . actionGet ( ) ; assertEquivalentOrSubstringMatch ( intToEnglish , plain , rescored ) ; } } public void testExplain ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; ensureYellow ( ) ; refresh ( ) ; { SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setSearchType ( SearchType . DFS_QUERY_THEN_FETCH ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchPhraseQuery ( <str> , <str> ) . slop ( <int> ) . boost ( <float> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) , <int> ) . setExplain ( true ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertThat ( searchResponse . getHits ( ) . getAt ( i ) . explanation ( ) , notNullValue ( ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( i ) . explanation ( ) . isMatch ( ) , equalTo ( true ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( i ) . explanation ( ) . getDetails ( ) . length , equalTo ( <int> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( i ) . explanation ( ) . getDetails ( ) [ <int> ] . isMatch ( ) , equalTo ( true ) ) ; if ( i = = <int> ) { assertThat ( searchResponse . getHits ( ) . getAt ( i ) . explanation ( ) . getDetails ( ) [ <int> ] . getValue ( ) , equalTo ( <float> ) ) ; } else { assertThat ( searchResponse . getHits ( ) . getAt ( i ) . explanation ( ) . getDescription ( ) , equalTo ( <str> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( i ) . explanation ( ) . getDetails ( ) [ <int> ] . getDetails ( ) [ <int> ] . getValue ( ) , equalTo ( <float> ) ) ; assertThat ( searchResponse . getHits ( ) . getAt ( i ) . explanation ( ) . getDetails ( ) [ <int> ] . getDetails ( ) [ <int> ] . getValue ( ) , equalTo ( <float> ) ) ; } } } String [ ] scoreModes = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> } ; String [ ] descriptionModes = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> } ; for ( int innerMode = <int> ; innerMode < scoreModes . length ; innerMode + + ) { QueryRescorer innerRescoreQuery = RescoreBuilder . queryRescorer ( QueryBuilders . matchQuery ( <str> , <str> ) . boost ( <float> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) ; if ( ! <str> . equals ( scoreModes [ innerMode ] ) ) { innerRescoreQuery . setScoreMode ( scoreModes [ innerMode ] ) ; } SearchResponse searchResponse = client ( ) . prepareSearch ( ) . setSearchType ( SearchType . DFS_QUERY_THEN_FETCH ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . setRescorer ( innerRescoreQuery , <int> ) . setExplain ( true ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; for ( int j = <int> ; j < <int> ; j + + ) { assertThat ( searchResponse . getHits ( ) . getAt ( j ) . explanation ( ) . getDescription ( ) , equalTo ( descriptionModes [ innerMode ] ) ) ; } for ( int outerMode = <int> ; outerMode < scoreModes . length ; outerMode + + ) { QueryRescorer outerRescoreQuery = RescoreBuilder . queryRescorer ( QueryBuilders . matchQuery ( <str> , <str> ) . boost ( <float> ) ) . setQueryWeight ( <float> ) . setRescoreQueryWeight ( <float> ) ; if ( ! <str> . equals ( scoreModes [ outerMode ] ) ) { outerRescoreQuery . setScoreMode ( scoreModes [ outerMode ] ) ; } searchResponse = client ( ) . prepareSearch ( ) . setSearchType ( SearchType . DFS_QUERY_THEN_FETCH ) . setQuery ( QueryBuilders . matchQuery ( <str> , <str> ) . operator ( Operator . OR ) ) . addRescorer ( innerRescoreQuery , <int> ) . addRescorer ( outerRescoreQuery , <int> ) . setExplain ( true ) . get ( ) ; assertHitCount ( searchResponse , <int> ) ; assertFirstHit ( searchResponse , hasId ( <str> ) ) ; assertSecondHit ( searchResponse , hasId ( <str> ) ) ; assertThirdHit ( searchResponse , hasId ( <str> ) ) ; for ( int j = <int> ; j < <int> ; j + + ) { Explanation explanation = searchResponse . getHits ( ) . getAt ( j ) . explanation ( ) ; assertThat ( explanation . getDescription ( ) , equalTo ( descriptionModes [ outerMode ] ) ) ; assertThat ( explanation . getDetails ( ) [ <int> ] . getDetails ( ) [ <int> ] . getDescription ( ) , equalTo ( descriptionModes [ innerMode ] ) ) ; } } } } public void testScoring ( ) throws Exception { int numDocs = indexRandomNumbers ( <str> ) ; String [ ] scoreModes = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> } ; float primaryWeight = <float> ; float secondaryWeight = <float> ; for ( String scoreMode : scoreModes ) { for ( int i = <int> ; i < numDocs - <int> ; i + + ) { String [ ] intToEnglish = new String [ ] { English . intToEnglish ( i ) , English . intToEnglish ( i + <int> ) , English . intToEnglish ( i + <int> ) , English . intToEnglish ( i + <int> ) } ; QueryRescorer rescoreQuery = RescoreBuilder . queryRescorer ( QueryBuilders . boolQuery ( ) . disableCoord ( true ) . should ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , intToEnglish [ <int> ] ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) . should ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , intToEnglish [ <int> ] ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) . should ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , intToEnglish [ <int> ] ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) ) . setQueryWeight ( primaryWeight ) . setRescoreQueryWeight ( secondaryWeight ) ; if ( ! <str> . equals ( scoreMode ) ) { rescoreQuery . setScoreMode ( scoreMode ) ; } SearchResponse rescored = client ( ) . prepareSearch ( ) . setPreference ( <str> ) . setQuery ( QueryBuilders . boolQuery ( ) . disableCoord ( true ) . should ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , intToEnglish [ <int> ] ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) . should ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , intToEnglish [ <int> ] ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) . should ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , intToEnglish [ <int> ] ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) . should ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , intToEnglish [ <int> ] ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) ) . setFrom ( <int> ) . setSize ( <int> ) . setRescorer ( rescoreQuery , <int> ) . execute ( ) . actionGet ( ) ; assertHitCount ( rescored , <int> ) ; if ( <str> . equals ( scoreMode ) | | <str> . equals ( scoreMode ) ) { assertFirstHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertSecondHit ( rescored , hasId ( String . valueOf ( i ) ) ) ; assertThirdHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight + <float> * secondaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight + <float> * secondaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight + <float> * secondaryWeight ) ) ; } else if ( <str> . equals ( scoreMode ) ) { assertFirstHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertSecondHit ( rescored , hasId ( String . valueOf ( i ) ) ) ; assertThirdHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * secondaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * secondaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight ) ) ; } else if ( <str> . equals ( scoreMode ) ) { assertFirstHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertSecondHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertThirdHit ( rescored , hasId ( String . valueOf ( i ) ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * secondaryWeight ) ) ; } else if ( <str> . equals ( scoreMode ) ) { assertFirstHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertSecondHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertThirdHit ( rescored , hasId ( String . valueOf ( i ) ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( ( <float> * primaryWeight + <float> * secondaryWeight ) / <float> ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( ( <float> * primaryWeight + <float> * secondaryWeight ) / <float> ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( ( <float> * primaryWeight ) / <float> ) ) ; } else if ( <str> . equals ( scoreMode ) ) { assertFirstHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertSecondHit ( rescored , hasId ( String . valueOf ( i ) ) ) ; assertThirdHit ( rescored , hasId ( String . valueOf ( i + <int> ) ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight * <float> * secondaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight * <float> * secondaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight ) ) ; assertThat ( rescored . getHits ( ) . getHits ( ) [ <int> ] . getScore ( ) , equalTo ( <float> * primaryWeight * <float> * secondaryWeight ) ) ; } } } } public void testMultipleRescores ( ) throws Exception { int numDocs = indexRandomNumbers ( <str> , <int> , true ) ; QueryRescorer eightIsGreat = RescoreBuilder . queryRescorer ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , English . intToEnglish ( <int> ) ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) . setScoreMode ( <str> ) ; QueryRescorer sevenIsBetter = RescoreBuilder . queryRescorer ( QueryBuilders . functionScoreQuery ( QueryBuilders . termQuery ( <str> , English . intToEnglish ( <int> ) ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) . setScoreMode ( <str> ) ; SearchRequestBuilder request = client ( ) . prepareSearch ( ) ; request . addRescorer ( eightIsGreat , numDocs ) . addRescorer ( sevenIsBetter , numDocs ) ; SearchResponse response = request . get ( ) ; assertFirstHit ( response , hasId ( <str> ) ) ; assertSecondHit ( response , hasId ( <str> ) ) ; response = request . setSize ( <int> ) . clearRescorers ( ) . addRescorer ( eightIsGreat , numDocs ) . addRescorer ( sevenIsBetter , <int> ) . get ( ) ; assertFirstHit ( response , hasId ( <str> ) ) ; QueryRescorer ninetyIsGood = RescoreBuilder . queryRescorer ( QueryBuilders . functionScoreQuery ( QueryBuilders . queryStringQuery ( <str> ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) . setScoreMode ( <str> ) ; QueryRescorer oneToo = RescoreBuilder . queryRescorer ( QueryBuilders . functionScoreQuery ( QueryBuilders . queryStringQuery ( <str> ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . boostMode ( CombineFunction . REPLACE ) ) . setScoreMode ( <str> ) ; request . clearRescorers ( ) . addRescorer ( ninetyIsGood , numDocs ) . addRescorer ( oneToo , <int> ) ; response = request . setSize ( <int> ) . get ( ) ; assertFirstHit ( response , hasId ( <str> ) ) ; assertFirstHit ( response , hasScore ( <float> ) ) ; assertSecondHit ( response , hasScore ( <float> ) ) ; } private int indexRandomNumbers ( String analyzer ) throws Exception { return indexRandomNumbers ( analyzer , - <int> , true ) ; } private int indexRandomNumbers ( String analyzer , int shards , boolean dummyDocs ) throws Exception { Builder builder = Settings . settingsBuilder ( ) . put ( indexSettings ( ) ) ; if ( shards > <int> ) { builder . put ( SETTING_NUMBER_OF_SHARDS , shards ) ; } assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , analyzer ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) . setSettings ( builder ) ) ; int numDocs = randomIntBetween ( <int> , <int> ) ; IndexRequestBuilder [ ] docs = new IndexRequestBuilder [ numDocs ] ; for ( int i = <int> ; i < numDocs ; i + + ) { docs [ i ] = client ( ) . prepareIndex ( <str> , <str> , String . valueOf ( i ) ) . setSource ( <str> , English . intToEnglish ( i ) ) ; } indexRandom ( true , dummyDocs , docs ) ; ensureGreen ( ) ; return numDocs ; } public void testFromSize ( ) throws Exception { Builder settings = Settings . builder ( ) ; settings . put ( SETTING_NUMBER_OF_SHARDS , <int> ) ; settings . put ( SETTING_NUMBER_OF_REPLICAS , <int> ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( <str> , <str> ) . get ( ) ; } refresh ( ) ; SearchRequestBuilder request = client ( ) . prepareSearch ( ) ; request . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) ; request . setFrom ( <int> ) ; request . setSize ( <int> ) ; request . addRescorer ( RescoreBuilder . queryRescorer ( QueryBuilders . matchAllQuery ( ) ) , <int> ) ; assertEquals ( <int> , request . get ( ) . getHits ( ) . hits ( ) . length ) ; } } 

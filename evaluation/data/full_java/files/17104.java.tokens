package com . badlogic . gdx . physics . box2d . joints ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . JointDef ; public class DistanceJointDef extends JointDef { public DistanceJointDef ( ) { type = JointType . DistanceJoint ; } public void initialize ( Body bodyA , Body bodyB , Vector2 anchorA , Vector2 anchorB ) { this . bodyA = bodyA ; this . bodyB = bodyB ; this . localAnchorA . set ( bodyA . getLocalPoint ( anchorA ) ) ; this . localAnchorB . set ( bodyB . getLocalPoint ( anchorB ) ) ; this . length = anchorA . dst ( anchorB ) ; } public final Vector2 localAnchorA = new Vector2 ( ) ; public final Vector2 localAnchorB = new Vector2 ( ) ; public float length = <int> ; public float frequencyHz = <int> ; public float dampingRatio = <int> ; public org . jbox2d . dynamics . joints . DistanceJointDef toJBox2d ( ) { org . jbox2d . dynamics . joints . DistanceJointDef fd = new org . jbox2d . dynamics . joints . DistanceJointDef ( ) ; fd . bodyA = bodyA . body ; fd . bodyB = bodyB . body ; fd . collideConnected = collideConnected ; fd . dampingRatio = dampingRatio ; fd . frequencyHz = frequencyHz ; fd . length = length ; fd . localAnchorA . set ( localAnchorA . x , localAnchorA . y ) ; fd . localAnchorB . set ( localAnchorB . x , localAnchorB . y ) ; fd . type = org . jbox2d . dynamics . joints . JointType . DISTANCE ; return fd ; } } 

package org . elasticsearch . rest . action . cat ; import org . elasticsearch . action . admin . cluster . node . info . NodeInfo ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoRequest ; import org . elasticsearch . action . admin . cluster . node . info . NodesInfoResponse ; import org . elasticsearch . plugins . PluginInfo ; import org . elasticsearch . action . admin . cluster . state . ClusterStateRequest ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . Table ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestActionListener ; import org . elasticsearch . rest . action . support . RestResponseListener ; import org . elasticsearch . rest . action . support . RestTable ; import static org . elasticsearch . rest . RestRequest . Method . GET ; public class RestPluginsAction extends AbstractCatAction { @Inject public RestPluginsAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; } @Override protected void documentation ( StringBuilder sb ) { sb . append ( <str> ) ; } @Override public void doRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final ClusterStateRequest clusterStateRequest = new ClusterStateRequest ( ) ; clusterStateRequest . clear ( ) . nodes ( true ) ; clusterStateRequest . local ( request . paramAsBoolean ( <str> , clusterStateRequest . local ( ) ) ) ; clusterStateRequest . masterNodeTimeout ( request . paramAsTime ( <str> , clusterStateRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . cluster ( ) . state ( clusterStateRequest , new RestActionListener < ClusterStateResponse > ( channel ) { @Override public void processResponse ( final ClusterStateResponse clusterStateResponse ) throws Exception { NodesInfoRequest nodesInfoRequest = new NodesInfoRequest ( ) ; nodesInfoRequest . clear ( ) . plugins ( true ) ; client . admin ( ) . cluster ( ) . nodesInfo ( nodesInfoRequest , new RestResponseListener < NodesInfoResponse > ( channel ) { @Override public RestResponse buildResponse ( final NodesInfoResponse nodesInfoResponse ) throws Exception { return RestTable . buildResponse ( buildTable ( request , clusterStateResponse , nodesInfoResponse ) , channel ) ; } } ) ; } } ) ; } @Override protected Table getTableWithHeader ( final RestRequest request ) { Table table = new Table ( ) ; table . startHeaders ( ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . endHeaders ( ) ; return table ; } private Table buildTable ( RestRequest req , ClusterStateResponse state , NodesInfoResponse nodesInfo ) { DiscoveryNodes nodes = state . getState ( ) . nodes ( ) ; Table table = getTableWithHeader ( req ) ; for ( DiscoveryNode node : nodes ) { NodeInfo info = nodesInfo . getNodesMap ( ) . get ( node . id ( ) ) ; for ( PluginInfo pluginInfo : info . getPlugins ( ) . getPluginInfos ( ) ) { table . startRow ( ) ; table . addCell ( node . id ( ) ) ; table . addCell ( node . name ( ) ) ; table . addCell ( pluginInfo . getName ( ) ) ; table . addCell ( pluginInfo . getVersion ( ) ) ; String type ; if ( pluginInfo . isSite ( ) ) { if ( pluginInfo . isJvm ( ) ) { type = <str> ; } else { type = <str> ; } } else { if ( pluginInfo . isJvm ( ) ) { type = <str> ; } else { type = <str> ; } } table . addCell ( type ) ; table . addCell ( pluginInfo . getUrl ( ) ) ; table . addCell ( pluginInfo . getDescription ( ) ) ; table . endRow ( ) ; } } return table ; } } 

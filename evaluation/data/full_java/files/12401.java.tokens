package org . gradle . api . internal . project . taskfactory ; import org . gradle . api . file . FileCollection ; import org . gradle . api . internal . TaskInternal ; import org . gradle . api . tasks . TaskInputs ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JMock ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Test ; import org . junit . runner . RunWith ; import static org . gradle . util . GUtil . map ; import static org . hamcrest . Matchers . sameInstance ; import static org . junit . Assert . assertThat ; @RunWith ( JMock . class ) public class DependencyAutoWireTaskFactoryTest { private final JUnit4Mockery context = new JUnit4Mockery ( ) ; private final ITaskFactory delegate = context . mock ( ITaskFactory . class ) ; private final DependencyAutoWireTaskFactory factory = new DependencyAutoWireTaskFactory ( delegate ) ; @Test public void addsDependencyOnInputFiles ( ) { final TaskInternal task = context . mock ( TaskInternal . class ) ; final TaskInputs taskInputs = context . mock ( TaskInputs . class ) ; final FileCollection inputFiles = context . mock ( FileCollection . class ) ; context . checking ( new Expectations ( ) { { one ( delegate ) . createTask ( map ( ) ) ; will ( returnValue ( task ) ) ; allowing ( task ) . getInputs ( ) ; will ( returnValue ( taskInputs ) ) ; allowing ( taskInputs ) . getFiles ( ) ; will ( returnValue ( inputFiles ) ) ; one ( task ) . dependsOn ( inputFiles ) ; } } ) ; assertThat ( factory . createTask ( map ( ) ) , sameInstance ( task ) ) ; } } 

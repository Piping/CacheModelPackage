package org . gradle . logging . internal ; import org . gradle . api . logging . LogLevel ; import org . gradle . internal . TimeProvider ; import java . util . ArrayList ; import java . util . List ; public class LoggingBackedStyledTextOutput extends AbstractLineChoppingStyledTextOutput { private final OutputEventListener listener ; private final String category ; private final LogLevel logLevel ; private final TimeProvider timeProvider ; private final StringBuilder buffer = new StringBuilder ( ) ; private List < StyledTextOutputEvent . Span > spans = new ArrayList < StyledTextOutputEvent . Span > ( ) ; private Style style = Style . Normal ; public LoggingBackedStyledTextOutput ( OutputEventListener listener , String category , LogLevel logLevel , TimeProvider timeProvider ) { this . listener = listener ; this . category = category ; this . logLevel = logLevel ; this . timeProvider = timeProvider ; } protected void doStyleChange ( Style style ) { if ( buffer . length ( ) > <int> ) { spans . add ( new StyledTextOutputEvent . Span ( this . style , buffer . toString ( ) ) ) ; buffer . setLength ( <int> ) ; } this . style = style ; } @Override protected void doLineText ( CharSequence text , boolean terminatesLine ) { buffer . append ( text ) ; if ( terminatesLine ) { spans . add ( new StyledTextOutputEvent . Span ( this . style , buffer . toString ( ) ) ) ; buffer . setLength ( <int> ) ; listener . onOutput ( new StyledTextOutputEvent ( timeProvider . getCurrentTime ( ) , category , logLevel , spans ) ) ; spans = new ArrayList < StyledTextOutputEvent . Span > ( ) ; } } } 

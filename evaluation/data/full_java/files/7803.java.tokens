package org . elasticsearch . cluster ; import org . elasticsearch . Version ; import org . elasticsearch . action . admin . cluster . node . stats . NodeStats ; import org . elasticsearch . action . admin . indices . stats . CommonStats ; import org . elasticsearch . action . admin . indices . stats . ShardStats ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . ShardRoutingHelper ; import org . elasticsearch . cluster . routing . UnassignedInfo ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . index . shard . ShardPath ; import org . elasticsearch . index . store . StoreStats ; import org . elasticsearch . monitor . fs . FsInfo ; import org . elasticsearch . test . ESTestCase ; import java . nio . file . Path ; import static org . hamcrest . Matchers . equalTo ; public class DiskUsageTests extends ESTestCase { public void testDiskUsageCalc ( ) { DiskUsage du = new DiskUsage ( <str> , <str> , <str> , <int> , <int> ) ; assertThat ( du . getFreeDiskAsPercentage ( ) , equalTo ( <float> ) ) ; assertThat ( du . getUsedDiskAsPercentage ( ) , equalTo ( <float> - <float> ) ) ; assertThat ( du . getFreeBytes ( ) , equalTo ( <int> ) ) ; assertThat ( du . getUsedBytes ( ) , equalTo ( <int> ) ) ; assertThat ( du . getTotalBytes ( ) , equalTo ( <int> ) ) ; DiskUsage du2 = new DiskUsage ( <str> , <str> , <str> , <int> , <int> ) ; assertThat ( du2 . getFreeDiskAsPercentage ( ) , equalTo ( <float> ) ) ; assertThat ( du2 . getFreeBytes ( ) , equalTo ( <int> ) ) ; assertThat ( du2 . getUsedBytes ( ) , equalTo ( - <int> ) ) ; assertThat ( du2 . getTotalBytes ( ) , equalTo ( <int> ) ) ; DiskUsage du3 = new DiskUsage ( <str> , <str> , <str> , - <int> , - <int> ) ; assertThat ( du3 . getFreeDiskAsPercentage ( ) , equalTo ( <float> ) ) ; assertThat ( du3 . getFreeBytes ( ) , equalTo ( - <int> ) ) ; assertThat ( du3 . getUsedBytes ( ) , equalTo ( <int> L ) ) ; assertThat ( du3 . getTotalBytes ( ) , equalTo ( - <int> ) ) ; DiskUsage du4 = new DiskUsage ( <str> , <str> , <str> , <int> , <int> ) ; assertThat ( du4 . getFreeDiskAsPercentage ( ) , equalTo ( <float> ) ) ; assertThat ( du4 . getFreeBytes ( ) , equalTo ( <int> L ) ) ; assertThat ( du4 . getUsedBytes ( ) , equalTo ( <int> L ) ) ; assertThat ( du4 . getTotalBytes ( ) , equalTo ( <int> L ) ) ; } public void testRandomDiskUsage ( ) { int iters = scaledRandomIntBetween ( <int> , <int> ) ; for ( int i = <int> ; i < iters ; i + + ) { long total = between ( Integer . MIN_VALUE , Integer . MAX_VALUE ) ; long free = between ( Integer . MIN_VALUE , Integer . MAX_VALUE ) ; DiskUsage du = new DiskUsage ( <str> , <str> , <str> , total , free ) ; if ( total = = <int> ) { assertThat ( du . getFreeBytes ( ) , equalTo ( free ) ) ; assertThat ( du . getTotalBytes ( ) , equalTo ( <int> L ) ) ; assertThat ( du . getUsedBytes ( ) , equalTo ( - free ) ) ; assertThat ( du . getFreeDiskAsPercentage ( ) , equalTo ( <float> ) ) ; assertThat ( du . getUsedDiskAsPercentage ( ) , equalTo ( <float> ) ) ; } else { assertThat ( du . getFreeBytes ( ) , equalTo ( free ) ) ; assertThat ( du . getTotalBytes ( ) , equalTo ( total ) ) ; assertThat ( du . getUsedBytes ( ) , equalTo ( total - free ) ) ; assertThat ( du . getFreeDiskAsPercentage ( ) , equalTo ( <float> * ( ( double ) free / total ) ) ) ; assertThat ( du . getUsedDiskAsPercentage ( ) , equalTo ( <float> - ( <float> * ( ( double ) free / total ) ) ) ) ; } } } public void testFillShardLevelInfo ( ) { ShardRouting test_0 = ShardRouting . newUnassigned ( <str> , <int> , null , false , new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , <str> ) ) ; ShardRoutingHelper . initialize ( test_0 , <str> ) ; ShardRoutingHelper . moveToStarted ( test_0 ) ; Path test0Path = createTempDir ( ) . resolve ( <str> ) . resolve ( <str> ) . resolve ( <str> ) ; CommonStats commonStats0 = new CommonStats ( ) ; commonStats0 . store = new StoreStats ( <int> , <int> ) ; ShardRouting test_1 = ShardRouting . newUnassigned ( <str> , <int> , null , false , new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , <str> ) ) ; ShardRoutingHelper . initialize ( test_1 , <str> ) ; ShardRoutingHelper . moveToStarted ( test_1 ) ; Path test1Path = createTempDir ( ) . resolve ( <str> ) . resolve ( <str> ) . resolve ( <str> ) ; CommonStats commonStats1 = new CommonStats ( ) ; commonStats1 . store = new StoreStats ( <int> , <int> ) ; ShardStats [ ] stats = new ShardStats [ ] { new ShardStats ( test_0 , new ShardPath ( false , test0Path , test0Path , <str> , test_0 . shardId ( ) ) , commonStats0 , null ) , new ShardStats ( test_1 , new ShardPath ( false , test1Path , test1Path , <str> , test_1 . shardId ( ) ) , commonStats1 , null ) } ; ImmutableOpenMap . Builder < String , Long > shardSizes = ImmutableOpenMap . builder ( ) ; ImmutableOpenMap . Builder < ShardRouting , String > routingToPath = ImmutableOpenMap . builder ( ) ; InternalClusterInfoService . buildShardLevelInfo ( logger , stats , shardSizes , routingToPath ) ; assertEquals ( <int> , shardSizes . size ( ) ) ; assertTrue ( shardSizes . containsKey ( ClusterInfo . shardIdentifierFromRouting ( test_0 ) ) ) ; assertTrue ( shardSizes . containsKey ( ClusterInfo . shardIdentifierFromRouting ( test_1 ) ) ) ; assertEquals ( <int> , shardSizes . get ( ClusterInfo . shardIdentifierFromRouting ( test_0 ) ) . longValue ( ) ) ; assertEquals ( <int> , shardSizes . get ( ClusterInfo . shardIdentifierFromRouting ( test_1 ) ) . longValue ( ) ) ; assertEquals ( <int> , routingToPath . size ( ) ) ; assertTrue ( routingToPath . containsKey ( test_0 ) ) ; assertTrue ( routingToPath . containsKey ( test_1 ) ) ; assertEquals ( test0Path . getParent ( ) . getParent ( ) . getParent ( ) . toAbsolutePath ( ) . toString ( ) , routingToPath . get ( test_0 ) ) ; assertEquals ( test1Path . getParent ( ) . getParent ( ) . getParent ( ) . toAbsolutePath ( ) . toString ( ) , routingToPath . get ( test_1 ) ) ; } public void testFillDiskUsage ( ) { ImmutableOpenMap . Builder < String , DiskUsage > newLeastAvaiableUsages = ImmutableOpenMap . builder ( ) ; ImmutableOpenMap . Builder < String , DiskUsage > newMostAvaiableUsages = ImmutableOpenMap . builder ( ) ; FsInfo . Path [ ] node1FSInfo = new FsInfo . Path [ ] { new FsInfo . Path ( <str> , <str> , <int> , <int> , <int> ) , new FsInfo . Path ( <str> , <str> , <int> , <int> , <int> ) , new FsInfo . Path ( <str> , <str> , <int> , <int> , <int> ) , } ; FsInfo . Path [ ] node2FSInfo = new FsInfo . Path [ ] { new FsInfo . Path ( <str> , <str> , <int> , <int> , <int> ) , } ; FsInfo . Path [ ] node3FSInfo = new FsInfo . Path [ ] { new FsInfo . Path ( <str> , <str> , <int> , <int> , <int> ) , new FsInfo . Path ( <str> , <str> , <int> , <int> , <int> ) , } ; NodeStats [ ] nodeStats = new NodeStats [ ] { new NodeStats ( new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) , <int> , null , null , null , null , null , new FsInfo ( <int> , node1FSInfo ) , null , null , null , null , null ) , new NodeStats ( new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) , <int> , null , null , null , null , null , new FsInfo ( <int> , node2FSInfo ) , null , null , null , null , null ) , new NodeStats ( new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) , <int> , null , null , null , null , null , new FsInfo ( <int> , node3FSInfo ) , null , null , null , null , null ) } ; InternalClusterInfoService . fillDiskUsagePerNode ( logger , nodeStats , newLeastAvaiableUsages , newMostAvaiableUsages ) ; DiskUsage leastNode_1 = newLeastAvaiableUsages . get ( <str> ) ; DiskUsage mostNode_1 = newMostAvaiableUsages . get ( <str> ) ; assertDiskUsage ( mostNode_1 , node1FSInfo [ <int> ] ) ; assertDiskUsage ( leastNode_1 , node1FSInfo [ <int> ] ) ; DiskUsage leastNode_2 = newLeastAvaiableUsages . get ( <str> ) ; DiskUsage mostNode_2 = newMostAvaiableUsages . get ( <str> ) ; assertDiskUsage ( leastNode_2 , node2FSInfo [ <int> ] ) ; assertDiskUsage ( mostNode_2 , node2FSInfo [ <int> ] ) ; DiskUsage leastNode_3 = newLeastAvaiableUsages . get ( <str> ) ; DiskUsage mostNode_3 = newMostAvaiableUsages . get ( <str> ) ; assertDiskUsage ( leastNode_3 , node3FSInfo [ <int> ] ) ; assertDiskUsage ( mostNode_3 , node3FSInfo [ <int> ] ) ; } private void assertDiskUsage ( DiskUsage usage , FsInfo . Path path ) { assertEquals ( usage . toString ( ) , usage . getPath ( ) , path . getPath ( ) ) ; assertEquals ( usage . toString ( ) , usage . getTotalBytes ( ) , path . getTotal ( ) . bytes ( ) ) ; assertEquals ( usage . toString ( ) , usage . getFreeBytes ( ) , path . getAvailable ( ) . bytes ( ) ) ; } } 

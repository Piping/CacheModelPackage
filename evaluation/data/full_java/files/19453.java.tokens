package io . netty . handler . codec . mqtt ; import io . netty . handler . codec . DecoderException ; final class MqttCodecUtil { private static final char [ ] TOPIC_WILDCARDS = { <str> , <str> } ; private static final int MIN_CLIENT_ID_LENGTH = <int> ; private static final int MAX_CLIENT_ID_LENGTH = <int> ; static boolean isValidPublishTopicName ( String topicName ) { for ( char c : TOPIC_WILDCARDS ) { if ( topicName . indexOf ( c ) > = <int> ) { return false ; } } return true ; } static boolean isValidMessageId ( int messageId ) { return messageId ! = <int> ; } static boolean isValidClientId ( MqttVersion mqttVersion , String clientId ) { if ( mqttVersion = = MqttVersion . MQTT_3_1 ) { return clientId ! = null & & clientId . length ( ) > = MIN_CLIENT_ID_LENGTH & & clientId . length ( ) < = MAX_CLIENT_ID_LENGTH ; } else if ( mqttVersion = = MqttVersion . MQTT_3_1_1 ) { return clientId ! = null ; } throw new IllegalArgumentException ( mqttVersion + <str> ) ; } static MqttFixedHeader validateFixedHeader ( MqttFixedHeader mqttFixedHeader ) { switch ( mqttFixedHeader . messageType ( ) ) { case PUBREL : case SUBSCRIBE : case UNSUBSCRIBE : if ( mqttFixedHeader . qosLevel ( ) ! = MqttQoS . AT_LEAST_ONCE ) { throw new DecoderException ( mqttFixedHeader . messageType ( ) . name ( ) + <str> ) ; } default : return mqttFixedHeader ; } } static MqttFixedHeader resetUnusedFields ( MqttFixedHeader mqttFixedHeader ) { switch ( mqttFixedHeader . messageType ( ) ) { case CONNECT : case CONNACK : case PUBACK : case PUBREC : case PUBCOMP : case SUBACK : case UNSUBACK : case PINGREQ : case PINGRESP : case DISCONNECT : if ( mqttFixedHeader . isDup ( ) | | mqttFixedHeader . qosLevel ( ) ! = MqttQoS . AT_MOST_ONCE | | mqttFixedHeader . isRetain ( ) ) { return new MqttFixedHeader ( mqttFixedHeader . messageType ( ) , false , MqttQoS . AT_MOST_ONCE , false , mqttFixedHeader . remainingLength ( ) ) ; } return mqttFixedHeader ; case PUBREL : case SUBSCRIBE : case UNSUBSCRIBE : if ( mqttFixedHeader . isRetain ( ) ) { return new MqttFixedHeader ( mqttFixedHeader . messageType ( ) , mqttFixedHeader . isDup ( ) , mqttFixedHeader . qosLevel ( ) , false , mqttFixedHeader . remainingLength ( ) ) ; } return mqttFixedHeader ; default : return mqttFixedHeader ; } } private MqttCodecUtil ( ) { } } 

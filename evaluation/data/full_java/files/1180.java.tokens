package org . apache . cassandra . transport . messages ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import io . netty . buffer . ByteBuf ; import org . apache . cassandra . cql3 . QueryProcessor ; import org . apache . cassandra . service . QueryState ; import org . apache . cassandra . transport . FrameCompressor ; import org . apache . cassandra . transport . Message ; public class OptionsMessage extends Message . Request { public static final Message . Codec < OptionsMessage > codec = new Message . Codec < OptionsMessage > ( ) { public OptionsMessage decode ( ByteBuf body , int version ) { return new OptionsMessage ( ) ; } public void encode ( OptionsMessage msg , ByteBuf dest , int version ) { } public int encodedSize ( OptionsMessage msg , int version ) { return <int> ; } } ; public OptionsMessage ( ) { super ( Message . Type . OPTIONS ) ; } public Message . Response execute ( QueryState state ) { List < String > cqlVersions = new ArrayList < String > ( ) ; cqlVersions . add ( QueryProcessor . CQL_VERSION . toString ( ) ) ; List < String > compressions = new ArrayList < String > ( ) ; if ( FrameCompressor . SnappyCompressor . instance ! = null ) compressions . add ( <str> ) ; compressions . add ( <str> ) ; Map < String , List < String > > supported = new HashMap < String , List < String > > ( ) ; supported . put ( StartupMessage . CQL_VERSION , cqlVersions ) ; supported . put ( StartupMessage . COMPRESSION , compressions ) ; return new SupportedMessage ( supported ) ; } @Override public String toString ( ) { return <str> ; } } 

package org . elasticsearch . bootstrap ; import com . sun . jna . Native ; import com . sun . jna . NativeLong ; import com . sun . jna . Structure ; import org . apache . lucene . util . Constants ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import java . util . Arrays ; import java . util . List ; final class JNACLibrary { private static final ESLogger logger = Loggers . getLogger ( JNACLibrary . class ) ; public static final int MCL_CURRENT = <int> ; public static final int ENOMEM = <int> ; public static final int RLIMIT_MEMLOCK = Constants . MAC_OS_X ? <int> : <int> ; public static final long RLIM_INFINITY = Constants . MAC_OS_X ? <int> : - <int> ; static { try { Native . register ( <str> ) ; } catch ( UnsatisfiedLinkError e ) { logger . warn ( <str> , e ) ; } } static native int mlockall ( int flags ) ; static native int geteuid ( ) ; public static final class Rlimit extends Structure implements Structure . ByReference { public NativeLong rlim_cur = new NativeLong ( <int> ) ; public NativeLong rlim_max = new NativeLong ( <int> ) ; @Override protected List < String > getFieldOrder ( ) { return Arrays . asList ( new String [ ] { <str> , <str> } ) ; } } static native int getrlimit ( int resource , Rlimit rlimit ) ; static native int setrlimit ( int resource , Rlimit rlimit ) ; static native String strerror ( int errno ) ; private JNACLibrary ( ) { } } 

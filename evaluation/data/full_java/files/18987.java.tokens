package io . netty . handler . codec . compression ; import io . netty . channel . embedded . EmbeddedChannel ; import org . junit . Test ; import java . util . Random ; public class SnappyIntegrationTest extends AbstractIntegrationTest { private static final int RANDOM_RUNS = <int> ; @Override protected EmbeddedChannel createEncoder ( ) { return new EmbeddedChannel ( new SnappyFrameEncoder ( ) ) ; } @Override protected EmbeddedChannel createDecoder ( ) { return new EmbeddedChannel ( new SnappyFrameDecoder ( ) ) ; } @Test public void test1002 ( ) throws Throwable { final byte [ ] data = { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , - <int> , <int> , - <int> , - <int> , <int> , <int> , <int> , - <int> , <int> , - <int> , <int> , - <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , - <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , - <int> , - <int> , <int> , - <int> , - <int> , - <int> , <int> , <int> , - <int> , - <int> , <int> , <int> , - <int> , <int> , <int> , - <int> , - <int> , <int> , - <int> , <int> , - <int> , <int> , <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , - <int> , - <int> , <int> , - <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , - <int> , - <int> , - <int> , <int> , - <int> , - <int> , <int> , <int> , - <int> , <int> , <int> , - <int> , <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , - <int> , - <int> , <int> , <int> , - <int> , <int> , - <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , - <int> , <int> , - <int> , <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> } ; testIdentity ( data ) ; } @Test public void test5323211032315942961 ( ) { testWithSeed ( <int> ) ; } @Test public void test7088170877360183401 ( ) { testWithSeed ( <int> ) ; } @Test public void testRandom ( ) throws Throwable { for ( int i = <int> ; i < RANDOM_RUNS ; i + + ) { long seed = rand . nextLong ( ) ; if ( seed < <int> ) { continue ; } try { testWithSeed ( seed ) ; } catch ( Throwable t ) { System . out . println ( <str> + seed + <str> ) ; printSeedAsTest ( seed ) ; throw t ; } } } private void testWithSeed ( long seed ) { byte [ ] data = new byte [ <int> * <int> ] ; new Random ( seed ) . nextBytes ( data ) ; testIdentity ( data ) ; } private static void printSeedAsTest ( long l ) { System . out . println ( <str> ) ; System . out . println ( <str> ) ; System . out . println ( <str> + l + <str> ) ; System . out . println ( <str> + l + <str> ) ; System . out . println ( <str> ) ; } } 

package com . google . common . primitives ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . testing . ListTestSuiteBuilder ; import com . google . common . collect . testing . SampleElements ; import com . google . common . collect . testing . TestListGenerator ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import java . util . List ; @GwtCompatible ( emulated = true ) public class ShortArrayAsListTest extends TestCase { private static List < Short > asList ( Short [ ] values ) { short [ ] temp = new short [ values . length ] ; for ( short i = <int> ; i < values . length ; i + + ) { temp [ i ] = checkNotNull ( values [ i ] ) ; } return Shorts . asList ( temp ) ; } @GwtIncompatible ( <str> ) public static Test suite ( ) { List < ListTestSuiteBuilder < Short > > builders = ImmutableList . of ( ListTestSuiteBuilder . using ( new ShortsAsListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new ShortsAsListHeadSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new ShortsAsListTailSubListGenerator ( ) ) . named ( <str> ) , ListTestSuiteBuilder . using ( new ShortsAsListMiddleSubListGenerator ( ) ) . named ( <str> ) ) ; TestSuite suite = new TestSuite ( ) ; for ( ListTestSuiteBuilder < Short > builder : builders ) { suite . addTest ( builder . withFeatures ( CollectionSize . ONE , CollectionSize . SEVERAL , CollectionFeature . RESTRICTS_ELEMENTS , ListFeature . SUPPORTS_SET ) . createTestSuite ( ) ) ; } return suite ; } public static final class ShortsAsListGenerator extends TestShortListGenerator { @Override protected List < Short > create ( Short [ ] elements ) { return asList ( elements ) ; } } public static final class ShortsAsListHeadSubListGenerator extends TestShortListGenerator { @Override protected List < Short > create ( Short [ ] elements ) { Short [ ] suffix = { Short . MIN_VALUE , Short . MAX_VALUE } ; Short [ ] all = concat ( elements , suffix ) ; return asList ( all ) . subList ( <int> , elements . length ) ; } } public static final class ShortsAsListTailSubListGenerator extends TestShortListGenerator { @Override protected List < Short > create ( Short [ ] elements ) { Short [ ] prefix = { ( short ) <int> , ( short ) <int> } ; Short [ ] all = concat ( prefix , elements ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } public static final class ShortsAsListMiddleSubListGenerator extends TestShortListGenerator { @Override protected List < Short > create ( Short [ ] elements ) { Short [ ] prefix = { Short . MIN_VALUE , Short . MAX_VALUE } ; Short [ ] suffix = { ( short ) <int> , ( short ) <int> } ; Short [ ] all = concat ( concat ( prefix , elements ) , suffix ) ; return asList ( all ) . subList ( <int> , elements . length + <int> ) ; } } private static Short [ ] concat ( Short [ ] left , Short [ ] right ) { Short [ ] result = new Short [ left . length + right . length ] ; System . arraycopy ( left , <int> , result , <int> , left . length ) ; System . arraycopy ( right , <int> , result , left . length , right . length ) ; return result ; } public static abstract class TestShortListGenerator implements TestListGenerator < Short > { @Override public SampleElements < Short > samples ( ) { return new SampleShorts ( ) ; } @Override public List < Short > create ( Object . . . elements ) { Short [ ] array = new Short [ elements . length ] ; short i = <int> ; for ( Object e : elements ) { array [ i + + ] = ( Short ) e ; } return create ( array ) ; } protected abstract List < Short > create ( Short [ ] elements ) ; @Override public Short [ ] createArray ( int length ) { return new Short [ length ] ; } @Override public List < Short > order ( List < Short > insertionOrder ) { return insertionOrder ; } } public static class SampleShorts extends SampleElements < Short > { public SampleShorts ( ) { super ( ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> , ( short ) <int> ) ; } } } 

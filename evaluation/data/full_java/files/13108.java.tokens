package org . gradle . sample ; import org . gradle . tooling . * ; import org . gradle . tooling . model . * ; import org . gradle . tooling . model . idea . * ; import java . io . File ; public class Main { public static void main ( String [ ] args ) { GradleConnector connector = GradleConnector . newConnector ( ) ; if ( args . length > <int> ) { connector . useInstallation ( new File ( args [ <int> ] ) ) ; if ( args . length > <int> ) { connector . useGradleUserHomeDir ( new File ( args [ <int> ] ) ) ; } } connector . forProjectDirectory ( new File ( <str> ) ) ; ProjectConnection connection = connector . connect ( ) ; try { IdeaProject project = connection . getModel ( IdeaProject . class ) ; System . out . println ( <str> ) ; System . out . println ( <str> ) ; System . out . println ( project ) ; System . out . println ( <str> ) ; System . out . println ( <str> ) ; for ( IdeaModule module : project . getModules ( ) ) { System . out . println ( <str> + module ) ; System . out . println ( <str> ) ; System . out . println ( <str> ) ; for ( GradleTask task : module . getGradleProject ( ) . getTasks ( ) ) { System . out . println ( <str> + task . getName ( ) ) ; } for ( IdeaContentRoot root : module . getContentRoots ( ) ) { System . out . println ( <str> + root . getRootDirectory ( ) ) ; System . out . println ( <str> ) ; for ( IdeaSourceDirectory dir : root . getSourceDirectories ( ) ) { System . out . println ( <str> + dir ) ; } System . out . println ( <str> ) ; for ( IdeaSourceDirectory dir : root . getTestDirectories ( ) ) { System . out . println ( <str> + dir ) ; } System . out . println ( <str> ) ; for ( File dir : root . getExcludeDirectories ( ) ) { System . out . println ( <str> + dir ) ; } } System . out . println ( <str> ) ; for ( IdeaDependency dependency : module . getDependencies ( ) ) { System . out . println ( <str> + dependency ) ; } } } finally { connection . close ( ) ; } } } 

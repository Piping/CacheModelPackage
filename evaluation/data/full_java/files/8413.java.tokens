package org . elasticsearch . rest . util ; import org . elasticsearch . rest . support . RestUtils ; import org . elasticsearch . test . ESTestCase ; import java . util . HashMap ; import java . util . Locale ; import java . util . Map ; import java . util . regex . Pattern ; import static org . hamcrest . Matchers . * ; public class RestUtilsTests extends ESTestCase { public void testDecodeQueryString ( ) { Map < String , String > params = new HashMap < > ( ) ; String uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . length ( ) , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , - <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; } public void testDecodeQueryStringEdgeCases ( ) { Map < String , String > params = new HashMap < > ( ) ; String uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; params . clear ( ) ; uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; } public void testCorsSettingIsARegex ( ) { assertCorsSettingRegex ( <str> , Pattern . compile ( <str> ) ) ; assertCorsSettingRegex ( <str> , Pattern . compile ( <str> ) ) ; assertCorsSettingRegex ( <str> , Pattern . compile ( <str> ) ) ; assertCorsSettingRegexMatches ( <str> , true , <str> , <str> , <str> , <str> ) ; assertCorsSettingRegexMatches ( <str> , false , <str> , <str> , <str> ) ; assertCorsSettingRegexIsNull ( <str> ) ; assertCorsSettingRegexIsNull ( <str> ) ; assertCorsSettingRegexIsNull ( <str> ) ; assertCorsSettingRegexIsNull ( <str> ) ; assertCorsSettingRegexIsNull ( <str> ) ; } public void testCrazyURL ( ) { Map < String , String > params = new HashMap < > ( ) ; String uri = <str> ; RestUtils . decodeQueryString ( uri , uri . indexOf ( <str> ) + <int> , params ) ; assertThat ( params . get ( <str> ) , equalTo ( <str> ) ) ; assertThat ( params . size ( ) , equalTo ( <int> ) ) ; } private void assertCorsSettingRegexIsNull ( String settingsValue ) { assertThat ( RestUtils . checkCorsSettingForRegex ( settingsValue ) , is ( nullValue ( ) ) ) ; } private void assertCorsSettingRegex ( String settingsValue , Pattern pattern ) { assertThat ( RestUtils . checkCorsSettingForRegex ( settingsValue ) . toString ( ) , is ( pattern . toString ( ) ) ) ; } private void assertCorsSettingRegexMatches ( String settingsValue , boolean expectMatch , String . . . candidates ) { Pattern pattern = RestUtils . checkCorsSettingForRegex ( settingsValue ) ; for ( String candidate : candidates ) { assertThat ( String . format ( Locale . ROOT , <str> , settingsValue , candidate , expectMatch ) , pattern . matcher ( candidate ) . matches ( ) , is ( expectMatch ) ) ; } } } 

package com . google . common . collect . testing ; import com . google . common . collect . testing . features . CollectionFeature ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestResult ; import java . util . Collections ; import java . util . List ; public class FeatureSpecificTestSuiteBuilderTest extends TestCase { static boolean testWasRun ; @Override protected void setUp ( ) throws Exception { super . setUp ( ) ; testWasRun = false ; } public static final class MyAbstractTester extends AbstractTester < Void > { public void testNothing ( ) { testWasRun = true ; } } private static final class MyTestSuiteBuilder extends FeatureSpecificTestSuiteBuilder < MyTestSuiteBuilder , String > { @Override protected List < Class < ? extends AbstractTester > > getTesters ( ) { return Collections . < Class < ? extends AbstractTester > > singletonList ( MyAbstractTester . class ) ; } } public void testLifecycle ( ) { final boolean setUp [ ] = { false } ; Runnable setUpRunnable = new Runnable ( ) { @Override public void run ( ) { setUp [ <int> ] = true ; } } ; final boolean tearDown [ ] = { false } ; Runnable tearDownRunnable = new Runnable ( ) { @Override public void run ( ) { tearDown [ <int> ] = true ; } } ; MyTestSuiteBuilder builder = new MyTestSuiteBuilder ( ) ; Test test = builder . usingGenerator ( <str> ) . named ( <str> ) . withFeatures ( CollectionFeature . NONE ) . withSetUp ( setUpRunnable ) . withTearDown ( tearDownRunnable ) . createTestSuite ( ) ; TestResult result = new TestResult ( ) ; test . run ( result ) ; assertTrue ( testWasRun ) ; assertTrue ( setUp [ <int> ] ) ; assertTrue ( tearDown [ <int> ] ) ; } } 

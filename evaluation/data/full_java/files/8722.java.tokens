package org . elasticsearch . cloud . azure ; import com . microsoft . windowsazure . management . compute . models . DeploymentSlot ; import com . microsoft . windowsazure . management . compute . models . DeploymentStatus ; import com . microsoft . windowsazure . management . compute . models . HostedServiceGetDetailedResponse ; import com . microsoft . windowsazure . management . compute . models . InstanceEndpoint ; import com . microsoft . windowsazure . management . compute . models . RoleInstance ; import org . elasticsearch . cloud . azure . management . AzureComputeServiceAbstractMock ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . network . NetworkService ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . plugins . Plugin ; import java . net . InetAddress ; import java . util . ArrayList ; import java . util . Arrays ; import static org . elasticsearch . common . util . CollectionUtils . newSingletonArrayList ; public class AzureComputeServiceTwoNodesMock extends AzureComputeServiceAbstractMock { public static class TestPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( AzureDiscoveryModule azureDiscoveryModule ) { azureDiscoveryModule . computeServiceImpl = AzureComputeServiceTwoNodesMock . class ; } } NetworkService networkService ; @Inject protected AzureComputeServiceTwoNodesMock ( Settings settings , NetworkService networkService ) { super ( settings ) ; this . networkService = networkService ; } @Override public HostedServiceGetDetailedResponse getServiceDetails ( ) { HostedServiceGetDetailedResponse response = new HostedServiceGetDetailedResponse ( ) ; HostedServiceGetDetailedResponse . Deployment deployment = new HostedServiceGetDetailedResponse . Deployment ( ) ; deployment . setName ( <str> ) ; deployment . setDeploymentSlot ( DeploymentSlot . Production ) ; deployment . setStatus ( DeploymentStatus . Running ) ; RoleInstance instance1 = new RoleInstance ( ) ; instance1 . setInstanceName ( <str> ) ; instance1 . setIPAddress ( InetAddress . getLoopbackAddress ( ) ) ; InstanceEndpoint endpoint1 = new InstanceEndpoint ( ) ; endpoint1 . setName ( <str> ) ; endpoint1 . setVirtualIPAddress ( InetAddress . getLoopbackAddress ( ) ) ; endpoint1 . setPort ( <int> ) ; instance1 . setInstanceEndpoints ( newSingletonArrayList ( endpoint1 ) ) ; RoleInstance instance2 = new RoleInstance ( ) ; instance2 . setInstanceName ( <str> ) ; instance2 . setIPAddress ( InetAddress . getLoopbackAddress ( ) ) ; InstanceEndpoint endpoint2 = new InstanceEndpoint ( ) ; endpoint2 . setName ( <str> ) ; endpoint2 . setVirtualIPAddress ( InetAddress . getLoopbackAddress ( ) ) ; endpoint2 . setPort ( <int> ) ; instance2 . setInstanceEndpoints ( newSingletonArrayList ( endpoint2 ) ) ; deployment . setRoleInstances ( new ArrayList < > ( Arrays . asList ( instance1 , instance2 ) ) ) ; response . setDeployments ( newSingletonArrayList ( deployment ) ) ; return response ; } } 

package org . nd4j . linalg . api . buffer . factory ; import org . nd4j . linalg . api . buffer . DataBuffer ; import java . nio . ByteBuffer ; public interface DataBufferFactory { DataBuffer createInt ( ByteBuffer buffer , int length ) ; DataBuffer createFloat ( ByteBuffer buffer , int length ) ; DataBuffer createDouble ( ByteBuffer buffer , int length ) ; DataBuffer createDouble ( int length ) ; DataBuffer createFloat ( int length ) ; DataBuffer createInt ( int length ) ; DataBuffer createDouble ( int [ ] data ) ; DataBuffer createFloat ( int [ ] data ) ; DataBuffer createInt ( int [ ] data ) ; DataBuffer createDouble ( double [ ] data ) ; DataBuffer createDouble ( byte [ ] data , int length ) ; DataBuffer createFloat ( byte [ ] data , int length ) ; DataBuffer createFloat ( double [ ] data ) ; DataBuffer createInt ( double [ ] data ) ; DataBuffer createDouble ( float [ ] data ) ; DataBuffer createFloat ( float [ ] data ) ; DataBuffer createInt ( float [ ] data ) ; DataBuffer createDouble ( int [ ] data , boolean copy ) ; DataBuffer createFloat ( int [ ] data , boolean copy ) ; DataBuffer createInt ( int [ ] data , boolean copy ) ; DataBuffer createDouble ( double [ ] data , boolean copy ) ; DataBuffer createFloat ( double [ ] data , boolean copy ) ; DataBuffer createInt ( double [ ] data , boolean copy ) ; DataBuffer createDouble ( float [ ] data , boolean copy ) ; DataBuffer createFloat ( float [ ] data , boolean copy ) ; DataBuffer createInt ( float [ ] data , boolean copy ) ; } 

package org . elasticsearch . action . indexedscripts . get ; import org . elasticsearch . action . ActionRequest ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . ValidateActions ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . lucene . uid . Versions ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . script . ScriptService ; import java . io . IOException ; public class GetIndexedScriptRequest extends ActionRequest < GetIndexedScriptRequest > implements IndicesRequest { protected String scriptLang ; protected String id ; private VersionType versionType = VersionType . INTERNAL ; private long version = Versions . MATCH_ANY ; public GetIndexedScriptRequest ( ) { } public GetIndexedScriptRequest ( String scriptLang , String id ) { this . scriptLang = scriptLang ; this . id = id ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( scriptLang = = null ) { validationException = ValidateActions . addValidationError ( <str> , validationException ) ; } if ( id = = null ) { validationException = ValidateActions . addValidationError ( <str> , validationException ) ; } if ( ! versionType . validateVersionForReads ( version ) ) { validationException = ValidateActions . addValidationError ( <str> + version + <str> + versionType . name ( ) + <str> , validationException ) ; } return validationException ; } @Override public String [ ] indices ( ) { return new String [ ] { ScriptService . SCRIPT_INDEX } ; } @Override public IndicesOptions indicesOptions ( ) { return IndicesOptions . strictSingleIndexNoExpandForbidClosed ( ) ; } public GetIndexedScriptRequest scriptLang ( @Nullable String type ) { this . scriptLang = type ; return this ; } public GetIndexedScriptRequest id ( String id ) { this . id = id ; return this ; } public String scriptLang ( ) { return scriptLang ; } public String id ( ) { return id ; } public long version ( ) { return version ; } public GetIndexedScriptRequest version ( long version ) { this . version = version ; return this ; } public GetIndexedScriptRequest versionType ( VersionType versionType ) { this . versionType = versionType ; return this ; } public VersionType versionType ( ) { return this . versionType ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; scriptLang = in . readString ( ) ; id = in . readString ( ) ; this . versionType = VersionType . fromValue ( in . readByte ( ) ) ; this . version = in . readLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( scriptLang ) ; out . writeString ( id ) ; out . writeByte ( versionType . getValue ( ) ) ; out . writeLong ( version ) ; } @Override public String toString ( ) { return <str> + ScriptService . SCRIPT_INDEX + <str> + scriptLang + <str> + id + <str> ; } } 

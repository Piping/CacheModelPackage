package org . gradle . platform . base . internal ; import com . google . common . base . Joiner ; import org . apache . commons . lang . ObjectUtils ; import org . gradle . api . IllegalDependencyNotation ; import org . gradle . api . Nullable ; import org . gradle . platform . base . DependencySpec ; import org . gradle . platform . base . ProjectDependencySpec ; import org . gradle . platform . base . ProjectDependencySpecBuilder ; import java . util . List ; import static com . google . common . collect . Lists . newArrayList ; public class DefaultProjectDependencySpec implements ProjectDependencySpec { private final String projectPath ; private final String libraryName ; public DefaultProjectDependencySpec ( String libraryName , String projectPath ) { if ( libraryName = = null & & projectPath = = null ) { throw new IllegalDependencyNotation ( <str> ) ; } this . libraryName = libraryName ; this . projectPath = projectPath ; } @Override public String getProjectPath ( ) { return projectPath ; } @Nullable @Override public String getLibraryName ( ) { return libraryName ; } @Override public String getDisplayName ( ) { List < String > parts = newArrayList ( ) ; if ( getProjectPath ( ) ! = null ) { parts . add ( <str> + getProjectPath ( ) + <str> ) ; } if ( getLibraryName ( ) ! = null ) { parts . add ( <str> + getLibraryName ( ) + <str> ) ; } return Joiner . on ( <str> ) . join ( parts ) ; } public static class Builder implements ProjectDependencySpecBuilder { private String projectPath ; private String libraryName ; @Override public ProjectDependencySpecBuilder project ( String path ) { checkNotSet ( <str> , projectPath ) ; projectPath = path ; return this ; } @Override public ProjectDependencySpecBuilder library ( String name ) { checkNotSet ( <str> , libraryName ) ; libraryName = name ; return this ; } private void checkNotSet ( String name , String value ) { if ( value ! = null ) { throw new IllegalDependencyNotation ( String . format ( <str> , name ) ) ; } } @Override public DependencySpec build ( ) { validate ( ) ; return new DefaultProjectDependencySpec ( libraryName , projectPath ) ; } private void validate ( ) { if ( projectPath = = null & & libraryName ! = null & & libraryName . contains ( <str> ) ) { throw new IllegalDependencyNotation ( String . format ( <str> , libraryName ) ) ; } } } @Override public boolean equals ( Object o ) { if ( this = = o ) { return true ; } if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { return false ; } DefaultProjectDependencySpec that = ( DefaultProjectDependencySpec ) o ; return ObjectUtils . equals ( projectPath , that . projectPath ) & & ObjectUtils . equals ( libraryName , that . libraryName ) ; } @Override public int hashCode ( ) { int result = ObjectUtils . hashCode ( projectPath ) ; result = <int> * result + ObjectUtils . hashCode ( libraryName ) ; return result ; } } 

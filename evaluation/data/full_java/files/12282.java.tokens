package org . gradle . process . internal . child ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . internal . ClassPathRegistry ; import org . gradle . api . logging . LogLevel ; import org . gradle . messaging . remote . Address ; import org . gradle . process . JavaExecSpec ; import org . gradle . process . internal . WorkerProcessBuilder ; import org . gradle . process . internal . launcher . GradleWorkerMain ; import org . gradle . util . GUtil ; import java . io . * ; import java . net . URL ; import java . util . Collection ; import java . util . List ; import java . util . Set ; public class ApplicationClassesInSystemClassLoaderWorkerFactory implements WorkerFactory { private final Object workerId ; private final String displayName ; private final WorkerProcessBuilder processBuilder ; private final List < URL > implementationClassPath ; private final Address serverAddress ; private final ClassPathRegistry classPathRegistry ; public ApplicationClassesInSystemClassLoaderWorkerFactory ( Object workerId , String displayName , WorkerProcessBuilder processBuilder , List < URL > implementationClassPath , Address serverAddress , ClassPathRegistry classPathRegistry ) { this . workerId = workerId ; this . displayName = displayName ; this . processBuilder = processBuilder ; this . implementationClassPath = implementationClassPath ; this . serverAddress = serverAddress ; this . classPathRegistry = classPathRegistry ; } public void prepareJavaCommand ( JavaExecSpec execSpec ) { execSpec . setMain ( <str> + GradleWorkerMain . class . getName ( ) ) ; execSpec . classpath ( classPathRegistry . getClassPath ( <str> ) . getAsFiles ( ) ) ; Object requestedSecurityManager = execSpec . getSystemProperties ( ) . get ( <str> ) ; execSpec . systemProperty ( <str> , <str> + BootstrapSecurityManager . class . getName ( ) ) ; Collection < URL > workerClassPath = classPathRegistry . getClassPath ( <str> ) . getAsURLs ( ) ; ActionExecutionWorker worker = create ( ) ; Collection < File > applicationClasspath = processBuilder . getApplicationClasspath ( ) ; LogLevel logLevel = processBuilder . getLogLevel ( ) ; Set < String > sharedPackages = processBuilder . getSharedPackages ( ) ; ByteArrayOutputStream bytes = new ByteArrayOutputStream ( ) ; try { DataOutputStream outstr = new DataOutputStream ( new EncodedStream . EncodedOutput ( bytes ) ) ; outstr . writeInt ( applicationClasspath . size ( ) ) ; for ( File file : applicationClasspath ) { outstr . writeUTF ( file . getAbsolutePath ( ) ) ; } outstr . writeUTF ( requestedSecurityManager = = null ? <str> : requestedSecurityManager . toString ( ) ) ; outstr . writeInt ( workerClassPath . size ( ) ) ; for ( URL entry : workerClassPath ) { outstr . writeUTF ( entry . toString ( ) ) ; } outstr . writeInt ( logLevel . ordinal ( ) ) ; outstr . writeInt ( sharedPackages . size ( ) ) ; for ( String str : sharedPackages ) { outstr . writeUTF ( str ) ; } outstr . writeInt ( implementationClassPath . size ( ) ) ; for ( URL entry : implementationClassPath ) { outstr . writeUTF ( entry . toString ( ) ) ; } byte [ ] serializedWorker = GUtil . serialize ( worker ) ; outstr . writeInt ( serializedWorker . length ) ; outstr . write ( serializedWorker ) ; outstr . flush ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } execSpec . setStandardInput ( new ByteArrayInputStream ( bytes . toByteArray ( ) ) ) ; } private ActionExecutionWorker create ( ) { return new ActionExecutionWorker ( processBuilder . getWorker ( ) , workerId , displayName , serverAddress , processBuilder . getGradleUserHomeDir ( ) ) ; } } 

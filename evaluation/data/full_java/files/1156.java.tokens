package org . apache . cassandra . transport ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . nio . ByteBuffer ; import java . nio . charset . StandardCharsets ; import java . util . * ; import com . google . common . base . Splitter ; import org . apache . cassandra . auth . PasswordAuthenticator ; import org . apache . cassandra . config . Config ; import org . apache . cassandra . cql3 . QueryOptions ; import org . apache . cassandra . db . ConsistencyLevel ; import org . apache . cassandra . db . marshal . Int32Type ; import org . apache . cassandra . db . marshal . UTF8Type ; import org . apache . cassandra . transport . messages . * ; import org . apache . cassandra . utils . Hex ; import org . apache . cassandra . utils . JVMStabilityInspector ; import org . apache . cassandra . utils . MD5Digest ; import static org . apache . cassandra . config . EncryptionOptions . ClientEncryptionOptions ; public class Client extends SimpleClient { private final SimpleEventHandler eventHandler = new SimpleEventHandler ( ) ; public Client ( String host , int port , int version , ClientEncryptionOptions encryptionOptions ) { super ( host , port , version , encryptionOptions ) ; setEventHandler ( eventHandler ) ; } public void run ( ) throws IOException { System . out . print ( <str> ) ; establishConnection ( ) ; System . out . println ( ) ; BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; for ( ; ; ) { Event event ; while ( ( event = eventHandler . queue . poll ( ) ) ! = null ) { System . out . println ( <str> + event ) ; } System . out . print ( <str> ) ; System . out . flush ( ) ; String line = in . readLine ( ) ; if ( line = = null ) { break ; } Message . Request req = parseLine ( line . trim ( ) ) ; if ( req = = null ) { System . out . println ( <str> ) ; continue ; } try { Message . Response resp = execute ( req ) ; System . out . println ( <str> + resp ) ; } catch ( Exception e ) { JVMStabilityInspector . inspectThrowable ( e ) ; System . err . println ( <str> + e . getMessage ( ) ) ; } } close ( ) ; } private Message . Request parseLine ( String line ) { Splitter splitter = Splitter . on ( <str> ) . trimResults ( ) . omitEmptyStrings ( ) ; Iterator < String > iter = splitter . split ( line ) . iterator ( ) ; if ( ! iter . hasNext ( ) ) return null ; String msgType = iter . next ( ) . toUpperCase ( ) ; if ( msgType . equals ( <str> ) ) { Map < String , String > options = new HashMap < String , String > ( ) ; options . put ( StartupMessage . CQL_VERSION , <str> ) ; while ( iter . hasNext ( ) ) { String next = iter . next ( ) ; if ( next . toLowerCase ( ) . equals ( <str> ) ) { options . put ( StartupMessage . COMPRESSION , <str> ) ; connection . setCompressor ( FrameCompressor . SnappyCompressor . instance ) ; } } return new StartupMessage ( options ) ; } else if ( msgType . equals ( <str> ) ) { line = line . substring ( <int> ) ; String query = line ; int pageSize = - <int> ; if ( line . matches ( <str> ) ) { int idx = line . lastIndexOf ( <str> ) ; query = line . substring ( <int> , idx - <int> ) ; try { pageSize = Integer . parseInt ( line . substring ( idx + <int> , line . length ( ) ) ) ; } catch ( NumberFormatException e ) { return null ; } } return new QueryMessage ( query , QueryOptions . create ( ConsistencyLevel . ONE , Collections . < ByteBuffer > emptyList ( ) , false , pageSize , null , null ) ) ; } else if ( msgType . equals ( <str> ) ) { String query = line . substring ( <int> ) ; return new PrepareMessage ( query ) ; } else if ( msgType . equals ( <str> ) ) { try { byte [ ] id = Hex . hexToBytes ( iter . next ( ) ) ; List < ByteBuffer > values = new ArrayList < ByteBuffer > ( ) ; while ( iter . hasNext ( ) ) { String next = iter . next ( ) ; ByteBuffer bb ; try { int v = Integer . parseInt ( next ) ; bb = Int32Type . instance . decompose ( v ) ; } catch ( NumberFormatException e ) { bb = UTF8Type . instance . decompose ( next ) ; } values . add ( bb ) ; } return new ExecuteMessage ( MD5Digest . wrap ( id ) , QueryOptions . forInternalCalls ( ConsistencyLevel . ONE , values ) ) ; } catch ( Exception e ) { return null ; } } else if ( msgType . equals ( <str> ) ) { return new OptionsMessage ( ) ; } else if ( msgType . equals ( <str> ) ) { System . err . println ( <str> ) ; CredentialsMessage msg = new CredentialsMessage ( ) ; msg . credentials . putAll ( readCredentials ( iter ) ) ; return msg ; } else if ( msgType . equals ( <str> ) ) { Map < String , String > credentials = readCredentials ( iter ) ; if ( ! credentials . containsKey ( PasswordAuthenticator . USERNAME_KEY ) | | ! credentials . containsKey ( PasswordAuthenticator . PASSWORD_KEY ) ) { System . err . println ( <str> ) ; return null ; } return new AuthResponse ( encodeCredentialsForSasl ( credentials ) ) ; } else if ( msgType . equals ( <str> ) ) { String type = line . substring ( <int> ) . toUpperCase ( ) ; try { return new RegisterMessage ( Collections . singletonList ( Enum . valueOf ( Event . Type . class , type ) ) ) ; } catch ( IllegalArgumentException e ) { System . err . println ( <str> + type ) ; return null ; } } return null ; } private Map < String , String > readCredentials ( Iterator < String > iter ) { final Map < String , String > credentials = new HashMap < String , String > ( ) ; while ( iter . hasNext ( ) ) { String next = iter . next ( ) ; String [ ] kv = next . split ( <str> ) ; if ( kv . length ! = <int> ) { System . err . println ( <str> ) ; return null ; } credentials . put ( kv [ <int> ] , kv [ <int> ] ) ; } return credentials ; } private byte [ ] encodeCredentialsForSasl ( Map < String , String > credentials ) { byte [ ] username = credentials . get ( PasswordAuthenticator . USERNAME_KEY ) . getBytes ( StandardCharsets . UTF_8 ) ; byte [ ] password = credentials . get ( PasswordAuthenticator . PASSWORD_KEY ) . getBytes ( StandardCharsets . UTF_8 ) ; byte [ ] initialResponse = new byte [ username . length + password . length + <int> ] ; initialResponse [ <int> ] = <int> ; System . arraycopy ( username , <int> , initialResponse , <int> , username . length ) ; initialResponse [ username . length + <int> ] = <int> ; System . arraycopy ( password , <int> , initialResponse , username . length + <int> , password . length ) ; return initialResponse ; } public static void main ( String [ ] args ) throws Exception { Config . setClientMode ( true ) ; if ( args . length < <int> | | args . length > <int> ) { System . err . println ( <str> + Client . class . getSimpleName ( ) + <str> ) ; return ; } String host = args [ <int> ] ; int port = Integer . parseInt ( args [ <int> ] ) ; int version = args . length = = <int> ? Integer . parseInt ( args [ <int> ] ) : Server . CURRENT_VERSION ; ClientEncryptionOptions encryptionOptions = new ClientEncryptionOptions ( ) ; System . out . println ( <str> + host + <str> + port + <str> + version ) ; new Client ( host , port , version , encryptionOptions ) . run ( ) ; System . exit ( <int> ) ; } } 

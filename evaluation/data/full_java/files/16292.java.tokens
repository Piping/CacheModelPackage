package org . gradle . foundation ; import junit . framework . TestCase ; import org . gradle . foundation . output . FileLink ; import org . gradle . foundation . output . FileLinkDefinitionLord ; import org . gradle . foundation . output . LiveOutputParser ; import java . io . File ; import java . util . List ; public class LiveOutputParserTests extends TestCase { private LiveOutputParser parser ; private FileLinkDefinitionLord definitionLord ; @Override protected void setUp ( ) throws Exception { definitionLord = new FileLinkDefinitionLord ( ) ; parser = new LiveOutputParser ( definitionLord , false ) ; } @Override protected void tearDown ( ) throws Exception { definitionLord = null ; parser = null ; } public void testBasic ( ) { FileLink expectedFileLink = new FileLink ( new File ( <str> ) , <int> , <int> , <int> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , expectedFileLink ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; TestUtility . assertListContents ( parser . getFileLinks ( ) , expectedFileLink ) ; } private void appendTextWithoutFileLinks ( String text ) { List < FileLink > fileLinks = parser . appendText ( text ) ; if ( ! fileLinks . isEmpty ( ) ) { throw new AssertionError ( <str> + TestUtility . dumpList ( fileLinks ) ) ; } } private void appendTextWithFileLinks ( String text , FileLink . . . expectedResults ) { List < FileLink > fileLinks = parser . appendText ( text ) ; TestUtility . assertListContents ( fileLinks , expectedResults ) ; } public void testMultipleFiles ( ) { FileLink fileLink1 = new FileLink ( new File ( <str> ) , <int> , <int> , <int> ) ; FileLink fileLink2 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; FileLink fileLink3 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; FileLink fileLink4 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; FileLink fileLink5 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink1 ) ; appendTextWithFileLinks ( <str> , fileLink2 ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink3 ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink4 ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink5 ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; TestUtility . assertListContents ( parser . getFileLinks ( ) , fileLink1 , fileLink2 , fileLink3 , fileLink4 , fileLink5 ) ; } public void testMultiplesAtOnce ( ) { FileLink fileLink1 = new FileLink ( new File ( <str> ) , <int> , <int> , <int> ) ; FileLink fileLink2 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; FileLink fileLink3 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; FileLink fileLink4 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; FileLink fileLink5 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink1 ) ; appendTextWithoutFileLinks ( <str> ) ; String remaindingOutputText = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; appendTextWithFileLinks ( remaindingOutputText , fileLink2 , fileLink3 , fileLink4 , fileLink5 ) ; TestUtility . assertListContents ( parser . getFileLinks ( ) , fileLink1 , fileLink2 , fileLink3 , fileLink4 , fileLink5 ) ; } public void testGroovyFileLineDelimiter ( ) { FileLink fileLink1 = new FileLink ( new File ( <str> ) , <int> , <int> , <int> ) ; FileLink fileLink2 = new FileLink ( new File ( <str> ) , <int> , <int> , <int> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink1 ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink2 ) ; } public void testAddingFileExtensions ( ) { String myExtension1 = <str> ; String myExtension2 = <str> ; assertFalse ( <str> , definitionLord . getFileExtensions ( ) . contains ( myExtension1 ) ) ; assertFalse ( <str> , definitionLord . getFileExtensions ( ) . contains ( myExtension2 ) ) ; definitionLord . addFileExtension ( myExtension1 , <str> ) ; definitionLord . addFileExtension ( myExtension2 , null ) ; assertTrue ( <str> , definitionLord . getFileExtensions ( ) . contains ( myExtension1 ) ) ; assertTrue ( <str> , definitionLord . getFileExtensions ( ) . contains ( myExtension2 ) ) ; FileLink fileLink1 = new FileLink ( new File ( <str> ) , <int> , <int> , <int> ) ; FileLink fileLink2 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; FileLink fileLink3 = new FileLink ( new File ( <str> ) , <int> , <int> , <int> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink1 ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink2 ) ; appendTextWithFileLinks ( <str> , fileLink3 ) ; } public void testAddingPrefixedFileLink ( ) { definitionLord . addPrefixedFileLink ( <str> , <str> , <str> , <str> ) ; definitionLord . addPrefixedFileLink ( <str> , <str> , <str> , null ) ; FileLink fileLink1 = new FileLink ( new File ( <str> ) , <int> , <int> , <int> ) ; FileLink fileLink2 = new FileLink ( new File ( <str> ) , <int> , <int> , - <int> ) ; FileLink fileLink3 = new FileLink ( new File ( <str> ) , <int> , <int> , <int> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink1 ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithoutFileLinks ( <str> ) ; appendTextWithFileLinks ( <str> , fileLink2 ) ; appendTextWithFileLinks ( <str> , fileLink3 ) ; } } 

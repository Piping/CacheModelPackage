package org . gradle . configuration ; import org . gradle . StartParameter ; import org . gradle . api . internal . GradleInternal ; import org . gradle . execution . ProjectConfigurer ; import org . gradle . util . SingleMessageLogger ; public class DefaultBuildConfigurer implements BuildConfigurer { private final ProjectConfigurer projectConfigurer ; public DefaultBuildConfigurer ( ProjectConfigurer projectConfigurer ) { this . projectConfigurer = projectConfigurer ; } public void configure ( GradleInternal gradle ) { maybeInformAboutIncubatingMode ( gradle . getStartParameter ( ) ) ; if ( gradle . getStartParameter ( ) . isConfigureOnDemand ( ) ) { projectConfigurer . configure ( gradle . getRootProject ( ) ) ; } else { projectConfigurer . configureHierarchy ( gradle . getRootProject ( ) ) ; } } private void maybeInformAboutIncubatingMode ( StartParameter startParameter ) { if ( startParameter . isParallelProjectExecutionEnabled ( ) & & startParameter . isConfigureOnDemand ( ) ) { SingleMessageLogger . incubatingFeatureUsed ( <str> ) ; } else if ( startParameter . isParallelProjectExecutionEnabled ( ) ) { SingleMessageLogger . incubatingFeatureUsed ( <str> ) ; } else if ( startParameter . isConfigureOnDemand ( ) ) { SingleMessageLogger . incubatingFeatureUsed ( <str> ) ; } } } 

package org . gradle . messaging . remote . internal . hub ; import org . gradle . messaging . remote . internal . Connection ; import org . gradle . messaging . remote . internal . hub . protocol . ConnectionClosed ; import org . gradle . messaging . remote . internal . hub . protocol . ConnectionEstablished ; import org . gradle . messaging . remote . internal . hub . protocol . EndOfStream ; import org . gradle . messaging . remote . internal . hub . protocol . InterHubMessage ; import org . gradle . messaging . remote . internal . hub . queue . EndPointQueue ; import java . util . HashSet ; import java . util . Set ; class ConnectionSet { private final Set < ConnectionState > connections = new HashSet < ConnectionState > ( ) ; private final IncomingQueue incomingQueue ; private final OutgoingQueue outgoingQueue ; private boolean stopping ; ConnectionSet ( IncomingQueue incomingQueue , OutgoingQueue outgoingQueue ) { this . incomingQueue = incomingQueue ; this . outgoingQueue = outgoingQueue ; } public ConnectionState add ( Connection < InterHubMessage > connection ) { incomingQueue . queue ( new ConnectionEstablished ( connection ) ) ; EndPointQueue queue = outgoingQueue . newEndpoint ( ) ; ConnectionState state = new ConnectionState ( this , connection , queue ) ; connections . add ( state ) ; return state ; } public void finished ( ConnectionState connectionState ) { incomingQueue . queue ( new ConnectionClosed ( connectionState . getConnection ( ) ) ) ; connections . remove ( connectionState ) ; if ( stopping ) { maybeStop ( ) ; } } public void requestStop ( ) { stopping = true ; maybeStop ( ) ; } private void maybeStop ( ) { if ( connections . isEmpty ( ) ) { outgoingQueue . discardQueued ( ) ; incomingQueue . queue ( new EndOfStream ( ) ) ; } } } 

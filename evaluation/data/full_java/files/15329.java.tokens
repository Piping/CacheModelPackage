package org . gradle . api . publish . internal ; import org . gradle . api . Project ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . artifacts . ProjectDependency ; import org . gradle . api . internal . project . ProjectInternal ; import org . gradle . api . internal . artifacts . DefaultModuleVersionIdentifier ; import org . gradle . api . publish . PublishingExtension ; import java . util . Iterator ; import java . util . Set ; public class ProjectDependencyPublicationResolver { public ModuleVersionIdentifier resolve ( ProjectDependency dependency ) { Project dependencyProject = dependency . getDependencyProject ( ) ; ( ( ProjectInternal ) dependencyProject ) . evaluate ( ) ; PublishingExtension publishing = dependencyProject . getExtensions ( ) . findByType ( PublishingExtension . class ) ; if ( publishing = = null | | publishing . getPublications ( ) . withType ( PublicationInternal . class ) . isEmpty ( ) ) { return new DefaultModuleVersionIdentifier ( dependency . getGroup ( ) , dependencyProject . getName ( ) , dependency . getVersion ( ) ) ; } Set < ? extends PublicationInternal > publications = publishing . getPublications ( ) . withType ( PublicationInternal . class ) ; Iterator < ? extends PublicationInternal > iterator = publications . iterator ( ) ; ModuleVersionIdentifier candidate = iterator . next ( ) . getCoordinates ( ) ; while ( iterator . hasNext ( ) ) { ModuleVersionIdentifier alternative = iterator . next ( ) . getCoordinates ( ) ; if ( ! candidate . equals ( alternative ) ) { throw new UnsupportedOperationException ( <str> ) ; } } return candidate ; } } 

package com . badlogic . gdx . backends . android ; import android . media . AudioFormat ; import android . media . AudioRecord ; import android . media . MediaRecorder ; import com . badlogic . gdx . audio . AudioRecorder ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class AndroidAudioRecorder implements AudioRecorder { private AudioRecord recorder ; public AndroidAudioRecorder ( int samplingRate , boolean isMono ) { int channelConfig = isMono ? AudioFormat . CHANNEL_IN_MONO : AudioFormat . CHANNEL_IN_STEREO ; int minBufferSize = AudioRecord . getMinBufferSize ( samplingRate , channelConfig , AudioFormat . ENCODING_PCM_16BIT ) ; recorder = new AudioRecord ( MediaRecorder . AudioSource . MIC , samplingRate , channelConfig , AudioFormat . ENCODING_PCM_16BIT , minBufferSize ) ; if ( recorder . getState ( ) ! = AudioRecord . STATE_INITIALIZED ) throw new GdxRuntimeException ( <str> ) ; recorder . startRecording ( ) ; } @Override public void dispose ( ) { recorder . stop ( ) ; recorder . release ( ) ; } @Override public void read ( short [ ] samples , int offset , int numSamples ) { int read = <int> ; while ( read ! = numSamples ) { read + = recorder . read ( samples , offset + read , numSamples - read ) ; } } } 

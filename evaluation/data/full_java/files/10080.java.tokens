package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . Helpers . getMethod ; import static com . google . common . collect . testing . features . CollectionFeature . SERIALIZABLE_INCLUDING_VIEWS ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . ListFeature . SUPPORTS_ADD_WITH_INDEX ; import static com . google . common . collect . testing . features . ListFeature . SUPPORTS_REMOVE_WITH_INDEX ; import static com . google . common . collect . testing . features . ListFeature . SUPPORTS_SET ; import static java . util . Collections . emptyList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . ListFeature ; import com . google . common . testing . SerializableTester ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . concurrent . CopyOnWriteArrayList ; @SuppressWarnings ( <str> ) @GwtCompatible ( emulated = true ) public class ListSubListTester < E > extends AbstractListTester < E > { public void testSubList_startNegative ( ) { try { getList ( ) . subList ( - <int> , <int> ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } } public void testSubList_endTooLarge ( ) { try { getList ( ) . subList ( <int> , getNumElements ( ) + <int> ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } } public void testSubList_startGreaterThanEnd ( ) { try { getList ( ) . subList ( <int> , <int> ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } catch ( IllegalArgumentException expected ) { } } public void testSubList_empty ( ) { assertEquals ( <str> , emptyList ( ) , getList ( ) . subList ( <int> , <int> ) ) ; } public void testSubList_entireList ( ) { assertEquals ( <str> , getList ( ) , getList ( ) . subList ( <int> , getNumElements ( ) ) ) ; } @ListFeature.Require ( SUPPORTS_REMOVE_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testSubList_subListRemoveAffectsOriginal ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) ; subList . remove ( <int> ) ; List < E > expected = Arrays . asList ( createSamplesArray ( ) ) . subList ( <int> , getNumElements ( ) ) ; expectContents ( expected ) ; } @ListFeature.Require ( SUPPORTS_REMOVE_WITH_INDEX ) @CollectionSize.Require ( absent = ZERO ) public void testSubList_subListClearAffectsOriginal ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) ; subList . clear ( ) ; List < E > expected = Arrays . asList ( createSamplesArray ( ) ) . subList ( <int> , getNumElements ( ) ) ; expectContents ( expected ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) public void testSubList_subListAddAffectsOriginal ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) ; subList . add ( e3 ( ) ) ; expectAdded ( <int> , e3 ( ) ) ; } @ListFeature.Require ( SUPPORTS_SET ) @CollectionSize.Require ( absent = ZERO ) public void testSubList_subListSetAffectsOriginal ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) ; subList . set ( <int> , e3 ( ) ) ; List < E > expected = Helpers . copyToList ( createSamplesArray ( ) ) ; expected . set ( <int> , e3 ( ) ) ; expectContents ( expected ) ; } @ListFeature.Require ( SUPPORTS_SET ) @CollectionSize.Require ( absent = ZERO ) public void testSubList_originalListSetAffectsSubList ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) ; getList ( ) . set ( <int> , e3 ( ) ) ; assertEquals ( <str> + <str> , Collections . singletonList ( e3 ( ) ) , subList ) ; } @ListFeature.Require ( SUPPORTS_REMOVE_WITH_INDEX ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testSubList_subListRemoveAffectsOriginalLargeList ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) ; subList . remove ( e2 ( ) ) ; List < E > expected = Helpers . copyToList ( createSamplesArray ( ) ) ; expected . remove ( <int> ) ; expectContents ( expected ) ; } @ListFeature.Require ( SUPPORTS_ADD_WITH_INDEX ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testSubList_subListAddAtIndexAffectsOriginalLargeList ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) ; subList . add ( <int> , e3 ( ) ) ; expectAdded ( <int> , e3 ( ) ) ; } @ListFeature.Require ( SUPPORTS_SET ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testSubList_subListSetAffectsOriginalLargeList ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) ; subList . set ( <int> , e3 ( ) ) ; List < E > expected = Helpers . copyToList ( createSamplesArray ( ) ) ; expected . set ( <int> , e3 ( ) ) ; expectContents ( expected ) ; } @ListFeature.Require ( SUPPORTS_SET ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testSubList_originalListSetAffectsSubListLargeList ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) ; getList ( ) . set ( <int> , e3 ( ) ) ; assertEquals ( <str> + <str> , Arrays . asList ( e3 ( ) , e2 ( ) ) , subList ) ; } public void testSubList_ofSubListEmpty ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) . subList ( <int> , <int> ) ; assertEquals ( <str> , emptyList ( ) , subList ) ; } @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testSubList_ofSubListNonEmpty ( ) { List < E > subList = getList ( ) . subList ( <int> , <int> ) . subList ( <int> , <int> ) ; assertEquals ( <str> + <str> , Collections . singletonList ( getOrderedElements ( ) . get ( <int> ) ) , subList ) ; } @CollectionSize.Require ( absent = { ZERO } ) public void testSubList_size ( ) { List < E > list = getList ( ) ; int size = getNumElements ( ) ; assertEquals ( list . subList ( <int> , size ) . size ( ) , size ) ; assertEquals ( list . subList ( <int> , size - <int> ) . size ( ) , size - <int> ) ; assertEquals ( list . subList ( <int> , size ) . size ( ) , size - <int> ) ; assertEquals ( list . subList ( size , size ) . size ( ) , <int> ) ; assertEquals ( list . subList ( <int> , <int> ) . size ( ) , <int> ) ; } @CollectionSize.Require ( absent = { ZERO } ) public void testSubList_isEmpty ( ) { List < E > list = getList ( ) ; int size = getNumElements ( ) ; for ( List < E > subList : Arrays . asList ( list . subList ( <int> , size ) , list . subList ( <int> , size - <int> ) , list . subList ( <int> , size ) , list . subList ( <int> , <int> ) , list . subList ( size , size ) ) ) { assertEquals ( subList . isEmpty ( ) , subList . size ( ) = = <int> ) ; } } @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testSubList_get ( ) { List < E > list = getList ( ) ; int size = getNumElements ( ) ; List < E > copy = list . subList ( <int> , size ) ; List < E > head = list . subList ( <int> , size - <int> ) ; List < E > tail = list . subList ( <int> , size ) ; assertEquals ( list . get ( <int> ) , copy . get ( <int> ) ) ; assertEquals ( list . get ( size - <int> ) , copy . get ( size - <int> ) ) ; assertEquals ( list . get ( <int> ) , tail . get ( <int> ) ) ; assertEquals ( list . get ( size - <int> ) , tail . get ( size - <int> ) ) ; assertEquals ( list . get ( <int> ) , head . get ( <int> ) ) ; assertEquals ( list . get ( size - <int> ) , head . get ( size - <int> ) ) ; for ( List < E > subList : Arrays . asList ( copy , head , tail ) ) { for ( int index : Arrays . asList ( - <int> , subList . size ( ) ) ) { try { subList . get ( index ) ; fail ( <str> ) ; } catch ( IndexOutOfBoundsException expected ) { } } } } @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testSubList_contains ( ) { List < E > list = getList ( ) ; int size = getNumElements ( ) ; List < E > copy = list . subList ( <int> , size ) ; List < E > head = list . subList ( <int> , size - <int> ) ; List < E > tail = list . subList ( <int> , size ) ; assertTrue ( copy . contains ( list . get ( <int> ) ) ) ; assertTrue ( head . contains ( list . get ( <int> ) ) ) ; assertTrue ( tail . contains ( list . get ( <int> ) ) ) ; assertTrue ( copy . contains ( list . get ( size - <int> ) ) ) ; assertTrue ( head . contains ( list . get ( size - <int> ) ) ) ; assertTrue ( tail . contains ( list . get ( size - <int> ) ) ) ; assertFalse ( head . contains ( list . get ( size - <int> ) ) ) ; assertFalse ( tail . contains ( list . get ( <int> ) ) ) ; } @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testSubList_indexOf ( ) { List < E > list = getList ( ) ; int size = getNumElements ( ) ; List < E > copy = list . subList ( <int> , size ) ; List < E > head = list . subList ( <int> , size - <int> ) ; List < E > tail = list . subList ( <int> , size ) ; assertEquals ( copy . indexOf ( list . get ( <int> ) ) , <int> ) ; assertEquals ( head . indexOf ( list . get ( <int> ) ) , <int> ) ; assertEquals ( tail . indexOf ( list . get ( <int> ) ) , <int> ) ; assertEquals ( copy . indexOf ( list . get ( size - <int> ) ) , size - <int> ) ; assertEquals ( head . indexOf ( list . get ( size - <int> ) ) , size - <int> ) ; assertEquals ( tail . indexOf ( list . get ( size - <int> ) ) , size - <int> ) ; assertEquals ( head . indexOf ( list . get ( size - <int> ) ) , - <int> ) ; assertEquals ( tail . indexOf ( list . get ( <int> ) ) , - <int> ) ; } @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testSubList_lastIndexOf ( ) { List < E > list = getList ( ) ; int size = list . size ( ) ; List < E > copy = list . subList ( <int> , size ) ; List < E > head = list . subList ( <int> , size - <int> ) ; List < E > tail = list . subList ( <int> , size ) ; assertEquals ( copy . lastIndexOf ( list . get ( size - <int> ) ) , size - <int> ) ; assertEquals ( head . lastIndexOf ( list . get ( size - <int> ) ) , size - <int> ) ; assertEquals ( tail . lastIndexOf ( list . get ( size - <int> ) ) , size - <int> ) ; assertEquals ( copy . lastIndexOf ( list . get ( <int> ) ) , <int> ) ; assertEquals ( head . lastIndexOf ( list . get ( <int> ) ) , <int> ) ; assertEquals ( tail . lastIndexOf ( list . get ( <int> ) ) , <int> ) ; assertEquals ( head . lastIndexOf ( list . get ( size - <int> ) ) , - <int> ) ; assertEquals ( tail . lastIndexOf ( list . get ( <int> ) ) , - <int> ) ; } @CollectionFeature.Require ( SERIALIZABLE_INCLUDING_VIEWS ) public void testReserializeWholeSubList ( ) { SerializableTester . reserializeAndAssert ( getList ( ) . subList ( <int> , getNumElements ( ) ) ) ; } @CollectionFeature.Require ( SERIALIZABLE_INCLUDING_VIEWS ) public void testReserializeEmptySubList ( ) { SerializableTester . reserializeAndAssert ( getList ( ) . subList ( <int> , <int> ) ) ; } @CollectionFeature.Require ( SERIALIZABLE_INCLUDING_VIEWS ) @CollectionSize.Require ( absent = { ZERO , ONE } ) public void testReserializeSubList ( ) { SerializableTester . reserializeAndAssert ( getList ( ) . subList ( <int> , <int> ) ) ; } @GwtIncompatible ( <str> ) public static Method getSubListOriginalListSetAffectsSubListMethod ( ) { return getMethod ( ListSubListTester . class , <str> ) ; } @GwtIncompatible ( <str> ) public static Method getSubListOriginalListSetAffectsSubListLargeListMethod ( ) { return getMethod ( ListSubListTester . class , <str> ) ; } @GwtIncompatible ( <str> ) public static Method getSubListSubListRemoveAffectsOriginalLargeListMethod ( ) { return getMethod ( ListSubListTester . class , <str> ) ; } } 

package org . gradle . tooling . internal . consumer . connection ; import org . gradle . tooling . BuildAction ; import org . gradle . tooling . internal . consumer . ConnectionParameters ; import org . gradle . tooling . internal . consumer . parameters . ConsumerOperationParameters ; import org . gradle . tooling . internal . consumer . versioning . VersionDetails ; import org . gradle . tooling . internal . protocol . ConnectionVersion4 ; import org . gradle . tooling . internal . consumer . TestExecutionRequest ; import org . gradle . tooling . model . internal . Exceptions ; public abstract class AbstractConsumerConnection extends HasCompatibilityMapperAction implements ConsumerConnection { private final ConnectionVersion4 delegate ; private final VersionDetails providerMetaData ; public AbstractConsumerConnection ( ConnectionVersion4 delegate , VersionDetails providerMetaData ) { super ( providerMetaData ) ; this . delegate = delegate ; this . providerMetaData = providerMetaData ; } public void stop ( ) { } public String getDisplayName ( ) { return delegate . getMetaData ( ) . getDisplayName ( ) ; } public VersionDetails getVersionDetails ( ) { return providerMetaData ; } public ConnectionVersion4 getDelegate ( ) { return delegate ; } public abstract void configure ( ConnectionParameters connectionParameters ) ; protected abstract ModelProducer getModelProducer ( ) ; protected abstract ActionRunner getActionRunner ( ) ; public < T > T run ( Class < T > type , ConsumerOperationParameters operationParameters ) { return getModelProducer ( ) . produceModel ( type , operationParameters ) ; } public < T > T run ( BuildAction < T > action , ConsumerOperationParameters operationParameters ) { return getActionRunner ( ) . run ( action , operationParameters ) ; } public void runTests ( final TestExecutionRequest testExecutionRequest , ConsumerOperationParameters operationParameters ) { throw Exceptions . unsupportedFeature ( operationParameters . getEntryPointName ( ) , getVersionDetails ( ) . getVersion ( ) , <str> ) ; } } 

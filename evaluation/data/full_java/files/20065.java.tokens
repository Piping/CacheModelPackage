package io . netty . microbench . headers ; import java . util . EnumMap ; import java . util . HashMap ; import java . util . Map ; public final class ExampleHeaders { public enum HeaderExample { THREE , FIVE , SIX , EIGHT , ELEVEN , TWENTYTWO , THIRTY } public static final Map < HeaderExample , Map < String , String > > EXAMPLES = new EnumMap < HeaderExample , Map < String , String > > ( HeaderExample . class ) ; static { Map < String , String > header = new HashMap < String , String > ( ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; EXAMPLES . put ( HeaderExample . THREE , header ) ; header = new HashMap < String , String > ( ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; EXAMPLES . put ( HeaderExample . FIVE , header ) ; header = new HashMap < String , String > ( ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; EXAMPLES . put ( HeaderExample . SIX , header ) ; header = new HashMap < String , String > ( ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; EXAMPLES . put ( HeaderExample . EIGHT , header ) ; header = new HashMap < String , String > ( ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; EXAMPLES . put ( HeaderExample . ELEVEN , header ) ; header = new HashMap < String , String > ( ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; EXAMPLES . put ( HeaderExample . TWENTYTWO , header ) ; header = new HashMap < String , String > ( ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; header . put ( <str> , <str> ) ; EXAMPLES . put ( HeaderExample . THIRTY , header ) ; } private ExampleHeaders ( ) { } } 

package org . elasticsearch . search . aggregations . bucket ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . BucketCollector ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . LeafBucketCollector ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import java . io . IOException ; public abstract class DeferringBucketCollector extends BucketCollector { private BucketCollector collector ; public DeferringBucketCollector ( ) { } public void setDeferredCollector ( Iterable < BucketCollector > deferredCollectors ) { this . collector = BucketCollector . wrap ( deferredCollectors ) ; } public final void replay ( long . . . selectedBuckets ) throws IOException { prepareSelectedBuckets ( selectedBuckets ) ; } public abstract void prepareSelectedBuckets ( long . . . selectedBuckets ) throws IOException ; public Aggregator wrap ( final Aggregator in ) { return new WrappedAggregator ( in ) ; } protected class WrappedAggregator extends Aggregator { private Aggregator in ; WrappedAggregator ( Aggregator in ) { this . in = in ; } @Override public boolean needsScores ( ) { return in . needsScores ( ) ; } @Override public void close ( ) { in . close ( ) ; } @Override public String name ( ) { return in . name ( ) ; } @Override public Aggregator parent ( ) { return in . parent ( ) ; } @Override public AggregationContext context ( ) { return in . context ( ) ; } @Override public Aggregator subAggregator ( String name ) { return in . subAggregator ( name ) ; } @Override public InternalAggregation buildAggregation ( long bucket ) throws IOException { return in . buildAggregation ( bucket ) ; } @Override public InternalAggregation buildEmptyAggregation ( ) { return in . buildEmptyAggregation ( ) ; } @Override public LeafBucketCollector getLeafCollector ( LeafReaderContext ctx ) throws IOException { throw new IllegalStateException ( <str> ) ; } @Override public void preCollection ( ) throws IOException { throw new IllegalStateException ( <str> ) ; } @Override public void postCollection ( ) throws IOException { throw new IllegalStateException ( <str> ) ; } } } 

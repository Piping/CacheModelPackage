package org . nd4j . serde . jackson ; import java . io . IOException ; import com . fasterxml . jackson . core . JsonGenerator ; import com . fasterxml . jackson . databind . JsonSerializer ; import com . fasterxml . jackson . databind . SerializerProvider ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . ndarray . INDArray ; public class VectorSerializer extends JsonSerializer < INDArray > { @Override public void serialize ( INDArray indArray , JsonGenerator jsonGenerator , SerializerProvider serializerProvider ) throws IOException { jsonGenerator . writeStartObject ( ) ; DataBuffer view = indArray . data ( ) ; jsonGenerator . writeArrayFieldStart ( <str> ) ; for ( int i = <int> ; i < view . length ( ) ; i + + ) { jsonGenerator . writeNumber ( view . getDouble ( i ) ) ; } jsonGenerator . writeEndArray ( ) ; jsonGenerator . writeArrayFieldStart ( <str> ) ; for ( int i = <int> ; i < indArray . rank ( ) ; i + + ) { jsonGenerator . writeNumber ( indArray . size ( i ) ) ; } jsonGenerator . writeEndArray ( ) ; jsonGenerator . writeArrayFieldStart ( <str> ) ; for ( int i = <int> ; i < indArray . rank ( ) ; i + + ) jsonGenerator . writeNumber ( indArray . stride ( i ) ) ; jsonGenerator . writeEndArray ( ) ; jsonGenerator . writeNumberField ( <str> , indArray . offset ( ) ) ; jsonGenerator . writeStringField ( <str> , indArray instanceof IComplexNDArray ? <str> : <str> ) ; jsonGenerator . writeNumberField ( <str> , indArray . rank ( ) ) ; jsonGenerator . writeNumberField ( <str> , view . length ( ) ) ; jsonGenerator . writeStringField ( <str> , String . valueOf ( indArray . ordering ( ) ) ) ; jsonGenerator . writeEndObject ( ) ; } } 

package org . apache . cassandra . db . context ; import java . nio . ByteBuffer ; import org . junit . Test ; import org . apache . cassandra . Util ; import org . apache . cassandra . db . ClockAndCount ; import org . apache . cassandra . db . context . CounterContext . Relationship ; import org . apache . cassandra . utils . ByteBufferUtil ; import org . apache . cassandra . utils . CounterId ; import static org . apache . cassandra . db . context . CounterContext . ContextState ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertNotSame ; import static org . junit . Assert . assertSame ; import static org . junit . Assert . assertTrue ; public class CounterContextTest { private static final CounterContext cc = new CounterContext ( ) ; private static final int headerSizeLength = <int> ; private static final int headerEltLength = <int> ; private static final int idLength = <int> ; private static final int clockLength = <int> ; private static final int countLength = <int> ; private static final int stepLength = idLength + clockLength + countLength ; @Test public void testAllocate ( ) { ContextState allGlobal = ContextState . allocate ( <int> , <int> , <int> ) ; assertEquals ( headerSizeLength + <int> * headerEltLength + <int> * stepLength , allGlobal . context . remaining ( ) ) ; ContextState allLocal = ContextState . allocate ( <int> , <int> , <int> ) ; assertEquals ( headerSizeLength + <int> * headerEltLength + <int> * stepLength , allLocal . context . remaining ( ) ) ; ContextState allRemote = ContextState . allocate ( <int> , <int> , <int> ) ; assertEquals ( headerSizeLength + <int> * stepLength , allRemote . context . remaining ( ) ) ; ContextState mixed = ContextState . allocate ( <int> , <int> , <int> ) ; assertEquals ( headerSizeLength + <int> * headerEltLength + <int> * stepLength , mixed . context . remaining ( ) ) ; } @Test public void testDiff ( ) { ContextState left ; ContextState right ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . wrap ( ByteBufferUtil . clone ( left . context ) ) ; assertEquals ( Relationship . EQUAL , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> L , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . GREATER_THAN , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> L , <int> L ) ; assertEquals ( Relationship . LESS_THAN , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . GREATER_THAN , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . LESS_THAN , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . DISJOINT , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . DISJOINT , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . DISJOINT , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . DISJOINT , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . DISJOINT , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . DISJOINT , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . DISJOINT , cc . diff ( left . context , right . context ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> L ) ; assertEquals ( Relationship . DISJOINT , cc . diff ( left . context , right . context ) ) ; } @Test public void testMerge ( ) { ContextState left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; left . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; left . writeLocal ( CounterId . getLocalId ( ) , <int> , <int> ) ; ContextState right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; right . writeLocal ( CounterId . getLocalId ( ) , <int> , <int> ) ; ByteBuffer merged = cc . merge ( left . context , right . context ) ; int hd = <int> ; assertEquals ( hd + <int> * stepLength , merged . remaining ( ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . getLocalId ( ) , merged , hd + <int> * stepLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + <int> * stepLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + <int> * stepLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , hd + <int> * stepLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + <int> * stepLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + <int> * stepLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , hd + <int> * stepLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + <int> * stepLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + <int> * stepLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , hd + stepLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + stepLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + stepLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , hd ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + hd + idLength + clockLength ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; left . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; left . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; right . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; right . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; merged = cc . merge ( left . context , right . context ) ; assertEquals ( headerSizeLength + <int> * headerEltLength + <int> * stepLength , merged . remaining ( ) ) ; assertEquals ( <int> , cc . total ( merged ) ) ; assertEquals ( <int> , merged . getShort ( merged . position ( ) ) ) ; int headerLength = headerSizeLength + <int> * headerEltLength ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , headerLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , headerLength + stepLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + stepLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + stepLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , headerLength + <int> * stepLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + <int> * stepLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + <int> * stepLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , headerLength + <int> * stepLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + <int> * stepLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + <int> * stepLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , headerLength + <int> * stepLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + <int> * stepLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + <int> * stepLength + idLength + clockLength ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; merged = cc . merge ( left . context , right . context ) ; headerLength = headerSizeLength + headerEltLength ; assertEquals ( headerLength + stepLength , merged . remaining ( ) ) ; assertEquals ( <int> , cc . total ( merged ) ) ; assertEquals ( <int> , merged . getShort ( merged . position ( ) ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , headerLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + idLength + clockLength ) ) ; left = ContextState . allocate ( <int> , <int> , <int> ) ; left . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; left . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; right = ContextState . allocate ( <int> , <int> , <int> ) ; right . writeLocal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; right . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; merged = cc . merge ( left . context , right . context ) ; headerLength = headerSizeLength + <int> * headerEltLength ; assertEquals ( headerLength + <int> * stepLength , merged . remaining ( ) ) ; assertEquals ( <int> , cc . total ( merged ) ) ; assertEquals ( <int> , merged . getShort ( merged . position ( ) ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , headerLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , merged , headerLength + stepLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + stepLength + idLength ) ) ; assertEquals ( <int> , merged . getLong ( merged . position ( ) + headerLength + stepLength + idLength + clockLength ) ) ; } @Test public void testTotal ( ) { ContextState mixed = ContextState . allocate ( <int> , <int> , <int> ) ; mixed . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; mixed . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; mixed . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; mixed . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; mixed . writeLocal ( CounterId . getLocalId ( ) , <int> , <int> ) ; assertEquals ( <int> , cc . total ( mixed . context ) ) ; ContextState global = ContextState . allocate ( <int> , <int> , <int> ) ; global . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; global . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; global . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; assertEquals ( <int> , cc . total ( global . context ) ) ; } @Test public void testClearLocal ( ) { ContextState state ; ByteBuffer marked ; ByteBuffer cleared ; state = ContextState . allocate ( <int> , <int> , <int> ) ; state . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; assertFalse ( cc . shouldClearLocal ( state . context ) ) ; marked = cc . markLocalToBeCleared ( state . context ) ; assertEquals ( <int> , marked . getShort ( marked . position ( ) ) ) ; assertSame ( state . context , marked ) ; cleared = cc . clearAllLocal ( marked ) ; assertSame ( cleared , marked ) ; state = ContextState . allocate ( <int> , <int> , <int> ) ; state . writeLocal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; assertFalse ( cc . shouldClearLocal ( state . context ) ) ; marked = cc . markLocalToBeCleared ( state . context ) ; assertTrue ( cc . shouldClearLocal ( marked ) ) ; assertEquals ( - <int> , marked . getShort ( marked . position ( ) ) ) ; assertNotSame ( state . context , marked ) ; cleared = cc . clearAllLocal ( marked ) ; assertFalse ( cc . shouldClearLocal ( cleared ) ) ; assertEquals ( <int> , cleared . getShort ( cleared . position ( ) ) ) ; state = ContextState . allocate ( <int> , <int> , <int> ) ; state . writeLocal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; assertFalse ( cc . shouldClearLocal ( state . context ) ) ; marked = cc . markLocalToBeCleared ( state . context ) ; assertTrue ( cc . shouldClearLocal ( marked ) ) ; assertEquals ( - <int> , marked . getShort ( marked . position ( ) ) ) ; assertEquals ( <int> , marked . getShort ( marked . position ( ) + headerSizeLength ) ) ; assertEquals ( Short . MIN_VALUE + <int> , marked . getShort ( marked . position ( ) + headerSizeLength + headerEltLength ) ) ; assertEquals ( Short . MIN_VALUE + <int> , marked . getShort ( marked . position ( ) + headerSizeLength + <int> * headerEltLength ) ) ; int headerLength = headerSizeLength + <int> * headerEltLength ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , marked , headerLength ) ) ; assertEquals ( <int> , marked . getLong ( marked . position ( ) + headerLength + idLength ) ) ; assertEquals ( <int> , marked . getLong ( marked . position ( ) + headerLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , marked , headerLength + stepLength ) ) ; assertEquals ( <int> , marked . getLong ( marked . position ( ) + headerLength + stepLength + idLength ) ) ; assertEquals ( <int> , marked . getLong ( marked . position ( ) + headerLength + stepLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , marked , headerLength + <int> * stepLength ) ) ; assertEquals ( <int> , marked . getLong ( marked . position ( ) + headerLength + <int> * stepLength + idLength ) ) ; assertEquals ( <int> , marked . getLong ( marked . position ( ) + headerLength + <int> * stepLength + idLength + clockLength ) ) ; cleared = cc . clearAllLocal ( marked ) ; assertFalse ( cc . shouldClearLocal ( cleared ) ) ; assertEquals ( <int> , cleared . getShort ( cleared . position ( ) ) ) ; assertEquals ( Short . MIN_VALUE + <int> , cleared . getShort ( marked . position ( ) + headerEltLength ) ) ; assertEquals ( Short . MIN_VALUE + <int> , cleared . getShort ( marked . position ( ) + headerSizeLength + headerEltLength ) ) ; headerLength = headerSizeLength + <int> * headerEltLength ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , cleared , headerLength ) ) ; assertEquals ( <int> , cleared . getLong ( cleared . position ( ) + headerLength + idLength ) ) ; assertEquals ( <int> , cleared . getLong ( cleared . position ( ) + headerLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , cleared , headerLength + stepLength ) ) ; assertEquals ( <int> , cleared . getLong ( cleared . position ( ) + headerLength + stepLength + idLength ) ) ; assertEquals ( <int> , cleared . getLong ( cleared . position ( ) + headerLength + stepLength + idLength + clockLength ) ) ; assertTrue ( Util . equalsCounterId ( CounterId . fromInt ( <int> ) , cleared , headerLength + <int> * stepLength ) ) ; assertEquals ( <int> , cleared . getLong ( cleared . position ( ) + headerLength + <int> * stepLength + idLength ) ) ; assertEquals ( <int> , cleared . getLong ( cleared . position ( ) + headerLength + <int> * stepLength + idLength + clockLength ) ) ; state = ContextState . allocate ( <int> , <int> , <int> ) ; state . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; assertFalse ( cc . shouldClearLocal ( state . context ) ) ; marked = cc . markLocalToBeCleared ( state . context ) ; assertEquals ( <int> , marked . getShort ( marked . position ( ) ) ) ; assertSame ( state . context , marked ) ; cleared = cc . clearAllLocal ( marked ) ; assertSame ( cleared , marked ) ; } @Test public void testFindPositionOf ( ) { ContextState state = ContextState . allocate ( <int> , <int> , <int> ) ; state . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeLocal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeLocal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeLocal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; int headerLength = headerSizeLength + <int> * headerEltLength ; assertEquals ( headerLength , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( headerLength + stepLength , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( headerLength + <int> * stepLength , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( headerLength + <int> * stepLength , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( headerLength + <int> * stepLength , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( headerLength + <int> * stepLength , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( headerLength + <int> * stepLength , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( headerLength + <int> * stepLength , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( headerLength + <int> * stepLength , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( - <int> , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( - <int> , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( - <int> , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( - <int> , cc . findPositionOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; } @Test public void testGetGlockAndCountOf ( ) { ContextState state = ContextState . allocate ( <int> , <int> , <int> ) ; state . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeLocal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeLocal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeGlobal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeRemote ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; state . writeLocal ( CounterId . fromInt ( <int> ) , <int> , <int> ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> , <int> ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> L , <int> L ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> L , <int> L ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> L , <int> L ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; assertEquals ( ClockAndCount . create ( <int> L , <int> L ) , cc . getClockAndCountOf ( state . context , CounterId . fromInt ( <int> ) ) ) ; } } 

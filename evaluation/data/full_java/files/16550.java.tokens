package junit . tests . runner ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . PrintStream ; import junit . framework . TestCase ; import junit . framework . TestResult ; import junit . framework . TestSuite ; public class TextRunnerTest extends TestCase { public void testFailure ( ) throws Exception { execTest ( <str> , false ) ; } public void testSuccess ( ) throws Exception { execTest ( <str> , true ) ; } public void testError ( ) throws Exception { execTest ( <str> , false ) ; } void execTest ( String testClass , boolean success ) throws Exception { String java = System . getProperty ( <str> ) + File . separator + <str> + File . separator + <str> ; String cp = System . getProperty ( <str> ) ; String [ ] cmd = { java , <str> , cp , <str> , testClass } ; Process p = Runtime . getRuntime ( ) . exec ( cmd ) ; InputStream i = p . getInputStream ( ) ; while ( ( i . read ( ) ) ! = - <int> ) ; assertTrue ( ( p . waitFor ( ) = = <int> ) = = success ) ; if ( success ) { assertTrue ( p . exitValue ( ) = = <int> ) ; } else { assertFalse ( p . exitValue ( ) = = <int> ) ; } } public void testRunReturnsResult ( ) { PrintStream oldOut = System . out ; System . setOut ( new PrintStream ( new OutputStream ( ) { @Override public void write ( int arg0 ) throws IOException { } } ) ) ; try { TestResult result = junit . textui . TestRunner . run ( new TestSuite ( ) ) ; assertTrue ( result . wasSuccessful ( ) ) ; } finally { System . setOut ( oldOut ) ; } } } 

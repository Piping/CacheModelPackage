package org . elasticsearch . index . fielddata ; import org . elasticsearch . action . admin . cluster . stats . ClusterStatsResponse ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . greaterThan ; public class FieldDataLoadingIT extends ESIntegTestCase { public void testEagerFieldDataLoading ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . get ( ) ; ClusterStatsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getIndicesStats ( ) . getFieldData ( ) . getMemorySizeInBytes ( ) , greaterThan ( <int> l ) ) ; } public void testEagerGlobalOrdinalsFieldDataLoading ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ) ) ; ensureGreen ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . get ( ) ; ClusterStatsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareClusterStats ( ) . get ( ) ; assertThat ( response . getIndicesStats ( ) . getFieldData ( ) . getMemorySizeInBytes ( ) , greaterThan ( <int> l ) ) ; } } 

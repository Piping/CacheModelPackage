package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . FPSLogger ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . PerspectiveCamera ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . graphics . g3d . decals . CameraGroupStrategy ; import com . badlogic . gdx . graphics . g3d . decals . Decal ; import com . badlogic . gdx . graphics . g3d . decals . DecalBatch ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . tests . utils . GdxTest ; import com . badlogic . gdx . tests . utils . PerspectiveCamController ; import com . badlogic . gdx . utils . Array ; public class SimpleDecalTest extends GdxTest { private static final int NUM_DECALS = <int> ; DecalBatch batch ; Array < Decal > decals = new Array < Decal > ( ) ; PerspectiveCamera camera ; PerspectiveCamController controller ; FPSLogger logger = new FPSLogger ( ) ; public void create ( ) { float width = Gdx . graphics . getWidth ( ) ; float height = Gdx . graphics . getHeight ( ) ; camera = new PerspectiveCamera ( <int> , Gdx . graphics . getWidth ( ) , Gdx . graphics . getHeight ( ) ) ; camera . near = <int> ; camera . far = <int> ; camera . position . set ( <int> , <int> , <int> ) ; controller = new PerspectiveCamController ( camera ) ; Gdx . input . setInputProcessor ( controller ) ; batch = new DecalBatch ( new CameraGroupStrategy ( camera ) ) ; TextureRegion [ ] textures = { new TextureRegion ( new Texture ( Gdx . files . internal ( <str> ) ) ) , new TextureRegion ( new Texture ( Gdx . files . internal ( <str> ) ) ) , new TextureRegion ( new Texture ( Gdx . files . internal ( <str> ) ) ) } ; Decal decal = Decal . newDecal ( <int> , <int> , textures [ <int> ] ) ; decal . setPosition ( <int> , <int> , <int> ) ; decals . add ( decal ) ; decal = Decal . newDecal ( <int> , <int> , textures [ <int> ] , true ) ; decal . setPosition ( <float> , <float> , <int> ) ; decals . add ( decal ) ; decal = Decal . newDecal ( <int> , <int> , textures [ <int> ] , true ) ; decal . setPosition ( <int> , <int> , - <int> ) ; decals . add ( decal ) ; decal = Decal . newDecal ( <int> , <int> , textures [ <int> ] ) ; decal . setPosition ( <float> , <float> , - <int> ) ; decals . add ( decal ) ; decal = Decal . newDecal ( <int> , <int> , textures [ <int> ] ) ; decal . setPosition ( <int> , <int> , - <float> ) ; decals . add ( decal ) ; } Vector3 dir = new Vector3 ( ) ; private boolean billboard = true ; public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT | GL20 . GL_DEPTH_BUFFER_BIT ) ; Gdx . gl . glEnable ( GL20 . GL_DEPTH_TEST ) ; camera . update ( ) ; for ( int i = <int> ; i < decals . size ; i + + ) { Decal decal = decals . get ( i ) ; if ( billboard ) { decal . lookAt ( camera . position , camera . up ) ; } batch . add ( decal ) ; } batch . flush ( ) ; logger . log ( ) ; } @Override public void dispose ( ) { batch . dispose ( ) ; } } 

package org . eclipse . debug . internal . ui . launchConfigurations ; import java . util . HashSet ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchDelegate ; import org . eclipse . debug . core . IStatusHandler ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . swt . widgets . Shell ; public class DuplicateLaunchDelegatesStatusHandler implements IStatusHandler { @Override public Object handleStatus ( IStatus status , Object source ) throws CoreException { if ( source instanceof Object [ ] ) { Object [ ] infos = ( Object [ ] ) source ; if ( infos . length = = <int> ) { ILaunchConfiguration config = ( ILaunchConfiguration ) infos [ <int> ] ; String mode = ( String ) infos [ <int> ] ; Shell shell = DebugUIPlugin . getShell ( ) ; HashSet < String > modes = new HashSet < String > ( ) ; modes . add ( mode ) ; modes . addAll ( config . getModes ( ) ) ; SelectLaunchersDialog sldd = new SelectLaunchersDialog ( shell , config . getType ( ) . getDelegates ( modes ) , config . getWorkingCopy ( ) , mode ) ; if ( sldd . open ( ) ! = IDialogConstants . OK_ID ) { return Status . CANCEL_STATUS ; } ILaunchDelegate delegate = config . getPreferredDelegate ( modes ) ; if ( delegate = = null ) { delegate = config . getType ( ) . getPreferredDelegate ( modes ) ; } return ( delegate = = null ? Status . CANCEL_STATUS : Status . OK_STATUS ) ; } } return Status . CANCEL_STATUS ; } } 

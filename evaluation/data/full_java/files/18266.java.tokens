package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . Touchable ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener . ChangeEvent ; import com . badlogic . gdx . scenes . scene2d . utils . ClickListener ; import com . badlogic . gdx . scenes . scene2d . utils . Disableable ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . utils . Array ; import com . badlogic . gdx . utils . Pools ; public class Button extends Table implements Disableable { private ButtonStyle style ; boolean isChecked , isDisabled ; ButtonGroup buttonGroup ; private ClickListener clickListener ; private boolean programmaticChangeEvents = true ; public Button ( Skin skin ) { super ( skin ) ; initialize ( ) ; setStyle ( skin . get ( ButtonStyle . class ) ) ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; } public Button ( Skin skin , String styleName ) { super ( skin ) ; initialize ( ) ; setStyle ( skin . get ( styleName , ButtonStyle . class ) ) ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; } public Button ( Actor child , Skin skin , String styleName ) { this ( child , skin . get ( styleName , ButtonStyle . class ) ) ; } public Button ( Actor child , ButtonStyle style ) { initialize ( ) ; add ( child ) ; setStyle ( style ) ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; } public Button ( ButtonStyle style ) { initialize ( ) ; setStyle ( style ) ; setSize ( getPrefWidth ( ) , getPrefHeight ( ) ) ; } public Button ( ) { initialize ( ) ; } private void initialize ( ) { setTouchable ( Touchable . enabled ) ; addListener ( clickListener = new ClickListener ( ) { public void clicked ( InputEvent event , float x , float y ) { if ( isDisabled ( ) ) return ; setChecked ( ! isChecked , true ) ; } } ) ; } public Button ( Drawable up ) { this ( new ButtonStyle ( up , null , null ) ) ; } public Button ( Drawable up , Drawable down ) { this ( new ButtonStyle ( up , down , null ) ) ; } public Button ( Drawable up , Drawable down , Drawable checked ) { this ( new ButtonStyle ( up , down , checked ) ) ; } public Button ( Actor child , Skin skin ) { this ( child , skin . get ( ButtonStyle . class ) ) ; } public void setChecked ( boolean isChecked ) { setChecked ( isChecked , programmaticChangeEvents ) ; } void setChecked ( boolean isChecked , boolean fireEvent ) { if ( this . isChecked = = isChecked ) return ; if ( buttonGroup ! = null & & ! buttonGroup . canCheck ( this , isChecked ) ) return ; this . isChecked = isChecked ; if ( fireEvent ) { ChangeEvent changeEvent = Pools . obtain ( ChangeEvent . class ) ; if ( fire ( changeEvent ) ) this . isChecked = ! isChecked ; Pools . free ( changeEvent ) ; } } public void toggle ( ) { setChecked ( ! isChecked ) ; } public boolean isChecked ( ) { return isChecked ; } public boolean isPressed ( ) { return clickListener . isVisualPressed ( ) ; } public boolean isOver ( ) { return clickListener . isOver ( ) ; } public ClickListener getClickListener ( ) { return clickListener ; } public boolean isDisabled ( ) { return isDisabled ; } public void setDisabled ( boolean isDisabled ) { this . isDisabled = isDisabled ; } public void setProgrammaticChangeEvents ( boolean programmaticChangeEvents ) { this . programmaticChangeEvents = programmaticChangeEvents ; } public void setStyle ( ButtonStyle style ) { if ( style = = null ) throw new IllegalArgumentException ( <str> ) ; this . style = style ; Drawable background = null ; if ( isPressed ( ) & & ! isDisabled ( ) ) { background = style . down = = null ? style . up : style . down ; } else { if ( isDisabled ( ) & & style . disabled ! = null ) background = style . disabled ; else if ( isChecked & & style . checked ! = null ) background = ( isOver ( ) & & style . checkedOver ! = null ) ? style . checkedOver : style . checked ; else if ( isOver ( ) & & style . over ! = null ) background = style . over ; else background = style . up ; } setBackground ( background ) ; } public ButtonStyle getStyle ( ) { return style ; } public ButtonGroup getButtonGroup ( ) { return buttonGroup ; } public void draw ( Batch batch , float parentAlpha ) { validate ( ) ; boolean isPressed = isPressed ( ) ; boolean isDisabled = isDisabled ( ) ; Drawable background = null ; if ( isDisabled & & style . disabled ! = null ) background = style . disabled ; else if ( isPressed & & style . down ! = null ) background = style . down ; else if ( isChecked & & style . checked ! = null ) background = ( style . checkedOver ! = null & & isOver ( ) ) ? style . checkedOver : style . checked ; else if ( isOver ( ) & & style . over ! = null ) background = style . over ; else if ( style . up ! = null ) background = style . up ; setBackground ( background ) ; float offsetX = <int> , offsetY = <int> ; if ( isPressed & & ! isDisabled ) { offsetX = style . pressedOffsetX ; offsetY = style . pressedOffsetY ; } else if ( isChecked & & ! isDisabled ) { offsetX = style . checkedOffsetX ; offsetY = style . checkedOffsetY ; } else { offsetX = style . unpressedOffsetX ; offsetY = style . unpressedOffsetY ; } Array < Actor > children = getChildren ( ) ; for ( int i = <int> ; i < children . size ; i + + ) children . get ( i ) . moveBy ( offsetX , offsetY ) ; super . draw ( batch , parentAlpha ) ; for ( int i = <int> ; i < children . size ; i + + ) children . get ( i ) . moveBy ( - offsetX , - offsetY ) ; Stage stage = getStage ( ) ; if ( stage ! = null & & stage . getActionsRequestRendering ( ) & & isPressed ! = clickListener . isPressed ( ) ) Gdx . graphics . requestRendering ( ) ; } public float getPrefWidth ( ) { float width = super . getPrefWidth ( ) ; if ( style . up ! = null ) width = Math . max ( width , style . up . getMinWidth ( ) ) ; if ( style . down ! = null ) width = Math . max ( width , style . down . getMinWidth ( ) ) ; if ( style . checked ! = null ) width = Math . max ( width , style . checked . getMinWidth ( ) ) ; return width ; } public float getPrefHeight ( ) { float height = super . getPrefHeight ( ) ; if ( style . up ! = null ) height = Math . max ( height , style . up . getMinHeight ( ) ) ; if ( style . down ! = null ) height = Math . max ( height , style . down . getMinHeight ( ) ) ; if ( style . checked ! = null ) height = Math . max ( height , style . checked . getMinHeight ( ) ) ; return height ; } public float getMinWidth ( ) { return getPrefWidth ( ) ; } public float getMinHeight ( ) { return getPrefHeight ( ) ; } static public class ButtonStyle { public Drawable up , down , over , checked , checkedOver , disabled ; public float pressedOffsetX , pressedOffsetY , unpressedOffsetX , unpressedOffsetY , checkedOffsetX , checkedOffsetY ; public ButtonStyle ( ) { } public ButtonStyle ( Drawable up , Drawable down , Drawable checked ) { this . up = up ; this . down = down ; this . checked = checked ; } public ButtonStyle ( ButtonStyle style ) { this . up = style . up ; this . down = style . down ; this . over = style . over ; this . checked = style . checked ; this . checkedOver = style . checkedOver ; this . disabled = style . disabled ; this . pressedOffsetX = style . pressedOffsetX ; this . pressedOffsetY = style . pressedOffsetY ; this . unpressedOffsetX = style . unpressedOffsetX ; this . unpressedOffsetY = style . unpressedOffsetY ; this . checkedOffsetX = style . checkedOffsetX ; this . checkedOffsetY = style . checkedOffsetY ; } } } 

package org . gradle . integtests ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . foundation . BuildInformation ; import org . gradle . foundation . ProjectView ; import org . gradle . foundation . TaskView ; import org . gradle . foundation . TestUtility ; import org . gradle . gradleplugin . foundation . favorites . FavoriteTask ; import org . gradle . gradleplugin . foundation . favorites . FavoritesEditor ; import org . gradle . test . fixtures . file . TestNameTestDirectoryProvider ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . junit . Assert ; import org . junit . Before ; import org . junit . Rule ; import org . junit . Test ; import javax . swing . filechooser . FileFilter ; import java . io . File ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class FavoritesIntegrationTest { @Rule public final TestNameTestDirectoryProvider tempDir = new TestNameTestDirectoryProvider ( ) ; private BuildInformation buildInformation ; private ProjectView myRootProject ; private ProjectView mySubProject1 ; private TaskView mySubProject1Comple ; private TaskView mySubProject1Lib ; private TaskView mySubProject1Doc ; private ProjectView mySubSubProject ; private TaskView mySubSubProjectCompile ; private TaskView mySubSubProjectLib ; private TaskView mySubSubProjectDoc ; private ProjectView mySubProject2 ; private TaskView mySubProject2Lib ; private TaskView mySubProject2doc ; private TaskView mySubProject2Compile ; private JUnit4Mockery context ; @Before public void setUp ( ) throws Exception { context = new JUnit4Mockery ( ) ; Task subsubCompileTask = TestUtility . createTask ( context , <str> , <str> ) ; Task subsubLibTask = TestUtility . createTask ( context , <str> , <str> ) ; Task subsubDocTask = TestUtility . createTask ( context , <str> , <str> ) ; Project subsubProject = TestUtility . createMockProject ( context , <str> , <str> , <int> , null , new Task [ ] { subsubCompileTask , subsubLibTask , subsubDocTask } , null ) ; Task subCompileTask1 = TestUtility . createTask ( context , <str> , <str> ) ; Task subLibTask1 = TestUtility . createTask ( context , <str> , <str> ) ; Task subDocTask1 = TestUtility . createTask ( context , <str> , <str> ) ; Project subProject1 = TestUtility . createMockProject ( context , <str> , <str> , <int> , new Project [ ] { subsubProject } , new Task [ ] { subCompileTask1 , subLibTask1 , subDocTask1 } , null ) ; Task subCompileTask2 = TestUtility . createTask ( context , <str> , <str> ) ; Task subLibTask2 = TestUtility . createTask ( context , <str> , <str> ) ; Task subDocTask2 = TestUtility . createTask ( context , <str> , <str> ) ; Project subProject2 = TestUtility . createMockProject ( context , <str> , <str> , <int> , null , new Task [ ] { subCompileTask2 , subLibTask2 , subDocTask2 } , null ) ; Project rootProject = TestUtility . createMockProject ( context , <str> , <str> , <int> , new Project [ ] { subProject1 , subProject2 } , null , null ) ; buildInformation = new BuildInformation ( rootProject ) ; myRootProject = buildInformation . getProjectFromFullPath ( <str> ) ; Assert . assertNotNull ( myRootProject ) ; mySubProject1 = buildInformation . getProjectFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject1 ) ; mySubProject1Comple = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject1Comple ) ; mySubProject1Lib = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject1Lib ) ; mySubProject1Doc = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject1Doc ) ; mySubSubProject = buildInformation . getProjectFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubSubProject ) ; mySubSubProjectCompile = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubSubProjectCompile ) ; mySubSubProjectLib = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubSubProjectLib ) ; mySubSubProjectDoc = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubSubProjectDoc ) ; mySubProject2 = buildInformation . getProjectFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject2 ) ; mySubProject2Compile = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject2Compile ) ; mySubProject2Lib = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject2Lib ) ; mySubProject2doc = buildInformation . getTaskFromFullPath ( <str> ) ; Assert . assertNotNull ( mySubProject2doc ) ; } @Test public void testSavingRestoringFavorites ( ) { FavoritesEditor originalEditor = new FavoritesEditor ( ) ; Assert . assertTrue ( originalEditor . getFavoriteTasks ( ) . isEmpty ( ) ) ; FavoriteTask favoriteTask1 = originalEditor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask2 = originalEditor . addFavorite ( mySubSubProjectLib , false ) ; originalEditor . editFavorite ( favoriteTask1 , new FavoritesEditor . EditFavoriteInteraction ( ) { public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { favoriteTask . displayName = <str> ; return true ; } public void reportError ( String error ) { throw new AssertionError ( <str> ) ; } } ) ; FavoriteTask originalFavoriteTask1 = originalEditor . getFavoriteTasks ( ) . get ( <int> ) ; assertFavorite ( originalFavoriteTask1 , <str> , <str> , true ) ; FavoriteTask originalFavoriteTask2 = originalEditor . getFavoriteTasks ( ) . get ( <int> ) ; assertFavorite ( originalFavoriteTask2 , <str> , <str> , false ) ; File file = tempDir . createFile ( <str> ) ; originalEditor . exportToFile ( new TestUtility . TestExportInteraction ( file , true ) ) ; FavoritesEditor newEditor = new FavoritesEditor ( ) ; newEditor . importFromFile ( new TestUtility . TestImportInteraction ( file ) ) ; FavoriteTask readInFavoriteTask1 = originalEditor . getFavoriteTasks ( ) . get ( <int> ) ; assertFavorite ( readInFavoriteTask1 , originalFavoriteTask1 ) ; FavoriteTask readInFavoriteTask2 = originalEditor . getFavoriteTasks ( ) . get ( <int> ) ; assertFavorite ( readInFavoriteTask2 , originalFavoriteTask2 ) ; } @Test public void testEnsureFileHasCorrectExtension ( ) { FavoritesEditor originalEditor = new FavoritesEditor ( ) ; Assert . assertTrue ( originalEditor . getFavoriteTasks ( ) . isEmpty ( ) ) ; FavoriteTask favoriteTask1 = originalEditor . addFavorite ( mySubProject1Comple , true ) ; File incorrectFile = tempDir . createFile ( <str> ) ; File correctFile = new File ( incorrectFile . getParentFile ( ) , incorrectFile . getName ( ) + <str> ) ; if ( correctFile . exists ( ) ) { throw new AssertionError ( <str> ) ; } originalEditor . exportToFile ( new TestUtility . TestExportInteraction ( incorrectFile , true ) ) ; if ( ! correctFile . exists ( ) ) { throw new AssertionError ( <str> + correctFile . getAbsolutePath ( ) + <str> ) ; } FavoritesEditor newEditor = new FavoritesEditor ( ) ; newEditor . importFromFile ( new TestUtility . TestImportInteraction ( correctFile ) ) ; FavoriteTask readInFavoriteTask = newEditor . getFavoriteTasks ( ) . get ( <int> ) ; assertFavorite ( readInFavoriteTask , favoriteTask1 ) ; } private void assertFavorite ( FavoriteTask favoriteTaskToTest , String expectedFullTaskName , String expectedDisplayName , boolean expectedAlwaysShowOutput ) { Assert . assertEquals ( expectedFullTaskName , favoriteTaskToTest . getFullCommandLine ( ) ) ; Assert . assertEquals ( expectedDisplayName , favoriteTaskToTest . getDisplayName ( ) ) ; Assert . assertEquals ( expectedAlwaysShowOutput , favoriteTaskToTest . alwaysShowOutput ( ) ) ; } private void assertFavorite ( FavoriteTask favoriteTaskToTest , FavoriteTask expectedFavoriteTask ) { assertFavorite ( favoriteTaskToTest , expectedFavoriteTask . getFullCommandLine ( ) , expectedFavoriteTask . getDisplayName ( ) , expectedFavoriteTask . alwaysShowOutput ( ) ) ; } @Test public void testConfirmOverwrite ( ) { FavoritesEditor originalEditor = new FavoritesEditor ( ) ; Assert . assertTrue ( originalEditor . getFavoriteTasks ( ) . isEmpty ( ) ) ; FavoriteTask favoriteTask1 = originalEditor . addFavorite ( mySubProject1Comple , true ) ; File file = tempDir . createFile ( <str> ) ; Assert . assertTrue ( file . exists ( ) ) ; long originalSize = file . length ( ) ; TestOverwriteConfirmExportInteraction exportInteraction = new TestOverwriteConfirmExportInteraction ( file , false ) ; originalEditor . exportToFile ( exportInteraction ) ; Assert . assertTrue ( exportInteraction . wasConfirmed ) ; Assert . assertEquals ( originalSize , file . length ( ) ) ; } private class TestOverwriteConfirmExportInteraction extends TestUtility . TestExportInteraction { public boolean wasConfirmed ; private TestOverwriteConfirmExportInteraction ( File file , boolean confirmOverwrite ) { super ( file , confirmOverwrite ) ; } public File promptForFile ( FileFilter fileFilters ) { if ( wasConfirmed ) { return null ; } return super . promptForFile ( fileFilters ) ; } @Override public boolean confirmOverwritingExistingFile ( File file ) { wasConfirmed = true ; return false ; } } @Test public void testDuplicateSingleFavorite ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; FavoriteTask favoriteTask1 = editor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask2 = editor . addFavorite ( mySubSubProjectLib , false ) ; FavoriteTask favoriteTask3 = editor . addFavorite ( mySubSubProjectDoc , false ) ; editFavorite ( editor , favoriteTask1 , <str> , false ) ; editFavorite ( editor , favoriteTask2 , <str> , true ) ; editFavorite ( editor , favoriteTask3 , <str> , false ) ; FavoriteTask favoriteTask4 = editor . duplicateFavorite ( favoriteTask1 , new TestEditFavoriteInteraction ( <str> , <str> ) ) ; Assert . assertNotNull ( favoriteTask4 ) ; Assert . assertEquals ( <str> , favoriteTask4 . getFullCommandLine ( ) ) ; Assert . assertEquals ( <str> , favoriteTask4 . getDisplayName ( ) ) ; Assert . assertEquals ( favoriteTask1 . alwaysShowOutput ( ) , favoriteTask4 . alwaysShowOutput ( ) ) ; Assert . assertEquals ( <int> , editor . getFavoriteTasks ( ) . size ( ) ) ; FavoriteTask favoriteTask5 = editor . duplicateFavorite ( favoriteTask2 , new TestEditFavoriteInteraction ( <str> , <str> ) ) ; Assert . assertNotNull ( favoriteTask5 ) ; Assert . assertEquals ( <str> , favoriteTask5 . getFullCommandLine ( ) ) ; Assert . assertEquals ( <str> , favoriteTask5 . getDisplayName ( ) ) ; Assert . assertEquals ( favoriteTask2 . alwaysShowOutput ( ) , favoriteTask5 . alwaysShowOutput ( ) ) ; Assert . assertEquals ( <int> , editor . getFavoriteTasks ( ) . size ( ) ) ; } @Test public void testDuplicatingMultipleFavorites ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; FavoriteTask favoriteTask1 = editor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask2 = editor . addFavorite ( mySubSubProjectLib , false ) ; FavoriteTask favoriteTask3 = editor . addFavorite ( mySubSubProjectDoc , false ) ; editFavorite ( editor , favoriteTask1 , <str> , false ) ; editFavorite ( editor , favoriteTask2 , <str> , true ) ; editFavorite ( editor , favoriteTask3 , <str> , false ) ; List < FavoriteTask > tasksToCopy = new ArrayList < FavoriteTask > ( ) ; tasksToCopy . add ( favoriteTask1 ) ; tasksToCopy . add ( favoriteTask2 ) ; editor . duplicateFavorites ( tasksToCopy , new TestEditFavoriteInteraction ( new NameAndCommand ( <str> , <str> ) , new NameAndCommand ( <str> , <str> ) ) ) ; Assert . assertEquals ( <int> , editor . getFavoriteTasks ( ) . size ( ) ) ; FavoriteTask favoriteTask4 = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertNotNull ( favoriteTask4 ) ; Assert . assertEquals ( <str> , favoriteTask4 . getFullCommandLine ( ) ) ; Assert . assertEquals ( <str> , favoriteTask4 . getDisplayName ( ) ) ; Assert . assertEquals ( favoriteTask1 . alwaysShowOutput ( ) , favoriteTask4 . alwaysShowOutput ( ) ) ; FavoriteTask favoriteTask5 = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertNotNull ( favoriteTask5 ) ; Assert . assertEquals ( <str> , favoriteTask5 . getFullCommandLine ( ) ) ; Assert . assertEquals ( <str> , favoriteTask5 . getDisplayName ( ) ) ; Assert . assertEquals ( favoriteTask2 . alwaysShowOutput ( ) , favoriteTask5 . alwaysShowOutput ( ) ) ; } @Test public void testDuplicatingMultipleFavoritesAndCanceling ( ) { FavoritesEditor editor = new FavoritesEditor ( ) ; FavoriteTask favoriteTask1 = editor . addFavorite ( mySubProject1Comple , true ) ; FavoriteTask favoriteTask2 = editor . addFavorite ( mySubSubProjectLib , false ) ; FavoriteTask favoriteTask3 = editor . addFavorite ( mySubSubProjectDoc , false ) ; editFavorite ( editor , favoriteTask1 , <str> , false ) ; editFavorite ( editor , favoriteTask2 , <str> , true ) ; editFavorite ( editor , favoriteTask3 , <str> , false ) ; List < FavoriteTask > tasksToCopy = new ArrayList < FavoriteTask > ( ) ; tasksToCopy . add ( favoriteTask1 ) ; tasksToCopy . add ( favoriteTask2 ) ; editor . duplicateFavorites ( tasksToCopy , new TestEditFavoriteInteraction ( new NameAndCommand ( <str> , <str> ) ) ) ; Assert . assertNotSame ( <str> , <int> , editor . getFavoriteTasks ( ) . size ( ) ) ; Assert . assertEquals ( <int> , editor . getFavoriteTasks ( ) . size ( ) ) ; FavoriteTask favoriteTask4 = editor . getFavoriteTasks ( ) . get ( <int> ) ; Assert . assertNotNull ( favoriteTask4 ) ; Assert . assertEquals ( <str> , favoriteTask4 . getFullCommandLine ( ) ) ; Assert . assertEquals ( <str> , favoriteTask4 . getDisplayName ( ) ) ; Assert . assertEquals ( favoriteTask1 . alwaysShowOutput ( ) , favoriteTask4 . alwaysShowOutput ( ) ) ; } private class TestEditFavoriteInteraction implements FavoritesEditor . EditFavoriteInteraction { private List < NameAndCommand > values = new ArrayList < NameAndCommand > ( ) ; private TestEditFavoriteInteraction ( NameAndCommand . . . values ) { if ( values ! = null ) { this . values = new ArrayList < NameAndCommand > ( Arrays . asList ( values ) ) ; } } private TestEditFavoriteInteraction ( String displayName , String fullCommandLine ) { values . add ( new NameAndCommand ( displayName , fullCommandLine ) ) ; } public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { if ( values . isEmpty ( ) ) { return false ; } NameAndCommand nameAndCommand = values . remove ( <int> ) ; favoriteTask . displayName = nameAndCommand . displayName ; favoriteTask . fullCommandLine = nameAndCommand . fullCommandLine ; return true ; } public void reportError ( String error ) { throw new AssertionError ( <str> + error ) ; } } private class NameAndCommand { String displayName ; String fullCommandLine ; private NameAndCommand ( String displayName , String fullCommandLine ) { this . displayName = displayName ; this . fullCommandLine = fullCommandLine ; } } private void editFavorite ( FavoritesEditor editor , FavoriteTask favoriteTask , final String newDisplayName , final boolean newAlwaysShowOutput ) { editor . editFavorite ( favoriteTask , new FavoritesEditor . EditFavoriteInteraction ( ) { public boolean editFavorite ( FavoritesEditor . EditibleFavoriteTask favoriteTask ) { favoriteTask . displayName = newDisplayName ; favoriteTask . alwaysShowOutput = newAlwaysShowOutput ; return true ; } public void reportError ( String error ) { throw new AssertionError ( <str> ) ; } } ) ; Assert . assertEquals ( newDisplayName , favoriteTask . getDisplayName ( ) ) ; } } 

package io . netty . handler . codec . socks ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import org . junit . Test ; import static org . junit . Assert . * ; public class SocksCmdResponseTest { @Test public void testConstructorParamsAreNotNull ( ) { try { new SocksCmdResponse ( null , SocksAddressType . UNKNOWN ) ; } catch ( Exception e ) { assertTrue ( e instanceof NullPointerException ) ; } try { new SocksCmdResponse ( SocksCmdStatus . UNASSIGNED , null ) ; } catch ( Exception e ) { assertTrue ( e instanceof NullPointerException ) ; } } @Test public void testEmptyDomain ( ) { SocksCmdResponse socksCmdResponse = new SocksCmdResponse ( SocksCmdStatus . SUCCESS , SocksAddressType . DOMAIN ) ; assertNull ( socksCmdResponse . host ( ) ) ; assertEquals ( <int> , socksCmdResponse . port ( ) ) ; ByteBuf buffer = Unpooled . buffer ( <int> ) ; socksCmdResponse . encodeAsByteBuf ( buffer ) ; byte [ ] expected = { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> } ; assertByteBufEquals ( expected , buffer ) ; } @Test public void testIPv4Host ( ) { SocksCmdResponse socksCmdResponse = new SocksCmdResponse ( SocksCmdStatus . SUCCESS , SocksAddressType . IPv4 , <str> , <int> ) ; assertEquals ( <str> , socksCmdResponse . host ( ) ) ; assertEquals ( <int> , socksCmdResponse . port ( ) ) ; ByteBuf buffer = Unpooled . buffer ( <int> ) ; socksCmdResponse . encodeAsByteBuf ( buffer ) ; byte [ ] expected = { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> } ; assertByteBufEquals ( expected , buffer ) ; } @Test public void testEmptyBoundAddress ( ) { SocksCmdResponse socksCmdResponse = new SocksCmdResponse ( SocksCmdStatus . SUCCESS , SocksAddressType . DOMAIN , <str> , <int> ) ; assertEquals ( <str> , socksCmdResponse . host ( ) ) ; assertEquals ( <int> , socksCmdResponse . port ( ) ) ; ByteBuf buffer = Unpooled . buffer ( <int> ) ; socksCmdResponse . encodeAsByteBuf ( buffer ) ; byte [ ] expected = { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> } ; assertByteBufEquals ( expected , buffer ) ; } @Test ( expected = IllegalArgumentException . class ) public void testInvalidBoundAddress ( ) { new SocksCmdResponse ( SocksCmdStatus . SUCCESS , SocksAddressType . IPv4 , <str> , <int> ) ; } private static void assertByteBufEquals ( byte [ ] expected , ByteBuf actual ) { byte [ ] actualBytes = new byte [ actual . readableBytes ( ) ] ; actual . readBytes ( actualBytes ) ; assertEquals ( <str> , expected . length , actualBytes . length ) ; assertArrayEquals ( <str> , expected , actualBytes ) ; } @Test public void testValidPortRange ( ) { try { new SocksCmdResponse ( SocksCmdStatus . SUCCESS , SocksAddressType . IPv4 , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } try { new SocksCmdResponse ( SocksCmdStatus . SUCCESS , SocksAddressType . IPv4 , <str> , <int> ) ; } catch ( Exception e ) { assertTrue ( e instanceof IllegalArgumentException ) ; } } } 

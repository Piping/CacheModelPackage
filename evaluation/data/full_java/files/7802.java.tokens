package org . elasticsearch . cluster ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . common . transport . DummyTransportAddress ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; public class ClusterStateTests extends ESTestCase { public void testSupersedes ( ) { final DiscoveryNode node1 = new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) ; final DiscoveryNode node2 = new DiscoveryNode ( <str> , DummyTransportAddress . INSTANCE , Version . CURRENT ) ; final DiscoveryNodes nodes = DiscoveryNodes . builder ( ) . put ( node1 ) . put ( node2 ) . build ( ) ; ClusterState noMaster1 = ClusterState . builder ( ClusterName . DEFAULT ) . version ( randomInt ( <int> ) ) . nodes ( nodes ) . build ( ) ; ClusterState noMaster2 = ClusterState . builder ( ClusterName . DEFAULT ) . version ( randomInt ( <int> ) ) . nodes ( nodes ) . build ( ) ; ClusterState withMaster1a = ClusterState . builder ( ClusterName . DEFAULT ) . version ( randomInt ( <int> ) ) . nodes ( DiscoveryNodes . builder ( nodes ) . masterNodeId ( node1 . id ( ) ) ) . build ( ) ; ClusterState withMaster1b = ClusterState . builder ( ClusterName . DEFAULT ) . version ( randomInt ( <int> ) ) . nodes ( DiscoveryNodes . builder ( nodes ) . masterNodeId ( node1 . id ( ) ) ) . build ( ) ; ClusterState withMaster2 = ClusterState . builder ( ClusterName . DEFAULT ) . version ( randomInt ( <int> ) ) . nodes ( DiscoveryNodes . builder ( nodes ) . masterNodeId ( node2 . id ( ) ) ) . build ( ) ; assertFalse ( noMaster1 . supersedes ( noMaster2 ) ) ; assertFalse ( noMaster1 . supersedes ( withMaster1a ) ) ; assertFalse ( withMaster1a . supersedes ( withMaster2 ) ) ; assertFalse ( withMaster1a . supersedes ( noMaster1 ) ) ; assertThat ( withMaster1a . supersedes ( withMaster1b ) , equalTo ( withMaster1a . version ( ) > withMaster1b . version ( ) ) ) ; } } 

package org . gradle . build . docs . dsl . source ; import com . google . common . collect . HashMultimap ; import com . google . common . collect . Multimap ; import org . gradle . api . Action ; import org . gradle . api . DefaultTask ; import org . gradle . api . tasks . Input ; import org . gradle . api . tasks . InputFile ; import org . gradle . api . tasks . OutputFile ; import org . gradle . api . tasks . TaskAction ; import org . gradle . build . docs . dsl . source . model . ClassMetaData ; import org . gradle . build . docs . model . SimpleClassMetaDataRepository ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . * ; public class GenerateDefaultImportsTask extends DefaultTask { private File metaDataFile ; private File destFile ; private Set < String > excludePatterns = new HashSet < String > ( ) ; private Set < String > extraPackages = new HashSet < String > ( ) ; @InputFile public File getMetaDataFile ( ) { return metaDataFile ; } public void setMetaDataFile ( File metaDataFile ) { this . metaDataFile = metaDataFile ; } @OutputFile public File getDestFile ( ) { return destFile ; } public void setDestFile ( File destFile ) { this . destFile = destFile ; } @Input public Set < String > getExcludedPackages ( ) { return excludePatterns ; } public void setExcludedPackages ( Set < String > excludedPackages ) { this . excludePatterns = excludedPackages ; } public void excludePackage ( String name ) { excludePatterns . add ( name ) ; } public Set < String > getExtraPackages ( ) { return extraPackages ; } public void setExtraPackages ( Set < String > extraPackages ) { this . extraPackages = extraPackages ; } public void extraPackage ( String name ) { extraPackages . add ( name ) ; } @TaskAction public void generate ( ) throws IOException { SimpleClassMetaDataRepository < ClassMetaData > repository = new SimpleClassMetaDataRepository < ClassMetaData > ( ) ; repository . load ( getMetaDataFile ( ) ) ; final Set < String > excludedPrefixes = new HashSet < String > ( ) ; final Set < String > excludedPackages = new HashSet < String > ( ) ; for ( String excludePattern : excludePatterns ) { if ( excludePattern . endsWith ( <str> ) ) { String baseName = excludePattern . substring ( <int> , excludePattern . length ( ) - <int> ) ; excludedPrefixes . add ( baseName + <str> ) ; excludedPackages . add ( baseName ) ; } else { excludedPackages . add ( excludePattern ) ; } } final Set < String > packages = new TreeSet < String > ( ) ; packages . addAll ( extraPackages ) ; final Multimap < String , String > simpleNames = HashMultimap . create ( ) ; repository . each ( new Action < ClassMetaData > ( ) { public void execute ( ClassMetaData classMetaData ) { if ( classMetaData . getOuterClassName ( ) ! = null ) { return ; } String packageName = classMetaData . getPackageName ( ) ; if ( excludedPackages . contains ( packageName ) ) { return ; } for ( String excludedPrefix : excludedPrefixes ) { if ( packageName . startsWith ( excludedPrefix ) ) { return ; } } simpleNames . put ( classMetaData . getSimpleName ( ) , classMetaData . getClassName ( ) ) ; packages . add ( packageName ) ; } } ) ; for ( Map . Entry < String , Collection < String > > entry : simpleNames . asMap ( ) . entrySet ( ) ) { if ( entry . getValue ( ) . size ( ) > <int> ) { System . out . println ( String . format ( <str> , entry . getKey ( ) ) ) ; for ( String className : entry . getValue ( ) ) { System . out . println ( <str> + className ) ; } } } final PrintWriter writer = new PrintWriter ( new FileWriter ( getDestFile ( ) ) ) ; try { for ( String packageName : packages ) { writer . print ( <str> ) ; writer . print ( packageName ) ; writer . println ( <str> ) ; } } finally { writer . close ( ) ; } } } 

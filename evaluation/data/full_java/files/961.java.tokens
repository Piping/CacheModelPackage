package org . apache . cassandra . service ; import java . io . File ; import java . io . IOException ; import java . nio . file . * ; import java . nio . file . attribute . BasicFileAttributes ; import java . util . * ; import com . google . common . base . Joiner ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Iterables ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cassandra . config . CFMetaData ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . config . Schema ; import org . apache . cassandra . db . * ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . StartupException ; import org . apache . cassandra . io . sstable . Descriptor ; import org . apache . cassandra . utils . * ; public class StartupChecks { private static final Logger logger = LoggerFactory . getLogger ( StartupChecks . class ) ; private final List < StartupCheck > preFlightChecks = new ArrayList < > ( ) ; private final List < StartupCheck > DEFAULT_TESTS = ImmutableList . of ( checkJemalloc , checkValidLaunchDate , checkJMXPorts , inspectJvmOptions , checkJnaInitialization , initSigarLibrary , checkDataDirs , checkSSTablesFormat , checkSystemKeyspaceState , checkDatacenter , checkRack ) ; public StartupChecks withDefaultTests ( ) { preFlightChecks . addAll ( DEFAULT_TESTS ) ; return this ; } public StartupChecks withTest ( StartupCheck test ) { preFlightChecks . add ( test ) ; return this ; } public void verify ( ) throws StartupException { for ( StartupCheck test : preFlightChecks ) test . execute ( ) ; } public static final StartupCheck checkJemalloc = new StartupCheck ( ) { public void execute ( ) throws StartupException { if ( FBUtilities . isWindows ( ) ) return ; String jemalloc = System . getProperty ( <str> ) ; if ( jemalloc = = null ) logger . warn ( <str> ) ; else if ( <str> . equals ( jemalloc ) ) logger . info ( <str> ) ; else logger . info ( <str> , jemalloc ) ; } } ; public static final StartupCheck checkValidLaunchDate = new StartupCheck ( ) { private static final long EARLIEST_LAUNCH_DATE = <int> ; public void execute ( ) throws StartupException { long now = System . currentTimeMillis ( ) ; if ( now < EARLIEST_LAUNCH_DATE ) throw new StartupException ( <int> , String . format ( <str> , new Date ( now ) . toString ( ) ) ) ; } } ; public static final StartupCheck checkJMXPorts = new StartupCheck ( ) { public void execute ( ) { String jmxPort = System . getProperty ( <str> ) ; if ( jmxPort = = null ) { logger . warn ( <str> ) ; jmxPort = System . getProperty ( <str> ) ; if ( jmxPort = = null ) logger . error ( <str> ) ; } else { logger . info ( <str> + jmxPort ) ; } } } ; public static final StartupCheck inspectJvmOptions = new StartupCheck ( ) { public void execute ( ) { if ( ! DatabaseDescriptor . hasLargeAddressSpace ( ) ) logger . warn ( <str> ) ; String javaVmName = System . getProperty ( <str> ) ; if ( javaVmName . contains ( <str> ) ) { logger . warn ( <str> ) ; } else if ( ! javaVmName . contains ( <str> ) ) { logger . warn ( <str> ) ; } } } ; public static final StartupCheck checkJnaInitialization = new StartupCheck ( ) { public void execute ( ) throws StartupException { if ( ! CLibrary . jnaAvailable ( ) ) throw new StartupException ( <int> , <str> ) ; } } ; public static final StartupCheck initSigarLibrary = new StartupCheck ( ) { public void execute ( ) { new SigarLibrary ( ) . warnIfRunningInDegradedMode ( ) ; } } ; public static final StartupCheck checkDataDirs = ( ) - > { Iterable < String > dirs = Iterables . concat ( Arrays . asList ( DatabaseDescriptor . getAllDataFileLocations ( ) ) , Arrays . asList ( DatabaseDescriptor . getCommitLogLocation ( ) , DatabaseDescriptor . getSavedCachesLocation ( ) , DatabaseDescriptor . getHintsDirectory ( ) . getAbsolutePath ( ) ) ) ; for ( String dataDir : dirs ) { logger . debug ( <str> , dataDir ) ; File dir = new File ( dataDir ) ; if ( ! dir . exists ( ) ) { logger . warn ( <str> , dataDir ) ; if ( ! dir . mkdirs ( ) ) throw new StartupException ( <int> , <str> + dataDir ) ; } if ( ! Directories . verifyFullPermissions ( dir , dataDir ) ) throw new StartupException ( <int> , <str> + dataDir ) ; } } ; public static final StartupCheck checkSSTablesFormat = new StartupCheck ( ) { public void execute ( ) throws StartupException { final Set < String > invalid = new HashSet < > ( ) ; FileVisitor < Path > sstableVisitor = new SimpleFileVisitor < Path > ( ) { public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { if ( ! Descriptor . isValidFile ( file . getFileName ( ) . toString ( ) ) ) return FileVisitResult . CONTINUE ; try { if ( ! Descriptor . fromFilename ( file . toString ( ) ) . isCompatible ( ) ) invalid . add ( file . toString ( ) ) ; } catch ( Exception e ) { invalid . add ( file . toString ( ) ) ; } return FileVisitResult . CONTINUE ; } public FileVisitResult preVisitDirectory ( Path dir , BasicFileAttributes attrs ) throws IOException { String name = dir . getFileName ( ) . toString ( ) ; return ( name . equals ( Directories . SNAPSHOT_SUBDIR ) | | name . equals ( Directories . BACKUPS_SUBDIR ) ) ? FileVisitResult . SKIP_SUBTREE : FileVisitResult . CONTINUE ; } } ; for ( String dataDir : DatabaseDescriptor . getAllDataFileLocations ( ) ) { try { Files . walkFileTree ( Paths . get ( dataDir ) , sstableVisitor ) ; } catch ( IOException e ) { throw new StartupException ( <int> , <str> , e ) ; } } if ( ! invalid . isEmpty ( ) ) throw new StartupException ( <int> , String . format ( <str> + <str> + <str> + <str> , Joiner . on ( <str> ) . join ( invalid ) ) ) ; } } ; public static final StartupCheck checkSystemKeyspaceState = new StartupCheck ( ) { public void execute ( ) throws StartupException { for ( CFMetaData cfm : Schema . instance . getTablesAndViews ( SystemKeyspace . NAME ) ) ColumnFamilyStore . scrubDataDirectories ( cfm ) ; try { SystemKeyspace . checkHealth ( ) ; } catch ( ConfigurationException e ) { throw new StartupException ( <int> , <str> , e ) ; } } } ; public static final StartupCheck checkDatacenter = new StartupCheck ( ) { public void execute ( ) throws StartupException { if ( ! Boolean . getBoolean ( <str> ) ) { String storedDc = SystemKeyspace . getDatacenter ( ) ; if ( storedDc ! = null ) { String currentDc = DatabaseDescriptor . getEndpointSnitch ( ) . getDatacenter ( FBUtilities . getBroadcastAddress ( ) ) ; if ( ! storedDc . equals ( currentDc ) ) { String formatMessage = <str> + <str> ; throw new StartupException ( <int> , String . format ( formatMessage , currentDc , storedDc ) ) ; } } } } } ; public static final StartupCheck checkRack = new StartupCheck ( ) { public void execute ( ) throws StartupException { if ( ! Boolean . getBoolean ( <str> ) ) { String storedRack = SystemKeyspace . getRack ( ) ; if ( storedRack ! = null ) { String currentRack = DatabaseDescriptor . getEndpointSnitch ( ) . getRack ( FBUtilities . getBroadcastAddress ( ) ) ; if ( ! storedRack . equals ( currentRack ) ) { String formatMessage = <str> + <str> ; throw new StartupException ( <int> , String . format ( formatMessage , currentRack , storedRack ) ) ; } } } } } ; } 

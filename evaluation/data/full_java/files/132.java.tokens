package org . apache . cassandra . cql3 ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import java . util . stream . Collectors ; import java . util . stream . Stream ; import org . apache . cassandra . config . ColumnDefinition ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . cql3 . statements . CQL3CasRequest ; import org . apache . cassandra . db . Clustering ; import static java . util . stream . StreamSupport . stream ; public final class ColumnConditions extends AbstractConditions { private final List < ColumnCondition > columnConditions ; private final List < ColumnCondition > staticConditions ; private ColumnConditions ( Builder builder ) { this . columnConditions = builder . columnConditions ; this . staticConditions = builder . staticConditions ; } @Override public boolean appliesToStaticColumns ( ) { return ! staticConditions . isEmpty ( ) ; } @Override public boolean appliesToRegularColumns ( ) { return ! columnConditions . isEmpty ( ) ; } @Override public Collection < ColumnDefinition > getColumns ( ) { return Stream . concat ( columnConditions . stream ( ) , staticConditions . stream ( ) ) . map ( e - > e . column ) . collect ( Collectors . toList ( ) ) ; } @Override public boolean isEmpty ( ) { return columnConditions . isEmpty ( ) & & staticConditions . isEmpty ( ) ; } public void addConditionsTo ( CQL3CasRequest request , Clustering clustering , QueryOptions options ) { if ( ! columnConditions . isEmpty ( ) ) request . addConditions ( clustering , columnConditions , options ) ; if ( ! staticConditions . isEmpty ( ) ) request . addConditions ( Clustering . STATIC_CLUSTERING , staticConditions , options ) ; } @Override public Iterable < Function > getFunctions ( ) { return Stream . concat ( columnConditions . stream ( ) , staticConditions . stream ( ) ) . flatMap ( e - > stream ( e . getFunctions ( ) . spliterator ( ) , false ) ) . collect ( Collectors . toList ( ) ) ; } public static Builder newBuilder ( ) { return new Builder ( ) ; } public static final class Builder { private List < ColumnCondition > columnConditions = Collections . emptyList ( ) ; private List < ColumnCondition > staticConditions = Collections . emptyList ( ) ; public Builder add ( ColumnCondition condition ) { List < ColumnCondition > conds = null ; if ( condition . column . isStatic ( ) ) { if ( staticConditions . isEmpty ( ) ) staticConditions = new ArrayList < > ( ) ; conds = staticConditions ; } else { if ( columnConditions . isEmpty ( ) ) columnConditions = new ArrayList < > ( ) ; conds = columnConditions ; } conds . add ( condition ) ; return this ; } public ColumnConditions build ( ) { return new ColumnConditions ( this ) ; } private Builder ( ) { } } } 

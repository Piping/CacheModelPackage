package org . gradle . plugins . javascript . envjs . http . simple ; import org . gradle . api . UncheckedIOException ; import org . gradle . internal . concurrent . Stoppable ; import org . gradle . plugins . javascript . envjs . http . HttpFileServer ; import org . gradle . plugins . javascript . envjs . http . HttpFileServerFactory ; import org . gradle . plugins . javascript . envjs . http . simple . internal . SimpleFileServerContainer ; import org . simpleframework . http . core . Container ; import org . simpleframework . http . core . ContainerServer ; import org . simpleframework . http . resource . FileContext ; import org . simpleframework . transport . Server ; import org . simpleframework . transport . connect . Connection ; import org . simpleframework . transport . connect . SocketConnection ; import java . io . File ; import java . io . IOException ; import java . net . InetSocketAddress ; public class SimpleHttpFileServerFactory implements HttpFileServerFactory { public HttpFileServer start ( File contentRoot , int port ) { Container container = new SimpleFileServerContainer ( new FileContext ( contentRoot ) ) ; try { final Server server = new ContainerServer ( container ) ; Connection connection = new SocketConnection ( server ) ; InetSocketAddress address = new InetSocketAddress ( port ) ; InetSocketAddress usedAddress = ( InetSocketAddress ) connection . connect ( address ) ; return new SimpleHttpFileServer ( contentRoot , usedAddress . getPort ( ) , new Stoppable ( ) { public void stop ( ) { try { server . stop ( ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } ) ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } } 

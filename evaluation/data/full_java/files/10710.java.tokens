package org . gradle . build . docs . dsl . docbook ; import java . util . * ; public class HtmlToXmlJavadocLexer implements JavadocLexer { private final JavadocLexer lexer ; private final Set < String > blockElements = new HashSet < String > ( ) ; private final Set < String > blockContent = new HashSet < String > ( ) ; public HtmlToXmlJavadocLexer ( JavadocLexer lexer ) { this . lexer = lexer ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockElements . add ( <str> ) ; blockContent . add ( <str> ) ; blockContent . add ( <str> ) ; blockContent . add ( <str> ) ; blockContent . add ( <str> ) ; blockContent . add ( <str> ) ; blockContent . add ( <str> ) ; blockContent . add ( <str> ) ; } public void visit ( TokenVisitor visitor ) { lexer . visit ( new VisitorImpl ( visitor ) ) ; } private class VisitorImpl extends TokenVisitor { private final TokenVisitor visitor ; private final LinkedList < String > elementStack = new LinkedList < String > ( ) ; private final Map < String , String > attributes = new HashMap < String , String > ( ) ; public VisitorImpl ( TokenVisitor visitor ) { this . visitor = visitor ; } private void unwindTo ( String element , TokenVisitor visitor ) { if ( elementStack . contains ( element ) ) { while ( ! elementStack . getFirst ( ) . equals ( element ) ) { visitor . onEndHtmlElement ( elementStack . removeFirst ( ) ) ; } elementStack . removeFirst ( ) ; visitor . onEndHtmlElement ( element ) ; } } private void unwindTo ( Collection < String > ancestors , TokenVisitor visitor ) { for ( int i = <int> ; i < elementStack . size ( ) ; i + + ) { if ( ancestors . contains ( elementStack . get ( i ) ) ) { for ( ; i > <int> ; i - - ) { visitor . onEndHtmlElement ( elementStack . removeFirst ( ) ) ; } break ; } } } @Override public void onStartHtmlElement ( String name ) { attributes . clear ( ) ; } @Override public void onHtmlElementAttribute ( String name , String value ) { attributes . put ( name , value ) ; } @Override public void onStartHtmlElementComplete ( String name ) { if ( name . equals ( <str> ) ) { unwindTo ( Arrays . asList ( <str> , <str> ) , visitor ) ; } else if ( name . equals ( <str> ) | | name . endsWith ( <str> ) ) { unwindTo ( Arrays . asList ( <str> ) , visitor ) ; } else if ( name . equals ( <str> ) ) { unwindTo ( Arrays . asList ( <str> , <str> , <str> ) , visitor ) ; } else if ( name . equals ( <str> ) | | name . endsWith ( <str> ) ) { unwindTo ( Arrays . asList ( <str> , <str> , <str> , <str> ) , visitor ) ; } else if ( blockElements . contains ( name ) ) { unwindTo ( <str> , visitor ) ; } else if ( ! blockContent . contains ( name ) & & ! ( name . equals ( <str> ) & & attributes . containsKey ( <str> ) ) ) { onInlineContent ( ) ; } elementStack . addFirst ( name ) ; visitor . onStartHtmlElement ( name ) ; for ( Map . Entry < String , String > entry : attributes . entrySet ( ) ) { visitor . onHtmlElementAttribute ( entry . getKey ( ) , entry . getValue ( ) ) ; } attributes . clear ( ) ; visitor . onStartHtmlElementComplete ( name ) ; } @Override public void onEndHtmlElement ( String name ) { unwindTo ( name , visitor ) ; } private void onInlineContent ( ) { if ( elementStack . isEmpty ( ) | | blockContent . contains ( elementStack . getFirst ( ) ) ) { elementStack . addFirst ( <str> ) ; visitor . onStartHtmlElement ( <str> ) ; visitor . onStartHtmlElementComplete ( <str> ) ; } } @Override public void onStartJavadocTag ( String name ) { onInlineContent ( ) ; visitor . onStartJavadocTag ( name ) ; } @Override public void onEndJavadocTag ( String name ) { onInlineContent ( ) ; visitor . onEndJavadocTag ( name ) ; } @Override public void onText ( String text ) { boolean ws = text . matches ( <str> ) ; if ( ! ws ) { onInlineContent ( ) ; visitor . onText ( text ) ; } else if ( ! elementStack . isEmpty ( ) & & ! blockContent . contains ( elementStack . getFirst ( ) ) ) { visitor . onText ( text ) ; } } @Override void onEnd ( ) { while ( ! elementStack . isEmpty ( ) ) { visitor . onEndHtmlElement ( elementStack . removeFirst ( ) ) ; } visitor . onEnd ( ) ; } } } 

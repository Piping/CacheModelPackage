package io . netty . handler . codec . http ; import io . netty . util . CharsetUtil ; import org . junit . Assert ; import org . junit . Test ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; public class QueryStringDecoderTest { @Test public void testBasicUris ( ) throws URISyntaxException { QueryStringDecoder d = new QueryStringDecoder ( new URI ( <str> ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . size ( ) ) ; } @Test public void testBasic ( ) throws Exception { QueryStringDecoder d ; d = new QueryStringDecoder ( <str> ) ; Assert . assertEquals ( <str> , d . path ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . size ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . get ( <str> ) . size ( ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; d = new QueryStringDecoder ( <str> ) ; Assert . assertEquals ( <str> , d . path ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . size ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . get ( <str> ) . size ( ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; d = new QueryStringDecoder ( <str> ) ; Assert . assertEquals ( <str> , d . path ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . size ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . get ( <str> ) . size ( ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; d = new QueryStringDecoder ( <str> ) ; Assert . assertEquals ( <str> , d . path ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . size ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . get ( <str> ) . size ( ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; d = new QueryStringDecoder ( <str> ) ; Assert . assertEquals ( <str> , d . path ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . size ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . get ( <str> ) . size ( ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; d = new QueryStringDecoder ( <str> ) ; Assert . assertEquals ( <str> , d . path ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . size ( ) ) ; Assert . assertEquals ( <int> , d . parameters ( ) . get ( <str> ) . size ( ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; Assert . assertEquals ( <str> , d . parameters ( ) . get ( <str> ) . get ( <int> ) ) ; } @Test public void testExotic ( ) throws Exception { assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; assertQueryString ( <str> , <str> ) ; } @Test public void testHashDos ( ) throws Exception { StringBuilder buf = new StringBuilder ( ) ; buf . append ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { buf . append ( <str> ) ; buf . append ( i ) ; buf . append ( <str> ) ; buf . append ( i ) ; buf . append ( <str> ) ; } Assert . assertEquals ( <int> , new QueryStringDecoder ( buf . toString ( ) ) . parameters ( ) . size ( ) ) ; } @Test public void testHasPath ( ) throws Exception { QueryStringDecoder decoder = new QueryStringDecoder ( <str> , false ) ; Assert . assertEquals ( <str> , decoder . path ( ) ) ; Map < String , List < String > > params = decoder . parameters ( ) ; Assert . assertEquals ( <int> , params . size ( ) ) ; Assert . assertTrue ( params . containsKey ( <str> ) ) ; List < String > param = params . get ( <str> ) ; Assert . assertNotNull ( param ) ; Assert . assertEquals ( <int> , param . size ( ) ) ; Assert . assertEquals ( <str> , param . get ( <int> ) ) ; } @Test public void testUrlDecoding ( ) throws Exception { final String caffe = new String ( new byte [ ] { <str> , <str> , <str> , <str> , ( byte ) <hex> , ( byte ) <hex> } , <str> ) ; final String [ ] tests = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , caffe , } ; for ( int i = <int> ; i < tests . length ; i + = <int> ) { final String encoded = tests [ i ] ; final String expected = tests [ i + <int> ] ; try { final String decoded = QueryStringDecoder . decodeComponent ( encoded ) ; Assert . assertEquals ( expected , decoded ) ; } catch ( IllegalArgumentException e ) { Assert . assertTrue ( <str> + e . getMessage ( ) + <str> + <str> + expected + <str> , e . getMessage ( ) . contains ( expected ) ) ; } } } private static void assertQueryString ( String expected , String actual ) { QueryStringDecoder ed = new QueryStringDecoder ( expected , CharsetUtil . UTF_8 ) ; QueryStringDecoder ad = new QueryStringDecoder ( actual , CharsetUtil . UTF_8 ) ; Assert . assertEquals ( ed . path ( ) , ad . path ( ) ) ; Assert . assertEquals ( ed . parameters ( ) , ad . parameters ( ) ) ; } @Test public void testURI ( ) { URI uri = URI . create ( <str> ) ; QueryStringDecoder decoder = new QueryStringDecoder ( uri ) ; Assert . assertEquals ( <str> , decoder . path ( ) ) ; Map < String , List < String > > params = decoder . parameters ( ) ; Assert . assertEquals ( <int> , params . size ( ) ) ; Iterator < Entry < String , List < String > > > entries = params . entrySet ( ) . iterator ( ) ; Entry < String , List < String > > entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; Assert . assertFalse ( entries . hasNext ( ) ) ; } @Test public void testURISlashPath ( ) { URI uri = URI . create ( <str> ) ; QueryStringDecoder decoder = new QueryStringDecoder ( uri ) ; Assert . assertEquals ( <str> , decoder . path ( ) ) ; Map < String , List < String > > params = decoder . parameters ( ) ; Assert . assertEquals ( <int> , params . size ( ) ) ; Iterator < Entry < String , List < String > > > entries = params . entrySet ( ) . iterator ( ) ; Entry < String , List < String > > entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; Assert . assertFalse ( entries . hasNext ( ) ) ; } @Test public void testURINoPath ( ) { URI uri = URI . create ( <str> ) ; QueryStringDecoder decoder = new QueryStringDecoder ( uri ) ; Assert . assertEquals ( <str> , decoder . path ( ) ) ; Map < String , List < String > > params = decoder . parameters ( ) ; Assert . assertEquals ( <int> , params . size ( ) ) ; Iterator < Entry < String , List < String > > > entries = params . entrySet ( ) . iterator ( ) ; Entry < String , List < String > > entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; Assert . assertFalse ( entries . hasNext ( ) ) ; } @Test public void testURI2 ( ) { URI uri = URI . create ( <str> ) ; QueryStringDecoder decoder = new QueryStringDecoder ( uri ) ; Assert . assertEquals ( <str> , decoder . path ( ) ) ; Map < String , List < String > > params = decoder . parameters ( ) ; Assert . assertEquals ( <int> , params . size ( ) ) ; Iterator < Entry < String , List < String > > > entries = params . entrySet ( ) . iterator ( ) ; Entry < String , List < String > > entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; entry = entries . next ( ) ; Assert . assertEquals ( <str> , entry . getKey ( ) ) ; Assert . assertEquals ( <int> , entry . getValue ( ) . size ( ) ) ; Assert . assertEquals ( <str> , entry . getValue ( ) . get ( <int> ) ) ; Assert . assertFalse ( entries . hasNext ( ) ) ; } } 

package org . apache . cassandra . io . util ; import java . io . FilterInputStream ; import java . io . IOException ; import java . io . InputStream ; public class LengthAvailableInputStream extends FilterInputStream { private long remainingBytes ; public LengthAvailableInputStream ( InputStream in , long totalLength ) { super ( in ) ; remainingBytes = totalLength ; } @Override public int read ( ) throws IOException { int b = in . read ( ) ; - - remainingBytes ; return b ; } @Override public int read ( byte [ ] b ) throws IOException { int length = in . read ( b ) ; remainingBytes - = length ; return length ; } @Override public int read ( byte [ ] b , int off , int len ) throws IOException { int length = in . read ( b , off , len ) ; remainingBytes - = length ; return length ; } @Override public long skip ( long n ) throws IOException { long length = in . skip ( n ) ; remainingBytes - = length ; return length ; } @Override public int available ( ) throws IOException { return ( remainingBytes < = <int> ) ? <int> : ( ( remainingBytes > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) remainingBytes ) ; } @Override public void close ( ) throws IOException { in . close ( ) ; } @Override public synchronized void mark ( int readlimit ) { } @Override public synchronized void reset ( ) throws IOException { throw new IOException ( <str> ) ; } @Override public boolean markSupported ( ) { return false ; } } 

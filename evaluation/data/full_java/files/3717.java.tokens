package org . eclipse . debug . internal . core . sourcelookup . containers ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; import org . eclipse . debug . core . sourcelookup . containers . AbstractSourceContainerTypeDelegate ; import org . eclipse . debug . core . sourcelookup . containers . ExternalArchiveSourceContainer ; import org . eclipse . debug . internal . core . sourcelookup . SourceLookupMessages ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; public class ExternalArchiveSourceContainerType extends AbstractSourceContainerTypeDelegate { @Override public ISourceContainer createSourceContainer ( String memento ) throws CoreException { Node node = parseDocument ( memento ) ; if ( node . getNodeType ( ) = = Node . ELEMENT_NODE ) { Element element = ( Element ) node ; if ( <str> . equals ( element . getNodeName ( ) ) ) { String string = element . getAttribute ( <str> ) ; if ( string = = null | | string . length ( ) = = <int> ) { abort ( SourceLookupMessages . ExternalArchiveSourceContainerType_10 , null ) ; } String detect = element . getAttribute ( <str> ) ; boolean auto = <str> . equals ( detect ) ; return new ExternalArchiveSourceContainer ( string , auto ) ; } abort ( SourceLookupMessages . ExternalArchiveSourceContainerType_11 , null ) ; } abort ( SourceLookupMessages . ExternalArchiveSourceContainerType_12 , null ) ; return null ; } @Override public String getMemento ( ISourceContainer container ) throws CoreException { ExternalArchiveSourceContainer archive = ( ExternalArchiveSourceContainer ) container ; Document document = newDocument ( ) ; Element element = document . createElement ( <str> ) ; element . setAttribute ( <str> , archive . getName ( ) ) ; String detectRoot = <str> ; if ( archive . isDetectRoot ( ) ) { detectRoot = <str> ; } element . setAttribute ( <str> , detectRoot ) ; document . appendChild ( element ) ; return serializeDocument ( document ) ; } } 

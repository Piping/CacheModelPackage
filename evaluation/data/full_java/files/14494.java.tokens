package org . gradle . model . dsl . internal . transform ; import org . codehaus . groovy . ast . expr . MethodCallExpression ; import org . codehaus . groovy . ast . stmt . Statement ; import org . codehaus . groovy . control . CompilationFailedException ; import org . codehaus . groovy . control . Phases ; import org . codehaus . groovy . control . SourceUnit ; import org . codehaus . groovy . syntax . SyntaxException ; import org . gradle . api . Nullable ; import org . gradle . groovy . scripts . internal . AbstractScriptTransformer ; import org . gradle . groovy . scripts . internal . AstUtils ; import org . gradle . groovy . scripts . internal . ScriptBlock ; import java . net . URI ; import java . util . Collections ; import java . util . List ; public class ModelBlockTransformer extends AbstractScriptTransformer { @Override protected int getPhase ( ) { return Phases . CANONICALIZATION ; } public static final String MODEL = <str> ; private static final List < String > SCRIPT_BLOCK_NAMES = Collections . singletonList ( MODEL ) ; public static final String NON_LITERAL_CLOSURE_TO_TOP_LEVEL_MODEL_MESSAGE = <str> ; private final String scriptSourceDescription ; private @Nullable final URI location ; public ModelBlockTransformer ( String scriptSourceDescription , @Nullable URI location ) { this . scriptSourceDescription = scriptSourceDescription ; this . location = location ; } @Override public void call ( SourceUnit source ) throws CompilationFailedException { List < Statement > statements = source . getAST ( ) . getStatementBlock ( ) . getStatements ( ) ; for ( Statement statement : statements ) { ScriptBlock scriptBlock = AstUtils . detectScriptBlock ( statement , SCRIPT_BLOCK_NAMES ) ; if ( scriptBlock = = null ) { MethodCallExpression methodCall = AstUtils . extractBareMethodCall ( statement ) ; if ( methodCall = = null ) { continue ; } String methodName = AstUtils . extractConstantMethodName ( methodCall ) ; if ( methodName = = null ) { continue ; } if ( methodName . equals ( MODEL ) ) { source . getErrorCollector ( ) . addError ( new SyntaxException ( NON_LITERAL_CLOSURE_TO_TOP_LEVEL_MODEL_MESSAGE , statement . getLineNumber ( ) , statement . getColumnNumber ( ) ) , source ) ; } } else { RuleVisitor ruleVisitor = new RuleVisitor ( source , scriptSourceDescription , location ) ; RulesVisitor rulesVisitor = new RulesVisitor ( source , ruleVisitor ) ; scriptBlock . getClosureExpression ( ) . getCode ( ) . visit ( rulesVisitor ) ; } } } } 

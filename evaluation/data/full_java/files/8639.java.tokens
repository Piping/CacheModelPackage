package org . elasticsearch . script . groovy ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . lucene . search . function . CombineFunction ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . search . builder . SearchSourceBuilder ; import org . elasticsearch . search . sort . SortBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import static org . elasticsearch . index . query . QueryBuilders . constantScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . functionScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . matchQuery ; import static org . elasticsearch . index . query . QueryBuilders . scriptQuery ; import static org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders . scriptFunction ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertOrderedSearchHits ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchHits ; import static org . hamcrest . Matchers . equalTo ; public class GroovyScriptTests extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } public void testGroovyBigDecimalTransformation ( ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . setRefresh ( true ) . get ( ) ; assertScript ( <str> ) ; assertScript ( <str> ) ; assertScript ( <str> ) ; } public void assertScript ( String scriptString ) { Script script = new Script ( scriptString , ScriptType . INLINE , <str> , null ) ; SearchResponse resp = client ( ) . prepareSearch ( <str> ) . setSource ( new SearchSourceBuilder ( ) . query ( QueryBuilders . matchAllQuery ( ) ) . sort ( SortBuilders . scriptSort ( script , <str> ) ) ) . get ( ) ; assertNoFailures ( resp ) ; } public void testGroovyExceptionSerialization ( ) throws Exception { List < IndexRequestBuilder > reqs = new ArrayList < > ( ) ; for ( int i = <int> ; i < randomIntBetween ( <int> , <int> ) ; i + + ) { reqs . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( <str> , <str> ) ) ; } indexRandom ( true , false , reqs ) ; try { client ( ) . prepareSearch ( <str> ) . setQuery ( constantScoreQuery ( scriptQuery ( new Script ( <str> , ScriptType . INLINE , GroovyScriptEngineService . NAME , null ) ) ) ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( false ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } try { client ( ) . prepareSearch ( <str> ) . setQuery ( constantScoreQuery ( scriptQuery ( new Script ( <str> , ScriptType . INLINE , <str> , null ) ) ) ) . get ( ) ; fail ( <str> ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( false ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; assertThat ( e . toString ( ) + <str> , e . toString ( ) . contains ( <str> ) , equalTo ( true ) ) ; } } public void testGroovyScriptAccess ( ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . get ( ) ; refresh ( ) ; SearchResponse resp = client ( ) . prepareSearch ( <str> ) . setQuery ( functionScoreQuery ( scriptFunction ( new Script ( <str> , ScriptType . INLINE , <str> , null ) ) ) . boostMode ( CombineFunction . REPLACE ) ) . get ( ) ; assertNoFailures ( resp ) ; assertOrderedSearchHits ( resp , <str> , <str> , <str> ) ; } public void testScoreAccess ( ) { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . get ( ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <int> ) . get ( ) ; refresh ( ) ; SearchResponse resp = client ( ) . prepareSearch ( <str> ) . setQuery ( functionScoreQuery ( matchQuery ( <str> , <str> ) , scriptFunction ( new Script ( <str> , ScriptType . INLINE , <str> , null ) ) ) . boostMode ( CombineFunction . REPLACE ) ) . get ( ) ; assertNoFailures ( resp ) ; assertSearchHits ( resp , <str> , <str> ) ; resp = client ( ) . prepareSearch ( <str> ) . setQuery ( functionScoreQuery ( matchQuery ( <str> , <str> ) , scriptFunction ( new Script ( <str> , ScriptType . INLINE , <str> , null ) ) ) . boostMode ( CombineFunction . REPLACE ) ) . get ( ) ; assertNoFailures ( resp ) ; assertSearchHits ( resp , <str> , <str> ) ; } } 

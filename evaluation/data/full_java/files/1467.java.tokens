package org . apache . cassandra . db ; import java . util . Iterator ; import org . junit . Test ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . cql3 . UntypedResultSet ; import org . apache . cassandra . Util ; import static org . junit . Assert . assertEquals ; public class TimeSortTest extends CQLTester { @Test public void testMixedSources ( ) throws Throwable { String tableName = createTable ( <str> ) ; ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( tableName ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; cfs . forceBlockingFlush ( ) ; execute ( <str> , <int> , <int> , <int> , <int> L ) ; assertRows ( execute ( <str> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } @Test public void testTimeSort ( ) throws Throwable { String tableName = createTable ( <str> ) ; ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE ) . getColumnFamilyStore ( tableName ) ; for ( int i = <int> ; i < <int> ; + + i ) for ( int j = <int> ; j < <int> ; + + j ) execute ( <str> , i , j * <int> , <int> , ( long ) j * <int> ) ; validateTimeSort ( ) ; cfs . forceBlockingFlush ( ) ; validateTimeSort ( ) ; DecoratedKey key = Util . dk ( <str> ) ; for ( int j = <int> ; j < <int> ; + + j ) execute ( <str> , <int> , j * <int> + <int> , <int> , ( long ) j * <int> + <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; execute ( <str> , <int> , <int> , <int> , <int> ) ; UntypedResultSet results = execute ( <str> , <int> , <int> ) ; assertEquals ( <int> , results . size ( ) ) ; Iterator < UntypedResultSet . Row > iter = results . iterator ( ) ; for ( int j = <int> ; j < <int> ; j + + ) { UntypedResultSet . Row row = iter . next ( ) ; assertEquals ( j , row . getInt ( <str> ) ) ; } assertRows ( execute ( <str> , <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) , row ( <int> , <int> , <int> ) ) ; } private void validateTimeSort ( ) throws Throwable { for ( int i = <int> ; i < <int> ; + + i ) { for ( int j = <int> ; j < <int> ; j + = <int> ) { UntypedResultSet results = execute ( <str> , i , j * <int> ) ; assertEquals ( <int> - j , results . size ( ) ) ; int k = j ; for ( UntypedResultSet . Row row : results ) assertEquals ( ( k + + ) * <int> , row . getLong ( <str> ) ) ; } } } } 

package org . gradle . tooling . model . internal ; import org . gradle . tooling . UnknownModelException ; import org . gradle . tooling . UnsupportedVersionException ; import org . gradle . tooling . exceptions . UnsupportedOperationConfigurationException ; import org . gradle . tooling . internal . consumer . Distribution ; import org . gradle . tooling . internal . consumer . versioning . ModelMapping ; import org . gradle . tooling . internal . protocol . InternalUnsupportedModelException ; import org . gradle . tooling . model . UnsupportedMethodException ; public class Exceptions { public final static String INCOMPATIBLE_VERSION_HINT = <str> + <str> ; public static UnsupportedMethodException unsupportedMethod ( String method ) { return new UnsupportedMethodException ( formatUnsupportedModelMethod ( method ) ) ; } private static String formatUnsupportedModelMethod ( String method ) { return String . format ( <str> + <str> + <str> + <str> , method ) ; } public static UnsupportedOperationConfigurationException unsupportedOperationConfiguration ( String operation , String targetVersion , String versionAdded ) { return new UnsupportedOperationConfigurationException ( String . format ( <str> , targetVersion , operation , versionAdded ) ) ; } public static UnknownModelException unsupportedModel ( Class < ? > modelType , String targetVersion ) { ModelMapping modelMapping = new ModelMapping ( ) ; String versionAdded = modelMapping . getVersionAdded ( modelType ) ; if ( versionAdded ! = null ) { return new UnknownModelException ( String . format ( <str> , targetVersion , modelType . getSimpleName ( ) , modelType . getSimpleName ( ) , versionAdded ) ) ; } else { return new UnknownModelException ( String . format ( <str> , targetVersion , modelType . getSimpleName ( ) ) ) ; } } public static UnknownModelException unknownModel ( Class < ? > type , InternalUnsupportedModelException failure ) { return new UnknownModelException ( String . format ( <str> , type . getSimpleName ( ) ) , failure . getCause ( ) ) ; } public static UnsupportedVersionException unsupportedFeature ( String feature , Distribution distro , String versionAdded ) { return new UnsupportedVersionException ( String . format ( <str> , distro . getDisplayName ( ) , feature , versionAdded ) ) ; } public static UnsupportedVersionException unsupportedFeature ( String feature , String targetVersion , String versionAdded ) { return new UnsupportedVersionException ( String . format ( <str> , targetVersion , feature , versionAdded ) ) ; } } 

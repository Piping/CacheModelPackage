package io . netty . resolver . dns ; import io . netty . handler . codec . dns . DnsQuestion ; import io . netty . util . internal . EmptyArrays ; import io . netty . util . internal . ObjectUtil ; import java . net . InetSocketAddress ; public final class DnsNameResolverException extends RuntimeException { private static final long serialVersionUID = - <int> ; private final InetSocketAddress remoteAddress ; private final DnsQuestion question ; public DnsNameResolverException ( InetSocketAddress remoteAddress , DnsQuestion question ) { this . remoteAddress = validateRemoteAddress ( remoteAddress ) ; this . question = validateQuestion ( question ) ; } public DnsNameResolverException ( InetSocketAddress remoteAddress , DnsQuestion question , String message ) { super ( message ) ; this . remoteAddress = validateRemoteAddress ( remoteAddress ) ; this . question = validateQuestion ( question ) ; } public DnsNameResolverException ( InetSocketAddress remoteAddress , DnsQuestion question , String message , Throwable cause ) { super ( message , cause ) ; this . remoteAddress = validateRemoteAddress ( remoteAddress ) ; this . question = validateQuestion ( question ) ; } public DnsNameResolverException ( InetSocketAddress remoteAddress , DnsQuestion question , Throwable cause ) { super ( cause ) ; this . remoteAddress = validateRemoteAddress ( remoteAddress ) ; this . question = validateQuestion ( question ) ; } private static InetSocketAddress validateRemoteAddress ( InetSocketAddress remoteAddress ) { return ObjectUtil . checkNotNull ( remoteAddress , <str> ) ; } private static DnsQuestion validateQuestion ( DnsQuestion question ) { return ObjectUtil . checkNotNull ( question , <str> ) ; } public DnsQuestion question ( ) { return question ; } @Override public Throwable fillInStackTrace ( ) { setStackTrace ( EmptyArrays . EMPTY_STACK_TRACE ) ; return this ; } } 

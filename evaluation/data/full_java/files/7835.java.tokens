package org . elasticsearch . cluster . routing ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . node . DiscoveryNodes ; import org . elasticsearch . cluster . node . DiscoveryNodes . Builder ; import org . elasticsearch . cluster . routing . allocation . AllocationService ; import org . elasticsearch . cluster . routing . allocation . RoutingAllocation ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexNotFoundException ; import org . elasticsearch . test . ESAllocationTestCase ; import org . junit . Before ; import static org . elasticsearch . cluster . routing . ShardRoutingState . INITIALIZING ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . nullValue ; public class RoutingTableTests extends ESAllocationTestCase { private static final String TEST_INDEX_1 = <str> ; private static final String TEST_INDEX_2 = <str> ; private RoutingTable emptyRoutingTable ; private RoutingTable testRoutingTable ; private int numberOfShards ; private int numberOfReplicas ; private int shardsPerIndex ; private int totalNumberOfShards ; private final static Settings DEFAULT_SETTINGS = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , Version . CURRENT ) . build ( ) ; private final AllocationService ALLOCATION_SERVICE = createAllocationService ( settingsBuilder ( ) . put ( <str> , <int> ) . put ( <str> , <int> ) . build ( ) ) ; private ClusterState clusterState ; @Override @Before public void setUp ( ) throws Exception { super . setUp ( ) ; this . numberOfShards = randomIntBetween ( <int> , <int> ) ; this . numberOfReplicas = randomIntBetween ( <int> , <int> ) ; this . shardsPerIndex = this . numberOfShards * ( this . numberOfReplicas + <int> ) ; this . totalNumberOfShards = this . shardsPerIndex * <int> ; logger . info ( <str> + this . numberOfShards + <str> + this . numberOfReplicas + <str> ) ; this . emptyRoutingTable = new RoutingTable . Builder ( ) . build ( ) ; MetaData metaData = MetaData . builder ( ) . put ( createIndexMetaData ( TEST_INDEX_1 ) ) . put ( createIndexMetaData ( TEST_INDEX_2 ) ) . build ( ) ; this . testRoutingTable = new RoutingTable . Builder ( ) . add ( new IndexRoutingTable . Builder ( TEST_INDEX_1 ) . initializeAsNew ( metaData . index ( TEST_INDEX_1 ) ) . build ( ) ) . add ( new IndexRoutingTable . Builder ( TEST_INDEX_2 ) . initializeAsNew ( metaData . index ( TEST_INDEX_2 ) ) . build ( ) ) . build ( ) ; this . clusterState = ClusterState . builder ( org . elasticsearch . cluster . ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( testRoutingTable ) . build ( ) ; } private void initPrimaries ( ) { logger . info ( <str> + ( this . numberOfReplicas + <int> ) + <str> ) ; Builder discoBuilder = DiscoveryNodes . builder ( ) ; for ( int i = <int> ; i < this . numberOfReplicas + <int> ; i + + ) { discoBuilder = discoBuilder . put ( newNode ( <str> + i ) ) ; } this . clusterState = ClusterState . builder ( clusterState ) . nodes ( discoBuilder ) . build ( ) ; RoutingAllocation . Result rerouteResult = ALLOCATION_SERVICE . reroute ( clusterState , <str> ) ; this . testRoutingTable = rerouteResult . routingTable ( ) ; assertThat ( rerouteResult . changed ( ) , is ( true ) ) ; this . clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; } private void startInitializingShards ( String index ) { this . clusterState = ClusterState . builder ( clusterState ) . routingTable ( this . testRoutingTable ) . build ( ) ; logger . info ( <str> + index ) ; RoutingAllocation . Result rerouteResult = ALLOCATION_SERVICE . applyStartedShards ( this . clusterState , this . clusterState . getRoutingNodes ( ) . shardsWithState ( index , INITIALIZING ) ) ; this . clusterState = ClusterState . builder ( clusterState ) . routingTable ( rerouteResult . routingTable ( ) ) . build ( ) ; this . testRoutingTable = rerouteResult . routingTable ( ) ; } private IndexMetaData . Builder createIndexMetaData ( String indexName ) { return new IndexMetaData . Builder ( indexName ) . settings ( DEFAULT_SETTINGS ) . numberOfReplicas ( this . numberOfReplicas ) . numberOfShards ( this . numberOfShards ) ; } public void testAllShards ( ) { assertThat ( this . emptyRoutingTable . allShards ( ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . allShards ( ) . size ( ) , is ( this . totalNumberOfShards ) ) ; assertThat ( this . testRoutingTable . allShards ( TEST_INDEX_1 ) . size ( ) , is ( this . shardsPerIndex ) ) ; try { assertThat ( this . testRoutingTable . allShards ( <str> ) . size ( ) , is ( <int> ) ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { } } public void testHasIndex ( ) { assertThat ( this . testRoutingTable . hasIndex ( TEST_INDEX_1 ) , is ( true ) ) ; assertThat ( this . testRoutingTable . hasIndex ( <str> ) , is ( false ) ) ; } public void testIndex ( ) { assertThat ( this . testRoutingTable . index ( TEST_INDEX_1 ) . getIndex ( ) , is ( TEST_INDEX_1 ) ) ; assertThat ( this . testRoutingTable . index ( <str> ) , is ( nullValue ( ) ) ) ; } public void testIndicesRouting ( ) { assertThat ( this . testRoutingTable . indicesRouting ( ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . getIndicesRouting ( ) . size ( ) , is ( <int> ) ) ; assertSame ( this . testRoutingTable . getIndicesRouting ( ) , this . testRoutingTable . indicesRouting ( ) ) ; } public void testShardsWithState ( ) { assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . UNASSIGNED ) . size ( ) , is ( this . totalNumberOfShards ) ) ; initPrimaries ( ) ; assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . UNASSIGNED ) . size ( ) , is ( this . totalNumberOfShards - <int> * this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . INITIALIZING ) . size ( ) , is ( <int> * this . numberOfShards ) ) ; startInitializingShards ( TEST_INDEX_1 ) ; assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . STARTED ) . size ( ) , is ( this . numberOfShards ) ) ; int initializingExpected = this . numberOfShards + this . numberOfShards * this . numberOfReplicas ; assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . INITIALIZING ) . size ( ) , is ( initializingExpected ) ) ; assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . UNASSIGNED ) . size ( ) , is ( this . totalNumberOfShards - initializingExpected - this . numberOfShards ) ) ; startInitializingShards ( TEST_INDEX_2 ) ; assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . STARTED ) . size ( ) , is ( <int> * this . numberOfShards ) ) ; initializingExpected = <int> * this . numberOfShards * this . numberOfReplicas ; assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . INITIALIZING ) . size ( ) , is ( initializingExpected ) ) ; assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . UNASSIGNED ) . size ( ) , is ( this . totalNumberOfShards - initializingExpected - <int> * this . numberOfShards ) ) ; startInitializingShards ( TEST_INDEX_1 ) ; startInitializingShards ( TEST_INDEX_2 ) ; assertThat ( this . testRoutingTable . shardsWithState ( ShardRoutingState . STARTED ) . size ( ) , is ( this . totalNumberOfShards ) ) ; } public void testActivePrimaryShardsGrouped ( ) { assertThat ( this . emptyRoutingTable . activePrimaryShardsGrouped ( new String [ <int> ] , true ) . size ( ) , is ( <int> ) ) ; assertThat ( this . emptyRoutingTable . activePrimaryShardsGrouped ( new String [ <int> ] , false ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 } , false ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 } , true ) . size ( ) , is ( this . numberOfShards ) ) ; initPrimaries ( ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 } , false ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 } , true ) . size ( ) , is ( this . numberOfShards ) ) ; startInitializingShards ( TEST_INDEX_1 ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 } , false ) . size ( ) , is ( this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 , TEST_INDEX_2 } , false ) . size ( ) , is ( this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 } , true ) . size ( ) , is ( this . numberOfShards ) ) ; startInitializingShards ( TEST_INDEX_2 ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_2 } , false ) . size ( ) , is ( this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 , TEST_INDEX_2 } , false ) . size ( ) , is ( <int> * this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 , TEST_INDEX_2 } , true ) . size ( ) , is ( <int> * this . numberOfShards ) ) ; try { this . testRoutingTable . activePrimaryShardsGrouped ( new String [ ] { TEST_INDEX_1 , <str> } , true ) ; fail ( <str> ) ; } catch ( IndexNotFoundException e ) { } } public void testAllActiveShardsGrouped ( ) { assertThat ( this . emptyRoutingTable . allActiveShardsGrouped ( new String [ <int> ] , true ) . size ( ) , is ( <int> ) ) ; assertThat ( this . emptyRoutingTable . allActiveShardsGrouped ( new String [ <int> ] , false ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 } , false ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 } , true ) . size ( ) , is ( this . shardsPerIndex ) ) ; initPrimaries ( ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 } , false ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 } , true ) . size ( ) , is ( this . shardsPerIndex ) ) ; startInitializingShards ( TEST_INDEX_1 ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 } , false ) . size ( ) , is ( this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 , TEST_INDEX_2 } , false ) . size ( ) , is ( this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 } , true ) . size ( ) , is ( this . shardsPerIndex ) ) ; startInitializingShards ( TEST_INDEX_2 ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_2 } , false ) . size ( ) , is ( this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 , TEST_INDEX_2 } , false ) . size ( ) , is ( <int> * this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 , TEST_INDEX_2 } , true ) . size ( ) , is ( this . totalNumberOfShards ) ) ; try { this . testRoutingTable . allActiveShardsGrouped ( new String [ ] { TEST_INDEX_1 , <str> } , true ) ; } catch ( IndexNotFoundException e ) { fail ( <str> ) ; } } public void testAllAssignedShardsGrouped ( ) { assertThat ( this . testRoutingTable . allAssignedShardsGrouped ( new String [ ] { TEST_INDEX_1 } , false ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . allAssignedShardsGrouped ( new String [ ] { TEST_INDEX_1 } , true ) . size ( ) , is ( this . shardsPerIndex ) ) ; initPrimaries ( ) ; assertThat ( this . testRoutingTable . allAssignedShardsGrouped ( new String [ ] { TEST_INDEX_1 } , false ) . size ( ) , is ( this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . allAssignedShardsGrouped ( new String [ ] { TEST_INDEX_1 } , true ) . size ( ) , is ( this . shardsPerIndex ) ) ; assertThat ( this . testRoutingTable . allAssignedShardsGrouped ( new String [ ] { TEST_INDEX_1 , TEST_INDEX_2 } , false ) . size ( ) , is ( <int> * this . numberOfShards ) ) ; assertThat ( this . testRoutingTable . allAssignedShardsGrouped ( new String [ ] { TEST_INDEX_1 , TEST_INDEX_2 } , true ) . size ( ) , is ( this . totalNumberOfShards ) ) ; try { this . testRoutingTable . allAssignedShardsGrouped ( new String [ ] { TEST_INDEX_1 , <str> } , false ) ; } catch ( IndexNotFoundException e ) { fail ( <str> ) ; } } public void testAllShardsForMultipleIndices ( ) { assertThat ( this . emptyRoutingTable . allShards ( new String [ <int> ] ) . size ( ) , is ( <int> ) ) ; assertThat ( this . testRoutingTable . allShards ( new String [ ] { TEST_INDEX_1 } ) . size ( ) , is ( this . shardsPerIndex ) ) ; initPrimaries ( ) ; assertThat ( this . testRoutingTable . allShards ( new String [ ] { TEST_INDEX_1 } ) . size ( ) , is ( this . shardsPerIndex ) ) ; startInitializingShards ( TEST_INDEX_1 ) ; assertThat ( this . testRoutingTable . allShards ( new String [ ] { TEST_INDEX_1 } ) . size ( ) , is ( this . shardsPerIndex ) ) ; startInitializingShards ( TEST_INDEX_2 ) ; assertThat ( this . testRoutingTable . allShards ( new String [ ] { TEST_INDEX_1 , TEST_INDEX_2 } ) . size ( ) , is ( this . totalNumberOfShards ) ) ; try { this . testRoutingTable . allShards ( new String [ ] { TEST_INDEX_1 , <str> } ) ; } catch ( IndexNotFoundException e ) { fail ( <str> ) ; } } public void testRoutingTableBuiltMoreThanOnce ( ) { RoutingTable . Builder b = RoutingTable . builder ( ) ; b . build ( ) ; try { b . build ( ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } try { b . add ( ( IndexRoutingTable ) null ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } try { b . updateNumberOfReplicas ( <int> , <str> ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } try { b . remove ( <str> ) ; fail ( <str> ) ; } catch ( IllegalStateException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } } 

package com . google . common . collect . testing . google ; import static com . google . common . collect . testing . features . CollectionFeature . SUPPORTS_ITERATOR_REMOVE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . SUPPORTS_REMOVE ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . Iterator ; @GwtCompatible public class BiMapRemoveTester < K , V > extends AbstractBiMapTester < K , V > { @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveKeyRemovesFromInverse ( ) { getMap ( ) . remove ( k0 ( ) ) ; expectMissing ( e0 ( ) ) ; } @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveKeyFromKeySetRemovesFromInverse ( ) { getMap ( ) . keySet ( ) . remove ( k0 ( ) ) ; expectMissing ( e0 ( ) ) ; } @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveFromValuesRemovesFromInverse ( ) { getMap ( ) . values ( ) . remove ( v0 ( ) ) ; expectMissing ( e0 ( ) ) ; } @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveFromInverseRemovesFromForward ( ) { getMap ( ) . inverse ( ) . remove ( v0 ( ) ) ; expectMissing ( e0 ( ) ) ; } @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveFromInverseKeySetRemovesFromForward ( ) { getMap ( ) . inverse ( ) . keySet ( ) . remove ( v0 ( ) ) ; expectMissing ( e0 ( ) ) ; } @SuppressWarnings ( <str> ) @MapFeature.Require ( SUPPORTS_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testRemoveFromInverseValuesRemovesFromInverse ( ) { getMap ( ) . inverse ( ) . values ( ) . remove ( k0 ( ) ) ; expectMissing ( e0 ( ) ) ; } @CollectionFeature.Require ( SUPPORTS_ITERATOR_REMOVE ) @CollectionSize.Require ( absent = ZERO ) public void testKeySetIteratorRemove ( ) { int initialSize = getNumElements ( ) ; Iterator < K > iterator = getMap ( ) . keySet ( ) . iterator ( ) ; iterator . next ( ) ; iterator . remove ( ) ; assertEquals ( initialSize - <int> , getMap ( ) . size ( ) ) ; assertEquals ( initialSize - <int> , getMap ( ) . inverse ( ) . size ( ) ) ; } } 

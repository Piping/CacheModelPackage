package org . elasticsearch . discovery ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . inject . AbstractModule ; import org . elasticsearch . common . inject . multibindings . Multibinder ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . ExtensionPoint ; import org . elasticsearch . discovery . local . LocalDiscovery ; import org . elasticsearch . discovery . zen . ZenDiscovery ; import org . elasticsearch . discovery . zen . elect . ElectMasterService ; import org . elasticsearch . discovery . zen . ping . ZenPing ; import org . elasticsearch . discovery . zen . ping . ZenPingService ; import org . elasticsearch . discovery . zen . ping . unicast . UnicastHostsProvider ; import org . elasticsearch . discovery . zen . ping . unicast . UnicastZenPing ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class DiscoveryModule extends AbstractModule { public static final String DISCOVERY_TYPE_KEY = <str> ; public static final String ZEN_MASTER_SERVICE_TYPE_KEY = <str> ; private final Settings settings ; private final List < Class < ? extends UnicastHostsProvider > > unicastHostProviders = new ArrayList < > ( ) ; private final ExtensionPoint . ClassSet < ZenPing > zenPings = new ExtensionPoint . ClassSet < > ( <str> , ZenPing . class ) ; private final Map < String , Class < ? extends Discovery > > discoveryTypes = new HashMap < > ( ) ; private final Map < String , Class < ? extends ElectMasterService > > masterServiceType = new HashMap < > ( ) ; public DiscoveryModule ( Settings settings ) { this . settings = settings ; addDiscoveryType ( <str> , LocalDiscovery . class ) ; addDiscoveryType ( <str> , ZenDiscovery . class ) ; addElectMasterService ( <str> , ElectMasterService . class ) ; addZenPing ( UnicastZenPing . class ) ; } public void addUnicastHostProvider ( Class < ? extends UnicastHostsProvider > unicastHostProvider ) { unicastHostProviders . add ( unicastHostProvider ) ; } public void addDiscoveryType ( String type , Class < ? extends Discovery > clazz ) { if ( discoveryTypes . containsKey ( type ) ) { throw new IllegalArgumentException ( <str> + type + <str> ) ; } discoveryTypes . put ( type , clazz ) ; } public void addElectMasterService ( String type , Class < ? extends ElectMasterService > masterService ) { if ( masterServiceType . containsKey ( type ) ) { throw new IllegalArgumentException ( <str> + type + <str> ) ; } this . masterServiceType . put ( type , masterService ) ; } public void addZenPing ( Class < ? extends ZenPing > clazz ) { zenPings . registerExtension ( clazz ) ; } @Override protected void configure ( ) { String defaultType = DiscoveryNode . localNode ( settings ) ? <str> : <str> ; String discoveryType = settings . get ( DISCOVERY_TYPE_KEY , defaultType ) ; Class < ? extends Discovery > discoveryClass = discoveryTypes . get ( discoveryType ) ; if ( discoveryClass = = null ) { throw new IllegalArgumentException ( <str> + discoveryType + <str> ) ; } if ( discoveryType . equals ( <str> ) = = false ) { String masterServiceTypeKey = settings . get ( ZEN_MASTER_SERVICE_TYPE_KEY , <str> ) ; final Class < ? extends ElectMasterService > masterService = masterServiceType . get ( masterServiceTypeKey ) ; if ( masterService = = null ) { throw new IllegalArgumentException ( <str> + masterServiceTypeKey + <str> ) ; } if ( masterService = = ElectMasterService . class ) { bind ( ElectMasterService . class ) . asEagerSingleton ( ) ; } else { bind ( ElectMasterService . class ) . to ( masterService ) . asEagerSingleton ( ) ; } bind ( ZenPingService . class ) . asEagerSingleton ( ) ; Multibinder < UnicastHostsProvider > unicastHostsProviderMultibinder = Multibinder . newSetBinder ( binder ( ) , UnicastHostsProvider . class ) ; for ( Class < ? extends UnicastHostsProvider > unicastHostProvider : unicastHostProviders ) { unicastHostsProviderMultibinder . addBinding ( ) . to ( unicastHostProvider ) ; } zenPings . bind ( binder ( ) ) ; } bind ( Discovery . class ) . to ( discoveryClass ) . asEagerSingleton ( ) ; bind ( DiscoveryService . class ) . asEagerSingleton ( ) ; } } 

package org . elasticsearch . action . support . broadcast ; import org . elasticsearch . action . ActionResponse ; import org . elasticsearch . action . ShardOperationFailedException ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; import java . util . List ; import static org . elasticsearch . action . support . DefaultShardOperationFailedException . readShardOperationFailed ; public class BroadcastResponse extends ActionResponse { private static final ShardOperationFailedException [ ] EMPTY = new ShardOperationFailedException [ <int> ] ; private int totalShards ; private int successfulShards ; private int failedShards ; private ShardOperationFailedException [ ] shardFailures = EMPTY ; public BroadcastResponse ( ) { } public BroadcastResponse ( int totalShards , int successfulShards , int failedShards , List < ? extends ShardOperationFailedException > shardFailures ) { this . totalShards = totalShards ; this . successfulShards = successfulShards ; this . failedShards = failedShards ; this . shardFailures = shardFailures = = null ? EMPTY : shardFailures . toArray ( new ShardOperationFailedException [ shardFailures . size ( ) ] ) ; } public int getTotalShards ( ) { return totalShards ; } public int getSuccessfulShards ( ) { return successfulShards ; } public int getFailedShards ( ) { return failedShards ; } public ShardOperationFailedException [ ] getShardFailures ( ) { return shardFailures ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; totalShards = in . readVInt ( ) ; successfulShards = in . readVInt ( ) ; failedShards = in . readVInt ( ) ; int size = in . readVInt ( ) ; if ( size > <int> ) { shardFailures = new ShardOperationFailedException [ size ] ; for ( int i = <int> ; i < size ; i + + ) { shardFailures [ i ] = readShardOperationFailed ( in ) ; } } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( totalShards ) ; out . writeVInt ( successfulShards ) ; out . writeVInt ( failedShards ) ; out . writeVInt ( shardFailures . length ) ; for ( ShardOperationFailedException exp : shardFailures ) { exp . writeTo ( out ) ; } } } 

package com . badlogic . gdx . scenes . scene2d . ui ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . glutils . ShapeRenderer ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . Touchable ; import com . badlogic . gdx . scenes . scene2d . ui . Value . Fixed ; import com . badlogic . gdx . scenes . scene2d . utils . Drawable ; import com . badlogic . gdx . scenes . scene2d . utils . Layout ; import com . badlogic . gdx . utils . Align ; public class Container < T extends Actor > extends WidgetGroup { private T actor ; private Value minWidth = Value . minWidth , minHeight = Value . minHeight ; private Value prefWidth = Value . prefWidth , prefHeight = Value . prefHeight ; private Value maxWidth = Value . zero , maxHeight = Value . zero ; private Value padTop = Value . zero , padLeft = Value . zero , padBottom = Value . zero , padRight = Value . zero ; private float fillX , fillY ; private int align ; private Drawable background ; private boolean clip ; private boolean round = true ; public Container ( ) { setTouchable ( Touchable . childrenOnly ) ; setTransform ( false ) ; } public Container ( T actor ) { this ( ) ; setActor ( actor ) ; } public void draw ( Batch batch , float parentAlpha ) { validate ( ) ; if ( isTransform ( ) ) { applyTransform ( batch , computeTransform ( ) ) ; drawBackground ( batch , parentAlpha , <int> , <int> ) ; if ( clip ) { batch . flush ( ) ; float padLeft = this . padLeft . get ( this ) , padBottom = this . padBottom . get ( this ) ; if ( clipBegin ( padLeft , padBottom , getWidth ( ) - padLeft - padRight . get ( this ) , getHeight ( ) - padBottom - padTop . get ( this ) ) ) { drawChildren ( batch , parentAlpha ) ; batch . flush ( ) ; clipEnd ( ) ; } } else drawChildren ( batch , parentAlpha ) ; resetTransform ( batch ) ; } else { drawBackground ( batch , parentAlpha , getX ( ) , getY ( ) ) ; super . draw ( batch , parentAlpha ) ; } } protected void drawBackground ( Batch batch , float parentAlpha , float x , float y ) { if ( background = = null ) return ; Color color = getColor ( ) ; batch . setColor ( color . r , color . g , color . b , color . a * parentAlpha ) ; background . draw ( batch , x , y , getWidth ( ) , getHeight ( ) ) ; } public void setBackground ( Drawable background ) { setBackground ( background , true ) ; } public void setBackground ( Drawable background , boolean adjustPadding ) { if ( this . background = = background ) return ; this . background = background ; if ( adjustPadding ) { if ( background = = null ) pad ( Value . zero ) ; else pad ( background . getTopHeight ( ) , background . getLeftWidth ( ) , background . getBottomHeight ( ) , background . getRightWidth ( ) ) ; invalidate ( ) ; } } public Container < T > background ( Drawable background ) { setBackground ( background ) ; return this ; } public Drawable getBackground ( ) { return background ; } public void layout ( ) { if ( actor = = null ) return ; float padLeft = this . padLeft . get ( this ) , padBottom = this . padBottom . get ( this ) ; float containerWidth = getWidth ( ) - padLeft - padRight . get ( this ) ; float containerHeight = getHeight ( ) - padBottom - padTop . get ( this ) ; float minWidth = this . minWidth . get ( actor ) , minHeight = this . minHeight . get ( actor ) ; float prefWidth = this . prefWidth . get ( actor ) , prefHeight = this . prefHeight . get ( actor ) ; float maxWidth = this . maxWidth . get ( actor ) , maxHeight = this . maxHeight . get ( actor ) ; float width ; if ( fillX > <int> ) width = containerWidth * fillX ; else width = Math . min ( prefWidth , containerWidth ) ; if ( width < minWidth ) width = minWidth ; if ( maxWidth > <int> & & width > maxWidth ) width = maxWidth ; float height ; if ( fillY > <int> ) height = containerHeight * fillY ; else height = Math . min ( prefHeight , containerHeight ) ; if ( height < minHeight ) height = minHeight ; if ( maxHeight > <int> & & height > maxHeight ) height = maxHeight ; float x = padLeft ; if ( ( align & Align . right ) ! = <int> ) x + = containerWidth - width ; else if ( ( align & Align . left ) = = <int> ) x + = ( containerWidth - width ) / <int> ; float y = padBottom ; if ( ( align & Align . top ) ! = <int> ) y + = containerHeight - height ; else if ( ( align & Align . bottom ) = = <int> ) y + = ( containerHeight - height ) / <int> ; if ( round ) { x = Math . round ( x ) ; y = Math . round ( y ) ; width = Math . round ( width ) ; height = Math . round ( height ) ; } actor . setBounds ( x , y , width , height ) ; if ( actor instanceof Layout ) ( ( Layout ) actor ) . validate ( ) ; } public void setActor ( T actor ) { if ( actor = = this ) throw new IllegalArgumentException ( <str> ) ; if ( actor = = this . actor ) return ; if ( this . actor ! = null ) super . removeActor ( this . actor ) ; this . actor = actor ; if ( actor ! = null ) super . addActor ( actor ) ; } public T getActor ( ) { return actor ; } public void addActor ( Actor actor ) { throw new UnsupportedOperationException ( <str> ) ; } public void addActorAt ( int index , Actor actor ) { throw new UnsupportedOperationException ( <str> ) ; } public void addActorBefore ( Actor actorBefore , Actor actor ) { throw new UnsupportedOperationException ( <str> ) ; } public void addActorAfter ( Actor actorAfter , Actor actor ) { throw new UnsupportedOperationException ( <str> ) ; } public boolean removeActor ( Actor actor ) { if ( actor ! = this . actor ) return false ; setActor ( null ) ; return true ; } public Container < T > size ( Value size ) { if ( size = = null ) throw new IllegalArgumentException ( <str> ) ; minWidth = size ; minHeight = size ; prefWidth = size ; prefHeight = size ; maxWidth = size ; maxHeight = size ; return this ; } public Container < T > size ( Value width , Value height ) { if ( width = = null ) throw new IllegalArgumentException ( <str> ) ; if ( height = = null ) throw new IllegalArgumentException ( <str> ) ; minWidth = width ; minHeight = height ; prefWidth = width ; prefHeight = height ; maxWidth = width ; maxHeight = height ; return this ; } public Container < T > size ( float size ) { size ( new Fixed ( size ) ) ; return this ; } public Container < T > size ( float width , float height ) { size ( new Fixed ( width ) , new Fixed ( height ) ) ; return this ; } public Container < T > width ( Value width ) { if ( width = = null ) throw new IllegalArgumentException ( <str> ) ; minWidth = width ; prefWidth = width ; maxWidth = width ; return this ; } public Container < T > width ( float width ) { width ( new Fixed ( width ) ) ; return this ; } public Container < T > height ( Value height ) { if ( height = = null ) throw new IllegalArgumentException ( <str> ) ; minHeight = height ; prefHeight = height ; maxHeight = height ; return this ; } public Container < T > height ( float height ) { height ( new Fixed ( height ) ) ; return this ; } public Container < T > minSize ( Value size ) { if ( size = = null ) throw new IllegalArgumentException ( <str> ) ; minWidth = size ; minHeight = size ; return this ; } public Container < T > minSize ( Value width , Value height ) { if ( width = = null ) throw new IllegalArgumentException ( <str> ) ; if ( height = = null ) throw new IllegalArgumentException ( <str> ) ; minWidth = width ; minHeight = height ; return this ; } public Container < T > minWidth ( Value minWidth ) { if ( minWidth = = null ) throw new IllegalArgumentException ( <str> ) ; this . minWidth = minWidth ; return this ; } public Container < T > minHeight ( Value minHeight ) { if ( minHeight = = null ) throw new IllegalArgumentException ( <str> ) ; this . minHeight = minHeight ; return this ; } public Container < T > minSize ( float size ) { minSize ( new Fixed ( size ) ) ; return this ; } public Container < T > minSize ( float width , float height ) { minSize ( new Fixed ( width ) , new Fixed ( height ) ) ; return this ; } public Container < T > minWidth ( float minWidth ) { this . minWidth = new Fixed ( minWidth ) ; return this ; } public Container < T > minHeight ( float minHeight ) { this . minHeight = new Fixed ( minHeight ) ; return this ; } public Container < T > prefSize ( Value size ) { if ( size = = null ) throw new IllegalArgumentException ( <str> ) ; prefWidth = size ; prefHeight = size ; return this ; } public Container < T > prefSize ( Value width , Value height ) { if ( width = = null ) throw new IllegalArgumentException ( <str> ) ; if ( height = = null ) throw new IllegalArgumentException ( <str> ) ; prefWidth = width ; prefHeight = height ; return this ; } public Container < T > prefWidth ( Value prefWidth ) { if ( prefWidth = = null ) throw new IllegalArgumentException ( <str> ) ; this . prefWidth = prefWidth ; return this ; } public Container < T > prefHeight ( Value prefHeight ) { if ( prefHeight = = null ) throw new IllegalArgumentException ( <str> ) ; this . prefHeight = prefHeight ; return this ; } public Container < T > prefSize ( float width , float height ) { prefSize ( new Fixed ( width ) , new Fixed ( height ) ) ; return this ; } public Container < T > prefSize ( float size ) { prefSize ( new Fixed ( size ) ) ; return this ; } public Container < T > prefWidth ( float prefWidth ) { this . prefWidth = new Fixed ( prefWidth ) ; return this ; } public Container < T > prefHeight ( float prefHeight ) { this . prefHeight = new Fixed ( prefHeight ) ; return this ; } public Container < T > maxSize ( Value size ) { if ( size = = null ) throw new IllegalArgumentException ( <str> ) ; maxWidth = size ; maxHeight = size ; return this ; } public Container < T > maxSize ( Value width , Value height ) { if ( width = = null ) throw new IllegalArgumentException ( <str> ) ; if ( height = = null ) throw new IllegalArgumentException ( <str> ) ; maxWidth = width ; maxHeight = height ; return this ; } public Container < T > maxWidth ( Value maxWidth ) { if ( maxWidth = = null ) throw new IllegalArgumentException ( <str> ) ; this . maxWidth = maxWidth ; return this ; } public Container < T > maxHeight ( Value maxHeight ) { if ( maxHeight = = null ) throw new IllegalArgumentException ( <str> ) ; this . maxHeight = maxHeight ; return this ; } public Container < T > maxSize ( float size ) { maxSize ( new Fixed ( size ) ) ; return this ; } public Container < T > maxSize ( float width , float height ) { maxSize ( new Fixed ( width ) , new Fixed ( height ) ) ; return this ; } public Container < T > maxWidth ( float maxWidth ) { this . maxWidth = new Fixed ( maxWidth ) ; return this ; } public Container < T > maxHeight ( float maxHeight ) { this . maxHeight = new Fixed ( maxHeight ) ; return this ; } public Container < T > pad ( Value pad ) { if ( pad = = null ) throw new IllegalArgumentException ( <str> ) ; padTop = pad ; padLeft = pad ; padBottom = pad ; padRight = pad ; return this ; } public Container < T > pad ( Value top , Value left , Value bottom , Value right ) { if ( top = = null ) throw new IllegalArgumentException ( <str> ) ; if ( left = = null ) throw new IllegalArgumentException ( <str> ) ; if ( bottom = = null ) throw new IllegalArgumentException ( <str> ) ; if ( right = = null ) throw new IllegalArgumentException ( <str> ) ; padTop = top ; padLeft = left ; padBottom = bottom ; padRight = right ; return this ; } public Container < T > padTop ( Value padTop ) { if ( padTop = = null ) throw new IllegalArgumentException ( <str> ) ; this . padTop = padTop ; return this ; } public Container < T > padLeft ( Value padLeft ) { if ( padLeft = = null ) throw new IllegalArgumentException ( <str> ) ; this . padLeft = padLeft ; return this ; } public Container < T > padBottom ( Value padBottom ) { if ( padBottom = = null ) throw new IllegalArgumentException ( <str> ) ; this . padBottom = padBottom ; return this ; } public Container < T > padRight ( Value padRight ) { if ( padRight = = null ) throw new IllegalArgumentException ( <str> ) ; this . padRight = padRight ; return this ; } public Container < T > pad ( float pad ) { Value value = new Fixed ( pad ) ; padTop = value ; padLeft = value ; padBottom = value ; padRight = value ; return this ; } public Container < T > pad ( float top , float left , float bottom , float right ) { padTop = new Fixed ( top ) ; padLeft = new Fixed ( left ) ; padBottom = new Fixed ( bottom ) ; padRight = new Fixed ( right ) ; return this ; } public Container < T > padTop ( float padTop ) { this . padTop = new Fixed ( padTop ) ; return this ; } public Container < T > padLeft ( float padLeft ) { this . padLeft = new Fixed ( padLeft ) ; return this ; } public Container < T > padBottom ( float padBottom ) { this . padBottom = new Fixed ( padBottom ) ; return this ; } public Container < T > padRight ( float padRight ) { this . padRight = new Fixed ( padRight ) ; return this ; } public Container < T > fill ( ) { fillX = <float> ; fillY = <float> ; return this ; } public Container < T > fillX ( ) { fillX = <float> ; return this ; } public Container < T > fillY ( ) { fillY = <float> ; return this ; } public Container < T > fill ( float x , float y ) { fillX = x ; fillY = y ; return this ; } public Container < T > fill ( boolean x , boolean y ) { fillX = x ? <float> : <int> ; fillY = y ? <float> : <int> ; return this ; } public Container < T > fill ( boolean fill ) { fillX = fill ? <float> : <int> ; fillY = fill ? <float> : <int> ; return this ; } public Container < T > align ( int align ) { this . align = align ; return this ; } public Container < T > center ( ) { align = Align . center ; return this ; } public Container < T > top ( ) { align | = Align . top ; align & = ~ Align . bottom ; return this ; } public Container < T > left ( ) { align | = Align . left ; align & = ~ Align . right ; return this ; } public Container < T > bottom ( ) { align | = Align . bottom ; align & = ~ Align . top ; return this ; } public Container < T > right ( ) { align | = Align . right ; align & = ~ Align . left ; return this ; } public float getMinWidth ( ) { return minWidth . get ( actor ) + padLeft . get ( this ) + padRight . get ( this ) ; } public Value getMinHeightValue ( ) { return minHeight ; } public float getMinHeight ( ) { return minHeight . get ( actor ) + padTop . get ( this ) + padBottom . get ( this ) ; } public Value getPrefWidthValue ( ) { return prefWidth ; } public float getPrefWidth ( ) { float v = prefWidth . get ( actor ) ; if ( background ! = null ) v = Math . max ( v , background . getMinWidth ( ) ) ; return Math . max ( getMinWidth ( ) , v + padLeft . get ( this ) + padRight . get ( this ) ) ; } public Value getPrefHeightValue ( ) { return prefHeight ; } public float getPrefHeight ( ) { float v = prefHeight . get ( actor ) ; if ( background ! = null ) v = Math . max ( v , background . getMinHeight ( ) ) ; return Math . max ( getMinHeight ( ) , v + padTop . get ( this ) + padBottom . get ( this ) ) ; } public Value getMaxWidthValue ( ) { return maxWidth ; } public float getMaxWidth ( ) { float v = maxWidth . get ( actor ) ; if ( v > <int> ) v + = padLeft . get ( this ) + padRight . get ( this ) ; return v ; } public Value getMaxHeightValue ( ) { return maxHeight ; } public float getMaxHeight ( ) { float v = maxHeight . get ( actor ) ; if ( v > <int> ) v + = padTop . get ( this ) + padBottom . get ( this ) ; return v ; } public Value getPadTopValue ( ) { return padTop ; } public float getPadTop ( ) { return padTop . get ( this ) ; } public Value getPadLeftValue ( ) { return padLeft ; } public float getPadLeft ( ) { return padLeft . get ( this ) ; } public Value getPadBottomValue ( ) { return padBottom ; } public float getPadBottom ( ) { return padBottom . get ( this ) ; } public Value getPadRightValue ( ) { return padRight ; } public float getPadRight ( ) { return padRight . get ( this ) ; } public float getPadX ( ) { return padLeft . get ( this ) + padRight . get ( this ) ; } public float getPadY ( ) { return padTop . get ( this ) + padBottom . get ( this ) ; } public float getFillX ( ) { return fillX ; } public float getFillY ( ) { return fillY ; } public int getAlign ( ) { return align ; } public void setRound ( boolean round ) { this . round = round ; } public void setClip ( boolean enabled ) { clip = enabled ; setTransform ( enabled ) ; invalidate ( ) ; } public boolean getClip ( ) { return clip ; } public Actor hit ( float x , float y , boolean touchable ) { if ( clip ) { if ( touchable & & getTouchable ( ) = = Touchable . disabled ) return null ; if ( x < <int> | | x > = getWidth ( ) | | y < <int> | | y > = getHeight ( ) ) return null ; } return super . hit ( x , y , touchable ) ; } public void drawDebug ( ShapeRenderer shapes ) { validate ( ) ; if ( isTransform ( ) ) { applyTransform ( shapes , computeTransform ( ) ) ; if ( clip ) { shapes . flush ( ) ; float padLeft = this . padLeft . get ( this ) , padBottom = this . padBottom . get ( this ) ; boolean draw = background = = null ? clipBegin ( <int> , <int> , getWidth ( ) , getHeight ( ) ) : clipBegin ( padLeft , padBottom , getWidth ( ) - padLeft - padRight . get ( this ) , getHeight ( ) - padBottom - padTop . get ( this ) ) ; if ( draw ) { drawDebugChildren ( shapes ) ; clipEnd ( ) ; } } else drawDebugChildren ( shapes ) ; resetTransform ( shapes ) ; } else super . drawDebug ( shapes ) ; } } 

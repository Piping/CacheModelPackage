package org . apache . cassandra . cql3 . validation . entities ; import java . util . * ; import com . google . common . base . Joiner ; import com . google . common . collect . Iterables ; import org . junit . Before ; import org . junit . Ignore ; import org . junit . Test ; import org . apache . cassandra . cql3 . Attributes ; import org . apache . cassandra . cql3 . CQLStatement ; import org . apache . cassandra . cql3 . QueryProcessor ; import org . apache . cassandra . cql3 . functions . Function ; import org . apache . cassandra . cql3 . statements . BatchStatement ; import org . apache . cassandra . cql3 . statements . ModificationStatement ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . service . ClientState ; import static org . junit . Assert . assertTrue ; public class UFIdentificationTest extends CQLTester { private com . google . common . base . Function < Function , String > toFunctionNames = new com . google . common . base . Function < Function , String > ( ) { public String apply ( Function f ) { return f . name ( ) . keyspace + <str> + f . name ( ) . name ; } } ; String tFunc ; String iFunc ; String lFunc ; String sFunc ; String mFunc ; String uFunc ; String udtFunc ; String userType ; @Before public void setup ( ) throws Throwable { userType = KEYSPACE + <str> + createType ( <str> ) ; createTable ( <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + userType + <str> + <str> + <str> ) ; tFunc = createEchoFunction ( <str> ) ; iFunc = createEchoFunction ( <str> ) ; lFunc = createEchoFunction ( <str> ) ; sFunc = createEchoFunction ( <str> ) ; mFunc = createEchoFunction ( <str> ) ; uFunc = createEchoFunction ( <str> ) ; udtFunc = createEchoFunction ( userType ) ; } @Test public void testSimpleModificationStatement ( ) throws Throwable { assertFunctions ( cql ( <str> , functionCall ( tFunc , <str> ) ) , tFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) ) , iFunc ) ; assertFunctions ( cql ( <str> , functionCall ( tFunc , <str> ) ) , tFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) ) , iFunc ) ; assertFunctions ( cql ( <str> , functionCall ( lFunc , <str> ) ) , lFunc ) ; assertFunctions ( cql ( <str> , functionCall ( sFunc , <str> ) ) , sFunc ) ; assertFunctions ( cql ( <str> , functionCall ( mFunc , <str> ) ) , mFunc ) ; assertFunctions ( cql ( <str> , functionCall ( udtFunc , <str> ) ) , udtFunc ) ; assertFunctions ( cql ( <str> , functionCall ( uFunc , <str> ) ) , uFunc , <str> ) ; } @Test public void testNonTerminalCollectionLiterals ( ) throws Throwable { String iFunc2 = createEchoFunction ( <str> ) ; String mapValue = String . format ( <str> , functionCall ( iFunc , <str> ) , functionCall ( iFunc2 , <str> ) ) ; assertFunctions ( cql ( <str> , mapValue ) , iFunc , iFunc2 ) ; String listValue = String . format ( <str> , functionCall ( iFunc , <str> ) ) ; assertFunctions ( cql ( <str> , listValue ) , iFunc ) ; String setValue = String . format ( <str> , functionCall ( iFunc , <str> ) ) ; assertFunctions ( cql ( <str> , setValue ) , iFunc ) ; } @Test public void testNonTerminalUDTLiterals ( ) throws Throwable { String udtValue = String . format ( <str> , functionCall ( iFunc , <str> ) , functionCall ( tFunc , <str> ) ) ; assertFunctions ( cql ( <str> , udtValue ) , iFunc , tFunc ) ; } @Test public void testModificationStatementWithConditions ( ) throws Throwable { assertFunctions ( cql ( <str> , functionCall ( tFunc , <str> ) ) , tFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) ) , iFunc ) ; assertFunctions ( cql ( <str> , functionCall ( lFunc , <str> ) ) , lFunc ) ; assertFunctions ( cql ( <str> , functionCall ( sFunc , <str> ) ) , sFunc ) ; assertFunctions ( cql ( <str> , functionCall ( mFunc , <str> ) ) , mFunc ) ; String iFunc2 = createEchoFunction ( <str> ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( iFunc2 , <str> ) ) , iFunc , iFunc2 ) ; assertFunctions ( cql ( <str> , functionCall ( uFunc , <str> ) ) , uFunc , <str> ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( iFunc2 , <str> ) ) , iFunc , iFunc2 ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( iFunc2 , <str> ) ) , iFunc , iFunc2 ) ; } @Test @Ignore public void testModificationStatementWithAttributesFromFunction ( ) throws Throwable { String longFunc = createEchoFunction ( <str> ) ; assertFunctions ( cql ( <str> , functionCall ( longFunc , <str> ) ) , longFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) ) , iFunc ) ; assertFunctions ( cql ( <str> , functionCall ( longFunc , <str> ) , functionCall ( iFunc , <str> ) ) , longFunc , iFunc ) ; } @Test public void testModificationStatementWithNestedFunctions ( ) throws Throwable { String iFunc2 = createEchoFunction ( <str> ) ; String iFunc3 = createEchoFunction ( <str> ) ; String iFunc4 = createEchoFunction ( <str> ) ; String iFunc5 = createEchoFunction ( <str> ) ; String iFunc6 = createEchoFunction ( <str> ) ; String nestedFunctionCall = nestedFunctionCall ( iFunc6 , iFunc5 , nestedFunctionCall ( iFunc4 , iFunc3 , nestedFunctionCall ( iFunc2 , iFunc , <str> ) ) ) ; assertFunctions ( cql ( <str> , nestedFunctionCall ) , iFunc , iFunc2 , iFunc3 , iFunc4 , iFunc5 , iFunc6 ) ; } @Test public void testSelectStatementSimpleRestrictions ( ) throws Throwable { assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) ) , iFunc ) ; assertFunctions ( cql ( <str> , functionCall ( tFunc , <str> ) ) , tFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) ) , iFunc ) ; assertFunctions ( cql ( <str> , functionCall ( tFunc , <str> ) ) , tFunc ) ; String iFunc2 = createEchoFunction ( <str> ) ; String tFunc2 = createEchoFunction ( <str> ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( tFunc , <str> ) , functionCall ( iFunc2 , <str> ) , functionCall ( tFunc2 , <str> ) ) , iFunc , tFunc , iFunc2 , tFunc2 ) ; } @Test public void testSelectStatementRestrictionsWithNestedFunctions ( ) throws Throwable { String iFunc2 = createEchoFunction ( <str> ) ; String iFunc3 = createEchoFunction ( <str> ) ; String iFunc4 = createEchoFunction ( <str> ) ; String iFunc5 = createEchoFunction ( <str> ) ; String iFunc6 = createEchoFunction ( <str> ) ; String nestedFunctionCall = nestedFunctionCall ( iFunc6 , iFunc5 , nestedFunctionCall ( iFunc3 , iFunc4 , nestedFunctionCall ( iFunc , iFunc2 , <str> ) ) ) ; assertFunctions ( cql ( <str> , nestedFunctionCall ) , iFunc , iFunc2 , iFunc3 , iFunc4 , iFunc5 , iFunc6 ) ; } @Test public void testNonTerminalTupleInSelectRestrictions ( ) throws Throwable { assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( tFunc , <str> ) ) , iFunc , tFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( tFunc , <str> ) ) , iFunc , tFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( tFunc , <str> ) ) , iFunc , tFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( tFunc , <str> ) ) , iFunc , tFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( tFunc , <str> ) , functionCall ( iFunc , <str> ) , functionCall ( tFunc , <str> ) ) , iFunc , tFunc ) ; } @Test public void testNestedFunctionInTokenRestriction ( ) throws Throwable { String iFunc2 = createEchoFunction ( <str> ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) ) , <str> , iFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) ) , <str> , iFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) ) , <str> , iFunc ) ; assertFunctions ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( iFunc2 , <str> ) ) , <str> , iFunc , iFunc2 ) ; } @Test public void testSelectStatementSimpleSelections ( ) throws Throwable { String iFunc2 = createEchoFunction ( <str> ) ; execute ( <str> ) ; assertFunctions ( cql2 ( <str> , functionCall ( iFunc , <str> ) ) , iFunc ) ; assertFunctions ( cql2 ( <str> , nestedFunctionCall ( iFunc , iFunc2 , <str> ) ) , iFunc , iFunc2 ) ; } @Test public void testSelectStatementNestedSelections ( ) throws Throwable { String iFunc2 = createEchoFunction ( <str> ) ; execute ( <str> ) ; assertFunctions ( cql2 ( <str> , functionCall ( iFunc , <str> ) ) , iFunc ) ; assertFunctions ( cql2 ( <str> , nestedFunctionCall ( iFunc , iFunc2 , <str> ) ) , iFunc , iFunc2 ) ; } @Test public void testBatchStatement ( ) throws Throwable { String iFunc2 = createEchoFunction ( <str> ) ; List < ModificationStatement > statements = new ArrayList < > ( ) ; statements . add ( modificationStatement ( cql ( <str> , functionCall ( iFunc , <str> ) ) ) ) ; statements . add ( modificationStatement ( cql ( <str> , functionCall ( iFunc2 , <str> ) ) ) ) ; statements . add ( modificationStatement ( cql ( <str> , functionCall ( tFunc , <str> ) ) ) ) ; BatchStatement batch = new BatchStatement ( - <int> , BatchStatement . Type . LOGGED , statements , Attributes . none ( ) ) ; assertFunctions ( batch , iFunc , iFunc2 , tFunc ) ; } @Test public void testBatchStatementWithConditions ( ) throws Throwable { List < ModificationStatement > statements = new ArrayList < > ( ) ; statements . add ( modificationStatement ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( lFunc , <str> ) ) ) ) ; statements . add ( modificationStatement ( cql ( <str> , functionCall ( iFunc , <str> ) , functionCall ( sFunc , <str> ) ) ) ) ; BatchStatement batch = new BatchStatement ( - <int> , BatchStatement . Type . LOGGED , statements , Attributes . none ( ) ) ; assertFunctions ( batch , iFunc , lFunc , sFunc ) ; } private ModificationStatement modificationStatement ( String cql ) { return ( ModificationStatement ) QueryProcessor . getStatement ( cql , ClientState . forInternalCalls ( ) ) . statement ; } private void assertFunctions ( String cql , String . . . function ) { CQLStatement stmt = QueryProcessor . getStatement ( cql , ClientState . forInternalCalls ( ) ) . statement ; assertFunctions ( stmt , function ) ; } private void assertFunctions ( CQLStatement stmt , String . . . function ) { Set < String > expected = com . google . common . collect . Sets . newHashSet ( function ) ; Set < String > actual = com . google . common . collect . Sets . newHashSet ( Iterables . transform ( stmt . getFunctions ( ) , toFunctionNames ) ) ; assertTrue ( com . google . common . collect . Sets . symmetricDifference ( expected , actual ) . isEmpty ( ) ) ; } private String cql ( String template , String . . . params ) { String tableName = KEYSPACE + <str> + currentTable ( ) ; return String . format ( template , com . google . common . collect . Lists . asList ( tableName , params ) . toArray ( ) ) ; } private String cql2 ( String template , String . . . params ) { Object [ ] args = Arrays . copyOf ( params , params . length + <int> ) ; args [ params . length ] = KEYSPACE + <str> + currentTable ( ) ; return String . format ( template , args ) ; } private String functionCall ( String fName , String . . . args ) { return String . format ( <str> , fName , Joiner . on ( <str> ) . join ( args ) ) ; } private String nestedFunctionCall ( String outer , String inner , String innerArgs ) { return functionCall ( outer , functionCall ( inner , innerArgs ) ) ; } private String createEchoFunction ( String type ) throws Throwable { return createFunction ( KEYSPACE , type , <str> + type + <str> + <str> + <str> + type + <str> + <str> ) ; } } 

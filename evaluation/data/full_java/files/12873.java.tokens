package org . gradle . internal . resolve . result ; import org . gradle . internal . component . external . model . MutableModuleComponentResolveMetaData ; import org . gradle . internal . resolve . ModuleVersionResolveException ; public class DefaultBuildableModuleComponentMetaDataResolveResult extends DefaultResourceAwareResolveResult implements BuildableModuleComponentMetaDataResolveResult { private State state = State . Unknown ; private ModuleVersionResolveException failure ; private MutableModuleComponentResolveMetaData metaData ; private boolean authoritative ; private void reset ( State state ) { this . state = state ; metaData = null ; failure = null ; authoritative = false ; } public void reset ( ) { reset ( State . Unknown ) ; } public void resolved ( MutableModuleComponentResolveMetaData metaData ) { reset ( State . Resolved ) ; this . metaData = metaData ; authoritative = true ; } public void missing ( ) { reset ( State . Missing ) ; authoritative = true ; } public void failed ( ModuleVersionResolveException failure ) { reset ( State . Failed ) ; this . failure = failure ; authoritative = true ; } public State getState ( ) { return state ; } public boolean hasResult ( ) { return state ! = State . Unknown ; } public ModuleVersionResolveException getFailure ( ) { assertHasResult ( ) ; return failure ; } public MutableModuleComponentResolveMetaData getMetaData ( ) throws ModuleVersionResolveException { assertResolved ( ) ; return metaData ; } public boolean isAuthoritative ( ) { assertHasResult ( ) ; return authoritative ; } public void setAuthoritative ( boolean authoritative ) { assertHasResult ( ) ; this . authoritative = authoritative ; } private void assertHasResult ( ) { if ( ! hasResult ( ) ) { throw new IllegalStateException ( <str> ) ; } } private void assertResolved ( ) { if ( state = = State . Failed ) { throw failure ; } if ( state ! = State . Resolved ) { throw new IllegalStateException ( <str> ) ; } } } 

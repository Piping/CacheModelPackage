package org . elasticsearch . index . query ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . BoostQuery ; import org . apache . lucene . search . FuzzyQuery ; import org . apache . lucene . search . NumericRangeQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . collect . Tuple ; import org . elasticsearch . common . unit . Fuzziness ; import org . hamcrest . Matchers ; import java . io . IOException ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; public class FuzzyQueryBuilderTests extends AbstractQueryTestCase < FuzzyQueryBuilder > { @Override protected FuzzyQueryBuilder doCreateTestQueryBuilder ( ) { Tuple < String , Object > fieldAndValue = getRandomFieldNameAndValue ( ) ; FuzzyQueryBuilder query = new FuzzyQueryBuilder ( fieldAndValue . v1 ( ) , fieldAndValue . v2 ( ) ) ; if ( randomBoolean ( ) ) { query . fuzziness ( randomFuzziness ( query . fieldName ( ) ) ) ; } if ( randomBoolean ( ) ) { query . prefixLength ( randomIntBetween ( <int> , <int> ) ) ; } if ( randomBoolean ( ) ) { query . maxExpansions ( randomIntBetween ( <int> , <int> ) ) ; } if ( randomBoolean ( ) ) { query . transpositions ( randomBoolean ( ) ) ; } if ( randomBoolean ( ) ) { query . rewrite ( getRandomRewriteMethod ( ) ) ; } return query ; } @Override protected void doAssertLuceneQuery ( FuzzyQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { if ( isNumericFieldName ( queryBuilder . fieldName ( ) ) | | queryBuilder . fieldName ( ) . equals ( DATE_FIELD_NAME ) ) { assertThat ( query , instanceOf ( NumericRangeQuery . class ) ) ; } else { assertThat ( query , instanceOf ( FuzzyQuery . class ) ) ; } } public void testIllegalArguments ( ) { try { new FuzzyQueryBuilder ( null , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FuzzyQueryBuilder ( <str> , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FuzzyQueryBuilder ( <str> , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testUnsupportedFuzzinessForStringType ( ) throws IOException { QueryShardContext context = createShardContext ( ) ; context . setAllowUnmappedFields ( true ) ; FuzzyQueryBuilder fuzzyQueryBuilder = new FuzzyQueryBuilder ( STRING_FIELD_NAME , <str> ) ; fuzzyQueryBuilder . fuzziness ( Fuzziness . build ( randomFrom ( <str> , <str> , <str> ) ) ) ; try { fuzzyQueryBuilder . toQuery ( context ) ; fail ( <str> ) ; } catch ( NumberFormatException e ) { assertThat ( e . getMessage ( ) , Matchers . containsString ( <str> ) ) ; } } public void testToQueryWithStringField ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + STRING_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; Query parsedQuery = parseQuery ( query ) . toQuery ( createShardContext ( ) ) ; assertThat ( parsedQuery , instanceOf ( BoostQuery . class ) ) ; BoostQuery boostQuery = ( BoostQuery ) parsedQuery ; assertThat ( boostQuery . getBoost ( ) , equalTo ( <float> ) ) ; assertThat ( boostQuery . getQuery ( ) , instanceOf ( FuzzyQuery . class ) ) ; FuzzyQuery fuzzyQuery = ( FuzzyQuery ) boostQuery . getQuery ( ) ; assertThat ( fuzzyQuery . getTerm ( ) , equalTo ( new Term ( STRING_FIELD_NAME , <str> ) ) ) ; assertThat ( fuzzyQuery . getMaxEdits ( ) , equalTo ( Fuzziness . AUTO . asDistance ( <str> ) ) ) ; assertThat ( fuzzyQuery . getPrefixLength ( ) , equalTo ( <int> ) ) ; } public void testToQueryWithNumericField ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String query = <str> + <str> + <str> + INT_FIELD_NAME + <str> + <str> + <str> + <str> + <str> + <str> ; Query parsedQuery = parseQuery ( query ) . toQuery ( createShardContext ( ) ) ; assertThat ( parsedQuery , instanceOf ( NumericRangeQuery . class ) ) ; NumericRangeQuery fuzzyQuery = ( NumericRangeQuery ) parsedQuery ; assertThat ( fuzzyQuery . getMin ( ) . longValue ( ) , equalTo ( <int> ) ) ; assertThat ( fuzzyQuery . getMax ( ) . longValue ( ) , equalTo ( <int> ) ) ; } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; FuzzyQueryBuilder parsed = ( FuzzyQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <float> , parsed . boost ( ) , <float> ) ; assertEquals ( json , <int> , parsed . fuzziness ( ) . asInt ( ) ) ; } } 

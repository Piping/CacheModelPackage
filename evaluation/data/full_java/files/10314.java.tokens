package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . MapInterfaceTest ; import java . util . HashMap ; import java . util . Map ; @GwtCompatible public class ConstrainedMapImplementsMapTest extends MapInterfaceTest < String , Integer > { public ConstrainedMapImplementsMapTest ( ) { super ( true , true , true , true , true ) ; } @Override protected Map < String , Integer > makeEmptyMap ( ) { return MapConstraints . constrainedMap ( new HashMap < String , Integer > ( ) , MapConstraintsTest . TEST_CONSTRAINT ) ; } @Override protected Map < String , Integer > makePopulatedMap ( ) { final Map < String , Integer > sortedMap = MapConstraints . constrainedMap ( new HashMap < String , Integer > ( ) , MapConstraintsTest . TEST_CONSTRAINT ) ; sortedMap . put ( <str> , <int> ) ; sortedMap . put ( <str> , <int> ) ; sortedMap . put ( <str> , <int> ) ; return sortedMap ; } @Override protected String getKeyNotInPopulatedMap ( ) throws UnsupportedOperationException { return <str> ; } @Override protected Integer getValueNotInPopulatedMap ( ) throws UnsupportedOperationException { return - <int> ; } @Override public void testEntrySetRemoveAllNullFromEmpty ( ) { try { super . testEntrySetRemoveAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testEntrySetRetainAllNullFromEmpty ( ) { try { super . testEntrySetRetainAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testKeySetRemoveAllNullFromEmpty ( ) { try { super . testKeySetRemoveAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testKeySetRetainAllNullFromEmpty ( ) { try { super . testKeySetRetainAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testValuesRemoveAllNullFromEmpty ( ) { try { super . testValuesRemoveAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } @Override public void testValuesRetainAllNullFromEmpty ( ) { try { super . testValuesRemoveAllNullFromEmpty ( ) ; } catch ( RuntimeException tolerated ) { } } } 

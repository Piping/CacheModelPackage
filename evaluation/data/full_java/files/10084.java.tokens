package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUE_QUERIES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . WrongType ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; @GwtCompatible public class MapContainsValueTester < K , V > extends AbstractMapTester < K , V > { @CollectionSize.Require ( absent = ZERO ) public void testContains_yes ( ) { assertTrue ( <str> , getMap ( ) . containsValue ( v0 ( ) ) ) ; } public void testContains_no ( ) { assertFalse ( <str> , getMap ( ) . containsValue ( v3 ( ) ) ) ; } @MapFeature.Require ( ALLOWS_NULL_VALUE_QUERIES ) public void testContains_nullNotContainedButAllowed ( ) { assertFalse ( <str> , getMap ( ) . containsValue ( null ) ) ; } @MapFeature.Require ( absent = ALLOWS_NULL_VALUE_QUERIES ) public void testContains_nullNotContainedAndUnsupported ( ) { expectNullValueMissingWhenNullValuesUnsupported ( <str> ) ; } @MapFeature.Require ( ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testContains_nonNullWhenNullContained ( ) { initMapWithNullValue ( ) ; assertFalse ( <str> , getMap ( ) . containsValue ( v3 ( ) ) ) ; } @MapFeature.Require ( ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testContains_nullContained ( ) { initMapWithNullValue ( ) ; assertTrue ( <str> , getMap ( ) . containsValue ( null ) ) ; } public void testContains_wrongType ( ) { try { assertFalse ( <str> , getMap ( ) . containsValue ( WrongType . VALUE ) ) ; } catch ( ClassCastException tolerated ) { } } } 

package com . google . common . net ; import static com . google . common . base . Charsets . UTF_16 ; import static com . google . common . base . Charsets . UTF_8 ; import static com . google . common . net . MediaType . ANY_APPLICATION_TYPE ; import static com . google . common . net . MediaType . ANY_AUDIO_TYPE ; import static com . google . common . net . MediaType . ANY_IMAGE_TYPE ; import static com . google . common . net . MediaType . ANY_TEXT_TYPE ; import static com . google . common . net . MediaType . ANY_TYPE ; import static com . google . common . net . MediaType . ANY_VIDEO_TYPE ; import static com . google . common . net . MediaType . HTML_UTF_8 ; import static com . google . common . net . MediaType . JPEG ; import static com . google . common . net . MediaType . PLAIN_TEXT_UTF_8 ; import static com . google . common . truth . Truth . assertThat ; import static java . lang . reflect . Modifier . isFinal ; import static java . lang . reflect . Modifier . isPublic ; import static java . lang . reflect . Modifier . isStatic ; import static java . util . Arrays . asList ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Function ; import com . google . common . base . Optional ; import com . google . common . base . Predicate ; import com . google . common . base . Throwables ; import com . google . common . collect . FluentIterable ; import com . google . common . collect . ImmutableListMultimap ; import com . google . common . collect . ImmutableMultimap ; import com . google . common . testing . EqualsTester ; import com . google . common . testing . NullPointerTester ; import junit . framework . TestCase ; import java . lang . reflect . Field ; import java . nio . charset . Charset ; import java . nio . charset . IllegalCharsetNameException ; import java . nio . charset . UnsupportedCharsetException ; @GwtCompatible ( emulated = true ) public class MediaTypeTest extends TestCase { @GwtIncompatible ( <str> ) public void testParse_useConstants ( ) throws Exception { for ( MediaType constant : getConstants ( ) ) { assertSame ( constant , MediaType . parse ( constant . toString ( ) ) ) ; } } @GwtIncompatible ( <str> ) public void testCreate_useConstants ( ) throws Exception { for ( MediaType constant : getConstants ( ) ) { assertSame ( constant , MediaType . create ( constant . type ( ) , constant . subtype ( ) ) . withParameters ( constant . parameters ( ) ) ) ; } } @GwtIncompatible ( <str> ) public void testConstants_charset ( ) throws Exception { for ( Field field : getConstantFields ( ) ) { Optional < Charset > charset = ( ( MediaType ) field . get ( null ) ) . charset ( ) ; if ( field . getName ( ) . endsWith ( <str> ) ) { assertThat ( charset ) . hasValue ( UTF_8 ) ; } else { assertThat ( charset ) . isAbsent ( ) ; } } } @GwtIncompatible ( <str> ) private static FluentIterable < Field > getConstantFields ( ) { return FluentIterable . from ( asList ( MediaType . class . getDeclaredFields ( ) ) ) . filter ( new Predicate < Field > ( ) { @Override public boolean apply ( Field input ) { int modifiers = input . getModifiers ( ) ; return isPublic ( modifiers ) & & isStatic ( modifiers ) & & isFinal ( modifiers ) & & MediaType . class . equals ( input . getType ( ) ) ; } } ) ; } @GwtIncompatible ( <str> ) private static FluentIterable < MediaType > getConstants ( ) { return getConstantFields ( ) . transform ( new Function < Field , MediaType > ( ) { @Override public MediaType apply ( Field input ) { try { return ( MediaType ) input . get ( null ) ; } catch ( Exception e ) { throw Throwables . propagate ( e ) ; } } } ) ; } public void testCreate_invalidType ( ) { try { MediaType . create ( <str> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreate_invalidSubtype ( ) { try { MediaType . create ( <str> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreate_wildcardTypeDeclaredSubtype ( ) { try { MediaType . create ( <str> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testCreateApplicationType ( ) { MediaType newType = MediaType . createApplicationType ( <str> ) ; assertEquals ( <str> , newType . type ( ) ) ; assertEquals ( <str> , newType . subtype ( ) ) ; } public void testCreateAudioType ( ) { MediaType newType = MediaType . createAudioType ( <str> ) ; assertEquals ( <str> , newType . type ( ) ) ; assertEquals ( <str> , newType . subtype ( ) ) ; } public void testCreateImageType ( ) { MediaType newType = MediaType . createImageType ( <str> ) ; assertEquals ( <str> , newType . type ( ) ) ; assertEquals ( <str> , newType . subtype ( ) ) ; } public void testCreateTextType ( ) { MediaType newType = MediaType . createTextType ( <str> ) ; assertEquals ( <str> , newType . type ( ) ) ; assertEquals ( <str> , newType . subtype ( ) ) ; } public void testCreateVideoType ( ) { MediaType newType = MediaType . createVideoType ( <str> ) ; assertEquals ( <str> , newType . type ( ) ) ; assertEquals ( <str> , newType . subtype ( ) ) ; } public void testGetType ( ) { assertEquals ( <str> , MediaType . parse ( <str> ) . type ( ) ) ; assertEquals ( <str> , MediaType . parse ( <str> ) . type ( ) ) ; } public void testGetSubtype ( ) { assertEquals ( <str> , MediaType . parse ( <str> ) . subtype ( ) ) ; assertEquals ( <str> , MediaType . parse ( <str> ) . subtype ( ) ) ; } private static final ImmutableListMultimap < String , String > PARAMETERS = ImmutableListMultimap . of ( <str> , <str> , <str> , <str> , <str> , <str> ) ; public void testGetParameters ( ) { assertEquals ( ImmutableListMultimap . of ( ) , MediaType . parse ( <str> ) . parameters ( ) ) ; assertEquals ( ImmutableListMultimap . of ( <str> , <str> ) , MediaType . parse ( <str> ) . parameters ( ) ) ; assertEquals ( PARAMETERS , MediaType . parse ( <str> ) . parameters ( ) ) ; } public void testWithoutParameters ( ) { assertSame ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withoutParameters ( ) ) ; assertEquals ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withoutParameters ( ) ) ; } public void testWithParameters ( ) { assertEquals ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withParameters ( PARAMETERS ) ) ; assertEquals ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withParameters ( PARAMETERS ) ) ; } public void testWithParameters_invalidAttribute ( ) { MediaType mediaType = MediaType . parse ( <str> ) ; ImmutableListMultimap < String , String > parameters = ImmutableListMultimap . of ( <str> , <str> , <str> , <str> , <str> , <str> ) ; try { mediaType . withParameters ( parameters ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testWithParameter ( ) { assertEquals ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withParameter ( <str> , <str> ) ) ; assertEquals ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withParameter ( <str> , <str> ) ) ; assertEquals ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withParameter ( <str> , <str> ) ) ; assertEquals ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withParameter ( <str> , <str> ) ) ; } public void testWithParameter_invalidAttribute ( ) { MediaType mediaType = MediaType . parse ( <str> ) ; try { mediaType . withParameter ( <str> , <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testWithCharset ( ) { assertEquals ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withCharset ( UTF_8 ) ) ; assertEquals ( MediaType . parse ( <str> ) , MediaType . parse ( <str> ) . withCharset ( UTF_8 ) ) ; } public void testHasWildcard ( ) { assertFalse ( PLAIN_TEXT_UTF_8 . hasWildcard ( ) ) ; assertFalse ( JPEG . hasWildcard ( ) ) ; assertTrue ( ANY_TYPE . hasWildcard ( ) ) ; assertTrue ( ANY_APPLICATION_TYPE . hasWildcard ( ) ) ; assertTrue ( ANY_AUDIO_TYPE . hasWildcard ( ) ) ; assertTrue ( ANY_IMAGE_TYPE . hasWildcard ( ) ) ; assertTrue ( ANY_TEXT_TYPE . hasWildcard ( ) ) ; assertTrue ( ANY_VIDEO_TYPE . hasWildcard ( ) ) ; } public void testIs ( ) { assertTrue ( PLAIN_TEXT_UTF_8 . is ( ANY_TYPE ) ) ; assertTrue ( JPEG . is ( ANY_TYPE ) ) ; assertTrue ( ANY_TEXT_TYPE . is ( ANY_TYPE ) ) ; assertTrue ( PLAIN_TEXT_UTF_8 . is ( ANY_TEXT_TYPE ) ) ; assertTrue ( PLAIN_TEXT_UTF_8 . withoutParameters ( ) . is ( ANY_TEXT_TYPE ) ) ; assertFalse ( JPEG . is ( ANY_TEXT_TYPE ) ) ; assertTrue ( PLAIN_TEXT_UTF_8 . is ( PLAIN_TEXT_UTF_8 ) ) ; assertTrue ( PLAIN_TEXT_UTF_8 . is ( PLAIN_TEXT_UTF_8 . withoutParameters ( ) ) ) ; assertFalse ( PLAIN_TEXT_UTF_8 . withoutParameters ( ) . is ( PLAIN_TEXT_UTF_8 ) ) ; assertFalse ( PLAIN_TEXT_UTF_8 . is ( HTML_UTF_8 ) ) ; assertFalse ( PLAIN_TEXT_UTF_8 . withParameter ( <str> , <str> ) . is ( PLAIN_TEXT_UTF_8 ) ) ; assertFalse ( PLAIN_TEXT_UTF_8 . is ( PLAIN_TEXT_UTF_8 . withParameter ( <str> , <str> ) ) ) ; } public void testParse_empty ( ) { try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testParse_badInput ( ) { try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { MediaType . parse ( <str> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testGetCharset ( ) { assertThat ( MediaType . parse ( <str> ) . charset ( ) ) . isAbsent ( ) ; assertThat ( MediaType . parse ( <str> ) . charset ( ) ) . hasValue ( UTF_8 ) ; } @GwtIncompatible ( <str> ) public void testGetCharset_utf16 ( ) { assertThat ( MediaType . parse ( <str> ) . charset ( ) ) . hasValue ( UTF_16 ) ; } public void testGetCharset_tooMany ( ) { MediaType mediaType = MediaType . parse ( <str> ) ; try { mediaType . charset ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } } public void testGetCharset_illegalCharset ( ) { MediaType mediaType = MediaType . parse ( <str> ) ; try { mediaType . charset ( ) ; fail ( ) ; } catch ( IllegalCharsetNameException expected ) { } } public void testGetCharset_unsupportedCharset ( ) { MediaType mediaType = MediaType . parse ( <str> ) ; try { mediaType . charset ( ) ; fail ( ) ; } catch ( UnsupportedCharsetException expected ) { } } public void testEquals ( ) { new EqualsTester ( ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) , MediaType . create ( <str> , <str> ) , MediaType . parse ( <str> ) , MediaType . parse ( <str> ) , MediaType . create ( <str> , <str> ) . withParameter ( <str> , <str> ) . withoutParameters ( ) ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) . withCharset ( UTF_8 ) , MediaType . create ( <str> , <str> ) . withParameter ( <str> , <str> ) , MediaType . create ( <str> , <str> ) . withParameters ( ImmutableMultimap . of ( <str> , <str> ) ) , MediaType . parse ( <str> ) , MediaType . parse ( <str> ) , MediaType . parse ( <str> ) , MediaType . parse ( <str> ) , MediaType . parse ( <str> ) , MediaType . parse ( <str> ) , MediaType . parse ( <str> ) , MediaType . parse ( <str> ) , MediaType . parse ( <str> ) ) . addEqualityGroup ( MediaType . parse ( <str> ) ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) . withParameter ( <str> , <str> ) , MediaType . create ( <str> , <str> ) . withParameter ( <str> , <str> ) ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) . withParameter ( <str> , <str> ) , MediaType . create ( <str> , <str> ) . withParameter ( <str> , <str> ) ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) . withParameters ( ImmutableListMultimap . of ( <str> , <str> , <str> , <str> ) ) , MediaType . create ( <str> , <str> ) . withParameters ( ImmutableListMultimap . of ( <str> , <str> , <str> , <str> ) ) ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testEquals_nonUtf8Charsets ( ) { new EqualsTester ( ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) . withCharset ( UTF_8 ) ) . addEqualityGroup ( MediaType . create ( <str> , <str> ) . withCharset ( UTF_16 ) ) . testEquals ( ) ; } @GwtIncompatible ( <str> ) public void testNullPointer ( ) { NullPointerTester tester = new NullPointerTester ( ) ; tester . testAllPublicConstructors ( MediaType . class ) ; tester . testAllPublicStaticMethods ( MediaType . class ) ; tester . testAllPublicInstanceMethods ( MediaType . parse ( <str> ) ) ; } public void testToString ( ) { assertEquals ( <str> , MediaType . create ( <str> , <str> ) . toString ( ) ) ; assertEquals ( <str> , MediaType . create ( <str> , <str> ) . withParameter ( <str> , <str> ) . withParameter ( <str> , <str> ) . toString ( ) ) ; } } 

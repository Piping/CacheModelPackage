package org . gradle . build . docs . dsl . docbook ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . Text ; import java . util . ArrayList ; import java . util . LinkedList ; import java . util . List ; class DocBookBuilder { final LinkedList < Element > stack = new LinkedList < Element > ( ) ; final Document document ; DocBookBuilder ( Document document ) { this . document = document ; stack . addFirst ( document . createElement ( <str> ) ) ; } List < Element > getElements ( ) { List < Element > elements = new ArrayList < Element > ( ) ; for ( Node node = stack . getLast ( ) . getFirstChild ( ) ; node ! = null ; node = node . getNextSibling ( ) ) { elements . add ( ( Element ) node ) ; } return elements ; } public void appendChild ( String text ) { appendChild ( document . createTextNode ( text ) ) ; } public void appendChild ( Node node ) { boolean inPara = false ; if ( node instanceof Element ) { Element element = ( Element ) node ; if ( element . getTagName ( ) . equals ( <str> ) & & stack . getFirst ( ) . getTagName ( ) . equals ( <str> ) ) { pop ( ) ; inPara = true ; } } stack . getFirst ( ) . appendChild ( node ) ; if ( inPara ) { Element para = document . createElement ( <str> ) ; push ( para ) ; } } public void push ( Element element ) { stack . getFirst ( ) . appendChild ( element ) ; stack . addFirst ( element ) ; } public Element pop ( ) { Element element = stack . removeFirst ( ) ; if ( emptyPara ( element ) ) { element . getParentNode ( ) . removeChild ( element ) ; } return element ; } private boolean emptyPara ( Element element ) { if ( ! element . getTagName ( ) . equals ( <str> ) ) { return false ; } for ( Node node = element . getFirstChild ( ) ; node ! = null ; node = node . getNextSibling ( ) ) { if ( ! ( node instanceof Text ) ) { return false ; } Text text = ( Text ) node ; if ( ! text . getTextContent ( ) . matches ( <str> ) ) { return false ; } } return true ; } } 

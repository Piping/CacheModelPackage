package org . eclipse . debug . ui . actions ; import java . util . List ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchMode ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . actions . LaunchShortcutAction ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchConfigurationManager ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchGroupExtension ; import org . eclipse . debug . internal . ui . launchConfigurations . LaunchShortcutExtension ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . action . ActionContributionItem ; import org . eclipse . jface . action . IAction ; import org . eclipse . jface . action . IMenuCreator ; import org . eclipse . jface . viewers . ISelection ; import org . eclipse . swt . events . MenuAdapter ; import org . eclipse . swt . events . MenuEvent ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Menu ; import org . eclipse . swt . widgets . MenuItem ; import org . eclipse . ui . IPerspectiveDescriptor ; import org . eclipse . ui . IWorkbenchPage ; import org . eclipse . ui . IWorkbenchWindow ; import org . eclipse . ui . IWorkbenchWindowPulldownDelegate2 ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . activities . WorkbenchActivityHelper ; @Deprecated public class LaunchAsAction extends Action implements IMenuCreator , IWorkbenchWindowPulldownDelegate2 { private Menu fCreatedMenu ; private String fLaunchGroupIdentifier ; private IAction fAction ; public LaunchAsAction ( String launchGroupIdentifier ) { super ( ) ; fLaunchGroupIdentifier = launchGroupIdentifier ; ILaunchMode launchMode = DebugPlugin . getDefault ( ) . getLaunchManager ( ) . getLaunchMode ( getMode ( ) ) ; setText ( launchMode . getLaunchAsLabel ( ) ) ; setMenuCreator ( this ) ; } private LaunchGroupExtension getLaunchGroup ( ) { return getLaunchConfigurationManager ( ) . getLaunchGroup ( fLaunchGroupIdentifier ) ; } @Override public void run ( ) { } private void createAction ( Menu parent , IAction action , int count ) { StringBuffer label = new StringBuffer ( ) ; if ( count < <int> ) { label . append ( <str> ) ; label . append ( count ) ; label . append ( <str> ) ; } label . append ( action . getText ( ) ) ; action . setText ( label . toString ( ) ) ; ActionContributionItem item = new ActionContributionItem ( action ) ; item . fill ( parent , - <int> ) ; } @Override public void dispose ( ) { if ( getCreatedMenu ( ) ! = null ) { getCreatedMenu ( ) . dispose ( ) ; } } @Override public Menu getMenu ( Control parent ) { return null ; } @Override public Menu getMenu ( Menu parent ) { if ( getCreatedMenu ( ) ! = null ) { getCreatedMenu ( ) . dispose ( ) ; } setCreatedMenu ( new Menu ( parent ) ) ; fillMenu ( ) ; initMenu ( ) ; return getCreatedMenu ( ) ; } private void fillMenu ( ) { List < LaunchShortcutExtension > shortcuts = null ; String activePerspID = getActivePerspectiveID ( ) ; if ( activePerspID ! = null ) { shortcuts = getLaunchConfigurationManager ( ) . getLaunchShortcuts ( activePerspID , getCategory ( ) ) ; } if ( shortcuts = = null | | shortcuts . isEmpty ( ) ) { shortcuts = getLaunchConfigurationManager ( ) . getLaunchShortcuts ( getCategory ( ) ) ; } int menuCount = <int> ; String mode = getMode ( ) ; for ( LaunchShortcutExtension ext : shortcuts ) { if ( ext . getModes ( ) . contains ( mode ) & & ! WorkbenchActivityHelper . filterItem ( ext ) ) { populateMenu ( mode , ext , getCreatedMenu ( ) , menuCount ) ; menuCount + + ; } } } private void initMenu ( ) { fCreatedMenu . addMenuListener ( new MenuAdapter ( ) { @Override public void menuShown ( MenuEvent e ) { Menu m = ( Menu ) e . widget ; MenuItem [ ] items = m . getItems ( ) ; for ( int i = <int> ; i < items . length ; i + + ) { items [ i ] . dispose ( ) ; } fillMenu ( ) ; } } ) ; } private void populateMenu ( String mode , LaunchShortcutExtension ext , Menu menu , int menuCount ) { LaunchShortcutAction action = new LaunchShortcutAction ( mode , ext ) ; action . setActionDefinitionId ( ext . getId ( ) + <str> + mode ) ; String helpContextId = ext . getHelpContextId ( ) ; if ( helpContextId ! = null ) { PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( action , helpContextId ) ; } createAction ( menu , action , menuCount ) ; } private String getActivePerspectiveID ( ) { IWorkbenchWindow window = DebugUIPlugin . getActiveWorkbenchWindow ( ) ; if ( window ! = null ) { IWorkbenchPage page = window . getActivePage ( ) ; if ( page ! = null ) { IPerspectiveDescriptor persp = page . getPerspective ( ) ; if ( persp ! = null ) { return persp . getId ( ) ; } } } return null ; } private String getMode ( ) { return getLaunchGroup ( ) . getMode ( ) ; } private String getCategory ( ) { return getLaunchGroup ( ) . getCategory ( ) ; } private Menu getCreatedMenu ( ) { return fCreatedMenu ; } private void setCreatedMenu ( Menu createdMenu ) { fCreatedMenu = createdMenu ; } private LaunchConfigurationManager getLaunchConfigurationManager ( ) { return DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) ; } @Override public void init ( IWorkbenchWindow window ) { } @Override public void run ( IAction action ) { } @Override public void selectionChanged ( IAction action , ISelection selection ) { if ( fAction = = null ) { initialize ( action ) ; } } private void initialize ( IAction action ) { fAction = action ; action . setEnabled ( existsShortcutsForMode ( ) ) ; } private boolean existsShortcutsForMode ( ) { List < LaunchShortcutExtension > shortcuts = getLaunchConfigurationManager ( ) . getLaunchShortcuts ( getCategory ( ) ) ; for ( LaunchShortcutExtension ext : shortcuts ) { if ( ext . getModes ( ) . contains ( getMode ( ) ) ) { return true ; } } return false ; } } 

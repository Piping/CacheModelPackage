package org . gradle . api . internal . file . collections ; import org . gradle . api . JavaVersion ; import org . gradle . internal . Cast ; import org . gradle . internal . Factory ; import org . gradle . internal . UncheckedException ; import org . gradle . internal . reflect . DirectInstantiator ; import org . gradle . internal . resource . CharsetUtil ; import java . nio . charset . Charset ; public class DefaultDirectoryWalkerFactory implements Factory < DirectoryWalker > { private final ClassLoader classLoader ; private final JavaVersion javaVersion ; private DirectoryWalker instance ; DefaultDirectoryWalkerFactory ( ClassLoader classLoader , JavaVersion javaVersion ) { this . javaVersion = javaVersion ; this . classLoader = classLoader ; reset ( ) ; } DefaultDirectoryWalkerFactory ( ) { this ( DefaultDirectoryWalkerFactory . class . getClassLoader ( ) , JavaVersion . current ( ) ) ; } public DirectoryWalker create ( ) { return instance ; } private void reset ( ) { this . instance = createInstance ( ) ; } private DirectoryWalker createInstance ( ) { if ( javaVersion . isJava8Compatible ( ) | | ( javaVersion . isJava7Compatible ( ) & & defaultEncodingContainsPlatformEncoding ( ) ) ) { try { Class clazz = classLoader . loadClass ( <str> ) ; return Cast . uncheckedCast ( DirectInstantiator . instantiate ( clazz ) ) ; } catch ( ClassNotFoundException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } else { return new DefaultDirectoryWalker ( ) ; } } private boolean defaultEncodingContainsPlatformEncoding ( ) { String platformEncoding = System . getProperty ( <str> ) ; Charset platformCharset = platformEncoding ! = null & & Charset . isSupported ( platformEncoding ) ? Charset . forName ( platformEncoding ) : null ; Charset requiredCharset = platformCharset ! = null ? platformCharset : CharsetUtil . UTF_8 ; return Charset . defaultCharset ( ) . contains ( requiredCharset ) ; } } 

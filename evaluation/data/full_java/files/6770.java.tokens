package org . elasticsearch . index . similarity ; import org . apache . lucene . search . similarities . Distribution ; import org . apache . lucene . search . similarities . DistributionLL ; import org . apache . lucene . search . similarities . DistributionSPL ; import org . apache . lucene . search . similarities . IBSimilarity ; import org . apache . lucene . search . similarities . Lambda ; import org . apache . lucene . search . similarities . LambdaDF ; import org . apache . lucene . search . similarities . LambdaTTF ; import org . apache . lucene . search . similarities . Normalization ; import org . apache . lucene . search . similarities . Similarity ; import org . elasticsearch . common . settings . Settings ; import java . util . HashMap ; import java . util . Map ; import static java . util . Collections . unmodifiableMap ; public class IBSimilarityProvider extends AbstractSimilarityProvider { private static final Map < String , Distribution > DISTRIBUTIONS ; private static final Map < String , Lambda > LAMBDAS ; static { Map < String , Distribution > distributions = new HashMap < > ( ) ; distributions . put ( <str> , new DistributionLL ( ) ) ; distributions . put ( <str> , new DistributionSPL ( ) ) ; DISTRIBUTIONS = unmodifiableMap ( distributions ) ; Map < String , Lambda > lamdas = new HashMap < > ( ) ; lamdas . put ( <str> , new LambdaDF ( ) ) ; lamdas . put ( <str> , new LambdaTTF ( ) ) ; LAMBDAS = unmodifiableMap ( lamdas ) ; } private final IBSimilarity similarity ; public IBSimilarityProvider ( String name , Settings settings ) { super ( name ) ; Distribution distribution = parseDistribution ( settings ) ; Lambda lambda = parseLambda ( settings ) ; Normalization normalization = parseNormalization ( settings ) ; this . similarity = new IBSimilarity ( distribution , lambda , normalization ) ; } protected Distribution parseDistribution ( Settings settings ) { String rawDistribution = settings . get ( <str> ) ; Distribution distribution = DISTRIBUTIONS . get ( rawDistribution ) ; if ( distribution = = null ) { throw new IllegalArgumentException ( <str> + rawDistribution + <str> ) ; } return distribution ; } protected Lambda parseLambda ( Settings settings ) { String rawLambda = settings . get ( <str> ) ; Lambda lambda = LAMBDAS . get ( rawLambda ) ; if ( lambda = = null ) { throw new IllegalArgumentException ( <str> + rawLambda + <str> ) ; } return lambda ; } @Override public Similarity get ( ) { return similarity ; } } 

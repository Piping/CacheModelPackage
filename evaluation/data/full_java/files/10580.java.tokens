package com . google . common . net ; import static com . google . common . escape . testing . EscaperAsserts . assertEscaping ; import static com . google . common . escape . testing . EscaperAsserts . assertUnescaped ; import static com . google . common . escape . testing . EscaperAsserts . assertUnicodeEscaping ; import static com . google . common . net . UrlEscapers . urlFormParameterEscaper ; import static com . google . common . net . UrlEscapers . urlFragmentEscaper ; import static com . google . common . net . UrlEscapers . urlPathSegmentEscaper ; import com . google . common . annotations . GwtCompatible ; import com . google . common . escape . UnicodeEscaper ; import junit . framework . TestCase ; @GwtCompatible public class UrlEscapersTest extends TestCase { static void assertBasicUrlEscaperExceptPercent ( UnicodeEscaper e ) { try { e . escape ( ( String ) null ) ; fail ( <str> ) ; } catch ( NullPointerException x ) { } assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertUnicodeEscaping ( e , <str> , <str> , <str> ) ; assertUnicodeEscaping ( e , <str> , <str> , <str> ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; } static void assertBasicUrlEscaper ( UnicodeEscaper e ) { assertBasicUrlEscaperExceptPercent ( e ) ; assertEscaping ( e , <str> , <str> ) ; } public void testUrlFormParameterEscaper ( ) { UnicodeEscaper e = ( UnicodeEscaper ) urlFormParameterEscaper ( ) ; assertSame ( e , urlFormParameterEscaper ( ) ) ; assertBasicUrlEscaper ( e ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; } public void testUrlPathSegmentEscaper ( ) { UnicodeEscaper e = ( UnicodeEscaper ) urlPathSegmentEscaper ( ) ; assertPathEscaper ( e ) ; assertUnescaped ( e , <str> ) ; } static void assertPathEscaper ( UnicodeEscaper e ) { assertBasicUrlEscaper ( e ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertEscaping ( e , <str> , <str> ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; assertEquals ( <str> , e . escape ( <str> ) ) ; } public void testUrlFragmentEscaper ( ) { UnicodeEscaper e = ( UnicodeEscaper ) urlFragmentEscaper ( ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertUnescaped ( e , <str> ) ; assertPathEscaper ( e ) ; } } 

package org . elasticsearch . rest . support ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . path . PathTrie ; import java . nio . charset . Charset ; import java . nio . charset . StandardCharsets ; import java . util . Map ; import java . util . regex . Pattern ; public class RestUtils { public static final PathTrie . Decoder REST_DECODER = new PathTrie . Decoder ( ) { @Override public String decode ( String value ) { return RestUtils . decodeComponent ( value ) ; } } ; public static boolean isBrowser ( @Nullable String userAgent ) { if ( userAgent = = null ) { return false ; } if ( userAgent . startsWith ( <str> ) ) { return true ; } return false ; } public static void decodeQueryString ( String s , int fromIndex , Map < String , String > params ) { if ( fromIndex < <int> ) { return ; } if ( fromIndex > = s . length ( ) ) { return ; } int queryStringLength = s . contains ( <str> ) ? s . indexOf ( <str> ) : s . length ( ) ; String name = null ; int pos = fromIndex ; int i ; char c = <int> ; for ( i = fromIndex ; i < queryStringLength ; i + + ) { c = s . charAt ( i ) ; if ( c = = <str> & & name = = null ) { if ( pos ! = i ) { name = decodeComponent ( s . substring ( pos , i ) ) ; } pos = i + <int> ; } else if ( c = = <str> ) { if ( name = = null & & pos ! = i ) { addParam ( params , decodeComponent ( s . substring ( pos , i ) ) , <str> ) ; } else if ( name ! = null ) { addParam ( params , name , decodeComponent ( s . substring ( pos , i ) ) ) ; name = null ; } pos = i + <int> ; } } if ( pos ! = i ) { if ( name = = null ) { addParam ( params , decodeComponent ( s . substring ( pos , i ) ) , <str> ) ; } else { addParam ( params , name , decodeComponent ( s . substring ( pos , i ) ) ) ; } } else if ( name ! = null ) { addParam ( params , name , <str> ) ; } } private static void addParam ( Map < String , String > params , String name , String value ) { params . put ( name , value ) ; } public static String decodeComponent ( final String s ) { return decodeComponent ( s , StandardCharsets . UTF_8 ) ; } @SuppressWarnings ( <str> ) public static String decodeComponent ( final String s , final Charset charset ) { if ( s = = null ) { return <str> ; } final int size = s . length ( ) ; boolean modified = false ; for ( int i = <int> ; i < size ; i + + ) { final char c = s . charAt ( i ) ; switch ( c ) { case <str> : i + + ; case <str> : modified = true ; break ; } } if ( ! modified ) { return s ; } final byte [ ] buf = new byte [ size ] ; int pos = <int> ; for ( int i = <int> ; i < size ; i + + ) { char c = s . charAt ( i ) ; switch ( c ) { case <str> : buf [ pos + + ] = <str> ; break ; case <str> : if ( i = = size - <int> ) { throw new IllegalArgumentException ( <str> + <str> + s ) ; } c = s . charAt ( + + i ) ; if ( c = = <str> ) { buf [ pos + + ] = <str> ; break ; } else if ( i = = size - <int> ) { throw new IllegalArgumentException ( <str> + <str> + s ) ; } c = decodeHexNibble ( c ) ; final char c2 = decodeHexNibble ( s . charAt ( + + i ) ) ; if ( c = = Character . MAX_VALUE | | c2 = = Character . MAX_VALUE ) { throw new IllegalArgumentException ( <str> + s . charAt ( i - <int> ) + s . charAt ( i ) + <str> + ( i - <int> ) + <str> + s ) ; } c = ( char ) ( c * <int> + c2 ) ; default : buf [ pos + + ] = ( byte ) c ; break ; } } return new String ( buf , <int> , pos , charset ) ; } private static char decodeHexNibble ( final char c ) { if ( <str> < = c & & c < = <str> ) { return ( char ) ( c - <str> ) ; } else if ( <str> < = c & & c < = <str> ) { return ( char ) ( c - <str> + <int> ) ; } else if ( <str> < = c & & c < = <str> ) { return ( char ) ( c - <str> + <int> ) ; } else { return Character . MAX_VALUE ; } } public static Pattern checkCorsSettingForRegex ( String corsSetting ) { if ( corsSetting = = null ) { return null ; } int len = corsSetting . length ( ) ; boolean isRegex = len > <int> & & corsSetting . startsWith ( <str> ) & & corsSetting . endsWith ( <str> ) ; if ( isRegex ) { return Pattern . compile ( corsSetting . substring ( <int> , corsSetting . length ( ) - <int> ) ) ; } return null ; } } 

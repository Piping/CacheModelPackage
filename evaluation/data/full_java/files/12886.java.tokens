package org . gradle . internal . resource . cached ; import org . gradle . api . internal . artifacts . ivyservice . CacheLockingManager ; import org . gradle . internal . resource . cached . ivy . AbstractCachedIndex ; import org . gradle . internal . resource . metadata . ExternalResourceMetaData ; import org . gradle . internal . serialize . DefaultSerializer ; import org . gradle . util . BuildCommencedTimeProvider ; import java . io . File ; import java . io . Serializable ; public class DefaultCachedExternalResourceIndex < K extends Serializable > extends AbstractCachedIndex < K , CachedExternalResource > implements CachedExternalResourceIndex < K > { private final BuildCommencedTimeProvider timeProvider ; public DefaultCachedExternalResourceIndex ( String persistentCacheFile , Class < K > keyType , BuildCommencedTimeProvider timeProvider , CacheLockingManager cacheLockingManager ) { super ( persistentCacheFile , new DefaultSerializer < K > ( keyType . getClassLoader ( ) ) , new DefaultSerializer < CachedExternalResource > ( CachedExternalResource . class . getClassLoader ( ) ) , cacheLockingManager ) ; this . timeProvider = timeProvider ; } private DefaultCachedExternalResource createEntry ( File artifactFile , ExternalResourceMetaData externalResourceMetaData ) { return new DefaultCachedExternalResource ( artifactFile , timeProvider . getCurrentTime ( ) , externalResourceMetaData ) ; } public void store ( final K key , final File artifactFile , ExternalResourceMetaData externalResourceMetaData ) { assertArtifactFileNotNull ( artifactFile ) ; assertKeyNotNull ( key ) ; storeInternal ( key , createEntry ( artifactFile , externalResourceMetaData ) ) ; } public void storeMissing ( K key ) { storeInternal ( key , new DefaultCachedExternalResource ( timeProvider . getCurrentTime ( ) ) ) ; } } 

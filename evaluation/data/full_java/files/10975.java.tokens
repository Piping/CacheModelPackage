package org . gradle . api . plugins . buildcomparison . outcome . internal . archive . entry ; import org . gradle . api . plugins . buildcomparison . compare . internal . ComparisonResultType ; import org . gradle . util . GUtil ; public class ArchiveEntryComparison implements Comparable < ArchiveEntryComparison > { private final ArchiveEntry . Path path ; private final ArchiveEntry source ; private final ArchiveEntry target ; public ArchiveEntryComparison ( ArchiveEntry source , ArchiveEntry target ) { if ( source = = null & & target = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . path = GUtil . elvis ( source , target ) . getPath ( ) ; this . source = source ; this . target = target ; } public ComparisonResultType getComparisonResultType ( ) { if ( source ! = null & & target = = null ) { return ComparisonResultType . SOURCE_ONLY ; } else if ( source = = null & & target ! = null ) { return ComparisonResultType . TARGET_ONLY ; } else { return source . equals ( target ) ? ComparisonResultType . EQUAL : ComparisonResultType . UNEQUAL ; } } public ArchiveEntry . Path getPath ( ) { return path ; } public ArchiveEntry getSource ( ) { return source ; } public ArchiveEntry getTarget ( ) { return target ; } @SuppressWarnings ( <str> ) public int compareTo ( ArchiveEntryComparison o ) { return path . compareTo ( o . path ) ; } } 

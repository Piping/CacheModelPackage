package com . badlogic . gdx . graphics . g2d ; import com . badlogic . gdx . files . FileHandle ; import com . badlogic . gdx . graphics . Texture . TextureFilter ; import com . badlogic . gdx . graphics . glutils . ShaderProgram ; import com . badlogic . gdx . utils . Array ; public class DistanceFieldFont extends BitmapFont { private float distanceFieldSmoothing ; public DistanceFieldFont ( BitmapFontData data , Array < TextureRegion > pageRegions , boolean integer ) { super ( data , pageRegions , integer ) ; } public DistanceFieldFont ( BitmapFontData data , TextureRegion region , boolean integer ) { super ( data , region , integer ) ; } public DistanceFieldFont ( FileHandle fontFile , boolean flip ) { super ( fontFile , flip ) ; } public DistanceFieldFont ( FileHandle fontFile , FileHandle imageFile , boolean flip , boolean integer ) { super ( fontFile , imageFile , flip , integer ) ; } public DistanceFieldFont ( FileHandle fontFile , FileHandle imageFile , boolean flip ) { super ( fontFile , imageFile , flip ) ; } public DistanceFieldFont ( FileHandle fontFile , TextureRegion region , boolean flip ) { super ( fontFile , region , flip ) ; } public DistanceFieldFont ( FileHandle fontFile , TextureRegion region ) { super ( fontFile , region ) ; } public DistanceFieldFont ( FileHandle fontFile ) { super ( fontFile ) ; } protected void load ( BitmapFontData data ) { super . load ( data ) ; final Array < TextureRegion > regions = getRegions ( ) ; for ( TextureRegion region : regions ) region . getTexture ( ) . setFilter ( TextureFilter . Linear , TextureFilter . Linear ) ; } @Override public BitmapFontCache newFontCache ( ) { return new DistanceFieldFontCache ( this , integer ) ; } public float getDistanceFieldSmoothing ( ) { return distanceFieldSmoothing ; } public void setDistanceFieldSmoothing ( float distanceFieldSmoothing ) { this . distanceFieldSmoothing = distanceFieldSmoothing ; } static public ShaderProgram createDistanceFieldShader ( ) { String vertexShader = <str> + ShaderProgram . POSITION_ATTRIBUTE + <str> + <str> + ShaderProgram . COLOR_ATTRIBUTE + <str> + <str> + ShaderProgram . TEXCOORD_ATTRIBUTE + <str> + <str> + <str> + <str> + <str> + <str> + <str> + ShaderProgram . COLOR_ATTRIBUTE + <str> + <str> + <str> + ShaderProgram . TEXCOORD_ATTRIBUTE + <str> + <str> + ShaderProgram . POSITION_ATTRIBUTE + <str> + <str> ; String fragmentShader = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; ShaderProgram shader = new ShaderProgram ( vertexShader , fragmentShader ) ; if ( shader . isCompiled ( ) = = false ) throw new IllegalArgumentException ( <str> + shader . getLog ( ) ) ; return shader ; } static private class DistanceFieldFontCache extends BitmapFontCache { public DistanceFieldFontCache ( DistanceFieldFont font ) { super ( font , font . usesIntegerPositions ( ) ) ; } public DistanceFieldFontCache ( DistanceFieldFont font , boolean integer ) { super ( font , integer ) ; } private float getSmoothingFactor ( ) { final DistanceFieldFont font = ( DistanceFieldFont ) super . getFont ( ) ; return font . getDistanceFieldSmoothing ( ) * font . getScaleX ( ) ; } private void setSmoothingUniform ( Batch spriteBatch , float smoothing ) { spriteBatch . flush ( ) ; spriteBatch . getShader ( ) . setUniformf ( <str> , smoothing ) ; } @Override public void draw ( Batch spriteBatch ) { setSmoothingUniform ( spriteBatch , getSmoothingFactor ( ) ) ; super . draw ( spriteBatch ) ; setSmoothingUniform ( spriteBatch , <int> ) ; } @Override public void draw ( Batch spriteBatch , int start , int end ) { setSmoothingUniform ( spriteBatch , getSmoothingFactor ( ) ) ; super . draw ( spriteBatch , start , end ) ; setSmoothingUniform ( spriteBatch , <int> ) ; } } } 

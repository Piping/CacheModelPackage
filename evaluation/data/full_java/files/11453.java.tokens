package org . gradle . api . internal . component ; import com . google . common . collect . Maps ; import org . gradle . api . component . Artifact ; import org . gradle . api . component . Component ; import java . util . Map ; public class DefaultComponentTypeRegistry implements ComponentTypeRegistry { private final Map < Class < ? extends Component > , ComponentTypeRegistration > componentRegistrations = Maps . newHashMap ( ) ; public ComponentTypeRegistration maybeRegisterComponentType ( Class < ? extends Component > componentType ) { ComponentTypeRegistration registration = componentRegistrations . get ( componentType ) ; if ( registration = = null ) { registration = new DefaultComponentTypeRegistration ( componentType ) ; componentRegistrations . put ( componentType , registration ) ; } return registration ; } public ComponentTypeRegistration getComponentRegistration ( Class < ? extends Component > componentType ) { ComponentTypeRegistration registration = componentRegistrations . get ( componentType ) ; if ( registration = = null ) { throw new IllegalArgumentException ( String . format ( <str> , componentType . getName ( ) ) ) ; } return registration ; } private static class DefaultComponentTypeRegistration implements ComponentTypeRegistration { private final Class < ? extends Component > componentType ; private final Map < Class < ? extends Artifact > , ArtifactType > typeRegistrations = Maps . newHashMap ( ) ; private DefaultComponentTypeRegistration ( Class < ? extends Component > componentType ) { this . componentType = componentType ; } public ArtifactType getArtifactType ( Class < ? extends Artifact > artifact ) { ArtifactType type = typeRegistrations . get ( artifact ) ; if ( type = = null ) { throw new IllegalArgumentException ( String . format ( <str> , artifact . getName ( ) , componentType . getName ( ) ) ) ; } return type ; } public ComponentTypeRegistration registerArtifactType ( Class < ? extends Artifact > artifact , ArtifactType artifactType ) { if ( typeRegistrations . containsKey ( artifact ) ) { throw new IllegalStateException ( String . format ( <str> , artifact . getName ( ) , componentType . getName ( ) ) ) ; } typeRegistrations . put ( artifact , artifactType ) ; return this ; } } } 

package com . google . common . collect . testing . features ; import junit . framework . TestCase ; import java . lang . annotation . Annotation ; import java . lang . annotation . Inherited ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . reflect . Method ; import java . util . Locale ; public class FeatureEnumTest extends TestCase { private static void assertGoodTesterAnnotation ( Class < ? extends Annotation > annotationClass ) { assertNotNull ( rootLocaleFormat ( <str> , annotationClass ) , annotationClass . getAnnotation ( TesterAnnotation . class ) ) ; final Retention retentionPolicy = annotationClass . getAnnotation ( Retention . class ) ; assertNotNull ( rootLocaleFormat ( <str> , annotationClass ) , retentionPolicy ) ; assertEquals ( rootLocaleFormat ( <str> , annotationClass ) , RetentionPolicy . RUNTIME , retentionPolicy . value ( ) ) ; assertNotNull ( rootLocaleFormat ( <str> , annotationClass ) , annotationClass . getAnnotation ( Inherited . class ) ) ; for ( String propertyName : new String [ ] { <str> , <str> } ) { Method method = null ; try { method = annotationClass . getMethod ( propertyName ) ; } catch ( NoSuchMethodException e ) { fail ( rootLocaleFormat ( <str> , annotationClass , propertyName ) ) ; } final Class < ? > returnType = method . getReturnType ( ) ; assertTrue ( rootLocaleFormat ( <str> , annotationClass , propertyName ) , returnType . isArray ( ) ) ; assertSame ( rootLocaleFormat ( <str> , annotationClass , propertyName , annotationClass . getDeclaringClass ( ) ) , annotationClass . getDeclaringClass ( ) , returnType . getComponentType ( ) ) ; } } public static < E extends Enum < ? > & Feature < ? > > void assertGoodFeatureEnum ( Class < E > featureEnumClass ) { final Class < ? > [ ] classes = featureEnumClass . getDeclaredClasses ( ) ; for ( Class < ? > containedClass : classes ) { if ( containedClass . getSimpleName ( ) . equals ( <str> ) ) { if ( containedClass . isAnnotation ( ) ) { assertGoodTesterAnnotation ( asAnnotation ( containedClass ) ) ; } else { fail ( rootLocaleFormat ( <str> + <str> , featureEnumClass ) ) ; } return ; } } fail ( rootLocaleFormat ( <str> + <str> , featureEnumClass ) ) ; } @SuppressWarnings ( <str> ) private static Class < ? extends Annotation > asAnnotation ( Class < ? > clazz ) { if ( clazz . isAnnotation ( ) ) { return ( Class < ? extends Annotation > ) clazz ; } else { throw new IllegalArgumentException ( rootLocaleFormat ( <str> , clazz ) ) ; } } public void testFeatureEnums ( ) throws Exception { assertGoodFeatureEnum ( CollectionFeature . class ) ; assertGoodFeatureEnum ( ListFeature . class ) ; assertGoodFeatureEnum ( SetFeature . class ) ; assertGoodFeatureEnum ( CollectionSize . class ) ; assertGoodFeatureEnum ( MapFeature . class ) ; } private static String rootLocaleFormat ( String format , Object . . . args ) { return String . format ( Locale . ROOT , format , args ) ; } } 

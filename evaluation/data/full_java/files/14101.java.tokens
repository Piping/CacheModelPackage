package org . gradle . internal . serialize . kryo ; import com . esotericsoftware . kryo . KryoException ; import com . esotericsoftware . kryo . io . Input ; import org . gradle . internal . serialize . AbstractDecoder ; import org . gradle . internal . serialize . Decoder ; import java . io . Closeable ; import java . io . EOFException ; import java . io . IOException ; import java . io . InputStream ; public class KryoBackedDecoder extends AbstractDecoder implements Decoder , Closeable { private final Input input ; private final InputStream inputStream ; private long extraSkipped ; public KryoBackedDecoder ( InputStream inputStream ) { this ( inputStream , <int> ) ; } public KryoBackedDecoder ( InputStream inputStream , int bufferSize ) { this . inputStream = inputStream ; input = new Input ( this . inputStream , bufferSize ) ; } @Override protected int maybeReadBytes ( byte [ ] buffer , int offset , int count ) { return input . read ( buffer , offset , count ) ; } @Override protected long maybeSkip ( long count ) throws IOException { int remaining = input . limit ( ) - input . position ( ) ; if ( remaining = = <int> ) { long skipped = inputStream . skip ( count ) ; if ( skipped > <int> ) { extraSkipped + = skipped ; } return skipped ; } else if ( count < = remaining ) { input . setPosition ( input . position ( ) + ( int ) count ) ; return count ; } else { input . setPosition ( input . limit ( ) ) ; return remaining ; } } private RuntimeException maybeEndOfStream ( KryoException e ) throws EOFException { if ( e . getMessage ( ) . equals ( <str> ) ) { throw ( EOFException ) ( new EOFException ( ) . initCause ( e ) ) ; } throw e ; } public byte readByte ( ) throws EOFException { try { return input . readByte ( ) ; } catch ( KryoException e ) { throw maybeEndOfStream ( e ) ; } } public void readBytes ( byte [ ] buffer , int offset , int count ) throws EOFException { try { input . readBytes ( buffer , offset , count ) ; } catch ( KryoException e ) { throw maybeEndOfStream ( e ) ; } } public long readLong ( ) throws EOFException { try { return input . readLong ( ) ; } catch ( KryoException e ) { throw maybeEndOfStream ( e ) ; } } public long readSmallLong ( ) throws EOFException , IOException { try { return input . readLong ( true ) ; } catch ( KryoException e ) { throw maybeEndOfStream ( e ) ; } } public int readInt ( ) throws EOFException { try { return input . readInt ( ) ; } catch ( KryoException e ) { throw maybeEndOfStream ( e ) ; } } public int readSmallInt ( ) throws EOFException { try { return input . readInt ( true ) ; } catch ( KryoException e ) { throw maybeEndOfStream ( e ) ; } } public boolean readBoolean ( ) throws EOFException { try { return input . readBoolean ( ) ; } catch ( KryoException e ) { throw maybeEndOfStream ( e ) ; } } public String readString ( ) throws EOFException { return readNullableString ( ) ; } public String readNullableString ( ) throws EOFException { try { return input . readString ( ) ; } catch ( KryoException e ) { throw maybeEndOfStream ( e ) ; } } public long getReadPosition ( ) { return input . total ( ) + extraSkipped ; } public void close ( ) throws IOException { input . close ( ) ; } } 

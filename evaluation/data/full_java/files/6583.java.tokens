package org . elasticsearch . index . merge ; import org . elasticsearch . Version ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class MergeStats implements Streamable , ToXContent { private long total ; private long totalTimeInMillis ; private long totalNumDocs ; private long totalSizeInBytes ; private long current ; private long currentNumDocs ; private long currentSizeInBytes ; private long totalStoppedTimeInMillis ; private long totalThrottledTimeInMillis ; private long totalBytesPerSecAutoThrottle ; public MergeStats ( ) { } public void add ( long totalMerges , long totalMergeTime , long totalNumDocs , long totalSizeInBytes , long currentMerges , long currentNumDocs , long currentSizeInBytes , long stoppedTimeMillis , long throttledTimeMillis , double mbPerSecAutoThrottle ) { this . total + = totalMerges ; this . totalTimeInMillis + = totalMergeTime ; this . totalNumDocs + = totalNumDocs ; this . totalSizeInBytes + = totalSizeInBytes ; this . current + = currentMerges ; this . currentNumDocs + = currentNumDocs ; this . currentSizeInBytes + = currentSizeInBytes ; this . totalStoppedTimeInMillis + = stoppedTimeMillis ; this . totalThrottledTimeInMillis + = throttledTimeMillis ; long bytesPerSecAutoThrottle = ( long ) ( mbPerSecAutoThrottle * <int> * <int> ) ; if ( this . totalBytesPerSecAutoThrottle = = Long . MAX_VALUE | | bytesPerSecAutoThrottle = = Long . MAX_VALUE ) { this . totalBytesPerSecAutoThrottle = Long . MAX_VALUE ; } else { this . totalBytesPerSecAutoThrottle + = bytesPerSecAutoThrottle ; } } public void add ( MergeStats mergeStats ) { if ( mergeStats = = null ) { return ; } this . current + = mergeStats . current ; this . currentNumDocs + = mergeStats . currentNumDocs ; this . currentSizeInBytes + = mergeStats . currentSizeInBytes ; addTotals ( mergeStats ) ; } public void addTotals ( MergeStats mergeStats ) { if ( mergeStats = = null ) { return ; } this . total + = mergeStats . total ; this . totalTimeInMillis + = mergeStats . totalTimeInMillis ; this . totalNumDocs + = mergeStats . totalNumDocs ; this . totalSizeInBytes + = mergeStats . totalSizeInBytes ; this . totalStoppedTimeInMillis + = mergeStats . totalStoppedTimeInMillis ; this . totalThrottledTimeInMillis + = mergeStats . totalThrottledTimeInMillis ; if ( this . totalBytesPerSecAutoThrottle = = Long . MAX_VALUE | | mergeStats . totalBytesPerSecAutoThrottle = = Long . MAX_VALUE ) { this . totalBytesPerSecAutoThrottle = Long . MAX_VALUE ; } else { this . totalBytesPerSecAutoThrottle + = mergeStats . totalBytesPerSecAutoThrottle ; } } public long getTotal ( ) { return this . total ; } public long getTotalTimeInMillis ( ) { return this . totalTimeInMillis ; } public long getTotalStoppedTimeInMillis ( ) { return this . totalStoppedTimeInMillis ; } public TimeValue getTotalStoppedTime ( ) { return new TimeValue ( totalStoppedTimeInMillis ) ; } public long getTotalThrottledTimeInMillis ( ) { return this . totalThrottledTimeInMillis ; } public TimeValue getTotalThrottledTime ( ) { return new TimeValue ( totalThrottledTimeInMillis ) ; } public TimeValue getTotalTime ( ) { return new TimeValue ( totalTimeInMillis ) ; } public long getTotalNumDocs ( ) { return this . totalNumDocs ; } public long getTotalSizeInBytes ( ) { return this . totalSizeInBytes ; } public ByteSizeValue getTotalSize ( ) { return new ByteSizeValue ( totalSizeInBytes ) ; } public long getTotalBytesPerSecAutoThrottle ( ) { return totalBytesPerSecAutoThrottle ; } public long getCurrent ( ) { return this . current ; } public long getCurrentNumDocs ( ) { return this . currentNumDocs ; } public long getCurrentSizeInBytes ( ) { return this . currentSizeInBytes ; } public ByteSizeValue getCurrentSize ( ) { return new ByteSizeValue ( currentSizeInBytes ) ; } public static MergeStats readMergeStats ( StreamInput in ) throws IOException { MergeStats stats = new MergeStats ( ) ; stats . readFrom ( in ) ; return stats ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . MERGES ) ; builder . field ( Fields . CURRENT , current ) ; builder . field ( Fields . CURRENT_DOCS , currentNumDocs ) ; builder . byteSizeField ( Fields . CURRENT_SIZE_IN_BYTES , Fields . CURRENT_SIZE , currentSizeInBytes ) ; builder . field ( Fields . TOTAL , total ) ; builder . timeValueField ( Fields . TOTAL_TIME_IN_MILLIS , Fields . TOTAL_TIME , totalTimeInMillis ) ; builder . field ( Fields . TOTAL_DOCS , totalNumDocs ) ; builder . byteSizeField ( Fields . TOTAL_SIZE_IN_BYTES , Fields . TOTAL_SIZE , totalSizeInBytes ) ; builder . timeValueField ( Fields . TOTAL_STOPPED_TIME_IN_MILLIS , Fields . TOTAL_STOPPED_TIME , totalStoppedTimeInMillis ) ; builder . timeValueField ( Fields . TOTAL_THROTTLED_TIME_IN_MILLIS , Fields . TOTAL_THROTTLED_TIME , totalThrottledTimeInMillis ) ; builder . byteSizeField ( Fields . TOTAL_THROTTLE_BYTES_PER_SEC_IN_BYTES , Fields . TOTAL_THROTTLE_BYTES_PER_SEC , totalBytesPerSecAutoThrottle ) ; builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString MERGES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CURRENT = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CURRENT_DOCS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CURRENT_SIZE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CURRENT_SIZE_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_TIME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_TIME_IN_MILLIS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_STOPPED_TIME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_STOPPED_TIME_IN_MILLIS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_THROTTLED_TIME = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_THROTTLED_TIME_IN_MILLIS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_DOCS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_SIZE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_SIZE_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_THROTTLE_BYTES_PER_SEC_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString TOTAL_THROTTLE_BYTES_PER_SEC = new XContentBuilderString ( <str> ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { total = in . readVLong ( ) ; totalTimeInMillis = in . readVLong ( ) ; totalNumDocs = in . readVLong ( ) ; totalSizeInBytes = in . readVLong ( ) ; current = in . readVLong ( ) ; currentNumDocs = in . readVLong ( ) ; currentSizeInBytes = in . readVLong ( ) ; totalStoppedTimeInMillis = in . readVLong ( ) ; totalThrottledTimeInMillis = in . readVLong ( ) ; totalBytesPerSecAutoThrottle = in . readVLong ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVLong ( total ) ; out . writeVLong ( totalTimeInMillis ) ; out . writeVLong ( totalNumDocs ) ; out . writeVLong ( totalSizeInBytes ) ; out . writeVLong ( current ) ; out . writeVLong ( currentNumDocs ) ; out . writeVLong ( currentSizeInBytes ) ; out . writeVLong ( totalStoppedTimeInMillis ) ; out . writeVLong ( totalThrottledTimeInMillis ) ; out . writeVLong ( totalBytesPerSecAutoThrottle ) ; } } 

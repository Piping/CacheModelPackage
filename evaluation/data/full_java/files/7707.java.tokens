package org . apache . lucene . search . postingshighlight ; import org . elasticsearch . search . highlight . HighlightUtils ; import org . elasticsearch . test . ESTestCase ; import java . text . BreakIterator ; import java . text . CharacterIterator ; import java . text . StringCharacterIterator ; import java . util . Locale ; import static org . hamcrest . CoreMatchers . equalTo ; public class CustomSeparatorBreakIteratorTests extends ESTestCase { public void testBreakOnCustomSeparator ( ) throws Exception { Character separator = randomSeparator ( ) ; BreakIterator bi = new CustomSeparatorBreakIterator ( separator ) ; String source = <str> + separator + <str> + separator + <str> + separator + <str> + separator + <str> ; bi . setText ( source ) ; assertThat ( bi . current ( ) , equalTo ( <int> ) ) ; assertThat ( bi . first ( ) , equalTo ( <int> ) ) ; assertThat ( source . substring ( bi . current ( ) , bi . next ( ) ) , equalTo ( <str> + separator ) ) ; assertThat ( source . substring ( bi . current ( ) , bi . next ( ) ) , equalTo ( <str> + separator ) ) ; assertThat ( source . substring ( bi . current ( ) , bi . next ( ) ) , equalTo ( <str> + separator ) ) ; assertThat ( source . substring ( bi . current ( ) , bi . next ( ) ) , equalTo ( <str> + separator ) ) ; assertThat ( source . substring ( bi . current ( ) , bi . next ( ) ) , equalTo ( <str> ) ) ; assertThat ( bi . next ( ) , equalTo ( BreakIterator . DONE ) ) ; assertThat ( bi . last ( ) , equalTo ( source . length ( ) ) ) ; int current = bi . current ( ) ; assertThat ( source . substring ( bi . previous ( ) , current ) , equalTo ( <str> ) ) ; current = bi . current ( ) ; assertThat ( source . substring ( bi . previous ( ) , current ) , equalTo ( <str> + separator ) ) ; current = bi . current ( ) ; assertThat ( source . substring ( bi . previous ( ) , current ) , equalTo ( <str> + separator ) ) ; current = bi . current ( ) ; assertThat ( source . substring ( bi . previous ( ) , current ) , equalTo ( <str> + separator ) ) ; current = bi . current ( ) ; assertThat ( source . substring ( bi . previous ( ) , current ) , equalTo ( <str> + separator ) ) ; assertThat ( bi . previous ( ) , equalTo ( BreakIterator . DONE ) ) ; assertThat ( bi . current ( ) , equalTo ( <int> ) ) ; assertThat ( source . substring ( <int> , bi . following ( <int> ) ) , equalTo ( <str> + separator + <str> + separator + <str> + separator ) ) ; assertThat ( source . substring ( <int> , bi . preceding ( <int> ) ) , equalTo ( <str> + separator + <str> + separator ) ) ; assertThat ( bi . first ( ) , equalTo ( <int> ) ) ; assertThat ( source . substring ( <int> , bi . next ( <int> ) ) , equalTo ( <str> + separator + <str> + separator + <str> + separator ) ) ; } public void testSingleSentences ( ) throws Exception { BreakIterator expected = BreakIterator . getSentenceInstance ( Locale . ROOT ) ; BreakIterator actual = new CustomSeparatorBreakIterator ( randomSeparator ( ) ) ; assertSameBreaks ( <str> , expected , actual ) ; assertSameBreaks ( <str> , expected , actual ) ; assertSameBreaks ( <str> , expected , actual ) ; assertSameBreaks ( <str> , expected , actual ) ; } public void testSliceEnd ( ) throws Exception { BreakIterator expected = BreakIterator . getSentenceInstance ( Locale . ROOT ) ; BreakIterator actual = new CustomSeparatorBreakIterator ( randomSeparator ( ) ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; } public void testSliceStart ( ) throws Exception { BreakIterator expected = BreakIterator . getSentenceInstance ( Locale . ROOT ) ; BreakIterator actual = new CustomSeparatorBreakIterator ( randomSeparator ( ) ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; } public void testSliceMiddle ( ) throws Exception { BreakIterator expected = BreakIterator . getSentenceInstance ( Locale . ROOT ) ; BreakIterator actual = new CustomSeparatorBreakIterator ( randomSeparator ( ) ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; assertSameBreaks ( <str> , <int> , <int> , expected , actual ) ; } public void testFirstPosition ( ) throws Exception { BreakIterator expected = BreakIterator . getSentenceInstance ( Locale . ROOT ) ; BreakIterator actual = new CustomSeparatorBreakIterator ( randomSeparator ( ) ) ; assertSameBreaks ( <str> , <int> , <int> , <int> , expected , actual ) ; } private static char randomSeparator ( ) { return randomFrom ( <str> , HighlightUtils . NULL_SEPARATOR , HighlightUtils . PARAGRAPH_SEPARATOR ) ; } private static void assertSameBreaks ( String text , BreakIterator expected , BreakIterator actual ) { assertSameBreaks ( new StringCharacterIterator ( text ) , new StringCharacterIterator ( text ) , expected , actual ) ; } private static void assertSameBreaks ( String text , int offset , int length , BreakIterator expected , BreakIterator actual ) { assertSameBreaks ( text , offset , length , offset , expected , actual ) ; } private static void assertSameBreaks ( String text , int offset , int length , int current , BreakIterator expected , BreakIterator actual ) { assertSameBreaks ( new StringCharacterIterator ( text , offset , offset + length , current ) , new StringCharacterIterator ( text , offset , offset + length , current ) , expected , actual ) ; } private static void assertSameBreaks ( CharacterIterator one , CharacterIterator two , BreakIterator expected , BreakIterator actual ) { expected . setText ( one ) ; actual . setText ( two ) ; assertEquals ( expected . current ( ) , actual . current ( ) ) ; int v = expected . current ( ) ; while ( v ! = BreakIterator . DONE ) { assertEquals ( v = expected . next ( ) , actual . next ( ) ) ; assertEquals ( expected . current ( ) , actual . current ( ) ) ; } assertEquals ( expected . first ( ) , actual . first ( ) ) ; assertEquals ( expected . current ( ) , actual . current ( ) ) ; assertEquals ( expected . last ( ) , actual . last ( ) ) ; assertEquals ( expected . current ( ) , actual . current ( ) ) ; v = expected . current ( ) ; while ( v ! = BreakIterator . DONE ) { assertEquals ( v = expected . previous ( ) , actual . previous ( ) ) ; assertEquals ( expected . current ( ) , actual . current ( ) ) ; } for ( int i = one . getBeginIndex ( ) ; i < = one . getEndIndex ( ) ; i + + ) { expected . first ( ) ; actual . first ( ) ; assertEquals ( expected . following ( i ) , actual . following ( i ) ) ; assertEquals ( expected . current ( ) , actual . current ( ) ) ; } for ( int i = one . getBeginIndex ( ) ; i < = one . getEndIndex ( ) ; i + + ) { expected . last ( ) ; actual . last ( ) ; assertEquals ( expected . preceding ( i ) , actual . preceding ( i ) ) ; assertEquals ( expected . current ( ) , actual . current ( ) ) ; } } } 

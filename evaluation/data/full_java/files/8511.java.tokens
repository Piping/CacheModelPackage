package org . elasticsearch . search . geo ; import org . elasticsearch . Version ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . VersionUtils ; import java . util . ArrayList ; import java . util . List ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . boolQuery ; import static org . elasticsearch . index . query . QueryBuilders . geoPolygonQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . anyOf ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.SuiteScopeTestCase public class GeoPolygonIT extends ESIntegTestCase { @Override protected void setupSuiteScopeCluster ( ) throws Exception { Version version = VersionUtils . randomVersionBetween ( random ( ) , Version . V_2_0_0 , Version . CURRENT ) ; Settings settings = Settings . settingsBuilder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , version ) . build ( ) ; XContentBuilder xContentBuilder = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) ; if ( version . before ( Version . V_2_2_0 ) ) { xContentBuilder . field ( <str> , true ) ; } xContentBuilder . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( settings ) . addMapping ( <str> , xContentBuilder ) ) ; ensureGreen ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <int> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <float> ) . field ( <str> , - <float> ) . endObject ( ) . endObject ( ) ) ) ; ensureSearchable ( <str> ) ; } public void testSimplePolygon ( ) throws Exception { List < GeoPoint > points = new ArrayList < > ( ) ; points . add ( new GeoPoint ( <float> , - <float> ) ) ; points . add ( new GeoPoint ( <float> , - <float> ) ) ; points . add ( new GeoPoint ( <float> , - <float> ) ) ; points . add ( new GeoPoint ( <float> , - <float> ) ) ; points . add ( new GeoPoint ( <float> , - <float> ) ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( boolQuery ( ) . must ( geoPolygonQuery ( <str> , points ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } } public void testSimpleUnclosedPolygon ( ) throws Exception { List < GeoPoint > points = new ArrayList < > ( ) ; points . add ( new GeoPoint ( <float> , - <float> ) ) ; points . add ( new GeoPoint ( <float> , - <float> ) ) ; points . add ( new GeoPoint ( <float> , - <float> ) ) ; points . add ( new GeoPoint ( <float> , - <float> ) ) ; SearchResponse searchResponse = client ( ) . prepareSearch ( <str> ) . setQuery ( boolQuery ( ) . must ( geoPolygonQuery ( <str> , points ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( searchResponse , <int> ) ; assertThat ( searchResponse . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; for ( SearchHit hit : searchResponse . getHits ( ) ) { assertThat ( hit . id ( ) , anyOf ( equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) , equalTo ( <str> ) ) ) ; } } } 

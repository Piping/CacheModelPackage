package org . gradle . process . internal ; import com . google . common . collect . Lists ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . file . IdentityFileResolver ; import org . gradle . process . ExecSpec ; import org . gradle . util . GUtil ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class ExecHandleBuilder extends AbstractExecHandleBuilder implements ExecSpec { private final List < Object > arguments = new ArrayList < Object > ( ) ; public ExecHandleBuilder ( ) { super ( new IdentityFileResolver ( ) ) ; } public ExecHandleBuilder ( FileResolver fileResolver ) { super ( fileResolver ) ; } public ExecHandleBuilder executable ( Object executable ) { super . executable ( executable ) ; return this ; } public ExecHandleBuilder commandLine ( Object . . . arguments ) { commandLine ( Arrays . asList ( arguments ) ) ; return this ; } public ExecHandleBuilder commandLine ( Iterable < ? > args ) { List < Object > argsList = Lists . newArrayList ( args ) ; executable ( argsList . get ( <int> ) ) ; setArgs ( argsList . subList ( <int> , argsList . size ( ) ) ) ; return this ; } public void setCommandLine ( Object . . . args ) { commandLine ( args ) ; } public void setCommandLine ( Iterable < ? > args ) { commandLine ( args ) ; } public ExecHandleBuilder args ( Object . . . args ) { if ( args = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . arguments . addAll ( Arrays . asList ( args ) ) ; return this ; } public ExecHandleBuilder args ( Iterable < ? > args ) { GUtil . addToCollection ( arguments , args ) ; return this ; } public ExecHandleBuilder setArgs ( Iterable < ? > arguments ) { this . arguments . clear ( ) ; GUtil . addToCollection ( this . arguments , arguments ) ; return this ; } public List < String > getArgs ( ) { List < String > args = new ArrayList < String > ( ) ; for ( Object argument : arguments ) { args . add ( argument . toString ( ) ) ; } return args ; } @Override public List < String > getAllArguments ( ) { return getArgs ( ) ; } @Override public ExecHandleBuilder setIgnoreExitValue ( boolean ignoreExitValue ) { super . setIgnoreExitValue ( ignoreExitValue ) ; return this ; } @Override public ExecHandleBuilder workingDir ( Object dir ) { super . workingDir ( dir ) ; return this ; } @Override public ExecHandleBuilder setDisplayName ( String displayName ) { super . setDisplayName ( displayName ) ; return this ; } public ExecHandleBuilder noStandardInput ( ) { setStandardInput ( new ByteArrayInputStream ( new byte [ <int> ] ) ) ; return this ; } public ExecHandleBuilder redirectErrorStream ( ) { super . redirectErrorStream ( ) ; return this ; } public ExecHandleBuilder setStandardOutput ( OutputStream outputStream ) { super . setStandardOutput ( outputStream ) ; return this ; } public ExecHandleBuilder setStandardInput ( InputStream inputStream ) { super . setStandardInput ( inputStream ) ; return this ; } public ExecHandleBuilder listener ( ExecHandleListener listener ) { super . listener ( listener ) ; return this ; } public ExecHandleBuilder setTimeout ( int timeoutMillis ) { super . setTimeout ( timeoutMillis ) ; return this ; } public ExecHandleBuilder setDaemon ( boolean daemon ) { super . daemon = daemon ; return this ; } } 

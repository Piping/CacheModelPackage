package org . gradle . api . internal . notations ; import org . gradle . api . artifacts . ClientModule ; import org . gradle . api . internal . artifacts . dependencies . DefaultClientModule ; import org . gradle . internal . Factory ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . internal . typeconversion . NotationParser ; import org . gradle . internal . typeconversion . NotationParserBuilder ; public class ClientModuleNotationParserFactory implements Factory < NotationParser < Object , ClientModule > > { private final Instantiator instantiator ; public ClientModuleNotationParserFactory ( Instantiator instantiator ) { this . instantiator = instantiator ; } public NotationParser < Object , ClientModule > create ( ) { return NotationParserBuilder . toType ( ClientModule . class ) . fromCharSequence ( new DependencyStringNotationConverter < DefaultClientModule > ( instantiator , DefaultClientModule . class ) ) . converter ( new DependencyMapNotationConverter < DefaultClientModule > ( instantiator , DefaultClientModule . class ) ) . toComposite ( ) ; } } 

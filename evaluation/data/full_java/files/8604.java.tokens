package org . elasticsearch . script . expression ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . script . CompiledScript ; import org . elasticsearch . script . ScriptService . ScriptType ; import org . elasticsearch . script . SearchScript ; import org . elasticsearch . search . lookup . SearchLookup ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . util . Collections ; public class ExpressionTests extends ESSingleNodeTestCase { public void testNeedsScores ( ) { IndexService index = createIndex ( <str> , Settings . EMPTY , <str> , <str> , <str> ) ; ExpressionScriptEngineService service = new ExpressionScriptEngineService ( Settings . EMPTY ) ; SearchLookup lookup = new SearchLookup ( index . mapperService ( ) , index . fieldData ( ) , null ) ; Object compiled = service . compile ( <str> ) ; SearchScript ss = service . search ( new CompiledScript ( ScriptType . INLINE , <str> , <str> , compiled ) , lookup , Collections . < String , Object > emptyMap ( ) ) ; assertFalse ( ss . needsScores ( ) ) ; compiled = service . compile ( <str> ) ; ss = service . search ( new CompiledScript ( ScriptType . INLINE , <str> , <str> , compiled ) , lookup , Collections . < String , Object > emptyMap ( ) ) ; assertFalse ( ss . needsScores ( ) ) ; compiled = service . compile ( <str> ) ; ss = service . search ( new CompiledScript ( ScriptType . INLINE , <str> , <str> , compiled ) , lookup , Collections . < String , Object > emptyMap ( ) ) ; assertTrue ( ss . needsScores ( ) ) ; compiled = service . compile ( <str> ) ; ss = service . search ( new CompiledScript ( ScriptType . INLINE , <str> , <str> , compiled ) , lookup , Collections . < String , Object > emptyMap ( ) ) ; assertTrue ( ss . needsScores ( ) ) ; } } 

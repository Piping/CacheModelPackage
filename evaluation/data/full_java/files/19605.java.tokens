package io . netty . handler . codec . stomp ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . TooLongFrameException ; import io . netty . util . CharsetUtil ; import org . junit . After ; import org . junit . Assert ; import org . junit . Before ; import org . junit . Test ; public class StompSubframeAggregatorTest { private EmbeddedChannel channel ; @Before public void setup ( ) throws Exception { channel = new EmbeddedChannel ( new StompSubframeDecoder ( ) , new StompSubframeAggregator ( <int> ) ) ; } @After public void teardown ( ) throws Exception { Assert . assertFalse ( channel . finish ( ) ) ; } @Test public void testSingleFrameDecoding ( ) { ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . CONNECT_FRAME . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; StompFrame frame = channel . readInbound ( ) ; frame . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; } @Test public void testSingleFrameWithBodyAndContentLength ( ) { ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . SEND_FRAME_2 . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; StompFrame frame = channel . readInbound ( ) ; Assert . assertNotNull ( frame ) ; Assert . assertEquals ( StompCommand . SEND , frame . command ( ) ) ; Assert . assertEquals ( <str> , frame . content ( ) . toString ( CharsetUtil . UTF_8 ) ) ; frame . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; } @Test public void testSingleFrameWithBodyAndNoContentLength ( ) { ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . SEND_FRAME_4 . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; StompFrame frame = channel . readInbound ( ) ; Assert . assertNotNull ( frame ) ; Assert . assertEquals ( StompCommand . SEND , frame . command ( ) ) ; Assert . assertEquals ( <str> , frame . content ( ) . toString ( CharsetUtil . UTF_8 ) ) ; frame . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; } @Test public void testSingleFrameWithSplitBodyAndNoContentLength ( ) { for ( int n = <int> ; n < StompTestConstants . SEND_FRAMES_3 . length ; + + n ) { ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . SEND_FRAMES_3 [ n ] . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; channel . flush ( ) ; } StompFrame frame = channel . readInbound ( ) ; Assert . assertNotNull ( frame ) ; Assert . assertEquals ( StompCommand . SEND , frame . command ( ) ) ; Assert . assertEquals ( <str> , frame . content ( ) . toString ( CharsetUtil . UTF_8 ) ) ; frame . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; } @Test public void testSingleFrameChunked ( ) { EmbeddedChannel channel = new EmbeddedChannel ( new StompSubframeDecoder ( <int> , <int> ) , new StompSubframeAggregator ( <int> ) ) ; ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . SEND_FRAME_2 . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; StompFrame frame = channel . readInbound ( ) ; Assert . assertNotNull ( frame ) ; Assert . assertEquals ( StompCommand . SEND , frame . command ( ) ) ; frame . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; } @Test public void testMultipleFramesDecoding ( ) { ByteBuf incoming = Unpooled . buffer ( ) ; incoming . writeBytes ( StompTestConstants . CONNECT_FRAME . getBytes ( ) ) ; incoming . writeBytes ( StompTestConstants . CONNECTED_FRAME . getBytes ( ) ) ; channel . writeInbound ( incoming ) ; channel . writeInbound ( Unpooled . wrappedBuffer ( StompTestConstants . SEND_FRAME_1 . getBytes ( ) ) ) ; StompFrame frame = channel . readInbound ( ) ; Assert . assertEquals ( StompCommand . CONNECT , frame . command ( ) ) ; frame . release ( ) ; frame = channel . readInbound ( ) ; Assert . assertEquals ( StompCommand . CONNECTED , frame . command ( ) ) ; frame . release ( ) ; frame = channel . readInbound ( ) ; Assert . assertEquals ( StompCommand . SEND , frame . command ( ) ) ; frame . release ( ) ; Assert . assertNull ( channel . readInbound ( ) ) ; } @Test ( expected = TooLongFrameException . class ) public void testTooLongFrameException ( ) { EmbeddedChannel channel = new EmbeddedChannel ( new StompSubframeDecoder ( ) , new StompSubframeAggregator ( <int> ) ) ; channel . writeInbound ( Unpooled . wrappedBuffer ( StompTestConstants . SEND_FRAME_1 . getBytes ( ) ) ) ; } } 

package org . elasticsearch . index . query . functionscore ; import java . util . Map ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . io . stream . NamedWriteableRegistry ; import org . elasticsearch . common . xcontent . XContentLocation ; import org . elasticsearch . index . query . QueryParseContext ; import org . elasticsearch . index . query . functionscore . exp . ExponentialDecayFunctionParser ; import org . elasticsearch . index . query . functionscore . fieldvaluefactor . FieldValueFactorFunctionParser ; import org . elasticsearch . index . query . functionscore . gauss . GaussDecayFunctionParser ; import org . elasticsearch . index . query . functionscore . lin . LinearDecayFunctionParser ; import org . elasticsearch . index . query . functionscore . random . RandomScoreFunctionParser ; import org . elasticsearch . index . query . functionscore . script . ScriptScoreFunctionParser ; import org . elasticsearch . index . query . functionscore . weight . WeightBuilder ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; public class ScoreFunctionParserMapper { protected Map < String , ScoreFunctionParser < ? > > functionParsers ; @Inject public ScoreFunctionParserMapper ( Set < ScoreFunctionParser > parsers , NamedWriteableRegistry namedWriteableRegistry ) { Map < String , ScoreFunctionParser < ? > > map = new HashMap < > ( ) ; addParser ( new ScriptScoreFunctionParser ( ) , map , namedWriteableRegistry ) ; addParser ( new GaussDecayFunctionParser ( ) , map , namedWriteableRegistry ) ; addParser ( new LinearDecayFunctionParser ( ) , map , namedWriteableRegistry ) ; addParser ( new ExponentialDecayFunctionParser ( ) , map , namedWriteableRegistry ) ; addParser ( new RandomScoreFunctionParser ( ) , map , namedWriteableRegistry ) ; addParser ( new FieldValueFactorFunctionParser ( ) , map , namedWriteableRegistry ) ; for ( ScoreFunctionParser < ? > scoreFunctionParser : parsers ) { addParser ( scoreFunctionParser , map , namedWriteableRegistry ) ; } this . functionParsers = Collections . unmodifiableMap ( map ) ; namedWriteableRegistry . registerPrototype ( ScoreFunctionBuilder . class , new WeightBuilder ( ) ) ; } public ScoreFunctionParser get ( XContentLocation contentLocation , String parserName ) { ScoreFunctionParser functionParser = get ( parserName ) ; if ( functionParser = = null ) { throw new ParsingException ( contentLocation , <str> + parserName + <str> ) ; } return functionParser ; } private ScoreFunctionParser get ( String parserName ) { return functionParsers . get ( parserName ) ; } private static void addParser ( ScoreFunctionParser < ? > scoreFunctionParser , Map < String , ScoreFunctionParser < ? > > map , NamedWriteableRegistry namedWriteableRegistry ) { for ( String name : scoreFunctionParser . getNames ( ) ) { map . put ( name , scoreFunctionParser ) ; } namedWriteableRegistry . registerPrototype ( ScoreFunctionBuilder . class , scoreFunctionParser . getBuilderPrototype ( ) ) ; } } 

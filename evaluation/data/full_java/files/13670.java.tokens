package org . gradle . language . nativeplatform . internal . incremental ; import org . gradle . language . nativeplatform . internal . Include ; import org . gradle . language . nativeplatform . internal . SourceIncludes ; import org . gradle . util . GFileUtils ; import java . io . File ; import java . util . ArrayList ; import java . util . LinkedHashSet ; import java . util . List ; import java . util . Set ; public class DefaultSourceIncludesResolver implements SourceIncludesResolver { private final List < File > includePaths ; public DefaultSourceIncludesResolver ( List < File > includePaths ) { this . includePaths = includePaths ; } public Set < ResolvedInclude > resolveIncludes ( File sourceFile , SourceIncludes includes , Set < File > candidates ) { Set < ResolvedInclude > dependencies = new LinkedHashSet < ResolvedInclude > ( ) ; searchForDependencies ( dependencies , prependSourceDir ( sourceFile , includePaths ) , includes . getQuotedIncludes ( ) , candidates ) ; searchForDependencies ( dependencies , includePaths , includes . getSystemIncludes ( ) , candidates ) ; if ( ! includes . getMacroIncludes ( ) . isEmpty ( ) ) { dependencies . add ( new ResolvedInclude ( includes . getMacroIncludes ( ) . get ( <int> ) . getValue ( ) , null ) ) ; } return dependencies ; } private List < File > prependSourceDir ( File sourceFile , List < File > includePaths ) { List < File > quotedSearchPath = new ArrayList < File > ( includePaths . size ( ) + <int> ) ; quotedSearchPath . add ( sourceFile . getParentFile ( ) ) ; quotedSearchPath . addAll ( includePaths ) ; return quotedSearchPath ; } private void searchForDependencies ( Set < ResolvedInclude > dependencies , List < File > searchPath , List < Include > includes , Set < File > candidates ) { for ( Include include : includes ) { searchForDependency ( dependencies , searchPath , include . getValue ( ) , candidates ) ; } } private void searchForDependency ( Set < ResolvedInclude > dependencies , List < File > searchPath , String include , Set < File > candidates ) { for ( File searchDir : searchPath ) { File candidate = new File ( searchDir , include ) ; candidates . add ( candidate ) ; if ( candidate . isFile ( ) ) { dependencies . add ( new ResolvedInclude ( include , GFileUtils . canonicalise ( candidate ) ) ) ; return ; } } } } 

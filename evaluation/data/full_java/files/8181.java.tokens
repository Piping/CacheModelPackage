package org . elasticsearch . index . mapper . geo ; import org . elasticsearch . common . geo . builders . ShapeBuilder ; import org . elasticsearch . index . mapper . FieldTypeTestCase ; import org . elasticsearch . index . mapper . MappedFieldType ; import org . junit . Before ; public class GeoShapeFieldTypeTests extends FieldTypeTestCase { @Override protected MappedFieldType createDefaultFieldType ( ) { return new GeoShapeFieldMapper . GeoShapeFieldType ( ) ; } @Before public void setupProperties ( ) { addModifier ( new Modifier ( <str> , false , true ) { @Override public void modify ( MappedFieldType ft ) { ( ( GeoShapeFieldMapper . GeoShapeFieldType ) ft ) . setTree ( <str> ) ; } } ) ; addModifier ( new Modifier ( <str> , false , true ) { @Override public void modify ( MappedFieldType ft ) { ( ( GeoShapeFieldMapper . GeoShapeFieldType ) ft ) . setStrategyName ( <str> ) ; } } ) ; addModifier ( new Modifier ( <str> , false , true ) { @Override public void modify ( MappedFieldType ft ) { ( ( GeoShapeFieldMapper . GeoShapeFieldType ) ft ) . setTreeLevels ( <int> ) ; } } ) ; addModifier ( new Modifier ( <str> , false , true ) { @Override public void modify ( MappedFieldType ft ) { ( ( GeoShapeFieldMapper . GeoShapeFieldType ) ft ) . setPrecisionInMeters ( <int> ) ; } } ) ; addModifier ( new Modifier ( <str> , true , true ) { @Override public void modify ( MappedFieldType ft ) { ( ( GeoShapeFieldMapper . GeoShapeFieldType ) ft ) . setDefaultDistanceErrorPct ( <float> ) ; } } ) ; addModifier ( new Modifier ( <str> , true , true ) { @Override public void modify ( MappedFieldType ft ) { ( ( GeoShapeFieldMapper . GeoShapeFieldType ) ft ) . setOrientation ( ShapeBuilder . Orientation . LEFT ) ; } } ) ; } } 

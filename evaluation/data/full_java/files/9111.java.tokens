package com . google . common . base ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import java . util . Arrays ; import javax . annotation . CheckReturnValue ; import javax . annotation . Nullable ; @GwtCompatible public final class Objects { private Objects ( ) { } @CheckReturnValue public static boolean equal ( @Nullable Object a , @Nullable Object b ) { return a = = b | | ( a ! = null & & a . equals ( b ) ) ; } @CheckReturnValue public static int hashCode ( @Nullable Object . . . objects ) { return Arrays . hashCode ( objects ) ; } @CheckReturnValue @Deprecated public static ToStringHelper toStringHelper ( Object self ) { return new ToStringHelper ( self . getClass ( ) . getSimpleName ( ) ) ; } @CheckReturnValue @Deprecated public static ToStringHelper toStringHelper ( Class < ? > clazz ) { return new ToStringHelper ( clazz . getSimpleName ( ) ) ; } @CheckReturnValue @Deprecated public static ToStringHelper toStringHelper ( String className ) { return new ToStringHelper ( className ) ; } @CheckReturnValue @Deprecated public static < T > T firstNonNull ( @Nullable T first , @Nullable T second ) { return MoreObjects . firstNonNull ( first , second ) ; } @Deprecated public static final class ToStringHelper { private final String className ; private ValueHolder holderHead = new ValueHolder ( ) ; private ValueHolder holderTail = holderHead ; private boolean omitNullValues = false ; private ToStringHelper ( String className ) { this . className = checkNotNull ( className ) ; } public ToStringHelper omitNullValues ( ) { omitNullValues = true ; return this ; } public ToStringHelper add ( String name , @Nullable Object value ) { return addHolder ( name , value ) ; } public ToStringHelper add ( String name , boolean value ) { return addHolder ( name , String . valueOf ( value ) ) ; } public ToStringHelper add ( String name , char value ) { return addHolder ( name , String . valueOf ( value ) ) ; } public ToStringHelper add ( String name , double value ) { return addHolder ( name , String . valueOf ( value ) ) ; } public ToStringHelper add ( String name , float value ) { return addHolder ( name , String . valueOf ( value ) ) ; } public ToStringHelper add ( String name , int value ) { return addHolder ( name , String . valueOf ( value ) ) ; } public ToStringHelper add ( String name , long value ) { return addHolder ( name , String . valueOf ( value ) ) ; } public ToStringHelper addValue ( @Nullable Object value ) { return addHolder ( value ) ; } public ToStringHelper addValue ( boolean value ) { return addHolder ( String . valueOf ( value ) ) ; } public ToStringHelper addValue ( char value ) { return addHolder ( String . valueOf ( value ) ) ; } public ToStringHelper addValue ( double value ) { return addHolder ( String . valueOf ( value ) ) ; } public ToStringHelper addValue ( float value ) { return addHolder ( String . valueOf ( value ) ) ; } public ToStringHelper addValue ( int value ) { return addHolder ( String . valueOf ( value ) ) ; } public ToStringHelper addValue ( long value ) { return addHolder ( String . valueOf ( value ) ) ; } @Override public String toString ( ) { boolean omitNullValuesSnapshot = omitNullValues ; String nextSeparator = <str> ; StringBuilder builder = new StringBuilder ( <int> ) . append ( className ) . append ( <str> ) ; for ( ValueHolder valueHolder = holderHead . next ; valueHolder ! = null ; valueHolder = valueHolder . next ) { if ( ! omitNullValuesSnapshot | | valueHolder . value ! = null ) { builder . append ( nextSeparator ) ; nextSeparator = <str> ; if ( valueHolder . name ! = null ) { builder . append ( valueHolder . name ) . append ( <str> ) ; } builder . append ( valueHolder . value ) ; } } return builder . append ( <str> ) . toString ( ) ; } private ValueHolder addHolder ( ) { ValueHolder valueHolder = new ValueHolder ( ) ; holderTail = holderTail . next = valueHolder ; return valueHolder ; } private ToStringHelper addHolder ( @Nullable Object value ) { ValueHolder valueHolder = addHolder ( ) ; valueHolder . value = value ; return this ; } private ToStringHelper addHolder ( String name , @Nullable Object value ) { ValueHolder valueHolder = addHolder ( ) ; valueHolder . value = value ; valueHolder . name = checkNotNull ( name ) ; return this ; } private static final class ValueHolder { String name ; Object value ; ValueHolder next ; } } } 

package org . nd4j . jdbc . driverfinder ; import org . reflections . Reflections ; import java . io . IOException ; import java . io . InputStream ; import java . lang . reflect . Modifier ; import java . sql . Driver ; import java . util . HashSet ; import java . util . Properties ; import java . util . Set ; public class DriverFinder { public final static String ND4j_JDBC_PROPERTIES = <str> ; public final static String JDBC_KEY = <str> ; private static Class < ? extends Driver > clazz ; private static Driver driver ; public static Driver getDriver ( ) { if ( driver = = null ) { if ( clazz = = null ) discoverDriverClazz ( ) ; try { driver = clazz . newInstance ( ) ; } catch ( InstantiationException e ) { e . printStackTrace ( ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } } return driver ; } private static void discoverDriverClazz ( ) { Reflections r = new Reflections ( ) ; Set < Class < ? extends Driver > > clazzes = new HashSet < > ( r . getSubTypesOf ( Driver . class ) ) ; if ( clazzes . isEmpty ( ) ) { throw new IllegalStateException ( <str> ) ; } else if ( clazzes . size ( ) ! = <int> ) { Set < Class < ? extends Driver > > remove = new HashSet < > ( ) ; for ( Class < ? extends Driver > clazz : clazzes ) { if ( Modifier . isAbstract ( clazz . getModifiers ( ) ) ) { remove . add ( clazz ) ; } else if ( Modifier . isInterface ( clazz . getModifiers ( ) ) ) { remove . add ( clazz ) ; } } clazzes . removeAll ( remove ) ; if ( clazzes . size ( ) ! = <int> ) { InputStream i = DriverFinder . class . getResourceAsStream ( <str> + ND4j_JDBC_PROPERTIES ) ; if ( i = = null ) throw new IllegalStateException ( <str> ) ; else { Properties props = new Properties ( ) ; try { props . load ( i ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } String clazz = props . getProperty ( JDBC_KEY ) ; if ( clazz = = null ) throw new IllegalStateException ( <str> + ND4j_JDBC_PROPERTIES + <str> + JDBC_KEY ) ; try { DriverFinder . clazz = ( Class < ? extends Driver > ) Class . forName ( clazz ) ; } catch ( ClassNotFoundException e ) { throw new IllegalStateException ( <str> + ND4j_JDBC_PROPERTIES + <str> + JDBC_KEY ) ; } } } } } } 

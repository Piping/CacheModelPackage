package org . nd4j . linalg . jcublas ; import jcuda . Pointer ; import org . apache . commons . lang3 . tuple . Triple ; import org . nd4j . linalg . api . blas . BlasBufferUtil ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . shape . Shape ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . jcublas . buffer . DevicePointerInfo ; import org . nd4j . linalg . jcublas . buffer . JCudaBuffer ; import org . nd4j . linalg . jcublas . context . ContextHolder ; import org . nd4j . linalg . jcublas . context . CudaContext ; import java . util . Arrays ; public class CublasPointer implements AutoCloseable { private JCudaBuffer buffer ; private Pointer devicePointer ; private Pointer hostPointer ; private boolean closed = false ; private INDArray arr ; private CudaContext cudaContext ; private boolean resultPointer = false ; @Override public void close ( ) throws Exception { if ( ! isResultPointer ( ) ) { destroy ( ) ; } } public void destroy ( ) { if ( ! closed ) { if ( arr ! = null ) buffer . freeDevicePointer ( arr . offset ( ) , arr . length ( ) ) ; else buffer . freeDevicePointer ( <int> , buffer . length ( ) ) ; closed = true ; } } public JCudaBuffer getBuffer ( ) { return buffer ; } public Pointer getDevicePointer ( ) { return devicePointer ; } public Pointer getHostPointer ( ) { return hostPointer ; } public void setHostPointer ( Pointer hostPointer ) { this . hostPointer = hostPointer ; } public void copyToHost ( ) { if ( arr ! = null ) { int compLength = arr instanceof IComplexNDArray ? arr . length ( ) * <int> : arr . length ( ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . copyToHost ( buffer , arr . offset ( ) , arr . elementWiseStride ( ) , compLength , cudaContext , arr . offset ( ) , arr . elementWiseStride ( ) ) ; } else { ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . copyToHost ( buffer , <int> , cudaContext ) ; } } public CublasPointer ( JCudaBuffer buffer , CudaContext context ) { this . buffer = buffer ; this . devicePointer = buffer . getDevicePointer ( <int> , <int> , buffer . length ( ) ) ; this . cudaContext = context ; context . initOldStream ( ) ; DevicePointerInfo info = buffer . getPointersToContexts ( ) . get ( Thread . currentThread ( ) . getName ( ) , Triple . of ( <int> , buffer . length ( ) , <int> ) ) ; hostPointer = info . getPointers ( ) . getHostPointer ( ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . setData ( devicePointer , <int> , <int> , buffer . length ( ) , info . getPointers ( ) . getHostPointer ( ) ) ; buffer . setCopied ( Thread . currentThread ( ) . getName ( ) ) ; } public CublasPointer ( INDArray array , CudaContext context ) { if ( array instanceof IComplexNDArray ) { if ( array . length ( ) * <int> < array . data ( ) . length ( ) & & ! array . isVector ( ) ) { array = Shape . toOffsetZero ( array ) ; } } this . cudaContext = context ; buffer = ( JCudaBuffer ) array . data ( ) ; String name = Thread . currentThread ( ) . getName ( ) ; this . arr = array ; if ( array . elementWiseStride ( ) < <int> ) { this . arr = array . dup ( ) ; buffer = ( JCudaBuffer ) this . arr . data ( ) ; if ( this . arr . elementWiseStride ( ) < <int> ) throw new IllegalStateException ( <str> ) ; } int compLength = arr instanceof IComplexNDArray ? arr . length ( ) * <int> : arr . length ( ) ; int stride = arr instanceof IComplexNDArray ? BlasBufferUtil . getBlasStride ( arr ) / <int> : BlasBufferUtil . getBlasStride ( arr ) ; this . devicePointer = buffer . getDevicePointer ( this . arr , stride , this . arr . offset ( ) , compLength ) ; if ( ! buffer . copied ( name ) ) { ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . setData ( buffer , <int> , <int> , buffer . length ( ) ) ; buffer . setCopied ( name ) ; } DevicePointerInfo info = buffer . getPointersToContexts ( ) . get ( Thread . currentThread ( ) . getName ( ) , Triple . of ( <int> , buffer . length ( ) , <int> ) ) ; hostPointer = info . getPointers ( ) . getHostPointer ( ) ; } public boolean isResultPointer ( ) { return resultPointer ; } public void setResultPointer ( boolean resultPointer ) { this . resultPointer = resultPointer ; } @Override public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; if ( devicePointer ! = null ) { if ( arr ! = null ) { if ( arr instanceof IComplexNDArray & & arr . length ( ) * <int> = = buffer . length ( ) | | arr . length ( ) = = buffer . length ( ) ) appendWhereArrayLengthEqualsBufferLength ( sb ) ; else appendWhereArrayLengthLessThanBufferLength ( sb ) ; } else { if ( buffer . dataType ( ) = = DataBuffer . Type . DOUBLE ) { double [ ] set = new double [ buffer . length ( ) ] ; DataBuffer setBuffer = Nd4j . createBuffer ( set ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . getData ( setBuffer , <int> , <int> , buffer . length ( ) , buffer , cudaContext , <int> , <int> ) ; sb . append ( setBuffer ) ; } else if ( buffer . dataType ( ) = = DataBuffer . Type . INT ) { int [ ] set = new int [ buffer . length ( ) ] ; DataBuffer setBuffer = Nd4j . createBuffer ( set ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . getData ( setBuffer , <int> , <int> , buffer . length ( ) , buffer , cudaContext , <int> , <int> ) ; sb . append ( setBuffer ) ; } else { float [ ] set = new float [ buffer . length ( ) ] ; DataBuffer setBuffer = Nd4j . createBuffer ( set ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . getData ( setBuffer , <int> , <int> , buffer . length ( ) , buffer , cudaContext , <int> , <int> ) ; sb . append ( setBuffer ) ; } } } else sb . append ( <str> ) ; return sb . toString ( ) ; } private void appendWhereArrayLengthLessThanBufferLength ( StringBuffer sb ) { int length = arr instanceof IComplexNDArray ? arr . length ( ) * <int> : arr . length ( ) ; if ( arr . data ( ) . dataType ( ) = = DataBuffer . Type . DOUBLE ) { double [ ] set = new double [ length ] ; DataBuffer setString = Nd4j . createBuffer ( set ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . getData ( setString , <int> , <int> , length , buffer , cudaContext , arr . elementWiseStride ( ) , arr . offset ( ) ) ; sb . append ( setString ) ; } else if ( arr . data ( ) . dataType ( ) = = DataBuffer . Type . INT ) { int [ ] set = new int [ length ] ; DataBuffer setString = Nd4j . createBuffer ( set ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . getData ( setString , <int> , <int> , length , buffer , cudaContext , arr . elementWiseStride ( ) , arr . offset ( ) ) ; sb . append ( setString ) ; } else { float [ ] set = new float [ length ] ; DataBuffer setString = Nd4j . createBuffer ( set ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . getData ( setString , <int> , <int> , length , buffer , cudaContext , arr . elementWiseStride ( ) , arr . offset ( ) ) ; sb . append ( setString ) ; } } private void appendWhereArrayLengthEqualsBufferLength ( StringBuffer sb ) { int length = arr instanceof IComplexNDArray ? arr . length ( ) * <int> : arr . length ( ) ; if ( arr . data ( ) . dataType ( ) = = DataBuffer . Type . DOUBLE ) { double [ ] set = new double [ length ] ; DataBuffer setString = Nd4j . createBuffer ( set ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . getData ( setString , <int> , <int> , length , buffer , cudaContext , <int> , <int> ) ; sb . append ( setString ) ; } else if ( arr . data ( ) . dataType ( ) = = DataBuffer . Type . INT ) { int [ ] set = new int [ length ] ; DataBuffer setString = Nd4j . createBuffer ( set ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . getData ( setString , <int> , <int> , length , buffer , cudaContext , <int> , <int> ) ; sb . append ( setString ) ; } else { float [ ] set = new float [ length ] ; DataBuffer setString = Nd4j . createBuffer ( set ) ; ContextHolder . getInstance ( ) . getMemoryStrategy ( ) . getData ( setString , <int> , <int> , length , buffer , cudaContext , <int> , <int> ) ; sb . append ( setString ) ; } } public static void free ( CublasPointer . . . pointers ) { for ( CublasPointer pointer : pointers ) { try { pointer . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } 

package org . gradle . model . internal . report . unbound ; import com . google . common . base . Joiner ; import net . jcip . annotations . NotThreadSafe ; import java . io . PrintWriter ; @NotThreadSafe public class UnboundRulesReporter { private final PrintWriter writer ; private final String prefix ; private final static String INDENT = <str> ; public UnboundRulesReporter ( PrintWriter writer , String prefix ) { this . writer = writer ; this . prefix = prefix ; } public void reportOn ( Iterable < ? extends UnboundRule > rules ) { for ( UnboundRule rule : rules ) { writer . print ( prefix ) ; writer . println ( rule . getDescriptor ( ) ) ; if ( rule . getMutableInputs ( ) . size ( ) > <int> ) { heading ( <str> ) ; reportInputs ( rule . getMutableInputs ( ) ) ; } if ( rule . getImmutableInputs ( ) . size ( ) > <int> ) { heading ( <str> ) ; reportInputs ( rule . getImmutableInputs ( ) ) ; } writer . println ( ) ; } writer . println ( <str> ) ; } private void reportInputs ( Iterable < ? extends UnboundRuleInput > inputs ) { for ( UnboundRuleInput input : inputs ) { writer . print ( indent ( <int> ) ) ; writer . write ( <str> ) ; writer . write ( input . getPath ( ) = = null ? <str> : input . getPath ( ) ) ; writer . write ( <str> ) ; writer . write ( input . getType ( ) = = null ? <str> : input . getType ( ) ) ; if ( input . getDescription ( ) ! = null ) { writer . write ( <str> ) ; writer . write ( <str> ) ; writer . write ( input . getDescription ( ) ) ; writer . write ( <str> ) ; } if ( ! input . isBound ( ) ) { writer . write ( <str> ) ; writer . write ( <str> ) ; } writer . println ( ) ; if ( input . getPath ( ) = = null & & input . getScope ( ) ! = null ) { writer . write ( indent ( <int> ) ) ; writer . write ( <str> ) ; writer . println ( input . getScope ( ) ) ; } if ( input . getSuggestedPaths ( ) . size ( ) > <int> ) { writer . write ( indent ( <int> ) ) ; writer . write ( <str> ) ; writer . println ( Joiner . on ( <str> ) . join ( input . getSuggestedPaths ( ) ) ) ; } } } private void heading ( String heading ) { writer . print ( indent ( <int> ) ) ; writer . println ( heading ) ; } private String indent ( int times ) { StringBuffer buff = new StringBuffer ( prefix ) ; for ( int i = <int> ; i < times ; i + + ) { buff . append ( INDENT ) ; } return buff . toString ( ) ; } } 

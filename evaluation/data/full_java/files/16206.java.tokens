package org . gradle . foundation . output . definitions ; import org . gradle . foundation . output . FileLink ; import java . io . File ; import java . util . List ; public class ExtensionFileLinkDefinition implements FileLinkDefinition { private String expression ; private String lineNumberDelimiter ; private String extension ; private String name ; public ExtensionFileLinkDefinition ( String name , String extension ) { this ( name , extension , null ) ; } public ExtensionFileLinkDefinition ( String name , String extension , String lineNumberDelimiter ) { this . name = name ; this . lineNumberDelimiter = lineNumberDelimiter ; this . extension = extension ; this . expression = <str> + extension ; if ( lineNumberDelimiter ! = null ) { this . expression + = generateLineNumberExpression ( lineNumberDelimiter ) ; } } public String getName ( ) { return name ; } protected String generateLineNumberExpression ( String lineNumberDelimiter ) { return PrefixedFileLinkDefinition . quoteLiteral ( lineNumberDelimiter ) + <str> ; } public String getSearchExpression ( ) { return expression ; } public int parseFileLink ( String fullSearchTest , String matchedText , int start , int end , boolean verifyFileExists , List < FileLink > fileLinks ) { int extensionIndex = lastIndexOfCaseInsensitive ( matchedText , extension ) ; if ( extensionIndex = = - <int> ) { return - <int> ; } int prefixIndex = getStartOfFile ( matchedText ) ; int realPathEnd = extensionIndex + extension . length ( ) ; String path = matchedText . substring ( prefixIndex , realPathEnd ) . trim ( ) ; File file = new File ( path ) ; if ( verifyFileExists & & ! file . exists ( ) ) { return - <int> ; } String remainder = matchedText . substring ( realPathEnd ) ; int lineNumber = PrefixedFileLinkDefinition . getLineNumber ( remainder , lineNumberDelimiter ) ; fileLinks . add ( new FileLink ( file , start + prefixIndex , end , lineNumber , this ) ) ; return end ; } public static int lastIndexOfCaseInsensitive ( String sourceText , String alreadyLowerCaseSoughtText ) { sourceText = sourceText . toLowerCase ( ) ; return sourceText . lastIndexOf ( alreadyLowerCaseSoughtText ) ; } private int getStartOfFile ( String matchedText ) { int index = <int> ; while ( Character . isWhitespace ( matchedText . charAt ( index ) ) ) { index + + ; } return index ; } @Override public String toString ( ) { return <str> + name + <str> + <str> + expression + <str> + <str> + lineNumberDelimiter + <str> + <str> + extension + <str> ; } } 

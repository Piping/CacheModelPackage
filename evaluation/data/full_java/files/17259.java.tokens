package org . jbox2d . pooling . normal ; import org . jbox2d . pooling . IDynamicStack ; public abstract class MutableStack < E > implements IDynamicStack < E > { private E [ ] stack ; private int index ; private int size ; public MutableStack ( int argInitSize ) { index = <int> ; stack = null ; index = <int> ; extendStack ( argInitSize ) ; } private void extendStack ( int argSize ) { E [ ] newStack = newArray ( argSize ) ; if ( stack ! = null ) { System . arraycopy ( stack , <int> , newStack , <int> , size ) ; } for ( int i = <int> ; i < newStack . length ; i + + ) { newStack [ i ] = newInstance ( ) ; } stack = newStack ; size = newStack . length ; } public final E pop ( ) { if ( index > = size ) { extendStack ( size * <int> ) ; } return stack [ index + + ] ; } public final void push ( E argObject ) { assert ( index > <int> ) ; stack [ - - index ] = argObject ; } protected abstract E newInstance ( ) ; protected abstract E [ ] newArray ( int size ) ; } 

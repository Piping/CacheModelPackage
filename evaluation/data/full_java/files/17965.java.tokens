package com . badlogic . gdx . graphics . g2d ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . utils . GdxRuntimeException ; public class NinePatch { public static final int TOP_LEFT = <int> ; public static final int TOP_CENTER = <int> ; public static final int TOP_RIGHT = <int> ; public static final int MIDDLE_LEFT = <int> ; public static final int MIDDLE_CENTER = <int> ; public static final int MIDDLE_RIGHT = <int> ; public static final int BOTTOM_LEFT = <int> ; public static final int BOTTOM_CENTER = <int> ; public static final int BOTTOM_RIGHT = <int> ; static private final Color tmpDrawColor = new Color ( ) ; private Texture texture ; private int bottomLeft = - <int> , bottomCenter = - <int> , bottomRight = - <int> ; private int middleLeft = - <int> , middleCenter = - <int> , middleRight = - <int> ; private int topLeft = - <int> , topCenter = - <int> , topRight = - <int> ; private float leftWidth , rightWidth , middleWidth , middleHeight , topHeight , bottomHeight ; private float [ ] vertices = new float [ <int> * <int> * <int> ] ; private int idx ; private final Color color = new Color ( Color . WHITE ) ; private float padLeft = - <int> , padRight = - <int> , padTop = - <int> , padBottom = - <int> ; public NinePatch ( Texture texture , int left , int right , int top , int bottom ) { this ( new TextureRegion ( texture ) , left , right , top , bottom ) ; } public NinePatch ( TextureRegion region , int left , int right , int top , int bottom ) { if ( region = = null ) throw new IllegalArgumentException ( <str> ) ; final int middleWidth = region . getRegionWidth ( ) - left - right ; final int middleHeight = region . getRegionHeight ( ) - top - bottom ; TextureRegion [ ] patches = new TextureRegion [ <int> ] ; if ( top > <int> ) { if ( left > <int> ) patches [ TOP_LEFT ] = new TextureRegion ( region , <int> , <int> , left , top ) ; if ( middleWidth > <int> ) patches [ TOP_CENTER ] = new TextureRegion ( region , left , <int> , middleWidth , top ) ; if ( right > <int> ) patches [ TOP_RIGHT ] = new TextureRegion ( region , left + middleWidth , <int> , right , top ) ; } if ( middleHeight > <int> ) { if ( left > <int> ) patches [ MIDDLE_LEFT ] = new TextureRegion ( region , <int> , top , left , middleHeight ) ; if ( middleWidth > <int> ) patches [ MIDDLE_CENTER ] = new TextureRegion ( region , left , top , middleWidth , middleHeight ) ; if ( right > <int> ) patches [ MIDDLE_RIGHT ] = new TextureRegion ( region , left + middleWidth , top , right , middleHeight ) ; } if ( bottom > <int> ) { if ( left > <int> ) patches [ BOTTOM_LEFT ] = new TextureRegion ( region , <int> , top + middleHeight , left , bottom ) ; if ( middleWidth > <int> ) patches [ BOTTOM_CENTER ] = new TextureRegion ( region , left , top + middleHeight , middleWidth , bottom ) ; if ( right > <int> ) patches [ BOTTOM_RIGHT ] = new TextureRegion ( region , left + middleWidth , top + middleHeight , right , bottom ) ; } if ( left = = <int> & & middleWidth = = <int> ) { patches [ TOP_CENTER ] = patches [ TOP_RIGHT ] ; patches [ MIDDLE_CENTER ] = patches [ MIDDLE_RIGHT ] ; patches [ BOTTOM_CENTER ] = patches [ BOTTOM_RIGHT ] ; patches [ TOP_RIGHT ] = null ; patches [ MIDDLE_RIGHT ] = null ; patches [ BOTTOM_RIGHT ] = null ; } if ( top = = <int> & & middleHeight = = <int> ) { patches [ MIDDLE_LEFT ] = patches [ BOTTOM_LEFT ] ; patches [ MIDDLE_CENTER ] = patches [ BOTTOM_CENTER ] ; patches [ MIDDLE_RIGHT ] = patches [ BOTTOM_RIGHT ] ; patches [ BOTTOM_LEFT ] = null ; patches [ BOTTOM_CENTER ] = null ; patches [ BOTTOM_RIGHT ] = null ; } load ( patches ) ; } public NinePatch ( Texture texture , Color color ) { this ( texture ) ; setColor ( color ) ; } public NinePatch ( Texture texture ) { this ( new TextureRegion ( texture ) ) ; } public NinePatch ( TextureRegion region , Color color ) { this ( region ) ; setColor ( color ) ; } public NinePatch ( TextureRegion region ) { load ( new TextureRegion [ ] { null , null , null , null , region , null , null , null , null } ) ; } public NinePatch ( TextureRegion . . . patches ) { if ( patches = = null | | patches . length ! = <int> ) throw new IllegalArgumentException ( <str> ) ; load ( patches ) ; float leftWidth = getLeftWidth ( ) ; if ( ( patches [ TOP_LEFT ] ! = null & & patches [ TOP_LEFT ] . getRegionWidth ( ) ! = leftWidth ) | | ( patches [ MIDDLE_LEFT ] ! = null & & patches [ MIDDLE_LEFT ] . getRegionWidth ( ) ! = leftWidth ) | | ( patches [ BOTTOM_LEFT ] ! = null & & patches [ BOTTOM_LEFT ] . getRegionWidth ( ) ! = leftWidth ) ) { throw new GdxRuntimeException ( <str> ) ; } float rightWidth = getRightWidth ( ) ; if ( ( patches [ TOP_RIGHT ] ! = null & & patches [ TOP_RIGHT ] . getRegionWidth ( ) ! = rightWidth ) | | ( patches [ MIDDLE_RIGHT ] ! = null & & patches [ MIDDLE_RIGHT ] . getRegionWidth ( ) ! = rightWidth ) | | ( patches [ BOTTOM_RIGHT ] ! = null & & patches [ BOTTOM_RIGHT ] . getRegionWidth ( ) ! = rightWidth ) ) { throw new GdxRuntimeException ( <str> ) ; } float bottomHeight = getBottomHeight ( ) ; if ( ( patches [ BOTTOM_LEFT ] ! = null & & patches [ BOTTOM_LEFT ] . getRegionHeight ( ) ! = bottomHeight ) | | ( patches [ BOTTOM_CENTER ] ! = null & & patches [ BOTTOM_CENTER ] . getRegionHeight ( ) ! = bottomHeight ) | | ( patches [ BOTTOM_RIGHT ] ! = null & & patches [ BOTTOM_RIGHT ] . getRegionHeight ( ) ! = bottomHeight ) ) { throw new GdxRuntimeException ( <str> ) ; } float topHeight = getTopHeight ( ) ; if ( ( patches [ TOP_LEFT ] ! = null & & patches [ TOP_LEFT ] . getRegionHeight ( ) ! = topHeight ) | | ( patches [ TOP_CENTER ] ! = null & & patches [ TOP_CENTER ] . getRegionHeight ( ) ! = topHeight ) | | ( patches [ TOP_RIGHT ] ! = null & & patches [ TOP_RIGHT ] . getRegionHeight ( ) ! = topHeight ) ) { throw new GdxRuntimeException ( <str> ) ; } } public NinePatch ( NinePatch ninePatch ) { this ( ninePatch , ninePatch . color ) ; } public NinePatch ( NinePatch ninePatch , Color color ) { texture = ninePatch . texture ; bottomLeft = ninePatch . bottomLeft ; bottomCenter = ninePatch . bottomCenter ; bottomRight = ninePatch . bottomRight ; middleLeft = ninePatch . middleLeft ; middleCenter = ninePatch . middleCenter ; middleRight = ninePatch . middleRight ; topLeft = ninePatch . topLeft ; topCenter = ninePatch . topCenter ; topRight = ninePatch . topRight ; leftWidth = ninePatch . leftWidth ; rightWidth = ninePatch . rightWidth ; middleWidth = ninePatch . middleWidth ; middleHeight = ninePatch . middleHeight ; topHeight = ninePatch . topHeight ; bottomHeight = ninePatch . bottomHeight ; padLeft = ninePatch . padLeft ; padTop = ninePatch . padTop ; padBottom = ninePatch . padBottom ; padRight = ninePatch . padRight ; vertices = new float [ ninePatch . vertices . length ] ; System . arraycopy ( ninePatch . vertices , <int> , vertices , <int> , ninePatch . vertices . length ) ; idx = ninePatch . idx ; this . color . set ( color ) ; } private void load ( TextureRegion [ ] patches ) { final float color = Color . WHITE . toFloatBits ( ) ; if ( patches [ BOTTOM_LEFT ] ! = null ) { bottomLeft = add ( patches [ BOTTOM_LEFT ] , color , false , false ) ; leftWidth = patches [ BOTTOM_LEFT ] . getRegionWidth ( ) ; bottomHeight = patches [ BOTTOM_LEFT ] . getRegionHeight ( ) ; } if ( patches [ BOTTOM_CENTER ] ! = null ) { bottomCenter = add ( patches [ BOTTOM_CENTER ] , color , true , false ) ; middleWidth = Math . max ( middleWidth , patches [ BOTTOM_CENTER ] . getRegionWidth ( ) ) ; bottomHeight = Math . max ( bottomHeight , patches [ BOTTOM_CENTER ] . getRegionHeight ( ) ) ; } if ( patches [ BOTTOM_RIGHT ] ! = null ) { bottomRight = add ( patches [ BOTTOM_RIGHT ] , color , false , false ) ; rightWidth = Math . max ( rightWidth , patches [ BOTTOM_RIGHT ] . getRegionWidth ( ) ) ; bottomHeight = Math . max ( bottomHeight , patches [ BOTTOM_RIGHT ] . getRegionHeight ( ) ) ; } if ( patches [ MIDDLE_LEFT ] ! = null ) { middleLeft = add ( patches [ MIDDLE_LEFT ] , color , false , true ) ; leftWidth = Math . max ( leftWidth , patches [ MIDDLE_LEFT ] . getRegionWidth ( ) ) ; middleHeight = Math . max ( middleHeight , patches [ MIDDLE_LEFT ] . getRegionHeight ( ) ) ; } if ( patches [ MIDDLE_CENTER ] ! = null ) { middleCenter = add ( patches [ MIDDLE_CENTER ] , color , true , true ) ; middleWidth = Math . max ( middleWidth , patches [ MIDDLE_CENTER ] . getRegionWidth ( ) ) ; middleHeight = Math . max ( middleHeight , patches [ MIDDLE_CENTER ] . getRegionHeight ( ) ) ; } if ( patches [ MIDDLE_RIGHT ] ! = null ) { middleRight = add ( patches [ MIDDLE_RIGHT ] , color , false , true ) ; rightWidth = Math . max ( rightWidth , patches [ MIDDLE_RIGHT ] . getRegionWidth ( ) ) ; middleHeight = Math . max ( middleHeight , patches [ MIDDLE_RIGHT ] . getRegionHeight ( ) ) ; } if ( patches [ TOP_LEFT ] ! = null ) { topLeft = add ( patches [ TOP_LEFT ] , color , false , false ) ; leftWidth = Math . max ( leftWidth , patches [ TOP_LEFT ] . getRegionWidth ( ) ) ; topHeight = Math . max ( topHeight , patches [ TOP_LEFT ] . getRegionHeight ( ) ) ; } if ( patches [ TOP_CENTER ] ! = null ) { topCenter = add ( patches [ TOP_CENTER ] , color , true , false ) ; middleWidth = Math . max ( middleWidth , patches [ TOP_CENTER ] . getRegionWidth ( ) ) ; topHeight = Math . max ( topHeight , patches [ TOP_CENTER ] . getRegionHeight ( ) ) ; } if ( patches [ TOP_RIGHT ] ! = null ) { topRight = add ( patches [ TOP_RIGHT ] , color , false , false ) ; rightWidth = Math . max ( rightWidth , patches [ TOP_RIGHT ] . getRegionWidth ( ) ) ; topHeight = Math . max ( topHeight , patches [ TOP_RIGHT ] . getRegionHeight ( ) ) ; } if ( idx < vertices . length ) { float [ ] newVertices = new float [ idx ] ; System . arraycopy ( vertices , <int> , newVertices , <int> , idx ) ; vertices = newVertices ; } } private int add ( TextureRegion region , float color , boolean isStretchW , boolean isStretchH ) { if ( texture = = null ) texture = region . getTexture ( ) ; else if ( texture ! = region . getTexture ( ) ) throw new IllegalArgumentException ( <str> ) ; float u = region . u ; float v = region . v2 ; float u2 = region . u2 ; float v2 = region . v ; if ( isStretchW ) { float halfTexelWidth = <float> * <float> / texture . getWidth ( ) ; u + = halfTexelWidth ; u2 - = halfTexelWidth ; } if ( isStretchH ) { float halfTexelHeight = <float> * <float> / texture . getHeight ( ) ; v - = halfTexelHeight ; v2 + = halfTexelHeight ; } final float [ ] vertices = this . vertices ; idx + = <int> ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx ] = v ; idx + = <int> ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u ; vertices [ idx ] = v2 ; idx + = <int> ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx ] = v2 ; idx + = <int> ; vertices [ idx + + ] = color ; vertices [ idx + + ] = u2 ; vertices [ idx + + ] = v ; return idx - <int> * <int> ; } private void set ( int idx , float x , float y , float width , float height , float color ) { final float fx2 = x + width ; final float fy2 = y + height ; final float [ ] vertices = this . vertices ; vertices [ idx + + ] = x ; vertices [ idx + + ] = y ; vertices [ idx ] = color ; idx + = <int> ; vertices [ idx + + ] = x ; vertices [ idx + + ] = fy2 ; vertices [ idx ] = color ; idx + = <int> ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = fy2 ; vertices [ idx ] = color ; idx + = <int> ; vertices [ idx + + ] = fx2 ; vertices [ idx + + ] = y ; vertices [ idx ] = color ; } public void draw ( Batch batch , float x , float y , float width , float height ) { final float centerColumnX = x + leftWidth ; final float rightColumnX = x + width - rightWidth ; final float middleRowY = y + bottomHeight ; final float topRowY = y + height - topHeight ; final float c = tmpDrawColor . set ( color ) . mul ( batch . getColor ( ) ) . toFloatBits ( ) ; if ( bottomLeft ! = - <int> ) set ( bottomLeft , x , y , centerColumnX - x , middleRowY - y , c ) ; if ( bottomCenter ! = - <int> ) set ( bottomCenter , centerColumnX , y , rightColumnX - centerColumnX , middleRowY - y , c ) ; if ( bottomRight ! = - <int> ) set ( bottomRight , rightColumnX , y , x + width - rightColumnX , middleRowY - y , c ) ; if ( middleLeft ! = - <int> ) set ( middleLeft , x , middleRowY , centerColumnX - x , topRowY - middleRowY , c ) ; if ( middleCenter ! = - <int> ) set ( middleCenter , centerColumnX , middleRowY , rightColumnX - centerColumnX , topRowY - middleRowY , c ) ; if ( middleRight ! = - <int> ) set ( middleRight , rightColumnX , middleRowY , x + width - rightColumnX , topRowY - middleRowY , c ) ; if ( topLeft ! = - <int> ) set ( topLeft , x , topRowY , centerColumnX - x , y + height - topRowY , c ) ; if ( topCenter ! = - <int> ) set ( topCenter , centerColumnX , topRowY , rightColumnX - centerColumnX , y + height - topRowY , c ) ; if ( topRight ! = - <int> ) set ( topRight , rightColumnX , topRowY , x + width - rightColumnX , y + height - topRowY , c ) ; batch . draw ( texture , vertices , <int> , idx ) ; } public void setColor ( Color color ) { this . color . set ( color ) ; } public Color getColor ( ) { return color ; } public float getLeftWidth ( ) { return leftWidth ; } public void setLeftWidth ( float leftWidth ) { this . leftWidth = leftWidth ; } public float getRightWidth ( ) { return rightWidth ; } public void setRightWidth ( float rightWidth ) { this . rightWidth = rightWidth ; } public float getTopHeight ( ) { return topHeight ; } public void setTopHeight ( float topHeight ) { this . topHeight = topHeight ; } public float getBottomHeight ( ) { return bottomHeight ; } public void setBottomHeight ( float bottomHeight ) { this . bottomHeight = bottomHeight ; } public float getMiddleWidth ( ) { return middleWidth ; } public void setMiddleWidth ( float middleWidth ) { this . middleWidth = middleWidth ; } public float getMiddleHeight ( ) { return middleHeight ; } public void setMiddleHeight ( float middleHeight ) { this . middleHeight = middleHeight ; } public float getTotalWidth ( ) { return leftWidth + middleWidth + rightWidth ; } public float getTotalHeight ( ) { return topHeight + middleHeight + bottomHeight ; } public void setPadding ( float left , float right , float top , float bottom ) { this . padLeft = left ; this . padRight = right ; this . padTop = top ; this . padBottom = bottom ; } public float getPadLeft ( ) { if ( padLeft = = - <int> ) return getLeftWidth ( ) ; return padLeft ; } public void setPadLeft ( float left ) { this . padLeft = left ; } public float getPadRight ( ) { if ( padRight = = - <int> ) return getRightWidth ( ) ; return padRight ; } public void setPadRight ( float right ) { this . padRight = right ; } public float getPadTop ( ) { if ( padTop = = - <int> ) return getTopHeight ( ) ; return padTop ; } public void setPadTop ( float top ) { this . padTop = top ; } public float getPadBottom ( ) { if ( padBottom = = - <int> ) return getBottomHeight ( ) ; return padBottom ; } public void setPadBottom ( float bottom ) { this . padBottom = bottom ; } public void scale ( float scaleX , float scaleY ) { leftWidth * = scaleX ; rightWidth * = scaleX ; topHeight * = scaleY ; bottomHeight * = scaleY ; middleWidth * = scaleX ; middleHeight * = scaleY ; if ( padLeft ! = - <int> ) padLeft * = scaleX ; if ( padRight ! = - <int> ) padRight * = scaleX ; if ( padTop ! = - <int> ) padTop * = scaleY ; if ( padBottom ! = - <int> ) padBottom * = scaleY ; } public Texture getTexture ( ) { return texture ; } } 

package org . gradle . internal . reflect ; @SuppressWarnings ( <str> ) public class JavaTestSubject { final IllegalStateException failure = new IllegalStateException ( ) ; private String myProp = <str> ; private boolean myBooleanProp = true ; public String myField = <str> ; public boolean myBooleanField = true ; private static String myStaticProperty ; public int publicField ; public String doSomeStuff ( int a , Integer b ) { return String . format ( <str> , a , b ) ; } public String getMyProperty ( ) { return myProp ; } public void setMyProperty ( String value ) { myProp = value ; } public boolean isMyBooleanProperty ( ) { return myBooleanProp ; } public void setMyBooleanProperty ( boolean value ) { myBooleanProp = value ; } public boolean getMyOtherBooleanProperty ( ) { return true ; } public String isNotABooleanProperty ( ) { return null ; } public static String getStaticProperty ( ) { return myStaticProperty ; } public static void setStaticProperty ( String value ) { myStaticProperty = value ; } public void getVoidProperty ( ) { } public String getParamProperty ( String param ) { return null ; } public void setParamProperty ( ) { } public void setParamProperty ( String param , String someOther ) { } public void setWriteOnly ( String param ) { } public void throwsException ( ) { throw failure ; } static class TestCheckedException extends Exception { public TestCheckedException ( Throwable cause ) { super ( cause ) ; } } public void throwsCheckedException ( ) throws TestCheckedException { throw new TestCheckedException ( failure ) ; } protected String protectedMethod ( ) { return <str> ; } protected String overridden ( ) { return <str> ; } protected String getProtectedProperty ( ) { return null ; } protected void setProtectedProperty ( String value ) { } private String getPrivateProperty ( ) { return null ; } private void setPrivateProperty ( String value ) { } } 

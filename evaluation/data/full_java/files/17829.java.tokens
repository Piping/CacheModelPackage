package com . badlogic . gdx . tools . flame ; import java . awt . GridBagConstraints ; import java . awt . GridBagLayout ; import java . awt . Insets ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import javax . swing . DefaultComboBoxModel ; import javax . swing . JButton ; import javax . swing . JComboBox ; import javax . swing . JLabel ; import javax . swing . JPanel ; import javax . swing . JSeparator ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . TextureAtlas ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . utils . Array ; public class RegionPickerPanel extends JPanel { private enum GenerationMode { ByRows ( <str> ) , ByColumns ( <str> ) ; String string ; private GenerationMode ( String string ) { this . string = string ; } @Override public String toString ( ) { return string ; } } public interface Listener { void onRegionsSelected ( Array < TextureRegion > regions ) ; } TextureAtlasPanel atlasPanel ; TexturePanel texturePanel ; JButton selectButton , selectAllButton , clearButton , generateButton , reverseButton ; JComboBox generateBox ; Slider rowSlider , columnSlider ; JPanel generationPanel , content ; Listener listener ; public RegionPickerPanel ( Listener listener ) { initializeComponents ( ) ; this . listener = listener ; } private void initializeComponents ( ) { setLayout ( new GridBagLayout ( ) ) ; content = new JPanel ( ) ; atlasPanel = new TextureAtlasPanel ( ) ; texturePanel = new TexturePanel ( ) ; CustomCardLayout cardLayout = new CustomCardLayout ( ) ; content . setLayout ( cardLayout ) ; content . add ( atlasPanel , <str> ) ; content . add ( texturePanel , <str> ) ; add ( content , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; JPanel controls = new JPanel ( new GridBagLayout ( ) ) ; controls . add ( selectButton = new JButton ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; controls . add ( new JSeparator ( JSeparator . HORIZONTAL ) , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; JPanel pickPanel = new JPanel ( new GridBagLayout ( ) ) ; pickPanel . add ( selectAllButton = new JButton ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; pickPanel . add ( clearButton = new JButton ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; pickPanel . add ( reverseButton = new JButton ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; controls . add ( pickPanel , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; generationPanel = new JPanel ( new GridBagLayout ( ) ) ; generationPanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; generationPanel . add ( rowSlider = new Slider ( <int> , <int> , <int> , <int> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; generationPanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; generationPanel . add ( columnSlider = new Slider ( <int> , <int> , <int> , <int> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; generationPanel . add ( generateBox = new JComboBox ( new DefaultComboBoxModel ( GenerationMode . values ( ) ) ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; generationPanel . add ( generateButton = new JButton ( <str> ) , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; controls . add ( new JSeparator ( JSeparator . HORIZONTAL ) , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . HORIZONTAL , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; controls . add ( generationPanel , new GridBagConstraints ( <int> , - <int> , <int> , <int> , <int> , <int> , GridBagConstraints . CENTER , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; add ( controls , new GridBagConstraints ( <int> , <int> , <int> , <int> , <int> , <int> , GridBagConstraints . NORTHWEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; selectButton . addActionListener ( new ActionListener ( ) { @Override public void actionPerformed ( ActionEvent arg0 ) { JPanel panel = ( ( CustomCardLayout ) content . getLayout ( ) ) . getCurrentCard ( content ) ; TexturePanel currentTexturePanel = panel = = atlasPanel ? atlasPanel . getCurrentRegionPanel ( ) : texturePanel ; listener . onRegionsSelected ( currentTexturePanel . selectedRegions ) ; } } ) ; selectAllButton . addActionListener ( new ActionListener ( ) { @Override public void actionPerformed ( ActionEvent arg0 ) { JPanel panel = ( ( CustomCardLayout ) content . getLayout ( ) ) . getCurrentCard ( content ) ; TexturePanel currentTexturePanel = panel = = atlasPanel ? atlasPanel . getCurrentRegionPanel ( ) : texturePanel ; currentTexturePanel . selectAll ( ) ; } } ) ; reverseButton . addActionListener ( new ActionListener ( ) { @Override public void actionPerformed ( ActionEvent arg0 ) { JPanel panel = ( ( CustomCardLayout ) content . getLayout ( ) ) . getCurrentCard ( content ) ; TexturePanel currentTexturePanel = panel = = atlasPanel ? atlasPanel . getCurrentRegionPanel ( ) : texturePanel ; currentTexturePanel . selectedRegions . reverse ( ) ; currentTexturePanel . revalidate ( ) ; currentTexturePanel . repaint ( ) ; } } ) ; clearButton . addActionListener ( new ActionListener ( ) { @Override public void actionPerformed ( ActionEvent arg0 ) { JPanel panel = ( ( CustomCardLayout ) content . getLayout ( ) ) . getCurrentCard ( content ) ; TexturePanel currentPanel = panel = = atlasPanel ? atlasPanel . getCurrentRegionPanel ( ) : texturePanel ; currentPanel . clearSelection ( ) ; } } ) ; generateButton . addActionListener ( new ActionListener ( ) { @Override public void actionPerformed ( ActionEvent arg0 ) { generateRegions ( ( GenerationMode ) generateBox . getSelectedItem ( ) ) ; texturePanel . revalidate ( ) ; texturePanel . repaint ( ) ; } } ) ; } void generateRegions ( GenerationMode mode ) { texturePanel . clear ( ) ; Texture texture = texturePanel . getTexture ( ) ; int rows = ( int ) rowSlider . getValue ( ) , columns = ( int ) columnSlider . getValue ( ) , yOffset = texture . getHeight ( ) / rows , xOffset = texture . getWidth ( ) / columns ; if ( mode = = GenerationMode . ByRows ) { for ( int j = <int> ; j < rows ; + + j ) { int rowOffset = j * yOffset ; for ( int i = <int> ; i < columns ; + + i ) { texturePanel . unselectedRegions . add ( new TextureRegion ( texture , i * xOffset , rowOffset , xOffset , yOffset ) ) ; } } } else if ( mode = = GenerationMode . ByColumns ) { for ( int i = <int> ; i < columns ; + + i ) { int columnOffset = i * xOffset ; for ( int j = <int> ; j < rows ; + + j ) { texturePanel . unselectedRegions . add ( new TextureRegion ( texture , columnOffset , j * yOffset , xOffset , yOffset ) ) ; } } } } public void setAtlas ( TextureAtlas atlas ) { atlasPanel . clearSelection ( ) ; atlasPanel . setAtlas ( atlas ) ; CustomCardLayout cardLayout = ( CustomCardLayout ) content . getLayout ( ) ; cardLayout . show ( content , <str> ) ; showGenerationPanel ( false ) ; content . revalidate ( ) ; content . repaint ( ) ; revalidate ( ) ; repaint ( ) ; } public void setTexture ( Texture texture ) { texturePanel . clearSelection ( ) ; texturePanel . setTexture ( texture ) ; CustomCardLayout cardLayout = ( CustomCardLayout ) content . getLayout ( ) ; cardLayout . show ( content , <str> ) ; showGenerationPanel ( true ) ; content . revalidate ( ) ; content . repaint ( ) ; revalidate ( ) ; repaint ( ) ; } private void showGenerationPanel ( boolean isShown ) { generationPanel . setVisible ( isShown ) ; } } 

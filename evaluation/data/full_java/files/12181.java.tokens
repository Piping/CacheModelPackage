package org . gradle . logging . internal ; import org . gradle . logging . internal . progress . ProgressOperation ; import org . gradle . logging . internal . progress . ProgressOperations ; public class ConsoleBackedProgressRenderer implements OutputEventListener { private final OutputEventListener listener ; private final Console console ; private final ProgressOperations operations = new ProgressOperations ( ) ; private final DefaultStatusBarFormatter statusBarFormatter ; private Label statusBar ; public ConsoleBackedProgressRenderer ( OutputEventListener listener , Console console , DefaultStatusBarFormatter statusBarFormatter ) { this . listener = listener ; this . console = console ; this . statusBarFormatter = statusBarFormatter ; } public void onOutput ( OutputEvent event ) { try { if ( event instanceof ProgressStartEvent ) { ProgressStartEvent startEvent = ( ProgressStartEvent ) event ; ProgressOperation op = operations . start ( startEvent . getShortDescription ( ) , startEvent . getStatus ( ) , startEvent . getOperationId ( ) , startEvent . getParentId ( ) ) ; updateText ( op ) ; } else if ( event instanceof ProgressCompleteEvent ) { ProgressOperation op = operations . complete ( ( ( ProgressCompleteEvent ) event ) . getOperationId ( ) ) ; updateText ( op . getParent ( ) ) ; } else if ( event instanceof ProgressEvent ) { ProgressEvent progressEvent = ( ProgressEvent ) event ; ProgressOperation op = operations . progress ( progressEvent . getStatus ( ) , progressEvent . getOperationId ( ) ) ; updateText ( op ) ; } listener . onOutput ( event ) ; } catch ( Exception e ) { throw new RuntimeException ( <str> + event + <str> + event . getClass ( ) . getSimpleName ( ) + <str> , e ) ; } } private void updateText ( ProgressOperation op ) { if ( statusBar = = null ) { statusBar = console . getStatusBar ( ) ; } statusBar . setText ( statusBarFormatter . format ( op ) ) ; } } 

package org . elasticsearch . index . query . functionscore ; import org . elasticsearch . index . query . functionscore . exp . ExponentialDecayFunctionBuilder ; import org . elasticsearch . index . query . functionscore . fieldvaluefactor . FieldValueFactorFunctionBuilder ; import org . elasticsearch . index . query . functionscore . gauss . GaussDecayFunctionBuilder ; import org . elasticsearch . index . query . functionscore . lin . LinearDecayFunctionBuilder ; import org . elasticsearch . index . query . functionscore . random . RandomScoreFunctionBuilder ; import org . elasticsearch . index . query . functionscore . script . ScriptScoreFunctionBuilder ; import org . elasticsearch . test . ESTestCase ; public class ScoreFunctionBuilderTests extends ESTestCase { public void testIllegalArguments ( ) { try { new RandomScoreFunctionBuilder ( ) . seed ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new ScriptScoreFunctionBuilder ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FieldValueFactorFunctionBuilder ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FieldValueFactorFunctionBuilder ( <str> ) . modifier ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new GaussDecayFunctionBuilder ( null , <str> , <str> , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new GaussDecayFunctionBuilder ( <str> , <str> , null , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new GaussDecayFunctionBuilder ( <str> , <str> , null , <str> , randomIntBetween ( <int> , <int> ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new GaussDecayFunctionBuilder ( <str> , <str> , null , <str> , randomIntBetween ( - <int> , - <int> ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new LinearDecayFunctionBuilder ( null , <str> , <str> , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new LinearDecayFunctionBuilder ( <str> , <str> , null , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new LinearDecayFunctionBuilder ( <str> , <str> , null , <str> , randomIntBetween ( <int> , <int> ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new LinearDecayFunctionBuilder ( <str> , <str> , null , <str> , randomIntBetween ( - <int> , - <int> ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new ExponentialDecayFunctionBuilder ( null , <str> , <str> , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new ExponentialDecayFunctionBuilder ( <str> , <str> , null , <str> ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new ExponentialDecayFunctionBuilder ( <str> , <str> , null , <str> , randomIntBetween ( <int> , <int> ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new ExponentialDecayFunctionBuilder ( <str> , <str> , null , <str> , randomIntBetween ( - <int> , - <int> ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } } 

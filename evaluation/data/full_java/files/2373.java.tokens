package org . nd4j . linalg . util ; import org . junit . Test ; import org . nd4j . linalg . util . NioUtil ; import java . nio . ByteBuffer ; import java . nio . DoubleBuffer ; import static org . junit . Assert . * ; public class NioUtilTests { public final static int ELEMENT_SIZE = <int> ; @Test public void testNioCopy ( ) { int smallerBufferLength = <int> ; int biggerBufferLength = <int> ; ByteBuffer elevens = ByteBuffer . allocate ( smallerBufferLength * ELEMENT_SIZE ) ; DoubleBuffer buf2 = elevens . asDoubleBuffer ( ) ; for ( int i = <int> ; i < smallerBufferLength ; i + + ) buf2 . put ( <float> ) ; for ( int i = <int> ; i < smallerBufferLength ; i + + ) { assertEquals ( <float> , buf2 . get ( i ) , <float> ) ; } ByteBuffer biggerBuffer = ByteBuffer . allocate ( biggerBufferLength * ELEMENT_SIZE ) ; DoubleBuffer buf3 = biggerBuffer . asDoubleBuffer ( ) ; for ( int i = <int> ; i < biggerBufferLength ; i + + ) { buf3 . put ( i ) ; } for ( int i = <int> ; i < biggerBufferLength ; i + + ) { assertEquals ( i , buf3 . get ( i ) , <float> ) ; } double [ ] expected = new double [ biggerBufferLength ] ; for ( int i = <int> ; i < expected . length ; i + + ) { if ( i % <int> = = <int> ) expected [ i ] = <float> ; else expected [ i ] = i ; } NioUtil . copyAtStride ( <int> , NioUtil . BufferType . DOUBLE , elevens , <int> , <int> , biggerBuffer , <int> , <int> ) ; for ( int i = <int> ; i < expected . length ; i + + ) { assertEquals ( expected [ i ] , buf3 . get ( i ) , <float> ) ; } } } 

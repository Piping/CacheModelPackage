package org . elasticsearch . document ; import org . elasticsearch . cluster . health . ClusterHealthStatus ; import org . elasticsearch . action . admin . indices . cache . clear . ClearIndicesCacheResponse ; import org . elasticsearch . action . admin . indices . flush . FlushResponse ; import org . elasticsearch . action . admin . indices . forcemerge . ForceMergeResponse ; import org . elasticsearch . action . admin . indices . refresh . RefreshResponse ; import org . elasticsearch . action . bulk . BulkResponse ; import org . elasticsearch . action . delete . DeleteResponse ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . test . ESIntegTestCase ; import java . io . IOException ; import static org . elasticsearch . client . Requests . clearIndicesCacheRequest ; import static org . elasticsearch . client . Requests . getRequest ; import static org . elasticsearch . client . Requests . indexRequest ; import static org . elasticsearch . client . Requests . refreshRequest ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; public class DocumentActionsIT extends ESIntegTestCase { protected void createIndex ( ) { createIndex ( getConcreteIndexName ( ) ) ; } protected String getConcreteIndexName ( ) { return <str> ; } public void testIndexActions ( ) throws Exception { createIndex ( ) ; NumShards numShards = getNumShards ( getConcreteIndexName ( ) ) ; logger . info ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; IndexResponse indexResponse = client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setSource ( source ( <str> , <str> ) ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; assertThat ( indexResponse . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( indexResponse . getId ( ) , equalTo ( <str> ) ) ; assertThat ( indexResponse . getType ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; RefreshResponse refreshResponse = refresh ( ) ; assertThat ( refreshResponse . getSuccessfulShards ( ) , equalTo ( numShards . totalNumShards ) ) ; logger . info ( <str> ) ; assertThat ( indexExists ( getConcreteIndexName ( ) ) , equalTo ( true ) ) ; logger . info ( <str> ) ; assertThat ( indexExists ( <str> ) , equalTo ( false ) ) ; logger . info ( <str> ) ; ClearIndicesCacheResponse clearIndicesCacheResponse = client ( ) . admin ( ) . indices ( ) . clearCache ( clearIndicesCacheRequest ( <str> ) . recycler ( true ) . fieldDataCache ( true ) . queryCache ( true ) ) . actionGet ( ) ; assertNoFailures ( clearIndicesCacheResponse ) ; assertThat ( clearIndicesCacheResponse . getSuccessfulShards ( ) , equalTo ( numShards . totalNumShards ) ) ; logger . info ( <str> ) ; waitForRelocation ( ClusterHealthStatus . GREEN ) ; ForceMergeResponse mergeResponse = forceMerge ( ) ; assertThat ( mergeResponse . getSuccessfulShards ( ) , equalTo ( numShards . totalNumShards ) ) ; GetResponse getResult ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { getResult = client ( ) . prepareGet ( <str> , <str> , <str> ) . setOperationThreaded ( false ) . execute ( ) . actionGet ( ) ; assertThat ( getResult . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( <str> + i , getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) . string ( ) ) ) ; assertThat ( <str> + i , ( String ) getResult . getSourceAsMap ( ) . get ( <str> ) , equalTo ( <str> ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) . operationThreaded ( true ) ) . actionGet ( ) ; assertThat ( <str> + i , getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) . string ( ) ) ) ; assertThat ( getResult . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { getResult = client ( ) . prepareGet ( <str> , <str> , <str> ) . setFields ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResult . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( getResult . isExists ( ) , equalTo ( true ) ) ; assertThat ( getResult . getSourceAsBytes ( ) , nullValue ( ) ) ; assertThat ( getResult . getField ( <str> ) . getValues ( ) . get ( <int> ) . toString ( ) , equalTo ( <str> ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . actionGet ( ) ; assertThat ( getResult . isExists ( ) , equalTo ( false ) ) ; } logger . info ( <str> ) ; DeleteResponse deleteResponse = client ( ) . prepareDelete ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; assertThat ( deleteResponse . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( deleteResponse . getId ( ) , equalTo ( <str> ) ) ; assertThat ( deleteResponse . getType ( ) , equalTo ( <str> ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . refresh ( refreshRequest ( <str> ) ) . actionGet ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . actionGet ( ) ; assertThat ( getResult . isExists ( ) , equalTo ( false ) ) ; } logger . info ( <str> ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( source ( <str> , <str> ) ) ) . actionGet ( ) ; logger . info ( <str> ) ; client ( ) . index ( indexRequest ( <str> ) . type ( <str> ) . id ( <str> ) . source ( source ( <str> , <str> ) ) ) . actionGet ( ) ; logger . info ( <str> ) ; FlushResponse flushResult = client ( ) . admin ( ) . indices ( ) . prepareFlush ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( flushResult . getSuccessfulShards ( ) , equalTo ( numShards . totalNumShards ) ) ; assertThat ( flushResult . getFailedShards ( ) , equalTo ( <int> ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . refresh ( refreshRequest ( <str> ) ) . actionGet ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . actionGet ( ) ; assertThat ( getResult . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( <str> + i , getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) . string ( ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . actionGet ( ) ; String ste1 = getResult . getSourceAsString ( ) ; String ste2 = source ( <str> , <str> ) . string ( ) ; assertThat ( <str> + i , ste1 , equalTo ( ste2 ) ) ; assertThat ( getResult . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; } logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { SearchResponse countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . setQuery ( termQuery ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; assertNoFailures ( countResponse ) ; assertThat ( countResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( countResponse . getSuccessfulShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( countResponse . getFailedShards ( ) , equalTo ( <int> ) ) ; countResponse = client ( ) . prepareSearch ( <str> ) . setSize ( <int> ) . execute ( ) . actionGet ( ) ; assertThat ( <str> + countResponse . getShardFailures ( ) , countResponse . getShardFailures ( ) = = null ? <int> : countResponse . getShardFailures ( ) . length , equalTo ( <int> ) ) ; assertThat ( countResponse . getHits ( ) . totalHits ( ) , equalTo ( <int> ) ) ; assertThat ( countResponse . getSuccessfulShards ( ) , equalTo ( numShards . numPrimaries ) ) ; assertThat ( countResponse . getFailedShards ( ) , equalTo ( <int> ) ) ; } } public void testBulk ( ) throws Exception { createIndex ( ) ; NumShards numShards = getNumShards ( getConcreteIndexName ( ) ) ; logger . info ( <str> ) ; ensureGreen ( ) ; BulkResponse bulkResponse = client ( ) . prepareBulk ( ) . add ( client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setSource ( source ( <str> , <str> ) ) ) . add ( client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) . setSource ( source ( <str> , <str> ) ) . setCreate ( true ) ) . add ( client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setSource ( source ( <str> , <str> ) ) ) . add ( client ( ) . prepareDelete ( ) . setIndex ( <str> ) . setType ( <str> ) . setId ( <str> ) ) . add ( client ( ) . prepareIndex ( ) . setIndex ( <str> ) . setType ( <str> ) . setSource ( <str> ) ) . execute ( ) . actionGet ( ) ; assertThat ( bulkResponse . hasFailures ( ) , equalTo ( true ) ) ; assertThat ( bulkResponse . getItems ( ) . length , equalTo ( <int> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getOpType ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getType ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getOpType ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getType ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getOpType ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getType ( ) , equalTo ( <str> ) ) ; String generatedId3 = bulkResponse . getItems ( ) [ <int> ] . getId ( ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( false ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getOpType ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getType ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getId ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . isFailed ( ) , equalTo ( true ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getOpType ( ) , equalTo ( <str> ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( bulkResponse . getItems ( ) [ <int> ] . getType ( ) , equalTo ( <str> ) ) ; waitForRelocation ( ClusterHealthStatus . GREEN ) ; RefreshResponse refreshResponse = client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . execute ( ) . actionGet ( ) ; assertNoFailures ( refreshResponse ) ; assertThat ( refreshResponse . getSuccessfulShards ( ) , equalTo ( numShards . totalNumShards ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { GetResponse getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . actionGet ( ) ; assertThat ( getResult . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; assertThat ( <str> + i , getResult . isExists ( ) , equalTo ( false ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( <str> ) ) . actionGet ( ) ; assertThat ( <str> + i , getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) . string ( ) ) ) ; assertThat ( getResult . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; getResult = client ( ) . get ( getRequest ( <str> ) . type ( <str> ) . id ( generatedId3 ) ) . actionGet ( ) ; assertThat ( <str> + i , getResult . getSourceAsString ( ) , equalTo ( source ( <str> , <str> ) . string ( ) ) ) ; assertThat ( getResult . getIndex ( ) , equalTo ( getConcreteIndexName ( ) ) ) ; } } private XContentBuilder source ( String id , String nameValue ) throws IOException { return XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , id ) . field ( <str> , nameValue ) . endObject ( ) ; } } 

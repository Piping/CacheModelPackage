package com . google . common . cache ; import static com . google . common . cache . CacheTesting . checkEmpty ; import static com . google . common . cache . TestingCacheLoaders . constantLoader ; import static com . google . common . cache . TestingCacheLoaders . exceptionLoader ; import static com . google . common . cache . TestingRemovalListeners . queuingRemovalListener ; import static java . util . concurrent . TimeUnit . SECONDS ; import com . google . common . cache . CacheLoader . InvalidCacheLoadException ; import com . google . common . cache . TestingRemovalListeners . QueuingRemovalListener ; import com . google . common . util . concurrent . UncheckedExecutionException ; import junit . framework . TestCase ; public class NullCacheTest extends TestCase { QueuingRemovalListener < Object , Object > listener ; @Override protected void setUp ( ) { listener = queuingRemovalListener ( ) ; } public void testGet ( ) { Object computed = new Object ( ) ; LoadingCache < Object , Object > cache = CacheBuilder . newBuilder ( ) . maximumSize ( <int> ) . removalListener ( listener ) . build ( constantLoader ( computed ) ) ; Object key = new Object ( ) ; assertSame ( computed , cache . getUnchecked ( key ) ) ; RemovalNotification < Object , Object > notification = listener . remove ( ) ; assertSame ( key , notification . getKey ( ) ) ; assertSame ( computed , notification . getValue ( ) ) ; assertSame ( RemovalCause . SIZE , notification . getCause ( ) ) ; assertTrue ( listener . isEmpty ( ) ) ; checkEmpty ( cache ) ; } public void testGet_expireAfterWrite ( ) { Object computed = new Object ( ) ; LoadingCache < Object , Object > cache = CacheBuilder . newBuilder ( ) . expireAfterWrite ( <int> , SECONDS ) . removalListener ( listener ) . build ( constantLoader ( computed ) ) ; Object key = new Object ( ) ; assertSame ( computed , cache . getUnchecked ( key ) ) ; RemovalNotification < Object , Object > notification = listener . remove ( ) ; assertSame ( key , notification . getKey ( ) ) ; assertSame ( computed , notification . getValue ( ) ) ; assertSame ( RemovalCause . SIZE , notification . getCause ( ) ) ; assertTrue ( listener . isEmpty ( ) ) ; checkEmpty ( cache ) ; } public void testGet_expireAfterAccess ( ) { Object computed = new Object ( ) ; LoadingCache < Object , Object > cache = CacheBuilder . newBuilder ( ) . expireAfterAccess ( <int> , SECONDS ) . removalListener ( listener ) . build ( constantLoader ( computed ) ) ; Object key = new Object ( ) ; assertSame ( computed , cache . getUnchecked ( key ) ) ; RemovalNotification < Object , Object > notification = listener . remove ( ) ; assertSame ( key , notification . getKey ( ) ) ; assertSame ( computed , notification . getValue ( ) ) ; assertSame ( RemovalCause . SIZE , notification . getCause ( ) ) ; assertTrue ( listener . isEmpty ( ) ) ; checkEmpty ( cache ) ; } public void testGet_computeNull ( ) { LoadingCache < Object , Object > cache = CacheBuilder . newBuilder ( ) . maximumSize ( <int> ) . removalListener ( listener ) . build ( constantLoader ( null ) ) ; try { cache . getUnchecked ( new Object ( ) ) ; fail ( ) ; } catch ( InvalidCacheLoadException e ) { } assertTrue ( listener . isEmpty ( ) ) ; checkEmpty ( cache ) ; } public void testGet_runtimeException ( ) { final RuntimeException e = new RuntimeException ( ) ; LoadingCache < Object , Object > map = CacheBuilder . newBuilder ( ) . maximumSize ( <int> ) . removalListener ( listener ) . build ( exceptionLoader ( e ) ) ; try { map . getUnchecked ( new Object ( ) ) ; fail ( ) ; } catch ( UncheckedExecutionException uee ) { assertSame ( e , uee . getCause ( ) ) ; } assertTrue ( listener . isEmpty ( ) ) ; checkEmpty ( map ) ; } } 

package org . apache . cassandra . utils ; import java . util . Iterator ; import java . util . NoSuchElementException ; import com . google . common . collect . PeekingIterator ; public abstract class AbstractIterator < V > implements Iterator < V > , PeekingIterator < V > { private static enum State { MUST_FETCH , HAS_NEXT , DONE , FAILED } private State state = State . MUST_FETCH ; private V next ; protected V endOfData ( ) { state = State . DONE ; return null ; } protected abstract V computeNext ( ) ; public boolean hasNext ( ) { switch ( state ) { case MUST_FETCH : state = State . FAILED ; next = computeNext ( ) ; default: if ( state = = State . DONE ) return false ; state = State . HAS_NEXT ; return true ; case FAILED : throw new IllegalStateException ( ) ; } } public V next ( ) { if ( state ! = State . HAS_NEXT & & ! hasNext ( ) ) throw new NoSuchElementException ( ) ; state = State . MUST_FETCH ; V result = next ; next = null ; return result ; } public V peek ( ) { if ( ! hasNext ( ) ) throw new NoSuchElementException ( ) ; return next ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } 

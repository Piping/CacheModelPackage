package org . gradle . api . internal . artifacts . ivyservice . dependencysubstitution ; import org . gradle . api . artifacts . ModuleVersionSelector ; import org . gradle . api . artifacts . component . ModuleComponentSelector ; import org . gradle . api . artifacts . result . ComponentSelectionReason ; import org . gradle . api . internal . artifacts . DefaultModuleVersionSelector ; import org . gradle . api . internal . artifacts . DependencyResolveDetailsInternal ; import org . gradle . api . internal . artifacts . DependencySubstitutionInternal ; import org . gradle . api . internal . artifacts . dsl . ModuleVersionSelectorParsers ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . result . VersionSelectionReasons ; import org . gradle . internal . component . external . model . DefaultModuleComponentSelector ; public class DefaultDependencyResolveDetails implements DependencyResolveDetailsInternal { private final DependencySubstitutionInternal delegate ; private ModuleVersionSelector target ; public DefaultDependencyResolveDetails ( DependencySubstitutionInternal delegate ) { this . delegate = delegate ; target = determineTarget ( delegate ) ; } private static ModuleVersionSelector determineTarget ( DependencySubstitutionInternal delegate ) { if ( delegate . getTarget ( ) instanceof ModuleComponentSelector ) { ModuleComponentSelector moduleComponentSelector = ( ModuleComponentSelector ) delegate . getTarget ( ) ; return DefaultModuleVersionSelector . newSelector ( moduleComponentSelector . getGroup ( ) , moduleComponentSelector . getModule ( ) , moduleComponentSelector . getVersion ( ) ) ; } return delegate . getOldRequested ( ) ; } @Override public ModuleVersionSelector getRequested ( ) { return delegate . getOldRequested ( ) ; } @Override public void useVersion ( String version ) { useVersion ( version , VersionSelectionReasons . SELECTED_BY_RULE ) ; } @Override public void useVersion ( String version , ComponentSelectionReason selectionReason ) { assert selectionReason ! = null ; if ( version = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( ! version . equals ( target . getVersion ( ) ) ) { target = DefaultModuleVersionSelector . newSelector ( target . getGroup ( ) , target . getName ( ) , version ) ; delegate . useTarget ( DefaultModuleComponentSelector . newSelector ( target ) , selectionReason ) ; } else { delegate . useTarget ( delegate . getTarget ( ) , selectionReason ) ; } } @Override public void useTarget ( Object notation ) { target = ModuleVersionSelectorParsers . parser ( ) . parseNotation ( notation ) ; delegate . useTarget ( DefaultModuleComponentSelector . newSelector ( target ) , VersionSelectionReasons . SELECTED_BY_RULE ) ; } @Override public ComponentSelectionReason getSelectionReason ( ) { return delegate . getSelectionReason ( ) ; } @Override public ModuleVersionSelector getTarget ( ) { return target ; } @Override public boolean isUpdated ( ) { return delegate . isUpdated ( ) ; } } 

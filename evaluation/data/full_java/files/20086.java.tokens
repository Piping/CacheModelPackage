package io . netty . microbench . util ; import static org . junit . Assert . assertNull ; import io . netty . util . ResourceLeakDetector ; import io . netty . util . internal . SystemPropertyUtil ; import java . io . File ; import org . junit . Test ; import org . openjdk . jmh . annotations . Measurement ; import org . openjdk . jmh . annotations . Scope ; import org . openjdk . jmh . annotations . State ; import org . openjdk . jmh . annotations . Warmup ; import org . openjdk . jmh . results . format . ResultFormatType ; import org . openjdk . jmh . runner . Runner ; import org . openjdk . jmh . runner . options . ChainedOptionsBuilder ; import org . openjdk . jmh . runner . options . OptionsBuilder ; @Warmup ( iterations = AbstractMicrobenchmarkBase . DEFAULT_WARMUP_ITERATIONS ) @Measurement ( iterations = AbstractMicrobenchmarkBase . DEFAULT_MEASURE_ITERATIONS ) @State ( Scope . Thread ) public abstract class AbstractMicrobenchmarkBase { protected static final int DEFAULT_WARMUP_ITERATIONS = <int> ; protected static final int DEFAULT_MEASURE_ITERATIONS = <int> ; protected static final String [ ] BASE_JVM_ARGS = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; static { ResourceLeakDetector . setLevel ( ResourceLeakDetector . Level . DISABLED ) ; } protected ChainedOptionsBuilder newOptionsBuilder ( ) throws Exception { String className = getClass ( ) . getSimpleName ( ) ; ChainedOptionsBuilder runnerOptions = new OptionsBuilder ( ) . include ( <str> + className + <str> ) . jvmArgs ( jvmArgs ( ) ) ; if ( getWarmupIterations ( ) > <int> ) { runnerOptions . warmupIterations ( getWarmupIterations ( ) ) ; } if ( getMeasureIterations ( ) > <int> ) { runnerOptions . measurementIterations ( getMeasureIterations ( ) ) ; } if ( getReportDir ( ) ! = null ) { String filePath = getReportDir ( ) + className + <str> ; File file = new File ( filePath ) ; if ( file . exists ( ) ) { file . delete ( ) ; } else { file . getParentFile ( ) . mkdirs ( ) ; file . createNewFile ( ) ; } runnerOptions . resultFormat ( ResultFormatType . JSON ) ; runnerOptions . result ( filePath ) ; } return runnerOptions ; } protected abstract String [ ] jvmArgs ( ) ; @Test public void run ( ) throws Exception { new Runner ( newOptionsBuilder ( ) . build ( ) ) . run ( ) ; } protected int getWarmupIterations ( ) { return SystemPropertyUtil . getInt ( <str> , - <int> ) ; } protected int getMeasureIterations ( ) { return SystemPropertyUtil . getInt ( <str> , - <int> ) ; } protected String getReportDir ( ) { return SystemPropertyUtil . get ( <str> ) ; } public static void handleUnexpectedException ( Throwable t ) { assertNull ( t ) ; } } 

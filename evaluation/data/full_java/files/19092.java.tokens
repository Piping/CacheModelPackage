package io . netty . handler . codec . http ; import io . netty . util . concurrent . FastThreadLocal ; import java . text . ParsePosition ; import java . text . SimpleDateFormat ; import java . util . Date ; import java . util . Locale ; import java . util . TimeZone ; public final class HttpHeaderDateFormat extends SimpleDateFormat { private static final long serialVersionUID = - <int> ; private final SimpleDateFormat format1 = new HttpHeaderDateFormatObsolete1 ( ) ; private final SimpleDateFormat format2 = new HttpHeaderDateFormatObsolete2 ( ) ; private static final FastThreadLocal < HttpHeaderDateFormat > dateFormatThreadLocal = new FastThreadLocal < HttpHeaderDateFormat > ( ) { @Override protected HttpHeaderDateFormat initialValue ( ) { return new HttpHeaderDateFormat ( ) ; } } ; public static HttpHeaderDateFormat get ( ) { return dateFormatThreadLocal . get ( ) ; } private HttpHeaderDateFormat ( ) { super ( <str> , Locale . ENGLISH ) ; setTimeZone ( TimeZone . getTimeZone ( <str> ) ) ; } @Override public Date parse ( String text , ParsePosition pos ) { Date date = super . parse ( text , pos ) ; if ( date = = null ) { date = format1 . parse ( text , pos ) ; } if ( date = = null ) { date = format2 . parse ( text , pos ) ; } return date ; } private static final class HttpHeaderDateFormatObsolete1 extends SimpleDateFormat { private static final long serialVersionUID = - <int> ; HttpHeaderDateFormatObsolete1 ( ) { super ( <str> , Locale . ENGLISH ) ; setTimeZone ( TimeZone . getTimeZone ( <str> ) ) ; } } private static final class HttpHeaderDateFormatObsolete2 extends SimpleDateFormat { private static final long serialVersionUID = <int> ; HttpHeaderDateFormatObsolete2 ( ) { super ( <str> , Locale . ENGLISH ) ; setTimeZone ( TimeZone . getTimeZone ( <str> ) ) ; } } } 

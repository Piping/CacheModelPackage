package org . nd4j . bytebuddy . arrays . create . relative ; import net . bytebuddy . dynamic . scaffold . InstrumentedType ; import net . bytebuddy . implementation . Implementation ; import net . bytebuddy . implementation . bytecode . ByteCodeAppender ; import net . bytebuddy . implementation . bytecode . StackManipulation ; import net . bytebuddy . implementation . bytecode . collection . ArrayFactory ; import net . bytebuddy . implementation . bytecode . constant . IntegerConstant ; import net . bytebuddy . pool . TypePool ; import java . util . ArrayList ; import java . util . List ; public class RelativeIntArrayCreation implements Implementation { private int length = <int> ; private static TypePool typePool = TypePool . Default . ofClassPath ( ) ; private static ArrayFactory factory = ArrayFactory . forType ( typePool . describe ( <str> ) . resolve ( ) ) ; public RelativeIntArrayCreation ( int length ) { this . length = length ; } @Override public InstrumentedType prepare ( InstrumentedType instrumentedType ) { return instrumentedType ; } @Override public ByteCodeAppender appender ( Target implementationTarget ) { return new RelativeCreateArrayByteCodeAppender ( length ) ; } public static StackManipulation intCreationOfLength ( int length ) { List < StackManipulation > manipulations = new ArrayList < > ( ) ; for ( int i = <int> ; i < length ; i + + ) manipulations . add ( IntegerConstant . forValue ( <int> ) ) ; StackManipulation createArray = factory . withValues ( manipulations ) ; return createArray ; } } 

package com . google . common . primitives ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . testing . NullPointerTester ; import com . google . common . testing . SerializableTester ; import junit . framework . TestCase ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . List ; @GwtCompatible ( emulated = true ) public class BooleansTest extends TestCase { private static final boolean [ ] EMPTY = { } ; private static final boolean [ ] ARRAY_FALSE = { false } ; private static final boolean [ ] ARRAY_TRUE = { true } ; private static final boolean [ ] ARRAY_FALSE_FALSE = { false , false } ; private static final boolean [ ] ARRAY_FALSE_TRUE = { false , true } ; private static final boolean [ ] VALUES = { false , true } ; public void testHashCode ( ) { assertEquals ( Boolean . TRUE . hashCode ( ) , Booleans . hashCode ( true ) ) ; assertEquals ( Boolean . FALSE . hashCode ( ) , Booleans . hashCode ( false ) ) ; } public void testCompare ( ) { for ( boolean x : VALUES ) { for ( boolean y : VALUES ) { assertEquals ( x + <str> + y , Boolean . valueOf ( x ) . compareTo ( y ) , Booleans . compare ( x , y ) ) ; } } } public void testContains ( ) { assertFalse ( Booleans . contains ( EMPTY , false ) ) ; assertFalse ( Booleans . contains ( ARRAY_FALSE , true ) ) ; assertTrue ( Booleans . contains ( ARRAY_FALSE , false ) ) ; assertTrue ( Booleans . contains ( ARRAY_FALSE_TRUE , false ) ) ; assertTrue ( Booleans . contains ( ARRAY_FALSE_TRUE , true ) ) ; } public void testIndexOf ( ) { assertEquals ( - <int> , Booleans . indexOf ( EMPTY , ARRAY_FALSE ) ) ; assertEquals ( - <int> , Booleans . indexOf ( ARRAY_FALSE , ARRAY_FALSE_TRUE ) ) ; assertEquals ( <int> , Booleans . indexOf ( ARRAY_FALSE_FALSE , ARRAY_FALSE ) ) ; assertEquals ( <int> , Booleans . indexOf ( ARRAY_FALSE , ARRAY_FALSE ) ) ; assertEquals ( <int> , Booleans . indexOf ( ARRAY_FALSE_TRUE , ARRAY_FALSE ) ) ; assertEquals ( <int> , Booleans . indexOf ( ARRAY_FALSE_TRUE , ARRAY_TRUE ) ) ; assertEquals ( <int> , Booleans . indexOf ( ARRAY_TRUE , new boolean [ <int> ] ) ) ; } public void testIndexOf_arrays ( ) { assertEquals ( - <int> , Booleans . indexOf ( EMPTY , false ) ) ; assertEquals ( - <int> , Booleans . indexOf ( ARRAY_FALSE , true ) ) ; assertEquals ( - <int> , Booleans . indexOf ( ARRAY_FALSE_FALSE , true ) ) ; assertEquals ( <int> , Booleans . indexOf ( ARRAY_FALSE , false ) ) ; assertEquals ( <int> , Booleans . indexOf ( ARRAY_FALSE_TRUE , false ) ) ; assertEquals ( <int> , Booleans . indexOf ( ARRAY_FALSE_TRUE , true ) ) ; assertEquals ( <int> , Booleans . indexOf ( new boolean [ ] { false , false , true } , true ) ) ; } public void testLastIndexOf ( ) { assertEquals ( - <int> , Booleans . lastIndexOf ( EMPTY , false ) ) ; assertEquals ( - <int> , Booleans . lastIndexOf ( ARRAY_FALSE , true ) ) ; assertEquals ( - <int> , Booleans . lastIndexOf ( ARRAY_FALSE_FALSE , true ) ) ; assertEquals ( <int> , Booleans . lastIndexOf ( ARRAY_FALSE , false ) ) ; assertEquals ( <int> , Booleans . lastIndexOf ( ARRAY_FALSE_TRUE , false ) ) ; assertEquals ( <int> , Booleans . lastIndexOf ( ARRAY_FALSE_TRUE , true ) ) ; assertEquals ( <int> , Booleans . lastIndexOf ( new boolean [ ] { false , true , true } , true ) ) ; } public void testConcat ( ) { assertTrue ( Arrays . equals ( EMPTY , Booleans . concat ( ) ) ) ; assertTrue ( Arrays . equals ( EMPTY , Booleans . concat ( EMPTY ) ) ) ; assertTrue ( Arrays . equals ( EMPTY , Booleans . concat ( EMPTY , EMPTY , EMPTY ) ) ) ; assertTrue ( Arrays . equals ( ARRAY_FALSE , Booleans . concat ( ARRAY_FALSE ) ) ) ; assertNotSame ( ARRAY_FALSE , Booleans . concat ( ARRAY_FALSE ) ) ; assertTrue ( Arrays . equals ( ARRAY_FALSE , Booleans . concat ( EMPTY , ARRAY_FALSE , EMPTY ) ) ) ; assertTrue ( Arrays . equals ( new boolean [ ] { false , false , false } , Booleans . concat ( ARRAY_FALSE , ARRAY_FALSE , ARRAY_FALSE ) ) ) ; assertTrue ( Arrays . equals ( new boolean [ ] { false , false , true } , Booleans . concat ( ARRAY_FALSE , ARRAY_FALSE_TRUE ) ) ) ; } public void testEnsureCapacity ( ) { assertSame ( EMPTY , Booleans . ensureCapacity ( EMPTY , <int> , <int> ) ) ; assertSame ( ARRAY_FALSE , Booleans . ensureCapacity ( ARRAY_FALSE , <int> , <int> ) ) ; assertSame ( ARRAY_FALSE , Booleans . ensureCapacity ( ARRAY_FALSE , <int> , <int> ) ) ; assertTrue ( Arrays . equals ( new boolean [ ] { true , false , false } , Booleans . ensureCapacity ( new boolean [ ] { true } , <int> , <int> ) ) ) ; } @SuppressWarnings ( <str> ) public void testEnsureCapacity_fail ( ) { try { Booleans . ensureCapacity ( ARRAY_FALSE , - <int> , <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } try { Booleans . ensureCapacity ( ARRAY_FALSE , <int> , - <int> ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } public void testJoin ( ) { assertEquals ( <str> , Booleans . join ( <str> , EMPTY ) ) ; assertEquals ( <str> , Booleans . join ( <str> , ARRAY_FALSE ) ) ; assertEquals ( <str> , Booleans . join ( <str> , false , true ) ) ; assertEquals ( <str> , Booleans . join ( <str> , false , true , false ) ) ; } public void testLexicographicalComparator ( ) { List < boolean [ ] > ordered = Arrays . asList ( new boolean [ ] { } , new boolean [ ] { false } , new boolean [ ] { false , false } , new boolean [ ] { false , true } , new boolean [ ] { true } , new boolean [ ] { true , false } , new boolean [ ] { true , true } , new boolean [ ] { true , true , true } ) ; Comparator < boolean [ ] > comparator = Booleans . lexicographicalComparator ( ) ; Helpers . testComparator ( comparator , ordered ) ; } @GwtIncompatible ( <str> ) public void testLexicographicalComparatorSerializable ( ) { Comparator < boolean [ ] > comparator = Booleans . lexicographicalComparator ( ) ; assertSame ( comparator , SerializableTester . reserialize ( comparator ) ) ; } public void testToArray ( ) { List < Boolean > none = Arrays . < Boolean > asList ( ) ; assertTrue ( Arrays . equals ( EMPTY , Booleans . toArray ( none ) ) ) ; List < Boolean > one = Arrays . asList ( false ) ; assertTrue ( Arrays . equals ( ARRAY_FALSE , Booleans . toArray ( one ) ) ) ; boolean [ ] array = { false , false , true } ; List < Boolean > three = Arrays . asList ( false , false , true ) ; assertTrue ( Arrays . equals ( array , Booleans . toArray ( three ) ) ) ; assertTrue ( Arrays . equals ( array , Booleans . toArray ( Booleans . asList ( array ) ) ) ) ; } public void testToArray_threadSafe ( ) { boolean [ ] VALUES = BooleansTest . VALUES ; VALUES = Booleans . concat ( VALUES , VALUES ) ; for ( int delta : new int [ ] { + <int> , <int> , - <int> } ) { for ( int i = <int> ; i < VALUES . length ; i + + ) { List < Boolean > list = Booleans . asList ( VALUES ) . subList ( <int> , i ) ; Collection < Boolean > misleadingSize = Helpers . misleadingSizeCollection ( delta ) ; misleadingSize . addAll ( list ) ; boolean [ ] arr = Booleans . toArray ( misleadingSize ) ; assertEquals ( i , arr . length ) ; for ( int j = <int> ; j < i ; j + + ) { assertEquals ( VALUES [ j ] , arr [ j ] ) ; } } } } @SuppressWarnings ( <str> ) public void testToArray_withNull ( ) { List < Boolean > list = Arrays . asList ( false , true , null ) ; try { Booleans . toArray ( list ) ; fail ( ) ; } catch ( NullPointerException expected ) { } } public void testAsListIsEmpty ( ) { assertTrue ( Booleans . asList ( EMPTY ) . isEmpty ( ) ) ; assertFalse ( Booleans . asList ( ARRAY_FALSE ) . isEmpty ( ) ) ; } public void testAsListSize ( ) { assertEquals ( <int> , Booleans . asList ( EMPTY ) . size ( ) ) ; assertEquals ( <int> , Booleans . asList ( ARRAY_FALSE ) . size ( ) ) ; assertEquals ( <int> , Booleans . asList ( ARRAY_FALSE_TRUE ) . size ( ) ) ; } public void testAsListIndexOf ( ) { assertEquals ( - <int> , Booleans . asList ( EMPTY ) . indexOf ( ( Object ) <str> ) ) ; assertEquals ( - <int> , Booleans . asList ( EMPTY ) . indexOf ( true ) ) ; assertEquals ( - <int> , Booleans . asList ( ARRAY_FALSE ) . indexOf ( true ) ) ; assertEquals ( <int> , Booleans . asList ( ARRAY_FALSE ) . indexOf ( false ) ) ; assertEquals ( <int> , Booleans . asList ( ARRAY_FALSE_TRUE ) . indexOf ( true ) ) ; } public void testAsListLastIndexOf ( ) { assertEquals ( - <int> , Booleans . asList ( EMPTY ) . lastIndexOf ( ( Object ) <str> ) ) ; assertEquals ( - <int> , Booleans . asList ( EMPTY ) . lastIndexOf ( true ) ) ; assertEquals ( - <int> , Booleans . asList ( ARRAY_FALSE ) . lastIndexOf ( true ) ) ; assertEquals ( <int> , Booleans . asList ( ARRAY_FALSE_TRUE ) . lastIndexOf ( true ) ) ; assertEquals ( <int> , Booleans . asList ( ARRAY_FALSE_FALSE ) . lastIndexOf ( false ) ) ; } public void testAsListContains ( ) { assertFalse ( Booleans . asList ( EMPTY ) . contains ( ( Object ) <str> ) ) ; assertFalse ( Booleans . asList ( EMPTY ) . contains ( true ) ) ; assertFalse ( Booleans . asList ( ARRAY_FALSE ) . contains ( true ) ) ; assertTrue ( Booleans . asList ( ARRAY_TRUE ) . contains ( true ) ) ; assertTrue ( Booleans . asList ( ARRAY_FALSE_TRUE ) . contains ( false ) ) ; assertTrue ( Booleans . asList ( ARRAY_FALSE_TRUE ) . contains ( true ) ) ; } public void testAsListEquals ( ) { assertEquals ( Booleans . asList ( EMPTY ) , Collections . emptyList ( ) ) ; assertEquals ( Booleans . asList ( ARRAY_FALSE ) , Booleans . asList ( ARRAY_FALSE ) ) ; assertFalse ( Booleans . asList ( ARRAY_FALSE ) . equals ( ARRAY_FALSE ) ) ; assertFalse ( Booleans . asList ( ARRAY_FALSE ) . equals ( null ) ) ; assertFalse ( Booleans . asList ( ARRAY_FALSE ) . equals ( Booleans . asList ( ARRAY_FALSE_TRUE ) ) ) ; assertFalse ( Booleans . asList ( ARRAY_FALSE_FALSE ) . equals ( Booleans . asList ( ARRAY_FALSE_TRUE ) ) ) ; assertEquals ( <int> , Booleans . asList ( ARRAY_FALSE_TRUE ) . lastIndexOf ( true ) ) ; List < Boolean > reference = Booleans . asList ( ARRAY_FALSE ) ; assertEquals ( Booleans . asList ( ARRAY_FALSE ) , reference ) ; assertEquals ( reference , reference ) ; } public void testAsListHashcode ( ) { assertEquals ( <int> , Booleans . asList ( EMPTY ) . hashCode ( ) ) ; assertEquals ( Booleans . asList ( ARRAY_FALSE ) . hashCode ( ) , Booleans . asList ( ARRAY_FALSE ) . hashCode ( ) ) ; List < Boolean > reference = Booleans . asList ( ARRAY_FALSE ) ; assertEquals ( Booleans . asList ( ARRAY_FALSE ) . hashCode ( ) , reference . hashCode ( ) ) ; } public void testAsListToString ( ) { assertEquals ( <str> , Booleans . asList ( ARRAY_FALSE ) . toString ( ) ) ; assertEquals ( <str> , Booleans . asList ( ARRAY_FALSE_TRUE ) . toString ( ) ) ; } public void testAsListSet ( ) { List < Boolean > list = Booleans . asList ( ARRAY_FALSE ) ; assertFalse ( list . set ( <int> , true ) ) ; assertTrue ( list . set ( <int> , false ) ) ; try { list . set ( <int> , null ) ; fail ( ) ; } catch ( NullPointerException expected ) { } try { list . set ( <int> , true ) ; fail ( ) ; } catch ( IndexOutOfBoundsException expected ) { } } public void testCountTrue ( ) { assertEquals ( <int> , Booleans . countTrue ( ) ) ; assertEquals ( <int> , Booleans . countTrue ( false ) ) ; assertEquals ( <int> , Booleans . countTrue ( true ) ) ; assertEquals ( <int> , Booleans . countTrue ( false , true , false , true , false , true ) ) ; assertEquals ( <int> , Booleans . countTrue ( false , false , true , false , false ) ) ; } @GwtIncompatible ( <str> ) public void testNulls ( ) { new NullPointerTester ( ) . testAllPublicStaticMethods ( Booleans . class ) ; } } 

package com . badlogic . gdx . physics . bullet . dynamics ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btHingeAccumulatedAngleConstraint extends btHingeConstraint { private long swigCPtr ; protected btHingeAccumulatedAngleConstraint ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , DynamicsJNI . btHingeAccumulatedAngleConstraint_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btHingeAccumulatedAngleConstraint ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( DynamicsJNI . btHingeAccumulatedAngleConstraint_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btHingeAccumulatedAngleConstraint obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; DynamicsJNI . delete_btHingeAccumulatedAngleConstraint ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public btHingeAccumulatedAngleConstraint ( btRigidBody rbA , btRigidBody rbB , Vector3 pivotInA , Vector3 pivotInB , Vector3 axisInA , Vector3 axisInB , boolean useReferenceFrameA ) { this ( DynamicsJNI . new_btHingeAccumulatedAngleConstraint__SWIG_0 ( btRigidBody . getCPtr ( rbA ) , rbA , btRigidBody . getCPtr ( rbB ) , rbB , pivotInA , pivotInB , axisInA , axisInB , useReferenceFrameA ) , true ) ; } public btHingeAccumulatedAngleConstraint ( btRigidBody rbA , btRigidBody rbB , Vector3 pivotInA , Vector3 pivotInB , Vector3 axisInA , Vector3 axisInB ) { this ( DynamicsJNI . new_btHingeAccumulatedAngleConstraint__SWIG_1 ( btRigidBody . getCPtr ( rbA ) , rbA , btRigidBody . getCPtr ( rbB ) , rbB , pivotInA , pivotInB , axisInA , axisInB ) , true ) ; } public btHingeAccumulatedAngleConstraint ( btRigidBody rbA , Vector3 pivotInA , Vector3 axisInA , boolean useReferenceFrameA ) { this ( DynamicsJNI . new_btHingeAccumulatedAngleConstraint__SWIG_2 ( btRigidBody . getCPtr ( rbA ) , rbA , pivotInA , axisInA , useReferenceFrameA ) , true ) ; } public btHingeAccumulatedAngleConstraint ( btRigidBody rbA , Vector3 pivotInA , Vector3 axisInA ) { this ( DynamicsJNI . new_btHingeAccumulatedAngleConstraint__SWIG_3 ( btRigidBody . getCPtr ( rbA ) , rbA , pivotInA , axisInA ) , true ) ; } public btHingeAccumulatedAngleConstraint ( btRigidBody rbA , btRigidBody rbB , Matrix4 rbAFrame , Matrix4 rbBFrame , boolean useReferenceFrameA ) { this ( DynamicsJNI . new_btHingeAccumulatedAngleConstraint__SWIG_4 ( btRigidBody . getCPtr ( rbA ) , rbA , btRigidBody . getCPtr ( rbB ) , rbB , rbAFrame , rbBFrame , useReferenceFrameA ) , true ) ; } public btHingeAccumulatedAngleConstraint ( btRigidBody rbA , btRigidBody rbB , Matrix4 rbAFrame , Matrix4 rbBFrame ) { this ( DynamicsJNI . new_btHingeAccumulatedAngleConstraint__SWIG_5 ( btRigidBody . getCPtr ( rbA ) , rbA , btRigidBody . getCPtr ( rbB ) , rbB , rbAFrame , rbBFrame ) , true ) ; } public btHingeAccumulatedAngleConstraint ( btRigidBody rbA , Matrix4 rbAFrame , boolean useReferenceFrameA ) { this ( DynamicsJNI . new_btHingeAccumulatedAngleConstraint__SWIG_6 ( btRigidBody . getCPtr ( rbA ) , rbA , rbAFrame , useReferenceFrameA ) , true ) ; } public btHingeAccumulatedAngleConstraint ( btRigidBody rbA , Matrix4 rbAFrame ) { this ( DynamicsJNI . new_btHingeAccumulatedAngleConstraint__SWIG_7 ( btRigidBody . getCPtr ( rbA ) , rbA , rbAFrame ) , true ) ; } public float getAccumulatedHingeAngle ( ) { return DynamicsJNI . btHingeAccumulatedAngleConstraint_getAccumulatedHingeAngle ( swigCPtr , this ) ; } public void setAccumulatedHingeAngle ( float accAngle ) { DynamicsJNI . btHingeAccumulatedAngleConstraint_setAccumulatedHingeAngle ( swigCPtr , this , accAngle ) ; } } 

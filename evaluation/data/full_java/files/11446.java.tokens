package org . gradle . api . internal . collections ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import java . util . ListIterator ; public class FilteredList < T , S extends T > extends FilteredCollection < T , S > implements List < S > { public FilteredList ( Collection < T > collection , CollectionFilter < S > filter ) { super ( collection , filter ) ; } public void add ( int index , S element ) { throw new UnsupportedOperationException ( String . format ( <str> , element , this ) ) ; } public boolean addAll ( int index , Collection < ? extends S > c ) { throw new UnsupportedOperationException ( String . format ( <str> , c , this ) ) ; } public S get ( int index ) { int nextIndex = <int> ; for ( T t : collection ) { S s = filter . filter ( t ) ; if ( s ! = null ) { if ( nextIndex = = index ) { return s ; } nextIndex + + ; } } throw new IndexOutOfBoundsException ( ) ; } public S set ( int index , S element ) { throw new UnsupportedOperationException ( String . format ( <str> , element , this ) ) ; } public S remove ( int index ) { throw new UnsupportedOperationException ( String . format ( <str> , this ) ) ; } public int indexOf ( Object o ) { int nextIndex = <int> ; for ( T t : collection ) { S s = filter . filter ( t ) ; if ( s ! = null ) { if ( s . equals ( o ) ) { return nextIndex ; } nextIndex + + ; } } return - <int> ; } public int lastIndexOf ( Object o ) { int nextIndex = <int> ; int lastMatch = - <int> ; for ( T t : collection ) { S s = filter . filter ( t ) ; if ( s ! = null ) { if ( s . equals ( o ) ) { lastMatch = nextIndex ; } nextIndex + + ; } } return lastMatch ; } public ListIterator < S > listIterator ( ) { return new FilteredListIterator < S > ( iterator ( ) ) ; } public ListIterator < S > listIterator ( int index ) { ListIterator < S > iterator = listIterator ( ) ; for ( int i = <int> ; i < index ; i + + ) { iterator . next ( ) ; } return iterator ; } public List < S > subList ( int fromIndex , int toIndex ) { throw new UnsupportedOperationException ( <str> ) ; } private static class FilteredListIterator < T > implements ListIterator < T > { private final Iterator < T > iterator ; private int nextIndex ; public FilteredListIterator ( Iterator < T > iterator ) { this . iterator = iterator ; } public boolean hasNext ( ) { return iterator . hasNext ( ) ; } public boolean hasPrevious ( ) { throw new UnsupportedOperationException ( <str> ) ; } public T next ( ) { nextIndex + + ; return iterator . next ( ) ; } public T previous ( ) { throw new UnsupportedOperationException ( <str> ) ; } public int nextIndex ( ) { return nextIndex ; } public int previousIndex ( ) { return nextIndex - <int> ; } public void add ( T t ) { throw new UnsupportedOperationException ( ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } public void set ( T t ) { throw new UnsupportedOperationException ( ) ; } } } 

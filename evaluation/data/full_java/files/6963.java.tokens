package org . elasticsearch . rest . action . admin . cluster . repositories . delete ; import org . elasticsearch . action . admin . cluster . repositories . delete . DeleteRepositoryRequest ; import org . elasticsearch . action . admin . cluster . repositories . delete . DeleteRepositoryResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; import static org . elasticsearch . client . Requests . deleteRepositoryRequest ; import static org . elasticsearch . rest . RestRequest . Method . DELETE ; public class RestDeleteRepositoryAction extends BaseRestHandler { @Inject public RestDeleteRepositoryAction ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; controller . registerHandler ( DELETE , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { DeleteRepositoryRequest deleteRepositoryRequest = deleteRepositoryRequest ( request . param ( <str> ) ) ; deleteRepositoryRequest . masterNodeTimeout ( request . paramAsTime ( <str> , deleteRepositoryRequest . masterNodeTimeout ( ) ) ) ; deleteRepositoryRequest . timeout ( request . paramAsTime ( <str> , deleteRepositoryRequest . timeout ( ) ) ) ; deleteRepositoryRequest . masterNodeTimeout ( request . paramAsTime ( <str> , deleteRepositoryRequest . masterNodeTimeout ( ) ) ) ; client . admin ( ) . cluster ( ) . deleteRepository ( deleteRepositoryRequest , new AcknowledgedRestListener < DeleteRepositoryResponse > ( channel ) ) ; } } 

package com . nostra13 . universalimageloader . cache . disc . impl . ext ; import android . graphics . Bitmap ; import com . nostra13 . universalimageloader . cache . disc . DiskCache ; import com . nostra13 . universalimageloader . cache . disc . naming . FileNameGenerator ; import com . nostra13 . universalimageloader . utils . IoUtils ; import com . nostra13 . universalimageloader . utils . L ; import java . io . BufferedOutputStream ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; public class LruDiskCache implements DiskCache { public static final int DEFAULT_BUFFER_SIZE = <int> * <int> ; public static final Bitmap . CompressFormat DEFAULT_COMPRESS_FORMAT = Bitmap . CompressFormat . PNG ; public static final int DEFAULT_COMPRESS_QUALITY = <int> ; private static final String ERROR_ARG_NULL = <str> ; private static final String ERROR_ARG_NEGATIVE = <str> ; protected DiskLruCache cache ; private File reserveCacheDir ; protected final FileNameGenerator fileNameGenerator ; protected int bufferSize = DEFAULT_BUFFER_SIZE ; protected Bitmap . CompressFormat compressFormat = DEFAULT_COMPRESS_FORMAT ; protected int compressQuality = DEFAULT_COMPRESS_QUALITY ; public LruDiskCache ( File cacheDir , FileNameGenerator fileNameGenerator , long cacheMaxSize ) throws IOException { this ( cacheDir , null , fileNameGenerator , cacheMaxSize , <int> ) ; } public LruDiskCache ( File cacheDir , File reserveCacheDir , FileNameGenerator fileNameGenerator , long cacheMaxSize , int cacheMaxFileCount ) throws IOException { if ( cacheDir = = null ) { throw new IllegalArgumentException ( <str> + ERROR_ARG_NULL ) ; } if ( cacheMaxSize < <int> ) { throw new IllegalArgumentException ( <str> + ERROR_ARG_NEGATIVE ) ; } if ( cacheMaxFileCount < <int> ) { throw new IllegalArgumentException ( <str> + ERROR_ARG_NEGATIVE ) ; } if ( fileNameGenerator = = null ) { throw new IllegalArgumentException ( <str> + ERROR_ARG_NULL ) ; } if ( cacheMaxSize = = <int> ) { cacheMaxSize = Long . MAX_VALUE ; } if ( cacheMaxFileCount = = <int> ) { cacheMaxFileCount = Integer . MAX_VALUE ; } this . reserveCacheDir = reserveCacheDir ; this . fileNameGenerator = fileNameGenerator ; initCache ( cacheDir , reserveCacheDir , cacheMaxSize , cacheMaxFileCount ) ; } private void initCache ( File cacheDir , File reserveCacheDir , long cacheMaxSize , int cacheMaxFileCount ) throws IOException { try { cache = DiskLruCache . open ( cacheDir , <int> , <int> , cacheMaxSize , cacheMaxFileCount ) ; } catch ( IOException e ) { L . e ( e ) ; if ( reserveCacheDir ! = null ) { initCache ( reserveCacheDir , null , cacheMaxSize , cacheMaxFileCount ) ; } if ( cache = = null ) { throw e ; } } } @Override public File getDirectory ( ) { return cache . getDirectory ( ) ; } @Override public File get ( String imageUri ) { DiskLruCache . Snapshot snapshot = null ; try { snapshot = cache . get ( getKey ( imageUri ) ) ; return snapshot = = null ? null : snapshot . getFile ( <int> ) ; } catch ( IOException e ) { L . e ( e ) ; return null ; } finally { if ( snapshot ! = null ) { snapshot . close ( ) ; } } } @Override public boolean save ( String imageUri , InputStream imageStream , IoUtils . CopyListener listener ) throws IOException { DiskLruCache . Editor editor = cache . edit ( getKey ( imageUri ) ) ; if ( editor = = null ) { return false ; } OutputStream os = new BufferedOutputStream ( editor . newOutputStream ( <int> ) , bufferSize ) ; boolean copied = false ; try { copied = IoUtils . copyStream ( imageStream , os , listener , bufferSize ) ; } finally { IoUtils . closeSilently ( os ) ; if ( copied ) { editor . commit ( ) ; } else { editor . abort ( ) ; } } return copied ; } @Override public boolean save ( String imageUri , Bitmap bitmap ) throws IOException { DiskLruCache . Editor editor = cache . edit ( getKey ( imageUri ) ) ; if ( editor = = null ) { return false ; } OutputStream os = new BufferedOutputStream ( editor . newOutputStream ( <int> ) , bufferSize ) ; boolean savedSuccessfully = false ; try { savedSuccessfully = bitmap . compress ( compressFormat , compressQuality , os ) ; } finally { IoUtils . closeSilently ( os ) ; } if ( savedSuccessfully ) { editor . commit ( ) ; } else { editor . abort ( ) ; } return savedSuccessfully ; } @Override public boolean remove ( String imageUri ) { try { return cache . remove ( getKey ( imageUri ) ) ; } catch ( IOException e ) { L . e ( e ) ; return false ; } } @Override public void close ( ) { try { cache . close ( ) ; } catch ( IOException e ) { L . e ( e ) ; } cache = null ; } @Override public void clear ( ) { try { cache . delete ( ) ; } catch ( IOException e ) { L . e ( e ) ; } try { initCache ( cache . getDirectory ( ) , reserveCacheDir , cache . getMaxSize ( ) , cache . getMaxFileCount ( ) ) ; } catch ( IOException e ) { L . e ( e ) ; } } private String getKey ( String imageUri ) { return fileNameGenerator . generate ( imageUri ) ; } public void setBufferSize ( int bufferSize ) { this . bufferSize = bufferSize ; } public void setCompressFormat ( Bitmap . CompressFormat compressFormat ) { this . compressFormat = compressFormat ; } public void setCompressQuality ( int compressQuality ) { this . compressQuality = compressQuality ; } } 

package org . elasticsearch . action . admin . cluster . node . stats ; import org . elasticsearch . action . admin . indices . stats . CommonStatsFlags ; import org . elasticsearch . action . support . nodes . BaseNodesRequest ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; public class NodesStatsRequest extends BaseNodesRequest < NodesStatsRequest > { private CommonStatsFlags indices = new CommonStatsFlags ( ) ; private boolean os ; private boolean process ; private boolean jvm ; private boolean threadPool ; private boolean fs ; private boolean transport ; private boolean http ; private boolean breaker ; private boolean script ; private boolean discovery ; public NodesStatsRequest ( ) { } public NodesStatsRequest ( String . . . nodesIds ) { super ( nodesIds ) ; } public NodesStatsRequest all ( ) { this . indices . all ( ) ; this . os = true ; this . process = true ; this . jvm = true ; this . threadPool = true ; this . fs = true ; this . transport = true ; this . http = true ; this . breaker = true ; this . script = true ; this . discovery = true ; return this ; } public NodesStatsRequest clear ( ) { this . indices . clear ( ) ; this . os = false ; this . process = false ; this . jvm = false ; this . threadPool = false ; this . fs = false ; this . transport = false ; this . http = false ; this . breaker = false ; this . script = false ; this . discovery = false ; return this ; } public CommonStatsFlags indices ( ) { return indices ; } public NodesStatsRequest indices ( CommonStatsFlags indices ) { this . indices = indices ; return this ; } public NodesStatsRequest indices ( boolean indices ) { if ( indices ) { this . indices . all ( ) ; } else { this . indices . clear ( ) ; } return this ; } public boolean os ( ) { return this . os ; } public NodesStatsRequest os ( boolean os ) { this . os = os ; return this ; } public boolean process ( ) { return this . process ; } public NodesStatsRequest process ( boolean process ) { this . process = process ; return this ; } public boolean jvm ( ) { return this . jvm ; } public NodesStatsRequest jvm ( boolean jvm ) { this . jvm = jvm ; return this ; } public boolean threadPool ( ) { return this . threadPool ; } public NodesStatsRequest threadPool ( boolean threadPool ) { this . threadPool = threadPool ; return this ; } public boolean fs ( ) { return this . fs ; } public NodesStatsRequest fs ( boolean fs ) { this . fs = fs ; return this ; } public boolean transport ( ) { return this . transport ; } public NodesStatsRequest transport ( boolean transport ) { this . transport = transport ; return this ; } public boolean http ( ) { return this . http ; } public NodesStatsRequest http ( boolean http ) { this . http = http ; return this ; } public boolean breaker ( ) { return this . breaker ; } public NodesStatsRequest breaker ( boolean breaker ) { this . breaker = breaker ; return this ; } public boolean script ( ) { return script ; } public NodesStatsRequest script ( boolean script ) { this . script = script ; return this ; } public boolean discovery ( ) { return this . discovery ; } public NodesStatsRequest discovery ( boolean discovery ) { this . discovery = discovery ; return this ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; indices = CommonStatsFlags . readCommonStatsFlags ( in ) ; os = in . readBoolean ( ) ; process = in . readBoolean ( ) ; jvm = in . readBoolean ( ) ; threadPool = in . readBoolean ( ) ; fs = in . readBoolean ( ) ; transport = in . readBoolean ( ) ; http = in . readBoolean ( ) ; breaker = in . readBoolean ( ) ; script = in . readBoolean ( ) ; discovery = in . readBoolean ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; indices . writeTo ( out ) ; out . writeBoolean ( os ) ; out . writeBoolean ( process ) ; out . writeBoolean ( jvm ) ; out . writeBoolean ( threadPool ) ; out . writeBoolean ( fs ) ; out . writeBoolean ( transport ) ; out . writeBoolean ( http ) ; out . writeBoolean ( breaker ) ; out . writeBoolean ( script ) ; out . writeBoolean ( discovery ) ; } } 

package org . gradle . api . tasks . compile ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . ImmutableSet ; import com . google . common . collect . Maps ; import org . gradle . api . Incubating ; import org . gradle . api . Nullable ; import org . gradle . api . tasks . Input ; import org . gradle . api . tasks . InputFile ; import org . gradle . api . tasks . Optional ; import java . io . File ; import java . util . List ; import java . util . Map ; public class GroovyCompileOptions extends AbstractOptions { private static final long serialVersionUID = <int> ; private static final ImmutableSet < String > EXCLUDE_FROM_ANT_PROPERTIES = ImmutableSet . of ( <str> , <str> , <str> , <str> , <str> ) ; private boolean failOnError = true ; private boolean verbose ; private boolean listFiles ; private String encoding = <str> ; private boolean fork = true ; private boolean keepStubs ; private List < String > fileExtensions = ImmutableList . of ( <str> , <str> ) ; private GroovyForkOptions forkOptions = new GroovyForkOptions ( ) ; private Map < String , Boolean > optimizationOptions = Maps . newHashMap ( ) ; private File stubDir ; private File configurationScript ; private boolean javaAnnotationProcessing ; public boolean isFailOnError ( ) { return failOnError ; } public void setFailOnError ( boolean failOnError ) { this . failOnError = failOnError ; } public boolean isVerbose ( ) { return verbose ; } public void setVerbose ( boolean verbose ) { this . verbose = verbose ; } public boolean isListFiles ( ) { return listFiles ; } public void setListFiles ( boolean listFiles ) { this . listFiles = listFiles ; } @Input public String getEncoding ( ) { return encoding ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public boolean isFork ( ) { return fork ; } public void setFork ( boolean fork ) { this . fork = fork ; } @InputFile @Incubating @Optional public File getConfigurationScript ( ) { return configurationScript ; } @Incubating public void setConfigurationScript ( @Nullable File configurationFile ) { this . configurationScript = configurationFile ; } @Incubating @Input public boolean isJavaAnnotationProcessing ( ) { return javaAnnotationProcessing ; } @Incubating public void setJavaAnnotationProcessing ( boolean javaAnnotationProcessing ) { this . javaAnnotationProcessing = javaAnnotationProcessing ; } public GroovyForkOptions getForkOptions ( ) { return forkOptions ; } public void setForkOptions ( GroovyForkOptions forkOptions ) { this . forkOptions = forkOptions ; } public Map < String , Boolean > getOptimizationOptions ( ) { return optimizationOptions ; } public void setOptimizationOptions ( Map < String , Boolean > optimizationOptions ) { this . optimizationOptions = optimizationOptions ; } public File getStubDir ( ) { return stubDir ; } public void setStubDir ( File stubDir ) { this . stubDir = stubDir ; } @Input @Incubating public List < String > getFileExtensions ( ) { return fileExtensions ; } @Incubating public void setFileExtensions ( List < String > fileExtensions ) { this . fileExtensions = fileExtensions ; } public boolean isKeepStubs ( ) { return keepStubs ; } public void setKeepStubs ( boolean keepStubs ) { this . keepStubs = keepStubs ; } public GroovyCompileOptions fork ( Map < String , Object > forkArgs ) { fork = true ; forkOptions . define ( forkArgs ) ; return this ; } @Override protected boolean excludeFromAntProperties ( String fieldName ) { return EXCLUDE_FROM_ANT_PROPERTIES . contains ( fieldName ) ; } public Map < String , Object > optionMap ( ) { Map < String , Object > map = super . optionMap ( ) ; map . putAll ( forkOptions . optionMap ( ) ) ; if ( optimizationOptions . containsKey ( <str> ) ) { map . put ( <str> , optimizationOptions . get ( <str> ) ) ; } return map ; } } 

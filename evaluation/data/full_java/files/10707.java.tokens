package org . gradle . build . docs . dsl . docbook ; import org . gradle . build . docs . dsl . docbook . model . ClassExtensionDoc ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; public class ExtensionMethodsSummaryRenderer { private final MethodTableRenderer methodTableRenderer ; public ExtensionMethodsSummaryRenderer ( MethodTableRenderer methodTableRenderer ) { this . methodTableRenderer = methodTableRenderer ; } public void renderTo ( ClassExtensionDoc extension , Element parent ) { if ( extension . getExtensionMethods ( ) . isEmpty ( ) ) { return ; } Document document = parent . getOwnerDocument ( ) ; Element section = document . createElement ( <str> ) ; parent . appendChild ( section ) ; Element title = document . createElement ( <str> ) ; section . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; Element literal = document . createElement ( <str> ) ; title . appendChild ( literal ) ; literal . appendChild ( document . createTextNode ( extension . getPluginId ( ) ) ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; Element titleabbrev = document . createElement ( <str> ) ; section . appendChild ( titleabbrev ) ; literal = document . createElement ( <str> ) ; titleabbrev . appendChild ( literal ) ; literal . appendChild ( document . createTextNode ( extension . getPluginId ( ) ) ) ; titleabbrev . appendChild ( document . createTextNode ( <str> ) ) ; Element table = document . createElement ( <str> ) ; section . appendChild ( table ) ; title = document . createElement ( <str> ) ; table . appendChild ( title ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; literal = document . createElement ( <str> ) ; title . appendChild ( literal ) ; literal . appendChild ( document . createTextNode ( extension . getPluginId ( ) ) ) ; title . appendChild ( document . createTextNode ( <str> ) ) ; methodTableRenderer . renderTo ( extension . getExtensionMethods ( ) , table ) ; } } 

package org . elasticsearch . search . aggregations . bucket . geogrid ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . search . SearchParseException ; import org . elasticsearch . search . internal . SearchContext ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . TestSearchContext ; public class GeoHashGridParserTests extends ESTestCase { public void testParseValidFromInts ( ) throws Exception { SearchContext searchContext = new TestSearchContext ( ) ; int precision = randomIntBetween ( <int> , <int> ) ; XContentParser stParser = JsonXContent . jsonXContent . createParser ( <str> + precision + <str> ) ; GeoHashGridParser parser = new GeoHashGridParser ( ) ; assertNotNull ( parser . parse ( <str> , stParser , searchContext ) ) ; } public void testParseValidFromStrings ( ) throws Exception { SearchContext searchContext = new TestSearchContext ( ) ; int precision = randomIntBetween ( <int> , <int> ) ; XContentParser stParser = JsonXContent . jsonXContent . createParser ( <str> + precision + <str> ) ; GeoHashGridParser parser = new GeoHashGridParser ( ) ; assertNotNull ( parser . parse ( <str> , stParser , searchContext ) ) ; } public void testParseErrorOnNonIntPrecision ( ) throws Exception { SearchContext searchContext = new TestSearchContext ( ) ; XContentParser stParser = JsonXContent . jsonXContent . createParser ( <str> ) ; GeoHashGridParser parser = new GeoHashGridParser ( ) ; try { parser . parse ( <str> , stParser , searchContext ) ; fail ( ) ; } catch ( NumberFormatException ex ) { assertEquals ( <str> , ex . getMessage ( ) ) ; } } public void testParseErrorOnBooleanPrecision ( ) throws Exception { SearchContext searchContext = new TestSearchContext ( ) ; XContentParser stParser = JsonXContent . jsonXContent . createParser ( <str> ) ; GeoHashGridParser parser = new GeoHashGridParser ( ) ; try { parser . parse ( <str> , stParser , searchContext ) ; fail ( ) ; } catch ( SearchParseException ex ) { assertEquals ( <str> , ex . getMessage ( ) ) ; } } public void testParseErrorOnPrecisionOutOfRange ( ) throws Exception { SearchContext searchContext = new TestSearchContext ( ) ; XContentParser stParser = JsonXContent . jsonXContent . createParser ( <str> ) ; GeoHashGridParser parser = new GeoHashGridParser ( ) ; try { parser . parse ( <str> , stParser , searchContext ) ; fail ( ) ; } catch ( IllegalArgumentException ex ) { assertEquals ( <str> , ex . getMessage ( ) ) ; } } } 

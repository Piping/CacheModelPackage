package org . gradle . jvm . internal ; import org . gradle . api . Action ; import org . gradle . jvm . JvmBinarySpec ; import org . gradle . jvm . toolchain . JavaToolChainRegistry ; import org . gradle . language . base . internal . ProjectLayout ; import org . gradle . model . Defaults ; import org . gradle . model . RuleSource ; import org . gradle . platform . base . ComponentSpec ; import org . gradle . platform . base . internal . BinaryNamingScheme ; import org . gradle . platform . base . internal . BinarySpecInternal ; import java . io . File ; @SuppressWarnings ( <str> ) public class JarBinaryRules extends RuleSource { @Defaults void configureJarBinaries ( final ComponentSpec jvmLibrary , final ProjectLayout projectLayout , final JavaToolChainRegistry toolChains ) { jvmLibrary . getBinaries ( ) . withType ( JvmBinarySpec . class ) . beforeEach ( new Action < JvmBinarySpec > ( ) { @Override public void execute ( JvmBinarySpec jvmBinary ) { BinaryNamingScheme namingScheme = ( ( BinarySpecInternal ) jvmBinary ) . getNamingScheme ( ) ; jvmBinary . setClassesDir ( namingScheme . getOutputDirectory ( projectLayout . getBuildDir ( ) , <str> ) ) ; jvmBinary . setResourcesDir ( namingScheme . getOutputDirectory ( projectLayout . getBuildDir ( ) , <str> ) ) ; } } ) ; jvmLibrary . getBinaries ( ) . withType ( JarBinarySpecInternal . class ) . beforeEach ( new Action < JarBinarySpecInternal > ( ) { @Override public void execute ( JarBinarySpecInternal jarBinary ) { String libraryName = jarBinary . getId ( ) . getLibraryName ( ) ; File jarsDir = jarBinary . getNamingScheme ( ) . getOutputDirectory ( projectLayout . getBuildDir ( ) , <str> ) ; jarBinary . setJarFile ( new File ( jarsDir , String . format ( <str> , libraryName ) ) ) ; jarBinary . setApiJarFile ( new File ( jarsDir , String . format ( <str> , libraryName ) ) ) ; jarBinary . setToolChain ( toolChains . getForPlatform ( jarBinary . getTargetPlatform ( ) ) ) ; } } ) ; } } 

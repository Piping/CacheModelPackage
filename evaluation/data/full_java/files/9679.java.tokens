package com . google . common . util . concurrent ; import static com . google . common . collect . Sets . newHashSet ; import java . util . Set ; abstract class AggregateFutureState { private Set < Throwable > seenExceptions = null ; private int remaining ; AggregateFutureState ( int remainingFutures ) { this . remaining = remainingFutures ; } final Set < Throwable > getOrInitSeenExceptions ( ) { if ( seenExceptions = = null ) { seenExceptions = newHashSet ( ) ; addInitialException ( seenExceptions ) ; } return seenExceptions ; } abstract void addInitialException ( Set < Throwable > seen ) ; final int decrementRemainingAndGet ( ) { return - - remaining ; } } 

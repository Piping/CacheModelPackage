package org . elasticsearch . action . fieldstats ; import org . elasticsearch . action . support . broadcast . BroadcastShardResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . index . shard . ShardId ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; public class FieldStatsShardResponse extends BroadcastShardResponse { private Map < String , FieldStats > fieldStats ; public FieldStatsShardResponse ( ) { } public FieldStatsShardResponse ( ShardId shardId , Map < String , FieldStats > fieldStats ) { super ( shardId ) ; this . fieldStats = fieldStats ; } public Map < String , FieldStats > getFieldStats ( ) { return fieldStats ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; final int size = in . readVInt ( ) ; fieldStats = new HashMap < > ( size ) ; for ( int i = <int> ; i < size ; i + + ) { String key = in . readString ( ) ; FieldStats value = FieldStats . read ( in ) ; fieldStats . put ( key , value ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeVInt ( fieldStats . size ( ) ) ; for ( Map . Entry < String , FieldStats > entry : fieldStats . entrySet ( ) ) { out . writeString ( entry . getKey ( ) ) ; entry . getValue ( ) . writeTo ( out ) ; } } } 

package com . badlogic . gdx . physics . bullet . dynamics ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . physics . bullet . linearmath . * ; import com . badlogic . gdx . physics . bullet . collision . * ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btSequentialImpulseConstraintSolver extends btConstraintSolver { private long swigCPtr ; protected btSequentialImpulseConstraintSolver ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , DynamicsJNI . btSequentialImpulseConstraintSolver_SWIGUpcast ( cPtr ) , cMemoryOwn ) ; swigCPtr = cPtr ; } public btSequentialImpulseConstraintSolver ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( DynamicsJNI . btSequentialImpulseConstraintSolver_SWIGUpcast ( swigCPtr = cPtr ) , cMemoryOwn ) ; } public static long getCPtr ( btSequentialImpulseConstraintSolver obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; DynamicsJNI . delete_btSequentialImpulseConstraintSolver ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public btSequentialImpulseConstraintSolver ( ) { this ( DynamicsJNI . new_btSequentialImpulseConstraintSolver ( ) , true ) ; } public long btRand2 ( ) { return DynamicsJNI . btSequentialImpulseConstraintSolver_btRand2 ( swigCPtr , this ) ; } public int btRandInt2 ( int n ) { return DynamicsJNI . btSequentialImpulseConstraintSolver_btRandInt2 ( swigCPtr , this , n ) ; } public void setRandSeed ( long seed ) { DynamicsJNI . btSequentialImpulseConstraintSolver_setRandSeed ( swigCPtr , this , seed ) ; } public long getRandSeed ( ) { return DynamicsJNI . btSequentialImpulseConstraintSolver_getRandSeed ( swigCPtr , this ) ; } public SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar getActiveConstraintRowSolverGeneric ( ) { long cPtr = DynamicsJNI . btSequentialImpulseConstraintSolver_getActiveConstraintRowSolverGeneric ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar ( cPtr , false ) ; } public void setConstraintRowSolverGeneric ( SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar rowSolver ) { DynamicsJNI . btSequentialImpulseConstraintSolver_setConstraintRowSolverGeneric ( swigCPtr , this , SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar . getCPtr ( rowSolver ) ) ; } public SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar getActiveConstraintRowSolverLowerLimit ( ) { long cPtr = DynamicsJNI . btSequentialImpulseConstraintSolver_getActiveConstraintRowSolverLowerLimit ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar ( cPtr , false ) ; } public void setConstraintRowSolverLowerLimit ( SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar rowSolver ) { DynamicsJNI . btSequentialImpulseConstraintSolver_setConstraintRowSolverLowerLimit ( swigCPtr , this , SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar . getCPtr ( rowSolver ) ) ; } public SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar getScalarConstraintRowSolverGeneric ( ) { long cPtr = DynamicsJNI . btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverGeneric ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar ( cPtr , false ) ; } public SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar getScalarConstraintRowSolverLowerLimit ( ) { long cPtr = DynamicsJNI . btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverLowerLimit ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar ( cPtr , false ) ; } } 

package org . elasticsearch . action . support ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . action . ShardOperationFailedException ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; import static org . elasticsearch . ExceptionsHelper . detailedMessage ; public class DefaultShardOperationFailedException implements ShardOperationFailedException { private String index ; private int shardId ; private Throwable reason ; private RestStatus status ; protected DefaultShardOperationFailedException ( ) { } public DefaultShardOperationFailedException ( ElasticsearchException e ) { this . index = e . getIndex ( ) ; this . shardId = e . getShardId ( ) . id ( ) ; this . reason = e ; this . status = e . status ( ) ; } public DefaultShardOperationFailedException ( String index , int shardId , Throwable t ) { this . index = index ; this . shardId = shardId ; this . reason = t ; status = ExceptionsHelper . status ( t ) ; } @Override public String index ( ) { return this . index ; } @Override public int shardId ( ) { return this . shardId ; } @Override public String reason ( ) { return detailedMessage ( reason ) ; } @Override public RestStatus status ( ) { return status ; } @Override public Throwable getCause ( ) { return reason ; } public static DefaultShardOperationFailedException readShardOperationFailed ( StreamInput in ) throws IOException { DefaultShardOperationFailedException exp = new DefaultShardOperationFailedException ( ) ; exp . readFrom ( in ) ; return exp ; } @Override public void readFrom ( StreamInput in ) throws IOException { if ( in . readBoolean ( ) ) { index = in . readString ( ) ; } shardId = in . readVInt ( ) ; reason = in . readThrowable ( ) ; status = RestStatus . readFrom ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { if ( index = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; out . writeString ( index ) ; } out . writeVInt ( shardId ) ; out . writeThrowable ( reason ) ; RestStatus . writeTo ( out , status ) ; } @Override public String toString ( ) { return <str> + index + <str> + shardId + <str> + reason ( ) + <str> ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . field ( <str> , shardId ( ) ) ; builder . field ( <str> , index ( ) ) ; builder . field ( <str> , status . name ( ) ) ; if ( reason ! = null ) { builder . field ( <str> ) ; builder . startObject ( ) ; ElasticsearchException . toXContent ( builder , params , reason ) ; builder . endObject ( ) ; } return builder ; } } 

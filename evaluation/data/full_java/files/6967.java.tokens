package org . elasticsearch . rest . action . admin . cluster . reroute ; import org . elasticsearch . action . admin . cluster . reroute . ClusterRerouteRequest ; import org . elasticsearch . action . admin . cluster . reroute . ClusterRerouteResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . client . Requests ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsFilter ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . AcknowledgedRestListener ; import java . io . IOException ; import java . util . EnumSet ; public class RestClusterRerouteAction extends BaseRestHandler { private final SettingsFilter settingsFilter ; private static String DEFAULT_METRICS = Strings . arrayToCommaDelimitedString ( EnumSet . complementOf ( EnumSet . of ( ClusterState . Metric . METADATA ) ) . toArray ( ) ) ; @Inject public RestClusterRerouteAction ( Settings settings , RestController controller , Client client , SettingsFilter settingsFilter ) { super ( settings , controller , client ) ; this . settingsFilter = settingsFilter ; controller . registerHandler ( RestRequest . Method . POST , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) throws Exception { final ClusterRerouteRequest clusterRerouteRequest = Requests . clusterRerouteRequest ( ) ; clusterRerouteRequest . dryRun ( request . paramAsBoolean ( <str> , clusterRerouteRequest . dryRun ( ) ) ) ; clusterRerouteRequest . explain ( request . paramAsBoolean ( <str> , clusterRerouteRequest . explain ( ) ) ) ; clusterRerouteRequest . timeout ( request . paramAsTime ( <str> , clusterRerouteRequest . timeout ( ) ) ) ; clusterRerouteRequest . masterNodeTimeout ( request . paramAsTime ( <str> , clusterRerouteRequest . masterNodeTimeout ( ) ) ) ; if ( request . hasContent ( ) ) { clusterRerouteRequest . source ( request . content ( ) ) ; } client . admin ( ) . cluster ( ) . reroute ( clusterRerouteRequest , new AcknowledgedRestListener < ClusterRerouteResponse > ( channel ) { @Override protected void addCustomFields ( XContentBuilder builder , ClusterRerouteResponse response ) throws IOException { builder . startObject ( <str> ) ; if ( request . param ( <str> ) = = null ) { request . params ( ) . put ( <str> , DEFAULT_METRICS ) ; } settingsFilter . addFilterSettingParams ( request ) ; response . getState ( ) . toXContent ( builder , request ) ; builder . endObject ( ) ; if ( clusterRerouteRequest . explain ( ) ) { assert response . getExplanations ( ) ! = null ; response . getExplanations ( ) . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; } } } ) ; } } 

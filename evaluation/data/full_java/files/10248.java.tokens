package com . google . common . base ; import com . google . common . testing . GcFinalization ; import junit . framework . TestCase ; import java . io . Closeable ; import java . lang . ref . WeakReference ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . net . URL ; import java . net . URLClassLoader ; import java . security . Permission ; import java . security . Policy ; import java . security . ProtectionDomain ; import java . util . concurrent . Callable ; import java . util . concurrent . Semaphore ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicReference ; public class FinalizableReferenceQueueClassLoaderUnloadingTest extends TestCase { public static class MyFinalizableWeakReference extends FinalizableWeakReference < Object > { public MyFinalizableWeakReference ( Object x , FinalizableReferenceQueue queue ) { super ( x , queue ) ; } @Override public void finalizeReferent ( ) { } } private static class PermissivePolicy extends Policy { @Override public boolean implies ( ProtectionDomain pd , Permission perm ) { return true ; } } private WeakReference < ClassLoader > useFrqInSeparateLoader ( ) throws Exception { final URLClassLoader myLoader = ( URLClassLoader ) getClass ( ) . getClassLoader ( ) ; final URL [ ] urls = myLoader . getURLs ( ) ; URLClassLoader sepLoader = new URLClassLoader ( urls , myLoader . getParent ( ) ) ; Class < ? > frqC = FinalizableReferenceQueue . class ; Class < ? > sepFrqC = sepLoader . loadClass ( frqC . getName ( ) ) ; assertNotSame ( frqC , sepFrqC ) ; Class < ? > sepFrqSystemLoaderC = sepLoader . loadClass ( FinalizableReferenceQueue . SystemLoader . class . getName ( ) ) ; Field disabled = sepFrqSystemLoaderC . getDeclaredField ( <str> ) ; disabled . setAccessible ( true ) ; disabled . set ( null , true ) ; AtomicReference < Object > sepFrqA = new AtomicReference < Object > ( sepFrqC . newInstance ( ) ) ; Class < ? > sepFwrC = sepLoader . loadClass ( MyFinalizableWeakReference . class . getName ( ) ) ; Constructor < ? > sepFwrCons = sepFwrC . getConstructor ( Object . class , sepFrqC ) ; Class < ? > sepStopwatchC = sepLoader . loadClass ( Stopwatch . class . getName ( ) ) ; assertSame ( sepLoader , sepStopwatchC . getClassLoader ( ) ) ; AtomicReference < Object > sepStopwatchA = new AtomicReference < Object > ( sepStopwatchC . getMethod ( <str> ) . invoke ( null ) ) ; AtomicReference < WeakReference < ? > > sepStopwatchRef = new AtomicReference < WeakReference < ? > > ( ( WeakReference < ? > ) sepFwrCons . newInstance ( sepStopwatchA . get ( ) , sepFrqA . get ( ) ) ) ; assertNotNull ( sepStopwatchA . get ( ) ) ; sepStopwatchA . set ( null ) ; GcFinalization . awaitClear ( sepStopwatchRef . get ( ) ) ; return new WeakReference < ClassLoader > ( sepLoader ) ; } private void doTestUnloadable ( ) throws Exception { WeakReference < ClassLoader > loaderRef = useFrqInSeparateLoader ( ) ; GcFinalization . awaitClear ( loaderRef ) ; } public void testUnloadableWithoutSecurityManager ( ) throws Exception { SecurityManager oldSecurityManager = System . getSecurityManager ( ) ; try { System . setSecurityManager ( null ) ; doTestUnloadable ( ) ; } finally { System . setSecurityManager ( oldSecurityManager ) ; } } public void testUnloadableWithSecurityManager ( ) throws Exception { Policy oldPolicy = Policy . getPolicy ( ) ; SecurityManager oldSecurityManager = System . getSecurityManager ( ) ; try { Policy . setPolicy ( new PermissivePolicy ( ) ) ; System . setSecurityManager ( new SecurityManager ( ) ) ; doTestUnloadable ( ) ; } finally { System . setSecurityManager ( oldSecurityManager ) ; Policy . setPolicy ( oldPolicy ) ; } } public static class FrqUser implements Callable < WeakReference < Object > > { public static FinalizableReferenceQueue frq = new FinalizableReferenceQueue ( ) ; public static final Semaphore finalized = new Semaphore ( <int> ) ; @Override public WeakReference < Object > call ( ) { WeakReference < Object > wr = new FinalizableWeakReference < Object > ( new Integer ( <int> ) , frq ) { @Override public void finalizeReferent ( ) { finalized . release ( ) ; } } ; return wr ; } } public void testUnloadableInStaticFieldIfClosed ( ) throws Exception { Policy oldPolicy = Policy . getPolicy ( ) ; SecurityManager oldSecurityManager = System . getSecurityManager ( ) ; try { Policy . setPolicy ( new PermissivePolicy ( ) ) ; System . setSecurityManager ( new SecurityManager ( ) ) ; WeakReference < ClassLoader > loaderRef = doTestUnloadableInStaticFieldIfClosed ( ) ; GcFinalization . awaitClear ( loaderRef ) ; } finally { System . setSecurityManager ( oldSecurityManager ) ; Policy . setPolicy ( oldPolicy ) ; } } private WeakReference < ClassLoader > doTestUnloadableInStaticFieldIfClosed ( ) throws Exception { final URLClassLoader myLoader = ( URLClassLoader ) getClass ( ) . getClassLoader ( ) ; final URL [ ] urls = myLoader . getURLs ( ) ; URLClassLoader sepLoader = new URLClassLoader ( urls , myLoader . getParent ( ) ) ; Class < ? > frqC = FinalizableReferenceQueue . class ; Class < ? > sepFrqC = sepLoader . loadClass ( frqC . getName ( ) ) ; assertNotSame ( frqC , sepFrqC ) ; Class < ? > sepFrqSystemLoaderC = sepLoader . loadClass ( FinalizableReferenceQueue . SystemLoader . class . getName ( ) ) ; Field disabled = sepFrqSystemLoaderC . getDeclaredField ( <str> ) ; disabled . setAccessible ( true ) ; disabled . set ( null , true ) ; Class < ? > frqUserC = FrqUser . class ; Class < ? > sepFrqUserC = sepLoader . loadClass ( frqUserC . getName ( ) ) ; assertNotSame ( frqUserC , sepFrqUserC ) ; assertSame ( sepLoader , sepFrqUserC . getClassLoader ( ) ) ; Callable < ? > sepFrqUser = ( Callable < ? > ) sepFrqUserC . newInstance ( ) ; WeakReference < ? > finalizableWeakReference = ( WeakReference < ? > ) sepFrqUser . call ( ) ; GcFinalization . awaitClear ( finalizableWeakReference ) ; Field sepFrqUserFinalizedF = sepFrqUserC . getField ( <str> ) ; Semaphore finalizeCount = ( Semaphore ) sepFrqUserFinalizedF . get ( null ) ; boolean finalized = finalizeCount . tryAcquire ( <int> , TimeUnit . SECONDS ) ; assertTrue ( finalized ) ; Field sepFrqUserFrqF = sepFrqUserC . getField ( <str> ) ; Closeable frq = ( Closeable ) sepFrqUserFrqF . get ( null ) ; frq . close ( ) ; return new WeakReference < ClassLoader > ( sepLoader ) ; } } 

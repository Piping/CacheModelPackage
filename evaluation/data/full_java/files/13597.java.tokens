package org . gradle . api . internal . tasks . compile . daemon ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . concurrent . CompositeStoppable ; import java . io . File ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class CompilerClientsManager { private static final Logger LOGGER = Logging . getLogger ( CompilerDaemonManager . class ) ; private final Object lock = new Object ( ) ; private final List < CompilerDaemonClient > allClients = new ArrayList < CompilerDaemonClient > ( ) ; private final List < CompilerDaemonClient > idleClients = new ArrayList < CompilerDaemonClient > ( ) ; private CompilerDaemonStarter compilerDaemonStarter ; public CompilerClientsManager ( CompilerDaemonStarter compilerDaemonStarter ) { this . compilerDaemonStarter = compilerDaemonStarter ; } public CompilerDaemonClient reserveIdleClient ( DaemonForkOptions forkOptions ) { return reserveIdleClient ( forkOptions , idleClients ) ; } CompilerDaemonClient reserveIdleClient ( DaemonForkOptions forkOptions , List < CompilerDaemonClient > clients ) { synchronized ( lock ) { Iterator < CompilerDaemonClient > it = clients . iterator ( ) ; while ( it . hasNext ( ) ) { CompilerDaemonClient candidate = it . next ( ) ; if ( candidate . isCompatibleWith ( forkOptions ) ) { it . remove ( ) ; return candidate ; } } return null ; } } public CompilerDaemonClient reserveNewClient ( File workingDir , DaemonForkOptions forkOptions ) { CompilerDaemonClient client = compilerDaemonStarter . startDaemon ( workingDir , forkOptions ) ; synchronized ( lock ) { allClients . add ( client ) ; } return client ; } public void release ( CompilerDaemonClient client ) { synchronized ( lock ) { idleClients . add ( client ) ; } } public void stop ( ) { synchronized ( lock ) { LOGGER . debug ( <str> , allClients . size ( ) ) ; CompositeStoppable . stoppable ( allClients ) . stop ( ) ; LOGGER . info ( <str> , allClients . size ( ) ) ; allClients . clear ( ) ; } } } 

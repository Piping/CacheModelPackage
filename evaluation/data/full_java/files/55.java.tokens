package org . apache . cassandra . auth ; import java . util . Set ; import com . google . common . base . Objects ; import com . google . common . collect . Sets ; import org . apache . commons . lang3 . StringUtils ; import org . apache . cassandra . config . Schema ; public class DataResource implements IResource { enum Level { ROOT , KEYSPACE , TABLE } private static final Set < Permission > TABLE_LEVEL_PERMISSIONS = Sets . immutableEnumSet ( Permission . ALTER , Permission . DROP , Permission . SELECT , Permission . MODIFY , Permission . AUTHORIZE ) ; private static final Set < Permission > KEYSPACE_LEVEL_PERMISSIONS = Sets . immutableEnumSet ( Permission . CREATE , Permission . ALTER , Permission . DROP , Permission . SELECT , Permission . MODIFY , Permission . AUTHORIZE ) ; private static final String ROOT_NAME = <str> ; private static final DataResource ROOT_RESOURCE = new DataResource ( Level . ROOT , null , null ) ; private final Level level ; private final String keyspace ; private final String table ; private final transient int hash ; private DataResource ( Level level , String keyspace , String table ) { this . level = level ; this . keyspace = keyspace ; this . table = table ; this . hash = Objects . hashCode ( level , keyspace , table ) ; } public static DataResource root ( ) { return ROOT_RESOURCE ; } public static DataResource keyspace ( String keyspace ) { return new DataResource ( Level . KEYSPACE , keyspace , null ) ; } public static DataResource table ( String keyspace , String table ) { return new DataResource ( Level . TABLE , keyspace , table ) ; } public static DataResource fromName ( String name ) { String [ ] parts = StringUtils . split ( name , <str> ) ; if ( ! parts [ <int> ] . equals ( ROOT_NAME ) | | parts . length > <int> ) throw new IllegalArgumentException ( String . format ( <str> , name ) ) ; if ( parts . length = = <int> ) return root ( ) ; if ( parts . length = = <int> ) return keyspace ( parts [ <int> ] ) ; return table ( parts [ <int> ] , parts [ <int> ] ) ; } public String getName ( ) { switch ( level ) { case ROOT : return ROOT_NAME ; case KEYSPACE : return String . format ( <str> , ROOT_NAME , keyspace ) ; case TABLE : return String . format ( <str> , ROOT_NAME , keyspace , table ) ; } throw new AssertionError ( ) ; } public IResource getParent ( ) { switch ( level ) { case KEYSPACE : return root ( ) ; case TABLE : return keyspace ( keyspace ) ; } throw new IllegalStateException ( <str> ) ; } public boolean isRootLevel ( ) { return level = = Level . ROOT ; } public boolean isKeyspaceLevel ( ) { return level = = Level . KEYSPACE ; } public boolean isTableLevel ( ) { return level = = Level . TABLE ; } public String getKeyspace ( ) { if ( isRootLevel ( ) ) throw new IllegalStateException ( <str> ) ; return keyspace ; } public String getTable ( ) { if ( ! isTableLevel ( ) ) throw new IllegalStateException ( String . format ( <str> , level ) ) ; return table ; } public boolean hasParent ( ) { return level ! = Level . ROOT ; } public boolean exists ( ) { switch ( level ) { case ROOT : return true ; case KEYSPACE : return Schema . instance . getKeyspaces ( ) . contains ( keyspace ) ; case TABLE : return Schema . instance . getCFMetaData ( keyspace , table ) ! = null ; } throw new AssertionError ( ) ; } public Set < Permission > applicablePermissions ( ) { switch ( level ) { case ROOT : case KEYSPACE : return KEYSPACE_LEVEL_PERMISSIONS ; case TABLE : return TABLE_LEVEL_PERMISSIONS ; } throw new AssertionError ( ) ; } @Override public String toString ( ) { switch ( level ) { case ROOT : return <str> ; case KEYSPACE : return String . format ( <str> , keyspace ) ; case TABLE : return String . format ( <str> , keyspace , table ) ; } throw new AssertionError ( ) ; } @Override public boolean equals ( Object o ) { if ( this = = o ) return true ; if ( ! ( o instanceof DataResource ) ) return false ; DataResource ds = ( DataResource ) o ; return Objects . equal ( level , ds . level ) & & Objects . equal ( keyspace , ds . keyspace ) & & Objects . equal ( table , ds . table ) ; } @Override public int hashCode ( ) { return hash ; } } 

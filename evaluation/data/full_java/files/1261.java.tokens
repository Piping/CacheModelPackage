package org . apache . cassandra . utils . btree ; import java . util . function . BiFunction ; import com . google . common . base . Function ; public interface UpdateFunction < K , V > extends Function < K , V > { V apply ( V replacing , K update ) ; boolean abortEarly ( ) ; void allocated ( long heapSize ) ; public static final class Simple < V > implements UpdateFunction < V , V > { private final BiFunction < V , V , V > wrapped ; public Simple ( BiFunction < V , V , V > wrapped ) { this . wrapped = wrapped ; } public V apply ( V v ) { return v ; } public V apply ( V replacing , V update ) { return wrapped . apply ( replacing , update ) ; } public boolean abortEarly ( ) { return false ; } public void allocated ( long heapSize ) { } public static < V > Simple < V > of ( BiFunction < V , V , V > f ) { return new Simple < > ( f ) ; } } static final Simple < Object > noOp = Simple . of ( ( a , b ) - > a ) ; public static < K > UpdateFunction < K , K > noOp ( ) { return ( UpdateFunction < K , K > ) noOp ; } } 

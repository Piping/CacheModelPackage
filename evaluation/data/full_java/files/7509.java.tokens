package org . elasticsearch . search . highlight . vectorhighlight ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . document . Field ; import org . apache . lucene . search . vectorhighlight . FastVectorHighlighter ; import org . apache . lucene . search . vectorhighlight . FieldFragList . WeightedFragInfo ; import org . apache . lucene . search . vectorhighlight . FieldFragList . WeightedFragInfo . SubInfo ; import org . apache . lucene . search . vectorhighlight . FragmentsBuilder ; import org . apache . lucene . util . CollectionUtil ; import org . apache . lucene . util . Version ; import org . elasticsearch . index . analysis . * ; import org . elasticsearch . index . mapper . FieldMapper ; import java . util . Comparator ; import java . util . List ; public final class FragmentBuilderHelper { private FragmentBuilderHelper ( ) { } public static WeightedFragInfo fixWeightedFragInfo ( FieldMapper mapper , Field [ ] values , WeightedFragInfo fragInfo ) { assert fragInfo ! = null : <str> ; assert mapper . fieldType ( ) . names ( ) . indexName ( ) . equals ( values [ <int> ] . name ( ) ) : <str> + values [ <int> ] . name ( ) ; if ( ! fragInfo . getSubInfos ( ) . isEmpty ( ) & & ( containsBrokenAnalysis ( mapper . fieldType ( ) . indexAnalyzer ( ) ) ) ) { final List < SubInfo > subInfos = fragInfo . getSubInfos ( ) ; CollectionUtil . introSort ( subInfos , new Comparator < SubInfo > ( ) { @Override public int compare ( SubInfo o1 , SubInfo o2 ) { int startOffset = o1 . getTermsOffsets ( ) . get ( <int> ) . getStartOffset ( ) ; int startOffset2 = o2 . getTermsOffsets ( ) . get ( <int> ) . getStartOffset ( ) ; return FragmentBuilderHelper . compare ( startOffset , startOffset2 ) ; } } ) ; return new WeightedFragInfo ( Math . min ( fragInfo . getSubInfos ( ) . get ( <int> ) . getTermsOffsets ( ) . get ( <int> ) . getStartOffset ( ) , fragInfo . getStartOffset ( ) ) , fragInfo . getEndOffset ( ) , subInfos , fragInfo . getTotalBoost ( ) ) ; } else { return fragInfo ; } } private static int compare ( int x , int y ) { return ( x < y ) ? - <int> : ( ( x = = y ) ? <int> : <int> ) ; } private static boolean containsBrokenAnalysis ( Analyzer analyzer ) { if ( analyzer instanceof NamedAnalyzer ) { analyzer = ( ( NamedAnalyzer ) analyzer ) . analyzer ( ) ; } if ( analyzer instanceof CustomAnalyzer ) { final CustomAnalyzer a = ( CustomAnalyzer ) analyzer ; if ( a . tokenizerFactory ( ) instanceof EdgeNGramTokenizerFactory | | ( a . tokenizerFactory ( ) instanceof NGramTokenizerFactory & & ! ( ( NGramTokenizerFactory ) a . tokenizerFactory ( ) ) . version ( ) . onOrAfter ( Version . LUCENE_4_2 ) ) ) { return true ; } TokenFilterFactory [ ] tokenFilters = a . tokenFilters ( ) ; for ( TokenFilterFactory tokenFilterFactory : tokenFilters ) { if ( tokenFilterFactory instanceof WordDelimiterTokenFilterFactory | | tokenFilterFactory instanceof EdgeNGramTokenFilterFactory ) { return true ; } if ( tokenFilterFactory instanceof NGramTokenFilterFactory & & ! ( ( NGramTokenFilterFactory ) tokenFilterFactory ) . version ( ) . onOrAfter ( Version . LUCENE_4_2 ) ) { return true ; } } } return false ; } } 

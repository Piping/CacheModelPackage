package org . elasticsearch . gateway ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . action . admin . indices . mapping . get . GetMappingsResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . cluster . routing . allocation . decider . FilterAllocationDecider ; import org . elasticsearch . common . collect . ImmutableOpenMap ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . NodeEnvironment ; import org . elasticsearch . index . Index ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . InternalTestCluster ; import org . elasticsearch . test . InternalTestCluster . RestartCallback ; import java . nio . file . Files ; import java . nio . file . Path ; import java . util . LinkedHashMap ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class MetaDataWriteDataNodesIT extends ESIntegTestCase { public void testMetaWrittenAlsoOnDataNode ( ) throws Exception { String masterNode = internalCluster ( ) . startMasterOnlyNode ( Settings . EMPTY ) ; String dataNode = internalCluster ( ) . startDataOnlyNode ( Settings . EMPTY ) ; assertAcked ( prepareCreate ( <str> ) . setSettings ( <str> , <int> ) ) ; index ( <str> , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; ensureGreen ( <str> ) ; assertIndexInMetaState ( dataNode , <str> ) ; assertIndexInMetaState ( masterNode , <str> ) ; } public void testMetaIsRemovedIfAllShardsFromIndexRemoved ( ) throws Exception { String masterNode = internalCluster ( ) . startMasterOnlyNode ( Settings . EMPTY ) ; InternalTestCluster . Async < String > nodeName1 = internalCluster ( ) . startDataOnlyNodeAsync ( ) ; InternalTestCluster . Async < String > nodeName2 = internalCluster ( ) . startDataOnlyNodeAsync ( ) ; String node1 = nodeName1 . get ( ) ; String node2 = nodeName2 . get ( ) ; String index = <str> ; assertAcked ( prepareCreate ( index ) . setSettings ( Settings . builder ( ) . put ( <str> , <int> ) . put ( FilterAllocationDecider . INDEX_ROUTING_INCLUDE_GROUP + <str> , node1 ) ) ) ; index ( index , <str> , <str> , jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) ) ; ensureGreen ( ) ; assertIndexInMetaState ( node1 , index ) ; assertIndexDirectoryDeleted ( node2 , index ) ; assertIndexInMetaState ( masterNode , index ) ; logger . debug ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareUpdateSettings ( index ) . setSettings ( Settings . builder ( ) . put ( FilterAllocationDecider . INDEX_ROUTING_INCLUDE_GROUP + <str> , node2 ) ) . get ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForRelocatingShards ( <int> ) . get ( ) ; ensureGreen ( ) ; assertIndexDirectoryDeleted ( node1 , index ) ; assertIndexInMetaState ( node2 , index ) ; assertIndexInMetaState ( masterNode , index ) ; } public void testMetaWrittenWhenIndexIsClosedAndMetaUpdated ( ) throws Exception { String masterNode = internalCluster ( ) . startMasterOnlyNode ( Settings . EMPTY ) ; final String dataNode = internalCluster ( ) . startDataOnlyNode ( Settings . EMPTY ) ; final String index = <str> ; assertAcked ( prepareCreate ( index ) . setSettings ( Settings . builder ( ) . put ( <str> , <int> ) ) ) ; logger . info ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; assertIndexInMetaState ( dataNode , index ) ; assertIndexInMetaState ( masterNode , index ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareClose ( index ) . get ( ) ; ClusterStateResponse clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . get ( ) ; assertThat ( clusterStateResponse . getState ( ) . getMetaData ( ) . index ( index ) . getState ( ) . name ( ) , equalTo ( IndexMetaData . State . CLOSE . name ( ) ) ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( index ) . setType ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) . get ( ) ; GetMappingsResponse getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( index ) . addTypes ( <str> ) . get ( ) ; assertNotNull ( ( ( LinkedHashMap ) ( getMappingsResponse . getMappings ( ) . get ( index ) . get ( <str> ) . getSourceAsMap ( ) . get ( <str> ) ) ) . get ( <str> ) ) ; ImmutableOpenMap < String , IndexMetaData > indicesMetaData = getIndicesMetaDataOnNode ( dataNode ) ; assertNotNull ( ( ( LinkedHashMap ) ( indicesMetaData . get ( index ) . getMappings ( ) . get ( <str> ) . getSourceAsMap ( ) . get ( <str> ) ) ) . get ( <str> ) ) ; assertThat ( indicesMetaData . get ( index ) . getState ( ) , equalTo ( IndexMetaData . State . CLOSE ) ) ; internalCluster ( ) . restartNode ( dataNode , new RestartCallback ( ) ) ; client ( ) . admin ( ) . indices ( ) . preparePutMapping ( index ) . setType ( <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ) . get ( ) ; getMappingsResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( index ) . addTypes ( <str> ) . get ( ) ; assertNotNull ( ( ( LinkedHashMap ) ( getMappingsResponse . getMappings ( ) . get ( index ) . get ( <str> ) . getSourceAsMap ( ) . get ( <str> ) ) ) . get ( <str> ) ) ; indicesMetaData = getIndicesMetaDataOnNode ( dataNode ) ; assertNotNull ( ( ( LinkedHashMap ) ( indicesMetaData . get ( index ) . getMappings ( ) . get ( <str> ) . getSourceAsMap ( ) . get ( <str> ) ) ) . get ( <str> ) ) ; assertThat ( indicesMetaData . get ( index ) . getState ( ) , equalTo ( IndexMetaData . State . CLOSE ) ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareOpen ( index ) . get ( ) ) ; indicesMetaData = getIndicesMetaDataOnNode ( dataNode ) ; assertThat ( indicesMetaData . get ( index ) . getState ( ) , equalTo ( IndexMetaData . State . OPEN ) ) ; } protected void assertIndexDirectoryDeleted ( final String nodeName , final String indexName ) throws Exception { assertBusy ( ( ) - > { logger . info ( <str> ) ; assertFalse ( <str> + indexName + <str> + nodeName , indexDirectoryExists ( nodeName , indexName ) ) ; } ) ; } protected void assertIndexInMetaState ( final String nodeName , final String indexName ) throws Exception { assertBusy ( ( ) - > { logger . info ( <str> ) ; try { assertTrue ( <str> + indexName + <str> + nodeName , getIndicesMetaDataOnNode ( nodeName ) . containsKey ( indexName ) ) ; } catch ( Throwable t ) { logger . info ( <str> , t ) ; fail ( <str> ) ; } } ) ; } private boolean indexDirectoryExists ( String nodeName , String indexName ) { NodeEnvironment nodeEnv = ( ( InternalTestCluster ) cluster ( ) ) . getInstance ( NodeEnvironment . class , nodeName ) ; for ( Path path : nodeEnv . indexPaths ( new Index ( indexName ) ) ) { if ( Files . exists ( path ) ) { return true ; } } return false ; } private ImmutableOpenMap < String , IndexMetaData > getIndicesMetaDataOnNode ( String nodeName ) throws Exception { GatewayMetaState nodeMetaState = ( ( InternalTestCluster ) cluster ( ) ) . getInstance ( GatewayMetaState . class , nodeName ) ; MetaData nodeMetaData = nodeMetaState . loadMetaState ( ) ; return nodeMetaData . getIndices ( ) ; } } 

package org . elasticsearch . index . fielddata ; import org . apache . lucene . index . * ; import org . apache . lucene . util . ArrayUtil ; import org . apache . lucene . util . Bits ; import org . apache . lucene . util . BytesRef ; import org . apache . lucene . util . NumericUtils ; import org . elasticsearch . common . geo . GeoPoint ; import java . util . ArrayList ; import java . util . List ; public enum FieldData { ; public static SortedBinaryDocValues emptySortedBinary ( int maxDoc ) { return singleton ( DocValues . emptyBinary ( ) , new Bits . MatchNoBits ( maxDoc ) ) ; } public static NumericDoubleValues emptyNumericDouble ( ) { return new NumericDoubleValues ( ) { @Override public double get ( int docID ) { return <int> ; } } ; } public static SortedNumericDoubleValues emptySortedNumericDoubles ( int maxDoc ) { return singleton ( emptyNumericDouble ( ) , new Bits . MatchNoBits ( maxDoc ) ) ; } public static GeoPointValues emptyGeoPoint ( ) { final GeoPoint point = new GeoPoint ( ) ; return new GeoPointValues ( ) { @Override public GeoPoint get ( int docID ) { return point ; } } ; } public static MultiGeoPointValues emptyMultiGeoPoints ( int maxDoc ) { return singleton ( emptyGeoPoint ( ) , new Bits . MatchNoBits ( maxDoc ) ) ; } public static Bits docsWithValue ( final SortedBinaryDocValues dv , final int maxDoc ) { return new Bits ( ) { @Override public boolean get ( int index ) { dv . setDocument ( index ) ; return dv . count ( ) ! = <int> ; } @Override public int length ( ) { return maxDoc ; } } ; } public static Bits docsWithValue ( final MultiGeoPointValues dv , final int maxDoc ) { return new Bits ( ) { @Override public boolean get ( int index ) { dv . setDocument ( index ) ; return dv . count ( ) ! = <int> ; } @Override public int length ( ) { return maxDoc ; } } ; } public static Bits docsWithValue ( final SortedNumericDoubleValues dv , final int maxDoc ) { return new Bits ( ) { @Override public boolean get ( int index ) { dv . setDocument ( index ) ; return dv . count ( ) ! = <int> ; } @Override public int length ( ) { return maxDoc ; } } ; } public static SortedNumericDocValues toSortableLongBits ( SortedNumericDoubleValues values ) { final NumericDoubleValues singleton = unwrapSingleton ( values ) ; if ( singleton ! = null ) { final NumericDocValues longBits ; if ( singleton instanceof SortableLongBitsToNumericDoubleValues ) { longBits = ( ( SortableLongBitsToNumericDoubleValues ) singleton ) . getLongValues ( ) ; } else { longBits = new SortableLongBitsNumericDocValues ( singleton ) ; } final Bits docsWithField = unwrapSingletonBits ( values ) ; return DocValues . singleton ( longBits , docsWithField ) ; } else { if ( values instanceof SortableLongBitsToSortedNumericDoubleValues ) { return ( ( SortableLongBitsToSortedNumericDoubleValues ) values ) . getLongValues ( ) ; } else { return new SortableLongBitsSortedNumericDocValues ( values ) ; } } } public static SortedNumericDoubleValues sortableLongBitsToDoubles ( SortedNumericDocValues values ) { final NumericDocValues singleton = DocValues . unwrapSingleton ( values ) ; if ( singleton ! = null ) { final NumericDoubleValues doubles ; if ( singleton instanceof SortableLongBitsNumericDocValues ) { doubles = ( ( SortableLongBitsNumericDocValues ) singleton ) . getDoubleValues ( ) ; } else { doubles = new SortableLongBitsToNumericDoubleValues ( singleton ) ; } final Bits docsWithField = DocValues . unwrapSingletonBits ( values ) ; return singleton ( doubles , docsWithField ) ; } else { if ( values instanceof SortableLongBitsSortedNumericDocValues ) { return ( ( SortableLongBitsSortedNumericDocValues ) values ) . getDoubleValues ( ) ; } else { return new SortableLongBitsToSortedNumericDoubleValues ( values ) ; } } } public static SortedNumericDoubleValues castToDouble ( final SortedNumericDocValues values ) { final NumericDocValues singleton = DocValues . unwrapSingleton ( values ) ; if ( singleton ! = null ) { final Bits docsWithField = DocValues . unwrapSingletonBits ( values ) ; return singleton ( new DoubleCastedValues ( singleton ) , docsWithField ) ; } else { return new SortedDoubleCastedValues ( values ) ; } } public static SortedNumericDocValues castToLong ( final SortedNumericDoubleValues values ) { final NumericDoubleValues singleton = unwrapSingleton ( values ) ; if ( singleton ! = null ) { final Bits docsWithField = unwrapSingletonBits ( values ) ; return DocValues . singleton ( new LongCastedValues ( singleton ) , docsWithField ) ; } else { return new SortedLongCastedValues ( values ) ; } } public static SortedNumericDoubleValues singleton ( NumericDoubleValues values , Bits docsWithField ) { return new SingletonSortedNumericDoubleValues ( values , docsWithField ) ; } public static NumericDoubleValues unwrapSingleton ( SortedNumericDoubleValues values ) { if ( values instanceof SingletonSortedNumericDoubleValues ) { return ( ( SingletonSortedNumericDoubleValues ) values ) . getNumericDoubleValues ( ) ; } return null ; } public static Bits unwrapSingletonBits ( SortedNumericDoubleValues dv ) { if ( dv instanceof SingletonSortedNumericDoubleValues ) { return ( ( SingletonSortedNumericDoubleValues ) dv ) . getDocsWithField ( ) ; } else { return null ; } } public static MultiGeoPointValues singleton ( GeoPointValues values , Bits docsWithField ) { return new SingletonMultiGeoPointValues ( values , docsWithField ) ; } public static GeoPointValues unwrapSingleton ( MultiGeoPointValues values ) { if ( values instanceof SingletonMultiGeoPointValues ) { return ( ( SingletonMultiGeoPointValues ) values ) . getGeoPointValues ( ) ; } return null ; } public static Bits unwrapSingletonBits ( MultiGeoPointValues values ) { if ( values instanceof SingletonMultiGeoPointValues ) { return ( ( SingletonMultiGeoPointValues ) values ) . getDocsWithField ( ) ; } return null ; } public static SortedBinaryDocValues singleton ( BinaryDocValues values , Bits docsWithField ) { return new SingletonSortedBinaryDocValues ( values , docsWithField ) ; } public static BinaryDocValues unwrapSingleton ( SortedBinaryDocValues values ) { if ( values instanceof SingletonSortedBinaryDocValues ) { return ( ( SingletonSortedBinaryDocValues ) values ) . getBinaryDocValues ( ) ; } return null ; } public static Bits unwrapSingletonBits ( SortedBinaryDocValues values ) { if ( values instanceof SingletonSortedBinaryDocValues ) { return ( ( SingletonSortedBinaryDocValues ) values ) . getDocsWithField ( ) ; } return null ; } public static boolean isMultiValued ( SortedSetDocValues values ) { return DocValues . unwrapSingleton ( values ) = = null ; } public static boolean isMultiValued ( SortedNumericDocValues values ) { return DocValues . unwrapSingleton ( values ) = = null ; } public static boolean isMultiValued ( SortedNumericDoubleValues values ) { return unwrapSingleton ( values ) = = null ; } public static boolean isMultiValued ( SortedBinaryDocValues values ) { return unwrapSingleton ( values ) ! = null ; } public static boolean isMultiValued ( MultiGeoPointValues values ) { return unwrapSingleton ( values ) = = null ; } public static SortedBinaryDocValues toString ( final SortedNumericDocValues values ) { return toString ( new ToStringValues ( ) { @Override public void get ( int docID , List < CharSequence > list ) { values . setDocument ( docID ) ; for ( int i = <int> , count = values . count ( ) ; i < count ; + + i ) { list . add ( Long . toString ( values . valueAt ( i ) ) ) ; } } } ) ; } public static SortedBinaryDocValues toString ( final SortedNumericDoubleValues values ) { return toString ( new ToStringValues ( ) { @Override public void get ( int docID , List < CharSequence > list ) { values . setDocument ( docID ) ; for ( int i = <int> , count = values . count ( ) ; i < count ; + + i ) { list . add ( Double . toString ( values . valueAt ( i ) ) ) ; } } } ) ; } public static SortedBinaryDocValues toString ( final RandomAccessOrds values ) { return new SortedBinaryDocValues ( ) { @Override public BytesRef valueAt ( int index ) { return values . lookupOrd ( values . ordAt ( index ) ) ; } @Override public void setDocument ( int docId ) { values . setDocument ( docId ) ; } @Override public int count ( ) { return values . cardinality ( ) ; } } ; } public static SortedBinaryDocValues toString ( final MultiGeoPointValues values ) { return toString ( new ToStringValues ( ) { @Override public void get ( int docID , List < CharSequence > list ) { values . setDocument ( docID ) ; for ( int i = <int> , count = values . count ( ) ; i < count ; + + i ) { list . add ( values . valueAt ( i ) . toString ( ) ) ; } } } ) ; } public static RandomAccessOrds maybeSlowRandomAccessOrds ( final SortedSetDocValues dv ) { if ( dv instanceof RandomAccessOrds ) { return ( RandomAccessOrds ) dv ; } else { assert DocValues . unwrapSingleton ( dv ) = = null : <str> ; return new RandomAccessOrds ( ) { int cardinality ; long [ ] ords = new long [ <int> ] ; int ord ; @Override public void setDocument ( int docID ) { cardinality = <int> ; dv . setDocument ( docID ) ; for ( long ord = dv . nextOrd ( ) ; ord ! = SortedSetDocValues . NO_MORE_ORDS ; ord = dv . nextOrd ( ) ) { ords = ArrayUtil . grow ( ords , cardinality + <int> ) ; ords [ cardinality + + ] = ord ; } ord = <int> ; } @Override public long nextOrd ( ) { return ords [ ord + + ] ; } @Override public BytesRef lookupOrd ( long ord ) { return dv . lookupOrd ( ord ) ; } @Override public long getValueCount ( ) { return dv . getValueCount ( ) ; } @Override public long ordAt ( int index ) { return ords [ index ] ; } @Override public int cardinality ( ) { return cardinality ; } } ; } } private static SortedBinaryDocValues toString ( final ToStringValues toStringValues ) { return new SortingBinaryDocValues ( ) { final List < CharSequence > list = new ArrayList < > ( ) ; @Override public void setDocument ( int docID ) { list . clear ( ) ; toStringValues . get ( docID , list ) ; count = list . size ( ) ; grow ( ) ; for ( int i = <int> ; i < count ; + + i ) { final CharSequence s = list . get ( i ) ; values [ i ] . copyChars ( s ) ; } sort ( ) ; } } ; } private static interface ToStringValues { void get ( int docID , List < CharSequence > values ) ; } private static class DoubleCastedValues extends NumericDoubleValues { private final NumericDocValues values ; DoubleCastedValues ( NumericDocValues values ) { this . values = values ; } @Override public double get ( int docID ) { return values . get ( docID ) ; } } private static class SortedDoubleCastedValues extends SortedNumericDoubleValues { private final SortedNumericDocValues values ; SortedDoubleCastedValues ( SortedNumericDocValues in ) { this . values = in ; } @Override public double valueAt ( int index ) { return values . valueAt ( index ) ; } @Override public void setDocument ( int doc ) { values . setDocument ( doc ) ; } @Override public int count ( ) { return values . count ( ) ; } } private static class LongCastedValues extends NumericDocValues { private final NumericDoubleValues values ; LongCastedValues ( NumericDoubleValues values ) { this . values = values ; } @Override public long get ( int docID ) { return ( long ) values . get ( docID ) ; } } private static class SortedLongCastedValues extends SortedNumericDocValues { private final SortedNumericDoubleValues values ; SortedLongCastedValues ( SortedNumericDoubleValues in ) { this . values = in ; } @Override public long valueAt ( int index ) { return ( long ) values . valueAt ( index ) ; } @Override public void setDocument ( int doc ) { values . setDocument ( doc ) ; } @Override public int count ( ) { return values . count ( ) ; } } } 

package io . netty . handler . codec . http . cors ; import io . netty . handler . codec . http . DefaultHttpHeaders ; import io . netty . handler . codec . http . EmptyHttpHeaders ; import io . netty . handler . codec . http . HttpHeaderNames ; import io . netty . handler . codec . http . HttpHeaders ; import io . netty . handler . codec . http . HttpMethod ; import io . netty . util . internal . StringUtil ; import java . util . Arrays ; import java . util . Collections ; import java . util . Date ; import java . util . HashMap ; import java . util . HashSet ; import java . util . LinkedHashSet ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; import java . util . concurrent . Callable ; public final class CorsConfig { private final Set < String > origins ; private final boolean anyOrigin ; private final boolean enabled ; private final Set < String > exposeHeaders ; private final boolean allowCredentials ; private final long maxAge ; private final Set < HttpMethod > allowedRequestMethods ; private final Set < String > allowedRequestHeaders ; private final boolean allowNullOrigin ; private final Map < CharSequence , Callable < ? > > preflightHeaders ; private final boolean shortCurcuit ; private CorsConfig ( final Builder builder ) { origins = new LinkedHashSet < String > ( builder . origins ) ; anyOrigin = builder . anyOrigin ; enabled = builder . enabled ; exposeHeaders = builder . exposeHeaders ; allowCredentials = builder . allowCredentials ; maxAge = builder . maxAge ; allowedRequestMethods = builder . requestMethods ; allowedRequestHeaders = builder . requestHeaders ; allowNullOrigin = builder . allowNullOrigin ; preflightHeaders = builder . preflightHeaders ; shortCurcuit = builder . shortCurcuit ; } public boolean isCorsSupportEnabled ( ) { return enabled ; } public boolean isAnyOriginSupported ( ) { return anyOrigin ; } public String origin ( ) { return origins . isEmpty ( ) ? <str> : origins . iterator ( ) . next ( ) ; } public Set < String > origins ( ) { return origins ; } public boolean isNullOriginAllowed ( ) { return allowNullOrigin ; } public Set < String > exposedHeaders ( ) { return Collections . unmodifiableSet ( exposeHeaders ) ; } public boolean isCredentialsAllowed ( ) { return allowCredentials ; } public long maxAge ( ) { return maxAge ; } public Set < HttpMethod > allowedRequestMethods ( ) { return Collections . unmodifiableSet ( allowedRequestMethods ) ; } public Set < String > allowedRequestHeaders ( ) { return Collections . unmodifiableSet ( allowedRequestHeaders ) ; } public HttpHeaders preflightResponseHeaders ( ) { if ( preflightHeaders . isEmpty ( ) ) { return EmptyHttpHeaders . INSTANCE ; } final HttpHeaders preflightHeaders = new DefaultHttpHeaders ( ) ; for ( Entry < CharSequence , Callable < ? > > entry : this . preflightHeaders . entrySet ( ) ) { final Object value = getValue ( entry . getValue ( ) ) ; if ( value instanceof Iterable ) { preflightHeaders . add ( entry . getKey ( ) , ( Iterable < ? > ) value ) ; } else { preflightHeaders . add ( entry . getKey ( ) , value ) ; } } return preflightHeaders ; } public boolean isShortCurcuit ( ) { return shortCurcuit ; } private static < T > T getValue ( final Callable < T > callable ) { try { return callable . call ( ) ; } catch ( final Exception e ) { throw new IllegalStateException ( <str> + callable + <str> , e ) ; } } @Override public String toString ( ) { return StringUtil . simpleClassName ( this ) + <str> + enabled + <str> + origins + <str> + anyOrigin + <str> + exposeHeaders + <str> + allowCredentials + <str> + maxAge + <str> + allowedRequestMethods + <str> + allowedRequestHeaders + <str> + preflightHeaders + <str> ; } public static Builder withAnyOrigin ( ) { return new Builder ( ) ; } public static Builder withOrigin ( final String origin ) { if ( <str> . equals ( origin ) ) { return new Builder ( ) ; } return new Builder ( origin ) ; } public static Builder withOrigins ( final String . . . origins ) { return new Builder ( origins ) ; } public static class Builder { private final Set < String > origins ; private final boolean anyOrigin ; private boolean allowNullOrigin ; private boolean enabled = true ; private boolean allowCredentials ; private final Set < String > exposeHeaders = new HashSet < String > ( ) ; private long maxAge ; private final Set < HttpMethod > requestMethods = new HashSet < HttpMethod > ( ) ; private final Set < String > requestHeaders = new HashSet < String > ( ) ; private final Map < CharSequence , Callable < ? > > preflightHeaders = new HashMap < CharSequence , Callable < ? > > ( ) ; private boolean noPreflightHeaders ; private boolean shortCurcuit ; public Builder ( final String . . . origins ) { this . origins = new LinkedHashSet < String > ( Arrays . asList ( origins ) ) ; anyOrigin = false ; } public Builder ( ) { anyOrigin = true ; origins = Collections . emptySet ( ) ; } public Builder allowNullOrigin ( ) { allowNullOrigin = true ; return this ; } public Builder disable ( ) { enabled = false ; return this ; } public Builder exposeHeaders ( final String . . . headers ) { exposeHeaders . addAll ( Arrays . asList ( headers ) ) ; return this ; } public Builder allowCredentials ( ) { allowCredentials = true ; return this ; } public Builder maxAge ( final long max ) { maxAge = max ; return this ; } public Builder allowedRequestMethods ( final HttpMethod . . . methods ) { requestMethods . addAll ( Arrays . asList ( methods ) ) ; return this ; } public Builder allowedRequestHeaders ( final String . . . headers ) { requestHeaders . addAll ( Arrays . asList ( headers ) ) ; return this ; } public Builder preflightResponseHeader ( final CharSequence name , final Object . . . values ) { if ( values . length = = <int> ) { preflightHeaders . put ( name , new ConstantValueGenerator ( values [ <int> ] ) ) ; } else { preflightResponseHeader ( name , Arrays . asList ( values ) ) ; } return this ; } public < T > Builder preflightResponseHeader ( final CharSequence name , final Iterable < T > value ) { preflightHeaders . put ( name , new ConstantValueGenerator ( value ) ) ; return this ; } public < T > Builder preflightResponseHeader ( final String name , final Callable < T > valueGenerator ) { preflightHeaders . put ( name , valueGenerator ) ; return this ; } public Builder noPreflightResponseHeaders ( ) { noPreflightHeaders = true ; return this ; } public CorsConfig build ( ) { if ( preflightHeaders . isEmpty ( ) & & ! noPreflightHeaders ) { preflightHeaders . put ( HttpHeaderNames . DATE , new DateValueGenerator ( ) ) ; preflightHeaders . put ( HttpHeaderNames . CONTENT_LENGTH , new ConstantValueGenerator ( <str> ) ) ; } return new CorsConfig ( this ) ; } public Builder shortCurcuit ( ) { shortCurcuit = true ; return this ; } } private static final class ConstantValueGenerator implements Callable < Object > { private final Object value ; private ConstantValueGenerator ( final Object value ) { if ( value = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . value = value ; } @Override public Object call ( ) { return value ; } } public static final class DateValueGenerator implements Callable < Date > { @Override public Date call ( ) throws Exception { return new Date ( ) ; } } } 

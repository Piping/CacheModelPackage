package org . gradle . api . internal . tasks ; import groovy . lang . Closure ; import org . apache . commons . lang . StringUtils ; import org . gradle . api . file . FileCollection ; import org . gradle . api . file . FileTreeElement ; import org . gradle . api . file . SourceDirectorySet ; import org . gradle . api . internal . file . DefaultSourceDirectorySet ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . jvm . ClassDirectoryBinaryNamingScheme ; import org . gradle . api . specs . Spec ; import org . gradle . api . tasks . SourceSet ; import org . gradle . api . tasks . SourceSetOutput ; import org . gradle . util . ConfigureUtil ; import org . gradle . util . GUtil ; public class DefaultSourceSet implements SourceSet { private final String name ; private FileCollection compileClasspath ; private FileCollection runtimeClasspath ; private final SourceDirectorySet javaSource ; private final SourceDirectorySet allJavaSource ; private final SourceDirectorySet resources ; private final String displayName ; private final SourceDirectorySet allSource ; private final ClassDirectoryBinaryNamingScheme namingScheme ; private DefaultSourceSetOutput output ; public DefaultSourceSet ( String name , FileResolver fileResolver ) { this . name = name ; displayName = GUtil . toWords ( this . name ) ; namingScheme = new ClassDirectoryBinaryNamingScheme ( name ) ; String javaSrcDisplayName = String . format ( <str> , displayName ) ; javaSource = new DefaultSourceDirectorySet ( javaSrcDisplayName , fileResolver ) ; javaSource . getFilter ( ) . include ( <str> ) ; allJavaSource = new DefaultSourceDirectorySet ( javaSrcDisplayName , fileResolver ) ; allJavaSource . getFilter ( ) . include ( <str> ) ; allJavaSource . source ( javaSource ) ; String resourcesDisplayName = String . format ( <str> , displayName ) ; resources = new DefaultSourceDirectorySet ( resourcesDisplayName , fileResolver ) ; resources . getFilter ( ) . exclude ( new Spec < FileTreeElement > ( ) { public boolean isSatisfiedBy ( FileTreeElement element ) { return javaSource . contains ( element . getFile ( ) ) ; } } ) ; String allSourceDisplayName = String . format ( <str> , displayName ) ; allSource = new DefaultSourceDirectorySet ( allSourceDisplayName , fileResolver ) ; allSource . source ( resources ) ; allSource . source ( javaSource ) ; } public String getName ( ) { return name ; } @Override public String toString ( ) { return String . format ( <str> , getDisplayName ( ) ) ; } public String getDisplayName ( ) { return displayName ; } public String getClassesTaskName ( ) { return getTaskName ( null , <str> ) ; } public String getCompileTaskName ( String language ) { return getTaskName ( <str> , language ) ; } public String getCompileJavaTaskName ( ) { return getCompileTaskName ( <str> ) ; } public String getProcessResourcesTaskName ( ) { return getTaskName ( <str> , <str> ) ; } public String getJarTaskName ( ) { return getTaskName ( null , <str> ) ; } public String getTaskName ( String verb , String target ) { return namingScheme . getTaskName ( verb , target ) ; } private String getTaskBaseName ( ) { return name . equals ( SourceSet . MAIN_SOURCE_SET_NAME ) ? <str> : GUtil . toCamelCase ( name ) ; } public String getCompileConfigurationName ( ) { return StringUtils . uncapitalize ( String . format ( <str> , getTaskBaseName ( ) ) ) ; } public String getRuntimeConfigurationName ( ) { return StringUtils . uncapitalize ( String . format ( <str> , getTaskBaseName ( ) ) ) ; } public SourceSetOutput getOutput ( ) { return output ; } public void setClasses ( DefaultSourceSetOutput classes ) { this . output = classes ; } public SourceSet compiledBy ( Object . . . taskPaths ) { output . builtBy ( taskPaths ) ; return this ; } public FileCollection getCompileClasspath ( ) { return compileClasspath ; } public FileCollection getRuntimeClasspath ( ) { return runtimeClasspath ; } public void setCompileClasspath ( FileCollection classpath ) { compileClasspath = classpath ; } public void setRuntimeClasspath ( FileCollection classpath ) { runtimeClasspath = classpath ; } public SourceDirectorySet getJava ( ) { return javaSource ; } public SourceSet java ( Closure configureClosure ) { ConfigureUtil . configure ( configureClosure , getJava ( ) ) ; return this ; } public SourceDirectorySet getAllJava ( ) { return allJavaSource ; } public SourceDirectorySet getResources ( ) { return resources ; } public SourceSet resources ( Closure configureClosure ) { ConfigureUtil . configure ( configureClosure , getResources ( ) ) ; return this ; } public SourceDirectorySet getAllSource ( ) { return allSource ; } } 

package org . elasticsearch . index . cache . request ; import org . elasticsearch . common . cache . RemovalListener ; import org . elasticsearch . common . cache . RemovalNotification ; import org . elasticsearch . common . metrics . CounterMetric ; import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . shard . AbstractIndexShardComponent ; import org . elasticsearch . index . shard . ShardId ; import org . elasticsearch . indices . cache . request . IndicesRequestCache ; public class ShardRequestCache extends AbstractIndexShardComponent implements RemovalListener < IndicesRequestCache . Key , IndicesRequestCache . Value > { final CounterMetric evictionsMetric = new CounterMetric ( ) ; final CounterMetric totalMetric = new CounterMetric ( ) ; final CounterMetric hitCount = new CounterMetric ( ) ; final CounterMetric missCount = new CounterMetric ( ) ; public ShardRequestCache ( ShardId shardId , IndexSettings indexSettings ) { super ( shardId , indexSettings ) ; } public RequestCacheStats stats ( ) { return new RequestCacheStats ( totalMetric . count ( ) , evictionsMetric . count ( ) , hitCount . count ( ) , missCount . count ( ) ) ; } public void onHit ( ) { hitCount . inc ( ) ; } public void onMiss ( ) { missCount . inc ( ) ; } public void onCached ( IndicesRequestCache . Key key , IndicesRequestCache . Value value ) { totalMetric . inc ( key . ramBytesUsed ( ) + value . ramBytesUsed ( ) ) ; } @Override public void onRemoval ( RemovalNotification < IndicesRequestCache . Key , IndicesRequestCache . Value > removalNotification ) { if ( removalNotification . getRemovalReason ( ) = = RemovalNotification . RemovalReason . EVICTED ) { evictionsMetric . inc ( ) ; } long dec = <int> ; if ( removalNotification . getKey ( ) ! = null ) { dec + = removalNotification . getKey ( ) . ramBytesUsed ( ) ; } if ( removalNotification . getValue ( ) ! = null ) { dec + = removalNotification . getValue ( ) . ramBytesUsed ( ) ; } totalMetric . dec ( dec ) ; } } 

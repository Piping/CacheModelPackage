package com . badlogic . gdx . graphics . g3d . particles . values ; import com . badlogic . gdx . utils . Json ; import com . badlogic . gdx . utils . JsonValue ; public class GradientColorValue extends ParticleValue { static private float [ ] temp = new float [ <int> ] ; private float [ ] colors = { <int> , <int> , <int> } ; public float [ ] timeline = { <int> } ; public float [ ] getTimeline ( ) { return timeline ; } public void setTimeline ( float [ ] timeline ) { this . timeline = timeline ; } public float [ ] getColors ( ) { return colors ; } public void setColors ( float [ ] colors ) { this . colors = colors ; } public float [ ] getColor ( float percent ) { getColor ( percent , temp , <int> ) ; return temp ; } public void getColor ( float percent , float [ ] out , int index ) { int startIndex = <int> , endIndex = - <int> ; float [ ] timeline = this . timeline ; int n = timeline . length ; for ( int i = <int> ; i < n ; i + + ) { float t = timeline [ i ] ; if ( t > percent ) { endIndex = i ; break ; } startIndex = i ; } float startTime = timeline [ startIndex ] ; startIndex * = <int> ; float r1 = colors [ startIndex ] ; float g1 = colors [ startIndex + <int> ] ; float b1 = colors [ startIndex + <int> ] ; if ( endIndex = = - <int> ) { out [ index ] = r1 ; out [ index + <int> ] = g1 ; out [ index + <int> ] = b1 ; return ; } float factor = ( percent - startTime ) / ( timeline [ endIndex ] - startTime ) ; endIndex * = <int> ; out [ index ] = r1 + ( colors [ endIndex ] - r1 ) * factor ; out [ index + <int> ] = g1 + ( colors [ endIndex + <int> ] - g1 ) * factor ; out [ index + <int> ] = b1 + ( colors [ endIndex + <int> ] - b1 ) * factor ; } @Override public void write ( Json json ) { super . write ( json ) ; json . writeValue ( <str> , colors ) ; json . writeValue ( <str> , timeline ) ; } @Override public void read ( Json json , JsonValue jsonData ) { super . read ( json , jsonData ) ; colors = json . readValue ( <str> , float [ ] . class , jsonData ) ; timeline = json . readValue ( <str> , float [ ] . class , jsonData ) ; } public void load ( GradientColorValue value ) { super . load ( value ) ; colors = new float [ value . colors . length ] ; System . arraycopy ( value . colors , <int> , colors , <int> , colors . length ) ; timeline = new float [ value . timeline . length ] ; System . arraycopy ( value . timeline , <int> , timeline , <int> , timeline . length ) ; } } 

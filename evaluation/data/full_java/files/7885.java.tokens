package org . elasticsearch . cluster . shards ; import org . elasticsearch . action . admin . cluster . shards . ClusterSearchShardsGroup ; import org . elasticsearch . action . admin . cluster . shards . ClusterSearchShardsResponse ; import org . elasticsearch . cluster . metadata . AliasAction ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . Arrays ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_METADATA ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class ClusterSearchShardsIT extends ESIntegTestCase { @Override protected Settings nodeSettings ( int nodeOrdinal ) { switch ( nodeOrdinal ) { case <int> : return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , <str> ) . build ( ) ; case <int> : return settingsBuilder ( ) . put ( super . nodeSettings ( nodeOrdinal ) ) . put ( <str> , <str> ) . build ( ) ; } return super . nodeSettings ( nodeOrdinal ) ; } public void testSingleShardAllocation ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <int> ) . put ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; ClusterSearchShardsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareSearchShards ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( response . getGroups ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShardId ( ) , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShards ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getNodes ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShards ( ) [ <int> ] . currentNodeId ( ) , equalTo ( response . getNodes ( ) [ <int> ] . getId ( ) ) ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareSearchShards ( <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( response . getGroups ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShardId ( ) , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShards ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getNodes ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShards ( ) [ <int> ] . currentNodeId ( ) , equalTo ( response . getNodes ( ) [ <int> ] . getId ( ) ) ) ; } public void testMultipleShardsSingleNodeAllocation ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <int> ) . put ( <str> , <str> ) ) . execute ( ) . actionGet ( ) ; ensureGreen ( ) ; ClusterSearchShardsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareSearchShards ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( response . getGroups ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getNodes ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShards ( ) [ <int> ] . currentNodeId ( ) , equalTo ( response . getNodes ( ) [ <int> ] . getId ( ) ) ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareSearchShards ( <str> ) . setRouting ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( response . getGroups ( ) . length , equalTo ( <int> ) ) ; response = client ( ) . admin ( ) . cluster ( ) . prepareSearchShards ( <str> ) . setPreference ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( response . getGroups ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShardId ( ) , equalTo ( <int> ) ) ; } public void testMultipleIndicesAllocation ( ) throws Exception { client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . setSettings ( settingsBuilder ( ) . put ( <str> , <str> ) . put ( <str> , <int> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . indices ( ) . prepareAliases ( ) . addAliasAction ( AliasAction . newAddAliasAction ( <str> , <str> ) . routing ( <str> ) ) . addAliasAction ( AliasAction . newAddAliasAction ( <str> , <str> ) . routing ( <str> ) ) . execute ( ) . actionGet ( ) ; client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . execute ( ) . actionGet ( ) ; ClusterSearchShardsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareSearchShards ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( response . getGroups ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShards ( ) . length , equalTo ( <int> ) ) ; assertThat ( response . getGroups ( ) [ <int> ] . getShards ( ) . length , equalTo ( <int> ) ) ; boolean seenTest1 = false ; boolean seenTest2 = false ; for ( ClusterSearchShardsGroup group : response . getGroups ( ) ) { if ( group . getIndex ( ) . equals ( <str> ) ) { seenTest1 = true ; assertThat ( group . getShards ( ) . length , equalTo ( <int> ) ) ; } else if ( group . getIndex ( ) . equals ( <str> ) ) { seenTest2 = true ; assertThat ( group . getShards ( ) . length , equalTo ( <int> ) ) ; } else { fail ( ) ; } } assertThat ( seenTest1 , equalTo ( true ) ) ; assertThat ( seenTest2 , equalTo ( true ) ) ; assertThat ( response . getNodes ( ) . length , equalTo ( <int> ) ) ; } public void testClusterSearchShardsWithBlocks ( ) { createIndex ( <str> ) ; NumShards numShards = getNumShards ( <str> ) ; int docs = between ( <int> , <int> ) ; for ( int i = <int> ; i < docs ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; } ensureGreen ( <str> ) ; for ( String blockSetting : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE , SETTING_READ_ONLY ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; ClusterSearchShardsResponse response = client ( ) . admin ( ) . cluster ( ) . prepareSearchShards ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( response . getGroups ( ) . length , equalTo ( numShards . numPrimaries ) ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } try { enableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; assertBlocked ( client ( ) . admin ( ) . cluster ( ) . prepareSearchShards ( <str> ) ) ; } finally { disableIndexBlock ( <str> , SETTING_BLOCKS_METADATA ) ; } } } 

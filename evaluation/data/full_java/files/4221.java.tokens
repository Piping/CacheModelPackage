package org . eclipse . debug . internal . ui . launchConfigurations ; import java . lang . reflect . InvocationTargetException ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationType ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . core . ILaunchDelegate ; import org . eclipse . debug . core . ILaunchManager ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . core . LaunchConfigurationWorkingCopy ; import org . eclipse . debug . internal . core . LaunchManager ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . ILaunchConfigurationDialog ; import org . eclipse . debug . ui . ILaunchConfigurationTab ; import org . eclipse . debug . ui . ILaunchConfigurationTab2 ; import org . eclipse . debug . ui . ILaunchConfigurationTabGroup ; import org . eclipse . jface . dialogs . Dialog ; import org . eclipse . jface . dialogs . ErrorDialog ; import org . eclipse . jface . dialogs . IDialogConstants ; import org . eclipse . jface . operation . IRunnableWithProgress ; import org . eclipse . jface . resource . ColorRegistry ; import org . eclipse . jface . resource . JFaceResources ; import org . eclipse . osgi . util . NLS ; import org . eclipse . swt . SWT ; import org . eclipse . swt . custom . BusyIndicator ; import org . eclipse . swt . custom . CTabFolder ; import org . eclipse . swt . custom . CTabItem ; import org . eclipse . swt . custom . ScrolledComposite ; import org . eclipse . swt . custom . StackLayout ; import org . eclipse . swt . custom . ViewForm ; import org . eclipse . swt . events . ModifyEvent ; import org . eclipse . swt . events . ModifyListener ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Color ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . Image ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . Control ; import org . eclipse . swt . widgets . Label ; import org . eclipse . swt . widgets . Link ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . IWorkbenchPreferenceConstants ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . progress . WorkbenchJob ; import com . ibm . icu . text . MessageFormat ; public class LaunchConfigurationTabGroupViewer { private ILaunchConfigurationDialog fDialog ; private ILaunchConfiguration fOriginal ; private ILaunchConfigurationWorkingCopy fWorkingCopy ; private Composite fViewerControl ; private Text fNameWidget ; private Composite fGroupComposite ; private CTabFolder fTabFolder ; private ILaunchConfigurationTabGroup fTabGroup ; private int fCurrentTabIndex = - <int> ; private Button fApplyButton ; private Button fRevertButton ; private boolean fDisposingTabs = false ; private boolean fInitializingTabs = false ; private String fDescription = null ; private Composite fTabPlaceHolder = null ; private Link fOptionsLink = null ; private Label fOptionsErrorLabel = null ; private Composite fGettingStarted = null ; private ViewForm fViewform ; private Job fRefreshJob ; public LaunchConfigurationTabGroupViewer ( Composite parent , ILaunchConfigurationDialog dialog ) { super ( ) ; fDialog = dialog ; createControl ( parent ) ; } public void dispose ( ) { disposeTabGroup ( ) ; } protected void disposeTabGroup ( ) { if ( fTabGroup ! = null ) { fTabGroup . dispose ( ) ; fTabGroup = null ; } } private void createControl ( Composite parent ) { fViewerControl = parent ; fViewform = new ViewForm ( parent , SWT . FLAT | SWT . BORDER ) ; GridLayout layout = new GridLayout ( <int> , false ) ; layout . horizontalSpacing = <int> ; layout . verticalSpacing = <int> ; fViewform . setLayout ( layout ) ; GridData gd = new GridData ( GridData . FILL_BOTH ) ; fViewform . setLayoutData ( gd ) ; fViewform . setTopLeft ( null ) ; Composite mainComp = SWTFactory . createComposite ( fViewform , fViewform . getFont ( ) , <int> , <int> , <int> , <int> , <int> ) ; fViewform . setContent ( mainComp ) ; fTabPlaceHolder = SWTFactory . createComposite ( mainComp , <int> , <int> , GridData . FILL_BOTH ) ; fTabPlaceHolder . setLayout ( new StackLayout ( ) ) ; fGettingStarted = SWTFactory . createComposite ( fTabPlaceHolder , <int> , <int> , GridData . FILL_BOTH ) ; createGettingStarted ( fGettingStarted ) ; fGroupComposite = SWTFactory . createComposite ( fTabPlaceHolder , fTabPlaceHolder . getFont ( ) , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; SWTFactory . createLabel ( fGroupComposite , LaunchConfigurationsMessages . LaunchConfigurationDialog__Name__16 , <int> ) ; fNameWidget = new Text ( fGroupComposite , SWT . SINGLE | SWT . BORDER ) ; fNameWidget . setLayoutData ( new GridData ( GridData . FILL_HORIZONTAL ) ) ; fNameWidget . addModifyListener ( new ModifyListener ( ) { @Override public void modifyText ( ModifyEvent e ) { if ( ! fInitializingTabs ) { handleNameModified ( ) ; } } } ) ; createTabFolder ( fGroupComposite ) ; Composite blComp = SWTFactory . createComposite ( mainComp , mainComp . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL ) ; Composite linkComp = SWTFactory . createComposite ( blComp , blComp . getFont ( ) , <int> , <int> , GridData . FILL_HORIZONTAL ) ; fOptionsErrorLabel = new Label ( linkComp , SWT . NONE ) ; gd = new GridData ( ) ; fOptionsErrorLabel . setLayoutData ( gd ) ; fOptionsLink = new Link ( linkComp , SWT . WRAP ) ; fOptionsLink . setFont ( linkComp . getFont ( ) ) ; gd = new GridData ( SWT . LEFT ) ; gd . grabExcessHorizontalSpace = true ; fOptionsLink . setLayoutData ( gd ) ; fOptionsLink . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { try { if ( ! canLaunchWithModes ( ) ) { SelectLaunchModesDialog sld = new SelectLaunchModesDialog ( getShell ( ) , getLaunchConfigurationDialog ( ) . getMode ( ) , getWorkingCopy ( ) ) ; if ( sld . open ( ) = = IDialogConstants . OK_ID ) { Object [ ] res = sld . getResult ( ) ; if ( res ! = null ) { @SuppressWarnings ( <str> ) Set < String > modes = ( Set < String > ) res [ <int> ] ; modes . remove ( getLaunchConfigurationDialog ( ) . getMode ( ) ) ; ILaunchConfigurationWorkingCopy wc = getWorkingCopy ( ) ; wc . setModes ( modes ) ; refreshStatus ( ) ; } } } else if ( hasMultipleDelegates ( ) ) { SelectLaunchersDialog sldd = new SelectLaunchersDialog ( getShell ( ) , getWorkingCopy ( ) . getType ( ) . getDelegates ( getCurrentModeSet ( ) ) , getWorkingCopy ( ) , getLaunchConfigurationDialog ( ) . getMode ( ) ) ; if ( sldd . open ( ) = = IDialogConstants . OK_ID ) { displayInstanceTabs ( true ) ; refreshStatus ( ) ; } } } catch ( CoreException ex ) { } } } ) ; fOptionsLink . setVisible ( false ) ; Composite buttonComp = SWTFactory . createComposite ( blComp , <int> , <int> , GridData . HORIZONTAL_ALIGN_END ) ; fRevertButton = SWTFactory . createPushButton ( buttonComp , LaunchConfigurationsMessages . LaunchConfigurationDialog_Revert_2 , null , GridData . HORIZONTAL_ALIGN_END ) ; fRevertButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent evt ) { handleRevertPressed ( ) ; } } ) ; fApplyButton = SWTFactory . createPushButton ( buttonComp , LaunchConfigurationsMessages . LaunchConfigurationDialog__Apply_17 , null , GridData . HORIZONTAL_ALIGN_END ) ; fApplyButton . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent evt ) { handleApplyPressed ( ) ; } } ) ; Dialog . applyDialogFont ( parent ) ; } private void createGettingStarted ( Composite parent ) { Font font = parent . getFont ( ) ; GridData gd = null ; int width = parent . getBounds ( ) . width - <int> ; SWTFactory . createWrapLabel ( parent , LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_1 , <int> , width ) ; SWTFactory . createWrapCLabel ( parent , LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_2 , DebugUITools . getImage ( IInternalDebugUIConstants . IMG_ELCL_NEW_CONFIG ) , <int> , width ) ; SWTFactory . createWrapCLabel ( parent , LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_6 , DebugUITools . getImage ( IInternalDebugUIConstants . IMG_ELCL_DUPLICATE_CONFIG ) , <int> , width ) ; SWTFactory . createWrapCLabel ( parent , LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_4 , DebugUITools . getImage ( IInternalDebugUIConstants . IMG_ELCL_DELETE_CONFIG ) , <int> , width ) ; SWTFactory . createWrapCLabel ( parent , LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_8 , DebugUITools . getImage ( IInternalDebugUIConstants . IMG_ELCL_FILTER_CONFIGS ) , <int> , width ) ; SWTFactory . createWrapCLabel ( parent , LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_3 , DebugUITools . getImage ( IInternalDebugUIConstants . IMG_OVR_TRANSPARENT ) , <int> , width ) ; SWTFactory . createHorizontalSpacer ( parent , <int> ) ; Link link = new Link ( parent , SWT . LEFT | SWT . WRAP ) ; link . setText ( LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_5 ) ; link . setFont ( font ) ; gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . widthHint = width ; link . setLayoutData ( gd ) ; link . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent e ) { SWTFactory . showPreferencePage ( <str> ) ; } } ) ; } private void createTabFolder ( Composite parent ) { if ( fTabFolder = = null ) { ColorRegistry reg = JFaceResources . getColorRegistry ( ) ; Color c1 = reg . get ( <str> ) , c2 = reg . get ( <str> ) ; fTabFolder = new CTabFolder ( parent , SWT . NO_REDRAW_RESIZE | SWT . FLAT ) ; fTabFolder . setSelectionBackground ( new Color [ ] { c1 , c2 } , new int [ ] { <int> } , true ) ; fTabFolder . setSelectionForeground ( reg . get ( <str> ) ) ; fTabFolder . setSimple ( PlatformUI . getPreferenceStore ( ) . getBoolean ( IWorkbenchPreferenceConstants . SHOW_TRADITIONAL_STYLE_TABS ) ) ; fTabFolder . setBorderVisible ( true ) ; GridData gd = new GridData ( GridData . FILL_BOTH ) ; gd . horizontalSpan = <int> ; fTabFolder . setLayoutData ( gd ) ; fTabFolder . setFont ( parent . getFont ( ) ) ; fTabFolder . addSelectionListener ( new SelectionAdapter ( ) { @Override public void widgetSelected ( SelectionEvent event ) { if ( ! fInitializingTabs ) { handleTabSelected ( ) ; refresh ( ) ; } } } ) ; } } protected Button getApplyButton ( ) { return fApplyButton ; } protected Button getRevertButton ( ) { return fRevertButton ; } public void setName ( String name ) { if ( getWorkingCopy ( ) ! = null ) { if ( name = = null ) { fNameWidget . setText ( IInternalDebugCoreConstants . EMPTY_STRING ) ; } else { fNameWidget . setText ( name . trim ( ) ) ; } refreshStatus ( ) ; } } public Control getControl ( ) { return fViewerControl ; } private Shell getShell ( ) { return getControl ( ) . getShell ( ) ; } public Object getInput ( ) { return getConfiguration ( ) ; } public void refresh ( ) { if ( fInitializingTabs ) { return ; } ILaunchConfigurationTab [ ] tabs = getTabs ( ) ; if ( tabs ! = null ) { boolean newwc = ! getWorkingCopy ( ) . isDirty ( ) ; ILaunchConfigurationTab tab = getActiveTab ( ) ; if ( tab ! = null ) { tab . performApply ( getWorkingCopy ( ) ) ; } if ( ( fOriginal instanceof ILaunchConfigurationWorkingCopy ) & & newwc ) { try { ILaunchConfigurationWorkingCopy copy = getWorkingCopy ( ) ; if ( copy ! = null ) { copy . doSave ( ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } updateButtons ( ) ; CTabItem item = null ; boolean error = false ; Image image = null ; for ( int i = <int> ; i < tabs . length ; i + + ) { item = fTabFolder . getItem ( i ) ; image = tabs [ i ] . getImage ( ) ; item . setImage ( image ) ; if ( ! tabs [ i ] . isValid ( getWorkingCopy ( ) ) ) { error = tabs [ i ] . getErrorMessage ( ) ! = null ; if ( error ) { item . setImage ( DebugUIPlugin . getDefault ( ) . getLaunchConfigurationManager ( ) . getErrorTabImage ( tabs [ i ] ) ) ; } } } showLink ( ) ; getLaunchConfigurationDialog ( ) . updateMessage ( ) ; } } private void showLink ( ) { String text = null ; if ( ! canLaunchWithModes ( ) ) { text = LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_13 ; } else if ( hasMultipleDelegates ( ) ) { ILaunchDelegate delegate = getPreferredDelegate ( ) ; if ( delegate ! = null ) { String name = delegate . getName ( ) ; if ( name = = null ) { text = LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_15 ; } else { text = MessageFormat . format ( LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_16 , new Object [ ] { name } ) ; } } else { text = LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_17 ; } } if ( text ! = null ) { fOptionsLink . setText ( text ) ; } fOptionsLink . setVisible ( ! canLaunchWithModes ( ) | | hasMultipleDelegates ( ) ) ; if ( hasDuplicateDelegates ( ) ) { fOptionsErrorLabel . setImage ( JFaceResources . getImage ( Dialog . DLG_IMG_MESSAGE_ERROR ) ) ; } else { fOptionsErrorLabel . setImage ( null ) ; } fViewform . layout ( true , true ) ; } protected ILaunchDelegate getPreferredDelegate ( ) { ILaunchDelegate preferred = null ; ILaunchConfigurationWorkingCopy config = getWorkingCopy ( ) ; if ( config ! = null ) { try { Set < String > modes = getCurrentModeSet ( ) ; preferred = config . getPreferredDelegate ( modes ) ; if ( preferred = = null ) { preferred = config . getType ( ) . getPreferredDelegate ( modes ) ; } } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } } return preferred ; } private Set < String > getCurrentModeSet ( ) { Set < String > set = new HashSet < String > ( ) ; ILaunchConfigurationWorkingCopy config = getWorkingCopy ( ) ; if ( config ! = null ) { try { set . addAll ( config . getModes ( ) ) ; set . add ( getLaunchConfigurationDialog ( ) . getMode ( ) ) ; } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } } return set ; } ILaunchConfiguration getConfiguration ( ) { if ( fOriginal = = null ) { return getWorkingCopy ( ) ; } return fOriginal ; } private void updateButtons ( ) { boolean isDirty = isDirty ( ) ; fApplyButton . setEnabled ( isDirty & & canSave ( ) ) ; fRevertButton . setEnabled ( isDirty ) ; } public void setInput ( final Object input ) { if ( DebugUIPlugin . getStandardDisplay ( ) . getThread ( ) . equals ( Thread . currentThread ( ) ) ) { setInput0 ( input ) ; } else { DebugUIPlugin . getStandardDisplay ( ) . syncExec ( new Runnable ( ) { @Override public void run ( ) { setInput0 ( input ) ; } } ) ; } } private void setInput0 ( Object input ) { if ( input = = null ) { if ( getConfiguration ( ) = = null ) { return ; } inputChanged ( input ) ; } else { if ( ! input . equals ( getConfiguration ( ) ) ) { inputChanged ( input ) ; } } } protected void inputChanged ( Object input ) { final Object finput = input ; Runnable r = new Runnable ( ) { @Override public void run ( ) { try { fViewform . setRedraw ( false ) ; if ( finput instanceof ILaunchConfiguration ) { ILaunchConfiguration configuration = ( ILaunchConfiguration ) finput ; boolean refreshtabs = ! delegatesEqual ( fWorkingCopy , configuration ) ; fOriginal = configuration ; fWorkingCopy = configuration . getWorkingCopy ( ) ; displayInstanceTabs ( refreshtabs ) ; } else if ( finput instanceof ILaunchConfigurationType ) { fDescription = getDescription ( ( ILaunchConfigurationType ) finput ) ; setNoInput ( ) ; } else { setNoInput ( ) ; } } catch ( CoreException ce ) { errorDialog ( ce ) ; setNoInput ( ) ; } finally { refreshStatus ( ) ; fViewform . setRedraw ( true ) ; } } } ; BusyIndicator . showWhile ( getShell ( ) . getDisplay ( ) , r ) ; } private void setNoInput ( ) { fOriginal = null ; fWorkingCopy = null ; disposeExistingTabs ( ) ; updateButtons ( ) ; updateVisibleControls ( false ) ; ILaunchConfigurationDialog lcd = getLaunchConfigurationDialog ( ) ; if ( lcd instanceof LaunchConfigurationsDialog ) { if ( ( ( LaunchConfigurationsDialog ) lcd ) . isTreeSelectionEmpty ( ) ) { fDescription = IInternalDebugCoreConstants . EMPTY_STRING ; } } } protected boolean delegatesEqual ( ILaunchConfiguration config1 , ILaunchConfiguration config2 ) { try { if ( config1 = = null | | config2 = = null ) { return false ; } if ( config1 . getType ( ) . equals ( config2 . getType ( ) ) ) { Set < String > modes = getCurrentModeSet ( ) ; ILaunchDelegate d1 = config1 . getPreferredDelegate ( modes ) ; if ( d1 = = null ) { d1 = config1 . getType ( ) . getPreferredDelegate ( modes ) ; } ILaunchDelegate d2 = config2 . getPreferredDelegate ( modes ) ; if ( d2 = = null ) { d2 = config2 . getType ( ) . getPreferredDelegate ( modes ) ; } if ( d1 = = null ) { return d2 = = null ; } else { return d1 . equals ( d2 ) ; } } } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } return false ; } private void updateVisibleControls ( boolean visible ) { fApplyButton . setVisible ( visible ) ; fRevertButton . setVisible ( visible ) ; fOptionsLink . setVisible ( visible ) ; if ( visible ) { ( ( StackLayout ) fTabPlaceHolder . getLayout ( ) ) . topControl = fGroupComposite ; } else { ( ( StackLayout ) fTabPlaceHolder . getLayout ( ) ) . topControl = fGettingStarted ; } fTabPlaceHolder . layout ( true , true ) ; } protected void setFocusOnName ( ) { fNameWidget . setFocus ( ) ; } protected void displayInstanceTabs ( boolean redrawTabs ) { fInitializingTabs = true ; ILaunchConfigurationType type = null ; try { type = getWorkingCopy ( ) . getType ( ) ; } catch ( CoreException e ) { errorDialog ( e ) ; fInitializingTabs = false ; return ; } if ( redrawTabs ) { showInstanceTabsFor ( type ) ; } updateVisibleControls ( true ) ; ILaunchConfigurationTabGroup tabGroup = getTabGroup ( ) ; if ( tabGroup = = null ) { IStatus status = new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , MessageFormat . format ( LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_No_tabs_defined_for_launch_configuration_type__0__1 , new Object [ ] { type . getName ( ) } ) , null ) ; CoreException e = new CoreException ( status ) ; errorDialog ( e ) ; fInitializingTabs = false ; return ; } tabGroup . initializeFrom ( getWorkingCopy ( ) ) ; fNameWidget . setText ( getWorkingCopy ( ) . getName ( ) ) ; fCurrentTabIndex = fTabFolder . getSelectionIndex ( ) ; fInitializingTabs = false ; if ( ! fViewform . isVisible ( ) ) { fViewform . setVisible ( true ) ; } } private void showInstanceTabsFor ( ILaunchConfigurationType configType ) { Class < ? extends ILaunchConfigurationTab > tabKind = null ; if ( getActiveTab ( ) ! = null ) { tabKind = getActiveTab ( ) . getClass ( ) ; } ILaunchConfigurationTabGroup group = null ; try { group = createGroup ( ) ; } catch ( CoreException ce ) { DebugUIPlugin . errorDialog ( getShell ( ) , LaunchConfigurationsMessages . LaunchConfigurationDialog_Error_19 , LaunchConfigurationsMessages . LaunchConfigurationDialog_Exception_occurred_creating_launch_configuration_tabs_27 , ce ) ; return ; } disposeExistingTabs ( ) ; fTabGroup = group ; ILaunchConfigurationTab [ ] tabs = getTabs ( ) ; CTabItem tab = null ; String name = IInternalDebugCoreConstants . EMPTY_STRING ; Control control = null ; for ( int i = <int> ; i < tabs . length ; i + + ) { tab = new CTabItem ( fTabFolder , SWT . BORDER ) ; name = tabs [ i ] . getName ( ) ; if ( name = = null ) { name = LaunchConfigurationsMessages . LaunchConfigurationDialog_unspecified_28 ; } tab . setText ( name ) ; tab . setImage ( tabs [ i ] . getImage ( ) ) ; ScrolledComposite sc = new ScrolledComposite ( tab . getParent ( ) , SWT . V_SCROLL | SWT . H_SCROLL ) ; sc . setFont ( tab . getParent ( ) . getFont ( ) ) ; sc . setExpandHorizontal ( true ) ; sc . setExpandVertical ( true ) ; sc . setShowFocusedControl ( true ) ; tabs [ i ] . createControl ( sc ) ; control = tabs [ i ] . getControl ( ) ; if ( control ! = null ) { sc . setContent ( control ) ; sc . setMinSize ( control . computeSize ( SWT . DEFAULT , SWT . DEFAULT ) ) ; tab . setControl ( control . getParent ( ) ) ; } } if ( tabs . length > <int> ) { setActiveTab ( tabs [ <int> ] ) ; } for ( int i = <int> ; i < tabs . length ; i + + ) { if ( tabs [ i ] . getClass ( ) . equals ( tabKind ) ) { setActiveTab ( tabs [ i ] ) ; break ; } } fDescription = getDescription ( configType ) ; } private String getDescription ( ILaunchConfigurationType configType ) { String description = null ; if ( configType ! = null ) { String mode = fDialog . getMode ( ) ; description = LaunchConfigurationPresentationManager . getDefault ( ) . getDescription ( configType , mode ) ; } if ( description = = null ) { description = IInternalDebugCoreConstants . EMPTY_STRING ; } return description ; } protected ILaunchConfigurationTabGroup createGroup ( ) throws CoreException { final Object [ ] finalArray = new Object [ <int> ] ; Runnable runnable = new Runnable ( ) { @Override public void run ( ) { ILaunchConfigurationTabGroup tabGroup = null ; try { tabGroup = LaunchConfigurationPresentationManager . getDefault ( ) . getTabGroup ( getWorkingCopy ( ) , getLaunchConfigurationDialog ( ) . getMode ( ) ) ; finalArray [ <int> ] = tabGroup ; } catch ( CoreException ce ) { finalArray [ <int> ] = ce ; return ; } tabGroup . createTabs ( getLaunchConfigurationDialog ( ) , getLaunchConfigurationDialog ( ) . getMode ( ) ) ; ILaunchConfigurationTab [ ] tabs = tabGroup . getTabs ( ) ; for ( int i = <int> ; i < tabs . length ; i + + ) { tabs [ i ] . setLaunchConfigurationDialog ( getLaunchConfigurationDialog ( ) ) ; } } } ; BusyIndicator . showWhile ( getControl ( ) . getDisplay ( ) , runnable ) ; if ( finalArray [ <int> ] ! = null ) { throw ( CoreException ) finalArray [ <int> ] ; } return ( ILaunchConfigurationTabGroup ) finalArray [ <int> ] ; } public ILaunchConfigurationTab [ ] getTabs ( ) { if ( getTabGroup ( ) ! = null ) { return getTabGroup ( ) . getTabs ( ) ; } return null ; } public ILaunchConfigurationTab getActiveTab ( ) { ILaunchConfigurationTab [ ] tabs = getTabs ( ) ; if ( fTabFolder ! = null & & tabs ! = null ) { int pageIndex = fTabFolder . getSelectionIndex ( ) ; if ( pageIndex > = <int> ) { return tabs [ pageIndex ] ; } } return null ; } public boolean isDirty ( ) { ILaunchConfigurationWorkingCopy workingCopy = getWorkingCopy ( ) ; if ( workingCopy = = null ) { return false ; } if ( workingCopy . getParent ( ) ! = null ) { return ! workingCopy . getParent ( ) . contentsEqual ( workingCopy ) ; } if ( workingCopy . getOriginal ( ) = = null ) { return true ; } return fOriginal ! = null & & ! fOriginal . contentsEqual ( workingCopy ) ; } private Job getUpdateJob ( ) { if ( fRefreshJob = = null ) { fRefreshJob = createUpdateJob ( ) ; fRefreshJob . setSystem ( true ) ; } return fRefreshJob ; } protected void scheduleUpdateJob ( ) { Job job = getUpdateJob ( ) ; job . cancel ( ) ; job . schedule ( getUpdateJobDelay ( ) ) ; } protected long getUpdateJobDelay ( ) { return <int> ; } protected Job createUpdateJob ( ) { return new WorkbenchJob ( getControl ( ) . getDisplay ( ) , <str> ) { @Override public IStatus runInUIThread ( IProgressMonitor monitor ) { if ( ! getControl ( ) . isDisposed ( ) ) { refreshStatus ( ) ; } return Status . OK_STATUS ; } @Override public boolean shouldRun ( ) { return ! getControl ( ) . isDisposed ( ) ; } } ; } protected void refreshStatus ( ) { if ( ! fInitializingTabs ) { LaunchConfigurationsDialog lcd = ( LaunchConfigurationsDialog ) getLaunchConfigurationDialog ( ) ; lcd . refreshStatus ( ) ; } } protected ILaunchConfigurationDialog getLaunchConfigurationDialog ( ) { return fDialog ; } protected ILaunchConfiguration getOriginal ( ) { return fOriginal ; } protected ILaunchConfigurationWorkingCopy getWorkingCopy ( ) { return fWorkingCopy ; } public boolean canSave ( ) { if ( fInitializingTabs ) { return false ; } try { verifyName ( ) ; } catch ( CoreException ce ) { return false ; } ILaunchConfigurationTab [ ] tabs = getTabs ( ) ; if ( tabs = = null ) { return false ; } for ( int i = <int> ; i < tabs . length ; i + + ) { if ( ! tabs [ i ] . canSave ( ) ) { return false ; } } return true ; } public boolean canLaunch ( ) { if ( fInitializingTabs ) { return false ; } if ( getWorkingCopy ( ) = = null ) { return false ; } try { verifyName ( ) ; } catch ( CoreException e ) { return false ; } ILaunchConfigurationTab [ ] tabs = getTabs ( ) ; if ( tabs = = null ) { return false ; } for ( int i = <int> ; i < tabs . length ; i + + ) { if ( ! tabs [ i ] . isValid ( getWorkingCopy ( ) ) ) { return false ; } } return true ; } public boolean canLaunchWithModes ( ) { if ( fInitializingTabs ) { return false ; } try { ILaunchConfigurationWorkingCopy wc = getWorkingCopy ( ) ; if ( wc ! = null ) { return wc . getType ( ) . supportsModeCombination ( getCurrentModeSet ( ) ) ; } } catch ( CoreException e ) { } return true ; } public boolean hasDuplicateDelegates ( ) { if ( fInitializingTabs ) { return false ; } ILaunchConfiguration config = getWorkingCopy ( ) ; if ( config ! = null ) { if ( hasMultipleDelegates ( ) ) { return getPreferredDelegate ( ) = = null ; } } return false ; } private boolean hasMultipleDelegates ( ) { ILaunchConfiguration config = getWorkingCopy ( ) ; if ( config ! = null ) { try { Set < String > modes = getCurrentModeSet ( ) ; ILaunchDelegate [ ] delegates = LaunchConfigurationManager . filterLaunchDelegates ( config . getType ( ) , modes ) ; return delegates . length > <int> ; } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } } return false ; } public String getErrorMesssage ( ) { if ( fInitializingTabs ) { return null ; } if ( getWorkingCopy ( ) = = null ) { return null ; } try { verifyName ( ) ; } catch ( CoreException ce ) { return ce . getStatus ( ) . getMessage ( ) ; } if ( hasDuplicateDelegates ( ) ) { return LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_18 ; } String message = null ; ILaunchConfigurationTab activeTab = getActiveTab ( ) ; if ( activeTab = = null ) { return null ; } message = activeTab . getErrorMessage ( ) ; if ( message ! = null ) { return message ; } ILaunchConfigurationTab [ ] allTabs = getTabs ( ) ; for ( int i = <int> ; i < allTabs . length ; i + + ) { ILaunchConfigurationTab tab = allTabs [ i ] ; if ( tab = = activeTab ) { continue ; } message = tab . getErrorMessage ( ) ; if ( message ! = null ) { StringBuffer temp = new StringBuffer ( ) ; temp . append ( <str> ) ; temp . append ( DebugUIPlugin . removeAccelerators ( tab . getName ( ) ) ) ; temp . append ( <str> ) ; temp . append ( message ) ; return temp . toString ( ) ; } } if ( ! canLaunchWithModes ( ) ) { Set < String > modes = getCurrentModeSet ( ) ; List < String > names = LaunchConfigurationPresentationManager . getDefault ( ) . getLaunchModeNames ( modes ) ; return MessageFormat . format ( LaunchConfigurationsMessages . LaunchConfigurationTabGroupViewer_14 , new Object [ ] { names . toString ( ) } ) ; } return null ; } public String getMessage ( ) { if ( fInitializingTabs ) { return null ; } String message = fDescription ; ILaunchConfigurationTab tab = getActiveTab ( ) ; if ( tab ! = null ) { String tabMessage = tab . getMessage ( ) ; if ( tabMessage ! = null ) { message = tabMessage ; } } return message ; } public String getWarningMessage ( ) { if ( fInitializingTabs ) { return null ; } String message = null ; ILaunchConfigurationTab tab = getActiveTab ( ) ; if ( tab instanceof ILaunchConfigurationTab2 ) { String tabMessage = ( ( ILaunchConfigurationTab2 ) tab ) . getWarningMessage ( ) ; if ( tabMessage ! = null ) { message = tabMessage ; } } return message ; } protected void verifyName ( ) throws CoreException { if ( fNameWidget . isVisible ( ) ) { ILaunchManager mgr = DebugPlugin . getDefault ( ) . getLaunchManager ( ) ; String currentName = fNameWidget . getText ( ) . trim ( ) ; if ( currentName . length ( ) < <int> ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , LaunchConfigurationsMessages . LaunchConfigurationDialog_Name_required_for_launch_configuration_11 , null ) ) ; } try { mgr . isValidLaunchConfigurationName ( currentName ) ; } catch ( IllegalArgumentException iae ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , iae . getMessage ( ) , null ) ) ; } if ( fOriginal ! = null & & ! fOriginal . getName ( ) . equals ( currentName ) ) { Set < String > reservednames = ( ( LaunchConfigurationsDialog ) getLaunchConfigurationDialog ( ) ) . getReservedNameSet ( ) ; if ( mgr . isExistingLaunchConfigurationName ( currentName ) | | ( reservednames ! = null ? reservednames . contains ( currentName ) : false ) ) { ILaunchConfiguration config = ( ( LaunchManager ) mgr ) . findLaunchConfiguration ( currentName ) ; throw new CoreException ( new Status ( IStatus . ERROR , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , NLS . bind ( LaunchConfigurationsMessages . LaunchConfigurationDialog_Launch_configuration_already_exists_with_this_name_12 , config . getType ( ) . getName ( ) ) , null ) ) ; } } } } private void disposeExistingTabs ( ) { fDisposingTabs = true ; fTabFolder . dispose ( ) ; fTabFolder = null ; createTabFolder ( fGroupComposite ) ; disposeTabGroup ( ) ; fDisposingTabs = false ; } public ILaunchConfigurationTabGroup getTabGroup ( ) { return fTabGroup ; } protected void handleTabSelected ( ) { if ( fDisposingTabs | | fInitializingTabs ) { return ; } ILaunchConfigurationTab [ ] tabs = getTabs ( ) ; if ( fCurrentTabIndex = = fTabFolder . getSelectionIndex ( ) | | tabs = = null | | tabs . length = = <int> | | fCurrentTabIndex > ( tabs . length - <int> ) ) { return ; } if ( fCurrentTabIndex ! = - <int> ) { ILaunchConfigurationTab tab = tabs [ fCurrentTabIndex ] ; ILaunchConfigurationWorkingCopy wc = getWorkingCopy ( ) ; if ( wc ! = null ) { tab . deactivated ( wc ) ; getActiveTab ( ) . activated ( wc ) ; } } fCurrentTabIndex = fTabFolder . getSelectionIndex ( ) ; } protected void handleNameModified ( ) { getWorkingCopy ( ) . rename ( fNameWidget . getText ( ) . trim ( ) ) ; scheduleUpdateJob ( ) ; } protected ILaunchConfiguration handleApplyPressed ( ) { if ( fOriginal ! = null & & fOriginal . isReadOnly ( ) ) { IStatus status = ResourcesPlugin . getWorkspace ( ) . validateEdit ( new IFile [ ] { fOriginal . getFile ( ) } , fViewerControl . getShell ( ) ) ; if ( ! status . isOK ( ) ) { return null ; } } Exception exception = null ; final ILaunchConfiguration [ ] saved = new ILaunchConfiguration [ <int> ] ; try { fInitializingTabs = true ; String trimmed = fNameWidget . getText ( ) . trim ( ) ; fNameWidget . setText ( trimmed ) ; if ( fWorkingCopy = = null ) { fWorkingCopy = fOriginal . getWorkingCopy ( ) ; } fWorkingCopy . rename ( trimmed ) ; getTabGroup ( ) . performApply ( fWorkingCopy ) ; if ( isDirty ( ) ) { if ( ! fWorkingCopy . isLocal ( ) ) { IRunnableWithProgress runnable = new IRunnableWithProgress ( ) { @Override public void run ( IProgressMonitor monitor ) throws InvocationTargetException , InterruptedException { try { saved [ <int> ] = ( ( LaunchConfigurationWorkingCopy ) fWorkingCopy ) . doSave ( monitor ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } } ; getLaunchConfigurationDialog ( ) . run ( true , false , runnable ) ; } else { saved [ <int> ] = fWorkingCopy . doSave ( ) ; } } updateButtons ( ) ; fInitializingTabs = false ; } catch ( CoreException e ) { exception = e ; } catch ( InvocationTargetException e ) { exception = e ; } catch ( InterruptedException e ) { exception = e ; } if ( exception ! = null ) { DebugUIPlugin . errorDialog ( getShell ( ) , LaunchConfigurationsMessages . LaunchConfigurationDialog_Launch_Configuration_Error_46 , LaunchConfigurationsMessages . LaunchConfigurationDialog_Exception_occurred_while_saving_launch_configuration_47 , exception ) ; return null ; } else { return saved [ <int> ] ; } } protected void handleRevertPressed ( ) { try { if ( fTabGroup ! = null ) { fTabGroup . initializeFrom ( fOriginal ) ; fNameWidget . setText ( fOriginal . getName ( ) ) ; fWorkingCopy = fOriginal . getWorkingCopy ( ) ; refreshStatus ( ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } protected void errorDialog ( CoreException exception ) { ErrorDialog . openError ( getShell ( ) , null , null , exception . getStatus ( ) ) ; } public void setActiveTab ( ILaunchConfigurationTab tab ) { ILaunchConfigurationTab [ ] tabs = getTabs ( ) ; if ( tabs ! = null ) { for ( int i = <int> ; i < tabs . length ; i + + ) { if ( tabs [ i ] . getClass ( ) . equals ( tab . getClass ( ) ) ) { setActiveTab ( i ) ; return ; } } } } public void setActiveTab ( int index ) { ILaunchConfigurationTab [ ] tabs = getTabs ( ) ; if ( index > = <int> & & index < tabs . length ) { fTabFolder . setSelection ( index ) ; handleTabSelected ( ) ; } } } 

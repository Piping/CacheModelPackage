package org . gradle . launcher . daemon . client ; import org . gradle . internal . event . ListenerManager ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . launcher . daemon . bootstrap . DaemonGreeter ; import org . gradle . launcher . daemon . configuration . DaemonParameters ; import org . gradle . launcher . daemon . context . DaemonContextBuilder ; import org . gradle . launcher . daemon . registry . DaemonDir ; import org . gradle . launcher . daemon . registry . DaemonRegistryServices ; import java . io . InputStream ; public class DaemonClientServices extends DaemonClientServicesSupport { private final DaemonParameters daemonParameters ; public DaemonClientServices ( ServiceRegistry parent , DaemonParameters daemonParameters , InputStream buildStandardInput ) { super ( parent , buildStandardInput ) ; this . daemonParameters = daemonParameters ; addProvider ( new DaemonRegistryServices ( daemonParameters . getBaseDir ( ) ) ) ; } DaemonStarter createDaemonStarter ( DaemonDir daemonDir , DaemonParameters daemonParameters , ListenerManager listenerManager , DaemonGreeter daemonGreeter , JvmVersionValidator jvmVersionValidator ) { return new DefaultDaemonStarter ( daemonDir , daemonParameters , daemonGreeter , listenerManager . getBroadcaster ( DaemonStartListener . class ) , jvmVersionValidator ) ; } protected void configureDaemonContextBuilder ( DaemonContextBuilder builder ) { builder . setDaemonRegistryDir ( get ( DaemonDir . class ) . getBaseDir ( ) ) ; builder . useDaemonParameters ( daemonParameters ) ; } DaemonParameters createDaemonParameters ( ) { return daemonParameters ; } } 

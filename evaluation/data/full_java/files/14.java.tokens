package org . apache . cassandra . thrift ; import org . apache . commons . lang3 . builder . HashCodeBuilder ; import org . apache . thrift . scheme . IScheme ; import org . apache . thrift . scheme . SchemeFactory ; import org . apache . thrift . scheme . StandardScheme ; import org . apache . thrift . scheme . TupleScheme ; import org . apache . thrift . protocol . TTupleProtocol ; import org . apache . thrift . protocol . TProtocolException ; import org . apache . thrift . EncodingUtils ; import org . apache . thrift . TException ; import org . apache . thrift . async . AsyncMethodCallback ; import org . apache . thrift . server . AbstractNonblockingServer . * ; import java . util . List ; import java . util . ArrayList ; import java . util . Map ; import java . util . HashMap ; import java . util . EnumMap ; import java . util . Set ; import java . util . HashSet ; import java . util . EnumSet ; import java . util . Collections ; import java . util . BitSet ; import java . nio . ByteBuffer ; import java . util . Arrays ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; public class ColumnPath implements org . apache . thrift . TBase < ColumnPath , ColumnPath . _Fields > , java . io . Serializable , Cloneable , Comparable < ColumnPath > { private static final org . apache . thrift . protocol . TStruct STRUCT_DESC = new org . apache . thrift . protocol . TStruct ( <str> ) ; private static final org . apache . thrift . protocol . TField COLUMN_FAMILY_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRING , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField SUPER_COLUMN_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRING , ( short ) <int> ) ; private static final org . apache . thrift . protocol . TField COLUMN_FIELD_DESC = new org . apache . thrift . protocol . TField ( <str> , org . apache . thrift . protocol . TType . STRING , ( short ) <int> ) ; private static final Map < Class < ? extends IScheme > , SchemeFactory > schemes = new HashMap < Class < ? extends IScheme > , SchemeFactory > ( ) ; static { schemes . put ( StandardScheme . class , new ColumnPathStandardSchemeFactory ( ) ) ; schemes . put ( TupleScheme . class , new ColumnPathTupleSchemeFactory ( ) ) ; } public String column_family ; public ByteBuffer super_column ; public ByteBuffer column ; public enum _Fields implements org . apache . thrift . TFieldIdEnum { COLUMN_FAMILY ( ( short ) <int> , <str> ) , SUPER_COLUMN ( ( short ) <int> , <str> ) , COLUMN ( ( short ) <int> , <str> ) ; private static final Map < String , _Fields > byName = new HashMap < String , _Fields > ( ) ; static { for ( _Fields field : EnumSet . allOf ( _Fields . class ) ) { byName . put ( field . getFieldName ( ) , field ) ; } } public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case <int> : return COLUMN_FAMILY ; case <int> : return SUPER_COLUMN ; case <int> : return COLUMN ; default : return null ; } } public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields = = null ) throw new IllegalArgumentException ( <str> + fieldId + <str> ) ; return fields ; } public static _Fields findByName ( String name ) { return byName . get ( name ) ; } private final short _thriftId ; private final String _fieldName ; _Fields ( short thriftId , String fieldName ) { _thriftId = thriftId ; _fieldName = fieldName ; } public short getThriftFieldId ( ) { return _thriftId ; } public String getFieldName ( ) { return _fieldName ; } } private _Fields optionals [ ] = { _Fields . SUPER_COLUMN , _Fields . COLUMN } ; public static final Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > metaDataMap ; static { Map < _Fields , org . apache . thrift . meta_data . FieldMetaData > tmpMap = new EnumMap < _Fields , org . apache . thrift . meta_data . FieldMetaData > ( _Fields . class ) ; tmpMap . put ( _Fields . COLUMN_FAMILY , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . REQUIRED , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING ) ) ) ; tmpMap . put ( _Fields . SUPER_COLUMN , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . OPTIONAL , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING , true ) ) ) ; tmpMap . put ( _Fields . COLUMN , new org . apache . thrift . meta_data . FieldMetaData ( <str> , org . apache . thrift . TFieldRequirementType . OPTIONAL , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . STRING , true ) ) ) ; metaDataMap = Collections . unmodifiableMap ( tmpMap ) ; org . apache . thrift . meta_data . FieldMetaData . addStructMetaDataMap ( ColumnPath . class , metaDataMap ) ; } public ColumnPath ( ) { } public ColumnPath ( String column_family ) { this ( ) ; this . column_family = column_family ; } public ColumnPath ( ColumnPath other ) { if ( other . isSetColumn_family ( ) ) { this . column_family = other . column_family ; } if ( other . isSetSuper_column ( ) ) { this . super_column = org . apache . thrift . TBaseHelper . copyBinary ( other . super_column ) ; ; } if ( other . isSetColumn ( ) ) { this . column = org . apache . thrift . TBaseHelper . copyBinary ( other . column ) ; ; } } public ColumnPath deepCopy ( ) { return new ColumnPath ( this ) ; } @Override public void clear ( ) { this . column_family = null ; this . super_column = null ; this . column = null ; } public String getColumn_family ( ) { return this . column_family ; } public ColumnPath setColumn_family ( String column_family ) { this . column_family = column_family ; return this ; } public void unsetColumn_family ( ) { this . column_family = null ; } public boolean isSetColumn_family ( ) { return this . column_family ! = null ; } public void setColumn_familyIsSet ( boolean value ) { if ( ! value ) { this . column_family = null ; } } public byte [ ] getSuper_column ( ) { setSuper_column ( org . apache . thrift . TBaseHelper . rightSize ( super_column ) ) ; return super_column = = null ? null : super_column . array ( ) ; } public ByteBuffer bufferForSuper_column ( ) { return super_column ; } public ColumnPath setSuper_column ( byte [ ] super_column ) { setSuper_column ( super_column = = null ? ( ByteBuffer ) null : ByteBuffer . wrap ( super_column ) ) ; return this ; } public ColumnPath setSuper_column ( ByteBuffer super_column ) { this . super_column = super_column ; return this ; } public void unsetSuper_column ( ) { this . super_column = null ; } public boolean isSetSuper_column ( ) { return this . super_column ! = null ; } public void setSuper_columnIsSet ( boolean value ) { if ( ! value ) { this . super_column = null ; } } public byte [ ] getColumn ( ) { setColumn ( org . apache . thrift . TBaseHelper . rightSize ( column ) ) ; return column = = null ? null : column . array ( ) ; } public ByteBuffer bufferForColumn ( ) { return column ; } public ColumnPath setColumn ( byte [ ] column ) { setColumn ( column = = null ? ( ByteBuffer ) null : ByteBuffer . wrap ( column ) ) ; return this ; } public ColumnPath setColumn ( ByteBuffer column ) { this . column = column ; return this ; } public void unsetColumn ( ) { this . column = null ; } public boolean isSetColumn ( ) { return this . column ! = null ; } public void setColumnIsSet ( boolean value ) { if ( ! value ) { this . column = null ; } } public void setFieldValue ( _Fields field , Object value ) { switch ( field ) { case COLUMN_FAMILY : if ( value = = null ) { unsetColumn_family ( ) ; } else { setColumn_family ( ( String ) value ) ; } break ; case SUPER_COLUMN : if ( value = = null ) { unsetSuper_column ( ) ; } else { setSuper_column ( ( ByteBuffer ) value ) ; } break ; case COLUMN : if ( value = = null ) { unsetColumn ( ) ; } else { setColumn ( ( ByteBuffer ) value ) ; } break ; } } public Object getFieldValue ( _Fields field ) { switch ( field ) { case COLUMN_FAMILY : return getColumn_family ( ) ; case SUPER_COLUMN : return getSuper_column ( ) ; case COLUMN : return getColumn ( ) ; } throw new IllegalStateException ( ) ; } public boolean isSet ( _Fields field ) { if ( field = = null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case COLUMN_FAMILY : return isSetColumn_family ( ) ; case SUPER_COLUMN : return isSetSuper_column ( ) ; case COLUMN : return isSetColumn ( ) ; } throw new IllegalStateException ( ) ; } @Override public boolean equals ( Object that ) { if ( that = = null ) return false ; if ( that instanceof ColumnPath ) return this . equals ( ( ColumnPath ) that ) ; return false ; } public boolean equals ( ColumnPath that ) { if ( that = = null ) return false ; boolean this_present_column_family = true & & this . isSetColumn_family ( ) ; boolean that_present_column_family = true & & that . isSetColumn_family ( ) ; if ( this_present_column_family | | that_present_column_family ) { if ( ! ( this_present_column_family & & that_present_column_family ) ) return false ; if ( ! this . column_family . equals ( that . column_family ) ) return false ; } boolean this_present_super_column = true & & this . isSetSuper_column ( ) ; boolean that_present_super_column = true & & that . isSetSuper_column ( ) ; if ( this_present_super_column | | that_present_super_column ) { if ( ! ( this_present_super_column & & that_present_super_column ) ) return false ; if ( ! this . super_column . equals ( that . super_column ) ) return false ; } boolean this_present_column = true & & this . isSetColumn ( ) ; boolean that_present_column = true & & that . isSetColumn ( ) ; if ( this_present_column | | that_present_column ) { if ( ! ( this_present_column & & that_present_column ) ) return false ; if ( ! this . column . equals ( that . column ) ) return false ; } return true ; } @Override public int hashCode ( ) { HashCodeBuilder builder = new HashCodeBuilder ( ) ; boolean present_column_family = true & & ( isSetColumn_family ( ) ) ; builder . append ( present_column_family ) ; if ( present_column_family ) builder . append ( column_family ) ; boolean present_super_column = true & & ( isSetSuper_column ( ) ) ; builder . append ( present_super_column ) ; if ( present_super_column ) builder . append ( super_column ) ; boolean present_column = true & & ( isSetColumn ( ) ) ; builder . append ( present_column ) ; if ( present_column ) builder . append ( column ) ; return builder . toHashCode ( ) ; } @Override public int compareTo ( ColumnPath other ) { if ( ! getClass ( ) . equals ( other . getClass ( ) ) ) { return getClass ( ) . getName ( ) . compareTo ( other . getClass ( ) . getName ( ) ) ; } int lastComparison = <int> ; lastComparison = Boolean . valueOf ( isSetColumn_family ( ) ) . compareTo ( other . isSetColumn_family ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetColumn_family ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . column_family , other . column_family ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetSuper_column ( ) ) . compareTo ( other . isSetSuper_column ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetSuper_column ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . super_column , other . super_column ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } lastComparison = Boolean . valueOf ( isSetColumn ( ) ) . compareTo ( other . isSetColumn ( ) ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } if ( isSetColumn ( ) ) { lastComparison = org . apache . thrift . TBaseHelper . compareTo ( this . column , other . column ) ; if ( lastComparison ! = <int> ) { return lastComparison ; } } return <int> ; } public _Fields fieldForId ( int fieldId ) { return _Fields . findByThriftId ( fieldId ) ; } public void read ( org . apache . thrift . protocol . TProtocol iprot ) throws org . apache . thrift . TException { schemes . get ( iprot . getScheme ( ) ) . getScheme ( ) . read ( iprot , this ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot ) throws org . apache . thrift . TException { schemes . get ( oprot . getScheme ( ) ) . getScheme ( ) . write ( oprot , this ) ; } @Override public String toString ( ) { StringBuilder sb = new StringBuilder ( <str> ) ; boolean first = true ; sb . append ( <str> ) ; if ( this . column_family = = null ) { sb . append ( <str> ) ; } else { sb . append ( this . column_family ) ; } first = false ; if ( isSetSuper_column ( ) ) { if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . super_column = = null ) { sb . append ( <str> ) ; } else { org . apache . thrift . TBaseHelper . toString ( this . super_column , sb ) ; } first = false ; } if ( isSetColumn ( ) ) { if ( ! first ) sb . append ( <str> ) ; sb . append ( <str> ) ; if ( this . column = = null ) { sb . append ( <str> ) ; } else { org . apache . thrift . TBaseHelper . toString ( this . column , sb ) ; } first = false ; } sb . append ( <str> ) ; return sb . toString ( ) ; } public void validate ( ) throws org . apache . thrift . TException { if ( column_family = = null ) { throw new org . apache . thrift . protocol . TProtocolException ( <str> + toString ( ) ) ; } } private void writeObject ( java . io . ObjectOutputStream out ) throws java . io . IOException { try { write ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( out ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private void readObject ( java . io . ObjectInputStream in ) throws java . io . IOException , ClassNotFoundException { try { read ( new org . apache . thrift . protocol . TCompactProtocol ( new org . apache . thrift . transport . TIOStreamTransport ( in ) ) ) ; } catch ( org . apache . thrift . TException te ) { throw new java . io . IOException ( te ) ; } } private static class ColumnPathStandardSchemeFactory implements SchemeFactory { public ColumnPathStandardScheme getScheme ( ) { return new ColumnPathStandardScheme ( ) ; } } private static class ColumnPathStandardScheme extends StandardScheme < ColumnPath > { public void read ( org . apache . thrift . protocol . TProtocol iprot , ColumnPath struct ) throws org . apache . thrift . TException { org . apache . thrift . protocol . TField schemeField ; iprot . readStructBegin ( ) ; while ( true ) { schemeField = iprot . readFieldBegin ( ) ; if ( schemeField . type = = org . apache . thrift . protocol . TType . STOP ) { break ; } switch ( schemeField . id ) { case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRING ) { struct . column_family = iprot . readString ( ) ; struct . setColumn_familyIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRING ) { struct . super_column = iprot . readBinary ( ) ; struct . setSuper_columnIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case <int> : if ( schemeField . type = = org . apache . thrift . protocol . TType . STRING ) { struct . column = iprot . readBinary ( ) ; struct . setColumnIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; default : org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } iprot . readFieldEnd ( ) ; } iprot . readStructEnd ( ) ; struct . validate ( ) ; } public void write ( org . apache . thrift . protocol . TProtocol oprot , ColumnPath struct ) throws org . apache . thrift . TException { struct . validate ( ) ; oprot . writeStructBegin ( STRUCT_DESC ) ; if ( struct . column_family ! = null ) { oprot . writeFieldBegin ( COLUMN_FAMILY_FIELD_DESC ) ; oprot . writeString ( struct . column_family ) ; oprot . writeFieldEnd ( ) ; } if ( struct . super_column ! = null ) { if ( struct . isSetSuper_column ( ) ) { oprot . writeFieldBegin ( SUPER_COLUMN_FIELD_DESC ) ; oprot . writeBinary ( struct . super_column ) ; oprot . writeFieldEnd ( ) ; } } if ( struct . column ! = null ) { if ( struct . isSetColumn ( ) ) { oprot . writeFieldBegin ( COLUMN_FIELD_DESC ) ; oprot . writeBinary ( struct . column ) ; oprot . writeFieldEnd ( ) ; } } oprot . writeFieldStop ( ) ; oprot . writeStructEnd ( ) ; } } private static class ColumnPathTupleSchemeFactory implements SchemeFactory { public ColumnPathTupleScheme getScheme ( ) { return new ColumnPathTupleScheme ( ) ; } } private static class ColumnPathTupleScheme extends TupleScheme < ColumnPath > { @Override public void write ( org . apache . thrift . protocol . TProtocol prot , ColumnPath struct ) throws org . apache . thrift . TException { TTupleProtocol oprot = ( TTupleProtocol ) prot ; oprot . writeString ( struct . column_family ) ; BitSet optionals = new BitSet ( ) ; if ( struct . isSetSuper_column ( ) ) { optionals . set ( <int> ) ; } if ( struct . isSetColumn ( ) ) { optionals . set ( <int> ) ; } oprot . writeBitSet ( optionals , <int> ) ; if ( struct . isSetSuper_column ( ) ) { oprot . writeBinary ( struct . super_column ) ; } if ( struct . isSetColumn ( ) ) { oprot . writeBinary ( struct . column ) ; } } @Override public void read ( org . apache . thrift . protocol . TProtocol prot , ColumnPath struct ) throws org . apache . thrift . TException { TTupleProtocol iprot = ( TTupleProtocol ) prot ; struct . column_family = iprot . readString ( ) ; struct . setColumn_familyIsSet ( true ) ; BitSet incoming = iprot . readBitSet ( <int> ) ; if ( incoming . get ( <int> ) ) { struct . super_column = iprot . readBinary ( ) ; struct . setSuper_columnIsSet ( true ) ; } if ( incoming . get ( <int> ) ) { struct . column = iprot . readBinary ( ) ; struct . setColumnIsSet ( true ) ; } } } } 

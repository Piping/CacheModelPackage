package com . google . common . collect ; import com . google . caliper . BeforeExperiment ; import com . google . caliper . Benchmark ; import com . google . common . collect . HashMultiset ; import com . google . common . collect . Multiset ; import java . util . ArrayList ; import java . util . List ; import java . util . Random ; public class HashMultisetAddPresentBenchmark { private static final int ARRAY_MASK = <hex> ; private static final int ARRAY_SIZE = <hex> ; List < Multiset < Integer > > multisets = new ArrayList < Multiset < Integer > > ( <hex> ) ; int [ ] queries = new int [ ARRAY_SIZE ] ; @BeforeExperiment void setUp ( ) { Random random = new Random ( ) ; multisets . clear ( ) ; for ( int i = <int> ; i < ARRAY_SIZE ; i + + ) { HashMultiset < Integer > multiset = HashMultiset . < Integer > create ( ) ; multisets . add ( multiset ) ; queries [ i ] = random . nextInt ( ) ; multiset . add ( queries [ i ] ) ; } } @Benchmark int add ( int reps ) { int tmp = <int> ; for ( int i = <int> ; i < reps ; i + + ) { int j = i & ARRAY_MASK ; tmp + = multisets . get ( j ) . add ( queries [ j ] , <int> ) ; } return tmp ; } } 

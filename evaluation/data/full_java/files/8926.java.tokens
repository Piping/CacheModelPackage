package org . elasticsearch . plugins ; import org . apache . lucene . util . LuceneTestCase ; import org . elasticsearch . Version ; import org . elasticsearch . common . cli . CliToolTestCase . CaptureOutputTerminal ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . env . Environment ; import org . elasticsearch . test . ESTestCase ; import org . junit . Before ; import java . io . IOException ; import java . net . URL ; import java . nio . charset . Charset ; import java . nio . file . FileVisitResult ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . SimpleFileVisitor ; import java . nio . file . attribute . * ; import java . util . HashSet ; import java . util . Set ; import java . util . zip . ZipEntry ; import java . util . zip . ZipOutputStream ; import static java . nio . file . attribute . PosixFilePermission . * ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . * ; import static org . hamcrest . Matchers . * ; @LuceneTestCase.SuppressFileSystems ( <str> ) public class PluginManagerPermissionTests extends ESTestCase { private String pluginName = <str> ; private CaptureOutputTerminal terminal = new CaptureOutputTerminal ( ) ; private Environment environment ; private boolean supportsPermissions ; @Before public void setup ( ) { Path tempDir = createTempDir ( ) ; Settings . Builder settingsBuilder = settingsBuilder ( ) . put ( <str> , tempDir ) ; if ( randomBoolean ( ) ) { settingsBuilder . put ( <str> , createTempDir ( ) ) ; } if ( randomBoolean ( ) ) { settingsBuilder . put ( <str> , createTempDir ( ) ) ; } environment = new Environment ( settingsBuilder . build ( ) ) ; supportsPermissions = tempDir . getFileSystem ( ) . supportedFileAttributeViews ( ) . contains ( <str> ) ; } public void testThatUnaccessibleBinDirectoryAbortsPluginInstallation ( ) throws Exception { assumeTrue ( <str> , supportsPermissions ) ; URL pluginUrl = createPlugin ( true , randomBoolean ( ) ) ; Path binPath = environment . binFile ( ) . resolve ( pluginName ) ; Files . createDirectories ( binPath ) ; try { Files . setPosixFilePermissions ( binPath , PosixFilePermissions . fromString ( <str> ) ) ; PluginManager pluginManager = new PluginManager ( environment , pluginUrl , PluginManager . OutputMode . VERBOSE , TimeValue . timeValueSeconds ( <int> ) ) ; pluginManager . downloadAndExtract ( pluginName , terminal , true ) ; fail ( <str> ) ; } catch ( IOException e ) { assertFileNotExists ( environment . pluginsFile ( ) . resolve ( pluginName ) ) ; assertFileNotExists ( environment . configFile ( ) . resolve ( pluginName ) ) ; assertDirectoryExists ( environment . binFile ( ) . resolve ( pluginName ) ) ; assertThat ( terminal . getTerminalOutput ( ) , hasItem ( containsString ( <str> ) ) ) ; } finally { Files . setPosixFilePermissions ( binPath , PosixFilePermissions . fromString ( <str> ) ) ; } } public void testThatUnaccessiblePluginConfigDirectoryAbortsPluginInstallation ( ) throws Exception { assumeTrue ( <str> , supportsPermissions ) ; URL pluginUrl = createPlugin ( randomBoolean ( ) , true ) ; Path path = environment . configFile ( ) . resolve ( pluginName ) ; Files . createDirectories ( path ) ; Files . createFile ( path . resolve ( <str> ) ) ; Path binPath = environment . binFile ( ) . resolve ( pluginName ) ; Files . createDirectories ( binPath ) ; try { Files . setPosixFilePermissions ( path . resolve ( <str> ) , PosixFilePermissions . fromString ( <str> ) ) ; Files . setPosixFilePermissions ( path , PosixFilePermissions . fromString ( <str> ) ) ; PluginManager pluginManager = new PluginManager ( environment , pluginUrl , PluginManager . OutputMode . VERBOSE , TimeValue . timeValueSeconds ( <int> ) ) ; pluginManager . downloadAndExtract ( pluginName , terminal , true ) ; fail ( <str> + terminal . getTerminalOutput ( ) ) ; } catch ( IOException e ) { assertFileNotExists ( environment . pluginsFile ( ) . resolve ( pluginName ) ) ; assertFileNotExists ( environment . binFile ( ) . resolve ( pluginName ) ) ; assertDirectoryExists ( environment . configFile ( ) . resolve ( pluginName ) ) ; assertThat ( terminal . getTerminalOutput ( ) , hasItem ( containsString ( <str> ) ) ) ; } finally { Files . setPosixFilePermissions ( path , PosixFilePermissions . fromString ( <str> ) ) ; Files . setPosixFilePermissions ( path . resolve ( <str> ) , PosixFilePermissions . fromString ( <str> ) ) ; } } public void testThatPluginWithoutBinAndConfigWorksEvenIfPermissionsAreWrong ( ) throws Exception { assumeTrue ( <str> , supportsPermissions ) ; URL pluginUrl = createPlugin ( false , false ) ; Path path = environment . configFile ( ) . resolve ( pluginName ) ; Files . createDirectories ( path ) ; Files . createFile ( path . resolve ( <str> ) ) ; Path binPath = environment . binFile ( ) . resolve ( pluginName ) ; Files . createDirectories ( binPath ) ; try { Files . setPosixFilePermissions ( path . resolve ( <str> ) , PosixFilePermissions . fromString ( <str> ) ) ; Files . setPosixFilePermissions ( path , PosixFilePermissions . fromString ( <str> ) ) ; Files . setPosixFilePermissions ( binPath , PosixFilePermissions . fromString ( <str> ) ) ; PluginManager pluginManager = new PluginManager ( environment , pluginUrl , PluginManager . OutputMode . VERBOSE , TimeValue . timeValueSeconds ( <int> ) ) ; pluginManager . downloadAndExtract ( pluginName , terminal , true ) ; } finally { Files . setPosixFilePermissions ( binPath , PosixFilePermissions . fromString ( <str> ) ) ; Files . setPosixFilePermissions ( path , PosixFilePermissions . fromString ( <str> ) ) ; Files . setPosixFilePermissions ( path . resolve ( <str> ) , PosixFilePermissions . fromString ( <str> ) ) ; } } public void testThatNonWritablePluginsDirectoryLeavesNoLeftOver ( ) throws Exception { assumeTrue ( <str> , supportsPermissions ) ; URL pluginUrl = createPlugin ( true , true ) ; Files . createDirectories ( environment . pluginsFile ( ) ) ; try { Files . setPosixFilePermissions ( environment . pluginsFile ( ) , PosixFilePermissions . fromString ( <str> ) ) ; PluginManager pluginManager = new PluginManager ( environment , pluginUrl , PluginManager . OutputMode . VERBOSE , TimeValue . timeValueSeconds ( <int> ) ) ; try { pluginManager . downloadAndExtract ( pluginName , terminal , true ) ; fail ( <str> ) ; } catch ( IOException e ) { assertFileNotExists ( environment . binFile ( ) . resolve ( pluginName ) ) ; assertFileNotExists ( environment . configFile ( ) . resolve ( pluginName ) ) ; Files . setPosixFilePermissions ( environment . pluginsFile ( ) , PosixFilePermissions . fromString ( <str> ) ) ; assertDirectoryExists ( environment . pluginsFile ( ) ) ; assertFileNotExists ( environment . pluginsFile ( ) . resolve ( pluginName ) ) ; } } finally { Files . setPosixFilePermissions ( environment . pluginsFile ( ) , PosixFilePermissions . fromString ( <str> ) ) ; } } public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced ( ) throws Exception { assumeTrue ( <str> , supportsPermissions ) ; boolean pluginContainsExecutables = randomBoolean ( ) ; URL pluginUrl = createPlugin ( pluginContainsExecutables , true ) ; Files . createDirectories ( environment . configFile ( ) . resolve ( pluginName ) ) ; Path configFile = environment . configFile ( ) . resolve ( pluginName ) . resolve ( <str> ) ; Files . createFile ( configFile ) ; Path backupConfigFile = environment . configFile ( ) . resolve ( pluginName ) . resolve ( <str> ) ; Files . createFile ( backupConfigFile ) ; Files . write ( backupConfigFile , <str> . getBytes ( Charset . forName ( <str> ) ) ) ; PluginManager pluginManager = new PluginManager ( environment , pluginUrl , PluginManager . OutputMode . VERBOSE , TimeValue . timeValueSeconds ( <int> ) ) ; try { Files . setPosixFilePermissions ( backupConfigFile , PosixFilePermissions . fromString ( <str> ) ) ; pluginManager . downloadAndExtract ( pluginName , terminal , true ) ; if ( pluginContainsExecutables ) { assertDirectoryExists ( environment . binFile ( ) . resolve ( pluginName ) ) ; } assertDirectoryExists ( environment . pluginsFile ( ) . resolve ( pluginName ) ) ; assertDirectoryExists ( environment . configFile ( ) . resolve ( pluginName ) ) ; assertFileExists ( backupConfigFile ) ; Files . setPosixFilePermissions ( backupConfigFile , PosixFilePermissions . fromString ( <str> ) ) ; String content = new String ( Files . readAllBytes ( backupConfigFile ) , Charset . forName ( <str> ) ) ; assertThat ( content , is ( not ( <str> ) ) ) ; } finally { Files . setPosixFilePermissions ( backupConfigFile , PosixFilePermissions . fromString ( <str> ) ) ; } } public void testThatConfigDirectoryBeingAFileAbortsInstallationAndDoesNotAccidentallyDeleteThisFile ( ) throws Exception { assumeTrue ( <str> , supportsPermissions ) ; Files . createDirectories ( environment . configFile ( ) ) ; Files . createFile ( environment . configFile ( ) . resolve ( pluginName ) ) ; URL pluginUrl = createPlugin ( randomBoolean ( ) , true ) ; PluginManager pluginManager = new PluginManager ( environment , pluginUrl , PluginManager . OutputMode . VERBOSE , TimeValue . timeValueSeconds ( <int> ) ) ; try { pluginManager . downloadAndExtract ( pluginName , terminal , true ) ; fail ( <str> ) ; } catch ( IOException e ) { assertFileExists ( environment . configFile ( ) . resolve ( pluginName ) ) ; assertFileNotExists ( environment . binFile ( ) . resolve ( pluginName ) ) ; assertFileNotExists ( environment . pluginsFile ( ) . resolve ( pluginName ) ) ; } } public void testThatBinDirectoryBeingAFileAbortsInstallationAndDoesNotAccidentallyDeleteThisFile ( ) throws Exception { assumeTrue ( <str> , supportsPermissions ) ; Files . createDirectories ( environment . binFile ( ) ) ; Files . createFile ( environment . binFile ( ) . resolve ( pluginName ) ) ; URL pluginUrl = createPlugin ( true , randomBoolean ( ) ) ; PluginManager pluginManager = new PluginManager ( environment , pluginUrl , PluginManager . OutputMode . VERBOSE , TimeValue . timeValueSeconds ( <int> ) ) ; try { pluginManager . downloadAndExtract ( pluginName , terminal , true ) ; fail ( <str> ) ; } catch ( IOException e ) { assertFileExists ( environment . binFile ( ) . resolve ( pluginName ) ) ; assertFileNotExists ( environment . configFile ( ) . resolve ( pluginName ) ) ; assertFileNotExists ( environment . pluginsFile ( ) . resolve ( pluginName ) ) ; } } public void testConfigDirectoryOwnerGroupAndPermissions ( ) throws IOException { assumeTrue ( <str> , supportsPermissions ) ; URL pluginUrl = createPlugin ( false , true ) ; PluginManager pluginManager = new PluginManager ( environment , pluginUrl , PluginManager . OutputMode . VERBOSE , TimeValue . timeValueSeconds ( <int> ) ) ; pluginManager . downloadAndExtract ( pluginName , terminal , true ) ; PosixFileAttributes parentFileAttributes = Files . getFileAttributeView ( environment . configFile ( ) , PosixFileAttributeView . class ) . readAttributes ( ) ; Path configPath = environment . configFile ( ) . resolve ( pluginName ) ; PosixFileAttributes pluginConfigDirAttributes = Files . getFileAttributeView ( configPath , PosixFileAttributeView . class ) . readAttributes ( ) ; assertThat ( pluginConfigDirAttributes . owner ( ) , equalTo ( parentFileAttributes . owner ( ) ) ) ; assertThat ( pluginConfigDirAttributes . group ( ) , equalTo ( parentFileAttributes . group ( ) ) ) ; assertThat ( pluginConfigDirAttributes . permissions ( ) , equalTo ( parentFileAttributes . permissions ( ) ) ) ; Path configFile = configPath . resolve ( <str> ) ; PosixFileAttributes pluginConfigFileAttributes = Files . getFileAttributeView ( configFile , PosixFileAttributeView . class ) . readAttributes ( ) ; assertThat ( pluginConfigFileAttributes . owner ( ) , equalTo ( parentFileAttributes . owner ( ) ) ) ; assertThat ( pluginConfigFileAttributes . group ( ) , equalTo ( parentFileAttributes . group ( ) ) ) ; Set < PosixFilePermission > expectedFilePermissions = new HashSet < > ( ) ; for ( PosixFilePermission parentPermission : parentFileAttributes . permissions ( ) ) { switch ( parentPermission ) { case OWNER_EXECUTE : case GROUP_EXECUTE : case OTHERS_EXECUTE : break ; default : expectedFilePermissions . add ( parentPermission ) ; } } assertThat ( pluginConfigFileAttributes . permissions ( ) , equalTo ( expectedFilePermissions ) ) ; } public void testBinDirectoryOwnerGroupAndPermissions ( ) throws IOException { assumeTrue ( <str> , supportsPermissions ) ; URL pluginUrl = createPlugin ( true , false ) ; PluginManager pluginManager = new PluginManager ( environment , pluginUrl , PluginManager . OutputMode . VERBOSE , TimeValue . timeValueSeconds ( <int> ) ) ; pluginManager . downloadAndExtract ( pluginName , terminal , true ) ; PosixFileAttributes parentFileAttributes = Files . getFileAttributeView ( environment . binFile ( ) , PosixFileAttributeView . class ) . readAttributes ( ) ; Path binPath = environment . binFile ( ) . resolve ( pluginName ) ; PosixFileAttributes pluginBinDirAttributes = Files . getFileAttributeView ( binPath , PosixFileAttributeView . class ) . readAttributes ( ) ; assertThat ( pluginBinDirAttributes . owner ( ) , equalTo ( parentFileAttributes . owner ( ) ) ) ; assertThat ( pluginBinDirAttributes . group ( ) , equalTo ( parentFileAttributes . group ( ) ) ) ; assertThat ( pluginBinDirAttributes . permissions ( ) , equalTo ( parentFileAttributes . permissions ( ) ) ) ; Path executableFile = binPath . resolve ( <str> ) ; PosixFileAttributes pluginExecutableFileAttributes = Files . getFileAttributeView ( executableFile , PosixFileAttributeView . class ) . readAttributes ( ) ; assertThat ( pluginExecutableFileAttributes . owner ( ) , equalTo ( parentFileAttributes . owner ( ) ) ) ; assertThat ( pluginExecutableFileAttributes . group ( ) , equalTo ( parentFileAttributes . group ( ) ) ) ; Set < PosixFilePermission > expectedFilePermissions = new HashSet < > ( ) ; expectedFilePermissions . add ( OWNER_EXECUTE ) ; expectedFilePermissions . add ( GROUP_EXECUTE ) ; expectedFilePermissions . add ( OTHERS_EXECUTE ) ; for ( PosixFilePermission parentPermission : parentFileAttributes . permissions ( ) ) { switch ( parentPermission ) { case OWNER_EXECUTE : case GROUP_EXECUTE : case OTHERS_EXECUTE : break ; default : expectedFilePermissions . add ( parentPermission ) ; } } assertThat ( pluginExecutableFileAttributes . permissions ( ) , equalTo ( expectedFilePermissions ) ) ; } private URL createPlugin ( boolean withBinDir , boolean withConfigDir ) throws IOException { final Path structure = createTempDir ( ) . resolve ( <str> ) ; PluginTestUtil . writeProperties ( structure , <str> , <str> , <str> , <str> , <str> , Version . CURRENT . toString ( ) , <str> , <str> , <str> , <str> , <str> , pluginName , <str> , pluginName ) ; if ( withBinDir ) { Path binDir = structure . resolve ( <str> ) ; Files . createDirectory ( binDir ) ; Files . setPosixFilePermissions ( binDir , PosixFilePermissions . fromString ( <str> ) ) ; Path executable = binDir . resolve ( <str> ) ; Files . createFile ( executable ) ; Files . setPosixFilePermissions ( executable , PosixFilePermissions . fromString ( <str> ) ) ; } if ( withConfigDir ) { Path configDir = structure . resolve ( <str> ) ; Files . createDirectory ( configDir ) ; Files . setPosixFilePermissions ( configDir , PosixFilePermissions . fromString ( <str> ) ) ; Path configFile = configDir . resolve ( <str> ) ; Files . createFile ( configFile ) ; Files . write ( configFile , <str> . getBytes ( Charset . forName ( <str> ) ) ) ; Files . setPosixFilePermissions ( configFile , PosixFilePermissions . fromString ( <str> ) ) ; } Path zip = createTempDir ( ) . resolve ( structure . getFileName ( ) + <str> ) ; try ( ZipOutputStream stream = new ZipOutputStream ( Files . newOutputStream ( zip ) ) ) { Files . walkFileTree ( structure , new SimpleFileVisitor < Path > ( ) { @Override public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { stream . putNextEntry ( new ZipEntry ( structure . relativize ( file ) . toString ( ) ) ) ; Files . copy ( file , stream ) ; return FileVisitResult . CONTINUE ; } } ) ; } return zip . toUri ( ) . toURL ( ) ; } } 

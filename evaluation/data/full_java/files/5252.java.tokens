package org . elasticsearch . action . admin . indices . warmer . delete ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . action . support . master . AcknowledgedRequest ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . util . CollectionUtils ; import java . io . IOException ; import static org . elasticsearch . action . ValidateActions . addValidationError ; public class DeleteWarmerRequest extends AcknowledgedRequest < DeleteWarmerRequest > implements IndicesRequest . Replaceable { private String [ ] names = Strings . EMPTY_ARRAY ; private IndicesOptions indicesOptions = IndicesOptions . fromOptions ( false , false , true , false ) ; private String [ ] indices = Strings . EMPTY_ARRAY ; public DeleteWarmerRequest ( ) { } public DeleteWarmerRequest ( String . . . names ) { names ( names ) ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( CollectionUtils . isEmpty ( names ) ) { validationException = addValidationError ( <str> , validationException ) ; } else { validationException = checkForEmptyString ( validationException , names ) ; } if ( CollectionUtils . isEmpty ( indices ) ) { validationException = addValidationError ( <str> , validationException ) ; } else { validationException = checkForEmptyString ( validationException , indices ) ; } return validationException ; } private ActionRequestValidationException checkForEmptyString ( ActionRequestValidationException validationException , String [ ] strings ) { boolean containsEmptyString = false ; for ( String string : strings ) { if ( ! Strings . hasText ( string ) ) { containsEmptyString = true ; } } if ( containsEmptyString ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } @Nullable public String [ ] names ( ) { return names ; } public DeleteWarmerRequest names ( @Nullable String . . . names ) { this . names = names ; return this ; } @Override public DeleteWarmerRequest indices ( String . . . indices ) { this . indices = indices ; return this ; } @Override public String [ ] indices ( ) { return indices ; } @Override public IndicesOptions indicesOptions ( ) { return indicesOptions ; } public DeleteWarmerRequest indicesOptions ( IndicesOptions indicesOptions ) { this . indicesOptions = indicesOptions ; return this ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; names = in . readStringArray ( ) ; indices = in . readStringArray ( ) ; indicesOptions = IndicesOptions . readIndicesOptions ( in ) ; readTimeout ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeStringArrayNullable ( names ) ; out . writeStringArrayNullable ( indices ) ; indicesOptions . writeIndicesOptions ( out ) ; writeTimeout ( out ) ; } } 

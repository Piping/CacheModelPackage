package org . apache . cassandra . utils . concurrent ; import static org . apache . cassandra . utils . Throwables . maybeFail ; import static org . apache . cassandra . utils . Throwables . merge ; public interface Transactional extends AutoCloseable { abstract class AbstractTransactional implements Transactional { public enum State { IN_PROGRESS , READY_TO_COMMIT , COMMITTED , ABORTED ; } private boolean permitRedundantTransitions ; private State state = State . IN_PROGRESS ; protected abstract Throwable doCommit ( Throwable accumulate ) ; protected abstract Throwable doAbort ( Throwable accumulate ) ; protected Throwable doPreCleanup ( Throwable accumulate ) { return accumulate ; } protected Throwable doPostCleanup ( Throwable accumulate ) { return accumulate ; } protected abstract void doPrepare ( ) ; public final Throwable commit ( Throwable accumulate ) { if ( permitRedundantTransitions & & state = = State . COMMITTED ) return accumulate ; if ( state ! = State . READY_TO_COMMIT ) throw new IllegalStateException ( <str> + state ) ; accumulate = doCommit ( accumulate ) ; accumulate = doPostCleanup ( accumulate ) ; state = State . COMMITTED ; return accumulate ; } public final Throwable abort ( Throwable accumulate ) { if ( state = = State . ABORTED ) return accumulate ; if ( state = = State . COMMITTED ) { try { throw new IllegalStateException ( <str> ) ; } catch ( Throwable t ) { accumulate = merge ( accumulate , t ) ; } return accumulate ; } state = State . ABORTED ; accumulate = doPreCleanup ( accumulate ) ; accumulate = doAbort ( accumulate ) ; accumulate = doPostCleanup ( accumulate ) ; return accumulate ; } public final void close ( ) { switch ( state ) { case COMMITTED : case ABORTED : break ; default : abort ( ) ; } } public final void prepareToCommit ( ) { if ( permitRedundantTransitions & & state = = State . READY_TO_COMMIT ) return ; if ( state ! = State . IN_PROGRESS ) throw new IllegalStateException ( <str> + state ) ; doPrepare ( ) ; maybeFail ( doPreCleanup ( null ) ) ; state = State . READY_TO_COMMIT ; } public Object finish ( ) { prepareToCommit ( ) ; commit ( ) ; return this ; } public final void abort ( ) { maybeFail ( abort ( null ) ) ; } public final void commit ( ) { maybeFail ( commit ( null ) ) ; } public final State state ( ) { return state ; } protected void permitRedundantTransitions ( ) { permitRedundantTransitions = true ; } } Throwable commit ( Throwable accumulate ) ; Throwable abort ( Throwable accumulate ) ; void prepareToCommit ( ) ; public void close ( ) ; } 

package org . gradle . internal . reflect ; import com . google . common . base . Joiner ; import org . gradle . api . GradleException ; import org . gradle . internal . UncheckedException ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . Arrays ; public class JavaMethod < T , R > { private final Method method ; private final Class < R > returnType ; public JavaMethod ( Class < T > target , Class < R > returnType , String name , boolean allowStatic , Class < ? > . . . paramTypes ) { this . returnType = returnType ; method = findMethod ( target , target , name , allowStatic , paramTypes ) ; method . setAccessible ( true ) ; } public JavaMethod ( Class < T > target , Class < R > returnType , String name , Class < ? > . . . paramTypes ) { this ( target , returnType , name , false , paramTypes ) ; } public JavaMethod ( Class < T > target , Class < R > returnType , Method method ) { this . returnType = returnType ; this . method = method ; method . setAccessible ( true ) ; } private Method findMethod ( Class origTarget , Class target , String name , boolean allowStatic , Class < ? > [ ] paramTypes ) { for ( Method method : target . getDeclaredMethods ( ) ) { if ( ! allowStatic & & Modifier . isStatic ( method . getModifiers ( ) ) ) { continue ; } if ( method . getName ( ) . equals ( name ) & & Arrays . equals ( method . getParameterTypes ( ) , paramTypes ) ) { return method ; } } Class < ? > parent = target . getSuperclass ( ) ; if ( parent = = null ) { throw new NoSuchMethodException ( String . format ( <str> , name , Joiner . on ( <str> ) . join ( paramTypes ) , origTarget . getSimpleName ( ) ) ) ; } else { return findMethod ( origTarget , parent , name , allowStatic , paramTypes ) ; } } public boolean isStatic ( ) { return Modifier . isStatic ( method . getModifiers ( ) ) ; } public R invokeStatic ( Object . . . args ) { return invoke ( null , args ) ; } public R invoke ( T target , Object . . . args ) { try { Object result = method . invoke ( target , args ) ; return returnType . cast ( result ) ; } catch ( InvocationTargetException e ) { throw UncheckedException . throwAsUncheckedException ( e . getCause ( ) ) ; } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , method . getDeclaringClass ( ) . getSimpleName ( ) , method . getName ( ) , target ) , e ) ; } } public Method getMethod ( ) { return method ; } public Class < ? > [ ] getParameterTypes ( ) { return method . getParameterTypes ( ) ; } } 

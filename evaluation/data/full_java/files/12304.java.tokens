package org . gradle . profile ; import org . gradle . internal . html . SimpleHtmlWriter ; import org . gradle . reporting . DurationFormatter ; import org . gradle . reporting . HtmlReportRenderer ; import org . gradle . reporting . ReportRenderer ; import org . gradle . reporting . TabbedPageRenderer ; import java . io . File ; import java . io . IOException ; import java . net . URL ; public class ProfileReportRenderer { private static final DurationFormatter DURATION_FORMAT = new DurationFormatter ( ) ; public void writeTo ( BuildProfile buildProfile , File file ) { HtmlReportRenderer renderer = new HtmlReportRenderer ( ) ; renderer . renderSinglePage ( buildProfile , new ProfilePageRenderer ( ) , file ) ; } private static class ProfilePageRenderer extends TabbedPageRenderer < BuildProfile > { private static final URL STYLE_URL = ProfilePageRenderer . class . getResource ( <str> ) ; @Override protected String getTitle ( ) { return <str> ; } @Override protected URL getStyleUrl ( ) { return STYLE_URL ; } @Override protected ReportRenderer < BuildProfile , SimpleHtmlWriter > getHeaderRenderer ( ) { return new ReportRenderer < BuildProfile , SimpleHtmlWriter > ( ) { @Override public void render ( BuildProfile model , SimpleHtmlWriter htmlWriter ) throws IOException { htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . startElement ( <str> ) . characters ( model . getBuildDescription ( ) ) . endElement ( ) . startElement ( <str> ) . characters ( model . getBuildStartedDescription ( ) ) . endElement ( ) . endElement ( ) ; } } ; } @Override protected ReportRenderer < BuildProfile , SimpleHtmlWriter > getContentRenderer ( ) { return new ReportRenderer < BuildProfile , SimpleHtmlWriter > ( ) { @Override public void render ( BuildProfile model , SimpleHtmlWriter htmlWriter ) throws IOException { CompositeOperation < Operation > profiledProjectConfiguration = model . getProjectConfiguration ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . startElement ( <str> ) . attribute ( <str> , <str> ) . startElement ( <str> ) . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( <str> ) . endElement ( ) . endElement ( ) . startElement ( <str> ) . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( <str> ) . endElement ( ) . endElement ( ) . startElement ( <str> ) . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( <str> ) . endElement ( ) . endElement ( ) . startElement ( <str> ) . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( <str> ) . endElement ( ) . endElement ( ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( model . getElapsedTotal ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( model . getElapsedStartup ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( model . getElapsedSettings ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( model . getElapsedProjectsLoading ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( profiledProjectConfiguration . getElapsedTime ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( model . getElapsedTotalExecutionTime ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( profiledProjectConfiguration . getElapsedTime ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; for ( Operation operation : profiledProjectConfiguration ) { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( operation . getDescription ( ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( operation . getElapsedTime ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; } htmlWriter . endElement ( ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) . startElement ( <str> ) . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . endElement ( ) ; htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( model . getDependencySets ( ) . getElapsedTime ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; for ( Operation operation : model . getDependencySets ( ) ) { htmlWriter . startElement ( <str> ) ; htmlWriter . startElement ( <str> ) . characters ( operation . getDescription ( ) ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( operation . getElapsedTime ( ) ) ) . endElement ( ) ; htmlWriter . endElement ( ) ; } htmlWriter . endElement ( ) . endElement ( ) ; htmlWriter . startElement ( <str> ) . attribute ( <str> , <str> ) . attribute ( <str> , <str> ) ; htmlWriter . startElement ( <str> ) . characters ( <str> ) . endElement ( ) . startElement ( <str> ) . startElement ( <str> ) . startElement ( <str> ) . startElement ( <str> ) . characters ( <str> ) . endElement ( ) . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( <str> ) . endElement ( ) . startElement ( <str> ) . characters ( <str> ) . endElement ( ) . endElement ( ) . endElement ( ) ; for ( ProjectProfile project : model . getProjects ( ) ) { htmlWriter . startElement ( <str> ) . startElement ( <str> ) . characters ( project . getPath ( ) ) . endElement ( ) . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( project . getElapsedTime ( ) ) ) . endElement ( ) . startElement ( <str> ) . characters ( <str> ) . endElement ( ) . endElement ( ) ; for ( TaskExecution taskExecution : project . getTasks ( ) ) { htmlWriter . startElement ( <str> ) . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( taskExecution . getPath ( ) ) . endElement ( ) . startElement ( <str> ) . attribute ( <str> , <str> ) . characters ( DURATION_FORMAT . format ( taskExecution . getElapsedTime ( ) ) ) . endElement ( ) . startElement ( <str> ) . characters ( taskExecution . getStatus ( ) ) . endElement ( ) . endElement ( ) ; } } htmlWriter . endElement ( ) . endElement ( ) . endElement ( ) ; } } ; } } } 

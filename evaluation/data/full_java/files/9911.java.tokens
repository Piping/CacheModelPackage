package com . google . common . collect . testing ; import com . google . common . annotations . GwtCompatible ; import java . util . Arrays ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @GwtCompatible public class SampleElements < E > implements Iterable < E > { private final E e0 ; private final E e1 ; private final E e2 ; private final E e3 ; private final E e4 ; public SampleElements ( E e0 , E e1 , E e2 , E e3 , E e4 ) { this . e0 = e0 ; this . e1 = e1 ; this . e2 = e2 ; this . e3 = e3 ; this . e4 = e4 ; } @Override public Iterator < E > iterator ( ) { return asList ( ) . iterator ( ) ; } public List < E > asList ( ) { return Arrays . asList ( e0 ( ) , e1 ( ) , e2 ( ) , e3 ( ) , e4 ( ) ) ; } public static class Strings extends SampleElements < String > { public Strings ( ) { super ( <str> , <str> , <str> , <str> , <str> ) ; } public static final String BEFORE_FIRST = <str> ; public static final String BEFORE_FIRST_2 = <str> ; public static final String MIN_ELEMENT = <str> ; public static final String AFTER_LAST = <str> ; public static final String AFTER_LAST_2 = <str> ; } public static class Chars extends SampleElements < Character > { public Chars ( ) { super ( <str> , <str> , <str> , <str> , <str> ) ; } } public static class Enums extends SampleElements < AnEnum > { public Enums ( ) { super ( AnEnum . B , AnEnum . A , AnEnum . C , AnEnum . D , AnEnum . E ) ; } } public static class Ints extends SampleElements < Integer > { public Ints ( ) { super ( <int> , <int> , <int> , <int> , <int> ) ; } } public static < K , V > SampleElements < Map . Entry < K , V > > mapEntries ( SampleElements < K > keys , SampleElements < V > values ) { return new SampleElements < Map . Entry < K , V > > ( Helpers . mapEntry ( keys . e0 ( ) , values . e0 ( ) ) , Helpers . mapEntry ( keys . e1 ( ) , values . e1 ( ) ) , Helpers . mapEntry ( keys . e2 ( ) , values . e2 ( ) ) , Helpers . mapEntry ( keys . e3 ( ) , values . e3 ( ) ) , Helpers . mapEntry ( keys . e4 ( ) , values . e4 ( ) ) ) ; } public E e0 ( ) { return e0 ; } public E e1 ( ) { return e1 ; } public E e2 ( ) { return e2 ; } public E e3 ( ) { return e3 ; } public E e4 ( ) { return e4 ; } public static class Unhashables extends SampleElements < UnhashableObject > { public Unhashables ( ) { super ( new UnhashableObject ( <int> ) , new UnhashableObject ( <int> ) , new UnhashableObject ( <int> ) , new UnhashableObject ( <int> ) , new UnhashableObject ( <int> ) ) ; } } public static class Colliders extends SampleElements < Object > { public Colliders ( ) { super ( new Collider ( <int> ) , new Collider ( <int> ) , new Collider ( <int> ) , new Collider ( <int> ) , new Collider ( <int> ) ) ; } } private static class Collider { final int value ; Collider ( int value ) { this . value = value ; } @Override public boolean equals ( Object obj ) { return obj instanceof Collider & & ( ( Collider ) obj ) . value = = value ; } @Override public int hashCode ( ) { return <int> ; } } } 

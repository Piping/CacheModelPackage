package org . elasticsearch . search . aggregations . bucket . nested ; import org . apache . lucene . document . Document ; import org . apache . lucene . document . Field ; import org . apache . lucene . index . DirectoryReader ; import org . apache . lucene . index . IndexWriterConfig ; import org . apache . lucene . index . NoMergePolicy ; import org . apache . lucene . index . RandomIndexWriter ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . BooleanClause . Occur ; import org . apache . lucene . search . BooleanQuery ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . search . TermQuery ; import org . apache . lucene . store . Directory ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingRequest ; import org . elasticsearch . common . compress . CompressedXContent ; import org . elasticsearch . common . lucene . search . Queries ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . index . mapper . internal . TypeFieldMapper ; import org . elasticsearch . index . mapper . internal . UidFieldMapper ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . AggregatorFactories ; import org . elasticsearch . search . aggregations . BucketCollector ; import org . elasticsearch . search . aggregations . SearchContextAggregations ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import org . elasticsearch . search . internal . SearchContext ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import static org . hamcrest . Matchers . equalTo ; public class NestedAggregatorTests extends ESSingleNodeTestCase { public void testResetRootDocId ( ) throws Exception { Directory directory = newDirectory ( ) ; IndexWriterConfig iwc = new IndexWriterConfig ( null ) ; iwc . setMergePolicy ( NoMergePolicy . INSTANCE ) ; RandomIndexWriter indexWriter = new RandomIndexWriter ( random ( ) , directory , iwc ) ; List < Document > documents = new ArrayList < > ( ) ; Document document = new Document ( ) ; document . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . NESTED_FIELD_TYPE ) ) ; document . add ( new Field ( TypeFieldMapper . NAME , <str> , TypeFieldMapper . Defaults . FIELD_TYPE ) ) ; documents . add ( document ) ; document = new Document ( ) ; document . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . NESTED_FIELD_TYPE ) ) ; document . add ( new Field ( TypeFieldMapper . NAME , <str> , TypeFieldMapper . Defaults . FIELD_TYPE ) ) ; documents . add ( document ) ; document = new Document ( ) ; document . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . NESTED_FIELD_TYPE ) ) ; document . add ( new Field ( TypeFieldMapper . NAME , <str> , TypeFieldMapper . Defaults . FIELD_TYPE ) ) ; documents . add ( document ) ; document = new Document ( ) ; document . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . FIELD_TYPE ) ) ; document . add ( new Field ( TypeFieldMapper . NAME , <str> , TypeFieldMapper . Defaults . FIELD_TYPE ) ) ; documents . add ( document ) ; indexWriter . addDocuments ( documents ) ; indexWriter . commit ( ) ; documents . clear ( ) ; document = new Document ( ) ; document . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . NESTED_FIELD_TYPE ) ) ; document . add ( new Field ( TypeFieldMapper . NAME , <str> , TypeFieldMapper . Defaults . FIELD_TYPE ) ) ; documents . add ( document ) ; document = new Document ( ) ; document . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . FIELD_TYPE ) ) ; document . add ( new Field ( TypeFieldMapper . NAME , <str> , TypeFieldMapper . Defaults . FIELD_TYPE ) ) ; documents . add ( document ) ; indexWriter . addDocuments ( documents ) ; documents . clear ( ) ; document = new Document ( ) ; document . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . NESTED_FIELD_TYPE ) ) ; document . add ( new Field ( TypeFieldMapper . NAME , <str> , TypeFieldMapper . Defaults . FIELD_TYPE ) ) ; documents . add ( document ) ; document = new Document ( ) ; document . add ( new Field ( UidFieldMapper . NAME , <str> , UidFieldMapper . Defaults . FIELD_TYPE ) ) ; document . add ( new Field ( TypeFieldMapper . NAME , <str> , TypeFieldMapper . Defaults . FIELD_TYPE ) ) ; documents . add ( document ) ; indexWriter . addDocuments ( documents ) ; indexWriter . commit ( ) ; indexWriter . close ( ) ; DirectoryReader directoryReader = DirectoryReader . open ( directory ) ; IndexSearcher searcher = new IndexSearcher ( directoryReader ) ; IndexService indexService = createIndex ( <str> ) ; indexService . mapperService ( ) . merge ( <str> , new CompressedXContent ( PutMappingRequest . buildFromSimplifiedDef ( <str> , <str> , <str> ) . string ( ) ) , true , false ) ; SearchContext searchContext = createSearchContext ( indexService ) ; AggregationContext context = new AggregationContext ( searchContext ) ; AggregatorFactories . Builder builder = AggregatorFactories . builder ( ) ; builder . addAggregator ( new NestedAggregator . Factory ( <str> , <str> ) ) ; AggregatorFactories factories = builder . build ( ) ; searchContext . aggregations ( new SearchContextAggregations ( factories ) ) ; Aggregator [ ] aggs = factories . createTopLevelAggregators ( context ) ; BucketCollector collector = BucketCollector . wrap ( Arrays . asList ( aggs ) ) ; collector . preCollection ( ) ; BooleanQuery . Builder bq = new BooleanQuery . Builder ( ) ; bq . add ( Queries . newNonNestedFilter ( ) , Occur . MUST ) ; bq . add ( new TermQuery ( new Term ( UidFieldMapper . NAME , <str> ) ) , Occur . MUST_NOT ) ; searcher . search ( new ConstantScoreQuery ( bq . build ( ) ) , collector ) ; collector . postCollection ( ) ; Nested nested = ( Nested ) aggs [ <int> ] . buildAggregation ( <int> ) ; assertThat ( nested . getDocCount ( ) , equalTo ( <int> ) ) ; directoryReader . close ( ) ; directory . close ( ) ; } } 

package org . gradle . internal . filewatch ; import org . gradle . api . Nullable ; import java . io . File ; public class FileWatcherEvent { public enum Type { CREATE , MODIFY , DELETE , UNDEFINED } private final Type type ; private final File file ; private FileWatcherEvent ( Type type , File file ) { this . type = type ; this . file = file ; } public Type getType ( ) { return type ; } @Nullable public File getFile ( ) { return file ; } @Override public String toString ( ) { return <str> + type + <str> + file + <str> ; } public static FileWatcherEvent create ( File file ) { return new FileWatcherEvent ( Type . CREATE , file ) ; } public static FileWatcherEvent modify ( File file ) { return new FileWatcherEvent ( Type . MODIFY , file ) ; } public static FileWatcherEvent delete ( File file ) { return new FileWatcherEvent ( Type . DELETE , file ) ; } public static FileWatcherEvent undefined ( ) { return new FileWatcherEvent ( Type . UNDEFINED , null ) ; } } 

package org . eclipse . debug . internal . ui . model . elements ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementCompareRequest ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementMementoProvider ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementMementoRequest ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . ui . IMemento ; public abstract class ElementMementoProvider implements IElementMementoProvider { @Override public void compareElements ( final IElementCompareRequest [ ] requests ) { Job job = new Job ( <str> ) { @Override protected IStatus run ( IProgressMonitor monitor ) { for ( int i = <int> ; i < requests . length ; i + + ) { IElementCompareRequest request = requests [ i ] ; try { request . setEqual ( isEqual ( request . getElement ( ) , request . getMemento ( ) , request . getPresentationContext ( ) ) ) ; } catch ( CoreException e ) { request . setStatus ( e . getStatus ( ) ) ; } request . done ( ) ; } return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; } protected abstract boolean isEqual ( Object element , IMemento memento , IPresentationContext context ) throws CoreException ; @Override public void encodeElements ( final IElementMementoRequest [ ] requests ) { Job job = new Job ( <str> ) { @Override protected IStatus run ( IProgressMonitor monitor ) { for ( int i = <int> ; i < requests . length ; i + + ) { IElementMementoRequest request = requests [ i ] ; try { if ( ! encodeElement ( request . getElement ( ) , request . getMemento ( ) , request . getPresentationContext ( ) ) ) { request . cancel ( ) ; } } catch ( CoreException e ) { request . setStatus ( e . getStatus ( ) ) ; } request . done ( ) ; } return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; } protected abstract boolean encodeElement ( Object element , IMemento memento , IPresentationContext context ) throws CoreException ; } 

package org . gradle . api . internal ; import org . gradle . api . internal . classpath . Module ; import org . gradle . api . internal . classpath . ModuleRegistry ; import org . gradle . api . internal . classpath . PluginModuleRegistry ; import org . gradle . internal . classpath . ClassPath ; import org . gradle . internal . classpath . DefaultClassPath ; import java . util . Arrays ; import java . util . Set ; public class DynamicModulesClassPathProvider implements ClassPathProvider { private final ModuleRegistry moduleRegistry ; private final PluginModuleRegistry pluginModuleRegistry ; public DynamicModulesClassPathProvider ( ModuleRegistry moduleRegistry , PluginModuleRegistry pluginModuleRegistry ) { this . moduleRegistry = moduleRegistry ; this . pluginModuleRegistry = pluginModuleRegistry ; } public ClassPath findClassPath ( String name ) { if ( name . equals ( <str> ) ) { Set < Module > coreModules = moduleRegistry . getModule ( <str> ) . getAllRequiredModules ( ) ; ClassPath classpath = new DefaultClassPath ( ) ; for ( String moduleName : Arrays . asList ( <str> , <str> ) ) { for ( Module module : moduleRegistry . getModule ( moduleName ) . getAllRequiredModules ( ) ) { if ( ! coreModules . contains ( module ) ) { classpath = classpath . plus ( module . getClasspath ( ) ) ; } } } for ( Module pluginModule : pluginModuleRegistry . getPluginModules ( ) ) { classpath = classpath . plus ( pluginModule . getClasspath ( ) ) ; } return classpath ; } return null ; } } 

package org . eclipse . debug . ui ; import java . io . File ; import org . eclipse . core . filesystem . URIUtil ; import org . eclipse . core . resources . IContainer ; import org . eclipse . core . resources . IProject ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . Assert ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . variables . IStringVariableManager ; import org . eclipse . core . variables . VariablesPlugin ; import org . eclipse . debug . core . ILaunchConfiguration ; import org . eclipse . debug . core . ILaunchConfigurationWorkingCopy ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . SWTFactory ; import org . eclipse . swt . events . ModifyEvent ; import org . eclipse . swt . events . ModifyListener ; import org . eclipse . swt . events . SelectionAdapter ; import org . eclipse . swt . events . SelectionEvent ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . layout . GridData ; import org . eclipse . swt . layout . GridLayout ; import org . eclipse . swt . widgets . Button ; import org . eclipse . swt . widgets . Composite ; import org . eclipse . swt . widgets . DirectoryDialog ; import org . eclipse . swt . widgets . Group ; import org . eclipse . swt . widgets . Text ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . dialogs . ContainerSelectionDialog ; public abstract class WorkingDirectoryBlock extends AbstractLaunchConfigurationTab { private Button fWorkspaceButton ; private Button fFileSystemButton ; private Button fVariablesButton ; private Button fUseDefaultDirButton = null ; private Button fUseOtherDirButton = null ; private Text fOtherWorkingText = null ; private Text fWorkingDirText ; private ILaunchConfiguration fLaunchConfiguration ; private class WidgetListener extends SelectionAdapter implements ModifyListener { @Override public void modifyText ( ModifyEvent e ) { scheduleUpdateJob ( ) ; } @Override public void widgetSelected ( SelectionEvent e ) { Object source = e . getSource ( ) ; if ( source = = fWorkspaceButton ) { handleWorkspaceDirBrowseButtonSelected ( ) ; } else if ( source = = fFileSystemButton ) { handleWorkingDirBrowseButtonSelected ( ) ; } else if ( source = = fVariablesButton ) { handleWorkingDirVariablesButtonSelected ( ) ; } else if ( source = = fUseDefaultDirButton ) { if ( fUseDefaultDirButton . getSelection ( ) ) { setDefaultWorkingDir ( ) ; } } else if ( source = = fUseOtherDirButton ) { if ( fUseOtherDirButton . getSelection ( ) ) { handleUseOtherWorkingDirButtonSelected ( ) ; } } } } private WidgetListener fListener = new WidgetListener ( ) ; private final String workingDirectoryAttribteName ; private final String helpContextId ; protected WorkingDirectoryBlock ( String workingDirectoryAttribteName ) { this ( workingDirectoryAttribteName , null ) ; } protected WorkingDirectoryBlock ( String workingDirectoryAttribteName , String helpContextId ) { Assert . isNotNull ( workingDirectoryAttribteName ) ; this . workingDirectoryAttribteName = workingDirectoryAttribteName ; this . helpContextId = helpContextId ; } @Override public final void createControl ( Composite parent ) { Font font = parent . getFont ( ) ; Group group = SWTFactory . createGroup ( parent , DebugUIMessages . WorkingDirectoryBlock_12 , <int> , <int> , GridData . FILL_HORIZONTAL ) ; setControl ( group ) ; if ( helpContextId ! = null ) { PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( group , helpContextId ) ; } Composite comp = SWTFactory . createComposite ( group , font , <int> , <int> , GridData . FILL_BOTH , <int> , <int> ) ; fUseDefaultDirButton = SWTFactory . createRadioButton ( comp , DebugUIMessages . WorkingDirectoryBlock_18 ) ; fUseDefaultDirButton . addSelectionListener ( fListener ) ; fWorkingDirText = SWTFactory . createSingleText ( comp , <int> ) ; fWorkingDirText . addModifyListener ( fListener ) ; fWorkingDirText . setEnabled ( false ) ; fUseOtherDirButton = SWTFactory . createRadioButton ( comp , DebugUIMessages . WorkingDirectoryBlock_19 ) ; fUseOtherDirButton . addSelectionListener ( fListener ) ; fOtherWorkingText = SWTFactory . createSingleText ( comp , <int> ) ; fOtherWorkingText . addModifyListener ( fListener ) ; Composite buttonComp = SWTFactory . createComposite ( comp , font , <int> , <int> , GridData . HORIZONTAL_ALIGN_END ) ; GridLayout ld = ( GridLayout ) buttonComp . getLayout ( ) ; ld . marginHeight = <int> ; ld . marginWidth = <int> ; fWorkspaceButton = createPushButton ( buttonComp , DebugUIMessages . WorkingDirectoryBlock_0 , null ) ; fWorkspaceButton . addSelectionListener ( fListener ) ; fFileSystemButton = createPushButton ( buttonComp , DebugUIMessages . WorkingDirectoryBlock_1 , null ) ; fFileSystemButton . addSelectionListener ( fListener ) ; fVariablesButton = createPushButton ( buttonComp , DebugUIMessages . WorkingDirectoryBlock_17 , null ) ; fVariablesButton . addSelectionListener ( fListener ) ; } private void handleWorkingDirBrowseButtonSelected ( ) { DirectoryDialog dialog = new DirectoryDialog ( getShell ( ) ) ; dialog . setMessage ( DebugUIMessages . WorkingDirectoryBlock_7 ) ; String currentWorkingDir = getWorkingDirectoryText ( ) ; if ( ! currentWorkingDir . trim ( ) . equals ( <str> ) ) { File path = new File ( currentWorkingDir ) ; if ( path . exists ( ) ) { dialog . setFilterPath ( currentWorkingDir ) ; } } String selectedDirectory = dialog . open ( ) ; if ( selectedDirectory ! = null ) { fOtherWorkingText . setText ( selectedDirectory ) ; } } private void handleWorkspaceDirBrowseButtonSelected ( ) { IContainer currentContainer = getContainer ( ) ; if ( currentContainer = = null ) { currentContainer = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; } ContainerSelectionDialog dialog = new ContainerSelectionDialog ( getShell ( ) , currentContainer , false , DebugUIMessages . WorkingDirectoryBlock_4 ) ; dialog . showClosedProjects ( false ) ; dialog . open ( ) ; Object [ ] results = dialog . getResult ( ) ; if ( ( results ! = null ) & & ( results . length > <int> ) & & ( results [ <int> ] instanceof IPath ) ) { IPath path = ( IPath ) results [ <int> ] ; String containerName = path . makeRelative ( ) . toString ( ) ; setOtherWorkingDirectoryText ( <str> + containerName + <str> ) ; } } protected IContainer getContainer ( ) { String path = getWorkingDirectoryText ( ) ; if ( path . length ( ) > <int> ) { IResource res = null ; IWorkspaceRoot root = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; if ( path . startsWith ( <str> ) ) { IStringVariableManager manager = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) ; try { path = manager . performStringSubstitution ( path , false ) ; IPath uriPath = new Path ( path ) . makeAbsolute ( ) ; IContainer [ ] containers = root . findContainersForLocationURI ( URIUtil . toURI ( uriPath ) ) ; if ( containers . length > <int> ) { res = containers [ <int> ] ; } } catch ( CoreException e ) { log ( e ) ; } } else { res = root . findMember ( path ) ; } if ( res instanceof IContainer ) { return ( IContainer ) res ; } } return null ; } private void handleUseDefaultWorkingDirButtonSelected ( ) { fWorkspaceButton . setEnabled ( false ) ; fOtherWorkingText . setEnabled ( false ) ; fVariablesButton . setEnabled ( false ) ; fFileSystemButton . setEnabled ( false ) ; fUseOtherDirButton . setSelection ( false ) ; } private void handleUseOtherWorkingDirButtonSelected ( ) { fOtherWorkingText . setEnabled ( true ) ; fWorkspaceButton . setEnabled ( true ) ; fVariablesButton . setEnabled ( true ) ; fFileSystemButton . setEnabled ( true ) ; updateLaunchConfigurationDialog ( ) ; } private void handleWorkingDirVariablesButtonSelected ( ) { StringVariableSelectionDialog dialog = new StringVariableSelectionDialog ( getShell ( ) ) ; dialog . open ( ) ; String variableText = dialog . getVariableExpression ( ) ; if ( variableText ! = null ) { fOtherWorkingText . insert ( variableText ) ; } } protected void setDefaultWorkingDir ( ) { try { ILaunchConfiguration config = getLaunchConfiguration ( ) ; if ( config ! = null ) { IProject project = getProject ( config ) ; if ( project ! = null ) { setDefaultWorkingDirectoryText ( <str> + project . getFullPath ( ) . makeRelative ( ) . toOSString ( ) + <str> ) ; return ; } } } catch ( CoreException ce ) { log ( ce ) ; } setDefaultWorkingDirectoryText ( System . getProperty ( <str> ) ) ; } protected abstract IProject getProject ( ILaunchConfiguration configuration ) throws CoreException ; @Override public boolean isValid ( ILaunchConfiguration config ) { setErrorMessage ( null ) ; setMessage ( null ) ; String workingDirPath = getWorkingDirectoryText ( ) ; if ( workingDirPath . indexOf ( <str> ) > = <int> ) { IStringVariableManager manager = VariablesPlugin . getDefault ( ) . getStringVariableManager ( ) ; try { manager . validateStringVariables ( workingDirPath ) ; } catch ( CoreException e ) { setErrorMessage ( e . getMessage ( ) ) ; return false ; } } else if ( workingDirPath . length ( ) > <int> ) { IContainer container = getContainer ( ) ; if ( container = = null ) { File dir = new File ( workingDirPath ) ; if ( dir . isDirectory ( ) ) { return true ; } setErrorMessage ( DebugUIMessages . WorkingDirectoryBlock_10 ) ; return false ; } } else if ( workingDirPath . length ( ) = = <int> ) { setErrorMessage ( DebugUIMessages . WorkingDirectoryBlock_20 ) ; return false ; } return true ; } @Override public void setDefaults ( ILaunchConfigurationWorkingCopy config ) { config . setAttribute ( workingDirectoryAttribteName , ( String ) null ) ; } @Override public void initializeFrom ( ILaunchConfiguration configuration ) { setLaunchConfiguration ( configuration ) ; try { String wd = configuration . getAttribute ( workingDirectoryAttribteName , ( String ) null ) ; setDefaultWorkingDir ( ) ; if ( wd ! = null ) { setOtherWorkingDirectoryText ( wd ) ; } } catch ( CoreException e ) { setErrorMessage ( DebugUIMessages . WorkingDirectoryBlock_Exception_occurred_reading_configuration___15 + e . getStatus ( ) . getMessage ( ) ) ; } } @Override public void performApply ( ILaunchConfigurationWorkingCopy configuration ) { if ( fUseDefaultDirButton . getSelection ( ) ) { configuration . setAttribute ( workingDirectoryAttribteName , ( String ) null ) ; } else { configuration . setAttribute ( workingDirectoryAttribteName , getWorkingDirectoryText ( ) ) ; } } @Override public String getName ( ) { return DebugUIMessages . WorkingDirectoryBlock_Working_Directory_8 ; } protected void log ( CoreException e ) { } protected final String getWorkingDirectoryText ( ) { if ( fUseDefaultDirButton . getSelection ( ) ) { return fWorkingDirText . getText ( ) . trim ( ) ; } return fOtherWorkingText . getText ( ) . trim ( ) ; } protected final void setDefaultWorkingDirectoryText ( String dir ) { if ( dir ! = null ) { fWorkingDirText . setText ( dir ) ; fUseDefaultDirButton . setSelection ( true ) ; handleUseDefaultWorkingDirButtonSelected ( ) ; } } protected final void setOtherWorkingDirectoryText ( String dir ) { if ( dir ! = null ) { fOtherWorkingText . setText ( dir ) ; fUseDefaultDirButton . setSelection ( false ) ; fUseOtherDirButton . setSelection ( true ) ; handleUseOtherWorkingDirButtonSelected ( ) ; } } protected void setLaunchConfiguration ( ILaunchConfiguration config ) { fLaunchConfiguration = config ; } protected ILaunchConfiguration getLaunchConfiguration ( ) { return fLaunchConfiguration ; } public final void setEnabled ( boolean enabled ) { fUseDefaultDirButton . setEnabled ( enabled ) ; fUseOtherDirButton . setEnabled ( enabled ) ; if ( fOtherWorkingText . isEnabled ( ) ) { fOtherWorkingText . setEnabled ( enabled ) ; fWorkspaceButton . setEnabled ( enabled ) ; fVariablesButton . setEnabled ( enabled ) ; fFileSystemButton . setEnabled ( enabled ) ; } if ( fUseOtherDirButton . getSelection ( ) & & enabled = = true ) { fOtherWorkingText . setEnabled ( enabled ) ; } } } 

package org . eclipse . debug . examples . core . pda . breakpoints ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRunnable ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . IWatchpoint ; import org . eclipse . debug . examples . core . pda . model . PDADebugTarget ; import org . eclipse . debug . examples . core . pda . protocol . PDAEvent ; import org . eclipse . debug . examples . core . pda . protocol . PDARunControlEvent ; import org . eclipse . debug . examples . core . pda . protocol . PDASuspendedEvent ; import org . eclipse . debug . examples . core . pda . protocol . PDAVMSuspendedEvent ; import org . eclipse . debug . examples . core . pda . protocol . PDAWatchCommand ; public class PDAWatchpoint extends PDALineBreakpoint implements IWatchpoint { private String fLastSuspendType ; public static final String ACCESS = <str> ; public static final String MODIFICATION = <str> ; public static final String FUNCTION_NAME = <str> ; public static final String VAR_NAME = <str> ; public PDAWatchpoint ( ) { } public PDAWatchpoint ( final IResource resource , final int lineNumber , final String functionName , final String varName , final boolean access , final boolean modification ) throws CoreException { IWorkspaceRunnable runnable = new IWorkspaceRunnable ( ) { @Override public void run ( IProgressMonitor monitor ) throws CoreException { IMarker marker = resource . createMarker ( <str> ) ; setMarker ( marker ) ; setEnabled ( true ) ; ensureMarker ( ) . setAttribute ( IMarker . LINE_NUMBER , lineNumber ) ; ensureMarker ( ) . setAttribute ( IBreakpoint . ID , getModelIdentifier ( ) ) ; setAccess ( access ) ; setModification ( modification ) ; setVariable ( functionName , varName ) ; marker . setAttribute ( IMarker . MESSAGE , <str> + resource . getName ( ) + <str> + lineNumber + <str> ) ; } } ; run ( getMarkerRule ( resource ) , runnable ) ; } @Override public boolean isAccess ( ) throws CoreException { return getMarker ( ) . getAttribute ( ACCESS , true ) ; } @Override public void setAccess ( boolean access ) throws CoreException { setAttribute ( ACCESS , access ) ; } @Override public boolean isModification ( ) throws CoreException { return getMarker ( ) . getAttribute ( MODIFICATION , true ) ; } @Override public void setModification ( boolean modification ) throws CoreException { setAttribute ( MODIFICATION , modification ) ; } @Override public boolean supportsAccess ( ) { return true ; } @Override public boolean supportsModification ( ) { return true ; } protected void setVariable ( String functionName , String variableName ) throws CoreException { setAttribute ( VAR_NAME , variableName ) ; setAttribute ( FUNCTION_NAME , functionName ) ; } public String getVariableName ( ) throws CoreException { return getMarker ( ) . getAttribute ( VAR_NAME , ( String ) null ) ; } public String getFunctionName ( ) throws CoreException { return getMarker ( ) . getAttribute ( FUNCTION_NAME , ( String ) null ) ; } public void setSuspendType ( String description ) { fLastSuspendType = description ; } public String getSuspendType ( ) { return fLastSuspendType ; } @Override protected void createRequest ( PDADebugTarget target ) throws CoreException { int flag = <int> ; if ( isAccess ( ) ) { flag = flag | <int> ; } if ( isModification ( ) ) { flag = flag | <int> ; } target . sendCommand ( new PDAWatchCommand ( getFunctionName ( ) , getVariableName ( ) , flag ) ) ; } @Override protected void clearRequest ( PDADebugTarget target ) throws CoreException { target . sendCommand ( new PDAWatchCommand ( getFunctionName ( ) , getVariableName ( ) , <int> ) ) ; } @Override public void handleEvent ( PDAEvent event ) { if ( event instanceof PDASuspendedEvent | | event instanceof PDAVMSuspendedEvent ) { PDARunControlEvent rcEvent = ( PDARunControlEvent ) event ; if ( rcEvent . fReason . equals ( <str> ) ) { handleHit ( rcEvent ) ; } } } private void handleHit ( PDARunControlEvent event ) { String [ ] strings = event . fMessage . split ( <str> ) ; if ( strings . length = = <int> ) { String fv = strings [ <int> ] ; int j = fv . indexOf ( <str> ) ; if ( j > <int> ) { String fcn = fv . substring ( <int> , j ) ; String var = fv . substring ( j + <int> ) ; try { if ( getVariableName ( ) . equals ( var ) & & getFunctionName ( ) . equals ( fcn ) ) { setSuspendType ( strings [ <int> ] ) ; notifyThread ( event . fThreadId ) ; } } catch ( CoreException e ) { } } } } } 

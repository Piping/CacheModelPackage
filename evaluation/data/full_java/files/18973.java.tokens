package io . netty . handler . codec . compression ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufInputStream ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import org . apache . commons . compress . compressors . bzip2 . BZip2CompressorInputStream ; import java . io . InputStream ; import static io . netty . handler . codec . compression . Bzip2Constants . * ; import static org . junit . Assert . * ; public class Bzip2EncoderTest extends AbstractEncoderTest { @Override public void initChannel ( ) { channel = new EmbeddedChannel ( new Bzip2Encoder ( MIN_BLOCK_SIZE ) ) ; } @Override protected ByteBuf decompress ( ByteBuf compressed , int originalLength ) throws Exception { InputStream is = new ByteBufInputStream ( compressed ) ; BZip2CompressorInputStream bzip2Is = new BZip2CompressorInputStream ( is ) ; byte [ ] decompressed = new byte [ originalLength ] ; int remaining = originalLength ; while ( remaining > <int> ) { int read = bzip2Is . read ( decompressed , originalLength - remaining , remaining ) ; if ( read > <int> ) { remaining - = read ; } else { break ; } } assertEquals ( - <int> , bzip2Is . read ( ) ) ; bzip2Is . close ( ) ; return Unpooled . wrappedBuffer ( decompressed ) ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . spans . SpanFirstQuery ; import org . apache . lucene . search . spans . SpanQuery ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . Objects ; public class SpanFirstQueryBuilder extends AbstractQueryBuilder < SpanFirstQueryBuilder > implements SpanQueryBuilder < SpanFirstQueryBuilder > { public static final String NAME = <str> ; private final SpanQueryBuilder matchBuilder ; private final int end ; static final SpanFirstQueryBuilder PROTOTYPE = new SpanFirstQueryBuilder ( SpanTermQueryBuilder . PROTOTYPE , <int> ) ; public SpanFirstQueryBuilder ( SpanQueryBuilder matchBuilder , int end ) { if ( matchBuilder = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( end < <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . matchBuilder = matchBuilder ; this . end = end ; } public SpanQueryBuilder innerQuery ( ) { return this . matchBuilder ; } public int end ( ) { return this . end ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . field ( SpanFirstQueryParser . MATCH_FIELD . getPreferredName ( ) ) ; matchBuilder . toXContent ( builder , params ) ; builder . field ( SpanFirstQueryParser . END_FIELD . getPreferredName ( ) , end ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { Query innerSpanQuery = matchBuilder . toQuery ( context ) ; assert innerSpanQuery instanceof SpanQuery ; return new SpanFirstQuery ( ( SpanQuery ) innerSpanQuery , end ) ; } @Override protected SpanFirstQueryBuilder doReadFrom ( StreamInput in ) throws IOException { SpanQueryBuilder matchBuilder = ( SpanQueryBuilder ) in . readQuery ( ) ; int end = in . readInt ( ) ; return new SpanFirstQueryBuilder ( matchBuilder , end ) ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeQuery ( matchBuilder ) ; out . writeInt ( end ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( matchBuilder , end ) ; } @Override protected boolean doEquals ( SpanFirstQueryBuilder other ) { return Objects . equals ( matchBuilder , other . matchBuilder ) & & Objects . equals ( end , other . end ) ; } @Override public String getWriteableName ( ) { return NAME ; } } 

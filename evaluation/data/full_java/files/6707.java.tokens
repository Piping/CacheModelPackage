package org . elasticsearch . index . query . functionscore . fieldvaluefactor ; import org . elasticsearch . common . lucene . search . function . FieldValueFactorFunction ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . index . query . QueryParseContext ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . index . query . functionscore . ScoreFunctionParser ; import java . io . IOException ; public class FieldValueFactorFunctionParser implements ScoreFunctionParser < FieldValueFactorFunctionBuilder > { public static String [ ] NAMES = { <str> , <str> } ; private static final FieldValueFactorFunctionBuilder PROTOTYPE = new FieldValueFactorFunctionBuilder ( <str> ) ; @Override public FieldValueFactorFunctionBuilder fromXContent ( QueryParseContext parseContext , XContentParser parser ) throws IOException , ParsingException { String currentFieldName = null ; String field = null ; float boostFactor = FieldValueFactorFunctionBuilder . DEFAULT_FACTOR ; FieldValueFactorFunction . Modifier modifier = FieldValueFactorFunction . Modifier . NONE ; Double missing = null ; XContentParser . Token token ; while ( ( token = parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { if ( token = = XContentParser . Token . FIELD_NAME ) { currentFieldName = parser . currentName ( ) ; } else if ( token . isValue ( ) ) { if ( <str> . equals ( currentFieldName ) ) { field = parser . text ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { boostFactor = parser . floatValue ( ) ; } else if ( <str> . equals ( currentFieldName ) ) { modifier = FieldValueFactorFunction . Modifier . fromString ( parser . text ( ) ) ; } else if ( <str> . equals ( currentFieldName ) ) { missing = parser . doubleValue ( ) ; } else { throw new ParsingException ( parser . getTokenLocation ( ) , NAMES [ <int> ] + <str> + currentFieldName + <str> ) ; } } else if ( <str> . equals ( currentFieldName ) & & ( token = = XContentParser . Token . START_ARRAY | | token = = XContentParser . Token . START_OBJECT ) ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + NAMES [ <int> ] + <str> ) ; } } if ( field = = null ) { throw new ParsingException ( parser . getTokenLocation ( ) , <str> + NAMES [ <int> ] + <str> ) ; } FieldValueFactorFunctionBuilder fieldValueFactorFunctionBuilder = new FieldValueFactorFunctionBuilder ( field ) . factor ( boostFactor ) . modifier ( modifier ) ; if ( missing ! = null ) { fieldValueFactorFunctionBuilder . missing ( missing ) ; } return fieldValueFactorFunctionBuilder ; } @Override public String [ ] getNames ( ) { return NAMES ; } @Override public FieldValueFactorFunctionBuilder getBuilderPrototype ( ) { return PROTOTYPE ; } } 

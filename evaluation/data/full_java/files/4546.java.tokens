package org . eclipse . debug . internal . ui . views . memory ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . StringTokenizer ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . core . runtime . jobs . Job ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . IDebugEventSetListener ; import org . eclipse . debug . core . model . IDebugElement ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockExtension ; import org . eclipse . debug . core . model . IMemoryBlockRetrieval ; import org . eclipse . debug . core . model . IMemoryBlockRetrievalExtension ; import org . eclipse . debug . core . model . ITerminate ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugPluginImages ; import org . eclipse . debug . internal . ui . DebugUIMessages ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . ui . DebugUITools ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . debug . ui . contexts . DebugContextEvent ; import org . eclipse . debug . ui . contexts . IDebugContextListener ; import org . eclipse . debug . ui . memory . IMemoryRendering ; import org . eclipse . debug . ui . memory . IMemoryRenderingContainer ; import org . eclipse . debug . ui . memory . IMemoryRenderingSite ; import org . eclipse . debug . ui . memory . IMemoryRenderingType ; import org . eclipse . jface . action . Action ; import org . eclipse . jface . window . Window ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . ui . PlatformUI ; public class AddMemoryBlockAction extends Action implements IDebugContextListener , IDebugEventSetListener { protected IAdaptable fCurrentContext = null ; protected IMemoryBlock fLastMemoryBlock ; private boolean fAddDefaultRenderings = true ; protected IMemoryRenderingSite fSite ; public AddMemoryBlockAction ( IMemoryRenderingSite site ) { initialize ( site ) ; } AddMemoryBlockAction ( IMemoryRenderingSite site , boolean addDefaultRenderings ) { initialize ( site ) ; fAddDefaultRenderings = addDefaultRenderings ; } private void initialize ( IMemoryRenderingSite site ) { setText ( DebugUIMessages . AddMemoryBlockAction_title ) ; doInitialization ( site ) ; } public AddMemoryBlockAction ( String text , int style , IMemoryRenderingSite site ) { super ( text , style ) ; doInitialization ( site ) ; } private void doInitialization ( IMemoryRenderingSite site ) { fSite = site ; setToolTipText ( DebugUIMessages . AddMemoryBlockAction_tooltip ) ; setImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_ELCL_MONITOR_EXPRESSION ) ) ; setHoverImageDescriptor ( DebugPluginImages . getImageDescriptor ( IDebugUIConstants . IMG_LCL_ADD ) ) ; setDisabledImageDescriptor ( DebugPluginImages . getImageDescriptor ( IInternalDebugUIConstants . IMG_DLCL_MONITOR_EXPRESSION ) ) ; PlatformUI . getWorkbench ( ) . getHelpSystem ( ) . setHelp ( this , IDebugUIConstants . PLUGIN_ID + <str> ) ; DebugUITools . addPartDebugContextListener ( fSite . getSite ( ) , this ) ; fCurrentContext = DebugUITools . getPartDebugContext ( site . getSite ( ) ) ; updateAction ( fCurrentContext ) ; DebugPlugin . getDefault ( ) . addDebugEventListener ( this ) ; } @Override public void run ( ) { boolean exit = false ; String prefillExp = null ; String prefillLength = null ; while ( ! exit ) { exit = true ; Object elem = fCurrentContext ; IMemoryBlockRetrieval retrieval = MemoryViewUtil . getMemoryBlockRetrieval ( elem ) ; if ( retrieval = = null ) { return ; } Shell shell = DebugUIPlugin . getDefault ( ) . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getShell ( ) ; MonitorMemoryBlockDialog dialog = new MonitorMemoryBlockDialog ( shell , retrieval , prefillExp , prefillLength ) ; dialog . open ( ) ; int returnCode = dialog . getReturnCode ( ) ; if ( returnCode = = Window . CANCEL ) { return ; } String input = dialog . getExpression ( ) ; prefillExp = input ; prefillLength = dialog . getLength ( ) ; ArrayList < String > expressions = new ArrayList < String > ( ) ; if ( input . length ( ) = = <int> ) { expressions . add ( IInternalDebugCoreConstants . EMPTY_STRING ) ; } else { StringTokenizer tokenizer = new StringTokenizer ( input , <str> ) ; while ( tokenizer . hasMoreTokens ( ) ) { expressions . add ( tokenizer . nextToken ( ) ) ; } } final String [ ] expressionsArray = expressions . toArray ( new String [ expressions . size ( ) ] ) ; exit = true ; final boolean finalExit = exit ; final Object finalElement = elem ; final IMemoryBlockRetrieval finalRetrieval = retrieval ; final MonitorMemoryBlockDialog finalDialog = dialog ; Job job = new Job ( <str> ) { @Override protected IStatus run ( IProgressMonitor monitor ) { addMemoryBlocks ( finalExit , finalElement , finalRetrieval , finalDialog , expressionsArray ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; } } private boolean addMemoryBlocks ( boolean exit , Object elem , IMemoryBlockRetrieval standardMemRetrieval , MonitorMemoryBlockDialog dialog , final String [ ] expressionsArray ) { for ( int i = <int> ; i < expressionsArray . length ; i + + ) { String expression = expressionsArray [ i ] . trim ( ) ; try { if ( standardMemRetrieval instanceof IMemoryBlockRetrievalExtension ) { IMemoryBlockRetrievalExtension memRetrieval = ( IMemoryBlockRetrievalExtension ) standardMemRetrieval ; IMemoryBlockExtension memBlock = memRetrieval . getExtendedMemoryBlock ( expression , elem ) ; if ( memBlock ! = null ) { fLastMemoryBlock = memBlock ; IMemoryBlock [ ] memArray = new IMemoryBlock [ ] { memBlock } ; MemoryViewUtil . getMemoryBlockManager ( ) . addMemoryBlocks ( memArray ) ; if ( fAddDefaultRenderings ) { addDefaultRenderings ( memBlock ) ; } } else { MemoryViewUtil . openError ( DebugUIMessages . AddMemoryBlockAction_title , DebugUIMessages . AddMemoryBlockAction_noMemoryBlock , null ) ; exit = false ; } } else { expression = expression . toUpperCase ( ) ; String hexPrefix = <str> ; if ( expression . startsWith ( hexPrefix ) ) { expression = expression . substring ( hexPrefix . length ( ) ) ; } BigInteger address = new BigInteger ( expression , <int> ) ; long longAddress = address . longValue ( ) ; String strLength = dialog . getLength ( ) ; long length = Long . parseLong ( strLength ) ; if ( length < = <int> ) { String message = DebugUIMessages . AddMemoryBlockAction_failed + <str> + DebugUIMessages . AddMemoryBlockAction_input_invalid ; MemoryViewUtil . openError ( DebugUIMessages . AddMemoryBlockAction_title , message , null ) ; exit = false ; continue ; } IMemoryBlock memBlock = standardMemRetrieval . getMemoryBlock ( longAddress , length ) ; if ( memBlock instanceof IMemoryBlockExtension ) { Status status = new Status ( IStatus . WARNING , DebugUIPlugin . getUniqueIdentifier ( ) , <int> , <str> , null ) ; DebugUIPlugin . log ( status ) ; } if ( memBlock ! = null ) { fLastMemoryBlock = memBlock ; IMemoryBlock [ ] memArray = new IMemoryBlock [ ] { memBlock } ; MemoryViewUtil . getMemoryBlockManager ( ) . addMemoryBlocks ( memArray ) ; if ( fAddDefaultRenderings ) { addDefaultRenderings ( memBlock ) ; } } else { MemoryViewUtil . openError ( DebugUIMessages . AddMemoryBlockAction_title , DebugUIMessages . AddMemoryBlockAction_noMemoryBlock , null ) ; exit = false ; } } } catch ( DebugException e1 ) { MemoryViewUtil . openError ( DebugUIMessages . AddMemoryBlockAction_title , DebugUIMessages . AddMemoryBlockAction_failed , e1 ) ; exit = false ; } catch ( NumberFormatException e2 ) { String message = DebugUIMessages . AddMemoryBlockAction_failed + <str> + DebugUIMessages . AddMemoryBlockAction_input_invalid ; MemoryViewUtil . openError ( DebugUIMessages . AddMemoryBlockAction_title , message , null ) ; exit = false ; } } return exit ; } @Override public void handleDebugEvents ( DebugEvent [ ] events ) { for ( int i = <int> ; i < events . length ; i + + ) { handleDebugEvent ( events [ i ] ) ; } } private void handleDebugEvent ( DebugEvent event ) { Object src = event . getSource ( ) ; IDebugTarget srcDT = null ; IDebugTarget selectionDT = null ; if ( event . getKind ( ) = = DebugEvent . TERMINATE ) { if ( src instanceof ITerminate & & src instanceof IDebugElement ) { srcDT = ( ( IDebugElement ) src ) . getDebugTarget ( ) ; } if ( fCurrentContext instanceof IDebugElement ) { selectionDT = ( ( IDebugElement ) fCurrentContext ) . getDebugTarget ( ) ; } if ( srcDT = = selectionDT ) { setEnabled ( false ) ; } } else if ( event . getKind ( ) = = DebugEvent . CHANGE & & event . getDetail ( ) = = DebugEvent . STATE ) { Object evtSrc = event . getSource ( ) ; if ( evtSrc = = MemoryViewUtil . getMemoryBlockRetrieval ( fCurrentContext ) ) { updateAction ( fCurrentContext ) ; } } } public IMemoryBlock getLastMemoryBlock ( ) { return fLastMemoryBlock ; } protected void dispose ( ) { DebugPlugin . getDefault ( ) . removeDebugEventListener ( this ) ; DebugUITools . removePartDebugContextListener ( fSite . getSite ( ) , this ) ; } private void addDefaultRenderings ( IMemoryBlock memoryBlock ) { IMemoryRenderingType primaryType = DebugUITools . getMemoryRenderingManager ( ) . getPrimaryRenderingType ( memoryBlock ) ; IMemoryRenderingType renderingTypes [ ] = DebugUITools . getMemoryRenderingManager ( ) . getDefaultRenderingTypes ( memoryBlock ) ; try { if ( primaryType ! = null ) { createRenderingInContainer ( memoryBlock , primaryType , IDebugUIConstants . ID_RENDERING_VIEW_PANE_1 ) ; } else if ( renderingTypes . length > <int> ) { primaryType = renderingTypes [ <int> ] ; createRenderingInContainer ( memoryBlock , renderingTypes [ <int> ] , IDebugUIConstants . ID_RENDERING_VIEW_PANE_1 ) ; } } catch ( CoreException e1 ) { DebugUIPlugin . log ( e1 ) ; } for ( int i = <int> ; i < renderingTypes . length ; i + + ) { try { boolean create = true ; if ( primaryType ! = null ) { if ( primaryType . getId ( ) . equals ( renderingTypes [ i ] . getId ( ) ) ) { create = false ; } } if ( create ) { createRenderingInContainer ( memoryBlock , renderingTypes [ i ] , IDebugUIConstants . ID_RENDERING_VIEW_PANE_2 ) ; } } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } } private void createRenderingInContainer ( IMemoryBlock memoryBlock , IMemoryRenderingType primaryType , String paneId ) throws CoreException { IMemoryRendering rendering = primaryType . createRendering ( ) ; IMemoryRenderingContainer container = fSite . getContainer ( paneId ) ; rendering . init ( container , memoryBlock ) ; container . addMemoryRendering ( rendering ) ; } protected MemoryView getMemoryView ( ) { if ( fSite instanceof MemoryView ) { return ( MemoryView ) fSite ; } return null ; } protected void updateAction ( final Object debugContext ) { Job job = new Job ( <str> ) { @Override protected IStatus run ( IProgressMonitor monitor ) { setEnabled ( MemoryViewUtil . isValidContext ( debugContext ) ) ; return Status . OK_STATUS ; } } ; job . setSystem ( true ) ; job . schedule ( ) ; } @Override public void debugContextChanged ( DebugContextEvent event ) { if ( ( event . getFlags ( ) & DebugContextEvent . ACTIVATED ) > <int> ) { IAdaptable context = DebugUITools . getPartDebugContext ( fSite . getSite ( ) ) ; updateAction ( context ) ; fCurrentContext = context ; } } } 

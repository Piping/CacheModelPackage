package org . nd4j . linalg . api . ops ; import org . nd4j . linalg . api . complex . IComplexNumber ; import java . util . List ; public interface Accumulation extends Op { void setApplyFinalTransform ( boolean applyFinalTransform ) ; boolean applyFinalTransform ( ) ; double update ( double accum , double x ) ; double update ( double accum , double x , double y ) ; float update ( float accum , float x ) ; float update ( float accum , float x , float y ) ; IComplexNumber update ( IComplexNumber accum , double x ) ; IComplexNumber update ( IComplexNumber accum , double x , double y ) ; IComplexNumber update ( IComplexNumber accum , IComplexNumber x ) ; IComplexNumber update ( IComplexNumber accum , IComplexNumber x , IComplexNumber y ) ; IComplexNumber update ( IComplexNumber accum , IComplexNumber x , double y ) ; double combineSubResults ( double first , double second ) ; float combineSubResults ( float first , float second ) ; IComplexNumber combineSubResults ( IComplexNumber first , IComplexNumber second ) ; double getAndSetFinalResult ( double accum ) ; float getAndSetFinalResult ( float accum ) ; IComplexNumber getAndSetFinalResult ( IComplexNumber accum ) ; Number getFinalResult ( ) ; @Deprecated Number currentResult ( ) ; IComplexNumber getFinalResultComplex ( ) ; void setFinalResult ( Number number ) ; void setFinalResultComplex ( IComplexNumber number ) ; double calculateFinalResult ( double accum , int n ) ; float calculateFinalResult ( float accum , int n ) ; double zeroDouble ( ) ; float zeroFloat ( ) ; IComplexNumber zeroComplex ( ) ; } 

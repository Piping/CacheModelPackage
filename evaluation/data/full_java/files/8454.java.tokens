package org . elasticsearch . search . aggregations . bucket ; import org . apache . lucene . util . GeoHashUtils ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . search . aggregations . Aggregator . SubAggCollectionMode ; import org . elasticsearch . search . aggregations . bucket . filter . Filter ; import org . elasticsearch . search . aggregations . bucket . geogrid . GeoHashGrid ; import org . elasticsearch . search . aggregations . bucket . global . Global ; import org . elasticsearch . search . aggregations . bucket . histogram . DateHistogramInterval ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . bucket . missing . Missing ; import org . elasticsearch . search . aggregations . bucket . nested . Nested ; import org . elasticsearch . search . aggregations . bucket . range . Range ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . test . ESIntegTestCase ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . search . aggregations . AggregationBuilders . dateHistogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . dateRange ; import static org . elasticsearch . search . aggregations . AggregationBuilders . filter ; import static org . elasticsearch . search . aggregations . AggregationBuilders . geohashGrid ; import static org . elasticsearch . search . aggregations . AggregationBuilders . global ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . ipRange ; import static org . elasticsearch . search . aggregations . AggregationBuilders . missing ; import static org . elasticsearch . search . aggregations . AggregationBuilders . nested ; import static org . elasticsearch . search . aggregations . AggregationBuilders . range ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . equalTo ; @ESIntegTestCase.SuiteScopeTestCase public class ShardReduceIT extends ESIntegTestCase { private IndexRequestBuilder indexDoc ( String date , int value ) throws Exception { return client ( ) . prepareIndex ( <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( <str> , value ) . field ( <str> , <str> + value ) . field ( <str> , GeoHashUtils . stringEncode ( <int> , <int> , GeoHashUtils . PRECISION ) ) . field ( <str> , date ) . field ( <str> , <int> ) . field ( <str> , <float> ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , date ) . endObject ( ) . endObject ( ) ) ; } @Override public void setupSuiteScopeCluster ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; indexRandom ( true , indexDoc ( <str> , <int> ) , indexDoc ( <str> , <int> ) , indexDoc ( <str> , <int> ) ) ; ensureSearchable ( ) ; } public void testGlobal ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Global global = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = global . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testFilter ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( filter ( <str> ) . filter ( QueryBuilders . matchAllQuery ( ) ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Filter filter = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = filter . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testMissing ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( missing ( <str> ) . field ( <str> ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Missing missing = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = missing . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testGlobalWithFilterWithMissing ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( global ( <str> ) . subAggregation ( filter ( <str> ) . filter ( QueryBuilders . matchAllQuery ( ) ) . subAggregation ( missing ( <str> ) . field ( <str> ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Global global = response . getAggregations ( ) . get ( <str> ) ; Filter filter = global . getAggregations ( ) . get ( <str> ) ; Missing missing = filter . getAggregations ( ) . get ( <str> ) ; Histogram histo = missing . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testNested ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( nested ( <str> ) . path ( <str> ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Nested nested = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = nested . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testStringTerms ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = terms . getBucketByKey ( <str> ) . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testLongTerms ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = terms . getBucketByKey ( <str> ) . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testDoubleTerms ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = terms . getBucketByKey ( <str> ) . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testRange ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( range ( <str> ) . field ( <str> ) . addRange ( <str> , <int> , <int> ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Range range = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = range . getBuckets ( ) . get ( <int> ) . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testDateRange ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( dateRange ( <str> ) . field ( <str> ) . addRange ( <str> , <str> , <str> ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Range range = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = range . getBuckets ( ) . get ( <int> ) . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testIpRange ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( ipRange ( <str> ) . field ( <str> ) . addRange ( <str> , <str> , <str> ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Range range = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = range . getBuckets ( ) . get ( <int> ) . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testHistogram ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( histogram ( <str> ) . field ( <str> ) . interval ( <int> ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Histogram topHisto = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = topHisto . getBuckets ( ) . get ( <int> ) . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testDateHistogram ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . MONTH ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Histogram topHisto = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = topHisto . getBuckets ( ) . iterator ( ) . next ( ) . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } public void testGeoHashGrid ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addAggregation ( geohashGrid ( <str> ) . field ( <str> ) . subAggregation ( dateHistogram ( <str> ) . field ( <str> ) . interval ( DateHistogramInterval . DAY ) . minDocCount ( <int> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; GeoHashGrid grid = response . getAggregations ( ) . get ( <str> ) ; Histogram histo = grid . getBuckets ( ) . iterator ( ) . next ( ) . getAggregations ( ) . get ( <str> ) ; assertThat ( histo . getBuckets ( ) . size ( ) , equalTo ( <int> ) ) ; } } 

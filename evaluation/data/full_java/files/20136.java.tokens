package io . netty . testsuite . transport . socket ; import io . netty . bootstrap . Bootstrap ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . CompositeByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . Channel ; import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . ChannelOption ; import io . netty . channel . SimpleChannelInboundHandler ; import io . netty . channel . socket . DatagramPacket ; import org . junit . Test ; import java . net . BindException ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import static org . junit . Assert . * ; public class DatagramUnicastTest extends AbstractDatagramTest { private static final byte [ ] BYTES = { <int> , <int> , <int> , <int> } ; @Test public void testSimpleSendDirectByteBuf ( ) throws Throwable { run ( ) ; } public void testSimpleSendDirectByteBuf ( Bootstrap sb , Bootstrap cb ) throws Throwable { testSimpleSend0 ( sb , cb , Unpooled . directBuffer ( ) . writeBytes ( BYTES ) , true , BYTES , <int> ) ; testSimpleSend0 ( sb , cb , Unpooled . directBuffer ( ) . writeBytes ( BYTES ) , true , BYTES , <int> ) ; } @Test public void testSimpleSendHeapByteBuf ( ) throws Throwable { run ( ) ; } public void testSimpleSendHeapByteBuf ( Bootstrap sb , Bootstrap cb ) throws Throwable { testSimpleSend0 ( sb , cb , Unpooled . buffer ( ) . writeBytes ( BYTES ) , true , BYTES , <int> ) ; testSimpleSend0 ( sb , cb , Unpooled . buffer ( ) . writeBytes ( BYTES ) , true , BYTES , <int> ) ; } @Test public void testSimpleSendCompositeDirectByteBuf ( ) throws Throwable { run ( ) ; } public void testSimpleSendCompositeDirectByteBuf ( Bootstrap sb , Bootstrap cb ) throws Throwable { CompositeByteBuf buf = Unpooled . compositeBuffer ( ) ; buf . addComponent ( Unpooled . directBuffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf . addComponent ( Unpooled . directBuffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf . writerIndex ( <int> ) ; testSimpleSend0 ( sb , cb , buf , true , BYTES , <int> ) ; CompositeByteBuf buf2 = Unpooled . compositeBuffer ( ) ; buf2 . addComponent ( Unpooled . directBuffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf2 . addComponent ( Unpooled . directBuffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf2 . writerIndex ( <int> ) ; testSimpleSend0 ( sb , cb , buf2 , true , BYTES , <int> ) ; } @Test public void testSimpleSendCompositeHeapByteBuf ( ) throws Throwable { run ( ) ; } public void testSimpleSendCompositeHeapByteBuf ( Bootstrap sb , Bootstrap cb ) throws Throwable { CompositeByteBuf buf = Unpooled . compositeBuffer ( ) ; buf . addComponent ( Unpooled . buffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf . addComponent ( Unpooled . buffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf . writerIndex ( <int> ) ; testSimpleSend0 ( sb , cb , buf , true , BYTES , <int> ) ; CompositeByteBuf buf2 = Unpooled . compositeBuffer ( ) ; buf2 . addComponent ( Unpooled . buffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf2 . addComponent ( Unpooled . buffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf2 . writerIndex ( <int> ) ; testSimpleSend0 ( sb , cb , buf2 , true , BYTES , <int> ) ; } @Test public void testSimpleSendCompositeMixedByteBuf ( ) throws Throwable { run ( ) ; } public void testSimpleSendCompositeMixedByteBuf ( Bootstrap sb , Bootstrap cb ) throws Throwable { CompositeByteBuf buf = Unpooled . compositeBuffer ( ) ; buf . addComponent ( Unpooled . directBuffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf . addComponent ( Unpooled . buffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf . writerIndex ( <int> ) ; testSimpleSend0 ( sb , cb , buf , true , BYTES , <int> ) ; CompositeByteBuf buf2 = Unpooled . compositeBuffer ( ) ; buf2 . addComponent ( Unpooled . directBuffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf2 . addComponent ( Unpooled . buffer ( ) . writeBytes ( BYTES , <int> , <int> ) ) ; buf2 . writerIndex ( <int> ) ; testSimpleSend0 ( sb , cb , buf2 , true , BYTES , <int> ) ; } @Test public void testSimpleSendWithoutBind ( ) throws Throwable { run ( ) ; } public void testSimpleSendWithoutBind ( Bootstrap sb , Bootstrap cb ) throws Throwable { testSimpleSend0 ( sb , cb , Unpooled . directBuffer ( ) . writeBytes ( BYTES ) , false , BYTES , <int> ) ; testSimpleSend0 ( sb , cb , Unpooled . directBuffer ( ) . writeBytes ( BYTES ) , false , BYTES , <int> ) ; } @SuppressWarnings ( <str> ) private void testSimpleSend0 ( Bootstrap sb , Bootstrap cb , ByteBuf buf , boolean bindClient , final byte [ ] bytes , int count ) throws Throwable { final CountDownLatch latch = new CountDownLatch ( count ) ; sb . handler ( new ChannelInitializer < Channel > ( ) { @Override protected void initChannel ( Channel ch ) throws Exception { ch . pipeline ( ) . addLast ( new SimpleChannelInboundHandler < DatagramPacket > ( ) { @Override public void channelRead0 ( ChannelHandlerContext ctx , DatagramPacket msg ) throws Exception { ByteBuf buf = msg . content ( ) ; assertEquals ( bytes . length , buf . readableBytes ( ) ) ; for ( byte b : bytes ) { assertEquals ( b , buf . readByte ( ) ) ; } latch . countDown ( ) ; } } ) ; } } ) ; cb . handler ( new SimpleChannelInboundHandler < Object > ( ) { @Override public void channelRead0 ( ChannelHandlerContext ctx , Object msgs ) throws Exception { } } ) ; Channel sc = null ; BindException bindFailureCause = null ; for ( int i = <int> ; i < <int> ; i + + ) { try { sc = sb . bind ( ) . sync ( ) . channel ( ) ; break ; } catch ( Exception e ) { if ( e instanceof BindException ) { logger . warn ( <str> , e ) ; bindFailureCause = ( BindException ) e ; refreshLocalAddress ( sb ) ; } else { throw e ; } } } if ( sc = = null ) { throw bindFailureCause ; } Channel cc ; if ( bindClient ) { cc = cb . bind ( ) . sync ( ) . channel ( ) ; } else { cb . option ( ChannelOption . DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION , true ) ; cc = cb . register ( ) . sync ( ) . channel ( ) ; } for ( int i = <int> ; i < count ; i + + ) { cc . write ( new DatagramPacket ( buf . retain ( ) . duplicate ( ) , addr ) ) ; } buf . release ( ) ; cc . flush ( ) ; assertTrue ( latch . await ( <int> , TimeUnit . SECONDS ) ) ; sc . close ( ) . sync ( ) ; cc . close ( ) . sync ( ) ; } } 

package org . elasticsearch . action . bulk ; import org . elasticsearch . ElasticsearchException ; import org . elasticsearch . ExceptionsHelper ; import org . elasticsearch . action . DocWriteResponse ; import org . elasticsearch . action . delete . DeleteResponse ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . action . update . UpdateResponse ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . StatusToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . rest . RestStatus ; import java . io . IOException ; public class BulkItemResponse implements Streamable , StatusToXContent { @Override public RestStatus status ( ) { return failure = = null ? response . status ( ) : failure . getStatus ( ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( opType ) ; if ( failure = = null ) { response . toXContent ( builder , params ) ; builder . field ( Fields . STATUS , response . status ( ) . getStatus ( ) ) ; } else { builder . field ( Fields . _INDEX , failure . getIndex ( ) ) ; builder . field ( Fields . _TYPE , failure . getType ( ) ) ; builder . field ( Fields . _ID , failure . getId ( ) ) ; builder . field ( Fields . STATUS , failure . getStatus ( ) . getStatus ( ) ) ; builder . startObject ( Fields . ERROR ) ; ElasticsearchException . toXContent ( builder , params , failure . getCause ( ) ) ; builder . endObject ( ) ; } builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString _INDEX = new XContentBuilderString ( <str> ) ; static final XContentBuilderString _TYPE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString _ID = new XContentBuilderString ( <str> ) ; static final XContentBuilderString STATUS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ERROR = new XContentBuilderString ( <str> ) ; } public static class Failure { private final String index ; private final String type ; private final String id ; private final Throwable cause ; private final RestStatus status ; public Failure ( String index , String type , String id , Throwable t ) { this . index = index ; this . type = type ; this . id = id ; this . cause = t ; this . status = ExceptionsHelper . status ( t ) ; } public String getIndex ( ) { return this . index ; } public String getType ( ) { return type ; } public String getId ( ) { return id ; } public String getMessage ( ) { return this . cause . toString ( ) ; } public RestStatus getStatus ( ) { return this . status ; } public Throwable getCause ( ) { return cause ; } } private int id ; private String opType ; private DocWriteResponse response ; private Failure failure ; BulkItemResponse ( ) { } public BulkItemResponse ( int id , String opType , DocWriteResponse response ) { this . id = id ; this . opType = opType ; this . response = response ; } public BulkItemResponse ( int id , String opType , Failure failure ) { this . id = id ; this . opType = opType ; this . failure = failure ; } public int getItemId ( ) { return id ; } public String getOpType ( ) { return this . opType ; } public String getIndex ( ) { if ( failure ! = null ) { return failure . getIndex ( ) ; } return response . getIndex ( ) ; } public String getType ( ) { if ( failure ! = null ) { return failure . getType ( ) ; } return response . getType ( ) ; } public String getId ( ) { if ( failure ! = null ) { return failure . getId ( ) ; } return response . getId ( ) ; } public long getVersion ( ) { if ( failure ! = null ) { return - <int> ; } return response . getVersion ( ) ; } public < T extends DocWriteResponse > T getResponse ( ) { return ( T ) response ; } public boolean isFailed ( ) { return failure ! = null ; } public String getFailureMessage ( ) { if ( failure ! = null ) { return failure . getMessage ( ) ; } return null ; } public Failure getFailure ( ) { return this . failure ; } public static BulkItemResponse readBulkItem ( StreamInput in ) throws IOException { BulkItemResponse response = new BulkItemResponse ( ) ; response . readFrom ( in ) ; return response ; } @Override public void readFrom ( StreamInput in ) throws IOException { id = in . readVInt ( ) ; opType = in . readString ( ) ; byte type = in . readByte ( ) ; if ( type = = <int> ) { response = new IndexResponse ( ) ; response . readFrom ( in ) ; } else if ( type = = <int> ) { response = new DeleteResponse ( ) ; response . readFrom ( in ) ; } else if ( type = = <int> ) { response = new UpdateResponse ( ) ; response . readFrom ( in ) ; } if ( in . readBoolean ( ) ) { String fIndex = in . readString ( ) ; String fType = in . readString ( ) ; String fId = in . readOptionalString ( ) ; Throwable throwable = in . readThrowable ( ) ; failure = new Failure ( fIndex , fType , fId , throwable ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVInt ( id ) ; out . writeString ( opType ) ; if ( response = = null ) { out . writeByte ( ( byte ) <int> ) ; } else { if ( response instanceof IndexResponse ) { out . writeByte ( ( byte ) <int> ) ; } else if ( response instanceof DeleteResponse ) { out . writeByte ( ( byte ) <int> ) ; } else if ( response instanceof UpdateResponse ) { out . writeByte ( ( byte ) <int> ) ; } response . writeTo ( out ) ; } if ( failure = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; out . writeString ( failure . getIndex ( ) ) ; out . writeString ( failure . getType ( ) ) ; out . writeOptionalString ( failure . getId ( ) ) ; out . writeThrowable ( failure . getCause ( ) ) ; } } } 

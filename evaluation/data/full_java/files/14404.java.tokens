package org . gradle . model . internal . manage . schema . extract ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Lists ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; public class ModelSchemaAspectExtractor { private final List < ModelSchemaAspectExtractionStrategy > strategies ; public ModelSchemaAspectExtractor ( ) { this ( Collections . < ModelSchemaAspectExtractionStrategy > emptyList ( ) ) ; } public ModelSchemaAspectExtractor ( Collection < ModelSchemaAspectExtractionStrategy > strategies ) { this . strategies = ImmutableList . copyOf ( strategies ) ; } public < T > List < ModelSchemaAspect > extract ( ModelSchemaExtractionContext < T > extractionContext , List < ModelPropertyExtractionResult < ? > > propertyResults ) { List < ModelSchemaAspect > aspects = Lists . newArrayList ( ) ; for ( ModelSchemaAspectExtractionStrategy strategy : strategies ) { ModelSchemaAspectExtractionResult result = strategy . extract ( extractionContext , propertyResults ) ; if ( result ! = null ) { aspects . add ( result . getAspect ( ) ) ; } } return aspects ; } } 

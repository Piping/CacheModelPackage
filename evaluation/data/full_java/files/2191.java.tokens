package org . nd4j . linalg . dataset . api . iterator ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . dataset . DataSet ; import org . nd4j . linalg . factory . Nd4j ; import java . io . BufferedOutputStream ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; public class StandardScaler { private INDArray mean , std ; private int runningTotal = <int> ; public void fit ( DataSet dataSet ) { mean = dataSet . getFeatureMatrix ( ) . mean ( <int> ) ; std = dataSet . getFeatureMatrix ( ) . std ( <int> ) ; } public void fit ( DataSetIterator iterator ) { while ( iterator . hasNext ( ) ) { DataSet next = iterator . next ( ) ; if ( mean = = null ) { mean = next . getFeatureMatrix ( ) . mean ( <int> ) ; std = Nd4j . zeros ( mean . shape ( ) ) ; } else { INDArray xMinusMean = next . getFeatureMatrix ( ) . subRowVector ( mean ) ; INDArray newMean = mean . add ( xMinusMean . sum ( <int> ) . divi ( runningTotal ) ) ; std . addi ( xMinusMean . muli ( next . getFeatureMatrix ( ) . subRowVector ( newMean ) ) . sum ( <int> ) . divi ( runningTotal ) ) ; mean = newMean ; } runningTotal + = next . numExamples ( ) ; } iterator . reset ( ) ; } public void load ( File mean , File std ) throws IOException { this . mean = Nd4j . readBinary ( mean ) ; this . std = Nd4j . readBinary ( std ) ; } public void save ( File mean , File std ) throws IOException { Nd4j . saveBinary ( this . mean , mean ) ; Nd4j . saveBinary ( this . std , std ) ; } public void transform ( DataSet dataSet ) { dataSet . setFeatures ( dataSet . getFeatures ( ) . subiRowVector ( mean ) ) ; dataSet . setFeatures ( dataSet . getFeatures ( ) . diviRowVector ( std ) ) ; } public INDArray getMean ( ) { return mean ; } public INDArray getStd ( ) { return std ; } } 

package org . elasticsearch . cloud . gce . network ; import org . elasticsearch . cloud . gce . GceComputeService ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . network . NetworkService . CustomNameResolver ; import org . elasticsearch . common . settings . Settings ; import java . io . IOException ; import java . net . InetAddress ; public class GceNameResolver extends AbstractComponent implements CustomNameResolver { private final GceComputeService gceComputeService ; private enum GceAddressResolverType { PRIVATE_DNS ( <str> , <str> ) , PRIVATE_IP ( <str> , <str> ) , GCE ( <str> , PRIVATE_IP . gceName ) ; final String configName ; final String gceName ; GceAddressResolverType ( String configName , String gceName ) { this . configName = configName ; this . gceName = gceName ; } } public GceNameResolver ( Settings settings , GceComputeService gceComputeService ) { super ( settings ) ; this . gceComputeService = gceComputeService ; } private InetAddress [ ] resolve ( String value ) throws IOException { String gceMetadataPath ; if ( value . equals ( GceAddressResolverType . GCE . configName ) ) { gceMetadataPath = Strings . replace ( GceAddressResolverType . GCE . gceName , <str> , <str> ) ; } else if ( value . equals ( GceAddressResolverType . PRIVATE_DNS . configName ) ) { gceMetadataPath = GceAddressResolverType . PRIVATE_DNS . gceName ; } else if ( value . startsWith ( GceAddressResolverType . PRIVATE_IP . configName ) ) { String network = <str> ; String [ ] privateIpConfig = Strings . splitStringToArray ( value , <str> ) ; if ( privateIpConfig ! = null & & privateIpConfig . length = = <int> ) { network = privateIpConfig [ <int> ] ; } gceMetadataPath = Strings . replace ( GceAddressResolverType . PRIVATE_IP . gceName , <str> , network ) ; } else { throw new IllegalArgumentException ( <str> + value + <str> + <str> ) ; } try { String metadataResult = gceComputeService . metadata ( gceMetadataPath ) ; if ( metadataResult = = null | | metadataResult . length ( ) = = <int> ) { throw new IOException ( <str> + gceMetadataPath + <str> + value + <str> ) ; } return new InetAddress [ ] { InetAddress . getByName ( metadataResult ) } ; } catch ( IOException e ) { throw new IOException ( <str> + gceMetadataPath + <str> , e ) ; } } @Override public InetAddress [ ] resolveDefault ( ) { return null ; } @Override public InetAddress [ ] resolveIfPossible ( String value ) throws IOException { if ( value . startsWith ( <str> ) ) { return resolve ( value ) ; } return null ; } } 

package org . elasticsearch . rest ; import org . elasticsearch . action . ShardOperationFailedException ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import java . io . IOException ; public enum RestStatus { CONTINUE ( <int> ) , SWITCHING_PROTOCOLS ( <int> ) , OK ( <int> ) , CREATED ( <int> ) , ACCEPTED ( <int> ) , NON_AUTHORITATIVE_INFORMATION ( <int> ) , NO_CONTENT ( <int> ) , RESET_CONTENT ( <int> ) , PARTIAL_CONTENT ( <int> ) , MULTI_STATUS ( <int> ) , MULTIPLE_CHOICES ( <int> ) , MOVED_PERMANENTLY ( <int> ) , FOUND ( <int> ) , SEE_OTHER ( <int> ) , NOT_MODIFIED ( <int> ) , USE_PROXY ( <int> ) , TEMPORARY_REDIRECT ( <int> ) , BAD_REQUEST ( <int> ) , UNAUTHORIZED ( <int> ) , PAYMENT_REQUIRED ( <int> ) , FORBIDDEN ( <int> ) , NOT_FOUND ( <int> ) , METHOD_NOT_ALLOWED ( <int> ) , NOT_ACCEPTABLE ( <int> ) , PROXY_AUTHENTICATION ( <int> ) , REQUEST_TIMEOUT ( <int> ) , CONFLICT ( <int> ) , GONE ( <int> ) , LENGTH_REQUIRED ( <int> ) , PRECONDITION_FAILED ( <int> ) , REQUEST_ENTITY_TOO_LARGE ( <int> ) , REQUEST_URI_TOO_LONG ( <int> ) , UNSUPPORTED_MEDIA_TYPE ( <int> ) , REQUESTED_RANGE_NOT_SATISFIED ( <int> ) , EXPECTATION_FAILED ( <int> ) , UNPROCESSABLE_ENTITY ( <int> ) , LOCKED ( <int> ) , FAILED_DEPENDENCY ( <int> ) , TOO_MANY_REQUESTS ( <int> ) , INTERNAL_SERVER_ERROR ( <int> ) , NOT_IMPLEMENTED ( <int> ) , BAD_GATEWAY ( <int> ) , SERVICE_UNAVAILABLE ( <int> ) , GATEWAY_TIMEOUT ( <int> ) , HTTP_VERSION_NOT_SUPPORTED ( <int> ) , INSUFFICIENT_STORAGE ( <int> ) ; private int status ; RestStatus ( int status ) { this . status = ( short ) status ; } public int getStatus ( ) { return status ; } public static RestStatus readFrom ( StreamInput in ) throws IOException { return RestStatus . valueOf ( in . readString ( ) ) ; } public static void writeTo ( StreamOutput out , RestStatus status ) throws IOException { out . writeString ( status . name ( ) ) ; } public static RestStatus status ( int successfulShards , int totalShards , ShardOperationFailedException . . . failures ) { if ( failures . length = = <int> ) { if ( successfulShards = = <int> & & totalShards > <int> ) { return RestStatus . SERVICE_UNAVAILABLE ; } return RestStatus . OK ; } RestStatus status = RestStatus . OK ; if ( successfulShards = = <int> & & totalShards > <int> ) { for ( ShardOperationFailedException failure : failures ) { RestStatus shardStatus = failure . status ( ) ; if ( shardStatus . getStatus ( ) > = status . getStatus ( ) ) { status = failure . status ( ) ; } } return status ; } return status ; } } 

package org . elasticsearch . index . analysis ; import org . apache . lucene . analysis . Tokenizer ; import org . apache . lucene . analysis . core . WhitespaceTokenizer ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTokenStreamTestCase ; import org . junit . Assert ; import java . io . IOException ; import java . io . StringReader ; import static org . hamcrest . Matchers . instanceOf ; public class KeepFilterFactoryTests extends ESTokenStreamTestCase { private static final String RESOURCE = <str> ; public void testLoadWithoutSettings ( ) throws IOException { AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromClassPath ( createTempDir ( ) , RESOURCE ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; Assert . assertNull ( tokenFilter ) ; } public void testLoadOverConfiguredSettings ( ) { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; try { AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; Assert . fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } catch ( IOException e ) { fail ( <str> ) ; } } public void testKeepWordsPathSettings ( ) { Settings settings = Settings . settingsBuilder ( ) . put ( <str> , createTempDir ( ) . toString ( ) ) . put ( <str> , <str> ) . put ( <str> , <str> ) . build ( ) ; try { AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } catch ( IOException e ) { fail ( <str> ) ; } settings = Settings . settingsBuilder ( ) . put ( settings ) . put ( <str> , new String [ ] { <str> } ) . build ( ) ; try { AnalysisTestsHelper . createAnalysisServiceFromSettings ( settings ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } catch ( IOException e ) { fail ( <str> ) ; } } public void testCaseInsensitiveMapping ( ) throws IOException { AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromClassPath ( createTempDir ( ) , RESOURCE ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( KeepWordFilterFactory . class ) ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> , <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected , new int [ ] { <int> , <int> } ) ; } public void testCaseSensitiveMapping ( ) throws IOException { AnalysisService analysisService = AnalysisTestsHelper . createAnalysisServiceFromClassPath ( createTempDir ( ) , RESOURCE ) ; TokenFilterFactory tokenFilter = analysisService . tokenFilter ( <str> ) ; assertThat ( tokenFilter , instanceOf ( KeepWordFilterFactory . class ) ) ; String source = <str> ; String [ ] expected = new String [ ] { <str> } ; Tokenizer tokenizer = new WhitespaceTokenizer ( ) ; tokenizer . setReader ( new StringReader ( source ) ) ; assertTokenStreamContents ( tokenFilter . create ( tokenizer ) , expected , new int [ ] { <int> } ) ; } } 

package com . google . common . math ; import static com . google . common . math . MathTesting . ALL_BIGINTEGER_CANDIDATES ; import static com . google . common . math . MathTesting . FINITE_DOUBLE_CANDIDATES ; import static com . google . common . math . MathTesting . POSITIVE_FINITE_DOUBLE_CANDIDATES ; import junit . framework . TestCase ; import sun . misc . FpUtils ; import java . math . BigInteger ; public class DoubleUtilsTest extends TestCase { @AndroidIncompatible public void testNextDown ( ) { for ( double d : FINITE_DOUBLE_CANDIDATES ) { assertEquals ( FpUtils . nextDown ( d ) , DoubleUtils . nextDown ( d ) ) ; } } @AndroidIncompatible public void testBigToDouble ( ) { for ( BigInteger b : ALL_BIGINTEGER_CANDIDATES ) { if ( b . doubleValue ( ) ! = DoubleUtils . bigToDouble ( b ) ) { failFormat ( <str> , b , b . doubleValue ( ) , DoubleUtils . bigToDouble ( b ) ) ; } } } public void testEnsureNonNegative ( ) { assertEquals ( <float> , DoubleUtils . ensureNonNegative ( <float> ) ) ; for ( double positiveValue : POSITIVE_FINITE_DOUBLE_CANDIDATES ) { assertEquals ( positiveValue , DoubleUtils . ensureNonNegative ( positiveValue ) ) ; assertEquals ( <float> , DoubleUtils . ensureNonNegative ( - positiveValue ) ) ; } assertEquals ( Double . POSITIVE_INFINITY , DoubleUtils . ensureNonNegative ( Double . POSITIVE_INFINITY ) ) ; assertEquals ( <float> , DoubleUtils . ensureNonNegative ( Double . NEGATIVE_INFINITY ) ) ; try { DoubleUtils . ensureNonNegative ( Double . NaN ) ; fail ( <str> ) ; } catch ( IllegalArgumentException expected ) { } } private static void failFormat ( String template , Object . . . args ) { fail ( String . format ( template , args ) ) ; } } 

package org . eclipse . debug . tests . viewer . model ; import java . util . Arrays ; import junit . framework . TestCase ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IColumnPresentation ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IColumnPresentation2 ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IColumnPresentationFactory ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . PresentationContext ; import org . eclipse . debug . internal . ui . viewers . model . provisional . TreeModelViewer ; import org . eclipse . debug . tests . viewer . model . TestModel . TestElement ; import org . eclipse . jface . resource . ImageDescriptor ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . swt . SWT ; import org . eclipse . swt . events . ControlEvent ; import org . eclipse . swt . events . ControlListener ; import org . eclipse . swt . layout . FillLayout ; import org . eclipse . swt . widgets . Display ; import org . eclipse . swt . widgets . Shell ; import org . eclipse . swt . widgets . Tree ; import org . eclipse . swt . widgets . TreeColumn ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . XMLMemento ; public class ColumnPresentationTests extends TestCase implements ITestModelUpdatesListenerConstants { private Display fDisplay ; private Shell fShell ; private TreeModelViewer fViewer ; private TestModelUpdatesListener fListener ; private boolean fResized = false ; public ColumnPresentationTests ( String name ) { super ( name ) ; } @Override protected void setUp ( ) throws Exception { createViewer ( ) ; } @Override protected void tearDown ( ) throws Exception { destroyViewer ( ) ; } void createViewer ( ) { fDisplay = PlatformUI . getWorkbench ( ) . getDisplay ( ) ; fShell = new Shell ( fDisplay ) ; fShell . setSize ( <int> , <int> ) ; fShell . setLayout ( new FillLayout ( ) ) ; fViewer = new TreeModelViewer ( fShell , SWT . VIRTUAL , new PresentationContext ( <str> ) ) ; fViewer . getTree ( ) . addControlListener ( new ControlListener ( ) { @Override public void controlResized ( ControlEvent e ) { fResized = true ; } @Override public void controlMoved ( ControlEvent e ) { } } ) ; fListener = new TestModelUpdatesListener ( fViewer , false , false ) ; fShell . open ( ) ; } void destroyViewer ( ) throws InterruptedException { fListener . dispose ( ) ; fViewer . getPresentationContext ( ) . dispose ( ) ; fShell . close ( ) ; while ( ! fShell . isDisposed ( ) ) { if ( ! fDisplay . readAndDispatch ( ) ) { Thread . sleep ( <int> ) ; } } } void recreateViewer ( ) throws InterruptedException { destroyViewer ( ) ; createViewer ( ) ; } static class MyColumnPresentation implements IColumnPresentation { private IPresentationContext fContext ; protected String [ ] columnIds ; MyColumnPresentation ( ) { this ( makeDefaultColumnIds ( ) ) ; } static String [ ] makeDefaultColumnIds ( ) { String [ ] columnIds = new String [ <int> ] ; for ( int i = <int> ; i < columnIds . length ; i + + ) { columnIds [ i ] = <str> + i ; } return columnIds ; } MyColumnPresentation ( String [ ] columnIds ) { this . columnIds = columnIds ; } @Override public void init ( IPresentationContext context ) { fContext = context ; } @Override public void dispose ( ) { fContext = null ; } @Override public ImageDescriptor getImageDescriptor ( String id ) { return null ; } protected IPresentationContext getPresentationContext ( ) { return fContext ; } @Override public String [ ] getAvailableColumns ( ) { return columnIds ; } @Override public String [ ] getInitialColumns ( ) { return columnIds ; } @Override public String getHeader ( String id ) { if ( Arrays . asList ( columnIds ) . indexOf ( id ) ! = - <int> ) { return id ; } return null ; } @Override public String getId ( ) { return <str> ; } @Override public boolean isOptional ( ) { return true ; } } static class MyColumnPresentation2 extends MyColumnPresentation implements IColumnPresentation2 { int [ ] repliedWidths ; MyColumnPresentation2 ( ) { super ( ) ; for ( int i = <int> ; i < columnIds . length ; i + + ) { columnIds [ i ] + = <str> ; } repliedWidths = new int [ columnIds . length ] ; Arrays . fill ( repliedWidths , - <int> ) ; } @Override public int getInitialColumnWidth ( String id , int treeWidgetWidth , String [ ] visibleColumnIds ) { for ( int i = <int> ; i < columnIds . length ; i + + ) { if ( id . equals ( columnIds [ i ] ) & & i = = <int> ) { repliedWidths [ i ] = <int> * ( treeWidgetWidth / visibleColumnIds . length ) ; return repliedWidths [ i ] ; } if ( id . equals ( columnIds [ i ] ) & & ( i = = <int> | | i = = <int> ) ) { repliedWidths [ i ] = ( treeWidgetWidth / visibleColumnIds . length ) / <int> ; return repliedWidths [ i ] ; } if ( id . equals ( columnIds [ i ] ) & & i = = <int> ) { repliedWidths [ i ] = ( treeWidgetWidth / visibleColumnIds . length ) ; return repliedWidths [ i ] ; } if ( id . equals ( columnIds [ i ] ) & & i = = <int> ) { repliedWidths [ i ] = - <int> ; return repliedWidths [ i ] ; } } return - <int> ; } @Override public String getId ( ) { return <str> ; } } class MyModel extends TestModel implements IColumnPresentationFactory { MyColumnPresentation colPresenation ; MyModel ( MyColumnPresentation cp1 ) { colPresenation = cp1 ; } @Override public IColumnPresentation createColumnPresentation ( IPresentationContext context , Object element ) { if ( colPresenation ! = null ) { return colPresenation ; } return null ; } @Override public String getColumnPresentationId ( IPresentationContext context , Object element ) { if ( colPresenation ! = null ) { return colPresenation . getId ( ) ; } return null ; } } private TestModel makeModel ( MyColumnPresentation cp , String rootSufffix ) throws InterruptedException { MyModel model = new MyModel ( cp ) ; model . setRoot ( new TestElement ( model , <str> + rootSufffix , new TestElement [ ] { new TestElement ( model , <str> , true , true , new TestElement [ <int> ] ) , new TestElement ( model , <str> , true , false , new TestElement [ <int> ] ) , new TestElement ( model , <str> , false , true , new TestElement [ <int> ] ) , new TestElement ( model , <str> , false , false , new TestElement [ <int> ] ) , new TestElement ( model , <str> , new TestElement [ <int> ] ) , new TestElement ( model , <str> , new TestElement [ <int> ] ) } ) ) ; fListener . reset ( TreePath . EMPTY , model . getRootElement ( ) , - <int> , true , false ) ; fViewer . setInput ( model . getRootElement ( ) ) ; while ( ! fListener . isFinished ( ) ) { if ( ! fDisplay . readAndDispatch ( ) ) { Thread . sleep ( <int> ) ; } } model . validateData ( fViewer , TreePath . EMPTY ) ; return model ; } public void testInitialColumnAverageWidth ( ) throws InterruptedException { if ( ! fDisplay . readAndDispatch ( ) ) { Thread . sleep ( <int> ) ; } fResized = false ; MyColumnPresentation colPre = new MyColumnPresentation ( ) ; makeModel ( colPre , <str> ) ; Tree tree = fViewer . getTree ( ) ; TreeColumn [ ] columns = tree . getColumns ( ) ; int treeWidth = tree . getSize ( ) . x ; int avgWidth = treeWidth / columns . length ; if ( fResized ) { return ; } for ( int i = <int> ; i < columns . length - <int> ; i + + ) { assertEquals ( avgWidth , columns [ i ] . getWidth ( ) ) ; } } public void testInitialColumnWidth ( ) throws InterruptedException { if ( ! fDisplay . readAndDispatch ( ) ) { Thread . sleep ( <int> ) ; } fResized = false ; MyColumnPresentation2 colPre = new MyColumnPresentation2 ( ) ; makeModel ( colPre , <str> ) ; Tree tree = fViewer . getTree ( ) ; TreeColumn [ ] columns = tree . getColumns ( ) ; if ( fResized ) { return ; } for ( int i = <int> ; i < columns . length ; i + + ) { int width = colPre . repliedWidths [ i ] ; if ( width ! = - <int> ) { assertEquals ( width , columns [ i ] . getWidth ( ) ) ; } } } public void testRespectUserSettings ( ) throws InterruptedException { MyColumnPresentation2 colPre = new MyColumnPresentation2 ( ) ; makeModel ( colPre , <str> ) ; TreeColumn [ ] columns = fViewer . getTree ( ) . getColumns ( ) ; int [ ] newWidths = new int [ columns . length ] ; for ( int i = <int> ; i < columns . length ; i + + ) { newWidths [ i ] = columns [ i ] . getWidth ( ) + <int> ; columns [ i ] . setWidth ( newWidths [ i ] ) ; } for ( int i = <int> ; i < columns . length ; i + + ) { assertEquals ( newWidths [ i ] , columns [ i ] . getWidth ( ) ) ; } makeModel ( new MyColumnPresentation ( ) , <str> ) ; makeModel ( colPre , <str> ) ; columns = fViewer . getTree ( ) . getColumns ( ) ; for ( int i = <int> ; i < columns . length ; i + + ) { assertEquals ( newWidths [ i ] , columns [ i ] . getWidth ( ) ) ; } fViewer . setShowColumns ( false ) ; do { if ( ! fDisplay . readAndDispatch ( ) ) { Thread . sleep ( <int> ) ; } } while ( fViewer . getTree ( ) . getColumns ( ) . length > <int> ) ; fViewer . setShowColumns ( true ) ; do { if ( ! fDisplay . readAndDispatch ( ) ) { Thread . sleep ( <int> ) ; } } while ( fViewer . getTree ( ) . getColumns ( ) . length ! = newWidths . length ) ; columns = fViewer . getTree ( ) . getColumns ( ) ; for ( int i = <int> ; i < columns . length ; i + + ) { assertEquals ( newWidths [ i ] , columns [ i ] . getWidth ( ) ) ; } } public void testRespectMemento ( ) throws InterruptedException { MyColumnPresentation2 colPre = new MyColumnPresentation2 ( ) ; makeModel ( colPre , <str> ) ; TreeColumn [ ] columns = fViewer . getTree ( ) . getColumns ( ) ; int [ ] newWidths = new int [ columns . length ] ; for ( int i = <int> ; i < columns . length ; i + + ) { newWidths [ i ] = columns [ i ] . getWidth ( ) + <int> ; columns [ i ] . setWidth ( newWidths [ i ] ) ; } for ( int i = <int> ; i < columns . length ; i + + ) { assertEquals ( newWidths [ i ] , columns [ i ] . getWidth ( ) ) ; } final XMLMemento memento = XMLMemento . createWriteRoot ( <str> ) ; fViewer . saveState ( memento ) ; recreateViewer ( ) ; fViewer . initState ( memento ) ; makeModel ( colPre , <str> ) ; columns = fViewer . getTree ( ) . getColumns ( ) ; for ( int i = <int> ; i < columns . length ; i + + ) { assertEquals ( newWidths [ i ] , columns [ i ] . getWidth ( ) ) ; } } public void testChangedColumnIds ( ) throws InterruptedException { MyColumnPresentation colPre = new MyColumnPresentation ( ) ; makeModel ( colPre , <str> ) ; TreeColumn [ ] columns = fViewer . getTree ( ) . getColumns ( ) ; fViewer . setVisibleColumns ( new String [ ] { colPre . columnIds [ <int> ] } ) ; do { if ( ! fDisplay . readAndDispatch ( ) ) { Thread . sleep ( <int> ) ; } } while ( fViewer . getTree ( ) . getColumns ( ) . length ! = <int> ) ; makeModel ( new MyColumnPresentation2 ( ) , <str> ) ; String [ ] newColumnIds = MyColumnPresentation . makeDefaultColumnIds ( ) ; newColumnIds [ <int> ] = <str> ; colPre = new MyColumnPresentation ( newColumnIds ) ; makeModel ( colPre , <str> ) ; columns = fViewer . getTree ( ) . getColumns ( ) ; for ( int i = <int> ; i < columns . length ; i + + ) { assertEquals ( newColumnIds [ i ] , columns [ i ] . getText ( ) ) ; } } } 

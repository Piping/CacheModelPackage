package org . gradle . api . internal . artifacts . ivyservice . ivyresolve ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . internal . component . external . model . MutableModuleComponentResolveMetaData ; import org . gradle . internal . component . model . ComponentOverrideMetadata ; import org . gradle . internal . component . model . DependencyMetaData ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import java . util . ArrayList ; import java . util . List ; class IvyDynamicResolveModuleComponentRepositoryAccess extends BaseModuleComponentRepositoryAccess { public static ModuleComponentRepository wrap ( ModuleComponentRepository delegate ) { final ModuleComponentRepositoryAccess localAccess = new IvyDynamicResolveModuleComponentRepositoryAccess ( delegate . getLocalAccess ( ) ) ; final ModuleComponentRepositoryAccess remoteAccess = new IvyDynamicResolveModuleComponentRepositoryAccess ( delegate . getRemoteAccess ( ) ) ; return new BaseModuleComponentRepository ( delegate ) { @Override public ModuleComponentRepositoryAccess getLocalAccess ( ) { return localAccess ; } @Override public ModuleComponentRepositoryAccess getRemoteAccess ( ) { return remoteAccess ; } } ; } IvyDynamicResolveModuleComponentRepositoryAccess ( ModuleComponentRepositoryAccess delegate ) { super ( delegate ) ; } @Override public String toString ( ) { return <str> + getDelegate ( ) . toString ( ) ; } public void resolveComponentMetaData ( ModuleComponentIdentifier moduleComponentIdentifier , ComponentOverrideMetadata requestMetaData , BuildableModuleComponentMetaDataResolveResult result ) { super . resolveComponentMetaData ( moduleComponentIdentifier , requestMetaData , result ) ; if ( result . getState ( ) = = BuildableModuleComponentMetaDataResolveResult . State . Resolved ) { transformDependencies ( result ) ; } } private void transformDependencies ( BuildableModuleComponentMetaDataResolveResult result ) { MutableModuleComponentResolveMetaData metaData = result . getMetaData ( ) ; List < DependencyMetaData > transformed = new ArrayList < DependencyMetaData > ( ) ; for ( DependencyMetaData dependency : metaData . getDependencies ( ) ) { transformed . add ( dependency . withRequestedVersion ( dependency . getDynamicConstraintVersion ( ) ) ) ; } metaData . setDependencies ( transformed ) ; } } 

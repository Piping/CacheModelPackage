package org . gradle . internal . rules ; import org . gradle . api . Transformer ; import org . gradle . model . internal . type . ModelType ; import org . gradle . util . CollectionUtils ; import java . util . List ; public class DefaultRuleActionValidator < T > implements RuleActionValidator < T > { private static final String VALID_SINGLE_TYPES = <str> ; private static final String VALID_MULTIPLE_TYPES = <str> ; private final List < Class < ? > > validInputTypes ; public DefaultRuleActionValidator ( List < Class < ? > > validInputTypes ) { this . validInputTypes = validInputTypes ; } public RuleAction < ? super T > validate ( RuleAction < ? super T > ruleAction ) { validateInputTypes ( ruleAction ) ; return ruleAction ; } private void validateInputTypes ( RuleAction < ? super T > ruleAction ) { for ( Class < ? > inputType : ruleAction . getInputTypes ( ) ) { if ( ! validInputTypes . contains ( inputType ) ) { throw new RuleActionValidationException ( invalidParameterMessage ( inputType ) ) ; } } } private String invalidParameterMessage ( Class < ? > inputType ) { if ( validInputTypes . size ( ) = = <int> ) { return String . format ( VALID_SINGLE_TYPES , inputType . getName ( ) , className ( validInputTypes . get ( <int> ) ) ) ; } return String . format ( VALID_MULTIPLE_TYPES , inputType . getName ( ) , CollectionUtils . collect ( validInputTypes , new ClassNameTransformer ( ) ) ) ; } private static String className ( Class < ? > aClass ) { return ModelType . of ( aClass ) . toString ( ) ; } private static class ClassNameTransformer implements Transformer < String , Class < ? > > { public String transform ( Class < ? > aClass ) { return className ( aClass ) ; } } } 

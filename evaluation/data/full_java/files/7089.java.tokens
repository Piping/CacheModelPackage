package org . elasticsearch . script ; import java . util . Collection ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; import static java . util . Collections . unmodifiableMap ; import static java . util . Collections . unmodifiableSet ; public final class ScriptContextRegistry { static final Set < String > RESERVED_SCRIPT_CONTEXTS = reservedScriptContexts ( ) ; private final Map < String , ScriptContext > scriptContexts ; public ScriptContextRegistry ( Collection < ScriptContext . Plugin > customScriptContexts ) { Map < String , ScriptContext > scriptContexts = new HashMap < > ( ) ; for ( ScriptContext . Standard scriptContext : ScriptContext . Standard . values ( ) ) { scriptContexts . put ( scriptContext . getKey ( ) , scriptContext ) ; } for ( ScriptContext . Plugin customScriptContext : customScriptContexts ) { validateScriptContext ( customScriptContext ) ; ScriptContext previousContext = scriptContexts . put ( customScriptContext . getKey ( ) , customScriptContext ) ; if ( previousContext ! = null ) { throw new IllegalArgumentException ( <str> + customScriptContext . getKey ( ) + <str> ) ; } } this . scriptContexts = unmodifiableMap ( scriptContexts ) ; } Collection < ScriptContext > scriptContexts ( ) { return scriptContexts . values ( ) ; } boolean isSupportedContext ( ScriptContext scriptContext ) { return scriptContexts . containsKey ( scriptContext . getKey ( ) ) ; } private void validateScriptContext ( ScriptContext . Plugin scriptContext ) { if ( RESERVED_SCRIPT_CONTEXTS . contains ( scriptContext . getPluginName ( ) ) ) { throw new IllegalArgumentException ( <str> + scriptContext . getPluginName ( ) + <str> ) ; } if ( RESERVED_SCRIPT_CONTEXTS . contains ( scriptContext . getOperation ( ) ) ) { throw new IllegalArgumentException ( <str> + scriptContext . getOperation ( ) + <str> ) ; } } private static Set < String > reservedScriptContexts ( ) { Set < String > reserved = new HashSet < > ( ScriptService . ScriptType . values ( ) . length + ScriptContext . Standard . values ( ) . length ) ; for ( ScriptService . ScriptType scriptType : ScriptService . ScriptType . values ( ) ) { reserved . add ( scriptType . toString ( ) ) ; } for ( ScriptContext . Standard scriptContext : ScriptContext . Standard . values ( ) ) { reserved . add ( scriptContext . getKey ( ) ) ; } reserved . add ( <str> ) ; reserved . add ( <str> ) ; return unmodifiableSet ( reserved ) ; } } 

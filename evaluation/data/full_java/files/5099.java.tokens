package org . elasticsearch . action . admin . indices . delete ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . action . support . master . AcknowledgedRequest ; import org . elasticsearch . action . support . master . MasterNodeRequest ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . CollectionUtils ; import java . io . IOException ; import static org . elasticsearch . action . ValidateActions . addValidationError ; import static org . elasticsearch . common . unit . TimeValue . readTimeValue ; public class DeleteIndexRequest extends MasterNodeRequest < DeleteIndexRequest > implements IndicesRequest . Replaceable { private String [ ] indices ; private IndicesOptions indicesOptions = IndicesOptions . fromOptions ( false , true , true , true ) ; private TimeValue timeout = AcknowledgedRequest . DEFAULT_ACK_TIMEOUT ; public DeleteIndexRequest ( ) { } public DeleteIndexRequest ( String index ) { this . indices = new String [ ] { index } ; } public DeleteIndexRequest ( String . . . indices ) { this . indices = indices ; } @Override public IndicesOptions indicesOptions ( ) { return indicesOptions ; } public DeleteIndexRequest indicesOptions ( IndicesOptions indicesOptions ) { this . indicesOptions = indicesOptions ; return this ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( CollectionUtils . isEmpty ( indices ) ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } @Override public DeleteIndexRequest indices ( String . . . indices ) { this . indices = indices ; return this ; } @Override public String [ ] indices ( ) { return indices ; } public TimeValue timeout ( ) { return timeout ; } public DeleteIndexRequest timeout ( TimeValue timeout ) { this . timeout = timeout ; return this ; } public DeleteIndexRequest timeout ( String timeout ) { return timeout ( TimeValue . parseTimeValue ( timeout , null , getClass ( ) . getSimpleName ( ) + <str> ) ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; indices = in . readStringArray ( ) ; indicesOptions = IndicesOptions . readIndicesOptions ( in ) ; timeout = readTimeValue ( in ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeStringArray ( indices ) ; indicesOptions . writeIndicesOptions ( out ) ; timeout . writeTo ( out ) ; } } 

package org . apache . cassandra . index . internal . composites ; import java . nio . ByteBuffer ; import org . apache . cassandra . db . * ; import org . apache . cassandra . db . rows . CellPath ; import org . apache . cassandra . db . rows . Row ; import org . apache . cassandra . index . internal . CassandraIndex ; import org . apache . cassandra . index . internal . IndexEntry ; import org . apache . cassandra . schema . IndexMetadata ; public abstract class CollectionKeyIndexBase extends CassandraIndex { public CollectionKeyIndexBase ( ColumnFamilyStore baseCfs , IndexMetadata indexDef ) { super ( baseCfs , indexDef ) ; } public CBuilder buildIndexClusteringPrefix ( ByteBuffer partitionKey , ClusteringPrefix prefix , CellPath path ) { CBuilder builder = CBuilder . create ( getIndexComparator ( ) ) ; builder . add ( partitionKey ) ; for ( int i = <int> ; i < prefix . size ( ) ; i + + ) builder . add ( prefix . get ( i ) ) ; return builder ; } public IndexEntry decodeEntry ( DecoratedKey indexedValue , Row indexEntry ) { int count = <int> + baseCfs . metadata . clusteringColumns ( ) . size ( ) ; Clustering clustering = indexEntry . clustering ( ) ; CBuilder builder = CBuilder . create ( baseCfs . getComparator ( ) ) ; for ( int i = <int> ; i < count - <int> ; i + + ) builder . add ( clustering . get ( i + <int> ) ) ; return new IndexEntry ( indexedValue , clustering , indexEntry . primaryKeyLivenessInfo ( ) . timestamp ( ) , clustering . get ( <int> ) , builder . build ( ) ) ; } } 

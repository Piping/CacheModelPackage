package org . gradle . plugins . javascript . rhino . worker . internal ; import org . gradle . internal . UncheckedException ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorker ; import org . mozilla . javascript . RhinoException ; import java . io . Serializable ; import java . util . concurrent . CountDownLatch ; public class RhinoWorkerReceiver < P extends Serializable > implements RhinoClientWorkerProtocol < P > { private final Class < P > payloadType ; private final RhinoWorker < ? , P > worker ; private final RhinoWorkerClientProtocol clientHandle ; private final CountDownLatch latch = new CountDownLatch ( <int> ) ; public RhinoWorkerReceiver ( Class < P > payloadType , RhinoWorkerClientProtocol clientHandle , RhinoWorker < ? , P > worker ) { this . payloadType = payloadType ; this . clientHandle = clientHandle ; this . worker = worker ; } public void process ( P payload ) { if ( ! payloadType . isInstance ( payload ) ) { clientHandle . initialisationError ( new IllegalArgumentException ( String . format ( <str> , payloadType . getName ( ) , payload , payload . getClass ( ) . getName ( ) ) ) ) ; return ; } try { Serializable result = worker . process ( payload ) ; clientHandle . receiveResult ( result ) ; } catch ( RhinoException e ) { clientHandle . executionError ( worker . convertException ( e ) ) ; } catch ( Exception e ) { clientHandle . executionError ( e ) ; } finally { latch . countDown ( ) ; } } public void waitFor ( ) { try { latch . await ( ) ; } catch ( InterruptedException e ) { throw UncheckedException . throwAsUncheckedException ( e ) ; } } } 

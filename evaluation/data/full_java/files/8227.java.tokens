package org . elasticsearch . index . query ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . lucene . search . function . CombineFunction ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; public class CombineFunctionTests extends ESTestCase { public void testValidOrdinals ( ) { assertThat ( CombineFunction . MULTIPLY . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( CombineFunction . REPLACE . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( CombineFunction . SUM . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( CombineFunction . AVG . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( CombineFunction . MIN . ordinal ( ) , equalTo ( <int> ) ) ; assertThat ( CombineFunction . MAX . ordinal ( ) , equalTo ( <int> ) ) ; } public void testWriteTo ( ) throws Exception { try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { CombineFunction . MULTIPLY . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { CombineFunction . REPLACE . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { CombineFunction . SUM . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { CombineFunction . AVG . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { CombineFunction . MIN . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { CombineFunction . MAX . writeTo ( out ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( in . readVInt ( ) , equalTo ( <int> ) ) ; } } } public void testReadFrom ( ) throws Exception { try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( CombineFunction . readCombineFunctionFrom ( in ) , equalTo ( CombineFunction . MULTIPLY ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( CombineFunction . readCombineFunctionFrom ( in ) , equalTo ( CombineFunction . REPLACE ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( CombineFunction . readCombineFunctionFrom ( in ) , equalTo ( CombineFunction . SUM ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( CombineFunction . readCombineFunctionFrom ( in ) , equalTo ( CombineFunction . AVG ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( CombineFunction . readCombineFunctionFrom ( in ) , equalTo ( CombineFunction . MIN ) ) ; } } try ( BytesStreamOutput out = new BytesStreamOutput ( ) ) { out . writeVInt ( <int> ) ; try ( StreamInput in = StreamInput . wrap ( out . bytes ( ) ) ) { assertThat ( CombineFunction . readCombineFunctionFrom ( in ) , equalTo ( CombineFunction . MAX ) ) ; } } } public void testFromString ( ) { assertThat ( CombineFunction . fromString ( <str> ) , equalTo ( CombineFunction . MULTIPLY ) ) ; assertThat ( CombineFunction . fromString ( <str> ) , equalTo ( CombineFunction . REPLACE ) ) ; assertThat ( CombineFunction . fromString ( <str> ) , equalTo ( CombineFunction . SUM ) ) ; assertThat ( CombineFunction . fromString ( <str> ) , equalTo ( CombineFunction . AVG ) ) ; assertThat ( CombineFunction . fromString ( <str> ) , equalTo ( CombineFunction . MIN ) ) ; assertThat ( CombineFunction . fromString ( <str> ) , equalTo ( CombineFunction . MAX ) ) ; } } 

package org . gradle . gradleplugin . foundation ; import org . dom4j . Document ; import org . dom4j . DocumentHelper ; import org . dom4j . Element ; import org . dom4j . io . OutputFormat ; import org . dom4j . io . SAXReader ; import org . dom4j . io . XMLWriter ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . gradleplugin . foundation . settings . DOM4JSettingsNode ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . foundation . settings . SettingsSerializable ; import javax . swing . filechooser . FileFilter ; import java . io . * ; public class DOM4JSerializer { private static final Logger LOGGER = Logging . getLogger ( DOM4JSerializer . class ) ; public interface ExportInteraction { public File promptForFile ( FileFilter fileFilter ) ; public void reportError ( String error ) ; boolean confirmOverwritingExistingFile ( File file ) ; } public static void exportToFile ( String rootElementTag , ExportInteraction exportInteraction , ExtensionFileFilter fileFilter , SettingsSerializable . . . serializables ) { File file = promptForFile ( exportInteraction , fileFilter ) ; if ( file = = null ) { return ; } FileOutputStream fileOutputStream = null ; try { fileOutputStream = new FileOutputStream ( file ) ; } catch ( FileNotFoundException e ) { LOGGER . error ( <str> + file . getAbsolutePath ( ) , e ) ; exportInteraction . reportError ( <str> + file . getAbsolutePath ( ) ) ; return ; } try { XMLWriter xmlWriter = new XMLWriter ( fileOutputStream , OutputFormat . createPrettyPrint ( ) ) ; Document document = DocumentHelper . createDocument ( ) ; Element rootElement = document . addElement ( rootElementTag ) ; DOM4JSettingsNode settingsNode = new DOM4JSettingsNode ( rootElement ) ; for ( int index = <int> ; index < serializables . length ; index + + ) { SettingsSerializable serializable = serializables [ index ] ; try { serializable . serializeOut ( settingsNode ) ; } catch ( Exception e ) { LOGGER . error ( <str> , e ) ; } } xmlWriter . write ( document ) ; } catch ( Throwable t ) { LOGGER . error ( <str> , t ) ; exportInteraction . reportError ( <str> ) ; } finally { closeQuietly ( fileOutputStream ) ; } } public static void exportToFile ( ExportInteraction exportInteraction , ExtensionFileFilter fileFilter , DOM4JSettingsNode settingsNode ) { File file = promptForFile ( exportInteraction , fileFilter ) ; if ( file = = null ) { return ; } FileOutputStream fileOutputStream = null ; try { fileOutputStream = new FileOutputStream ( file ) ; } catch ( FileNotFoundException e ) { LOGGER . error ( <str> + file . getAbsolutePath ( ) , e ) ; exportInteraction . reportError ( <str> + file . getAbsolutePath ( ) ) ; return ; } try { XMLWriter xmlWriter = new XMLWriter ( fileOutputStream , OutputFormat . createPrettyPrint ( ) ) ; Element rootElement = settingsNode . getElement ( ) ; rootElement . detach ( ) ; Document document = DocumentHelper . createDocument ( rootElement ) ; xmlWriter . write ( document ) ; } catch ( Throwable t ) { LOGGER . error ( <str> , t ) ; exportInteraction . reportError ( <str> ) ; } finally { closeQuietly ( fileOutputStream ) ; } } private static File promptForFile ( ExportInteraction exportInteraction , ExtensionFileFilter fileFilter ) { boolean promptAgain = false ; File file = null ; int counter = <int> ; do { promptAgain = false ; file = exportInteraction . promptForFile ( fileFilter ) ; if ( file ! = null ) { file = ensureFileHasCorrectExtensionAndCase ( file , fileFilter . getExtension ( ) ) ; if ( file . exists ( ) ) { promptAgain = ! exportInteraction . confirmOverwritingExistingFile ( file ) ; } } counter + + ; } while ( promptAgain & & counter < <int> ) ; return file ; } public interface ImportInteraction { public File promptForFile ( FileFilter fileFilters ) ; public void reportError ( String error ) ; } public static boolean importFromFile ( ImportInteraction importInteraction , FileFilter fileFilter , SettingsSerializable . . . serializables ) { SettingsNode settings = readSettingsFile ( importInteraction , fileFilter ) ; if ( settings = = null ) { return false ; } for ( int index = <int> ; index < serializables . length ; index + + ) { SettingsSerializable serializable = serializables [ index ] ; try { serializable . serializeIn ( settings ) ; } catch ( Exception e ) { LOGGER . error ( <str> , e ) ; } } return true ; } public static DOM4JSettingsNode readSettingsFile ( ImportInteraction importInteraction , FileFilter fileFilter ) { File file = importInteraction . promptForFile ( fileFilter ) ; if ( file = = null ) { return null ; } if ( ! file . exists ( ) ) { importInteraction . reportError ( <str> + file . getAbsolutePath ( ) ) ; return null ; } try { SAXReader reader = new SAXReader ( ) ; Document document = reader . read ( file ) ; return new DOM4JSettingsNode ( document . getRootElement ( ) ) ; } catch ( Throwable t ) { LOGGER . error ( <str> + file . getAbsolutePath ( ) , t ) ; importInteraction . reportError ( <str> + file . getAbsolutePath ( ) ) ; return null ; } } private static void closeQuietly ( Closeable closeable ) { try { if ( closeable ! = null ) { closeable . close ( ) ; } } catch ( IOException e ) { LOGGER . error ( <str> , e ) ; } } private static File ensureFileHasCorrectExtensionAndCase ( File file , String requiredExtension ) { String name = file . getName ( ) ; if ( ! name . toLowerCase ( ) . endsWith ( requiredExtension . toLowerCase ( ) ) ) { return new File ( file . getParentFile ( ) , name + requiredExtension ) ; } return file ; } public static DOM4JSettingsNode createBlankSettings ( ) { Document document = DocumentHelper . createDocument ( ) ; Element rootElement = document . addElement ( <str> ) ; DOM4JSettingsNode settings = new DOM4JSettingsNode ( rootElement ) ; return settings ; } } 

package org . gradle . build . docs . dsl . docbook ; import org . gradle . build . docs . dsl . docbook . model . MethodDoc ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; public class MethodTableRenderer { public void renderTo ( Iterable < MethodDoc > methods , Element parent ) { Document document = parent . getOwnerDocument ( ) ; Element thead = document . createElement ( <str> ) ; parent . appendChild ( thead ) ; Element tr = document . createElement ( <str> ) ; thead . appendChild ( tr ) ; Element td = document . createElement ( <str> ) ; tr . appendChild ( td ) ; td . appendChild ( document . createTextNode ( <str> ) ) ; td = document . createElement ( <str> ) ; tr . appendChild ( td ) ; td . appendChild ( document . createTextNode ( <str> ) ) ; for ( MethodDoc methodDoc : methods ) { tr = document . createElement ( <str> ) ; parent . appendChild ( tr ) ; td = document . createElement ( <str> ) ; tr . appendChild ( td ) ; Element literal = document . createElement ( <str> ) ; td . appendChild ( literal ) ; Element link = document . createElement ( <str> ) ; literal . appendChild ( link ) ; link . setAttribute ( <str> , methodDoc . getId ( ) ) ; link . appendChild ( document . createTextNode ( methodDoc . getName ( ) ) ) ; StringBuilder signature = new StringBuilder ( ) ; signature . append ( <str> ) ; for ( int i = <int> ; i < methodDoc . getMetaData ( ) . getParameters ( ) . size ( ) ; i + + ) { if ( i > <int> ) { signature . append ( <str> ) ; } signature . append ( methodDoc . getMetaData ( ) . getParameters ( ) . get ( i ) . getName ( ) ) ; } signature . append ( <str> ) ; literal . appendChild ( document . createTextNode ( signature . toString ( ) ) ) ; td = document . createElement ( <str> ) ; tr . appendChild ( td ) ; if ( methodDoc . isDeprecated ( ) ) { Element caution = document . createElement ( <str> ) ; td . appendChild ( caution ) ; caution . appendChild ( document . createTextNode ( <str> ) ) ; } if ( methodDoc . isIncubating ( ) ) { Element caution = document . createElement ( <str> ) ; td . appendChild ( caution ) ; caution . appendChild ( document . createTextNode ( <str> ) ) ; } td . appendChild ( document . importNode ( methodDoc . getDescription ( ) , true ) ) ; } } } 

package org . eclipse . debug . tests . launching ; import java . io . BufferedReader ; import java . io . File ; import java . io . IOException ; import java . io . InputStreamReader ; import java . net . URISyntaxException ; import java . net . URL ; import java . util . ArrayList ; import java . util . Arrays ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . FileLocator ; import org . eclipse . core . runtime . Path ; import org . eclipse . core . runtime . Platform ; import org . eclipse . core . runtime . URIUtil ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . osgi . service . environment . Constants ; import junit . framework . TestCase ; public class ArgumentParsingTests extends TestCase { private void execute1Arg ( String cmdLine ) throws Exception { execute1Arg ( cmdLine , cmdLine ) ; } private void execute1Arg ( String cmdLine , String argParsed ) throws Exception { execute1Arg ( cmdLine , argParsed , cmdLine ) ; } private void execute1Arg ( String cmdLine , String argParsed , String rendered ) throws Exception { execute ( <str> + cmdLine + <str> , new String [ ] { <str> , argParsed , <str> } , <str> + rendered + <str> ) ; } private static void execute ( String commandLine , String [ ] expectedArgs ) throws Exception { execute ( commandLine , expectedArgs , commandLine ) ; } private static void execute ( String commandLine , String [ ] expectedArgs , String expectedRendered ) throws Exception { String [ ] arguments = DebugPlugin . parseArguments ( commandLine ) ; assertEquals ( <str> , Arrays . asList ( expectedArgs ) . toString ( ) , Arrays . asList ( arguments ) . toString ( ) ) ; runCommandLine ( commandLine , arguments ) ; String rendered = DebugPlugin . renderArguments ( arguments , null ) ; assertEquals ( <str> , expectedRendered , rendered ) ; if ( ! commandLine . equals ( rendered ) ) { String [ ] arguments2 = DebugPlugin . parseArguments ( rendered ) ; assertEquals ( <str> , Arrays . asList ( expectedArgs ) . toString ( ) , Arrays . asList ( arguments2 ) . toString ( ) ) ; } String [ ] splitArguments = DebugPlugin . splitArguments ( commandLine ) ; assertEquals ( expectedArgs . length , splitArguments . length ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = <int> ; i < splitArguments . length ; i + + ) { if ( i > <int> ) { sb . append ( <str> ) ; } sb . append ( splitArguments [ i ] ) ; } assertEquals ( commandLine , sb . toString ( ) ) ; } private static void runCommandLine ( String commandLine , String [ ] arguments ) throws IOException , URISyntaxException , CoreException { URL classPathUrl = ArgumentsPrinter . class . getResource ( <str> ) ; classPathUrl = FileLocator . toFileURL ( classPathUrl ) ; File classPathFile = URIUtil . toFile ( URIUtil . toURI ( classPathUrl ) ) ; String [ ] execArgs = new String [ arguments . length + <int> ] ; execArgs [ <int> ] = new Path ( System . getProperty ( <str> ) ) . append ( <str> ) . toOSString ( ) ; execArgs [ <int> ] = <str> ; execArgs [ <int> ] = classPathFile . getAbsolutePath ( ) ; execArgs [ <int> ] = ArgumentsPrinter . class . getName ( ) ; System . arraycopy ( arguments , <int> , execArgs , <int> , arguments . length ) ; ArrayList < String > resultArgs = runCommandLine ( execArgs ) ; assertEquals ( <str> , Arrays . asList ( arguments ) . toString ( ) , resultArgs . toString ( ) ) ; if ( ! Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execArgs = new String [ ] { <str> , <str> , execArgs [ <int> ] + <str> + execArgs [ <int> ] + <str> + execArgs [ <int> ] + <str> + execArgs [ <int> ] + <str> + commandLine } ; resultArgs = runCommandLine ( execArgs ) ; assertEquals ( <str> , Arrays . asList ( arguments ) . toString ( ) , resultArgs . toString ( ) ) ; } } private static ArrayList < String > runCommandLine ( String [ ] execArgs ) throws CoreException , IOException { execArgs = quoteWindowsArgs ( execArgs ) ; Process process = DebugPlugin . exec ( execArgs , null ) ; BufferedReader procOut = new BufferedReader ( new InputStreamReader ( process . getInputStream ( ) ) ) ; ArrayList < String > procArgs = new ArrayList < String > ( ) ; String procArg ; while ( ( procArg = procOut . readLine ( ) ) ! = null ) { procArgs . add ( procArg ) ; } return procArgs ; } private static String [ ] quoteWindowsArgs ( String [ ] cmdLine ) { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { String [ ] winCmdLine = new String [ cmdLine . length ] ; for ( int i = <int> ; i < cmdLine . length ; i + + ) { winCmdLine [ i ] = winQuote ( cmdLine [ i ] ) ; } cmdLine = winCmdLine ; } return cmdLine ; } private static boolean needsQuoting ( String s ) { int len = s . length ( ) ; if ( len = = <int> ) { return true ; } for ( int i = <int> ; i < len ; i + + ) { switch ( s . charAt ( i ) ) { case <str> : case <str> : case <str> : case <str> : return true ; default : break ; } } return false ; } private static String winQuote ( String s ) { if ( ! needsQuoting ( s ) ) { return s ; } s = s . replaceAll ( <str> , <str> ) ; s = s . replaceAll ( <str> , <str> ) ; return <str> + s + <str> ; } public void testEmpty ( ) throws Exception { execute ( <str> , new String [ <int> ] ) ; } public void test1arg ( ) throws Exception { execute ( <str> , new String [ ] { <str> } ) ; } public void test2arg ( ) throws Exception { execute ( <str> , new String [ ] { <str> , <str> } ) ; } public void test100arg ( ) throws Exception { StringBuffer buf = new StringBuffer ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { buf . append ( <str> ) ; } buf . deleteCharAt ( buf . length ( ) - <int> ) ; String [ ] args = new String [ <int> ] ; Arrays . fill ( args , <str> ) ; execute ( buf . toString ( ) , args , buf . toString ( ) . trim ( ) ) ; } public void testEscape ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute1Arg ( <str> ) ; } else { execute1Arg ( <str> , <str> , <str> ) ; } } public void testEscapeDoubleQuote1 ( ) throws Exception { execute1Arg ( <str> , <str> , <str> ) ; } public void testEscapeDoubleQuote2 ( ) throws Exception { execute1Arg ( <str> , <str> , <str> ) ; } public void testDoubleQuoted1 ( ) throws Exception { execute1Arg ( <str> , <str> ) ; } public void testDoubleQuoted2 ( ) throws Exception { execute1Arg ( <str> , <str> , <str> ) ; } public void testDoubleQuoted3 ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute1Arg ( <str> ) ; } else { execute1Arg ( <str> , <str> , <str> ) ; } } public void testDoubleQuoted4 ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute1Arg ( <str> , <str> , <str> ) ; } else { execute1Arg ( <str> , <str> , <str> ) ; } } public void testDoubleQuoted5 ( ) throws Exception { execute1Arg ( <str> , <str> , <str> ) ; } public void testDoubleQuotedWithSpace1 ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute1Arg ( <str> , <str> , <str> ) ; } else { execute1Arg ( <str> , <str> , <str> ) ; } } public void testDoubleQuotedWithSpace2 ( ) throws Exception { execute1Arg ( <str> , <str> ) ; } public void testSingleQuoted1 ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute ( <str> , new String [ ] { <str> , <str> } ) ; } else { execute ( <str> , new String [ ] { <str> } , <str> ) ; } } public void testSingleQuoted2 ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute1Arg ( <str> , <str> , <str> ) ; } else { execute1Arg ( <str> , <str> , <str> ) ; } } public void testWindows1 ( ) throws Exception { execute ( <str> , new String [ ] { <str> , <str> , <str> } ) ; } public void testWindows2 ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute ( <str> , new String [ ] { <str> , <str> , <str> } , <str> ) ; } else { execute ( <str> , new String [ ] { <str> , <str> , <str> } , <str> ) ; } } public void testWindows3 ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute ( <str> , new String [ ] { <str> , <str> , <str> } , <str> ) ; } else { execute ( <str> , new String [ ] { <str> , <str> , <str> } , <str> ) ; } } public void testWindows4 ( ) throws Exception { execute ( <str> , new String [ ] { <str> , <str> , <str> } ) ; } public void testWindows5 ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute ( <str> , new String [ ] { <str> , <str> , <str> } , <str> ) ; } else { execute ( <str> , new String [ ] { <str> , <str> , <str> } , <str> ) ; } } public void testAllInOne ( ) throws Exception { if ( Platform . getOS ( ) . equals ( Constants . OS_WIN32 ) ) { execute ( <str> , new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } , <str> ) ; } else { execute ( <str> , new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } , <str> ) ; } } } 

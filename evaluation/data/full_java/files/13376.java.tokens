package org . gradle . plugins . javascript . coffeescript . compile . internal . rhino ; import org . gradle . api . Action ; import org . gradle . api . internal . file . RelativeFile ; import org . gradle . plugins . javascript . base . SourceTransformationException ; import org . gradle . plugins . javascript . coffeescript . compile . internal . CoffeeScriptCompileDestinationCalculator ; import org . gradle . plugins . javascript . coffeescript . compile . internal . SerializableCoffeeScriptCompileSpec ; import org . gradle . plugins . javascript . rhino . worker . RhinoWorker ; import org . mozilla . javascript . Context ; import org . mozilla . javascript . JavaScriptException ; import org . mozilla . javascript . RhinoException ; import org . mozilla . javascript . Scriptable ; import static org . gradle . plugins . javascript . rhino . worker . RhinoWorkerUtils . * ; public class CoffeeScriptCompilerWorker implements RhinoWorker < Boolean , SerializableCoffeeScriptCompileSpec > { public Boolean process ( SerializableCoffeeScriptCompileSpec spec ) { Scriptable coffeeScriptScope = parse ( spec . getCoffeeScriptJs ( ) , <str> , new Action < Context > ( ) { public void execute ( Context context ) { context . setOptimizationLevel ( - <int> ) ; } } ) ; String encoding = spec . getOptions ( ) . getEncoding ( ) ; CoffeeScriptCompileDestinationCalculator destinationCalculator = new CoffeeScriptCompileDestinationCalculator ( spec . getDestinationDir ( ) ) ; for ( RelativeFile target : spec . getSource ( ) ) { String source = readFile ( target . getFile ( ) , encoding ) ; String output = compile ( coffeeScriptScope , source , target . getRelativePath ( ) . getPathString ( ) ) ; writeFile ( output , destinationCalculator . transform ( target . getRelativePath ( ) ) , encoding ) ; } return Boolean . TRUE ; } public Exception convertException ( RhinoException rhinoException ) { return rhinoException ; } private String compile ( Scriptable rootScope , final String source , final String sourceName ) { return childScope ( rootScope , new DefaultScopeOperation < String > ( ) { public String action ( Scriptable compileScope , Context context ) { compileScope . put ( <str> , compileScope , source ) ; try { return ( String ) context . evaluateString ( compileScope , <str> , sourceName , <int> , null ) ; } catch ( JavaScriptException jse ) { throw new SourceTransformationException ( String . format ( <str> , sourceName ) , jse ) ; } } } ) ; } } 

package org . elasticsearch . index . mapper . update ; import org . elasticsearch . action . admin . indices . mapping . get . GetMappingsResponse ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . index . mapper . MapperParsingException ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . HashMap ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . equalTo ; public class UpdateMappingOnClusterIT extends ESIntegTestCase { private static final String INDEX = <str> ; private static final String TYPE = <str> ; public void testAllEnabled ( ) throws Exception { XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( TYPE ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; XContentBuilder mappingUpdate = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ; String errorMessage = <str> ; testConflict ( mapping . string ( ) , mappingUpdate . string ( ) , errorMessage ) ; } public void testAllConflicts ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; String mappingUpdate = copyToStringFromClasspath ( <str> ) ; String [ ] errorMessage = { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; testConflict ( mapping , mappingUpdate , errorMessage ) ; } public void testAllDisabled ( ) throws Exception { XContentBuilder mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( TYPE ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; XContentBuilder mappingUpdate = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) ; String errorMessage = <str> ; testConflict ( mapping . string ( ) , mappingUpdate . string ( ) , errorMessage ) ; } public void testAllWithDefault ( ) throws Exception { String defaultMapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , defaultMapping ) . get ( ) ; String docMapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; PutMappingResponse response = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( docMapping ) . get ( ) ; assertTrue ( response . isAcknowledged ( ) ) ; String docMappingUpdate = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; response = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( docMappingUpdate ) . get ( ) ; assertTrue ( response . isAcknowledged ( ) ) ; String docMappingAllExplicitEnabled = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; response = client ( ) . admin ( ) . indices ( ) . preparePutMapping ( <str> ) . setType ( <str> ) . setSource ( docMappingAllExplicitEnabled ) . get ( ) ; assertTrue ( response . isAcknowledged ( ) ) ; GetMappingsResponse mapping = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( <str> ) . get ( ) ; HashMap props = ( HashMap ) mapping . getMappings ( ) . get ( <str> ) . get ( <str> ) . getSourceAsMap ( ) . get ( <str> ) ; assertThat ( ( Boolean ) props . get ( <str> ) , equalTo ( false ) ) ; props = ( HashMap ) mapping . getMappings ( ) . get ( <str> ) . get ( <str> ) . getSourceAsMap ( ) . get ( <str> ) ; assertNotNull ( props ) ; assertNotNull ( props . get ( <str> ) ) ; props = ( HashMap ) mapping . getMappings ( ) . get ( <str> ) . get ( <str> ) . getSourceAsMap ( ) . get ( <str> ) ; assertThat ( ( Boolean ) props . get ( <str> ) , equalTo ( true ) ) ; props = ( HashMap ) mapping . getMappings ( ) . get ( <str> ) . get ( <str> ) . getSourceAsMap ( ) . get ( <str> ) ; assertThat ( ( Boolean ) props . get ( <str> ) , equalTo ( false ) ) ; } public void testDocValuesInvalidMapping ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( TYPE ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { prepareCreate ( INDEX ) . setSource ( mapping ) . get ( ) ; fail ( ) ; } catch ( MapperParsingException e ) { assertThat ( e . getDetailedMessage ( ) , containsString ( <str> ) ) ; } } public void testDocValuesInvalidMappingOnUpdate ( ) throws Exception { String mapping = jsonBuilder ( ) . startObject ( ) . startObject ( TYPE ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; prepareCreate ( INDEX ) . addMapping ( TYPE , mapping ) . get ( ) ; String mappingUpdate = jsonBuilder ( ) . startObject ( ) . startObject ( TYPE ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; GetMappingsResponse mappingsBeforeUpdateResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( INDEX ) . addTypes ( TYPE ) . get ( ) ; try { client ( ) . admin ( ) . indices ( ) . preparePutMapping ( INDEX ) . setType ( TYPE ) . setSource ( mappingUpdate ) . get ( ) ; fail ( ) ; } catch ( MapperParsingException e ) { assertThat ( e . getDetailedMessage ( ) , containsString ( <str> ) ) ; } compareMappingOnNodes ( mappingsBeforeUpdateResponse ) ; } public void testDisabledSizeTimestampIndexDoNotLooseMappings ( ) throws Exception { String mapping = copyToStringFromClasspath ( <str> ) ; prepareCreate ( INDEX ) . addMapping ( TYPE , mapping ) . get ( ) ; GetMappingsResponse mappingsBeforeGreen = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( INDEX ) . addTypes ( TYPE ) . get ( ) ; ensureGreen ( INDEX ) ; compareMappingOnNodes ( mappingsBeforeGreen ) ; } protected void testConflict ( String mapping , String mappingUpdate , String . . . errorMessages ) throws InterruptedException { assertAcked ( prepareCreate ( INDEX ) . setSource ( mapping ) . get ( ) ) ; ensureGreen ( INDEX ) ; GetMappingsResponse mappingsBeforeUpdateResponse = client ( ) . admin ( ) . indices ( ) . prepareGetMappings ( INDEX ) . addTypes ( TYPE ) . get ( ) ; try { client ( ) . admin ( ) . indices ( ) . preparePutMapping ( INDEX ) . setType ( TYPE ) . setSource ( mappingUpdate ) . get ( ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { for ( String errorMessage : errorMessages ) { assertThat ( e . getMessage ( ) , containsString ( errorMessage ) ) ; } } compareMappingOnNodes ( mappingsBeforeUpdateResponse ) ; } private void compareMappingOnNodes ( GetMappingsResponse previousMapping ) { for ( Client client : cluster ( ) ) { GetMappingsResponse currentMapping = client . admin ( ) . indices ( ) . prepareGetMappings ( INDEX ) . addTypes ( TYPE ) . setLocal ( true ) . get ( ) ; assertThat ( previousMapping . getMappings ( ) . get ( INDEX ) . get ( TYPE ) . source ( ) , equalTo ( currentMapping . getMappings ( ) . get ( INDEX ) . get ( TYPE ) . source ( ) ) ) ; } } } 

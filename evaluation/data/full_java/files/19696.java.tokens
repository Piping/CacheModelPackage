package io . netty . util . internal ; import java . util . Arrays ; public final class AppendableCharSequence implements CharSequence , Appendable { private char [ ] chars ; private int pos ; public AppendableCharSequence ( int length ) { if ( length < <int> ) { throw new IllegalArgumentException ( <str> + length + <str> ) ; } chars = new char [ length ] ; } private AppendableCharSequence ( char [ ] chars ) { if ( chars . length < <int> ) { throw new IllegalArgumentException ( <str> + chars . length + <str> ) ; } this . chars = chars ; pos = chars . length ; } @Override public int length ( ) { return pos ; } @Override public char charAt ( int index ) { if ( index > pos ) { throw new IndexOutOfBoundsException ( ) ; } return chars [ index ] ; } public char charAtUnsafe ( int index ) { return chars [ index ] ; } @Override public AppendableCharSequence subSequence ( int start , int end ) { return new AppendableCharSequence ( Arrays . copyOfRange ( chars , start , end ) ) ; } @Override public AppendableCharSequence append ( char c ) { try { chars [ pos + + ] = c ; } catch ( IndexOutOfBoundsException e ) { expand ( ) ; chars [ pos - <int> ] = c ; } return this ; } @Override public AppendableCharSequence append ( CharSequence csq ) { return append ( csq , <int> , csq . length ( ) ) ; } @Override public AppendableCharSequence append ( CharSequence csq , int start , int end ) { if ( csq . length ( ) < end ) { throw new IndexOutOfBoundsException ( ) ; } int length = end - start ; if ( length > chars . length - pos ) { chars = expand ( chars , pos + length , pos ) ; } if ( csq instanceof AppendableCharSequence ) { AppendableCharSequence seq = ( AppendableCharSequence ) csq ; char [ ] src = seq . chars ; System . arraycopy ( src , start , chars , pos , length ) ; pos + = length ; return this ; } for ( int i = start ; i < end ; i + + ) { chars [ pos + + ] = csq . charAt ( i ) ; } return this ; } public void reset ( ) { pos = <int> ; } @Override public String toString ( ) { return new String ( chars , <int> , pos ) ; } public String substring ( int start , int end ) { int length = end - start ; if ( start > pos | | length > pos ) { throw new IndexOutOfBoundsException ( ) ; } return new String ( chars , start , length ) ; } public String subStringUnsafe ( int start , int end ) { return new String ( chars , start , end - start ) ; } private void expand ( ) { char [ ] old = chars ; int len = old . length < < <int> ; if ( len < <int> ) { throw new IllegalStateException ( ) ; } chars = new char [ len ] ; System . arraycopy ( old , <int> , chars , <int> , old . length ) ; } private static char [ ] expand ( char [ ] array , int neededSpace , int size ) { int newCapacity = array . length ; do { newCapacity < < = <int> ; if ( newCapacity < <int> ) { throw new IllegalStateException ( ) ; } } while ( neededSpace > newCapacity ) ; char [ ] newArray = new char [ newCapacity ] ; System . arraycopy ( array , <int> , newArray , <int> , size ) ; return newArray ; } } 

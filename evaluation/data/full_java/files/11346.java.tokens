package org . gradle . api . internal . artifacts . dependencies ; import org . gradle . api . InvalidUserDataException ; import org . gradle . api . artifacts . ExternalModuleDependency ; import org . gradle . api . artifacts . ModuleVersionIdentifier ; import org . gradle . api . internal . artifacts . ModuleVersionSelectorStrictSpec ; public abstract class AbstractExternalModuleDependency extends AbstractModuleDependency implements ExternalModuleDependency { private String group ; private String name ; private String version ; private boolean changing ; private boolean force ; public AbstractExternalModuleDependency ( String group , String name , String version , String configuration ) { super ( configuration ) ; if ( name = = null ) { throw new InvalidUserDataException ( <str> ) ; } this . group = group ; this . name = name ; this . version = version ; } protected void copyTo ( AbstractExternalModuleDependency target ) { super . copyTo ( target ) ; target . setForce ( isForce ( ) ) ; target . setChanging ( isChanging ( ) ) ; } protected boolean isContentEqualsFor ( ExternalModuleDependency dependencyRhs ) { if ( ! isKeyEquals ( dependencyRhs ) | | ! isCommonContentEquals ( dependencyRhs ) ) { return false ; } return force = = dependencyRhs . isForce ( ) & & changing = = dependencyRhs . isChanging ( ) ; } public boolean matchesStrictly ( ModuleVersionIdentifier identifier ) { return new ModuleVersionSelectorStrictSpec ( this ) . isSatisfiedBy ( identifier ) ; } public String getGroup ( ) { return group ; } public String getName ( ) { return name ; } public String getVersion ( ) { return version ; } public boolean isForce ( ) { return force ; } public ExternalModuleDependency setForce ( boolean force ) { this . force = force ; return this ; } public boolean isChanging ( ) { return changing ; } public ExternalModuleDependency setChanging ( boolean changing ) { this . changing = changing ; return this ; } } 

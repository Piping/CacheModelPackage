package org . elasticsearch . script ; import org . elasticsearch . common . ContextAndHeaderHolder ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . env . Environment ; import org . elasticsearch . test . ESTestCase ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import static org . hamcrest . Matchers . containsString ; public class ScriptContextTests extends ESTestCase { private static final String PLUGIN_NAME = <str> ; ScriptService makeScriptService ( ) throws Exception { Settings settings = Settings . builder ( ) . put ( <str> , createTempDir ( ) ) . put ( ScriptService . SCRIPT_AUTO_RELOAD_ENABLED_SETTING , false ) . put ( <str> + PLUGIN_NAME + <str> , false ) . put ( <str> + MockScriptEngine . NAME + <str> + PLUGIN_NAME + <str> , false ) . build ( ) ; Set < ScriptEngineService > engines = new HashSet < > ( Collections . singletonList ( new MockScriptEngine ( ) ) ) ; List < ScriptContext . Plugin > customContexts = Arrays . asList ( new ScriptContext . Plugin ( PLUGIN_NAME , <str> ) , new ScriptContext . Plugin ( PLUGIN_NAME , <str> ) , new ScriptContext . Plugin ( PLUGIN_NAME , <str> ) ) ; return new ScriptService ( settings , new Environment ( settings ) , engines , null , new ScriptContextRegistry ( customContexts ) ) ; } public void testCustomGlobalScriptContextSettings ( ) throws Exception { ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder ( ) ; ScriptService scriptService = makeScriptService ( ) ; for ( ScriptService . ScriptType scriptType : ScriptService . ScriptType . values ( ) ) { try { Script script = new Script ( <str> , scriptType , MockScriptEngine . NAME , null ) ; scriptService . compile ( script , new ScriptContext . Plugin ( PLUGIN_NAME , <str> ) , contextAndHeaders ) ; fail ( <str> ) ; } catch ( ScriptException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> + scriptType + <str> + PLUGIN_NAME + <str> + MockScriptEngine . NAME + <str> ) ) ; } } } public void testCustomScriptContextSettings ( ) throws Exception { ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder ( ) ; ScriptService scriptService = makeScriptService ( ) ; Script script = new Script ( <str> , ScriptService . ScriptType . INLINE , MockScriptEngine . NAME , null ) ; try { scriptService . compile ( script , new ScriptContext . Plugin ( PLUGIN_NAME , <str> ) , contextAndHeaders ) ; fail ( <str> ) ; } catch ( ScriptException e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> + PLUGIN_NAME + <str> + MockScriptEngine . NAME + <str> ) ) ; } assertNotNull ( scriptService . compile ( script , ScriptContext . Standard . AGGS , contextAndHeaders ) ) ; assertNotNull ( scriptService . compile ( script , ScriptContext . Standard . SEARCH , contextAndHeaders ) ) ; assertNotNull ( scriptService . compile ( script , new ScriptContext . Plugin ( PLUGIN_NAME , <str> ) , contextAndHeaders ) ) ; } public void testUnknownPluginScriptContext ( ) throws Exception { ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder ( ) ; ScriptService scriptService = makeScriptService ( ) ; for ( ScriptService . ScriptType scriptType : ScriptService . ScriptType . values ( ) ) { try { Script script = new Script ( <str> , scriptType , MockScriptEngine . NAME , null ) ; scriptService . compile ( script , new ScriptContext . Plugin ( PLUGIN_NAME , <str> ) , contextAndHeaders ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> + PLUGIN_NAME + <str> ) ) ; } } } public void testUnknownCustomScriptContext ( ) throws Exception { ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder ( ) ; ScriptContext context = new ScriptContext ( ) { @Override public String getKey ( ) { return <str> ; } } ; ScriptService scriptService = makeScriptService ( ) ; for ( ScriptService . ScriptType scriptType : ScriptService . ScriptType . values ( ) ) { try { Script script = new Script ( <str> , scriptType , MockScriptEngine . NAME , null ) ; scriptService . compile ( script , context , contextAndHeaders ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( <str> ) ) ; } } } } 

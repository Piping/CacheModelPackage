package org . gradle ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . api . execution . TaskExecutionListener ; import org . gradle . api . invocation . Gradle ; import org . gradle . api . tasks . TaskState ; import org . gradle . internal . progress . LoggerProvider ; import org . gradle . logging . ProgressLogger ; import org . gradle . logging . ProgressLoggerFactory ; import java . util . HashMap ; import java . util . Map ; @Deprecated public class TaskExecutionLogger implements TaskExecutionListener { private final Map < Task , ProgressLogger > currentTasks = new HashMap < Task , ProgressLogger > ( ) ; private final ProgressLoggerFactory progressLoggerFactory ; private LoggerProvider parentLoggerProvider ; public TaskExecutionLogger ( ProgressLoggerFactory progressLoggerFactory , LoggerProvider parentLoggerProvider ) { this . progressLoggerFactory = progressLoggerFactory ; this . parentLoggerProvider = parentLoggerProvider ; } public void beforeExecute ( Task task ) { assert ! currentTasks . containsKey ( task ) ; ProgressLogger currentTask = progressLoggerFactory . newOperation ( TaskExecutionLogger . class , parentLoggerProvider . getLogger ( ) ) ; String displayName = getDisplayName ( task ) ; currentTask . setDescription ( <str> . concat ( displayName ) ) ; currentTask . setShortDescription ( displayName ) ; currentTask . setLoggingHeader ( displayName ) ; currentTask . started ( ) ; currentTasks . put ( task , currentTask ) ; } public void afterExecute ( Task task , TaskState state ) { ProgressLogger currentTask = currentTasks . remove ( task ) ; String taskMessage = state . getFailure ( ) ! = null ? <str> : state . getSkipMessage ( ) ; currentTask . completed ( taskMessage ) ; } private String getDisplayName ( Task task ) { Gradle build = task . getProject ( ) . getGradle ( ) ; if ( build . getParent ( ) = = null ) { return task . getPath ( ) ; } return Project . PATH_SEPARATOR + build . getRootProject ( ) . getName ( ) + task . getPath ( ) ; } } 

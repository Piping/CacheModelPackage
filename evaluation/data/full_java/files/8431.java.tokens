package org . elasticsearch . search . aggregations ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . json . JsonXContent ; import org . elasticsearch . index . IndexService ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import org . elasticsearch . search . internal . SearchContext ; import org . elasticsearch . test . ESSingleNodeTestCase ; import java . io . IOException ; public class AggregationCollectorTests extends ESSingleNodeTestCase { public void testNeedsScores ( ) throws Exception { IndexService index = createIndex ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <int> ) . execute ( ) . get ( ) ; client ( ) . admin ( ) . indices ( ) . prepareRefresh ( <str> ) . get ( ) ; String fieldAgg = <str> ; assertFalse ( needsScores ( index , fieldAgg ) ) ; String subFieldAgg = <str> + fieldAgg + <str> ; assertFalse ( needsScores ( index , subFieldAgg ) ) ; String topHitsAgg = <str> ; assertTrue ( needsScores ( index , topHitsAgg ) ) ; } private boolean needsScores ( IndexService index , String agg ) throws IOException { AggregatorParsers parser = getInstanceFromNode ( AggregatorParsers . class ) ; XContentParser aggParser = JsonXContent . jsonXContent . createParser ( agg ) ; aggParser . nextToken ( ) ; SearchContext searchContext = createSearchContext ( index ) ; final AggregatorFactories factories = parser . parseAggregators ( aggParser , searchContext ) ; AggregationContext aggregationContext = new AggregationContext ( searchContext ) ; final Aggregator [ ] aggregators = factories . createTopLevelAggregators ( aggregationContext ) ; assertEquals ( <int> , aggregators . length ) ; return aggregators [ <int> ] . needsScores ( ) ; } } 

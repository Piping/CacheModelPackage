package org . elasticsearch . messy . tests ; import org . elasticsearch . action . search . SearchPhaseExecutionException ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . action . search . ShardSearchFailure ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . index . query . functionscore . ScoreFunctionBuilders ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . groovy . GroovyPlugin ; import org . elasticsearch . search . SearchHit ; import org . elasticsearch . test . ESIntegTestCase ; import org . hamcrest . Matchers ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ExecutionException ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; public class IndexLookupTests extends ESIntegTestCase { String includeAllFlag = <str> ; String includeAllWithoutRecordFlag = <str> ; private HashMap < String , List < Object > > expectedEndOffsetsArray ; private HashMap < String , List < Object > > expectedPayloadsArray ; private HashMap < String , List < Object > > expectedPositionsArray ; private HashMap < String , List < Object > > emptyArray ; private HashMap < String , List < Object > > expectedStartOffsetsArray ; @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return Collections . singleton ( GroovyPlugin . class ) ; } void initTestData ( ) throws InterruptedException , ExecutionException , IOException { emptyArray = new HashMap < > ( ) ; List < Object > empty1 = new ArrayList < > ( ) ; empty1 . add ( - <int> ) ; empty1 . add ( - <int> ) ; emptyArray . put ( <str> , empty1 ) ; List < Object > empty2 = new ArrayList < > ( ) ; empty2 . add ( - <int> ) ; empty2 . add ( - <int> ) ; emptyArray . put ( <str> , empty2 ) ; List < Object > empty3 = new ArrayList < > ( ) ; empty3 . add ( - <int> ) ; empty3 . add ( - <int> ) ; emptyArray . put ( <str> , empty3 ) ; expectedPositionsArray = new HashMap < > ( ) ; List < Object > pos1 = new ArrayList < > ( ) ; pos1 . add ( <int> ) ; pos1 . add ( <int> ) ; expectedPositionsArray . put ( <str> , pos1 ) ; List < Object > pos2 = new ArrayList < > ( ) ; pos2 . add ( <int> ) ; pos2 . add ( <int> ) ; expectedPositionsArray . put ( <str> , pos2 ) ; List < Object > pos3 = new ArrayList < > ( ) ; pos3 . add ( <int> ) ; pos3 . add ( <int> ) ; expectedPositionsArray . put ( <str> , pos3 ) ; expectedPayloadsArray = new HashMap < > ( ) ; List < Object > pay1 = new ArrayList < > ( ) ; pay1 . add ( <int> ) ; pay1 . add ( <int> ) ; expectedPayloadsArray . put ( <str> , pay1 ) ; List < Object > pay2 = new ArrayList < > ( ) ; pay2 . add ( <int> ) ; pay2 . add ( <int> ) ; expectedPayloadsArray . put ( <str> , pay2 ) ; List < Object > pay3 = new ArrayList < > ( ) ; pay3 . add ( <int> ) ; pay3 . add ( - <int> ) ; expectedPayloadsArray . put ( <str> , pay3 ) ; expectedStartOffsetsArray = new HashMap < > ( ) ; List < Object > starts1 = new ArrayList < > ( ) ; starts1 . add ( <int> ) ; starts1 . add ( <int> ) ; expectedStartOffsetsArray . put ( <str> , starts1 ) ; List < Object > starts2 = new ArrayList < > ( ) ; starts2 . add ( <int> ) ; starts2 . add ( <int> ) ; expectedStartOffsetsArray . put ( <str> , starts2 ) ; List < Object > starts3 = new ArrayList < > ( ) ; starts3 . add ( <int> ) ; starts3 . add ( <int> ) ; expectedStartOffsetsArray . put ( <str> , starts3 ) ; expectedEndOffsetsArray = new HashMap < > ( ) ; List < Object > ends1 = new ArrayList < > ( ) ; ends1 . add ( <int> ) ; ends1 . add ( <int> ) ; expectedEndOffsetsArray . put ( <str> , ends1 ) ; List < Object > ends2 = new ArrayList < > ( ) ; ends2 . add ( <int> ) ; ends2 . add ( <int> ) ; expectedEndOffsetsArray . put ( <str> , ends2 ) ; List < Object > ends3 = new ArrayList < > ( ) ; ends3 . add ( <int> ) ; ends3 . add ( <int> ) ; expectedEndOffsetsArray . put ( <str> , ends3 ) ; XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . setSettings ( Settings . settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) ) ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; ensureGreen ( ) ; } public void testTwoScripts ( ) throws Exception { initTestData ( ) ; Script scriptFieldScript = new Script ( <str> ) ; scriptFieldScript = new Script ( <str> ) ; Script scoreScript = new Script ( <str> ) ; Map < String , Object > expectedResultsField = new HashMap < > ( ) ; expectedResultsField . put ( <str> , <int> ) ; expectedResultsField . put ( <str> , <int> ) ; expectedResultsField . put ( <str> , <int> ) ; Map < String , Object > expectedResultsScore = new HashMap < > ( ) ; expectedResultsScore . put ( <str> , <float> ) ; expectedResultsScore . put ( <str> , <float> ) ; expectedResultsScore . put ( <str> , <float> ) ; checkOnlyFunctionScore ( scoreScript , expectedResultsScore , <int> ) ; checkValueInEachDocWithFunctionScore ( scriptFieldScript , expectedResultsField , scoreScript , expectedResultsScore , <int> ) ; } public void testCallWithDifferentFlagsFails ( ) throws Exception { initTestData ( ) ; Script script = new Script ( <str> ) ; try { client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addScriptField ( <str> , script ) . execute ( ) . actionGet ( ) ; } catch ( SearchPhaseExecutionException e ) { assertThat ( <str> + e . toString ( ) , e . toString ( ) . indexOf ( <str> ) , Matchers . greaterThan ( - <int> ) ) ; } script = new Script ( <str> ) ; client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addScriptField ( <str> , script ) . execute ( ) . actionGet ( ) ; } private void checkOnlyFunctionScore ( Script scoreScript , Map < String , Object > expectedScore , int numExpectedDocs ) { SearchResponse sr = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . functionScoreQuery ( ScoreFunctionBuilders . scriptFunction ( scoreScript ) ) ) . execute ( ) . actionGet ( ) ; assertHitCount ( sr , numExpectedDocs ) ; for ( SearchHit hit : sr . getHits ( ) . getHits ( ) ) { assertThat ( <str> + hit . getId ( ) , ( ( Float ) expectedScore . get ( hit . getId ( ) ) ) . doubleValue ( ) , Matchers . closeTo ( hit . score ( ) , <float> ) ) ; } } public void testDocumentationExample ( ) throws Exception { initTestData ( ) ; Script script = new Script ( <str> + includeAllFlag + <str> ) ; HashMap < String , Object > zeroArray = new HashMap < > ( ) ; zeroArray . put ( <str> , <int> ) ; zeroArray . put ( <str> , <int> ) ; zeroArray . put ( <str> , <int> ) ; checkValueInEachDoc ( script , zeroArray , <int> ) ; script = new Script ( <str> + includeAllFlag + <str> ) ; zeroArray . put ( <str> , <int> ) ; zeroArray . put ( <str> , <int> ) ; zeroArray . put ( <str> , <int> ) ; checkValueInEachDoc ( script , zeroArray , <int> ) ; } public void testIteratorAndRecording ( ) throws Exception { initTestData ( ) ; Script script = createPositionsArrayScriptIterateTwice ( <str> , includeAllFlag , <str> ) ; checkArrayValsInEachDoc ( script , expectedPositionsArray , <int> ) ; script = createPositionsArrayScriptIterateTwice ( <str> , includeAllFlag , <str> ) ; checkArrayValsInEachDoc ( script , expectedStartOffsetsArray , <int> ) ; script = createPositionsArrayScriptIterateTwice ( <str> , includeAllFlag , <str> ) ; checkArrayValsInEachDoc ( script , expectedEndOffsetsArray , <int> ) ; script = createPositionsArrayScriptIterateTwice ( <str> , includeAllFlag , <str> ) ; checkArrayValsInEachDoc ( script , expectedPayloadsArray , <int> ) ; script = createPositionsArrayScriptIterateTwice ( <str> , includeAllWithoutRecordFlag , <str> ) ; checkExceptions ( script ) ; script = createPositionsArrayScriptIterateTwice ( <str> , includeAllWithoutRecordFlag , <str> ) ; checkExceptions ( script ) ; script = createPositionsArrayScriptIterateTwice ( <str> , includeAllWithoutRecordFlag , <str> ) ; checkExceptions ( script ) ; script = createPositionsArrayScriptIterateTwice ( <str> , includeAllWithoutRecordFlag , <str> ) ; checkExceptions ( script ) ; script = createPositionsArrayScriptGetInfoObjectTwice ( <str> , includeAllWithoutRecordFlag , <str> ) ; checkExceptions ( script ) ; script = createPositionsArrayScriptGetInfoObjectTwice ( <str> , includeAllWithoutRecordFlag , <str> ) ; checkExceptions ( script ) ; script = createPositionsArrayScriptGetInfoObjectTwice ( <str> , includeAllWithoutRecordFlag , <str> ) ; checkExceptions ( script ) ; script = createPositionsArrayScriptGetInfoObjectTwice ( <str> , includeAllWithoutRecordFlag , <str> ) ; checkExceptions ( script ) ; } private Script createPositionsArrayScriptGetInfoObjectTwice ( String term , String flags , String what ) { String script = <str> + term + <str> + flags + <str> + what + <str> + term + <str> + flags + <str> + what + <str> ; return new Script ( script ) ; } private Script createPositionsArrayScriptIterateTwice ( String term , String flags , String what ) { String script = <str> + term + <str> + flags + <str> + what + <str> + what + <str> ; return new Script ( script ) ; } private Script createPositionsArrayScript ( String field , String term , String flags , String what ) { String script = <str> + field + <str> + term + <str> + flags + <str> + what + <str> ; return new Script ( script ) ; } private Script createPositionsArrayScriptDefaultGet ( String field , String term , String what ) { String script = <str> + field + <str> + term + <str> + what + <str> ; return new Script ( script ) ; } public void testFlags ( ) throws Exception { initTestData ( ) ; Script script = createPositionsArrayScriptDefaultGet ( <str> , <str> , <str> ) ; script = createPositionsArrayScript ( <str> , <str> , <str> , <str> ) ; checkArrayValsInEachDoc ( script , expectedPositionsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , <str> , <str> ) ; checkArrayValsInEachDoc ( script , expectedPositionsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , <str> , <str> ) ; checkArrayValsInEachDoc ( script , expectedStartOffsetsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , <str> , <str> ) ; checkArrayValsInEachDoc ( script , expectedEndOffsetsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , <str> , <str> ) ; checkArrayValsInEachDoc ( script , expectedPayloadsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , <str> , <str> ) ; checkArrayValsInEachDoc ( script , expectedPositionsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , <str> , <str> ) ; checkArrayValsInEachDoc ( script , expectedStartOffsetsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , <str> , <str> ) ; checkArrayValsInEachDoc ( script , expectedEndOffsetsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , <str> , <str> ) ; checkArrayValsInEachDoc ( script , expectedPayloadsArray , <int> ) ; String allFlags = <str> ; script = createPositionsArrayScript ( <str> , <str> , allFlags , <str> ) ; checkArrayValsInEachDoc ( script , expectedPositionsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , allFlags , <str> ) ; checkArrayValsInEachDoc ( script , expectedStartOffsetsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , allFlags , <str> ) ; checkArrayValsInEachDoc ( script , expectedEndOffsetsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , allFlags , <str> ) ; checkArrayValsInEachDoc ( script , expectedPayloadsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , includeAllWithoutRecordFlag , <str> ) ; checkArrayValsInEachDoc ( script , expectedPositionsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , includeAllWithoutRecordFlag , <str> ) ; checkArrayValsInEachDoc ( script , expectedStartOffsetsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , includeAllWithoutRecordFlag , <str> ) ; checkArrayValsInEachDoc ( script , expectedEndOffsetsArray , <int> ) ; script = createPositionsArrayScript ( <str> , <str> , includeAllWithoutRecordFlag , <str> ) ; checkArrayValsInEachDoc ( script , expectedPayloadsArray , <int> ) ; } private void checkArrayValsInEachDoc ( Script script , HashMap < String , List < Object > > expectedArray , int expectedHitSize ) { SearchResponse sr = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addScriptField ( <str> , script ) . execute ( ) . actionGet ( ) ; assertHitCount ( sr , expectedHitSize ) ; int nullCounter = <int> ; for ( SearchHit hit : sr . getHits ( ) . getHits ( ) ) { Object result = hit . getFields ( ) . get ( <str> ) . getValues ( ) ; Object expectedResult = expectedArray . get ( hit . getId ( ) ) ; assertThat ( <str> + hit . getId ( ) , result , equalTo ( expectedResult ) ) ; if ( expectedResult ! = null ) { nullCounter + + ; } } assertThat ( nullCounter , equalTo ( expectedArray . size ( ) ) ) ; } public void testAllExceptPosAndOffset ( ) throws Exception { XContentBuilder mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . endObject ( ) ; assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , mapping ) . setSettings ( Settings . settingsBuilder ( ) . put ( indexSettings ( ) ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . putArray ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <str> ) . put ( <str> , <int> ) ) ) ; ensureYellow ( ) ; indexRandom ( true , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) , client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) ) ; Script script = new Script ( <str> ) ; checkValueInEachDoc ( <int> , script , <int> ) ; script = new Script ( <str> ) ; checkValueInEachDoc ( <int> , script , <int> ) ; script = new Script ( <str> ) ; checkValueInEachDoc ( <int> , script , <int> ) ; script = new Script ( <str> ) ; checkValueInEachDoc ( <int> , script , <int> ) ; script = new Script ( <str> ) ; checkValueInEachDoc ( <int> , script , <int> ) ; script = new Script ( <str> ) ; checkValueInEachDoc ( <int> , script , <int> ) ; script = new Script ( <str> ) ; checkValueInEachDoc ( <int> , script , <int> ) ; script = new Script ( <str> ) ; Map < String , Object > expectedResults = new HashMap < > ( ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; checkValueInEachDoc ( script , expectedResults , <int> ) ; expectedResults . clear ( ) ; script = new Script ( <str> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; checkValueInEachDoc ( script , expectedResults , <int> ) ; expectedResults . clear ( ) ; script = new Script ( <str> ) ; expectedResults . put ( <str> , <int> l ) ; expectedResults . put ( <str> , <int> l ) ; expectedResults . put ( <str> , <int> l ) ; expectedResults . put ( <str> , <int> l ) ; expectedResults . put ( <str> , <int> l ) ; expectedResults . put ( <str> , <int> l ) ; checkValueInEachDoc ( script , expectedResults , <int> ) ; expectedResults . clear ( ) ; script = new Script ( <str> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; checkValueInEachDoc ( script , expectedResults , <int> ) ; expectedResults . clear ( ) ; script = new Script ( <str> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; expectedResults . put ( <str> , <int> ) ; checkValueInEachDoc ( script , expectedResults , <int> ) ; expectedResults . clear ( ) ; HashMap < String , List < Object > > expectedPayloadsArray = new HashMap < > ( ) ; script = createPositionsArrayScript ( <str> , <str> , includeAllFlag , <str> ) ; float missingValue = - <int> ; List < Object > payloadsFor1 = new ArrayList < > ( ) ; payloadsFor1 . add ( <float> ) ; payloadsFor1 . add ( missingValue ) ; expectedPayloadsArray . put ( <str> , payloadsFor1 ) ; List < Object > payloadsFor2 = new ArrayList < > ( ) ; payloadsFor2 . add ( <float> ) ; payloadsFor2 . add ( missingValue ) ; expectedPayloadsArray . put ( <str> , payloadsFor2 ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; checkArrayValsInEachDoc ( script , expectedPayloadsArray , <int> ) ; expectedPayloadsArray . clear ( ) ; payloadsFor1 . clear ( ) ; payloadsFor2 . clear ( ) ; script = createPositionsArrayScript ( <str> , <str> , includeAllFlag , <str> ) ; payloadsFor1 . add ( <str> ) ; payloadsFor1 . add ( null ) ; expectedPayloadsArray . put ( <str> , payloadsFor1 ) ; payloadsFor2 . add ( <str> ) ; payloadsFor2 . add ( null ) ; expectedPayloadsArray . put ( <str> , payloadsFor2 ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; checkArrayValsInEachDoc ( script , expectedPayloadsArray , <int> ) ; expectedPayloadsArray . clear ( ) ; payloadsFor1 . clear ( ) ; payloadsFor2 . clear ( ) ; script = createPositionsArrayScript ( <str> , <str> , includeAllFlag , <str> ) ; payloadsFor1 = new ArrayList < > ( ) ; payloadsFor1 . add ( <int> ) ; expectedPayloadsArray . put ( <str> , payloadsFor1 ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; expectedPayloadsArray . put ( <str> , new ArrayList < > ( ) ) ; checkArrayValsInEachDoc ( script , expectedPayloadsArray , <int> ) ; } private void checkExceptions ( Script script ) { try { SearchResponse sr = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addScriptField ( <str> , script ) . execute ( ) . actionGet ( ) ; assertThat ( sr . getHits ( ) . hits ( ) . length , equalTo ( <int> ) ) ; ShardSearchFailure [ ] shardFails = sr . getShardFailures ( ) ; for ( ShardSearchFailure fail : shardFails ) { assertThat ( fail . reason ( ) . indexOf ( <str> ) , Matchers . greaterThan ( - <int> ) ) ; } } catch ( SearchPhaseExecutionException ex ) { assertThat ( <str> + ex . toString ( ) , ex . toString ( ) . indexOf ( <str> ) , Matchers . greaterThan ( - <int> ) ) ; } } private void checkValueInEachDocWithFunctionScore ( Script fieldScript , Map < String , Object > expectedFieldVals , Script scoreScript , Map < String , Object > expectedScore , int numExpectedDocs ) { SearchResponse sr = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . functionScoreQuery ( ScoreFunctionBuilders . scriptFunction ( scoreScript ) ) ) . addScriptField ( <str> , fieldScript ) . execute ( ) . actionGet ( ) ; assertHitCount ( sr , numExpectedDocs ) ; for ( SearchHit hit : sr . getHits ( ) . getHits ( ) ) { Object result = hit . getFields ( ) . get ( <str> ) . getValues ( ) . get ( <int> ) ; Object expectedResult = expectedFieldVals . get ( hit . getId ( ) ) ; assertThat ( <str> + hit . getId ( ) , result , equalTo ( expectedResult ) ) ; assertThat ( <str> + hit . getId ( ) , ( ( Float ) expectedScore . get ( hit . getId ( ) ) ) . doubleValue ( ) , Matchers . closeTo ( hit . score ( ) , <float> ) ) ; } } private void checkValueInEachDoc ( Script script , Map < String , Object > expectedResults , int numExpectedDocs ) { SearchResponse sr = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addScriptField ( <str> , script ) . execute ( ) . actionGet ( ) ; assertHitCount ( sr , numExpectedDocs ) ; for ( SearchHit hit : sr . getHits ( ) . getHits ( ) ) { Object result = hit . getFields ( ) . get ( <str> ) . getValues ( ) . get ( <int> ) ; Object expectedResult = expectedResults . get ( hit . getId ( ) ) ; assertThat ( <str> + hit . getId ( ) , result , equalTo ( expectedResult ) ) ; } } private void checkValueInEachDoc ( int value , Script script , int numExpectedDocs ) { SearchResponse sr = client ( ) . prepareSearch ( <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . addScriptField ( <str> , script ) . execute ( ) . actionGet ( ) ; assertHitCount ( sr , numExpectedDocs ) ; for ( SearchHit hit : sr . getHits ( ) . getHits ( ) ) { Object result = hit . getFields ( ) . get ( <str> ) . getValues ( ) . get ( <int> ) ; if ( result instanceof Integer ) { assertThat ( ( Integer ) result , equalTo ( value ) ) ; } else if ( result instanceof Long ) { assertThat ( ( ( Long ) result ) . intValue ( ) , equalTo ( value ) ) ; } else { fail ( ) ; } } } } 

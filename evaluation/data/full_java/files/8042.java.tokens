package org . elasticsearch . gateway ; import org . elasticsearch . action . admin . cluster . health . ClusterHealthResponse ; import org . elasticsearch . action . admin . cluster . state . ClusterStateResponse ; import org . elasticsearch . action . get . GetResponse ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MappingMetaData ; import org . elasticsearch . cluster . routing . ShardRoutingState ; import org . elasticsearch . common . Priority ; import org . elasticsearch . common . logging . ESLogger ; import org . elasticsearch . common . logging . Loggers ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . indices . IndexClosedException ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import org . elasticsearch . test . InternalTestCluster . RestartCallback ; import static org . elasticsearch . common . settings . Settings . settingsBuilder ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertHitCount ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . nullValue ; @ClusterScope ( scope = Scope . TEST , numDataNodes = <int> ) public class GatewayIndexStateIT extends ESIntegTestCase { private final ESLogger logger = Loggers . getLogger ( GatewayIndexStateIT . class ) ; public void testMappingMetaDataParsed ( ) throws Exception { logger . info ( <str> ) ; internalCluster ( ) . startNode ( ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; ensureYellow ( ) ; logger . info ( <str> ) ; MappingMetaData mappingMd = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . metaData ( ) . index ( <str> ) . mapping ( <str> ) ; assertThat ( mappingMd . routing ( ) . required ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; internalCluster ( ) . fullRestart ( ) ; logger . info ( <str> ) ; ensureYellow ( ) ; logger . info ( <str> ) ; mappingMd = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) . getState ( ) . metaData ( ) . index ( <str> ) . mapping ( <str> ) ; assertThat ( mappingMd . routing ( ) . required ( ) , equalTo ( true ) ) ; } public void testSimpleOpenClose ( ) throws Exception { logger . info ( <str> ) ; internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; logger . info ( <str> ) ; createIndex ( <str> ) ; NumShards test = getNumShards ( <str> ) ; logger . info ( <str> ) ; ensureGreen ( ) ; ClusterStateResponse stateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) ; assertThat ( stateResponse . getState ( ) . metaData ( ) . index ( <str> ) . getState ( ) , equalTo ( IndexMetaData . State . OPEN ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) . shards ( ) . size ( ) , equalTo ( test . numPrimaries ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) . shardsWithState ( ShardRoutingState . STARTED ) . size ( ) , equalTo ( test . totalNumShards ) ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . get ( ) ; stateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) ; assertThat ( stateResponse . getState ( ) . metaData ( ) . index ( <str> ) . getState ( ) , equalTo ( IndexMetaData . State . CLOSE ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) , nullValue ( ) ) ; logger . info ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; try { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setTimeout ( <str> ) . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( IndexClosedException e ) { } logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; ensureGreen ( ) ; stateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) ; assertThat ( stateResponse . getState ( ) . metaData ( ) . index ( <str> ) . getState ( ) , equalTo ( IndexMetaData . State . OPEN ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) . shards ( ) . size ( ) , equalTo ( test . numPrimaries ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) . shardsWithState ( ShardRoutingState . STARTED ) . size ( ) , equalTo ( test . totalNumShards ) ) ; logger . info ( <str> ) ; GetResponse getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; stateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) ; assertThat ( stateResponse . getState ( ) . metaData ( ) . index ( <str> ) . getState ( ) , equalTo ( IndexMetaData . State . CLOSE ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) , nullValue ( ) ) ; logger . info ( <str> ) ; internalCluster ( ) . fullRestart ( ) ; logger . info ( <str> ) ; ensureGreen ( ) ; stateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) ; assertThat ( stateResponse . getState ( ) . metaData ( ) . index ( <str> ) . getState ( ) , equalTo ( IndexMetaData . State . CLOSE ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) , nullValue ( ) ) ; logger . info ( <str> ) ; try { client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setTimeout ( <str> ) . execute ( ) . actionGet ( ) ; fail ( ) ; } catch ( IndexClosedException e ) { } logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; ensureGreen ( ) ; stateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) ; assertThat ( stateResponse . getState ( ) . metaData ( ) . index ( <str> ) . getState ( ) , equalTo ( IndexMetaData . State . OPEN ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) . shards ( ) . size ( ) , equalTo ( test . numPrimaries ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) . shardsWithState ( ShardRoutingState . STARTED ) . size ( ) , equalTo ( test . totalNumShards ) ) ; logger . info ( <str> ) ; getResponse = client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) ; assertThat ( getResponse . isExists ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; } public void testJustMasterNode ( ) throws Exception { logger . info ( <str> ) ; logger . info ( <str> ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . build ( ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; internalCluster ( ) . closeNonSharedNodes ( false ) ; logger . info ( <str> ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . build ( ) ) ; logger . info ( <str> ) ; ClusterHealthResponse health = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setIndices ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( health . isTimedOut ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; ClusterStateResponse clusterStateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . setIndices ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( clusterStateResponse . getState ( ) . metaData ( ) . hasIndex ( <str> ) , equalTo ( true ) ) ; } public void testJustMasterNodeAndJustDataNode ( ) throws Exception { logger . info ( <str> ) ; logger . info ( <str> ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . build ( ) ) ; internalCluster ( ) . startNode ( settingsBuilder ( ) . put ( <str> , false ) . build ( ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; ensureYellow ( ) ; client ( ) . prepareIndex ( <str> , <str> ) . setSource ( <str> , <str> ) . setTimeout ( <str> ) . execute ( ) . actionGet ( ) ; } public void testTwoNodesSingleDoc ( ) throws Exception { logger . info ( <str> ) ; logger . info ( <str> ) ; internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; ClusterHealthResponse health = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForNodes ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( health . isTimedOut ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareClose ( <str> ) . execute ( ) . actionGet ( ) ; ClusterStateResponse stateResponse = client ( ) . admin ( ) . cluster ( ) . prepareState ( ) . execute ( ) . actionGet ( ) ; assertThat ( stateResponse . getState ( ) . metaData ( ) . index ( <str> ) . getState ( ) , equalTo ( IndexMetaData . State . CLOSE ) ) ; assertThat ( stateResponse . getState ( ) . routingTable ( ) . index ( <str> ) , nullValue ( ) ) ; logger . info ( <str> ) ; client ( ) . admin ( ) . indices ( ) . prepareOpen ( <str> ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; health = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForNodes ( <str> ) . execute ( ) . actionGet ( ) ; assertThat ( health . isTimedOut ( ) , equalTo ( false ) ) ; logger . info ( <str> ) ; assertHitCount ( client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } } public void testDanglingIndicesConflictWithAlias ( ) throws Exception { logger . info ( <str> ) ; internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; internalCluster ( ) . stopRandomNonMasterNode ( ) ; assertFalse ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForNodes ( <str> ) . get ( ) . isTimedOut ( ) ) ; logger . info ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareDelete ( <str> ) ) ; index ( <str> , <str> , <str> , <str> ) ; logger . info ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareAliases ( ) . addAlias ( <str> , <str> ) ) ; logger . info ( <str> ) ; internalCluster ( ) . startNode ( ) ; ensureGreen ( ) ; assertFalse ( client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForRelocatingShards ( <int> ) . setWaitForEvents ( Priority . LANGUID ) . get ( ) . isTimedOut ( ) ) ; logger . info ( <str> ) ; assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareAliases ( ) . removeAlias ( <str> , <str> ) ) ; logger . info ( <str> ) ; assertBusy ( new Runnable ( ) { @Override public void run ( ) { assertTrue ( client ( ) . admin ( ) . indices ( ) . prepareExists ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) ) ; } } ) ; ensureGreen ( ) ; logger . info ( <str> ) ; assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } public void testDanglingIndices ( ) throws Exception { logger . info ( <str> ) ; final String node_1 = internalCluster ( ) . startNodesAsync ( <int> ) . get ( ) . get ( <int> ) ; logger . info ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . setRefresh ( true ) . execute ( ) . actionGet ( ) ; logger . info ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; for ( int i = <int> ; i < <int> ; i + + ) { assertHitCount ( client ( ) . prepareSearch ( ) . setQuery ( matchAllQuery ( ) ) . get ( ) , <int> ) ; } assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; final Gateway gateway1 = internalCluster ( ) . getInstance ( Gateway . class , node_1 ) ; internalCluster ( ) . fullRestart ( new RestartCallback ( ) { @Override public Settings onNodeStopped ( String nodeName ) throws Exception { if ( node_1 . equals ( nodeName ) ) { logger . info ( <str> ) ; gateway1 . reset ( ) ; } return null ; } } ) ; logger . info ( <str> ) ; ensureGreen ( ) ; long time = System . currentTimeMillis ( ) ; while ( ( System . currentTimeMillis ( ) - time ) < TimeValue . timeValueSeconds ( <int> ) . millis ( ) ) { if ( client ( ) . admin ( ) . indices ( ) . prepareExists ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) ) { break ; } } logger . info ( <str> ) ; assertThat ( client ( ) . admin ( ) . indices ( ) . prepareExists ( <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; logger . info ( <str> ) ; ensureGreen ( ) ; logger . info ( <str> ) ; assertThat ( client ( ) . prepareGet ( <str> , <str> , <str> ) . execute ( ) . actionGet ( ) . isExists ( ) , equalTo ( true ) ) ; } } 

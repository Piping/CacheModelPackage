package org . gradle . util ; import org . gradle . internal . SystemProperties ; import org . gradle . internal . io . TextStream ; import java . io . IOException ; import java . io . OutputStream ; public class LineBufferingOutputStream extends OutputStream { private boolean hasBeenClosed ; private final byte [ ] lineSeparator ; private final int bufferIncrement ; private final TextStream handler ; private byte [ ] buf ; private int count ; public LineBufferingOutputStream ( TextStream handler ) { this ( handler , <int> ) ; } public LineBufferingOutputStream ( TextStream handler , int bufferLength ) { this . handler = handler ; bufferIncrement = bufferLength ; buf = new byte [ bufferLength ] ; count = <int> ; lineSeparator = SystemProperties . getInstance ( ) . getLineSeparator ( ) . getBytes ( ) ; } public void close ( ) throws IOException { hasBeenClosed = true ; flush ( ) ; handler . endOfStream ( null ) ; } public void write ( final int b ) throws IOException { if ( hasBeenClosed ) { throw new IOException ( <str> ) ; } if ( count = = buf . length ) { final int newBufLength = buf . length + bufferIncrement ; final byte [ ] newBuf = new byte [ newBufLength ] ; System . arraycopy ( buf , <int> , newBuf , <int> , buf . length ) ; buf = newBuf ; } buf [ count ] = ( byte ) b ; count + + ; if ( endsWithLineSeparator ( ) ) { flush ( ) ; } } private boolean endsWithLineSeparator ( ) { if ( count < lineSeparator . length ) { return false ; } for ( int i = <int> ; i < lineSeparator . length ; i + + ) { if ( buf [ count - lineSeparator . length + i ] ! = lineSeparator [ i ] ) { return false ; } } return true ; } public void flush ( ) { if ( count ! = <int> ) { handler . text ( new String ( buf , <int> , count ) ) ; } reset ( ) ; } private void reset ( ) { if ( buf . length > bufferIncrement ) { buf = new byte [ bufferIncrement ] ; } count = <int> ; } } 

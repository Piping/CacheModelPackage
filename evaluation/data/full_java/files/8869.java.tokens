package org . elasticsearch . cloud . azure ; import com . microsoft . azure . storage . StorageException ; import com . microsoft . azure . storage . LocationMode ; import org . elasticsearch . cloud . azure . storage . AzureStorageService ; import org . elasticsearch . cloud . azure . storage . AzureStorageService . Storage ; import org . elasticsearch . cloud . azure . storage . AzureStorageServiceMock ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . plugin . repository . azure . AzureRepositoryPlugin ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . repositories . RepositoryMissingException ; import org . elasticsearch . test . store . MockFSDirectoryService ; import org . junit . After ; import org . junit . Before ; import java . net . URISyntaxException ; import java . util . Collection ; public abstract class AbstractAzureRepositoryServiceTestCase extends AbstractAzureTestCase { public static class TestPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( AzureRepositoryModule azureRepositoryModule ) { AzureRepositoryModule . storageServiceImpl = AzureStorageServiceMock . class ; } } protected String basePath ; public AbstractAzureRepositoryServiceTestCase ( String basePath ) { this . basePath = basePath ; } public static void wipeRepositories ( String . . . repositories ) { if ( repositories . length = = <int> ) { repositories = new String [ ] { <str> } ; } for ( String repository : repositories ) { try { client ( ) . admin ( ) . cluster ( ) . prepareDeleteRepository ( repository ) . execute ( ) . actionGet ( ) ; } catch ( RepositoryMissingException ex ) { } } } @Override protected Settings nodeSettings ( int nodeOrdinal ) { Settings . Builder builder = Settings . settingsBuilder ( ) . put ( Storage . CONTAINER , <str> ) ; builder . put ( Storage . ACCOUNT , <str> ) . put ( Storage . KEY , <str> ) ; return builder . build ( ) ; } @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( AzureRepositoryPlugin . class , TestPlugin . class ) ; } @Override public Settings indexSettings ( ) { return Settings . builder ( ) . put ( super . indexSettings ( ) ) . put ( MockFSDirectoryService . RANDOM_PREVENT_DOUBLE_WRITE , false ) . put ( MockFSDirectoryService . RANDOM_NO_DELETE_OPEN_FILE , false ) . put ( IndexMetaData . SETTING_NUMBER_OF_REPLICAS , <int> ) . build ( ) ; } @Before @After public final void wipe ( ) throws StorageException , URISyntaxException { wipeRepositories ( ) ; cleanRepositoryFiles ( basePath ) ; } public void cleanRepositoryFiles ( String path ) throws StorageException , URISyntaxException { String container = internalCluster ( ) . getInstance ( Settings . class ) . get ( <str> ) ; logger . info ( <str> , container ) ; AzureStorageService client = internalCluster ( ) . getInstance ( AzureStorageService . class ) ; client . deleteFiles ( null , LocationMode . PRIMARY_ONLY , container , path ) ; } } 

package org . apache . cassandra . stress . settings ; import org . apache . cassandra . stress . util . MultiPrintStream ; import java . io . * ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; public class SettingsLog implements Serializable { public static enum Level { MINIMAL , NORMAL , VERBOSE } public final boolean noSummary ; public final File file ; public final int intervalMillis ; public final Level level ; public SettingsLog ( Options options ) { noSummary = options . noSummmary . setByUser ( ) ; if ( options . outputFile . setByUser ( ) ) file = new File ( options . outputFile . value ( ) ) ; else file = null ; String interval = options . interval . value ( ) ; if ( interval . endsWith ( <str> ) ) intervalMillis = Integer . parseInt ( interval . substring ( <int> , interval . length ( ) - <int> ) ) ; else if ( interval . endsWith ( <str> ) ) intervalMillis = <int> * Integer . parseInt ( interval . substring ( <int> , interval . length ( ) - <int> ) ) ; else intervalMillis = <int> * Integer . parseInt ( interval ) ; if ( intervalMillis < = <int> ) throw new IllegalArgumentException ( <str> ) ; level = Level . valueOf ( options . level . value ( ) . toUpperCase ( ) ) ; } public MultiPrintStream getOutput ( ) throws FileNotFoundException { MultiPrintStream stream = new MultiPrintStream ( new PrintStream ( System . out ) ) ; if ( file ! = null ) stream . addStream ( new PrintStream ( file ) ) ; return stream ; } public static final class Options extends GroupedOptions { final OptionSimple noSummmary = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple outputFile = new OptionSimple ( <str> , <str> , null , <str> , false ) ; final OptionSimple interval = new OptionSimple ( <str> , <str> , <str> , <str> , false ) ; final OptionSimple level = new OptionSimple ( <str> , <str> , <str> , <str> , false ) ; @Override public List < ? extends Option > options ( ) { return Arrays . asList ( level , noSummmary , outputFile , interval ) ; } } public static SettingsLog get ( Map < String , String [ ] > clArgs ) { String [ ] params = clArgs . remove ( <str> ) ; if ( params = = null ) return new SettingsLog ( new Options ( ) ) ; GroupedOptions options = GroupedOptions . select ( params , new Options ( ) ) ; if ( options = = null ) { printHelp ( ) ; System . out . println ( <str> ) ; System . exit ( <int> ) ; } return new SettingsLog ( ( Options ) options ) ; } public static void printHelp ( ) { GroupedOptions . printOptions ( System . out , <str> , new Options ( ) ) ; } public static Runnable helpPrinter ( ) { return new Runnable ( ) { @Override public void run ( ) { printHelp ( ) ; } } ; } } 

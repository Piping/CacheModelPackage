package org . apache . cassandra . cql3 ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Random ; import java . util . Set ; import org . junit . Test ; public class ManyRowsTest extends CQLTester { @Test public void testLargeCount ( ) throws Throwable { createTable ( <str> ) ; for ( int k = <int> ; k < <int> ; k + + ) execute ( <str> , k ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; execute ( <str> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; execute ( <str> , <int> ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; for ( int k = <int> ; k < <int> ; k + + ) execute ( <str> , k ) ; assertRows ( execute ( <str> ) , row ( <int> ) ) ; } @Test public void testLargeClustering ( ) throws Throwable { createTable ( <str> ) ; execute ( <str> , <int> , <int> , <int> ) ; List < Integer > inValues = new ArrayList ( <int> ) ; for ( int i = <int> ; i < <int> ; i + + ) inValues . add ( i ) ; assertRows ( execute ( <str> , <int> , inValues ) , row ( <int> , <int> , <int> ) ) ; Random rnd = new Random ( ) ; Set < Integer > clusteringValues = new HashSet < > ( ) ; for ( int i = <int> ; i < <int> ; i + + ) clusteringValues . add ( rnd . nextInt ( <int> ) ) ; clusteringValues . add ( <int> ) ; for ( int i : clusteringValues ) execute ( <str> , <int> , i , i ) ; assertRowCount ( execute ( <str> , <int> , inValues ) , clusteringValues . size ( ) ) ; } } 

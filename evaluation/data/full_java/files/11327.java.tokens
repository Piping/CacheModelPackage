package org . gradle . api . internal . artifacts ; import groovy . lang . Closure ; import org . gradle . api . Action ; import org . gradle . api . Namer ; import org . gradle . api . UnknownDomainObjectException ; import org . gradle . api . artifacts . ArtifactRepositoryContainer ; import org . gradle . api . artifacts . UnknownRepositoryException ; import org . gradle . api . artifacts . repositories . ArtifactRepository ; import org . gradle . api . internal . DefaultNamedDomainObjectList ; import org . gradle . api . internal . artifacts . repositories . ArtifactRepositoryInternal ; import org . gradle . internal . Actions ; import org . gradle . internal . reflect . Instantiator ; import org . gradle . util . ConfigureUtil ; import org . gradle . util . GUtil ; public class DefaultArtifactRepositoryContainer extends DefaultNamedDomainObjectList < ArtifactRepository > implements ArtifactRepositoryContainer { private final Action < ArtifactRepository > addLastAction = new Action < ArtifactRepository > ( ) { public void execute ( ArtifactRepository repository ) { DefaultArtifactRepositoryContainer . super . add ( repository ) ; } } ; public DefaultArtifactRepositoryContainer ( Instantiator instantiator ) { super ( ArtifactRepository . class , instantiator , new RepositoryNamer ( ) ) ; whenObjectAdded ( new Action < ArtifactRepository > ( ) { public void execute ( ArtifactRepository artifactRepository ) { if ( artifactRepository instanceof ArtifactRepositoryInternal ) { ArtifactRepositoryInternal repository = ( ArtifactRepositoryInternal ) artifactRepository ; repository . onAddToContainer ( DefaultArtifactRepositoryContainer . this ) ; } } } ) ; } private static class RepositoryNamer implements Namer < ArtifactRepository > { public String determineName ( ArtifactRepository r ) { return r . getName ( ) ; } } @Override public String getTypeDisplayName ( ) { return <str> ; } public DefaultArtifactRepositoryContainer configure ( Closure closure ) { return ConfigureUtil . configure ( closure , this , false ) ; } public void addFirst ( ArtifactRepository repository ) { add ( <int> , repository ) ; } public void addLast ( ArtifactRepository repository ) { add ( repository ) ; } @Override protected UnknownDomainObjectException createNotFoundException ( String name ) { return new UnknownRepositoryException ( String . format ( <str> , name ) ) ; } public < T extends ArtifactRepository > T addRepository ( T repository , String defaultName ) { return addRepository ( repository , defaultName , Actions . doNothing ( ) ) ; } public < T extends ArtifactRepository > T addRepository ( T repository , String defaultName , Action < ? super T > configureAction ) { configureAction . execute ( repository ) ; return addWithUniqueName ( repository , defaultName , addLastAction ) ; } private < T extends ArtifactRepository > T addWithUniqueName ( T repository , String defaultName , Action < ? super T > insertion ) { String repositoryName = repository . getName ( ) ; if ( ! GUtil . isTrue ( repositoryName ) ) { repository . setName ( uniquifyName ( defaultName ) ) ; } else { repository . setName ( uniquifyName ( repositoryName ) ) ; } assertCanAdd ( repository . getName ( ) ) ; insertion . execute ( repository ) ; return repository ; } private String uniquifyName ( String proposedName ) { if ( findByName ( proposedName ) = = null ) { return proposedName ; } for ( int index = <int> ; true ; index + + ) { String candidate = String . format ( <str> , proposedName , index ) ; if ( findByName ( candidate ) = = null ) { return candidate ; } } } } 

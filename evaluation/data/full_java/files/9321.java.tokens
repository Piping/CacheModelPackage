package com . google . common . collect ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import java . io . Serializable ; import java . util . Iterator ; @GwtCompatible ( serializable = true ) @SuppressWarnings ( <str> ) final class ReverseNaturalOrdering extends Ordering < Comparable > implements Serializable { static final ReverseNaturalOrdering INSTANCE = new ReverseNaturalOrdering ( ) ; @Override public int compare ( Comparable left , Comparable right ) { checkNotNull ( left ) ; if ( left = = right ) { return <int> ; } return right . compareTo ( left ) ; } @Override public < S extends Comparable > Ordering < S > reverse ( ) { return Ordering . natural ( ) ; } @Override public < E extends Comparable > E min ( E a , E b ) { return NaturalOrdering . INSTANCE . max ( a , b ) ; } @Override public < E extends Comparable > E min ( E a , E b , E c , E . . . rest ) { return NaturalOrdering . INSTANCE . max ( a , b , c , rest ) ; } @Override public < E extends Comparable > E min ( Iterator < E > iterator ) { return NaturalOrdering . INSTANCE . max ( iterator ) ; } @Override public < E extends Comparable > E min ( Iterable < E > iterable ) { return NaturalOrdering . INSTANCE . max ( iterable ) ; } @Override public < E extends Comparable > E max ( E a , E b ) { return NaturalOrdering . INSTANCE . min ( a , b ) ; } @Override public < E extends Comparable > E max ( E a , E b , E c , E . . . rest ) { return NaturalOrdering . INSTANCE . min ( a , b , c , rest ) ; } @Override public < E extends Comparable > E max ( Iterator < E > iterator ) { return NaturalOrdering . INSTANCE . min ( iterator ) ; } @Override public < E extends Comparable > E max ( Iterable < E > iterable ) { return NaturalOrdering . INSTANCE . min ( iterable ) ; } private Object readResolve ( ) { return INSTANCE ; } @Override public String toString ( ) { return <str> ; } private ReverseNaturalOrdering ( ) { } private static final long serialVersionUID = <int> ; } 

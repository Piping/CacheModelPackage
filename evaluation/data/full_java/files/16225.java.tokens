package org . gradle . gradleplugin . foundation . filters ; import org . gradle . foundation . ProjectView ; import org . gradle . foundation . TaskView ; import org . gradle . gradleplugin . foundation . settings . SettingsNode ; import org . gradle . gradleplugin . foundation . settings . SettingsSerializable ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class BasicProjectAndTaskFilter implements ProjectAndTaskFilter , SettingsSerializable { private static final String BASIC_PROJECT_AND_TASK_FILTER = <str> ; private static final String FILTERED_OUT_PROJECTS = <str> ; private static final String FILTERED_OUT_TASKS = <str> ; private static final String FILTER_OUT_TASKS_WITH_NO_DESCRIPTION = <str> ; private static final String ITEM = <str> ; private static final String VALUE = <str> ; private List < String > filteredOutProjectNames = new ArrayList < String > ( ) ; private List < String > filteredOutTaskNames = new ArrayList < String > ( ) ; private boolean filterOutTasksWithNoDescription ; public BasicProjectAndTaskFilter ( List < String > filteredOutProjectNames , List < String > filteredOutTaskNames , boolean filterOutTasksWithNoDescription ) { this . filterOutTasksWithNoDescription = filterOutTasksWithNoDescription ; this . filteredOutProjectNames . addAll ( filteredOutProjectNames ) ; this . filteredOutTaskNames . addAll ( filteredOutTaskNames ) ; } public BasicProjectAndTaskFilter ( ) { } public List < String > getFilteredOutProjectNames ( ) { return filteredOutProjectNames ; } void setFilteredOutProjectNames ( List < String > filteredOutProjectNames ) { this . filteredOutProjectNames = filteredOutProjectNames ; } public List < String > getFilteredOutTaskNames ( ) { return filteredOutTaskNames ; } void setFilteredOutTaskNames ( List < String > filteredOutTaskNames ) { this . filteredOutTaskNames = filteredOutTaskNames ; } public boolean filterOutTasksWithNoDescription ( ) { return filterOutTasksWithNoDescription ; } void setFilterOutTasksWithNoDescription ( boolean filterOutTasksWithNoDescription ) { this . filterOutTasksWithNoDescription = filterOutTasksWithNoDescription ; } public boolean doesAllowProject ( ProjectView project ) { return ! filteredOutProjectNames . contains ( project . getName ( ) ) ; } public boolean doesAllowTask ( TaskView task ) { return doesAllowTask ( task , filteredOutTaskNames , filterOutTasksWithNoDescription ) ; } public static boolean doesAllowTask ( TaskView task , List < String > filteredOutTasks , boolean filterOutTasksWithNoDescription ) { if ( filterOutTasksWithNoDescription ) { if ( ! task . hasDescription ( ) ) { return false ; } } return ! filteredOutTasks . contains ( task . getName ( ) ) ; } public void serializeOut ( SettingsNode settings ) { SettingsNode rootNode = settings . addChildIfNotPresent ( BASIC_PROJECT_AND_TASK_FILTER ) ; rootNode . removeAllChildren ( ) ; rootNode . setValueOfChildAsBoolean ( FILTER_OUT_TASKS_WITH_NO_DESCRIPTION , filterOutTasksWithNoDescription ) ; SettingsNode filteredOutProjectsNode = rootNode . addChild ( FILTERED_OUT_PROJECTS ) ; serializeOutStringList ( filteredOutProjectsNode , filteredOutProjectNames ) ; SettingsNode filteredOutTasksNode = rootNode . addChild ( FILTERED_OUT_TASKS ) ; serializeOutStringList ( filteredOutTasksNode , filteredOutTaskNames ) ; } private void serializeOutStringList ( SettingsNode parentNode , List < String > strings ) { Iterator < String > iterator = strings . iterator ( ) ; while ( iterator . hasNext ( ) ) { String item = iterator . next ( ) ; SettingsNode itemNode = parentNode . addChild ( ITEM ) ; itemNode . setValue ( item ) ; } } public void serializeIn ( SettingsNode settings ) { filteredOutProjectNames . clear ( ) ; filteredOutTaskNames . clear ( ) ; SettingsNode rootNode = settings . getChildNode ( BASIC_PROJECT_AND_TASK_FILTER ) ; if ( rootNode = = null ) { return ; } filterOutTasksWithNoDescription = rootNode . getValueOfChildAsBoolean ( FILTER_OUT_TASKS_WITH_NO_DESCRIPTION , filterOutTasksWithNoDescription ) ; SettingsNode filteredOutProjectsNode = rootNode . getChildNode ( FILTERED_OUT_PROJECTS ) ; if ( filteredOutProjectsNode ! = null ) { serializeInStringList ( filteredOutProjectsNode , filteredOutProjectNames ) ; } SettingsNode filteredOutTasksNode = rootNode . getChildNode ( FILTERED_OUT_TASKS ) ; if ( filteredOutTasksNode ! = null ) { serializeInStringList ( filteredOutTasksNode , filteredOutTaskNames ) ; } } private void serializeInStringList ( SettingsNode parentNode , List < String > strings ) { Iterator < SettingsNode > iterator = parentNode . getChildNodes ( ITEM ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { SettingsNode itemNode = iterator . next ( ) ; String item = itemNode . getValue ( ) ; if ( item ! = null ) { strings . add ( item ) ; } } } } 

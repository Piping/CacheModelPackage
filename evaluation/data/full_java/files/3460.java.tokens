package org . nd4j . linalg . lossfunctions ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . buffer . DataBuffer . Type ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . LossFunction ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import static org . junit . Assert . assertEquals ; public class LossFunctionTests extends BaseNd4jTest { private static Logger log = LoggerFactory . getLogger ( LossFunctionTests . class ) ; public LossFunctionTests ( ) { } public LossFunctionTests ( String name ) { super ( name ) ; } public LossFunctionTests ( Nd4jBackend backend ) { super ( backend ) ; } public LossFunctionTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } @Test public void testCreateLossFunction ( ) { LossFunction l = Nd4j . getOpFactory ( ) . createLossFunction ( new TestLossFunction ( ) . name ( ) , Nd4j . create ( <int> ) , Nd4j . create ( <int> ) ) ; assertEquals ( l . getClass ( ) , TestLossFunction . class ) ; } @Test public void testRMseXent ( ) { INDArray in = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; INDArray out = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; double diff = LossFunctions . score ( in , LossFunctions . LossFunction . RMSE_XENT , out , <int> , false ) ; assertEquals ( getFailureMessage ( ) , <int> , diff , <float> ) ; } @Test public void testMcXent ( ) { INDArray in = Nd4j . create ( new float [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; INDArray out = Nd4j . create ( new float [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; LossFunctions . score ( in , LossFunctions . LossFunction . MCXENT , out , <int> , false ) ; } @Test public void testNegativeLogLikelihood ( ) { Nd4j . dtype = Type . DOUBLE ; INDArray softmax = Nd4j . create ( new double [ ] [ ] { { <float> , <float> } , { <float> , <float> } } ) ; INDArray trueLabels = Nd4j . create ( new double [ ] [ ] { { <int> , <int> } , { <int> , <int> } } ) ; double score = LossFunctions . score ( trueLabels , LossFunctions . LossFunction . NEGATIVELOGLIKELIHOOD , softmax , <int> , false ) ; assertEquals ( getFailureMessage ( ) , <float> , score , <float> ) ; INDArray softmax2 = Nd4j . create ( new double [ ] [ ] { { <float> , <float> , <float> } , { <float> , <float> , <float> } } ) ; INDArray trueLabels2 = Nd4j . create ( new double [ ] [ ] { { <int> , <int> , <int> } , { <int> , <int> , <int> } } ) ; double score2 = LossFunctions . score ( trueLabels2 , LossFunctions . LossFunction . NEGATIVELOGLIKELIHOOD , softmax2 , <int> , false ) ; assertEquals ( getFailureMessage ( ) , <float> , score2 , <float> ) ; } @Override public char ordering ( ) { return <str> ; } } 

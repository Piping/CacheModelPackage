package org . elasticsearch . threadpool ; import org . elasticsearch . common . io . stream . BytesStreamOutput ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . test . ESTestCase ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import static org . hamcrest . Matchers . contains ; import static org . hamcrest . Matchers . equalTo ; public class ThreadPoolStatsTests extends ESTestCase { public void testThreadPoolStatsSort ( ) throws IOException { List < ThreadPoolStats . Stats > stats = new ArrayList < > ( ) ; stats . add ( new ThreadPoolStats . Stats ( <str> , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( <str> , <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( <str> , <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( <str> , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( <str> , <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( <str> , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( <str> , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; List < ThreadPoolStats . Stats > copy = new ArrayList < > ( stats ) ; Collections . sort ( copy ) ; List < String > names = new ArrayList < > ( copy . size ( ) ) ; for ( ThreadPoolStats . Stats stat : copy ) { names . add ( stat . getName ( ) ) ; } assertThat ( names , contains ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ) ; List < Integer > threads = new ArrayList < > ( copy . size ( ) ) ; for ( ThreadPoolStats . Stats stat : copy ) { threads . add ( stat . getThreads ( ) ) ; } assertThat ( threads , contains ( - <int> , - <int> , <int> , <int> , <int> , - <int> , - <int> ) ) ; } public void testThreadPoolStatsToXContent ( ) throws IOException { try ( BytesStreamOutput os = new BytesStreamOutput ( ) ) { List < ThreadPoolStats . Stats > stats = new ArrayList < > ( ) ; stats . add ( new ThreadPoolStats . Stats ( ThreadPool . Names . SUGGEST , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( ThreadPool . Names . SEARCH , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( ThreadPool . Names . WARMER , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( ThreadPool . Names . GENERIC , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( ThreadPool . Names . FORCE_MERGE , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( ThreadPool . Names . PERCOLATE , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; stats . add ( new ThreadPoolStats . Stats ( ThreadPool . Names . SAME , - <int> , <int> , <int> , <int> , <int> , <int> L ) ) ; try ( XContentBuilder builder = new XContentBuilder ( XContentType . JSON . xContent ( ) , os ) ) { new ThreadPoolStats ( stats ) . toXContent ( builder , ToXContent . EMPTY_PARAMS ) ; } try ( XContentParser parser = XContentType . JSON . xContent ( ) . createParser ( os . bytes ( ) ) ) { XContentParser . Token token = parser . currentToken ( ) ; assertNull ( token ) ; token = parser . nextToken ( ) ; assertThat ( token , equalTo ( XContentParser . Token . VALUE_STRING ) ) ; token = parser . nextToken ( ) ; assertThat ( token , equalTo ( XContentParser . Token . START_OBJECT ) ) ; token = parser . nextToken ( ) ; assertThat ( token , equalTo ( XContentParser . Token . FIELD_NAME ) ) ; List < String > names = new ArrayList < > ( ) ; while ( token = = XContentParser . Token . FIELD_NAME ) { names . add ( parser . currentName ( ) ) ; token = parser . nextToken ( ) ; assertThat ( token , equalTo ( XContentParser . Token . START_OBJECT ) ) ; parser . skipChildren ( ) ; token = parser . nextToken ( ) ; } assertThat ( names , contains ( ThreadPool . Names . FORCE_MERGE , ThreadPool . Names . GENERIC , ThreadPool . Names . PERCOLATE , ThreadPool . Names . SAME , ThreadPool . Names . SEARCH , ThreadPool . Names . SUGGEST , ThreadPool . Names . WARMER ) ) ; } } } } 

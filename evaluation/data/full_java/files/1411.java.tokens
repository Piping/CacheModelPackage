package org . apache . cassandra . cql3 . validation . miscellaneous ; import java . util . concurrent . TimeUnit ; import com . google . common . base . Throwables ; import org . junit . AfterClass ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . config . DatabaseDescriptor ; import org . apache . cassandra . cql3 . CQLTester ; import org . apache . cassandra . db . filter . TombstoneOverwhelmingException ; import static junit . framework . Assert . assertTrue ; import static junit . framework . Assert . fail ; public class TombstonesTest extends CQLTester { static final int ORIGINAL_THRESHOLD = DatabaseDescriptor . getTombstoneFailureThreshold ( ) ; static final int THRESHOLD = <int> ; @BeforeClass public static void setUp ( ) throws Throwable { DatabaseDescriptor . setTombstoneFailureThreshold ( THRESHOLD ) ; } @AfterClass public static void tearDown ( ) { DatabaseDescriptor . setTombstoneFailureThreshold ( ORIGINAL_THRESHOLD ) ; } @Test public void testBelowThresholdSelect ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < THRESHOLD ; i + + ) execute ( <str> + i + <str> ) ; try { execute ( <str> ) ; } catch ( Throwable e ) { fail ( <str> + e ) ; } } @Test public void testBeyondThresholdSelect ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < THRESHOLD + <int> ; i + + ) execute ( <str> + i + <str> ) ; try { execute ( <str> ) ; fail ( <str> ) ; } catch ( Throwable e ) { String error = <str> + System . lineSeparator ( ) + Throwables . getStackTraceAsString ( e ) ; assertTrue ( error , e instanceof TombstoneOverwhelmingException ) ; } } @Test public void testAllShadowedSelect ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < THRESHOLD + <int> ; i + + ) execute ( <str> + i + <str> ) ; execute ( <str> ) ; try { execute ( <str> ) ; } catch ( Throwable e ) { fail ( <str> + e ) ; } } @Test public void testLiveShadowedCellsSelect ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < THRESHOLD + <int> ; i + + ) execute ( <str> + i + <str> ) ; execute ( <str> ) ; try { execute ( <str> ) ; } catch ( Throwable e ) { fail ( <str> + e ) ; } } @Test public void testExpiredTombstones ( ) throws Throwable { createTable ( <str> ) ; for ( int i = <int> ; i < THRESHOLD + <int> ; i + + ) execute ( <str> + i + <str> ) ; try { execute ( <str> ) ; fail ( <str> ) ; } catch ( Throwable e ) { assertTrue ( e instanceof TombstoneOverwhelmingException ) ; } TimeUnit . SECONDS . sleep ( <int> ) ; try { execute ( <str> ) ; } catch ( Throwable e ) { fail ( <str> + e ) ; } } } 

package org . gradle . foundation ; import junit . framework . TestCase ; import org . gradle . api . Project ; import org . gradle . api . Task ; import org . gradle . foundation . visitors . TaskTreePopulationVisitor ; import org . gradle . gradleplugin . foundation . filters . AllowAllProjectAndTaskFilter ; import org . gradle . gradleplugin . foundation . filters . BasicFilterEditor ; import org . gradle . gradleplugin . foundation . filters . ProjectAndTaskFilter ; import org . jmock . integration . junit4 . JUnit4Mockery ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class FilterTest extends TestCase { private BuildInformation buildInformation ; private ProjectView myRootProject ; private ProjectView mySubProject1 ; private TaskView mySubProject1Comple ; private TaskView mySubProject1Lib ; private TaskView mySubProject1Doc ; private ProjectView mySubSubProject ; private TaskView mySubSubProjectCompile ; private TaskView mySubSubProjectLib ; private TaskView mySubSubProjectDoc ; private ProjectView mySubProject2 ; private TaskView mySubProject2Lib ; private TaskView mySubProject2doc ; private TaskView mySubProject2Compile ; protected void setUp ( ) throws Exception { JUnit4Mockery context = new JUnit4Mockery ( ) ; Task subsubCompileTask = TestUtility . createTask ( context , <str> , <str> ) ; Task subsubLibTask = TestUtility . createTask ( context , <str> , <str> ) ; Task subsubDocTask = TestUtility . createTask ( context , <str> , <str> ) ; Project subsubProject = TestUtility . createMockProject ( context , <str> , <str> , <int> , null , new Task [ ] { subsubCompileTask , subsubLibTask , subsubDocTask } , null ) ; Task subCompileTask1 = TestUtility . createTask ( context , <str> , <str> ) ; Task subLibTask1 = TestUtility . createTask ( context , <str> , <str> ) ; Task subDocTask1 = TestUtility . createTask ( context , <str> , <str> ) ; Project subProject1 = TestUtility . createMockProject ( context , <str> , <str> , <int> , new Project [ ] { subsubProject } , new Task [ ] { subCompileTask1 , subLibTask1 , subDocTask1 } , null ) ; Task subCompileTask2 = TestUtility . createTask ( context , <str> , <str> ) ; Task subLibTask2 = TestUtility . createTask ( context , <str> , <str> ) ; Task subDocTask2 = TestUtility . createTask ( context , <str> , <str> ) ; Project subProject2 = TestUtility . createMockProject ( context , <str> , <str> , <int> , null , new Task [ ] { subCompileTask2 , subLibTask2 , subDocTask2 } , null ) ; Project rootProject = TestUtility . createMockProject ( context , <str> , <str> , <int> , new Project [ ] { subProject1 , subProject2 } , null , null ) ; buildInformation = new BuildInformation ( rootProject ) ; myRootProject = buildInformation . getProjectFromFullPath ( <str> ) ; assertNotNull ( myRootProject ) ; mySubProject1 = buildInformation . getProjectFromFullPath ( <str> ) ; assertNotNull ( mySubProject1 ) ; mySubProject1Comple = buildInformation . getTaskFromFullPath ( <str> ) ; assertNotNull ( mySubProject1Comple ) ; mySubProject1Lib = buildInformation . getTaskFromFullPath ( <str> ) ; assertNotNull ( mySubProject1Lib ) ; mySubProject1Doc = buildInformation . getTaskFromFullPath ( <str> ) ; assertNotNull ( mySubProject1Doc ) ; mySubSubProject = buildInformation . getProjectFromFullPath ( <str> ) ; assertNotNull ( mySubSubProject ) ; mySubSubProjectCompile = buildInformation . getTaskFromFullPath ( <str> ) ; assertNotNull ( mySubSubProjectCompile ) ; mySubSubProjectLib = buildInformation . getTaskFromFullPath ( <str> ) ; assertNotNull ( mySubSubProjectLib ) ; mySubSubProjectDoc = buildInformation . getTaskFromFullPath ( <str> ) ; assertNotNull ( mySubSubProjectDoc ) ; mySubProject2 = buildInformation . getProjectFromFullPath ( <str> ) ; assertNotNull ( mySubProject2 ) ; mySubProject2Compile = buildInformation . getTaskFromFullPath ( <str> ) ; assertNotNull ( mySubProject2Compile ) ; mySubProject2Lib = buildInformation . getTaskFromFullPath ( <str> ) ; assertNotNull ( mySubProject2Lib ) ; mySubProject2doc = buildInformation . getTaskFromFullPath ( <str> ) ; assertNotNull ( mySubProject2doc ) ; } public void testAllowAllFiltering ( ) { TestVisitor testVisitor = new TestVisitor ( ) ; TaskTreePopulationVisitor . visitProjectAndTasks ( buildInformation . getProjects ( ) , testVisitor , new AllowAllProjectAndTaskFilter ( ) , null ) ; testVisitor . setExpectedProjects ( myRootProject , mySubProject1 , mySubSubProject , mySubProject2 ) ; testVisitor . setExpectedTasks ( mySubProject1Lib , mySubProject1Doc , mySubSubProjectLib , mySubSubProjectDoc , mySubProject2Lib , mySubProject2doc , mySubProject1Comple , mySubSubProjectCompile , mySubProject2Compile ) ; testVisitor . verifyResults ( ) ; } public void testTaskFiltering ( ) { BasicFilterEditor editor = new BasicFilterEditor ( ) ; editor . hideTasksByName ( <str> ) ; ProjectAndTaskFilter filter = editor . createFilter ( ) ; TestVisitor testVisitor = new TestVisitor ( ) ; TaskTreePopulationVisitor . visitProjectAndTasks ( buildInformation . getProjects ( ) , testVisitor , filter , null ) ; testVisitor . setExpectedProjects ( myRootProject , mySubProject1 , mySubSubProject , mySubProject2 ) ; testVisitor . setExpectedTasks ( mySubProject1Doc , mySubSubProjectDoc , mySubProject2doc , mySubProject1Comple , mySubSubProjectCompile , mySubProject2Compile ) ; testVisitor . verifyResults ( ) ; } private class TestVisitor implements TaskTreePopulationVisitor . Visitor < Object , Object > { private List < TaskView > expectedTasks ; private List < ProjectView > expectedProjects ; private List < TaskView > foundTasks = new ArrayList < TaskView > ( ) ; private List < ProjectView > foundProjects = new ArrayList < ProjectView > ( ) ; public void setExpectedProjects ( ProjectView . . . expectedProjectsFullName ) { this . expectedProjects = Arrays . asList ( expectedProjectsFullName ) ; } public void setExpectedTasks ( TaskView . . . expectedTasksFullName ) { this . expectedTasks = Arrays . asList ( expectedTasksFullName ) ; } public Object visitProject ( ProjectView project , int indexOfProject , Object parentProjectObject ) { foundProjects . add ( project ) ; return null ; } public Object visitTask ( TaskView task , int indexOfTask , ProjectView tasksProject , Object userProjectObject ) { foundTasks . add ( task ) ; return null ; } public void completedVisitingProject ( Object parentProjectObject , List < Object > projectObjects , List < Object > taskObjects ) { } public void verifyResults ( ) { TestUtility . assertListContents ( foundProjects , expectedProjects ) ; TestUtility . assertListContents ( foundTasks , expectedTasks ) ; } } public void testProjectFiltering ( ) { BasicFilterEditor editor = new BasicFilterEditor ( ) ; editor . hideProjectsByName ( <str> ) ; ProjectAndTaskFilter filter = editor . createFilter ( ) ; TestVisitor testVisitor = new TestVisitor ( ) ; TaskTreePopulationVisitor . visitProjectAndTasks ( buildInformation . getProjects ( ) , testVisitor , filter , null ) ; testVisitor . setExpectedProjects ( myRootProject , mySubProject2 ) ; testVisitor . setExpectedTasks ( mySubProject2Lib , mySubProject2doc , mySubProject2Compile ) ; testVisitor . verifyResults ( ) ; } } 

package org . elasticsearch . update ; import org . elasticsearch . action . update . UpdateRequestBuilder ; import org . elasticsearch . action . update . UpdateResponse ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . test . ESIntegTestCase ; import org . junit . Before ; import java . io . IOException ; import static org . hamcrest . Matchers . notNullValue ; public class UpdateNoopIT extends ESIntegTestCase { public void testSingleField ( ) throws Exception { updateAndCheckSource ( <int> , fields ( <str> , <str> ) ) ; updateAndCheckSource ( <int> , fields ( <str> , <str> ) ) ; updateAndCheckSource ( <int> , fields ( <str> , <str> ) ) ; updateAndCheckSource ( <int> , fields ( <str> , <str> ) ) ; updateAndCheckSource ( <int> , fields ( <str> , <str> ) ) ; updateAndCheckSource ( <int> , fields ( <str> , null ) ) ; updateAndCheckSource ( <int> , fields ( <str> , null ) ) ; updateAndCheckSource ( <int> , fields ( <str> , <str> ) ) ; updateAndCheckSource ( <int> , null , fields ( <str> , <str> ) ) ; assertEquals ( <int> , totalNoopUpdates ( ) ) ; } public void testTwoFields ( ) throws Exception { String key1 = <int> + randomAsciiOfLength ( <int> ) ; String key2 = <int> + randomAsciiOfLength ( <int> ) ; String key3 = <int> + randomAsciiOfLength ( <int> ) ; updateAndCheckSource ( <int> , fields ( key1 , <str> , key2 , <str> ) ) ; updateAndCheckSource ( <int> , fields ( key1 , <str> , key2 , <str> ) ) ; updateAndCheckSource ( <int> , fields ( key1 , <str> , key2 , <str> ) ) ; updateAndCheckSource ( <int> , fields ( key1 , <str> , key2 , <str> ) ) ; updateAndCheckSource ( <int> , fields ( key1 , <str> , key2 , <str> ) ) ; updateAndCheckSource ( <int> , fields ( key1 , <str> , key2 , null ) ) ; updateAndCheckSource ( <int> , fields ( key1 , <str> , key2 , null ) ) ; updateAndCheckSource ( <int> , fields ( key1 , <str> , key2 , <str> ) ) ; updateAndCheckSource ( <int> , fields ( key1 , null , key2 , <str> ) ) ; updateAndCheckSource ( <int> , fields ( key1 , null , key2 , <str> ) ) ; updateAndCheckSource ( <int> , fields ( key1 , null , key2 , null ) ) ; updateAndCheckSource ( <int> , fields ( key1 , null , key2 , null ) ) ; updateAndCheckSource ( <int> , fields ( key1 , null , key2 , null , key3 , null ) ) ; assertEquals ( <int> , totalNoopUpdates ( ) ) ; } public void testArrayField ( ) throws Exception { updateAndCheckSource ( <int> , fields ( <str> , <str> ) ) ; updateAndCheckSource ( <int> , fields ( <str> , new String [ ] { <str> , <str> } ) ) ; updateAndCheckSource ( <int> , fields ( <str> , new String [ ] { <str> , <str> } ) ) ; updateAndCheckSource ( <int> , fields ( <str> , <str> ) ) ; updateAndCheckSource ( <int> , fields ( <str> , <str> ) ) ; updateAndCheckSource ( <int> , fields ( <str> , new String [ ] { <str> , <str> } ) ) ; updateAndCheckSource ( <int> , fields ( <str> , new String [ ] { <str> , <str> } ) ) ; updateAndCheckSource ( <int> , fields ( <str> , new String [ ] { <str> , <str> } ) ) ; updateAndCheckSource ( <int> , fields ( <str> , new String [ ] { <str> , <str> } ) ) ; updateAndCheckSource ( <int> , fields ( <str> , new String [ ] { <str> , <str> } ) ) ; updateAndCheckSource ( <int> , fields ( <str> , new String [ ] { <str> , <str> } ) ) ; updateAndCheckSource ( <int> , fields ( <str> , new String [ ] { <str> , <str> , <str> } ) ) ; assertEquals ( <int> , totalNoopUpdates ( ) ) ; } public void testMap ( ) throws Exception { String key1 = <int> + randomAsciiOfLength ( <int> ) ; String key2 = <int> + randomAsciiOfLength ( <int> ) ; String key3 = <int> + randomAsciiOfLength ( <int> ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( key1 , <str> ) . field ( key2 , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( key1 , <str> ) . field ( key2 , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( key1 , <str> ) . field ( key2 , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( key1 , <str> ) . field ( key2 , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( key1 , <str> ) . field ( key2 , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( key1 , <str> ) . field ( key2 , ( Object ) null ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( key1 , <str> ) . field ( key2 , ( Object ) null ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( key1 , <str> ) . field ( key2 , ( Object ) null ) . field ( key3 , ( Object ) null ) . endObject ( ) . endObject ( ) ) ; assertEquals ( <int> , totalNoopUpdates ( ) ) ; } public void testMapAndField ( ) throws Exception { updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; assertEquals ( <int> , totalNoopUpdates ( ) ) ; } public void testTotallyEmpty ( ) throws Exception { updateAndCheckSource ( <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) ; update ( true , <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) ; update ( false , <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) ; update ( null , <int> , XContentFactory . jsonBuilder ( ) . startObject ( ) . endObject ( ) ) ; } private XContentBuilder fields ( Object . . . fields ) throws IOException { assertEquals ( <str> , <int> , fields . length % <int> ) ; XContentBuilder builder = XContentFactory . jsonBuilder ( ) . startObject ( ) ; for ( int i = <int> ; i < fields . length ; i + = <int> ) { builder . field ( ( String ) fields [ i ] , fields [ i + <int> ] ) ; } builder . endObject ( ) ; return builder ; } private void updateAndCheckSource ( long expectedVersion , XContentBuilder xContentBuilder ) { updateAndCheckSource ( expectedVersion , true , xContentBuilder ) ; } private void updateAndCheckSource ( long expectedVersion , Boolean detectNoop , XContentBuilder xContentBuilder ) { UpdateResponse updateResponse = update ( detectNoop , expectedVersion , xContentBuilder ) ; assertEquals ( updateResponse . getGetResult ( ) . sourceRef ( ) . toUtf8 ( ) , xContentBuilder . bytes ( ) . toUtf8 ( ) ) ; } private UpdateResponse update ( Boolean detectNoop , long expectedVersion , XContentBuilder xContentBuilder ) { UpdateRequestBuilder updateRequest = client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setDoc ( xContentBuilder . bytes ( ) . toUtf8 ( ) ) . setDocAsUpsert ( true ) . setFields ( <str> ) ; if ( detectNoop ! = null ) { updateRequest . setDetectNoop ( detectNoop ) ; } UpdateResponse updateResponse = updateRequest . get ( ) ; assertThat ( updateResponse . getGetResult ( ) , notNullValue ( ) ) ; assertEquals ( expectedVersion , updateResponse . getVersion ( ) ) ; return updateResponse ; } private long totalNoopUpdates ( ) { return client ( ) . admin ( ) . indices ( ) . prepareStats ( <str> ) . setIndexing ( true ) . get ( ) . getIndex ( <str> ) . getTotal ( ) . getIndexing ( ) . getTotal ( ) . getNoopUpdateCount ( ) ; } @Before public void setup ( ) { createIndex ( <str> ) ; ensureGreen ( ) ; } } 

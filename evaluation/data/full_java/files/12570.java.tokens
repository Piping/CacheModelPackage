package org . gradle . api . internal . artifacts . ivyservice . ivyresolve ; import org . gradle . StartParameter ; import org . gradle . api . Action ; import org . gradle . api . artifacts . cache . ArtifactResolutionControl ; import org . gradle . api . artifacts . cache . DependencyResolutionControl ; import org . gradle . api . artifacts . cache . ModuleResolutionControl ; import org . gradle . api . artifacts . cache . ResolutionRules ; import org . gradle . api . artifacts . component . ModuleComponentIdentifier ; import org . gradle . internal . component . model . * ; import org . gradle . api . internal . component . ArtifactType ; import org . gradle . internal . resolve . ArtifactResolveException ; import org . gradle . internal . resolve . ModuleVersionResolveException ; import org . gradle . internal . resolve . result . BuildableArtifactResolveResult ; import org . gradle . internal . resolve . result . BuildableArtifactSetResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleComponentMetaDataResolveResult ; import org . gradle . internal . resolve . result . BuildableModuleVersionListingResolveResult ; import java . util . concurrent . TimeUnit ; public class StartParameterResolutionOverride { private final StartParameter startParameter ; public StartParameterResolutionOverride ( StartParameter startParameter ) { this . startParameter = startParameter ; } public void addResolutionRules ( ResolutionRules resolutionRules ) { if ( startParameter . isOffline ( ) ) { resolutionRules . eachDependency ( new Action < DependencyResolutionControl > ( ) { public void execute ( DependencyResolutionControl dependencyResolutionControl ) { dependencyResolutionControl . useCachedResult ( ) ; } } ) ; resolutionRules . eachModule ( new Action < ModuleResolutionControl > ( ) { public void execute ( ModuleResolutionControl moduleResolutionControl ) { moduleResolutionControl . useCachedResult ( ) ; } } ) ; resolutionRules . eachArtifact ( new Action < ArtifactResolutionControl > ( ) { public void execute ( ArtifactResolutionControl artifactResolutionControl ) { artifactResolutionControl . useCachedResult ( ) ; } } ) ; } else if ( startParameter . isRefreshDependencies ( ) ) { resolutionRules . eachDependency ( new Action < DependencyResolutionControl > ( ) { public void execute ( DependencyResolutionControl dependencyResolutionControl ) { dependencyResolutionControl . cacheFor ( <int> , TimeUnit . SECONDS ) ; } } ) ; resolutionRules . eachModule ( new Action < ModuleResolutionControl > ( ) { public void execute ( ModuleResolutionControl moduleResolutionControl ) { moduleResolutionControl . cacheFor ( <int> , TimeUnit . SECONDS ) ; } } ) ; resolutionRules . eachArtifact ( new Action < ArtifactResolutionControl > ( ) { public void execute ( ArtifactResolutionControl artifactResolutionControl ) { artifactResolutionControl . cacheFor ( <int> , TimeUnit . SECONDS ) ; } } ) ; } } public ModuleComponentRepository overrideModuleVersionRepository ( ModuleComponentRepository original ) { if ( startParameter . isOffline ( ) ) { return new OfflineModuleComponentRepository ( original ) ; } return original ; } private static class OfflineModuleComponentRepository extends BaseModuleComponentRepository { private final FailedRemoteAccess failedRemoteAccess = new FailedRemoteAccess ( ) ; public OfflineModuleComponentRepository ( ModuleComponentRepository original ) { super ( original ) ; } @Override public ModuleComponentRepositoryAccess getRemoteAccess ( ) { return failedRemoteAccess ; } } private static class FailedRemoteAccess implements ModuleComponentRepositoryAccess { @Override public String toString ( ) { return <str> ; } public void listModuleVersions ( DependencyMetaData dependency , BuildableModuleVersionListingResolveResult result ) { result . failed ( new ModuleVersionResolveException ( dependency . getRequested ( ) , String . format ( <str> , dependency . getRequested ( ) ) ) ) ; } public void resolveComponentMetaData ( ModuleComponentIdentifier moduleComponentIdentifier , ComponentOverrideMetadata requestMetaData , BuildableModuleComponentMetaDataResolveResult result ) { result . failed ( new ModuleVersionResolveException ( moduleComponentIdentifier , String . format ( <str> , moduleComponentIdentifier . getDisplayName ( ) ) ) ) ; } public void resolveModuleArtifacts ( ComponentResolveMetaData component , ArtifactType artifactType , BuildableArtifactSetResolveResult result ) { result . failed ( new ArtifactResolveException ( component . getComponentId ( ) , <str> ) ) ; } public void resolveModuleArtifacts ( ComponentResolveMetaData component , ComponentUsage componentUsage , BuildableArtifactSetResolveResult result ) { result . failed ( new ArtifactResolveException ( component . getComponentId ( ) , <str> ) ) ; } public void resolveArtifact ( ComponentArtifactMetaData artifact , ModuleSource moduleSource , BuildableArtifactResolveResult result ) { result . failed ( new ArtifactResolveException ( artifact . getId ( ) , <str> ) ) ; } } } 

package org . elasticsearch . search . aggregations . bucket ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . search . aggregations . Aggregator . SubAggCollectionMode ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import java . util . Collection ; import java . util . HashMap ; import java . util . Map ; import static org . elasticsearch . index . query . QueryBuilders . matchAllQuery ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . hamcrest . Matchers . equalTo ; public class ShardSizeTermsIT extends ShardSizeTestCase { public void testNoShardSizeString ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < String , Long > expected = new HashMap < > ( ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsString ( ) ) ) ) ; } } public void testShardSizeEqualsSizeString ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . shardSize ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < String , Long > expected = new HashMap < > ( ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsString ( ) ) ) ) ; } } public void testWithShardSizeString ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . shardSize ( <int> ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < String , Long > expected = new HashMap < > ( ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsString ( ) ) ) ) ; } } public void testWithShardSizeStringSingleShard ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setRouting ( routing1 ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . shardSize ( <int> ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < String , Long > expected = new HashMap < > ( ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKey ( ) ) ) ) ; } } public void testNoShardSizeTermOrderString ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . order ( Terms . Order . term ( true ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < String , Long > expected = new HashMap < > ( ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; expected . put ( <str> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsString ( ) ) ) ) ; } } public void testNoShardSizeLong ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } public void testShardSizeEqualsSizeLong ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . shardSize ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } public void testWithShardSizeLong ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . shardSize ( <int> ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } public void testWithShardSizeLongSingleShard ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setRouting ( routing1 ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . shardSize ( <int> ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } public void testNoShardSizeTermOrderLong ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . order ( Terms . Order . term ( true ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } public void testNoShardSizeDouble ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } public void testShardSizeEqualsSizeDouble ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . shardSize ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } public void testWithShardSizeDouble ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . shardSize ( <int> ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } public void testWithShardSizeDoubleSingleShard ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setRouting ( routing1 ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . shardSize ( <int> ) . order ( Terms . Order . count ( false ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } public void testNoShardSizeTermOrderDouble ( ) throws Exception { createIdx ( <str> ) ; indexData ( ) ; SearchResponse response = client ( ) . prepareSearch ( <str> ) . setTypes ( <str> ) . setQuery ( matchAllQuery ( ) ) . addAggregation ( terms ( <str> ) . field ( <str> ) . size ( <int> ) . collectMode ( randomFrom ( SubAggCollectionMode . values ( ) ) ) . order ( Terms . Order . term ( true ) ) ) . execute ( ) . actionGet ( ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; Collection < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; Map < Integer , Long > expected = new HashMap < > ( ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; expected . put ( <int> , <int> ) ; for ( Terms . Bucket bucket : buckets ) { assertThat ( bucket . getDocCount ( ) , equalTo ( expected . get ( bucket . getKeyAsNumber ( ) . intValue ( ) ) ) ) ; } } } 

package io . netty . channel ; import io . netty . util . concurrent . EventExecutor ; import java . net . SocketAddress ; public interface ChannelHandlerInvoker { EventExecutor executor ( ) ; void invokeChannelRegistered ( ChannelHandlerContext ctx ) ; void invokeChannelUnregistered ( ChannelHandlerContext ctx ) ; void invokeChannelActive ( ChannelHandlerContext ctx ) ; void invokeChannelInactive ( ChannelHandlerContext ctx ) ; void invokeExceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) ; void invokeUserEventTriggered ( ChannelHandlerContext ctx , Object event ) ; void invokeChannelRead ( ChannelHandlerContext ctx , Object msg ) ; void invokeChannelReadComplete ( ChannelHandlerContext ctx ) ; void invokeChannelWritabilityChanged ( ChannelHandlerContext ctx ) ; void invokeBind ( ChannelHandlerContext ctx , SocketAddress localAddress , ChannelPromise promise ) ; void invokeConnect ( ChannelHandlerContext ctx , SocketAddress remoteAddress , SocketAddress localAddress , ChannelPromise promise ) ; void invokeDisconnect ( ChannelHandlerContext ctx , ChannelPromise promise ) ; void invokeClose ( ChannelHandlerContext ctx , ChannelPromise promise ) ; void invokeDeregister ( ChannelHandlerContext ctx , ChannelPromise promise ) ; void invokeRead ( ChannelHandlerContext ctx ) ; void invokeWrite ( ChannelHandlerContext ctx , Object msg , ChannelPromise promise ) ; void invokeFlush ( ChannelHandlerContext ctx ) ; } 

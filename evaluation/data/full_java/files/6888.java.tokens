package org . elasticsearch . monitor . fs ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . unit . TimeValue ; import org . elasticsearch . common . util . SingleObjectCache ; import org . elasticsearch . env . NodeEnvironment ; import java . io . IOException ; public class FsService extends AbstractComponent { private final FsProbe probe ; private final SingleObjectCache < FsInfo > fsStatsCache ; public FsService ( Settings settings , NodeEnvironment nodeEnvironment ) throws IOException { super ( settings ) ; this . probe = new FsProbe ( settings , nodeEnvironment ) ; TimeValue refreshInterval = settings . getAsTime ( <str> , TimeValue . timeValueSeconds ( <int> ) ) ; fsStatsCache = new FsInfoCache ( refreshInterval , probe . stats ( ) ) ; logger . debug ( <str> , probe , refreshInterval ) ; } public FsInfo stats ( ) { return fsStatsCache . getOrRefresh ( ) ; } private class FsInfoCache extends SingleObjectCache < FsInfo > { public FsInfoCache ( TimeValue interval , FsInfo initValue ) { super ( interval , initValue ) ; } @Override protected FsInfo refresh ( ) { try { return probe . stats ( ) ; } catch ( IOException ex ) { logger . warn ( <str> ) ; return new FsInfo ( ) ; } } } } 

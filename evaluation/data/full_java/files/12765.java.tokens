package org . gradle . api . internal . artifacts . repositories . resolver ; import org . apache . ivy . util . ContextualSAXHandler ; import org . apache . ivy . util . XMLHelper ; import org . gradle . internal . ErroringAction ; import org . gradle . internal . resource . ExternalResource ; import org . gradle . internal . resource . ResourceException ; import org . gradle . internal . resource . ResourceNotFoundException ; import org . gradle . internal . resource . transport . ExternalResourceRepository ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . xml . sax . SAXException ; import javax . xml . parsers . ParserConfigurationException ; import java . io . IOException ; import java . io . InputStream ; import java . net . URI ; class MavenMetadataLoader { private static final Logger LOGGER = LoggerFactory . getLogger ( MavenMetadataLoader . class ) ; private final ExternalResourceRepository repository ; public MavenMetadataLoader ( ExternalResourceRepository repository ) { this . repository = repository ; } public MavenMetadata load ( URI metadataLocation ) throws ResourceException { MavenMetadata metadata = new MavenMetadata ( ) ; try { parseMavenMetadataInfo ( metadataLocation , metadata ) ; } catch ( ResourceNotFoundException e ) { throw e ; } catch ( Exception e ) { throw new ResourceException ( metadataLocation , String . format ( <str> , metadataLocation ) , e ) ; } return metadata ; } private void parseMavenMetadataInfo ( final URI metadataLocation , final MavenMetadata metadata ) { ExternalResource resource = repository . getResource ( metadataLocation ) ; if ( resource = = null ) { throw new ResourceNotFoundException ( metadataLocation , String . format ( <str> , metadataLocation ) ) ; } try { parseMavenMetadataInto ( resource , metadata ) ; } finally { resource . close ( ) ; } } private void parseMavenMetadataInto ( ExternalResource metadataResource , final MavenMetadata mavenMetadata ) { LOGGER . debug ( <str> , metadataResource ) ; metadataResource . withContent ( new ErroringAction < InputStream > ( ) { public void doExecute ( InputStream inputStream ) throws ParserConfigurationException , SAXException , IOException { XMLHelper . parse ( inputStream , null , new ContextualSAXHandler ( ) { public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( <str> . equals ( getContext ( ) ) ) { mavenMetadata . timestamp = getText ( ) ; } if ( <str> . equals ( getContext ( ) ) ) { mavenMetadata . buildNumber = getText ( ) ; } if ( <str> . equals ( getContext ( ) ) ) { mavenMetadata . versions . add ( getText ( ) . trim ( ) ) ; } super . endElement ( uri , localName , qName ) ; } } , null ) ; } } ) ; } } 

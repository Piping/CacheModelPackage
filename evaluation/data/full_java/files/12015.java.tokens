package org . gradle . initialization ; import org . gradle . api . artifacts . DependencyResolutionListener ; import org . gradle . api . artifacts . ResolvableDependencies ; import org . gradle . logging . ProgressLogger ; import org . gradle . logging . ProgressLoggerFactory ; import java . util . LinkedList ; public class DependencyResolutionLogger implements DependencyResolutionListener { private final ThreadLocal < LinkedList < ProgressLogger > > progressLoggers = new ThreadLocal < LinkedList < ProgressLogger > > ( ) { protected LinkedList < ProgressLogger > initialValue ( ) { return new LinkedList < ProgressLogger > ( ) ; } } ; private final ProgressLoggerFactory loggerFactory ; public DependencyResolutionLogger ( ProgressLoggerFactory loggerFactory ) { this . loggerFactory = loggerFactory ; } public void beforeResolve ( ResolvableDependencies dependencies ) { LinkedList < ProgressLogger > loggers = progressLoggers . get ( ) ; progressLoggers . set ( loggers ) ; ProgressLogger logger = loggerFactory . newOperation ( DependencyResolutionLogger . class ) ; logger . start ( String . format ( <str> , dependencies ) , String . format ( <str> , dependencies ) ) ; loggers . add ( logger ) ; } public void afterResolve ( ResolvableDependencies dependencies ) { LinkedList < ProgressLogger > loggers = progressLoggers . get ( ) ; if ( loggers . isEmpty ( ) ) { throw new IllegalStateException ( <str> ) ; } ProgressLogger logger = loggers . removeLast ( ) ; logger . completed ( ) ; if ( loggers . isEmpty ( ) ) { progressLoggers . remove ( ) ; } } } 

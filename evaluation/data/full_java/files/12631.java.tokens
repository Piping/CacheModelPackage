package org . gradle . api . internal . artifacts . ivyservice . moduleconverter . dependencies ; import org . gradle . api . artifacts . Configuration ; import org . gradle . api . artifacts . ExcludeRule ; import org . gradle . api . artifacts . ModuleDependency ; import org . gradle . internal . component . local . model . BuildableLocalComponentMetaData ; import java . util . Collection ; public class DefaultDependenciesToModuleDescriptorConverter implements DependenciesToModuleDescriptorConverter { private DependencyDescriptorFactory dependencyDescriptorFactory ; private ExcludeRuleConverter excludeRuleConverter ; public DefaultDependenciesToModuleDescriptorConverter ( DependencyDescriptorFactory dependencyDescriptorFactory , ExcludeRuleConverter excludeRuleConverter ) { this . dependencyDescriptorFactory = dependencyDescriptorFactory ; this . excludeRuleConverter = excludeRuleConverter ; } public void addDependencyDescriptors ( BuildableLocalComponentMetaData metaData , Collection < ? extends Configuration > configurations ) { assert ! configurations . isEmpty ( ) ; addDependencies ( metaData , configurations ) ; addExcludeRules ( metaData , configurations ) ; } private void addDependencies ( BuildableLocalComponentMetaData metaData , Collection < ? extends Configuration > configurations ) { for ( Configuration configuration : configurations ) { for ( ModuleDependency dependency : configuration . getDependencies ( ) . withType ( ModuleDependency . class ) ) { metaData . addDependency ( dependencyDescriptorFactory . createDependencyDescriptor ( configuration . getName ( ) , dependency ) ) ; } } } private void addExcludeRules ( BuildableLocalComponentMetaData metaData , Collection < ? extends Configuration > configurations ) { for ( Configuration configuration : configurations ) { for ( ExcludeRule excludeRule : configuration . getExcludeRules ( ) ) { org . apache . ivy . core . module . descriptor . ExcludeRule rule = excludeRuleConverter . createExcludeRule ( configuration . getName ( ) , excludeRule ) ; metaData . addExcludeRule ( rule ) ; } } } } 

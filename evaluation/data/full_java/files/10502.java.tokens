package com . google . common . hash ; import static com . google . common . hash . Hashing . murmur3_32 ; import com . google . common . hash . HashTestUtils . HashFn ; import junit . framework . TestCase ; public class Murmur3Hash32Test extends TestCase { public void testKnownIntegerInputs ( ) { assertHash ( <int> , murmur3_32 ( ) . hashInt ( <int> ) ) ; assertHash ( - <int> , murmur3_32 ( ) . hashInt ( - <int> ) ) ; assertHash ( - <int> , murmur3_32 ( ) . hashInt ( <int> ) ) ; assertHash ( - <int> , murmur3_32 ( ) . hashInt ( Integer . MIN_VALUE ) ) ; assertHash ( - <int> , murmur3_32 ( ) . hashInt ( Integer . MAX_VALUE ) ) ; } public void testKnownLongInputs ( ) { assertHash ( <int> , murmur3_32 ( ) . hashLong ( <int> L ) ) ; assertHash ( - <int> , murmur3_32 ( ) . hashLong ( - <int> ) ) ; assertHash ( <int> , murmur3_32 ( ) . hashLong ( <int> ) ) ; assertHash ( <int> , murmur3_32 ( ) . hashLong ( Long . MIN_VALUE ) ) ; assertHash ( - <int> , murmur3_32 ( ) . hashLong ( Long . MAX_VALUE ) ) ; } public void testKnownStringInputs ( ) { assertHash ( <int> , murmur3_32 ( ) . hashUnencodedChars ( <str> ) ) ; assertHash ( <int> , murmur3_32 ( ) . hashUnencodedChars ( <str> ) ) ; assertHash ( <int> , murmur3_32 ( ) . hashUnencodedChars ( <str> ) ) ; assertHash ( - <int> , murmur3_32 ( ) . hashUnencodedChars ( <str> ) ) ; assertHash ( <int> , murmur3_32 ( ) . hashUnencodedChars ( <str> ) ) ; assertHash ( - <int> , murmur3_32 ( ) . hashUnencodedChars ( <str> ) ) ; } private static void assertHash ( int expected , HashCode actual ) { assertEquals ( HashCode . fromInt ( expected ) , actual ) ; } public void testParanoid ( ) { HashFn hf = new HashFn ( ) { @Override public byte [ ] hash ( byte [ ] input , int seed ) { Hasher hasher = murmur3_32 ( seed ) . newHasher ( ) ; Funnels . byteArrayFunnel ( ) . funnel ( input , hasher ) ; return hasher . hash ( ) . asBytes ( ) ; } } ; HashTestUtils . verifyHashFunction ( hf , <int> , <hex> ) ; } public void testInvariants ( ) { HashTestUtils . assertInvariants ( murmur3_32 ( ) ) ; } } 

package io . netty . handler . codec . http2 ; import io . netty . handler . codec . http2 . Http2Headers . PseudoHeaderName ; import org . junit . Test ; import java . util . Map . Entry ; import static io . netty . util . AsciiString . of ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertNotNull ; import static org . junit . Assert . assertTrue ; import static org . junit . Assert . fail ; public class DefaultHttp2HeadersTest { @Test public void testPseudoHeadersMustComeFirstWhenIterating ( ) { Http2Headers headers = newHeaders ( ) ; verifyPseudoHeadersFirst ( headers ) ; verifyAllPseudoHeadersPresent ( headers ) ; } @Test public void testPseudoHeadersWithRemovePreservesPseudoIterationOrder ( ) { Http2Headers headers = newHeaders ( ) ; Http2Headers nonPseudoHeaders = new DefaultHttp2Headers ( ) ; for ( Entry < CharSequence , CharSequence > entry : headers ) { if ( entry . getKey ( ) . length ( ) = = <int> | | entry . getKey ( ) . charAt ( <int> ) ! = <str> & & ! nonPseudoHeaders . contains ( entry . getKey ( ) ) ) { nonPseudoHeaders . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } } assertFalse ( nonPseudoHeaders . isEmpty ( ) ) ; for ( Entry < CharSequence , CharSequence > nonPseudoHeaderEntry : nonPseudoHeaders ) { assertTrue ( headers . remove ( nonPseudoHeaderEntry . getKey ( ) ) ) ; verifyPseudoHeadersFirst ( headers ) ; verifyAllPseudoHeadersPresent ( headers ) ; } for ( Entry < CharSequence , CharSequence > nonPseudoHeaderEntry : nonPseudoHeaders ) { headers . add ( nonPseudoHeaderEntry . getKey ( ) , of ( <str> ) ) ; verifyPseudoHeadersFirst ( headers ) ; verifyAllPseudoHeadersPresent ( headers ) ; } } @Test public void testPseudoHeadersWithClearDoesNotLeak ( ) { Http2Headers headers = newHeaders ( ) ; assertFalse ( headers . isEmpty ( ) ) ; headers . clear ( ) ; assertTrue ( headers . isEmpty ( ) ) ; headers . add ( <str> , <str> ) . scheme ( <str> ) ; verifyPseudoHeadersFirst ( headers ) ; Http2Headers other = new DefaultHttp2Headers ( ) . add ( <str> , <str> ) . authority ( <str> ) ; verifyPseudoHeadersFirst ( other ) ; headers . add ( other ) ; verifyPseudoHeadersFirst ( headers ) ; assertEquals ( <int> , headers . size ( ) ) ; assertEquals ( <str> , headers . get ( <str> ) ) ; assertEquals ( <str> , headers . get ( <str> ) ) ; assertEquals ( <str> , headers . scheme ( ) ) ; assertEquals ( <str> , headers . authority ( ) ) ; } @Test public void testSetHeadersOrdersPsuedoHeadersCorrectly ( ) { Http2Headers headers = newHeaders ( ) ; Http2Headers other = new DefaultHttp2Headers ( ) . add ( <str> , <str> ) . authority ( <str> ) ; headers . set ( other ) ; verifyPseudoHeadersFirst ( headers ) ; assertEquals ( other . size ( ) , headers . size ( ) ) ; assertEquals ( <str> , headers . authority ( ) ) ; assertEquals ( <str> , headers . get ( <str> ) ) ; } @Test public void testSetAllOrdersPsuedoHeadersCorrectly ( ) { Http2Headers headers = newHeaders ( ) ; Http2Headers other = new DefaultHttp2Headers ( ) . add ( <str> , <str> ) . authority ( <str> ) ; int headersSizeBefore = headers . size ( ) ; headers . setAll ( other ) ; verifyPseudoHeadersFirst ( headers ) ; verifyAllPseudoHeadersPresent ( headers ) ; assertEquals ( headersSizeBefore + <int> , headers . size ( ) ) ; assertEquals ( <str> , headers . authority ( ) ) ; assertEquals ( <str> , headers . get ( <str> ) ) ; } @Test ( expected = Http2Exception . class ) public void testHeaderNameValidation ( ) { Http2Headers headers = newHeaders ( ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; } @Test public void testClearResetsPseudoHeaderDivision ( ) { DefaultHttp2Headers http2Headers = new DefaultHttp2Headers ( ) ; http2Headers . method ( <str> ) ; http2Headers . set ( <str> , <str> ) ; http2Headers . clear ( ) ; http2Headers . method ( <str> ) ; assertEquals ( <int> , http2Headers . names ( ) . size ( ) ) ; } private static void verifyAllPseudoHeadersPresent ( Http2Headers headers ) { for ( PseudoHeaderName pseudoName : PseudoHeaderName . values ( ) ) { assertNotNull ( headers . get ( pseudoName . value ( ) ) ) ; } } private static void verifyPseudoHeadersFirst ( Http2Headers headers ) { CharSequence lastNonPseudoName = null ; for ( Entry < CharSequence , CharSequence > entry : headers ) { if ( entry . getKey ( ) . length ( ) = = <int> | | entry . getKey ( ) . charAt ( <int> ) ! = <str> ) { lastNonPseudoName = entry . getKey ( ) ; } else if ( lastNonPseudoName ! = null ) { fail ( <str> + entry . getKey ( ) + <str> + lastNonPseudoName ) ; } } } private static Http2Headers newHeaders ( ) { Http2Headers headers = new DefaultHttp2Headers ( ) ; headers . add ( of ( <str> ) , of ( <str> ) , of ( <str> ) ) ; headers . method ( of ( <str> ) ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; headers . path ( of ( <str> ) ) ; headers . status ( of ( <str> ) ) ; headers . authority ( of ( <str> ) ) ; headers . add ( of ( <str> ) , of ( <str> ) ) ; headers . scheme ( of ( <str> ) ) ; return headers ; } } 

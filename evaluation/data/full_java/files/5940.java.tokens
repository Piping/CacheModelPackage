package org . elasticsearch . common . io . stream ; import java . util . HashMap ; import java . util . Map ; public class NamedWriteableRegistry { private final Map < Class < ? > , InnerRegistry < ? > > registry = new HashMap < > ( ) ; public synchronized < T > void registerPrototype ( Class < T > categoryClass , NamedWriteable < ? extends T > namedWriteable ) { @SuppressWarnings ( <str> ) InnerRegistry < T > innerRegistry = ( InnerRegistry < T > ) registry . get ( categoryClass ) ; if ( innerRegistry = = null ) { innerRegistry = new InnerRegistry < > ( categoryClass ) ; registry . put ( categoryClass , innerRegistry ) ; } innerRegistry . registerPrototype ( namedWriteable ) ; } public synchronized < T > NamedWriteable < ? extends T > getPrototype ( Class < T > categoryClass , String name ) { @SuppressWarnings ( <str> ) InnerRegistry < T > innerRegistry = ( InnerRegistry < T > ) registry . get ( categoryClass ) ; if ( innerRegistry = = null ) { throw new IllegalArgumentException ( <str> + categoryClass . getName ( ) + <str> ) ; } return innerRegistry . getPrototype ( name ) ; } private static class InnerRegistry < T > { private final Map < String , NamedWriteable < ? extends T > > registry = new HashMap < > ( ) ; private final Class < T > categoryClass ; private InnerRegistry ( Class < T > categoryClass ) { this . categoryClass = categoryClass ; } private void registerPrototype ( NamedWriteable < ? extends T > namedWriteable ) { NamedWriteable < ? extends T > existingNamedWriteable = registry . get ( namedWriteable . getWriteableName ( ) ) ; if ( existingNamedWriteable ! = null ) { throw new IllegalArgumentException ( <str> + namedWriteable . getClass ( ) . getName ( ) + <str> + namedWriteable . getWriteableName ( ) + <str> + <str> + existingNamedWriteable . getClass ( ) . getName ( ) + <str> + categoryClass . getName ( ) + <str> ) ; } registry . put ( namedWriteable . getWriteableName ( ) , namedWriteable ) ; } private NamedWriteable < ? extends T > getPrototype ( String name ) { NamedWriteable < ? extends T > namedWriteable = registry . get ( name ) ; if ( namedWriteable = = null ) { throw new IllegalArgumentException ( <str> + name + <str> + categoryClass . getName ( ) + <str> ) ; } return namedWriteable ; } } } 

package org . elasticsearch . common . util . concurrent ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . atomic . AtomicInteger ; public final class CountDown { private final AtomicInteger countDown ; private final int originalCount ; public CountDown ( int count ) { if ( count < <int> ) { throw new IllegalArgumentException ( <str> + count ) ; } this . originalCount = count ; this . countDown = new AtomicInteger ( count ) ; } public boolean countDown ( ) { assert originalCount > <int> ; for ( ; ; ) { final int current = countDown . get ( ) ; assert current > = <int> ; if ( current = = <int> ) { return false ; } if ( countDown . compareAndSet ( current , current - <int> ) ) { return current = = <int> ; } } } public boolean fastForward ( ) { assert originalCount > <int> ; assert countDown . get ( ) > = <int> ; return countDown . getAndSet ( <int> ) > <int> ; } public boolean isCountedDown ( ) { assert countDown . get ( ) > = <int> ; return countDown . get ( ) = = <int> ; } } 

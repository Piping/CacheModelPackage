package org . eclipse . debug . examples . core . midi . launcher ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IStatus ; import org . eclipse . core . runtime . Status ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . examples . core . pda . DebugCorePlugin ; public class ClockControl extends TimeControl { public ClockControl ( MidiLaunch launch ) { super ( <str> , launch ) ; } @Override protected long getTimeValue ( ) { return getSequencer ( ) . getMicrosecondPosition ( ) ; } @Override public boolean isEditable ( ) { return true ; } @Override public IStatus setValue ( String newValue ) { try { long value = getLong ( newValue ) ; getSequencer ( ) . setMicrosecondPosition ( value ) ; fireEvent ( new DebugEvent ( this , DebugEvent . CHANGE ) ) ; return Status . OK_STATUS ; } catch ( CoreException e ) { return e . getStatus ( ) ; } } @Override public IStatus validateValue ( String value ) { try { getLong ( value ) ; return Status . OK_STATUS ; } catch ( CoreException e ) { return e . getStatus ( ) ; } } protected long getLong ( String value ) throws CoreException { try { if ( value . indexOf ( <str> ) = = - <int> ) { long secs = Long . parseLong ( value ) ; return secs * <int> ; } } catch ( NumberFormatException e ) { throw new CoreException ( new Status ( IStatus . ERROR , DebugCorePlugin . PLUGIN_ID , <str> , e ) ) ; } return <int> L ; } } 

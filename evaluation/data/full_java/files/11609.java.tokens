package org . gradle . api . internal . plugins ; import org . gradle . api . Plugin ; import org . gradle . api . initialization . dsl . ScriptHandler ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . initialization . ClassLoaderScope ; import org . gradle . api . internal . initialization . ScriptHandlerFactory ; import org . gradle . api . plugins . ObjectConfigurationAction ; import org . gradle . api . plugins . PluginAware ; import org . gradle . configuration . ScriptPlugin ; import org . gradle . configuration . ScriptPluginFactory ; import org . gradle . groovy . scripts . UriScriptSource ; import org . gradle . util . GUtil ; import java . net . URI ; import java . util . LinkedHashSet ; import java . util . Set ; public class DefaultObjectConfigurationAction implements ObjectConfigurationAction { private final FileResolver resolver ; private final ScriptPluginFactory configurerFactory ; private final ScriptHandlerFactory scriptHandlerFactory ; private final Set < Object > targets = new LinkedHashSet < Object > ( ) ; private final Set < Runnable > actions = new LinkedHashSet < Runnable > ( ) ; private final ClassLoaderScope classLoaderScope ; private final Object defaultTarget ; public DefaultObjectConfigurationAction ( FileResolver resolver , ScriptPluginFactory configurerFactory , ScriptHandlerFactory scriptHandlerFactory , ClassLoaderScope classLoaderScope , Object defaultTarget ) { this . resolver = resolver ; this . configurerFactory = configurerFactory ; this . scriptHandlerFactory = scriptHandlerFactory ; this . classLoaderScope = classLoaderScope ; this . defaultTarget = defaultTarget ; } public ObjectConfigurationAction to ( Object . . . targets ) { GUtil . flatten ( targets , this . targets ) ; return this ; } public ObjectConfigurationAction from ( final Object script ) { actions . add ( new Runnable ( ) { public void run ( ) { applyScript ( script ) ; } } ) ; return this ; } public ObjectConfigurationAction plugin ( final Class < ? extends Plugin > pluginClass ) { actions . add ( new Runnable ( ) { public void run ( ) { applyPlugin ( pluginClass ) ; } } ) ; return this ; } public ObjectConfigurationAction plugin ( final String pluginId ) { actions . add ( new Runnable ( ) { public void run ( ) { applyType ( pluginId ) ; } } ) ; return this ; } public ObjectConfigurationAction type ( final Class < ? > pluginClass ) { actions . add ( new Runnable ( ) { public void run ( ) { applyType ( pluginClass ) ; } } ) ; return this ; } private void applyScript ( Object script ) { URI scriptUri = resolver . resolveUri ( script ) ; UriScriptSource scriptSource = new UriScriptSource ( <str> , scriptUri ) ; ClassLoaderScope classLoaderScopeChild = classLoaderScope . createChild ( <str> + scriptUri . toString ( ) ) ; ScriptHandler scriptHandler = scriptHandlerFactory . create ( scriptSource , classLoaderScopeChild ) ; ScriptPlugin configurer = configurerFactory . create ( scriptSource , scriptHandler , classLoaderScopeChild , classLoaderScope , false ) ; for ( Object target : targets ) { configurer . apply ( target ) ; } } private void applyPlugin ( Class < ? extends Plugin > pluginClass ) { applyType ( pluginClass ) ; } private void applyType ( String pluginId ) { for ( Object target : targets ) { if ( target instanceof PluginAware ) { ( ( PluginAware ) target ) . getPluginManager ( ) . apply ( pluginId ) ; } else { throw new UnsupportedOperationException ( String . format ( <str> , pluginId , target . toString ( ) , target . getClass ( ) . getName ( ) ) ) ; } } } private void applyType ( Class < ? > pluginClass ) { for ( Object target : targets ) { if ( target instanceof PluginAware ) { ( ( PluginAware ) target ) . getPluginManager ( ) . apply ( pluginClass ) ; } else { throw new UnsupportedOperationException ( String . format ( <str> , pluginClass . getName ( ) , target . toString ( ) , target . getClass ( ) . getName ( ) ) ) ; } } } public void execute ( ) { if ( targets . isEmpty ( ) ) { to ( defaultTarget ) ; } for ( Runnable action : actions ) { action . run ( ) ; } } } 

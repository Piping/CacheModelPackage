package org . elasticsearch . common . inject ; import org . elasticsearch . common . inject . internal . Errors ; import org . elasticsearch . common . inject . internal . ErrorsException ; import org . elasticsearch . common . inject . spi . MembersInjectorLookup ; import org . elasticsearch . common . inject . spi . ProviderLookup ; class LookupProcessor extends AbstractProcessor { LookupProcessor ( Errors errors ) { super ( errors ) ; } @Override public < T > Boolean visit ( MembersInjectorLookup < T > lookup ) { try { MembersInjector < T > membersInjector = injector . membersInjectorStore . get ( lookup . getType ( ) , errors ) ; lookup . initializeDelegate ( membersInjector ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } return true ; } @Override public < T > Boolean visit ( ProviderLookup < T > lookup ) { try { Provider < T > provider = injector . getProviderOrThrow ( lookup . getKey ( ) , errors ) ; lookup . initializeDelegate ( provider ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } return true ; } } 

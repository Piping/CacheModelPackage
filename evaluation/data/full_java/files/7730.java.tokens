package org . elasticsearch . action . admin . indices . flush ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import java . util . Arrays ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_METADATA ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertBlocked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertNoFailures ; import static org . hamcrest . Matchers . equalTo ; @ClusterScope ( scope = ESIntegTestCase . Scope . TEST ) public class FlushBlocksIT extends ESIntegTestCase { public void testFlushWithBlocks ( ) { createIndex ( <str> ) ; ensureGreen ( <str> ) ; NumShards numShards = getNumShards ( <str> ) ; int docs = between ( <int> , <int> ) ; for ( int i = <int> ; i < docs ; i + + ) { client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( <str> , <str> ) . execute ( ) . actionGet ( ) ; } for ( String blockSetting : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; FlushResponse response = client ( ) . admin ( ) . indices ( ) . prepareFlush ( <str> ) . setWaitIfOngoing ( true ) . execute ( ) . actionGet ( ) ; assertNoFailures ( response ) ; assertThat ( response . getSuccessfulShards ( ) , equalTo ( numShards . totalNumShards ) ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } for ( String blockSetting : Arrays . asList ( SETTING_READ_ONLY , SETTING_BLOCKS_METADATA ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; FlushResponse flushResponse = client ( ) . admin ( ) . indices ( ) . prepareFlush ( <str> ) . get ( ) ; assertBlocked ( flushResponse ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } try { FlushResponse response = client ( ) . admin ( ) . indices ( ) . prepareFlush ( ) . execute ( ) . actionGet ( ) ; assertNoFailures ( response ) ; assertThat ( response . getSuccessfulShards ( ) , equalTo ( numShards . totalNumShards ) ) ; setClusterReadOnly ( true ) ; assertBlocked ( client ( ) . admin ( ) . indices ( ) . prepareFlush ( ) . get ( ) ) ; } finally { setClusterReadOnly ( false ) ; } } } 

package org . elasticsearch . script ; import org . apache . lucene . index . LeafReaderContext ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . search . lookup . SearchLookup ; import java . io . IOException ; import java . util . Map ; public class MockScriptEngine implements ScriptEngineService { public static final String NAME = <str> ; public static class TestPlugin extends Plugin { public TestPlugin ( ) { } @Override public String name ( ) { return NAME ; } @Override public String description ( ) { return <str> ; } public void onModule ( ScriptModule module ) { module . addScriptEngine ( MockScriptEngine . class ) ; } } @Override public String [ ] types ( ) { return new String [ ] { NAME } ; } @Override public String [ ] extensions ( ) { return types ( ) ; } @Override public boolean sandboxed ( ) { return true ; } @Override public Object compile ( String script ) { return script ; } @Override public ExecutableScript executable ( CompiledScript compiledScript , @Nullable Map < String , Object > vars ) { return new AbstractExecutableScript ( ) { @Override public Object run ( ) { return new BytesArray ( ( String ) compiledScript . compiled ( ) ) ; } } ; } @Override public SearchScript search ( CompiledScript compiledScript , SearchLookup lookup , @Nullable Map < String , Object > vars ) { return new SearchScript ( ) { @Override public LeafSearchScript getLeafSearchScript ( LeafReaderContext context ) throws IOException { AbstractSearchScript leafSearchScript = new AbstractSearchScript ( ) { @Override public Object run ( ) { return compiledScript . compiled ( ) ; } } ; leafSearchScript . setLookup ( lookup . getLeafSearchLookup ( context ) ) ; return leafSearchScript ; } @Override public boolean needsScores ( ) { return false ; } } ; } @Override public void scriptRemoved ( @Nullable CompiledScript script ) { } @Override public void close ( ) throws IOException { } } 

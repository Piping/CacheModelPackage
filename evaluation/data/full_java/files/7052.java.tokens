package org . elasticsearch . rest . action . script ; import org . elasticsearch . action . index . IndexRequest ; import org . elasticsearch . action . indexedscripts . put . PutIndexedScriptRequest ; import org . elasticsearch . action . indexedscripts . put . PutIndexedScriptResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import org . elasticsearch . index . VersionType ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import java . io . IOException ; import static org . elasticsearch . rest . RestRequest . Method . POST ; import static org . elasticsearch . rest . RestRequest . Method . PUT ; import static org . elasticsearch . rest . RestStatus . * ; public class RestPutIndexedScriptAction extends BaseRestHandler { @Inject public RestPutIndexedScriptAction ( Settings settings , RestController controller , Client client ) { this ( settings , controller , true , client ) ; } protected RestPutIndexedScriptAction ( Settings settings , RestController controller , boolean registerDefaultHandlers , Client client ) { super ( settings , controller , client ) ; if ( registerDefaultHandlers ) { controller . registerHandler ( POST , <str> , this ) ; controller . registerHandler ( PUT , <str> , this ) ; controller . registerHandler ( PUT , <str> , new CreateHandler ( settings , controller , client ) ) ; controller . registerHandler ( POST , <str> , new CreateHandler ( settings , controller , client ) ) ; } } final class CreateHandler extends BaseRestHandler { protected CreateHandler ( Settings settings , RestController controller , Client client ) { super ( settings , controller , client ) ; } @Override public void handleRequest ( RestRequest request , RestChannel channel , final Client client ) { request . params ( ) . put ( <str> , <str> ) ; RestPutIndexedScriptAction . this . handleRequest ( request , channel , client ) ; } } protected String getScriptLang ( RestRequest request ) { return request . param ( <str> ) ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , Client client ) { PutIndexedScriptRequest putRequest = new PutIndexedScriptRequest ( getScriptLang ( request ) , request . param ( <str> ) ) ; putRequest . version ( request . paramAsLong ( <str> , putRequest . version ( ) ) ) ; putRequest . versionType ( VersionType . fromString ( request . param ( <str> ) , putRequest . versionType ( ) ) ) ; putRequest . source ( request . content ( ) ) ; String sOpType = request . param ( <str> ) ; if ( sOpType ! = null ) { try { putRequest . opType ( IndexRequest . OpType . fromString ( sOpType ) ) ; } catch ( IllegalArgumentException eia ) { try { XContentBuilder builder = channel . newErrorBuilder ( ) ; channel . sendResponse ( new BytesRestResponse ( BAD_REQUEST , builder . startObject ( ) . field ( <str> , eia . getMessage ( ) ) . endObject ( ) ) ) ; return ; } catch ( IOException e1 ) { logger . warn ( <str> , e1 ) ; return ; } } } client . putIndexedScript ( putRequest , new RestBuilderListener < PutIndexedScriptResponse > ( channel ) { @Override public RestResponse buildResponse ( PutIndexedScriptResponse response , XContentBuilder builder ) throws Exception { builder . startObject ( ) . field ( Fields . _ID , response . getId ( ) ) . field ( Fields . _VERSION , response . getVersion ( ) ) . field ( Fields . CREATED , response . isCreated ( ) ) ; builder . endObject ( ) ; RestStatus status = OK ; if ( response . isCreated ( ) ) { status = CREATED ; } return new BytesRestResponse ( status , builder ) ; } } ) ; } static final class Fields { static final XContentBuilderString _VERSION = new XContentBuilderString ( <str> ) ; static final XContentBuilderString _ID = new XContentBuilderString ( <str> ) ; static final XContentBuilderString CREATED = new XContentBuilderString ( <str> ) ; } } 

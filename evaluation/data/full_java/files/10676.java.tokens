package com . google . common . util . concurrent ; import static com . google . common . base . Preconditions . checkNotNull ; import static junit . framework . Assert . assertEquals ; import static junit . framework . Assert . assertNotNull ; import static junit . framework . Assert . assertNull ; import static junit . framework . Assert . assertSame ; import com . google . common . testing . TearDown ; import junit . framework . AssertionFailedError ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . concurrent . SynchronousQueue ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . TimeoutException ; import javax . annotation . Nullable ; public final class TestThread < L > extends Thread implements TearDown { private static final long DUE_DILIGENCE_MILLIS = <int> ; private static final long TIMEOUT_MILLIS = <int> ; private final L lockLikeObject ; private final SynchronousQueue < Request > requestQueue = new SynchronousQueue < Request > ( ) ; private final SynchronousQueue < Response > responseQueue = new SynchronousQueue < Response > ( ) ; private Throwable uncaughtThrowable = null ; public TestThread ( L lockLikeObject , String threadName ) { super ( threadName ) ; this . lockLikeObject = checkNotNull ( lockLikeObject ) ; start ( ) ; } @SuppressWarnings ( <str> ) @Override public void tearDown ( ) throws Exception { stop ( ) ; join ( ) ; if ( uncaughtThrowable ! = null ) { throw ( AssertionFailedError ) new AssertionFailedError ( <str> + getName ( ) ) . initCause ( uncaughtThrowable ) ; } } public void callAndAssertReturns ( String methodName , Object . . . arguments ) throws Exception { checkNotNull ( methodName ) ; checkNotNull ( arguments ) ; sendRequest ( methodName , arguments ) ; assertSame ( null , getResponse ( methodName ) . getResult ( ) ) ; } public void callAndAssertReturns ( boolean expected , String methodName , Object . . . arguments ) throws Exception { checkNotNull ( methodName ) ; checkNotNull ( arguments ) ; sendRequest ( methodName , arguments ) ; assertEquals ( expected , getResponse ( methodName ) . getResult ( ) ) ; } public void callAndAssertReturns ( int expected , String methodName , Object . . . arguments ) throws Exception { checkNotNull ( methodName ) ; checkNotNull ( arguments ) ; sendRequest ( methodName , arguments ) ; assertEquals ( expected , getResponse ( methodName ) . getResult ( ) ) ; } public void callAndAssertThrows ( Class < ? extends Throwable > expected , String methodName , Object . . . arguments ) throws Exception { checkNotNull ( expected ) ; checkNotNull ( methodName ) ; checkNotNull ( arguments ) ; sendRequest ( methodName , arguments ) ; assertEquals ( expected , getResponse ( methodName ) . getThrowable ( ) . getClass ( ) ) ; } public void callAndAssertBlocks ( String methodName , Object . . . arguments ) throws Exception { checkNotNull ( methodName ) ; checkNotNull ( arguments ) ; assertEquals ( false , invokeMethod ( <str> , this ) ) ; sendRequest ( methodName , arguments ) ; Thread . sleep ( DUE_DILIGENCE_MILLIS ) ; assertEquals ( true , invokeMethod ( <str> , this ) ) ; assertNull ( responseQueue . poll ( ) ) ; } public void callAndAssertWaits ( String methodName , Object conditionLikeObject ) throws Exception { checkNotNull ( methodName ) ; checkNotNull ( conditionLikeObject ) ; sendRequest ( methodName , conditionLikeObject ) ; Thread . sleep ( DUE_DILIGENCE_MILLIS ) ; assertEquals ( true , invokeMethod ( <str> , conditionLikeObject ) ) ; assertNull ( responseQueue . poll ( ) ) ; } public void assertPriorCallReturns ( @Nullable String methodName ) throws Exception { assertEquals ( null , getResponse ( methodName ) . getResult ( ) ) ; } public void assertPriorCallReturns ( boolean expected , @Nullable String methodName ) throws Exception { assertEquals ( expected , getResponse ( methodName ) . getResult ( ) ) ; } private void sendRequest ( String methodName , Object . . . arguments ) throws Exception { if ( ! requestQueue . offer ( new Request ( methodName , arguments ) , TIMEOUT_MILLIS , TimeUnit . MILLISECONDS ) ) { throw new TimeoutException ( ) ; } } private Response getResponse ( String methodName ) throws Exception { Response response = responseQueue . poll ( TIMEOUT_MILLIS , TimeUnit . MILLISECONDS ) ; if ( response = = null ) { throw new TimeoutException ( ) ; } assertEquals ( methodName , response . methodName ) ; return response ; } private Object invokeMethod ( String methodName , Object . . . arguments ) throws Exception { return getMethod ( methodName , arguments ) . invoke ( lockLikeObject , arguments ) ; } private Method getMethod ( String methodName , Object . . . arguments ) throws Exception { METHODS : for ( Method method : lockLikeObject . getClass ( ) . getMethods ( ) ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( method . getName ( ) . equals ( methodName ) & & ( parameterTypes . length = = arguments . length ) ) { for ( int i = <int> ; i < arguments . length ; i + + ) { if ( ! parameterTypes [ i ] . isAssignableFrom ( arguments [ i ] . getClass ( ) ) ) { continue METHODS ; } } return method ; } } throw new NoSuchMethodError ( methodName ) ; } @Override public void run ( ) { assertSame ( this , Thread . currentThread ( ) ) ; try { while ( true ) { Request request = requestQueue . take ( ) ; Object result ; try { result = invokeMethod ( request . methodName , request . arguments ) ; } catch ( ThreadDeath death ) { return ; } catch ( InvocationTargetException exception ) { responseQueue . put ( new Response ( request . methodName , null , exception . getTargetException ( ) ) ) ; continue ; } catch ( Throwable throwable ) { responseQueue . put ( new Response ( request . methodName , null , throwable ) ) ; continue ; } responseQueue . put ( new Response ( request . methodName , result , null ) ) ; } } catch ( ThreadDeath death ) { return ; } catch ( InterruptedException ignored ) { } catch ( Throwable uncaught ) { this . uncaughtThrowable = uncaught ; } } private static class Request { final String methodName ; final Object [ ] arguments ; Request ( String methodName , Object [ ] arguments ) { this . methodName = checkNotNull ( methodName ) ; this . arguments = checkNotNull ( arguments ) ; } } private static class Response { final String methodName ; final Object result ; final Throwable throwable ; Response ( String methodName , Object result , Throwable throwable ) { this . methodName = methodName ; this . result = result ; this . throwable = throwable ; } Object getResult ( ) { if ( throwable ! = null ) { throw ( AssertionFailedError ) new AssertionFailedError ( ) . initCause ( throwable ) ; } return result ; } Throwable getThrowable ( ) { assertNotNull ( throwable ) ; return throwable ; } } } 

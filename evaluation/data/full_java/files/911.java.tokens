package org . apache . cassandra . serializers ; import org . apache . cassandra . utils . ByteBufferUtil ; import java . nio . ByteBuffer ; public class FloatSerializer implements TypeSerializer < Float > { public static final FloatSerializer instance = new FloatSerializer ( ) ; public Float deserialize ( ByteBuffer bytes ) { if ( bytes . remaining ( ) = = <int> ) return null ; return ByteBufferUtil . toFloat ( bytes ) ; } public ByteBuffer serialize ( Float value ) { return ( value = = null ) ? ByteBufferUtil . EMPTY_BYTE_BUFFER : ByteBufferUtil . bytes ( value ) ; } public void validate ( ByteBuffer bytes ) throws MarshalException { if ( bytes . remaining ( ) ! = <int> & & bytes . remaining ( ) ! = <int> ) throw new MarshalException ( String . format ( <str> , bytes . remaining ( ) ) ) ; } public String toString ( Float value ) { return value = = null ? <str> : String . valueOf ( value ) ; } public Class < Float > getType ( ) { return Float . class ; } } 

package org . gradle . internal . featurelifecycle ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . internal . SystemProperties ; import org . gradle . util . SingleMessageLogger ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; public class LoggingDeprecatedFeatureHandler implements DeprecatedFeatureHandler { private static final Logger LOGGER = Logging . getLogger ( LoggingDeprecatedFeatureHandler . class ) ; private final Set < String > messages = new HashSet < String > ( ) ; private UsageLocationReporter locationReporter ; public LoggingDeprecatedFeatureHandler ( ) { this ( new UsageLocationReporter ( ) { public void reportLocation ( DeprecatedFeatureUsage usage , StringBuilder target ) { } } ) ; } public LoggingDeprecatedFeatureHandler ( UsageLocationReporter locationReporter ) { this . locationReporter = locationReporter ; } public void setLocationReporter ( UsageLocationReporter locationReporter ) { this . locationReporter = locationReporter ; } public void deprecatedFeatureUsed ( DeprecatedFeatureUsage usage ) { if ( messages . add ( usage . getMessage ( ) ) ) { usage = usage . withStackTrace ( ) ; StringBuilder message = new StringBuilder ( ) ; locationReporter . reportLocation ( usage , message ) ; if ( message . length ( ) > <int> ) { message . append ( SystemProperties . getInstance ( ) . getLineSeparator ( ) ) ; } message . append ( usage . getMessage ( ) ) ; logTraceIfNecessary ( usage . getStack ( ) , message ) ; LOGGER . warn ( message . toString ( ) ) ; } } private void logTraceIfNecessary ( List < StackTraceElement > stack , StringBuilder message ) { if ( isTraceLoggingEnabled ( ) ) { for ( StackTraceElement frame : stack ) { message . append ( SystemProperties . getInstance ( ) . getLineSeparator ( ) ) ; message . append ( <str> ) ; message . append ( frame . toString ( ) ) ; } } } private static boolean isTraceLoggingEnabled ( ) { return Boolean . getBoolean ( SingleMessageLogger . ORG_GRADLE_DEPRECATION_TRACE_PROPERTY_NAME ) ; } } 

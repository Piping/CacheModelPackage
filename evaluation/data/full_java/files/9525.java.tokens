package com . google . common . util . concurrent ; import static com . google . common . base . Preconditions . checkNotNull ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . base . Supplier ; import java . util . concurrent . Callable ; import javax . annotation . Nullable ; @GwtCompatible ( emulated = true ) public final class Callables { private Callables ( ) { } public static < T > Callable < T > returning ( @Nullable final T value ) { return new Callable < T > ( ) { @Override public T call ( ) { return value ; } } ; } @GwtIncompatible ( <str> ) static < T > Callable < T > threadRenaming ( final Callable < T > callable , final Supplier < String > nameSupplier ) { checkNotNull ( nameSupplier ) ; checkNotNull ( callable ) ; return new Callable < T > ( ) { @Override public T call ( ) throws Exception { Thread currentThread = Thread . currentThread ( ) ; String oldName = currentThread . getName ( ) ; boolean restoreName = trySetName ( nameSupplier . get ( ) , currentThread ) ; try { return callable . call ( ) ; } finally { if ( restoreName ) { trySetName ( oldName , currentThread ) ; } } } } ; } @GwtIncompatible ( <str> ) static Runnable threadRenaming ( final Runnable task , final Supplier < String > nameSupplier ) { checkNotNull ( nameSupplier ) ; checkNotNull ( task ) ; return new Runnable ( ) { @Override public void run ( ) { Thread currentThread = Thread . currentThread ( ) ; String oldName = currentThread . getName ( ) ; boolean restoreName = trySetName ( nameSupplier . get ( ) , currentThread ) ; try { task . run ( ) ; } finally { if ( restoreName ) { trySetName ( oldName , currentThread ) ; } } } } ; } @GwtIncompatible ( <str> ) private static boolean trySetName ( final String threadName , Thread currentThread ) { try { currentThread . setName ( threadName ) ; return true ; } catch ( SecurityException e ) { return false ; } } } 

package org . eclipse . debug . internal . ui . viewers ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelChangedListener ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelProxy ; import org . eclipse . jface . viewers . StructuredSelection ; public class TableUpdatePolicy extends org . eclipse . debug . internal . ui . viewers . AbstractUpdatePolicy implements IModelChangedListener { @Override public void modelChanged ( IModelDelta delta , IModelProxy proxy ) { updateNodes ( new IModelDelta [ ] { delta } ) ; } private void handleState ( IModelDelta node ) { AsynchronousViewer viewer = getViewer ( ) ; if ( viewer ! = null ) { Object element = node . getElement ( ) ; viewer . update ( element ) ; updateSelection ( element , node . getFlags ( ) ) ; } } private void handleContent ( IModelDelta node ) { AsynchronousViewer viewer = getViewer ( ) ; if ( viewer ! = null ) { Object element = node . getElement ( ) ; viewer . refresh ( element ) ; updateSelection ( element , node . getFlags ( ) ) ; } } private void updateSelection ( Object element , int flags ) { AsynchronousViewer viewer = getViewer ( ) ; if ( viewer ! = null ) { if ( ( flags & IModelDelta . SELECT ) ! = <int> ) { getViewer ( ) . setSelection ( new StructuredSelection ( element ) ) ; } } } protected void updateNodes ( IModelDelta [ ] nodes ) { for ( int i = <int> ; i < nodes . length ; i + + ) { IModelDelta node = nodes [ i ] ; int flags = node . getFlags ( ) ; if ( ( flags & IModelDelta . STATE ) ! = <int> ) { handleState ( node ) ; } if ( ( flags & IModelDelta . CONTENT ) ! = <int> ) { handleContent ( node ) ; } if ( ( flags & IModelDelta . ADDED ) ! = <int> ) { handleAdd ( node ) ; } if ( ( flags & IModelDelta . REMOVED ) ! = <int> ) { handleRemove ( node ) ; } if ( ( flags & IModelDelta . REPLACED ) ! = <int> ) { handleReplace ( node ) ; } if ( ( flags & IModelDelta . INSERTED ) ! = <int> ) { handleInsert ( node ) ; } IModelDelta [ ] childNodes = node . getChildDeltas ( ) ; updateNodes ( childNodes ) ; } } private void handleInsert ( IModelDelta node ) { AsynchronousTableViewer viewer = ( AsynchronousTableViewer ) getViewer ( ) ; if ( viewer ! = null ) { viewer . insert ( node . getElement ( ) , node . getIndex ( ) ) ; updateSelection ( node . getElement ( ) , node . getFlags ( ) ) ; } } private void handleReplace ( IModelDelta node ) { AsynchronousTableViewer viewer = ( AsynchronousTableViewer ) getViewer ( ) ; if ( viewer ! = null ) { viewer . replace ( node . getElement ( ) , node . getReplacementElement ( ) ) ; updateSelection ( node . getReplacementElement ( ) , node . getFlags ( ) ) ; } } protected void handleAdd ( IModelDelta node ) { ( ( AsynchronousTableViewer ) getViewer ( ) ) . add ( node . getElement ( ) ) ; updateSelection ( node . getElement ( ) , node . getFlags ( ) ) ; } protected void handleRemove ( IModelDelta node ) { ( ( AsynchronousTableViewer ) getViewer ( ) ) . remove ( node . getElement ( ) ) ; } } 

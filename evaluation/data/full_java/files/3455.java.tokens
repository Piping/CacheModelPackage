package org . nd4j . linalg . factory ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . rng . DefaultRandom ; import org . nd4j . linalg . api . rng . Random ; import static org . junit . Assert . assertEquals ; public class Nd4jTest extends BaseNd4jTest { public Nd4jTest ( ) { super ( ) ; } public Nd4jTest ( String name ) { super ( name ) ; } public Nd4jTest ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public Nd4jTest ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testRandShapeAndRNG ( ) { INDArray ret = Nd4j . rand ( new int [ ] { <int> , <int> } , new DefaultRandom ( <int> ) ) ; INDArray ret2 = Nd4j . rand ( new int [ ] { <int> , <int> } , new DefaultRandom ( <int> ) ) ; assertEquals ( ret , ret2 ) ; } @Test public void testRandShapeAndMinMax ( ) { INDArray ret = Nd4j . rand ( new int [ ] { <int> , <int> } , - <float> , <float> , new DefaultRandom ( <int> ) ) ; INDArray ret2 = Nd4j . rand ( new int [ ] { <int> , <int> } , - <float> , <float> , new DefaultRandom ( <int> ) ) ; assertEquals ( ret , ret2 ) ; } @Test public void testCreateShape ( ) { INDArray ret = Nd4j . create ( new int [ ] { <int> , <int> } ) ; assertEquals ( ret . length ( ) , <int> ) ; } @Test public void testGetRandom ( ) { Random r = Nd4j . getRandom ( ) ; Random t = Nd4j . getRandom ( ) ; assertEquals ( r , t ) ; } @Test public void testGetRandomSetSeed ( ) { Random r = Nd4j . getRandom ( ) ; Random t = Nd4j . getRandom ( ) ; assertEquals ( r , t ) ; r . setSeed ( <int> ) ; assertEquals ( r , t ) ; } @Test public void testOrdering ( ) { INDArray fNDArray = Nd4j . create ( new float [ ] { <float> } , NDArrayFactory . FORTRAN ) ; assertEquals ( NDArrayFactory . FORTRAN , fNDArray . ordering ( ) ) ; INDArray cNDArray = Nd4j . create ( new float [ ] { <float> } , NDArrayFactory . C ) ; assertEquals ( NDArrayFactory . C , cNDArray . ordering ( ) ) ; } @Override public char ordering ( ) { return <str> ; } } 

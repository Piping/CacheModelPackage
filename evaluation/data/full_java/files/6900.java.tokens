package org . elasticsearch . monitor . process ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class ProcessInfo implements Streamable , ToXContent { long refreshInterval ; private long id ; private boolean mlockall ; ProcessInfo ( ) { } public ProcessInfo ( long id , boolean mlockall ) { this . id = id ; this . mlockall = mlockall ; } public long refreshInterval ( ) { return this . refreshInterval ; } public long getRefreshInterval ( ) { return this . refreshInterval ; } public long getId ( ) { return id ; } public boolean isMlockall ( ) { return mlockall ; } static final class Fields { static final XContentBuilderString PROCESS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString REFRESH_INTERVAL = new XContentBuilderString ( <str> ) ; static final XContentBuilderString REFRESH_INTERVAL_IN_MILLIS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString ID = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MLOCKALL = new XContentBuilderString ( <str> ) ; } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . PROCESS ) ; builder . timeValueField ( Fields . REFRESH_INTERVAL_IN_MILLIS , Fields . REFRESH_INTERVAL , refreshInterval ) ; builder . field ( Fields . ID , id ) ; builder . field ( Fields . MLOCKALL , mlockall ) ; builder . endObject ( ) ; return builder ; } public static ProcessInfo readProcessInfo ( StreamInput in ) throws IOException { ProcessInfo info = new ProcessInfo ( ) ; info . readFrom ( in ) ; return info ; } @Override public void readFrom ( StreamInput in ) throws IOException { refreshInterval = in . readLong ( ) ; id = in . readLong ( ) ; mlockall = in . readBoolean ( ) ; } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeLong ( refreshInterval ) ; out . writeLong ( id ) ; out . writeBoolean ( mlockall ) ; } } 

package org . nd4j . linalg . api . indexing . resolve ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . INDArrayIndex ; import org . nd4j . linalg . indexing . NDArrayIndex ; import org . nd4j . linalg . indexing . PointIndex ; import static org . junit . Assert . * ; import static org . junit . Assert . assertTrue ; public class NDArrayIndexResolveTests extends BaseNd4jTest { public NDArrayIndexResolveTests ( ) { } public NDArrayIndexResolveTests ( String name ) { super ( name ) ; } public NDArrayIndexResolveTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public NDArrayIndexResolveTests ( Nd4jBackend backend ) { super ( backend ) ; } @Test public void testResolvePoint ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) . reshape ( <int> , <int> ) ; INDArrayIndex [ ] test = NDArrayIndex . resolve ( arr . shape ( ) , NDArrayIndex . point ( <int> ) ) ; INDArrayIndex [ ] assertion = { NDArrayIndex . point ( <int> ) , NDArrayIndex . all ( ) } ; assertArrayEquals ( assertion , test ) ; INDArrayIndex [ ] allAssertion = { NDArrayIndex . all ( ) , NDArrayIndex . all ( ) } ; assertArrayEquals ( allAssertion , NDArrayIndex . resolve ( arr . shape ( ) , NDArrayIndex . all ( ) ) ) ; INDArrayIndex [ ] allAndOne = new INDArrayIndex [ ] { NDArrayIndex . all ( ) , NDArrayIndex . point ( <int> ) } ; assertArrayEquals ( allAndOne , NDArrayIndex . resolve ( arr . shape ( ) , allAndOne ) ) ; } @Test public void testResolvePointVector ( ) { INDArray arr = Nd4j . linspace ( <int> , <int> , <int> ) ; INDArrayIndex [ ] getPoint = { NDArrayIndex . point ( <int> ) } ; INDArrayIndex [ ] resolved = NDArrayIndex . resolve ( arr . shape ( ) , getPoint ) ; if ( getPoint . length = = resolved . length ) assertArrayEquals ( getPoint , resolved ) ; else { assertEquals ( <int> , resolved . length ) ; assertTrue ( resolved [ <int> ] instanceof PointIndex ) ; assertEquals ( <int> , resolved [ <int> ] . current ( ) ) ; assertTrue ( resolved [ <int> ] instanceof PointIndex ) ; assertEquals ( <int> , resolved [ <int> ] . current ( ) ) ; } } @Override public char ordering ( ) { return <str> ; } } 

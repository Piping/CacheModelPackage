package org . elasticsearch . index . fielddata ; import com . carrotsearch . hppc . ObjectLongHashMap ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . io . stream . Streamable ; import org . elasticsearch . common . unit . ByteSizeValue ; import org . elasticsearch . common . xcontent . ToXContent ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentBuilderString ; import java . io . IOException ; public class FieldDataStats implements Streamable , ToXContent { long memorySize ; long evictions ; @Nullable ObjectLongHashMap < String > fields ; public FieldDataStats ( ) { } public FieldDataStats ( long memorySize , long evictions , @Nullable ObjectLongHashMap < String > fields ) { this . memorySize = memorySize ; this . evictions = evictions ; this . fields = fields ; } public void add ( FieldDataStats stats ) { this . memorySize + = stats . memorySize ; this . evictions + = stats . evictions ; if ( stats . fields ! = null ) { if ( fields = = null ) { fields = stats . fields . clone ( ) ; } else { assert ! stats . fields . containsKey ( null ) ; final Object [ ] keys = stats . fields . keys ; final long [ ] values = stats . fields . values ; for ( int i = <int> ; i < keys . length ; i + + ) { if ( keys [ i ] ! = null ) { fields . addTo ( ( String ) keys [ i ] , values [ i ] ) ; } } } } } public long getMemorySizeInBytes ( ) { return this . memorySize ; } public ByteSizeValue getMemorySize ( ) { return new ByteSizeValue ( memorySize ) ; } public long getEvictions ( ) { return this . evictions ; } @Nullable public ObjectLongHashMap < String > getFields ( ) { return fields ; } public static FieldDataStats readFieldDataStats ( StreamInput in ) throws IOException { FieldDataStats stats = new FieldDataStats ( ) ; stats . readFrom ( in ) ; return stats ; } @Override public void readFrom ( StreamInput in ) throws IOException { memorySize = in . readVLong ( ) ; evictions = in . readVLong ( ) ; if ( in . readBoolean ( ) ) { int size = in . readVInt ( ) ; fields = new ObjectLongHashMap < > ( size ) ; for ( int i = <int> ; i < size ; i + + ) { fields . put ( in . readString ( ) , in . readVLong ( ) ) ; } } } @Override public void writeTo ( StreamOutput out ) throws IOException { out . writeVLong ( memorySize ) ; out . writeVLong ( evictions ) ; if ( fields = = null ) { out . writeBoolean ( false ) ; } else { out . writeBoolean ( true ) ; out . writeVInt ( fields . size ( ) ) ; assert ! fields . containsKey ( null ) ; final Object [ ] keys = fields . keys ; final long [ ] values = fields . values ; for ( int i = <int> ; i < keys . length ; i + + ) { if ( keys [ i ] ! = null ) { out . writeString ( ( String ) keys [ i ] ) ; out . writeVLong ( values [ i ] ) ; } } } } @Override public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( Fields . FIELDDATA ) ; builder . byteSizeField ( Fields . MEMORY_SIZE_IN_BYTES , Fields . MEMORY_SIZE , memorySize ) ; builder . field ( Fields . EVICTIONS , getEvictions ( ) ) ; if ( fields ! = null ) { builder . startObject ( Fields . FIELDS ) ; assert ! fields . containsKey ( null ) ; final Object [ ] keys = fields . keys ; final long [ ] values = fields . values ; for ( int i = <int> ; i < keys . length ; i + + ) { if ( keys [ i ] ! = null ) { builder . startObject ( ( String ) keys [ i ] , XContentBuilder . FieldCaseConversion . NONE ) ; builder . byteSizeField ( Fields . MEMORY_SIZE_IN_BYTES , Fields . MEMORY_SIZE , values [ i ] ) ; builder . endObject ( ) ; } } builder . endObject ( ) ; } builder . endObject ( ) ; return builder ; } static final class Fields { static final XContentBuilderString FIELDDATA = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MEMORY_SIZE = new XContentBuilderString ( <str> ) ; static final XContentBuilderString MEMORY_SIZE_IN_BYTES = new XContentBuilderString ( <str> ) ; static final XContentBuilderString EVICTIONS = new XContentBuilderString ( <str> ) ; static final XContentBuilderString FIELDS = new XContentBuilderString ( <str> ) ; } } 

package io . netty . handler . codec . http ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import org . junit . Test ; import java . nio . charset . Charset ; import static org . junit . Assert . * ; public class HttpRequestEncoderTest { @Test public void testUriWithoutPath ( ) throws Exception { HttpRequestEncoder encoder = new HttpRequestEncoder ( ) ; ByteBuf buffer = Unpooled . buffer ( <int> ) ; encoder . encodeInitialLine ( buffer , new DefaultHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . GET , <str> ) ) ; String req = buffer . toString ( Charset . forName ( <str> ) ) ; assertEquals ( <str> , req ) ; } @Test public void testUriWithoutPath2 ( ) throws Exception { HttpRequestEncoder encoder = new HttpRequestEncoder ( ) ; ByteBuf buffer = Unpooled . buffer ( <int> ) ; encoder . encodeInitialLine ( buffer , new DefaultHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . GET , <str> ) ) ; String req = buffer . toString ( Charset . forName ( <str> ) ) ; assertEquals ( <str> , req ) ; } @Test public void testUriWithPath ( ) throws Exception { HttpRequestEncoder encoder = new HttpRequestEncoder ( ) ; ByteBuf buffer = Unpooled . buffer ( <int> ) ; encoder . encodeInitialLine ( buffer , new DefaultHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . GET , <str> ) ) ; String req = buffer . toString ( Charset . forName ( <str> ) ) ; assertEquals ( <str> , req ) ; } @Test public void testAbsPath ( ) throws Exception { HttpRequestEncoder encoder = new HttpRequestEncoder ( ) ; ByteBuf buffer = Unpooled . buffer ( <int> ) ; encoder . encodeInitialLine ( buffer , new DefaultHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . GET , <str> ) ) ; String req = buffer . toString ( Charset . forName ( <str> ) ) ; assertEquals ( <str> , req ) ; } @Test public void testEmptyAbsPath ( ) throws Exception { HttpRequestEncoder encoder = new HttpRequestEncoder ( ) ; ByteBuf buffer = Unpooled . buffer ( <int> ) ; encoder . encodeInitialLine ( buffer , new DefaultHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . GET , <str> ) ) ; String req = buffer . toString ( Charset . forName ( <str> ) ) ; assertEquals ( <str> , req ) ; } @Test public void testQueryStringPath ( ) throws Exception { HttpRequestEncoder encoder = new HttpRequestEncoder ( ) ; ByteBuf buffer = Unpooled . buffer ( <int> ) ; encoder . encodeInitialLine ( buffer , new DefaultHttpRequest ( HttpVersion . HTTP_1_1 , HttpMethod . GET , <str> ) ) ; String req = buffer . toString ( Charset . forName ( <str> ) ) ; assertEquals ( <str> , req ) ; } } 

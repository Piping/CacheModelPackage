package org . elasticsearch . search . aggregations . bucket . significant ; import org . elasticsearch . search . aggregations . InternalMultiBucketAggregation ; import org . elasticsearch . search . aggregations . bucket . MultiBucketsAggregation ; import java . util . List ; public interface SignificantTerms extends MultiBucketsAggregation , Iterable < SignificantTerms . Bucket > { static abstract class Bucket extends InternalMultiBucketAggregation . InternalBucket { long subsetDf ; long subsetSize ; long supersetDf ; long supersetSize ; protected Bucket ( long subsetSize , long supersetSize ) { this . subsetSize = subsetSize ; this . supersetSize = supersetSize ; } Bucket ( long subsetDf , long subsetSize , long supersetDf , long supersetSize ) { this ( subsetSize , supersetSize ) ; this . subsetDf = subsetDf ; this . supersetDf = supersetDf ; } abstract int compareTerm ( SignificantTerms . Bucket other ) ; public abstract double getSignificanceScore ( ) ; abstract Number getKeyAsNumber ( ) ; public long getSubsetDf ( ) { return subsetDf ; } public long getSupersetDf ( ) { return supersetDf ; } public long getSupersetSize ( ) { return supersetSize ; } public long getSubsetSize ( ) { return subsetSize ; } } @Override List < Bucket > getBuckets ( ) ; Bucket getBucketByKey ( String term ) ; } 

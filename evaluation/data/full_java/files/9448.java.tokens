package com . google . common . io ; import static com . google . common . base . Preconditions . checkNotNull ; import java . io . IOException ; import java . io . InputStream ; import java . util . Iterator ; import javax . annotation . Nullable ; final class MultiInputStream extends InputStream { private Iterator < ? extends ByteSource > it ; private InputStream in ; public MultiInputStream ( Iterator < ? extends ByteSource > it ) throws IOException { this . it = checkNotNull ( it ) ; advance ( ) ; } @Override public void close ( ) throws IOException { if ( in ! = null ) { try { in . close ( ) ; } finally { in = null ; } } } private void advance ( ) throws IOException { close ( ) ; if ( it . hasNext ( ) ) { in = it . next ( ) . openStream ( ) ; } } @Override public int available ( ) throws IOException { if ( in = = null ) { return <int> ; } return in . available ( ) ; } @Override public boolean markSupported ( ) { return false ; } @Override public int read ( ) throws IOException { if ( in = = null ) { return - <int> ; } int result = in . read ( ) ; if ( result = = - <int> ) { advance ( ) ; return read ( ) ; } return result ; } @Override public int read ( @Nullable byte [ ] b , int off , int len ) throws IOException { if ( in = = null ) { return - <int> ; } int result = in . read ( b , off , len ) ; if ( result = = - <int> ) { advance ( ) ; return read ( b , off , len ) ; } return result ; } @Override public long skip ( long n ) throws IOException { if ( in = = null | | n < = <int> ) { return <int> ; } long result = in . skip ( n ) ; if ( result ! = <int> ) { return result ; } if ( read ( ) = = - <int> ) { return <int> ; } return <int> + in . skip ( n - <int> ) ; } } 

package org . elasticsearch . search . aggregations . pipeline ; import org . elasticsearch . action . index . IndexRequestBuilder ; import org . elasticsearch . action . search . SearchResponse ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram ; import org . elasticsearch . search . aggregations . bucket . histogram . Histogram . Bucket ; import org . elasticsearch . search . aggregations . bucket . terms . Terms ; import org . elasticsearch . search . aggregations . bucket . terms . Terms . Order ; import org . elasticsearch . search . aggregations . metrics . sum . Sum ; import org . elasticsearch . search . aggregations . pipeline . BucketHelpers . GapPolicy ; import org . elasticsearch . search . aggregations . pipeline . bucketmetrics . stats . StatsBucket ; import org . elasticsearch . test . ESIntegTestCase ; import java . util . ArrayList ; import java . util . List ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . search . aggregations . AggregationBuilders . histogram ; import static org . elasticsearch . search . aggregations . AggregationBuilders . sum ; import static org . elasticsearch . search . aggregations . AggregationBuilders . terms ; import static org . elasticsearch . search . aggregations . pipeline . PipelineAggregatorBuilders . statsBucket ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertSearchResponse ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . core . IsNull . notNullValue ; @ESIntegTestCase.SuiteScopeTestCase public class StatsBucketIT extends ESIntegTestCase { private static final String SINGLE_VALUED_FIELD_NAME = <str> ; static int numDocs ; static int interval ; static int minRandomValue ; static int maxRandomValue ; static int numValueBuckets ; static long [ ] valueCounts ; @Override public void setupSuiteScopeCluster ( ) throws Exception { createIndex ( <str> ) ; createIndex ( <str> ) ; numDocs = randomIntBetween ( <int> , <int> ) ; interval = randomIntBetween ( <int> , <int> ) ; minRandomValue = <int> ; maxRandomValue = <int> ; numValueBuckets = ( ( maxRandomValue - minRandomValue ) / interval ) + <int> ; valueCounts = new long [ numValueBuckets ] ; List < IndexRequestBuilder > builders = new ArrayList < > ( ) ; for ( int i = <int> ; i < numDocs ; i + + ) { int fieldValue = randomIntBetween ( minRandomValue , maxRandomValue ) ; builders . add ( client ( ) . prepareIndex ( <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( SINGLE_VALUED_FIELD_NAME , fieldValue ) . field ( <str> , <str> + ( i % interval ) ) . endObject ( ) ) ) ; final int bucket = ( fieldValue / interval ) ; valueCounts [ bucket ] + + ; } assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , SINGLE_VALUED_FIELD_NAME , <str> ) ) ; for ( int i = <int> ; i < <int> ; i + + ) { builders . add ( client ( ) . prepareIndex ( <str> , <str> , <str> + i ) . setSource ( jsonBuilder ( ) . startObject ( ) . field ( SINGLE_VALUED_FIELD_NAME , i * <int> ) . endObject ( ) ) ) ; } indexRandom ( true , builders ) ; ensureSearchable ( ) ; } public void testDocCountTopLevel ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( histogram ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) . interval ( interval ) . extendedBounds ( ( long ) minRandomValue , ( long ) maxRandomValue ) ) . addAggregation ( statsBucket ( <str> ) . setBucketsPaths ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Histogram histo = response . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; assertThat ( histo . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = histo . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( numValueBuckets ) ) ; double sum = <int> ; int count = <int> ; double min = Double . POSITIVE_INFINITY ; double max = Double . NEGATIVE_INFINITY ; for ( int i = <int> ; i < numValueBuckets ; + + i ) { Histogram . Bucket bucket = buckets . get ( i ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( ( Number ) bucket . getKey ( ) ) . longValue ( ) , equalTo ( ( long ) i * interval ) ) ; assertThat ( bucket . getDocCount ( ) , equalTo ( valueCounts [ i ] ) ) ; count + + ; sum + = bucket . getDocCount ( ) ; min = Math . min ( min , bucket . getDocCount ( ) ) ; max = Math . max ( max , bucket . getDocCount ( ) ) ; } double avgValue = count = = <int> ? Double . NaN : ( sum / count ) ; StatsBucket statsBucketValue = response . getAggregations ( ) . get ( <str> ) ; assertThat ( statsBucketValue , notNullValue ( ) ) ; assertThat ( statsBucketValue . getName ( ) , equalTo ( <str> ) ) ; assertThat ( statsBucketValue . getAvg ( ) , equalTo ( avgValue ) ) ; assertThat ( statsBucketValue . getMin ( ) , equalTo ( min ) ) ; assertThat ( statsBucketValue . getMax ( ) , equalTo ( max ) ) ; } public void testDocCountAsSubAgg ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . order ( Order . term ( true ) ) . subAggregation ( histogram ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) . interval ( interval ) . extendedBounds ( ( long ) minRandomValue , ( long ) maxRandomValue ) ) . subAggregation ( statsBucket ( <str> ) . setBucketsPaths ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertThat ( terms , notNullValue ( ) ) ; assertThat ( terms . getName ( ) , equalTo ( <str> ) ) ; List < Terms . Bucket > termsBuckets = terms . getBuckets ( ) ; assertThat ( termsBuckets . size ( ) , equalTo ( interval ) ) ; for ( int i = <int> ; i < interval ; + + i ) { Terms . Bucket termsBucket = termsBuckets . get ( i ) ; assertThat ( termsBucket , notNullValue ( ) ) ; assertThat ( ( String ) termsBucket . getKey ( ) , equalTo ( <str> + ( i % interval ) ) ) ; Histogram histo = termsBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; assertThat ( histo . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = histo . getBuckets ( ) ; double sum = <int> ; int count = <int> ; double min = Double . POSITIVE_INFINITY ; double max = Double . NEGATIVE_INFINITY ; for ( int j = <int> ; j < numValueBuckets ; + + j ) { Histogram . Bucket bucket = buckets . get ( j ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( ( Number ) bucket . getKey ( ) ) . longValue ( ) , equalTo ( ( long ) j * interval ) ) ; count + + ; sum + = bucket . getDocCount ( ) ; min = Math . min ( min , bucket . getDocCount ( ) ) ; max = Math . max ( max , bucket . getDocCount ( ) ) ; } double avgValue = count = = <int> ? Double . NaN : ( sum / count ) ; StatsBucket statsBucketValue = termsBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( statsBucketValue , notNullValue ( ) ) ; assertThat ( statsBucketValue . getName ( ) , equalTo ( <str> ) ) ; assertThat ( statsBucketValue . getAvg ( ) , equalTo ( avgValue ) ) ; assertThat ( statsBucketValue . getMin ( ) , equalTo ( min ) ) ; assertThat ( statsBucketValue . getMax ( ) , equalTo ( max ) ) ; } } public void testMetricTopLevel ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . subAggregation ( sum ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) ) ) . addAggregation ( statsBucket ( <str> ) . setBucketsPaths ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertThat ( terms , notNullValue ( ) ) ; assertThat ( terms . getName ( ) , equalTo ( <str> ) ) ; List < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( interval ) ) ; double bucketSum = <int> ; int count = <int> ; double min = Double . POSITIVE_INFINITY ; double max = Double . NEGATIVE_INFINITY ; for ( int i = <int> ; i < interval ; + + i ) { Terms . Bucket bucket = buckets . get ( i ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( String ) bucket . getKey ( ) , equalTo ( <str> + ( i % interval ) ) ) ; assertThat ( bucket . getDocCount ( ) , greaterThan ( <int> l ) ) ; Sum sum = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; count + + ; bucketSum + = sum . value ( ) ; min = Math . min ( min , sum . value ( ) ) ; max = Math . max ( max , sum . value ( ) ) ; } double avgValue = count = = <int> ? Double . NaN : ( bucketSum / count ) ; StatsBucket statsBucketValue = response . getAggregations ( ) . get ( <str> ) ; assertThat ( statsBucketValue , notNullValue ( ) ) ; assertThat ( statsBucketValue . getName ( ) , equalTo ( <str> ) ) ; assertThat ( statsBucketValue . getAvg ( ) , equalTo ( avgValue ) ) ; assertThat ( statsBucketValue . getMin ( ) , equalTo ( min ) ) ; assertThat ( statsBucketValue . getMax ( ) , equalTo ( max ) ) ; } public void testMetricAsSubAgg ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . order ( Order . term ( true ) ) . subAggregation ( histogram ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) . interval ( interval ) . extendedBounds ( ( long ) minRandomValue , ( long ) maxRandomValue ) . subAggregation ( sum ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) ) ) . subAggregation ( statsBucket ( <str> ) . setBucketsPaths ( <str> ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertThat ( terms , notNullValue ( ) ) ; assertThat ( terms . getName ( ) , equalTo ( <str> ) ) ; List < Terms . Bucket > termsBuckets = terms . getBuckets ( ) ; assertThat ( termsBuckets . size ( ) , equalTo ( interval ) ) ; for ( int i = <int> ; i < interval ; + + i ) { Terms . Bucket termsBucket = termsBuckets . get ( i ) ; assertThat ( termsBucket , notNullValue ( ) ) ; assertThat ( ( String ) termsBucket . getKey ( ) , equalTo ( <str> + ( i % interval ) ) ) ; Histogram histo = termsBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; assertThat ( histo . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = histo . getBuckets ( ) ; double bucketSum = <int> ; int count = <int> ; double min = Double . POSITIVE_INFINITY ; double max = Double . NEGATIVE_INFINITY ; for ( int j = <int> ; j < numValueBuckets ; + + j ) { Histogram . Bucket bucket = buckets . get ( j ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( ( Number ) bucket . getKey ( ) ) . longValue ( ) , equalTo ( ( long ) j * interval ) ) ; if ( bucket . getDocCount ( ) ! = <int> ) { Sum sum = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; count + + ; bucketSum + = sum . value ( ) ; min = Math . min ( min , sum . value ( ) ) ; max = Math . max ( max , sum . value ( ) ) ; } } double avgValue = count = = <int> ? Double . NaN : ( bucketSum / count ) ; StatsBucket statsBucketValue = termsBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( statsBucketValue , notNullValue ( ) ) ; assertThat ( statsBucketValue . getName ( ) , equalTo ( <str> ) ) ; assertThat ( statsBucketValue . getAvg ( ) , equalTo ( avgValue ) ) ; assertThat ( statsBucketValue . getMin ( ) , equalTo ( min ) ) ; assertThat ( statsBucketValue . getMax ( ) , equalTo ( max ) ) ; } } public void testMetricAsSubAggWithInsertZeros ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . order ( Order . term ( true ) ) . subAggregation ( histogram ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) . interval ( interval ) . extendedBounds ( ( long ) minRandomValue , ( long ) maxRandomValue ) . subAggregation ( sum ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) ) ) . subAggregation ( statsBucket ( <str> ) . setBucketsPaths ( <str> ) . gapPolicy ( GapPolicy . INSERT_ZEROS ) ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertThat ( terms , notNullValue ( ) ) ; assertThat ( terms . getName ( ) , equalTo ( <str> ) ) ; List < Terms . Bucket > termsBuckets = terms . getBuckets ( ) ; assertThat ( termsBuckets . size ( ) , equalTo ( interval ) ) ; for ( int i = <int> ; i < interval ; + + i ) { Terms . Bucket termsBucket = termsBuckets . get ( i ) ; assertThat ( termsBucket , notNullValue ( ) ) ; assertThat ( ( String ) termsBucket . getKey ( ) , equalTo ( <str> + ( i % interval ) ) ) ; Histogram histo = termsBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; assertThat ( histo . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = histo . getBuckets ( ) ; double bucketSum = <int> ; int count = <int> ; double min = Double . POSITIVE_INFINITY ; double max = Double . NEGATIVE_INFINITY ; for ( int j = <int> ; j < numValueBuckets ; + + j ) { Histogram . Bucket bucket = buckets . get ( j ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( ( Number ) bucket . getKey ( ) ) . longValue ( ) , equalTo ( ( long ) j * interval ) ) ; Sum sum = bucket . getAggregations ( ) . get ( <str> ) ; assertThat ( sum , notNullValue ( ) ) ; count + + ; bucketSum + = sum . value ( ) ; min = Math . min ( min , sum . value ( ) ) ; max = Math . max ( max , sum . value ( ) ) ; } double avgValue = count = = <int> ? Double . NaN : ( bucketSum / count ) ; StatsBucket statsBucketValue = termsBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( statsBucketValue , notNullValue ( ) ) ; assertThat ( statsBucketValue . getName ( ) , equalTo ( <str> ) ) ; assertThat ( statsBucketValue . getAvg ( ) , equalTo ( avgValue ) ) ; assertThat ( statsBucketValue . getMin ( ) , equalTo ( min ) ) ; assertThat ( statsBucketValue . getMax ( ) , equalTo ( max ) ) ; } } public void testNoBuckets ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . exclude ( <str> ) . subAggregation ( sum ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) ) ) . addAggregation ( statsBucket ( <str> ) . setBucketsPaths ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertThat ( terms , notNullValue ( ) ) ; assertThat ( terms . getName ( ) , equalTo ( <str> ) ) ; List < Terms . Bucket > buckets = terms . getBuckets ( ) ; assertThat ( buckets . size ( ) , equalTo ( <int> ) ) ; StatsBucket statsBucketValue = response . getAggregations ( ) . get ( <str> ) ; assertThat ( statsBucketValue , notNullValue ( ) ) ; assertThat ( statsBucketValue . getName ( ) , equalTo ( <str> ) ) ; assertThat ( statsBucketValue . getAvg ( ) , equalTo ( Double . NaN ) ) ; } public void testNested ( ) throws Exception { SearchResponse response = client ( ) . prepareSearch ( <str> ) . addAggregation ( terms ( <str> ) . field ( <str> ) . order ( Order . term ( true ) ) . subAggregation ( histogram ( <str> ) . field ( SINGLE_VALUED_FIELD_NAME ) . interval ( interval ) . extendedBounds ( ( long ) minRandomValue , ( long ) maxRandomValue ) ) . subAggregation ( statsBucket ( <str> ) . setBucketsPaths ( <str> ) ) ) . addAggregation ( statsBucket ( <str> ) . setBucketsPaths ( <str> ) ) . execute ( ) . actionGet ( ) ; assertSearchResponse ( response ) ; Terms terms = response . getAggregations ( ) . get ( <str> ) ; assertThat ( terms , notNullValue ( ) ) ; assertThat ( terms . getName ( ) , equalTo ( <str> ) ) ; List < Terms . Bucket > termsBuckets = terms . getBuckets ( ) ; assertThat ( termsBuckets . size ( ) , equalTo ( interval ) ) ; double aggTermsSum = <int> ; int aggTermsCount = <int> ; double min = Double . POSITIVE_INFINITY ; double max = Double . NEGATIVE_INFINITY ; for ( int i = <int> ; i < interval ; + + i ) { Terms . Bucket termsBucket = termsBuckets . get ( i ) ; assertThat ( termsBucket , notNullValue ( ) ) ; assertThat ( ( String ) termsBucket . getKey ( ) , equalTo ( <str> + ( i % interval ) ) ) ; Histogram histo = termsBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( histo , notNullValue ( ) ) ; assertThat ( histo . getName ( ) , equalTo ( <str> ) ) ; List < ? extends Bucket > buckets = histo . getBuckets ( ) ; double aggHistoSum = <int> ; int aggHistoCount = <int> ; for ( int j = <int> ; j < numValueBuckets ; + + j ) { Histogram . Bucket bucket = buckets . get ( j ) ; assertThat ( bucket , notNullValue ( ) ) ; assertThat ( ( ( Number ) bucket . getKey ( ) ) . longValue ( ) , equalTo ( ( long ) j * interval ) ) ; aggHistoCount + + ; aggHistoSum + = bucket . getDocCount ( ) ; } double avgHistoValue = aggHistoCount = = <int> ? Double . NaN : ( aggHistoSum / aggHistoCount ) ; StatsBucket statsBucketValue = termsBucket . getAggregations ( ) . get ( <str> ) ; assertThat ( statsBucketValue , notNullValue ( ) ) ; assertThat ( statsBucketValue . getName ( ) , equalTo ( <str> ) ) ; assertThat ( statsBucketValue . getAvg ( ) , equalTo ( avgHistoValue ) ) ; aggTermsCount + + ; aggTermsSum + = avgHistoValue ; min = Math . min ( min , avgHistoValue ) ; max = Math . max ( max , avgHistoValue ) ; } double avgTermsValue = aggTermsCount = = <int> ? Double . NaN : ( aggTermsSum / aggTermsCount ) ; StatsBucket statsBucketValue = response . getAggregations ( ) . get ( <str> ) ; assertThat ( statsBucketValue , notNullValue ( ) ) ; assertThat ( statsBucketValue . getName ( ) , equalTo ( <str> ) ) ; assertThat ( statsBucketValue . getAvg ( ) , equalTo ( avgTermsValue ) ) ; assertThat ( statsBucketValue . getMin ( ) , equalTo ( min ) ) ; assertThat ( statsBucketValue . getMax ( ) , equalTo ( max ) ) ; } } 

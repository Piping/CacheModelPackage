package org . gradle . api . internal . tasks . testing . junit . result ; import org . gradle . api . tasks . testing . * ; import org . gradle . messaging . remote . internal . PlaceholderException ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . util . HashMap ; import java . util . Map ; public class TestReportDataCollector implements TestListener , TestOutputListener { private final Map < String , TestClassResult > results ; private final TestOutputStore . Writer outputWriter ; private final Map < TestDescriptor , TestMethodResult > currentTestMethods = new HashMap < TestDescriptor , TestMethodResult > ( ) ; private long internalIdCounter = <int> ; public TestReportDataCollector ( Map < String , TestClassResult > results , TestOutputStore . Writer outputWriter ) { this . results = results ; this . outputWriter = outputWriter ; } public void beforeSuite ( TestDescriptor suite ) { } public void afterSuite ( TestDescriptor suite , TestResult result ) { if ( result . getResultType ( ) = = TestResult . ResultType . FAILURE & & ! result . getExceptions ( ) . isEmpty ( ) ) { TestMethodResult methodResult = new TestMethodResult ( internalIdCounter + + , <str> ) ; for ( Throwable throwable : result . getExceptions ( ) ) { methodResult . addFailure ( failureMessage ( throwable ) , stackTrace ( throwable ) , exceptionClassName ( throwable ) ) ; } methodResult . completed ( result ) ; TestClassResult classResult = new TestClassResult ( internalIdCounter + + , suite . getName ( ) , result . getStartTime ( ) ) ; classResult . add ( methodResult ) ; results . put ( suite . getName ( ) , classResult ) ; } } public void beforeTest ( TestDescriptor testDescriptor ) { TestMethodResult methodResult = new TestMethodResult ( internalIdCounter + + , testDescriptor . getName ( ) ) ; currentTestMethods . put ( testDescriptor , methodResult ) ; } public void afterTest ( TestDescriptor testDescriptor , TestResult result ) { String className = testDescriptor . getClassName ( ) ; TestMethodResult methodResult = currentTestMethods . remove ( testDescriptor ) . completed ( result ) ; for ( Throwable throwable : result . getExceptions ( ) ) { methodResult . addFailure ( failureMessage ( throwable ) , stackTrace ( throwable ) , exceptionClassName ( throwable ) ) ; } TestClassResult classResult = results . get ( className ) ; if ( classResult = = null ) { classResult = new TestClassResult ( internalIdCounter + + , className , result . getStartTime ( ) ) ; results . put ( className , classResult ) ; } else if ( classResult . getStartTime ( ) = = <int> ) { classResult . setStartTime ( result . getStartTime ( ) ) ; } classResult . add ( methodResult ) ; } private String failureMessage ( Throwable throwable ) { try { return throwable . toString ( ) ; } catch ( Throwable t ) { String exceptionClassName = exceptionClassName ( throwable ) ; return String . format ( <str> , exceptionClassName , t ) ; } } private String exceptionClassName ( Throwable throwable ) { return throwable instanceof PlaceholderException ? ( ( PlaceholderException ) throwable ) . getExceptionClassName ( ) : throwable . getClass ( ) . getName ( ) ; } private String stackTrace ( Throwable throwable ) { try { StringWriter stringWriter = new StringWriter ( ) ; PrintWriter writer = new PrintWriter ( stringWriter ) ; throwable . printStackTrace ( writer ) ; writer . close ( ) ; return stringWriter . toString ( ) ; } catch ( Throwable t ) { StringWriter stringWriter = new StringWriter ( ) ; PrintWriter writer = new PrintWriter ( stringWriter ) ; t . printStackTrace ( writer ) ; writer . close ( ) ; return stringWriter . toString ( ) ; } } public void onOutput ( TestDescriptor testDescriptor , TestOutputEvent outputEvent ) { String className = testDescriptor . getClassName ( ) ; if ( className = = null ) { return ; } TestClassResult classResult = results . get ( className ) ; if ( classResult = = null ) { classResult = new TestClassResult ( internalIdCounter + + , className , <int> ) ; results . put ( className , classResult ) ; } TestMethodResult methodResult = currentTestMethods . get ( testDescriptor ) ; if ( methodResult = = null ) { outputWriter . onOutput ( classResult . getId ( ) , outputEvent ) ; } else { outputWriter . onOutput ( classResult . getId ( ) , methodResult . getId ( ) , outputEvent ) ; } } } 

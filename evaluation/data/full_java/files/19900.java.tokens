package io . netty . example . stomp ; import io . netty . bootstrap . Bootstrap ; import io . netty . channel . ChannelInitializer ; import io . netty . channel . ChannelPipeline ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . SocketChannel ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . handler . codec . stomp . StompSubframeAggregator ; import io . netty . handler . codec . stomp . StompSubframeDecoder ; import io . netty . handler . codec . stomp . StompSubframeEncoder ; public final class StompClient { static final boolean SSL = System . getProperty ( <str> ) ! = null ; static final String HOST = System . getProperty ( <str> , <str> ) ; static final int PORT = Integer . parseInt ( System . getProperty ( <str> , <str> ) ) ; static final String LOGIN = System . getProperty ( <str> , <str> ) ; static final String PASSCODE = System . getProperty ( <str> , <str> ) ; static final String TOPIC = System . getProperty ( <str> , <str> ) ; public static void main ( String [ ] args ) throws Exception { EventLoopGroup group = new NioEventLoopGroup ( ) ; try { Bootstrap b = new Bootstrap ( ) ; b . group ( group ) . channel ( NioSocketChannel . class ) ; b . handler ( new ChannelInitializer < SocketChannel > ( ) { @Override protected void initChannel ( SocketChannel ch ) throws Exception { ChannelPipeline pipeline = ch . pipeline ( ) ; pipeline . addLast ( <str> , new StompSubframeDecoder ( ) ) ; pipeline . addLast ( <str> , new StompSubframeEncoder ( ) ) ; pipeline . addLast ( <str> , new StompSubframeAggregator ( <int> ) ) ; pipeline . addLast ( <str> , new StompClientHandler ( ) ) ; } } ) ; b . connect ( HOST , PORT ) . sync ( ) . channel ( ) . closeFuture ( ) . sync ( ) ; } finally { group . shutdownGracefully ( ) ; } } } 

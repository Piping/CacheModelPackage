package org . elasticsearch . index . mapper . source ; import org . apache . lucene . index . IndexableField ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . compress . CompressedXContent ; import org . elasticsearch . common . compress . CompressorFactory ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . index . mapper . * ; import org . elasticsearch . test . ESSingleNodeTestCase ; import org . elasticsearch . test . VersionUtils ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; import static org . hamcrest . Matchers . equalTo ; public class DefaultSourceMappingTests extends ESSingleNodeTestCase { public void testNoFormat ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper documentMapper = parser . parse ( mapping ) ; ParsedDocument doc = documentMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( XContentFactory . xContentType ( doc . source ( ) ) , equalTo ( XContentType . JSON ) ) ; documentMapper = parser . parse ( mapping ) ; doc = documentMapper . parse ( <str> , <str> , <str> , XContentFactory . smileBuilder ( ) . startObject ( ) . field ( <str> , <str> ) . endObject ( ) . bytes ( ) ) ; assertThat ( XContentFactory . xContentType ( doc . source ( ) ) , equalTo ( XContentType . SMILE ) ) ; } public void testFormatBackCompat ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; Settings settings = Settings . builder ( ) . put ( IndexMetaData . SETTING_VERSION_CREATED , VersionUtils . randomVersionBetween ( random ( ) , Version . V_2_0_0 , Version . V_2_2_0 ) ) . build ( ) ; DocumentMapperParser parser = createIndex ( <str> , settings ) . mapperService ( ) . documentMapperParser ( ) ; parser . parse ( mapping ) ; } public void testIncludes ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , new String [ ] { <str> } ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper documentMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = documentMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) ) ; IndexableField sourceField = doc . rootDoc ( ) . getField ( <str> ) ; Map < String , Object > sourceAsMap ; try ( XContentParser parser = XContentFactory . xContent ( XContentType . JSON ) . createParser ( new BytesArray ( sourceField . binaryValue ( ) ) ) ) { sourceAsMap = parser . map ( ) ; } assertThat ( sourceAsMap . containsKey ( <str> ) , equalTo ( true ) ) ; assertThat ( sourceAsMap . containsKey ( <str> ) , equalTo ( false ) ) ; } public void testExcludes ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , new String [ ] { <str> } ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper documentMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; ParsedDocument doc = documentMapper . parse ( <str> , <str> , <str> , XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . bytes ( ) ) ; IndexableField sourceField = doc . rootDoc ( ) . getField ( <str> ) ; Map < String , Object > sourceAsMap ; try ( XContentParser parser = XContentFactory . xContent ( XContentType . JSON ) . createParser ( new BytesArray ( sourceField . binaryValue ( ) ) ) ) { sourceAsMap = parser . map ( ) ; } assertThat ( sourceAsMap . containsKey ( <str> ) , equalTo ( false ) ) ; assertThat ( sourceAsMap . containsKey ( <str> ) , equalTo ( true ) ) ; } public void testDefaultMappingAndNoMapping ( ) throws Exception { String defaultMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( MapperService . DEFAULT_MAPPING ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; DocumentMapper mapper = parser . parse ( <str> , null , defaultMapping ) ; assertThat ( mapper . type ( ) , equalTo ( <str> ) ) ; assertThat ( mapper . sourceMapper ( ) . enabled ( ) , equalTo ( false ) ) ; try { mapper = parser . parse ( null , null , defaultMapping ) ; assertThat ( mapper . type ( ) , equalTo ( <str> ) ) ; assertThat ( mapper . sourceMapper ( ) . enabled ( ) , equalTo ( false ) ) ; fail ( ) ; } catch ( MapperParsingException e ) { } try { mapper = parser . parse ( null , <str> , defaultMapping ) ; assertThat ( mapper . type ( ) , equalTo ( <str> ) ) ; assertThat ( mapper . sourceMapper ( ) . enabled ( ) , equalTo ( false ) ) ; fail ( ) ; } catch ( MapperParsingException e ) { assertThat ( e . getMessage ( ) , equalTo ( <str> ) ) ; } } public void testDefaultMappingAndWithMappingOverride ( ) throws Exception { String defaultMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( MapperService . DEFAULT_MAPPING ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper mapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( <str> , mapping , defaultMapping ) ; assertThat ( mapper . type ( ) , equalTo ( <str> ) ) ; assertThat ( mapper . sourceMapper ( ) . enabled ( ) , equalTo ( true ) ) ; } public void testDefaultMappingAndNoMappingWithMapperService ( ) throws Exception { String defaultMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( MapperService . DEFAULT_MAPPING ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; MapperService mapperService = createIndex ( <str> ) . mapperService ( ) ; mapperService . merge ( MapperService . DEFAULT_MAPPING , new CompressedXContent ( defaultMapping ) , true , false ) ; DocumentMapper mapper = mapperService . documentMapperWithAutoCreate ( <str> ) . getDocumentMapper ( ) ; assertThat ( mapper . type ( ) , equalTo ( <str> ) ) ; assertThat ( mapper . sourceMapper ( ) . enabled ( ) , equalTo ( false ) ) ; } public void testDefaultMappingAndWithMappingOverrideWithMapperService ( ) throws Exception { String defaultMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( MapperService . DEFAULT_MAPPING ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; MapperService mapperService = createIndex ( <str> ) . mapperService ( ) ; mapperService . merge ( MapperService . DEFAULT_MAPPING , new CompressedXContent ( defaultMapping ) , true , false ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; mapperService . merge ( <str> , new CompressedXContent ( mapping ) , true , false ) ; DocumentMapper mapper = mapperService . documentMapper ( <str> ) ; assertThat ( mapper . type ( ) , equalTo ( <str> ) ) ; assertThat ( mapper . sourceMapper ( ) . enabled ( ) , equalTo ( true ) ) ; } void assertConflicts ( String mapping1 , String mapping2 , DocumentMapperParser parser , String . . . conflicts ) throws IOException { DocumentMapper docMapper = parser . parse ( mapping1 ) ; docMapper = parser . parse ( docMapper . mappingSource ( ) . string ( ) ) ; MergeResult mergeResult = docMapper . merge ( parser . parse ( mapping2 ) . mapping ( ) , true , false ) ; List < String > expectedConflicts = new ArrayList < > ( Arrays . asList ( conflicts ) ) ; for ( String conflict : mergeResult . buildConflicts ( ) ) { assertTrue ( <str> + conflict + <str> , expectedConflicts . remove ( conflict ) ) ; } assertTrue ( <str> + Arrays . toString ( expectedConflicts . toArray ( ) ) , expectedConflicts . isEmpty ( ) ) ; } public void testEnabledNotUpdateable ( ) throws Exception { DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; String mapping1 = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; String mapping2 = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertConflicts ( mapping1 , mapping2 , parser , <str> ) ; String mapping3 = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , true ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertConflicts ( mapping1 , mapping3 , parser ) ; } public void testIncludesNotUpdateable ( ) throws Exception { DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; String defaultMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; String mapping1 = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . array ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertConflicts ( defaultMapping , mapping1 , parser , <str> ) ; assertConflicts ( mapping1 , defaultMapping , parser , <str> ) ; String mapping2 = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . array ( <str> , <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertConflicts ( mapping1 , mapping2 , parser , <str> ) ; assertConflicts ( mapping1 , mapping1 , parser ) ; } public void testExcludesNotUpdateable ( ) throws Exception { DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; String defaultMapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; String mapping1 = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . array ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertConflicts ( defaultMapping , mapping1 , parser , <str> ) ; assertConflicts ( mapping1 , defaultMapping , parser , <str> ) ; String mapping2 = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . array ( <str> , <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertConflicts ( mapping1 , mapping2 , parser , <str> ) ; assertConflicts ( mapping1 , mapping1 , parser ) ; } public void testComplete ( ) throws Exception { DocumentMapperParser parser = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) ; String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; assertTrue ( parser . parse ( mapping ) . sourceMapper ( ) . isComplete ( ) ) ; mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . field ( <str> , false ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertFalse ( parser . parse ( mapping ) . sourceMapper ( ) . isComplete ( ) ) ; mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . array ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertFalse ( parser . parse ( mapping ) . sourceMapper ( ) . isComplete ( ) ) ; mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startObject ( <str> ) . array ( <str> , <str> ) . endObject ( ) . endObject ( ) . endObject ( ) . string ( ) ; assertFalse ( parser . parse ( mapping ) . sourceMapper ( ) . isComplete ( ) ) ; } public void testSourceObjectContainsExtraTokens ( ) throws Exception { String mapping = XContentFactory . jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . endObject ( ) . endObject ( ) . string ( ) ; DocumentMapper documentMapper = createIndex ( <str> ) . mapperService ( ) . documentMapperParser ( ) . parse ( mapping ) ; try { documentMapper . parse ( <str> , <str> , <str> , new BytesArray ( <str> ) ) ; fail ( <str> ) ; } catch ( MapperParsingException e ) { assertNotNull ( e . getRootCause ( ) ) ; String message = e . getRootCause ( ) . getMessage ( ) ; assertTrue ( message , message . contains ( <str> ) ) ; } } } 

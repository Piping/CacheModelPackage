package org . gradle . api . publication . maven . internal . pom ; import groovy . util . FactoryBuilderSupport ; import org . apache . maven . model . Model ; import org . codehaus . plexus . personality . plexus . lifecycle . phase . InitializationException ; import org . gradle . api . publication . maven . internal . ModelFactory ; import org . slf4j . LoggerFactory ; import org . sonatype . maven . polyglot . execute . ExecuteManager ; import org . sonatype . maven . polyglot . execute . ExecuteManagerImpl ; import org . sonatype . maven . polyglot . groovy . builder . ModelBuilder ; import java . lang . reflect . Field ; import java . util . Map ; public class CustomModelBuilder extends ModelBuilder { public CustomModelBuilder ( Model model ) { ExecuteManager executeManager = new ExecuteManagerImpl ( ) ; setProp ( executeManager . getClass ( ) , executeManager , <str> , new PlexusLoggerAdapter ( LoggerFactory . getLogger ( ExecuteManagerImpl . class ) ) ) ; setProp ( ModelBuilder . class , this , <str> , executeManager ) ; setProp ( ModelBuilder . class , this , <str> , new PlexusLoggerAdapter ( LoggerFactory . getLogger ( ModelBuilder . class ) ) ) ; try { initialize ( ) ; } catch ( InitializationException e ) { throw new RuntimeException ( e ) ; } Map factories = ( Map ) getProp ( FactoryBuilderSupport . class , this , <str> ) ; factories . remove ( <str> ) ; ModelFactory modelFactory = new ModelFactory ( model ) ; registerFactory ( modelFactory . getName ( ) , null , modelFactory ) ; } public static void setProp ( Class c , Object obj , String fieldName , Object value ) { try { Field f = c . getDeclaredField ( fieldName ) ; f . setAccessible ( true ) ; f . set ( obj , value ) ; } catch ( NoSuchFieldException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalArgumentException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } } public static Object getProp ( Class c , Object obj , String fieldName ) { try { Field f = c . getDeclaredField ( fieldName ) ; f . setAccessible ( true ) ; return f . get ( obj ) ; } catch ( NoSuchFieldException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalArgumentException e ) { throw new RuntimeException ( e ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( e ) ; } } } 

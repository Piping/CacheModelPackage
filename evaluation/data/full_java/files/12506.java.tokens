package org . gradle . api . internal . artifacts . ivyservice ; import org . gradle . api . internal . artifacts . ArtifactDependencyResolver ; import org . gradle . api . internal . artifacts . GlobalDependencyResolutionRules ; import org . gradle . api . internal . artifacts . ResolveContext ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . artifact . DependencyArtifactsVisitor ; import org . gradle . api . internal . artifacts . ivyservice . resolveengine . graph . DependencyGraphVisitor ; import org . gradle . api . internal . artifacts . repositories . ResolutionAwareRepository ; import java . util . List ; public class CacheLockingArtifactDependencyResolver implements ArtifactDependencyResolver { private final CacheLockingManager lockingManager ; private final ArtifactDependencyResolver resolver ; public CacheLockingArtifactDependencyResolver ( CacheLockingManager lockingManager , ArtifactDependencyResolver resolver ) { this . lockingManager = lockingManager ; this . resolver = resolver ; } @Override public void resolve ( final ResolveContext resolveContext , final List < ? extends ResolutionAwareRepository > repositories , final GlobalDependencyResolutionRules metadataHandler , final DependencyGraphVisitor graphVisitor , final DependencyArtifactsVisitor artifactsVisitor ) { lockingManager . useCache ( String . format ( <str> , resolveContext ) , new Runnable ( ) { public void run ( ) { resolver . resolve ( resolveContext , repositories , metadataHandler , graphVisitor , artifactsVisitor ) ; } } ) ; } } 

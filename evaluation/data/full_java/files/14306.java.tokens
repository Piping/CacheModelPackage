package org . gradle . model . internal . core ; import com . google . common . base . Predicate ; import org . gradle . api . Nullable ; import org . gradle . model . RuleSource ; import org . gradle . model . internal . core . rule . describe . ModelRuleDescriptor ; import org . gradle . model . internal . type . ModelType ; import java . util . Set ; public interface MutableModelNode extends ModelNode { boolean canBeViewedAs ( ModelType < ? > type ) ; Iterable < String > getReadableTypeDescriptions ( ) ; Iterable < String > getWritableTypeDescriptions ( ) ; < T > ModelView < ? extends T > asMutable ( ModelType < T > type , ModelRuleDescriptor ruleDescriptor ) ; void addReference ( ModelRegistration registration ) ; void addLink ( ModelRegistration registration ) ; void removeLink ( String name ) ; void applyToSelf ( ModelActionRole type , ModelAction < ? > action ) ; void applyTo ( NodePredicate predicate , ModelActionRole role , ModelAction < ? > action ) ; void applyToLink ( ModelActionRole type , ModelAction < ? > action ) ; void applyToLink ( String name , Class < ? extends RuleSource > rules ) ; void applyToSelf ( Class < ? extends RuleSource > rules ) ; void applyTo ( NodePredicate predicate , Class < ? extends RuleSource > rules ) ; void defineRulesFor ( NodePredicate predicate , ModelActionRole role , ModelAction < ? > action ) ; boolean hasLink ( String name , Predicate < ? super MutableModelNode > predicate ) ; @Nullable MutableModelNode getLink ( String name ) ; int getLinkCount ( Predicate < ? super MutableModelNode > predicate ) ; Set < String > getLinkNames ( Predicate < ? super MutableModelNode > predicate ) ; Iterable < ? extends MutableModelNode > getLinks ( ModelType < ? > type ) ; Iterable < ? extends MutableModelNode > getLinks ( Predicate < ? super MutableModelNode > predicate ) ; < T > void setPrivateData ( Class < ? super T > type , T object ) ; < T > void setPrivateData ( ModelType < ? super T > type , T object ) ; < T > T getPrivateData ( Class < T > type ) ; < T > T getPrivateData ( ModelType < T > type ) ; Object getPrivateData ( ) ; void setTarget ( ModelNode target ) ; void ensureUsable ( ) ; void ensureAtLeast ( ModelNode . State state ) ; boolean isAtLeast ( ModelNode . State state ) ; void setHidden ( boolean hidden ) ; boolean isMutable ( ) ; MutableModelNode getParent ( ) ; void addProjection ( ModelProjection projection ) ; } 

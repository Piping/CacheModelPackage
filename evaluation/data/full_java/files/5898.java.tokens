package org . elasticsearch . common . inject . spi ; import org . elasticsearch . common . inject . Binder ; import org . elasticsearch . common . inject . ConfigurationException ; import org . elasticsearch . common . inject . TypeLiteral ; import java . util . Objects ; import java . util . Set ; public final class InjectionRequest < T > implements Element { private final Object source ; private final TypeLiteral < T > type ; private final T instance ; public InjectionRequest ( Object source , TypeLiteral < T > type , T instance ) { this . source = Objects . requireNonNull ( source , <str> ) ; this . type = Objects . requireNonNull ( type , <str> ) ; this . instance = Objects . requireNonNull ( instance , <str> ) ; } @Override public Object getSource ( ) { return source ; } public T getInstance ( ) { return instance ; } public TypeLiteral < T > getType ( ) { return type ; } public Set < InjectionPoint > getInjectionPoints ( ) throws ConfigurationException { return InjectionPoint . forInstanceMethodsAndFields ( instance . getClass ( ) ) ; } @Override public < R > R acceptVisitor ( ElementVisitor < R > visitor ) { return visitor . visit ( this ) ; } @Override public void applyTo ( Binder binder ) { binder . withSource ( getSource ( ) ) . requestInjection ( type , instance ) ; } } 

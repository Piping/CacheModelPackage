package com . google . common . hash ; import static com . google . common . hash . Hashing . ChecksumType . ADLER_32 ; import static com . google . common . hash . Hashing . ChecksumType . CRC_32 ; import com . google . common . base . Supplier ; import junit . framework . TestCase ; import java . util . zip . Checksum ; public class ChecksumHashFunctionTest extends TestCase { public void testCrc32_equalsChecksumValue ( ) throws Exception { assertChecksum ( CRC_32 , <str> ) ; assertChecksum ( CRC_32 , <str> ) ; assertChecksum ( CRC_32 , <str> ) ; } public void testAdler32_equalsChecksumValue ( ) throws Exception { assertChecksum ( ADLER_32 , <str> ) ; assertChecksum ( ADLER_32 , <str> ) ; assertChecksum ( ADLER_32 , <str> ) ; } public void testCrc32_knownValues ( ) throws Exception { assertHash32 ( <hex> , CRC_32 , <str> ) ; assertHash32 ( <hex> , CRC_32 , <str> ) ; assertHash32 ( <hex> , CRC_32 , <str> ) ; assertHash32 ( <hex> , CRC_32 , <str> ) ; assertHash32 ( <hex> , CRC_32 , <str> ) ; assertHash32 ( <hex> , CRC_32 , <str> ) ; assertHash32 ( <hex> , CRC_32 , <str> ) ; assertHash32 ( <hex> , CRC_32 , <str> ) ; } public void testAdler32_knownValues ( ) throws Exception { assertHash32 ( <hex> , ADLER_32 , <str> ) ; assertHash32 ( <hex> , ADLER_32 , <str> ) ; assertHash32 ( <hex> , ADLER_32 , <str> ) ; assertHash32 ( <hex> , ADLER_32 , <str> ) ; assertHash32 ( <hex> , ADLER_32 , <str> ) ; assertHash32 ( <hex> , ADLER_32 , <str> ) ; assertHash32 ( <hex> , ADLER_32 , <str> ) ; assertHash32 ( <hex> , ADLER_32 , <str> ) ; } private static void assertChecksum ( Supplier < Checksum > supplier , String input ) { byte [ ] bytes = HashTestUtils . ascii ( input ) ; Checksum checksum = supplier . get ( ) ; checksum . update ( bytes , <int> , bytes . length ) ; long value = checksum . getValue ( ) ; String toString = <str> ; HashFunction func = new ChecksumHashFunction ( supplier , <int> , toString ) ; assertEquals ( toString , func . toString ( ) ) ; assertEquals ( value , func . hashBytes ( bytes ) . padToLong ( ) ) ; } private static void assertHash32 ( int expected , Supplier < Checksum > supplier , String input ) { byte [ ] bytes = HashTestUtils . ascii ( input ) ; String toString = <str> ; HashFunction func = new ChecksumHashFunction ( supplier , <int> , toString ) ; assertEquals ( expected , func . hashBytes ( bytes ) . asInt ( ) ) ; assertEquals ( toString , func . toString ( ) ) ; } } 

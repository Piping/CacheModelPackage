package org . elasticsearch . action . admin . indices . template . put ; import org . elasticsearch . ElasticsearchGenerationException ; import org . elasticsearch . ElasticsearchParseException ; import org . elasticsearch . action . ActionRequestValidationException ; import org . elasticsearch . action . IndicesRequest ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . admin . indices . mapping . put . PutMappingRequest ; import org . elasticsearch . action . support . IndicesOptions ; import org . elasticsearch . action . support . master . MasterNodeRequest ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . common . bytes . BytesArray ; import org . elasticsearch . common . bytes . BytesReference ; import org . elasticsearch . common . collect . MapBuilder ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . common . xcontent . XContentFactory ; import org . elasticsearch . common . xcontent . XContentHelper ; import org . elasticsearch . common . xcontent . XContentParser ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . common . xcontent . support . XContentMapValues ; import java . io . IOException ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; import static org . elasticsearch . action . ValidateActions . addValidationError ; import static org . elasticsearch . common . settings . Settings . Builder . EMPTY_SETTINGS ; import static org . elasticsearch . common . settings . Settings . readSettingsFromStream ; import static org . elasticsearch . common . settings . Settings . writeSettingsToStream ; public class PutIndexTemplateRequest extends MasterNodeRequest < PutIndexTemplateRequest > implements IndicesRequest { private String name ; private String cause = <str> ; private String template ; private int order ; private boolean create ; private Settings settings = EMPTY_SETTINGS ; private Map < String , String > mappings = new HashMap < > ( ) ; private final Set < Alias > aliases = new HashSet < > ( ) ; private Map < String , IndexMetaData . Custom > customs = new HashMap < > ( ) ; public PutIndexTemplateRequest ( ) { } public PutIndexTemplateRequest ( String name ) { this . name = name ; } @Override public ActionRequestValidationException validate ( ) { ActionRequestValidationException validationException = null ; if ( name = = null ) { validationException = addValidationError ( <str> , validationException ) ; } if ( template = = null ) { validationException = addValidationError ( <str> , validationException ) ; } return validationException ; } public PutIndexTemplateRequest name ( String name ) { this . name = name ; return this ; } public String name ( ) { return this . name ; } public PutIndexTemplateRequest template ( String template ) { this . template = template ; return this ; } public String template ( ) { return this . template ; } public PutIndexTemplateRequest order ( int order ) { this . order = order ; return this ; } public int order ( ) { return this . order ; } public PutIndexTemplateRequest create ( boolean create ) { this . create = create ; return this ; } public boolean create ( ) { return create ; } public PutIndexTemplateRequest settings ( Settings settings ) { this . settings = settings ; return this ; } public PutIndexTemplateRequest settings ( Settings . Builder settings ) { this . settings = settings . build ( ) ; return this ; } public PutIndexTemplateRequest settings ( String source ) { this . settings = Settings . settingsBuilder ( ) . loadFromSource ( source ) . build ( ) ; return this ; } public PutIndexTemplateRequest settings ( Map < String , Object > source ) { try { XContentBuilder builder = XContentFactory . contentBuilder ( XContentType . JSON ) ; builder . map ( source ) ; settings ( builder . string ( ) ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + source + <str> , e ) ; } return this ; } public Settings settings ( ) { return this . settings ; } public PutIndexTemplateRequest mapping ( String type , String source ) { mappings . put ( type , source ) ; return this ; } public PutIndexTemplateRequest cause ( String cause ) { this . cause = cause ; return this ; } public String cause ( ) { return this . cause ; } public PutIndexTemplateRequest mapping ( String type , XContentBuilder source ) { try { mappings . put ( type , source . string ( ) ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( <str> , e ) ; } return this ; } public PutIndexTemplateRequest mapping ( String type , Map < String , Object > source ) { if ( source . size ( ) ! = <int> | | ! source . containsKey ( type ) ) { source = MapBuilder . < String , Object > newMapBuilder ( ) . put ( type , source ) . map ( ) ; } try { XContentBuilder builder = XContentFactory . contentBuilder ( XContentType . JSON ) ; builder . map ( source ) ; return mapping ( type , builder . string ( ) ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + source + <str> , e ) ; } } public PutIndexTemplateRequest mapping ( String type , Object . . . source ) { mapping ( type , PutMappingRequest . buildFromSimplifiedDef ( type , source ) ) ; return this ; } public Map < String , String > mappings ( ) { return this . mappings ; } public PutIndexTemplateRequest source ( XContentBuilder templateBuilder ) { try { return source ( templateBuilder . bytes ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( <str> , e ) ; } } @SuppressWarnings ( <str> ) public PutIndexTemplateRequest source ( Map templateSource ) { Map < String , Object > source = templateSource ; for ( Map . Entry < String , Object > entry : source . entrySet ( ) ) { String name = entry . getKey ( ) ; if ( name . equals ( <str> ) ) { template ( entry . getValue ( ) . toString ( ) ) ; } else if ( name . equals ( <str> ) ) { order ( XContentMapValues . nodeIntegerValue ( entry . getValue ( ) , order ( ) ) ) ; } else if ( name . equals ( <str> ) ) { if ( ! ( entry . getValue ( ) instanceof Map ) ) { throw new IllegalArgumentException ( <str> ) ; } settings ( ( Map < String , Object > ) entry . getValue ( ) ) ; } else if ( name . equals ( <str> ) ) { Map < String , Object > mappings = ( Map < String , Object > ) entry . getValue ( ) ; for ( Map . Entry < String , Object > entry1 : mappings . entrySet ( ) ) { if ( ! ( entry1 . getValue ( ) instanceof Map ) ) { throw new IllegalArgumentException ( <str> + entry1 . getKey ( ) + <str> ) ; } mapping ( entry1 . getKey ( ) , ( Map < String , Object > ) entry1 . getValue ( ) ) ; } } else if ( name . equals ( <str> ) ) { aliases ( ( Map < String , Object > ) entry . getValue ( ) ) ; } else { IndexMetaData . Custom proto = IndexMetaData . lookupPrototype ( name ) ; if ( proto ! = null ) { try { customs . put ( name , proto . fromMap ( ( Map < String , Object > ) entry . getValue ( ) ) ) ; } catch ( IOException e ) { throw new ElasticsearchParseException ( <str> , name ) ; } } } } return this ; } public PutIndexTemplateRequest source ( String templateSource ) { try ( XContentParser parser = XContentFactory . xContent ( templateSource ) . createParser ( templateSource ) ) { return source ( parser . mapOrdered ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( <str> + templateSource + <str> , e ) ; } } public PutIndexTemplateRequest source ( byte [ ] source ) { return source ( source , <int> , source . length ) ; } public PutIndexTemplateRequest source ( byte [ ] source , int offset , int length ) { try ( XContentParser parser = XContentFactory . xContent ( source , offset , length ) . createParser ( source , offset , length ) ) { return source ( parser . mapOrdered ( ) ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( <str> , e ) ; } } public PutIndexTemplateRequest source ( BytesReference source ) { try ( XContentParser parser = XContentFactory . xContent ( source ) . createParser ( source ) ) { return source ( parser . mapOrdered ( ) ) ; } catch ( IOException e ) { throw new IllegalArgumentException ( <str> , e ) ; } } public PutIndexTemplateRequest custom ( IndexMetaData . Custom custom ) { customs . put ( custom . type ( ) , custom ) ; return this ; } public Map < String , IndexMetaData . Custom > customs ( ) { return this . customs ; } public Set < Alias > aliases ( ) { return this . aliases ; } @SuppressWarnings ( <str> ) public PutIndexTemplateRequest aliases ( Map source ) { try { XContentBuilder builder = XContentFactory . jsonBuilder ( ) ; builder . map ( source ) ; return aliases ( builder . bytes ( ) ) ; } catch ( IOException e ) { throw new ElasticsearchGenerationException ( <str> + source + <str> , e ) ; } } public PutIndexTemplateRequest aliases ( XContentBuilder source ) { return aliases ( source . bytes ( ) ) ; } public PutIndexTemplateRequest aliases ( String source ) { return aliases ( new BytesArray ( source ) ) ; } public PutIndexTemplateRequest aliases ( BytesReference source ) { try { XContentParser parser = XContentHelper . createParser ( source ) ; parser . nextToken ( ) ; while ( ( parser . nextToken ( ) ) ! = XContentParser . Token . END_OBJECT ) { alias ( Alias . fromXContent ( parser ) ) ; } return this ; } catch ( IOException e ) { throw new ElasticsearchParseException ( <str> , e ) ; } } public PutIndexTemplateRequest alias ( Alias alias ) { aliases . add ( alias ) ; return this ; } @Override public String [ ] indices ( ) { return new String [ ] { template } ; } @Override public IndicesOptions indicesOptions ( ) { return IndicesOptions . strictExpand ( ) ; } @Override public void readFrom ( StreamInput in ) throws IOException { super . readFrom ( in ) ; cause = in . readString ( ) ; name = in . readString ( ) ; template = in . readString ( ) ; order = in . readInt ( ) ; create = in . readBoolean ( ) ; settings = readSettingsFromStream ( in ) ; int size = in . readVInt ( ) ; for ( int i = <int> ; i < size ; i + + ) { mappings . put ( in . readString ( ) , in . readString ( ) ) ; } int customSize = in . readVInt ( ) ; for ( int i = <int> ; i < customSize ; i + + ) { String type = in . readString ( ) ; IndexMetaData . Custom customIndexMetaData = IndexMetaData . lookupPrototypeSafe ( type ) . readFrom ( in ) ; customs . put ( type , customIndexMetaData ) ; } int aliasesSize = in . readVInt ( ) ; for ( int i = <int> ; i < aliasesSize ; i + + ) { aliases . add ( Alias . read ( in ) ) ; } } @Override public void writeTo ( StreamOutput out ) throws IOException { super . writeTo ( out ) ; out . writeString ( cause ) ; out . writeString ( name ) ; out . writeString ( template ) ; out . writeInt ( order ) ; out . writeBoolean ( create ) ; writeSettingsToStream ( settings , out ) ; out . writeVInt ( mappings . size ( ) ) ; for ( Map . Entry < String , String > entry : mappings . entrySet ( ) ) { out . writeString ( entry . getKey ( ) ) ; out . writeString ( entry . getValue ( ) ) ; } out . writeVInt ( customs . size ( ) ) ; for ( Map . Entry < String , IndexMetaData . Custom > entry : customs . entrySet ( ) ) { out . writeString ( entry . getKey ( ) ) ; entry . getValue ( ) . writeTo ( out ) ; } out . writeVInt ( aliases . size ( ) ) ; for ( Alias alias : aliases ) { alias . writeTo ( out ) ; } } } 

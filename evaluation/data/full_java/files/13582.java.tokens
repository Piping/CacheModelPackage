package org . gradle . external . javadoc . internal ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . jmock . lib . legacy . ClassImposteriser ; import org . junit . Before ; import org . junit . Test ; import java . io . IOException ; import java . util . Arrays ; import java . util . List ; public class GroupsJavadocOptionFileOptionTest { private final JUnit4Mockery context = new JUnit4Mockery ( ) ; private JavadocOptionFileWriterContext writerContextMock ; private final String optionName = <str> ; private GroupsJavadocOptionFileOption groupsFile ; @Before public void setUp ( ) { context . setImposteriser ( ClassImposteriser . INSTANCE ) ; writerContextMock = context . mock ( JavadocOptionFileWriterContext . class ) ; groupsFile = new GroupsJavadocOptionFileOption ( optionName ) ; } @Test public void testWriteNullValue ( ) throws IOException { groupsFile . write ( writerContextMock ) ; } @Test public void testWriteNotNullValue ( ) throws IOException { final String groupName = <str> ; final List < String > groupElements = Arrays . asList ( <str> , <str> ) ; groupsFile . getValue ( ) . put ( groupName , groupElements ) ; context . checking ( new Expectations ( ) { { one ( writerContextMock ) . writeOptionHeader ( optionName ) ; one ( writerContextMock ) . write ( <str> ) ; one ( writerContextMock ) . write ( <str> ) ; one ( writerContextMock ) . write ( <str> ) ; one ( writerContextMock ) . newLine ( ) ; } } ) ; groupsFile . write ( writerContextMock ) ; } } 

package org . elasticsearch . index . query . functionscore ; import com . fasterxml . jackson . core . JsonParseException ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . MatchAllDocsQuery ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . TermQuery ; import org . elasticsearch . common . ParsingException ; import org . elasticsearch . common . lucene . search . function . CombineFunction ; import org . elasticsearch . common . lucene . search . function . FieldValueFactorFunction ; import org . elasticsearch . common . lucene . search . function . FiltersFunctionScoreQuery ; import org . elasticsearch . common . lucene . search . function . FunctionScoreQuery ; import org . elasticsearch . common . lucene . search . function . WeightFactorFunction ; import org . elasticsearch . common . xcontent . XContentType ; import org . elasticsearch . index . query . AbstractQueryBuilder ; import org . elasticsearch . index . query . AbstractQueryTestCase ; import org . elasticsearch . index . query . ExistsQueryBuilder ; import org . elasticsearch . index . query . MatchAllQueryBuilder ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . index . query . QueryShardContext ; import org . elasticsearch . index . query . RandomQueryBuilder ; import org . elasticsearch . index . query . TermQueryBuilder ; import org . elasticsearch . index . query . functionscore . exp . ExponentialDecayFunctionBuilder ; import org . elasticsearch . index . query . functionscore . fieldvaluefactor . FieldValueFactorFunctionBuilder ; import org . elasticsearch . index . query . functionscore . gauss . GaussDecayFunctionBuilder ; import org . elasticsearch . index . query . functionscore . lin . LinearDecayFunctionBuilder ; import org . elasticsearch . index . query . functionscore . random . RandomScoreFunctionBuilder ; import org . elasticsearch . index . query . functionscore . script . ScriptScoreFunctionBuilder ; import org . elasticsearch . index . query . functionscore . weight . WeightBuilder ; import org . elasticsearch . script . MockScriptEngine ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . search . MultiValueMode ; import java . io . IOException ; import java . util . Collections ; import java . util . Map ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . functionScoreQuery ; import static org . elasticsearch . index . query . QueryBuilders . termQuery ; import static org . elasticsearch . test . StreamsUtils . copyToStringFromClasspath ; import static org . hamcrest . Matchers . closeTo ; import static org . hamcrest . Matchers . containsString ; import static org . hamcrest . Matchers . either ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . instanceOf ; import static org . hamcrest . Matchers . nullValue ; public class FunctionScoreQueryBuilderTests extends AbstractQueryTestCase < FunctionScoreQueryBuilder > { @Override protected FunctionScoreQueryBuilder doCreateTestQueryBuilder ( ) { FunctionScoreQueryBuilder functionScoreQueryBuilder ; switch ( randomIntBetween ( <int> , <int> ) ) { case <int> : int numFunctions = randomIntBetween ( <int> , <int> ) ; FunctionScoreQueryBuilder . FilterFunctionBuilder [ ] filterFunctionBuilders = new FunctionScoreQueryBuilder . FilterFunctionBuilder [ numFunctions ] ; for ( int i = <int> ; i < numFunctions ; i + + ) { filterFunctionBuilders [ i ] = new FunctionScoreQueryBuilder . FilterFunctionBuilder ( RandomQueryBuilder . createQuery ( random ( ) ) , randomScoreFunction ( ) ) ; } if ( randomBoolean ( ) ) { functionScoreQueryBuilder = new FunctionScoreQueryBuilder ( RandomQueryBuilder . createQuery ( random ( ) ) , filterFunctionBuilders ) ; } else { functionScoreQueryBuilder = new FunctionScoreQueryBuilder ( filterFunctionBuilders ) ; } break ; case <int> : functionScoreQueryBuilder = new FunctionScoreQueryBuilder ( randomScoreFunction ( ) ) ; break ; case <int> : functionScoreQueryBuilder = new FunctionScoreQueryBuilder ( RandomQueryBuilder . createQuery ( random ( ) ) , randomScoreFunction ( ) ) ; break ; case <int> : functionScoreQueryBuilder = new FunctionScoreQueryBuilder ( RandomQueryBuilder . createQuery ( random ( ) ) ) ; break ; default : throw new UnsupportedOperationException ( ) ; } if ( randomBoolean ( ) ) { functionScoreQueryBuilder . boostMode ( randomFrom ( CombineFunction . values ( ) ) ) ; } if ( randomBoolean ( ) ) { functionScoreQueryBuilder . scoreMode ( randomFrom ( FiltersFunctionScoreQuery . ScoreMode . values ( ) ) ) ; } if ( randomBoolean ( ) ) { functionScoreQueryBuilder . maxBoost ( randomFloat ( ) ) ; } if ( randomBoolean ( ) ) { functionScoreQueryBuilder . setMinScore ( randomFloat ( ) ) ; } return functionScoreQueryBuilder ; } private static ScoreFunctionBuilder randomScoreFunction ( ) { if ( randomBoolean ( ) ) { return new WeightBuilder ( ) . setWeight ( randomFloat ( ) ) ; } ScoreFunctionBuilder functionBuilder ; switch ( randomIntBetween ( <int> , <int> ) ) { case <int> : DecayFunctionBuilder decayFunctionBuilder ; Float offset = randomBoolean ( ) ? null : randomFloat ( ) ; double decay = randomDouble ( ) ; switch ( randomIntBetween ( <int> , <int> ) ) { case <int> : decayFunctionBuilder = new GaussDecayFunctionBuilder ( INT_FIELD_NAME , randomFloat ( ) , randomFloat ( ) , offset , decay ) ; break ; case <int> : decayFunctionBuilder = new ExponentialDecayFunctionBuilder ( INT_FIELD_NAME , randomFloat ( ) , randomFloat ( ) , offset , decay ) ; break ; case <int> : decayFunctionBuilder = new LinearDecayFunctionBuilder ( INT_FIELD_NAME , randomFloat ( ) , randomFloat ( ) , offset , decay ) ; break ; default : throw new UnsupportedOperationException ( ) ; } if ( randomBoolean ( ) ) { decayFunctionBuilder . setMultiValueMode ( randomFrom ( MultiValueMode . values ( ) ) ) ; } functionBuilder = decayFunctionBuilder ; break ; case <int> : FieldValueFactorFunctionBuilder fieldValueFactorFunctionBuilder = new FieldValueFactorFunctionBuilder ( INT_FIELD_NAME ) ; if ( randomBoolean ( ) ) { fieldValueFactorFunctionBuilder . factor ( randomFloat ( ) ) ; } if ( randomBoolean ( ) ) { fieldValueFactorFunctionBuilder . missing ( randomDouble ( ) ) ; } if ( randomBoolean ( ) ) { fieldValueFactorFunctionBuilder . modifier ( randomFrom ( FieldValueFactorFunction . Modifier . values ( ) ) ) ; } functionBuilder = fieldValueFactorFunctionBuilder ; break ; case <int> : String script = <str> ; Map < String , Object > params = Collections . emptyMap ( ) ; functionBuilder = new ScriptScoreFunctionBuilder ( new Script ( script , ScriptService . ScriptType . INLINE , MockScriptEngine . NAME , params ) ) ; break ; case <int> : RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilder ( ) ; if ( randomBoolean ( ) ) { randomScoreFunctionBuilder . seed ( randomLong ( ) ) ; } else if ( randomBoolean ( ) ) { randomScoreFunctionBuilder . seed ( randomInt ( ) ) ; } else { randomScoreFunctionBuilder . seed ( randomAsciiOfLengthBetween ( <int> , <int> ) ) ; } functionBuilder = randomScoreFunctionBuilder ; break ; default : throw new UnsupportedOperationException ( ) ; } if ( randomBoolean ( ) ) { functionBuilder . setWeight ( randomFloat ( ) ) ; } return functionBuilder ; } @Override protected void doAssertLuceneQuery ( FunctionScoreQueryBuilder queryBuilder , Query query , QueryShardContext context ) throws IOException { assertThat ( query , either ( instanceOf ( FunctionScoreQuery . class ) ) . or ( instanceOf ( FiltersFunctionScoreQuery . class ) ) ) ; } @Override public void testToQuery ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; super . testToQuery ( ) ; } public void testIllegalArguments ( ) { try { new FunctionScoreQueryBuilder ( ( QueryBuilder < ? > ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder ( ( ScoreFunctionBuilder ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder ( ( FunctionScoreQueryBuilder . FilterFunctionBuilder [ ] ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder ( null , ScoreFunctionBuilders . randomFunction ( <int> ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder ( new MatchAllQueryBuilder ( ) , ( ScoreFunctionBuilder ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder ( new MatchAllQueryBuilder ( ) , ( FunctionScoreQueryBuilder . FilterFunctionBuilder [ ] ) null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder ( null , new FunctionScoreQueryBuilder . FilterFunctionBuilder [ <int> ] ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder ( QueryBuilders . matchAllQuery ( ) , new FunctionScoreQueryBuilder . FilterFunctionBuilder [ ] { null } ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder . FilterFunctionBuilder ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder . FilterFunctionBuilder ( null , ScoreFunctionBuilders . randomFunction ( <int> ) ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder . FilterFunctionBuilder ( new MatchAllQueryBuilder ( ) , null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder ( new MatchAllQueryBuilder ( ) ) . scoreMode ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } try { new FunctionScoreQueryBuilder ( new MatchAllQueryBuilder ( ) ) . boostMode ( null ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { } } public void testParseFunctionsArray ( ) throws IOException { String functionScoreQuery = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; QueryBuilder < ? > queryBuilder = parseQuery ( functionScoreQuery ) ; for ( int i = <int> ; i < = XContentType . values ( ) . length ; i + + ) { assertThat ( queryBuilder , instanceOf ( FunctionScoreQueryBuilder . class ) ) ; FunctionScoreQueryBuilder functionScoreQueryBuilder = ( FunctionScoreQueryBuilder ) queryBuilder ; assertThat ( functionScoreQueryBuilder . query ( ) , instanceOf ( TermQueryBuilder . class ) ) ; TermQueryBuilder termQueryBuilder = ( TermQueryBuilder ) functionScoreQueryBuilder . query ( ) ; assertThat ( termQueryBuilder . fieldName ( ) , equalTo ( <str> ) ) ; assertThat ( termQueryBuilder . value ( ) , equalTo ( <str> ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) . length , equalTo ( <int> ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getFilter ( ) , instanceOf ( TermQueryBuilder . class ) ) ; termQueryBuilder = ( TermQueryBuilder ) functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getFilter ( ) ; assertThat ( termQueryBuilder . fieldName ( ) , equalTo ( <str> ) ) ; assertThat ( termQueryBuilder . value ( ) , equalTo ( <str> ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getFilter ( ) , instanceOf ( TermQueryBuilder . class ) ) ; termQueryBuilder = ( TermQueryBuilder ) functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getFilter ( ) ; assertThat ( termQueryBuilder . fieldName ( ) , equalTo ( <str> ) ) ; assertThat ( termQueryBuilder . value ( ) , equalTo ( <str> ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getFilter ( ) , instanceOf ( MatchAllQueryBuilder . class ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) , instanceOf ( RandomScoreFunctionBuilder . class ) ) ; RandomScoreFunctionBuilder randomScoreFunctionBuilder = ( RandomScoreFunctionBuilder ) functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) ; assertThat ( randomScoreFunctionBuilder . getSeed ( ) , equalTo ( <int> ) ) ; assertThat ( randomScoreFunctionBuilder . getWeight ( ) , equalTo ( <float> ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) , instanceOf ( WeightBuilder . class ) ) ; WeightBuilder weightBuilder = ( WeightBuilder ) functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) ; assertThat ( weightBuilder . getWeight ( ) , equalTo ( <float> ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) , instanceOf ( GaussDecayFunctionBuilder . class ) ) ; GaussDecayFunctionBuilder gaussDecayFunctionBuilder = ( GaussDecayFunctionBuilder ) functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) ; assertThat ( gaussDecayFunctionBuilder . getFieldName ( ) , equalTo ( <str> ) ) ; assertThat ( functionScoreQueryBuilder . boost ( ) , equalTo ( <float> ) ) ; assertThat ( functionScoreQueryBuilder . scoreMode ( ) , equalTo ( FiltersFunctionScoreQuery . ScoreMode . AVG ) ) ; assertThat ( functionScoreQueryBuilder . boostMode ( ) , equalTo ( CombineFunction . REPLACE ) ) ; assertThat ( functionScoreQueryBuilder . maxBoost ( ) , equalTo ( <int> f ) ) ; if ( i < XContentType . values ( ) . length ) { queryBuilder = parseQuery ( ( ( AbstractQueryBuilder ) queryBuilder ) . buildAsBytes ( XContentType . values ( ) [ i ] ) ) ; } } } public void testParseSingleFunction ( ) throws IOException { String functionScoreQuery = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; QueryBuilder < ? > queryBuilder = parseQuery ( functionScoreQuery ) ; for ( int i = <int> ; i < = XContentType . values ( ) . length ; i + + ) { assertThat ( queryBuilder , instanceOf ( FunctionScoreQueryBuilder . class ) ) ; FunctionScoreQueryBuilder functionScoreQueryBuilder = ( FunctionScoreQueryBuilder ) queryBuilder ; assertThat ( functionScoreQueryBuilder . query ( ) , instanceOf ( TermQueryBuilder . class ) ) ; TermQueryBuilder termQueryBuilder = ( TermQueryBuilder ) functionScoreQueryBuilder . query ( ) ; assertThat ( termQueryBuilder . fieldName ( ) , equalTo ( <str> ) ) ; assertThat ( termQueryBuilder . value ( ) , equalTo ( <str> ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) . length , equalTo ( <int> ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getFilter ( ) , instanceOf ( MatchAllQueryBuilder . class ) ) ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) , instanceOf ( GaussDecayFunctionBuilder . class ) ) ; GaussDecayFunctionBuilder gaussDecayFunctionBuilder = ( GaussDecayFunctionBuilder ) functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) ; assertThat ( gaussDecayFunctionBuilder . getFieldName ( ) , equalTo ( <str> ) ) ; assertThat ( gaussDecayFunctionBuilder . getWeight ( ) , nullValue ( ) ) ; assertThat ( functionScoreQueryBuilder . boost ( ) , equalTo ( <float> ) ) ; assertThat ( functionScoreQueryBuilder . scoreMode ( ) , equalTo ( FiltersFunctionScoreQuery . ScoreMode . AVG ) ) ; assertThat ( functionScoreQueryBuilder . boostMode ( ) , equalTo ( CombineFunction . REPLACE ) ) ; assertThat ( functionScoreQueryBuilder . maxBoost ( ) , equalTo ( <int> f ) ) ; if ( i < XContentType . values ( ) . length ) { queryBuilder = parseQuery ( ( ( AbstractQueryBuilder ) queryBuilder ) . buildAsBytes ( XContentType . values ( ) [ i ] ) ) ; } } } public void testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody ( ) throws IOException { String functionScoreQuery = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; try { parseQuery ( functionScoreQuery ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testProperErrorMessageWhenTwoFunctionsDefinedInFunctionsArray ( ) throws IOException { String functionScoreQuery = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; try { parseQuery ( functionScoreQuery ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testProperErrorMessageWhenMissingFunction ( ) throws IOException { String functionScoreQuery = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; try { parseQuery ( functionScoreQuery ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testWeight1fStillProducesWeightFunction ( ) throws IOException { assumeTrue ( <str> , getCurrentTypes ( ) . length > <int> ) ; String queryString = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . startObject ( <str> ) . field ( <str> , INT_FIELD_NAME ) . endObject ( ) . field ( <str> , <float> ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . string ( ) ; QueryBuilder < ? > query = parseQuery ( queryString ) ; assertThat ( query , instanceOf ( FunctionScoreQueryBuilder . class ) ) ; FunctionScoreQueryBuilder functionScoreQueryBuilder = ( FunctionScoreQueryBuilder ) query ; assertThat ( functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) , instanceOf ( FieldValueFactorFunctionBuilder . class ) ) ; FieldValueFactorFunctionBuilder fieldValueFactorFunctionBuilder = ( FieldValueFactorFunctionBuilder ) functionScoreQueryBuilder . filterFunctionBuilders ( ) [ <int> ] . getScoreFunction ( ) ; assertThat ( fieldValueFactorFunctionBuilder . fieldName ( ) , equalTo ( INT_FIELD_NAME ) ) ; assertThat ( fieldValueFactorFunctionBuilder . factor ( ) , equalTo ( FieldValueFactorFunctionBuilder . DEFAULT_FACTOR ) ) ; assertThat ( fieldValueFactorFunctionBuilder . modifier ( ) , equalTo ( FieldValueFactorFunctionBuilder . DEFAULT_MODIFIER ) ) ; assertThat ( fieldValueFactorFunctionBuilder . getWeight ( ) , equalTo ( <float> ) ) ; assertThat ( fieldValueFactorFunctionBuilder . missing ( ) , nullValue ( ) ) ; Query luceneQuery = query . toQuery ( createShardContext ( ) ) ; assertThat ( luceneQuery , instanceOf ( FunctionScoreQuery . class ) ) ; FunctionScoreQuery functionScoreQuery = ( FunctionScoreQuery ) luceneQuery ; assertThat ( functionScoreQuery . getFunction ( ) , instanceOf ( WeightFactorFunction . class ) ) ; WeightFactorFunction weightFactorFunction = ( WeightFactorFunction ) functionScoreQuery . getFunction ( ) ; assertThat ( weightFactorFunction . getWeight ( ) , equalTo ( <float> ) ) ; assertThat ( weightFactorFunction . getScoreFunction ( ) , instanceOf ( FieldValueFactorFunction . class ) ) ; } public void testProperErrorMessagesForMisplacedWeightsAndFunctions ( ) throws IOException { String query = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . startArray ( <str> ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) . endArray ( ) . field ( <str> , <int> ) . endObject ( ) . endObject ( ) . string ( ) ; try { parseQuery ( query ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } query = jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <int> ) . startArray ( <str> ) . startObject ( ) . endObject ( ) . endArray ( ) . endObject ( ) . endObject ( ) . string ( ) ; try { parseQuery ( query ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testMalformedThrowsException ( ) throws IOException { try { parseQuery ( copyToStringFromClasspath ( <str> ) ) ; fail ( <str> ) ; } catch ( JsonParseException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testCustomWeightFactorQueryBuilderWithFunctionScore ( ) throws IOException { Query parsedQuery = parseQuery ( functionScoreQuery ( termQuery ( <str> , <str> ) , ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . buildAsBytes ( ) ) . toQuery ( createShardContext ( ) ) ; assertThat ( parsedQuery , instanceOf ( FunctionScoreQuery . class ) ) ; FunctionScoreQuery functionScoreQuery = ( FunctionScoreQuery ) parsedQuery ; assertThat ( ( ( TermQuery ) functionScoreQuery . getSubQuery ( ) ) . getTerm ( ) , equalTo ( new Term ( <str> , <str> ) ) ) ; assertThat ( ( double ) ( ( WeightFactorFunction ) functionScoreQuery . getFunction ( ) ) . getWeight ( ) , closeTo ( <float> , <float> ) ) ; } public void testCustomWeightFactorQueryBuilderWithFunctionScoreWithoutQueryGiven ( ) throws IOException { Query parsedQuery = parseQuery ( functionScoreQuery ( ScoreFunctionBuilders . weightFactorFunction ( <float> ) ) . buildAsBytes ( ) ) . toQuery ( createShardContext ( ) ) ; assertThat ( parsedQuery , instanceOf ( FunctionScoreQuery . class ) ) ; FunctionScoreQuery functionScoreQuery = ( FunctionScoreQuery ) parsedQuery ; assertThat ( functionScoreQuery . getSubQuery ( ) instanceof MatchAllDocsQuery , equalTo ( true ) ) ; assertThat ( ( double ) ( ( WeightFactorFunction ) functionScoreQuery . getFunction ( ) ) . getWeight ( ) , closeTo ( <float> , <float> ) ) ; } public void testFieldValueFactorFactorArray ( ) throws IOException { String querySource = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; try { parseQuery ( querySource ) ; fail ( <str> ) ; } catch ( ParsingException e ) { assertThat ( e . getMessage ( ) , containsString ( <str> ) ) ; } } public void testFromJson ( ) throws IOException { String json = <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> + <str> ; FunctionScoreQueryBuilder parsed = ( FunctionScoreQueryBuilder ) parseQuery ( json ) ; checkGeneratedJson ( json , parsed ) ; assertEquals ( json , <int> , parsed . filterFunctionBuilders ( ) . length ) ; assertEquals ( json , <int> , parsed . boost ( ) , <float> ) ; assertEquals ( json , <int> , parsed . maxBoost ( ) , <float> ) ; assertEquals ( json , <int> , parsed . getMinScore ( ) , <float> ) ; } } 

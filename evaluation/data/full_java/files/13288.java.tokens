package org . gradle . integtests . fixtures . jvm ; import net . rubygrapefruit . platform . MissingRegistryEntryException ; import net . rubygrapefruit . platform . SystemInfo ; import net . rubygrapefruit . platform . WindowsRegistry ; import org . gradle . api . JavaVersion ; import java . io . File ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; class WindowsOracleJvmLocator { private final WindowsRegistry windowsRegistry ; private final SystemInfo systemInfo ; WindowsOracleJvmLocator ( WindowsRegistry windowsRegistry , SystemInfo systemInfo ) { this . windowsRegistry = windowsRegistry ; this . systemInfo = systemInfo ; } public Collection < JvmInstallation > findJvms ( ) { JvmInstallation . Arch defaultArch = systemInfo . getArchitecture ( ) = = SystemInfo . Architecture . i386 ? JvmInstallation . Arch . i386 : JvmInstallation . Arch . x86_64 ; List < JvmInstallation > jvms = new ArrayList < JvmInstallation > ( ) ; findJvms ( windowsRegistry , <str> , jvms , true , defaultArch ) ; findJvms ( windowsRegistry , <str> , jvms , false , defaultArch ) ; findJvms ( windowsRegistry , <str> , jvms , true , JvmInstallation . Arch . i386 ) ; findJvms ( windowsRegistry , <str> , jvms , false , JvmInstallation . Arch . i386 ) ; return jvms ; } private void findJvms ( WindowsRegistry windowsRegistry , String sdkSubkey , Collection < JvmInstallation > jvms , boolean jdk , JvmInstallation . Arch arch ) { List < String > versions ; try { versions = windowsRegistry . getSubkeys ( WindowsRegistry . Key . HKEY_LOCAL_MACHINE , sdkSubkey ) ; } catch ( MissingRegistryEntryException e ) { return ; } for ( String version : versions ) { if ( version . matches ( <str> ) ) { continue ; } String javaHome = windowsRegistry . getStringValue ( WindowsRegistry . Key . HKEY_LOCAL_MACHINE , sdkSubkey + <str> + version , <str> ) ; jvms . add ( new JvmInstallation ( JavaVersion . toVersion ( version ) , version , new File ( javaHome ) , jdk , arch ) ) ; } } } 

package org . gradle . performance . results ; import org . gradle . api . Transformer ; import org . gradle . performance . fixture . MeasuredOperationList ; import org . gradle . performance . measure . DataAmount ; import org . gradle . performance . measure . DataSeries ; import org . gradle . performance . measure . Duration ; import java . io . IOException ; import java . io . Writer ; import java . util . Date ; public class TestPageGenerator extends HtmlPageGenerator < TestExecutionHistory > { @Override protected int getDepth ( ) { return <int> ; } @Override public void render ( final TestExecutionHistory testHistory , Writer writer ) throws IOException { new MetricsHtml ( writer ) { { html ( ) ; head ( ) ; headSection ( this ) ; title ( ) . text ( String . format ( <str> , testHistory . getName ( ) ) ) . end ( ) ; script ( ) ; text ( <str> ) ; text ( <str> + testHistory . getId ( ) + <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; text ( <str> ) ; end ( ) ; end ( ) ; body ( ) ; div ( ) . id ( <str> ) ; h2 ( ) . text ( String . format ( <str> , testHistory . getName ( ) ) ) . end ( ) ; h3 ( ) . text ( <str> ) . end ( ) ; div ( ) . id ( <str> ) . classAttr ( <str> ) ; p ( ) . text ( <str> ) . end ( ) ; end ( ) ; h3 ( ) . text ( <str> ) . end ( ) ; div ( ) . id ( <str> ) . classAttr ( <str> ) ; p ( ) . text ( <str> ) . end ( ) ; end ( ) ; div ( ) . id ( <str> ) . end ( ) ; h3 ( ) . text ( <str> ) . end ( ) ; div ( ) . id ( <str> ) . end ( ) ; table ( ) . classAttr ( <str> ) ; tr ( ) . classAttr ( <str> ) ; th ( ) . colspan ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; th ( ) . colspan ( String . valueOf ( testHistory . getExperimentCount ( ) ) ) . text ( <str> ) . end ( ) ; th ( ) . colspan ( <str> ) . text ( <str> ) . end ( ) ; end ( ) ; tr ( ) ; th ( ) . text ( <str> ) . end ( ) ; th ( ) . text ( <str> ) . end ( ) ; th ( ) . text ( <str> ) . end ( ) ; th ( ) . text ( <str> ) . end ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { for ( String label : testHistory . getExperimentLabels ( ) ) { th ( ) . classAttr ( <str> ) . text ( label ) . end ( ) ; } } th ( ) . text ( <str> ) . end ( ) ; th ( ) . text ( <str> ) . end ( ) ; end ( ) ; for ( PerformanceResults results : testHistory . getPerformanceResults ( ) ) { tr ( ) ; td ( ) . text ( format . timestamp ( new Date ( results . getTestTime ( ) ) ) ) . end ( ) ; td ( ) . text ( results . getVersionUnderTest ( ) ) . end ( ) ; td ( ) . text ( results . getVcsBranch ( ) ) . end ( ) ; String commit = results . getVcsCommit ( ) ; td ( ) . a ( ) . href ( String . format ( <str> , commit ) ) . text ( commit ) . end ( ) . end ( ) ; renderSamplesForExperiment ( results . getExperiments ( ) , new Transformer < DataSeries < Duration > , MeasuredOperationList > ( ) { public DataSeries < Duration > transform ( MeasuredOperationList original ) { return original . getTotalTime ( ) ; } } ) ; renderSamplesForExperiment ( results . getExperiments ( ) , new Transformer < DataSeries < Duration > , MeasuredOperationList > ( ) { public DataSeries < Duration > transform ( MeasuredOperationList original ) { return original . getConfigurationTime ( ) ; } } ) ; renderSamplesForExperiment ( results . getExperiments ( ) , new Transformer < DataSeries < Duration > , MeasuredOperationList > ( ) { public DataSeries < Duration > transform ( MeasuredOperationList original ) { return original . getExecutionTime ( ) ; } } ) ; renderSamplesForExperiment ( results . getExperiments ( ) , new Transformer < DataSeries < DataAmount > , MeasuredOperationList > ( ) { public DataSeries < DataAmount > transform ( MeasuredOperationList original ) { return original . getTotalMemoryUsed ( ) ; } } ) ; renderSamplesForExperiment ( results . getExperiments ( ) , new Transformer < DataSeries < DataAmount > , MeasuredOperationList > ( ) { public DataSeries < DataAmount > transform ( MeasuredOperationList original ) { return original . getTotalHeapUsage ( ) ; } } ) ; renderSamplesForExperiment ( results . getExperiments ( ) , new Transformer < DataSeries < DataAmount > , MeasuredOperationList > ( ) { public DataSeries < DataAmount > transform ( MeasuredOperationList original ) { return original . getMaxHeapUsage ( ) ; } } ) ; renderSamplesForExperiment ( results . getExperiments ( ) , new Transformer < DataSeries < DataAmount > , MeasuredOperationList > ( ) { public DataSeries < DataAmount > transform ( MeasuredOperationList original ) { return original . getMaxUncollectedHeap ( ) ; } } ) ; renderSamplesForExperiment ( results . getExperiments ( ) , new Transformer < DataSeries < DataAmount > , MeasuredOperationList > ( ) { public DataSeries < DataAmount > transform ( MeasuredOperationList original ) { return original . getMaxCommittedHeap ( ) ; } } ) ; td ( ) . text ( results . getOperatingSystem ( ) ) . end ( ) ; td ( ) . text ( results . getJvm ( ) ) . end ( ) ; end ( ) ; } end ( ) ; end ( ) ; footer ( this ) ; endAll ( ) ; } } ; } } 

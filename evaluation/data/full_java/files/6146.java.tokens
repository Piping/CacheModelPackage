package org . elasticsearch . common . xcontent ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . ParseFieldMatcher ; import org . elasticsearch . common . lease . Releasable ; import java . io . IOException ; import java . util . List ; import java . util . Map ; public interface XContentParser extends Releasable { enum Token { START_OBJECT { @Override public boolean isValue ( ) { return false ; } } , END_OBJECT { @Override public boolean isValue ( ) { return false ; } } , START_ARRAY { @Override public boolean isValue ( ) { return false ; } } , END_ARRAY { @Override public boolean isValue ( ) { return false ; } } , FIELD_NAME { @Override public boolean isValue ( ) { return false ; } } , VALUE_STRING { @Override public boolean isValue ( ) { return true ; } } , VALUE_NUMBER { @Override public boolean isValue ( ) { return true ; } } , VALUE_BOOLEAN { @Override public boolean isValue ( ) { return true ; } } , VALUE_EMBEDDED_OBJECT { @Override public boolean isValue ( ) { return true ; } } , VALUE_NULL { @Override public boolean isValue ( ) { return false ; } } ; public abstract boolean isValue ( ) ; } enum NumberType { INT , LONG , FLOAT , DOUBLE } XContentType contentType ( ) ; Token nextToken ( ) throws IOException ; void skipChildren ( ) throws IOException ; Token currentToken ( ) ; String currentName ( ) throws IOException ; Map < String , Object > map ( ) throws IOException ; Map < String , Object > mapOrdered ( ) throws IOException ; List < Object > list ( ) throws IOException ; List < Object > listOrderedMap ( ) throws IOException ; String text ( ) throws IOException ; String textOrNull ( ) throws IOException ; BytesRef utf8BytesOrNull ( ) throws IOException ; BytesRef utf8Bytes ( ) throws IOException ; Object objectText ( ) throws IOException ; Object objectBytes ( ) throws IOException ; boolean hasTextCharacters ( ) ; char [ ] textCharacters ( ) throws IOException ; int textLength ( ) throws IOException ; int textOffset ( ) throws IOException ; Number numberValue ( ) throws IOException ; NumberType numberType ( ) throws IOException ; short shortValue ( boolean coerce ) throws IOException ; int intValue ( boolean coerce ) throws IOException ; long longValue ( boolean coerce ) throws IOException ; float floatValue ( boolean coerce ) throws IOException ; double doubleValue ( boolean coerce ) throws IOException ; short shortValue ( ) throws IOException ; int intValue ( ) throws IOException ; long longValue ( ) throws IOException ; float floatValue ( ) throws IOException ; double doubleValue ( ) throws IOException ; boolean isBooleanValue ( ) throws IOException ; boolean booleanValue ( ) throws IOException ; byte [ ] binaryValue ( ) throws IOException ; XContentLocation getTokenLocation ( ) ; boolean isClosed ( ) ; ParseFieldMatcher getParseFieldMatcher ( ) ; void setParseFieldMatcher ( ParseFieldMatcher matcher ) ; } 

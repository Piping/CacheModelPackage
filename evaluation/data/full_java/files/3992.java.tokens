package org . eclipse . debug . internal . ui ; import java . util . HashMap ; import java . util . Map ; import java . util . Map . Entry ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IConfigurationElement ; import org . eclipse . core . runtime . ListenerList ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . DebugPlugin ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . IExpression ; import org . eclipse . debug . core . model . IStackFrame ; import org . eclipse . debug . core . model . IThread ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . core . model . IVariable ; import org . eclipse . debug . internal . ui . views . variables . IndexedVariablePartition ; import org . eclipse . debug . ui . IDebugEditorPresentation ; import org . eclipse . debug . ui . IDebugModelPresentation ; import org . eclipse . debug . ui . IDebugModelPresentationExtension ; import org . eclipse . debug . ui . IInstructionPointerPresentation ; import org . eclipse . debug . ui . ISourcePresentation ; import org . eclipse . debug . ui . IValueDetailListener ; import org . eclipse . jface . text . source . Annotation ; import org . eclipse . jface . text . source . SourceViewerConfiguration ; import org . eclipse . jface . viewers . IBaseLabelProvider ; import org . eclipse . jface . viewers . IColorProvider ; import org . eclipse . jface . viewers . IFontProvider ; import org . eclipse . jface . viewers . ILabelProviderListener ; import org . eclipse . swt . graphics . Color ; import org . eclipse . swt . graphics . Font ; import org . eclipse . swt . graphics . Image ; import org . eclipse . ui . IEditorInput ; import org . eclipse . ui . IEditorPart ; public class LazyModelPresentation implements IDebugModelPresentation , IDebugEditorPresentation , IColorProvider , IFontProvider , IInstructionPointerPresentation , IDebugModelPresentationExtension { protected HashMap < String , Object > fAttributes = new HashMap < String , Object > ( <int> ) ; protected IConfigurationElement fConfig = null ; protected IDebugModelPresentation fPresentation = null ; protected ListenerList fListeners = new ListenerList ( ) ; private DelegatingModelPresentation fOwner = null ; @Override public void removeAnnotations ( IEditorPart editorPart , IThread thread ) { IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IDebugEditorPresentation ) { ( ( IDebugEditorPresentation ) presentation ) . removeAnnotations ( editorPart , thread ) ; } } @Override public boolean addAnnotations ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IDebugEditorPresentation ) { return ( ( IDebugEditorPresentation ) presentation ) . addAnnotations ( editorPart , frame ) ; } return false ; } public LazyModelPresentation ( IConfigurationElement configElement ) { fConfig = configElement ; } public LazyModelPresentation ( DelegatingModelPresentation parent , IConfigurationElement configElement ) { this ( configElement ) ; fOwner = parent ; } @Override public Image getImage ( Object element ) { initImageRegistry ( ) ; Image image = getPresentation ( ) . getImage ( element ) ; if ( image = = null ) { image = getDefaultImage ( element ) ; } if ( image ! = null ) { int flags = computeAdornmentFlags ( element ) ; if ( flags > <int> ) { CompositeDebugImageDescriptor descriptor = new CompositeDebugImageDescriptor ( image , flags ) ; return DebugUIPlugin . getImageDescriptorRegistry ( ) . get ( descriptor ) ; } } return image ; } private synchronized void initImageRegistry ( ) { if ( ! DebugPluginImages . isInitialized ( ) ) { DebugUIPlugin . getDefault ( ) . getImageRegistry ( ) ; } } private int computeAdornmentFlags ( Object element ) { if ( element instanceof IBreakpoint ) { if ( ! DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . isEnabled ( ) ) { return CompositeDebugImageDescriptor . SKIP_BREAKPOINT ; } } return <int> ; } protected String getDefaultText ( Object element ) { return DebugUIPlugin . getDefaultLabelProvider ( ) . getText ( element ) ; } protected Image getDefaultImage ( Object element ) { return DebugUIPlugin . getDefaultLabelProvider ( ) . getImage ( element ) ; } @Override public String getText ( Object element ) { if ( ! ( element instanceof IndexedVariablePartition ) ) { String text = getPresentation ( ) . getText ( element ) ; if ( text ! = null ) { return text ; } } if ( showVariableTypeNames ( ) ) { try { if ( element instanceof IExpression ) { StringBuffer buf = new StringBuffer ( ) ; IValue value = ( ( IExpression ) element ) . getValue ( ) ; if ( value ! = null ) { String type = value . getReferenceTypeName ( ) ; if ( type ! = null & & type . length ( ) > <int> ) { buf . append ( type ) ; buf . append ( <str> ) ; } } buf . append ( getDefaultText ( element ) ) ; return buf . toString ( ) ; } else if ( element instanceof IVariable ) { return new StringBuffer ( ( ( IVariable ) element ) . getValue ( ) . getReferenceTypeName ( ) ) . append ( <str> ) . append ( getDefaultText ( element ) ) . toString ( ) ; } } catch ( DebugException de ) { DebugUIPlugin . log ( de ) ; } } return getDefaultText ( element ) ; } protected boolean showVariableTypeNames ( ) { Boolean show = ( Boolean ) fAttributes . get ( DISPLAY_VARIABLE_TYPE_NAMES ) ; show = show = = null ? Boolean . FALSE : show ; return show . booleanValue ( ) ; } @Override public void computeDetail ( IValue value , IValueDetailListener listener ) { getPresentation ( ) . computeDetail ( value , listener ) ; } @Override public IEditorInput getEditorInput ( Object element ) { return getPresentation ( ) . getEditorInput ( element ) ; } @Override public String getEditorId ( IEditorInput input , Object inputObject ) { return getPresentation ( ) . getEditorId ( input , inputObject ) ; } @Override public void addListener ( ILabelProviderListener listener ) { if ( fPresentation ! = null ) { getPresentation ( ) . addListener ( listener ) ; } fListeners . add ( listener ) ; } @Override public void dispose ( ) { if ( fPresentation ! = null ) { getPresentation ( ) . dispose ( ) ; } fListeners = null ; } @Override public boolean isLabelProperty ( Object element , String property ) { if ( fPresentation ! = null ) { return getPresentation ( ) . isLabelProperty ( element , property ) ; } return false ; } @Override public void removeListener ( ILabelProviderListener listener ) { if ( fPresentation ! = null ) { getPresentation ( ) . removeListener ( listener ) ; } ListenerList listeners = fListeners ; if ( listeners ! = null ) { listeners . remove ( listener ) ; } } protected IDebugModelPresentation getPresentation ( ) { if ( fPresentation = = null ) { synchronized ( this ) { if ( fPresentation ! = null ) { return fPresentation ; } try { IDebugModelPresentation tempPresentation = ( IDebugModelPresentation ) DebugUIPlugin . createExtension ( fConfig , <str> ) ; if ( fListeners ! = null ) { Object [ ] list = fListeners . getListeners ( ) ; for ( int i = <int> ; i < list . length ; i + + ) { tempPresentation . addListener ( ( ILabelProviderListener ) list [ i ] ) ; } } for ( Entry < String , Object > entry : fAttributes . entrySet ( ) ) { tempPresentation . setAttribute ( entry . getKey ( ) , entry . getValue ( ) ) ; } fPresentation = tempPresentation ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } } return fPresentation ; } @Override public void setAttribute ( String id , Object value ) { if ( value = = null ) { return ; } if ( fPresentation ! = null ) { getPresentation ( ) . setAttribute ( id , value ) ; } fAttributes . put ( id , value ) ; if ( fOwner ! = null ) { fOwner . basicSetAttribute ( id , value ) ; } } public String getDebugModelIdentifier ( ) { return fConfig . getAttribute ( <str> ) ; } public SourceViewerConfiguration newDetailsViewerConfiguration ( ) throws CoreException { String attr = fConfig . getAttribute ( <str> ) ; if ( attr ! = null ) { return ( SourceViewerConfiguration ) fConfig . createExecutableExtension ( <str> ) ; } return null ; } public Map < String , Object > getAttributeMap ( ) { return new HashMap < String , Object > ( fAttributes ) ; } public Map < String , Object > getAttributes ( ) { return fAttributes ; } @Override public Color getForeground ( Object element ) { IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IColorProvider ) { IColorProvider colorProvider = ( IColorProvider ) presentation ; return colorProvider . getForeground ( element ) ; } return null ; } @Override public Color getBackground ( Object element ) { IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IColorProvider ) { IColorProvider colorProvider = ( IColorProvider ) presentation ; return colorProvider . getBackground ( element ) ; } return null ; } @Override public Font getFont ( Object element ) { IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IFontProvider ) { IFontProvider fontProvider = ( IFontProvider ) presentation ; return fontProvider . getFont ( element ) ; } return null ; } @Override public Annotation getInstructionPointerAnnotation ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IInstructionPointerPresentation ) { IInstructionPointerPresentation pointerPresentation = ( IInstructionPointerPresentation ) presentation ; return pointerPresentation . getInstructionPointerAnnotation ( editorPart , frame ) ; } return null ; } @Override public String getInstructionPointerAnnotationType ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IInstructionPointerPresentation ) { IInstructionPointerPresentation pointerPresentation = ( IInstructionPointerPresentation ) presentation ; return pointerPresentation . getInstructionPointerAnnotationType ( editorPart , frame ) ; } return null ; } @Override public Image getInstructionPointerImage ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IInstructionPointerPresentation ) { IInstructionPointerPresentation pointerPresentation = ( IInstructionPointerPresentation ) presentation ; return pointerPresentation . getInstructionPointerImage ( editorPart , frame ) ; } return null ; } @Override public String getInstructionPointerText ( IEditorPart editorPart , IStackFrame frame ) { IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IInstructionPointerPresentation ) { IInstructionPointerPresentation pointerPresentation = ( IInstructionPointerPresentation ) presentation ; return pointerPresentation . getInstructionPointerText ( editorPart , frame ) ; } return null ; } @Override public boolean requiresUIThread ( Object element ) { if ( ! DebugPluginImages . isInitialized ( ) ) { return true ; } IDebugModelPresentation presentation = getPresentation ( ) ; if ( presentation instanceof IDebugModelPresentationExtension ) { return ( ( IDebugModelPresentationExtension ) presentation ) . requiresUIThread ( element ) ; } return false ; } } 

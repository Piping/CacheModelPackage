package org . gradle . model . internal . inspect ; import com . google . common . reflect . TypeToken ; import net . jcip . annotations . ThreadSafe ; import java . lang . annotation . Annotation ; @ThreadSafe public abstract class AbstractAnnotationDrivenModelRuleExtractor < T extends Annotation > implements MethodModelRuleExtractor { private final Class < T > annotationType ; protected AbstractAnnotationDrivenModelRuleExtractor ( ) { @SuppressWarnings ( <str> ) Class < T > annotationType = ( Class < T > ) new TypeToken < T > ( getClass ( ) ) { } . getRawType ( ) ; this . annotationType = annotationType ; } @Override public boolean isSatisfiedBy ( MethodRuleDefinition < ? , ? > ruleDefinition ) { return ruleDefinition . getAnnotation ( annotationType ) ! = null ; } public String getDescription ( ) { return String . format ( <str> , annotationType . getSimpleName ( ) ) ; } protected void validateIsVoidMethod ( MethodRuleDefinition < ? , ? > ruleDefinition , ValidationProblemCollector problems ) { if ( ! ruleDefinition . getReturnType ( ) . getRawClass ( ) . equals ( Void . TYPE ) ) { problems . add ( ruleDefinition , <str> + getDescription ( ) + <str> ) ; } } } 

package io . netty . handler . codec . spdy ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . ByteBufAllocator ; import java . nio . ByteOrder ; import java . util . Set ; import static io . netty . handler . codec . spdy . SpdyCodecUtil . * ; public class SpdyFrameEncoder { private final int version ; public SpdyFrameEncoder ( SpdyVersion spdyVersion ) { if ( spdyVersion = = null ) { throw new NullPointerException ( <str> ) ; } version = spdyVersion . getVersion ( ) ; } private void writeControlFrameHeader ( ByteBuf buffer , int type , byte flags , int length ) { buffer . writeShort ( version | <hex> ) ; buffer . writeShort ( type ) ; buffer . writeByte ( flags ) ; buffer . writeMedium ( length ) ; } public ByteBuf encodeDataFrame ( ByteBufAllocator allocator , int streamId , boolean last , ByteBuf data ) { byte flags = last ? SPDY_DATA_FLAG_FIN : <int> ; int length = data . readableBytes ( ) ; ByteBuf frame = allocator . ioBuffer ( SPDY_HEADER_SIZE + length ) . order ( ByteOrder . BIG_ENDIAN ) ; frame . writeInt ( streamId & <hex> ) ; frame . writeByte ( flags ) ; frame . writeMedium ( length ) ; frame . writeBytes ( data , data . readerIndex ( ) , length ) ; return frame ; } public ByteBuf encodeSynStreamFrame ( ByteBufAllocator allocator , int streamId , int associatedToStreamId , byte priority , boolean last , boolean unidirectional , ByteBuf headerBlock ) { int headerBlockLength = headerBlock . readableBytes ( ) ; byte flags = last ? SPDY_FLAG_FIN : <int> ; if ( unidirectional ) { flags | = SPDY_FLAG_UNIDIRECTIONAL ; } int length = <int> + headerBlockLength ; ByteBuf frame = allocator . ioBuffer ( SPDY_HEADER_SIZE + length ) . order ( ByteOrder . BIG_ENDIAN ) ; writeControlFrameHeader ( frame , SPDY_SYN_STREAM_FRAME , flags , length ) ; frame . writeInt ( streamId ) ; frame . writeInt ( associatedToStreamId ) ; frame . writeShort ( ( priority & <hex> ) < < <int> ) ; frame . writeBytes ( headerBlock , headerBlock . readerIndex ( ) , headerBlockLength ) ; return frame ; } public ByteBuf encodeSynReplyFrame ( ByteBufAllocator allocator , int streamId , boolean last , ByteBuf headerBlock ) { int headerBlockLength = headerBlock . readableBytes ( ) ; byte flags = last ? SPDY_FLAG_FIN : <int> ; int length = <int> + headerBlockLength ; ByteBuf frame = allocator . ioBuffer ( SPDY_HEADER_SIZE + length ) . order ( ByteOrder . BIG_ENDIAN ) ; writeControlFrameHeader ( frame , SPDY_SYN_REPLY_FRAME , flags , length ) ; frame . writeInt ( streamId ) ; frame . writeBytes ( headerBlock , headerBlock . readerIndex ( ) , headerBlockLength ) ; return frame ; } public ByteBuf encodeRstStreamFrame ( ByteBufAllocator allocator , int streamId , int statusCode ) { byte flags = <int> ; int length = <int> ; ByteBuf frame = allocator . ioBuffer ( SPDY_HEADER_SIZE + length ) . order ( ByteOrder . BIG_ENDIAN ) ; writeControlFrameHeader ( frame , SPDY_RST_STREAM_FRAME , flags , length ) ; frame . writeInt ( streamId ) ; frame . writeInt ( statusCode ) ; return frame ; } public ByteBuf encodeSettingsFrame ( ByteBufAllocator allocator , SpdySettingsFrame spdySettingsFrame ) { Set < Integer > ids = spdySettingsFrame . ids ( ) ; int numSettings = ids . size ( ) ; byte flags = spdySettingsFrame . clearPreviouslyPersistedSettings ( ) ? SPDY_SETTINGS_CLEAR : <int> ; int length = <int> + <int> * numSettings ; ByteBuf frame = allocator . ioBuffer ( SPDY_HEADER_SIZE + length ) . order ( ByteOrder . BIG_ENDIAN ) ; writeControlFrameHeader ( frame , SPDY_SETTINGS_FRAME , flags , length ) ; frame . writeInt ( numSettings ) ; for ( Integer id : ids ) { flags = <int> ; if ( spdySettingsFrame . isPersistValue ( id ) ) { flags | = SPDY_SETTINGS_PERSIST_VALUE ; } if ( spdySettingsFrame . isPersisted ( id ) ) { flags | = SPDY_SETTINGS_PERSISTED ; } frame . writeByte ( flags ) ; frame . writeMedium ( id ) ; frame . writeInt ( spdySettingsFrame . getValue ( id ) ) ; } return frame ; } public ByteBuf encodePingFrame ( ByteBufAllocator allocator , int id ) { byte flags = <int> ; int length = <int> ; ByteBuf frame = allocator . ioBuffer ( SPDY_HEADER_SIZE + length ) . order ( ByteOrder . BIG_ENDIAN ) ; writeControlFrameHeader ( frame , SPDY_PING_FRAME , flags , length ) ; frame . writeInt ( id ) ; return frame ; } public ByteBuf encodeGoAwayFrame ( ByteBufAllocator allocator , int lastGoodStreamId , int statusCode ) { byte flags = <int> ; int length = <int> ; ByteBuf frame = allocator . ioBuffer ( SPDY_HEADER_SIZE + length ) . order ( ByteOrder . BIG_ENDIAN ) ; writeControlFrameHeader ( frame , SPDY_GOAWAY_FRAME , flags , length ) ; frame . writeInt ( lastGoodStreamId ) ; frame . writeInt ( statusCode ) ; return frame ; } public ByteBuf encodeHeadersFrame ( ByteBufAllocator allocator , int streamId , boolean last , ByteBuf headerBlock ) { int headerBlockLength = headerBlock . readableBytes ( ) ; byte flags = last ? SPDY_FLAG_FIN : <int> ; int length = <int> + headerBlockLength ; ByteBuf frame = allocator . ioBuffer ( SPDY_HEADER_SIZE + length ) . order ( ByteOrder . BIG_ENDIAN ) ; writeControlFrameHeader ( frame , SPDY_HEADERS_FRAME , flags , length ) ; frame . writeInt ( streamId ) ; frame . writeBytes ( headerBlock , headerBlock . readerIndex ( ) , headerBlockLength ) ; return frame ; } public ByteBuf encodeWindowUpdateFrame ( ByteBufAllocator allocator , int streamId , int deltaWindowSize ) { byte flags = <int> ; int length = <int> ; ByteBuf frame = allocator . ioBuffer ( SPDY_HEADER_SIZE + length ) . order ( ByteOrder . BIG_ENDIAN ) ; writeControlFrameHeader ( frame , SPDY_WINDOW_UPDATE_FRAME , flags , length ) ; frame . writeInt ( streamId ) ; frame . writeInt ( deltaWindowSize ) ; return frame ; } } 

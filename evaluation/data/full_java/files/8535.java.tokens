package org . elasticsearch . search . suggest ; import org . apache . lucene . search . IndexSearcher ; import org . apache . lucene . util . CharsRefBuilder ; import org . elasticsearch . common . text . StringText ; import java . io . IOException ; import java . util . Locale ; import java . util . Map ; public class CustomSuggester extends Suggester < CustomSuggester . CustomSuggestionsContext > { @Override public Suggest . Suggestion < ? extends Suggest . Suggestion . Entry < ? extends Suggest . Suggestion . Entry . Option > > innerExecute ( String name , CustomSuggestionsContext suggestion , IndexSearcher searcher , CharsRefBuilder spare ) throws IOException { String text = suggestion . getText ( ) . utf8ToString ( ) ; Suggest . Suggestion < Suggest . Suggestion . Entry < Suggest . Suggestion . Entry . Option > > response = new Suggest . Suggestion < > ( name , suggestion . getSize ( ) ) ; String firstSuggestion = String . format ( Locale . ROOT , <str> , text , suggestion . getField ( ) , suggestion . options . get ( <str> ) , <str> ) ; Suggest . Suggestion . Entry < Suggest . Suggestion . Entry . Option > resultEntry12 = new Suggest . Suggestion . Entry < > ( new StringText ( firstSuggestion ) , <int> , text . length ( ) + <int> ) ; response . addTerm ( resultEntry12 ) ; String secondSuggestion = String . format ( Locale . ROOT , <str> , text , suggestion . getField ( ) , suggestion . options . get ( <str> ) , <str> ) ; Suggest . Suggestion . Entry < Suggest . Suggestion . Entry . Option > resultEntry123 = new Suggest . Suggestion . Entry < > ( new StringText ( secondSuggestion ) , <int> , text . length ( ) + <int> ) ; response . addTerm ( resultEntry123 ) ; return response ; } @Override public SuggestContextParser getContextParser ( ) { return ( parser , mapperService , fieldData , headersContext ) - > { Map < String , Object > options = parser . map ( ) ; CustomSuggestionsContext suggestionContext = new CustomSuggestionsContext ( CustomSuggester . this , options ) ; suggestionContext . setField ( ( String ) options . get ( <str> ) ) ; return suggestionContext ; } ; } public static class CustomSuggestionsContext extends SuggestionSearchContext . SuggestionContext { public Map < String , Object > options ; public CustomSuggestionsContext ( Suggester suggester , Map < String , Object > options ) { super ( suggester ) ; this . options = options ; } } } 

package io . netty . util ; import org . junit . Test ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . HashMap ; import java . util . Map ; import java . util . Map . Entry ; import static org . junit . Assert . * ; public class NetUtilTest { private static final class TestMap extends HashMap < String , String > { private static final long serialVersionUID = - <int> ; TestMap ( String . . . values ) { for ( int i = <int> ; i < values . length ; i + = <int> ) { String key = values [ i ] ; String value = values [ i + <int> ] ; put ( key , value ) ; } } } private static final Map < String , String > validIpV4Hosts = new TestMap ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; private static final Map < String , String > invalidIpV4Hosts = new TestMap ( <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null ) ; private static final Map < String , String > validIpV6Hosts = new TestMap ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; private static final Map < String , String > invalidIpV6Hosts = new TestMap ( <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null , <str> , null ) ; private static final Map < byte [ ] , String > ipv6ToAddressStrings = new HashMap < byte [ ] , String > ( ) { private static final long serialVersionUID = <int> ; { put ( new byte [ ] { <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , - <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , - <int> , <int> , - <int> , <int> , <int> , - <int> , <int> , - <int> , - <int> , - <int> } , <str> ) ; put ( new byte [ ] { - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , - <int> , <int> , <int> , <int> , <int> } , <str> ) ; put ( new byte [ ] { <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> , <int> } , <str> ) ; } } ; private static final Map < String , String > ipv4MappedToIPv6AddressStrings = new TestMap ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) ; @Test public void testLocalhost ( ) { assertNotNull ( NetUtil . LOCALHOST ) ; } @Test public void testLoopback ( ) { assertNotNull ( NetUtil . LOOPBACK_IF ) ; } @Test public void testIsValidIpV4Address ( ) { for ( String host : validIpV4Hosts . keySet ( ) ) { assertTrue ( NetUtil . isValidIpV4Address ( host ) ) ; } for ( String host : invalidIpV4Hosts . keySet ( ) ) { assertFalse ( NetUtil . isValidIpV4Address ( host ) ) ; } } @Test public void testIsValidIpV6Address ( ) { for ( String host : validIpV6Hosts . keySet ( ) ) { assertTrue ( NetUtil . isValidIpV6Address ( host ) ) ; } for ( String host : invalidIpV6Hosts . keySet ( ) ) { assertFalse ( NetUtil . isValidIpV6Address ( host ) ) ; } } @Test public void testCreateByteArrayFromIpAddressString ( ) { for ( Entry < String , String > e : validIpV4Hosts . entrySet ( ) ) { assertHexDumpEquals ( e . getValue ( ) , NetUtil . createByteArrayFromIpAddressString ( e . getKey ( ) ) ) ; } for ( Entry < String , String > e : invalidIpV4Hosts . entrySet ( ) ) { assertHexDumpEquals ( e . getValue ( ) , NetUtil . createByteArrayFromIpAddressString ( e . getKey ( ) ) ) ; } for ( Entry < String , String > e : validIpV6Hosts . entrySet ( ) ) { assertHexDumpEquals ( e . getValue ( ) , NetUtil . createByteArrayFromIpAddressString ( e . getKey ( ) ) ) ; } for ( Entry < String , String > e : invalidIpV6Hosts . entrySet ( ) ) { assertHexDumpEquals ( e . getValue ( ) , NetUtil . createByteArrayFromIpAddressString ( e . getKey ( ) ) ) ; } } @Test public void testIp6AddressToString ( ) throws UnknownHostException { for ( Entry < byte [ ] , String > testEntry : ipv6ToAddressStrings . entrySet ( ) ) { assertEquals ( testEntry . getValue ( ) , NetUtil . toAddressString ( InetAddress . getByAddress ( testEntry . getKey ( ) ) ) ) ; } } @Test public void testIp4AddressToString ( ) throws UnknownHostException { for ( Entry < String , String > e : validIpV4Hosts . entrySet ( ) ) { assertEquals ( e . getKey ( ) , NetUtil . toAddressString ( InetAddress . getByAddress ( unhex ( e . getValue ( ) ) ) ) ) ; } } @Test public void testIpv4MappedIp6GetByName ( ) { for ( Entry < String , String > testEntry : ipv4MappedToIPv6AddressStrings . entrySet ( ) ) { assertEquals ( testEntry . getValue ( ) , NetUtil . toAddressString ( NetUtil . getByName ( testEntry . getKey ( ) , true ) , true ) ) ; } } @Test public void testinvalidIpv4MappedIp6GetByName ( ) { for ( String testEntry : invalidIpV4Hosts . keySet ( ) ) { assertNull ( NetUtil . getByName ( testEntry , true ) ) ; } for ( String testEntry : invalidIpV6Hosts . keySet ( ) ) { assertNull ( NetUtil . getByName ( testEntry , true ) ) ; } } private static void assertHexDumpEquals ( String expected , byte [ ] actual ) { assertEquals ( expected , hex ( actual ) ) ; } private static String hex ( byte [ ] value ) { if ( value = = null ) { return null ; } StringBuilder buf = new StringBuilder ( value . length < < <int> ) ; for ( byte b : value ) { String hex = Integer . toHexString ( b & <hex> ) ; if ( hex . length ( ) = = <int> ) { buf . append ( <str> ) ; } buf . append ( hex ) ; } return buf . toString ( ) ; } private static byte [ ] unhex ( String value ) { if ( value = = null ) { return null ; } byte [ ] buf = new byte [ value . length ( ) > > > <int> ] ; for ( int i = <int> ; i < buf . length ; i + + ) { buf [ i ] = ( byte ) Integer . parseInt ( value . substring ( i < < <int> , i + <int> < < <int> ) , <int> ) ; } return buf ; } } 

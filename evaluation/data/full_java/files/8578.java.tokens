package org . elasticsearch . update ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . AbstractExecutableScript ; import org . elasticsearch . script . ExecutableScript ; import org . elasticsearch . script . NativeScriptEngineService ; import org . elasticsearch . script . NativeScriptFactory ; import org . elasticsearch . script . Script ; import org . elasticsearch . script . ScriptModule ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import org . elasticsearch . test . ESIntegTestCase . Scope ; import java . util . Collection ; import java . util . HashMap ; import java . util . Map ; import static org . hamcrest . Matchers . hasKey ; import static org . hamcrest . Matchers . is ; @ClusterScope ( scope = Scope . SUITE , numDataNodes = <int> ) public class UpdateByNativeScriptIT extends ESIntegTestCase { @Override protected Collection < Class < ? extends Plugin > > nodePlugins ( ) { return pluginList ( CustomNativeScriptFactory . TestPlugin . class ) ; } public void testThatUpdateUsingNativeScriptWorks ( ) throws Exception { createIndex ( <str> ) ; ensureYellow ( ) ; index ( <str> , <str> , <str> , <str> , <str> ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( <str> , <str> ) ; client ( ) . prepareUpdate ( <str> , <str> , <str> ) . setScript ( new Script ( <str> , ScriptService . ScriptType . INLINE , NativeScriptEngineService . NAME , params ) ) . get ( ) ; Map < String , Object > data = client ( ) . prepareGet ( <str> , <str> , <str> ) . get ( ) . getSource ( ) ; assertThat ( data , hasKey ( <str> ) ) ; assertThat ( data . get ( <str> ) . toString ( ) , is ( <str> ) ) ; } public static class CustomNativeScriptFactory implements NativeScriptFactory { public static class TestPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( ScriptModule scriptModule ) { scriptModule . registerScript ( <str> , CustomNativeScriptFactory . class ) ; } } @Override public ExecutableScript newScript ( @Nullable Map < String , Object > params ) { return new CustomScript ( params ) ; } @Override public boolean needsScores ( ) { return false ; } } static class CustomScript extends AbstractExecutableScript { private Map < String , Object > params ; private Map < String , Object > vars = new HashMap < > ( <int> ) ; public CustomScript ( Map < String , Object > params ) { this . params = params ; } @Override public Object run ( ) { if ( vars . containsKey ( <str> ) & & vars . get ( <str> ) instanceof Map ) { Map ctx = ( Map ) vars . get ( <str> ) ; if ( ctx . containsKey ( <str> ) & & ctx . get ( <str> ) instanceof Map ) { Map source = ( Map ) ctx . get ( <str> ) ; source . putAll ( params ) ; } } return null ; } @Override public void setNextVar ( String name , Object value ) { vars . put ( name , value ) ; } } } 

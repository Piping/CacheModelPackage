package org . joda . time . base ; import org . joda . time . Chronology ; import org . joda . time . DateTimeUtils ; import org . joda . time . DateTimeZone ; import org . joda . time . ReadableDateTime ; import org . joda . time . chrono . ISOChronology ; import org . joda . time . convert . ConverterManager ; import org . joda . time . convert . InstantConverter ; import java . io . Serializable ; public abstract class BaseDateTime extends AbstractDateTime implements ReadableDateTime , Serializable { private static final long serialVersionUID = - <int> ; private long iMillis ; private volatile Chronology iChronology ; public BaseDateTime ( ) { this ( DateTimeUtils . currentTimeMillis ( ) , ISOChronology . getInstance ( ) ) ; } public BaseDateTime ( DateTimeZone zone ) { this ( DateTimeUtils . currentTimeMillis ( ) , ISOChronology . getInstance ( zone ) ) ; } public BaseDateTime ( Chronology chronology ) { this ( DateTimeUtils . currentTimeMillis ( ) , chronology ) ; } public BaseDateTime ( long instant ) { this ( instant , ISOChronology . getInstance ( ) ) ; } public BaseDateTime ( long instant , DateTimeZone zone ) { this ( instant , ISOChronology . getInstance ( zone ) ) ; } public BaseDateTime ( long instant , Chronology chronology ) { super ( ) ; iChronology = checkChronology ( chronology ) ; iMillis = checkInstant ( instant , iChronology ) ; if ( iChronology . year ( ) . isSupported ( ) ) { iChronology . year ( ) . set ( iMillis , iChronology . year ( ) . get ( iMillis ) ) ; } } public BaseDateTime ( Object instant , DateTimeZone zone ) { super ( ) ; InstantConverter converter = ConverterManager . getInstance ( ) . getInstantConverter ( instant ) ; Chronology chrono = checkChronology ( converter . getChronology ( instant , zone ) ) ; iChronology = chrono ; iMillis = checkInstant ( converter . getInstantMillis ( instant , chrono ) , chrono ) ; } public BaseDateTime ( Object instant , Chronology chronology ) { super ( ) ; InstantConverter converter = ConverterManager . getInstance ( ) . getInstantConverter ( instant ) ; iChronology = checkChronology ( converter . getChronology ( instant , chronology ) ) ; iMillis = checkInstant ( converter . getInstantMillis ( instant , chronology ) , iChronology ) ; } public BaseDateTime ( int year , int monthOfYear , int dayOfMonth , int hourOfDay , int minuteOfHour , int secondOfMinute , int millisOfSecond ) { this ( year , monthOfYear , dayOfMonth , hourOfDay , minuteOfHour , secondOfMinute , millisOfSecond , ISOChronology . getInstance ( ) ) ; } public BaseDateTime ( int year , int monthOfYear , int dayOfMonth , int hourOfDay , int minuteOfHour , int secondOfMinute , int millisOfSecond , DateTimeZone zone ) { this ( year , monthOfYear , dayOfMonth , hourOfDay , minuteOfHour , secondOfMinute , millisOfSecond , ISOChronology . getInstance ( zone ) ) ; } public BaseDateTime ( int year , int monthOfYear , int dayOfMonth , int hourOfDay , int minuteOfHour , int secondOfMinute , int millisOfSecond , Chronology chronology ) { super ( ) ; iChronology = checkChronology ( chronology ) ; long instant = iChronology . getDateTimeMillis ( year , monthOfYear , dayOfMonth , hourOfDay , minuteOfHour , secondOfMinute , millisOfSecond ) ; iMillis = checkInstant ( instant , iChronology ) ; } protected Chronology checkChronology ( Chronology chronology ) { return DateTimeUtils . getChronology ( chronology ) ; } protected long checkInstant ( long instant , Chronology chronology ) { return instant ; } @Override public long getMillis ( ) { return iMillis ; } @Override public Chronology getChronology ( ) { return iChronology ; } protected void setMillis ( long instant ) { iMillis = checkInstant ( instant , iChronology ) ; } protected void setChronology ( Chronology chronology ) { iChronology = checkChronology ( chronology ) ; } } 

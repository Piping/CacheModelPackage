package org . junit . runner ; import static org . hamcrest . CoreMatchers . containsString ; import static org . hamcrest . CoreMatchers . hasItems ; import static org . hamcrest . CoreMatchers . is ; import static org . hamcrest . MatcherAssert . assertThat ; import java . util . List ; import org . junit . Rule ; import org . junit . Test ; import org . junit . experimental . categories . IncludeCategories ; import org . junit . rules . ExpectedException ; import org . junit . runner . manipulation . Filter ; public class JUnitCommandLineParseResultTest { @Rule public ExpectedException expectedException = ExpectedException . none ( ) ; private final JUnitCommandLineParseResult jUnitCommandLineParseResult = new JUnitCommandLineParseResult ( ) ; @Test public void shouldStopParsingOptionsUponDoubleHyphenArg ( ) throws Exception { String [ ] restOfArgs = jUnitCommandLineParseResult . parseOptions ( <str> , <str> , <str> , <str> , <str> ) ; assertThat ( restOfArgs , is ( new String [ ] { <str> , <str> } ) ) ; } @Test public void shouldParseFilterArgWithEqualsSyntax ( ) throws Exception { String value = IncludeCategories . class . getName ( ) + <str> + DummyCategory0 . class . getName ( ) ; jUnitCommandLineParseResult . parseOptions ( <str> + value ) ; List < String > specs = jUnitCommandLineParseResult . getFilterSpecs ( ) ; assertThat ( specs , hasItems ( value ) ) ; } @Test public void shouldCreateFailureUponBaldFilterOptionNotFollowedByValue ( ) { jUnitCommandLineParseResult . parseOptions ( <str> ) ; Runner runner = jUnitCommandLineParseResult . createRequest ( new Computer ( ) ) . getRunner ( ) ; Description description = runner . getDescription ( ) . getChildren ( ) . get ( <int> ) ; assertThat ( description . toString ( ) , containsString ( <str> ) ) ; } @Test public void shouldParseFilterArgInWhichValueIsASeparateArg ( ) throws Exception { String value = IncludeCategories . class . getName ( ) + <str> + DummyCategory0 . class . getName ( ) ; jUnitCommandLineParseResult . parseOptions ( <str> , value ) ; List < String > specs = jUnitCommandLineParseResult . getFilterSpecs ( ) ; assertThat ( specs , hasItems ( value ) ) ; } @Test public void shouldStopParsingOptionsUponNonOption ( ) throws Exception { String [ ] restOfArgs = jUnitCommandLineParseResult . parseOptions ( new String [ ] { <str> , <str> , <str> , <str> } ) ; assertThat ( restOfArgs , is ( new String [ ] { <str> , <str> } ) ) ; } @Test public void shouldCreateFailureUponUnknownOption ( ) throws Exception { String unknownOption = <str> ; jUnitCommandLineParseResult . parseOptions ( new String [ ] { unknownOption } ) ; Runner runner = jUnitCommandLineParseResult . createRequest ( new Computer ( ) ) . getRunner ( ) ; Description description = runner . getDescription ( ) . getChildren ( ) . get ( <int> ) ; assertThat ( description . toString ( ) , containsString ( <str> ) ) ; } @Test public void shouldCreateFailureUponUncreatedFilter ( ) throws Exception { jUnitCommandLineParseResult . parseOptions ( new String [ ] { <str> + FilterFactoryStub . class . getName ( ) } ) ; Runner runner = jUnitCommandLineParseResult . createRequest ( new Computer ( ) ) . getRunner ( ) ; Description description = runner . getDescription ( ) . getChildren ( ) . get ( <int> ) ; assertThat ( description . toString ( ) , containsString ( <str> ) ) ; } @Test public void shouldCreateFailureUponUnfoundFilterFactory ( ) throws Exception { String nonExistentFilterFactory = <str> ; jUnitCommandLineParseResult . parseOptions ( new String [ ] { <str> + nonExistentFilterFactory } ) ; Runner runner = jUnitCommandLineParseResult . createRequest ( new Computer ( ) ) . getRunner ( ) ; Description description = runner . getDescription ( ) . getChildren ( ) . get ( <int> ) ; assertThat ( description . toString ( ) , containsString ( <str> ) ) ; } @Test public void shouldAddToClasses ( ) { jUnitCommandLineParseResult . parseParameters ( new String [ ] { DummyTest . class . getName ( ) } ) ; List < Class < ? > > classes = jUnitCommandLineParseResult . getClasses ( ) ; Class < ? > testClass = classes . get ( <int> ) ; assertThat ( testClass . getName ( ) , is ( DummyTest . class . getName ( ) ) ) ; } @Test public void shouldCreateFailureUponUnknownTestClass ( ) throws Exception { String unknownTestClass = <str> ; jUnitCommandLineParseResult . parseParameters ( new String [ ] { unknownTestClass } ) ; Runner runner = jUnitCommandLineParseResult . createRequest ( new Computer ( ) ) . getRunner ( ) ; Description description = runner . getDescription ( ) . getChildren ( ) . get ( <int> ) ; assertThat ( description . toString ( ) , containsString ( <str> ) ) ; } public static class FilterFactoryStub implements FilterFactory { public Filter createFilter ( FilterFactoryParams params ) throws FilterNotCreatedException { throw new FilterNotCreatedException ( new Exception ( <str> ) ) ; } } public static interface DummyCategory0 { } public static class DummyTest { @Test public void dummyTest ( ) { } } } 

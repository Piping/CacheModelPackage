package org . elasticsearch . cluster . routing . allocation . decider ; import org . elasticsearch . cluster . routing . RoutingNode ; import org . elasticsearch . cluster . routing . ShardRouting ; import org . elasticsearch . cluster . routing . allocation . RoutingAllocation ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; public class ReplicaAfterPrimaryActiveAllocationDecider extends AllocationDecider { private static final String NAME = <str> ; @Inject public ReplicaAfterPrimaryActiveAllocationDecider ( Settings settings ) { super ( settings ) ; } @Override public Decision canAllocate ( ShardRouting shardRouting , RoutingNode node , RoutingAllocation allocation ) { return canAllocate ( shardRouting , allocation ) ; } @Override public Decision canAllocate ( ShardRouting shardRouting , RoutingAllocation allocation ) { if ( shardRouting . primary ( ) ) { return allocation . decision ( Decision . YES , NAME , <str> ) ; } ShardRouting primary = allocation . routingNodes ( ) . activePrimary ( shardRouting ) ; if ( primary = = null ) { return allocation . decision ( Decision . NO , NAME , <str> ) ; } return allocation . decision ( Decision . YES , NAME , <str> ) ; } } 

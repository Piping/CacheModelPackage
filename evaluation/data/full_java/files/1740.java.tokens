package org . apache . cassandra . stress . settings ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import com . google . common . collect . ImmutableList ; public enum Command { READ ( false , <str> , <str> , CommandCategory . BASIC ) , WRITE ( true , <str> , <str> , <str> , CommandCategory . BASIC ) , MIXED ( true , null , <str> , CommandCategory . MIXED ) , COUNTER_WRITE ( true , <str> , <str> , <str> , CommandCategory . BASIC ) , COUNTER_READ ( false , <str> , <str> , <str> , CommandCategory . BASIC ) , USER ( true , null , <str> , CommandCategory . USER ) , HELP ( false , null , <str> , <str> , null ) , PRINT ( false , null , <str> , null ) , LEGACY ( false , null , <str> , null ) ; private static final Map < String , Command > LOOKUP ; static { final Map < String , Command > lookup = new HashMap < > ( ) ; for ( Command cmd : values ( ) ) { for ( String name : cmd . names ) lookup . put ( name , cmd ) ; } LOOKUP = lookup ; } public static Command get ( String command ) { return LOOKUP . get ( command . toLowerCase ( ) ) ; } public final boolean updates ; public final CommandCategory category ; public final List < String > names ; public final String description ; public final String table ; Command ( boolean updates , String table , String description , CommandCategory category ) { this ( updates , table , null , description , category ) ; } Command ( boolean updates , String table , String extra , String description , CommandCategory category ) { this . table = table ; this . updates = updates ; this . category = category ; List < String > names = new ArrayList < > ( ) ; names . add ( this . toString ( ) . toLowerCase ( ) ) ; names . add ( this . toString ( ) . replaceAll ( <str> , <str> ) . toLowerCase ( ) ) ; if ( extra ! = null ) { names . add ( extra . toLowerCase ( ) ) ; names . add ( extra . replaceAll ( <str> , <str> ) . toLowerCase ( ) ) ; } this . names = ImmutableList . copyOf ( names ) ; this . description = description ; } public void printHelp ( ) { helpPrinter ( ) . run ( ) ; } public final Runnable helpPrinter ( ) { switch ( this ) { case PRINT : return SettingsMisc . printHelpPrinter ( ) ; case HELP : return SettingsMisc . helpHelpPrinter ( ) ; case LEGACY : return Legacy . helpPrinter ( ) ; } switch ( category ) { case USER : return SettingsCommandUser . helpPrinter ( ) ; case BASIC : return SettingsCommandPreDefined . helpPrinter ( this ) ; case MIXED : return SettingsCommandPreDefinedMixed . helpPrinter ( ) ; } throw new AssertionError ( ) ; } } 

package org . elasticsearch . search . aggregations . bucket . terms ; import org . elasticsearch . search . aggregations . Aggregator ; import org . elasticsearch . search . aggregations . AggregatorFactories ; import org . elasticsearch . search . aggregations . InternalAggregation ; import org . elasticsearch . search . aggregations . pipeline . PipelineAggregator ; import org . elasticsearch . search . aggregations . support . AggregationContext ; import java . io . IOException ; import java . util . Collections ; import java . util . List ; import java . util . Map ; abstract class AbstractStringTermsAggregator extends TermsAggregator { protected final boolean showTermDocCountError ; public AbstractStringTermsAggregator ( String name , AggregatorFactories factories , AggregationContext context , Aggregator parent , Terms . Order order , BucketCountThresholds bucketCountThresholds , SubAggCollectionMode subAggCollectMode , boolean showTermDocCountError , List < PipelineAggregator > pipelineAggregators , Map < String , Object > metaData ) throws IOException { super ( name , factories , context , parent , bucketCountThresholds , order , subAggCollectMode , pipelineAggregators , metaData ) ; this . showTermDocCountError = showTermDocCountError ; } @Override public InternalAggregation buildEmptyAggregation ( ) { return new StringTerms ( name , order , bucketCountThresholds . getRequiredSize ( ) , bucketCountThresholds . getShardSize ( ) , bucketCountThresholds . getMinDocCount ( ) , Collections . < InternalTerms . Bucket > emptyList ( ) , showTermDocCountError , <int> , <int> , pipelineAggregators ( ) , metaData ( ) ) ; } } 

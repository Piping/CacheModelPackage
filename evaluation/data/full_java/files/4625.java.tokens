package org . eclipse . debug . internal . ui . views . memory . renderings ; import java . math . BigInteger ; import org . eclipse . core . runtime . PlatformObject ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . core . model . IMemoryBlockExtension ; import org . eclipse . debug . internal . ui . memory . provisional . AbstractAsyncTableRendering ; import org . eclipse . debug . ui . memory . AbstractTableRendering ; import org . eclipse . debug . ui . memory . IMemoryRendering ; public class TableRenderingContentInput extends PlatformObject { private IMemoryRendering fRendering ; private int fPreBuffer ; private int fPostBuffer ; private BigInteger fLoadAddress ; private int fNumLines ; private boolean fUpdateDelta ; private BigInteger fMemoryBlockBaseAddress ; private BigInteger fStartAddress ; private BigInteger fEndAddress ; public TableRenderingContentInput ( IMemoryRendering rendering , int preBuffer , int postBuffer , BigInteger loadAddress , int numOfLines , boolean updateDelta , BigInteger contentBaseAddress ) { fRendering = rendering ; fPreBuffer = preBuffer ; fPostBuffer = postBuffer ; fLoadAddress = loadAddress ; fNumLines = numOfLines ; fUpdateDelta = updateDelta ; if ( contentBaseAddress = = null ) { try { updateContentBaseAddress ( ) ; } catch ( DebugException e ) { } } else { fMemoryBlockBaseAddress = contentBaseAddress ; } } public int getPostBuffer ( ) { return fPostBuffer ; } public int getPreBuffer ( ) { return fPreBuffer ; } public BigInteger getLoadAddress ( ) { return fLoadAddress ; } public IMemoryBlock getMemoryBlock ( ) { return fRendering . getMemoryBlock ( ) ; } public void setPostBuffer ( int postBuffer ) { fPostBuffer = postBuffer ; } public void setPreBuffer ( int preBuffer ) { fPreBuffer = preBuffer ; } public boolean isUpdateDelta ( ) { return fUpdateDelta ; } public void setUpdateDelta ( boolean updateDelta ) { fUpdateDelta = updateDelta ; } public void setLoadAddress ( BigInteger address ) { fLoadAddress = address ; } public BigInteger getContentBaseAddress ( ) { if ( fMemoryBlockBaseAddress = = null ) { try { updateContentBaseAddress ( ) ; } catch ( DebugException e ) { fMemoryBlockBaseAddress = new BigInteger ( <str> ) ; } } return fMemoryBlockBaseAddress ; } public void updateContentBaseAddress ( ) throws DebugException { IMemoryBlock memoryBlock = fRendering . getMemoryBlock ( ) ; if ( memoryBlock instanceof IMemoryBlockExtension ) { fMemoryBlockBaseAddress = ( ( IMemoryBlockExtension ) memoryBlock ) . getBigBaseAddress ( ) ; } else { fMemoryBlockBaseAddress = BigInteger . valueOf ( memoryBlock . getStartAddress ( ) ) ; } } public BigInteger getStartAddress ( ) { if ( fStartAddress = = null ) { try { IMemoryBlock memoryBlock = fRendering . getMemoryBlock ( ) ; if ( memoryBlock instanceof IMemoryBlockExtension ) { BigInteger startAddress = ( ( IMemoryBlockExtension ) memoryBlock ) . getMemoryBlockStartAddress ( ) ; if ( startAddress ! = null ) { fStartAddress = startAddress ; } } } catch ( DebugException e ) { fStartAddress = BigInteger . valueOf ( <int> ) ; } if ( fStartAddress = = null ) { fStartAddress = BigInteger . valueOf ( <int> ) ; } } return fStartAddress ; } public BigInteger getEndAddress ( ) { if ( fEndAddress = = null ) { IMemoryBlock memoryBlock = fRendering . getMemoryBlock ( ) ; if ( memoryBlock instanceof IMemoryBlockExtension ) { BigInteger endAddress ; try { endAddress = ( ( IMemoryBlockExtension ) memoryBlock ) . getMemoryBlockEndAddress ( ) ; if ( endAddress ! = null ) { fEndAddress = endAddress ; } } catch ( DebugException e ) { fEndAddress = null ; } if ( fEndAddress = = null ) { int addressSize ; try { addressSize = ( ( IMemoryBlockExtension ) memoryBlock ) . getAddressSize ( ) ; } catch ( DebugException e ) { addressSize = <int> ; } endAddress = BigInteger . valueOf ( <int> ) ; endAddress = endAddress . pow ( addressSize * <int> ) ; endAddress = endAddress . subtract ( BigInteger . valueOf ( <int> ) ) ; fEndAddress = endAddress ; } } if ( fEndAddress = = null ) { fEndAddress = BigInteger . valueOf ( Integer . MAX_VALUE ) ; } } return fEndAddress ; } public int getNumLines ( ) { return fNumLines ; } public void setNumLines ( int numLines ) { fNumLines = numLines ; } @SuppressWarnings ( <str> ) @Override public < T > T getAdapter ( Class < T > adapter ) { if ( adapter = = AbstractTableRendering . class ) { if ( fRendering instanceof AbstractTableRendering ) { return ( T ) fRendering ; } } if ( adapter = = AbstractAsyncTableRendering . class ) { if ( fRendering instanceof AbstractAsyncTableRendering ) { return ( T ) fRendering ; } } return super . getAdapter ( adapter ) ; } } 

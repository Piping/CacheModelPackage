package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . annotations . GwtIncompatible ; import com . google . common . collect . testing . Helpers ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; import java . lang . reflect . Method ; import java . util . Collection ; @GwtCompatible ( emulated = true ) public class SetHashCodeTester < E > extends AbstractSetTester < E > { public void testHashCode ( ) { int expectedHashCode = <int> ; for ( E element : getSampleElements ( ) ) { expectedHashCode + = ( ( element = = null ) ? <int> : element . hashCode ( ) ) ; } assertEquals ( <str> , expectedHashCode , getSet ( ) . hashCode ( ) ) ; } @CollectionSize.Require ( absent = CollectionSize . ZERO ) @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) public void testHashCode_containingNull ( ) { Collection < E > elements = getSampleElements ( getNumElements ( ) - <int> ) ; int expectedHashCode = <int> ; for ( E element : elements ) { expectedHashCode + = ( ( element = = null ) ? <int> : element . hashCode ( ) ) ; } elements . add ( null ) ; collection = getSubjectGenerator ( ) . create ( elements . toArray ( ) ) ; assertEquals ( <str> + <str> , expectedHashCode , getSet ( ) . hashCode ( ) ) ; } @GwtIncompatible ( <str> ) public static Method [ ] getHashCodeMethods ( ) { return new Method [ ] { Helpers . getMethod ( SetHashCodeTester . class , <str> ) , Helpers . getMethod ( SetHashCodeTester . class , <str> ) } ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . search . Query ; import org . apache . lucene . queries . BoostingQuery ; import org . elasticsearch . common . io . stream . StreamInput ; import org . elasticsearch . common . io . stream . StreamOutput ; import org . elasticsearch . common . xcontent . XContentBuilder ; import java . io . IOException ; import java . util . Objects ; public class BoostingQueryBuilder extends AbstractQueryBuilder < BoostingQueryBuilder > { public static final String NAME = <str> ; private final QueryBuilder positiveQuery ; private final QueryBuilder negativeQuery ; private float negativeBoost = - <int> ; static final BoostingQueryBuilder PROTOTYPE = new BoostingQueryBuilder ( EmptyQueryBuilder . PROTOTYPE , EmptyQueryBuilder . PROTOTYPE ) ; public BoostingQueryBuilder ( QueryBuilder positiveQuery , QueryBuilder negativeQuery ) { if ( positiveQuery = = null ) { throw new IllegalArgumentException ( <str> ) ; } if ( negativeQuery = = null ) { throw new IllegalArgumentException ( <str> ) ; } this . positiveQuery = positiveQuery ; this . negativeQuery = negativeQuery ; } public QueryBuilder positiveQuery ( ) { return this . positiveQuery ; } public QueryBuilder negativeQuery ( ) { return this . negativeQuery ; } public BoostingQueryBuilder negativeBoost ( float negativeBoost ) { if ( negativeBoost < <int> ) { throw new IllegalArgumentException ( <str> ) ; } this . negativeBoost = negativeBoost ; return this ; } public float negativeBoost ( ) { return this . negativeBoost ; } @Override protected void doXContent ( XContentBuilder builder , Params params ) throws IOException { builder . startObject ( NAME ) ; builder . field ( BoostingQueryParser . POSITIVE_FIELD . getPreferredName ( ) ) ; positiveQuery . toXContent ( builder , params ) ; builder . field ( BoostingQueryParser . NEGATIVE_FIELD . getPreferredName ( ) ) ; negativeQuery . toXContent ( builder , params ) ; builder . field ( BoostingQueryParser . NEGATIVE_BOOST_FIELD . getPreferredName ( ) , negativeBoost ) ; printBoostAndQueryName ( builder ) ; builder . endObject ( ) ; } @Override public String getWriteableName ( ) { return NAME ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { Query positive = positiveQuery . toQuery ( context ) ; Query negative = negativeQuery . toQuery ( context ) ; if ( positive = = null | | negative = = null ) { return null ; } return new BoostingQuery ( positive , negative , negativeBoost ) ; } @Override protected int doHashCode ( ) { return Objects . hash ( negativeBoost , positiveQuery , negativeQuery ) ; } @Override protected boolean doEquals ( BoostingQueryBuilder other ) { return Objects . equals ( negativeBoost , other . negativeBoost ) & & Objects . equals ( positiveQuery , other . positiveQuery ) & & Objects . equals ( negativeQuery , other . negativeQuery ) ; } @Override protected BoostingQueryBuilder doReadFrom ( StreamInput in ) throws IOException { QueryBuilder positiveQuery = in . readQuery ( ) ; QueryBuilder negativeQuery = in . readQuery ( ) ; BoostingQueryBuilder boostingQuery = new BoostingQueryBuilder ( positiveQuery , negativeQuery ) ; boostingQuery . negativeBoost = in . readFloat ( ) ; return boostingQuery ; } @Override protected void doWriteTo ( StreamOutput out ) throws IOException { out . writeQuery ( positiveQuery ) ; out . writeQuery ( negativeQuery ) ; out . writeFloat ( negativeBoost ) ; } } 

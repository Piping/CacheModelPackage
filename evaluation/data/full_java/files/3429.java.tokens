package org . nd4j . linalg . api . indexing ; import org . junit . Test ; import org . nd4j . linalg . BaseNd4jTest ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . nd4j . linalg . indexing . * ; import static org . junit . Assert . * ; public class IndexingIterationTests extends BaseNd4jTest { public IndexingIterationTests ( String name , Nd4jBackend backend ) { super ( name , backend ) ; } public IndexingIterationTests ( Nd4jBackend backend ) { super ( backend ) ; } public IndexingIterationTests ( ) { } public IndexingIterationTests ( String name ) { super ( name ) ; } @Test public void testAll ( ) { INDArrayIndex all = NDArrayIndex . all ( ) ; INDArray init = Nd4j . create ( <int> , <int> ) ; all . init ( init , <int> ) ; assertTrue ( all . hasNext ( ) ) ; assertEquals ( <int> , all . current ( ) ) ; assertEquals ( <int> , all . next ( ) ) ; assertEquals ( <int> , all . length ( ) ) ; assertEquals ( <int> , all . next ( ) ) ; assertFalse ( all . hasNext ( ) ) ; } @Test public void testInterval ( ) { INDArrayIndex interval = NDArrayIndex . interval ( <int> , <int> ) ; assertTrue ( interval . hasNext ( ) ) ; assertEquals ( <int> , interval . length ( ) ) ; assertEquals ( <int> , interval . next ( ) ) ; assertEquals ( <int> , interval . next ( ) ) ; assertFalse ( interval . hasNext ( ) ) ; } @Test public void testIntervalInclusive ( ) { INDArrayIndex interval = NDArrayIndex . interval ( <int> , <int> , <int> , true ) ; assertTrue ( interval . hasNext ( ) ) ; assertEquals ( <int> , interval . end ( ) ) ; assertEquals ( <int> , interval . length ( ) ) ; assertEquals ( <int> , interval . next ( ) ) ; assertEquals ( <int> , interval . next ( ) ) ; assertTrue ( interval . hasNext ( ) ) ; assertEquals ( <int> , interval . next ( ) ) ; assertFalse ( interval . hasNext ( ) ) ; } @Test public void testIntervalWithStride ( ) { INDArrayIndex interval = NDArrayIndex . interval ( <int> , <int> , <int> ) ; assertTrue ( interval . hasNext ( ) ) ; assertEquals ( <int> , interval . length ( ) ) ; assertEquals ( <int> , interval . next ( ) ) ; assertTrue ( interval . hasNext ( ) ) ; assertEquals ( <int> , interval . next ( ) ) ; assertFalse ( interval . hasNext ( ) ) ; } @Test public void testNewAxis ( ) { INDArrayIndex newAxis = NDArrayIndex . newAxis ( ) ; assertEquals ( <int> , newAxis . length ( ) ) ; assertFalse ( newAxis . hasNext ( ) ) ; } @Test public void testIntervalStrideGreaterThan1 ( ) { INDArrayIndex interval = NDArrayIndex . interval ( <int> , <int> , <int> ) ; assertTrue ( interval . hasNext ( ) ) ; assertEquals ( <int> , interval . length ( ) ) ; assertEquals ( <int> , interval . next ( ) ) ; assertFalse ( interval . hasNext ( ) ) ; } @Test public void testPoint ( ) { INDArrayIndex point = new PointIndex ( <int> ) ; assertTrue ( point . hasNext ( ) ) ; assertEquals ( <int> , point . length ( ) ) ; assertEquals ( <int> , point . next ( ) ) ; assertFalse ( point . hasNext ( ) ) ; } @Test public void testEmpty ( ) { INDArrayIndex empty = new NDArrayIndexEmpty ( ) ; assertFalse ( empty . hasNext ( ) ) ; assertEquals ( <int> , empty . length ( ) ) ; } @Test public void testSpecifiedIndex ( ) { INDArrayIndex indArrayIndex = new SpecifiedIndex ( <int> ) ; assertEquals ( <int> , indArrayIndex . length ( ) ) ; assertTrue ( indArrayIndex . hasNext ( ) ) ; assertEquals ( <int> , indArrayIndex . next ( ) ) ; assertEquals ( <int> , indArrayIndex . current ( ) ) ; assertEquals ( <int> , indArrayIndex . end ( ) ) ; assertEquals ( indArrayIndex . offset ( ) , indArrayIndex . end ( ) ) ; } @Override public char ordering ( ) { return <str> ; } } 

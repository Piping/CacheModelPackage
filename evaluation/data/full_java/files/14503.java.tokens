package org . gradle . internal . nativeintegration ; import org . gradle . internal . os . OperatingSystem ; import java . lang . reflect . Field ; import java . util . Map ; public class ReflectiveEnvironment { public void unsetenv ( String name ) { Map < String , String > map = getEnv ( ) ; map . remove ( name ) ; if ( OperatingSystem . current ( ) . isWindows ( ) ) { Map < String , String > env2 = getWindowsEnv ( ) ; env2 . remove ( name ) ; } } public void setenv ( String name , String value ) { Map < String , String > map = getEnv ( ) ; map . put ( name , value ) ; if ( OperatingSystem . current ( ) . isWindows ( ) ) { Map < String , String > env2 = getWindowsEnv ( ) ; env2 . put ( name , value ) ; } } private Map < String , String > getWindowsEnv ( ) { try { Class < ? > sc = Class . forName ( <str> ) ; Field caseinsensitive = sc . getDeclaredField ( <str> ) ; caseinsensitive . setAccessible ( true ) ; @SuppressWarnings ( <str> ) Map < String , String > result = ( Map < String , String > ) caseinsensitive . get ( null ) ; return result ; } catch ( Exception e ) { throw new NativeIntegrationException ( <str> , e ) ; } } private Map < String , String > getEnv ( ) { try { Map < String , String > theUnmodifiableEnvironment = System . getenv ( ) ; Class < ? > cu = theUnmodifiableEnvironment . getClass ( ) ; Field m = cu . getDeclaredField ( <str> ) ; m . setAccessible ( true ) ; @SuppressWarnings ( <str> ) Map < String , String > result = ( Map < String , String > ) m . get ( theUnmodifiableEnvironment ) ; return result ; } catch ( Exception e ) { throw new NativeIntegrationException ( <str> , e ) ; } } } 

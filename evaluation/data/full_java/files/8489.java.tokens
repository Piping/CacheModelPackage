package org . elasticsearch . search . aggregations . support ; import org . elasticsearch . search . aggregations . AggregationExecutionException ; import org . elasticsearch . test . ESTestCase ; import java . util . ArrayList ; import java . util . List ; import static org . hamcrest . Matchers . equalTo ; public class PathTests extends ESTestCase { public void testInvalidPaths ( ) throws Exception { assertInvalidPath ( <str> , <str> ) ; assertInvalidPath ( <str> , <str> ) ; assertInvalidPath ( <str> , <str> ) ; assertInvalidPath ( <str> , <str> ) ; assertInvalidPath ( <str> , <str> ) ; assertInvalidPath ( <str> , <str> ) ; assertInvalidPath ( <str> , <str> ) ; } public void testValidPaths ( ) throws Exception { assertValidPath ( <str> , tokens ( ) . add ( <str> ) . add ( <str> ) ) ; assertValidPath ( <str> , tokens ( ) . add ( <str> , <str> ) ) ; assertValidPath ( <str> , tokens ( ) . add ( <str> , <str> ) ) ; assertValidPath ( <str> , tokens ( ) . add ( <str> , <str> ) . add ( <str> ) ) ; assertValidPath ( <str> , tokens ( ) . add ( <str> , <str> ) . add ( <str> , <str> ) ) ; assertValidPath ( <str> , tokens ( ) . add ( <str> , <str> ) . add ( <str> , <str> ) ) ; assertValidPath ( <str> , tokens ( ) . add ( <str> ) . add ( <str> , <str> ) ) ; assertValidPath ( <str> , tokens ( ) . add ( <str> ) . add ( <str> , <str> ) ) ; } private void assertInvalidPath ( String path , String reason ) { try { AggregationPath . parse ( path ) ; fail ( <str> + path + <str> + reason ) ; } catch ( AggregationExecutionException aee ) { } } private void assertValidPath ( String path , Tokens tokenz ) { AggregationPath . PathElement [ ] tokens = tokenz . toArray ( ) ; AggregationPath p = AggregationPath . parse ( path ) ; assertThat ( p . getPathElements ( ) . size ( ) , equalTo ( tokens . length ) ) ; for ( int i = <int> ; i < p . getPathElements ( ) . size ( ) ; i + + ) { AggregationPath . PathElement t1 = p . getPathElements ( ) . get ( i ) ; AggregationPath . PathElement t2 = tokens [ i ] ; assertThat ( t1 , equalTo ( t2 ) ) ; } } private static Tokens tokens ( ) { return new Tokens ( ) ; } private static class Tokens { private List < AggregationPath . PathElement > tokens = new ArrayList < > ( ) ; Tokens add ( String name ) { tokens . add ( new AggregationPath . PathElement ( name , name , null ) ) ; return this ; } Tokens add ( String name , String key ) { if ( Math . random ( ) > <float> ) { tokens . add ( new AggregationPath . PathElement ( name + <str> + key , name , key ) ) ; } else { tokens . add ( new AggregationPath . PathElement ( name + <str> + key + <str> , name , key ) ) ; } return this ; } AggregationPath . PathElement [ ] toArray ( ) { return tokens . toArray ( new AggregationPath . PathElement [ tokens . size ( ) ] ) ; } } } 

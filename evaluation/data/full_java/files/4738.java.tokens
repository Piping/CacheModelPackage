package org . eclipse . debug . ui . console ; import org . eclipse . debug . core . model . IProcess ; import org . eclipse . debug . core . model . IStreamsProxy ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . internal . ui . preferences . IDebugPreferenceConstants ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . swt . graphics . Color ; public class ConsoleColorProvider implements IConsoleColorProvider { private IProcess fProcess ; private IConsole fConsole ; @Override public void connect ( IProcess process , IConsole console ) { fProcess = process ; fConsole = console ; IStreamsProxy streamsProxy = fProcess . getStreamsProxy ( ) ; if ( streamsProxy ! = null ) { fConsole . connect ( streamsProxy ) ; } } @Override public void disconnect ( ) { fConsole = null ; fProcess = null ; } @Override public boolean isReadOnly ( ) { return fProcess = = null | | fProcess . isTerminated ( ) ; } @Override public Color getColor ( String streamIdentifer ) { if ( IDebugUIConstants . ID_STANDARD_OUTPUT_STREAM . equals ( streamIdentifer ) ) { return DebugUIPlugin . getPreferenceColor ( IDebugPreferenceConstants . CONSOLE_SYS_OUT_COLOR ) ; } if ( IDebugUIConstants . ID_STANDARD_ERROR_STREAM . equals ( streamIdentifer ) ) { return DebugUIPlugin . getPreferenceColor ( IDebugPreferenceConstants . CONSOLE_SYS_ERR_COLOR ) ; } if ( IDebugUIConstants . ID_STANDARD_INPUT_STREAM . equals ( streamIdentifer ) ) { return DebugUIPlugin . getPreferenceColor ( IDebugPreferenceConstants . CONSOLE_SYS_IN_COLOR ) ; } return null ; } protected IProcess getProcess ( ) { return fProcess ; } protected IConsole getConsole ( ) { return fConsole ; } } 

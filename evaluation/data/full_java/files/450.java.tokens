package org . apache . cassandra . db . marshal ; import java . nio . ByteBuffer ; import java . util . * ; import org . apache . cassandra . cql3 . Json ; import org . apache . cassandra . cql3 . Maps ; import org . apache . cassandra . cql3 . Term ; import org . apache . cassandra . db . rows . Cell ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . exceptions . SyntaxException ; import org . apache . cassandra . serializers . CollectionSerializer ; import org . apache . cassandra . serializers . MarshalException ; import org . apache . cassandra . serializers . MapSerializer ; import org . apache . cassandra . transport . Server ; import org . apache . cassandra . utils . Pair ; public class MapType < K , V > extends CollectionType < Map < K , V > > { private static final Map < Pair < AbstractType < ? > , AbstractType < ? > > , MapType > instances = new HashMap < > ( ) ; private static final Map < Pair < AbstractType < ? > , AbstractType < ? > > , MapType > frozenInstances = new HashMap < > ( ) ; private final AbstractType < K > keys ; private final AbstractType < V > values ; private final MapSerializer < K , V > serializer ; private final boolean isMultiCell ; public static MapType < ? , ? > getInstance ( TypeParser parser ) throws ConfigurationException , SyntaxException { List < AbstractType < ? > > l = parser . getTypeParameters ( ) ; if ( l . size ( ) ! = <int> ) throw new ConfigurationException ( <str> ) ; return getInstance ( l . get ( <int> ) , l . get ( <int> ) , true ) ; } public static synchronized < K , V > MapType < K , V > getInstance ( AbstractType < K > keys , AbstractType < V > values , boolean isMultiCell ) { Map < Pair < AbstractType < ? > , AbstractType < ? > > , MapType > internMap = isMultiCell ? instances : frozenInstances ; Pair < AbstractType < ? > , AbstractType < ? > > p = Pair . < AbstractType < ? > , AbstractType < ? > > create ( keys , values ) ; MapType < K , V > t = internMap . get ( p ) ; if ( t = = null ) { t = new MapType < > ( keys , values , isMultiCell ) ; internMap . put ( p , t ) ; } return t ; } private MapType ( AbstractType < K > keys , AbstractType < V > values , boolean isMultiCell ) { super ( ComparisonType . CUSTOM , Kind . MAP ) ; this . keys = keys ; this . values = values ; this . serializer = MapSerializer . getInstance ( keys . getSerializer ( ) , values . getSerializer ( ) , keys ) ; this . isMultiCell = isMultiCell ; } @Override public boolean references ( AbstractType < ? > check ) { return super . references ( check ) | | keys . references ( check ) | | values . references ( check ) ; } public AbstractType < K > getKeysType ( ) { return keys ; } public AbstractType < V > getValuesType ( ) { return values ; } public AbstractType < K > nameComparator ( ) { return keys ; } public AbstractType < V > valueComparator ( ) { return values ; } @Override public boolean isMultiCell ( ) { return isMultiCell ; } @Override public AbstractType < ? > freeze ( ) { if ( isMultiCell ) return getInstance ( this . keys , this . values , false ) ; else return this ; } @Override public boolean isCompatibleWithFrozen ( CollectionType < ? > previous ) { assert ! isMultiCell ; MapType tprev = ( MapType ) previous ; return keys . isCompatibleWith ( tprev . keys ) & & values . isCompatibleWith ( tprev . values ) ; } @Override public boolean isValueCompatibleWithFrozen ( CollectionType < ? > previous ) { assert ! isMultiCell ; MapType tprev = ( MapType ) previous ; return keys . isCompatibleWith ( tprev . keys ) & & values . isValueCompatibleWith ( tprev . values ) ; } @Override public int compareCustom ( ByteBuffer o1 , ByteBuffer o2 ) { return compareMaps ( keys , values , o1 , o2 ) ; } public static int compareMaps ( AbstractType < ? > keysComparator , AbstractType < ? > valuesComparator , ByteBuffer o1 , ByteBuffer o2 ) { if ( ! o1 . hasRemaining ( ) | | ! o2 . hasRemaining ( ) ) return o1 . hasRemaining ( ) ? <int> : o2 . hasRemaining ( ) ? - <int> : <int> ; ByteBuffer bb1 = o1 . duplicate ( ) ; ByteBuffer bb2 = o2 . duplicate ( ) ; int protocolVersion = Server . VERSION_3 ; int size1 = CollectionSerializer . readCollectionSize ( bb1 , protocolVersion ) ; int size2 = CollectionSerializer . readCollectionSize ( bb2 , protocolVersion ) ; for ( int i = <int> ; i < Math . min ( size1 , size2 ) ; i + + ) { ByteBuffer k1 = CollectionSerializer . readValue ( bb1 , protocolVersion ) ; ByteBuffer k2 = CollectionSerializer . readValue ( bb2 , protocolVersion ) ; int cmp = keysComparator . compare ( k1 , k2 ) ; if ( cmp ! = <int> ) return cmp ; ByteBuffer v1 = CollectionSerializer . readValue ( bb1 , protocolVersion ) ; ByteBuffer v2 = CollectionSerializer . readValue ( bb2 , protocolVersion ) ; cmp = valuesComparator . compare ( v1 , v2 ) ; if ( cmp ! = <int> ) return cmp ; } return size1 = = size2 ? <int> : ( size1 < size2 ? - <int> : <int> ) ; } @Override public MapSerializer < K , V > getSerializer ( ) { return serializer ; } @Override protected int collectionSize ( List < ByteBuffer > values ) { return values . size ( ) / <int> ; } public String toString ( boolean ignoreFreezing ) { boolean includeFrozenType = ! ignoreFreezing & & ! isMultiCell ( ) ; StringBuilder sb = new StringBuilder ( ) ; if ( includeFrozenType ) sb . append ( FrozenType . class . getName ( ) ) . append ( <str> ) ; sb . append ( getClass ( ) . getName ( ) ) . append ( TypeParser . stringifyTypeParameters ( Arrays . asList ( keys , values ) , ignoreFreezing | | ! isMultiCell ) ) ; if ( includeFrozenType ) sb . append ( <str> ) ; return sb . toString ( ) ; } public List < ByteBuffer > serializedValues ( Iterator < Cell > cells ) { assert isMultiCell ; List < ByteBuffer > bbs = new ArrayList < ByteBuffer > ( ) ; while ( cells . hasNext ( ) ) { Cell c = cells . next ( ) ; bbs . add ( c . path ( ) . get ( <int> ) ) ; bbs . add ( c . value ( ) ) ; } return bbs ; } @Override public Term fromJSONObject ( Object parsed ) throws MarshalException { if ( parsed instanceof String ) parsed = Json . decodeJson ( ( String ) parsed ) ; if ( ! ( parsed instanceof Map ) ) throw new MarshalException ( String . format ( <str> , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; Map < Object , Object > map = ( Map < Object , Object > ) parsed ; Map < Term , Term > terms = new HashMap < > ( map . size ( ) ) ; for ( Map . Entry < Object , Object > entry : map . entrySet ( ) ) { if ( entry . getKey ( ) = = null ) throw new MarshalException ( <str> ) ; if ( entry . getValue ( ) = = null ) throw new MarshalException ( <str> ) ; terms . put ( keys . fromJSONObject ( entry . getKey ( ) ) , values . fromJSONObject ( entry . getValue ( ) ) ) ; } return new Maps . DelayedValue ( keys , terms ) ; } @Override public String toJSONString ( ByteBuffer buffer , int protocolVersion ) { StringBuilder sb = new StringBuilder ( <str> ) ; int size = CollectionSerializer . readCollectionSize ( buffer , protocolVersion ) ; for ( int i = <int> ; i < size ; i + + ) { if ( i > <int> ) sb . append ( <str> ) ; String key = keys . toJSONString ( CollectionSerializer . readValue ( buffer , protocolVersion ) , protocolVersion ) ; if ( key . startsWith ( <str> ) ) sb . append ( key ) ; else sb . append ( <str> ) . append ( Json . JSON_STRING_ENCODER . quoteAsString ( key ) ) . append ( <str> ) ; sb . append ( <str> ) ; sb . append ( values . toJSONString ( CollectionSerializer . readValue ( buffer , protocolVersion ) , protocolVersion ) ) ; } return sb . append ( <str> ) . toString ( ) ; } } 

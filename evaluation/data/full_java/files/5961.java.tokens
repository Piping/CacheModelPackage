package org . elasticsearch . common . logging . log4j ; import org . apache . log4j . Layout ; import org . apache . log4j . WriterAppender ; import org . apache . log4j . helpers . LogLog ; import org . elasticsearch . common . SuppressForbidden ; import org . elasticsearch . common . logging . Loggers ; import java . io . IOException ; import java . io . OutputStream ; public class ConsoleAppender extends WriterAppender { public static final String SYSTEM_OUT = <str> ; public static final String SYSTEM_ERR = <str> ; protected String target = SYSTEM_OUT ; private boolean follow = true ; public ConsoleAppender ( ) { } public ConsoleAppender ( Layout layout ) { this ( layout , SYSTEM_OUT ) ; } public ConsoleAppender ( Layout layout , String target ) { setLayout ( layout ) ; setTarget ( target ) ; activateOptions ( ) ; } public void setTarget ( String value ) { String v = value . trim ( ) ; if ( SYSTEM_OUT . equalsIgnoreCase ( v ) ) { target = SYSTEM_OUT ; } else if ( SYSTEM_ERR . equalsIgnoreCase ( v ) ) { target = SYSTEM_ERR ; } else { targetWarn ( value ) ; } } public String getTarget ( ) { return target ; } public final void setFollow ( final boolean newValue ) { follow = newValue ; } public final boolean getFollow ( ) { return follow ; } void targetWarn ( String val ) { LogLog . warn ( <str> + val + <str> ) ; LogLog . warn ( <str> ) ; } @Override @SuppressForbidden ( reason = <str> ) public void activateOptions ( ) { if ( follow ) { if ( target . equals ( SYSTEM_ERR ) ) { setWriter ( createWriter ( new SystemErrStream ( ) ) ) ; } else { setWriter ( createWriter ( new SystemOutStream ( ) ) ) ; } } else { if ( target . equals ( SYSTEM_ERR ) ) { setWriter ( createWriter ( System . err ) ) ; } else { setWriter ( createWriter ( System . out ) ) ; } } super . activateOptions ( ) ; } @Override protected final void closeWriter ( ) { if ( follow ) { super . closeWriter ( ) ; } } @SuppressForbidden ( reason = <str> ) private static class SystemErrStream extends OutputStream { public SystemErrStream ( ) { } @Override public void close ( ) { } @Override public void flush ( ) { System . err . flush ( ) ; } @Override public void write ( final byte [ ] b ) throws IOException { if ( ! Loggers . consoleLoggingEnabled ( ) ) { return ; } System . err . write ( b ) ; } @Override public void write ( final byte [ ] b , final int off , final int len ) throws IOException { if ( ! Loggers . consoleLoggingEnabled ( ) ) { return ; } System . err . write ( b , off , len ) ; } @Override public void write ( final int b ) throws IOException { if ( ! Loggers . consoleLoggingEnabled ( ) ) { return ; } System . err . write ( b ) ; } } @SuppressForbidden ( reason = <str> ) private static class SystemOutStream extends OutputStream { public SystemOutStream ( ) { } @Override public void close ( ) { } @Override public void flush ( ) { System . out . flush ( ) ; } @Override public void write ( final byte [ ] b ) throws IOException { if ( ! Loggers . consoleLoggingEnabled ( ) ) { return ; } System . out . write ( b ) ; } @Override public void write ( final byte [ ] b , final int off , final int len ) throws IOException { if ( ! Loggers . consoleLoggingEnabled ( ) ) { return ; } System . out . write ( b , off , len ) ; } @Override public void write ( final int b ) throws IOException { if ( ! Loggers . consoleLoggingEnabled ( ) ) { return ; } System . out . write ( b ) ; } } } 

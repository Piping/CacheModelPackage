package org . nd4j . linalg . util ; import lombok . AllArgsConstructor ; import lombok . Data ; import org . nd4j . linalg . api . blas . Level1 ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . shape . Shape ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . indexing . INDArrayIndex ; import org . nd4j . linalg . indexing . Indices ; import org . nd4j . linalg . ops . transforms . Transforms ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; public class NDArrayUtil { public static INDArray exp ( INDArray toExp ) { return expi ( toExp . dup ( ) ) ; } public static INDArray expi ( INDArray toExp ) { INDArray flattened = toExp . ravel ( ) ; for ( int i = <int> ; i < flattened . length ( ) ; i + + ) flattened . put ( i , Nd4j . scalar ( Math . exp ( ( double ) flattened . getScalar ( i ) . element ( ) ) ) ) ; return flattened . reshape ( toExp . shape ( ) ) ; } public static INDArray center ( INDArray arr , int [ ] shape ) { if ( arr . length ( ) < ArrayUtil . prod ( shape ) ) return arr ; for ( int i = <int> ; i < shape . length ; i + + ) if ( shape [ i ] < <int> ) shape [ i ] = <int> ; INDArray shapeMatrix = ArrayUtil . toNDArray ( shape ) ; INDArray currShape = ArrayUtil . toNDArray ( arr . shape ( ) ) ; INDArray startIndex = Transforms . floor ( currShape . sub ( shapeMatrix ) . divi ( Nd4j . scalar ( <int> ) ) ) ; INDArray endIndex = startIndex . add ( shapeMatrix ) ; INDArrayIndex [ ] indexes = Indices . createFromStartAndEnd ( startIndex , endIndex ) ; if ( shapeMatrix . length ( ) > <int> ) return arr . get ( indexes ) ; else { INDArray ret = Nd4j . create ( new int [ ] { ( int ) shapeMatrix . getDouble ( <int> ) } ) ; int start = ( int ) startIndex . getDouble ( <int> ) ; int end = ( int ) endIndex . getDouble ( <int> ) ; int count = <int> ; for ( int i = start ; i < end ; i + + ) { ret . putScalar ( count + + , arr . getDouble ( i ) ) ; } return ret ; } } } 

package org . elasticsearch . action ; import org . elasticsearch . cluster . node . DiscoveryNode ; import org . elasticsearch . common . component . AbstractComponent ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . transport . * ; public class TransportActionNodeProxy < Request extends ActionRequest , Response extends ActionResponse > extends AbstractComponent { private final TransportService transportService ; private final GenericAction < Request , Response > action ; private final TransportRequestOptions transportOptions ; @Inject public TransportActionNodeProxy ( Settings settings , GenericAction < Request , Response > action , TransportService transportService ) { super ( settings ) ; this . action = action ; this . transportService = transportService ; this . transportOptions = action . transportOptions ( settings ) ; } public void execute ( final DiscoveryNode node , final Request request , final ActionListener < Response > listener ) { ActionRequestValidationException validationException = request . validate ( ) ; if ( validationException ! = null ) { listener . onFailure ( validationException ) ; return ; } transportService . sendRequest ( node , action . name ( ) , request , transportOptions , new ActionListenerResponseHandler < Response > ( listener ) { @Override public Response newInstance ( ) { return action . newResponse ( ) ; } } ) ; } } 

package com . badlogic . gdx . graphics ; import java . nio . Buffer ; public interface GL30 extends GL20 { public final int GL_READ_BUFFER = <hex> ; public final int GL_UNPACK_ROW_LENGTH = <hex> ; public final int GL_UNPACK_SKIP_ROWS = <hex> ; public final int GL_UNPACK_SKIP_PIXELS = <hex> ; public final int GL_PACK_ROW_LENGTH = <hex> ; public final int GL_PACK_SKIP_ROWS = <hex> ; public final int GL_PACK_SKIP_PIXELS = <hex> ; public final int GL_COLOR = <hex> ; public final int GL_DEPTH = <hex> ; public final int GL_STENCIL = <hex> ; public final int GL_RED = <hex> ; public final int GL_RGB8 = <hex> ; public final int GL_RGBA8 = <hex> ; public final int GL_RGB10_A2 = <hex> ; public final int GL_TEXTURE_BINDING_3D = <hex> ; public final int GL_UNPACK_SKIP_IMAGES = <hex> ; public final int GL_UNPACK_IMAGE_HEIGHT = <hex> ; public final int GL_TEXTURE_3D = <hex> ; public final int GL_TEXTURE_WRAP_R = <hex> ; public final int GL_MAX_3D_TEXTURE_SIZE = <hex> ; public final int GL_UNSIGNED_INT_2_10_10_10_REV = <hex> ; public final int GL_MAX_ELEMENTS_VERTICES = <hex> ; public final int GL_MAX_ELEMENTS_INDICES = <hex> ; public final int GL_TEXTURE_MIN_LOD = <hex> ; public final int GL_TEXTURE_MAX_LOD = <hex> ; public final int GL_TEXTURE_BASE_LEVEL = <hex> ; public final int GL_TEXTURE_MAX_LEVEL = <hex> ; public final int GL_MIN = <hex> ; public final int GL_MAX = <hex> ; public final int GL_DEPTH_COMPONENT24 = <hex> ; public final int GL_MAX_TEXTURE_LOD_BIAS = <hex> ; public final int GL_TEXTURE_COMPARE_MODE = <hex> ; public final int GL_TEXTURE_COMPARE_FUNC = <hex> ; public final int GL_CURRENT_QUERY = <hex> ; public final int GL_QUERY_RESULT = <hex> ; public final int GL_QUERY_RESULT_AVAILABLE = <hex> ; public final int GL_BUFFER_MAPPED = <hex> ; public final int GL_BUFFER_MAP_POINTER = <hex> ; public final int GL_STREAM_READ = <hex> ; public final int GL_STREAM_COPY = <hex> ; public final int GL_STATIC_READ = <hex> ; public final int GL_STATIC_COPY = <hex> ; public final int GL_DYNAMIC_READ = <hex> ; public final int GL_DYNAMIC_COPY = <hex> ; public final int GL_MAX_DRAW_BUFFERS = <hex> ; public final int GL_DRAW_BUFFER0 = <hex> ; public final int GL_DRAW_BUFFER1 = <hex> ; public final int GL_DRAW_BUFFER2 = <hex> ; public final int GL_DRAW_BUFFER3 = <hex> ; public final int GL_DRAW_BUFFER4 = <hex> ; public final int GL_DRAW_BUFFER5 = <hex> ; public final int GL_DRAW_BUFFER6 = <hex> ; public final int GL_DRAW_BUFFER7 = <hex> ; public final int GL_DRAW_BUFFER8 = <hex> ; public final int GL_DRAW_BUFFER9 = <hex> ; public final int GL_DRAW_BUFFER10 = <hex> ; public final int GL_DRAW_BUFFER11 = <hex> ; public final int GL_DRAW_BUFFER12 = <hex> ; public final int GL_DRAW_BUFFER13 = <hex> ; public final int GL_DRAW_BUFFER14 = <hex> ; public final int GL_DRAW_BUFFER15 = <hex> ; public final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = <hex> ; public final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = <hex> ; public final int GL_SAMPLER_3D = <hex> ; public final int GL_SAMPLER_2D_SHADOW = <hex> ; public final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = <hex> ; public final int GL_PIXEL_PACK_BUFFER = <hex> ; public final int GL_PIXEL_UNPACK_BUFFER = <hex> ; public final int GL_PIXEL_PACK_BUFFER_BINDING = <hex> ; public final int GL_PIXEL_UNPACK_BUFFER_BINDING = <hex> ; public final int GL_FLOAT_MAT2x3 = <hex> ; public final int GL_FLOAT_MAT2x4 = <hex> ; public final int GL_FLOAT_MAT3x2 = <hex> ; public final int GL_FLOAT_MAT3x4 = <hex> ; public final int GL_FLOAT_MAT4x2 = <hex> ; public final int GL_FLOAT_MAT4x3 = <hex> ; public final int GL_SRGB = <hex> ; public final int GL_SRGB8 = <hex> ; public final int GL_SRGB8_ALPHA8 = <hex> ; public final int GL_COMPARE_REF_TO_TEXTURE = <hex> ; public final int GL_MAJOR_VERSION = <hex> ; public final int GL_MINOR_VERSION = <hex> ; public final int GL_NUM_EXTENSIONS = <hex> ; public final int GL_RGBA32F = <hex> ; public final int GL_RGB32F = <hex> ; public final int GL_RGBA16F = <hex> ; public final int GL_RGB16F = <hex> ; public final int GL_VERTEX_ATTRIB_ARRAY_INTEGER = <hex> ; public final int GL_MAX_ARRAY_TEXTURE_LAYERS = <hex> ; public final int GL_MIN_PROGRAM_TEXEL_OFFSET = <hex> ; public final int GL_MAX_PROGRAM_TEXEL_OFFSET = <hex> ; public final int GL_MAX_VARYING_COMPONENTS = <hex> ; public final int GL_TEXTURE_2D_ARRAY = <hex> ; public final int GL_TEXTURE_BINDING_2D_ARRAY = <hex> ; public final int GL_R11F_G11F_B10F = <hex> ; public final int GL_UNSIGNED_INT_10F_11F_11F_REV = <hex> ; public final int GL_RGB9_E5 = <hex> ; public final int GL_UNSIGNED_INT_5_9_9_9_REV = <hex> ; public final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = <hex> ; public final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = <hex> ; public final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = <hex> ; public final int GL_TRANSFORM_FEEDBACK_VARYINGS = <hex> ; public final int GL_TRANSFORM_FEEDBACK_BUFFER_START = <hex> ; public final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = <hex> ; public final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = <hex> ; public final int GL_RASTERIZER_DISCARD = <hex> ; public final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = <hex> ; public final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = <hex> ; public final int GL_INTERLEAVED_ATTRIBS = <hex> ; public final int GL_SEPARATE_ATTRIBS = <hex> ; public final int GL_TRANSFORM_FEEDBACK_BUFFER = <hex> ; public final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = <hex> ; public final int GL_RGBA32UI = <hex> ; public final int GL_RGB32UI = <hex> ; public final int GL_RGBA16UI = <hex> ; public final int GL_RGB16UI = <hex> ; public final int GL_RGBA8UI = <hex> ; public final int GL_RGB8UI = <hex> ; public final int GL_RGBA32I = <hex> ; public final int GL_RGB32I = <hex> ; public final int GL_RGBA16I = <hex> ; public final int GL_RGB16I = <hex> ; public final int GL_RGBA8I = <hex> ; public final int GL_RGB8I = <hex> ; public final int GL_RED_INTEGER = <hex> ; public final int GL_RGB_INTEGER = <hex> ; public final int GL_RGBA_INTEGER = <hex> ; public final int GL_SAMPLER_2D_ARRAY = <hex> ; public final int GL_SAMPLER_2D_ARRAY_SHADOW = <hex> ; public final int GL_SAMPLER_CUBE_SHADOW = <hex> ; public final int GL_UNSIGNED_INT_VEC2 = <hex> ; public final int GL_UNSIGNED_INT_VEC3 = <hex> ; public final int GL_UNSIGNED_INT_VEC4 = <hex> ; public final int GL_INT_SAMPLER_2D = <hex> ; public final int GL_INT_SAMPLER_3D = <hex> ; public final int GL_INT_SAMPLER_CUBE = <hex> ; public final int GL_INT_SAMPLER_2D_ARRAY = <hex> ; public final int GL_UNSIGNED_INT_SAMPLER_2D = <hex> ; public final int GL_UNSIGNED_INT_SAMPLER_3D = <hex> ; public final int GL_UNSIGNED_INT_SAMPLER_CUBE = <hex> ; public final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = <hex> ; public final int GL_BUFFER_ACCESS_FLAGS = <hex> ; public final int GL_BUFFER_MAP_LENGTH = <hex> ; public final int GL_BUFFER_MAP_OFFSET = <hex> ; public final int GL_DEPTH_COMPONENT32F = <hex> ; public final int GL_DEPTH32F_STENCIL8 = <hex> ; public final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = <hex> ; public final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = <hex> ; public final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = <hex> ; public final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = <hex> ; public final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = <hex> ; public final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = <hex> ; public final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = <hex> ; public final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = <hex> ; public final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = <hex> ; public final int GL_FRAMEBUFFER_DEFAULT = <hex> ; public final int GL_FRAMEBUFFER_UNDEFINED = <hex> ; public final int GL_DEPTH_STENCIL_ATTACHMENT = <hex> ; public final int GL_DEPTH_STENCIL = <hex> ; public final int GL_UNSIGNED_INT_24_8 = <hex> ; public final int GL_DEPTH24_STENCIL8 = <hex> ; public final int GL_UNSIGNED_NORMALIZED = <hex> ; public final int GL_DRAW_FRAMEBUFFER_BINDING = GL_FRAMEBUFFER_BINDING ; public final int GL_READ_FRAMEBUFFER = <hex> ; public final int GL_DRAW_FRAMEBUFFER = <hex> ; public final int GL_READ_FRAMEBUFFER_BINDING = <hex> ; public final int GL_RENDERBUFFER_SAMPLES = <hex> ; public final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = <hex> ; public final int GL_MAX_COLOR_ATTACHMENTS = <hex> ; public final int GL_COLOR_ATTACHMENT1 = <hex> ; public final int GL_COLOR_ATTACHMENT2 = <hex> ; public final int GL_COLOR_ATTACHMENT3 = <hex> ; public final int GL_COLOR_ATTACHMENT4 = <hex> ; public final int GL_COLOR_ATTACHMENT5 = <hex> ; public final int GL_COLOR_ATTACHMENT6 = <hex> ; public final int GL_COLOR_ATTACHMENT7 = <hex> ; public final int GL_COLOR_ATTACHMENT8 = <hex> ; public final int GL_COLOR_ATTACHMENT9 = <hex> ; public final int GL_COLOR_ATTACHMENT10 = <hex> ; public final int GL_COLOR_ATTACHMENT11 = <hex> ; public final int GL_COLOR_ATTACHMENT12 = <hex> ; public final int GL_COLOR_ATTACHMENT13 = <hex> ; public final int GL_COLOR_ATTACHMENT14 = <hex> ; public final int GL_COLOR_ATTACHMENT15 = <hex> ; public final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = <hex> ; public final int GL_MAX_SAMPLES = <hex> ; public final int GL_HALF_FLOAT = <hex> ; public final int GL_MAP_READ_BIT = <hex> ; public final int GL_MAP_WRITE_BIT = <hex> ; public final int GL_MAP_INVALIDATE_RANGE_BIT = <hex> ; public final int GL_MAP_INVALIDATE_BUFFER_BIT = <hex> ; public final int GL_MAP_FLUSH_EXPLICIT_BIT = <hex> ; public final int GL_MAP_UNSYNCHRONIZED_BIT = <hex> ; public final int GL_RG = <hex> ; public final int GL_RG_INTEGER = <hex> ; public final int GL_R8 = <hex> ; public final int GL_RG8 = <hex> ; public final int GL_R16F = <hex> ; public final int GL_R32F = <hex> ; public final int GL_RG16F = <hex> ; public final int GL_RG32F = <hex> ; public final int GL_R8I = <hex> ; public final int GL_R8UI = <hex> ; public final int GL_R16I = <hex> ; public final int GL_R16UI = <hex> ; public final int GL_R32I = <hex> ; public final int GL_R32UI = <hex> ; public final int GL_RG8I = <hex> ; public final int GL_RG8UI = <hex> ; public final int GL_RG16I = <hex> ; public final int GL_RG16UI = <hex> ; public final int GL_RG32I = <hex> ; public final int GL_RG32UI = <hex> ; public final int GL_VERTEX_ARRAY_BINDING = <hex> ; public final int GL_R8_SNORM = <hex> ; public final int GL_RG8_SNORM = <hex> ; public final int GL_RGB8_SNORM = <hex> ; public final int GL_RGBA8_SNORM = <hex> ; public final int GL_SIGNED_NORMALIZED = <hex> ; public final int GL_PRIMITIVE_RESTART_FIXED_INDEX = <hex> ; public final int GL_COPY_READ_BUFFER = <hex> ; public final int GL_COPY_WRITE_BUFFER = <hex> ; public final int GL_COPY_READ_BUFFER_BINDING = GL_COPY_READ_BUFFER ; public final int GL_COPY_WRITE_BUFFER_BINDING = GL_COPY_WRITE_BUFFER ; public final int GL_UNIFORM_BUFFER = <hex> ; public final int GL_UNIFORM_BUFFER_BINDING = <hex> ; public final int GL_UNIFORM_BUFFER_START = <hex> ; public final int GL_UNIFORM_BUFFER_SIZE = <hex> ; public final int GL_MAX_VERTEX_UNIFORM_BLOCKS = <hex> ; public final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = <hex> ; public final int GL_MAX_COMBINED_UNIFORM_BLOCKS = <hex> ; public final int GL_MAX_UNIFORM_BUFFER_BINDINGS = <hex> ; public final int GL_MAX_UNIFORM_BLOCK_SIZE = <hex> ; public final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = <hex> ; public final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = <hex> ; public final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = <hex> ; public final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = <hex> ; public final int GL_ACTIVE_UNIFORM_BLOCKS = <hex> ; public final int GL_UNIFORM_TYPE = <hex> ; public final int GL_UNIFORM_SIZE = <hex> ; public final int GL_UNIFORM_NAME_LENGTH = <hex> ; public final int GL_UNIFORM_BLOCK_INDEX = <hex> ; public final int GL_UNIFORM_OFFSET = <hex> ; public final int GL_UNIFORM_ARRAY_STRIDE = <hex> ; public final int GL_UNIFORM_MATRIX_STRIDE = <hex> ; public final int GL_UNIFORM_IS_ROW_MAJOR = <hex> ; public final int GL_UNIFORM_BLOCK_BINDING = <hex> ; public final int GL_UNIFORM_BLOCK_DATA_SIZE = <hex> ; public final int GL_UNIFORM_BLOCK_NAME_LENGTH = <hex> ; public final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = <hex> ; public final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = <hex> ; public final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = <hex> ; public final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = <hex> ; public final int GL_INVALID_INDEX = - <int> ; public final int GL_MAX_VERTEX_OUTPUT_COMPONENTS = <hex> ; public final int GL_MAX_FRAGMENT_INPUT_COMPONENTS = <hex> ; public final int GL_MAX_SERVER_WAIT_TIMEOUT = <hex> ; public final int GL_OBJECT_TYPE = <hex> ; public final int GL_SYNC_CONDITION = <hex> ; public final int GL_SYNC_STATUS = <hex> ; public final int GL_SYNC_FLAGS = <hex> ; public final int GL_SYNC_FENCE = <hex> ; public final int GL_SYNC_GPU_COMMANDS_COMPLETE = <hex> ; public final int GL_UNSIGNALED = <hex> ; public final int GL_SIGNALED = <hex> ; public final int GL_ALREADY_SIGNALED = <hex> ; public final int GL_TIMEOUT_EXPIRED = <hex> ; public final int GL_CONDITION_SATISFIED = <hex> ; public final int GL_WAIT_FAILED = <hex> ; public final int GL_SYNC_FLUSH_COMMANDS_BIT = <hex> ; public final long GL_TIMEOUT_IGNORED = - <int> ; public final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = <hex> ; public final int GL_ANY_SAMPLES_PASSED = <hex> ; public final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = <hex> ; public final int GL_SAMPLER_BINDING = <hex> ; public final int GL_RGB10_A2UI = <hex> ; public final int GL_TEXTURE_SWIZZLE_R = <hex> ; public final int GL_TEXTURE_SWIZZLE_G = <hex> ; public final int GL_TEXTURE_SWIZZLE_B = <hex> ; public final int GL_TEXTURE_SWIZZLE_A = <hex> ; public final int GL_GREEN = <hex> ; public final int GL_BLUE = <hex> ; public final int GL_INT_2_10_10_10_REV = <hex> ; public final int GL_TRANSFORM_FEEDBACK = <hex> ; public final int GL_TRANSFORM_FEEDBACK_PAUSED = <hex> ; public final int GL_TRANSFORM_FEEDBACK_ACTIVE = <hex> ; public final int GL_TRANSFORM_FEEDBACK_BINDING = <hex> ; public final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT = <hex> ; public final int GL_PROGRAM_BINARY_LENGTH = <hex> ; public final int GL_NUM_PROGRAM_BINARY_FORMATS = <hex> ; public final int GL_PROGRAM_BINARY_FORMATS = <hex> ; public final int GL_COMPRESSED_R11_EAC = <hex> ; public final int GL_COMPRESSED_SIGNED_R11_EAC = <hex> ; public final int GL_COMPRESSED_RG11_EAC = <hex> ; public final int GL_COMPRESSED_SIGNED_RG11_EAC = <hex> ; public final int GL_COMPRESSED_RGB8_ETC2 = <hex> ; public final int GL_COMPRESSED_SRGB8_ETC2 = <hex> ; public final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = <hex> ; public final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = <hex> ; public final int GL_COMPRESSED_RGBA8_ETC2_EAC = <hex> ; public final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = <hex> ; public final int GL_TEXTURE_IMMUTABLE_FORMAT = <hex> ; public final int GL_MAX_ELEMENT_INDEX = <hex> ; public final int GL_NUM_SAMPLE_COUNTS = <hex> ; public final int GL_TEXTURE_IMMUTABLE_LEVELS = <hex> ; public void glReadBuffer ( int mode ) ; public void glDrawRangeElements ( int mode , int start , int end , int count , int type , java . nio . Buffer indices ) ; public void glDrawRangeElements ( int mode , int start , int end , int count , int type , int offset ) ; public void glTexImage3D ( int target , int level , int internalformat , int width , int height , int depth , int border , int format , int type , java . nio . Buffer pixels ) ; public void glTexImage3D ( int target , int level , int internalformat , int width , int height , int depth , int border , int format , int type , int offset ) ; public void glTexSubImage3D ( int target , int level , int xoffset , int yoffset , int zoffset , int width , int height , int depth , int format , int type , java . nio . Buffer pixels ) ; public void glTexSubImage3D ( int target , int level , int xoffset , int yoffset , int zoffset , int width , int height , int depth , int format , int type , int offset ) ; public void glCopyTexSubImage3D ( int target , int level , int xoffset , int yoffset , int zoffset , int x , int y , int width , int height ) ; public void glGenQueries ( int n , int [ ] ids , int offset ) ; public void glGenQueries ( int n , java . nio . IntBuffer ids ) ; public void glDeleteQueries ( int n , int [ ] ids , int offset ) ; public void glDeleteQueries ( int n , java . nio . IntBuffer ids ) ; public boolean glIsQuery ( int id ) ; public void glBeginQuery ( int target , int id ) ; public void glEndQuery ( int target ) ; public void glGetQueryiv ( int target , int pname , java . nio . IntBuffer params ) ; public void glGetQueryObjectuiv ( int id , int pname , java . nio . IntBuffer params ) ; public boolean glUnmapBuffer ( int target ) ; public java . nio . Buffer glGetBufferPointerv ( int target , int pname ) ; public void glDrawBuffers ( int n , java . nio . IntBuffer bufs ) ; public void glUniformMatrix2x3fv ( int location , int count , boolean transpose , java . nio . FloatBuffer value ) ; public void glUniformMatrix3x2fv ( int location , int count , boolean transpose , java . nio . FloatBuffer value ) ; public void glUniformMatrix2x4fv ( int location , int count , boolean transpose , java . nio . FloatBuffer value ) ; public void glUniformMatrix4x2fv ( int location , int count , boolean transpose , java . nio . FloatBuffer value ) ; public void glUniformMatrix3x4fv ( int location , int count , boolean transpose , java . nio . FloatBuffer value ) ; public void glUniformMatrix4x3fv ( int location , int count , boolean transpose , java . nio . FloatBuffer value ) ; public void glBlitFramebuffer ( int srcX0 , int srcY0 , int srcX1 , int srcY1 , int dstX0 , int dstY0 , int dstX1 , int dstY1 , int mask , int filter ) ; public void glRenderbufferStorageMultisample ( int target , int samples , int internalformat , int width , int height ) ; public void glFramebufferTextureLayer ( int target , int attachment , int texture , int level , int layer ) ; public void glFlushMappedBufferRange ( int target , int offset , int length ) ; public void glBindVertexArray ( int array ) ; public void glDeleteVertexArrays ( int n , int [ ] arrays , int offset ) ; public void glDeleteVertexArrays ( int n , java . nio . IntBuffer arrays ) ; public void glGenVertexArrays ( int n , int [ ] arrays , int offset ) ; public void glGenVertexArrays ( int n , java . nio . IntBuffer arrays ) ; public boolean glIsVertexArray ( int array ) ; public void glBeginTransformFeedback ( int primitiveMode ) ; public void glEndTransformFeedback ( ) ; public void glBindBufferRange ( int target , int index , int buffer , int offset , int size ) ; public void glBindBufferBase ( int target , int index , int buffer ) ; public void glTransformFeedbackVaryings ( int program , String [ ] varyings , int bufferMode ) ; public void glVertexAttribIPointer ( int index , int size , int type , int stride , int offset ) ; public void glGetVertexAttribIiv ( int index , int pname , java . nio . IntBuffer params ) ; public void glGetVertexAttribIuiv ( int index , int pname , java . nio . IntBuffer params ) ; public void glVertexAttribI4i ( int index , int x , int y , int z , int w ) ; public void glVertexAttribI4ui ( int index , int x , int y , int z , int w ) ; public void glGetUniformuiv ( int program , int location , java . nio . IntBuffer params ) ; public int glGetFragDataLocation ( int program , String name ) ; public void glUniform1uiv ( int location , int count , java . nio . IntBuffer value ) ; public void glUniform3uiv ( int location , int count , java . nio . IntBuffer value ) ; public void glUniform4uiv ( int location , int count , java . nio . IntBuffer value ) ; public void glClearBufferiv ( int buffer , int drawbuffer , java . nio . IntBuffer value ) ; public void glClearBufferuiv ( int buffer , int drawbuffer , java . nio . IntBuffer value ) ; public void glClearBufferfv ( int buffer , int drawbuffer , java . nio . FloatBuffer value ) ; public void glClearBufferfi ( int buffer , int drawbuffer , float depth , int stencil ) ; public String glGetStringi ( int name , int index ) ; public void glCopyBufferSubData ( int readTarget , int writeTarget , int readOffset , int writeOffset , int size ) ; public void glGetUniformIndices ( int program , String [ ] uniformNames , java . nio . IntBuffer uniformIndices ) ; public void glGetActiveUniformsiv ( int program , int uniformCount , java . nio . IntBuffer uniformIndices , int pname , java . nio . IntBuffer params ) ; public int glGetUniformBlockIndex ( int program , String uniformBlockName ) ; public void glGetActiveUniformBlockiv ( int program , int uniformBlockIndex , int pname , java . nio . IntBuffer params ) ; public void glGetActiveUniformBlockName ( int program , int uniformBlockIndex , java . nio . Buffer length , java . nio . Buffer uniformBlockName ) ; public String glGetActiveUniformBlockName ( int program , int uniformBlockIndex ) ; public void glUniformBlockBinding ( int program , int uniformBlockIndex , int uniformBlockBinding ) ; public void glDrawArraysInstanced ( int mode , int first , int count , int instanceCount ) ; public void glDrawElementsInstanced ( int mode , int count , int type , int indicesOffset , int instanceCount ) ; public void glGetInteger64v ( int pname , java . nio . LongBuffer params ) ; public void glGetBufferParameteri64v ( int target , int pname , java . nio . LongBuffer params ) ; public void glGenSamplers ( int count , int [ ] samplers , int offset ) ; public void glGenSamplers ( int count , java . nio . IntBuffer samplers ) ; public void glDeleteSamplers ( int count , int [ ] samplers , int offset ) ; public void glDeleteSamplers ( int count , java . nio . IntBuffer samplers ) ; public boolean glIsSampler ( int sampler ) ; public void glBindSampler ( int unit , int sampler ) ; public void glSamplerParameteri ( int sampler , int pname , int param ) ; public void glSamplerParameteriv ( int sampler , int pname , java . nio . IntBuffer param ) ; public void glSamplerParameterf ( int sampler , int pname , float param ) ; public void glSamplerParameterfv ( int sampler , int pname , java . nio . FloatBuffer param ) ; public void glGetSamplerParameteriv ( int sampler , int pname , java . nio . IntBuffer params ) ; public void glGetSamplerParameterfv ( int sampler , int pname , java . nio . FloatBuffer params ) ; public void glVertexAttribDivisor ( int index , int divisor ) ; public void glBindTransformFeedback ( int target , int id ) ; public void glDeleteTransformFeedbacks ( int n , int [ ] ids , int offset ) ; public void glDeleteTransformFeedbacks ( int n , java . nio . IntBuffer ids ) ; public void glGenTransformFeedbacks ( int n , int [ ] ids , int offset ) ; public void glGenTransformFeedbacks ( int n , java . nio . IntBuffer ids ) ; public boolean glIsTransformFeedback ( int id ) ; public void glPauseTransformFeedback ( ) ; public void glResumeTransformFeedback ( ) ; public void glProgramParameteri ( int program , int pname , int value ) ; public void glInvalidateFramebuffer ( int target , int numAttachments , java . nio . IntBuffer attachments ) ; public void glInvalidateSubFramebuffer ( int target , int numAttachments , java . nio . IntBuffer attachments , int x , int y , int width , int height ) ; @Override @Deprecated void glVertexAttribPointer ( int indx , int size , int type , boolean normalized , int stride , Buffer ptr ) ; } 

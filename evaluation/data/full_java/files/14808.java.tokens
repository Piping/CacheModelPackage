package org . gradle . jvm . internal ; import com . google . common . collect . ImmutableSet ; import org . gradle . jvm . JvmBinaryTasks ; import org . gradle . jvm . internal . toolchain . JavaToolChainInternal ; import org . gradle . jvm . platform . JavaPlatform ; import org . gradle . jvm . toolchain . JavaToolChain ; import org . gradle . platform . base . DependencySpec ; import org . gradle . platform . base . binary . BaseBinarySpec ; import org . gradle . platform . base . internal . BinaryBuildAbility ; import org . gradle . platform . base . internal . ToolSearchBuildAbility ; import java . io . File ; import java . util . Collection ; import java . util . Set ; import static org . gradle . util . CollectionUtils . findSingle ; public class DefaultJarBinarySpec extends BaseBinarySpec implements JarBinarySpecInternal { private final JvmBinaryTasks tasks = new DefaultJvmBinaryTasks ( super . getTasks ( ) ) ; private final JarFile apiJar = new DefaultJarFile ( ) ; private File jarFile ; private Set < String > exportedPackages = ImmutableSet . of ( ) ; private Set < DependencySpec > apiDependencies = ImmutableSet . of ( ) ; private Set < DependencySpec > componentLevelDependencies = ImmutableSet . of ( ) ; private final DefaultJvmAssembly assembly = new DefaultJvmAssembly ( ) ; @Override protected String getTypeName ( ) { return <str> ; } @Override public JvmBinaryTasks getTasks ( ) { return tasks ; } @Override public JavaToolChain getToolChain ( ) { return assembly . getToolChain ( ) ; } @Override public void setToolChain ( JavaToolChain toolChain ) { assembly . setToolChain ( toolChain ) ; } @Override public JavaPlatform getTargetPlatform ( ) { return assembly . getTargetPlatform ( ) ; } @Override public void setTargetPlatform ( JavaPlatform platform ) { assembly . setTargetPlatform ( platform ) ; } @Override public JarFile getApiJar ( ) { return apiJar ; } @Override public File getJarFile ( ) { return jarFile ; } @Override public void setJarFile ( File jarFile ) { this . jarFile = jarFile ; } @Override public File getApiJarFile ( ) { return apiJar . getFile ( ) ; } @Override public void setApiJarFile ( File apiJarFile ) { apiJar . setFile ( apiJarFile ) ; } @Override public File getClassesDir ( ) { return findSingle ( assembly . getClassDirectories ( ) ) ; } @Override public void setClassesDir ( File classesDir ) { replaceSingleDirectory ( assembly . getClassDirectories ( ) , classesDir ) ; } @Override public File getResourcesDir ( ) { return findSingle ( assembly . getResourceDirectories ( ) ) ; } @Override public void setResourcesDir ( File resourcesDir ) { replaceSingleDirectory ( assembly . getResourceDirectories ( ) , resourcesDir ) ; } @Override public void setExportedPackages ( Set < String > exportedPackages ) { this . exportedPackages = ImmutableSet . copyOf ( exportedPackages ) ; } @Override public Set < String > getExportedPackages ( ) { return exportedPackages ; } @Override public void setApiDependencies ( Collection < DependencySpec > apiDependencies ) { this . apiDependencies = ImmutableSet . copyOf ( apiDependencies ) ; } @Override public Collection < DependencySpec > getApiDependencies ( ) { return apiDependencies ; } @Override public void setDependencies ( Collection < DependencySpec > dependencies ) { componentLevelDependencies = ImmutableSet . copyOf ( dependencies ) ; } @Override public Collection < DependencySpec > getDependencies ( ) { return componentLevelDependencies ; } @Override protected BinaryBuildAbility getBinaryBuildAbility ( ) { return new ToolSearchBuildAbility ( ( ( JavaToolChainInternal ) getToolChain ( ) ) . select ( getTargetPlatform ( ) ) ) ; } @Override public JvmAssembly getAssembly ( ) { return assembly ; } } 

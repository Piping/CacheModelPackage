package org . elasticsearch . index . search . geo ; import org . apache . lucene . search . BooleanClause . Occur ; import org . apache . lucene . search . BooleanQuery ; import org . apache . lucene . search . ConstantScoreQuery ; import org . apache . lucene . search . Query ; import org . elasticsearch . common . geo . GeoPoint ; import org . elasticsearch . index . mapper . geo . GeoPointFieldMapper ; import org . elasticsearch . index . mapper . geo . GeoPointFieldMapperLegacy ; public class IndexedGeoBoundingBoxQuery { public static Query create ( GeoPoint topLeft , GeoPoint bottomRight , GeoPointFieldMapperLegacy . GeoPointFieldType fieldType ) { if ( ! fieldType . isLatLonEnabled ( ) ) { throw new IllegalArgumentException ( <str> + fieldType . names ( ) . fullName ( ) + <str> ) ; } if ( topLeft . lon ( ) > bottomRight . lon ( ) ) { return westGeoBoundingBoxFilter ( topLeft , bottomRight , fieldType ) ; } else { return eastGeoBoundingBoxFilter ( topLeft , bottomRight , fieldType ) ; } } private static Query westGeoBoundingBoxFilter ( GeoPoint topLeft , GeoPoint bottomRight , GeoPointFieldMapperLegacy . GeoPointFieldType fieldType ) { BooleanQuery . Builder filter = new BooleanQuery . Builder ( ) ; filter . setMinimumNumberShouldMatch ( <int> ) ; filter . add ( fieldType . lonFieldType ( ) . rangeQuery ( null , bottomRight . lon ( ) , true , true ) , Occur . SHOULD ) ; filter . add ( fieldType . lonFieldType ( ) . rangeQuery ( topLeft . lon ( ) , null , true , true ) , Occur . SHOULD ) ; filter . add ( fieldType . latFieldType ( ) . rangeQuery ( bottomRight . lat ( ) , topLeft . lat ( ) , true , true ) , Occur . MUST ) ; return new ConstantScoreQuery ( filter . build ( ) ) ; } private static Query eastGeoBoundingBoxFilter ( GeoPoint topLeft , GeoPoint bottomRight , GeoPointFieldMapperLegacy . GeoPointFieldType fieldType ) { BooleanQuery . Builder filter = new BooleanQuery . Builder ( ) ; filter . add ( fieldType . lonFieldType ( ) . rangeQuery ( topLeft . lon ( ) , bottomRight . lon ( ) , true , true ) , Occur . MUST ) ; filter . add ( fieldType . latFieldType ( ) . rangeQuery ( bottomRight . lat ( ) , topLeft . lat ( ) , true , true ) , Occur . MUST ) ; return new ConstantScoreQuery ( filter . build ( ) ) ; } } 

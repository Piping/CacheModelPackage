package org . eclipse . debug . examples . ui . midi . adapters ; import org . eclipse . debug . core . ILaunch ; import org . eclipse . debug . examples . core . midi . launcher . MidiLaunch ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelProxy ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelProxyFactory ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IPresentationContext ; import org . eclipse . debug . internal . ui . viewers . update . LaunchProxy ; import org . eclipse . debug . ui . IDebugUIConstants ; public class SequencerModelProxyFactory implements IModelProxyFactory { @Override public IModelProxy createModelProxy ( Object element , IPresentationContext context ) { if ( IDebugUIConstants . ID_VARIABLE_VIEW . equals ( context . getId ( ) ) ) { if ( element instanceof MidiLaunch ) { return new SequencerControlsModelProxy ( ( MidiLaunch ) element ) ; } } if ( IDebugUIConstants . ID_DEBUG_VIEW . equals ( context . getId ( ) ) ) { if ( element instanceof MidiLaunch ) { return new LaunchProxy ( ( ILaunch ) element ) ; } } return null ; } } 

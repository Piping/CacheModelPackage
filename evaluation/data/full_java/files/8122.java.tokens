package org . elasticsearch . index . fielddata ; import org . apache . lucene . index . DocValues ; import org . apache . lucene . index . NumericDocValues ; import org . apache . lucene . index . SortedNumericDocValues ; import org . apache . lucene . util . NumericUtils ; import org . elasticsearch . test . ESTestCase ; public class FieldDataTests extends ESTestCase { public void testSortableLongBitsToDoubles ( ) { final double value = randomDouble ( ) ; final long valueBits = NumericUtils . doubleToSortableLong ( value ) ; NumericDocValues values = new NumericDocValues ( ) { @Override public long get ( int docID ) { return valueBits ; } } ; SortedNumericDoubleValues asMultiDoubles = FieldData . sortableLongBitsToDoubles ( DocValues . singleton ( values , null ) ) ; NumericDoubleValues asDoubles = FieldData . unwrapSingleton ( asMultiDoubles ) ; assertNotNull ( asDoubles ) ; assertEquals ( value , asDoubles . get ( <int> ) , <int> ) ; NumericDocValues backToLongs = DocValues . unwrapSingleton ( FieldData . toSortableLongBits ( asMultiDoubles ) ) ; assertSame ( values , backToLongs ) ; SortedNumericDocValues multiValues = new SortedNumericDocValues ( ) { @Override public long valueAt ( int index ) { return valueBits ; } @Override public void setDocument ( int doc ) { } @Override public int count ( ) { return <int> ; } } ; asMultiDoubles = FieldData . sortableLongBitsToDoubles ( multiValues ) ; assertEquals ( value , asMultiDoubles . valueAt ( <int> ) , <int> ) ; assertSame ( multiValues , FieldData . toSortableLongBits ( asMultiDoubles ) ) ; } public void testDoublesToSortableLongBits ( ) { final double value = randomDouble ( ) ; final long valueBits = NumericUtils . doubleToSortableLong ( value ) ; NumericDoubleValues values = new NumericDoubleValues ( ) { @Override public double get ( int docID ) { return value ; } } ; SortedNumericDocValues asMultiLongs = FieldData . toSortableLongBits ( FieldData . singleton ( values , null ) ) ; NumericDocValues asLongs = DocValues . unwrapSingleton ( asMultiLongs ) ; assertNotNull ( asLongs ) ; assertEquals ( valueBits , asLongs . get ( <int> ) ) ; SortedNumericDoubleValues multiValues = new SortedNumericDoubleValues ( ) { @Override public double valueAt ( int index ) { return value ; } @Override public void setDocument ( int doc ) { } @Override public int count ( ) { return <int> ; } } ; asMultiLongs = FieldData . toSortableLongBits ( multiValues ) ; assertEquals ( valueBits , asMultiLongs . valueAt ( <int> ) ) ; assertSame ( multiValues , FieldData . sortableLongBitsToDoubles ( asMultiLongs ) ) ; } } 

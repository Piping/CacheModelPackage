package org . eclipse . debug . internal . ui . viewers . update ; import org . eclipse . debug . core . DebugEvent ; import org . eclipse . debug . core . model . IStackFrame ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IModelDelta ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ModelDelta ; import org . eclipse . debug . internal . ui . viewers . provisional . AbstractModelProxy ; public class StackFrameEventHandler extends DebugEventHandler { ThreadEventHandler fThreadHandler = null ; public StackFrameEventHandler ( AbstractModelProxy proxy , ThreadEventHandler threadHandler ) { super ( proxy ) ; fThreadHandler = threadHandler ; } @Override protected boolean handlesEvent ( DebugEvent event ) { return event . getSource ( ) instanceof IStackFrame ; } @Override protected void handleChange ( DebugEvent event ) { IStackFrame frame = ( IStackFrame ) event . getSource ( ) ; ModelDelta root = fThreadHandler . buildRootDelta ( ) ; ModelDelta delta = fThreadHandler . addPathToThread ( root , frame . getThread ( ) ) ; delta = delta . addNode ( frame . getThread ( ) , IModelDelta . NO_CHANGE ) ; int flags = IModelDelta . NO_CHANGE ; if ( event . getDetail ( ) = = DebugEvent . CONTENT ) { flags = flags | IModelDelta . CONTENT ; } else if ( event . getDetail ( ) = = DebugEvent . STATE ) { flags = flags | IModelDelta . STATE ; } delta = delta . addNode ( frame , flags ) ; fireDelta ( root ) ; } } 

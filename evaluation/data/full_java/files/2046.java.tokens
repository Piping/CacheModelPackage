package org . nd4j . linalg . api . ops . impl . scalar ; import org . apache . commons . math3 . util . FastMath ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . api . ops . BaseScalarOp ; import org . nd4j . linalg . api . ops . Op ; public class ScalarSet extends BaseScalarOp { public ScalarSet ( ) { } public ScalarSet ( INDArray x , INDArray y , INDArray z , int n , Number num ) { super ( x , y , z , n , num ) ; } public ScalarSet ( INDArray x , Number num ) { super ( x , num ) ; } public ScalarSet ( INDArray x , INDArray y , INDArray z , int n , IComplexNumber num ) { super ( x , y , z , n , num ) ; } public ScalarSet ( INDArray x , IComplexNumber num ) { super ( x , num ) ; } @Override public String name ( ) { return <str> ; } @Override public IComplexNumber op ( IComplexNumber origin , double other ) { return complexNumber ; } @Override public IComplexNumber op ( IComplexNumber origin , float other ) { return complexNumber ; } @Override public IComplexNumber op ( IComplexNumber origin , IComplexNumber other ) { return complexNumber ; } @Override public float op ( float origin , float other ) { return num . floatValue ( ) ; } @Override public double op ( double origin , double other ) { return num . doubleValue ( ) ; } @Override public double op ( double origin ) { return num . doubleValue ( ) ; } @Override public float op ( float origin ) { return num . floatValue ( ) ; } @Override public IComplexNumber op ( IComplexNumber origin ) { return complexNumber ; } @Override public Op opForDimension ( int index , int dimension ) { if ( num ! = null ) return new ScalarSet ( x . vectorAlongDimension ( index , dimension ) , num ) ; else return new ScalarSet ( x . vectorAlongDimension ( index , dimension ) , complexNumber ) ; } @Override public Op opForDimension ( int index , int . . . dimension ) { if ( num ! = null ) return new ScalarSet ( x . tensorAlongDimension ( index , dimension ) , num ) ; else return new ScalarSet ( x . tensorAlongDimension ( index , dimension ) , complexNumber ) ; } @Override public void init ( INDArray x , INDArray y , INDArray z , int n ) { super . init ( x , y , z , n ) ; if ( num ! = null ) this . extraArgs = new Object [ ] { num } ; else this . extraArgs = new Object [ ] { complexNumber } ; } } 

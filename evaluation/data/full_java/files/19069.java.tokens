package io . netty . handler . codec . http ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . util . IllegalReferenceCountException ; public class DefaultFullHttpRequest extends DefaultHttpRequest implements FullHttpRequest { private final ByteBuf content ; private final HttpHeaders trailingHeader ; private final boolean validateHeaders ; private int hash ; public DefaultFullHttpRequest ( HttpVersion httpVersion , HttpMethod method , String uri ) { this ( httpVersion , method , uri , Unpooled . buffer ( <int> ) ) ; } public DefaultFullHttpRequest ( HttpVersion httpVersion , HttpMethod method , String uri , ByteBuf content ) { this ( httpVersion , method , uri , content , true ) ; } public DefaultFullHttpRequest ( HttpVersion httpVersion , HttpMethod method , String uri , boolean validateHeaders ) { this ( httpVersion , method , uri , Unpooled . buffer ( <int> ) , validateHeaders ) ; } public DefaultFullHttpRequest ( HttpVersion httpVersion , HttpMethod method , String uri , ByteBuf content , boolean validateHeaders ) { super ( httpVersion , method , uri , validateHeaders ) ; if ( content = = null ) { throw new NullPointerException ( <str> ) ; } this . content = content ; trailingHeader = new DefaultHttpHeaders ( validateHeaders ) ; this . validateHeaders = validateHeaders ; } @Override public HttpHeaders trailingHeaders ( ) { return trailingHeader ; } @Override public ByteBuf content ( ) { return content ; } @Override public int refCnt ( ) { return content . refCnt ( ) ; } @Override public FullHttpRequest retain ( ) { content . retain ( ) ; return this ; } @Override public FullHttpRequest retain ( int increment ) { content . retain ( increment ) ; return this ; } @Override public FullHttpRequest touch ( ) { content . touch ( ) ; return this ; } @Override public FullHttpRequest touch ( Object hint ) { content . touch ( hint ) ; return this ; } @Override public boolean release ( ) { return content . release ( ) ; } @Override public boolean release ( int decrement ) { return content . release ( decrement ) ; } @Override public FullHttpRequest setProtocolVersion ( HttpVersion version ) { super . setProtocolVersion ( version ) ; return this ; } @Override public FullHttpRequest setMethod ( HttpMethod method ) { super . setMethod ( method ) ; return this ; } @Override public FullHttpRequest setUri ( String uri ) { super . setUri ( uri ) ; return this ; } private FullHttpRequest copy ( boolean copyContent , ByteBuf newContent ) { DefaultFullHttpRequest copy = new DefaultFullHttpRequest ( protocolVersion ( ) , method ( ) , uri ( ) , copyContent ? content ( ) . copy ( ) : newContent = = null ? Unpooled . buffer ( <int> ) : newContent ) ; copy . headers ( ) . set ( headers ( ) ) ; copy . trailingHeaders ( ) . set ( trailingHeaders ( ) ) ; return copy ; } @Override public FullHttpRequest copy ( ByteBuf newContent ) { return copy ( false , newContent ) ; } @Override public FullHttpRequest copy ( ) { return copy ( true , null ) ; } @Override public FullHttpRequest duplicate ( ) { DefaultFullHttpRequest duplicate = new DefaultFullHttpRequest ( protocolVersion ( ) , method ( ) , uri ( ) , content ( ) . duplicate ( ) , validateHeaders ) ; duplicate . headers ( ) . set ( headers ( ) ) ; duplicate . trailingHeaders ( ) . set ( trailingHeaders ( ) ) ; return duplicate ; } @Override public int hashCode ( ) { int hash = this . hash ; if ( hash = = <int> ) { if ( content ( ) . refCnt ( ) ! = <int> ) { try { hash = <int> + content ( ) . hashCode ( ) ; } catch ( IllegalReferenceCountException ignored ) { hash = <int> ; } } else { hash = <int> ; } hash = <int> * hash + trailingHeaders ( ) . hashCode ( ) ; hash = <int> * hash + super . hashCode ( ) ; this . hash = hash ; } return hash ; } @Override public boolean equals ( Object o ) { if ( ! ( o instanceof DefaultFullHttpRequest ) ) { return false ; } DefaultFullHttpRequest other = ( DefaultFullHttpRequest ) o ; return super . equals ( other ) & & content ( ) . equals ( other . content ( ) ) & & trailingHeaders ( ) . equals ( other . trailingHeaders ( ) ) ; } @Override public String toString ( ) { return HttpMessageUtil . appendFullRequest ( new StringBuilder ( <int> ) , this ) . toString ( ) ; } } 

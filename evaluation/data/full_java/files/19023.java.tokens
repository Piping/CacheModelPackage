package io . netty . handler . codec . xml ; import io . netty . buffer . ByteBuf ; import io . netty . buffer . Unpooled ; import io . netty . channel . embedded . EmbeddedChannel ; import io . netty . handler . codec . CorruptedFrameException ; import io . netty . handler . codec . TooLongFrameException ; import io . netty . util . CharsetUtil ; import org . junit . Test ; import java . io . IOException ; import java . net . URISyntaxException ; import java . net . URL ; import java . nio . ByteBuffer ; import java . nio . charset . StandardCharsets ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import static org . hamcrest . CoreMatchers . * ; import static org . junit . Assert . * ; public class XmlFrameDecoderTest { private final List < String > xmlSamples ; public XmlFrameDecoderTest ( ) throws IOException , URISyntaxException { xmlSamples = Arrays . asList ( sample ( <str> ) , sample ( <str> ) , sample ( <str> ) , sample ( <str> ) , sample ( <str> ) , sample ( <str> ) ) ; } @Test ( expected = IllegalArgumentException . class ) public void testConstructorWithIllegalArgs01 ( ) { new XmlFrameDecoder ( <int> ) ; } @Test ( expected = IllegalArgumentException . class ) public void testConstructorWithIllegalArgs02 ( ) { new XmlFrameDecoder ( - <int> ) ; } @Test ( expected = TooLongFrameException . class ) public void testDecodeWithFrameExceedingMaxLength ( ) { XmlFrameDecoder decoder = new XmlFrameDecoder ( <int> ) ; EmbeddedChannel ch = new EmbeddedChannel ( decoder ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; } @Test ( expected = CorruptedFrameException . class ) public void testDecodeWithInvalidInput ( ) { XmlFrameDecoder decoder = new XmlFrameDecoder ( <int> ) ; EmbeddedChannel ch = new EmbeddedChannel ( decoder ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; } @Test ( expected = CorruptedFrameException . class ) public void testDecodeWithInvalidContentBeforeXml ( ) { XmlFrameDecoder decoder = new XmlFrameDecoder ( <int> ) ; EmbeddedChannel ch = new EmbeddedChannel ( decoder ) ; ch . writeInbound ( Unpooled . copiedBuffer ( <str> , CharsetUtil . UTF_8 ) ) ; } @Test public void testDecodeShortValidXml ( ) { testDecodeWithXml ( <str> , <str> ) ; } @Test public void testDecodeShortValidXmlWithLeadingWhitespace01 ( ) { testDecodeWithXml ( <str> , <str> ) ; } @Test public void testDecodeShortValidXmlWithLeadingWhitespace02 ( ) { testDecodeWithXml ( <str> , <str> ) ; } @Test public void testDecodeShortValidXmlWithLeadingWhitespace02AndTrailingGarbage ( ) { testDecodeWithXml ( <str> , <str> , CorruptedFrameException . class ) ; } @Test public void testDecodeInvalidXml ( ) { testDecodeWithXml ( <str> , new Object [ <int> ] ) ; testDecodeWithXml ( <str> , new Object [ <int> ] ) ; } @Test public void testDecodeWithCDATABlock ( ) { final String xml = <str> + <str> + <str> ; testDecodeWithXml ( xml , xml ) ; } @Test public void testDecodeWithCDATABlockContainingNestedUnbalancedXml ( ) { final String xml = <str> + <str> + <str> ; testDecodeWithXml ( xml , xml ) ; } @Test public void testDecodeWithMultipleMessages ( ) { final String input = <str> + <str> + <str> + <str> + <str> + <str> ; final String frame1 = <str> + <str> ; final String frame2 = <str> + <str> + <str> ; final String frame3 = <str> + <str> ; testDecodeWithXml ( input , frame1 , frame2 , frame3 ) ; } @Test public void testDecodeWithSampleXml ( ) { for ( final String xmlSample : xmlSamples ) { testDecodeWithXml ( xmlSample , xmlSample ) ; } } private static void testDecodeWithXml ( String xml , Object . . . expected ) { EmbeddedChannel ch = new EmbeddedChannel ( new XmlFrameDecoder ( <int> ) ) ; Exception cause = null ; try { ch . writeInbound ( Unpooled . copiedBuffer ( xml , CharsetUtil . UTF_8 ) ) ; } catch ( Exception e ) { cause = e ; } List < Object > actual = new ArrayList < Object > ( ) ; for ( ; ; ) { ByteBuf buf = ch . readInbound ( ) ; if ( buf = = null ) { break ; } actual . add ( buf . toString ( CharsetUtil . UTF_8 ) ) ; buf . release ( ) ; } if ( cause ! = null ) { actual . add ( cause . getClass ( ) ) ; } try { List < Object > expectedList = new ArrayList < Object > ( ) ; Collections . addAll ( expectedList , expected ) ; assertThat ( actual , is ( expectedList ) ) ; } finally { ch . finish ( ) ; } } private String sample ( String number ) throws IOException , URISyntaxException { String path = <str> + number + <str> ; URL url = getClass ( ) . getClassLoader ( ) . getResource ( path ) ; if ( url = = null ) { throw new IllegalArgumentException ( <str> + path ) ; } byte [ ] buf = Files . readAllBytes ( Paths . get ( url . toURI ( ) ) ) ; return StandardCharsets . UTF_8 . decode ( ByteBuffer . wrap ( buf ) ) . toString ( ) ; } } 

package org . elasticsearch . cluster . routing ; import org . elasticsearch . Version ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . metadata . IndexMetaData ; import org . elasticsearch . cluster . metadata . MetaData ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . VersionUtils ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . util . Arrays ; public class RoutingBackwardCompatibilityTests extends ESTestCase { public void testBackwardCompatibility ( ) throws Exception { try ( BufferedReader reader = new BufferedReader ( new InputStreamReader ( RoutingBackwardCompatibilityTests . class . getResourceAsStream ( <str> ) , <str> ) ) ) { for ( String line = reader . readLine ( ) ; line ! = null ; line = reader . readLine ( ) ) { if ( line . startsWith ( <str> ) ) { continue ; } String [ ] parts = line . split ( <str> ) ; assertEquals ( Arrays . toString ( parts ) , <int> , parts . length ) ; final String index = parts [ <int> ] ; final int numberOfShards = Integer . parseInt ( parts [ <int> ] ) ; final String type = parts [ <int> ] ; final String id = parts [ <int> ] ; final String routing = <str> . equals ( parts [ <int> ] ) ? null : parts [ <int> ] ; final int pre20ExpectedShardId = Integer . parseInt ( parts [ <int> ] ) ; final int currentExpectedShard = Integer . parseInt ( parts [ <int> ] ) ; OperationRouting operationRouting = new OperationRouting ( Settings . EMPTY , null ) ; for ( Version version : VersionUtils . allVersions ( ) ) { final Settings settings = settings ( version ) . build ( ) ; IndexMetaData indexMetaData = IndexMetaData . builder ( index ) . settings ( settings ) . numberOfShards ( numberOfShards ) . numberOfReplicas ( randomInt ( <int> ) ) . build ( ) ; MetaData . Builder metaData = MetaData . builder ( ) . put ( indexMetaData , false ) ; RoutingTable routingTable = RoutingTable . builder ( ) . addAsNew ( indexMetaData ) . build ( ) ; ClusterState clusterState = ClusterState . builder ( ClusterName . DEFAULT ) . metaData ( metaData ) . routingTable ( routingTable ) . build ( ) ; final int shardId = operationRouting . indexShards ( clusterState , index , type , id , routing ) . shardId ( ) . getId ( ) ; assertEquals ( currentExpectedShard , shardId ) ; } } } } } 

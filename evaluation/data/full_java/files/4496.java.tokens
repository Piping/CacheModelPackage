package org . eclipse . debug . internal . ui . views . breakpoints ; import java . text . DecimalFormat ; import java . text . ParsePosition ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . ILineBreakpoint ; import org . eclipse . debug . internal . core . IInternalDebugCoreConstants ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . jface . viewers . IBasicPropertyConstants ; import org . eclipse . jface . viewers . ILabelProvider ; import org . eclipse . jface . viewers . StructuredViewer ; import org . eclipse . jface . viewers . Viewer ; import org . eclipse . jface . viewers . ViewerComparator ; public class BreakpointsComparator extends ViewerComparator { @Override public boolean isSorterProperty ( Object element , String propertyId ) { return propertyId . equals ( IBasicPropertyConstants . P_TEXT ) ; } @Override public int compare ( Viewer viewer , Object e1 , Object e2 ) { if ( ! ( e1 instanceof IBreakpoint ) ) { return super . compare ( viewer , e1 , e2 ) ; } IBreakpoint b1 = ( IBreakpoint ) e1 ; IBreakpoint b2 = ( IBreakpoint ) e2 ; String modelId1 = b1 . getModelIdentifier ( ) ; String modelId2 = b2 . getModelIdentifier ( ) ; int result = modelId1 . compareTo ( modelId2 ) ; if ( result ! = <int> ) { return result ; } String type1 = IInternalDebugCoreConstants . EMPTY_STRING ; String type2 = IInternalDebugCoreConstants . EMPTY_STRING ; IMarker marker1 = b1 . getMarker ( ) ; if ( ! marker1 . exists ( ) ) { return <int> ; } try { type1 = marker1 . getType ( ) ; } catch ( CoreException ce ) { DebugUIPlugin . log ( ce ) ; } try { IMarker marker2 = b2 . getMarker ( ) ; if ( ! marker2 . exists ( ) ) { return <int> ; } type2 = marker2 . getType ( ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } result = type1 . compareTo ( type2 ) ; if ( result ! = <int> ) { return result ; } ILabelProvider lprov = ( ILabelProvider ) ( ( StructuredViewer ) viewer ) . getLabelProvider ( ) ; String name1 = lprov . getText ( e1 ) ; String name2 = lprov . getText ( e2 ) ; result = numericalStringCompare ( name1 , name2 ) ; if ( result ! = <int> ) { return result ; } int l1 = <int> ; int l2 = <int> ; if ( b1 instanceof ILineBreakpoint ) { try { l1 = ( ( ILineBreakpoint ) b1 ) . getLineNumber ( ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } if ( b2 instanceof ILineBreakpoint ) { try { l2 = ( ( ILineBreakpoint ) b2 ) . getLineNumber ( ) ; } catch ( CoreException e ) { DebugUIPlugin . log ( e ) ; } } if ( l1 ! = l2 ) { result = l1 - l2 ; } return result ; } int numericalStringCompare ( String n1 , String n2 ) { int index1 = <int> ; int index2 = <int> ; int digitLen = <int> ; for ( ; index1 < n1 . length ( ) & & index2 < n2 . length ( ) ; ) { char c1 = n1 . charAt ( index1 ) ; char c2 = n2 . charAt ( index2 ) ; if ( c1 ! = c2 ) { boolean isDig1 = Character . isDigit ( c1 ) ; boolean isDig2 = Character . isDigit ( c2 ) ; if ( isDig1 & & isDig2 | | digitLen > <int> & & ( isDig1 | | isDig2 ) ) { DecimalFormat format = new DecimalFormat ( ) ; ParsePosition p1 = new ParsePosition ( index1 - digitLen ) ; Number num1 = format . parse ( n1 , p1 ) ; ParsePosition p2 = new ParsePosition ( index2 - digitLen ) ; Number num2 = format . parse ( n2 , p2 ) ; if ( num1 = = null | | num2 = = null ) { return c1 - c2 ; } int cmp ; if ( num1 instanceof Long & & num2 instanceof Long ) { cmp = ( ( Long ) num1 ) . compareTo ( ( Long ) num2 ) ; } else { cmp = Double . compare ( num1 . doubleValue ( ) , num2 . doubleValue ( ) ) ; } if ( cmp ! = <int> ) { return cmp ; } index1 = p1 . getIndex ( ) ; index2 = p2 . getIndex ( ) ; digitLen = <int> ; continue ; } else { return c1 - c2 ; } } if ( Character . isDigit ( c1 ) ) { digitLen + + ; } else { digitLen = <int> ; } index1 + + ; index2 + + ; } return ( n1 . length ( ) - index1 ) - ( n2 . length ( ) - index2 ) ; } } 

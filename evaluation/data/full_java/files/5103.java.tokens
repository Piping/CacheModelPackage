package org . elasticsearch . action . admin . indices . delete ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . DestructiveOperations ; import org . elasticsearch . action . support . master . TransportMasterNodeAction ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . cluster . ClusterState ; import org . elasticsearch . cluster . block . ClusterBlockException ; import org . elasticsearch . cluster . block . ClusterBlockLevel ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . cluster . metadata . MetaDataDeleteIndexService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . node . settings . NodeSettingsService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportDeleteIndexAction extends TransportMasterNodeAction < DeleteIndexRequest , DeleteIndexResponse > { private final MetaDataDeleteIndexService deleteIndexService ; private final DestructiveOperations destructiveOperations ; @Inject public TransportDeleteIndexAction ( Settings settings , TransportService transportService , ClusterService clusterService , ThreadPool threadPool , MetaDataDeleteIndexService deleteIndexService , NodeSettingsService nodeSettingsService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver , DestructiveOperations destructiveOperations ) { super ( settings , DeleteIndexAction . NAME , transportService , clusterService , threadPool , actionFilters , indexNameExpressionResolver , DeleteIndexRequest : : new ) ; this . deleteIndexService = deleteIndexService ; this . destructiveOperations = destructiveOperations ; } @Override protected String executor ( ) { return ThreadPool . Names . SAME ; } @Override protected DeleteIndexResponse newResponse ( ) { return new DeleteIndexResponse ( ) ; } @Override protected void doExecute ( DeleteIndexRequest request , ActionListener < DeleteIndexResponse > listener ) { destructiveOperations . failDestructive ( request . indices ( ) ) ; super . doExecute ( request , listener ) ; } @Override protected ClusterBlockException checkBlock ( DeleteIndexRequest request , ClusterState state ) { return state . blocks ( ) . indicesBlockedException ( ClusterBlockLevel . METADATA_WRITE , indexNameExpressionResolver . concreteIndices ( state , request ) ) ; } @Override protected void masterOperation ( final DeleteIndexRequest request , final ClusterState state , final ActionListener < DeleteIndexResponse > listener ) { final String [ ] concreteIndices = indexNameExpressionResolver . concreteIndices ( state , request ) ; if ( concreteIndices . length = = <int> ) { listener . onResponse ( new DeleteIndexResponse ( true ) ) ; return ; } deleteIndexService . deleteIndices ( new MetaDataDeleteIndexService . Request ( concreteIndices ) . timeout ( request . timeout ( ) ) . masterTimeout ( request . masterNodeTimeout ( ) ) , new MetaDataDeleteIndexService . Listener ( ) { @Override public void onResponse ( MetaDataDeleteIndexService . Response response ) { listener . onResponse ( new DeleteIndexResponse ( response . acknowledged ( ) ) ) ; } @Override public void onFailure ( Throwable t ) { listener . onFailure ( t ) ; } } ) ; } } 

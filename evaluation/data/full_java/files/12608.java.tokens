package org . gradle . api . internal . artifacts . ivyservice . ivyresolve . strategy ; import com . google . common . collect . ImmutableMap ; import java . util . Comparator ; import java . util . Locale ; import java . util . Map ; class StaticVersionComparator implements Comparator < Version > { private static final Map < String , Integer > SPECIAL_MEANINGS = ImmutableMap . of ( <str> , new Integer ( - <int> ) , <str> , new Integer ( <int> ) , <str> , new Integer ( <int> ) ) ; public int compare ( Version version1 , Version version2 ) { if ( version1 . equals ( version2 ) ) { return <int> ; } String [ ] parts1 = version1 . getParts ( ) ; String [ ] parts2 = version2 . getParts ( ) ; int i = <int> ; for ( ; i < parts1 . length & & i < parts2 . length ; i + + ) { if ( parts1 [ i ] . equals ( parts2 [ i ] ) ) { continue ; } boolean is1Number = isNumber ( parts1 [ i ] ) ; boolean is2Number = isNumber ( parts2 [ i ] ) ; if ( is1Number & & ! is2Number ) { return <int> ; } if ( is2Number & & ! is1Number ) { return - <int> ; } if ( is1Number & & is2Number ) { return Long . valueOf ( parts1 [ i ] ) . compareTo ( Long . valueOf ( parts2 [ i ] ) ) ; } Integer sm1 = SPECIAL_MEANINGS . get ( parts1 [ i ] . toLowerCase ( Locale . US ) ) ; Integer sm2 = SPECIAL_MEANINGS . get ( parts2 [ i ] . toLowerCase ( Locale . US ) ) ; if ( sm1 ! = null ) { sm2 = sm2 = = null ? <int> : sm2 ; return sm1 - sm2 ; } if ( sm2 ! = null ) { return - sm2 ; } return parts1 [ i ] . compareTo ( parts2 [ i ] ) ; } if ( i < parts1 . length ) { return isNumber ( parts1 [ i ] ) ? <int> : - <int> ; } if ( i < parts2 . length ) { return isNumber ( parts2 [ i ] ) ? - <int> : <int> ; } return <int> ; } private boolean isNumber ( String str ) { return str . matches ( <str> ) ; } } 

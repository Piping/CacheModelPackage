package org . elasticsearch . rest . action . admin . cluster . repositories . get ; import org . elasticsearch . action . admin . cluster . repositories . get . GetRepositoriesRequest ; import org . elasticsearch . action . admin . cluster . repositories . get . GetRepositoriesResponse ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . metadata . RepositoriesMetaData ; import org . elasticsearch . cluster . metadata . RepositoryMetaData ; import org . elasticsearch . common . Strings ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . settings . SettingsFilter ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import org . elasticsearch . rest . action . support . RestBuilderListener ; import static org . elasticsearch . client . Requests . getRepositoryRequest ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestStatus . OK ; public class RestGetRepositoriesAction extends BaseRestHandler { private final SettingsFilter settingsFilter ; @Inject public RestGetRepositoriesAction ( Settings settings , RestController controller , Client client , SettingsFilter settingsFilter ) { super ( settings , controller , client ) ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( GET , <str> , this ) ; this . settingsFilter = settingsFilter ; } @Override public void handleRequest ( final RestRequest request , final RestChannel channel , final Client client ) { final String [ ] repositories = request . paramAsStringArray ( <str> , Strings . EMPTY_ARRAY ) ; GetRepositoriesRequest getRepositoriesRequest = getRepositoryRequest ( repositories ) ; getRepositoriesRequest . masterNodeTimeout ( request . paramAsTime ( <str> , getRepositoriesRequest . masterNodeTimeout ( ) ) ) ; getRepositoriesRequest . local ( request . paramAsBoolean ( <str> , getRepositoriesRequest . local ( ) ) ) ; settingsFilter . addFilterSettingParams ( request ) ; client . admin ( ) . cluster ( ) . getRepositories ( getRepositoriesRequest , new RestBuilderListener < GetRepositoriesResponse > ( channel ) { @Override public RestResponse buildResponse ( GetRepositoriesResponse response , XContentBuilder builder ) throws Exception { builder . startObject ( ) ; for ( RepositoryMetaData repositoryMetaData : response . repositories ( ) ) { RepositoriesMetaData . toXContent ( repositoryMetaData , builder , request ) ; } builder . endObject ( ) ; return new BytesRestResponse ( OK , builder ) ; } } ) ; } } 

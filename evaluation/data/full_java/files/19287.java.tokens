package io . netty . handler . codec . http . cors ; import io . netty . handler . codec . http . EmptyHttpHeaders ; import io . netty . handler . codec . http . HttpHeaderNames ; import io . netty . handler . codec . http . HttpHeaders ; import io . netty . handler . codec . http . HttpMethod ; import org . junit . Test ; import static io . netty . handler . codec . http . HttpHeadersTestUtils . of ; import static io . netty . handler . codec . http . cors . CorsConfig . withAnyOrigin ; import static io . netty . handler . codec . http . cors . CorsConfig . withOrigin ; import static io . netty . handler . codec . http . cors . CorsConfig . withOrigins ; import static org . hamcrest . CoreMatchers . equalTo ; import static org . hamcrest . CoreMatchers . hasItems ; import static org . hamcrest . CoreMatchers . is ; import static org . hamcrest . CoreMatchers . notNullValue ; import static org . hamcrest . MatcherAssert . assertThat ; public class CorsConfigTest { @Test public void disabled ( ) { final CorsConfig cors = withAnyOrigin ( ) . disable ( ) . build ( ) ; assertThat ( cors . isCorsSupportEnabled ( ) , is ( false ) ) ; } @Test public void anyOrigin ( ) { final CorsConfig cors = withAnyOrigin ( ) . build ( ) ; assertThat ( cors . isAnyOriginSupported ( ) , is ( true ) ) ; assertThat ( cors . origin ( ) , is ( <str> ) ) ; assertThat ( cors . origins ( ) . isEmpty ( ) , is ( true ) ) ; } @Test public void wildcardOrigin ( ) { final CorsConfig cors = withOrigin ( <str> ) . build ( ) ; assertThat ( cors . isAnyOriginSupported ( ) , is ( true ) ) ; assertThat ( cors . origin ( ) , equalTo ( <str> ) ) ; assertThat ( cors . origins ( ) . isEmpty ( ) , is ( true ) ) ; } @Test public void origin ( ) { final CorsConfig cors = withOrigin ( <str> ) . build ( ) ; assertThat ( cors . origin ( ) , is ( equalTo ( <str> ) ) ) ; assertThat ( cors . isAnyOriginSupported ( ) , is ( false ) ) ; } @Test public void origins ( ) { final String [ ] origins = { <str> , <str> } ; final CorsConfig cors = withOrigins ( origins ) . build ( ) ; assertThat ( cors . origins ( ) , hasItems ( origins ) ) ; assertThat ( cors . isAnyOriginSupported ( ) , is ( false ) ) ; } @Test public void exposeHeaders ( ) { final CorsConfig cors = withAnyOrigin ( ) . exposeHeaders ( <str> , <str> ) . build ( ) ; assertThat ( cors . exposedHeaders ( ) , hasItems ( <str> , <str> ) ) ; } @Test public void allowCredentials ( ) { final CorsConfig cors = withAnyOrigin ( ) . allowCredentials ( ) . build ( ) ; assertThat ( cors . isCredentialsAllowed ( ) , is ( true ) ) ; } @Test public void maxAge ( ) { final CorsConfig cors = withAnyOrigin ( ) . maxAge ( <int> ) . build ( ) ; assertThat ( cors . maxAge ( ) , is ( <int> ) ) ; } @Test public void requestMethods ( ) { final CorsConfig cors = withAnyOrigin ( ) . allowedRequestMethods ( HttpMethod . POST , HttpMethod . GET ) . build ( ) ; assertThat ( cors . allowedRequestMethods ( ) , hasItems ( HttpMethod . POST , HttpMethod . GET ) ) ; } @Test public void requestHeaders ( ) { final CorsConfig cors = withAnyOrigin ( ) . allowedRequestHeaders ( <str> , <str> ) . build ( ) ; assertThat ( cors . allowedRequestHeaders ( ) , hasItems ( <str> , <str> ) ) ; } @Test public void preflightResponseHeadersSingleValue ( ) { final CorsConfig cors = withAnyOrigin ( ) . preflightResponseHeader ( <str> , <str> ) . build ( ) ; assertThat ( cors . preflightResponseHeaders ( ) . get ( of ( <str> ) ) , equalTo ( <str> ) ) ; } @Test public void preflightResponseHeadersMultipleValues ( ) { final CorsConfig cors = withAnyOrigin ( ) . preflightResponseHeader ( <str> , <str> , <str> ) . build ( ) ; assertThat ( cors . preflightResponseHeaders ( ) . getAll ( of ( <str> ) ) , hasItems ( <str> , <str> ) ) ; } @Test public void defaultPreflightResponseHeaders ( ) { final CorsConfig cors = withAnyOrigin ( ) . build ( ) ; assertThat ( cors . preflightResponseHeaders ( ) . get ( HttpHeaderNames . DATE ) , is ( notNullValue ( ) ) ) ; assertThat ( cors . preflightResponseHeaders ( ) . get ( HttpHeaderNames . CONTENT_LENGTH ) , is ( <str> ) ) ; } @Test public void emptyPreflightResponseHeaders ( ) { final CorsConfig cors = withAnyOrigin ( ) . noPreflightResponseHeaders ( ) . build ( ) ; assertThat ( cors . preflightResponseHeaders ( ) , equalTo ( ( HttpHeaders ) EmptyHttpHeaders . INSTANCE ) ) ; } @Test ( expected = IllegalArgumentException . class ) public void shouldThrowIfValueIsNull ( ) { withOrigin ( <str> ) . preflightResponseHeader ( <str> , new Object [ ] { null } ) . build ( ) ; } @Test public void shortCurcuit ( ) { final CorsConfig cors = withOrigin ( <str> ) . shortCurcuit ( ) . build ( ) ; assertThat ( cors . isShortCurcuit ( ) , is ( true ) ) ; } } 

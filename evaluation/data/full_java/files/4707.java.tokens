package org . eclipse . debug . ui . actions ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . OutputStreamWriter ; import java . io . StringWriter ; import java . io . Writer ; import java . lang . reflect . InvocationTargetException ; import java . util . Map . Entry ; import org . eclipse . core . resources . IMarker ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IAdaptable ; import org . eclipse . core . runtime . IProgressMonitor ; import org . eclipse . core . runtime . SubMonitor ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . internal . ui . IInternalDebugUIConstants ; import org . eclipse . debug . internal . ui . importexport . breakpoints . IImportExportConstants ; import org . eclipse . debug . internal . ui . importexport . breakpoints . ImportExportMessages ; import org . eclipse . debug . ui . IDebugUIConstants ; import org . eclipse . jface . operation . IRunnableWithProgress ; import org . eclipse . ui . IMemento ; import org . eclipse . ui . IWorkingSet ; import org . eclipse . ui . IWorkingSetManager ; import org . eclipse . ui . PlatformUI ; import org . eclipse . ui . XMLMemento ; import com . ibm . icu . text . MessageFormat ; public class ExportBreakpointsOperation implements IRunnableWithProgress { private IBreakpoint [ ] fBreakpoints = null ; private String fFileName = null ; private StringWriter fWriter = null ; public ExportBreakpointsOperation ( IBreakpoint [ ] breakpoints , String fileName ) { fBreakpoints = breakpoints ; fFileName = fileName ; } public ExportBreakpointsOperation ( IBreakpoint [ ] breakpoints ) { fBreakpoints = breakpoints ; fWriter = new StringWriter ( ) ; } @Override public void run ( IProgressMonitor monitor ) throws InvocationTargetException { SubMonitor localmonitor = SubMonitor . convert ( monitor , ImportExportMessages . ExportOperation_0 , fBreakpoints . length ) ; XMLMemento memento = XMLMemento . createWriteRoot ( IImportExportConstants . IE_NODE_BREAKPOINTS ) ; try ( Writer writer = fWriter ; ) { for ( int i = <int> ; i < fBreakpoints . length ; i + + ) { if ( localmonitor . isCanceled ( ) ) { return ; } IBreakpoint breakpoint = fBreakpoints [ i ] ; IMarker marker = breakpoint . getMarker ( ) ; IMemento root = memento . createChild ( IImportExportConstants . IE_NODE_BREAKPOINT ) ; root . putString ( IImportExportConstants . IE_BP_ENABLED , Boolean . toString ( breakpoint . isEnabled ( ) ) ) ; root . putString ( IImportExportConstants . IE_BP_REGISTERED , Boolean . toString ( breakpoint . isRegistered ( ) ) ) ; root . putString ( IImportExportConstants . IE_BP_PERSISTANT , Boolean . toString ( breakpoint . isPersisted ( ) ) ) ; IResource resource = marker . getResource ( ) ; IMemento child = root . createChild ( IImportExportConstants . IE_NODE_RESOURCE ) ; child . putString ( IImportExportConstants . IE_NODE_PATH , resource . getFullPath ( ) . toPortableString ( ) ) ; child . putInteger ( IImportExportConstants . IE_NODE_TYPE , resource . getType ( ) ) ; root = root . createChild ( IImportExportConstants . IE_NODE_MARKER ) ; root . putString ( IImportExportConstants . IE_NODE_TYPE , marker . getType ( ) ) ; Object val = marker . getAttribute ( IMarker . LINE_NUMBER ) ; root . putString ( IMarker . LINE_NUMBER , ( val ! = null ) ? val . toString ( ) : null ) ; val = marker . getAttribute ( IImportExportConstants . CHARSTART ) ; root . putString ( IImportExportConstants . CHARSTART , ( val ! = null ) ? val . toString ( ) : null ) ; String value = null ; boolean wsattrib = false ; for ( Entry < String , Object > entry : marker . getAttributes ( ) . entrySet ( ) ) { String iterval = entry . getKey ( ) ; value = entry . getValue ( ) . toString ( ) ; if ( ! iterval . equals ( IMarker . LINE_NUMBER ) ) { child = root . createChild ( IImportExportConstants . IE_NODE_ATTRIB ) ; if ( iterval . equals ( IInternalDebugUIConstants . WORKING_SET_NAME ) ) { wsattrib = true ; value = getWorkingSetsAttribute ( breakpoint ) ; } child . putString ( IImportExportConstants . IE_NODE_NAME , iterval ) ; child . putString ( IImportExportConstants . IE_NODE_VALUE , value ) ; } } if ( ! wsattrib ) { child = root . createChild ( IImportExportConstants . IE_NODE_ATTRIB ) ; child . putString ( IImportExportConstants . IE_NODE_NAME , IInternalDebugUIConstants . WORKING_SET_NAME ) ; child . putString ( IImportExportConstants . IE_NODE_VALUE , getWorkingSetsAttribute ( breakpoint ) ) ; child = root . createChild ( IImportExportConstants . IE_NODE_ATTRIB ) ; child . putString ( IImportExportConstants . IE_NODE_NAME , IInternalDebugUIConstants . WORKING_SET_ID ) ; child . putString ( IImportExportConstants . IE_NODE_VALUE , IDebugUIConstants . BREAKPOINT_WORKINGSET_ID ) ; } localmonitor . worked ( <int> ) ; } if ( writer = = null ) { try ( Writer outWriter = new OutputStreamWriter ( new FileOutputStream ( fFileName ) , <str> ) ) { memento . save ( outWriter ) ; } } else { memento . save ( writer ) ; } } catch ( CoreException e ) { throw new InvocationTargetException ( e ) ; } catch ( IOException e ) { throw new InvocationTargetException ( e , MessageFormat . format ( <str> , new Object [ ] { fFileName } ) ) ; } finally { localmonitor . done ( ) ; } } private String getWorkingSetsAttribute ( IBreakpoint breakpoint ) { IWorkingSetManager mgr = PlatformUI . getWorkbench ( ) . getWorkingSetManager ( ) ; StringBuffer buffer = new StringBuffer ( ) ; IWorkingSet [ ] sets = mgr . getWorkingSets ( ) ; for ( int i = <int> ; i < sets . length ; i + + ) { if ( IDebugUIConstants . BREAKPOINT_WORKINGSET_ID . equals ( sets [ i ] . getId ( ) ) & & containsBreakpoint ( sets [ i ] , breakpoint ) ) { buffer . append ( IImportExportConstants . DELIMITER ) . append ( sets [ i ] . getName ( ) ) ; } } return buffer . toString ( ) ; } private boolean containsBreakpoint ( IWorkingSet set , IBreakpoint breakpoint ) { IAdaptable [ ] elements = set . getElements ( ) ; for ( int i = <int> ; i < elements . length ; i + + ) { if ( elements [ i ] . equals ( breakpoint ) ) { return true ; } } return false ; } public StringBuffer getBuffer ( ) { if ( fWriter ! = null ) { return fWriter . getBuffer ( ) ; } return null ; } } 

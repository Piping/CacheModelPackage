package org . gradle . performance . fixture ; import java . io . BufferedReader ; import java . io . IOException ; public class WaitingReader { private static final int FIFTY_KB = <int> ; private static final int EOF = - <int> ; private static final char NEW_LINE = <str> ; private final BufferedReader reader ; private final int timeoutMs ; private final int clockTick ; int retriedCount ; public WaitingReader ( BufferedReader reader ) { this ( reader , <int> , <int> ) ; } public WaitingReader ( BufferedReader reader , int timeoutMs , int clockTick ) { this . reader = reader ; this . timeoutMs = timeoutMs ; this . clockTick = clockTick ; } String readLine ( ) throws IOException { long upTo = System . currentTimeMillis ( ) + timeoutMs ; reader . mark ( FIFTY_KB ) ; int character = EOF ; while ( character ! = NEW_LINE ) { character = reader . read ( ) ; if ( character = = EOF ) { if ( System . currentTimeMillis ( ) > = upTo ) { break ; } try { Thread . sleep ( clockTick ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( e ) ; } retriedCount + + ; } } reader . reset ( ) ; String line = reader . readLine ( ) ; return line ; } } 

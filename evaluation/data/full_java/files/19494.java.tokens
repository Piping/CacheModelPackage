package io . netty . handler . codec . socks ; import io . netty . buffer . ByteBuf ; import io . netty . util . CharsetUtil ; import io . netty . util . NetUtil ; import java . net . IDN ; public final class SocksCmdResponse extends SocksResponse { private final SocksCmdStatus cmdStatus ; private final SocksAddressType addressType ; private final String host ; private final int port ; private static final byte [ ] DOMAIN_ZEROED = { <hex> } ; private static final byte [ ] IPv4_HOSTNAME_ZEROED = { <hex> , <hex> , <hex> , <hex> } ; private static final byte [ ] IPv6_HOSTNAME_ZEROED = { <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> , <hex> } ; public SocksCmdResponse ( SocksCmdStatus cmdStatus , SocksAddressType addressType ) { this ( cmdStatus , addressType , null , <int> ) ; } public SocksCmdResponse ( SocksCmdStatus cmdStatus , SocksAddressType addressType , String host , int port ) { super ( SocksResponseType . CMD ) ; if ( cmdStatus = = null ) { throw new NullPointerException ( <str> ) ; } if ( addressType = = null ) { throw new NullPointerException ( <str> ) ; } if ( host ! = null ) { switch ( addressType ) { case IPv4 : if ( ! NetUtil . isValidIpV4Address ( host ) ) { throw new IllegalArgumentException ( host + <str> ) ; } break ; case DOMAIN : if ( IDN . toASCII ( host ) . length ( ) > <int> ) { throw new IllegalArgumentException ( host + <str> + IDN . toASCII ( host ) + <str> ) ; } break ; case IPv6 : if ( ! NetUtil . isValidIpV6Address ( host ) ) { throw new IllegalArgumentException ( host + <str> ) ; } break ; case UNKNOWN : break ; } host = IDN . toASCII ( host ) ; } if ( port < <int> | | port > <int> ) { throw new IllegalArgumentException ( port + <str> ) ; } this . cmdStatus = cmdStatus ; this . addressType = addressType ; this . host = host ; this . port = port ; } public SocksCmdStatus cmdStatus ( ) { return cmdStatus ; } public SocksAddressType addressType ( ) { return addressType ; } public String host ( ) { if ( host ! = null ) { return IDN . toUnicode ( host ) ; } else { return null ; } } public int port ( ) { return port ; } @Override public void encodeAsByteBuf ( ByteBuf byteBuf ) { byteBuf . writeByte ( protocolVersion ( ) . byteValue ( ) ) ; byteBuf . writeByte ( cmdStatus . byteValue ( ) ) ; byteBuf . writeByte ( <hex> ) ; byteBuf . writeByte ( addressType . byteValue ( ) ) ; switch ( addressType ) { case IPv4 : { byte [ ] hostContent = host = = null ? IPv4_HOSTNAME_ZEROED : NetUtil . createByteArrayFromIpAddressString ( host ) ; byteBuf . writeBytes ( hostContent ) ; byteBuf . writeShort ( port ) ; break ; } case DOMAIN : { byte [ ] hostContent = host = = null ? DOMAIN_ZEROED : host . getBytes ( CharsetUtil . US_ASCII ) ; byteBuf . writeByte ( hostContent . length ) ; byteBuf . writeBytes ( hostContent ) ; byteBuf . writeShort ( port ) ; break ; } case IPv6 : { byte [ ] hostContent = host = = null ? IPv6_HOSTNAME_ZEROED : NetUtil . createByteArrayFromIpAddressString ( host ) ; byteBuf . writeBytes ( hostContent ) ; byteBuf . writeShort ( port ) ; break ; } } } } 

package io . netty . channel . epoll ; import io . netty . buffer . ByteBufAllocator ; import io . netty . channel . ChannelException ; import io . netty . channel . ChannelOption ; import io . netty . channel . DefaultChannelConfig ; import io . netty . channel . MessageSizeEstimator ; import io . netty . channel . RecvByteBufAllocator ; import java . io . IOException ; import java . util . Map ; public class EpollChannelConfig extends DefaultChannelConfig { final AbstractEpollChannel channel ; EpollChannelConfig ( AbstractEpollChannel channel ) { super ( channel ) ; this . channel = channel ; } @Override public Map < ChannelOption < ? > , Object > getOptions ( ) { return getOptions ( super . getOptions ( ) , EpollChannelOption . EPOLL_MODE ) ; } @SuppressWarnings ( <str> ) @Override public < T > T getOption ( ChannelOption < T > option ) { if ( option = = EpollChannelOption . EPOLL_MODE ) { return ( T ) getEpollMode ( ) ; } return super . getOption ( option ) ; } @Override public < T > boolean setOption ( ChannelOption < T > option , T value ) { validate ( option , value ) ; if ( option = = EpollChannelOption . EPOLL_MODE ) { setEpollMode ( ( EpollMode ) value ) ; } else { return super . setOption ( option , value ) ; } return true ; } @Override public EpollChannelConfig setConnectTimeoutMillis ( int connectTimeoutMillis ) { super . setConnectTimeoutMillis ( connectTimeoutMillis ) ; return this ; } @Override @Deprecated public EpollChannelConfig setMaxMessagesPerRead ( int maxMessagesPerRead ) { super . setMaxMessagesPerRead ( maxMessagesPerRead ) ; return this ; } @Override public EpollChannelConfig setWriteSpinCount ( int writeSpinCount ) { super . setWriteSpinCount ( writeSpinCount ) ; return this ; } @Override public EpollChannelConfig setAllocator ( ByteBufAllocator allocator ) { super . setAllocator ( allocator ) ; return this ; } @Override public EpollChannelConfig setRecvByteBufAllocator ( RecvByteBufAllocator allocator ) { super . setRecvByteBufAllocator ( allocator ) ; return this ; } @Override public EpollChannelConfig setAutoRead ( boolean autoRead ) { super . setAutoRead ( autoRead ) ; return this ; } @Override public EpollChannelConfig setWriteBufferHighWaterMark ( int writeBufferHighWaterMark ) { super . setWriteBufferHighWaterMark ( writeBufferHighWaterMark ) ; return this ; } @Override public EpollChannelConfig setWriteBufferLowWaterMark ( int writeBufferLowWaterMark ) { super . setWriteBufferLowWaterMark ( writeBufferLowWaterMark ) ; return this ; } @Override public EpollChannelConfig setMessageSizeEstimator ( MessageSizeEstimator estimator ) { super . setMessageSizeEstimator ( estimator ) ; return this ; } public EpollMode getEpollMode ( ) { return channel . isFlagSet ( Native . EPOLLET ) ? EpollMode . EDGE_TRIGGERED : EpollMode . LEVEL_TRIGGERED ; } public EpollChannelConfig setEpollMode ( EpollMode mode ) { if ( mode = = null ) { throw new NullPointerException ( <str> ) ; } try { switch ( mode ) { case EDGE_TRIGGERED : checkChannelNotRegistered ( ) ; channel . setFlag ( Native . EPOLLET ) ; break ; case LEVEL_TRIGGERED : checkChannelNotRegistered ( ) ; channel . clearFlag ( Native . EPOLLET ) ; break ; default : throw new Error ( ) ; } } catch ( IOException e ) { throw new ChannelException ( e ) ; } return this ; } private void checkChannelNotRegistered ( ) { if ( channel . isRegistered ( ) ) { throw new IllegalStateException ( <str> ) ; } } @Override protected final void autoReadCleared ( ) { channel . clearEpollIn ( ) ; } } 

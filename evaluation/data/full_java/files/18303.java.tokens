package com . badlogic . gdx . scenes . scene2d . utils ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input . Buttons ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . utils . TimeUtils ; public class ClickListener extends InputListener { static public float visualPressedDuration = <float> ; private float tapSquareSize = <int> , touchDownX = - <int> , touchDownY = - <int> ; private int pressedPointer = - <int> ; private int pressedButton = - <int> ; private int button ; private boolean pressed , over , cancelled ; private long visualPressedTime ; private long tapCountInterval = ( long ) ( <float> * <int> ) ; private int tapCount ; private long lastTapTime ; public ClickListener ( ) { } public ClickListener ( int button ) { this . button = button ; } public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { if ( pressed ) return false ; if ( pointer = = <int> & & this . button ! = - <int> & & button ! = this . button ) return false ; pressed = true ; pressedPointer = pointer ; pressedButton = button ; touchDownX = x ; touchDownY = y ; visualPressedTime = TimeUtils . millis ( ) + ( long ) ( visualPressedDuration * <int> ) ; return true ; } public void touchDragged ( InputEvent event , float x , float y , int pointer ) { if ( pointer ! = pressedPointer | | cancelled ) return ; pressed = isOver ( event . getListenerActor ( ) , x , y ) ; if ( pressed & & pointer = = <int> & & button ! = - <int> & & ! Gdx . input . isButtonPressed ( button ) ) pressed = false ; if ( ! pressed ) { invalidateTapSquare ( ) ; } } public void touchUp ( InputEvent event , float x , float y , int pointer , int button ) { if ( pointer = = pressedPointer ) { if ( ! cancelled ) { boolean touchUpOver = isOver ( event . getListenerActor ( ) , x , y ) ; if ( touchUpOver & & pointer = = <int> & & this . button ! = - <int> & & button ! = this . button ) touchUpOver = false ; if ( touchUpOver ) { long time = TimeUtils . nanoTime ( ) ; if ( time - lastTapTime > tapCountInterval ) tapCount = <int> ; tapCount + + ; lastTapTime = time ; clicked ( event , x , y ) ; } } pressed = false ; pressedPointer = - <int> ; pressedButton = - <int> ; cancelled = false ; } } public void enter ( InputEvent event , float x , float y , int pointer , Actor fromActor ) { if ( pointer = = - <int> & & ! cancelled ) over = true ; } public void exit ( InputEvent event , float x , float y , int pointer , Actor toActor ) { if ( pointer = = - <int> & & ! cancelled ) over = false ; } public void cancel ( ) { if ( pressedPointer = = - <int> ) return ; cancelled = true ; pressed = false ; } public void clicked ( InputEvent event , float x , float y ) { } public boolean isOver ( Actor actor , float x , float y ) { Actor hit = actor . hit ( x , y , true ) ; if ( hit = = null | | ! hit . isDescendantOf ( actor ) ) return inTapSquare ( x , y ) ; return true ; } public boolean inTapSquare ( float x , float y ) { if ( touchDownX = = - <int> & & touchDownY = = - <int> ) return false ; return Math . abs ( x - touchDownX ) < tapSquareSize & & Math . abs ( y - touchDownY ) < tapSquareSize ; } public boolean inTapSquare ( ) { return touchDownX ! = - <int> ; } public void invalidateTapSquare ( ) { touchDownX = - <int> ; touchDownY = - <int> ; } public boolean isPressed ( ) { return pressed ; } public boolean isVisualPressed ( ) { if ( pressed ) return true ; if ( visualPressedTime < = <int> ) return false ; if ( visualPressedTime > TimeUtils . millis ( ) ) return true ; visualPressedTime = <int> ; return false ; } public boolean isOver ( ) { return over | | pressed ; } public void setTapSquareSize ( float halfTapSquareSize ) { tapSquareSize = halfTapSquareSize ; } public float getTapSquareSize ( ) { return tapSquareSize ; } public void setTapCountInterval ( float tapCountInterval ) { this . tapCountInterval = ( long ) ( tapCountInterval * <int> ) ; } public int getTapCount ( ) { return tapCount ; } public float getTouchDownX ( ) { return touchDownX ; } public float getTouchDownY ( ) { return touchDownY ; } public int getPressedButton ( ) { return pressedButton ; } public int getPressedPointer ( ) { return pressedPointer ; } public int getButton ( ) { return button ; } public void setButton ( int button ) { this . button = button ; } } 

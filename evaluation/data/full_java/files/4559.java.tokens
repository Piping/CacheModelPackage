package org . eclipse . debug . internal . ui . views . memory ; import java . math . BigInteger ; import java . util . Enumeration ; import java . util . Hashtable ; import org . eclipse . core . runtime . SafeRunner ; import org . eclipse . debug . core . IMemoryBlockListener ; import org . eclipse . debug . core . model . IMemoryBlock ; import org . eclipse . debug . internal . ui . DebugUIPlugin ; import org . eclipse . debug . ui . memory . IMemoryRendering ; import org . eclipse . debug . ui . memory . IMemoryRenderingSynchronizationService ; import org . eclipse . jface . util . IPropertyChangeListener ; import org . eclipse . jface . util . PropertyChangeEvent ; import org . eclipse . swt . widgets . Display ; public class MemoryViewSynchronizationService implements IMemoryRenderingSynchronizationService , IMemoryBlockListener , IPropertyChangeListener { private static final int ENABLED = <int> ; private static final int ENABLING = <int> ; private static final int DISABLED = <int> ; private Hashtable < IMemoryBlock , SynchronizeInfo > fSynchronizeInfo ; private int fEnableState = ENABLED ; private Hashtable < IPropertyChangeListener , PropertyListener > fPropertyListeners ; private IMemoryRendering fLastChangedRendering ; private IMemoryRendering fSyncServiceProvider ; private static final boolean DEBUG_SYNC_SERVICE = false ; public MemoryViewSynchronizationService ( ) { fSynchronizeInfo = new Hashtable < IMemoryBlock , SynchronizeInfo > ( ) ; fPropertyListeners = new Hashtable < IPropertyChangeListener , PropertyListener > ( ) ; MemoryViewUtil . getMemoryBlockManager ( ) . addListener ( this ) ; } class PropertyListener { IPropertyChangeListener fListener ; String [ ] fFilters ; public PropertyListener ( IPropertyChangeListener listener , String [ ] properties ) { fListener = listener ; if ( properties ! = null ) { fFilters = properties ; } } public boolean isValidProperty ( String property ) { if ( fFilters = = null ) { return true ; } for ( int i = <int> ; i < fFilters . length ; i + + ) { if ( fFilters [ i ] . equals ( property ) ) { return true ; } } return false ; } public void setPropertyFilters ( String [ ] filters ) { fFilters = filters ; } public IPropertyChangeListener getListener ( ) { return fListener ; } } public Object getSynchronizedProperty ( IMemoryBlock memoryBlock , String propertyId ) { SynchronizeInfo info = fSynchronizeInfo . get ( memoryBlock ) ; if ( info ! = null ) { Object value = info . getProperty ( propertyId ) ; return value ; } return null ; } @Override public void memoryBlocksAdded ( IMemoryBlock [ ] memoryBlocks ) { } @Override public void memoryBlocksRemoved ( IMemoryBlock [ ] memoryBlocks ) { if ( fSynchronizeInfo = = null ) { return ; } for ( int i = <int> ; i < memoryBlocks . length ; i + + ) { IMemoryBlock memory = memoryBlocks [ i ] ; if ( fLastChangedRendering ! = null & & fLastChangedRendering . getMemoryBlock ( ) = = memory ) { fLastChangedRendering = null ; } if ( fSyncServiceProvider ! = null & & fSyncServiceProvider . getMemoryBlock ( ) = = memory ) { fSyncServiceProvider = null ; } SynchronizeInfo info = fSynchronizeInfo . get ( memory ) ; if ( info ! = null ) { info . delete ( ) ; fSynchronizeInfo . remove ( memory ) ; } } } public void shutdown ( ) { if ( fSynchronizeInfo ! = null ) { Enumeration < SynchronizeInfo > enumeration = fSynchronizeInfo . elements ( ) ; while ( enumeration . hasMoreElements ( ) ) { SynchronizeInfo info = enumeration . nextElement ( ) ; info . delete ( ) ; } fSynchronizeInfo . clear ( ) ; fSynchronizeInfo = null ; } MemoryViewUtil . getMemoryBlockManager ( ) . removeListener ( this ) ; } @Override public void addPropertyChangeListener ( IPropertyChangeListener listener , String [ ] properties ) { fPropertyListeners . put ( listener , new PropertyListener ( listener , properties ) ) ; } @Override public void removePropertyChangeListener ( IPropertyChangeListener listener ) { if ( fPropertyListeners . containsKey ( listener ) ) { fPropertyListeners . remove ( listener ) ; } } public void firePropertyChanged ( final PropertyChangeEvent evt ) { if ( fEnableState = = DISABLED ) { return ; } Display . getDefault ( ) . syncExec ( new Runnable ( ) { @Override public void run ( ) { if ( fSynchronizeInfo = = null ) { return ; } IMemoryRendering rendering = ( IMemoryRendering ) evt . getSource ( ) ; String propertyId = evt . getProperty ( ) ; SynchronizeInfo info = fSynchronizeInfo . get ( rendering . getMemoryBlock ( ) ) ; if ( info ! = null ) { Object value = info . getProperty ( propertyId ) ; if ( value ! = null ) { Enumeration < PropertyListener > enumeration = fPropertyListeners . elements ( ) ; while ( enumeration . hasMoreElements ( ) ) { PropertyListener listener = enumeration . nextElement ( ) ; IPropertyChangeListener origListener = listener . getListener ( ) ; if ( listener . isValidProperty ( propertyId ) ) { PropertyChangeNotifier notifier = new PropertyChangeNotifier ( origListener , evt ) ; SafeRunner . run ( notifier ) ; } } } } } } ) ; } @Override public Object getProperty ( IMemoryBlock block , String property ) { if ( ! isEnabled ( ) ) { return null ; } SynchronizeInfo info = fSynchronizeInfo . get ( block ) ; if ( info ! = null ) { return info . getProperty ( property ) ; } return null ; } @Override public void propertyChange ( PropertyChangeEvent event ) { if ( event = = null | | ! ( event . getSource ( ) instanceof IMemoryRendering ) ) { return ; } if ( fEnableState = = ENABLING ) { return ; } IMemoryRendering rendering = ( ( IMemoryRendering ) event . getSource ( ) ) ; IMemoryBlock memoryBlock = rendering . getMemoryBlock ( ) ; String propertyId = event . getProperty ( ) ; Object value = event . getNewValue ( ) ; if ( DEBUG_SYNC_SERVICE ) { DebugUIPlugin . trace ( <str> ) ; DebugUIPlugin . trace ( <str> + rendering ) ; DebugUIPlugin . trace ( <str> + propertyId ) ; DebugUIPlugin . trace ( <str> + value ) ; if ( value instanceof BigInteger ) { DebugUIPlugin . trace ( <str> + ( ( BigInteger ) value ) . toString ( <int> ) ) ; } } if ( memoryBlock = = null ) { return ; } if ( propertyId = = null ) { return ; } SynchronizeInfo info = fSynchronizeInfo . get ( memoryBlock ) ; if ( info = = null ) { info = new SynchronizeInfo ( memoryBlock ) ; fSynchronizeInfo . put ( memoryBlock , info ) ; } Object oldValue = info . getProperty ( propertyId ) ; if ( oldValue = = null ) { info . setProperty ( propertyId , value ) ; fLastChangedRendering = rendering ; firePropertyChanged ( event ) ; return ; } else if ( ! oldValue . equals ( value ) ) { info . setProperty ( propertyId , value ) ; fLastChangedRendering = rendering ; firePropertyChanged ( event ) ; } } public void setEnabled ( boolean enabled ) { if ( enabled & & fEnableState = = ENABLED ) { return ; } if ( ! enabled & & fEnableState = = DISABLED ) { return ; } try { if ( enabled ) { fEnableState = ENABLING ; if ( fLastChangedRendering ! = null ) { IMemoryBlock memBlock = fLastChangedRendering . getMemoryBlock ( ) ; SynchronizeInfo info = fSynchronizeInfo . get ( memBlock ) ; String [ ] ids = info . getPropertyIds ( ) ; for ( int i = <int> ; i < ids . length ; i + + ) { PropertyChangeEvent evt = new PropertyChangeEvent ( fLastChangedRendering , ids [ i ] , null , info . getProperty ( ids [ i ] ) ) ; firePropertyChanged ( evt ) ; } } } } finally { if ( enabled ) { fEnableState = ENABLED ; } else { fEnableState = DISABLED ; } } } public boolean isEnabled ( ) { return fEnableState = = ENABLED ; } @Override public void setSynchronizationProvider ( IMemoryRendering rendering ) { if ( DEBUG_SYNC_SERVICE ) { DebugUIPlugin . trace ( <str> + rendering ) ; } if ( fSyncServiceProvider ! = null ) { fSyncServiceProvider . removePropertyChangeListener ( this ) ; } if ( rendering ! = null ) { rendering . addPropertyChangeListener ( this ) ; } fSyncServiceProvider = rendering ; } @Override public IMemoryRendering getSynchronizationProvider ( ) { return fSyncServiceProvider ; } } 

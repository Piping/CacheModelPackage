package org . elasticsearch . action . indexedscripts . put ; import org . elasticsearch . action . ActionListener ; import org . elasticsearch . action . index . IndexResponse ; import org . elasticsearch . action . support . ActionFilters ; import org . elasticsearch . action . support . DelegatingActionListener ; import org . elasticsearch . action . support . HandledTransportAction ; import org . elasticsearch . cluster . metadata . IndexNameExpressionResolver ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . threadpool . ThreadPool ; import org . elasticsearch . transport . TransportService ; public class TransportPutIndexedScriptAction extends HandledTransportAction < PutIndexedScriptRequest , PutIndexedScriptResponse > { private final ScriptService scriptService ; @Inject public TransportPutIndexedScriptAction ( Settings settings , ThreadPool threadPool , ScriptService scriptService , TransportService transportService , ActionFilters actionFilters , IndexNameExpressionResolver indexNameExpressionResolver ) { super ( settings , PutIndexedScriptAction . NAME , threadPool , transportService , actionFilters , indexNameExpressionResolver , PutIndexedScriptRequest : : new ) ; this . scriptService = scriptService ; } @Override protected void doExecute ( final PutIndexedScriptRequest request , final ActionListener < PutIndexedScriptResponse > listener ) { scriptService . putScriptToIndex ( request , new DelegatingActionListener < IndexResponse , PutIndexedScriptResponse > ( listener ) { @Override public PutIndexedScriptResponse getDelegatedFromInstigator ( IndexResponse indexResponse ) { return new PutIndexedScriptResponse ( indexResponse . getType ( ) , indexResponse . getId ( ) , indexResponse . getVersion ( ) , indexResponse . isCreated ( ) ) ; } } ) ; } } 

package org . gradle . nativeplatform . fixtures ; import org . gradle . integtests . fixtures . AbstractMultiTestRunner ; import java . util . List ; public class SingleToolChainTestRunner extends AbstractMultiTestRunner { private static final String TOOLCHAINS_SYSPROP_NAME = <str> ; public SingleToolChainTestRunner ( Class < ? extends AbstractInstalledToolChainIntegrationSpec > target ) { super ( target ) ; } @Override protected void createExecutions ( ) { boolean enableAllToolChains = <str> . equals ( System . getProperty ( TOOLCHAINS_SYSPROP_NAME , <str> ) ) ; List < AvailableToolChains . ToolChainCandidate > toolChains = AvailableToolChains . getToolChains ( ) ; if ( enableAllToolChains ) { for ( AvailableToolChains . ToolChainCandidate toolChain : toolChains ) { if ( ! toolChain . isAvailable ( ) ) { throw new RuntimeException ( String . format ( <str> , toolChain . getDisplayName ( ) ) ) ; } add ( new ToolChainExecution ( toolChain , true ) ) ; } } else { boolean hasEnabled = false ; for ( AvailableToolChains . ToolChainCandidate toolChain : toolChains ) { if ( ! hasEnabled & & toolChain . isAvailable ( ) ) { add ( new ToolChainExecution ( toolChain , true ) ) ; hasEnabled = true ; } else { add ( new ToolChainExecution ( toolChain , false ) ) ; } } } } private static class ToolChainExecution extends Execution { private final AvailableToolChains . ToolChainCandidate toolChain ; private final boolean enabled ; public ToolChainExecution ( AvailableToolChains . ToolChainCandidate toolChain , boolean enabled ) { this . toolChain = toolChain ; this . enabled = enabled ; } @Override protected String getDisplayName ( ) { return toolChain . getDisplayName ( ) ; } @Override protected boolean isTestEnabled ( TestDetails testDetails ) { if ( enabled ) { RequiresInstalledToolChain toolChainRestriction = testDetails . getAnnotation ( RequiresInstalledToolChain . class ) ; return toolChainRestriction = = null | | toolChain . meets ( toolChainRestriction . value ( ) ) ; } return false ; } @Override protected void assertCanExecute ( ) { assert toolChain . isAvailable ( ) : String . format ( <str> , toolChain . getDisplayName ( ) ) ; } @Override protected void before ( ) { System . out . println ( String . format ( <str> , toolChain . getDisplayName ( ) ) ) ; AbstractInstalledToolChainIntegrationSpec . setToolChain ( ( AvailableToolChains . InstalledToolChain ) toolChain ) ; } } } 

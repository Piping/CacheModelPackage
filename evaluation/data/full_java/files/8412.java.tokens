package org . elasticsearch . rest . action . support ; import org . elasticsearch . common . Table ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . rest . FakeRestRequest ; import org . junit . Before ; import java . util . ArrayList ; import java . util . List ; import static org . elasticsearch . rest . action . support . RestTable . buildDisplayHeaders ; import static org . hamcrest . Matchers . contains ; import static org . hamcrest . Matchers . hasItem ; import static org . hamcrest . Matchers . not ; public class RestTableTests extends ESTestCase { private Table table = new Table ( ) ; private FakeRestRequest restRequest = new FakeRestRequest ( ) ; @Before public void setup ( ) { table . startHeaders ( ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . addCell ( <str> , <str> ) ; table . endHeaders ( ) ; } public void testThatDisplayHeadersSupportWildcards ( ) throws Exception { restRequest . params ( ) . put ( <str> , <str> ) ; List < RestTable . DisplayHeader > headers = buildDisplayHeaders ( table , restRequest ) ; List < String > headerNames = getHeaderNames ( headers ) ; assertThat ( headerNames , contains ( <str> , <str> , <str> , <str> ) ) ; assertThat ( headerNames , not ( hasItem ( <str> ) ) ) ; } public void testThatDisplayHeadersAreNotAddedTwice ( ) throws Exception { restRequest . params ( ) . put ( <str> , <str> ) ; List < RestTable . DisplayHeader > headers = buildDisplayHeaders ( table , restRequest ) ; List < String > headerNames = getHeaderNames ( headers ) ; assertThat ( headerNames , contains ( <str> , <str> , <str> , <str> ) ) ; assertThat ( headerNames , not ( hasItem ( <str> ) ) ) ; } private List < String > getHeaderNames ( List < RestTable . DisplayHeader > headers ) { List < String > headerNames = new ArrayList < > ( ) ; for ( RestTable . DisplayHeader header : headers ) { headerNames . add ( header . name ) ; } return headerNames ; } } 

package org . apache . lucene . util ; import org . elasticsearch . common . geo . GeoDistance ; import org . elasticsearch . common . unit . DistanceUnit ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . number . IsCloseTo . closeTo ; public class SloppyMathTests extends ESTestCase { public void testAccuracy ( ) { for ( double lat1 = - <int> ; lat1 < = <int> ; lat1 + = <int> ) { final double lon1 = randomLongitude ( ) ; for ( double i = - <int> ; i < = <int> ; i + = <int> ) { final double lon2 = i ; final double lat2 = randomLatitude ( ) ; assertAccurate ( lat1 , lon1 , lat2 , lon2 ) ; } } } public void testSloppyMath ( ) { testSloppyMath ( DistanceUnit . METERS , <float> , <int> , <int> , <int> ) ; testSloppyMath ( DistanceUnit . KILOMETERS , <float> , <int> , <int> , <int> ) ; testSloppyMath ( DistanceUnit . INCH , <float> , <int> , <int> , <int> ) ; testSloppyMath ( DistanceUnit . MILES , <float> , <int> , <int> , <int> ) ; } private static double maxError ( double distance ) { return distance / <float> ; } private void testSloppyMath ( DistanceUnit unit , double . . . deltaDeg ) { final double lat1 = randomLatitude ( ) ; final double lon1 = randomLongitude ( ) ; logger . info ( <str> , unit , lat1 , lon1 ) ; for ( int test = <int> ; test < deltaDeg . length ; test + + ) { for ( int i = <int> ; i < <int> ; i + + ) { final double lat2 = Math . max ( - <float> , Math . min ( + <float> , lat1 + ( random ( ) . nextDouble ( ) - <float> ) * <int> * deltaDeg [ test ] ) ) ; final double lon2 = lon1 + ( random ( ) . nextDouble ( ) - <float> ) * <int> * deltaDeg [ test ] ; final double accurate = GeoDistance . ARC . calculate ( lat1 , lon1 , lat2 , lon2 , unit ) ; final double dist = GeoDistance . SLOPPY_ARC . calculate ( lat1 , lon1 , lat2 , lon2 , unit ) ; assertThat ( <str> + lat1 + <str> + lon1 + <str> + lat2 + <str> + lon2 + <str> , dist , closeTo ( accurate , maxError ( accurate ) ) ) ; } } } private static void assertAccurate ( double lat1 , double lon1 , double lat2 , double lon2 ) { double accurate = GeoDistance . ARC . calculate ( lat1 , lon1 , lat2 , lon2 , DistanceUnit . METERS ) ; double sloppy = GeoDistance . SLOPPY_ARC . calculate ( lat1 , lon1 , lat2 , lon2 , DistanceUnit . METERS ) ; assertThat ( <str> + lat1 + <str> + lon1 + <str> + lat2 + <str> + lon2 + <str> , sloppy , closeTo ( accurate , maxError ( accurate ) ) ) ; } private static final double randomLatitude ( ) { return ( random ( ) . nextDouble ( ) - <float> ) * <float> ; } private static final double randomLongitude ( ) { return ( random ( ) . nextDouble ( ) - <float> ) * <float> ; } } 

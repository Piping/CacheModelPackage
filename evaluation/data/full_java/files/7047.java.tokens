package org . elasticsearch . rest . action . main ; import org . elasticsearch . Build ; import org . elasticsearch . Version ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . xcontent . XContentBuilder ; import org . elasticsearch . rest . * ; import static org . elasticsearch . rest . RestRequest . Method . GET ; import static org . elasticsearch . rest . RestRequest . Method . HEAD ; public class RestMainAction extends BaseRestHandler { private final Version version ; private final ClusterName clusterName ; private final ClusterService clusterService ; @Inject public RestMainAction ( Settings settings , Version version , RestController controller , ClusterName clusterName , Client client , ClusterService clusterService ) { super ( settings , controller , client ) ; this . version = version ; this . clusterName = clusterName ; this . clusterService = clusterService ; controller . registerHandler ( GET , <str> , this ) ; controller . registerHandler ( HEAD , <str> , this ) ; } @Override public void handleRequest ( final RestRequest request , RestChannel channel , final Client client ) throws Exception { RestStatus status = RestStatus . OK ; if ( clusterService . state ( ) . blocks ( ) . hasGlobalBlock ( RestStatus . SERVICE_UNAVAILABLE ) ) { status = RestStatus . SERVICE_UNAVAILABLE ; } if ( request . method ( ) = = RestRequest . Method . HEAD ) { channel . sendResponse ( new BytesRestResponse ( status ) ) ; return ; } XContentBuilder builder = channel . newBuilder ( ) ; if ( ! request . hasParam ( <str> ) ) { builder . prettyPrint ( ) . lfAtEnd ( ) ; } builder . startObject ( ) ; if ( settings . get ( <str> ) ! = null ) { builder . field ( <str> , settings . get ( <str> ) ) ; } builder . field ( <str> , clusterName . value ( ) ) ; builder . startObject ( <str> ) . field ( <str> , version . number ( ) ) . field ( <str> , Build . CURRENT . shortHash ( ) ) . field ( <str> , Build . CURRENT . date ( ) ) . field ( <str> , version . snapshot ) . field ( <str> , version . luceneVersion . toString ( ) ) . endObject ( ) ; builder . field ( <str> , <str> ) ; builder . endObject ( ) ; channel . sendResponse ( new BytesRestResponse ( status , builder ) ) ; } } 

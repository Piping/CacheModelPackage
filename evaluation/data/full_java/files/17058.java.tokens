package com . badlogic . gdx . physics . box2d . joints ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Joint ; import com . badlogic . gdx . physics . box2d . World ; public class MotorJoint extends Joint { private final float [ ] tmp = new float [ <int> ] ; private final Vector2 linearOffset = new Vector2 ( ) ; public MotorJoint ( World world , long addr ) { super ( world , addr ) ; } public Vector2 getLinearOffset ( ) { jniGetLinearOffset ( addr , tmp ) ; linearOffset . set ( tmp [ <int> ] , tmp [ <int> ] ) ; return linearOffset ; } private native void jniGetLinearOffset ( long addr , float [ ] linearOffset ) ; public void setLinearOffset ( Vector2 linearOffset ) { jniSetLinearOffset ( addr , linearOffset . x , linearOffset . y ) ; } private native void jniSetLinearOffset ( long addr , float linearOffsetX , float linearOffsetY ) ; public float getAngularOffset ( ) { return jniGetAngularOffset ( addr ) ; } private native float jniGetAngularOffset ( long addr ) ; public void setAngularOffset ( float angularOffset ) { jniSetAngularOffset ( addr , angularOffset ) ; } private native void jniSetAngularOffset ( long addr , float angularOffset ) ; public float getMaxForce ( ) { return jniGetMaxForce ( addr ) ; } private native float jniGetMaxForce ( long addr ) ; public void setMaxForce ( float maxForce ) { jniSetMaxForce ( addr , maxForce ) ; } private native void jniSetMaxForce ( long addr , float maxForce ) ; public float getMaxTorque ( ) { return jniGetMaxTorque ( addr ) ; } private native float jniGetMaxTorque ( long addr ) ; public void setMaxTorque ( float maxTorque ) { jniSetMaxTorque ( addr , maxTorque ) ; } private native void jniSetMaxTorque ( long addr , float maxTorque ) ; public float getCorrectionFactor ( ) { return jniGetCorrectionFactor ( addr ) ; } private native float jniGetCorrectionFactor ( long addr ) ; public void setCorrectionFactor ( float correctionFactor ) { jniSetCorrectionFactor ( addr , correctionFactor ) ; } private native void jniSetCorrectionFactor ( long addr , float correctionFactor ) ; } 

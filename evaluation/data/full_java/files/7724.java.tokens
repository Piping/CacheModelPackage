package org . elasticsearch . action . admin . cluster . tasks ; import org . elasticsearch . test . ESIntegTestCase ; import org . elasticsearch . test . ESIntegTestCase . ClusterScope ; import java . util . Arrays ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_METADATA ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_READ ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_BLOCKS_WRITE ; import static org . elasticsearch . cluster . metadata . IndexMetaData . SETTING_READ_ONLY ; @ClusterScope ( scope = ESIntegTestCase . Scope . TEST ) public class PendingTasksBlocksIT extends ESIntegTestCase { public void testPendingTasksWithBlocks ( ) { createIndex ( <str> ) ; ensureGreen ( <str> ) ; for ( String blockSetting : Arrays . asList ( SETTING_BLOCKS_READ , SETTING_BLOCKS_WRITE , SETTING_READ_ONLY , SETTING_BLOCKS_METADATA ) ) { try { enableIndexBlock ( <str> , blockSetting ) ; PendingClusterTasksResponse response = client ( ) . admin ( ) . cluster ( ) . preparePendingClusterTasks ( ) . execute ( ) . actionGet ( ) ; assertNotNull ( response . getPendingTasks ( ) ) ; } finally { disableIndexBlock ( <str> , blockSetting ) ; } } try { setClusterReadOnly ( true ) ; PendingClusterTasksResponse response = client ( ) . admin ( ) . cluster ( ) . preparePendingClusterTasks ( ) . execute ( ) . actionGet ( ) ; assertNotNull ( response . getPendingTasks ( ) ) ; } finally { setClusterReadOnly ( false ) ; } } } 

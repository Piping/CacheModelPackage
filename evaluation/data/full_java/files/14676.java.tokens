package org . gradle . language . base . internal . resolve ; import org . gradle . api . artifacts . component . LibraryBinaryIdentifier ; import org . gradle . api . internal . artifacts . ResolveContext ; import org . gradle . api . internal . artifacts . configurations . ResolutionStrategyInternal ; import org . gradle . api . internal . artifacts . ivyservice . resolutionstrategy . DefaultResolutionStrategy ; import org . gradle . internal . component . local . model . DefaultLibraryBinaryIdentifier ; import org . gradle . internal . component . model . ComponentResolveMetaData ; import org . gradle . language . base . LanguageSourceSet ; import org . gradle . language . base . internal . model . VariantsMetaData ; import org . gradle . platform . base . DependencySpec ; import static org . gradle . language . base . internal . model . DefaultLibraryLocalComponentMetaData . newDefaultLibraryLocalComponentMetadata ; public class DependentSourceSetResolveContext implements ResolveContext { private final LibraryBinaryIdentifier libraryBinaryIdentifier ; private final LanguageSourceSet sourceSet ; private final ResolutionStrategyInternal resolutionStrategy = new DefaultResolutionStrategy ( ) ; private final VariantsMetaData variants ; private final Iterable < DependencySpec > dependencies ; public DependentSourceSetResolveContext ( LibraryBinaryIdentifier libraryBinaryIdentifier , LanguageSourceSet sourceSet , VariantsMetaData variants , Iterable < DependencySpec > dependencies ) { this . libraryBinaryIdentifier = libraryBinaryIdentifier ; this . sourceSet = sourceSet ; this . variants = variants ; this . dependencies = dependencies ; } @Override public String getName ( ) { return DefaultLibraryBinaryIdentifier . CONFIGURATION_API ; } @Override public String getDisplayName ( ) { return sourceSet . getDisplayName ( ) ; } public VariantsMetaData getVariants ( ) { return variants ; } @Override public ResolutionStrategyInternal getResolutionStrategy ( ) { return resolutionStrategy ; } @Override public ComponentResolveMetaData toRootComponentMetaData ( ) { return newDefaultLibraryLocalComponentMetadata ( libraryBinaryIdentifier , sourceSet . getBuildDependencies ( ) , dependencies , libraryBinaryIdentifier . getProjectPath ( ) ) ; } } 

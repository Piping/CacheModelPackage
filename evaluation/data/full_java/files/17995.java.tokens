package com . badlogic . gdx . graphics . g3d . attributes ; import com . badlogic . gdx . graphics . g3d . Attribute ; import com . badlogic . gdx . graphics . g3d . Shader ; import com . badlogic . gdx . graphics . g3d . environment . DirectionalLight ; import com . badlogic . gdx . utils . Array ; public class DirectionalLightsAttribute extends Attribute { public final static String Alias = <str> ; public final static long Type = register ( Alias ) ; public final static boolean is ( final long mask ) { return ( mask & Type ) = = mask ; } public final Array < DirectionalLight > lights ; public DirectionalLightsAttribute ( ) { super ( Type ) ; lights = new Array < DirectionalLight > ( <int> ) ; } public DirectionalLightsAttribute ( final DirectionalLightsAttribute copyFrom ) { this ( ) ; lights . addAll ( copyFrom . lights ) ; } @Override public DirectionalLightsAttribute copy ( ) { return new DirectionalLightsAttribute ( this ) ; } @Override public int hashCode ( ) { int result = super . hashCode ( ) ; for ( DirectionalLight light : lights ) result = <int> * result + ( light = = null ? <int> : light . hashCode ( ) ) ; return result ; } @Override public int compareTo ( Attribute o ) { if ( type ! = o . type ) return type < o . type ? - <int> : <int> ; return <int> ; } } 

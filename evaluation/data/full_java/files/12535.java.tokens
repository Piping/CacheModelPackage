package org . gradle . api . internal . artifacts . ivyservice . dependencysubstitution ; import org . gradle . api . artifacts . component . ComponentSelector ; import org . gradle . internal . component . external . model . DefaultModuleComponentSelector ; import org . gradle . internal . exceptions . DiagnosticsVisitor ; import org . gradle . internal . typeconversion . TypedNotationConverter ; import org . gradle . internal . typeconversion . UnsupportedNotationException ; import org . gradle . util . GUtil ; import static org . gradle . api . internal . notations . ModuleIdentifierNotationConverter . validate ; class ModuleSelectorStringNotationConverter extends TypedNotationConverter < String , ComponentSelector > { public ModuleSelectorStringNotationConverter ( ) { super ( String . class ) ; } protected ComponentSelector parseType ( String notation ) { assert notation ! = null ; String [ ] split = notation . split ( <str> ) ; if ( split . length < <int> | | split . length > <int> ) { throw new UnsupportedNotationException ( notation ) ; } String group = validate ( split [ <int> ] . trim ( ) , notation ) ; String name = validate ( split [ <int> ] . trim ( ) , notation ) ; if ( split . length = = <int> ) { return new UnversionedModuleComponentSelector ( group , name ) ; } String version = split [ <int> ] . trim ( ) ; if ( ! GUtil . isTrue ( version ) ) { throw new UnsupportedNotationException ( notation ) ; } return DefaultModuleComponentSelector . newSelector ( group , name , version ) ; } @Override public void describe ( DiagnosticsVisitor visitor ) { visitor . candidate ( <str> ) . example ( <str> ) ; visitor . candidate ( <str> ) . example ( <str> ) ; } } 

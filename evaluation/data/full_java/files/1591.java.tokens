package org . apache . cassandra . locator ; import java . net . InetAddress ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import org . apache . commons . lang3 . StringUtils ; import org . junit . BeforeClass ; import org . junit . Test ; import org . apache . cassandra . SchemaLoader ; import org . apache . cassandra . db . Keyspace ; import org . apache . cassandra . dht . RandomPartitioner . BigIntegerToken ; import org . apache . cassandra . dht . Token ; import org . apache . cassandra . exceptions . ConfigurationException ; import org . apache . cassandra . schema . KeyspaceParams ; public class ReplicationStrategyEndpointCacheTest { private TokenMetadata tmd ; private Token searchToken ; private AbstractReplicationStrategy strategy ; public static final String KEYSPACE = <str> ; @BeforeClass public static void defineSchema ( ) throws Exception { SchemaLoader . prepareServer ( ) ; SchemaLoader . createKeyspace ( KEYSPACE , KeyspaceParams . simple ( <int> ) ) ; } public void setup ( Class stratClass , Map < String , String > strategyOptions ) throws Exception { tmd = new TokenMetadata ( ) ; searchToken = new BigIntegerToken ( String . valueOf ( <int> ) ) ; strategy = getStrategyWithNewTokenMetadata ( Keyspace . open ( KEYSPACE ) . getReplicationStrategy ( ) , tmd ) ; tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( <int> ) ) , InetAddress . getByName ( <str> ) ) ; tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( <int> ) ) , InetAddress . getByName ( <str> ) ) ; tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( <int> ) ) , InetAddress . getByName ( <str> ) ) ; tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( <int> ) ) , InetAddress . getByName ( <str> ) ) ; tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( <int> ) ) , InetAddress . getByName ( <str> ) ) ; tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( <int> ) ) , InetAddress . getByName ( <str> ) ) ; tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( <int> ) ) , InetAddress . getByName ( <str> ) ) ; } @Test public void testEndpointsWereCached ( ) throws Exception { runEndpointsWereCachedTest ( FakeSimpleStrategy . class , null ) ; runEndpointsWereCachedTest ( FakeOldNetworkTopologyStrategy . class , null ) ; runEndpointsWereCachedTest ( FakeNetworkTopologyStrategy . class , new HashMap < String , String > ( ) ) ; } public void runEndpointsWereCachedTest ( Class stratClass , Map < String , String > configOptions ) throws Exception { setup ( stratClass , configOptions ) ; assert strategy . getNaturalEndpoints ( searchToken ) . equals ( strategy . getNaturalEndpoints ( searchToken ) ) ; } @Test public void testCacheRespectsTokenChanges ( ) throws Exception { runCacheRespectsTokenChangesTest ( SimpleStrategy . class , null ) ; runCacheRespectsTokenChangesTest ( OldNetworkTopologyStrategy . class , null ) ; runCacheRespectsTokenChangesTest ( NetworkTopologyStrategy . class , new HashMap < String , String > ( ) ) ; } public void runCacheRespectsTokenChangesTest ( Class stratClass , Map < String , String > configOptions ) throws Exception { setup ( stratClass , configOptions ) ; ArrayList < InetAddress > initial ; ArrayList < InetAddress > endpoints ; endpoints = strategy . getNaturalEndpoints ( searchToken ) ; assert endpoints . size ( ) = = <int> : StringUtils . join ( endpoints , <str> ) ; initial = strategy . getNaturalEndpoints ( searchToken ) ; tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( <int> ) ) , InetAddress . getByName ( <str> ) ) ; endpoints = strategy . getNaturalEndpoints ( searchToken ) ; assert endpoints . size ( ) = = <int> : StringUtils . join ( endpoints , <str> ) ; assert ! endpoints . equals ( initial ) ; initial = strategy . getNaturalEndpoints ( searchToken ) ; tmd . removeEndpoint ( InetAddress . getByName ( <str> ) ) ; endpoints = strategy . getNaturalEndpoints ( searchToken ) ; assert endpoints . size ( ) = = <int> : StringUtils . join ( endpoints , <str> ) ; assert ! endpoints . contains ( InetAddress . getByName ( <str> ) ) ; assert ! endpoints . equals ( initial ) ; initial = strategy . getNaturalEndpoints ( searchToken ) ; tmd . updateNormalToken ( new BigIntegerToken ( String . valueOf ( <int> ) ) , InetAddress . getByName ( <str> ) ) ; endpoints = strategy . getNaturalEndpoints ( searchToken ) ; assert endpoints . size ( ) = = <int> : StringUtils . join ( endpoints , <str> ) ; assert ! endpoints . equals ( initial ) ; } protected static class FakeSimpleStrategy extends SimpleStrategy { private boolean called = false ; public FakeSimpleStrategy ( String keyspaceName , TokenMetadata tokenMetadata , IEndpointSnitch snitch , Map < String , String > configOptions ) { super ( keyspaceName , tokenMetadata , snitch , configOptions ) ; } public List < InetAddress > calculateNaturalEndpoints ( Token token , TokenMetadata metadata ) { assert ! called : <str> ; called = true ; return super . calculateNaturalEndpoints ( token , metadata ) ; } } protected static class FakeOldNetworkTopologyStrategy extends OldNetworkTopologyStrategy { private boolean called = false ; public FakeOldNetworkTopologyStrategy ( String keyspaceName , TokenMetadata tokenMetadata , IEndpointSnitch snitch , Map < String , String > configOptions ) { super ( keyspaceName , tokenMetadata , snitch , configOptions ) ; } public List < InetAddress > calculateNaturalEndpoints ( Token token , TokenMetadata metadata ) { assert ! called : <str> ; called = true ; return super . calculateNaturalEndpoints ( token , metadata ) ; } } protected static class FakeNetworkTopologyStrategy extends NetworkTopologyStrategy { private boolean called = false ; public FakeNetworkTopologyStrategy ( String keyspaceName , TokenMetadata tokenMetadata , IEndpointSnitch snitch , Map < String , String > configOptions ) throws ConfigurationException { super ( keyspaceName , tokenMetadata , snitch , configOptions ) ; } public List < InetAddress > calculateNaturalEndpoints ( Token token , TokenMetadata metadata ) { assert ! called : <str> ; called = true ; return super . calculateNaturalEndpoints ( token , metadata ) ; } } private AbstractReplicationStrategy getStrategyWithNewTokenMetadata ( AbstractReplicationStrategy strategy , TokenMetadata newTmd ) throws ConfigurationException { return AbstractReplicationStrategy . createReplicationStrategy ( strategy . keyspaceName , AbstractReplicationStrategy . getClass ( strategy . getClass ( ) . getName ( ) ) , newTmd , strategy . snitch , strategy . configOptions ) ; } } 

package org . elasticsearch . index ; import org . elasticsearch . common . lucene . uid . Versions ; import org . elasticsearch . test . ESTestCase ; import static org . hamcrest . Matchers . equalTo ; public class VersionTypeTests extends ESTestCase { public void testInternalVersionConflict ( ) throws Exception { assertFalse ( VersionType . INTERNAL . isVersionConflictForWrites ( <int> , Versions . MATCH_ANY , randomBoolean ( ) ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForReads ( <int> , Versions . MATCH_ANY ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForWrites ( Versions . NOT_SET , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForReads ( Versions . NOT_SET , <int> ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForWrites ( Versions . NOT_SET , Versions . MATCH_ANY , randomBoolean ( ) ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForReads ( Versions . NOT_SET , Versions . MATCH_ANY ) ) ; assertTrue ( VersionType . INTERNAL . isVersionConflictForWrites ( Versions . NOT_FOUND , <int> , randomBoolean ( ) ) ) ; assertTrue ( VersionType . INTERNAL . isVersionConflictForReads ( Versions . NOT_FOUND , <int> ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForWrites ( Versions . NOT_FOUND , Versions . MATCH_ANY , randomBoolean ( ) ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForReads ( Versions . NOT_FOUND , Versions . MATCH_ANY ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForWrites ( Versions . NOT_FOUND , Versions . MATCH_DELETED , true ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForWrites ( <int> , Versions . MATCH_DELETED , true ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . INTERNAL . isVersionConflictForReads ( <int> , <int> ) ) ; assertTrue ( VersionType . INTERNAL . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertTrue ( VersionType . INTERNAL . isVersionConflictForReads ( <int> , <int> ) ) ; assertTrue ( VersionType . INTERNAL . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertTrue ( VersionType . INTERNAL . isVersionConflictForReads ( <int> , <int> ) ) ; } public void testVersionValidation ( ) { assertTrue ( VersionType . EXTERNAL . validateVersionForWrites ( randomIntBetween ( <int> , Integer . MAX_VALUE ) ) ) ; assertFalse ( VersionType . EXTERNAL . validateVersionForWrites ( Versions . MATCH_ANY ) ) ; assertFalse ( VersionType . EXTERNAL . validateVersionForWrites ( randomIntBetween ( Integer . MIN_VALUE , <int> ) ) ) ; assertTrue ( VersionType . EXTERNAL . validateVersionForReads ( Versions . MATCH_ANY ) ) ; assertTrue ( VersionType . EXTERNAL . validateVersionForReads ( randomIntBetween ( <int> , Integer . MAX_VALUE ) ) ) ; assertFalse ( VersionType . EXTERNAL . validateVersionForReads ( randomIntBetween ( Integer . MIN_VALUE , - <int> ) ) ) ; assertTrue ( VersionType . EXTERNAL_GTE . validateVersionForWrites ( randomIntBetween ( <int> , Integer . MAX_VALUE ) ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . validateVersionForWrites ( Versions . MATCH_ANY ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . validateVersionForWrites ( randomIntBetween ( Integer . MIN_VALUE , <int> ) ) ) ; assertTrue ( VersionType . EXTERNAL_GTE . validateVersionForReads ( Versions . MATCH_ANY ) ) ; assertTrue ( VersionType . EXTERNAL_GTE . validateVersionForReads ( randomIntBetween ( <int> , Integer . MAX_VALUE ) ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . validateVersionForReads ( randomIntBetween ( Integer . MIN_VALUE , - <int> ) ) ) ; assertTrue ( VersionType . FORCE . validateVersionForWrites ( randomIntBetween ( <int> , Integer . MAX_VALUE ) ) ) ; assertFalse ( VersionType . FORCE . validateVersionForWrites ( Versions . MATCH_ANY ) ) ; assertFalse ( VersionType . FORCE . validateVersionForWrites ( randomIntBetween ( Integer . MIN_VALUE , <int> ) ) ) ; assertTrue ( VersionType . FORCE . validateVersionForReads ( Versions . MATCH_ANY ) ) ; assertTrue ( VersionType . FORCE . validateVersionForReads ( randomIntBetween ( <int> , Integer . MAX_VALUE ) ) ) ; assertFalse ( VersionType . FORCE . validateVersionForReads ( randomIntBetween ( Integer . MIN_VALUE , - <int> ) ) ) ; assertTrue ( VersionType . INTERNAL . validateVersionForWrites ( randomIntBetween ( <int> , Integer . MAX_VALUE ) ) ) ; assertTrue ( VersionType . INTERNAL . validateVersionForWrites ( Versions . MATCH_ANY ) ) ; assertFalse ( VersionType . INTERNAL . validateVersionForWrites ( randomIntBetween ( Integer . MIN_VALUE , <int> ) ) ) ; assertTrue ( VersionType . INTERNAL . validateVersionForReads ( Versions . MATCH_ANY ) ) ; assertTrue ( VersionType . INTERNAL . validateVersionForReads ( randomIntBetween ( <int> , Integer . MAX_VALUE ) ) ) ; assertFalse ( VersionType . INTERNAL . validateVersionForReads ( randomIntBetween ( Integer . MIN_VALUE , - <int> ) ) ) ; } public void testExternalVersionConflict ( ) throws Exception { assertFalse ( VersionType . EXTERNAL . isVersionConflictForWrites ( Versions . NOT_FOUND , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL . isVersionConflictForWrites ( Versions . NOT_SET , <int> , randomBoolean ( ) ) ) ; assertTrue ( VersionType . EXTERNAL . isVersionConflictForWrites ( <int> , Versions . MATCH_ANY , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL . isVersionConflictForWrites ( Versions . NOT_FOUND , Versions . NOT_FOUND , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL . isVersionConflictForWrites ( Versions . NOT_FOUND , <int> , randomBoolean ( ) ) ) ; assertTrue ( VersionType . EXTERNAL . isVersionConflictForReads ( Versions . NOT_FOUND , Versions . NOT_FOUND ) ) ; assertTrue ( VersionType . EXTERNAL . isVersionConflictForReads ( Versions . NOT_FOUND , <int> ) ) ; assertFalse ( VersionType . EXTERNAL . isVersionConflictForReads ( Versions . NOT_FOUND , Versions . MATCH_ANY ) ) ; assertTrue ( VersionType . EXTERNAL . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertTrue ( VersionType . EXTERNAL . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL . isVersionConflictForReads ( <int> , <int> ) ) ; assertTrue ( VersionType . EXTERNAL . isVersionConflictForReads ( <int> , <int> ) ) ; assertTrue ( VersionType . EXTERNAL . isVersionConflictForReads ( <int> , <int> ) ) ; assertFalse ( VersionType . EXTERNAL . isVersionConflictForReads ( <int> , Versions . MATCH_ANY ) ) ; } public void testExternalGTEVersionConflict ( ) throws Exception { assertFalse ( VersionType . EXTERNAL_GTE . isVersionConflictForWrites ( Versions . NOT_FOUND , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . isVersionConflictForWrites ( Versions . NOT_SET , <int> , randomBoolean ( ) ) ) ; assertTrue ( VersionType . EXTERNAL_GTE . isVersionConflictForWrites ( <int> , Versions . MATCH_ANY , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . isVersionConflictForWrites ( Versions . NOT_FOUND , Versions . NOT_FOUND , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . isVersionConflictForWrites ( Versions . NOT_FOUND , <int> , randomBoolean ( ) ) ) ; assertTrue ( VersionType . EXTERNAL_GTE . isVersionConflictForReads ( Versions . NOT_FOUND , Versions . NOT_FOUND ) ) ; assertTrue ( VersionType . EXTERNAL_GTE . isVersionConflictForReads ( Versions . NOT_FOUND , <int> ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . isVersionConflictForReads ( Versions . NOT_FOUND , Versions . MATCH_ANY ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertTrue ( VersionType . EXTERNAL_GTE . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . isVersionConflictForReads ( <int> , <int> ) ) ; assertTrue ( VersionType . EXTERNAL_GTE . isVersionConflictForReads ( <int> , <int> ) ) ; assertTrue ( VersionType . EXTERNAL_GTE . isVersionConflictForReads ( <int> , <int> ) ) ; assertFalse ( VersionType . EXTERNAL_GTE . isVersionConflictForReads ( <int> , Versions . MATCH_ANY ) ) ; } public void testForceVersionConflict ( ) throws Exception { assertFalse ( VersionType . FORCE . isVersionConflictForWrites ( Versions . NOT_FOUND , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForWrites ( Versions . NOT_SET , <int> , randomBoolean ( ) ) ) ; try { VersionType . FORCE . isVersionConflictForWrites ( <int> , Versions . MATCH_ANY , randomBoolean ( ) ) ; fail ( ) ; } catch ( IllegalStateException e ) { } assertFalse ( VersionType . FORCE . isVersionConflictForWrites ( Versions . NOT_FOUND , Versions . NOT_FOUND , randomBoolean ( ) ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForWrites ( Versions . NOT_FOUND , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForReads ( Versions . NOT_FOUND , Versions . NOT_FOUND ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForReads ( Versions . NOT_FOUND , <int> ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForReads ( Versions . NOT_FOUND , Versions . MATCH_ANY ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForWrites ( <int> , <int> , randomBoolean ( ) ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForReads ( <int> , <int> ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForReads ( <int> , <int> ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForReads ( <int> , <int> ) ) ; assertFalse ( VersionType . FORCE . isVersionConflictForReads ( <int> , Versions . MATCH_ANY ) ) ; } public void testUpdateVersion ( ) { assertThat ( VersionType . INTERNAL . updateVersion ( Versions . NOT_SET , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . INTERNAL . updateVersion ( Versions . NOT_FOUND , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . INTERNAL . updateVersion ( <int> , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . INTERNAL . updateVersion ( <int> , Versions . MATCH_ANY ) , equalTo ( <int> ) ) ; assertThat ( VersionType . EXTERNAL . updateVersion ( Versions . NOT_SET , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . EXTERNAL . updateVersion ( Versions . NOT_FOUND , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . EXTERNAL . updateVersion ( <int> , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . EXTERNAL_GTE . updateVersion ( Versions . NOT_SET , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . EXTERNAL_GTE . updateVersion ( Versions . NOT_FOUND , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . EXTERNAL_GTE . updateVersion ( <int> , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . EXTERNAL_GTE . updateVersion ( <int> , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . FORCE . updateVersion ( Versions . NOT_SET , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . FORCE . updateVersion ( Versions . NOT_FOUND , <int> ) , equalTo ( <int> ) ) ; assertThat ( VersionType . FORCE . updateVersion ( <int> , <int> ) , equalTo ( <int> ) ) ; } } 

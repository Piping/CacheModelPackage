package org . gradle . gradleplugin . foundation . settings ; import org . dom4j . Element ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class DOM4JSettingsNode implements SettingsNode { public static final String TAG_NAME = <str> ; public static final String NAME_ATTRIBUTE = <str> ; public static final String VALUE_ATTRIBUTE = <str> ; private Element element ; public DOM4JSettingsNode ( Element element ) { this . element = element ; } public Element getElement ( ) { return element ; } public void setName ( String name ) { element . addAttribute ( NAME_ATTRIBUTE , name ) ; } public String getName ( ) { return element . attributeValue ( NAME_ATTRIBUTE ) ; } public void setValue ( String value ) { element . addAttribute ( VALUE_ATTRIBUTE , value ) ; } public String getValue ( ) { return element . attributeValue ( VALUE_ATTRIBUTE ) ; } public void setValueOfChild ( String name , String value ) { SettingsNode settingsNode = addChildIfNotPresent ( name ) ; settingsNode . setValue ( value ) ; } public String getValueOfChild ( String name , String defaultValue ) { SettingsNode settingsNode = getChildNode ( name ) ; if ( settingsNode ! = null ) { String value = settingsNode . getValue ( ) ; if ( value ! = null ) { return value ; } } return defaultValue ; } public SettingsNode getChildNode ( String name ) { Iterator iterator = element . elements ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Element childElement = ( Element ) iterator . next ( ) ; if ( name . equals ( childElement . attributeValue ( NAME_ATTRIBUTE ) ) ) { return new DOM4JSettingsNode ( childElement ) ; } } return null ; } public List < SettingsNode > getChildNodes ( ) { return convertNodes ( element . elements ( ) ) ; } private List < SettingsNode > convertNodes ( List elements ) { List < SettingsNode > children = new ArrayList < SettingsNode > ( ) ; Iterator iterator = elements . iterator ( ) ; while ( iterator . hasNext ( ) ) { Element childElement = ( Element ) iterator . next ( ) ; children . add ( new DOM4JSettingsNode ( childElement ) ) ; } return children ; } public List < SettingsNode > getChildNodes ( String name ) { List < SettingsNode > children = new ArrayList < SettingsNode > ( ) ; Iterator iterator = element . elements ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Element childElement = ( Element ) iterator . next ( ) ; if ( name . equals ( childElement . attributeValue ( NAME_ATTRIBUTE ) ) ) { children . add ( new DOM4JSettingsNode ( childElement ) ) ; } } return children ; } public int getValueOfChildAsInt ( String name , int defaultValue ) { SettingsNode settingsNode = getChildNode ( name ) ; if ( settingsNode ! = null ) { String value = settingsNode . getValue ( ) ; try { if ( value ! = null ) { return Integer . parseInt ( value ) ; } } catch ( NumberFormatException e ) { } } return defaultValue ; } public void setValueOfChildAsInt ( String name , int value ) { setValueOfChild ( name , Integer . toString ( value ) ) ; } public long getValueOfChildAsLong ( String name , long defaultValue ) { SettingsNode settingsNode = getChildNode ( name ) ; if ( settingsNode ! = null ) { String value = settingsNode . getValue ( ) ; try { if ( value ! = null ) { return Long . parseLong ( value ) ; } } catch ( NumberFormatException e ) { } } return defaultValue ; } public void setValueOfChildAsLong ( String name , long value ) { setValueOfChild ( name , Long . toString ( value ) ) ; } public boolean getValueOfChildAsBoolean ( String name , boolean defaultValue ) { SettingsNode settingsNode = getChildNode ( name ) ; if ( settingsNode ! = null ) { String value = settingsNode . getValue ( ) ; if ( value ! = null ) { if ( <str> . equalsIgnoreCase ( value ) ) { return true ; } if ( <str> . equalsIgnoreCase ( value ) ) { return false ; } } } return defaultValue ; } public void setValueOfChildAsBoolean ( String name , boolean value ) { setValueOfChild ( name , Boolean . toString ( value ) ) ; } public SettingsNode addChild ( String name ) { DOM4JSettingsNode childElement = new DOM4JSettingsNode ( element . addElement ( TAG_NAME ) ) ; childElement . setName ( name ) ; return childElement ; } public SettingsNode addChildIfNotPresent ( String name ) { SettingsNode settingsNode = getChildNode ( name ) ; if ( settingsNode = = null ) { settingsNode = addChild ( name ) ; } return settingsNode ; } public SettingsNode getNodeAtPath ( String . . . pathPortions ) { if ( pathPortions = = null | | pathPortions . length = = <int> ) { return null ; } String firstPathPortion = pathPortions [ <int> ] ; SettingsNode currentNode = getChildNode ( firstPathPortion ) ; int index = <int> ; while ( index < pathPortions . length & & currentNode ! = null ) { String pathPortion = pathPortions [ index ] ; currentNode = currentNode . getChildNode ( pathPortion ) ; index + + ; } return currentNode ; } private SettingsNode getNodeAtPathCreateIfNotFound ( String . . . pathPortions ) { if ( pathPortions = = null | | pathPortions . length = = <int> ) { return null ; } String firstPathPortion = pathPortions [ <int> ] ; SettingsNode currentNode = getChildNode ( firstPathPortion ) ; if ( currentNode = = null ) { currentNode = addChild ( firstPathPortion ) ; } int index = <int> ; while ( index < pathPortions . length ) { String pathPortion = pathPortions [ index ] ; currentNode = currentNode . getChildNode ( pathPortion ) ; if ( currentNode = = null ) { currentNode = addChild ( firstPathPortion ) ; } index + + ; } return currentNode ; } public void removeFromParent ( ) { element . detach ( ) ; } public void removeAllChildren ( ) { List list = element . elements ( ) ; Iterator iterator = list . iterator ( ) ; while ( iterator . hasNext ( ) ) { Element child = ( Element ) iterator . next ( ) ; child . detach ( ) ; } } @Override public boolean equals ( Object obj ) { if ( ! ( obj instanceof DOM4JSettingsNode ) ) { return false ; } DOM4JSettingsNode otherNode = ( DOM4JSettingsNode ) obj ; return otherNode . element . equals ( element ) ; } @Override public int hashCode ( ) { return element . hashCode ( ) ; } @Override public String toString ( ) { return getName ( ) + <str> + getValue ( ) + <str> + element . elements ( ) . size ( ) + <str> ; } } 

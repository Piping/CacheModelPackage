package com . badlogic . gdx . physics . bullet . linearmath ; import com . badlogic . gdx . physics . bullet . BulletBase ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . math . Quaternion ; import com . badlogic . gdx . math . Matrix3 ; import com . badlogic . gdx . math . Matrix4 ; public class btAngleCompareFunc extends BulletBase { private long swigCPtr ; protected btAngleCompareFunc ( final String className , long cPtr , boolean cMemoryOwn ) { super ( className , cPtr , cMemoryOwn ) ; swigCPtr = cPtr ; } public btAngleCompareFunc ( long cPtr , boolean cMemoryOwn ) { this ( <str> , cPtr , cMemoryOwn ) ; construct ( ) ; } @Override protected void reset ( long cPtr , boolean cMemoryOwn ) { if ( ! destroyed ) destroy ( ) ; super . reset ( swigCPtr = cPtr , cMemoryOwn ) ; } public static long getCPtr ( btAngleCompareFunc obj ) { return ( obj = = null ) ? <int> : obj . swigCPtr ; } @Override protected void finalize ( ) throws Throwable { if ( ! destroyed ) destroy ( ) ; super . finalize ( ) ; } @Override protected synchronized void delete ( ) { if ( swigCPtr ! = <int> ) { if ( swigCMemOwn ) { swigCMemOwn = false ; LinearMathJNI . delete_btAngleCompareFunc ( swigCPtr ) ; } swigCPtr = <int> ; } super . delete ( ) ; } public void setAnchor ( btVector3 value ) { LinearMathJNI . btAngleCompareFunc_anchor_set ( swigCPtr , this , btVector3 . getCPtr ( value ) , value ) ; } public btVector3 getAnchor ( ) { long cPtr = LinearMathJNI . btAngleCompareFunc_anchor_get ( swigCPtr , this ) ; return ( cPtr = = <int> ) ? null : new btVector3 ( cPtr , false ) ; } public btAngleCompareFunc ( Vector3 anchor ) { this ( LinearMathJNI . new_btAngleCompareFunc ( anchor ) , true ) ; } } 

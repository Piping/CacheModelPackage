package org . elasticsearch . explain ; import org . apache . lucene . search . Explanation ; import org . elasticsearch . action . admin . indices . alias . Alias ; import org . elasticsearch . action . explain . ExplainResponse ; import org . elasticsearch . common . io . stream . InputStreamStreamInput ; import org . elasticsearch . common . io . stream . OutputStreamStreamOutput ; import org . elasticsearch . common . lucene . Lucene ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . index . mapper . internal . TimestampFieldMapper ; import org . elasticsearch . index . query . QueryBuilders ; import org . elasticsearch . test . ESIntegTestCase ; import org . joda . time . DateTime ; import org . joda . time . DateTimeZone ; import org . joda . time . format . ISODateTimeFormat ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; import static java . util . Collections . singleton ; import static org . elasticsearch . common . xcontent . XContentFactory . jsonBuilder ; import static org . elasticsearch . index . query . QueryBuilders . queryStringQuery ; import static org . elasticsearch . test . hamcrest . ElasticsearchAssertions . assertAcked ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . notNullValue ; public class ExplainActionIT extends ESIntegTestCase { public void testSimple ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) . setSettings ( Settings . settingsBuilder ( ) . put ( <str> , - <int> ) ) ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> ) . get ( ) ; ExplainResponse response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . get ( ) ; assertNotNull ( response ) ; assertFalse ( response . isExists ( ) ) ; assertThat ( response . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getId ( ) , equalTo ( <str> ) ) ; assertFalse ( response . isMatch ( ) ) ; refresh ( ) ; response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isMatch ( ) ) ; assertNotNull ( response . getExplanation ( ) ) ; assertTrue ( response . getExplanation ( ) . isMatch ( ) ) ; assertThat ( response . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getExplanation ( ) . getValue ( ) , equalTo ( <float> ) ) ; response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . termQuery ( <str> , <str> ) ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isExists ( ) ) ; assertFalse ( response . isMatch ( ) ) ; assertThat ( response . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getId ( ) , equalTo ( <str> ) ) ; assertNotNull ( response . getExplanation ( ) ) ; assertFalse ( response . getExplanation ( ) . isMatch ( ) ) ; response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . boolQuery ( ) . must ( QueryBuilders . termQuery ( <str> , <str> ) ) . must ( QueryBuilders . termQuery ( <str> , <str> ) ) ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isExists ( ) ) ; assertFalse ( response . isMatch ( ) ) ; assertThat ( response . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getId ( ) , equalTo ( <str> ) ) ; assertNotNull ( response . getExplanation ( ) ) ; assertFalse ( response . getExplanation ( ) . isMatch ( ) ) ; assertThat ( response . getExplanation ( ) . getDetails ( ) . length , equalTo ( <int> ) ) ; response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . get ( ) ; assertNotNull ( response ) ; assertFalse ( response . isExists ( ) ) ; assertFalse ( response . isMatch ( ) ) ; assertThat ( response . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getId ( ) , equalTo ( <str> ) ) ; } public void testExplainWithFields ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) . get ( ) ; refresh ( ) ; ExplainResponse response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setFields ( <str> ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isMatch ( ) ) ; assertNotNull ( response . getExplanation ( ) ) ; assertTrue ( response . getExplanation ( ) . isMatch ( ) ) ; assertThat ( response . getExplanation ( ) . getValue ( ) , equalTo ( <float> ) ) ; assertThat ( response . getGetResult ( ) . isExists ( ) , equalTo ( true ) ) ; assertThat ( response . getGetResult ( ) . getId ( ) , equalTo ( <str> ) ) ; Set < String > fields = new HashSet < > ( response . getGetResult ( ) . getFields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( singleton ( <str> ) ) ) ; assertThat ( response . getGetResult ( ) . getFields ( ) . get ( <str> ) . getValue ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( response . getGetResult ( ) . isSourceEmpty ( ) , equalTo ( true ) ) ; refresh ( ) ; response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setFields ( <str> ) . setFetchSource ( true ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isMatch ( ) ) ; assertNotNull ( response . getExplanation ( ) ) ; assertTrue ( response . getExplanation ( ) . isMatch ( ) ) ; assertThat ( response . getExplanation ( ) . getValue ( ) , equalTo ( <float> ) ) ; assertThat ( response . getGetResult ( ) . isExists ( ) , equalTo ( true ) ) ; assertThat ( response . getGetResult ( ) . getId ( ) , equalTo ( <str> ) ) ; fields = new HashSet < > ( response . getGetResult ( ) . getFields ( ) . keySet ( ) ) ; fields . remove ( TimestampFieldMapper . NAME ) ; assertThat ( fields , equalTo ( singleton ( <str> ) ) ) ; assertThat ( response . getGetResult ( ) . getFields ( ) . get ( <str> ) . getValue ( ) . toString ( ) , equalTo ( <str> ) ) ; assertThat ( response . getGetResult ( ) . isSourceEmpty ( ) , equalTo ( false ) ) ; response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setFields ( <str> , <str> ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isMatch ( ) ) ; String v1 = ( String ) response . getGetResult ( ) . field ( <str> ) . getValue ( ) ; String v2 = ( String ) response . getGetResult ( ) . field ( <str> ) . getValue ( ) ; assertThat ( v1 , equalTo ( <str> ) ) ; assertThat ( v2 , equalTo ( <str> ) ) ; } @SuppressWarnings ( <str> ) public void testExplainWitSource ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addAlias ( new Alias ( <str> ) ) ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( jsonBuilder ( ) . startObject ( ) . startObject ( <str> ) . field ( <str> , <str> ) . field ( <str> , <str> ) . endObject ( ) . endObject ( ) ) . get ( ) ; refresh ( ) ; ExplainResponse response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setFetchSource ( <str> , null ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isMatch ( ) ) ; assertNotNull ( response . getExplanation ( ) ) ; assertTrue ( response . getExplanation ( ) . isMatch ( ) ) ; assertThat ( response . getExplanation ( ) . getValue ( ) , equalTo ( <float> ) ) ; assertThat ( response . getGetResult ( ) . isExists ( ) , equalTo ( true ) ) ; assertThat ( response . getGetResult ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getGetResult ( ) . getSource ( ) . size ( ) , equalTo ( <int> ) ) ; assertThat ( ( ( Map < String , Object > ) response . getGetResult ( ) . getSource ( ) . get ( <str> ) ) . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; response = client ( ) . prepareExplain ( indexOrAlias ( ) , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setFetchSource ( null , <str> ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isMatch ( ) ) ; assertThat ( ( ( Map < String , Object > ) response . getGetResult ( ) . getSource ( ) . get ( <str> ) ) . get ( <str> ) . toString ( ) , equalTo ( <str> ) ) ; } public void testExplainWithFilteredAlias ( ) throws Exception { assertAcked ( prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . addAlias ( new Alias ( <str> ) . filter ( QueryBuilders . termQuery ( <str> , <str> ) ) ) ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . get ( ) ; refresh ( ) ; ExplainResponse response = client ( ) . prepareExplain ( <str> , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isExists ( ) ) ; assertFalse ( response . isMatch ( ) ) ; } public void testExplainWithFilteredAliasFetchSource ( ) throws Exception { assertAcked ( client ( ) . admin ( ) . indices ( ) . prepareCreate ( <str> ) . addMapping ( <str> , <str> , <str> ) . addAlias ( new Alias ( <str> ) . filter ( QueryBuilders . termQuery ( <str> , <str> ) ) ) ) ; ensureGreen ( <str> ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , <str> , <str> , <str> ) . get ( ) ; refresh ( ) ; ExplainResponse response = client ( ) . prepareExplain ( <str> , <str> , <str> ) . setQuery ( QueryBuilders . matchAllQuery ( ) ) . setFetchSource ( true ) . get ( ) ; assertNotNull ( response ) ; assertTrue ( response . isExists ( ) ) ; assertFalse ( response . isMatch ( ) ) ; assertThat ( response . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getGetResult ( ) , notNullValue ( ) ) ; assertThat ( response . getGetResult ( ) . getIndex ( ) , equalTo ( <str> ) ) ; assertThat ( response . getGetResult ( ) . getType ( ) , equalTo ( <str> ) ) ; assertThat ( response . getGetResult ( ) . getId ( ) , equalTo ( <str> ) ) ; assertThat ( response . getGetResult ( ) . getSource ( ) , notNullValue ( ) ) ; assertThat ( ( String ) response . getGetResult ( ) . getSource ( ) . get ( <str> ) , equalTo ( <str> ) ) ; } public void testExplainDateRangeInQueryString ( ) { createIndex ( <str> ) ; String aMonthAgo = ISODateTimeFormat . yearMonthDay ( ) . print ( new DateTime ( DateTimeZone . UTC ) . minusMonths ( <int> ) ) ; String aMonthFromNow = ISODateTimeFormat . yearMonthDay ( ) . print ( new DateTime ( DateTimeZone . UTC ) . plusMonths ( <int> ) ) ; client ( ) . prepareIndex ( <str> , <str> , <str> ) . setSource ( <str> , aMonthAgo , <str> , aMonthFromNow ) . get ( ) ; refresh ( ) ; ExplainResponse explainResponse = client ( ) . prepareExplain ( <str> , <str> , <str> ) . setQuery ( queryStringQuery ( <str> ) ) . get ( ) ; assertThat ( explainResponse . isExists ( ) , equalTo ( true ) ) ; assertThat ( explainResponse . isMatch ( ) , equalTo ( true ) ) ; } private static String indexOrAlias ( ) { return randomBoolean ( ) ? <str> : <str> ; } public void testStreamExplain ( ) throws Exception { Explanation exp = Explanation . match ( <float> , <str> ) ; ByteArrayOutputStream outBuffer = new ByteArrayOutputStream ( ) ; OutputStreamStreamOutput out = new OutputStreamStreamOutput ( outBuffer ) ; Lucene . writeExplanation ( out , exp ) ; ByteArrayInputStream esInBuffer = new ByteArrayInputStream ( outBuffer . toByteArray ( ) ) ; InputStreamStreamInput esBuffer = new InputStreamStreamInput ( esInBuffer ) ; Explanation result = Lucene . readExplanation ( esBuffer ) ; assertThat ( exp . toString ( ) , equalTo ( result . toString ( ) ) ) ; exp = Explanation . match ( <float> , <str> , Explanation . match ( <float> , <str> ) ) ; outBuffer = new ByteArrayOutputStream ( ) ; out = new OutputStreamStreamOutput ( outBuffer ) ; Lucene . writeExplanation ( out , exp ) ; esInBuffer = new ByteArrayInputStream ( outBuffer . toByteArray ( ) ) ; esBuffer = new InputStreamStreamInput ( esInBuffer ) ; result = Lucene . readExplanation ( esBuffer ) ; assertThat ( exp . toString ( ) , equalTo ( result . toString ( ) ) ) ; } } 

package org . gradle . api . tasks . wrapper ; import org . gradle . api . DefaultTask ; import org . gradle . api . GradleException ; import org . gradle . api . internal . file . FileLookup ; import org . gradle . api . internal . file . FileResolver ; import org . gradle . api . internal . plugins . StartScriptGenerator ; import org . gradle . api . internal . tasks . options . Option ; import org . gradle . api . tasks . Input ; import org . gradle . api . tasks . OutputFile ; import org . gradle . api . tasks . TaskAction ; import org . gradle . util . * ; import org . gradle . wrapper . GradleWrapperMain ; import org . gradle . wrapper . Install ; import org . gradle . wrapper . WrapperExecutor ; import javax . inject . Inject ; import java . io . File ; import java . net . URL ; import java . util . Properties ; public class Wrapper extends DefaultTask { public static final String DEFAULT_DISTRIBUTION_PARENT_NAME = Install . DEFAULT_DISTRIBUTION_PATH ; private String distributionUrl ; public enum PathBase { PROJECT , GRADLE_USER_HOME } private Object scriptFile ; private Object jarFile ; @Input private String distributionPath ; @Input private PathBase distributionBase = PathBase . GRADLE_USER_HOME ; private GradleVersion gradleVersion ; @Input private String archivePath ; @Input private PathBase archiveBase = PathBase . GRADLE_USER_HOME ; private final DistributionLocator locator = new DistributionLocator ( ) ; public Wrapper ( ) { scriptFile = <str> ; jarFile = <str> ; distributionPath = DEFAULT_DISTRIBUTION_PARENT_NAME ; archivePath = DEFAULT_DISTRIBUTION_PARENT_NAME ; gradleVersion = GradleVersion . current ( ) ; } @Inject protected FileLookup getFileLookup ( ) { throw new UnsupportedOperationException ( ) ; } @TaskAction void generate ( ) { File jarFileDestination = getJarFile ( ) ; File unixScript = getScriptFile ( ) ; FileResolver resolver = getFileLookup ( ) . getFileResolver ( unixScript . getParentFile ( ) ) ; String jarFileRelativePath = resolver . resolveAsRelativePath ( jarFileDestination ) ; writeProperties ( getPropertiesFile ( ) ) ; URL jarFileSource = Wrapper . class . getResource ( <str> ) ; if ( jarFileSource = = null ) { throw new GradleException ( <str> ) ; } GFileUtils . copyURLToFile ( jarFileSource , jarFileDestination ) ; StartScriptGenerator generator = new StartScriptGenerator ( ) ; generator . setApplicationName ( <str> ) ; generator . setMainClassName ( GradleWrapperMain . class . getName ( ) ) ; generator . setClasspath ( WrapUtil . toList ( jarFileRelativePath ) ) ; generator . setOptsEnvironmentVar ( <str> ) ; generator . setExitEnvironmentVar ( <str> ) ; generator . setAppNameSystemProperty ( <str> ) ; generator . setScriptRelPath ( unixScript . getName ( ) ) ; generator . generateUnixScript ( unixScript ) ; generator . generateWindowsScript ( getBatchScript ( ) ) ; } private void writeProperties ( File propertiesFileDestination ) { Properties wrapperProperties = new Properties ( ) ; wrapperProperties . put ( WrapperExecutor . DISTRIBUTION_URL_PROPERTY , getDistributionUrl ( ) ) ; wrapperProperties . put ( WrapperExecutor . DISTRIBUTION_BASE_PROPERTY , distributionBase . toString ( ) ) ; wrapperProperties . put ( WrapperExecutor . DISTRIBUTION_PATH_PROPERTY , distributionPath ) ; wrapperProperties . put ( WrapperExecutor . ZIP_STORE_BASE_PROPERTY , archiveBase . toString ( ) ) ; wrapperProperties . put ( WrapperExecutor . ZIP_STORE_PATH_PROPERTY , archivePath ) ; GUtil . saveProperties ( wrapperProperties , propertiesFileDestination ) ; } @OutputFile public File getScriptFile ( ) { return getProject ( ) . file ( scriptFile ) ; } public void setScriptFile ( Object scriptFile ) { this . scriptFile = scriptFile ; } @OutputFile public File getBatchScript ( ) { File scriptFile = getScriptFile ( ) ; return new File ( scriptFile . getParentFile ( ) , scriptFile . getName ( ) . replaceFirst ( <str> , <str> ) ) ; } @OutputFile public File getJarFile ( ) { return getProject ( ) . file ( jarFile ) ; } public void setJarFile ( Object jarFile ) { this . jarFile = jarFile ; } @OutputFile public File getPropertiesFile ( ) { File jarFileDestination = getJarFile ( ) ; return new File ( jarFileDestination . getParentFile ( ) , jarFileDestination . getName ( ) . replaceAll ( <str> , <str> ) ) ; } public String getDistributionPath ( ) { return distributionPath ; } public void setDistributionPath ( String distributionPath ) { this . distributionPath = distributionPath ; } public String getGradleVersion ( ) { return gradleVersion . getVersion ( ) ; } @Option ( option = <str> , description = <str> ) public void setGradleVersion ( String gradleVersion ) { this . gradleVersion = GradleVersion . version ( gradleVersion ) ; } @Input public String getDistributionUrl ( ) { if ( distributionUrl ! = null ) { return distributionUrl ; } else if ( gradleVersion ! = null ) { return locator . getDistributionFor ( gradleVersion ) . toString ( ) ; } else { return null ; } } @Option ( option = <str> , description = <str> ) public void setDistributionUrl ( String url ) { this . distributionUrl = url ; } public PathBase getDistributionBase ( ) { return distributionBase ; } public void setDistributionBase ( PathBase distributionBase ) { this . distributionBase = distributionBase ; } public String getArchivePath ( ) { return archivePath ; } public void setArchivePath ( String archivePath ) { this . archivePath = archivePath ; } public PathBase getArchiveBase ( ) { return archiveBase ; } public void setArchiveBase ( PathBase archiveBase ) { this . archiveBase = archiveBase ; } } 

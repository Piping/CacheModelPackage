package io . netty . test . udt . util ; import com . google . caliper . SimpleBenchmark ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; public abstract class CaliperBench extends SimpleBenchmark { static { Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { @Override public void run ( ) { try { TrafficControl . delay ( <int> ) ; } catch ( final Exception e ) { e . printStackTrace ( ) ; } } } ) ; } protected final InternalLogger log = InternalLoggerFactory . getInstance ( getClass ( ) ) ; private volatile CaliperMeasure measure ; protected CaliperMeasure measure ( ) { return measure ; } @Override protected void setUp ( ) throws Exception { measure = new CaliperMeasure ( ) ; } @Override protected void tearDown ( ) throws Exception { measure . shutdown ( ) ; } protected long markStep ( ) { return <int> * <int> ; } protected void markWait ( final long time ) throws Exception { final long timeStart = System . currentTimeMillis ( ) ; while ( true ) { Thread . sleep ( markStep ( ) ) ; measure ( ) . mark ( ) ; final long timeFinish = System . currentTimeMillis ( ) ; if ( timeFinish - timeStart > = time ) { System . out . print ( <str> ) ; return ; } else { System . out . print ( <str> ) ; continue ; } } } } 

package org . eclipse . debug . examples . ui . pda . presentation ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . Path ; import org . eclipse . debug . core . DebugException ; import org . eclipse . debug . core . model . IBreakpoint ; import org . eclipse . debug . core . model . ILineBreakpoint ; import org . eclipse . debug . core . model . IValue ; import org . eclipse . debug . examples . core . pda . DebugCorePlugin ; import org . eclipse . debug . examples . core . pda . breakpoints . PDALineBreakpoint ; import org . eclipse . debug . examples . core . pda . breakpoints . PDAWatchpoint ; import org . eclipse . debug . examples . core . pda . model . PDADebugTarget ; import org . eclipse . debug . examples . core . pda . model . PDAStackFrame ; import org . eclipse . debug . examples . core . pda . model . PDAThread ; import org . eclipse . debug . ui . IDebugModelPresentation ; import org . eclipse . debug . ui . IValueDetailListener ; import org . eclipse . jface . viewers . LabelProvider ; import org . eclipse . ui . IEditorInput ; import org . eclipse . ui . part . FileEditorInput ; public class PDAModelPresentation extends LabelProvider implements IDebugModelPresentation { @Override public void setAttribute ( String attribute , Object value ) { } @Override public String getText ( Object element ) { if ( element instanceof PDADebugTarget ) { return getTargetText ( ( PDADebugTarget ) element ) ; } else if ( element instanceof PDAThread ) { return getThreadText ( ( PDAThread ) element ) ; } else if ( element instanceof PDAStackFrame ) { return getStackFrameText ( ( PDAStackFrame ) element ) ; } else if ( element instanceof PDAWatchpoint ) { return getWatchpointText ( ( PDAWatchpoint ) element ) ; } return null ; } private String getWatchpointText ( PDAWatchpoint watchpoint ) { try { String label = watchpoint . getVariableName ( ) + <str> + watchpoint . getFunctionName ( ) + <str> ; if ( watchpoint . isAccess ( ) ) { label + = <str> ; } if ( watchpoint . isModification ( ) ) { label + = <str> ; } return label ; } catch ( CoreException e ) { return null ; } } private String getTargetText ( PDADebugTarget target ) { try { String pgmPath = target . getLaunch ( ) . getLaunchConfiguration ( ) . getAttribute ( DebugCorePlugin . ATTR_PDA_PROGRAM , ( String ) null ) ; if ( pgmPath ! = null ) { IPath path = new Path ( pgmPath ) ; String label = <str> ; if ( target . isTerminated ( ) ) { label = <str> ; } return label + <str> + path . lastSegment ( ) + <str> ; } } catch ( CoreException e ) { } return <str> ; } private String getStackFrameText ( PDAStackFrame frame ) { try { return frame . getName ( ) + <str> + frame . getLineNumber ( ) + <str> ; } catch ( DebugException e ) { } return null ; } private String getThreadText ( PDAThread thread ) { String label = thread . getName ( ) ; if ( thread . isStepping ( ) ) { label + = <str> ; } else if ( thread . isSuspended ( ) ) { IBreakpoint [ ] breakpoints = thread . getBreakpoints ( ) ; if ( breakpoints . length = = <int> ) { if ( thread . getError ( ) = = null ) { label + = <str> ; } else { label + = <str> + thread . getError ( ) + <str> ; } } else { IBreakpoint breakpoint = breakpoints [ <int> ] ; if ( breakpoint instanceof PDALineBreakpoint ) { PDALineBreakpoint pdaBreakpoint = ( PDALineBreakpoint ) breakpoint ; if ( pdaBreakpoint instanceof PDAWatchpoint ) { try { PDAWatchpoint watchpoint = ( PDAWatchpoint ) pdaBreakpoint ; label + = <str> + watchpoint . getSuspendType ( ) + <str> + watchpoint . getVariableName ( ) + <str> ; } catch ( CoreException e ) { } } else if ( pdaBreakpoint . isRunToLineBreakpoint ( ) ) { label + = <str> ; } else { label + = <str> ; } } } } else if ( thread . isTerminated ( ) ) { label = <str> + label ; } return label ; } @Override public void computeDetail ( IValue value , IValueDetailListener listener ) { String detail = <str> ; try { detail = value . getValueString ( ) ; } catch ( DebugException e ) { } listener . detailComputed ( value , detail ) ; } @Override public IEditorInput getEditorInput ( Object element ) { if ( element instanceof IFile ) { return new FileEditorInput ( ( IFile ) element ) ; } if ( element instanceof ILineBreakpoint ) { return new FileEditorInput ( ( IFile ) ( ( ILineBreakpoint ) element ) . getMarker ( ) . getResource ( ) ) ; } return null ; } @Override public String getEditorId ( IEditorInput input , Object element ) { if ( element instanceof IFile | | element instanceof ILineBreakpoint ) { return <str> ; } return null ; } } 

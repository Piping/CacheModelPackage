package junit . textui ; import java . io . PrintStream ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestResult ; import junit . framework . TestSuite ; import junit . runner . BaseTestRunner ; import junit . runner . Version ; public class TestRunner extends BaseTestRunner { private ResultPrinter fPrinter ; public static final int SUCCESS_EXIT = <int> ; public static final int FAILURE_EXIT = <int> ; public static final int EXCEPTION_EXIT = <int> ; public TestRunner ( ) { this ( System . out ) ; } public TestRunner ( PrintStream writer ) { this ( new ResultPrinter ( writer ) ) ; } public TestRunner ( ResultPrinter printer ) { fPrinter = printer ; } static public void run ( Class < ? extends TestCase > testClass ) { run ( new TestSuite ( testClass ) ) ; } static public TestResult run ( Test test ) { TestRunner runner = new TestRunner ( ) ; return runner . doRun ( test ) ; } static public void runAndWait ( Test suite ) { TestRunner aTestRunner = new TestRunner ( ) ; aTestRunner . doRun ( suite , true ) ; } @Override public void testFailed ( int status , Test test , Throwable e ) { } @Override public void testStarted ( String testName ) { } @Override public void testEnded ( String testName ) { } protected TestResult createTestResult ( ) { return new TestResult ( ) ; } public TestResult doRun ( Test test ) { return doRun ( test , false ) ; } public TestResult doRun ( Test suite , boolean wait ) { TestResult result = createTestResult ( ) ; result . addListener ( fPrinter ) ; long startTime = System . currentTimeMillis ( ) ; suite . run ( result ) ; long endTime = System . currentTimeMillis ( ) ; long runTime = endTime - startTime ; fPrinter . print ( result , runTime ) ; pause ( wait ) ; return result ; } protected void pause ( boolean wait ) { if ( ! wait ) return ; fPrinter . printWaitPrompt ( ) ; try { System . in . read ( ) ; } catch ( Exception e ) { } } public static void main ( String [ ] args ) { TestRunner aTestRunner = new TestRunner ( ) ; try { TestResult r = aTestRunner . start ( args ) ; if ( ! r . wasSuccessful ( ) ) { System . exit ( FAILURE_EXIT ) ; } System . exit ( SUCCESS_EXIT ) ; } catch ( Exception e ) { System . err . println ( e . getMessage ( ) ) ; System . exit ( EXCEPTION_EXIT ) ; } } public TestResult start ( String [ ] args ) throws Exception { String testCase = <str> ; String method = <str> ; boolean wait = false ; for ( int i = <int> ; i < args . length ; i + + ) { if ( args [ i ] . equals ( <str> ) ) { wait = true ; } else if ( args [ i ] . equals ( <str> ) ) { testCase = extractClassName ( args [ + + i ] ) ; } else if ( args [ i ] . equals ( <str> ) ) { String arg = args [ + + i ] ; int lastIndex = arg . lastIndexOf ( <str> ) ; testCase = arg . substring ( <int> , lastIndex ) ; method = arg . substring ( lastIndex + <int> ) ; } else if ( args [ i ] . equals ( <str> ) ) { System . err . println ( <str> + Version . id ( ) + <str> ) ; } else { testCase = args [ i ] ; } } if ( testCase . equals ( <str> ) ) { throw new Exception ( <str> ) ; } try { if ( ! method . equals ( <str> ) ) { return runSingleMethod ( testCase , method , wait ) ; } Test suite = getTest ( testCase ) ; return doRun ( suite , wait ) ; } catch ( Exception e ) { throw new Exception ( <str> + e ) ; } } protected TestResult runSingleMethod ( String testCase , String method , boolean wait ) throws Exception { Class < ? extends TestCase > testClass = loadSuiteClass ( testCase ) . asSubclass ( TestCase . class ) ; Test test = TestSuite . createTest ( testClass , method ) ; return doRun ( test , wait ) ; } @Override protected void runFailed ( String message ) { System . err . println ( message ) ; System . exit ( FAILURE_EXIT ) ; } public void setPrinter ( ResultPrinter printer ) { fPrinter = printer ; } } 

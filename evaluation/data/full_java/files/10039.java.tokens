package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . WrongType ; import com . google . common . collect . testing . features . CollectionFeature ; import com . google . common . collect . testing . features . CollectionSize ; @GwtCompatible public abstract class AbstractListIndexOfTester < E > extends AbstractListTester < E > { protected abstract int find ( Object o ) ; protected abstract String getMethodName ( ) ; @CollectionSize.Require ( absent = ZERO ) public void testFind_yes ( ) { assertEquals ( getMethodName ( ) + <str> , <int> , find ( getOrderedElements ( ) . get ( <int> ) ) ) ; } public void testFind_no ( ) { assertEquals ( getMethodName ( ) + <str> , - <int> , find ( e3 ( ) ) ) ; } @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) public void testFind_nullNotContainedButSupported ( ) { assertEquals ( getMethodName ( ) + <str> , - <int> , find ( null ) ) ; } @CollectionFeature.Require ( absent = ALLOWS_NULL_VALUES ) public void testFind_nullNotContainedAndUnsupported ( ) { try { assertEquals ( getMethodName ( ) + <str> , - <int> , find ( null ) ) ; } catch ( NullPointerException tolerated ) { } } @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testFind_nonNullWhenNullContained ( ) { initCollectionWithNullElement ( ) ; assertEquals ( getMethodName ( ) + <str> , - <int> , find ( e3 ( ) ) ) ; } @CollectionFeature.Require ( ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testFind_nullContained ( ) { initCollectionWithNullElement ( ) ; assertEquals ( getMethodName ( ) + <str> + getNullLocation ( ) , getNullLocation ( ) , find ( null ) ) ; } public void testFind_wrongType ( ) { try { assertEquals ( getMethodName ( ) + <str> , - <int> , find ( WrongType . VALUE ) ) ; } catch ( ClassCastException tolerated ) { } } } 

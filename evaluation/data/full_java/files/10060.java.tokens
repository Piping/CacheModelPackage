package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUES ; import static com . google . common . collect . testing . features . MapFeature . SUPPORTS_PUT ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . Map ; import java . util . concurrent . ConcurrentMap ; @GwtCompatible public class ConcurrentMapPutIfAbsentTester < K , V > extends AbstractMapTester < K , V > { @Override protected ConcurrentMap < K , V > getMap ( ) { return ( ConcurrentMap < K , V > ) super . getMap ( ) ; } @MapFeature.Require ( SUPPORTS_PUT ) public void testPutIfAbsent_supportedAbsent ( ) { assertNull ( <str> , putIfAbsent ( e3 ( ) ) ) ; expectAdded ( e3 ( ) ) ; } @MapFeature.Require ( SUPPORTS_PUT ) @CollectionSize.Require ( absent = ZERO ) public void testPutIfAbsent_supportedPresent ( ) { assertEquals ( <str> , v0 ( ) , getMap ( ) . putIfAbsent ( k0 ( ) , v3 ( ) ) ) ; expectUnchanged ( ) ; } @MapFeature.Require ( absent = SUPPORTS_PUT ) public void testPutIfAbsent_unsupportedAbsent ( ) { try { putIfAbsent ( e3 ( ) ) ; fail ( <str> ) ; } catch ( UnsupportedOperationException expected ) { } expectUnchanged ( ) ; expectMissing ( e3 ( ) ) ; } @MapFeature.Require ( absent = SUPPORTS_PUT ) @CollectionSize.Require ( absent = ZERO ) public void testPutIfAbsent_unsupportedPresentExistingValue ( ) { try { assertEquals ( <str> , v0 ( ) , putIfAbsent ( e0 ( ) ) ) ; } catch ( UnsupportedOperationException tolerated ) { } expectUnchanged ( ) ; } @MapFeature.Require ( absent = SUPPORTS_PUT ) @CollectionSize.Require ( absent = ZERO ) public void testPutIfAbsent_unsupportedPresentDifferentValue ( ) { try { getMap ( ) . putIfAbsent ( k0 ( ) , v3 ( ) ) ; } catch ( UnsupportedOperationException tolerated ) { } expectUnchanged ( ) ; } @MapFeature.Require ( value = SUPPORTS_PUT , absent = ALLOWS_NULL_KEYS ) public void testPutIfAbsent_nullKeyUnsupported ( ) { try { getMap ( ) . putIfAbsent ( null , v3 ( ) ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } expectUnchanged ( ) ; expectNullKeyMissingWhenNullKeysUnsupported ( <str> ) ; } @MapFeature.Require ( value = SUPPORTS_PUT , absent = ALLOWS_NULL_VALUES ) public void testPutIfAbsent_nullValueUnsupported ( ) { try { getMap ( ) . putIfAbsent ( k3 ( ) , null ) ; fail ( <str> ) ; } catch ( NullPointerException expected ) { } expectUnchanged ( ) ; expectNullValueMissingWhenNullValuesUnsupported ( <str> ) ; } @MapFeature.Require ( value = SUPPORTS_PUT , absent = ALLOWS_NULL_VALUES ) @CollectionSize.Require ( absent = ZERO ) public void testPutIfAbsent_putWithNullValueUnsupported ( ) { try { getMap ( ) . putIfAbsent ( k0 ( ) , null ) ; } catch ( NullPointerException tolerated ) { } expectUnchanged ( ) ; expectNullValueMissingWhenNullValuesUnsupported ( <str> ) ; } private V putIfAbsent ( Map . Entry < K , V > entry ) { return getMap ( ) . putIfAbsent ( entry . getKey ( ) , entry . getValue ( ) ) ; } } 

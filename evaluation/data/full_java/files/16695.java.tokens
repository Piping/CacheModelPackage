package org . junit . tests . validation ; import static org . junit . Assert . assertEquals ; import org . junit . Before ; import org . junit . Test ; import org . junit . internal . runners . JUnit4ClassRunner ; import org . junit . runner . JUnitCore ; import org . junit . runner . Result ; import org . junit . runner . RunWith ; import org . junit . runner . notification . Failure ; @SuppressWarnings ( <str> ) public class BadlyFormedClassesTest { public static class FaultyConstructor { public FaultyConstructor ( ) throws Exception { throw new Exception ( <str> ) ; } @Test public void someTest ( ) { } } ; @RunWith ( JUnit4ClassRunner . class ) public static class BadBeforeMethodWithLegacyRunner { @Before void before ( ) { } @Test public void someTest ( ) { } } ; public static class NoTests { } @Test public void constructorException ( ) { String message = exceptionMessageFrom ( FaultyConstructor . class ) ; assertEquals ( <str> , message ) ; } @Test public void noRunnableMethods ( ) { assertEquals ( <str> , exceptionMessageFrom ( NoTests . class ) ) ; } @Test public void badBeforeMethodWithLegacyRunner ( ) { assertEquals ( <str> , exceptionMessageFrom ( BadBeforeMethodWithLegacyRunner . class ) ) ; } private String exceptionMessageFrom ( Class < ? > testClass ) { JUnitCore core = new JUnitCore ( ) ; Result result = core . run ( testClass ) ; Failure failure = result . getFailures ( ) . get ( <int> ) ; String message = failure . getException ( ) . getMessage ( ) ; return message ; } } 

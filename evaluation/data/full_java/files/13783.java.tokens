package org . gradle . launcher . daemon . client ; import org . gradle . internal . service . DefaultServiceRegistry ; import org . gradle . internal . service . ServiceRegistry ; import org . gradle . launcher . daemon . configuration . DaemonParameters ; import org . gradle . logging . internal . OutputEventListener ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; public class DaemonClientFactory { private final ServiceRegistry sharedServices ; public DaemonClientFactory ( ServiceRegistry sharedServices ) { this . sharedServices = sharedServices ; } public ServiceRegistry createBuildClientServices ( OutputEventListener loggingReceiver , DaemonParameters daemonParameters , InputStream stdin ) { DefaultServiceRegistry loggingServices = new DefaultServiceRegistry ( sharedServices ) ; loggingServices . add ( OutputEventListener . class , loggingReceiver ) ; return new DaemonClientServices ( loggingServices , daemonParameters , stdin ) ; } public ServiceRegistry createSingleUseDaemonClientServices ( OutputEventListener loggingReceiver , DaemonParameters daemonParameters , InputStream stdin ) { DefaultServiceRegistry loggingServices = new DefaultServiceRegistry ( sharedServices ) ; loggingServices . add ( OutputEventListener . class , loggingReceiver ) ; return new SingleUseDaemonClientServices ( loggingServices , daemonParameters , stdin ) ; } public ServiceRegistry createStopDaemonServices ( OutputEventListener loggingReceiver , DaemonParameters daemonParameters ) { DefaultServiceRegistry loggingServices = new DefaultServiceRegistry ( sharedServices ) ; loggingServices . add ( OutputEventListener . class , loggingReceiver ) ; return new DaemonClientServices ( loggingServices , daemonParameters , new ByteArrayInputStream ( new byte [ <int> ] ) ) ; } } 

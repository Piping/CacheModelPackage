package org . nd4j . linalg . string ; import org . apache . commons . lang3 . StringUtils ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . ndarray . INDArray ; import java . text . DecimalFormat ; public class NDArrayStrings { private DecimalFormat decimalFormat = new DecimalFormat ( <str> ) ; private String sep = <str> ; public NDArrayStrings ( String sep ) { this . sep = sep ; } public NDArrayStrings ( ) { this ( <str> ) ; } public String format ( INDArray arr ) { return format ( arr , arr . rank ( ) ) ; } private String format ( INDArray arr , int rank ) { StringBuffer sb = new StringBuffer ( ) ; if ( arr . isScalar ( ) ) { if ( arr instanceof IComplexNDArray ) return ( ( IComplexNDArray ) arr ) . getComplex ( <int> ) . toString ( ) ; return decimalFormat . format ( arr . getDouble ( <int> ) ) ; } else if ( arr . isVector ( ) ) { sb . append ( <str> ) ; for ( int i = <int> ; i < arr . length ( ) ; i + + ) { sb . append ( StringUtils . repeat ( <str> , rank - <int> ) ) ; if ( arr instanceof IComplexNDArray ) sb . append ( ( ( IComplexNDArray ) arr ) . getComplex ( i ) . toString ( ) ) ; else sb . append ( decimalFormat . format ( arr . getDouble ( i ) ) ) ; if ( i < arr . length ( ) - <int> ) sb . append ( sep ) ; } sb . append ( <str> ) ; return sb . toString ( ) ; } else { sb . append ( <str> ) ; for ( int i = <int> ; i < arr . slices ( ) ; i + + ) { sb . append ( format ( arr . slice ( i ) , rank - <int> ) ) ; if ( i < arr . slices ( ) - <int> ) { sb . append ( <str> ) ; sb . append ( StringUtils . repeat ( <str> , rank - <int> ) ) ; } } sb . append ( <str> ) ; return sb . toString ( ) ; } } } 

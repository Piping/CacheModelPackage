package junit . samples ; import java . util . ArrayList ; import java . util . List ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; public class ListTest extends TestCase { protected List < Integer > fEmpty ; protected List < Integer > fFull ; public static void main ( String [ ] args ) { junit . textui . TestRunner . run ( suite ( ) ) ; } @Override protected void setUp ( ) { fEmpty = new ArrayList < Integer > ( ) ; fFull = new ArrayList < Integer > ( ) ; fFull . add ( <int> ) ; fFull . add ( <int> ) ; fFull . add ( <int> ) ; } public static Test suite ( ) { return new TestSuite ( ListTest . class ) ; } public void testCapacity ( ) { int size = fFull . size ( ) ; for ( int i = <int> ; i < <int> ; i + + ) { fFull . add ( new Integer ( i ) ) ; } assertTrue ( fFull . size ( ) = = <int> + size ) ; } public void testContains ( ) { assertTrue ( fFull . contains ( <int> ) ) ; assertTrue ( ! fEmpty . contains ( <int> ) ) ; } public void testElementAt ( ) { int i = fFull . get ( <int> ) ; assertTrue ( i = = <int> ) ; try { fFull . get ( fFull . size ( ) ) ; } catch ( IndexOutOfBoundsException e ) { return ; } fail ( <str> ) ; } public void testRemoveAll ( ) { fFull . removeAll ( fFull ) ; fEmpty . removeAll ( fEmpty ) ; assertTrue ( fFull . isEmpty ( ) ) ; assertTrue ( fEmpty . isEmpty ( ) ) ; } public void testRemoveElement ( ) { fFull . remove ( new Integer ( <int> ) ) ; assertTrue ( ! fFull . contains ( <int> ) ) ; } } 

package io . netty . microbench . http2 ; import io . netty . handler . codec . http2 . DefaultHttp2Connection ; import io . netty . handler . codec . http2 . Http2Connection ; import io . netty . handler . codec . http2 . Http2Exception ; import io . netty . handler . codec . http2 . Http2Stream ; import io . netty . microbench . util . AbstractMicrobenchmark ; import org . openjdk . jmh . annotations . Benchmark ; import org . openjdk . jmh . annotations . Level ; import org . openjdk . jmh . annotations . Param ; import org . openjdk . jmh . annotations . Scope ; import org . openjdk . jmh . annotations . Setup ; import org . openjdk . jmh . annotations . State ; import org . openjdk . jmh . annotations . TearDown ; import org . openjdk . jmh . annotations . Threads ; @Threads ( <int> ) @State ( Scope . Benchmark ) public class Http2PriorityTreeBenchmark extends AbstractMicrobenchmark { private static final short WEIGHT = <int> ; public Http2Connection connection ; @Param ( { <str> , <str> } ) public int numStreams ; @Param ( { <str> , <str> , <str> } ) public int d_ary ; @Param ( { <str> , <str> , <str> } ) public int exclusiveOnCount ; @Setup ( Level . Trial ) public void setup ( ) throws Http2Exception { connection = new DefaultHttp2Connection ( false ) ; for ( int i = <int> ; i < numStreams ; + + i ) { connection . local ( ) . createStream ( toStreamId ( i ) , false ) ; } } @TearDown ( Level . Iteration ) public void teardown ( ) throws Http2Exception { final int connectionId = connection . connectionStream ( ) . id ( ) ; for ( int i = <int> ; i < numStreams ; + + i ) { connection . stream ( toStreamId ( i ) ) . setPriority ( connectionId , WEIGHT , false ) ; } } @Benchmark public void prioritizeStreams ( ) throws Http2Exception { int streamId = <int> ; int parentId = <int> ; boolean exclusive = false ; for ( int i = <int> ; i < numStreams ; + + i ) { parentId = toStreamId ( i / d_ary ) ; streamId = toStreamId ( i ) ; if ( parentId = = streamId ) { exclusive = i % exclusiveOnCount = = <int> ; continue ; } Http2Stream stream = connection . stream ( streamId ) ; stream . setPriority ( parentId , WEIGHT , exclusive ) ; exclusive = i % exclusiveOnCount = = <int> ; } for ( int i = <int> ; i < numStreams ; + + i ) { parentId = toStreamId ( ( numStreams - i ) / d_ary ) ; streamId = toStreamId ( i ) ; if ( parentId = = streamId ) { exclusive = i % exclusiveOnCount = = <int> ; continue ; } Http2Stream stream = connection . stream ( streamId ) ; stream . setPriority ( parentId , WEIGHT , exclusive ) ; exclusive = i % exclusiveOnCount = = <int> ; } } private static int toStreamId ( int i ) { return <int> * i + <int> ; } } 

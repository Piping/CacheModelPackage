package org . elasticsearch . common . geo . builders ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import org . elasticsearch . common . xcontent . XContentBuilder ; import com . vividsolutions . jts . geom . Coordinate ; public abstract class PointCollection < E extends PointCollection < E > > extends ShapeBuilder { protected final ArrayList < Coordinate > points ; protected PointCollection ( ) { this ( new ArrayList < Coordinate > ( ) ) ; } protected PointCollection ( ArrayList < Coordinate > points ) { this . points = points ; } @SuppressWarnings ( <str> ) private E thisRef ( ) { return ( E ) this ; } public E point ( double longitude , double latitude ) { return this . point ( coordinate ( longitude , latitude ) ) ; } public E point ( Coordinate coordinate ) { this . points . add ( coordinate ) ; return thisRef ( ) ; } public E points ( Coordinate . . . coordinates ) { return this . points ( Arrays . asList ( coordinates ) ) ; } public E points ( Collection < ? extends Coordinate > coordinates ) { this . points . addAll ( coordinates ) ; return thisRef ( ) ; } protected Coordinate [ ] coordinates ( boolean closed ) { Coordinate [ ] result = points . toArray ( new Coordinate [ points . size ( ) + ( closed ? <int> : <int> ) ] ) ; if ( closed ) { result [ result . length - <int> ] = result [ <int> ] ; } return result ; } protected XContentBuilder coordinatesToXcontent ( XContentBuilder builder , boolean closed ) throws IOException { builder . startArray ( ) ; for ( Coordinate point : points ) { toXContent ( builder , point ) ; } if ( closed ) { Coordinate start = points . get ( <int> ) ; Coordinate end = points . get ( points . size ( ) - <int> ) ; if ( start . x ! = end . x | | start . y ! = end . y ) { toXContent ( builder , points . get ( <int> ) ) ; } } builder . endArray ( ) ; return builder ; } } 

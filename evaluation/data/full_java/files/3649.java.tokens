package org . eclipse . debug . core . sourcelookup . containers ; import java . net . URI ; import java . util . ArrayList ; import java . util . List ; import org . eclipse . core . filesystem . EFS ; import org . eclipse . core . filesystem . IFileStore ; import org . eclipse . core . resources . IContainer ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . resources . IFolder ; import org . eclipse . core . resources . IResource ; import org . eclipse . core . resources . IWorkspaceRoot ; import org . eclipse . core . resources . ResourcesPlugin ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . core . runtime . IPath ; import org . eclipse . core . runtime . Path ; import org . eclipse . debug . core . sourcelookup . ISourceContainer ; public abstract class ContainerSourceContainer extends CompositeSourceContainer { private IContainer fContainer = null ; private boolean fSubfolders = false ; private URI fRootURI = null ; private IFileStore fRootFile = null ; private IWorkspaceRoot fRoot = null ; public ContainerSourceContainer ( IContainer container , boolean subfolders ) { fContainer = container ; fSubfolders = subfolders ; fRootURI = fContainer . getLocationURI ( ) ; if ( fRootURI ! = null ) { try { fRootFile = EFS . getStore ( fRootURI ) ; } catch ( CoreException e ) { } fRoot = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) ; } } public IContainer getContainer ( ) { return fContainer ; } @Override public Object [ ] findSourceElements ( String name ) throws CoreException { ArrayList < Object > sources = new ArrayList < Object > ( ) ; if ( validateFile ( name ) ) { IFile file = fContainer . getFile ( new Path ( name ) ) ; if ( file . exists ( ) ) { sources . add ( file ) ; } else { if ( fRootURI = = null ) { return EMPTY ; } if ( fRootFile ! = null ) { IFileStore target = fRootFile . getFileStore ( new Path ( name ) ) ; if ( target . fetchInfo ( ) . exists ( ) ) { IFile [ ] files = fRoot . findFilesForLocationURI ( target . toURI ( ) ) ; if ( isFindDuplicates ( ) & & files . length > <int> ) { for ( int i = <int> ; i < files . length ; i + + ) { sources . add ( files [ i ] ) ; } } else if ( files . length > <int> ) { sources . add ( files [ <int> ] ) ; } } } } } if ( ( isFindDuplicates ( ) & & fSubfolders ) | | ( sources . isEmpty ( ) & & fSubfolders ) ) { ISourceContainer [ ] containers = getSourceContainers ( ) ; for ( int i = <int> ; i < containers . length ; i + + ) { Object [ ] objects = containers [ i ] . findSourceElements ( name ) ; if ( objects = = null | | objects . length = = <int> ) { continue ; } if ( isFindDuplicates ( ) ) { for ( int j = <int> ; j < objects . length ; j + + ) { sources . add ( objects [ j ] ) ; } } else { sources . add ( objects [ <int> ] ) ; break ; } } } if ( sources . isEmpty ( ) ) { return EMPTY ; } return sources . toArray ( ) ; } @Override public String getName ( ) { return getContainer ( ) . getName ( ) ; } @Override public boolean equals ( Object obj ) { if ( obj ! = null & & obj instanceof ContainerSourceContainer ) { ContainerSourceContainer loc = ( ContainerSourceContainer ) obj ; return loc . getContainer ( ) . equals ( getContainer ( ) ) ; } return false ; } @Override public int hashCode ( ) { return getContainer ( ) . hashCode ( ) ; } @Override public boolean isComposite ( ) { return fSubfolders ; } @Override protected ISourceContainer [ ] createSourceContainers ( ) throws CoreException { if ( fSubfolders ) { IResource [ ] resources = getContainer ( ) . members ( ) ; List < ISourceContainer > list = new ArrayList < ISourceContainer > ( resources . length ) ; for ( int i = <int> ; i < resources . length ; i + + ) { IResource resource = resources [ i ] ; if ( resource . getType ( ) = = IResource . FOLDER ) { list . add ( new FolderSourceContainer ( ( IFolder ) resource , fSubfolders ) ) ; } } ISourceContainer [ ] containers = list . toArray ( new ISourceContainer [ list . size ( ) ] ) ; for ( int i = <int> ; i < containers . length ; i + + ) { ISourceContainer container = containers [ i ] ; container . init ( getDirector ( ) ) ; } return containers ; } return new ISourceContainer [ <int> ] ; } private boolean validateFile ( String name ) { IContainer container = getContainer ( ) ; IPath path = container . getFullPath ( ) . append ( name ) ; return ResourcesPlugin . getWorkspace ( ) . validatePath ( path . toOSString ( ) , IResource . FILE ) . isOK ( ) ; } } 

package com . badlogic . gdx . tests . bullet ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . physics . bullet . collision . ContactListener ; import com . badlogic . gdx . utils . Array ; public class ContactCallbackTest extends BaseBulletTest { public static class TestContactProcessedListener extends ContactListener { public Array < BulletEntity > entities ; int c = <int> ; @Override public void onContactProcessed ( int userValue0 , boolean match0 , int userValue1 , boolean match1 ) { if ( match0 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue0 ) ) ; e . body . setContactCallbackFilter ( <int> ) ; e . setColor ( Color . RED ) ; Gdx . app . log ( <str> , <str> + ( + + c ) ) ; } if ( match1 ) { final BulletEntity e = ( BulletEntity ) ( entities . get ( userValue1 ) ) ; e . body . setContactCallbackFilter ( <int> ) ; e . setColor ( Color . RED ) ; Gdx . app . log ( <str> , <str> + ( + + c ) ) ; } } } final int BOXCOUNT_X = <int> ; final int BOXCOUNT_Y = <int> ; final int BOXCOUNT_Z = <int> ; final float BOXOFFSET_X = - <float> ; final float BOXOFFSET_Y = <float> ; final float BOXOFFSET_Z = - <float> ; TestContactProcessedListener contactProcessedListener ; @Override public void create ( ) { super . create ( ) ; world . add ( <str> , <float> , <float> , <float> ) . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; for ( int x = <int> ; x < BOXCOUNT_X ; x + + ) { for ( int y = <int> ; y < BOXCOUNT_Y ; y + + ) { for ( int z = <int> ; z < BOXCOUNT_Z ; z + + ) { final BulletEntity e = ( BulletEntity ) world . add ( <str> , BOXOFFSET_X + x * <float> , BOXOFFSET_Y + y * <float> , BOXOFFSET_Z + z * <float> ) ; e . setColor ( <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> + <float> * ( float ) Math . random ( ) , <float> ) ; e . body . setContactCallbackFlag ( <int> ) ; e . body . setContactCallbackFilter ( <int> ) ; } } } contactProcessedListener = new TestContactProcessedListener ( ) ; contactProcessedListener . entities = world . entities ; } @Override public boolean tap ( float x , float y , int count , int button ) { shoot ( x , y ) ; return true ; } @Override public void dispose ( ) { if ( contactProcessedListener ! = null ) contactProcessedListener . dispose ( ) ; contactProcessedListener = null ; super . dispose ( ) ; } } 

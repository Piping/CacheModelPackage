package org . gradle . external . javadoc . internal ; import org . jmock . Expectations ; import org . jmock . integration . junit4 . JUnit4Mockery ; import org . jmock . lib . legacy . ClassImposteriser ; import org . junit . Before ; import org . junit . Test ; import java . io . File ; import java . io . IOException ; public class FileJavadocOptionFileOptionTest { private final JUnit4Mockery context = new JUnit4Mockery ( ) ; private JavadocOptionFileWriterContext writerContextMock ; private final String optionName = <str> ; private FileJavadocOptionFileOption fileOption ; @Before public void setUp ( ) { context . setImposteriser ( ClassImposteriser . INSTANCE ) ; writerContextMock = context . mock ( JavadocOptionFileWriterContext . class ) ; fileOption = new FileJavadocOptionFileOption ( optionName ) ; } @Test public void testWriteNullValue ( ) throws IOException { fileOption . write ( writerContextMock ) ; } @Test public void testWriteNoneNullValue ( ) throws IOException { final File testValue = new File ( <str> ) ; context . checking ( new Expectations ( ) { { one ( writerContextMock ) . writeValueOption ( optionName , testValue . getAbsolutePath ( ) ) ; } } ) ; fileOption . write ( writerContextMock ) ; } } 

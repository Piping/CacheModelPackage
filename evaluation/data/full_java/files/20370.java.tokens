package io . netty . channel . epoll ; import io . netty . channel . EventLoop ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . MultithreadEventLoopGroup ; import io . netty . util . concurrent . EventExecutor ; import java . util . concurrent . Executor ; import java . util . concurrent . ThreadFactory ; public final class EpollEventLoopGroup extends MultithreadEventLoopGroup { public EpollEventLoopGroup ( ) { this ( <int> ) ; } public EpollEventLoopGroup ( int nThreads ) { this ( nThreads , null ) ; } @SuppressWarnings ( <str> ) public EpollEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { this ( nThreads , threadFactory , <int> ) ; } @Deprecated public EpollEventLoopGroup ( int nThreads , ThreadFactory threadFactory , int maxEventsAtOnce ) { super ( nThreads , threadFactory , maxEventsAtOnce ) ; } public void setIoRatio ( int ioRatio ) { for ( EventExecutor e : children ( ) ) { ( ( EpollEventLoop ) e ) . setIoRatio ( ioRatio ) ; } } @Override protected EventLoop newChild ( Executor executor , Object . . . args ) throws Exception { return new EpollEventLoop ( this , executor , ( Integer ) args [ <int> ] ) ; } } 

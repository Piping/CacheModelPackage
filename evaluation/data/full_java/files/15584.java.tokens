package org . gradle . api . internal . tasks . testing . logging ; import org . gradle . api . logging . LogLevel ; import org . gradle . api . tasks . testing . * ; import org . gradle . api . tasks . testing . TestResult ; import org . gradle . api . tasks . testing . logging . TestLogEvent ; import org . gradle . api . tasks . testing . logging . TestLogging ; import org . gradle . logging . StyledTextOutputFactory ; import org . gradle . util . TextUtil ; public class TestEventLogger extends AbstractTestLogger implements TestListener , TestOutputListener { private static final String INDENT = <str> ; private final TestExceptionFormatter exceptionFormatter ; private final TestLogging testLogging ; public TestEventLogger ( StyledTextOutputFactory textOutputFactory , LogLevel logLevel , TestLogging testLogging , TestExceptionFormatter exceptionFormatter ) { super ( textOutputFactory , logLevel , testLogging . getDisplayGranularity ( ) ) ; this . exceptionFormatter = exceptionFormatter ; this . testLogging = testLogging ; } public void beforeSuite ( TestDescriptor descriptor ) { before ( descriptor ) ; } public void afterSuite ( TestDescriptor descriptor , TestResult result ) { after ( descriptor , result ) ; } public void beforeTest ( TestDescriptor descriptor ) { before ( descriptor ) ; } public void afterTest ( TestDescriptor descriptor , TestResult result ) { after ( descriptor , result ) ; } public void onOutput ( TestDescriptor descriptor , TestOutputEvent outputEvent ) { if ( outputEvent . getDestination ( ) = = TestOutputEvent . Destination . StdOut & & isLoggedEventType ( TestLogEvent . STANDARD_OUT ) ) { logEvent ( descriptor , TestLogEvent . STANDARD_OUT , TextUtil . indent ( outputEvent . getMessage ( ) , INDENT ) + <str> ) ; } else if ( outputEvent . getDestination ( ) = = TestOutputEvent . Destination . StdErr & & isLoggedEventType ( TestLogEvent . STANDARD_ERROR ) ) { logEvent ( descriptor , TestLogEvent . STANDARD_ERROR , TextUtil . indent ( outputEvent . getMessage ( ) , INDENT ) + <str> ) ; } } private void before ( TestDescriptor descriptor ) { if ( shouldLogEvent ( descriptor , TestLogEvent . STARTED ) ) { logEvent ( descriptor , TestLogEvent . STARTED ) ; } } private void after ( TestDescriptor descriptor , TestResult result ) { TestLogEvent event = getEvent ( result ) ; if ( shouldLogEvent ( descriptor , event ) ) { String details = shouldLogExceptions ( result ) ? exceptionFormatter . format ( descriptor , result . getExceptions ( ) ) : null ; logEvent ( descriptor , event , details ) ; } } private TestLogEvent getEvent ( TestResult result ) { switch ( result . getResultType ( ) ) { case SUCCESS : return TestLogEvent . PASSED ; case FAILURE : return TestLogEvent . FAILED ; case SKIPPED : return TestLogEvent . SKIPPED ; default : throw new AssertionError ( ) ; } } private boolean shouldLogEvent ( TestDescriptor descriptor , TestLogEvent event ) { return isLoggedGranularity ( descriptor ) & & isLoggedEventType ( event ) ; } private boolean shouldLogExceptions ( TestResult result ) { return testLogging . getShowExceptions ( ) & & ! result . getExceptions ( ) . isEmpty ( ) ; } private boolean isLoggedGranularity ( TestDescriptor descriptor ) { int level = getLevel ( descriptor ) ; return ( ( testLogging . getMinGranularity ( ) = = - <int> & & ! descriptor . isComposite ( ) ) | | testLogging . getMinGranularity ( ) > - <int> & & level > = testLogging . getMinGranularity ( ) ) & & ( testLogging . getMaxGranularity ( ) = = - <int> | | level < = testLogging . getMaxGranularity ( ) ) ; } private int getLevel ( TestDescriptor descriptor ) { int level = <int> ; while ( descriptor . getParent ( ) ! = null ) { level + + ; descriptor = descriptor . getParent ( ) ; } return level ; } private boolean isLoggedEventType ( TestLogEvent event ) { return testLogging . getEvents ( ) . contains ( event ) ; } } 

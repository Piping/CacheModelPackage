package com . badlogic . gdx . tests ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Animation ; import com . badlogic . gdx . graphics . g2d . SpriteBatch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . tests . utils . GdxTest ; public class SimpleAnimationTest extends GdxTest { private Animation currentWalk ; private float currentFrameTime ; private Vector2 position ; private Texture texture ; private Animation downWalk ; private Animation leftWalk ; private Animation rightWalk ; private Animation upWalk ; private SpriteBatch spriteBatch ; private static final float ANIMATION_SPEED = <float> ; @Override public void create ( ) { Gdx . input . setInputProcessor ( this ) ; texture = new Texture ( Gdx . files . internal ( <str> ) ) ; TextureRegion [ ] [ ] regions = TextureRegion . split ( texture , <int> , <int> ) ; TextureRegion [ ] downWalkReg = regions [ <int> ] ; TextureRegion [ ] leftWalkReg = regions [ <int> ] ; TextureRegion [ ] rightWalkReg = regions [ <int> ] ; TextureRegion [ ] upWalkReg = regions [ <int> ] ; downWalk = new Animation ( ANIMATION_SPEED , downWalkReg ) ; leftWalk = new Animation ( ANIMATION_SPEED , leftWalkReg ) ; rightWalk = new Animation ( ANIMATION_SPEED , rightWalkReg ) ; upWalk = new Animation ( ANIMATION_SPEED , upWalkReg ) ; currentWalk = leftWalk ; currentFrameTime = <float> ; spriteBatch = new SpriteBatch ( ) ; position = new Vector2 ( ) ; } @Override public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; currentFrameTime + = Gdx . graphics . getDeltaTime ( ) ; spriteBatch . begin ( ) ; TextureRegion frame = currentWalk . getKeyFrame ( currentFrameTime , true ) ; spriteBatch . draw ( frame , position . x , position . y ) ; spriteBatch . end ( ) ; } @Override public boolean touchDown ( int x , int y , int pointer , int button ) { position . x = x ; position . y = Gdx . graphics . getHeight ( ) - y ; return true ; } @Override public void dispose ( ) { spriteBatch . dispose ( ) ; texture . dispose ( ) ; } } 

package org . elasticsearch . action . explain ; import org . elasticsearch . action . support . single . shard . SingleShardOperationRequestBuilder ; import org . elasticsearch . client . ElasticsearchClient ; import org . elasticsearch . common . Nullable ; import org . elasticsearch . common . Strings ; import org . elasticsearch . index . query . QueryBuilder ; import org . elasticsearch . search . fetch . source . FetchSourceContext ; public class ExplainRequestBuilder extends SingleShardOperationRequestBuilder < ExplainRequest , ExplainResponse , ExplainRequestBuilder > { ExplainRequestBuilder ( ElasticsearchClient client , ExplainAction action ) { super ( client , action , new ExplainRequest ( ) ) ; } public ExplainRequestBuilder ( ElasticsearchClient client , ExplainAction action , String index , String type , String id ) { super ( client , action , new ExplainRequest ( ) . index ( index ) . type ( type ) . id ( id ) ) ; } public ExplainRequestBuilder setType ( String type ) { request ( ) . type ( type ) ; return this ; } public ExplainRequestBuilder setId ( String id ) { request ( ) . id ( id ) ; return this ; } public ExplainRequestBuilder setRouting ( String routing ) { request ( ) . routing ( routing ) ; return this ; } public ExplainRequestBuilder setParent ( String parent ) { request ( ) . parent ( parent ) ; return this ; } public ExplainRequestBuilder setPreference ( String preference ) { request ( ) . preference ( preference ) ; return this ; } public ExplainRequestBuilder setQuery ( QueryBuilder query ) { request . query ( query ) ; return this ; } public ExplainRequestBuilder setFields ( String . . . fields ) { request . fields ( fields ) ; return this ; } public ExplainRequestBuilder setFetchSource ( boolean fetch ) { FetchSourceContext context = request . fetchSourceContext ( ) ; if ( context = = null ) { request . fetchSourceContext ( new FetchSourceContext ( fetch ) ) ; } else { context . fetchSource ( fetch ) ; } return this ; } public ExplainRequestBuilder setFetchSource ( @Nullable String include , @Nullable String exclude ) { return setFetchSource ( include = = null ? Strings . EMPTY_ARRAY : new String [ ] { include } , exclude = = null ? Strings . EMPTY_ARRAY : new String [ ] { exclude } ) ; } public ExplainRequestBuilder setFetchSource ( @Nullable String [ ] includes , @Nullable String [ ] excludes ) { FetchSourceContext context = request . fetchSourceContext ( ) ; if ( context = = null ) { request . fetchSourceContext ( new FetchSourceContext ( includes , excludes ) ) ; } else { context . fetchSource ( true ) ; context . includes ( includes ) ; context . excludes ( excludes ) ; } return this ; } } 

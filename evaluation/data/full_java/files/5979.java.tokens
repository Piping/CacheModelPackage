package org . elasticsearch . common . lucene . all ; import org . apache . lucene . analysis . Analyzer ; import org . apache . lucene . analysis . TokenStream ; import org . apache . lucene . document . Field ; import org . apache . lucene . document . FieldType ; import org . apache . lucene . index . IndexOptions ; import org . elasticsearch . ElasticsearchException ; import java . io . IOException ; import java . io . Reader ; public class AllField extends Field { private final AllEntries allEntries ; private final Analyzer analyzer ; public AllField ( String name , AllEntries allEntries , Analyzer analyzer , FieldType fieldType ) { super ( name , fieldType ) ; this . allEntries = allEntries ; this . analyzer = analyzer ; } @Override public String stringValue ( ) { if ( fieldType ( ) . stored ( ) ) { return allEntries . buildText ( ) ; } return null ; } @Override public Reader readerValue ( ) { return null ; } public AllEntries getAllEntries ( ) { return allEntries ; } @Override public TokenStream tokenStream ( Analyzer analyzer , TokenStream previous ) throws IOException { try { allEntries . reset ( ) ; if ( allEntries . customBoost ( ) & & fieldType ( ) . indexOptions ( ) . compareTo ( IndexOptions . DOCS_AND_FREQS_AND_POSITIONS ) > = <int> ) { return AllTokenStream . allTokenStream ( name , allEntries , analyzer ) ; } else { return analyzer . tokenStream ( name , allEntries ) ; } } catch ( IOException e ) { throw new ElasticsearchException ( <str> ) ; } } } 

package org . elasticsearch . test . test ; import org . apache . lucene . util . IOUtils ; import org . apache . lucene . util . LuceneTestCase ; import org . elasticsearch . client . Client ; import org . elasticsearch . cluster . ClusterName ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . test . ESTestCase ; import org . elasticsearch . test . InternalTestCluster ; import org . elasticsearch . test . NodeConfigurationSource ; import java . io . IOException ; import java . nio . file . Path ; import java . util . * ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . hasEntry ; @LuceneTestCase.SuppressFileSystems ( <str> ) public class InternalTestClusterTests extends ESTestCase { public void testInitializiationIsConsistent ( ) { long clusterSeed = randomLong ( ) ; int minNumDataNodes = randomIntBetween ( <int> , <int> ) ; int maxNumDataNodes = randomIntBetween ( minNumDataNodes , <int> ) ; String clusterName = randomRealisticUnicodeOfCodepointLengthBetween ( <int> , <int> ) ; NodeConfigurationSource nodeConfigurationSource = NodeConfigurationSource . EMPTY ; int numClientNodes = randomIntBetween ( <int> , <int> ) ; boolean enableHttpPipelining = randomBoolean ( ) ; String nodePrefix = randomRealisticUnicodeOfCodepointLengthBetween ( <int> , <int> ) ; Path baseDir = createTempDir ( ) ; InternalTestCluster cluster0 = new InternalTestCluster ( <str> , clusterSeed , baseDir , minNumDataNodes , maxNumDataNodes , clusterName , nodeConfigurationSource , numClientNodes , enableHttpPipelining , nodePrefix , true ) ; InternalTestCluster cluster1 = new InternalTestCluster ( <str> , clusterSeed , baseDir , minNumDataNodes , maxNumDataNodes , clusterName , nodeConfigurationSource , numClientNodes , enableHttpPipelining , nodePrefix , true ) ; assertClusters ( cluster0 , cluster1 , false ) ; } final static Set < String > clusterUniqueSettings = new HashSet < > ( ) ; static { clusterUniqueSettings . add ( ClusterName . SETTING ) ; clusterUniqueSettings . add ( <str> ) ; clusterUniqueSettings . add ( <str> ) ; clusterUniqueSettings . add ( <str> ) ; } public static void assertClusters ( InternalTestCluster cluster0 , InternalTestCluster cluster1 , boolean checkClusterUniqueSettings ) { Settings defaultSettings0 = cluster0 . getDefaultSettings ( ) ; Settings defaultSettings1 = cluster1 . getDefaultSettings ( ) ; assertSettings ( defaultSettings0 , defaultSettings1 , checkClusterUniqueSettings ) ; assertThat ( cluster0 . numDataNodes ( ) , equalTo ( cluster1 . numDataNodes ( ) ) ) ; if ( checkClusterUniqueSettings ) { assertThat ( cluster0 . getClusterName ( ) , equalTo ( cluster1 . getClusterName ( ) ) ) ; } } public static void assertSettings ( Settings left , Settings right , boolean checkClusterUniqueSettings ) { Set < Map . Entry < String , String > > entries0 = left . getAsMap ( ) . entrySet ( ) ; Map < String , String > entries1 = right . getAsMap ( ) ; assertThat ( entries0 . size ( ) , equalTo ( entries1 . size ( ) ) ) ; for ( Map . Entry < String , String > entry : entries0 ) { if ( clusterUniqueSettings . contains ( entry . getKey ( ) ) & & checkClusterUniqueSettings = = false ) { continue ; } assertThat ( entries1 , hasEntry ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } } public void testBeforeTest ( ) throws Exception { long clusterSeed = randomLong ( ) ; int minNumDataNodes = randomIntBetween ( <int> , <int> ) ; int maxNumDataNodes = randomIntBetween ( minNumDataNodes , <int> ) ; final String clusterName1 = <str> ; final String clusterName2 = <str> ; NodeConfigurationSource nodeConfigurationSource = NodeConfigurationSource . EMPTY ; int numClientNodes = randomIntBetween ( <int> , <int> ) ; boolean enableHttpPipelining = randomBoolean ( ) ; int jvmOrdinal = randomIntBetween ( <int> , <int> ) ; String nodePrefix = <str> ; Path baseDir = createTempDir ( ) ; InternalTestCluster cluster0 = new InternalTestCluster ( <str> , clusterSeed , baseDir , minNumDataNodes , maxNumDataNodes , clusterName1 , nodeConfigurationSource , numClientNodes , enableHttpPipelining , nodePrefix , true ) ; InternalTestCluster cluster1 = new InternalTestCluster ( <str> , clusterSeed , baseDir , minNumDataNodes , maxNumDataNodes , clusterName2 , nodeConfigurationSource , numClientNodes , enableHttpPipelining , nodePrefix , true ) ; assertClusters ( cluster0 , cluster1 , false ) ; long seed = randomLong ( ) ; try { { Random random = new Random ( seed ) ; cluster0 . beforeTest ( random , random . nextDouble ( ) ) ; } { Random random = new Random ( seed ) ; cluster1 . beforeTest ( random , random . nextDouble ( ) ) ; } assertArrayEquals ( cluster0 . getNodeNames ( ) , cluster1 . getNodeNames ( ) ) ; Iterator < Client > iterator1 = cluster1 . iterator ( ) ; for ( Client client : cluster0 ) { assertTrue ( iterator1 . hasNext ( ) ) ; Client other = iterator1 . next ( ) ; assertSettings ( client . settings ( ) , other . settings ( ) , false ) ; } assertArrayEquals ( cluster0 . getNodeNames ( ) , cluster1 . getNodeNames ( ) ) ; cluster0 . afterTest ( ) ; cluster1 . afterTest ( ) ; } finally { IOUtils . close ( cluster0 , cluster1 ) ; } } } 

package org . elasticsearch . search ; import org . elasticsearch . cache . recycler . PageCacheRecycler ; import org . elasticsearch . cluster . ClusterService ; import org . elasticsearch . common . inject . Inject ; import org . elasticsearch . common . settings . Settings ; import org . elasticsearch . common . util . BigArrays ; import org . elasticsearch . indices . IndicesService ; import org . elasticsearch . indices . IndicesWarmer ; import org . elasticsearch . indices . cache . request . IndicesRequestCache ; import org . elasticsearch . node . settings . NodeSettingsService ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . script . ScriptService ; import org . elasticsearch . search . dfs . DfsPhase ; import org . elasticsearch . search . fetch . FetchPhase ; import org . elasticsearch . search . internal . SearchContext ; import org . elasticsearch . search . query . QueryPhase ; import org . elasticsearch . threadpool . ThreadPool ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; public class MockSearchService extends SearchService { public static class TestPlugin extends Plugin { @Override public String name ( ) { return <str> ; } @Override public String description ( ) { return <str> ; } public void onModule ( SearchModule module ) { module . searchServiceImpl = MockSearchService . class ; } } private static final Map < SearchContext , Throwable > ACTIVE_SEARCH_CONTEXTS = new ConcurrentHashMap < > ( ) ; public static void assertNoInFLightContext ( ) { final Map < SearchContext , Throwable > copy = new HashMap < > ( ACTIVE_SEARCH_CONTEXTS ) ; if ( copy . isEmpty ( ) = = false ) { throw new AssertionError ( <str> + copy . size ( ) + <str> , copy . values ( ) . iterator ( ) . next ( ) ) ; } } @Inject public MockSearchService ( Settings settings , NodeSettingsService nodeSettingsService , ClusterService clusterService , IndicesService indicesService , IndicesWarmer indicesWarmer , ThreadPool threadPool , ScriptService scriptService , PageCacheRecycler pageCacheRecycler , BigArrays bigArrays , DfsPhase dfsPhase , QueryPhase queryPhase , FetchPhase fetchPhase , IndicesRequestCache indicesQueryCache ) { super ( settings , nodeSettingsService , clusterService , indicesService , indicesWarmer , threadPool , scriptService , pageCacheRecycler , bigArrays , dfsPhase , queryPhase , fetchPhase , indicesQueryCache ) ; } @Override protected void putContext ( SearchContext context ) { super . putContext ( context ) ; ACTIVE_SEARCH_CONTEXTS . put ( context , new RuntimeException ( ) ) ; } @Override protected SearchContext removeContext ( long id ) { final SearchContext removed = super . removeContext ( id ) ; if ( removed ! = null ) { ACTIVE_SEARCH_CONTEXTS . remove ( removed ) ; } return removed ; } } 

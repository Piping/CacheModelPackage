package io . netty . handler . codec . http . cookie ; import static io . netty . handler . codec . http . cookie . CookieUtil . firstInvalidCookieNameOctet ; import static io . netty . handler . codec . http . cookie . CookieUtil . firstInvalidCookieValueOctet ; import static io . netty . handler . codec . http . cookie . CookieUtil . unwrapValue ; import java . nio . CharBuffer ; import io . netty . util . internal . logging . InternalLogger ; import io . netty . util . internal . logging . InternalLoggerFactory ; public abstract class CookieDecoder { private final InternalLogger logger = InternalLoggerFactory . getInstance ( getClass ( ) ) ; private final boolean strict ; protected CookieDecoder ( boolean strict ) { this . strict = strict ; } protected DefaultCookie initCookie ( String header , int nameBegin , int nameEnd , int valueBegin , int valueEnd ) { if ( nameBegin = = - <int> | | nameBegin = = nameEnd ) { logger . debug ( <str> ) ; return null ; } if ( valueBegin = = - <int> ) { logger . debug ( <str> ) ; return null ; } CharSequence wrappedValue = CharBuffer . wrap ( header , valueBegin , valueEnd ) ; CharSequence unwrappedValue = unwrapValue ( wrappedValue ) ; if ( unwrappedValue = = null ) { logger . debug ( <str> , wrappedValue ) ; return null ; } final String name = header . substring ( nameBegin , nameEnd ) ; int invalidOctetPos ; if ( strict & & ( invalidOctetPos = firstInvalidCookieNameOctet ( name ) ) > = <int> ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( <str> , name , name . charAt ( invalidOctetPos ) ) ; } return null ; } final boolean wrap = unwrappedValue . length ( ) ! = valueEnd - valueBegin ; if ( strict & & ( invalidOctetPos = firstInvalidCookieValueOctet ( unwrappedValue ) ) > = <int> ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( <str> , unwrappedValue , unwrappedValue . charAt ( invalidOctetPos ) ) ; } return null ; } DefaultCookie cookie = new DefaultCookie ( name , unwrappedValue . toString ( ) ) ; cookie . setWrap ( wrap ) ; return cookie ; } } 

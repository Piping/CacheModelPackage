package com . badlogic . gdx . tools . flame ; import java . awt . GridBagConstraints ; import java . awt . Insets ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import javax . swing . DefaultComboBoxModel ; import javax . swing . JCheckBox ; import javax . swing . JComboBox ; import javax . swing . JLabel ; import javax . swing . event . ChangeEvent ; import javax . swing . event . ChangeListener ; import com . badlogic . gdx . graphics . g3d . particles . ParticleShader . AlignMode ; import com . badlogic . gdx . graphics . g3d . particles . ParticleSorter ; import com . badlogic . gdx . graphics . g3d . particles . batches . BillboardParticleBatch ; public class BillboardBatchPanel extends EditorPanel < BillboardParticleBatch > { private enum AlignModeWrapper { Screen ( AlignMode . Screen , <str> ) , ViewPoint ( AlignMode . ViewPoint , <str> ) ; public String desc ; public AlignMode mode ; AlignModeWrapper ( AlignMode mode , String desc ) { this . mode = mode ; this . desc = desc ; } @Override public String toString ( ) { return desc ; } } private enum SortMode { None ( <str> , new ParticleSorter . None ( ) ) , Distance ( <str> , new ParticleSorter . Distance ( ) ) ; public String desc ; public ParticleSorter sorter ; SortMode ( String desc , ParticleSorter sorter ) { this . sorter = sorter ; this . desc = desc ; } @Override public String toString ( ) { return desc ; } } JComboBox alignCombo ; JCheckBox useGPUBox ; JComboBox sortCombo ; public BillboardBatchPanel ( FlameMain particleEditor3D , BillboardParticleBatch renderer ) { super ( particleEditor3D , <str> , <str> ) ; initializeComponents ( renderer ) ; setValue ( renderer ) ; } private void initializeComponents ( BillboardParticleBatch renderer ) { alignCombo = new JComboBox ( ) ; alignCombo . setModel ( new DefaultComboBoxModel ( AlignModeWrapper . values ( ) ) ) ; alignCombo . setSelectedItem ( getAlignModeWrapper ( renderer . getAlignMode ( ) ) ) ; alignCombo . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { AlignModeWrapper align = ( AlignModeWrapper ) alignCombo . getSelectedItem ( ) ; editor . getBillboardBatch ( ) . setAlignMode ( align . mode ) ; } } ) ; useGPUBox = new JCheckBox ( ) ; useGPUBox . setSelected ( renderer . isUseGPU ( ) ) ; useGPUBox . addChangeListener ( new ChangeListener ( ) { public void stateChanged ( ChangeEvent event ) { editor . getBillboardBatch ( ) . setUseGpu ( useGPUBox . isSelected ( ) ) ; } } ) ; sortCombo = new JComboBox ( ) ; sortCombo . setModel ( new DefaultComboBoxModel ( SortMode . values ( ) ) ) ; sortCombo . setSelectedItem ( getSortMode ( renderer . getSorter ( ) ) ) ; sortCombo . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent event ) { SortMode mode = ( SortMode ) sortCombo . getSelectedItem ( ) ; editor . getBillboardBatch ( ) . setSorter ( mode . sorter ) ; } } ) ; int i = <int> ; contentPanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , i , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; contentPanel . add ( alignCombo , new GridBagConstraints ( <int> , i + + , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; contentPanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , i , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; contentPanel . add ( useGPUBox , new GridBagConstraints ( <int> , i + + , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; contentPanel . add ( new JLabel ( <str> ) , new GridBagConstraints ( <int> , i , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; contentPanel . add ( sortCombo , new GridBagConstraints ( <int> , i , <int> , <int> , <int> , <int> , GridBagConstraints . WEST , GridBagConstraints . NONE , new Insets ( <int> , <int> , <int> , <int> ) , <int> , <int> ) ) ; } private Object getSortMode ( ParticleSorter sorter ) { Class type = sorter . getClass ( ) ; for ( SortMode wrapper : SortMode . values ( ) ) { if ( wrapper . sorter . getClass ( ) = = type ) return wrapper ; } return null ; } private Object getAlignModeWrapper ( AlignMode alignMode ) { for ( AlignModeWrapper wrapper : AlignModeWrapper . values ( ) ) { if ( wrapper . mode = = alignMode ) return wrapper ; } return null ; } } 

package org . nd4j . linalg . api . ops ; import org . nd4j . linalg . api . complex . IComplexNDArray ; import org . nd4j . linalg . api . complex . IComplexNumber ; import org . nd4j . linalg . api . ndarray . INDArray ; import org . nd4j . linalg . factory . Nd4j ; public abstract class BaseScalarOp extends BaseOp implements ScalarOp { protected Number num ; protected IComplexNumber complexNumber ; public BaseScalarOp ( ) { } public BaseScalarOp ( INDArray x , INDArray y , INDArray z , int n , Number num ) { super ( x , y , z , n ) ; this . num = num ; if ( x instanceof IComplexNDArray ) complexNumber = Nd4j . createComplexNumber ( num , <int> ) ; init ( x , y , z , n ) ; } public BaseScalarOp ( INDArray x , Number num ) { super ( x ) ; this . num = num ; if ( x instanceof IComplexNDArray ) complexNumber = Nd4j . createComplexNumber ( num , <int> ) ; init ( x , y , z , n ) ; } public BaseScalarOp ( INDArray x , INDArray y , INDArray z , int n , IComplexNumber num ) { super ( x , y , z , n ) ; this . complexNumber = num ; init ( x , y , z , n ) ; } public BaseScalarOp ( INDArray x , IComplexNumber num ) { super ( x ) ; this . complexNumber = num ; init ( x , y , z , n ) ; } @Override public int broadcastLength ( ) { return <int> ; } @Override public int [ ] broadcastShape ( ) { return new int [ ] { <int> , <int> } ; } @Override public Number scalar ( ) { return num ; } @Override public IComplexNumber complexScalar ( ) { return complexNumber ; } @Override public int [ ] getDimension ( ) { return new int [ <int> ] ; } @Override public void setDimension ( int . . . dimension ) { } } 

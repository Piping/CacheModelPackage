package org . gradle . api . internal . tasks . compile . incremental . jar ; import java . io . File ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Set ; public class JarClasspathSnapshotFactory { private final JarSnapshotter jarSnapshotter ; public JarClasspathSnapshotFactory ( JarSnapshotter jarSnapshotter ) { this . jarSnapshotter = jarSnapshotter ; } JarClasspathSnapshot createSnapshot ( Iterable < JarArchive > jarArchives ) { Map < File , JarSnapshot > jarSnapshots = new HashMap < File , JarSnapshot > ( ) ; Map < File , byte [ ] > jarHashes = new HashMap < File , byte [ ] > ( ) ; Set < String > allClasses = new HashSet < String > ( ) ; Set < String > duplicateClasses = new HashSet < String > ( ) ; for ( JarArchive jar : jarArchives ) { JarSnapshot snapshot = jarSnapshotter . createSnapshot ( jar ) ; jarSnapshots . put ( jar . file , snapshot ) ; jarHashes . put ( jar . file , snapshot . getHash ( ) ) ; for ( String c : snapshot . getClasses ( ) ) { if ( ! allClasses . add ( c ) ) { duplicateClasses . add ( c ) ; } } } JarClasspathSnapshotData jarClasspathSnapshotData = new JarClasspathSnapshotData ( jarHashes , duplicateClasses ) ; return new JarClasspathSnapshot ( jarSnapshots , jarClasspathSnapshotData ) ; } } 

package org . eclipse . debug . internal . ui . viewers . model ; import org . eclipse . debug . internal . ui . viewers . model . provisional . IElementCompareRequest ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ITreeModelViewer ; import org . eclipse . debug . internal . ui . viewers . model . provisional . ModelDelta ; import org . eclipse . jface . viewers . TreePath ; import org . eclipse . ui . IMemento ; public class ElementCompareRequest extends MementoUpdate implements IElementCompareRequest { private boolean fEqual ; private final int fModelIndex ; private ModelDelta fDelta ; private boolean fKnowsHasChildren ; private boolean fKnowsChildCount ; private boolean fCheckChildrenRealized ; public ElementCompareRequest ( TreeModelContentProvider provider , Object viewerInput , Object element , TreePath elementPath , IMemento memento , ModelDelta delta , int modelIndex , boolean knowsHasChildren , boolean knowsChildCount , boolean checkChildrenRealized ) { super ( provider , viewerInput , provider . getPresentationContext ( ) , element , elementPath , memento ) ; fProvider = provider ; fDelta = delta ; fModelIndex = modelIndex ; fKnowsHasChildren = knowsHasChildren ; fKnowsChildCount = knowsChildCount ; fCheckChildrenRealized = checkChildrenRealized ; } @Override public void setEqual ( boolean equal ) { fEqual = equal ; } @Override public void done ( ) { ITreeModelViewer viewer = getContentProvider ( ) . getViewer ( ) ; if ( viewer = = null ) return ; if ( viewer . getDisplay ( ) . getThread ( ) = = Thread . currentThread ( ) ) { fProvider . getStateTracker ( ) . compareFinished ( ElementCompareRequest . this , fDelta ) ; } else { viewer . getDisplay ( ) . asyncExec ( new Runnable ( ) { @Override public void run ( ) { if ( getContentProvider ( ) . isDisposed ( ) ) return ; fProvider . getStateTracker ( ) . compareFinished ( ElementCompareRequest . this , fDelta ) ; } } ) ; } } public boolean isEqual ( ) { return fEqual ; } ModelDelta getDelta ( ) { return fDelta ; } int getModelIndex ( ) { return fModelIndex ; } void setKnowsHasChildren ( boolean hasChildren ) { fKnowsHasChildren = hasChildren ; } boolean knowsHasChildren ( ) { return fKnowsHasChildren ; } void setKnowsChildCount ( boolean childCount ) { fKnowsChildCount = childCount ; } boolean knowChildCount ( ) { return fKnowsChildCount ; } void setCheckChildrenRealized ( boolean checkChildrenRealized ) { fCheckChildrenRealized = checkChildrenRealized ; } boolean checkChildrenRealized ( ) { return fCheckChildrenRealized ; } @Override public String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( <str> ) ; buf . append ( getElement ( ) ) ; return buf . toString ( ) ; } } 

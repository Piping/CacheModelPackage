package com . badlogic . gdx . tests . g3d ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . InputMultiplexer ; import com . badlogic . gdx . math . MathUtils ; import com . badlogic . gdx . math . Matrix4 ; import com . badlogic . gdx . math . Vector3 ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . ui . CheckBox ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . List ; import com . badlogic . gdx . scenes . scene2d . ui . ScrollPane ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Window ; import com . badlogic . gdx . scenes . scene2d . utils . ChangeListener ; import com . badlogic . gdx . scenes . scene2d . utils . ClickListener ; import com . badlogic . gdx . utils . Scaling ; import com . badlogic . gdx . utils . StringBuilder ; import com . badlogic . gdx . utils . viewport . ScalingViewport ; public abstract class BaseG3dHudTest extends BaseG3dTest { public final static int PREF_HUDWIDTH = <int> ; public final static int PREF_HUDHEIGHT = <int> ; public final static float rotationSpeed = <float> * <int> f ; public final static float moveSpeed = <float> ; protected Stage hud ; protected float hudWidth , hudHeight ; protected Skin skin ; protected Label fpsLabel ; protected CollapsableWindow modelsWindow ; protected CheckBox gridCheckBox , rotateCheckBox , moveCheckBox ; protected final StringBuilder stringBuilder = new StringBuilder ( ) ; protected final Matrix4 transform = new Matrix4 ( ) ; protected float moveRadius = <float> ; protected String models [ ] = new String [ ] { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } ; @Override public void create ( ) { super . create ( ) ; createHUD ( ) ; Gdx . input . setInputProcessor ( new InputMultiplexer ( hud , this , inputController ) ) ; } protected void createHUD ( ) { hud = new Stage ( new ScalingViewport ( Scaling . fit , PREF_HUDWIDTH , PREF_HUDHEIGHT ) ) ; hudWidth = hud . getWidth ( ) ; hudHeight = hud . getHeight ( ) ; skin = new Skin ( Gdx . files . internal ( <str> ) ) ; final List < String > modelsList = new List ( skin ) ; modelsList . setItems ( models ) ; modelsList . addListener ( new ClickListener ( ) { @Override public void clicked ( InputEvent event , float x , float y ) { if ( ! modelsWindow . isCollapsed ( ) & & getTapCount ( ) = = <int> ) { onModelClicked ( modelsList . getSelected ( ) ) ; modelsWindow . collapse ( ) ; } } } ) ; modelsWindow = addListWindow ( <str> , modelsList , <int> , - <int> ) ; fpsLabel = new Label ( <str> , skin ) ; hud . addActor ( fpsLabel ) ; gridCheckBox = new CheckBox ( <str> , skin ) ; gridCheckBox . setChecked ( showAxes ) ; gridCheckBox . addListener ( new ChangeListener ( ) { @Override public void changed ( ChangeEvent event , Actor actor ) { showAxes = gridCheckBox . isChecked ( ) ; } } ) ; gridCheckBox . setPosition ( hudWidth - gridCheckBox . getWidth ( ) , <int> ) ; hud . addActor ( gridCheckBox ) ; rotateCheckBox = new CheckBox ( <str> , skin ) ; rotateCheckBox . setChecked ( true ) ; rotateCheckBox . setPosition ( hudWidth - rotateCheckBox . getWidth ( ) , gridCheckBox . getHeight ( ) ) ; hud . addActor ( rotateCheckBox ) ; moveCheckBox = new CheckBox ( <str> , skin ) ; moveCheckBox . setChecked ( false ) ; moveCheckBox . setPosition ( hudWidth - moveCheckBox . getWidth ( ) , rotateCheckBox . getTop ( ) ) ; hud . addActor ( moveCheckBox ) ; } protected CollapsableWindow addListWindow ( String title , List list , float x , float y ) { CollapsableWindow window = new CollapsableWindow ( title , skin ) ; window . row ( ) ; ScrollPane pane = new ScrollPane ( list , skin ) ; pane . setFadeScrollBars ( false ) ; window . add ( pane ) ; window . pack ( ) ; window . pack ( ) ; if ( window . getHeight ( ) > hudHeight ) { window . setHeight ( hudHeight ) ; } window . setX ( x < <int> ? hudWidth - ( window . getWidth ( ) - ( x + <int> ) ) : x ) ; window . setY ( y < <int> ? hudHeight - ( window . getHeight ( ) - ( y + <int> ) ) : y ) ; window . layout ( ) ; window . collapse ( ) ; hud . addActor ( window ) ; pane . setScrollX ( <int> ) ; pane . setScrollY ( <int> ) ; return window ; } protected abstract void onModelClicked ( final String name ) ; protected void getStatus ( final StringBuilder stringBuilder ) { stringBuilder . append ( <str> ) . append ( Gdx . graphics . getFramesPerSecond ( ) ) ; if ( loading ) stringBuilder . append ( <str> ) ; } protected float rotation , movement ; @Override public void render ( ) { transform . idt ( ) ; if ( rotateCheckBox . isChecked ( ) ) transform . rotate ( Vector3 . Y , rotation = ( rotation + rotationSpeed * Gdx . graphics . getRawDeltaTime ( ) ) % <int> ) ; if ( moveCheckBox . isChecked ( ) ) { movement = ( movement + moveSpeed * Gdx . graphics . getRawDeltaTime ( ) ) % <float> ; final float sm = MathUtils . sin ( movement * MathUtils . PI2 ) ; final float cm = MathUtils . cos ( movement * MathUtils . PI2 ) ; transform . trn ( <int> , moveRadius * cm , moveRadius * sm ) ; } super . render ( ) ; stringBuilder . setLength ( <int> ) ; getStatus ( stringBuilder ) ; fpsLabel . setText ( stringBuilder ) ; hud . act ( Gdx . graphics . getDeltaTime ( ) ) ; hud . draw ( ) ; } @Override public void resize ( int width , int height ) { super . resize ( width , height ) ; hud . getViewport ( ) . update ( width , height , true ) ; hudWidth = hud . getWidth ( ) ; hudHeight = hud . getHeight ( ) ; } @Override public void dispose ( ) { super . dispose ( ) ; skin . dispose ( ) ; skin = null ; } public static class CollapsableWindow extends Window { private boolean collapsed ; private float collapseHeight = <int> f ; private float expandHeight ; public CollapsableWindow ( String title , Skin skin ) { super ( title , skin ) ; addListener ( new ClickListener ( ) { @Override public void clicked ( InputEvent event , float x , float y ) { if ( getTapCount ( ) = = <int> & & getHeight ( ) - y < = getPadTop ( ) & & y < getHeight ( ) & & x > <int> & & x < getWidth ( ) ) toggleCollapsed ( ) ; } } ) ; } public void expand ( ) { if ( ! collapsed ) return ; setHeight ( expandHeight ) ; setY ( getY ( ) - expandHeight + collapseHeight ) ; collapsed = false ; } public void collapse ( ) { if ( collapsed ) return ; expandHeight = getHeight ( ) ; setHeight ( collapseHeight ) ; setY ( getY ( ) + expandHeight - collapseHeight ) ; collapsed = true ; if ( getStage ( ) ! = null ) getStage ( ) . setScrollFocus ( null ) ; } public void toggleCollapsed ( ) { if ( collapsed ) expand ( ) ; else collapse ( ) ; } public boolean isCollapsed ( ) { return collapsed ; } } } 

package com . badlogic . gdx . tests . box2d ; import com . badlogic . gdx . math . Vector2 ; import com . badlogic . gdx . physics . box2d . Body ; import com . badlogic . gdx . physics . box2d . BodyDef ; import com . badlogic . gdx . physics . box2d . BodyDef . BodyType ; import com . badlogic . gdx . physics . box2d . EdgeShape ; import com . badlogic . gdx . physics . box2d . PolygonShape ; import com . badlogic . gdx . physics . box2d . World ; public class ContinuousTest extends Box2DTest { int m_stepCount = <int> ; Body m_body ; float m_angularVelocity ; @Override protected void createWorld ( World world ) { { BodyDef bd = new BodyDef ( ) ; bd . position . set ( <int> , <int> ) ; Body body = world . createBody ( bd ) ; EdgeShape shape = new EdgeShape ( ) ; shape . set ( new Vector2 ( - <int> , <int> ) , new Vector2 ( <int> , <int> ) ) ; body . createFixture ( shape , <int> ) ; shape . dispose ( ) ; PolygonShape poly = new PolygonShape ( ) ; poly . setAsBox ( <float> , <float> , new Vector2 ( <float> , <float> ) , <int> ) ; body . createFixture ( poly , <int> ) ; poly . dispose ( ) ; } { BodyDef bd = new BodyDef ( ) ; bd . type = BodyType . DynamicBody ; bd . position . set ( <int> , <int> ) ; PolygonShape shape = new PolygonShape ( ) ; shape . setAsBox ( <int> , <float> ) ; m_body = world . createBody ( bd ) ; m_body . createFixture ( shape , <int> ) ; m_angularVelocity = <float> ; m_body . setLinearVelocity ( new Vector2 ( <int> , - <int> ) ) ; m_body . setAngularVelocity ( m_angularVelocity ) ; shape . dispose ( ) ; } } private void launch ( ) { m_body . setTransform ( new Vector2 ( <int> , <int> ) , <int> ) ; m_angularVelocity = ( float ) Math . random ( ) * <int> - <int> ; m_body . setLinearVelocity ( new Vector2 ( <int> , - <int> ) ) ; m_body . setAngularVelocity ( m_angularVelocity ) ; } public void render ( ) { super . render ( ) ; m_stepCount + + ; if ( m_stepCount % <int> = = <int> ) launch ( ) ; } } 

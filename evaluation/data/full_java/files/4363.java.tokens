package org . eclipse . debug . internal . ui . viewers ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . eclipse . debug . internal . ui . viewers . provisional . IChildrenRequestMonitor ; class ChildrenRequestMonitor extends AsynchronousRequestMonitor implements IChildrenRequestMonitor { private boolean fFirstUpdate = true ; private List < Object > fChildren = new ArrayList < Object > ( ) ; ChildrenRequestMonitor ( ModelNode parent , AsynchronousModel model ) { super ( parent , model ) ; } @Override public void addChild ( Object child ) { synchronized ( fChildren ) { fChildren . add ( child ) ; } scheduleViewerUpdate ( <int> ) ; } @Override public void addChildren ( Object [ ] children ) { synchronized ( fChildren ) { for ( int i = <int> ; i < children . length ; i + + ) { fChildren . add ( children [ i ] ) ; } } scheduleViewerUpdate ( <int> ) ; } @Override protected boolean contains ( AsynchronousRequestMonitor update ) { return ( update instanceof ChildrenRequestMonitor ) & & contains ( update . getNode ( ) ) ; } @Override protected void performUpdate ( ) { synchronized ( fChildren ) { if ( fFirstUpdate ) { getModel ( ) . setChildren ( getNode ( ) , fChildren ) ; fFirstUpdate = false ; } else { for ( Iterator < Object > iter = fChildren . iterator ( ) ; iter . hasNext ( ) ; ) { Object child = iter . next ( ) ; getModel ( ) . add ( getNode ( ) , child ) ; } } fChildren . clear ( ) ; } } } 

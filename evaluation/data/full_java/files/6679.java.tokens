package org . elasticsearch . index . query ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . spans . SpanQuery ; import org . apache . lucene . search . spans . SpanTermQuery ; import org . apache . lucene . util . BytesRef ; import org . elasticsearch . common . lucene . BytesRefs ; import org . elasticsearch . index . mapper . MappedFieldType ; import java . io . IOException ; public class SpanTermQueryBuilder extends BaseTermQueryBuilder < SpanTermQueryBuilder > implements SpanQueryBuilder < SpanTermQueryBuilder > { public static final String NAME = <str> ; static final SpanTermQueryBuilder PROTOTYPE = new SpanTermQueryBuilder ( <str> , <str> ) ; public SpanTermQueryBuilder ( String name , String value ) { super ( name , ( Object ) value ) ; } public SpanTermQueryBuilder ( String name , int value ) { super ( name , ( Object ) value ) ; } public SpanTermQueryBuilder ( String name , long value ) { super ( name , ( Object ) value ) ; } public SpanTermQueryBuilder ( String name , float value ) { super ( name , ( Object ) value ) ; } public SpanTermQueryBuilder ( String name , double value ) { super ( name , ( Object ) value ) ; } public SpanTermQueryBuilder ( String name , Object value ) { super ( name , value ) ; } @Override protected SpanQuery doToQuery ( QueryShardContext context ) throws IOException { BytesRef valueBytes = null ; String fieldName = this . fieldName ; MappedFieldType mapper = context . fieldMapper ( fieldName ) ; if ( mapper ! = null ) { fieldName = mapper . names ( ) . indexName ( ) ; valueBytes = mapper . indexedValueForSearch ( value ) ; } if ( valueBytes = = null ) { valueBytes = BytesRefs . toBytesRef ( this . value ) ; } return new SpanTermQuery ( new Term ( fieldName , valueBytes ) ) ; } @Override protected SpanTermQueryBuilder createBuilder ( String fieldName , Object value ) { return new SpanTermQueryBuilder ( fieldName , value ) ; } @Override public String getWriteableName ( ) { return NAME ; } } 

package org . nd4j . linalg . jcublas . buffer . allocation ; import com . google . common . collect . Table ; import jcuda . Pointer ; import jcuda . runtime . JCuda ; import org . apache . commons . lang3 . tuple . Triple ; import org . nd4j . linalg . api . buffer . DataBuffer ; import org . nd4j . linalg . jcublas . buffer . DevicePointerInfo ; import org . nd4j . linalg . jcublas . buffer . JCudaBuffer ; import org . nd4j . linalg . jcublas . context . ContextHolder ; import org . nd4j . linalg . jcublas . context . CudaContext ; import org . nd4j . linalg . util . NioUtil ; import java . nio . ByteBuffer ; import java . nio . ByteOrder ; public class PinnedMemoryStrategy implements MemoryStrategy { public PinnedMemoryStrategy ( ) { } @Override public void getData ( DataBuffer buffer , int offset , int stride , int length , DataBuffer get , CudaContext ctx , int getStride , int getOffset ) { buffer . copyAtStride ( get , length , stride , getStride , offset , getOffset ) ; } @Override public void getData ( DataBuffer buffer , int offset , DataBuffer get , CudaContext ctx ) { getData ( buffer , offset , <int> , buffer . length ( ) , get , ctx , <int> , <int> ) ; } @Override public void setData ( Pointer buffer , int offset , int stride , int length , Pointer hostPointer ) { } @Override public void setData ( DataBuffer buffer , int offset , int stride , int length ) { } @Override public void setData ( DataBuffer buffer , int offset ) { } @Override public Object copyToHost ( DataBuffer copy , int offset , CudaContext context ) { JCudaBuffer buf2 = ( JCudaBuffer ) copy ; DevicePointerInfo devicePointerInfo = buf2 . getPointersToContexts ( ) . get ( Thread . currentThread ( ) . getName ( ) , Triple . of ( offset , buf2 . length ( ) , <int> ) ) ; HostDevicePointer hostDevicePointer = devicePointerInfo . getPointers ( ) ; Pointer hostPointer = hostDevicePointer . getHostPointer ( ) ; ByteBuffer pointer = hostPointer . getByteBuffer ( <int> , copy . getElementSize ( ) * copy . length ( ) ) . order ( ByteOrder . nativeOrder ( ) ) ; ByteBuffer bufferNio = copy . asNio ( ) ; pointer . flip ( ) ; bufferNio . put ( pointer ) ; return devicePointerInfo ; } @Override public Object copyToHost ( DataBuffer copy , int offset , int stride , int length , CudaContext context , int hostOffset , int hostStride ) { ByteBuffer nio = copy . asNio ( ) ; JCudaBuffer buf2 = ( JCudaBuffer ) copy ; DevicePointerInfo devicePointerInfo = buf2 . getPointersToContexts ( ) . get ( Thread . currentThread ( ) . getName ( ) , Triple . of ( offset , length , stride ) ) ; HostDevicePointer hostDevicePointer = devicePointerInfo . getPointers ( ) ; Pointer hostPointer = hostDevicePointer . getHostPointer ( ) ; ByteBuffer pointer = hostPointer . getByteBuffer ( <int> , copy . length ( ) * copy . getElementSize ( ) ) ; NioUtil . copyAtStride ( length , getBufferType ( copy ) , pointer , offset , stride , nio , hostOffset , hostStride ) ; return devicePointerInfo ; } @Override public Object alloc ( DataBuffer buffer , int stride , int offset , int length , boolean initData ) { ContextHolder . getInstance ( ) . setContext ( ) ; Pointer devicePointer = new Pointer ( ) ; Pointer hostPointer = new Pointer ( ) ; JCuda . cudaHostAlloc ( hostPointer , buffer . getElementSize ( ) * length , JCuda . cudaHostAllocMapped ) ; JCuda . cudaHostGetDevicePointer ( devicePointer , hostPointer , <int> ) ; DevicePointerInfo devicePointerInfo = new DevicePointerInfo ( new HostDevicePointer ( hostPointer , devicePointer ) , length , stride , offset , false ) ; if ( initData ) { ByteBuffer pointer = hostPointer . getByteBuffer ( <int> , buffer . getElementSize ( ) * buffer . length ( ) ) ; pointer . order ( ByteOrder . nativeOrder ( ) ) ; NioUtil . copyAtStride ( buffer . length ( ) , getBufferType ( buffer ) , buffer . asNio ( ) , offset , stride , pointer , <int> , <int> ) ; } return devicePointerInfo ; } private NioUtil . BufferType getBufferType ( DataBuffer buffer ) { switch ( buffer . dataType ( ) ) { case DOUBLE : return NioUtil . BufferType . DOUBLE ; case INT : return NioUtil . BufferType . FLOAT ; case FLOAT : return NioUtil . BufferType . FLOAT ; default : throw new UnsupportedOperationException ( <str> ) ; } } @Override public void free ( DataBuffer buffer , int offset , int length ) { JCudaBuffer buf2 = ( JCudaBuffer ) buffer ; Table < String , Triple < Integer , Integer , Integer > , DevicePointerInfo > pointers = buf2 . getPointersToContexts ( ) ; DevicePointerInfo devicePointerInfo = pointers . get ( Thread . currentThread ( ) . getName ( ) , Triple . of ( offset , length , <int> ) ) ; if ( ! devicePointerInfo . isFreed ( ) ) { JCuda . cudaFreeHost ( devicePointerInfo . getPointers ( ) . getDevicePointer ( ) ) ; devicePointerInfo . setFreed ( true ) ; } } @Override public void validate ( DataBuffer buffer , CudaContext context ) throws Exception { } } 

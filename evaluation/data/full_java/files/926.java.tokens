package org . apache . cassandra . serializers ; import java . nio . ByteBuffer ; import java . nio . charset . StandardCharsets ; public class UTF8Serializer extends AbstractTextSerializer { public static final UTF8Serializer instance = new UTF8Serializer ( ) ; private UTF8Serializer ( ) { super ( StandardCharsets . UTF_8 ) ; } public void validate ( ByteBuffer bytes ) throws MarshalException { if ( ! UTF8Validator . validate ( bytes ) ) throw new MarshalException ( <str> ) ; } static class UTF8Validator { enum State { START , TWO , TWO_80 , THREE_a0bf , THREE_80bf_1 , THREE_80bf_2 , FOUR_90bf , FOUR_80bf_3 , } ; static boolean validate ( ByteBuffer buf ) { buf = buf . slice ( ) ; int b = <int> ; State state = State . START ; while ( buf . remaining ( ) > <int> ) { b = buf . get ( ) ; switch ( state ) { case START : if ( b > = <int> ) { if ( b > <int> ) return false ; } else if ( ( b > > <int> ) = = - <int> ) { if ( b = = ( byte ) <hex> ) state = State . TWO_80 ; else if ( ( b & <hex> ) = = <int> ) return false ; state = State . TWO ; } else if ( ( b > > <int> ) = = - <int> ) { if ( b = = ( byte ) <hex> ) state = State . THREE_a0bf ; else state = State . THREE_80bf_2 ; break ; } else if ( ( b > > <int> ) = = - <int> ) { if ( b = = ( byte ) <hex> ) state = State . FOUR_90bf ; else if ( b = = ( byte ) <hex> ) state = State . FOUR_80bf_3 ; else state = State . FOUR_80bf_3 ; break ; } else return false ; break ; case TWO : if ( ( b & <hex> ) ! = <hex> ) return false ; state = State . START ; break ; case TWO_80 : if ( b ! = ( byte ) <hex> ) return false ; state = State . START ; break ; case THREE_a0bf : if ( ( b & <hex> ) = = <hex> ) return false ; state = State . THREE_80bf_1 ; break ; case THREE_80bf_1 : if ( ( b & <hex> ) ! = <hex> ) return false ; state = State . START ; break ; case THREE_80bf_2 : if ( ( b & <hex> ) ! = <hex> ) return false ; state = State . THREE_80bf_1 ; break ; case FOUR_90bf : if ( ( b & <hex> ) = = <int> ) return false ; state = State . THREE_80bf_2 ; break ; case FOUR_80bf_3 : if ( ( b & <hex> ) ! = <hex> ) return false ; state = State . THREE_80bf_2 ; break ; default : return false ; } } return state = = State . START ; } } } 

package org . gradle . api . internal . artifacts . ivyservice ; import org . gradle . api . UncheckedIOException ; import org . gradle . api . artifacts . PublishException ; import org . gradle . api . internal . artifacts . ModuleVersionPublisher ; import org . gradle . internal . component . external . model . DefaultIvyModulePublishMetaData ; import org . gradle . internal . component . external . model . IvyModuleArtifactPublishMetaData ; import org . gradle . internal . component . external . model . IvyModulePublishMetaData ; import org . gradle . internal . component . model . IvyArtifactName ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ; import java . io . IOException ; import java . util . List ; public class DefaultIvyDependencyPublisher implements IvyDependencyPublisher { private static Logger logger = LoggerFactory . getLogger ( DefaultIvyDependencyPublisher . class ) ; public void publish ( List < ModuleVersionPublisher > publishResolvers , IvyModulePublishMetaData publishMetaData ) { try { DefaultIvyModulePublishMetaData publication = new DefaultIvyModulePublishMetaData ( publishMetaData . getId ( ) , publishMetaData . getModuleDescriptor ( ) ) ; for ( IvyModuleArtifactPublishMetaData artifact : publishMetaData . getArtifacts ( ) ) { addPublishedArtifact ( artifact , publication ) ; } for ( ModuleVersionPublisher publisher : publishResolvers ) { logger . info ( <str> , publisher ) ; publisher . publish ( publication ) ; } } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } } private void addPublishedArtifact ( IvyModuleArtifactPublishMetaData artifact , DefaultIvyModulePublishMetaData publication ) { if ( checkArtifactFileExists ( artifact ) ) { publication . addArtifact ( artifact ) ; } } private boolean checkArtifactFileExists ( IvyModuleArtifactPublishMetaData artifact ) { File artifactFile = artifact . getFile ( ) ; if ( artifactFile . exists ( ) ) { return true ; } if ( ! isSigningArtifact ( artifact . getArtifactName ( ) ) ) { throw new PublishException ( String . format ( <str> , artifact . getId ( ) , artifactFile ) ) ; } return false ; } private boolean isSigningArtifact ( IvyArtifactName artifact ) { return artifact . getType ( ) . endsWith ( <str> ) | | artifact . getType ( ) . endsWith ( <str> ) ; } } 

package org . elasticsearch . index . query ; import org . apache . lucene . index . Term ; import org . apache . lucene . search . Query ; import org . apache . lucene . search . TermQuery ; import org . elasticsearch . common . lucene . BytesRefs ; import org . elasticsearch . index . mapper . MappedFieldType ; import java . io . IOException ; public class TermQueryBuilder extends BaseTermQueryBuilder < TermQueryBuilder > { public static final String NAME = <str> ; static final TermQueryBuilder PROTOTYPE = new TermQueryBuilder ( <str> , <str> ) ; public TermQueryBuilder ( String fieldName , String value ) { super ( fieldName , ( Object ) value ) ; } public TermQueryBuilder ( String fieldName , int value ) { super ( fieldName , ( Object ) value ) ; } public TermQueryBuilder ( String fieldName , long value ) { super ( fieldName , ( Object ) value ) ; } public TermQueryBuilder ( String fieldName , float value ) { super ( fieldName , ( Object ) value ) ; } public TermQueryBuilder ( String fieldName , double value ) { super ( fieldName , ( Object ) value ) ; } public TermQueryBuilder ( String fieldName , boolean value ) { super ( fieldName , ( Object ) value ) ; } public TermQueryBuilder ( String fieldName , Object value ) { super ( fieldName , value ) ; } @Override protected Query doToQuery ( QueryShardContext context ) throws IOException { Query query = null ; MappedFieldType mapper = context . fieldMapper ( this . fieldName ) ; if ( mapper ! = null ) { query = mapper . termQuery ( this . value , context ) ; } if ( query = = null ) { query = new TermQuery ( new Term ( this . fieldName , BytesRefs . toBytesRef ( this . value ) ) ) ; } return query ; } @Override protected TermQueryBuilder createBuilder ( String fieldName , Object value ) { return new TermQueryBuilder ( fieldName , value ) ; } @Override public String getWriteableName ( ) { return NAME ; } } 

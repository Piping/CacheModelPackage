package org . gradle . platform . base . internal . registry ; import com . google . common . collect . ImmutableList ; import org . gradle . api . Action ; import org . gradle . language . base . plugins . ComponentModelBasePlugin ; import org . gradle . model . internal . core . * ; import org . gradle . model . internal . inspect . MethodRuleDefinition ; import org . gradle . model . internal . manage . schema . ModelSchema ; import org . gradle . model . internal . manage . schema . ModelSchemaStore ; import org . gradle . model . internal . type . ModelType ; import org . gradle . platform . base . ComponentSpec ; import org . gradle . platform . base . ComponentType ; import org . gradle . platform . base . ComponentTypeBuilder ; import org . gradle . platform . base . component . BaseComponentSpec ; import org . gradle . platform . base . component . internal . ComponentSpecFactory ; import org . gradle . platform . base . internal . builder . TypeBuilderFactory ; import org . gradle . platform . base . internal . builder . TypeBuilderInternal ; public class ComponentTypeModelRuleExtractor extends TypeModelRuleExtractor < ComponentType , ComponentSpec , BaseComponentSpec > { public ComponentTypeModelRuleExtractor ( ModelSchemaStore schemaStore ) { super ( <str> , ComponentSpec . class , BaseComponentSpec . class , ComponentTypeBuilder . class , schemaStore , new TypeBuilderFactory < ComponentSpec > ( ) { @Override public TypeBuilderInternal < ComponentSpec > create ( ModelSchema < ? extends ComponentSpec > schema ) { return new DefaultComponentTypeBuilder ( schema ) ; } } ) ; } @Override protected < P extends ComponentSpec , I extends BaseComponentSpec > ExtractedModelRule createRegistration ( final MethodRuleDefinition < ? , ? > ruleDefinition , final ModelType < P > publicModelType , final ModelType < I > implModelType , final TypeBuilderInternal < ComponentSpec > builder ) { ModelAction < ComponentSpecFactory > regAction = NoInputsModelAction . of ( ModelReference . of ( ComponentSpecFactory . class ) , ruleDefinition . getDescriptor ( ) , new Action < ComponentSpecFactory > ( ) { @Override public void execute ( ComponentSpecFactory components ) { components . register ( publicModelType , implModelType , builder . getInternalViews ( ) , ruleDefinition . getDescriptor ( ) ) ; } } ) ; return new ExtractedModelAction ( ModelActionRole . Defaults , ImmutableList . < Class < ? > > of ( ComponentModelBasePlugin . class ) , regAction ) ; } private static class DefaultComponentTypeBuilder extends AbstractTypeBuilder < ComponentSpec > implements ComponentTypeBuilder < ComponentSpec > { private DefaultComponentTypeBuilder ( ModelSchema < ? extends ComponentSpec > schema ) { super ( ComponentType . class , schema ) ; } } } 

package org . elasticsearch . script ; import org . apache . lucene . search . Scorer ; import org . elasticsearch . index . fielddata . ScriptDocValues ; import org . elasticsearch . search . lookup . * ; import java . io . IOException ; import java . util . Map ; public abstract class AbstractSearchScript extends AbstractExecutableScript implements LeafSearchScript { private LeafSearchLookup lookup ; private Scorer scorer ; protected final LeafDocLookup doc ( ) { return lookup . doc ( ) ; } protected final float score ( ) throws IOException { return scorer . score ( ) ; } protected ScriptDocValues . Strings docFieldStrings ( String field ) { return ( ScriptDocValues . Strings ) doc ( ) . get ( field ) ; } protected ScriptDocValues . Doubles docFieldDoubles ( String field ) { return ( ScriptDocValues . Doubles ) doc ( ) . get ( field ) ; } protected ScriptDocValues . Longs docFieldLongs ( String field ) { return ( ScriptDocValues . Longs ) doc ( ) . get ( field ) ; } protected final SourceLookup source ( ) { return lookup . source ( ) ; } protected final LeafIndexLookup indexLookup ( ) { return lookup . indexLookup ( ) ; } protected final LeafFieldsLookup fields ( ) { return lookup . fields ( ) ; } void setLookup ( LeafSearchLookup lookup ) { this . lookup = lookup ; } @Override public void setScorer ( Scorer scorer ) { this . scorer = scorer ; } @Override public void setDocument ( int doc ) { lookup . setDocument ( doc ) ; } @Override public void setSource ( Map < String , Object > source ) { lookup . source ( ) . setSource ( source ) ; } @Override public float runAsFloat ( ) { return ( ( Number ) run ( ) ) . floatValue ( ) ; } @Override public long runAsLong ( ) { return ( ( Number ) run ( ) ) . longValue ( ) ; } @Override public double runAsDouble ( ) { return ( ( Number ) run ( ) ) . doubleValue ( ) ; } } 

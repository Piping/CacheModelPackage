package org . eclipse . debug . core ; import java . util . Map ; import org . eclipse . core . resources . IFile ; import org . eclipse . core . runtime . CoreException ; import org . eclipse . debug . core . model . IDebugTarget ; import org . eclipse . debug . core . model . IPersistableSourceLocator ; import org . eclipse . debug . core . model . IProcess ; import org . eclipse . debug . core . sourcelookup . ISourceContainerType ; import org . eclipse . debug . core . sourcelookup . ISourcePathComputer ; public interface ILaunchManager { public static final String RUN_MODE = <str> ; public static final String DEBUG_MODE = <str> ; public static final String PROFILE_MODE = <str> ; public static final String ATTR_PRIVATE = <str> ; public static final String ATTR_ENVIRONMENT_VARIABLES = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public static final String ATTR_APPEND_ENVIRONMENT_VARIABLES = DebugPlugin . getUniqueIdentifier ( ) + <str> ; public void addLaunch ( ILaunch launch ) ; public void addLaunchConfigurationListener ( ILaunchConfigurationListener listener ) ; public void addLaunches ( ILaunch [ ] launches ) ; public void addLaunchListener ( ILaunchesListener listener ) ; public void addLaunchListener ( ILaunchListener listener ) ; @Deprecated public String generateUniqueLaunchConfigurationNameFrom ( String namePrefix ) ; public String generateLaunchConfigurationName ( String namePrefix ) ; public boolean isValidLaunchConfigurationName ( String configname ) throws IllegalArgumentException ; public IDebugTarget [ ] getDebugTargets ( ) ; public String [ ] getEnvironment ( ILaunchConfiguration configuration ) throws CoreException ; public String getEncoding ( ILaunchConfiguration configuration ) throws CoreException ; public ILaunchConfiguration getLaunchConfiguration ( IFile file ) ; public ILaunchConfiguration getLaunchConfiguration ( String memento ) throws CoreException ; public ILaunchConfiguration [ ] getLaunchConfigurations ( ) throws CoreException ; public ILaunchConfiguration [ ] getLaunchConfigurations ( ILaunchConfigurationType type ) throws CoreException ; public ILaunchConfigurationType getLaunchConfigurationType ( String id ) ; public ILaunchConfigurationType [ ] getLaunchConfigurationTypes ( ) ; public ILaunch [ ] getLaunches ( ) ; public ILaunchMode getLaunchMode ( String mode ) ; public ILaunchMode [ ] getLaunchModes ( ) ; public ILaunchConfiguration [ ] getMigrationCandidates ( ) throws CoreException ; public ILaunchConfiguration getMovedFrom ( ILaunchConfiguration addedConfiguration ) ; public ILaunchConfiguration getMovedTo ( ILaunchConfiguration removedConfiguration ) ; public Map < String , String > getNativeEnvironment ( ) ; public Map < String , String > getNativeEnvironmentCasePreserved ( ) ; public IProcess [ ] getProcesses ( ) ; public ISourceContainerType getSourceContainerType ( String id ) ; public ISourceContainerType [ ] getSourceContainerTypes ( ) ; public ISourcePathComputer getSourcePathComputer ( ILaunchConfiguration configuration ) throws CoreException ; public ISourcePathComputer getSourcePathComputer ( String id ) ; public boolean isExistingLaunchConfigurationName ( String name ) throws CoreException ; public boolean isRegistered ( ILaunch launch ) ; public IPersistableSourceLocator newSourceLocator ( String identifier ) throws CoreException ; public void removeLaunch ( ILaunch launch ) ; public void removeLaunchConfigurationListener ( ILaunchConfigurationListener listener ) ; public void removeLaunches ( ILaunch [ ] launches ) ; public void removeLaunchListener ( ILaunchesListener listener ) ; public void removeLaunchListener ( ILaunchListener listener ) ; } 

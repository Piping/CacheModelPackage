package com . badlogic . gdx . tests ; import static com . badlogic . gdx . scenes . scene2d . actions . Actions . * ; import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . graphics . Color ; import com . badlogic . gdx . graphics . GL20 ; import com . badlogic . gdx . graphics . Texture ; import com . badlogic . gdx . graphics . g2d . Batch ; import com . badlogic . gdx . graphics . g2d . TextureRegion ; import com . badlogic . gdx . scenes . scene2d . Actor ; import com . badlogic . gdx . scenes . scene2d . InputEvent ; import com . badlogic . gdx . scenes . scene2d . InputListener ; import com . badlogic . gdx . scenes . scene2d . Stage ; import com . badlogic . gdx . scenes . scene2d . actions . FloatAction ; import com . badlogic . gdx . scenes . scene2d . ui . CheckBox ; import com . badlogic . gdx . scenes . scene2d . ui . HorizontalGroup ; import com . badlogic . gdx . scenes . scene2d . ui . ImageTextButton ; import com . badlogic . gdx . scenes . scene2d . ui . ImageTextButton . ImageTextButtonStyle ; import com . badlogic . gdx . scenes . scene2d . ui . Label ; import com . badlogic . gdx . scenes . scene2d . ui . Skin ; import com . badlogic . gdx . scenes . scene2d . ui . Table ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton ; import com . badlogic . gdx . scenes . scene2d . ui . TextButton . TextButtonStyle ; import com . badlogic . gdx . scenes . scene2d . ui . VerticalGroup ; import com . badlogic . gdx . scenes . scene2d . ui . Window ; import com . badlogic . gdx . scenes . scene2d . utils . ActorGestureListener ; import com . badlogic . gdx . scenes . scene2d . utils . TiledDrawable ; import com . badlogic . gdx . tests . utils . GdxTest ; public class Scene2dTest extends GdxTest { Stage stage ; private FloatAction meow = new FloatAction ( <int> , <int> ) ; private TiledDrawable patch ; public void create ( ) { stage = new Stage ( ) ; Gdx . input . setInputProcessor ( stage ) ; final TextureRegion region = new TextureRegion ( new Texture ( <str> ) ) ; final Actor actor = new Actor ( ) { public void draw ( Batch batch , float parentAlpha ) { Color color = getColor ( ) ; batch . setColor ( color . r , color . g , color . b , parentAlpha ) ; batch . draw ( region , getX ( ) , getY ( ) , getOriginX ( ) , getOriginY ( ) , getWidth ( ) , getHeight ( ) , getScaleX ( ) , getScaleY ( ) , getRotation ( ) ) ; } } ; actor . setBounds ( <int> , <int> , <int> , <int> ) ; actor . setOrigin ( <int> , <int> ) ; stage . addActor ( actor ) ; actor . addListener ( new InputListener ( ) { public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { System . out . println ( <str> ) ; return true ; } public void touchUp ( InputEvent event , float x , float y , int pointer , int button ) { System . out . println ( <str> + event . getTarget ( ) ) ; } } ) ; Skin skin = new Skin ( Gdx . files . internal ( <str> ) ) ; VerticalGroup g = new VerticalGroup ( ) . space ( <int> ) . reverse ( ) . pad ( <int> ) . fill ( ) ; for ( int i = <int> ; i < <int> ; i + + ) g . addActor ( new TextButton ( <str> + i , skin ) ) ; g . addActor ( new TextButton ( <str> , skin ) ) ; Table table = new Table ( ) . debug ( ) ; table . add ( g ) ; table . pack ( ) ; table . setPosition ( <int> , <int> ) ; stage . addActor ( table ) ; HorizontalGroup h = new HorizontalGroup ( ) . space ( <int> ) . reverse ( ) . pad ( <int> ) . fill ( ) ; for ( int i = <int> ; i < <int> ; i + + ) h . addActor ( new TextButton ( <str> + i , skin ) ) ; h . addActor ( new TextButton ( <str> , skin ) ) ; table = new Table ( ) . debug ( ) ; table . add ( h ) ; table . pack ( ) ; table . setPosition ( <int> , <int> ) ; stage . addActor ( table ) ; table . toFront ( ) ; final TextButton button = new TextButton ( <str> , skin ) ; button . addListener ( new ActorGestureListener ( ) { public boolean longPress ( Actor actor , float x , float y ) { System . out . println ( <str> + x + <str> + y ) ; return true ; } public void fling ( InputEvent event , float velocityX , float velocityY , int button ) { System . out . println ( <str> + velocityX + <str> + velocityY ) ; } public void zoom ( InputEvent event , float initialDistance , float distance ) { System . out . println ( <str> + initialDistance + <str> + distance ) ; } public void pan ( InputEvent event , float x , float y , float deltaX , float deltaY ) { event . getListenerActor ( ) . moveBy ( deltaX , deltaY ) ; if ( deltaX < <int> ) System . out . println ( <str> + deltaX + <str> + deltaY + <str> + event . getTarget ( ) ) ; } } ) ; button . setPosition ( <int> , <int> ) ; stage . addActor ( button ) ; meow . setDuration ( <int> ) ; actor . addAction ( forever ( sequence ( moveBy ( <int> , <int> , <int> ) , moveBy ( - <int> , <int> , <int> ) , run ( new Runnable ( ) { public void run ( ) { actor . setZIndex ( <int> ) ; } } ) ) ) ) ; patch = new TiledDrawable ( skin . getRegion ( <str> ) ) ; Window window = new Window ( <str> , skin ) ; Label lbl = new Label ( <str> , skin ) ; lbl . setWrap ( true ) ; window . row ( ) ; window . add ( lbl ) . width ( <int> ) ; window . pack ( ) ; window . pack ( ) ; stage . addActor ( window ) ; ImageTextButtonStyle style = new ImageTextButtonStyle ( skin . get ( <str> , TextButtonStyle . class ) ) ; style . imageUp = skin . getDrawable ( <str> ) ; ImageTextButton buttonLeft = new ImageTextButton ( <str> , style ) ; ImageTextButton buttonRight = new ImageTextButton ( <str> , style ) { { clearChildren ( ) ; add ( getLabel ( ) ) ; add ( getImage ( ) ) ; } } ; CheckBox checkBoxLeft = new CheckBox ( <str> , skin , <str> ) ; CheckBox checkBoxRight = new CheckBox ( <str> , skin , <str> ) { { clearChildren ( ) ; add ( getLabel ( ) ) ; add ( getImage ( ) ) ; } } ; buttonLeft . setPosition ( <int> , <int> ) ; buttonRight . setPosition ( <int> , <int> ) ; checkBoxLeft . setPosition ( <int> , <int> ) ; checkBoxRight . setPosition ( <int> , <int> ) ; stage . addActor ( buttonLeft ) ; stage . addActor ( buttonRight ) ; stage . addActor ( checkBoxLeft ) ; stage . addActor ( checkBoxRight ) ; buttonLeft . debug ( ) ; buttonRight . debug ( ) ; checkBoxLeft . debug ( ) ; checkBoxRight . debug ( ) ; } public void render ( ) { Gdx . gl . glClear ( GL20 . GL_COLOR_BUFFER_BIT ) ; stage . act ( Gdx . graphics . getDeltaTime ( ) ) ; stage . draw ( ) ; stage . getBatch ( ) . begin ( ) ; patch . draw ( stage . getBatch ( ) , <int> , <int> , <int> , <int> ) ; stage . getBatch ( ) . end ( ) ; } public void resize ( int width , int height ) { stage . getViewport ( ) . update ( width , height , true ) ; } public void dispose ( ) { stage . dispose ( ) ; } } 

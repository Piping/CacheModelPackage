package org . gradle . api . internal . tasks . testing . junit . result ; import org . apache . commons . io . IOUtils ; import org . gradle . api . Action ; import org . gradle . api . GradleException ; import org . gradle . api . logging . Logger ; import org . gradle . api . logging . Logging ; import org . gradle . util . Clock ; import org . gradle . internal . FileUtils ; import java . io . BufferedOutputStream ; import java . io . File ; import java . io . FileOutputStream ; import java . io . OutputStream ; import java . net . InetAddress ; import java . net . UnknownHostException ; public class Binary2JUnitXmlReportGenerator { private final File testResultsDir ; private final TestResultsProvider testResultsProvider ; JUnitXmlResultWriter saxWriter ; private final static Logger LOG = Logging . getLogger ( Binary2JUnitXmlReportGenerator . class ) ; public Binary2JUnitXmlReportGenerator ( File testResultsDir , TestResultsProvider testResultsProvider , TestOutputAssociation outputAssociation ) { this . testResultsDir = testResultsDir ; this . testResultsProvider = testResultsProvider ; this . saxWriter = new JUnitXmlResultWriter ( getHostname ( ) , testResultsProvider , outputAssociation ) ; } public void generate ( ) { Clock clock = new Clock ( ) ; testResultsProvider . visitClasses ( new Action < TestClassResult > ( ) { public void execute ( TestClassResult result ) { File file = new File ( testResultsDir , getReportFileName ( result ) ) ; OutputStream output = null ; try { output = new BufferedOutputStream ( new FileOutputStream ( file ) ) ; saxWriter . write ( result , output ) ; output . close ( ) ; } catch ( Exception e ) { throw new GradleException ( String . format ( <str> , result . getClassName ( ) , file ) , e ) ; } finally { IOUtils . closeQuietly ( output ) ; } } } ) ; LOG . info ( <str> , clock . getTime ( ) , testResultsDir ) ; } private String getReportFileName ( TestClassResult result ) { return <str> + FileUtils . toSafeFileName ( result . getClassName ( ) ) + <str> ; } private static String getHostname ( ) { try { return InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( UnknownHostException e ) { return <str> ; } } } 

package com . google . common . collect ; import com . google . common . annotations . GwtCompatible ; import java . io . Serializable ; import java . util . Collection ; import java . util . EnumSet ; @GwtCompatible ( serializable = true , emulated = true ) @SuppressWarnings ( <str> ) final class ImmutableEnumSet < E extends Enum < E > > extends ImmutableSet < E > { @SuppressWarnings ( <str> ) static ImmutableSet asImmutable ( EnumSet set ) { switch ( set . size ( ) ) { case <int> : return ImmutableSet . of ( ) ; case <int> : return ImmutableSet . of ( Iterables . getOnlyElement ( set ) ) ; default : return new ImmutableEnumSet ( set ) ; } } private final transient EnumSet < E > delegate ; private ImmutableEnumSet ( EnumSet < E > delegate ) { this . delegate = delegate ; } @Override boolean isPartialView ( ) { return false ; } @Override public UnmodifiableIterator < E > iterator ( ) { return Iterators . unmodifiableIterator ( delegate . iterator ( ) ) ; } @Override public int size ( ) { return delegate . size ( ) ; } @Override public boolean contains ( Object object ) { return delegate . contains ( object ) ; } @Override public boolean containsAll ( Collection < ? > collection ) { if ( collection instanceof ImmutableEnumSet < ? > ) { collection = ( ( ImmutableEnumSet < ? > ) collection ) . delegate ; } return delegate . containsAll ( collection ) ; } @Override public boolean isEmpty ( ) { return delegate . isEmpty ( ) ; } @Override public boolean equals ( Object object ) { if ( object = = this ) { return true ; } if ( object instanceof ImmutableEnumSet ) { object = ( ( ImmutableEnumSet < ? > ) object ) . delegate ; } return delegate . equals ( object ) ; } @Override boolean isHashCodeFast ( ) { return true ; } private transient int hashCode ; @Override public int hashCode ( ) { int result = hashCode ; return ( result = = <int> ) ? hashCode = delegate . hashCode ( ) : result ; } @Override public String toString ( ) { return delegate . toString ( ) ; } @Override Object writeReplace ( ) { return new EnumSerializedForm < E > ( delegate ) ; } private static class EnumSerializedForm < E extends Enum < E > > implements Serializable { final EnumSet < E > delegate ; EnumSerializedForm ( EnumSet < E > delegate ) { this . delegate = delegate ; } Object readResolve ( ) { return new ImmutableEnumSet < E > ( delegate . clone ( ) ) ; } private static final long serialVersionUID = <int> ; } } 

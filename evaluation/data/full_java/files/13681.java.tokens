package org . gradle . language . nativeplatform . internal . incremental . sourceparser ; import org . apache . tools . ant . filters . BaseFilterReader ; import java . io . IOException ; import java . io . Reader ; public class PreprocessingReader extends BaseFilterReader { private int [ ] readAheadChars = new int [ <int> ] ; private boolean inString ; private boolean quoted ; public PreprocessingReader ( Reader in ) { super ( in ) ; readAheadChars [ <int> ] = - <int> ; readAheadChars [ <int> ] = - <int> ; } public int read ( ) throws IOException { int ch = next ( ) ; if ( ch = = <str> ) { if ( discardNewLine ( ) ) { return read ( ) ; } } if ( ch = = <str> & & ! quoted ) { inString = ! inString ; quoted = false ; } else if ( ch = = <str> ) { quoted = ! quoted ; } else { quoted = false ; if ( ! inString ) { if ( ch = = <str> ) { ch = next ( ) ; if ( ch = = <str> ) { while ( ch ! = <str> & & ch ! = - <int> & & ch ! = <str> ) { ch = next ( ) ; } } else if ( ch = = <str> ) { while ( ch ! = - <int> ) { ch = next ( ) ; if ( ch = = <str> ) { ch = next ( ) ; while ( ch = = <str> ) { ch = next ( ) ; } if ( ch = = <str> ) { ch = <str> ; break ; } } } } else { pushBack ( ch ) ; ch = <str> ; } } } } return ch ; } private boolean discardNewLine ( ) throws IOException { int nextChar = next ( ) ; if ( nextChar = = <str> ) { return true ; } else if ( nextChar = = <str> ) { int followingChar = next ( ) ; if ( followingChar = = <str> ) { return true ; } pushBack ( nextChar ) ; pushBack ( followingChar ) ; return false ; } else { pushBack ( nextChar ) ; return false ; } } private int next ( ) throws IOException { if ( readAheadChars [ <int> ] ! = - <int> ) { int ch = readAheadChars [ <int> ] ; readAheadChars [ <int> ] = readAheadChars [ <int> ] ; readAheadChars [ <int> ] = - <int> ; return ch ; } return in . read ( ) ; } private void pushBack ( int ch ) { if ( readAheadChars [ <int> ] ! = - <int> ) { throw new IllegalStateException ( ) ; } if ( readAheadChars [ <int> ] ! = - <int> ) { readAheadChars [ <int> ] = ch ; } else { readAheadChars [ <int> ] = ch ; } } } 

package com . google . common . hash ; import com . google . common . base . Charsets ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . ImmutableSet ; import junit . framework . TestCase ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . util . Arrays ; public class MessageDigestHashFunctionTest extends TestCase { private static final ImmutableSet < String > INPUTS = ImmutableSet . of ( <str> , <str> , <str> ) ; private static final ImmutableMap < String , HashFunction > ALGORITHMS = new ImmutableMap . Builder < String , HashFunction > ( ) . put ( <str> , Hashing . md5 ( ) ) . put ( <str> , Hashing . sha1 ( ) ) . put ( <str> , Hashing . sha1 ( ) ) . put ( <str> , Hashing . sha1 ( ) ) . put ( <str> , Hashing . sha1 ( ) ) . put ( <str> , Hashing . sha256 ( ) ) . put ( <str> , Hashing . sha384 ( ) ) . put ( <str> , Hashing . sha512 ( ) ) . build ( ) ; public void testHashing ( ) { for ( String stringToTest : INPUTS ) { for ( String algorithmToTest : ALGORITHMS . keySet ( ) ) { assertMessageDigestHashing ( HashTestUtils . ascii ( stringToTest ) , algorithmToTest ) ; } } } public void testPutAfterHash ( ) { Hasher sha1 = Hashing . sha1 ( ) . newHasher ( ) ; assertEquals ( <str> , sha1 . putString ( <str> , Charsets . UTF_8 ) . hash ( ) . toString ( ) ) ; try { sha1 . putInt ( <int> ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } } @SuppressWarnings ( <str> ) public void testHashTwice ( ) { Hasher sha1 = Hashing . sha1 ( ) . newHasher ( ) ; assertEquals ( <str> , sha1 . putString ( <str> , Charsets . UTF_8 ) . hash ( ) . toString ( ) ) ; try { sha1 . hash ( ) ; fail ( ) ; } catch ( IllegalStateException expected ) { } } public void testToString ( ) { assertEquals ( <str> , Hashing . md5 ( ) . toString ( ) ) ; assertEquals ( <str> , Hashing . sha1 ( ) . toString ( ) ) ; assertEquals ( <str> , Hashing . sha256 ( ) . toString ( ) ) ; assertEquals ( <str> , Hashing . sha512 ( ) . toString ( ) ) ; } private static void assertMessageDigestHashing ( byte [ ] input , String algorithmName ) { try { MessageDigest digest = MessageDigest . getInstance ( algorithmName ) ; assertEquals ( HashCode . fromBytes ( digest . digest ( input ) ) , ALGORITHMS . get ( algorithmName ) . hashBytes ( input ) ) ; for ( int bytes = <int> ; bytes < = digest . getDigestLength ( ) ; bytes + + ) { assertEquals ( HashCode . fromBytes ( Arrays . copyOf ( digest . digest ( input ) , bytes ) ) , new MessageDigestHashFunction ( algorithmName , bytes , algorithmName ) . hashBytes ( input ) ) ; } try { int maxSize = digest . getDigestLength ( ) ; new MessageDigestHashFunction ( algorithmName , maxSize + <int> , algorithmName ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } } catch ( NoSuchAlgorithmException nsae ) { throw new AssertionError ( nsae ) ; } } } 

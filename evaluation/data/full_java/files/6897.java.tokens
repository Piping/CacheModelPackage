package org . elasticsearch . monitor . os ; import org . apache . lucene . util . Constants ; import org . elasticsearch . monitor . Probes ; import java . lang . management . ManagementFactory ; import java . lang . management . OperatingSystemMXBean ; import java . lang . reflect . Method ; public class OsProbe { private static final OperatingSystemMXBean osMxBean = ManagementFactory . getOperatingSystemMXBean ( ) ; private static final Method getFreePhysicalMemorySize ; private static final Method getTotalPhysicalMemorySize ; private static final Method getFreeSwapSpaceSize ; private static final Method getTotalSwapSpaceSize ; private static final Method getSystemLoadAverage ; private static final Method getSystemCpuLoad ; static { getFreePhysicalMemorySize = getMethod ( <str> ) ; getTotalPhysicalMemorySize = getMethod ( <str> ) ; getFreeSwapSpaceSize = getMethod ( <str> ) ; getTotalSwapSpaceSize = getMethod ( <str> ) ; getSystemLoadAverage = getMethod ( <str> ) ; getSystemCpuLoad = getMethod ( <str> ) ; } public long getFreePhysicalMemorySize ( ) { if ( getFreePhysicalMemorySize = = null ) { return - <int> ; } try { return ( long ) getFreePhysicalMemorySize . invoke ( osMxBean ) ; } catch ( Throwable t ) { return - <int> ; } } public long getTotalPhysicalMemorySize ( ) { if ( getTotalPhysicalMemorySize = = null ) { return - <int> ; } try { return ( long ) getTotalPhysicalMemorySize . invoke ( osMxBean ) ; } catch ( Throwable t ) { return - <int> ; } } public long getFreeSwapSpaceSize ( ) { if ( getFreeSwapSpaceSize = = null ) { return - <int> ; } try { return ( long ) getFreeSwapSpaceSize . invoke ( osMxBean ) ; } catch ( Throwable t ) { return - <int> ; } } public long getTotalSwapSpaceSize ( ) { if ( getTotalSwapSpaceSize = = null ) { return - <int> ; } try { return ( long ) getTotalSwapSpaceSize . invoke ( osMxBean ) ; } catch ( Throwable t ) { return - <int> ; } } public double getSystemLoadAverage ( ) { if ( getSystemLoadAverage = = null ) { return - <int> ; } try { return ( double ) getSystemLoadAverage . invoke ( osMxBean ) ; } catch ( Throwable t ) { return - <int> ; } } public short getSystemCpuPercent ( ) { return Probes . getLoadAndScaleToPercent ( getSystemCpuLoad , osMxBean ) ; } private static class OsProbeHolder { private final static OsProbe INSTANCE = new OsProbe ( ) ; } public static OsProbe getInstance ( ) { return OsProbeHolder . INSTANCE ; } private OsProbe ( ) { } public OsInfo osInfo ( ) { OsInfo info = new OsInfo ( ) ; info . availableProcessors = Runtime . getRuntime ( ) . availableProcessors ( ) ; info . name = Constants . OS_NAME ; info . arch = Constants . OS_ARCH ; info . version = Constants . OS_VERSION ; return info ; } public OsStats osStats ( ) { OsStats stats = new OsStats ( ) ; stats . timestamp = System . currentTimeMillis ( ) ; stats . cpu = new OsStats . Cpu ( ) ; stats . cpu . percent = getSystemCpuPercent ( ) ; stats . cpu . loadAverage = getSystemLoadAverage ( ) ; OsStats . Mem mem = new OsStats . Mem ( ) ; mem . total = getTotalPhysicalMemorySize ( ) ; mem . free = getFreePhysicalMemorySize ( ) ; stats . mem = mem ; OsStats . Swap swap = new OsStats . Swap ( ) ; swap . total = getTotalSwapSpaceSize ( ) ; swap . free = getFreeSwapSpaceSize ( ) ; stats . swap = swap ; return stats ; } private static Method getMethod ( String methodName ) { try { return Class . forName ( <str> ) . getMethod ( methodName ) ; } catch ( Throwable t ) { return null ; } } } 

package com . google . common . collect . testing . testers ; import static com . google . common . collect . testing . features . CollectionSize . ONE ; import static com . google . common . collect . testing . features . CollectionSize . ZERO ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_KEYS ; import static com . google . common . collect . testing . features . MapFeature . ALLOWS_NULL_VALUES ; import com . google . common . annotations . GwtCompatible ; import com . google . common . collect . testing . AbstractMapTester ; import com . google . common . collect . testing . features . CollectionSize ; import com . google . common . collect . testing . features . MapFeature ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; @GwtCompatible public class MapToStringTester < K , V > extends AbstractMapTester < K , V > { public void testToString_minimal ( ) { assertNotNull ( <str> , getMap ( ) . toString ( ) ) ; } @CollectionSize.Require ( ZERO ) public void testToString_size0 ( ) { assertEquals ( <str> , <str> , getMap ( ) . toString ( ) ) ; } @CollectionSize.Require ( ONE ) public void testToString_size1 ( ) { assertEquals ( <str> , <str> + e0 ( ) + <str> , getMap ( ) . toString ( ) ) ; } @CollectionSize.Require ( absent = ZERO ) @MapFeature.Require ( ALLOWS_NULL_KEYS ) public void testToStringWithNullKey ( ) { initMapWithNullKey ( ) ; testToString_formatting ( ) ; } @CollectionSize.Require ( absent = ZERO ) @MapFeature.Require ( ALLOWS_NULL_VALUES ) public void testToStringWithNullValue ( ) { initMapWithNullValue ( ) ; testToString_formatting ( ) ; } public void testToString_formatting ( ) { assertEquals ( <str> , expectedToString ( getMap ( ) . entrySet ( ) ) , getMap ( ) . toString ( ) ) ; } private String expectedToString ( Set < Entry < K , V > > entries ) { Map < K , V > reference = new LinkedHashMap < K , V > ( ) ; for ( Map . Entry < K , V > entry : entries ) { reference . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return reference . toString ( ) ; } } 

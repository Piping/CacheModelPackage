package org . gradle . tooling . internal . consumer ; import org . gradle . tooling . GradleConnectionException ; import org . gradle . tooling . ModelBuilder ; import org . gradle . tooling . ResultHandler ; import org . gradle . tooling . internal . consumer . async . AsyncConsumerActionExecutor ; import org . gradle . tooling . internal . consumer . connection . ConsumerAction ; import org . gradle . tooling . internal . consumer . connection . ConsumerConnection ; import org . gradle . tooling . internal . consumer . parameters . ConsumerOperationParameters ; import org . gradle . tooling . model . UnsupportedMethodException ; import org . gradle . tooling . model . internal . Exceptions ; import java . util . List ; public class DefaultModelBuilder < T > extends AbstractLongRunningOperation < DefaultModelBuilder < T > > implements ModelBuilder < T > { private final Class < T > modelType ; private final AsyncConsumerActionExecutor connection ; public DefaultModelBuilder ( Class < T > modelType , AsyncConsumerActionExecutor connection , ConnectionParameters parameters ) { super ( parameters ) ; this . modelType = modelType ; this . connection = connection ; operationParamsBuilder . setEntryPoint ( <str> ) ; } @Override protected DefaultModelBuilder < T > getThis ( ) { return this ; } public T get ( ) throws GradleConnectionException { BlockingResultHandler < T > handler = new BlockingResultHandler < T > ( modelType ) ; get ( handler ) ; return handler . getResult ( ) ; } public void get ( final ResultHandler < ? super T > handler ) throws IllegalStateException { final ConsumerOperationParameters operationParameters = getConsumerOperationParameters ( ) ; connection . run ( new ConsumerAction < T > ( ) { public ConsumerOperationParameters getParameters ( ) { return operationParameters ; } public T run ( ConsumerConnection connection ) { T model = connection . run ( modelType , operationParameters ) ; return model ; } } , new ResultHandlerAdapter < T > ( handler ) ) ; } public DefaultModelBuilder < T > forTasks ( String . . . tasks ) { List < String > rationalizedTasks = rationalizeInput ( tasks ) ; operationParamsBuilder . setTasks ( rationalizedTasks ) ; return this ; } @Override public ModelBuilder < T > forTasks ( Iterable < String > tasks ) { operationParamsBuilder . setTasks ( rationalizeInput ( tasks ) ) ; return this ; } private class ResultHandlerAdapter < T > extends org . gradle . tooling . internal . consumer . ResultHandlerAdapter < T > { public ResultHandlerAdapter ( ResultHandler < ? super T > handler ) { super ( handler ) ; } @Override protected String connectionFailureMessage ( Throwable failure ) { String message = String . format ( <str> , modelType . getSimpleName ( ) , connection . getDisplayName ( ) ) ; if ( ! ( failure instanceof UnsupportedMethodException ) & & failure instanceof UnsupportedOperationException ) { message + = <str> + Exceptions . INCOMPATIBLE_VERSION_HINT ; } return message ; } } } 

package org . gradle . internal . resource . transport ; import org . gradle . api . internal . artifacts . ivyservice . CacheLockingManager ; import org . gradle . api . internal . file . TemporaryFileProvider ; import org . gradle . internal . resource . cached . CachedExternalResourceIndex ; import org . gradle . internal . resource . transfer . * ; import org . gradle . logging . ProgressLoggerFactory ; import org . gradle . util . BuildCommencedTimeProvider ; public class ResourceConnectorRepositoryTransport extends AbstractRepositoryTransport { private final ExternalResourceRepository repository ; private final DefaultCacheAwareExternalResourceAccessor resourceAccessor ; public ResourceConnectorRepositoryTransport ( String name , ProgressLoggerFactory progressLoggerFactory , TemporaryFileProvider temporaryFileProvider , CachedExternalResourceIndex < String > cachedExternalResourceIndex , BuildCommencedTimeProvider timeProvider , CacheLockingManager cacheLockingManager , ExternalResourceConnector connector ) { super ( name ) ; ProgressLoggingExternalResourceUploader loggingUploader = new ProgressLoggingExternalResourceUploader ( connector , progressLoggerFactory ) ; ProgressLoggingExternalResourceAccessor loggingAccessor = new ProgressLoggingExternalResourceAccessor ( connector , progressLoggerFactory ) ; repository = new DefaultExternalResourceRepository ( name , connector , connector , connector , loggingAccessor , loggingUploader ) ; resourceAccessor = new DefaultCacheAwareExternalResourceAccessor ( repository , cachedExternalResourceIndex , timeProvider , temporaryFileProvider , cacheLockingManager ) ; } public ExternalResourceRepository getRepository ( ) { return repository ; } public CacheAwareExternalResourceAccessor getResourceAccessor ( ) { return resourceAccessor ; } public boolean isLocal ( ) { return false ; } } 

package org . nd4j . linalg . benchmark . app ; import org . kohsuke . args4j . CmdLineException ; import org . kohsuke . args4j . CmdLineParser ; import org . kohsuke . args4j . Option ; import org . nd4j . linalg . benchmark . api . BenchMarkPerformer ; import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . factory . Nd4jBackend ; import org . reflections . Reflections ; import java . lang . reflect . Constructor ; import java . lang . reflect . Modifier ; import java . util . * ; import java . util . concurrent . TimeUnit ; public class BenchmarkRunnerApp { @Option ( name = <str> , usage = <str> , aliases = <str> ) private int nTrials = <int> ; @Option ( name = <str> , usage = <str> , aliases = <str> ) private String benchmarksToRun ; public void doMain ( String [ ] args ) throws Exception { Reflections reflections = new Reflections ( ) ; CmdLineParser parser = new CmdLineParser ( this ) ; try { parser . parseArgument ( args ) ; } catch ( CmdLineException e ) { System . err . println ( e . getMessage ( ) ) ; return ; } ServiceLoader < Nd4jBackend > backends = ServiceLoader . load ( Nd4jBackend . class ) ; Iterator < Nd4jBackend > backendIterator = backends . iterator ( ) ; List < Nd4jBackend > allBackends = new ArrayList < > ( ) ; Set < String > run = new HashSet < > ( ) ; if ( benchmarksToRun ! = null ) { String [ ] split = benchmarksToRun . split ( <str> ) ; for ( String s : split ) run . add ( s ) ; } while ( backendIterator . hasNext ( ) ) allBackends . add ( backendIterator . next ( ) ) ; Set < Class < ? extends BenchMarkPerformer > > performers = reflections . getSubTypesOf ( BenchMarkPerformer . class ) ; for ( Class < ? extends BenchMarkPerformer > perfClazz : performers ) { if ( Modifier . isAbstract ( perfClazz . getModifiers ( ) ) | | ! run . isEmpty ( ) & & ! run . contains ( perfClazz . getName ( ) ) ) continue ; String begin = <str> ; String end = <str> ; System . out . println ( begin + <str> + perfClazz . getName ( ) + <str> + end ) ; for ( Nd4jBackend backend : backends ) { Nd4j nd4j = new Nd4j ( ) ; nd4j . initWithBackend ( backend ) ; Constructor < BenchMarkPerformer > performerConstructor = ( Constructor < BenchMarkPerformer > ) perfClazz . getConstructor ( int . class ) ; BenchMarkPerformer performer = performerConstructor . newInstance ( nTrials ) ; System . out . println ( <str> + backend . getClass ( ) . getName ( ) ) ; performer . run ( backend ) ; System . out . println ( <str> + backend . getClass ( ) . getName ( ) + <str> + performer . averageTime ( ) + <str> + TimeUnit . MILLISECONDS . convert ( performer . averageTime ( ) , TimeUnit . NANOSECONDS ) ) ; } System . out . println ( begin + end ) ; } } public static void main ( String [ ] args ) throws Exception { new BenchmarkRunnerApp ( ) . doMain ( args ) ; } } 

package org . elasticsearch . cloud . aws . blobstore ; import org . elasticsearch . test . ESTestCase ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . Arrays ; import static org . elasticsearch . common . io . Streams . copy ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . is ; public class S3OutputStreamTests extends ESTestCase { private static final int BUFFER_SIZE = S3BlobStore . MIN_BUFFER_SIZE . bytesAsInt ( ) ; public void testWriteLessDataThanBufferSize ( ) throws IOException { MockDefaultS3OutputStream out = newS3OutputStream ( BUFFER_SIZE ) ; byte [ ] content = randomUnicodeOfLengthBetween ( <int> , <int> ) . getBytes ( <str> ) ; copy ( content , out ) ; assertThat ( out . getLength ( ) , equalTo ( ( long ) content . length ) ) ; assertThat ( Arrays . equals ( content , out . toByteArray ( ) ) , equalTo ( true ) ) ; assertThat ( out . getBufferSize ( ) , equalTo ( BUFFER_SIZE ) ) ; assertThat ( out . getFlushCount ( ) , equalTo ( <int> ) ) ; assertThat ( out . getNumberOfUploadRequests ( ) , equalTo ( <int> ) ) ; assertFalse ( out . isMultipart ( ) ) ; } public void testWriteSameDataThanBufferSize ( ) throws IOException { int size = randomIntBetween ( BUFFER_SIZE , <int> * BUFFER_SIZE ) ; MockDefaultS3OutputStream out = newS3OutputStream ( size ) ; ByteArrayOutputStream content = new ByteArrayOutputStream ( size ) ; for ( int i = <int> ; i < size ; i + + ) { content . write ( randomByte ( ) ) ; } copy ( content . toByteArray ( ) , out ) ; assertThat ( out . getLength ( ) , equalTo ( ( long ) size ) ) ; assertThat ( Arrays . equals ( content . toByteArray ( ) , out . toByteArray ( ) ) , equalTo ( true ) ) ; assertThat ( out . getBufferSize ( ) , equalTo ( size ) ) ; assertThat ( out . getFlushCount ( ) , equalTo ( <int> ) ) ; assertThat ( out . getNumberOfUploadRequests ( ) , equalTo ( <int> ) ) ; assertFalse ( out . isMultipart ( ) ) ; } public void testWriteExactlyNTimesMoreDataThanBufferSize ( ) throws IOException { int n = randomIntBetween ( <int> , <int> ) ; int length = n * BUFFER_SIZE ; ByteArrayOutputStream content = new ByteArrayOutputStream ( length ) ; for ( int i = <int> ; i < length ; i + + ) { content . write ( randomByte ( ) ) ; } MockDefaultS3OutputStream out = newS3OutputStream ( BUFFER_SIZE ) ; copy ( content . toByteArray ( ) , out ) ; assertThat ( out . getLength ( ) , equalTo ( ( long ) length ) ) ; assertThat ( Arrays . equals ( content . toByteArray ( ) , out . toByteArray ( ) ) , equalTo ( true ) ) ; assertThat ( out . getBufferSize ( ) , equalTo ( BUFFER_SIZE ) ) ; assertThat ( out . getFlushCount ( ) , equalTo ( n ) ) ; assertThat ( out . getNumberOfUploadRequests ( ) , equalTo ( n ) ) ; assertTrue ( out . isMultipart ( ) ) ; } public void testWriteRandomNumberOfBytes ( ) throws IOException { Integer randomBufferSize = randomIntBetween ( BUFFER_SIZE , <int> * BUFFER_SIZE ) ; MockDefaultS3OutputStream out = newS3OutputStream ( randomBufferSize ) ; Integer randomLength = randomIntBetween ( <int> , <int> * BUFFER_SIZE ) ; ByteArrayOutputStream content = new ByteArrayOutputStream ( randomLength ) ; for ( int i = <int> ; i < randomLength ; i + + ) { content . write ( randomByte ( ) ) ; } copy ( content . toByteArray ( ) , out ) ; assertThat ( out . getLength ( ) , equalTo ( ( long ) randomLength ) ) ; assertThat ( Arrays . equals ( content . toByteArray ( ) , out . toByteArray ( ) ) , equalTo ( true ) ) ; assertThat ( out . getBufferSize ( ) , equalTo ( randomBufferSize ) ) ; int times = ( int ) Math . ceil ( randomLength . doubleValue ( ) / randomBufferSize . doubleValue ( ) ) ; assertThat ( out . getFlushCount ( ) , equalTo ( times ) ) ; if ( times > <int> ) { assertTrue ( out . isMultipart ( ) ) ; } else { assertFalse ( out . isMultipart ( ) ) ; } } public void testWrongBufferSize ( ) throws IOException { Integer randomBufferSize = randomIntBetween ( <int> , <int> * <int> * <int> ) ; try { newS3OutputStream ( randomBufferSize ) ; fail ( <str> ) ; } catch ( IllegalArgumentException e ) { assertThat ( e . getMessage ( ) , is ( <str> ) ) ; } } private MockDefaultS3OutputStream newS3OutputStream ( int bufferSizeInBytes ) { return new MockDefaultS3OutputStream ( bufferSizeInBytes ) ; } } 
